// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8631 0 0
// PrepareAmerican ;
 100: CALL 5251 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 25383 0 2
// if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 255
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: PUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL_OW 263
2749: PUSH
2750: LD_INT 3
2752: EQUAL
2753: AND
2754: IFFALSE 2764
// comp_tested := true ;
2756: LD_ADDR_EXP 22
2760: PUSH
2761: LD_INT 1
2763: ST_TO_ADDR
// end ;
2764: PPOPN 2
2766: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2767: LD_VAR 0 1
2771: PUSH
2772: LD_INT 22
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 21
2784: PUSH
2785: LD_INT 3
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IN
2801: IFFALSE 2879
// if attacked = false and sikorski_ar = false then
2803: LD_EXP 15
2807: PUSH
2808: LD_INT 0
2810: EQUAL
2811: PUSH
2812: LD_EXP 12
2816: PUSH
2817: LD_INT 0
2819: EQUAL
2820: AND
2821: IFFALSE 2879
// begin attacked := true ;
2823: LD_ADDR_EXP 15
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// if IsInUnit ( donald ) then
2831: LD_EXP 13
2835: PPUSH
2836: CALL_OW 310
2840: IFFALSE 2856
// SayRadio ( donald , DGammaF ) else
2842: LD_EXP 13
2846: PPUSH
2847: LD_STRING DGammaF
2849: PPUSH
2850: CALL_OW 94
2854: GO 2879
// if IsInUnit ( van ) then
2856: LD_EXP 14
2860: PPUSH
2861: CALL_OW 310
2865: IFFALSE 2879
// SayRadio ( van , DGammaM ) ;
2867: LD_EXP 14
2871: PPUSH
2872: LD_STRING DGammaM
2874: PPUSH
2875: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2879: LD_VAR 0 1
2883: PUSH
2884: LD_INT 33
2886: PUSH
2887: LD_INT 2
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 69
2898: IN
2899: IFFALSE 2910
// ComUnlink ( un ) ;
2901: LD_VAR 0 1
2905: PPUSH
2906: CALL_OW 136
// end ;
2910: PPOPN 1
2912: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2913: LD_VAR 0 2
2917: PPUSH
2918: CALL_OW 258
2922: PUSH
2923: LD_INT 1
2925: EQUAL
2926: IFFALSE 2940
// Say ( sci , Dsci3 ) ;
2928: LD_VAR 0 2
2932: PPUSH
2933: LD_STRING Dsci3
2935: PPUSH
2936: CALL_OW 88
// end ;
2940: PPOPN 2
2942: END
// on BuildingComplete ( b ) do var i ;
2943: LD_INT 0
2945: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 266
2955: PUSH
2956: LD_INT 0
2958: EQUAL
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 255
2969: PUSH
2970: LD_INT 3
2972: EQUAL
2973: AND
2974: PUSH
2975: LD_EXP 6
2979: PUSH
2980: LD_INT 0
2982: EQUAL
2983: AND
2984: IFFALSE 3048
// begin SetBName ( b , kalinin ) ;
2986: LD_VAR 0 1
2990: PPUSH
2991: LD_STRING kalinin
2993: PPUSH
2994: CALL_OW 500
// dep_x := GetX ( b ) ;
2998: LD_ADDR_EXP 7
3002: PUSH
3003: LD_VAR 0 1
3007: PPUSH
3008: CALL_OW 250
3012: ST_TO_ADDR
// dep_y := GetY ( b ) ;
3013: LD_ADDR_EXP 8
3017: PUSH
3018: LD_VAR 0 1
3022: PPUSH
3023: CALL_OW 251
3027: ST_TO_ADDR
// depot_rdy := true ;
3028: LD_ADDR_EXP 6
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3036: LD_EXP 2
3040: PPUSH
3041: LD_STRING Dpop3
3043: PPUSH
3044: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 266
3057: PUSH
3058: LD_INT 6
3060: EQUAL
3061: PUSH
3062: LD_VAR 0 1
3066: PPUSH
3067: CALL_OW 255
3071: PUSH
3072: LD_INT 3
3074: EQUAL
3075: AND
3076: PUSH
3077: LD_EXP 21
3081: PUSH
3082: LD_INT 0
3084: EQUAL
3085: AND
3086: IFFALSE 3181
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3088: LD_INT 22
3090: PUSH
3091: LD_INT 3
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 25
3100: PUSH
3101: LD_INT 4
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_INT 0
3119: GREATER
3120: IFFALSE 3181
// begin event_comp := true ;
3122: LD_ADDR_EXP 21
3126: PUSH
3127: LD_INT 1
3129: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3130: LD_INT 22
3132: PUSH
3133: LD_INT 3
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 25
3142: PUSH
3143: LD_INT 4
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 26
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_STRING Dsci1
3176: PPUSH
3177: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 266
3190: PUSH
3191: LD_INT 32
3193: EQUAL
3194: PUSH
3195: LD_VAR 0 1
3199: PPUSH
3200: CALL_OW 255
3204: PUSH
3205: LD_INT 1
3207: EQUAL
3208: AND
3209: IFFALSE 3274
// begin RaiseSailEvent ( 6 ) ;
3211: LD_INT 6
3213: PPUSH
3214: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3218: LD_VAR 0 1
3222: PPUSH
3223: LD_EXP 18
3227: PUSH
3228: LD_INT 4
3230: ARRAY
3231: PPUSH
3232: CALL_OW 208
// for i = 1 to 4 do
3236: LD_ADDR_VAR 0 2
3240: PUSH
3241: DOUBLE
3242: LD_INT 1
3244: DEC
3245: ST_TO_ADDR
3246: LD_INT 4
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3272
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3252: LD_ADDR_EXP 18
3256: PUSH
3257: LD_EXP 18
3261: PPUSH
3262: LD_INT 1
3264: PPUSH
3265: CALL_OW 3
3269: ST_TO_ADDR
3270: GO 3249
3272: POP
3273: POP
// end ; end ;
3274: PPOPN 2
3276: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3277: LD_VAR 0 1
3281: PPUSH
3282: CALL 25263 0 1
// if un in Patrol then
3286: LD_VAR 0 1
3290: PUSH
3291: LD_EXP 17
3295: IN
3296: IFFALSE 3314
// Patrol := Patrol diff un ;
3298: LD_ADDR_EXP 17
3302: PUSH
3303: LD_EXP 17
3307: PUSH
3308: LD_VAR 0 1
3312: DIFF
3313: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3314: LD_VAR 0 1
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: IN
3348: IFFALSE 3434
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3350: LD_ADDR_EXP 18
3354: PUSH
3355: LD_EXP 18
3359: PUSH
3360: LD_VAR 0 1
3364: PPUSH
3365: CALL_OW 250
3369: ADD
3370: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3371: LD_ADDR_EXP 18
3375: PUSH
3376: LD_EXP 18
3380: PUSH
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 251
3390: ADD
3391: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3392: LD_ADDR_EXP 18
3396: PUSH
3397: LD_EXP 18
3401: PUSH
3402: LD_VAR 0 1
3406: PPUSH
3407: CALL_OW 254
3411: ADD
3412: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3413: LD_ADDR_EXP 18
3417: PUSH
3418: LD_EXP 18
3422: PUSH
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 269
3432: ADD
3433: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3434: LD_VAR 0 1
3438: PUSH
3439: LD_INT 33
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: LD_INT 34
3454: PUSH
3455: LD_INT 13
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 69
3474: IN
3475: IFFALSE 3491
// new_veh := new_veh + 1 ;
3477: LD_ADDR_EXP 19
3481: PUSH
3482: LD_EXP 19
3486: PUSH
3487: LD_INT 1
3489: PLUS
3490: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3491: LD_VAR 0 1
3495: PUSH
3496: LD_INT 34
3498: PUSH
3499: LD_INT 13
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: IN
3511: IFFALSE 3532
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3513: LD_INT 26
3515: PPUSH
3516: LD_INT 3
3518: PPUSH
3519: LD_INT 2
3521: PPUSH
3522: LD_INT 2
3524: PPUSH
3525: LD_INT 13
3527: PPUSH
3528: CALL_OW 185
// if un = am_dep then
3532: LD_VAR 0 1
3536: PUSH
3537: LD_INT 25
3539: EQUAL
3540: IFFALSE 3708
// begin SayRadio ( Platonov , DPlat ) ;
3542: LD_EXP 4
3546: PPUSH
3547: LD_STRING DPlat
3549: PPUSH
3550: CALL_OW 94
// if timer <= 30 30$00 then
3554: LD_EXP 24
3558: PUSH
3559: LD_INT 63000
3561: LESSEQUAL
3562: IFFALSE 3576
// AddMedal ( gamma_med3 , 1 ) else
3564: LD_STRING gamma_med3
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 101
3574: GO 3626
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3576: LD_EXP 24
3580: PUSH
3581: LD_INT 105000
3583: PUSH
3584: LD_INT 88200
3586: PUSH
3587: LD_INT 73500
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: LD_EXP 1
3599: ARRAY
3600: LESSEQUAL
3601: IFFALSE 3615
// AddMedal ( gamma_med3 , 2 ) else
3603: LD_STRING gamma_med3
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 101
3613: GO 3626
// AddMedal ( gamma_med3 , - 1 ) ;
3615: LD_STRING gamma_med3
3617: PPUSH
3618: LD_INT 1
3620: NEG
3621: PPUSH
3622: CALL_OW 101
// if not comp_tested then
3626: LD_EXP 22
3630: NOT
3631: IFFALSE 3646
// AddMedal ( gamma_med2 , - 1 ) else
3633: LD_STRING gamma_med2
3635: PPUSH
3636: LD_INT 1
3638: NEG
3639: PPUSH
3640: CALL_OW 101
3644: GO 3656
// AddMedal ( gamma_med2 , 1 ) ;
3646: LD_STRING gamma_med2
3648: PPUSH
3649: LD_INT 1
3651: PPUSH
3652: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3656: LD_EXP 9
3660: PPUSH
3661: CALL_OW 301
3665: PUSH
3666: LD_EXP 23
3670: NOT
3671: AND
3672: IFFALSE 3686
// AddMedal ( gamma_med1 , 1 ) else
3674: LD_STRING gamma_med1
3676: PPUSH
3677: LD_INT 1
3679: PPUSH
3680: CALL_OW 101
3684: GO 3697
// AddMedal ( gamma_med1 , - 1 ) ;
3686: LD_STRING gamma_med1
3688: PPUSH
3689: LD_INT 1
3691: NEG
3692: PPUSH
3693: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3697: LD_STRING GAMMA_MEDALS
3699: PPUSH
3700: CALL_OW 102
// YouWin ;
3704: CALL_OW 103
// end ; if un = commander then
3708: LD_VAR 0 1
3712: PUSH
3713: LD_EXP 3
3717: EQUAL
3718: IFFALSE 3727
// YouLost ( comml ) ;
3720: LD_STRING comml
3722: PPUSH
3723: CALL_OW 104
// if un = sikorski then
3727: LD_VAR 0 1
3731: PUSH
3732: LD_EXP 9
3736: EQUAL
3737: IFFALSE 3749
// AddMedal ( gamma_med1 , 1 ) ;
3739: LD_STRING gamma_med1
3741: PPUSH
3742: LD_INT 1
3744: PPUSH
3745: CALL_OW 101
// end ;
3749: PPOPN 1
3751: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3752: LD_INT 0
3754: PPUSH
3755: PPUSH
3756: PPUSH
3757: PPUSH
3758: PPUSH
3759: PPUSH
3760: PPUSH
3761: PPUSH
3762: PPUSH
// begin if event = 1 then
3763: LD_VAR 0 1
3767: PUSH
3768: LD_INT 1
3770: EQUAL
3771: IFFALSE 4068
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3773: LD_ADDR_VAR 0 4
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 1
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 21
3790: PUSH
3791: LD_INT 3
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 3
3800: PUSH
3801: LD_INT 24
3803: PUSH
3804: LD_INT 1000
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3825: LD_ADDR_VAR 0 8
3829: PUSH
3830: LD_INT 22
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 25
3842: PUSH
3843: LD_INT 2
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_INT 24
3852: PUSH
3853: LD_INT 1000
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3873: LD_ADDR_VAR 0 9
3877: PUSH
3878: LD_INT 22
3880: PUSH
3881: LD_INT 1
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: LD_INT 34
3890: PUSH
3891: LD_INT 13
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: CALL_OW 69
3906: ST_TO_ADDR
// if engs > 0 then
3907: LD_VAR 0 8
3911: PUSH
3912: LD_INT 0
3914: GREATER
3915: IFFALSE 4020
// for i = 1 to engs do
3917: LD_ADDR_VAR 0 2
3921: PUSH
3922: DOUBLE
3923: LD_INT 1
3925: DEC
3926: ST_TO_ADDR
3927: LD_VAR 0 8
3931: PUSH
3932: FOR_TO
3933: IFFALSE 4018
// begin if IsInUnit ( engs [ i ] ) then
3935: LD_VAR 0 8
3939: PUSH
3940: LD_VAR 0 2
3944: ARRAY
3945: PPUSH
3946: CALL_OW 310
3950: IFFALSE 3967
// ComExitBuilding ( engs [ i ] ) ;
3952: LD_VAR 0 8
3956: PUSH
3957: LD_VAR 0 2
3961: ARRAY
3962: PPUSH
3963: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3967: LD_INT 7
3969: PPUSH
3970: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3974: LD_VAR 0 8
3978: PUSH
3979: LD_VAR 0 2
3983: ARRAY
3984: PPUSH
3985: CALL_OW 314
3989: NOT
3990: IFFALSE 4016
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3992: LD_VAR 0 8
3996: PUSH
3997: LD_VAR 0 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 4
4007: PUSH
4008: LD_INT 1
4010: ARRAY
4011: PPUSH
4012: CALL_OW 130
// end ;
4016: GO 3932
4018: POP
4019: POP
// if crane > 0 then
4020: LD_VAR 0 9
4024: PUSH
4025: LD_INT 0
4027: GREATER
4028: IFFALSE 4068
// if not HasTask ( crane [ 1 ] ) then
4030: LD_VAR 0 9
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: PPUSH
4039: CALL_OW 314
4043: NOT
4044: IFFALSE 4068
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4046: LD_VAR 0 9
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: LD_VAR 0 4
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: CALL_OW 130
// end ; if event = 2 then
4068: LD_VAR 0 1
4072: PUSH
4073: LD_INT 2
4075: EQUAL
4076: IFFALSE 4198
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4078: LD_ADDR_VAR 0 8
4082: PUSH
4083: LD_INT 22
4085: PUSH
4086: LD_INT 1
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 25
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PPUSH
4107: CALL_OW 69
4111: ST_TO_ADDR
// if engs > 0 then
4112: LD_VAR 0 8
4116: PUSH
4117: LD_INT 0
4119: GREATER
4120: IFFALSE 4198
// for i = 1 to engs do
4122: LD_ADDR_VAR 0 2
4126: PUSH
4127: DOUBLE
4128: LD_INT 1
4130: DEC
4131: ST_TO_ADDR
4132: LD_VAR 0 8
4136: PUSH
4137: FOR_TO
4138: IFFALSE 4196
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4140: LD_VAR 0 8
4144: PUSH
4145: LD_VAR 0 2
4149: ARRAY
4150: PPUSH
4151: CALL_OW 314
4155: NOT
4156: PUSH
4157: LD_VAR 0 8
4161: PUSH
4162: LD_VAR 0 2
4166: ARRAY
4167: PPUSH
4168: CALL_OW 310
4172: NOT
4173: AND
4174: IFFALSE 4194
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4176: LD_VAR 0 8
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PPUSH
4187: LD_INT 25
4189: PPUSH
4190: CALL_OW 120
4194: GO 4137
4196: POP
4197: POP
// end ; if event = 3 then
4198: LD_VAR 0 1
4202: PUSH
4203: LD_INT 3
4205: EQUAL
4206: IFFALSE 4570
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4208: LD_ADDR_VAR 0 4
4212: PUSH
4213: LD_INT 22
4215: PUSH
4216: LD_INT 1
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 21
4225: PUSH
4226: LD_INT 1
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: LD_INT 25
4238: PUSH
4239: LD_INT 4
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: LD_INT 24
4255: PUSH
4256: LD_INT 800
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: PPUSH
4276: CALL_OW 69
4280: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4281: LD_ADDR_VAR 0 5
4285: PUSH
4286: LD_INT 22
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 25
4298: PUSH
4299: LD_INT 4
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: ST_TO_ADDR
// if filter > 0 then
4315: LD_VAR 0 4
4319: PUSH
4320: LD_INT 0
4322: GREATER
4323: IFFALSE 4512
// begin for i = 1 to doc do
4325: LD_ADDR_VAR 0 2
4329: PUSH
4330: DOUBLE
4331: LD_INT 1
4333: DEC
4334: ST_TO_ADDR
4335: LD_VAR 0 5
4339: PUSH
4340: FOR_TO
4341: IFFALSE 4441
// begin if IsInUnit ( doc [ i ] ) then
4343: LD_VAR 0 5
4347: PUSH
4348: LD_VAR 0 2
4352: ARRAY
4353: PPUSH
4354: CALL_OW 310
4358: IFFALSE 4375
// ComExitBuilding ( doc [ i ] ) ;
4360: LD_VAR 0 5
4364: PUSH
4365: LD_VAR 0 2
4369: ARRAY
4370: PPUSH
4371: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4375: LD_VAR 0 4
4379: PUSH
4380: LD_INT 1
4382: ARRAY
4383: PPUSH
4384: LD_INT 46
4386: PPUSH
4387: CALL_OW 296
4391: PUSH
4392: LD_INT 10
4394: LESS
4395: PUSH
4396: LD_VAR 0 5
4400: PUSH
4401: LD_VAR 0 2
4405: ARRAY
4406: PPUSH
4407: CALL_OW 314
4411: NOT
4412: AND
4413: IFFALSE 4439
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4415: LD_VAR 0 5
4419: PUSH
4420: LD_VAR 0 2
4424: ARRAY
4425: PPUSH
4426: LD_VAR 0 4
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: PPUSH
4435: CALL_OW 128
// end ;
4439: GO 4340
4441: POP
4442: POP
// for i = 1 to filter do
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: DOUBLE
4449: LD_INT 1
4451: DEC
4452: ST_TO_ADDR
4453: LD_VAR 0 4
4457: PUSH
4458: FOR_TO
4459: IFFALSE 4508
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4461: LD_VAR 0 4
4465: PUSH
4466: LD_VAR 0 2
4470: ARRAY
4471: PPUSH
4472: LD_INT 46
4474: PPUSH
4475: CALL_OW 296
4479: PUSH
4480: LD_INT 10
4482: GREATER
4483: IFFALSE 4506
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4485: LD_VAR 0 4
4489: PUSH
4490: LD_VAR 0 2
4494: ARRAY
4495: PPUSH
4496: LD_INT 47
4498: PPUSH
4499: LD_INT 12
4501: PPUSH
4502: CALL_OW 111
4506: GO 4458
4508: POP
4509: POP
// end else
4510: GO 4570
// for i = 1 to doc do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: DOUBLE
4518: LD_INT 1
4520: DEC
4521: ST_TO_ADDR
4522: LD_VAR 0 5
4526: PUSH
4527: FOR_TO
4528: IFFALSE 4568
// if not IsInUnit ( doc [ i ] ) then
4530: LD_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: ARRAY
4540: PPUSH
4541: CALL_OW 310
4545: NOT
4546: IFFALSE 4566
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4548: LD_VAR 0 5
4552: PUSH
4553: LD_VAR 0 2
4557: ARRAY
4558: PPUSH
4559: LD_INT 46
4561: PPUSH
4562: CALL_OW 120
4566: GO 4527
4568: POP
4569: POP
// end ; if event = 4 then
4570: LD_VAR 0 1
4574: PUSH
4575: LD_INT 4
4577: EQUAL
4578: IFFALSE 4829
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4580: LD_ADDR_VAR 0 6
4584: PUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 30
4597: PUSH
4598: LD_INT 5
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: ST_TO_ADDR
// for i = 1 to bac do
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_VAR 0 6
4628: PUSH
4629: FOR_TO
4630: IFFALSE 4671
// if UnitsInside ( bac [ i ] ) < 6 then
4632: LD_VAR 0 6
4636: PUSH
4637: LD_VAR 0 2
4641: ARRAY
4642: PPUSH
4643: CALL_OW 313
4647: PUSH
4648: LD_INT 6
4650: LESS
4651: IFFALSE 4669
// place := bac [ i ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: LD_VAR 0 6
4662: PUSH
4663: LD_VAR 0 2
4667: ARRAY
4668: ST_TO_ADDR
4669: GO 4629
4671: POP
4672: POP
// if place then
4673: LD_VAR 0 7
4677: IFFALSE 4829
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4679: LD_ADDR_VAR 0 4
4683: PUSH
4684: LD_INT 22
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 25
4699: PUSH
4700: LD_INT 1
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 25
4709: PUSH
4710: LD_INT 5
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 24
4724: PUSH
4725: LD_INT 1000
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: EMPTY
4738: LIST
4739: PPUSH
4740: CALL_OW 69
4744: PUSH
4745: LD_EXP 17
4749: DIFF
4750: ST_TO_ADDR
// for i = 1 to filter do
4751: LD_ADDR_VAR 0 2
4755: PUSH
4756: DOUBLE
4757: LD_INT 1
4759: DEC
4760: ST_TO_ADDR
4761: LD_VAR 0 4
4765: PUSH
4766: FOR_TO
4767: IFFALSE 4827
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4769: LD_VAR 0 4
4773: PUSH
4774: LD_VAR 0 2
4778: ARRAY
4779: PPUSH
4780: CALL_OW 310
4784: NOT
4785: PUSH
4786: LD_VAR 0 4
4790: PUSH
4791: LD_VAR 0 2
4795: ARRAY
4796: PPUSH
4797: CALL_OW 314
4801: NOT
4802: AND
4803: IFFALSE 4825
// ComEnterUnit ( filter [ i ] , place ) ;
4805: LD_VAR 0 4
4809: PUSH
4810: LD_VAR 0 2
4814: ARRAY
4815: PPUSH
4816: LD_VAR 0 7
4820: PPUSH
4821: CALL_OW 120
4825: GO 4766
4827: POP
4828: POP
// end ; end ; if event = 5 then
4829: LD_VAR 0 1
4833: PUSH
4834: LD_INT 5
4836: EQUAL
4837: IFFALSE 4991
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4839: LD_INT 12
4841: PPUSH
4842: LD_INT 81
4844: PUSH
4845: LD_INT 1
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 70
4856: PUSH
4857: LD_INT 0
4859: EQUAL
4860: IFFALSE 4991
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4862: LD_ADDR_VAR 0 8
4866: PUSH
4867: LD_INT 22
4869: PUSH
4870: LD_INT 1
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PPUSH
4891: CALL_OW 69
4895: ST_TO_ADDR
// if engs > 0 then
4896: LD_VAR 0 8
4900: PUSH
4901: LD_INT 0
4903: GREATER
4904: IFFALSE 4991
// for i = 1 to engs do
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: DOUBLE
4912: LD_INT 1
4914: DEC
4915: ST_TO_ADDR
4916: LD_VAR 0 8
4920: PUSH
4921: FOR_TO
4922: IFFALSE 4989
// if not HasTask ( engs [ i ] ) then
4924: LD_VAR 0 8
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PPUSH
4935: CALL_OW 314
4939: NOT
4940: IFFALSE 4987
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4942: LD_VAR 0 8
4946: PUSH
4947: LD_VAR 0 2
4951: ARRAY
4952: PPUSH
4953: LD_INT 32
4955: PPUSH
4956: LD_EXP 18
4960: PUSH
4961: LD_INT 1
4963: ARRAY
4964: PPUSH
4965: LD_EXP 18
4969: PUSH
4970: LD_INT 2
4972: ARRAY
4973: PPUSH
4974: LD_EXP 18
4978: PUSH
4979: LD_INT 3
4981: ARRAY
4982: PPUSH
4983: CALL_OW 145
4987: GO 4921
4989: POP
4990: POP
// end ; end ; if event = 6 then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 6
4998: EQUAL
4999: IFFALSE 5183
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
5001: LD_ADDR_VAR 0 6
5005: PUSH
5006: LD_INT 22
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 30
5018: PUSH
5019: LD_INT 5
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 69
5034: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5035: LD_VAR 0 6
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 30
5052: PUSH
5053: LD_INT 32
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 58
5062: PUSH
5063: EMPTY
5064: LIST
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: PPUSH
5074: CALL_OW 69
5078: PUSH
5079: LD_INT 0
5081: GREATER
5082: AND
5083: IFFALSE 5183
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5085: LD_ADDR_VAR 0 10
5089: PUSH
5090: LD_INT 22
5092: PUSH
5093: LD_INT 1
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: LD_INT 30
5102: PUSH
5103: LD_INT 32
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 58
5112: PUSH
5113: EMPTY
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: PUSH
5121: EMPTY
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5133: LD_ADDR_VAR 0 3
5137: PUSH
5138: LD_VAR 0 6
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 313
5151: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 1
5159: ARRAY
5160: PPUSH
5161: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 1
5172: ARRAY
5173: PPUSH
5174: LD_VAR 0 10
5178: PPUSH
5179: CALL_OW 180
// end ; end ; end ;
5183: PPOPN 10
5185: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5186: LD_VAR 0 1
5190: PUSH
5191: LD_INT 1
5193: EQUAL
5194: PUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_INT 3
5202: EQUAL
5203: AND
5204: IFFALSE 5214
// contact_am := true ;
5206: LD_ADDR_EXP 16
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ;
5214: PPOPN 2
5216: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5217: LD_VAR 0 1
5221: PPUSH
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_VAR 0 3
5231: PPUSH
5232: CALL 25359 0 3
// end ;
5236: PPOPN 3
5238: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5239: LD_VAR 0 1
5243: PPUSH
5244: CALL 25367 0 1
// end ; end_of_file
5248: PPOPN 1
5250: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5251: LD_INT 0
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5261: LD_ADDR_VAR 0 5
5265: PUSH
5266: LD_INT 5
5268: PUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: PUSH
5280: LD_EXP 1
5284: ARRAY
5285: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5286: LD_ADDR_VAR 0 6
5290: PUSH
5291: LD_INT 4
5293: PUSH
5294: LD_INT 4
5296: PUSH
5297: LD_INT 4
5299: PUSH
5300: LD_INT 5
5302: PUSH
5303: LD_INT 5
5305: PUSH
5306: LD_INT 5
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: ST_TO_ADDR
// SForce := [ ] ;
5321: LD_ADDR_EXP 11
5325: PUSH
5326: EMPTY
5327: ST_TO_ADDR
// Sikorski_Ar := false ;
5328: LD_ADDR_EXP 12
5332: PUSH
5333: LD_INT 0
5335: ST_TO_ADDR
// attacked := false ;
5336: LD_ADDR_EXP 15
5340: PUSH
5341: LD_INT 0
5343: ST_TO_ADDR
// contact_am := false ;
5344: LD_ADDR_EXP 16
5348: PUSH
5349: LD_INT 0
5351: ST_TO_ADDR
// patrol := [ ] ;
5352: LD_ADDR_EXP 17
5356: PUSH
5357: EMPTY
5358: ST_TO_ADDR
// gamma_towers := [ ] ;
5359: LD_ADDR_EXP 18
5363: PUSH
5364: EMPTY
5365: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5366: LD_INT 25
5368: PPUSH
5369: LD_STRING gamma
5371: PPUSH
5372: CALL_OW 500
// uc_side := 1 ;
5376: LD_ADDR_OWVAR 20
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// uc_nation := 1 ;
5384: LD_ADDR_OWVAR 21
5388: PUSH
5389: LD_INT 1
5391: ST_TO_ADDR
// hc_importance := 0 ;
5392: LD_ADDR_OWVAR 32
5396: PUSH
5397: LD_INT 0
5399: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5400: LD_ADDR_OWVAR 26
5404: PUSH
5405: LD_STRING Jeremy Sikorski
5407: ST_TO_ADDR
// hc_gallery := us ;
5408: LD_ADDR_OWVAR 33
5412: PUSH
5413: LD_STRING us
5415: ST_TO_ADDR
// hc_face_number := 19 ;
5416: LD_ADDR_OWVAR 34
5420: PUSH
5421: LD_INT 19
5423: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5424: LD_ADDR_OWVAR 31
5428: PUSH
5429: LD_VAR 0 5
5433: PPUSH
5434: LD_VAR 0 5
5438: PUSH
5439: LD_INT 2
5441: PLUS
5442: PPUSH
5443: CALL_OW 12
5447: PUSH
5448: LD_INT 4
5450: PUSH
5451: LD_INT 6
5453: PUSH
5454: LD_INT 3
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: ST_TO_ADDR
// hc_sex := sex_male ;
5463: LD_ADDR_OWVAR 27
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// hc_class := 1 ;
5471: LD_ADDR_OWVAR 28
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5479: LD_ADDR_OWVAR 29
5483: PUSH
5484: LD_INT 10
5486: PUSH
5487: LD_INT 11
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: ST_TO_ADDR
// sikorski := CreateHuman ;
5494: LD_ADDR_EXP 9
5498: PUSH
5499: CALL_OW 44
5503: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5504: LD_ADDR_OWVAR 26
5508: PUSH
5509: LD_STRING Lucy Donaldson
5511: ST_TO_ADDR
// hc_gallery := us ;
5512: LD_ADDR_OWVAR 33
5516: PUSH
5517: LD_STRING us
5519: ST_TO_ADDR
// hc_face_number := 2 ;
5520: LD_ADDR_OWVAR 34
5524: PUSH
5525: LD_INT 2
5527: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5528: LD_ADDR_OWVAR 31
5532: PUSH
5533: LD_VAR 0 5
5537: PPUSH
5538: LD_VAR 0 5
5542: PUSH
5543: LD_INT 2
5545: PLUS
5546: PPUSH
5547: CALL_OW 12
5551: PUSH
5552: LD_INT 6
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: ST_TO_ADDR
// hc_sex := sex_female ;
5567: LD_ADDR_OWVAR 27
5571: PUSH
5572: LD_INT 2
5574: ST_TO_ADDR
// hc_class := 1 ;
5575: LD_ADDR_OWVAR 28
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// donald := CreateHuman ;
5583: LD_ADDR_EXP 13
5587: PUSH
5588: CALL_OW 44
5592: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5593: LD_ADDR_OWVAR 26
5597: PUSH
5598: LD_STRING Peter Van Houten
5600: ST_TO_ADDR
// hc_gallery := us ;
5601: LD_ADDR_OWVAR 33
5605: PUSH
5606: LD_STRING us
5608: ST_TO_ADDR
// hc_face_number := 16 ;
5609: LD_ADDR_OWVAR 34
5613: PUSH
5614: LD_INT 16
5616: ST_TO_ADDR
// hc_sex := sex_male ;
5617: LD_ADDR_OWVAR 27
5621: PUSH
5622: LD_INT 1
5624: ST_TO_ADDR
// van := CreateHuman ;
5625: LD_ADDR_EXP 14
5629: PUSH
5630: CALL_OW 44
5634: ST_TO_ADDR
// hc_importance := 0 ;
5635: LD_ADDR_OWVAR 32
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// case dif of 1 :
5643: LD_EXP 1
5647: PUSH
5648: LD_INT 1
5650: DOUBLE
5651: EQUAL
5652: IFTRUE 5656
5654: GO 5667
5656: POP
// lw = 1 ; 2 :
5657: LD_ADDR_VAR 0 8
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
5665: GO 5714
5667: LD_INT 2
5669: DOUBLE
5670: EQUAL
5671: IFTRUE 5675
5673: GO 5694
5675: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5676: LD_ADDR_VAR 0 8
5680: PUSH
5681: LD_INT 1
5683: PPUSH
5684: LD_INT 2
5686: PPUSH
5687: CALL_OW 12
5691: ST_TO_ADDR
5692: GO 5714
5694: LD_INT 3
5696: DOUBLE
5697: EQUAL
5698: IFTRUE 5702
5700: GO 5713
5702: POP
// lw = 2 ; end ;
5703: LD_ADDR_VAR 0 8
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
5711: GO 5714
5713: POP
// case lw of 1 :
5714: LD_VAR 0 8
5718: PUSH
5719: LD_INT 1
5721: DOUBLE
5722: EQUAL
5723: IFTRUE 5727
5725: GO 5742
5727: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5728: LD_EXP 13
5732: PPUSH
5733: LD_INT 25
5735: PPUSH
5736: CALL_OW 52
5740: GO 5766
5742: LD_INT 2
5744: DOUBLE
5745: EQUAL
5746: IFTRUE 5750
5748: GO 5765
5750: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5751: LD_EXP 14
5755: PPUSH
5756: LD_INT 25
5758: PPUSH
5759: CALL_OW 52
5763: GO 5766
5765: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 30
5783: PUSH
5784: LD_INT 32
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PPUSH
5795: CALL_OW 69
5799: PUSH
5800: FOR_IN
5801: IFFALSE 5855
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5803: LD_INT 1
5805: PPUSH
5806: LD_VAR 0 5
5810: PPUSH
5811: CALL 734 0 2
5815: PPUSH
5816: LD_VAR 0 2
5820: PPUSH
5821: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5825: LD_VAR 0 2
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_INT 1
5837: PPUSH
5838: LD_VAR 0 6
5842: PPUSH
5843: CALL_OW 12
5847: ARRAY
5848: PPUSH
5849: CALL_OW 431
// end ;
5853: GO 5800
5855: POP
5856: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5857: LD_ADDR_VAR 0 7
5861: PUSH
5862: LD_INT 22
5864: PUSH
5865: LD_INT 1
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PUSH
5872: LD_INT 2
5874: PUSH
5875: LD_INT 25
5877: PUSH
5878: LD_INT 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 5
5887: PUSH
5888: EMPTY
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PPUSH
5900: CALL_OW 69
5904: ST_TO_ADDR
// for i = 1 to sol do
5905: LD_ADDR_VAR 0 2
5909: PUSH
5910: DOUBLE
5911: LD_INT 1
5913: DEC
5914: ST_TO_ADDR
5915: LD_VAR 0 7
5919: PUSH
5920: FOR_TO
5921: IFFALSE 5943
// SetTag ( sol [ i ] , 1 ) ;
5923: LD_VAR 0 7
5927: PUSH
5928: LD_VAR 0 2
5932: ARRAY
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL_OW 109
5941: GO 5920
5943: POP
5944: POP
// for i = 1 to 3 do
5945: LD_ADDR_VAR 0 2
5949: PUSH
5950: DOUBLE
5951: LD_INT 1
5953: DEC
5954: ST_TO_ADDR
5955: LD_INT 3
5957: PUSH
5958: FOR_TO
5959: IFFALSE 5983
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5961: LD_INT 3
5963: PPUSH
5964: LD_VAR 0 5
5968: PPUSH
5969: CALL 734 0 2
5973: PPUSH
5974: LD_INT 56
5976: PPUSH
5977: CALL_OW 52
5981: GO 5958
5983: POP
5984: POP
// for i = 1 to 6 do
5985: LD_ADDR_VAR 0 2
5989: PUSH
5990: DOUBLE
5991: LD_INT 1
5993: DEC
5994: ST_TO_ADDR
5995: LD_INT 6
5997: PUSH
5998: FOR_TO
5999: IFFALSE 6023
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
6001: LD_INT 3
6003: PPUSH
6004: LD_VAR 0 5
6008: PPUSH
6009: CALL 734 0 2
6013: PPUSH
6014: LD_INT 26
6016: PPUSH
6017: CALL_OW 52
6021: GO 5998
6023: POP
6024: POP
// for i = 1 to 5 do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: DOUBLE
6031: LD_INT 1
6033: DEC
6034: ST_TO_ADDR
6035: LD_INT 5
6037: PUSH
6038: FOR_TO
6039: IFFALSE 6066
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6041: LD_INT 2
6043: PPUSH
6044: LD_VAR 0 5
6048: PPUSH
6049: CALL 734 0 2
6053: PPUSH
6054: LD_INT 7
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 49
6064: GO 6038
6066: POP
6067: POP
// for i = 1 to 3 do
6068: LD_ADDR_VAR 0 2
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 3
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6106
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6084: LD_INT 4
6086: PPUSH
6087: LD_VAR 0 5
6091: PPUSH
6092: CALL 734 0 2
6096: PPUSH
6097: LD_INT 46
6099: PPUSH
6100: CALL_OW 52
6104: GO 6081
6106: POP
6107: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_INT 22
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 30
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 69
6141: PUSH
6142: FOR_IN
6143: IFFALSE 6257
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6145: LD_INT 5
6147: PPUSH
6148: LD_VAR 0 5
6152: PPUSH
6153: CALL 734 0 2
6157: PPUSH
6158: LD_VAR 0 2
6162: PPUSH
6163: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6167: LD_INT 5
6169: PPUSH
6170: LD_VAR 0 5
6174: PPUSH
6175: CALL 734 0 2
6179: PPUSH
6180: LD_VAR 0 2
6184: PPUSH
6185: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6189: LD_INT 1
6191: PPUSH
6192: LD_VAR 0 5
6196: PPUSH
6197: CALL 734 0 2
6201: PPUSH
6202: LD_VAR 0 2
6206: PPUSH
6207: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6211: LD_INT 1
6213: PPUSH
6214: LD_VAR 0 5
6218: PPUSH
6219: CALL 734 0 2
6223: PPUSH
6224: LD_VAR 0 2
6228: PPUSH
6229: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6233: LD_INT 1
6235: PPUSH
6236: LD_VAR 0 5
6240: PPUSH
6241: CALL 734 0 2
6245: PPUSH
6246: LD_VAR 0 2
6250: PPUSH
6251: CALL_OW 52
// end ;
6255: GO 6142
6257: POP
6258: POP
// if dif > 1 then
6259: LD_EXP 1
6263: PUSH
6264: LD_INT 1
6266: GREATER
6267: IFFALSE 6340
// for i = 1 to ( dif - 1 ) do
6269: LD_ADDR_VAR 0 2
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_EXP 1
6283: PUSH
6284: LD_INT 1
6286: MINUS
6287: PUSH
6288: FOR_TO
6289: IFFALSE 6338
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6291: LD_ADDR_EXP 17
6295: PUSH
6296: LD_EXP 17
6300: PUSH
6301: LD_INT 1
6303: PPUSH
6304: LD_VAR 0 5
6308: PPUSH
6309: CALL 734 0 2
6313: ADD
6314: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6315: LD_EXP 17
6319: PUSH
6320: LD_VAR 0 2
6324: ARRAY
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 49
// end ;
6336: GO 6288
6338: POP
6339: POP
// game_started := true ;
6340: LD_ADDR_EXP 10
6344: PUSH
6345: LD_INT 1
6347: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6348: LD_INT 26
6350: PPUSH
6351: LD_INT 3
6353: PPUSH
6354: LD_INT 2
6356: PPUSH
6357: LD_INT 2
6359: PPUSH
6360: LD_INT 13
6362: PPUSH
6363: CALL_OW 125
// while ( contact_am = false ) do
6367: LD_EXP 16
6371: PUSH
6372: LD_INT 0
6374: EQUAL
6375: IFFALSE 6386
// begin Wait ( 0 0$01 ) ;
6377: LD_INT 35
6379: PPUSH
6380: CALL_OW 67
// end ;
6384: GO 6367
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6386: LD_INT 8400
6388: PUSH
6389: LD_INT 6300
6391: PUSH
6392: LD_INT 5250
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: LD_EXP 1
6404: ARRAY
6405: PPUSH
6406: CALL_OW 67
// case dif of 1 :
6410: LD_EXP 1
6414: PUSH
6415: LD_INT 1
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6423
6421: GO 6598
6423: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6424: LD_INT 26
6426: PPUSH
6427: LD_INT 3
6429: PPUSH
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 2
6435: PPUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 4
6441: PUSH
6442: LD_INT 5
6444: PUSH
6445: LD_INT 5
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 1
6456: PPUSH
6457: LD_INT 4
6459: PPUSH
6460: CALL_OW 12
6464: ARRAY
6465: PPUSH
6466: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6470: LD_INT 26
6472: PPUSH
6473: LD_INT 3
6475: PPUSH
6476: LD_INT 1
6478: PPUSH
6479: LD_INT 2
6481: PPUSH
6482: LD_INT 4
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: LD_INT 5
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 1
6498: PPUSH
6499: LD_INT 3
6501: PPUSH
6502: CALL_OW 12
6506: ARRAY
6507: PPUSH
6508: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6512: LD_INT 26
6514: PPUSH
6515: LD_INT 3
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 5
6529: PUSH
6530: LD_INT 5
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 1
6540: PPUSH
6541: LD_INT 3
6543: PPUSH
6544: CALL_OW 12
6548: ARRAY
6549: PPUSH
6550: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6554: LD_INT 26
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_INT 2
6565: PPUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 1
6582: PPUSH
6583: LD_INT 3
6585: PPUSH
6586: CALL_OW 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 185
// end ; 2 :
6596: GO 7125
6598: LD_INT 2
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6819
6606: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6607: LD_INT 26
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 1
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: LD_INT 4
6621: PUSH
6622: LD_INT 5
6624: PUSH
6625: LD_INT 5
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 1
6635: PPUSH
6636: LD_INT 3
6638: PPUSH
6639: CALL_OW 12
6643: ARRAY
6644: PPUSH
6645: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6649: LD_INT 26
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_INT 1
6657: PPUSH
6658: LD_INT 2
6660: PPUSH
6661: LD_INT 4
6663: PUSH
6664: LD_INT 5
6666: PUSH
6667: LD_INT 5
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: PUSH
6675: LD_INT 1
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 12
6685: ARRAY
6686: PPUSH
6687: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6691: LD_INT 26
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 1
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: LD_INT 4
6705: PUSH
6706: LD_INT 3
6708: PUSH
6709: LD_INT 5
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 1
6719: PPUSH
6720: LD_INT 3
6722: PPUSH
6723: CALL_OW 12
6727: ARRAY
6728: PPUSH
6729: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6733: LD_INT 26
6735: PPUSH
6736: LD_INT 4
6738: PPUSH
6739: LD_INT 1
6741: PPUSH
6742: LD_INT 2
6744: PPUSH
6745: LD_INT 4
6747: PUSH
6748: LD_INT 5
6750: PUSH
6751: LD_INT 6
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: CALL_OW 12
6769: ARRAY
6770: PPUSH
6771: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6775: LD_INT 26
6777: PPUSH
6778: LD_INT 4
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: LD_INT 2
6786: PPUSH
6787: LD_INT 4
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: LD_INT 6
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 3
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: PPUSH
6813: CALL_OW 185
// end ; 3 :
6817: GO 7125
6819: LD_INT 3
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 7124
6827: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6828: LD_INT 26
6830: PPUSH
6831: LD_INT 3
6833: PPUSH
6834: LD_INT 1
6836: PPUSH
6837: LD_INT 2
6839: PPUSH
6840: LD_INT 4
6842: PUSH
6843: LD_INT 5
6845: PUSH
6846: LD_INT 5
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 1
6856: PPUSH
6857: LD_INT 3
6859: PPUSH
6860: CALL_OW 12
6864: ARRAY
6865: PPUSH
6866: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6870: LD_INT 26
6872: PPUSH
6873: LD_INT 3
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: LD_INT 2
6881: PPUSH
6882: LD_INT 4
6884: PUSH
6885: LD_INT 5
6887: PUSH
6888: LD_INT 5
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 1
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: CALL_OW 12
6906: ARRAY
6907: PPUSH
6908: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6912: LD_INT 26
6914: PPUSH
6915: LD_INT 3
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_INT 2
6923: PPUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 5
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 1
6940: PPUSH
6941: LD_INT 3
6943: PPUSH
6944: CALL_OW 12
6948: ARRAY
6949: PPUSH
6950: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6954: LD_INT 26
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_INT 2
6965: PPUSH
6966: LD_INT 4
6968: PUSH
6969: LD_INT 5
6971: PUSH
6972: LD_INT 5
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 1
6982: PPUSH
6983: LD_INT 3
6985: PPUSH
6986: CALL_OW 12
6990: ARRAY
6991: PPUSH
6992: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6996: LD_INT 26
6998: PPUSH
6999: LD_INT 4
7001: PPUSH
7002: LD_INT 1
7004: PPUSH
7005: LD_INT 2
7007: PPUSH
7008: LD_INT 4
7010: PUSH
7011: LD_INT 5
7013: PUSH
7014: LD_INT 6
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_INT 3
7027: PPUSH
7028: CALL_OW 12
7032: ARRAY
7033: PPUSH
7034: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7038: LD_INT 26
7040: PPUSH
7041: LD_INT 4
7043: PPUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_INT 2
7049: PPUSH
7050: LD_INT 4
7052: PUSH
7053: LD_INT 5
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 3
7069: PPUSH
7070: CALL_OW 12
7074: ARRAY
7075: PPUSH
7076: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7080: LD_INT 26
7082: PPUSH
7083: LD_INT 4
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 2
7091: PPUSH
7092: LD_INT 4
7094: PUSH
7095: LD_INT 5
7097: PUSH
7098: LD_INT 6
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 12
7116: ARRAY
7117: PPUSH
7118: CALL_OW 185
// end ; end ;
7122: GO 7125
7124: POP
// end ;
7125: LD_VAR 0 1
7129: RET
// every 0 0$01 do var i , filter ;
7130: GO 7132
7132: DISABLE
7133: LD_INT 0
7135: PPUSH
7136: PPUSH
// begin enable ;
7137: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7138: LD_INT 22
7140: PUSH
7141: LD_INT 1
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: PUSH
7167: LD_INT 0
7169: GREATER
7170: IFFALSE 7179
// RaiseSailEvent ( 3 ) ;
7172: LD_INT 3
7174: PPUSH
7175: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7179: LD_INT 22
7181: PUSH
7182: LD_INT 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 21
7191: PUSH
7192: LD_INT 3
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 3
7201: PUSH
7202: LD_INT 24
7204: PUSH
7205: LD_INT 1000
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: PPUSH
7221: CALL_OW 69
7225: PUSH
7226: LD_INT 0
7228: GREATER
7229: IFFALSE 7240
// RaiseSailEvent ( 1 ) else
7231: LD_INT 1
7233: PPUSH
7234: CALL_OW 427
7238: GO 7247
// RaiseSailEvent ( 2 ) ;
7240: LD_INT 2
7242: PPUSH
7243: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7247: LD_INT 22
7249: PUSH
7250: LD_INT 1
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 30
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 69
7275: PUSH
7276: LD_INT 0
7278: GREATER
7279: IFFALSE 7288
// RaiseSailEvent ( 4 ) ;
7281: LD_INT 4
7283: PPUSH
7284: CALL_OW 427
// if gamma_towers > 0 then
7288: LD_EXP 18
7292: PUSH
7293: LD_INT 0
7295: GREATER
7296: IFFALSE 7305
// RaiseSailEvent ( 5 ) ;
7298: LD_INT 5
7300: PPUSH
7301: CALL_OW 427
// end ;
7305: PPOPN 2
7307: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7308: GO 7310
7310: DISABLE
7311: LD_INT 0
7313: PPUSH
7314: PPUSH
// begin enable ;
7315: ENABLE
// if new_veh > 0 then
7316: LD_EXP 19
7320: PUSH
7321: LD_INT 0
7323: GREATER
7324: IFFALSE 7511
// while ( new_veh > 0 ) do
7326: LD_EXP 19
7330: PUSH
7331: LD_INT 0
7333: GREATER
7334: IFFALSE 7511
// begin Wait ( 0 0$01 ) ;
7336: LD_INT 35
7338: PPUSH
7339: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7343: LD_INT 26
7345: PPUSH
7346: CALL_OW 461
7350: PUSH
7351: LD_INT 2
7353: EQUAL
7354: IFFALSE 7509
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7356: LD_ADDR_VAR 0 1
7360: PUSH
7361: LD_INT 2
7363: PUSH
7364: LD_INT 3
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_INT 4
7384: PPUSH
7385: CALL_OW 12
7389: ARRAY
7390: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: IN
7406: IFFALSE 7441
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_INT 4
7415: PUSH
7416: LD_INT 5
7418: PUSH
7419: LD_INT 7
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 1
7429: PPUSH
7430: LD_INT 3
7432: PPUSH
7433: CALL_OW 12
7437: ARRAY
7438: ST_TO_ADDR
7439: GO 7472
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7441: LD_ADDR_VAR 0 2
7445: PUSH
7446: LD_INT 5
7448: PUSH
7449: LD_INT 7
7451: PUSH
7452: LD_INT 6
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 1
7462: PPUSH
7463: LD_INT 3
7465: PPUSH
7466: CALL_OW 12
7470: ARRAY
7471: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7472: LD_INT 26
7474: PPUSH
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: LD_INT 2
7485: PPUSH
7486: LD_VAR 0 2
7490: PPUSH
7491: CALL_OW 125
// new_veh := new_veh - 1 ;
7495: LD_ADDR_EXP 19
7499: PUSH
7500: LD_EXP 19
7504: PUSH
7505: LD_INT 1
7507: MINUS
7508: ST_TO_ADDR
// end ; end ;
7509: GO 7326
// end ;
7511: PPOPN 2
7513: END
// every 0 0$01 do var v , filter , am_cmeh ;
7514: GO 7516
7516: DISABLE
7517: LD_INT 0
7519: PPUSH
7520: PPUSH
7521: PPUSH
// begin enable ;
7522: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7523: LD_ADDR_VAR 0 3
7527: PUSH
7528: LD_INT 56
7530: PPUSH
7531: CALL_OW 313
7535: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7536: LD_ADDR_VAR 0 2
7540: PUSH
7541: LD_INT 22
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 33
7553: PUSH
7554: LD_INT 2
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 50
7563: PUSH
7564: EMPTY
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: ST_TO_ADDR
// if filter > 0 then
7580: LD_VAR 0 2
7584: PUSH
7585: LD_INT 0
7587: GREATER
7588: IFFALSE 7656
// begin for v in filter do
7590: LD_ADDR_VAR 0 1
7594: PUSH
7595: LD_VAR 0 2
7599: PUSH
7600: FOR_IN
7601: IFFALSE 7654
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 312
7612: NOT
7613: PUSH
7614: LD_VAR 0 1
7618: PPUSH
7619: CALL_OW 302
7623: AND
7624: IFFALSE 7652
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_VAR 0 3
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_INT 3
7641: PPUSH
7642: CALL_OW 12
7646: ARRAY
7647: PPUSH
7648: CALL_OW 135
// end ;
7652: GO 7600
7654: POP
7655: POP
// end ; end ;
7656: PPOPN 3
7658: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7659: LD_INT 33
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_INT 3
7671: PUSH
7672: LD_INT 34
7674: PUSH
7675: LD_INT 13
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 69
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: LD_INT 5
7700: PUSH
7701: LD_INT 7
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_EXP 1
7713: ARRAY
7714: EQUAL
7715: PUSH
7716: LD_INT 26
7718: PPUSH
7719: CALL_OW 461
7723: PUSH
7724: LD_INT 2
7726: EQUAL
7727: AND
7728: IFFALSE 7939
7730: GO 7732
7732: DISABLE
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
// begin enable ;
7738: ENABLE
// if Sikorski_Ar then
7739: LD_EXP 12
7743: IFFALSE 7820
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7745: LD_ADDR_EXP 11
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: LD_INT 22
7755: PUSH
7756: LD_INT 4
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_INT 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 33
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: LD_INT 34
7788: PUSH
7789: LD_INT 13
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: PPUSH
7813: CALL_OW 69
7817: ST_TO_ADDR
7818: GO 7861
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7820: LD_ADDR_EXP 11
7824: PUSH
7825: LD_INT 33
7827: PUSH
7828: LD_INT 2
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 3
7837: PUSH
7838: LD_INT 34
7840: PUSH
7841: LD_INT 13
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 69
7860: ST_TO_ADDR
// repeat begin for un in SForce do
7861: LD_ADDR_VAR 0 2
7865: PUSH
7866: LD_EXP 11
7870: PUSH
7871: FOR_IN
7872: IFFALSE 7927
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7874: LD_ADDR_VAR 0 3
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PPUSH
7889: CALL_OW 69
7893: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7894: LD_VAR 0 2
7898: PPUSH
7899: LD_VAR 0 3
7903: PPUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: CALL_OW 74
7913: PPUSH
7914: CALL_OW 115
// Wait ( 0 0$01 ) ;
7918: LD_INT 35
7920: PPUSH
7921: CALL_OW 67
// end ;
7925: GO 7871
7927: POP
7928: POP
// end until SForce = 0 ;
7929: LD_EXP 11
7933: PUSH
7934: LD_INT 0
7936: EQUAL
7937: IFFALSE 7861
// end ;
7939: PPOPN 3
7941: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7949: LD_ADDR_VAR 0 6
7953: PUSH
7954: LD_INT 14
7956: PPUSH
7957: EMPTY
7958: PPUSH
7959: CALL_OW 70
7963: ST_TO_ADDR
// if tmp then
7964: LD_VAR 0 6
7968: IFFALSE 8002
// for i in tmp do
7970: LD_ADDR_VAR 0 3
7974: PUSH
7975: LD_VAR 0 6
7979: PUSH
7980: FOR_IN
7981: IFFALSE 8000
// ComMoveXY ( i , 42 , 23 ) ;
7983: LD_VAR 0 3
7987: PPUSH
7988: LD_INT 42
7990: PPUSH
7991: LD_INT 23
7993: PPUSH
7994: CALL_OW 111
7998: GO 7980
8000: POP
8001: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
8002: LD_INT 14
8004: PPUSH
8005: LD_INT 1
8007: PPUSH
8008: CALL_OW 286
// uc_side := 4 ;
8012: LD_ADDR_OWVAR 20
8016: PUSH
8017: LD_INT 4
8019: ST_TO_ADDR
// uc_nation := 1 ;
8020: LD_ADDR_OWVAR 21
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8028: LD_ADDR_OWVAR 37
8032: PUSH
8033: LD_INT 4
8035: ST_TO_ADDR
// vc_control := control_manual ;
8036: LD_ADDR_OWVAR 38
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// vc_engine := engine_combustion ;
8044: LD_ADDR_OWVAR 39
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8052: LD_ADDR_OWVAR 40
8056: PUSH
8057: LD_INT 4
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: LD_INT 7
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: PUSH
8071: LD_EXP 1
8075: ARRAY
8076: ST_TO_ADDR
// veh := CreateVehicle ;
8077: LD_ADDR_VAR 0 5
8081: PUSH
8082: CALL_OW 45
8086: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8087: LD_VAR 0 5
8091: PPUSH
8092: LD_INT 2
8094: PPUSH
8095: LD_INT 0
8097: PPUSH
8098: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8102: LD_EXP 9
8106: PPUSH
8107: LD_VAR 0 5
8111: PPUSH
8112: CALL_OW 52
// SetMark ( veh , 1 ) ;
8116: LD_VAR 0 5
8120: PPUSH
8121: LD_INT 1
8123: PPUSH
8124: CALL_OW 242
// while ( num > 0 ) do
8128: LD_VAR 0 1
8132: PUSH
8133: LD_INT 0
8135: GREATER
8136: IFFALSE 8303
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8138: LD_INT 3
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 4
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: PUSH
8156: LD_EXP 1
8160: PPUSH
8161: LD_INT 4
8163: PPUSH
8164: CALL_OW 12
8168: ARRAY
8169: PPUSH
8170: LD_INT 1
8172: PPUSH
8173: LD_INT 4
8175: PUSH
8176: LD_INT 5
8178: PUSH
8179: LD_INT 5
8181: PUSH
8182: LD_INT 7
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: LD_EXP 1
8198: PUSH
8199: LD_INT 1
8201: PLUS
8202: PPUSH
8203: CALL_OW 12
8207: ARRAY
8208: PPUSH
8209: LD_INT 11
8211: PPUSH
8212: LD_INT 2
8214: PPUSH
8215: LD_INT 5
8217: PUSH
8218: LD_INT 6
8220: PUSH
8221: LD_INT 7
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: PUSH
8229: LD_EXP 1
8233: ARRAY
8234: PPUSH
8235: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8239: LD_ADDR_VAR 0 4
8243: PUSH
8244: LD_INT 22
8246: PUSH
8247: LD_INT 4
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 69
8258: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8259: LD_VAR 0 4
8263: PUSH
8264: LD_VAR 0 4
8268: ARRAY
8269: PPUSH
8270: LD_INT 36
8272: PPUSH
8273: LD_INT 18
8275: PPUSH
8276: CALL_OW 111
// Wait ( 0 0$02 ) ;
8280: LD_INT 70
8282: PPUSH
8283: CALL_OW 67
// num := num - 1 ;
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_VAR 0 1
8296: PUSH
8297: LD_INT 1
8299: MINUS
8300: ST_TO_ADDR
// end ;
8301: GO 8128
// end ;
8303: LD_VAR 0 2
8307: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8308: LD_EXP 17
8312: PUSH
8313: LD_INT 0
8315: GREATER
8316: IFFALSE 8585
8318: GO 8320
8320: DISABLE
8321: LD_INT 0
8323: PPUSH
// begin enable ;
8324: ENABLE
// for i = 1 to patrol do
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: DOUBLE
8331: LD_INT 1
8333: DEC
8334: ST_TO_ADDR
8335: LD_EXP 17
8339: PUSH
8340: FOR_TO
8341: IFFALSE 8583
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8343: LD_EXP 17
8347: PUSH
8348: LD_VAR 0 1
8352: ARRAY
8353: PUSH
8354: LD_EXP 17
8358: PUSH
8359: LD_VAR 0 1
8363: ARRAY
8364: PPUSH
8365: CALL_OW 300
8369: AND
8370: PUSH
8371: LD_EXP 17
8375: PUSH
8376: LD_VAR 0 1
8380: ARRAY
8381: PPUSH
8382: CALL_OW 314
8386: NOT
8387: AND
8388: IFFALSE 8538
// case i of 1 :
8390: LD_VAR 0 1
8394: PUSH
8395: LD_INT 1
8397: DOUBLE
8398: EQUAL
8399: IFTRUE 8403
8401: GO 8466
8403: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8404: LD_EXP 17
8408: PUSH
8409: LD_VAR 0 1
8413: ARRAY
8414: PPUSH
8415: LD_INT 53
8417: PPUSH
8418: LD_INT 91
8420: PPUSH
8421: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8425: LD_EXP 17
8429: PUSH
8430: LD_VAR 0 1
8434: ARRAY
8435: PPUSH
8436: LD_INT 245
8438: PPUSH
8439: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8443: LD_EXP 17
8447: PUSH
8448: LD_VAR 0 1
8452: ARRAY
8453: PPUSH
8454: LD_INT 24
8456: PPUSH
8457: LD_INT 26
8459: PPUSH
8460: CALL_OW 171
// end ; 2 :
8464: GO 8538
8466: LD_INT 2
8468: DOUBLE
8469: EQUAL
8470: IFTRUE 8474
8472: GO 8537
8474: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8475: LD_EXP 17
8479: PUSH
8480: LD_VAR 0 1
8484: ARRAY
8485: PPUSH
8486: LD_INT 83
8488: PPUSH
8489: LD_INT 57
8491: PPUSH
8492: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8496: LD_EXP 17
8500: PUSH
8501: LD_VAR 0 1
8505: ARRAY
8506: PPUSH
8507: LD_INT 245
8509: PPUSH
8510: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8514: LD_EXP 17
8518: PUSH
8519: LD_VAR 0 1
8523: ARRAY
8524: PPUSH
8525: LD_INT 47
8527: PPUSH
8528: LD_INT 53
8530: PPUSH
8531: CALL_OW 171
// end ; end ;
8535: GO 8538
8537: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8538: LD_EXP 17
8542: PUSH
8543: LD_VAR 0 1
8547: ARRAY
8548: PPUSH
8549: CALL_OW 256
8553: PUSH
8554: LD_INT 1000
8556: LESS
8557: IFFALSE 8581
// patrol := patrol diff patrol [ i ] ;
8559: LD_ADDR_EXP 17
8563: PUSH
8564: LD_EXP 17
8568: PUSH
8569: LD_EXP 17
8573: PUSH
8574: LD_VAR 0 1
8578: ARRAY
8579: DIFF
8580: ST_TO_ADDR
// end ;
8581: GO 8340
8583: POP
8584: POP
// end ;
8585: PPOPN 1
8587: END
// every 0 0$10 do
8588: GO 8590
8590: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8591: LD_INT 42000
8593: PUSH
8594: LD_INT 37800
8596: PUSH
8597: LD_INT 33600
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: PUSH
8605: LD_EXP 1
8609: ARRAY
8610: PPUSH
8611: CALL_OW 67
// if not contact_am then
8615: LD_EXP 16
8619: NOT
8620: IFFALSE 8630
// contact_am := true ;
8622: LD_ADDR_EXP 16
8626: PUSH
8627: LD_INT 1
8629: ST_TO_ADDR
// end ; end_of_file
8630: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8631: LD_INT 0
8633: PPUSH
// comp_tested := false ;
8634: LD_ADDR_EXP 22
8638: PUSH
8639: LD_INT 0
8641: ST_TO_ADDR
// sikorski_run := false ;
8642: LD_ADDR_EXP 23
8646: PUSH
8647: LD_INT 0
8649: ST_TO_ADDR
// InGameOn ;
8650: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8654: LD_INT 5
8656: PPUSH
8657: LD_INT 4
8659: PPUSH
8660: CALL_OW 86
// wait ( 0 0$2 ) ;
8664: LD_INT 70
8666: PPUSH
8667: CALL_OW 67
// CenterOnUnits ( commander ) ;
8671: LD_EXP 3
8675: PPUSH
8676: CALL_OW 85
// wait ( 0 0$01 ) ;
8680: LD_INT 35
8682: PPUSH
8683: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8687: LD_EXP 2
8691: PPUSH
8692: LD_STRING Dpop1
8694: PPUSH
8695: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8699: LD_EXP 3
8703: PPUSH
8704: LD_STRING Dcomm1
8706: PPUSH
8707: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8711: LD_EXP 2
8715: PPUSH
8716: LD_STRING Dpop2
8718: PPUSH
8719: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8723: LD_EXP 3
8727: PPUSH
8728: LD_STRING Dcomm2
8730: PPUSH
8731: CALL_OW 88
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8739: LD_STRING T1
8741: PPUSH
8742: CALL_OW 337
// end ;
8746: LD_VAR 0 1
8750: RET
// every 0 0$01 trigger timer > 2 2$01 do
8751: LD_EXP 24
8755: PUSH
8756: LD_INT 4235
8758: GREATER
8759: IFFALSE 8776
8761: GO 8763
8763: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8764: LD_EXP 5
8768: PPUSH
8769: LD_STRING DKap1
8771: PPUSH
8772: CALL_OW 94
// end ;
8776: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8777: LD_EXP 24
8781: PUSH
8782: LD_INT 46200
8784: PUSH
8785: LD_INT 52500
8787: PUSH
8788: LD_INT 63000
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: PUSH
8796: LD_EXP 1
8800: ARRAY
8801: GREATER
8802: IFFALSE 9169
8804: GO 8806
8806: DISABLE
8807: LD_INT 0
8809: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8810: LD_EXP 5
8814: PPUSH
8815: LD_STRING DKap2
8817: PPUSH
8818: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8822: LD_INT 10
8824: PPUSH
8825: CALL_OW 67
// Say ( commander , Dcommk ) ;
8829: LD_EXP 3
8833: PPUSH
8834: LD_STRING Dcommk
8836: PPUSH
8837: CALL_OW 88
// Wait ( 0 0$44 ) ;
8841: LD_INT 1540
8843: PPUSH
8844: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8848: LD_EXP 5
8852: PPUSH
8853: LD_INT 3
8855: PPUSH
8856: LD_INT 0
8858: PPUSH
8859: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8863: LD_EXP 5
8867: PPUSH
8868: CALL_OW 87
// Wait ( 0 0$10 ) ;
8872: LD_INT 350
8874: PPUSH
8875: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8879: LD_INT 6
8881: PUSH
8882: LD_INT 7
8884: PUSH
8885: LD_INT 8
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: PUSH
8893: LD_EXP 1
8897: ARRAY
8898: PPUSH
8899: CALL 7942 0 1
// Wait ( 2 2$00 ) ;
8903: LD_INT 4200
8905: PPUSH
8906: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8910: LD_INT 33
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: LD_INT 34
8925: PUSH
8926: LD_INT 13
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 69
8945: PUSH
8946: LD_INT 3
8948: LESS
8949: IFFALSE 8960
// Wait ( 0 0$01 ) ;
8951: LD_INT 35
8953: PPUSH
8954: CALL_OW 67
8958: GO 8910
// uc_side := 4 ;
8960: LD_ADDR_OWVAR 20
8964: PUSH
8965: LD_INT 4
8967: ST_TO_ADDR
// uc_nation := 1 ;
8968: LD_ADDR_OWVAR 21
8972: PUSH
8973: LD_INT 1
8975: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: DOUBLE
8982: LD_INT 1
8984: DEC
8985: ST_TO_ADDR
8986: LD_INT 4
8988: PUSH
8989: LD_INT 5
8991: PUSH
8992: LD_INT 6
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: LD_EXP 1
9004: ARRAY
9005: PUSH
9006: FOR_TO
9007: IFFALSE 9049
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
9009: LD_INT 1
9011: PPUSH
9012: LD_INT 5
9014: PUSH
9015: LD_INT 6
9017: PUSH
9018: LD_INT 7
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: PUSH
9026: LD_EXP 1
9030: ARRAY
9031: PPUSH
9032: CALL 734 0 2
9036: PPUSH
9037: LD_INT 4
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL_OW 49
9047: GO 9006
9049: POP
9050: POP
// sikorski_ar := true ;
9051: LD_ADDR_EXP 12
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9059: LD_EXP 9
9063: PPUSH
9064: LD_STRING DSik1
9066: PPUSH
9067: CALL_OW 94
// Wait ( 0 0$30 ) ;
9071: LD_INT 1050
9073: PPUSH
9074: CALL_OW 67
// uc_side := 4 ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_INT 4
9085: ST_TO_ADDR
// uc_nation := 1 ;
9086: LD_ADDR_OWVAR 21
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9094: LD_ADDR_VAR 0 1
9098: PUSH
9099: DOUBLE
9100: LD_INT 1
9102: DEC
9103: ST_TO_ADDR
9104: LD_INT 3
9106: PUSH
9107: LD_INT 4
9109: PUSH
9110: LD_INT 4
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: LD_EXP 1
9122: ARRAY
9123: PUSH
9124: FOR_TO
9125: IFFALSE 9167
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9127: LD_INT 1
9129: PPUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: LD_EXP 1
9148: ARRAY
9149: PPUSH
9150: CALL 734 0 2
9154: PPUSH
9155: LD_INT 13
9157: PPUSH
9158: LD_INT 0
9160: PPUSH
9161: CALL_OW 49
9165: GO 9124
9167: POP
9168: POP
// end ;
9169: PPOPN 1
9171: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9172: LD_EXP 9
9176: PPUSH
9177: CALL_OW 256
9181: PUSH
9182: LD_INT 650
9184: LESS
9185: IFFALSE 9267
9187: GO 9189
9189: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9190: LD_EXP 9
9194: PPUSH
9195: LD_STRING DSik2
9197: PPUSH
9198: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9202: LD_EXP 9
9206: PPUSH
9207: CALL_OW 300
9211: IFFALSE 9267
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9213: LD_EXP 9
9217: PPUSH
9218: LD_INT 2
9220: PPUSH
9221: CALL_OW 113
// Wait ( 0 0$01 ) ;
9225: LD_INT 35
9227: PPUSH
9228: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9232: LD_EXP 9
9236: PPUSH
9237: LD_INT 2
9239: PPUSH
9240: CALL_OW 308
9244: IFFALSE 9265
// begin RemoveUnit ( sikorski ) ;
9246: LD_EXP 9
9250: PPUSH
9251: CALL_OW 64
// break ;
9255: GO 9267
// sikorski_run := true ;
9257: LD_ADDR_EXP 23
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// end ; end ;
9265: GO 9202
// end ;
9267: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9268: LD_EXP 9
9272: PPUSH
9273: CALL_OW 256
9277: PUSH
9278: LD_INT 1000
9280: LESS
9281: IFFALSE 9298
9283: GO 9285
9285: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9286: LD_EXP 9
9290: PPUSH
9291: LD_STRING DSkik3
9293: PPUSH
9294: CALL_OW 88
9298: END
// every 1 1$45 + 0 0$15 do
9299: GO 9301
9301: DISABLE
// begin enable ;
9302: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9303: LD_INT 1
9305: PPUSH
9306: LD_INT 5
9308: PPUSH
9309: CALL_OW 12
9313: PPUSH
9314: LD_INT 8
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9324: LD_INT 350
9326: PPUSH
9327: LD_INT 1295
9329: PPUSH
9330: CALL_OW 12
9334: PPUSH
9335: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9339: LD_INT 1
9341: PPUSH
9342: LD_INT 5
9344: PPUSH
9345: CALL_OW 12
9349: PPUSH
9350: LD_INT 1
9352: PPUSH
9353: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9357: LD_INT 350
9359: PPUSH
9360: LD_INT 1050
9362: PPUSH
9363: CALL_OW 12
9367: PPUSH
9368: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9372: LD_EXP 24
9376: PUSH
9377: LD_INT 25200
9379: PUSH
9380: LD_INT 23100
9382: PUSH
9383: LD_INT 21000
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_EXP 1
9395: ARRAY
9396: LESSEQUAL
9397: IFFALSE 9420
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9399: LD_INT 1
9401: PPUSH
9402: LD_INT 5
9404: PPUSH
9405: CALL_OW 12
9409: PPUSH
9410: LD_INT 8
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: CALL_OW 55
// end ;
9420: END
// export timer ; every 1 do
9421: GO 9423
9423: DISABLE
// timer := 0 0$00 ;
9424: LD_ADDR_EXP 24
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
9432: END
// every 0 0$01 do
9433: GO 9435
9435: DISABLE
// begin enable ;
9436: ENABLE
// Display_Strings := [ #tick , timer ] ;
9437: LD_ADDR_OWVAR 47
9441: PUSH
9442: LD_STRING #tick
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9454: LD_ADDR_EXP 24
9458: PUSH
9459: LD_EXP 24
9463: PUSH
9464: LD_INT 35
9466: PLUS
9467: ST_TO_ADDR
// end ; end_of_file end_of_file
9468: END
// export globalGameSaveCounter ; every 0 0$1 do
9469: GO 9471
9471: DISABLE
// begin enable ;
9472: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9473: LD_STRING updateTimer(
9475: PUSH
9476: LD_OWVAR 1
9480: STR
9481: PUSH
9482: LD_STRING );
9484: STR
9485: PPUSH
9486: CALL_OW 559
// end ;
9490: END
// every 0 0$1 do
9491: GO 9493
9493: DISABLE
// begin globalGameSaveCounter := 0 ;
9494: LD_ADDR_EXP 25
9498: PUSH
9499: LD_INT 0
9501: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
9502: LD_STRING setGameSaveCounter(0)
9504: PPUSH
9505: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
9509: LD_STRING initStreamRollete();
9511: PPUSH
9512: CALL_OW 559
// InitStreamMode ;
9516: CALL 10842 0 0
// DefineStreamItems ( false ) ;
9520: LD_INT 0
9522: PPUSH
9523: CALL 11306 0 1
// end ;
9527: END
// export function SOS_MapStart ( ) ; begin
9528: LD_INT 0
9530: PPUSH
// if streamModeActive then
9531: LD_EXP 26
9535: IFFALSE 9544
// DefineStreamItems ( true ) ;
9537: LD_INT 1
9539: PPUSH
9540: CALL 11306 0 1
// UpdateLuaVariables ( ) ;
9544: CALL 9561 0 0
// UpdateFactoryWaypoints ( ) ;
9548: CALL 24167 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9552: CALL 24424 0 0
// end ;
9556: LD_VAR 0 1
9560: RET
// function UpdateLuaVariables ( ) ; begin
9561: LD_INT 0
9563: PPUSH
// if globalGameSaveCounter then
9564: LD_EXP 25
9568: IFFALSE 9602
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
9570: LD_ADDR_EXP 25
9574: PUSH
9575: LD_EXP 25
9579: PPUSH
9580: CALL 68381 0 1
9584: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9585: LD_STRING setGameSaveCounter(
9587: PUSH
9588: LD_EXP 25
9592: STR
9593: PUSH
9594: LD_STRING )
9596: STR
9597: PPUSH
9598: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9602: LD_STRING setGameDifficulty(
9604: PUSH
9605: LD_OWVAR 67
9609: STR
9610: PUSH
9611: LD_STRING )
9613: STR
9614: PPUSH
9615: CALL_OW 559
// end ;
9619: LD_VAR 0 1
9623: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9624: LD_INT 0
9626: PPUSH
// if p2 = stream_mode then
9627: LD_VAR 0 2
9631: PUSH
9632: LD_INT 100
9634: EQUAL
9635: IFFALSE 10638
// begin if not StreamModeActive then
9637: LD_EXP 26
9641: NOT
9642: IFFALSE 9652
// StreamModeActive := true ;
9644: LD_ADDR_EXP 26
9648: PUSH
9649: LD_INT 1
9651: ST_TO_ADDR
// if p3 = 0 then
9652: LD_VAR 0 3
9656: PUSH
9657: LD_INT 0
9659: EQUAL
9660: IFFALSE 9666
// InitStreamMode ;
9662: CALL 10842 0 0
// if p3 = 1 then
9666: LD_VAR 0 3
9670: PUSH
9671: LD_INT 1
9673: EQUAL
9674: IFFALSE 9684
// sRocket := true ;
9676: LD_ADDR_EXP 31
9680: PUSH
9681: LD_INT 1
9683: ST_TO_ADDR
// if p3 = 2 then
9684: LD_VAR 0 3
9688: PUSH
9689: LD_INT 2
9691: EQUAL
9692: IFFALSE 9702
// sSpeed := true ;
9694: LD_ADDR_EXP 30
9698: PUSH
9699: LD_INT 1
9701: ST_TO_ADDR
// if p3 = 3 then
9702: LD_VAR 0 3
9706: PUSH
9707: LD_INT 3
9709: EQUAL
9710: IFFALSE 9720
// sEngine := true ;
9712: LD_ADDR_EXP 32
9716: PUSH
9717: LD_INT 1
9719: ST_TO_ADDR
// if p3 = 4 then
9720: LD_VAR 0 3
9724: PUSH
9725: LD_INT 4
9727: EQUAL
9728: IFFALSE 9738
// sSpec := true ;
9730: LD_ADDR_EXP 29
9734: PUSH
9735: LD_INT 1
9737: ST_TO_ADDR
// if p3 = 5 then
9738: LD_VAR 0 3
9742: PUSH
9743: LD_INT 5
9745: EQUAL
9746: IFFALSE 9756
// sLevel := true ;
9748: LD_ADDR_EXP 33
9752: PUSH
9753: LD_INT 1
9755: ST_TO_ADDR
// if p3 = 6 then
9756: LD_VAR 0 3
9760: PUSH
9761: LD_INT 6
9763: EQUAL
9764: IFFALSE 9774
// sArmoury := true ;
9766: LD_ADDR_EXP 34
9770: PUSH
9771: LD_INT 1
9773: ST_TO_ADDR
// if p3 = 7 then
9774: LD_VAR 0 3
9778: PUSH
9779: LD_INT 7
9781: EQUAL
9782: IFFALSE 9792
// sRadar := true ;
9784: LD_ADDR_EXP 35
9788: PUSH
9789: LD_INT 1
9791: ST_TO_ADDR
// if p3 = 8 then
9792: LD_VAR 0 3
9796: PUSH
9797: LD_INT 8
9799: EQUAL
9800: IFFALSE 9810
// sBunker := true ;
9802: LD_ADDR_EXP 36
9806: PUSH
9807: LD_INT 1
9809: ST_TO_ADDR
// if p3 = 9 then
9810: LD_VAR 0 3
9814: PUSH
9815: LD_INT 9
9817: EQUAL
9818: IFFALSE 9828
// sHack := true ;
9820: LD_ADDR_EXP 37
9824: PUSH
9825: LD_INT 1
9827: ST_TO_ADDR
// if p3 = 10 then
9828: LD_VAR 0 3
9832: PUSH
9833: LD_INT 10
9835: EQUAL
9836: IFFALSE 9846
// sFire := true ;
9838: LD_ADDR_EXP 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// if p3 = 11 then
9846: LD_VAR 0 3
9850: PUSH
9851: LD_INT 11
9853: EQUAL
9854: IFFALSE 9864
// sRefresh := true ;
9856: LD_ADDR_EXP 39
9860: PUSH
9861: LD_INT 1
9863: ST_TO_ADDR
// if p3 = 12 then
9864: LD_VAR 0 3
9868: PUSH
9869: LD_INT 12
9871: EQUAL
9872: IFFALSE 9882
// sExp := true ;
9874: LD_ADDR_EXP 40
9878: PUSH
9879: LD_INT 1
9881: ST_TO_ADDR
// if p3 = 13 then
9882: LD_VAR 0 3
9886: PUSH
9887: LD_INT 13
9889: EQUAL
9890: IFFALSE 9900
// sDepot := true ;
9892: LD_ADDR_EXP 41
9896: PUSH
9897: LD_INT 1
9899: ST_TO_ADDR
// if p3 = 14 then
9900: LD_VAR 0 3
9904: PUSH
9905: LD_INT 14
9907: EQUAL
9908: IFFALSE 9918
// sFlag := true ;
9910: LD_ADDR_EXP 42
9914: PUSH
9915: LD_INT 1
9917: ST_TO_ADDR
// if p3 = 15 then
9918: LD_VAR 0 3
9922: PUSH
9923: LD_INT 15
9925: EQUAL
9926: IFFALSE 9936
// sKamikadze := true ;
9928: LD_ADDR_EXP 50
9932: PUSH
9933: LD_INT 1
9935: ST_TO_ADDR
// if p3 = 16 then
9936: LD_VAR 0 3
9940: PUSH
9941: LD_INT 16
9943: EQUAL
9944: IFFALSE 9954
// sTroll := true ;
9946: LD_ADDR_EXP 51
9950: PUSH
9951: LD_INT 1
9953: ST_TO_ADDR
// if p3 = 17 then
9954: LD_VAR 0 3
9958: PUSH
9959: LD_INT 17
9961: EQUAL
9962: IFFALSE 9972
// sSlow := true ;
9964: LD_ADDR_EXP 52
9968: PUSH
9969: LD_INT 1
9971: ST_TO_ADDR
// if p3 = 18 then
9972: LD_VAR 0 3
9976: PUSH
9977: LD_INT 18
9979: EQUAL
9980: IFFALSE 9990
// sLack := true ;
9982: LD_ADDR_EXP 53
9986: PUSH
9987: LD_INT 1
9989: ST_TO_ADDR
// if p3 = 19 then
9990: LD_VAR 0 3
9994: PUSH
9995: LD_INT 19
9997: EQUAL
9998: IFFALSE 10008
// sTank := true ;
10000: LD_ADDR_EXP 55
10004: PUSH
10005: LD_INT 1
10007: ST_TO_ADDR
// if p3 = 20 then
10008: LD_VAR 0 3
10012: PUSH
10013: LD_INT 20
10015: EQUAL
10016: IFFALSE 10026
// sRemote := true ;
10018: LD_ADDR_EXP 56
10022: PUSH
10023: LD_INT 1
10025: ST_TO_ADDR
// if p3 = 21 then
10026: LD_VAR 0 3
10030: PUSH
10031: LD_INT 21
10033: EQUAL
10034: IFFALSE 10044
// sPowell := true ;
10036: LD_ADDR_EXP 57
10040: PUSH
10041: LD_INT 1
10043: ST_TO_ADDR
// if p3 = 22 then
10044: LD_VAR 0 3
10048: PUSH
10049: LD_INT 22
10051: EQUAL
10052: IFFALSE 10062
// sTeleport := true ;
10054: LD_ADDR_EXP 60
10058: PUSH
10059: LD_INT 1
10061: ST_TO_ADDR
// if p3 = 23 then
10062: LD_VAR 0 3
10066: PUSH
10067: LD_INT 23
10069: EQUAL
10070: IFFALSE 10080
// sOilTower := true ;
10072: LD_ADDR_EXP 62
10076: PUSH
10077: LD_INT 1
10079: ST_TO_ADDR
// if p3 = 24 then
10080: LD_VAR 0 3
10084: PUSH
10085: LD_INT 24
10087: EQUAL
10088: IFFALSE 10098
// sShovel := true ;
10090: LD_ADDR_EXP 63
10094: PUSH
10095: LD_INT 1
10097: ST_TO_ADDR
// if p3 = 25 then
10098: LD_VAR 0 3
10102: PUSH
10103: LD_INT 25
10105: EQUAL
10106: IFFALSE 10116
// sSheik := true ;
10108: LD_ADDR_EXP 64
10112: PUSH
10113: LD_INT 1
10115: ST_TO_ADDR
// if p3 = 26 then
10116: LD_VAR 0 3
10120: PUSH
10121: LD_INT 26
10123: EQUAL
10124: IFFALSE 10134
// sEarthquake := true ;
10126: LD_ADDR_EXP 66
10130: PUSH
10131: LD_INT 1
10133: ST_TO_ADDR
// if p3 = 27 then
10134: LD_VAR 0 3
10138: PUSH
10139: LD_INT 27
10141: EQUAL
10142: IFFALSE 10152
// sAI := true ;
10144: LD_ADDR_EXP 67
10148: PUSH
10149: LD_INT 1
10151: ST_TO_ADDR
// if p3 = 28 then
10152: LD_VAR 0 3
10156: PUSH
10157: LD_INT 28
10159: EQUAL
10160: IFFALSE 10170
// sCargo := true ;
10162: LD_ADDR_EXP 70
10166: PUSH
10167: LD_INT 1
10169: ST_TO_ADDR
// if p3 = 29 then
10170: LD_VAR 0 3
10174: PUSH
10175: LD_INT 29
10177: EQUAL
10178: IFFALSE 10188
// sDLaser := true ;
10180: LD_ADDR_EXP 71
10184: PUSH
10185: LD_INT 1
10187: ST_TO_ADDR
// if p3 = 30 then
10188: LD_VAR 0 3
10192: PUSH
10193: LD_INT 30
10195: EQUAL
10196: IFFALSE 10206
// sExchange := true ;
10198: LD_ADDR_EXP 72
10202: PUSH
10203: LD_INT 1
10205: ST_TO_ADDR
// if p3 = 31 then
10206: LD_VAR 0 3
10210: PUSH
10211: LD_INT 31
10213: EQUAL
10214: IFFALSE 10224
// sFac := true ;
10216: LD_ADDR_EXP 73
10220: PUSH
10221: LD_INT 1
10223: ST_TO_ADDR
// if p3 = 32 then
10224: LD_VAR 0 3
10228: PUSH
10229: LD_INT 32
10231: EQUAL
10232: IFFALSE 10242
// sPower := true ;
10234: LD_ADDR_EXP 74
10238: PUSH
10239: LD_INT 1
10241: ST_TO_ADDR
// if p3 = 33 then
10242: LD_VAR 0 3
10246: PUSH
10247: LD_INT 33
10249: EQUAL
10250: IFFALSE 10260
// sRandom := true ;
10252: LD_ADDR_EXP 75
10256: PUSH
10257: LD_INT 1
10259: ST_TO_ADDR
// if p3 = 34 then
10260: LD_VAR 0 3
10264: PUSH
10265: LD_INT 34
10267: EQUAL
10268: IFFALSE 10278
// sShield := true ;
10270: LD_ADDR_EXP 76
10274: PUSH
10275: LD_INT 1
10277: ST_TO_ADDR
// if p3 = 35 then
10278: LD_VAR 0 3
10282: PUSH
10283: LD_INT 35
10285: EQUAL
10286: IFFALSE 10296
// sTime := true ;
10288: LD_ADDR_EXP 77
10292: PUSH
10293: LD_INT 1
10295: ST_TO_ADDR
// if p3 = 36 then
10296: LD_VAR 0 3
10300: PUSH
10301: LD_INT 36
10303: EQUAL
10304: IFFALSE 10314
// sTools := true ;
10306: LD_ADDR_EXP 78
10310: PUSH
10311: LD_INT 1
10313: ST_TO_ADDR
// if p3 = 101 then
10314: LD_VAR 0 3
10318: PUSH
10319: LD_INT 101
10321: EQUAL
10322: IFFALSE 10332
// sSold := true ;
10324: LD_ADDR_EXP 43
10328: PUSH
10329: LD_INT 1
10331: ST_TO_ADDR
// if p3 = 102 then
10332: LD_VAR 0 3
10336: PUSH
10337: LD_INT 102
10339: EQUAL
10340: IFFALSE 10350
// sDiff := true ;
10342: LD_ADDR_EXP 44
10346: PUSH
10347: LD_INT 1
10349: ST_TO_ADDR
// if p3 = 103 then
10350: LD_VAR 0 3
10354: PUSH
10355: LD_INT 103
10357: EQUAL
10358: IFFALSE 10368
// sFog := true ;
10360: LD_ADDR_EXP 47
10364: PUSH
10365: LD_INT 1
10367: ST_TO_ADDR
// if p3 = 104 then
10368: LD_VAR 0 3
10372: PUSH
10373: LD_INT 104
10375: EQUAL
10376: IFFALSE 10386
// sReset := true ;
10378: LD_ADDR_EXP 48
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// if p3 = 105 then
10386: LD_VAR 0 3
10390: PUSH
10391: LD_INT 105
10393: EQUAL
10394: IFFALSE 10404
// sSun := true ;
10396: LD_ADDR_EXP 49
10400: PUSH
10401: LD_INT 1
10403: ST_TO_ADDR
// if p3 = 106 then
10404: LD_VAR 0 3
10408: PUSH
10409: LD_INT 106
10411: EQUAL
10412: IFFALSE 10422
// sTiger := true ;
10414: LD_ADDR_EXP 45
10418: PUSH
10419: LD_INT 1
10421: ST_TO_ADDR
// if p3 = 107 then
10422: LD_VAR 0 3
10426: PUSH
10427: LD_INT 107
10429: EQUAL
10430: IFFALSE 10440
// sBomb := true ;
10432: LD_ADDR_EXP 46
10436: PUSH
10437: LD_INT 1
10439: ST_TO_ADDR
// if p3 = 108 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 108
10447: EQUAL
10448: IFFALSE 10458
// sWound := true ;
10450: LD_ADDR_EXP 54
10454: PUSH
10455: LD_INT 1
10457: ST_TO_ADDR
// if p3 = 109 then
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 109
10465: EQUAL
10466: IFFALSE 10476
// sBetray := true ;
10468: LD_ADDR_EXP 58
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// if p3 = 110 then
10476: LD_VAR 0 3
10480: PUSH
10481: LD_INT 110
10483: EQUAL
10484: IFFALSE 10494
// sContamin := true ;
10486: LD_ADDR_EXP 59
10490: PUSH
10491: LD_INT 1
10493: ST_TO_ADDR
// if p3 = 111 then
10494: LD_VAR 0 3
10498: PUSH
10499: LD_INT 111
10501: EQUAL
10502: IFFALSE 10512
// sOil := true ;
10504: LD_ADDR_EXP 61
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// if p3 = 112 then
10512: LD_VAR 0 3
10516: PUSH
10517: LD_INT 112
10519: EQUAL
10520: IFFALSE 10530
// sStu := true ;
10522: LD_ADDR_EXP 65
10526: PUSH
10527: LD_INT 1
10529: ST_TO_ADDR
// if p3 = 113 then
10530: LD_VAR 0 3
10534: PUSH
10535: LD_INT 113
10537: EQUAL
10538: IFFALSE 10548
// sBazooka := true ;
10540: LD_ADDR_EXP 68
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// if p3 = 114 then
10548: LD_VAR 0 3
10552: PUSH
10553: LD_INT 114
10555: EQUAL
10556: IFFALSE 10566
// sMortar := true ;
10558: LD_ADDR_EXP 69
10562: PUSH
10563: LD_INT 1
10565: ST_TO_ADDR
// if p3 = 115 then
10566: LD_VAR 0 3
10570: PUSH
10571: LD_INT 115
10573: EQUAL
10574: IFFALSE 10584
// sRanger := true ;
10576: LD_ADDR_EXP 79
10580: PUSH
10581: LD_INT 1
10583: ST_TO_ADDR
// if p3 = 116 then
10584: LD_VAR 0 3
10588: PUSH
10589: LD_INT 116
10591: EQUAL
10592: IFFALSE 10602
// sComputer := true ;
10594: LD_ADDR_EXP 80
10598: PUSH
10599: LD_INT 1
10601: ST_TO_ADDR
// if p3 = 117 then
10602: LD_VAR 0 3
10606: PUSH
10607: LD_INT 117
10609: EQUAL
10610: IFFALSE 10620
// s30 := true ;
10612: LD_ADDR_EXP 81
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// if p3 = 118 then
10620: LD_VAR 0 3
10624: PUSH
10625: LD_INT 118
10627: EQUAL
10628: IFFALSE 10638
// s60 := true ;
10630: LD_ADDR_EXP 82
10634: PUSH
10635: LD_INT 1
10637: ST_TO_ADDR
// end ; if p2 = hack_mode then
10638: LD_VAR 0 2
10642: PUSH
10643: LD_INT 101
10645: EQUAL
10646: IFFALSE 10774
// begin case p3 of 1 :
10648: LD_VAR 0 3
10652: PUSH
10653: LD_INT 1
10655: DOUBLE
10656: EQUAL
10657: IFTRUE 10661
10659: GO 10668
10661: POP
// hHackUnlimitedResources ; 2 :
10662: CALL 22913 0 0
10666: GO 10774
10668: LD_INT 2
10670: DOUBLE
10671: EQUAL
10672: IFTRUE 10676
10674: GO 10683
10676: POP
// hHackSetLevel10 ; 3 :
10677: CALL 23046 0 0
10681: GO 10774
10683: LD_INT 3
10685: DOUBLE
10686: EQUAL
10687: IFTRUE 10691
10689: GO 10698
10691: POP
// hHackSetLevel10YourUnits ; 4 :
10692: CALL 23131 0 0
10696: GO 10774
10698: LD_INT 4
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10713
10706: POP
// hHackInvincible ; 5 :
10707: CALL 23579 0 0
10711: GO 10774
10713: LD_INT 5
10715: DOUBLE
10716: EQUAL
10717: IFTRUE 10721
10719: GO 10728
10721: POP
// hHackInvisible ; 6 :
10722: CALL 23690 0 0
10726: GO 10774
10728: LD_INT 6
10730: DOUBLE
10731: EQUAL
10732: IFTRUE 10736
10734: GO 10743
10736: POP
// hHackChangeYourSide ; 7 :
10737: CALL 23747 0 0
10741: GO 10774
10743: LD_INT 7
10745: DOUBLE
10746: EQUAL
10747: IFTRUE 10751
10749: GO 10758
10751: POP
// hHackChangeUnitSide ; 8 :
10752: CALL 23789 0 0
10756: GO 10774
10758: LD_INT 8
10760: DOUBLE
10761: EQUAL
10762: IFTRUE 10766
10764: GO 10773
10766: POP
// hHackFog ; end ;
10767: CALL 23890 0 0
10771: GO 10774
10773: POP
// end ; if p2 = game_save_mode then
10774: LD_VAR 0 2
10778: PUSH
10779: LD_INT 102
10781: EQUAL
10782: IFFALSE 10837
// begin if p3 = 1 then
10784: LD_VAR 0 3
10788: PUSH
10789: LD_INT 1
10791: EQUAL
10792: IFFALSE 10804
// globalGameSaveCounter := p4 ;
10794: LD_ADDR_EXP 25
10798: PUSH
10799: LD_VAR 0 4
10803: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10804: LD_VAR 0 3
10808: PUSH
10809: LD_INT 2
10811: EQUAL
10812: PUSH
10813: LD_EXP 25
10817: AND
10818: IFFALSE 10837
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10820: LD_STRING setGameSaveCounter(
10822: PUSH
10823: LD_EXP 25
10827: STR
10828: PUSH
10829: LD_STRING )
10831: STR
10832: PPUSH
10833: CALL_OW 559
// end ; end ;
10837: LD_VAR 0 7
10841: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10842: LD_INT 0
10844: PPUSH
// streamModeActive := false ;
10845: LD_ADDR_EXP 26
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// normalCounter := 36 ;
10853: LD_ADDR_EXP 27
10857: PUSH
10858: LD_INT 36
10860: ST_TO_ADDR
// hardcoreCounter := 18 ;
10861: LD_ADDR_EXP 28
10865: PUSH
10866: LD_INT 18
10868: ST_TO_ADDR
// sRocket := false ;
10869: LD_ADDR_EXP 31
10873: PUSH
10874: LD_INT 0
10876: ST_TO_ADDR
// sSpeed := false ;
10877: LD_ADDR_EXP 30
10881: PUSH
10882: LD_INT 0
10884: ST_TO_ADDR
// sEngine := false ;
10885: LD_ADDR_EXP 32
10889: PUSH
10890: LD_INT 0
10892: ST_TO_ADDR
// sSpec := false ;
10893: LD_ADDR_EXP 29
10897: PUSH
10898: LD_INT 0
10900: ST_TO_ADDR
// sLevel := false ;
10901: LD_ADDR_EXP 33
10905: PUSH
10906: LD_INT 0
10908: ST_TO_ADDR
// sArmoury := false ;
10909: LD_ADDR_EXP 34
10913: PUSH
10914: LD_INT 0
10916: ST_TO_ADDR
// sRadar := false ;
10917: LD_ADDR_EXP 35
10921: PUSH
10922: LD_INT 0
10924: ST_TO_ADDR
// sBunker := false ;
10925: LD_ADDR_EXP 36
10929: PUSH
10930: LD_INT 0
10932: ST_TO_ADDR
// sHack := false ;
10933: LD_ADDR_EXP 37
10937: PUSH
10938: LD_INT 0
10940: ST_TO_ADDR
// sFire := false ;
10941: LD_ADDR_EXP 38
10945: PUSH
10946: LD_INT 0
10948: ST_TO_ADDR
// sRefresh := false ;
10949: LD_ADDR_EXP 39
10953: PUSH
10954: LD_INT 0
10956: ST_TO_ADDR
// sExp := false ;
10957: LD_ADDR_EXP 40
10961: PUSH
10962: LD_INT 0
10964: ST_TO_ADDR
// sDepot := false ;
10965: LD_ADDR_EXP 41
10969: PUSH
10970: LD_INT 0
10972: ST_TO_ADDR
// sFlag := false ;
10973: LD_ADDR_EXP 42
10977: PUSH
10978: LD_INT 0
10980: ST_TO_ADDR
// sKamikadze := false ;
10981: LD_ADDR_EXP 50
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// sTroll := false ;
10989: LD_ADDR_EXP 51
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// sSlow := false ;
10997: LD_ADDR_EXP 52
11001: PUSH
11002: LD_INT 0
11004: ST_TO_ADDR
// sLack := false ;
11005: LD_ADDR_EXP 53
11009: PUSH
11010: LD_INT 0
11012: ST_TO_ADDR
// sTank := false ;
11013: LD_ADDR_EXP 55
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// sRemote := false ;
11021: LD_ADDR_EXP 56
11025: PUSH
11026: LD_INT 0
11028: ST_TO_ADDR
// sPowell := false ;
11029: LD_ADDR_EXP 57
11033: PUSH
11034: LD_INT 0
11036: ST_TO_ADDR
// sTeleport := false ;
11037: LD_ADDR_EXP 60
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// sOilTower := false ;
11045: LD_ADDR_EXP 62
11049: PUSH
11050: LD_INT 0
11052: ST_TO_ADDR
// sShovel := false ;
11053: LD_ADDR_EXP 63
11057: PUSH
11058: LD_INT 0
11060: ST_TO_ADDR
// sSheik := false ;
11061: LD_ADDR_EXP 64
11065: PUSH
11066: LD_INT 0
11068: ST_TO_ADDR
// sEarthquake := false ;
11069: LD_ADDR_EXP 66
11073: PUSH
11074: LD_INT 0
11076: ST_TO_ADDR
// sAI := false ;
11077: LD_ADDR_EXP 67
11081: PUSH
11082: LD_INT 0
11084: ST_TO_ADDR
// sCargo := false ;
11085: LD_ADDR_EXP 70
11089: PUSH
11090: LD_INT 0
11092: ST_TO_ADDR
// sDLaser := false ;
11093: LD_ADDR_EXP 71
11097: PUSH
11098: LD_INT 0
11100: ST_TO_ADDR
// sExchange := false ;
11101: LD_ADDR_EXP 72
11105: PUSH
11106: LD_INT 0
11108: ST_TO_ADDR
// sFac := false ;
11109: LD_ADDR_EXP 73
11113: PUSH
11114: LD_INT 0
11116: ST_TO_ADDR
// sPower := false ;
11117: LD_ADDR_EXP 74
11121: PUSH
11122: LD_INT 0
11124: ST_TO_ADDR
// sRandom := false ;
11125: LD_ADDR_EXP 75
11129: PUSH
11130: LD_INT 0
11132: ST_TO_ADDR
// sShield := false ;
11133: LD_ADDR_EXP 76
11137: PUSH
11138: LD_INT 0
11140: ST_TO_ADDR
// sTime := false ;
11141: LD_ADDR_EXP 77
11145: PUSH
11146: LD_INT 0
11148: ST_TO_ADDR
// sTools := false ;
11149: LD_ADDR_EXP 78
11153: PUSH
11154: LD_INT 0
11156: ST_TO_ADDR
// sSold := false ;
11157: LD_ADDR_EXP 43
11161: PUSH
11162: LD_INT 0
11164: ST_TO_ADDR
// sDiff := false ;
11165: LD_ADDR_EXP 44
11169: PUSH
11170: LD_INT 0
11172: ST_TO_ADDR
// sFog := false ;
11173: LD_ADDR_EXP 47
11177: PUSH
11178: LD_INT 0
11180: ST_TO_ADDR
// sReset := false ;
11181: LD_ADDR_EXP 48
11185: PUSH
11186: LD_INT 0
11188: ST_TO_ADDR
// sSun := false ;
11189: LD_ADDR_EXP 49
11193: PUSH
11194: LD_INT 0
11196: ST_TO_ADDR
// sTiger := false ;
11197: LD_ADDR_EXP 45
11201: PUSH
11202: LD_INT 0
11204: ST_TO_ADDR
// sBomb := false ;
11205: LD_ADDR_EXP 46
11209: PUSH
11210: LD_INT 0
11212: ST_TO_ADDR
// sWound := false ;
11213: LD_ADDR_EXP 54
11217: PUSH
11218: LD_INT 0
11220: ST_TO_ADDR
// sBetray := false ;
11221: LD_ADDR_EXP 58
11225: PUSH
11226: LD_INT 0
11228: ST_TO_ADDR
// sContamin := false ;
11229: LD_ADDR_EXP 59
11233: PUSH
11234: LD_INT 0
11236: ST_TO_ADDR
// sOil := false ;
11237: LD_ADDR_EXP 61
11241: PUSH
11242: LD_INT 0
11244: ST_TO_ADDR
// sStu := false ;
11245: LD_ADDR_EXP 65
11249: PUSH
11250: LD_INT 0
11252: ST_TO_ADDR
// sBazooka := false ;
11253: LD_ADDR_EXP 68
11257: PUSH
11258: LD_INT 0
11260: ST_TO_ADDR
// sMortar := false ;
11261: LD_ADDR_EXP 69
11265: PUSH
11266: LD_INT 0
11268: ST_TO_ADDR
// sRanger := false ;
11269: LD_ADDR_EXP 79
11273: PUSH
11274: LD_INT 0
11276: ST_TO_ADDR
// sComputer := false ;
11277: LD_ADDR_EXP 80
11281: PUSH
11282: LD_INT 0
11284: ST_TO_ADDR
// s30 := false ;
11285: LD_ADDR_EXP 81
11289: PUSH
11290: LD_INT 0
11292: ST_TO_ADDR
// s60 := false ;
11293: LD_ADDR_EXP 82
11297: PUSH
11298: LD_INT 0
11300: ST_TO_ADDR
// end ;
11301: LD_VAR 0 1
11305: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11306: LD_INT 0
11308: PPUSH
11309: PPUSH
11310: PPUSH
11311: PPUSH
11312: PPUSH
11313: PPUSH
11314: PPUSH
// result := [ ] ;
11315: LD_ADDR_VAR 0 2
11319: PUSH
11320: EMPTY
11321: ST_TO_ADDR
// if campaign_id = 1 then
11322: LD_OWVAR 69
11326: PUSH
11327: LD_INT 1
11329: EQUAL
11330: IFFALSE 14496
// begin case mission_number of 1 :
11332: LD_OWVAR 70
11336: PUSH
11337: LD_INT 1
11339: DOUBLE
11340: EQUAL
11341: IFTRUE 11345
11343: GO 11421
11345: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11346: LD_ADDR_VAR 0 2
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: LD_INT 4
11356: PUSH
11357: LD_INT 11
11359: PUSH
11360: LD_INT 12
11362: PUSH
11363: LD_INT 15
11365: PUSH
11366: LD_INT 16
11368: PUSH
11369: LD_INT 22
11371: PUSH
11372: LD_INT 23
11374: PUSH
11375: LD_INT 26
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 101
11391: PUSH
11392: LD_INT 102
11394: PUSH
11395: LD_INT 106
11397: PUSH
11398: LD_INT 116
11400: PUSH
11401: LD_INT 117
11403: PUSH
11404: LD_INT 118
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: ST_TO_ADDR
11419: GO 14494
11421: LD_INT 2
11423: DOUBLE
11424: EQUAL
11425: IFTRUE 11429
11427: GO 11513
11429: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11430: LD_ADDR_VAR 0 2
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: LD_INT 4
11440: PUSH
11441: LD_INT 11
11443: PUSH
11444: LD_INT 12
11446: PUSH
11447: LD_INT 15
11449: PUSH
11450: LD_INT 16
11452: PUSH
11453: LD_INT 22
11455: PUSH
11456: LD_INT 23
11458: PUSH
11459: LD_INT 26
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 101
11475: PUSH
11476: LD_INT 102
11478: PUSH
11479: LD_INT 105
11481: PUSH
11482: LD_INT 106
11484: PUSH
11485: LD_INT 108
11487: PUSH
11488: LD_INT 116
11490: PUSH
11491: LD_INT 117
11493: PUSH
11494: LD_INT 118
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: ST_TO_ADDR
11511: GO 14494
11513: LD_INT 3
11515: DOUBLE
11516: EQUAL
11517: IFTRUE 11521
11519: GO 11609
11521: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11522: LD_ADDR_VAR 0 2
11526: PUSH
11527: LD_INT 2
11529: PUSH
11530: LD_INT 4
11532: PUSH
11533: LD_INT 5
11535: PUSH
11536: LD_INT 11
11538: PUSH
11539: LD_INT 12
11541: PUSH
11542: LD_INT 15
11544: PUSH
11545: LD_INT 16
11547: PUSH
11548: LD_INT 22
11550: PUSH
11551: LD_INT 26
11553: PUSH
11554: LD_INT 36
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 101
11571: PUSH
11572: LD_INT 102
11574: PUSH
11575: LD_INT 105
11577: PUSH
11578: LD_INT 106
11580: PUSH
11581: LD_INT 108
11583: PUSH
11584: LD_INT 116
11586: PUSH
11587: LD_INT 117
11589: PUSH
11590: LD_INT 118
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: ST_TO_ADDR
11607: GO 14494
11609: LD_INT 4
11611: DOUBLE
11612: EQUAL
11613: IFTRUE 11617
11615: GO 11713
11617: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11618: LD_ADDR_VAR 0 2
11622: PUSH
11623: LD_INT 2
11625: PUSH
11626: LD_INT 4
11628: PUSH
11629: LD_INT 5
11631: PUSH
11632: LD_INT 8
11634: PUSH
11635: LD_INT 11
11637: PUSH
11638: LD_INT 12
11640: PUSH
11641: LD_INT 15
11643: PUSH
11644: LD_INT 16
11646: PUSH
11647: LD_INT 22
11649: PUSH
11650: LD_INT 23
11652: PUSH
11653: LD_INT 26
11655: PUSH
11656: LD_INT 36
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 101
11675: PUSH
11676: LD_INT 102
11678: PUSH
11679: LD_INT 105
11681: PUSH
11682: LD_INT 106
11684: PUSH
11685: LD_INT 108
11687: PUSH
11688: LD_INT 116
11690: PUSH
11691: LD_INT 117
11693: PUSH
11694: LD_INT 118
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: ST_TO_ADDR
11711: GO 14494
11713: LD_INT 5
11715: DOUBLE
11716: EQUAL
11717: IFTRUE 11721
11719: GO 11833
11721: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11722: LD_ADDR_VAR 0 2
11726: PUSH
11727: LD_INT 2
11729: PUSH
11730: LD_INT 4
11732: PUSH
11733: LD_INT 5
11735: PUSH
11736: LD_INT 6
11738: PUSH
11739: LD_INT 8
11741: PUSH
11742: LD_INT 11
11744: PUSH
11745: LD_INT 12
11747: PUSH
11748: LD_INT 15
11750: PUSH
11751: LD_INT 16
11753: PUSH
11754: LD_INT 22
11756: PUSH
11757: LD_INT 23
11759: PUSH
11760: LD_INT 25
11762: PUSH
11763: LD_INT 26
11765: PUSH
11766: LD_INT 36
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 101
11787: PUSH
11788: LD_INT 102
11790: PUSH
11791: LD_INT 105
11793: PUSH
11794: LD_INT 106
11796: PUSH
11797: LD_INT 108
11799: PUSH
11800: LD_INT 109
11802: PUSH
11803: LD_INT 112
11805: PUSH
11806: LD_INT 116
11808: PUSH
11809: LD_INT 117
11811: PUSH
11812: LD_INT 118
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: ST_TO_ADDR
11831: GO 14494
11833: LD_INT 6
11835: DOUBLE
11836: EQUAL
11837: IFTRUE 11841
11839: GO 11973
11841: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11842: LD_ADDR_VAR 0 2
11846: PUSH
11847: LD_INT 2
11849: PUSH
11850: LD_INT 4
11852: PUSH
11853: LD_INT 5
11855: PUSH
11856: LD_INT 6
11858: PUSH
11859: LD_INT 8
11861: PUSH
11862: LD_INT 11
11864: PUSH
11865: LD_INT 12
11867: PUSH
11868: LD_INT 15
11870: PUSH
11871: LD_INT 16
11873: PUSH
11874: LD_INT 20
11876: PUSH
11877: LD_INT 21
11879: PUSH
11880: LD_INT 22
11882: PUSH
11883: LD_INT 23
11885: PUSH
11886: LD_INT 25
11888: PUSH
11889: LD_INT 26
11891: PUSH
11892: LD_INT 30
11894: PUSH
11895: LD_INT 31
11897: PUSH
11898: LD_INT 32
11900: PUSH
11901: LD_INT 36
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 101
11927: PUSH
11928: LD_INT 102
11930: PUSH
11931: LD_INT 105
11933: PUSH
11934: LD_INT 106
11936: PUSH
11937: LD_INT 108
11939: PUSH
11940: LD_INT 109
11942: PUSH
11943: LD_INT 112
11945: PUSH
11946: LD_INT 116
11948: PUSH
11949: LD_INT 117
11951: PUSH
11952: LD_INT 118
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: ST_TO_ADDR
11971: GO 14494
11973: LD_INT 7
11975: DOUBLE
11976: EQUAL
11977: IFTRUE 11981
11979: GO 12093
11981: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11982: LD_ADDR_VAR 0 2
11986: PUSH
11987: LD_INT 2
11989: PUSH
11990: LD_INT 4
11992: PUSH
11993: LD_INT 5
11995: PUSH
11996: LD_INT 7
11998: PUSH
11999: LD_INT 11
12001: PUSH
12002: LD_INT 12
12004: PUSH
12005: LD_INT 15
12007: PUSH
12008: LD_INT 16
12010: PUSH
12011: LD_INT 20
12013: PUSH
12014: LD_INT 21
12016: PUSH
12017: LD_INT 22
12019: PUSH
12020: LD_INT 23
12022: PUSH
12023: LD_INT 25
12025: PUSH
12026: LD_INT 26
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 101
12047: PUSH
12048: LD_INT 102
12050: PUSH
12051: LD_INT 103
12053: PUSH
12054: LD_INT 105
12056: PUSH
12057: LD_INT 106
12059: PUSH
12060: LD_INT 108
12062: PUSH
12063: LD_INT 112
12065: PUSH
12066: LD_INT 116
12068: PUSH
12069: LD_INT 117
12071: PUSH
12072: LD_INT 118
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: ST_TO_ADDR
12091: GO 14494
12093: LD_INT 8
12095: DOUBLE
12096: EQUAL
12097: IFTRUE 12101
12099: GO 12241
12101: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12102: LD_ADDR_VAR 0 2
12106: PUSH
12107: LD_INT 2
12109: PUSH
12110: LD_INT 4
12112: PUSH
12113: LD_INT 5
12115: PUSH
12116: LD_INT 6
12118: PUSH
12119: LD_INT 7
12121: PUSH
12122: LD_INT 8
12124: PUSH
12125: LD_INT 11
12127: PUSH
12128: LD_INT 12
12130: PUSH
12131: LD_INT 15
12133: PUSH
12134: LD_INT 16
12136: PUSH
12137: LD_INT 20
12139: PUSH
12140: LD_INT 21
12142: PUSH
12143: LD_INT 22
12145: PUSH
12146: LD_INT 23
12148: PUSH
12149: LD_INT 25
12151: PUSH
12152: LD_INT 26
12154: PUSH
12155: LD_INT 30
12157: PUSH
12158: LD_INT 31
12160: PUSH
12161: LD_INT 32
12163: PUSH
12164: LD_INT 36
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 101
12191: PUSH
12192: LD_INT 102
12194: PUSH
12195: LD_INT 103
12197: PUSH
12198: LD_INT 105
12200: PUSH
12201: LD_INT 106
12203: PUSH
12204: LD_INT 108
12206: PUSH
12207: LD_INT 109
12209: PUSH
12210: LD_INT 112
12212: PUSH
12213: LD_INT 116
12215: PUSH
12216: LD_INT 117
12218: PUSH
12219: LD_INT 118
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: ST_TO_ADDR
12239: GO 14494
12241: LD_INT 9
12243: DOUBLE
12244: EQUAL
12245: IFTRUE 12249
12247: GO 12397
12249: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12250: LD_ADDR_VAR 0 2
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: LD_INT 4
12260: PUSH
12261: LD_INT 5
12263: PUSH
12264: LD_INT 6
12266: PUSH
12267: LD_INT 7
12269: PUSH
12270: LD_INT 8
12272: PUSH
12273: LD_INT 11
12275: PUSH
12276: LD_INT 12
12278: PUSH
12279: LD_INT 15
12281: PUSH
12282: LD_INT 16
12284: PUSH
12285: LD_INT 20
12287: PUSH
12288: LD_INT 21
12290: PUSH
12291: LD_INT 22
12293: PUSH
12294: LD_INT 23
12296: PUSH
12297: LD_INT 25
12299: PUSH
12300: LD_INT 26
12302: PUSH
12303: LD_INT 28
12305: PUSH
12306: LD_INT 30
12308: PUSH
12309: LD_INT 31
12311: PUSH
12312: LD_INT 32
12314: PUSH
12315: LD_INT 36
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 101
12343: PUSH
12344: LD_INT 102
12346: PUSH
12347: LD_INT 103
12349: PUSH
12350: LD_INT 105
12352: PUSH
12353: LD_INT 106
12355: PUSH
12356: LD_INT 108
12358: PUSH
12359: LD_INT 109
12361: PUSH
12362: LD_INT 112
12364: PUSH
12365: LD_INT 114
12367: PUSH
12368: LD_INT 116
12370: PUSH
12371: LD_INT 117
12373: PUSH
12374: LD_INT 118
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: ST_TO_ADDR
12395: GO 14494
12397: LD_INT 10
12399: DOUBLE
12400: EQUAL
12401: IFTRUE 12405
12403: GO 12601
12405: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12406: LD_ADDR_VAR 0 2
12410: PUSH
12411: LD_INT 2
12413: PUSH
12414: LD_INT 4
12416: PUSH
12417: LD_INT 5
12419: PUSH
12420: LD_INT 6
12422: PUSH
12423: LD_INT 7
12425: PUSH
12426: LD_INT 8
12428: PUSH
12429: LD_INT 9
12431: PUSH
12432: LD_INT 10
12434: PUSH
12435: LD_INT 11
12437: PUSH
12438: LD_INT 12
12440: PUSH
12441: LD_INT 13
12443: PUSH
12444: LD_INT 14
12446: PUSH
12447: LD_INT 15
12449: PUSH
12450: LD_INT 16
12452: PUSH
12453: LD_INT 17
12455: PUSH
12456: LD_INT 18
12458: PUSH
12459: LD_INT 19
12461: PUSH
12462: LD_INT 20
12464: PUSH
12465: LD_INT 21
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_INT 23
12473: PUSH
12474: LD_INT 24
12476: PUSH
12477: LD_INT 25
12479: PUSH
12480: LD_INT 26
12482: PUSH
12483: LD_INT 28
12485: PUSH
12486: LD_INT 30
12488: PUSH
12489: LD_INT 31
12491: PUSH
12492: LD_INT 32
12494: PUSH
12495: LD_INT 36
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 101
12531: PUSH
12532: LD_INT 102
12534: PUSH
12535: LD_INT 103
12537: PUSH
12538: LD_INT 104
12540: PUSH
12541: LD_INT 105
12543: PUSH
12544: LD_INT 106
12546: PUSH
12547: LD_INT 107
12549: PUSH
12550: LD_INT 108
12552: PUSH
12553: LD_INT 109
12555: PUSH
12556: LD_INT 110
12558: PUSH
12559: LD_INT 111
12561: PUSH
12562: LD_INT 112
12564: PUSH
12565: LD_INT 114
12567: PUSH
12568: LD_INT 116
12570: PUSH
12571: LD_INT 117
12573: PUSH
12574: LD_INT 118
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: ST_TO_ADDR
12599: GO 14494
12601: LD_INT 11
12603: DOUBLE
12604: EQUAL
12605: IFTRUE 12609
12607: GO 12813
12609: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12610: LD_ADDR_VAR 0 2
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: LD_INT 3
12620: PUSH
12621: LD_INT 4
12623: PUSH
12624: LD_INT 5
12626: PUSH
12627: LD_INT 6
12629: PUSH
12630: LD_INT 7
12632: PUSH
12633: LD_INT 8
12635: PUSH
12636: LD_INT 9
12638: PUSH
12639: LD_INT 10
12641: PUSH
12642: LD_INT 11
12644: PUSH
12645: LD_INT 12
12647: PUSH
12648: LD_INT 13
12650: PUSH
12651: LD_INT 14
12653: PUSH
12654: LD_INT 15
12656: PUSH
12657: LD_INT 16
12659: PUSH
12660: LD_INT 17
12662: PUSH
12663: LD_INT 18
12665: PUSH
12666: LD_INT 19
12668: PUSH
12669: LD_INT 20
12671: PUSH
12672: LD_INT 21
12674: PUSH
12675: LD_INT 22
12677: PUSH
12678: LD_INT 23
12680: PUSH
12681: LD_INT 24
12683: PUSH
12684: LD_INT 25
12686: PUSH
12687: LD_INT 26
12689: PUSH
12690: LD_INT 28
12692: PUSH
12693: LD_INT 30
12695: PUSH
12696: LD_INT 31
12698: PUSH
12699: LD_INT 32
12701: PUSH
12702: LD_INT 34
12704: PUSH
12705: LD_INT 36
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PUSH
12741: LD_INT 101
12743: PUSH
12744: LD_INT 102
12746: PUSH
12747: LD_INT 103
12749: PUSH
12750: LD_INT 104
12752: PUSH
12753: LD_INT 105
12755: PUSH
12756: LD_INT 106
12758: PUSH
12759: LD_INT 107
12761: PUSH
12762: LD_INT 108
12764: PUSH
12765: LD_INT 109
12767: PUSH
12768: LD_INT 110
12770: PUSH
12771: LD_INT 111
12773: PUSH
12774: LD_INT 112
12776: PUSH
12777: LD_INT 114
12779: PUSH
12780: LD_INT 116
12782: PUSH
12783: LD_INT 117
12785: PUSH
12786: LD_INT 118
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: ST_TO_ADDR
12811: GO 14494
12813: LD_INT 12
12815: DOUBLE
12816: EQUAL
12817: IFTRUE 12821
12819: GO 13041
12821: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12822: LD_ADDR_VAR 0 2
12826: PUSH
12827: LD_INT 1
12829: PUSH
12830: LD_INT 2
12832: PUSH
12833: LD_INT 3
12835: PUSH
12836: LD_INT 4
12838: PUSH
12839: LD_INT 5
12841: PUSH
12842: LD_INT 6
12844: PUSH
12845: LD_INT 7
12847: PUSH
12848: LD_INT 8
12850: PUSH
12851: LD_INT 9
12853: PUSH
12854: LD_INT 10
12856: PUSH
12857: LD_INT 11
12859: PUSH
12860: LD_INT 12
12862: PUSH
12863: LD_INT 13
12865: PUSH
12866: LD_INT 14
12868: PUSH
12869: LD_INT 15
12871: PUSH
12872: LD_INT 16
12874: PUSH
12875: LD_INT 17
12877: PUSH
12878: LD_INT 18
12880: PUSH
12881: LD_INT 19
12883: PUSH
12884: LD_INT 20
12886: PUSH
12887: LD_INT 21
12889: PUSH
12890: LD_INT 22
12892: PUSH
12893: LD_INT 23
12895: PUSH
12896: LD_INT 24
12898: PUSH
12899: LD_INT 25
12901: PUSH
12902: LD_INT 26
12904: PUSH
12905: LD_INT 27
12907: PUSH
12908: LD_INT 28
12910: PUSH
12911: LD_INT 30
12913: PUSH
12914: LD_INT 31
12916: PUSH
12917: LD_INT 32
12919: PUSH
12920: LD_INT 33
12922: PUSH
12923: LD_INT 34
12925: PUSH
12926: LD_INT 36
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 101
12967: PUSH
12968: LD_INT 102
12970: PUSH
12971: LD_INT 103
12973: PUSH
12974: LD_INT 104
12976: PUSH
12977: LD_INT 105
12979: PUSH
12980: LD_INT 106
12982: PUSH
12983: LD_INT 107
12985: PUSH
12986: LD_INT 108
12988: PUSH
12989: LD_INT 109
12991: PUSH
12992: LD_INT 110
12994: PUSH
12995: LD_INT 111
12997: PUSH
12998: LD_INT 112
13000: PUSH
13001: LD_INT 113
13003: PUSH
13004: LD_INT 114
13006: PUSH
13007: LD_INT 116
13009: PUSH
13010: LD_INT 117
13012: PUSH
13013: LD_INT 118
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: ST_TO_ADDR
13039: GO 14494
13041: LD_INT 13
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13257
13049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13050: LD_ADDR_VAR 0 2
13054: PUSH
13055: LD_INT 1
13057: PUSH
13058: LD_INT 2
13060: PUSH
13061: LD_INT 3
13063: PUSH
13064: LD_INT 4
13066: PUSH
13067: LD_INT 5
13069: PUSH
13070: LD_INT 8
13072: PUSH
13073: LD_INT 9
13075: PUSH
13076: LD_INT 10
13078: PUSH
13079: LD_INT 11
13081: PUSH
13082: LD_INT 12
13084: PUSH
13085: LD_INT 14
13087: PUSH
13088: LD_INT 15
13090: PUSH
13091: LD_INT 16
13093: PUSH
13094: LD_INT 17
13096: PUSH
13097: LD_INT 18
13099: PUSH
13100: LD_INT 19
13102: PUSH
13103: LD_INT 20
13105: PUSH
13106: LD_INT 21
13108: PUSH
13109: LD_INT 22
13111: PUSH
13112: LD_INT 23
13114: PUSH
13115: LD_INT 24
13117: PUSH
13118: LD_INT 25
13120: PUSH
13121: LD_INT 26
13123: PUSH
13124: LD_INT 27
13126: PUSH
13127: LD_INT 28
13129: PUSH
13130: LD_INT 30
13132: PUSH
13133: LD_INT 31
13135: PUSH
13136: LD_INT 32
13138: PUSH
13139: LD_INT 33
13141: PUSH
13142: LD_INT 34
13144: PUSH
13145: LD_INT 36
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 101
13183: PUSH
13184: LD_INT 102
13186: PUSH
13187: LD_INT 103
13189: PUSH
13190: LD_INT 104
13192: PUSH
13193: LD_INT 105
13195: PUSH
13196: LD_INT 106
13198: PUSH
13199: LD_INT 107
13201: PUSH
13202: LD_INT 108
13204: PUSH
13205: LD_INT 109
13207: PUSH
13208: LD_INT 110
13210: PUSH
13211: LD_INT 111
13213: PUSH
13214: LD_INT 112
13216: PUSH
13217: LD_INT 113
13219: PUSH
13220: LD_INT 114
13222: PUSH
13223: LD_INT 116
13225: PUSH
13226: LD_INT 117
13228: PUSH
13229: LD_INT 118
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: ST_TO_ADDR
13255: GO 14494
13257: LD_INT 14
13259: DOUBLE
13260: EQUAL
13261: IFTRUE 13265
13263: GO 13489
13265: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13266: LD_ADDR_VAR 0 2
13270: PUSH
13271: LD_INT 1
13273: PUSH
13274: LD_INT 2
13276: PUSH
13277: LD_INT 3
13279: PUSH
13280: LD_INT 4
13282: PUSH
13283: LD_INT 5
13285: PUSH
13286: LD_INT 6
13288: PUSH
13289: LD_INT 7
13291: PUSH
13292: LD_INT 8
13294: PUSH
13295: LD_INT 9
13297: PUSH
13298: LD_INT 10
13300: PUSH
13301: LD_INT 11
13303: PUSH
13304: LD_INT 12
13306: PUSH
13307: LD_INT 13
13309: PUSH
13310: LD_INT 14
13312: PUSH
13313: LD_INT 15
13315: PUSH
13316: LD_INT 16
13318: PUSH
13319: LD_INT 17
13321: PUSH
13322: LD_INT 18
13324: PUSH
13325: LD_INT 19
13327: PUSH
13328: LD_INT 20
13330: PUSH
13331: LD_INT 21
13333: PUSH
13334: LD_INT 22
13336: PUSH
13337: LD_INT 23
13339: PUSH
13340: LD_INT 24
13342: PUSH
13343: LD_INT 25
13345: PUSH
13346: LD_INT 26
13348: PUSH
13349: LD_INT 27
13351: PUSH
13352: LD_INT 28
13354: PUSH
13355: LD_INT 29
13357: PUSH
13358: LD_INT 30
13360: PUSH
13361: LD_INT 31
13363: PUSH
13364: LD_INT 32
13366: PUSH
13367: LD_INT 33
13369: PUSH
13370: LD_INT 34
13372: PUSH
13373: LD_INT 36
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 101
13415: PUSH
13416: LD_INT 102
13418: PUSH
13419: LD_INT 103
13421: PUSH
13422: LD_INT 104
13424: PUSH
13425: LD_INT 105
13427: PUSH
13428: LD_INT 106
13430: PUSH
13431: LD_INT 107
13433: PUSH
13434: LD_INT 108
13436: PUSH
13437: LD_INT 109
13439: PUSH
13440: LD_INT 110
13442: PUSH
13443: LD_INT 111
13445: PUSH
13446: LD_INT 112
13448: PUSH
13449: LD_INT 113
13451: PUSH
13452: LD_INT 114
13454: PUSH
13455: LD_INT 116
13457: PUSH
13458: LD_INT 117
13460: PUSH
13461: LD_INT 118
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: ST_TO_ADDR
13487: GO 14494
13489: LD_INT 15
13491: DOUBLE
13492: EQUAL
13493: IFTRUE 13497
13495: GO 13721
13497: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13498: LD_ADDR_VAR 0 2
13502: PUSH
13503: LD_INT 1
13505: PUSH
13506: LD_INT 2
13508: PUSH
13509: LD_INT 3
13511: PUSH
13512: LD_INT 4
13514: PUSH
13515: LD_INT 5
13517: PUSH
13518: LD_INT 6
13520: PUSH
13521: LD_INT 7
13523: PUSH
13524: LD_INT 8
13526: PUSH
13527: LD_INT 9
13529: PUSH
13530: LD_INT 10
13532: PUSH
13533: LD_INT 11
13535: PUSH
13536: LD_INT 12
13538: PUSH
13539: LD_INT 13
13541: PUSH
13542: LD_INT 14
13544: PUSH
13545: LD_INT 15
13547: PUSH
13548: LD_INT 16
13550: PUSH
13551: LD_INT 17
13553: PUSH
13554: LD_INT 18
13556: PUSH
13557: LD_INT 19
13559: PUSH
13560: LD_INT 20
13562: PUSH
13563: LD_INT 21
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_INT 23
13571: PUSH
13572: LD_INT 24
13574: PUSH
13575: LD_INT 25
13577: PUSH
13578: LD_INT 26
13580: PUSH
13581: LD_INT 27
13583: PUSH
13584: LD_INT 28
13586: PUSH
13587: LD_INT 29
13589: PUSH
13590: LD_INT 30
13592: PUSH
13593: LD_INT 31
13595: PUSH
13596: LD_INT 32
13598: PUSH
13599: LD_INT 33
13601: PUSH
13602: LD_INT 34
13604: PUSH
13605: LD_INT 36
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 101
13647: PUSH
13648: LD_INT 102
13650: PUSH
13651: LD_INT 103
13653: PUSH
13654: LD_INT 104
13656: PUSH
13657: LD_INT 105
13659: PUSH
13660: LD_INT 106
13662: PUSH
13663: LD_INT 107
13665: PUSH
13666: LD_INT 108
13668: PUSH
13669: LD_INT 109
13671: PUSH
13672: LD_INT 110
13674: PUSH
13675: LD_INT 111
13677: PUSH
13678: LD_INT 112
13680: PUSH
13681: LD_INT 113
13683: PUSH
13684: LD_INT 114
13686: PUSH
13687: LD_INT 116
13689: PUSH
13690: LD_INT 117
13692: PUSH
13693: LD_INT 118
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: ST_TO_ADDR
13719: GO 14494
13721: LD_INT 16
13723: DOUBLE
13724: EQUAL
13725: IFTRUE 13729
13727: GO 13865
13729: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13730: LD_ADDR_VAR 0 2
13734: PUSH
13735: LD_INT 2
13737: PUSH
13738: LD_INT 4
13740: PUSH
13741: LD_INT 5
13743: PUSH
13744: LD_INT 7
13746: PUSH
13747: LD_INT 11
13749: PUSH
13750: LD_INT 12
13752: PUSH
13753: LD_INT 15
13755: PUSH
13756: LD_INT 16
13758: PUSH
13759: LD_INT 20
13761: PUSH
13762: LD_INT 21
13764: PUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 23
13770: PUSH
13771: LD_INT 25
13773: PUSH
13774: LD_INT 26
13776: PUSH
13777: LD_INT 30
13779: PUSH
13780: LD_INT 31
13782: PUSH
13783: LD_INT 32
13785: PUSH
13786: LD_INT 33
13788: PUSH
13789: LD_INT 34
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 101
13815: PUSH
13816: LD_INT 102
13818: PUSH
13819: LD_INT 103
13821: PUSH
13822: LD_INT 106
13824: PUSH
13825: LD_INT 108
13827: PUSH
13828: LD_INT 112
13830: PUSH
13831: LD_INT 113
13833: PUSH
13834: LD_INT 114
13836: PUSH
13837: LD_INT 116
13839: PUSH
13840: LD_INT 117
13842: PUSH
13843: LD_INT 118
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: ST_TO_ADDR
13863: GO 14494
13865: LD_INT 17
13867: DOUBLE
13868: EQUAL
13869: IFTRUE 13873
13871: GO 14097
13873: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13874: LD_ADDR_VAR 0 2
13878: PUSH
13879: LD_INT 1
13881: PUSH
13882: LD_INT 2
13884: PUSH
13885: LD_INT 3
13887: PUSH
13888: LD_INT 4
13890: PUSH
13891: LD_INT 5
13893: PUSH
13894: LD_INT 6
13896: PUSH
13897: LD_INT 7
13899: PUSH
13900: LD_INT 8
13902: PUSH
13903: LD_INT 9
13905: PUSH
13906: LD_INT 10
13908: PUSH
13909: LD_INT 11
13911: PUSH
13912: LD_INT 12
13914: PUSH
13915: LD_INT 13
13917: PUSH
13918: LD_INT 14
13920: PUSH
13921: LD_INT 15
13923: PUSH
13924: LD_INT 16
13926: PUSH
13927: LD_INT 17
13929: PUSH
13930: LD_INT 18
13932: PUSH
13933: LD_INT 19
13935: PUSH
13936: LD_INT 20
13938: PUSH
13939: LD_INT 21
13941: PUSH
13942: LD_INT 22
13944: PUSH
13945: LD_INT 23
13947: PUSH
13948: LD_INT 24
13950: PUSH
13951: LD_INT 25
13953: PUSH
13954: LD_INT 26
13956: PUSH
13957: LD_INT 27
13959: PUSH
13960: LD_INT 28
13962: PUSH
13963: LD_INT 29
13965: PUSH
13966: LD_INT 30
13968: PUSH
13969: LD_INT 31
13971: PUSH
13972: LD_INT 32
13974: PUSH
13975: LD_INT 33
13977: PUSH
13978: LD_INT 34
13980: PUSH
13981: LD_INT 36
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 101
14023: PUSH
14024: LD_INT 102
14026: PUSH
14027: LD_INT 103
14029: PUSH
14030: LD_INT 104
14032: PUSH
14033: LD_INT 105
14035: PUSH
14036: LD_INT 106
14038: PUSH
14039: LD_INT 107
14041: PUSH
14042: LD_INT 108
14044: PUSH
14045: LD_INT 109
14047: PUSH
14048: LD_INT 110
14050: PUSH
14051: LD_INT 111
14053: PUSH
14054: LD_INT 112
14056: PUSH
14057: LD_INT 113
14059: PUSH
14060: LD_INT 114
14062: PUSH
14063: LD_INT 116
14065: PUSH
14066: LD_INT 117
14068: PUSH
14069: LD_INT 118
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: ST_TO_ADDR
14095: GO 14494
14097: LD_INT 18
14099: DOUBLE
14100: EQUAL
14101: IFTRUE 14105
14103: GO 14253
14105: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14106: LD_ADDR_VAR 0 2
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: LD_INT 4
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: LD_INT 7
14122: PUSH
14123: LD_INT 11
14125: PUSH
14126: LD_INT 12
14128: PUSH
14129: LD_INT 15
14131: PUSH
14132: LD_INT 16
14134: PUSH
14135: LD_INT 20
14137: PUSH
14138: LD_INT 21
14140: PUSH
14141: LD_INT 22
14143: PUSH
14144: LD_INT 23
14146: PUSH
14147: LD_INT 25
14149: PUSH
14150: LD_INT 26
14152: PUSH
14153: LD_INT 30
14155: PUSH
14156: LD_INT 31
14158: PUSH
14159: LD_INT 32
14161: PUSH
14162: LD_INT 33
14164: PUSH
14165: LD_INT 34
14167: PUSH
14168: LD_INT 35
14170: PUSH
14171: LD_INT 36
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 101
14199: PUSH
14200: LD_INT 102
14202: PUSH
14203: LD_INT 103
14205: PUSH
14206: LD_INT 106
14208: PUSH
14209: LD_INT 108
14211: PUSH
14212: LD_INT 112
14214: PUSH
14215: LD_INT 113
14217: PUSH
14218: LD_INT 114
14220: PUSH
14221: LD_INT 115
14223: PUSH
14224: LD_INT 116
14226: PUSH
14227: LD_INT 117
14229: PUSH
14230: LD_INT 118
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: ST_TO_ADDR
14251: GO 14494
14253: LD_INT 19
14255: DOUBLE
14256: EQUAL
14257: IFTRUE 14261
14259: GO 14493
14261: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14262: LD_ADDR_VAR 0 2
14266: PUSH
14267: LD_INT 1
14269: PUSH
14270: LD_INT 2
14272: PUSH
14273: LD_INT 3
14275: PUSH
14276: LD_INT 4
14278: PUSH
14279: LD_INT 5
14281: PUSH
14282: LD_INT 6
14284: PUSH
14285: LD_INT 7
14287: PUSH
14288: LD_INT 8
14290: PUSH
14291: LD_INT 9
14293: PUSH
14294: LD_INT 10
14296: PUSH
14297: LD_INT 11
14299: PUSH
14300: LD_INT 12
14302: PUSH
14303: LD_INT 13
14305: PUSH
14306: LD_INT 14
14308: PUSH
14309: LD_INT 15
14311: PUSH
14312: LD_INT 16
14314: PUSH
14315: LD_INT 17
14317: PUSH
14318: LD_INT 18
14320: PUSH
14321: LD_INT 19
14323: PUSH
14324: LD_INT 20
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: LD_INT 23
14335: PUSH
14336: LD_INT 24
14338: PUSH
14339: LD_INT 25
14341: PUSH
14342: LD_INT 26
14344: PUSH
14345: LD_INT 27
14347: PUSH
14348: LD_INT 28
14350: PUSH
14351: LD_INT 29
14353: PUSH
14354: LD_INT 30
14356: PUSH
14357: LD_INT 31
14359: PUSH
14360: LD_INT 32
14362: PUSH
14363: LD_INT 33
14365: PUSH
14366: LD_INT 34
14368: PUSH
14369: LD_INT 35
14371: PUSH
14372: LD_INT 36
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 101
14415: PUSH
14416: LD_INT 102
14418: PUSH
14419: LD_INT 103
14421: PUSH
14422: LD_INT 104
14424: PUSH
14425: LD_INT 105
14427: PUSH
14428: LD_INT 106
14430: PUSH
14431: LD_INT 107
14433: PUSH
14434: LD_INT 108
14436: PUSH
14437: LD_INT 109
14439: PUSH
14440: LD_INT 110
14442: PUSH
14443: LD_INT 111
14445: PUSH
14446: LD_INT 112
14448: PUSH
14449: LD_INT 113
14451: PUSH
14452: LD_INT 114
14454: PUSH
14455: LD_INT 115
14457: PUSH
14458: LD_INT 116
14460: PUSH
14461: LD_INT 117
14463: PUSH
14464: LD_INT 118
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: ST_TO_ADDR
14491: GO 14494
14493: POP
// end else
14494: GO 14725
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14496: LD_ADDR_VAR 0 2
14500: PUSH
14501: LD_INT 1
14503: PUSH
14504: LD_INT 2
14506: PUSH
14507: LD_INT 3
14509: PUSH
14510: LD_INT 4
14512: PUSH
14513: LD_INT 5
14515: PUSH
14516: LD_INT 6
14518: PUSH
14519: LD_INT 7
14521: PUSH
14522: LD_INT 8
14524: PUSH
14525: LD_INT 9
14527: PUSH
14528: LD_INT 10
14530: PUSH
14531: LD_INT 11
14533: PUSH
14534: LD_INT 12
14536: PUSH
14537: LD_INT 13
14539: PUSH
14540: LD_INT 14
14542: PUSH
14543: LD_INT 15
14545: PUSH
14546: LD_INT 16
14548: PUSH
14549: LD_INT 17
14551: PUSH
14552: LD_INT 18
14554: PUSH
14555: LD_INT 19
14557: PUSH
14558: LD_INT 20
14560: PUSH
14561: LD_INT 21
14563: PUSH
14564: LD_INT 22
14566: PUSH
14567: LD_INT 23
14569: PUSH
14570: LD_INT 24
14572: PUSH
14573: LD_INT 25
14575: PUSH
14576: LD_INT 26
14578: PUSH
14579: LD_INT 27
14581: PUSH
14582: LD_INT 28
14584: PUSH
14585: LD_INT 29
14587: PUSH
14588: LD_INT 30
14590: PUSH
14591: LD_INT 31
14593: PUSH
14594: LD_INT 32
14596: PUSH
14597: LD_INT 33
14599: PUSH
14600: LD_INT 34
14602: PUSH
14603: LD_INT 35
14605: PUSH
14606: LD_INT 36
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 101
14649: PUSH
14650: LD_INT 102
14652: PUSH
14653: LD_INT 103
14655: PUSH
14656: LD_INT 104
14658: PUSH
14659: LD_INT 105
14661: PUSH
14662: LD_INT 106
14664: PUSH
14665: LD_INT 107
14667: PUSH
14668: LD_INT 108
14670: PUSH
14671: LD_INT 109
14673: PUSH
14674: LD_INT 110
14676: PUSH
14677: LD_INT 111
14679: PUSH
14680: LD_INT 112
14682: PUSH
14683: LD_INT 113
14685: PUSH
14686: LD_INT 114
14688: PUSH
14689: LD_INT 115
14691: PUSH
14692: LD_INT 116
14694: PUSH
14695: LD_INT 117
14697: PUSH
14698: LD_INT 118
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: ST_TO_ADDR
// if result then
14725: LD_VAR 0 2
14729: IFFALSE 15515
// begin normal :=  ;
14731: LD_ADDR_VAR 0 5
14735: PUSH
14736: LD_STRING 
14738: ST_TO_ADDR
// hardcore :=  ;
14739: LD_ADDR_VAR 0 6
14743: PUSH
14744: LD_STRING 
14746: ST_TO_ADDR
// active :=  ;
14747: LD_ADDR_VAR 0 7
14751: PUSH
14752: LD_STRING 
14754: ST_TO_ADDR
// for i = 1 to normalCounter do
14755: LD_ADDR_VAR 0 8
14759: PUSH
14760: DOUBLE
14761: LD_INT 1
14763: DEC
14764: ST_TO_ADDR
14765: LD_EXP 27
14769: PUSH
14770: FOR_TO
14771: IFFALSE 14872
// begin tmp := 0 ;
14773: LD_ADDR_VAR 0 3
14777: PUSH
14778: LD_STRING 0
14780: ST_TO_ADDR
// if result [ 1 ] then
14781: LD_VAR 0 2
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: IFFALSE 14854
// if result [ 1 ] [ 1 ] = i then
14791: LD_VAR 0 2
14795: PUSH
14796: LD_INT 1
14798: ARRAY
14799: PUSH
14800: LD_INT 1
14802: ARRAY
14803: PUSH
14804: LD_VAR 0 8
14808: EQUAL
14809: IFFALSE 14854
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14811: LD_ADDR_VAR 0 2
14815: PUSH
14816: LD_VAR 0 2
14820: PPUSH
14821: LD_INT 1
14823: PPUSH
14824: LD_VAR 0 2
14828: PUSH
14829: LD_INT 1
14831: ARRAY
14832: PPUSH
14833: LD_INT 1
14835: PPUSH
14836: CALL_OW 3
14840: PPUSH
14841: CALL_OW 1
14845: ST_TO_ADDR
// tmp := 1 ;
14846: LD_ADDR_VAR 0 3
14850: PUSH
14851: LD_STRING 1
14853: ST_TO_ADDR
// end ; normal := normal & tmp ;
14854: LD_ADDR_VAR 0 5
14858: PUSH
14859: LD_VAR 0 5
14863: PUSH
14864: LD_VAR 0 3
14868: STR
14869: ST_TO_ADDR
// end ;
14870: GO 14770
14872: POP
14873: POP
// for i = 1 to hardcoreCounter do
14874: LD_ADDR_VAR 0 8
14878: PUSH
14879: DOUBLE
14880: LD_INT 1
14882: DEC
14883: ST_TO_ADDR
14884: LD_EXP 28
14888: PUSH
14889: FOR_TO
14890: IFFALSE 14995
// begin tmp := 0 ;
14892: LD_ADDR_VAR 0 3
14896: PUSH
14897: LD_STRING 0
14899: ST_TO_ADDR
// if result [ 2 ] then
14900: LD_VAR 0 2
14904: PUSH
14905: LD_INT 2
14907: ARRAY
14908: IFFALSE 14977
// if result [ 2 ] [ 1 ] = 100 + i then
14910: LD_VAR 0 2
14914: PUSH
14915: LD_INT 2
14917: ARRAY
14918: PUSH
14919: LD_INT 1
14921: ARRAY
14922: PUSH
14923: LD_INT 100
14925: PUSH
14926: LD_VAR 0 8
14930: PLUS
14931: EQUAL
14932: IFFALSE 14977
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14934: LD_ADDR_VAR 0 2
14938: PUSH
14939: LD_VAR 0 2
14943: PPUSH
14944: LD_INT 2
14946: PPUSH
14947: LD_VAR 0 2
14951: PUSH
14952: LD_INT 2
14954: ARRAY
14955: PPUSH
14956: LD_INT 1
14958: PPUSH
14959: CALL_OW 3
14963: PPUSH
14964: CALL_OW 1
14968: ST_TO_ADDR
// tmp := 1 ;
14969: LD_ADDR_VAR 0 3
14973: PUSH
14974: LD_STRING 1
14976: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14977: LD_ADDR_VAR 0 6
14981: PUSH
14982: LD_VAR 0 6
14986: PUSH
14987: LD_VAR 0 3
14991: STR
14992: ST_TO_ADDR
// end ;
14993: GO 14889
14995: POP
14996: POP
// if isGameLoad then
14997: LD_VAR 0 1
15001: IFFALSE 15476
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15003: LD_ADDR_VAR 0 4
15007: PUSH
15008: LD_EXP 31
15012: PUSH
15013: LD_EXP 30
15017: PUSH
15018: LD_EXP 32
15022: PUSH
15023: LD_EXP 29
15027: PUSH
15028: LD_EXP 33
15032: PUSH
15033: LD_EXP 34
15037: PUSH
15038: LD_EXP 35
15042: PUSH
15043: LD_EXP 36
15047: PUSH
15048: LD_EXP 37
15052: PUSH
15053: LD_EXP 38
15057: PUSH
15058: LD_EXP 39
15062: PUSH
15063: LD_EXP 40
15067: PUSH
15068: LD_EXP 41
15072: PUSH
15073: LD_EXP 42
15077: PUSH
15078: LD_EXP 50
15082: PUSH
15083: LD_EXP 51
15087: PUSH
15088: LD_EXP 52
15092: PUSH
15093: LD_EXP 53
15097: PUSH
15098: LD_EXP 55
15102: PUSH
15103: LD_EXP 56
15107: PUSH
15108: LD_EXP 57
15112: PUSH
15113: LD_EXP 60
15117: PUSH
15118: LD_EXP 62
15122: PUSH
15123: LD_EXP 63
15127: PUSH
15128: LD_EXP 64
15132: PUSH
15133: LD_EXP 66
15137: PUSH
15138: LD_EXP 67
15142: PUSH
15143: LD_EXP 70
15147: PUSH
15148: LD_EXP 71
15152: PUSH
15153: LD_EXP 72
15157: PUSH
15158: LD_EXP 73
15162: PUSH
15163: LD_EXP 74
15167: PUSH
15168: LD_EXP 75
15172: PUSH
15173: LD_EXP 76
15177: PUSH
15178: LD_EXP 77
15182: PUSH
15183: LD_EXP 78
15187: PUSH
15188: LD_EXP 43
15192: PUSH
15193: LD_EXP 44
15197: PUSH
15198: LD_EXP 47
15202: PUSH
15203: LD_EXP 48
15207: PUSH
15208: LD_EXP 49
15212: PUSH
15213: LD_EXP 45
15217: PUSH
15218: LD_EXP 46
15222: PUSH
15223: LD_EXP 54
15227: PUSH
15228: LD_EXP 58
15232: PUSH
15233: LD_EXP 59
15237: PUSH
15238: LD_EXP 61
15242: PUSH
15243: LD_EXP 65
15247: PUSH
15248: LD_EXP 68
15252: PUSH
15253: LD_EXP 69
15257: PUSH
15258: LD_EXP 79
15262: PUSH
15263: LD_EXP 80
15267: PUSH
15268: LD_EXP 81
15272: PUSH
15273: LD_EXP 82
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: ST_TO_ADDR
// tmp :=  ;
15334: LD_ADDR_VAR 0 3
15338: PUSH
15339: LD_STRING 
15341: ST_TO_ADDR
// for i = 1 to normalCounter do
15342: LD_ADDR_VAR 0 8
15346: PUSH
15347: DOUBLE
15348: LD_INT 1
15350: DEC
15351: ST_TO_ADDR
15352: LD_EXP 27
15356: PUSH
15357: FOR_TO
15358: IFFALSE 15394
// begin if flags [ i ] then
15360: LD_VAR 0 4
15364: PUSH
15365: LD_VAR 0 8
15369: ARRAY
15370: IFFALSE 15392
// tmp := tmp & i & ; ;
15372: LD_ADDR_VAR 0 3
15376: PUSH
15377: LD_VAR 0 3
15381: PUSH
15382: LD_VAR 0 8
15386: STR
15387: PUSH
15388: LD_STRING ;
15390: STR
15391: ST_TO_ADDR
// end ;
15392: GO 15357
15394: POP
15395: POP
// for i = 1 to hardcoreCounter do
15396: LD_ADDR_VAR 0 8
15400: PUSH
15401: DOUBLE
15402: LD_INT 1
15404: DEC
15405: ST_TO_ADDR
15406: LD_EXP 28
15410: PUSH
15411: FOR_TO
15412: IFFALSE 15458
// begin if flags [ normalCounter + i ] then
15414: LD_VAR 0 4
15418: PUSH
15419: LD_EXP 27
15423: PUSH
15424: LD_VAR 0 8
15428: PLUS
15429: ARRAY
15430: IFFALSE 15456
// tmp := tmp & ( 100 + i ) & ; ;
15432: LD_ADDR_VAR 0 3
15436: PUSH
15437: LD_VAR 0 3
15441: PUSH
15442: LD_INT 100
15444: PUSH
15445: LD_VAR 0 8
15449: PLUS
15450: STR
15451: PUSH
15452: LD_STRING ;
15454: STR
15455: ST_TO_ADDR
// end ;
15456: GO 15411
15458: POP
15459: POP
// if tmp then
15460: LD_VAR 0 3
15464: IFFALSE 15476
// active := tmp ;
15466: LD_ADDR_VAR 0 7
15470: PUSH
15471: LD_VAR 0 3
15475: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15476: LD_STRING getStreamItemsFromMission("
15478: PUSH
15479: LD_VAR 0 5
15483: STR
15484: PUSH
15485: LD_STRING ","
15487: STR
15488: PUSH
15489: LD_VAR 0 6
15493: STR
15494: PUSH
15495: LD_STRING ","
15497: STR
15498: PUSH
15499: LD_VAR 0 7
15503: STR
15504: PUSH
15505: LD_STRING ")
15507: STR
15508: PPUSH
15509: CALL_OW 559
// end else
15513: GO 15522
// ToLua ( getStreamItemsFromMission("","","") ) ;
15515: LD_STRING getStreamItemsFromMission("","","")
15517: PPUSH
15518: CALL_OW 559
// end ;
15522: LD_VAR 0 2
15526: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15527: LD_EXP 26
15531: PUSH
15532: LD_EXP 31
15536: AND
15537: IFFALSE 15661
15539: GO 15541
15541: DISABLE
15542: LD_INT 0
15544: PPUSH
15545: PPUSH
// begin enable ;
15546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15547: LD_ADDR_VAR 0 2
15551: PUSH
15552: LD_INT 22
15554: PUSH
15555: LD_OWVAR 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: LD_INT 34
15569: PUSH
15570: LD_INT 7
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 34
15579: PUSH
15580: LD_INT 45
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 34
15589: PUSH
15590: LD_INT 28
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 34
15599: PUSH
15600: LD_INT 47
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: ST_TO_ADDR
// if not tmp then
15623: LD_VAR 0 2
15627: NOT
15628: IFFALSE 15632
// exit ;
15630: GO 15661
// for i in tmp do
15632: LD_ADDR_VAR 0 1
15636: PUSH
15637: LD_VAR 0 2
15641: PUSH
15642: FOR_IN
15643: IFFALSE 15659
// begin SetLives ( i , 0 ) ;
15645: LD_VAR 0 1
15649: PPUSH
15650: LD_INT 0
15652: PPUSH
15653: CALL_OW 234
// end ;
15657: GO 15642
15659: POP
15660: POP
// end ;
15661: PPOPN 2
15663: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15664: LD_EXP 26
15668: PUSH
15669: LD_EXP 32
15673: AND
15674: IFFALSE 15758
15676: GO 15678
15678: DISABLE
15679: LD_INT 0
15681: PPUSH
15682: PPUSH
// begin enable ;
15683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15684: LD_ADDR_VAR 0 2
15688: PUSH
15689: LD_INT 22
15691: PUSH
15692: LD_OWVAR 2
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 32
15703: PUSH
15704: LD_INT 3
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PPUSH
15715: CALL_OW 69
15719: ST_TO_ADDR
// if not tmp then
15720: LD_VAR 0 2
15724: NOT
15725: IFFALSE 15729
// exit ;
15727: GO 15758
// for i in tmp do
15729: LD_ADDR_VAR 0 1
15733: PUSH
15734: LD_VAR 0 2
15738: PUSH
15739: FOR_IN
15740: IFFALSE 15756
// begin SetLives ( i , 0 ) ;
15742: LD_VAR 0 1
15746: PPUSH
15747: LD_INT 0
15749: PPUSH
15750: CALL_OW 234
// end ;
15754: GO 15739
15756: POP
15757: POP
// end ;
15758: PPOPN 2
15760: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15761: LD_EXP 26
15765: PUSH
15766: LD_EXP 29
15770: AND
15771: IFFALSE 15864
15773: GO 15775
15775: DISABLE
15776: LD_INT 0
15778: PPUSH
// begin enable ;
15779: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15780: LD_ADDR_VAR 0 1
15784: PUSH
15785: LD_INT 22
15787: PUSH
15788: LD_OWVAR 2
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: LD_INT 25
15802: PUSH
15803: LD_INT 5
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 25
15812: PUSH
15813: LD_INT 9
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 8
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PPUSH
15840: CALL_OW 69
15844: PUSH
15845: FOR_IN
15846: IFFALSE 15862
// begin SetClass ( i , 1 ) ;
15848: LD_VAR 0 1
15852: PPUSH
15853: LD_INT 1
15855: PPUSH
15856: CALL_OW 336
// end ;
15860: GO 15845
15862: POP
15863: POP
// end ;
15864: PPOPN 1
15866: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15867: LD_EXP 26
15871: PUSH
15872: LD_EXP 30
15876: AND
15877: PUSH
15878: LD_OWVAR 65
15882: PUSH
15883: LD_INT 7
15885: LESS
15886: AND
15887: IFFALSE 15901
15889: GO 15891
15891: DISABLE
// begin enable ;
15892: ENABLE
// game_speed := 7 ;
15893: LD_ADDR_OWVAR 65
15897: PUSH
15898: LD_INT 7
15900: ST_TO_ADDR
// end ;
15901: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15902: LD_EXP 26
15906: PUSH
15907: LD_EXP 33
15911: AND
15912: IFFALSE 16114
15914: GO 15916
15916: DISABLE
15917: LD_INT 0
15919: PPUSH
15920: PPUSH
15921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15922: LD_ADDR_VAR 0 3
15926: PUSH
15927: LD_INT 81
15929: PUSH
15930: LD_OWVAR 2
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 21
15941: PUSH
15942: LD_INT 1
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PPUSH
15953: CALL_OW 69
15957: ST_TO_ADDR
// if not tmp then
15958: LD_VAR 0 3
15962: NOT
15963: IFFALSE 15967
// exit ;
15965: GO 16114
// if tmp > 5 then
15967: LD_VAR 0 3
15971: PUSH
15972: LD_INT 5
15974: GREATER
15975: IFFALSE 15987
// k := 5 else
15977: LD_ADDR_VAR 0 2
15981: PUSH
15982: LD_INT 5
15984: ST_TO_ADDR
15985: GO 15997
// k := tmp ;
15987: LD_ADDR_VAR 0 2
15991: PUSH
15992: LD_VAR 0 3
15996: ST_TO_ADDR
// for i := 1 to k do
15997: LD_ADDR_VAR 0 1
16001: PUSH
16002: DOUBLE
16003: LD_INT 1
16005: DEC
16006: ST_TO_ADDR
16007: LD_VAR 0 2
16011: PUSH
16012: FOR_TO
16013: IFFALSE 16112
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16015: LD_VAR 0 3
16019: PUSH
16020: LD_VAR 0 1
16024: ARRAY
16025: PPUSH
16026: LD_VAR 0 1
16030: PUSH
16031: LD_INT 4
16033: MOD
16034: PUSH
16035: LD_INT 1
16037: PLUS
16038: PPUSH
16039: CALL_OW 259
16043: PUSH
16044: LD_INT 10
16046: LESS
16047: IFFALSE 16110
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16049: LD_VAR 0 3
16053: PUSH
16054: LD_VAR 0 1
16058: ARRAY
16059: PPUSH
16060: LD_VAR 0 1
16064: PUSH
16065: LD_INT 4
16067: MOD
16068: PUSH
16069: LD_INT 1
16071: PLUS
16072: PPUSH
16073: LD_VAR 0 3
16077: PUSH
16078: LD_VAR 0 1
16082: ARRAY
16083: PPUSH
16084: LD_VAR 0 1
16088: PUSH
16089: LD_INT 4
16091: MOD
16092: PUSH
16093: LD_INT 1
16095: PLUS
16096: PPUSH
16097: CALL_OW 259
16101: PUSH
16102: LD_INT 1
16104: PLUS
16105: PPUSH
16106: CALL_OW 237
16110: GO 16012
16112: POP
16113: POP
// end ;
16114: PPOPN 3
16116: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16117: LD_EXP 26
16121: PUSH
16122: LD_EXP 34
16126: AND
16127: IFFALSE 16147
16129: GO 16131
16131: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16132: LD_INT 4
16134: PPUSH
16135: LD_OWVAR 2
16139: PPUSH
16140: LD_INT 0
16142: PPUSH
16143: CALL_OW 324
16147: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16148: LD_EXP 26
16152: PUSH
16153: LD_EXP 63
16157: AND
16158: IFFALSE 16178
16160: GO 16162
16162: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16163: LD_INT 19
16165: PPUSH
16166: LD_OWVAR 2
16170: PPUSH
16171: LD_INT 0
16173: PPUSH
16174: CALL_OW 324
16178: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16179: LD_EXP 26
16183: PUSH
16184: LD_EXP 35
16188: AND
16189: IFFALSE 16291
16191: GO 16193
16193: DISABLE
16194: LD_INT 0
16196: PPUSH
16197: PPUSH
// begin enable ;
16198: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_OWVAR 2
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 2
16218: PUSH
16219: LD_INT 34
16221: PUSH
16222: LD_INT 11
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 34
16231: PUSH
16232: LD_INT 30
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: LIST
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: ST_TO_ADDR
// if not tmp then
16253: LD_VAR 0 2
16257: NOT
16258: IFFALSE 16262
// exit ;
16260: GO 16291
// for i in tmp do
16262: LD_ADDR_VAR 0 1
16266: PUSH
16267: LD_VAR 0 2
16271: PUSH
16272: FOR_IN
16273: IFFALSE 16289
// begin SetLives ( i , 0 ) ;
16275: LD_VAR 0 1
16279: PPUSH
16280: LD_INT 0
16282: PPUSH
16283: CALL_OW 234
// end ;
16287: GO 16272
16289: POP
16290: POP
// end ;
16291: PPOPN 2
16293: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16294: LD_EXP 26
16298: PUSH
16299: LD_EXP 36
16303: AND
16304: IFFALSE 16324
16306: GO 16308
16308: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16309: LD_INT 32
16311: PPUSH
16312: LD_OWVAR 2
16316: PPUSH
16317: LD_INT 0
16319: PPUSH
16320: CALL_OW 324
16324: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16325: LD_EXP 26
16329: PUSH
16330: LD_EXP 37
16334: AND
16335: IFFALSE 16516
16337: GO 16339
16339: DISABLE
16340: LD_INT 0
16342: PPUSH
16343: PPUSH
16344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16345: LD_ADDR_VAR 0 2
16349: PUSH
16350: LD_INT 22
16352: PUSH
16353: LD_OWVAR 2
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 33
16364: PUSH
16365: LD_INT 3
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 69
16380: ST_TO_ADDR
// if not tmp then
16381: LD_VAR 0 2
16385: NOT
16386: IFFALSE 16390
// exit ;
16388: GO 16516
// side := 0 ;
16390: LD_ADDR_VAR 0 3
16394: PUSH
16395: LD_INT 0
16397: ST_TO_ADDR
// for i := 1 to 8 do
16398: LD_ADDR_VAR 0 1
16402: PUSH
16403: DOUBLE
16404: LD_INT 1
16406: DEC
16407: ST_TO_ADDR
16408: LD_INT 8
16410: PUSH
16411: FOR_TO
16412: IFFALSE 16460
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16414: LD_OWVAR 2
16418: PUSH
16419: LD_VAR 0 1
16423: NONEQUAL
16424: PUSH
16425: LD_OWVAR 2
16429: PPUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 81
16439: PUSH
16440: LD_INT 2
16442: EQUAL
16443: AND
16444: IFFALSE 16458
// begin side := i ;
16446: LD_ADDR_VAR 0 3
16450: PUSH
16451: LD_VAR 0 1
16455: ST_TO_ADDR
// break ;
16456: GO 16460
// end ;
16458: GO 16411
16460: POP
16461: POP
// if not side then
16462: LD_VAR 0 3
16466: NOT
16467: IFFALSE 16471
// exit ;
16469: GO 16516
// for i := 1 to tmp do
16471: LD_ADDR_VAR 0 1
16475: PUSH
16476: DOUBLE
16477: LD_INT 1
16479: DEC
16480: ST_TO_ADDR
16481: LD_VAR 0 2
16485: PUSH
16486: FOR_TO
16487: IFFALSE 16514
// if Prob ( 60 ) then
16489: LD_INT 60
16491: PPUSH
16492: CALL_OW 13
16496: IFFALSE 16512
// SetSide ( i , side ) ;
16498: LD_VAR 0 1
16502: PPUSH
16503: LD_VAR 0 3
16507: PPUSH
16508: CALL_OW 235
16512: GO 16486
16514: POP
16515: POP
// end ;
16516: PPOPN 3
16518: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16519: LD_EXP 26
16523: PUSH
16524: LD_EXP 39
16528: AND
16529: IFFALSE 16648
16531: GO 16533
16533: DISABLE
16534: LD_INT 0
16536: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16537: LD_ADDR_VAR 0 1
16541: PUSH
16542: LD_INT 22
16544: PUSH
16545: LD_OWVAR 2
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 21
16556: PUSH
16557: LD_INT 1
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 3
16566: PUSH
16567: LD_INT 23
16569: PUSH
16570: LD_INT 0
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: LIST
16585: PPUSH
16586: CALL_OW 69
16590: PUSH
16591: FOR_IN
16592: IFFALSE 16646
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16594: LD_VAR 0 1
16598: PPUSH
16599: CALL_OW 257
16603: PUSH
16604: LD_INT 1
16606: PUSH
16607: LD_INT 2
16609: PUSH
16610: LD_INT 3
16612: PUSH
16613: LD_INT 4
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: IN
16622: IFFALSE 16644
// SetClass ( un , rand ( 1 , 4 ) ) ;
16624: LD_VAR 0 1
16628: PPUSH
16629: LD_INT 1
16631: PPUSH
16632: LD_INT 4
16634: PPUSH
16635: CALL_OW 12
16639: PPUSH
16640: CALL_OW 336
16644: GO 16591
16646: POP
16647: POP
// end ;
16648: PPOPN 1
16650: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16651: LD_EXP 26
16655: PUSH
16656: LD_EXP 38
16660: AND
16661: IFFALSE 16740
16663: GO 16665
16665: DISABLE
16666: LD_INT 0
16668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16669: LD_ADDR_VAR 0 1
16673: PUSH
16674: LD_INT 22
16676: PUSH
16677: LD_OWVAR 2
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 21
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PPUSH
16700: CALL_OW 69
16704: ST_TO_ADDR
// if not tmp then
16705: LD_VAR 0 1
16709: NOT
16710: IFFALSE 16714
// exit ;
16712: GO 16740
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16714: LD_VAR 0 1
16718: PUSH
16719: LD_INT 1
16721: PPUSH
16722: LD_VAR 0 1
16726: PPUSH
16727: CALL_OW 12
16731: ARRAY
16732: PPUSH
16733: LD_INT 100
16735: PPUSH
16736: CALL_OW 234
// end ;
16740: PPOPN 1
16742: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16743: LD_EXP 26
16747: PUSH
16748: LD_EXP 40
16752: AND
16753: IFFALSE 16851
16755: GO 16757
16757: DISABLE
16758: LD_INT 0
16760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16761: LD_ADDR_VAR 0 1
16765: PUSH
16766: LD_INT 22
16768: PUSH
16769: LD_OWVAR 2
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 21
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PPUSH
16792: CALL_OW 69
16796: ST_TO_ADDR
// if not tmp then
16797: LD_VAR 0 1
16801: NOT
16802: IFFALSE 16806
// exit ;
16804: GO 16851
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16806: LD_VAR 0 1
16810: PUSH
16811: LD_INT 1
16813: PPUSH
16814: LD_VAR 0 1
16818: PPUSH
16819: CALL_OW 12
16823: ARRAY
16824: PPUSH
16825: LD_INT 1
16827: PPUSH
16828: LD_INT 4
16830: PPUSH
16831: CALL_OW 12
16835: PPUSH
16836: LD_INT 3000
16838: PPUSH
16839: LD_INT 9000
16841: PPUSH
16842: CALL_OW 12
16846: PPUSH
16847: CALL_OW 492
// end ;
16851: PPOPN 1
16853: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16854: LD_EXP 26
16858: PUSH
16859: LD_EXP 41
16863: AND
16864: IFFALSE 16884
16866: GO 16868
16868: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16869: LD_INT 1
16871: PPUSH
16872: LD_OWVAR 2
16876: PPUSH
16877: LD_INT 0
16879: PPUSH
16880: CALL_OW 324
16884: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16885: LD_EXP 26
16889: PUSH
16890: LD_EXP 42
16894: AND
16895: IFFALSE 16978
16897: GO 16899
16899: DISABLE
16900: LD_INT 0
16902: PPUSH
16903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16904: LD_ADDR_VAR 0 2
16908: PUSH
16909: LD_INT 22
16911: PUSH
16912: LD_OWVAR 2
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 21
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PPUSH
16935: CALL_OW 69
16939: ST_TO_ADDR
// if not tmp then
16940: LD_VAR 0 2
16944: NOT
16945: IFFALSE 16949
// exit ;
16947: GO 16978
// for i in tmp do
16949: LD_ADDR_VAR 0 1
16953: PUSH
16954: LD_VAR 0 2
16958: PUSH
16959: FOR_IN
16960: IFFALSE 16976
// SetBLevel ( i , 10 ) ;
16962: LD_VAR 0 1
16966: PPUSH
16967: LD_INT 10
16969: PPUSH
16970: CALL_OW 241
16974: GO 16959
16976: POP
16977: POP
// end ;
16978: PPOPN 2
16980: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16981: LD_EXP 26
16985: PUSH
16986: LD_EXP 43
16990: AND
16991: IFFALSE 17102
16993: GO 16995
16995: DISABLE
16996: LD_INT 0
16998: PPUSH
16999: PPUSH
17000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17001: LD_ADDR_VAR 0 3
17005: PUSH
17006: LD_INT 22
17008: PUSH
17009: LD_OWVAR 2
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 25
17020: PUSH
17021: LD_INT 1
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: ST_TO_ADDR
// if not tmp then
17037: LD_VAR 0 3
17041: NOT
17042: IFFALSE 17046
// exit ;
17044: GO 17102
// un := tmp [ rand ( 1 , tmp ) ] ;
17046: LD_ADDR_VAR 0 2
17050: PUSH
17051: LD_VAR 0 3
17055: PUSH
17056: LD_INT 1
17058: PPUSH
17059: LD_VAR 0 3
17063: PPUSH
17064: CALL_OW 12
17068: ARRAY
17069: ST_TO_ADDR
// if Crawls ( un ) then
17070: LD_VAR 0 2
17074: PPUSH
17075: CALL_OW 318
17079: IFFALSE 17090
// ComWalk ( un ) ;
17081: LD_VAR 0 2
17085: PPUSH
17086: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17090: LD_VAR 0 2
17094: PPUSH
17095: LD_INT 5
17097: PPUSH
17098: CALL_OW 336
// end ;
17102: PPOPN 3
17104: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17105: LD_EXP 26
17109: PUSH
17110: LD_EXP 44
17114: AND
17115: PUSH
17116: LD_OWVAR 67
17120: PUSH
17121: LD_INT 4
17123: LESS
17124: AND
17125: IFFALSE 17144
17127: GO 17129
17129: DISABLE
// begin Difficulty := Difficulty + 1 ;
17130: LD_ADDR_OWVAR 67
17134: PUSH
17135: LD_OWVAR 67
17139: PUSH
17140: LD_INT 1
17142: PLUS
17143: ST_TO_ADDR
// end ;
17144: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17145: LD_EXP 26
17149: PUSH
17150: LD_EXP 45
17154: AND
17155: IFFALSE 17258
17157: GO 17159
17159: DISABLE
17160: LD_INT 0
17162: PPUSH
// begin for i := 1 to 5 do
17163: LD_ADDR_VAR 0 1
17167: PUSH
17168: DOUBLE
17169: LD_INT 1
17171: DEC
17172: ST_TO_ADDR
17173: LD_INT 5
17175: PUSH
17176: FOR_TO
17177: IFFALSE 17256
// begin uc_nation := nation_nature ;
17179: LD_ADDR_OWVAR 21
17183: PUSH
17184: LD_INT 0
17186: ST_TO_ADDR
// uc_side := 0 ;
17187: LD_ADDR_OWVAR 20
17191: PUSH
17192: LD_INT 0
17194: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17195: LD_ADDR_OWVAR 29
17199: PUSH
17200: LD_INT 12
17202: PUSH
17203: LD_INT 12
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: ST_TO_ADDR
// hc_agressivity := 20 ;
17210: LD_ADDR_OWVAR 35
17214: PUSH
17215: LD_INT 20
17217: ST_TO_ADDR
// hc_class := class_tiger ;
17218: LD_ADDR_OWVAR 28
17222: PUSH
17223: LD_INT 14
17225: ST_TO_ADDR
// hc_gallery :=  ;
17226: LD_ADDR_OWVAR 33
17230: PUSH
17231: LD_STRING 
17233: ST_TO_ADDR
// hc_name :=  ;
17234: LD_ADDR_OWVAR 26
17238: PUSH
17239: LD_STRING 
17241: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17242: CALL_OW 44
17246: PPUSH
17247: LD_INT 0
17249: PPUSH
17250: CALL_OW 51
// end ;
17254: GO 17176
17256: POP
17257: POP
// end ;
17258: PPOPN 1
17260: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17261: LD_EXP 26
17265: PUSH
17266: LD_EXP 46
17270: AND
17271: IFFALSE 17280
17273: GO 17275
17275: DISABLE
// StreamSibBomb ;
17276: CALL 17281 0 0
17280: END
// export function StreamSibBomb ; var i , x , y ; begin
17281: LD_INT 0
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
// result := false ;
17287: LD_ADDR_VAR 0 1
17291: PUSH
17292: LD_INT 0
17294: ST_TO_ADDR
// for i := 1 to 16 do
17295: LD_ADDR_VAR 0 2
17299: PUSH
17300: DOUBLE
17301: LD_INT 1
17303: DEC
17304: ST_TO_ADDR
17305: LD_INT 16
17307: PUSH
17308: FOR_TO
17309: IFFALSE 17508
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_INT 10
17318: PUSH
17319: LD_INT 20
17321: PUSH
17322: LD_INT 30
17324: PUSH
17325: LD_INT 40
17327: PUSH
17328: LD_INT 50
17330: PUSH
17331: LD_INT 60
17333: PUSH
17334: LD_INT 70
17336: PUSH
17337: LD_INT 80
17339: PUSH
17340: LD_INT 90
17342: PUSH
17343: LD_INT 100
17345: PUSH
17346: LD_INT 110
17348: PUSH
17349: LD_INT 120
17351: PUSH
17352: LD_INT 130
17354: PUSH
17355: LD_INT 140
17357: PUSH
17358: LD_INT 150
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 1
17380: PPUSH
17381: LD_INT 15
17383: PPUSH
17384: CALL_OW 12
17388: ARRAY
17389: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17390: LD_ADDR_VAR 0 4
17394: PUSH
17395: LD_INT 10
17397: PUSH
17398: LD_INT 20
17400: PUSH
17401: LD_INT 30
17403: PUSH
17404: LD_INT 40
17406: PUSH
17407: LD_INT 50
17409: PUSH
17410: LD_INT 60
17412: PUSH
17413: LD_INT 70
17415: PUSH
17416: LD_INT 80
17418: PUSH
17419: LD_INT 90
17421: PUSH
17422: LD_INT 100
17424: PUSH
17425: LD_INT 110
17427: PUSH
17428: LD_INT 120
17430: PUSH
17431: LD_INT 130
17433: PUSH
17434: LD_INT 140
17436: PUSH
17437: LD_INT 150
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 1
17459: PPUSH
17460: LD_INT 15
17462: PPUSH
17463: CALL_OW 12
17467: ARRAY
17468: ST_TO_ADDR
// if ValidHex ( x , y ) then
17469: LD_VAR 0 3
17473: PPUSH
17474: LD_VAR 0 4
17478: PPUSH
17479: CALL_OW 488
17483: IFFALSE 17506
// begin result := [ x , y ] ;
17485: LD_ADDR_VAR 0 1
17489: PUSH
17490: LD_VAR 0 3
17494: PUSH
17495: LD_VAR 0 4
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: ST_TO_ADDR
// break ;
17504: GO 17508
// end ; end ;
17506: GO 17308
17508: POP
17509: POP
// if result then
17510: LD_VAR 0 1
17514: IFFALSE 17574
// begin ToLua ( playSibBomb() ) ;
17516: LD_STRING playSibBomb()
17518: PPUSH
17519: CALL_OW 559
// wait ( 0 0$14 ) ;
17523: LD_INT 490
17525: PPUSH
17526: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17530: LD_VAR 0 1
17534: PUSH
17535: LD_INT 1
17537: ARRAY
17538: PPUSH
17539: LD_VAR 0 1
17543: PUSH
17544: LD_INT 2
17546: ARRAY
17547: PPUSH
17548: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17552: LD_VAR 0 1
17556: PUSH
17557: LD_INT 1
17559: ARRAY
17560: PPUSH
17561: LD_VAR 0 1
17565: PUSH
17566: LD_INT 2
17568: ARRAY
17569: PPUSH
17570: CALL_OW 429
// end ; end ;
17574: LD_VAR 0 1
17578: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17579: LD_EXP 26
17583: PUSH
17584: LD_EXP 48
17588: AND
17589: IFFALSE 17601
17591: GO 17593
17593: DISABLE
// YouLost (  ) ;
17594: LD_STRING 
17596: PPUSH
17597: CALL_OW 104
17601: END
// every 0 0$1 trigger StreamModeActive and sFog do
17602: LD_EXP 26
17606: PUSH
17607: LD_EXP 47
17611: AND
17612: IFFALSE 17626
17614: GO 17616
17616: DISABLE
// FogOff ( your_side ) ;
17617: LD_OWVAR 2
17621: PPUSH
17622: CALL_OW 344
17626: END
// every 0 0$1 trigger StreamModeActive and sSun do
17627: LD_EXP 26
17631: PUSH
17632: LD_EXP 49
17636: AND
17637: IFFALSE 17665
17639: GO 17641
17641: DISABLE
// begin solar_recharge_percent := 0 ;
17642: LD_ADDR_OWVAR 79
17646: PUSH
17647: LD_INT 0
17649: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17650: LD_INT 10500
17652: PPUSH
17653: CALL_OW 67
// solar_recharge_percent := 100 ;
17657: LD_ADDR_OWVAR 79
17661: PUSH
17662: LD_INT 100
17664: ST_TO_ADDR
// end ;
17665: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17666: LD_EXP 26
17670: PUSH
17671: LD_EXP 50
17675: AND
17676: IFFALSE 17915
17678: GO 17680
17680: DISABLE
17681: LD_INT 0
17683: PPUSH
17684: PPUSH
17685: PPUSH
// begin tmp := [ ] ;
17686: LD_ADDR_VAR 0 3
17690: PUSH
17691: EMPTY
17692: ST_TO_ADDR
// for i := 1 to 6 do
17693: LD_ADDR_VAR 0 1
17697: PUSH
17698: DOUBLE
17699: LD_INT 1
17701: DEC
17702: ST_TO_ADDR
17703: LD_INT 6
17705: PUSH
17706: FOR_TO
17707: IFFALSE 17812
// begin uc_nation := nation_nature ;
17709: LD_ADDR_OWVAR 21
17713: PUSH
17714: LD_INT 0
17716: ST_TO_ADDR
// uc_side := 0 ;
17717: LD_ADDR_OWVAR 20
17721: PUSH
17722: LD_INT 0
17724: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17725: LD_ADDR_OWVAR 29
17729: PUSH
17730: LD_INT 12
17732: PUSH
17733: LD_INT 12
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: ST_TO_ADDR
// hc_agressivity := 20 ;
17740: LD_ADDR_OWVAR 35
17744: PUSH
17745: LD_INT 20
17747: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17748: LD_ADDR_OWVAR 28
17752: PUSH
17753: LD_INT 17
17755: ST_TO_ADDR
// hc_gallery :=  ;
17756: LD_ADDR_OWVAR 33
17760: PUSH
17761: LD_STRING 
17763: ST_TO_ADDR
// hc_name :=  ;
17764: LD_ADDR_OWVAR 26
17768: PUSH
17769: LD_STRING 
17771: ST_TO_ADDR
// un := CreateHuman ;
17772: LD_ADDR_VAR 0 2
17776: PUSH
17777: CALL_OW 44
17781: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17782: LD_VAR 0 2
17786: PPUSH
17787: LD_INT 1
17789: PPUSH
17790: CALL_OW 51
// tmp := tmp ^ un ;
17794: LD_ADDR_VAR 0 3
17798: PUSH
17799: LD_VAR 0 3
17803: PUSH
17804: LD_VAR 0 2
17808: ADD
17809: ST_TO_ADDR
// end ;
17810: GO 17706
17812: POP
17813: POP
// repeat wait ( 0 0$1 ) ;
17814: LD_INT 35
17816: PPUSH
17817: CALL_OW 67
// for un in tmp do
17821: LD_ADDR_VAR 0 2
17825: PUSH
17826: LD_VAR 0 3
17830: PUSH
17831: FOR_IN
17832: IFFALSE 17906
// begin if IsDead ( un ) then
17834: LD_VAR 0 2
17838: PPUSH
17839: CALL_OW 301
17843: IFFALSE 17863
// begin tmp := tmp diff un ;
17845: LD_ADDR_VAR 0 3
17849: PUSH
17850: LD_VAR 0 3
17854: PUSH
17855: LD_VAR 0 2
17859: DIFF
17860: ST_TO_ADDR
// continue ;
17861: GO 17831
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17863: LD_VAR 0 2
17867: PPUSH
17868: LD_INT 3
17870: PUSH
17871: LD_INT 22
17873: PUSH
17874: LD_INT 0
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PPUSH
17885: CALL_OW 69
17889: PPUSH
17890: LD_VAR 0 2
17894: PPUSH
17895: CALL_OW 74
17899: PPUSH
17900: CALL_OW 115
// end ;
17904: GO 17831
17906: POP
17907: POP
// until not tmp ;
17908: LD_VAR 0 3
17912: NOT
17913: IFFALSE 17814
// end ;
17915: PPOPN 3
17917: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17918: LD_EXP 26
17922: PUSH
17923: LD_EXP 51
17927: AND
17928: IFFALSE 17982
17930: GO 17932
17932: DISABLE
// begin ToLua ( displayTroll(); ) ;
17933: LD_STRING displayTroll();
17935: PPUSH
17936: CALL_OW 559
// wait ( 3 3$00 ) ;
17940: LD_INT 6300
17942: PPUSH
17943: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17947: LD_STRING hideTroll();
17949: PPUSH
17950: CALL_OW 559
// wait ( 1 1$00 ) ;
17954: LD_INT 2100
17956: PPUSH
17957: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17961: LD_STRING displayTroll();
17963: PPUSH
17964: CALL_OW 559
// wait ( 1 1$00 ) ;
17968: LD_INT 2100
17970: PPUSH
17971: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17975: LD_STRING hideTroll();
17977: PPUSH
17978: CALL_OW 559
// end ;
17982: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17983: LD_EXP 26
17987: PUSH
17988: LD_EXP 52
17992: AND
17993: IFFALSE 18056
17995: GO 17997
17997: DISABLE
17998: LD_INT 0
18000: PPUSH
// begin p := 0 ;
18001: LD_ADDR_VAR 0 1
18005: PUSH
18006: LD_INT 0
18008: ST_TO_ADDR
// repeat game_speed := 1 ;
18009: LD_ADDR_OWVAR 65
18013: PUSH
18014: LD_INT 1
18016: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18017: LD_INT 35
18019: PPUSH
18020: CALL_OW 67
// p := p + 1 ;
18024: LD_ADDR_VAR 0 1
18028: PUSH
18029: LD_VAR 0 1
18033: PUSH
18034: LD_INT 1
18036: PLUS
18037: ST_TO_ADDR
// until p >= 60 ;
18038: LD_VAR 0 1
18042: PUSH
18043: LD_INT 60
18045: GREATEREQUAL
18046: IFFALSE 18009
// game_speed := 4 ;
18048: LD_ADDR_OWVAR 65
18052: PUSH
18053: LD_INT 4
18055: ST_TO_ADDR
// end ;
18056: PPOPN 1
18058: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18059: LD_EXP 26
18063: PUSH
18064: LD_EXP 53
18068: AND
18069: IFFALSE 18215
18071: GO 18073
18073: DISABLE
18074: LD_INT 0
18076: PPUSH
18077: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18078: LD_ADDR_VAR 0 1
18082: PUSH
18083: LD_INT 22
18085: PUSH
18086: LD_OWVAR 2
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 2
18097: PUSH
18098: LD_INT 30
18100: PUSH
18101: LD_INT 0
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 30
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: LIST
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PPUSH
18127: CALL_OW 69
18131: ST_TO_ADDR
// if not depot then
18132: LD_VAR 0 1
18136: NOT
18137: IFFALSE 18141
// exit ;
18139: GO 18215
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18141: LD_ADDR_VAR 0 2
18145: PUSH
18146: LD_VAR 0 1
18150: PUSH
18151: LD_INT 1
18153: PPUSH
18154: LD_VAR 0 1
18158: PPUSH
18159: CALL_OW 12
18163: ARRAY
18164: PPUSH
18165: CALL_OW 274
18169: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18170: LD_VAR 0 2
18174: PPUSH
18175: LD_INT 1
18177: PPUSH
18178: LD_INT 0
18180: PPUSH
18181: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18185: LD_VAR 0 2
18189: PPUSH
18190: LD_INT 2
18192: PPUSH
18193: LD_INT 0
18195: PPUSH
18196: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18200: LD_VAR 0 2
18204: PPUSH
18205: LD_INT 3
18207: PPUSH
18208: LD_INT 0
18210: PPUSH
18211: CALL_OW 277
// end ;
18215: PPOPN 2
18217: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18218: LD_EXP 26
18222: PUSH
18223: LD_EXP 54
18227: AND
18228: IFFALSE 18325
18230: GO 18232
18232: DISABLE
18233: LD_INT 0
18235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18236: LD_ADDR_VAR 0 1
18240: PUSH
18241: LD_INT 22
18243: PUSH
18244: LD_OWVAR 2
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 21
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 3
18265: PUSH
18266: LD_INT 23
18268: PUSH
18269: LD_INT 0
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: PPUSH
18285: CALL_OW 69
18289: ST_TO_ADDR
// if not tmp then
18290: LD_VAR 0 1
18294: NOT
18295: IFFALSE 18299
// exit ;
18297: GO 18325
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18299: LD_VAR 0 1
18303: PUSH
18304: LD_INT 1
18306: PPUSH
18307: LD_VAR 0 1
18311: PPUSH
18312: CALL_OW 12
18316: ARRAY
18317: PPUSH
18318: LD_INT 200
18320: PPUSH
18321: CALL_OW 234
// end ;
18325: PPOPN 1
18327: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18328: LD_EXP 26
18332: PUSH
18333: LD_EXP 55
18337: AND
18338: IFFALSE 18417
18340: GO 18342
18342: DISABLE
18343: LD_INT 0
18345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18346: LD_ADDR_VAR 0 1
18350: PUSH
18351: LD_INT 22
18353: PUSH
18354: LD_OWVAR 2
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 21
18365: PUSH
18366: LD_INT 2
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PPUSH
18377: CALL_OW 69
18381: ST_TO_ADDR
// if not tmp then
18382: LD_VAR 0 1
18386: NOT
18387: IFFALSE 18391
// exit ;
18389: GO 18417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18391: LD_VAR 0 1
18395: PUSH
18396: LD_INT 1
18398: PPUSH
18399: LD_VAR 0 1
18403: PPUSH
18404: CALL_OW 12
18408: ARRAY
18409: PPUSH
18410: LD_INT 60
18412: PPUSH
18413: CALL_OW 234
// end ;
18417: PPOPN 1
18419: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18420: LD_EXP 26
18424: PUSH
18425: LD_EXP 56
18429: AND
18430: IFFALSE 18529
18432: GO 18434
18434: DISABLE
18435: LD_INT 0
18437: PPUSH
18438: PPUSH
// begin enable ;
18439: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18440: LD_ADDR_VAR 0 1
18444: PUSH
18445: LD_INT 22
18447: PUSH
18448: LD_OWVAR 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 61
18459: PUSH
18460: EMPTY
18461: LIST
18462: PUSH
18463: LD_INT 33
18465: PUSH
18466: LD_INT 2
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: LIST
18477: PPUSH
18478: CALL_OW 69
18482: ST_TO_ADDR
// if not tmp then
18483: LD_VAR 0 1
18487: NOT
18488: IFFALSE 18492
// exit ;
18490: GO 18529
// for i in tmp do
18492: LD_ADDR_VAR 0 2
18496: PUSH
18497: LD_VAR 0 1
18501: PUSH
18502: FOR_IN
18503: IFFALSE 18527
// if IsControledBy ( i ) then
18505: LD_VAR 0 2
18509: PPUSH
18510: CALL_OW 312
18514: IFFALSE 18525
// ComUnlink ( i ) ;
18516: LD_VAR 0 2
18520: PPUSH
18521: CALL_OW 136
18525: GO 18502
18527: POP
18528: POP
// end ;
18529: PPOPN 2
18531: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18532: LD_EXP 26
18536: PUSH
18537: LD_EXP 57
18541: AND
18542: IFFALSE 18682
18544: GO 18546
18546: DISABLE
18547: LD_INT 0
18549: PPUSH
18550: PPUSH
// begin ToLua ( displayPowell(); ) ;
18551: LD_STRING displayPowell();
18553: PPUSH
18554: CALL_OW 559
// uc_side := 0 ;
18558: LD_ADDR_OWVAR 20
18562: PUSH
18563: LD_INT 0
18565: ST_TO_ADDR
// uc_nation := 2 ;
18566: LD_ADDR_OWVAR 21
18570: PUSH
18571: LD_INT 2
18573: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18574: LD_ADDR_OWVAR 37
18578: PUSH
18579: LD_INT 14
18581: ST_TO_ADDR
// vc_engine := engine_siberite ;
18582: LD_ADDR_OWVAR 39
18586: PUSH
18587: LD_INT 3
18589: ST_TO_ADDR
// vc_control := control_apeman ;
18590: LD_ADDR_OWVAR 38
18594: PUSH
18595: LD_INT 5
18597: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18598: LD_ADDR_OWVAR 40
18602: PUSH
18603: LD_INT 29
18605: ST_TO_ADDR
// un := CreateVehicle ;
18606: LD_ADDR_VAR 0 2
18610: PUSH
18611: CALL_OW 45
18615: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18616: LD_VAR 0 2
18620: PPUSH
18621: LD_INT 1
18623: PPUSH
18624: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18628: LD_INT 35
18630: PPUSH
18631: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18635: LD_VAR 0 2
18639: PPUSH
18640: LD_INT 22
18642: PUSH
18643: LD_OWVAR 2
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PPUSH
18652: CALL_OW 69
18656: PPUSH
18657: LD_VAR 0 2
18661: PPUSH
18662: CALL_OW 74
18666: PPUSH
18667: CALL_OW 115
// until IsDead ( un ) ;
18671: LD_VAR 0 2
18675: PPUSH
18676: CALL_OW 301
18680: IFFALSE 18628
// end ;
18682: PPOPN 2
18684: END
// every 0 0$1 trigger StreamModeActive and sStu do
18685: LD_EXP 26
18689: PUSH
18690: LD_EXP 65
18694: AND
18695: IFFALSE 18711
18697: GO 18699
18699: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18700: LD_STRING displayStucuk();
18702: PPUSH
18703: CALL_OW 559
// ResetFog ;
18707: CALL_OW 335
// end ;
18711: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18712: LD_EXP 26
18716: PUSH
18717: LD_EXP 58
18721: AND
18722: IFFALSE 18863
18724: GO 18726
18726: DISABLE
18727: LD_INT 0
18729: PPUSH
18730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18731: LD_ADDR_VAR 0 2
18735: PUSH
18736: LD_INT 22
18738: PUSH
18739: LD_OWVAR 2
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 21
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PPUSH
18762: CALL_OW 69
18766: ST_TO_ADDR
// if not tmp then
18767: LD_VAR 0 2
18771: NOT
18772: IFFALSE 18776
// exit ;
18774: GO 18863
// un := tmp [ rand ( 1 , tmp ) ] ;
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: LD_VAR 0 2
18785: PUSH
18786: LD_INT 1
18788: PPUSH
18789: LD_VAR 0 2
18793: PPUSH
18794: CALL_OW 12
18798: ARRAY
18799: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18800: LD_VAR 0 1
18804: PPUSH
18805: LD_INT 0
18807: PPUSH
18808: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_OWVAR 3
18821: PUSH
18822: LD_VAR 0 1
18826: DIFF
18827: PPUSH
18828: LD_VAR 0 1
18832: PPUSH
18833: CALL_OW 74
18837: PPUSH
18838: CALL_OW 115
// wait ( 0 0$20 ) ;
18842: LD_INT 700
18844: PPUSH
18845: CALL_OW 67
// SetSide ( un , your_side ) ;
18849: LD_VAR 0 1
18853: PPUSH
18854: LD_OWVAR 2
18858: PPUSH
18859: CALL_OW 235
// end ;
18863: PPOPN 2
18865: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18866: LD_EXP 26
18870: PUSH
18871: LD_EXP 59
18875: AND
18876: IFFALSE 18982
18878: GO 18880
18880: DISABLE
18881: LD_INT 0
18883: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18884: LD_ADDR_VAR 0 1
18888: PUSH
18889: LD_INT 22
18891: PUSH
18892: LD_OWVAR 2
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 30
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 30
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PPUSH
18933: CALL_OW 69
18937: ST_TO_ADDR
// if not depot then
18938: LD_VAR 0 1
18942: NOT
18943: IFFALSE 18947
// exit ;
18945: GO 18982
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18947: LD_VAR 0 1
18951: PUSH
18952: LD_INT 1
18954: ARRAY
18955: PPUSH
18956: CALL_OW 250
18960: PPUSH
18961: LD_VAR 0 1
18965: PUSH
18966: LD_INT 1
18968: ARRAY
18969: PPUSH
18970: CALL_OW 251
18974: PPUSH
18975: LD_INT 70
18977: PPUSH
18978: CALL_OW 495
// end ;
18982: PPOPN 1
18984: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18985: LD_EXP 26
18989: PUSH
18990: LD_EXP 60
18994: AND
18995: IFFALSE 19206
18997: GO 18999
18999: DISABLE
19000: LD_INT 0
19002: PPUSH
19003: PPUSH
19004: PPUSH
19005: PPUSH
19006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19007: LD_ADDR_VAR 0 5
19011: PUSH
19012: LD_INT 22
19014: PUSH
19015: LD_OWVAR 2
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 21
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: ST_TO_ADDR
// if not tmp then
19043: LD_VAR 0 5
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19206
// for i in tmp do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_VAR 0 5
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19204
// begin d := rand ( 0 , 5 ) ;
19065: LD_ADDR_VAR 0 4
19069: PUSH
19070: LD_INT 0
19072: PPUSH
19073: LD_INT 5
19075: PPUSH
19076: CALL_OW 12
19080: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19081: LD_ADDR_VAR 0 2
19085: PUSH
19086: LD_VAR 0 1
19090: PPUSH
19091: CALL_OW 250
19095: PPUSH
19096: LD_VAR 0 4
19100: PPUSH
19101: LD_INT 3
19103: PPUSH
19104: LD_INT 12
19106: PPUSH
19107: CALL_OW 12
19111: PPUSH
19112: CALL_OW 272
19116: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19117: LD_ADDR_VAR 0 3
19121: PUSH
19122: LD_VAR 0 1
19126: PPUSH
19127: CALL_OW 251
19131: PPUSH
19132: LD_VAR 0 4
19136: PPUSH
19137: LD_INT 3
19139: PPUSH
19140: LD_INT 12
19142: PPUSH
19143: CALL_OW 12
19147: PPUSH
19148: CALL_OW 273
19152: ST_TO_ADDR
// if ValidHex ( x , y ) then
19153: LD_VAR 0 2
19157: PPUSH
19158: LD_VAR 0 3
19162: PPUSH
19163: CALL_OW 488
19167: IFFALSE 19202
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19169: LD_VAR 0 1
19173: PPUSH
19174: LD_VAR 0 2
19178: PPUSH
19179: LD_VAR 0 3
19183: PPUSH
19184: LD_INT 3
19186: PPUSH
19187: LD_INT 6
19189: PPUSH
19190: CALL_OW 12
19194: PPUSH
19195: LD_INT 1
19197: PPUSH
19198: CALL_OW 483
// end ;
19202: GO 19062
19204: POP
19205: POP
// end ;
19206: PPOPN 5
19208: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19209: LD_EXP 26
19213: PUSH
19214: LD_EXP 61
19218: AND
19219: IFFALSE 19313
19221: GO 19223
19223: DISABLE
19224: LD_INT 0
19226: PPUSH
19227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19228: LD_ADDR_VAR 0 2
19232: PUSH
19233: LD_INT 22
19235: PUSH
19236: LD_OWVAR 2
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 32
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 21
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: PPUSH
19270: CALL_OW 69
19274: ST_TO_ADDR
// if not tmp then
19275: LD_VAR 0 2
19279: NOT
19280: IFFALSE 19284
// exit ;
19282: GO 19313
// for i in tmp do
19284: LD_ADDR_VAR 0 1
19288: PUSH
19289: LD_VAR 0 2
19293: PUSH
19294: FOR_IN
19295: IFFALSE 19311
// SetFuel ( i , 0 ) ;
19297: LD_VAR 0 1
19301: PPUSH
19302: LD_INT 0
19304: PPUSH
19305: CALL_OW 240
19309: GO 19294
19311: POP
19312: POP
// end ;
19313: PPOPN 2
19315: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19316: LD_EXP 26
19320: PUSH
19321: LD_EXP 62
19325: AND
19326: IFFALSE 19392
19328: GO 19330
19330: DISABLE
19331: LD_INT 0
19333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19334: LD_ADDR_VAR 0 1
19338: PUSH
19339: LD_INT 22
19341: PUSH
19342: LD_OWVAR 2
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 30
19353: PUSH
19354: LD_INT 29
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PPUSH
19365: CALL_OW 69
19369: ST_TO_ADDR
// if not tmp then
19370: LD_VAR 0 1
19374: NOT
19375: IFFALSE 19379
// exit ;
19377: GO 19392
// DestroyUnit ( tmp [ 1 ] ) ;
19379: LD_VAR 0 1
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: PPUSH
19388: CALL_OW 65
// end ;
19392: PPOPN 1
19394: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19395: LD_EXP 26
19399: PUSH
19400: LD_EXP 64
19404: AND
19405: IFFALSE 19534
19407: GO 19409
19409: DISABLE
19410: LD_INT 0
19412: PPUSH
// begin uc_side := 0 ;
19413: LD_ADDR_OWVAR 20
19417: PUSH
19418: LD_INT 0
19420: ST_TO_ADDR
// uc_nation := nation_arabian ;
19421: LD_ADDR_OWVAR 21
19425: PUSH
19426: LD_INT 2
19428: ST_TO_ADDR
// hc_gallery :=  ;
19429: LD_ADDR_OWVAR 33
19433: PUSH
19434: LD_STRING 
19436: ST_TO_ADDR
// hc_name :=  ;
19437: LD_ADDR_OWVAR 26
19441: PUSH
19442: LD_STRING 
19444: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19445: LD_INT 1
19447: PPUSH
19448: LD_INT 11
19450: PPUSH
19451: LD_INT 10
19453: PPUSH
19454: CALL_OW 380
// un := CreateHuman ;
19458: LD_ADDR_VAR 0 1
19462: PUSH
19463: CALL_OW 44
19467: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_INT 1
19475: PPUSH
19476: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19480: LD_INT 35
19482: PPUSH
19483: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19487: LD_VAR 0 1
19491: PPUSH
19492: LD_INT 22
19494: PUSH
19495: LD_OWVAR 2
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 69
19508: PPUSH
19509: LD_VAR 0 1
19513: PPUSH
19514: CALL_OW 74
19518: PPUSH
19519: CALL_OW 115
// until IsDead ( un ) ;
19523: LD_VAR 0 1
19527: PPUSH
19528: CALL_OW 301
19532: IFFALSE 19480
// end ;
19534: PPOPN 1
19536: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19537: LD_EXP 26
19541: PUSH
19542: LD_EXP 66
19546: AND
19547: IFFALSE 19559
19549: GO 19551
19551: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19552: LD_STRING earthquake(getX(game), 0, 32)
19554: PPUSH
19555: CALL_OW 559
19559: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19560: LD_EXP 26
19564: PUSH
19565: LD_EXP 67
19569: AND
19570: IFFALSE 19661
19572: GO 19574
19574: DISABLE
19575: LD_INT 0
19577: PPUSH
// begin enable ;
19578: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19579: LD_ADDR_VAR 0 1
19583: PUSH
19584: LD_INT 22
19586: PUSH
19587: LD_OWVAR 2
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 21
19598: PUSH
19599: LD_INT 2
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 33
19608: PUSH
19609: LD_INT 3
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: LIST
19620: PPUSH
19621: CALL_OW 69
19625: ST_TO_ADDR
// if not tmp then
19626: LD_VAR 0 1
19630: NOT
19631: IFFALSE 19635
// exit ;
19633: GO 19661
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19635: LD_VAR 0 1
19639: PUSH
19640: LD_INT 1
19642: PPUSH
19643: LD_VAR 0 1
19647: PPUSH
19648: CALL_OW 12
19652: ARRAY
19653: PPUSH
19654: LD_INT 1
19656: PPUSH
19657: CALL_OW 234
// end ;
19661: PPOPN 1
19663: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19664: LD_EXP 26
19668: PUSH
19669: LD_EXP 68
19673: AND
19674: IFFALSE 19815
19676: GO 19678
19678: DISABLE
19679: LD_INT 0
19681: PPUSH
19682: PPUSH
19683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19684: LD_ADDR_VAR 0 3
19688: PUSH
19689: LD_INT 22
19691: PUSH
19692: LD_OWVAR 2
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 25
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PPUSH
19715: CALL_OW 69
19719: ST_TO_ADDR
// if not tmp then
19720: LD_VAR 0 3
19724: NOT
19725: IFFALSE 19729
// exit ;
19727: GO 19815
// un := tmp [ rand ( 1 , tmp ) ] ;
19729: LD_ADDR_VAR 0 2
19733: PUSH
19734: LD_VAR 0 3
19738: PUSH
19739: LD_INT 1
19741: PPUSH
19742: LD_VAR 0 3
19746: PPUSH
19747: CALL_OW 12
19751: ARRAY
19752: ST_TO_ADDR
// if Crawls ( un ) then
19753: LD_VAR 0 2
19757: PPUSH
19758: CALL_OW 318
19762: IFFALSE 19773
// ComWalk ( un ) ;
19764: LD_VAR 0 2
19768: PPUSH
19769: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19773: LD_VAR 0 2
19777: PPUSH
19778: LD_INT 9
19780: PPUSH
19781: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19785: LD_INT 28
19787: PPUSH
19788: LD_OWVAR 2
19792: PPUSH
19793: LD_INT 2
19795: PPUSH
19796: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19800: LD_INT 29
19802: PPUSH
19803: LD_OWVAR 2
19807: PPUSH
19808: LD_INT 2
19810: PPUSH
19811: CALL_OW 322
// end ;
19815: PPOPN 3
19817: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19818: LD_EXP 26
19822: PUSH
19823: LD_EXP 69
19827: AND
19828: IFFALSE 19939
19830: GO 19832
19832: DISABLE
19833: LD_INT 0
19835: PPUSH
19836: PPUSH
19837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19838: LD_ADDR_VAR 0 3
19842: PUSH
19843: LD_INT 22
19845: PUSH
19846: LD_OWVAR 2
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 25
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PPUSH
19869: CALL_OW 69
19873: ST_TO_ADDR
// if not tmp then
19874: LD_VAR 0 3
19878: NOT
19879: IFFALSE 19883
// exit ;
19881: GO 19939
// un := tmp [ rand ( 1 , tmp ) ] ;
19883: LD_ADDR_VAR 0 2
19887: PUSH
19888: LD_VAR 0 3
19892: PUSH
19893: LD_INT 1
19895: PPUSH
19896: LD_VAR 0 3
19900: PPUSH
19901: CALL_OW 12
19905: ARRAY
19906: ST_TO_ADDR
// if Crawls ( un ) then
19907: LD_VAR 0 2
19911: PPUSH
19912: CALL_OW 318
19916: IFFALSE 19927
// ComWalk ( un ) ;
19918: LD_VAR 0 2
19922: PPUSH
19923: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19927: LD_VAR 0 2
19931: PPUSH
19932: LD_INT 8
19934: PPUSH
19935: CALL_OW 336
// end ;
19939: PPOPN 3
19941: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19942: LD_EXP 26
19946: PUSH
19947: LD_EXP 70
19951: AND
19952: IFFALSE 20096
19954: GO 19956
19956: DISABLE
19957: LD_INT 0
19959: PPUSH
19960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19961: LD_ADDR_VAR 0 2
19965: PUSH
19966: LD_INT 22
19968: PUSH
19969: LD_OWVAR 2
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 21
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: LD_INT 34
19993: PUSH
19994: LD_INT 12
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 34
20003: PUSH
20004: LD_INT 51
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 34
20013: PUSH
20014: LD_INT 32
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 69
20036: ST_TO_ADDR
// if not tmp then
20037: LD_VAR 0 2
20041: NOT
20042: IFFALSE 20046
// exit ;
20044: GO 20096
// for i in tmp do
20046: LD_ADDR_VAR 0 1
20050: PUSH
20051: LD_VAR 0 2
20055: PUSH
20056: FOR_IN
20057: IFFALSE 20094
// if GetCargo ( i , mat_artifact ) = 0 then
20059: LD_VAR 0 1
20063: PPUSH
20064: LD_INT 4
20066: PPUSH
20067: CALL_OW 289
20071: PUSH
20072: LD_INT 0
20074: EQUAL
20075: IFFALSE 20092
// SetCargo ( i , mat_siberit , 100 ) ;
20077: LD_VAR 0 1
20081: PPUSH
20082: LD_INT 3
20084: PPUSH
20085: LD_INT 100
20087: PPUSH
20088: CALL_OW 290
20092: GO 20056
20094: POP
20095: POP
// end ;
20096: PPOPN 2
20098: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20099: LD_EXP 26
20103: PUSH
20104: LD_EXP 71
20108: AND
20109: IFFALSE 20292
20111: GO 20113
20113: DISABLE
20114: LD_INT 0
20116: PPUSH
20117: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20118: LD_ADDR_VAR 0 2
20122: PUSH
20123: LD_INT 22
20125: PUSH
20126: LD_OWVAR 2
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PPUSH
20135: CALL_OW 69
20139: ST_TO_ADDR
// if not tmp then
20140: LD_VAR 0 2
20144: NOT
20145: IFFALSE 20149
// exit ;
20147: GO 20292
// for i := 1 to 2 do
20149: LD_ADDR_VAR 0 1
20153: PUSH
20154: DOUBLE
20155: LD_INT 1
20157: DEC
20158: ST_TO_ADDR
20159: LD_INT 2
20161: PUSH
20162: FOR_TO
20163: IFFALSE 20290
// begin uc_side := your_side ;
20165: LD_ADDR_OWVAR 20
20169: PUSH
20170: LD_OWVAR 2
20174: ST_TO_ADDR
// uc_nation := nation_american ;
20175: LD_ADDR_OWVAR 21
20179: PUSH
20180: LD_INT 1
20182: ST_TO_ADDR
// vc_chassis := us_morphling ;
20183: LD_ADDR_OWVAR 37
20187: PUSH
20188: LD_INT 5
20190: ST_TO_ADDR
// vc_engine := engine_siberite ;
20191: LD_ADDR_OWVAR 39
20195: PUSH
20196: LD_INT 3
20198: ST_TO_ADDR
// vc_control := control_computer ;
20199: LD_ADDR_OWVAR 38
20203: PUSH
20204: LD_INT 3
20206: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20207: LD_ADDR_OWVAR 40
20211: PUSH
20212: LD_INT 10
20214: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20215: LD_VAR 0 2
20219: PUSH
20220: LD_INT 1
20222: ARRAY
20223: PPUSH
20224: CALL_OW 310
20228: NOT
20229: IFFALSE 20276
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20231: CALL_OW 45
20235: PPUSH
20236: LD_VAR 0 2
20240: PUSH
20241: LD_INT 1
20243: ARRAY
20244: PPUSH
20245: CALL_OW 250
20249: PPUSH
20250: LD_VAR 0 2
20254: PUSH
20255: LD_INT 1
20257: ARRAY
20258: PPUSH
20259: CALL_OW 251
20263: PPUSH
20264: LD_INT 12
20266: PPUSH
20267: LD_INT 1
20269: PPUSH
20270: CALL_OW 50
20274: GO 20288
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20276: CALL_OW 45
20280: PPUSH
20281: LD_INT 1
20283: PPUSH
20284: CALL_OW 51
// end ;
20288: GO 20162
20290: POP
20291: POP
// end ;
20292: PPOPN 2
20294: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20295: LD_EXP 26
20299: PUSH
20300: LD_EXP 72
20304: AND
20305: IFFALSE 20527
20307: GO 20309
20309: DISABLE
20310: LD_INT 0
20312: PPUSH
20313: PPUSH
20314: PPUSH
20315: PPUSH
20316: PPUSH
20317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20318: LD_ADDR_VAR 0 6
20322: PUSH
20323: LD_INT 22
20325: PUSH
20326: LD_OWVAR 2
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 21
20337: PUSH
20338: LD_INT 1
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 3
20347: PUSH
20348: LD_INT 23
20350: PUSH
20351: LD_INT 0
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: PPUSH
20367: CALL_OW 69
20371: ST_TO_ADDR
// if not tmp then
20372: LD_VAR 0 6
20376: NOT
20377: IFFALSE 20381
// exit ;
20379: GO 20527
// s1 := rand ( 1 , 4 ) ;
20381: LD_ADDR_VAR 0 2
20385: PUSH
20386: LD_INT 1
20388: PPUSH
20389: LD_INT 4
20391: PPUSH
20392: CALL_OW 12
20396: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20397: LD_ADDR_VAR 0 4
20401: PUSH
20402: LD_VAR 0 6
20406: PUSH
20407: LD_INT 1
20409: ARRAY
20410: PPUSH
20411: LD_VAR 0 2
20415: PPUSH
20416: CALL_OW 259
20420: ST_TO_ADDR
// if s1 = 1 then
20421: LD_VAR 0 2
20425: PUSH
20426: LD_INT 1
20428: EQUAL
20429: IFFALSE 20449
// s2 := rand ( 2 , 4 ) else
20431: LD_ADDR_VAR 0 3
20435: PUSH
20436: LD_INT 2
20438: PPUSH
20439: LD_INT 4
20441: PPUSH
20442: CALL_OW 12
20446: ST_TO_ADDR
20447: GO 20457
// s2 := 1 ;
20449: LD_ADDR_VAR 0 3
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20457: LD_ADDR_VAR 0 5
20461: PUSH
20462: LD_VAR 0 6
20466: PUSH
20467: LD_INT 1
20469: ARRAY
20470: PPUSH
20471: LD_VAR 0 3
20475: PPUSH
20476: CALL_OW 259
20480: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20481: LD_VAR 0 6
20485: PUSH
20486: LD_INT 1
20488: ARRAY
20489: PPUSH
20490: LD_VAR 0 2
20494: PPUSH
20495: LD_VAR 0 5
20499: PPUSH
20500: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20504: LD_VAR 0 6
20508: PUSH
20509: LD_INT 1
20511: ARRAY
20512: PPUSH
20513: LD_VAR 0 3
20517: PPUSH
20518: LD_VAR 0 4
20522: PPUSH
20523: CALL_OW 237
// end ;
20527: PPOPN 6
20529: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20530: LD_EXP 26
20534: PUSH
20535: LD_EXP 73
20539: AND
20540: IFFALSE 20619
20542: GO 20544
20544: DISABLE
20545: LD_INT 0
20547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20548: LD_ADDR_VAR 0 1
20552: PUSH
20553: LD_INT 22
20555: PUSH
20556: LD_OWVAR 2
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 30
20567: PUSH
20568: LD_INT 3
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 69
20583: ST_TO_ADDR
// if not tmp then
20584: LD_VAR 0 1
20588: NOT
20589: IFFALSE 20593
// exit ;
20591: GO 20619
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20593: LD_VAR 0 1
20597: PUSH
20598: LD_INT 1
20600: PPUSH
20601: LD_VAR 0 1
20605: PPUSH
20606: CALL_OW 12
20610: ARRAY
20611: PPUSH
20612: LD_INT 1
20614: PPUSH
20615: CALL_OW 234
// end ;
20619: PPOPN 1
20621: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20622: LD_EXP 26
20626: PUSH
20627: LD_EXP 74
20631: AND
20632: IFFALSE 20744
20634: GO 20636
20636: DISABLE
20637: LD_INT 0
20639: PPUSH
20640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20641: LD_ADDR_VAR 0 2
20645: PUSH
20646: LD_INT 22
20648: PUSH
20649: LD_OWVAR 2
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 30
20663: PUSH
20664: LD_INT 27
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 30
20673: PUSH
20674: LD_INT 26
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 30
20683: PUSH
20684: LD_INT 28
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PPUSH
20701: CALL_OW 69
20705: ST_TO_ADDR
// if not tmp then
20706: LD_VAR 0 2
20710: NOT
20711: IFFALSE 20715
// exit ;
20713: GO 20744
// for i in tmp do
20715: LD_ADDR_VAR 0 1
20719: PUSH
20720: LD_VAR 0 2
20724: PUSH
20725: FOR_IN
20726: IFFALSE 20742
// SetLives ( i , 1 ) ;
20728: LD_VAR 0 1
20732: PPUSH
20733: LD_INT 1
20735: PPUSH
20736: CALL_OW 234
20740: GO 20725
20742: POP
20743: POP
// end ;
20744: PPOPN 2
20746: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20747: LD_EXP 26
20751: PUSH
20752: LD_EXP 75
20756: AND
20757: IFFALSE 21044
20759: GO 20761
20761: DISABLE
20762: LD_INT 0
20764: PPUSH
20765: PPUSH
20766: PPUSH
// begin i := rand ( 1 , 7 ) ;
20767: LD_ADDR_VAR 0 1
20771: PUSH
20772: LD_INT 1
20774: PPUSH
20775: LD_INT 7
20777: PPUSH
20778: CALL_OW 12
20782: ST_TO_ADDR
// case i of 1 :
20783: LD_VAR 0 1
20787: PUSH
20788: LD_INT 1
20790: DOUBLE
20791: EQUAL
20792: IFTRUE 20796
20794: GO 20806
20796: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20797: LD_STRING earthquake(getX(game), 0, 32)
20799: PPUSH
20800: CALL_OW 559
20804: GO 21044
20806: LD_INT 2
20808: DOUBLE
20809: EQUAL
20810: IFTRUE 20814
20812: GO 20828
20814: POP
// begin ToLua ( displayStucuk(); ) ;
20815: LD_STRING displayStucuk();
20817: PPUSH
20818: CALL_OW 559
// ResetFog ;
20822: CALL_OW 335
// end ; 3 :
20826: GO 21044
20828: LD_INT 3
20830: DOUBLE
20831: EQUAL
20832: IFTRUE 20836
20834: GO 20940
20836: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20837: LD_ADDR_VAR 0 2
20841: PUSH
20842: LD_INT 22
20844: PUSH
20845: LD_OWVAR 2
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 25
20856: PUSH
20857: LD_INT 1
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PPUSH
20868: CALL_OW 69
20872: ST_TO_ADDR
// if not tmp then
20873: LD_VAR 0 2
20877: NOT
20878: IFFALSE 20882
// exit ;
20880: GO 21044
// un := tmp [ rand ( 1 , tmp ) ] ;
20882: LD_ADDR_VAR 0 3
20886: PUSH
20887: LD_VAR 0 2
20891: PUSH
20892: LD_INT 1
20894: PPUSH
20895: LD_VAR 0 2
20899: PPUSH
20900: CALL_OW 12
20904: ARRAY
20905: ST_TO_ADDR
// if Crawls ( un ) then
20906: LD_VAR 0 3
20910: PPUSH
20911: CALL_OW 318
20915: IFFALSE 20926
// ComWalk ( un ) ;
20917: LD_VAR 0 3
20921: PPUSH
20922: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20926: LD_VAR 0 3
20930: PPUSH
20931: LD_INT 8
20933: PPUSH
20934: CALL_OW 336
// end ; 4 :
20938: GO 21044
20940: LD_INT 4
20942: DOUBLE
20943: EQUAL
20944: IFTRUE 20948
20946: GO 21022
20948: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20949: LD_ADDR_VAR 0 2
20953: PUSH
20954: LD_INT 22
20956: PUSH
20957: LD_OWVAR 2
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 30
20968: PUSH
20969: LD_INT 29
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PPUSH
20980: CALL_OW 69
20984: ST_TO_ADDR
// if not tmp then
20985: LD_VAR 0 2
20989: NOT
20990: IFFALSE 20994
// exit ;
20992: GO 21044
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20994: LD_VAR 0 2
20998: PUSH
20999: LD_INT 1
21001: ARRAY
21002: PPUSH
21003: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21007: LD_VAR 0 2
21011: PUSH
21012: LD_INT 1
21014: ARRAY
21015: PPUSH
21016: CALL_OW 65
// end ; 5 .. 7 :
21020: GO 21044
21022: LD_INT 5
21024: DOUBLE
21025: GREATEREQUAL
21026: IFFALSE 21034
21028: LD_INT 7
21030: DOUBLE
21031: LESSEQUAL
21032: IFTRUE 21036
21034: GO 21043
21036: POP
// StreamSibBomb ; end ;
21037: CALL 17281 0 0
21041: GO 21044
21043: POP
// end ;
21044: PPOPN 3
21046: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21047: LD_EXP 26
21051: PUSH
21052: LD_EXP 76
21056: AND
21057: IFFALSE 21213
21059: GO 21061
21061: DISABLE
21062: LD_INT 0
21064: PPUSH
21065: PPUSH
21066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21067: LD_ADDR_VAR 0 2
21071: PUSH
21072: LD_INT 81
21074: PUSH
21075: LD_OWVAR 2
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: LD_INT 21
21089: PUSH
21090: LD_INT 1
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 21
21099: PUSH
21100: LD_INT 2
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PPUSH
21116: CALL_OW 69
21120: ST_TO_ADDR
// if not tmp then
21121: LD_VAR 0 2
21125: NOT
21126: IFFALSE 21130
// exit ;
21128: GO 21213
// p := 0 ;
21130: LD_ADDR_VAR 0 3
21134: PUSH
21135: LD_INT 0
21137: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21138: LD_INT 35
21140: PPUSH
21141: CALL_OW 67
// p := p + 1 ;
21145: LD_ADDR_VAR 0 3
21149: PUSH
21150: LD_VAR 0 3
21154: PUSH
21155: LD_INT 1
21157: PLUS
21158: ST_TO_ADDR
// for i in tmp do
21159: LD_ADDR_VAR 0 1
21163: PUSH
21164: LD_VAR 0 2
21168: PUSH
21169: FOR_IN
21170: IFFALSE 21201
// if GetLives ( i ) < 1000 then
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL_OW 256
21181: PUSH
21182: LD_INT 1000
21184: LESS
21185: IFFALSE 21199
// SetLives ( i , 1000 ) ;
21187: LD_VAR 0 1
21191: PPUSH
21192: LD_INT 1000
21194: PPUSH
21195: CALL_OW 234
21199: GO 21169
21201: POP
21202: POP
// until p > 20 ;
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 20
21210: GREATER
21211: IFFALSE 21138
// end ;
21213: PPOPN 3
21215: END
// every 0 0$1 trigger StreamModeActive and sTime do
21216: LD_EXP 26
21220: PUSH
21221: LD_EXP 77
21225: AND
21226: IFFALSE 21261
21228: GO 21230
21230: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21231: LD_INT 28
21233: PPUSH
21234: LD_OWVAR 2
21238: PPUSH
21239: LD_INT 2
21241: PPUSH
21242: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21246: LD_INT 30
21248: PPUSH
21249: LD_OWVAR 2
21253: PPUSH
21254: LD_INT 2
21256: PPUSH
21257: CALL_OW 322
// end ;
21261: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21262: LD_EXP 26
21266: PUSH
21267: LD_EXP 78
21271: AND
21272: IFFALSE 21393
21274: GO 21276
21276: DISABLE
21277: LD_INT 0
21279: PPUSH
21280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21281: LD_ADDR_VAR 0 2
21285: PUSH
21286: LD_INT 22
21288: PUSH
21289: LD_OWVAR 2
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 21
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 3
21310: PUSH
21311: LD_INT 23
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: LIST
21329: PPUSH
21330: CALL_OW 69
21334: ST_TO_ADDR
// if not tmp then
21335: LD_VAR 0 2
21339: NOT
21340: IFFALSE 21344
// exit ;
21342: GO 21393
// for i in tmp do
21344: LD_ADDR_VAR 0 1
21348: PUSH
21349: LD_VAR 0 2
21353: PUSH
21354: FOR_IN
21355: IFFALSE 21391
// begin if Crawls ( i ) then
21357: LD_VAR 0 1
21361: PPUSH
21362: CALL_OW 318
21366: IFFALSE 21377
// ComWalk ( i ) ;
21368: LD_VAR 0 1
21372: PPUSH
21373: CALL_OW 138
// SetClass ( i , 2 ) ;
21377: LD_VAR 0 1
21381: PPUSH
21382: LD_INT 2
21384: PPUSH
21385: CALL_OW 336
// end ;
21389: GO 21354
21391: POP
21392: POP
// end ;
21393: PPOPN 2
21395: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21396: LD_EXP 26
21400: PUSH
21401: LD_EXP 79
21405: AND
21406: IFFALSE 21694
21408: GO 21410
21410: DISABLE
21411: LD_INT 0
21413: PPUSH
21414: PPUSH
21415: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21416: LD_OWVAR 2
21420: PPUSH
21421: LD_INT 9
21423: PPUSH
21424: LD_INT 1
21426: PPUSH
21427: LD_INT 1
21429: PPUSH
21430: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21434: LD_INT 9
21436: PPUSH
21437: LD_OWVAR 2
21441: PPUSH
21442: CALL_OW 343
// uc_side := 9 ;
21446: LD_ADDR_OWVAR 20
21450: PUSH
21451: LD_INT 9
21453: ST_TO_ADDR
// uc_nation := 2 ;
21454: LD_ADDR_OWVAR 21
21458: PUSH
21459: LD_INT 2
21461: ST_TO_ADDR
// hc_name := Dark Warrior ;
21462: LD_ADDR_OWVAR 26
21466: PUSH
21467: LD_STRING Dark Warrior
21469: ST_TO_ADDR
// hc_gallery :=  ;
21470: LD_ADDR_OWVAR 33
21474: PUSH
21475: LD_STRING 
21477: ST_TO_ADDR
// hc_noskilllimit := true ;
21478: LD_ADDR_OWVAR 76
21482: PUSH
21483: LD_INT 1
21485: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21486: LD_ADDR_OWVAR 31
21490: PUSH
21491: LD_INT 30
21493: PUSH
21494: LD_INT 30
21496: PUSH
21497: LD_INT 30
21499: PUSH
21500: LD_INT 30
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: ST_TO_ADDR
// un := CreateHuman ;
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: CALL_OW 44
21518: ST_TO_ADDR
// hc_noskilllimit := false ;
21519: LD_ADDR_OWVAR 76
21523: PUSH
21524: LD_INT 0
21526: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21527: LD_VAR 0 3
21531: PPUSH
21532: LD_INT 1
21534: PPUSH
21535: CALL_OW 51
// ToLua ( playRanger() ) ;
21539: LD_STRING playRanger()
21541: PPUSH
21542: CALL_OW 559
// p := 0 ;
21546: LD_ADDR_VAR 0 2
21550: PUSH
21551: LD_INT 0
21553: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21554: LD_INT 35
21556: PPUSH
21557: CALL_OW 67
// p := p + 1 ;
21561: LD_ADDR_VAR 0 2
21565: PUSH
21566: LD_VAR 0 2
21570: PUSH
21571: LD_INT 1
21573: PLUS
21574: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21575: LD_VAR 0 3
21579: PPUSH
21580: CALL_OW 256
21584: PUSH
21585: LD_INT 1000
21587: LESS
21588: IFFALSE 21602
// SetLives ( un , 1000 ) ;
21590: LD_VAR 0 3
21594: PPUSH
21595: LD_INT 1000
21597: PPUSH
21598: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21602: LD_VAR 0 3
21606: PPUSH
21607: LD_INT 81
21609: PUSH
21610: LD_OWVAR 2
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 91
21621: PUSH
21622: LD_VAR 0 3
21626: PUSH
21627: LD_INT 30
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PPUSH
21639: CALL_OW 69
21643: PPUSH
21644: LD_VAR 0 3
21648: PPUSH
21649: CALL_OW 74
21653: PPUSH
21654: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21658: LD_VAR 0 2
21662: PUSH
21663: LD_INT 80
21665: GREATER
21666: PUSH
21667: LD_VAR 0 3
21671: PPUSH
21672: CALL_OW 301
21676: OR
21677: IFFALSE 21554
// if un then
21679: LD_VAR 0 3
21683: IFFALSE 21694
// RemoveUnit ( un ) ;
21685: LD_VAR 0 3
21689: PPUSH
21690: CALL_OW 64
// end ;
21694: PPOPN 3
21696: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21697: LD_EXP 80
21701: IFFALSE 21817
21703: GO 21705
21705: DISABLE
21706: LD_INT 0
21708: PPUSH
21709: PPUSH
21710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21711: LD_ADDR_VAR 0 2
21715: PUSH
21716: LD_INT 81
21718: PUSH
21719: LD_OWVAR 2
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 21
21730: PUSH
21731: LD_INT 1
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PPUSH
21742: CALL_OW 69
21746: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21747: LD_STRING playComputer()
21749: PPUSH
21750: CALL_OW 559
// if not tmp then
21754: LD_VAR 0 2
21758: NOT
21759: IFFALSE 21763
// exit ;
21761: GO 21817
// for i in tmp do
21763: LD_ADDR_VAR 0 1
21767: PUSH
21768: LD_VAR 0 2
21772: PUSH
21773: FOR_IN
21774: IFFALSE 21815
// for j := 1 to 4 do
21776: LD_ADDR_VAR 0 3
21780: PUSH
21781: DOUBLE
21782: LD_INT 1
21784: DEC
21785: ST_TO_ADDR
21786: LD_INT 4
21788: PUSH
21789: FOR_TO
21790: IFFALSE 21811
// SetSkill ( i , j , 10 ) ;
21792: LD_VAR 0 1
21796: PPUSH
21797: LD_VAR 0 3
21801: PPUSH
21802: LD_INT 10
21804: PPUSH
21805: CALL_OW 237
21809: GO 21789
21811: POP
21812: POP
21813: GO 21773
21815: POP
21816: POP
// end ;
21817: PPOPN 3
21819: END
// every 0 0$1 trigger s30 do var i , tmp ;
21820: LD_EXP 81
21824: IFFALSE 21893
21826: GO 21828
21828: DISABLE
21829: LD_INT 0
21831: PPUSH
21832: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21833: LD_ADDR_VAR 0 2
21837: PUSH
21838: LD_INT 22
21840: PUSH
21841: LD_OWVAR 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PPUSH
21850: CALL_OW 69
21854: ST_TO_ADDR
// if not tmp then
21855: LD_VAR 0 2
21859: NOT
21860: IFFALSE 21864
// exit ;
21862: GO 21893
// for i in tmp do
21864: LD_ADDR_VAR 0 1
21868: PUSH
21869: LD_VAR 0 2
21873: PUSH
21874: FOR_IN
21875: IFFALSE 21891
// SetLives ( i , 300 ) ;
21877: LD_VAR 0 1
21881: PPUSH
21882: LD_INT 300
21884: PPUSH
21885: CALL_OW 234
21889: GO 21874
21891: POP
21892: POP
// end ;
21893: PPOPN 2
21895: END
// every 0 0$1 trigger s60 do var i , tmp ;
21896: LD_EXP 82
21900: IFFALSE 21969
21902: GO 21904
21904: DISABLE
21905: LD_INT 0
21907: PPUSH
21908: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21909: LD_ADDR_VAR 0 2
21913: PUSH
21914: LD_INT 22
21916: PUSH
21917: LD_OWVAR 2
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PPUSH
21926: CALL_OW 69
21930: ST_TO_ADDR
// if not tmp then
21931: LD_VAR 0 2
21935: NOT
21936: IFFALSE 21940
// exit ;
21938: GO 21969
// for i in tmp do
21940: LD_ADDR_VAR 0 1
21944: PUSH
21945: LD_VAR 0 2
21949: PUSH
21950: FOR_IN
21951: IFFALSE 21967
// SetLives ( i , 600 ) ;
21953: LD_VAR 0 1
21957: PPUSH
21958: LD_INT 600
21960: PPUSH
21961: CALL_OW 234
21965: GO 21950
21967: POP
21968: POP
// end ;
21969: PPOPN 2
21971: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21972: LD_INT 0
21974: PPUSH
// case cmd of 301 :
21975: LD_VAR 0 1
21979: PUSH
21980: LD_INT 301
21982: DOUBLE
21983: EQUAL
21984: IFTRUE 21988
21986: GO 22020
21988: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21989: LD_VAR 0 6
21993: PPUSH
21994: LD_VAR 0 7
21998: PPUSH
21999: LD_VAR 0 8
22003: PPUSH
22004: LD_VAR 0 4
22008: PPUSH
22009: LD_VAR 0 5
22013: PPUSH
22014: CALL 23221 0 5
22018: GO 22141
22020: LD_INT 302
22022: DOUBLE
22023: EQUAL
22024: IFTRUE 22028
22026: GO 22065
22028: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22029: LD_VAR 0 6
22033: PPUSH
22034: LD_VAR 0 7
22038: PPUSH
22039: LD_VAR 0 8
22043: PPUSH
22044: LD_VAR 0 9
22048: PPUSH
22049: LD_VAR 0 4
22053: PPUSH
22054: LD_VAR 0 5
22058: PPUSH
22059: CALL 23312 0 6
22063: GO 22141
22065: LD_INT 303
22067: DOUBLE
22068: EQUAL
22069: IFTRUE 22073
22071: GO 22110
22073: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22074: LD_VAR 0 6
22078: PPUSH
22079: LD_VAR 0 7
22083: PPUSH
22084: LD_VAR 0 8
22088: PPUSH
22089: LD_VAR 0 9
22093: PPUSH
22094: LD_VAR 0 4
22098: PPUSH
22099: LD_VAR 0 5
22103: PPUSH
22104: CALL 22146 0 6
22108: GO 22141
22110: LD_INT 304
22112: DOUBLE
22113: EQUAL
22114: IFTRUE 22118
22116: GO 22140
22118: POP
// hHackTeleport ( unit , x , y ) ; end ;
22119: LD_VAR 0 2
22123: PPUSH
22124: LD_VAR 0 4
22128: PPUSH
22129: LD_VAR 0 5
22133: PPUSH
22134: CALL 23905 0 3
22138: GO 22141
22140: POP
// end ;
22141: LD_VAR 0 12
22145: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22146: LD_INT 0
22148: PPUSH
22149: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22150: LD_VAR 0 1
22154: PUSH
22155: LD_INT 1
22157: LESS
22158: PUSH
22159: LD_VAR 0 1
22163: PUSH
22164: LD_INT 3
22166: GREATER
22167: OR
22168: PUSH
22169: LD_VAR 0 5
22173: PPUSH
22174: LD_VAR 0 6
22178: PPUSH
22179: CALL_OW 428
22183: OR
22184: IFFALSE 22188
// exit ;
22186: GO 22908
// uc_side := your_side ;
22188: LD_ADDR_OWVAR 20
22192: PUSH
22193: LD_OWVAR 2
22197: ST_TO_ADDR
// uc_nation := nation ;
22198: LD_ADDR_OWVAR 21
22202: PUSH
22203: LD_VAR 0 1
22207: ST_TO_ADDR
// bc_level = 1 ;
22208: LD_ADDR_OWVAR 43
22212: PUSH
22213: LD_INT 1
22215: ST_TO_ADDR
// case btype of 1 :
22216: LD_VAR 0 2
22220: PUSH
22221: LD_INT 1
22223: DOUBLE
22224: EQUAL
22225: IFTRUE 22229
22227: GO 22240
22229: POP
// bc_type := b_depot ; 2 :
22230: LD_ADDR_OWVAR 42
22234: PUSH
22235: LD_INT 0
22237: ST_TO_ADDR
22238: GO 22852
22240: LD_INT 2
22242: DOUBLE
22243: EQUAL
22244: IFTRUE 22248
22246: GO 22259
22248: POP
// bc_type := b_warehouse ; 3 :
22249: LD_ADDR_OWVAR 42
22253: PUSH
22254: LD_INT 1
22256: ST_TO_ADDR
22257: GO 22852
22259: LD_INT 3
22261: DOUBLE
22262: EQUAL
22263: IFTRUE 22267
22265: GO 22278
22267: POP
// bc_type := b_lab ; 4 .. 9 :
22268: LD_ADDR_OWVAR 42
22272: PUSH
22273: LD_INT 6
22275: ST_TO_ADDR
22276: GO 22852
22278: LD_INT 4
22280: DOUBLE
22281: GREATEREQUAL
22282: IFFALSE 22290
22284: LD_INT 9
22286: DOUBLE
22287: LESSEQUAL
22288: IFTRUE 22292
22290: GO 22344
22292: POP
// begin bc_type := b_lab_half ;
22293: LD_ADDR_OWVAR 42
22297: PUSH
22298: LD_INT 7
22300: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22301: LD_ADDR_OWVAR 44
22305: PUSH
22306: LD_INT 10
22308: PUSH
22309: LD_INT 11
22311: PUSH
22312: LD_INT 12
22314: PUSH
22315: LD_INT 15
22317: PUSH
22318: LD_INT 14
22320: PUSH
22321: LD_INT 13
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: PUSH
22332: LD_VAR 0 2
22336: PUSH
22337: LD_INT 3
22339: MINUS
22340: ARRAY
22341: ST_TO_ADDR
// end ; 10 .. 13 :
22342: GO 22852
22344: LD_INT 10
22346: DOUBLE
22347: GREATEREQUAL
22348: IFFALSE 22356
22350: LD_INT 13
22352: DOUBLE
22353: LESSEQUAL
22354: IFTRUE 22358
22356: GO 22435
22358: POP
// begin bc_type := b_lab_full ;
22359: LD_ADDR_OWVAR 42
22363: PUSH
22364: LD_INT 8
22366: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22367: LD_ADDR_OWVAR 44
22371: PUSH
22372: LD_INT 10
22374: PUSH
22375: LD_INT 12
22377: PUSH
22378: LD_INT 14
22380: PUSH
22381: LD_INT 13
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: PUSH
22390: LD_VAR 0 2
22394: PUSH
22395: LD_INT 9
22397: MINUS
22398: ARRAY
22399: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22400: LD_ADDR_OWVAR 45
22404: PUSH
22405: LD_INT 11
22407: PUSH
22408: LD_INT 15
22410: PUSH
22411: LD_INT 12
22413: PUSH
22414: LD_INT 15
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: PUSH
22423: LD_VAR 0 2
22427: PUSH
22428: LD_INT 9
22430: MINUS
22431: ARRAY
22432: ST_TO_ADDR
// end ; 14 :
22433: GO 22852
22435: LD_INT 14
22437: DOUBLE
22438: EQUAL
22439: IFTRUE 22443
22441: GO 22454
22443: POP
// bc_type := b_workshop ; 15 :
22444: LD_ADDR_OWVAR 42
22448: PUSH
22449: LD_INT 2
22451: ST_TO_ADDR
22452: GO 22852
22454: LD_INT 15
22456: DOUBLE
22457: EQUAL
22458: IFTRUE 22462
22460: GO 22473
22462: POP
// bc_type := b_factory ; 16 :
22463: LD_ADDR_OWVAR 42
22467: PUSH
22468: LD_INT 3
22470: ST_TO_ADDR
22471: GO 22852
22473: LD_INT 16
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22492
22481: POP
// bc_type := b_ext_gun ; 17 :
22482: LD_ADDR_OWVAR 42
22486: PUSH
22487: LD_INT 17
22489: ST_TO_ADDR
22490: GO 22852
22492: LD_INT 17
22494: DOUBLE
22495: EQUAL
22496: IFTRUE 22500
22498: GO 22528
22500: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22501: LD_ADDR_OWVAR 42
22505: PUSH
22506: LD_INT 19
22508: PUSH
22509: LD_INT 23
22511: PUSH
22512: LD_INT 19
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: LIST
22519: PUSH
22520: LD_VAR 0 1
22524: ARRAY
22525: ST_TO_ADDR
22526: GO 22852
22528: LD_INT 18
22530: DOUBLE
22531: EQUAL
22532: IFTRUE 22536
22534: GO 22547
22536: POP
// bc_type := b_ext_radar ; 19 :
22537: LD_ADDR_OWVAR 42
22541: PUSH
22542: LD_INT 20
22544: ST_TO_ADDR
22545: GO 22852
22547: LD_INT 19
22549: DOUBLE
22550: EQUAL
22551: IFTRUE 22555
22553: GO 22566
22555: POP
// bc_type := b_ext_radio ; 20 :
22556: LD_ADDR_OWVAR 42
22560: PUSH
22561: LD_INT 22
22563: ST_TO_ADDR
22564: GO 22852
22566: LD_INT 20
22568: DOUBLE
22569: EQUAL
22570: IFTRUE 22574
22572: GO 22585
22574: POP
// bc_type := b_ext_siberium ; 21 :
22575: LD_ADDR_OWVAR 42
22579: PUSH
22580: LD_INT 21
22582: ST_TO_ADDR
22583: GO 22852
22585: LD_INT 21
22587: DOUBLE
22588: EQUAL
22589: IFTRUE 22593
22591: GO 22604
22593: POP
// bc_type := b_ext_computer ; 22 :
22594: LD_ADDR_OWVAR 42
22598: PUSH
22599: LD_INT 24
22601: ST_TO_ADDR
22602: GO 22852
22604: LD_INT 22
22606: DOUBLE
22607: EQUAL
22608: IFTRUE 22612
22610: GO 22623
22612: POP
// bc_type := b_ext_track ; 23 :
22613: LD_ADDR_OWVAR 42
22617: PUSH
22618: LD_INT 16
22620: ST_TO_ADDR
22621: GO 22852
22623: LD_INT 23
22625: DOUBLE
22626: EQUAL
22627: IFTRUE 22631
22629: GO 22642
22631: POP
// bc_type := b_ext_laser ; 24 :
22632: LD_ADDR_OWVAR 42
22636: PUSH
22637: LD_INT 25
22639: ST_TO_ADDR
22640: GO 22852
22642: LD_INT 24
22644: DOUBLE
22645: EQUAL
22646: IFTRUE 22650
22648: GO 22661
22650: POP
// bc_type := b_control_tower ; 25 :
22651: LD_ADDR_OWVAR 42
22655: PUSH
22656: LD_INT 36
22658: ST_TO_ADDR
22659: GO 22852
22661: LD_INT 25
22663: DOUBLE
22664: EQUAL
22665: IFTRUE 22669
22667: GO 22680
22669: POP
// bc_type := b_breastwork ; 26 :
22670: LD_ADDR_OWVAR 42
22674: PUSH
22675: LD_INT 31
22677: ST_TO_ADDR
22678: GO 22852
22680: LD_INT 26
22682: DOUBLE
22683: EQUAL
22684: IFTRUE 22688
22686: GO 22699
22688: POP
// bc_type := b_bunker ; 27 :
22689: LD_ADDR_OWVAR 42
22693: PUSH
22694: LD_INT 32
22696: ST_TO_ADDR
22697: GO 22852
22699: LD_INT 27
22701: DOUBLE
22702: EQUAL
22703: IFTRUE 22707
22705: GO 22718
22707: POP
// bc_type := b_turret ; 28 :
22708: LD_ADDR_OWVAR 42
22712: PUSH
22713: LD_INT 33
22715: ST_TO_ADDR
22716: GO 22852
22718: LD_INT 28
22720: DOUBLE
22721: EQUAL
22722: IFTRUE 22726
22724: GO 22737
22726: POP
// bc_type := b_armoury ; 29 :
22727: LD_ADDR_OWVAR 42
22731: PUSH
22732: LD_INT 4
22734: ST_TO_ADDR
22735: GO 22852
22737: LD_INT 29
22739: DOUBLE
22740: EQUAL
22741: IFTRUE 22745
22743: GO 22756
22745: POP
// bc_type := b_barracks ; 30 :
22746: LD_ADDR_OWVAR 42
22750: PUSH
22751: LD_INT 5
22753: ST_TO_ADDR
22754: GO 22852
22756: LD_INT 30
22758: DOUBLE
22759: EQUAL
22760: IFTRUE 22764
22762: GO 22775
22764: POP
// bc_type := b_solar_power ; 31 :
22765: LD_ADDR_OWVAR 42
22769: PUSH
22770: LD_INT 27
22772: ST_TO_ADDR
22773: GO 22852
22775: LD_INT 31
22777: DOUBLE
22778: EQUAL
22779: IFTRUE 22783
22781: GO 22794
22783: POP
// bc_type := b_oil_power ; 32 :
22784: LD_ADDR_OWVAR 42
22788: PUSH
22789: LD_INT 26
22791: ST_TO_ADDR
22792: GO 22852
22794: LD_INT 32
22796: DOUBLE
22797: EQUAL
22798: IFTRUE 22802
22800: GO 22813
22802: POP
// bc_type := b_siberite_power ; 33 :
22803: LD_ADDR_OWVAR 42
22807: PUSH
22808: LD_INT 28
22810: ST_TO_ADDR
22811: GO 22852
22813: LD_INT 33
22815: DOUBLE
22816: EQUAL
22817: IFTRUE 22821
22819: GO 22832
22821: POP
// bc_type := b_oil_mine ; 34 :
22822: LD_ADDR_OWVAR 42
22826: PUSH
22827: LD_INT 29
22829: ST_TO_ADDR
22830: GO 22852
22832: LD_INT 34
22834: DOUBLE
22835: EQUAL
22836: IFTRUE 22840
22838: GO 22851
22840: POP
// bc_type := b_siberite_mine ; end ;
22841: LD_ADDR_OWVAR 42
22845: PUSH
22846: LD_INT 30
22848: ST_TO_ADDR
22849: GO 22852
22851: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22852: LD_ADDR_VAR 0 8
22856: PUSH
22857: LD_VAR 0 5
22861: PPUSH
22862: LD_VAR 0 6
22866: PPUSH
22867: LD_VAR 0 3
22871: PPUSH
22872: CALL_OW 47
22876: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22877: LD_OWVAR 42
22881: PUSH
22882: LD_INT 32
22884: PUSH
22885: LD_INT 33
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: IN
22892: IFFALSE 22908
// PlaceWeaponTurret ( b , weapon ) ;
22894: LD_VAR 0 8
22898: PPUSH
22899: LD_VAR 0 4
22903: PPUSH
22904: CALL_OW 431
// end ;
22908: LD_VAR 0 7
22912: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22913: LD_INT 0
22915: PPUSH
22916: PPUSH
22917: PPUSH
22918: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22919: LD_ADDR_VAR 0 4
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_OWVAR 2
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 2
22938: PUSH
22939: LD_INT 30
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 30
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PPUSH
22968: CALL_OW 69
22972: ST_TO_ADDR
// if not tmp then
22973: LD_VAR 0 4
22977: NOT
22978: IFFALSE 22982
// exit ;
22980: GO 23041
// for i in tmp do
22982: LD_ADDR_VAR 0 2
22986: PUSH
22987: LD_VAR 0 4
22991: PUSH
22992: FOR_IN
22993: IFFALSE 23039
// for j = 1 to 3 do
22995: LD_ADDR_VAR 0 3
22999: PUSH
23000: DOUBLE
23001: LD_INT 1
23003: DEC
23004: ST_TO_ADDR
23005: LD_INT 3
23007: PUSH
23008: FOR_TO
23009: IFFALSE 23035
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23011: LD_VAR 0 2
23015: PPUSH
23016: CALL_OW 274
23020: PPUSH
23021: LD_VAR 0 3
23025: PPUSH
23026: LD_INT 99999
23028: PPUSH
23029: CALL_OW 277
23033: GO 23008
23035: POP
23036: POP
23037: GO 22992
23039: POP
23040: POP
// end ;
23041: LD_VAR 0 1
23045: RET
// export function hHackSetLevel10 ; var i , j ; begin
23046: LD_INT 0
23048: PPUSH
23049: PPUSH
23050: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23051: LD_ADDR_VAR 0 2
23055: PUSH
23056: LD_INT 21
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PPUSH
23066: CALL_OW 69
23070: PUSH
23071: FOR_IN
23072: IFFALSE 23124
// if IsSelected ( i ) then
23074: LD_VAR 0 2
23078: PPUSH
23079: CALL_OW 306
23083: IFFALSE 23122
// begin for j := 1 to 4 do
23085: LD_ADDR_VAR 0 3
23089: PUSH
23090: DOUBLE
23091: LD_INT 1
23093: DEC
23094: ST_TO_ADDR
23095: LD_INT 4
23097: PUSH
23098: FOR_TO
23099: IFFALSE 23120
// SetSkill ( i , j , 10 ) ;
23101: LD_VAR 0 2
23105: PPUSH
23106: LD_VAR 0 3
23110: PPUSH
23111: LD_INT 10
23113: PPUSH
23114: CALL_OW 237
23118: GO 23098
23120: POP
23121: POP
// end ;
23122: GO 23071
23124: POP
23125: POP
// end ;
23126: LD_VAR 0 1
23130: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23131: LD_INT 0
23133: PPUSH
23134: PPUSH
23135: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23136: LD_ADDR_VAR 0 2
23140: PUSH
23141: LD_INT 22
23143: PUSH
23144: LD_OWVAR 2
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 21
23155: PUSH
23156: LD_INT 1
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PPUSH
23167: CALL_OW 69
23171: PUSH
23172: FOR_IN
23173: IFFALSE 23214
// begin for j := 1 to 4 do
23175: LD_ADDR_VAR 0 3
23179: PUSH
23180: DOUBLE
23181: LD_INT 1
23183: DEC
23184: ST_TO_ADDR
23185: LD_INT 4
23187: PUSH
23188: FOR_TO
23189: IFFALSE 23210
// SetSkill ( i , j , 10 ) ;
23191: LD_VAR 0 2
23195: PPUSH
23196: LD_VAR 0 3
23200: PPUSH
23201: LD_INT 10
23203: PPUSH
23204: CALL_OW 237
23208: GO 23188
23210: POP
23211: POP
// end ;
23212: GO 23172
23214: POP
23215: POP
// end ;
23216: LD_VAR 0 1
23220: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23221: LD_INT 0
23223: PPUSH
// uc_side := your_side ;
23224: LD_ADDR_OWVAR 20
23228: PUSH
23229: LD_OWVAR 2
23233: ST_TO_ADDR
// uc_nation := nation ;
23234: LD_ADDR_OWVAR 21
23238: PUSH
23239: LD_VAR 0 1
23243: ST_TO_ADDR
// InitHc ;
23244: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23248: LD_INT 0
23250: PPUSH
23251: LD_VAR 0 2
23255: PPUSH
23256: LD_VAR 0 3
23260: PPUSH
23261: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23265: LD_VAR 0 4
23269: PPUSH
23270: LD_VAR 0 5
23274: PPUSH
23275: CALL_OW 428
23279: PUSH
23280: LD_INT 0
23282: EQUAL
23283: IFFALSE 23307
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23285: CALL_OW 44
23289: PPUSH
23290: LD_VAR 0 4
23294: PPUSH
23295: LD_VAR 0 5
23299: PPUSH
23300: LD_INT 1
23302: PPUSH
23303: CALL_OW 48
// end ;
23307: LD_VAR 0 6
23311: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23312: LD_INT 0
23314: PPUSH
23315: PPUSH
// uc_side := your_side ;
23316: LD_ADDR_OWVAR 20
23320: PUSH
23321: LD_OWVAR 2
23325: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23326: LD_VAR 0 1
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: LD_INT 2
23336: PUSH
23337: LD_INT 3
23339: PUSH
23340: LD_INT 4
23342: PUSH
23343: LD_INT 5
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: IN
23353: IFFALSE 23365
// uc_nation := nation_american else
23355: LD_ADDR_OWVAR 21
23359: PUSH
23360: LD_INT 1
23362: ST_TO_ADDR
23363: GO 23408
// if chassis in [ 11 , 12 , 13 , 14 ] then
23365: LD_VAR 0 1
23369: PUSH
23370: LD_INT 11
23372: PUSH
23373: LD_INT 12
23375: PUSH
23376: LD_INT 13
23378: PUSH
23379: LD_INT 14
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: IN
23388: IFFALSE 23400
// uc_nation := nation_arabian else
23390: LD_ADDR_OWVAR 21
23394: PUSH
23395: LD_INT 2
23397: ST_TO_ADDR
23398: GO 23408
// uc_nation := nation_russian ;
23400: LD_ADDR_OWVAR 21
23404: PUSH
23405: LD_INT 3
23407: ST_TO_ADDR
// vc_chassis := chassis ;
23408: LD_ADDR_OWVAR 37
23412: PUSH
23413: LD_VAR 0 1
23417: ST_TO_ADDR
// vc_engine := engine ;
23418: LD_ADDR_OWVAR 39
23422: PUSH
23423: LD_VAR 0 2
23427: ST_TO_ADDR
// vc_control := control ;
23428: LD_ADDR_OWVAR 38
23432: PUSH
23433: LD_VAR 0 3
23437: ST_TO_ADDR
// vc_weapon := weapon ;
23438: LD_ADDR_OWVAR 40
23442: PUSH
23443: LD_VAR 0 4
23447: ST_TO_ADDR
// un := CreateVehicle ;
23448: LD_ADDR_VAR 0 8
23452: PUSH
23453: CALL_OW 45
23457: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23458: LD_VAR 0 8
23462: PPUSH
23463: LD_INT 0
23465: PPUSH
23466: LD_INT 5
23468: PPUSH
23469: CALL_OW 12
23473: PPUSH
23474: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23478: LD_VAR 0 8
23482: PPUSH
23483: LD_VAR 0 5
23487: PPUSH
23488: LD_VAR 0 6
23492: PPUSH
23493: LD_INT 1
23495: PPUSH
23496: CALL_OW 48
// end ;
23500: LD_VAR 0 7
23504: RET
// export hInvincible ; every 1 do
23505: GO 23507
23507: DISABLE
// hInvincible := [ ] ;
23508: LD_ADDR_EXP 83
23512: PUSH
23513: EMPTY
23514: ST_TO_ADDR
23515: END
// every 10 do var i ;
23516: GO 23518
23518: DISABLE
23519: LD_INT 0
23521: PPUSH
// begin enable ;
23522: ENABLE
// if not hInvincible then
23523: LD_EXP 83
23527: NOT
23528: IFFALSE 23532
// exit ;
23530: GO 23576
// for i in hInvincible do
23532: LD_ADDR_VAR 0 1
23536: PUSH
23537: LD_EXP 83
23541: PUSH
23542: FOR_IN
23543: IFFALSE 23574
// if GetLives ( i ) < 1000 then
23545: LD_VAR 0 1
23549: PPUSH
23550: CALL_OW 256
23554: PUSH
23555: LD_INT 1000
23557: LESS
23558: IFFALSE 23572
// SetLives ( i , 1000 ) ;
23560: LD_VAR 0 1
23564: PPUSH
23565: LD_INT 1000
23567: PPUSH
23568: CALL_OW 234
23572: GO 23542
23574: POP
23575: POP
// end ;
23576: PPOPN 1
23578: END
// export function hHackInvincible ; var i ; begin
23579: LD_INT 0
23581: PPUSH
23582: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23583: LD_ADDR_VAR 0 2
23587: PUSH
23588: LD_INT 2
23590: PUSH
23591: LD_INT 21
23593: PUSH
23594: LD_INT 1
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 21
23603: PUSH
23604: LD_INT 2
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: PPUSH
23616: CALL_OW 69
23620: PUSH
23621: FOR_IN
23622: IFFALSE 23683
// if IsSelected ( i ) then
23624: LD_VAR 0 2
23628: PPUSH
23629: CALL_OW 306
23633: IFFALSE 23681
// begin if i in hInvincible then
23635: LD_VAR 0 2
23639: PUSH
23640: LD_EXP 83
23644: IN
23645: IFFALSE 23665
// hInvincible := hInvincible diff i else
23647: LD_ADDR_EXP 83
23651: PUSH
23652: LD_EXP 83
23656: PUSH
23657: LD_VAR 0 2
23661: DIFF
23662: ST_TO_ADDR
23663: GO 23681
// hInvincible := hInvincible union i ;
23665: LD_ADDR_EXP 83
23669: PUSH
23670: LD_EXP 83
23674: PUSH
23675: LD_VAR 0 2
23679: UNION
23680: ST_TO_ADDR
// end ;
23681: GO 23621
23683: POP
23684: POP
// end ;
23685: LD_VAR 0 1
23689: RET
// export function hHackInvisible ; var i , j ; begin
23690: LD_INT 0
23692: PPUSH
23693: PPUSH
23694: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23695: LD_ADDR_VAR 0 2
23699: PUSH
23700: LD_INT 21
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PPUSH
23710: CALL_OW 69
23714: PUSH
23715: FOR_IN
23716: IFFALSE 23740
// if IsSelected ( i ) then
23718: LD_VAR 0 2
23722: PPUSH
23723: CALL_OW 306
23727: IFFALSE 23738
// ComForceInvisible ( i ) ;
23729: LD_VAR 0 2
23733: PPUSH
23734: CALL_OW 496
23738: GO 23715
23740: POP
23741: POP
// end ;
23742: LD_VAR 0 1
23746: RET
// export function hHackChangeYourSide ; begin
23747: LD_INT 0
23749: PPUSH
// if your_side = 8 then
23750: LD_OWVAR 2
23754: PUSH
23755: LD_INT 8
23757: EQUAL
23758: IFFALSE 23770
// your_side := 0 else
23760: LD_ADDR_OWVAR 2
23764: PUSH
23765: LD_INT 0
23767: ST_TO_ADDR
23768: GO 23784
// your_side := your_side + 1 ;
23770: LD_ADDR_OWVAR 2
23774: PUSH
23775: LD_OWVAR 2
23779: PUSH
23780: LD_INT 1
23782: PLUS
23783: ST_TO_ADDR
// end ;
23784: LD_VAR 0 1
23788: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23789: LD_INT 0
23791: PPUSH
23792: PPUSH
23793: PPUSH
// for i in all_units do
23794: LD_ADDR_VAR 0 2
23798: PUSH
23799: LD_OWVAR 3
23803: PUSH
23804: FOR_IN
23805: IFFALSE 23883
// if IsSelected ( i ) then
23807: LD_VAR 0 2
23811: PPUSH
23812: CALL_OW 306
23816: IFFALSE 23881
// begin j := GetSide ( i ) ;
23818: LD_ADDR_VAR 0 3
23822: PUSH
23823: LD_VAR 0 2
23827: PPUSH
23828: CALL_OW 255
23832: ST_TO_ADDR
// if j = 8 then
23833: LD_VAR 0 3
23837: PUSH
23838: LD_INT 8
23840: EQUAL
23841: IFFALSE 23853
// j := 0 else
23843: LD_ADDR_VAR 0 3
23847: PUSH
23848: LD_INT 0
23850: ST_TO_ADDR
23851: GO 23867
// j := j + 1 ;
23853: LD_ADDR_VAR 0 3
23857: PUSH
23858: LD_VAR 0 3
23862: PUSH
23863: LD_INT 1
23865: PLUS
23866: ST_TO_ADDR
// SetSide ( i , j ) ;
23867: LD_VAR 0 2
23871: PPUSH
23872: LD_VAR 0 3
23876: PPUSH
23877: CALL_OW 235
// end ;
23881: GO 23804
23883: POP
23884: POP
// end ;
23885: LD_VAR 0 1
23889: RET
// export function hHackFog ; begin
23890: LD_INT 0
23892: PPUSH
// FogOff ( true ) ;
23893: LD_INT 1
23895: PPUSH
23896: CALL_OW 344
// end ;
23900: LD_VAR 0 1
23904: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23905: LD_INT 0
23907: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23908: LD_VAR 0 1
23912: PPUSH
23913: LD_VAR 0 2
23917: PPUSH
23918: LD_VAR 0 3
23922: PPUSH
23923: LD_INT 1
23925: PPUSH
23926: LD_INT 1
23928: PPUSH
23929: CALL_OW 483
// CenterOnXY ( x , y ) ;
23933: LD_VAR 0 2
23937: PPUSH
23938: LD_VAR 0 3
23942: PPUSH
23943: CALL_OW 84
// end ;
23947: LD_VAR 0 4
23951: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23952: LD_INT 0
23954: PPUSH
23955: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23956: LD_VAR 0 1
23960: NOT
23961: PUSH
23962: LD_VAR 0 2
23966: PPUSH
23967: LD_VAR 0 3
23971: PPUSH
23972: CALL_OW 488
23976: NOT
23977: OR
23978: PUSH
23979: LD_VAR 0 1
23983: PPUSH
23984: CALL_OW 266
23988: PUSH
23989: LD_INT 3
23991: NONEQUAL
23992: PUSH
23993: LD_VAR 0 1
23997: PPUSH
23998: CALL_OW 247
24002: PUSH
24003: LD_INT 1
24005: EQUAL
24006: NOT
24007: AND
24008: OR
24009: IFFALSE 24013
// exit ;
24011: GO 24162
// if GetType ( factory ) = unit_human then
24013: LD_VAR 0 1
24017: PPUSH
24018: CALL_OW 247
24022: PUSH
24023: LD_INT 1
24025: EQUAL
24026: IFFALSE 24043
// factory := IsInUnit ( factory ) ;
24028: LD_ADDR_VAR 0 1
24032: PUSH
24033: LD_VAR 0 1
24037: PPUSH
24038: CALL_OW 310
24042: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24043: LD_VAR 0 1
24047: PPUSH
24048: CALL_OW 266
24052: PUSH
24053: LD_INT 3
24055: NONEQUAL
24056: IFFALSE 24060
// exit ;
24058: GO 24162
// if HexInfo ( x , y ) = factory then
24060: LD_VAR 0 2
24064: PPUSH
24065: LD_VAR 0 3
24069: PPUSH
24070: CALL_OW 428
24074: PUSH
24075: LD_VAR 0 1
24079: EQUAL
24080: IFFALSE 24107
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24082: LD_ADDR_EXP 84
24086: PUSH
24087: LD_EXP 84
24091: PPUSH
24092: LD_VAR 0 1
24096: PPUSH
24097: LD_INT 0
24099: PPUSH
24100: CALL_OW 1
24104: ST_TO_ADDR
24105: GO 24158
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24107: LD_ADDR_EXP 84
24111: PUSH
24112: LD_EXP 84
24116: PPUSH
24117: LD_VAR 0 1
24121: PPUSH
24122: LD_VAR 0 1
24126: PPUSH
24127: CALL_OW 255
24131: PUSH
24132: LD_VAR 0 1
24136: PUSH
24137: LD_VAR 0 2
24141: PUSH
24142: LD_VAR 0 3
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: PPUSH
24153: CALL_OW 1
24157: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24158: CALL 24167 0 0
// end ;
24162: LD_VAR 0 4
24166: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24167: LD_INT 0
24169: PPUSH
24170: PPUSH
24171: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24172: LD_STRING resetFactoryWaypoint();
24174: PPUSH
24175: CALL_OW 559
// if factoryWaypoints then
24179: LD_EXP 84
24183: IFFALSE 24309
// begin list := PrepareArray ( factoryWaypoints ) ;
24185: LD_ADDR_VAR 0 3
24189: PUSH
24190: LD_EXP 84
24194: PPUSH
24195: CALL 70778 0 1
24199: ST_TO_ADDR
// for i := 1 to list do
24200: LD_ADDR_VAR 0 2
24204: PUSH
24205: DOUBLE
24206: LD_INT 1
24208: DEC
24209: ST_TO_ADDR
24210: LD_VAR 0 3
24214: PUSH
24215: FOR_TO
24216: IFFALSE 24307
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24218: LD_STRING setFactoryWaypointXY(
24220: PUSH
24221: LD_VAR 0 3
24225: PUSH
24226: LD_VAR 0 2
24230: ARRAY
24231: PUSH
24232: LD_INT 1
24234: ARRAY
24235: STR
24236: PUSH
24237: LD_STRING ,
24239: STR
24240: PUSH
24241: LD_VAR 0 3
24245: PUSH
24246: LD_VAR 0 2
24250: ARRAY
24251: PUSH
24252: LD_INT 2
24254: ARRAY
24255: STR
24256: PUSH
24257: LD_STRING ,
24259: STR
24260: PUSH
24261: LD_VAR 0 3
24265: PUSH
24266: LD_VAR 0 2
24270: ARRAY
24271: PUSH
24272: LD_INT 3
24274: ARRAY
24275: STR
24276: PUSH
24277: LD_STRING ,
24279: STR
24280: PUSH
24281: LD_VAR 0 3
24285: PUSH
24286: LD_VAR 0 2
24290: ARRAY
24291: PUSH
24292: LD_INT 4
24294: ARRAY
24295: STR
24296: PUSH
24297: LD_STRING )
24299: STR
24300: PPUSH
24301: CALL_OW 559
24305: GO 24215
24307: POP
24308: POP
// end ; end ;
24309: LD_VAR 0 1
24313: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24314: LD_INT 0
24316: PPUSH
// if HexInfo ( x , y ) = warehouse then
24317: LD_VAR 0 2
24321: PPUSH
24322: LD_VAR 0 3
24326: PPUSH
24327: CALL_OW 428
24331: PUSH
24332: LD_VAR 0 1
24336: EQUAL
24337: IFFALSE 24364
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24339: LD_ADDR_EXP 85
24343: PUSH
24344: LD_EXP 85
24348: PPUSH
24349: LD_VAR 0 1
24353: PPUSH
24354: LD_INT 0
24356: PPUSH
24357: CALL_OW 1
24361: ST_TO_ADDR
24362: GO 24415
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24364: LD_ADDR_EXP 85
24368: PUSH
24369: LD_EXP 85
24373: PPUSH
24374: LD_VAR 0 1
24378: PPUSH
24379: LD_VAR 0 1
24383: PPUSH
24384: CALL_OW 255
24388: PUSH
24389: LD_VAR 0 1
24393: PUSH
24394: LD_VAR 0 2
24398: PUSH
24399: LD_VAR 0 3
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: PPUSH
24410: CALL_OW 1
24414: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24415: CALL 24424 0 0
// end ;
24419: LD_VAR 0 4
24423: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24424: LD_INT 0
24426: PPUSH
24427: PPUSH
24428: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24429: LD_STRING resetWarehouseGatheringPoints();
24431: PPUSH
24432: CALL_OW 559
// if warehouseGatheringPoints then
24436: LD_EXP 85
24440: IFFALSE 24566
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24442: LD_ADDR_VAR 0 3
24446: PUSH
24447: LD_EXP 85
24451: PPUSH
24452: CALL 70778 0 1
24456: ST_TO_ADDR
// for i := 1 to list do
24457: LD_ADDR_VAR 0 2
24461: PUSH
24462: DOUBLE
24463: LD_INT 1
24465: DEC
24466: ST_TO_ADDR
24467: LD_VAR 0 3
24471: PUSH
24472: FOR_TO
24473: IFFALSE 24564
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24475: LD_STRING setWarehouseGatheringPointXY(
24477: PUSH
24478: LD_VAR 0 3
24482: PUSH
24483: LD_VAR 0 2
24487: ARRAY
24488: PUSH
24489: LD_INT 1
24491: ARRAY
24492: STR
24493: PUSH
24494: LD_STRING ,
24496: STR
24497: PUSH
24498: LD_VAR 0 3
24502: PUSH
24503: LD_VAR 0 2
24507: ARRAY
24508: PUSH
24509: LD_INT 2
24511: ARRAY
24512: STR
24513: PUSH
24514: LD_STRING ,
24516: STR
24517: PUSH
24518: LD_VAR 0 3
24522: PUSH
24523: LD_VAR 0 2
24527: ARRAY
24528: PUSH
24529: LD_INT 3
24531: ARRAY
24532: STR
24533: PUSH
24534: LD_STRING ,
24536: STR
24537: PUSH
24538: LD_VAR 0 3
24542: PUSH
24543: LD_VAR 0 2
24547: ARRAY
24548: PUSH
24549: LD_INT 4
24551: ARRAY
24552: STR
24553: PUSH
24554: LD_STRING )
24556: STR
24557: PPUSH
24558: CALL_OW 559
24562: GO 24472
24564: POP
24565: POP
// end ; end ;
24566: LD_VAR 0 1
24570: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24571: LD_EXP 85
24575: IFFALSE 25260
24577: GO 24579
24579: DISABLE
24580: LD_INT 0
24582: PPUSH
24583: PPUSH
24584: PPUSH
24585: PPUSH
24586: PPUSH
24587: PPUSH
24588: PPUSH
24589: PPUSH
24590: PPUSH
// begin enable ;
24591: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24592: LD_ADDR_VAR 0 3
24596: PUSH
24597: LD_EXP 85
24601: PPUSH
24602: CALL 70778 0 1
24606: ST_TO_ADDR
// if not list then
24607: LD_VAR 0 3
24611: NOT
24612: IFFALSE 24616
// exit ;
24614: GO 25260
// for i := 1 to list do
24616: LD_ADDR_VAR 0 1
24620: PUSH
24621: DOUBLE
24622: LD_INT 1
24624: DEC
24625: ST_TO_ADDR
24626: LD_VAR 0 3
24630: PUSH
24631: FOR_TO
24632: IFFALSE 25258
// begin depot := list [ i ] [ 2 ] ;
24634: LD_ADDR_VAR 0 8
24638: PUSH
24639: LD_VAR 0 3
24643: PUSH
24644: LD_VAR 0 1
24648: ARRAY
24649: PUSH
24650: LD_INT 2
24652: ARRAY
24653: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24654: LD_ADDR_VAR 0 5
24658: PUSH
24659: LD_VAR 0 3
24663: PUSH
24664: LD_VAR 0 1
24668: ARRAY
24669: PUSH
24670: LD_INT 1
24672: ARRAY
24673: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24674: LD_VAR 0 8
24678: PPUSH
24679: CALL_OW 301
24683: PUSH
24684: LD_VAR 0 5
24688: PUSH
24689: LD_VAR 0 8
24693: PPUSH
24694: CALL_OW 255
24698: NONEQUAL
24699: OR
24700: IFFALSE 24729
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24702: LD_ADDR_EXP 85
24706: PUSH
24707: LD_EXP 85
24711: PPUSH
24712: LD_VAR 0 8
24716: PPUSH
24717: LD_INT 0
24719: PPUSH
24720: CALL_OW 1
24724: ST_TO_ADDR
// exit ;
24725: POP
24726: POP
24727: GO 25260
// end ; x := list [ i ] [ 3 ] ;
24729: LD_ADDR_VAR 0 6
24733: PUSH
24734: LD_VAR 0 3
24738: PUSH
24739: LD_VAR 0 1
24743: ARRAY
24744: PUSH
24745: LD_INT 3
24747: ARRAY
24748: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24749: LD_ADDR_VAR 0 7
24753: PUSH
24754: LD_VAR 0 3
24758: PUSH
24759: LD_VAR 0 1
24763: ARRAY
24764: PUSH
24765: LD_INT 4
24767: ARRAY
24768: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24769: LD_ADDR_VAR 0 9
24773: PUSH
24774: LD_VAR 0 6
24778: PPUSH
24779: LD_VAR 0 7
24783: PPUSH
24784: LD_INT 16
24786: PPUSH
24787: CALL 69366 0 3
24791: ST_TO_ADDR
// if not cratesNearbyPoint then
24792: LD_VAR 0 9
24796: NOT
24797: IFFALSE 24803
// exit ;
24799: POP
24800: POP
24801: GO 25260
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24803: LD_ADDR_VAR 0 4
24807: PUSH
24808: LD_INT 22
24810: PUSH
24811: LD_VAR 0 5
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 3
24822: PUSH
24823: LD_INT 60
24825: PUSH
24826: EMPTY
24827: LIST
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 91
24835: PUSH
24836: LD_VAR 0 8
24840: PUSH
24841: LD_INT 6
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 2
24851: PUSH
24852: LD_INT 25
24854: PUSH
24855: LD_INT 2
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 25
24864: PUSH
24865: LD_INT 16
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: LIST
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: PPUSH
24883: CALL_OW 69
24887: PUSH
24888: LD_VAR 0 8
24892: PPUSH
24893: CALL_OW 313
24897: PPUSH
24898: LD_INT 3
24900: PUSH
24901: LD_INT 60
24903: PUSH
24904: EMPTY
24905: LIST
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: LD_INT 25
24916: PUSH
24917: LD_INT 2
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 25
24926: PUSH
24927: LD_INT 16
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: LIST
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PPUSH
24943: CALL_OW 72
24947: UNION
24948: ST_TO_ADDR
// if tmp then
24949: LD_VAR 0 4
24953: IFFALSE 25033
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24955: LD_ADDR_VAR 0 4
24959: PUSH
24960: LD_VAR 0 4
24964: PPUSH
24965: LD_INT 3
24967: PPUSH
24968: CALL 67335 0 2
24972: ST_TO_ADDR
// for j in tmp do
24973: LD_ADDR_VAR 0 2
24977: PUSH
24978: LD_VAR 0 4
24982: PUSH
24983: FOR_IN
24984: IFFALSE 25027
// begin if IsInUnit ( j ) then
24986: LD_VAR 0 2
24990: PPUSH
24991: CALL_OW 310
24995: IFFALSE 25006
// ComExit ( j ) ;
24997: LD_VAR 0 2
25001: PPUSH
25002: CALL 67418 0 1
// AddComCollect ( j , x , y ) ;
25006: LD_VAR 0 2
25010: PPUSH
25011: LD_VAR 0 6
25015: PPUSH
25016: LD_VAR 0 7
25020: PPUSH
25021: CALL_OW 177
// end ;
25025: GO 24983
25027: POP
25028: POP
// exit ;
25029: POP
25030: POP
25031: GO 25260
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25033: LD_ADDR_VAR 0 4
25037: PUSH
25038: LD_INT 22
25040: PUSH
25041: LD_VAR 0 5
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 91
25052: PUSH
25053: LD_VAR 0 8
25057: PUSH
25058: LD_INT 8
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 2
25068: PUSH
25069: LD_INT 34
25071: PUSH
25072: LD_INT 12
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 34
25081: PUSH
25082: LD_INT 51
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 34
25091: PUSH
25092: LD_INT 32
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 34
25101: PUSH
25102: LD_INT 89
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: LIST
25120: PPUSH
25121: CALL_OW 69
25125: ST_TO_ADDR
// if tmp then
25126: LD_VAR 0 4
25130: IFFALSE 25256
// begin for j in tmp do
25132: LD_ADDR_VAR 0 2
25136: PUSH
25137: LD_VAR 0 4
25141: PUSH
25142: FOR_IN
25143: IFFALSE 25254
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25145: LD_VAR 0 2
25149: PPUSH
25150: CALL_OW 262
25154: PUSH
25155: LD_INT 3
25157: EQUAL
25158: PUSH
25159: LD_VAR 0 2
25163: PPUSH
25164: CALL_OW 261
25168: PUSH
25169: LD_INT 20
25171: GREATER
25172: OR
25173: PUSH
25174: LD_VAR 0 2
25178: PPUSH
25179: CALL_OW 314
25183: NOT
25184: AND
25185: PUSH
25186: LD_VAR 0 2
25190: PPUSH
25191: CALL_OW 263
25195: PUSH
25196: LD_INT 1
25198: NONEQUAL
25199: PUSH
25200: LD_VAR 0 2
25204: PPUSH
25205: CALL_OW 311
25209: OR
25210: AND
25211: IFFALSE 25252
// begin ComCollect ( j , x , y ) ;
25213: LD_VAR 0 2
25217: PPUSH
25218: LD_VAR 0 6
25222: PPUSH
25223: LD_VAR 0 7
25227: PPUSH
25228: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25232: LD_VAR 0 2
25236: PPUSH
25237: LD_VAR 0 8
25241: PPUSH
25242: CALL_OW 172
// exit ;
25246: POP
25247: POP
25248: POP
25249: POP
25250: GO 25260
// end ;
25252: GO 25142
25254: POP
25255: POP
// end ; end ;
25256: GO 24631
25258: POP
25259: POP
// end ; end_of_file
25260: PPOPN 9
25262: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25263: LD_INT 0
25265: PPUSH
25266: PPUSH
25267: PPUSH
25268: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25269: LD_VAR 0 1
25273: PPUSH
25274: CALL_OW 264
25278: PUSH
25279: LD_INT 91
25281: EQUAL
25282: IFFALSE 25354
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25284: LD_INT 68
25286: PPUSH
25287: LD_VAR 0 1
25291: PPUSH
25292: CALL_OW 255
25296: PPUSH
25297: CALL_OW 321
25301: PUSH
25302: LD_INT 2
25304: EQUAL
25305: IFFALSE 25317
// eff := 70 else
25307: LD_ADDR_VAR 0 4
25311: PUSH
25312: LD_INT 70
25314: ST_TO_ADDR
25315: GO 25325
// eff := 30 ;
25317: LD_ADDR_VAR 0 4
25321: PUSH
25322: LD_INT 30
25324: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25325: LD_VAR 0 1
25329: PPUSH
25330: CALL_OW 250
25334: PPUSH
25335: LD_VAR 0 1
25339: PPUSH
25340: CALL_OW 251
25344: PPUSH
25345: LD_VAR 0 4
25349: PPUSH
25350: CALL_OW 495
// end ; end ;
25354: LD_VAR 0 2
25358: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25359: LD_INT 0
25361: PPUSH
// end ;
25362: LD_VAR 0 4
25366: RET
// export function SOS_Command ( cmd ) ; begin
25367: LD_INT 0
25369: PPUSH
// end ;
25370: LD_VAR 0 2
25374: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25375: LD_INT 0
25377: PPUSH
// end ;
25378: LD_VAR 0 6
25382: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25383: LD_INT 0
25385: PPUSH
25386: PPUSH
// if not vehicle or not factory then
25387: LD_VAR 0 1
25391: NOT
25392: PUSH
25393: LD_VAR 0 2
25397: NOT
25398: OR
25399: IFFALSE 25403
// exit ;
25401: GO 25634
// if factoryWaypoints >= factory then
25403: LD_EXP 84
25407: PUSH
25408: LD_VAR 0 2
25412: GREATEREQUAL
25413: IFFALSE 25634
// if factoryWaypoints [ factory ] then
25415: LD_EXP 84
25419: PUSH
25420: LD_VAR 0 2
25424: ARRAY
25425: IFFALSE 25634
// begin if GetControl ( vehicle ) = control_manual then
25427: LD_VAR 0 1
25431: PPUSH
25432: CALL_OW 263
25436: PUSH
25437: LD_INT 1
25439: EQUAL
25440: IFFALSE 25521
// begin driver := IsDrivenBy ( vehicle ) ;
25442: LD_ADDR_VAR 0 4
25446: PUSH
25447: LD_VAR 0 1
25451: PPUSH
25452: CALL_OW 311
25456: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25457: LD_VAR 0 4
25461: PPUSH
25462: LD_EXP 84
25466: PUSH
25467: LD_VAR 0 2
25471: ARRAY
25472: PUSH
25473: LD_INT 3
25475: ARRAY
25476: PPUSH
25477: LD_EXP 84
25481: PUSH
25482: LD_VAR 0 2
25486: ARRAY
25487: PUSH
25488: LD_INT 4
25490: ARRAY
25491: PPUSH
25492: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25496: LD_VAR 0 4
25500: PPUSH
25501: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25505: LD_VAR 0 4
25509: PPUSH
25510: LD_VAR 0 2
25514: PPUSH
25515: CALL_OW 180
// end else
25519: GO 25634
// if GetControl ( vehicle ) = control_remote then
25521: LD_VAR 0 1
25525: PPUSH
25526: CALL_OW 263
25530: PUSH
25531: LD_INT 2
25533: EQUAL
25534: IFFALSE 25595
// begin wait ( 0 0$2 ) ;
25536: LD_INT 70
25538: PPUSH
25539: CALL_OW 67
// if Connect ( vehicle ) then
25543: LD_VAR 0 1
25547: PPUSH
25548: CALL 37658 0 1
25552: IFFALSE 25593
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25554: LD_VAR 0 1
25558: PPUSH
25559: LD_EXP 84
25563: PUSH
25564: LD_VAR 0 2
25568: ARRAY
25569: PUSH
25570: LD_INT 3
25572: ARRAY
25573: PPUSH
25574: LD_EXP 84
25578: PUSH
25579: LD_VAR 0 2
25583: ARRAY
25584: PUSH
25585: LD_INT 4
25587: ARRAY
25588: PPUSH
25589: CALL_OW 171
// end else
25593: GO 25634
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25595: LD_VAR 0 1
25599: PPUSH
25600: LD_EXP 84
25604: PUSH
25605: LD_VAR 0 2
25609: ARRAY
25610: PUSH
25611: LD_INT 3
25613: ARRAY
25614: PPUSH
25615: LD_EXP 84
25619: PUSH
25620: LD_VAR 0 2
25624: ARRAY
25625: PUSH
25626: LD_INT 4
25628: ARRAY
25629: PPUSH
25630: CALL_OW 171
// end ; end ;
25634: LD_VAR 0 3
25638: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25639: LD_INT 0
25641: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25642: LD_VAR 0 1
25646: PUSH
25647: LD_INT 250
25649: EQUAL
25650: PUSH
25651: LD_VAR 0 2
25655: PPUSH
25656: CALL_OW 264
25660: PUSH
25661: LD_INT 81
25663: EQUAL
25664: AND
25665: IFFALSE 25686
// MinerPlaceMine ( unit , x , y ) ;
25667: LD_VAR 0 2
25671: PPUSH
25672: LD_VAR 0 4
25676: PPUSH
25677: LD_VAR 0 5
25681: PPUSH
25682: CALL 28071 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25686: LD_VAR 0 1
25690: PUSH
25691: LD_INT 251
25693: EQUAL
25694: PUSH
25695: LD_VAR 0 2
25699: PPUSH
25700: CALL_OW 264
25704: PUSH
25705: LD_INT 81
25707: EQUAL
25708: AND
25709: IFFALSE 25730
// MinerDetonateMine ( unit , x , y ) ;
25711: LD_VAR 0 2
25715: PPUSH
25716: LD_VAR 0 4
25720: PPUSH
25721: LD_VAR 0 5
25725: PPUSH
25726: CALL 28346 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25730: LD_VAR 0 1
25734: PUSH
25735: LD_INT 252
25737: EQUAL
25738: PUSH
25739: LD_VAR 0 2
25743: PPUSH
25744: CALL_OW 264
25748: PUSH
25749: LD_INT 81
25751: EQUAL
25752: AND
25753: IFFALSE 25774
// MinerCreateMinefield ( unit , x , y ) ;
25755: LD_VAR 0 2
25759: PPUSH
25760: LD_VAR 0 4
25764: PPUSH
25765: LD_VAR 0 5
25769: PPUSH
25770: CALL 28763 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25774: LD_VAR 0 1
25778: PUSH
25779: LD_INT 253
25781: EQUAL
25782: PUSH
25783: LD_VAR 0 2
25787: PPUSH
25788: CALL_OW 257
25792: PUSH
25793: LD_INT 5
25795: EQUAL
25796: AND
25797: IFFALSE 25818
// ComBinocular ( unit , x , y ) ;
25799: LD_VAR 0 2
25803: PPUSH
25804: LD_VAR 0 4
25808: PPUSH
25809: LD_VAR 0 5
25813: PPUSH
25814: CALL 29132 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25818: LD_VAR 0 1
25822: PUSH
25823: LD_INT 254
25825: EQUAL
25826: PUSH
25827: LD_VAR 0 2
25831: PPUSH
25832: CALL_OW 264
25836: PUSH
25837: LD_INT 99
25839: EQUAL
25840: AND
25841: PUSH
25842: LD_VAR 0 3
25846: PPUSH
25847: CALL_OW 263
25851: PUSH
25852: LD_INT 3
25854: EQUAL
25855: AND
25856: IFFALSE 25872
// HackDestroyVehicle ( unit , selectedUnit ) ;
25858: LD_VAR 0 2
25862: PPUSH
25863: LD_VAR 0 3
25867: PPUSH
25868: CALL 27435 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25872: LD_VAR 0 1
25876: PUSH
25877: LD_INT 255
25879: EQUAL
25880: PUSH
25881: LD_VAR 0 2
25885: PPUSH
25886: CALL_OW 264
25890: PUSH
25891: LD_INT 14
25893: PUSH
25894: LD_INT 53
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: IN
25901: AND
25902: PUSH
25903: LD_VAR 0 4
25907: PPUSH
25908: LD_VAR 0 5
25912: PPUSH
25913: CALL_OW 488
25917: AND
25918: IFFALSE 25942
// CutTreeXYR ( unit , x , y , 12 ) ;
25920: LD_VAR 0 2
25924: PPUSH
25925: LD_VAR 0 4
25929: PPUSH
25930: LD_VAR 0 5
25934: PPUSH
25935: LD_INT 12
25937: PPUSH
25938: CALL 26005 0 4
// if cmd = 256 then
25942: LD_VAR 0 1
25946: PUSH
25947: LD_INT 256
25949: EQUAL
25950: IFFALSE 25971
// SetFactoryWaypoint ( unit , x , y ) ;
25952: LD_VAR 0 2
25956: PPUSH
25957: LD_VAR 0 4
25961: PPUSH
25962: LD_VAR 0 5
25966: PPUSH
25967: CALL 23952 0 3
// if cmd = 257 then
25971: LD_VAR 0 1
25975: PUSH
25976: LD_INT 257
25978: EQUAL
25979: IFFALSE 26000
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25981: LD_VAR 0 2
25985: PPUSH
25986: LD_VAR 0 4
25990: PPUSH
25991: LD_VAR 0 5
25995: PPUSH
25996: CALL 24314 0 3
// end ;
26000: LD_VAR 0 6
26004: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26005: LD_INT 0
26007: PPUSH
26008: PPUSH
26009: PPUSH
26010: PPUSH
26011: PPUSH
26012: PPUSH
26013: PPUSH
26014: PPUSH
26015: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26016: LD_VAR 0 1
26020: NOT
26021: PUSH
26022: LD_VAR 0 2
26026: PPUSH
26027: LD_VAR 0 3
26031: PPUSH
26032: CALL_OW 488
26036: NOT
26037: OR
26038: PUSH
26039: LD_VAR 0 4
26043: NOT
26044: OR
26045: IFFALSE 26049
// exit ;
26047: GO 26389
// list := [ ] ;
26049: LD_ADDR_VAR 0 13
26053: PUSH
26054: EMPTY
26055: ST_TO_ADDR
// if x - r < 0 then
26056: LD_VAR 0 2
26060: PUSH
26061: LD_VAR 0 4
26065: MINUS
26066: PUSH
26067: LD_INT 0
26069: LESS
26070: IFFALSE 26082
// min_x := 0 else
26072: LD_ADDR_VAR 0 7
26076: PUSH
26077: LD_INT 0
26079: ST_TO_ADDR
26080: GO 26098
// min_x := x - r ;
26082: LD_ADDR_VAR 0 7
26086: PUSH
26087: LD_VAR 0 2
26091: PUSH
26092: LD_VAR 0 4
26096: MINUS
26097: ST_TO_ADDR
// if y - r < 0 then
26098: LD_VAR 0 3
26102: PUSH
26103: LD_VAR 0 4
26107: MINUS
26108: PUSH
26109: LD_INT 0
26111: LESS
26112: IFFALSE 26124
// min_y := 0 else
26114: LD_ADDR_VAR 0 8
26118: PUSH
26119: LD_INT 0
26121: ST_TO_ADDR
26122: GO 26140
// min_y := y - r ;
26124: LD_ADDR_VAR 0 8
26128: PUSH
26129: LD_VAR 0 3
26133: PUSH
26134: LD_VAR 0 4
26138: MINUS
26139: ST_TO_ADDR
// max_x := x + r ;
26140: LD_ADDR_VAR 0 9
26144: PUSH
26145: LD_VAR 0 2
26149: PUSH
26150: LD_VAR 0 4
26154: PLUS
26155: ST_TO_ADDR
// max_y := y + r ;
26156: LD_ADDR_VAR 0 10
26160: PUSH
26161: LD_VAR 0 3
26165: PUSH
26166: LD_VAR 0 4
26170: PLUS
26171: ST_TO_ADDR
// for _x = min_x to max_x do
26172: LD_ADDR_VAR 0 11
26176: PUSH
26177: DOUBLE
26178: LD_VAR 0 7
26182: DEC
26183: ST_TO_ADDR
26184: LD_VAR 0 9
26188: PUSH
26189: FOR_TO
26190: IFFALSE 26307
// for _y = min_y to max_y do
26192: LD_ADDR_VAR 0 12
26196: PUSH
26197: DOUBLE
26198: LD_VAR 0 8
26202: DEC
26203: ST_TO_ADDR
26204: LD_VAR 0 10
26208: PUSH
26209: FOR_TO
26210: IFFALSE 26303
// begin if not ValidHex ( _x , _y ) then
26212: LD_VAR 0 11
26216: PPUSH
26217: LD_VAR 0 12
26221: PPUSH
26222: CALL_OW 488
26226: NOT
26227: IFFALSE 26231
// continue ;
26229: GO 26209
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26231: LD_VAR 0 11
26235: PPUSH
26236: LD_VAR 0 12
26240: PPUSH
26241: CALL_OW 351
26245: PUSH
26246: LD_VAR 0 11
26250: PPUSH
26251: LD_VAR 0 12
26255: PPUSH
26256: CALL_OW 554
26260: AND
26261: IFFALSE 26301
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26263: LD_ADDR_VAR 0 13
26267: PUSH
26268: LD_VAR 0 13
26272: PPUSH
26273: LD_VAR 0 13
26277: PUSH
26278: LD_INT 1
26280: PLUS
26281: PPUSH
26282: LD_VAR 0 11
26286: PUSH
26287: LD_VAR 0 12
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PPUSH
26296: CALL_OW 2
26300: ST_TO_ADDR
// end ;
26301: GO 26209
26303: POP
26304: POP
26305: GO 26189
26307: POP
26308: POP
// if not list then
26309: LD_VAR 0 13
26313: NOT
26314: IFFALSE 26318
// exit ;
26316: GO 26389
// for i in list do
26318: LD_ADDR_VAR 0 6
26322: PUSH
26323: LD_VAR 0 13
26327: PUSH
26328: FOR_IN
26329: IFFALSE 26387
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26331: LD_VAR 0 1
26335: PPUSH
26336: LD_STRING M
26338: PUSH
26339: LD_VAR 0 6
26343: PUSH
26344: LD_INT 1
26346: ARRAY
26347: PUSH
26348: LD_VAR 0 6
26352: PUSH
26353: LD_INT 2
26355: ARRAY
26356: PUSH
26357: LD_INT 0
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: LD_INT 0
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: PUSH
26378: EMPTY
26379: LIST
26380: PPUSH
26381: CALL_OW 447
26385: GO 26328
26387: POP
26388: POP
// end ;
26389: LD_VAR 0 5
26393: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26394: LD_EXP 87
26398: NOT
26399: IFFALSE 26449
26401: GO 26403
26403: DISABLE
// begin initHack := true ;
26404: LD_ADDR_EXP 87
26408: PUSH
26409: LD_INT 1
26411: ST_TO_ADDR
// hackTanks := [ ] ;
26412: LD_ADDR_EXP 88
26416: PUSH
26417: EMPTY
26418: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26419: LD_ADDR_EXP 89
26423: PUSH
26424: EMPTY
26425: ST_TO_ADDR
// hackLimit := 3 ;
26426: LD_ADDR_EXP 90
26430: PUSH
26431: LD_INT 3
26433: ST_TO_ADDR
// hackDist := 12 ;
26434: LD_ADDR_EXP 91
26438: PUSH
26439: LD_INT 12
26441: ST_TO_ADDR
// hackCounter := [ ] ;
26442: LD_ADDR_EXP 92
26446: PUSH
26447: EMPTY
26448: ST_TO_ADDR
// end ;
26449: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26450: LD_EXP 87
26454: PUSH
26455: LD_INT 34
26457: PUSH
26458: LD_INT 99
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PPUSH
26465: CALL_OW 69
26469: AND
26470: IFFALSE 26723
26472: GO 26474
26474: DISABLE
26475: LD_INT 0
26477: PPUSH
26478: PPUSH
// begin enable ;
26479: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26480: LD_ADDR_VAR 0 1
26484: PUSH
26485: LD_INT 34
26487: PUSH
26488: LD_INT 99
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PPUSH
26495: CALL_OW 69
26499: PUSH
26500: FOR_IN
26501: IFFALSE 26721
// begin if not i in hackTanks then
26503: LD_VAR 0 1
26507: PUSH
26508: LD_EXP 88
26512: IN
26513: NOT
26514: IFFALSE 26597
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26516: LD_ADDR_EXP 88
26520: PUSH
26521: LD_EXP 88
26525: PPUSH
26526: LD_EXP 88
26530: PUSH
26531: LD_INT 1
26533: PLUS
26534: PPUSH
26535: LD_VAR 0 1
26539: PPUSH
26540: CALL_OW 1
26544: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26545: LD_ADDR_EXP 89
26549: PUSH
26550: LD_EXP 89
26554: PPUSH
26555: LD_EXP 89
26559: PUSH
26560: LD_INT 1
26562: PLUS
26563: PPUSH
26564: EMPTY
26565: PPUSH
26566: CALL_OW 1
26570: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26571: LD_ADDR_EXP 92
26575: PUSH
26576: LD_EXP 92
26580: PPUSH
26581: LD_EXP 92
26585: PUSH
26586: LD_INT 1
26588: PLUS
26589: PPUSH
26590: EMPTY
26591: PPUSH
26592: CALL_OW 1
26596: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26597: LD_VAR 0 1
26601: PPUSH
26602: CALL_OW 302
26606: NOT
26607: IFFALSE 26620
// begin HackUnlinkAll ( i ) ;
26609: LD_VAR 0 1
26613: PPUSH
26614: CALL 26726 0 1
// continue ;
26618: GO 26500
// end ; HackCheckCapturedStatus ( i ) ;
26620: LD_VAR 0 1
26624: PPUSH
26625: CALL 27169 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26629: LD_ADDR_VAR 0 2
26633: PUSH
26634: LD_INT 81
26636: PUSH
26637: LD_VAR 0 1
26641: PPUSH
26642: CALL_OW 255
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 33
26653: PUSH
26654: LD_INT 3
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 91
26663: PUSH
26664: LD_VAR 0 1
26668: PUSH
26669: LD_EXP 91
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 50
26681: PUSH
26682: EMPTY
26683: LIST
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: PPUSH
26691: CALL_OW 69
26695: ST_TO_ADDR
// if not tmp then
26696: LD_VAR 0 2
26700: NOT
26701: IFFALSE 26705
// continue ;
26703: GO 26500
// HackLink ( i , tmp ) ;
26705: LD_VAR 0 1
26709: PPUSH
26710: LD_VAR 0 2
26714: PPUSH
26715: CALL 26862 0 2
// end ;
26719: GO 26500
26721: POP
26722: POP
// end ;
26723: PPOPN 2
26725: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26726: LD_INT 0
26728: PPUSH
26729: PPUSH
26730: PPUSH
// if not hack in hackTanks then
26731: LD_VAR 0 1
26735: PUSH
26736: LD_EXP 88
26740: IN
26741: NOT
26742: IFFALSE 26746
// exit ;
26744: GO 26857
// index := GetElementIndex ( hackTanks , hack ) ;
26746: LD_ADDR_VAR 0 4
26750: PUSH
26751: LD_EXP 88
26755: PPUSH
26756: LD_VAR 0 1
26760: PPUSH
26761: CALL 34474 0 2
26765: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26766: LD_EXP 89
26770: PUSH
26771: LD_VAR 0 4
26775: ARRAY
26776: IFFALSE 26857
// begin for i in hackTanksCaptured [ index ] do
26778: LD_ADDR_VAR 0 3
26782: PUSH
26783: LD_EXP 89
26787: PUSH
26788: LD_VAR 0 4
26792: ARRAY
26793: PUSH
26794: FOR_IN
26795: IFFALSE 26821
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26797: LD_VAR 0 3
26801: PUSH
26802: LD_INT 1
26804: ARRAY
26805: PPUSH
26806: LD_VAR 0 3
26810: PUSH
26811: LD_INT 2
26813: ARRAY
26814: PPUSH
26815: CALL_OW 235
26819: GO 26794
26821: POP
26822: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26823: LD_ADDR_EXP 89
26827: PUSH
26828: LD_EXP 89
26832: PPUSH
26833: LD_VAR 0 4
26837: PPUSH
26838: EMPTY
26839: PPUSH
26840: CALL_OW 1
26844: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26845: LD_VAR 0 1
26849: PPUSH
26850: LD_INT 0
26852: PPUSH
26853: CALL_OW 505
// end ; end ;
26857: LD_VAR 0 2
26861: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26862: LD_INT 0
26864: PPUSH
26865: PPUSH
26866: PPUSH
// if not hack in hackTanks or not vehicles then
26867: LD_VAR 0 1
26871: PUSH
26872: LD_EXP 88
26876: IN
26877: NOT
26878: PUSH
26879: LD_VAR 0 2
26883: NOT
26884: OR
26885: IFFALSE 26889
// exit ;
26887: GO 27164
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26889: LD_ADDR_VAR 0 2
26893: PUSH
26894: LD_VAR 0 1
26898: PPUSH
26899: LD_VAR 0 2
26903: PPUSH
26904: LD_INT 1
26906: PPUSH
26907: LD_INT 1
26909: PPUSH
26910: CALL 35124 0 4
26914: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26915: LD_ADDR_VAR 0 5
26919: PUSH
26920: LD_EXP 88
26924: PPUSH
26925: LD_VAR 0 1
26929: PPUSH
26930: CALL 34474 0 2
26934: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26935: LD_EXP 89
26939: PUSH
26940: LD_VAR 0 5
26944: ARRAY
26945: PUSH
26946: LD_EXP 90
26950: LESS
26951: IFFALSE 27140
// begin for i := 1 to vehicles do
26953: LD_ADDR_VAR 0 4
26957: PUSH
26958: DOUBLE
26959: LD_INT 1
26961: DEC
26962: ST_TO_ADDR
26963: LD_VAR 0 2
26967: PUSH
26968: FOR_TO
26969: IFFALSE 27138
// begin if hackTanksCaptured [ index ] = hackLimit then
26971: LD_EXP 89
26975: PUSH
26976: LD_VAR 0 5
26980: ARRAY
26981: PUSH
26982: LD_EXP 90
26986: EQUAL
26987: IFFALSE 26991
// break ;
26989: GO 27138
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26991: LD_ADDR_EXP 92
26995: PUSH
26996: LD_EXP 92
27000: PPUSH
27001: LD_VAR 0 5
27005: PPUSH
27006: LD_EXP 92
27010: PUSH
27011: LD_VAR 0 5
27015: ARRAY
27016: PUSH
27017: LD_INT 1
27019: PLUS
27020: PPUSH
27021: CALL_OW 1
27025: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27026: LD_ADDR_EXP 89
27030: PUSH
27031: LD_EXP 89
27035: PPUSH
27036: LD_VAR 0 5
27040: PUSH
27041: LD_EXP 89
27045: PUSH
27046: LD_VAR 0 5
27050: ARRAY
27051: PUSH
27052: LD_INT 1
27054: PLUS
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PPUSH
27060: LD_VAR 0 2
27064: PUSH
27065: LD_VAR 0 4
27069: ARRAY
27070: PUSH
27071: LD_VAR 0 2
27075: PUSH
27076: LD_VAR 0 4
27080: ARRAY
27081: PPUSH
27082: CALL_OW 255
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PPUSH
27091: CALL 34689 0 3
27095: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27096: LD_VAR 0 2
27100: PUSH
27101: LD_VAR 0 4
27105: ARRAY
27106: PPUSH
27107: LD_VAR 0 1
27111: PPUSH
27112: CALL_OW 255
27116: PPUSH
27117: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27121: LD_VAR 0 2
27125: PUSH
27126: LD_VAR 0 4
27130: ARRAY
27131: PPUSH
27132: CALL_OW 141
// end ;
27136: GO 26968
27138: POP
27139: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27140: LD_VAR 0 1
27144: PPUSH
27145: LD_EXP 89
27149: PUSH
27150: LD_VAR 0 5
27154: ARRAY
27155: PUSH
27156: LD_INT 0
27158: PLUS
27159: PPUSH
27160: CALL_OW 505
// end ;
27164: LD_VAR 0 3
27168: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27169: LD_INT 0
27171: PPUSH
27172: PPUSH
27173: PPUSH
27174: PPUSH
// if not hack in hackTanks then
27175: LD_VAR 0 1
27179: PUSH
27180: LD_EXP 88
27184: IN
27185: NOT
27186: IFFALSE 27190
// exit ;
27188: GO 27430
// index := GetElementIndex ( hackTanks , hack ) ;
27190: LD_ADDR_VAR 0 4
27194: PUSH
27195: LD_EXP 88
27199: PPUSH
27200: LD_VAR 0 1
27204: PPUSH
27205: CALL 34474 0 2
27209: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27210: LD_ADDR_VAR 0 3
27214: PUSH
27215: DOUBLE
27216: LD_EXP 89
27220: PUSH
27221: LD_VAR 0 4
27225: ARRAY
27226: INC
27227: ST_TO_ADDR
27228: LD_INT 1
27230: PUSH
27231: FOR_DOWNTO
27232: IFFALSE 27404
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27234: LD_ADDR_VAR 0 5
27238: PUSH
27239: LD_EXP 89
27243: PUSH
27244: LD_VAR 0 4
27248: ARRAY
27249: PUSH
27250: LD_VAR 0 3
27254: ARRAY
27255: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27256: LD_VAR 0 5
27260: PUSH
27261: LD_INT 1
27263: ARRAY
27264: PPUSH
27265: CALL_OW 302
27269: NOT
27270: PUSH
27271: LD_VAR 0 5
27275: PUSH
27276: LD_INT 1
27278: ARRAY
27279: PPUSH
27280: CALL_OW 255
27284: PUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 255
27294: NONEQUAL
27295: OR
27296: IFFALSE 27402
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27298: LD_VAR 0 5
27302: PUSH
27303: LD_INT 1
27305: ARRAY
27306: PPUSH
27307: CALL_OW 305
27311: PUSH
27312: LD_VAR 0 5
27316: PUSH
27317: LD_INT 1
27319: ARRAY
27320: PPUSH
27321: CALL_OW 255
27325: PUSH
27326: LD_VAR 0 1
27330: PPUSH
27331: CALL_OW 255
27335: EQUAL
27336: AND
27337: IFFALSE 27361
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27339: LD_VAR 0 5
27343: PUSH
27344: LD_INT 1
27346: ARRAY
27347: PPUSH
27348: LD_VAR 0 5
27352: PUSH
27353: LD_INT 2
27355: ARRAY
27356: PPUSH
27357: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27361: LD_ADDR_EXP 89
27365: PUSH
27366: LD_EXP 89
27370: PPUSH
27371: LD_VAR 0 4
27375: PPUSH
27376: LD_EXP 89
27380: PUSH
27381: LD_VAR 0 4
27385: ARRAY
27386: PPUSH
27387: LD_VAR 0 3
27391: PPUSH
27392: CALL_OW 3
27396: PPUSH
27397: CALL_OW 1
27401: ST_TO_ADDR
// end ; end ;
27402: GO 27231
27404: POP
27405: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27406: LD_VAR 0 1
27410: PPUSH
27411: LD_EXP 89
27415: PUSH
27416: LD_VAR 0 4
27420: ARRAY
27421: PUSH
27422: LD_INT 0
27424: PLUS
27425: PPUSH
27426: CALL_OW 505
// end ;
27430: LD_VAR 0 2
27434: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27435: LD_INT 0
27437: PPUSH
27438: PPUSH
27439: PPUSH
27440: PPUSH
// if not hack in hackTanks then
27441: LD_VAR 0 1
27445: PUSH
27446: LD_EXP 88
27450: IN
27451: NOT
27452: IFFALSE 27456
// exit ;
27454: GO 27541
// index := GetElementIndex ( hackTanks , hack ) ;
27456: LD_ADDR_VAR 0 5
27460: PUSH
27461: LD_EXP 88
27465: PPUSH
27466: LD_VAR 0 1
27470: PPUSH
27471: CALL 34474 0 2
27475: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27476: LD_ADDR_VAR 0 4
27480: PUSH
27481: DOUBLE
27482: LD_INT 1
27484: DEC
27485: ST_TO_ADDR
27486: LD_EXP 89
27490: PUSH
27491: LD_VAR 0 5
27495: ARRAY
27496: PUSH
27497: FOR_TO
27498: IFFALSE 27539
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27500: LD_EXP 89
27504: PUSH
27505: LD_VAR 0 5
27509: ARRAY
27510: PUSH
27511: LD_VAR 0 4
27515: ARRAY
27516: PUSH
27517: LD_INT 1
27519: ARRAY
27520: PUSH
27521: LD_VAR 0 2
27525: EQUAL
27526: IFFALSE 27537
// KillUnit ( vehicle ) ;
27528: LD_VAR 0 2
27532: PPUSH
27533: CALL_OW 66
27537: GO 27497
27539: POP
27540: POP
// end ;
27541: LD_VAR 0 3
27545: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27546: LD_EXP 93
27550: NOT
27551: IFFALSE 27586
27553: GO 27555
27555: DISABLE
// begin initMiner := true ;
27556: LD_ADDR_EXP 93
27560: PUSH
27561: LD_INT 1
27563: ST_TO_ADDR
// minersList := [ ] ;
27564: LD_ADDR_EXP 94
27568: PUSH
27569: EMPTY
27570: ST_TO_ADDR
// minerMinesList := [ ] ;
27571: LD_ADDR_EXP 95
27575: PUSH
27576: EMPTY
27577: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27578: LD_ADDR_EXP 96
27582: PUSH
27583: LD_INT 5
27585: ST_TO_ADDR
// end ;
27586: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27587: LD_EXP 93
27591: PUSH
27592: LD_INT 34
27594: PUSH
27595: LD_INT 81
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PPUSH
27602: CALL_OW 69
27606: AND
27607: IFFALSE 28068
27609: GO 27611
27611: DISABLE
27612: LD_INT 0
27614: PPUSH
27615: PPUSH
27616: PPUSH
27617: PPUSH
// begin enable ;
27618: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27619: LD_ADDR_VAR 0 1
27623: PUSH
27624: LD_INT 34
27626: PUSH
27627: LD_INT 81
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PPUSH
27634: CALL_OW 69
27638: PUSH
27639: FOR_IN
27640: IFFALSE 27712
// begin if not i in minersList then
27642: LD_VAR 0 1
27646: PUSH
27647: LD_EXP 94
27651: IN
27652: NOT
27653: IFFALSE 27710
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27655: LD_ADDR_EXP 94
27659: PUSH
27660: LD_EXP 94
27664: PPUSH
27665: LD_EXP 94
27669: PUSH
27670: LD_INT 1
27672: PLUS
27673: PPUSH
27674: LD_VAR 0 1
27678: PPUSH
27679: CALL_OW 1
27683: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27684: LD_ADDR_EXP 95
27688: PUSH
27689: LD_EXP 95
27693: PPUSH
27694: LD_EXP 95
27698: PUSH
27699: LD_INT 1
27701: PLUS
27702: PPUSH
27703: EMPTY
27704: PPUSH
27705: CALL_OW 1
27709: ST_TO_ADDR
// end end ;
27710: GO 27639
27712: POP
27713: POP
// for i := minerMinesList downto 1 do
27714: LD_ADDR_VAR 0 1
27718: PUSH
27719: DOUBLE
27720: LD_EXP 95
27724: INC
27725: ST_TO_ADDR
27726: LD_INT 1
27728: PUSH
27729: FOR_DOWNTO
27730: IFFALSE 28066
// begin if IsLive ( minersList [ i ] ) then
27732: LD_EXP 94
27736: PUSH
27737: LD_VAR 0 1
27741: ARRAY
27742: PPUSH
27743: CALL_OW 300
27747: IFFALSE 27775
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27749: LD_EXP 94
27753: PUSH
27754: LD_VAR 0 1
27758: ARRAY
27759: PPUSH
27760: LD_EXP 95
27764: PUSH
27765: LD_VAR 0 1
27769: ARRAY
27770: PPUSH
27771: CALL_OW 505
// if not minerMinesList [ i ] then
27775: LD_EXP 95
27779: PUSH
27780: LD_VAR 0 1
27784: ARRAY
27785: NOT
27786: IFFALSE 27790
// continue ;
27788: GO 27729
// for j := minerMinesList [ i ] downto 1 do
27790: LD_ADDR_VAR 0 2
27794: PUSH
27795: DOUBLE
27796: LD_EXP 95
27800: PUSH
27801: LD_VAR 0 1
27805: ARRAY
27806: INC
27807: ST_TO_ADDR
27808: LD_INT 1
27810: PUSH
27811: FOR_DOWNTO
27812: IFFALSE 28062
// begin side := GetSide ( minersList [ i ] ) ;
27814: LD_ADDR_VAR 0 3
27818: PUSH
27819: LD_EXP 94
27823: PUSH
27824: LD_VAR 0 1
27828: ARRAY
27829: PPUSH
27830: CALL_OW 255
27834: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27835: LD_ADDR_VAR 0 4
27839: PUSH
27840: LD_EXP 95
27844: PUSH
27845: LD_VAR 0 1
27849: ARRAY
27850: PUSH
27851: LD_VAR 0 2
27855: ARRAY
27856: PUSH
27857: LD_INT 1
27859: ARRAY
27860: PPUSH
27861: LD_EXP 95
27865: PUSH
27866: LD_VAR 0 1
27870: ARRAY
27871: PUSH
27872: LD_VAR 0 2
27876: ARRAY
27877: PUSH
27878: LD_INT 2
27880: ARRAY
27881: PPUSH
27882: CALL_OW 428
27886: ST_TO_ADDR
// if not tmp then
27887: LD_VAR 0 4
27891: NOT
27892: IFFALSE 27896
// continue ;
27894: GO 27811
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27896: LD_VAR 0 4
27900: PUSH
27901: LD_INT 81
27903: PUSH
27904: LD_VAR 0 3
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PPUSH
27913: CALL_OW 69
27917: IN
27918: PUSH
27919: LD_EXP 95
27923: PUSH
27924: LD_VAR 0 1
27928: ARRAY
27929: PUSH
27930: LD_VAR 0 2
27934: ARRAY
27935: PUSH
27936: LD_INT 1
27938: ARRAY
27939: PPUSH
27940: LD_EXP 95
27944: PUSH
27945: LD_VAR 0 1
27949: ARRAY
27950: PUSH
27951: LD_VAR 0 2
27955: ARRAY
27956: PUSH
27957: LD_INT 2
27959: ARRAY
27960: PPUSH
27961: CALL_OW 458
27965: AND
27966: IFFALSE 28060
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27968: LD_EXP 95
27972: PUSH
27973: LD_VAR 0 1
27977: ARRAY
27978: PUSH
27979: LD_VAR 0 2
27983: ARRAY
27984: PUSH
27985: LD_INT 1
27987: ARRAY
27988: PPUSH
27989: LD_EXP 95
27993: PUSH
27994: LD_VAR 0 1
27998: ARRAY
27999: PUSH
28000: LD_VAR 0 2
28004: ARRAY
28005: PUSH
28006: LD_INT 2
28008: ARRAY
28009: PPUSH
28010: LD_VAR 0 3
28014: PPUSH
28015: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28019: LD_ADDR_EXP 95
28023: PUSH
28024: LD_EXP 95
28028: PPUSH
28029: LD_VAR 0 1
28033: PPUSH
28034: LD_EXP 95
28038: PUSH
28039: LD_VAR 0 1
28043: ARRAY
28044: PPUSH
28045: LD_VAR 0 2
28049: PPUSH
28050: CALL_OW 3
28054: PPUSH
28055: CALL_OW 1
28059: ST_TO_ADDR
// end ; end ;
28060: GO 27811
28062: POP
28063: POP
// end ;
28064: GO 27729
28066: POP
28067: POP
// end ;
28068: PPOPN 4
28070: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28071: LD_INT 0
28073: PPUSH
28074: PPUSH
// result := false ;
28075: LD_ADDR_VAR 0 4
28079: PUSH
28080: LD_INT 0
28082: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28083: LD_VAR 0 1
28087: PPUSH
28088: CALL_OW 264
28092: PUSH
28093: LD_INT 81
28095: EQUAL
28096: NOT
28097: IFFALSE 28101
// exit ;
28099: GO 28341
// index := GetElementIndex ( minersList , unit ) ;
28101: LD_ADDR_VAR 0 5
28105: PUSH
28106: LD_EXP 94
28110: PPUSH
28111: LD_VAR 0 1
28115: PPUSH
28116: CALL 34474 0 2
28120: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28121: LD_EXP 95
28125: PUSH
28126: LD_VAR 0 5
28130: ARRAY
28131: PUSH
28132: LD_EXP 96
28136: GREATEREQUAL
28137: IFFALSE 28141
// exit ;
28139: GO 28341
// ComMoveXY ( unit , x , y ) ;
28141: LD_VAR 0 1
28145: PPUSH
28146: LD_VAR 0 2
28150: PPUSH
28151: LD_VAR 0 3
28155: PPUSH
28156: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28160: LD_INT 35
28162: PPUSH
28163: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28167: LD_VAR 0 1
28171: PPUSH
28172: LD_VAR 0 2
28176: PPUSH
28177: LD_VAR 0 3
28181: PPUSH
28182: CALL 65829 0 3
28186: NOT
28187: PUSH
28188: LD_VAR 0 1
28192: PPUSH
28193: CALL_OW 314
28197: AND
28198: IFFALSE 28202
// exit ;
28200: GO 28341
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28202: LD_VAR 0 2
28206: PPUSH
28207: LD_VAR 0 3
28211: PPUSH
28212: CALL_OW 428
28216: PUSH
28217: LD_VAR 0 1
28221: EQUAL
28222: PUSH
28223: LD_VAR 0 1
28227: PPUSH
28228: CALL_OW 314
28232: NOT
28233: AND
28234: IFFALSE 28160
// PlaySoundXY ( x , y , PlantMine ) ;
28236: LD_VAR 0 2
28240: PPUSH
28241: LD_VAR 0 3
28245: PPUSH
28246: LD_STRING PlantMine
28248: PPUSH
28249: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28253: LD_VAR 0 2
28257: PPUSH
28258: LD_VAR 0 3
28262: PPUSH
28263: LD_VAR 0 1
28267: PPUSH
28268: CALL_OW 255
28272: PPUSH
28273: LD_INT 0
28275: PPUSH
28276: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28280: LD_ADDR_EXP 95
28284: PUSH
28285: LD_EXP 95
28289: PPUSH
28290: LD_VAR 0 5
28294: PUSH
28295: LD_EXP 95
28299: PUSH
28300: LD_VAR 0 5
28304: ARRAY
28305: PUSH
28306: LD_INT 1
28308: PLUS
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PPUSH
28314: LD_VAR 0 2
28318: PUSH
28319: LD_VAR 0 3
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PPUSH
28328: CALL 34689 0 3
28332: ST_TO_ADDR
// result := true ;
28333: LD_ADDR_VAR 0 4
28337: PUSH
28338: LD_INT 1
28340: ST_TO_ADDR
// end ;
28341: LD_VAR 0 4
28345: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28346: LD_INT 0
28348: PPUSH
28349: PPUSH
28350: PPUSH
// if not unit in minersList then
28351: LD_VAR 0 1
28355: PUSH
28356: LD_EXP 94
28360: IN
28361: NOT
28362: IFFALSE 28366
// exit ;
28364: GO 28758
// index := GetElementIndex ( minersList , unit ) ;
28366: LD_ADDR_VAR 0 6
28370: PUSH
28371: LD_EXP 94
28375: PPUSH
28376: LD_VAR 0 1
28380: PPUSH
28381: CALL 34474 0 2
28385: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28386: LD_ADDR_VAR 0 5
28390: PUSH
28391: DOUBLE
28392: LD_EXP 95
28396: PUSH
28397: LD_VAR 0 6
28401: ARRAY
28402: INC
28403: ST_TO_ADDR
28404: LD_INT 1
28406: PUSH
28407: FOR_DOWNTO
28408: IFFALSE 28569
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28410: LD_EXP 95
28414: PUSH
28415: LD_VAR 0 6
28419: ARRAY
28420: PUSH
28421: LD_VAR 0 5
28425: ARRAY
28426: PUSH
28427: LD_INT 1
28429: ARRAY
28430: PUSH
28431: LD_VAR 0 2
28435: EQUAL
28436: PUSH
28437: LD_EXP 95
28441: PUSH
28442: LD_VAR 0 6
28446: ARRAY
28447: PUSH
28448: LD_VAR 0 5
28452: ARRAY
28453: PUSH
28454: LD_INT 2
28456: ARRAY
28457: PUSH
28458: LD_VAR 0 3
28462: EQUAL
28463: AND
28464: IFFALSE 28567
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28466: LD_EXP 95
28470: PUSH
28471: LD_VAR 0 6
28475: ARRAY
28476: PUSH
28477: LD_VAR 0 5
28481: ARRAY
28482: PUSH
28483: LD_INT 1
28485: ARRAY
28486: PPUSH
28487: LD_EXP 95
28491: PUSH
28492: LD_VAR 0 6
28496: ARRAY
28497: PUSH
28498: LD_VAR 0 5
28502: ARRAY
28503: PUSH
28504: LD_INT 2
28506: ARRAY
28507: PPUSH
28508: LD_VAR 0 1
28512: PPUSH
28513: CALL_OW 255
28517: PPUSH
28518: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28522: LD_ADDR_EXP 95
28526: PUSH
28527: LD_EXP 95
28531: PPUSH
28532: LD_VAR 0 6
28536: PPUSH
28537: LD_EXP 95
28541: PUSH
28542: LD_VAR 0 6
28546: ARRAY
28547: PPUSH
28548: LD_VAR 0 5
28552: PPUSH
28553: CALL_OW 3
28557: PPUSH
28558: CALL_OW 1
28562: ST_TO_ADDR
// exit ;
28563: POP
28564: POP
28565: GO 28758
// end ; end ;
28567: GO 28407
28569: POP
28570: POP
// for i := minerMinesList [ index ] downto 1 do
28571: LD_ADDR_VAR 0 5
28575: PUSH
28576: DOUBLE
28577: LD_EXP 95
28581: PUSH
28582: LD_VAR 0 6
28586: ARRAY
28587: INC
28588: ST_TO_ADDR
28589: LD_INT 1
28591: PUSH
28592: FOR_DOWNTO
28593: IFFALSE 28756
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28595: LD_EXP 95
28599: PUSH
28600: LD_VAR 0 6
28604: ARRAY
28605: PUSH
28606: LD_VAR 0 5
28610: ARRAY
28611: PUSH
28612: LD_INT 1
28614: ARRAY
28615: PPUSH
28616: LD_EXP 95
28620: PUSH
28621: LD_VAR 0 6
28625: ARRAY
28626: PUSH
28627: LD_VAR 0 5
28631: ARRAY
28632: PUSH
28633: LD_INT 2
28635: ARRAY
28636: PPUSH
28637: LD_VAR 0 2
28641: PPUSH
28642: LD_VAR 0 3
28646: PPUSH
28647: CALL_OW 298
28651: PUSH
28652: LD_INT 6
28654: LESS
28655: IFFALSE 28754
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28657: LD_EXP 95
28661: PUSH
28662: LD_VAR 0 6
28666: ARRAY
28667: PUSH
28668: LD_VAR 0 5
28672: ARRAY
28673: PUSH
28674: LD_INT 1
28676: ARRAY
28677: PPUSH
28678: LD_EXP 95
28682: PUSH
28683: LD_VAR 0 6
28687: ARRAY
28688: PUSH
28689: LD_VAR 0 5
28693: ARRAY
28694: PUSH
28695: LD_INT 2
28697: ARRAY
28698: PPUSH
28699: LD_VAR 0 1
28703: PPUSH
28704: CALL_OW 255
28708: PPUSH
28709: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28713: LD_ADDR_EXP 95
28717: PUSH
28718: LD_EXP 95
28722: PPUSH
28723: LD_VAR 0 6
28727: PPUSH
28728: LD_EXP 95
28732: PUSH
28733: LD_VAR 0 6
28737: ARRAY
28738: PPUSH
28739: LD_VAR 0 5
28743: PPUSH
28744: CALL_OW 3
28748: PPUSH
28749: CALL_OW 1
28753: ST_TO_ADDR
// end ; end ;
28754: GO 28592
28756: POP
28757: POP
// end ;
28758: LD_VAR 0 4
28762: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28763: LD_INT 0
28765: PPUSH
28766: PPUSH
28767: PPUSH
28768: PPUSH
28769: PPUSH
28770: PPUSH
28771: PPUSH
28772: PPUSH
28773: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28774: LD_VAR 0 1
28778: PPUSH
28779: CALL_OW 264
28783: PUSH
28784: LD_INT 81
28786: EQUAL
28787: NOT
28788: PUSH
28789: LD_VAR 0 1
28793: PUSH
28794: LD_EXP 94
28798: IN
28799: NOT
28800: OR
28801: IFFALSE 28805
// exit ;
28803: GO 29127
// index := GetElementIndex ( minersList , unit ) ;
28805: LD_ADDR_VAR 0 6
28809: PUSH
28810: LD_EXP 94
28814: PPUSH
28815: LD_VAR 0 1
28819: PPUSH
28820: CALL 34474 0 2
28824: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28825: LD_ADDR_VAR 0 8
28829: PUSH
28830: LD_EXP 96
28834: PUSH
28835: LD_EXP 95
28839: PUSH
28840: LD_VAR 0 6
28844: ARRAY
28845: MINUS
28846: ST_TO_ADDR
// if not minesFreeAmount then
28847: LD_VAR 0 8
28851: NOT
28852: IFFALSE 28856
// exit ;
28854: GO 29127
// tmp := [ ] ;
28856: LD_ADDR_VAR 0 7
28860: PUSH
28861: EMPTY
28862: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28863: LD_ADDR_VAR 0 5
28867: PUSH
28868: DOUBLE
28869: LD_INT 1
28871: DEC
28872: ST_TO_ADDR
28873: LD_VAR 0 8
28877: PUSH
28878: FOR_TO
28879: IFFALSE 29074
// begin _d := rand ( 0 , 5 ) ;
28881: LD_ADDR_VAR 0 11
28885: PUSH
28886: LD_INT 0
28888: PPUSH
28889: LD_INT 5
28891: PPUSH
28892: CALL_OW 12
28896: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28897: LD_ADDR_VAR 0 12
28901: PUSH
28902: LD_INT 2
28904: PPUSH
28905: LD_INT 6
28907: PPUSH
28908: CALL_OW 12
28912: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28913: LD_ADDR_VAR 0 9
28917: PUSH
28918: LD_VAR 0 2
28922: PPUSH
28923: LD_VAR 0 11
28927: PPUSH
28928: LD_VAR 0 12
28932: PPUSH
28933: CALL_OW 272
28937: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28938: LD_ADDR_VAR 0 10
28942: PUSH
28943: LD_VAR 0 3
28947: PPUSH
28948: LD_VAR 0 11
28952: PPUSH
28953: LD_VAR 0 12
28957: PPUSH
28958: CALL_OW 273
28962: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28963: LD_VAR 0 9
28967: PPUSH
28968: LD_VAR 0 10
28972: PPUSH
28973: CALL_OW 488
28977: PUSH
28978: LD_VAR 0 9
28982: PUSH
28983: LD_VAR 0 10
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_VAR 0 7
28996: IN
28997: NOT
28998: AND
28999: PUSH
29000: LD_VAR 0 9
29004: PPUSH
29005: LD_VAR 0 10
29009: PPUSH
29010: CALL_OW 458
29014: NOT
29015: AND
29016: IFFALSE 29058
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29018: LD_ADDR_VAR 0 7
29022: PUSH
29023: LD_VAR 0 7
29027: PPUSH
29028: LD_VAR 0 7
29032: PUSH
29033: LD_INT 1
29035: PLUS
29036: PPUSH
29037: LD_VAR 0 9
29041: PUSH
29042: LD_VAR 0 10
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PPUSH
29051: CALL_OW 1
29055: ST_TO_ADDR
29056: GO 29072
// i := i - 1 ;
29058: LD_ADDR_VAR 0 5
29062: PUSH
29063: LD_VAR 0 5
29067: PUSH
29068: LD_INT 1
29070: MINUS
29071: ST_TO_ADDR
// end ;
29072: GO 28878
29074: POP
29075: POP
// for i in tmp do
29076: LD_ADDR_VAR 0 5
29080: PUSH
29081: LD_VAR 0 7
29085: PUSH
29086: FOR_IN
29087: IFFALSE 29125
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29089: LD_VAR 0 1
29093: PPUSH
29094: LD_VAR 0 5
29098: PUSH
29099: LD_INT 1
29101: ARRAY
29102: PPUSH
29103: LD_VAR 0 5
29107: PUSH
29108: LD_INT 2
29110: ARRAY
29111: PPUSH
29112: CALL 28071 0 3
29116: NOT
29117: IFFALSE 29123
// exit ;
29119: POP
29120: POP
29121: GO 29127
29123: GO 29086
29125: POP
29126: POP
// end ;
29127: LD_VAR 0 4
29131: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29132: LD_INT 0
29134: PPUSH
29135: PPUSH
29136: PPUSH
29137: PPUSH
29138: PPUSH
29139: PPUSH
29140: PPUSH
// if not GetClass ( unit ) = class_sniper then
29141: LD_VAR 0 1
29145: PPUSH
29146: CALL_OW 257
29150: PUSH
29151: LD_INT 5
29153: EQUAL
29154: NOT
29155: IFFALSE 29159
// exit ;
29157: GO 29547
// dist := 8 ;
29159: LD_ADDR_VAR 0 5
29163: PUSH
29164: LD_INT 8
29166: ST_TO_ADDR
// viewRange := 12 ;
29167: LD_ADDR_VAR 0 7
29171: PUSH
29172: LD_INT 12
29174: ST_TO_ADDR
// side := GetSide ( unit ) ;
29175: LD_ADDR_VAR 0 6
29179: PUSH
29180: LD_VAR 0 1
29184: PPUSH
29185: CALL_OW 255
29189: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29190: LD_INT 61
29192: PPUSH
29193: LD_VAR 0 6
29197: PPUSH
29198: CALL_OW 321
29202: PUSH
29203: LD_INT 2
29205: EQUAL
29206: IFFALSE 29216
// viewRange := 16 ;
29208: LD_ADDR_VAR 0 7
29212: PUSH
29213: LD_INT 16
29215: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29216: LD_VAR 0 1
29220: PPUSH
29221: LD_VAR 0 2
29225: PPUSH
29226: LD_VAR 0 3
29230: PPUSH
29231: CALL_OW 297
29235: PUSH
29236: LD_VAR 0 5
29240: GREATER
29241: IFFALSE 29320
// begin ComMoveXY ( unit , x , y ) ;
29243: LD_VAR 0 1
29247: PPUSH
29248: LD_VAR 0 2
29252: PPUSH
29253: LD_VAR 0 3
29257: PPUSH
29258: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29262: LD_INT 35
29264: PPUSH
29265: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29269: LD_VAR 0 1
29273: PPUSH
29274: LD_VAR 0 2
29278: PPUSH
29279: LD_VAR 0 3
29283: PPUSH
29284: CALL 65829 0 3
29288: NOT
29289: IFFALSE 29293
// exit ;
29291: GO 29547
// until GetDistUnitXY ( unit , x , y ) < dist ;
29293: LD_VAR 0 1
29297: PPUSH
29298: LD_VAR 0 2
29302: PPUSH
29303: LD_VAR 0 3
29307: PPUSH
29308: CALL_OW 297
29312: PUSH
29313: LD_VAR 0 5
29317: LESS
29318: IFFALSE 29262
// end ; ComTurnXY ( unit , x , y ) ;
29320: LD_VAR 0 1
29324: PPUSH
29325: LD_VAR 0 2
29329: PPUSH
29330: LD_VAR 0 3
29334: PPUSH
29335: CALL_OW 118
// wait ( 5 ) ;
29339: LD_INT 5
29341: PPUSH
29342: CALL_OW 67
// _d := GetDir ( unit ) ;
29346: LD_ADDR_VAR 0 10
29350: PUSH
29351: LD_VAR 0 1
29355: PPUSH
29356: CALL_OW 254
29360: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29361: LD_ADDR_VAR 0 8
29365: PUSH
29366: LD_VAR 0 1
29370: PPUSH
29371: CALL_OW 250
29375: PPUSH
29376: LD_VAR 0 10
29380: PPUSH
29381: LD_VAR 0 5
29385: PPUSH
29386: CALL_OW 272
29390: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29391: LD_ADDR_VAR 0 9
29395: PUSH
29396: LD_VAR 0 1
29400: PPUSH
29401: CALL_OW 251
29405: PPUSH
29406: LD_VAR 0 10
29410: PPUSH
29411: LD_VAR 0 5
29415: PPUSH
29416: CALL_OW 273
29420: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29421: LD_VAR 0 8
29425: PPUSH
29426: LD_VAR 0 9
29430: PPUSH
29431: CALL_OW 488
29435: NOT
29436: IFFALSE 29440
// exit ;
29438: GO 29547
// ComAnimCustom ( unit , 1 ) ;
29440: LD_VAR 0 1
29444: PPUSH
29445: LD_INT 1
29447: PPUSH
29448: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29452: LD_VAR 0 8
29456: PPUSH
29457: LD_VAR 0 9
29461: PPUSH
29462: LD_VAR 0 6
29466: PPUSH
29467: LD_VAR 0 7
29471: PPUSH
29472: CALL_OW 330
// repeat wait ( 1 ) ;
29476: LD_INT 1
29478: PPUSH
29479: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29483: LD_VAR 0 1
29487: PPUSH
29488: CALL_OW 316
29492: PUSH
29493: LD_VAR 0 1
29497: PPUSH
29498: CALL_OW 314
29502: OR
29503: PUSH
29504: LD_VAR 0 1
29508: PPUSH
29509: CALL_OW 302
29513: NOT
29514: OR
29515: PUSH
29516: LD_VAR 0 1
29520: PPUSH
29521: CALL_OW 301
29525: OR
29526: IFFALSE 29476
// RemoveSeeing ( _x , _y , side ) ;
29528: LD_VAR 0 8
29532: PPUSH
29533: LD_VAR 0 9
29537: PPUSH
29538: LD_VAR 0 6
29542: PPUSH
29543: CALL_OW 331
// end ; end_of_file
29547: LD_VAR 0 4
29551: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29552: LD_INT 0
29554: PPUSH
29555: PPUSH
// if exist_mode then
29556: LD_VAR 0 2
29560: IFFALSE 29585
// unit := CreateCharacter ( prefix & ident ) else
29562: LD_ADDR_VAR 0 5
29566: PUSH
29567: LD_VAR 0 3
29571: PUSH
29572: LD_VAR 0 1
29576: STR
29577: PPUSH
29578: CALL_OW 34
29582: ST_TO_ADDR
29583: GO 29600
// unit := NewCharacter ( ident ) ;
29585: LD_ADDR_VAR 0 5
29589: PUSH
29590: LD_VAR 0 1
29594: PPUSH
29595: CALL_OW 25
29599: ST_TO_ADDR
// result := unit ;
29600: LD_ADDR_VAR 0 4
29604: PUSH
29605: LD_VAR 0 5
29609: ST_TO_ADDR
// end ;
29610: LD_VAR 0 4
29614: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29615: LD_INT 0
29617: PPUSH
29618: PPUSH
// if not side or not nation then
29619: LD_VAR 0 1
29623: NOT
29624: PUSH
29625: LD_VAR 0 2
29629: NOT
29630: OR
29631: IFFALSE 29635
// exit ;
29633: GO 30403
// case nation of nation_american :
29635: LD_VAR 0 2
29639: PUSH
29640: LD_INT 1
29642: DOUBLE
29643: EQUAL
29644: IFTRUE 29648
29646: GO 29862
29648: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29649: LD_ADDR_VAR 0 4
29653: PUSH
29654: LD_INT 35
29656: PUSH
29657: LD_INT 45
29659: PUSH
29660: LD_INT 46
29662: PUSH
29663: LD_INT 47
29665: PUSH
29666: LD_INT 82
29668: PUSH
29669: LD_INT 83
29671: PUSH
29672: LD_INT 84
29674: PUSH
29675: LD_INT 85
29677: PUSH
29678: LD_INT 86
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: LD_INT 2
29686: PUSH
29687: LD_INT 6
29689: PUSH
29690: LD_INT 15
29692: PUSH
29693: LD_INT 16
29695: PUSH
29696: LD_INT 7
29698: PUSH
29699: LD_INT 12
29701: PUSH
29702: LD_INT 13
29704: PUSH
29705: LD_INT 10
29707: PUSH
29708: LD_INT 14
29710: PUSH
29711: LD_INT 20
29713: PUSH
29714: LD_INT 21
29716: PUSH
29717: LD_INT 22
29719: PUSH
29720: LD_INT 25
29722: PUSH
29723: LD_INT 32
29725: PUSH
29726: LD_INT 27
29728: PUSH
29729: LD_INT 36
29731: PUSH
29732: LD_INT 69
29734: PUSH
29735: LD_INT 39
29737: PUSH
29738: LD_INT 34
29740: PUSH
29741: LD_INT 40
29743: PUSH
29744: LD_INT 48
29746: PUSH
29747: LD_INT 49
29749: PUSH
29750: LD_INT 50
29752: PUSH
29753: LD_INT 51
29755: PUSH
29756: LD_INT 52
29758: PUSH
29759: LD_INT 53
29761: PUSH
29762: LD_INT 54
29764: PUSH
29765: LD_INT 55
29767: PUSH
29768: LD_INT 56
29770: PUSH
29771: LD_INT 57
29773: PUSH
29774: LD_INT 58
29776: PUSH
29777: LD_INT 59
29779: PUSH
29780: LD_INT 60
29782: PUSH
29783: LD_INT 61
29785: PUSH
29786: LD_INT 62
29788: PUSH
29789: LD_INT 80
29791: PUSH
29792: LD_INT 82
29794: PUSH
29795: LD_INT 83
29797: PUSH
29798: LD_INT 84
29800: PUSH
29801: LD_INT 85
29803: PUSH
29804: LD_INT 86
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: ST_TO_ADDR
29860: GO 30327
29862: LD_INT 2
29864: DOUBLE
29865: EQUAL
29866: IFTRUE 29870
29868: GO 30096
29870: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29871: LD_ADDR_VAR 0 4
29875: PUSH
29876: LD_INT 35
29878: PUSH
29879: LD_INT 45
29881: PUSH
29882: LD_INT 46
29884: PUSH
29885: LD_INT 47
29887: PUSH
29888: LD_INT 82
29890: PUSH
29891: LD_INT 83
29893: PUSH
29894: LD_INT 84
29896: PUSH
29897: LD_INT 85
29899: PUSH
29900: LD_INT 87
29902: PUSH
29903: LD_INT 70
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: LD_INT 11
29911: PUSH
29912: LD_INT 3
29914: PUSH
29915: LD_INT 4
29917: PUSH
29918: LD_INT 5
29920: PUSH
29921: LD_INT 6
29923: PUSH
29924: LD_INT 15
29926: PUSH
29927: LD_INT 18
29929: PUSH
29930: LD_INT 7
29932: PUSH
29933: LD_INT 17
29935: PUSH
29936: LD_INT 8
29938: PUSH
29939: LD_INT 20
29941: PUSH
29942: LD_INT 21
29944: PUSH
29945: LD_INT 22
29947: PUSH
29948: LD_INT 72
29950: PUSH
29951: LD_INT 26
29953: PUSH
29954: LD_INT 69
29956: PUSH
29957: LD_INT 39
29959: PUSH
29960: LD_INT 40
29962: PUSH
29963: LD_INT 41
29965: PUSH
29966: LD_INT 42
29968: PUSH
29969: LD_INT 43
29971: PUSH
29972: LD_INT 48
29974: PUSH
29975: LD_INT 49
29977: PUSH
29978: LD_INT 50
29980: PUSH
29981: LD_INT 51
29983: PUSH
29984: LD_INT 52
29986: PUSH
29987: LD_INT 53
29989: PUSH
29990: LD_INT 54
29992: PUSH
29993: LD_INT 55
29995: PUSH
29996: LD_INT 56
29998: PUSH
29999: LD_INT 60
30001: PUSH
30002: LD_INT 61
30004: PUSH
30005: LD_INT 62
30007: PUSH
30008: LD_INT 66
30010: PUSH
30011: LD_INT 67
30013: PUSH
30014: LD_INT 68
30016: PUSH
30017: LD_INT 81
30019: PUSH
30020: LD_INT 82
30022: PUSH
30023: LD_INT 83
30025: PUSH
30026: LD_INT 84
30028: PUSH
30029: LD_INT 85
30031: PUSH
30032: LD_INT 87
30034: PUSH
30035: LD_INT 88
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: ST_TO_ADDR
30094: GO 30327
30096: LD_INT 3
30098: DOUBLE
30099: EQUAL
30100: IFTRUE 30104
30102: GO 30326
30104: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30105: LD_ADDR_VAR 0 4
30109: PUSH
30110: LD_INT 46
30112: PUSH
30113: LD_INT 47
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: LD_INT 2
30121: PUSH
30122: LD_INT 82
30124: PUSH
30125: LD_INT 83
30127: PUSH
30128: LD_INT 84
30130: PUSH
30131: LD_INT 85
30133: PUSH
30134: LD_INT 86
30136: PUSH
30137: LD_INT 11
30139: PUSH
30140: LD_INT 9
30142: PUSH
30143: LD_INT 20
30145: PUSH
30146: LD_INT 19
30148: PUSH
30149: LD_INT 21
30151: PUSH
30152: LD_INT 24
30154: PUSH
30155: LD_INT 22
30157: PUSH
30158: LD_INT 25
30160: PUSH
30161: LD_INT 28
30163: PUSH
30164: LD_INT 29
30166: PUSH
30167: LD_INT 30
30169: PUSH
30170: LD_INT 31
30172: PUSH
30173: LD_INT 37
30175: PUSH
30176: LD_INT 38
30178: PUSH
30179: LD_INT 32
30181: PUSH
30182: LD_INT 27
30184: PUSH
30185: LD_INT 33
30187: PUSH
30188: LD_INT 69
30190: PUSH
30191: LD_INT 39
30193: PUSH
30194: LD_INT 34
30196: PUSH
30197: LD_INT 40
30199: PUSH
30200: LD_INT 71
30202: PUSH
30203: LD_INT 23
30205: PUSH
30206: LD_INT 44
30208: PUSH
30209: LD_INT 48
30211: PUSH
30212: LD_INT 49
30214: PUSH
30215: LD_INT 50
30217: PUSH
30218: LD_INT 51
30220: PUSH
30221: LD_INT 52
30223: PUSH
30224: LD_INT 53
30226: PUSH
30227: LD_INT 54
30229: PUSH
30230: LD_INT 55
30232: PUSH
30233: LD_INT 56
30235: PUSH
30236: LD_INT 57
30238: PUSH
30239: LD_INT 58
30241: PUSH
30242: LD_INT 59
30244: PUSH
30245: LD_INT 63
30247: PUSH
30248: LD_INT 64
30250: PUSH
30251: LD_INT 65
30253: PUSH
30254: LD_INT 82
30256: PUSH
30257: LD_INT 83
30259: PUSH
30260: LD_INT 84
30262: PUSH
30263: LD_INT 85
30265: PUSH
30266: LD_INT 86
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: ST_TO_ADDR
30324: GO 30327
30326: POP
// if state > - 1 and state < 3 then
30327: LD_VAR 0 3
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: GREATER
30336: PUSH
30337: LD_VAR 0 3
30341: PUSH
30342: LD_INT 3
30344: LESS
30345: AND
30346: IFFALSE 30403
// for i in result do
30348: LD_ADDR_VAR 0 5
30352: PUSH
30353: LD_VAR 0 4
30357: PUSH
30358: FOR_IN
30359: IFFALSE 30401
// if GetTech ( i , side ) <> state then
30361: LD_VAR 0 5
30365: PPUSH
30366: LD_VAR 0 1
30370: PPUSH
30371: CALL_OW 321
30375: PUSH
30376: LD_VAR 0 3
30380: NONEQUAL
30381: IFFALSE 30399
// result := result diff i ;
30383: LD_ADDR_VAR 0 4
30387: PUSH
30388: LD_VAR 0 4
30392: PUSH
30393: LD_VAR 0 5
30397: DIFF
30398: ST_TO_ADDR
30399: GO 30358
30401: POP
30402: POP
// end ;
30403: LD_VAR 0 4
30407: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30408: LD_INT 0
30410: PPUSH
30411: PPUSH
30412: PPUSH
// result := true ;
30413: LD_ADDR_VAR 0 3
30417: PUSH
30418: LD_INT 1
30420: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30421: LD_ADDR_VAR 0 5
30425: PUSH
30426: LD_VAR 0 2
30430: PPUSH
30431: CALL_OW 480
30435: ST_TO_ADDR
// if not tmp then
30436: LD_VAR 0 5
30440: NOT
30441: IFFALSE 30445
// exit ;
30443: GO 30494
// for i in tmp do
30445: LD_ADDR_VAR 0 4
30449: PUSH
30450: LD_VAR 0 5
30454: PUSH
30455: FOR_IN
30456: IFFALSE 30492
// if GetTech ( i , side ) <> state_researched then
30458: LD_VAR 0 4
30462: PPUSH
30463: LD_VAR 0 1
30467: PPUSH
30468: CALL_OW 321
30472: PUSH
30473: LD_INT 2
30475: NONEQUAL
30476: IFFALSE 30490
// begin result := false ;
30478: LD_ADDR_VAR 0 3
30482: PUSH
30483: LD_INT 0
30485: ST_TO_ADDR
// exit ;
30486: POP
30487: POP
30488: GO 30494
// end ;
30490: GO 30455
30492: POP
30493: POP
// end ;
30494: LD_VAR 0 3
30498: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30499: LD_INT 0
30501: PPUSH
30502: PPUSH
30503: PPUSH
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
30508: PPUSH
30509: PPUSH
30510: PPUSH
30511: PPUSH
30512: PPUSH
30513: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30514: LD_VAR 0 1
30518: NOT
30519: PUSH
30520: LD_VAR 0 1
30524: PPUSH
30525: CALL_OW 257
30529: PUSH
30530: LD_INT 9
30532: NONEQUAL
30533: OR
30534: IFFALSE 30538
// exit ;
30536: GO 31111
// side := GetSide ( unit ) ;
30538: LD_ADDR_VAR 0 9
30542: PUSH
30543: LD_VAR 0 1
30547: PPUSH
30548: CALL_OW 255
30552: ST_TO_ADDR
// tech_space := tech_spacanom ;
30553: LD_ADDR_VAR 0 12
30557: PUSH
30558: LD_INT 29
30560: ST_TO_ADDR
// tech_time := tech_taurad ;
30561: LD_ADDR_VAR 0 13
30565: PUSH
30566: LD_INT 28
30568: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30569: LD_ADDR_VAR 0 11
30573: PUSH
30574: LD_VAR 0 1
30578: PPUSH
30579: CALL_OW 310
30583: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30584: LD_VAR 0 11
30588: PPUSH
30589: CALL_OW 247
30593: PUSH
30594: LD_INT 2
30596: EQUAL
30597: IFFALSE 30601
// exit ;
30599: GO 31111
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30601: LD_ADDR_VAR 0 8
30605: PUSH
30606: LD_INT 81
30608: PUSH
30609: LD_VAR 0 9
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 3
30620: PUSH
30621: LD_INT 21
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PPUSH
30639: CALL_OW 69
30643: ST_TO_ADDR
// if not tmp then
30644: LD_VAR 0 8
30648: NOT
30649: IFFALSE 30653
// exit ;
30651: GO 31111
// if in_unit then
30653: LD_VAR 0 11
30657: IFFALSE 30681
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30659: LD_ADDR_VAR 0 10
30663: PUSH
30664: LD_VAR 0 8
30668: PPUSH
30669: LD_VAR 0 11
30673: PPUSH
30674: CALL_OW 74
30678: ST_TO_ADDR
30679: GO 30701
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30681: LD_ADDR_VAR 0 10
30685: PUSH
30686: LD_VAR 0 8
30690: PPUSH
30691: LD_VAR 0 1
30695: PPUSH
30696: CALL_OW 74
30700: ST_TO_ADDR
// if not enemy then
30701: LD_VAR 0 10
30705: NOT
30706: IFFALSE 30710
// exit ;
30708: GO 31111
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30710: LD_VAR 0 11
30714: PUSH
30715: LD_VAR 0 11
30719: PPUSH
30720: LD_VAR 0 10
30724: PPUSH
30725: CALL_OW 296
30729: PUSH
30730: LD_INT 13
30732: GREATER
30733: AND
30734: PUSH
30735: LD_VAR 0 1
30739: PPUSH
30740: LD_VAR 0 10
30744: PPUSH
30745: CALL_OW 296
30749: PUSH
30750: LD_INT 12
30752: GREATER
30753: OR
30754: IFFALSE 30758
// exit ;
30756: GO 31111
// missile := [ 1 ] ;
30758: LD_ADDR_VAR 0 14
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: EMPTY
30767: LIST
30768: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30769: LD_VAR 0 9
30773: PPUSH
30774: LD_VAR 0 12
30778: PPUSH
30779: CALL_OW 325
30783: IFFALSE 30812
// missile := Replace ( missile , missile + 1 , 2 ) ;
30785: LD_ADDR_VAR 0 14
30789: PUSH
30790: LD_VAR 0 14
30794: PPUSH
30795: LD_VAR 0 14
30799: PUSH
30800: LD_INT 1
30802: PLUS
30803: PPUSH
30804: LD_INT 2
30806: PPUSH
30807: CALL_OW 1
30811: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30812: LD_VAR 0 9
30816: PPUSH
30817: LD_VAR 0 13
30821: PPUSH
30822: CALL_OW 325
30826: PUSH
30827: LD_VAR 0 10
30831: PPUSH
30832: CALL_OW 255
30836: PPUSH
30837: LD_VAR 0 13
30841: PPUSH
30842: CALL_OW 325
30846: NOT
30847: AND
30848: IFFALSE 30877
// missile := Replace ( missile , missile + 1 , 3 ) ;
30850: LD_ADDR_VAR 0 14
30854: PUSH
30855: LD_VAR 0 14
30859: PPUSH
30860: LD_VAR 0 14
30864: PUSH
30865: LD_INT 1
30867: PLUS
30868: PPUSH
30869: LD_INT 3
30871: PPUSH
30872: CALL_OW 1
30876: ST_TO_ADDR
// if missile < 2 then
30877: LD_VAR 0 14
30881: PUSH
30882: LD_INT 2
30884: LESS
30885: IFFALSE 30889
// exit ;
30887: GO 31111
// x := GetX ( enemy ) ;
30889: LD_ADDR_VAR 0 4
30893: PUSH
30894: LD_VAR 0 10
30898: PPUSH
30899: CALL_OW 250
30903: ST_TO_ADDR
// y := GetY ( enemy ) ;
30904: LD_ADDR_VAR 0 5
30908: PUSH
30909: LD_VAR 0 10
30913: PPUSH
30914: CALL_OW 251
30918: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30919: LD_ADDR_VAR 0 6
30923: PUSH
30924: LD_VAR 0 4
30928: PUSH
30929: LD_INT 1
30931: NEG
30932: PPUSH
30933: LD_INT 1
30935: PPUSH
30936: CALL_OW 12
30940: PLUS
30941: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30942: LD_ADDR_VAR 0 7
30946: PUSH
30947: LD_VAR 0 5
30951: PUSH
30952: LD_INT 1
30954: NEG
30955: PPUSH
30956: LD_INT 1
30958: PPUSH
30959: CALL_OW 12
30963: PLUS
30964: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30965: LD_VAR 0 6
30969: PPUSH
30970: LD_VAR 0 7
30974: PPUSH
30975: CALL_OW 488
30979: NOT
30980: IFFALSE 31002
// begin _x := x ;
30982: LD_ADDR_VAR 0 6
30986: PUSH
30987: LD_VAR 0 4
30991: ST_TO_ADDR
// _y := y ;
30992: LD_ADDR_VAR 0 7
30996: PUSH
30997: LD_VAR 0 5
31001: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31002: LD_ADDR_VAR 0 3
31006: PUSH
31007: LD_INT 1
31009: PPUSH
31010: LD_VAR 0 14
31014: PPUSH
31015: CALL_OW 12
31019: ST_TO_ADDR
// case i of 1 :
31020: LD_VAR 0 3
31024: PUSH
31025: LD_INT 1
31027: DOUBLE
31028: EQUAL
31029: IFTRUE 31033
31031: GO 31050
31033: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31034: LD_VAR 0 1
31038: PPUSH
31039: LD_VAR 0 10
31043: PPUSH
31044: CALL_OW 115
31048: GO 31111
31050: LD_INT 2
31052: DOUBLE
31053: EQUAL
31054: IFTRUE 31058
31056: GO 31080
31058: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31059: LD_VAR 0 1
31063: PPUSH
31064: LD_VAR 0 6
31068: PPUSH
31069: LD_VAR 0 7
31073: PPUSH
31074: CALL_OW 153
31078: GO 31111
31080: LD_INT 3
31082: DOUBLE
31083: EQUAL
31084: IFTRUE 31088
31086: GO 31110
31088: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31089: LD_VAR 0 1
31093: PPUSH
31094: LD_VAR 0 6
31098: PPUSH
31099: LD_VAR 0 7
31103: PPUSH
31104: CALL_OW 154
31108: GO 31111
31110: POP
// end ;
31111: LD_VAR 0 2
31115: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31116: LD_INT 0
31118: PPUSH
31119: PPUSH
31120: PPUSH
31121: PPUSH
31122: PPUSH
31123: PPUSH
// if not unit or not building then
31124: LD_VAR 0 1
31128: NOT
31129: PUSH
31130: LD_VAR 0 2
31134: NOT
31135: OR
31136: IFFALSE 31140
// exit ;
31138: GO 31298
// x := GetX ( building ) ;
31140: LD_ADDR_VAR 0 5
31144: PUSH
31145: LD_VAR 0 2
31149: PPUSH
31150: CALL_OW 250
31154: ST_TO_ADDR
// y := GetY ( building ) ;
31155: LD_ADDR_VAR 0 6
31159: PUSH
31160: LD_VAR 0 2
31164: PPUSH
31165: CALL_OW 251
31169: ST_TO_ADDR
// for i = 0 to 5 do
31170: LD_ADDR_VAR 0 4
31174: PUSH
31175: DOUBLE
31176: LD_INT 0
31178: DEC
31179: ST_TO_ADDR
31180: LD_INT 5
31182: PUSH
31183: FOR_TO
31184: IFFALSE 31296
// begin _x := ShiftX ( x , i , 3 ) ;
31186: LD_ADDR_VAR 0 7
31190: PUSH
31191: LD_VAR 0 5
31195: PPUSH
31196: LD_VAR 0 4
31200: PPUSH
31201: LD_INT 3
31203: PPUSH
31204: CALL_OW 272
31208: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31209: LD_ADDR_VAR 0 8
31213: PUSH
31214: LD_VAR 0 6
31218: PPUSH
31219: LD_VAR 0 4
31223: PPUSH
31224: LD_INT 3
31226: PPUSH
31227: CALL_OW 273
31231: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31232: LD_VAR 0 7
31236: PPUSH
31237: LD_VAR 0 8
31241: PPUSH
31242: CALL_OW 488
31246: NOT
31247: IFFALSE 31251
// continue ;
31249: GO 31183
// if HexInfo ( _x , _y ) = 0 then
31251: LD_VAR 0 7
31255: PPUSH
31256: LD_VAR 0 8
31260: PPUSH
31261: CALL_OW 428
31265: PUSH
31266: LD_INT 0
31268: EQUAL
31269: IFFALSE 31294
// begin ComMoveXY ( unit , _x , _y ) ;
31271: LD_VAR 0 1
31275: PPUSH
31276: LD_VAR 0 7
31280: PPUSH
31281: LD_VAR 0 8
31285: PPUSH
31286: CALL_OW 111
// exit ;
31290: POP
31291: POP
31292: GO 31298
// end ; end ;
31294: GO 31183
31296: POP
31297: POP
// end ;
31298: LD_VAR 0 3
31302: RET
// export function ScanBase ( side , base_area ) ; begin
31303: LD_INT 0
31305: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31306: LD_ADDR_VAR 0 3
31310: PUSH
31311: LD_VAR 0 2
31315: PPUSH
31316: LD_INT 81
31318: PUSH
31319: LD_VAR 0 1
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PPUSH
31328: CALL_OW 70
31332: ST_TO_ADDR
// end ;
31333: LD_VAR 0 3
31337: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31338: LD_INT 0
31340: PPUSH
31341: PPUSH
31342: PPUSH
31343: PPUSH
// result := false ;
31344: LD_ADDR_VAR 0 2
31348: PUSH
31349: LD_INT 0
31351: ST_TO_ADDR
// side := GetSide ( unit ) ;
31352: LD_ADDR_VAR 0 3
31356: PUSH
31357: LD_VAR 0 1
31361: PPUSH
31362: CALL_OW 255
31366: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31367: LD_ADDR_VAR 0 4
31371: PUSH
31372: LD_VAR 0 1
31376: PPUSH
31377: CALL_OW 248
31381: ST_TO_ADDR
// case nat of 1 :
31382: LD_VAR 0 4
31386: PUSH
31387: LD_INT 1
31389: DOUBLE
31390: EQUAL
31391: IFTRUE 31395
31393: GO 31406
31395: POP
// tech := tech_lassight ; 2 :
31396: LD_ADDR_VAR 0 5
31400: PUSH
31401: LD_INT 12
31403: ST_TO_ADDR
31404: GO 31445
31406: LD_INT 2
31408: DOUBLE
31409: EQUAL
31410: IFTRUE 31414
31412: GO 31425
31414: POP
// tech := tech_mortar ; 3 :
31415: LD_ADDR_VAR 0 5
31419: PUSH
31420: LD_INT 41
31422: ST_TO_ADDR
31423: GO 31445
31425: LD_INT 3
31427: DOUBLE
31428: EQUAL
31429: IFTRUE 31433
31431: GO 31444
31433: POP
// tech := tech_bazooka ; end ;
31434: LD_ADDR_VAR 0 5
31438: PUSH
31439: LD_INT 44
31441: ST_TO_ADDR
31442: GO 31445
31444: POP
// if Researched ( side , tech ) then
31445: LD_VAR 0 3
31449: PPUSH
31450: LD_VAR 0 5
31454: PPUSH
31455: CALL_OW 325
31459: IFFALSE 31486
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31461: LD_ADDR_VAR 0 2
31465: PUSH
31466: LD_INT 5
31468: PUSH
31469: LD_INT 8
31471: PUSH
31472: LD_INT 9
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: LIST
31479: PUSH
31480: LD_VAR 0 4
31484: ARRAY
31485: ST_TO_ADDR
// end ;
31486: LD_VAR 0 2
31490: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31491: LD_INT 0
31493: PPUSH
31494: PPUSH
31495: PPUSH
// if not mines then
31496: LD_VAR 0 2
31500: NOT
31501: IFFALSE 31505
// exit ;
31503: GO 31649
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31505: LD_ADDR_VAR 0 5
31509: PUSH
31510: LD_INT 81
31512: PUSH
31513: LD_VAR 0 1
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 3
31524: PUSH
31525: LD_INT 21
31527: PUSH
31528: LD_INT 3
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PPUSH
31543: CALL_OW 69
31547: ST_TO_ADDR
// for i in mines do
31548: LD_ADDR_VAR 0 4
31552: PUSH
31553: LD_VAR 0 2
31557: PUSH
31558: FOR_IN
31559: IFFALSE 31647
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31561: LD_VAR 0 4
31565: PUSH
31566: LD_INT 1
31568: ARRAY
31569: PPUSH
31570: LD_VAR 0 4
31574: PUSH
31575: LD_INT 2
31577: ARRAY
31578: PPUSH
31579: CALL_OW 458
31583: NOT
31584: IFFALSE 31588
// continue ;
31586: GO 31558
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31588: LD_VAR 0 4
31592: PUSH
31593: LD_INT 1
31595: ARRAY
31596: PPUSH
31597: LD_VAR 0 4
31601: PUSH
31602: LD_INT 2
31604: ARRAY
31605: PPUSH
31606: CALL_OW 428
31610: PUSH
31611: LD_VAR 0 5
31615: IN
31616: IFFALSE 31645
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31618: LD_VAR 0 4
31622: PUSH
31623: LD_INT 1
31625: ARRAY
31626: PPUSH
31627: LD_VAR 0 4
31631: PUSH
31632: LD_INT 2
31634: ARRAY
31635: PPUSH
31636: LD_VAR 0 1
31640: PPUSH
31641: CALL_OW 456
// end ;
31645: GO 31558
31647: POP
31648: POP
// end ;
31649: LD_VAR 0 3
31653: RET
// export function Count ( array ) ; var i ; begin
31654: LD_INT 0
31656: PPUSH
31657: PPUSH
// result := 0 ;
31658: LD_ADDR_VAR 0 2
31662: PUSH
31663: LD_INT 0
31665: ST_TO_ADDR
// for i in array do
31666: LD_ADDR_VAR 0 3
31670: PUSH
31671: LD_VAR 0 1
31675: PUSH
31676: FOR_IN
31677: IFFALSE 31701
// if i then
31679: LD_VAR 0 3
31683: IFFALSE 31699
// result := result + 1 ;
31685: LD_ADDR_VAR 0 2
31689: PUSH
31690: LD_VAR 0 2
31694: PUSH
31695: LD_INT 1
31697: PLUS
31698: ST_TO_ADDR
31699: GO 31676
31701: POP
31702: POP
// end ;
31703: LD_VAR 0 2
31707: RET
// export function IsEmpty ( building ) ; begin
31708: LD_INT 0
31710: PPUSH
// if not building then
31711: LD_VAR 0 1
31715: NOT
31716: IFFALSE 31720
// exit ;
31718: GO 31763
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31720: LD_ADDR_VAR 0 2
31724: PUSH
31725: LD_VAR 0 1
31729: PUSH
31730: LD_INT 22
31732: PUSH
31733: LD_VAR 0 1
31737: PPUSH
31738: CALL_OW 255
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 58
31749: PUSH
31750: EMPTY
31751: LIST
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PPUSH
31757: CALL_OW 69
31761: IN
31762: ST_TO_ADDR
// end ;
31763: LD_VAR 0 2
31767: RET
// export function IsNotFull ( building ) ; var places ; begin
31768: LD_INT 0
31770: PPUSH
31771: PPUSH
// if not building then
31772: LD_VAR 0 1
31776: NOT
31777: IFFALSE 31781
// exit ;
31779: GO 31952
// result := false ;
31781: LD_ADDR_VAR 0 2
31785: PUSH
31786: LD_INT 0
31788: ST_TO_ADDR
// places := 0 ;
31789: LD_ADDR_VAR 0 3
31793: PUSH
31794: LD_INT 0
31796: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
31797: LD_VAR 0 1
31801: PPUSH
31802: CALL_OW 266
31806: PUSH
31807: LD_INT 0
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31869
31813: LD_INT 1
31815: DOUBLE
31816: EQUAL
31817: IFTRUE 31869
31819: LD_INT 6
31821: DOUBLE
31822: EQUAL
31823: IFTRUE 31869
31825: LD_INT 7
31827: DOUBLE
31828: EQUAL
31829: IFTRUE 31869
31831: LD_INT 8
31833: DOUBLE
31834: EQUAL
31835: IFTRUE 31869
31837: LD_INT 4
31839: DOUBLE
31840: EQUAL
31841: IFTRUE 31869
31843: LD_INT 5
31845: DOUBLE
31846: EQUAL
31847: IFTRUE 31869
31849: LD_INT 2
31851: DOUBLE
31852: EQUAL
31853: IFTRUE 31869
31855: LD_INT 3
31857: DOUBLE
31858: EQUAL
31859: IFTRUE 31869
31861: LD_INT 35
31863: DOUBLE
31864: EQUAL
31865: IFTRUE 31869
31867: GO 31880
31869: POP
// places := 6 ; b_bunker , b_breastwork :
31870: LD_ADDR_VAR 0 3
31874: PUSH
31875: LD_INT 6
31877: ST_TO_ADDR
31878: GO 31925
31880: LD_INT 32
31882: DOUBLE
31883: EQUAL
31884: IFTRUE 31894
31886: LD_INT 31
31888: DOUBLE
31889: EQUAL
31890: IFTRUE 31894
31892: GO 31905
31894: POP
// places := 1 ; b_control_tower :
31895: LD_ADDR_VAR 0 3
31899: PUSH
31900: LD_INT 1
31902: ST_TO_ADDR
31903: GO 31925
31905: LD_INT 36
31907: DOUBLE
31908: EQUAL
31909: IFTRUE 31913
31911: GO 31924
31913: POP
// places := 3 ; end ;
31914: LD_ADDR_VAR 0 3
31918: PUSH
31919: LD_INT 3
31921: ST_TO_ADDR
31922: GO 31925
31924: POP
// if places then
31925: LD_VAR 0 3
31929: IFFALSE 31952
// result := UnitsInside ( building ) < places ;
31931: LD_ADDR_VAR 0 2
31935: PUSH
31936: LD_VAR 0 1
31940: PPUSH
31941: CALL_OW 313
31945: PUSH
31946: LD_VAR 0 3
31950: LESS
31951: ST_TO_ADDR
// end ;
31952: LD_VAR 0 2
31956: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31957: LD_INT 0
31959: PPUSH
31960: PPUSH
31961: PPUSH
31962: PPUSH
// tmp := [ ] ;
31963: LD_ADDR_VAR 0 3
31967: PUSH
31968: EMPTY
31969: ST_TO_ADDR
// list := [ ] ;
31970: LD_ADDR_VAR 0 5
31974: PUSH
31975: EMPTY
31976: ST_TO_ADDR
// for i = 16 to 25 do
31977: LD_ADDR_VAR 0 4
31981: PUSH
31982: DOUBLE
31983: LD_INT 16
31985: DEC
31986: ST_TO_ADDR
31987: LD_INT 25
31989: PUSH
31990: FOR_TO
31991: IFFALSE 32064
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31993: LD_ADDR_VAR 0 3
31997: PUSH
31998: LD_VAR 0 3
32002: PUSH
32003: LD_INT 22
32005: PUSH
32006: LD_VAR 0 1
32010: PPUSH
32011: CALL_OW 255
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 91
32022: PUSH
32023: LD_VAR 0 1
32027: PUSH
32028: LD_INT 6
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 30
32038: PUSH
32039: LD_VAR 0 4
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: PUSH
32053: EMPTY
32054: LIST
32055: PPUSH
32056: CALL_OW 69
32060: ADD
32061: ST_TO_ADDR
32062: GO 31990
32064: POP
32065: POP
// for i = 1 to tmp do
32066: LD_ADDR_VAR 0 4
32070: PUSH
32071: DOUBLE
32072: LD_INT 1
32074: DEC
32075: ST_TO_ADDR
32076: LD_VAR 0 3
32080: PUSH
32081: FOR_TO
32082: IFFALSE 32170
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32084: LD_ADDR_VAR 0 5
32088: PUSH
32089: LD_VAR 0 5
32093: PUSH
32094: LD_VAR 0 3
32098: PUSH
32099: LD_VAR 0 4
32103: ARRAY
32104: PPUSH
32105: CALL_OW 266
32109: PUSH
32110: LD_VAR 0 3
32114: PUSH
32115: LD_VAR 0 4
32119: ARRAY
32120: PPUSH
32121: CALL_OW 250
32125: PUSH
32126: LD_VAR 0 3
32130: PUSH
32131: LD_VAR 0 4
32135: ARRAY
32136: PPUSH
32137: CALL_OW 251
32141: PUSH
32142: LD_VAR 0 3
32146: PUSH
32147: LD_VAR 0 4
32151: ARRAY
32152: PPUSH
32153: CALL_OW 254
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: PUSH
32164: EMPTY
32165: LIST
32166: ADD
32167: ST_TO_ADDR
32168: GO 32081
32170: POP
32171: POP
// result := list ;
32172: LD_ADDR_VAR 0 2
32176: PUSH
32177: LD_VAR 0 5
32181: ST_TO_ADDR
// end ;
32182: LD_VAR 0 2
32186: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32187: LD_INT 0
32189: PPUSH
32190: PPUSH
32191: PPUSH
32192: PPUSH
32193: PPUSH
32194: PPUSH
32195: PPUSH
// if not factory then
32196: LD_VAR 0 1
32200: NOT
32201: IFFALSE 32205
// exit ;
32203: GO 32798
// if control = control_apeman then
32205: LD_VAR 0 4
32209: PUSH
32210: LD_INT 5
32212: EQUAL
32213: IFFALSE 32322
// begin tmp := UnitsInside ( factory ) ;
32215: LD_ADDR_VAR 0 8
32219: PUSH
32220: LD_VAR 0 1
32224: PPUSH
32225: CALL_OW 313
32229: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32230: LD_VAR 0 8
32234: PPUSH
32235: LD_INT 25
32237: PUSH
32238: LD_INT 12
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PPUSH
32245: CALL_OW 72
32249: NOT
32250: IFFALSE 32260
// control := control_manual ;
32252: LD_ADDR_VAR 0 4
32256: PUSH
32257: LD_INT 1
32259: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32260: LD_ADDR_VAR 0 8
32264: PUSH
32265: LD_VAR 0 1
32269: PPUSH
32270: CALL 31957 0 1
32274: ST_TO_ADDR
// if tmp then
32275: LD_VAR 0 8
32279: IFFALSE 32322
// begin for i in tmp do
32281: LD_ADDR_VAR 0 7
32285: PUSH
32286: LD_VAR 0 8
32290: PUSH
32291: FOR_IN
32292: IFFALSE 32320
// if i [ 1 ] = b_ext_radio then
32294: LD_VAR 0 7
32298: PUSH
32299: LD_INT 1
32301: ARRAY
32302: PUSH
32303: LD_INT 22
32305: EQUAL
32306: IFFALSE 32318
// begin control := control_remote ;
32308: LD_ADDR_VAR 0 4
32312: PUSH
32313: LD_INT 2
32315: ST_TO_ADDR
// break ;
32316: GO 32320
// end ;
32318: GO 32291
32320: POP
32321: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32322: LD_VAR 0 1
32326: PPUSH
32327: LD_VAR 0 2
32331: PPUSH
32332: LD_VAR 0 3
32336: PPUSH
32337: LD_VAR 0 4
32341: PPUSH
32342: LD_VAR 0 5
32346: PPUSH
32347: CALL_OW 448
32351: IFFALSE 32386
// begin result := [ chassis , engine , control , weapon ] ;
32353: LD_ADDR_VAR 0 6
32357: PUSH
32358: LD_VAR 0 2
32362: PUSH
32363: LD_VAR 0 3
32367: PUSH
32368: LD_VAR 0 4
32372: PUSH
32373: LD_VAR 0 5
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: ST_TO_ADDR
// exit ;
32384: GO 32798
// end ; _chassis := AvailableChassisList ( factory ) ;
32386: LD_ADDR_VAR 0 9
32390: PUSH
32391: LD_VAR 0 1
32395: PPUSH
32396: CALL_OW 475
32400: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32401: LD_ADDR_VAR 0 11
32405: PUSH
32406: LD_VAR 0 1
32410: PPUSH
32411: CALL_OW 476
32415: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32416: LD_ADDR_VAR 0 12
32420: PUSH
32421: LD_VAR 0 1
32425: PPUSH
32426: CALL_OW 477
32430: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32431: LD_ADDR_VAR 0 10
32435: PUSH
32436: LD_VAR 0 1
32440: PPUSH
32441: CALL_OW 478
32445: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32446: LD_VAR 0 9
32450: NOT
32451: PUSH
32452: LD_VAR 0 11
32456: NOT
32457: OR
32458: PUSH
32459: LD_VAR 0 12
32463: NOT
32464: OR
32465: PUSH
32466: LD_VAR 0 10
32470: NOT
32471: OR
32472: IFFALSE 32507
// begin result := [ chassis , engine , control , weapon ] ;
32474: LD_ADDR_VAR 0 6
32478: PUSH
32479: LD_VAR 0 2
32483: PUSH
32484: LD_VAR 0 3
32488: PUSH
32489: LD_VAR 0 4
32493: PUSH
32494: LD_VAR 0 5
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: ST_TO_ADDR
// exit ;
32505: GO 32798
// end ; if not chassis in _chassis then
32507: LD_VAR 0 2
32511: PUSH
32512: LD_VAR 0 9
32516: IN
32517: NOT
32518: IFFALSE 32544
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32520: LD_ADDR_VAR 0 2
32524: PUSH
32525: LD_VAR 0 9
32529: PUSH
32530: LD_INT 1
32532: PPUSH
32533: LD_VAR 0 9
32537: PPUSH
32538: CALL_OW 12
32542: ARRAY
32543: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32544: LD_VAR 0 2
32548: PPUSH
32549: LD_VAR 0 3
32553: PPUSH
32554: CALL 32803 0 2
32558: NOT
32559: IFFALSE 32618
// repeat engine := _engine [ 1 ] ;
32561: LD_ADDR_VAR 0 3
32565: PUSH
32566: LD_VAR 0 11
32570: PUSH
32571: LD_INT 1
32573: ARRAY
32574: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32575: LD_ADDR_VAR 0 11
32579: PUSH
32580: LD_VAR 0 11
32584: PPUSH
32585: LD_INT 1
32587: PPUSH
32588: CALL_OW 3
32592: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32593: LD_VAR 0 2
32597: PPUSH
32598: LD_VAR 0 3
32602: PPUSH
32603: CALL 32803 0 2
32607: PUSH
32608: LD_VAR 0 11
32612: PUSH
32613: EMPTY
32614: EQUAL
32615: OR
32616: IFFALSE 32561
// if not control in _control then
32618: LD_VAR 0 4
32622: PUSH
32623: LD_VAR 0 12
32627: IN
32628: NOT
32629: IFFALSE 32655
// control := _control [ rand ( 1 , _control ) ] ;
32631: LD_ADDR_VAR 0 4
32635: PUSH
32636: LD_VAR 0 12
32640: PUSH
32641: LD_INT 1
32643: PPUSH
32644: LD_VAR 0 12
32648: PPUSH
32649: CALL_OW 12
32653: ARRAY
32654: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32655: LD_VAR 0 2
32659: PPUSH
32660: LD_VAR 0 5
32664: PPUSH
32665: CALL 33023 0 2
32669: NOT
32670: IFFALSE 32729
// repeat weapon := _weapon [ 1 ] ;
32672: LD_ADDR_VAR 0 5
32676: PUSH
32677: LD_VAR 0 10
32681: PUSH
32682: LD_INT 1
32684: ARRAY
32685: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32686: LD_ADDR_VAR 0 10
32690: PUSH
32691: LD_VAR 0 10
32695: PPUSH
32696: LD_INT 1
32698: PPUSH
32699: CALL_OW 3
32703: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32704: LD_VAR 0 2
32708: PPUSH
32709: LD_VAR 0 5
32713: PPUSH
32714: CALL 33023 0 2
32718: PUSH
32719: LD_VAR 0 10
32723: PUSH
32724: EMPTY
32725: EQUAL
32726: OR
32727: IFFALSE 32672
// result := [ ] ;
32729: LD_ADDR_VAR 0 6
32733: PUSH
32734: EMPTY
32735: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32736: LD_VAR 0 1
32740: PPUSH
32741: LD_VAR 0 2
32745: PPUSH
32746: LD_VAR 0 3
32750: PPUSH
32751: LD_VAR 0 4
32755: PPUSH
32756: LD_VAR 0 5
32760: PPUSH
32761: CALL_OW 448
32765: IFFALSE 32798
// result := [ chassis , engine , control , weapon ] ;
32767: LD_ADDR_VAR 0 6
32771: PUSH
32772: LD_VAR 0 2
32776: PUSH
32777: LD_VAR 0 3
32781: PUSH
32782: LD_VAR 0 4
32786: PUSH
32787: LD_VAR 0 5
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: ST_TO_ADDR
// end ;
32798: LD_VAR 0 6
32802: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32803: LD_INT 0
32805: PPUSH
// if not chassis or not engine then
32806: LD_VAR 0 1
32810: NOT
32811: PUSH
32812: LD_VAR 0 2
32816: NOT
32817: OR
32818: IFFALSE 32822
// exit ;
32820: GO 33018
// case engine of engine_solar :
32822: LD_VAR 0 2
32826: PUSH
32827: LD_INT 2
32829: DOUBLE
32830: EQUAL
32831: IFTRUE 32835
32833: GO 32873
32835: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32836: LD_ADDR_VAR 0 3
32840: PUSH
32841: LD_INT 11
32843: PUSH
32844: LD_INT 12
32846: PUSH
32847: LD_INT 13
32849: PUSH
32850: LD_INT 14
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: ST_TO_ADDR
32871: GO 33002
32873: LD_INT 1
32875: DOUBLE
32876: EQUAL
32877: IFTRUE 32881
32879: GO 32943
32881: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32882: LD_ADDR_VAR 0 3
32886: PUSH
32887: LD_INT 11
32889: PUSH
32890: LD_INT 12
32892: PUSH
32893: LD_INT 13
32895: PUSH
32896: LD_INT 14
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: LD_INT 2
32904: PUSH
32905: LD_INT 3
32907: PUSH
32908: LD_INT 4
32910: PUSH
32911: LD_INT 5
32913: PUSH
32914: LD_INT 21
32916: PUSH
32917: LD_INT 23
32919: PUSH
32920: LD_INT 22
32922: PUSH
32923: LD_INT 24
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: ST_TO_ADDR
32941: GO 33002
32943: LD_INT 3
32945: DOUBLE
32946: EQUAL
32947: IFTRUE 32951
32949: GO 33001
32951: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32952: LD_ADDR_VAR 0 3
32956: PUSH
32957: LD_INT 13
32959: PUSH
32960: LD_INT 14
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: LD_INT 3
32968: PUSH
32969: LD_INT 4
32971: PUSH
32972: LD_INT 5
32974: PUSH
32975: LD_INT 21
32977: PUSH
32978: LD_INT 22
32980: PUSH
32981: LD_INT 23
32983: PUSH
32984: LD_INT 24
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: ST_TO_ADDR
32999: GO 33002
33001: POP
// result := ( chassis in result ) ;
33002: LD_ADDR_VAR 0 3
33006: PUSH
33007: LD_VAR 0 1
33011: PUSH
33012: LD_VAR 0 3
33016: IN
33017: ST_TO_ADDR
// end ;
33018: LD_VAR 0 3
33022: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33023: LD_INT 0
33025: PPUSH
// if not chassis or not weapon then
33026: LD_VAR 0 1
33030: NOT
33031: PUSH
33032: LD_VAR 0 2
33036: NOT
33037: OR
33038: IFFALSE 33042
// exit ;
33040: GO 34102
// case weapon of us_machine_gun :
33042: LD_VAR 0 2
33046: PUSH
33047: LD_INT 2
33049: DOUBLE
33050: EQUAL
33051: IFTRUE 33055
33053: GO 33085
33055: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33056: LD_ADDR_VAR 0 3
33060: PUSH
33061: LD_INT 1
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: LD_INT 3
33069: PUSH
33070: LD_INT 4
33072: PUSH
33073: LD_INT 5
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: ST_TO_ADDR
33083: GO 34086
33085: LD_INT 3
33087: DOUBLE
33088: EQUAL
33089: IFTRUE 33093
33091: GO 33123
33093: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: LD_INT 1
33101: PUSH
33102: LD_INT 2
33104: PUSH
33105: LD_INT 3
33107: PUSH
33108: LD_INT 4
33110: PUSH
33111: LD_INT 5
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: ST_TO_ADDR
33121: GO 34086
33123: LD_INT 11
33125: DOUBLE
33126: EQUAL
33127: IFTRUE 33131
33129: GO 33161
33131: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33132: LD_ADDR_VAR 0 3
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: LD_INT 2
33142: PUSH
33143: LD_INT 3
33145: PUSH
33146: LD_INT 4
33148: PUSH
33149: LD_INT 5
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: ST_TO_ADDR
33159: GO 34086
33161: LD_INT 4
33163: DOUBLE
33164: EQUAL
33165: IFTRUE 33169
33167: GO 33195
33169: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33170: LD_ADDR_VAR 0 3
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: LD_INT 3
33180: PUSH
33181: LD_INT 4
33183: PUSH
33184: LD_INT 5
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: ST_TO_ADDR
33193: GO 34086
33195: LD_INT 5
33197: DOUBLE
33198: EQUAL
33199: IFTRUE 33203
33201: GO 33229
33203: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33204: LD_ADDR_VAR 0 3
33208: PUSH
33209: LD_INT 2
33211: PUSH
33212: LD_INT 3
33214: PUSH
33215: LD_INT 4
33217: PUSH
33218: LD_INT 5
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: ST_TO_ADDR
33227: GO 34086
33229: LD_INT 9
33231: DOUBLE
33232: EQUAL
33233: IFTRUE 33237
33235: GO 33263
33237: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33238: LD_ADDR_VAR 0 3
33242: PUSH
33243: LD_INT 2
33245: PUSH
33246: LD_INT 3
33248: PUSH
33249: LD_INT 4
33251: PUSH
33252: LD_INT 5
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: ST_TO_ADDR
33261: GO 34086
33263: LD_INT 7
33265: DOUBLE
33266: EQUAL
33267: IFTRUE 33271
33269: GO 33297
33271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33272: LD_ADDR_VAR 0 3
33276: PUSH
33277: LD_INT 2
33279: PUSH
33280: LD_INT 3
33282: PUSH
33283: LD_INT 4
33285: PUSH
33286: LD_INT 5
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: ST_TO_ADDR
33295: GO 34086
33297: LD_INT 12
33299: DOUBLE
33300: EQUAL
33301: IFTRUE 33305
33303: GO 33331
33305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33306: LD_ADDR_VAR 0 3
33310: PUSH
33311: LD_INT 2
33313: PUSH
33314: LD_INT 3
33316: PUSH
33317: LD_INT 4
33319: PUSH
33320: LD_INT 5
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: ST_TO_ADDR
33329: GO 34086
33331: LD_INT 13
33333: DOUBLE
33334: EQUAL
33335: IFTRUE 33339
33337: GO 33365
33339: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33340: LD_ADDR_VAR 0 3
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: LD_INT 3
33350: PUSH
33351: LD_INT 4
33353: PUSH
33354: LD_INT 5
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: ST_TO_ADDR
33363: GO 34086
33365: LD_INT 14
33367: DOUBLE
33368: EQUAL
33369: IFTRUE 33373
33371: GO 33391
33373: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33374: LD_ADDR_VAR 0 3
33378: PUSH
33379: LD_INT 4
33381: PUSH
33382: LD_INT 5
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: ST_TO_ADDR
33389: GO 34086
33391: LD_INT 6
33393: DOUBLE
33394: EQUAL
33395: IFTRUE 33399
33397: GO 33417
33399: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33400: LD_ADDR_VAR 0 3
33404: PUSH
33405: LD_INT 4
33407: PUSH
33408: LD_INT 5
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: ST_TO_ADDR
33415: GO 34086
33417: LD_INT 10
33419: DOUBLE
33420: EQUAL
33421: IFTRUE 33425
33423: GO 33443
33425: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33426: LD_ADDR_VAR 0 3
33430: PUSH
33431: LD_INT 4
33433: PUSH
33434: LD_INT 5
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: ST_TO_ADDR
33441: GO 34086
33443: LD_INT 22
33445: DOUBLE
33446: EQUAL
33447: IFTRUE 33451
33449: GO 33477
33451: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33452: LD_ADDR_VAR 0 3
33456: PUSH
33457: LD_INT 11
33459: PUSH
33460: LD_INT 12
33462: PUSH
33463: LD_INT 13
33465: PUSH
33466: LD_INT 14
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: ST_TO_ADDR
33475: GO 34086
33477: LD_INT 23
33479: DOUBLE
33480: EQUAL
33481: IFTRUE 33485
33483: GO 33511
33485: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33486: LD_ADDR_VAR 0 3
33490: PUSH
33491: LD_INT 11
33493: PUSH
33494: LD_INT 12
33496: PUSH
33497: LD_INT 13
33499: PUSH
33500: LD_INT 14
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: ST_TO_ADDR
33509: GO 34086
33511: LD_INT 24
33513: DOUBLE
33514: EQUAL
33515: IFTRUE 33519
33517: GO 33545
33519: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33520: LD_ADDR_VAR 0 3
33524: PUSH
33525: LD_INT 11
33527: PUSH
33528: LD_INT 12
33530: PUSH
33531: LD_INT 13
33533: PUSH
33534: LD_INT 14
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: ST_TO_ADDR
33543: GO 34086
33545: LD_INT 30
33547: DOUBLE
33548: EQUAL
33549: IFTRUE 33553
33551: GO 33579
33553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33554: LD_ADDR_VAR 0 3
33558: PUSH
33559: LD_INT 11
33561: PUSH
33562: LD_INT 12
33564: PUSH
33565: LD_INT 13
33567: PUSH
33568: LD_INT 14
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: ST_TO_ADDR
33577: GO 34086
33579: LD_INT 25
33581: DOUBLE
33582: EQUAL
33583: IFTRUE 33587
33585: GO 33605
33587: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33588: LD_ADDR_VAR 0 3
33592: PUSH
33593: LD_INT 13
33595: PUSH
33596: LD_INT 14
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: ST_TO_ADDR
33603: GO 34086
33605: LD_INT 27
33607: DOUBLE
33608: EQUAL
33609: IFTRUE 33613
33611: GO 33631
33613: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33614: LD_ADDR_VAR 0 3
33618: PUSH
33619: LD_INT 13
33621: PUSH
33622: LD_INT 14
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: ST_TO_ADDR
33629: GO 34086
33631: LD_INT 92
33633: DOUBLE
33634: EQUAL
33635: IFTRUE 33639
33637: GO 33665
33639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33640: LD_ADDR_VAR 0 3
33644: PUSH
33645: LD_INT 11
33647: PUSH
33648: LD_INT 12
33650: PUSH
33651: LD_INT 13
33653: PUSH
33654: LD_INT 14
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: ST_TO_ADDR
33663: GO 34086
33665: LD_INT 28
33667: DOUBLE
33668: EQUAL
33669: IFTRUE 33673
33671: GO 33691
33673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33674: LD_ADDR_VAR 0 3
33678: PUSH
33679: LD_INT 13
33681: PUSH
33682: LD_INT 14
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: ST_TO_ADDR
33689: GO 34086
33691: LD_INT 29
33693: DOUBLE
33694: EQUAL
33695: IFTRUE 33699
33697: GO 33717
33699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33700: LD_ADDR_VAR 0 3
33704: PUSH
33705: LD_INT 13
33707: PUSH
33708: LD_INT 14
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: ST_TO_ADDR
33715: GO 34086
33717: LD_INT 31
33719: DOUBLE
33720: EQUAL
33721: IFTRUE 33725
33723: GO 33743
33725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33726: LD_ADDR_VAR 0 3
33730: PUSH
33731: LD_INT 13
33733: PUSH
33734: LD_INT 14
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: ST_TO_ADDR
33741: GO 34086
33743: LD_INT 26
33745: DOUBLE
33746: EQUAL
33747: IFTRUE 33751
33749: GO 33769
33751: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33752: LD_ADDR_VAR 0 3
33756: PUSH
33757: LD_INT 13
33759: PUSH
33760: LD_INT 14
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: ST_TO_ADDR
33767: GO 34086
33769: LD_INT 42
33771: DOUBLE
33772: EQUAL
33773: IFTRUE 33777
33775: GO 33803
33777: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33778: LD_ADDR_VAR 0 3
33782: PUSH
33783: LD_INT 21
33785: PUSH
33786: LD_INT 22
33788: PUSH
33789: LD_INT 23
33791: PUSH
33792: LD_INT 24
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: ST_TO_ADDR
33801: GO 34086
33803: LD_INT 43
33805: DOUBLE
33806: EQUAL
33807: IFTRUE 33811
33809: GO 33837
33811: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33812: LD_ADDR_VAR 0 3
33816: PUSH
33817: LD_INT 21
33819: PUSH
33820: LD_INT 22
33822: PUSH
33823: LD_INT 23
33825: PUSH
33826: LD_INT 24
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: ST_TO_ADDR
33835: GO 34086
33837: LD_INT 44
33839: DOUBLE
33840: EQUAL
33841: IFTRUE 33845
33843: GO 33871
33845: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33846: LD_ADDR_VAR 0 3
33850: PUSH
33851: LD_INT 21
33853: PUSH
33854: LD_INT 22
33856: PUSH
33857: LD_INT 23
33859: PUSH
33860: LD_INT 24
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: ST_TO_ADDR
33869: GO 34086
33871: LD_INT 45
33873: DOUBLE
33874: EQUAL
33875: IFTRUE 33879
33877: GO 33905
33879: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33880: LD_ADDR_VAR 0 3
33884: PUSH
33885: LD_INT 21
33887: PUSH
33888: LD_INT 22
33890: PUSH
33891: LD_INT 23
33893: PUSH
33894: LD_INT 24
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: ST_TO_ADDR
33903: GO 34086
33905: LD_INT 49
33907: DOUBLE
33908: EQUAL
33909: IFTRUE 33913
33911: GO 33939
33913: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33914: LD_ADDR_VAR 0 3
33918: PUSH
33919: LD_INT 21
33921: PUSH
33922: LD_INT 22
33924: PUSH
33925: LD_INT 23
33927: PUSH
33928: LD_INT 24
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: ST_TO_ADDR
33937: GO 34086
33939: LD_INT 51
33941: DOUBLE
33942: EQUAL
33943: IFTRUE 33947
33945: GO 33973
33947: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33948: LD_ADDR_VAR 0 3
33952: PUSH
33953: LD_INT 21
33955: PUSH
33956: LD_INT 22
33958: PUSH
33959: LD_INT 23
33961: PUSH
33962: LD_INT 24
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: ST_TO_ADDR
33971: GO 34086
33973: LD_INT 52
33975: DOUBLE
33976: EQUAL
33977: IFTRUE 33981
33979: GO 34007
33981: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33982: LD_ADDR_VAR 0 3
33986: PUSH
33987: LD_INT 21
33989: PUSH
33990: LD_INT 22
33992: PUSH
33993: LD_INT 23
33995: PUSH
33996: LD_INT 24
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: ST_TO_ADDR
34005: GO 34086
34007: LD_INT 53
34009: DOUBLE
34010: EQUAL
34011: IFTRUE 34015
34013: GO 34033
34015: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34016: LD_ADDR_VAR 0 3
34020: PUSH
34021: LD_INT 23
34023: PUSH
34024: LD_INT 24
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: ST_TO_ADDR
34031: GO 34086
34033: LD_INT 46
34035: DOUBLE
34036: EQUAL
34037: IFTRUE 34041
34039: GO 34059
34041: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34042: LD_ADDR_VAR 0 3
34046: PUSH
34047: LD_INT 23
34049: PUSH
34050: LD_INT 24
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: ST_TO_ADDR
34057: GO 34086
34059: LD_INT 47
34061: DOUBLE
34062: EQUAL
34063: IFTRUE 34067
34065: GO 34085
34067: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34068: LD_ADDR_VAR 0 3
34072: PUSH
34073: LD_INT 23
34075: PUSH
34076: LD_INT 24
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: ST_TO_ADDR
34083: GO 34086
34085: POP
// result := ( chassis in result ) ;
34086: LD_ADDR_VAR 0 3
34090: PUSH
34091: LD_VAR 0 1
34095: PUSH
34096: LD_VAR 0 3
34100: IN
34101: ST_TO_ADDR
// end ;
34102: LD_VAR 0 3
34106: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34107: LD_INT 0
34109: PPUSH
34110: PPUSH
34111: PPUSH
34112: PPUSH
34113: PPUSH
34114: PPUSH
34115: PPUSH
// result := array ;
34116: LD_ADDR_VAR 0 5
34120: PUSH
34121: LD_VAR 0 1
34125: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34126: LD_VAR 0 1
34130: NOT
34131: PUSH
34132: LD_VAR 0 2
34136: NOT
34137: OR
34138: PUSH
34139: LD_VAR 0 3
34143: NOT
34144: OR
34145: PUSH
34146: LD_VAR 0 2
34150: PUSH
34151: LD_VAR 0 1
34155: GREATER
34156: OR
34157: PUSH
34158: LD_VAR 0 3
34162: PUSH
34163: LD_VAR 0 1
34167: GREATER
34168: OR
34169: IFFALSE 34173
// exit ;
34171: GO 34469
// if direction then
34173: LD_VAR 0 4
34177: IFFALSE 34241
// begin d := 1 ;
34179: LD_ADDR_VAR 0 9
34183: PUSH
34184: LD_INT 1
34186: ST_TO_ADDR
// if i_from > i_to then
34187: LD_VAR 0 2
34191: PUSH
34192: LD_VAR 0 3
34196: GREATER
34197: IFFALSE 34223
// length := ( array - i_from ) + i_to else
34199: LD_ADDR_VAR 0 11
34203: PUSH
34204: LD_VAR 0 1
34208: PUSH
34209: LD_VAR 0 2
34213: MINUS
34214: PUSH
34215: LD_VAR 0 3
34219: PLUS
34220: ST_TO_ADDR
34221: GO 34239
// length := i_to - i_from ;
34223: LD_ADDR_VAR 0 11
34227: PUSH
34228: LD_VAR 0 3
34232: PUSH
34233: LD_VAR 0 2
34237: MINUS
34238: ST_TO_ADDR
// end else
34239: GO 34302
// begin d := - 1 ;
34241: LD_ADDR_VAR 0 9
34245: PUSH
34246: LD_INT 1
34248: NEG
34249: ST_TO_ADDR
// if i_from > i_to then
34250: LD_VAR 0 2
34254: PUSH
34255: LD_VAR 0 3
34259: GREATER
34260: IFFALSE 34280
// length := i_from - i_to else
34262: LD_ADDR_VAR 0 11
34266: PUSH
34267: LD_VAR 0 2
34271: PUSH
34272: LD_VAR 0 3
34276: MINUS
34277: ST_TO_ADDR
34278: GO 34302
// length := ( array - i_to ) + i_from ;
34280: LD_ADDR_VAR 0 11
34284: PUSH
34285: LD_VAR 0 1
34289: PUSH
34290: LD_VAR 0 3
34294: MINUS
34295: PUSH
34296: LD_VAR 0 2
34300: PLUS
34301: ST_TO_ADDR
// end ; if not length then
34302: LD_VAR 0 11
34306: NOT
34307: IFFALSE 34311
// exit ;
34309: GO 34469
// tmp := array ;
34311: LD_ADDR_VAR 0 10
34315: PUSH
34316: LD_VAR 0 1
34320: ST_TO_ADDR
// for i = 1 to length do
34321: LD_ADDR_VAR 0 6
34325: PUSH
34326: DOUBLE
34327: LD_INT 1
34329: DEC
34330: ST_TO_ADDR
34331: LD_VAR 0 11
34335: PUSH
34336: FOR_TO
34337: IFFALSE 34457
// begin for j = 1 to array do
34339: LD_ADDR_VAR 0 7
34343: PUSH
34344: DOUBLE
34345: LD_INT 1
34347: DEC
34348: ST_TO_ADDR
34349: LD_VAR 0 1
34353: PUSH
34354: FOR_TO
34355: IFFALSE 34443
// begin k := j + d ;
34357: LD_ADDR_VAR 0 8
34361: PUSH
34362: LD_VAR 0 7
34366: PUSH
34367: LD_VAR 0 9
34371: PLUS
34372: ST_TO_ADDR
// if k > array then
34373: LD_VAR 0 8
34377: PUSH
34378: LD_VAR 0 1
34382: GREATER
34383: IFFALSE 34393
// k := 1 ;
34385: LD_ADDR_VAR 0 8
34389: PUSH
34390: LD_INT 1
34392: ST_TO_ADDR
// if not k then
34393: LD_VAR 0 8
34397: NOT
34398: IFFALSE 34410
// k := array ;
34400: LD_ADDR_VAR 0 8
34404: PUSH
34405: LD_VAR 0 1
34409: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34410: LD_ADDR_VAR 0 10
34414: PUSH
34415: LD_VAR 0 10
34419: PPUSH
34420: LD_VAR 0 8
34424: PPUSH
34425: LD_VAR 0 1
34429: PUSH
34430: LD_VAR 0 7
34434: ARRAY
34435: PPUSH
34436: CALL_OW 1
34440: ST_TO_ADDR
// end ;
34441: GO 34354
34443: POP
34444: POP
// array := tmp ;
34445: LD_ADDR_VAR 0 1
34449: PUSH
34450: LD_VAR 0 10
34454: ST_TO_ADDR
// end ;
34455: GO 34336
34457: POP
34458: POP
// result := array ;
34459: LD_ADDR_VAR 0 5
34463: PUSH
34464: LD_VAR 0 1
34468: ST_TO_ADDR
// end ;
34469: LD_VAR 0 5
34473: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34474: LD_INT 0
34476: PPUSH
34477: PPUSH
// result := 0 ;
34478: LD_ADDR_VAR 0 3
34482: PUSH
34483: LD_INT 0
34485: ST_TO_ADDR
// if not array or not value in array then
34486: LD_VAR 0 1
34490: NOT
34491: PUSH
34492: LD_VAR 0 2
34496: PUSH
34497: LD_VAR 0 1
34501: IN
34502: NOT
34503: OR
34504: IFFALSE 34508
// exit ;
34506: GO 34562
// for i = 1 to array do
34508: LD_ADDR_VAR 0 4
34512: PUSH
34513: DOUBLE
34514: LD_INT 1
34516: DEC
34517: ST_TO_ADDR
34518: LD_VAR 0 1
34522: PUSH
34523: FOR_TO
34524: IFFALSE 34560
// if value = array [ i ] then
34526: LD_VAR 0 2
34530: PUSH
34531: LD_VAR 0 1
34535: PUSH
34536: LD_VAR 0 4
34540: ARRAY
34541: EQUAL
34542: IFFALSE 34558
// begin result := i ;
34544: LD_ADDR_VAR 0 3
34548: PUSH
34549: LD_VAR 0 4
34553: ST_TO_ADDR
// exit ;
34554: POP
34555: POP
34556: GO 34562
// end ;
34558: GO 34523
34560: POP
34561: POP
// end ;
34562: LD_VAR 0 3
34566: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34567: LD_INT 0
34569: PPUSH
// vc_chassis := chassis ;
34570: LD_ADDR_OWVAR 37
34574: PUSH
34575: LD_VAR 0 1
34579: ST_TO_ADDR
// vc_engine := engine ;
34580: LD_ADDR_OWVAR 39
34584: PUSH
34585: LD_VAR 0 2
34589: ST_TO_ADDR
// vc_control := control ;
34590: LD_ADDR_OWVAR 38
34594: PUSH
34595: LD_VAR 0 3
34599: ST_TO_ADDR
// vc_weapon := weapon ;
34600: LD_ADDR_OWVAR 40
34604: PUSH
34605: LD_VAR 0 4
34609: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34610: LD_ADDR_OWVAR 41
34614: PUSH
34615: LD_VAR 0 5
34619: ST_TO_ADDR
// end ;
34620: LD_VAR 0 6
34624: RET
// export function WantPlant ( unit ) ; var task ; begin
34625: LD_INT 0
34627: PPUSH
34628: PPUSH
// result := false ;
34629: LD_ADDR_VAR 0 2
34633: PUSH
34634: LD_INT 0
34636: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34637: LD_ADDR_VAR 0 3
34641: PUSH
34642: LD_VAR 0 1
34646: PPUSH
34647: CALL_OW 437
34651: ST_TO_ADDR
// if task then
34652: LD_VAR 0 3
34656: IFFALSE 34684
// if task [ 1 ] [ 1 ] = p then
34658: LD_VAR 0 3
34662: PUSH
34663: LD_INT 1
34665: ARRAY
34666: PUSH
34667: LD_INT 1
34669: ARRAY
34670: PUSH
34671: LD_STRING p
34673: EQUAL
34674: IFFALSE 34684
// result := true ;
34676: LD_ADDR_VAR 0 2
34680: PUSH
34681: LD_INT 1
34683: ST_TO_ADDR
// end ;
34684: LD_VAR 0 2
34688: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34689: LD_INT 0
34691: PPUSH
34692: PPUSH
34693: PPUSH
34694: PPUSH
// if pos < 1 then
34695: LD_VAR 0 2
34699: PUSH
34700: LD_INT 1
34702: LESS
34703: IFFALSE 34707
// exit ;
34705: GO 35010
// if pos = 1 then
34707: LD_VAR 0 2
34711: PUSH
34712: LD_INT 1
34714: EQUAL
34715: IFFALSE 34748
// result := Replace ( arr , pos [ 1 ] , value ) else
34717: LD_ADDR_VAR 0 4
34721: PUSH
34722: LD_VAR 0 1
34726: PPUSH
34727: LD_VAR 0 2
34731: PUSH
34732: LD_INT 1
34734: ARRAY
34735: PPUSH
34736: LD_VAR 0 3
34740: PPUSH
34741: CALL_OW 1
34745: ST_TO_ADDR
34746: GO 35010
// begin tmp := arr ;
34748: LD_ADDR_VAR 0 6
34752: PUSH
34753: LD_VAR 0 1
34757: ST_TO_ADDR
// s_arr := [ tmp ] ;
34758: LD_ADDR_VAR 0 7
34762: PUSH
34763: LD_VAR 0 6
34767: PUSH
34768: EMPTY
34769: LIST
34770: ST_TO_ADDR
// for i = 1 to pos - 1 do
34771: LD_ADDR_VAR 0 5
34775: PUSH
34776: DOUBLE
34777: LD_INT 1
34779: DEC
34780: ST_TO_ADDR
34781: LD_VAR 0 2
34785: PUSH
34786: LD_INT 1
34788: MINUS
34789: PUSH
34790: FOR_TO
34791: IFFALSE 34836
// begin tmp := tmp [ pos [ i ] ] ;
34793: LD_ADDR_VAR 0 6
34797: PUSH
34798: LD_VAR 0 6
34802: PUSH
34803: LD_VAR 0 2
34807: PUSH
34808: LD_VAR 0 5
34812: ARRAY
34813: ARRAY
34814: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34815: LD_ADDR_VAR 0 7
34819: PUSH
34820: LD_VAR 0 7
34824: PUSH
34825: LD_VAR 0 6
34829: PUSH
34830: EMPTY
34831: LIST
34832: ADD
34833: ST_TO_ADDR
// end ;
34834: GO 34790
34836: POP
34837: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34838: LD_ADDR_VAR 0 6
34842: PUSH
34843: LD_VAR 0 6
34847: PPUSH
34848: LD_VAR 0 2
34852: PUSH
34853: LD_VAR 0 2
34857: ARRAY
34858: PPUSH
34859: LD_VAR 0 3
34863: PPUSH
34864: CALL_OW 1
34868: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34869: LD_ADDR_VAR 0 7
34873: PUSH
34874: LD_VAR 0 7
34878: PPUSH
34879: LD_VAR 0 7
34883: PPUSH
34884: LD_VAR 0 6
34888: PPUSH
34889: CALL_OW 1
34893: ST_TO_ADDR
// for i = s_arr downto 2 do
34894: LD_ADDR_VAR 0 5
34898: PUSH
34899: DOUBLE
34900: LD_VAR 0 7
34904: INC
34905: ST_TO_ADDR
34906: LD_INT 2
34908: PUSH
34909: FOR_DOWNTO
34910: IFFALSE 34994
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34912: LD_ADDR_VAR 0 6
34916: PUSH
34917: LD_VAR 0 7
34921: PUSH
34922: LD_VAR 0 5
34926: PUSH
34927: LD_INT 1
34929: MINUS
34930: ARRAY
34931: PPUSH
34932: LD_VAR 0 2
34936: PUSH
34937: LD_VAR 0 5
34941: PUSH
34942: LD_INT 1
34944: MINUS
34945: ARRAY
34946: PPUSH
34947: LD_VAR 0 7
34951: PUSH
34952: LD_VAR 0 5
34956: ARRAY
34957: PPUSH
34958: CALL_OW 1
34962: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34963: LD_ADDR_VAR 0 7
34967: PUSH
34968: LD_VAR 0 7
34972: PPUSH
34973: LD_VAR 0 5
34977: PUSH
34978: LD_INT 1
34980: MINUS
34981: PPUSH
34982: LD_VAR 0 6
34986: PPUSH
34987: CALL_OW 1
34991: ST_TO_ADDR
// end ;
34992: GO 34909
34994: POP
34995: POP
// result := s_arr [ 1 ] ;
34996: LD_ADDR_VAR 0 4
35000: PUSH
35001: LD_VAR 0 7
35005: PUSH
35006: LD_INT 1
35008: ARRAY
35009: ST_TO_ADDR
// end ; end ;
35010: LD_VAR 0 4
35014: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35015: LD_INT 0
35017: PPUSH
35018: PPUSH
// if not list then
35019: LD_VAR 0 1
35023: NOT
35024: IFFALSE 35028
// exit ;
35026: GO 35119
// i := list [ pos1 ] ;
35028: LD_ADDR_VAR 0 5
35032: PUSH
35033: LD_VAR 0 1
35037: PUSH
35038: LD_VAR 0 2
35042: ARRAY
35043: ST_TO_ADDR
// if not i then
35044: LD_VAR 0 5
35048: NOT
35049: IFFALSE 35053
// exit ;
35051: GO 35119
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35053: LD_ADDR_VAR 0 1
35057: PUSH
35058: LD_VAR 0 1
35062: PPUSH
35063: LD_VAR 0 2
35067: PPUSH
35068: LD_VAR 0 1
35072: PUSH
35073: LD_VAR 0 3
35077: ARRAY
35078: PPUSH
35079: CALL_OW 1
35083: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35084: LD_ADDR_VAR 0 1
35088: PUSH
35089: LD_VAR 0 1
35093: PPUSH
35094: LD_VAR 0 3
35098: PPUSH
35099: LD_VAR 0 5
35103: PPUSH
35104: CALL_OW 1
35108: ST_TO_ADDR
// result := list ;
35109: LD_ADDR_VAR 0 4
35113: PUSH
35114: LD_VAR 0 1
35118: ST_TO_ADDR
// end ;
35119: LD_VAR 0 4
35123: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35124: LD_INT 0
35126: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35127: LD_ADDR_VAR 0 5
35131: PUSH
35132: LD_VAR 0 1
35136: PPUSH
35137: CALL_OW 250
35141: PPUSH
35142: LD_VAR 0 1
35146: PPUSH
35147: CALL_OW 251
35151: PPUSH
35152: LD_VAR 0 2
35156: PPUSH
35157: LD_VAR 0 3
35161: PPUSH
35162: LD_VAR 0 4
35166: PPUSH
35167: CALL 35177 0 5
35171: ST_TO_ADDR
// end ;
35172: LD_VAR 0 5
35176: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35177: LD_INT 0
35179: PPUSH
35180: PPUSH
35181: PPUSH
35182: PPUSH
// if not list then
35183: LD_VAR 0 3
35187: NOT
35188: IFFALSE 35192
// exit ;
35190: GO 35580
// result := [ ] ;
35192: LD_ADDR_VAR 0 6
35196: PUSH
35197: EMPTY
35198: ST_TO_ADDR
// for i in list do
35199: LD_ADDR_VAR 0 7
35203: PUSH
35204: LD_VAR 0 3
35208: PUSH
35209: FOR_IN
35210: IFFALSE 35412
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35212: LD_ADDR_VAR 0 9
35216: PUSH
35217: LD_VAR 0 7
35221: PPUSH
35222: LD_VAR 0 1
35226: PPUSH
35227: LD_VAR 0 2
35231: PPUSH
35232: CALL_OW 297
35236: ST_TO_ADDR
// if not result then
35237: LD_VAR 0 6
35241: NOT
35242: IFFALSE 35268
// result := [ [ i , tmp ] ] else
35244: LD_ADDR_VAR 0 6
35248: PUSH
35249: LD_VAR 0 7
35253: PUSH
35254: LD_VAR 0 9
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: EMPTY
35264: LIST
35265: ST_TO_ADDR
35266: GO 35410
// begin if result [ result ] [ 2 ] < tmp then
35268: LD_VAR 0 6
35272: PUSH
35273: LD_VAR 0 6
35277: ARRAY
35278: PUSH
35279: LD_INT 2
35281: ARRAY
35282: PUSH
35283: LD_VAR 0 9
35287: LESS
35288: IFFALSE 35330
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35290: LD_ADDR_VAR 0 6
35294: PUSH
35295: LD_VAR 0 6
35299: PPUSH
35300: LD_VAR 0 6
35304: PUSH
35305: LD_INT 1
35307: PLUS
35308: PPUSH
35309: LD_VAR 0 7
35313: PUSH
35314: LD_VAR 0 9
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PPUSH
35323: CALL_OW 2
35327: ST_TO_ADDR
35328: GO 35410
// for j = 1 to result do
35330: LD_ADDR_VAR 0 8
35334: PUSH
35335: DOUBLE
35336: LD_INT 1
35338: DEC
35339: ST_TO_ADDR
35340: LD_VAR 0 6
35344: PUSH
35345: FOR_TO
35346: IFFALSE 35408
// begin if tmp < result [ j ] [ 2 ] then
35348: LD_VAR 0 9
35352: PUSH
35353: LD_VAR 0 6
35357: PUSH
35358: LD_VAR 0 8
35362: ARRAY
35363: PUSH
35364: LD_INT 2
35366: ARRAY
35367: LESS
35368: IFFALSE 35406
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35370: LD_ADDR_VAR 0 6
35374: PUSH
35375: LD_VAR 0 6
35379: PPUSH
35380: LD_VAR 0 8
35384: PPUSH
35385: LD_VAR 0 7
35389: PUSH
35390: LD_VAR 0 9
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PPUSH
35399: CALL_OW 2
35403: ST_TO_ADDR
// break ;
35404: GO 35408
// end ; end ;
35406: GO 35345
35408: POP
35409: POP
// end ; end ;
35410: GO 35209
35412: POP
35413: POP
// if result and not asc then
35414: LD_VAR 0 6
35418: PUSH
35419: LD_VAR 0 4
35423: NOT
35424: AND
35425: IFFALSE 35500
// begin tmp := result ;
35427: LD_ADDR_VAR 0 9
35431: PUSH
35432: LD_VAR 0 6
35436: ST_TO_ADDR
// for i = tmp downto 1 do
35437: LD_ADDR_VAR 0 7
35441: PUSH
35442: DOUBLE
35443: LD_VAR 0 9
35447: INC
35448: ST_TO_ADDR
35449: LD_INT 1
35451: PUSH
35452: FOR_DOWNTO
35453: IFFALSE 35498
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35455: LD_ADDR_VAR 0 6
35459: PUSH
35460: LD_VAR 0 6
35464: PPUSH
35465: LD_VAR 0 9
35469: PUSH
35470: LD_VAR 0 7
35474: MINUS
35475: PUSH
35476: LD_INT 1
35478: PLUS
35479: PPUSH
35480: LD_VAR 0 9
35484: PUSH
35485: LD_VAR 0 7
35489: ARRAY
35490: PPUSH
35491: CALL_OW 1
35495: ST_TO_ADDR
35496: GO 35452
35498: POP
35499: POP
// end ; tmp := [ ] ;
35500: LD_ADDR_VAR 0 9
35504: PUSH
35505: EMPTY
35506: ST_TO_ADDR
// if mode then
35507: LD_VAR 0 5
35511: IFFALSE 35580
// begin for i = 1 to result do
35513: LD_ADDR_VAR 0 7
35517: PUSH
35518: DOUBLE
35519: LD_INT 1
35521: DEC
35522: ST_TO_ADDR
35523: LD_VAR 0 6
35527: PUSH
35528: FOR_TO
35529: IFFALSE 35568
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35531: LD_ADDR_VAR 0 9
35535: PUSH
35536: LD_VAR 0 9
35540: PPUSH
35541: LD_VAR 0 7
35545: PPUSH
35546: LD_VAR 0 6
35550: PUSH
35551: LD_VAR 0 7
35555: ARRAY
35556: PUSH
35557: LD_INT 1
35559: ARRAY
35560: PPUSH
35561: CALL_OW 1
35565: ST_TO_ADDR
35566: GO 35528
35568: POP
35569: POP
// result := tmp ;
35570: LD_ADDR_VAR 0 6
35574: PUSH
35575: LD_VAR 0 9
35579: ST_TO_ADDR
// end ; end ;
35580: LD_VAR 0 6
35584: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35585: LD_INT 0
35587: PPUSH
35588: PPUSH
35589: PPUSH
35590: PPUSH
35591: PPUSH
35592: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35593: LD_ADDR_VAR 0 5
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: EMPTY
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: ST_TO_ADDR
// if not x or not y then
35615: LD_VAR 0 2
35619: NOT
35620: PUSH
35621: LD_VAR 0 3
35625: NOT
35626: OR
35627: IFFALSE 35631
// exit ;
35629: GO 37281
// if not range then
35631: LD_VAR 0 4
35635: NOT
35636: IFFALSE 35646
// range := 10 ;
35638: LD_ADDR_VAR 0 4
35642: PUSH
35643: LD_INT 10
35645: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35646: LD_ADDR_VAR 0 8
35650: PUSH
35651: LD_INT 81
35653: PUSH
35654: LD_VAR 0 1
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 92
35665: PUSH
35666: LD_VAR 0 2
35670: PUSH
35671: LD_VAR 0 3
35675: PUSH
35676: LD_VAR 0 4
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 3
35689: PUSH
35690: LD_INT 21
35692: PUSH
35693: LD_INT 3
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: LIST
35708: PPUSH
35709: CALL_OW 69
35713: ST_TO_ADDR
// if not tmp then
35714: LD_VAR 0 8
35718: NOT
35719: IFFALSE 35723
// exit ;
35721: GO 37281
// for i in tmp do
35723: LD_ADDR_VAR 0 6
35727: PUSH
35728: LD_VAR 0 8
35732: PUSH
35733: FOR_IN
35734: IFFALSE 37256
// begin points := [ 0 , 0 , 0 ] ;
35736: LD_ADDR_VAR 0 9
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: LIST
35754: ST_TO_ADDR
// bpoints := 1 ;
35755: LD_ADDR_VAR 0 10
35759: PUSH
35760: LD_INT 1
35762: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35763: LD_VAR 0 6
35767: PPUSH
35768: CALL_OW 247
35772: PUSH
35773: LD_INT 1
35775: DOUBLE
35776: EQUAL
35777: IFTRUE 35781
35779: GO 36359
35781: POP
// begin if GetClass ( i ) = 1 then
35782: LD_VAR 0 6
35786: PPUSH
35787: CALL_OW 257
35791: PUSH
35792: LD_INT 1
35794: EQUAL
35795: IFFALSE 35816
// points := [ 10 , 5 , 3 ] ;
35797: LD_ADDR_VAR 0 9
35801: PUSH
35802: LD_INT 10
35804: PUSH
35805: LD_INT 5
35807: PUSH
35808: LD_INT 3
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: LIST
35815: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35816: LD_VAR 0 6
35820: PPUSH
35821: CALL_OW 257
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: LD_INT 3
35831: PUSH
35832: LD_INT 4
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: IN
35840: IFFALSE 35861
// points := [ 3 , 2 , 1 ] ;
35842: LD_ADDR_VAR 0 9
35846: PUSH
35847: LD_INT 3
35849: PUSH
35850: LD_INT 2
35852: PUSH
35853: LD_INT 1
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: LIST
35860: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35861: LD_VAR 0 6
35865: PPUSH
35866: CALL_OW 257
35870: PUSH
35871: LD_INT 5
35873: EQUAL
35874: IFFALSE 35895
// points := [ 130 , 5 , 2 ] ;
35876: LD_ADDR_VAR 0 9
35880: PUSH
35881: LD_INT 130
35883: PUSH
35884: LD_INT 5
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35895: LD_VAR 0 6
35899: PPUSH
35900: CALL_OW 257
35904: PUSH
35905: LD_INT 8
35907: EQUAL
35908: IFFALSE 35929
// points := [ 35 , 35 , 30 ] ;
35910: LD_ADDR_VAR 0 9
35914: PUSH
35915: LD_INT 35
35917: PUSH
35918: LD_INT 35
35920: PUSH
35921: LD_INT 30
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35929: LD_VAR 0 6
35933: PPUSH
35934: CALL_OW 257
35938: PUSH
35939: LD_INT 9
35941: EQUAL
35942: IFFALSE 35963
// points := [ 20 , 55 , 40 ] ;
35944: LD_ADDR_VAR 0 9
35948: PUSH
35949: LD_INT 20
35951: PUSH
35952: LD_INT 55
35954: PUSH
35955: LD_INT 40
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: LIST
35962: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35963: LD_VAR 0 6
35967: PPUSH
35968: CALL_OW 257
35972: PUSH
35973: LD_INT 12
35975: PUSH
35976: LD_INT 16
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: IN
35983: IFFALSE 36004
// points := [ 5 , 3 , 2 ] ;
35985: LD_ADDR_VAR 0 9
35989: PUSH
35990: LD_INT 5
35992: PUSH
35993: LD_INT 3
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36004: LD_VAR 0 6
36008: PPUSH
36009: CALL_OW 257
36013: PUSH
36014: LD_INT 17
36016: EQUAL
36017: IFFALSE 36038
// points := [ 100 , 50 , 75 ] ;
36019: LD_ADDR_VAR 0 9
36023: PUSH
36024: LD_INT 100
36026: PUSH
36027: LD_INT 50
36029: PUSH
36030: LD_INT 75
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: LIST
36037: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36038: LD_VAR 0 6
36042: PPUSH
36043: CALL_OW 257
36047: PUSH
36048: LD_INT 15
36050: EQUAL
36051: IFFALSE 36072
// points := [ 10 , 5 , 3 ] ;
36053: LD_ADDR_VAR 0 9
36057: PUSH
36058: LD_INT 10
36060: PUSH
36061: LD_INT 5
36063: PUSH
36064: LD_INT 3
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36072: LD_VAR 0 6
36076: PPUSH
36077: CALL_OW 257
36081: PUSH
36082: LD_INT 14
36084: EQUAL
36085: IFFALSE 36106
// points := [ 10 , 0 , 0 ] ;
36087: LD_ADDR_VAR 0 9
36091: PUSH
36092: LD_INT 10
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: LIST
36105: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36106: LD_VAR 0 6
36110: PPUSH
36111: CALL_OW 257
36115: PUSH
36116: LD_INT 11
36118: EQUAL
36119: IFFALSE 36140
// points := [ 30 , 10 , 5 ] ;
36121: LD_ADDR_VAR 0 9
36125: PUSH
36126: LD_INT 30
36128: PUSH
36129: LD_INT 10
36131: PUSH
36132: LD_INT 5
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: LIST
36139: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36140: LD_VAR 0 1
36144: PPUSH
36145: LD_INT 5
36147: PPUSH
36148: CALL_OW 321
36152: PUSH
36153: LD_INT 2
36155: EQUAL
36156: IFFALSE 36173
// bpoints := bpoints * 1.8 ;
36158: LD_ADDR_VAR 0 10
36162: PUSH
36163: LD_VAR 0 10
36167: PUSH
36168: LD_REAL  1.80000000000000E+0000
36171: MUL
36172: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36173: LD_VAR 0 6
36177: PPUSH
36178: CALL_OW 257
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: LD_INT 2
36188: PUSH
36189: LD_INT 3
36191: PUSH
36192: LD_INT 4
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: IN
36201: PUSH
36202: LD_VAR 0 1
36206: PPUSH
36207: LD_INT 51
36209: PPUSH
36210: CALL_OW 321
36214: PUSH
36215: LD_INT 2
36217: EQUAL
36218: AND
36219: IFFALSE 36236
// bpoints := bpoints * 1.2 ;
36221: LD_ADDR_VAR 0 10
36225: PUSH
36226: LD_VAR 0 10
36230: PUSH
36231: LD_REAL  1.20000000000000E+0000
36234: MUL
36235: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36236: LD_VAR 0 6
36240: PPUSH
36241: CALL_OW 257
36245: PUSH
36246: LD_INT 5
36248: PUSH
36249: LD_INT 7
36251: PUSH
36252: LD_INT 9
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: LIST
36259: IN
36260: PUSH
36261: LD_VAR 0 1
36265: PPUSH
36266: LD_INT 52
36268: PPUSH
36269: CALL_OW 321
36273: PUSH
36274: LD_INT 2
36276: EQUAL
36277: AND
36278: IFFALSE 36295
// bpoints := bpoints * 1.5 ;
36280: LD_ADDR_VAR 0 10
36284: PUSH
36285: LD_VAR 0 10
36289: PUSH
36290: LD_REAL  1.50000000000000E+0000
36293: MUL
36294: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36295: LD_VAR 0 1
36299: PPUSH
36300: LD_INT 66
36302: PPUSH
36303: CALL_OW 321
36307: PUSH
36308: LD_INT 2
36310: EQUAL
36311: IFFALSE 36328
// bpoints := bpoints * 1.1 ;
36313: LD_ADDR_VAR 0 10
36317: PUSH
36318: LD_VAR 0 10
36322: PUSH
36323: LD_REAL  1.10000000000000E+0000
36326: MUL
36327: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36328: LD_ADDR_VAR 0 10
36332: PUSH
36333: LD_VAR 0 10
36337: PUSH
36338: LD_VAR 0 6
36342: PPUSH
36343: LD_INT 1
36345: PPUSH
36346: CALL_OW 259
36350: PUSH
36351: LD_REAL  1.15000000000000E+0000
36354: MUL
36355: MUL
36356: ST_TO_ADDR
// end ; unit_vehicle :
36357: GO 37185
36359: LD_INT 2
36361: DOUBLE
36362: EQUAL
36363: IFTRUE 36367
36365: GO 37173
36367: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36368: LD_VAR 0 6
36372: PPUSH
36373: CALL_OW 264
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: LD_INT 42
36383: PUSH
36384: LD_INT 24
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: LIST
36391: IN
36392: IFFALSE 36413
// points := [ 25 , 5 , 3 ] ;
36394: LD_ADDR_VAR 0 9
36398: PUSH
36399: LD_INT 25
36401: PUSH
36402: LD_INT 5
36404: PUSH
36405: LD_INT 3
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36413: LD_VAR 0 6
36417: PPUSH
36418: CALL_OW 264
36422: PUSH
36423: LD_INT 4
36425: PUSH
36426: LD_INT 43
36428: PUSH
36429: LD_INT 25
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: IN
36437: IFFALSE 36458
// points := [ 40 , 15 , 5 ] ;
36439: LD_ADDR_VAR 0 9
36443: PUSH
36444: LD_INT 40
36446: PUSH
36447: LD_INT 15
36449: PUSH
36450: LD_INT 5
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: LIST
36457: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36458: LD_VAR 0 6
36462: PPUSH
36463: CALL_OW 264
36467: PUSH
36468: LD_INT 3
36470: PUSH
36471: LD_INT 23
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: IN
36478: IFFALSE 36499
// points := [ 7 , 25 , 8 ] ;
36480: LD_ADDR_VAR 0 9
36484: PUSH
36485: LD_INT 7
36487: PUSH
36488: LD_INT 25
36490: PUSH
36491: LD_INT 8
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: LIST
36498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36499: LD_VAR 0 6
36503: PPUSH
36504: CALL_OW 264
36508: PUSH
36509: LD_INT 5
36511: PUSH
36512: LD_INT 27
36514: PUSH
36515: LD_INT 44
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: LIST
36522: IN
36523: IFFALSE 36544
// points := [ 14 , 50 , 16 ] ;
36525: LD_ADDR_VAR 0 9
36529: PUSH
36530: LD_INT 14
36532: PUSH
36533: LD_INT 50
36535: PUSH
36536: LD_INT 16
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: LIST
36543: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36544: LD_VAR 0 6
36548: PPUSH
36549: CALL_OW 264
36553: PUSH
36554: LD_INT 6
36556: PUSH
36557: LD_INT 46
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: IN
36564: IFFALSE 36585
// points := [ 32 , 120 , 70 ] ;
36566: LD_ADDR_VAR 0 9
36570: PUSH
36571: LD_INT 32
36573: PUSH
36574: LD_INT 120
36576: PUSH
36577: LD_INT 70
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36585: LD_VAR 0 6
36589: PPUSH
36590: CALL_OW 264
36594: PUSH
36595: LD_INT 7
36597: PUSH
36598: LD_INT 28
36600: PUSH
36601: LD_INT 45
36603: PUSH
36604: LD_INT 92
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: IN
36613: IFFALSE 36634
// points := [ 35 , 20 , 45 ] ;
36615: LD_ADDR_VAR 0 9
36619: PUSH
36620: LD_INT 35
36622: PUSH
36623: LD_INT 20
36625: PUSH
36626: LD_INT 45
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: LIST
36633: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36634: LD_VAR 0 6
36638: PPUSH
36639: CALL_OW 264
36643: PUSH
36644: LD_INT 47
36646: PUSH
36647: EMPTY
36648: LIST
36649: IN
36650: IFFALSE 36671
// points := [ 67 , 45 , 75 ] ;
36652: LD_ADDR_VAR 0 9
36656: PUSH
36657: LD_INT 67
36659: PUSH
36660: LD_INT 45
36662: PUSH
36663: LD_INT 75
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: LIST
36670: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36671: LD_VAR 0 6
36675: PPUSH
36676: CALL_OW 264
36680: PUSH
36681: LD_INT 26
36683: PUSH
36684: EMPTY
36685: LIST
36686: IN
36687: IFFALSE 36708
// points := [ 120 , 30 , 80 ] ;
36689: LD_ADDR_VAR 0 9
36693: PUSH
36694: LD_INT 120
36696: PUSH
36697: LD_INT 30
36699: PUSH
36700: LD_INT 80
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: LIST
36707: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36708: LD_VAR 0 6
36712: PPUSH
36713: CALL_OW 264
36717: PUSH
36718: LD_INT 22
36720: PUSH
36721: EMPTY
36722: LIST
36723: IN
36724: IFFALSE 36745
// points := [ 40 , 1 , 1 ] ;
36726: LD_ADDR_VAR 0 9
36730: PUSH
36731: LD_INT 40
36733: PUSH
36734: LD_INT 1
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: LIST
36744: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36745: LD_VAR 0 6
36749: PPUSH
36750: CALL_OW 264
36754: PUSH
36755: LD_INT 29
36757: PUSH
36758: EMPTY
36759: LIST
36760: IN
36761: IFFALSE 36782
// points := [ 70 , 200 , 400 ] ;
36763: LD_ADDR_VAR 0 9
36767: PUSH
36768: LD_INT 70
36770: PUSH
36771: LD_INT 200
36773: PUSH
36774: LD_INT 400
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36782: LD_VAR 0 6
36786: PPUSH
36787: CALL_OW 264
36791: PUSH
36792: LD_INT 14
36794: PUSH
36795: LD_INT 53
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: IN
36802: IFFALSE 36823
// points := [ 40 , 10 , 20 ] ;
36804: LD_ADDR_VAR 0 9
36808: PUSH
36809: LD_INT 40
36811: PUSH
36812: LD_INT 10
36814: PUSH
36815: LD_INT 20
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: LIST
36822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36823: LD_VAR 0 6
36827: PPUSH
36828: CALL_OW 264
36832: PUSH
36833: LD_INT 9
36835: PUSH
36836: EMPTY
36837: LIST
36838: IN
36839: IFFALSE 36860
// points := [ 5 , 70 , 20 ] ;
36841: LD_ADDR_VAR 0 9
36845: PUSH
36846: LD_INT 5
36848: PUSH
36849: LD_INT 70
36851: PUSH
36852: LD_INT 20
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: LIST
36859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36860: LD_VAR 0 6
36864: PPUSH
36865: CALL_OW 264
36869: PUSH
36870: LD_INT 10
36872: PUSH
36873: EMPTY
36874: LIST
36875: IN
36876: IFFALSE 36897
// points := [ 35 , 110 , 70 ] ;
36878: LD_ADDR_VAR 0 9
36882: PUSH
36883: LD_INT 35
36885: PUSH
36886: LD_INT 110
36888: PUSH
36889: LD_INT 70
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: LIST
36896: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36897: LD_VAR 0 6
36901: PPUSH
36902: CALL_OW 265
36906: PUSH
36907: LD_INT 25
36909: EQUAL
36910: IFFALSE 36931
// points := [ 80 , 65 , 100 ] ;
36912: LD_ADDR_VAR 0 9
36916: PUSH
36917: LD_INT 80
36919: PUSH
36920: LD_INT 65
36922: PUSH
36923: LD_INT 100
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36931: LD_VAR 0 6
36935: PPUSH
36936: CALL_OW 263
36940: PUSH
36941: LD_INT 1
36943: EQUAL
36944: IFFALSE 36979
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36946: LD_ADDR_VAR 0 10
36950: PUSH
36951: LD_VAR 0 10
36955: PUSH
36956: LD_VAR 0 6
36960: PPUSH
36961: CALL_OW 311
36965: PPUSH
36966: LD_INT 3
36968: PPUSH
36969: CALL_OW 259
36973: PUSH
36974: LD_INT 4
36976: MUL
36977: MUL
36978: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36979: LD_VAR 0 6
36983: PPUSH
36984: CALL_OW 263
36988: PUSH
36989: LD_INT 2
36991: EQUAL
36992: IFFALSE 37043
// begin j := IsControledBy ( i ) ;
36994: LD_ADDR_VAR 0 7
36998: PUSH
36999: LD_VAR 0 6
37003: PPUSH
37004: CALL_OW 312
37008: ST_TO_ADDR
// if j then
37009: LD_VAR 0 7
37013: IFFALSE 37043
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37015: LD_ADDR_VAR 0 10
37019: PUSH
37020: LD_VAR 0 10
37024: PUSH
37025: LD_VAR 0 7
37029: PPUSH
37030: LD_INT 3
37032: PPUSH
37033: CALL_OW 259
37037: PUSH
37038: LD_INT 3
37040: MUL
37041: MUL
37042: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37043: LD_VAR 0 6
37047: PPUSH
37048: CALL_OW 264
37052: PUSH
37053: LD_INT 5
37055: PUSH
37056: LD_INT 6
37058: PUSH
37059: LD_INT 46
37061: PUSH
37062: LD_INT 44
37064: PUSH
37065: LD_INT 47
37067: PUSH
37068: LD_INT 45
37070: PUSH
37071: LD_INT 28
37073: PUSH
37074: LD_INT 7
37076: PUSH
37077: LD_INT 27
37079: PUSH
37080: LD_INT 29
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: IN
37095: PUSH
37096: LD_VAR 0 1
37100: PPUSH
37101: LD_INT 52
37103: PPUSH
37104: CALL_OW 321
37108: PUSH
37109: LD_INT 2
37111: EQUAL
37112: AND
37113: IFFALSE 37130
// bpoints := bpoints * 1.2 ;
37115: LD_ADDR_VAR 0 10
37119: PUSH
37120: LD_VAR 0 10
37124: PUSH
37125: LD_REAL  1.20000000000000E+0000
37128: MUL
37129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37130: LD_VAR 0 6
37134: PPUSH
37135: CALL_OW 264
37139: PUSH
37140: LD_INT 6
37142: PUSH
37143: LD_INT 46
37145: PUSH
37146: LD_INT 47
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: LIST
37153: IN
37154: IFFALSE 37171
// bpoints := bpoints * 1.2 ;
37156: LD_ADDR_VAR 0 10
37160: PUSH
37161: LD_VAR 0 10
37165: PUSH
37166: LD_REAL  1.20000000000000E+0000
37169: MUL
37170: ST_TO_ADDR
// end ; unit_building :
37171: GO 37185
37173: LD_INT 3
37175: DOUBLE
37176: EQUAL
37177: IFTRUE 37181
37179: GO 37184
37181: POP
// ; end ;
37182: GO 37185
37184: POP
// for j = 1 to 3 do
37185: LD_ADDR_VAR 0 7
37189: PUSH
37190: DOUBLE
37191: LD_INT 1
37193: DEC
37194: ST_TO_ADDR
37195: LD_INT 3
37197: PUSH
37198: FOR_TO
37199: IFFALSE 37252
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37201: LD_ADDR_VAR 0 5
37205: PUSH
37206: LD_VAR 0 5
37210: PPUSH
37211: LD_VAR 0 7
37215: PPUSH
37216: LD_VAR 0 5
37220: PUSH
37221: LD_VAR 0 7
37225: ARRAY
37226: PUSH
37227: LD_VAR 0 9
37231: PUSH
37232: LD_VAR 0 7
37236: ARRAY
37237: PUSH
37238: LD_VAR 0 10
37242: MUL
37243: PLUS
37244: PPUSH
37245: CALL_OW 1
37249: ST_TO_ADDR
37250: GO 37198
37252: POP
37253: POP
// end ;
37254: GO 35733
37256: POP
37257: POP
// result := Replace ( result , 4 , tmp ) ;
37258: LD_ADDR_VAR 0 5
37262: PUSH
37263: LD_VAR 0 5
37267: PPUSH
37268: LD_INT 4
37270: PPUSH
37271: LD_VAR 0 8
37275: PPUSH
37276: CALL_OW 1
37280: ST_TO_ADDR
// end ;
37281: LD_VAR 0 5
37285: RET
// export function DangerAtRange ( unit , range ) ; begin
37286: LD_INT 0
37288: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37289: LD_ADDR_VAR 0 3
37293: PUSH
37294: LD_VAR 0 1
37298: PPUSH
37299: CALL_OW 255
37303: PPUSH
37304: LD_VAR 0 1
37308: PPUSH
37309: CALL_OW 250
37313: PPUSH
37314: LD_VAR 0 1
37318: PPUSH
37319: CALL_OW 251
37323: PPUSH
37324: LD_VAR 0 2
37328: PPUSH
37329: CALL 35585 0 4
37333: ST_TO_ADDR
// end ;
37334: LD_VAR 0 3
37338: RET
// export function DangerInArea ( side , area ) ; begin
37339: LD_INT 0
37341: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37342: LD_ADDR_VAR 0 3
37346: PUSH
37347: LD_VAR 0 2
37351: PPUSH
37352: LD_INT 81
37354: PUSH
37355: LD_VAR 0 1
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PPUSH
37364: CALL_OW 70
37368: ST_TO_ADDR
// end ;
37369: LD_VAR 0 3
37373: RET
// export function IsExtension ( b ) ; begin
37374: LD_INT 0
37376: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37377: LD_ADDR_VAR 0 2
37381: PUSH
37382: LD_VAR 0 1
37386: PUSH
37387: LD_INT 23
37389: PUSH
37390: LD_INT 20
37392: PUSH
37393: LD_INT 22
37395: PUSH
37396: LD_INT 17
37398: PUSH
37399: LD_INT 24
37401: PUSH
37402: LD_INT 21
37404: PUSH
37405: LD_INT 19
37407: PUSH
37408: LD_INT 16
37410: PUSH
37411: LD_INT 25
37413: PUSH
37414: LD_INT 18
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: IN
37429: ST_TO_ADDR
// end ;
37430: LD_VAR 0 2
37434: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37435: LD_INT 0
37437: PPUSH
37438: PPUSH
37439: PPUSH
// result := [ ] ;
37440: LD_ADDR_VAR 0 4
37444: PUSH
37445: EMPTY
37446: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37447: LD_ADDR_VAR 0 5
37451: PUSH
37452: LD_VAR 0 2
37456: PPUSH
37457: LD_INT 21
37459: PUSH
37460: LD_INT 3
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PPUSH
37467: CALL_OW 70
37471: ST_TO_ADDR
// if not tmp then
37472: LD_VAR 0 5
37476: NOT
37477: IFFALSE 37481
// exit ;
37479: GO 37545
// if checkLink then
37481: LD_VAR 0 3
37485: IFFALSE 37535
// begin for i in tmp do
37487: LD_ADDR_VAR 0 6
37491: PUSH
37492: LD_VAR 0 5
37496: PUSH
37497: FOR_IN
37498: IFFALSE 37533
// if GetBase ( i ) <> base then
37500: LD_VAR 0 6
37504: PPUSH
37505: CALL_OW 274
37509: PUSH
37510: LD_VAR 0 1
37514: NONEQUAL
37515: IFFALSE 37531
// ComLinkToBase ( base , i ) ;
37517: LD_VAR 0 1
37521: PPUSH
37522: LD_VAR 0 6
37526: PPUSH
37527: CALL_OW 169
37531: GO 37497
37533: POP
37534: POP
// end ; result := tmp ;
37535: LD_ADDR_VAR 0 4
37539: PUSH
37540: LD_VAR 0 5
37544: ST_TO_ADDR
// end ;
37545: LD_VAR 0 4
37549: RET
// export function ComComplete ( units , b ) ; var i ; begin
37550: LD_INT 0
37552: PPUSH
37553: PPUSH
// if not units then
37554: LD_VAR 0 1
37558: NOT
37559: IFFALSE 37563
// exit ;
37561: GO 37653
// for i in units do
37563: LD_ADDR_VAR 0 4
37567: PUSH
37568: LD_VAR 0 1
37572: PUSH
37573: FOR_IN
37574: IFFALSE 37651
// if BuildingStatus ( b ) = bs_build then
37576: LD_VAR 0 2
37580: PPUSH
37581: CALL_OW 461
37585: PUSH
37586: LD_INT 1
37588: EQUAL
37589: IFFALSE 37649
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37591: LD_VAR 0 4
37595: PPUSH
37596: LD_STRING h
37598: PUSH
37599: LD_VAR 0 2
37603: PPUSH
37604: CALL_OW 250
37608: PUSH
37609: LD_VAR 0 2
37613: PPUSH
37614: CALL_OW 251
37618: PUSH
37619: LD_VAR 0 2
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: PUSH
37642: EMPTY
37643: LIST
37644: PPUSH
37645: CALL_OW 446
37649: GO 37573
37651: POP
37652: POP
// end ;
37653: LD_VAR 0 3
37657: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37658: LD_INT 0
37660: PPUSH
37661: PPUSH
37662: PPUSH
37663: PPUSH
37664: PPUSH
37665: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37666: LD_VAR 0 1
37670: NOT
37671: PUSH
37672: LD_VAR 0 1
37676: PPUSH
37677: CALL_OW 263
37681: PUSH
37682: LD_INT 2
37684: NONEQUAL
37685: OR
37686: IFFALSE 37690
// exit ;
37688: GO 38006
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37690: LD_ADDR_VAR 0 6
37694: PUSH
37695: LD_INT 22
37697: PUSH
37698: LD_VAR 0 1
37702: PPUSH
37703: CALL_OW 255
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: LD_INT 30
37717: PUSH
37718: LD_INT 36
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 34
37727: PUSH
37728: LD_INT 31
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: LIST
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PPUSH
37744: CALL_OW 69
37748: ST_TO_ADDR
// if not tmp then
37749: LD_VAR 0 6
37753: NOT
37754: IFFALSE 37758
// exit ;
37756: GO 38006
// result := [ ] ;
37758: LD_ADDR_VAR 0 2
37762: PUSH
37763: EMPTY
37764: ST_TO_ADDR
// for i in tmp do
37765: LD_ADDR_VAR 0 3
37769: PUSH
37770: LD_VAR 0 6
37774: PUSH
37775: FOR_IN
37776: IFFALSE 37847
// begin t := UnitsInside ( i ) ;
37778: LD_ADDR_VAR 0 4
37782: PUSH
37783: LD_VAR 0 3
37787: PPUSH
37788: CALL_OW 313
37792: ST_TO_ADDR
// if t then
37793: LD_VAR 0 4
37797: IFFALSE 37845
// for j in t do
37799: LD_ADDR_VAR 0 7
37803: PUSH
37804: LD_VAR 0 4
37808: PUSH
37809: FOR_IN
37810: IFFALSE 37843
// result := Replace ( result , result + 1 , j ) ;
37812: LD_ADDR_VAR 0 2
37816: PUSH
37817: LD_VAR 0 2
37821: PPUSH
37822: LD_VAR 0 2
37826: PUSH
37827: LD_INT 1
37829: PLUS
37830: PPUSH
37831: LD_VAR 0 7
37835: PPUSH
37836: CALL_OW 1
37840: ST_TO_ADDR
37841: GO 37809
37843: POP
37844: POP
// end ;
37845: GO 37775
37847: POP
37848: POP
// if not result then
37849: LD_VAR 0 2
37853: NOT
37854: IFFALSE 37858
// exit ;
37856: GO 38006
// mech := result [ 1 ] ;
37858: LD_ADDR_VAR 0 5
37862: PUSH
37863: LD_VAR 0 2
37867: PUSH
37868: LD_INT 1
37870: ARRAY
37871: ST_TO_ADDR
// if result > 1 then
37872: LD_VAR 0 2
37876: PUSH
37877: LD_INT 1
37879: GREATER
37880: IFFALSE 37992
// begin for i = 2 to result do
37882: LD_ADDR_VAR 0 3
37886: PUSH
37887: DOUBLE
37888: LD_INT 2
37890: DEC
37891: ST_TO_ADDR
37892: LD_VAR 0 2
37896: PUSH
37897: FOR_TO
37898: IFFALSE 37990
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37900: LD_ADDR_VAR 0 4
37904: PUSH
37905: LD_VAR 0 2
37909: PUSH
37910: LD_VAR 0 3
37914: ARRAY
37915: PPUSH
37916: LD_INT 3
37918: PPUSH
37919: CALL_OW 259
37923: PUSH
37924: LD_VAR 0 2
37928: PUSH
37929: LD_VAR 0 3
37933: ARRAY
37934: PPUSH
37935: CALL_OW 432
37939: MINUS
37940: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37941: LD_VAR 0 4
37945: PUSH
37946: LD_VAR 0 5
37950: PPUSH
37951: LD_INT 3
37953: PPUSH
37954: CALL_OW 259
37958: PUSH
37959: LD_VAR 0 5
37963: PPUSH
37964: CALL_OW 432
37968: MINUS
37969: GREATEREQUAL
37970: IFFALSE 37988
// mech := result [ i ] ;
37972: LD_ADDR_VAR 0 5
37976: PUSH
37977: LD_VAR 0 2
37981: PUSH
37982: LD_VAR 0 3
37986: ARRAY
37987: ST_TO_ADDR
// end ;
37988: GO 37897
37990: POP
37991: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37992: LD_VAR 0 1
37996: PPUSH
37997: LD_VAR 0 5
38001: PPUSH
38002: CALL_OW 135
// end ;
38006: LD_VAR 0 2
38010: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38011: LD_INT 0
38013: PPUSH
38014: PPUSH
38015: PPUSH
38016: PPUSH
38017: PPUSH
38018: PPUSH
38019: PPUSH
38020: PPUSH
38021: PPUSH
38022: PPUSH
38023: PPUSH
38024: PPUSH
38025: PPUSH
// result := [ ] ;
38026: LD_ADDR_VAR 0 7
38030: PUSH
38031: EMPTY
38032: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38033: LD_VAR 0 1
38037: PPUSH
38038: CALL_OW 266
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: IN
38053: NOT
38054: IFFALSE 38058
// exit ;
38056: GO 39692
// if name then
38058: LD_VAR 0 3
38062: IFFALSE 38078
// SetBName ( base_dep , name ) ;
38064: LD_VAR 0 1
38068: PPUSH
38069: LD_VAR 0 3
38073: PPUSH
38074: CALL_OW 500
// base := GetBase ( base_dep ) ;
38078: LD_ADDR_VAR 0 15
38082: PUSH
38083: LD_VAR 0 1
38087: PPUSH
38088: CALL_OW 274
38092: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38093: LD_ADDR_VAR 0 16
38097: PUSH
38098: LD_VAR 0 1
38102: PPUSH
38103: CALL_OW 255
38107: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38108: LD_ADDR_VAR 0 17
38112: PUSH
38113: LD_VAR 0 1
38117: PPUSH
38118: CALL_OW 248
38122: ST_TO_ADDR
// if sources then
38123: LD_VAR 0 5
38127: IFFALSE 38174
// for i = 1 to 3 do
38129: LD_ADDR_VAR 0 8
38133: PUSH
38134: DOUBLE
38135: LD_INT 1
38137: DEC
38138: ST_TO_ADDR
38139: LD_INT 3
38141: PUSH
38142: FOR_TO
38143: IFFALSE 38172
// AddResourceType ( base , i , sources [ i ] ) ;
38145: LD_VAR 0 15
38149: PPUSH
38150: LD_VAR 0 8
38154: PPUSH
38155: LD_VAR 0 5
38159: PUSH
38160: LD_VAR 0 8
38164: ARRAY
38165: PPUSH
38166: CALL_OW 276
38170: GO 38142
38172: POP
38173: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38174: LD_ADDR_VAR 0 18
38178: PUSH
38179: LD_VAR 0 15
38183: PPUSH
38184: LD_VAR 0 2
38188: PPUSH
38189: LD_INT 1
38191: PPUSH
38192: CALL 37435 0 3
38196: ST_TO_ADDR
// InitHc ;
38197: CALL_OW 19
// InitUc ;
38201: CALL_OW 18
// uc_side := side ;
38205: LD_ADDR_OWVAR 20
38209: PUSH
38210: LD_VAR 0 16
38214: ST_TO_ADDR
// uc_nation := nation ;
38215: LD_ADDR_OWVAR 21
38219: PUSH
38220: LD_VAR 0 17
38224: ST_TO_ADDR
// if buildings then
38225: LD_VAR 0 18
38229: IFFALSE 39551
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38231: LD_ADDR_VAR 0 19
38235: PUSH
38236: LD_VAR 0 18
38240: PPUSH
38241: LD_INT 2
38243: PUSH
38244: LD_INT 30
38246: PUSH
38247: LD_INT 29
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 30
38256: PUSH
38257: LD_INT 30
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: LIST
38268: PPUSH
38269: CALL_OW 72
38273: ST_TO_ADDR
// if tmp then
38274: LD_VAR 0 19
38278: IFFALSE 38326
// for i in tmp do
38280: LD_ADDR_VAR 0 8
38284: PUSH
38285: LD_VAR 0 19
38289: PUSH
38290: FOR_IN
38291: IFFALSE 38324
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38293: LD_VAR 0 8
38297: PPUSH
38298: CALL_OW 250
38302: PPUSH
38303: LD_VAR 0 8
38307: PPUSH
38308: CALL_OW 251
38312: PPUSH
38313: LD_VAR 0 16
38317: PPUSH
38318: CALL_OW 441
38322: GO 38290
38324: POP
38325: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38326: LD_VAR 0 18
38330: PPUSH
38331: LD_INT 2
38333: PUSH
38334: LD_INT 30
38336: PUSH
38337: LD_INT 32
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 30
38346: PUSH
38347: LD_INT 33
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: LIST
38358: PPUSH
38359: CALL_OW 72
38363: IFFALSE 38451
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38365: LD_ADDR_VAR 0 8
38369: PUSH
38370: LD_VAR 0 18
38374: PPUSH
38375: LD_INT 2
38377: PUSH
38378: LD_INT 30
38380: PUSH
38381: LD_INT 32
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 30
38390: PUSH
38391: LD_INT 33
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: LIST
38402: PPUSH
38403: CALL_OW 72
38407: PUSH
38408: FOR_IN
38409: IFFALSE 38449
// begin if not GetBWeapon ( i ) then
38411: LD_VAR 0 8
38415: PPUSH
38416: CALL_OW 269
38420: NOT
38421: IFFALSE 38447
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38423: LD_VAR 0 8
38427: PPUSH
38428: LD_VAR 0 8
38432: PPUSH
38433: LD_VAR 0 2
38437: PPUSH
38438: CALL 39697 0 2
38442: PPUSH
38443: CALL_OW 431
// end ;
38447: GO 38408
38449: POP
38450: POP
// end ; for i = 1 to personel do
38451: LD_ADDR_VAR 0 8
38455: PUSH
38456: DOUBLE
38457: LD_INT 1
38459: DEC
38460: ST_TO_ADDR
38461: LD_VAR 0 6
38465: PUSH
38466: FOR_TO
38467: IFFALSE 39531
// begin if i > 4 then
38469: LD_VAR 0 8
38473: PUSH
38474: LD_INT 4
38476: GREATER
38477: IFFALSE 38481
// break ;
38479: GO 39531
// case i of 1 :
38481: LD_VAR 0 8
38485: PUSH
38486: LD_INT 1
38488: DOUBLE
38489: EQUAL
38490: IFTRUE 38494
38492: GO 38574
38494: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38495: LD_ADDR_VAR 0 12
38499: PUSH
38500: LD_VAR 0 18
38504: PPUSH
38505: LD_INT 22
38507: PUSH
38508: LD_VAR 0 16
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 58
38519: PUSH
38520: EMPTY
38521: LIST
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: LD_INT 30
38528: PUSH
38529: LD_INT 32
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 30
38538: PUSH
38539: LD_INT 4
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 30
38548: PUSH
38549: LD_INT 5
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: LIST
38566: PPUSH
38567: CALL_OW 72
38571: ST_TO_ADDR
38572: GO 38796
38574: LD_INT 2
38576: DOUBLE
38577: EQUAL
38578: IFTRUE 38582
38580: GO 38644
38582: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38583: LD_ADDR_VAR 0 12
38587: PUSH
38588: LD_VAR 0 18
38592: PPUSH
38593: LD_INT 22
38595: PUSH
38596: LD_VAR 0 16
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: LD_INT 30
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 30
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: LIST
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PPUSH
38637: CALL_OW 72
38641: ST_TO_ADDR
38642: GO 38796
38644: LD_INT 3
38646: DOUBLE
38647: EQUAL
38648: IFTRUE 38652
38650: GO 38714
38652: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38653: LD_ADDR_VAR 0 12
38657: PUSH
38658: LD_VAR 0 18
38662: PPUSH
38663: LD_INT 22
38665: PUSH
38666: LD_VAR 0 16
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 2
38677: PUSH
38678: LD_INT 30
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 30
38690: PUSH
38691: LD_INT 3
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PPUSH
38707: CALL_OW 72
38711: ST_TO_ADDR
38712: GO 38796
38714: LD_INT 4
38716: DOUBLE
38717: EQUAL
38718: IFTRUE 38722
38720: GO 38795
38722: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38723: LD_ADDR_VAR 0 12
38727: PUSH
38728: LD_VAR 0 18
38732: PPUSH
38733: LD_INT 22
38735: PUSH
38736: LD_VAR 0 16
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 2
38747: PUSH
38748: LD_INT 30
38750: PUSH
38751: LD_INT 6
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 30
38760: PUSH
38761: LD_INT 7
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 30
38770: PUSH
38771: LD_INT 8
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PPUSH
38788: CALL_OW 72
38792: ST_TO_ADDR
38793: GO 38796
38795: POP
// if i = 1 then
38796: LD_VAR 0 8
38800: PUSH
38801: LD_INT 1
38803: EQUAL
38804: IFFALSE 38915
// begin tmp := [ ] ;
38806: LD_ADDR_VAR 0 19
38810: PUSH
38811: EMPTY
38812: ST_TO_ADDR
// for j in f do
38813: LD_ADDR_VAR 0 9
38817: PUSH
38818: LD_VAR 0 12
38822: PUSH
38823: FOR_IN
38824: IFFALSE 38897
// if GetBType ( j ) = b_bunker then
38826: LD_VAR 0 9
38830: PPUSH
38831: CALL_OW 266
38835: PUSH
38836: LD_INT 32
38838: EQUAL
38839: IFFALSE 38866
// tmp := Insert ( tmp , 1 , j ) else
38841: LD_ADDR_VAR 0 19
38845: PUSH
38846: LD_VAR 0 19
38850: PPUSH
38851: LD_INT 1
38853: PPUSH
38854: LD_VAR 0 9
38858: PPUSH
38859: CALL_OW 2
38863: ST_TO_ADDR
38864: GO 38895
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38866: LD_ADDR_VAR 0 19
38870: PUSH
38871: LD_VAR 0 19
38875: PPUSH
38876: LD_VAR 0 19
38880: PUSH
38881: LD_INT 1
38883: PLUS
38884: PPUSH
38885: LD_VAR 0 9
38889: PPUSH
38890: CALL_OW 2
38894: ST_TO_ADDR
38895: GO 38823
38897: POP
38898: POP
// if tmp then
38899: LD_VAR 0 19
38903: IFFALSE 38915
// f := tmp ;
38905: LD_ADDR_VAR 0 12
38909: PUSH
38910: LD_VAR 0 19
38914: ST_TO_ADDR
// end ; x := personel [ i ] ;
38915: LD_ADDR_VAR 0 13
38919: PUSH
38920: LD_VAR 0 6
38924: PUSH
38925: LD_VAR 0 8
38929: ARRAY
38930: ST_TO_ADDR
// if x = - 1 then
38931: LD_VAR 0 13
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: EQUAL
38940: IFFALSE 39149
// begin for j in f do
38942: LD_ADDR_VAR 0 9
38946: PUSH
38947: LD_VAR 0 12
38951: PUSH
38952: FOR_IN
38953: IFFALSE 39145
// repeat InitHc ;
38955: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38959: LD_VAR 0 9
38963: PPUSH
38964: CALL_OW 266
38968: PUSH
38969: LD_INT 5
38971: EQUAL
38972: IFFALSE 39042
// begin if UnitsInside ( j ) < 3 then
38974: LD_VAR 0 9
38978: PPUSH
38979: CALL_OW 313
38983: PUSH
38984: LD_INT 3
38986: LESS
38987: IFFALSE 39023
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38989: LD_INT 0
38991: PPUSH
38992: LD_INT 5
38994: PUSH
38995: LD_INT 8
38997: PUSH
38998: LD_INT 9
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: LIST
39005: PUSH
39006: LD_VAR 0 17
39010: ARRAY
39011: PPUSH
39012: LD_VAR 0 4
39016: PPUSH
39017: CALL_OW 380
39021: GO 39040
// PrepareHuman ( false , i , skill ) ;
39023: LD_INT 0
39025: PPUSH
39026: LD_VAR 0 8
39030: PPUSH
39031: LD_VAR 0 4
39035: PPUSH
39036: CALL_OW 380
// end else
39040: GO 39059
// PrepareHuman ( false , i , skill ) ;
39042: LD_INT 0
39044: PPUSH
39045: LD_VAR 0 8
39049: PPUSH
39050: LD_VAR 0 4
39054: PPUSH
39055: CALL_OW 380
// un := CreateHuman ;
39059: LD_ADDR_VAR 0 14
39063: PUSH
39064: CALL_OW 44
39068: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39069: LD_ADDR_VAR 0 7
39073: PUSH
39074: LD_VAR 0 7
39078: PPUSH
39079: LD_INT 1
39081: PPUSH
39082: LD_VAR 0 14
39086: PPUSH
39087: CALL_OW 2
39091: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39092: LD_VAR 0 14
39096: PPUSH
39097: LD_VAR 0 9
39101: PPUSH
39102: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39106: LD_VAR 0 9
39110: PPUSH
39111: CALL_OW 313
39115: PUSH
39116: LD_INT 6
39118: EQUAL
39119: PUSH
39120: LD_VAR 0 9
39124: PPUSH
39125: CALL_OW 266
39129: PUSH
39130: LD_INT 32
39132: PUSH
39133: LD_INT 31
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: IN
39140: OR
39141: IFFALSE 38955
39143: GO 38952
39145: POP
39146: POP
// end else
39147: GO 39529
// for j = 1 to x do
39149: LD_ADDR_VAR 0 9
39153: PUSH
39154: DOUBLE
39155: LD_INT 1
39157: DEC
39158: ST_TO_ADDR
39159: LD_VAR 0 13
39163: PUSH
39164: FOR_TO
39165: IFFALSE 39527
// begin InitHc ;
39167: CALL_OW 19
// if not f then
39171: LD_VAR 0 12
39175: NOT
39176: IFFALSE 39265
// begin PrepareHuman ( false , i , skill ) ;
39178: LD_INT 0
39180: PPUSH
39181: LD_VAR 0 8
39185: PPUSH
39186: LD_VAR 0 4
39190: PPUSH
39191: CALL_OW 380
// un := CreateHuman ;
39195: LD_ADDR_VAR 0 14
39199: PUSH
39200: CALL_OW 44
39204: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39205: LD_ADDR_VAR 0 7
39209: PUSH
39210: LD_VAR 0 7
39214: PPUSH
39215: LD_INT 1
39217: PPUSH
39218: LD_VAR 0 14
39222: PPUSH
39223: CALL_OW 2
39227: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39228: LD_VAR 0 14
39232: PPUSH
39233: LD_VAR 0 1
39237: PPUSH
39238: CALL_OW 250
39242: PPUSH
39243: LD_VAR 0 1
39247: PPUSH
39248: CALL_OW 251
39252: PPUSH
39253: LD_INT 10
39255: PPUSH
39256: LD_INT 0
39258: PPUSH
39259: CALL_OW 50
// continue ;
39263: GO 39164
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39265: LD_VAR 0 12
39269: PUSH
39270: LD_INT 1
39272: ARRAY
39273: PPUSH
39274: CALL_OW 313
39278: PUSH
39279: LD_VAR 0 12
39283: PUSH
39284: LD_INT 1
39286: ARRAY
39287: PPUSH
39288: CALL_OW 266
39292: PUSH
39293: LD_INT 32
39295: PUSH
39296: LD_INT 31
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: IN
39303: AND
39304: PUSH
39305: LD_VAR 0 12
39309: PUSH
39310: LD_INT 1
39312: ARRAY
39313: PPUSH
39314: CALL_OW 313
39318: PUSH
39319: LD_INT 6
39321: EQUAL
39322: OR
39323: IFFALSE 39343
// f := Delete ( f , 1 ) ;
39325: LD_ADDR_VAR 0 12
39329: PUSH
39330: LD_VAR 0 12
39334: PPUSH
39335: LD_INT 1
39337: PPUSH
39338: CALL_OW 3
39342: ST_TO_ADDR
// if not f then
39343: LD_VAR 0 12
39347: NOT
39348: IFFALSE 39366
// begin x := x + 2 ;
39350: LD_ADDR_VAR 0 13
39354: PUSH
39355: LD_VAR 0 13
39359: PUSH
39360: LD_INT 2
39362: PLUS
39363: ST_TO_ADDR
// continue ;
39364: GO 39164
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39366: LD_VAR 0 12
39370: PUSH
39371: LD_INT 1
39373: ARRAY
39374: PPUSH
39375: CALL_OW 266
39379: PUSH
39380: LD_INT 5
39382: EQUAL
39383: IFFALSE 39457
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39385: LD_VAR 0 12
39389: PUSH
39390: LD_INT 1
39392: ARRAY
39393: PPUSH
39394: CALL_OW 313
39398: PUSH
39399: LD_INT 3
39401: LESS
39402: IFFALSE 39438
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39404: LD_INT 0
39406: PPUSH
39407: LD_INT 5
39409: PUSH
39410: LD_INT 8
39412: PUSH
39413: LD_INT 9
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: PUSH
39421: LD_VAR 0 17
39425: ARRAY
39426: PPUSH
39427: LD_VAR 0 4
39431: PPUSH
39432: CALL_OW 380
39436: GO 39455
// PrepareHuman ( false , i , skill ) ;
39438: LD_INT 0
39440: PPUSH
39441: LD_VAR 0 8
39445: PPUSH
39446: LD_VAR 0 4
39450: PPUSH
39451: CALL_OW 380
// end else
39455: GO 39474
// PrepareHuman ( false , i , skill ) ;
39457: LD_INT 0
39459: PPUSH
39460: LD_VAR 0 8
39464: PPUSH
39465: LD_VAR 0 4
39469: PPUSH
39470: CALL_OW 380
// un := CreateHuman ;
39474: LD_ADDR_VAR 0 14
39478: PUSH
39479: CALL_OW 44
39483: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39484: LD_ADDR_VAR 0 7
39488: PUSH
39489: LD_VAR 0 7
39493: PPUSH
39494: LD_INT 1
39496: PPUSH
39497: LD_VAR 0 14
39501: PPUSH
39502: CALL_OW 2
39506: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39507: LD_VAR 0 14
39511: PPUSH
39512: LD_VAR 0 12
39516: PUSH
39517: LD_INT 1
39519: ARRAY
39520: PPUSH
39521: CALL_OW 52
// end ;
39525: GO 39164
39527: POP
39528: POP
// end ;
39529: GO 38466
39531: POP
39532: POP
// result := result ^ buildings ;
39533: LD_ADDR_VAR 0 7
39537: PUSH
39538: LD_VAR 0 7
39542: PUSH
39543: LD_VAR 0 18
39547: ADD
39548: ST_TO_ADDR
// end else
39549: GO 39692
// begin for i = 1 to personel do
39551: LD_ADDR_VAR 0 8
39555: PUSH
39556: DOUBLE
39557: LD_INT 1
39559: DEC
39560: ST_TO_ADDR
39561: LD_VAR 0 6
39565: PUSH
39566: FOR_TO
39567: IFFALSE 39690
// begin if i > 4 then
39569: LD_VAR 0 8
39573: PUSH
39574: LD_INT 4
39576: GREATER
39577: IFFALSE 39581
// break ;
39579: GO 39690
// x := personel [ i ] ;
39581: LD_ADDR_VAR 0 13
39585: PUSH
39586: LD_VAR 0 6
39590: PUSH
39591: LD_VAR 0 8
39595: ARRAY
39596: ST_TO_ADDR
// if x = - 1 then
39597: LD_VAR 0 13
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: EQUAL
39606: IFFALSE 39610
// continue ;
39608: GO 39566
// PrepareHuman ( false , i , skill ) ;
39610: LD_INT 0
39612: PPUSH
39613: LD_VAR 0 8
39617: PPUSH
39618: LD_VAR 0 4
39622: PPUSH
39623: CALL_OW 380
// un := CreateHuman ;
39627: LD_ADDR_VAR 0 14
39631: PUSH
39632: CALL_OW 44
39636: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39637: LD_VAR 0 14
39641: PPUSH
39642: LD_VAR 0 1
39646: PPUSH
39647: CALL_OW 250
39651: PPUSH
39652: LD_VAR 0 1
39656: PPUSH
39657: CALL_OW 251
39661: PPUSH
39662: LD_INT 10
39664: PPUSH
39665: LD_INT 0
39667: PPUSH
39668: CALL_OW 50
// result := result ^ un ;
39672: LD_ADDR_VAR 0 7
39676: PUSH
39677: LD_VAR 0 7
39681: PUSH
39682: LD_VAR 0 14
39686: ADD
39687: ST_TO_ADDR
// end ;
39688: GO 39566
39690: POP
39691: POP
// end ; end ;
39692: LD_VAR 0 7
39696: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39697: LD_INT 0
39699: PPUSH
39700: PPUSH
39701: PPUSH
39702: PPUSH
39703: PPUSH
39704: PPUSH
39705: PPUSH
39706: PPUSH
39707: PPUSH
39708: PPUSH
39709: PPUSH
39710: PPUSH
39711: PPUSH
39712: PPUSH
39713: PPUSH
39714: PPUSH
// result := false ;
39715: LD_ADDR_VAR 0 3
39719: PUSH
39720: LD_INT 0
39722: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39723: LD_VAR 0 1
39727: NOT
39728: PUSH
39729: LD_VAR 0 1
39733: PPUSH
39734: CALL_OW 266
39738: PUSH
39739: LD_INT 32
39741: PUSH
39742: LD_INT 33
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: IN
39749: NOT
39750: OR
39751: IFFALSE 39755
// exit ;
39753: GO 40864
// nat := GetNation ( tower ) ;
39755: LD_ADDR_VAR 0 12
39759: PUSH
39760: LD_VAR 0 1
39764: PPUSH
39765: CALL_OW 248
39769: ST_TO_ADDR
// side := GetSide ( tower ) ;
39770: LD_ADDR_VAR 0 16
39774: PUSH
39775: LD_VAR 0 1
39779: PPUSH
39780: CALL_OW 255
39784: ST_TO_ADDR
// x := GetX ( tower ) ;
39785: LD_ADDR_VAR 0 10
39789: PUSH
39790: LD_VAR 0 1
39794: PPUSH
39795: CALL_OW 250
39799: ST_TO_ADDR
// y := GetY ( tower ) ;
39800: LD_ADDR_VAR 0 11
39804: PUSH
39805: LD_VAR 0 1
39809: PPUSH
39810: CALL_OW 251
39814: ST_TO_ADDR
// if not x or not y then
39815: LD_VAR 0 10
39819: NOT
39820: PUSH
39821: LD_VAR 0 11
39825: NOT
39826: OR
39827: IFFALSE 39831
// exit ;
39829: GO 40864
// weapon := 0 ;
39831: LD_ADDR_VAR 0 18
39835: PUSH
39836: LD_INT 0
39838: ST_TO_ADDR
// fac_list := [ ] ;
39839: LD_ADDR_VAR 0 17
39843: PUSH
39844: EMPTY
39845: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39846: LD_ADDR_VAR 0 6
39850: PUSH
39851: LD_VAR 0 1
39855: PPUSH
39856: CALL_OW 274
39860: PPUSH
39861: LD_VAR 0 2
39865: PPUSH
39866: LD_INT 0
39868: PPUSH
39869: CALL 37435 0 3
39873: PPUSH
39874: LD_INT 30
39876: PUSH
39877: LD_INT 3
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PPUSH
39884: CALL_OW 72
39888: ST_TO_ADDR
// if not factories then
39889: LD_VAR 0 6
39893: NOT
39894: IFFALSE 39898
// exit ;
39896: GO 40864
// for i in factories do
39898: LD_ADDR_VAR 0 8
39902: PUSH
39903: LD_VAR 0 6
39907: PUSH
39908: FOR_IN
39909: IFFALSE 39934
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39911: LD_ADDR_VAR 0 17
39915: PUSH
39916: LD_VAR 0 17
39920: PUSH
39921: LD_VAR 0 8
39925: PPUSH
39926: CALL_OW 478
39930: UNION
39931: ST_TO_ADDR
39932: GO 39908
39934: POP
39935: POP
// if not fac_list then
39936: LD_VAR 0 17
39940: NOT
39941: IFFALSE 39945
// exit ;
39943: GO 40864
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39945: LD_ADDR_VAR 0 5
39949: PUSH
39950: LD_INT 4
39952: PUSH
39953: LD_INT 5
39955: PUSH
39956: LD_INT 9
39958: PUSH
39959: LD_INT 10
39961: PUSH
39962: LD_INT 6
39964: PUSH
39965: LD_INT 7
39967: PUSH
39968: LD_INT 11
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 27
39982: PUSH
39983: LD_INT 28
39985: PUSH
39986: LD_INT 26
39988: PUSH
39989: LD_INT 30
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 43
40000: PUSH
40001: LD_INT 44
40003: PUSH
40004: LD_INT 46
40006: PUSH
40007: LD_INT 45
40009: PUSH
40010: LD_INT 47
40012: PUSH
40013: LD_INT 49
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: LIST
40028: PUSH
40029: LD_VAR 0 12
40033: ARRAY
40034: ST_TO_ADDR
// list := list isect fac_list ;
40035: LD_ADDR_VAR 0 5
40039: PUSH
40040: LD_VAR 0 5
40044: PUSH
40045: LD_VAR 0 17
40049: ISECT
40050: ST_TO_ADDR
// if not list then
40051: LD_VAR 0 5
40055: NOT
40056: IFFALSE 40060
// exit ;
40058: GO 40864
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40060: LD_VAR 0 12
40064: PUSH
40065: LD_INT 3
40067: EQUAL
40068: PUSH
40069: LD_INT 49
40071: PUSH
40072: LD_VAR 0 5
40076: IN
40077: AND
40078: PUSH
40079: LD_INT 31
40081: PPUSH
40082: LD_VAR 0 16
40086: PPUSH
40087: CALL_OW 321
40091: PUSH
40092: LD_INT 2
40094: EQUAL
40095: AND
40096: IFFALSE 40156
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40098: LD_INT 22
40100: PUSH
40101: LD_VAR 0 16
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 35
40112: PUSH
40113: LD_INT 49
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 91
40122: PUSH
40123: LD_VAR 0 1
40127: PUSH
40128: LD_INT 10
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: PPUSH
40141: CALL_OW 69
40145: NOT
40146: IFFALSE 40156
// weapon := ru_time_lapser ;
40148: LD_ADDR_VAR 0 18
40152: PUSH
40153: LD_INT 49
40155: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40156: LD_VAR 0 12
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: IN
40171: PUSH
40172: LD_INT 11
40174: PUSH
40175: LD_VAR 0 5
40179: IN
40180: PUSH
40181: LD_INT 30
40183: PUSH
40184: LD_VAR 0 5
40188: IN
40189: OR
40190: AND
40191: PUSH
40192: LD_INT 6
40194: PPUSH
40195: LD_VAR 0 16
40199: PPUSH
40200: CALL_OW 321
40204: PUSH
40205: LD_INT 2
40207: EQUAL
40208: AND
40209: IFFALSE 40374
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40211: LD_INT 22
40213: PUSH
40214: LD_VAR 0 16
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 2
40225: PUSH
40226: LD_INT 35
40228: PUSH
40229: LD_INT 11
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 35
40238: PUSH
40239: LD_INT 30
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 91
40253: PUSH
40254: LD_VAR 0 1
40258: PUSH
40259: LD_INT 18
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: LIST
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: PPUSH
40272: CALL_OW 69
40276: NOT
40277: PUSH
40278: LD_INT 22
40280: PUSH
40281: LD_VAR 0 16
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: LD_INT 30
40295: PUSH
40296: LD_INT 32
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 30
40305: PUSH
40306: LD_INT 33
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 91
40320: PUSH
40321: LD_VAR 0 1
40325: PUSH
40326: LD_INT 12
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: LIST
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: LIST
40338: PUSH
40339: EMPTY
40340: LIST
40341: PPUSH
40342: CALL_OW 69
40346: PUSH
40347: LD_INT 2
40349: GREATER
40350: AND
40351: IFFALSE 40374
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40353: LD_ADDR_VAR 0 18
40357: PUSH
40358: LD_INT 11
40360: PUSH
40361: LD_INT 30
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_VAR 0 12
40372: ARRAY
40373: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40374: LD_VAR 0 18
40378: NOT
40379: PUSH
40380: LD_INT 40
40382: PPUSH
40383: LD_VAR 0 16
40387: PPUSH
40388: CALL_OW 321
40392: PUSH
40393: LD_INT 2
40395: EQUAL
40396: AND
40397: PUSH
40398: LD_INT 7
40400: PUSH
40401: LD_VAR 0 5
40405: IN
40406: PUSH
40407: LD_INT 28
40409: PUSH
40410: LD_VAR 0 5
40414: IN
40415: OR
40416: PUSH
40417: LD_INT 45
40419: PUSH
40420: LD_VAR 0 5
40424: IN
40425: OR
40426: AND
40427: IFFALSE 40681
// begin hex := GetHexInfo ( x , y ) ;
40429: LD_ADDR_VAR 0 4
40433: PUSH
40434: LD_VAR 0 10
40438: PPUSH
40439: LD_VAR 0 11
40443: PPUSH
40444: CALL_OW 546
40448: ST_TO_ADDR
// if hex [ 1 ] then
40449: LD_VAR 0 4
40453: PUSH
40454: LD_INT 1
40456: ARRAY
40457: IFFALSE 40461
// exit ;
40459: GO 40864
// height := hex [ 2 ] ;
40461: LD_ADDR_VAR 0 15
40465: PUSH
40466: LD_VAR 0 4
40470: PUSH
40471: LD_INT 2
40473: ARRAY
40474: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40475: LD_ADDR_VAR 0 14
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: LD_INT 3
40488: PUSH
40489: LD_INT 5
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: ST_TO_ADDR
// for i in tmp do
40498: LD_ADDR_VAR 0 8
40502: PUSH
40503: LD_VAR 0 14
40507: PUSH
40508: FOR_IN
40509: IFFALSE 40679
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40511: LD_ADDR_VAR 0 9
40515: PUSH
40516: LD_VAR 0 10
40520: PPUSH
40521: LD_VAR 0 8
40525: PPUSH
40526: LD_INT 5
40528: PPUSH
40529: CALL_OW 272
40533: PUSH
40534: LD_VAR 0 11
40538: PPUSH
40539: LD_VAR 0 8
40543: PPUSH
40544: LD_INT 5
40546: PPUSH
40547: CALL_OW 273
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40556: LD_VAR 0 9
40560: PUSH
40561: LD_INT 1
40563: ARRAY
40564: PPUSH
40565: LD_VAR 0 9
40569: PUSH
40570: LD_INT 2
40572: ARRAY
40573: PPUSH
40574: CALL_OW 488
40578: IFFALSE 40677
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40580: LD_ADDR_VAR 0 4
40584: PUSH
40585: LD_VAR 0 9
40589: PUSH
40590: LD_INT 1
40592: ARRAY
40593: PPUSH
40594: LD_VAR 0 9
40598: PUSH
40599: LD_INT 2
40601: ARRAY
40602: PPUSH
40603: CALL_OW 546
40607: ST_TO_ADDR
// if hex [ 1 ] then
40608: LD_VAR 0 4
40612: PUSH
40613: LD_INT 1
40615: ARRAY
40616: IFFALSE 40620
// continue ;
40618: GO 40508
// h := hex [ 2 ] ;
40620: LD_ADDR_VAR 0 13
40624: PUSH
40625: LD_VAR 0 4
40629: PUSH
40630: LD_INT 2
40632: ARRAY
40633: ST_TO_ADDR
// if h + 7 < height then
40634: LD_VAR 0 13
40638: PUSH
40639: LD_INT 7
40641: PLUS
40642: PUSH
40643: LD_VAR 0 15
40647: LESS
40648: IFFALSE 40677
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40650: LD_ADDR_VAR 0 18
40654: PUSH
40655: LD_INT 7
40657: PUSH
40658: LD_INT 28
40660: PUSH
40661: LD_INT 45
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: LIST
40668: PUSH
40669: LD_VAR 0 12
40673: ARRAY
40674: ST_TO_ADDR
// break ;
40675: GO 40679
// end ; end ; end ;
40677: GO 40508
40679: POP
40680: POP
// end ; if not weapon then
40681: LD_VAR 0 18
40685: NOT
40686: IFFALSE 40746
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40688: LD_ADDR_VAR 0 5
40692: PUSH
40693: LD_VAR 0 5
40697: PUSH
40698: LD_INT 11
40700: PUSH
40701: LD_INT 30
40703: PUSH
40704: LD_INT 49
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: LIST
40711: DIFF
40712: ST_TO_ADDR
// if not list then
40713: LD_VAR 0 5
40717: NOT
40718: IFFALSE 40722
// exit ;
40720: GO 40864
// weapon := list [ rand ( 1 , list ) ] ;
40722: LD_ADDR_VAR 0 18
40726: PUSH
40727: LD_VAR 0 5
40731: PUSH
40732: LD_INT 1
40734: PPUSH
40735: LD_VAR 0 5
40739: PPUSH
40740: CALL_OW 12
40744: ARRAY
40745: ST_TO_ADDR
// end ; if weapon then
40746: LD_VAR 0 18
40750: IFFALSE 40864
// begin tmp := CostOfWeapon ( weapon ) ;
40752: LD_ADDR_VAR 0 14
40756: PUSH
40757: LD_VAR 0 18
40761: PPUSH
40762: CALL_OW 451
40766: ST_TO_ADDR
// j := GetBase ( tower ) ;
40767: LD_ADDR_VAR 0 9
40771: PUSH
40772: LD_VAR 0 1
40776: PPUSH
40777: CALL_OW 274
40781: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40782: LD_VAR 0 9
40786: PPUSH
40787: LD_INT 1
40789: PPUSH
40790: CALL_OW 275
40794: PUSH
40795: LD_VAR 0 14
40799: PUSH
40800: LD_INT 1
40802: ARRAY
40803: GREATEREQUAL
40804: PUSH
40805: LD_VAR 0 9
40809: PPUSH
40810: LD_INT 2
40812: PPUSH
40813: CALL_OW 275
40817: PUSH
40818: LD_VAR 0 14
40822: PUSH
40823: LD_INT 2
40825: ARRAY
40826: GREATEREQUAL
40827: AND
40828: PUSH
40829: LD_VAR 0 9
40833: PPUSH
40834: LD_INT 3
40836: PPUSH
40837: CALL_OW 275
40841: PUSH
40842: LD_VAR 0 14
40846: PUSH
40847: LD_INT 3
40849: ARRAY
40850: GREATEREQUAL
40851: AND
40852: IFFALSE 40864
// result := weapon ;
40854: LD_ADDR_VAR 0 3
40858: PUSH
40859: LD_VAR 0 18
40863: ST_TO_ADDR
// end ; end ;
40864: LD_VAR 0 3
40868: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40869: LD_INT 0
40871: PPUSH
40872: PPUSH
// result := true ;
40873: LD_ADDR_VAR 0 3
40877: PUSH
40878: LD_INT 1
40880: ST_TO_ADDR
// if array1 = array2 then
40881: LD_VAR 0 1
40885: PUSH
40886: LD_VAR 0 2
40890: EQUAL
40891: IFFALSE 40951
// begin for i = 1 to array1 do
40893: LD_ADDR_VAR 0 4
40897: PUSH
40898: DOUBLE
40899: LD_INT 1
40901: DEC
40902: ST_TO_ADDR
40903: LD_VAR 0 1
40907: PUSH
40908: FOR_TO
40909: IFFALSE 40947
// if array1 [ i ] <> array2 [ i ] then
40911: LD_VAR 0 1
40915: PUSH
40916: LD_VAR 0 4
40920: ARRAY
40921: PUSH
40922: LD_VAR 0 2
40926: PUSH
40927: LD_VAR 0 4
40931: ARRAY
40932: NONEQUAL
40933: IFFALSE 40945
// begin result := false ;
40935: LD_ADDR_VAR 0 3
40939: PUSH
40940: LD_INT 0
40942: ST_TO_ADDR
// break ;
40943: GO 40947
// end ;
40945: GO 40908
40947: POP
40948: POP
// end else
40949: GO 40959
// result := false ;
40951: LD_ADDR_VAR 0 3
40955: PUSH
40956: LD_INT 0
40958: ST_TO_ADDR
// end ;
40959: LD_VAR 0 3
40963: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40964: LD_INT 0
40966: PPUSH
40967: PPUSH
// if not array1 or not array2 then
40968: LD_VAR 0 1
40972: NOT
40973: PUSH
40974: LD_VAR 0 2
40978: NOT
40979: OR
40980: IFFALSE 40984
// exit ;
40982: GO 41048
// result := true ;
40984: LD_ADDR_VAR 0 3
40988: PUSH
40989: LD_INT 1
40991: ST_TO_ADDR
// for i = 1 to array1 do
40992: LD_ADDR_VAR 0 4
40996: PUSH
40997: DOUBLE
40998: LD_INT 1
41000: DEC
41001: ST_TO_ADDR
41002: LD_VAR 0 1
41006: PUSH
41007: FOR_TO
41008: IFFALSE 41046
// if array1 [ i ] <> array2 [ i ] then
41010: LD_VAR 0 1
41014: PUSH
41015: LD_VAR 0 4
41019: ARRAY
41020: PUSH
41021: LD_VAR 0 2
41025: PUSH
41026: LD_VAR 0 4
41030: ARRAY
41031: NONEQUAL
41032: IFFALSE 41044
// begin result := false ;
41034: LD_ADDR_VAR 0 3
41038: PUSH
41039: LD_INT 0
41041: ST_TO_ADDR
// break ;
41042: GO 41046
// end ;
41044: GO 41007
41046: POP
41047: POP
// end ;
41048: LD_VAR 0 3
41052: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41053: LD_INT 0
41055: PPUSH
41056: PPUSH
41057: PPUSH
// pom := GetBase ( fac ) ;
41058: LD_ADDR_VAR 0 5
41062: PUSH
41063: LD_VAR 0 1
41067: PPUSH
41068: CALL_OW 274
41072: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41073: LD_ADDR_VAR 0 4
41077: PUSH
41078: LD_VAR 0 2
41082: PUSH
41083: LD_INT 1
41085: ARRAY
41086: PPUSH
41087: LD_VAR 0 2
41091: PUSH
41092: LD_INT 2
41094: ARRAY
41095: PPUSH
41096: LD_VAR 0 2
41100: PUSH
41101: LD_INT 3
41103: ARRAY
41104: PPUSH
41105: LD_VAR 0 2
41109: PUSH
41110: LD_INT 4
41112: ARRAY
41113: PPUSH
41114: CALL_OW 449
41118: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41119: LD_ADDR_VAR 0 3
41123: PUSH
41124: LD_VAR 0 5
41128: PPUSH
41129: LD_INT 1
41131: PPUSH
41132: CALL_OW 275
41136: PUSH
41137: LD_VAR 0 4
41141: PUSH
41142: LD_INT 1
41144: ARRAY
41145: GREATEREQUAL
41146: PUSH
41147: LD_VAR 0 5
41151: PPUSH
41152: LD_INT 2
41154: PPUSH
41155: CALL_OW 275
41159: PUSH
41160: LD_VAR 0 4
41164: PUSH
41165: LD_INT 2
41167: ARRAY
41168: GREATEREQUAL
41169: AND
41170: PUSH
41171: LD_VAR 0 5
41175: PPUSH
41176: LD_INT 3
41178: PPUSH
41179: CALL_OW 275
41183: PUSH
41184: LD_VAR 0 4
41188: PUSH
41189: LD_INT 3
41191: ARRAY
41192: GREATEREQUAL
41193: AND
41194: ST_TO_ADDR
// end ;
41195: LD_VAR 0 3
41199: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41200: LD_INT 0
41202: PPUSH
41203: PPUSH
41204: PPUSH
41205: PPUSH
// pom := GetBase ( building ) ;
41206: LD_ADDR_VAR 0 3
41210: PUSH
41211: LD_VAR 0 1
41215: PPUSH
41216: CALL_OW 274
41220: ST_TO_ADDR
// if not pom then
41221: LD_VAR 0 3
41225: NOT
41226: IFFALSE 41230
// exit ;
41228: GO 41400
// btype := GetBType ( building ) ;
41230: LD_ADDR_VAR 0 5
41234: PUSH
41235: LD_VAR 0 1
41239: PPUSH
41240: CALL_OW 266
41244: ST_TO_ADDR
// if btype = b_armoury then
41245: LD_VAR 0 5
41249: PUSH
41250: LD_INT 4
41252: EQUAL
41253: IFFALSE 41263
// btype := b_barracks ;
41255: LD_ADDR_VAR 0 5
41259: PUSH
41260: LD_INT 5
41262: ST_TO_ADDR
// if btype = b_depot then
41263: LD_VAR 0 5
41267: PUSH
41268: LD_INT 0
41270: EQUAL
41271: IFFALSE 41281
// btype := b_warehouse ;
41273: LD_ADDR_VAR 0 5
41277: PUSH
41278: LD_INT 1
41280: ST_TO_ADDR
// if btype = b_workshop then
41281: LD_VAR 0 5
41285: PUSH
41286: LD_INT 2
41288: EQUAL
41289: IFFALSE 41299
// btype := b_factory ;
41291: LD_ADDR_VAR 0 5
41295: PUSH
41296: LD_INT 3
41298: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41299: LD_ADDR_VAR 0 4
41303: PUSH
41304: LD_VAR 0 5
41308: PPUSH
41309: LD_VAR 0 1
41313: PPUSH
41314: CALL_OW 248
41318: PPUSH
41319: CALL_OW 450
41323: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41324: LD_ADDR_VAR 0 2
41328: PUSH
41329: LD_VAR 0 3
41333: PPUSH
41334: LD_INT 1
41336: PPUSH
41337: CALL_OW 275
41341: PUSH
41342: LD_VAR 0 4
41346: PUSH
41347: LD_INT 1
41349: ARRAY
41350: GREATEREQUAL
41351: PUSH
41352: LD_VAR 0 3
41356: PPUSH
41357: LD_INT 2
41359: PPUSH
41360: CALL_OW 275
41364: PUSH
41365: LD_VAR 0 4
41369: PUSH
41370: LD_INT 2
41372: ARRAY
41373: GREATEREQUAL
41374: AND
41375: PUSH
41376: LD_VAR 0 3
41380: PPUSH
41381: LD_INT 3
41383: PPUSH
41384: CALL_OW 275
41388: PUSH
41389: LD_VAR 0 4
41393: PUSH
41394: LD_INT 3
41396: ARRAY
41397: GREATEREQUAL
41398: AND
41399: ST_TO_ADDR
// end ;
41400: LD_VAR 0 2
41404: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41405: LD_INT 0
41407: PPUSH
41408: PPUSH
41409: PPUSH
// pom := GetBase ( building ) ;
41410: LD_ADDR_VAR 0 4
41414: PUSH
41415: LD_VAR 0 1
41419: PPUSH
41420: CALL_OW 274
41424: ST_TO_ADDR
// if not pom then
41425: LD_VAR 0 4
41429: NOT
41430: IFFALSE 41434
// exit ;
41432: GO 41535
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41434: LD_ADDR_VAR 0 5
41438: PUSH
41439: LD_VAR 0 2
41443: PPUSH
41444: LD_VAR 0 1
41448: PPUSH
41449: CALL_OW 248
41453: PPUSH
41454: CALL_OW 450
41458: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41459: LD_ADDR_VAR 0 3
41463: PUSH
41464: LD_VAR 0 4
41468: PPUSH
41469: LD_INT 1
41471: PPUSH
41472: CALL_OW 275
41476: PUSH
41477: LD_VAR 0 5
41481: PUSH
41482: LD_INT 1
41484: ARRAY
41485: GREATEREQUAL
41486: PUSH
41487: LD_VAR 0 4
41491: PPUSH
41492: LD_INT 2
41494: PPUSH
41495: CALL_OW 275
41499: PUSH
41500: LD_VAR 0 5
41504: PUSH
41505: LD_INT 2
41507: ARRAY
41508: GREATEREQUAL
41509: AND
41510: PUSH
41511: LD_VAR 0 4
41515: PPUSH
41516: LD_INT 3
41518: PPUSH
41519: CALL_OW 275
41523: PUSH
41524: LD_VAR 0 5
41528: PUSH
41529: LD_INT 3
41531: ARRAY
41532: GREATEREQUAL
41533: AND
41534: ST_TO_ADDR
// end ;
41535: LD_VAR 0 3
41539: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41540: LD_INT 0
41542: PPUSH
41543: PPUSH
41544: PPUSH
41545: PPUSH
41546: PPUSH
41547: PPUSH
41548: PPUSH
41549: PPUSH
41550: PPUSH
41551: PPUSH
41552: PPUSH
// result := false ;
41553: LD_ADDR_VAR 0 8
41557: PUSH
41558: LD_INT 0
41560: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41561: LD_VAR 0 5
41565: NOT
41566: PUSH
41567: LD_VAR 0 1
41571: NOT
41572: OR
41573: PUSH
41574: LD_VAR 0 2
41578: NOT
41579: OR
41580: PUSH
41581: LD_VAR 0 3
41585: NOT
41586: OR
41587: IFFALSE 41591
// exit ;
41589: GO 42405
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41591: LD_ADDR_VAR 0 14
41595: PUSH
41596: LD_VAR 0 1
41600: PPUSH
41601: LD_VAR 0 2
41605: PPUSH
41606: LD_VAR 0 3
41610: PPUSH
41611: LD_VAR 0 4
41615: PPUSH
41616: LD_VAR 0 5
41620: PUSH
41621: LD_INT 1
41623: ARRAY
41624: PPUSH
41625: CALL_OW 248
41629: PPUSH
41630: LD_INT 0
41632: PPUSH
41633: CALL 43638 0 6
41637: ST_TO_ADDR
// if not hexes then
41638: LD_VAR 0 14
41642: NOT
41643: IFFALSE 41647
// exit ;
41645: GO 42405
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41647: LD_ADDR_VAR 0 17
41651: PUSH
41652: LD_VAR 0 5
41656: PPUSH
41657: LD_INT 22
41659: PUSH
41660: LD_VAR 0 13
41664: PPUSH
41665: CALL_OW 255
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: LD_INT 30
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 30
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: LIST
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PPUSH
41706: CALL_OW 72
41710: ST_TO_ADDR
// for i = 1 to hexes do
41711: LD_ADDR_VAR 0 9
41715: PUSH
41716: DOUBLE
41717: LD_INT 1
41719: DEC
41720: ST_TO_ADDR
41721: LD_VAR 0 14
41725: PUSH
41726: FOR_TO
41727: IFFALSE 42403
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41729: LD_ADDR_VAR 0 13
41733: PUSH
41734: LD_VAR 0 14
41738: PUSH
41739: LD_VAR 0 9
41743: ARRAY
41744: PUSH
41745: LD_INT 1
41747: ARRAY
41748: PPUSH
41749: LD_VAR 0 14
41753: PUSH
41754: LD_VAR 0 9
41758: ARRAY
41759: PUSH
41760: LD_INT 2
41762: ARRAY
41763: PPUSH
41764: CALL_OW 428
41768: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41769: LD_VAR 0 14
41773: PUSH
41774: LD_VAR 0 9
41778: ARRAY
41779: PUSH
41780: LD_INT 1
41782: ARRAY
41783: PPUSH
41784: LD_VAR 0 14
41788: PUSH
41789: LD_VAR 0 9
41793: ARRAY
41794: PUSH
41795: LD_INT 2
41797: ARRAY
41798: PPUSH
41799: CALL_OW 351
41803: PUSH
41804: LD_VAR 0 14
41808: PUSH
41809: LD_VAR 0 9
41813: ARRAY
41814: PUSH
41815: LD_INT 1
41817: ARRAY
41818: PPUSH
41819: LD_VAR 0 14
41823: PUSH
41824: LD_VAR 0 9
41828: ARRAY
41829: PUSH
41830: LD_INT 2
41832: ARRAY
41833: PPUSH
41834: CALL_OW 488
41838: NOT
41839: OR
41840: PUSH
41841: LD_VAR 0 13
41845: PPUSH
41846: CALL_OW 247
41850: PUSH
41851: LD_INT 3
41853: EQUAL
41854: OR
41855: IFFALSE 41861
// exit ;
41857: POP
41858: POP
41859: GO 42405
// if not tmp then
41861: LD_VAR 0 13
41865: NOT
41866: IFFALSE 41870
// continue ;
41868: GO 41726
// result := true ;
41870: LD_ADDR_VAR 0 8
41874: PUSH
41875: LD_INT 1
41877: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41878: LD_VAR 0 6
41882: PUSH
41883: LD_VAR 0 13
41887: PPUSH
41888: CALL_OW 247
41892: PUSH
41893: LD_INT 2
41895: EQUAL
41896: AND
41897: PUSH
41898: LD_VAR 0 13
41902: PPUSH
41903: CALL_OW 263
41907: PUSH
41908: LD_INT 1
41910: EQUAL
41911: AND
41912: IFFALSE 42076
// begin if IsDrivenBy ( tmp ) then
41914: LD_VAR 0 13
41918: PPUSH
41919: CALL_OW 311
41923: IFFALSE 41927
// continue ;
41925: GO 41726
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41927: LD_VAR 0 6
41931: PPUSH
41932: LD_INT 3
41934: PUSH
41935: LD_INT 60
41937: PUSH
41938: EMPTY
41939: LIST
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 3
41947: PUSH
41948: LD_INT 55
41950: PUSH
41951: EMPTY
41952: LIST
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PPUSH
41962: CALL_OW 72
41966: IFFALSE 42074
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41968: LD_ADDR_VAR 0 18
41972: PUSH
41973: LD_VAR 0 6
41977: PPUSH
41978: LD_INT 3
41980: PUSH
41981: LD_INT 60
41983: PUSH
41984: EMPTY
41985: LIST
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 3
41993: PUSH
41994: LD_INT 55
41996: PUSH
41997: EMPTY
41998: LIST
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PPUSH
42008: CALL_OW 72
42012: PUSH
42013: LD_INT 1
42015: ARRAY
42016: ST_TO_ADDR
// if IsInUnit ( driver ) then
42017: LD_VAR 0 18
42021: PPUSH
42022: CALL_OW 310
42026: IFFALSE 42037
// ComExit ( driver ) ;
42028: LD_VAR 0 18
42032: PPUSH
42033: CALL 67418 0 1
// AddComEnterUnit ( driver , tmp ) ;
42037: LD_VAR 0 18
42041: PPUSH
42042: LD_VAR 0 13
42046: PPUSH
42047: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42051: LD_VAR 0 18
42055: PPUSH
42056: LD_VAR 0 7
42060: PPUSH
42061: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42065: LD_VAR 0 18
42069: PPUSH
42070: CALL_OW 181
// end ; continue ;
42074: GO 41726
// end ; if not cleaners or not tmp in cleaners then
42076: LD_VAR 0 6
42080: NOT
42081: PUSH
42082: LD_VAR 0 13
42086: PUSH
42087: LD_VAR 0 6
42091: IN
42092: NOT
42093: OR
42094: IFFALSE 42401
// begin if dep then
42096: LD_VAR 0 17
42100: IFFALSE 42236
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42102: LD_ADDR_VAR 0 16
42106: PUSH
42107: LD_VAR 0 17
42111: PUSH
42112: LD_INT 1
42114: ARRAY
42115: PPUSH
42116: CALL_OW 250
42120: PPUSH
42121: LD_VAR 0 17
42125: PUSH
42126: LD_INT 1
42128: ARRAY
42129: PPUSH
42130: CALL_OW 254
42134: PPUSH
42135: LD_INT 5
42137: PPUSH
42138: CALL_OW 272
42142: PUSH
42143: LD_VAR 0 17
42147: PUSH
42148: LD_INT 1
42150: ARRAY
42151: PPUSH
42152: CALL_OW 251
42156: PPUSH
42157: LD_VAR 0 17
42161: PUSH
42162: LD_INT 1
42164: ARRAY
42165: PPUSH
42166: CALL_OW 254
42170: PPUSH
42171: LD_INT 5
42173: PPUSH
42174: CALL_OW 273
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42183: LD_VAR 0 16
42187: PUSH
42188: LD_INT 1
42190: ARRAY
42191: PPUSH
42192: LD_VAR 0 16
42196: PUSH
42197: LD_INT 2
42199: ARRAY
42200: PPUSH
42201: CALL_OW 488
42205: IFFALSE 42236
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42207: LD_VAR 0 13
42211: PPUSH
42212: LD_VAR 0 16
42216: PUSH
42217: LD_INT 1
42219: ARRAY
42220: PPUSH
42221: LD_VAR 0 16
42225: PUSH
42226: LD_INT 2
42228: ARRAY
42229: PPUSH
42230: CALL_OW 111
// continue ;
42234: GO 41726
// end ; end ; r := GetDir ( tmp ) ;
42236: LD_ADDR_VAR 0 15
42240: PUSH
42241: LD_VAR 0 13
42245: PPUSH
42246: CALL_OW 254
42250: ST_TO_ADDR
// if r = 5 then
42251: LD_VAR 0 15
42255: PUSH
42256: LD_INT 5
42258: EQUAL
42259: IFFALSE 42269
// r := 0 ;
42261: LD_ADDR_VAR 0 15
42265: PUSH
42266: LD_INT 0
42268: ST_TO_ADDR
// for j = r to 5 do
42269: LD_ADDR_VAR 0 10
42273: PUSH
42274: DOUBLE
42275: LD_VAR 0 15
42279: DEC
42280: ST_TO_ADDR
42281: LD_INT 5
42283: PUSH
42284: FOR_TO
42285: IFFALSE 42399
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42287: LD_ADDR_VAR 0 11
42291: PUSH
42292: LD_VAR 0 13
42296: PPUSH
42297: CALL_OW 250
42301: PPUSH
42302: LD_VAR 0 10
42306: PPUSH
42307: LD_INT 2
42309: PPUSH
42310: CALL_OW 272
42314: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42315: LD_ADDR_VAR 0 12
42319: PUSH
42320: LD_VAR 0 13
42324: PPUSH
42325: CALL_OW 251
42329: PPUSH
42330: LD_VAR 0 10
42334: PPUSH
42335: LD_INT 2
42337: PPUSH
42338: CALL_OW 273
42342: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42343: LD_VAR 0 11
42347: PPUSH
42348: LD_VAR 0 12
42352: PPUSH
42353: CALL_OW 488
42357: PUSH
42358: LD_VAR 0 11
42362: PPUSH
42363: LD_VAR 0 12
42367: PPUSH
42368: CALL_OW 428
42372: NOT
42373: AND
42374: IFFALSE 42397
// begin ComMoveXY ( tmp , _x , _y ) ;
42376: LD_VAR 0 13
42380: PPUSH
42381: LD_VAR 0 11
42385: PPUSH
42386: LD_VAR 0 12
42390: PPUSH
42391: CALL_OW 111
// break ;
42395: GO 42399
// end ; end ;
42397: GO 42284
42399: POP
42400: POP
// end ; end ;
42401: GO 41726
42403: POP
42404: POP
// end ;
42405: LD_VAR 0 8
42409: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42410: LD_INT 0
42412: PPUSH
// result := true ;
42413: LD_ADDR_VAR 0 3
42417: PUSH
42418: LD_INT 1
42420: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42421: LD_VAR 0 2
42425: PUSH
42426: LD_INT 24
42428: DOUBLE
42429: EQUAL
42430: IFTRUE 42440
42432: LD_INT 33
42434: DOUBLE
42435: EQUAL
42436: IFTRUE 42440
42438: GO 42465
42440: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42441: LD_ADDR_VAR 0 3
42445: PUSH
42446: LD_INT 32
42448: PPUSH
42449: LD_VAR 0 1
42453: PPUSH
42454: CALL_OW 321
42458: PUSH
42459: LD_INT 2
42461: EQUAL
42462: ST_TO_ADDR
42463: GO 42781
42465: LD_INT 20
42467: DOUBLE
42468: EQUAL
42469: IFTRUE 42473
42471: GO 42498
42473: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42474: LD_ADDR_VAR 0 3
42478: PUSH
42479: LD_INT 6
42481: PPUSH
42482: LD_VAR 0 1
42486: PPUSH
42487: CALL_OW 321
42491: PUSH
42492: LD_INT 2
42494: EQUAL
42495: ST_TO_ADDR
42496: GO 42781
42498: LD_INT 22
42500: DOUBLE
42501: EQUAL
42502: IFTRUE 42512
42504: LD_INT 36
42506: DOUBLE
42507: EQUAL
42508: IFTRUE 42512
42510: GO 42537
42512: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42513: LD_ADDR_VAR 0 3
42517: PUSH
42518: LD_INT 15
42520: PPUSH
42521: LD_VAR 0 1
42525: PPUSH
42526: CALL_OW 321
42530: PUSH
42531: LD_INT 2
42533: EQUAL
42534: ST_TO_ADDR
42535: GO 42781
42537: LD_INT 30
42539: DOUBLE
42540: EQUAL
42541: IFTRUE 42545
42543: GO 42570
42545: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42546: LD_ADDR_VAR 0 3
42550: PUSH
42551: LD_INT 20
42553: PPUSH
42554: LD_VAR 0 1
42558: PPUSH
42559: CALL_OW 321
42563: PUSH
42564: LD_INT 2
42566: EQUAL
42567: ST_TO_ADDR
42568: GO 42781
42570: LD_INT 28
42572: DOUBLE
42573: EQUAL
42574: IFTRUE 42584
42576: LD_INT 21
42578: DOUBLE
42579: EQUAL
42580: IFTRUE 42584
42582: GO 42609
42584: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42585: LD_ADDR_VAR 0 3
42589: PUSH
42590: LD_INT 21
42592: PPUSH
42593: LD_VAR 0 1
42597: PPUSH
42598: CALL_OW 321
42602: PUSH
42603: LD_INT 2
42605: EQUAL
42606: ST_TO_ADDR
42607: GO 42781
42609: LD_INT 16
42611: DOUBLE
42612: EQUAL
42613: IFTRUE 42617
42615: GO 42642
42617: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42618: LD_ADDR_VAR 0 3
42622: PUSH
42623: LD_INT 84
42625: PPUSH
42626: LD_VAR 0 1
42630: PPUSH
42631: CALL_OW 321
42635: PUSH
42636: LD_INT 2
42638: EQUAL
42639: ST_TO_ADDR
42640: GO 42781
42642: LD_INT 19
42644: DOUBLE
42645: EQUAL
42646: IFTRUE 42656
42648: LD_INT 23
42650: DOUBLE
42651: EQUAL
42652: IFTRUE 42656
42654: GO 42681
42656: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42657: LD_ADDR_VAR 0 3
42661: PUSH
42662: LD_INT 83
42664: PPUSH
42665: LD_VAR 0 1
42669: PPUSH
42670: CALL_OW 321
42674: PUSH
42675: LD_INT 2
42677: EQUAL
42678: ST_TO_ADDR
42679: GO 42781
42681: LD_INT 17
42683: DOUBLE
42684: EQUAL
42685: IFTRUE 42689
42687: GO 42714
42689: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42690: LD_ADDR_VAR 0 3
42694: PUSH
42695: LD_INT 39
42697: PPUSH
42698: LD_VAR 0 1
42702: PPUSH
42703: CALL_OW 321
42707: PUSH
42708: LD_INT 2
42710: EQUAL
42711: ST_TO_ADDR
42712: GO 42781
42714: LD_INT 18
42716: DOUBLE
42717: EQUAL
42718: IFTRUE 42722
42720: GO 42747
42722: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42723: LD_ADDR_VAR 0 3
42727: PUSH
42728: LD_INT 40
42730: PPUSH
42731: LD_VAR 0 1
42735: PPUSH
42736: CALL_OW 321
42740: PUSH
42741: LD_INT 2
42743: EQUAL
42744: ST_TO_ADDR
42745: GO 42781
42747: LD_INT 27
42749: DOUBLE
42750: EQUAL
42751: IFTRUE 42755
42753: GO 42780
42755: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42756: LD_ADDR_VAR 0 3
42760: PUSH
42761: LD_INT 35
42763: PPUSH
42764: LD_VAR 0 1
42768: PPUSH
42769: CALL_OW 321
42773: PUSH
42774: LD_INT 2
42776: EQUAL
42777: ST_TO_ADDR
42778: GO 42781
42780: POP
// end ;
42781: LD_VAR 0 3
42785: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42786: LD_INT 0
42788: PPUSH
42789: PPUSH
42790: PPUSH
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
42797: PPUSH
42798: PPUSH
// result := false ;
42799: LD_ADDR_VAR 0 6
42803: PUSH
42804: LD_INT 0
42806: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42807: LD_VAR 0 1
42811: NOT
42812: PUSH
42813: LD_VAR 0 1
42817: PPUSH
42818: CALL_OW 266
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: IN
42833: NOT
42834: OR
42835: PUSH
42836: LD_VAR 0 2
42840: NOT
42841: OR
42842: PUSH
42843: LD_VAR 0 5
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: LD_INT 3
42859: PUSH
42860: LD_INT 4
42862: PUSH
42863: LD_INT 5
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: IN
42874: NOT
42875: OR
42876: PUSH
42877: LD_VAR 0 3
42881: PPUSH
42882: LD_VAR 0 4
42886: PPUSH
42887: CALL_OW 488
42891: NOT
42892: OR
42893: IFFALSE 42897
// exit ;
42895: GO 43633
// side := GetSide ( depot ) ;
42897: LD_ADDR_VAR 0 9
42901: PUSH
42902: LD_VAR 0 1
42906: PPUSH
42907: CALL_OW 255
42911: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42912: LD_VAR 0 9
42916: PPUSH
42917: LD_VAR 0 2
42921: PPUSH
42922: CALL 42410 0 2
42926: NOT
42927: IFFALSE 42931
// exit ;
42929: GO 43633
// pom := GetBase ( depot ) ;
42931: LD_ADDR_VAR 0 10
42935: PUSH
42936: LD_VAR 0 1
42940: PPUSH
42941: CALL_OW 274
42945: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42946: LD_ADDR_VAR 0 11
42950: PUSH
42951: LD_VAR 0 2
42955: PPUSH
42956: LD_VAR 0 1
42960: PPUSH
42961: CALL_OW 248
42965: PPUSH
42966: CALL_OW 450
42970: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42971: LD_VAR 0 10
42975: PPUSH
42976: LD_INT 1
42978: PPUSH
42979: CALL_OW 275
42983: PUSH
42984: LD_VAR 0 11
42988: PUSH
42989: LD_INT 1
42991: ARRAY
42992: GREATEREQUAL
42993: PUSH
42994: LD_VAR 0 10
42998: PPUSH
42999: LD_INT 2
43001: PPUSH
43002: CALL_OW 275
43006: PUSH
43007: LD_VAR 0 11
43011: PUSH
43012: LD_INT 2
43014: ARRAY
43015: GREATEREQUAL
43016: AND
43017: PUSH
43018: LD_VAR 0 10
43022: PPUSH
43023: LD_INT 3
43025: PPUSH
43026: CALL_OW 275
43030: PUSH
43031: LD_VAR 0 11
43035: PUSH
43036: LD_INT 3
43038: ARRAY
43039: GREATEREQUAL
43040: AND
43041: NOT
43042: IFFALSE 43046
// exit ;
43044: GO 43633
// if GetBType ( depot ) = b_depot then
43046: LD_VAR 0 1
43050: PPUSH
43051: CALL_OW 266
43055: PUSH
43056: LD_INT 0
43058: EQUAL
43059: IFFALSE 43071
// dist := 28 else
43061: LD_ADDR_VAR 0 14
43065: PUSH
43066: LD_INT 28
43068: ST_TO_ADDR
43069: GO 43079
// dist := 36 ;
43071: LD_ADDR_VAR 0 14
43075: PUSH
43076: LD_INT 36
43078: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43079: LD_VAR 0 1
43083: PPUSH
43084: LD_VAR 0 3
43088: PPUSH
43089: LD_VAR 0 4
43093: PPUSH
43094: CALL_OW 297
43098: PUSH
43099: LD_VAR 0 14
43103: GREATER
43104: IFFALSE 43108
// exit ;
43106: GO 43633
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43108: LD_ADDR_VAR 0 12
43112: PUSH
43113: LD_VAR 0 2
43117: PPUSH
43118: LD_VAR 0 3
43122: PPUSH
43123: LD_VAR 0 4
43127: PPUSH
43128: LD_VAR 0 5
43132: PPUSH
43133: LD_VAR 0 1
43137: PPUSH
43138: CALL_OW 248
43142: PPUSH
43143: LD_INT 0
43145: PPUSH
43146: CALL 43638 0 6
43150: ST_TO_ADDR
// if not hexes then
43151: LD_VAR 0 12
43155: NOT
43156: IFFALSE 43160
// exit ;
43158: GO 43633
// hex := GetHexInfo ( x , y ) ;
43160: LD_ADDR_VAR 0 15
43164: PUSH
43165: LD_VAR 0 3
43169: PPUSH
43170: LD_VAR 0 4
43174: PPUSH
43175: CALL_OW 546
43179: ST_TO_ADDR
// if hex [ 1 ] then
43180: LD_VAR 0 15
43184: PUSH
43185: LD_INT 1
43187: ARRAY
43188: IFFALSE 43192
// exit ;
43190: GO 43633
// height := hex [ 2 ] ;
43192: LD_ADDR_VAR 0 13
43196: PUSH
43197: LD_VAR 0 15
43201: PUSH
43202: LD_INT 2
43204: ARRAY
43205: ST_TO_ADDR
// for i = 1 to hexes do
43206: LD_ADDR_VAR 0 7
43210: PUSH
43211: DOUBLE
43212: LD_INT 1
43214: DEC
43215: ST_TO_ADDR
43216: LD_VAR 0 12
43220: PUSH
43221: FOR_TO
43222: IFFALSE 43552
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43224: LD_VAR 0 12
43228: PUSH
43229: LD_VAR 0 7
43233: ARRAY
43234: PUSH
43235: LD_INT 1
43237: ARRAY
43238: PPUSH
43239: LD_VAR 0 12
43243: PUSH
43244: LD_VAR 0 7
43248: ARRAY
43249: PUSH
43250: LD_INT 2
43252: ARRAY
43253: PPUSH
43254: CALL_OW 488
43258: NOT
43259: PUSH
43260: LD_VAR 0 12
43264: PUSH
43265: LD_VAR 0 7
43269: ARRAY
43270: PUSH
43271: LD_INT 1
43273: ARRAY
43274: PPUSH
43275: LD_VAR 0 12
43279: PUSH
43280: LD_VAR 0 7
43284: ARRAY
43285: PUSH
43286: LD_INT 2
43288: ARRAY
43289: PPUSH
43290: CALL_OW 428
43294: PUSH
43295: LD_INT 0
43297: GREATER
43298: OR
43299: PUSH
43300: LD_VAR 0 12
43304: PUSH
43305: LD_VAR 0 7
43309: ARRAY
43310: PUSH
43311: LD_INT 1
43313: ARRAY
43314: PPUSH
43315: LD_VAR 0 12
43319: PUSH
43320: LD_VAR 0 7
43324: ARRAY
43325: PUSH
43326: LD_INT 2
43328: ARRAY
43329: PPUSH
43330: CALL_OW 351
43334: OR
43335: IFFALSE 43341
// exit ;
43337: POP
43338: POP
43339: GO 43633
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43341: LD_ADDR_VAR 0 8
43345: PUSH
43346: LD_VAR 0 12
43350: PUSH
43351: LD_VAR 0 7
43355: ARRAY
43356: PUSH
43357: LD_INT 1
43359: ARRAY
43360: PPUSH
43361: LD_VAR 0 12
43365: PUSH
43366: LD_VAR 0 7
43370: ARRAY
43371: PUSH
43372: LD_INT 2
43374: ARRAY
43375: PPUSH
43376: CALL_OW 546
43380: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43381: LD_VAR 0 8
43385: PUSH
43386: LD_INT 1
43388: ARRAY
43389: PUSH
43390: LD_VAR 0 8
43394: PUSH
43395: LD_INT 2
43397: ARRAY
43398: PUSH
43399: LD_VAR 0 13
43403: PUSH
43404: LD_INT 2
43406: PLUS
43407: GREATER
43408: OR
43409: PUSH
43410: LD_VAR 0 8
43414: PUSH
43415: LD_INT 2
43417: ARRAY
43418: PUSH
43419: LD_VAR 0 13
43423: PUSH
43424: LD_INT 2
43426: MINUS
43427: LESS
43428: OR
43429: PUSH
43430: LD_VAR 0 8
43434: PUSH
43435: LD_INT 3
43437: ARRAY
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: LD_INT 8
43444: PUSH
43445: LD_INT 9
43447: PUSH
43448: LD_INT 10
43450: PUSH
43451: LD_INT 11
43453: PUSH
43454: LD_INT 12
43456: PUSH
43457: LD_INT 13
43459: PUSH
43460: LD_INT 16
43462: PUSH
43463: LD_INT 17
43465: PUSH
43466: LD_INT 18
43468: PUSH
43469: LD_INT 19
43471: PUSH
43472: LD_INT 20
43474: PUSH
43475: LD_INT 21
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: IN
43493: NOT
43494: OR
43495: PUSH
43496: LD_VAR 0 8
43500: PUSH
43501: LD_INT 5
43503: ARRAY
43504: NOT
43505: OR
43506: PUSH
43507: LD_VAR 0 8
43511: PUSH
43512: LD_INT 6
43514: ARRAY
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: LD_INT 2
43521: PUSH
43522: LD_INT 7
43524: PUSH
43525: LD_INT 9
43527: PUSH
43528: LD_INT 10
43530: PUSH
43531: LD_INT 11
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: IN
43542: NOT
43543: OR
43544: IFFALSE 43550
// exit ;
43546: POP
43547: POP
43548: GO 43633
// end ;
43550: GO 43221
43552: POP
43553: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43554: LD_VAR 0 9
43558: PPUSH
43559: LD_VAR 0 3
43563: PPUSH
43564: LD_VAR 0 4
43568: PPUSH
43569: LD_INT 20
43571: PPUSH
43572: CALL 35585 0 4
43576: PUSH
43577: LD_INT 4
43579: ARRAY
43580: IFFALSE 43584
// exit ;
43582: GO 43633
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43584: LD_VAR 0 2
43588: PUSH
43589: LD_INT 29
43591: PUSH
43592: LD_INT 30
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: IN
43599: PUSH
43600: LD_VAR 0 3
43604: PPUSH
43605: LD_VAR 0 4
43609: PPUSH
43610: LD_VAR 0 9
43614: PPUSH
43615: CALL_OW 440
43619: NOT
43620: AND
43621: IFFALSE 43625
// exit ;
43623: GO 43633
// result := true ;
43625: LD_ADDR_VAR 0 6
43629: PUSH
43630: LD_INT 1
43632: ST_TO_ADDR
// end ;
43633: LD_VAR 0 6
43637: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43638: LD_INT 0
43640: PPUSH
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
43645: PPUSH
43646: PPUSH
43647: PPUSH
43648: PPUSH
43649: PPUSH
43650: PPUSH
43651: PPUSH
43652: PPUSH
43653: PPUSH
43654: PPUSH
43655: PPUSH
43656: PPUSH
43657: PPUSH
43658: PPUSH
43659: PPUSH
43660: PPUSH
43661: PPUSH
43662: PPUSH
43663: PPUSH
43664: PPUSH
43665: PPUSH
43666: PPUSH
43667: PPUSH
43668: PPUSH
43669: PPUSH
43670: PPUSH
43671: PPUSH
43672: PPUSH
43673: PPUSH
43674: PPUSH
43675: PPUSH
43676: PPUSH
43677: PPUSH
43678: PPUSH
43679: PPUSH
43680: PPUSH
43681: PPUSH
43682: PPUSH
43683: PPUSH
43684: PPUSH
43685: PPUSH
43686: PPUSH
43687: PPUSH
43688: PPUSH
43689: PPUSH
43690: PPUSH
43691: PPUSH
43692: PPUSH
43693: PPUSH
43694: PPUSH
43695: PPUSH
43696: PPUSH
43697: PPUSH
// result = [ ] ;
43698: LD_ADDR_VAR 0 7
43702: PUSH
43703: EMPTY
43704: ST_TO_ADDR
// temp_list = [ ] ;
43705: LD_ADDR_VAR 0 9
43709: PUSH
43710: EMPTY
43711: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43712: LD_VAR 0 4
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: LD_INT 3
43728: PUSH
43729: LD_INT 4
43731: PUSH
43732: LD_INT 5
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: IN
43743: NOT
43744: PUSH
43745: LD_VAR 0 1
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: IN
43760: PUSH
43761: LD_VAR 0 5
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: LD_INT 2
43771: PUSH
43772: LD_INT 3
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: LIST
43779: IN
43780: NOT
43781: AND
43782: OR
43783: IFFALSE 43787
// exit ;
43785: GO 62178
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43787: LD_VAR 0 1
43791: PUSH
43792: LD_INT 6
43794: PUSH
43795: LD_INT 7
43797: PUSH
43798: LD_INT 8
43800: PUSH
43801: LD_INT 13
43803: PUSH
43804: LD_INT 12
43806: PUSH
43807: LD_INT 15
43809: PUSH
43810: LD_INT 11
43812: PUSH
43813: LD_INT 14
43815: PUSH
43816: LD_INT 10
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: IN
43830: IFFALSE 43840
// btype = b_lab ;
43832: LD_ADDR_VAR 0 1
43836: PUSH
43837: LD_INT 6
43839: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43840: LD_VAR 0 6
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: LIST
43858: IN
43859: NOT
43860: PUSH
43861: LD_VAR 0 1
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: LD_INT 3
43877: PUSH
43878: LD_INT 6
43880: PUSH
43881: LD_INT 36
43883: PUSH
43884: LD_INT 4
43886: PUSH
43887: LD_INT 5
43889: PUSH
43890: LD_INT 31
43892: PUSH
43893: LD_INT 32
43895: PUSH
43896: LD_INT 33
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: IN
43912: NOT
43913: PUSH
43914: LD_VAR 0 6
43918: PUSH
43919: LD_INT 1
43921: EQUAL
43922: AND
43923: OR
43924: PUSH
43925: LD_VAR 0 1
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: LD_INT 3
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: IN
43940: NOT
43941: PUSH
43942: LD_VAR 0 6
43946: PUSH
43947: LD_INT 2
43949: EQUAL
43950: AND
43951: OR
43952: IFFALSE 43962
// mode = 0 ;
43954: LD_ADDR_VAR 0 6
43958: PUSH
43959: LD_INT 0
43961: ST_TO_ADDR
// case mode of 0 :
43962: LD_VAR 0 6
43966: PUSH
43967: LD_INT 0
43969: DOUBLE
43970: EQUAL
43971: IFTRUE 43975
43973: GO 55428
43975: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43976: LD_ADDR_VAR 0 11
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: LD_INT 2
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 2
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 3
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 3
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: LD_INT 2
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44169: LD_ADDR_VAR 0 12
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 3
44326: NEG
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 3
44337: NEG
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44365: LD_ADDR_VAR 0 13
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: LD_INT 2
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: NEG
44513: PUSH
44514: LD_INT 3
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 3
44524: NEG
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 3
44536: NEG
44537: PUSH
44538: LD_INT 3
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44564: LD_ADDR_VAR 0 14
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 2
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: LD_INT 2
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: LD_INT 3
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 3
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 2
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44760: LD_ADDR_VAR 0 15
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 2
44894: NEG
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 3
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 3
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44953: LD_ADDR_VAR 0 16
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: LD_INT 2
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 2
45076: NEG
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: NEG
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 3
45100: PUSH
45101: LD_INT 2
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 3
45110: PUSH
45111: LD_INT 3
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: LD_INT 3
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45146: LD_ADDR_VAR 0 17
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45376: LD_ADDR_VAR 0 18
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: LD_INT 2
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: NEG
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45606: LD_ADDR_VAR 0 19
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: LD_INT 2
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45836: LD_ADDR_VAR 0 20
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 2
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 2
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: LD_INT 2
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46066: LD_ADDR_VAR 0 21
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: LD_INT 2
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 2
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 2
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 2
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 2
46242: NEG
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46296: LD_ADDR_VAR 0 22
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 2
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 2
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46526: LD_ADDR_VAR 0 23
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: LD_INT 2
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: LD_INT 2
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 2
46725: NEG
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: NEG
46738: PUSH
46739: LD_INT 3
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 3
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46806: LD_ADDR_VAR 0 24
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 2
46982: NEG
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: LD_INT 2
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 3
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 3
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47082: LD_ADDR_VAR 0 25
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: LD_INT 2
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: NEG
47282: PUSH
47283: LD_INT 2
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 3
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 3
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: LD_INT 3
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47356: LD_ADDR_VAR 0 26
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 2
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 2
47532: NEG
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: LD_INT 3
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: LD_INT 3
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47632: LD_ADDR_VAR 0 27
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 3
47865: NEG
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 3
47877: NEG
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47912: LD_ADDR_VAR 0 28
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 2
48088: NEG
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 3
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 3
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 3
48159: NEG
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48194: LD_ADDR_VAR 0 29
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: LD_INT 3
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 3
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: LD_INT 3
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 3
48438: NEG
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48473: LD_ADDR_VAR 0 30
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: LD_INT 2
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 3
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: LD_INT 2
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: LD_INT 3
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 3
48716: NEG
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48751: LD_ADDR_VAR 0 31
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: NEG
48941: PUSH
48942: LD_INT 3
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 3
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: LD_INT 3
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 3
48994: NEG
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49029: LD_ADDR_VAR 0 32
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: LD_INT 2
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: NEG
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 3
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 3
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 3
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 3
49272: NEG
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49307: LD_ADDR_VAR 0 33
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: LD_INT 1
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 1
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: LD_INT 3
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 3
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: LD_INT 3
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 3
49551: NEG
49552: PUSH
49553: LD_INT 2
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49586: LD_ADDR_VAR 0 34
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 2
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 2
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: NEG
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: LD_INT 3
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: LD_INT 3
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 3
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49866: LD_ADDR_VAR 0 35
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49978: LD_ADDR_VAR 0 36
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: LD_INT 2
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50090: LD_ADDR_VAR 0 37
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50202: LD_ADDR_VAR 0 38
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 2
50293: NEG
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50314: LD_ADDR_VAR 0 39
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 2
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50426: LD_ADDR_VAR 0 40
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50538: LD_ADDR_VAR 0 41
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 2
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 2
50704: NEG
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 2
50716: NEG
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 2
50728: NEG
50729: PUSH
50730: LD_INT 3
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 3
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 3
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 3
50771: PUSH
50772: LD_INT 2
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 3
50781: PUSH
50782: LD_INT 3
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: LD_INT 3
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 3
50812: NEG
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 3
50823: NEG
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 3
50835: NEG
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 3
50847: NEG
50848: PUSH
50849: LD_INT 3
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50888: LD_ADDR_VAR 0 42
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 2
51013: PUSH
51014: LD_INT 2
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: LD_INT 3
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: LD_INT 3
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 3
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 3
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 3
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: LD_INT 3
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 3
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 3
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 3
51185: NEG
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 3
51197: NEG
51198: PUSH
51199: LD_INT 3
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51238: LD_ADDR_VAR 0 43
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 2
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 2
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 2
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: NEG
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: LD_INT 3
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: LD_INT 2
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 3
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 3
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 3
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: LD_INT 3
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: LD_INT 2
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 3
51545: NEG
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51586: LD_ADDR_VAR 0 44
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: LD_INT 2
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: LD_INT 3
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 3
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 3
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 3
51829: PUSH
51830: LD_INT 3
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: PUSH
51840: LD_INT 3
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 3
51860: NEG
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 3
51871: NEG
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 3
51883: NEG
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 3
51895: NEG
51896: PUSH
51897: LD_INT 3
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51936: LD_ADDR_VAR 0 45
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: LD_INT 2
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 2
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: LD_INT 2
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: NEG
52127: PUSH
52128: LD_INT 3
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: LD_INT 3
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: LD_INT 3
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 3
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 3
52182: PUSH
52183: LD_INT 3
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 3
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 3
52233: NEG
52234: PUSH
52235: LD_INT 2
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 3
52245: NEG
52246: PUSH
52247: LD_INT 3
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52286: LD_ADDR_VAR 0 46
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: LD_INT 3
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: LD_INT 3
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 3
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 3
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: LD_INT 3
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: LD_INT 3
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 3
52582: NEG
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 3
52593: NEG
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52634: LD_ADDR_VAR 0 47
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 2
52749: NEG
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52785: LD_ADDR_VAR 0 48
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 2
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52932: LD_ADDR_VAR 0 49
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53076: LD_ADDR_VAR 0 50
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53220: LD_ADDR_VAR 0 51
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 2
53343: NEG
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53367: LD_ADDR_VAR 0 52
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53518: LD_ADDR_VAR 0 53
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 2
53694: NEG
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53748: LD_ADDR_VAR 0 54
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: LD_INT 2
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53978: LD_ADDR_VAR 0 55
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 2
54154: NEG
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 2
54165: NEG
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: LD_INT 2
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54208: LD_ADDR_VAR 0 56
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 2
54384: NEG
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54438: LD_ADDR_VAR 0 57
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54668: LD_ADDR_VAR 0 58
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54898: LD_ADDR_VAR 0 59
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54986: LD_ADDR_VAR 0 60
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55074: LD_ADDR_VAR 0 61
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55162: LD_ADDR_VAR 0 62
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55250: LD_ADDR_VAR 0 63
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55338: LD_ADDR_VAR 0 64
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: ST_TO_ADDR
// end ; 1 :
55426: GO 61323
55428: LD_INT 1
55430: DOUBLE
55431: EQUAL
55432: IFTRUE 55436
55434: GO 58059
55436: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55437: LD_ADDR_VAR 0 11
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: LD_INT 3
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 3
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: LIST
55480: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55481: LD_ADDR_VAR 0 12
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 3
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 3
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55522: LD_ADDR_VAR 0 13
55526: PUSH
55527: LD_INT 3
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 3
55539: PUSH
55540: LD_INT 3
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: LD_INT 3
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: LIST
55561: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55562: LD_ADDR_VAR 0 14
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 3
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: LIST
55602: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55603: LD_ADDR_VAR 0 15
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 3
55621: NEG
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 3
55632: NEG
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: LIST
55646: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55647: LD_ADDR_VAR 0 16
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: LD_INT 3
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 3
55666: NEG
55667: PUSH
55668: LD_INT 2
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 3
55678: NEG
55679: PUSH
55680: LD_INT 3
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: LIST
55692: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55693: LD_ADDR_VAR 0 17
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 3
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 3
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: LIST
55736: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55737: LD_ADDR_VAR 0 18
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 3
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: LIST
55777: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55778: LD_ADDR_VAR 0 19
55782: PUSH
55783: LD_INT 3
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 3
55795: PUSH
55796: LD_INT 3
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: LD_INT 3
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: LIST
55817: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55818: LD_ADDR_VAR 0 20
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 3
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55859: LD_ADDR_VAR 0 21
55863: PUSH
55864: LD_INT 2
55866: NEG
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 3
55877: NEG
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 3
55888: NEG
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: LIST
55902: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55903: LD_ADDR_VAR 0 22
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: LD_INT 3
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55949: LD_ADDR_VAR 0 23
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 3
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: LD_INT 4
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: LD_INT 3
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55993: LD_ADDR_VAR 0 24
55997: PUSH
55998: LD_INT 3
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 3
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 4
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: LIST
56033: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56034: LD_ADDR_VAR 0 25
56038: PUSH
56039: LD_INT 3
56041: PUSH
56042: LD_INT 3
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 4
56051: PUSH
56052: LD_INT 3
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: LD_INT 4
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: LIST
56073: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56074: LD_ADDR_VAR 0 26
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 3
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 4
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 3
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: LIST
56114: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56115: LD_ADDR_VAR 0 27
56119: PUSH
56120: LD_INT 3
56122: NEG
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 3
56133: NEG
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 4
56144: NEG
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: LIST
56158: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56159: LD_ADDR_VAR 0 28
56163: PUSH
56164: LD_INT 3
56166: NEG
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 3
56178: NEG
56179: PUSH
56180: LD_INT 4
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 4
56190: NEG
56191: PUSH
56192: LD_INT 3
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: LIST
56204: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56205: LD_ADDR_VAR 0 29
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: LD_INT 3
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 3
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 2
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: LD_INT 4
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: LD_INT 4
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: LD_INT 5
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: LD_INT 5
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: LD_INT 4
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: LD_INT 6
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 6
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 5
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56360: LD_ADDR_VAR 0 30
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 3
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 3
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 4
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 4
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 4
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 5
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 5
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 5
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 6
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 6
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56503: LD_ADDR_VAR 0 31
56507: PUSH
56508: LD_INT 3
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 3
56520: PUSH
56521: LD_INT 3
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: LD_INT 3
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 4
56540: PUSH
56541: LD_INT 3
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 4
56550: PUSH
56551: LD_INT 4
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 3
56560: PUSH
56561: LD_INT 4
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 5
56570: PUSH
56571: LD_INT 4
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 5
56580: PUSH
56581: LD_INT 5
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 4
56590: PUSH
56591: LD_INT 5
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 6
56600: PUSH
56601: LD_INT 5
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 6
56610: PUSH
56611: LD_INT 6
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 5
56620: PUSH
56621: LD_INT 6
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56642: LD_ADDR_VAR 0 32
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: LD_INT 3
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 3
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 4
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 4
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 3
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: LD_INT 5
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: LD_INT 5
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: LD_INT 4
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: LD_INT 6
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 6
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: LD_INT 5
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56785: LD_ADDR_VAR 0 33
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 3
56803: NEG
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 3
56814: NEG
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 4
56837: NEG
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 4
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 4
56860: NEG
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 5
56871: NEG
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 5
56882: NEG
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 5
56894: NEG
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 6
56905: NEG
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 6
56916: NEG
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56940: LD_ADDR_VAR 0 34
56944: PUSH
56945: LD_INT 2
56947: NEG
56948: PUSH
56949: LD_INT 3
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 3
56959: NEG
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 3
56971: NEG
56972: PUSH
56973: LD_INT 3
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 3
56983: NEG
56984: PUSH
56985: LD_INT 4
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 4
56995: NEG
56996: PUSH
56997: LD_INT 3
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 4
57007: NEG
57008: PUSH
57009: LD_INT 4
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 4
57019: NEG
57020: PUSH
57021: LD_INT 5
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 5
57031: NEG
57032: PUSH
57033: LD_INT 4
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 5
57043: NEG
57044: PUSH
57045: LD_INT 5
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 5
57055: NEG
57056: PUSH
57057: LD_INT 6
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 6
57067: NEG
57068: PUSH
57069: LD_INT 5
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 6
57079: NEG
57080: PUSH
57081: LD_INT 6
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57103: LD_ADDR_VAR 0 41
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 2
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 3
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: LIST
57146: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57147: LD_ADDR_VAR 0 42
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 3
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: LIST
57187: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57188: LD_ADDR_VAR 0 43
57192: PUSH
57193: LD_INT 2
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 3
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 2
57215: PUSH
57216: LD_INT 3
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: LIST
57227: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57228: LD_ADDR_VAR 0 44
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: LD_INT 2
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 3
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 2
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57269: LD_ADDR_VAR 0 45
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 3
57298: NEG
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: LIST
57312: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57313: LD_ADDR_VAR 0 46
57317: PUSH
57318: LD_INT 2
57320: NEG
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: NEG
57333: PUSH
57334: LD_INT 3
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 3
57344: NEG
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: LIST
57358: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57359: LD_ADDR_VAR 0 47
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: LD_INT 3
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: LD_INT 3
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57392: LD_ADDR_VAR 0 48
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57423: LD_ADDR_VAR 0 49
57427: PUSH
57428: LD_INT 3
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 3
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57452: LD_ADDR_VAR 0 50
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: LD_INT 3
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: PUSH
57470: LD_INT 3
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57481: LD_ADDR_VAR 0 51
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57512: LD_ADDR_VAR 0 52
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 3
57531: NEG
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57545: LD_ADDR_VAR 0 53
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 3
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 3
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: LIST
57588: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57589: LD_ADDR_VAR 0 54
57593: PUSH
57594: LD_INT 2
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 3
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 3
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: LIST
57629: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57630: LD_ADDR_VAR 0 55
57634: PUSH
57635: LD_INT 3
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 3
57647: PUSH
57648: LD_INT 3
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: LD_INT 3
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: LIST
57669: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57670: LD_ADDR_VAR 0 56
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: LD_INT 3
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: LD_INT 3
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: LIST
57710: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57711: LD_ADDR_VAR 0 57
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 3
57729: NEG
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: NEG
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: LIST
57754: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57755: LD_ADDR_VAR 0 58
57759: PUSH
57760: LD_INT 2
57762: NEG
57763: PUSH
57764: LD_INT 3
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 3
57774: NEG
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 3
57786: NEG
57787: PUSH
57788: LD_INT 3
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: LIST
57800: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57801: LD_ADDR_VAR 0 59
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: LD_INT 2
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 2
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: LIST
57844: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57845: LD_ADDR_VAR 0 60
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: LIST
57885: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57886: LD_ADDR_VAR 0 61
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 2
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: LIST
57925: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57926: LD_ADDR_VAR 0 62
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 2
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: LIST
57966: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57967: LD_ADDR_VAR 0 63
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: LIST
58010: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58011: LD_ADDR_VAR 0 64
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: LD_INT 2
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 2
58042: NEG
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: LIST
58056: ST_TO_ADDR
// end ; 2 :
58057: GO 61323
58059: LD_INT 2
58061: DOUBLE
58062: EQUAL
58063: IFTRUE 58067
58065: GO 61322
58067: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58068: LD_ADDR_VAR 0 29
58072: PUSH
58073: LD_INT 4
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 4
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 5
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 5
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 4
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 3
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 3
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 5
58158: PUSH
58159: LD_INT 2
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 3
58168: PUSH
58169: LD_INT 3
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: LD_INT 2
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 4
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 4
58198: PUSH
58199: LD_INT 4
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: LD_INT 4
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 2
58218: PUSH
58219: LD_INT 3
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: LD_INT 2
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 4
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 4
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 4
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 3
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: LD_INT 4
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 5
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 5
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: LD_INT 4
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 3
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 5
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: NEG
58341: PUSH
58342: LD_INT 3
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 2
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 3
58396: NEG
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 4
58407: NEG
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 4
58418: NEG
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 4
58430: NEG
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 4
58453: NEG
58454: PUSH
58455: LD_INT 4
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 4
58465: NEG
58466: PUSH
58467: LD_INT 5
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: LD_INT 4
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 4
58501: NEG
58502: PUSH
58503: LD_INT 3
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 5
58513: NEG
58514: PUSH
58515: LD_INT 4
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 5
58525: NEG
58526: PUSH
58527: LD_INT 5
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: LD_INT 5
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 5
58549: NEG
58550: PUSH
58551: LD_INT 3
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58606: LD_ADDR_VAR 0 30
58610: PUSH
58611: LD_INT 4
58613: PUSH
58614: LD_INT 4
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 4
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 5
58633: PUSH
58634: LD_INT 4
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 5
58643: PUSH
58644: LD_INT 5
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 4
58653: PUSH
58654: LD_INT 5
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 3
58663: PUSH
58664: LD_INT 4
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 3
58673: PUSH
58674: LD_INT 3
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 5
58683: PUSH
58684: LD_INT 3
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 3
58693: PUSH
58694: LD_INT 5
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: LD_INT 3
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: LD_INT 3
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: LD_INT 4
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: LD_INT 4
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: LD_INT 3
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 2
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: LD_INT 4
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 4
58796: NEG
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 4
58807: NEG
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: NEG
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 4
58841: NEG
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 5
58852: NEG
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 5
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 5
58875: NEG
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 3
58887: NEG
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 3
58898: NEG
58899: PUSH
58900: LD_INT 3
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 3
58910: NEG
58911: PUSH
58912: LD_INT 4
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 3
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 2
58934: NEG
58935: PUSH
58936: LD_INT 2
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 3
58946: NEG
58947: PUSH
58948: LD_INT 2
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 4
58958: NEG
58959: PUSH
58960: LD_INT 3
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 4
58970: NEG
58971: PUSH
58972: LD_INT 4
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: NEG
58983: PUSH
58984: LD_INT 4
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 4
58994: NEG
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 4
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: LD_INT 5
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 4
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: LD_INT 3
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 3
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 4
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 5
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 3
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: LD_INT 5
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59153: LD_ADDR_VAR 0 31
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: LD_INT 4
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 3
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 4
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: LD_INT 5
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: LD_INT 5
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: LD_INT 4
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: LD_INT 3
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 5
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: LD_INT 3
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 3
59253: NEG
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 3
59264: NEG
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 2
59276: NEG
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 3
59298: NEG
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 4
59309: NEG
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 4
59320: NEG
59321: PUSH
59322: LD_INT 1
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 4
59332: NEG
59333: PUSH
59334: LD_INT 2
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: LD_INT 2
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 4
59355: NEG
59356: PUSH
59357: LD_INT 4
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 4
59367: NEG
59368: PUSH
59369: LD_INT 5
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 3
59379: NEG
59380: PUSH
59381: LD_INT 4
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: LD_INT 3
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 4
59403: NEG
59404: PUSH
59405: LD_INT 3
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 5
59415: NEG
59416: PUSH
59417: LD_INT 4
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 5
59427: NEG
59428: PUSH
59429: LD_INT 5
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 3
59439: NEG
59440: PUSH
59441: LD_INT 5
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 5
59451: NEG
59452: PUSH
59453: LD_INT 3
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 3
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: LD_INT 4
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: LD_INT 3
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: LD_INT 4
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: LD_INT 2
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: LD_INT 4
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 4
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 4
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 5
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 5
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 4
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 3
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 3
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 3
59637: PUSH
59638: LD_INT 2
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 5
59648: PUSH
59649: LD_INT 2
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59703: LD_ADDR_VAR 0 32
59707: PUSH
59708: LD_INT 4
59710: NEG
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 4
59721: NEG
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 3
59733: NEG
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 4
59755: NEG
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 5
59766: NEG
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 5
59777: NEG
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 5
59789: NEG
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: NEG
59802: PUSH
59803: LD_INT 2
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 3
59812: NEG
59813: PUSH
59814: LD_INT 3
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 3
59824: NEG
59825: PUSH
59826: LD_INT 4
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 2
59836: NEG
59837: PUSH
59838: LD_INT 3
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 2
59848: NEG
59849: PUSH
59850: LD_INT 2
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 3
59860: NEG
59861: PUSH
59862: LD_INT 2
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 4
59872: NEG
59873: PUSH
59874: LD_INT 3
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 4
59884: NEG
59885: PUSH
59886: LD_INT 4
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 2
59896: NEG
59897: PUSH
59898: LD_INT 4
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 4
59908: NEG
59909: PUSH
59910: LD_INT 2
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: LD_INT 4
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: LD_INT 5
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: LD_INT 4
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: LD_INT 3
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 3
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: LD_INT 4
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: LD_INT 5
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 2
59999: PUSH
60000: LD_INT 3
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: NEG
60011: PUSH
60012: LD_INT 5
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 3
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 3
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 4
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 4
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 3
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 2
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 4
60105: PUSH
60106: LD_INT 2
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 4
60115: PUSH
60116: LD_INT 4
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 4
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 5
60135: PUSH
60136: LD_INT 4
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 5
60145: PUSH
60146: LD_INT 5
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 4
60155: PUSH
60156: LD_INT 5
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 3
60165: PUSH
60166: LD_INT 4
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 3
60175: PUSH
60176: LD_INT 3
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 5
60185: PUSH
60186: LD_INT 3
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 3
60195: PUSH
60196: LD_INT 5
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60250: LD_ADDR_VAR 0 33
60254: PUSH
60255: LD_INT 4
60257: NEG
60258: PUSH
60259: LD_INT 4
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 4
60269: NEG
60270: PUSH
60271: LD_INT 5
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 3
60281: NEG
60282: PUSH
60283: LD_INT 4
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 3
60293: NEG
60294: PUSH
60295: LD_INT 3
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 4
60305: NEG
60306: PUSH
60307: LD_INT 3
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 5
60317: NEG
60318: PUSH
60319: LD_INT 4
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 5
60329: NEG
60330: PUSH
60331: LD_INT 5
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 3
60341: NEG
60342: PUSH
60343: LD_INT 5
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 5
60353: NEG
60354: PUSH
60355: LD_INT 3
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_INT 3
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 4
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: LD_INT 3
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 0
60409: PUSH
60410: LD_INT 2
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 3
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: LD_INT 4
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: PUSH
60445: LD_INT 2
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: LD_INT 4
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 4
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 4
60477: PUSH
60478: LD_INT 1
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 5
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 5
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 4
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 3
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 3
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 3
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 5
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 3
60560: PUSH
60561: LD_INT 3
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 3
60570: PUSH
60571: LD_INT 2
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 4
60580: PUSH
60581: LD_INT 3
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 4
60590: PUSH
60591: LD_INT 4
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 3
60600: PUSH
60601: LD_INT 4
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 2
60610: PUSH
60611: LD_INT 3
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 2
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 4
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: PUSH
60641: LD_INT 4
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: LD_INT 4
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: LD_INT 3
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: LD_INT 4
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: LD_INT 5
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: LD_INT 5
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: LD_INT 4
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: LD_INT 3
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 2
60722: PUSH
60723: LD_INT 5
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 2
60732: NEG
60733: PUSH
60734: LD_INT 3
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60788: LD_ADDR_VAR 0 34
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 4
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: LD_INT 5
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: LD_INT 4
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: LD_INT 3
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: LD_INT 3
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: LD_INT 4
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: LD_INT 5
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 2
60874: PUSH
60875: LD_INT 3
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 2
60885: NEG
60886: PUSH
60887: LD_INT 5
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 3
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 4
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 4
60928: PUSH
60929: LD_INT 1
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 3
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 2
60958: PUSH
60959: LD_INT 1
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 2
60969: PUSH
60970: LD_INT 2
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 4
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 4
60990: PUSH
60991: LD_INT 4
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 4
61000: PUSH
61001: LD_INT 3
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 5
61010: PUSH
61011: LD_INT 4
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 5
61020: PUSH
61021: LD_INT 5
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 4
61030: PUSH
61031: LD_INT 5
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 3
61040: PUSH
61041: LD_INT 4
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 3
61050: PUSH
61051: LD_INT 3
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 5
61060: PUSH
61061: LD_INT 3
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 3
61070: PUSH
61071: LD_INT 5
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: LD_INT 3
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: LD_INT 3
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: LD_INT 4
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: LD_INT 4
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: LD_INT 3
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 2
61152: PUSH
61153: LD_INT 4
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 2
61162: NEG
61163: PUSH
61164: LD_INT 2
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 4
61173: NEG
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 4
61184: NEG
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 3
61196: NEG
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 3
61207: NEG
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 4
61218: NEG
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 5
61229: NEG
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 5
61240: NEG
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 5
61252: NEG
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 3
61264: NEG
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: ST_TO_ADDR
// end ; end ;
61320: GO 61323
61322: POP
// case btype of b_depot , b_warehouse :
61323: LD_VAR 0 1
61327: PUSH
61328: LD_INT 0
61330: DOUBLE
61331: EQUAL
61332: IFTRUE 61342
61334: LD_INT 1
61336: DOUBLE
61337: EQUAL
61338: IFTRUE 61342
61340: GO 61543
61342: POP
// case nation of nation_american :
61343: LD_VAR 0 5
61347: PUSH
61348: LD_INT 1
61350: DOUBLE
61351: EQUAL
61352: IFTRUE 61356
61354: GO 61412
61356: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61357: LD_ADDR_VAR 0 9
61361: PUSH
61362: LD_VAR 0 11
61366: PUSH
61367: LD_VAR 0 12
61371: PUSH
61372: LD_VAR 0 13
61376: PUSH
61377: LD_VAR 0 14
61381: PUSH
61382: LD_VAR 0 15
61386: PUSH
61387: LD_VAR 0 16
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: PUSH
61400: LD_VAR 0 4
61404: PUSH
61405: LD_INT 1
61407: PLUS
61408: ARRAY
61409: ST_TO_ADDR
61410: GO 61541
61412: LD_INT 2
61414: DOUBLE
61415: EQUAL
61416: IFTRUE 61420
61418: GO 61476
61420: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61421: LD_ADDR_VAR 0 9
61425: PUSH
61426: LD_VAR 0 17
61430: PUSH
61431: LD_VAR 0 18
61435: PUSH
61436: LD_VAR 0 19
61440: PUSH
61441: LD_VAR 0 20
61445: PUSH
61446: LD_VAR 0 21
61450: PUSH
61451: LD_VAR 0 22
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: PUSH
61464: LD_VAR 0 4
61468: PUSH
61469: LD_INT 1
61471: PLUS
61472: ARRAY
61473: ST_TO_ADDR
61474: GO 61541
61476: LD_INT 3
61478: DOUBLE
61479: EQUAL
61480: IFTRUE 61484
61482: GO 61540
61484: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61485: LD_ADDR_VAR 0 9
61489: PUSH
61490: LD_VAR 0 23
61494: PUSH
61495: LD_VAR 0 24
61499: PUSH
61500: LD_VAR 0 25
61504: PUSH
61505: LD_VAR 0 26
61509: PUSH
61510: LD_VAR 0 27
61514: PUSH
61515: LD_VAR 0 28
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: PUSH
61528: LD_VAR 0 4
61532: PUSH
61533: LD_INT 1
61535: PLUS
61536: ARRAY
61537: ST_TO_ADDR
61538: GO 61541
61540: POP
61541: GO 62096
61543: LD_INT 2
61545: DOUBLE
61546: EQUAL
61547: IFTRUE 61557
61549: LD_INT 3
61551: DOUBLE
61552: EQUAL
61553: IFTRUE 61557
61555: GO 61613
61557: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61558: LD_ADDR_VAR 0 9
61562: PUSH
61563: LD_VAR 0 29
61567: PUSH
61568: LD_VAR 0 30
61572: PUSH
61573: LD_VAR 0 31
61577: PUSH
61578: LD_VAR 0 32
61582: PUSH
61583: LD_VAR 0 33
61587: PUSH
61588: LD_VAR 0 34
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: PUSH
61601: LD_VAR 0 4
61605: PUSH
61606: LD_INT 1
61608: PLUS
61609: ARRAY
61610: ST_TO_ADDR
61611: GO 62096
61613: LD_INT 16
61615: DOUBLE
61616: EQUAL
61617: IFTRUE 61675
61619: LD_INT 17
61621: DOUBLE
61622: EQUAL
61623: IFTRUE 61675
61625: LD_INT 18
61627: DOUBLE
61628: EQUAL
61629: IFTRUE 61675
61631: LD_INT 19
61633: DOUBLE
61634: EQUAL
61635: IFTRUE 61675
61637: LD_INT 22
61639: DOUBLE
61640: EQUAL
61641: IFTRUE 61675
61643: LD_INT 20
61645: DOUBLE
61646: EQUAL
61647: IFTRUE 61675
61649: LD_INT 21
61651: DOUBLE
61652: EQUAL
61653: IFTRUE 61675
61655: LD_INT 23
61657: DOUBLE
61658: EQUAL
61659: IFTRUE 61675
61661: LD_INT 24
61663: DOUBLE
61664: EQUAL
61665: IFTRUE 61675
61667: LD_INT 25
61669: DOUBLE
61670: EQUAL
61671: IFTRUE 61675
61673: GO 61731
61675: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61676: LD_ADDR_VAR 0 9
61680: PUSH
61681: LD_VAR 0 35
61685: PUSH
61686: LD_VAR 0 36
61690: PUSH
61691: LD_VAR 0 37
61695: PUSH
61696: LD_VAR 0 38
61700: PUSH
61701: LD_VAR 0 39
61705: PUSH
61706: LD_VAR 0 40
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: PUSH
61719: LD_VAR 0 4
61723: PUSH
61724: LD_INT 1
61726: PLUS
61727: ARRAY
61728: ST_TO_ADDR
61729: GO 62096
61731: LD_INT 6
61733: DOUBLE
61734: EQUAL
61735: IFTRUE 61787
61737: LD_INT 7
61739: DOUBLE
61740: EQUAL
61741: IFTRUE 61787
61743: LD_INT 8
61745: DOUBLE
61746: EQUAL
61747: IFTRUE 61787
61749: LD_INT 13
61751: DOUBLE
61752: EQUAL
61753: IFTRUE 61787
61755: LD_INT 12
61757: DOUBLE
61758: EQUAL
61759: IFTRUE 61787
61761: LD_INT 15
61763: DOUBLE
61764: EQUAL
61765: IFTRUE 61787
61767: LD_INT 11
61769: DOUBLE
61770: EQUAL
61771: IFTRUE 61787
61773: LD_INT 14
61775: DOUBLE
61776: EQUAL
61777: IFTRUE 61787
61779: LD_INT 10
61781: DOUBLE
61782: EQUAL
61783: IFTRUE 61787
61785: GO 61843
61787: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61788: LD_ADDR_VAR 0 9
61792: PUSH
61793: LD_VAR 0 41
61797: PUSH
61798: LD_VAR 0 42
61802: PUSH
61803: LD_VAR 0 43
61807: PUSH
61808: LD_VAR 0 44
61812: PUSH
61813: LD_VAR 0 45
61817: PUSH
61818: LD_VAR 0 46
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: PUSH
61831: LD_VAR 0 4
61835: PUSH
61836: LD_INT 1
61838: PLUS
61839: ARRAY
61840: ST_TO_ADDR
61841: GO 62096
61843: LD_INT 36
61845: DOUBLE
61846: EQUAL
61847: IFTRUE 61851
61849: GO 61907
61851: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61852: LD_ADDR_VAR 0 9
61856: PUSH
61857: LD_VAR 0 47
61861: PUSH
61862: LD_VAR 0 48
61866: PUSH
61867: LD_VAR 0 49
61871: PUSH
61872: LD_VAR 0 50
61876: PUSH
61877: LD_VAR 0 51
61881: PUSH
61882: LD_VAR 0 52
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: PUSH
61895: LD_VAR 0 4
61899: PUSH
61900: LD_INT 1
61902: PLUS
61903: ARRAY
61904: ST_TO_ADDR
61905: GO 62096
61907: LD_INT 4
61909: DOUBLE
61910: EQUAL
61911: IFTRUE 61933
61913: LD_INT 5
61915: DOUBLE
61916: EQUAL
61917: IFTRUE 61933
61919: LD_INT 34
61921: DOUBLE
61922: EQUAL
61923: IFTRUE 61933
61925: LD_INT 37
61927: DOUBLE
61928: EQUAL
61929: IFTRUE 61933
61931: GO 61989
61933: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61934: LD_ADDR_VAR 0 9
61938: PUSH
61939: LD_VAR 0 53
61943: PUSH
61944: LD_VAR 0 54
61948: PUSH
61949: LD_VAR 0 55
61953: PUSH
61954: LD_VAR 0 56
61958: PUSH
61959: LD_VAR 0 57
61963: PUSH
61964: LD_VAR 0 58
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: PUSH
61977: LD_VAR 0 4
61981: PUSH
61982: LD_INT 1
61984: PLUS
61985: ARRAY
61986: ST_TO_ADDR
61987: GO 62096
61989: LD_INT 31
61991: DOUBLE
61992: EQUAL
61993: IFTRUE 62039
61995: LD_INT 32
61997: DOUBLE
61998: EQUAL
61999: IFTRUE 62039
62001: LD_INT 33
62003: DOUBLE
62004: EQUAL
62005: IFTRUE 62039
62007: LD_INT 27
62009: DOUBLE
62010: EQUAL
62011: IFTRUE 62039
62013: LD_INT 26
62015: DOUBLE
62016: EQUAL
62017: IFTRUE 62039
62019: LD_INT 28
62021: DOUBLE
62022: EQUAL
62023: IFTRUE 62039
62025: LD_INT 29
62027: DOUBLE
62028: EQUAL
62029: IFTRUE 62039
62031: LD_INT 30
62033: DOUBLE
62034: EQUAL
62035: IFTRUE 62039
62037: GO 62095
62039: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62040: LD_ADDR_VAR 0 9
62044: PUSH
62045: LD_VAR 0 59
62049: PUSH
62050: LD_VAR 0 60
62054: PUSH
62055: LD_VAR 0 61
62059: PUSH
62060: LD_VAR 0 62
62064: PUSH
62065: LD_VAR 0 63
62069: PUSH
62070: LD_VAR 0 64
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: PUSH
62083: LD_VAR 0 4
62087: PUSH
62088: LD_INT 1
62090: PLUS
62091: ARRAY
62092: ST_TO_ADDR
62093: GO 62096
62095: POP
// temp_list2 = [ ] ;
62096: LD_ADDR_VAR 0 10
62100: PUSH
62101: EMPTY
62102: ST_TO_ADDR
// for i in temp_list do
62103: LD_ADDR_VAR 0 8
62107: PUSH
62108: LD_VAR 0 9
62112: PUSH
62113: FOR_IN
62114: IFFALSE 62166
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62116: LD_ADDR_VAR 0 10
62120: PUSH
62121: LD_VAR 0 10
62125: PUSH
62126: LD_VAR 0 8
62130: PUSH
62131: LD_INT 1
62133: ARRAY
62134: PUSH
62135: LD_VAR 0 2
62139: PLUS
62140: PUSH
62141: LD_VAR 0 8
62145: PUSH
62146: LD_INT 2
62148: ARRAY
62149: PUSH
62150: LD_VAR 0 3
62154: PLUS
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: EMPTY
62161: LIST
62162: ADD
62163: ST_TO_ADDR
62164: GO 62113
62166: POP
62167: POP
// result = temp_list2 ;
62168: LD_ADDR_VAR 0 7
62172: PUSH
62173: LD_VAR 0 10
62177: ST_TO_ADDR
// end ;
62178: LD_VAR 0 7
62182: RET
// export function EnemyInRange ( unit , dist ) ; begin
62183: LD_INT 0
62185: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62186: LD_ADDR_VAR 0 3
62190: PUSH
62191: LD_VAR 0 1
62195: PPUSH
62196: CALL_OW 255
62200: PPUSH
62201: LD_VAR 0 1
62205: PPUSH
62206: CALL_OW 250
62210: PPUSH
62211: LD_VAR 0 1
62215: PPUSH
62216: CALL_OW 251
62220: PPUSH
62221: LD_VAR 0 2
62225: PPUSH
62226: CALL 35585 0 4
62230: PUSH
62231: LD_INT 4
62233: ARRAY
62234: ST_TO_ADDR
// end ;
62235: LD_VAR 0 3
62239: RET
// export function PlayerSeeMe ( unit ) ; begin
62240: LD_INT 0
62242: PPUSH
// result := See ( your_side , unit ) ;
62243: LD_ADDR_VAR 0 2
62247: PUSH
62248: LD_OWVAR 2
62252: PPUSH
62253: LD_VAR 0 1
62257: PPUSH
62258: CALL_OW 292
62262: ST_TO_ADDR
// end ;
62263: LD_VAR 0 2
62267: RET
// export function ReverseDir ( unit ) ; begin
62268: LD_INT 0
62270: PPUSH
// if not unit then
62271: LD_VAR 0 1
62275: NOT
62276: IFFALSE 62280
// exit ;
62278: GO 62303
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62280: LD_ADDR_VAR 0 2
62284: PUSH
62285: LD_VAR 0 1
62289: PPUSH
62290: CALL_OW 254
62294: PUSH
62295: LD_INT 3
62297: PLUS
62298: PUSH
62299: LD_INT 6
62301: MOD
62302: ST_TO_ADDR
// end ;
62303: LD_VAR 0 2
62307: RET
// export function ReverseArray ( array ) ; var i ; begin
62308: LD_INT 0
62310: PPUSH
62311: PPUSH
// if not array then
62312: LD_VAR 0 1
62316: NOT
62317: IFFALSE 62321
// exit ;
62319: GO 62376
// result := [ ] ;
62321: LD_ADDR_VAR 0 2
62325: PUSH
62326: EMPTY
62327: ST_TO_ADDR
// for i := array downto 1 do
62328: LD_ADDR_VAR 0 3
62332: PUSH
62333: DOUBLE
62334: LD_VAR 0 1
62338: INC
62339: ST_TO_ADDR
62340: LD_INT 1
62342: PUSH
62343: FOR_DOWNTO
62344: IFFALSE 62374
// result := Join ( result , array [ i ] ) ;
62346: LD_ADDR_VAR 0 2
62350: PUSH
62351: LD_VAR 0 2
62355: PPUSH
62356: LD_VAR 0 1
62360: PUSH
62361: LD_VAR 0 3
62365: ARRAY
62366: PPUSH
62367: CALL 67020 0 2
62371: ST_TO_ADDR
62372: GO 62343
62374: POP
62375: POP
// end ;
62376: LD_VAR 0 2
62380: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62381: LD_INT 0
62383: PPUSH
62384: PPUSH
62385: PPUSH
62386: PPUSH
62387: PPUSH
62388: PPUSH
// if not unit or not hexes then
62389: LD_VAR 0 1
62393: NOT
62394: PUSH
62395: LD_VAR 0 2
62399: NOT
62400: OR
62401: IFFALSE 62405
// exit ;
62403: GO 62528
// dist := 9999 ;
62405: LD_ADDR_VAR 0 5
62409: PUSH
62410: LD_INT 9999
62412: ST_TO_ADDR
// for i = 1 to hexes do
62413: LD_ADDR_VAR 0 4
62417: PUSH
62418: DOUBLE
62419: LD_INT 1
62421: DEC
62422: ST_TO_ADDR
62423: LD_VAR 0 2
62427: PUSH
62428: FOR_TO
62429: IFFALSE 62516
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62431: LD_ADDR_VAR 0 6
62435: PUSH
62436: LD_VAR 0 1
62440: PPUSH
62441: LD_VAR 0 2
62445: PUSH
62446: LD_VAR 0 4
62450: ARRAY
62451: PUSH
62452: LD_INT 1
62454: ARRAY
62455: PPUSH
62456: LD_VAR 0 2
62460: PUSH
62461: LD_VAR 0 4
62465: ARRAY
62466: PUSH
62467: LD_INT 2
62469: ARRAY
62470: PPUSH
62471: CALL_OW 297
62475: ST_TO_ADDR
// if tdist < dist then
62476: LD_VAR 0 6
62480: PUSH
62481: LD_VAR 0 5
62485: LESS
62486: IFFALSE 62514
// begin hex := hexes [ i ] ;
62488: LD_ADDR_VAR 0 8
62492: PUSH
62493: LD_VAR 0 2
62497: PUSH
62498: LD_VAR 0 4
62502: ARRAY
62503: ST_TO_ADDR
// dist := tdist ;
62504: LD_ADDR_VAR 0 5
62508: PUSH
62509: LD_VAR 0 6
62513: ST_TO_ADDR
// end ; end ;
62514: GO 62428
62516: POP
62517: POP
// result := hex ;
62518: LD_ADDR_VAR 0 3
62522: PUSH
62523: LD_VAR 0 8
62527: ST_TO_ADDR
// end ;
62528: LD_VAR 0 3
62532: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62533: LD_INT 0
62535: PPUSH
62536: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62537: LD_VAR 0 1
62541: NOT
62542: PUSH
62543: LD_VAR 0 1
62547: PUSH
62548: LD_INT 21
62550: PUSH
62551: LD_INT 2
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 23
62560: PUSH
62561: LD_INT 2
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PPUSH
62572: CALL_OW 69
62576: IN
62577: NOT
62578: OR
62579: IFFALSE 62583
// exit ;
62581: GO 62630
// for i = 1 to 3 do
62583: LD_ADDR_VAR 0 3
62587: PUSH
62588: DOUBLE
62589: LD_INT 1
62591: DEC
62592: ST_TO_ADDR
62593: LD_INT 3
62595: PUSH
62596: FOR_TO
62597: IFFALSE 62628
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62599: LD_VAR 0 1
62603: PPUSH
62604: CALL_OW 250
62608: PPUSH
62609: LD_VAR 0 1
62613: PPUSH
62614: CALL_OW 251
62618: PPUSH
62619: LD_INT 1
62621: PPUSH
62622: CALL_OW 453
62626: GO 62596
62628: POP
62629: POP
// end ;
62630: LD_VAR 0 2
62634: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62635: LD_INT 0
62637: PPUSH
62638: PPUSH
62639: PPUSH
62640: PPUSH
62641: PPUSH
62642: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62643: LD_VAR 0 1
62647: NOT
62648: PUSH
62649: LD_VAR 0 2
62653: NOT
62654: OR
62655: PUSH
62656: LD_VAR 0 1
62660: PPUSH
62661: CALL_OW 314
62665: OR
62666: IFFALSE 62670
// exit ;
62668: GO 63137
// if GetLives ( i ) < 250 then
62670: LD_VAR 0 4
62674: PPUSH
62675: CALL_OW 256
62679: PUSH
62680: LD_INT 250
62682: LESS
62683: IFFALSE 62696
// begin ComAutodestruct ( i ) ;
62685: LD_VAR 0 4
62689: PPUSH
62690: CALL 62533 0 1
// exit ;
62694: GO 63137
// end ; x := GetX ( enemy_unit ) ;
62696: LD_ADDR_VAR 0 7
62700: PUSH
62701: LD_VAR 0 2
62705: PPUSH
62706: CALL_OW 250
62710: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62711: LD_ADDR_VAR 0 8
62715: PUSH
62716: LD_VAR 0 2
62720: PPUSH
62721: CALL_OW 251
62725: ST_TO_ADDR
// if not x or not y then
62726: LD_VAR 0 7
62730: NOT
62731: PUSH
62732: LD_VAR 0 8
62736: NOT
62737: OR
62738: IFFALSE 62742
// exit ;
62740: GO 63137
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62742: LD_ADDR_VAR 0 6
62746: PUSH
62747: LD_VAR 0 7
62751: PPUSH
62752: LD_INT 0
62754: PPUSH
62755: LD_INT 4
62757: PPUSH
62758: CALL_OW 272
62762: PUSH
62763: LD_VAR 0 8
62767: PPUSH
62768: LD_INT 0
62770: PPUSH
62771: LD_INT 4
62773: PPUSH
62774: CALL_OW 273
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_VAR 0 7
62787: PPUSH
62788: LD_INT 1
62790: PPUSH
62791: LD_INT 4
62793: PPUSH
62794: CALL_OW 272
62798: PUSH
62799: LD_VAR 0 8
62803: PPUSH
62804: LD_INT 1
62806: PPUSH
62807: LD_INT 4
62809: PPUSH
62810: CALL_OW 273
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_VAR 0 7
62823: PPUSH
62824: LD_INT 2
62826: PPUSH
62827: LD_INT 4
62829: PPUSH
62830: CALL_OW 272
62834: PUSH
62835: LD_VAR 0 8
62839: PPUSH
62840: LD_INT 2
62842: PPUSH
62843: LD_INT 4
62845: PPUSH
62846: CALL_OW 273
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_VAR 0 7
62859: PPUSH
62860: LD_INT 3
62862: PPUSH
62863: LD_INT 4
62865: PPUSH
62866: CALL_OW 272
62870: PUSH
62871: LD_VAR 0 8
62875: PPUSH
62876: LD_INT 3
62878: PPUSH
62879: LD_INT 4
62881: PPUSH
62882: CALL_OW 273
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_VAR 0 7
62895: PPUSH
62896: LD_INT 4
62898: PPUSH
62899: LD_INT 4
62901: PPUSH
62902: CALL_OW 272
62906: PUSH
62907: LD_VAR 0 8
62911: PPUSH
62912: LD_INT 4
62914: PPUSH
62915: LD_INT 4
62917: PPUSH
62918: CALL_OW 273
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_VAR 0 7
62931: PPUSH
62932: LD_INT 5
62934: PPUSH
62935: LD_INT 4
62937: PPUSH
62938: CALL_OW 272
62942: PUSH
62943: LD_VAR 0 8
62947: PPUSH
62948: LD_INT 5
62950: PPUSH
62951: LD_INT 4
62953: PPUSH
62954: CALL_OW 273
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: ST_TO_ADDR
// for i = tmp downto 1 do
62971: LD_ADDR_VAR 0 4
62975: PUSH
62976: DOUBLE
62977: LD_VAR 0 6
62981: INC
62982: ST_TO_ADDR
62983: LD_INT 1
62985: PUSH
62986: FOR_DOWNTO
62987: IFFALSE 63088
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62989: LD_VAR 0 6
62993: PUSH
62994: LD_VAR 0 4
62998: ARRAY
62999: PUSH
63000: LD_INT 1
63002: ARRAY
63003: PPUSH
63004: LD_VAR 0 6
63008: PUSH
63009: LD_VAR 0 4
63013: ARRAY
63014: PUSH
63015: LD_INT 2
63017: ARRAY
63018: PPUSH
63019: CALL_OW 488
63023: NOT
63024: PUSH
63025: LD_VAR 0 6
63029: PUSH
63030: LD_VAR 0 4
63034: ARRAY
63035: PUSH
63036: LD_INT 1
63038: ARRAY
63039: PPUSH
63040: LD_VAR 0 6
63044: PUSH
63045: LD_VAR 0 4
63049: ARRAY
63050: PUSH
63051: LD_INT 2
63053: ARRAY
63054: PPUSH
63055: CALL_OW 428
63059: PUSH
63060: LD_INT 0
63062: NONEQUAL
63063: OR
63064: IFFALSE 63086
// tmp := Delete ( tmp , i ) ;
63066: LD_ADDR_VAR 0 6
63070: PUSH
63071: LD_VAR 0 6
63075: PPUSH
63076: LD_VAR 0 4
63080: PPUSH
63081: CALL_OW 3
63085: ST_TO_ADDR
63086: GO 62986
63088: POP
63089: POP
// j := GetClosestHex ( unit , tmp ) ;
63090: LD_ADDR_VAR 0 5
63094: PUSH
63095: LD_VAR 0 1
63099: PPUSH
63100: LD_VAR 0 6
63104: PPUSH
63105: CALL 62381 0 2
63109: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63110: LD_VAR 0 1
63114: PPUSH
63115: LD_VAR 0 5
63119: PUSH
63120: LD_INT 1
63122: ARRAY
63123: PPUSH
63124: LD_VAR 0 5
63128: PUSH
63129: LD_INT 2
63131: ARRAY
63132: PPUSH
63133: CALL_OW 111
// end ;
63137: LD_VAR 0 3
63141: RET
// export function PrepareApemanSoldier ( ) ; begin
63142: LD_INT 0
63144: PPUSH
// uc_nation := 0 ;
63145: LD_ADDR_OWVAR 21
63149: PUSH
63150: LD_INT 0
63152: ST_TO_ADDR
// hc_sex := sex_male ;
63153: LD_ADDR_OWVAR 27
63157: PUSH
63158: LD_INT 1
63160: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63161: LD_ADDR_OWVAR 28
63165: PUSH
63166: LD_INT 15
63168: ST_TO_ADDR
// hc_gallery :=  ;
63169: LD_ADDR_OWVAR 33
63173: PUSH
63174: LD_STRING 
63176: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63177: LD_ADDR_OWVAR 31
63181: PUSH
63182: LD_INT 0
63184: PPUSH
63185: LD_INT 3
63187: PPUSH
63188: CALL_OW 12
63192: PUSH
63193: LD_INT 0
63195: PPUSH
63196: LD_INT 3
63198: PPUSH
63199: CALL_OW 12
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: ST_TO_ADDR
// end ;
63216: LD_VAR 0 1
63220: RET
// export function PrepareApemanEngineer ( ) ; begin
63221: LD_INT 0
63223: PPUSH
// uc_nation := 0 ;
63224: LD_ADDR_OWVAR 21
63228: PUSH
63229: LD_INT 0
63231: ST_TO_ADDR
// hc_sex := sex_male ;
63232: LD_ADDR_OWVAR 27
63236: PUSH
63237: LD_INT 1
63239: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63240: LD_ADDR_OWVAR 28
63244: PUSH
63245: LD_INT 16
63247: ST_TO_ADDR
// hc_gallery :=  ;
63248: LD_ADDR_OWVAR 33
63252: PUSH
63253: LD_STRING 
63255: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63256: LD_ADDR_OWVAR 31
63260: PUSH
63261: LD_INT 0
63263: PPUSH
63264: LD_INT 3
63266: PPUSH
63267: CALL_OW 12
63271: PUSH
63272: LD_INT 0
63274: PPUSH
63275: LD_INT 3
63277: PPUSH
63278: CALL_OW 12
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: LD_INT 0
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: ST_TO_ADDR
// end ;
63295: LD_VAR 0 1
63299: RET
// export function PrepareApeman ( agressivity ) ; begin
63300: LD_INT 0
63302: PPUSH
// uc_side := 0 ;
63303: LD_ADDR_OWVAR 20
63307: PUSH
63308: LD_INT 0
63310: ST_TO_ADDR
// uc_nation := 0 ;
63311: LD_ADDR_OWVAR 21
63315: PUSH
63316: LD_INT 0
63318: ST_TO_ADDR
// hc_sex := sex_male ;
63319: LD_ADDR_OWVAR 27
63323: PUSH
63324: LD_INT 1
63326: ST_TO_ADDR
// hc_class := class_apeman ;
63327: LD_ADDR_OWVAR 28
63331: PUSH
63332: LD_INT 12
63334: ST_TO_ADDR
// hc_gallery :=  ;
63335: LD_ADDR_OWVAR 33
63339: PUSH
63340: LD_STRING 
63342: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63343: LD_ADDR_OWVAR 35
63347: PUSH
63348: LD_VAR 0 1
63352: NEG
63353: PPUSH
63354: LD_VAR 0 1
63358: PPUSH
63359: CALL_OW 12
63363: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63364: LD_ADDR_OWVAR 31
63368: PUSH
63369: LD_INT 0
63371: PPUSH
63372: LD_INT 3
63374: PPUSH
63375: CALL_OW 12
63379: PUSH
63380: LD_INT 0
63382: PPUSH
63383: LD_INT 3
63385: PPUSH
63386: CALL_OW 12
63390: PUSH
63391: LD_INT 0
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: ST_TO_ADDR
// end ;
63403: LD_VAR 0 2
63407: RET
// export function PrepareTiger ( agressivity ) ; begin
63408: LD_INT 0
63410: PPUSH
// uc_side := 0 ;
63411: LD_ADDR_OWVAR 20
63415: PUSH
63416: LD_INT 0
63418: ST_TO_ADDR
// uc_nation := 0 ;
63419: LD_ADDR_OWVAR 21
63423: PUSH
63424: LD_INT 0
63426: ST_TO_ADDR
// hc_class := class_tiger ;
63427: LD_ADDR_OWVAR 28
63431: PUSH
63432: LD_INT 14
63434: ST_TO_ADDR
// hc_gallery :=  ;
63435: LD_ADDR_OWVAR 33
63439: PUSH
63440: LD_STRING 
63442: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63443: LD_ADDR_OWVAR 35
63447: PUSH
63448: LD_VAR 0 1
63452: NEG
63453: PPUSH
63454: LD_VAR 0 1
63458: PPUSH
63459: CALL_OW 12
63463: ST_TO_ADDR
// end ;
63464: LD_VAR 0 2
63468: RET
// export function PrepareEnchidna ( ) ; begin
63469: LD_INT 0
63471: PPUSH
// uc_side := 0 ;
63472: LD_ADDR_OWVAR 20
63476: PUSH
63477: LD_INT 0
63479: ST_TO_ADDR
// uc_nation := 0 ;
63480: LD_ADDR_OWVAR 21
63484: PUSH
63485: LD_INT 0
63487: ST_TO_ADDR
// hc_class := class_baggie ;
63488: LD_ADDR_OWVAR 28
63492: PUSH
63493: LD_INT 13
63495: ST_TO_ADDR
// hc_gallery :=  ;
63496: LD_ADDR_OWVAR 33
63500: PUSH
63501: LD_STRING 
63503: ST_TO_ADDR
// end ;
63504: LD_VAR 0 1
63508: RET
// export function PrepareFrog ( ) ; begin
63509: LD_INT 0
63511: PPUSH
// uc_side := 0 ;
63512: LD_ADDR_OWVAR 20
63516: PUSH
63517: LD_INT 0
63519: ST_TO_ADDR
// uc_nation := 0 ;
63520: LD_ADDR_OWVAR 21
63524: PUSH
63525: LD_INT 0
63527: ST_TO_ADDR
// hc_class := class_frog ;
63528: LD_ADDR_OWVAR 28
63532: PUSH
63533: LD_INT 19
63535: ST_TO_ADDR
// hc_gallery :=  ;
63536: LD_ADDR_OWVAR 33
63540: PUSH
63541: LD_STRING 
63543: ST_TO_ADDR
// end ;
63544: LD_VAR 0 1
63548: RET
// export function PrepareFish ( ) ; begin
63549: LD_INT 0
63551: PPUSH
// uc_side := 0 ;
63552: LD_ADDR_OWVAR 20
63556: PUSH
63557: LD_INT 0
63559: ST_TO_ADDR
// uc_nation := 0 ;
63560: LD_ADDR_OWVAR 21
63564: PUSH
63565: LD_INT 0
63567: ST_TO_ADDR
// hc_class := class_fish ;
63568: LD_ADDR_OWVAR 28
63572: PUSH
63573: LD_INT 20
63575: ST_TO_ADDR
// hc_gallery :=  ;
63576: LD_ADDR_OWVAR 33
63580: PUSH
63581: LD_STRING 
63583: ST_TO_ADDR
// end ;
63584: LD_VAR 0 1
63588: RET
// export function PrepareBird ( ) ; begin
63589: LD_INT 0
63591: PPUSH
// uc_side := 0 ;
63592: LD_ADDR_OWVAR 20
63596: PUSH
63597: LD_INT 0
63599: ST_TO_ADDR
// uc_nation := 0 ;
63600: LD_ADDR_OWVAR 21
63604: PUSH
63605: LD_INT 0
63607: ST_TO_ADDR
// hc_class := class_phororhacos ;
63608: LD_ADDR_OWVAR 28
63612: PUSH
63613: LD_INT 18
63615: ST_TO_ADDR
// hc_gallery :=  ;
63616: LD_ADDR_OWVAR 33
63620: PUSH
63621: LD_STRING 
63623: ST_TO_ADDR
// end ;
63624: LD_VAR 0 1
63628: RET
// export function PrepareHorse ( ) ; begin
63629: LD_INT 0
63631: PPUSH
// uc_side := 0 ;
63632: LD_ADDR_OWVAR 20
63636: PUSH
63637: LD_INT 0
63639: ST_TO_ADDR
// uc_nation := 0 ;
63640: LD_ADDR_OWVAR 21
63644: PUSH
63645: LD_INT 0
63647: ST_TO_ADDR
// hc_class := class_horse ;
63648: LD_ADDR_OWVAR 28
63652: PUSH
63653: LD_INT 21
63655: ST_TO_ADDR
// hc_gallery :=  ;
63656: LD_ADDR_OWVAR 33
63660: PUSH
63661: LD_STRING 
63663: ST_TO_ADDR
// end ;
63664: LD_VAR 0 1
63668: RET
// export function PrepareMastodont ( ) ; begin
63669: LD_INT 0
63671: PPUSH
// uc_side := 0 ;
63672: LD_ADDR_OWVAR 20
63676: PUSH
63677: LD_INT 0
63679: ST_TO_ADDR
// uc_nation := 0 ;
63680: LD_ADDR_OWVAR 21
63684: PUSH
63685: LD_INT 0
63687: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63688: LD_ADDR_OWVAR 37
63692: PUSH
63693: LD_INT 31
63695: ST_TO_ADDR
// vc_control := control_rider ;
63696: LD_ADDR_OWVAR 38
63700: PUSH
63701: LD_INT 4
63703: ST_TO_ADDR
// end ;
63704: LD_VAR 0 1
63708: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63709: LD_INT 0
63711: PPUSH
63712: PPUSH
63713: PPUSH
// uc_side = 0 ;
63714: LD_ADDR_OWVAR 20
63718: PUSH
63719: LD_INT 0
63721: ST_TO_ADDR
// uc_nation = 0 ;
63722: LD_ADDR_OWVAR 21
63726: PUSH
63727: LD_INT 0
63729: ST_TO_ADDR
// InitHc_All ( ) ;
63730: CALL_OW 584
// InitVc ;
63734: CALL_OW 20
// if mastodonts then
63738: LD_VAR 0 6
63742: IFFALSE 63809
// for i = 1 to mastodonts do
63744: LD_ADDR_VAR 0 11
63748: PUSH
63749: DOUBLE
63750: LD_INT 1
63752: DEC
63753: ST_TO_ADDR
63754: LD_VAR 0 6
63758: PUSH
63759: FOR_TO
63760: IFFALSE 63807
// begin vc_chassis := 31 ;
63762: LD_ADDR_OWVAR 37
63766: PUSH
63767: LD_INT 31
63769: ST_TO_ADDR
// vc_control := control_rider ;
63770: LD_ADDR_OWVAR 38
63774: PUSH
63775: LD_INT 4
63777: ST_TO_ADDR
// animal := CreateVehicle ;
63778: LD_ADDR_VAR 0 12
63782: PUSH
63783: CALL_OW 45
63787: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63788: LD_VAR 0 12
63792: PPUSH
63793: LD_VAR 0 8
63797: PPUSH
63798: LD_INT 0
63800: PPUSH
63801: CALL 65937 0 3
// end ;
63805: GO 63759
63807: POP
63808: POP
// if horses then
63809: LD_VAR 0 5
63813: IFFALSE 63880
// for i = 1 to horses do
63815: LD_ADDR_VAR 0 11
63819: PUSH
63820: DOUBLE
63821: LD_INT 1
63823: DEC
63824: ST_TO_ADDR
63825: LD_VAR 0 5
63829: PUSH
63830: FOR_TO
63831: IFFALSE 63878
// begin hc_class := 21 ;
63833: LD_ADDR_OWVAR 28
63837: PUSH
63838: LD_INT 21
63840: ST_TO_ADDR
// hc_gallery :=  ;
63841: LD_ADDR_OWVAR 33
63845: PUSH
63846: LD_STRING 
63848: ST_TO_ADDR
// animal := CreateHuman ;
63849: LD_ADDR_VAR 0 12
63853: PUSH
63854: CALL_OW 44
63858: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63859: LD_VAR 0 12
63863: PPUSH
63864: LD_VAR 0 8
63868: PPUSH
63869: LD_INT 0
63871: PPUSH
63872: CALL 65937 0 3
// end ;
63876: GO 63830
63878: POP
63879: POP
// if birds then
63880: LD_VAR 0 1
63884: IFFALSE 63951
// for i = 1 to birds do
63886: LD_ADDR_VAR 0 11
63890: PUSH
63891: DOUBLE
63892: LD_INT 1
63894: DEC
63895: ST_TO_ADDR
63896: LD_VAR 0 1
63900: PUSH
63901: FOR_TO
63902: IFFALSE 63949
// begin hc_class = 18 ;
63904: LD_ADDR_OWVAR 28
63908: PUSH
63909: LD_INT 18
63911: ST_TO_ADDR
// hc_gallery =  ;
63912: LD_ADDR_OWVAR 33
63916: PUSH
63917: LD_STRING 
63919: ST_TO_ADDR
// animal := CreateHuman ;
63920: LD_ADDR_VAR 0 12
63924: PUSH
63925: CALL_OW 44
63929: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63930: LD_VAR 0 12
63934: PPUSH
63935: LD_VAR 0 8
63939: PPUSH
63940: LD_INT 0
63942: PPUSH
63943: CALL 65937 0 3
// end ;
63947: GO 63901
63949: POP
63950: POP
// if tigers then
63951: LD_VAR 0 2
63955: IFFALSE 64039
// for i = 1 to tigers do
63957: LD_ADDR_VAR 0 11
63961: PUSH
63962: DOUBLE
63963: LD_INT 1
63965: DEC
63966: ST_TO_ADDR
63967: LD_VAR 0 2
63971: PUSH
63972: FOR_TO
63973: IFFALSE 64037
// begin hc_class = class_tiger ;
63975: LD_ADDR_OWVAR 28
63979: PUSH
63980: LD_INT 14
63982: ST_TO_ADDR
// hc_gallery =  ;
63983: LD_ADDR_OWVAR 33
63987: PUSH
63988: LD_STRING 
63990: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63991: LD_ADDR_OWVAR 35
63995: PUSH
63996: LD_INT 7
63998: NEG
63999: PPUSH
64000: LD_INT 7
64002: PPUSH
64003: CALL_OW 12
64007: ST_TO_ADDR
// animal := CreateHuman ;
64008: LD_ADDR_VAR 0 12
64012: PUSH
64013: CALL_OW 44
64017: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64018: LD_VAR 0 12
64022: PPUSH
64023: LD_VAR 0 8
64027: PPUSH
64028: LD_INT 0
64030: PPUSH
64031: CALL 65937 0 3
// end ;
64035: GO 63972
64037: POP
64038: POP
// if apemans then
64039: LD_VAR 0 3
64043: IFFALSE 64166
// for i = 1 to apemans do
64045: LD_ADDR_VAR 0 11
64049: PUSH
64050: DOUBLE
64051: LD_INT 1
64053: DEC
64054: ST_TO_ADDR
64055: LD_VAR 0 3
64059: PUSH
64060: FOR_TO
64061: IFFALSE 64164
// begin hc_class = class_apeman ;
64063: LD_ADDR_OWVAR 28
64067: PUSH
64068: LD_INT 12
64070: ST_TO_ADDR
// hc_gallery =  ;
64071: LD_ADDR_OWVAR 33
64075: PUSH
64076: LD_STRING 
64078: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64079: LD_ADDR_OWVAR 35
64083: PUSH
64084: LD_INT 2
64086: NEG
64087: PPUSH
64088: LD_INT 2
64090: PPUSH
64091: CALL_OW 12
64095: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64096: LD_ADDR_OWVAR 31
64100: PUSH
64101: LD_INT 1
64103: PPUSH
64104: LD_INT 3
64106: PPUSH
64107: CALL_OW 12
64111: PUSH
64112: LD_INT 1
64114: PPUSH
64115: LD_INT 3
64117: PPUSH
64118: CALL_OW 12
64122: PUSH
64123: LD_INT 0
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: ST_TO_ADDR
// animal := CreateHuman ;
64135: LD_ADDR_VAR 0 12
64139: PUSH
64140: CALL_OW 44
64144: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64145: LD_VAR 0 12
64149: PPUSH
64150: LD_VAR 0 8
64154: PPUSH
64155: LD_INT 0
64157: PPUSH
64158: CALL 65937 0 3
// end ;
64162: GO 64060
64164: POP
64165: POP
// if enchidnas then
64166: LD_VAR 0 4
64170: IFFALSE 64237
// for i = 1 to enchidnas do
64172: LD_ADDR_VAR 0 11
64176: PUSH
64177: DOUBLE
64178: LD_INT 1
64180: DEC
64181: ST_TO_ADDR
64182: LD_VAR 0 4
64186: PUSH
64187: FOR_TO
64188: IFFALSE 64235
// begin hc_class = 13 ;
64190: LD_ADDR_OWVAR 28
64194: PUSH
64195: LD_INT 13
64197: ST_TO_ADDR
// hc_gallery =  ;
64198: LD_ADDR_OWVAR 33
64202: PUSH
64203: LD_STRING 
64205: ST_TO_ADDR
// animal := CreateHuman ;
64206: LD_ADDR_VAR 0 12
64210: PUSH
64211: CALL_OW 44
64215: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64216: LD_VAR 0 12
64220: PPUSH
64221: LD_VAR 0 8
64225: PPUSH
64226: LD_INT 0
64228: PPUSH
64229: CALL 65937 0 3
// end ;
64233: GO 64187
64235: POP
64236: POP
// if fishes then
64237: LD_VAR 0 7
64241: IFFALSE 64308
// for i = 1 to fishes do
64243: LD_ADDR_VAR 0 11
64247: PUSH
64248: DOUBLE
64249: LD_INT 1
64251: DEC
64252: ST_TO_ADDR
64253: LD_VAR 0 7
64257: PUSH
64258: FOR_TO
64259: IFFALSE 64306
// begin hc_class = 20 ;
64261: LD_ADDR_OWVAR 28
64265: PUSH
64266: LD_INT 20
64268: ST_TO_ADDR
// hc_gallery =  ;
64269: LD_ADDR_OWVAR 33
64273: PUSH
64274: LD_STRING 
64276: ST_TO_ADDR
// animal := CreateHuman ;
64277: LD_ADDR_VAR 0 12
64281: PUSH
64282: CALL_OW 44
64286: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64287: LD_VAR 0 12
64291: PPUSH
64292: LD_VAR 0 9
64296: PPUSH
64297: LD_INT 0
64299: PPUSH
64300: CALL 65937 0 3
// end ;
64304: GO 64258
64306: POP
64307: POP
// end ;
64308: LD_VAR 0 10
64312: RET
// export function WantHeal ( sci , unit ) ; begin
64313: LD_INT 0
64315: PPUSH
// if GetTaskList ( sci ) > 0 then
64316: LD_VAR 0 1
64320: PPUSH
64321: CALL_OW 437
64325: PUSH
64326: LD_INT 0
64328: GREATER
64329: IFFALSE 64399
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64331: LD_VAR 0 1
64335: PPUSH
64336: CALL_OW 437
64340: PUSH
64341: LD_INT 1
64343: ARRAY
64344: PUSH
64345: LD_INT 1
64347: ARRAY
64348: PUSH
64349: LD_STRING l
64351: EQUAL
64352: PUSH
64353: LD_VAR 0 1
64357: PPUSH
64358: CALL_OW 437
64362: PUSH
64363: LD_INT 1
64365: ARRAY
64366: PUSH
64367: LD_INT 4
64369: ARRAY
64370: PUSH
64371: LD_VAR 0 2
64375: EQUAL
64376: AND
64377: IFFALSE 64389
// result := true else
64379: LD_ADDR_VAR 0 3
64383: PUSH
64384: LD_INT 1
64386: ST_TO_ADDR
64387: GO 64397
// result := false ;
64389: LD_ADDR_VAR 0 3
64393: PUSH
64394: LD_INT 0
64396: ST_TO_ADDR
// end else
64397: GO 64407
// result := false ;
64399: LD_ADDR_VAR 0 3
64403: PUSH
64404: LD_INT 0
64406: ST_TO_ADDR
// end ;
64407: LD_VAR 0 3
64411: RET
// export function HealTarget ( sci ) ; begin
64412: LD_INT 0
64414: PPUSH
// if not sci then
64415: LD_VAR 0 1
64419: NOT
64420: IFFALSE 64424
// exit ;
64422: GO 64489
// result := 0 ;
64424: LD_ADDR_VAR 0 2
64428: PUSH
64429: LD_INT 0
64431: ST_TO_ADDR
// if GetTaskList ( sci ) then
64432: LD_VAR 0 1
64436: PPUSH
64437: CALL_OW 437
64441: IFFALSE 64489
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64443: LD_VAR 0 1
64447: PPUSH
64448: CALL_OW 437
64452: PUSH
64453: LD_INT 1
64455: ARRAY
64456: PUSH
64457: LD_INT 1
64459: ARRAY
64460: PUSH
64461: LD_STRING l
64463: EQUAL
64464: IFFALSE 64489
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64466: LD_ADDR_VAR 0 2
64470: PUSH
64471: LD_VAR 0 1
64475: PPUSH
64476: CALL_OW 437
64480: PUSH
64481: LD_INT 1
64483: ARRAY
64484: PUSH
64485: LD_INT 4
64487: ARRAY
64488: ST_TO_ADDR
// end ;
64489: LD_VAR 0 2
64493: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64494: LD_INT 0
64496: PPUSH
64497: PPUSH
64498: PPUSH
64499: PPUSH
// if not base_units then
64500: LD_VAR 0 1
64504: NOT
64505: IFFALSE 64509
// exit ;
64507: GO 64596
// result := false ;
64509: LD_ADDR_VAR 0 2
64513: PUSH
64514: LD_INT 0
64516: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64517: LD_ADDR_VAR 0 5
64521: PUSH
64522: LD_VAR 0 1
64526: PPUSH
64527: LD_INT 21
64529: PUSH
64530: LD_INT 3
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PPUSH
64537: CALL_OW 72
64541: ST_TO_ADDR
// if not tmp then
64542: LD_VAR 0 5
64546: NOT
64547: IFFALSE 64551
// exit ;
64549: GO 64596
// for i in tmp do
64551: LD_ADDR_VAR 0 3
64555: PUSH
64556: LD_VAR 0 5
64560: PUSH
64561: FOR_IN
64562: IFFALSE 64594
// begin result := EnemyInRange ( i , 22 ) ;
64564: LD_ADDR_VAR 0 2
64568: PUSH
64569: LD_VAR 0 3
64573: PPUSH
64574: LD_INT 22
64576: PPUSH
64577: CALL 62183 0 2
64581: ST_TO_ADDR
// if result then
64582: LD_VAR 0 2
64586: IFFALSE 64592
// exit ;
64588: POP
64589: POP
64590: GO 64596
// end ;
64592: GO 64561
64594: POP
64595: POP
// end ;
64596: LD_VAR 0 2
64600: RET
// export function FilterByTag ( units , tag ) ; begin
64601: LD_INT 0
64603: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64604: LD_ADDR_VAR 0 3
64608: PUSH
64609: LD_VAR 0 1
64613: PPUSH
64614: LD_INT 120
64616: PUSH
64617: LD_VAR 0 2
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PPUSH
64626: CALL_OW 72
64630: ST_TO_ADDR
// end ;
64631: LD_VAR 0 3
64635: RET
// export function IsDriver ( un ) ; begin
64636: LD_INT 0
64638: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64639: LD_ADDR_VAR 0 2
64643: PUSH
64644: LD_VAR 0 1
64648: PUSH
64649: LD_INT 55
64651: PUSH
64652: EMPTY
64653: LIST
64654: PPUSH
64655: CALL_OW 69
64659: IN
64660: ST_TO_ADDR
// end ;
64661: LD_VAR 0 2
64665: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64666: LD_INT 0
64668: PPUSH
64669: PPUSH
// list := [ ] ;
64670: LD_ADDR_VAR 0 5
64674: PUSH
64675: EMPTY
64676: ST_TO_ADDR
// case d of 0 :
64677: LD_VAR 0 3
64681: PUSH
64682: LD_INT 0
64684: DOUBLE
64685: EQUAL
64686: IFTRUE 64690
64688: GO 64823
64690: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64691: LD_ADDR_VAR 0 5
64695: PUSH
64696: LD_VAR 0 1
64700: PUSH
64701: LD_INT 4
64703: MINUS
64704: PUSH
64705: LD_VAR 0 2
64709: PUSH
64710: LD_INT 4
64712: MINUS
64713: PUSH
64714: LD_INT 2
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: LIST
64721: PUSH
64722: LD_VAR 0 1
64726: PUSH
64727: LD_INT 3
64729: MINUS
64730: PUSH
64731: LD_VAR 0 2
64735: PUSH
64736: LD_INT 1
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: LIST
64743: PUSH
64744: LD_VAR 0 1
64748: PUSH
64749: LD_INT 4
64751: PLUS
64752: PUSH
64753: LD_VAR 0 2
64757: PUSH
64758: LD_INT 4
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: LIST
64765: PUSH
64766: LD_VAR 0 1
64770: PUSH
64771: LD_INT 3
64773: PLUS
64774: PUSH
64775: LD_VAR 0 2
64779: PUSH
64780: LD_INT 3
64782: PLUS
64783: PUSH
64784: LD_INT 5
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: LIST
64791: PUSH
64792: LD_VAR 0 1
64796: PUSH
64797: LD_VAR 0 2
64801: PUSH
64802: LD_INT 4
64804: PLUS
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: LIST
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: ST_TO_ADDR
// end ; 1 :
64821: GO 65521
64823: LD_INT 1
64825: DOUBLE
64826: EQUAL
64827: IFTRUE 64831
64829: GO 64964
64831: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64832: LD_ADDR_VAR 0 5
64836: PUSH
64837: LD_VAR 0 1
64841: PUSH
64842: LD_VAR 0 2
64846: PUSH
64847: LD_INT 4
64849: MINUS
64850: PUSH
64851: LD_INT 3
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: LIST
64858: PUSH
64859: LD_VAR 0 1
64863: PUSH
64864: LD_INT 3
64866: MINUS
64867: PUSH
64868: LD_VAR 0 2
64872: PUSH
64873: LD_INT 3
64875: MINUS
64876: PUSH
64877: LD_INT 2
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: PUSH
64885: LD_VAR 0 1
64889: PUSH
64890: LD_INT 4
64892: MINUS
64893: PUSH
64894: LD_VAR 0 2
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: LIST
64906: PUSH
64907: LD_VAR 0 1
64911: PUSH
64912: LD_VAR 0 2
64916: PUSH
64917: LD_INT 3
64919: PLUS
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: LIST
64928: PUSH
64929: LD_VAR 0 1
64933: PUSH
64934: LD_INT 4
64936: PLUS
64937: PUSH
64938: LD_VAR 0 2
64942: PUSH
64943: LD_INT 4
64945: PLUS
64946: PUSH
64947: LD_INT 5
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: LIST
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: ST_TO_ADDR
// end ; 2 :
64962: GO 65521
64964: LD_INT 2
64966: DOUBLE
64967: EQUAL
64968: IFTRUE 64972
64970: GO 65101
64972: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64973: LD_ADDR_VAR 0 5
64977: PUSH
64978: LD_VAR 0 1
64982: PUSH
64983: LD_VAR 0 2
64987: PUSH
64988: LD_INT 3
64990: MINUS
64991: PUSH
64992: LD_INT 3
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: LIST
64999: PUSH
65000: LD_VAR 0 1
65004: PUSH
65005: LD_INT 4
65007: PLUS
65008: PUSH
65009: LD_VAR 0 2
65013: PUSH
65014: LD_INT 4
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: LIST
65021: PUSH
65022: LD_VAR 0 1
65026: PUSH
65027: LD_VAR 0 2
65031: PUSH
65032: LD_INT 4
65034: PLUS
65035: PUSH
65036: LD_INT 0
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: LIST
65043: PUSH
65044: LD_VAR 0 1
65048: PUSH
65049: LD_INT 3
65051: MINUS
65052: PUSH
65053: LD_VAR 0 2
65057: PUSH
65058: LD_INT 1
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: LIST
65065: PUSH
65066: LD_VAR 0 1
65070: PUSH
65071: LD_INT 4
65073: MINUS
65074: PUSH
65075: LD_VAR 0 2
65079: PUSH
65080: LD_INT 4
65082: MINUS
65083: PUSH
65084: LD_INT 2
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: LIST
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: ST_TO_ADDR
// end ; 3 :
65099: GO 65521
65101: LD_INT 3
65103: DOUBLE
65104: EQUAL
65105: IFTRUE 65109
65107: GO 65242
65109: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65110: LD_ADDR_VAR 0 5
65114: PUSH
65115: LD_VAR 0 1
65119: PUSH
65120: LD_INT 3
65122: PLUS
65123: PUSH
65124: LD_VAR 0 2
65128: PUSH
65129: LD_INT 4
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: PUSH
65137: LD_VAR 0 1
65141: PUSH
65142: LD_INT 4
65144: PLUS
65145: PUSH
65146: LD_VAR 0 2
65150: PUSH
65151: LD_INT 4
65153: PLUS
65154: PUSH
65155: LD_INT 5
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: LIST
65162: PUSH
65163: LD_VAR 0 1
65167: PUSH
65168: LD_INT 4
65170: MINUS
65171: PUSH
65172: LD_VAR 0 2
65176: PUSH
65177: LD_INT 1
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: LIST
65184: PUSH
65185: LD_VAR 0 1
65189: PUSH
65190: LD_VAR 0 2
65194: PUSH
65195: LD_INT 4
65197: MINUS
65198: PUSH
65199: LD_INT 3
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: LIST
65206: PUSH
65207: LD_VAR 0 1
65211: PUSH
65212: LD_INT 3
65214: MINUS
65215: PUSH
65216: LD_VAR 0 2
65220: PUSH
65221: LD_INT 3
65223: MINUS
65224: PUSH
65225: LD_INT 2
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: LIST
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: ST_TO_ADDR
// end ; 4 :
65240: GO 65521
65242: LD_INT 4
65244: DOUBLE
65245: EQUAL
65246: IFTRUE 65250
65248: GO 65383
65250: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65251: LD_ADDR_VAR 0 5
65255: PUSH
65256: LD_VAR 0 1
65260: PUSH
65261: LD_VAR 0 2
65265: PUSH
65266: LD_INT 4
65268: PLUS
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: LIST
65277: PUSH
65278: LD_VAR 0 1
65282: PUSH
65283: LD_INT 3
65285: PLUS
65286: PUSH
65287: LD_VAR 0 2
65291: PUSH
65292: LD_INT 3
65294: PLUS
65295: PUSH
65296: LD_INT 5
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: LIST
65303: PUSH
65304: LD_VAR 0 1
65308: PUSH
65309: LD_INT 4
65311: PLUS
65312: PUSH
65313: LD_VAR 0 2
65317: PUSH
65318: LD_INT 4
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: LIST
65325: PUSH
65326: LD_VAR 0 1
65330: PUSH
65331: LD_VAR 0 2
65335: PUSH
65336: LD_INT 3
65338: MINUS
65339: PUSH
65340: LD_INT 3
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: LIST
65347: PUSH
65348: LD_VAR 0 1
65352: PUSH
65353: LD_INT 4
65355: MINUS
65356: PUSH
65357: LD_VAR 0 2
65361: PUSH
65362: LD_INT 4
65364: MINUS
65365: PUSH
65366: LD_INT 2
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: LIST
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: ST_TO_ADDR
// end ; 5 :
65381: GO 65521
65383: LD_INT 5
65385: DOUBLE
65386: EQUAL
65387: IFTRUE 65391
65389: GO 65520
65391: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65392: LD_ADDR_VAR 0 5
65396: PUSH
65397: LD_VAR 0 1
65401: PUSH
65402: LD_INT 4
65404: MINUS
65405: PUSH
65406: LD_VAR 0 2
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: LIST
65418: PUSH
65419: LD_VAR 0 1
65423: PUSH
65424: LD_VAR 0 2
65428: PUSH
65429: LD_INT 4
65431: MINUS
65432: PUSH
65433: LD_INT 3
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: LIST
65440: PUSH
65441: LD_VAR 0 1
65445: PUSH
65446: LD_INT 4
65448: PLUS
65449: PUSH
65450: LD_VAR 0 2
65454: PUSH
65455: LD_INT 4
65457: PLUS
65458: PUSH
65459: LD_INT 5
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: LIST
65466: PUSH
65467: LD_VAR 0 1
65471: PUSH
65472: LD_INT 3
65474: PLUS
65475: PUSH
65476: LD_VAR 0 2
65480: PUSH
65481: LD_INT 4
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: LIST
65488: PUSH
65489: LD_VAR 0 1
65493: PUSH
65494: LD_VAR 0 2
65498: PUSH
65499: LD_INT 3
65501: PLUS
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: LIST
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: ST_TO_ADDR
// end ; end ;
65518: GO 65521
65520: POP
// result := list ;
65521: LD_ADDR_VAR 0 4
65525: PUSH
65526: LD_VAR 0 5
65530: ST_TO_ADDR
// end ;
65531: LD_VAR 0 4
65535: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65536: LD_INT 0
65538: PPUSH
65539: PPUSH
65540: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65541: LD_VAR 0 1
65545: NOT
65546: PUSH
65547: LD_VAR 0 2
65551: PUSH
65552: LD_INT 1
65554: PUSH
65555: LD_INT 2
65557: PUSH
65558: LD_INT 3
65560: PUSH
65561: LD_INT 4
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: IN
65570: NOT
65571: OR
65572: IFFALSE 65576
// exit ;
65574: GO 65659
// tmp := [ ] ;
65576: LD_ADDR_VAR 0 5
65580: PUSH
65581: EMPTY
65582: ST_TO_ADDR
// for i in units do
65583: LD_ADDR_VAR 0 4
65587: PUSH
65588: LD_VAR 0 1
65592: PUSH
65593: FOR_IN
65594: IFFALSE 65628
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65596: LD_ADDR_VAR 0 5
65600: PUSH
65601: LD_VAR 0 5
65605: PPUSH
65606: LD_VAR 0 4
65610: PPUSH
65611: LD_VAR 0 2
65615: PPUSH
65616: CALL_OW 259
65620: PPUSH
65621: CALL 67020 0 2
65625: ST_TO_ADDR
65626: GO 65593
65628: POP
65629: POP
// if not tmp then
65630: LD_VAR 0 5
65634: NOT
65635: IFFALSE 65639
// exit ;
65637: GO 65659
// result := SortListByListDesc ( units , tmp ) ;
65639: LD_ADDR_VAR 0 3
65643: PUSH
65644: LD_VAR 0 1
65648: PPUSH
65649: LD_VAR 0 5
65653: PPUSH
65654: CALL_OW 77
65658: ST_TO_ADDR
// end ;
65659: LD_VAR 0 3
65663: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65664: LD_INT 0
65666: PPUSH
65667: PPUSH
65668: PPUSH
// result := false ;
65669: LD_ADDR_VAR 0 3
65673: PUSH
65674: LD_INT 0
65676: ST_TO_ADDR
// if not building then
65677: LD_VAR 0 2
65681: NOT
65682: IFFALSE 65686
// exit ;
65684: GO 65824
// x := GetX ( building ) ;
65686: LD_ADDR_VAR 0 4
65690: PUSH
65691: LD_VAR 0 2
65695: PPUSH
65696: CALL_OW 250
65700: ST_TO_ADDR
// y := GetY ( building ) ;
65701: LD_ADDR_VAR 0 5
65705: PUSH
65706: LD_VAR 0 2
65710: PPUSH
65711: CALL_OW 251
65715: ST_TO_ADDR
// if not x or not y then
65716: LD_VAR 0 4
65720: NOT
65721: PUSH
65722: LD_VAR 0 5
65726: NOT
65727: OR
65728: IFFALSE 65732
// exit ;
65730: GO 65824
// if GetTaskList ( unit ) then
65732: LD_VAR 0 1
65736: PPUSH
65737: CALL_OW 437
65741: IFFALSE 65824
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65743: LD_STRING e
65745: PUSH
65746: LD_VAR 0 1
65750: PPUSH
65751: CALL_OW 437
65755: PUSH
65756: LD_INT 1
65758: ARRAY
65759: PUSH
65760: LD_INT 1
65762: ARRAY
65763: EQUAL
65764: PUSH
65765: LD_VAR 0 4
65769: PUSH
65770: LD_VAR 0 1
65774: PPUSH
65775: CALL_OW 437
65779: PUSH
65780: LD_INT 1
65782: ARRAY
65783: PUSH
65784: LD_INT 2
65786: ARRAY
65787: EQUAL
65788: AND
65789: PUSH
65790: LD_VAR 0 5
65794: PUSH
65795: LD_VAR 0 1
65799: PPUSH
65800: CALL_OW 437
65804: PUSH
65805: LD_INT 1
65807: ARRAY
65808: PUSH
65809: LD_INT 3
65811: ARRAY
65812: EQUAL
65813: AND
65814: IFFALSE 65824
// result := true end ;
65816: LD_ADDR_VAR 0 3
65820: PUSH
65821: LD_INT 1
65823: ST_TO_ADDR
// end ;
65824: LD_VAR 0 3
65828: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65829: LD_INT 0
65831: PPUSH
// result := false ;
65832: LD_ADDR_VAR 0 4
65836: PUSH
65837: LD_INT 0
65839: ST_TO_ADDR
// if GetTaskList ( unit ) then
65840: LD_VAR 0 1
65844: PPUSH
65845: CALL_OW 437
65849: IFFALSE 65932
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65851: LD_STRING M
65853: PUSH
65854: LD_VAR 0 1
65858: PPUSH
65859: CALL_OW 437
65863: PUSH
65864: LD_INT 1
65866: ARRAY
65867: PUSH
65868: LD_INT 1
65870: ARRAY
65871: EQUAL
65872: PUSH
65873: LD_VAR 0 2
65877: PUSH
65878: LD_VAR 0 1
65882: PPUSH
65883: CALL_OW 437
65887: PUSH
65888: LD_INT 1
65890: ARRAY
65891: PUSH
65892: LD_INT 2
65894: ARRAY
65895: EQUAL
65896: AND
65897: PUSH
65898: LD_VAR 0 3
65902: PUSH
65903: LD_VAR 0 1
65907: PPUSH
65908: CALL_OW 437
65912: PUSH
65913: LD_INT 1
65915: ARRAY
65916: PUSH
65917: LD_INT 3
65919: ARRAY
65920: EQUAL
65921: AND
65922: IFFALSE 65932
// result := true ;
65924: LD_ADDR_VAR 0 4
65928: PUSH
65929: LD_INT 1
65931: ST_TO_ADDR
// end ; end ;
65932: LD_VAR 0 4
65936: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65937: LD_INT 0
65939: PPUSH
65940: PPUSH
65941: PPUSH
65942: PPUSH
// if not unit or not area then
65943: LD_VAR 0 1
65947: NOT
65948: PUSH
65949: LD_VAR 0 2
65953: NOT
65954: OR
65955: IFFALSE 65959
// exit ;
65957: GO 66123
// tmp := AreaToList ( area , i ) ;
65959: LD_ADDR_VAR 0 6
65963: PUSH
65964: LD_VAR 0 2
65968: PPUSH
65969: LD_VAR 0 5
65973: PPUSH
65974: CALL_OW 517
65978: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65979: LD_ADDR_VAR 0 5
65983: PUSH
65984: DOUBLE
65985: LD_INT 1
65987: DEC
65988: ST_TO_ADDR
65989: LD_VAR 0 6
65993: PUSH
65994: LD_INT 1
65996: ARRAY
65997: PUSH
65998: FOR_TO
65999: IFFALSE 66121
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66001: LD_ADDR_VAR 0 7
66005: PUSH
66006: LD_VAR 0 6
66010: PUSH
66011: LD_INT 1
66013: ARRAY
66014: PUSH
66015: LD_VAR 0 5
66019: ARRAY
66020: PUSH
66021: LD_VAR 0 6
66025: PUSH
66026: LD_INT 2
66028: ARRAY
66029: PUSH
66030: LD_VAR 0 5
66034: ARRAY
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66040: LD_VAR 0 7
66044: PUSH
66045: LD_INT 1
66047: ARRAY
66048: PPUSH
66049: LD_VAR 0 7
66053: PUSH
66054: LD_INT 2
66056: ARRAY
66057: PPUSH
66058: CALL_OW 428
66062: PUSH
66063: LD_INT 0
66065: EQUAL
66066: IFFALSE 66119
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66068: LD_VAR 0 1
66072: PPUSH
66073: LD_VAR 0 7
66077: PUSH
66078: LD_INT 1
66080: ARRAY
66081: PPUSH
66082: LD_VAR 0 7
66086: PUSH
66087: LD_INT 2
66089: ARRAY
66090: PPUSH
66091: LD_VAR 0 3
66095: PPUSH
66096: CALL_OW 48
// result := IsPlaced ( unit ) ;
66100: LD_ADDR_VAR 0 4
66104: PUSH
66105: LD_VAR 0 1
66109: PPUSH
66110: CALL_OW 305
66114: ST_TO_ADDR
// exit ;
66115: POP
66116: POP
66117: GO 66123
// end ; end ;
66119: GO 65998
66121: POP
66122: POP
// end ;
66123: LD_VAR 0 4
66127: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66128: LD_INT 0
66130: PPUSH
66131: PPUSH
66132: PPUSH
// if not side or side > 8 then
66133: LD_VAR 0 1
66137: NOT
66138: PUSH
66139: LD_VAR 0 1
66143: PUSH
66144: LD_INT 8
66146: GREATER
66147: OR
66148: IFFALSE 66152
// exit ;
66150: GO 66339
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66152: LD_ADDR_VAR 0 4
66156: PUSH
66157: LD_INT 22
66159: PUSH
66160: LD_VAR 0 1
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 21
66171: PUSH
66172: LD_INT 3
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PPUSH
66183: CALL_OW 69
66187: ST_TO_ADDR
// if not tmp then
66188: LD_VAR 0 4
66192: NOT
66193: IFFALSE 66197
// exit ;
66195: GO 66339
// enable_addtolog := true ;
66197: LD_ADDR_OWVAR 81
66201: PUSH
66202: LD_INT 1
66204: ST_TO_ADDR
// AddToLog ( [ ) ;
66205: LD_STRING [
66207: PPUSH
66208: CALL_OW 561
// for i in tmp do
66212: LD_ADDR_VAR 0 3
66216: PUSH
66217: LD_VAR 0 4
66221: PUSH
66222: FOR_IN
66223: IFFALSE 66330
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66225: LD_STRING [
66227: PUSH
66228: LD_VAR 0 3
66232: PPUSH
66233: CALL_OW 266
66237: STR
66238: PUSH
66239: LD_STRING , 
66241: STR
66242: PUSH
66243: LD_VAR 0 3
66247: PPUSH
66248: CALL_OW 250
66252: STR
66253: PUSH
66254: LD_STRING , 
66256: STR
66257: PUSH
66258: LD_VAR 0 3
66262: PPUSH
66263: CALL_OW 251
66267: STR
66268: PUSH
66269: LD_STRING , 
66271: STR
66272: PUSH
66273: LD_VAR 0 3
66277: PPUSH
66278: CALL_OW 254
66282: STR
66283: PUSH
66284: LD_STRING , 
66286: STR
66287: PUSH
66288: LD_VAR 0 3
66292: PPUSH
66293: LD_INT 1
66295: PPUSH
66296: CALL_OW 268
66300: STR
66301: PUSH
66302: LD_STRING , 
66304: STR
66305: PUSH
66306: LD_VAR 0 3
66310: PPUSH
66311: LD_INT 2
66313: PPUSH
66314: CALL_OW 268
66318: STR
66319: PUSH
66320: LD_STRING ],
66322: STR
66323: PPUSH
66324: CALL_OW 561
// end ;
66328: GO 66222
66330: POP
66331: POP
// AddToLog ( ]; ) ;
66332: LD_STRING ];
66334: PPUSH
66335: CALL_OW 561
// end ;
66339: LD_VAR 0 2
66343: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66344: LD_INT 0
66346: PPUSH
66347: PPUSH
66348: PPUSH
66349: PPUSH
66350: PPUSH
// if not area or not rate or not max then
66351: LD_VAR 0 1
66355: NOT
66356: PUSH
66357: LD_VAR 0 2
66361: NOT
66362: OR
66363: PUSH
66364: LD_VAR 0 4
66368: NOT
66369: OR
66370: IFFALSE 66374
// exit ;
66372: GO 66563
// while 1 do
66374: LD_INT 1
66376: IFFALSE 66563
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66378: LD_ADDR_VAR 0 9
66382: PUSH
66383: LD_VAR 0 1
66387: PPUSH
66388: LD_INT 1
66390: PPUSH
66391: CALL_OW 287
66395: PUSH
66396: LD_INT 10
66398: MUL
66399: ST_TO_ADDR
// r := rate / 10 ;
66400: LD_ADDR_VAR 0 7
66404: PUSH
66405: LD_VAR 0 2
66409: PUSH
66410: LD_INT 10
66412: DIVREAL
66413: ST_TO_ADDR
// time := 1 1$00 ;
66414: LD_ADDR_VAR 0 8
66418: PUSH
66419: LD_INT 2100
66421: ST_TO_ADDR
// if amount < min then
66422: LD_VAR 0 9
66426: PUSH
66427: LD_VAR 0 3
66431: LESS
66432: IFFALSE 66450
// r := r * 2 else
66434: LD_ADDR_VAR 0 7
66438: PUSH
66439: LD_VAR 0 7
66443: PUSH
66444: LD_INT 2
66446: MUL
66447: ST_TO_ADDR
66448: GO 66476
// if amount > max then
66450: LD_VAR 0 9
66454: PUSH
66455: LD_VAR 0 4
66459: GREATER
66460: IFFALSE 66476
// r := r / 2 ;
66462: LD_ADDR_VAR 0 7
66466: PUSH
66467: LD_VAR 0 7
66471: PUSH
66472: LD_INT 2
66474: DIVREAL
66475: ST_TO_ADDR
// time := time / r ;
66476: LD_ADDR_VAR 0 8
66480: PUSH
66481: LD_VAR 0 8
66485: PUSH
66486: LD_VAR 0 7
66490: DIVREAL
66491: ST_TO_ADDR
// if time < 0 then
66492: LD_VAR 0 8
66496: PUSH
66497: LD_INT 0
66499: LESS
66500: IFFALSE 66517
// time := time * - 1 ;
66502: LD_ADDR_VAR 0 8
66506: PUSH
66507: LD_VAR 0 8
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: MUL
66516: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66517: LD_VAR 0 8
66521: PUSH
66522: LD_INT 35
66524: PPUSH
66525: LD_INT 875
66527: PPUSH
66528: CALL_OW 12
66532: PLUS
66533: PPUSH
66534: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66538: LD_INT 1
66540: PPUSH
66541: LD_INT 5
66543: PPUSH
66544: CALL_OW 12
66548: PPUSH
66549: LD_VAR 0 1
66553: PPUSH
66554: LD_INT 1
66556: PPUSH
66557: CALL_OW 55
// end ;
66561: GO 66374
// end ;
66563: LD_VAR 0 5
66567: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66568: LD_INT 0
66570: PPUSH
66571: PPUSH
66572: PPUSH
66573: PPUSH
66574: PPUSH
66575: PPUSH
66576: PPUSH
66577: PPUSH
// if not turrets or not factories then
66578: LD_VAR 0 1
66582: NOT
66583: PUSH
66584: LD_VAR 0 2
66588: NOT
66589: OR
66590: IFFALSE 66594
// exit ;
66592: GO 66901
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66594: LD_ADDR_VAR 0 10
66598: PUSH
66599: LD_INT 5
66601: PUSH
66602: LD_INT 6
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 2
66611: PUSH
66612: LD_INT 4
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 3
66621: PUSH
66622: LD_INT 5
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 24
66636: PUSH
66637: LD_INT 25
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 23
66646: PUSH
66647: LD_INT 27
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 42
66660: PUSH
66661: LD_INT 43
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 44
66670: PUSH
66671: LD_INT 46
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 45
66680: PUSH
66681: LD_INT 47
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: LIST
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: ST_TO_ADDR
// result := [ ] ;
66698: LD_ADDR_VAR 0 3
66702: PUSH
66703: EMPTY
66704: ST_TO_ADDR
// for i in turrets do
66705: LD_ADDR_VAR 0 4
66709: PUSH
66710: LD_VAR 0 1
66714: PUSH
66715: FOR_IN
66716: IFFALSE 66899
// begin nat := GetNation ( i ) ;
66718: LD_ADDR_VAR 0 7
66722: PUSH
66723: LD_VAR 0 4
66727: PPUSH
66728: CALL_OW 248
66732: ST_TO_ADDR
// weapon := 0 ;
66733: LD_ADDR_VAR 0 8
66737: PUSH
66738: LD_INT 0
66740: ST_TO_ADDR
// if not nat then
66741: LD_VAR 0 7
66745: NOT
66746: IFFALSE 66750
// continue ;
66748: GO 66715
// for j in list [ nat ] do
66750: LD_ADDR_VAR 0 5
66754: PUSH
66755: LD_VAR 0 10
66759: PUSH
66760: LD_VAR 0 7
66764: ARRAY
66765: PUSH
66766: FOR_IN
66767: IFFALSE 66808
// if GetBWeapon ( i ) = j [ 1 ] then
66769: LD_VAR 0 4
66773: PPUSH
66774: CALL_OW 269
66778: PUSH
66779: LD_VAR 0 5
66783: PUSH
66784: LD_INT 1
66786: ARRAY
66787: EQUAL
66788: IFFALSE 66806
// begin weapon := j [ 2 ] ;
66790: LD_ADDR_VAR 0 8
66794: PUSH
66795: LD_VAR 0 5
66799: PUSH
66800: LD_INT 2
66802: ARRAY
66803: ST_TO_ADDR
// break ;
66804: GO 66808
// end ;
66806: GO 66766
66808: POP
66809: POP
// if not weapon then
66810: LD_VAR 0 8
66814: NOT
66815: IFFALSE 66819
// continue ;
66817: GO 66715
// for k in factories do
66819: LD_ADDR_VAR 0 6
66823: PUSH
66824: LD_VAR 0 2
66828: PUSH
66829: FOR_IN
66830: IFFALSE 66895
// begin weapons := AvailableWeaponList ( k ) ;
66832: LD_ADDR_VAR 0 9
66836: PUSH
66837: LD_VAR 0 6
66841: PPUSH
66842: CALL_OW 478
66846: ST_TO_ADDR
// if not weapons then
66847: LD_VAR 0 9
66851: NOT
66852: IFFALSE 66856
// continue ;
66854: GO 66829
// if weapon in weapons then
66856: LD_VAR 0 8
66860: PUSH
66861: LD_VAR 0 9
66865: IN
66866: IFFALSE 66893
// begin result := [ i , weapon ] ;
66868: LD_ADDR_VAR 0 3
66872: PUSH
66873: LD_VAR 0 4
66877: PUSH
66878: LD_VAR 0 8
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: ST_TO_ADDR
// exit ;
66887: POP
66888: POP
66889: POP
66890: POP
66891: GO 66901
// end ; end ;
66893: GO 66829
66895: POP
66896: POP
// end ;
66897: GO 66715
66899: POP
66900: POP
// end ;
66901: LD_VAR 0 3
66905: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66906: LD_INT 0
66908: PPUSH
// if not side or side > 8 then
66909: LD_VAR 0 3
66913: NOT
66914: PUSH
66915: LD_VAR 0 3
66919: PUSH
66920: LD_INT 8
66922: GREATER
66923: OR
66924: IFFALSE 66928
// exit ;
66926: GO 66987
// if not range then
66928: LD_VAR 0 4
66932: NOT
66933: IFFALSE 66944
// range := - 12 ;
66935: LD_ADDR_VAR 0 4
66939: PUSH
66940: LD_INT 12
66942: NEG
66943: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66944: LD_VAR 0 1
66948: PPUSH
66949: LD_VAR 0 2
66953: PPUSH
66954: LD_VAR 0 3
66958: PPUSH
66959: LD_VAR 0 4
66963: PPUSH
66964: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66968: LD_VAR 0 1
66972: PPUSH
66973: LD_VAR 0 2
66977: PPUSH
66978: LD_VAR 0 3
66982: PPUSH
66983: CALL_OW 331
// end ;
66987: LD_VAR 0 5
66991: RET
// export function Video ( mode ) ; begin
66992: LD_INT 0
66994: PPUSH
// ingame_video = mode ;
66995: LD_ADDR_OWVAR 52
66999: PUSH
67000: LD_VAR 0 1
67004: ST_TO_ADDR
// interface_hidden = mode ;
67005: LD_ADDR_OWVAR 54
67009: PUSH
67010: LD_VAR 0 1
67014: ST_TO_ADDR
// end ;
67015: LD_VAR 0 2
67019: RET
// export function Join ( array , element ) ; begin
67020: LD_INT 0
67022: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67023: LD_ADDR_VAR 0 3
67027: PUSH
67028: LD_VAR 0 1
67032: PPUSH
67033: LD_VAR 0 1
67037: PUSH
67038: LD_INT 1
67040: PLUS
67041: PPUSH
67042: LD_VAR 0 2
67046: PPUSH
67047: CALL_OW 1
67051: ST_TO_ADDR
// end ;
67052: LD_VAR 0 3
67056: RET
// export function JoinUnion ( array , element ) ; begin
67057: LD_INT 0
67059: PPUSH
// result := array union element ;
67060: LD_ADDR_VAR 0 3
67064: PUSH
67065: LD_VAR 0 1
67069: PUSH
67070: LD_VAR 0 2
67074: UNION
67075: ST_TO_ADDR
// end ;
67076: LD_VAR 0 3
67080: RET
// export function GetBehemoths ( side ) ; begin
67081: LD_INT 0
67083: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67084: LD_ADDR_VAR 0 2
67088: PUSH
67089: LD_INT 22
67091: PUSH
67092: LD_VAR 0 1
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 31
67103: PUSH
67104: LD_INT 25
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PPUSH
67115: CALL_OW 69
67119: ST_TO_ADDR
// end ;
67120: LD_VAR 0 2
67124: RET
// export function Shuffle ( array ) ; var i , index ; begin
67125: LD_INT 0
67127: PPUSH
67128: PPUSH
67129: PPUSH
// result := [ ] ;
67130: LD_ADDR_VAR 0 2
67134: PUSH
67135: EMPTY
67136: ST_TO_ADDR
// if not array then
67137: LD_VAR 0 1
67141: NOT
67142: IFFALSE 67146
// exit ;
67144: GO 67245
// Randomize ;
67146: CALL_OW 10
// for i = array downto 1 do
67150: LD_ADDR_VAR 0 3
67154: PUSH
67155: DOUBLE
67156: LD_VAR 0 1
67160: INC
67161: ST_TO_ADDR
67162: LD_INT 1
67164: PUSH
67165: FOR_DOWNTO
67166: IFFALSE 67243
// begin index := rand ( 1 , array ) ;
67168: LD_ADDR_VAR 0 4
67172: PUSH
67173: LD_INT 1
67175: PPUSH
67176: LD_VAR 0 1
67180: PPUSH
67181: CALL_OW 12
67185: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67186: LD_ADDR_VAR 0 2
67190: PUSH
67191: LD_VAR 0 2
67195: PPUSH
67196: LD_VAR 0 2
67200: PUSH
67201: LD_INT 1
67203: PLUS
67204: PPUSH
67205: LD_VAR 0 1
67209: PUSH
67210: LD_VAR 0 4
67214: ARRAY
67215: PPUSH
67216: CALL_OW 2
67220: ST_TO_ADDR
// array := Delete ( array , index ) ;
67221: LD_ADDR_VAR 0 1
67225: PUSH
67226: LD_VAR 0 1
67230: PPUSH
67231: LD_VAR 0 4
67235: PPUSH
67236: CALL_OW 3
67240: ST_TO_ADDR
// end ;
67241: GO 67165
67243: POP
67244: POP
// end ;
67245: LD_VAR 0 2
67249: RET
// export function GetBaseMaterials ( base ) ; begin
67250: LD_INT 0
67252: PPUSH
// result := [ 0 , 0 , 0 ] ;
67253: LD_ADDR_VAR 0 2
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: LD_INT 0
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: LIST
67271: ST_TO_ADDR
// if not base then
67272: LD_VAR 0 1
67276: NOT
67277: IFFALSE 67281
// exit ;
67279: GO 67330
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67281: LD_ADDR_VAR 0 2
67285: PUSH
67286: LD_VAR 0 1
67290: PPUSH
67291: LD_INT 1
67293: PPUSH
67294: CALL_OW 275
67298: PUSH
67299: LD_VAR 0 1
67303: PPUSH
67304: LD_INT 2
67306: PPUSH
67307: CALL_OW 275
67311: PUSH
67312: LD_VAR 0 1
67316: PPUSH
67317: LD_INT 3
67319: PPUSH
67320: CALL_OW 275
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: LIST
67329: ST_TO_ADDR
// end ;
67330: LD_VAR 0 2
67334: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67335: LD_INT 0
67337: PPUSH
67338: PPUSH
// result := array ;
67339: LD_ADDR_VAR 0 3
67343: PUSH
67344: LD_VAR 0 1
67348: ST_TO_ADDR
// if size >= result then
67349: LD_VAR 0 2
67353: PUSH
67354: LD_VAR 0 3
67358: GREATEREQUAL
67359: IFFALSE 67363
// exit ;
67361: GO 67413
// if size then
67363: LD_VAR 0 2
67367: IFFALSE 67413
// for i := array downto size do
67369: LD_ADDR_VAR 0 4
67373: PUSH
67374: DOUBLE
67375: LD_VAR 0 1
67379: INC
67380: ST_TO_ADDR
67381: LD_VAR 0 2
67385: PUSH
67386: FOR_DOWNTO
67387: IFFALSE 67411
// result := Delete ( result , result ) ;
67389: LD_ADDR_VAR 0 3
67393: PUSH
67394: LD_VAR 0 3
67398: PPUSH
67399: LD_VAR 0 3
67403: PPUSH
67404: CALL_OW 3
67408: ST_TO_ADDR
67409: GO 67386
67411: POP
67412: POP
// end ;
67413: LD_VAR 0 3
67417: RET
// export function ComExit ( unit ) ; var tmp ; begin
67418: LD_INT 0
67420: PPUSH
67421: PPUSH
// if not IsInUnit ( unit ) then
67422: LD_VAR 0 1
67426: PPUSH
67427: CALL_OW 310
67431: NOT
67432: IFFALSE 67436
// exit ;
67434: GO 67496
// tmp := IsInUnit ( unit ) ;
67436: LD_ADDR_VAR 0 3
67440: PUSH
67441: LD_VAR 0 1
67445: PPUSH
67446: CALL_OW 310
67450: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67451: LD_VAR 0 3
67455: PPUSH
67456: CALL_OW 247
67460: PUSH
67461: LD_INT 2
67463: EQUAL
67464: IFFALSE 67477
// ComExitVehicle ( unit ) else
67466: LD_VAR 0 1
67470: PPUSH
67471: CALL_OW 121
67475: GO 67486
// ComExitBuilding ( unit ) ;
67477: LD_VAR 0 1
67481: PPUSH
67482: CALL_OW 122
// result := tmp ;
67486: LD_ADDR_VAR 0 2
67490: PUSH
67491: LD_VAR 0 3
67495: ST_TO_ADDR
// end ;
67496: LD_VAR 0 2
67500: RET
// export function ComExitAll ( units ) ; var i ; begin
67501: LD_INT 0
67503: PPUSH
67504: PPUSH
// if not units then
67505: LD_VAR 0 1
67509: NOT
67510: IFFALSE 67514
// exit ;
67512: GO 67540
// for i in units do
67514: LD_ADDR_VAR 0 3
67518: PUSH
67519: LD_VAR 0 1
67523: PUSH
67524: FOR_IN
67525: IFFALSE 67538
// ComExit ( i ) ;
67527: LD_VAR 0 3
67531: PPUSH
67532: CALL 67418 0 1
67536: GO 67524
67538: POP
67539: POP
// end ;
67540: LD_VAR 0 2
67544: RET
// export function ResetHc ; begin
67545: LD_INT 0
67547: PPUSH
// InitHc ;
67548: CALL_OW 19
// hc_importance := 0 ;
67552: LD_ADDR_OWVAR 32
67556: PUSH
67557: LD_INT 0
67559: ST_TO_ADDR
// end ;
67560: LD_VAR 0 1
67564: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67565: LD_INT 0
67567: PPUSH
67568: PPUSH
67569: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67570: LD_ADDR_VAR 0 6
67574: PUSH
67575: LD_VAR 0 1
67579: PUSH
67580: LD_VAR 0 3
67584: PLUS
67585: PUSH
67586: LD_INT 2
67588: DIV
67589: ST_TO_ADDR
// if _x < 0 then
67590: LD_VAR 0 6
67594: PUSH
67595: LD_INT 0
67597: LESS
67598: IFFALSE 67615
// _x := _x * - 1 ;
67600: LD_ADDR_VAR 0 6
67604: PUSH
67605: LD_VAR 0 6
67609: PUSH
67610: LD_INT 1
67612: NEG
67613: MUL
67614: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67615: LD_ADDR_VAR 0 7
67619: PUSH
67620: LD_VAR 0 2
67624: PUSH
67625: LD_VAR 0 4
67629: PLUS
67630: PUSH
67631: LD_INT 2
67633: DIV
67634: ST_TO_ADDR
// if _y < 0 then
67635: LD_VAR 0 7
67639: PUSH
67640: LD_INT 0
67642: LESS
67643: IFFALSE 67660
// _y := _y * - 1 ;
67645: LD_ADDR_VAR 0 7
67649: PUSH
67650: LD_VAR 0 7
67654: PUSH
67655: LD_INT 1
67657: NEG
67658: MUL
67659: ST_TO_ADDR
// result := [ _x , _y ] ;
67660: LD_ADDR_VAR 0 5
67664: PUSH
67665: LD_VAR 0 6
67669: PUSH
67670: LD_VAR 0 7
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: ST_TO_ADDR
// end ;
67679: LD_VAR 0 5
67683: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67684: LD_INT 0
67686: PPUSH
67687: PPUSH
67688: PPUSH
67689: PPUSH
// task := GetTaskList ( unit ) ;
67690: LD_ADDR_VAR 0 7
67694: PUSH
67695: LD_VAR 0 1
67699: PPUSH
67700: CALL_OW 437
67704: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67705: LD_VAR 0 7
67709: NOT
67710: PUSH
67711: LD_VAR 0 1
67715: PPUSH
67716: LD_VAR 0 2
67720: PPUSH
67721: CALL_OW 308
67725: NOT
67726: AND
67727: IFFALSE 67731
// exit ;
67729: GO 67849
// if IsInArea ( unit , area ) then
67731: LD_VAR 0 1
67735: PPUSH
67736: LD_VAR 0 2
67740: PPUSH
67741: CALL_OW 308
67745: IFFALSE 67763
// begin ComMoveToArea ( unit , goAway ) ;
67747: LD_VAR 0 1
67751: PPUSH
67752: LD_VAR 0 3
67756: PPUSH
67757: CALL_OW 113
// exit ;
67761: GO 67849
// end ; if task [ 1 ] [ 1 ] <> M then
67763: LD_VAR 0 7
67767: PUSH
67768: LD_INT 1
67770: ARRAY
67771: PUSH
67772: LD_INT 1
67774: ARRAY
67775: PUSH
67776: LD_STRING M
67778: NONEQUAL
67779: IFFALSE 67783
// exit ;
67781: GO 67849
// x := task [ 1 ] [ 2 ] ;
67783: LD_ADDR_VAR 0 5
67787: PUSH
67788: LD_VAR 0 7
67792: PUSH
67793: LD_INT 1
67795: ARRAY
67796: PUSH
67797: LD_INT 2
67799: ARRAY
67800: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67801: LD_ADDR_VAR 0 6
67805: PUSH
67806: LD_VAR 0 7
67810: PUSH
67811: LD_INT 1
67813: ARRAY
67814: PUSH
67815: LD_INT 3
67817: ARRAY
67818: ST_TO_ADDR
// if InArea ( x , y , area ) then
67819: LD_VAR 0 5
67823: PPUSH
67824: LD_VAR 0 6
67828: PPUSH
67829: LD_VAR 0 2
67833: PPUSH
67834: CALL_OW 309
67838: IFFALSE 67849
// ComStop ( unit ) ;
67840: LD_VAR 0 1
67844: PPUSH
67845: CALL_OW 141
// end ;
67849: LD_VAR 0 4
67853: RET
// export function Abs ( value ) ; begin
67854: LD_INT 0
67856: PPUSH
// result := value ;
67857: LD_ADDR_VAR 0 2
67861: PUSH
67862: LD_VAR 0 1
67866: ST_TO_ADDR
// if value < 0 then
67867: LD_VAR 0 1
67871: PUSH
67872: LD_INT 0
67874: LESS
67875: IFFALSE 67892
// result := value * - 1 ;
67877: LD_ADDR_VAR 0 2
67881: PUSH
67882: LD_VAR 0 1
67886: PUSH
67887: LD_INT 1
67889: NEG
67890: MUL
67891: ST_TO_ADDR
// end ;
67892: LD_VAR 0 2
67896: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67897: LD_INT 0
67899: PPUSH
67900: PPUSH
67901: PPUSH
67902: PPUSH
67903: PPUSH
67904: PPUSH
67905: PPUSH
67906: PPUSH
// if not unit or not building then
67907: LD_VAR 0 1
67911: NOT
67912: PUSH
67913: LD_VAR 0 2
67917: NOT
67918: OR
67919: IFFALSE 67923
// exit ;
67921: GO 68149
// x := GetX ( building ) ;
67923: LD_ADDR_VAR 0 4
67927: PUSH
67928: LD_VAR 0 2
67932: PPUSH
67933: CALL_OW 250
67937: ST_TO_ADDR
// y := GetY ( building ) ;
67938: LD_ADDR_VAR 0 6
67942: PUSH
67943: LD_VAR 0 2
67947: PPUSH
67948: CALL_OW 251
67952: ST_TO_ADDR
// d := GetDir ( building ) ;
67953: LD_ADDR_VAR 0 8
67957: PUSH
67958: LD_VAR 0 2
67962: PPUSH
67963: CALL_OW 254
67967: ST_TO_ADDR
// r := 4 ;
67968: LD_ADDR_VAR 0 9
67972: PUSH
67973: LD_INT 4
67975: ST_TO_ADDR
// for i := 1 to 5 do
67976: LD_ADDR_VAR 0 10
67980: PUSH
67981: DOUBLE
67982: LD_INT 1
67984: DEC
67985: ST_TO_ADDR
67986: LD_INT 5
67988: PUSH
67989: FOR_TO
67990: IFFALSE 68147
// begin _x := ShiftX ( x , d , r + i ) ;
67992: LD_ADDR_VAR 0 5
67996: PUSH
67997: LD_VAR 0 4
68001: PPUSH
68002: LD_VAR 0 8
68006: PPUSH
68007: LD_VAR 0 9
68011: PUSH
68012: LD_VAR 0 10
68016: PLUS
68017: PPUSH
68018: CALL_OW 272
68022: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68023: LD_ADDR_VAR 0 7
68027: PUSH
68028: LD_VAR 0 6
68032: PPUSH
68033: LD_VAR 0 8
68037: PPUSH
68038: LD_VAR 0 9
68042: PUSH
68043: LD_VAR 0 10
68047: PLUS
68048: PPUSH
68049: CALL_OW 273
68053: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68054: LD_VAR 0 5
68058: PPUSH
68059: LD_VAR 0 7
68063: PPUSH
68064: CALL_OW 488
68068: PUSH
68069: LD_VAR 0 5
68073: PPUSH
68074: LD_VAR 0 7
68078: PPUSH
68079: CALL_OW 428
68083: PPUSH
68084: CALL_OW 247
68088: PUSH
68089: LD_INT 3
68091: PUSH
68092: LD_INT 2
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: IN
68099: NOT
68100: AND
68101: IFFALSE 68145
// begin ComMoveXY ( unit , _x , _y ) ;
68103: LD_VAR 0 1
68107: PPUSH
68108: LD_VAR 0 5
68112: PPUSH
68113: LD_VAR 0 7
68117: PPUSH
68118: CALL_OW 111
// result := [ _x , _y ] ;
68122: LD_ADDR_VAR 0 3
68126: PUSH
68127: LD_VAR 0 5
68131: PUSH
68132: LD_VAR 0 7
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: ST_TO_ADDR
// exit ;
68141: POP
68142: POP
68143: GO 68149
// end ; end ;
68145: GO 67989
68147: POP
68148: POP
// end ;
68149: LD_VAR 0 3
68153: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68154: LD_INT 0
68156: PPUSH
68157: PPUSH
68158: PPUSH
// result := 0 ;
68159: LD_ADDR_VAR 0 3
68163: PUSH
68164: LD_INT 0
68166: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68167: LD_VAR 0 1
68171: PUSH
68172: LD_INT 0
68174: LESS
68175: PUSH
68176: LD_VAR 0 1
68180: PUSH
68181: LD_INT 8
68183: GREATER
68184: OR
68185: PUSH
68186: LD_VAR 0 2
68190: PUSH
68191: LD_INT 0
68193: LESS
68194: OR
68195: PUSH
68196: LD_VAR 0 2
68200: PUSH
68201: LD_INT 8
68203: GREATER
68204: OR
68205: IFFALSE 68209
// exit ;
68207: GO 68284
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68209: LD_ADDR_VAR 0 4
68213: PUSH
68214: LD_INT 22
68216: PUSH
68217: LD_VAR 0 2
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PPUSH
68226: CALL_OW 69
68230: PUSH
68231: FOR_IN
68232: IFFALSE 68282
// begin un := UnitShoot ( i ) ;
68234: LD_ADDR_VAR 0 5
68238: PUSH
68239: LD_VAR 0 4
68243: PPUSH
68244: CALL_OW 504
68248: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68249: LD_VAR 0 5
68253: PPUSH
68254: CALL_OW 255
68258: PUSH
68259: LD_VAR 0 1
68263: EQUAL
68264: IFFALSE 68280
// begin result := un ;
68266: LD_ADDR_VAR 0 3
68270: PUSH
68271: LD_VAR 0 5
68275: ST_TO_ADDR
// exit ;
68276: POP
68277: POP
68278: GO 68284
// end ; end ;
68280: GO 68231
68282: POP
68283: POP
// end ;
68284: LD_VAR 0 3
68288: RET
// export function GetCargoBay ( units ) ; begin
68289: LD_INT 0
68291: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68292: LD_ADDR_VAR 0 2
68296: PUSH
68297: LD_VAR 0 1
68301: PPUSH
68302: LD_INT 2
68304: PUSH
68305: LD_INT 34
68307: PUSH
68308: LD_INT 12
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 34
68317: PUSH
68318: LD_INT 51
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 34
68327: PUSH
68328: LD_INT 32
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 34
68337: PUSH
68338: LD_INT 89
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: PPUSH
68352: CALL_OW 72
68356: ST_TO_ADDR
// end ;
68357: LD_VAR 0 2
68361: RET
// export function Negate ( value ) ; begin
68362: LD_INT 0
68364: PPUSH
// result := not value ;
68365: LD_ADDR_VAR 0 2
68369: PUSH
68370: LD_VAR 0 1
68374: NOT
68375: ST_TO_ADDR
// end ;
68376: LD_VAR 0 2
68380: RET
// export function Inc ( value ) ; begin
68381: LD_INT 0
68383: PPUSH
// result := value + 1 ;
68384: LD_ADDR_VAR 0 2
68388: PUSH
68389: LD_VAR 0 1
68393: PUSH
68394: LD_INT 1
68396: PLUS
68397: ST_TO_ADDR
// end ;
68398: LD_VAR 0 2
68402: RET
// export function Dec ( value ) ; begin
68403: LD_INT 0
68405: PPUSH
// result := value - 1 ;
68406: LD_ADDR_VAR 0 2
68410: PUSH
68411: LD_VAR 0 1
68415: PUSH
68416: LD_INT 1
68418: MINUS
68419: ST_TO_ADDR
// end ;
68420: LD_VAR 0 2
68424: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68425: LD_INT 0
68427: PPUSH
68428: PPUSH
68429: PPUSH
68430: PPUSH
68431: PPUSH
68432: PPUSH
68433: PPUSH
68434: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68435: LD_VAR 0 1
68439: PPUSH
68440: LD_VAR 0 2
68444: PPUSH
68445: CALL_OW 488
68449: NOT
68450: PUSH
68451: LD_VAR 0 3
68455: PPUSH
68456: LD_VAR 0 4
68460: PPUSH
68461: CALL_OW 488
68465: NOT
68466: OR
68467: IFFALSE 68480
// begin result := - 1 ;
68469: LD_ADDR_VAR 0 5
68473: PUSH
68474: LD_INT 1
68476: NEG
68477: ST_TO_ADDR
// exit ;
68478: GO 68715
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68480: LD_ADDR_VAR 0 12
68484: PUSH
68485: LD_VAR 0 1
68489: PPUSH
68490: LD_VAR 0 2
68494: PPUSH
68495: LD_VAR 0 3
68499: PPUSH
68500: LD_VAR 0 4
68504: PPUSH
68505: CALL 67565 0 4
68509: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68510: LD_ADDR_VAR 0 11
68514: PUSH
68515: LD_VAR 0 1
68519: PPUSH
68520: LD_VAR 0 2
68524: PPUSH
68525: LD_VAR 0 12
68529: PUSH
68530: LD_INT 1
68532: ARRAY
68533: PPUSH
68534: LD_VAR 0 12
68538: PUSH
68539: LD_INT 2
68541: ARRAY
68542: PPUSH
68543: CALL_OW 298
68547: ST_TO_ADDR
// distance := 9999 ;
68548: LD_ADDR_VAR 0 10
68552: PUSH
68553: LD_INT 9999
68555: ST_TO_ADDR
// for i := 0 to 5 do
68556: LD_ADDR_VAR 0 6
68560: PUSH
68561: DOUBLE
68562: LD_INT 0
68564: DEC
68565: ST_TO_ADDR
68566: LD_INT 5
68568: PUSH
68569: FOR_TO
68570: IFFALSE 68713
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68572: LD_ADDR_VAR 0 7
68576: PUSH
68577: LD_VAR 0 1
68581: PPUSH
68582: LD_VAR 0 6
68586: PPUSH
68587: LD_VAR 0 11
68591: PPUSH
68592: CALL_OW 272
68596: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68597: LD_ADDR_VAR 0 8
68601: PUSH
68602: LD_VAR 0 2
68606: PPUSH
68607: LD_VAR 0 6
68611: PPUSH
68612: LD_VAR 0 11
68616: PPUSH
68617: CALL_OW 273
68621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68622: LD_VAR 0 7
68626: PPUSH
68627: LD_VAR 0 8
68631: PPUSH
68632: CALL_OW 488
68636: NOT
68637: IFFALSE 68641
// continue ;
68639: GO 68569
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68641: LD_ADDR_VAR 0 9
68645: PUSH
68646: LD_VAR 0 12
68650: PUSH
68651: LD_INT 1
68653: ARRAY
68654: PPUSH
68655: LD_VAR 0 12
68659: PUSH
68660: LD_INT 2
68662: ARRAY
68663: PPUSH
68664: LD_VAR 0 7
68668: PPUSH
68669: LD_VAR 0 8
68673: PPUSH
68674: CALL_OW 298
68678: ST_TO_ADDR
// if tmp < distance then
68679: LD_VAR 0 9
68683: PUSH
68684: LD_VAR 0 10
68688: LESS
68689: IFFALSE 68711
// begin result := i ;
68691: LD_ADDR_VAR 0 5
68695: PUSH
68696: LD_VAR 0 6
68700: ST_TO_ADDR
// distance := tmp ;
68701: LD_ADDR_VAR 0 10
68705: PUSH
68706: LD_VAR 0 9
68710: ST_TO_ADDR
// end ; end ;
68711: GO 68569
68713: POP
68714: POP
// end ;
68715: LD_VAR 0 5
68719: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68720: LD_INT 0
68722: PPUSH
68723: PPUSH
// if not driver or not IsInUnit ( driver ) then
68724: LD_VAR 0 1
68728: NOT
68729: PUSH
68730: LD_VAR 0 1
68734: PPUSH
68735: CALL_OW 310
68739: NOT
68740: OR
68741: IFFALSE 68745
// exit ;
68743: GO 68835
// vehicle := IsInUnit ( driver ) ;
68745: LD_ADDR_VAR 0 3
68749: PUSH
68750: LD_VAR 0 1
68754: PPUSH
68755: CALL_OW 310
68759: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68760: LD_VAR 0 1
68764: PPUSH
68765: LD_STRING \
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: LD_INT 0
68773: PUSH
68774: LD_INT 0
68776: PUSH
68777: LD_INT 0
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: LD_INT 0
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: PUSH
68795: LD_STRING E
68797: PUSH
68798: LD_INT 0
68800: PUSH
68801: LD_INT 0
68803: PUSH
68804: LD_VAR 0 3
68808: PUSH
68809: LD_INT 0
68811: PUSH
68812: LD_INT 0
68814: PUSH
68815: LD_INT 0
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PPUSH
68831: CALL_OW 446
// end ;
68835: LD_VAR 0 2
68839: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68840: LD_INT 0
68842: PPUSH
68843: PPUSH
// if not driver or not IsInUnit ( driver ) then
68844: LD_VAR 0 1
68848: NOT
68849: PUSH
68850: LD_VAR 0 1
68854: PPUSH
68855: CALL_OW 310
68859: NOT
68860: OR
68861: IFFALSE 68865
// exit ;
68863: GO 68955
// vehicle := IsInUnit ( driver ) ;
68865: LD_ADDR_VAR 0 3
68869: PUSH
68870: LD_VAR 0 1
68874: PPUSH
68875: CALL_OW 310
68879: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68880: LD_VAR 0 1
68884: PPUSH
68885: LD_STRING \
68887: PUSH
68888: LD_INT 0
68890: PUSH
68891: LD_INT 0
68893: PUSH
68894: LD_INT 0
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: LD_INT 0
68902: PUSH
68903: LD_INT 0
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: PUSH
68915: LD_STRING E
68917: PUSH
68918: LD_INT 0
68920: PUSH
68921: LD_INT 0
68923: PUSH
68924: LD_VAR 0 3
68928: PUSH
68929: LD_INT 0
68931: PUSH
68932: LD_INT 0
68934: PUSH
68935: LD_INT 0
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PPUSH
68951: CALL_OW 447
// end ;
68955: LD_VAR 0 2
68959: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68960: LD_INT 0
68962: PPUSH
68963: PPUSH
68964: PPUSH
// tmp := [ ] ;
68965: LD_ADDR_VAR 0 5
68969: PUSH
68970: EMPTY
68971: ST_TO_ADDR
// for i in units do
68972: LD_ADDR_VAR 0 4
68976: PUSH
68977: LD_VAR 0 1
68981: PUSH
68982: FOR_IN
68983: IFFALSE 69021
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68985: LD_ADDR_VAR 0 5
68989: PUSH
68990: LD_VAR 0 5
68994: PPUSH
68995: LD_VAR 0 5
68999: PUSH
69000: LD_INT 1
69002: PLUS
69003: PPUSH
69004: LD_VAR 0 4
69008: PPUSH
69009: CALL_OW 256
69013: PPUSH
69014: CALL_OW 2
69018: ST_TO_ADDR
69019: GO 68982
69021: POP
69022: POP
// if not tmp then
69023: LD_VAR 0 5
69027: NOT
69028: IFFALSE 69032
// exit ;
69030: GO 69080
// if asc then
69032: LD_VAR 0 2
69036: IFFALSE 69060
// result := SortListByListAsc ( units , tmp ) else
69038: LD_ADDR_VAR 0 3
69042: PUSH
69043: LD_VAR 0 1
69047: PPUSH
69048: LD_VAR 0 5
69052: PPUSH
69053: CALL_OW 76
69057: ST_TO_ADDR
69058: GO 69080
// result := SortListByListDesc ( units , tmp ) ;
69060: LD_ADDR_VAR 0 3
69064: PUSH
69065: LD_VAR 0 1
69069: PPUSH
69070: LD_VAR 0 5
69074: PPUSH
69075: CALL_OW 77
69079: ST_TO_ADDR
// end ;
69080: LD_VAR 0 3
69084: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69085: LD_INT 0
69087: PPUSH
69088: PPUSH
// task := GetTaskList ( mech ) ;
69089: LD_ADDR_VAR 0 4
69093: PUSH
69094: LD_VAR 0 1
69098: PPUSH
69099: CALL_OW 437
69103: ST_TO_ADDR
// if not task then
69104: LD_VAR 0 4
69108: NOT
69109: IFFALSE 69113
// exit ;
69111: GO 69155
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69113: LD_ADDR_VAR 0 3
69117: PUSH
69118: LD_VAR 0 4
69122: PUSH
69123: LD_INT 1
69125: ARRAY
69126: PUSH
69127: LD_INT 1
69129: ARRAY
69130: PUSH
69131: LD_STRING r
69133: EQUAL
69134: PUSH
69135: LD_VAR 0 4
69139: PUSH
69140: LD_INT 1
69142: ARRAY
69143: PUSH
69144: LD_INT 4
69146: ARRAY
69147: PUSH
69148: LD_VAR 0 2
69152: EQUAL
69153: AND
69154: ST_TO_ADDR
// end ;
69155: LD_VAR 0 3
69159: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69160: LD_INT 0
69162: PPUSH
// SetDir ( unit , d ) ;
69163: LD_VAR 0 1
69167: PPUSH
69168: LD_VAR 0 4
69172: PPUSH
69173: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69177: LD_VAR 0 1
69181: PPUSH
69182: LD_VAR 0 2
69186: PPUSH
69187: LD_VAR 0 3
69191: PPUSH
69192: LD_VAR 0 5
69196: PPUSH
69197: CALL_OW 48
// end ;
69201: LD_VAR 0 6
69205: RET
// export function ToNaturalNumber ( number ) ; begin
69206: LD_INT 0
69208: PPUSH
// result := number div 1 ;
69209: LD_ADDR_VAR 0 2
69213: PUSH
69214: LD_VAR 0 1
69218: PUSH
69219: LD_INT 1
69221: DIV
69222: ST_TO_ADDR
// if number < 0 then
69223: LD_VAR 0 1
69227: PUSH
69228: LD_INT 0
69230: LESS
69231: IFFALSE 69241
// result := 0 ;
69233: LD_ADDR_VAR 0 2
69237: PUSH
69238: LD_INT 0
69240: ST_TO_ADDR
// end ;
69241: LD_VAR 0 2
69245: RET
// export function SortByClass ( units , class ) ; var un ; begin
69246: LD_INT 0
69248: PPUSH
69249: PPUSH
// if not units or not class then
69250: LD_VAR 0 1
69254: NOT
69255: PUSH
69256: LD_VAR 0 2
69260: NOT
69261: OR
69262: IFFALSE 69266
// exit ;
69264: GO 69361
// result := [ ] ;
69266: LD_ADDR_VAR 0 3
69270: PUSH
69271: EMPTY
69272: ST_TO_ADDR
// for un in units do
69273: LD_ADDR_VAR 0 4
69277: PUSH
69278: LD_VAR 0 1
69282: PUSH
69283: FOR_IN
69284: IFFALSE 69359
// if GetClass ( un ) = class then
69286: LD_VAR 0 4
69290: PPUSH
69291: CALL_OW 257
69295: PUSH
69296: LD_VAR 0 2
69300: EQUAL
69301: IFFALSE 69328
// result := Insert ( result , 1 , un ) else
69303: LD_ADDR_VAR 0 3
69307: PUSH
69308: LD_VAR 0 3
69312: PPUSH
69313: LD_INT 1
69315: PPUSH
69316: LD_VAR 0 4
69320: PPUSH
69321: CALL_OW 2
69325: ST_TO_ADDR
69326: GO 69357
// result := Replace ( result , result + 1 , un ) ;
69328: LD_ADDR_VAR 0 3
69332: PUSH
69333: LD_VAR 0 3
69337: PPUSH
69338: LD_VAR 0 3
69342: PUSH
69343: LD_INT 1
69345: PLUS
69346: PPUSH
69347: LD_VAR 0 4
69351: PPUSH
69352: CALL_OW 1
69356: ST_TO_ADDR
69357: GO 69283
69359: POP
69360: POP
// end ;
69361: LD_VAR 0 3
69365: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69366: LD_INT 0
69368: PPUSH
69369: PPUSH
69370: PPUSH
69371: PPUSH
69372: PPUSH
69373: PPUSH
69374: PPUSH
// result := [ ] ;
69375: LD_ADDR_VAR 0 4
69379: PUSH
69380: EMPTY
69381: ST_TO_ADDR
// if x - r < 0 then
69382: LD_VAR 0 1
69386: PUSH
69387: LD_VAR 0 3
69391: MINUS
69392: PUSH
69393: LD_INT 0
69395: LESS
69396: IFFALSE 69408
// min_x := 0 else
69398: LD_ADDR_VAR 0 8
69402: PUSH
69403: LD_INT 0
69405: ST_TO_ADDR
69406: GO 69424
// min_x := x - r ;
69408: LD_ADDR_VAR 0 8
69412: PUSH
69413: LD_VAR 0 1
69417: PUSH
69418: LD_VAR 0 3
69422: MINUS
69423: ST_TO_ADDR
// if y - r < 0 then
69424: LD_VAR 0 2
69428: PUSH
69429: LD_VAR 0 3
69433: MINUS
69434: PUSH
69435: LD_INT 0
69437: LESS
69438: IFFALSE 69450
// min_y := 0 else
69440: LD_ADDR_VAR 0 7
69444: PUSH
69445: LD_INT 0
69447: ST_TO_ADDR
69448: GO 69466
// min_y := y - r ;
69450: LD_ADDR_VAR 0 7
69454: PUSH
69455: LD_VAR 0 2
69459: PUSH
69460: LD_VAR 0 3
69464: MINUS
69465: ST_TO_ADDR
// max_x := x + r ;
69466: LD_ADDR_VAR 0 9
69470: PUSH
69471: LD_VAR 0 1
69475: PUSH
69476: LD_VAR 0 3
69480: PLUS
69481: ST_TO_ADDR
// max_y := y + r ;
69482: LD_ADDR_VAR 0 10
69486: PUSH
69487: LD_VAR 0 2
69491: PUSH
69492: LD_VAR 0 3
69496: PLUS
69497: ST_TO_ADDR
// for _x = min_x to max_x do
69498: LD_ADDR_VAR 0 5
69502: PUSH
69503: DOUBLE
69504: LD_VAR 0 8
69508: DEC
69509: ST_TO_ADDR
69510: LD_VAR 0 9
69514: PUSH
69515: FOR_TO
69516: IFFALSE 69617
// for _y = min_y to max_y do
69518: LD_ADDR_VAR 0 6
69522: PUSH
69523: DOUBLE
69524: LD_VAR 0 7
69528: DEC
69529: ST_TO_ADDR
69530: LD_VAR 0 10
69534: PUSH
69535: FOR_TO
69536: IFFALSE 69613
// begin if not ValidHex ( _x , _y ) then
69538: LD_VAR 0 5
69542: PPUSH
69543: LD_VAR 0 6
69547: PPUSH
69548: CALL_OW 488
69552: NOT
69553: IFFALSE 69557
// continue ;
69555: GO 69535
// if GetResourceTypeXY ( _x , _y ) then
69557: LD_VAR 0 5
69561: PPUSH
69562: LD_VAR 0 6
69566: PPUSH
69567: CALL_OW 283
69571: IFFALSE 69611
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69573: LD_ADDR_VAR 0 4
69577: PUSH
69578: LD_VAR 0 4
69582: PPUSH
69583: LD_VAR 0 4
69587: PUSH
69588: LD_INT 1
69590: PLUS
69591: PPUSH
69592: LD_VAR 0 5
69596: PUSH
69597: LD_VAR 0 6
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PPUSH
69606: CALL_OW 1
69610: ST_TO_ADDR
// end ;
69611: GO 69535
69613: POP
69614: POP
69615: GO 69515
69617: POP
69618: POP
// end ;
69619: LD_VAR 0 4
69623: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69624: LD_INT 0
69626: PPUSH
69627: PPUSH
69628: PPUSH
69629: PPUSH
69630: PPUSH
69631: PPUSH
69632: PPUSH
69633: PPUSH
// if not units then
69634: LD_VAR 0 1
69638: NOT
69639: IFFALSE 69643
// exit ;
69641: GO 70167
// result := UnitFilter ( units , [ f_ok ] ) ;
69643: LD_ADDR_VAR 0 3
69647: PUSH
69648: LD_VAR 0 1
69652: PPUSH
69653: LD_INT 50
69655: PUSH
69656: EMPTY
69657: LIST
69658: PPUSH
69659: CALL_OW 72
69663: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69664: LD_ADDR_VAR 0 8
69668: PUSH
69669: LD_VAR 0 1
69673: PUSH
69674: LD_INT 1
69676: ARRAY
69677: PPUSH
69678: CALL_OW 255
69682: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69683: LD_ADDR_VAR 0 10
69687: PUSH
69688: LD_INT 29
69690: PUSH
69691: LD_INT 91
69693: PUSH
69694: LD_INT 49
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: LIST
69701: ST_TO_ADDR
// if not result then
69702: LD_VAR 0 3
69706: NOT
69707: IFFALSE 69711
// exit ;
69709: GO 70167
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69711: LD_ADDR_VAR 0 5
69715: PUSH
69716: LD_INT 81
69718: PUSH
69719: LD_VAR 0 8
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PPUSH
69728: CALL_OW 69
69732: ST_TO_ADDR
// for i in result do
69733: LD_ADDR_VAR 0 4
69737: PUSH
69738: LD_VAR 0 3
69742: PUSH
69743: FOR_IN
69744: IFFALSE 70165
// begin tag := GetTag ( i ) + 1 ;
69746: LD_ADDR_VAR 0 9
69750: PUSH
69751: LD_VAR 0 4
69755: PPUSH
69756: CALL_OW 110
69760: PUSH
69761: LD_INT 1
69763: PLUS
69764: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69765: LD_ADDR_VAR 0 7
69769: PUSH
69770: LD_VAR 0 4
69774: PPUSH
69775: CALL_OW 250
69779: PPUSH
69780: LD_VAR 0 4
69784: PPUSH
69785: CALL_OW 251
69789: PPUSH
69790: LD_INT 6
69792: PPUSH
69793: CALL 69366 0 3
69797: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69798: LD_VAR 0 4
69802: PPUSH
69803: CALL_OW 247
69807: PUSH
69808: LD_INT 2
69810: EQUAL
69811: PUSH
69812: LD_VAR 0 7
69816: AND
69817: PUSH
69818: LD_VAR 0 4
69822: PPUSH
69823: CALL_OW 264
69827: PUSH
69828: LD_VAR 0 10
69832: IN
69833: NOT
69834: AND
69835: IFFALSE 69874
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69837: LD_VAR 0 4
69841: PPUSH
69842: LD_VAR 0 7
69846: PUSH
69847: LD_INT 1
69849: ARRAY
69850: PUSH
69851: LD_INT 1
69853: ARRAY
69854: PPUSH
69855: LD_VAR 0 7
69859: PUSH
69860: LD_INT 1
69862: ARRAY
69863: PUSH
69864: LD_INT 2
69866: ARRAY
69867: PPUSH
69868: CALL_OW 116
69872: GO 70163
// if path > tag then
69874: LD_VAR 0 2
69878: PUSH
69879: LD_VAR 0 9
69883: GREATER
69884: IFFALSE 70092
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69886: LD_ADDR_VAR 0 6
69890: PUSH
69891: LD_VAR 0 5
69895: PPUSH
69896: LD_INT 91
69898: PUSH
69899: LD_VAR 0 4
69903: PUSH
69904: LD_INT 8
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: LIST
69911: PPUSH
69912: CALL_OW 72
69916: ST_TO_ADDR
// if nearEnemy then
69917: LD_VAR 0 6
69921: IFFALSE 69990
// begin if GetWeapon ( i ) = ru_time_lapser then
69923: LD_VAR 0 4
69927: PPUSH
69928: CALL_OW 264
69932: PUSH
69933: LD_INT 49
69935: EQUAL
69936: IFFALSE 69964
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69938: LD_VAR 0 4
69942: PPUSH
69943: LD_VAR 0 6
69947: PPUSH
69948: LD_VAR 0 4
69952: PPUSH
69953: CALL_OW 74
69957: PPUSH
69958: CALL_OW 112
69962: GO 69988
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69964: LD_VAR 0 4
69968: PPUSH
69969: LD_VAR 0 6
69973: PPUSH
69974: LD_VAR 0 4
69978: PPUSH
69979: CALL_OW 74
69983: PPUSH
69984: CALL_OW 115
// end else
69988: GO 70090
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69990: LD_VAR 0 4
69994: PPUSH
69995: LD_VAR 0 2
69999: PUSH
70000: LD_VAR 0 9
70004: ARRAY
70005: PUSH
70006: LD_INT 1
70008: ARRAY
70009: PPUSH
70010: LD_VAR 0 2
70014: PUSH
70015: LD_VAR 0 9
70019: ARRAY
70020: PUSH
70021: LD_INT 2
70023: ARRAY
70024: PPUSH
70025: CALL_OW 297
70029: PUSH
70030: LD_INT 6
70032: GREATER
70033: IFFALSE 70076
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70035: LD_VAR 0 4
70039: PPUSH
70040: LD_VAR 0 2
70044: PUSH
70045: LD_VAR 0 9
70049: ARRAY
70050: PUSH
70051: LD_INT 1
70053: ARRAY
70054: PPUSH
70055: LD_VAR 0 2
70059: PUSH
70060: LD_VAR 0 9
70064: ARRAY
70065: PUSH
70066: LD_INT 2
70068: ARRAY
70069: PPUSH
70070: CALL_OW 114
70074: GO 70090
// SetTag ( i , tag ) ;
70076: LD_VAR 0 4
70080: PPUSH
70081: LD_VAR 0 9
70085: PPUSH
70086: CALL_OW 109
// end else
70090: GO 70163
// if enemy then
70092: LD_VAR 0 5
70096: IFFALSE 70163
// begin if GetWeapon ( i ) = ru_time_lapser then
70098: LD_VAR 0 4
70102: PPUSH
70103: CALL_OW 264
70107: PUSH
70108: LD_INT 49
70110: EQUAL
70111: IFFALSE 70139
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70113: LD_VAR 0 4
70117: PPUSH
70118: LD_VAR 0 5
70122: PPUSH
70123: LD_VAR 0 4
70127: PPUSH
70128: CALL_OW 74
70132: PPUSH
70133: CALL_OW 112
70137: GO 70163
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70139: LD_VAR 0 4
70143: PPUSH
70144: LD_VAR 0 5
70148: PPUSH
70149: LD_VAR 0 4
70153: PPUSH
70154: CALL_OW 74
70158: PPUSH
70159: CALL_OW 115
// end ; end ;
70163: GO 69743
70165: POP
70166: POP
// end ;
70167: LD_VAR 0 3
70171: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70172: LD_INT 0
70174: PPUSH
70175: PPUSH
70176: PPUSH
// if not unit or IsInUnit ( unit ) then
70177: LD_VAR 0 1
70181: NOT
70182: PUSH
70183: LD_VAR 0 1
70187: PPUSH
70188: CALL_OW 310
70192: OR
70193: IFFALSE 70197
// exit ;
70195: GO 70288
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70197: LD_ADDR_VAR 0 4
70201: PUSH
70202: LD_VAR 0 1
70206: PPUSH
70207: CALL_OW 250
70211: PPUSH
70212: LD_VAR 0 2
70216: PPUSH
70217: LD_INT 1
70219: PPUSH
70220: CALL_OW 272
70224: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70225: LD_ADDR_VAR 0 5
70229: PUSH
70230: LD_VAR 0 1
70234: PPUSH
70235: CALL_OW 251
70239: PPUSH
70240: LD_VAR 0 2
70244: PPUSH
70245: LD_INT 1
70247: PPUSH
70248: CALL_OW 273
70252: ST_TO_ADDR
// if ValidHex ( x , y ) then
70253: LD_VAR 0 4
70257: PPUSH
70258: LD_VAR 0 5
70262: PPUSH
70263: CALL_OW 488
70267: IFFALSE 70288
// ComTurnXY ( unit , x , y ) ;
70269: LD_VAR 0 1
70273: PPUSH
70274: LD_VAR 0 4
70278: PPUSH
70279: LD_VAR 0 5
70283: PPUSH
70284: CALL_OW 118
// end ;
70288: LD_VAR 0 3
70292: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70293: LD_INT 0
70295: PPUSH
70296: PPUSH
// result := false ;
70297: LD_ADDR_VAR 0 3
70301: PUSH
70302: LD_INT 0
70304: ST_TO_ADDR
// if not units then
70305: LD_VAR 0 2
70309: NOT
70310: IFFALSE 70314
// exit ;
70312: GO 70359
// for i in units do
70314: LD_ADDR_VAR 0 4
70318: PUSH
70319: LD_VAR 0 2
70323: PUSH
70324: FOR_IN
70325: IFFALSE 70357
// if See ( side , i ) then
70327: LD_VAR 0 1
70331: PPUSH
70332: LD_VAR 0 4
70336: PPUSH
70337: CALL_OW 292
70341: IFFALSE 70355
// begin result := true ;
70343: LD_ADDR_VAR 0 3
70347: PUSH
70348: LD_INT 1
70350: ST_TO_ADDR
// exit ;
70351: POP
70352: POP
70353: GO 70359
// end ;
70355: GO 70324
70357: POP
70358: POP
// end ;
70359: LD_VAR 0 3
70363: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70364: LD_INT 0
70366: PPUSH
70367: PPUSH
70368: PPUSH
70369: PPUSH
// if not unit or not points then
70370: LD_VAR 0 1
70374: NOT
70375: PUSH
70376: LD_VAR 0 2
70380: NOT
70381: OR
70382: IFFALSE 70386
// exit ;
70384: GO 70476
// dist := 99999 ;
70386: LD_ADDR_VAR 0 5
70390: PUSH
70391: LD_INT 99999
70393: ST_TO_ADDR
// for i in points do
70394: LD_ADDR_VAR 0 4
70398: PUSH
70399: LD_VAR 0 2
70403: PUSH
70404: FOR_IN
70405: IFFALSE 70474
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70407: LD_ADDR_VAR 0 6
70411: PUSH
70412: LD_VAR 0 1
70416: PPUSH
70417: LD_VAR 0 4
70421: PUSH
70422: LD_INT 1
70424: ARRAY
70425: PPUSH
70426: LD_VAR 0 4
70430: PUSH
70431: LD_INT 2
70433: ARRAY
70434: PPUSH
70435: CALL_OW 297
70439: ST_TO_ADDR
// if tmpDist < dist then
70440: LD_VAR 0 6
70444: PUSH
70445: LD_VAR 0 5
70449: LESS
70450: IFFALSE 70472
// begin result := i ;
70452: LD_ADDR_VAR 0 3
70456: PUSH
70457: LD_VAR 0 4
70461: ST_TO_ADDR
// dist := tmpDist ;
70462: LD_ADDR_VAR 0 5
70466: PUSH
70467: LD_VAR 0 6
70471: ST_TO_ADDR
// end ; end ;
70472: GO 70404
70474: POP
70475: POP
// end ;
70476: LD_VAR 0 3
70480: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70481: LD_INT 0
70483: PPUSH
// uc_side := side ;
70484: LD_ADDR_OWVAR 20
70488: PUSH
70489: LD_VAR 0 1
70493: ST_TO_ADDR
// uc_nation := 3 ;
70494: LD_ADDR_OWVAR 21
70498: PUSH
70499: LD_INT 3
70501: ST_TO_ADDR
// vc_chassis := 25 ;
70502: LD_ADDR_OWVAR 37
70506: PUSH
70507: LD_INT 25
70509: ST_TO_ADDR
// vc_engine := engine_siberite ;
70510: LD_ADDR_OWVAR 39
70514: PUSH
70515: LD_INT 3
70517: ST_TO_ADDR
// vc_control := control_computer ;
70518: LD_ADDR_OWVAR 38
70522: PUSH
70523: LD_INT 3
70525: ST_TO_ADDR
// vc_weapon := 59 ;
70526: LD_ADDR_OWVAR 40
70530: PUSH
70531: LD_INT 59
70533: ST_TO_ADDR
// result := CreateVehicle ;
70534: LD_ADDR_VAR 0 5
70538: PUSH
70539: CALL_OW 45
70543: ST_TO_ADDR
// SetDir ( result , d ) ;
70544: LD_VAR 0 5
70548: PPUSH
70549: LD_VAR 0 4
70553: PPUSH
70554: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70558: LD_VAR 0 5
70562: PPUSH
70563: LD_VAR 0 2
70567: PPUSH
70568: LD_VAR 0 3
70572: PPUSH
70573: LD_INT 0
70575: PPUSH
70576: CALL_OW 48
// end ;
70580: LD_VAR 0 5
70584: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70585: LD_INT 0
70587: PPUSH
70588: PPUSH
70589: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70590: LD_ADDR_VAR 0 2
70594: PUSH
70595: LD_INT 0
70597: PUSH
70598: LD_INT 0
70600: PUSH
70601: LD_INT 0
70603: PUSH
70604: LD_INT 0
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70613: LD_VAR 0 1
70617: NOT
70618: PUSH
70619: LD_VAR 0 1
70623: PPUSH
70624: CALL_OW 264
70628: PUSH
70629: LD_INT 12
70631: PUSH
70632: LD_INT 51
70634: PUSH
70635: LD_INT 32
70637: PUSH
70638: LD_INT 89
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: IN
70647: NOT
70648: OR
70649: IFFALSE 70653
// exit ;
70651: GO 70751
// for i := 1 to 3 do
70653: LD_ADDR_VAR 0 3
70657: PUSH
70658: DOUBLE
70659: LD_INT 1
70661: DEC
70662: ST_TO_ADDR
70663: LD_INT 3
70665: PUSH
70666: FOR_TO
70667: IFFALSE 70749
// begin tmp := GetCargo ( cargo , i ) ;
70669: LD_ADDR_VAR 0 4
70673: PUSH
70674: LD_VAR 0 1
70678: PPUSH
70679: LD_VAR 0 3
70683: PPUSH
70684: CALL_OW 289
70688: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70689: LD_ADDR_VAR 0 2
70693: PUSH
70694: LD_VAR 0 2
70698: PPUSH
70699: LD_VAR 0 3
70703: PPUSH
70704: LD_VAR 0 4
70708: PPUSH
70709: CALL_OW 1
70713: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70714: LD_ADDR_VAR 0 2
70718: PUSH
70719: LD_VAR 0 2
70723: PPUSH
70724: LD_INT 4
70726: PPUSH
70727: LD_VAR 0 2
70731: PUSH
70732: LD_INT 4
70734: ARRAY
70735: PUSH
70736: LD_VAR 0 4
70740: PLUS
70741: PPUSH
70742: CALL_OW 1
70746: ST_TO_ADDR
// end ;
70747: GO 70666
70749: POP
70750: POP
// end ;
70751: LD_VAR 0 2
70755: RET
// export function Length ( array ) ; begin
70756: LD_INT 0
70758: PPUSH
// result := array + 0 ;
70759: LD_ADDR_VAR 0 2
70763: PUSH
70764: LD_VAR 0 1
70768: PUSH
70769: LD_INT 0
70771: PLUS
70772: ST_TO_ADDR
// end ;
70773: LD_VAR 0 2
70777: RET
// export function PrepareArray ( array ) ; begin
70778: LD_INT 0
70780: PPUSH
// result := array diff 0 ;
70781: LD_ADDR_VAR 0 2
70785: PUSH
70786: LD_VAR 0 1
70790: PUSH
70791: LD_INT 0
70793: DIFF
70794: ST_TO_ADDR
// if not result [ 1 ] then
70795: LD_VAR 0 2
70799: PUSH
70800: LD_INT 1
70802: ARRAY
70803: NOT
70804: IFFALSE 70824
// result := Delete ( result , 1 ) ;
70806: LD_ADDR_VAR 0 2
70810: PUSH
70811: LD_VAR 0 2
70815: PPUSH
70816: LD_INT 1
70818: PPUSH
70819: CALL_OW 3
70823: ST_TO_ADDR
// end ;
70824: LD_VAR 0 2
70828: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70829: LD_INT 0
70831: PPUSH
70832: PPUSH
70833: PPUSH
70834: PPUSH
// sibRocketRange := 25 ;
70835: LD_ADDR_VAR 0 6
70839: PUSH
70840: LD_INT 25
70842: ST_TO_ADDR
// result := false ;
70843: LD_ADDR_VAR 0 4
70847: PUSH
70848: LD_INT 0
70850: ST_TO_ADDR
// for i := 0 to 5 do
70851: LD_ADDR_VAR 0 5
70855: PUSH
70856: DOUBLE
70857: LD_INT 0
70859: DEC
70860: ST_TO_ADDR
70861: LD_INT 5
70863: PUSH
70864: FOR_TO
70865: IFFALSE 70932
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70867: LD_VAR 0 1
70871: PPUSH
70872: LD_VAR 0 5
70876: PPUSH
70877: LD_VAR 0 6
70881: PPUSH
70882: CALL_OW 272
70886: PPUSH
70887: LD_VAR 0 2
70891: PPUSH
70892: LD_VAR 0 5
70896: PPUSH
70897: LD_VAR 0 6
70901: PPUSH
70902: CALL_OW 273
70906: PPUSH
70907: LD_VAR 0 3
70911: PPUSH
70912: CALL_OW 309
70916: IFFALSE 70930
// begin result := true ;
70918: LD_ADDR_VAR 0 4
70922: PUSH
70923: LD_INT 1
70925: ST_TO_ADDR
// exit ;
70926: POP
70927: POP
70928: GO 70934
// end ;
70930: GO 70864
70932: POP
70933: POP
// end ;
70934: LD_VAR 0 4
70938: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70939: LD_INT 0
70941: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70942: LD_VAR 0 1
70946: PPUSH
70947: LD_VAR 0 2
70951: PPUSH
70952: LD_INT 0
70954: PPUSH
70955: LD_INT 0
70957: PPUSH
70958: LD_INT 1
70960: PPUSH
70961: LD_INT 0
70963: PPUSH
70964: CALL_OW 587
// end ; end_of_file
70968: LD_VAR 0 3
70972: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70973: LD_VAR 0 1
70977: PUSH
70978: LD_INT 200
70980: DOUBLE
70981: GREATEREQUAL
70982: IFFALSE 70990
70984: LD_INT 299
70986: DOUBLE
70987: LESSEQUAL
70988: IFTRUE 70992
70990: GO 71024
70992: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70993: LD_VAR 0 1
70997: PPUSH
70998: LD_VAR 0 2
71002: PPUSH
71003: LD_VAR 0 3
71007: PPUSH
71008: LD_VAR 0 4
71012: PPUSH
71013: LD_VAR 0 5
71017: PPUSH
71018: CALL 25639 0 5
71022: GO 71101
71024: LD_INT 300
71026: DOUBLE
71027: GREATEREQUAL
71028: IFFALSE 71036
71030: LD_INT 399
71032: DOUBLE
71033: LESSEQUAL
71034: IFTRUE 71038
71036: GO 71100
71038: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71039: LD_VAR 0 1
71043: PPUSH
71044: LD_VAR 0 2
71048: PPUSH
71049: LD_VAR 0 3
71053: PPUSH
71054: LD_VAR 0 4
71058: PPUSH
71059: LD_VAR 0 5
71063: PPUSH
71064: LD_VAR 0 6
71068: PPUSH
71069: LD_VAR 0 7
71073: PPUSH
71074: LD_VAR 0 8
71078: PPUSH
71079: LD_VAR 0 9
71083: PPUSH
71084: LD_VAR 0 10
71088: PPUSH
71089: LD_VAR 0 11
71093: PPUSH
71094: CALL 21972 0 11
71098: GO 71101
71100: POP
// end ;
71101: PPOPN 11
71103: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71104: LD_VAR 0 1
71108: PPUSH
71109: LD_VAR 0 2
71113: PPUSH
71114: LD_VAR 0 3
71118: PPUSH
71119: LD_VAR 0 4
71123: PPUSH
71124: LD_VAR 0 5
71128: PPUSH
71129: CALL 25375 0 5
// end ; end_of_file
71133: PPOPN 5
71135: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71136: LD_VAR 0 1
71140: PPUSH
71141: LD_VAR 0 2
71145: PPUSH
71146: LD_VAR 0 3
71150: PPUSH
71151: LD_VAR 0 4
71155: PPUSH
71156: LD_VAR 0 5
71160: PPUSH
71161: LD_VAR 0 6
71165: PPUSH
71166: CALL 9624 0 6
// end ;
71170: PPOPN 6
71172: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71173: LD_INT 0
71175: PPUSH
// begin if not units then
71176: LD_VAR 0 1
71180: NOT
71181: IFFALSE 71185
// exit ;
71183: GO 71185
// end ;
71185: PPOPN 7
71187: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71188: CALL 9528 0 0
// end ;
71192: PPOPN 1
71194: END
