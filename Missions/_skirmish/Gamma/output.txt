// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8617 0 0
// PrepareAmerican ;
 100: CALL 5237 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2712: LD_VAR 0 1
2716: PPUSH
2717: CALL_OW 255
2721: PUSH
2722: LD_INT 3
2724: EQUAL
2725: PUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 263
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: AND
2740: IFFALSE 2750
// comp_tested := true ;
2742: LD_ADDR_EXP 22
2746: PUSH
2747: LD_INT 1
2749: ST_TO_ADDR
// end ;
2750: PPOPN 2
2752: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2753: LD_VAR 0 1
2757: PUSH
2758: LD_INT 22
2760: PUSH
2761: LD_INT 1
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: LD_INT 21
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PPUSH
2782: CALL_OW 69
2786: IN
2787: IFFALSE 2865
// if attacked = false and sikorski_ar = false then
2789: LD_EXP 15
2793: PUSH
2794: LD_INT 0
2796: EQUAL
2797: PUSH
2798: LD_EXP 12
2802: PUSH
2803: LD_INT 0
2805: EQUAL
2806: AND
2807: IFFALSE 2865
// begin attacked := true ;
2809: LD_ADDR_EXP 15
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// if IsInUnit ( donald ) then
2817: LD_EXP 13
2821: PPUSH
2822: CALL_OW 310
2826: IFFALSE 2842
// SayRadio ( donald , DGammaF ) else
2828: LD_EXP 13
2832: PPUSH
2833: LD_STRING DGammaF
2835: PPUSH
2836: CALL_OW 94
2840: GO 2865
// if IsInUnit ( van ) then
2842: LD_EXP 14
2846: PPUSH
2847: CALL_OW 310
2851: IFFALSE 2865
// SayRadio ( van , DGammaM ) ;
2853: LD_EXP 14
2857: PPUSH
2858: LD_STRING DGammaM
2860: PPUSH
2861: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2865: LD_VAR 0 1
2869: PUSH
2870: LD_INT 33
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: IN
2885: IFFALSE 2896
// ComUnlink ( un ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 136
// end ;
2896: PPOPN 1
2898: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2899: LD_VAR 0 2
2903: PPUSH
2904: CALL_OW 258
2908: PUSH
2909: LD_INT 1
2911: EQUAL
2912: IFFALSE 2926
// Say ( sci , Dsci3 ) ;
2914: LD_VAR 0 2
2918: PPUSH
2919: LD_STRING Dsci3
2921: PPUSH
2922: CALL_OW 88
// end ;
2926: PPOPN 2
2928: END
// on BuildingComplete ( b ) do var i ;
2929: LD_INT 0
2931: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2932: LD_VAR 0 1
2936: PPUSH
2937: CALL_OW 266
2941: PUSH
2942: LD_INT 0
2944: EQUAL
2945: PUSH
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 255
2955: PUSH
2956: LD_INT 3
2958: EQUAL
2959: AND
2960: PUSH
2961: LD_EXP 6
2965: PUSH
2966: LD_INT 0
2968: EQUAL
2969: AND
2970: IFFALSE 3034
// begin SetBName ( b , kalinin ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: LD_STRING kalinin
2979: PPUSH
2980: CALL_OW 500
// dep_x := GetX ( b ) ;
2984: LD_ADDR_EXP 7
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 250
2998: ST_TO_ADDR
// dep_y := GetY ( b ) ;
2999: LD_ADDR_EXP 8
3003: PUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 251
3013: ST_TO_ADDR
// depot_rdy := true ;
3014: LD_ADDR_EXP 6
3018: PUSH
3019: LD_INT 1
3021: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3022: LD_EXP 2
3026: PPUSH
3027: LD_STRING Dpop3
3029: PPUSH
3030: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3034: LD_VAR 0 1
3038: PPUSH
3039: CALL_OW 266
3043: PUSH
3044: LD_INT 6
3046: EQUAL
3047: PUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 255
3057: PUSH
3058: LD_INT 3
3060: EQUAL
3061: AND
3062: PUSH
3063: LD_EXP 21
3067: PUSH
3068: LD_INT 0
3070: EQUAL
3071: AND
3072: IFFALSE 3167
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3074: LD_INT 22
3076: PUSH
3077: LD_INT 3
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 25
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PPUSH
3098: CALL_OW 69
3102: PUSH
3103: LD_INT 0
3105: GREATER
3106: IFFALSE 3167
// begin event_comp := true ;
3108: LD_ADDR_EXP 21
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3116: LD_INT 22
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 25
3128: PUSH
3129: LD_INT 4
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 26
3138: PUSH
3139: LD_INT 1
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: PUSH
3156: LD_INT 1
3158: ARRAY
3159: PPUSH
3160: LD_STRING Dsci1
3162: PPUSH
3163: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3167: LD_VAR 0 1
3171: PPUSH
3172: CALL_OW 266
3176: PUSH
3177: LD_INT 32
3179: EQUAL
3180: PUSH
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 255
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: AND
3195: IFFALSE 3260
// begin RaiseSailEvent ( 6 ) ;
3197: LD_INT 6
3199: PPUSH
3200: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3204: LD_VAR 0 1
3208: PPUSH
3209: LD_EXP 18
3213: PUSH
3214: LD_INT 4
3216: ARRAY
3217: PPUSH
3218: CALL_OW 208
// for i = 1 to 4 do
3222: LD_ADDR_VAR 0 2
3226: PUSH
3227: DOUBLE
3228: LD_INT 1
3230: DEC
3231: ST_TO_ADDR
3232: LD_INT 4
3234: PUSH
3235: FOR_TO
3236: IFFALSE 3258
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3238: LD_ADDR_EXP 18
3242: PUSH
3243: LD_EXP 18
3247: PPUSH
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 3
3255: ST_TO_ADDR
3256: GO 3235
3258: POP
3259: POP
// end ; end ;
3260: PPOPN 2
3262: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL 22795 0 1
// if un in Patrol then
3272: LD_VAR 0 1
3276: PUSH
3277: LD_EXP 17
3281: IN
3282: IFFALSE 3300
// Patrol := Patrol diff un ;
3284: LD_ADDR_EXP 17
3288: PUSH
3289: LD_EXP 17
3293: PUSH
3294: LD_VAR 0 1
3298: DIFF
3299: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3300: LD_VAR 0 1
3304: PUSH
3305: LD_INT 22
3307: PUSH
3308: LD_INT 1
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 30
3317: PUSH
3318: LD_INT 32
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 69
3333: IN
3334: IFFALSE 3420
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3336: LD_ADDR_EXP 18
3340: PUSH
3341: LD_EXP 18
3345: PUSH
3346: LD_VAR 0 1
3350: PPUSH
3351: CALL_OW 250
3355: ADD
3356: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3357: LD_ADDR_EXP 18
3361: PUSH
3362: LD_EXP 18
3366: PUSH
3367: LD_VAR 0 1
3371: PPUSH
3372: CALL_OW 251
3376: ADD
3377: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3378: LD_ADDR_EXP 18
3382: PUSH
3383: LD_EXP 18
3387: PUSH
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 254
3397: ADD
3398: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3399: LD_ADDR_EXP 18
3403: PUSH
3404: LD_EXP 18
3408: PUSH
3409: LD_VAR 0 1
3413: PPUSH
3414: CALL_OW 269
3418: ADD
3419: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3420: LD_VAR 0 1
3424: PUSH
3425: LD_INT 33
3427: PUSH
3428: LD_INT 2
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 3
3437: PUSH
3438: LD_INT 34
3440: PUSH
3441: LD_INT 13
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PPUSH
3456: CALL_OW 69
3460: IN
3461: IFFALSE 3477
// new_veh := new_veh + 1 ;
3463: LD_ADDR_EXP 19
3467: PUSH
3468: LD_EXP 19
3472: PUSH
3473: LD_INT 1
3475: PLUS
3476: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3477: LD_VAR 0 1
3481: PUSH
3482: LD_INT 34
3484: PUSH
3485: LD_INT 13
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 69
3496: IN
3497: IFFALSE 3518
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3499: LD_INT 26
3501: PPUSH
3502: LD_INT 3
3504: PPUSH
3505: LD_INT 2
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: LD_INT 13
3513: PPUSH
3514: CALL_OW 185
// if un = am_dep then
3518: LD_VAR 0 1
3522: PUSH
3523: LD_INT 25
3525: EQUAL
3526: IFFALSE 3694
// begin SayRadio ( Platonov , DPlat ) ;
3528: LD_EXP 4
3532: PPUSH
3533: LD_STRING DPlat
3535: PPUSH
3536: CALL_OW 94
// if timer <= 30 30$00 then
3540: LD_EXP 24
3544: PUSH
3545: LD_INT 63000
3547: LESSEQUAL
3548: IFFALSE 3562
// AddMedal ( gamma_med3 , 1 ) else
3550: LD_STRING gamma_med3
3552: PPUSH
3553: LD_INT 1
3555: PPUSH
3556: CALL_OW 101
3560: GO 3612
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3562: LD_EXP 24
3566: PUSH
3567: LD_INT 105000
3569: PUSH
3570: LD_INT 88200
3572: PUSH
3573: LD_INT 73500
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_EXP 1
3585: ARRAY
3586: LESSEQUAL
3587: IFFALSE 3601
// AddMedal ( gamma_med3 , 2 ) else
3589: LD_STRING gamma_med3
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 101
3599: GO 3612
// AddMedal ( gamma_med3 , - 1 ) ;
3601: LD_STRING gamma_med3
3603: PPUSH
3604: LD_INT 1
3606: NEG
3607: PPUSH
3608: CALL_OW 101
// if not comp_tested then
3612: LD_EXP 22
3616: NOT
3617: IFFALSE 3632
// AddMedal ( gamma_med2 , - 1 ) else
3619: LD_STRING gamma_med2
3621: PPUSH
3622: LD_INT 1
3624: NEG
3625: PPUSH
3626: CALL_OW 101
3630: GO 3642
// AddMedal ( gamma_med2 , 1 ) ;
3632: LD_STRING gamma_med2
3634: PPUSH
3635: LD_INT 1
3637: PPUSH
3638: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3642: LD_EXP 9
3646: PPUSH
3647: CALL_OW 301
3651: PUSH
3652: LD_EXP 23
3656: NOT
3657: AND
3658: IFFALSE 3672
// AddMedal ( gamma_med1 , 1 ) else
3660: LD_STRING gamma_med1
3662: PPUSH
3663: LD_INT 1
3665: PPUSH
3666: CALL_OW 101
3670: GO 3683
// AddMedal ( gamma_med1 , - 1 ) ;
3672: LD_STRING gamma_med1
3674: PPUSH
3675: LD_INT 1
3677: NEG
3678: PPUSH
3679: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3683: LD_STRING GAMMA_MEDALS
3685: PPUSH
3686: CALL_OW 102
// YouWin ;
3690: CALL_OW 103
// end ; if un = commander then
3694: LD_VAR 0 1
3698: PUSH
3699: LD_EXP 3
3703: EQUAL
3704: IFFALSE 3713
// YouLost ( comml ) ;
3706: LD_STRING comml
3708: PPUSH
3709: CALL_OW 104
// if un = sikorski then
3713: LD_VAR 0 1
3717: PUSH
3718: LD_EXP 9
3722: EQUAL
3723: IFFALSE 3735
// AddMedal ( gamma_med1 , 1 ) ;
3725: LD_STRING gamma_med1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: CALL_OW 101
// end ;
3735: PPOPN 1
3737: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
// begin if event = 1 then
3749: LD_VAR 0 1
3753: PUSH
3754: LD_INT 1
3756: EQUAL
3757: IFFALSE 4054
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3759: LD_ADDR_VAR 0 4
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 1
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 21
3776: PUSH
3777: LD_INT 3
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 3
3786: PUSH
3787: LD_INT 24
3789: PUSH
3790: LD_INT 1000
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: PPUSH
3806: CALL_OW 69
3810: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3811: LD_ADDR_VAR 0 8
3815: PUSH
3816: LD_INT 22
3818: PUSH
3819: LD_INT 1
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 25
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 24
3838: PUSH
3839: LD_INT 1000
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: PPUSH
3854: CALL_OW 69
3858: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3859: LD_ADDR_VAR 0 9
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 1
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 13
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 69
3892: ST_TO_ADDR
// if engs > 0 then
3893: LD_VAR 0 8
3897: PUSH
3898: LD_INT 0
3900: GREATER
3901: IFFALSE 4006
// for i = 1 to engs do
3903: LD_ADDR_VAR 0 2
3907: PUSH
3908: DOUBLE
3909: LD_INT 1
3911: DEC
3912: ST_TO_ADDR
3913: LD_VAR 0 8
3917: PUSH
3918: FOR_TO
3919: IFFALSE 4004
// begin if IsInUnit ( engs [ i ] ) then
3921: LD_VAR 0 8
3925: PUSH
3926: LD_VAR 0 2
3930: ARRAY
3931: PPUSH
3932: CALL_OW 310
3936: IFFALSE 3953
// ComExitBuilding ( engs [ i ] ) ;
3938: LD_VAR 0 8
3942: PUSH
3943: LD_VAR 0 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3953: LD_INT 7
3955: PPUSH
3956: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3960: LD_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: ARRAY
3970: PPUSH
3971: CALL_OW 314
3975: NOT
3976: IFFALSE 4002
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3978: LD_VAR 0 8
3982: PUSH
3983: LD_VAR 0 2
3987: ARRAY
3988: PPUSH
3989: LD_VAR 0 4
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: CALL_OW 130
// end ;
4002: GO 3918
4004: POP
4005: POP
// if crane > 0 then
4006: LD_VAR 0 9
4010: PUSH
4011: LD_INT 0
4013: GREATER
4014: IFFALSE 4054
// if not HasTask ( crane [ 1 ] ) then
4016: LD_VAR 0 9
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: CALL_OW 314
4029: NOT
4030: IFFALSE 4054
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4032: LD_VAR 0 9
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: LD_VAR 0 4
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: PPUSH
4050: CALL_OW 130
// end ; if event = 2 then
4054: LD_VAR 0 1
4058: PUSH
4059: LD_INT 2
4061: EQUAL
4062: IFFALSE 4184
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4064: LD_ADDR_VAR 0 8
4068: PUSH
4069: LD_INT 22
4071: PUSH
4072: LD_INT 1
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 2
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 69
4097: ST_TO_ADDR
// if engs > 0 then
4098: LD_VAR 0 8
4102: PUSH
4103: LD_INT 0
4105: GREATER
4106: IFFALSE 4184
// for i = 1 to engs do
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: DOUBLE
4114: LD_INT 1
4116: DEC
4117: ST_TO_ADDR
4118: LD_VAR 0 8
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4182
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4126: LD_VAR 0 8
4130: PUSH
4131: LD_VAR 0 2
4135: ARRAY
4136: PPUSH
4137: CALL_OW 314
4141: NOT
4142: PUSH
4143: LD_VAR 0 8
4147: PUSH
4148: LD_VAR 0 2
4152: ARRAY
4153: PPUSH
4154: CALL_OW 310
4158: NOT
4159: AND
4160: IFFALSE 4180
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4162: LD_VAR 0 8
4166: PUSH
4167: LD_VAR 0 2
4171: ARRAY
4172: PPUSH
4173: LD_INT 25
4175: PPUSH
4176: CALL_OW 120
4180: GO 4123
4182: POP
4183: POP
// end ; if event = 3 then
4184: LD_VAR 0 1
4188: PUSH
4189: LD_INT 3
4191: EQUAL
4192: IFFALSE 4556
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4194: LD_ADDR_VAR 0 4
4198: PUSH
4199: LD_INT 22
4201: PUSH
4202: LD_INT 1
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 21
4211: PUSH
4212: LD_INT 1
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 3
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 4
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PUSH
4236: LD_INT 3
4238: PUSH
4239: LD_INT 24
4241: PUSH
4242: LD_INT 800
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: PPUSH
4262: CALL_OW 69
4266: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4267: LD_ADDR_VAR 0 5
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 25
4284: PUSH
4285: LD_INT 4
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 69
4300: ST_TO_ADDR
// if filter > 0 then
4301: LD_VAR 0 4
4305: PUSH
4306: LD_INT 0
4308: GREATER
4309: IFFALSE 4498
// begin for i = 1 to doc do
4311: LD_ADDR_VAR 0 2
4315: PUSH
4316: DOUBLE
4317: LD_INT 1
4319: DEC
4320: ST_TO_ADDR
4321: LD_VAR 0 5
4325: PUSH
4326: FOR_TO
4327: IFFALSE 4427
// begin if IsInUnit ( doc [ i ] ) then
4329: LD_VAR 0 5
4333: PUSH
4334: LD_VAR 0 2
4338: ARRAY
4339: PPUSH
4340: CALL_OW 310
4344: IFFALSE 4361
// ComExitBuilding ( doc [ i ] ) ;
4346: LD_VAR 0 5
4350: PUSH
4351: LD_VAR 0 2
4355: ARRAY
4356: PPUSH
4357: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4361: LD_VAR 0 4
4365: PUSH
4366: LD_INT 1
4368: ARRAY
4369: PPUSH
4370: LD_INT 46
4372: PPUSH
4373: CALL_OW 296
4377: PUSH
4378: LD_INT 10
4380: LESS
4381: PUSH
4382: LD_VAR 0 5
4386: PUSH
4387: LD_VAR 0 2
4391: ARRAY
4392: PPUSH
4393: CALL_OW 314
4397: NOT
4398: AND
4399: IFFALSE 4425
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4401: LD_VAR 0 5
4405: PUSH
4406: LD_VAR 0 2
4410: ARRAY
4411: PPUSH
4412: LD_VAR 0 4
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PPUSH
4421: CALL_OW 128
// end ;
4425: GO 4326
4427: POP
4428: POP
// for i = 1 to filter do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_VAR 0 4
4443: PUSH
4444: FOR_TO
4445: IFFALSE 4494
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4447: LD_VAR 0 4
4451: PUSH
4452: LD_VAR 0 2
4456: ARRAY
4457: PPUSH
4458: LD_INT 46
4460: PPUSH
4461: CALL_OW 296
4465: PUSH
4466: LD_INT 10
4468: GREATER
4469: IFFALSE 4492
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4471: LD_VAR 0 4
4475: PUSH
4476: LD_VAR 0 2
4480: ARRAY
4481: PPUSH
4482: LD_INT 47
4484: PPUSH
4485: LD_INT 12
4487: PPUSH
4488: CALL_OW 111
4492: GO 4444
4494: POP
4495: POP
// end else
4496: GO 4556
// for i = 1 to doc do
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: DOUBLE
4504: LD_INT 1
4506: DEC
4507: ST_TO_ADDR
4508: LD_VAR 0 5
4512: PUSH
4513: FOR_TO
4514: IFFALSE 4554
// if not IsInUnit ( doc [ i ] ) then
4516: LD_VAR 0 5
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: PPUSH
4527: CALL_OW 310
4531: NOT
4532: IFFALSE 4552
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4534: LD_VAR 0 5
4538: PUSH
4539: LD_VAR 0 2
4543: ARRAY
4544: PPUSH
4545: LD_INT 46
4547: PPUSH
4548: CALL_OW 120
4552: GO 4513
4554: POP
4555: POP
// end ; if event = 4 then
4556: LD_VAR 0 1
4560: PUSH
4561: LD_INT 4
4563: EQUAL
4564: IFFALSE 4815
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4566: LD_ADDR_VAR 0 6
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 5
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: ST_TO_ADDR
// for i = 1 to bac do
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: DOUBLE
4606: LD_INT 1
4608: DEC
4609: ST_TO_ADDR
4610: LD_VAR 0 6
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4657
// if UnitsInside ( bac [ i ] ) < 6 then
4618: LD_VAR 0 6
4622: PUSH
4623: LD_VAR 0 2
4627: ARRAY
4628: PPUSH
4629: CALL_OW 313
4633: PUSH
4634: LD_INT 6
4636: LESS
4637: IFFALSE 4655
// place := bac [ i ] ;
4639: LD_ADDR_VAR 0 7
4643: PUSH
4644: LD_VAR 0 6
4648: PUSH
4649: LD_VAR 0 2
4653: ARRAY
4654: ST_TO_ADDR
4655: GO 4615
4657: POP
4658: POP
// if place then
4659: LD_VAR 0 7
4663: IFFALSE 4815
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4665: LD_ADDR_VAR 0 4
4669: PUSH
4670: LD_INT 22
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 25
4695: PUSH
4696: LD_INT 5
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 24
4710: PUSH
4711: LD_INT 1000
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PUSH
4723: EMPTY
4724: LIST
4725: PPUSH
4726: CALL_OW 69
4730: PUSH
4731: LD_EXP 17
4735: DIFF
4736: ST_TO_ADDR
// for i = 1 to filter do
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: DOUBLE
4743: LD_INT 1
4745: DEC
4746: ST_TO_ADDR
4747: LD_VAR 0 4
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4813
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4755: LD_VAR 0 4
4759: PUSH
4760: LD_VAR 0 2
4764: ARRAY
4765: PPUSH
4766: CALL_OW 310
4770: NOT
4771: PUSH
4772: LD_VAR 0 4
4776: PUSH
4777: LD_VAR 0 2
4781: ARRAY
4782: PPUSH
4783: CALL_OW 314
4787: NOT
4788: AND
4789: IFFALSE 4811
// ComEnterUnit ( filter [ i ] , place ) ;
4791: LD_VAR 0 4
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_VAR 0 7
4806: PPUSH
4807: CALL_OW 120
4811: GO 4752
4813: POP
4814: POP
// end ; end ; if event = 5 then
4815: LD_VAR 0 1
4819: PUSH
4820: LD_INT 5
4822: EQUAL
4823: IFFALSE 4977
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4825: LD_INT 12
4827: PPUSH
4828: LD_INT 81
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 70
4842: PUSH
4843: LD_INT 0
4845: EQUAL
4846: IFFALSE 4977
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4848: LD_ADDR_VAR 0 8
4852: PUSH
4853: LD_INT 22
4855: PUSH
4856: LD_INT 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 25
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 69
4881: ST_TO_ADDR
// if engs > 0 then
4882: LD_VAR 0 8
4886: PUSH
4887: LD_INT 0
4889: GREATER
4890: IFFALSE 4977
// for i = 1 to engs do
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: DOUBLE
4898: LD_INT 1
4900: DEC
4901: ST_TO_ADDR
4902: LD_VAR 0 8
4906: PUSH
4907: FOR_TO
4908: IFFALSE 4975
// if not HasTask ( engs [ i ] ) then
4910: LD_VAR 0 8
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: CALL_OW 314
4925: NOT
4926: IFFALSE 4973
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4928: LD_VAR 0 8
4932: PUSH
4933: LD_VAR 0 2
4937: ARRAY
4938: PPUSH
4939: LD_INT 32
4941: PPUSH
4942: LD_EXP 18
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: LD_EXP 18
4955: PUSH
4956: LD_INT 2
4958: ARRAY
4959: PPUSH
4960: LD_EXP 18
4964: PUSH
4965: LD_INT 3
4967: ARRAY
4968: PPUSH
4969: CALL_OW 145
4973: GO 4907
4975: POP
4976: POP
// end ; end ; if event = 6 then
4977: LD_VAR 0 1
4981: PUSH
4982: LD_INT 6
4984: EQUAL
4985: IFFALSE 5169
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4987: LD_ADDR_VAR 0 6
4991: PUSH
4992: LD_INT 22
4994: PUSH
4995: LD_INT 1
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PPUSH
5016: CALL_OW 69
5020: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5021: LD_VAR 0 6
5025: PUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 30
5038: PUSH
5039: LD_INT 32
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 58
5048: PUSH
5049: EMPTY
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: PPUSH
5060: CALL_OW 69
5064: PUSH
5065: LD_INT 0
5067: GREATER
5068: AND
5069: IFFALSE 5169
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5071: LD_ADDR_VAR 0 10
5075: PUSH
5076: LD_INT 22
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 30
5088: PUSH
5089: LD_INT 32
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 58
5098: PUSH
5099: EMPTY
5100: LIST
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: PUSH
5115: LD_INT 1
5117: ARRAY
5118: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: LD_VAR 0 6
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: PPUSH
5133: CALL_OW 313
5137: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5151: LD_VAR 0 3
5155: PUSH
5156: LD_INT 1
5158: ARRAY
5159: PPUSH
5160: LD_VAR 0 10
5164: PPUSH
5165: CALL_OW 180
// end ; end ; end ;
5169: PPOPN 10
5171: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_INT 1
5179: EQUAL
5180: PUSH
5181: LD_VAR 0 2
5185: PUSH
5186: LD_INT 3
5188: EQUAL
5189: AND
5190: IFFALSE 5200
// contact_am := true ;
5192: LD_ADDR_EXP 16
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// end ;
5200: PPOPN 2
5202: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: LD_VAR 0 3
5217: PPUSH
5218: CALL 22893 0 3
// end ;
5222: PPOPN 3
5224: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL 22901 0 1
// end ; end_of_file
5234: PPOPN 1
5236: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
5241: PPUSH
5242: PPUSH
5243: PPUSH
5244: PPUSH
5245: PPUSH
5246: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5247: LD_ADDR_VAR 0 5
5251: PUSH
5252: LD_INT 5
5254: PUSH
5255: LD_INT 6
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: LD_EXP 1
5270: ARRAY
5271: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5272: LD_ADDR_VAR 0 6
5276: PUSH
5277: LD_INT 4
5279: PUSH
5280: LD_INT 4
5282: PUSH
5283: LD_INT 4
5285: PUSH
5286: LD_INT 5
5288: PUSH
5289: LD_INT 5
5291: PUSH
5292: LD_INT 5
5294: PUSH
5295: LD_INT 6
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// SForce := [ ] ;
5307: LD_ADDR_EXP 11
5311: PUSH
5312: EMPTY
5313: ST_TO_ADDR
// Sikorski_Ar := false ;
5314: LD_ADDR_EXP 12
5318: PUSH
5319: LD_INT 0
5321: ST_TO_ADDR
// attacked := false ;
5322: LD_ADDR_EXP 15
5326: PUSH
5327: LD_INT 0
5329: ST_TO_ADDR
// contact_am := false ;
5330: LD_ADDR_EXP 16
5334: PUSH
5335: LD_INT 0
5337: ST_TO_ADDR
// patrol := [ ] ;
5338: LD_ADDR_EXP 17
5342: PUSH
5343: EMPTY
5344: ST_TO_ADDR
// gamma_towers := [ ] ;
5345: LD_ADDR_EXP 18
5349: PUSH
5350: EMPTY
5351: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5352: LD_INT 25
5354: PPUSH
5355: LD_STRING gamma
5357: PPUSH
5358: CALL_OW 500
// uc_side := 1 ;
5362: LD_ADDR_OWVAR 20
5366: PUSH
5367: LD_INT 1
5369: ST_TO_ADDR
// uc_nation := 1 ;
5370: LD_ADDR_OWVAR 21
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// hc_importance := 0 ;
5378: LD_ADDR_OWVAR 32
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5386: LD_ADDR_OWVAR 26
5390: PUSH
5391: LD_STRING Jeremy Sikorski
5393: ST_TO_ADDR
// hc_gallery := us ;
5394: LD_ADDR_OWVAR 33
5398: PUSH
5399: LD_STRING us
5401: ST_TO_ADDR
// hc_face_number := 19 ;
5402: LD_ADDR_OWVAR 34
5406: PUSH
5407: LD_INT 19
5409: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5410: LD_ADDR_OWVAR 31
5414: PUSH
5415: LD_VAR 0 5
5419: PPUSH
5420: LD_VAR 0 5
5424: PUSH
5425: LD_INT 2
5427: PLUS
5428: PPUSH
5429: CALL_OW 12
5433: PUSH
5434: LD_INT 4
5436: PUSH
5437: LD_INT 6
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: ST_TO_ADDR
// hc_sex := sex_male ;
5449: LD_ADDR_OWVAR 27
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// hc_class := 1 ;
5457: LD_ADDR_OWVAR 28
5461: PUSH
5462: LD_INT 1
5464: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5465: LD_ADDR_OWVAR 29
5469: PUSH
5470: LD_INT 10
5472: PUSH
5473: LD_INT 11
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: ST_TO_ADDR
// sikorski := CreateHuman ;
5480: LD_ADDR_EXP 9
5484: PUSH
5485: CALL_OW 44
5489: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5490: LD_ADDR_OWVAR 26
5494: PUSH
5495: LD_STRING Lucy Donaldson
5497: ST_TO_ADDR
// hc_gallery := us ;
5498: LD_ADDR_OWVAR 33
5502: PUSH
5503: LD_STRING us
5505: ST_TO_ADDR
// hc_face_number := 2 ;
5506: LD_ADDR_OWVAR 34
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5514: LD_ADDR_OWVAR 31
5518: PUSH
5519: LD_VAR 0 5
5523: PPUSH
5524: LD_VAR 0 5
5528: PUSH
5529: LD_INT 2
5531: PLUS
5532: PPUSH
5533: CALL_OW 12
5537: PUSH
5538: LD_INT 6
5540: PUSH
5541: LD_INT 4
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: ST_TO_ADDR
// hc_sex := sex_female ;
5553: LD_ADDR_OWVAR 27
5557: PUSH
5558: LD_INT 2
5560: ST_TO_ADDR
// hc_class := 1 ;
5561: LD_ADDR_OWVAR 28
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// donald := CreateHuman ;
5569: LD_ADDR_EXP 13
5573: PUSH
5574: CALL_OW 44
5578: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5579: LD_ADDR_OWVAR 26
5583: PUSH
5584: LD_STRING Peter Van Houten
5586: ST_TO_ADDR
// hc_gallery := us ;
5587: LD_ADDR_OWVAR 33
5591: PUSH
5592: LD_STRING us
5594: ST_TO_ADDR
// hc_face_number := 16 ;
5595: LD_ADDR_OWVAR 34
5599: PUSH
5600: LD_INT 16
5602: ST_TO_ADDR
// hc_sex := sex_male ;
5603: LD_ADDR_OWVAR 27
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// van := CreateHuman ;
5611: LD_ADDR_EXP 14
5615: PUSH
5616: CALL_OW 44
5620: ST_TO_ADDR
// hc_importance := 0 ;
5621: LD_ADDR_OWVAR 32
5625: PUSH
5626: LD_INT 0
5628: ST_TO_ADDR
// case dif of 1 :
5629: LD_EXP 1
5633: PUSH
5634: LD_INT 1
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5642
5640: GO 5653
5642: POP
// lw = 1 ; 2 :
5643: LD_ADDR_VAR 0 8
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
5651: GO 5700
5653: LD_INT 2
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5661
5659: GO 5680
5661: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5662: LD_ADDR_VAR 0 8
5666: PUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: CALL_OW 12
5677: ST_TO_ADDR
5678: GO 5700
5680: LD_INT 3
5682: DOUBLE
5683: EQUAL
5684: IFTRUE 5688
5686: GO 5699
5688: POP
// lw = 2 ; end ;
5689: LD_ADDR_VAR 0 8
5693: PUSH
5694: LD_INT 2
5696: ST_TO_ADDR
5697: GO 5700
5699: POP
// case lw of 1 :
5700: LD_VAR 0 8
5704: PUSH
5705: LD_INT 1
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5728
5713: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5714: LD_EXP 13
5718: PPUSH
5719: LD_INT 25
5721: PPUSH
5722: CALL_OW 52
5726: GO 5752
5728: LD_INT 2
5730: DOUBLE
5731: EQUAL
5732: IFTRUE 5736
5734: GO 5751
5736: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5737: LD_EXP 14
5741: PPUSH
5742: LD_INT 25
5744: PPUSH
5745: CALL_OW 52
5749: GO 5752
5751: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5752: LD_ADDR_VAR 0 2
5756: PUSH
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 30
5769: PUSH
5770: LD_INT 32
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: PUSH
5786: FOR_IN
5787: IFFALSE 5841
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5789: LD_INT 1
5791: PPUSH
5792: LD_VAR 0 5
5796: PPUSH
5797: CALL 734 0 2
5801: PPUSH
5802: LD_VAR 0 2
5806: PPUSH
5807: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5811: LD_VAR 0 2
5815: PPUSH
5816: LD_VAR 0 6
5820: PUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 12
5833: ARRAY
5834: PPUSH
5835: CALL_OW 431
// end ;
5839: GO 5786
5841: POP
5842: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5843: LD_ADDR_VAR 0 7
5847: PUSH
5848: LD_INT 22
5850: PUSH
5851: LD_INT 1
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 2
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 1
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 5
5873: PUSH
5874: EMPTY
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 69
5890: ST_TO_ADDR
// for i = 1 to sol do
5891: LD_ADDR_VAR 0 2
5895: PUSH
5896: DOUBLE
5897: LD_INT 1
5899: DEC
5900: ST_TO_ADDR
5901: LD_VAR 0 7
5905: PUSH
5906: FOR_TO
5907: IFFALSE 5929
// SetTag ( sol [ i ] , 1 ) ;
5909: LD_VAR 0 7
5913: PUSH
5914: LD_VAR 0 2
5918: ARRAY
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: CALL_OW 109
5927: GO 5906
5929: POP
5930: POP
// for i = 1 to 3 do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: DOUBLE
5937: LD_INT 1
5939: DEC
5940: ST_TO_ADDR
5941: LD_INT 3
5943: PUSH
5944: FOR_TO
5945: IFFALSE 5969
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5947: LD_INT 3
5949: PPUSH
5950: LD_VAR 0 5
5954: PPUSH
5955: CALL 734 0 2
5959: PPUSH
5960: LD_INT 56
5962: PPUSH
5963: CALL_OW 52
5967: GO 5944
5969: POP
5970: POP
// for i = 1 to 6 do
5971: LD_ADDR_VAR 0 2
5975: PUSH
5976: DOUBLE
5977: LD_INT 1
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 6
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6009
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
5987: LD_INT 3
5989: PPUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: CALL 734 0 2
5999: PPUSH
6000: LD_INT 26
6002: PPUSH
6003: CALL_OW 52
6007: GO 5984
6009: POP
6010: POP
// for i = 1 to 5 do
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: DOUBLE
6017: LD_INT 1
6019: DEC
6020: ST_TO_ADDR
6021: LD_INT 5
6023: PUSH
6024: FOR_TO
6025: IFFALSE 6052
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_VAR 0 5
6034: PPUSH
6035: CALL 734 0 2
6039: PPUSH
6040: LD_INT 7
6042: PPUSH
6043: LD_INT 0
6045: PPUSH
6046: CALL_OW 49
6050: GO 6024
6052: POP
6053: POP
// for i = 1 to 3 do
6054: LD_ADDR_VAR 0 2
6058: PUSH
6059: DOUBLE
6060: LD_INT 1
6062: DEC
6063: ST_TO_ADDR
6064: LD_INT 3
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6092
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6070: LD_INT 4
6072: PPUSH
6073: LD_VAR 0 5
6077: PPUSH
6078: CALL 734 0 2
6082: PPUSH
6083: LD_INT 46
6085: PPUSH
6086: CALL_OW 52
6090: GO 6067
6092: POP
6093: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 30
6111: PUSH
6112: LD_INT 5
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PPUSH
6123: CALL_OW 69
6127: PUSH
6128: FOR_IN
6129: IFFALSE 6243
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6131: LD_INT 5
6133: PPUSH
6134: LD_VAR 0 5
6138: PPUSH
6139: CALL 734 0 2
6143: PPUSH
6144: LD_VAR 0 2
6148: PPUSH
6149: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6153: LD_INT 5
6155: PPUSH
6156: LD_VAR 0 5
6160: PPUSH
6161: CALL 734 0 2
6165: PPUSH
6166: LD_VAR 0 2
6170: PPUSH
6171: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6175: LD_INT 1
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: CALL 734 0 2
6187: PPUSH
6188: LD_VAR 0 2
6192: PPUSH
6193: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6197: LD_INT 1
6199: PPUSH
6200: LD_VAR 0 5
6204: PPUSH
6205: CALL 734 0 2
6209: PPUSH
6210: LD_VAR 0 2
6214: PPUSH
6215: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6219: LD_INT 1
6221: PPUSH
6222: LD_VAR 0 5
6226: PPUSH
6227: CALL 734 0 2
6231: PPUSH
6232: LD_VAR 0 2
6236: PPUSH
6237: CALL_OW 52
// end ;
6241: GO 6128
6243: POP
6244: POP
// if dif > 1 then
6245: LD_EXP 1
6249: PUSH
6250: LD_INT 1
6252: GREATER
6253: IFFALSE 6326
// for i = 1 to ( dif - 1 ) do
6255: LD_ADDR_VAR 0 2
6259: PUSH
6260: DOUBLE
6261: LD_INT 1
6263: DEC
6264: ST_TO_ADDR
6265: LD_EXP 1
6269: PUSH
6270: LD_INT 1
6272: MINUS
6273: PUSH
6274: FOR_TO
6275: IFFALSE 6324
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6277: LD_ADDR_EXP 17
6281: PUSH
6282: LD_EXP 17
6286: PUSH
6287: LD_INT 1
6289: PPUSH
6290: LD_VAR 0 5
6294: PPUSH
6295: CALL 734 0 2
6299: ADD
6300: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6301: LD_EXP 17
6305: PUSH
6306: LD_VAR 0 2
6310: ARRAY
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: LD_INT 0
6317: PPUSH
6318: CALL_OW 49
// end ;
6322: GO 6274
6324: POP
6325: POP
// game_started := true ;
6326: LD_ADDR_EXP 10
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6334: LD_INT 26
6336: PPUSH
6337: LD_INT 3
6339: PPUSH
6340: LD_INT 2
6342: PPUSH
6343: LD_INT 2
6345: PPUSH
6346: LD_INT 13
6348: PPUSH
6349: CALL_OW 125
// while ( contact_am = false ) do
6353: LD_EXP 16
6357: PUSH
6358: LD_INT 0
6360: EQUAL
6361: IFFALSE 6372
// begin Wait ( 0 0$01 ) ;
6363: LD_INT 35
6365: PPUSH
6366: CALL_OW 67
// end ;
6370: GO 6353
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6372: LD_INT 8400
6374: PUSH
6375: LD_INT 6300
6377: PUSH
6378: LD_INT 5250
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_EXP 1
6390: ARRAY
6391: PPUSH
6392: CALL_OW 67
// case dif of 1 :
6396: LD_EXP 1
6400: PUSH
6401: LD_INT 1
6403: DOUBLE
6404: EQUAL
6405: IFTRUE 6409
6407: GO 6584
6409: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6410: LD_INT 26
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 1
6418: PPUSH
6419: LD_INT 2
6421: PPUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: LD_INT 1
6442: PPUSH
6443: LD_INT 4
6445: PPUSH
6446: CALL_OW 12
6450: ARRAY
6451: PPUSH
6452: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6456: LD_INT 26
6458: PPUSH
6459: LD_INT 3
6461: PPUSH
6462: LD_INT 1
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: LD_INT 4
6470: PUSH
6471: LD_INT 5
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 1
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: CALL_OW 12
6492: ARRAY
6493: PPUSH
6494: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6498: LD_INT 26
6500: PPUSH
6501: LD_INT 3
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: LD_INT 4
6512: PUSH
6513: LD_INT 5
6515: PUSH
6516: LD_INT 5
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_INT 3
6529: PPUSH
6530: CALL_OW 12
6534: ARRAY
6535: PPUSH
6536: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6540: LD_INT 26
6542: PPUSH
6543: LD_INT 3
6545: PPUSH
6546: LD_INT 1
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: LD_INT 4
6554: PUSH
6555: LD_INT 3
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 3
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: PPUSH
6578: CALL_OW 185
// end ; 2 :
6582: GO 7111
6584: LD_INT 2
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6805
6592: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6593: LD_INT 26
6595: PPUSH
6596: LD_INT 3
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 2
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 5
6610: PUSH
6611: LD_INT 5
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6635: LD_INT 26
6637: PPUSH
6638: LD_INT 3
6640: PPUSH
6641: LD_INT 1
6643: PPUSH
6644: LD_INT 2
6646: PPUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 5
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_INT 3
6666: PPUSH
6667: CALL_OW 12
6671: ARRAY
6672: PPUSH
6673: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6677: LD_INT 26
6679: PPUSH
6680: LD_INT 3
6682: PPUSH
6683: LD_INT 1
6685: PPUSH
6686: LD_INT 2
6688: PPUSH
6689: LD_INT 4
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 1
6705: PPUSH
6706: LD_INT 3
6708: PPUSH
6709: CALL_OW 12
6713: ARRAY
6714: PPUSH
6715: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6719: LD_INT 26
6721: PPUSH
6722: LD_INT 4
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_INT 2
6730: PPUSH
6731: LD_INT 4
6733: PUSH
6734: LD_INT 5
6736: PUSH
6737: LD_INT 6
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 1
6747: PPUSH
6748: LD_INT 3
6750: PPUSH
6751: CALL_OW 12
6755: ARRAY
6756: PPUSH
6757: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6761: LD_INT 26
6763: PPUSH
6764: LD_INT 4
6766: PPUSH
6767: LD_INT 1
6769: PPUSH
6770: LD_INT 2
6772: PPUSH
6773: LD_INT 4
6775: PUSH
6776: LD_INT 5
6778: PUSH
6779: LD_INT 6
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 1
6789: PPUSH
6790: LD_INT 3
6792: PPUSH
6793: CALL_OW 12
6797: ARRAY
6798: PPUSH
6799: CALL_OW 185
// end ; 3 :
6803: GO 7111
6805: LD_INT 3
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 7110
6813: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6814: LD_INT 26
6816: PPUSH
6817: LD_INT 3
6819: PPUSH
6820: LD_INT 1
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: LD_INT 4
6828: PUSH
6829: LD_INT 5
6831: PUSH
6832: LD_INT 5
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 1
6842: PPUSH
6843: LD_INT 3
6845: PPUSH
6846: CALL_OW 12
6850: ARRAY
6851: PPUSH
6852: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6856: LD_INT 26
6858: PPUSH
6859: LD_INT 3
6861: PPUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_INT 2
6867: PPUSH
6868: LD_INT 4
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: LD_INT 5
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 1
6884: PPUSH
6885: LD_INT 3
6887: PPUSH
6888: CALL_OW 12
6892: ARRAY
6893: PPUSH
6894: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6898: LD_INT 26
6900: PPUSH
6901: LD_INT 3
6903: PPUSH
6904: LD_INT 1
6906: PPUSH
6907: LD_INT 2
6909: PPUSH
6910: LD_INT 4
6912: PUSH
6913: LD_INT 5
6915: PUSH
6916: LD_INT 5
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 1
6926: PPUSH
6927: LD_INT 3
6929: PPUSH
6930: CALL_OW 12
6934: ARRAY
6935: PPUSH
6936: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6940: LD_INT 26
6942: PPUSH
6943: LD_INT 3
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 2
6951: PPUSH
6952: LD_INT 4
6954: PUSH
6955: LD_INT 5
6957: PUSH
6958: LD_INT 5
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 1
6968: PPUSH
6969: LD_INT 3
6971: PPUSH
6972: CALL_OW 12
6976: ARRAY
6977: PPUSH
6978: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6982: LD_INT 26
6984: PPUSH
6985: LD_INT 4
6987: PPUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: LD_INT 4
6996: PUSH
6997: LD_INT 5
6999: PUSH
7000: LD_INT 6
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 1
7010: PPUSH
7011: LD_INT 3
7013: PPUSH
7014: CALL_OW 12
7018: ARRAY
7019: PPUSH
7020: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7024: LD_INT 26
7026: PPUSH
7027: LD_INT 4
7029: PPUSH
7030: LD_INT 1
7032: PPUSH
7033: LD_INT 2
7035: PPUSH
7036: LD_INT 4
7038: PUSH
7039: LD_INT 5
7041: PUSH
7042: LD_INT 6
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 1
7052: PPUSH
7053: LD_INT 3
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7066: LD_INT 26
7068: PPUSH
7069: LD_INT 4
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: LD_INT 4
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 1
7094: PPUSH
7095: LD_INT 3
7097: PPUSH
7098: CALL_OW 12
7102: ARRAY
7103: PPUSH
7104: CALL_OW 185
// end ; end ;
7108: GO 7111
7110: POP
// end ;
7111: LD_VAR 0 1
7115: RET
// every 0 0$01 do var i , filter ;
7116: GO 7118
7118: DISABLE
7119: LD_INT 0
7121: PPUSH
7122: PPUSH
// begin enable ;
7123: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7124: LD_INT 22
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 25
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PUSH
7153: LD_INT 0
7155: GREATER
7156: IFFALSE 7165
// RaiseSailEvent ( 3 ) ;
7158: LD_INT 3
7160: PPUSH
7161: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7165: LD_INT 22
7167: PUSH
7168: LD_INT 1
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 21
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 3
7187: PUSH
7188: LD_INT 24
7190: PUSH
7191: LD_INT 1000
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PPUSH
7207: CALL_OW 69
7211: PUSH
7212: LD_INT 0
7214: GREATER
7215: IFFALSE 7226
// RaiseSailEvent ( 1 ) else
7217: LD_INT 1
7219: PPUSH
7220: CALL_OW 427
7224: GO 7233
// RaiseSailEvent ( 2 ) ;
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7233: LD_INT 22
7235: PUSH
7236: LD_INT 1
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 30
7245: PUSH
7246: LD_INT 5
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: PUSH
7262: LD_INT 0
7264: GREATER
7265: IFFALSE 7274
// RaiseSailEvent ( 4 ) ;
7267: LD_INT 4
7269: PPUSH
7270: CALL_OW 427
// if gamma_towers > 0 then
7274: LD_EXP 18
7278: PUSH
7279: LD_INT 0
7281: GREATER
7282: IFFALSE 7291
// RaiseSailEvent ( 5 ) ;
7284: LD_INT 5
7286: PPUSH
7287: CALL_OW 427
// end ;
7291: PPOPN 2
7293: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7294: GO 7296
7296: DISABLE
7297: LD_INT 0
7299: PPUSH
7300: PPUSH
// begin enable ;
7301: ENABLE
// if new_veh > 0 then
7302: LD_EXP 19
7306: PUSH
7307: LD_INT 0
7309: GREATER
7310: IFFALSE 7497
// while ( new_veh > 0 ) do
7312: LD_EXP 19
7316: PUSH
7317: LD_INT 0
7319: GREATER
7320: IFFALSE 7497
// begin Wait ( 0 0$01 ) ;
7322: LD_INT 35
7324: PPUSH
7325: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7329: LD_INT 26
7331: PPUSH
7332: CALL_OW 461
7336: PUSH
7337: LD_INT 2
7339: EQUAL
7340: IFFALSE 7495
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7342: LD_ADDR_VAR 0 1
7346: PUSH
7347: LD_INT 2
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: LD_INT 4
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 4
7370: PPUSH
7371: CALL_OW 12
7375: ARRAY
7376: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7377: LD_VAR 0 1
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: IN
7392: IFFALSE 7427
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7394: LD_ADDR_VAR 0 2
7398: PUSH
7399: LD_INT 4
7401: PUSH
7402: LD_INT 5
7404: PUSH
7405: LD_INT 7
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 1
7415: PPUSH
7416: LD_INT 3
7418: PPUSH
7419: CALL_OW 12
7423: ARRAY
7424: ST_TO_ADDR
7425: GO 7458
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7427: LD_ADDR_VAR 0 2
7431: PUSH
7432: LD_INT 5
7434: PUSH
7435: LD_INT 7
7437: PUSH
7438: LD_INT 6
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_INT 3
7451: PPUSH
7452: CALL_OW 12
7456: ARRAY
7457: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7458: LD_INT 26
7460: PPUSH
7461: LD_VAR 0 1
7465: PPUSH
7466: LD_INT 1
7468: PPUSH
7469: LD_INT 2
7471: PPUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 125
// new_veh := new_veh - 1 ;
7481: LD_ADDR_EXP 19
7485: PUSH
7486: LD_EXP 19
7490: PUSH
7491: LD_INT 1
7493: MINUS
7494: ST_TO_ADDR
// end ; end ;
7495: GO 7312
// end ;
7497: PPOPN 2
7499: END
// every 0 0$01 do var v , filter , am_cmeh ;
7500: GO 7502
7502: DISABLE
7503: LD_INT 0
7505: PPUSH
7506: PPUSH
7507: PPUSH
// begin enable ;
7508: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7509: LD_ADDR_VAR 0 3
7513: PUSH
7514: LD_INT 56
7516: PPUSH
7517: CALL_OW 313
7521: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: LD_INT 22
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 33
7539: PUSH
7540: LD_INT 2
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 50
7549: PUSH
7550: EMPTY
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: ST_TO_ADDR
// if filter > 0 then
7566: LD_VAR 0 2
7570: PUSH
7571: LD_INT 0
7573: GREATER
7574: IFFALSE 7642
// begin for v in filter do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_VAR 0 2
7585: PUSH
7586: FOR_IN
7587: IFFALSE 7640
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7589: LD_VAR 0 1
7593: PPUSH
7594: CALL_OW 312
7598: NOT
7599: PUSH
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 302
7609: AND
7610: IFFALSE 7638
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_VAR 0 3
7621: PUSH
7622: LD_INT 1
7624: PPUSH
7625: LD_INT 3
7627: PPUSH
7628: CALL_OW 12
7632: ARRAY
7633: PPUSH
7634: CALL_OW 135
// end ;
7638: GO 7586
7640: POP
7641: POP
// end ; end ;
7642: PPOPN 3
7644: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7645: LD_INT 33
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 34
7660: PUSH
7661: LD_INT 13
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: PUSH
7681: LD_INT 4
7683: PUSH
7684: LD_INT 5
7686: PUSH
7687: LD_INT 7
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PUSH
7695: LD_EXP 1
7699: ARRAY
7700: EQUAL
7701: PUSH
7702: LD_INT 26
7704: PPUSH
7705: CALL_OW 461
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: AND
7714: IFFALSE 7925
7716: GO 7718
7718: DISABLE
7719: LD_INT 0
7721: PPUSH
7722: PPUSH
7723: PPUSH
// begin enable ;
7724: ENABLE
// if Sikorski_Ar then
7725: LD_EXP 12
7729: IFFALSE 7806
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7731: LD_ADDR_EXP 11
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: LD_INT 22
7741: PUSH
7742: LD_INT 4
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 22
7751: PUSH
7752: LD_INT 1
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: LD_INT 33
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 13
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: ST_TO_ADDR
7804: GO 7847
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7806: LD_ADDR_EXP 11
7810: PUSH
7811: LD_INT 33
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 34
7826: PUSH
7827: LD_INT 13
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 69
7846: ST_TO_ADDR
// repeat begin for un in SForce do
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_EXP 11
7856: PUSH
7857: FOR_IN
7858: IFFALSE 7913
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7860: LD_ADDR_VAR 0 3
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: LD_VAR 0 2
7894: PPUSH
7895: CALL_OW 74
7899: PPUSH
7900: CALL_OW 115
// Wait ( 0 0$01 ) ;
7904: LD_INT 35
7906: PPUSH
7907: CALL_OW 67
// end ;
7911: GO 7857
7913: POP
7914: POP
// end until SForce = 0 ;
7915: LD_EXP 11
7919: PUSH
7920: LD_INT 0
7922: EQUAL
7923: IFFALSE 7847
// end ;
7925: PPOPN 3
7927: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7928: LD_INT 0
7930: PPUSH
7931: PPUSH
7932: PPUSH
7933: PPUSH
7934: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 14
7942: PPUSH
7943: EMPTY
7944: PPUSH
7945: CALL_OW 70
7949: ST_TO_ADDR
// if tmp then
7950: LD_VAR 0 6
7954: IFFALSE 7988
// for i in tmp do
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_VAR 0 6
7965: PUSH
7966: FOR_IN
7967: IFFALSE 7986
// ComMoveXY ( i , 42 , 23 ) ;
7969: LD_VAR 0 3
7973: PPUSH
7974: LD_INT 42
7976: PPUSH
7977: LD_INT 23
7979: PPUSH
7980: CALL_OW 111
7984: GO 7966
7986: POP
7987: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
7988: LD_INT 14
7990: PPUSH
7991: LD_INT 1
7993: PPUSH
7994: CALL_OW 286
// uc_side := 4 ;
7998: LD_ADDR_OWVAR 20
8002: PUSH
8003: LD_INT 4
8005: ST_TO_ADDR
// uc_nation := 1 ;
8006: LD_ADDR_OWVAR 21
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8014: LD_ADDR_OWVAR 37
8018: PUSH
8019: LD_INT 4
8021: ST_TO_ADDR
// vc_control := control_manual ;
8022: LD_ADDR_OWVAR 38
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// vc_engine := engine_combustion ;
8030: LD_ADDR_OWVAR 39
8034: PUSH
8035: LD_INT 1
8037: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8038: LD_ADDR_OWVAR 40
8042: PUSH
8043: LD_INT 4
8045: PUSH
8046: LD_INT 5
8048: PUSH
8049: LD_INT 7
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_EXP 1
8061: ARRAY
8062: ST_TO_ADDR
// veh := CreateVehicle ;
8063: LD_ADDR_VAR 0 5
8067: PUSH
8068: CALL_OW 45
8072: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8073: LD_VAR 0 5
8077: PPUSH
8078: LD_INT 2
8080: PPUSH
8081: LD_INT 0
8083: PPUSH
8084: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8088: LD_EXP 9
8092: PPUSH
8093: LD_VAR 0 5
8097: PPUSH
8098: CALL_OW 52
// SetMark ( veh , 1 ) ;
8102: LD_VAR 0 5
8106: PPUSH
8107: LD_INT 1
8109: PPUSH
8110: CALL_OW 242
// while ( num > 0 ) do
8114: LD_VAR 0 1
8118: PUSH
8119: LD_INT 0
8121: GREATER
8122: IFFALSE 8289
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8124: LD_INT 3
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 3
8132: PUSH
8133: LD_INT 4
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: LD_EXP 1
8146: PPUSH
8147: LD_INT 4
8149: PPUSH
8150: CALL_OW 12
8154: ARRAY
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 4
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: LD_INT 5
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_EXP 1
8184: PUSH
8185: LD_INT 1
8187: PLUS
8188: PPUSH
8189: CALL_OW 12
8193: ARRAY
8194: PPUSH
8195: LD_INT 11
8197: PPUSH
8198: LD_INT 2
8200: PPUSH
8201: LD_INT 5
8203: PUSH
8204: LD_INT 6
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: LD_EXP 1
8219: ARRAY
8220: PPUSH
8221: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8225: LD_ADDR_VAR 0 4
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8245: LD_VAR 0 4
8249: PUSH
8250: LD_VAR 0 4
8254: ARRAY
8255: PPUSH
8256: LD_INT 36
8258: PPUSH
8259: LD_INT 18
8261: PPUSH
8262: CALL_OW 111
// Wait ( 0 0$02 ) ;
8266: LD_INT 70
8268: PPUSH
8269: CALL_OW 67
// num := num - 1 ;
8273: LD_ADDR_VAR 0 1
8277: PUSH
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: MINUS
8286: ST_TO_ADDR
// end ;
8287: GO 8114
// end ;
8289: LD_VAR 0 2
8293: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8294: LD_EXP 17
8298: PUSH
8299: LD_INT 0
8301: GREATER
8302: IFFALSE 8571
8304: GO 8306
8306: DISABLE
8307: LD_INT 0
8309: PPUSH
// begin enable ;
8310: ENABLE
// for i = 1 to patrol do
8311: LD_ADDR_VAR 0 1
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_EXP 17
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8569
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8329: LD_EXP 17
8333: PUSH
8334: LD_VAR 0 1
8338: ARRAY
8339: PUSH
8340: LD_EXP 17
8344: PUSH
8345: LD_VAR 0 1
8349: ARRAY
8350: PPUSH
8351: CALL_OW 300
8355: AND
8356: PUSH
8357: LD_EXP 17
8361: PUSH
8362: LD_VAR 0 1
8366: ARRAY
8367: PPUSH
8368: CALL_OW 314
8372: NOT
8373: AND
8374: IFFALSE 8524
// case i of 1 :
8376: LD_VAR 0 1
8380: PUSH
8381: LD_INT 1
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8452
8389: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8390: LD_EXP 17
8394: PUSH
8395: LD_VAR 0 1
8399: ARRAY
8400: PPUSH
8401: LD_INT 53
8403: PPUSH
8404: LD_INT 91
8406: PPUSH
8407: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8411: LD_EXP 17
8415: PUSH
8416: LD_VAR 0 1
8420: ARRAY
8421: PPUSH
8422: LD_INT 245
8424: PPUSH
8425: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8429: LD_EXP 17
8433: PUSH
8434: LD_VAR 0 1
8438: ARRAY
8439: PPUSH
8440: LD_INT 24
8442: PPUSH
8443: LD_INT 26
8445: PPUSH
8446: CALL_OW 171
// end ; 2 :
8450: GO 8524
8452: LD_INT 2
8454: DOUBLE
8455: EQUAL
8456: IFTRUE 8460
8458: GO 8523
8460: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8461: LD_EXP 17
8465: PUSH
8466: LD_VAR 0 1
8470: ARRAY
8471: PPUSH
8472: LD_INT 83
8474: PPUSH
8475: LD_INT 57
8477: PPUSH
8478: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8482: LD_EXP 17
8486: PUSH
8487: LD_VAR 0 1
8491: ARRAY
8492: PPUSH
8493: LD_INT 245
8495: PPUSH
8496: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8500: LD_EXP 17
8504: PUSH
8505: LD_VAR 0 1
8509: ARRAY
8510: PPUSH
8511: LD_INT 47
8513: PPUSH
8514: LD_INT 53
8516: PPUSH
8517: CALL_OW 171
// end ; end ;
8521: GO 8524
8523: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8524: LD_EXP 17
8528: PUSH
8529: LD_VAR 0 1
8533: ARRAY
8534: PPUSH
8535: CALL_OW 256
8539: PUSH
8540: LD_INT 1000
8542: LESS
8543: IFFALSE 8567
// patrol := patrol diff patrol [ i ] ;
8545: LD_ADDR_EXP 17
8549: PUSH
8550: LD_EXP 17
8554: PUSH
8555: LD_EXP 17
8559: PUSH
8560: LD_VAR 0 1
8564: ARRAY
8565: DIFF
8566: ST_TO_ADDR
// end ;
8567: GO 8326
8569: POP
8570: POP
// end ;
8571: PPOPN 1
8573: END
// every 0 0$10 do
8574: GO 8576
8576: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8577: LD_INT 42000
8579: PUSH
8580: LD_INT 37800
8582: PUSH
8583: LD_INT 33600
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: LD_EXP 1
8595: ARRAY
8596: PPUSH
8597: CALL_OW 67
// if not contact_am then
8601: LD_EXP 16
8605: NOT
8606: IFFALSE 8616
// contact_am := true ;
8608: LD_ADDR_EXP 16
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// end ; end_of_file
8616: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8617: LD_INT 0
8619: PPUSH
// comp_tested := false ;
8620: LD_ADDR_EXP 22
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sikorski_run := false ;
8628: LD_ADDR_EXP 23
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// InGameOn ;
8636: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8640: LD_INT 5
8642: PPUSH
8643: LD_INT 4
8645: PPUSH
8646: CALL_OW 86
// wait ( 0 0$2 ) ;
8650: LD_INT 70
8652: PPUSH
8653: CALL_OW 67
// CenterOnUnits ( commander ) ;
8657: LD_EXP 3
8661: PPUSH
8662: CALL_OW 85
// wait ( 0 0$01 ) ;
8666: LD_INT 35
8668: PPUSH
8669: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8673: LD_EXP 2
8677: PPUSH
8678: LD_STRING Dpop1
8680: PPUSH
8681: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8685: LD_EXP 3
8689: PPUSH
8690: LD_STRING Dcomm1
8692: PPUSH
8693: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8697: LD_EXP 2
8701: PPUSH
8702: LD_STRING Dpop2
8704: PPUSH
8705: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8709: LD_EXP 3
8713: PPUSH
8714: LD_STRING Dcomm2
8716: PPUSH
8717: CALL_OW 88
// InGameOff ;
8721: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8725: LD_STRING T1
8727: PPUSH
8728: CALL_OW 337
// end ;
8732: LD_VAR 0 1
8736: RET
// every 0 0$01 trigger timer > 2 2$01 do
8737: LD_EXP 24
8741: PUSH
8742: LD_INT 4235
8744: GREATER
8745: IFFALSE 8762
8747: GO 8749
8749: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8750: LD_EXP 5
8754: PPUSH
8755: LD_STRING DKap1
8757: PPUSH
8758: CALL_OW 94
// end ;
8762: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8763: LD_EXP 24
8767: PUSH
8768: LD_INT 46200
8770: PUSH
8771: LD_INT 52500
8773: PUSH
8774: LD_INT 63000
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: LD_EXP 1
8786: ARRAY
8787: GREATER
8788: IFFALSE 9155
8790: GO 8792
8792: DISABLE
8793: LD_INT 0
8795: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8796: LD_EXP 5
8800: PPUSH
8801: LD_STRING DKap2
8803: PPUSH
8804: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8808: LD_INT 10
8810: PPUSH
8811: CALL_OW 67
// Say ( commander , Dcommk ) ;
8815: LD_EXP 3
8819: PPUSH
8820: LD_STRING Dcommk
8822: PPUSH
8823: CALL_OW 88
// Wait ( 0 0$44 ) ;
8827: LD_INT 1540
8829: PPUSH
8830: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8834: LD_EXP 5
8838: PPUSH
8839: LD_INT 3
8841: PPUSH
8842: LD_INT 0
8844: PPUSH
8845: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8849: LD_EXP 5
8853: PPUSH
8854: CALL_OW 87
// Wait ( 0 0$10 ) ;
8858: LD_INT 350
8860: PPUSH
8861: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8865: LD_INT 6
8867: PUSH
8868: LD_INT 7
8870: PUSH
8871: LD_INT 8
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: LD_EXP 1
8883: ARRAY
8884: PPUSH
8885: CALL 7928 0 1
// Wait ( 2 2$00 ) ;
8889: LD_INT 4200
8891: PPUSH
8892: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8896: LD_INT 33
8898: PUSH
8899: LD_INT 2
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: LD_INT 34
8911: PUSH
8912: LD_INT 13
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 69
8931: PUSH
8932: LD_INT 3
8934: LESS
8935: IFFALSE 8946
// Wait ( 0 0$01 ) ;
8937: LD_INT 35
8939: PPUSH
8940: CALL_OW 67
8944: GO 8896
// uc_side := 4 ;
8946: LD_ADDR_OWVAR 20
8950: PUSH
8951: LD_INT 4
8953: ST_TO_ADDR
// uc_nation := 1 ;
8954: LD_ADDR_OWVAR 21
8958: PUSH
8959: LD_INT 1
8961: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8962: LD_ADDR_VAR 0 1
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_INT 4
8974: PUSH
8975: LD_INT 5
8977: PUSH
8978: LD_INT 6
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: LD_EXP 1
8990: ARRAY
8991: PUSH
8992: FOR_TO
8993: IFFALSE 9035
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
8995: LD_INT 1
8997: PPUSH
8998: LD_INT 5
9000: PUSH
9001: LD_INT 6
9003: PUSH
9004: LD_INT 7
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: PUSH
9012: LD_EXP 1
9016: ARRAY
9017: PPUSH
9018: CALL 734 0 2
9022: PPUSH
9023: LD_INT 4
9025: PPUSH
9026: LD_INT 0
9028: PPUSH
9029: CALL_OW 49
9033: GO 8992
9035: POP
9036: POP
// sikorski_ar := true ;
9037: LD_ADDR_EXP 12
9041: PUSH
9042: LD_INT 1
9044: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9045: LD_EXP 9
9049: PPUSH
9050: LD_STRING DSik1
9052: PPUSH
9053: CALL_OW 94
// Wait ( 0 0$30 ) ;
9057: LD_INT 1050
9059: PPUSH
9060: CALL_OW 67
// uc_side := 4 ;
9064: LD_ADDR_OWVAR 20
9068: PUSH
9069: LD_INT 4
9071: ST_TO_ADDR
// uc_nation := 1 ;
9072: LD_ADDR_OWVAR 21
9076: PUSH
9077: LD_INT 1
9079: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_INT 3
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: LD_INT 4
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_EXP 1
9108: ARRAY
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9153
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9113: LD_INT 1
9115: PPUSH
9116: LD_INT 5
9118: PUSH
9119: LD_INT 6
9121: PUSH
9122: LD_INT 7
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: PUSH
9130: LD_EXP 1
9134: ARRAY
9135: PPUSH
9136: CALL 734 0 2
9140: PPUSH
9141: LD_INT 13
9143: PPUSH
9144: LD_INT 0
9146: PPUSH
9147: CALL_OW 49
9151: GO 9110
9153: POP
9154: POP
// end ;
9155: PPOPN 1
9157: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9158: LD_EXP 9
9162: PPUSH
9163: CALL_OW 256
9167: PUSH
9168: LD_INT 650
9170: LESS
9171: IFFALSE 9253
9173: GO 9175
9175: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9176: LD_EXP 9
9180: PPUSH
9181: LD_STRING DSik2
9183: PPUSH
9184: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9188: LD_EXP 9
9192: PPUSH
9193: CALL_OW 300
9197: IFFALSE 9253
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9199: LD_EXP 9
9203: PPUSH
9204: LD_INT 2
9206: PPUSH
9207: CALL_OW 113
// Wait ( 0 0$01 ) ;
9211: LD_INT 35
9213: PPUSH
9214: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9218: LD_EXP 9
9222: PPUSH
9223: LD_INT 2
9225: PPUSH
9226: CALL_OW 308
9230: IFFALSE 9251
// begin RemoveUnit ( sikorski ) ;
9232: LD_EXP 9
9236: PPUSH
9237: CALL_OW 64
// break ;
9241: GO 9253
// sikorski_run := true ;
9243: LD_ADDR_EXP 23
9247: PUSH
9248: LD_INT 1
9250: ST_TO_ADDR
// end ; end ;
9251: GO 9188
// end ;
9253: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9254: LD_EXP 9
9258: PPUSH
9259: CALL_OW 256
9263: PUSH
9264: LD_INT 1000
9266: LESS
9267: IFFALSE 9284
9269: GO 9271
9271: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9272: LD_EXP 9
9276: PPUSH
9277: LD_STRING DSkik3
9279: PPUSH
9280: CALL_OW 88
9284: END
// every 1 1$45 + 0 0$15 do
9285: GO 9287
9287: DISABLE
// begin enable ;
9288: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9289: LD_INT 1
9291: PPUSH
9292: LD_INT 5
9294: PPUSH
9295: CALL_OW 12
9299: PPUSH
9300: LD_INT 8
9302: PPUSH
9303: LD_INT 1
9305: PPUSH
9306: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9310: LD_INT 350
9312: PPUSH
9313: LD_INT 1295
9315: PPUSH
9316: CALL_OW 12
9320: PPUSH
9321: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9325: LD_INT 1
9327: PPUSH
9328: LD_INT 5
9330: PPUSH
9331: CALL_OW 12
9335: PPUSH
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9343: LD_INT 350
9345: PPUSH
9346: LD_INT 1050
9348: PPUSH
9349: CALL_OW 12
9353: PPUSH
9354: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9358: LD_EXP 24
9362: PUSH
9363: LD_INT 25200
9365: PUSH
9366: LD_INT 23100
9368: PUSH
9369: LD_INT 21000
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PUSH
9377: LD_EXP 1
9381: ARRAY
9382: LESSEQUAL
9383: IFFALSE 9406
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9385: LD_INT 1
9387: PPUSH
9388: LD_INT 5
9390: PPUSH
9391: CALL_OW 12
9395: PPUSH
9396: LD_INT 8
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 55
// end ;
9406: END
// export timer ; every 1 do
9407: GO 9409
9409: DISABLE
// timer := 0 0$00 ;
9410: LD_ADDR_EXP 24
9414: PUSH
9415: LD_INT 0
9417: ST_TO_ADDR
9418: END
// every 0 0$01 do
9419: GO 9421
9421: DISABLE
// begin enable ;
9422: ENABLE
// Display_Strings := [ #tick , timer ] ;
9423: LD_ADDR_OWVAR 47
9427: PUSH
9428: LD_STRING #tick
9430: PUSH
9431: LD_EXP 24
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9440: LD_ADDR_EXP 24
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: LD_INT 35
9452: PLUS
9453: ST_TO_ADDR
// end ; end_of_file
9454: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
9455: LD_INT 0
9457: PPUSH
// ar_miner := 81 ;
9458: LD_ADDR_EXP 32
9462: PUSH
9463: LD_INT 81
9465: ST_TO_ADDR
// ar_crane := 88 ;
9466: LD_ADDR_EXP 31
9470: PUSH
9471: LD_INT 88
9473: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9474: LD_ADDR_EXP 26
9478: PUSH
9479: LD_INT 89
9481: ST_TO_ADDR
// us_hack := 99 ;
9482: LD_ADDR_EXP 27
9486: PUSH
9487: LD_INT 99
9489: ST_TO_ADDR
// us_artillery := 97 ;
9490: LD_ADDR_EXP 28
9494: PUSH
9495: LD_INT 97
9497: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9498: LD_ADDR_EXP 29
9502: PUSH
9503: LD_INT 91
9505: ST_TO_ADDR
// ar_mortar := 92 ;
9506: LD_ADDR_EXP 30
9510: PUSH
9511: LD_INT 92
9513: ST_TO_ADDR
// ru_radar := 98 ;
9514: LD_ADDR_EXP 25
9518: PUSH
9519: LD_INT 98
9521: ST_TO_ADDR
// tech_Artillery := 80 ;
9522: LD_ADDR_EXP 33
9526: PUSH
9527: LD_INT 80
9529: ST_TO_ADDR
// tech_RadMat := 81 ;
9530: LD_ADDR_EXP 34
9534: PUSH
9535: LD_INT 81
9537: ST_TO_ADDR
// tech_BasicTools := 82 ;
9538: LD_ADDR_EXP 35
9542: PUSH
9543: LD_INT 82
9545: ST_TO_ADDR
// tech_Cargo := 83 ;
9546: LD_ADDR_EXP 36
9550: PUSH
9551: LD_INT 83
9553: ST_TO_ADDR
// tech_Track := 84 ;
9554: LD_ADDR_EXP 37
9558: PUSH
9559: LD_INT 84
9561: ST_TO_ADDR
// tech_Crane := 85 ;
9562: LD_ADDR_EXP 38
9566: PUSH
9567: LD_INT 85
9569: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9570: LD_ADDR_EXP 39
9574: PUSH
9575: LD_INT 86
9577: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9578: LD_ADDR_EXP 40
9582: PUSH
9583: LD_INT 87
9585: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
9586: LD_ADDR_EXP 41
9590: PUSH
9591: LD_INT 88
9593: ST_TO_ADDR
// class_mastodont := 31 ;
9594: LD_ADDR_EXP 42
9598: PUSH
9599: LD_INT 31
9601: ST_TO_ADDR
// class_horse := 21 ;
9602: LD_ADDR_EXP 43
9606: PUSH
9607: LD_INT 21
9609: ST_TO_ADDR
// end ;
9610: LD_VAR 0 1
9614: RET
// every 1 do
9615: GO 9617
9617: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
9618: CALL 9455 0 0
9622: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9623: LD_INT 0
9625: PPUSH
// if p2 = 100 then
9626: LD_VAR 0 2
9630: PUSH
9631: LD_INT 100
9633: EQUAL
9634: IFFALSE 10583
// begin if not StreamModeActive then
9636: LD_EXP 44
9640: NOT
9641: IFFALSE 9651
// StreamModeActive := true ;
9643: LD_ADDR_EXP 44
9647: PUSH
9648: LD_INT 1
9650: ST_TO_ADDR
// if p3 = 0 then
9651: LD_VAR 0 3
9655: PUSH
9656: LD_INT 0
9658: EQUAL
9659: IFFALSE 9665
// InitStreamMode ;
9661: CALL 10743 0 0
// if p3 = 1 then
9665: LD_VAR 0 3
9669: PUSH
9670: LD_INT 1
9672: EQUAL
9673: IFFALSE 9683
// sRocket := true ;
9675: LD_ADDR_EXP 49
9679: PUSH
9680: LD_INT 1
9682: ST_TO_ADDR
// if p3 = 2 then
9683: LD_VAR 0 3
9687: PUSH
9688: LD_INT 2
9690: EQUAL
9691: IFFALSE 9701
// sSpeed := true ;
9693: LD_ADDR_EXP 48
9697: PUSH
9698: LD_INT 1
9700: ST_TO_ADDR
// if p3 = 3 then
9701: LD_VAR 0 3
9705: PUSH
9706: LD_INT 3
9708: EQUAL
9709: IFFALSE 9719
// sEngine := true ;
9711: LD_ADDR_EXP 50
9715: PUSH
9716: LD_INT 1
9718: ST_TO_ADDR
// if p3 = 4 then
9719: LD_VAR 0 3
9723: PUSH
9724: LD_INT 4
9726: EQUAL
9727: IFFALSE 9737
// sSpec := true ;
9729: LD_ADDR_EXP 47
9733: PUSH
9734: LD_INT 1
9736: ST_TO_ADDR
// if p3 = 5 then
9737: LD_VAR 0 3
9741: PUSH
9742: LD_INT 5
9744: EQUAL
9745: IFFALSE 9755
// sLevel := true ;
9747: LD_ADDR_EXP 51
9751: PUSH
9752: LD_INT 1
9754: ST_TO_ADDR
// if p3 = 6 then
9755: LD_VAR 0 3
9759: PUSH
9760: LD_INT 6
9762: EQUAL
9763: IFFALSE 9773
// sArmoury := true ;
9765: LD_ADDR_EXP 52
9769: PUSH
9770: LD_INT 1
9772: ST_TO_ADDR
// if p3 = 7 then
9773: LD_VAR 0 3
9777: PUSH
9778: LD_INT 7
9780: EQUAL
9781: IFFALSE 9791
// sRadar := true ;
9783: LD_ADDR_EXP 53
9787: PUSH
9788: LD_INT 1
9790: ST_TO_ADDR
// if p3 = 8 then
9791: LD_VAR 0 3
9795: PUSH
9796: LD_INT 8
9798: EQUAL
9799: IFFALSE 9809
// sBunker := true ;
9801: LD_ADDR_EXP 54
9805: PUSH
9806: LD_INT 1
9808: ST_TO_ADDR
// if p3 = 9 then
9809: LD_VAR 0 3
9813: PUSH
9814: LD_INT 9
9816: EQUAL
9817: IFFALSE 9827
// sHack := true ;
9819: LD_ADDR_EXP 55
9823: PUSH
9824: LD_INT 1
9826: ST_TO_ADDR
// if p3 = 10 then
9827: LD_VAR 0 3
9831: PUSH
9832: LD_INT 10
9834: EQUAL
9835: IFFALSE 9845
// sFire := true ;
9837: LD_ADDR_EXP 56
9841: PUSH
9842: LD_INT 1
9844: ST_TO_ADDR
// if p3 = 11 then
9845: LD_VAR 0 3
9849: PUSH
9850: LD_INT 11
9852: EQUAL
9853: IFFALSE 9863
// sRefresh := true ;
9855: LD_ADDR_EXP 57
9859: PUSH
9860: LD_INT 1
9862: ST_TO_ADDR
// if p3 = 12 then
9863: LD_VAR 0 3
9867: PUSH
9868: LD_INT 12
9870: EQUAL
9871: IFFALSE 9881
// sExp := true ;
9873: LD_ADDR_EXP 58
9877: PUSH
9878: LD_INT 1
9880: ST_TO_ADDR
// if p3 = 13 then
9881: LD_VAR 0 3
9885: PUSH
9886: LD_INT 13
9888: EQUAL
9889: IFFALSE 9899
// sDepot := true ;
9891: LD_ADDR_EXP 59
9895: PUSH
9896: LD_INT 1
9898: ST_TO_ADDR
// if p3 = 14 then
9899: LD_VAR 0 3
9903: PUSH
9904: LD_INT 14
9906: EQUAL
9907: IFFALSE 9917
// sFlag := true ;
9909: LD_ADDR_EXP 60
9913: PUSH
9914: LD_INT 1
9916: ST_TO_ADDR
// if p3 = 15 then
9917: LD_VAR 0 3
9921: PUSH
9922: LD_INT 15
9924: EQUAL
9925: IFFALSE 9935
// sKamikadze := true ;
9927: LD_ADDR_EXP 68
9931: PUSH
9932: LD_INT 1
9934: ST_TO_ADDR
// if p3 = 16 then
9935: LD_VAR 0 3
9939: PUSH
9940: LD_INT 16
9942: EQUAL
9943: IFFALSE 9953
// sTroll := true ;
9945: LD_ADDR_EXP 69
9949: PUSH
9950: LD_INT 1
9952: ST_TO_ADDR
// if p3 = 17 then
9953: LD_VAR 0 3
9957: PUSH
9958: LD_INT 17
9960: EQUAL
9961: IFFALSE 9971
// sSlow := true ;
9963: LD_ADDR_EXP 70
9967: PUSH
9968: LD_INT 1
9970: ST_TO_ADDR
// if p3 = 18 then
9971: LD_VAR 0 3
9975: PUSH
9976: LD_INT 18
9978: EQUAL
9979: IFFALSE 9989
// sLack := true ;
9981: LD_ADDR_EXP 71
9985: PUSH
9986: LD_INT 1
9988: ST_TO_ADDR
// if p3 = 19 then
9989: LD_VAR 0 3
9993: PUSH
9994: LD_INT 19
9996: EQUAL
9997: IFFALSE 10007
// sTank := true ;
9999: LD_ADDR_EXP 73
10003: PUSH
10004: LD_INT 1
10006: ST_TO_ADDR
// if p3 = 20 then
10007: LD_VAR 0 3
10011: PUSH
10012: LD_INT 20
10014: EQUAL
10015: IFFALSE 10025
// sRemote := true ;
10017: LD_ADDR_EXP 74
10021: PUSH
10022: LD_INT 1
10024: ST_TO_ADDR
// if p3 = 21 then
10025: LD_VAR 0 3
10029: PUSH
10030: LD_INT 21
10032: EQUAL
10033: IFFALSE 10043
// sPowell := true ;
10035: LD_ADDR_EXP 75
10039: PUSH
10040: LD_INT 1
10042: ST_TO_ADDR
// if p3 = 22 then
10043: LD_VAR 0 3
10047: PUSH
10048: LD_INT 22
10050: EQUAL
10051: IFFALSE 10061
// sTeleport := true ;
10053: LD_ADDR_EXP 78
10057: PUSH
10058: LD_INT 1
10060: ST_TO_ADDR
// if p3 = 23 then
10061: LD_VAR 0 3
10065: PUSH
10066: LD_INT 23
10068: EQUAL
10069: IFFALSE 10079
// sOilTower := true ;
10071: LD_ADDR_EXP 80
10075: PUSH
10076: LD_INT 1
10078: ST_TO_ADDR
// if p3 = 24 then
10079: LD_VAR 0 3
10083: PUSH
10084: LD_INT 24
10086: EQUAL
10087: IFFALSE 10097
// sShovel := true ;
10089: LD_ADDR_EXP 81
10093: PUSH
10094: LD_INT 1
10096: ST_TO_ADDR
// if p3 = 25 then
10097: LD_VAR 0 3
10101: PUSH
10102: LD_INT 25
10104: EQUAL
10105: IFFALSE 10115
// sSheik := true ;
10107: LD_ADDR_EXP 82
10111: PUSH
10112: LD_INT 1
10114: ST_TO_ADDR
// if p3 = 26 then
10115: LD_VAR 0 3
10119: PUSH
10120: LD_INT 26
10122: EQUAL
10123: IFFALSE 10133
// sEarthquake := true ;
10125: LD_ADDR_EXP 84
10129: PUSH
10130: LD_INT 1
10132: ST_TO_ADDR
// if p3 = 27 then
10133: LD_VAR 0 3
10137: PUSH
10138: LD_INT 27
10140: EQUAL
10141: IFFALSE 10151
// sAI := true ;
10143: LD_ADDR_EXP 85
10147: PUSH
10148: LD_INT 1
10150: ST_TO_ADDR
// if p3 = 28 then
10151: LD_VAR 0 3
10155: PUSH
10156: LD_INT 28
10158: EQUAL
10159: IFFALSE 10169
// sCargo := true ;
10161: LD_ADDR_EXP 88
10165: PUSH
10166: LD_INT 1
10168: ST_TO_ADDR
// if p3 = 29 then
10169: LD_VAR 0 3
10173: PUSH
10174: LD_INT 29
10176: EQUAL
10177: IFFALSE 10187
// sDLaser := true ;
10179: LD_ADDR_EXP 89
10183: PUSH
10184: LD_INT 1
10186: ST_TO_ADDR
// if p3 = 30 then
10187: LD_VAR 0 3
10191: PUSH
10192: LD_INT 30
10194: EQUAL
10195: IFFALSE 10205
// sExchange := true ;
10197: LD_ADDR_EXP 90
10201: PUSH
10202: LD_INT 1
10204: ST_TO_ADDR
// if p3 = 31 then
10205: LD_VAR 0 3
10209: PUSH
10210: LD_INT 31
10212: EQUAL
10213: IFFALSE 10223
// sFac := true ;
10215: LD_ADDR_EXP 91
10219: PUSH
10220: LD_INT 1
10222: ST_TO_ADDR
// if p3 = 32 then
10223: LD_VAR 0 3
10227: PUSH
10228: LD_INT 32
10230: EQUAL
10231: IFFALSE 10241
// sPower := true ;
10233: LD_ADDR_EXP 92
10237: PUSH
10238: LD_INT 1
10240: ST_TO_ADDR
// if p3 = 33 then
10241: LD_VAR 0 3
10245: PUSH
10246: LD_INT 33
10248: EQUAL
10249: IFFALSE 10259
// sRandom := true ;
10251: LD_ADDR_EXP 93
10255: PUSH
10256: LD_INT 1
10258: ST_TO_ADDR
// if p3 = 34 then
10259: LD_VAR 0 3
10263: PUSH
10264: LD_INT 34
10266: EQUAL
10267: IFFALSE 10277
// sShield := true ;
10269: LD_ADDR_EXP 94
10273: PUSH
10274: LD_INT 1
10276: ST_TO_ADDR
// if p3 = 35 then
10277: LD_VAR 0 3
10281: PUSH
10282: LD_INT 35
10284: EQUAL
10285: IFFALSE 10295
// sTime := true ;
10287: LD_ADDR_EXP 95
10291: PUSH
10292: LD_INT 1
10294: ST_TO_ADDR
// if p3 = 36 then
10295: LD_VAR 0 3
10299: PUSH
10300: LD_INT 36
10302: EQUAL
10303: IFFALSE 10313
// sTools := true ;
10305: LD_ADDR_EXP 96
10309: PUSH
10310: LD_INT 1
10312: ST_TO_ADDR
// if p3 = 101 then
10313: LD_VAR 0 3
10317: PUSH
10318: LD_INT 101
10320: EQUAL
10321: IFFALSE 10331
// sSold := true ;
10323: LD_ADDR_EXP 61
10327: PUSH
10328: LD_INT 1
10330: ST_TO_ADDR
// if p3 = 102 then
10331: LD_VAR 0 3
10335: PUSH
10336: LD_INT 102
10338: EQUAL
10339: IFFALSE 10349
// sDiff := true ;
10341: LD_ADDR_EXP 62
10345: PUSH
10346: LD_INT 1
10348: ST_TO_ADDR
// if p3 = 103 then
10349: LD_VAR 0 3
10353: PUSH
10354: LD_INT 103
10356: EQUAL
10357: IFFALSE 10367
// sFog := true ;
10359: LD_ADDR_EXP 65
10363: PUSH
10364: LD_INT 1
10366: ST_TO_ADDR
// if p3 = 104 then
10367: LD_VAR 0 3
10371: PUSH
10372: LD_INT 104
10374: EQUAL
10375: IFFALSE 10385
// sReset := true ;
10377: LD_ADDR_EXP 66
10381: PUSH
10382: LD_INT 1
10384: ST_TO_ADDR
// if p3 = 105 then
10385: LD_VAR 0 3
10389: PUSH
10390: LD_INT 105
10392: EQUAL
10393: IFFALSE 10403
// sSun := true ;
10395: LD_ADDR_EXP 67
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// if p3 = 106 then
10403: LD_VAR 0 3
10407: PUSH
10408: LD_INT 106
10410: EQUAL
10411: IFFALSE 10421
// sTiger := true ;
10413: LD_ADDR_EXP 63
10417: PUSH
10418: LD_INT 1
10420: ST_TO_ADDR
// if p3 = 107 then
10421: LD_VAR 0 3
10425: PUSH
10426: LD_INT 107
10428: EQUAL
10429: IFFALSE 10439
// sBomb := true ;
10431: LD_ADDR_EXP 64
10435: PUSH
10436: LD_INT 1
10438: ST_TO_ADDR
// if p3 = 108 then
10439: LD_VAR 0 3
10443: PUSH
10444: LD_INT 108
10446: EQUAL
10447: IFFALSE 10457
// sWound := true ;
10449: LD_ADDR_EXP 72
10453: PUSH
10454: LD_INT 1
10456: ST_TO_ADDR
// if p3 = 109 then
10457: LD_VAR 0 3
10461: PUSH
10462: LD_INT 109
10464: EQUAL
10465: IFFALSE 10475
// sBetray := true ;
10467: LD_ADDR_EXP 76
10471: PUSH
10472: LD_INT 1
10474: ST_TO_ADDR
// if p3 = 110 then
10475: LD_VAR 0 3
10479: PUSH
10480: LD_INT 110
10482: EQUAL
10483: IFFALSE 10493
// sContamin := true ;
10485: LD_ADDR_EXP 77
10489: PUSH
10490: LD_INT 1
10492: ST_TO_ADDR
// if p3 = 111 then
10493: LD_VAR 0 3
10497: PUSH
10498: LD_INT 111
10500: EQUAL
10501: IFFALSE 10511
// sOil := true ;
10503: LD_ADDR_EXP 79
10507: PUSH
10508: LD_INT 1
10510: ST_TO_ADDR
// if p3 = 112 then
10511: LD_VAR 0 3
10515: PUSH
10516: LD_INT 112
10518: EQUAL
10519: IFFALSE 10529
// sStu := true ;
10521: LD_ADDR_EXP 83
10525: PUSH
10526: LD_INT 1
10528: ST_TO_ADDR
// if p3 = 113 then
10529: LD_VAR 0 3
10533: PUSH
10534: LD_INT 113
10536: EQUAL
10537: IFFALSE 10547
// sBazooka := true ;
10539: LD_ADDR_EXP 86
10543: PUSH
10544: LD_INT 1
10546: ST_TO_ADDR
// if p3 = 114 then
10547: LD_VAR 0 3
10551: PUSH
10552: LD_INT 114
10554: EQUAL
10555: IFFALSE 10565
// sMortar := true ;
10557: LD_ADDR_EXP 87
10561: PUSH
10562: LD_INT 1
10564: ST_TO_ADDR
// if p3 = 115 then
10565: LD_VAR 0 3
10569: PUSH
10570: LD_INT 115
10572: EQUAL
10573: IFFALSE 10583
// sRanger := true ;
10575: LD_ADDR_EXP 97
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
// end ; if p2 = 101 then
10583: LD_VAR 0 2
10587: PUSH
10588: LD_INT 101
10590: EQUAL
10591: IFFALSE 10719
// begin case p3 of 1 :
10593: LD_VAR 0 3
10597: PUSH
10598: LD_INT 1
10600: DOUBLE
10601: EQUAL
10602: IFTRUE 10606
10604: GO 10613
10606: POP
// hHackUnlimitedResources ; 2 :
10607: CALL 21756 0 0
10611: GO 10719
10613: LD_INT 2
10615: DOUBLE
10616: EQUAL
10617: IFTRUE 10621
10619: GO 10628
10621: POP
// hHackSetLevel10 ; 3 :
10622: CALL 21889 0 0
10626: GO 10719
10628: LD_INT 3
10630: DOUBLE
10631: EQUAL
10632: IFTRUE 10636
10634: GO 10643
10636: POP
// hHackSetLevel10YourUnits ; 4 :
10637: CALL 21974 0 0
10641: GO 10719
10643: LD_INT 4
10645: DOUBLE
10646: EQUAL
10647: IFTRUE 10651
10649: GO 10658
10651: POP
// hHackInvincible ; 5 :
10652: CALL 22422 0 0
10656: GO 10719
10658: LD_INT 5
10660: DOUBLE
10661: EQUAL
10662: IFTRUE 10666
10664: GO 10673
10666: POP
// hHackInvisible ; 6 :
10667: CALL 22533 0 0
10671: GO 10719
10673: LD_INT 6
10675: DOUBLE
10676: EQUAL
10677: IFTRUE 10681
10679: GO 10688
10681: POP
// hHackChangeYourSide ; 7 :
10682: CALL 22590 0 0
10686: GO 10719
10688: LD_INT 7
10690: DOUBLE
10691: EQUAL
10692: IFTRUE 10696
10694: GO 10703
10696: POP
// hHackChangeUnitSide ; 8 :
10697: CALL 22632 0 0
10701: GO 10719
10703: LD_INT 8
10705: DOUBLE
10706: EQUAL
10707: IFTRUE 10711
10709: GO 10718
10711: POP
// hHackFog ; end ;
10712: CALL 22733 0 0
10716: GO 10719
10718: POP
// end ; end ;
10719: LD_VAR 0 7
10723: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10724: GO 10726
10726: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10727: LD_STRING initStreamRollete();
10729: PPUSH
10730: CALL_OW 559
// InitStreamMode ;
10734: CALL 10743 0 0
// DefineStreamItems ( ) ;
10738: CALL 11183 0 0
// end ;
10742: END
// function InitStreamMode ; begin
10743: LD_INT 0
10745: PPUSH
// streamModeActive := false ;
10746: LD_ADDR_EXP 44
10750: PUSH
10751: LD_INT 0
10753: ST_TO_ADDR
// normalCounter := 36 ;
10754: LD_ADDR_EXP 45
10758: PUSH
10759: LD_INT 36
10761: ST_TO_ADDR
// hardcoreCounter := 16 ;
10762: LD_ADDR_EXP 46
10766: PUSH
10767: LD_INT 16
10769: ST_TO_ADDR
// sRocket := false ;
10770: LD_ADDR_EXP 49
10774: PUSH
10775: LD_INT 0
10777: ST_TO_ADDR
// sSpeed := false ;
10778: LD_ADDR_EXP 48
10782: PUSH
10783: LD_INT 0
10785: ST_TO_ADDR
// sEngine := false ;
10786: LD_ADDR_EXP 50
10790: PUSH
10791: LD_INT 0
10793: ST_TO_ADDR
// sSpec := false ;
10794: LD_ADDR_EXP 47
10798: PUSH
10799: LD_INT 0
10801: ST_TO_ADDR
// sLevel := false ;
10802: LD_ADDR_EXP 51
10806: PUSH
10807: LD_INT 0
10809: ST_TO_ADDR
// sArmoury := false ;
10810: LD_ADDR_EXP 52
10814: PUSH
10815: LD_INT 0
10817: ST_TO_ADDR
// sRadar := false ;
10818: LD_ADDR_EXP 53
10822: PUSH
10823: LD_INT 0
10825: ST_TO_ADDR
// sBunker := false ;
10826: LD_ADDR_EXP 54
10830: PUSH
10831: LD_INT 0
10833: ST_TO_ADDR
// sHack := false ;
10834: LD_ADDR_EXP 55
10838: PUSH
10839: LD_INT 0
10841: ST_TO_ADDR
// sFire := false ;
10842: LD_ADDR_EXP 56
10846: PUSH
10847: LD_INT 0
10849: ST_TO_ADDR
// sRefresh := false ;
10850: LD_ADDR_EXP 57
10854: PUSH
10855: LD_INT 0
10857: ST_TO_ADDR
// sExp := false ;
10858: LD_ADDR_EXP 58
10862: PUSH
10863: LD_INT 0
10865: ST_TO_ADDR
// sDepot := false ;
10866: LD_ADDR_EXP 59
10870: PUSH
10871: LD_INT 0
10873: ST_TO_ADDR
// sFlag := false ;
10874: LD_ADDR_EXP 60
10878: PUSH
10879: LD_INT 0
10881: ST_TO_ADDR
// sKamikadze := false ;
10882: LD_ADDR_EXP 68
10886: PUSH
10887: LD_INT 0
10889: ST_TO_ADDR
// sTroll := false ;
10890: LD_ADDR_EXP 69
10894: PUSH
10895: LD_INT 0
10897: ST_TO_ADDR
// sSlow := false ;
10898: LD_ADDR_EXP 70
10902: PUSH
10903: LD_INT 0
10905: ST_TO_ADDR
// sLack := false ;
10906: LD_ADDR_EXP 71
10910: PUSH
10911: LD_INT 0
10913: ST_TO_ADDR
// sTank := false ;
10914: LD_ADDR_EXP 73
10918: PUSH
10919: LD_INT 0
10921: ST_TO_ADDR
// sRemote := false ;
10922: LD_ADDR_EXP 74
10926: PUSH
10927: LD_INT 0
10929: ST_TO_ADDR
// sPowell := false ;
10930: LD_ADDR_EXP 75
10934: PUSH
10935: LD_INT 0
10937: ST_TO_ADDR
// sTeleport := false ;
10938: LD_ADDR_EXP 78
10942: PUSH
10943: LD_INT 0
10945: ST_TO_ADDR
// sOilTower := false ;
10946: LD_ADDR_EXP 80
10950: PUSH
10951: LD_INT 0
10953: ST_TO_ADDR
// sShovel := false ;
10954: LD_ADDR_EXP 81
10958: PUSH
10959: LD_INT 0
10961: ST_TO_ADDR
// sSheik := false ;
10962: LD_ADDR_EXP 82
10966: PUSH
10967: LD_INT 0
10969: ST_TO_ADDR
// sEarthquake := false ;
10970: LD_ADDR_EXP 84
10974: PUSH
10975: LD_INT 0
10977: ST_TO_ADDR
// sAI := false ;
10978: LD_ADDR_EXP 85
10982: PUSH
10983: LD_INT 0
10985: ST_TO_ADDR
// sCargo := false ;
10986: LD_ADDR_EXP 88
10990: PUSH
10991: LD_INT 0
10993: ST_TO_ADDR
// sDLaser := false ;
10994: LD_ADDR_EXP 89
10998: PUSH
10999: LD_INT 0
11001: ST_TO_ADDR
// sExchange := false ;
11002: LD_ADDR_EXP 90
11006: PUSH
11007: LD_INT 0
11009: ST_TO_ADDR
// sFac := false ;
11010: LD_ADDR_EXP 91
11014: PUSH
11015: LD_INT 0
11017: ST_TO_ADDR
// sPower := false ;
11018: LD_ADDR_EXP 92
11022: PUSH
11023: LD_INT 0
11025: ST_TO_ADDR
// sRandom := false ;
11026: LD_ADDR_EXP 93
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// sShield := false ;
11034: LD_ADDR_EXP 94
11038: PUSH
11039: LD_INT 0
11041: ST_TO_ADDR
// sTime := false ;
11042: LD_ADDR_EXP 95
11046: PUSH
11047: LD_INT 0
11049: ST_TO_ADDR
// sTools := false ;
11050: LD_ADDR_EXP 96
11054: PUSH
11055: LD_INT 0
11057: ST_TO_ADDR
// sSold := false ;
11058: LD_ADDR_EXP 61
11062: PUSH
11063: LD_INT 0
11065: ST_TO_ADDR
// sDiff := false ;
11066: LD_ADDR_EXP 62
11070: PUSH
11071: LD_INT 0
11073: ST_TO_ADDR
// sFog := false ;
11074: LD_ADDR_EXP 65
11078: PUSH
11079: LD_INT 0
11081: ST_TO_ADDR
// sReset := false ;
11082: LD_ADDR_EXP 66
11086: PUSH
11087: LD_INT 0
11089: ST_TO_ADDR
// sSun := false ;
11090: LD_ADDR_EXP 67
11094: PUSH
11095: LD_INT 0
11097: ST_TO_ADDR
// sTiger := false ;
11098: LD_ADDR_EXP 63
11102: PUSH
11103: LD_INT 0
11105: ST_TO_ADDR
// sBomb := false ;
11106: LD_ADDR_EXP 64
11110: PUSH
11111: LD_INT 0
11113: ST_TO_ADDR
// sWound := false ;
11114: LD_ADDR_EXP 72
11118: PUSH
11119: LD_INT 0
11121: ST_TO_ADDR
// sBetray := false ;
11122: LD_ADDR_EXP 76
11126: PUSH
11127: LD_INT 0
11129: ST_TO_ADDR
// sContamin := false ;
11130: LD_ADDR_EXP 77
11134: PUSH
11135: LD_INT 0
11137: ST_TO_ADDR
// sOil := false ;
11138: LD_ADDR_EXP 79
11142: PUSH
11143: LD_INT 0
11145: ST_TO_ADDR
// sStu := false ;
11146: LD_ADDR_EXP 83
11150: PUSH
11151: LD_INT 0
11153: ST_TO_ADDR
// sBazooka := false ;
11154: LD_ADDR_EXP 86
11158: PUSH
11159: LD_INT 0
11161: ST_TO_ADDR
// sMortar := false ;
11162: LD_ADDR_EXP 87
11166: PUSH
11167: LD_INT 0
11169: ST_TO_ADDR
// sRanger := false ;
11170: LD_ADDR_EXP 97
11174: PUSH
11175: LD_INT 0
11177: ST_TO_ADDR
// end ;
11178: LD_VAR 0 1
11182: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11183: LD_INT 0
11185: PPUSH
11186: PPUSH
11187: PPUSH
11188: PPUSH
11189: PPUSH
// result := [ ] ;
11190: LD_ADDR_VAR 0 1
11194: PUSH
11195: EMPTY
11196: ST_TO_ADDR
// if campaign_id = 1 then
11197: LD_OWVAR 69
11201: PUSH
11202: LD_INT 1
11204: EQUAL
11205: IFFALSE 14143
// begin case mission_number of 1 :
11207: LD_OWVAR 70
11211: PUSH
11212: LD_INT 1
11214: DOUBLE
11215: EQUAL
11216: IFTRUE 11220
11218: GO 11284
11220: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11221: LD_ADDR_VAR 0 1
11225: PUSH
11226: LD_INT 2
11228: PUSH
11229: LD_INT 4
11231: PUSH
11232: LD_INT 11
11234: PUSH
11235: LD_INT 12
11237: PUSH
11238: LD_INT 15
11240: PUSH
11241: LD_INT 16
11243: PUSH
11244: LD_INT 22
11246: PUSH
11247: LD_INT 23
11249: PUSH
11250: LD_INT 26
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: PUSH
11264: LD_INT 101
11266: PUSH
11267: LD_INT 102
11269: PUSH
11270: LD_INT 106
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: LIST
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: ST_TO_ADDR
11282: GO 14141
11284: LD_INT 2
11286: DOUBLE
11287: EQUAL
11288: IFTRUE 11292
11290: GO 11364
11292: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11293: LD_ADDR_VAR 0 1
11297: PUSH
11298: LD_INT 2
11300: PUSH
11301: LD_INT 4
11303: PUSH
11304: LD_INT 11
11306: PUSH
11307: LD_INT 12
11309: PUSH
11310: LD_INT 15
11312: PUSH
11313: LD_INT 16
11315: PUSH
11316: LD_INT 22
11318: PUSH
11319: LD_INT 23
11321: PUSH
11322: LD_INT 26
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 101
11338: PUSH
11339: LD_INT 102
11341: PUSH
11342: LD_INT 105
11344: PUSH
11345: LD_INT 106
11347: PUSH
11348: LD_INT 108
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: ST_TO_ADDR
11362: GO 14141
11364: LD_INT 3
11366: DOUBLE
11367: EQUAL
11368: IFTRUE 11372
11370: GO 11448
11372: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11373: LD_ADDR_VAR 0 1
11377: PUSH
11378: LD_INT 2
11380: PUSH
11381: LD_INT 4
11383: PUSH
11384: LD_INT 5
11386: PUSH
11387: LD_INT 11
11389: PUSH
11390: LD_INT 12
11392: PUSH
11393: LD_INT 15
11395: PUSH
11396: LD_INT 16
11398: PUSH
11399: LD_INT 22
11401: PUSH
11402: LD_INT 26
11404: PUSH
11405: LD_INT 36
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 101
11422: PUSH
11423: LD_INT 102
11425: PUSH
11426: LD_INT 105
11428: PUSH
11429: LD_INT 106
11431: PUSH
11432: LD_INT 108
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: ST_TO_ADDR
11446: GO 14141
11448: LD_INT 4
11450: DOUBLE
11451: EQUAL
11452: IFTRUE 11456
11454: GO 11540
11456: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11457: LD_ADDR_VAR 0 1
11461: PUSH
11462: LD_INT 2
11464: PUSH
11465: LD_INT 4
11467: PUSH
11468: LD_INT 5
11470: PUSH
11471: LD_INT 8
11473: PUSH
11474: LD_INT 11
11476: PUSH
11477: LD_INT 12
11479: PUSH
11480: LD_INT 15
11482: PUSH
11483: LD_INT 16
11485: PUSH
11486: LD_INT 22
11488: PUSH
11489: LD_INT 23
11491: PUSH
11492: LD_INT 26
11494: PUSH
11495: LD_INT 36
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 101
11514: PUSH
11515: LD_INT 102
11517: PUSH
11518: LD_INT 105
11520: PUSH
11521: LD_INT 106
11523: PUSH
11524: LD_INT 108
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: ST_TO_ADDR
11538: GO 14141
11540: LD_INT 5
11542: DOUBLE
11543: EQUAL
11544: IFTRUE 11548
11546: GO 11648
11548: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11549: LD_ADDR_VAR 0 1
11553: PUSH
11554: LD_INT 2
11556: PUSH
11557: LD_INT 4
11559: PUSH
11560: LD_INT 5
11562: PUSH
11563: LD_INT 6
11565: PUSH
11566: LD_INT 8
11568: PUSH
11569: LD_INT 11
11571: PUSH
11572: LD_INT 12
11574: PUSH
11575: LD_INT 15
11577: PUSH
11578: LD_INT 16
11580: PUSH
11581: LD_INT 22
11583: PUSH
11584: LD_INT 23
11586: PUSH
11587: LD_INT 25
11589: PUSH
11590: LD_INT 26
11592: PUSH
11593: LD_INT 36
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 101
11614: PUSH
11615: LD_INT 102
11617: PUSH
11618: LD_INT 105
11620: PUSH
11621: LD_INT 106
11623: PUSH
11624: LD_INT 108
11626: PUSH
11627: LD_INT 109
11629: PUSH
11630: LD_INT 112
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: ST_TO_ADDR
11646: GO 14141
11648: LD_INT 6
11650: DOUBLE
11651: EQUAL
11652: IFTRUE 11656
11654: GO 11776
11656: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11657: LD_ADDR_VAR 0 1
11661: PUSH
11662: LD_INT 2
11664: PUSH
11665: LD_INT 4
11667: PUSH
11668: LD_INT 5
11670: PUSH
11671: LD_INT 6
11673: PUSH
11674: LD_INT 8
11676: PUSH
11677: LD_INT 11
11679: PUSH
11680: LD_INT 12
11682: PUSH
11683: LD_INT 15
11685: PUSH
11686: LD_INT 16
11688: PUSH
11689: LD_INT 20
11691: PUSH
11692: LD_INT 21
11694: PUSH
11695: LD_INT 22
11697: PUSH
11698: LD_INT 23
11700: PUSH
11701: LD_INT 25
11703: PUSH
11704: LD_INT 26
11706: PUSH
11707: LD_INT 30
11709: PUSH
11710: LD_INT 31
11712: PUSH
11713: LD_INT 32
11715: PUSH
11716: LD_INT 36
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 101
11742: PUSH
11743: LD_INT 102
11745: PUSH
11746: LD_INT 105
11748: PUSH
11749: LD_INT 106
11751: PUSH
11752: LD_INT 108
11754: PUSH
11755: LD_INT 109
11757: PUSH
11758: LD_INT 112
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: ST_TO_ADDR
11774: GO 14141
11776: LD_INT 7
11778: DOUBLE
11779: EQUAL
11780: IFTRUE 11784
11782: GO 11884
11784: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11785: LD_ADDR_VAR 0 1
11789: PUSH
11790: LD_INT 2
11792: PUSH
11793: LD_INT 4
11795: PUSH
11796: LD_INT 5
11798: PUSH
11799: LD_INT 7
11801: PUSH
11802: LD_INT 11
11804: PUSH
11805: LD_INT 12
11807: PUSH
11808: LD_INT 15
11810: PUSH
11811: LD_INT 16
11813: PUSH
11814: LD_INT 20
11816: PUSH
11817: LD_INT 21
11819: PUSH
11820: LD_INT 22
11822: PUSH
11823: LD_INT 23
11825: PUSH
11826: LD_INT 25
11828: PUSH
11829: LD_INT 26
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: PUSH
11848: LD_INT 101
11850: PUSH
11851: LD_INT 102
11853: PUSH
11854: LD_INT 103
11856: PUSH
11857: LD_INT 105
11859: PUSH
11860: LD_INT 106
11862: PUSH
11863: LD_INT 108
11865: PUSH
11866: LD_INT 112
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: ST_TO_ADDR
11882: GO 14141
11884: LD_INT 8
11886: DOUBLE
11887: EQUAL
11888: IFTRUE 11892
11890: GO 12020
11892: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11893: LD_ADDR_VAR 0 1
11897: PUSH
11898: LD_INT 2
11900: PUSH
11901: LD_INT 4
11903: PUSH
11904: LD_INT 5
11906: PUSH
11907: LD_INT 6
11909: PUSH
11910: LD_INT 7
11912: PUSH
11913: LD_INT 8
11915: PUSH
11916: LD_INT 11
11918: PUSH
11919: LD_INT 12
11921: PUSH
11922: LD_INT 15
11924: PUSH
11925: LD_INT 16
11927: PUSH
11928: LD_INT 20
11930: PUSH
11931: LD_INT 21
11933: PUSH
11934: LD_INT 22
11936: PUSH
11937: LD_INT 23
11939: PUSH
11940: LD_INT 25
11942: PUSH
11943: LD_INT 26
11945: PUSH
11946: LD_INT 30
11948: PUSH
11949: LD_INT 31
11951: PUSH
11952: LD_INT 32
11954: PUSH
11955: LD_INT 36
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 101
11982: PUSH
11983: LD_INT 102
11985: PUSH
11986: LD_INT 103
11988: PUSH
11989: LD_INT 105
11991: PUSH
11992: LD_INT 106
11994: PUSH
11995: LD_INT 108
11997: PUSH
11998: LD_INT 109
12000: PUSH
12001: LD_INT 112
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: ST_TO_ADDR
12018: GO 14141
12020: LD_INT 9
12022: DOUBLE
12023: EQUAL
12024: IFTRUE 12028
12026: GO 12164
12028: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12029: LD_ADDR_VAR 0 1
12033: PUSH
12034: LD_INT 2
12036: PUSH
12037: LD_INT 4
12039: PUSH
12040: LD_INT 5
12042: PUSH
12043: LD_INT 6
12045: PUSH
12046: LD_INT 7
12048: PUSH
12049: LD_INT 8
12051: PUSH
12052: LD_INT 11
12054: PUSH
12055: LD_INT 12
12057: PUSH
12058: LD_INT 15
12060: PUSH
12061: LD_INT 16
12063: PUSH
12064: LD_INT 20
12066: PUSH
12067: LD_INT 21
12069: PUSH
12070: LD_INT 22
12072: PUSH
12073: LD_INT 23
12075: PUSH
12076: LD_INT 25
12078: PUSH
12079: LD_INT 26
12081: PUSH
12082: LD_INT 28
12084: PUSH
12085: LD_INT 30
12087: PUSH
12088: LD_INT 31
12090: PUSH
12091: LD_INT 32
12093: PUSH
12094: LD_INT 36
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 101
12122: PUSH
12123: LD_INT 102
12125: PUSH
12126: LD_INT 103
12128: PUSH
12129: LD_INT 105
12131: PUSH
12132: LD_INT 106
12134: PUSH
12135: LD_INT 108
12137: PUSH
12138: LD_INT 109
12140: PUSH
12141: LD_INT 112
12143: PUSH
12144: LD_INT 114
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: ST_TO_ADDR
12162: GO 14141
12164: LD_INT 10
12166: DOUBLE
12167: EQUAL
12168: IFTRUE 12172
12170: GO 12356
12172: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12173: LD_ADDR_VAR 0 1
12177: PUSH
12178: LD_INT 2
12180: PUSH
12181: LD_INT 4
12183: PUSH
12184: LD_INT 5
12186: PUSH
12187: LD_INT 6
12189: PUSH
12190: LD_INT 7
12192: PUSH
12193: LD_INT 8
12195: PUSH
12196: LD_INT 9
12198: PUSH
12199: LD_INT 10
12201: PUSH
12202: LD_INT 11
12204: PUSH
12205: LD_INT 12
12207: PUSH
12208: LD_INT 13
12210: PUSH
12211: LD_INT 14
12213: PUSH
12214: LD_INT 15
12216: PUSH
12217: LD_INT 16
12219: PUSH
12220: LD_INT 17
12222: PUSH
12223: LD_INT 18
12225: PUSH
12226: LD_INT 19
12228: PUSH
12229: LD_INT 20
12231: PUSH
12232: LD_INT 21
12234: PUSH
12235: LD_INT 22
12237: PUSH
12238: LD_INT 23
12240: PUSH
12241: LD_INT 24
12243: PUSH
12244: LD_INT 25
12246: PUSH
12247: LD_INT 26
12249: PUSH
12250: LD_INT 28
12252: PUSH
12253: LD_INT 30
12255: PUSH
12256: LD_INT 31
12258: PUSH
12259: LD_INT 32
12261: PUSH
12262: LD_INT 36
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: LD_INT 101
12298: PUSH
12299: LD_INT 102
12301: PUSH
12302: LD_INT 103
12304: PUSH
12305: LD_INT 104
12307: PUSH
12308: LD_INT 105
12310: PUSH
12311: LD_INT 106
12313: PUSH
12314: LD_INT 107
12316: PUSH
12317: LD_INT 108
12319: PUSH
12320: LD_INT 109
12322: PUSH
12323: LD_INT 110
12325: PUSH
12326: LD_INT 111
12328: PUSH
12329: LD_INT 112
12331: PUSH
12332: LD_INT 114
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: ST_TO_ADDR
12354: GO 14141
12356: LD_INT 11
12358: DOUBLE
12359: EQUAL
12360: IFTRUE 12364
12362: GO 12556
12364: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12365: LD_ADDR_VAR 0 1
12369: PUSH
12370: LD_INT 2
12372: PUSH
12373: LD_INT 3
12375: PUSH
12376: LD_INT 4
12378: PUSH
12379: LD_INT 5
12381: PUSH
12382: LD_INT 6
12384: PUSH
12385: LD_INT 7
12387: PUSH
12388: LD_INT 8
12390: PUSH
12391: LD_INT 9
12393: PUSH
12394: LD_INT 10
12396: PUSH
12397: LD_INT 11
12399: PUSH
12400: LD_INT 12
12402: PUSH
12403: LD_INT 13
12405: PUSH
12406: LD_INT 14
12408: PUSH
12409: LD_INT 15
12411: PUSH
12412: LD_INT 16
12414: PUSH
12415: LD_INT 17
12417: PUSH
12418: LD_INT 18
12420: PUSH
12421: LD_INT 19
12423: PUSH
12424: LD_INT 20
12426: PUSH
12427: LD_INT 21
12429: PUSH
12430: LD_INT 22
12432: PUSH
12433: LD_INT 23
12435: PUSH
12436: LD_INT 24
12438: PUSH
12439: LD_INT 25
12441: PUSH
12442: LD_INT 26
12444: PUSH
12445: LD_INT 28
12447: PUSH
12448: LD_INT 30
12450: PUSH
12451: LD_INT 31
12453: PUSH
12454: LD_INT 32
12456: PUSH
12457: LD_INT 34
12459: PUSH
12460: LD_INT 36
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 101
12498: PUSH
12499: LD_INT 102
12501: PUSH
12502: LD_INT 103
12504: PUSH
12505: LD_INT 104
12507: PUSH
12508: LD_INT 105
12510: PUSH
12511: LD_INT 106
12513: PUSH
12514: LD_INT 107
12516: PUSH
12517: LD_INT 108
12519: PUSH
12520: LD_INT 109
12522: PUSH
12523: LD_INT 110
12525: PUSH
12526: LD_INT 111
12528: PUSH
12529: LD_INT 112
12531: PUSH
12532: LD_INT 114
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: ST_TO_ADDR
12554: GO 14141
12556: LD_INT 12
12558: DOUBLE
12559: EQUAL
12560: IFTRUE 12564
12562: GO 12772
12564: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12565: LD_ADDR_VAR 0 1
12569: PUSH
12570: LD_INT 1
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: LD_INT 3
12578: PUSH
12579: LD_INT 4
12581: PUSH
12582: LD_INT 5
12584: PUSH
12585: LD_INT 6
12587: PUSH
12588: LD_INT 7
12590: PUSH
12591: LD_INT 8
12593: PUSH
12594: LD_INT 9
12596: PUSH
12597: LD_INT 10
12599: PUSH
12600: LD_INT 11
12602: PUSH
12603: LD_INT 12
12605: PUSH
12606: LD_INT 13
12608: PUSH
12609: LD_INT 14
12611: PUSH
12612: LD_INT 15
12614: PUSH
12615: LD_INT 16
12617: PUSH
12618: LD_INT 17
12620: PUSH
12621: LD_INT 18
12623: PUSH
12624: LD_INT 19
12626: PUSH
12627: LD_INT 20
12629: PUSH
12630: LD_INT 21
12632: PUSH
12633: LD_INT 22
12635: PUSH
12636: LD_INT 23
12638: PUSH
12639: LD_INT 24
12641: PUSH
12642: LD_INT 25
12644: PUSH
12645: LD_INT 26
12647: PUSH
12648: LD_INT 27
12650: PUSH
12651: LD_INT 28
12653: PUSH
12654: LD_INT 30
12656: PUSH
12657: LD_INT 31
12659: PUSH
12660: LD_INT 32
12662: PUSH
12663: LD_INT 33
12665: PUSH
12666: LD_INT 34
12668: PUSH
12669: LD_INT 36
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 101
12710: PUSH
12711: LD_INT 102
12713: PUSH
12714: LD_INT 103
12716: PUSH
12717: LD_INT 104
12719: PUSH
12720: LD_INT 105
12722: PUSH
12723: LD_INT 106
12725: PUSH
12726: LD_INT 107
12728: PUSH
12729: LD_INT 108
12731: PUSH
12732: LD_INT 109
12734: PUSH
12735: LD_INT 110
12737: PUSH
12738: LD_INT 111
12740: PUSH
12741: LD_INT 112
12743: PUSH
12744: LD_INT 113
12746: PUSH
12747: LD_INT 114
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: ST_TO_ADDR
12770: GO 14141
12772: LD_INT 13
12774: DOUBLE
12775: EQUAL
12776: IFTRUE 12780
12778: GO 12976
12780: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12781: LD_ADDR_VAR 0 1
12785: PUSH
12786: LD_INT 1
12788: PUSH
12789: LD_INT 2
12791: PUSH
12792: LD_INT 3
12794: PUSH
12795: LD_INT 4
12797: PUSH
12798: LD_INT 5
12800: PUSH
12801: LD_INT 8
12803: PUSH
12804: LD_INT 9
12806: PUSH
12807: LD_INT 10
12809: PUSH
12810: LD_INT 11
12812: PUSH
12813: LD_INT 12
12815: PUSH
12816: LD_INT 14
12818: PUSH
12819: LD_INT 15
12821: PUSH
12822: LD_INT 16
12824: PUSH
12825: LD_INT 17
12827: PUSH
12828: LD_INT 18
12830: PUSH
12831: LD_INT 19
12833: PUSH
12834: LD_INT 20
12836: PUSH
12837: LD_INT 21
12839: PUSH
12840: LD_INT 22
12842: PUSH
12843: LD_INT 23
12845: PUSH
12846: LD_INT 24
12848: PUSH
12849: LD_INT 25
12851: PUSH
12852: LD_INT 26
12854: PUSH
12855: LD_INT 27
12857: PUSH
12858: LD_INT 28
12860: PUSH
12861: LD_INT 30
12863: PUSH
12864: LD_INT 31
12866: PUSH
12867: LD_INT 32
12869: PUSH
12870: LD_INT 33
12872: PUSH
12873: LD_INT 34
12875: PUSH
12876: LD_INT 36
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 101
12914: PUSH
12915: LD_INT 102
12917: PUSH
12918: LD_INT 103
12920: PUSH
12921: LD_INT 104
12923: PUSH
12924: LD_INT 105
12926: PUSH
12927: LD_INT 106
12929: PUSH
12930: LD_INT 107
12932: PUSH
12933: LD_INT 108
12935: PUSH
12936: LD_INT 109
12938: PUSH
12939: LD_INT 110
12941: PUSH
12942: LD_INT 111
12944: PUSH
12945: LD_INT 112
12947: PUSH
12948: LD_INT 113
12950: PUSH
12951: LD_INT 114
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: ST_TO_ADDR
12974: GO 14141
12976: LD_INT 14
12978: DOUBLE
12979: EQUAL
12980: IFTRUE 12984
12982: GO 13196
12984: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
12985: LD_ADDR_VAR 0 1
12989: PUSH
12990: LD_INT 1
12992: PUSH
12993: LD_INT 2
12995: PUSH
12996: LD_INT 3
12998: PUSH
12999: LD_INT 4
13001: PUSH
13002: LD_INT 5
13004: PUSH
13005: LD_INT 6
13007: PUSH
13008: LD_INT 7
13010: PUSH
13011: LD_INT 8
13013: PUSH
13014: LD_INT 9
13016: PUSH
13017: LD_INT 10
13019: PUSH
13020: LD_INT 11
13022: PUSH
13023: LD_INT 12
13025: PUSH
13026: LD_INT 13
13028: PUSH
13029: LD_INT 14
13031: PUSH
13032: LD_INT 15
13034: PUSH
13035: LD_INT 16
13037: PUSH
13038: LD_INT 17
13040: PUSH
13041: LD_INT 18
13043: PUSH
13044: LD_INT 19
13046: PUSH
13047: LD_INT 20
13049: PUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 22
13055: PUSH
13056: LD_INT 23
13058: PUSH
13059: LD_INT 24
13061: PUSH
13062: LD_INT 25
13064: PUSH
13065: LD_INT 26
13067: PUSH
13068: LD_INT 27
13070: PUSH
13071: LD_INT 28
13073: PUSH
13074: LD_INT 29
13076: PUSH
13077: LD_INT 30
13079: PUSH
13080: LD_INT 31
13082: PUSH
13083: LD_INT 32
13085: PUSH
13086: LD_INT 33
13088: PUSH
13089: LD_INT 34
13091: PUSH
13092: LD_INT 36
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: PUSH
13132: LD_INT 101
13134: PUSH
13135: LD_INT 102
13137: PUSH
13138: LD_INT 103
13140: PUSH
13141: LD_INT 104
13143: PUSH
13144: LD_INT 105
13146: PUSH
13147: LD_INT 106
13149: PUSH
13150: LD_INT 107
13152: PUSH
13153: LD_INT 108
13155: PUSH
13156: LD_INT 109
13158: PUSH
13159: LD_INT 110
13161: PUSH
13162: LD_INT 111
13164: PUSH
13165: LD_INT 112
13167: PUSH
13168: LD_INT 113
13170: PUSH
13171: LD_INT 114
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: ST_TO_ADDR
13194: GO 14141
13196: LD_INT 15
13198: DOUBLE
13199: EQUAL
13200: IFTRUE 13204
13202: GO 13416
13204: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13205: LD_ADDR_VAR 0 1
13209: PUSH
13210: LD_INT 1
13212: PUSH
13213: LD_INT 2
13215: PUSH
13216: LD_INT 3
13218: PUSH
13219: LD_INT 4
13221: PUSH
13222: LD_INT 5
13224: PUSH
13225: LD_INT 6
13227: PUSH
13228: LD_INT 7
13230: PUSH
13231: LD_INT 8
13233: PUSH
13234: LD_INT 9
13236: PUSH
13237: LD_INT 10
13239: PUSH
13240: LD_INT 11
13242: PUSH
13243: LD_INT 12
13245: PUSH
13246: LD_INT 13
13248: PUSH
13249: LD_INT 14
13251: PUSH
13252: LD_INT 15
13254: PUSH
13255: LD_INT 16
13257: PUSH
13258: LD_INT 17
13260: PUSH
13261: LD_INT 18
13263: PUSH
13264: LD_INT 19
13266: PUSH
13267: LD_INT 20
13269: PUSH
13270: LD_INT 21
13272: PUSH
13273: LD_INT 22
13275: PUSH
13276: LD_INT 23
13278: PUSH
13279: LD_INT 24
13281: PUSH
13282: LD_INT 25
13284: PUSH
13285: LD_INT 26
13287: PUSH
13288: LD_INT 27
13290: PUSH
13291: LD_INT 28
13293: PUSH
13294: LD_INT 29
13296: PUSH
13297: LD_INT 30
13299: PUSH
13300: LD_INT 31
13302: PUSH
13303: LD_INT 32
13305: PUSH
13306: LD_INT 33
13308: PUSH
13309: LD_INT 34
13311: PUSH
13312: LD_INT 36
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: PUSH
13352: LD_INT 101
13354: PUSH
13355: LD_INT 102
13357: PUSH
13358: LD_INT 103
13360: PUSH
13361: LD_INT 104
13363: PUSH
13364: LD_INT 105
13366: PUSH
13367: LD_INT 106
13369: PUSH
13370: LD_INT 107
13372: PUSH
13373: LD_INT 108
13375: PUSH
13376: LD_INT 109
13378: PUSH
13379: LD_INT 110
13381: PUSH
13382: LD_INT 111
13384: PUSH
13385: LD_INT 112
13387: PUSH
13388: LD_INT 113
13390: PUSH
13391: LD_INT 114
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: ST_TO_ADDR
13414: GO 14141
13416: LD_INT 16
13418: DOUBLE
13419: EQUAL
13420: IFTRUE 13424
13422: GO 13548
13424: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13425: LD_ADDR_VAR 0 1
13429: PUSH
13430: LD_INT 2
13432: PUSH
13433: LD_INT 4
13435: PUSH
13436: LD_INT 5
13438: PUSH
13439: LD_INT 7
13441: PUSH
13442: LD_INT 11
13444: PUSH
13445: LD_INT 12
13447: PUSH
13448: LD_INT 15
13450: PUSH
13451: LD_INT 16
13453: PUSH
13454: LD_INT 20
13456: PUSH
13457: LD_INT 21
13459: PUSH
13460: LD_INT 22
13462: PUSH
13463: LD_INT 23
13465: PUSH
13466: LD_INT 25
13468: PUSH
13469: LD_INT 26
13471: PUSH
13472: LD_INT 30
13474: PUSH
13475: LD_INT 31
13477: PUSH
13478: LD_INT 32
13480: PUSH
13481: LD_INT 33
13483: PUSH
13484: LD_INT 34
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 101
13510: PUSH
13511: LD_INT 102
13513: PUSH
13514: LD_INT 103
13516: PUSH
13517: LD_INT 106
13519: PUSH
13520: LD_INT 108
13522: PUSH
13523: LD_INT 112
13525: PUSH
13526: LD_INT 113
13528: PUSH
13529: LD_INT 114
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: ST_TO_ADDR
13546: GO 14141
13548: LD_INT 17
13550: DOUBLE
13551: EQUAL
13552: IFTRUE 13556
13554: GO 13768
13556: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13557: LD_ADDR_VAR 0 1
13561: PUSH
13562: LD_INT 1
13564: PUSH
13565: LD_INT 2
13567: PUSH
13568: LD_INT 3
13570: PUSH
13571: LD_INT 4
13573: PUSH
13574: LD_INT 5
13576: PUSH
13577: LD_INT 6
13579: PUSH
13580: LD_INT 7
13582: PUSH
13583: LD_INT 8
13585: PUSH
13586: LD_INT 9
13588: PUSH
13589: LD_INT 10
13591: PUSH
13592: LD_INT 11
13594: PUSH
13595: LD_INT 12
13597: PUSH
13598: LD_INT 13
13600: PUSH
13601: LD_INT 14
13603: PUSH
13604: LD_INT 15
13606: PUSH
13607: LD_INT 16
13609: PUSH
13610: LD_INT 17
13612: PUSH
13613: LD_INT 18
13615: PUSH
13616: LD_INT 19
13618: PUSH
13619: LD_INT 20
13621: PUSH
13622: LD_INT 21
13624: PUSH
13625: LD_INT 22
13627: PUSH
13628: LD_INT 23
13630: PUSH
13631: LD_INT 24
13633: PUSH
13634: LD_INT 25
13636: PUSH
13637: LD_INT 26
13639: PUSH
13640: LD_INT 27
13642: PUSH
13643: LD_INT 28
13645: PUSH
13646: LD_INT 29
13648: PUSH
13649: LD_INT 30
13651: PUSH
13652: LD_INT 31
13654: PUSH
13655: LD_INT 32
13657: PUSH
13658: LD_INT 33
13660: PUSH
13661: LD_INT 34
13663: PUSH
13664: LD_INT 36
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: PUSH
13704: LD_INT 101
13706: PUSH
13707: LD_INT 102
13709: PUSH
13710: LD_INT 103
13712: PUSH
13713: LD_INT 104
13715: PUSH
13716: LD_INT 105
13718: PUSH
13719: LD_INT 106
13721: PUSH
13722: LD_INT 107
13724: PUSH
13725: LD_INT 108
13727: PUSH
13728: LD_INT 109
13730: PUSH
13731: LD_INT 110
13733: PUSH
13734: LD_INT 111
13736: PUSH
13737: LD_INT 112
13739: PUSH
13740: LD_INT 113
13742: PUSH
13743: LD_INT 114
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: ST_TO_ADDR
13766: GO 14141
13768: LD_INT 18
13770: DOUBLE
13771: EQUAL
13772: IFTRUE 13776
13774: GO 13912
13776: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13777: LD_ADDR_VAR 0 1
13781: PUSH
13782: LD_INT 2
13784: PUSH
13785: LD_INT 4
13787: PUSH
13788: LD_INT 5
13790: PUSH
13791: LD_INT 7
13793: PUSH
13794: LD_INT 11
13796: PUSH
13797: LD_INT 12
13799: PUSH
13800: LD_INT 15
13802: PUSH
13803: LD_INT 16
13805: PUSH
13806: LD_INT 20
13808: PUSH
13809: LD_INT 21
13811: PUSH
13812: LD_INT 22
13814: PUSH
13815: LD_INT 23
13817: PUSH
13818: LD_INT 25
13820: PUSH
13821: LD_INT 26
13823: PUSH
13824: LD_INT 30
13826: PUSH
13827: LD_INT 31
13829: PUSH
13830: LD_INT 32
13832: PUSH
13833: LD_INT 33
13835: PUSH
13836: LD_INT 34
13838: PUSH
13839: LD_INT 35
13841: PUSH
13842: LD_INT 36
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 101
13870: PUSH
13871: LD_INT 102
13873: PUSH
13874: LD_INT 103
13876: PUSH
13877: LD_INT 106
13879: PUSH
13880: LD_INT 108
13882: PUSH
13883: LD_INT 112
13885: PUSH
13886: LD_INT 113
13888: PUSH
13889: LD_INT 114
13891: PUSH
13892: LD_INT 115
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: ST_TO_ADDR
13910: GO 14141
13912: LD_INT 19
13914: DOUBLE
13915: EQUAL
13916: IFTRUE 13920
13918: GO 14140
13920: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13921: LD_ADDR_VAR 0 1
13925: PUSH
13926: LD_INT 1
13928: PUSH
13929: LD_INT 2
13931: PUSH
13932: LD_INT 3
13934: PUSH
13935: LD_INT 4
13937: PUSH
13938: LD_INT 5
13940: PUSH
13941: LD_INT 6
13943: PUSH
13944: LD_INT 7
13946: PUSH
13947: LD_INT 8
13949: PUSH
13950: LD_INT 9
13952: PUSH
13953: LD_INT 10
13955: PUSH
13956: LD_INT 11
13958: PUSH
13959: LD_INT 12
13961: PUSH
13962: LD_INT 13
13964: PUSH
13965: LD_INT 14
13967: PUSH
13968: LD_INT 15
13970: PUSH
13971: LD_INT 16
13973: PUSH
13974: LD_INT 17
13976: PUSH
13977: LD_INT 18
13979: PUSH
13980: LD_INT 19
13982: PUSH
13983: LD_INT 20
13985: PUSH
13986: LD_INT 21
13988: PUSH
13989: LD_INT 22
13991: PUSH
13992: LD_INT 23
13994: PUSH
13995: LD_INT 24
13997: PUSH
13998: LD_INT 25
14000: PUSH
14001: LD_INT 26
14003: PUSH
14004: LD_INT 27
14006: PUSH
14007: LD_INT 28
14009: PUSH
14010: LD_INT 29
14012: PUSH
14013: LD_INT 30
14015: PUSH
14016: LD_INT 31
14018: PUSH
14019: LD_INT 32
14021: PUSH
14022: LD_INT 33
14024: PUSH
14025: LD_INT 34
14027: PUSH
14028: LD_INT 35
14030: PUSH
14031: LD_INT 36
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 101
14074: PUSH
14075: LD_INT 102
14077: PUSH
14078: LD_INT 103
14080: PUSH
14081: LD_INT 104
14083: PUSH
14084: LD_INT 105
14086: PUSH
14087: LD_INT 106
14089: PUSH
14090: LD_INT 107
14092: PUSH
14093: LD_INT 108
14095: PUSH
14096: LD_INT 109
14098: PUSH
14099: LD_INT 110
14101: PUSH
14102: LD_INT 111
14104: PUSH
14105: LD_INT 112
14107: PUSH
14108: LD_INT 113
14110: PUSH
14111: LD_INT 114
14113: PUSH
14114: LD_INT 115
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: ST_TO_ADDR
14138: GO 14141
14140: POP
// end else
14141: GO 14360
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14143: LD_ADDR_VAR 0 1
14147: PUSH
14148: LD_INT 1
14150: PUSH
14151: LD_INT 2
14153: PUSH
14154: LD_INT 3
14156: PUSH
14157: LD_INT 4
14159: PUSH
14160: LD_INT 5
14162: PUSH
14163: LD_INT 6
14165: PUSH
14166: LD_INT 7
14168: PUSH
14169: LD_INT 8
14171: PUSH
14172: LD_INT 9
14174: PUSH
14175: LD_INT 10
14177: PUSH
14178: LD_INT 11
14180: PUSH
14181: LD_INT 12
14183: PUSH
14184: LD_INT 13
14186: PUSH
14187: LD_INT 14
14189: PUSH
14190: LD_INT 15
14192: PUSH
14193: LD_INT 16
14195: PUSH
14196: LD_INT 17
14198: PUSH
14199: LD_INT 18
14201: PUSH
14202: LD_INT 19
14204: PUSH
14205: LD_INT 20
14207: PUSH
14208: LD_INT 21
14210: PUSH
14211: LD_INT 22
14213: PUSH
14214: LD_INT 23
14216: PUSH
14217: LD_INT 24
14219: PUSH
14220: LD_INT 25
14222: PUSH
14223: LD_INT 26
14225: PUSH
14226: LD_INT 27
14228: PUSH
14229: LD_INT 28
14231: PUSH
14232: LD_INT 29
14234: PUSH
14235: LD_INT 30
14237: PUSH
14238: LD_INT 31
14240: PUSH
14241: LD_INT 32
14243: PUSH
14244: LD_INT 33
14246: PUSH
14247: LD_INT 34
14249: PUSH
14250: LD_INT 35
14252: PUSH
14253: LD_INT 36
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 101
14296: PUSH
14297: LD_INT 102
14299: PUSH
14300: LD_INT 103
14302: PUSH
14303: LD_INT 104
14305: PUSH
14306: LD_INT 105
14308: PUSH
14309: LD_INT 106
14311: PUSH
14312: LD_INT 107
14314: PUSH
14315: LD_INT 108
14317: PUSH
14318: LD_INT 109
14320: PUSH
14321: LD_INT 110
14323: PUSH
14324: LD_INT 111
14326: PUSH
14327: LD_INT 112
14329: PUSH
14330: LD_INT 113
14332: PUSH
14333: LD_INT 114
14335: PUSH
14336: LD_INT 115
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: ST_TO_ADDR
// if result then
14360: LD_VAR 0 1
14364: IFFALSE 14653
// begin normal :=  ;
14366: LD_ADDR_VAR 0 3
14370: PUSH
14371: LD_STRING 
14373: ST_TO_ADDR
// hardcore :=  ;
14374: LD_ADDR_VAR 0 4
14378: PUSH
14379: LD_STRING 
14381: ST_TO_ADDR
// for i = 1 to normalCounter do
14382: LD_ADDR_VAR 0 5
14386: PUSH
14387: DOUBLE
14388: LD_INT 1
14390: DEC
14391: ST_TO_ADDR
14392: LD_EXP 45
14396: PUSH
14397: FOR_TO
14398: IFFALSE 14499
// begin tmp := 0 ;
14400: LD_ADDR_VAR 0 2
14404: PUSH
14405: LD_STRING 0
14407: ST_TO_ADDR
// if result [ 1 ] then
14408: LD_VAR 0 1
14412: PUSH
14413: LD_INT 1
14415: ARRAY
14416: IFFALSE 14481
// if result [ 1 ] [ 1 ] = i then
14418: LD_VAR 0 1
14422: PUSH
14423: LD_INT 1
14425: ARRAY
14426: PUSH
14427: LD_INT 1
14429: ARRAY
14430: PUSH
14431: LD_VAR 0 5
14435: EQUAL
14436: IFFALSE 14481
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14438: LD_ADDR_VAR 0 1
14442: PUSH
14443: LD_VAR 0 1
14447: PPUSH
14448: LD_INT 1
14450: PPUSH
14451: LD_VAR 0 1
14455: PUSH
14456: LD_INT 1
14458: ARRAY
14459: PPUSH
14460: LD_INT 1
14462: PPUSH
14463: CALL_OW 3
14467: PPUSH
14468: CALL_OW 1
14472: ST_TO_ADDR
// tmp := 1 ;
14473: LD_ADDR_VAR 0 2
14477: PUSH
14478: LD_STRING 1
14480: ST_TO_ADDR
// end ; normal := normal & tmp ;
14481: LD_ADDR_VAR 0 3
14485: PUSH
14486: LD_VAR 0 3
14490: PUSH
14491: LD_VAR 0 2
14495: STR
14496: ST_TO_ADDR
// end ;
14497: GO 14397
14499: POP
14500: POP
// for i = 1 to hardcoreCounter do
14501: LD_ADDR_VAR 0 5
14505: PUSH
14506: DOUBLE
14507: LD_INT 1
14509: DEC
14510: ST_TO_ADDR
14511: LD_EXP 46
14515: PUSH
14516: FOR_TO
14517: IFFALSE 14622
// begin tmp := 0 ;
14519: LD_ADDR_VAR 0 2
14523: PUSH
14524: LD_STRING 0
14526: ST_TO_ADDR
// if result [ 2 ] then
14527: LD_VAR 0 1
14531: PUSH
14532: LD_INT 2
14534: ARRAY
14535: IFFALSE 14604
// if result [ 2 ] [ 1 ] = 100 + i then
14537: LD_VAR 0 1
14541: PUSH
14542: LD_INT 2
14544: ARRAY
14545: PUSH
14546: LD_INT 1
14548: ARRAY
14549: PUSH
14550: LD_INT 100
14552: PUSH
14553: LD_VAR 0 5
14557: PLUS
14558: EQUAL
14559: IFFALSE 14604
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14561: LD_ADDR_VAR 0 1
14565: PUSH
14566: LD_VAR 0 1
14570: PPUSH
14571: LD_INT 2
14573: PPUSH
14574: LD_VAR 0 1
14578: PUSH
14579: LD_INT 2
14581: ARRAY
14582: PPUSH
14583: LD_INT 1
14585: PPUSH
14586: CALL_OW 3
14590: PPUSH
14591: CALL_OW 1
14595: ST_TO_ADDR
// tmp := 1 ;
14596: LD_ADDR_VAR 0 2
14600: PUSH
14601: LD_STRING 1
14603: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14604: LD_ADDR_VAR 0 4
14608: PUSH
14609: LD_VAR 0 4
14613: PUSH
14614: LD_VAR 0 2
14618: STR
14619: ST_TO_ADDR
// end ;
14620: GO 14516
14622: POP
14623: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14624: LD_STRING getStreamItemsFromMission("
14626: PUSH
14627: LD_VAR 0 3
14631: STR
14632: PUSH
14633: LD_STRING ","
14635: STR
14636: PUSH
14637: LD_VAR 0 4
14641: STR
14642: PUSH
14643: LD_STRING ")
14645: STR
14646: PPUSH
14647: CALL_OW 559
// end else
14651: GO 14660
// ToLua ( getStreamItemsFromMission("","") ) ;
14653: LD_STRING getStreamItemsFromMission("","")
14655: PPUSH
14656: CALL_OW 559
// end ;
14660: LD_VAR 0 1
14664: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14665: LD_EXP 44
14669: PUSH
14670: LD_EXP 49
14674: AND
14675: IFFALSE 14799
14677: GO 14679
14679: DISABLE
14680: LD_INT 0
14682: PPUSH
14683: PPUSH
// begin enable ;
14684: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14685: LD_ADDR_VAR 0 2
14689: PUSH
14690: LD_INT 22
14692: PUSH
14693: LD_OWVAR 2
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: LD_INT 34
14707: PUSH
14708: LD_INT 7
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 34
14717: PUSH
14718: LD_INT 45
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 34
14727: PUSH
14728: LD_INT 28
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 34
14737: PUSH
14738: LD_INT 47
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PPUSH
14756: CALL_OW 69
14760: ST_TO_ADDR
// if not tmp then
14761: LD_VAR 0 2
14765: NOT
14766: IFFALSE 14770
// exit ;
14768: GO 14799
// for i in tmp do
14770: LD_ADDR_VAR 0 1
14774: PUSH
14775: LD_VAR 0 2
14779: PUSH
14780: FOR_IN
14781: IFFALSE 14797
// begin SetLives ( i , 0 ) ;
14783: LD_VAR 0 1
14787: PPUSH
14788: LD_INT 0
14790: PPUSH
14791: CALL_OW 234
// end ;
14795: GO 14780
14797: POP
14798: POP
// end ;
14799: PPOPN 2
14801: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14802: LD_EXP 44
14806: PUSH
14807: LD_EXP 50
14811: AND
14812: IFFALSE 14896
14814: GO 14816
14816: DISABLE
14817: LD_INT 0
14819: PPUSH
14820: PPUSH
// begin enable ;
14821: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14822: LD_ADDR_VAR 0 2
14826: PUSH
14827: LD_INT 22
14829: PUSH
14830: LD_OWVAR 2
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 32
14841: PUSH
14842: LD_INT 3
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PPUSH
14853: CALL_OW 69
14857: ST_TO_ADDR
// if not tmp then
14858: LD_VAR 0 2
14862: NOT
14863: IFFALSE 14867
// exit ;
14865: GO 14896
// for i in tmp do
14867: LD_ADDR_VAR 0 1
14871: PUSH
14872: LD_VAR 0 2
14876: PUSH
14877: FOR_IN
14878: IFFALSE 14894
// begin SetLives ( i , 0 ) ;
14880: LD_VAR 0 1
14884: PPUSH
14885: LD_INT 0
14887: PPUSH
14888: CALL_OW 234
// end ;
14892: GO 14877
14894: POP
14895: POP
// end ;
14896: PPOPN 2
14898: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14899: LD_EXP 44
14903: PUSH
14904: LD_EXP 47
14908: AND
14909: IFFALSE 15002
14911: GO 14913
14913: DISABLE
14914: LD_INT 0
14916: PPUSH
// begin enable ;
14917: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14918: LD_ADDR_VAR 0 1
14922: PUSH
14923: LD_INT 22
14925: PUSH
14926: LD_OWVAR 2
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PUSH
14935: LD_INT 2
14937: PUSH
14938: LD_INT 25
14940: PUSH
14941: LD_INT 5
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: LD_INT 25
14950: PUSH
14951: LD_INT 9
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 25
14960: PUSH
14961: LD_INT 8
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PPUSH
14978: CALL_OW 69
14982: PUSH
14983: FOR_IN
14984: IFFALSE 15000
// begin SetClass ( i , 1 ) ;
14986: LD_VAR 0 1
14990: PPUSH
14991: LD_INT 1
14993: PPUSH
14994: CALL_OW 336
// end ;
14998: GO 14983
15000: POP
15001: POP
// end ;
15002: PPOPN 1
15004: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15005: LD_EXP 44
15009: PUSH
15010: LD_EXP 48
15014: AND
15015: PUSH
15016: LD_OWVAR 65
15020: PUSH
15021: LD_INT 7
15023: LESS
15024: AND
15025: IFFALSE 15039
15027: GO 15029
15029: DISABLE
// begin enable ;
15030: ENABLE
// game_speed := 7 ;
15031: LD_ADDR_OWVAR 65
15035: PUSH
15036: LD_INT 7
15038: ST_TO_ADDR
// end ;
15039: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15040: LD_EXP 44
15044: PUSH
15045: LD_EXP 51
15049: AND
15050: IFFALSE 15252
15052: GO 15054
15054: DISABLE
15055: LD_INT 0
15057: PPUSH
15058: PPUSH
15059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15060: LD_ADDR_VAR 0 3
15064: PUSH
15065: LD_INT 81
15067: PUSH
15068: LD_OWVAR 2
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 21
15079: PUSH
15080: LD_INT 1
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PPUSH
15091: CALL_OW 69
15095: ST_TO_ADDR
// if not tmp then
15096: LD_VAR 0 3
15100: NOT
15101: IFFALSE 15105
// exit ;
15103: GO 15252
// if tmp > 5 then
15105: LD_VAR 0 3
15109: PUSH
15110: LD_INT 5
15112: GREATER
15113: IFFALSE 15125
// k := 5 else
15115: LD_ADDR_VAR 0 2
15119: PUSH
15120: LD_INT 5
15122: ST_TO_ADDR
15123: GO 15135
// k := tmp ;
15125: LD_ADDR_VAR 0 2
15129: PUSH
15130: LD_VAR 0 3
15134: ST_TO_ADDR
// for i := 1 to k do
15135: LD_ADDR_VAR 0 1
15139: PUSH
15140: DOUBLE
15141: LD_INT 1
15143: DEC
15144: ST_TO_ADDR
15145: LD_VAR 0 2
15149: PUSH
15150: FOR_TO
15151: IFFALSE 15250
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15153: LD_VAR 0 3
15157: PUSH
15158: LD_VAR 0 1
15162: ARRAY
15163: PPUSH
15164: LD_VAR 0 1
15168: PUSH
15169: LD_INT 4
15171: MOD
15172: PUSH
15173: LD_INT 1
15175: PLUS
15176: PPUSH
15177: CALL_OW 259
15181: PUSH
15182: LD_INT 10
15184: LESS
15185: IFFALSE 15248
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15187: LD_VAR 0 3
15191: PUSH
15192: LD_VAR 0 1
15196: ARRAY
15197: PPUSH
15198: LD_VAR 0 1
15202: PUSH
15203: LD_INT 4
15205: MOD
15206: PUSH
15207: LD_INT 1
15209: PLUS
15210: PPUSH
15211: LD_VAR 0 3
15215: PUSH
15216: LD_VAR 0 1
15220: ARRAY
15221: PPUSH
15222: LD_VAR 0 1
15226: PUSH
15227: LD_INT 4
15229: MOD
15230: PUSH
15231: LD_INT 1
15233: PLUS
15234: PPUSH
15235: CALL_OW 259
15239: PUSH
15240: LD_INT 1
15242: PLUS
15243: PPUSH
15244: CALL_OW 237
15248: GO 15150
15250: POP
15251: POP
// end ;
15252: PPOPN 3
15254: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15255: LD_EXP 44
15259: PUSH
15260: LD_EXP 52
15264: AND
15265: IFFALSE 15285
15267: GO 15269
15269: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15270: LD_INT 4
15272: PPUSH
15273: LD_OWVAR 2
15277: PPUSH
15278: LD_INT 0
15280: PPUSH
15281: CALL_OW 324
15285: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15286: LD_EXP 44
15290: PUSH
15291: LD_EXP 81
15295: AND
15296: IFFALSE 15316
15298: GO 15300
15300: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15301: LD_INT 19
15303: PPUSH
15304: LD_OWVAR 2
15308: PPUSH
15309: LD_INT 0
15311: PPUSH
15312: CALL_OW 324
15316: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15317: LD_EXP 44
15321: PUSH
15322: LD_EXP 53
15326: AND
15327: IFFALSE 15429
15329: GO 15331
15331: DISABLE
15332: LD_INT 0
15334: PPUSH
15335: PPUSH
// begin enable ;
15336: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15337: LD_ADDR_VAR 0 2
15341: PUSH
15342: LD_INT 22
15344: PUSH
15345: LD_OWVAR 2
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: LD_INT 2
15356: PUSH
15357: LD_INT 34
15359: PUSH
15360: LD_INT 11
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 34
15369: PUSH
15370: LD_INT 30
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PPUSH
15386: CALL_OW 69
15390: ST_TO_ADDR
// if not tmp then
15391: LD_VAR 0 2
15395: NOT
15396: IFFALSE 15400
// exit ;
15398: GO 15429
// for i in tmp do
15400: LD_ADDR_VAR 0 1
15404: PUSH
15405: LD_VAR 0 2
15409: PUSH
15410: FOR_IN
15411: IFFALSE 15427
// begin SetLives ( i , 0 ) ;
15413: LD_VAR 0 1
15417: PPUSH
15418: LD_INT 0
15420: PPUSH
15421: CALL_OW 234
// end ;
15425: GO 15410
15427: POP
15428: POP
// end ;
15429: PPOPN 2
15431: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15432: LD_EXP 44
15436: PUSH
15437: LD_EXP 54
15441: AND
15442: IFFALSE 15462
15444: GO 15446
15446: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15447: LD_INT 32
15449: PPUSH
15450: LD_OWVAR 2
15454: PPUSH
15455: LD_INT 0
15457: PPUSH
15458: CALL_OW 324
15462: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15463: LD_EXP 44
15467: PUSH
15468: LD_EXP 55
15472: AND
15473: IFFALSE 15654
15475: GO 15477
15477: DISABLE
15478: LD_INT 0
15480: PPUSH
15481: PPUSH
15482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15483: LD_ADDR_VAR 0 2
15487: PUSH
15488: LD_INT 22
15490: PUSH
15491: LD_OWVAR 2
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 33
15502: PUSH
15503: LD_INT 3
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PPUSH
15514: CALL_OW 69
15518: ST_TO_ADDR
// if not tmp then
15519: LD_VAR 0 2
15523: NOT
15524: IFFALSE 15528
// exit ;
15526: GO 15654
// side := 0 ;
15528: LD_ADDR_VAR 0 3
15532: PUSH
15533: LD_INT 0
15535: ST_TO_ADDR
// for i := 1 to 8 do
15536: LD_ADDR_VAR 0 1
15540: PUSH
15541: DOUBLE
15542: LD_INT 1
15544: DEC
15545: ST_TO_ADDR
15546: LD_INT 8
15548: PUSH
15549: FOR_TO
15550: IFFALSE 15598
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15552: LD_OWVAR 2
15556: PUSH
15557: LD_VAR 0 1
15561: NONEQUAL
15562: PUSH
15563: LD_OWVAR 2
15567: PPUSH
15568: LD_VAR 0 1
15572: PPUSH
15573: CALL_OW 81
15577: PUSH
15578: LD_INT 2
15580: EQUAL
15581: AND
15582: IFFALSE 15596
// begin side := i ;
15584: LD_ADDR_VAR 0 3
15588: PUSH
15589: LD_VAR 0 1
15593: ST_TO_ADDR
// break ;
15594: GO 15598
// end ;
15596: GO 15549
15598: POP
15599: POP
// if not side then
15600: LD_VAR 0 3
15604: NOT
15605: IFFALSE 15609
// exit ;
15607: GO 15654
// for i := 1 to tmp do
15609: LD_ADDR_VAR 0 1
15613: PUSH
15614: DOUBLE
15615: LD_INT 1
15617: DEC
15618: ST_TO_ADDR
15619: LD_VAR 0 2
15623: PUSH
15624: FOR_TO
15625: IFFALSE 15652
// if Prob ( 60 ) then
15627: LD_INT 60
15629: PPUSH
15630: CALL_OW 13
15634: IFFALSE 15650
// SetSide ( i , side ) ;
15636: LD_VAR 0 1
15640: PPUSH
15641: LD_VAR 0 3
15645: PPUSH
15646: CALL_OW 235
15650: GO 15624
15652: POP
15653: POP
// end ;
15654: PPOPN 3
15656: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15657: LD_EXP 44
15661: PUSH
15662: LD_EXP 57
15666: AND
15667: IFFALSE 15786
15669: GO 15671
15671: DISABLE
15672: LD_INT 0
15674: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15675: LD_ADDR_VAR 0 1
15679: PUSH
15680: LD_INT 22
15682: PUSH
15683: LD_OWVAR 2
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 21
15694: PUSH
15695: LD_INT 1
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 3
15704: PUSH
15705: LD_INT 23
15707: PUSH
15708: LD_INT 0
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: LIST
15723: PPUSH
15724: CALL_OW 69
15728: PUSH
15729: FOR_IN
15730: IFFALSE 15784
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15732: LD_VAR 0 1
15736: PPUSH
15737: CALL_OW 257
15741: PUSH
15742: LD_INT 1
15744: PUSH
15745: LD_INT 2
15747: PUSH
15748: LD_INT 3
15750: PUSH
15751: LD_INT 4
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: IN
15760: IFFALSE 15782
// SetClass ( un , rand ( 1 , 4 ) ) ;
15762: LD_VAR 0 1
15766: PPUSH
15767: LD_INT 1
15769: PPUSH
15770: LD_INT 4
15772: PPUSH
15773: CALL_OW 12
15777: PPUSH
15778: CALL_OW 336
15782: GO 15729
15784: POP
15785: POP
// end ;
15786: PPOPN 1
15788: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15789: LD_EXP 44
15793: PUSH
15794: LD_EXP 56
15798: AND
15799: IFFALSE 15878
15801: GO 15803
15803: DISABLE
15804: LD_INT 0
15806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15807: LD_ADDR_VAR 0 1
15811: PUSH
15812: LD_INT 22
15814: PUSH
15815: LD_OWVAR 2
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 21
15826: PUSH
15827: LD_INT 3
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PPUSH
15838: CALL_OW 69
15842: ST_TO_ADDR
// if not tmp then
15843: LD_VAR 0 1
15847: NOT
15848: IFFALSE 15852
// exit ;
15850: GO 15878
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15852: LD_VAR 0 1
15856: PUSH
15857: LD_INT 1
15859: PPUSH
15860: LD_VAR 0 1
15864: PPUSH
15865: CALL_OW 12
15869: ARRAY
15870: PPUSH
15871: LD_INT 100
15873: PPUSH
15874: CALL_OW 234
// end ;
15878: PPOPN 1
15880: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15881: LD_EXP 44
15885: PUSH
15886: LD_EXP 58
15890: AND
15891: IFFALSE 15989
15893: GO 15895
15895: DISABLE
15896: LD_INT 0
15898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15899: LD_ADDR_VAR 0 1
15903: PUSH
15904: LD_INT 22
15906: PUSH
15907: LD_OWVAR 2
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 21
15918: PUSH
15919: LD_INT 1
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PPUSH
15930: CALL_OW 69
15934: ST_TO_ADDR
// if not tmp then
15935: LD_VAR 0 1
15939: NOT
15940: IFFALSE 15944
// exit ;
15942: GO 15989
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15944: LD_VAR 0 1
15948: PUSH
15949: LD_INT 1
15951: PPUSH
15952: LD_VAR 0 1
15956: PPUSH
15957: CALL_OW 12
15961: ARRAY
15962: PPUSH
15963: LD_INT 1
15965: PPUSH
15966: LD_INT 4
15968: PPUSH
15969: CALL_OW 12
15973: PPUSH
15974: LD_INT 3000
15976: PPUSH
15977: LD_INT 9000
15979: PPUSH
15980: CALL_OW 12
15984: PPUSH
15985: CALL_OW 492
// end ;
15989: PPOPN 1
15991: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15992: LD_EXP 44
15996: PUSH
15997: LD_EXP 59
16001: AND
16002: IFFALSE 16022
16004: GO 16006
16006: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16007: LD_INT 1
16009: PPUSH
16010: LD_OWVAR 2
16014: PPUSH
16015: LD_INT 0
16017: PPUSH
16018: CALL_OW 324
16022: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16023: LD_EXP 44
16027: PUSH
16028: LD_EXP 60
16032: AND
16033: IFFALSE 16116
16035: GO 16037
16037: DISABLE
16038: LD_INT 0
16040: PPUSH
16041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16042: LD_ADDR_VAR 0 2
16046: PUSH
16047: LD_INT 22
16049: PUSH
16050: LD_OWVAR 2
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: LD_INT 21
16061: PUSH
16062: LD_INT 3
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PPUSH
16073: CALL_OW 69
16077: ST_TO_ADDR
// if not tmp then
16078: LD_VAR 0 2
16082: NOT
16083: IFFALSE 16087
// exit ;
16085: GO 16116
// for i in tmp do
16087: LD_ADDR_VAR 0 1
16091: PUSH
16092: LD_VAR 0 2
16096: PUSH
16097: FOR_IN
16098: IFFALSE 16114
// SetBLevel ( i , 10 ) ;
16100: LD_VAR 0 1
16104: PPUSH
16105: LD_INT 10
16107: PPUSH
16108: CALL_OW 241
16112: GO 16097
16114: POP
16115: POP
// end ;
16116: PPOPN 2
16118: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16119: LD_EXP 44
16123: PUSH
16124: LD_EXP 61
16128: AND
16129: IFFALSE 16240
16131: GO 16133
16133: DISABLE
16134: LD_INT 0
16136: PPUSH
16137: PPUSH
16138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16139: LD_ADDR_VAR 0 3
16143: PUSH
16144: LD_INT 22
16146: PUSH
16147: LD_OWVAR 2
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 25
16158: PUSH
16159: LD_INT 1
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PPUSH
16170: CALL_OW 69
16174: ST_TO_ADDR
// if not tmp then
16175: LD_VAR 0 3
16179: NOT
16180: IFFALSE 16184
// exit ;
16182: GO 16240
// un := tmp [ rand ( 1 , tmp ) ] ;
16184: LD_ADDR_VAR 0 2
16188: PUSH
16189: LD_VAR 0 3
16193: PUSH
16194: LD_INT 1
16196: PPUSH
16197: LD_VAR 0 3
16201: PPUSH
16202: CALL_OW 12
16206: ARRAY
16207: ST_TO_ADDR
// if Crawls ( un ) then
16208: LD_VAR 0 2
16212: PPUSH
16213: CALL_OW 318
16217: IFFALSE 16228
// ComWalk ( un ) ;
16219: LD_VAR 0 2
16223: PPUSH
16224: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16228: LD_VAR 0 2
16232: PPUSH
16233: LD_INT 5
16235: PPUSH
16236: CALL_OW 336
// end ;
16240: PPOPN 3
16242: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16243: LD_EXP 44
16247: PUSH
16248: LD_EXP 62
16252: AND
16253: PUSH
16254: LD_OWVAR 67
16258: PUSH
16259: LD_INT 3
16261: LESS
16262: AND
16263: IFFALSE 16282
16265: GO 16267
16267: DISABLE
// Difficulty := Difficulty + 1 ;
16268: LD_ADDR_OWVAR 67
16272: PUSH
16273: LD_OWVAR 67
16277: PUSH
16278: LD_INT 1
16280: PLUS
16281: ST_TO_ADDR
16282: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16283: LD_EXP 44
16287: PUSH
16288: LD_EXP 63
16292: AND
16293: IFFALSE 16396
16295: GO 16297
16297: DISABLE
16298: LD_INT 0
16300: PPUSH
// begin for i := 1 to 5 do
16301: LD_ADDR_VAR 0 1
16305: PUSH
16306: DOUBLE
16307: LD_INT 1
16309: DEC
16310: ST_TO_ADDR
16311: LD_INT 5
16313: PUSH
16314: FOR_TO
16315: IFFALSE 16394
// begin uc_nation := nation_nature ;
16317: LD_ADDR_OWVAR 21
16321: PUSH
16322: LD_INT 0
16324: ST_TO_ADDR
// uc_side := 0 ;
16325: LD_ADDR_OWVAR 20
16329: PUSH
16330: LD_INT 0
16332: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16333: LD_ADDR_OWVAR 29
16337: PUSH
16338: LD_INT 12
16340: PUSH
16341: LD_INT 12
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: ST_TO_ADDR
// hc_agressivity := 20 ;
16348: LD_ADDR_OWVAR 35
16352: PUSH
16353: LD_INT 20
16355: ST_TO_ADDR
// hc_class := class_tiger ;
16356: LD_ADDR_OWVAR 28
16360: PUSH
16361: LD_INT 14
16363: ST_TO_ADDR
// hc_gallery :=  ;
16364: LD_ADDR_OWVAR 33
16368: PUSH
16369: LD_STRING 
16371: ST_TO_ADDR
// hc_name :=  ;
16372: LD_ADDR_OWVAR 26
16376: PUSH
16377: LD_STRING 
16379: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16380: CALL_OW 44
16384: PPUSH
16385: LD_INT 0
16387: PPUSH
16388: CALL_OW 51
// end ;
16392: GO 16314
16394: POP
16395: POP
// end ;
16396: PPOPN 1
16398: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16399: LD_EXP 44
16403: PUSH
16404: LD_EXP 64
16408: AND
16409: IFFALSE 16418
16411: GO 16413
16413: DISABLE
// StreamSibBomb ;
16414: CALL 16419 0 0
16418: END
// export function StreamSibBomb ; var i , x , y ; begin
16419: LD_INT 0
16421: PPUSH
16422: PPUSH
16423: PPUSH
16424: PPUSH
// result := false ;
16425: LD_ADDR_VAR 0 1
16429: PUSH
16430: LD_INT 0
16432: ST_TO_ADDR
// for i := 1 to 16 do
16433: LD_ADDR_VAR 0 2
16437: PUSH
16438: DOUBLE
16439: LD_INT 1
16441: DEC
16442: ST_TO_ADDR
16443: LD_INT 16
16445: PUSH
16446: FOR_TO
16447: IFFALSE 16646
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16449: LD_ADDR_VAR 0 3
16453: PUSH
16454: LD_INT 10
16456: PUSH
16457: LD_INT 20
16459: PUSH
16460: LD_INT 30
16462: PUSH
16463: LD_INT 40
16465: PUSH
16466: LD_INT 50
16468: PUSH
16469: LD_INT 60
16471: PUSH
16472: LD_INT 70
16474: PUSH
16475: LD_INT 80
16477: PUSH
16478: LD_INT 90
16480: PUSH
16481: LD_INT 100
16483: PUSH
16484: LD_INT 110
16486: PUSH
16487: LD_INT 120
16489: PUSH
16490: LD_INT 130
16492: PUSH
16493: LD_INT 140
16495: PUSH
16496: LD_INT 150
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 1
16518: PPUSH
16519: LD_INT 15
16521: PPUSH
16522: CALL_OW 12
16526: ARRAY
16527: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16528: LD_ADDR_VAR 0 4
16532: PUSH
16533: LD_INT 10
16535: PUSH
16536: LD_INT 20
16538: PUSH
16539: LD_INT 30
16541: PUSH
16542: LD_INT 40
16544: PUSH
16545: LD_INT 50
16547: PUSH
16548: LD_INT 60
16550: PUSH
16551: LD_INT 70
16553: PUSH
16554: LD_INT 80
16556: PUSH
16557: LD_INT 90
16559: PUSH
16560: LD_INT 100
16562: PUSH
16563: LD_INT 110
16565: PUSH
16566: LD_INT 120
16568: PUSH
16569: LD_INT 130
16571: PUSH
16572: LD_INT 140
16574: PUSH
16575: LD_INT 150
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 1
16597: PPUSH
16598: LD_INT 15
16600: PPUSH
16601: CALL_OW 12
16605: ARRAY
16606: ST_TO_ADDR
// if ValidHex ( x , y ) then
16607: LD_VAR 0 3
16611: PPUSH
16612: LD_VAR 0 4
16616: PPUSH
16617: CALL_OW 488
16621: IFFALSE 16644
// begin result := [ x , y ] ;
16623: LD_ADDR_VAR 0 1
16627: PUSH
16628: LD_VAR 0 3
16632: PUSH
16633: LD_VAR 0 4
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: ST_TO_ADDR
// break ;
16642: GO 16646
// end ; end ;
16644: GO 16446
16646: POP
16647: POP
// if result then
16648: LD_VAR 0 1
16652: IFFALSE 16712
// begin ToLua ( playSibBomb() ) ;
16654: LD_STRING playSibBomb()
16656: PPUSH
16657: CALL_OW 559
// wait ( 0 0$14 ) ;
16661: LD_INT 490
16663: PPUSH
16664: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16668: LD_VAR 0 1
16672: PUSH
16673: LD_INT 1
16675: ARRAY
16676: PPUSH
16677: LD_VAR 0 1
16681: PUSH
16682: LD_INT 2
16684: ARRAY
16685: PPUSH
16686: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16690: LD_VAR 0 1
16694: PUSH
16695: LD_INT 1
16697: ARRAY
16698: PPUSH
16699: LD_VAR 0 1
16703: PUSH
16704: LD_INT 2
16706: ARRAY
16707: PPUSH
16708: CALL_OW 429
// end ; end ;
16712: LD_VAR 0 1
16716: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16717: LD_EXP 44
16721: PUSH
16722: LD_EXP 66
16726: AND
16727: IFFALSE 16739
16729: GO 16731
16731: DISABLE
// YouLost (  ) ;
16732: LD_STRING 
16734: PPUSH
16735: CALL_OW 104
16739: END
// every 0 0$1 trigger StreamModeActive and sFog do
16740: LD_EXP 44
16744: PUSH
16745: LD_EXP 65
16749: AND
16750: IFFALSE 16764
16752: GO 16754
16754: DISABLE
// FogOff ( your_side ) ;
16755: LD_OWVAR 2
16759: PPUSH
16760: CALL_OW 344
16764: END
// every 0 0$1 trigger StreamModeActive and sSun do
16765: LD_EXP 44
16769: PUSH
16770: LD_EXP 67
16774: AND
16775: IFFALSE 16803
16777: GO 16779
16779: DISABLE
// begin solar_recharge_percent := 0 ;
16780: LD_ADDR_OWVAR 79
16784: PUSH
16785: LD_INT 0
16787: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16788: LD_INT 10500
16790: PPUSH
16791: CALL_OW 67
// solar_recharge_percent := 100 ;
16795: LD_ADDR_OWVAR 79
16799: PUSH
16800: LD_INT 100
16802: ST_TO_ADDR
// end ;
16803: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16804: LD_EXP 44
16808: PUSH
16809: LD_EXP 68
16813: AND
16814: IFFALSE 17053
16816: GO 16818
16818: DISABLE
16819: LD_INT 0
16821: PPUSH
16822: PPUSH
16823: PPUSH
// begin tmp := [ ] ;
16824: LD_ADDR_VAR 0 3
16828: PUSH
16829: EMPTY
16830: ST_TO_ADDR
// for i := 1 to 6 do
16831: LD_ADDR_VAR 0 1
16835: PUSH
16836: DOUBLE
16837: LD_INT 1
16839: DEC
16840: ST_TO_ADDR
16841: LD_INT 6
16843: PUSH
16844: FOR_TO
16845: IFFALSE 16950
// begin uc_nation := nation_nature ;
16847: LD_ADDR_OWVAR 21
16851: PUSH
16852: LD_INT 0
16854: ST_TO_ADDR
// uc_side := 0 ;
16855: LD_ADDR_OWVAR 20
16859: PUSH
16860: LD_INT 0
16862: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16863: LD_ADDR_OWVAR 29
16867: PUSH
16868: LD_INT 12
16870: PUSH
16871: LD_INT 12
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: ST_TO_ADDR
// hc_agressivity := 20 ;
16878: LD_ADDR_OWVAR 35
16882: PUSH
16883: LD_INT 20
16885: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16886: LD_ADDR_OWVAR 28
16890: PUSH
16891: LD_INT 17
16893: ST_TO_ADDR
// hc_gallery :=  ;
16894: LD_ADDR_OWVAR 33
16898: PUSH
16899: LD_STRING 
16901: ST_TO_ADDR
// hc_name :=  ;
16902: LD_ADDR_OWVAR 26
16906: PUSH
16907: LD_STRING 
16909: ST_TO_ADDR
// un := CreateHuman ;
16910: LD_ADDR_VAR 0 2
16914: PUSH
16915: CALL_OW 44
16919: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16920: LD_VAR 0 2
16924: PPUSH
16925: LD_INT 1
16927: PPUSH
16928: CALL_OW 51
// tmp := tmp ^ un ;
16932: LD_ADDR_VAR 0 3
16936: PUSH
16937: LD_VAR 0 3
16941: PUSH
16942: LD_VAR 0 2
16946: ADD
16947: ST_TO_ADDR
// end ;
16948: GO 16844
16950: POP
16951: POP
// repeat wait ( 0 0$1 ) ;
16952: LD_INT 35
16954: PPUSH
16955: CALL_OW 67
// for un in tmp do
16959: LD_ADDR_VAR 0 2
16963: PUSH
16964: LD_VAR 0 3
16968: PUSH
16969: FOR_IN
16970: IFFALSE 17044
// begin if IsDead ( un ) then
16972: LD_VAR 0 2
16976: PPUSH
16977: CALL_OW 301
16981: IFFALSE 17001
// begin tmp := tmp diff un ;
16983: LD_ADDR_VAR 0 3
16987: PUSH
16988: LD_VAR 0 3
16992: PUSH
16993: LD_VAR 0 2
16997: DIFF
16998: ST_TO_ADDR
// continue ;
16999: GO 16969
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17001: LD_VAR 0 2
17005: PPUSH
17006: LD_INT 3
17008: PUSH
17009: LD_INT 22
17011: PUSH
17012: LD_INT 0
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PPUSH
17023: CALL_OW 69
17027: PPUSH
17028: LD_VAR 0 2
17032: PPUSH
17033: CALL_OW 74
17037: PPUSH
17038: CALL_OW 115
// end ;
17042: GO 16969
17044: POP
17045: POP
// until not tmp ;
17046: LD_VAR 0 3
17050: NOT
17051: IFFALSE 16952
// end ;
17053: PPOPN 3
17055: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17056: LD_EXP 44
17060: PUSH
17061: LD_EXP 69
17065: AND
17066: IFFALSE 17120
17068: GO 17070
17070: DISABLE
// begin ToLua ( displayTroll(); ) ;
17071: LD_STRING displayTroll();
17073: PPUSH
17074: CALL_OW 559
// wait ( 3 3$00 ) ;
17078: LD_INT 6300
17080: PPUSH
17081: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17085: LD_STRING hideTroll();
17087: PPUSH
17088: CALL_OW 559
// wait ( 1 1$00 ) ;
17092: LD_INT 2100
17094: PPUSH
17095: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17099: LD_STRING displayTroll();
17101: PPUSH
17102: CALL_OW 559
// wait ( 1 1$00 ) ;
17106: LD_INT 2100
17108: PPUSH
17109: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17113: LD_STRING hideTroll();
17115: PPUSH
17116: CALL_OW 559
// end ;
17120: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17121: LD_EXP 44
17125: PUSH
17126: LD_EXP 70
17130: AND
17131: IFFALSE 17194
17133: GO 17135
17135: DISABLE
17136: LD_INT 0
17138: PPUSH
// begin p := 0 ;
17139: LD_ADDR_VAR 0 1
17143: PUSH
17144: LD_INT 0
17146: ST_TO_ADDR
// repeat game_speed := 1 ;
17147: LD_ADDR_OWVAR 65
17151: PUSH
17152: LD_INT 1
17154: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17155: LD_INT 35
17157: PPUSH
17158: CALL_OW 67
// p := p + 1 ;
17162: LD_ADDR_VAR 0 1
17166: PUSH
17167: LD_VAR 0 1
17171: PUSH
17172: LD_INT 1
17174: PLUS
17175: ST_TO_ADDR
// until p >= 60 ;
17176: LD_VAR 0 1
17180: PUSH
17181: LD_INT 60
17183: GREATEREQUAL
17184: IFFALSE 17147
// game_speed := 4 ;
17186: LD_ADDR_OWVAR 65
17190: PUSH
17191: LD_INT 4
17193: ST_TO_ADDR
// end ;
17194: PPOPN 1
17196: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17197: LD_EXP 44
17201: PUSH
17202: LD_EXP 71
17206: AND
17207: IFFALSE 17353
17209: GO 17211
17211: DISABLE
17212: LD_INT 0
17214: PPUSH
17215: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17216: LD_ADDR_VAR 0 1
17220: PUSH
17221: LD_INT 22
17223: PUSH
17224: LD_OWVAR 2
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 2
17235: PUSH
17236: LD_INT 30
17238: PUSH
17239: LD_INT 0
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 30
17248: PUSH
17249: LD_INT 1
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: LIST
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PPUSH
17265: CALL_OW 69
17269: ST_TO_ADDR
// if not depot then
17270: LD_VAR 0 1
17274: NOT
17275: IFFALSE 17279
// exit ;
17277: GO 17353
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17279: LD_ADDR_VAR 0 2
17283: PUSH
17284: LD_VAR 0 1
17288: PUSH
17289: LD_INT 1
17291: PPUSH
17292: LD_VAR 0 1
17296: PPUSH
17297: CALL_OW 12
17301: ARRAY
17302: PPUSH
17303: CALL_OW 274
17307: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17308: LD_VAR 0 2
17312: PPUSH
17313: LD_INT 1
17315: PPUSH
17316: LD_INT 0
17318: PPUSH
17319: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17323: LD_VAR 0 2
17327: PPUSH
17328: LD_INT 2
17330: PPUSH
17331: LD_INT 0
17333: PPUSH
17334: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17338: LD_VAR 0 2
17342: PPUSH
17343: LD_INT 3
17345: PPUSH
17346: LD_INT 0
17348: PPUSH
17349: CALL_OW 277
// end ;
17353: PPOPN 2
17355: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17356: LD_EXP 44
17360: PUSH
17361: LD_EXP 72
17365: AND
17366: IFFALSE 17463
17368: GO 17370
17370: DISABLE
17371: LD_INT 0
17373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17374: LD_ADDR_VAR 0 1
17378: PUSH
17379: LD_INT 22
17381: PUSH
17382: LD_OWVAR 2
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 21
17393: PUSH
17394: LD_INT 1
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 3
17403: PUSH
17404: LD_INT 23
17406: PUSH
17407: LD_INT 0
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: LIST
17422: PPUSH
17423: CALL_OW 69
17427: ST_TO_ADDR
// if not tmp then
17428: LD_VAR 0 1
17432: NOT
17433: IFFALSE 17437
// exit ;
17435: GO 17463
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17437: LD_VAR 0 1
17441: PUSH
17442: LD_INT 1
17444: PPUSH
17445: LD_VAR 0 1
17449: PPUSH
17450: CALL_OW 12
17454: ARRAY
17455: PPUSH
17456: LD_INT 200
17458: PPUSH
17459: CALL_OW 234
// end ;
17463: PPOPN 1
17465: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17466: LD_EXP 44
17470: PUSH
17471: LD_EXP 73
17475: AND
17476: IFFALSE 17555
17478: GO 17480
17480: DISABLE
17481: LD_INT 0
17483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17484: LD_ADDR_VAR 0 1
17488: PUSH
17489: LD_INT 22
17491: PUSH
17492: LD_OWVAR 2
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 21
17503: PUSH
17504: LD_INT 2
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PPUSH
17515: CALL_OW 69
17519: ST_TO_ADDR
// if not tmp then
17520: LD_VAR 0 1
17524: NOT
17525: IFFALSE 17529
// exit ;
17527: GO 17555
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17529: LD_VAR 0 1
17533: PUSH
17534: LD_INT 1
17536: PPUSH
17537: LD_VAR 0 1
17541: PPUSH
17542: CALL_OW 12
17546: ARRAY
17547: PPUSH
17548: LD_INT 60
17550: PPUSH
17551: CALL_OW 234
// end ;
17555: PPOPN 1
17557: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17558: LD_EXP 44
17562: PUSH
17563: LD_EXP 74
17567: AND
17568: IFFALSE 17667
17570: GO 17572
17572: DISABLE
17573: LD_INT 0
17575: PPUSH
17576: PPUSH
// begin enable ;
17577: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17578: LD_ADDR_VAR 0 1
17582: PUSH
17583: LD_INT 22
17585: PUSH
17586: LD_OWVAR 2
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 61
17597: PUSH
17598: EMPTY
17599: LIST
17600: PUSH
17601: LD_INT 33
17603: PUSH
17604: LD_INT 2
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: PPUSH
17616: CALL_OW 69
17620: ST_TO_ADDR
// if not tmp then
17621: LD_VAR 0 1
17625: NOT
17626: IFFALSE 17630
// exit ;
17628: GO 17667
// for i in tmp do
17630: LD_ADDR_VAR 0 2
17634: PUSH
17635: LD_VAR 0 1
17639: PUSH
17640: FOR_IN
17641: IFFALSE 17665
// if IsControledBy ( i ) then
17643: LD_VAR 0 2
17647: PPUSH
17648: CALL_OW 312
17652: IFFALSE 17663
// ComUnlink ( i ) ;
17654: LD_VAR 0 2
17658: PPUSH
17659: CALL_OW 136
17663: GO 17640
17665: POP
17666: POP
// end ;
17667: PPOPN 2
17669: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17670: LD_EXP 44
17674: PUSH
17675: LD_EXP 75
17679: AND
17680: IFFALSE 17820
17682: GO 17684
17684: DISABLE
17685: LD_INT 0
17687: PPUSH
17688: PPUSH
// begin ToLua ( displayPowell(); ) ;
17689: LD_STRING displayPowell();
17691: PPUSH
17692: CALL_OW 559
// uc_side := 0 ;
17696: LD_ADDR_OWVAR 20
17700: PUSH
17701: LD_INT 0
17703: ST_TO_ADDR
// uc_nation := 2 ;
17704: LD_ADDR_OWVAR 21
17708: PUSH
17709: LD_INT 2
17711: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17712: LD_ADDR_OWVAR 37
17716: PUSH
17717: LD_INT 14
17719: ST_TO_ADDR
// vc_engine := engine_siberite ;
17720: LD_ADDR_OWVAR 39
17724: PUSH
17725: LD_INT 3
17727: ST_TO_ADDR
// vc_control := control_apeman ;
17728: LD_ADDR_OWVAR 38
17732: PUSH
17733: LD_INT 5
17735: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17736: LD_ADDR_OWVAR 40
17740: PUSH
17741: LD_INT 29
17743: ST_TO_ADDR
// un := CreateVehicle ;
17744: LD_ADDR_VAR 0 2
17748: PUSH
17749: CALL_OW 45
17753: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17754: LD_VAR 0 2
17758: PPUSH
17759: LD_INT 1
17761: PPUSH
17762: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17766: LD_INT 35
17768: PPUSH
17769: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17773: LD_VAR 0 2
17777: PPUSH
17778: LD_INT 22
17780: PUSH
17781: LD_OWVAR 2
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PPUSH
17790: CALL_OW 69
17794: PPUSH
17795: LD_VAR 0 2
17799: PPUSH
17800: CALL_OW 74
17804: PPUSH
17805: CALL_OW 115
// until IsDead ( un ) ;
17809: LD_VAR 0 2
17813: PPUSH
17814: CALL_OW 301
17818: IFFALSE 17766
// end ;
17820: PPOPN 2
17822: END
// every 0 0$1 trigger StreamModeActive and sStu do
17823: LD_EXP 44
17827: PUSH
17828: LD_EXP 83
17832: AND
17833: IFFALSE 17849
17835: GO 17837
17837: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17838: LD_STRING displayStucuk();
17840: PPUSH
17841: CALL_OW 559
// ResetFog ;
17845: CALL_OW 335
// end ;
17849: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17850: LD_EXP 44
17854: PUSH
17855: LD_EXP 76
17859: AND
17860: IFFALSE 18001
17862: GO 17864
17864: DISABLE
17865: LD_INT 0
17867: PPUSH
17868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17869: LD_ADDR_VAR 0 2
17873: PUSH
17874: LD_INT 22
17876: PUSH
17877: LD_OWVAR 2
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 21
17888: PUSH
17889: LD_INT 1
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PPUSH
17900: CALL_OW 69
17904: ST_TO_ADDR
// if not tmp then
17905: LD_VAR 0 2
17909: NOT
17910: IFFALSE 17914
// exit ;
17912: GO 18001
// un := tmp [ rand ( 1 , tmp ) ] ;
17914: LD_ADDR_VAR 0 1
17918: PUSH
17919: LD_VAR 0 2
17923: PUSH
17924: LD_INT 1
17926: PPUSH
17927: LD_VAR 0 2
17931: PPUSH
17932: CALL_OW 12
17936: ARRAY
17937: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17938: LD_VAR 0 1
17942: PPUSH
17943: LD_INT 0
17945: PPUSH
17946: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17950: LD_VAR 0 1
17954: PPUSH
17955: LD_OWVAR 3
17959: PUSH
17960: LD_VAR 0 1
17964: DIFF
17965: PPUSH
17966: LD_VAR 0 1
17970: PPUSH
17971: CALL_OW 74
17975: PPUSH
17976: CALL_OW 115
// wait ( 0 0$20 ) ;
17980: LD_INT 700
17982: PPUSH
17983: CALL_OW 67
// SetSide ( un , your_side ) ;
17987: LD_VAR 0 1
17991: PPUSH
17992: LD_OWVAR 2
17996: PPUSH
17997: CALL_OW 235
// end ;
18001: PPOPN 2
18003: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18004: LD_EXP 44
18008: PUSH
18009: LD_EXP 77
18013: AND
18014: IFFALSE 18120
18016: GO 18018
18018: DISABLE
18019: LD_INT 0
18021: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18022: LD_ADDR_VAR 0 1
18026: PUSH
18027: LD_INT 22
18029: PUSH
18030: LD_OWVAR 2
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 2
18041: PUSH
18042: LD_INT 30
18044: PUSH
18045: LD_INT 0
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 30
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: LIST
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PPUSH
18071: CALL_OW 69
18075: ST_TO_ADDR
// if not depot then
18076: LD_VAR 0 1
18080: NOT
18081: IFFALSE 18085
// exit ;
18083: GO 18120
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18085: LD_VAR 0 1
18089: PUSH
18090: LD_INT 1
18092: ARRAY
18093: PPUSH
18094: CALL_OW 250
18098: PPUSH
18099: LD_VAR 0 1
18103: PUSH
18104: LD_INT 1
18106: ARRAY
18107: PPUSH
18108: CALL_OW 251
18112: PPUSH
18113: LD_INT 70
18115: PPUSH
18116: CALL_OW 495
// end ;
18120: PPOPN 1
18122: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18123: LD_EXP 44
18127: PUSH
18128: LD_EXP 78
18132: AND
18133: IFFALSE 18344
18135: GO 18137
18137: DISABLE
18138: LD_INT 0
18140: PPUSH
18141: PPUSH
18142: PPUSH
18143: PPUSH
18144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18145: LD_ADDR_VAR 0 5
18149: PUSH
18150: LD_INT 22
18152: PUSH
18153: LD_OWVAR 2
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 21
18164: PUSH
18165: LD_INT 1
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PPUSH
18176: CALL_OW 69
18180: ST_TO_ADDR
// if not tmp then
18181: LD_VAR 0 5
18185: NOT
18186: IFFALSE 18190
// exit ;
18188: GO 18344
// for i in tmp do
18190: LD_ADDR_VAR 0 1
18194: PUSH
18195: LD_VAR 0 5
18199: PUSH
18200: FOR_IN
18201: IFFALSE 18342
// begin d := rand ( 0 , 5 ) ;
18203: LD_ADDR_VAR 0 4
18207: PUSH
18208: LD_INT 0
18210: PPUSH
18211: LD_INT 5
18213: PPUSH
18214: CALL_OW 12
18218: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18219: LD_ADDR_VAR 0 2
18223: PUSH
18224: LD_VAR 0 1
18228: PPUSH
18229: CALL_OW 250
18233: PPUSH
18234: LD_VAR 0 4
18238: PPUSH
18239: LD_INT 3
18241: PPUSH
18242: LD_INT 12
18244: PPUSH
18245: CALL_OW 12
18249: PPUSH
18250: CALL_OW 272
18254: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18255: LD_ADDR_VAR 0 3
18259: PUSH
18260: LD_VAR 0 1
18264: PPUSH
18265: CALL_OW 251
18269: PPUSH
18270: LD_VAR 0 4
18274: PPUSH
18275: LD_INT 3
18277: PPUSH
18278: LD_INT 12
18280: PPUSH
18281: CALL_OW 12
18285: PPUSH
18286: CALL_OW 273
18290: ST_TO_ADDR
// if ValidHex ( x , y ) then
18291: LD_VAR 0 2
18295: PPUSH
18296: LD_VAR 0 3
18300: PPUSH
18301: CALL_OW 488
18305: IFFALSE 18340
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18307: LD_VAR 0 1
18311: PPUSH
18312: LD_VAR 0 2
18316: PPUSH
18317: LD_VAR 0 3
18321: PPUSH
18322: LD_INT 3
18324: PPUSH
18325: LD_INT 6
18327: PPUSH
18328: CALL_OW 12
18332: PPUSH
18333: LD_INT 1
18335: PPUSH
18336: CALL_OW 483
// end ;
18340: GO 18200
18342: POP
18343: POP
// end ;
18344: PPOPN 5
18346: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18347: LD_EXP 44
18351: PUSH
18352: LD_EXP 79
18356: AND
18357: IFFALSE 18451
18359: GO 18361
18361: DISABLE
18362: LD_INT 0
18364: PPUSH
18365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18366: LD_ADDR_VAR 0 2
18370: PUSH
18371: LD_INT 22
18373: PUSH
18374: LD_OWVAR 2
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 32
18385: PUSH
18386: LD_INT 1
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 21
18395: PUSH
18396: LD_INT 2
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: LIST
18407: PPUSH
18408: CALL_OW 69
18412: ST_TO_ADDR
// if not tmp then
18413: LD_VAR 0 2
18417: NOT
18418: IFFALSE 18422
// exit ;
18420: GO 18451
// for i in tmp do
18422: LD_ADDR_VAR 0 1
18426: PUSH
18427: LD_VAR 0 2
18431: PUSH
18432: FOR_IN
18433: IFFALSE 18449
// SetFuel ( i , 0 ) ;
18435: LD_VAR 0 1
18439: PPUSH
18440: LD_INT 0
18442: PPUSH
18443: CALL_OW 240
18447: GO 18432
18449: POP
18450: POP
// end ;
18451: PPOPN 2
18453: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18454: LD_EXP 44
18458: PUSH
18459: LD_EXP 80
18463: AND
18464: IFFALSE 18530
18466: GO 18468
18468: DISABLE
18469: LD_INT 0
18471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18472: LD_ADDR_VAR 0 1
18476: PUSH
18477: LD_INT 22
18479: PUSH
18480: LD_OWVAR 2
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 30
18491: PUSH
18492: LD_INT 29
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 69
18507: ST_TO_ADDR
// if not tmp then
18508: LD_VAR 0 1
18512: NOT
18513: IFFALSE 18517
// exit ;
18515: GO 18530
// DestroyUnit ( tmp [ 1 ] ) ;
18517: LD_VAR 0 1
18521: PUSH
18522: LD_INT 1
18524: ARRAY
18525: PPUSH
18526: CALL_OW 65
// end ;
18530: PPOPN 1
18532: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18533: LD_EXP 44
18537: PUSH
18538: LD_EXP 82
18542: AND
18543: IFFALSE 18672
18545: GO 18547
18547: DISABLE
18548: LD_INT 0
18550: PPUSH
// begin uc_side := 0 ;
18551: LD_ADDR_OWVAR 20
18555: PUSH
18556: LD_INT 0
18558: ST_TO_ADDR
// uc_nation := nation_arabian ;
18559: LD_ADDR_OWVAR 21
18563: PUSH
18564: LD_INT 2
18566: ST_TO_ADDR
// hc_gallery :=  ;
18567: LD_ADDR_OWVAR 33
18571: PUSH
18572: LD_STRING 
18574: ST_TO_ADDR
// hc_name :=  ;
18575: LD_ADDR_OWVAR 26
18579: PUSH
18580: LD_STRING 
18582: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18583: LD_INT 1
18585: PPUSH
18586: LD_INT 11
18588: PPUSH
18589: LD_INT 10
18591: PPUSH
18592: CALL_OW 380
// un := CreateHuman ;
18596: LD_ADDR_VAR 0 1
18600: PUSH
18601: CALL_OW 44
18605: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18606: LD_VAR 0 1
18610: PPUSH
18611: LD_INT 1
18613: PPUSH
18614: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18618: LD_INT 35
18620: PPUSH
18621: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18625: LD_VAR 0 1
18629: PPUSH
18630: LD_INT 22
18632: PUSH
18633: LD_OWVAR 2
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PPUSH
18642: CALL_OW 69
18646: PPUSH
18647: LD_VAR 0 1
18651: PPUSH
18652: CALL_OW 74
18656: PPUSH
18657: CALL_OW 115
// until IsDead ( un ) ;
18661: LD_VAR 0 1
18665: PPUSH
18666: CALL_OW 301
18670: IFFALSE 18618
// end ;
18672: PPOPN 1
18674: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18675: LD_EXP 44
18679: PUSH
18680: LD_EXP 84
18684: AND
18685: IFFALSE 18697
18687: GO 18689
18689: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18690: LD_STRING earthquake(getX(game), 0, 32)
18692: PPUSH
18693: CALL_OW 559
18697: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18698: LD_EXP 44
18702: PUSH
18703: LD_EXP 85
18707: AND
18708: IFFALSE 18799
18710: GO 18712
18712: DISABLE
18713: LD_INT 0
18715: PPUSH
// begin enable ;
18716: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18717: LD_ADDR_VAR 0 1
18721: PUSH
18722: LD_INT 22
18724: PUSH
18725: LD_OWVAR 2
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 21
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 33
18746: PUSH
18747: LD_INT 3
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: LIST
18758: PPUSH
18759: CALL_OW 69
18763: ST_TO_ADDR
// if not tmp then
18764: LD_VAR 0 1
18768: NOT
18769: IFFALSE 18773
// exit ;
18771: GO 18799
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18773: LD_VAR 0 1
18777: PUSH
18778: LD_INT 1
18780: PPUSH
18781: LD_VAR 0 1
18785: PPUSH
18786: CALL_OW 12
18790: ARRAY
18791: PPUSH
18792: LD_INT 1
18794: PPUSH
18795: CALL_OW 234
// end ;
18799: PPOPN 1
18801: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18802: LD_EXP 44
18806: PUSH
18807: LD_EXP 86
18811: AND
18812: IFFALSE 18953
18814: GO 18816
18816: DISABLE
18817: LD_INT 0
18819: PPUSH
18820: PPUSH
18821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18822: LD_ADDR_VAR 0 3
18826: PUSH
18827: LD_INT 22
18829: PUSH
18830: LD_OWVAR 2
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 25
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PPUSH
18853: CALL_OW 69
18857: ST_TO_ADDR
// if not tmp then
18858: LD_VAR 0 3
18862: NOT
18863: IFFALSE 18867
// exit ;
18865: GO 18953
// un := tmp [ rand ( 1 , tmp ) ] ;
18867: LD_ADDR_VAR 0 2
18871: PUSH
18872: LD_VAR 0 3
18876: PUSH
18877: LD_INT 1
18879: PPUSH
18880: LD_VAR 0 3
18884: PPUSH
18885: CALL_OW 12
18889: ARRAY
18890: ST_TO_ADDR
// if Crawls ( un ) then
18891: LD_VAR 0 2
18895: PPUSH
18896: CALL_OW 318
18900: IFFALSE 18911
// ComWalk ( un ) ;
18902: LD_VAR 0 2
18906: PPUSH
18907: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18911: LD_VAR 0 2
18915: PPUSH
18916: LD_INT 9
18918: PPUSH
18919: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18923: LD_INT 28
18925: PPUSH
18926: LD_OWVAR 2
18930: PPUSH
18931: LD_INT 2
18933: PPUSH
18934: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18938: LD_INT 29
18940: PPUSH
18941: LD_OWVAR 2
18945: PPUSH
18946: LD_INT 2
18948: PPUSH
18949: CALL_OW 322
// end ;
18953: PPOPN 3
18955: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18956: LD_EXP 44
18960: PUSH
18961: LD_EXP 87
18965: AND
18966: IFFALSE 19077
18968: GO 18970
18970: DISABLE
18971: LD_INT 0
18973: PPUSH
18974: PPUSH
18975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18976: LD_ADDR_VAR 0 3
18980: PUSH
18981: LD_INT 22
18983: PUSH
18984: LD_OWVAR 2
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 25
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PPUSH
19007: CALL_OW 69
19011: ST_TO_ADDR
// if not tmp then
19012: LD_VAR 0 3
19016: NOT
19017: IFFALSE 19021
// exit ;
19019: GO 19077
// un := tmp [ rand ( 1 , tmp ) ] ;
19021: LD_ADDR_VAR 0 2
19025: PUSH
19026: LD_VAR 0 3
19030: PUSH
19031: LD_INT 1
19033: PPUSH
19034: LD_VAR 0 3
19038: PPUSH
19039: CALL_OW 12
19043: ARRAY
19044: ST_TO_ADDR
// if Crawls ( un ) then
19045: LD_VAR 0 2
19049: PPUSH
19050: CALL_OW 318
19054: IFFALSE 19065
// ComWalk ( un ) ;
19056: LD_VAR 0 2
19060: PPUSH
19061: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19065: LD_VAR 0 2
19069: PPUSH
19070: LD_INT 8
19072: PPUSH
19073: CALL_OW 336
// end ;
19077: PPOPN 3
19079: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19080: LD_EXP 44
19084: PUSH
19085: LD_EXP 88
19089: AND
19090: IFFALSE 19234
19092: GO 19094
19094: DISABLE
19095: LD_INT 0
19097: PPUSH
19098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19099: LD_ADDR_VAR 0 2
19103: PUSH
19104: LD_INT 22
19106: PUSH
19107: LD_OWVAR 2
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 21
19118: PUSH
19119: LD_INT 2
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 2
19128: PUSH
19129: LD_INT 34
19131: PUSH
19132: LD_INT 12
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 34
19141: PUSH
19142: LD_INT 51
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 34
19151: PUSH
19152: LD_INT 32
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: PPUSH
19170: CALL_OW 69
19174: ST_TO_ADDR
// if not tmp then
19175: LD_VAR 0 2
19179: NOT
19180: IFFALSE 19184
// exit ;
19182: GO 19234
// for i in tmp do
19184: LD_ADDR_VAR 0 1
19188: PUSH
19189: LD_VAR 0 2
19193: PUSH
19194: FOR_IN
19195: IFFALSE 19232
// if GetCargo ( i , mat_artifact ) = 0 then
19197: LD_VAR 0 1
19201: PPUSH
19202: LD_INT 4
19204: PPUSH
19205: CALL_OW 289
19209: PUSH
19210: LD_INT 0
19212: EQUAL
19213: IFFALSE 19230
// SetCargo ( i , mat_siberit , 100 ) ;
19215: LD_VAR 0 1
19219: PPUSH
19220: LD_INT 3
19222: PPUSH
19223: LD_INT 100
19225: PPUSH
19226: CALL_OW 290
19230: GO 19194
19232: POP
19233: POP
// end ;
19234: PPOPN 2
19236: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19237: LD_EXP 44
19241: PUSH
19242: LD_EXP 89
19246: AND
19247: IFFALSE 19430
19249: GO 19251
19251: DISABLE
19252: LD_INT 0
19254: PPUSH
19255: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19256: LD_ADDR_VAR 0 2
19260: PUSH
19261: LD_INT 22
19263: PUSH
19264: LD_OWVAR 2
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PPUSH
19273: CALL_OW 69
19277: ST_TO_ADDR
// if not tmp then
19278: LD_VAR 0 2
19282: NOT
19283: IFFALSE 19287
// exit ;
19285: GO 19430
// for i := 1 to 2 do
19287: LD_ADDR_VAR 0 1
19291: PUSH
19292: DOUBLE
19293: LD_INT 1
19295: DEC
19296: ST_TO_ADDR
19297: LD_INT 2
19299: PUSH
19300: FOR_TO
19301: IFFALSE 19428
// begin uc_side := your_side ;
19303: LD_ADDR_OWVAR 20
19307: PUSH
19308: LD_OWVAR 2
19312: ST_TO_ADDR
// uc_nation := nation_american ;
19313: LD_ADDR_OWVAR 21
19317: PUSH
19318: LD_INT 1
19320: ST_TO_ADDR
// vc_chassis := us_morphling ;
19321: LD_ADDR_OWVAR 37
19325: PUSH
19326: LD_INT 5
19328: ST_TO_ADDR
// vc_engine := engine_siberite ;
19329: LD_ADDR_OWVAR 39
19333: PUSH
19334: LD_INT 3
19336: ST_TO_ADDR
// vc_control := control_computer ;
19337: LD_ADDR_OWVAR 38
19341: PUSH
19342: LD_INT 3
19344: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19345: LD_ADDR_OWVAR 40
19349: PUSH
19350: LD_INT 10
19352: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19353: LD_VAR 0 2
19357: PUSH
19358: LD_INT 1
19360: ARRAY
19361: PPUSH
19362: CALL_OW 310
19366: NOT
19367: IFFALSE 19414
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19369: CALL_OW 45
19373: PPUSH
19374: LD_VAR 0 2
19378: PUSH
19379: LD_INT 1
19381: ARRAY
19382: PPUSH
19383: CALL_OW 250
19387: PPUSH
19388: LD_VAR 0 2
19392: PUSH
19393: LD_INT 1
19395: ARRAY
19396: PPUSH
19397: CALL_OW 251
19401: PPUSH
19402: LD_INT 12
19404: PPUSH
19405: LD_INT 1
19407: PPUSH
19408: CALL_OW 50
19412: GO 19426
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19414: CALL_OW 45
19418: PPUSH
19419: LD_INT 1
19421: PPUSH
19422: CALL_OW 51
// end ;
19426: GO 19300
19428: POP
19429: POP
// end ;
19430: PPOPN 2
19432: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19433: LD_EXP 44
19437: PUSH
19438: LD_EXP 90
19442: AND
19443: IFFALSE 19665
19445: GO 19447
19447: DISABLE
19448: LD_INT 0
19450: PPUSH
19451: PPUSH
19452: PPUSH
19453: PPUSH
19454: PPUSH
19455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19456: LD_ADDR_VAR 0 6
19460: PUSH
19461: LD_INT 22
19463: PUSH
19464: LD_OWVAR 2
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 21
19475: PUSH
19476: LD_INT 1
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 3
19485: PUSH
19486: LD_INT 23
19488: PUSH
19489: LD_INT 0
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: LIST
19504: PPUSH
19505: CALL_OW 69
19509: ST_TO_ADDR
// if not tmp then
19510: LD_VAR 0 6
19514: NOT
19515: IFFALSE 19519
// exit ;
19517: GO 19665
// s1 := rand ( 1 , 4 ) ;
19519: LD_ADDR_VAR 0 2
19523: PUSH
19524: LD_INT 1
19526: PPUSH
19527: LD_INT 4
19529: PPUSH
19530: CALL_OW 12
19534: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19535: LD_ADDR_VAR 0 4
19539: PUSH
19540: LD_VAR 0 6
19544: PUSH
19545: LD_INT 1
19547: ARRAY
19548: PPUSH
19549: LD_VAR 0 2
19553: PPUSH
19554: CALL_OW 259
19558: ST_TO_ADDR
// if s1 = 1 then
19559: LD_VAR 0 2
19563: PUSH
19564: LD_INT 1
19566: EQUAL
19567: IFFALSE 19587
// s2 := rand ( 2 , 4 ) else
19569: LD_ADDR_VAR 0 3
19573: PUSH
19574: LD_INT 2
19576: PPUSH
19577: LD_INT 4
19579: PPUSH
19580: CALL_OW 12
19584: ST_TO_ADDR
19585: GO 19595
// s2 := 1 ;
19587: LD_ADDR_VAR 0 3
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19595: LD_ADDR_VAR 0 5
19599: PUSH
19600: LD_VAR 0 6
19604: PUSH
19605: LD_INT 1
19607: ARRAY
19608: PPUSH
19609: LD_VAR 0 3
19613: PPUSH
19614: CALL_OW 259
19618: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19619: LD_VAR 0 6
19623: PUSH
19624: LD_INT 1
19626: ARRAY
19627: PPUSH
19628: LD_VAR 0 2
19632: PPUSH
19633: LD_VAR 0 5
19637: PPUSH
19638: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19642: LD_VAR 0 6
19646: PUSH
19647: LD_INT 1
19649: ARRAY
19650: PPUSH
19651: LD_VAR 0 3
19655: PPUSH
19656: LD_VAR 0 4
19660: PPUSH
19661: CALL_OW 237
// end ;
19665: PPOPN 6
19667: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19668: LD_EXP 44
19672: PUSH
19673: LD_EXP 91
19677: AND
19678: IFFALSE 19757
19680: GO 19682
19682: DISABLE
19683: LD_INT 0
19685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19686: LD_ADDR_VAR 0 1
19690: PUSH
19691: LD_INT 22
19693: PUSH
19694: LD_OWVAR 2
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 30
19705: PUSH
19706: LD_INT 3
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PPUSH
19717: CALL_OW 69
19721: ST_TO_ADDR
// if not tmp then
19722: LD_VAR 0 1
19726: NOT
19727: IFFALSE 19731
// exit ;
19729: GO 19757
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19731: LD_VAR 0 1
19735: PUSH
19736: LD_INT 1
19738: PPUSH
19739: LD_VAR 0 1
19743: PPUSH
19744: CALL_OW 12
19748: ARRAY
19749: PPUSH
19750: LD_INT 1
19752: PPUSH
19753: CALL_OW 234
// end ;
19757: PPOPN 1
19759: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19760: LD_EXP 44
19764: PUSH
19765: LD_EXP 92
19769: AND
19770: IFFALSE 19882
19772: GO 19774
19774: DISABLE
19775: LD_INT 0
19777: PPUSH
19778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19779: LD_ADDR_VAR 0 2
19783: PUSH
19784: LD_INT 22
19786: PUSH
19787: LD_OWVAR 2
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: LD_INT 30
19801: PUSH
19802: LD_INT 27
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 30
19811: PUSH
19812: LD_INT 26
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 30
19821: PUSH
19822: LD_INT 28
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PPUSH
19839: CALL_OW 69
19843: ST_TO_ADDR
// if not tmp then
19844: LD_VAR 0 2
19848: NOT
19849: IFFALSE 19853
// exit ;
19851: GO 19882
// for i in tmp do
19853: LD_ADDR_VAR 0 1
19857: PUSH
19858: LD_VAR 0 2
19862: PUSH
19863: FOR_IN
19864: IFFALSE 19880
// SetLives ( i , 1 ) ;
19866: LD_VAR 0 1
19870: PPUSH
19871: LD_INT 1
19873: PPUSH
19874: CALL_OW 234
19878: GO 19863
19880: POP
19881: POP
// end ;
19882: PPOPN 2
19884: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19885: LD_EXP 44
19889: PUSH
19890: LD_EXP 93
19894: AND
19895: IFFALSE 20169
19897: GO 19899
19899: DISABLE
19900: LD_INT 0
19902: PPUSH
19903: PPUSH
19904: PPUSH
// begin i := rand ( 1 , 7 ) ;
19905: LD_ADDR_VAR 0 1
19909: PUSH
19910: LD_INT 1
19912: PPUSH
19913: LD_INT 7
19915: PPUSH
19916: CALL_OW 12
19920: ST_TO_ADDR
// case i of 1 :
19921: LD_VAR 0 1
19925: PUSH
19926: LD_INT 1
19928: DOUBLE
19929: EQUAL
19930: IFTRUE 19934
19932: GO 19944
19934: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19935: LD_STRING earthquake(getX(game), 0, 32)
19937: PPUSH
19938: CALL_OW 559
19942: GO 20169
19944: LD_INT 2
19946: DOUBLE
19947: EQUAL
19948: IFTRUE 19952
19950: GO 19966
19952: POP
// begin ToLua ( displayStucuk(); ) ;
19953: LD_STRING displayStucuk();
19955: PPUSH
19956: CALL_OW 559
// ResetFog ;
19960: CALL_OW 335
// end ; 3 :
19964: GO 20169
19966: LD_INT 3
19968: DOUBLE
19969: EQUAL
19970: IFTRUE 19974
19972: GO 20078
19974: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19975: LD_ADDR_VAR 0 2
19979: PUSH
19980: LD_INT 22
19982: PUSH
19983: LD_OWVAR 2
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 25
19994: PUSH
19995: LD_INT 1
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PPUSH
20006: CALL_OW 69
20010: ST_TO_ADDR
// if not tmp then
20011: LD_VAR 0 2
20015: NOT
20016: IFFALSE 20020
// exit ;
20018: GO 20169
// un := tmp [ rand ( 1 , tmp ) ] ;
20020: LD_ADDR_VAR 0 3
20024: PUSH
20025: LD_VAR 0 2
20029: PUSH
20030: LD_INT 1
20032: PPUSH
20033: LD_VAR 0 2
20037: PPUSH
20038: CALL_OW 12
20042: ARRAY
20043: ST_TO_ADDR
// if Crawls ( un ) then
20044: LD_VAR 0 3
20048: PPUSH
20049: CALL_OW 318
20053: IFFALSE 20064
// ComWalk ( un ) ;
20055: LD_VAR 0 3
20059: PPUSH
20060: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20064: LD_VAR 0 3
20068: PPUSH
20069: LD_INT 8
20071: PPUSH
20072: CALL_OW 336
// end ; 4 :
20076: GO 20169
20078: LD_INT 4
20080: DOUBLE
20081: EQUAL
20082: IFTRUE 20086
20084: GO 20147
20086: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20087: LD_ADDR_VAR 0 2
20091: PUSH
20092: LD_INT 22
20094: PUSH
20095: LD_OWVAR 2
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 30
20106: PUSH
20107: LD_INT 29
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PPUSH
20118: CALL_OW 69
20122: ST_TO_ADDR
// if not tmp then
20123: LD_VAR 0 2
20127: NOT
20128: IFFALSE 20132
// exit ;
20130: GO 20169
// DestroyUnit ( tmp [ 1 ] ) ;
20132: LD_VAR 0 2
20136: PUSH
20137: LD_INT 1
20139: ARRAY
20140: PPUSH
20141: CALL_OW 65
// end ; 5 .. 7 :
20145: GO 20169
20147: LD_INT 5
20149: DOUBLE
20150: GREATEREQUAL
20151: IFFALSE 20159
20153: LD_INT 7
20155: DOUBLE
20156: LESSEQUAL
20157: IFTRUE 20161
20159: GO 20168
20161: POP
// StreamSibBomb ; end ;
20162: CALL 16419 0 0
20166: GO 20169
20168: POP
// end ;
20169: PPOPN 3
20171: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20172: LD_EXP 44
20176: PUSH
20177: LD_EXP 94
20181: AND
20182: IFFALSE 20338
20184: GO 20186
20186: DISABLE
20187: LD_INT 0
20189: PPUSH
20190: PPUSH
20191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20192: LD_ADDR_VAR 0 2
20196: PUSH
20197: LD_INT 81
20199: PUSH
20200: LD_OWVAR 2
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 2
20211: PUSH
20212: LD_INT 21
20214: PUSH
20215: LD_INT 1
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 21
20224: PUSH
20225: LD_INT 2
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: LIST
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PPUSH
20241: CALL_OW 69
20245: ST_TO_ADDR
// if not tmp then
20246: LD_VAR 0 2
20250: NOT
20251: IFFALSE 20255
// exit ;
20253: GO 20338
// p := 0 ;
20255: LD_ADDR_VAR 0 3
20259: PUSH
20260: LD_INT 0
20262: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20263: LD_INT 35
20265: PPUSH
20266: CALL_OW 67
// p := p + 1 ;
20270: LD_ADDR_VAR 0 3
20274: PUSH
20275: LD_VAR 0 3
20279: PUSH
20280: LD_INT 1
20282: PLUS
20283: ST_TO_ADDR
// for i in tmp do
20284: LD_ADDR_VAR 0 1
20288: PUSH
20289: LD_VAR 0 2
20293: PUSH
20294: FOR_IN
20295: IFFALSE 20326
// if GetLives ( i ) < 1000 then
20297: LD_VAR 0 1
20301: PPUSH
20302: CALL_OW 256
20306: PUSH
20307: LD_INT 1000
20309: LESS
20310: IFFALSE 20324
// SetLives ( i , 1000 ) ;
20312: LD_VAR 0 1
20316: PPUSH
20317: LD_INT 1000
20319: PPUSH
20320: CALL_OW 234
20324: GO 20294
20326: POP
20327: POP
// until p > 20 ;
20328: LD_VAR 0 3
20332: PUSH
20333: LD_INT 20
20335: GREATER
20336: IFFALSE 20263
// end ;
20338: PPOPN 3
20340: END
// every 0 0$1 trigger StreamModeActive and sTime do
20341: LD_EXP 44
20345: PUSH
20346: LD_EXP 95
20350: AND
20351: IFFALSE 20386
20353: GO 20355
20355: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20356: LD_INT 28
20358: PPUSH
20359: LD_OWVAR 2
20363: PPUSH
20364: LD_INT 2
20366: PPUSH
20367: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20371: LD_INT 30
20373: PPUSH
20374: LD_OWVAR 2
20378: PPUSH
20379: LD_INT 2
20381: PPUSH
20382: CALL_OW 322
// end ;
20386: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20387: LD_EXP 44
20391: PUSH
20392: LD_EXP 96
20396: AND
20397: IFFALSE 20518
20399: GO 20401
20401: DISABLE
20402: LD_INT 0
20404: PPUSH
20405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20406: LD_ADDR_VAR 0 2
20410: PUSH
20411: LD_INT 22
20413: PUSH
20414: LD_OWVAR 2
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 21
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 3
20435: PUSH
20436: LD_INT 23
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL_OW 69
20459: ST_TO_ADDR
// if not tmp then
20460: LD_VAR 0 2
20464: NOT
20465: IFFALSE 20469
// exit ;
20467: GO 20518
// for i in tmp do
20469: LD_ADDR_VAR 0 1
20473: PUSH
20474: LD_VAR 0 2
20478: PUSH
20479: FOR_IN
20480: IFFALSE 20516
// begin if Crawls ( i ) then
20482: LD_VAR 0 1
20486: PPUSH
20487: CALL_OW 318
20491: IFFALSE 20502
// ComWalk ( i ) ;
20493: LD_VAR 0 1
20497: PPUSH
20498: CALL_OW 138
// SetClass ( i , 2 ) ;
20502: LD_VAR 0 1
20506: PPUSH
20507: LD_INT 2
20509: PPUSH
20510: CALL_OW 336
// end ;
20514: GO 20479
20516: POP
20517: POP
// end ;
20518: PPOPN 2
20520: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20521: LD_EXP 44
20525: PUSH
20526: LD_EXP 97
20530: AND
20531: IFFALSE 20812
20533: GO 20535
20535: DISABLE
20536: LD_INT 0
20538: PPUSH
20539: PPUSH
20540: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20541: LD_OWVAR 2
20545: PPUSH
20546: LD_INT 9
20548: PPUSH
20549: LD_INT 1
20551: PPUSH
20552: LD_INT 1
20554: PPUSH
20555: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20559: LD_INT 9
20561: PPUSH
20562: LD_OWVAR 2
20566: PPUSH
20567: CALL_OW 343
// uc_side := 9 ;
20571: LD_ADDR_OWVAR 20
20575: PUSH
20576: LD_INT 9
20578: ST_TO_ADDR
// uc_nation := 2 ;
20579: LD_ADDR_OWVAR 21
20583: PUSH
20584: LD_INT 2
20586: ST_TO_ADDR
// hc_name := Dark Warrior ;
20587: LD_ADDR_OWVAR 26
20591: PUSH
20592: LD_STRING Dark Warrior
20594: ST_TO_ADDR
// hc_gallery :=  ;
20595: LD_ADDR_OWVAR 33
20599: PUSH
20600: LD_STRING 
20602: ST_TO_ADDR
// hc_noskilllimit := true ;
20603: LD_ADDR_OWVAR 76
20607: PUSH
20608: LD_INT 1
20610: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20611: LD_ADDR_OWVAR 31
20615: PUSH
20616: LD_INT 30
20618: PUSH
20619: LD_INT 30
20621: PUSH
20622: LD_INT 30
20624: PUSH
20625: LD_INT 30
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: ST_TO_ADDR
// un := CreateHuman ;
20634: LD_ADDR_VAR 0 3
20638: PUSH
20639: CALL_OW 44
20643: ST_TO_ADDR
// hc_noskilllimit := false ;
20644: LD_ADDR_OWVAR 76
20648: PUSH
20649: LD_INT 0
20651: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20652: LD_VAR 0 3
20656: PPUSH
20657: LD_INT 1
20659: PPUSH
20660: CALL_OW 51
// p := 0 ;
20664: LD_ADDR_VAR 0 2
20668: PUSH
20669: LD_INT 0
20671: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20672: LD_INT 35
20674: PPUSH
20675: CALL_OW 67
// p := p + 1 ;
20679: LD_ADDR_VAR 0 2
20683: PUSH
20684: LD_VAR 0 2
20688: PUSH
20689: LD_INT 1
20691: PLUS
20692: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20693: LD_VAR 0 3
20697: PPUSH
20698: CALL_OW 256
20702: PUSH
20703: LD_INT 1000
20705: LESS
20706: IFFALSE 20720
// SetLives ( un , 1000 ) ;
20708: LD_VAR 0 3
20712: PPUSH
20713: LD_INT 1000
20715: PPUSH
20716: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20720: LD_VAR 0 3
20724: PPUSH
20725: LD_INT 81
20727: PUSH
20728: LD_OWVAR 2
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 91
20739: PUSH
20740: LD_VAR 0 3
20744: PUSH
20745: LD_INT 30
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: LIST
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PPUSH
20757: CALL_OW 69
20761: PPUSH
20762: LD_VAR 0 3
20766: PPUSH
20767: CALL_OW 74
20771: PPUSH
20772: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20776: LD_VAR 0 2
20780: PUSH
20781: LD_INT 60
20783: GREATER
20784: PUSH
20785: LD_VAR 0 3
20789: PPUSH
20790: CALL_OW 301
20794: OR
20795: IFFALSE 20672
// if un then
20797: LD_VAR 0 3
20801: IFFALSE 20812
// RemoveUnit ( un ) ;
20803: LD_VAR 0 3
20807: PPUSH
20808: CALL_OW 64
// end ;
20812: PPOPN 3
20814: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20815: LD_INT 0
20817: PPUSH
// case cmd of 301 :
20818: LD_VAR 0 1
20822: PUSH
20823: LD_INT 301
20825: DOUBLE
20826: EQUAL
20827: IFTRUE 20831
20829: GO 20863
20831: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20832: LD_VAR 0 6
20836: PPUSH
20837: LD_VAR 0 7
20841: PPUSH
20842: LD_VAR 0 8
20846: PPUSH
20847: LD_VAR 0 4
20851: PPUSH
20852: LD_VAR 0 5
20856: PPUSH
20857: CALL 22064 0 5
20861: GO 20984
20863: LD_INT 302
20865: DOUBLE
20866: EQUAL
20867: IFTRUE 20871
20869: GO 20908
20871: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20872: LD_VAR 0 6
20876: PPUSH
20877: LD_VAR 0 7
20881: PPUSH
20882: LD_VAR 0 8
20886: PPUSH
20887: LD_VAR 0 9
20891: PPUSH
20892: LD_VAR 0 4
20896: PPUSH
20897: LD_VAR 0 5
20901: PPUSH
20902: CALL 22155 0 6
20906: GO 20984
20908: LD_INT 303
20910: DOUBLE
20911: EQUAL
20912: IFTRUE 20916
20914: GO 20953
20916: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20917: LD_VAR 0 6
20921: PPUSH
20922: LD_VAR 0 7
20926: PPUSH
20927: LD_VAR 0 8
20931: PPUSH
20932: LD_VAR 0 9
20936: PPUSH
20937: LD_VAR 0 4
20941: PPUSH
20942: LD_VAR 0 5
20946: PPUSH
20947: CALL 20989 0 6
20951: GO 20984
20953: LD_INT 304
20955: DOUBLE
20956: EQUAL
20957: IFTRUE 20961
20959: GO 20983
20961: POP
// hHackTeleport ( unit , x , y ) ; end ;
20962: LD_VAR 0 2
20966: PPUSH
20967: LD_VAR 0 4
20971: PPUSH
20972: LD_VAR 0 5
20976: PPUSH
20977: CALL 22748 0 3
20981: GO 20984
20983: POP
// end ;
20984: LD_VAR 0 12
20988: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20989: LD_INT 0
20991: PPUSH
20992: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20993: LD_VAR 0 1
20997: PUSH
20998: LD_INT 1
21000: LESS
21001: PUSH
21002: LD_VAR 0 1
21006: PUSH
21007: LD_INT 3
21009: GREATER
21010: OR
21011: PUSH
21012: LD_VAR 0 5
21016: PPUSH
21017: LD_VAR 0 6
21021: PPUSH
21022: CALL_OW 428
21026: OR
21027: IFFALSE 21031
// exit ;
21029: GO 21751
// uc_side := your_side ;
21031: LD_ADDR_OWVAR 20
21035: PUSH
21036: LD_OWVAR 2
21040: ST_TO_ADDR
// uc_nation := nation ;
21041: LD_ADDR_OWVAR 21
21045: PUSH
21046: LD_VAR 0 1
21050: ST_TO_ADDR
// bc_level = 1 ;
21051: LD_ADDR_OWVAR 43
21055: PUSH
21056: LD_INT 1
21058: ST_TO_ADDR
// case btype of 1 :
21059: LD_VAR 0 2
21063: PUSH
21064: LD_INT 1
21066: DOUBLE
21067: EQUAL
21068: IFTRUE 21072
21070: GO 21083
21072: POP
// bc_type := b_depot ; 2 :
21073: LD_ADDR_OWVAR 42
21077: PUSH
21078: LD_INT 0
21080: ST_TO_ADDR
21081: GO 21695
21083: LD_INT 2
21085: DOUBLE
21086: EQUAL
21087: IFTRUE 21091
21089: GO 21102
21091: POP
// bc_type := b_warehouse ; 3 :
21092: LD_ADDR_OWVAR 42
21096: PUSH
21097: LD_INT 1
21099: ST_TO_ADDR
21100: GO 21695
21102: LD_INT 3
21104: DOUBLE
21105: EQUAL
21106: IFTRUE 21110
21108: GO 21121
21110: POP
// bc_type := b_lab ; 4 .. 9 :
21111: LD_ADDR_OWVAR 42
21115: PUSH
21116: LD_INT 6
21118: ST_TO_ADDR
21119: GO 21695
21121: LD_INT 4
21123: DOUBLE
21124: GREATEREQUAL
21125: IFFALSE 21133
21127: LD_INT 9
21129: DOUBLE
21130: LESSEQUAL
21131: IFTRUE 21135
21133: GO 21187
21135: POP
// begin bc_type := b_lab_half ;
21136: LD_ADDR_OWVAR 42
21140: PUSH
21141: LD_INT 7
21143: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21144: LD_ADDR_OWVAR 44
21148: PUSH
21149: LD_INT 10
21151: PUSH
21152: LD_INT 11
21154: PUSH
21155: LD_INT 12
21157: PUSH
21158: LD_INT 15
21160: PUSH
21161: LD_INT 14
21163: PUSH
21164: LD_INT 13
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: PUSH
21175: LD_VAR 0 2
21179: PUSH
21180: LD_INT 3
21182: MINUS
21183: ARRAY
21184: ST_TO_ADDR
// end ; 10 .. 13 :
21185: GO 21695
21187: LD_INT 10
21189: DOUBLE
21190: GREATEREQUAL
21191: IFFALSE 21199
21193: LD_INT 13
21195: DOUBLE
21196: LESSEQUAL
21197: IFTRUE 21201
21199: GO 21278
21201: POP
// begin bc_type := b_lab_full ;
21202: LD_ADDR_OWVAR 42
21206: PUSH
21207: LD_INT 8
21209: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21210: LD_ADDR_OWVAR 44
21214: PUSH
21215: LD_INT 10
21217: PUSH
21218: LD_INT 12
21220: PUSH
21221: LD_INT 14
21223: PUSH
21224: LD_INT 13
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: PUSH
21233: LD_VAR 0 2
21237: PUSH
21238: LD_INT 9
21240: MINUS
21241: ARRAY
21242: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21243: LD_ADDR_OWVAR 45
21247: PUSH
21248: LD_INT 11
21250: PUSH
21251: LD_INT 15
21253: PUSH
21254: LD_INT 12
21256: PUSH
21257: LD_INT 15
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: PUSH
21266: LD_VAR 0 2
21270: PUSH
21271: LD_INT 9
21273: MINUS
21274: ARRAY
21275: ST_TO_ADDR
// end ; 14 :
21276: GO 21695
21278: LD_INT 14
21280: DOUBLE
21281: EQUAL
21282: IFTRUE 21286
21284: GO 21297
21286: POP
// bc_type := b_workshop ; 15 :
21287: LD_ADDR_OWVAR 42
21291: PUSH
21292: LD_INT 2
21294: ST_TO_ADDR
21295: GO 21695
21297: LD_INT 15
21299: DOUBLE
21300: EQUAL
21301: IFTRUE 21305
21303: GO 21316
21305: POP
// bc_type := b_factory ; 16 :
21306: LD_ADDR_OWVAR 42
21310: PUSH
21311: LD_INT 3
21313: ST_TO_ADDR
21314: GO 21695
21316: LD_INT 16
21318: DOUBLE
21319: EQUAL
21320: IFTRUE 21324
21322: GO 21335
21324: POP
// bc_type := b_ext_gun ; 17 :
21325: LD_ADDR_OWVAR 42
21329: PUSH
21330: LD_INT 17
21332: ST_TO_ADDR
21333: GO 21695
21335: LD_INT 17
21337: DOUBLE
21338: EQUAL
21339: IFTRUE 21343
21341: GO 21371
21343: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21344: LD_ADDR_OWVAR 42
21348: PUSH
21349: LD_INT 19
21351: PUSH
21352: LD_INT 23
21354: PUSH
21355: LD_INT 19
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: LIST
21362: PUSH
21363: LD_VAR 0 1
21367: ARRAY
21368: ST_TO_ADDR
21369: GO 21695
21371: LD_INT 18
21373: DOUBLE
21374: EQUAL
21375: IFTRUE 21379
21377: GO 21390
21379: POP
// bc_type := b_ext_radar ; 19 :
21380: LD_ADDR_OWVAR 42
21384: PUSH
21385: LD_INT 20
21387: ST_TO_ADDR
21388: GO 21695
21390: LD_INT 19
21392: DOUBLE
21393: EQUAL
21394: IFTRUE 21398
21396: GO 21409
21398: POP
// bc_type := b_ext_radio ; 20 :
21399: LD_ADDR_OWVAR 42
21403: PUSH
21404: LD_INT 22
21406: ST_TO_ADDR
21407: GO 21695
21409: LD_INT 20
21411: DOUBLE
21412: EQUAL
21413: IFTRUE 21417
21415: GO 21428
21417: POP
// bc_type := b_ext_siberium ; 21 :
21418: LD_ADDR_OWVAR 42
21422: PUSH
21423: LD_INT 21
21425: ST_TO_ADDR
21426: GO 21695
21428: LD_INT 21
21430: DOUBLE
21431: EQUAL
21432: IFTRUE 21436
21434: GO 21447
21436: POP
// bc_type := b_ext_computer ; 22 :
21437: LD_ADDR_OWVAR 42
21441: PUSH
21442: LD_INT 24
21444: ST_TO_ADDR
21445: GO 21695
21447: LD_INT 22
21449: DOUBLE
21450: EQUAL
21451: IFTRUE 21455
21453: GO 21466
21455: POP
// bc_type := b_ext_track ; 23 :
21456: LD_ADDR_OWVAR 42
21460: PUSH
21461: LD_INT 16
21463: ST_TO_ADDR
21464: GO 21695
21466: LD_INT 23
21468: DOUBLE
21469: EQUAL
21470: IFTRUE 21474
21472: GO 21485
21474: POP
// bc_type := b_ext_laser ; 24 :
21475: LD_ADDR_OWVAR 42
21479: PUSH
21480: LD_INT 25
21482: ST_TO_ADDR
21483: GO 21695
21485: LD_INT 24
21487: DOUBLE
21488: EQUAL
21489: IFTRUE 21493
21491: GO 21504
21493: POP
// bc_type := b_control_tower ; 25 :
21494: LD_ADDR_OWVAR 42
21498: PUSH
21499: LD_INT 36
21501: ST_TO_ADDR
21502: GO 21695
21504: LD_INT 25
21506: DOUBLE
21507: EQUAL
21508: IFTRUE 21512
21510: GO 21523
21512: POP
// bc_type := b_breastwork ; 26 :
21513: LD_ADDR_OWVAR 42
21517: PUSH
21518: LD_INT 31
21520: ST_TO_ADDR
21521: GO 21695
21523: LD_INT 26
21525: DOUBLE
21526: EQUAL
21527: IFTRUE 21531
21529: GO 21542
21531: POP
// bc_type := b_bunker ; 27 :
21532: LD_ADDR_OWVAR 42
21536: PUSH
21537: LD_INT 32
21539: ST_TO_ADDR
21540: GO 21695
21542: LD_INT 27
21544: DOUBLE
21545: EQUAL
21546: IFTRUE 21550
21548: GO 21561
21550: POP
// bc_type := b_turret ; 28 :
21551: LD_ADDR_OWVAR 42
21555: PUSH
21556: LD_INT 33
21558: ST_TO_ADDR
21559: GO 21695
21561: LD_INT 28
21563: DOUBLE
21564: EQUAL
21565: IFTRUE 21569
21567: GO 21580
21569: POP
// bc_type := b_armoury ; 29 :
21570: LD_ADDR_OWVAR 42
21574: PUSH
21575: LD_INT 4
21577: ST_TO_ADDR
21578: GO 21695
21580: LD_INT 29
21582: DOUBLE
21583: EQUAL
21584: IFTRUE 21588
21586: GO 21599
21588: POP
// bc_type := b_barracks ; 30 :
21589: LD_ADDR_OWVAR 42
21593: PUSH
21594: LD_INT 5
21596: ST_TO_ADDR
21597: GO 21695
21599: LD_INT 30
21601: DOUBLE
21602: EQUAL
21603: IFTRUE 21607
21605: GO 21618
21607: POP
// bc_type := b_solar_power ; 31 :
21608: LD_ADDR_OWVAR 42
21612: PUSH
21613: LD_INT 27
21615: ST_TO_ADDR
21616: GO 21695
21618: LD_INT 31
21620: DOUBLE
21621: EQUAL
21622: IFTRUE 21626
21624: GO 21637
21626: POP
// bc_type := b_oil_power ; 32 :
21627: LD_ADDR_OWVAR 42
21631: PUSH
21632: LD_INT 26
21634: ST_TO_ADDR
21635: GO 21695
21637: LD_INT 32
21639: DOUBLE
21640: EQUAL
21641: IFTRUE 21645
21643: GO 21656
21645: POP
// bc_type := b_siberite_power ; 33 :
21646: LD_ADDR_OWVAR 42
21650: PUSH
21651: LD_INT 28
21653: ST_TO_ADDR
21654: GO 21695
21656: LD_INT 33
21658: DOUBLE
21659: EQUAL
21660: IFTRUE 21664
21662: GO 21675
21664: POP
// bc_type := b_oil_mine ; 34 :
21665: LD_ADDR_OWVAR 42
21669: PUSH
21670: LD_INT 29
21672: ST_TO_ADDR
21673: GO 21695
21675: LD_INT 34
21677: DOUBLE
21678: EQUAL
21679: IFTRUE 21683
21681: GO 21694
21683: POP
// bc_type := b_siberite_mine ; end ;
21684: LD_ADDR_OWVAR 42
21688: PUSH
21689: LD_INT 30
21691: ST_TO_ADDR
21692: GO 21695
21694: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21695: LD_ADDR_VAR 0 8
21699: PUSH
21700: LD_VAR 0 5
21704: PPUSH
21705: LD_VAR 0 6
21709: PPUSH
21710: LD_VAR 0 3
21714: PPUSH
21715: CALL_OW 47
21719: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21720: LD_OWVAR 42
21724: PUSH
21725: LD_INT 32
21727: PUSH
21728: LD_INT 33
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: IN
21735: IFFALSE 21751
// PlaceWeaponTurret ( b , weapon ) ;
21737: LD_VAR 0 8
21741: PPUSH
21742: LD_VAR 0 4
21746: PPUSH
21747: CALL_OW 431
// end ;
21751: LD_VAR 0 7
21755: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21756: LD_INT 0
21758: PPUSH
21759: PPUSH
21760: PPUSH
21761: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21762: LD_ADDR_VAR 0 4
21766: PUSH
21767: LD_INT 22
21769: PUSH
21770: LD_OWVAR 2
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 2
21781: PUSH
21782: LD_INT 30
21784: PUSH
21785: LD_INT 0
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 30
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PPUSH
21811: CALL_OW 69
21815: ST_TO_ADDR
// if not tmp then
21816: LD_VAR 0 4
21820: NOT
21821: IFFALSE 21825
// exit ;
21823: GO 21884
// for i in tmp do
21825: LD_ADDR_VAR 0 2
21829: PUSH
21830: LD_VAR 0 4
21834: PUSH
21835: FOR_IN
21836: IFFALSE 21882
// for j = 1 to 3 do
21838: LD_ADDR_VAR 0 3
21842: PUSH
21843: DOUBLE
21844: LD_INT 1
21846: DEC
21847: ST_TO_ADDR
21848: LD_INT 3
21850: PUSH
21851: FOR_TO
21852: IFFALSE 21878
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21854: LD_VAR 0 2
21858: PPUSH
21859: CALL_OW 274
21863: PPUSH
21864: LD_VAR 0 3
21868: PPUSH
21869: LD_INT 99999
21871: PPUSH
21872: CALL_OW 277
21876: GO 21851
21878: POP
21879: POP
21880: GO 21835
21882: POP
21883: POP
// end ;
21884: LD_VAR 0 1
21888: RET
// export function hHackSetLevel10 ; var i , j ; begin
21889: LD_INT 0
21891: PPUSH
21892: PPUSH
21893: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21894: LD_ADDR_VAR 0 2
21898: PUSH
21899: LD_INT 21
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PPUSH
21909: CALL_OW 69
21913: PUSH
21914: FOR_IN
21915: IFFALSE 21967
// if IsSelected ( i ) then
21917: LD_VAR 0 2
21921: PPUSH
21922: CALL_OW 306
21926: IFFALSE 21965
// begin for j := 1 to 4 do
21928: LD_ADDR_VAR 0 3
21932: PUSH
21933: DOUBLE
21934: LD_INT 1
21936: DEC
21937: ST_TO_ADDR
21938: LD_INT 4
21940: PUSH
21941: FOR_TO
21942: IFFALSE 21963
// SetSkill ( i , j , 10 ) ;
21944: LD_VAR 0 2
21948: PPUSH
21949: LD_VAR 0 3
21953: PPUSH
21954: LD_INT 10
21956: PPUSH
21957: CALL_OW 237
21961: GO 21941
21963: POP
21964: POP
// end ;
21965: GO 21914
21967: POP
21968: POP
// end ;
21969: LD_VAR 0 1
21973: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21974: LD_INT 0
21976: PPUSH
21977: PPUSH
21978: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21979: LD_ADDR_VAR 0 2
21983: PUSH
21984: LD_INT 22
21986: PUSH
21987: LD_OWVAR 2
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 21
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PPUSH
22010: CALL_OW 69
22014: PUSH
22015: FOR_IN
22016: IFFALSE 22057
// begin for j := 1 to 4 do
22018: LD_ADDR_VAR 0 3
22022: PUSH
22023: DOUBLE
22024: LD_INT 1
22026: DEC
22027: ST_TO_ADDR
22028: LD_INT 4
22030: PUSH
22031: FOR_TO
22032: IFFALSE 22053
// SetSkill ( i , j , 10 ) ;
22034: LD_VAR 0 2
22038: PPUSH
22039: LD_VAR 0 3
22043: PPUSH
22044: LD_INT 10
22046: PPUSH
22047: CALL_OW 237
22051: GO 22031
22053: POP
22054: POP
// end ;
22055: GO 22015
22057: POP
22058: POP
// end ;
22059: LD_VAR 0 1
22063: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22064: LD_INT 0
22066: PPUSH
// uc_side := your_side ;
22067: LD_ADDR_OWVAR 20
22071: PUSH
22072: LD_OWVAR 2
22076: ST_TO_ADDR
// uc_nation := nation ;
22077: LD_ADDR_OWVAR 21
22081: PUSH
22082: LD_VAR 0 1
22086: ST_TO_ADDR
// InitHc ;
22087: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22091: LD_INT 0
22093: PPUSH
22094: LD_VAR 0 2
22098: PPUSH
22099: LD_VAR 0 3
22103: PPUSH
22104: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22108: LD_VAR 0 4
22112: PPUSH
22113: LD_VAR 0 5
22117: PPUSH
22118: CALL_OW 428
22122: PUSH
22123: LD_INT 0
22125: EQUAL
22126: IFFALSE 22150
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22128: CALL_OW 44
22132: PPUSH
22133: LD_VAR 0 4
22137: PPUSH
22138: LD_VAR 0 5
22142: PPUSH
22143: LD_INT 1
22145: PPUSH
22146: CALL_OW 48
// end ;
22150: LD_VAR 0 6
22154: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22155: LD_INT 0
22157: PPUSH
22158: PPUSH
// uc_side := your_side ;
22159: LD_ADDR_OWVAR 20
22163: PUSH
22164: LD_OWVAR 2
22168: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22169: LD_VAR 0 1
22173: PUSH
22174: LD_INT 1
22176: PUSH
22177: LD_INT 2
22179: PUSH
22180: LD_INT 3
22182: PUSH
22183: LD_INT 4
22185: PUSH
22186: LD_INT 5
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: IN
22196: IFFALSE 22208
// uc_nation := nation_american else
22198: LD_ADDR_OWVAR 21
22202: PUSH
22203: LD_INT 1
22205: ST_TO_ADDR
22206: GO 22251
// if chassis in [ 11 , 12 , 13 , 14 ] then
22208: LD_VAR 0 1
22212: PUSH
22213: LD_INT 11
22215: PUSH
22216: LD_INT 12
22218: PUSH
22219: LD_INT 13
22221: PUSH
22222: LD_INT 14
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: IN
22231: IFFALSE 22243
// uc_nation := nation_arabian else
22233: LD_ADDR_OWVAR 21
22237: PUSH
22238: LD_INT 2
22240: ST_TO_ADDR
22241: GO 22251
// uc_nation := nation_russian ;
22243: LD_ADDR_OWVAR 21
22247: PUSH
22248: LD_INT 3
22250: ST_TO_ADDR
// vc_chassis := chassis ;
22251: LD_ADDR_OWVAR 37
22255: PUSH
22256: LD_VAR 0 1
22260: ST_TO_ADDR
// vc_engine := engine ;
22261: LD_ADDR_OWVAR 39
22265: PUSH
22266: LD_VAR 0 2
22270: ST_TO_ADDR
// vc_control := control ;
22271: LD_ADDR_OWVAR 38
22275: PUSH
22276: LD_VAR 0 3
22280: ST_TO_ADDR
// vc_weapon := weapon ;
22281: LD_ADDR_OWVAR 40
22285: PUSH
22286: LD_VAR 0 4
22290: ST_TO_ADDR
// un := CreateVehicle ;
22291: LD_ADDR_VAR 0 8
22295: PUSH
22296: CALL_OW 45
22300: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22301: LD_VAR 0 8
22305: PPUSH
22306: LD_INT 0
22308: PPUSH
22309: LD_INT 5
22311: PPUSH
22312: CALL_OW 12
22316: PPUSH
22317: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22321: LD_VAR 0 8
22325: PPUSH
22326: LD_VAR 0 5
22330: PPUSH
22331: LD_VAR 0 6
22335: PPUSH
22336: LD_INT 1
22338: PPUSH
22339: CALL_OW 48
// end ;
22343: LD_VAR 0 7
22347: RET
// export hInvincible ; every 1 do
22348: GO 22350
22350: DISABLE
// hInvincible := [ ] ;
22351: LD_ADDR_EXP 98
22355: PUSH
22356: EMPTY
22357: ST_TO_ADDR
22358: END
// every 10 do var i ;
22359: GO 22361
22361: DISABLE
22362: LD_INT 0
22364: PPUSH
// begin enable ;
22365: ENABLE
// if not hInvincible then
22366: LD_EXP 98
22370: NOT
22371: IFFALSE 22375
// exit ;
22373: GO 22419
// for i in hInvincible do
22375: LD_ADDR_VAR 0 1
22379: PUSH
22380: LD_EXP 98
22384: PUSH
22385: FOR_IN
22386: IFFALSE 22417
// if GetLives ( i ) < 1000 then
22388: LD_VAR 0 1
22392: PPUSH
22393: CALL_OW 256
22397: PUSH
22398: LD_INT 1000
22400: LESS
22401: IFFALSE 22415
// SetLives ( i , 1000 ) ;
22403: LD_VAR 0 1
22407: PPUSH
22408: LD_INT 1000
22410: PPUSH
22411: CALL_OW 234
22415: GO 22385
22417: POP
22418: POP
// end ;
22419: PPOPN 1
22421: END
// export function hHackInvincible ; var i ; begin
22422: LD_INT 0
22424: PPUSH
22425: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22426: LD_ADDR_VAR 0 2
22430: PUSH
22431: LD_INT 2
22433: PUSH
22434: LD_INT 21
22436: PUSH
22437: LD_INT 1
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 21
22446: PUSH
22447: LD_INT 2
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: PPUSH
22459: CALL_OW 69
22463: PUSH
22464: FOR_IN
22465: IFFALSE 22526
// if IsSelected ( i ) then
22467: LD_VAR 0 2
22471: PPUSH
22472: CALL_OW 306
22476: IFFALSE 22524
// begin if i in hInvincible then
22478: LD_VAR 0 2
22482: PUSH
22483: LD_EXP 98
22487: IN
22488: IFFALSE 22508
// hInvincible := hInvincible diff i else
22490: LD_ADDR_EXP 98
22494: PUSH
22495: LD_EXP 98
22499: PUSH
22500: LD_VAR 0 2
22504: DIFF
22505: ST_TO_ADDR
22506: GO 22524
// hInvincible := hInvincible union i ;
22508: LD_ADDR_EXP 98
22512: PUSH
22513: LD_EXP 98
22517: PUSH
22518: LD_VAR 0 2
22522: UNION
22523: ST_TO_ADDR
// end ;
22524: GO 22464
22526: POP
22527: POP
// end ;
22528: LD_VAR 0 1
22532: RET
// export function hHackInvisible ; var i , j ; begin
22533: LD_INT 0
22535: PPUSH
22536: PPUSH
22537: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22538: LD_ADDR_VAR 0 2
22542: PUSH
22543: LD_INT 21
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PPUSH
22553: CALL_OW 69
22557: PUSH
22558: FOR_IN
22559: IFFALSE 22583
// if IsSelected ( i ) then
22561: LD_VAR 0 2
22565: PPUSH
22566: CALL_OW 306
22570: IFFALSE 22581
// ComForceInvisible ( i ) ;
22572: LD_VAR 0 2
22576: PPUSH
22577: CALL_OW 496
22581: GO 22558
22583: POP
22584: POP
// end ;
22585: LD_VAR 0 1
22589: RET
// export function hHackChangeYourSide ; begin
22590: LD_INT 0
22592: PPUSH
// if your_side = 8 then
22593: LD_OWVAR 2
22597: PUSH
22598: LD_INT 8
22600: EQUAL
22601: IFFALSE 22613
// your_side := 0 else
22603: LD_ADDR_OWVAR 2
22607: PUSH
22608: LD_INT 0
22610: ST_TO_ADDR
22611: GO 22627
// your_side := your_side + 1 ;
22613: LD_ADDR_OWVAR 2
22617: PUSH
22618: LD_OWVAR 2
22622: PUSH
22623: LD_INT 1
22625: PLUS
22626: ST_TO_ADDR
// end ;
22627: LD_VAR 0 1
22631: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22632: LD_INT 0
22634: PPUSH
22635: PPUSH
22636: PPUSH
// for i in all_units do
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_OWVAR 3
22646: PUSH
22647: FOR_IN
22648: IFFALSE 22726
// if IsSelected ( i ) then
22650: LD_VAR 0 2
22654: PPUSH
22655: CALL_OW 306
22659: IFFALSE 22724
// begin j := GetSide ( i ) ;
22661: LD_ADDR_VAR 0 3
22665: PUSH
22666: LD_VAR 0 2
22670: PPUSH
22671: CALL_OW 255
22675: ST_TO_ADDR
// if j = 8 then
22676: LD_VAR 0 3
22680: PUSH
22681: LD_INT 8
22683: EQUAL
22684: IFFALSE 22696
// j := 0 else
22686: LD_ADDR_VAR 0 3
22690: PUSH
22691: LD_INT 0
22693: ST_TO_ADDR
22694: GO 22710
// j := j + 1 ;
22696: LD_ADDR_VAR 0 3
22700: PUSH
22701: LD_VAR 0 3
22705: PUSH
22706: LD_INT 1
22708: PLUS
22709: ST_TO_ADDR
// SetSide ( i , j ) ;
22710: LD_VAR 0 2
22714: PPUSH
22715: LD_VAR 0 3
22719: PPUSH
22720: CALL_OW 235
// end ;
22724: GO 22647
22726: POP
22727: POP
// end ;
22728: LD_VAR 0 1
22732: RET
// export function hHackFog ; begin
22733: LD_INT 0
22735: PPUSH
// FogOff ( true ) ;
22736: LD_INT 1
22738: PPUSH
22739: CALL_OW 344
// end ;
22743: LD_VAR 0 1
22747: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22748: LD_INT 0
22750: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22751: LD_VAR 0 1
22755: PPUSH
22756: LD_VAR 0 2
22760: PPUSH
22761: LD_VAR 0 3
22765: PPUSH
22766: LD_INT 1
22768: PPUSH
22769: LD_INT 1
22771: PPUSH
22772: CALL_OW 483
// CenterOnXY ( x , y ) ;
22776: LD_VAR 0 2
22780: PPUSH
22781: LD_VAR 0 3
22785: PPUSH
22786: CALL_OW 84
// end ; end_of_file
22790: LD_VAR 0 4
22794: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22795: LD_INT 0
22797: PPUSH
22798: PPUSH
22799: PPUSH
22800: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22801: LD_VAR 0 1
22805: PPUSH
22806: CALL_OW 264
22810: PUSH
22811: LD_EXP 29
22815: EQUAL
22816: IFFALSE 22888
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22818: LD_INT 68
22820: PPUSH
22821: LD_VAR 0 1
22825: PPUSH
22826: CALL_OW 255
22830: PPUSH
22831: CALL_OW 321
22835: PUSH
22836: LD_INT 2
22838: EQUAL
22839: IFFALSE 22851
// eff := 70 else
22841: LD_ADDR_VAR 0 4
22845: PUSH
22846: LD_INT 70
22848: ST_TO_ADDR
22849: GO 22859
// eff := 30 ;
22851: LD_ADDR_VAR 0 4
22855: PUSH
22856: LD_INT 30
22858: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22859: LD_VAR 0 1
22863: PPUSH
22864: CALL_OW 250
22868: PPUSH
22869: LD_VAR 0 1
22873: PPUSH
22874: CALL_OW 251
22878: PPUSH
22879: LD_VAR 0 4
22883: PPUSH
22884: CALL_OW 495
// end ; end ;
22888: LD_VAR 0 2
22892: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22893: LD_INT 0
22895: PPUSH
// end ;
22896: LD_VAR 0 4
22900: RET
// export function SOS_Command ( cmd ) ; begin
22901: LD_INT 0
22903: PPUSH
// end ;
22904: LD_VAR 0 2
22908: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22909: LD_INT 0
22911: PPUSH
// if cmd = 121 then
22912: LD_VAR 0 1
22916: PUSH
22917: LD_INT 121
22919: EQUAL
22920: IFFALSE 22922
// end ;
22922: LD_VAR 0 6
22926: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22927: LD_INT 0
22929: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22930: LD_VAR 0 1
22934: PUSH
22935: LD_INT 250
22937: EQUAL
22938: PUSH
22939: LD_VAR 0 2
22943: PPUSH
22944: CALL_OW 264
22948: PUSH
22949: LD_EXP 32
22953: EQUAL
22954: AND
22955: IFFALSE 22976
// MinerPlaceMine ( unit , x , y ) ;
22957: LD_VAR 0 2
22961: PPUSH
22962: LD_VAR 0 4
22966: PPUSH
22967: LD_VAR 0 5
22971: PPUSH
22972: CALL 25325 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22976: LD_VAR 0 1
22980: PUSH
22981: LD_INT 251
22983: EQUAL
22984: PUSH
22985: LD_VAR 0 2
22989: PPUSH
22990: CALL_OW 264
22994: PUSH
22995: LD_EXP 32
22999: EQUAL
23000: AND
23001: IFFALSE 23022
// MinerDetonateMine ( unit , x , y ) ;
23003: LD_VAR 0 2
23007: PPUSH
23008: LD_VAR 0 4
23012: PPUSH
23013: LD_VAR 0 5
23017: PPUSH
23018: CALL 25602 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23022: LD_VAR 0 1
23026: PUSH
23027: LD_INT 252
23029: EQUAL
23030: PUSH
23031: LD_VAR 0 2
23035: PPUSH
23036: CALL_OW 264
23040: PUSH
23041: LD_EXP 32
23045: EQUAL
23046: AND
23047: IFFALSE 23068
// MinerCreateMinefield ( unit , x , y ) ;
23049: LD_VAR 0 2
23053: PPUSH
23054: LD_VAR 0 4
23058: PPUSH
23059: LD_VAR 0 5
23063: PPUSH
23064: CALL 26019 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23068: LD_VAR 0 1
23072: PUSH
23073: LD_INT 253
23075: EQUAL
23076: PUSH
23077: LD_VAR 0 2
23081: PPUSH
23082: CALL_OW 257
23086: PUSH
23087: LD_INT 5
23089: EQUAL
23090: AND
23091: IFFALSE 23112
// ComBinocular ( unit , x , y ) ;
23093: LD_VAR 0 2
23097: PPUSH
23098: LD_VAR 0 4
23102: PPUSH
23103: LD_VAR 0 5
23107: PPUSH
23108: CALL 26390 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23112: LD_VAR 0 1
23116: PUSH
23117: LD_INT 254
23119: EQUAL
23120: PUSH
23121: LD_VAR 0 2
23125: PPUSH
23126: CALL_OW 264
23130: PUSH
23131: LD_EXP 27
23135: EQUAL
23136: AND
23137: PUSH
23138: LD_VAR 0 3
23142: PPUSH
23143: CALL_OW 263
23147: PUSH
23148: LD_INT 3
23150: EQUAL
23151: AND
23152: IFFALSE 23168
// HackDestroyVehicle ( unit , selectedUnit ) ;
23154: LD_VAR 0 2
23158: PPUSH
23159: LD_VAR 0 3
23163: PPUSH
23164: CALL 24685 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23168: LD_VAR 0 1
23172: PUSH
23173: LD_INT 255
23175: EQUAL
23176: PUSH
23177: LD_VAR 0 2
23181: PPUSH
23182: CALL_OW 264
23186: PUSH
23187: LD_INT 14
23189: PUSH
23190: LD_INT 53
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: IN
23197: AND
23198: PUSH
23199: LD_VAR 0 4
23203: PPUSH
23204: LD_VAR 0 5
23208: PPUSH
23209: CALL_OW 488
23213: AND
23214: IFFALSE 23238
// CutTreeXYR ( unit , x , y , 12 ) ;
23216: LD_VAR 0 2
23220: PPUSH
23221: LD_VAR 0 4
23225: PPUSH
23226: LD_VAR 0 5
23230: PPUSH
23231: LD_INT 12
23233: PPUSH
23234: CALL 23251 0 4
// end ;
23238: LD_VAR 0 6
23242: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23243: LD_INT 0
23245: PPUSH
// end ;
23246: LD_VAR 0 4
23250: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23251: LD_INT 0
23253: PPUSH
23254: PPUSH
23255: PPUSH
23256: PPUSH
23257: PPUSH
23258: PPUSH
23259: PPUSH
23260: PPUSH
23261: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23262: LD_VAR 0 1
23266: NOT
23267: PUSH
23268: LD_VAR 0 2
23272: PPUSH
23273: LD_VAR 0 3
23277: PPUSH
23278: CALL_OW 488
23282: NOT
23283: OR
23284: PUSH
23285: LD_VAR 0 4
23289: NOT
23290: OR
23291: IFFALSE 23295
// exit ;
23293: GO 23635
// list := [ ] ;
23295: LD_ADDR_VAR 0 13
23299: PUSH
23300: EMPTY
23301: ST_TO_ADDR
// if x - r < 0 then
23302: LD_VAR 0 2
23306: PUSH
23307: LD_VAR 0 4
23311: MINUS
23312: PUSH
23313: LD_INT 0
23315: LESS
23316: IFFALSE 23328
// min_x := 0 else
23318: LD_ADDR_VAR 0 7
23322: PUSH
23323: LD_INT 0
23325: ST_TO_ADDR
23326: GO 23344
// min_x := x - r ;
23328: LD_ADDR_VAR 0 7
23332: PUSH
23333: LD_VAR 0 2
23337: PUSH
23338: LD_VAR 0 4
23342: MINUS
23343: ST_TO_ADDR
// if y - r < 0 then
23344: LD_VAR 0 3
23348: PUSH
23349: LD_VAR 0 4
23353: MINUS
23354: PUSH
23355: LD_INT 0
23357: LESS
23358: IFFALSE 23370
// min_y := 0 else
23360: LD_ADDR_VAR 0 8
23364: PUSH
23365: LD_INT 0
23367: ST_TO_ADDR
23368: GO 23386
// min_y := y - r ;
23370: LD_ADDR_VAR 0 8
23374: PUSH
23375: LD_VAR 0 3
23379: PUSH
23380: LD_VAR 0 4
23384: MINUS
23385: ST_TO_ADDR
// max_x := x + r ;
23386: LD_ADDR_VAR 0 9
23390: PUSH
23391: LD_VAR 0 2
23395: PUSH
23396: LD_VAR 0 4
23400: PLUS
23401: ST_TO_ADDR
// max_y := y + r ;
23402: LD_ADDR_VAR 0 10
23406: PUSH
23407: LD_VAR 0 3
23411: PUSH
23412: LD_VAR 0 4
23416: PLUS
23417: ST_TO_ADDR
// for _x = min_x to max_x do
23418: LD_ADDR_VAR 0 11
23422: PUSH
23423: DOUBLE
23424: LD_VAR 0 7
23428: DEC
23429: ST_TO_ADDR
23430: LD_VAR 0 9
23434: PUSH
23435: FOR_TO
23436: IFFALSE 23553
// for _y = min_y to max_y do
23438: LD_ADDR_VAR 0 12
23442: PUSH
23443: DOUBLE
23444: LD_VAR 0 8
23448: DEC
23449: ST_TO_ADDR
23450: LD_VAR 0 10
23454: PUSH
23455: FOR_TO
23456: IFFALSE 23549
// begin if not ValidHex ( _x , _y ) then
23458: LD_VAR 0 11
23462: PPUSH
23463: LD_VAR 0 12
23467: PPUSH
23468: CALL_OW 488
23472: NOT
23473: IFFALSE 23477
// continue ;
23475: GO 23455
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23477: LD_VAR 0 11
23481: PPUSH
23482: LD_VAR 0 12
23486: PPUSH
23487: CALL_OW 351
23491: PUSH
23492: LD_VAR 0 11
23496: PPUSH
23497: LD_VAR 0 12
23501: PPUSH
23502: CALL_OW 554
23506: AND
23507: IFFALSE 23547
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23509: LD_ADDR_VAR 0 13
23513: PUSH
23514: LD_VAR 0 13
23518: PPUSH
23519: LD_VAR 0 13
23523: PUSH
23524: LD_INT 1
23526: PLUS
23527: PPUSH
23528: LD_VAR 0 11
23532: PUSH
23533: LD_VAR 0 12
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PPUSH
23542: CALL_OW 2
23546: ST_TO_ADDR
// end ;
23547: GO 23455
23549: POP
23550: POP
23551: GO 23435
23553: POP
23554: POP
// if not list then
23555: LD_VAR 0 13
23559: NOT
23560: IFFALSE 23564
// exit ;
23562: GO 23635
// for i in list do
23564: LD_ADDR_VAR 0 6
23568: PUSH
23569: LD_VAR 0 13
23573: PUSH
23574: FOR_IN
23575: IFFALSE 23633
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23577: LD_VAR 0 1
23581: PPUSH
23582: LD_STRING M
23584: PUSH
23585: LD_VAR 0 6
23589: PUSH
23590: LD_INT 1
23592: ARRAY
23593: PUSH
23594: LD_VAR 0 6
23598: PUSH
23599: LD_INT 2
23601: ARRAY
23602: PUSH
23603: LD_INT 0
23605: PUSH
23606: LD_INT 0
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: LD_INT 0
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: PUSH
23624: EMPTY
23625: LIST
23626: PPUSH
23627: CALL_OW 447
23631: GO 23574
23633: POP
23634: POP
// end ;
23635: LD_VAR 0 5
23639: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23640: LD_EXP 101
23644: NOT
23645: IFFALSE 23695
23647: GO 23649
23649: DISABLE
// begin initHack := true ;
23650: LD_ADDR_EXP 101
23654: PUSH
23655: LD_INT 1
23657: ST_TO_ADDR
// hackTanks := [ ] ;
23658: LD_ADDR_EXP 102
23662: PUSH
23663: EMPTY
23664: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23665: LD_ADDR_EXP 103
23669: PUSH
23670: EMPTY
23671: ST_TO_ADDR
// hackLimit := 3 ;
23672: LD_ADDR_EXP 104
23676: PUSH
23677: LD_INT 3
23679: ST_TO_ADDR
// hackDist := 12 ;
23680: LD_ADDR_EXP 105
23684: PUSH
23685: LD_INT 12
23687: ST_TO_ADDR
// hackCounter := [ ] ;
23688: LD_ADDR_EXP 106
23692: PUSH
23693: EMPTY
23694: ST_TO_ADDR
// end ;
23695: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23696: LD_EXP 101
23700: PUSH
23701: LD_INT 34
23703: PUSH
23704: LD_EXP 27
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PPUSH
23713: CALL_OW 69
23717: AND
23718: IFFALSE 23973
23720: GO 23722
23722: DISABLE
23723: LD_INT 0
23725: PPUSH
23726: PPUSH
// begin enable ;
23727: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23728: LD_ADDR_VAR 0 1
23732: PUSH
23733: LD_INT 34
23735: PUSH
23736: LD_EXP 27
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PPUSH
23745: CALL_OW 69
23749: PUSH
23750: FOR_IN
23751: IFFALSE 23971
// begin if not i in hackTanks then
23753: LD_VAR 0 1
23757: PUSH
23758: LD_EXP 102
23762: IN
23763: NOT
23764: IFFALSE 23847
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23766: LD_ADDR_EXP 102
23770: PUSH
23771: LD_EXP 102
23775: PPUSH
23776: LD_EXP 102
23780: PUSH
23781: LD_INT 1
23783: PLUS
23784: PPUSH
23785: LD_VAR 0 1
23789: PPUSH
23790: CALL_OW 1
23794: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23795: LD_ADDR_EXP 103
23799: PUSH
23800: LD_EXP 103
23804: PPUSH
23805: LD_EXP 103
23809: PUSH
23810: LD_INT 1
23812: PLUS
23813: PPUSH
23814: EMPTY
23815: PPUSH
23816: CALL_OW 1
23820: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23821: LD_ADDR_EXP 106
23825: PUSH
23826: LD_EXP 106
23830: PPUSH
23831: LD_EXP 106
23835: PUSH
23836: LD_INT 1
23838: PLUS
23839: PPUSH
23840: EMPTY
23841: PPUSH
23842: CALL_OW 1
23846: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23847: LD_VAR 0 1
23851: PPUSH
23852: CALL_OW 302
23856: NOT
23857: IFFALSE 23870
// begin HackUnlinkAll ( i ) ;
23859: LD_VAR 0 1
23863: PPUSH
23864: CALL 23976 0 1
// continue ;
23868: GO 23750
// end ; HackCheckCapturedStatus ( i ) ;
23870: LD_VAR 0 1
23874: PPUSH
23875: CALL 24419 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23879: LD_ADDR_VAR 0 2
23883: PUSH
23884: LD_INT 81
23886: PUSH
23887: LD_VAR 0 1
23891: PPUSH
23892: CALL_OW 255
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 33
23903: PUSH
23904: LD_INT 3
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 91
23913: PUSH
23914: LD_VAR 0 1
23918: PUSH
23919: LD_EXP 105
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 50
23931: PUSH
23932: EMPTY
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: PPUSH
23941: CALL_OW 69
23945: ST_TO_ADDR
// if not tmp then
23946: LD_VAR 0 2
23950: NOT
23951: IFFALSE 23955
// continue ;
23953: GO 23750
// HackLink ( i , tmp ) ;
23955: LD_VAR 0 1
23959: PPUSH
23960: LD_VAR 0 2
23964: PPUSH
23965: CALL 24112 0 2
// end ;
23969: GO 23750
23971: POP
23972: POP
// end ;
23973: PPOPN 2
23975: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23976: LD_INT 0
23978: PPUSH
23979: PPUSH
23980: PPUSH
// if not hack in hackTanks then
23981: LD_VAR 0 1
23985: PUSH
23986: LD_EXP 102
23990: IN
23991: NOT
23992: IFFALSE 23996
// exit ;
23994: GO 24107
// index := GetElementIndex ( hackTanks , hack ) ;
23996: LD_ADDR_VAR 0 4
24000: PUSH
24001: LD_EXP 102
24005: PPUSH
24006: LD_VAR 0 1
24010: PPUSH
24011: CALL 31581 0 2
24015: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24016: LD_EXP 103
24020: PUSH
24021: LD_VAR 0 4
24025: ARRAY
24026: IFFALSE 24107
// begin for i in hackTanksCaptured [ index ] do
24028: LD_ADDR_VAR 0 3
24032: PUSH
24033: LD_EXP 103
24037: PUSH
24038: LD_VAR 0 4
24042: ARRAY
24043: PUSH
24044: FOR_IN
24045: IFFALSE 24071
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24047: LD_VAR 0 3
24051: PUSH
24052: LD_INT 1
24054: ARRAY
24055: PPUSH
24056: LD_VAR 0 3
24060: PUSH
24061: LD_INT 2
24063: ARRAY
24064: PPUSH
24065: CALL_OW 235
24069: GO 24044
24071: POP
24072: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24073: LD_ADDR_EXP 103
24077: PUSH
24078: LD_EXP 103
24082: PPUSH
24083: LD_VAR 0 4
24087: PPUSH
24088: EMPTY
24089: PPUSH
24090: CALL_OW 1
24094: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24095: LD_VAR 0 1
24099: PPUSH
24100: LD_INT 0
24102: PPUSH
24103: CALL_OW 505
// end ; end ;
24107: LD_VAR 0 2
24111: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24112: LD_INT 0
24114: PPUSH
24115: PPUSH
24116: PPUSH
// if not hack in hackTanks or not vehicles then
24117: LD_VAR 0 1
24121: PUSH
24122: LD_EXP 102
24126: IN
24127: NOT
24128: PUSH
24129: LD_VAR 0 2
24133: NOT
24134: OR
24135: IFFALSE 24139
// exit ;
24137: GO 24414
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24139: LD_ADDR_VAR 0 2
24143: PUSH
24144: LD_VAR 0 1
24148: PPUSH
24149: LD_VAR 0 2
24153: PPUSH
24154: LD_INT 1
24156: PPUSH
24157: LD_INT 1
24159: PPUSH
24160: CALL 32231 0 4
24164: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24165: LD_ADDR_VAR 0 5
24169: PUSH
24170: LD_EXP 102
24174: PPUSH
24175: LD_VAR 0 1
24179: PPUSH
24180: CALL 31581 0 2
24184: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24185: LD_EXP 103
24189: PUSH
24190: LD_VAR 0 5
24194: ARRAY
24195: PUSH
24196: LD_EXP 104
24200: LESS
24201: IFFALSE 24390
// begin for i := 1 to vehicles do
24203: LD_ADDR_VAR 0 4
24207: PUSH
24208: DOUBLE
24209: LD_INT 1
24211: DEC
24212: ST_TO_ADDR
24213: LD_VAR 0 2
24217: PUSH
24218: FOR_TO
24219: IFFALSE 24388
// begin if hackTanksCaptured [ index ] = hackLimit then
24221: LD_EXP 103
24225: PUSH
24226: LD_VAR 0 5
24230: ARRAY
24231: PUSH
24232: LD_EXP 104
24236: EQUAL
24237: IFFALSE 24241
// break ;
24239: GO 24388
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24241: LD_ADDR_EXP 106
24245: PUSH
24246: LD_EXP 106
24250: PPUSH
24251: LD_VAR 0 5
24255: PPUSH
24256: LD_EXP 106
24260: PUSH
24261: LD_VAR 0 5
24265: ARRAY
24266: PUSH
24267: LD_INT 1
24269: PLUS
24270: PPUSH
24271: CALL_OW 1
24275: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24276: LD_ADDR_EXP 103
24280: PUSH
24281: LD_EXP 103
24285: PPUSH
24286: LD_VAR 0 5
24290: PUSH
24291: LD_EXP 103
24295: PUSH
24296: LD_VAR 0 5
24300: ARRAY
24301: PUSH
24302: LD_INT 1
24304: PLUS
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PPUSH
24310: LD_VAR 0 2
24314: PUSH
24315: LD_VAR 0 4
24319: ARRAY
24320: PUSH
24321: LD_VAR 0 2
24325: PUSH
24326: LD_VAR 0 4
24330: ARRAY
24331: PPUSH
24332: CALL_OW 255
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PPUSH
24341: CALL 31796 0 3
24345: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24346: LD_VAR 0 2
24350: PUSH
24351: LD_VAR 0 4
24355: ARRAY
24356: PPUSH
24357: LD_VAR 0 1
24361: PPUSH
24362: CALL_OW 255
24366: PPUSH
24367: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24371: LD_VAR 0 2
24375: PUSH
24376: LD_VAR 0 4
24380: ARRAY
24381: PPUSH
24382: CALL_OW 141
// end ;
24386: GO 24218
24388: POP
24389: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24390: LD_VAR 0 1
24394: PPUSH
24395: LD_EXP 103
24399: PUSH
24400: LD_VAR 0 5
24404: ARRAY
24405: PUSH
24406: LD_INT 0
24408: PLUS
24409: PPUSH
24410: CALL_OW 505
// end ;
24414: LD_VAR 0 3
24418: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24419: LD_INT 0
24421: PPUSH
24422: PPUSH
24423: PPUSH
24424: PPUSH
// if not hack in hackTanks then
24425: LD_VAR 0 1
24429: PUSH
24430: LD_EXP 102
24434: IN
24435: NOT
24436: IFFALSE 24440
// exit ;
24438: GO 24680
// index := GetElementIndex ( hackTanks , hack ) ;
24440: LD_ADDR_VAR 0 4
24444: PUSH
24445: LD_EXP 102
24449: PPUSH
24450: LD_VAR 0 1
24454: PPUSH
24455: CALL 31581 0 2
24459: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24460: LD_ADDR_VAR 0 3
24464: PUSH
24465: DOUBLE
24466: LD_EXP 103
24470: PUSH
24471: LD_VAR 0 4
24475: ARRAY
24476: INC
24477: ST_TO_ADDR
24478: LD_INT 1
24480: PUSH
24481: FOR_DOWNTO
24482: IFFALSE 24654
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24484: LD_ADDR_VAR 0 5
24488: PUSH
24489: LD_EXP 103
24493: PUSH
24494: LD_VAR 0 4
24498: ARRAY
24499: PUSH
24500: LD_VAR 0 3
24504: ARRAY
24505: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24506: LD_VAR 0 5
24510: PUSH
24511: LD_INT 1
24513: ARRAY
24514: PPUSH
24515: CALL_OW 302
24519: NOT
24520: PUSH
24521: LD_VAR 0 5
24525: PUSH
24526: LD_INT 1
24528: ARRAY
24529: PPUSH
24530: CALL_OW 255
24534: PUSH
24535: LD_VAR 0 1
24539: PPUSH
24540: CALL_OW 255
24544: NONEQUAL
24545: OR
24546: IFFALSE 24652
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24548: LD_VAR 0 5
24552: PUSH
24553: LD_INT 1
24555: ARRAY
24556: PPUSH
24557: CALL_OW 305
24561: PUSH
24562: LD_VAR 0 5
24566: PUSH
24567: LD_INT 1
24569: ARRAY
24570: PPUSH
24571: CALL_OW 255
24575: PUSH
24576: LD_VAR 0 1
24580: PPUSH
24581: CALL_OW 255
24585: EQUAL
24586: AND
24587: IFFALSE 24611
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24589: LD_VAR 0 5
24593: PUSH
24594: LD_INT 1
24596: ARRAY
24597: PPUSH
24598: LD_VAR 0 5
24602: PUSH
24603: LD_INT 2
24605: ARRAY
24606: PPUSH
24607: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24611: LD_ADDR_EXP 103
24615: PUSH
24616: LD_EXP 103
24620: PPUSH
24621: LD_VAR 0 4
24625: PPUSH
24626: LD_EXP 103
24630: PUSH
24631: LD_VAR 0 4
24635: ARRAY
24636: PPUSH
24637: LD_VAR 0 3
24641: PPUSH
24642: CALL_OW 3
24646: PPUSH
24647: CALL_OW 1
24651: ST_TO_ADDR
// end ; end ;
24652: GO 24481
24654: POP
24655: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24656: LD_VAR 0 1
24660: PPUSH
24661: LD_EXP 103
24665: PUSH
24666: LD_VAR 0 4
24670: ARRAY
24671: PUSH
24672: LD_INT 0
24674: PLUS
24675: PPUSH
24676: CALL_OW 505
// end ;
24680: LD_VAR 0 2
24684: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24685: LD_INT 0
24687: PPUSH
24688: PPUSH
24689: PPUSH
24690: PPUSH
// if not hack in hackTanks then
24691: LD_VAR 0 1
24695: PUSH
24696: LD_EXP 102
24700: IN
24701: NOT
24702: IFFALSE 24706
// exit ;
24704: GO 24791
// index := GetElementIndex ( hackTanks , hack ) ;
24706: LD_ADDR_VAR 0 5
24710: PUSH
24711: LD_EXP 102
24715: PPUSH
24716: LD_VAR 0 1
24720: PPUSH
24721: CALL 31581 0 2
24725: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24726: LD_ADDR_VAR 0 4
24730: PUSH
24731: DOUBLE
24732: LD_INT 1
24734: DEC
24735: ST_TO_ADDR
24736: LD_EXP 103
24740: PUSH
24741: LD_VAR 0 5
24745: ARRAY
24746: PUSH
24747: FOR_TO
24748: IFFALSE 24789
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24750: LD_EXP 103
24754: PUSH
24755: LD_VAR 0 5
24759: ARRAY
24760: PUSH
24761: LD_VAR 0 4
24765: ARRAY
24766: PUSH
24767: LD_INT 1
24769: ARRAY
24770: PUSH
24771: LD_VAR 0 2
24775: EQUAL
24776: IFFALSE 24787
// KillUnit ( vehicle ) ;
24778: LD_VAR 0 2
24782: PPUSH
24783: CALL_OW 66
24787: GO 24747
24789: POP
24790: POP
// end ;
24791: LD_VAR 0 3
24795: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24796: LD_EXP 107
24800: NOT
24801: IFFALSE 24836
24803: GO 24805
24805: DISABLE
// begin initMiner := true ;
24806: LD_ADDR_EXP 107
24810: PUSH
24811: LD_INT 1
24813: ST_TO_ADDR
// minersList := [ ] ;
24814: LD_ADDR_EXP 108
24818: PUSH
24819: EMPTY
24820: ST_TO_ADDR
// minerMinesList := [ ] ;
24821: LD_ADDR_EXP 109
24825: PUSH
24826: EMPTY
24827: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24828: LD_ADDR_EXP 110
24832: PUSH
24833: LD_INT 5
24835: ST_TO_ADDR
// end ;
24836: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24837: LD_EXP 107
24841: PUSH
24842: LD_INT 34
24844: PUSH
24845: LD_EXP 32
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PPUSH
24854: CALL_OW 69
24858: AND
24859: IFFALSE 25322
24861: GO 24863
24863: DISABLE
24864: LD_INT 0
24866: PPUSH
24867: PPUSH
24868: PPUSH
24869: PPUSH
// begin enable ;
24870: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24871: LD_ADDR_VAR 0 1
24875: PUSH
24876: LD_INT 34
24878: PUSH
24879: LD_EXP 32
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PPUSH
24888: CALL_OW 69
24892: PUSH
24893: FOR_IN
24894: IFFALSE 24966
// begin if not i in minersList then
24896: LD_VAR 0 1
24900: PUSH
24901: LD_EXP 108
24905: IN
24906: NOT
24907: IFFALSE 24964
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24909: LD_ADDR_EXP 108
24913: PUSH
24914: LD_EXP 108
24918: PPUSH
24919: LD_EXP 108
24923: PUSH
24924: LD_INT 1
24926: PLUS
24927: PPUSH
24928: LD_VAR 0 1
24932: PPUSH
24933: CALL_OW 1
24937: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24938: LD_ADDR_EXP 109
24942: PUSH
24943: LD_EXP 109
24947: PPUSH
24948: LD_EXP 109
24952: PUSH
24953: LD_INT 1
24955: PLUS
24956: PPUSH
24957: EMPTY
24958: PPUSH
24959: CALL_OW 1
24963: ST_TO_ADDR
// end end ;
24964: GO 24893
24966: POP
24967: POP
// for i := minerMinesList downto 1 do
24968: LD_ADDR_VAR 0 1
24972: PUSH
24973: DOUBLE
24974: LD_EXP 109
24978: INC
24979: ST_TO_ADDR
24980: LD_INT 1
24982: PUSH
24983: FOR_DOWNTO
24984: IFFALSE 25320
// begin if IsLive ( minersList [ i ] ) then
24986: LD_EXP 108
24990: PUSH
24991: LD_VAR 0 1
24995: ARRAY
24996: PPUSH
24997: CALL_OW 300
25001: IFFALSE 25029
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25003: LD_EXP 108
25007: PUSH
25008: LD_VAR 0 1
25012: ARRAY
25013: PPUSH
25014: LD_EXP 109
25018: PUSH
25019: LD_VAR 0 1
25023: ARRAY
25024: PPUSH
25025: CALL_OW 505
// if not minerMinesList [ i ] then
25029: LD_EXP 109
25033: PUSH
25034: LD_VAR 0 1
25038: ARRAY
25039: NOT
25040: IFFALSE 25044
// continue ;
25042: GO 24983
// for j := minerMinesList [ i ] downto 1 do
25044: LD_ADDR_VAR 0 2
25048: PUSH
25049: DOUBLE
25050: LD_EXP 109
25054: PUSH
25055: LD_VAR 0 1
25059: ARRAY
25060: INC
25061: ST_TO_ADDR
25062: LD_INT 1
25064: PUSH
25065: FOR_DOWNTO
25066: IFFALSE 25316
// begin side := GetSide ( minersList [ i ] ) ;
25068: LD_ADDR_VAR 0 3
25072: PUSH
25073: LD_EXP 108
25077: PUSH
25078: LD_VAR 0 1
25082: ARRAY
25083: PPUSH
25084: CALL_OW 255
25088: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25089: LD_ADDR_VAR 0 4
25093: PUSH
25094: LD_EXP 109
25098: PUSH
25099: LD_VAR 0 1
25103: ARRAY
25104: PUSH
25105: LD_VAR 0 2
25109: ARRAY
25110: PUSH
25111: LD_INT 1
25113: ARRAY
25114: PPUSH
25115: LD_EXP 109
25119: PUSH
25120: LD_VAR 0 1
25124: ARRAY
25125: PUSH
25126: LD_VAR 0 2
25130: ARRAY
25131: PUSH
25132: LD_INT 2
25134: ARRAY
25135: PPUSH
25136: CALL_OW 428
25140: ST_TO_ADDR
// if not tmp then
25141: LD_VAR 0 4
25145: NOT
25146: IFFALSE 25150
// continue ;
25148: GO 25065
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25150: LD_VAR 0 4
25154: PUSH
25155: LD_INT 81
25157: PUSH
25158: LD_VAR 0 3
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PPUSH
25167: CALL_OW 69
25171: IN
25172: PUSH
25173: LD_EXP 109
25177: PUSH
25178: LD_VAR 0 1
25182: ARRAY
25183: PUSH
25184: LD_VAR 0 2
25188: ARRAY
25189: PUSH
25190: LD_INT 1
25192: ARRAY
25193: PPUSH
25194: LD_EXP 109
25198: PUSH
25199: LD_VAR 0 1
25203: ARRAY
25204: PUSH
25205: LD_VAR 0 2
25209: ARRAY
25210: PUSH
25211: LD_INT 2
25213: ARRAY
25214: PPUSH
25215: CALL_OW 458
25219: AND
25220: IFFALSE 25314
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25222: LD_EXP 109
25226: PUSH
25227: LD_VAR 0 1
25231: ARRAY
25232: PUSH
25233: LD_VAR 0 2
25237: ARRAY
25238: PUSH
25239: LD_INT 1
25241: ARRAY
25242: PPUSH
25243: LD_EXP 109
25247: PUSH
25248: LD_VAR 0 1
25252: ARRAY
25253: PUSH
25254: LD_VAR 0 2
25258: ARRAY
25259: PUSH
25260: LD_INT 2
25262: ARRAY
25263: PPUSH
25264: LD_VAR 0 3
25268: PPUSH
25269: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25273: LD_ADDR_EXP 109
25277: PUSH
25278: LD_EXP 109
25282: PPUSH
25283: LD_VAR 0 1
25287: PPUSH
25288: LD_EXP 109
25292: PUSH
25293: LD_VAR 0 1
25297: ARRAY
25298: PPUSH
25299: LD_VAR 0 2
25303: PPUSH
25304: CALL_OW 3
25308: PPUSH
25309: CALL_OW 1
25313: ST_TO_ADDR
// end ; end ;
25314: GO 25065
25316: POP
25317: POP
// end ;
25318: GO 24983
25320: POP
25321: POP
// end ;
25322: PPOPN 4
25324: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25325: LD_INT 0
25327: PPUSH
25328: PPUSH
// result := false ;
25329: LD_ADDR_VAR 0 4
25333: PUSH
25334: LD_INT 0
25336: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25337: LD_VAR 0 1
25341: PPUSH
25342: CALL_OW 264
25346: PUSH
25347: LD_EXP 32
25351: EQUAL
25352: NOT
25353: IFFALSE 25357
// exit ;
25355: GO 25597
// index := GetElementIndex ( minersList , unit ) ;
25357: LD_ADDR_VAR 0 5
25361: PUSH
25362: LD_EXP 108
25366: PPUSH
25367: LD_VAR 0 1
25371: PPUSH
25372: CALL 31581 0 2
25376: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25377: LD_EXP 109
25381: PUSH
25382: LD_VAR 0 5
25386: ARRAY
25387: PUSH
25388: LD_EXP 110
25392: GREATEREQUAL
25393: IFFALSE 25397
// exit ;
25395: GO 25597
// ComMoveXY ( unit , x , y ) ;
25397: LD_VAR 0 1
25401: PPUSH
25402: LD_VAR 0 2
25406: PPUSH
25407: LD_VAR 0 3
25411: PPUSH
25412: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25416: LD_INT 35
25418: PPUSH
25419: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25423: LD_VAR 0 1
25427: PPUSH
25428: LD_VAR 0 2
25432: PPUSH
25433: LD_VAR 0 3
25437: PPUSH
25438: CALL 62354 0 3
25442: NOT
25443: PUSH
25444: LD_VAR 0 1
25448: PPUSH
25449: CALL_OW 314
25453: AND
25454: IFFALSE 25458
// exit ;
25456: GO 25597
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25458: LD_VAR 0 2
25462: PPUSH
25463: LD_VAR 0 3
25467: PPUSH
25468: CALL_OW 428
25472: PUSH
25473: LD_VAR 0 1
25477: EQUAL
25478: PUSH
25479: LD_VAR 0 1
25483: PPUSH
25484: CALL_OW 314
25488: NOT
25489: AND
25490: IFFALSE 25416
// PlaySoundXY ( x , y , PlantMine ) ;
25492: LD_VAR 0 2
25496: PPUSH
25497: LD_VAR 0 3
25501: PPUSH
25502: LD_STRING PlantMine
25504: PPUSH
25505: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25509: LD_VAR 0 2
25513: PPUSH
25514: LD_VAR 0 3
25518: PPUSH
25519: LD_VAR 0 1
25523: PPUSH
25524: CALL_OW 255
25528: PPUSH
25529: LD_INT 0
25531: PPUSH
25532: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25536: LD_ADDR_EXP 109
25540: PUSH
25541: LD_EXP 109
25545: PPUSH
25546: LD_VAR 0 5
25550: PUSH
25551: LD_EXP 109
25555: PUSH
25556: LD_VAR 0 5
25560: ARRAY
25561: PUSH
25562: LD_INT 1
25564: PLUS
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PPUSH
25570: LD_VAR 0 2
25574: PUSH
25575: LD_VAR 0 3
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PPUSH
25584: CALL 31796 0 3
25588: ST_TO_ADDR
// result := true ;
25589: LD_ADDR_VAR 0 4
25593: PUSH
25594: LD_INT 1
25596: ST_TO_ADDR
// end ;
25597: LD_VAR 0 4
25601: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25602: LD_INT 0
25604: PPUSH
25605: PPUSH
25606: PPUSH
// if not unit in minersList then
25607: LD_VAR 0 1
25611: PUSH
25612: LD_EXP 108
25616: IN
25617: NOT
25618: IFFALSE 25622
// exit ;
25620: GO 26014
// index := GetElementIndex ( minersList , unit ) ;
25622: LD_ADDR_VAR 0 6
25626: PUSH
25627: LD_EXP 108
25631: PPUSH
25632: LD_VAR 0 1
25636: PPUSH
25637: CALL 31581 0 2
25641: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25642: LD_ADDR_VAR 0 5
25646: PUSH
25647: DOUBLE
25648: LD_EXP 109
25652: PUSH
25653: LD_VAR 0 6
25657: ARRAY
25658: INC
25659: ST_TO_ADDR
25660: LD_INT 1
25662: PUSH
25663: FOR_DOWNTO
25664: IFFALSE 25825
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25666: LD_EXP 109
25670: PUSH
25671: LD_VAR 0 6
25675: ARRAY
25676: PUSH
25677: LD_VAR 0 5
25681: ARRAY
25682: PUSH
25683: LD_INT 1
25685: ARRAY
25686: PUSH
25687: LD_VAR 0 2
25691: EQUAL
25692: PUSH
25693: LD_EXP 109
25697: PUSH
25698: LD_VAR 0 6
25702: ARRAY
25703: PUSH
25704: LD_VAR 0 5
25708: ARRAY
25709: PUSH
25710: LD_INT 2
25712: ARRAY
25713: PUSH
25714: LD_VAR 0 3
25718: EQUAL
25719: AND
25720: IFFALSE 25823
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25722: LD_EXP 109
25726: PUSH
25727: LD_VAR 0 6
25731: ARRAY
25732: PUSH
25733: LD_VAR 0 5
25737: ARRAY
25738: PUSH
25739: LD_INT 1
25741: ARRAY
25742: PPUSH
25743: LD_EXP 109
25747: PUSH
25748: LD_VAR 0 6
25752: ARRAY
25753: PUSH
25754: LD_VAR 0 5
25758: ARRAY
25759: PUSH
25760: LD_INT 2
25762: ARRAY
25763: PPUSH
25764: LD_VAR 0 1
25768: PPUSH
25769: CALL_OW 255
25773: PPUSH
25774: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25778: LD_ADDR_EXP 109
25782: PUSH
25783: LD_EXP 109
25787: PPUSH
25788: LD_VAR 0 6
25792: PPUSH
25793: LD_EXP 109
25797: PUSH
25798: LD_VAR 0 6
25802: ARRAY
25803: PPUSH
25804: LD_VAR 0 5
25808: PPUSH
25809: CALL_OW 3
25813: PPUSH
25814: CALL_OW 1
25818: ST_TO_ADDR
// exit ;
25819: POP
25820: POP
25821: GO 26014
// end ; end ;
25823: GO 25663
25825: POP
25826: POP
// for i := minerMinesList [ index ] downto 1 do
25827: LD_ADDR_VAR 0 5
25831: PUSH
25832: DOUBLE
25833: LD_EXP 109
25837: PUSH
25838: LD_VAR 0 6
25842: ARRAY
25843: INC
25844: ST_TO_ADDR
25845: LD_INT 1
25847: PUSH
25848: FOR_DOWNTO
25849: IFFALSE 26012
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25851: LD_EXP 109
25855: PUSH
25856: LD_VAR 0 6
25860: ARRAY
25861: PUSH
25862: LD_VAR 0 5
25866: ARRAY
25867: PUSH
25868: LD_INT 1
25870: ARRAY
25871: PPUSH
25872: LD_EXP 109
25876: PUSH
25877: LD_VAR 0 6
25881: ARRAY
25882: PUSH
25883: LD_VAR 0 5
25887: ARRAY
25888: PUSH
25889: LD_INT 2
25891: ARRAY
25892: PPUSH
25893: LD_VAR 0 2
25897: PPUSH
25898: LD_VAR 0 3
25902: PPUSH
25903: CALL_OW 298
25907: PUSH
25908: LD_INT 6
25910: LESS
25911: IFFALSE 26010
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25913: LD_EXP 109
25917: PUSH
25918: LD_VAR 0 6
25922: ARRAY
25923: PUSH
25924: LD_VAR 0 5
25928: ARRAY
25929: PUSH
25930: LD_INT 1
25932: ARRAY
25933: PPUSH
25934: LD_EXP 109
25938: PUSH
25939: LD_VAR 0 6
25943: ARRAY
25944: PUSH
25945: LD_VAR 0 5
25949: ARRAY
25950: PUSH
25951: LD_INT 2
25953: ARRAY
25954: PPUSH
25955: LD_VAR 0 1
25959: PPUSH
25960: CALL_OW 255
25964: PPUSH
25965: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25969: LD_ADDR_EXP 109
25973: PUSH
25974: LD_EXP 109
25978: PPUSH
25979: LD_VAR 0 6
25983: PPUSH
25984: LD_EXP 109
25988: PUSH
25989: LD_VAR 0 6
25993: ARRAY
25994: PPUSH
25995: LD_VAR 0 5
25999: PPUSH
26000: CALL_OW 3
26004: PPUSH
26005: CALL_OW 1
26009: ST_TO_ADDR
// end ; end ;
26010: GO 25848
26012: POP
26013: POP
// end ;
26014: LD_VAR 0 4
26018: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26019: LD_INT 0
26021: PPUSH
26022: PPUSH
26023: PPUSH
26024: PPUSH
26025: PPUSH
26026: PPUSH
26027: PPUSH
26028: PPUSH
26029: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26030: LD_VAR 0 1
26034: PPUSH
26035: CALL_OW 264
26039: PUSH
26040: LD_EXP 32
26044: EQUAL
26045: NOT
26046: PUSH
26047: LD_VAR 0 1
26051: PUSH
26052: LD_EXP 108
26056: IN
26057: NOT
26058: OR
26059: IFFALSE 26063
// exit ;
26061: GO 26385
// index := GetElementIndex ( minersList , unit ) ;
26063: LD_ADDR_VAR 0 6
26067: PUSH
26068: LD_EXP 108
26072: PPUSH
26073: LD_VAR 0 1
26077: PPUSH
26078: CALL 31581 0 2
26082: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26083: LD_ADDR_VAR 0 8
26087: PUSH
26088: LD_EXP 110
26092: PUSH
26093: LD_EXP 109
26097: PUSH
26098: LD_VAR 0 6
26102: ARRAY
26103: MINUS
26104: ST_TO_ADDR
// if not minesFreeAmount then
26105: LD_VAR 0 8
26109: NOT
26110: IFFALSE 26114
// exit ;
26112: GO 26385
// tmp := [ ] ;
26114: LD_ADDR_VAR 0 7
26118: PUSH
26119: EMPTY
26120: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26121: LD_ADDR_VAR 0 5
26125: PUSH
26126: DOUBLE
26127: LD_INT 1
26129: DEC
26130: ST_TO_ADDR
26131: LD_VAR 0 8
26135: PUSH
26136: FOR_TO
26137: IFFALSE 26332
// begin _d := rand ( 0 , 5 ) ;
26139: LD_ADDR_VAR 0 11
26143: PUSH
26144: LD_INT 0
26146: PPUSH
26147: LD_INT 5
26149: PPUSH
26150: CALL_OW 12
26154: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26155: LD_ADDR_VAR 0 12
26159: PUSH
26160: LD_INT 2
26162: PPUSH
26163: LD_INT 6
26165: PPUSH
26166: CALL_OW 12
26170: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26171: LD_ADDR_VAR 0 9
26175: PUSH
26176: LD_VAR 0 2
26180: PPUSH
26181: LD_VAR 0 11
26185: PPUSH
26186: LD_VAR 0 12
26190: PPUSH
26191: CALL_OW 272
26195: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26196: LD_ADDR_VAR 0 10
26200: PUSH
26201: LD_VAR 0 3
26205: PPUSH
26206: LD_VAR 0 11
26210: PPUSH
26211: LD_VAR 0 12
26215: PPUSH
26216: CALL_OW 273
26220: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26221: LD_VAR 0 9
26225: PPUSH
26226: LD_VAR 0 10
26230: PPUSH
26231: CALL_OW 488
26235: PUSH
26236: LD_VAR 0 9
26240: PUSH
26241: LD_VAR 0 10
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_VAR 0 7
26254: IN
26255: NOT
26256: AND
26257: PUSH
26258: LD_VAR 0 9
26262: PPUSH
26263: LD_VAR 0 10
26267: PPUSH
26268: CALL_OW 458
26272: NOT
26273: AND
26274: IFFALSE 26316
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26276: LD_ADDR_VAR 0 7
26280: PUSH
26281: LD_VAR 0 7
26285: PPUSH
26286: LD_VAR 0 7
26290: PUSH
26291: LD_INT 1
26293: PLUS
26294: PPUSH
26295: LD_VAR 0 9
26299: PUSH
26300: LD_VAR 0 10
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PPUSH
26309: CALL_OW 1
26313: ST_TO_ADDR
26314: GO 26330
// i := i - 1 ;
26316: LD_ADDR_VAR 0 5
26320: PUSH
26321: LD_VAR 0 5
26325: PUSH
26326: LD_INT 1
26328: MINUS
26329: ST_TO_ADDR
// end ;
26330: GO 26136
26332: POP
26333: POP
// for i in tmp do
26334: LD_ADDR_VAR 0 5
26338: PUSH
26339: LD_VAR 0 7
26343: PUSH
26344: FOR_IN
26345: IFFALSE 26383
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26347: LD_VAR 0 1
26351: PPUSH
26352: LD_VAR 0 5
26356: PUSH
26357: LD_INT 1
26359: ARRAY
26360: PPUSH
26361: LD_VAR 0 5
26365: PUSH
26366: LD_INT 2
26368: ARRAY
26369: PPUSH
26370: CALL 25325 0 3
26374: NOT
26375: IFFALSE 26381
// exit ;
26377: POP
26378: POP
26379: GO 26385
26381: GO 26344
26383: POP
26384: POP
// end ;
26385: LD_VAR 0 4
26389: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26390: LD_INT 0
26392: PPUSH
26393: PPUSH
26394: PPUSH
26395: PPUSH
26396: PPUSH
26397: PPUSH
26398: PPUSH
// if not GetClass ( unit ) = class_sniper then
26399: LD_VAR 0 1
26403: PPUSH
26404: CALL_OW 257
26408: PUSH
26409: LD_INT 5
26411: EQUAL
26412: NOT
26413: IFFALSE 26417
// exit ;
26415: GO 26805
// dist := 8 ;
26417: LD_ADDR_VAR 0 5
26421: PUSH
26422: LD_INT 8
26424: ST_TO_ADDR
// viewRange := 12 ;
26425: LD_ADDR_VAR 0 7
26429: PUSH
26430: LD_INT 12
26432: ST_TO_ADDR
// side := GetSide ( unit ) ;
26433: LD_ADDR_VAR 0 6
26437: PUSH
26438: LD_VAR 0 1
26442: PPUSH
26443: CALL_OW 255
26447: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26448: LD_INT 61
26450: PPUSH
26451: LD_VAR 0 6
26455: PPUSH
26456: CALL_OW 321
26460: PUSH
26461: LD_INT 2
26463: EQUAL
26464: IFFALSE 26474
// viewRange := 16 ;
26466: LD_ADDR_VAR 0 7
26470: PUSH
26471: LD_INT 16
26473: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26474: LD_VAR 0 1
26478: PPUSH
26479: LD_VAR 0 2
26483: PPUSH
26484: LD_VAR 0 3
26488: PPUSH
26489: CALL_OW 297
26493: PUSH
26494: LD_VAR 0 5
26498: GREATER
26499: IFFALSE 26578
// begin ComMoveXY ( unit , x , y ) ;
26501: LD_VAR 0 1
26505: PPUSH
26506: LD_VAR 0 2
26510: PPUSH
26511: LD_VAR 0 3
26515: PPUSH
26516: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26520: LD_INT 35
26522: PPUSH
26523: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26527: LD_VAR 0 1
26531: PPUSH
26532: LD_VAR 0 2
26536: PPUSH
26537: LD_VAR 0 3
26541: PPUSH
26542: CALL 62354 0 3
26546: NOT
26547: IFFALSE 26551
// exit ;
26549: GO 26805
// until GetDistUnitXY ( unit , x , y ) < dist ;
26551: LD_VAR 0 1
26555: PPUSH
26556: LD_VAR 0 2
26560: PPUSH
26561: LD_VAR 0 3
26565: PPUSH
26566: CALL_OW 297
26570: PUSH
26571: LD_VAR 0 5
26575: LESS
26576: IFFALSE 26520
// end ; ComTurnXY ( unit , x , y ) ;
26578: LD_VAR 0 1
26582: PPUSH
26583: LD_VAR 0 2
26587: PPUSH
26588: LD_VAR 0 3
26592: PPUSH
26593: CALL_OW 118
// wait ( 5 ) ;
26597: LD_INT 5
26599: PPUSH
26600: CALL_OW 67
// _d := GetDir ( unit ) ;
26604: LD_ADDR_VAR 0 10
26608: PUSH
26609: LD_VAR 0 1
26613: PPUSH
26614: CALL_OW 254
26618: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26619: LD_ADDR_VAR 0 8
26623: PUSH
26624: LD_VAR 0 1
26628: PPUSH
26629: CALL_OW 250
26633: PPUSH
26634: LD_VAR 0 10
26638: PPUSH
26639: LD_VAR 0 5
26643: PPUSH
26644: CALL_OW 272
26648: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26649: LD_ADDR_VAR 0 9
26653: PUSH
26654: LD_VAR 0 1
26658: PPUSH
26659: CALL_OW 251
26663: PPUSH
26664: LD_VAR 0 10
26668: PPUSH
26669: LD_VAR 0 5
26673: PPUSH
26674: CALL_OW 273
26678: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26679: LD_VAR 0 8
26683: PPUSH
26684: LD_VAR 0 9
26688: PPUSH
26689: CALL_OW 488
26693: NOT
26694: IFFALSE 26698
// exit ;
26696: GO 26805
// ComAnimCustom ( unit , 1 ) ;
26698: LD_VAR 0 1
26702: PPUSH
26703: LD_INT 1
26705: PPUSH
26706: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26710: LD_VAR 0 8
26714: PPUSH
26715: LD_VAR 0 9
26719: PPUSH
26720: LD_VAR 0 6
26724: PPUSH
26725: LD_VAR 0 7
26729: PPUSH
26730: CALL_OW 330
// repeat wait ( 1 ) ;
26734: LD_INT 1
26736: PPUSH
26737: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26741: LD_VAR 0 1
26745: PPUSH
26746: CALL_OW 316
26750: PUSH
26751: LD_VAR 0 1
26755: PPUSH
26756: CALL_OW 314
26760: OR
26761: PUSH
26762: LD_VAR 0 1
26766: PPUSH
26767: CALL_OW 302
26771: NOT
26772: OR
26773: PUSH
26774: LD_VAR 0 1
26778: PPUSH
26779: CALL_OW 301
26783: OR
26784: IFFALSE 26734
// RemoveSeeing ( _x , _y , side ) ;
26786: LD_VAR 0 8
26790: PPUSH
26791: LD_VAR 0 9
26795: PPUSH
26796: LD_VAR 0 6
26800: PPUSH
26801: CALL_OW 331
// end ; end_of_file
26805: LD_VAR 0 4
26809: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26810: LD_INT 0
26812: PPUSH
26813: PPUSH
// if exist_mode then
26814: LD_VAR 0 2
26818: IFFALSE 26843
// unit := CreateCharacter ( prefix & ident ) else
26820: LD_ADDR_VAR 0 5
26824: PUSH
26825: LD_VAR 0 3
26829: PUSH
26830: LD_VAR 0 1
26834: STR
26835: PPUSH
26836: CALL_OW 34
26840: ST_TO_ADDR
26841: GO 26858
// unit := NewCharacter ( ident ) ;
26843: LD_ADDR_VAR 0 5
26847: PUSH
26848: LD_VAR 0 1
26852: PPUSH
26853: CALL_OW 25
26857: ST_TO_ADDR
// result := unit ;
26858: LD_ADDR_VAR 0 4
26862: PUSH
26863: LD_VAR 0 5
26867: ST_TO_ADDR
// end ;
26868: LD_VAR 0 4
26872: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26873: LD_INT 0
26875: PPUSH
26876: PPUSH
// if not side or not nation then
26877: LD_VAR 0 1
26881: NOT
26882: PUSH
26883: LD_VAR 0 2
26887: NOT
26888: OR
26889: IFFALSE 26893
// exit ;
26891: GO 27661
// case nation of nation_american :
26893: LD_VAR 0 2
26897: PUSH
26898: LD_INT 1
26900: DOUBLE
26901: EQUAL
26902: IFTRUE 26906
26904: GO 27120
26906: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26907: LD_ADDR_VAR 0 4
26911: PUSH
26912: LD_INT 35
26914: PUSH
26915: LD_INT 45
26917: PUSH
26918: LD_INT 46
26920: PUSH
26921: LD_INT 47
26923: PUSH
26924: LD_INT 82
26926: PUSH
26927: LD_INT 83
26929: PUSH
26930: LD_INT 84
26932: PUSH
26933: LD_INT 85
26935: PUSH
26936: LD_INT 86
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: LD_INT 2
26944: PUSH
26945: LD_INT 6
26947: PUSH
26948: LD_INT 15
26950: PUSH
26951: LD_INT 16
26953: PUSH
26954: LD_INT 7
26956: PUSH
26957: LD_INT 12
26959: PUSH
26960: LD_INT 13
26962: PUSH
26963: LD_INT 10
26965: PUSH
26966: LD_INT 14
26968: PUSH
26969: LD_INT 20
26971: PUSH
26972: LD_INT 21
26974: PUSH
26975: LD_INT 22
26977: PUSH
26978: LD_INT 25
26980: PUSH
26981: LD_INT 32
26983: PUSH
26984: LD_INT 27
26986: PUSH
26987: LD_INT 36
26989: PUSH
26990: LD_INT 69
26992: PUSH
26993: LD_INT 39
26995: PUSH
26996: LD_INT 34
26998: PUSH
26999: LD_INT 40
27001: PUSH
27002: LD_INT 48
27004: PUSH
27005: LD_INT 49
27007: PUSH
27008: LD_INT 50
27010: PUSH
27011: LD_INT 51
27013: PUSH
27014: LD_INT 52
27016: PUSH
27017: LD_INT 53
27019: PUSH
27020: LD_INT 54
27022: PUSH
27023: LD_INT 55
27025: PUSH
27026: LD_INT 56
27028: PUSH
27029: LD_INT 57
27031: PUSH
27032: LD_INT 58
27034: PUSH
27035: LD_INT 59
27037: PUSH
27038: LD_INT 60
27040: PUSH
27041: LD_INT 61
27043: PUSH
27044: LD_INT 62
27046: PUSH
27047: LD_INT 80
27049: PUSH
27050: LD_INT 82
27052: PUSH
27053: LD_INT 83
27055: PUSH
27056: LD_INT 84
27058: PUSH
27059: LD_INT 85
27061: PUSH
27062: LD_INT 86
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: ST_TO_ADDR
27118: GO 27585
27120: LD_INT 2
27122: DOUBLE
27123: EQUAL
27124: IFTRUE 27128
27126: GO 27354
27128: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27129: LD_ADDR_VAR 0 4
27133: PUSH
27134: LD_INT 35
27136: PUSH
27137: LD_INT 45
27139: PUSH
27140: LD_INT 46
27142: PUSH
27143: LD_INT 47
27145: PUSH
27146: LD_INT 82
27148: PUSH
27149: LD_INT 83
27151: PUSH
27152: LD_INT 84
27154: PUSH
27155: LD_INT 85
27157: PUSH
27158: LD_INT 87
27160: PUSH
27161: LD_INT 70
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: LD_INT 11
27169: PUSH
27170: LD_INT 3
27172: PUSH
27173: LD_INT 4
27175: PUSH
27176: LD_INT 5
27178: PUSH
27179: LD_INT 6
27181: PUSH
27182: LD_INT 15
27184: PUSH
27185: LD_INT 18
27187: PUSH
27188: LD_INT 7
27190: PUSH
27191: LD_INT 17
27193: PUSH
27194: LD_INT 8
27196: PUSH
27197: LD_INT 20
27199: PUSH
27200: LD_INT 21
27202: PUSH
27203: LD_INT 22
27205: PUSH
27206: LD_INT 72
27208: PUSH
27209: LD_INT 26
27211: PUSH
27212: LD_INT 69
27214: PUSH
27215: LD_INT 39
27217: PUSH
27218: LD_INT 40
27220: PUSH
27221: LD_INT 41
27223: PUSH
27224: LD_INT 42
27226: PUSH
27227: LD_INT 43
27229: PUSH
27230: LD_INT 48
27232: PUSH
27233: LD_INT 49
27235: PUSH
27236: LD_INT 50
27238: PUSH
27239: LD_INT 51
27241: PUSH
27242: LD_INT 52
27244: PUSH
27245: LD_INT 53
27247: PUSH
27248: LD_INT 54
27250: PUSH
27251: LD_INT 55
27253: PUSH
27254: LD_INT 56
27256: PUSH
27257: LD_INT 60
27259: PUSH
27260: LD_INT 61
27262: PUSH
27263: LD_INT 62
27265: PUSH
27266: LD_INT 66
27268: PUSH
27269: LD_INT 67
27271: PUSH
27272: LD_INT 68
27274: PUSH
27275: LD_INT 81
27277: PUSH
27278: LD_INT 82
27280: PUSH
27281: LD_INT 83
27283: PUSH
27284: LD_INT 84
27286: PUSH
27287: LD_INT 85
27289: PUSH
27290: LD_INT 87
27292: PUSH
27293: LD_INT 88
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: ST_TO_ADDR
27352: GO 27585
27354: LD_INT 3
27356: DOUBLE
27357: EQUAL
27358: IFTRUE 27362
27360: GO 27584
27362: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27363: LD_ADDR_VAR 0 4
27367: PUSH
27368: LD_INT 46
27370: PUSH
27371: LD_INT 47
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: LD_INT 2
27379: PUSH
27380: LD_INT 82
27382: PUSH
27383: LD_INT 83
27385: PUSH
27386: LD_INT 84
27388: PUSH
27389: LD_INT 85
27391: PUSH
27392: LD_INT 86
27394: PUSH
27395: LD_INT 11
27397: PUSH
27398: LD_INT 9
27400: PUSH
27401: LD_INT 20
27403: PUSH
27404: LD_INT 19
27406: PUSH
27407: LD_INT 21
27409: PUSH
27410: LD_INT 24
27412: PUSH
27413: LD_INT 22
27415: PUSH
27416: LD_INT 25
27418: PUSH
27419: LD_INT 28
27421: PUSH
27422: LD_INT 29
27424: PUSH
27425: LD_INT 30
27427: PUSH
27428: LD_INT 31
27430: PUSH
27431: LD_INT 37
27433: PUSH
27434: LD_INT 38
27436: PUSH
27437: LD_INT 32
27439: PUSH
27440: LD_INT 27
27442: PUSH
27443: LD_INT 33
27445: PUSH
27446: LD_INT 69
27448: PUSH
27449: LD_INT 39
27451: PUSH
27452: LD_INT 34
27454: PUSH
27455: LD_INT 40
27457: PUSH
27458: LD_INT 71
27460: PUSH
27461: LD_INT 23
27463: PUSH
27464: LD_INT 44
27466: PUSH
27467: LD_INT 48
27469: PUSH
27470: LD_INT 49
27472: PUSH
27473: LD_INT 50
27475: PUSH
27476: LD_INT 51
27478: PUSH
27479: LD_INT 52
27481: PUSH
27482: LD_INT 53
27484: PUSH
27485: LD_INT 54
27487: PUSH
27488: LD_INT 55
27490: PUSH
27491: LD_INT 56
27493: PUSH
27494: LD_INT 57
27496: PUSH
27497: LD_INT 58
27499: PUSH
27500: LD_INT 59
27502: PUSH
27503: LD_INT 63
27505: PUSH
27506: LD_INT 64
27508: PUSH
27509: LD_INT 65
27511: PUSH
27512: LD_INT 82
27514: PUSH
27515: LD_INT 83
27517: PUSH
27518: LD_INT 84
27520: PUSH
27521: LD_INT 85
27523: PUSH
27524: LD_INT 86
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: ST_TO_ADDR
27582: GO 27585
27584: POP
// if state > - 1 and state < 3 then
27585: LD_VAR 0 3
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: GREATER
27594: PUSH
27595: LD_VAR 0 3
27599: PUSH
27600: LD_INT 3
27602: LESS
27603: AND
27604: IFFALSE 27661
// for i in result do
27606: LD_ADDR_VAR 0 5
27610: PUSH
27611: LD_VAR 0 4
27615: PUSH
27616: FOR_IN
27617: IFFALSE 27659
// if GetTech ( i , side ) <> state then
27619: LD_VAR 0 5
27623: PPUSH
27624: LD_VAR 0 1
27628: PPUSH
27629: CALL_OW 321
27633: PUSH
27634: LD_VAR 0 3
27638: NONEQUAL
27639: IFFALSE 27657
// result := result diff i ;
27641: LD_ADDR_VAR 0 4
27645: PUSH
27646: LD_VAR 0 4
27650: PUSH
27651: LD_VAR 0 5
27655: DIFF
27656: ST_TO_ADDR
27657: GO 27616
27659: POP
27660: POP
// end ;
27661: LD_VAR 0 4
27665: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27666: LD_INT 0
27668: PPUSH
27669: PPUSH
27670: PPUSH
// result := true ;
27671: LD_ADDR_VAR 0 3
27675: PUSH
27676: LD_INT 1
27678: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27679: LD_ADDR_VAR 0 5
27683: PUSH
27684: LD_VAR 0 2
27688: PPUSH
27689: CALL_OW 480
27693: ST_TO_ADDR
// if not tmp then
27694: LD_VAR 0 5
27698: NOT
27699: IFFALSE 27703
// exit ;
27701: GO 27752
// for i in tmp do
27703: LD_ADDR_VAR 0 4
27707: PUSH
27708: LD_VAR 0 5
27712: PUSH
27713: FOR_IN
27714: IFFALSE 27750
// if GetTech ( i , side ) <> state_researched then
27716: LD_VAR 0 4
27720: PPUSH
27721: LD_VAR 0 1
27725: PPUSH
27726: CALL_OW 321
27730: PUSH
27731: LD_INT 2
27733: NONEQUAL
27734: IFFALSE 27748
// begin result := false ;
27736: LD_ADDR_VAR 0 3
27740: PUSH
27741: LD_INT 0
27743: ST_TO_ADDR
// exit ;
27744: POP
27745: POP
27746: GO 27752
// end ;
27748: GO 27713
27750: POP
27751: POP
// end ;
27752: LD_VAR 0 3
27756: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27757: LD_INT 0
27759: PPUSH
27760: PPUSH
27761: PPUSH
27762: PPUSH
27763: PPUSH
27764: PPUSH
27765: PPUSH
27766: PPUSH
27767: PPUSH
27768: PPUSH
27769: PPUSH
27770: PPUSH
27771: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27772: LD_VAR 0 1
27776: NOT
27777: PUSH
27778: LD_VAR 0 1
27782: PPUSH
27783: CALL_OW 257
27787: PUSH
27788: LD_INT 9
27790: NONEQUAL
27791: OR
27792: IFFALSE 27796
// exit ;
27794: GO 28369
// side := GetSide ( unit ) ;
27796: LD_ADDR_VAR 0 9
27800: PUSH
27801: LD_VAR 0 1
27805: PPUSH
27806: CALL_OW 255
27810: ST_TO_ADDR
// tech_space := tech_spacanom ;
27811: LD_ADDR_VAR 0 12
27815: PUSH
27816: LD_INT 29
27818: ST_TO_ADDR
// tech_time := tech_taurad ;
27819: LD_ADDR_VAR 0 13
27823: PUSH
27824: LD_INT 28
27826: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27827: LD_ADDR_VAR 0 11
27831: PUSH
27832: LD_VAR 0 1
27836: PPUSH
27837: CALL_OW 310
27841: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27842: LD_VAR 0 11
27846: PPUSH
27847: CALL_OW 247
27851: PUSH
27852: LD_INT 2
27854: EQUAL
27855: IFFALSE 27859
// exit ;
27857: GO 28369
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27859: LD_ADDR_VAR 0 8
27863: PUSH
27864: LD_INT 81
27866: PUSH
27867: LD_VAR 0 9
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 3
27878: PUSH
27879: LD_INT 21
27881: PUSH
27882: LD_INT 3
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PPUSH
27897: CALL_OW 69
27901: ST_TO_ADDR
// if not tmp then
27902: LD_VAR 0 8
27906: NOT
27907: IFFALSE 27911
// exit ;
27909: GO 28369
// if in_unit then
27911: LD_VAR 0 11
27915: IFFALSE 27939
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27917: LD_ADDR_VAR 0 10
27921: PUSH
27922: LD_VAR 0 8
27926: PPUSH
27927: LD_VAR 0 11
27931: PPUSH
27932: CALL_OW 74
27936: ST_TO_ADDR
27937: GO 27959
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27939: LD_ADDR_VAR 0 10
27943: PUSH
27944: LD_VAR 0 8
27948: PPUSH
27949: LD_VAR 0 1
27953: PPUSH
27954: CALL_OW 74
27958: ST_TO_ADDR
// if not enemy then
27959: LD_VAR 0 10
27963: NOT
27964: IFFALSE 27968
// exit ;
27966: GO 28369
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27968: LD_VAR 0 11
27972: PUSH
27973: LD_VAR 0 11
27977: PPUSH
27978: LD_VAR 0 10
27982: PPUSH
27983: CALL_OW 296
27987: PUSH
27988: LD_INT 13
27990: GREATER
27991: AND
27992: PUSH
27993: LD_VAR 0 1
27997: PPUSH
27998: LD_VAR 0 10
28002: PPUSH
28003: CALL_OW 296
28007: PUSH
28008: LD_INT 12
28010: GREATER
28011: OR
28012: IFFALSE 28016
// exit ;
28014: GO 28369
// missile := [ 1 ] ;
28016: LD_ADDR_VAR 0 14
28020: PUSH
28021: LD_INT 1
28023: PUSH
28024: EMPTY
28025: LIST
28026: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28027: LD_VAR 0 9
28031: PPUSH
28032: LD_VAR 0 12
28036: PPUSH
28037: CALL_OW 325
28041: IFFALSE 28070
// missile := Insert ( missile , missile + 1 , 2 ) ;
28043: LD_ADDR_VAR 0 14
28047: PUSH
28048: LD_VAR 0 14
28052: PPUSH
28053: LD_VAR 0 14
28057: PUSH
28058: LD_INT 1
28060: PLUS
28061: PPUSH
28062: LD_INT 2
28064: PPUSH
28065: CALL_OW 2
28069: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28070: LD_VAR 0 9
28074: PPUSH
28075: LD_VAR 0 13
28079: PPUSH
28080: CALL_OW 325
28084: PUSH
28085: LD_VAR 0 10
28089: PPUSH
28090: CALL_OW 255
28094: PPUSH
28095: LD_VAR 0 13
28099: PPUSH
28100: CALL_OW 325
28104: NOT
28105: AND
28106: IFFALSE 28135
// missile := Insert ( missile , missile + 1 , 3 ) ;
28108: LD_ADDR_VAR 0 14
28112: PUSH
28113: LD_VAR 0 14
28117: PPUSH
28118: LD_VAR 0 14
28122: PUSH
28123: LD_INT 1
28125: PLUS
28126: PPUSH
28127: LD_INT 3
28129: PPUSH
28130: CALL_OW 2
28134: ST_TO_ADDR
// if missile < 2 then
28135: LD_VAR 0 14
28139: PUSH
28140: LD_INT 2
28142: LESS
28143: IFFALSE 28147
// exit ;
28145: GO 28369
// x := GetX ( enemy ) ;
28147: LD_ADDR_VAR 0 4
28151: PUSH
28152: LD_VAR 0 10
28156: PPUSH
28157: CALL_OW 250
28161: ST_TO_ADDR
// y := GetY ( enemy ) ;
28162: LD_ADDR_VAR 0 5
28166: PUSH
28167: LD_VAR 0 10
28171: PPUSH
28172: CALL_OW 251
28176: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28177: LD_ADDR_VAR 0 6
28181: PUSH
28182: LD_VAR 0 4
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PPUSH
28191: LD_INT 1
28193: PPUSH
28194: CALL_OW 12
28198: PLUS
28199: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28200: LD_ADDR_VAR 0 7
28204: PUSH
28205: LD_VAR 0 5
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PPUSH
28214: LD_INT 1
28216: PPUSH
28217: CALL_OW 12
28221: PLUS
28222: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28223: LD_VAR 0 6
28227: PPUSH
28228: LD_VAR 0 7
28232: PPUSH
28233: CALL_OW 488
28237: NOT
28238: IFFALSE 28260
// begin _x := x ;
28240: LD_ADDR_VAR 0 6
28244: PUSH
28245: LD_VAR 0 4
28249: ST_TO_ADDR
// _y := y ;
28250: LD_ADDR_VAR 0 7
28254: PUSH
28255: LD_VAR 0 5
28259: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28260: LD_ADDR_VAR 0 3
28264: PUSH
28265: LD_INT 1
28267: PPUSH
28268: LD_VAR 0 14
28272: PPUSH
28273: CALL_OW 12
28277: ST_TO_ADDR
// case i of 1 :
28278: LD_VAR 0 3
28282: PUSH
28283: LD_INT 1
28285: DOUBLE
28286: EQUAL
28287: IFTRUE 28291
28289: GO 28308
28291: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28292: LD_VAR 0 1
28296: PPUSH
28297: LD_VAR 0 10
28301: PPUSH
28302: CALL_OW 115
28306: GO 28369
28308: LD_INT 2
28310: DOUBLE
28311: EQUAL
28312: IFTRUE 28316
28314: GO 28338
28316: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28317: LD_VAR 0 1
28321: PPUSH
28322: LD_VAR 0 6
28326: PPUSH
28327: LD_VAR 0 7
28331: PPUSH
28332: CALL_OW 153
28336: GO 28369
28338: LD_INT 3
28340: DOUBLE
28341: EQUAL
28342: IFTRUE 28346
28344: GO 28368
28346: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28347: LD_VAR 0 1
28351: PPUSH
28352: LD_VAR 0 6
28356: PPUSH
28357: LD_VAR 0 7
28361: PPUSH
28362: CALL_OW 154
28366: GO 28369
28368: POP
// end ;
28369: LD_VAR 0 2
28373: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28374: LD_INT 0
28376: PPUSH
28377: PPUSH
28378: PPUSH
28379: PPUSH
28380: PPUSH
28381: PPUSH
// if not unit or not building then
28382: LD_VAR 0 1
28386: NOT
28387: PUSH
28388: LD_VAR 0 2
28392: NOT
28393: OR
28394: IFFALSE 28398
// exit ;
28396: GO 28556
// x := GetX ( building ) ;
28398: LD_ADDR_VAR 0 5
28402: PUSH
28403: LD_VAR 0 2
28407: PPUSH
28408: CALL_OW 250
28412: ST_TO_ADDR
// y := GetY ( building ) ;
28413: LD_ADDR_VAR 0 6
28417: PUSH
28418: LD_VAR 0 2
28422: PPUSH
28423: CALL_OW 251
28427: ST_TO_ADDR
// for i = 0 to 5 do
28428: LD_ADDR_VAR 0 4
28432: PUSH
28433: DOUBLE
28434: LD_INT 0
28436: DEC
28437: ST_TO_ADDR
28438: LD_INT 5
28440: PUSH
28441: FOR_TO
28442: IFFALSE 28554
// begin _x := ShiftX ( x , i , 3 ) ;
28444: LD_ADDR_VAR 0 7
28448: PUSH
28449: LD_VAR 0 5
28453: PPUSH
28454: LD_VAR 0 4
28458: PPUSH
28459: LD_INT 3
28461: PPUSH
28462: CALL_OW 272
28466: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28467: LD_ADDR_VAR 0 8
28471: PUSH
28472: LD_VAR 0 6
28476: PPUSH
28477: LD_VAR 0 4
28481: PPUSH
28482: LD_INT 3
28484: PPUSH
28485: CALL_OW 273
28489: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28490: LD_VAR 0 7
28494: PPUSH
28495: LD_VAR 0 8
28499: PPUSH
28500: CALL_OW 488
28504: NOT
28505: IFFALSE 28509
// continue ;
28507: GO 28441
// if HexInfo ( _x , _y ) = 0 then
28509: LD_VAR 0 7
28513: PPUSH
28514: LD_VAR 0 8
28518: PPUSH
28519: CALL_OW 428
28523: PUSH
28524: LD_INT 0
28526: EQUAL
28527: IFFALSE 28552
// begin ComMoveXY ( unit , _x , _y ) ;
28529: LD_VAR 0 1
28533: PPUSH
28534: LD_VAR 0 7
28538: PPUSH
28539: LD_VAR 0 8
28543: PPUSH
28544: CALL_OW 111
// exit ;
28548: POP
28549: POP
28550: GO 28556
// end ; end ;
28552: GO 28441
28554: POP
28555: POP
// end ;
28556: LD_VAR 0 3
28560: RET
// export function ScanBase ( side , base_area ) ; begin
28561: LD_INT 0
28563: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28564: LD_ADDR_VAR 0 3
28568: PUSH
28569: LD_VAR 0 2
28573: PPUSH
28574: LD_INT 81
28576: PUSH
28577: LD_VAR 0 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PPUSH
28586: CALL_OW 70
28590: ST_TO_ADDR
// end ;
28591: LD_VAR 0 3
28595: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28596: LD_INT 0
28598: PPUSH
28599: PPUSH
28600: PPUSH
28601: PPUSH
// result := false ;
28602: LD_ADDR_VAR 0 2
28606: PUSH
28607: LD_INT 0
28609: ST_TO_ADDR
// side := GetSide ( unit ) ;
28610: LD_ADDR_VAR 0 3
28614: PUSH
28615: LD_VAR 0 1
28619: PPUSH
28620: CALL_OW 255
28624: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28625: LD_ADDR_VAR 0 4
28629: PUSH
28630: LD_VAR 0 1
28634: PPUSH
28635: CALL_OW 248
28639: ST_TO_ADDR
// case nat of 1 :
28640: LD_VAR 0 4
28644: PUSH
28645: LD_INT 1
28647: DOUBLE
28648: EQUAL
28649: IFTRUE 28653
28651: GO 28664
28653: POP
// tech := tech_lassight ; 2 :
28654: LD_ADDR_VAR 0 5
28658: PUSH
28659: LD_INT 12
28661: ST_TO_ADDR
28662: GO 28703
28664: LD_INT 2
28666: DOUBLE
28667: EQUAL
28668: IFTRUE 28672
28670: GO 28683
28672: POP
// tech := tech_mortar ; 3 :
28673: LD_ADDR_VAR 0 5
28677: PUSH
28678: LD_INT 41
28680: ST_TO_ADDR
28681: GO 28703
28683: LD_INT 3
28685: DOUBLE
28686: EQUAL
28687: IFTRUE 28691
28689: GO 28702
28691: POP
// tech := tech_bazooka ; end ;
28692: LD_ADDR_VAR 0 5
28696: PUSH
28697: LD_INT 44
28699: ST_TO_ADDR
28700: GO 28703
28702: POP
// if Researched ( side , tech ) then
28703: LD_VAR 0 3
28707: PPUSH
28708: LD_VAR 0 5
28712: PPUSH
28713: CALL_OW 325
28717: IFFALSE 28744
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28719: LD_ADDR_VAR 0 2
28723: PUSH
28724: LD_INT 5
28726: PUSH
28727: LD_INT 8
28729: PUSH
28730: LD_INT 9
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: PUSH
28738: LD_VAR 0 4
28742: ARRAY
28743: ST_TO_ADDR
// end ;
28744: LD_VAR 0 2
28748: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28749: LD_INT 0
28751: PPUSH
28752: PPUSH
28753: PPUSH
// if not mines then
28754: LD_VAR 0 2
28758: NOT
28759: IFFALSE 28763
// exit ;
28761: GO 28907
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28763: LD_ADDR_VAR 0 5
28767: PUSH
28768: LD_INT 81
28770: PUSH
28771: LD_VAR 0 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 3
28782: PUSH
28783: LD_INT 21
28785: PUSH
28786: LD_INT 3
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PPUSH
28801: CALL_OW 69
28805: ST_TO_ADDR
// for i in mines do
28806: LD_ADDR_VAR 0 4
28810: PUSH
28811: LD_VAR 0 2
28815: PUSH
28816: FOR_IN
28817: IFFALSE 28905
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28819: LD_VAR 0 4
28823: PUSH
28824: LD_INT 1
28826: ARRAY
28827: PPUSH
28828: LD_VAR 0 4
28832: PUSH
28833: LD_INT 2
28835: ARRAY
28836: PPUSH
28837: CALL_OW 458
28841: NOT
28842: IFFALSE 28846
// continue ;
28844: GO 28816
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28846: LD_VAR 0 4
28850: PUSH
28851: LD_INT 1
28853: ARRAY
28854: PPUSH
28855: LD_VAR 0 4
28859: PUSH
28860: LD_INT 2
28862: ARRAY
28863: PPUSH
28864: CALL_OW 428
28868: PUSH
28869: LD_VAR 0 5
28873: IN
28874: IFFALSE 28903
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28876: LD_VAR 0 4
28880: PUSH
28881: LD_INT 1
28883: ARRAY
28884: PPUSH
28885: LD_VAR 0 4
28889: PUSH
28890: LD_INT 2
28892: ARRAY
28893: PPUSH
28894: LD_VAR 0 1
28898: PPUSH
28899: CALL_OW 456
// end ;
28903: GO 28816
28905: POP
28906: POP
// end ;
28907: LD_VAR 0 3
28911: RET
// export function Count ( array ) ; var i ; begin
28912: LD_INT 0
28914: PPUSH
28915: PPUSH
// result := 0 ;
28916: LD_ADDR_VAR 0 2
28920: PUSH
28921: LD_INT 0
28923: ST_TO_ADDR
// for i in array do
28924: LD_ADDR_VAR 0 3
28928: PUSH
28929: LD_VAR 0 1
28933: PUSH
28934: FOR_IN
28935: IFFALSE 28959
// if i then
28937: LD_VAR 0 3
28941: IFFALSE 28957
// result := result + 1 ;
28943: LD_ADDR_VAR 0 2
28947: PUSH
28948: LD_VAR 0 2
28952: PUSH
28953: LD_INT 1
28955: PLUS
28956: ST_TO_ADDR
28957: GO 28934
28959: POP
28960: POP
// end ;
28961: LD_VAR 0 2
28965: RET
// export function IsEmpty ( building ) ; begin
28966: LD_INT 0
28968: PPUSH
// if not building then
28969: LD_VAR 0 1
28973: NOT
28974: IFFALSE 28978
// exit ;
28976: GO 29021
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28978: LD_ADDR_VAR 0 2
28982: PUSH
28983: LD_VAR 0 1
28987: PUSH
28988: LD_INT 22
28990: PUSH
28991: LD_VAR 0 1
28995: PPUSH
28996: CALL_OW 255
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 58
29007: PUSH
29008: EMPTY
29009: LIST
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PPUSH
29015: CALL_OW 69
29019: IN
29020: ST_TO_ADDR
// end ;
29021: LD_VAR 0 2
29025: RET
// export function IsNotFull ( building ) ; begin
29026: LD_INT 0
29028: PPUSH
// if not building then
29029: LD_VAR 0 1
29033: NOT
29034: IFFALSE 29038
// exit ;
29036: GO 29057
// result := UnitsInside ( building ) < 6 ;
29038: LD_ADDR_VAR 0 2
29042: PUSH
29043: LD_VAR 0 1
29047: PPUSH
29048: CALL_OW 313
29052: PUSH
29053: LD_INT 6
29055: LESS
29056: ST_TO_ADDR
// end ;
29057: LD_VAR 0 2
29061: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29062: LD_INT 0
29064: PPUSH
29065: PPUSH
29066: PPUSH
29067: PPUSH
// tmp := [ ] ;
29068: LD_ADDR_VAR 0 3
29072: PUSH
29073: EMPTY
29074: ST_TO_ADDR
// list := [ ] ;
29075: LD_ADDR_VAR 0 5
29079: PUSH
29080: EMPTY
29081: ST_TO_ADDR
// for i = 16 to 25 do
29082: LD_ADDR_VAR 0 4
29086: PUSH
29087: DOUBLE
29088: LD_INT 16
29090: DEC
29091: ST_TO_ADDR
29092: LD_INT 25
29094: PUSH
29095: FOR_TO
29096: IFFALSE 29169
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29098: LD_ADDR_VAR 0 3
29102: PUSH
29103: LD_VAR 0 3
29107: PUSH
29108: LD_INT 22
29110: PUSH
29111: LD_VAR 0 1
29115: PPUSH
29116: CALL_OW 255
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 91
29127: PUSH
29128: LD_VAR 0 1
29132: PUSH
29133: LD_INT 6
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 30
29143: PUSH
29144: LD_VAR 0 4
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: PPUSH
29161: CALL_OW 69
29165: ADD
29166: ST_TO_ADDR
29167: GO 29095
29169: POP
29170: POP
// for i = 1 to tmp do
29171: LD_ADDR_VAR 0 4
29175: PUSH
29176: DOUBLE
29177: LD_INT 1
29179: DEC
29180: ST_TO_ADDR
29181: LD_VAR 0 3
29185: PUSH
29186: FOR_TO
29187: IFFALSE 29275
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29189: LD_ADDR_VAR 0 5
29193: PUSH
29194: LD_VAR 0 5
29198: PUSH
29199: LD_VAR 0 3
29203: PUSH
29204: LD_VAR 0 4
29208: ARRAY
29209: PPUSH
29210: CALL_OW 266
29214: PUSH
29215: LD_VAR 0 3
29219: PUSH
29220: LD_VAR 0 4
29224: ARRAY
29225: PPUSH
29226: CALL_OW 250
29230: PUSH
29231: LD_VAR 0 3
29235: PUSH
29236: LD_VAR 0 4
29240: ARRAY
29241: PPUSH
29242: CALL_OW 251
29246: PUSH
29247: LD_VAR 0 3
29251: PUSH
29252: LD_VAR 0 4
29256: ARRAY
29257: PPUSH
29258: CALL_OW 254
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: PUSH
29269: EMPTY
29270: LIST
29271: ADD
29272: ST_TO_ADDR
29273: GO 29186
29275: POP
29276: POP
// result := list ;
29277: LD_ADDR_VAR 0 2
29281: PUSH
29282: LD_VAR 0 5
29286: ST_TO_ADDR
// end ;
29287: LD_VAR 0 2
29291: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29292: LD_INT 0
29294: PPUSH
29295: PPUSH
29296: PPUSH
29297: PPUSH
29298: PPUSH
29299: PPUSH
29300: PPUSH
// if not factory then
29301: LD_VAR 0 1
29305: NOT
29306: IFFALSE 29310
// exit ;
29308: GO 29903
// if control = control_apeman then
29310: LD_VAR 0 4
29314: PUSH
29315: LD_INT 5
29317: EQUAL
29318: IFFALSE 29427
// begin tmp := UnitsInside ( factory ) ;
29320: LD_ADDR_VAR 0 8
29324: PUSH
29325: LD_VAR 0 1
29329: PPUSH
29330: CALL_OW 313
29334: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29335: LD_VAR 0 8
29339: PPUSH
29340: LD_INT 25
29342: PUSH
29343: LD_INT 12
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PPUSH
29350: CALL_OW 72
29354: NOT
29355: IFFALSE 29365
// control := control_manual ;
29357: LD_ADDR_VAR 0 4
29361: PUSH
29362: LD_INT 1
29364: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29365: LD_ADDR_VAR 0 8
29369: PUSH
29370: LD_VAR 0 1
29374: PPUSH
29375: CALL 29062 0 1
29379: ST_TO_ADDR
// if tmp then
29380: LD_VAR 0 8
29384: IFFALSE 29427
// begin for i in tmp do
29386: LD_ADDR_VAR 0 7
29390: PUSH
29391: LD_VAR 0 8
29395: PUSH
29396: FOR_IN
29397: IFFALSE 29425
// if i [ 1 ] = b_ext_radio then
29399: LD_VAR 0 7
29403: PUSH
29404: LD_INT 1
29406: ARRAY
29407: PUSH
29408: LD_INT 22
29410: EQUAL
29411: IFFALSE 29423
// begin control := control_remote ;
29413: LD_ADDR_VAR 0 4
29417: PUSH
29418: LD_INT 2
29420: ST_TO_ADDR
// break ;
29421: GO 29425
// end ;
29423: GO 29396
29425: POP
29426: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29427: LD_VAR 0 1
29431: PPUSH
29432: LD_VAR 0 2
29436: PPUSH
29437: LD_VAR 0 3
29441: PPUSH
29442: LD_VAR 0 4
29446: PPUSH
29447: LD_VAR 0 5
29451: PPUSH
29452: CALL_OW 448
29456: IFFALSE 29491
// begin result := [ chassis , engine , control , weapon ] ;
29458: LD_ADDR_VAR 0 6
29462: PUSH
29463: LD_VAR 0 2
29467: PUSH
29468: LD_VAR 0 3
29472: PUSH
29473: LD_VAR 0 4
29477: PUSH
29478: LD_VAR 0 5
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: ST_TO_ADDR
// exit ;
29489: GO 29903
// end ; _chassis := AvailableChassisList ( factory ) ;
29491: LD_ADDR_VAR 0 9
29495: PUSH
29496: LD_VAR 0 1
29500: PPUSH
29501: CALL_OW 475
29505: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29506: LD_ADDR_VAR 0 11
29510: PUSH
29511: LD_VAR 0 1
29515: PPUSH
29516: CALL_OW 476
29520: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29521: LD_ADDR_VAR 0 12
29525: PUSH
29526: LD_VAR 0 1
29530: PPUSH
29531: CALL_OW 477
29535: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29536: LD_ADDR_VAR 0 10
29540: PUSH
29541: LD_VAR 0 1
29545: PPUSH
29546: CALL_OW 478
29550: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29551: LD_VAR 0 9
29555: NOT
29556: PUSH
29557: LD_VAR 0 11
29561: NOT
29562: OR
29563: PUSH
29564: LD_VAR 0 12
29568: NOT
29569: OR
29570: PUSH
29571: LD_VAR 0 10
29575: NOT
29576: OR
29577: IFFALSE 29612
// begin result := [ chassis , engine , control , weapon ] ;
29579: LD_ADDR_VAR 0 6
29583: PUSH
29584: LD_VAR 0 2
29588: PUSH
29589: LD_VAR 0 3
29593: PUSH
29594: LD_VAR 0 4
29598: PUSH
29599: LD_VAR 0 5
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: ST_TO_ADDR
// exit ;
29610: GO 29903
// end ; if not chassis in _chassis then
29612: LD_VAR 0 2
29616: PUSH
29617: LD_VAR 0 9
29621: IN
29622: NOT
29623: IFFALSE 29649
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29625: LD_ADDR_VAR 0 2
29629: PUSH
29630: LD_VAR 0 9
29634: PUSH
29635: LD_INT 1
29637: PPUSH
29638: LD_VAR 0 9
29642: PPUSH
29643: CALL_OW 12
29647: ARRAY
29648: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29649: LD_VAR 0 2
29653: PPUSH
29654: LD_VAR 0 3
29658: PPUSH
29659: CALL 29908 0 2
29663: NOT
29664: IFFALSE 29723
// repeat engine := _engine [ 1 ] ;
29666: LD_ADDR_VAR 0 3
29670: PUSH
29671: LD_VAR 0 11
29675: PUSH
29676: LD_INT 1
29678: ARRAY
29679: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29680: LD_ADDR_VAR 0 11
29684: PUSH
29685: LD_VAR 0 11
29689: PPUSH
29690: LD_INT 1
29692: PPUSH
29693: CALL_OW 3
29697: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29698: LD_VAR 0 2
29702: PPUSH
29703: LD_VAR 0 3
29707: PPUSH
29708: CALL 29908 0 2
29712: PUSH
29713: LD_VAR 0 11
29717: PUSH
29718: EMPTY
29719: EQUAL
29720: OR
29721: IFFALSE 29666
// if not control in _control then
29723: LD_VAR 0 4
29727: PUSH
29728: LD_VAR 0 12
29732: IN
29733: NOT
29734: IFFALSE 29760
// control := _control [ rand ( 1 , _control ) ] ;
29736: LD_ADDR_VAR 0 4
29740: PUSH
29741: LD_VAR 0 12
29745: PUSH
29746: LD_INT 1
29748: PPUSH
29749: LD_VAR 0 12
29753: PPUSH
29754: CALL_OW 12
29758: ARRAY
29759: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29760: LD_VAR 0 2
29764: PPUSH
29765: LD_VAR 0 5
29769: PPUSH
29770: CALL 30128 0 2
29774: NOT
29775: IFFALSE 29834
// repeat weapon := _weapon [ 1 ] ;
29777: LD_ADDR_VAR 0 5
29781: PUSH
29782: LD_VAR 0 10
29786: PUSH
29787: LD_INT 1
29789: ARRAY
29790: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29791: LD_ADDR_VAR 0 10
29795: PUSH
29796: LD_VAR 0 10
29800: PPUSH
29801: LD_INT 1
29803: PPUSH
29804: CALL_OW 3
29808: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29809: LD_VAR 0 2
29813: PPUSH
29814: LD_VAR 0 5
29818: PPUSH
29819: CALL 30128 0 2
29823: PUSH
29824: LD_VAR 0 10
29828: PUSH
29829: EMPTY
29830: EQUAL
29831: OR
29832: IFFALSE 29777
// result := [ ] ;
29834: LD_ADDR_VAR 0 6
29838: PUSH
29839: EMPTY
29840: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29841: LD_VAR 0 1
29845: PPUSH
29846: LD_VAR 0 2
29850: PPUSH
29851: LD_VAR 0 3
29855: PPUSH
29856: LD_VAR 0 4
29860: PPUSH
29861: LD_VAR 0 5
29865: PPUSH
29866: CALL_OW 448
29870: IFFALSE 29903
// result := [ chassis , engine , control , weapon ] ;
29872: LD_ADDR_VAR 0 6
29876: PUSH
29877: LD_VAR 0 2
29881: PUSH
29882: LD_VAR 0 3
29886: PUSH
29887: LD_VAR 0 4
29891: PUSH
29892: LD_VAR 0 5
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: ST_TO_ADDR
// end ;
29903: LD_VAR 0 6
29907: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29908: LD_INT 0
29910: PPUSH
// if not chassis or not engine then
29911: LD_VAR 0 1
29915: NOT
29916: PUSH
29917: LD_VAR 0 2
29921: NOT
29922: OR
29923: IFFALSE 29927
// exit ;
29925: GO 30123
// case engine of engine_solar :
29927: LD_VAR 0 2
29931: PUSH
29932: LD_INT 2
29934: DOUBLE
29935: EQUAL
29936: IFTRUE 29940
29938: GO 29978
29940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29941: LD_ADDR_VAR 0 3
29945: PUSH
29946: LD_INT 11
29948: PUSH
29949: LD_INT 12
29951: PUSH
29952: LD_INT 13
29954: PUSH
29955: LD_INT 14
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: LD_INT 2
29963: PUSH
29964: LD_INT 3
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: ST_TO_ADDR
29976: GO 30107
29978: LD_INT 1
29980: DOUBLE
29981: EQUAL
29982: IFTRUE 29986
29984: GO 30048
29986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29987: LD_ADDR_VAR 0 3
29991: PUSH
29992: LD_INT 11
29994: PUSH
29995: LD_INT 12
29997: PUSH
29998: LD_INT 13
30000: PUSH
30001: LD_INT 14
30003: PUSH
30004: LD_INT 1
30006: PUSH
30007: LD_INT 2
30009: PUSH
30010: LD_INT 3
30012: PUSH
30013: LD_INT 4
30015: PUSH
30016: LD_INT 5
30018: PUSH
30019: LD_INT 21
30021: PUSH
30022: LD_INT 23
30024: PUSH
30025: LD_INT 22
30027: PUSH
30028: LD_INT 24
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: ST_TO_ADDR
30046: GO 30107
30048: LD_INT 3
30050: DOUBLE
30051: EQUAL
30052: IFTRUE 30056
30054: GO 30106
30056: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30057: LD_ADDR_VAR 0 3
30061: PUSH
30062: LD_INT 13
30064: PUSH
30065: LD_INT 14
30067: PUSH
30068: LD_INT 2
30070: PUSH
30071: LD_INT 3
30073: PUSH
30074: LD_INT 4
30076: PUSH
30077: LD_INT 5
30079: PUSH
30080: LD_INT 21
30082: PUSH
30083: LD_INT 22
30085: PUSH
30086: LD_INT 23
30088: PUSH
30089: LD_INT 24
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: ST_TO_ADDR
30104: GO 30107
30106: POP
// result := ( chassis in result ) ;
30107: LD_ADDR_VAR 0 3
30111: PUSH
30112: LD_VAR 0 1
30116: PUSH
30117: LD_VAR 0 3
30121: IN
30122: ST_TO_ADDR
// end ;
30123: LD_VAR 0 3
30127: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30128: LD_INT 0
30130: PPUSH
// if not chassis or not weapon then
30131: LD_VAR 0 1
30135: NOT
30136: PUSH
30137: LD_VAR 0 2
30141: NOT
30142: OR
30143: IFFALSE 30147
// exit ;
30145: GO 31209
// case weapon of us_machine_gun :
30147: LD_VAR 0 2
30151: PUSH
30152: LD_INT 2
30154: DOUBLE
30155: EQUAL
30156: IFTRUE 30160
30158: GO 30190
30160: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30161: LD_ADDR_VAR 0 3
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: LD_INT 2
30171: PUSH
30172: LD_INT 3
30174: PUSH
30175: LD_INT 4
30177: PUSH
30178: LD_INT 5
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: ST_TO_ADDR
30188: GO 31193
30190: LD_INT 3
30192: DOUBLE
30193: EQUAL
30194: IFTRUE 30198
30196: GO 30228
30198: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30199: LD_ADDR_VAR 0 3
30203: PUSH
30204: LD_INT 1
30206: PUSH
30207: LD_INT 2
30209: PUSH
30210: LD_INT 3
30212: PUSH
30213: LD_INT 4
30215: PUSH
30216: LD_INT 5
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: ST_TO_ADDR
30226: GO 31193
30228: LD_INT 11
30230: DOUBLE
30231: EQUAL
30232: IFTRUE 30236
30234: GO 30266
30236: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30237: LD_ADDR_VAR 0 3
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: LD_INT 2
30247: PUSH
30248: LD_INT 3
30250: PUSH
30251: LD_INT 4
30253: PUSH
30254: LD_INT 5
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: ST_TO_ADDR
30264: GO 31193
30266: LD_INT 4
30268: DOUBLE
30269: EQUAL
30270: IFTRUE 30274
30272: GO 30300
30274: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30275: LD_ADDR_VAR 0 3
30279: PUSH
30280: LD_INT 2
30282: PUSH
30283: LD_INT 3
30285: PUSH
30286: LD_INT 4
30288: PUSH
30289: LD_INT 5
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: ST_TO_ADDR
30298: GO 31193
30300: LD_INT 5
30302: DOUBLE
30303: EQUAL
30304: IFTRUE 30308
30306: GO 30334
30308: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30309: LD_ADDR_VAR 0 3
30313: PUSH
30314: LD_INT 2
30316: PUSH
30317: LD_INT 3
30319: PUSH
30320: LD_INT 4
30322: PUSH
30323: LD_INT 5
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: ST_TO_ADDR
30332: GO 31193
30334: LD_INT 9
30336: DOUBLE
30337: EQUAL
30338: IFTRUE 30342
30340: GO 30368
30342: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30343: LD_ADDR_VAR 0 3
30347: PUSH
30348: LD_INT 2
30350: PUSH
30351: LD_INT 3
30353: PUSH
30354: LD_INT 4
30356: PUSH
30357: LD_INT 5
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: ST_TO_ADDR
30366: GO 31193
30368: LD_INT 7
30370: DOUBLE
30371: EQUAL
30372: IFTRUE 30376
30374: GO 30402
30376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30377: LD_ADDR_VAR 0 3
30381: PUSH
30382: LD_INT 2
30384: PUSH
30385: LD_INT 3
30387: PUSH
30388: LD_INT 4
30390: PUSH
30391: LD_INT 5
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: ST_TO_ADDR
30400: GO 31193
30402: LD_INT 12
30404: DOUBLE
30405: EQUAL
30406: IFTRUE 30410
30408: GO 30436
30410: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30411: LD_ADDR_VAR 0 3
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: LD_INT 3
30421: PUSH
30422: LD_INT 4
30424: PUSH
30425: LD_INT 5
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: ST_TO_ADDR
30434: GO 31193
30436: LD_INT 13
30438: DOUBLE
30439: EQUAL
30440: IFTRUE 30444
30442: GO 30470
30444: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30445: LD_ADDR_VAR 0 3
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: LD_INT 3
30455: PUSH
30456: LD_INT 4
30458: PUSH
30459: LD_INT 5
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: ST_TO_ADDR
30468: GO 31193
30470: LD_INT 14
30472: DOUBLE
30473: EQUAL
30474: IFTRUE 30478
30476: GO 30496
30478: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30479: LD_ADDR_VAR 0 3
30483: PUSH
30484: LD_INT 4
30486: PUSH
30487: LD_INT 5
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: ST_TO_ADDR
30494: GO 31193
30496: LD_INT 6
30498: DOUBLE
30499: EQUAL
30500: IFTRUE 30504
30502: GO 30522
30504: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30505: LD_ADDR_VAR 0 3
30509: PUSH
30510: LD_INT 4
30512: PUSH
30513: LD_INT 5
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: ST_TO_ADDR
30520: GO 31193
30522: LD_INT 10
30524: DOUBLE
30525: EQUAL
30526: IFTRUE 30530
30528: GO 30548
30530: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30531: LD_ADDR_VAR 0 3
30535: PUSH
30536: LD_INT 4
30538: PUSH
30539: LD_INT 5
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: ST_TO_ADDR
30546: GO 31193
30548: LD_INT 22
30550: DOUBLE
30551: EQUAL
30552: IFTRUE 30556
30554: GO 30582
30556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30557: LD_ADDR_VAR 0 3
30561: PUSH
30562: LD_INT 11
30564: PUSH
30565: LD_INT 12
30567: PUSH
30568: LD_INT 13
30570: PUSH
30571: LD_INT 14
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: ST_TO_ADDR
30580: GO 31193
30582: LD_INT 23
30584: DOUBLE
30585: EQUAL
30586: IFTRUE 30590
30588: GO 30616
30590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30591: LD_ADDR_VAR 0 3
30595: PUSH
30596: LD_INT 11
30598: PUSH
30599: LD_INT 12
30601: PUSH
30602: LD_INT 13
30604: PUSH
30605: LD_INT 14
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: ST_TO_ADDR
30614: GO 31193
30616: LD_INT 24
30618: DOUBLE
30619: EQUAL
30620: IFTRUE 30624
30622: GO 30650
30624: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30625: LD_ADDR_VAR 0 3
30629: PUSH
30630: LD_INT 11
30632: PUSH
30633: LD_INT 12
30635: PUSH
30636: LD_INT 13
30638: PUSH
30639: LD_INT 14
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: ST_TO_ADDR
30648: GO 31193
30650: LD_INT 30
30652: DOUBLE
30653: EQUAL
30654: IFTRUE 30658
30656: GO 30684
30658: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30659: LD_ADDR_VAR 0 3
30663: PUSH
30664: LD_INT 11
30666: PUSH
30667: LD_INT 12
30669: PUSH
30670: LD_INT 13
30672: PUSH
30673: LD_INT 14
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: ST_TO_ADDR
30682: GO 31193
30684: LD_INT 25
30686: DOUBLE
30687: EQUAL
30688: IFTRUE 30692
30690: GO 30710
30692: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30693: LD_ADDR_VAR 0 3
30697: PUSH
30698: LD_INT 13
30700: PUSH
30701: LD_INT 14
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: ST_TO_ADDR
30708: GO 31193
30710: LD_INT 27
30712: DOUBLE
30713: EQUAL
30714: IFTRUE 30718
30716: GO 30736
30718: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30719: LD_ADDR_VAR 0 3
30723: PUSH
30724: LD_INT 13
30726: PUSH
30727: LD_INT 14
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: ST_TO_ADDR
30734: GO 31193
30736: LD_EXP 30
30740: DOUBLE
30741: EQUAL
30742: IFTRUE 30746
30744: GO 30772
30746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30747: LD_ADDR_VAR 0 3
30751: PUSH
30752: LD_INT 11
30754: PUSH
30755: LD_INT 12
30757: PUSH
30758: LD_INT 13
30760: PUSH
30761: LD_INT 14
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: ST_TO_ADDR
30770: GO 31193
30772: LD_INT 28
30774: DOUBLE
30775: EQUAL
30776: IFTRUE 30780
30778: GO 30798
30780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30781: LD_ADDR_VAR 0 3
30785: PUSH
30786: LD_INT 13
30788: PUSH
30789: LD_INT 14
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: ST_TO_ADDR
30796: GO 31193
30798: LD_INT 29
30800: DOUBLE
30801: EQUAL
30802: IFTRUE 30806
30804: GO 30824
30806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30807: LD_ADDR_VAR 0 3
30811: PUSH
30812: LD_INT 13
30814: PUSH
30815: LD_INT 14
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: ST_TO_ADDR
30822: GO 31193
30824: LD_INT 31
30826: DOUBLE
30827: EQUAL
30828: IFTRUE 30832
30830: GO 30850
30832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30833: LD_ADDR_VAR 0 3
30837: PUSH
30838: LD_INT 13
30840: PUSH
30841: LD_INT 14
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: ST_TO_ADDR
30848: GO 31193
30850: LD_INT 26
30852: DOUBLE
30853: EQUAL
30854: IFTRUE 30858
30856: GO 30876
30858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30859: LD_ADDR_VAR 0 3
30863: PUSH
30864: LD_INT 13
30866: PUSH
30867: LD_INT 14
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: ST_TO_ADDR
30874: GO 31193
30876: LD_INT 42
30878: DOUBLE
30879: EQUAL
30880: IFTRUE 30884
30882: GO 30910
30884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30885: LD_ADDR_VAR 0 3
30889: PUSH
30890: LD_INT 21
30892: PUSH
30893: LD_INT 22
30895: PUSH
30896: LD_INT 23
30898: PUSH
30899: LD_INT 24
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: ST_TO_ADDR
30908: GO 31193
30910: LD_INT 43
30912: DOUBLE
30913: EQUAL
30914: IFTRUE 30918
30916: GO 30944
30918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30919: LD_ADDR_VAR 0 3
30923: PUSH
30924: LD_INT 21
30926: PUSH
30927: LD_INT 22
30929: PUSH
30930: LD_INT 23
30932: PUSH
30933: LD_INT 24
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: ST_TO_ADDR
30942: GO 31193
30944: LD_INT 44
30946: DOUBLE
30947: EQUAL
30948: IFTRUE 30952
30950: GO 30978
30952: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30953: LD_ADDR_VAR 0 3
30957: PUSH
30958: LD_INT 21
30960: PUSH
30961: LD_INT 22
30963: PUSH
30964: LD_INT 23
30966: PUSH
30967: LD_INT 24
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: ST_TO_ADDR
30976: GO 31193
30978: LD_INT 45
30980: DOUBLE
30981: EQUAL
30982: IFTRUE 30986
30984: GO 31012
30986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30987: LD_ADDR_VAR 0 3
30991: PUSH
30992: LD_INT 21
30994: PUSH
30995: LD_INT 22
30997: PUSH
30998: LD_INT 23
31000: PUSH
31001: LD_INT 24
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: ST_TO_ADDR
31010: GO 31193
31012: LD_INT 49
31014: DOUBLE
31015: EQUAL
31016: IFTRUE 31020
31018: GO 31046
31020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31021: LD_ADDR_VAR 0 3
31025: PUSH
31026: LD_INT 21
31028: PUSH
31029: LD_INT 22
31031: PUSH
31032: LD_INT 23
31034: PUSH
31035: LD_INT 24
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: ST_TO_ADDR
31044: GO 31193
31046: LD_INT 51
31048: DOUBLE
31049: EQUAL
31050: IFTRUE 31054
31052: GO 31080
31054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31055: LD_ADDR_VAR 0 3
31059: PUSH
31060: LD_INT 21
31062: PUSH
31063: LD_INT 22
31065: PUSH
31066: LD_INT 23
31068: PUSH
31069: LD_INT 24
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: ST_TO_ADDR
31078: GO 31193
31080: LD_INT 52
31082: DOUBLE
31083: EQUAL
31084: IFTRUE 31088
31086: GO 31114
31088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31089: LD_ADDR_VAR 0 3
31093: PUSH
31094: LD_INT 21
31096: PUSH
31097: LD_INT 22
31099: PUSH
31100: LD_INT 23
31102: PUSH
31103: LD_INT 24
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: ST_TO_ADDR
31112: GO 31193
31114: LD_INT 53
31116: DOUBLE
31117: EQUAL
31118: IFTRUE 31122
31120: GO 31140
31122: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31123: LD_ADDR_VAR 0 3
31127: PUSH
31128: LD_INT 23
31130: PUSH
31131: LD_INT 24
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: ST_TO_ADDR
31138: GO 31193
31140: LD_INT 46
31142: DOUBLE
31143: EQUAL
31144: IFTRUE 31148
31146: GO 31166
31148: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31149: LD_ADDR_VAR 0 3
31153: PUSH
31154: LD_INT 23
31156: PUSH
31157: LD_INT 24
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: ST_TO_ADDR
31164: GO 31193
31166: LD_INT 47
31168: DOUBLE
31169: EQUAL
31170: IFTRUE 31174
31172: GO 31192
31174: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31175: LD_ADDR_VAR 0 3
31179: PUSH
31180: LD_INT 23
31182: PUSH
31183: LD_INT 24
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: ST_TO_ADDR
31190: GO 31193
31192: POP
// result := ( chassis in result ) ;
31193: LD_ADDR_VAR 0 3
31197: PUSH
31198: LD_VAR 0 1
31202: PUSH
31203: LD_VAR 0 3
31207: IN
31208: ST_TO_ADDR
// end ;
31209: LD_VAR 0 3
31213: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31214: LD_INT 0
31216: PPUSH
31217: PPUSH
31218: PPUSH
31219: PPUSH
31220: PPUSH
31221: PPUSH
31222: PPUSH
// result := array ;
31223: LD_ADDR_VAR 0 5
31227: PUSH
31228: LD_VAR 0 1
31232: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31233: LD_VAR 0 1
31237: NOT
31238: PUSH
31239: LD_VAR 0 2
31243: NOT
31244: OR
31245: PUSH
31246: LD_VAR 0 3
31250: NOT
31251: OR
31252: PUSH
31253: LD_VAR 0 2
31257: PUSH
31258: LD_VAR 0 1
31262: GREATER
31263: OR
31264: PUSH
31265: LD_VAR 0 3
31269: PUSH
31270: LD_VAR 0 1
31274: GREATER
31275: OR
31276: IFFALSE 31280
// exit ;
31278: GO 31576
// if direction then
31280: LD_VAR 0 4
31284: IFFALSE 31348
// begin d := 1 ;
31286: LD_ADDR_VAR 0 9
31290: PUSH
31291: LD_INT 1
31293: ST_TO_ADDR
// if i_from > i_to then
31294: LD_VAR 0 2
31298: PUSH
31299: LD_VAR 0 3
31303: GREATER
31304: IFFALSE 31330
// length := ( array - i_from ) + i_to else
31306: LD_ADDR_VAR 0 11
31310: PUSH
31311: LD_VAR 0 1
31315: PUSH
31316: LD_VAR 0 2
31320: MINUS
31321: PUSH
31322: LD_VAR 0 3
31326: PLUS
31327: ST_TO_ADDR
31328: GO 31346
// length := i_to - i_from ;
31330: LD_ADDR_VAR 0 11
31334: PUSH
31335: LD_VAR 0 3
31339: PUSH
31340: LD_VAR 0 2
31344: MINUS
31345: ST_TO_ADDR
// end else
31346: GO 31409
// begin d := - 1 ;
31348: LD_ADDR_VAR 0 9
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: ST_TO_ADDR
// if i_from > i_to then
31357: LD_VAR 0 2
31361: PUSH
31362: LD_VAR 0 3
31366: GREATER
31367: IFFALSE 31387
// length := i_from - i_to else
31369: LD_ADDR_VAR 0 11
31373: PUSH
31374: LD_VAR 0 2
31378: PUSH
31379: LD_VAR 0 3
31383: MINUS
31384: ST_TO_ADDR
31385: GO 31409
// length := ( array - i_to ) + i_from ;
31387: LD_ADDR_VAR 0 11
31391: PUSH
31392: LD_VAR 0 1
31396: PUSH
31397: LD_VAR 0 3
31401: MINUS
31402: PUSH
31403: LD_VAR 0 2
31407: PLUS
31408: ST_TO_ADDR
// end ; if not length then
31409: LD_VAR 0 11
31413: NOT
31414: IFFALSE 31418
// exit ;
31416: GO 31576
// tmp := array ;
31418: LD_ADDR_VAR 0 10
31422: PUSH
31423: LD_VAR 0 1
31427: ST_TO_ADDR
// for i = 1 to length do
31428: LD_ADDR_VAR 0 6
31432: PUSH
31433: DOUBLE
31434: LD_INT 1
31436: DEC
31437: ST_TO_ADDR
31438: LD_VAR 0 11
31442: PUSH
31443: FOR_TO
31444: IFFALSE 31564
// begin for j = 1 to array do
31446: LD_ADDR_VAR 0 7
31450: PUSH
31451: DOUBLE
31452: LD_INT 1
31454: DEC
31455: ST_TO_ADDR
31456: LD_VAR 0 1
31460: PUSH
31461: FOR_TO
31462: IFFALSE 31550
// begin k := j + d ;
31464: LD_ADDR_VAR 0 8
31468: PUSH
31469: LD_VAR 0 7
31473: PUSH
31474: LD_VAR 0 9
31478: PLUS
31479: ST_TO_ADDR
// if k > array then
31480: LD_VAR 0 8
31484: PUSH
31485: LD_VAR 0 1
31489: GREATER
31490: IFFALSE 31500
// k := 1 ;
31492: LD_ADDR_VAR 0 8
31496: PUSH
31497: LD_INT 1
31499: ST_TO_ADDR
// if not k then
31500: LD_VAR 0 8
31504: NOT
31505: IFFALSE 31517
// k := array ;
31507: LD_ADDR_VAR 0 8
31511: PUSH
31512: LD_VAR 0 1
31516: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31517: LD_ADDR_VAR 0 10
31521: PUSH
31522: LD_VAR 0 10
31526: PPUSH
31527: LD_VAR 0 8
31531: PPUSH
31532: LD_VAR 0 1
31536: PUSH
31537: LD_VAR 0 7
31541: ARRAY
31542: PPUSH
31543: CALL_OW 1
31547: ST_TO_ADDR
// end ;
31548: GO 31461
31550: POP
31551: POP
// array := tmp ;
31552: LD_ADDR_VAR 0 1
31556: PUSH
31557: LD_VAR 0 10
31561: ST_TO_ADDR
// end ;
31562: GO 31443
31564: POP
31565: POP
// result := array ;
31566: LD_ADDR_VAR 0 5
31570: PUSH
31571: LD_VAR 0 1
31575: ST_TO_ADDR
// end ;
31576: LD_VAR 0 5
31580: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31581: LD_INT 0
31583: PPUSH
31584: PPUSH
// result := 0 ;
31585: LD_ADDR_VAR 0 3
31589: PUSH
31590: LD_INT 0
31592: ST_TO_ADDR
// if not array or not value in array then
31593: LD_VAR 0 1
31597: NOT
31598: PUSH
31599: LD_VAR 0 2
31603: PUSH
31604: LD_VAR 0 1
31608: IN
31609: NOT
31610: OR
31611: IFFALSE 31615
// exit ;
31613: GO 31669
// for i = 1 to array do
31615: LD_ADDR_VAR 0 4
31619: PUSH
31620: DOUBLE
31621: LD_INT 1
31623: DEC
31624: ST_TO_ADDR
31625: LD_VAR 0 1
31629: PUSH
31630: FOR_TO
31631: IFFALSE 31667
// if value = array [ i ] then
31633: LD_VAR 0 2
31637: PUSH
31638: LD_VAR 0 1
31642: PUSH
31643: LD_VAR 0 4
31647: ARRAY
31648: EQUAL
31649: IFFALSE 31665
// begin result := i ;
31651: LD_ADDR_VAR 0 3
31655: PUSH
31656: LD_VAR 0 4
31660: ST_TO_ADDR
// exit ;
31661: POP
31662: POP
31663: GO 31669
// end ;
31665: GO 31630
31667: POP
31668: POP
// end ;
31669: LD_VAR 0 3
31673: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31674: LD_INT 0
31676: PPUSH
// vc_chassis := chassis ;
31677: LD_ADDR_OWVAR 37
31681: PUSH
31682: LD_VAR 0 1
31686: ST_TO_ADDR
// vc_engine := engine ;
31687: LD_ADDR_OWVAR 39
31691: PUSH
31692: LD_VAR 0 2
31696: ST_TO_ADDR
// vc_control := control ;
31697: LD_ADDR_OWVAR 38
31701: PUSH
31702: LD_VAR 0 3
31706: ST_TO_ADDR
// vc_weapon := weapon ;
31707: LD_ADDR_OWVAR 40
31711: PUSH
31712: LD_VAR 0 4
31716: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31717: LD_ADDR_OWVAR 41
31721: PUSH
31722: LD_VAR 0 5
31726: ST_TO_ADDR
// end ;
31727: LD_VAR 0 6
31731: RET
// export function WantPlant ( unit ) ; var task ; begin
31732: LD_INT 0
31734: PPUSH
31735: PPUSH
// result := false ;
31736: LD_ADDR_VAR 0 2
31740: PUSH
31741: LD_INT 0
31743: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31744: LD_ADDR_VAR 0 3
31748: PUSH
31749: LD_VAR 0 1
31753: PPUSH
31754: CALL_OW 437
31758: ST_TO_ADDR
// if task then
31759: LD_VAR 0 3
31763: IFFALSE 31791
// if task [ 1 ] [ 1 ] = p then
31765: LD_VAR 0 3
31769: PUSH
31770: LD_INT 1
31772: ARRAY
31773: PUSH
31774: LD_INT 1
31776: ARRAY
31777: PUSH
31778: LD_STRING p
31780: EQUAL
31781: IFFALSE 31791
// result := true ;
31783: LD_ADDR_VAR 0 2
31787: PUSH
31788: LD_INT 1
31790: ST_TO_ADDR
// end ;
31791: LD_VAR 0 2
31795: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31796: LD_INT 0
31798: PPUSH
31799: PPUSH
31800: PPUSH
31801: PPUSH
// if pos < 1 then
31802: LD_VAR 0 2
31806: PUSH
31807: LD_INT 1
31809: LESS
31810: IFFALSE 31814
// exit ;
31812: GO 32117
// if pos = 1 then
31814: LD_VAR 0 2
31818: PUSH
31819: LD_INT 1
31821: EQUAL
31822: IFFALSE 31855
// result := Replace ( arr , pos [ 1 ] , value ) else
31824: LD_ADDR_VAR 0 4
31828: PUSH
31829: LD_VAR 0 1
31833: PPUSH
31834: LD_VAR 0 2
31838: PUSH
31839: LD_INT 1
31841: ARRAY
31842: PPUSH
31843: LD_VAR 0 3
31847: PPUSH
31848: CALL_OW 1
31852: ST_TO_ADDR
31853: GO 32117
// begin tmp := arr ;
31855: LD_ADDR_VAR 0 6
31859: PUSH
31860: LD_VAR 0 1
31864: ST_TO_ADDR
// s_arr := [ tmp ] ;
31865: LD_ADDR_VAR 0 7
31869: PUSH
31870: LD_VAR 0 6
31874: PUSH
31875: EMPTY
31876: LIST
31877: ST_TO_ADDR
// for i = 1 to pos - 1 do
31878: LD_ADDR_VAR 0 5
31882: PUSH
31883: DOUBLE
31884: LD_INT 1
31886: DEC
31887: ST_TO_ADDR
31888: LD_VAR 0 2
31892: PUSH
31893: LD_INT 1
31895: MINUS
31896: PUSH
31897: FOR_TO
31898: IFFALSE 31943
// begin tmp := tmp [ pos [ i ] ] ;
31900: LD_ADDR_VAR 0 6
31904: PUSH
31905: LD_VAR 0 6
31909: PUSH
31910: LD_VAR 0 2
31914: PUSH
31915: LD_VAR 0 5
31919: ARRAY
31920: ARRAY
31921: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31922: LD_ADDR_VAR 0 7
31926: PUSH
31927: LD_VAR 0 7
31931: PUSH
31932: LD_VAR 0 6
31936: PUSH
31937: EMPTY
31938: LIST
31939: ADD
31940: ST_TO_ADDR
// end ;
31941: GO 31897
31943: POP
31944: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31945: LD_ADDR_VAR 0 6
31949: PUSH
31950: LD_VAR 0 6
31954: PPUSH
31955: LD_VAR 0 2
31959: PUSH
31960: LD_VAR 0 2
31964: ARRAY
31965: PPUSH
31966: LD_VAR 0 3
31970: PPUSH
31971: CALL_OW 1
31975: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31976: LD_ADDR_VAR 0 7
31980: PUSH
31981: LD_VAR 0 7
31985: PPUSH
31986: LD_VAR 0 7
31990: PPUSH
31991: LD_VAR 0 6
31995: PPUSH
31996: CALL_OW 1
32000: ST_TO_ADDR
// for i = s_arr downto 2 do
32001: LD_ADDR_VAR 0 5
32005: PUSH
32006: DOUBLE
32007: LD_VAR 0 7
32011: INC
32012: ST_TO_ADDR
32013: LD_INT 2
32015: PUSH
32016: FOR_DOWNTO
32017: IFFALSE 32101
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32019: LD_ADDR_VAR 0 6
32023: PUSH
32024: LD_VAR 0 7
32028: PUSH
32029: LD_VAR 0 5
32033: PUSH
32034: LD_INT 1
32036: MINUS
32037: ARRAY
32038: PPUSH
32039: LD_VAR 0 2
32043: PUSH
32044: LD_VAR 0 5
32048: PUSH
32049: LD_INT 1
32051: MINUS
32052: ARRAY
32053: PPUSH
32054: LD_VAR 0 7
32058: PUSH
32059: LD_VAR 0 5
32063: ARRAY
32064: PPUSH
32065: CALL_OW 1
32069: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32070: LD_ADDR_VAR 0 7
32074: PUSH
32075: LD_VAR 0 7
32079: PPUSH
32080: LD_VAR 0 5
32084: PUSH
32085: LD_INT 1
32087: MINUS
32088: PPUSH
32089: LD_VAR 0 6
32093: PPUSH
32094: CALL_OW 1
32098: ST_TO_ADDR
// end ;
32099: GO 32016
32101: POP
32102: POP
// result := s_arr [ 1 ] ;
32103: LD_ADDR_VAR 0 4
32107: PUSH
32108: LD_VAR 0 7
32112: PUSH
32113: LD_INT 1
32115: ARRAY
32116: ST_TO_ADDR
// end ; end ;
32117: LD_VAR 0 4
32121: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32122: LD_INT 0
32124: PPUSH
32125: PPUSH
// if not list then
32126: LD_VAR 0 1
32130: NOT
32131: IFFALSE 32135
// exit ;
32133: GO 32226
// i := list [ pos1 ] ;
32135: LD_ADDR_VAR 0 5
32139: PUSH
32140: LD_VAR 0 1
32144: PUSH
32145: LD_VAR 0 2
32149: ARRAY
32150: ST_TO_ADDR
// if not i then
32151: LD_VAR 0 5
32155: NOT
32156: IFFALSE 32160
// exit ;
32158: GO 32226
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32160: LD_ADDR_VAR 0 1
32164: PUSH
32165: LD_VAR 0 1
32169: PPUSH
32170: LD_VAR 0 2
32174: PPUSH
32175: LD_VAR 0 1
32179: PUSH
32180: LD_VAR 0 3
32184: ARRAY
32185: PPUSH
32186: CALL_OW 1
32190: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32191: LD_ADDR_VAR 0 1
32195: PUSH
32196: LD_VAR 0 1
32200: PPUSH
32201: LD_VAR 0 3
32205: PPUSH
32206: LD_VAR 0 5
32210: PPUSH
32211: CALL_OW 1
32215: ST_TO_ADDR
// result := list ;
32216: LD_ADDR_VAR 0 4
32220: PUSH
32221: LD_VAR 0 1
32225: ST_TO_ADDR
// end ;
32226: LD_VAR 0 4
32230: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32231: LD_INT 0
32233: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32234: LD_ADDR_VAR 0 5
32238: PUSH
32239: LD_VAR 0 1
32243: PPUSH
32244: CALL_OW 250
32248: PPUSH
32249: LD_VAR 0 1
32253: PPUSH
32254: CALL_OW 251
32258: PPUSH
32259: LD_VAR 0 2
32263: PPUSH
32264: LD_VAR 0 3
32268: PPUSH
32269: LD_VAR 0 4
32273: PPUSH
32274: CALL 32284 0 5
32278: ST_TO_ADDR
// end ;
32279: LD_VAR 0 5
32283: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32284: LD_INT 0
32286: PPUSH
32287: PPUSH
32288: PPUSH
32289: PPUSH
// if not list then
32290: LD_VAR 0 3
32294: NOT
32295: IFFALSE 32299
// exit ;
32297: GO 32687
// result := [ ] ;
32299: LD_ADDR_VAR 0 6
32303: PUSH
32304: EMPTY
32305: ST_TO_ADDR
// for i in list do
32306: LD_ADDR_VAR 0 7
32310: PUSH
32311: LD_VAR 0 3
32315: PUSH
32316: FOR_IN
32317: IFFALSE 32519
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32319: LD_ADDR_VAR 0 9
32323: PUSH
32324: LD_VAR 0 7
32328: PPUSH
32329: LD_VAR 0 1
32333: PPUSH
32334: LD_VAR 0 2
32338: PPUSH
32339: CALL_OW 297
32343: ST_TO_ADDR
// if not result then
32344: LD_VAR 0 6
32348: NOT
32349: IFFALSE 32375
// result := [ [ i , tmp ] ] else
32351: LD_ADDR_VAR 0 6
32355: PUSH
32356: LD_VAR 0 7
32360: PUSH
32361: LD_VAR 0 9
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: EMPTY
32371: LIST
32372: ST_TO_ADDR
32373: GO 32517
// begin if result [ result ] [ 2 ] < tmp then
32375: LD_VAR 0 6
32379: PUSH
32380: LD_VAR 0 6
32384: ARRAY
32385: PUSH
32386: LD_INT 2
32388: ARRAY
32389: PUSH
32390: LD_VAR 0 9
32394: LESS
32395: IFFALSE 32437
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32397: LD_ADDR_VAR 0 6
32401: PUSH
32402: LD_VAR 0 6
32406: PPUSH
32407: LD_VAR 0 6
32411: PUSH
32412: LD_INT 1
32414: PLUS
32415: PPUSH
32416: LD_VAR 0 7
32420: PUSH
32421: LD_VAR 0 9
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PPUSH
32430: CALL_OW 2
32434: ST_TO_ADDR
32435: GO 32517
// for j = 1 to result do
32437: LD_ADDR_VAR 0 8
32441: PUSH
32442: DOUBLE
32443: LD_INT 1
32445: DEC
32446: ST_TO_ADDR
32447: LD_VAR 0 6
32451: PUSH
32452: FOR_TO
32453: IFFALSE 32515
// begin if tmp < result [ j ] [ 2 ] then
32455: LD_VAR 0 9
32459: PUSH
32460: LD_VAR 0 6
32464: PUSH
32465: LD_VAR 0 8
32469: ARRAY
32470: PUSH
32471: LD_INT 2
32473: ARRAY
32474: LESS
32475: IFFALSE 32513
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32477: LD_ADDR_VAR 0 6
32481: PUSH
32482: LD_VAR 0 6
32486: PPUSH
32487: LD_VAR 0 8
32491: PPUSH
32492: LD_VAR 0 7
32496: PUSH
32497: LD_VAR 0 9
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PPUSH
32506: CALL_OW 2
32510: ST_TO_ADDR
// break ;
32511: GO 32515
// end ; end ;
32513: GO 32452
32515: POP
32516: POP
// end ; end ;
32517: GO 32316
32519: POP
32520: POP
// if result and not asc then
32521: LD_VAR 0 6
32525: PUSH
32526: LD_VAR 0 4
32530: NOT
32531: AND
32532: IFFALSE 32607
// begin tmp := result ;
32534: LD_ADDR_VAR 0 9
32538: PUSH
32539: LD_VAR 0 6
32543: ST_TO_ADDR
// for i = tmp downto 1 do
32544: LD_ADDR_VAR 0 7
32548: PUSH
32549: DOUBLE
32550: LD_VAR 0 9
32554: INC
32555: ST_TO_ADDR
32556: LD_INT 1
32558: PUSH
32559: FOR_DOWNTO
32560: IFFALSE 32605
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32562: LD_ADDR_VAR 0 6
32566: PUSH
32567: LD_VAR 0 6
32571: PPUSH
32572: LD_VAR 0 9
32576: PUSH
32577: LD_VAR 0 7
32581: MINUS
32582: PUSH
32583: LD_INT 1
32585: PLUS
32586: PPUSH
32587: LD_VAR 0 9
32591: PUSH
32592: LD_VAR 0 7
32596: ARRAY
32597: PPUSH
32598: CALL_OW 1
32602: ST_TO_ADDR
32603: GO 32559
32605: POP
32606: POP
// end ; tmp := [ ] ;
32607: LD_ADDR_VAR 0 9
32611: PUSH
32612: EMPTY
32613: ST_TO_ADDR
// if mode then
32614: LD_VAR 0 5
32618: IFFALSE 32687
// begin for i = 1 to result do
32620: LD_ADDR_VAR 0 7
32624: PUSH
32625: DOUBLE
32626: LD_INT 1
32628: DEC
32629: ST_TO_ADDR
32630: LD_VAR 0 6
32634: PUSH
32635: FOR_TO
32636: IFFALSE 32675
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32638: LD_ADDR_VAR 0 9
32642: PUSH
32643: LD_VAR 0 9
32647: PPUSH
32648: LD_VAR 0 7
32652: PPUSH
32653: LD_VAR 0 6
32657: PUSH
32658: LD_VAR 0 7
32662: ARRAY
32663: PUSH
32664: LD_INT 1
32666: ARRAY
32667: PPUSH
32668: CALL_OW 1
32672: ST_TO_ADDR
32673: GO 32635
32675: POP
32676: POP
// result := tmp ;
32677: LD_ADDR_VAR 0 6
32681: PUSH
32682: LD_VAR 0 9
32686: ST_TO_ADDR
// end ; end ;
32687: LD_VAR 0 6
32691: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32692: LD_INT 0
32694: PPUSH
32695: PPUSH
32696: PPUSH
32697: PPUSH
32698: PPUSH
32699: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32700: LD_ADDR_VAR 0 5
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: ST_TO_ADDR
// if not x or not y then
32722: LD_VAR 0 2
32726: NOT
32727: PUSH
32728: LD_VAR 0 3
32732: NOT
32733: OR
32734: IFFALSE 32738
// exit ;
32736: GO 34390
// if not range then
32738: LD_VAR 0 4
32742: NOT
32743: IFFALSE 32753
// range := 10 ;
32745: LD_ADDR_VAR 0 4
32749: PUSH
32750: LD_INT 10
32752: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32753: LD_ADDR_VAR 0 8
32757: PUSH
32758: LD_INT 81
32760: PUSH
32761: LD_VAR 0 1
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 92
32772: PUSH
32773: LD_VAR 0 2
32777: PUSH
32778: LD_VAR 0 3
32782: PUSH
32783: LD_VAR 0 4
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 3
32796: PUSH
32797: LD_INT 21
32799: PUSH
32800: LD_INT 3
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: PPUSH
32816: CALL_OW 69
32820: ST_TO_ADDR
// if not tmp then
32821: LD_VAR 0 8
32825: NOT
32826: IFFALSE 32830
// exit ;
32828: GO 34390
// for i in tmp do
32830: LD_ADDR_VAR 0 6
32834: PUSH
32835: LD_VAR 0 8
32839: PUSH
32840: FOR_IN
32841: IFFALSE 34365
// begin points := [ 0 , 0 , 0 ] ;
32843: LD_ADDR_VAR 0 9
32847: PUSH
32848: LD_INT 0
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: ST_TO_ADDR
// bpoints := 1 ;
32862: LD_ADDR_VAR 0 10
32866: PUSH
32867: LD_INT 1
32869: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32870: LD_VAR 0 6
32874: PPUSH
32875: CALL_OW 247
32879: PUSH
32880: LD_INT 1
32882: DOUBLE
32883: EQUAL
32884: IFTRUE 32888
32886: GO 33466
32888: POP
// begin if GetClass ( i ) = 1 then
32889: LD_VAR 0 6
32893: PPUSH
32894: CALL_OW 257
32898: PUSH
32899: LD_INT 1
32901: EQUAL
32902: IFFALSE 32923
// points := [ 10 , 5 , 3 ] ;
32904: LD_ADDR_VAR 0 9
32908: PUSH
32909: LD_INT 10
32911: PUSH
32912: LD_INT 5
32914: PUSH
32915: LD_INT 3
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: LIST
32922: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32923: LD_VAR 0 6
32927: PPUSH
32928: CALL_OW 257
32932: PUSH
32933: LD_INT 2
32935: PUSH
32936: LD_INT 3
32938: PUSH
32939: LD_INT 4
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: LIST
32946: IN
32947: IFFALSE 32968
// points := [ 3 , 2 , 1 ] ;
32949: LD_ADDR_VAR 0 9
32953: PUSH
32954: LD_INT 3
32956: PUSH
32957: LD_INT 2
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32968: LD_VAR 0 6
32972: PPUSH
32973: CALL_OW 257
32977: PUSH
32978: LD_INT 5
32980: EQUAL
32981: IFFALSE 33002
// points := [ 130 , 5 , 2 ] ;
32983: LD_ADDR_VAR 0 9
32987: PUSH
32988: LD_INT 130
32990: PUSH
32991: LD_INT 5
32993: PUSH
32994: LD_INT 2
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: LIST
33001: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33002: LD_VAR 0 6
33006: PPUSH
33007: CALL_OW 257
33011: PUSH
33012: LD_INT 8
33014: EQUAL
33015: IFFALSE 33036
// points := [ 35 , 35 , 30 ] ;
33017: LD_ADDR_VAR 0 9
33021: PUSH
33022: LD_INT 35
33024: PUSH
33025: LD_INT 35
33027: PUSH
33028: LD_INT 30
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: LIST
33035: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33036: LD_VAR 0 6
33040: PPUSH
33041: CALL_OW 257
33045: PUSH
33046: LD_INT 9
33048: EQUAL
33049: IFFALSE 33070
// points := [ 20 , 55 , 40 ] ;
33051: LD_ADDR_VAR 0 9
33055: PUSH
33056: LD_INT 20
33058: PUSH
33059: LD_INT 55
33061: PUSH
33062: LD_INT 40
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: LIST
33069: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33070: LD_VAR 0 6
33074: PPUSH
33075: CALL_OW 257
33079: PUSH
33080: LD_INT 12
33082: PUSH
33083: LD_INT 16
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: IN
33090: IFFALSE 33111
// points := [ 5 , 3 , 2 ] ;
33092: LD_ADDR_VAR 0 9
33096: PUSH
33097: LD_INT 5
33099: PUSH
33100: LD_INT 3
33102: PUSH
33103: LD_INT 2
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: LIST
33110: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33111: LD_VAR 0 6
33115: PPUSH
33116: CALL_OW 257
33120: PUSH
33121: LD_INT 17
33123: EQUAL
33124: IFFALSE 33145
// points := [ 100 , 50 , 75 ] ;
33126: LD_ADDR_VAR 0 9
33130: PUSH
33131: LD_INT 100
33133: PUSH
33134: LD_INT 50
33136: PUSH
33137: LD_INT 75
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: LIST
33144: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33145: LD_VAR 0 6
33149: PPUSH
33150: CALL_OW 257
33154: PUSH
33155: LD_INT 15
33157: EQUAL
33158: IFFALSE 33179
// points := [ 10 , 5 , 3 ] ;
33160: LD_ADDR_VAR 0 9
33164: PUSH
33165: LD_INT 10
33167: PUSH
33168: LD_INT 5
33170: PUSH
33171: LD_INT 3
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: LIST
33178: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33179: LD_VAR 0 6
33183: PPUSH
33184: CALL_OW 257
33188: PUSH
33189: LD_INT 14
33191: EQUAL
33192: IFFALSE 33213
// points := [ 10 , 0 , 0 ] ;
33194: LD_ADDR_VAR 0 9
33198: PUSH
33199: LD_INT 10
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: LD_INT 0
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: LIST
33212: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33213: LD_VAR 0 6
33217: PPUSH
33218: CALL_OW 257
33222: PUSH
33223: LD_INT 11
33225: EQUAL
33226: IFFALSE 33247
// points := [ 30 , 10 , 5 ] ;
33228: LD_ADDR_VAR 0 9
33232: PUSH
33233: LD_INT 30
33235: PUSH
33236: LD_INT 10
33238: PUSH
33239: LD_INT 5
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: LIST
33246: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33247: LD_VAR 0 1
33251: PPUSH
33252: LD_INT 5
33254: PPUSH
33255: CALL_OW 321
33259: PUSH
33260: LD_INT 2
33262: EQUAL
33263: IFFALSE 33280
// bpoints := bpoints * 1.8 ;
33265: LD_ADDR_VAR 0 10
33269: PUSH
33270: LD_VAR 0 10
33274: PUSH
33275: LD_REAL  1.80000000000000E+0000
33278: MUL
33279: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33280: LD_VAR 0 6
33284: PPUSH
33285: CALL_OW 257
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: LD_INT 2
33295: PUSH
33296: LD_INT 3
33298: PUSH
33299: LD_INT 4
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: IN
33308: PUSH
33309: LD_VAR 0 1
33313: PPUSH
33314: LD_INT 51
33316: PPUSH
33317: CALL_OW 321
33321: PUSH
33322: LD_INT 2
33324: EQUAL
33325: AND
33326: IFFALSE 33343
// bpoints := bpoints * 1.2 ;
33328: LD_ADDR_VAR 0 10
33332: PUSH
33333: LD_VAR 0 10
33337: PUSH
33338: LD_REAL  1.20000000000000E+0000
33341: MUL
33342: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33343: LD_VAR 0 6
33347: PPUSH
33348: CALL_OW 257
33352: PUSH
33353: LD_INT 5
33355: PUSH
33356: LD_INT 7
33358: PUSH
33359: LD_INT 9
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: LIST
33366: IN
33367: PUSH
33368: LD_VAR 0 1
33372: PPUSH
33373: LD_INT 52
33375: PPUSH
33376: CALL_OW 321
33380: PUSH
33381: LD_INT 2
33383: EQUAL
33384: AND
33385: IFFALSE 33402
// bpoints := bpoints * 1.5 ;
33387: LD_ADDR_VAR 0 10
33391: PUSH
33392: LD_VAR 0 10
33396: PUSH
33397: LD_REAL  1.50000000000000E+0000
33400: MUL
33401: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33402: LD_VAR 0 1
33406: PPUSH
33407: LD_INT 66
33409: PPUSH
33410: CALL_OW 321
33414: PUSH
33415: LD_INT 2
33417: EQUAL
33418: IFFALSE 33435
// bpoints := bpoints * 1.1 ;
33420: LD_ADDR_VAR 0 10
33424: PUSH
33425: LD_VAR 0 10
33429: PUSH
33430: LD_REAL  1.10000000000000E+0000
33433: MUL
33434: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33435: LD_ADDR_VAR 0 10
33439: PUSH
33440: LD_VAR 0 10
33444: PUSH
33445: LD_VAR 0 6
33449: PPUSH
33450: LD_INT 1
33452: PPUSH
33453: CALL_OW 259
33457: PUSH
33458: LD_REAL  1.15000000000000E+0000
33461: MUL
33462: MUL
33463: ST_TO_ADDR
// end ; unit_vehicle :
33464: GO 34294
33466: LD_INT 2
33468: DOUBLE
33469: EQUAL
33470: IFTRUE 33474
33472: GO 34282
33474: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33475: LD_VAR 0 6
33479: PPUSH
33480: CALL_OW 264
33484: PUSH
33485: LD_INT 2
33487: PUSH
33488: LD_INT 42
33490: PUSH
33491: LD_INT 24
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: LIST
33498: IN
33499: IFFALSE 33520
// points := [ 25 , 5 , 3 ] ;
33501: LD_ADDR_VAR 0 9
33505: PUSH
33506: LD_INT 25
33508: PUSH
33509: LD_INT 5
33511: PUSH
33512: LD_INT 3
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33520: LD_VAR 0 6
33524: PPUSH
33525: CALL_OW 264
33529: PUSH
33530: LD_INT 4
33532: PUSH
33533: LD_INT 43
33535: PUSH
33536: LD_INT 25
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: LIST
33543: IN
33544: IFFALSE 33565
// points := [ 40 , 15 , 5 ] ;
33546: LD_ADDR_VAR 0 9
33550: PUSH
33551: LD_INT 40
33553: PUSH
33554: LD_INT 15
33556: PUSH
33557: LD_INT 5
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: LIST
33564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33565: LD_VAR 0 6
33569: PPUSH
33570: CALL_OW 264
33574: PUSH
33575: LD_INT 3
33577: PUSH
33578: LD_INT 23
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: IN
33585: IFFALSE 33606
// points := [ 7 , 25 , 8 ] ;
33587: LD_ADDR_VAR 0 9
33591: PUSH
33592: LD_INT 7
33594: PUSH
33595: LD_INT 25
33597: PUSH
33598: LD_INT 8
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: LIST
33605: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33606: LD_VAR 0 6
33610: PPUSH
33611: CALL_OW 264
33615: PUSH
33616: LD_INT 5
33618: PUSH
33619: LD_INT 27
33621: PUSH
33622: LD_INT 44
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: LIST
33629: IN
33630: IFFALSE 33651
// points := [ 14 , 50 , 16 ] ;
33632: LD_ADDR_VAR 0 9
33636: PUSH
33637: LD_INT 14
33639: PUSH
33640: LD_INT 50
33642: PUSH
33643: LD_INT 16
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: LIST
33650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33651: LD_VAR 0 6
33655: PPUSH
33656: CALL_OW 264
33660: PUSH
33661: LD_INT 6
33663: PUSH
33664: LD_INT 46
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: IN
33671: IFFALSE 33692
// points := [ 32 , 120 , 70 ] ;
33673: LD_ADDR_VAR 0 9
33677: PUSH
33678: LD_INT 32
33680: PUSH
33681: LD_INT 120
33683: PUSH
33684: LD_INT 70
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: LIST
33691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33692: LD_VAR 0 6
33696: PPUSH
33697: CALL_OW 264
33701: PUSH
33702: LD_INT 7
33704: PUSH
33705: LD_INT 28
33707: PUSH
33708: LD_INT 45
33710: PUSH
33711: LD_EXP 30
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: IN
33722: IFFALSE 33743
// points := [ 35 , 20 , 45 ] ;
33724: LD_ADDR_VAR 0 9
33728: PUSH
33729: LD_INT 35
33731: PUSH
33732: LD_INT 20
33734: PUSH
33735: LD_INT 45
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: LIST
33742: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33743: LD_VAR 0 6
33747: PPUSH
33748: CALL_OW 264
33752: PUSH
33753: LD_INT 47
33755: PUSH
33756: EMPTY
33757: LIST
33758: IN
33759: IFFALSE 33780
// points := [ 67 , 45 , 75 ] ;
33761: LD_ADDR_VAR 0 9
33765: PUSH
33766: LD_INT 67
33768: PUSH
33769: LD_INT 45
33771: PUSH
33772: LD_INT 75
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33780: LD_VAR 0 6
33784: PPUSH
33785: CALL_OW 264
33789: PUSH
33790: LD_INT 26
33792: PUSH
33793: EMPTY
33794: LIST
33795: IN
33796: IFFALSE 33817
// points := [ 120 , 30 , 80 ] ;
33798: LD_ADDR_VAR 0 9
33802: PUSH
33803: LD_INT 120
33805: PUSH
33806: LD_INT 30
33808: PUSH
33809: LD_INT 80
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: LIST
33816: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33817: LD_VAR 0 6
33821: PPUSH
33822: CALL_OW 264
33826: PUSH
33827: LD_INT 22
33829: PUSH
33830: EMPTY
33831: LIST
33832: IN
33833: IFFALSE 33854
// points := [ 40 , 1 , 1 ] ;
33835: LD_ADDR_VAR 0 9
33839: PUSH
33840: LD_INT 40
33842: PUSH
33843: LD_INT 1
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: LIST
33853: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33854: LD_VAR 0 6
33858: PPUSH
33859: CALL_OW 264
33863: PUSH
33864: LD_INT 29
33866: PUSH
33867: EMPTY
33868: LIST
33869: IN
33870: IFFALSE 33891
// points := [ 70 , 200 , 400 ] ;
33872: LD_ADDR_VAR 0 9
33876: PUSH
33877: LD_INT 70
33879: PUSH
33880: LD_INT 200
33882: PUSH
33883: LD_INT 400
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: LIST
33890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33891: LD_VAR 0 6
33895: PPUSH
33896: CALL_OW 264
33900: PUSH
33901: LD_INT 14
33903: PUSH
33904: LD_INT 53
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: IN
33911: IFFALSE 33932
// points := [ 40 , 10 , 20 ] ;
33913: LD_ADDR_VAR 0 9
33917: PUSH
33918: LD_INT 40
33920: PUSH
33921: LD_INT 10
33923: PUSH
33924: LD_INT 20
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: LIST
33931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33932: LD_VAR 0 6
33936: PPUSH
33937: CALL_OW 264
33941: PUSH
33942: LD_INT 9
33944: PUSH
33945: EMPTY
33946: LIST
33947: IN
33948: IFFALSE 33969
// points := [ 5 , 70 , 20 ] ;
33950: LD_ADDR_VAR 0 9
33954: PUSH
33955: LD_INT 5
33957: PUSH
33958: LD_INT 70
33960: PUSH
33961: LD_INT 20
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33969: LD_VAR 0 6
33973: PPUSH
33974: CALL_OW 264
33978: PUSH
33979: LD_INT 10
33981: PUSH
33982: EMPTY
33983: LIST
33984: IN
33985: IFFALSE 34006
// points := [ 35 , 110 , 70 ] ;
33987: LD_ADDR_VAR 0 9
33991: PUSH
33992: LD_INT 35
33994: PUSH
33995: LD_INT 110
33997: PUSH
33998: LD_INT 70
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: LIST
34005: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34006: LD_VAR 0 6
34010: PPUSH
34011: CALL_OW 265
34015: PUSH
34016: LD_INT 25
34018: EQUAL
34019: IFFALSE 34040
// points := [ 80 , 65 , 100 ] ;
34021: LD_ADDR_VAR 0 9
34025: PUSH
34026: LD_INT 80
34028: PUSH
34029: LD_INT 65
34031: PUSH
34032: LD_INT 100
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: LIST
34039: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34040: LD_VAR 0 6
34044: PPUSH
34045: CALL_OW 263
34049: PUSH
34050: LD_INT 1
34052: EQUAL
34053: IFFALSE 34088
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34055: LD_ADDR_VAR 0 10
34059: PUSH
34060: LD_VAR 0 10
34064: PUSH
34065: LD_VAR 0 6
34069: PPUSH
34070: CALL_OW 311
34074: PPUSH
34075: LD_INT 3
34077: PPUSH
34078: CALL_OW 259
34082: PUSH
34083: LD_INT 4
34085: MUL
34086: MUL
34087: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34088: LD_VAR 0 6
34092: PPUSH
34093: CALL_OW 263
34097: PUSH
34098: LD_INT 2
34100: EQUAL
34101: IFFALSE 34152
// begin j := IsControledBy ( i ) ;
34103: LD_ADDR_VAR 0 7
34107: PUSH
34108: LD_VAR 0 6
34112: PPUSH
34113: CALL_OW 312
34117: ST_TO_ADDR
// if j then
34118: LD_VAR 0 7
34122: IFFALSE 34152
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34124: LD_ADDR_VAR 0 10
34128: PUSH
34129: LD_VAR 0 10
34133: PUSH
34134: LD_VAR 0 7
34138: PPUSH
34139: LD_INT 3
34141: PPUSH
34142: CALL_OW 259
34146: PUSH
34147: LD_INT 3
34149: MUL
34150: MUL
34151: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34152: LD_VAR 0 6
34156: PPUSH
34157: CALL_OW 264
34161: PUSH
34162: LD_INT 5
34164: PUSH
34165: LD_INT 6
34167: PUSH
34168: LD_INT 46
34170: PUSH
34171: LD_INT 44
34173: PUSH
34174: LD_INT 47
34176: PUSH
34177: LD_INT 45
34179: PUSH
34180: LD_INT 28
34182: PUSH
34183: LD_INT 7
34185: PUSH
34186: LD_INT 27
34188: PUSH
34189: LD_INT 29
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: IN
34204: PUSH
34205: LD_VAR 0 1
34209: PPUSH
34210: LD_INT 52
34212: PPUSH
34213: CALL_OW 321
34217: PUSH
34218: LD_INT 2
34220: EQUAL
34221: AND
34222: IFFALSE 34239
// bpoints := bpoints * 1.2 ;
34224: LD_ADDR_VAR 0 10
34228: PUSH
34229: LD_VAR 0 10
34233: PUSH
34234: LD_REAL  1.20000000000000E+0000
34237: MUL
34238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34239: LD_VAR 0 6
34243: PPUSH
34244: CALL_OW 264
34248: PUSH
34249: LD_INT 6
34251: PUSH
34252: LD_INT 46
34254: PUSH
34255: LD_INT 47
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: IN
34263: IFFALSE 34280
// bpoints := bpoints * 1.2 ;
34265: LD_ADDR_VAR 0 10
34269: PUSH
34270: LD_VAR 0 10
34274: PUSH
34275: LD_REAL  1.20000000000000E+0000
34278: MUL
34279: ST_TO_ADDR
// end ; unit_building :
34280: GO 34294
34282: LD_INT 3
34284: DOUBLE
34285: EQUAL
34286: IFTRUE 34290
34288: GO 34293
34290: POP
// ; end ;
34291: GO 34294
34293: POP
// for j = 1 to 3 do
34294: LD_ADDR_VAR 0 7
34298: PUSH
34299: DOUBLE
34300: LD_INT 1
34302: DEC
34303: ST_TO_ADDR
34304: LD_INT 3
34306: PUSH
34307: FOR_TO
34308: IFFALSE 34361
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34310: LD_ADDR_VAR 0 5
34314: PUSH
34315: LD_VAR 0 5
34319: PPUSH
34320: LD_VAR 0 7
34324: PPUSH
34325: LD_VAR 0 5
34329: PUSH
34330: LD_VAR 0 7
34334: ARRAY
34335: PUSH
34336: LD_VAR 0 9
34340: PUSH
34341: LD_VAR 0 7
34345: ARRAY
34346: PUSH
34347: LD_VAR 0 10
34351: MUL
34352: PLUS
34353: PPUSH
34354: CALL_OW 1
34358: ST_TO_ADDR
34359: GO 34307
34361: POP
34362: POP
// end ;
34363: GO 32840
34365: POP
34366: POP
// result := Replace ( result , 4 , tmp ) ;
34367: LD_ADDR_VAR 0 5
34371: PUSH
34372: LD_VAR 0 5
34376: PPUSH
34377: LD_INT 4
34379: PPUSH
34380: LD_VAR 0 8
34384: PPUSH
34385: CALL_OW 1
34389: ST_TO_ADDR
// end ;
34390: LD_VAR 0 5
34394: RET
// export function DangerAtRange ( unit , range ) ; begin
34395: LD_INT 0
34397: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34398: LD_ADDR_VAR 0 3
34402: PUSH
34403: LD_VAR 0 1
34407: PPUSH
34408: CALL_OW 255
34412: PPUSH
34413: LD_VAR 0 1
34417: PPUSH
34418: CALL_OW 250
34422: PPUSH
34423: LD_VAR 0 1
34427: PPUSH
34428: CALL_OW 251
34432: PPUSH
34433: LD_VAR 0 2
34437: PPUSH
34438: CALL 32692 0 4
34442: ST_TO_ADDR
// end ;
34443: LD_VAR 0 3
34447: RET
// export function DangerInArea ( side , area ) ; begin
34448: LD_INT 0
34450: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34451: LD_ADDR_VAR 0 3
34455: PUSH
34456: LD_VAR 0 2
34460: PPUSH
34461: LD_INT 81
34463: PUSH
34464: LD_VAR 0 1
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PPUSH
34473: CALL_OW 70
34477: ST_TO_ADDR
// end ;
34478: LD_VAR 0 3
34482: RET
// export function IsExtension ( b ) ; begin
34483: LD_INT 0
34485: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34486: LD_ADDR_VAR 0 2
34490: PUSH
34491: LD_VAR 0 1
34495: PUSH
34496: LD_INT 23
34498: PUSH
34499: LD_INT 20
34501: PUSH
34502: LD_INT 22
34504: PUSH
34505: LD_INT 17
34507: PUSH
34508: LD_INT 24
34510: PUSH
34511: LD_INT 21
34513: PUSH
34514: LD_INT 19
34516: PUSH
34517: LD_INT 16
34519: PUSH
34520: LD_INT 25
34522: PUSH
34523: LD_INT 18
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: IN
34538: ST_TO_ADDR
// end ;
34539: LD_VAR 0 2
34543: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34544: LD_INT 0
34546: PPUSH
34547: PPUSH
34548: PPUSH
// result := [ ] ;
34549: LD_ADDR_VAR 0 4
34553: PUSH
34554: EMPTY
34555: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34556: LD_ADDR_VAR 0 5
34560: PUSH
34561: LD_VAR 0 2
34565: PPUSH
34566: LD_INT 21
34568: PUSH
34569: LD_INT 3
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PPUSH
34576: CALL_OW 70
34580: ST_TO_ADDR
// if not tmp then
34581: LD_VAR 0 5
34585: NOT
34586: IFFALSE 34590
// exit ;
34588: GO 34654
// if checkLink then
34590: LD_VAR 0 3
34594: IFFALSE 34644
// begin for i in tmp do
34596: LD_ADDR_VAR 0 6
34600: PUSH
34601: LD_VAR 0 5
34605: PUSH
34606: FOR_IN
34607: IFFALSE 34642
// if GetBase ( i ) <> base then
34609: LD_VAR 0 6
34613: PPUSH
34614: CALL_OW 274
34618: PUSH
34619: LD_VAR 0 1
34623: NONEQUAL
34624: IFFALSE 34640
// ComLinkToBase ( base , i ) ;
34626: LD_VAR 0 1
34630: PPUSH
34631: LD_VAR 0 6
34635: PPUSH
34636: CALL_OW 169
34640: GO 34606
34642: POP
34643: POP
// end ; result := tmp ;
34644: LD_ADDR_VAR 0 4
34648: PUSH
34649: LD_VAR 0 5
34653: ST_TO_ADDR
// end ;
34654: LD_VAR 0 4
34658: RET
// export function ComComplete ( units , b ) ; var i ; begin
34659: LD_INT 0
34661: PPUSH
34662: PPUSH
// if not units then
34663: LD_VAR 0 1
34667: NOT
34668: IFFALSE 34672
// exit ;
34670: GO 34762
// for i in units do
34672: LD_ADDR_VAR 0 4
34676: PUSH
34677: LD_VAR 0 1
34681: PUSH
34682: FOR_IN
34683: IFFALSE 34760
// if BuildingStatus ( b ) = bs_build then
34685: LD_VAR 0 2
34689: PPUSH
34690: CALL_OW 461
34694: PUSH
34695: LD_INT 1
34697: EQUAL
34698: IFFALSE 34758
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34700: LD_VAR 0 4
34704: PPUSH
34705: LD_STRING h
34707: PUSH
34708: LD_VAR 0 2
34712: PPUSH
34713: CALL_OW 250
34717: PUSH
34718: LD_VAR 0 2
34722: PPUSH
34723: CALL_OW 251
34727: PUSH
34728: LD_VAR 0 2
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: PUSH
34751: EMPTY
34752: LIST
34753: PPUSH
34754: CALL_OW 446
34758: GO 34682
34760: POP
34761: POP
// end ;
34762: LD_VAR 0 3
34766: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34767: LD_INT 0
34769: PPUSH
34770: PPUSH
34771: PPUSH
34772: PPUSH
34773: PPUSH
34774: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
34775: LD_VAR 0 1
34779: NOT
34780: PUSH
34781: LD_VAR 0 1
34785: PPUSH
34786: CALL_OW 263
34790: PUSH
34791: LD_INT 2
34793: EQUAL
34794: NOT
34795: OR
34796: IFFALSE 34800
// exit ;
34798: GO 35116
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34800: LD_ADDR_VAR 0 6
34804: PUSH
34805: LD_INT 22
34807: PUSH
34808: LD_VAR 0 1
34812: PPUSH
34813: CALL_OW 255
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: LD_INT 30
34827: PUSH
34828: LD_INT 36
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 34
34837: PUSH
34838: LD_INT 31
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PPUSH
34854: CALL_OW 69
34858: ST_TO_ADDR
// if not tmp then
34859: LD_VAR 0 6
34863: NOT
34864: IFFALSE 34868
// exit ;
34866: GO 35116
// result := [ ] ;
34868: LD_ADDR_VAR 0 2
34872: PUSH
34873: EMPTY
34874: ST_TO_ADDR
// for i in tmp do
34875: LD_ADDR_VAR 0 3
34879: PUSH
34880: LD_VAR 0 6
34884: PUSH
34885: FOR_IN
34886: IFFALSE 34957
// begin t := UnitsInside ( i ) ;
34888: LD_ADDR_VAR 0 4
34892: PUSH
34893: LD_VAR 0 3
34897: PPUSH
34898: CALL_OW 313
34902: ST_TO_ADDR
// if t then
34903: LD_VAR 0 4
34907: IFFALSE 34955
// for j in t do
34909: LD_ADDR_VAR 0 7
34913: PUSH
34914: LD_VAR 0 4
34918: PUSH
34919: FOR_IN
34920: IFFALSE 34953
// result := Insert ( result , result + 1 , j ) ;
34922: LD_ADDR_VAR 0 2
34926: PUSH
34927: LD_VAR 0 2
34931: PPUSH
34932: LD_VAR 0 2
34936: PUSH
34937: LD_INT 1
34939: PLUS
34940: PPUSH
34941: LD_VAR 0 7
34945: PPUSH
34946: CALL_OW 2
34950: ST_TO_ADDR
34951: GO 34919
34953: POP
34954: POP
// end ;
34955: GO 34885
34957: POP
34958: POP
// if not result then
34959: LD_VAR 0 2
34963: NOT
34964: IFFALSE 34968
// exit ;
34966: GO 35116
// mech := result [ 1 ] ;
34968: LD_ADDR_VAR 0 5
34972: PUSH
34973: LD_VAR 0 2
34977: PUSH
34978: LD_INT 1
34980: ARRAY
34981: ST_TO_ADDR
// if result > 1 then
34982: LD_VAR 0 2
34986: PUSH
34987: LD_INT 1
34989: GREATER
34990: IFFALSE 35102
// for i = 2 to result do
34992: LD_ADDR_VAR 0 3
34996: PUSH
34997: DOUBLE
34998: LD_INT 2
35000: DEC
35001: ST_TO_ADDR
35002: LD_VAR 0 2
35006: PUSH
35007: FOR_TO
35008: IFFALSE 35100
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35010: LD_ADDR_VAR 0 4
35014: PUSH
35015: LD_VAR 0 2
35019: PUSH
35020: LD_VAR 0 3
35024: ARRAY
35025: PPUSH
35026: LD_INT 3
35028: PPUSH
35029: CALL_OW 259
35033: PUSH
35034: LD_VAR 0 2
35038: PUSH
35039: LD_VAR 0 3
35043: ARRAY
35044: PPUSH
35045: CALL_OW 432
35049: MINUS
35050: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35051: LD_VAR 0 4
35055: PUSH
35056: LD_VAR 0 5
35060: PPUSH
35061: LD_INT 3
35063: PPUSH
35064: CALL_OW 259
35068: PUSH
35069: LD_VAR 0 5
35073: PPUSH
35074: CALL_OW 432
35078: MINUS
35079: GREATEREQUAL
35080: IFFALSE 35098
// mech := result [ i ] ;
35082: LD_ADDR_VAR 0 5
35086: PUSH
35087: LD_VAR 0 2
35091: PUSH
35092: LD_VAR 0 3
35096: ARRAY
35097: ST_TO_ADDR
// end ;
35098: GO 35007
35100: POP
35101: POP
// ComLinkTo ( vehicle , mech ) ;
35102: LD_VAR 0 1
35106: PPUSH
35107: LD_VAR 0 5
35111: PPUSH
35112: CALL_OW 135
// end ;
35116: LD_VAR 0 2
35120: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35121: LD_INT 0
35123: PPUSH
35124: PPUSH
35125: PPUSH
35126: PPUSH
35127: PPUSH
35128: PPUSH
35129: PPUSH
35130: PPUSH
35131: PPUSH
35132: PPUSH
35133: PPUSH
35134: PPUSH
35135: PPUSH
// result := [ ] ;
35136: LD_ADDR_VAR 0 7
35140: PUSH
35141: EMPTY
35142: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35143: LD_VAR 0 1
35147: PPUSH
35148: CALL_OW 266
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: IN
35163: NOT
35164: IFFALSE 35168
// exit ;
35166: GO 36802
// if name then
35168: LD_VAR 0 3
35172: IFFALSE 35188
// SetBName ( base_dep , name ) ;
35174: LD_VAR 0 1
35178: PPUSH
35179: LD_VAR 0 3
35183: PPUSH
35184: CALL_OW 500
// base := GetBase ( base_dep ) ;
35188: LD_ADDR_VAR 0 15
35192: PUSH
35193: LD_VAR 0 1
35197: PPUSH
35198: CALL_OW 274
35202: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35203: LD_ADDR_VAR 0 16
35207: PUSH
35208: LD_VAR 0 1
35212: PPUSH
35213: CALL_OW 255
35217: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35218: LD_ADDR_VAR 0 17
35222: PUSH
35223: LD_VAR 0 1
35227: PPUSH
35228: CALL_OW 248
35232: ST_TO_ADDR
// if sources then
35233: LD_VAR 0 5
35237: IFFALSE 35284
// for i = 1 to 3 do
35239: LD_ADDR_VAR 0 8
35243: PUSH
35244: DOUBLE
35245: LD_INT 1
35247: DEC
35248: ST_TO_ADDR
35249: LD_INT 3
35251: PUSH
35252: FOR_TO
35253: IFFALSE 35282
// AddResourceType ( base , i , sources [ i ] ) ;
35255: LD_VAR 0 15
35259: PPUSH
35260: LD_VAR 0 8
35264: PPUSH
35265: LD_VAR 0 5
35269: PUSH
35270: LD_VAR 0 8
35274: ARRAY
35275: PPUSH
35276: CALL_OW 276
35280: GO 35252
35282: POP
35283: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35284: LD_ADDR_VAR 0 18
35288: PUSH
35289: LD_VAR 0 15
35293: PPUSH
35294: LD_VAR 0 2
35298: PPUSH
35299: LD_INT 1
35301: PPUSH
35302: CALL 34544 0 3
35306: ST_TO_ADDR
// InitHc ;
35307: CALL_OW 19
// InitUc ;
35311: CALL_OW 18
// uc_side := side ;
35315: LD_ADDR_OWVAR 20
35319: PUSH
35320: LD_VAR 0 16
35324: ST_TO_ADDR
// uc_nation := nation ;
35325: LD_ADDR_OWVAR 21
35329: PUSH
35330: LD_VAR 0 17
35334: ST_TO_ADDR
// if buildings then
35335: LD_VAR 0 18
35339: IFFALSE 36661
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35341: LD_ADDR_VAR 0 19
35345: PUSH
35346: LD_VAR 0 18
35350: PPUSH
35351: LD_INT 2
35353: PUSH
35354: LD_INT 30
35356: PUSH
35357: LD_INT 29
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 30
35366: PUSH
35367: LD_INT 30
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: LIST
35378: PPUSH
35379: CALL_OW 72
35383: ST_TO_ADDR
// if tmp then
35384: LD_VAR 0 19
35388: IFFALSE 35436
// for i in tmp do
35390: LD_ADDR_VAR 0 8
35394: PUSH
35395: LD_VAR 0 19
35399: PUSH
35400: FOR_IN
35401: IFFALSE 35434
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35403: LD_VAR 0 8
35407: PPUSH
35408: CALL_OW 250
35412: PPUSH
35413: LD_VAR 0 8
35417: PPUSH
35418: CALL_OW 251
35422: PPUSH
35423: LD_VAR 0 16
35427: PPUSH
35428: CALL_OW 441
35432: GO 35400
35434: POP
35435: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35436: LD_VAR 0 18
35440: PPUSH
35441: LD_INT 2
35443: PUSH
35444: LD_INT 30
35446: PUSH
35447: LD_INT 32
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 30
35456: PUSH
35457: LD_INT 33
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: LIST
35468: PPUSH
35469: CALL_OW 72
35473: IFFALSE 35561
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35475: LD_ADDR_VAR 0 8
35479: PUSH
35480: LD_VAR 0 18
35484: PPUSH
35485: LD_INT 2
35487: PUSH
35488: LD_INT 30
35490: PUSH
35491: LD_INT 32
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 30
35500: PUSH
35501: LD_INT 33
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: LIST
35512: PPUSH
35513: CALL_OW 72
35517: PUSH
35518: FOR_IN
35519: IFFALSE 35559
// begin if not GetBWeapon ( i ) then
35521: LD_VAR 0 8
35525: PPUSH
35526: CALL_OW 269
35530: NOT
35531: IFFALSE 35557
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35533: LD_VAR 0 8
35537: PPUSH
35538: LD_VAR 0 8
35542: PPUSH
35543: LD_VAR 0 2
35547: PPUSH
35548: CALL 36807 0 2
35552: PPUSH
35553: CALL_OW 431
// end ;
35557: GO 35518
35559: POP
35560: POP
// end ; for i = 1 to personel do
35561: LD_ADDR_VAR 0 8
35565: PUSH
35566: DOUBLE
35567: LD_INT 1
35569: DEC
35570: ST_TO_ADDR
35571: LD_VAR 0 6
35575: PUSH
35576: FOR_TO
35577: IFFALSE 36641
// begin if i > 4 then
35579: LD_VAR 0 8
35583: PUSH
35584: LD_INT 4
35586: GREATER
35587: IFFALSE 35591
// break ;
35589: GO 36641
// case i of 1 :
35591: LD_VAR 0 8
35595: PUSH
35596: LD_INT 1
35598: DOUBLE
35599: EQUAL
35600: IFTRUE 35604
35602: GO 35684
35604: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35605: LD_ADDR_VAR 0 12
35609: PUSH
35610: LD_VAR 0 18
35614: PPUSH
35615: LD_INT 22
35617: PUSH
35618: LD_VAR 0 16
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 58
35629: PUSH
35630: EMPTY
35631: LIST
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: LD_INT 30
35638: PUSH
35639: LD_INT 32
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 30
35648: PUSH
35649: LD_INT 4
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 30
35658: PUSH
35659: LD_INT 5
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: PPUSH
35677: CALL_OW 72
35681: ST_TO_ADDR
35682: GO 35906
35684: LD_INT 2
35686: DOUBLE
35687: EQUAL
35688: IFTRUE 35692
35690: GO 35754
35692: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35693: LD_ADDR_VAR 0 12
35697: PUSH
35698: LD_VAR 0 18
35702: PPUSH
35703: LD_INT 22
35705: PUSH
35706: LD_VAR 0 16
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 2
35717: PUSH
35718: LD_INT 30
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 30
35730: PUSH
35731: LD_INT 1
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: LIST
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PPUSH
35747: CALL_OW 72
35751: ST_TO_ADDR
35752: GO 35906
35754: LD_INT 3
35756: DOUBLE
35757: EQUAL
35758: IFTRUE 35762
35760: GO 35824
35762: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35763: LD_ADDR_VAR 0 12
35767: PUSH
35768: LD_VAR 0 18
35772: PPUSH
35773: LD_INT 22
35775: PUSH
35776: LD_VAR 0 16
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 2
35787: PUSH
35788: LD_INT 30
35790: PUSH
35791: LD_INT 2
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 30
35800: PUSH
35801: LD_INT 3
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PPUSH
35817: CALL_OW 72
35821: ST_TO_ADDR
35822: GO 35906
35824: LD_INT 4
35826: DOUBLE
35827: EQUAL
35828: IFTRUE 35832
35830: GO 35905
35832: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35833: LD_ADDR_VAR 0 12
35837: PUSH
35838: LD_VAR 0 18
35842: PPUSH
35843: LD_INT 22
35845: PUSH
35846: LD_VAR 0 16
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: LD_INT 30
35860: PUSH
35861: LD_INT 6
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 30
35870: PUSH
35871: LD_INT 7
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 30
35880: PUSH
35881: LD_INT 8
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PPUSH
35898: CALL_OW 72
35902: ST_TO_ADDR
35903: GO 35906
35905: POP
// if i = 1 then
35906: LD_VAR 0 8
35910: PUSH
35911: LD_INT 1
35913: EQUAL
35914: IFFALSE 36025
// begin tmp := [ ] ;
35916: LD_ADDR_VAR 0 19
35920: PUSH
35921: EMPTY
35922: ST_TO_ADDR
// for j in f do
35923: LD_ADDR_VAR 0 9
35927: PUSH
35928: LD_VAR 0 12
35932: PUSH
35933: FOR_IN
35934: IFFALSE 36007
// if GetBType ( j ) = b_bunker then
35936: LD_VAR 0 9
35940: PPUSH
35941: CALL_OW 266
35945: PUSH
35946: LD_INT 32
35948: EQUAL
35949: IFFALSE 35976
// tmp := Insert ( tmp , 1 , j ) else
35951: LD_ADDR_VAR 0 19
35955: PUSH
35956: LD_VAR 0 19
35960: PPUSH
35961: LD_INT 1
35963: PPUSH
35964: LD_VAR 0 9
35968: PPUSH
35969: CALL_OW 2
35973: ST_TO_ADDR
35974: GO 36005
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35976: LD_ADDR_VAR 0 19
35980: PUSH
35981: LD_VAR 0 19
35985: PPUSH
35986: LD_VAR 0 19
35990: PUSH
35991: LD_INT 1
35993: PLUS
35994: PPUSH
35995: LD_VAR 0 9
35999: PPUSH
36000: CALL_OW 2
36004: ST_TO_ADDR
36005: GO 35933
36007: POP
36008: POP
// if tmp then
36009: LD_VAR 0 19
36013: IFFALSE 36025
// f := tmp ;
36015: LD_ADDR_VAR 0 12
36019: PUSH
36020: LD_VAR 0 19
36024: ST_TO_ADDR
// end ; x := personel [ i ] ;
36025: LD_ADDR_VAR 0 13
36029: PUSH
36030: LD_VAR 0 6
36034: PUSH
36035: LD_VAR 0 8
36039: ARRAY
36040: ST_TO_ADDR
// if x = - 1 then
36041: LD_VAR 0 13
36045: PUSH
36046: LD_INT 1
36048: NEG
36049: EQUAL
36050: IFFALSE 36259
// begin for j in f do
36052: LD_ADDR_VAR 0 9
36056: PUSH
36057: LD_VAR 0 12
36061: PUSH
36062: FOR_IN
36063: IFFALSE 36255
// repeat InitHc ;
36065: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36069: LD_VAR 0 9
36073: PPUSH
36074: CALL_OW 266
36078: PUSH
36079: LD_INT 5
36081: EQUAL
36082: IFFALSE 36152
// begin if UnitsInside ( j ) < 3 then
36084: LD_VAR 0 9
36088: PPUSH
36089: CALL_OW 313
36093: PUSH
36094: LD_INT 3
36096: LESS
36097: IFFALSE 36133
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36099: LD_INT 0
36101: PPUSH
36102: LD_INT 5
36104: PUSH
36105: LD_INT 8
36107: PUSH
36108: LD_INT 9
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: LIST
36115: PUSH
36116: LD_VAR 0 17
36120: ARRAY
36121: PPUSH
36122: LD_VAR 0 4
36126: PPUSH
36127: CALL_OW 380
36131: GO 36150
// PrepareHuman ( false , i , skill ) ;
36133: LD_INT 0
36135: PPUSH
36136: LD_VAR 0 8
36140: PPUSH
36141: LD_VAR 0 4
36145: PPUSH
36146: CALL_OW 380
// end else
36150: GO 36169
// PrepareHuman ( false , i , skill ) ;
36152: LD_INT 0
36154: PPUSH
36155: LD_VAR 0 8
36159: PPUSH
36160: LD_VAR 0 4
36164: PPUSH
36165: CALL_OW 380
// un := CreateHuman ;
36169: LD_ADDR_VAR 0 14
36173: PUSH
36174: CALL_OW 44
36178: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36179: LD_ADDR_VAR 0 7
36183: PUSH
36184: LD_VAR 0 7
36188: PPUSH
36189: LD_INT 1
36191: PPUSH
36192: LD_VAR 0 14
36196: PPUSH
36197: CALL_OW 2
36201: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36202: LD_VAR 0 14
36206: PPUSH
36207: LD_VAR 0 9
36211: PPUSH
36212: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36216: LD_VAR 0 9
36220: PPUSH
36221: CALL_OW 313
36225: PUSH
36226: LD_INT 6
36228: EQUAL
36229: PUSH
36230: LD_VAR 0 9
36234: PPUSH
36235: CALL_OW 266
36239: PUSH
36240: LD_INT 32
36242: PUSH
36243: LD_INT 31
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: IN
36250: OR
36251: IFFALSE 36065
36253: GO 36062
36255: POP
36256: POP
// end else
36257: GO 36639
// for j = 1 to x do
36259: LD_ADDR_VAR 0 9
36263: PUSH
36264: DOUBLE
36265: LD_INT 1
36267: DEC
36268: ST_TO_ADDR
36269: LD_VAR 0 13
36273: PUSH
36274: FOR_TO
36275: IFFALSE 36637
// begin InitHc ;
36277: CALL_OW 19
// if not f then
36281: LD_VAR 0 12
36285: NOT
36286: IFFALSE 36375
// begin PrepareHuman ( false , i , skill ) ;
36288: LD_INT 0
36290: PPUSH
36291: LD_VAR 0 8
36295: PPUSH
36296: LD_VAR 0 4
36300: PPUSH
36301: CALL_OW 380
// un := CreateHuman ;
36305: LD_ADDR_VAR 0 14
36309: PUSH
36310: CALL_OW 44
36314: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36315: LD_ADDR_VAR 0 7
36319: PUSH
36320: LD_VAR 0 7
36324: PPUSH
36325: LD_INT 1
36327: PPUSH
36328: LD_VAR 0 14
36332: PPUSH
36333: CALL_OW 2
36337: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36338: LD_VAR 0 14
36342: PPUSH
36343: LD_VAR 0 1
36347: PPUSH
36348: CALL_OW 250
36352: PPUSH
36353: LD_VAR 0 1
36357: PPUSH
36358: CALL_OW 251
36362: PPUSH
36363: LD_INT 10
36365: PPUSH
36366: LD_INT 0
36368: PPUSH
36369: CALL_OW 50
// continue ;
36373: GO 36274
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36375: LD_VAR 0 12
36379: PUSH
36380: LD_INT 1
36382: ARRAY
36383: PPUSH
36384: CALL_OW 313
36388: PUSH
36389: LD_VAR 0 12
36393: PUSH
36394: LD_INT 1
36396: ARRAY
36397: PPUSH
36398: CALL_OW 266
36402: PUSH
36403: LD_INT 32
36405: PUSH
36406: LD_INT 31
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: IN
36413: AND
36414: PUSH
36415: LD_VAR 0 12
36419: PUSH
36420: LD_INT 1
36422: ARRAY
36423: PPUSH
36424: CALL_OW 313
36428: PUSH
36429: LD_INT 6
36431: EQUAL
36432: OR
36433: IFFALSE 36453
// f := Delete ( f , 1 ) ;
36435: LD_ADDR_VAR 0 12
36439: PUSH
36440: LD_VAR 0 12
36444: PPUSH
36445: LD_INT 1
36447: PPUSH
36448: CALL_OW 3
36452: ST_TO_ADDR
// if not f then
36453: LD_VAR 0 12
36457: NOT
36458: IFFALSE 36476
// begin x := x + 2 ;
36460: LD_ADDR_VAR 0 13
36464: PUSH
36465: LD_VAR 0 13
36469: PUSH
36470: LD_INT 2
36472: PLUS
36473: ST_TO_ADDR
// continue ;
36474: GO 36274
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36476: LD_VAR 0 12
36480: PUSH
36481: LD_INT 1
36483: ARRAY
36484: PPUSH
36485: CALL_OW 266
36489: PUSH
36490: LD_INT 5
36492: EQUAL
36493: IFFALSE 36567
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36495: LD_VAR 0 12
36499: PUSH
36500: LD_INT 1
36502: ARRAY
36503: PPUSH
36504: CALL_OW 313
36508: PUSH
36509: LD_INT 3
36511: LESS
36512: IFFALSE 36548
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36514: LD_INT 0
36516: PPUSH
36517: LD_INT 5
36519: PUSH
36520: LD_INT 8
36522: PUSH
36523: LD_INT 9
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: PUSH
36531: LD_VAR 0 17
36535: ARRAY
36536: PPUSH
36537: LD_VAR 0 4
36541: PPUSH
36542: CALL_OW 380
36546: GO 36565
// PrepareHuman ( false , i , skill ) ;
36548: LD_INT 0
36550: PPUSH
36551: LD_VAR 0 8
36555: PPUSH
36556: LD_VAR 0 4
36560: PPUSH
36561: CALL_OW 380
// end else
36565: GO 36584
// PrepareHuman ( false , i , skill ) ;
36567: LD_INT 0
36569: PPUSH
36570: LD_VAR 0 8
36574: PPUSH
36575: LD_VAR 0 4
36579: PPUSH
36580: CALL_OW 380
// un := CreateHuman ;
36584: LD_ADDR_VAR 0 14
36588: PUSH
36589: CALL_OW 44
36593: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36594: LD_ADDR_VAR 0 7
36598: PUSH
36599: LD_VAR 0 7
36603: PPUSH
36604: LD_INT 1
36606: PPUSH
36607: LD_VAR 0 14
36611: PPUSH
36612: CALL_OW 2
36616: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36617: LD_VAR 0 14
36621: PPUSH
36622: LD_VAR 0 12
36626: PUSH
36627: LD_INT 1
36629: ARRAY
36630: PPUSH
36631: CALL_OW 52
// end ;
36635: GO 36274
36637: POP
36638: POP
// end ;
36639: GO 35576
36641: POP
36642: POP
// result := result ^ buildings ;
36643: LD_ADDR_VAR 0 7
36647: PUSH
36648: LD_VAR 0 7
36652: PUSH
36653: LD_VAR 0 18
36657: ADD
36658: ST_TO_ADDR
// end else
36659: GO 36802
// begin for i = 1 to personel do
36661: LD_ADDR_VAR 0 8
36665: PUSH
36666: DOUBLE
36667: LD_INT 1
36669: DEC
36670: ST_TO_ADDR
36671: LD_VAR 0 6
36675: PUSH
36676: FOR_TO
36677: IFFALSE 36800
// begin if i > 4 then
36679: LD_VAR 0 8
36683: PUSH
36684: LD_INT 4
36686: GREATER
36687: IFFALSE 36691
// break ;
36689: GO 36800
// x := personel [ i ] ;
36691: LD_ADDR_VAR 0 13
36695: PUSH
36696: LD_VAR 0 6
36700: PUSH
36701: LD_VAR 0 8
36705: ARRAY
36706: ST_TO_ADDR
// if x = - 1 then
36707: LD_VAR 0 13
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: EQUAL
36716: IFFALSE 36720
// continue ;
36718: GO 36676
// PrepareHuman ( false , i , skill ) ;
36720: LD_INT 0
36722: PPUSH
36723: LD_VAR 0 8
36727: PPUSH
36728: LD_VAR 0 4
36732: PPUSH
36733: CALL_OW 380
// un := CreateHuman ;
36737: LD_ADDR_VAR 0 14
36741: PUSH
36742: CALL_OW 44
36746: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36747: LD_VAR 0 14
36751: PPUSH
36752: LD_VAR 0 1
36756: PPUSH
36757: CALL_OW 250
36761: PPUSH
36762: LD_VAR 0 1
36766: PPUSH
36767: CALL_OW 251
36771: PPUSH
36772: LD_INT 10
36774: PPUSH
36775: LD_INT 0
36777: PPUSH
36778: CALL_OW 50
// result := result ^ un ;
36782: LD_ADDR_VAR 0 7
36786: PUSH
36787: LD_VAR 0 7
36791: PUSH
36792: LD_VAR 0 14
36796: ADD
36797: ST_TO_ADDR
// end ;
36798: GO 36676
36800: POP
36801: POP
// end ; end ;
36802: LD_VAR 0 7
36806: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36807: LD_INT 0
36809: PPUSH
36810: PPUSH
36811: PPUSH
36812: PPUSH
36813: PPUSH
36814: PPUSH
36815: PPUSH
36816: PPUSH
36817: PPUSH
36818: PPUSH
36819: PPUSH
36820: PPUSH
36821: PPUSH
36822: PPUSH
36823: PPUSH
36824: PPUSH
// result := false ;
36825: LD_ADDR_VAR 0 3
36829: PUSH
36830: LD_INT 0
36832: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36833: LD_VAR 0 1
36837: NOT
36838: PUSH
36839: LD_VAR 0 1
36843: PPUSH
36844: CALL_OW 266
36848: PUSH
36849: LD_INT 32
36851: PUSH
36852: LD_INT 33
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: IN
36859: NOT
36860: OR
36861: IFFALSE 36865
// exit ;
36863: GO 37974
// nat := GetNation ( tower ) ;
36865: LD_ADDR_VAR 0 12
36869: PUSH
36870: LD_VAR 0 1
36874: PPUSH
36875: CALL_OW 248
36879: ST_TO_ADDR
// side := GetSide ( tower ) ;
36880: LD_ADDR_VAR 0 16
36884: PUSH
36885: LD_VAR 0 1
36889: PPUSH
36890: CALL_OW 255
36894: ST_TO_ADDR
// x := GetX ( tower ) ;
36895: LD_ADDR_VAR 0 10
36899: PUSH
36900: LD_VAR 0 1
36904: PPUSH
36905: CALL_OW 250
36909: ST_TO_ADDR
// y := GetY ( tower ) ;
36910: LD_ADDR_VAR 0 11
36914: PUSH
36915: LD_VAR 0 1
36919: PPUSH
36920: CALL_OW 251
36924: ST_TO_ADDR
// if not x or not y then
36925: LD_VAR 0 10
36929: NOT
36930: PUSH
36931: LD_VAR 0 11
36935: NOT
36936: OR
36937: IFFALSE 36941
// exit ;
36939: GO 37974
// weapon := 0 ;
36941: LD_ADDR_VAR 0 18
36945: PUSH
36946: LD_INT 0
36948: ST_TO_ADDR
// fac_list := [ ] ;
36949: LD_ADDR_VAR 0 17
36953: PUSH
36954: EMPTY
36955: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36956: LD_ADDR_VAR 0 6
36960: PUSH
36961: LD_VAR 0 1
36965: PPUSH
36966: CALL_OW 274
36970: PPUSH
36971: LD_VAR 0 2
36975: PPUSH
36976: LD_INT 0
36978: PPUSH
36979: CALL 34544 0 3
36983: PPUSH
36984: LD_INT 30
36986: PUSH
36987: LD_INT 3
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PPUSH
36994: CALL_OW 72
36998: ST_TO_ADDR
// if not factories then
36999: LD_VAR 0 6
37003: NOT
37004: IFFALSE 37008
// exit ;
37006: GO 37974
// for i in factories do
37008: LD_ADDR_VAR 0 8
37012: PUSH
37013: LD_VAR 0 6
37017: PUSH
37018: FOR_IN
37019: IFFALSE 37044
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37021: LD_ADDR_VAR 0 17
37025: PUSH
37026: LD_VAR 0 17
37030: PUSH
37031: LD_VAR 0 8
37035: PPUSH
37036: CALL_OW 478
37040: UNION
37041: ST_TO_ADDR
37042: GO 37018
37044: POP
37045: POP
// if not fac_list then
37046: LD_VAR 0 17
37050: NOT
37051: IFFALSE 37055
// exit ;
37053: GO 37974
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37055: LD_ADDR_VAR 0 5
37059: PUSH
37060: LD_INT 4
37062: PUSH
37063: LD_INT 5
37065: PUSH
37066: LD_INT 9
37068: PUSH
37069: LD_INT 10
37071: PUSH
37072: LD_INT 6
37074: PUSH
37075: LD_INT 7
37077: PUSH
37078: LD_INT 11
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 27
37092: PUSH
37093: LD_INT 28
37095: PUSH
37096: LD_INT 26
37098: PUSH
37099: LD_INT 30
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 43
37110: PUSH
37111: LD_INT 44
37113: PUSH
37114: LD_INT 46
37116: PUSH
37117: LD_INT 45
37119: PUSH
37120: LD_INT 47
37122: PUSH
37123: LD_INT 49
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: PUSH
37139: LD_VAR 0 12
37143: ARRAY
37144: ST_TO_ADDR
// list := list isect fac_list ;
37145: LD_ADDR_VAR 0 5
37149: PUSH
37150: LD_VAR 0 5
37154: PUSH
37155: LD_VAR 0 17
37159: ISECT
37160: ST_TO_ADDR
// if not list then
37161: LD_VAR 0 5
37165: NOT
37166: IFFALSE 37170
// exit ;
37168: GO 37974
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37170: LD_VAR 0 12
37174: PUSH
37175: LD_INT 3
37177: EQUAL
37178: PUSH
37179: LD_INT 49
37181: PUSH
37182: LD_VAR 0 5
37186: IN
37187: AND
37188: PUSH
37189: LD_INT 31
37191: PPUSH
37192: LD_VAR 0 16
37196: PPUSH
37197: CALL_OW 321
37201: PUSH
37202: LD_INT 2
37204: EQUAL
37205: AND
37206: IFFALSE 37266
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37208: LD_INT 22
37210: PUSH
37211: LD_VAR 0 16
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 35
37222: PUSH
37223: LD_INT 49
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 91
37232: PUSH
37233: LD_VAR 0 1
37237: PUSH
37238: LD_INT 10
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: PPUSH
37251: CALL_OW 69
37255: NOT
37256: IFFALSE 37266
// weapon := ru_time_lapser ;
37258: LD_ADDR_VAR 0 18
37262: PUSH
37263: LD_INT 49
37265: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37266: LD_VAR 0 12
37270: PUSH
37271: LD_INT 1
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: IN
37281: PUSH
37282: LD_INT 11
37284: PUSH
37285: LD_VAR 0 5
37289: IN
37290: PUSH
37291: LD_INT 30
37293: PUSH
37294: LD_VAR 0 5
37298: IN
37299: OR
37300: AND
37301: PUSH
37302: LD_INT 6
37304: PPUSH
37305: LD_VAR 0 16
37309: PPUSH
37310: CALL_OW 321
37314: PUSH
37315: LD_INT 2
37317: EQUAL
37318: AND
37319: IFFALSE 37484
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37321: LD_INT 22
37323: PUSH
37324: LD_VAR 0 16
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 2
37335: PUSH
37336: LD_INT 35
37338: PUSH
37339: LD_INT 11
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 35
37348: PUSH
37349: LD_INT 30
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 91
37363: PUSH
37364: LD_VAR 0 1
37368: PUSH
37369: LD_INT 18
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: LIST
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: LIST
37381: PPUSH
37382: CALL_OW 69
37386: NOT
37387: PUSH
37388: LD_INT 22
37390: PUSH
37391: LD_VAR 0 16
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 2
37402: PUSH
37403: LD_INT 30
37405: PUSH
37406: LD_INT 32
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 30
37415: PUSH
37416: LD_INT 33
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 91
37430: PUSH
37431: LD_VAR 0 1
37435: PUSH
37436: LD_INT 12
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: PUSH
37449: EMPTY
37450: LIST
37451: PPUSH
37452: CALL_OW 69
37456: PUSH
37457: LD_INT 2
37459: GREATER
37460: AND
37461: IFFALSE 37484
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37463: LD_ADDR_VAR 0 18
37467: PUSH
37468: LD_INT 11
37470: PUSH
37471: LD_INT 30
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_VAR 0 12
37482: ARRAY
37483: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37484: LD_VAR 0 18
37488: NOT
37489: PUSH
37490: LD_INT 40
37492: PPUSH
37493: LD_VAR 0 16
37497: PPUSH
37498: CALL_OW 321
37502: PUSH
37503: LD_INT 2
37505: EQUAL
37506: AND
37507: PUSH
37508: LD_INT 7
37510: PUSH
37511: LD_VAR 0 5
37515: IN
37516: PUSH
37517: LD_INT 28
37519: PUSH
37520: LD_VAR 0 5
37524: IN
37525: OR
37526: PUSH
37527: LD_INT 45
37529: PUSH
37530: LD_VAR 0 5
37534: IN
37535: OR
37536: AND
37537: IFFALSE 37791
// begin hex := GetHexInfo ( x , y ) ;
37539: LD_ADDR_VAR 0 4
37543: PUSH
37544: LD_VAR 0 10
37548: PPUSH
37549: LD_VAR 0 11
37553: PPUSH
37554: CALL_OW 546
37558: ST_TO_ADDR
// if hex [ 1 ] then
37559: LD_VAR 0 4
37563: PUSH
37564: LD_INT 1
37566: ARRAY
37567: IFFALSE 37571
// exit ;
37569: GO 37974
// height := hex [ 2 ] ;
37571: LD_ADDR_VAR 0 15
37575: PUSH
37576: LD_VAR 0 4
37580: PUSH
37581: LD_INT 2
37583: ARRAY
37584: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37585: LD_ADDR_VAR 0 14
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: LD_INT 3
37598: PUSH
37599: LD_INT 5
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: ST_TO_ADDR
// for i in tmp do
37608: LD_ADDR_VAR 0 8
37612: PUSH
37613: LD_VAR 0 14
37617: PUSH
37618: FOR_IN
37619: IFFALSE 37789
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37621: LD_ADDR_VAR 0 9
37625: PUSH
37626: LD_VAR 0 10
37630: PPUSH
37631: LD_VAR 0 8
37635: PPUSH
37636: LD_INT 5
37638: PPUSH
37639: CALL_OW 272
37643: PUSH
37644: LD_VAR 0 11
37648: PPUSH
37649: LD_VAR 0 8
37653: PPUSH
37654: LD_INT 5
37656: PPUSH
37657: CALL_OW 273
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37666: LD_VAR 0 9
37670: PUSH
37671: LD_INT 1
37673: ARRAY
37674: PPUSH
37675: LD_VAR 0 9
37679: PUSH
37680: LD_INT 2
37682: ARRAY
37683: PPUSH
37684: CALL_OW 488
37688: IFFALSE 37787
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37690: LD_ADDR_VAR 0 4
37694: PUSH
37695: LD_VAR 0 9
37699: PUSH
37700: LD_INT 1
37702: ARRAY
37703: PPUSH
37704: LD_VAR 0 9
37708: PUSH
37709: LD_INT 2
37711: ARRAY
37712: PPUSH
37713: CALL_OW 546
37717: ST_TO_ADDR
// if hex [ 1 ] then
37718: LD_VAR 0 4
37722: PUSH
37723: LD_INT 1
37725: ARRAY
37726: IFFALSE 37730
// continue ;
37728: GO 37618
// h := hex [ 2 ] ;
37730: LD_ADDR_VAR 0 13
37734: PUSH
37735: LD_VAR 0 4
37739: PUSH
37740: LD_INT 2
37742: ARRAY
37743: ST_TO_ADDR
// if h + 7 < height then
37744: LD_VAR 0 13
37748: PUSH
37749: LD_INT 7
37751: PLUS
37752: PUSH
37753: LD_VAR 0 15
37757: LESS
37758: IFFALSE 37787
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37760: LD_ADDR_VAR 0 18
37764: PUSH
37765: LD_INT 7
37767: PUSH
37768: LD_INT 28
37770: PUSH
37771: LD_INT 45
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: LIST
37778: PUSH
37779: LD_VAR 0 12
37783: ARRAY
37784: ST_TO_ADDR
// break ;
37785: GO 37789
// end ; end ; end ;
37787: GO 37618
37789: POP
37790: POP
// end ; if not weapon then
37791: LD_VAR 0 18
37795: NOT
37796: IFFALSE 37856
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37798: LD_ADDR_VAR 0 5
37802: PUSH
37803: LD_VAR 0 5
37807: PUSH
37808: LD_INT 11
37810: PUSH
37811: LD_INT 30
37813: PUSH
37814: LD_INT 49
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: LIST
37821: DIFF
37822: ST_TO_ADDR
// if not list then
37823: LD_VAR 0 5
37827: NOT
37828: IFFALSE 37832
// exit ;
37830: GO 37974
// weapon := list [ rand ( 1 , list ) ] ;
37832: LD_ADDR_VAR 0 18
37836: PUSH
37837: LD_VAR 0 5
37841: PUSH
37842: LD_INT 1
37844: PPUSH
37845: LD_VAR 0 5
37849: PPUSH
37850: CALL_OW 12
37854: ARRAY
37855: ST_TO_ADDR
// end ; if weapon then
37856: LD_VAR 0 18
37860: IFFALSE 37974
// begin tmp := CostOfWeapon ( weapon ) ;
37862: LD_ADDR_VAR 0 14
37866: PUSH
37867: LD_VAR 0 18
37871: PPUSH
37872: CALL_OW 451
37876: ST_TO_ADDR
// j := GetBase ( tower ) ;
37877: LD_ADDR_VAR 0 9
37881: PUSH
37882: LD_VAR 0 1
37886: PPUSH
37887: CALL_OW 274
37891: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37892: LD_VAR 0 9
37896: PPUSH
37897: LD_INT 1
37899: PPUSH
37900: CALL_OW 275
37904: PUSH
37905: LD_VAR 0 14
37909: PUSH
37910: LD_INT 1
37912: ARRAY
37913: GREATEREQUAL
37914: PUSH
37915: LD_VAR 0 9
37919: PPUSH
37920: LD_INT 2
37922: PPUSH
37923: CALL_OW 275
37927: PUSH
37928: LD_VAR 0 14
37932: PUSH
37933: LD_INT 2
37935: ARRAY
37936: GREATEREQUAL
37937: AND
37938: PUSH
37939: LD_VAR 0 9
37943: PPUSH
37944: LD_INT 3
37946: PPUSH
37947: CALL_OW 275
37951: PUSH
37952: LD_VAR 0 14
37956: PUSH
37957: LD_INT 3
37959: ARRAY
37960: GREATEREQUAL
37961: AND
37962: IFFALSE 37974
// result := weapon ;
37964: LD_ADDR_VAR 0 3
37968: PUSH
37969: LD_VAR 0 18
37973: ST_TO_ADDR
// end ; end ;
37974: LD_VAR 0 3
37978: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37979: LD_INT 0
37981: PPUSH
37982: PPUSH
// result := true ;
37983: LD_ADDR_VAR 0 3
37987: PUSH
37988: LD_INT 1
37990: ST_TO_ADDR
// if array1 = array2 then
37991: LD_VAR 0 1
37995: PUSH
37996: LD_VAR 0 2
38000: EQUAL
38001: IFFALSE 38061
// begin for i = 1 to array1 do
38003: LD_ADDR_VAR 0 4
38007: PUSH
38008: DOUBLE
38009: LD_INT 1
38011: DEC
38012: ST_TO_ADDR
38013: LD_VAR 0 1
38017: PUSH
38018: FOR_TO
38019: IFFALSE 38057
// if array1 [ i ] <> array2 [ i ] then
38021: LD_VAR 0 1
38025: PUSH
38026: LD_VAR 0 4
38030: ARRAY
38031: PUSH
38032: LD_VAR 0 2
38036: PUSH
38037: LD_VAR 0 4
38041: ARRAY
38042: NONEQUAL
38043: IFFALSE 38055
// begin result := false ;
38045: LD_ADDR_VAR 0 3
38049: PUSH
38050: LD_INT 0
38052: ST_TO_ADDR
// break ;
38053: GO 38057
// end ;
38055: GO 38018
38057: POP
38058: POP
// end else
38059: GO 38069
// result := false ;
38061: LD_ADDR_VAR 0 3
38065: PUSH
38066: LD_INT 0
38068: ST_TO_ADDR
// end ;
38069: LD_VAR 0 3
38073: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38074: LD_INT 0
38076: PPUSH
38077: PPUSH
// if not array1 or not array2 then
38078: LD_VAR 0 1
38082: NOT
38083: PUSH
38084: LD_VAR 0 2
38088: NOT
38089: OR
38090: IFFALSE 38094
// exit ;
38092: GO 38158
// result := true ;
38094: LD_ADDR_VAR 0 3
38098: PUSH
38099: LD_INT 1
38101: ST_TO_ADDR
// for i = 1 to array1 do
38102: LD_ADDR_VAR 0 4
38106: PUSH
38107: DOUBLE
38108: LD_INT 1
38110: DEC
38111: ST_TO_ADDR
38112: LD_VAR 0 1
38116: PUSH
38117: FOR_TO
38118: IFFALSE 38156
// if array1 [ i ] <> array2 [ i ] then
38120: LD_VAR 0 1
38124: PUSH
38125: LD_VAR 0 4
38129: ARRAY
38130: PUSH
38131: LD_VAR 0 2
38135: PUSH
38136: LD_VAR 0 4
38140: ARRAY
38141: NONEQUAL
38142: IFFALSE 38154
// begin result := false ;
38144: LD_ADDR_VAR 0 3
38148: PUSH
38149: LD_INT 0
38151: ST_TO_ADDR
// break ;
38152: GO 38156
// end ;
38154: GO 38117
38156: POP
38157: POP
// end ;
38158: LD_VAR 0 3
38162: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38163: LD_INT 0
38165: PPUSH
38166: PPUSH
38167: PPUSH
// pom := GetBase ( fac ) ;
38168: LD_ADDR_VAR 0 5
38172: PUSH
38173: LD_VAR 0 1
38177: PPUSH
38178: CALL_OW 274
38182: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38183: LD_ADDR_VAR 0 4
38187: PUSH
38188: LD_VAR 0 2
38192: PUSH
38193: LD_INT 1
38195: ARRAY
38196: PPUSH
38197: LD_VAR 0 2
38201: PUSH
38202: LD_INT 2
38204: ARRAY
38205: PPUSH
38206: LD_VAR 0 2
38210: PUSH
38211: LD_INT 3
38213: ARRAY
38214: PPUSH
38215: LD_VAR 0 2
38219: PUSH
38220: LD_INT 4
38222: ARRAY
38223: PPUSH
38224: CALL_OW 449
38228: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38229: LD_ADDR_VAR 0 3
38233: PUSH
38234: LD_VAR 0 5
38238: PPUSH
38239: LD_INT 1
38241: PPUSH
38242: CALL_OW 275
38246: PUSH
38247: LD_VAR 0 4
38251: PUSH
38252: LD_INT 1
38254: ARRAY
38255: GREATEREQUAL
38256: PUSH
38257: LD_VAR 0 5
38261: PPUSH
38262: LD_INT 2
38264: PPUSH
38265: CALL_OW 275
38269: PUSH
38270: LD_VAR 0 4
38274: PUSH
38275: LD_INT 2
38277: ARRAY
38278: GREATEREQUAL
38279: AND
38280: PUSH
38281: LD_VAR 0 5
38285: PPUSH
38286: LD_INT 3
38288: PPUSH
38289: CALL_OW 275
38293: PUSH
38294: LD_VAR 0 4
38298: PUSH
38299: LD_INT 3
38301: ARRAY
38302: GREATEREQUAL
38303: AND
38304: ST_TO_ADDR
// end ;
38305: LD_VAR 0 3
38309: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38310: LD_INT 0
38312: PPUSH
38313: PPUSH
38314: PPUSH
38315: PPUSH
// pom := GetBase ( building ) ;
38316: LD_ADDR_VAR 0 3
38320: PUSH
38321: LD_VAR 0 1
38325: PPUSH
38326: CALL_OW 274
38330: ST_TO_ADDR
// if not pom then
38331: LD_VAR 0 3
38335: NOT
38336: IFFALSE 38340
// exit ;
38338: GO 38510
// btype := GetBType ( building ) ;
38340: LD_ADDR_VAR 0 5
38344: PUSH
38345: LD_VAR 0 1
38349: PPUSH
38350: CALL_OW 266
38354: ST_TO_ADDR
// if btype = b_armoury then
38355: LD_VAR 0 5
38359: PUSH
38360: LD_INT 4
38362: EQUAL
38363: IFFALSE 38373
// btype := b_barracks ;
38365: LD_ADDR_VAR 0 5
38369: PUSH
38370: LD_INT 5
38372: ST_TO_ADDR
// if btype = b_depot then
38373: LD_VAR 0 5
38377: PUSH
38378: LD_INT 0
38380: EQUAL
38381: IFFALSE 38391
// btype := b_warehouse ;
38383: LD_ADDR_VAR 0 5
38387: PUSH
38388: LD_INT 1
38390: ST_TO_ADDR
// if btype = b_workshop then
38391: LD_VAR 0 5
38395: PUSH
38396: LD_INT 2
38398: EQUAL
38399: IFFALSE 38409
// btype := b_factory ;
38401: LD_ADDR_VAR 0 5
38405: PUSH
38406: LD_INT 3
38408: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38409: LD_ADDR_VAR 0 4
38413: PUSH
38414: LD_VAR 0 5
38418: PPUSH
38419: LD_VAR 0 1
38423: PPUSH
38424: CALL_OW 248
38428: PPUSH
38429: CALL_OW 450
38433: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38434: LD_ADDR_VAR 0 2
38438: PUSH
38439: LD_VAR 0 3
38443: PPUSH
38444: LD_INT 1
38446: PPUSH
38447: CALL_OW 275
38451: PUSH
38452: LD_VAR 0 4
38456: PUSH
38457: LD_INT 1
38459: ARRAY
38460: GREATEREQUAL
38461: PUSH
38462: LD_VAR 0 3
38466: PPUSH
38467: LD_INT 2
38469: PPUSH
38470: CALL_OW 275
38474: PUSH
38475: LD_VAR 0 4
38479: PUSH
38480: LD_INT 2
38482: ARRAY
38483: GREATEREQUAL
38484: AND
38485: PUSH
38486: LD_VAR 0 3
38490: PPUSH
38491: LD_INT 3
38493: PPUSH
38494: CALL_OW 275
38498: PUSH
38499: LD_VAR 0 4
38503: PUSH
38504: LD_INT 3
38506: ARRAY
38507: GREATEREQUAL
38508: AND
38509: ST_TO_ADDR
// end ;
38510: LD_VAR 0 2
38514: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38515: LD_INT 0
38517: PPUSH
38518: PPUSH
38519: PPUSH
// pom := GetBase ( building ) ;
38520: LD_ADDR_VAR 0 4
38524: PUSH
38525: LD_VAR 0 1
38529: PPUSH
38530: CALL_OW 274
38534: ST_TO_ADDR
// if not pom then
38535: LD_VAR 0 4
38539: NOT
38540: IFFALSE 38544
// exit ;
38542: GO 38645
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38544: LD_ADDR_VAR 0 5
38548: PUSH
38549: LD_VAR 0 2
38553: PPUSH
38554: LD_VAR 0 1
38558: PPUSH
38559: CALL_OW 248
38563: PPUSH
38564: CALL_OW 450
38568: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38569: LD_ADDR_VAR 0 3
38573: PUSH
38574: LD_VAR 0 4
38578: PPUSH
38579: LD_INT 1
38581: PPUSH
38582: CALL_OW 275
38586: PUSH
38587: LD_VAR 0 5
38591: PUSH
38592: LD_INT 1
38594: ARRAY
38595: GREATEREQUAL
38596: PUSH
38597: LD_VAR 0 4
38601: PPUSH
38602: LD_INT 2
38604: PPUSH
38605: CALL_OW 275
38609: PUSH
38610: LD_VAR 0 5
38614: PUSH
38615: LD_INT 2
38617: ARRAY
38618: GREATEREQUAL
38619: AND
38620: PUSH
38621: LD_VAR 0 4
38625: PPUSH
38626: LD_INT 3
38628: PPUSH
38629: CALL_OW 275
38633: PUSH
38634: LD_VAR 0 5
38638: PUSH
38639: LD_INT 3
38641: ARRAY
38642: GREATEREQUAL
38643: AND
38644: ST_TO_ADDR
// end ;
38645: LD_VAR 0 3
38649: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38650: LD_INT 0
38652: PPUSH
38653: PPUSH
38654: PPUSH
38655: PPUSH
38656: PPUSH
38657: PPUSH
38658: PPUSH
38659: PPUSH
38660: PPUSH
38661: PPUSH
38662: PPUSH
// result := false ;
38663: LD_ADDR_VAR 0 8
38667: PUSH
38668: LD_INT 0
38670: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38671: LD_VAR 0 5
38675: NOT
38676: PUSH
38677: LD_VAR 0 1
38681: NOT
38682: OR
38683: PUSH
38684: LD_VAR 0 2
38688: NOT
38689: OR
38690: PUSH
38691: LD_VAR 0 3
38695: NOT
38696: OR
38697: IFFALSE 38701
// exit ;
38699: GO 39515
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38701: LD_ADDR_VAR 0 14
38705: PUSH
38706: LD_VAR 0 1
38710: PPUSH
38711: LD_VAR 0 2
38715: PPUSH
38716: LD_VAR 0 3
38720: PPUSH
38721: LD_VAR 0 4
38725: PPUSH
38726: LD_VAR 0 5
38730: PUSH
38731: LD_INT 1
38733: ARRAY
38734: PPUSH
38735: CALL_OW 248
38739: PPUSH
38740: LD_INT 0
38742: PPUSH
38743: CALL 40752 0 6
38747: ST_TO_ADDR
// if not hexes then
38748: LD_VAR 0 14
38752: NOT
38753: IFFALSE 38757
// exit ;
38755: GO 39515
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38757: LD_ADDR_VAR 0 17
38761: PUSH
38762: LD_VAR 0 5
38766: PPUSH
38767: LD_INT 22
38769: PUSH
38770: LD_VAR 0 13
38774: PPUSH
38775: CALL_OW 255
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: LD_INT 30
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 30
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PPUSH
38816: CALL_OW 72
38820: ST_TO_ADDR
// for i = 1 to hexes do
38821: LD_ADDR_VAR 0 9
38825: PUSH
38826: DOUBLE
38827: LD_INT 1
38829: DEC
38830: ST_TO_ADDR
38831: LD_VAR 0 14
38835: PUSH
38836: FOR_TO
38837: IFFALSE 39513
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38839: LD_ADDR_VAR 0 13
38843: PUSH
38844: LD_VAR 0 14
38848: PUSH
38849: LD_VAR 0 9
38853: ARRAY
38854: PUSH
38855: LD_INT 1
38857: ARRAY
38858: PPUSH
38859: LD_VAR 0 14
38863: PUSH
38864: LD_VAR 0 9
38868: ARRAY
38869: PUSH
38870: LD_INT 2
38872: ARRAY
38873: PPUSH
38874: CALL_OW 428
38878: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38879: LD_VAR 0 14
38883: PUSH
38884: LD_VAR 0 9
38888: ARRAY
38889: PUSH
38890: LD_INT 1
38892: ARRAY
38893: PPUSH
38894: LD_VAR 0 14
38898: PUSH
38899: LD_VAR 0 9
38903: ARRAY
38904: PUSH
38905: LD_INT 2
38907: ARRAY
38908: PPUSH
38909: CALL_OW 351
38913: PUSH
38914: LD_VAR 0 14
38918: PUSH
38919: LD_VAR 0 9
38923: ARRAY
38924: PUSH
38925: LD_INT 1
38927: ARRAY
38928: PPUSH
38929: LD_VAR 0 14
38933: PUSH
38934: LD_VAR 0 9
38938: ARRAY
38939: PUSH
38940: LD_INT 2
38942: ARRAY
38943: PPUSH
38944: CALL_OW 488
38948: NOT
38949: OR
38950: PUSH
38951: LD_VAR 0 13
38955: PPUSH
38956: CALL_OW 247
38960: PUSH
38961: LD_INT 3
38963: EQUAL
38964: OR
38965: IFFALSE 38971
// exit ;
38967: POP
38968: POP
38969: GO 39515
// if not tmp then
38971: LD_VAR 0 13
38975: NOT
38976: IFFALSE 38980
// continue ;
38978: GO 38836
// result := true ;
38980: LD_ADDR_VAR 0 8
38984: PUSH
38985: LD_INT 1
38987: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38988: LD_VAR 0 6
38992: PUSH
38993: LD_VAR 0 13
38997: PPUSH
38998: CALL_OW 247
39002: PUSH
39003: LD_INT 2
39005: EQUAL
39006: AND
39007: PUSH
39008: LD_VAR 0 13
39012: PPUSH
39013: CALL_OW 263
39017: PUSH
39018: LD_INT 1
39020: EQUAL
39021: AND
39022: IFFALSE 39186
// begin if IsDrivenBy ( tmp ) then
39024: LD_VAR 0 13
39028: PPUSH
39029: CALL_OW 311
39033: IFFALSE 39037
// continue ;
39035: GO 38836
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39037: LD_VAR 0 6
39041: PPUSH
39042: LD_INT 3
39044: PUSH
39045: LD_INT 60
39047: PUSH
39048: EMPTY
39049: LIST
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 3
39057: PUSH
39058: LD_INT 55
39060: PUSH
39061: EMPTY
39062: LIST
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PPUSH
39072: CALL_OW 72
39076: IFFALSE 39184
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39078: LD_ADDR_VAR 0 18
39082: PUSH
39083: LD_VAR 0 6
39087: PPUSH
39088: LD_INT 3
39090: PUSH
39091: LD_INT 60
39093: PUSH
39094: EMPTY
39095: LIST
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 3
39103: PUSH
39104: LD_INT 55
39106: PUSH
39107: EMPTY
39108: LIST
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PPUSH
39118: CALL_OW 72
39122: PUSH
39123: LD_INT 1
39125: ARRAY
39126: ST_TO_ADDR
// if IsInUnit ( driver ) then
39127: LD_VAR 0 18
39131: PPUSH
39132: CALL_OW 310
39136: IFFALSE 39147
// ComExit ( driver ) ;
39138: LD_VAR 0 18
39142: PPUSH
39143: CALL 63936 0 1
// AddComEnterUnit ( driver , tmp ) ;
39147: LD_VAR 0 18
39151: PPUSH
39152: LD_VAR 0 13
39156: PPUSH
39157: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39161: LD_VAR 0 18
39165: PPUSH
39166: LD_VAR 0 7
39170: PPUSH
39171: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39175: LD_VAR 0 18
39179: PPUSH
39180: CALL_OW 181
// end ; continue ;
39184: GO 38836
// end ; if not cleaners or not tmp in cleaners then
39186: LD_VAR 0 6
39190: NOT
39191: PUSH
39192: LD_VAR 0 13
39196: PUSH
39197: LD_VAR 0 6
39201: IN
39202: NOT
39203: OR
39204: IFFALSE 39511
// begin if dep then
39206: LD_VAR 0 17
39210: IFFALSE 39346
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39212: LD_ADDR_VAR 0 16
39216: PUSH
39217: LD_VAR 0 17
39221: PUSH
39222: LD_INT 1
39224: ARRAY
39225: PPUSH
39226: CALL_OW 250
39230: PPUSH
39231: LD_VAR 0 17
39235: PUSH
39236: LD_INT 1
39238: ARRAY
39239: PPUSH
39240: CALL_OW 254
39244: PPUSH
39245: LD_INT 5
39247: PPUSH
39248: CALL_OW 272
39252: PUSH
39253: LD_VAR 0 17
39257: PUSH
39258: LD_INT 1
39260: ARRAY
39261: PPUSH
39262: CALL_OW 251
39266: PPUSH
39267: LD_VAR 0 17
39271: PUSH
39272: LD_INT 1
39274: ARRAY
39275: PPUSH
39276: CALL_OW 254
39280: PPUSH
39281: LD_INT 5
39283: PPUSH
39284: CALL_OW 273
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39293: LD_VAR 0 16
39297: PUSH
39298: LD_INT 1
39300: ARRAY
39301: PPUSH
39302: LD_VAR 0 16
39306: PUSH
39307: LD_INT 2
39309: ARRAY
39310: PPUSH
39311: CALL_OW 488
39315: IFFALSE 39346
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39317: LD_VAR 0 13
39321: PPUSH
39322: LD_VAR 0 16
39326: PUSH
39327: LD_INT 1
39329: ARRAY
39330: PPUSH
39331: LD_VAR 0 16
39335: PUSH
39336: LD_INT 2
39338: ARRAY
39339: PPUSH
39340: CALL_OW 111
// continue ;
39344: GO 38836
// end ; end ; r := GetDir ( tmp ) ;
39346: LD_ADDR_VAR 0 15
39350: PUSH
39351: LD_VAR 0 13
39355: PPUSH
39356: CALL_OW 254
39360: ST_TO_ADDR
// if r = 5 then
39361: LD_VAR 0 15
39365: PUSH
39366: LD_INT 5
39368: EQUAL
39369: IFFALSE 39379
// r := 0 ;
39371: LD_ADDR_VAR 0 15
39375: PUSH
39376: LD_INT 0
39378: ST_TO_ADDR
// for j = r to 5 do
39379: LD_ADDR_VAR 0 10
39383: PUSH
39384: DOUBLE
39385: LD_VAR 0 15
39389: DEC
39390: ST_TO_ADDR
39391: LD_INT 5
39393: PUSH
39394: FOR_TO
39395: IFFALSE 39509
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39397: LD_ADDR_VAR 0 11
39401: PUSH
39402: LD_VAR 0 13
39406: PPUSH
39407: CALL_OW 250
39411: PPUSH
39412: LD_VAR 0 10
39416: PPUSH
39417: LD_INT 2
39419: PPUSH
39420: CALL_OW 272
39424: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39425: LD_ADDR_VAR 0 12
39429: PUSH
39430: LD_VAR 0 13
39434: PPUSH
39435: CALL_OW 251
39439: PPUSH
39440: LD_VAR 0 10
39444: PPUSH
39445: LD_INT 2
39447: PPUSH
39448: CALL_OW 273
39452: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39453: LD_VAR 0 11
39457: PPUSH
39458: LD_VAR 0 12
39462: PPUSH
39463: CALL_OW 488
39467: PUSH
39468: LD_VAR 0 11
39472: PPUSH
39473: LD_VAR 0 12
39477: PPUSH
39478: CALL_OW 428
39482: NOT
39483: AND
39484: IFFALSE 39507
// begin ComMoveXY ( tmp , _x , _y ) ;
39486: LD_VAR 0 13
39490: PPUSH
39491: LD_VAR 0 11
39495: PPUSH
39496: LD_VAR 0 12
39500: PPUSH
39501: CALL_OW 111
// break ;
39505: GO 39509
// end ; end ;
39507: GO 39394
39509: POP
39510: POP
// end ; end ;
39511: GO 38836
39513: POP
39514: POP
// end ;
39515: LD_VAR 0 8
39519: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39520: LD_INT 0
39522: PPUSH
// result := true ;
39523: LD_ADDR_VAR 0 3
39527: PUSH
39528: LD_INT 1
39530: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39531: LD_VAR 0 2
39535: PUSH
39536: LD_INT 24
39538: DOUBLE
39539: EQUAL
39540: IFTRUE 39550
39542: LD_INT 33
39544: DOUBLE
39545: EQUAL
39546: IFTRUE 39550
39548: GO 39575
39550: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39551: LD_ADDR_VAR 0 3
39555: PUSH
39556: LD_INT 32
39558: PPUSH
39559: LD_VAR 0 1
39563: PPUSH
39564: CALL_OW 321
39568: PUSH
39569: LD_INT 2
39571: EQUAL
39572: ST_TO_ADDR
39573: GO 39895
39575: LD_INT 20
39577: DOUBLE
39578: EQUAL
39579: IFTRUE 39583
39581: GO 39608
39583: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39584: LD_ADDR_VAR 0 3
39588: PUSH
39589: LD_INT 6
39591: PPUSH
39592: LD_VAR 0 1
39596: PPUSH
39597: CALL_OW 321
39601: PUSH
39602: LD_INT 2
39604: EQUAL
39605: ST_TO_ADDR
39606: GO 39895
39608: LD_INT 22
39610: DOUBLE
39611: EQUAL
39612: IFTRUE 39622
39614: LD_INT 36
39616: DOUBLE
39617: EQUAL
39618: IFTRUE 39622
39620: GO 39647
39622: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39623: LD_ADDR_VAR 0 3
39627: PUSH
39628: LD_INT 15
39630: PPUSH
39631: LD_VAR 0 1
39635: PPUSH
39636: CALL_OW 321
39640: PUSH
39641: LD_INT 2
39643: EQUAL
39644: ST_TO_ADDR
39645: GO 39895
39647: LD_INT 30
39649: DOUBLE
39650: EQUAL
39651: IFTRUE 39655
39653: GO 39680
39655: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39656: LD_ADDR_VAR 0 3
39660: PUSH
39661: LD_INT 20
39663: PPUSH
39664: LD_VAR 0 1
39668: PPUSH
39669: CALL_OW 321
39673: PUSH
39674: LD_INT 2
39676: EQUAL
39677: ST_TO_ADDR
39678: GO 39895
39680: LD_INT 28
39682: DOUBLE
39683: EQUAL
39684: IFTRUE 39694
39686: LD_INT 21
39688: DOUBLE
39689: EQUAL
39690: IFTRUE 39694
39692: GO 39719
39694: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39695: LD_ADDR_VAR 0 3
39699: PUSH
39700: LD_INT 21
39702: PPUSH
39703: LD_VAR 0 1
39707: PPUSH
39708: CALL_OW 321
39712: PUSH
39713: LD_INT 2
39715: EQUAL
39716: ST_TO_ADDR
39717: GO 39895
39719: LD_INT 16
39721: DOUBLE
39722: EQUAL
39723: IFTRUE 39727
39725: GO 39754
39727: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39728: LD_ADDR_VAR 0 3
39732: PUSH
39733: LD_EXP 37
39737: PPUSH
39738: LD_VAR 0 1
39742: PPUSH
39743: CALL_OW 321
39747: PUSH
39748: LD_INT 2
39750: EQUAL
39751: ST_TO_ADDR
39752: GO 39895
39754: LD_INT 19
39756: DOUBLE
39757: EQUAL
39758: IFTRUE 39768
39760: LD_INT 23
39762: DOUBLE
39763: EQUAL
39764: IFTRUE 39768
39766: GO 39795
39768: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39769: LD_ADDR_VAR 0 3
39773: PUSH
39774: LD_EXP 36
39778: PPUSH
39779: LD_VAR 0 1
39783: PPUSH
39784: CALL_OW 321
39788: PUSH
39789: LD_INT 2
39791: EQUAL
39792: ST_TO_ADDR
39793: GO 39895
39795: LD_INT 17
39797: DOUBLE
39798: EQUAL
39799: IFTRUE 39803
39801: GO 39828
39803: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39804: LD_ADDR_VAR 0 3
39808: PUSH
39809: LD_INT 39
39811: PPUSH
39812: LD_VAR 0 1
39816: PPUSH
39817: CALL_OW 321
39821: PUSH
39822: LD_INT 2
39824: EQUAL
39825: ST_TO_ADDR
39826: GO 39895
39828: LD_INT 18
39830: DOUBLE
39831: EQUAL
39832: IFTRUE 39836
39834: GO 39861
39836: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39837: LD_ADDR_VAR 0 3
39841: PUSH
39842: LD_INT 40
39844: PPUSH
39845: LD_VAR 0 1
39849: PPUSH
39850: CALL_OW 321
39854: PUSH
39855: LD_INT 2
39857: EQUAL
39858: ST_TO_ADDR
39859: GO 39895
39861: LD_INT 27
39863: DOUBLE
39864: EQUAL
39865: IFTRUE 39869
39867: GO 39894
39869: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39870: LD_ADDR_VAR 0 3
39874: PUSH
39875: LD_INT 35
39877: PPUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 321
39887: PUSH
39888: LD_INT 2
39890: EQUAL
39891: ST_TO_ADDR
39892: GO 39895
39894: POP
// end ;
39895: LD_VAR 0 3
39899: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39900: LD_INT 0
39902: PPUSH
39903: PPUSH
39904: PPUSH
39905: PPUSH
39906: PPUSH
39907: PPUSH
39908: PPUSH
39909: PPUSH
39910: PPUSH
39911: PPUSH
39912: PPUSH
// result := false ;
39913: LD_ADDR_VAR 0 6
39917: PUSH
39918: LD_INT 0
39920: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39921: LD_VAR 0 1
39925: NOT
39926: PUSH
39927: LD_VAR 0 1
39931: PPUSH
39932: CALL_OW 266
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: IN
39947: NOT
39948: OR
39949: PUSH
39950: LD_VAR 0 2
39954: NOT
39955: OR
39956: PUSH
39957: LD_VAR 0 5
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: LD_INT 3
39973: PUSH
39974: LD_INT 4
39976: PUSH
39977: LD_INT 5
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: IN
39988: NOT
39989: OR
39990: PUSH
39991: LD_VAR 0 3
39995: PPUSH
39996: LD_VAR 0 4
40000: PPUSH
40001: CALL_OW 488
40005: NOT
40006: OR
40007: IFFALSE 40011
// exit ;
40009: GO 40747
// side := GetSide ( depot ) ;
40011: LD_ADDR_VAR 0 9
40015: PUSH
40016: LD_VAR 0 1
40020: PPUSH
40021: CALL_OW 255
40025: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40026: LD_VAR 0 9
40030: PPUSH
40031: LD_VAR 0 2
40035: PPUSH
40036: CALL 39520 0 2
40040: NOT
40041: IFFALSE 40045
// exit ;
40043: GO 40747
// pom := GetBase ( depot ) ;
40045: LD_ADDR_VAR 0 10
40049: PUSH
40050: LD_VAR 0 1
40054: PPUSH
40055: CALL_OW 274
40059: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40060: LD_ADDR_VAR 0 11
40064: PUSH
40065: LD_VAR 0 2
40069: PPUSH
40070: LD_VAR 0 1
40074: PPUSH
40075: CALL_OW 248
40079: PPUSH
40080: CALL_OW 450
40084: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40085: LD_VAR 0 10
40089: PPUSH
40090: LD_INT 1
40092: PPUSH
40093: CALL_OW 275
40097: PUSH
40098: LD_VAR 0 11
40102: PUSH
40103: LD_INT 1
40105: ARRAY
40106: GREATEREQUAL
40107: PUSH
40108: LD_VAR 0 10
40112: PPUSH
40113: LD_INT 2
40115: PPUSH
40116: CALL_OW 275
40120: PUSH
40121: LD_VAR 0 11
40125: PUSH
40126: LD_INT 2
40128: ARRAY
40129: GREATEREQUAL
40130: AND
40131: PUSH
40132: LD_VAR 0 10
40136: PPUSH
40137: LD_INT 3
40139: PPUSH
40140: CALL_OW 275
40144: PUSH
40145: LD_VAR 0 11
40149: PUSH
40150: LD_INT 3
40152: ARRAY
40153: GREATEREQUAL
40154: AND
40155: NOT
40156: IFFALSE 40160
// exit ;
40158: GO 40747
// if GetBType ( depot ) = b_depot then
40160: LD_VAR 0 1
40164: PPUSH
40165: CALL_OW 266
40169: PUSH
40170: LD_INT 0
40172: EQUAL
40173: IFFALSE 40185
// dist := 28 else
40175: LD_ADDR_VAR 0 14
40179: PUSH
40180: LD_INT 28
40182: ST_TO_ADDR
40183: GO 40193
// dist := 36 ;
40185: LD_ADDR_VAR 0 14
40189: PUSH
40190: LD_INT 36
40192: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40193: LD_VAR 0 1
40197: PPUSH
40198: LD_VAR 0 3
40202: PPUSH
40203: LD_VAR 0 4
40207: PPUSH
40208: CALL_OW 297
40212: PUSH
40213: LD_VAR 0 14
40217: GREATER
40218: IFFALSE 40222
// exit ;
40220: GO 40747
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40222: LD_ADDR_VAR 0 12
40226: PUSH
40227: LD_VAR 0 2
40231: PPUSH
40232: LD_VAR 0 3
40236: PPUSH
40237: LD_VAR 0 4
40241: PPUSH
40242: LD_VAR 0 5
40246: PPUSH
40247: LD_VAR 0 1
40251: PPUSH
40252: CALL_OW 248
40256: PPUSH
40257: LD_INT 0
40259: PPUSH
40260: CALL 40752 0 6
40264: ST_TO_ADDR
// if not hexes then
40265: LD_VAR 0 12
40269: NOT
40270: IFFALSE 40274
// exit ;
40272: GO 40747
// hex := GetHexInfo ( x , y ) ;
40274: LD_ADDR_VAR 0 15
40278: PUSH
40279: LD_VAR 0 3
40283: PPUSH
40284: LD_VAR 0 4
40288: PPUSH
40289: CALL_OW 546
40293: ST_TO_ADDR
// if hex [ 1 ] then
40294: LD_VAR 0 15
40298: PUSH
40299: LD_INT 1
40301: ARRAY
40302: IFFALSE 40306
// exit ;
40304: GO 40747
// height := hex [ 2 ] ;
40306: LD_ADDR_VAR 0 13
40310: PUSH
40311: LD_VAR 0 15
40315: PUSH
40316: LD_INT 2
40318: ARRAY
40319: ST_TO_ADDR
// for i = 1 to hexes do
40320: LD_ADDR_VAR 0 7
40324: PUSH
40325: DOUBLE
40326: LD_INT 1
40328: DEC
40329: ST_TO_ADDR
40330: LD_VAR 0 12
40334: PUSH
40335: FOR_TO
40336: IFFALSE 40666
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40338: LD_VAR 0 12
40342: PUSH
40343: LD_VAR 0 7
40347: ARRAY
40348: PUSH
40349: LD_INT 1
40351: ARRAY
40352: PPUSH
40353: LD_VAR 0 12
40357: PUSH
40358: LD_VAR 0 7
40362: ARRAY
40363: PUSH
40364: LD_INT 2
40366: ARRAY
40367: PPUSH
40368: CALL_OW 488
40372: NOT
40373: PUSH
40374: LD_VAR 0 12
40378: PUSH
40379: LD_VAR 0 7
40383: ARRAY
40384: PUSH
40385: LD_INT 1
40387: ARRAY
40388: PPUSH
40389: LD_VAR 0 12
40393: PUSH
40394: LD_VAR 0 7
40398: ARRAY
40399: PUSH
40400: LD_INT 2
40402: ARRAY
40403: PPUSH
40404: CALL_OW 428
40408: PUSH
40409: LD_INT 0
40411: GREATER
40412: OR
40413: PUSH
40414: LD_VAR 0 12
40418: PUSH
40419: LD_VAR 0 7
40423: ARRAY
40424: PUSH
40425: LD_INT 1
40427: ARRAY
40428: PPUSH
40429: LD_VAR 0 12
40433: PUSH
40434: LD_VAR 0 7
40438: ARRAY
40439: PUSH
40440: LD_INT 2
40442: ARRAY
40443: PPUSH
40444: CALL_OW 351
40448: OR
40449: IFFALSE 40455
// exit ;
40451: POP
40452: POP
40453: GO 40747
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40455: LD_ADDR_VAR 0 8
40459: PUSH
40460: LD_VAR 0 12
40464: PUSH
40465: LD_VAR 0 7
40469: ARRAY
40470: PUSH
40471: LD_INT 1
40473: ARRAY
40474: PPUSH
40475: LD_VAR 0 12
40479: PUSH
40480: LD_VAR 0 7
40484: ARRAY
40485: PUSH
40486: LD_INT 2
40488: ARRAY
40489: PPUSH
40490: CALL_OW 546
40494: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40495: LD_VAR 0 8
40499: PUSH
40500: LD_INT 1
40502: ARRAY
40503: PUSH
40504: LD_VAR 0 8
40508: PUSH
40509: LD_INT 2
40511: ARRAY
40512: PUSH
40513: LD_VAR 0 13
40517: PUSH
40518: LD_INT 2
40520: PLUS
40521: GREATER
40522: OR
40523: PUSH
40524: LD_VAR 0 8
40528: PUSH
40529: LD_INT 2
40531: ARRAY
40532: PUSH
40533: LD_VAR 0 13
40537: PUSH
40538: LD_INT 2
40540: MINUS
40541: LESS
40542: OR
40543: PUSH
40544: LD_VAR 0 8
40548: PUSH
40549: LD_INT 3
40551: ARRAY
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: LD_INT 8
40558: PUSH
40559: LD_INT 9
40561: PUSH
40562: LD_INT 10
40564: PUSH
40565: LD_INT 11
40567: PUSH
40568: LD_INT 12
40570: PUSH
40571: LD_INT 13
40573: PUSH
40574: LD_INT 16
40576: PUSH
40577: LD_INT 17
40579: PUSH
40580: LD_INT 18
40582: PUSH
40583: LD_INT 19
40585: PUSH
40586: LD_INT 20
40588: PUSH
40589: LD_INT 21
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: IN
40607: NOT
40608: OR
40609: PUSH
40610: LD_VAR 0 8
40614: PUSH
40615: LD_INT 5
40617: ARRAY
40618: NOT
40619: OR
40620: PUSH
40621: LD_VAR 0 8
40625: PUSH
40626: LD_INT 6
40628: ARRAY
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 2
40635: PUSH
40636: LD_INT 7
40638: PUSH
40639: LD_INT 9
40641: PUSH
40642: LD_INT 10
40644: PUSH
40645: LD_INT 11
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: IN
40656: NOT
40657: OR
40658: IFFALSE 40664
// exit ;
40660: POP
40661: POP
40662: GO 40747
// end ;
40664: GO 40335
40666: POP
40667: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40668: LD_VAR 0 9
40672: PPUSH
40673: LD_VAR 0 3
40677: PPUSH
40678: LD_VAR 0 4
40682: PPUSH
40683: LD_INT 20
40685: PPUSH
40686: CALL 32692 0 4
40690: PUSH
40691: LD_INT 4
40693: ARRAY
40694: IFFALSE 40698
// exit ;
40696: GO 40747
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40698: LD_VAR 0 2
40702: PUSH
40703: LD_INT 29
40705: PUSH
40706: LD_INT 30
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: IN
40713: PUSH
40714: LD_VAR 0 3
40718: PPUSH
40719: LD_VAR 0 4
40723: PPUSH
40724: LD_VAR 0 9
40728: PPUSH
40729: CALL_OW 440
40733: NOT
40734: AND
40735: IFFALSE 40739
// exit ;
40737: GO 40747
// result := true ;
40739: LD_ADDR_VAR 0 6
40743: PUSH
40744: LD_INT 1
40746: ST_TO_ADDR
// end ;
40747: LD_VAR 0 6
40751: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40752: LD_INT 0
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
40759: PPUSH
40760: PPUSH
40761: PPUSH
40762: PPUSH
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
40778: PPUSH
40779: PPUSH
40780: PPUSH
40781: PPUSH
40782: PPUSH
40783: PPUSH
40784: PPUSH
40785: PPUSH
40786: PPUSH
40787: PPUSH
40788: PPUSH
40789: PPUSH
40790: PPUSH
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
40804: PPUSH
40805: PPUSH
40806: PPUSH
40807: PPUSH
40808: PPUSH
40809: PPUSH
40810: PPUSH
40811: PPUSH
// result = [ ] ;
40812: LD_ADDR_VAR 0 7
40816: PUSH
40817: EMPTY
40818: ST_TO_ADDR
// temp_list = [ ] ;
40819: LD_ADDR_VAR 0 9
40823: PUSH
40824: EMPTY
40825: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40826: LD_VAR 0 4
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: LD_INT 2
40839: PUSH
40840: LD_INT 3
40842: PUSH
40843: LD_INT 4
40845: PUSH
40846: LD_INT 5
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: IN
40857: NOT
40858: PUSH
40859: LD_VAR 0 1
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: IN
40874: PUSH
40875: LD_VAR 0 5
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 2
40885: PUSH
40886: LD_INT 3
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: LIST
40893: IN
40894: NOT
40895: AND
40896: OR
40897: IFFALSE 40901
// exit ;
40899: GO 59292
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40901: LD_VAR 0 1
40905: PUSH
40906: LD_INT 6
40908: PUSH
40909: LD_INT 7
40911: PUSH
40912: LD_INT 8
40914: PUSH
40915: LD_INT 13
40917: PUSH
40918: LD_INT 12
40920: PUSH
40921: LD_INT 15
40923: PUSH
40924: LD_INT 11
40926: PUSH
40927: LD_INT 14
40929: PUSH
40930: LD_INT 10
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: IN
40944: IFFALSE 40954
// btype = b_lab ;
40946: LD_ADDR_VAR 0 1
40950: PUSH
40951: LD_INT 6
40953: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40954: LD_VAR 0 6
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: LIST
40972: IN
40973: NOT
40974: PUSH
40975: LD_VAR 0 1
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: LD_INT 2
40988: PUSH
40989: LD_INT 3
40991: PUSH
40992: LD_INT 6
40994: PUSH
40995: LD_INT 36
40997: PUSH
40998: LD_INT 4
41000: PUSH
41001: LD_INT 5
41003: PUSH
41004: LD_INT 31
41006: PUSH
41007: LD_INT 32
41009: PUSH
41010: LD_INT 33
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: IN
41026: NOT
41027: PUSH
41028: LD_VAR 0 6
41032: PUSH
41033: LD_INT 1
41035: EQUAL
41036: AND
41037: OR
41038: PUSH
41039: LD_VAR 0 1
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 3
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: IN
41054: NOT
41055: PUSH
41056: LD_VAR 0 6
41060: PUSH
41061: LD_INT 2
41063: EQUAL
41064: AND
41065: OR
41066: IFFALSE 41076
// mode = 0 ;
41068: LD_ADDR_VAR 0 6
41072: PUSH
41073: LD_INT 0
41075: ST_TO_ADDR
// case mode of 0 :
41076: LD_VAR 0 6
41080: PUSH
41081: LD_INT 0
41083: DOUBLE
41084: EQUAL
41085: IFTRUE 41089
41087: GO 52542
41089: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41090: LD_ADDR_VAR 0 11
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: NEG
41172: PUSH
41173: LD_INT 2
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 2
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 3
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: LD_INT 3
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41283: LD_ADDR_VAR 0 12
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 2
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: NEG
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: NEG
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 3
41440: NEG
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 3
41451: NEG
41452: PUSH
41453: LD_INT 1
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41479: LD_ADDR_VAR 0 13
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 0
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 2
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: PUSH
41583: LD_INT 2
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: LD_INT 2
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 2
41626: NEG
41627: PUSH
41628: LD_INT 3
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 3
41638: NEG
41639: PUSH
41640: LD_INT 2
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 3
41650: NEG
41651: PUSH
41652: LD_INT 3
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41678: LD_ADDR_VAR 0 14
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 2
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 3
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 3
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 2
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41874: LD_ADDR_VAR 0 15
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 2
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 3
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 3
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42067: LD_ADDR_VAR 0 16
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: LD_INT 2
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 2
42202: NEG
42203: PUSH
42204: LD_INT 2
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 3
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 3
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 2
42234: PUSH
42235: LD_INT 3
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42260: LD_ADDR_VAR 0 17
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 1
42341: NEG
42342: PUSH
42343: LD_INT 2
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 2
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: LD_INT 2
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: LD_INT 2
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 2
42436: NEG
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 2
42447: NEG
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 2
42459: NEG
42460: PUSH
42461: LD_INT 2
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42490: LD_ADDR_VAR 0 18
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: LD_INT 2
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 2
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 2
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: LD_INT 2
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 2
42666: NEG
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: NEG
42690: PUSH
42691: LD_INT 2
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42720: LD_ADDR_VAR 0 19
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 2
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 2
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 2
42855: PUSH
42856: LD_INT 2
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 2
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 2
42896: NEG
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 2
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: NEG
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42950: LD_ADDR_VAR 0 20
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 2
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: LD_INT 2
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 2
43126: NEG
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 2
43137: NEG
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: LD_INT 2
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43180: LD_ADDR_VAR 0 21
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: LD_INT 2
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: LD_INT 2
43276: NEG
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 2
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 2
43356: NEG
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 2
43367: NEG
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43410: LD_ADDR_VAR 0 22
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 2
43586: NEG
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: NEG
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43640: LD_ADDR_VAR 0 23
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: LD_INT 2
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: LD_INT 2
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 2
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 2
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 2
43839: NEG
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 2
43851: NEG
43852: PUSH
43853: LD_INT 3
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 3
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43920: LD_ADDR_VAR 0 24
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 2
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: LD_INT 2
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 2
44096: NEG
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 2
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 3
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 3
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44196: LD_ADDR_VAR 0 25
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 2
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 2
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: NEG
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: LD_INT 2
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 3
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 3
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: LD_INT 3
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: LD_INT 3
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44470: LD_ADDR_VAR 0 26
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: NEG
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 3
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 3
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44746: LD_ADDR_VAR 0 27
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: LD_INT 2
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 2
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 2
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 3
44979: NEG
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 3
44991: NEG
44992: PUSH
44993: LD_INT 2
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45026: LD_ADDR_VAR 0 28
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 2
45237: NEG
45238: PUSH
45239: LD_INT 3
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: LD_INT 3
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 3
45261: NEG
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 3
45273: NEG
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45308: LD_ADDR_VAR 0 29
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: LD_INT 3
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 3
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 3
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 2
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 3
45552: NEG
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45587: LD_ADDR_VAR 0 30
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 2
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 2
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: NEG
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: NEG
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: LD_INT 3
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 3
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: LD_INT 3
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 3
45830: NEG
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45865: LD_ADDR_VAR 0 31
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 2
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 2
46030: NEG
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: LD_INT 3
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 3
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 3
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 3
46108: NEG
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46143: LD_ADDR_VAR 0 32
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: LD_INT 2
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: LD_INT 3
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: LD_INT 2
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 3
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: LD_INT 3
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 3
46386: NEG
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46421: LD_ADDR_VAR 0 33
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 2
46587: NEG
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 2
46599: NEG
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: NEG
46612: PUSH
46613: LD_INT 3
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 3
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 3
46665: NEG
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46700: LD_ADDR_VAR 0 34
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 2
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: LD_INT 2
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 3
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 3
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: LD_INT 3
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 3
46945: NEG
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46980: LD_ADDR_VAR 0 35
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47092: LD_ADDR_VAR 0 36
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47204: LD_ADDR_VAR 0 37
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47316: LD_ADDR_VAR 0 38
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47428: LD_ADDR_VAR 0 39
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47540: LD_ADDR_VAR 0 40
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47652: LD_ADDR_VAR 0 41
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: LD_INT 3
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 3
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 3
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: LD_INT 3
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 3
47926: NEG
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 3
47937: NEG
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 3
47949: NEG
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 3
47961: NEG
47962: PUSH
47963: LD_INT 3
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48002: LD_ADDR_VAR 0 42
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: LD_INT 2
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: LD_INT 2
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: LD_INT 2
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: LD_INT 2
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: NEG
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: NEG
48193: PUSH
48194: LD_INT 3
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: LD_INT 3
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 3
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 3
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 3
48248: PUSH
48249: LD_INT 3
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: LD_INT 3
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: LD_INT 3
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: LD_INT 3
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 3
48299: NEG
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 3
48311: NEG
48312: PUSH
48313: LD_INT 3
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48352: LD_ADDR_VAR 0 43
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: NEG
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: LD_INT 3
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 3
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 3
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 3
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 3
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 3
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 2
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 3
48648: NEG
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 3
48659: NEG
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48700: LD_ADDR_VAR 0 44
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: LD_INT 3
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 3
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 3
48933: PUSH
48934: LD_INT 2
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 3
48943: PUSH
48944: LD_INT 3
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: LD_INT 3
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 3
48974: NEG
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 3
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 3
48997: NEG
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 3
49009: NEG
49010: PUSH
49011: LD_INT 3
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49050: LD_ADDR_VAR 0 45
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: LD_INT 3
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: LD_INT 3
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 3
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 2
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 3
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 3
49296: PUSH
49297: LD_INT 3
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: LD_INT 3
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: LD_INT 3
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 3
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 2
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 3
49347: NEG
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 3
49359: NEG
49360: PUSH
49361: LD_INT 3
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49400: LD_ADDR_VAR 0 46
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: LD_INT 2
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: LD_INT 3
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 3
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 3
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 3
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: LD_INT 3
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 2
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 3
49696: NEG
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 3
49707: NEG
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49748: LD_ADDR_VAR 0 47
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49899: LD_ADDR_VAR 0 48
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 2
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 2
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50046: LD_ADDR_VAR 0 49
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 2
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50190: LD_ADDR_VAR 0 50
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50334: LD_ADDR_VAR 0 51
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: LD_INT 2
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 2
50457: NEG
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50481: LD_ADDR_VAR 0 52
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50632: LD_ADDR_VAR 0 53
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: LD_INT 2
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: NEG
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: NEG
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50862: LD_ADDR_VAR 0 54
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 2
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: LD_INT 2
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: NEG
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 2
51049: NEG
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51092: LD_ADDR_VAR 0 55
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 2
51291: NEG
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51322: LD_ADDR_VAR 0 56
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 2
51498: NEG
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 2
51509: NEG
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: LD_INT 2
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51552: LD_ADDR_VAR 0 57
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 2
51751: NEG
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51782: LD_ADDR_VAR 0 58
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: LD_INT 2
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 2
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: NEG
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52012: LD_ADDR_VAR 0 59
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52100: LD_ADDR_VAR 0 60
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52188: LD_ADDR_VAR 0 61
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52276: LD_ADDR_VAR 0 62
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52364: LD_ADDR_VAR 0 63
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52452: LD_ADDR_VAR 0 64
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: ST_TO_ADDR
// end ; 1 :
52540: GO 58437
52542: LD_INT 1
52544: DOUBLE
52545: EQUAL
52546: IFTRUE 52550
52548: GO 55173
52550: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52551: LD_ADDR_VAR 0 11
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 3
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 3
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: LIST
52594: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52595: LD_ADDR_VAR 0 12
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 3
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 3
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: LIST
52635: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52636: LD_ADDR_VAR 0 13
52640: PUSH
52641: LD_INT 3
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 3
52653: PUSH
52654: LD_INT 3
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: LD_INT 3
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: LIST
52675: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52676: LD_ADDR_VAR 0 14
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 3
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: LIST
52716: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52717: LD_ADDR_VAR 0 15
52721: PUSH
52722: LD_INT 2
52724: NEG
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 3
52735: NEG
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 3
52746: NEG
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: LIST
52760: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52761: LD_ADDR_VAR 0 16
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: LD_INT 3
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 3
52780: NEG
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 3
52792: NEG
52793: PUSH
52794: LD_INT 3
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: LIST
52806: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52807: LD_ADDR_VAR 0 17
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: LD_INT 3
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 3
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: LIST
52850: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52851: LD_ADDR_VAR 0 18
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 3
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 3
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: LIST
52891: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52892: LD_ADDR_VAR 0 19
52896: PUSH
52897: LD_INT 3
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: LD_INT 3
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: LD_INT 3
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: LIST
52931: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52932: LD_ADDR_VAR 0 20
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: LD_INT 3
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: LIST
52972: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52973: LD_ADDR_VAR 0 21
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 3
52991: NEG
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 3
53002: NEG
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53017: LD_ADDR_VAR 0 22
53021: PUSH
53022: LD_INT 2
53024: NEG
53025: PUSH
53026: LD_INT 3
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 3
53036: NEG
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 3
53048: NEG
53049: PUSH
53050: LD_INT 3
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53063: LD_ADDR_VAR 0 23
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 3
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 4
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: LD_INT 3
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: LIST
53106: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53107: LD_ADDR_VAR 0 24
53111: PUSH
53112: LD_INT 3
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 3
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 4
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: LIST
53147: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53148: LD_ADDR_VAR 0 25
53152: PUSH
53153: LD_INT 3
53155: PUSH
53156: LD_INT 3
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 4
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 3
53175: PUSH
53176: LD_INT 4
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: LIST
53187: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53188: LD_ADDR_VAR 0 26
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 3
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: LD_INT 4
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: LIST
53228: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53229: LD_ADDR_VAR 0 27
53233: PUSH
53234: LD_INT 3
53236: NEG
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 4
53258: NEG
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: LIST
53272: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53273: LD_ADDR_VAR 0 28
53277: PUSH
53278: LD_INT 3
53280: NEG
53281: PUSH
53282: LD_INT 3
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 3
53292: NEG
53293: PUSH
53294: LD_INT 4
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 4
53304: NEG
53305: PUSH
53306: LD_INT 3
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: LIST
53318: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53319: LD_ADDR_VAR 0 29
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 3
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: LD_INT 3
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: LD_INT 2
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: LD_INT 4
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 4
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: LD_INT 5
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 5
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 4
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 6
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: LD_INT 6
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: LD_INT 5
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53474: LD_ADDR_VAR 0 30
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 3
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 3
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 3
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 4
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 4
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 4
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 5
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 5
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 5
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 6
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 6
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53617: LD_ADDR_VAR 0 31
53621: PUSH
53622: LD_INT 3
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 3
53634: PUSH
53635: LD_INT 3
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 2
53644: PUSH
53645: LD_INT 3
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 4
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 4
53664: PUSH
53665: LD_INT 4
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 3
53674: PUSH
53675: LD_INT 4
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 5
53684: PUSH
53685: LD_INT 4
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 5
53694: PUSH
53695: LD_INT 5
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 4
53704: PUSH
53705: LD_INT 5
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 6
53714: PUSH
53715: LD_INT 5
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 6
53724: PUSH
53725: LD_INT 6
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 5
53734: PUSH
53735: LD_INT 6
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53756: LD_ADDR_VAR 0 32
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: LD_INT 3
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 3
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 4
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 4
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 3
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 5
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 5
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: LD_INT 4
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: LD_INT 6
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 6
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 5
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53899: LD_ADDR_VAR 0 33
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 3
53917: NEG
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 3
53928: NEG
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 3
53940: NEG
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 4
53951: NEG
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 4
53962: NEG
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 4
53974: NEG
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 5
53985: NEG
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 5
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 5
54008: NEG
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 6
54019: NEG
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 6
54030: NEG
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54054: LD_ADDR_VAR 0 34
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: LD_INT 3
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 3
54073: NEG
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 3
54085: NEG
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 3
54097: NEG
54098: PUSH
54099: LD_INT 4
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 4
54109: NEG
54110: PUSH
54111: LD_INT 3
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 4
54121: NEG
54122: PUSH
54123: LD_INT 4
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 4
54133: NEG
54134: PUSH
54135: LD_INT 5
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 5
54145: NEG
54146: PUSH
54147: LD_INT 4
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 5
54157: NEG
54158: PUSH
54159: LD_INT 5
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 5
54169: NEG
54170: PUSH
54171: LD_INT 6
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 6
54181: NEG
54182: PUSH
54183: LD_INT 5
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 6
54193: NEG
54194: PUSH
54195: LD_INT 6
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54217: LD_ADDR_VAR 0 41
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 3
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: LIST
54260: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54261: LD_ADDR_VAR 0 42
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 3
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: LIST
54301: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54302: LD_ADDR_VAR 0 43
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 3
54319: PUSH
54320: LD_INT 2
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 3
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: LIST
54341: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54342: LD_ADDR_VAR 0 44
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 3
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: LIST
54382: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54383: LD_ADDR_VAR 0 45
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 3
54412: NEG
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: LIST
54426: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54427: LD_ADDR_VAR 0 46
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: LD_INT 2
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 2
54446: NEG
54447: PUSH
54448: LD_INT 3
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 3
54458: NEG
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: LIST
54472: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54473: LD_ADDR_VAR 0 47
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 3
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: LD_INT 3
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54506: LD_ADDR_VAR 0 48
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54537: LD_ADDR_VAR 0 49
54541: PUSH
54542: LD_INT 3
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 3
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54566: LD_ADDR_VAR 0 50
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: LD_INT 3
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 3
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54595: LD_ADDR_VAR 0 51
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: LD_INT 2
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: NEG
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54626: LD_ADDR_VAR 0 52
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: NEG
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54659: LD_ADDR_VAR 0 53
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 3
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 3
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: LIST
54702: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54703: LD_ADDR_VAR 0 54
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 3
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 3
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: LIST
54743: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54744: LD_ADDR_VAR 0 55
54748: PUSH
54749: LD_INT 3
54751: PUSH
54752: LD_INT 2
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 3
54761: PUSH
54762: LD_INT 3
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: LD_INT 3
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: LIST
54783: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54784: LD_ADDR_VAR 0 56
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 3
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 3
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: LIST
54824: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54825: LD_ADDR_VAR 0 57
54829: PUSH
54830: LD_INT 2
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 3
54843: NEG
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 3
54854: NEG
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: LIST
54868: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54869: LD_ADDR_VAR 0 58
54873: PUSH
54874: LD_INT 2
54876: NEG
54877: PUSH
54878: LD_INT 3
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 3
54888: NEG
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 3
54900: NEG
54901: PUSH
54902: LD_INT 3
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: LIST
54914: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54915: LD_ADDR_VAR 0 59
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: LD_INT 2
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 2
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54959: LD_ADDR_VAR 0 60
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: LIST
54999: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55000: LD_ADDR_VAR 0 61
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: LIST
55039: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55040: LD_ADDR_VAR 0 62
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: LIST
55080: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55081: LD_ADDR_VAR 0 63
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: LIST
55124: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55125: LD_ADDR_VAR 0 64
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: NEG
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: LIST
55170: ST_TO_ADDR
// end ; 2 :
55171: GO 58437
55173: LD_INT 2
55175: DOUBLE
55176: EQUAL
55177: IFTRUE 55181
55179: GO 58436
55181: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55182: LD_ADDR_VAR 0 29
55186: PUSH
55187: LD_INT 4
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 4
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 5
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 5
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 4
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 3
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 3
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 3
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 5
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 3
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 3
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 4
55302: PUSH
55303: LD_INT 3
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 4
55312: PUSH
55313: LD_INT 4
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 3
55322: PUSH
55323: LD_INT 4
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: LD_INT 3
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 4
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: LD_INT 4
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 4
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: LD_INT 3
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: LD_INT 4
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: LD_INT 5
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 5
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 4
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: LD_INT 5
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: LD_INT 3
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 3
55465: NEG
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 3
55476: NEG
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 3
55510: NEG
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 4
55521: NEG
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 4
55532: NEG
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 4
55544: NEG
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 4
55567: NEG
55568: PUSH
55569: LD_INT 4
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 4
55579: NEG
55580: PUSH
55581: LD_INT 5
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 3
55591: NEG
55592: PUSH
55593: LD_INT 4
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 3
55603: NEG
55604: PUSH
55605: LD_INT 3
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 4
55615: NEG
55616: PUSH
55617: LD_INT 3
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 5
55627: NEG
55628: PUSH
55629: LD_INT 4
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 5
55639: NEG
55640: PUSH
55641: LD_INT 5
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 3
55651: NEG
55652: PUSH
55653: LD_INT 5
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 5
55663: NEG
55664: PUSH
55665: LD_INT 3
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55720: LD_ADDR_VAR 0 30
55724: PUSH
55725: LD_INT 4
55727: PUSH
55728: LD_INT 4
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 4
55737: PUSH
55738: LD_INT 3
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 5
55747: PUSH
55748: LD_INT 4
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 5
55757: PUSH
55758: LD_INT 5
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 4
55767: PUSH
55768: LD_INT 5
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 3
55777: PUSH
55778: LD_INT 4
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 3
55787: PUSH
55788: LD_INT 3
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 5
55797: PUSH
55798: LD_INT 3
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 3
55807: PUSH
55808: LD_INT 5
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 3
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 2
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: LD_INT 3
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: LD_INT 4
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 4
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: LD_INT 3
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: LD_INT 4
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 4
55910: NEG
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 4
55921: NEG
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 3
55933: NEG
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 3
55944: NEG
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 4
55955: NEG
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 5
55966: NEG
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 5
55977: NEG
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 5
55989: NEG
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 3
56001: NEG
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 3
56012: NEG
56013: PUSH
56014: LD_INT 3
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 3
56024: NEG
56025: PUSH
56026: LD_INT 4
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: LD_INT 3
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: NEG
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 4
56072: NEG
56073: PUSH
56074: LD_INT 3
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 4
56084: NEG
56085: PUSH
56086: LD_INT 4
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 2
56096: NEG
56097: PUSH
56098: LD_INT 4
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 4
56108: NEG
56109: PUSH
56110: LD_INT 2
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_INT 4
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: LD_INT 5
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: LD_INT 4
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: LD_INT 3
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 3
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 4
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 5
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: LD_INT 3
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: LD_INT 5
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56267: LD_ADDR_VAR 0 31
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 4
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 4
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 5
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 5
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: LD_INT 4
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 2
56346: PUSH
56347: LD_INT 5
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: LD_INT 3
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 3
56367: NEG
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 3
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: NEG
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 2
56401: NEG
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 3
56412: NEG
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 4
56423: NEG
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 4
56434: NEG
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 4
56446: NEG
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 2
56458: NEG
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 4
56469: NEG
56470: PUSH
56471: LD_INT 4
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 4
56481: NEG
56482: PUSH
56483: LD_INT 5
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 3
56493: NEG
56494: PUSH
56495: LD_INT 4
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 3
56505: NEG
56506: PUSH
56507: LD_INT 3
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 4
56517: NEG
56518: PUSH
56519: LD_INT 3
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 5
56529: NEG
56530: PUSH
56531: LD_INT 4
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 5
56541: NEG
56542: PUSH
56543: LD_INT 5
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 3
56553: NEG
56554: PUSH
56555: LD_INT 5
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 5
56565: NEG
56566: PUSH
56567: LD_INT 3
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 4
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 3
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 3
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: LD_INT 4
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: LD_INT 2
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: LD_INT 4
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 4
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 4
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 5
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 5
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 4
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 5
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56817: LD_ADDR_VAR 0 32
56821: PUSH
56822: LD_INT 4
56824: NEG
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 4
56835: NEG
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: NEG
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 3
56858: NEG
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 4
56869: NEG
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 5
56880: NEG
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 5
56891: NEG
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 5
56903: NEG
56904: PUSH
56905: LD_INT 2
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 3
56926: NEG
56927: PUSH
56928: LD_INT 3
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 3
56938: NEG
56939: PUSH
56940: LD_INT 4
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: LD_INT 3
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 3
56974: NEG
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 4
56986: NEG
56987: PUSH
56988: LD_INT 3
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 4
56998: NEG
56999: PUSH
57000: LD_INT 4
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: LD_INT 4
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 4
57022: NEG
57023: PUSH
57024: LD_INT 2
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_INT 4
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 5
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 4
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: LD_INT 3
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 3
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 4
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: LD_INT 5
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: LD_INT 3
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: LD_INT 5
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 3
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 3
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 4
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 4
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: LD_INT 2
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 4
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 4
57229: PUSH
57230: LD_INT 4
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 4
57239: PUSH
57240: LD_INT 3
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 5
57249: PUSH
57250: LD_INT 4
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 5
57259: PUSH
57260: LD_INT 5
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 4
57269: PUSH
57270: LD_INT 5
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 3
57279: PUSH
57280: LD_INT 4
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 3
57289: PUSH
57290: LD_INT 3
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 5
57299: PUSH
57300: LD_INT 3
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 3
57309: PUSH
57310: LD_INT 5
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57364: LD_ADDR_VAR 0 33
57368: PUSH
57369: LD_INT 4
57371: NEG
57372: PUSH
57373: LD_INT 4
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 4
57383: NEG
57384: PUSH
57385: LD_INT 5
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 3
57395: NEG
57396: PUSH
57397: LD_INT 4
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 4
57419: NEG
57420: PUSH
57421: LD_INT 3
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 5
57431: NEG
57432: PUSH
57433: LD_INT 4
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 5
57443: NEG
57444: PUSH
57445: LD_INT 5
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 3
57455: NEG
57456: PUSH
57457: LD_INT 5
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 5
57467: NEG
57468: PUSH
57469: LD_INT 3
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: LD_INT 3
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 4
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: LD_INT 3
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 2
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: LD_INT 3
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: LD_INT 4
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: LD_INT 2
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 2
57569: NEG
57570: PUSH
57571: LD_INT 4
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 4
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 4
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 5
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 5
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 4
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 3
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 3
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 3
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 5
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: LD_INT 3
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 3
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 4
57694: PUSH
57695: LD_INT 3
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 4
57704: PUSH
57705: LD_INT 4
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 3
57714: PUSH
57715: LD_INT 4
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 2
57724: PUSH
57725: LD_INT 3
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 4
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: LD_INT 4
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 4
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 3
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: LD_INT 4
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: LD_INT 5
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: LD_INT 5
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: LD_INT 4
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: LD_INT 3
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: LD_INT 5
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 2
57846: NEG
57847: PUSH
57848: LD_INT 3
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57902: LD_ADDR_VAR 0 34
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: LD_INT 4
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 5
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: LD_INT 4
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: LD_INT 3
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 3
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: LD_INT 4
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 5
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 2
57988: PUSH
57989: LD_INT 3
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 2
57999: NEG
58000: PUSH
58001: LD_INT 5
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 3
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 3
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 4
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 4
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 2
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 2
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 4
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 4
58104: PUSH
58105: LD_INT 4
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 4
58114: PUSH
58115: LD_INT 3
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 5
58124: PUSH
58125: LD_INT 4
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 5
58134: PUSH
58135: LD_INT 5
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 4
58144: PUSH
58145: LD_INT 5
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 3
58154: PUSH
58155: LD_INT 4
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: LD_INT 3
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 5
58174: PUSH
58175: LD_INT 3
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 3
58184: PUSH
58185: LD_INT 5
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: LD_INT 3
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: LD_INT 2
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: LD_INT 3
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: LD_INT 4
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 4
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: LD_INT 3
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: LD_INT 4
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 4
58287: NEG
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 4
58298: NEG
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 3
58310: NEG
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 4
58332: NEG
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 5
58343: NEG
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 5
58354: NEG
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 5
58366: NEG
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 3
58378: NEG
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// end ; end ;
58434: GO 58437
58436: POP
// case btype of b_depot , b_warehouse :
58437: LD_VAR 0 1
58441: PUSH
58442: LD_INT 0
58444: DOUBLE
58445: EQUAL
58446: IFTRUE 58456
58448: LD_INT 1
58450: DOUBLE
58451: EQUAL
58452: IFTRUE 58456
58454: GO 58657
58456: POP
// case nation of nation_american :
58457: LD_VAR 0 5
58461: PUSH
58462: LD_INT 1
58464: DOUBLE
58465: EQUAL
58466: IFTRUE 58470
58468: GO 58526
58470: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58471: LD_ADDR_VAR 0 9
58475: PUSH
58476: LD_VAR 0 11
58480: PUSH
58481: LD_VAR 0 12
58485: PUSH
58486: LD_VAR 0 13
58490: PUSH
58491: LD_VAR 0 14
58495: PUSH
58496: LD_VAR 0 15
58500: PUSH
58501: LD_VAR 0 16
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: PUSH
58514: LD_VAR 0 4
58518: PUSH
58519: LD_INT 1
58521: PLUS
58522: ARRAY
58523: ST_TO_ADDR
58524: GO 58655
58526: LD_INT 2
58528: DOUBLE
58529: EQUAL
58530: IFTRUE 58534
58532: GO 58590
58534: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58535: LD_ADDR_VAR 0 9
58539: PUSH
58540: LD_VAR 0 17
58544: PUSH
58545: LD_VAR 0 18
58549: PUSH
58550: LD_VAR 0 19
58554: PUSH
58555: LD_VAR 0 20
58559: PUSH
58560: LD_VAR 0 21
58564: PUSH
58565: LD_VAR 0 22
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: PUSH
58578: LD_VAR 0 4
58582: PUSH
58583: LD_INT 1
58585: PLUS
58586: ARRAY
58587: ST_TO_ADDR
58588: GO 58655
58590: LD_INT 3
58592: DOUBLE
58593: EQUAL
58594: IFTRUE 58598
58596: GO 58654
58598: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58599: LD_ADDR_VAR 0 9
58603: PUSH
58604: LD_VAR 0 23
58608: PUSH
58609: LD_VAR 0 24
58613: PUSH
58614: LD_VAR 0 25
58618: PUSH
58619: LD_VAR 0 26
58623: PUSH
58624: LD_VAR 0 27
58628: PUSH
58629: LD_VAR 0 28
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: PUSH
58642: LD_VAR 0 4
58646: PUSH
58647: LD_INT 1
58649: PLUS
58650: ARRAY
58651: ST_TO_ADDR
58652: GO 58655
58654: POP
58655: GO 59210
58657: LD_INT 2
58659: DOUBLE
58660: EQUAL
58661: IFTRUE 58671
58663: LD_INT 3
58665: DOUBLE
58666: EQUAL
58667: IFTRUE 58671
58669: GO 58727
58671: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58672: LD_ADDR_VAR 0 9
58676: PUSH
58677: LD_VAR 0 29
58681: PUSH
58682: LD_VAR 0 30
58686: PUSH
58687: LD_VAR 0 31
58691: PUSH
58692: LD_VAR 0 32
58696: PUSH
58697: LD_VAR 0 33
58701: PUSH
58702: LD_VAR 0 34
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: PUSH
58715: LD_VAR 0 4
58719: PUSH
58720: LD_INT 1
58722: PLUS
58723: ARRAY
58724: ST_TO_ADDR
58725: GO 59210
58727: LD_INT 16
58729: DOUBLE
58730: EQUAL
58731: IFTRUE 58789
58733: LD_INT 17
58735: DOUBLE
58736: EQUAL
58737: IFTRUE 58789
58739: LD_INT 18
58741: DOUBLE
58742: EQUAL
58743: IFTRUE 58789
58745: LD_INT 19
58747: DOUBLE
58748: EQUAL
58749: IFTRUE 58789
58751: LD_INT 22
58753: DOUBLE
58754: EQUAL
58755: IFTRUE 58789
58757: LD_INT 20
58759: DOUBLE
58760: EQUAL
58761: IFTRUE 58789
58763: LD_INT 21
58765: DOUBLE
58766: EQUAL
58767: IFTRUE 58789
58769: LD_INT 23
58771: DOUBLE
58772: EQUAL
58773: IFTRUE 58789
58775: LD_INT 24
58777: DOUBLE
58778: EQUAL
58779: IFTRUE 58789
58781: LD_INT 25
58783: DOUBLE
58784: EQUAL
58785: IFTRUE 58789
58787: GO 58845
58789: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58790: LD_ADDR_VAR 0 9
58794: PUSH
58795: LD_VAR 0 35
58799: PUSH
58800: LD_VAR 0 36
58804: PUSH
58805: LD_VAR 0 37
58809: PUSH
58810: LD_VAR 0 38
58814: PUSH
58815: LD_VAR 0 39
58819: PUSH
58820: LD_VAR 0 40
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: PUSH
58833: LD_VAR 0 4
58837: PUSH
58838: LD_INT 1
58840: PLUS
58841: ARRAY
58842: ST_TO_ADDR
58843: GO 59210
58845: LD_INT 6
58847: DOUBLE
58848: EQUAL
58849: IFTRUE 58901
58851: LD_INT 7
58853: DOUBLE
58854: EQUAL
58855: IFTRUE 58901
58857: LD_INT 8
58859: DOUBLE
58860: EQUAL
58861: IFTRUE 58901
58863: LD_INT 13
58865: DOUBLE
58866: EQUAL
58867: IFTRUE 58901
58869: LD_INT 12
58871: DOUBLE
58872: EQUAL
58873: IFTRUE 58901
58875: LD_INT 15
58877: DOUBLE
58878: EQUAL
58879: IFTRUE 58901
58881: LD_INT 11
58883: DOUBLE
58884: EQUAL
58885: IFTRUE 58901
58887: LD_INT 14
58889: DOUBLE
58890: EQUAL
58891: IFTRUE 58901
58893: LD_INT 10
58895: DOUBLE
58896: EQUAL
58897: IFTRUE 58901
58899: GO 58957
58901: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58902: LD_ADDR_VAR 0 9
58906: PUSH
58907: LD_VAR 0 41
58911: PUSH
58912: LD_VAR 0 42
58916: PUSH
58917: LD_VAR 0 43
58921: PUSH
58922: LD_VAR 0 44
58926: PUSH
58927: LD_VAR 0 45
58931: PUSH
58932: LD_VAR 0 46
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: PUSH
58945: LD_VAR 0 4
58949: PUSH
58950: LD_INT 1
58952: PLUS
58953: ARRAY
58954: ST_TO_ADDR
58955: GO 59210
58957: LD_INT 36
58959: DOUBLE
58960: EQUAL
58961: IFTRUE 58965
58963: GO 59021
58965: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58966: LD_ADDR_VAR 0 9
58970: PUSH
58971: LD_VAR 0 47
58975: PUSH
58976: LD_VAR 0 48
58980: PUSH
58981: LD_VAR 0 49
58985: PUSH
58986: LD_VAR 0 50
58990: PUSH
58991: LD_VAR 0 51
58995: PUSH
58996: LD_VAR 0 52
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: PUSH
59009: LD_VAR 0 4
59013: PUSH
59014: LD_INT 1
59016: PLUS
59017: ARRAY
59018: ST_TO_ADDR
59019: GO 59210
59021: LD_INT 4
59023: DOUBLE
59024: EQUAL
59025: IFTRUE 59047
59027: LD_INT 5
59029: DOUBLE
59030: EQUAL
59031: IFTRUE 59047
59033: LD_INT 34
59035: DOUBLE
59036: EQUAL
59037: IFTRUE 59047
59039: LD_INT 37
59041: DOUBLE
59042: EQUAL
59043: IFTRUE 59047
59045: GO 59103
59047: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59048: LD_ADDR_VAR 0 9
59052: PUSH
59053: LD_VAR 0 53
59057: PUSH
59058: LD_VAR 0 54
59062: PUSH
59063: LD_VAR 0 55
59067: PUSH
59068: LD_VAR 0 56
59072: PUSH
59073: LD_VAR 0 57
59077: PUSH
59078: LD_VAR 0 58
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: PUSH
59091: LD_VAR 0 4
59095: PUSH
59096: LD_INT 1
59098: PLUS
59099: ARRAY
59100: ST_TO_ADDR
59101: GO 59210
59103: LD_INT 31
59105: DOUBLE
59106: EQUAL
59107: IFTRUE 59153
59109: LD_INT 32
59111: DOUBLE
59112: EQUAL
59113: IFTRUE 59153
59115: LD_INT 33
59117: DOUBLE
59118: EQUAL
59119: IFTRUE 59153
59121: LD_INT 27
59123: DOUBLE
59124: EQUAL
59125: IFTRUE 59153
59127: LD_INT 26
59129: DOUBLE
59130: EQUAL
59131: IFTRUE 59153
59133: LD_INT 28
59135: DOUBLE
59136: EQUAL
59137: IFTRUE 59153
59139: LD_INT 29
59141: DOUBLE
59142: EQUAL
59143: IFTRUE 59153
59145: LD_INT 30
59147: DOUBLE
59148: EQUAL
59149: IFTRUE 59153
59151: GO 59209
59153: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59154: LD_ADDR_VAR 0 9
59158: PUSH
59159: LD_VAR 0 59
59163: PUSH
59164: LD_VAR 0 60
59168: PUSH
59169: LD_VAR 0 61
59173: PUSH
59174: LD_VAR 0 62
59178: PUSH
59179: LD_VAR 0 63
59183: PUSH
59184: LD_VAR 0 64
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: PUSH
59197: LD_VAR 0 4
59201: PUSH
59202: LD_INT 1
59204: PLUS
59205: ARRAY
59206: ST_TO_ADDR
59207: GO 59210
59209: POP
// temp_list2 = [ ] ;
59210: LD_ADDR_VAR 0 10
59214: PUSH
59215: EMPTY
59216: ST_TO_ADDR
// for i in temp_list do
59217: LD_ADDR_VAR 0 8
59221: PUSH
59222: LD_VAR 0 9
59226: PUSH
59227: FOR_IN
59228: IFFALSE 59280
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59230: LD_ADDR_VAR 0 10
59234: PUSH
59235: LD_VAR 0 10
59239: PUSH
59240: LD_VAR 0 8
59244: PUSH
59245: LD_INT 1
59247: ARRAY
59248: PUSH
59249: LD_VAR 0 2
59253: PLUS
59254: PUSH
59255: LD_VAR 0 8
59259: PUSH
59260: LD_INT 2
59262: ARRAY
59263: PUSH
59264: LD_VAR 0 3
59268: PLUS
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: EMPTY
59275: LIST
59276: ADD
59277: ST_TO_ADDR
59278: GO 59227
59280: POP
59281: POP
// result = temp_list2 ;
59282: LD_ADDR_VAR 0 7
59286: PUSH
59287: LD_VAR 0 10
59291: ST_TO_ADDR
// end ;
59292: LD_VAR 0 7
59296: RET
// export function EnemyInRange ( unit , dist ) ; begin
59297: LD_INT 0
59299: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59300: LD_ADDR_VAR 0 3
59304: PUSH
59305: LD_VAR 0 1
59309: PPUSH
59310: CALL_OW 255
59314: PPUSH
59315: LD_VAR 0 1
59319: PPUSH
59320: CALL_OW 250
59324: PPUSH
59325: LD_VAR 0 1
59329: PPUSH
59330: CALL_OW 251
59334: PPUSH
59335: LD_VAR 0 2
59339: PPUSH
59340: CALL 32692 0 4
59344: PUSH
59345: LD_INT 4
59347: ARRAY
59348: ST_TO_ADDR
// end ;
59349: LD_VAR 0 3
59353: RET
// export function PlayerSeeMe ( unit ) ; begin
59354: LD_INT 0
59356: PPUSH
// result := See ( your_side , unit ) ;
59357: LD_ADDR_VAR 0 2
59361: PUSH
59362: LD_OWVAR 2
59366: PPUSH
59367: LD_VAR 0 1
59371: PPUSH
59372: CALL_OW 292
59376: ST_TO_ADDR
// end ;
59377: LD_VAR 0 2
59381: RET
// export function ReverseDir ( unit ) ; begin
59382: LD_INT 0
59384: PPUSH
// if not unit then
59385: LD_VAR 0 1
59389: NOT
59390: IFFALSE 59394
// exit ;
59392: GO 59417
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59394: LD_ADDR_VAR 0 2
59398: PUSH
59399: LD_VAR 0 1
59403: PPUSH
59404: CALL_OW 254
59408: PUSH
59409: LD_INT 3
59411: PLUS
59412: PUSH
59413: LD_INT 6
59415: MOD
59416: ST_TO_ADDR
// end ;
59417: LD_VAR 0 2
59421: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59422: LD_INT 0
59424: PPUSH
59425: PPUSH
59426: PPUSH
59427: PPUSH
59428: PPUSH
// if not hexes then
59429: LD_VAR 0 2
59433: NOT
59434: IFFALSE 59438
// exit ;
59436: GO 59586
// dist := 9999 ;
59438: LD_ADDR_VAR 0 5
59442: PUSH
59443: LD_INT 9999
59445: ST_TO_ADDR
// for i = 1 to hexes do
59446: LD_ADDR_VAR 0 4
59450: PUSH
59451: DOUBLE
59452: LD_INT 1
59454: DEC
59455: ST_TO_ADDR
59456: LD_VAR 0 2
59460: PUSH
59461: FOR_TO
59462: IFFALSE 59574
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59464: LD_VAR 0 1
59468: PPUSH
59469: LD_VAR 0 2
59473: PUSH
59474: LD_VAR 0 4
59478: ARRAY
59479: PUSH
59480: LD_INT 1
59482: ARRAY
59483: PPUSH
59484: LD_VAR 0 2
59488: PUSH
59489: LD_VAR 0 4
59493: ARRAY
59494: PUSH
59495: LD_INT 2
59497: ARRAY
59498: PPUSH
59499: CALL_OW 297
59503: PUSH
59504: LD_VAR 0 5
59508: LESS
59509: IFFALSE 59572
// begin hex := hexes [ i ] ;
59511: LD_ADDR_VAR 0 7
59515: PUSH
59516: LD_VAR 0 2
59520: PUSH
59521: LD_VAR 0 4
59525: ARRAY
59526: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59527: LD_ADDR_VAR 0 5
59531: PUSH
59532: LD_VAR 0 1
59536: PPUSH
59537: LD_VAR 0 2
59541: PUSH
59542: LD_VAR 0 4
59546: ARRAY
59547: PUSH
59548: LD_INT 1
59550: ARRAY
59551: PPUSH
59552: LD_VAR 0 2
59556: PUSH
59557: LD_VAR 0 4
59561: ARRAY
59562: PUSH
59563: LD_INT 2
59565: ARRAY
59566: PPUSH
59567: CALL_OW 297
59571: ST_TO_ADDR
// end ; end ;
59572: GO 59461
59574: POP
59575: POP
// result := hex ;
59576: LD_ADDR_VAR 0 3
59580: PUSH
59581: LD_VAR 0 7
59585: ST_TO_ADDR
// end ;
59586: LD_VAR 0 3
59590: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59591: LD_INT 0
59593: PPUSH
59594: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59595: LD_VAR 0 1
59599: NOT
59600: PUSH
59601: LD_VAR 0 1
59605: PUSH
59606: LD_INT 21
59608: PUSH
59609: LD_INT 2
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 23
59618: PUSH
59619: LD_INT 2
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PPUSH
59630: CALL_OW 69
59634: IN
59635: NOT
59636: OR
59637: IFFALSE 59641
// exit ;
59639: GO 59688
// for i = 1 to 3 do
59641: LD_ADDR_VAR 0 3
59645: PUSH
59646: DOUBLE
59647: LD_INT 1
59649: DEC
59650: ST_TO_ADDR
59651: LD_INT 3
59653: PUSH
59654: FOR_TO
59655: IFFALSE 59686
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59657: LD_VAR 0 1
59661: PPUSH
59662: CALL_OW 250
59666: PPUSH
59667: LD_VAR 0 1
59671: PPUSH
59672: CALL_OW 251
59676: PPUSH
59677: LD_INT 1
59679: PPUSH
59680: CALL_OW 453
59684: GO 59654
59686: POP
59687: POP
// end ;
59688: LD_VAR 0 2
59692: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59693: LD_INT 0
59695: PPUSH
59696: PPUSH
59697: PPUSH
59698: PPUSH
59699: PPUSH
59700: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59701: LD_VAR 0 1
59705: NOT
59706: PUSH
59707: LD_VAR 0 2
59711: NOT
59712: OR
59713: PUSH
59714: LD_VAR 0 1
59718: PPUSH
59719: CALL_OW 314
59723: OR
59724: IFFALSE 59728
// exit ;
59726: GO 60169
// x := GetX ( enemy_unit ) ;
59728: LD_ADDR_VAR 0 7
59732: PUSH
59733: LD_VAR 0 2
59737: PPUSH
59738: CALL_OW 250
59742: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59743: LD_ADDR_VAR 0 8
59747: PUSH
59748: LD_VAR 0 2
59752: PPUSH
59753: CALL_OW 251
59757: ST_TO_ADDR
// if not x or not y then
59758: LD_VAR 0 7
59762: NOT
59763: PUSH
59764: LD_VAR 0 8
59768: NOT
59769: OR
59770: IFFALSE 59774
// exit ;
59772: GO 60169
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59774: LD_ADDR_VAR 0 6
59778: PUSH
59779: LD_VAR 0 7
59783: PPUSH
59784: LD_INT 0
59786: PPUSH
59787: LD_INT 4
59789: PPUSH
59790: CALL_OW 272
59794: PUSH
59795: LD_VAR 0 8
59799: PPUSH
59800: LD_INT 0
59802: PPUSH
59803: LD_INT 4
59805: PPUSH
59806: CALL_OW 273
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_VAR 0 7
59819: PPUSH
59820: LD_INT 1
59822: PPUSH
59823: LD_INT 4
59825: PPUSH
59826: CALL_OW 272
59830: PUSH
59831: LD_VAR 0 8
59835: PPUSH
59836: LD_INT 1
59838: PPUSH
59839: LD_INT 4
59841: PPUSH
59842: CALL_OW 273
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_VAR 0 7
59855: PPUSH
59856: LD_INT 2
59858: PPUSH
59859: LD_INT 4
59861: PPUSH
59862: CALL_OW 272
59866: PUSH
59867: LD_VAR 0 8
59871: PPUSH
59872: LD_INT 2
59874: PPUSH
59875: LD_INT 4
59877: PPUSH
59878: CALL_OW 273
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_VAR 0 7
59891: PPUSH
59892: LD_INT 3
59894: PPUSH
59895: LD_INT 4
59897: PPUSH
59898: CALL_OW 272
59902: PUSH
59903: LD_VAR 0 8
59907: PPUSH
59908: LD_INT 3
59910: PPUSH
59911: LD_INT 4
59913: PPUSH
59914: CALL_OW 273
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_VAR 0 7
59927: PPUSH
59928: LD_INT 4
59930: PPUSH
59931: LD_INT 4
59933: PPUSH
59934: CALL_OW 272
59938: PUSH
59939: LD_VAR 0 8
59943: PPUSH
59944: LD_INT 4
59946: PPUSH
59947: LD_INT 4
59949: PPUSH
59950: CALL_OW 273
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_VAR 0 7
59963: PPUSH
59964: LD_INT 5
59966: PPUSH
59967: LD_INT 4
59969: PPUSH
59970: CALL_OW 272
59974: PUSH
59975: LD_VAR 0 8
59979: PPUSH
59980: LD_INT 5
59982: PPUSH
59983: LD_INT 4
59985: PPUSH
59986: CALL_OW 273
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: ST_TO_ADDR
// for i = tmp downto 1 do
60003: LD_ADDR_VAR 0 4
60007: PUSH
60008: DOUBLE
60009: LD_VAR 0 6
60013: INC
60014: ST_TO_ADDR
60015: LD_INT 1
60017: PUSH
60018: FOR_DOWNTO
60019: IFFALSE 60120
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60021: LD_VAR 0 6
60025: PUSH
60026: LD_VAR 0 4
60030: ARRAY
60031: PUSH
60032: LD_INT 1
60034: ARRAY
60035: PPUSH
60036: LD_VAR 0 6
60040: PUSH
60041: LD_VAR 0 4
60045: ARRAY
60046: PUSH
60047: LD_INT 2
60049: ARRAY
60050: PPUSH
60051: CALL_OW 488
60055: NOT
60056: PUSH
60057: LD_VAR 0 6
60061: PUSH
60062: LD_VAR 0 4
60066: ARRAY
60067: PUSH
60068: LD_INT 1
60070: ARRAY
60071: PPUSH
60072: LD_VAR 0 6
60076: PUSH
60077: LD_VAR 0 4
60081: ARRAY
60082: PUSH
60083: LD_INT 2
60085: ARRAY
60086: PPUSH
60087: CALL_OW 428
60091: PUSH
60092: LD_INT 0
60094: NONEQUAL
60095: OR
60096: IFFALSE 60118
// tmp := Delete ( tmp , i ) ;
60098: LD_ADDR_VAR 0 6
60102: PUSH
60103: LD_VAR 0 6
60107: PPUSH
60108: LD_VAR 0 4
60112: PPUSH
60113: CALL_OW 3
60117: ST_TO_ADDR
60118: GO 60018
60120: POP
60121: POP
// j := GetClosestHex ( unit , tmp ) ;
60122: LD_ADDR_VAR 0 5
60126: PUSH
60127: LD_VAR 0 1
60131: PPUSH
60132: LD_VAR 0 6
60136: PPUSH
60137: CALL 59422 0 2
60141: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60142: LD_VAR 0 1
60146: PPUSH
60147: LD_VAR 0 5
60151: PUSH
60152: LD_INT 1
60154: ARRAY
60155: PPUSH
60156: LD_VAR 0 5
60160: PUSH
60161: LD_INT 2
60163: ARRAY
60164: PPUSH
60165: CALL_OW 111
// end ;
60169: LD_VAR 0 3
60173: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60174: LD_INT 0
60176: PPUSH
60177: PPUSH
60178: PPUSH
// uc_side = 0 ;
60179: LD_ADDR_OWVAR 20
60183: PUSH
60184: LD_INT 0
60186: ST_TO_ADDR
// uc_nation = 0 ;
60187: LD_ADDR_OWVAR 21
60191: PUSH
60192: LD_INT 0
60194: ST_TO_ADDR
// InitHc_All ( ) ;
60195: CALL_OW 584
// InitVc ;
60199: CALL_OW 20
// if mastodonts then
60203: LD_VAR 0 6
60207: IFFALSE 60274
// for i = 1 to mastodonts do
60209: LD_ADDR_VAR 0 11
60213: PUSH
60214: DOUBLE
60215: LD_INT 1
60217: DEC
60218: ST_TO_ADDR
60219: LD_VAR 0 6
60223: PUSH
60224: FOR_TO
60225: IFFALSE 60272
// begin vc_chassis := 31 ;
60227: LD_ADDR_OWVAR 37
60231: PUSH
60232: LD_INT 31
60234: ST_TO_ADDR
// vc_control := control_rider ;
60235: LD_ADDR_OWVAR 38
60239: PUSH
60240: LD_INT 4
60242: ST_TO_ADDR
// animal := CreateVehicle ;
60243: LD_ADDR_VAR 0 12
60247: PUSH
60248: CALL_OW 45
60252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60253: LD_VAR 0 12
60257: PPUSH
60258: LD_VAR 0 8
60262: PPUSH
60263: LD_INT 0
60265: PPUSH
60266: CALL 62462 0 3
// end ;
60270: GO 60224
60272: POP
60273: POP
// if horses then
60274: LD_VAR 0 5
60278: IFFALSE 60345
// for i = 1 to horses do
60280: LD_ADDR_VAR 0 11
60284: PUSH
60285: DOUBLE
60286: LD_INT 1
60288: DEC
60289: ST_TO_ADDR
60290: LD_VAR 0 5
60294: PUSH
60295: FOR_TO
60296: IFFALSE 60343
// begin hc_class := 21 ;
60298: LD_ADDR_OWVAR 28
60302: PUSH
60303: LD_INT 21
60305: ST_TO_ADDR
// hc_gallery :=  ;
60306: LD_ADDR_OWVAR 33
60310: PUSH
60311: LD_STRING 
60313: ST_TO_ADDR
// animal := CreateHuman ;
60314: LD_ADDR_VAR 0 12
60318: PUSH
60319: CALL_OW 44
60323: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60324: LD_VAR 0 12
60328: PPUSH
60329: LD_VAR 0 8
60333: PPUSH
60334: LD_INT 0
60336: PPUSH
60337: CALL 62462 0 3
// end ;
60341: GO 60295
60343: POP
60344: POP
// if birds then
60345: LD_VAR 0 1
60349: IFFALSE 60416
// for i = 1 to birds do
60351: LD_ADDR_VAR 0 11
60355: PUSH
60356: DOUBLE
60357: LD_INT 1
60359: DEC
60360: ST_TO_ADDR
60361: LD_VAR 0 1
60365: PUSH
60366: FOR_TO
60367: IFFALSE 60414
// begin hc_class = 18 ;
60369: LD_ADDR_OWVAR 28
60373: PUSH
60374: LD_INT 18
60376: ST_TO_ADDR
// hc_gallery =  ;
60377: LD_ADDR_OWVAR 33
60381: PUSH
60382: LD_STRING 
60384: ST_TO_ADDR
// animal := CreateHuman ;
60385: LD_ADDR_VAR 0 12
60389: PUSH
60390: CALL_OW 44
60394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60395: LD_VAR 0 12
60399: PPUSH
60400: LD_VAR 0 8
60404: PPUSH
60405: LD_INT 0
60407: PPUSH
60408: CALL 62462 0 3
// end ;
60412: GO 60366
60414: POP
60415: POP
// if tigers then
60416: LD_VAR 0 2
60420: IFFALSE 60504
// for i = 1 to tigers do
60422: LD_ADDR_VAR 0 11
60426: PUSH
60427: DOUBLE
60428: LD_INT 1
60430: DEC
60431: ST_TO_ADDR
60432: LD_VAR 0 2
60436: PUSH
60437: FOR_TO
60438: IFFALSE 60502
// begin hc_class = class_tiger ;
60440: LD_ADDR_OWVAR 28
60444: PUSH
60445: LD_INT 14
60447: ST_TO_ADDR
// hc_gallery =  ;
60448: LD_ADDR_OWVAR 33
60452: PUSH
60453: LD_STRING 
60455: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60456: LD_ADDR_OWVAR 35
60460: PUSH
60461: LD_INT 7
60463: NEG
60464: PPUSH
60465: LD_INT 7
60467: PPUSH
60468: CALL_OW 12
60472: ST_TO_ADDR
// animal := CreateHuman ;
60473: LD_ADDR_VAR 0 12
60477: PUSH
60478: CALL_OW 44
60482: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60483: LD_VAR 0 12
60487: PPUSH
60488: LD_VAR 0 8
60492: PPUSH
60493: LD_INT 0
60495: PPUSH
60496: CALL 62462 0 3
// end ;
60500: GO 60437
60502: POP
60503: POP
// if apemans then
60504: LD_VAR 0 3
60508: IFFALSE 60631
// for i = 1 to apemans do
60510: LD_ADDR_VAR 0 11
60514: PUSH
60515: DOUBLE
60516: LD_INT 1
60518: DEC
60519: ST_TO_ADDR
60520: LD_VAR 0 3
60524: PUSH
60525: FOR_TO
60526: IFFALSE 60629
// begin hc_class = class_apeman ;
60528: LD_ADDR_OWVAR 28
60532: PUSH
60533: LD_INT 12
60535: ST_TO_ADDR
// hc_gallery =  ;
60536: LD_ADDR_OWVAR 33
60540: PUSH
60541: LD_STRING 
60543: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
60544: LD_ADDR_OWVAR 35
60548: PUSH
60549: LD_INT 5
60551: NEG
60552: PPUSH
60553: LD_INT 5
60555: PPUSH
60556: CALL_OW 12
60560: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60561: LD_ADDR_OWVAR 31
60565: PUSH
60566: LD_INT 1
60568: PPUSH
60569: LD_INT 3
60571: PPUSH
60572: CALL_OW 12
60576: PUSH
60577: LD_INT 1
60579: PPUSH
60580: LD_INT 3
60582: PPUSH
60583: CALL_OW 12
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: ST_TO_ADDR
// animal := CreateHuman ;
60600: LD_ADDR_VAR 0 12
60604: PUSH
60605: CALL_OW 44
60609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60610: LD_VAR 0 12
60614: PPUSH
60615: LD_VAR 0 8
60619: PPUSH
60620: LD_INT 0
60622: PPUSH
60623: CALL 62462 0 3
// end ;
60627: GO 60525
60629: POP
60630: POP
// if enchidnas then
60631: LD_VAR 0 4
60635: IFFALSE 60702
// for i = 1 to enchidnas do
60637: LD_ADDR_VAR 0 11
60641: PUSH
60642: DOUBLE
60643: LD_INT 1
60645: DEC
60646: ST_TO_ADDR
60647: LD_VAR 0 4
60651: PUSH
60652: FOR_TO
60653: IFFALSE 60700
// begin hc_class = 13 ;
60655: LD_ADDR_OWVAR 28
60659: PUSH
60660: LD_INT 13
60662: ST_TO_ADDR
// hc_gallery =  ;
60663: LD_ADDR_OWVAR 33
60667: PUSH
60668: LD_STRING 
60670: ST_TO_ADDR
// animal := CreateHuman ;
60671: LD_ADDR_VAR 0 12
60675: PUSH
60676: CALL_OW 44
60680: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60681: LD_VAR 0 12
60685: PPUSH
60686: LD_VAR 0 8
60690: PPUSH
60691: LD_INT 0
60693: PPUSH
60694: CALL 62462 0 3
// end ;
60698: GO 60652
60700: POP
60701: POP
// if fishes then
60702: LD_VAR 0 7
60706: IFFALSE 60773
// for i = 1 to fishes do
60708: LD_ADDR_VAR 0 11
60712: PUSH
60713: DOUBLE
60714: LD_INT 1
60716: DEC
60717: ST_TO_ADDR
60718: LD_VAR 0 7
60722: PUSH
60723: FOR_TO
60724: IFFALSE 60771
// begin hc_class = 20 ;
60726: LD_ADDR_OWVAR 28
60730: PUSH
60731: LD_INT 20
60733: ST_TO_ADDR
// hc_gallery =  ;
60734: LD_ADDR_OWVAR 33
60738: PUSH
60739: LD_STRING 
60741: ST_TO_ADDR
// animal := CreateHuman ;
60742: LD_ADDR_VAR 0 12
60746: PUSH
60747: CALL_OW 44
60751: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60752: LD_VAR 0 12
60756: PPUSH
60757: LD_VAR 0 9
60761: PPUSH
60762: LD_INT 0
60764: PPUSH
60765: CALL 62462 0 3
// end ;
60769: GO 60723
60771: POP
60772: POP
// end ;
60773: LD_VAR 0 10
60777: RET
// export function WantHeal ( sci , unit ) ; begin
60778: LD_INT 0
60780: PPUSH
// if GetTaskList ( sci ) > 0 then
60781: LD_VAR 0 1
60785: PPUSH
60786: CALL_OW 437
60790: PUSH
60791: LD_INT 0
60793: GREATER
60794: IFFALSE 60864
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60796: LD_VAR 0 1
60800: PPUSH
60801: CALL_OW 437
60805: PUSH
60806: LD_INT 1
60808: ARRAY
60809: PUSH
60810: LD_INT 1
60812: ARRAY
60813: PUSH
60814: LD_STRING l
60816: EQUAL
60817: PUSH
60818: LD_VAR 0 1
60822: PPUSH
60823: CALL_OW 437
60827: PUSH
60828: LD_INT 1
60830: ARRAY
60831: PUSH
60832: LD_INT 4
60834: ARRAY
60835: PUSH
60836: LD_VAR 0 2
60840: EQUAL
60841: AND
60842: IFFALSE 60854
// result := true else
60844: LD_ADDR_VAR 0 3
60848: PUSH
60849: LD_INT 1
60851: ST_TO_ADDR
60852: GO 60862
// result := false ;
60854: LD_ADDR_VAR 0 3
60858: PUSH
60859: LD_INT 0
60861: ST_TO_ADDR
// end else
60862: GO 60872
// result := false ;
60864: LD_ADDR_VAR 0 3
60868: PUSH
60869: LD_INT 0
60871: ST_TO_ADDR
// end ;
60872: LD_VAR 0 3
60876: RET
// export function HealTarget ( sci ) ; begin
60877: LD_INT 0
60879: PPUSH
// if not sci then
60880: LD_VAR 0 1
60884: NOT
60885: IFFALSE 60889
// exit ;
60887: GO 60954
// result := 0 ;
60889: LD_ADDR_VAR 0 2
60893: PUSH
60894: LD_INT 0
60896: ST_TO_ADDR
// if GetTaskList ( sci ) then
60897: LD_VAR 0 1
60901: PPUSH
60902: CALL_OW 437
60906: IFFALSE 60954
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60908: LD_VAR 0 1
60912: PPUSH
60913: CALL_OW 437
60917: PUSH
60918: LD_INT 1
60920: ARRAY
60921: PUSH
60922: LD_INT 1
60924: ARRAY
60925: PUSH
60926: LD_STRING l
60928: EQUAL
60929: IFFALSE 60954
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60931: LD_ADDR_VAR 0 2
60935: PUSH
60936: LD_VAR 0 1
60940: PPUSH
60941: CALL_OW 437
60945: PUSH
60946: LD_INT 1
60948: ARRAY
60949: PUSH
60950: LD_INT 4
60952: ARRAY
60953: ST_TO_ADDR
// end ;
60954: LD_VAR 0 2
60958: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60959: LD_INT 0
60961: PPUSH
60962: PPUSH
60963: PPUSH
60964: PPUSH
// if not base_units then
60965: LD_VAR 0 1
60969: NOT
60970: IFFALSE 60974
// exit ;
60972: GO 61061
// result := false ;
60974: LD_ADDR_VAR 0 2
60978: PUSH
60979: LD_INT 0
60981: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60982: LD_ADDR_VAR 0 5
60986: PUSH
60987: LD_VAR 0 1
60991: PPUSH
60992: LD_INT 21
60994: PUSH
60995: LD_INT 3
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PPUSH
61002: CALL_OW 72
61006: ST_TO_ADDR
// if not tmp then
61007: LD_VAR 0 5
61011: NOT
61012: IFFALSE 61016
// exit ;
61014: GO 61061
// for i in tmp do
61016: LD_ADDR_VAR 0 3
61020: PUSH
61021: LD_VAR 0 5
61025: PUSH
61026: FOR_IN
61027: IFFALSE 61059
// begin result := EnemyInRange ( i , 22 ) ;
61029: LD_ADDR_VAR 0 2
61033: PUSH
61034: LD_VAR 0 3
61038: PPUSH
61039: LD_INT 22
61041: PPUSH
61042: CALL 59297 0 2
61046: ST_TO_ADDR
// if result then
61047: LD_VAR 0 2
61051: IFFALSE 61057
// exit ;
61053: POP
61054: POP
61055: GO 61061
// end ;
61057: GO 61026
61059: POP
61060: POP
// end ;
61061: LD_VAR 0 2
61065: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61066: LD_INT 0
61068: PPUSH
61069: PPUSH
// if not units then
61070: LD_VAR 0 1
61074: NOT
61075: IFFALSE 61079
// exit ;
61077: GO 61149
// result := [ ] ;
61079: LD_ADDR_VAR 0 3
61083: PUSH
61084: EMPTY
61085: ST_TO_ADDR
// for i in units do
61086: LD_ADDR_VAR 0 4
61090: PUSH
61091: LD_VAR 0 1
61095: PUSH
61096: FOR_IN
61097: IFFALSE 61147
// if GetTag ( i ) = tag then
61099: LD_VAR 0 4
61103: PPUSH
61104: CALL_OW 110
61108: PUSH
61109: LD_VAR 0 2
61113: EQUAL
61114: IFFALSE 61145
// result := Insert ( result , result + 1 , i ) ;
61116: LD_ADDR_VAR 0 3
61120: PUSH
61121: LD_VAR 0 3
61125: PPUSH
61126: LD_VAR 0 3
61130: PUSH
61131: LD_INT 1
61133: PLUS
61134: PPUSH
61135: LD_VAR 0 4
61139: PPUSH
61140: CALL_OW 2
61144: ST_TO_ADDR
61145: GO 61096
61147: POP
61148: POP
// end ;
61149: LD_VAR 0 3
61153: RET
// export function IsDriver ( un ) ; begin
61154: LD_INT 0
61156: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61157: LD_ADDR_VAR 0 2
61161: PUSH
61162: LD_VAR 0 1
61166: PUSH
61167: LD_INT 55
61169: PUSH
61170: EMPTY
61171: LIST
61172: PPUSH
61173: CALL_OW 69
61177: IN
61178: ST_TO_ADDR
// end ;
61179: LD_VAR 0 2
61183: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61184: LD_INT 0
61186: PPUSH
61187: PPUSH
// list := [ ] ;
61188: LD_ADDR_VAR 0 5
61192: PUSH
61193: EMPTY
61194: ST_TO_ADDR
// case d of 0 :
61195: LD_VAR 0 3
61199: PUSH
61200: LD_INT 0
61202: DOUBLE
61203: EQUAL
61204: IFTRUE 61208
61206: GO 61341
61208: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61209: LD_ADDR_VAR 0 5
61213: PUSH
61214: LD_VAR 0 1
61218: PUSH
61219: LD_INT 4
61221: MINUS
61222: PUSH
61223: LD_VAR 0 2
61227: PUSH
61228: LD_INT 4
61230: MINUS
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: LIST
61239: PUSH
61240: LD_VAR 0 1
61244: PUSH
61245: LD_INT 3
61247: MINUS
61248: PUSH
61249: LD_VAR 0 2
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: LIST
61261: PUSH
61262: LD_VAR 0 1
61266: PUSH
61267: LD_INT 4
61269: PLUS
61270: PUSH
61271: LD_VAR 0 2
61275: PUSH
61276: LD_INT 4
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: LIST
61283: PUSH
61284: LD_VAR 0 1
61288: PUSH
61289: LD_INT 3
61291: PLUS
61292: PUSH
61293: LD_VAR 0 2
61297: PUSH
61298: LD_INT 3
61300: PLUS
61301: PUSH
61302: LD_INT 5
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: LIST
61309: PUSH
61310: LD_VAR 0 1
61314: PUSH
61315: LD_VAR 0 2
61319: PUSH
61320: LD_INT 4
61322: PLUS
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: LIST
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: ST_TO_ADDR
// end ; 1 :
61339: GO 62039
61341: LD_INT 1
61343: DOUBLE
61344: EQUAL
61345: IFTRUE 61349
61347: GO 61482
61349: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61350: LD_ADDR_VAR 0 5
61354: PUSH
61355: LD_VAR 0 1
61359: PUSH
61360: LD_VAR 0 2
61364: PUSH
61365: LD_INT 4
61367: MINUS
61368: PUSH
61369: LD_INT 3
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: LIST
61376: PUSH
61377: LD_VAR 0 1
61381: PUSH
61382: LD_INT 3
61384: MINUS
61385: PUSH
61386: LD_VAR 0 2
61390: PUSH
61391: LD_INT 3
61393: MINUS
61394: PUSH
61395: LD_INT 2
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: LIST
61402: PUSH
61403: LD_VAR 0 1
61407: PUSH
61408: LD_INT 4
61410: MINUS
61411: PUSH
61412: LD_VAR 0 2
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: LIST
61424: PUSH
61425: LD_VAR 0 1
61429: PUSH
61430: LD_VAR 0 2
61434: PUSH
61435: LD_INT 3
61437: PLUS
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: LIST
61446: PUSH
61447: LD_VAR 0 1
61451: PUSH
61452: LD_INT 4
61454: PLUS
61455: PUSH
61456: LD_VAR 0 2
61460: PUSH
61461: LD_INT 4
61463: PLUS
61464: PUSH
61465: LD_INT 5
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: LIST
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: ST_TO_ADDR
// end ; 2 :
61480: GO 62039
61482: LD_INT 2
61484: DOUBLE
61485: EQUAL
61486: IFTRUE 61490
61488: GO 61619
61490: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61491: LD_ADDR_VAR 0 5
61495: PUSH
61496: LD_VAR 0 1
61500: PUSH
61501: LD_VAR 0 2
61505: PUSH
61506: LD_INT 3
61508: MINUS
61509: PUSH
61510: LD_INT 3
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: LIST
61517: PUSH
61518: LD_VAR 0 1
61522: PUSH
61523: LD_INT 4
61525: PLUS
61526: PUSH
61527: LD_VAR 0 2
61531: PUSH
61532: LD_INT 4
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: LIST
61539: PUSH
61540: LD_VAR 0 1
61544: PUSH
61545: LD_VAR 0 2
61549: PUSH
61550: LD_INT 4
61552: PLUS
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: LIST
61561: PUSH
61562: LD_VAR 0 1
61566: PUSH
61567: LD_INT 3
61569: MINUS
61570: PUSH
61571: LD_VAR 0 2
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: LIST
61583: PUSH
61584: LD_VAR 0 1
61588: PUSH
61589: LD_INT 4
61591: MINUS
61592: PUSH
61593: LD_VAR 0 2
61597: PUSH
61598: LD_INT 4
61600: MINUS
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: LIST
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: ST_TO_ADDR
// end ; 3 :
61617: GO 62039
61619: LD_INT 3
61621: DOUBLE
61622: EQUAL
61623: IFTRUE 61627
61625: GO 61760
61627: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61628: LD_ADDR_VAR 0 5
61632: PUSH
61633: LD_VAR 0 1
61637: PUSH
61638: LD_INT 3
61640: PLUS
61641: PUSH
61642: LD_VAR 0 2
61646: PUSH
61647: LD_INT 4
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: LIST
61654: PUSH
61655: LD_VAR 0 1
61659: PUSH
61660: LD_INT 4
61662: PLUS
61663: PUSH
61664: LD_VAR 0 2
61668: PUSH
61669: LD_INT 4
61671: PLUS
61672: PUSH
61673: LD_INT 5
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: LIST
61680: PUSH
61681: LD_VAR 0 1
61685: PUSH
61686: LD_INT 4
61688: MINUS
61689: PUSH
61690: LD_VAR 0 2
61694: PUSH
61695: LD_INT 1
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: LIST
61702: PUSH
61703: LD_VAR 0 1
61707: PUSH
61708: LD_VAR 0 2
61712: PUSH
61713: LD_INT 4
61715: MINUS
61716: PUSH
61717: LD_INT 3
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: LIST
61724: PUSH
61725: LD_VAR 0 1
61729: PUSH
61730: LD_INT 3
61732: MINUS
61733: PUSH
61734: LD_VAR 0 2
61738: PUSH
61739: LD_INT 3
61741: MINUS
61742: PUSH
61743: LD_INT 2
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: LIST
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: ST_TO_ADDR
// end ; 4 :
61758: GO 62039
61760: LD_INT 4
61762: DOUBLE
61763: EQUAL
61764: IFTRUE 61768
61766: GO 61901
61768: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61769: LD_ADDR_VAR 0 5
61773: PUSH
61774: LD_VAR 0 1
61778: PUSH
61779: LD_VAR 0 2
61783: PUSH
61784: LD_INT 4
61786: PLUS
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: LIST
61795: PUSH
61796: LD_VAR 0 1
61800: PUSH
61801: LD_INT 3
61803: PLUS
61804: PUSH
61805: LD_VAR 0 2
61809: PUSH
61810: LD_INT 3
61812: PLUS
61813: PUSH
61814: LD_INT 5
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: LIST
61821: PUSH
61822: LD_VAR 0 1
61826: PUSH
61827: LD_INT 4
61829: PLUS
61830: PUSH
61831: LD_VAR 0 2
61835: PUSH
61836: LD_INT 4
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: LIST
61843: PUSH
61844: LD_VAR 0 1
61848: PUSH
61849: LD_VAR 0 2
61853: PUSH
61854: LD_INT 3
61856: MINUS
61857: PUSH
61858: LD_INT 3
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: LIST
61865: PUSH
61866: LD_VAR 0 1
61870: PUSH
61871: LD_INT 4
61873: MINUS
61874: PUSH
61875: LD_VAR 0 2
61879: PUSH
61880: LD_INT 4
61882: MINUS
61883: PUSH
61884: LD_INT 2
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: LIST
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: ST_TO_ADDR
// end ; 5 :
61899: GO 62039
61901: LD_INT 5
61903: DOUBLE
61904: EQUAL
61905: IFTRUE 61909
61907: GO 62038
61909: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61910: LD_ADDR_VAR 0 5
61914: PUSH
61915: LD_VAR 0 1
61919: PUSH
61920: LD_INT 4
61922: MINUS
61923: PUSH
61924: LD_VAR 0 2
61928: PUSH
61929: LD_INT 1
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: LIST
61936: PUSH
61937: LD_VAR 0 1
61941: PUSH
61942: LD_VAR 0 2
61946: PUSH
61947: LD_INT 4
61949: MINUS
61950: PUSH
61951: LD_INT 3
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: LIST
61958: PUSH
61959: LD_VAR 0 1
61963: PUSH
61964: LD_INT 4
61966: PLUS
61967: PUSH
61968: LD_VAR 0 2
61972: PUSH
61973: LD_INT 4
61975: PLUS
61976: PUSH
61977: LD_INT 5
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: LIST
61984: PUSH
61985: LD_VAR 0 1
61989: PUSH
61990: LD_INT 3
61992: PLUS
61993: PUSH
61994: LD_VAR 0 2
61998: PUSH
61999: LD_INT 4
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: PUSH
62007: LD_VAR 0 1
62011: PUSH
62012: LD_VAR 0 2
62016: PUSH
62017: LD_INT 3
62019: PLUS
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: LIST
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: ST_TO_ADDR
// end ; end ;
62036: GO 62039
62038: POP
// result := list ;
62039: LD_ADDR_VAR 0 4
62043: PUSH
62044: LD_VAR 0 5
62048: ST_TO_ADDR
// end ;
62049: LD_VAR 0 4
62053: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62054: LD_INT 0
62056: PPUSH
62057: PPUSH
62058: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62059: LD_VAR 0 1
62063: NOT
62064: PUSH
62065: LD_VAR 0 2
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: LD_INT 2
62075: PUSH
62076: LD_INT 3
62078: PUSH
62079: LD_INT 4
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: IN
62088: NOT
62089: OR
62090: IFFALSE 62094
// exit ;
62092: GO 62186
// tmp := [ ] ;
62094: LD_ADDR_VAR 0 5
62098: PUSH
62099: EMPTY
62100: ST_TO_ADDR
// for i in units do
62101: LD_ADDR_VAR 0 4
62105: PUSH
62106: LD_VAR 0 1
62110: PUSH
62111: FOR_IN
62112: IFFALSE 62155
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62114: LD_ADDR_VAR 0 5
62118: PUSH
62119: LD_VAR 0 5
62123: PPUSH
62124: LD_VAR 0 5
62128: PUSH
62129: LD_INT 1
62131: PLUS
62132: PPUSH
62133: LD_VAR 0 4
62137: PPUSH
62138: LD_VAR 0 2
62142: PPUSH
62143: CALL_OW 259
62147: PPUSH
62148: CALL_OW 2
62152: ST_TO_ADDR
62153: GO 62111
62155: POP
62156: POP
// if not tmp then
62157: LD_VAR 0 5
62161: NOT
62162: IFFALSE 62166
// exit ;
62164: GO 62186
// result := SortListByListDesc ( units , tmp ) ;
62166: LD_ADDR_VAR 0 3
62170: PUSH
62171: LD_VAR 0 1
62175: PPUSH
62176: LD_VAR 0 5
62180: PPUSH
62181: CALL_OW 77
62185: ST_TO_ADDR
// end ;
62186: LD_VAR 0 3
62190: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62191: LD_INT 0
62193: PPUSH
62194: PPUSH
62195: PPUSH
// result := false ;
62196: LD_ADDR_VAR 0 3
62200: PUSH
62201: LD_INT 0
62203: ST_TO_ADDR
// x := GetX ( building ) ;
62204: LD_ADDR_VAR 0 4
62208: PUSH
62209: LD_VAR 0 2
62213: PPUSH
62214: CALL_OW 250
62218: ST_TO_ADDR
// y := GetY ( building ) ;
62219: LD_ADDR_VAR 0 5
62223: PUSH
62224: LD_VAR 0 2
62228: PPUSH
62229: CALL_OW 251
62233: ST_TO_ADDR
// if not building or not x or not y then
62234: LD_VAR 0 2
62238: NOT
62239: PUSH
62240: LD_VAR 0 4
62244: NOT
62245: OR
62246: PUSH
62247: LD_VAR 0 5
62251: NOT
62252: OR
62253: IFFALSE 62257
// exit ;
62255: GO 62349
// if GetTaskList ( unit ) then
62257: LD_VAR 0 1
62261: PPUSH
62262: CALL_OW 437
62266: IFFALSE 62349
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62268: LD_STRING e
62270: PUSH
62271: LD_VAR 0 1
62275: PPUSH
62276: CALL_OW 437
62280: PUSH
62281: LD_INT 1
62283: ARRAY
62284: PUSH
62285: LD_INT 1
62287: ARRAY
62288: EQUAL
62289: PUSH
62290: LD_VAR 0 4
62294: PUSH
62295: LD_VAR 0 1
62299: PPUSH
62300: CALL_OW 437
62304: PUSH
62305: LD_INT 1
62307: ARRAY
62308: PUSH
62309: LD_INT 2
62311: ARRAY
62312: EQUAL
62313: AND
62314: PUSH
62315: LD_VAR 0 5
62319: PUSH
62320: LD_VAR 0 1
62324: PPUSH
62325: CALL_OW 437
62329: PUSH
62330: LD_INT 1
62332: ARRAY
62333: PUSH
62334: LD_INT 3
62336: ARRAY
62337: EQUAL
62338: AND
62339: IFFALSE 62349
// result := true end ;
62341: LD_ADDR_VAR 0 3
62345: PUSH
62346: LD_INT 1
62348: ST_TO_ADDR
// end ;
62349: LD_VAR 0 3
62353: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62354: LD_INT 0
62356: PPUSH
// result := false ;
62357: LD_ADDR_VAR 0 4
62361: PUSH
62362: LD_INT 0
62364: ST_TO_ADDR
// if GetTaskList ( unit ) then
62365: LD_VAR 0 1
62369: PPUSH
62370: CALL_OW 437
62374: IFFALSE 62457
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62376: LD_STRING M
62378: PUSH
62379: LD_VAR 0 1
62383: PPUSH
62384: CALL_OW 437
62388: PUSH
62389: LD_INT 1
62391: ARRAY
62392: PUSH
62393: LD_INT 1
62395: ARRAY
62396: EQUAL
62397: PUSH
62398: LD_VAR 0 2
62402: PUSH
62403: LD_VAR 0 1
62407: PPUSH
62408: CALL_OW 437
62412: PUSH
62413: LD_INT 1
62415: ARRAY
62416: PUSH
62417: LD_INT 2
62419: ARRAY
62420: EQUAL
62421: AND
62422: PUSH
62423: LD_VAR 0 3
62427: PUSH
62428: LD_VAR 0 1
62432: PPUSH
62433: CALL_OW 437
62437: PUSH
62438: LD_INT 1
62440: ARRAY
62441: PUSH
62442: LD_INT 3
62444: ARRAY
62445: EQUAL
62446: AND
62447: IFFALSE 62457
// result := true ;
62449: LD_ADDR_VAR 0 4
62453: PUSH
62454: LD_INT 1
62456: ST_TO_ADDR
// end ; end ;
62457: LD_VAR 0 4
62461: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62462: LD_INT 0
62464: PPUSH
62465: PPUSH
62466: PPUSH
62467: PPUSH
// if not unit or not area then
62468: LD_VAR 0 1
62472: NOT
62473: PUSH
62474: LD_VAR 0 2
62478: NOT
62479: OR
62480: IFFALSE 62484
// exit ;
62482: GO 62648
// tmp := AreaToList ( area , i ) ;
62484: LD_ADDR_VAR 0 6
62488: PUSH
62489: LD_VAR 0 2
62493: PPUSH
62494: LD_VAR 0 5
62498: PPUSH
62499: CALL_OW 517
62503: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62504: LD_ADDR_VAR 0 5
62508: PUSH
62509: DOUBLE
62510: LD_INT 1
62512: DEC
62513: ST_TO_ADDR
62514: LD_VAR 0 6
62518: PUSH
62519: LD_INT 1
62521: ARRAY
62522: PUSH
62523: FOR_TO
62524: IFFALSE 62646
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62526: LD_ADDR_VAR 0 7
62530: PUSH
62531: LD_VAR 0 6
62535: PUSH
62536: LD_INT 1
62538: ARRAY
62539: PUSH
62540: LD_VAR 0 5
62544: ARRAY
62545: PUSH
62546: LD_VAR 0 6
62550: PUSH
62551: LD_INT 2
62553: ARRAY
62554: PUSH
62555: LD_VAR 0 5
62559: ARRAY
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62565: LD_VAR 0 7
62569: PUSH
62570: LD_INT 1
62572: ARRAY
62573: PPUSH
62574: LD_VAR 0 7
62578: PUSH
62579: LD_INT 2
62581: ARRAY
62582: PPUSH
62583: CALL_OW 428
62587: PUSH
62588: LD_INT 0
62590: EQUAL
62591: IFFALSE 62644
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62593: LD_VAR 0 1
62597: PPUSH
62598: LD_VAR 0 7
62602: PUSH
62603: LD_INT 1
62605: ARRAY
62606: PPUSH
62607: LD_VAR 0 7
62611: PUSH
62612: LD_INT 2
62614: ARRAY
62615: PPUSH
62616: LD_VAR 0 3
62620: PPUSH
62621: CALL_OW 48
// result := IsPlaced ( unit ) ;
62625: LD_ADDR_VAR 0 4
62629: PUSH
62630: LD_VAR 0 1
62634: PPUSH
62635: CALL_OW 305
62639: ST_TO_ADDR
// exit ;
62640: POP
62641: POP
62642: GO 62648
// end ; end ;
62644: GO 62523
62646: POP
62647: POP
// end ;
62648: LD_VAR 0 4
62652: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62653: LD_INT 0
62655: PPUSH
62656: PPUSH
62657: PPUSH
// if not side or side > 8 then
62658: LD_VAR 0 1
62662: NOT
62663: PUSH
62664: LD_VAR 0 1
62668: PUSH
62669: LD_INT 8
62671: GREATER
62672: OR
62673: IFFALSE 62677
// exit ;
62675: GO 62864
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62677: LD_ADDR_VAR 0 4
62681: PUSH
62682: LD_INT 22
62684: PUSH
62685: LD_VAR 0 1
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 21
62696: PUSH
62697: LD_INT 3
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PPUSH
62708: CALL_OW 69
62712: ST_TO_ADDR
// if not tmp then
62713: LD_VAR 0 4
62717: NOT
62718: IFFALSE 62722
// exit ;
62720: GO 62864
// enable_addtolog := true ;
62722: LD_ADDR_OWVAR 81
62726: PUSH
62727: LD_INT 1
62729: ST_TO_ADDR
// AddToLog ( [ ) ;
62730: LD_STRING [
62732: PPUSH
62733: CALL_OW 561
// for i in tmp do
62737: LD_ADDR_VAR 0 3
62741: PUSH
62742: LD_VAR 0 4
62746: PUSH
62747: FOR_IN
62748: IFFALSE 62855
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62750: LD_STRING [
62752: PUSH
62753: LD_VAR 0 3
62757: PPUSH
62758: CALL_OW 266
62762: STR
62763: PUSH
62764: LD_STRING , 
62766: STR
62767: PUSH
62768: LD_VAR 0 3
62772: PPUSH
62773: CALL_OW 250
62777: STR
62778: PUSH
62779: LD_STRING , 
62781: STR
62782: PUSH
62783: LD_VAR 0 3
62787: PPUSH
62788: CALL_OW 251
62792: STR
62793: PUSH
62794: LD_STRING , 
62796: STR
62797: PUSH
62798: LD_VAR 0 3
62802: PPUSH
62803: CALL_OW 254
62807: STR
62808: PUSH
62809: LD_STRING , 
62811: STR
62812: PUSH
62813: LD_VAR 0 3
62817: PPUSH
62818: LD_INT 1
62820: PPUSH
62821: CALL_OW 268
62825: STR
62826: PUSH
62827: LD_STRING , 
62829: STR
62830: PUSH
62831: LD_VAR 0 3
62835: PPUSH
62836: LD_INT 2
62838: PPUSH
62839: CALL_OW 268
62843: STR
62844: PUSH
62845: LD_STRING ],
62847: STR
62848: PPUSH
62849: CALL_OW 561
// end ;
62853: GO 62747
62855: POP
62856: POP
// AddToLog ( ]; ) ;
62857: LD_STRING ];
62859: PPUSH
62860: CALL_OW 561
// end ;
62864: LD_VAR 0 2
62868: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62869: LD_INT 0
62871: PPUSH
62872: PPUSH
62873: PPUSH
62874: PPUSH
62875: PPUSH
// if not area or not rate or not max then
62876: LD_VAR 0 1
62880: NOT
62881: PUSH
62882: LD_VAR 0 2
62886: NOT
62887: OR
62888: PUSH
62889: LD_VAR 0 4
62893: NOT
62894: OR
62895: IFFALSE 62899
// exit ;
62897: GO 63091
// while 1 do
62899: LD_INT 1
62901: IFFALSE 63091
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62903: LD_ADDR_VAR 0 9
62907: PUSH
62908: LD_VAR 0 1
62912: PPUSH
62913: LD_INT 1
62915: PPUSH
62916: CALL_OW 287
62920: PUSH
62921: LD_INT 10
62923: MUL
62924: ST_TO_ADDR
// r := rate / 10 ;
62925: LD_ADDR_VAR 0 7
62929: PUSH
62930: LD_VAR 0 2
62934: PUSH
62935: LD_INT 10
62937: DIVREAL
62938: ST_TO_ADDR
// time := 1 1$00 ;
62939: LD_ADDR_VAR 0 8
62943: PUSH
62944: LD_INT 2100
62946: ST_TO_ADDR
// if amount < min then
62947: LD_VAR 0 9
62951: PUSH
62952: LD_VAR 0 3
62956: LESS
62957: IFFALSE 62975
// r := r * 2 else
62959: LD_ADDR_VAR 0 7
62963: PUSH
62964: LD_VAR 0 7
62968: PUSH
62969: LD_INT 2
62971: MUL
62972: ST_TO_ADDR
62973: GO 63001
// if amount > max then
62975: LD_VAR 0 9
62979: PUSH
62980: LD_VAR 0 4
62984: GREATER
62985: IFFALSE 63001
// r := r / 2 ;
62987: LD_ADDR_VAR 0 7
62991: PUSH
62992: LD_VAR 0 7
62996: PUSH
62997: LD_INT 2
62999: DIVREAL
63000: ST_TO_ADDR
// time := time / r ;
63001: LD_ADDR_VAR 0 8
63005: PUSH
63006: LD_VAR 0 8
63010: PUSH
63011: LD_VAR 0 7
63015: DIVREAL
63016: ST_TO_ADDR
// if time < 0 then
63017: LD_VAR 0 8
63021: PUSH
63022: LD_INT 0
63024: LESS
63025: IFFALSE 63042
// time := time * - 1 ;
63027: LD_ADDR_VAR 0 8
63031: PUSH
63032: LD_VAR 0 8
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: MUL
63041: ST_TO_ADDR
// wait ( time ) ;
63042: LD_VAR 0 8
63046: PPUSH
63047: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63051: LD_INT 35
63053: PPUSH
63054: LD_INT 875
63056: PPUSH
63057: CALL_OW 12
63061: PPUSH
63062: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63066: LD_INT 1
63068: PPUSH
63069: LD_INT 5
63071: PPUSH
63072: CALL_OW 12
63076: PPUSH
63077: LD_VAR 0 1
63081: PPUSH
63082: LD_INT 1
63084: PPUSH
63085: CALL_OW 55
// end ;
63089: GO 62899
// end ;
63091: LD_VAR 0 5
63095: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63096: LD_INT 0
63098: PPUSH
63099: PPUSH
63100: PPUSH
63101: PPUSH
63102: PPUSH
63103: PPUSH
63104: PPUSH
63105: PPUSH
// if not turrets or not factories then
63106: LD_VAR 0 1
63110: NOT
63111: PUSH
63112: LD_VAR 0 2
63116: NOT
63117: OR
63118: IFFALSE 63122
// exit ;
63120: GO 63429
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63122: LD_ADDR_VAR 0 10
63126: PUSH
63127: LD_INT 5
63129: PUSH
63130: LD_INT 6
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 2
63139: PUSH
63140: LD_INT 4
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 3
63149: PUSH
63150: LD_INT 5
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 24
63164: PUSH
63165: LD_INT 25
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 23
63174: PUSH
63175: LD_INT 27
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 42
63188: PUSH
63189: LD_INT 43
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 44
63198: PUSH
63199: LD_INT 46
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 45
63208: PUSH
63209: LD_INT 47
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: LIST
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: LIST
63225: ST_TO_ADDR
// result := [ ] ;
63226: LD_ADDR_VAR 0 3
63230: PUSH
63231: EMPTY
63232: ST_TO_ADDR
// for i in turrets do
63233: LD_ADDR_VAR 0 4
63237: PUSH
63238: LD_VAR 0 1
63242: PUSH
63243: FOR_IN
63244: IFFALSE 63427
// begin nat := GetNation ( i ) ;
63246: LD_ADDR_VAR 0 7
63250: PUSH
63251: LD_VAR 0 4
63255: PPUSH
63256: CALL_OW 248
63260: ST_TO_ADDR
// weapon := 0 ;
63261: LD_ADDR_VAR 0 8
63265: PUSH
63266: LD_INT 0
63268: ST_TO_ADDR
// if not nat then
63269: LD_VAR 0 7
63273: NOT
63274: IFFALSE 63278
// continue ;
63276: GO 63243
// for j in list [ nat ] do
63278: LD_ADDR_VAR 0 5
63282: PUSH
63283: LD_VAR 0 10
63287: PUSH
63288: LD_VAR 0 7
63292: ARRAY
63293: PUSH
63294: FOR_IN
63295: IFFALSE 63336
// if GetBWeapon ( i ) = j [ 1 ] then
63297: LD_VAR 0 4
63301: PPUSH
63302: CALL_OW 269
63306: PUSH
63307: LD_VAR 0 5
63311: PUSH
63312: LD_INT 1
63314: ARRAY
63315: EQUAL
63316: IFFALSE 63334
// begin weapon := j [ 2 ] ;
63318: LD_ADDR_VAR 0 8
63322: PUSH
63323: LD_VAR 0 5
63327: PUSH
63328: LD_INT 2
63330: ARRAY
63331: ST_TO_ADDR
// break ;
63332: GO 63336
// end ;
63334: GO 63294
63336: POP
63337: POP
// if not weapon then
63338: LD_VAR 0 8
63342: NOT
63343: IFFALSE 63347
// continue ;
63345: GO 63243
// for k in factories do
63347: LD_ADDR_VAR 0 6
63351: PUSH
63352: LD_VAR 0 2
63356: PUSH
63357: FOR_IN
63358: IFFALSE 63423
// begin weapons := AvailableWeaponList ( k ) ;
63360: LD_ADDR_VAR 0 9
63364: PUSH
63365: LD_VAR 0 6
63369: PPUSH
63370: CALL_OW 478
63374: ST_TO_ADDR
// if not weapons then
63375: LD_VAR 0 9
63379: NOT
63380: IFFALSE 63384
// continue ;
63382: GO 63357
// if weapon in weapons then
63384: LD_VAR 0 8
63388: PUSH
63389: LD_VAR 0 9
63393: IN
63394: IFFALSE 63421
// begin result := [ i , weapon ] ;
63396: LD_ADDR_VAR 0 3
63400: PUSH
63401: LD_VAR 0 4
63405: PUSH
63406: LD_VAR 0 8
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: ST_TO_ADDR
// exit ;
63415: POP
63416: POP
63417: POP
63418: POP
63419: GO 63429
// end ; end ;
63421: GO 63357
63423: POP
63424: POP
// end ;
63425: GO 63243
63427: POP
63428: POP
// end ;
63429: LD_VAR 0 3
63433: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63434: LD_INT 0
63436: PPUSH
// if not side or side > 8 then
63437: LD_VAR 0 3
63441: NOT
63442: PUSH
63443: LD_VAR 0 3
63447: PUSH
63448: LD_INT 8
63450: GREATER
63451: OR
63452: IFFALSE 63456
// exit ;
63454: GO 63515
// if not range then
63456: LD_VAR 0 4
63460: NOT
63461: IFFALSE 63472
// range := - 12 ;
63463: LD_ADDR_VAR 0 4
63467: PUSH
63468: LD_INT 12
63470: NEG
63471: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63472: LD_VAR 0 1
63476: PPUSH
63477: LD_VAR 0 2
63481: PPUSH
63482: LD_VAR 0 3
63486: PPUSH
63487: LD_VAR 0 4
63491: PPUSH
63492: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63496: LD_VAR 0 1
63500: PPUSH
63501: LD_VAR 0 2
63505: PPUSH
63506: LD_VAR 0 3
63510: PPUSH
63511: CALL_OW 331
// end ;
63515: LD_VAR 0 5
63519: RET
// export function Video ( mode ) ; begin
63520: LD_INT 0
63522: PPUSH
// ingame_video = mode ;
63523: LD_ADDR_OWVAR 52
63527: PUSH
63528: LD_VAR 0 1
63532: ST_TO_ADDR
// interface_hidden = mode ;
63533: LD_ADDR_OWVAR 54
63537: PUSH
63538: LD_VAR 0 1
63542: ST_TO_ADDR
// end ;
63543: LD_VAR 0 2
63547: RET
// export function Join ( array , element ) ; begin
63548: LD_INT 0
63550: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63551: LD_ADDR_VAR 0 3
63555: PUSH
63556: LD_VAR 0 1
63560: PPUSH
63561: LD_VAR 0 1
63565: PUSH
63566: LD_INT 1
63568: PLUS
63569: PPUSH
63570: LD_VAR 0 2
63574: PPUSH
63575: CALL_OW 1
63579: ST_TO_ADDR
// end ;
63580: LD_VAR 0 3
63584: RET
// export function JoinUnion ( array , element ) ; begin
63585: LD_INT 0
63587: PPUSH
// result := array union element ;
63588: LD_ADDR_VAR 0 3
63592: PUSH
63593: LD_VAR 0 1
63597: PUSH
63598: LD_VAR 0 2
63602: UNION
63603: ST_TO_ADDR
// end ;
63604: LD_VAR 0 3
63608: RET
// export function GetBehemoths ( side ) ; begin
63609: LD_INT 0
63611: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63612: LD_ADDR_VAR 0 2
63616: PUSH
63617: LD_INT 22
63619: PUSH
63620: LD_VAR 0 1
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 31
63631: PUSH
63632: LD_INT 25
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PPUSH
63643: CALL_OW 69
63647: ST_TO_ADDR
// end ;
63648: LD_VAR 0 2
63652: RET
// export function Shuffle ( array ) ; var i , index ; begin
63653: LD_INT 0
63655: PPUSH
63656: PPUSH
63657: PPUSH
// result := [ ] ;
63658: LD_ADDR_VAR 0 2
63662: PUSH
63663: EMPTY
63664: ST_TO_ADDR
// if not array then
63665: LD_VAR 0 1
63669: NOT
63670: IFFALSE 63674
// exit ;
63672: GO 63773
// Randomize ;
63674: CALL_OW 10
// for i = array downto 1 do
63678: LD_ADDR_VAR 0 3
63682: PUSH
63683: DOUBLE
63684: LD_VAR 0 1
63688: INC
63689: ST_TO_ADDR
63690: LD_INT 1
63692: PUSH
63693: FOR_DOWNTO
63694: IFFALSE 63771
// begin index := rand ( 1 , array ) ;
63696: LD_ADDR_VAR 0 4
63700: PUSH
63701: LD_INT 1
63703: PPUSH
63704: LD_VAR 0 1
63708: PPUSH
63709: CALL_OW 12
63713: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63714: LD_ADDR_VAR 0 2
63718: PUSH
63719: LD_VAR 0 2
63723: PPUSH
63724: LD_VAR 0 2
63728: PUSH
63729: LD_INT 1
63731: PLUS
63732: PPUSH
63733: LD_VAR 0 1
63737: PUSH
63738: LD_VAR 0 4
63742: ARRAY
63743: PPUSH
63744: CALL_OW 2
63748: ST_TO_ADDR
// array := Delete ( array , index ) ;
63749: LD_ADDR_VAR 0 1
63753: PUSH
63754: LD_VAR 0 1
63758: PPUSH
63759: LD_VAR 0 4
63763: PPUSH
63764: CALL_OW 3
63768: ST_TO_ADDR
// end ;
63769: GO 63693
63771: POP
63772: POP
// end ;
63773: LD_VAR 0 2
63777: RET
// export function GetBaseMaterials ( base ) ; begin
63778: LD_INT 0
63780: PPUSH
// result := [ 0 , 0 , 0 ] ;
63781: LD_ADDR_VAR 0 2
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: LIST
63799: ST_TO_ADDR
// if not base then
63800: LD_VAR 0 1
63804: NOT
63805: IFFALSE 63809
// exit ;
63807: GO 63858
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63809: LD_ADDR_VAR 0 2
63813: PUSH
63814: LD_VAR 0 1
63818: PPUSH
63819: LD_INT 1
63821: PPUSH
63822: CALL_OW 275
63826: PUSH
63827: LD_VAR 0 1
63831: PPUSH
63832: LD_INT 2
63834: PPUSH
63835: CALL_OW 275
63839: PUSH
63840: LD_VAR 0 1
63844: PPUSH
63845: LD_INT 3
63847: PPUSH
63848: CALL_OW 275
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: LIST
63857: ST_TO_ADDR
// end ;
63858: LD_VAR 0 2
63862: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63863: LD_INT 0
63865: PPUSH
63866: PPUSH
// result := array ;
63867: LD_ADDR_VAR 0 3
63871: PUSH
63872: LD_VAR 0 1
63876: ST_TO_ADDR
// if size > 0 then
63877: LD_VAR 0 2
63881: PUSH
63882: LD_INT 0
63884: GREATER
63885: IFFALSE 63931
// for i := array downto size do
63887: LD_ADDR_VAR 0 4
63891: PUSH
63892: DOUBLE
63893: LD_VAR 0 1
63897: INC
63898: ST_TO_ADDR
63899: LD_VAR 0 2
63903: PUSH
63904: FOR_DOWNTO
63905: IFFALSE 63929
// result := Delete ( result , result ) ;
63907: LD_ADDR_VAR 0 3
63911: PUSH
63912: LD_VAR 0 3
63916: PPUSH
63917: LD_VAR 0 3
63921: PPUSH
63922: CALL_OW 3
63926: ST_TO_ADDR
63927: GO 63904
63929: POP
63930: POP
// end ;
63931: LD_VAR 0 3
63935: RET
// export function ComExit ( unit ) ; var tmp ; begin
63936: LD_INT 0
63938: PPUSH
63939: PPUSH
// if not IsInUnit ( unit ) then
63940: LD_VAR 0 1
63944: PPUSH
63945: CALL_OW 310
63949: NOT
63950: IFFALSE 63954
// exit ;
63952: GO 64014
// tmp := IsInUnit ( unit ) ;
63954: LD_ADDR_VAR 0 3
63958: PUSH
63959: LD_VAR 0 1
63963: PPUSH
63964: CALL_OW 310
63968: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63969: LD_VAR 0 3
63973: PPUSH
63974: CALL_OW 247
63978: PUSH
63979: LD_INT 2
63981: EQUAL
63982: IFFALSE 63995
// ComExitVehicle ( unit ) else
63984: LD_VAR 0 1
63988: PPUSH
63989: CALL_OW 121
63993: GO 64004
// ComExitBuilding ( unit ) ;
63995: LD_VAR 0 1
63999: PPUSH
64000: CALL_OW 122
// result := tmp ;
64004: LD_ADDR_VAR 0 2
64008: PUSH
64009: LD_VAR 0 3
64013: ST_TO_ADDR
// end ;
64014: LD_VAR 0 2
64018: RET
// export function ComExitAll ( units ) ; var i ; begin
64019: LD_INT 0
64021: PPUSH
64022: PPUSH
// if not units then
64023: LD_VAR 0 1
64027: NOT
64028: IFFALSE 64032
// exit ;
64030: GO 64058
// for i in units do
64032: LD_ADDR_VAR 0 3
64036: PUSH
64037: LD_VAR 0 1
64041: PUSH
64042: FOR_IN
64043: IFFALSE 64056
// ComExit ( i ) ;
64045: LD_VAR 0 3
64049: PPUSH
64050: CALL 63936 0 1
64054: GO 64042
64056: POP
64057: POP
// end ;
64058: LD_VAR 0 2
64062: RET
// export function ResetHc ; begin
64063: LD_INT 0
64065: PPUSH
// InitHc ;
64066: CALL_OW 19
// hc_importance := 0 ;
64070: LD_ADDR_OWVAR 32
64074: PUSH
64075: LD_INT 0
64077: ST_TO_ADDR
// end ;
64078: LD_VAR 0 1
64082: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64083: LD_INT 0
64085: PPUSH
64086: PPUSH
64087: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64088: LD_ADDR_VAR 0 6
64092: PUSH
64093: LD_VAR 0 1
64097: PUSH
64098: LD_VAR 0 3
64102: PLUS
64103: PUSH
64104: LD_INT 2
64106: DIV
64107: ST_TO_ADDR
// if _x < 0 then
64108: LD_VAR 0 6
64112: PUSH
64113: LD_INT 0
64115: LESS
64116: IFFALSE 64133
// _x := _x * - 1 ;
64118: LD_ADDR_VAR 0 6
64122: PUSH
64123: LD_VAR 0 6
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: MUL
64132: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64133: LD_ADDR_VAR 0 7
64137: PUSH
64138: LD_VAR 0 2
64142: PUSH
64143: LD_VAR 0 4
64147: PLUS
64148: PUSH
64149: LD_INT 2
64151: DIV
64152: ST_TO_ADDR
// if _y < 0 then
64153: LD_VAR 0 7
64157: PUSH
64158: LD_INT 0
64160: LESS
64161: IFFALSE 64178
// _y := _y * - 1 ;
64163: LD_ADDR_VAR 0 7
64167: PUSH
64168: LD_VAR 0 7
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: MUL
64177: ST_TO_ADDR
// result := [ _x , _y ] ;
64178: LD_ADDR_VAR 0 5
64182: PUSH
64183: LD_VAR 0 6
64187: PUSH
64188: LD_VAR 0 7
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: ST_TO_ADDR
// end ;
64197: LD_VAR 0 5
64201: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64202: LD_INT 0
64204: PPUSH
64205: PPUSH
64206: PPUSH
64207: PPUSH
// task := GetTaskList ( unit ) ;
64208: LD_ADDR_VAR 0 7
64212: PUSH
64213: LD_VAR 0 1
64217: PPUSH
64218: CALL_OW 437
64222: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64223: LD_VAR 0 7
64227: NOT
64228: PUSH
64229: LD_VAR 0 1
64233: PPUSH
64234: LD_VAR 0 2
64238: PPUSH
64239: CALL_OW 308
64243: NOT
64244: AND
64245: IFFALSE 64249
// exit ;
64247: GO 64367
// if IsInArea ( unit , area ) then
64249: LD_VAR 0 1
64253: PPUSH
64254: LD_VAR 0 2
64258: PPUSH
64259: CALL_OW 308
64263: IFFALSE 64281
// begin ComMoveToArea ( unit , goAway ) ;
64265: LD_VAR 0 1
64269: PPUSH
64270: LD_VAR 0 3
64274: PPUSH
64275: CALL_OW 113
// exit ;
64279: GO 64367
// end ; if task [ 1 ] [ 1 ] <> M then
64281: LD_VAR 0 7
64285: PUSH
64286: LD_INT 1
64288: ARRAY
64289: PUSH
64290: LD_INT 1
64292: ARRAY
64293: PUSH
64294: LD_STRING M
64296: NONEQUAL
64297: IFFALSE 64301
// exit ;
64299: GO 64367
// x := task [ 1 ] [ 2 ] ;
64301: LD_ADDR_VAR 0 5
64305: PUSH
64306: LD_VAR 0 7
64310: PUSH
64311: LD_INT 1
64313: ARRAY
64314: PUSH
64315: LD_INT 2
64317: ARRAY
64318: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64319: LD_ADDR_VAR 0 6
64323: PUSH
64324: LD_VAR 0 7
64328: PUSH
64329: LD_INT 1
64331: ARRAY
64332: PUSH
64333: LD_INT 3
64335: ARRAY
64336: ST_TO_ADDR
// if InArea ( x , y , area ) then
64337: LD_VAR 0 5
64341: PPUSH
64342: LD_VAR 0 6
64346: PPUSH
64347: LD_VAR 0 2
64351: PPUSH
64352: CALL_OW 309
64356: IFFALSE 64367
// ComStop ( unit ) ;
64358: LD_VAR 0 1
64362: PPUSH
64363: CALL_OW 141
// end ;
64367: LD_VAR 0 4
64371: RET
// export function Abs ( value ) ; begin
64372: LD_INT 0
64374: PPUSH
// result := value ;
64375: LD_ADDR_VAR 0 2
64379: PUSH
64380: LD_VAR 0 1
64384: ST_TO_ADDR
// if value < 0 then
64385: LD_VAR 0 1
64389: PUSH
64390: LD_INT 0
64392: LESS
64393: IFFALSE 64410
// result := value * - 1 ;
64395: LD_ADDR_VAR 0 2
64399: PUSH
64400: LD_VAR 0 1
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: MUL
64409: ST_TO_ADDR
// end ;
64410: LD_VAR 0 2
64414: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64415: LD_INT 0
64417: PPUSH
64418: PPUSH
64419: PPUSH
64420: PPUSH
64421: PPUSH
64422: PPUSH
64423: PPUSH
64424: PPUSH
// if not unit or not building then
64425: LD_VAR 0 1
64429: NOT
64430: PUSH
64431: LD_VAR 0 2
64435: NOT
64436: OR
64437: IFFALSE 64441
// exit ;
64439: GO 64667
// x := GetX ( building ) ;
64441: LD_ADDR_VAR 0 4
64445: PUSH
64446: LD_VAR 0 2
64450: PPUSH
64451: CALL_OW 250
64455: ST_TO_ADDR
// y := GetY ( building ) ;
64456: LD_ADDR_VAR 0 6
64460: PUSH
64461: LD_VAR 0 2
64465: PPUSH
64466: CALL_OW 251
64470: ST_TO_ADDR
// d := GetDir ( building ) ;
64471: LD_ADDR_VAR 0 8
64475: PUSH
64476: LD_VAR 0 2
64480: PPUSH
64481: CALL_OW 254
64485: ST_TO_ADDR
// r := 4 ;
64486: LD_ADDR_VAR 0 9
64490: PUSH
64491: LD_INT 4
64493: ST_TO_ADDR
// for i := 1 to 5 do
64494: LD_ADDR_VAR 0 10
64498: PUSH
64499: DOUBLE
64500: LD_INT 1
64502: DEC
64503: ST_TO_ADDR
64504: LD_INT 5
64506: PUSH
64507: FOR_TO
64508: IFFALSE 64665
// begin _x := ShiftX ( x , d , r + i ) ;
64510: LD_ADDR_VAR 0 5
64514: PUSH
64515: LD_VAR 0 4
64519: PPUSH
64520: LD_VAR 0 8
64524: PPUSH
64525: LD_VAR 0 9
64529: PUSH
64530: LD_VAR 0 10
64534: PLUS
64535: PPUSH
64536: CALL_OW 272
64540: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64541: LD_ADDR_VAR 0 7
64545: PUSH
64546: LD_VAR 0 6
64550: PPUSH
64551: LD_VAR 0 8
64555: PPUSH
64556: LD_VAR 0 9
64560: PUSH
64561: LD_VAR 0 10
64565: PLUS
64566: PPUSH
64567: CALL_OW 273
64571: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64572: LD_VAR 0 5
64576: PPUSH
64577: LD_VAR 0 7
64581: PPUSH
64582: CALL_OW 488
64586: PUSH
64587: LD_VAR 0 5
64591: PPUSH
64592: LD_VAR 0 7
64596: PPUSH
64597: CALL_OW 428
64601: PPUSH
64602: CALL_OW 247
64606: PUSH
64607: LD_INT 3
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: IN
64617: NOT
64618: AND
64619: IFFALSE 64663
// begin ComMoveXY ( unit , _x , _y ) ;
64621: LD_VAR 0 1
64625: PPUSH
64626: LD_VAR 0 5
64630: PPUSH
64631: LD_VAR 0 7
64635: PPUSH
64636: CALL_OW 111
// result := [ _x , _y ] ;
64640: LD_ADDR_VAR 0 3
64644: PUSH
64645: LD_VAR 0 5
64649: PUSH
64650: LD_VAR 0 7
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: ST_TO_ADDR
// exit ;
64659: POP
64660: POP
64661: GO 64667
// end ; end ;
64663: GO 64507
64665: POP
64666: POP
// end ;
64667: LD_VAR 0 3
64671: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64672: LD_INT 0
64674: PPUSH
64675: PPUSH
64676: PPUSH
// result := 0 ;
64677: LD_ADDR_VAR 0 3
64681: PUSH
64682: LD_INT 0
64684: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64685: LD_VAR 0 1
64689: PUSH
64690: LD_INT 0
64692: LESS
64693: PUSH
64694: LD_VAR 0 1
64698: PUSH
64699: LD_INT 8
64701: GREATER
64702: OR
64703: PUSH
64704: LD_VAR 0 2
64708: PUSH
64709: LD_INT 0
64711: LESS
64712: OR
64713: PUSH
64714: LD_VAR 0 2
64718: PUSH
64719: LD_INT 8
64721: GREATER
64722: OR
64723: IFFALSE 64727
// exit ;
64725: GO 64802
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64727: LD_ADDR_VAR 0 4
64731: PUSH
64732: LD_INT 22
64734: PUSH
64735: LD_VAR 0 2
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PPUSH
64744: CALL_OW 69
64748: PUSH
64749: FOR_IN
64750: IFFALSE 64800
// begin un := UnitShoot ( i ) ;
64752: LD_ADDR_VAR 0 5
64756: PUSH
64757: LD_VAR 0 4
64761: PPUSH
64762: CALL_OW 504
64766: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64767: LD_VAR 0 5
64771: PPUSH
64772: CALL_OW 255
64776: PUSH
64777: LD_VAR 0 1
64781: EQUAL
64782: IFFALSE 64798
// begin result := un ;
64784: LD_ADDR_VAR 0 3
64788: PUSH
64789: LD_VAR 0 5
64793: ST_TO_ADDR
// exit ;
64794: POP
64795: POP
64796: GO 64802
// end ; end ;
64798: GO 64749
64800: POP
64801: POP
// end ;
64802: LD_VAR 0 3
64806: RET
// export function GetCargoBay ( units ) ; begin
64807: LD_INT 0
64809: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64810: LD_ADDR_VAR 0 2
64814: PUSH
64815: LD_VAR 0 1
64819: PPUSH
64820: LD_INT 2
64822: PUSH
64823: LD_INT 34
64825: PUSH
64826: LD_INT 12
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 34
64835: PUSH
64836: LD_INT 51
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 34
64845: PUSH
64846: LD_INT 32
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 34
64855: PUSH
64856: LD_EXP 26
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: PPUSH
64872: CALL_OW 72
64876: ST_TO_ADDR
// end ;
64877: LD_VAR 0 2
64881: RET
// export function Negate ( value ) ; begin
64882: LD_INT 0
64884: PPUSH
// result := not value ;
64885: LD_ADDR_VAR 0 2
64889: PUSH
64890: LD_VAR 0 1
64894: NOT
64895: ST_TO_ADDR
// end ;
64896: LD_VAR 0 2
64900: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
64901: LD_INT 0
64903: PPUSH
// if x1 = x2 then
64904: LD_VAR 0 1
64908: PUSH
64909: LD_VAR 0 3
64913: EQUAL
64914: IFFALSE 64948
// begin if y1 > y2 then
64916: LD_VAR 0 2
64920: PUSH
64921: LD_VAR 0 4
64925: GREATER
64926: IFFALSE 64938
// result := 0 else
64928: LD_ADDR_VAR 0 5
64932: PUSH
64933: LD_INT 0
64935: ST_TO_ADDR
64936: GO 64946
// result := 3 ;
64938: LD_ADDR_VAR 0 5
64942: PUSH
64943: LD_INT 3
64945: ST_TO_ADDR
// exit ;
64946: GO 65034
// end ; if y1 = y2 then
64948: LD_VAR 0 2
64952: PUSH
64953: LD_VAR 0 4
64957: EQUAL
64958: IFFALSE 64992
// begin if x1 > x2 then
64960: LD_VAR 0 1
64964: PUSH
64965: LD_VAR 0 3
64969: GREATER
64970: IFFALSE 64982
// result := 1 else
64972: LD_ADDR_VAR 0 5
64976: PUSH
64977: LD_INT 1
64979: ST_TO_ADDR
64980: GO 64990
// result := 4 ;
64982: LD_ADDR_VAR 0 5
64986: PUSH
64987: LD_INT 4
64989: ST_TO_ADDR
// exit ;
64990: GO 65034
// end ; if x1 > x2 and y1 > y2 then
64992: LD_VAR 0 1
64996: PUSH
64997: LD_VAR 0 3
65001: GREATER
65002: PUSH
65003: LD_VAR 0 2
65007: PUSH
65008: LD_VAR 0 4
65012: GREATER
65013: AND
65014: IFFALSE 65026
// result := 2 else
65016: LD_ADDR_VAR 0 5
65020: PUSH
65021: LD_INT 2
65023: ST_TO_ADDR
65024: GO 65034
// result := 5 ;
65026: LD_ADDR_VAR 0 5
65030: PUSH
65031: LD_INT 5
65033: ST_TO_ADDR
// end ;
65034: LD_VAR 0 5
65038: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65039: LD_INT 0
65041: PPUSH
65042: PPUSH
// if not driver or not IsInUnit ( driver ) then
65043: LD_VAR 0 1
65047: NOT
65048: PUSH
65049: LD_VAR 0 1
65053: PPUSH
65054: CALL_OW 310
65058: NOT
65059: OR
65060: IFFALSE 65064
// exit ;
65062: GO 65154
// vehicle := IsInUnit ( driver ) ;
65064: LD_ADDR_VAR 0 3
65068: PUSH
65069: LD_VAR 0 1
65073: PPUSH
65074: CALL_OW 310
65078: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65079: LD_VAR 0 1
65083: PPUSH
65084: LD_STRING \
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: LD_INT 0
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: PUSH
65114: LD_STRING E
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: LD_INT 0
65122: PUSH
65123: LD_VAR 0 3
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: LD_INT 0
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PPUSH
65150: CALL_OW 446
// end ;
65154: LD_VAR 0 2
65158: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65159: LD_INT 0
65161: PPUSH
65162: PPUSH
65163: PPUSH
// tmp := [ ] ;
65164: LD_ADDR_VAR 0 5
65168: PUSH
65169: EMPTY
65170: ST_TO_ADDR
// for i in units do
65171: LD_ADDR_VAR 0 4
65175: PUSH
65176: LD_VAR 0 1
65180: PUSH
65181: FOR_IN
65182: IFFALSE 65220
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65184: LD_ADDR_VAR 0 5
65188: PUSH
65189: LD_VAR 0 5
65193: PPUSH
65194: LD_VAR 0 5
65198: PUSH
65199: LD_INT 1
65201: PLUS
65202: PPUSH
65203: LD_VAR 0 4
65207: PPUSH
65208: CALL_OW 256
65212: PPUSH
65213: CALL_OW 2
65217: ST_TO_ADDR
65218: GO 65181
65220: POP
65221: POP
// if not tmp then
65222: LD_VAR 0 5
65226: NOT
65227: IFFALSE 65231
// exit ;
65229: GO 65279
// if asc then
65231: LD_VAR 0 2
65235: IFFALSE 65259
// result := SortListByListAsc ( units , tmp ) else
65237: LD_ADDR_VAR 0 3
65241: PUSH
65242: LD_VAR 0 1
65246: PPUSH
65247: LD_VAR 0 5
65251: PPUSH
65252: CALL_OW 76
65256: ST_TO_ADDR
65257: GO 65279
// result := SortListByListDesc ( units , tmp ) ;
65259: LD_ADDR_VAR 0 3
65263: PUSH
65264: LD_VAR 0 1
65268: PPUSH
65269: LD_VAR 0 5
65273: PPUSH
65274: CALL_OW 77
65278: ST_TO_ADDR
// end ; end_of_file
65279: LD_VAR 0 3
65283: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65284: LD_VAR 0 1
65288: PUSH
65289: LD_INT 200
65291: DOUBLE
65292: GREATEREQUAL
65293: IFFALSE 65301
65295: LD_INT 299
65297: DOUBLE
65298: LESSEQUAL
65299: IFTRUE 65303
65301: GO 65335
65303: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65304: LD_VAR 0 1
65308: PPUSH
65309: LD_VAR 0 2
65313: PPUSH
65314: LD_VAR 0 3
65318: PPUSH
65319: LD_VAR 0 4
65323: PPUSH
65324: LD_VAR 0 5
65328: PPUSH
65329: CALL 22927 0 5
65333: GO 65412
65335: LD_INT 300
65337: DOUBLE
65338: GREATEREQUAL
65339: IFFALSE 65347
65341: LD_INT 399
65343: DOUBLE
65344: LESSEQUAL
65345: IFTRUE 65349
65347: GO 65411
65349: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65350: LD_VAR 0 1
65354: PPUSH
65355: LD_VAR 0 2
65359: PPUSH
65360: LD_VAR 0 3
65364: PPUSH
65365: LD_VAR 0 4
65369: PPUSH
65370: LD_VAR 0 5
65374: PPUSH
65375: LD_VAR 0 6
65379: PPUSH
65380: LD_VAR 0 7
65384: PPUSH
65385: LD_VAR 0 8
65389: PPUSH
65390: LD_VAR 0 9
65394: PPUSH
65395: LD_VAR 0 10
65399: PPUSH
65400: LD_VAR 0 11
65404: PPUSH
65405: CALL 20815 0 11
65409: GO 65412
65411: POP
// end ;
65412: PPOPN 11
65414: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65415: LD_VAR 0 1
65419: PPUSH
65420: LD_VAR 0 2
65424: PPUSH
65425: LD_VAR 0 3
65429: PPUSH
65430: LD_VAR 0 4
65434: PPUSH
65435: LD_VAR 0 5
65439: PPUSH
65440: CALL 22909 0 5
// end ; end_of_file
65444: PPOPN 5
65446: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65447: LD_VAR 0 1
65451: PPUSH
65452: LD_VAR 0 2
65456: PPUSH
65457: LD_VAR 0 3
65461: PPUSH
65462: LD_VAR 0 4
65466: PPUSH
65467: LD_VAR 0 5
65471: PPUSH
65472: LD_VAR 0 6
65476: PPUSH
65477: CALL 9623 0 6
// end ;
65481: PPOPN 6
65483: END
