// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8631 0 0
// PrepareAmerican ;
 100: CALL 5251 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Platonov ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Platonov
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 25391 0 2
// if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 255
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: PUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL_OW 263
2749: PUSH
2750: LD_INT 3
2752: EQUAL
2753: AND
2754: IFFALSE 2764
// comp_tested := true ;
2756: LD_ADDR_EXP 22
2760: PUSH
2761: LD_INT 1
2763: ST_TO_ADDR
// end ;
2764: PPOPN 2
2766: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2767: LD_VAR 0 1
2771: PUSH
2772: LD_INT 22
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 21
2784: PUSH
2785: LD_INT 3
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IN
2801: IFFALSE 2879
// if attacked = false and sikorski_ar = false then
2803: LD_EXP 15
2807: PUSH
2808: LD_INT 0
2810: EQUAL
2811: PUSH
2812: LD_EXP 12
2816: PUSH
2817: LD_INT 0
2819: EQUAL
2820: AND
2821: IFFALSE 2879
// begin attacked := true ;
2823: LD_ADDR_EXP 15
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// if IsInUnit ( donald ) then
2831: LD_EXP 13
2835: PPUSH
2836: CALL_OW 310
2840: IFFALSE 2856
// SayRadio ( donald , DGammaF ) else
2842: LD_EXP 13
2846: PPUSH
2847: LD_STRING DGammaF
2849: PPUSH
2850: CALL_OW 94
2854: GO 2879
// if IsInUnit ( van ) then
2856: LD_EXP 14
2860: PPUSH
2861: CALL_OW 310
2865: IFFALSE 2879
// SayRadio ( van , DGammaM ) ;
2867: LD_EXP 14
2871: PPUSH
2872: LD_STRING DGammaM
2874: PPUSH
2875: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2879: LD_VAR 0 1
2883: PUSH
2884: LD_INT 33
2886: PUSH
2887: LD_INT 2
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 69
2898: IN
2899: IFFALSE 2910
// ComUnlink ( un ) ;
2901: LD_VAR 0 1
2905: PPUSH
2906: CALL_OW 136
// end ;
2910: PPOPN 1
2912: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2913: LD_VAR 0 2
2917: PPUSH
2918: CALL_OW 258
2922: PUSH
2923: LD_INT 1
2925: EQUAL
2926: IFFALSE 2940
// Say ( sci , Dsci3 ) ;
2928: LD_VAR 0 2
2932: PPUSH
2933: LD_STRING Dsci3
2935: PPUSH
2936: CALL_OW 88
// end ;
2940: PPOPN 2
2942: END
// on BuildingComplete ( b ) do var i ;
2943: LD_INT 0
2945: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 266
2955: PUSH
2956: LD_INT 0
2958: EQUAL
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 255
2969: PUSH
2970: LD_INT 3
2972: EQUAL
2973: AND
2974: PUSH
2975: LD_EXP 6
2979: PUSH
2980: LD_INT 0
2982: EQUAL
2983: AND
2984: IFFALSE 3048
// begin SetBName ( b , kalinin ) ;
2986: LD_VAR 0 1
2990: PPUSH
2991: LD_STRING kalinin
2993: PPUSH
2994: CALL_OW 500
// dep_x := GetX ( b ) ;
2998: LD_ADDR_EXP 7
3002: PUSH
3003: LD_VAR 0 1
3007: PPUSH
3008: CALL_OW 250
3012: ST_TO_ADDR
// dep_y := GetY ( b ) ;
3013: LD_ADDR_EXP 8
3017: PUSH
3018: LD_VAR 0 1
3022: PPUSH
3023: CALL_OW 251
3027: ST_TO_ADDR
// depot_rdy := true ;
3028: LD_ADDR_EXP 6
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3036: LD_EXP 2
3040: PPUSH
3041: LD_STRING Dpop3
3043: PPUSH
3044: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 266
3057: PUSH
3058: LD_INT 6
3060: EQUAL
3061: PUSH
3062: LD_VAR 0 1
3066: PPUSH
3067: CALL_OW 255
3071: PUSH
3072: LD_INT 3
3074: EQUAL
3075: AND
3076: PUSH
3077: LD_EXP 21
3081: PUSH
3082: LD_INT 0
3084: EQUAL
3085: AND
3086: IFFALSE 3181
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3088: LD_INT 22
3090: PUSH
3091: LD_INT 3
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 25
3100: PUSH
3101: LD_INT 4
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_INT 0
3119: GREATER
3120: IFFALSE 3181
// begin event_comp := true ;
3122: LD_ADDR_EXP 21
3126: PUSH
3127: LD_INT 1
3129: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3130: LD_INT 22
3132: PUSH
3133: LD_INT 3
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 25
3142: PUSH
3143: LD_INT 4
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 26
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_STRING Dsci1
3176: PPUSH
3177: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 266
3190: PUSH
3191: LD_INT 32
3193: EQUAL
3194: PUSH
3195: LD_VAR 0 1
3199: PPUSH
3200: CALL_OW 255
3204: PUSH
3205: LD_INT 1
3207: EQUAL
3208: AND
3209: IFFALSE 3274
// begin RaiseSailEvent ( 6 ) ;
3211: LD_INT 6
3213: PPUSH
3214: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3218: LD_VAR 0 1
3222: PPUSH
3223: LD_EXP 18
3227: PUSH
3228: LD_INT 4
3230: ARRAY
3231: PPUSH
3232: CALL_OW 208
// for i = 1 to 4 do
3236: LD_ADDR_VAR 0 2
3240: PUSH
3241: DOUBLE
3242: LD_INT 1
3244: DEC
3245: ST_TO_ADDR
3246: LD_INT 4
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3272
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3252: LD_ADDR_EXP 18
3256: PUSH
3257: LD_EXP 18
3261: PPUSH
3262: LD_INT 1
3264: PPUSH
3265: CALL_OW 3
3269: ST_TO_ADDR
3270: GO 3249
3272: POP
3273: POP
// end ; end ;
3274: PPOPN 2
3276: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3277: LD_VAR 0 1
3281: PPUSH
3282: CALL 25271 0 1
// if un in Patrol then
3286: LD_VAR 0 1
3290: PUSH
3291: LD_EXP 17
3295: IN
3296: IFFALSE 3314
// Patrol := Patrol diff un ;
3298: LD_ADDR_EXP 17
3302: PUSH
3303: LD_EXP 17
3307: PUSH
3308: LD_VAR 0 1
3312: DIFF
3313: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3314: LD_VAR 0 1
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: IN
3348: IFFALSE 3434
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3350: LD_ADDR_EXP 18
3354: PUSH
3355: LD_EXP 18
3359: PUSH
3360: LD_VAR 0 1
3364: PPUSH
3365: CALL_OW 250
3369: ADD
3370: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3371: LD_ADDR_EXP 18
3375: PUSH
3376: LD_EXP 18
3380: PUSH
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 251
3390: ADD
3391: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3392: LD_ADDR_EXP 18
3396: PUSH
3397: LD_EXP 18
3401: PUSH
3402: LD_VAR 0 1
3406: PPUSH
3407: CALL_OW 254
3411: ADD
3412: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3413: LD_ADDR_EXP 18
3417: PUSH
3418: LD_EXP 18
3422: PUSH
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 269
3432: ADD
3433: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3434: LD_VAR 0 1
3438: PUSH
3439: LD_INT 33
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: LD_INT 34
3454: PUSH
3455: LD_INT 13
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 69
3474: IN
3475: IFFALSE 3491
// new_veh := new_veh + 1 ;
3477: LD_ADDR_EXP 19
3481: PUSH
3482: LD_EXP 19
3486: PUSH
3487: LD_INT 1
3489: PLUS
3490: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3491: LD_VAR 0 1
3495: PUSH
3496: LD_INT 34
3498: PUSH
3499: LD_INT 13
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: IN
3511: IFFALSE 3532
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3513: LD_INT 26
3515: PPUSH
3516: LD_INT 3
3518: PPUSH
3519: LD_INT 2
3521: PPUSH
3522: LD_INT 2
3524: PPUSH
3525: LD_INT 13
3527: PPUSH
3528: CALL_OW 185
// if un = am_dep then
3532: LD_VAR 0 1
3536: PUSH
3537: LD_INT 25
3539: EQUAL
3540: IFFALSE 3708
// begin SayRadio ( Platonov , DPlat ) ;
3542: LD_EXP 4
3546: PPUSH
3547: LD_STRING DPlat
3549: PPUSH
3550: CALL_OW 94
// if timer <= 30 30$00 then
3554: LD_EXP 24
3558: PUSH
3559: LD_INT 63000
3561: LESSEQUAL
3562: IFFALSE 3576
// AddMedal ( gamma_med3 , 1 ) else
3564: LD_STRING gamma_med3
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 101
3574: GO 3626
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3576: LD_EXP 24
3580: PUSH
3581: LD_INT 105000
3583: PUSH
3584: LD_INT 88200
3586: PUSH
3587: LD_INT 73500
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: LD_EXP 1
3599: ARRAY
3600: LESSEQUAL
3601: IFFALSE 3615
// AddMedal ( gamma_med3 , 2 ) else
3603: LD_STRING gamma_med3
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 101
3613: GO 3626
// AddMedal ( gamma_med3 , - 1 ) ;
3615: LD_STRING gamma_med3
3617: PPUSH
3618: LD_INT 1
3620: NEG
3621: PPUSH
3622: CALL_OW 101
// if not comp_tested then
3626: LD_EXP 22
3630: NOT
3631: IFFALSE 3646
// AddMedal ( gamma_med2 , - 1 ) else
3633: LD_STRING gamma_med2
3635: PPUSH
3636: LD_INT 1
3638: NEG
3639: PPUSH
3640: CALL_OW 101
3644: GO 3656
// AddMedal ( gamma_med2 , 1 ) ;
3646: LD_STRING gamma_med2
3648: PPUSH
3649: LD_INT 1
3651: PPUSH
3652: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3656: LD_EXP 9
3660: PPUSH
3661: CALL_OW 301
3665: PUSH
3666: LD_EXP 23
3670: NOT
3671: AND
3672: IFFALSE 3686
// AddMedal ( gamma_med1 , 1 ) else
3674: LD_STRING gamma_med1
3676: PPUSH
3677: LD_INT 1
3679: PPUSH
3680: CALL_OW 101
3684: GO 3697
// AddMedal ( gamma_med1 , - 1 ) ;
3686: LD_STRING gamma_med1
3688: PPUSH
3689: LD_INT 1
3691: NEG
3692: PPUSH
3693: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3697: LD_STRING GAMMA_MEDALS
3699: PPUSH
3700: CALL_OW 102
// YouWin ;
3704: CALL_OW 103
// end ; if un = commander then
3708: LD_VAR 0 1
3712: PUSH
3713: LD_EXP 3
3717: EQUAL
3718: IFFALSE 3727
// YouLost ( comml ) ;
3720: LD_STRING comml
3722: PPUSH
3723: CALL_OW 104
// if un = sikorski then
3727: LD_VAR 0 1
3731: PUSH
3732: LD_EXP 9
3736: EQUAL
3737: IFFALSE 3749
// AddMedal ( gamma_med1 , 1 ) ;
3739: LD_STRING gamma_med1
3741: PPUSH
3742: LD_INT 1
3744: PPUSH
3745: CALL_OW 101
// end ;
3749: PPOPN 1
3751: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3752: LD_INT 0
3754: PPUSH
3755: PPUSH
3756: PPUSH
3757: PPUSH
3758: PPUSH
3759: PPUSH
3760: PPUSH
3761: PPUSH
3762: PPUSH
// begin if event = 1 then
3763: LD_VAR 0 1
3767: PUSH
3768: LD_INT 1
3770: EQUAL
3771: IFFALSE 4068
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3773: LD_ADDR_VAR 0 4
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 1
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 21
3790: PUSH
3791: LD_INT 3
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 3
3800: PUSH
3801: LD_INT 24
3803: PUSH
3804: LD_INT 1000
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3825: LD_ADDR_VAR 0 8
3829: PUSH
3830: LD_INT 22
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 25
3842: PUSH
3843: LD_INT 2
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_INT 24
3852: PUSH
3853: LD_INT 1000
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3873: LD_ADDR_VAR 0 9
3877: PUSH
3878: LD_INT 22
3880: PUSH
3881: LD_INT 1
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: LD_INT 34
3890: PUSH
3891: LD_INT 13
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: CALL_OW 69
3906: ST_TO_ADDR
// if engs > 0 then
3907: LD_VAR 0 8
3911: PUSH
3912: LD_INT 0
3914: GREATER
3915: IFFALSE 4020
// for i = 1 to engs do
3917: LD_ADDR_VAR 0 2
3921: PUSH
3922: DOUBLE
3923: LD_INT 1
3925: DEC
3926: ST_TO_ADDR
3927: LD_VAR 0 8
3931: PUSH
3932: FOR_TO
3933: IFFALSE 4018
// begin if IsInUnit ( engs [ i ] ) then
3935: LD_VAR 0 8
3939: PUSH
3940: LD_VAR 0 2
3944: ARRAY
3945: PPUSH
3946: CALL_OW 310
3950: IFFALSE 3967
// ComExitBuilding ( engs [ i ] ) ;
3952: LD_VAR 0 8
3956: PUSH
3957: LD_VAR 0 2
3961: ARRAY
3962: PPUSH
3963: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3967: LD_INT 7
3969: PPUSH
3970: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3974: LD_VAR 0 8
3978: PUSH
3979: LD_VAR 0 2
3983: ARRAY
3984: PPUSH
3985: CALL_OW 314
3989: NOT
3990: IFFALSE 4016
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3992: LD_VAR 0 8
3996: PUSH
3997: LD_VAR 0 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 4
4007: PUSH
4008: LD_INT 1
4010: ARRAY
4011: PPUSH
4012: CALL_OW 130
// end ;
4016: GO 3932
4018: POP
4019: POP
// if crane > 0 then
4020: LD_VAR 0 9
4024: PUSH
4025: LD_INT 0
4027: GREATER
4028: IFFALSE 4068
// if not HasTask ( crane [ 1 ] ) then
4030: LD_VAR 0 9
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: PPUSH
4039: CALL_OW 314
4043: NOT
4044: IFFALSE 4068
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4046: LD_VAR 0 9
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: LD_VAR 0 4
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: CALL_OW 130
// end ; if event = 2 then
4068: LD_VAR 0 1
4072: PUSH
4073: LD_INT 2
4075: EQUAL
4076: IFFALSE 4198
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4078: LD_ADDR_VAR 0 8
4082: PUSH
4083: LD_INT 22
4085: PUSH
4086: LD_INT 1
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 25
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PPUSH
4107: CALL_OW 69
4111: ST_TO_ADDR
// if engs > 0 then
4112: LD_VAR 0 8
4116: PUSH
4117: LD_INT 0
4119: GREATER
4120: IFFALSE 4198
// for i = 1 to engs do
4122: LD_ADDR_VAR 0 2
4126: PUSH
4127: DOUBLE
4128: LD_INT 1
4130: DEC
4131: ST_TO_ADDR
4132: LD_VAR 0 8
4136: PUSH
4137: FOR_TO
4138: IFFALSE 4196
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4140: LD_VAR 0 8
4144: PUSH
4145: LD_VAR 0 2
4149: ARRAY
4150: PPUSH
4151: CALL_OW 314
4155: NOT
4156: PUSH
4157: LD_VAR 0 8
4161: PUSH
4162: LD_VAR 0 2
4166: ARRAY
4167: PPUSH
4168: CALL_OW 310
4172: NOT
4173: AND
4174: IFFALSE 4194
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4176: LD_VAR 0 8
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PPUSH
4187: LD_INT 25
4189: PPUSH
4190: CALL_OW 120
4194: GO 4137
4196: POP
4197: POP
// end ; if event = 3 then
4198: LD_VAR 0 1
4202: PUSH
4203: LD_INT 3
4205: EQUAL
4206: IFFALSE 4570
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4208: LD_ADDR_VAR 0 4
4212: PUSH
4213: LD_INT 22
4215: PUSH
4216: LD_INT 1
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 21
4225: PUSH
4226: LD_INT 1
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: LD_INT 25
4238: PUSH
4239: LD_INT 4
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: LD_INT 24
4255: PUSH
4256: LD_INT 800
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: PPUSH
4276: CALL_OW 69
4280: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4281: LD_ADDR_VAR 0 5
4285: PUSH
4286: LD_INT 22
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 25
4298: PUSH
4299: LD_INT 4
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: ST_TO_ADDR
// if filter > 0 then
4315: LD_VAR 0 4
4319: PUSH
4320: LD_INT 0
4322: GREATER
4323: IFFALSE 4512
// begin for i = 1 to doc do
4325: LD_ADDR_VAR 0 2
4329: PUSH
4330: DOUBLE
4331: LD_INT 1
4333: DEC
4334: ST_TO_ADDR
4335: LD_VAR 0 5
4339: PUSH
4340: FOR_TO
4341: IFFALSE 4441
// begin if IsInUnit ( doc [ i ] ) then
4343: LD_VAR 0 5
4347: PUSH
4348: LD_VAR 0 2
4352: ARRAY
4353: PPUSH
4354: CALL_OW 310
4358: IFFALSE 4375
// ComExitBuilding ( doc [ i ] ) ;
4360: LD_VAR 0 5
4364: PUSH
4365: LD_VAR 0 2
4369: ARRAY
4370: PPUSH
4371: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4375: LD_VAR 0 4
4379: PUSH
4380: LD_INT 1
4382: ARRAY
4383: PPUSH
4384: LD_INT 46
4386: PPUSH
4387: CALL_OW 296
4391: PUSH
4392: LD_INT 10
4394: LESS
4395: PUSH
4396: LD_VAR 0 5
4400: PUSH
4401: LD_VAR 0 2
4405: ARRAY
4406: PPUSH
4407: CALL_OW 314
4411: NOT
4412: AND
4413: IFFALSE 4439
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4415: LD_VAR 0 5
4419: PUSH
4420: LD_VAR 0 2
4424: ARRAY
4425: PPUSH
4426: LD_VAR 0 4
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: PPUSH
4435: CALL_OW 128
// end ;
4439: GO 4340
4441: POP
4442: POP
// for i = 1 to filter do
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: DOUBLE
4449: LD_INT 1
4451: DEC
4452: ST_TO_ADDR
4453: LD_VAR 0 4
4457: PUSH
4458: FOR_TO
4459: IFFALSE 4508
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4461: LD_VAR 0 4
4465: PUSH
4466: LD_VAR 0 2
4470: ARRAY
4471: PPUSH
4472: LD_INT 46
4474: PPUSH
4475: CALL_OW 296
4479: PUSH
4480: LD_INT 10
4482: GREATER
4483: IFFALSE 4506
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4485: LD_VAR 0 4
4489: PUSH
4490: LD_VAR 0 2
4494: ARRAY
4495: PPUSH
4496: LD_INT 47
4498: PPUSH
4499: LD_INT 12
4501: PPUSH
4502: CALL_OW 111
4506: GO 4458
4508: POP
4509: POP
// end else
4510: GO 4570
// for i = 1 to doc do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: DOUBLE
4518: LD_INT 1
4520: DEC
4521: ST_TO_ADDR
4522: LD_VAR 0 5
4526: PUSH
4527: FOR_TO
4528: IFFALSE 4568
// if not IsInUnit ( doc [ i ] ) then
4530: LD_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: ARRAY
4540: PPUSH
4541: CALL_OW 310
4545: NOT
4546: IFFALSE 4566
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4548: LD_VAR 0 5
4552: PUSH
4553: LD_VAR 0 2
4557: ARRAY
4558: PPUSH
4559: LD_INT 46
4561: PPUSH
4562: CALL_OW 120
4566: GO 4527
4568: POP
4569: POP
// end ; if event = 4 then
4570: LD_VAR 0 1
4574: PUSH
4575: LD_INT 4
4577: EQUAL
4578: IFFALSE 4829
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4580: LD_ADDR_VAR 0 6
4584: PUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 30
4597: PUSH
4598: LD_INT 5
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: ST_TO_ADDR
// for i = 1 to bac do
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_VAR 0 6
4628: PUSH
4629: FOR_TO
4630: IFFALSE 4671
// if UnitsInside ( bac [ i ] ) < 6 then
4632: LD_VAR 0 6
4636: PUSH
4637: LD_VAR 0 2
4641: ARRAY
4642: PPUSH
4643: CALL_OW 313
4647: PUSH
4648: LD_INT 6
4650: LESS
4651: IFFALSE 4669
// place := bac [ i ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: LD_VAR 0 6
4662: PUSH
4663: LD_VAR 0 2
4667: ARRAY
4668: ST_TO_ADDR
4669: GO 4629
4671: POP
4672: POP
// if place then
4673: LD_VAR 0 7
4677: IFFALSE 4829
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4679: LD_ADDR_VAR 0 4
4683: PUSH
4684: LD_INT 22
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 25
4699: PUSH
4700: LD_INT 1
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 25
4709: PUSH
4710: LD_INT 5
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 24
4724: PUSH
4725: LD_INT 1000
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: EMPTY
4738: LIST
4739: PPUSH
4740: CALL_OW 69
4744: PUSH
4745: LD_EXP 17
4749: DIFF
4750: ST_TO_ADDR
// for i = 1 to filter do
4751: LD_ADDR_VAR 0 2
4755: PUSH
4756: DOUBLE
4757: LD_INT 1
4759: DEC
4760: ST_TO_ADDR
4761: LD_VAR 0 4
4765: PUSH
4766: FOR_TO
4767: IFFALSE 4827
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4769: LD_VAR 0 4
4773: PUSH
4774: LD_VAR 0 2
4778: ARRAY
4779: PPUSH
4780: CALL_OW 310
4784: NOT
4785: PUSH
4786: LD_VAR 0 4
4790: PUSH
4791: LD_VAR 0 2
4795: ARRAY
4796: PPUSH
4797: CALL_OW 314
4801: NOT
4802: AND
4803: IFFALSE 4825
// ComEnterUnit ( filter [ i ] , place ) ;
4805: LD_VAR 0 4
4809: PUSH
4810: LD_VAR 0 2
4814: ARRAY
4815: PPUSH
4816: LD_VAR 0 7
4820: PPUSH
4821: CALL_OW 120
4825: GO 4766
4827: POP
4828: POP
// end ; end ; if event = 5 then
4829: LD_VAR 0 1
4833: PUSH
4834: LD_INT 5
4836: EQUAL
4837: IFFALSE 4991
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4839: LD_INT 12
4841: PPUSH
4842: LD_INT 81
4844: PUSH
4845: LD_INT 1
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 70
4856: PUSH
4857: LD_INT 0
4859: EQUAL
4860: IFFALSE 4991
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4862: LD_ADDR_VAR 0 8
4866: PUSH
4867: LD_INT 22
4869: PUSH
4870: LD_INT 1
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PPUSH
4891: CALL_OW 69
4895: ST_TO_ADDR
// if engs > 0 then
4896: LD_VAR 0 8
4900: PUSH
4901: LD_INT 0
4903: GREATER
4904: IFFALSE 4991
// for i = 1 to engs do
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: DOUBLE
4912: LD_INT 1
4914: DEC
4915: ST_TO_ADDR
4916: LD_VAR 0 8
4920: PUSH
4921: FOR_TO
4922: IFFALSE 4989
// if not HasTask ( engs [ i ] ) then
4924: LD_VAR 0 8
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PPUSH
4935: CALL_OW 314
4939: NOT
4940: IFFALSE 4987
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4942: LD_VAR 0 8
4946: PUSH
4947: LD_VAR 0 2
4951: ARRAY
4952: PPUSH
4953: LD_INT 32
4955: PPUSH
4956: LD_EXP 18
4960: PUSH
4961: LD_INT 1
4963: ARRAY
4964: PPUSH
4965: LD_EXP 18
4969: PUSH
4970: LD_INT 2
4972: ARRAY
4973: PPUSH
4974: LD_EXP 18
4978: PUSH
4979: LD_INT 3
4981: ARRAY
4982: PPUSH
4983: CALL_OW 145
4987: GO 4921
4989: POP
4990: POP
// end ; end ; if event = 6 then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 6
4998: EQUAL
4999: IFFALSE 5183
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
5001: LD_ADDR_VAR 0 6
5005: PUSH
5006: LD_INT 22
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 30
5018: PUSH
5019: LD_INT 5
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 69
5034: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5035: LD_VAR 0 6
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 30
5052: PUSH
5053: LD_INT 32
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 58
5062: PUSH
5063: EMPTY
5064: LIST
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: PPUSH
5074: CALL_OW 69
5078: PUSH
5079: LD_INT 0
5081: GREATER
5082: AND
5083: IFFALSE 5183
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5085: LD_ADDR_VAR 0 10
5089: PUSH
5090: LD_INT 22
5092: PUSH
5093: LD_INT 1
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: LD_INT 30
5102: PUSH
5103: LD_INT 32
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 58
5112: PUSH
5113: EMPTY
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: PUSH
5121: EMPTY
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5133: LD_ADDR_VAR 0 3
5137: PUSH
5138: LD_VAR 0 6
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 313
5151: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 1
5159: ARRAY
5160: PPUSH
5161: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 1
5172: ARRAY
5173: PPUSH
5174: LD_VAR 0 10
5178: PPUSH
5179: CALL_OW 180
// end ; end ; end ;
5183: PPOPN 10
5185: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5186: LD_VAR 0 1
5190: PUSH
5191: LD_INT 1
5193: EQUAL
5194: PUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_INT 3
5202: EQUAL
5203: AND
5204: IFFALSE 5214
// contact_am := true ;
5206: LD_ADDR_EXP 16
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ;
5214: PPOPN 2
5216: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5217: LD_VAR 0 1
5221: PPUSH
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_VAR 0 3
5231: PPUSH
5232: CALL 25367 0 3
// end ;
5236: PPOPN 3
5238: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5239: LD_VAR 0 1
5243: PPUSH
5244: CALL 25375 0 1
// end ; end_of_file
5248: PPOPN 1
5250: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5251: LD_INT 0
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5261: LD_ADDR_VAR 0 5
5265: PUSH
5266: LD_INT 5
5268: PUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: PUSH
5280: LD_EXP 1
5284: ARRAY
5285: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5286: LD_ADDR_VAR 0 6
5290: PUSH
5291: LD_INT 4
5293: PUSH
5294: LD_INT 4
5296: PUSH
5297: LD_INT 4
5299: PUSH
5300: LD_INT 5
5302: PUSH
5303: LD_INT 5
5305: PUSH
5306: LD_INT 5
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: ST_TO_ADDR
// SForce := [ ] ;
5321: LD_ADDR_EXP 11
5325: PUSH
5326: EMPTY
5327: ST_TO_ADDR
// Sikorski_Ar := false ;
5328: LD_ADDR_EXP 12
5332: PUSH
5333: LD_INT 0
5335: ST_TO_ADDR
// attacked := false ;
5336: LD_ADDR_EXP 15
5340: PUSH
5341: LD_INT 0
5343: ST_TO_ADDR
// contact_am := false ;
5344: LD_ADDR_EXP 16
5348: PUSH
5349: LD_INT 0
5351: ST_TO_ADDR
// patrol := [ ] ;
5352: LD_ADDR_EXP 17
5356: PUSH
5357: EMPTY
5358: ST_TO_ADDR
// gamma_towers := [ ] ;
5359: LD_ADDR_EXP 18
5363: PUSH
5364: EMPTY
5365: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5366: LD_INT 25
5368: PPUSH
5369: LD_STRING gamma
5371: PPUSH
5372: CALL_OW 500
// uc_side := 1 ;
5376: LD_ADDR_OWVAR 20
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// uc_nation := 1 ;
5384: LD_ADDR_OWVAR 21
5388: PUSH
5389: LD_INT 1
5391: ST_TO_ADDR
// hc_importance := 0 ;
5392: LD_ADDR_OWVAR 32
5396: PUSH
5397: LD_INT 0
5399: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5400: LD_ADDR_OWVAR 26
5404: PUSH
5405: LD_STRING Jeremy Sikorski
5407: ST_TO_ADDR
// hc_gallery := us ;
5408: LD_ADDR_OWVAR 33
5412: PUSH
5413: LD_STRING us
5415: ST_TO_ADDR
// hc_face_number := 19 ;
5416: LD_ADDR_OWVAR 34
5420: PUSH
5421: LD_INT 19
5423: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5424: LD_ADDR_OWVAR 31
5428: PUSH
5429: LD_VAR 0 5
5433: PPUSH
5434: LD_VAR 0 5
5438: PUSH
5439: LD_INT 2
5441: PLUS
5442: PPUSH
5443: CALL_OW 12
5447: PUSH
5448: LD_INT 4
5450: PUSH
5451: LD_INT 6
5453: PUSH
5454: LD_INT 3
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: ST_TO_ADDR
// hc_sex := sex_male ;
5463: LD_ADDR_OWVAR 27
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// hc_class := 1 ;
5471: LD_ADDR_OWVAR 28
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5479: LD_ADDR_OWVAR 29
5483: PUSH
5484: LD_INT 10
5486: PUSH
5487: LD_INT 11
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: ST_TO_ADDR
// sikorski := CreateHuman ;
5494: LD_ADDR_EXP 9
5498: PUSH
5499: CALL_OW 44
5503: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5504: LD_ADDR_OWVAR 26
5508: PUSH
5509: LD_STRING Lucy Donaldson
5511: ST_TO_ADDR
// hc_gallery := us ;
5512: LD_ADDR_OWVAR 33
5516: PUSH
5517: LD_STRING us
5519: ST_TO_ADDR
// hc_face_number := 2 ;
5520: LD_ADDR_OWVAR 34
5524: PUSH
5525: LD_INT 2
5527: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5528: LD_ADDR_OWVAR 31
5532: PUSH
5533: LD_VAR 0 5
5537: PPUSH
5538: LD_VAR 0 5
5542: PUSH
5543: LD_INT 2
5545: PLUS
5546: PPUSH
5547: CALL_OW 12
5551: PUSH
5552: LD_INT 6
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: ST_TO_ADDR
// hc_sex := sex_female ;
5567: LD_ADDR_OWVAR 27
5571: PUSH
5572: LD_INT 2
5574: ST_TO_ADDR
// hc_class := 1 ;
5575: LD_ADDR_OWVAR 28
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// donald := CreateHuman ;
5583: LD_ADDR_EXP 13
5587: PUSH
5588: CALL_OW 44
5592: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5593: LD_ADDR_OWVAR 26
5597: PUSH
5598: LD_STRING Peter Van Houten
5600: ST_TO_ADDR
// hc_gallery := us ;
5601: LD_ADDR_OWVAR 33
5605: PUSH
5606: LD_STRING us
5608: ST_TO_ADDR
// hc_face_number := 16 ;
5609: LD_ADDR_OWVAR 34
5613: PUSH
5614: LD_INT 16
5616: ST_TO_ADDR
// hc_sex := sex_male ;
5617: LD_ADDR_OWVAR 27
5621: PUSH
5622: LD_INT 1
5624: ST_TO_ADDR
// van := CreateHuman ;
5625: LD_ADDR_EXP 14
5629: PUSH
5630: CALL_OW 44
5634: ST_TO_ADDR
// hc_importance := 0 ;
5635: LD_ADDR_OWVAR 32
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// case dif of 1 :
5643: LD_EXP 1
5647: PUSH
5648: LD_INT 1
5650: DOUBLE
5651: EQUAL
5652: IFTRUE 5656
5654: GO 5667
5656: POP
// lw = 1 ; 2 :
5657: LD_ADDR_VAR 0 8
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
5665: GO 5714
5667: LD_INT 2
5669: DOUBLE
5670: EQUAL
5671: IFTRUE 5675
5673: GO 5694
5675: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5676: LD_ADDR_VAR 0 8
5680: PUSH
5681: LD_INT 1
5683: PPUSH
5684: LD_INT 2
5686: PPUSH
5687: CALL_OW 12
5691: ST_TO_ADDR
5692: GO 5714
5694: LD_INT 3
5696: DOUBLE
5697: EQUAL
5698: IFTRUE 5702
5700: GO 5713
5702: POP
// lw = 2 ; end ;
5703: LD_ADDR_VAR 0 8
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
5711: GO 5714
5713: POP
// case lw of 1 :
5714: LD_VAR 0 8
5718: PUSH
5719: LD_INT 1
5721: DOUBLE
5722: EQUAL
5723: IFTRUE 5727
5725: GO 5742
5727: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5728: LD_EXP 13
5732: PPUSH
5733: LD_INT 25
5735: PPUSH
5736: CALL_OW 52
5740: GO 5766
5742: LD_INT 2
5744: DOUBLE
5745: EQUAL
5746: IFTRUE 5750
5748: GO 5765
5750: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5751: LD_EXP 14
5755: PPUSH
5756: LD_INT 25
5758: PPUSH
5759: CALL_OW 52
5763: GO 5766
5765: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 30
5783: PUSH
5784: LD_INT 32
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PPUSH
5795: CALL_OW 69
5799: PUSH
5800: FOR_IN
5801: IFFALSE 5855
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5803: LD_INT 1
5805: PPUSH
5806: LD_VAR 0 5
5810: PPUSH
5811: CALL 734 0 2
5815: PPUSH
5816: LD_VAR 0 2
5820: PPUSH
5821: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5825: LD_VAR 0 2
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_INT 1
5837: PPUSH
5838: LD_VAR 0 6
5842: PPUSH
5843: CALL_OW 12
5847: ARRAY
5848: PPUSH
5849: CALL_OW 431
// end ;
5853: GO 5800
5855: POP
5856: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5857: LD_ADDR_VAR 0 7
5861: PUSH
5862: LD_INT 22
5864: PUSH
5865: LD_INT 1
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PUSH
5872: LD_INT 2
5874: PUSH
5875: LD_INT 25
5877: PUSH
5878: LD_INT 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 5
5887: PUSH
5888: EMPTY
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PPUSH
5900: CALL_OW 69
5904: ST_TO_ADDR
// for i = 1 to sol do
5905: LD_ADDR_VAR 0 2
5909: PUSH
5910: DOUBLE
5911: LD_INT 1
5913: DEC
5914: ST_TO_ADDR
5915: LD_VAR 0 7
5919: PUSH
5920: FOR_TO
5921: IFFALSE 5943
// SetTag ( sol [ i ] , 1 ) ;
5923: LD_VAR 0 7
5927: PUSH
5928: LD_VAR 0 2
5932: ARRAY
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL_OW 109
5941: GO 5920
5943: POP
5944: POP
// for i = 1 to 3 do
5945: LD_ADDR_VAR 0 2
5949: PUSH
5950: DOUBLE
5951: LD_INT 1
5953: DEC
5954: ST_TO_ADDR
5955: LD_INT 3
5957: PUSH
5958: FOR_TO
5959: IFFALSE 5983
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5961: LD_INT 3
5963: PPUSH
5964: LD_VAR 0 5
5968: PPUSH
5969: CALL 734 0 2
5973: PPUSH
5974: LD_INT 56
5976: PPUSH
5977: CALL_OW 52
5981: GO 5958
5983: POP
5984: POP
// for i = 1 to 6 do
5985: LD_ADDR_VAR 0 2
5989: PUSH
5990: DOUBLE
5991: LD_INT 1
5993: DEC
5994: ST_TO_ADDR
5995: LD_INT 6
5997: PUSH
5998: FOR_TO
5999: IFFALSE 6023
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
6001: LD_INT 3
6003: PPUSH
6004: LD_VAR 0 5
6008: PPUSH
6009: CALL 734 0 2
6013: PPUSH
6014: LD_INT 26
6016: PPUSH
6017: CALL_OW 52
6021: GO 5998
6023: POP
6024: POP
// for i = 1 to 5 do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: DOUBLE
6031: LD_INT 1
6033: DEC
6034: ST_TO_ADDR
6035: LD_INT 5
6037: PUSH
6038: FOR_TO
6039: IFFALSE 6066
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6041: LD_INT 2
6043: PPUSH
6044: LD_VAR 0 5
6048: PPUSH
6049: CALL 734 0 2
6053: PPUSH
6054: LD_INT 7
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 49
6064: GO 6038
6066: POP
6067: POP
// for i = 1 to 3 do
6068: LD_ADDR_VAR 0 2
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 3
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6106
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6084: LD_INT 4
6086: PPUSH
6087: LD_VAR 0 5
6091: PPUSH
6092: CALL 734 0 2
6096: PPUSH
6097: LD_INT 46
6099: PPUSH
6100: CALL_OW 52
6104: GO 6081
6106: POP
6107: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_INT 22
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 30
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 69
6141: PUSH
6142: FOR_IN
6143: IFFALSE 6257
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6145: LD_INT 5
6147: PPUSH
6148: LD_VAR 0 5
6152: PPUSH
6153: CALL 734 0 2
6157: PPUSH
6158: LD_VAR 0 2
6162: PPUSH
6163: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6167: LD_INT 5
6169: PPUSH
6170: LD_VAR 0 5
6174: PPUSH
6175: CALL 734 0 2
6179: PPUSH
6180: LD_VAR 0 2
6184: PPUSH
6185: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6189: LD_INT 1
6191: PPUSH
6192: LD_VAR 0 5
6196: PPUSH
6197: CALL 734 0 2
6201: PPUSH
6202: LD_VAR 0 2
6206: PPUSH
6207: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6211: LD_INT 1
6213: PPUSH
6214: LD_VAR 0 5
6218: PPUSH
6219: CALL 734 0 2
6223: PPUSH
6224: LD_VAR 0 2
6228: PPUSH
6229: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6233: LD_INT 1
6235: PPUSH
6236: LD_VAR 0 5
6240: PPUSH
6241: CALL 734 0 2
6245: PPUSH
6246: LD_VAR 0 2
6250: PPUSH
6251: CALL_OW 52
// end ;
6255: GO 6142
6257: POP
6258: POP
// if dif > 1 then
6259: LD_EXP 1
6263: PUSH
6264: LD_INT 1
6266: GREATER
6267: IFFALSE 6340
// for i = 1 to ( dif - 1 ) do
6269: LD_ADDR_VAR 0 2
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_EXP 1
6283: PUSH
6284: LD_INT 1
6286: MINUS
6287: PUSH
6288: FOR_TO
6289: IFFALSE 6338
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6291: LD_ADDR_EXP 17
6295: PUSH
6296: LD_EXP 17
6300: PUSH
6301: LD_INT 1
6303: PPUSH
6304: LD_VAR 0 5
6308: PPUSH
6309: CALL 734 0 2
6313: ADD
6314: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6315: LD_EXP 17
6319: PUSH
6320: LD_VAR 0 2
6324: ARRAY
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 49
// end ;
6336: GO 6288
6338: POP
6339: POP
// game_started := true ;
6340: LD_ADDR_EXP 10
6344: PUSH
6345: LD_INT 1
6347: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6348: LD_INT 26
6350: PPUSH
6351: LD_INT 3
6353: PPUSH
6354: LD_INT 2
6356: PPUSH
6357: LD_INT 2
6359: PPUSH
6360: LD_INT 13
6362: PPUSH
6363: CALL_OW 125
// while ( contact_am = false ) do
6367: LD_EXP 16
6371: PUSH
6372: LD_INT 0
6374: EQUAL
6375: IFFALSE 6386
// begin Wait ( 0 0$01 ) ;
6377: LD_INT 35
6379: PPUSH
6380: CALL_OW 67
// end ;
6384: GO 6367
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6386: LD_INT 8400
6388: PUSH
6389: LD_INT 6300
6391: PUSH
6392: LD_INT 5250
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: LD_EXP 1
6404: ARRAY
6405: PPUSH
6406: CALL_OW 67
// case dif of 1 :
6410: LD_EXP 1
6414: PUSH
6415: LD_INT 1
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6423
6421: GO 6598
6423: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6424: LD_INT 26
6426: PPUSH
6427: LD_INT 3
6429: PPUSH
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 2
6435: PPUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 4
6441: PUSH
6442: LD_INT 5
6444: PUSH
6445: LD_INT 5
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 1
6456: PPUSH
6457: LD_INT 4
6459: PPUSH
6460: CALL_OW 12
6464: ARRAY
6465: PPUSH
6466: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6470: LD_INT 26
6472: PPUSH
6473: LD_INT 3
6475: PPUSH
6476: LD_INT 1
6478: PPUSH
6479: LD_INT 2
6481: PPUSH
6482: LD_INT 4
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: LD_INT 5
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 1
6498: PPUSH
6499: LD_INT 3
6501: PPUSH
6502: CALL_OW 12
6506: ARRAY
6507: PPUSH
6508: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6512: LD_INT 26
6514: PPUSH
6515: LD_INT 3
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 5
6529: PUSH
6530: LD_INT 5
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 1
6540: PPUSH
6541: LD_INT 3
6543: PPUSH
6544: CALL_OW 12
6548: ARRAY
6549: PPUSH
6550: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6554: LD_INT 26
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_INT 2
6565: PPUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 1
6582: PPUSH
6583: LD_INT 3
6585: PPUSH
6586: CALL_OW 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 185
// end ; 2 :
6596: GO 7125
6598: LD_INT 2
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6819
6606: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6607: LD_INT 26
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 1
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: LD_INT 4
6621: PUSH
6622: LD_INT 5
6624: PUSH
6625: LD_INT 5
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 1
6635: PPUSH
6636: LD_INT 3
6638: PPUSH
6639: CALL_OW 12
6643: ARRAY
6644: PPUSH
6645: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6649: LD_INT 26
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_INT 1
6657: PPUSH
6658: LD_INT 2
6660: PPUSH
6661: LD_INT 4
6663: PUSH
6664: LD_INT 5
6666: PUSH
6667: LD_INT 5
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: PUSH
6675: LD_INT 1
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 12
6685: ARRAY
6686: PPUSH
6687: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6691: LD_INT 26
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 1
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: LD_INT 4
6705: PUSH
6706: LD_INT 3
6708: PUSH
6709: LD_INT 5
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 1
6719: PPUSH
6720: LD_INT 3
6722: PPUSH
6723: CALL_OW 12
6727: ARRAY
6728: PPUSH
6729: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6733: LD_INT 26
6735: PPUSH
6736: LD_INT 4
6738: PPUSH
6739: LD_INT 1
6741: PPUSH
6742: LD_INT 2
6744: PPUSH
6745: LD_INT 4
6747: PUSH
6748: LD_INT 5
6750: PUSH
6751: LD_INT 6
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: CALL_OW 12
6769: ARRAY
6770: PPUSH
6771: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6775: LD_INT 26
6777: PPUSH
6778: LD_INT 4
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: LD_INT 2
6786: PPUSH
6787: LD_INT 4
6789: PUSH
6790: LD_INT 6
6792: PUSH
6793: LD_INT 6
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 3
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: PPUSH
6813: CALL_OW 185
// end ; 3 :
6817: GO 7125
6819: LD_INT 3
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 7124
6827: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6828: LD_INT 26
6830: PPUSH
6831: LD_INT 3
6833: PPUSH
6834: LD_INT 1
6836: PPUSH
6837: LD_INT 2
6839: PPUSH
6840: LD_INT 4
6842: PUSH
6843: LD_INT 5
6845: PUSH
6846: LD_INT 5
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 1
6856: PPUSH
6857: LD_INT 3
6859: PPUSH
6860: CALL_OW 12
6864: ARRAY
6865: PPUSH
6866: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6870: LD_INT 26
6872: PPUSH
6873: LD_INT 3
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: LD_INT 2
6881: PPUSH
6882: LD_INT 4
6884: PUSH
6885: LD_INT 5
6887: PUSH
6888: LD_INT 5
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 1
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: CALL_OW 12
6906: ARRAY
6907: PPUSH
6908: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6912: LD_INT 26
6914: PPUSH
6915: LD_INT 3
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_INT 2
6923: PPUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 5
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 1
6940: PPUSH
6941: LD_INT 3
6943: PPUSH
6944: CALL_OW 12
6948: ARRAY
6949: PPUSH
6950: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6954: LD_INT 26
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_INT 2
6965: PPUSH
6966: LD_INT 4
6968: PUSH
6969: LD_INT 5
6971: PUSH
6972: LD_INT 5
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 1
6982: PPUSH
6983: LD_INT 3
6985: PPUSH
6986: CALL_OW 12
6990: ARRAY
6991: PPUSH
6992: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6996: LD_INT 26
6998: PPUSH
6999: LD_INT 4
7001: PPUSH
7002: LD_INT 1
7004: PPUSH
7005: LD_INT 2
7007: PPUSH
7008: LD_INT 4
7010: PUSH
7011: LD_INT 6
7013: PUSH
7014: LD_INT 6
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_INT 3
7027: PPUSH
7028: CALL_OW 12
7032: ARRAY
7033: PPUSH
7034: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7038: LD_INT 26
7040: PPUSH
7041: LD_INT 4
7043: PPUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_INT 2
7049: PPUSH
7050: LD_INT 4
7052: PUSH
7053: LD_INT 6
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 3
7069: PPUSH
7070: CALL_OW 12
7074: ARRAY
7075: PPUSH
7076: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7080: LD_INT 26
7082: PPUSH
7083: LD_INT 4
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 2
7091: PPUSH
7092: LD_INT 4
7094: PUSH
7095: LD_INT 6
7097: PUSH
7098: LD_INT 6
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 12
7116: ARRAY
7117: PPUSH
7118: CALL_OW 185
// end ; end ;
7122: GO 7125
7124: POP
// end ;
7125: LD_VAR 0 1
7129: RET
// every 0 0$01 do var i , filter ;
7130: GO 7132
7132: DISABLE
7133: LD_INT 0
7135: PPUSH
7136: PPUSH
// begin enable ;
7137: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7138: LD_INT 22
7140: PUSH
7141: LD_INT 1
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: PUSH
7167: LD_INT 0
7169: GREATER
7170: IFFALSE 7179
// RaiseSailEvent ( 3 ) ;
7172: LD_INT 3
7174: PPUSH
7175: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7179: LD_INT 22
7181: PUSH
7182: LD_INT 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 21
7191: PUSH
7192: LD_INT 3
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 3
7201: PUSH
7202: LD_INT 24
7204: PUSH
7205: LD_INT 1000
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: PPUSH
7221: CALL_OW 69
7225: PUSH
7226: LD_INT 0
7228: GREATER
7229: IFFALSE 7240
// RaiseSailEvent ( 1 ) else
7231: LD_INT 1
7233: PPUSH
7234: CALL_OW 427
7238: GO 7247
// RaiseSailEvent ( 2 ) ;
7240: LD_INT 2
7242: PPUSH
7243: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7247: LD_INT 22
7249: PUSH
7250: LD_INT 1
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 30
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 69
7275: PUSH
7276: LD_INT 0
7278: GREATER
7279: IFFALSE 7288
// RaiseSailEvent ( 4 ) ;
7281: LD_INT 4
7283: PPUSH
7284: CALL_OW 427
// if gamma_towers > 0 then
7288: LD_EXP 18
7292: PUSH
7293: LD_INT 0
7295: GREATER
7296: IFFALSE 7305
// RaiseSailEvent ( 5 ) ;
7298: LD_INT 5
7300: PPUSH
7301: CALL_OW 427
// end ;
7305: PPOPN 2
7307: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7308: GO 7310
7310: DISABLE
7311: LD_INT 0
7313: PPUSH
7314: PPUSH
// begin enable ;
7315: ENABLE
// if new_veh > 0 then
7316: LD_EXP 19
7320: PUSH
7321: LD_INT 0
7323: GREATER
7324: IFFALSE 7511
// while ( new_veh > 0 ) do
7326: LD_EXP 19
7330: PUSH
7331: LD_INT 0
7333: GREATER
7334: IFFALSE 7511
// begin Wait ( 0 0$01 ) ;
7336: LD_INT 35
7338: PPUSH
7339: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7343: LD_INT 26
7345: PPUSH
7346: CALL_OW 461
7350: PUSH
7351: LD_INT 2
7353: EQUAL
7354: IFFALSE 7509
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7356: LD_ADDR_VAR 0 1
7360: PUSH
7361: LD_INT 2
7363: PUSH
7364: LD_INT 3
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_INT 4
7384: PPUSH
7385: CALL_OW 12
7389: ARRAY
7390: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: IN
7406: IFFALSE 7441
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_INT 4
7415: PUSH
7416: LD_INT 5
7418: PUSH
7419: LD_INT 7
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 1
7429: PPUSH
7430: LD_INT 3
7432: PPUSH
7433: CALL_OW 12
7437: ARRAY
7438: ST_TO_ADDR
7439: GO 7472
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7441: LD_ADDR_VAR 0 2
7445: PUSH
7446: LD_INT 5
7448: PUSH
7449: LD_INT 7
7451: PUSH
7452: LD_INT 6
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 1
7462: PPUSH
7463: LD_INT 3
7465: PPUSH
7466: CALL_OW 12
7470: ARRAY
7471: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7472: LD_INT 26
7474: PPUSH
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: LD_INT 2
7485: PPUSH
7486: LD_VAR 0 2
7490: PPUSH
7491: CALL_OW 125
// new_veh := new_veh - 1 ;
7495: LD_ADDR_EXP 19
7499: PUSH
7500: LD_EXP 19
7504: PUSH
7505: LD_INT 1
7507: MINUS
7508: ST_TO_ADDR
// end ; end ;
7509: GO 7326
// end ;
7511: PPOPN 2
7513: END
// every 0 0$01 do var v , filter , am_cmeh ;
7514: GO 7516
7516: DISABLE
7517: LD_INT 0
7519: PPUSH
7520: PPUSH
7521: PPUSH
// begin enable ;
7522: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7523: LD_ADDR_VAR 0 3
7527: PUSH
7528: LD_INT 56
7530: PPUSH
7531: CALL_OW 313
7535: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7536: LD_ADDR_VAR 0 2
7540: PUSH
7541: LD_INT 22
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 33
7553: PUSH
7554: LD_INT 2
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 50
7563: PUSH
7564: EMPTY
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: ST_TO_ADDR
// if filter > 0 then
7580: LD_VAR 0 2
7584: PUSH
7585: LD_INT 0
7587: GREATER
7588: IFFALSE 7656
// begin for v in filter do
7590: LD_ADDR_VAR 0 1
7594: PUSH
7595: LD_VAR 0 2
7599: PUSH
7600: FOR_IN
7601: IFFALSE 7654
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 312
7612: NOT
7613: PUSH
7614: LD_VAR 0 1
7618: PPUSH
7619: CALL_OW 302
7623: AND
7624: IFFALSE 7652
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_VAR 0 3
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_INT 3
7641: PPUSH
7642: CALL_OW 12
7646: ARRAY
7647: PPUSH
7648: CALL_OW 135
// end ;
7652: GO 7600
7654: POP
7655: POP
// end ; end ;
7656: PPOPN 3
7658: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7659: LD_INT 33
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_INT 3
7671: PUSH
7672: LD_INT 34
7674: PUSH
7675: LD_INT 13
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 69
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: LD_INT 5
7700: PUSH
7701: LD_INT 7
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_EXP 1
7713: ARRAY
7714: EQUAL
7715: PUSH
7716: LD_INT 26
7718: PPUSH
7719: CALL_OW 461
7723: PUSH
7724: LD_INT 2
7726: EQUAL
7727: AND
7728: IFFALSE 7939
7730: GO 7732
7732: DISABLE
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
// begin enable ;
7738: ENABLE
// if Sikorski_Ar then
7739: LD_EXP 12
7743: IFFALSE 7820
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7745: LD_ADDR_EXP 11
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: LD_INT 22
7755: PUSH
7756: LD_INT 4
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_INT 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 33
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: LD_INT 34
7788: PUSH
7789: LD_INT 13
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: PPUSH
7813: CALL_OW 69
7817: ST_TO_ADDR
7818: GO 7861
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7820: LD_ADDR_EXP 11
7824: PUSH
7825: LD_INT 33
7827: PUSH
7828: LD_INT 2
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 3
7837: PUSH
7838: LD_INT 34
7840: PUSH
7841: LD_INT 13
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 69
7860: ST_TO_ADDR
// repeat begin for un in SForce do
7861: LD_ADDR_VAR 0 2
7865: PUSH
7866: LD_EXP 11
7870: PUSH
7871: FOR_IN
7872: IFFALSE 7927
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7874: LD_ADDR_VAR 0 3
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PPUSH
7889: CALL_OW 69
7893: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7894: LD_VAR 0 2
7898: PPUSH
7899: LD_VAR 0 3
7903: PPUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: CALL_OW 74
7913: PPUSH
7914: CALL_OW 115
// Wait ( 0 0$01 ) ;
7918: LD_INT 35
7920: PPUSH
7921: CALL_OW 67
// end ;
7925: GO 7871
7927: POP
7928: POP
// end until SForce = 0 ;
7929: LD_EXP 11
7933: PUSH
7934: LD_INT 0
7936: EQUAL
7937: IFFALSE 7861
// end ;
7939: PPOPN 3
7941: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7949: LD_ADDR_VAR 0 6
7953: PUSH
7954: LD_INT 14
7956: PPUSH
7957: EMPTY
7958: PPUSH
7959: CALL_OW 70
7963: ST_TO_ADDR
// if tmp then
7964: LD_VAR 0 6
7968: IFFALSE 8002
// for i in tmp do
7970: LD_ADDR_VAR 0 3
7974: PUSH
7975: LD_VAR 0 6
7979: PUSH
7980: FOR_IN
7981: IFFALSE 8000
// ComMoveXY ( i , 42 , 23 ) ;
7983: LD_VAR 0 3
7987: PPUSH
7988: LD_INT 42
7990: PPUSH
7991: LD_INT 23
7993: PPUSH
7994: CALL_OW 111
7998: GO 7980
8000: POP
8001: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
8002: LD_INT 14
8004: PPUSH
8005: LD_INT 1
8007: PPUSH
8008: CALL_OW 286
// uc_side := 4 ;
8012: LD_ADDR_OWVAR 20
8016: PUSH
8017: LD_INT 4
8019: ST_TO_ADDR
// uc_nation := 1 ;
8020: LD_ADDR_OWVAR 21
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8028: LD_ADDR_OWVAR 37
8032: PUSH
8033: LD_INT 4
8035: ST_TO_ADDR
// vc_control := control_manual ;
8036: LD_ADDR_OWVAR 38
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// vc_engine := engine_combustion ;
8044: LD_ADDR_OWVAR 39
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8052: LD_ADDR_OWVAR 40
8056: PUSH
8057: LD_INT 4
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: LD_INT 7
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: PUSH
8071: LD_EXP 1
8075: ARRAY
8076: ST_TO_ADDR
// veh := CreateVehicle ;
8077: LD_ADDR_VAR 0 5
8081: PUSH
8082: CALL_OW 45
8086: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8087: LD_VAR 0 5
8091: PPUSH
8092: LD_INT 2
8094: PPUSH
8095: LD_INT 0
8097: PPUSH
8098: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8102: LD_EXP 9
8106: PPUSH
8107: LD_VAR 0 5
8111: PPUSH
8112: CALL_OW 52
// SetMark ( veh , 1 ) ;
8116: LD_VAR 0 5
8120: PPUSH
8121: LD_INT 1
8123: PPUSH
8124: CALL_OW 242
// while ( num > 0 ) do
8128: LD_VAR 0 1
8132: PUSH
8133: LD_INT 0
8135: GREATER
8136: IFFALSE 8303
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8138: LD_INT 3
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 4
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: PUSH
8156: LD_EXP 1
8160: PPUSH
8161: LD_INT 4
8163: PPUSH
8164: CALL_OW 12
8168: ARRAY
8169: PPUSH
8170: LD_INT 1
8172: PPUSH
8173: LD_INT 4
8175: PUSH
8176: LD_INT 5
8178: PUSH
8179: LD_INT 5
8181: PUSH
8182: LD_INT 7
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: LD_EXP 1
8198: PUSH
8199: LD_INT 1
8201: PLUS
8202: PPUSH
8203: CALL_OW 12
8207: ARRAY
8208: PPUSH
8209: LD_INT 11
8211: PPUSH
8212: LD_INT 2
8214: PPUSH
8215: LD_INT 5
8217: PUSH
8218: LD_INT 6
8220: PUSH
8221: LD_INT 7
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: PUSH
8229: LD_EXP 1
8233: ARRAY
8234: PPUSH
8235: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8239: LD_ADDR_VAR 0 4
8243: PUSH
8244: LD_INT 22
8246: PUSH
8247: LD_INT 4
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 69
8258: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8259: LD_VAR 0 4
8263: PUSH
8264: LD_VAR 0 4
8268: ARRAY
8269: PPUSH
8270: LD_INT 36
8272: PPUSH
8273: LD_INT 18
8275: PPUSH
8276: CALL_OW 111
// Wait ( 0 0$02 ) ;
8280: LD_INT 70
8282: PPUSH
8283: CALL_OW 67
// num := num - 1 ;
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_VAR 0 1
8296: PUSH
8297: LD_INT 1
8299: MINUS
8300: ST_TO_ADDR
// end ;
8301: GO 8128
// end ;
8303: LD_VAR 0 2
8307: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8308: LD_EXP 17
8312: PUSH
8313: LD_INT 0
8315: GREATER
8316: IFFALSE 8585
8318: GO 8320
8320: DISABLE
8321: LD_INT 0
8323: PPUSH
// begin enable ;
8324: ENABLE
// for i = 1 to patrol do
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: DOUBLE
8331: LD_INT 1
8333: DEC
8334: ST_TO_ADDR
8335: LD_EXP 17
8339: PUSH
8340: FOR_TO
8341: IFFALSE 8583
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8343: LD_EXP 17
8347: PUSH
8348: LD_VAR 0 1
8352: ARRAY
8353: PUSH
8354: LD_EXP 17
8358: PUSH
8359: LD_VAR 0 1
8363: ARRAY
8364: PPUSH
8365: CALL_OW 300
8369: AND
8370: PUSH
8371: LD_EXP 17
8375: PUSH
8376: LD_VAR 0 1
8380: ARRAY
8381: PPUSH
8382: CALL_OW 314
8386: NOT
8387: AND
8388: IFFALSE 8538
// case i of 1 :
8390: LD_VAR 0 1
8394: PUSH
8395: LD_INT 1
8397: DOUBLE
8398: EQUAL
8399: IFTRUE 8403
8401: GO 8466
8403: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8404: LD_EXP 17
8408: PUSH
8409: LD_VAR 0 1
8413: ARRAY
8414: PPUSH
8415: LD_INT 53
8417: PPUSH
8418: LD_INT 91
8420: PPUSH
8421: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8425: LD_EXP 17
8429: PUSH
8430: LD_VAR 0 1
8434: ARRAY
8435: PPUSH
8436: LD_INT 245
8438: PPUSH
8439: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8443: LD_EXP 17
8447: PUSH
8448: LD_VAR 0 1
8452: ARRAY
8453: PPUSH
8454: LD_INT 24
8456: PPUSH
8457: LD_INT 26
8459: PPUSH
8460: CALL_OW 171
// end ; 2 :
8464: GO 8538
8466: LD_INT 2
8468: DOUBLE
8469: EQUAL
8470: IFTRUE 8474
8472: GO 8537
8474: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8475: LD_EXP 17
8479: PUSH
8480: LD_VAR 0 1
8484: ARRAY
8485: PPUSH
8486: LD_INT 83
8488: PPUSH
8489: LD_INT 57
8491: PPUSH
8492: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8496: LD_EXP 17
8500: PUSH
8501: LD_VAR 0 1
8505: ARRAY
8506: PPUSH
8507: LD_INT 245
8509: PPUSH
8510: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8514: LD_EXP 17
8518: PUSH
8519: LD_VAR 0 1
8523: ARRAY
8524: PPUSH
8525: LD_INT 47
8527: PPUSH
8528: LD_INT 53
8530: PPUSH
8531: CALL_OW 171
// end ; end ;
8535: GO 8538
8537: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8538: LD_EXP 17
8542: PUSH
8543: LD_VAR 0 1
8547: ARRAY
8548: PPUSH
8549: CALL_OW 256
8553: PUSH
8554: LD_INT 1000
8556: LESS
8557: IFFALSE 8581
// patrol := patrol diff patrol [ i ] ;
8559: LD_ADDR_EXP 17
8563: PUSH
8564: LD_EXP 17
8568: PUSH
8569: LD_EXP 17
8573: PUSH
8574: LD_VAR 0 1
8578: ARRAY
8579: DIFF
8580: ST_TO_ADDR
// end ;
8581: GO 8340
8583: POP
8584: POP
// end ;
8585: PPOPN 1
8587: END
// every 0 0$10 do
8588: GO 8590
8590: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8591: LD_INT 42000
8593: PUSH
8594: LD_INT 37800
8596: PUSH
8597: LD_INT 33600
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: PUSH
8605: LD_EXP 1
8609: ARRAY
8610: PPUSH
8611: CALL_OW 67
// if not contact_am then
8615: LD_EXP 16
8619: NOT
8620: IFFALSE 8630
// contact_am := true ;
8622: LD_ADDR_EXP 16
8626: PUSH
8627: LD_INT 1
8629: ST_TO_ADDR
// end ; end_of_file
8630: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8631: LD_INT 0
8633: PPUSH
// comp_tested := false ;
8634: LD_ADDR_EXP 22
8638: PUSH
8639: LD_INT 0
8641: ST_TO_ADDR
// sikorski_run := false ;
8642: LD_ADDR_EXP 23
8646: PUSH
8647: LD_INT 0
8649: ST_TO_ADDR
// InGameOn ;
8650: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8654: LD_INT 5
8656: PPUSH
8657: LD_INT 4
8659: PPUSH
8660: CALL_OW 86
// wait ( 0 0$2 ) ;
8664: LD_INT 70
8666: PPUSH
8667: CALL_OW 67
// CenterOnUnits ( commander ) ;
8671: LD_EXP 3
8675: PPUSH
8676: CALL_OW 85
// wait ( 0 0$01 ) ;
8680: LD_INT 35
8682: PPUSH
8683: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8687: LD_EXP 2
8691: PPUSH
8692: LD_STRING Dpop1
8694: PPUSH
8695: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8699: LD_EXP 3
8703: PPUSH
8704: LD_STRING Dcomm1
8706: PPUSH
8707: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8711: LD_EXP 2
8715: PPUSH
8716: LD_STRING Dpop2
8718: PPUSH
8719: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8723: LD_EXP 3
8727: PPUSH
8728: LD_STRING Dcomm2
8730: PPUSH
8731: CALL_OW 88
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8739: LD_STRING T1
8741: PPUSH
8742: CALL_OW 337
// end ;
8746: LD_VAR 0 1
8750: RET
// every 0 0$01 trigger timer > 2 2$01 do
8751: LD_EXP 24
8755: PUSH
8756: LD_INT 4235
8758: GREATER
8759: IFFALSE 8776
8761: GO 8763
8763: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8764: LD_EXP 5
8768: PPUSH
8769: LD_STRING DKap1
8771: PPUSH
8772: CALL_OW 94
// end ;
8776: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8777: LD_EXP 24
8781: PUSH
8782: LD_INT 46200
8784: PUSH
8785: LD_INT 52500
8787: PUSH
8788: LD_INT 63000
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: PUSH
8796: LD_EXP 1
8800: ARRAY
8801: GREATER
8802: IFFALSE 9169
8804: GO 8806
8806: DISABLE
8807: LD_INT 0
8809: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8810: LD_EXP 5
8814: PPUSH
8815: LD_STRING DKap2
8817: PPUSH
8818: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8822: LD_INT 10
8824: PPUSH
8825: CALL_OW 67
// Say ( commander , Dcommk ) ;
8829: LD_EXP 3
8833: PPUSH
8834: LD_STRING Dcommk
8836: PPUSH
8837: CALL_OW 88
// Wait ( 0 0$44 ) ;
8841: LD_INT 1540
8843: PPUSH
8844: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8848: LD_EXP 5
8852: PPUSH
8853: LD_INT 3
8855: PPUSH
8856: LD_INT 0
8858: PPUSH
8859: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8863: LD_EXP 5
8867: PPUSH
8868: CALL_OW 87
// Wait ( 0 0$10 ) ;
8872: LD_INT 350
8874: PPUSH
8875: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8879: LD_INT 6
8881: PUSH
8882: LD_INT 7
8884: PUSH
8885: LD_INT 8
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: PUSH
8893: LD_EXP 1
8897: ARRAY
8898: PPUSH
8899: CALL 7942 0 1
// Wait ( 2 2$00 ) ;
8903: LD_INT 4200
8905: PPUSH
8906: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8910: LD_INT 33
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: LD_INT 34
8925: PUSH
8926: LD_INT 13
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 69
8945: PUSH
8946: LD_INT 3
8948: LESS
8949: IFFALSE 8960
// Wait ( 0 0$01 ) ;
8951: LD_INT 35
8953: PPUSH
8954: CALL_OW 67
8958: GO 8910
// uc_side := 4 ;
8960: LD_ADDR_OWVAR 20
8964: PUSH
8965: LD_INT 4
8967: ST_TO_ADDR
// uc_nation := 1 ;
8968: LD_ADDR_OWVAR 21
8972: PUSH
8973: LD_INT 1
8975: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: DOUBLE
8982: LD_INT 1
8984: DEC
8985: ST_TO_ADDR
8986: LD_INT 4
8988: PUSH
8989: LD_INT 5
8991: PUSH
8992: LD_INT 6
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: LD_EXP 1
9004: ARRAY
9005: PUSH
9006: FOR_TO
9007: IFFALSE 9049
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
9009: LD_INT 1
9011: PPUSH
9012: LD_INT 5
9014: PUSH
9015: LD_INT 6
9017: PUSH
9018: LD_INT 7
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: PUSH
9026: LD_EXP 1
9030: ARRAY
9031: PPUSH
9032: CALL 734 0 2
9036: PPUSH
9037: LD_INT 4
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL_OW 49
9047: GO 9006
9049: POP
9050: POP
// sikorski_ar := true ;
9051: LD_ADDR_EXP 12
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9059: LD_EXP 9
9063: PPUSH
9064: LD_STRING DSik1
9066: PPUSH
9067: CALL_OW 94
// Wait ( 0 0$30 ) ;
9071: LD_INT 1050
9073: PPUSH
9074: CALL_OW 67
// uc_side := 4 ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_INT 4
9085: ST_TO_ADDR
// uc_nation := 1 ;
9086: LD_ADDR_OWVAR 21
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9094: LD_ADDR_VAR 0 1
9098: PUSH
9099: DOUBLE
9100: LD_INT 1
9102: DEC
9103: ST_TO_ADDR
9104: LD_INT 3
9106: PUSH
9107: LD_INT 4
9109: PUSH
9110: LD_INT 4
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: LD_EXP 1
9122: ARRAY
9123: PUSH
9124: FOR_TO
9125: IFFALSE 9167
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9127: LD_INT 1
9129: PPUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: LD_EXP 1
9148: ARRAY
9149: PPUSH
9150: CALL 734 0 2
9154: PPUSH
9155: LD_INT 13
9157: PPUSH
9158: LD_INT 0
9160: PPUSH
9161: CALL_OW 49
9165: GO 9124
9167: POP
9168: POP
// end ;
9169: PPOPN 1
9171: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9172: LD_EXP 9
9176: PPUSH
9177: CALL_OW 256
9181: PUSH
9182: LD_INT 650
9184: LESS
9185: IFFALSE 9267
9187: GO 9189
9189: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9190: LD_EXP 9
9194: PPUSH
9195: LD_STRING DSik2
9197: PPUSH
9198: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9202: LD_EXP 9
9206: PPUSH
9207: CALL_OW 300
9211: IFFALSE 9267
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9213: LD_EXP 9
9217: PPUSH
9218: LD_INT 2
9220: PPUSH
9221: CALL_OW 113
// Wait ( 0 0$01 ) ;
9225: LD_INT 35
9227: PPUSH
9228: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9232: LD_EXP 9
9236: PPUSH
9237: LD_INT 2
9239: PPUSH
9240: CALL_OW 308
9244: IFFALSE 9265
// begin RemoveUnit ( sikorski ) ;
9246: LD_EXP 9
9250: PPUSH
9251: CALL_OW 64
// break ;
9255: GO 9267
// sikorski_run := true ;
9257: LD_ADDR_EXP 23
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// end ; end ;
9265: GO 9202
// end ;
9267: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9268: LD_EXP 9
9272: PPUSH
9273: CALL_OW 256
9277: PUSH
9278: LD_INT 1000
9280: LESS
9281: IFFALSE 9298
9283: GO 9285
9285: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9286: LD_EXP 9
9290: PPUSH
9291: LD_STRING DSkik3
9293: PPUSH
9294: CALL_OW 88
9298: END
// every 1 1$45 + 0 0$15 do
9299: GO 9301
9301: DISABLE
// begin enable ;
9302: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9303: LD_INT 1
9305: PPUSH
9306: LD_INT 5
9308: PPUSH
9309: CALL_OW 12
9313: PPUSH
9314: LD_INT 8
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9324: LD_INT 350
9326: PPUSH
9327: LD_INT 1295
9329: PPUSH
9330: CALL_OW 12
9334: PPUSH
9335: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9339: LD_INT 1
9341: PPUSH
9342: LD_INT 5
9344: PPUSH
9345: CALL_OW 12
9349: PPUSH
9350: LD_INT 1
9352: PPUSH
9353: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9357: LD_INT 350
9359: PPUSH
9360: LD_INT 1050
9362: PPUSH
9363: CALL_OW 12
9367: PPUSH
9368: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9372: LD_EXP 24
9376: PUSH
9377: LD_INT 25200
9379: PUSH
9380: LD_INT 23100
9382: PUSH
9383: LD_INT 21000
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_EXP 1
9395: ARRAY
9396: LESSEQUAL
9397: IFFALSE 9420
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9399: LD_INT 1
9401: PPUSH
9402: LD_INT 5
9404: PPUSH
9405: CALL_OW 12
9409: PPUSH
9410: LD_INT 8
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: CALL_OW 55
// end ;
9420: END
// export timer ; every 1 do
9421: GO 9423
9423: DISABLE
// timer := 0 0$00 ;
9424: LD_ADDR_EXP 24
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
9432: END
// every 0 0$01 do
9433: GO 9435
9435: DISABLE
// begin enable ;
9436: ENABLE
// Display_Strings := [ #tick , timer ] ;
9437: LD_ADDR_OWVAR 47
9441: PUSH
9442: LD_STRING #tick
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9454: LD_ADDR_EXP 24
9458: PUSH
9459: LD_EXP 24
9463: PUSH
9464: LD_INT 35
9466: PLUS
9467: ST_TO_ADDR
// end ; end_of_file end_of_file
9468: END
// export globalGameSaveCounter ; every 0 0$1 do
9469: GO 9471
9471: DISABLE
// begin enable ;
9472: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9473: LD_STRING updateTimer(
9475: PUSH
9476: LD_OWVAR 1
9480: STR
9481: PUSH
9482: LD_STRING );
9484: STR
9485: PPUSH
9486: CALL_OW 559
// end ;
9490: END
// every 0 0$1 do
9491: GO 9493
9493: DISABLE
// begin globalGameSaveCounter := 0 ;
9494: LD_ADDR_EXP 25
9498: PUSH
9499: LD_INT 0
9501: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
9502: LD_STRING setGameSaveCounter(0)
9504: PPUSH
9505: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
9509: LD_STRING initStreamRollete();
9511: PPUSH
9512: CALL_OW 559
// InitStreamMode ;
9516: CALL 10842 0 0
// DefineStreamItems ( false ) ;
9520: LD_INT 0
9522: PPUSH
9523: CALL 11306 0 1
// end ;
9527: END
// export function SOS_MapStart ( ) ; begin
9528: LD_INT 0
9530: PPUSH
// if streamModeActive then
9531: LD_EXP 26
9535: IFFALSE 9544
// DefineStreamItems ( true ) ;
9537: LD_INT 1
9539: PPUSH
9540: CALL 11306 0 1
// UpdateLuaVariables ( ) ;
9544: CALL 9561 0 0
// UpdateFactoryWaypoints ( ) ;
9548: CALL 24175 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9552: CALL 24432 0 0
// end ;
9556: LD_VAR 0 1
9560: RET
// function UpdateLuaVariables ( ) ; begin
9561: LD_INT 0
9563: PPUSH
// if globalGameSaveCounter then
9564: LD_EXP 25
9568: IFFALSE 9602
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
9570: LD_ADDR_EXP 25
9574: PUSH
9575: LD_EXP 25
9579: PPUSH
9580: CALL 68213 0 1
9584: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9585: LD_STRING setGameSaveCounter(
9587: PUSH
9588: LD_EXP 25
9592: STR
9593: PUSH
9594: LD_STRING )
9596: STR
9597: PPUSH
9598: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9602: LD_STRING setGameDifficulty(
9604: PUSH
9605: LD_OWVAR 67
9609: STR
9610: PUSH
9611: LD_STRING )
9613: STR
9614: PPUSH
9615: CALL_OW 559
// end ;
9619: LD_VAR 0 1
9623: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9624: LD_INT 0
9626: PPUSH
// if p2 = stream_mode then
9627: LD_VAR 0 2
9631: PUSH
9632: LD_INT 100
9634: EQUAL
9635: IFFALSE 10638
// begin if not StreamModeActive then
9637: LD_EXP 26
9641: NOT
9642: IFFALSE 9652
// StreamModeActive := true ;
9644: LD_ADDR_EXP 26
9648: PUSH
9649: LD_INT 1
9651: ST_TO_ADDR
// if p3 = 0 then
9652: LD_VAR 0 3
9656: PUSH
9657: LD_INT 0
9659: EQUAL
9660: IFFALSE 9666
// InitStreamMode ;
9662: CALL 10842 0 0
// if p3 = 1 then
9666: LD_VAR 0 3
9670: PUSH
9671: LD_INT 1
9673: EQUAL
9674: IFFALSE 9684
// sRocket := true ;
9676: LD_ADDR_EXP 31
9680: PUSH
9681: LD_INT 1
9683: ST_TO_ADDR
// if p3 = 2 then
9684: LD_VAR 0 3
9688: PUSH
9689: LD_INT 2
9691: EQUAL
9692: IFFALSE 9702
// sSpeed := true ;
9694: LD_ADDR_EXP 30
9698: PUSH
9699: LD_INT 1
9701: ST_TO_ADDR
// if p3 = 3 then
9702: LD_VAR 0 3
9706: PUSH
9707: LD_INT 3
9709: EQUAL
9710: IFFALSE 9720
// sEngine := true ;
9712: LD_ADDR_EXP 32
9716: PUSH
9717: LD_INT 1
9719: ST_TO_ADDR
// if p3 = 4 then
9720: LD_VAR 0 3
9724: PUSH
9725: LD_INT 4
9727: EQUAL
9728: IFFALSE 9738
// sSpec := true ;
9730: LD_ADDR_EXP 29
9734: PUSH
9735: LD_INT 1
9737: ST_TO_ADDR
// if p3 = 5 then
9738: LD_VAR 0 3
9742: PUSH
9743: LD_INT 5
9745: EQUAL
9746: IFFALSE 9756
// sLevel := true ;
9748: LD_ADDR_EXP 33
9752: PUSH
9753: LD_INT 1
9755: ST_TO_ADDR
// if p3 = 6 then
9756: LD_VAR 0 3
9760: PUSH
9761: LD_INT 6
9763: EQUAL
9764: IFFALSE 9774
// sArmoury := true ;
9766: LD_ADDR_EXP 34
9770: PUSH
9771: LD_INT 1
9773: ST_TO_ADDR
// if p3 = 7 then
9774: LD_VAR 0 3
9778: PUSH
9779: LD_INT 7
9781: EQUAL
9782: IFFALSE 9792
// sRadar := true ;
9784: LD_ADDR_EXP 35
9788: PUSH
9789: LD_INT 1
9791: ST_TO_ADDR
// if p3 = 8 then
9792: LD_VAR 0 3
9796: PUSH
9797: LD_INT 8
9799: EQUAL
9800: IFFALSE 9810
// sBunker := true ;
9802: LD_ADDR_EXP 36
9806: PUSH
9807: LD_INT 1
9809: ST_TO_ADDR
// if p3 = 9 then
9810: LD_VAR 0 3
9814: PUSH
9815: LD_INT 9
9817: EQUAL
9818: IFFALSE 9828
// sHack := true ;
9820: LD_ADDR_EXP 37
9824: PUSH
9825: LD_INT 1
9827: ST_TO_ADDR
// if p3 = 10 then
9828: LD_VAR 0 3
9832: PUSH
9833: LD_INT 10
9835: EQUAL
9836: IFFALSE 9846
// sFire := true ;
9838: LD_ADDR_EXP 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// if p3 = 11 then
9846: LD_VAR 0 3
9850: PUSH
9851: LD_INT 11
9853: EQUAL
9854: IFFALSE 9864
// sRefresh := true ;
9856: LD_ADDR_EXP 39
9860: PUSH
9861: LD_INT 1
9863: ST_TO_ADDR
// if p3 = 12 then
9864: LD_VAR 0 3
9868: PUSH
9869: LD_INT 12
9871: EQUAL
9872: IFFALSE 9882
// sExp := true ;
9874: LD_ADDR_EXP 40
9878: PUSH
9879: LD_INT 1
9881: ST_TO_ADDR
// if p3 = 13 then
9882: LD_VAR 0 3
9886: PUSH
9887: LD_INT 13
9889: EQUAL
9890: IFFALSE 9900
// sDepot := true ;
9892: LD_ADDR_EXP 41
9896: PUSH
9897: LD_INT 1
9899: ST_TO_ADDR
// if p3 = 14 then
9900: LD_VAR 0 3
9904: PUSH
9905: LD_INT 14
9907: EQUAL
9908: IFFALSE 9918
// sFlag := true ;
9910: LD_ADDR_EXP 42
9914: PUSH
9915: LD_INT 1
9917: ST_TO_ADDR
// if p3 = 15 then
9918: LD_VAR 0 3
9922: PUSH
9923: LD_INT 15
9925: EQUAL
9926: IFFALSE 9936
// sKamikadze := true ;
9928: LD_ADDR_EXP 50
9932: PUSH
9933: LD_INT 1
9935: ST_TO_ADDR
// if p3 = 16 then
9936: LD_VAR 0 3
9940: PUSH
9941: LD_INT 16
9943: EQUAL
9944: IFFALSE 9954
// sTroll := true ;
9946: LD_ADDR_EXP 51
9950: PUSH
9951: LD_INT 1
9953: ST_TO_ADDR
// if p3 = 17 then
9954: LD_VAR 0 3
9958: PUSH
9959: LD_INT 17
9961: EQUAL
9962: IFFALSE 9972
// sSlow := true ;
9964: LD_ADDR_EXP 52
9968: PUSH
9969: LD_INT 1
9971: ST_TO_ADDR
// if p3 = 18 then
9972: LD_VAR 0 3
9976: PUSH
9977: LD_INT 18
9979: EQUAL
9980: IFFALSE 9990
// sLack := true ;
9982: LD_ADDR_EXP 53
9986: PUSH
9987: LD_INT 1
9989: ST_TO_ADDR
// if p3 = 19 then
9990: LD_VAR 0 3
9994: PUSH
9995: LD_INT 19
9997: EQUAL
9998: IFFALSE 10008
// sTank := true ;
10000: LD_ADDR_EXP 55
10004: PUSH
10005: LD_INT 1
10007: ST_TO_ADDR
// if p3 = 20 then
10008: LD_VAR 0 3
10012: PUSH
10013: LD_INT 20
10015: EQUAL
10016: IFFALSE 10026
// sRemote := true ;
10018: LD_ADDR_EXP 56
10022: PUSH
10023: LD_INT 1
10025: ST_TO_ADDR
// if p3 = 21 then
10026: LD_VAR 0 3
10030: PUSH
10031: LD_INT 21
10033: EQUAL
10034: IFFALSE 10044
// sPowell := true ;
10036: LD_ADDR_EXP 57
10040: PUSH
10041: LD_INT 1
10043: ST_TO_ADDR
// if p3 = 22 then
10044: LD_VAR 0 3
10048: PUSH
10049: LD_INT 22
10051: EQUAL
10052: IFFALSE 10062
// sTeleport := true ;
10054: LD_ADDR_EXP 60
10058: PUSH
10059: LD_INT 1
10061: ST_TO_ADDR
// if p3 = 23 then
10062: LD_VAR 0 3
10066: PUSH
10067: LD_INT 23
10069: EQUAL
10070: IFFALSE 10080
// sOilTower := true ;
10072: LD_ADDR_EXP 62
10076: PUSH
10077: LD_INT 1
10079: ST_TO_ADDR
// if p3 = 24 then
10080: LD_VAR 0 3
10084: PUSH
10085: LD_INT 24
10087: EQUAL
10088: IFFALSE 10098
// sShovel := true ;
10090: LD_ADDR_EXP 63
10094: PUSH
10095: LD_INT 1
10097: ST_TO_ADDR
// if p3 = 25 then
10098: LD_VAR 0 3
10102: PUSH
10103: LD_INT 25
10105: EQUAL
10106: IFFALSE 10116
// sSheik := true ;
10108: LD_ADDR_EXP 64
10112: PUSH
10113: LD_INT 1
10115: ST_TO_ADDR
// if p3 = 26 then
10116: LD_VAR 0 3
10120: PUSH
10121: LD_INT 26
10123: EQUAL
10124: IFFALSE 10134
// sEarthquake := true ;
10126: LD_ADDR_EXP 66
10130: PUSH
10131: LD_INT 1
10133: ST_TO_ADDR
// if p3 = 27 then
10134: LD_VAR 0 3
10138: PUSH
10139: LD_INT 27
10141: EQUAL
10142: IFFALSE 10152
// sAI := true ;
10144: LD_ADDR_EXP 67
10148: PUSH
10149: LD_INT 1
10151: ST_TO_ADDR
// if p3 = 28 then
10152: LD_VAR 0 3
10156: PUSH
10157: LD_INT 28
10159: EQUAL
10160: IFFALSE 10170
// sCargo := true ;
10162: LD_ADDR_EXP 70
10166: PUSH
10167: LD_INT 1
10169: ST_TO_ADDR
// if p3 = 29 then
10170: LD_VAR 0 3
10174: PUSH
10175: LD_INT 29
10177: EQUAL
10178: IFFALSE 10188
// sDLaser := true ;
10180: LD_ADDR_EXP 71
10184: PUSH
10185: LD_INT 1
10187: ST_TO_ADDR
// if p3 = 30 then
10188: LD_VAR 0 3
10192: PUSH
10193: LD_INT 30
10195: EQUAL
10196: IFFALSE 10206
// sExchange := true ;
10198: LD_ADDR_EXP 72
10202: PUSH
10203: LD_INT 1
10205: ST_TO_ADDR
// if p3 = 31 then
10206: LD_VAR 0 3
10210: PUSH
10211: LD_INT 31
10213: EQUAL
10214: IFFALSE 10224
// sFac := true ;
10216: LD_ADDR_EXP 73
10220: PUSH
10221: LD_INT 1
10223: ST_TO_ADDR
// if p3 = 32 then
10224: LD_VAR 0 3
10228: PUSH
10229: LD_INT 32
10231: EQUAL
10232: IFFALSE 10242
// sPower := true ;
10234: LD_ADDR_EXP 74
10238: PUSH
10239: LD_INT 1
10241: ST_TO_ADDR
// if p3 = 33 then
10242: LD_VAR 0 3
10246: PUSH
10247: LD_INT 33
10249: EQUAL
10250: IFFALSE 10260
// sRandom := true ;
10252: LD_ADDR_EXP 75
10256: PUSH
10257: LD_INT 1
10259: ST_TO_ADDR
// if p3 = 34 then
10260: LD_VAR 0 3
10264: PUSH
10265: LD_INT 34
10267: EQUAL
10268: IFFALSE 10278
// sShield := true ;
10270: LD_ADDR_EXP 76
10274: PUSH
10275: LD_INT 1
10277: ST_TO_ADDR
// if p3 = 35 then
10278: LD_VAR 0 3
10282: PUSH
10283: LD_INT 35
10285: EQUAL
10286: IFFALSE 10296
// sTime := true ;
10288: LD_ADDR_EXP 77
10292: PUSH
10293: LD_INT 1
10295: ST_TO_ADDR
// if p3 = 36 then
10296: LD_VAR 0 3
10300: PUSH
10301: LD_INT 36
10303: EQUAL
10304: IFFALSE 10314
// sTools := true ;
10306: LD_ADDR_EXP 78
10310: PUSH
10311: LD_INT 1
10313: ST_TO_ADDR
// if p3 = 101 then
10314: LD_VAR 0 3
10318: PUSH
10319: LD_INT 101
10321: EQUAL
10322: IFFALSE 10332
// sSold := true ;
10324: LD_ADDR_EXP 43
10328: PUSH
10329: LD_INT 1
10331: ST_TO_ADDR
// if p3 = 102 then
10332: LD_VAR 0 3
10336: PUSH
10337: LD_INT 102
10339: EQUAL
10340: IFFALSE 10350
// sDiff := true ;
10342: LD_ADDR_EXP 44
10346: PUSH
10347: LD_INT 1
10349: ST_TO_ADDR
// if p3 = 103 then
10350: LD_VAR 0 3
10354: PUSH
10355: LD_INT 103
10357: EQUAL
10358: IFFALSE 10368
// sFog := true ;
10360: LD_ADDR_EXP 47
10364: PUSH
10365: LD_INT 1
10367: ST_TO_ADDR
// if p3 = 104 then
10368: LD_VAR 0 3
10372: PUSH
10373: LD_INT 104
10375: EQUAL
10376: IFFALSE 10386
// sReset := true ;
10378: LD_ADDR_EXP 48
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// if p3 = 105 then
10386: LD_VAR 0 3
10390: PUSH
10391: LD_INT 105
10393: EQUAL
10394: IFFALSE 10404
// sSun := true ;
10396: LD_ADDR_EXP 49
10400: PUSH
10401: LD_INT 1
10403: ST_TO_ADDR
// if p3 = 106 then
10404: LD_VAR 0 3
10408: PUSH
10409: LD_INT 106
10411: EQUAL
10412: IFFALSE 10422
// sTiger := true ;
10414: LD_ADDR_EXP 45
10418: PUSH
10419: LD_INT 1
10421: ST_TO_ADDR
// if p3 = 107 then
10422: LD_VAR 0 3
10426: PUSH
10427: LD_INT 107
10429: EQUAL
10430: IFFALSE 10440
// sBomb := true ;
10432: LD_ADDR_EXP 46
10436: PUSH
10437: LD_INT 1
10439: ST_TO_ADDR
// if p3 = 108 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 108
10447: EQUAL
10448: IFFALSE 10458
// sWound := true ;
10450: LD_ADDR_EXP 54
10454: PUSH
10455: LD_INT 1
10457: ST_TO_ADDR
// if p3 = 109 then
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 109
10465: EQUAL
10466: IFFALSE 10476
// sBetray := true ;
10468: LD_ADDR_EXP 58
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// if p3 = 110 then
10476: LD_VAR 0 3
10480: PUSH
10481: LD_INT 110
10483: EQUAL
10484: IFFALSE 10494
// sContamin := true ;
10486: LD_ADDR_EXP 59
10490: PUSH
10491: LD_INT 1
10493: ST_TO_ADDR
// if p3 = 111 then
10494: LD_VAR 0 3
10498: PUSH
10499: LD_INT 111
10501: EQUAL
10502: IFFALSE 10512
// sOil := true ;
10504: LD_ADDR_EXP 61
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// if p3 = 112 then
10512: LD_VAR 0 3
10516: PUSH
10517: LD_INT 112
10519: EQUAL
10520: IFFALSE 10530
// sStu := true ;
10522: LD_ADDR_EXP 65
10526: PUSH
10527: LD_INT 1
10529: ST_TO_ADDR
// if p3 = 113 then
10530: LD_VAR 0 3
10534: PUSH
10535: LD_INT 113
10537: EQUAL
10538: IFFALSE 10548
// sBazooka := true ;
10540: LD_ADDR_EXP 68
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// if p3 = 114 then
10548: LD_VAR 0 3
10552: PUSH
10553: LD_INT 114
10555: EQUAL
10556: IFFALSE 10566
// sMortar := true ;
10558: LD_ADDR_EXP 69
10562: PUSH
10563: LD_INT 1
10565: ST_TO_ADDR
// if p3 = 115 then
10566: LD_VAR 0 3
10570: PUSH
10571: LD_INT 115
10573: EQUAL
10574: IFFALSE 10584
// sRanger := true ;
10576: LD_ADDR_EXP 79
10580: PUSH
10581: LD_INT 1
10583: ST_TO_ADDR
// if p3 = 116 then
10584: LD_VAR 0 3
10588: PUSH
10589: LD_INT 116
10591: EQUAL
10592: IFFALSE 10602
// sComputer := true ;
10594: LD_ADDR_EXP 80
10598: PUSH
10599: LD_INT 1
10601: ST_TO_ADDR
// if p3 = 117 then
10602: LD_VAR 0 3
10606: PUSH
10607: LD_INT 117
10609: EQUAL
10610: IFFALSE 10620
// s30 := true ;
10612: LD_ADDR_EXP 81
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// if p3 = 118 then
10620: LD_VAR 0 3
10624: PUSH
10625: LD_INT 118
10627: EQUAL
10628: IFFALSE 10638
// s60 := true ;
10630: LD_ADDR_EXP 82
10634: PUSH
10635: LD_INT 1
10637: ST_TO_ADDR
// end ; if p2 = hack_mode then
10638: LD_VAR 0 2
10642: PUSH
10643: LD_INT 101
10645: EQUAL
10646: IFFALSE 10774
// begin case p3 of 1 :
10648: LD_VAR 0 3
10652: PUSH
10653: LD_INT 1
10655: DOUBLE
10656: EQUAL
10657: IFTRUE 10661
10659: GO 10668
10661: POP
// hHackUnlimitedResources ; 2 :
10662: CALL 22921 0 0
10666: GO 10774
10668: LD_INT 2
10670: DOUBLE
10671: EQUAL
10672: IFTRUE 10676
10674: GO 10683
10676: POP
// hHackSetLevel10 ; 3 :
10677: CALL 23054 0 0
10681: GO 10774
10683: LD_INT 3
10685: DOUBLE
10686: EQUAL
10687: IFTRUE 10691
10689: GO 10698
10691: POP
// hHackSetLevel10YourUnits ; 4 :
10692: CALL 23139 0 0
10696: GO 10774
10698: LD_INT 4
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10713
10706: POP
// hHackInvincible ; 5 :
10707: CALL 23587 0 0
10711: GO 10774
10713: LD_INT 5
10715: DOUBLE
10716: EQUAL
10717: IFTRUE 10721
10719: GO 10728
10721: POP
// hHackInvisible ; 6 :
10722: CALL 23698 0 0
10726: GO 10774
10728: LD_INT 6
10730: DOUBLE
10731: EQUAL
10732: IFTRUE 10736
10734: GO 10743
10736: POP
// hHackChangeYourSide ; 7 :
10737: CALL 23755 0 0
10741: GO 10774
10743: LD_INT 7
10745: DOUBLE
10746: EQUAL
10747: IFTRUE 10751
10749: GO 10758
10751: POP
// hHackChangeUnitSide ; 8 :
10752: CALL 23797 0 0
10756: GO 10774
10758: LD_INT 8
10760: DOUBLE
10761: EQUAL
10762: IFTRUE 10766
10764: GO 10773
10766: POP
// hHackFog ; end ;
10767: CALL 23898 0 0
10771: GO 10774
10773: POP
// end ; if p2 = game_save_mode then
10774: LD_VAR 0 2
10778: PUSH
10779: LD_INT 102
10781: EQUAL
10782: IFFALSE 10837
// begin if p3 = 1 then
10784: LD_VAR 0 3
10788: PUSH
10789: LD_INT 1
10791: EQUAL
10792: IFFALSE 10804
// globalGameSaveCounter := p4 ;
10794: LD_ADDR_EXP 25
10798: PUSH
10799: LD_VAR 0 4
10803: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10804: LD_VAR 0 3
10808: PUSH
10809: LD_INT 2
10811: EQUAL
10812: PUSH
10813: LD_EXP 25
10817: AND
10818: IFFALSE 10837
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10820: LD_STRING setGameSaveCounter(
10822: PUSH
10823: LD_EXP 25
10827: STR
10828: PUSH
10829: LD_STRING )
10831: STR
10832: PPUSH
10833: CALL_OW 559
// end ; end ;
10837: LD_VAR 0 7
10841: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10842: LD_INT 0
10844: PPUSH
// streamModeActive := false ;
10845: LD_ADDR_EXP 26
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// normalCounter := 36 ;
10853: LD_ADDR_EXP 27
10857: PUSH
10858: LD_INT 36
10860: ST_TO_ADDR
// hardcoreCounter := 18 ;
10861: LD_ADDR_EXP 28
10865: PUSH
10866: LD_INT 18
10868: ST_TO_ADDR
// sRocket := false ;
10869: LD_ADDR_EXP 31
10873: PUSH
10874: LD_INT 0
10876: ST_TO_ADDR
// sSpeed := false ;
10877: LD_ADDR_EXP 30
10881: PUSH
10882: LD_INT 0
10884: ST_TO_ADDR
// sEngine := false ;
10885: LD_ADDR_EXP 32
10889: PUSH
10890: LD_INT 0
10892: ST_TO_ADDR
// sSpec := false ;
10893: LD_ADDR_EXP 29
10897: PUSH
10898: LD_INT 0
10900: ST_TO_ADDR
// sLevel := false ;
10901: LD_ADDR_EXP 33
10905: PUSH
10906: LD_INT 0
10908: ST_TO_ADDR
// sArmoury := false ;
10909: LD_ADDR_EXP 34
10913: PUSH
10914: LD_INT 0
10916: ST_TO_ADDR
// sRadar := false ;
10917: LD_ADDR_EXP 35
10921: PUSH
10922: LD_INT 0
10924: ST_TO_ADDR
// sBunker := false ;
10925: LD_ADDR_EXP 36
10929: PUSH
10930: LD_INT 0
10932: ST_TO_ADDR
// sHack := false ;
10933: LD_ADDR_EXP 37
10937: PUSH
10938: LD_INT 0
10940: ST_TO_ADDR
// sFire := false ;
10941: LD_ADDR_EXP 38
10945: PUSH
10946: LD_INT 0
10948: ST_TO_ADDR
// sRefresh := false ;
10949: LD_ADDR_EXP 39
10953: PUSH
10954: LD_INT 0
10956: ST_TO_ADDR
// sExp := false ;
10957: LD_ADDR_EXP 40
10961: PUSH
10962: LD_INT 0
10964: ST_TO_ADDR
// sDepot := false ;
10965: LD_ADDR_EXP 41
10969: PUSH
10970: LD_INT 0
10972: ST_TO_ADDR
// sFlag := false ;
10973: LD_ADDR_EXP 42
10977: PUSH
10978: LD_INT 0
10980: ST_TO_ADDR
// sKamikadze := false ;
10981: LD_ADDR_EXP 50
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// sTroll := false ;
10989: LD_ADDR_EXP 51
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// sSlow := false ;
10997: LD_ADDR_EXP 52
11001: PUSH
11002: LD_INT 0
11004: ST_TO_ADDR
// sLack := false ;
11005: LD_ADDR_EXP 53
11009: PUSH
11010: LD_INT 0
11012: ST_TO_ADDR
// sTank := false ;
11013: LD_ADDR_EXP 55
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// sRemote := false ;
11021: LD_ADDR_EXP 56
11025: PUSH
11026: LD_INT 0
11028: ST_TO_ADDR
// sPowell := false ;
11029: LD_ADDR_EXP 57
11033: PUSH
11034: LD_INT 0
11036: ST_TO_ADDR
// sTeleport := false ;
11037: LD_ADDR_EXP 60
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// sOilTower := false ;
11045: LD_ADDR_EXP 62
11049: PUSH
11050: LD_INT 0
11052: ST_TO_ADDR
// sShovel := false ;
11053: LD_ADDR_EXP 63
11057: PUSH
11058: LD_INT 0
11060: ST_TO_ADDR
// sSheik := false ;
11061: LD_ADDR_EXP 64
11065: PUSH
11066: LD_INT 0
11068: ST_TO_ADDR
// sEarthquake := false ;
11069: LD_ADDR_EXP 66
11073: PUSH
11074: LD_INT 0
11076: ST_TO_ADDR
// sAI := false ;
11077: LD_ADDR_EXP 67
11081: PUSH
11082: LD_INT 0
11084: ST_TO_ADDR
// sCargo := false ;
11085: LD_ADDR_EXP 70
11089: PUSH
11090: LD_INT 0
11092: ST_TO_ADDR
// sDLaser := false ;
11093: LD_ADDR_EXP 71
11097: PUSH
11098: LD_INT 0
11100: ST_TO_ADDR
// sExchange := false ;
11101: LD_ADDR_EXP 72
11105: PUSH
11106: LD_INT 0
11108: ST_TO_ADDR
// sFac := false ;
11109: LD_ADDR_EXP 73
11113: PUSH
11114: LD_INT 0
11116: ST_TO_ADDR
// sPower := false ;
11117: LD_ADDR_EXP 74
11121: PUSH
11122: LD_INT 0
11124: ST_TO_ADDR
// sRandom := false ;
11125: LD_ADDR_EXP 75
11129: PUSH
11130: LD_INT 0
11132: ST_TO_ADDR
// sShield := false ;
11133: LD_ADDR_EXP 76
11137: PUSH
11138: LD_INT 0
11140: ST_TO_ADDR
// sTime := false ;
11141: LD_ADDR_EXP 77
11145: PUSH
11146: LD_INT 0
11148: ST_TO_ADDR
// sTools := false ;
11149: LD_ADDR_EXP 78
11153: PUSH
11154: LD_INT 0
11156: ST_TO_ADDR
// sSold := false ;
11157: LD_ADDR_EXP 43
11161: PUSH
11162: LD_INT 0
11164: ST_TO_ADDR
// sDiff := false ;
11165: LD_ADDR_EXP 44
11169: PUSH
11170: LD_INT 0
11172: ST_TO_ADDR
// sFog := false ;
11173: LD_ADDR_EXP 47
11177: PUSH
11178: LD_INT 0
11180: ST_TO_ADDR
// sReset := false ;
11181: LD_ADDR_EXP 48
11185: PUSH
11186: LD_INT 0
11188: ST_TO_ADDR
// sSun := false ;
11189: LD_ADDR_EXP 49
11193: PUSH
11194: LD_INT 0
11196: ST_TO_ADDR
// sTiger := false ;
11197: LD_ADDR_EXP 45
11201: PUSH
11202: LD_INT 0
11204: ST_TO_ADDR
// sBomb := false ;
11205: LD_ADDR_EXP 46
11209: PUSH
11210: LD_INT 0
11212: ST_TO_ADDR
// sWound := false ;
11213: LD_ADDR_EXP 54
11217: PUSH
11218: LD_INT 0
11220: ST_TO_ADDR
// sBetray := false ;
11221: LD_ADDR_EXP 58
11225: PUSH
11226: LD_INT 0
11228: ST_TO_ADDR
// sContamin := false ;
11229: LD_ADDR_EXP 59
11233: PUSH
11234: LD_INT 0
11236: ST_TO_ADDR
// sOil := false ;
11237: LD_ADDR_EXP 61
11241: PUSH
11242: LD_INT 0
11244: ST_TO_ADDR
// sStu := false ;
11245: LD_ADDR_EXP 65
11249: PUSH
11250: LD_INT 0
11252: ST_TO_ADDR
// sBazooka := false ;
11253: LD_ADDR_EXP 68
11257: PUSH
11258: LD_INT 0
11260: ST_TO_ADDR
// sMortar := false ;
11261: LD_ADDR_EXP 69
11265: PUSH
11266: LD_INT 0
11268: ST_TO_ADDR
// sRanger := false ;
11269: LD_ADDR_EXP 79
11273: PUSH
11274: LD_INT 0
11276: ST_TO_ADDR
// sComputer := false ;
11277: LD_ADDR_EXP 80
11281: PUSH
11282: LD_INT 0
11284: ST_TO_ADDR
// s30 := false ;
11285: LD_ADDR_EXP 81
11289: PUSH
11290: LD_INT 0
11292: ST_TO_ADDR
// s60 := false ;
11293: LD_ADDR_EXP 82
11297: PUSH
11298: LD_INT 0
11300: ST_TO_ADDR
// end ;
11301: LD_VAR 0 1
11305: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11306: LD_INT 0
11308: PPUSH
11309: PPUSH
11310: PPUSH
11311: PPUSH
11312: PPUSH
11313: PPUSH
11314: PPUSH
// result := [ ] ;
11315: LD_ADDR_VAR 0 2
11319: PUSH
11320: EMPTY
11321: ST_TO_ADDR
// if campaign_id = 1 then
11322: LD_OWVAR 69
11326: PUSH
11327: LD_INT 1
11329: EQUAL
11330: IFFALSE 14496
// begin case mission_number of 1 :
11332: LD_OWVAR 70
11336: PUSH
11337: LD_INT 1
11339: DOUBLE
11340: EQUAL
11341: IFTRUE 11345
11343: GO 11421
11345: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11346: LD_ADDR_VAR 0 2
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: LD_INT 4
11356: PUSH
11357: LD_INT 11
11359: PUSH
11360: LD_INT 12
11362: PUSH
11363: LD_INT 15
11365: PUSH
11366: LD_INT 16
11368: PUSH
11369: LD_INT 22
11371: PUSH
11372: LD_INT 23
11374: PUSH
11375: LD_INT 26
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 101
11391: PUSH
11392: LD_INT 102
11394: PUSH
11395: LD_INT 106
11397: PUSH
11398: LD_INT 116
11400: PUSH
11401: LD_INT 117
11403: PUSH
11404: LD_INT 118
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: ST_TO_ADDR
11419: GO 14494
11421: LD_INT 2
11423: DOUBLE
11424: EQUAL
11425: IFTRUE 11429
11427: GO 11513
11429: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11430: LD_ADDR_VAR 0 2
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: LD_INT 4
11440: PUSH
11441: LD_INT 11
11443: PUSH
11444: LD_INT 12
11446: PUSH
11447: LD_INT 15
11449: PUSH
11450: LD_INT 16
11452: PUSH
11453: LD_INT 22
11455: PUSH
11456: LD_INT 23
11458: PUSH
11459: LD_INT 26
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 101
11475: PUSH
11476: LD_INT 102
11478: PUSH
11479: LD_INT 105
11481: PUSH
11482: LD_INT 106
11484: PUSH
11485: LD_INT 108
11487: PUSH
11488: LD_INT 116
11490: PUSH
11491: LD_INT 117
11493: PUSH
11494: LD_INT 118
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: ST_TO_ADDR
11511: GO 14494
11513: LD_INT 3
11515: DOUBLE
11516: EQUAL
11517: IFTRUE 11521
11519: GO 11609
11521: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11522: LD_ADDR_VAR 0 2
11526: PUSH
11527: LD_INT 2
11529: PUSH
11530: LD_INT 4
11532: PUSH
11533: LD_INT 5
11535: PUSH
11536: LD_INT 11
11538: PUSH
11539: LD_INT 12
11541: PUSH
11542: LD_INT 15
11544: PUSH
11545: LD_INT 16
11547: PUSH
11548: LD_INT 22
11550: PUSH
11551: LD_INT 26
11553: PUSH
11554: LD_INT 36
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 101
11571: PUSH
11572: LD_INT 102
11574: PUSH
11575: LD_INT 105
11577: PUSH
11578: LD_INT 106
11580: PUSH
11581: LD_INT 108
11583: PUSH
11584: LD_INT 116
11586: PUSH
11587: LD_INT 117
11589: PUSH
11590: LD_INT 118
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: ST_TO_ADDR
11607: GO 14494
11609: LD_INT 4
11611: DOUBLE
11612: EQUAL
11613: IFTRUE 11617
11615: GO 11713
11617: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11618: LD_ADDR_VAR 0 2
11622: PUSH
11623: LD_INT 2
11625: PUSH
11626: LD_INT 4
11628: PUSH
11629: LD_INT 5
11631: PUSH
11632: LD_INT 8
11634: PUSH
11635: LD_INT 11
11637: PUSH
11638: LD_INT 12
11640: PUSH
11641: LD_INT 15
11643: PUSH
11644: LD_INT 16
11646: PUSH
11647: LD_INT 22
11649: PUSH
11650: LD_INT 23
11652: PUSH
11653: LD_INT 26
11655: PUSH
11656: LD_INT 36
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 101
11675: PUSH
11676: LD_INT 102
11678: PUSH
11679: LD_INT 105
11681: PUSH
11682: LD_INT 106
11684: PUSH
11685: LD_INT 108
11687: PUSH
11688: LD_INT 116
11690: PUSH
11691: LD_INT 117
11693: PUSH
11694: LD_INT 118
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: ST_TO_ADDR
11711: GO 14494
11713: LD_INT 5
11715: DOUBLE
11716: EQUAL
11717: IFTRUE 11721
11719: GO 11833
11721: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11722: LD_ADDR_VAR 0 2
11726: PUSH
11727: LD_INT 2
11729: PUSH
11730: LD_INT 4
11732: PUSH
11733: LD_INT 5
11735: PUSH
11736: LD_INT 6
11738: PUSH
11739: LD_INT 8
11741: PUSH
11742: LD_INT 11
11744: PUSH
11745: LD_INT 12
11747: PUSH
11748: LD_INT 15
11750: PUSH
11751: LD_INT 16
11753: PUSH
11754: LD_INT 22
11756: PUSH
11757: LD_INT 23
11759: PUSH
11760: LD_INT 25
11762: PUSH
11763: LD_INT 26
11765: PUSH
11766: LD_INT 36
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 101
11787: PUSH
11788: LD_INT 102
11790: PUSH
11791: LD_INT 105
11793: PUSH
11794: LD_INT 106
11796: PUSH
11797: LD_INT 108
11799: PUSH
11800: LD_INT 109
11802: PUSH
11803: LD_INT 112
11805: PUSH
11806: LD_INT 116
11808: PUSH
11809: LD_INT 117
11811: PUSH
11812: LD_INT 118
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: ST_TO_ADDR
11831: GO 14494
11833: LD_INT 6
11835: DOUBLE
11836: EQUAL
11837: IFTRUE 11841
11839: GO 11973
11841: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11842: LD_ADDR_VAR 0 2
11846: PUSH
11847: LD_INT 2
11849: PUSH
11850: LD_INT 4
11852: PUSH
11853: LD_INT 5
11855: PUSH
11856: LD_INT 6
11858: PUSH
11859: LD_INT 8
11861: PUSH
11862: LD_INT 11
11864: PUSH
11865: LD_INT 12
11867: PUSH
11868: LD_INT 15
11870: PUSH
11871: LD_INT 16
11873: PUSH
11874: LD_INT 20
11876: PUSH
11877: LD_INT 21
11879: PUSH
11880: LD_INT 22
11882: PUSH
11883: LD_INT 23
11885: PUSH
11886: LD_INT 25
11888: PUSH
11889: LD_INT 26
11891: PUSH
11892: LD_INT 30
11894: PUSH
11895: LD_INT 31
11897: PUSH
11898: LD_INT 32
11900: PUSH
11901: LD_INT 36
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 101
11927: PUSH
11928: LD_INT 102
11930: PUSH
11931: LD_INT 105
11933: PUSH
11934: LD_INT 106
11936: PUSH
11937: LD_INT 108
11939: PUSH
11940: LD_INT 109
11942: PUSH
11943: LD_INT 112
11945: PUSH
11946: LD_INT 116
11948: PUSH
11949: LD_INT 117
11951: PUSH
11952: LD_INT 118
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: ST_TO_ADDR
11971: GO 14494
11973: LD_INT 7
11975: DOUBLE
11976: EQUAL
11977: IFTRUE 11981
11979: GO 12093
11981: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11982: LD_ADDR_VAR 0 2
11986: PUSH
11987: LD_INT 2
11989: PUSH
11990: LD_INT 4
11992: PUSH
11993: LD_INT 5
11995: PUSH
11996: LD_INT 7
11998: PUSH
11999: LD_INT 11
12001: PUSH
12002: LD_INT 12
12004: PUSH
12005: LD_INT 15
12007: PUSH
12008: LD_INT 16
12010: PUSH
12011: LD_INT 20
12013: PUSH
12014: LD_INT 21
12016: PUSH
12017: LD_INT 22
12019: PUSH
12020: LD_INT 23
12022: PUSH
12023: LD_INT 25
12025: PUSH
12026: LD_INT 26
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 101
12047: PUSH
12048: LD_INT 102
12050: PUSH
12051: LD_INT 103
12053: PUSH
12054: LD_INT 105
12056: PUSH
12057: LD_INT 106
12059: PUSH
12060: LD_INT 108
12062: PUSH
12063: LD_INT 112
12065: PUSH
12066: LD_INT 116
12068: PUSH
12069: LD_INT 117
12071: PUSH
12072: LD_INT 118
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: ST_TO_ADDR
12091: GO 14494
12093: LD_INT 8
12095: DOUBLE
12096: EQUAL
12097: IFTRUE 12101
12099: GO 12241
12101: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12102: LD_ADDR_VAR 0 2
12106: PUSH
12107: LD_INT 2
12109: PUSH
12110: LD_INT 4
12112: PUSH
12113: LD_INT 5
12115: PUSH
12116: LD_INT 6
12118: PUSH
12119: LD_INT 7
12121: PUSH
12122: LD_INT 8
12124: PUSH
12125: LD_INT 11
12127: PUSH
12128: LD_INT 12
12130: PUSH
12131: LD_INT 15
12133: PUSH
12134: LD_INT 16
12136: PUSH
12137: LD_INT 20
12139: PUSH
12140: LD_INT 21
12142: PUSH
12143: LD_INT 22
12145: PUSH
12146: LD_INT 23
12148: PUSH
12149: LD_INT 25
12151: PUSH
12152: LD_INT 26
12154: PUSH
12155: LD_INT 30
12157: PUSH
12158: LD_INT 31
12160: PUSH
12161: LD_INT 32
12163: PUSH
12164: LD_INT 36
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 101
12191: PUSH
12192: LD_INT 102
12194: PUSH
12195: LD_INT 103
12197: PUSH
12198: LD_INT 105
12200: PUSH
12201: LD_INT 106
12203: PUSH
12204: LD_INT 108
12206: PUSH
12207: LD_INT 109
12209: PUSH
12210: LD_INT 112
12212: PUSH
12213: LD_INT 116
12215: PUSH
12216: LD_INT 117
12218: PUSH
12219: LD_INT 118
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: ST_TO_ADDR
12239: GO 14494
12241: LD_INT 9
12243: DOUBLE
12244: EQUAL
12245: IFTRUE 12249
12247: GO 12397
12249: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12250: LD_ADDR_VAR 0 2
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: LD_INT 4
12260: PUSH
12261: LD_INT 5
12263: PUSH
12264: LD_INT 6
12266: PUSH
12267: LD_INT 7
12269: PUSH
12270: LD_INT 8
12272: PUSH
12273: LD_INT 11
12275: PUSH
12276: LD_INT 12
12278: PUSH
12279: LD_INT 15
12281: PUSH
12282: LD_INT 16
12284: PUSH
12285: LD_INT 20
12287: PUSH
12288: LD_INT 21
12290: PUSH
12291: LD_INT 22
12293: PUSH
12294: LD_INT 23
12296: PUSH
12297: LD_INT 25
12299: PUSH
12300: LD_INT 26
12302: PUSH
12303: LD_INT 28
12305: PUSH
12306: LD_INT 30
12308: PUSH
12309: LD_INT 31
12311: PUSH
12312: LD_INT 32
12314: PUSH
12315: LD_INT 36
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 101
12343: PUSH
12344: LD_INT 102
12346: PUSH
12347: LD_INT 103
12349: PUSH
12350: LD_INT 105
12352: PUSH
12353: LD_INT 106
12355: PUSH
12356: LD_INT 108
12358: PUSH
12359: LD_INT 109
12361: PUSH
12362: LD_INT 112
12364: PUSH
12365: LD_INT 114
12367: PUSH
12368: LD_INT 116
12370: PUSH
12371: LD_INT 117
12373: PUSH
12374: LD_INT 118
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: ST_TO_ADDR
12395: GO 14494
12397: LD_INT 10
12399: DOUBLE
12400: EQUAL
12401: IFTRUE 12405
12403: GO 12601
12405: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12406: LD_ADDR_VAR 0 2
12410: PUSH
12411: LD_INT 2
12413: PUSH
12414: LD_INT 4
12416: PUSH
12417: LD_INT 5
12419: PUSH
12420: LD_INT 6
12422: PUSH
12423: LD_INT 7
12425: PUSH
12426: LD_INT 8
12428: PUSH
12429: LD_INT 9
12431: PUSH
12432: LD_INT 10
12434: PUSH
12435: LD_INT 11
12437: PUSH
12438: LD_INT 12
12440: PUSH
12441: LD_INT 13
12443: PUSH
12444: LD_INT 14
12446: PUSH
12447: LD_INT 15
12449: PUSH
12450: LD_INT 16
12452: PUSH
12453: LD_INT 17
12455: PUSH
12456: LD_INT 18
12458: PUSH
12459: LD_INT 19
12461: PUSH
12462: LD_INT 20
12464: PUSH
12465: LD_INT 21
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_INT 23
12473: PUSH
12474: LD_INT 24
12476: PUSH
12477: LD_INT 25
12479: PUSH
12480: LD_INT 26
12482: PUSH
12483: LD_INT 28
12485: PUSH
12486: LD_INT 30
12488: PUSH
12489: LD_INT 31
12491: PUSH
12492: LD_INT 32
12494: PUSH
12495: LD_INT 36
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 101
12531: PUSH
12532: LD_INT 102
12534: PUSH
12535: LD_INT 103
12537: PUSH
12538: LD_INT 104
12540: PUSH
12541: LD_INT 105
12543: PUSH
12544: LD_INT 106
12546: PUSH
12547: LD_INT 107
12549: PUSH
12550: LD_INT 108
12552: PUSH
12553: LD_INT 109
12555: PUSH
12556: LD_INT 110
12558: PUSH
12559: LD_INT 111
12561: PUSH
12562: LD_INT 112
12564: PUSH
12565: LD_INT 114
12567: PUSH
12568: LD_INT 116
12570: PUSH
12571: LD_INT 117
12573: PUSH
12574: LD_INT 118
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: ST_TO_ADDR
12599: GO 14494
12601: LD_INT 11
12603: DOUBLE
12604: EQUAL
12605: IFTRUE 12609
12607: GO 12813
12609: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12610: LD_ADDR_VAR 0 2
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: LD_INT 3
12620: PUSH
12621: LD_INT 4
12623: PUSH
12624: LD_INT 5
12626: PUSH
12627: LD_INT 6
12629: PUSH
12630: LD_INT 7
12632: PUSH
12633: LD_INT 8
12635: PUSH
12636: LD_INT 9
12638: PUSH
12639: LD_INT 10
12641: PUSH
12642: LD_INT 11
12644: PUSH
12645: LD_INT 12
12647: PUSH
12648: LD_INT 13
12650: PUSH
12651: LD_INT 14
12653: PUSH
12654: LD_INT 15
12656: PUSH
12657: LD_INT 16
12659: PUSH
12660: LD_INT 17
12662: PUSH
12663: LD_INT 18
12665: PUSH
12666: LD_INT 19
12668: PUSH
12669: LD_INT 20
12671: PUSH
12672: LD_INT 21
12674: PUSH
12675: LD_INT 22
12677: PUSH
12678: LD_INT 23
12680: PUSH
12681: LD_INT 24
12683: PUSH
12684: LD_INT 25
12686: PUSH
12687: LD_INT 26
12689: PUSH
12690: LD_INT 28
12692: PUSH
12693: LD_INT 30
12695: PUSH
12696: LD_INT 31
12698: PUSH
12699: LD_INT 32
12701: PUSH
12702: LD_INT 34
12704: PUSH
12705: LD_INT 36
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PUSH
12741: LD_INT 101
12743: PUSH
12744: LD_INT 102
12746: PUSH
12747: LD_INT 103
12749: PUSH
12750: LD_INT 104
12752: PUSH
12753: LD_INT 105
12755: PUSH
12756: LD_INT 106
12758: PUSH
12759: LD_INT 107
12761: PUSH
12762: LD_INT 108
12764: PUSH
12765: LD_INT 109
12767: PUSH
12768: LD_INT 110
12770: PUSH
12771: LD_INT 111
12773: PUSH
12774: LD_INT 112
12776: PUSH
12777: LD_INT 114
12779: PUSH
12780: LD_INT 116
12782: PUSH
12783: LD_INT 117
12785: PUSH
12786: LD_INT 118
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: ST_TO_ADDR
12811: GO 14494
12813: LD_INT 12
12815: DOUBLE
12816: EQUAL
12817: IFTRUE 12821
12819: GO 13041
12821: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12822: LD_ADDR_VAR 0 2
12826: PUSH
12827: LD_INT 1
12829: PUSH
12830: LD_INT 2
12832: PUSH
12833: LD_INT 3
12835: PUSH
12836: LD_INT 4
12838: PUSH
12839: LD_INT 5
12841: PUSH
12842: LD_INT 6
12844: PUSH
12845: LD_INT 7
12847: PUSH
12848: LD_INT 8
12850: PUSH
12851: LD_INT 9
12853: PUSH
12854: LD_INT 10
12856: PUSH
12857: LD_INT 11
12859: PUSH
12860: LD_INT 12
12862: PUSH
12863: LD_INT 13
12865: PUSH
12866: LD_INT 14
12868: PUSH
12869: LD_INT 15
12871: PUSH
12872: LD_INT 16
12874: PUSH
12875: LD_INT 17
12877: PUSH
12878: LD_INT 18
12880: PUSH
12881: LD_INT 19
12883: PUSH
12884: LD_INT 20
12886: PUSH
12887: LD_INT 21
12889: PUSH
12890: LD_INT 22
12892: PUSH
12893: LD_INT 23
12895: PUSH
12896: LD_INT 24
12898: PUSH
12899: LD_INT 25
12901: PUSH
12902: LD_INT 26
12904: PUSH
12905: LD_INT 27
12907: PUSH
12908: LD_INT 28
12910: PUSH
12911: LD_INT 30
12913: PUSH
12914: LD_INT 31
12916: PUSH
12917: LD_INT 32
12919: PUSH
12920: LD_INT 33
12922: PUSH
12923: LD_INT 34
12925: PUSH
12926: LD_INT 36
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 101
12967: PUSH
12968: LD_INT 102
12970: PUSH
12971: LD_INT 103
12973: PUSH
12974: LD_INT 104
12976: PUSH
12977: LD_INT 105
12979: PUSH
12980: LD_INT 106
12982: PUSH
12983: LD_INT 107
12985: PUSH
12986: LD_INT 108
12988: PUSH
12989: LD_INT 109
12991: PUSH
12992: LD_INT 110
12994: PUSH
12995: LD_INT 111
12997: PUSH
12998: LD_INT 112
13000: PUSH
13001: LD_INT 113
13003: PUSH
13004: LD_INT 114
13006: PUSH
13007: LD_INT 116
13009: PUSH
13010: LD_INT 117
13012: PUSH
13013: LD_INT 118
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: ST_TO_ADDR
13039: GO 14494
13041: LD_INT 13
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13257
13049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13050: LD_ADDR_VAR 0 2
13054: PUSH
13055: LD_INT 1
13057: PUSH
13058: LD_INT 2
13060: PUSH
13061: LD_INT 3
13063: PUSH
13064: LD_INT 4
13066: PUSH
13067: LD_INT 5
13069: PUSH
13070: LD_INT 8
13072: PUSH
13073: LD_INT 9
13075: PUSH
13076: LD_INT 10
13078: PUSH
13079: LD_INT 11
13081: PUSH
13082: LD_INT 12
13084: PUSH
13085: LD_INT 14
13087: PUSH
13088: LD_INT 15
13090: PUSH
13091: LD_INT 16
13093: PUSH
13094: LD_INT 17
13096: PUSH
13097: LD_INT 18
13099: PUSH
13100: LD_INT 19
13102: PUSH
13103: LD_INT 20
13105: PUSH
13106: LD_INT 21
13108: PUSH
13109: LD_INT 22
13111: PUSH
13112: LD_INT 23
13114: PUSH
13115: LD_INT 24
13117: PUSH
13118: LD_INT 25
13120: PUSH
13121: LD_INT 26
13123: PUSH
13124: LD_INT 27
13126: PUSH
13127: LD_INT 28
13129: PUSH
13130: LD_INT 30
13132: PUSH
13133: LD_INT 31
13135: PUSH
13136: LD_INT 32
13138: PUSH
13139: LD_INT 33
13141: PUSH
13142: LD_INT 34
13144: PUSH
13145: LD_INT 36
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 101
13183: PUSH
13184: LD_INT 102
13186: PUSH
13187: LD_INT 103
13189: PUSH
13190: LD_INT 104
13192: PUSH
13193: LD_INT 105
13195: PUSH
13196: LD_INT 106
13198: PUSH
13199: LD_INT 107
13201: PUSH
13202: LD_INT 108
13204: PUSH
13205: LD_INT 109
13207: PUSH
13208: LD_INT 110
13210: PUSH
13211: LD_INT 111
13213: PUSH
13214: LD_INT 112
13216: PUSH
13217: LD_INT 113
13219: PUSH
13220: LD_INT 114
13222: PUSH
13223: LD_INT 116
13225: PUSH
13226: LD_INT 117
13228: PUSH
13229: LD_INT 118
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: ST_TO_ADDR
13255: GO 14494
13257: LD_INT 14
13259: DOUBLE
13260: EQUAL
13261: IFTRUE 13265
13263: GO 13489
13265: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13266: LD_ADDR_VAR 0 2
13270: PUSH
13271: LD_INT 1
13273: PUSH
13274: LD_INT 2
13276: PUSH
13277: LD_INT 3
13279: PUSH
13280: LD_INT 4
13282: PUSH
13283: LD_INT 5
13285: PUSH
13286: LD_INT 6
13288: PUSH
13289: LD_INT 7
13291: PUSH
13292: LD_INT 8
13294: PUSH
13295: LD_INT 9
13297: PUSH
13298: LD_INT 10
13300: PUSH
13301: LD_INT 11
13303: PUSH
13304: LD_INT 12
13306: PUSH
13307: LD_INT 13
13309: PUSH
13310: LD_INT 14
13312: PUSH
13313: LD_INT 15
13315: PUSH
13316: LD_INT 16
13318: PUSH
13319: LD_INT 17
13321: PUSH
13322: LD_INT 18
13324: PUSH
13325: LD_INT 19
13327: PUSH
13328: LD_INT 20
13330: PUSH
13331: LD_INT 21
13333: PUSH
13334: LD_INT 22
13336: PUSH
13337: LD_INT 23
13339: PUSH
13340: LD_INT 24
13342: PUSH
13343: LD_INT 25
13345: PUSH
13346: LD_INT 26
13348: PUSH
13349: LD_INT 27
13351: PUSH
13352: LD_INT 28
13354: PUSH
13355: LD_INT 29
13357: PUSH
13358: LD_INT 30
13360: PUSH
13361: LD_INT 31
13363: PUSH
13364: LD_INT 32
13366: PUSH
13367: LD_INT 33
13369: PUSH
13370: LD_INT 34
13372: PUSH
13373: LD_INT 36
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 101
13415: PUSH
13416: LD_INT 102
13418: PUSH
13419: LD_INT 103
13421: PUSH
13422: LD_INT 104
13424: PUSH
13425: LD_INT 105
13427: PUSH
13428: LD_INT 106
13430: PUSH
13431: LD_INT 107
13433: PUSH
13434: LD_INT 108
13436: PUSH
13437: LD_INT 109
13439: PUSH
13440: LD_INT 110
13442: PUSH
13443: LD_INT 111
13445: PUSH
13446: LD_INT 112
13448: PUSH
13449: LD_INT 113
13451: PUSH
13452: LD_INT 114
13454: PUSH
13455: LD_INT 116
13457: PUSH
13458: LD_INT 117
13460: PUSH
13461: LD_INT 118
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: ST_TO_ADDR
13487: GO 14494
13489: LD_INT 15
13491: DOUBLE
13492: EQUAL
13493: IFTRUE 13497
13495: GO 13721
13497: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13498: LD_ADDR_VAR 0 2
13502: PUSH
13503: LD_INT 1
13505: PUSH
13506: LD_INT 2
13508: PUSH
13509: LD_INT 3
13511: PUSH
13512: LD_INT 4
13514: PUSH
13515: LD_INT 5
13517: PUSH
13518: LD_INT 6
13520: PUSH
13521: LD_INT 7
13523: PUSH
13524: LD_INT 8
13526: PUSH
13527: LD_INT 9
13529: PUSH
13530: LD_INT 10
13532: PUSH
13533: LD_INT 11
13535: PUSH
13536: LD_INT 12
13538: PUSH
13539: LD_INT 13
13541: PUSH
13542: LD_INT 14
13544: PUSH
13545: LD_INT 15
13547: PUSH
13548: LD_INT 16
13550: PUSH
13551: LD_INT 17
13553: PUSH
13554: LD_INT 18
13556: PUSH
13557: LD_INT 19
13559: PUSH
13560: LD_INT 20
13562: PUSH
13563: LD_INT 21
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_INT 23
13571: PUSH
13572: LD_INT 24
13574: PUSH
13575: LD_INT 25
13577: PUSH
13578: LD_INT 26
13580: PUSH
13581: LD_INT 27
13583: PUSH
13584: LD_INT 28
13586: PUSH
13587: LD_INT 29
13589: PUSH
13590: LD_INT 30
13592: PUSH
13593: LD_INT 31
13595: PUSH
13596: LD_INT 32
13598: PUSH
13599: LD_INT 33
13601: PUSH
13602: LD_INT 34
13604: PUSH
13605: LD_INT 36
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 101
13647: PUSH
13648: LD_INT 102
13650: PUSH
13651: LD_INT 103
13653: PUSH
13654: LD_INT 104
13656: PUSH
13657: LD_INT 105
13659: PUSH
13660: LD_INT 106
13662: PUSH
13663: LD_INT 107
13665: PUSH
13666: LD_INT 108
13668: PUSH
13669: LD_INT 109
13671: PUSH
13672: LD_INT 110
13674: PUSH
13675: LD_INT 111
13677: PUSH
13678: LD_INT 112
13680: PUSH
13681: LD_INT 113
13683: PUSH
13684: LD_INT 114
13686: PUSH
13687: LD_INT 116
13689: PUSH
13690: LD_INT 117
13692: PUSH
13693: LD_INT 118
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: ST_TO_ADDR
13719: GO 14494
13721: LD_INT 16
13723: DOUBLE
13724: EQUAL
13725: IFTRUE 13729
13727: GO 13865
13729: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13730: LD_ADDR_VAR 0 2
13734: PUSH
13735: LD_INT 2
13737: PUSH
13738: LD_INT 4
13740: PUSH
13741: LD_INT 5
13743: PUSH
13744: LD_INT 7
13746: PUSH
13747: LD_INT 11
13749: PUSH
13750: LD_INT 12
13752: PUSH
13753: LD_INT 15
13755: PUSH
13756: LD_INT 16
13758: PUSH
13759: LD_INT 20
13761: PUSH
13762: LD_INT 21
13764: PUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 23
13770: PUSH
13771: LD_INT 25
13773: PUSH
13774: LD_INT 26
13776: PUSH
13777: LD_INT 30
13779: PUSH
13780: LD_INT 31
13782: PUSH
13783: LD_INT 32
13785: PUSH
13786: LD_INT 33
13788: PUSH
13789: LD_INT 34
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 101
13815: PUSH
13816: LD_INT 102
13818: PUSH
13819: LD_INT 103
13821: PUSH
13822: LD_INT 106
13824: PUSH
13825: LD_INT 108
13827: PUSH
13828: LD_INT 112
13830: PUSH
13831: LD_INT 113
13833: PUSH
13834: LD_INT 114
13836: PUSH
13837: LD_INT 116
13839: PUSH
13840: LD_INT 117
13842: PUSH
13843: LD_INT 118
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: ST_TO_ADDR
13863: GO 14494
13865: LD_INT 17
13867: DOUBLE
13868: EQUAL
13869: IFTRUE 13873
13871: GO 14097
13873: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13874: LD_ADDR_VAR 0 2
13878: PUSH
13879: LD_INT 1
13881: PUSH
13882: LD_INT 2
13884: PUSH
13885: LD_INT 3
13887: PUSH
13888: LD_INT 4
13890: PUSH
13891: LD_INT 5
13893: PUSH
13894: LD_INT 6
13896: PUSH
13897: LD_INT 7
13899: PUSH
13900: LD_INT 8
13902: PUSH
13903: LD_INT 9
13905: PUSH
13906: LD_INT 10
13908: PUSH
13909: LD_INT 11
13911: PUSH
13912: LD_INT 12
13914: PUSH
13915: LD_INT 13
13917: PUSH
13918: LD_INT 14
13920: PUSH
13921: LD_INT 15
13923: PUSH
13924: LD_INT 16
13926: PUSH
13927: LD_INT 17
13929: PUSH
13930: LD_INT 18
13932: PUSH
13933: LD_INT 19
13935: PUSH
13936: LD_INT 20
13938: PUSH
13939: LD_INT 21
13941: PUSH
13942: LD_INT 22
13944: PUSH
13945: LD_INT 23
13947: PUSH
13948: LD_INT 24
13950: PUSH
13951: LD_INT 25
13953: PUSH
13954: LD_INT 26
13956: PUSH
13957: LD_INT 27
13959: PUSH
13960: LD_INT 28
13962: PUSH
13963: LD_INT 29
13965: PUSH
13966: LD_INT 30
13968: PUSH
13969: LD_INT 31
13971: PUSH
13972: LD_INT 32
13974: PUSH
13975: LD_INT 33
13977: PUSH
13978: LD_INT 34
13980: PUSH
13981: LD_INT 36
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 101
14023: PUSH
14024: LD_INT 102
14026: PUSH
14027: LD_INT 103
14029: PUSH
14030: LD_INT 104
14032: PUSH
14033: LD_INT 105
14035: PUSH
14036: LD_INT 106
14038: PUSH
14039: LD_INT 107
14041: PUSH
14042: LD_INT 108
14044: PUSH
14045: LD_INT 109
14047: PUSH
14048: LD_INT 110
14050: PUSH
14051: LD_INT 111
14053: PUSH
14054: LD_INT 112
14056: PUSH
14057: LD_INT 113
14059: PUSH
14060: LD_INT 114
14062: PUSH
14063: LD_INT 116
14065: PUSH
14066: LD_INT 117
14068: PUSH
14069: LD_INT 118
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: ST_TO_ADDR
14095: GO 14494
14097: LD_INT 18
14099: DOUBLE
14100: EQUAL
14101: IFTRUE 14105
14103: GO 14253
14105: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14106: LD_ADDR_VAR 0 2
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: LD_INT 4
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: LD_INT 7
14122: PUSH
14123: LD_INT 11
14125: PUSH
14126: LD_INT 12
14128: PUSH
14129: LD_INT 15
14131: PUSH
14132: LD_INT 16
14134: PUSH
14135: LD_INT 20
14137: PUSH
14138: LD_INT 21
14140: PUSH
14141: LD_INT 22
14143: PUSH
14144: LD_INT 23
14146: PUSH
14147: LD_INT 25
14149: PUSH
14150: LD_INT 26
14152: PUSH
14153: LD_INT 30
14155: PUSH
14156: LD_INT 31
14158: PUSH
14159: LD_INT 32
14161: PUSH
14162: LD_INT 33
14164: PUSH
14165: LD_INT 34
14167: PUSH
14168: LD_INT 35
14170: PUSH
14171: LD_INT 36
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 101
14199: PUSH
14200: LD_INT 102
14202: PUSH
14203: LD_INT 103
14205: PUSH
14206: LD_INT 106
14208: PUSH
14209: LD_INT 108
14211: PUSH
14212: LD_INT 112
14214: PUSH
14215: LD_INT 113
14217: PUSH
14218: LD_INT 114
14220: PUSH
14221: LD_INT 115
14223: PUSH
14224: LD_INT 116
14226: PUSH
14227: LD_INT 117
14229: PUSH
14230: LD_INT 118
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: ST_TO_ADDR
14251: GO 14494
14253: LD_INT 19
14255: DOUBLE
14256: EQUAL
14257: IFTRUE 14261
14259: GO 14493
14261: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14262: LD_ADDR_VAR 0 2
14266: PUSH
14267: LD_INT 1
14269: PUSH
14270: LD_INT 2
14272: PUSH
14273: LD_INT 3
14275: PUSH
14276: LD_INT 4
14278: PUSH
14279: LD_INT 5
14281: PUSH
14282: LD_INT 6
14284: PUSH
14285: LD_INT 7
14287: PUSH
14288: LD_INT 8
14290: PUSH
14291: LD_INT 9
14293: PUSH
14294: LD_INT 10
14296: PUSH
14297: LD_INT 11
14299: PUSH
14300: LD_INT 12
14302: PUSH
14303: LD_INT 13
14305: PUSH
14306: LD_INT 14
14308: PUSH
14309: LD_INT 15
14311: PUSH
14312: LD_INT 16
14314: PUSH
14315: LD_INT 17
14317: PUSH
14318: LD_INT 18
14320: PUSH
14321: LD_INT 19
14323: PUSH
14324: LD_INT 20
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: LD_INT 23
14335: PUSH
14336: LD_INT 24
14338: PUSH
14339: LD_INT 25
14341: PUSH
14342: LD_INT 26
14344: PUSH
14345: LD_INT 27
14347: PUSH
14348: LD_INT 28
14350: PUSH
14351: LD_INT 29
14353: PUSH
14354: LD_INT 30
14356: PUSH
14357: LD_INT 31
14359: PUSH
14360: LD_INT 32
14362: PUSH
14363: LD_INT 33
14365: PUSH
14366: LD_INT 34
14368: PUSH
14369: LD_INT 35
14371: PUSH
14372: LD_INT 36
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 101
14415: PUSH
14416: LD_INT 102
14418: PUSH
14419: LD_INT 103
14421: PUSH
14422: LD_INT 104
14424: PUSH
14425: LD_INT 105
14427: PUSH
14428: LD_INT 106
14430: PUSH
14431: LD_INT 107
14433: PUSH
14434: LD_INT 108
14436: PUSH
14437: LD_INT 109
14439: PUSH
14440: LD_INT 110
14442: PUSH
14443: LD_INT 111
14445: PUSH
14446: LD_INT 112
14448: PUSH
14449: LD_INT 113
14451: PUSH
14452: LD_INT 114
14454: PUSH
14455: LD_INT 115
14457: PUSH
14458: LD_INT 116
14460: PUSH
14461: LD_INT 117
14463: PUSH
14464: LD_INT 118
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: ST_TO_ADDR
14491: GO 14494
14493: POP
// end else
14494: GO 14725
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14496: LD_ADDR_VAR 0 2
14500: PUSH
14501: LD_INT 1
14503: PUSH
14504: LD_INT 2
14506: PUSH
14507: LD_INT 3
14509: PUSH
14510: LD_INT 4
14512: PUSH
14513: LD_INT 5
14515: PUSH
14516: LD_INT 6
14518: PUSH
14519: LD_INT 7
14521: PUSH
14522: LD_INT 8
14524: PUSH
14525: LD_INT 9
14527: PUSH
14528: LD_INT 10
14530: PUSH
14531: LD_INT 11
14533: PUSH
14534: LD_INT 12
14536: PUSH
14537: LD_INT 13
14539: PUSH
14540: LD_INT 14
14542: PUSH
14543: LD_INT 15
14545: PUSH
14546: LD_INT 16
14548: PUSH
14549: LD_INT 17
14551: PUSH
14552: LD_INT 18
14554: PUSH
14555: LD_INT 19
14557: PUSH
14558: LD_INT 20
14560: PUSH
14561: LD_INT 21
14563: PUSH
14564: LD_INT 22
14566: PUSH
14567: LD_INT 23
14569: PUSH
14570: LD_INT 24
14572: PUSH
14573: LD_INT 25
14575: PUSH
14576: LD_INT 26
14578: PUSH
14579: LD_INT 27
14581: PUSH
14582: LD_INT 28
14584: PUSH
14585: LD_INT 29
14587: PUSH
14588: LD_INT 30
14590: PUSH
14591: LD_INT 31
14593: PUSH
14594: LD_INT 32
14596: PUSH
14597: LD_INT 33
14599: PUSH
14600: LD_INT 34
14602: PUSH
14603: LD_INT 35
14605: PUSH
14606: LD_INT 36
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 101
14649: PUSH
14650: LD_INT 102
14652: PUSH
14653: LD_INT 103
14655: PUSH
14656: LD_INT 104
14658: PUSH
14659: LD_INT 105
14661: PUSH
14662: LD_INT 106
14664: PUSH
14665: LD_INT 107
14667: PUSH
14668: LD_INT 108
14670: PUSH
14671: LD_INT 109
14673: PUSH
14674: LD_INT 110
14676: PUSH
14677: LD_INT 111
14679: PUSH
14680: LD_INT 112
14682: PUSH
14683: LD_INT 113
14685: PUSH
14686: LD_INT 114
14688: PUSH
14689: LD_INT 115
14691: PUSH
14692: LD_INT 116
14694: PUSH
14695: LD_INT 117
14697: PUSH
14698: LD_INT 118
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: ST_TO_ADDR
// if result then
14725: LD_VAR 0 2
14729: IFFALSE 15515
// begin normal :=  ;
14731: LD_ADDR_VAR 0 5
14735: PUSH
14736: LD_STRING 
14738: ST_TO_ADDR
// hardcore :=  ;
14739: LD_ADDR_VAR 0 6
14743: PUSH
14744: LD_STRING 
14746: ST_TO_ADDR
// active :=  ;
14747: LD_ADDR_VAR 0 7
14751: PUSH
14752: LD_STRING 
14754: ST_TO_ADDR
// for i = 1 to normalCounter do
14755: LD_ADDR_VAR 0 8
14759: PUSH
14760: DOUBLE
14761: LD_INT 1
14763: DEC
14764: ST_TO_ADDR
14765: LD_EXP 27
14769: PUSH
14770: FOR_TO
14771: IFFALSE 14872
// begin tmp := 0 ;
14773: LD_ADDR_VAR 0 3
14777: PUSH
14778: LD_STRING 0
14780: ST_TO_ADDR
// if result [ 1 ] then
14781: LD_VAR 0 2
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: IFFALSE 14854
// if result [ 1 ] [ 1 ] = i then
14791: LD_VAR 0 2
14795: PUSH
14796: LD_INT 1
14798: ARRAY
14799: PUSH
14800: LD_INT 1
14802: ARRAY
14803: PUSH
14804: LD_VAR 0 8
14808: EQUAL
14809: IFFALSE 14854
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14811: LD_ADDR_VAR 0 2
14815: PUSH
14816: LD_VAR 0 2
14820: PPUSH
14821: LD_INT 1
14823: PPUSH
14824: LD_VAR 0 2
14828: PUSH
14829: LD_INT 1
14831: ARRAY
14832: PPUSH
14833: LD_INT 1
14835: PPUSH
14836: CALL_OW 3
14840: PPUSH
14841: CALL_OW 1
14845: ST_TO_ADDR
// tmp := 1 ;
14846: LD_ADDR_VAR 0 3
14850: PUSH
14851: LD_STRING 1
14853: ST_TO_ADDR
// end ; normal := normal & tmp ;
14854: LD_ADDR_VAR 0 5
14858: PUSH
14859: LD_VAR 0 5
14863: PUSH
14864: LD_VAR 0 3
14868: STR
14869: ST_TO_ADDR
// end ;
14870: GO 14770
14872: POP
14873: POP
// for i = 1 to hardcoreCounter do
14874: LD_ADDR_VAR 0 8
14878: PUSH
14879: DOUBLE
14880: LD_INT 1
14882: DEC
14883: ST_TO_ADDR
14884: LD_EXP 28
14888: PUSH
14889: FOR_TO
14890: IFFALSE 14995
// begin tmp := 0 ;
14892: LD_ADDR_VAR 0 3
14896: PUSH
14897: LD_STRING 0
14899: ST_TO_ADDR
// if result [ 2 ] then
14900: LD_VAR 0 2
14904: PUSH
14905: LD_INT 2
14907: ARRAY
14908: IFFALSE 14977
// if result [ 2 ] [ 1 ] = 100 + i then
14910: LD_VAR 0 2
14914: PUSH
14915: LD_INT 2
14917: ARRAY
14918: PUSH
14919: LD_INT 1
14921: ARRAY
14922: PUSH
14923: LD_INT 100
14925: PUSH
14926: LD_VAR 0 8
14930: PLUS
14931: EQUAL
14932: IFFALSE 14977
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14934: LD_ADDR_VAR 0 2
14938: PUSH
14939: LD_VAR 0 2
14943: PPUSH
14944: LD_INT 2
14946: PPUSH
14947: LD_VAR 0 2
14951: PUSH
14952: LD_INT 2
14954: ARRAY
14955: PPUSH
14956: LD_INT 1
14958: PPUSH
14959: CALL_OW 3
14963: PPUSH
14964: CALL_OW 1
14968: ST_TO_ADDR
// tmp := 1 ;
14969: LD_ADDR_VAR 0 3
14973: PUSH
14974: LD_STRING 1
14976: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14977: LD_ADDR_VAR 0 6
14981: PUSH
14982: LD_VAR 0 6
14986: PUSH
14987: LD_VAR 0 3
14991: STR
14992: ST_TO_ADDR
// end ;
14993: GO 14889
14995: POP
14996: POP
// if isGameLoad then
14997: LD_VAR 0 1
15001: IFFALSE 15476
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15003: LD_ADDR_VAR 0 4
15007: PUSH
15008: LD_EXP 31
15012: PUSH
15013: LD_EXP 30
15017: PUSH
15018: LD_EXP 32
15022: PUSH
15023: LD_EXP 29
15027: PUSH
15028: LD_EXP 33
15032: PUSH
15033: LD_EXP 34
15037: PUSH
15038: LD_EXP 35
15042: PUSH
15043: LD_EXP 36
15047: PUSH
15048: LD_EXP 37
15052: PUSH
15053: LD_EXP 38
15057: PUSH
15058: LD_EXP 39
15062: PUSH
15063: LD_EXP 40
15067: PUSH
15068: LD_EXP 41
15072: PUSH
15073: LD_EXP 42
15077: PUSH
15078: LD_EXP 50
15082: PUSH
15083: LD_EXP 51
15087: PUSH
15088: LD_EXP 52
15092: PUSH
15093: LD_EXP 53
15097: PUSH
15098: LD_EXP 55
15102: PUSH
15103: LD_EXP 56
15107: PUSH
15108: LD_EXP 57
15112: PUSH
15113: LD_EXP 60
15117: PUSH
15118: LD_EXP 62
15122: PUSH
15123: LD_EXP 63
15127: PUSH
15128: LD_EXP 64
15132: PUSH
15133: LD_EXP 66
15137: PUSH
15138: LD_EXP 67
15142: PUSH
15143: LD_EXP 70
15147: PUSH
15148: LD_EXP 71
15152: PUSH
15153: LD_EXP 72
15157: PUSH
15158: LD_EXP 73
15162: PUSH
15163: LD_EXP 74
15167: PUSH
15168: LD_EXP 75
15172: PUSH
15173: LD_EXP 76
15177: PUSH
15178: LD_EXP 77
15182: PUSH
15183: LD_EXP 78
15187: PUSH
15188: LD_EXP 43
15192: PUSH
15193: LD_EXP 44
15197: PUSH
15198: LD_EXP 47
15202: PUSH
15203: LD_EXP 48
15207: PUSH
15208: LD_EXP 49
15212: PUSH
15213: LD_EXP 45
15217: PUSH
15218: LD_EXP 46
15222: PUSH
15223: LD_EXP 54
15227: PUSH
15228: LD_EXP 58
15232: PUSH
15233: LD_EXP 59
15237: PUSH
15238: LD_EXP 61
15242: PUSH
15243: LD_EXP 65
15247: PUSH
15248: LD_EXP 68
15252: PUSH
15253: LD_EXP 69
15257: PUSH
15258: LD_EXP 79
15262: PUSH
15263: LD_EXP 80
15267: PUSH
15268: LD_EXP 81
15272: PUSH
15273: LD_EXP 82
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: ST_TO_ADDR
// tmp :=  ;
15334: LD_ADDR_VAR 0 3
15338: PUSH
15339: LD_STRING 
15341: ST_TO_ADDR
// for i = 1 to normalCounter do
15342: LD_ADDR_VAR 0 8
15346: PUSH
15347: DOUBLE
15348: LD_INT 1
15350: DEC
15351: ST_TO_ADDR
15352: LD_EXP 27
15356: PUSH
15357: FOR_TO
15358: IFFALSE 15394
// begin if flags [ i ] then
15360: LD_VAR 0 4
15364: PUSH
15365: LD_VAR 0 8
15369: ARRAY
15370: IFFALSE 15392
// tmp := tmp & i & ; ;
15372: LD_ADDR_VAR 0 3
15376: PUSH
15377: LD_VAR 0 3
15381: PUSH
15382: LD_VAR 0 8
15386: STR
15387: PUSH
15388: LD_STRING ;
15390: STR
15391: ST_TO_ADDR
// end ;
15392: GO 15357
15394: POP
15395: POP
// for i = 1 to hardcoreCounter do
15396: LD_ADDR_VAR 0 8
15400: PUSH
15401: DOUBLE
15402: LD_INT 1
15404: DEC
15405: ST_TO_ADDR
15406: LD_EXP 28
15410: PUSH
15411: FOR_TO
15412: IFFALSE 15458
// begin if flags [ normalCounter + i ] then
15414: LD_VAR 0 4
15418: PUSH
15419: LD_EXP 27
15423: PUSH
15424: LD_VAR 0 8
15428: PLUS
15429: ARRAY
15430: IFFALSE 15456
// tmp := tmp & ( 100 + i ) & ; ;
15432: LD_ADDR_VAR 0 3
15436: PUSH
15437: LD_VAR 0 3
15441: PUSH
15442: LD_INT 100
15444: PUSH
15445: LD_VAR 0 8
15449: PLUS
15450: STR
15451: PUSH
15452: LD_STRING ;
15454: STR
15455: ST_TO_ADDR
// end ;
15456: GO 15411
15458: POP
15459: POP
// if tmp then
15460: LD_VAR 0 3
15464: IFFALSE 15476
// active := tmp ;
15466: LD_ADDR_VAR 0 7
15470: PUSH
15471: LD_VAR 0 3
15475: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15476: LD_STRING getStreamItemsFromMission("
15478: PUSH
15479: LD_VAR 0 5
15483: STR
15484: PUSH
15485: LD_STRING ","
15487: STR
15488: PUSH
15489: LD_VAR 0 6
15493: STR
15494: PUSH
15495: LD_STRING ","
15497: STR
15498: PUSH
15499: LD_VAR 0 7
15503: STR
15504: PUSH
15505: LD_STRING ")
15507: STR
15508: PPUSH
15509: CALL_OW 559
// end else
15513: GO 15522
// ToLua ( getStreamItemsFromMission("","","") ) ;
15515: LD_STRING getStreamItemsFromMission("","","")
15517: PPUSH
15518: CALL_OW 559
// end ;
15522: LD_VAR 0 2
15526: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15527: LD_EXP 26
15531: PUSH
15532: LD_EXP 31
15536: AND
15537: IFFALSE 15661
15539: GO 15541
15541: DISABLE
15542: LD_INT 0
15544: PPUSH
15545: PPUSH
// begin enable ;
15546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15547: LD_ADDR_VAR 0 2
15551: PUSH
15552: LD_INT 22
15554: PUSH
15555: LD_OWVAR 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: LD_INT 34
15569: PUSH
15570: LD_INT 7
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 34
15579: PUSH
15580: LD_INT 45
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 34
15589: PUSH
15590: LD_INT 28
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 34
15599: PUSH
15600: LD_INT 47
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: ST_TO_ADDR
// if not tmp then
15623: LD_VAR 0 2
15627: NOT
15628: IFFALSE 15632
// exit ;
15630: GO 15661
// for i in tmp do
15632: LD_ADDR_VAR 0 1
15636: PUSH
15637: LD_VAR 0 2
15641: PUSH
15642: FOR_IN
15643: IFFALSE 15659
// begin SetLives ( i , 0 ) ;
15645: LD_VAR 0 1
15649: PPUSH
15650: LD_INT 0
15652: PPUSH
15653: CALL_OW 234
// end ;
15657: GO 15642
15659: POP
15660: POP
// end ;
15661: PPOPN 2
15663: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15664: LD_EXP 26
15668: PUSH
15669: LD_EXP 32
15673: AND
15674: IFFALSE 15758
15676: GO 15678
15678: DISABLE
15679: LD_INT 0
15681: PPUSH
15682: PPUSH
// begin enable ;
15683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15684: LD_ADDR_VAR 0 2
15688: PUSH
15689: LD_INT 22
15691: PUSH
15692: LD_OWVAR 2
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 32
15703: PUSH
15704: LD_INT 3
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PPUSH
15715: CALL_OW 69
15719: ST_TO_ADDR
// if not tmp then
15720: LD_VAR 0 2
15724: NOT
15725: IFFALSE 15729
// exit ;
15727: GO 15758
// for i in tmp do
15729: LD_ADDR_VAR 0 1
15733: PUSH
15734: LD_VAR 0 2
15738: PUSH
15739: FOR_IN
15740: IFFALSE 15756
// begin SetLives ( i , 0 ) ;
15742: LD_VAR 0 1
15746: PPUSH
15747: LD_INT 0
15749: PPUSH
15750: CALL_OW 234
// end ;
15754: GO 15739
15756: POP
15757: POP
// end ;
15758: PPOPN 2
15760: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15761: LD_EXP 26
15765: PUSH
15766: LD_EXP 29
15770: AND
15771: IFFALSE 15864
15773: GO 15775
15775: DISABLE
15776: LD_INT 0
15778: PPUSH
// begin enable ;
15779: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15780: LD_ADDR_VAR 0 1
15784: PUSH
15785: LD_INT 22
15787: PUSH
15788: LD_OWVAR 2
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: LD_INT 25
15802: PUSH
15803: LD_INT 5
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 25
15812: PUSH
15813: LD_INT 9
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 8
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PPUSH
15840: CALL_OW 69
15844: PUSH
15845: FOR_IN
15846: IFFALSE 15862
// begin SetClass ( i , 1 ) ;
15848: LD_VAR 0 1
15852: PPUSH
15853: LD_INT 1
15855: PPUSH
15856: CALL_OW 336
// end ;
15860: GO 15845
15862: POP
15863: POP
// end ;
15864: PPOPN 1
15866: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15867: LD_EXP 26
15871: PUSH
15872: LD_EXP 30
15876: AND
15877: PUSH
15878: LD_OWVAR 65
15882: PUSH
15883: LD_INT 7
15885: LESS
15886: AND
15887: IFFALSE 15901
15889: GO 15891
15891: DISABLE
// begin enable ;
15892: ENABLE
// game_speed := 7 ;
15893: LD_ADDR_OWVAR 65
15897: PUSH
15898: LD_INT 7
15900: ST_TO_ADDR
// end ;
15901: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15902: LD_EXP 26
15906: PUSH
15907: LD_EXP 33
15911: AND
15912: IFFALSE 16114
15914: GO 15916
15916: DISABLE
15917: LD_INT 0
15919: PPUSH
15920: PPUSH
15921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15922: LD_ADDR_VAR 0 3
15926: PUSH
15927: LD_INT 81
15929: PUSH
15930: LD_OWVAR 2
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 21
15941: PUSH
15942: LD_INT 1
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PPUSH
15953: CALL_OW 69
15957: ST_TO_ADDR
// if not tmp then
15958: LD_VAR 0 3
15962: NOT
15963: IFFALSE 15967
// exit ;
15965: GO 16114
// if tmp > 5 then
15967: LD_VAR 0 3
15971: PUSH
15972: LD_INT 5
15974: GREATER
15975: IFFALSE 15987
// k := 5 else
15977: LD_ADDR_VAR 0 2
15981: PUSH
15982: LD_INT 5
15984: ST_TO_ADDR
15985: GO 15997
// k := tmp ;
15987: LD_ADDR_VAR 0 2
15991: PUSH
15992: LD_VAR 0 3
15996: ST_TO_ADDR
// for i := 1 to k do
15997: LD_ADDR_VAR 0 1
16001: PUSH
16002: DOUBLE
16003: LD_INT 1
16005: DEC
16006: ST_TO_ADDR
16007: LD_VAR 0 2
16011: PUSH
16012: FOR_TO
16013: IFFALSE 16112
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16015: LD_VAR 0 3
16019: PUSH
16020: LD_VAR 0 1
16024: ARRAY
16025: PPUSH
16026: LD_VAR 0 1
16030: PUSH
16031: LD_INT 4
16033: MOD
16034: PUSH
16035: LD_INT 1
16037: PLUS
16038: PPUSH
16039: CALL_OW 259
16043: PUSH
16044: LD_INT 10
16046: LESS
16047: IFFALSE 16110
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16049: LD_VAR 0 3
16053: PUSH
16054: LD_VAR 0 1
16058: ARRAY
16059: PPUSH
16060: LD_VAR 0 1
16064: PUSH
16065: LD_INT 4
16067: MOD
16068: PUSH
16069: LD_INT 1
16071: PLUS
16072: PPUSH
16073: LD_VAR 0 3
16077: PUSH
16078: LD_VAR 0 1
16082: ARRAY
16083: PPUSH
16084: LD_VAR 0 1
16088: PUSH
16089: LD_INT 4
16091: MOD
16092: PUSH
16093: LD_INT 1
16095: PLUS
16096: PPUSH
16097: CALL_OW 259
16101: PUSH
16102: LD_INT 1
16104: PLUS
16105: PPUSH
16106: CALL_OW 237
16110: GO 16012
16112: POP
16113: POP
// end ;
16114: PPOPN 3
16116: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16117: LD_EXP 26
16121: PUSH
16122: LD_EXP 34
16126: AND
16127: IFFALSE 16147
16129: GO 16131
16131: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16132: LD_INT 4
16134: PPUSH
16135: LD_OWVAR 2
16139: PPUSH
16140: LD_INT 0
16142: PPUSH
16143: CALL_OW 324
16147: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16148: LD_EXP 26
16152: PUSH
16153: LD_EXP 63
16157: AND
16158: IFFALSE 16178
16160: GO 16162
16162: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16163: LD_INT 19
16165: PPUSH
16166: LD_OWVAR 2
16170: PPUSH
16171: LD_INT 0
16173: PPUSH
16174: CALL_OW 324
16178: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16179: LD_EXP 26
16183: PUSH
16184: LD_EXP 35
16188: AND
16189: IFFALSE 16291
16191: GO 16193
16193: DISABLE
16194: LD_INT 0
16196: PPUSH
16197: PPUSH
// begin enable ;
16198: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_OWVAR 2
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 2
16218: PUSH
16219: LD_INT 34
16221: PUSH
16222: LD_INT 11
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 34
16231: PUSH
16232: LD_INT 30
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: LIST
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: ST_TO_ADDR
// if not tmp then
16253: LD_VAR 0 2
16257: NOT
16258: IFFALSE 16262
// exit ;
16260: GO 16291
// for i in tmp do
16262: LD_ADDR_VAR 0 1
16266: PUSH
16267: LD_VAR 0 2
16271: PUSH
16272: FOR_IN
16273: IFFALSE 16289
// begin SetLives ( i , 0 ) ;
16275: LD_VAR 0 1
16279: PPUSH
16280: LD_INT 0
16282: PPUSH
16283: CALL_OW 234
// end ;
16287: GO 16272
16289: POP
16290: POP
// end ;
16291: PPOPN 2
16293: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16294: LD_EXP 26
16298: PUSH
16299: LD_EXP 36
16303: AND
16304: IFFALSE 16324
16306: GO 16308
16308: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16309: LD_INT 32
16311: PPUSH
16312: LD_OWVAR 2
16316: PPUSH
16317: LD_INT 0
16319: PPUSH
16320: CALL_OW 324
16324: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16325: LD_EXP 26
16329: PUSH
16330: LD_EXP 37
16334: AND
16335: IFFALSE 16516
16337: GO 16339
16339: DISABLE
16340: LD_INT 0
16342: PPUSH
16343: PPUSH
16344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16345: LD_ADDR_VAR 0 2
16349: PUSH
16350: LD_INT 22
16352: PUSH
16353: LD_OWVAR 2
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 33
16364: PUSH
16365: LD_INT 3
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 69
16380: ST_TO_ADDR
// if not tmp then
16381: LD_VAR 0 2
16385: NOT
16386: IFFALSE 16390
// exit ;
16388: GO 16516
// side := 0 ;
16390: LD_ADDR_VAR 0 3
16394: PUSH
16395: LD_INT 0
16397: ST_TO_ADDR
// for i := 1 to 8 do
16398: LD_ADDR_VAR 0 1
16402: PUSH
16403: DOUBLE
16404: LD_INT 1
16406: DEC
16407: ST_TO_ADDR
16408: LD_INT 8
16410: PUSH
16411: FOR_TO
16412: IFFALSE 16460
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16414: LD_OWVAR 2
16418: PUSH
16419: LD_VAR 0 1
16423: NONEQUAL
16424: PUSH
16425: LD_OWVAR 2
16429: PPUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 81
16439: PUSH
16440: LD_INT 2
16442: EQUAL
16443: AND
16444: IFFALSE 16458
// begin side := i ;
16446: LD_ADDR_VAR 0 3
16450: PUSH
16451: LD_VAR 0 1
16455: ST_TO_ADDR
// break ;
16456: GO 16460
// end ;
16458: GO 16411
16460: POP
16461: POP
// if not side then
16462: LD_VAR 0 3
16466: NOT
16467: IFFALSE 16471
// exit ;
16469: GO 16516
// for i := 1 to tmp do
16471: LD_ADDR_VAR 0 1
16475: PUSH
16476: DOUBLE
16477: LD_INT 1
16479: DEC
16480: ST_TO_ADDR
16481: LD_VAR 0 2
16485: PUSH
16486: FOR_TO
16487: IFFALSE 16514
// if Prob ( 60 ) then
16489: LD_INT 60
16491: PPUSH
16492: CALL_OW 13
16496: IFFALSE 16512
// SetSide ( i , side ) ;
16498: LD_VAR 0 1
16502: PPUSH
16503: LD_VAR 0 3
16507: PPUSH
16508: CALL_OW 235
16512: GO 16486
16514: POP
16515: POP
// end ;
16516: PPOPN 3
16518: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16519: LD_EXP 26
16523: PUSH
16524: LD_EXP 39
16528: AND
16529: IFFALSE 16648
16531: GO 16533
16533: DISABLE
16534: LD_INT 0
16536: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16537: LD_ADDR_VAR 0 1
16541: PUSH
16542: LD_INT 22
16544: PUSH
16545: LD_OWVAR 2
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 21
16556: PUSH
16557: LD_INT 1
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 3
16566: PUSH
16567: LD_INT 23
16569: PUSH
16570: LD_INT 0
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: LIST
16585: PPUSH
16586: CALL_OW 69
16590: PUSH
16591: FOR_IN
16592: IFFALSE 16646
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16594: LD_VAR 0 1
16598: PPUSH
16599: CALL_OW 257
16603: PUSH
16604: LD_INT 1
16606: PUSH
16607: LD_INT 2
16609: PUSH
16610: LD_INT 3
16612: PUSH
16613: LD_INT 4
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: IN
16622: IFFALSE 16644
// SetClass ( un , rand ( 1 , 4 ) ) ;
16624: LD_VAR 0 1
16628: PPUSH
16629: LD_INT 1
16631: PPUSH
16632: LD_INT 4
16634: PPUSH
16635: CALL_OW 12
16639: PPUSH
16640: CALL_OW 336
16644: GO 16591
16646: POP
16647: POP
// end ;
16648: PPOPN 1
16650: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16651: LD_EXP 26
16655: PUSH
16656: LD_EXP 38
16660: AND
16661: IFFALSE 16740
16663: GO 16665
16665: DISABLE
16666: LD_INT 0
16668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16669: LD_ADDR_VAR 0 1
16673: PUSH
16674: LD_INT 22
16676: PUSH
16677: LD_OWVAR 2
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 21
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PPUSH
16700: CALL_OW 69
16704: ST_TO_ADDR
// if not tmp then
16705: LD_VAR 0 1
16709: NOT
16710: IFFALSE 16714
// exit ;
16712: GO 16740
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16714: LD_VAR 0 1
16718: PUSH
16719: LD_INT 1
16721: PPUSH
16722: LD_VAR 0 1
16726: PPUSH
16727: CALL_OW 12
16731: ARRAY
16732: PPUSH
16733: LD_INT 100
16735: PPUSH
16736: CALL_OW 234
// end ;
16740: PPOPN 1
16742: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16743: LD_EXP 26
16747: PUSH
16748: LD_EXP 40
16752: AND
16753: IFFALSE 16851
16755: GO 16757
16757: DISABLE
16758: LD_INT 0
16760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16761: LD_ADDR_VAR 0 1
16765: PUSH
16766: LD_INT 22
16768: PUSH
16769: LD_OWVAR 2
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 21
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PPUSH
16792: CALL_OW 69
16796: ST_TO_ADDR
// if not tmp then
16797: LD_VAR 0 1
16801: NOT
16802: IFFALSE 16806
// exit ;
16804: GO 16851
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16806: LD_VAR 0 1
16810: PUSH
16811: LD_INT 1
16813: PPUSH
16814: LD_VAR 0 1
16818: PPUSH
16819: CALL_OW 12
16823: ARRAY
16824: PPUSH
16825: LD_INT 1
16827: PPUSH
16828: LD_INT 4
16830: PPUSH
16831: CALL_OW 12
16835: PPUSH
16836: LD_INT 3000
16838: PPUSH
16839: LD_INT 9000
16841: PPUSH
16842: CALL_OW 12
16846: PPUSH
16847: CALL_OW 492
// end ;
16851: PPOPN 1
16853: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16854: LD_EXP 26
16858: PUSH
16859: LD_EXP 41
16863: AND
16864: IFFALSE 16884
16866: GO 16868
16868: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16869: LD_INT 1
16871: PPUSH
16872: LD_OWVAR 2
16876: PPUSH
16877: LD_INT 0
16879: PPUSH
16880: CALL_OW 324
16884: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16885: LD_EXP 26
16889: PUSH
16890: LD_EXP 42
16894: AND
16895: IFFALSE 16978
16897: GO 16899
16899: DISABLE
16900: LD_INT 0
16902: PPUSH
16903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16904: LD_ADDR_VAR 0 2
16908: PUSH
16909: LD_INT 22
16911: PUSH
16912: LD_OWVAR 2
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 21
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PPUSH
16935: CALL_OW 69
16939: ST_TO_ADDR
// if not tmp then
16940: LD_VAR 0 2
16944: NOT
16945: IFFALSE 16949
// exit ;
16947: GO 16978
// for i in tmp do
16949: LD_ADDR_VAR 0 1
16953: PUSH
16954: LD_VAR 0 2
16958: PUSH
16959: FOR_IN
16960: IFFALSE 16976
// SetBLevel ( i , 10 ) ;
16962: LD_VAR 0 1
16966: PPUSH
16967: LD_INT 10
16969: PPUSH
16970: CALL_OW 241
16974: GO 16959
16976: POP
16977: POP
// end ;
16978: PPOPN 2
16980: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16981: LD_EXP 26
16985: PUSH
16986: LD_EXP 43
16990: AND
16991: IFFALSE 17102
16993: GO 16995
16995: DISABLE
16996: LD_INT 0
16998: PPUSH
16999: PPUSH
17000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17001: LD_ADDR_VAR 0 3
17005: PUSH
17006: LD_INT 22
17008: PUSH
17009: LD_OWVAR 2
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 25
17020: PUSH
17021: LD_INT 1
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: ST_TO_ADDR
// if not tmp then
17037: LD_VAR 0 3
17041: NOT
17042: IFFALSE 17046
// exit ;
17044: GO 17102
// un := tmp [ rand ( 1 , tmp ) ] ;
17046: LD_ADDR_VAR 0 2
17050: PUSH
17051: LD_VAR 0 3
17055: PUSH
17056: LD_INT 1
17058: PPUSH
17059: LD_VAR 0 3
17063: PPUSH
17064: CALL_OW 12
17068: ARRAY
17069: ST_TO_ADDR
// if Crawls ( un ) then
17070: LD_VAR 0 2
17074: PPUSH
17075: CALL_OW 318
17079: IFFALSE 17090
// ComWalk ( un ) ;
17081: LD_VAR 0 2
17085: PPUSH
17086: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17090: LD_VAR 0 2
17094: PPUSH
17095: LD_INT 5
17097: PPUSH
17098: CALL_OW 336
// end ;
17102: PPOPN 3
17104: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17105: LD_EXP 26
17109: PUSH
17110: LD_EXP 44
17114: AND
17115: PUSH
17116: LD_OWVAR 67
17120: PUSH
17121: LD_INT 4
17123: LESS
17124: AND
17125: IFFALSE 17144
17127: GO 17129
17129: DISABLE
// begin Difficulty := Difficulty + 1 ;
17130: LD_ADDR_OWVAR 67
17134: PUSH
17135: LD_OWVAR 67
17139: PUSH
17140: LD_INT 1
17142: PLUS
17143: ST_TO_ADDR
// end ;
17144: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17145: LD_EXP 26
17149: PUSH
17150: LD_EXP 45
17154: AND
17155: IFFALSE 17258
17157: GO 17159
17159: DISABLE
17160: LD_INT 0
17162: PPUSH
// begin for i := 1 to 5 do
17163: LD_ADDR_VAR 0 1
17167: PUSH
17168: DOUBLE
17169: LD_INT 1
17171: DEC
17172: ST_TO_ADDR
17173: LD_INT 5
17175: PUSH
17176: FOR_TO
17177: IFFALSE 17256
// begin uc_nation := nation_nature ;
17179: LD_ADDR_OWVAR 21
17183: PUSH
17184: LD_INT 0
17186: ST_TO_ADDR
// uc_side := 0 ;
17187: LD_ADDR_OWVAR 20
17191: PUSH
17192: LD_INT 0
17194: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17195: LD_ADDR_OWVAR 29
17199: PUSH
17200: LD_INT 12
17202: PUSH
17203: LD_INT 12
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: ST_TO_ADDR
// hc_agressivity := 20 ;
17210: LD_ADDR_OWVAR 35
17214: PUSH
17215: LD_INT 20
17217: ST_TO_ADDR
// hc_class := class_tiger ;
17218: LD_ADDR_OWVAR 28
17222: PUSH
17223: LD_INT 14
17225: ST_TO_ADDR
// hc_gallery :=  ;
17226: LD_ADDR_OWVAR 33
17230: PUSH
17231: LD_STRING 
17233: ST_TO_ADDR
// hc_name :=  ;
17234: LD_ADDR_OWVAR 26
17238: PUSH
17239: LD_STRING 
17241: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17242: CALL_OW 44
17246: PPUSH
17247: LD_INT 0
17249: PPUSH
17250: CALL_OW 51
// end ;
17254: GO 17176
17256: POP
17257: POP
// end ;
17258: PPOPN 1
17260: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17261: LD_EXP 26
17265: PUSH
17266: LD_EXP 46
17270: AND
17271: IFFALSE 17280
17273: GO 17275
17275: DISABLE
// StreamSibBomb ;
17276: CALL 17281 0 0
17280: END
// export function StreamSibBomb ; var i , x , y ; begin
17281: LD_INT 0
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
// result := false ;
17287: LD_ADDR_VAR 0 1
17291: PUSH
17292: LD_INT 0
17294: ST_TO_ADDR
// for i := 1 to 16 do
17295: LD_ADDR_VAR 0 2
17299: PUSH
17300: DOUBLE
17301: LD_INT 1
17303: DEC
17304: ST_TO_ADDR
17305: LD_INT 16
17307: PUSH
17308: FOR_TO
17309: IFFALSE 17508
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_INT 10
17318: PUSH
17319: LD_INT 20
17321: PUSH
17322: LD_INT 30
17324: PUSH
17325: LD_INT 40
17327: PUSH
17328: LD_INT 50
17330: PUSH
17331: LD_INT 60
17333: PUSH
17334: LD_INT 70
17336: PUSH
17337: LD_INT 80
17339: PUSH
17340: LD_INT 90
17342: PUSH
17343: LD_INT 100
17345: PUSH
17346: LD_INT 110
17348: PUSH
17349: LD_INT 120
17351: PUSH
17352: LD_INT 130
17354: PUSH
17355: LD_INT 140
17357: PUSH
17358: LD_INT 150
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 1
17380: PPUSH
17381: LD_INT 15
17383: PPUSH
17384: CALL_OW 12
17388: ARRAY
17389: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17390: LD_ADDR_VAR 0 4
17394: PUSH
17395: LD_INT 10
17397: PUSH
17398: LD_INT 20
17400: PUSH
17401: LD_INT 30
17403: PUSH
17404: LD_INT 40
17406: PUSH
17407: LD_INT 50
17409: PUSH
17410: LD_INT 60
17412: PUSH
17413: LD_INT 70
17415: PUSH
17416: LD_INT 80
17418: PUSH
17419: LD_INT 90
17421: PUSH
17422: LD_INT 100
17424: PUSH
17425: LD_INT 110
17427: PUSH
17428: LD_INT 120
17430: PUSH
17431: LD_INT 130
17433: PUSH
17434: LD_INT 140
17436: PUSH
17437: LD_INT 150
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 1
17459: PPUSH
17460: LD_INT 15
17462: PPUSH
17463: CALL_OW 12
17467: ARRAY
17468: ST_TO_ADDR
// if ValidHex ( x , y ) then
17469: LD_VAR 0 3
17473: PPUSH
17474: LD_VAR 0 4
17478: PPUSH
17479: CALL_OW 488
17483: IFFALSE 17506
// begin result := [ x , y ] ;
17485: LD_ADDR_VAR 0 1
17489: PUSH
17490: LD_VAR 0 3
17494: PUSH
17495: LD_VAR 0 4
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: ST_TO_ADDR
// break ;
17504: GO 17508
// end ; end ;
17506: GO 17308
17508: POP
17509: POP
// if result then
17510: LD_VAR 0 1
17514: IFFALSE 17574
// begin ToLua ( playSibBomb() ) ;
17516: LD_STRING playSibBomb()
17518: PPUSH
17519: CALL_OW 559
// wait ( 0 0$14 ) ;
17523: LD_INT 490
17525: PPUSH
17526: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17530: LD_VAR 0 1
17534: PUSH
17535: LD_INT 1
17537: ARRAY
17538: PPUSH
17539: LD_VAR 0 1
17543: PUSH
17544: LD_INT 2
17546: ARRAY
17547: PPUSH
17548: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17552: LD_VAR 0 1
17556: PUSH
17557: LD_INT 1
17559: ARRAY
17560: PPUSH
17561: LD_VAR 0 1
17565: PUSH
17566: LD_INT 2
17568: ARRAY
17569: PPUSH
17570: CALL_OW 429
// end ; end ;
17574: LD_VAR 0 1
17578: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17579: LD_EXP 26
17583: PUSH
17584: LD_EXP 48
17588: AND
17589: IFFALSE 17601
17591: GO 17593
17593: DISABLE
// YouLost (  ) ;
17594: LD_STRING 
17596: PPUSH
17597: CALL_OW 104
17601: END
// every 0 0$1 trigger StreamModeActive and sFog do
17602: LD_EXP 26
17606: PUSH
17607: LD_EXP 47
17611: AND
17612: IFFALSE 17626
17614: GO 17616
17616: DISABLE
// FogOff ( your_side ) ;
17617: LD_OWVAR 2
17621: PPUSH
17622: CALL_OW 344
17626: END
// every 0 0$1 trigger StreamModeActive and sSun do
17627: LD_EXP 26
17631: PUSH
17632: LD_EXP 49
17636: AND
17637: IFFALSE 17665
17639: GO 17641
17641: DISABLE
// begin solar_recharge_percent := 0 ;
17642: LD_ADDR_OWVAR 79
17646: PUSH
17647: LD_INT 0
17649: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17650: LD_INT 10500
17652: PPUSH
17653: CALL_OW 67
// solar_recharge_percent := 100 ;
17657: LD_ADDR_OWVAR 79
17661: PUSH
17662: LD_INT 100
17664: ST_TO_ADDR
// end ;
17665: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17666: LD_EXP 26
17670: PUSH
17671: LD_EXP 50
17675: AND
17676: IFFALSE 17915
17678: GO 17680
17680: DISABLE
17681: LD_INT 0
17683: PPUSH
17684: PPUSH
17685: PPUSH
// begin tmp := [ ] ;
17686: LD_ADDR_VAR 0 3
17690: PUSH
17691: EMPTY
17692: ST_TO_ADDR
// for i := 1 to 6 do
17693: LD_ADDR_VAR 0 1
17697: PUSH
17698: DOUBLE
17699: LD_INT 1
17701: DEC
17702: ST_TO_ADDR
17703: LD_INT 6
17705: PUSH
17706: FOR_TO
17707: IFFALSE 17812
// begin uc_nation := nation_nature ;
17709: LD_ADDR_OWVAR 21
17713: PUSH
17714: LD_INT 0
17716: ST_TO_ADDR
// uc_side := 0 ;
17717: LD_ADDR_OWVAR 20
17721: PUSH
17722: LD_INT 0
17724: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17725: LD_ADDR_OWVAR 29
17729: PUSH
17730: LD_INT 12
17732: PUSH
17733: LD_INT 12
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: ST_TO_ADDR
// hc_agressivity := 20 ;
17740: LD_ADDR_OWVAR 35
17744: PUSH
17745: LD_INT 20
17747: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17748: LD_ADDR_OWVAR 28
17752: PUSH
17753: LD_INT 17
17755: ST_TO_ADDR
// hc_gallery :=  ;
17756: LD_ADDR_OWVAR 33
17760: PUSH
17761: LD_STRING 
17763: ST_TO_ADDR
// hc_name :=  ;
17764: LD_ADDR_OWVAR 26
17768: PUSH
17769: LD_STRING 
17771: ST_TO_ADDR
// un := CreateHuman ;
17772: LD_ADDR_VAR 0 2
17776: PUSH
17777: CALL_OW 44
17781: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17782: LD_VAR 0 2
17786: PPUSH
17787: LD_INT 1
17789: PPUSH
17790: CALL_OW 51
// tmp := tmp ^ un ;
17794: LD_ADDR_VAR 0 3
17798: PUSH
17799: LD_VAR 0 3
17803: PUSH
17804: LD_VAR 0 2
17808: ADD
17809: ST_TO_ADDR
// end ;
17810: GO 17706
17812: POP
17813: POP
// repeat wait ( 0 0$1 ) ;
17814: LD_INT 35
17816: PPUSH
17817: CALL_OW 67
// for un in tmp do
17821: LD_ADDR_VAR 0 2
17825: PUSH
17826: LD_VAR 0 3
17830: PUSH
17831: FOR_IN
17832: IFFALSE 17906
// begin if IsDead ( un ) then
17834: LD_VAR 0 2
17838: PPUSH
17839: CALL_OW 301
17843: IFFALSE 17863
// begin tmp := tmp diff un ;
17845: LD_ADDR_VAR 0 3
17849: PUSH
17850: LD_VAR 0 3
17854: PUSH
17855: LD_VAR 0 2
17859: DIFF
17860: ST_TO_ADDR
// continue ;
17861: GO 17831
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17863: LD_VAR 0 2
17867: PPUSH
17868: LD_INT 3
17870: PUSH
17871: LD_INT 22
17873: PUSH
17874: LD_INT 0
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PPUSH
17885: CALL_OW 69
17889: PPUSH
17890: LD_VAR 0 2
17894: PPUSH
17895: CALL_OW 74
17899: PPUSH
17900: CALL_OW 115
// end ;
17904: GO 17831
17906: POP
17907: POP
// until not tmp ;
17908: LD_VAR 0 3
17912: NOT
17913: IFFALSE 17814
// end ;
17915: PPOPN 3
17917: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17918: LD_EXP 26
17922: PUSH
17923: LD_EXP 51
17927: AND
17928: IFFALSE 17982
17930: GO 17932
17932: DISABLE
// begin ToLua ( displayTroll(); ) ;
17933: LD_STRING displayTroll();
17935: PPUSH
17936: CALL_OW 559
// wait ( 3 3$00 ) ;
17940: LD_INT 6300
17942: PPUSH
17943: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17947: LD_STRING hideTroll();
17949: PPUSH
17950: CALL_OW 559
// wait ( 1 1$00 ) ;
17954: LD_INT 2100
17956: PPUSH
17957: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17961: LD_STRING displayTroll();
17963: PPUSH
17964: CALL_OW 559
// wait ( 1 1$00 ) ;
17968: LD_INT 2100
17970: PPUSH
17971: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17975: LD_STRING hideTroll();
17977: PPUSH
17978: CALL_OW 559
// end ;
17982: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17983: LD_EXP 26
17987: PUSH
17988: LD_EXP 52
17992: AND
17993: IFFALSE 18056
17995: GO 17997
17997: DISABLE
17998: LD_INT 0
18000: PPUSH
// begin p := 0 ;
18001: LD_ADDR_VAR 0 1
18005: PUSH
18006: LD_INT 0
18008: ST_TO_ADDR
// repeat game_speed := 1 ;
18009: LD_ADDR_OWVAR 65
18013: PUSH
18014: LD_INT 1
18016: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18017: LD_INT 35
18019: PPUSH
18020: CALL_OW 67
// p := p + 1 ;
18024: LD_ADDR_VAR 0 1
18028: PUSH
18029: LD_VAR 0 1
18033: PUSH
18034: LD_INT 1
18036: PLUS
18037: ST_TO_ADDR
// until p >= 60 ;
18038: LD_VAR 0 1
18042: PUSH
18043: LD_INT 60
18045: GREATEREQUAL
18046: IFFALSE 18009
// game_speed := 4 ;
18048: LD_ADDR_OWVAR 65
18052: PUSH
18053: LD_INT 4
18055: ST_TO_ADDR
// end ;
18056: PPOPN 1
18058: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18059: LD_EXP 26
18063: PUSH
18064: LD_EXP 53
18068: AND
18069: IFFALSE 18215
18071: GO 18073
18073: DISABLE
18074: LD_INT 0
18076: PPUSH
18077: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18078: LD_ADDR_VAR 0 1
18082: PUSH
18083: LD_INT 22
18085: PUSH
18086: LD_OWVAR 2
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 2
18097: PUSH
18098: LD_INT 30
18100: PUSH
18101: LD_INT 0
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 30
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: LIST
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PPUSH
18127: CALL_OW 69
18131: ST_TO_ADDR
// if not depot then
18132: LD_VAR 0 1
18136: NOT
18137: IFFALSE 18141
// exit ;
18139: GO 18215
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18141: LD_ADDR_VAR 0 2
18145: PUSH
18146: LD_VAR 0 1
18150: PUSH
18151: LD_INT 1
18153: PPUSH
18154: LD_VAR 0 1
18158: PPUSH
18159: CALL_OW 12
18163: ARRAY
18164: PPUSH
18165: CALL_OW 274
18169: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18170: LD_VAR 0 2
18174: PPUSH
18175: LD_INT 1
18177: PPUSH
18178: LD_INT 0
18180: PPUSH
18181: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18185: LD_VAR 0 2
18189: PPUSH
18190: LD_INT 2
18192: PPUSH
18193: LD_INT 0
18195: PPUSH
18196: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18200: LD_VAR 0 2
18204: PPUSH
18205: LD_INT 3
18207: PPUSH
18208: LD_INT 0
18210: PPUSH
18211: CALL_OW 277
// end ;
18215: PPOPN 2
18217: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18218: LD_EXP 26
18222: PUSH
18223: LD_EXP 54
18227: AND
18228: IFFALSE 18325
18230: GO 18232
18232: DISABLE
18233: LD_INT 0
18235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18236: LD_ADDR_VAR 0 1
18240: PUSH
18241: LD_INT 22
18243: PUSH
18244: LD_OWVAR 2
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 21
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 3
18265: PUSH
18266: LD_INT 23
18268: PUSH
18269: LD_INT 0
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: PPUSH
18285: CALL_OW 69
18289: ST_TO_ADDR
// if not tmp then
18290: LD_VAR 0 1
18294: NOT
18295: IFFALSE 18299
// exit ;
18297: GO 18325
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18299: LD_VAR 0 1
18303: PUSH
18304: LD_INT 1
18306: PPUSH
18307: LD_VAR 0 1
18311: PPUSH
18312: CALL_OW 12
18316: ARRAY
18317: PPUSH
18318: LD_INT 200
18320: PPUSH
18321: CALL_OW 234
// end ;
18325: PPOPN 1
18327: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18328: LD_EXP 26
18332: PUSH
18333: LD_EXP 55
18337: AND
18338: IFFALSE 18417
18340: GO 18342
18342: DISABLE
18343: LD_INT 0
18345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18346: LD_ADDR_VAR 0 1
18350: PUSH
18351: LD_INT 22
18353: PUSH
18354: LD_OWVAR 2
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 21
18365: PUSH
18366: LD_INT 2
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PPUSH
18377: CALL_OW 69
18381: ST_TO_ADDR
// if not tmp then
18382: LD_VAR 0 1
18386: NOT
18387: IFFALSE 18391
// exit ;
18389: GO 18417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18391: LD_VAR 0 1
18395: PUSH
18396: LD_INT 1
18398: PPUSH
18399: LD_VAR 0 1
18403: PPUSH
18404: CALL_OW 12
18408: ARRAY
18409: PPUSH
18410: LD_INT 60
18412: PPUSH
18413: CALL_OW 234
// end ;
18417: PPOPN 1
18419: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18420: LD_EXP 26
18424: PUSH
18425: LD_EXP 56
18429: AND
18430: IFFALSE 18529
18432: GO 18434
18434: DISABLE
18435: LD_INT 0
18437: PPUSH
18438: PPUSH
// begin enable ;
18439: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18440: LD_ADDR_VAR 0 1
18444: PUSH
18445: LD_INT 22
18447: PUSH
18448: LD_OWVAR 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 61
18459: PUSH
18460: EMPTY
18461: LIST
18462: PUSH
18463: LD_INT 33
18465: PUSH
18466: LD_INT 2
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: LIST
18477: PPUSH
18478: CALL_OW 69
18482: ST_TO_ADDR
// if not tmp then
18483: LD_VAR 0 1
18487: NOT
18488: IFFALSE 18492
// exit ;
18490: GO 18529
// for i in tmp do
18492: LD_ADDR_VAR 0 2
18496: PUSH
18497: LD_VAR 0 1
18501: PUSH
18502: FOR_IN
18503: IFFALSE 18527
// if IsControledBy ( i ) then
18505: LD_VAR 0 2
18509: PPUSH
18510: CALL_OW 312
18514: IFFALSE 18525
// ComUnlink ( i ) ;
18516: LD_VAR 0 2
18520: PPUSH
18521: CALL_OW 136
18525: GO 18502
18527: POP
18528: POP
// end ;
18529: PPOPN 2
18531: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18532: LD_EXP 26
18536: PUSH
18537: LD_EXP 57
18541: AND
18542: IFFALSE 18682
18544: GO 18546
18546: DISABLE
18547: LD_INT 0
18549: PPUSH
18550: PPUSH
// begin ToLua ( displayPowell(); ) ;
18551: LD_STRING displayPowell();
18553: PPUSH
18554: CALL_OW 559
// uc_side := 0 ;
18558: LD_ADDR_OWVAR 20
18562: PUSH
18563: LD_INT 0
18565: ST_TO_ADDR
// uc_nation := 2 ;
18566: LD_ADDR_OWVAR 21
18570: PUSH
18571: LD_INT 2
18573: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18574: LD_ADDR_OWVAR 37
18578: PUSH
18579: LD_INT 14
18581: ST_TO_ADDR
// vc_engine := engine_siberite ;
18582: LD_ADDR_OWVAR 39
18586: PUSH
18587: LD_INT 3
18589: ST_TO_ADDR
// vc_control := control_apeman ;
18590: LD_ADDR_OWVAR 38
18594: PUSH
18595: LD_INT 5
18597: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18598: LD_ADDR_OWVAR 40
18602: PUSH
18603: LD_INT 29
18605: ST_TO_ADDR
// un := CreateVehicle ;
18606: LD_ADDR_VAR 0 2
18610: PUSH
18611: CALL_OW 45
18615: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18616: LD_VAR 0 2
18620: PPUSH
18621: LD_INT 1
18623: PPUSH
18624: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18628: LD_INT 35
18630: PPUSH
18631: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18635: LD_VAR 0 2
18639: PPUSH
18640: LD_INT 22
18642: PUSH
18643: LD_OWVAR 2
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PPUSH
18652: CALL_OW 69
18656: PPUSH
18657: LD_VAR 0 2
18661: PPUSH
18662: CALL_OW 74
18666: PPUSH
18667: CALL_OW 115
// until IsDead ( un ) ;
18671: LD_VAR 0 2
18675: PPUSH
18676: CALL_OW 301
18680: IFFALSE 18628
// end ;
18682: PPOPN 2
18684: END
// every 0 0$1 trigger StreamModeActive and sStu do
18685: LD_EXP 26
18689: PUSH
18690: LD_EXP 65
18694: AND
18695: IFFALSE 18711
18697: GO 18699
18699: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18700: LD_STRING displayStucuk();
18702: PPUSH
18703: CALL_OW 559
// ResetFog ;
18707: CALL_OW 335
// end ;
18711: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18712: LD_EXP 26
18716: PUSH
18717: LD_EXP 58
18721: AND
18722: IFFALSE 18863
18724: GO 18726
18726: DISABLE
18727: LD_INT 0
18729: PPUSH
18730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18731: LD_ADDR_VAR 0 2
18735: PUSH
18736: LD_INT 22
18738: PUSH
18739: LD_OWVAR 2
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 21
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PPUSH
18762: CALL_OW 69
18766: ST_TO_ADDR
// if not tmp then
18767: LD_VAR 0 2
18771: NOT
18772: IFFALSE 18776
// exit ;
18774: GO 18863
// un := tmp [ rand ( 1 , tmp ) ] ;
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: LD_VAR 0 2
18785: PUSH
18786: LD_INT 1
18788: PPUSH
18789: LD_VAR 0 2
18793: PPUSH
18794: CALL_OW 12
18798: ARRAY
18799: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18800: LD_VAR 0 1
18804: PPUSH
18805: LD_INT 0
18807: PPUSH
18808: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_OWVAR 3
18821: PUSH
18822: LD_VAR 0 1
18826: DIFF
18827: PPUSH
18828: LD_VAR 0 1
18832: PPUSH
18833: CALL_OW 74
18837: PPUSH
18838: CALL_OW 115
// wait ( 0 0$20 ) ;
18842: LD_INT 700
18844: PPUSH
18845: CALL_OW 67
// SetSide ( un , your_side ) ;
18849: LD_VAR 0 1
18853: PPUSH
18854: LD_OWVAR 2
18858: PPUSH
18859: CALL_OW 235
// end ;
18863: PPOPN 2
18865: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18866: LD_EXP 26
18870: PUSH
18871: LD_EXP 59
18875: AND
18876: IFFALSE 18982
18878: GO 18880
18880: DISABLE
18881: LD_INT 0
18883: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18884: LD_ADDR_VAR 0 1
18888: PUSH
18889: LD_INT 22
18891: PUSH
18892: LD_OWVAR 2
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 30
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 30
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PPUSH
18933: CALL_OW 69
18937: ST_TO_ADDR
// if not depot then
18938: LD_VAR 0 1
18942: NOT
18943: IFFALSE 18947
// exit ;
18945: GO 18982
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18947: LD_VAR 0 1
18951: PUSH
18952: LD_INT 1
18954: ARRAY
18955: PPUSH
18956: CALL_OW 250
18960: PPUSH
18961: LD_VAR 0 1
18965: PUSH
18966: LD_INT 1
18968: ARRAY
18969: PPUSH
18970: CALL_OW 251
18974: PPUSH
18975: LD_INT 70
18977: PPUSH
18978: CALL_OW 495
// end ;
18982: PPOPN 1
18984: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18985: LD_EXP 26
18989: PUSH
18990: LD_EXP 60
18994: AND
18995: IFFALSE 19206
18997: GO 18999
18999: DISABLE
19000: LD_INT 0
19002: PPUSH
19003: PPUSH
19004: PPUSH
19005: PPUSH
19006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19007: LD_ADDR_VAR 0 5
19011: PUSH
19012: LD_INT 22
19014: PUSH
19015: LD_OWVAR 2
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 21
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: ST_TO_ADDR
// if not tmp then
19043: LD_VAR 0 5
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19206
// for i in tmp do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_VAR 0 5
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19204
// begin d := rand ( 0 , 5 ) ;
19065: LD_ADDR_VAR 0 4
19069: PUSH
19070: LD_INT 0
19072: PPUSH
19073: LD_INT 5
19075: PPUSH
19076: CALL_OW 12
19080: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19081: LD_ADDR_VAR 0 2
19085: PUSH
19086: LD_VAR 0 1
19090: PPUSH
19091: CALL_OW 250
19095: PPUSH
19096: LD_VAR 0 4
19100: PPUSH
19101: LD_INT 3
19103: PPUSH
19104: LD_INT 12
19106: PPUSH
19107: CALL_OW 12
19111: PPUSH
19112: CALL_OW 272
19116: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19117: LD_ADDR_VAR 0 3
19121: PUSH
19122: LD_VAR 0 1
19126: PPUSH
19127: CALL_OW 251
19131: PPUSH
19132: LD_VAR 0 4
19136: PPUSH
19137: LD_INT 3
19139: PPUSH
19140: LD_INT 12
19142: PPUSH
19143: CALL_OW 12
19147: PPUSH
19148: CALL_OW 273
19152: ST_TO_ADDR
// if ValidHex ( x , y ) then
19153: LD_VAR 0 2
19157: PPUSH
19158: LD_VAR 0 3
19162: PPUSH
19163: CALL_OW 488
19167: IFFALSE 19202
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19169: LD_VAR 0 1
19173: PPUSH
19174: LD_VAR 0 2
19178: PPUSH
19179: LD_VAR 0 3
19183: PPUSH
19184: LD_INT 3
19186: PPUSH
19187: LD_INT 6
19189: PPUSH
19190: CALL_OW 12
19194: PPUSH
19195: LD_INT 1
19197: PPUSH
19198: CALL_OW 483
// end ;
19202: GO 19062
19204: POP
19205: POP
// end ;
19206: PPOPN 5
19208: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19209: LD_EXP 26
19213: PUSH
19214: LD_EXP 61
19218: AND
19219: IFFALSE 19313
19221: GO 19223
19223: DISABLE
19224: LD_INT 0
19226: PPUSH
19227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19228: LD_ADDR_VAR 0 2
19232: PUSH
19233: LD_INT 22
19235: PUSH
19236: LD_OWVAR 2
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 32
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 21
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: PPUSH
19270: CALL_OW 69
19274: ST_TO_ADDR
// if not tmp then
19275: LD_VAR 0 2
19279: NOT
19280: IFFALSE 19284
// exit ;
19282: GO 19313
// for i in tmp do
19284: LD_ADDR_VAR 0 1
19288: PUSH
19289: LD_VAR 0 2
19293: PUSH
19294: FOR_IN
19295: IFFALSE 19311
// SetFuel ( i , 0 ) ;
19297: LD_VAR 0 1
19301: PPUSH
19302: LD_INT 0
19304: PPUSH
19305: CALL_OW 240
19309: GO 19294
19311: POP
19312: POP
// end ;
19313: PPOPN 2
19315: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19316: LD_EXP 26
19320: PUSH
19321: LD_EXP 62
19325: AND
19326: IFFALSE 19392
19328: GO 19330
19330: DISABLE
19331: LD_INT 0
19333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19334: LD_ADDR_VAR 0 1
19338: PUSH
19339: LD_INT 22
19341: PUSH
19342: LD_OWVAR 2
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 30
19353: PUSH
19354: LD_INT 29
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PPUSH
19365: CALL_OW 69
19369: ST_TO_ADDR
// if not tmp then
19370: LD_VAR 0 1
19374: NOT
19375: IFFALSE 19379
// exit ;
19377: GO 19392
// DestroyUnit ( tmp [ 1 ] ) ;
19379: LD_VAR 0 1
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: PPUSH
19388: CALL_OW 65
// end ;
19392: PPOPN 1
19394: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19395: LD_EXP 26
19399: PUSH
19400: LD_EXP 64
19404: AND
19405: IFFALSE 19534
19407: GO 19409
19409: DISABLE
19410: LD_INT 0
19412: PPUSH
// begin uc_side := 0 ;
19413: LD_ADDR_OWVAR 20
19417: PUSH
19418: LD_INT 0
19420: ST_TO_ADDR
// uc_nation := nation_arabian ;
19421: LD_ADDR_OWVAR 21
19425: PUSH
19426: LD_INT 2
19428: ST_TO_ADDR
// hc_gallery :=  ;
19429: LD_ADDR_OWVAR 33
19433: PUSH
19434: LD_STRING 
19436: ST_TO_ADDR
// hc_name :=  ;
19437: LD_ADDR_OWVAR 26
19441: PUSH
19442: LD_STRING 
19444: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19445: LD_INT 1
19447: PPUSH
19448: LD_INT 11
19450: PPUSH
19451: LD_INT 10
19453: PPUSH
19454: CALL_OW 380
// un := CreateHuman ;
19458: LD_ADDR_VAR 0 1
19462: PUSH
19463: CALL_OW 44
19467: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_INT 1
19475: PPUSH
19476: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19480: LD_INT 35
19482: PPUSH
19483: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19487: LD_VAR 0 1
19491: PPUSH
19492: LD_INT 22
19494: PUSH
19495: LD_OWVAR 2
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 69
19508: PPUSH
19509: LD_VAR 0 1
19513: PPUSH
19514: CALL_OW 74
19518: PPUSH
19519: CALL_OW 115
// until IsDead ( un ) ;
19523: LD_VAR 0 1
19527: PPUSH
19528: CALL_OW 301
19532: IFFALSE 19480
// end ;
19534: PPOPN 1
19536: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19537: LD_EXP 26
19541: PUSH
19542: LD_EXP 66
19546: AND
19547: IFFALSE 19559
19549: GO 19551
19551: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19552: LD_STRING earthquake(getX(game), 0, 32)
19554: PPUSH
19555: CALL_OW 559
19559: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19560: LD_EXP 26
19564: PUSH
19565: LD_EXP 67
19569: AND
19570: IFFALSE 19661
19572: GO 19574
19574: DISABLE
19575: LD_INT 0
19577: PPUSH
// begin enable ;
19578: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19579: LD_ADDR_VAR 0 1
19583: PUSH
19584: LD_INT 22
19586: PUSH
19587: LD_OWVAR 2
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 21
19598: PUSH
19599: LD_INT 2
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 33
19608: PUSH
19609: LD_INT 3
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: LIST
19620: PPUSH
19621: CALL_OW 69
19625: ST_TO_ADDR
// if not tmp then
19626: LD_VAR 0 1
19630: NOT
19631: IFFALSE 19635
// exit ;
19633: GO 19661
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19635: LD_VAR 0 1
19639: PUSH
19640: LD_INT 1
19642: PPUSH
19643: LD_VAR 0 1
19647: PPUSH
19648: CALL_OW 12
19652: ARRAY
19653: PPUSH
19654: LD_INT 1
19656: PPUSH
19657: CALL_OW 234
// end ;
19661: PPOPN 1
19663: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19664: LD_EXP 26
19668: PUSH
19669: LD_EXP 68
19673: AND
19674: IFFALSE 19815
19676: GO 19678
19678: DISABLE
19679: LD_INT 0
19681: PPUSH
19682: PPUSH
19683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19684: LD_ADDR_VAR 0 3
19688: PUSH
19689: LD_INT 22
19691: PUSH
19692: LD_OWVAR 2
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 25
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PPUSH
19715: CALL_OW 69
19719: ST_TO_ADDR
// if not tmp then
19720: LD_VAR 0 3
19724: NOT
19725: IFFALSE 19729
// exit ;
19727: GO 19815
// un := tmp [ rand ( 1 , tmp ) ] ;
19729: LD_ADDR_VAR 0 2
19733: PUSH
19734: LD_VAR 0 3
19738: PUSH
19739: LD_INT 1
19741: PPUSH
19742: LD_VAR 0 3
19746: PPUSH
19747: CALL_OW 12
19751: ARRAY
19752: ST_TO_ADDR
// if Crawls ( un ) then
19753: LD_VAR 0 2
19757: PPUSH
19758: CALL_OW 318
19762: IFFALSE 19773
// ComWalk ( un ) ;
19764: LD_VAR 0 2
19768: PPUSH
19769: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19773: LD_VAR 0 2
19777: PPUSH
19778: LD_INT 9
19780: PPUSH
19781: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19785: LD_INT 28
19787: PPUSH
19788: LD_OWVAR 2
19792: PPUSH
19793: LD_INT 2
19795: PPUSH
19796: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19800: LD_INT 29
19802: PPUSH
19803: LD_OWVAR 2
19807: PPUSH
19808: LD_INT 2
19810: PPUSH
19811: CALL_OW 322
// end ;
19815: PPOPN 3
19817: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19818: LD_EXP 26
19822: PUSH
19823: LD_EXP 69
19827: AND
19828: IFFALSE 19939
19830: GO 19832
19832: DISABLE
19833: LD_INT 0
19835: PPUSH
19836: PPUSH
19837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19838: LD_ADDR_VAR 0 3
19842: PUSH
19843: LD_INT 22
19845: PUSH
19846: LD_OWVAR 2
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 25
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PPUSH
19869: CALL_OW 69
19873: ST_TO_ADDR
// if not tmp then
19874: LD_VAR 0 3
19878: NOT
19879: IFFALSE 19883
// exit ;
19881: GO 19939
// un := tmp [ rand ( 1 , tmp ) ] ;
19883: LD_ADDR_VAR 0 2
19887: PUSH
19888: LD_VAR 0 3
19892: PUSH
19893: LD_INT 1
19895: PPUSH
19896: LD_VAR 0 3
19900: PPUSH
19901: CALL_OW 12
19905: ARRAY
19906: ST_TO_ADDR
// if Crawls ( un ) then
19907: LD_VAR 0 2
19911: PPUSH
19912: CALL_OW 318
19916: IFFALSE 19927
// ComWalk ( un ) ;
19918: LD_VAR 0 2
19922: PPUSH
19923: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19927: LD_VAR 0 2
19931: PPUSH
19932: LD_INT 8
19934: PPUSH
19935: CALL_OW 336
// end ;
19939: PPOPN 3
19941: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19942: LD_EXP 26
19946: PUSH
19947: LD_EXP 70
19951: AND
19952: IFFALSE 20096
19954: GO 19956
19956: DISABLE
19957: LD_INT 0
19959: PPUSH
19960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19961: LD_ADDR_VAR 0 2
19965: PUSH
19966: LD_INT 22
19968: PUSH
19969: LD_OWVAR 2
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 21
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: LD_INT 34
19993: PUSH
19994: LD_INT 12
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 34
20003: PUSH
20004: LD_INT 51
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 34
20013: PUSH
20014: LD_INT 32
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 69
20036: ST_TO_ADDR
// if not tmp then
20037: LD_VAR 0 2
20041: NOT
20042: IFFALSE 20046
// exit ;
20044: GO 20096
// for i in tmp do
20046: LD_ADDR_VAR 0 1
20050: PUSH
20051: LD_VAR 0 2
20055: PUSH
20056: FOR_IN
20057: IFFALSE 20094
// if GetCargo ( i , mat_artifact ) = 0 then
20059: LD_VAR 0 1
20063: PPUSH
20064: LD_INT 4
20066: PPUSH
20067: CALL_OW 289
20071: PUSH
20072: LD_INT 0
20074: EQUAL
20075: IFFALSE 20092
// SetCargo ( i , mat_siberit , 100 ) ;
20077: LD_VAR 0 1
20081: PPUSH
20082: LD_INT 3
20084: PPUSH
20085: LD_INT 100
20087: PPUSH
20088: CALL_OW 290
20092: GO 20056
20094: POP
20095: POP
// end ;
20096: PPOPN 2
20098: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20099: LD_EXP 26
20103: PUSH
20104: LD_EXP 71
20108: AND
20109: IFFALSE 20292
20111: GO 20113
20113: DISABLE
20114: LD_INT 0
20116: PPUSH
20117: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20118: LD_ADDR_VAR 0 2
20122: PUSH
20123: LD_INT 22
20125: PUSH
20126: LD_OWVAR 2
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PPUSH
20135: CALL_OW 69
20139: ST_TO_ADDR
// if not tmp then
20140: LD_VAR 0 2
20144: NOT
20145: IFFALSE 20149
// exit ;
20147: GO 20292
// for i := 1 to 2 do
20149: LD_ADDR_VAR 0 1
20153: PUSH
20154: DOUBLE
20155: LD_INT 1
20157: DEC
20158: ST_TO_ADDR
20159: LD_INT 2
20161: PUSH
20162: FOR_TO
20163: IFFALSE 20290
// begin uc_side := your_side ;
20165: LD_ADDR_OWVAR 20
20169: PUSH
20170: LD_OWVAR 2
20174: ST_TO_ADDR
// uc_nation := nation_american ;
20175: LD_ADDR_OWVAR 21
20179: PUSH
20180: LD_INT 1
20182: ST_TO_ADDR
// vc_chassis := us_morphling ;
20183: LD_ADDR_OWVAR 37
20187: PUSH
20188: LD_INT 5
20190: ST_TO_ADDR
// vc_engine := engine_siberite ;
20191: LD_ADDR_OWVAR 39
20195: PUSH
20196: LD_INT 3
20198: ST_TO_ADDR
// vc_control := control_computer ;
20199: LD_ADDR_OWVAR 38
20203: PUSH
20204: LD_INT 3
20206: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20207: LD_ADDR_OWVAR 40
20211: PUSH
20212: LD_INT 10
20214: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20215: LD_VAR 0 2
20219: PUSH
20220: LD_INT 1
20222: ARRAY
20223: PPUSH
20224: CALL_OW 310
20228: NOT
20229: IFFALSE 20276
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20231: CALL_OW 45
20235: PPUSH
20236: LD_VAR 0 2
20240: PUSH
20241: LD_INT 1
20243: ARRAY
20244: PPUSH
20245: CALL_OW 250
20249: PPUSH
20250: LD_VAR 0 2
20254: PUSH
20255: LD_INT 1
20257: ARRAY
20258: PPUSH
20259: CALL_OW 251
20263: PPUSH
20264: LD_INT 12
20266: PPUSH
20267: LD_INT 1
20269: PPUSH
20270: CALL_OW 50
20274: GO 20288
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20276: CALL_OW 45
20280: PPUSH
20281: LD_INT 1
20283: PPUSH
20284: CALL_OW 51
// end ;
20288: GO 20162
20290: POP
20291: POP
// end ;
20292: PPOPN 2
20294: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20295: LD_EXP 26
20299: PUSH
20300: LD_EXP 72
20304: AND
20305: IFFALSE 20527
20307: GO 20309
20309: DISABLE
20310: LD_INT 0
20312: PPUSH
20313: PPUSH
20314: PPUSH
20315: PPUSH
20316: PPUSH
20317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20318: LD_ADDR_VAR 0 6
20322: PUSH
20323: LD_INT 22
20325: PUSH
20326: LD_OWVAR 2
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 21
20337: PUSH
20338: LD_INT 1
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 3
20347: PUSH
20348: LD_INT 23
20350: PUSH
20351: LD_INT 0
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: PPUSH
20367: CALL_OW 69
20371: ST_TO_ADDR
// if not tmp then
20372: LD_VAR 0 6
20376: NOT
20377: IFFALSE 20381
// exit ;
20379: GO 20527
// s1 := rand ( 1 , 4 ) ;
20381: LD_ADDR_VAR 0 2
20385: PUSH
20386: LD_INT 1
20388: PPUSH
20389: LD_INT 4
20391: PPUSH
20392: CALL_OW 12
20396: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20397: LD_ADDR_VAR 0 4
20401: PUSH
20402: LD_VAR 0 6
20406: PUSH
20407: LD_INT 1
20409: ARRAY
20410: PPUSH
20411: LD_VAR 0 2
20415: PPUSH
20416: CALL_OW 259
20420: ST_TO_ADDR
// if s1 = 1 then
20421: LD_VAR 0 2
20425: PUSH
20426: LD_INT 1
20428: EQUAL
20429: IFFALSE 20449
// s2 := rand ( 2 , 4 ) else
20431: LD_ADDR_VAR 0 3
20435: PUSH
20436: LD_INT 2
20438: PPUSH
20439: LD_INT 4
20441: PPUSH
20442: CALL_OW 12
20446: ST_TO_ADDR
20447: GO 20457
// s2 := 1 ;
20449: LD_ADDR_VAR 0 3
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20457: LD_ADDR_VAR 0 5
20461: PUSH
20462: LD_VAR 0 6
20466: PUSH
20467: LD_INT 1
20469: ARRAY
20470: PPUSH
20471: LD_VAR 0 3
20475: PPUSH
20476: CALL_OW 259
20480: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20481: LD_VAR 0 6
20485: PUSH
20486: LD_INT 1
20488: ARRAY
20489: PPUSH
20490: LD_VAR 0 2
20494: PPUSH
20495: LD_VAR 0 5
20499: PPUSH
20500: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20504: LD_VAR 0 6
20508: PUSH
20509: LD_INT 1
20511: ARRAY
20512: PPUSH
20513: LD_VAR 0 3
20517: PPUSH
20518: LD_VAR 0 4
20522: PPUSH
20523: CALL_OW 237
// end ;
20527: PPOPN 6
20529: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20530: LD_EXP 26
20534: PUSH
20535: LD_EXP 73
20539: AND
20540: IFFALSE 20619
20542: GO 20544
20544: DISABLE
20545: LD_INT 0
20547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20548: LD_ADDR_VAR 0 1
20552: PUSH
20553: LD_INT 22
20555: PUSH
20556: LD_OWVAR 2
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 30
20567: PUSH
20568: LD_INT 3
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 69
20583: ST_TO_ADDR
// if not tmp then
20584: LD_VAR 0 1
20588: NOT
20589: IFFALSE 20593
// exit ;
20591: GO 20619
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20593: LD_VAR 0 1
20597: PUSH
20598: LD_INT 1
20600: PPUSH
20601: LD_VAR 0 1
20605: PPUSH
20606: CALL_OW 12
20610: ARRAY
20611: PPUSH
20612: LD_INT 1
20614: PPUSH
20615: CALL_OW 234
// end ;
20619: PPOPN 1
20621: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20622: LD_EXP 26
20626: PUSH
20627: LD_EXP 74
20631: AND
20632: IFFALSE 20744
20634: GO 20636
20636: DISABLE
20637: LD_INT 0
20639: PPUSH
20640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20641: LD_ADDR_VAR 0 2
20645: PUSH
20646: LD_INT 22
20648: PUSH
20649: LD_OWVAR 2
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 30
20663: PUSH
20664: LD_INT 27
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 30
20673: PUSH
20674: LD_INT 26
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 30
20683: PUSH
20684: LD_INT 28
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PPUSH
20701: CALL_OW 69
20705: ST_TO_ADDR
// if not tmp then
20706: LD_VAR 0 2
20710: NOT
20711: IFFALSE 20715
// exit ;
20713: GO 20744
// for i in tmp do
20715: LD_ADDR_VAR 0 1
20719: PUSH
20720: LD_VAR 0 2
20724: PUSH
20725: FOR_IN
20726: IFFALSE 20742
// SetLives ( i , 1 ) ;
20728: LD_VAR 0 1
20732: PPUSH
20733: LD_INT 1
20735: PPUSH
20736: CALL_OW 234
20740: GO 20725
20742: POP
20743: POP
// end ;
20744: PPOPN 2
20746: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20747: LD_EXP 26
20751: PUSH
20752: LD_EXP 75
20756: AND
20757: IFFALSE 21044
20759: GO 20761
20761: DISABLE
20762: LD_INT 0
20764: PPUSH
20765: PPUSH
20766: PPUSH
// begin i := rand ( 1 , 7 ) ;
20767: LD_ADDR_VAR 0 1
20771: PUSH
20772: LD_INT 1
20774: PPUSH
20775: LD_INT 7
20777: PPUSH
20778: CALL_OW 12
20782: ST_TO_ADDR
// case i of 1 :
20783: LD_VAR 0 1
20787: PUSH
20788: LD_INT 1
20790: DOUBLE
20791: EQUAL
20792: IFTRUE 20796
20794: GO 20806
20796: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20797: LD_STRING earthquake(getX(game), 0, 32)
20799: PPUSH
20800: CALL_OW 559
20804: GO 21044
20806: LD_INT 2
20808: DOUBLE
20809: EQUAL
20810: IFTRUE 20814
20812: GO 20828
20814: POP
// begin ToLua ( displayStucuk(); ) ;
20815: LD_STRING displayStucuk();
20817: PPUSH
20818: CALL_OW 559
// ResetFog ;
20822: CALL_OW 335
// end ; 3 :
20826: GO 21044
20828: LD_INT 3
20830: DOUBLE
20831: EQUAL
20832: IFTRUE 20836
20834: GO 20940
20836: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20837: LD_ADDR_VAR 0 2
20841: PUSH
20842: LD_INT 22
20844: PUSH
20845: LD_OWVAR 2
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 25
20856: PUSH
20857: LD_INT 1
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PPUSH
20868: CALL_OW 69
20872: ST_TO_ADDR
// if not tmp then
20873: LD_VAR 0 2
20877: NOT
20878: IFFALSE 20882
// exit ;
20880: GO 21044
// un := tmp [ rand ( 1 , tmp ) ] ;
20882: LD_ADDR_VAR 0 3
20886: PUSH
20887: LD_VAR 0 2
20891: PUSH
20892: LD_INT 1
20894: PPUSH
20895: LD_VAR 0 2
20899: PPUSH
20900: CALL_OW 12
20904: ARRAY
20905: ST_TO_ADDR
// if Crawls ( un ) then
20906: LD_VAR 0 3
20910: PPUSH
20911: CALL_OW 318
20915: IFFALSE 20926
// ComWalk ( un ) ;
20917: LD_VAR 0 3
20921: PPUSH
20922: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20926: LD_VAR 0 3
20930: PPUSH
20931: LD_INT 8
20933: PPUSH
20934: CALL_OW 336
// end ; 4 :
20938: GO 21044
20940: LD_INT 4
20942: DOUBLE
20943: EQUAL
20944: IFTRUE 20948
20946: GO 21022
20948: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20949: LD_ADDR_VAR 0 2
20953: PUSH
20954: LD_INT 22
20956: PUSH
20957: LD_OWVAR 2
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 30
20968: PUSH
20969: LD_INT 29
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PPUSH
20980: CALL_OW 69
20984: ST_TO_ADDR
// if not tmp then
20985: LD_VAR 0 2
20989: NOT
20990: IFFALSE 20994
// exit ;
20992: GO 21044
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20994: LD_VAR 0 2
20998: PUSH
20999: LD_INT 1
21001: ARRAY
21002: PPUSH
21003: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21007: LD_VAR 0 2
21011: PUSH
21012: LD_INT 1
21014: ARRAY
21015: PPUSH
21016: CALL_OW 65
// end ; 5 .. 7 :
21020: GO 21044
21022: LD_INT 5
21024: DOUBLE
21025: GREATEREQUAL
21026: IFFALSE 21034
21028: LD_INT 7
21030: DOUBLE
21031: LESSEQUAL
21032: IFTRUE 21036
21034: GO 21043
21036: POP
// StreamSibBomb ; end ;
21037: CALL 17281 0 0
21041: GO 21044
21043: POP
// end ;
21044: PPOPN 3
21046: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21047: LD_EXP 26
21051: PUSH
21052: LD_EXP 76
21056: AND
21057: IFFALSE 21213
21059: GO 21061
21061: DISABLE
21062: LD_INT 0
21064: PPUSH
21065: PPUSH
21066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21067: LD_ADDR_VAR 0 2
21071: PUSH
21072: LD_INT 81
21074: PUSH
21075: LD_OWVAR 2
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: LD_INT 21
21089: PUSH
21090: LD_INT 1
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 21
21099: PUSH
21100: LD_INT 2
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PPUSH
21116: CALL_OW 69
21120: ST_TO_ADDR
// if not tmp then
21121: LD_VAR 0 2
21125: NOT
21126: IFFALSE 21130
// exit ;
21128: GO 21213
// p := 0 ;
21130: LD_ADDR_VAR 0 3
21134: PUSH
21135: LD_INT 0
21137: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21138: LD_INT 35
21140: PPUSH
21141: CALL_OW 67
// p := p + 1 ;
21145: LD_ADDR_VAR 0 3
21149: PUSH
21150: LD_VAR 0 3
21154: PUSH
21155: LD_INT 1
21157: PLUS
21158: ST_TO_ADDR
// for i in tmp do
21159: LD_ADDR_VAR 0 1
21163: PUSH
21164: LD_VAR 0 2
21168: PUSH
21169: FOR_IN
21170: IFFALSE 21201
// if GetLives ( i ) < 1000 then
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL_OW 256
21181: PUSH
21182: LD_INT 1000
21184: LESS
21185: IFFALSE 21199
// SetLives ( i , 1000 ) ;
21187: LD_VAR 0 1
21191: PPUSH
21192: LD_INT 1000
21194: PPUSH
21195: CALL_OW 234
21199: GO 21169
21201: POP
21202: POP
// until p > 20 ;
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 20
21210: GREATER
21211: IFFALSE 21138
// end ;
21213: PPOPN 3
21215: END
// every 0 0$1 trigger StreamModeActive and sTime do
21216: LD_EXP 26
21220: PUSH
21221: LD_EXP 77
21225: AND
21226: IFFALSE 21261
21228: GO 21230
21230: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21231: LD_INT 28
21233: PPUSH
21234: LD_OWVAR 2
21238: PPUSH
21239: LD_INT 2
21241: PPUSH
21242: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21246: LD_INT 30
21248: PPUSH
21249: LD_OWVAR 2
21253: PPUSH
21254: LD_INT 2
21256: PPUSH
21257: CALL_OW 322
// end ;
21261: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21262: LD_EXP 26
21266: PUSH
21267: LD_EXP 78
21271: AND
21272: IFFALSE 21393
21274: GO 21276
21276: DISABLE
21277: LD_INT 0
21279: PPUSH
21280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21281: LD_ADDR_VAR 0 2
21285: PUSH
21286: LD_INT 22
21288: PUSH
21289: LD_OWVAR 2
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 21
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 3
21310: PUSH
21311: LD_INT 23
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: LIST
21329: PPUSH
21330: CALL_OW 69
21334: ST_TO_ADDR
// if not tmp then
21335: LD_VAR 0 2
21339: NOT
21340: IFFALSE 21344
// exit ;
21342: GO 21393
// for i in tmp do
21344: LD_ADDR_VAR 0 1
21348: PUSH
21349: LD_VAR 0 2
21353: PUSH
21354: FOR_IN
21355: IFFALSE 21391
// begin if Crawls ( i ) then
21357: LD_VAR 0 1
21361: PPUSH
21362: CALL_OW 318
21366: IFFALSE 21377
// ComWalk ( i ) ;
21368: LD_VAR 0 1
21372: PPUSH
21373: CALL_OW 138
// SetClass ( i , 2 ) ;
21377: LD_VAR 0 1
21381: PPUSH
21382: LD_INT 2
21384: PPUSH
21385: CALL_OW 336
// end ;
21389: GO 21354
21391: POP
21392: POP
// end ;
21393: PPOPN 2
21395: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21396: LD_EXP 26
21400: PUSH
21401: LD_EXP 79
21405: AND
21406: IFFALSE 21694
21408: GO 21410
21410: DISABLE
21411: LD_INT 0
21413: PPUSH
21414: PPUSH
21415: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21416: LD_OWVAR 2
21420: PPUSH
21421: LD_INT 9
21423: PPUSH
21424: LD_INT 1
21426: PPUSH
21427: LD_INT 1
21429: PPUSH
21430: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21434: LD_INT 9
21436: PPUSH
21437: LD_OWVAR 2
21441: PPUSH
21442: CALL_OW 343
// uc_side := 9 ;
21446: LD_ADDR_OWVAR 20
21450: PUSH
21451: LD_INT 9
21453: ST_TO_ADDR
// uc_nation := 2 ;
21454: LD_ADDR_OWVAR 21
21458: PUSH
21459: LD_INT 2
21461: ST_TO_ADDR
// hc_name := Dark Warrior ;
21462: LD_ADDR_OWVAR 26
21466: PUSH
21467: LD_STRING Dark Warrior
21469: ST_TO_ADDR
// hc_gallery :=  ;
21470: LD_ADDR_OWVAR 33
21474: PUSH
21475: LD_STRING 
21477: ST_TO_ADDR
// hc_noskilllimit := true ;
21478: LD_ADDR_OWVAR 76
21482: PUSH
21483: LD_INT 1
21485: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21486: LD_ADDR_OWVAR 31
21490: PUSH
21491: LD_INT 30
21493: PUSH
21494: LD_INT 30
21496: PUSH
21497: LD_INT 30
21499: PUSH
21500: LD_INT 30
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: ST_TO_ADDR
// un := CreateHuman ;
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: CALL_OW 44
21518: ST_TO_ADDR
// hc_noskilllimit := false ;
21519: LD_ADDR_OWVAR 76
21523: PUSH
21524: LD_INT 0
21526: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21527: LD_VAR 0 3
21531: PPUSH
21532: LD_INT 1
21534: PPUSH
21535: CALL_OW 51
// ToLua ( playRanger() ) ;
21539: LD_STRING playRanger()
21541: PPUSH
21542: CALL_OW 559
// p := 0 ;
21546: LD_ADDR_VAR 0 2
21550: PUSH
21551: LD_INT 0
21553: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21554: LD_INT 35
21556: PPUSH
21557: CALL_OW 67
// p := p + 1 ;
21561: LD_ADDR_VAR 0 2
21565: PUSH
21566: LD_VAR 0 2
21570: PUSH
21571: LD_INT 1
21573: PLUS
21574: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21575: LD_VAR 0 3
21579: PPUSH
21580: CALL_OW 256
21584: PUSH
21585: LD_INT 1000
21587: LESS
21588: IFFALSE 21602
// SetLives ( un , 1000 ) ;
21590: LD_VAR 0 3
21594: PPUSH
21595: LD_INT 1000
21597: PPUSH
21598: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21602: LD_VAR 0 3
21606: PPUSH
21607: LD_INT 81
21609: PUSH
21610: LD_OWVAR 2
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 91
21621: PUSH
21622: LD_VAR 0 3
21626: PUSH
21627: LD_INT 30
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PPUSH
21639: CALL_OW 69
21643: PPUSH
21644: LD_VAR 0 3
21648: PPUSH
21649: CALL_OW 74
21653: PPUSH
21654: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21658: LD_VAR 0 2
21662: PUSH
21663: LD_INT 80
21665: GREATER
21666: PUSH
21667: LD_VAR 0 3
21671: PPUSH
21672: CALL_OW 301
21676: OR
21677: IFFALSE 21554
// if un then
21679: LD_VAR 0 3
21683: IFFALSE 21694
// RemoveUnit ( un ) ;
21685: LD_VAR 0 3
21689: PPUSH
21690: CALL_OW 64
// end ;
21694: PPOPN 3
21696: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21697: LD_EXP 80
21701: IFFALSE 21817
21703: GO 21705
21705: DISABLE
21706: LD_INT 0
21708: PPUSH
21709: PPUSH
21710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21711: LD_ADDR_VAR 0 2
21715: PUSH
21716: LD_INT 81
21718: PUSH
21719: LD_OWVAR 2
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 21
21730: PUSH
21731: LD_INT 1
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PPUSH
21742: CALL_OW 69
21746: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21747: LD_STRING playComputer()
21749: PPUSH
21750: CALL_OW 559
// if not tmp then
21754: LD_VAR 0 2
21758: NOT
21759: IFFALSE 21763
// exit ;
21761: GO 21817
// for i in tmp do
21763: LD_ADDR_VAR 0 1
21767: PUSH
21768: LD_VAR 0 2
21772: PUSH
21773: FOR_IN
21774: IFFALSE 21815
// for j := 1 to 4 do
21776: LD_ADDR_VAR 0 3
21780: PUSH
21781: DOUBLE
21782: LD_INT 1
21784: DEC
21785: ST_TO_ADDR
21786: LD_INT 4
21788: PUSH
21789: FOR_TO
21790: IFFALSE 21811
// SetSkill ( i , j , 10 ) ;
21792: LD_VAR 0 1
21796: PPUSH
21797: LD_VAR 0 3
21801: PPUSH
21802: LD_INT 10
21804: PPUSH
21805: CALL_OW 237
21809: GO 21789
21811: POP
21812: POP
21813: GO 21773
21815: POP
21816: POP
// end ;
21817: PPOPN 3
21819: END
// every 0 0$1 trigger s30 do var i , tmp ;
21820: LD_EXP 81
21824: IFFALSE 21893
21826: GO 21828
21828: DISABLE
21829: LD_INT 0
21831: PPUSH
21832: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21833: LD_ADDR_VAR 0 2
21837: PUSH
21838: LD_INT 22
21840: PUSH
21841: LD_OWVAR 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PPUSH
21850: CALL_OW 69
21854: ST_TO_ADDR
// if not tmp then
21855: LD_VAR 0 2
21859: NOT
21860: IFFALSE 21864
// exit ;
21862: GO 21893
// for i in tmp do
21864: LD_ADDR_VAR 0 1
21868: PUSH
21869: LD_VAR 0 2
21873: PUSH
21874: FOR_IN
21875: IFFALSE 21891
// SetLives ( i , 300 ) ;
21877: LD_VAR 0 1
21881: PPUSH
21882: LD_INT 300
21884: PPUSH
21885: CALL_OW 234
21889: GO 21874
21891: POP
21892: POP
// end ;
21893: PPOPN 2
21895: END
// every 0 0$1 trigger s60 do var i , tmp ;
21896: LD_EXP 82
21900: IFFALSE 21969
21902: GO 21904
21904: DISABLE
21905: LD_INT 0
21907: PPUSH
21908: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21909: LD_ADDR_VAR 0 2
21913: PUSH
21914: LD_INT 22
21916: PUSH
21917: LD_OWVAR 2
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PPUSH
21926: CALL_OW 69
21930: ST_TO_ADDR
// if not tmp then
21931: LD_VAR 0 2
21935: NOT
21936: IFFALSE 21940
// exit ;
21938: GO 21969
// for i in tmp do
21940: LD_ADDR_VAR 0 1
21944: PUSH
21945: LD_VAR 0 2
21949: PUSH
21950: FOR_IN
21951: IFFALSE 21967
// SetLives ( i , 600 ) ;
21953: LD_VAR 0 1
21957: PPUSH
21958: LD_INT 600
21960: PPUSH
21961: CALL_OW 234
21965: GO 21950
21967: POP
21968: POP
// end ;
21969: PPOPN 2
21971: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21972: LD_INT 0
21974: PPUSH
// case cmd of 301 :
21975: LD_VAR 0 1
21979: PUSH
21980: LD_INT 301
21982: DOUBLE
21983: EQUAL
21984: IFTRUE 21988
21986: GO 22020
21988: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21989: LD_VAR 0 6
21993: PPUSH
21994: LD_VAR 0 7
21998: PPUSH
21999: LD_VAR 0 8
22003: PPUSH
22004: LD_VAR 0 4
22008: PPUSH
22009: LD_VAR 0 5
22013: PPUSH
22014: CALL 23229 0 5
22018: GO 22141
22020: LD_INT 302
22022: DOUBLE
22023: EQUAL
22024: IFTRUE 22028
22026: GO 22065
22028: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22029: LD_VAR 0 6
22033: PPUSH
22034: LD_VAR 0 7
22038: PPUSH
22039: LD_VAR 0 8
22043: PPUSH
22044: LD_VAR 0 9
22048: PPUSH
22049: LD_VAR 0 4
22053: PPUSH
22054: LD_VAR 0 5
22058: PPUSH
22059: CALL 23320 0 6
22063: GO 22141
22065: LD_INT 303
22067: DOUBLE
22068: EQUAL
22069: IFTRUE 22073
22071: GO 22110
22073: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22074: LD_VAR 0 6
22078: PPUSH
22079: LD_VAR 0 7
22083: PPUSH
22084: LD_VAR 0 8
22088: PPUSH
22089: LD_VAR 0 9
22093: PPUSH
22094: LD_VAR 0 4
22098: PPUSH
22099: LD_VAR 0 5
22103: PPUSH
22104: CALL 22146 0 6
22108: GO 22141
22110: LD_INT 304
22112: DOUBLE
22113: EQUAL
22114: IFTRUE 22118
22116: GO 22140
22118: POP
// hHackTeleport ( unit , x , y ) ; end ;
22119: LD_VAR 0 2
22123: PPUSH
22124: LD_VAR 0 4
22128: PPUSH
22129: LD_VAR 0 5
22133: PPUSH
22134: CALL 23913 0 3
22138: GO 22141
22140: POP
// end ;
22141: LD_VAR 0 12
22145: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22146: LD_INT 0
22148: PPUSH
22149: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22150: LD_VAR 0 1
22154: PUSH
22155: LD_INT 1
22157: LESS
22158: PUSH
22159: LD_VAR 0 1
22163: PUSH
22164: LD_INT 3
22166: GREATER
22167: OR
22168: PUSH
22169: LD_VAR 0 5
22173: PPUSH
22174: LD_VAR 0 6
22178: PPUSH
22179: CALL_OW 428
22183: OR
22184: IFFALSE 22188
// exit ;
22186: GO 22916
// uc_side := your_side ;
22188: LD_ADDR_OWVAR 20
22192: PUSH
22193: LD_OWVAR 2
22197: ST_TO_ADDR
// uc_nation := nation ;
22198: LD_ADDR_OWVAR 21
22202: PUSH
22203: LD_VAR 0 1
22207: ST_TO_ADDR
// bc_level = 1 ;
22208: LD_ADDR_OWVAR 43
22212: PUSH
22213: LD_INT 1
22215: ST_TO_ADDR
// case btype of 1 :
22216: LD_VAR 0 2
22220: PUSH
22221: LD_INT 1
22223: DOUBLE
22224: EQUAL
22225: IFTRUE 22229
22227: GO 22240
22229: POP
// bc_type := b_depot ; 2 :
22230: LD_ADDR_OWVAR 42
22234: PUSH
22235: LD_INT 0
22237: ST_TO_ADDR
22238: GO 22860
22240: LD_INT 2
22242: DOUBLE
22243: EQUAL
22244: IFTRUE 22248
22246: GO 22259
22248: POP
// bc_type := b_warehouse ; 3 :
22249: LD_ADDR_OWVAR 42
22253: PUSH
22254: LD_INT 1
22256: ST_TO_ADDR
22257: GO 22860
22259: LD_INT 3
22261: DOUBLE
22262: EQUAL
22263: IFTRUE 22267
22265: GO 22278
22267: POP
// bc_type := b_lab ; 4 .. 9 :
22268: LD_ADDR_OWVAR 42
22272: PUSH
22273: LD_INT 6
22275: ST_TO_ADDR
22276: GO 22860
22278: LD_INT 4
22280: DOUBLE
22281: GREATEREQUAL
22282: IFFALSE 22290
22284: LD_INT 9
22286: DOUBLE
22287: LESSEQUAL
22288: IFTRUE 22292
22290: GO 22352
22292: POP
// begin bc_type := b_lab_half ;
22293: LD_ADDR_OWVAR 42
22297: PUSH
22298: LD_INT 7
22300: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22301: LD_ADDR_OWVAR 44
22305: PUSH
22306: LD_INT 10
22308: PUSH
22309: LD_INT 11
22311: PUSH
22312: LD_INT 12
22314: PUSH
22315: LD_INT 15
22317: PUSH
22318: LD_INT 14
22320: PUSH
22321: LD_INT 13
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: PUSH
22332: LD_VAR 0 2
22336: PUSH
22337: LD_INT 3
22339: MINUS
22340: ARRAY
22341: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22342: LD_ADDR_OWVAR 45
22346: PUSH
22347: LD_INT 9
22349: ST_TO_ADDR
// end ; 10 .. 13 :
22350: GO 22860
22352: LD_INT 10
22354: DOUBLE
22355: GREATEREQUAL
22356: IFFALSE 22364
22358: LD_INT 13
22360: DOUBLE
22361: LESSEQUAL
22362: IFTRUE 22366
22364: GO 22443
22366: POP
// begin bc_type := b_lab_full ;
22367: LD_ADDR_OWVAR 42
22371: PUSH
22372: LD_INT 8
22374: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22375: LD_ADDR_OWVAR 44
22379: PUSH
22380: LD_INT 10
22382: PUSH
22383: LD_INT 12
22385: PUSH
22386: LD_INT 14
22388: PUSH
22389: LD_INT 13
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: PUSH
22398: LD_VAR 0 2
22402: PUSH
22403: LD_INT 9
22405: MINUS
22406: ARRAY
22407: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22408: LD_ADDR_OWVAR 45
22412: PUSH
22413: LD_INT 11
22415: PUSH
22416: LD_INT 15
22418: PUSH
22419: LD_INT 12
22421: PUSH
22422: LD_INT 15
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: PUSH
22431: LD_VAR 0 2
22435: PUSH
22436: LD_INT 9
22438: MINUS
22439: ARRAY
22440: ST_TO_ADDR
// end ; 14 :
22441: GO 22860
22443: LD_INT 14
22445: DOUBLE
22446: EQUAL
22447: IFTRUE 22451
22449: GO 22462
22451: POP
// bc_type := b_workshop ; 15 :
22452: LD_ADDR_OWVAR 42
22456: PUSH
22457: LD_INT 2
22459: ST_TO_ADDR
22460: GO 22860
22462: LD_INT 15
22464: DOUBLE
22465: EQUAL
22466: IFTRUE 22470
22468: GO 22481
22470: POP
// bc_type := b_factory ; 16 :
22471: LD_ADDR_OWVAR 42
22475: PUSH
22476: LD_INT 3
22478: ST_TO_ADDR
22479: GO 22860
22481: LD_INT 16
22483: DOUBLE
22484: EQUAL
22485: IFTRUE 22489
22487: GO 22500
22489: POP
// bc_type := b_ext_gun ; 17 :
22490: LD_ADDR_OWVAR 42
22494: PUSH
22495: LD_INT 17
22497: ST_TO_ADDR
22498: GO 22860
22500: LD_INT 17
22502: DOUBLE
22503: EQUAL
22504: IFTRUE 22508
22506: GO 22536
22508: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22509: LD_ADDR_OWVAR 42
22513: PUSH
22514: LD_INT 19
22516: PUSH
22517: LD_INT 23
22519: PUSH
22520: LD_INT 19
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: PUSH
22528: LD_VAR 0 1
22532: ARRAY
22533: ST_TO_ADDR
22534: GO 22860
22536: LD_INT 18
22538: DOUBLE
22539: EQUAL
22540: IFTRUE 22544
22542: GO 22555
22544: POP
// bc_type := b_ext_radar ; 19 :
22545: LD_ADDR_OWVAR 42
22549: PUSH
22550: LD_INT 20
22552: ST_TO_ADDR
22553: GO 22860
22555: LD_INT 19
22557: DOUBLE
22558: EQUAL
22559: IFTRUE 22563
22561: GO 22574
22563: POP
// bc_type := b_ext_radio ; 20 :
22564: LD_ADDR_OWVAR 42
22568: PUSH
22569: LD_INT 22
22571: ST_TO_ADDR
22572: GO 22860
22574: LD_INT 20
22576: DOUBLE
22577: EQUAL
22578: IFTRUE 22582
22580: GO 22593
22582: POP
// bc_type := b_ext_siberium ; 21 :
22583: LD_ADDR_OWVAR 42
22587: PUSH
22588: LD_INT 21
22590: ST_TO_ADDR
22591: GO 22860
22593: LD_INT 21
22595: DOUBLE
22596: EQUAL
22597: IFTRUE 22601
22599: GO 22612
22601: POP
// bc_type := b_ext_computer ; 22 :
22602: LD_ADDR_OWVAR 42
22606: PUSH
22607: LD_INT 24
22609: ST_TO_ADDR
22610: GO 22860
22612: LD_INT 22
22614: DOUBLE
22615: EQUAL
22616: IFTRUE 22620
22618: GO 22631
22620: POP
// bc_type := b_ext_track ; 23 :
22621: LD_ADDR_OWVAR 42
22625: PUSH
22626: LD_INT 16
22628: ST_TO_ADDR
22629: GO 22860
22631: LD_INT 23
22633: DOUBLE
22634: EQUAL
22635: IFTRUE 22639
22637: GO 22650
22639: POP
// bc_type := b_ext_laser ; 24 :
22640: LD_ADDR_OWVAR 42
22644: PUSH
22645: LD_INT 25
22647: ST_TO_ADDR
22648: GO 22860
22650: LD_INT 24
22652: DOUBLE
22653: EQUAL
22654: IFTRUE 22658
22656: GO 22669
22658: POP
// bc_type := b_control_tower ; 25 :
22659: LD_ADDR_OWVAR 42
22663: PUSH
22664: LD_INT 36
22666: ST_TO_ADDR
22667: GO 22860
22669: LD_INT 25
22671: DOUBLE
22672: EQUAL
22673: IFTRUE 22677
22675: GO 22688
22677: POP
// bc_type := b_breastwork ; 26 :
22678: LD_ADDR_OWVAR 42
22682: PUSH
22683: LD_INT 31
22685: ST_TO_ADDR
22686: GO 22860
22688: LD_INT 26
22690: DOUBLE
22691: EQUAL
22692: IFTRUE 22696
22694: GO 22707
22696: POP
// bc_type := b_bunker ; 27 :
22697: LD_ADDR_OWVAR 42
22701: PUSH
22702: LD_INT 32
22704: ST_TO_ADDR
22705: GO 22860
22707: LD_INT 27
22709: DOUBLE
22710: EQUAL
22711: IFTRUE 22715
22713: GO 22726
22715: POP
// bc_type := b_turret ; 28 :
22716: LD_ADDR_OWVAR 42
22720: PUSH
22721: LD_INT 33
22723: ST_TO_ADDR
22724: GO 22860
22726: LD_INT 28
22728: DOUBLE
22729: EQUAL
22730: IFTRUE 22734
22732: GO 22745
22734: POP
// bc_type := b_armoury ; 29 :
22735: LD_ADDR_OWVAR 42
22739: PUSH
22740: LD_INT 4
22742: ST_TO_ADDR
22743: GO 22860
22745: LD_INT 29
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22764
22753: POP
// bc_type := b_barracks ; 30 :
22754: LD_ADDR_OWVAR 42
22758: PUSH
22759: LD_INT 5
22761: ST_TO_ADDR
22762: GO 22860
22764: LD_INT 30
22766: DOUBLE
22767: EQUAL
22768: IFTRUE 22772
22770: GO 22783
22772: POP
// bc_type := b_solar_power ; 31 :
22773: LD_ADDR_OWVAR 42
22777: PUSH
22778: LD_INT 27
22780: ST_TO_ADDR
22781: GO 22860
22783: LD_INT 31
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 22802
22791: POP
// bc_type := b_oil_power ; 32 :
22792: LD_ADDR_OWVAR 42
22796: PUSH
22797: LD_INT 26
22799: ST_TO_ADDR
22800: GO 22860
22802: LD_INT 32
22804: DOUBLE
22805: EQUAL
22806: IFTRUE 22810
22808: GO 22821
22810: POP
// bc_type := b_siberite_power ; 33 :
22811: LD_ADDR_OWVAR 42
22815: PUSH
22816: LD_INT 28
22818: ST_TO_ADDR
22819: GO 22860
22821: LD_INT 33
22823: DOUBLE
22824: EQUAL
22825: IFTRUE 22829
22827: GO 22840
22829: POP
// bc_type := b_oil_mine ; 34 :
22830: LD_ADDR_OWVAR 42
22834: PUSH
22835: LD_INT 29
22837: ST_TO_ADDR
22838: GO 22860
22840: LD_INT 34
22842: DOUBLE
22843: EQUAL
22844: IFTRUE 22848
22846: GO 22859
22848: POP
// bc_type := b_siberite_mine ; end ;
22849: LD_ADDR_OWVAR 42
22853: PUSH
22854: LD_INT 30
22856: ST_TO_ADDR
22857: GO 22860
22859: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22860: LD_ADDR_VAR 0 8
22864: PUSH
22865: LD_VAR 0 5
22869: PPUSH
22870: LD_VAR 0 6
22874: PPUSH
22875: LD_VAR 0 3
22879: PPUSH
22880: CALL_OW 47
22884: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22885: LD_OWVAR 42
22889: PUSH
22890: LD_INT 32
22892: PUSH
22893: LD_INT 33
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: IN
22900: IFFALSE 22916
// PlaceWeaponTurret ( b , weapon ) ;
22902: LD_VAR 0 8
22906: PPUSH
22907: LD_VAR 0 4
22911: PPUSH
22912: CALL_OW 431
// end ;
22916: LD_VAR 0 7
22920: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22921: LD_INT 0
22923: PPUSH
22924: PPUSH
22925: PPUSH
22926: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22927: LD_ADDR_VAR 0 4
22931: PUSH
22932: LD_INT 22
22934: PUSH
22935: LD_OWVAR 2
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 2
22946: PUSH
22947: LD_INT 30
22949: PUSH
22950: LD_INT 0
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 30
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: LIST
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PPUSH
22976: CALL_OW 69
22980: ST_TO_ADDR
// if not tmp then
22981: LD_VAR 0 4
22985: NOT
22986: IFFALSE 22990
// exit ;
22988: GO 23049
// for i in tmp do
22990: LD_ADDR_VAR 0 2
22994: PUSH
22995: LD_VAR 0 4
22999: PUSH
23000: FOR_IN
23001: IFFALSE 23047
// for j = 1 to 3 do
23003: LD_ADDR_VAR 0 3
23007: PUSH
23008: DOUBLE
23009: LD_INT 1
23011: DEC
23012: ST_TO_ADDR
23013: LD_INT 3
23015: PUSH
23016: FOR_TO
23017: IFFALSE 23043
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23019: LD_VAR 0 2
23023: PPUSH
23024: CALL_OW 274
23028: PPUSH
23029: LD_VAR 0 3
23033: PPUSH
23034: LD_INT 99999
23036: PPUSH
23037: CALL_OW 277
23041: GO 23016
23043: POP
23044: POP
23045: GO 23000
23047: POP
23048: POP
// end ;
23049: LD_VAR 0 1
23053: RET
// export function hHackSetLevel10 ; var i , j ; begin
23054: LD_INT 0
23056: PPUSH
23057: PPUSH
23058: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23059: LD_ADDR_VAR 0 2
23063: PUSH
23064: LD_INT 21
23066: PUSH
23067: LD_INT 1
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PPUSH
23074: CALL_OW 69
23078: PUSH
23079: FOR_IN
23080: IFFALSE 23132
// if IsSelected ( i ) then
23082: LD_VAR 0 2
23086: PPUSH
23087: CALL_OW 306
23091: IFFALSE 23130
// begin for j := 1 to 4 do
23093: LD_ADDR_VAR 0 3
23097: PUSH
23098: DOUBLE
23099: LD_INT 1
23101: DEC
23102: ST_TO_ADDR
23103: LD_INT 4
23105: PUSH
23106: FOR_TO
23107: IFFALSE 23128
// SetSkill ( i , j , 10 ) ;
23109: LD_VAR 0 2
23113: PPUSH
23114: LD_VAR 0 3
23118: PPUSH
23119: LD_INT 10
23121: PPUSH
23122: CALL_OW 237
23126: GO 23106
23128: POP
23129: POP
// end ;
23130: GO 23079
23132: POP
23133: POP
// end ;
23134: LD_VAR 0 1
23138: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23139: LD_INT 0
23141: PPUSH
23142: PPUSH
23143: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23144: LD_ADDR_VAR 0 2
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_OWVAR 2
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 21
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PPUSH
23175: CALL_OW 69
23179: PUSH
23180: FOR_IN
23181: IFFALSE 23222
// begin for j := 1 to 4 do
23183: LD_ADDR_VAR 0 3
23187: PUSH
23188: DOUBLE
23189: LD_INT 1
23191: DEC
23192: ST_TO_ADDR
23193: LD_INT 4
23195: PUSH
23196: FOR_TO
23197: IFFALSE 23218
// SetSkill ( i , j , 10 ) ;
23199: LD_VAR 0 2
23203: PPUSH
23204: LD_VAR 0 3
23208: PPUSH
23209: LD_INT 10
23211: PPUSH
23212: CALL_OW 237
23216: GO 23196
23218: POP
23219: POP
// end ;
23220: GO 23180
23222: POP
23223: POP
// end ;
23224: LD_VAR 0 1
23228: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23229: LD_INT 0
23231: PPUSH
// uc_side := your_side ;
23232: LD_ADDR_OWVAR 20
23236: PUSH
23237: LD_OWVAR 2
23241: ST_TO_ADDR
// uc_nation := nation ;
23242: LD_ADDR_OWVAR 21
23246: PUSH
23247: LD_VAR 0 1
23251: ST_TO_ADDR
// InitHc ;
23252: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23256: LD_INT 0
23258: PPUSH
23259: LD_VAR 0 2
23263: PPUSH
23264: LD_VAR 0 3
23268: PPUSH
23269: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23273: LD_VAR 0 4
23277: PPUSH
23278: LD_VAR 0 5
23282: PPUSH
23283: CALL_OW 428
23287: PUSH
23288: LD_INT 0
23290: EQUAL
23291: IFFALSE 23315
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23293: CALL_OW 44
23297: PPUSH
23298: LD_VAR 0 4
23302: PPUSH
23303: LD_VAR 0 5
23307: PPUSH
23308: LD_INT 1
23310: PPUSH
23311: CALL_OW 48
// end ;
23315: LD_VAR 0 6
23319: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23320: LD_INT 0
23322: PPUSH
23323: PPUSH
// uc_side := your_side ;
23324: LD_ADDR_OWVAR 20
23328: PUSH
23329: LD_OWVAR 2
23333: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23334: LD_VAR 0 1
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: LD_INT 4
23350: PUSH
23351: LD_INT 5
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: IN
23361: IFFALSE 23373
// uc_nation := nation_american else
23363: LD_ADDR_OWVAR 21
23367: PUSH
23368: LD_INT 1
23370: ST_TO_ADDR
23371: GO 23416
// if chassis in [ 11 , 12 , 13 , 14 ] then
23373: LD_VAR 0 1
23377: PUSH
23378: LD_INT 11
23380: PUSH
23381: LD_INT 12
23383: PUSH
23384: LD_INT 13
23386: PUSH
23387: LD_INT 14
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: IN
23396: IFFALSE 23408
// uc_nation := nation_arabian else
23398: LD_ADDR_OWVAR 21
23402: PUSH
23403: LD_INT 2
23405: ST_TO_ADDR
23406: GO 23416
// uc_nation := nation_russian ;
23408: LD_ADDR_OWVAR 21
23412: PUSH
23413: LD_INT 3
23415: ST_TO_ADDR
// vc_chassis := chassis ;
23416: LD_ADDR_OWVAR 37
23420: PUSH
23421: LD_VAR 0 1
23425: ST_TO_ADDR
// vc_engine := engine ;
23426: LD_ADDR_OWVAR 39
23430: PUSH
23431: LD_VAR 0 2
23435: ST_TO_ADDR
// vc_control := control ;
23436: LD_ADDR_OWVAR 38
23440: PUSH
23441: LD_VAR 0 3
23445: ST_TO_ADDR
// vc_weapon := weapon ;
23446: LD_ADDR_OWVAR 40
23450: PUSH
23451: LD_VAR 0 4
23455: ST_TO_ADDR
// un := CreateVehicle ;
23456: LD_ADDR_VAR 0 8
23460: PUSH
23461: CALL_OW 45
23465: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23466: LD_VAR 0 8
23470: PPUSH
23471: LD_INT 0
23473: PPUSH
23474: LD_INT 5
23476: PPUSH
23477: CALL_OW 12
23481: PPUSH
23482: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23486: LD_VAR 0 8
23490: PPUSH
23491: LD_VAR 0 5
23495: PPUSH
23496: LD_VAR 0 6
23500: PPUSH
23501: LD_INT 1
23503: PPUSH
23504: CALL_OW 48
// end ;
23508: LD_VAR 0 7
23512: RET
// export hInvincible ; every 1 do
23513: GO 23515
23515: DISABLE
// hInvincible := [ ] ;
23516: LD_ADDR_EXP 83
23520: PUSH
23521: EMPTY
23522: ST_TO_ADDR
23523: END
// every 10 do var i ;
23524: GO 23526
23526: DISABLE
23527: LD_INT 0
23529: PPUSH
// begin enable ;
23530: ENABLE
// if not hInvincible then
23531: LD_EXP 83
23535: NOT
23536: IFFALSE 23540
// exit ;
23538: GO 23584
// for i in hInvincible do
23540: LD_ADDR_VAR 0 1
23544: PUSH
23545: LD_EXP 83
23549: PUSH
23550: FOR_IN
23551: IFFALSE 23582
// if GetLives ( i ) < 1000 then
23553: LD_VAR 0 1
23557: PPUSH
23558: CALL_OW 256
23562: PUSH
23563: LD_INT 1000
23565: LESS
23566: IFFALSE 23580
// SetLives ( i , 1000 ) ;
23568: LD_VAR 0 1
23572: PPUSH
23573: LD_INT 1000
23575: PPUSH
23576: CALL_OW 234
23580: GO 23550
23582: POP
23583: POP
// end ;
23584: PPOPN 1
23586: END
// export function hHackInvincible ; var i ; begin
23587: LD_INT 0
23589: PPUSH
23590: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23591: LD_ADDR_VAR 0 2
23595: PUSH
23596: LD_INT 2
23598: PUSH
23599: LD_INT 21
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 21
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: LIST
23623: PPUSH
23624: CALL_OW 69
23628: PUSH
23629: FOR_IN
23630: IFFALSE 23691
// if IsSelected ( i ) then
23632: LD_VAR 0 2
23636: PPUSH
23637: CALL_OW 306
23641: IFFALSE 23689
// begin if i in hInvincible then
23643: LD_VAR 0 2
23647: PUSH
23648: LD_EXP 83
23652: IN
23653: IFFALSE 23673
// hInvincible := hInvincible diff i else
23655: LD_ADDR_EXP 83
23659: PUSH
23660: LD_EXP 83
23664: PUSH
23665: LD_VAR 0 2
23669: DIFF
23670: ST_TO_ADDR
23671: GO 23689
// hInvincible := hInvincible union i ;
23673: LD_ADDR_EXP 83
23677: PUSH
23678: LD_EXP 83
23682: PUSH
23683: LD_VAR 0 2
23687: UNION
23688: ST_TO_ADDR
// end ;
23689: GO 23629
23691: POP
23692: POP
// end ;
23693: LD_VAR 0 1
23697: RET
// export function hHackInvisible ; var i , j ; begin
23698: LD_INT 0
23700: PPUSH
23701: PPUSH
23702: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23703: LD_ADDR_VAR 0 2
23707: PUSH
23708: LD_INT 21
23710: PUSH
23711: LD_INT 1
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PPUSH
23718: CALL_OW 69
23722: PUSH
23723: FOR_IN
23724: IFFALSE 23748
// if IsSelected ( i ) then
23726: LD_VAR 0 2
23730: PPUSH
23731: CALL_OW 306
23735: IFFALSE 23746
// ComForceInvisible ( i ) ;
23737: LD_VAR 0 2
23741: PPUSH
23742: CALL_OW 496
23746: GO 23723
23748: POP
23749: POP
// end ;
23750: LD_VAR 0 1
23754: RET
// export function hHackChangeYourSide ; begin
23755: LD_INT 0
23757: PPUSH
// if your_side = 8 then
23758: LD_OWVAR 2
23762: PUSH
23763: LD_INT 8
23765: EQUAL
23766: IFFALSE 23778
// your_side := 0 else
23768: LD_ADDR_OWVAR 2
23772: PUSH
23773: LD_INT 0
23775: ST_TO_ADDR
23776: GO 23792
// your_side := your_side + 1 ;
23778: LD_ADDR_OWVAR 2
23782: PUSH
23783: LD_OWVAR 2
23787: PUSH
23788: LD_INT 1
23790: PLUS
23791: ST_TO_ADDR
// end ;
23792: LD_VAR 0 1
23796: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23797: LD_INT 0
23799: PPUSH
23800: PPUSH
23801: PPUSH
// for i in all_units do
23802: LD_ADDR_VAR 0 2
23806: PUSH
23807: LD_OWVAR 3
23811: PUSH
23812: FOR_IN
23813: IFFALSE 23891
// if IsSelected ( i ) then
23815: LD_VAR 0 2
23819: PPUSH
23820: CALL_OW 306
23824: IFFALSE 23889
// begin j := GetSide ( i ) ;
23826: LD_ADDR_VAR 0 3
23830: PUSH
23831: LD_VAR 0 2
23835: PPUSH
23836: CALL_OW 255
23840: ST_TO_ADDR
// if j = 8 then
23841: LD_VAR 0 3
23845: PUSH
23846: LD_INT 8
23848: EQUAL
23849: IFFALSE 23861
// j := 0 else
23851: LD_ADDR_VAR 0 3
23855: PUSH
23856: LD_INT 0
23858: ST_TO_ADDR
23859: GO 23875
// j := j + 1 ;
23861: LD_ADDR_VAR 0 3
23865: PUSH
23866: LD_VAR 0 3
23870: PUSH
23871: LD_INT 1
23873: PLUS
23874: ST_TO_ADDR
// SetSide ( i , j ) ;
23875: LD_VAR 0 2
23879: PPUSH
23880: LD_VAR 0 3
23884: PPUSH
23885: CALL_OW 235
// end ;
23889: GO 23812
23891: POP
23892: POP
// end ;
23893: LD_VAR 0 1
23897: RET
// export function hHackFog ; begin
23898: LD_INT 0
23900: PPUSH
// FogOff ( true ) ;
23901: LD_INT 1
23903: PPUSH
23904: CALL_OW 344
// end ;
23908: LD_VAR 0 1
23912: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23913: LD_INT 0
23915: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23916: LD_VAR 0 1
23920: PPUSH
23921: LD_VAR 0 2
23925: PPUSH
23926: LD_VAR 0 3
23930: PPUSH
23931: LD_INT 1
23933: PPUSH
23934: LD_INT 1
23936: PPUSH
23937: CALL_OW 483
// CenterOnXY ( x , y ) ;
23941: LD_VAR 0 2
23945: PPUSH
23946: LD_VAR 0 3
23950: PPUSH
23951: CALL_OW 84
// end ;
23955: LD_VAR 0 4
23959: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23960: LD_INT 0
23962: PPUSH
23963: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23964: LD_VAR 0 1
23968: NOT
23969: PUSH
23970: LD_VAR 0 2
23974: PPUSH
23975: LD_VAR 0 3
23979: PPUSH
23980: CALL_OW 488
23984: NOT
23985: OR
23986: PUSH
23987: LD_VAR 0 1
23991: PPUSH
23992: CALL_OW 266
23996: PUSH
23997: LD_INT 3
23999: NONEQUAL
24000: PUSH
24001: LD_VAR 0 1
24005: PPUSH
24006: CALL_OW 247
24010: PUSH
24011: LD_INT 1
24013: EQUAL
24014: NOT
24015: AND
24016: OR
24017: IFFALSE 24021
// exit ;
24019: GO 24170
// if GetType ( factory ) = unit_human then
24021: LD_VAR 0 1
24025: PPUSH
24026: CALL_OW 247
24030: PUSH
24031: LD_INT 1
24033: EQUAL
24034: IFFALSE 24051
// factory := IsInUnit ( factory ) ;
24036: LD_ADDR_VAR 0 1
24040: PUSH
24041: LD_VAR 0 1
24045: PPUSH
24046: CALL_OW 310
24050: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL_OW 266
24060: PUSH
24061: LD_INT 3
24063: NONEQUAL
24064: IFFALSE 24068
// exit ;
24066: GO 24170
// if HexInfo ( x , y ) = factory then
24068: LD_VAR 0 2
24072: PPUSH
24073: LD_VAR 0 3
24077: PPUSH
24078: CALL_OW 428
24082: PUSH
24083: LD_VAR 0 1
24087: EQUAL
24088: IFFALSE 24115
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24090: LD_ADDR_EXP 84
24094: PUSH
24095: LD_EXP 84
24099: PPUSH
24100: LD_VAR 0 1
24104: PPUSH
24105: LD_INT 0
24107: PPUSH
24108: CALL_OW 1
24112: ST_TO_ADDR
24113: GO 24166
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24115: LD_ADDR_EXP 84
24119: PUSH
24120: LD_EXP 84
24124: PPUSH
24125: LD_VAR 0 1
24129: PPUSH
24130: LD_VAR 0 1
24134: PPUSH
24135: CALL_OW 255
24139: PUSH
24140: LD_VAR 0 1
24144: PUSH
24145: LD_VAR 0 2
24149: PUSH
24150: LD_VAR 0 3
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: PPUSH
24161: CALL_OW 1
24165: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24166: CALL 24175 0 0
// end ;
24170: LD_VAR 0 4
24174: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24175: LD_INT 0
24177: PPUSH
24178: PPUSH
24179: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24180: LD_STRING resetFactoryWaypoint();
24182: PPUSH
24183: CALL_OW 559
// if factoryWaypoints then
24187: LD_EXP 84
24191: IFFALSE 24317
// begin list := PrepareArray ( factoryWaypoints ) ;
24193: LD_ADDR_VAR 0 3
24197: PUSH
24198: LD_EXP 84
24202: PPUSH
24203: CALL 70610 0 1
24207: ST_TO_ADDR
// for i := 1 to list do
24208: LD_ADDR_VAR 0 2
24212: PUSH
24213: DOUBLE
24214: LD_INT 1
24216: DEC
24217: ST_TO_ADDR
24218: LD_VAR 0 3
24222: PUSH
24223: FOR_TO
24224: IFFALSE 24315
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24226: LD_STRING setFactoryWaypointXY(
24228: PUSH
24229: LD_VAR 0 3
24233: PUSH
24234: LD_VAR 0 2
24238: ARRAY
24239: PUSH
24240: LD_INT 1
24242: ARRAY
24243: STR
24244: PUSH
24245: LD_STRING ,
24247: STR
24248: PUSH
24249: LD_VAR 0 3
24253: PUSH
24254: LD_VAR 0 2
24258: ARRAY
24259: PUSH
24260: LD_INT 2
24262: ARRAY
24263: STR
24264: PUSH
24265: LD_STRING ,
24267: STR
24268: PUSH
24269: LD_VAR 0 3
24273: PUSH
24274: LD_VAR 0 2
24278: ARRAY
24279: PUSH
24280: LD_INT 3
24282: ARRAY
24283: STR
24284: PUSH
24285: LD_STRING ,
24287: STR
24288: PUSH
24289: LD_VAR 0 3
24293: PUSH
24294: LD_VAR 0 2
24298: ARRAY
24299: PUSH
24300: LD_INT 4
24302: ARRAY
24303: STR
24304: PUSH
24305: LD_STRING )
24307: STR
24308: PPUSH
24309: CALL_OW 559
24313: GO 24223
24315: POP
24316: POP
// end ; end ;
24317: LD_VAR 0 1
24321: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24322: LD_INT 0
24324: PPUSH
// if HexInfo ( x , y ) = warehouse then
24325: LD_VAR 0 2
24329: PPUSH
24330: LD_VAR 0 3
24334: PPUSH
24335: CALL_OW 428
24339: PUSH
24340: LD_VAR 0 1
24344: EQUAL
24345: IFFALSE 24372
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24347: LD_ADDR_EXP 85
24351: PUSH
24352: LD_EXP 85
24356: PPUSH
24357: LD_VAR 0 1
24361: PPUSH
24362: LD_INT 0
24364: PPUSH
24365: CALL_OW 1
24369: ST_TO_ADDR
24370: GO 24423
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24372: LD_ADDR_EXP 85
24376: PUSH
24377: LD_EXP 85
24381: PPUSH
24382: LD_VAR 0 1
24386: PPUSH
24387: LD_VAR 0 1
24391: PPUSH
24392: CALL_OW 255
24396: PUSH
24397: LD_VAR 0 1
24401: PUSH
24402: LD_VAR 0 2
24406: PUSH
24407: LD_VAR 0 3
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: PPUSH
24418: CALL_OW 1
24422: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24423: CALL 24432 0 0
// end ;
24427: LD_VAR 0 4
24431: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24432: LD_INT 0
24434: PPUSH
24435: PPUSH
24436: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24437: LD_STRING resetWarehouseGatheringPoints();
24439: PPUSH
24440: CALL_OW 559
// if warehouseGatheringPoints then
24444: LD_EXP 85
24448: IFFALSE 24574
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24450: LD_ADDR_VAR 0 3
24454: PUSH
24455: LD_EXP 85
24459: PPUSH
24460: CALL 70610 0 1
24464: ST_TO_ADDR
// for i := 1 to list do
24465: LD_ADDR_VAR 0 2
24469: PUSH
24470: DOUBLE
24471: LD_INT 1
24473: DEC
24474: ST_TO_ADDR
24475: LD_VAR 0 3
24479: PUSH
24480: FOR_TO
24481: IFFALSE 24572
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24483: LD_STRING setWarehouseGatheringPointXY(
24485: PUSH
24486: LD_VAR 0 3
24490: PUSH
24491: LD_VAR 0 2
24495: ARRAY
24496: PUSH
24497: LD_INT 1
24499: ARRAY
24500: STR
24501: PUSH
24502: LD_STRING ,
24504: STR
24505: PUSH
24506: LD_VAR 0 3
24510: PUSH
24511: LD_VAR 0 2
24515: ARRAY
24516: PUSH
24517: LD_INT 2
24519: ARRAY
24520: STR
24521: PUSH
24522: LD_STRING ,
24524: STR
24525: PUSH
24526: LD_VAR 0 3
24530: PUSH
24531: LD_VAR 0 2
24535: ARRAY
24536: PUSH
24537: LD_INT 3
24539: ARRAY
24540: STR
24541: PUSH
24542: LD_STRING ,
24544: STR
24545: PUSH
24546: LD_VAR 0 3
24550: PUSH
24551: LD_VAR 0 2
24555: ARRAY
24556: PUSH
24557: LD_INT 4
24559: ARRAY
24560: STR
24561: PUSH
24562: LD_STRING )
24564: STR
24565: PPUSH
24566: CALL_OW 559
24570: GO 24480
24572: POP
24573: POP
// end ; end ;
24574: LD_VAR 0 1
24578: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24579: LD_EXP 85
24583: IFFALSE 25268
24585: GO 24587
24587: DISABLE
24588: LD_INT 0
24590: PPUSH
24591: PPUSH
24592: PPUSH
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
// begin enable ;
24599: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24600: LD_ADDR_VAR 0 3
24604: PUSH
24605: LD_EXP 85
24609: PPUSH
24610: CALL 70610 0 1
24614: ST_TO_ADDR
// if not list then
24615: LD_VAR 0 3
24619: NOT
24620: IFFALSE 24624
// exit ;
24622: GO 25268
// for i := 1 to list do
24624: LD_ADDR_VAR 0 1
24628: PUSH
24629: DOUBLE
24630: LD_INT 1
24632: DEC
24633: ST_TO_ADDR
24634: LD_VAR 0 3
24638: PUSH
24639: FOR_TO
24640: IFFALSE 25266
// begin depot := list [ i ] [ 2 ] ;
24642: LD_ADDR_VAR 0 8
24646: PUSH
24647: LD_VAR 0 3
24651: PUSH
24652: LD_VAR 0 1
24656: ARRAY
24657: PUSH
24658: LD_INT 2
24660: ARRAY
24661: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24662: LD_ADDR_VAR 0 5
24666: PUSH
24667: LD_VAR 0 3
24671: PUSH
24672: LD_VAR 0 1
24676: ARRAY
24677: PUSH
24678: LD_INT 1
24680: ARRAY
24681: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24682: LD_VAR 0 8
24686: PPUSH
24687: CALL_OW 301
24691: PUSH
24692: LD_VAR 0 5
24696: PUSH
24697: LD_VAR 0 8
24701: PPUSH
24702: CALL_OW 255
24706: NONEQUAL
24707: OR
24708: IFFALSE 24737
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24710: LD_ADDR_EXP 85
24714: PUSH
24715: LD_EXP 85
24719: PPUSH
24720: LD_VAR 0 8
24724: PPUSH
24725: LD_INT 0
24727: PPUSH
24728: CALL_OW 1
24732: ST_TO_ADDR
// exit ;
24733: POP
24734: POP
24735: GO 25268
// end ; x := list [ i ] [ 3 ] ;
24737: LD_ADDR_VAR 0 6
24741: PUSH
24742: LD_VAR 0 3
24746: PUSH
24747: LD_VAR 0 1
24751: ARRAY
24752: PUSH
24753: LD_INT 3
24755: ARRAY
24756: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24757: LD_ADDR_VAR 0 7
24761: PUSH
24762: LD_VAR 0 3
24766: PUSH
24767: LD_VAR 0 1
24771: ARRAY
24772: PUSH
24773: LD_INT 4
24775: ARRAY
24776: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24777: LD_ADDR_VAR 0 9
24781: PUSH
24782: LD_VAR 0 6
24786: PPUSH
24787: LD_VAR 0 7
24791: PPUSH
24792: LD_INT 16
24794: PPUSH
24795: CALL 69198 0 3
24799: ST_TO_ADDR
// if not cratesNearbyPoint then
24800: LD_VAR 0 9
24804: NOT
24805: IFFALSE 24811
// exit ;
24807: POP
24808: POP
24809: GO 25268
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24811: LD_ADDR_VAR 0 4
24815: PUSH
24816: LD_INT 22
24818: PUSH
24819: LD_VAR 0 5
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 3
24830: PUSH
24831: LD_INT 60
24833: PUSH
24834: EMPTY
24835: LIST
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 91
24843: PUSH
24844: LD_VAR 0 8
24848: PUSH
24849: LD_INT 6
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 25
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 25
24872: PUSH
24873: LD_INT 16
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: LIST
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: PPUSH
24891: CALL_OW 69
24895: PUSH
24896: LD_VAR 0 8
24900: PPUSH
24901: CALL_OW 313
24905: PPUSH
24906: LD_INT 3
24908: PUSH
24909: LD_INT 60
24911: PUSH
24912: EMPTY
24913: LIST
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 2
24921: PUSH
24922: LD_INT 25
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 25
24934: PUSH
24935: LD_INT 16
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: LIST
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PPUSH
24951: CALL_OW 72
24955: UNION
24956: ST_TO_ADDR
// if tmp then
24957: LD_VAR 0 4
24961: IFFALSE 25041
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24963: LD_ADDR_VAR 0 4
24967: PUSH
24968: LD_VAR 0 4
24972: PPUSH
24973: LD_INT 3
24975: PPUSH
24976: CALL 67167 0 2
24980: ST_TO_ADDR
// for j in tmp do
24981: LD_ADDR_VAR 0 2
24985: PUSH
24986: LD_VAR 0 4
24990: PUSH
24991: FOR_IN
24992: IFFALSE 25035
// begin if IsInUnit ( j ) then
24994: LD_VAR 0 2
24998: PPUSH
24999: CALL_OW 310
25003: IFFALSE 25014
// ComExit ( j ) ;
25005: LD_VAR 0 2
25009: PPUSH
25010: CALL 67250 0 1
// AddComCollect ( j , x , y ) ;
25014: LD_VAR 0 2
25018: PPUSH
25019: LD_VAR 0 6
25023: PPUSH
25024: LD_VAR 0 7
25028: PPUSH
25029: CALL_OW 177
// end ;
25033: GO 24991
25035: POP
25036: POP
// exit ;
25037: POP
25038: POP
25039: GO 25268
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25041: LD_ADDR_VAR 0 4
25045: PUSH
25046: LD_INT 22
25048: PUSH
25049: LD_VAR 0 5
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 91
25060: PUSH
25061: LD_VAR 0 8
25065: PUSH
25066: LD_INT 8
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: LD_INT 34
25079: PUSH
25080: LD_INT 12
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 34
25089: PUSH
25090: LD_INT 51
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 34
25099: PUSH
25100: LD_INT 32
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 34
25109: PUSH
25110: LD_INT 89
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: LIST
25128: PPUSH
25129: CALL_OW 69
25133: ST_TO_ADDR
// if tmp then
25134: LD_VAR 0 4
25138: IFFALSE 25264
// begin for j in tmp do
25140: LD_ADDR_VAR 0 2
25144: PUSH
25145: LD_VAR 0 4
25149: PUSH
25150: FOR_IN
25151: IFFALSE 25262
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25153: LD_VAR 0 2
25157: PPUSH
25158: CALL_OW 262
25162: PUSH
25163: LD_INT 3
25165: EQUAL
25166: PUSH
25167: LD_VAR 0 2
25171: PPUSH
25172: CALL_OW 261
25176: PUSH
25177: LD_INT 20
25179: GREATER
25180: OR
25181: PUSH
25182: LD_VAR 0 2
25186: PPUSH
25187: CALL_OW 314
25191: NOT
25192: AND
25193: PUSH
25194: LD_VAR 0 2
25198: PPUSH
25199: CALL_OW 263
25203: PUSH
25204: LD_INT 1
25206: NONEQUAL
25207: PUSH
25208: LD_VAR 0 2
25212: PPUSH
25213: CALL_OW 311
25217: OR
25218: AND
25219: IFFALSE 25260
// begin ComCollect ( j , x , y ) ;
25221: LD_VAR 0 2
25225: PPUSH
25226: LD_VAR 0 6
25230: PPUSH
25231: LD_VAR 0 7
25235: PPUSH
25236: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25240: LD_VAR 0 2
25244: PPUSH
25245: LD_VAR 0 8
25249: PPUSH
25250: CALL_OW 172
// exit ;
25254: POP
25255: POP
25256: POP
25257: POP
25258: GO 25268
// end ;
25260: GO 25150
25262: POP
25263: POP
// end ; end ;
25264: GO 24639
25266: POP
25267: POP
// end ; end_of_file
25268: PPOPN 9
25270: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25271: LD_INT 0
25273: PPUSH
25274: PPUSH
25275: PPUSH
25276: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25277: LD_VAR 0 1
25281: PPUSH
25282: CALL_OW 264
25286: PUSH
25287: LD_INT 91
25289: EQUAL
25290: IFFALSE 25362
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25292: LD_INT 68
25294: PPUSH
25295: LD_VAR 0 1
25299: PPUSH
25300: CALL_OW 255
25304: PPUSH
25305: CALL_OW 321
25309: PUSH
25310: LD_INT 2
25312: EQUAL
25313: IFFALSE 25325
// eff := 70 else
25315: LD_ADDR_VAR 0 4
25319: PUSH
25320: LD_INT 70
25322: ST_TO_ADDR
25323: GO 25333
// eff := 30 ;
25325: LD_ADDR_VAR 0 4
25329: PUSH
25330: LD_INT 30
25332: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25333: LD_VAR 0 1
25337: PPUSH
25338: CALL_OW 250
25342: PPUSH
25343: LD_VAR 0 1
25347: PPUSH
25348: CALL_OW 251
25352: PPUSH
25353: LD_VAR 0 4
25357: PPUSH
25358: CALL_OW 495
// end ; end ;
25362: LD_VAR 0 2
25366: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25367: LD_INT 0
25369: PPUSH
// end ;
25370: LD_VAR 0 4
25374: RET
// export function SOS_Command ( cmd ) ; begin
25375: LD_INT 0
25377: PPUSH
// end ;
25378: LD_VAR 0 2
25382: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25383: LD_INT 0
25385: PPUSH
// end ;
25386: LD_VAR 0 6
25390: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25391: LD_INT 0
25393: PPUSH
25394: PPUSH
// if not vehicle or not factory then
25395: LD_VAR 0 1
25399: NOT
25400: PUSH
25401: LD_VAR 0 2
25405: NOT
25406: OR
25407: IFFALSE 25411
// exit ;
25409: GO 25642
// if factoryWaypoints >= factory then
25411: LD_EXP 84
25415: PUSH
25416: LD_VAR 0 2
25420: GREATEREQUAL
25421: IFFALSE 25642
// if factoryWaypoints [ factory ] then
25423: LD_EXP 84
25427: PUSH
25428: LD_VAR 0 2
25432: ARRAY
25433: IFFALSE 25642
// begin if GetControl ( vehicle ) = control_manual then
25435: LD_VAR 0 1
25439: PPUSH
25440: CALL_OW 263
25444: PUSH
25445: LD_INT 1
25447: EQUAL
25448: IFFALSE 25529
// begin driver := IsDrivenBy ( vehicle ) ;
25450: LD_ADDR_VAR 0 4
25454: PUSH
25455: LD_VAR 0 1
25459: PPUSH
25460: CALL_OW 311
25464: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25465: LD_VAR 0 4
25469: PPUSH
25470: LD_EXP 84
25474: PUSH
25475: LD_VAR 0 2
25479: ARRAY
25480: PUSH
25481: LD_INT 3
25483: ARRAY
25484: PPUSH
25485: LD_EXP 84
25489: PUSH
25490: LD_VAR 0 2
25494: ARRAY
25495: PUSH
25496: LD_INT 4
25498: ARRAY
25499: PPUSH
25500: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25504: LD_VAR 0 4
25508: PPUSH
25509: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25513: LD_VAR 0 4
25517: PPUSH
25518: LD_VAR 0 2
25522: PPUSH
25523: CALL_OW 180
// end else
25527: GO 25642
// if GetControl ( vehicle ) = control_remote then
25529: LD_VAR 0 1
25533: PPUSH
25534: CALL_OW 263
25538: PUSH
25539: LD_INT 2
25541: EQUAL
25542: IFFALSE 25603
// begin wait ( 0 0$2 ) ;
25544: LD_INT 70
25546: PPUSH
25547: CALL_OW 67
// if Connect ( vehicle ) then
25551: LD_VAR 0 1
25555: PPUSH
25556: CALL 37491 0 1
25560: IFFALSE 25601
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25562: LD_VAR 0 1
25566: PPUSH
25567: LD_EXP 84
25571: PUSH
25572: LD_VAR 0 2
25576: ARRAY
25577: PUSH
25578: LD_INT 3
25580: ARRAY
25581: PPUSH
25582: LD_EXP 84
25586: PUSH
25587: LD_VAR 0 2
25591: ARRAY
25592: PUSH
25593: LD_INT 4
25595: ARRAY
25596: PPUSH
25597: CALL_OW 171
// end else
25601: GO 25642
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25603: LD_VAR 0 1
25607: PPUSH
25608: LD_EXP 84
25612: PUSH
25613: LD_VAR 0 2
25617: ARRAY
25618: PUSH
25619: LD_INT 3
25621: ARRAY
25622: PPUSH
25623: LD_EXP 84
25627: PUSH
25628: LD_VAR 0 2
25632: ARRAY
25633: PUSH
25634: LD_INT 4
25636: ARRAY
25637: PPUSH
25638: CALL_OW 171
// end ; end ;
25642: LD_VAR 0 3
25646: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25647: LD_INT 0
25649: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25650: LD_VAR 0 1
25654: PUSH
25655: LD_INT 250
25657: EQUAL
25658: PUSH
25659: LD_VAR 0 2
25663: PPUSH
25664: CALL_OW 264
25668: PUSH
25669: LD_INT 81
25671: EQUAL
25672: AND
25673: IFFALSE 25694
// MinerPlaceMine ( unit , x , y ) ;
25675: LD_VAR 0 2
25679: PPUSH
25680: LD_VAR 0 4
25684: PPUSH
25685: LD_VAR 0 5
25689: PPUSH
25690: CALL 28079 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25694: LD_VAR 0 1
25698: PUSH
25699: LD_INT 251
25701: EQUAL
25702: PUSH
25703: LD_VAR 0 2
25707: PPUSH
25708: CALL_OW 264
25712: PUSH
25713: LD_INT 81
25715: EQUAL
25716: AND
25717: IFFALSE 25738
// MinerDetonateMine ( unit , x , y ) ;
25719: LD_VAR 0 2
25723: PPUSH
25724: LD_VAR 0 4
25728: PPUSH
25729: LD_VAR 0 5
25733: PPUSH
25734: CALL 28354 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25738: LD_VAR 0 1
25742: PUSH
25743: LD_INT 252
25745: EQUAL
25746: PUSH
25747: LD_VAR 0 2
25751: PPUSH
25752: CALL_OW 264
25756: PUSH
25757: LD_INT 81
25759: EQUAL
25760: AND
25761: IFFALSE 25782
// MinerCreateMinefield ( unit , x , y ) ;
25763: LD_VAR 0 2
25767: PPUSH
25768: LD_VAR 0 4
25772: PPUSH
25773: LD_VAR 0 5
25777: PPUSH
25778: CALL 28771 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25782: LD_VAR 0 1
25786: PUSH
25787: LD_INT 253
25789: EQUAL
25790: PUSH
25791: LD_VAR 0 2
25795: PPUSH
25796: CALL_OW 257
25800: PUSH
25801: LD_INT 5
25803: EQUAL
25804: AND
25805: IFFALSE 25826
// ComBinocular ( unit , x , y ) ;
25807: LD_VAR 0 2
25811: PPUSH
25812: LD_VAR 0 4
25816: PPUSH
25817: LD_VAR 0 5
25821: PPUSH
25822: CALL 29140 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25826: LD_VAR 0 1
25830: PUSH
25831: LD_INT 254
25833: EQUAL
25834: PUSH
25835: LD_VAR 0 2
25839: PPUSH
25840: CALL_OW 264
25844: PUSH
25845: LD_INT 99
25847: EQUAL
25848: AND
25849: PUSH
25850: LD_VAR 0 3
25854: PPUSH
25855: CALL_OW 263
25859: PUSH
25860: LD_INT 3
25862: EQUAL
25863: AND
25864: IFFALSE 25880
// HackDestroyVehicle ( unit , selectedUnit ) ;
25866: LD_VAR 0 2
25870: PPUSH
25871: LD_VAR 0 3
25875: PPUSH
25876: CALL 27443 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25880: LD_VAR 0 1
25884: PUSH
25885: LD_INT 255
25887: EQUAL
25888: PUSH
25889: LD_VAR 0 2
25893: PPUSH
25894: CALL_OW 264
25898: PUSH
25899: LD_INT 14
25901: PUSH
25902: LD_INT 53
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: IN
25909: AND
25910: PUSH
25911: LD_VAR 0 4
25915: PPUSH
25916: LD_VAR 0 5
25920: PPUSH
25921: CALL_OW 488
25925: AND
25926: IFFALSE 25950
// CutTreeXYR ( unit , x , y , 12 ) ;
25928: LD_VAR 0 2
25932: PPUSH
25933: LD_VAR 0 4
25937: PPUSH
25938: LD_VAR 0 5
25942: PPUSH
25943: LD_INT 12
25945: PPUSH
25946: CALL 26013 0 4
// if cmd = 256 then
25950: LD_VAR 0 1
25954: PUSH
25955: LD_INT 256
25957: EQUAL
25958: IFFALSE 25979
// SetFactoryWaypoint ( unit , x , y ) ;
25960: LD_VAR 0 2
25964: PPUSH
25965: LD_VAR 0 4
25969: PPUSH
25970: LD_VAR 0 5
25974: PPUSH
25975: CALL 23960 0 3
// if cmd = 257 then
25979: LD_VAR 0 1
25983: PUSH
25984: LD_INT 257
25986: EQUAL
25987: IFFALSE 26008
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25989: LD_VAR 0 2
25993: PPUSH
25994: LD_VAR 0 4
25998: PPUSH
25999: LD_VAR 0 5
26003: PPUSH
26004: CALL 24322 0 3
// end ;
26008: LD_VAR 0 6
26012: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26013: LD_INT 0
26015: PPUSH
26016: PPUSH
26017: PPUSH
26018: PPUSH
26019: PPUSH
26020: PPUSH
26021: PPUSH
26022: PPUSH
26023: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26024: LD_VAR 0 1
26028: NOT
26029: PUSH
26030: LD_VAR 0 2
26034: PPUSH
26035: LD_VAR 0 3
26039: PPUSH
26040: CALL_OW 488
26044: NOT
26045: OR
26046: PUSH
26047: LD_VAR 0 4
26051: NOT
26052: OR
26053: IFFALSE 26057
// exit ;
26055: GO 26397
// list := [ ] ;
26057: LD_ADDR_VAR 0 13
26061: PUSH
26062: EMPTY
26063: ST_TO_ADDR
// if x - r < 0 then
26064: LD_VAR 0 2
26068: PUSH
26069: LD_VAR 0 4
26073: MINUS
26074: PUSH
26075: LD_INT 0
26077: LESS
26078: IFFALSE 26090
// min_x := 0 else
26080: LD_ADDR_VAR 0 7
26084: PUSH
26085: LD_INT 0
26087: ST_TO_ADDR
26088: GO 26106
// min_x := x - r ;
26090: LD_ADDR_VAR 0 7
26094: PUSH
26095: LD_VAR 0 2
26099: PUSH
26100: LD_VAR 0 4
26104: MINUS
26105: ST_TO_ADDR
// if y - r < 0 then
26106: LD_VAR 0 3
26110: PUSH
26111: LD_VAR 0 4
26115: MINUS
26116: PUSH
26117: LD_INT 0
26119: LESS
26120: IFFALSE 26132
// min_y := 0 else
26122: LD_ADDR_VAR 0 8
26126: PUSH
26127: LD_INT 0
26129: ST_TO_ADDR
26130: GO 26148
// min_y := y - r ;
26132: LD_ADDR_VAR 0 8
26136: PUSH
26137: LD_VAR 0 3
26141: PUSH
26142: LD_VAR 0 4
26146: MINUS
26147: ST_TO_ADDR
// max_x := x + r ;
26148: LD_ADDR_VAR 0 9
26152: PUSH
26153: LD_VAR 0 2
26157: PUSH
26158: LD_VAR 0 4
26162: PLUS
26163: ST_TO_ADDR
// max_y := y + r ;
26164: LD_ADDR_VAR 0 10
26168: PUSH
26169: LD_VAR 0 3
26173: PUSH
26174: LD_VAR 0 4
26178: PLUS
26179: ST_TO_ADDR
// for _x = min_x to max_x do
26180: LD_ADDR_VAR 0 11
26184: PUSH
26185: DOUBLE
26186: LD_VAR 0 7
26190: DEC
26191: ST_TO_ADDR
26192: LD_VAR 0 9
26196: PUSH
26197: FOR_TO
26198: IFFALSE 26315
// for _y = min_y to max_y do
26200: LD_ADDR_VAR 0 12
26204: PUSH
26205: DOUBLE
26206: LD_VAR 0 8
26210: DEC
26211: ST_TO_ADDR
26212: LD_VAR 0 10
26216: PUSH
26217: FOR_TO
26218: IFFALSE 26311
// begin if not ValidHex ( _x , _y ) then
26220: LD_VAR 0 11
26224: PPUSH
26225: LD_VAR 0 12
26229: PPUSH
26230: CALL_OW 488
26234: NOT
26235: IFFALSE 26239
// continue ;
26237: GO 26217
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26239: LD_VAR 0 11
26243: PPUSH
26244: LD_VAR 0 12
26248: PPUSH
26249: CALL_OW 351
26253: PUSH
26254: LD_VAR 0 11
26258: PPUSH
26259: LD_VAR 0 12
26263: PPUSH
26264: CALL_OW 554
26268: AND
26269: IFFALSE 26309
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26271: LD_ADDR_VAR 0 13
26275: PUSH
26276: LD_VAR 0 13
26280: PPUSH
26281: LD_VAR 0 13
26285: PUSH
26286: LD_INT 1
26288: PLUS
26289: PPUSH
26290: LD_VAR 0 11
26294: PUSH
26295: LD_VAR 0 12
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PPUSH
26304: CALL_OW 2
26308: ST_TO_ADDR
// end ;
26309: GO 26217
26311: POP
26312: POP
26313: GO 26197
26315: POP
26316: POP
// if not list then
26317: LD_VAR 0 13
26321: NOT
26322: IFFALSE 26326
// exit ;
26324: GO 26397
// for i in list do
26326: LD_ADDR_VAR 0 6
26330: PUSH
26331: LD_VAR 0 13
26335: PUSH
26336: FOR_IN
26337: IFFALSE 26395
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26339: LD_VAR 0 1
26343: PPUSH
26344: LD_STRING M
26346: PUSH
26347: LD_VAR 0 6
26351: PUSH
26352: LD_INT 1
26354: ARRAY
26355: PUSH
26356: LD_VAR 0 6
26360: PUSH
26361: LD_INT 2
26363: ARRAY
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: PUSH
26386: EMPTY
26387: LIST
26388: PPUSH
26389: CALL_OW 447
26393: GO 26336
26395: POP
26396: POP
// end ;
26397: LD_VAR 0 5
26401: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26402: LD_EXP 87
26406: NOT
26407: IFFALSE 26457
26409: GO 26411
26411: DISABLE
// begin initHack := true ;
26412: LD_ADDR_EXP 87
26416: PUSH
26417: LD_INT 1
26419: ST_TO_ADDR
// hackTanks := [ ] ;
26420: LD_ADDR_EXP 88
26424: PUSH
26425: EMPTY
26426: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26427: LD_ADDR_EXP 89
26431: PUSH
26432: EMPTY
26433: ST_TO_ADDR
// hackLimit := 3 ;
26434: LD_ADDR_EXP 90
26438: PUSH
26439: LD_INT 3
26441: ST_TO_ADDR
// hackDist := 12 ;
26442: LD_ADDR_EXP 91
26446: PUSH
26447: LD_INT 12
26449: ST_TO_ADDR
// hackCounter := [ ] ;
26450: LD_ADDR_EXP 92
26454: PUSH
26455: EMPTY
26456: ST_TO_ADDR
// end ;
26457: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26458: LD_EXP 87
26462: PUSH
26463: LD_INT 34
26465: PUSH
26466: LD_INT 99
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PPUSH
26473: CALL_OW 69
26477: AND
26478: IFFALSE 26731
26480: GO 26482
26482: DISABLE
26483: LD_INT 0
26485: PPUSH
26486: PPUSH
// begin enable ;
26487: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26488: LD_ADDR_VAR 0 1
26492: PUSH
26493: LD_INT 34
26495: PUSH
26496: LD_INT 99
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PPUSH
26503: CALL_OW 69
26507: PUSH
26508: FOR_IN
26509: IFFALSE 26729
// begin if not i in hackTanks then
26511: LD_VAR 0 1
26515: PUSH
26516: LD_EXP 88
26520: IN
26521: NOT
26522: IFFALSE 26605
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26524: LD_ADDR_EXP 88
26528: PUSH
26529: LD_EXP 88
26533: PPUSH
26534: LD_EXP 88
26538: PUSH
26539: LD_INT 1
26541: PLUS
26542: PPUSH
26543: LD_VAR 0 1
26547: PPUSH
26548: CALL_OW 1
26552: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26553: LD_ADDR_EXP 89
26557: PUSH
26558: LD_EXP 89
26562: PPUSH
26563: LD_EXP 89
26567: PUSH
26568: LD_INT 1
26570: PLUS
26571: PPUSH
26572: EMPTY
26573: PPUSH
26574: CALL_OW 1
26578: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26579: LD_ADDR_EXP 92
26583: PUSH
26584: LD_EXP 92
26588: PPUSH
26589: LD_EXP 92
26593: PUSH
26594: LD_INT 1
26596: PLUS
26597: PPUSH
26598: EMPTY
26599: PPUSH
26600: CALL_OW 1
26604: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26605: LD_VAR 0 1
26609: PPUSH
26610: CALL_OW 302
26614: NOT
26615: IFFALSE 26628
// begin HackUnlinkAll ( i ) ;
26617: LD_VAR 0 1
26621: PPUSH
26622: CALL 26734 0 1
// continue ;
26626: GO 26508
// end ; HackCheckCapturedStatus ( i ) ;
26628: LD_VAR 0 1
26632: PPUSH
26633: CALL 27177 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26637: LD_ADDR_VAR 0 2
26641: PUSH
26642: LD_INT 81
26644: PUSH
26645: LD_VAR 0 1
26649: PPUSH
26650: CALL_OW 255
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 33
26661: PUSH
26662: LD_INT 3
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 91
26671: PUSH
26672: LD_VAR 0 1
26676: PUSH
26677: LD_EXP 91
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 50
26689: PUSH
26690: EMPTY
26691: LIST
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: PPUSH
26699: CALL_OW 69
26703: ST_TO_ADDR
// if not tmp then
26704: LD_VAR 0 2
26708: NOT
26709: IFFALSE 26713
// continue ;
26711: GO 26508
// HackLink ( i , tmp ) ;
26713: LD_VAR 0 1
26717: PPUSH
26718: LD_VAR 0 2
26722: PPUSH
26723: CALL 26870 0 2
// end ;
26727: GO 26508
26729: POP
26730: POP
// end ;
26731: PPOPN 2
26733: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26734: LD_INT 0
26736: PPUSH
26737: PPUSH
26738: PPUSH
// if not hack in hackTanks then
26739: LD_VAR 0 1
26743: PUSH
26744: LD_EXP 88
26748: IN
26749: NOT
26750: IFFALSE 26754
// exit ;
26752: GO 26865
// index := GetElementIndex ( hackTanks , hack ) ;
26754: LD_ADDR_VAR 0 4
26758: PUSH
26759: LD_EXP 88
26763: PPUSH
26764: LD_VAR 0 1
26768: PPUSH
26769: CALL 34307 0 2
26773: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26774: LD_EXP 89
26778: PUSH
26779: LD_VAR 0 4
26783: ARRAY
26784: IFFALSE 26865
// begin for i in hackTanksCaptured [ index ] do
26786: LD_ADDR_VAR 0 3
26790: PUSH
26791: LD_EXP 89
26795: PUSH
26796: LD_VAR 0 4
26800: ARRAY
26801: PUSH
26802: FOR_IN
26803: IFFALSE 26829
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26805: LD_VAR 0 3
26809: PUSH
26810: LD_INT 1
26812: ARRAY
26813: PPUSH
26814: LD_VAR 0 3
26818: PUSH
26819: LD_INT 2
26821: ARRAY
26822: PPUSH
26823: CALL_OW 235
26827: GO 26802
26829: POP
26830: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26831: LD_ADDR_EXP 89
26835: PUSH
26836: LD_EXP 89
26840: PPUSH
26841: LD_VAR 0 4
26845: PPUSH
26846: EMPTY
26847: PPUSH
26848: CALL_OW 1
26852: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26853: LD_VAR 0 1
26857: PPUSH
26858: LD_INT 0
26860: PPUSH
26861: CALL_OW 505
// end ; end ;
26865: LD_VAR 0 2
26869: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26870: LD_INT 0
26872: PPUSH
26873: PPUSH
26874: PPUSH
// if not hack in hackTanks or not vehicles then
26875: LD_VAR 0 1
26879: PUSH
26880: LD_EXP 88
26884: IN
26885: NOT
26886: PUSH
26887: LD_VAR 0 2
26891: NOT
26892: OR
26893: IFFALSE 26897
// exit ;
26895: GO 27172
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26897: LD_ADDR_VAR 0 2
26901: PUSH
26902: LD_VAR 0 1
26906: PPUSH
26907: LD_VAR 0 2
26911: PPUSH
26912: LD_INT 1
26914: PPUSH
26915: LD_INT 1
26917: PPUSH
26918: CALL 34957 0 4
26922: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26923: LD_ADDR_VAR 0 5
26927: PUSH
26928: LD_EXP 88
26932: PPUSH
26933: LD_VAR 0 1
26937: PPUSH
26938: CALL 34307 0 2
26942: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26943: LD_EXP 89
26947: PUSH
26948: LD_VAR 0 5
26952: ARRAY
26953: PUSH
26954: LD_EXP 90
26958: LESS
26959: IFFALSE 27148
// begin for i := 1 to vehicles do
26961: LD_ADDR_VAR 0 4
26965: PUSH
26966: DOUBLE
26967: LD_INT 1
26969: DEC
26970: ST_TO_ADDR
26971: LD_VAR 0 2
26975: PUSH
26976: FOR_TO
26977: IFFALSE 27146
// begin if hackTanksCaptured [ index ] = hackLimit then
26979: LD_EXP 89
26983: PUSH
26984: LD_VAR 0 5
26988: ARRAY
26989: PUSH
26990: LD_EXP 90
26994: EQUAL
26995: IFFALSE 26999
// break ;
26997: GO 27146
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26999: LD_ADDR_EXP 92
27003: PUSH
27004: LD_EXP 92
27008: PPUSH
27009: LD_VAR 0 5
27013: PPUSH
27014: LD_EXP 92
27018: PUSH
27019: LD_VAR 0 5
27023: ARRAY
27024: PUSH
27025: LD_INT 1
27027: PLUS
27028: PPUSH
27029: CALL_OW 1
27033: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27034: LD_ADDR_EXP 89
27038: PUSH
27039: LD_EXP 89
27043: PPUSH
27044: LD_VAR 0 5
27048: PUSH
27049: LD_EXP 89
27053: PUSH
27054: LD_VAR 0 5
27058: ARRAY
27059: PUSH
27060: LD_INT 1
27062: PLUS
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PPUSH
27068: LD_VAR 0 2
27072: PUSH
27073: LD_VAR 0 4
27077: ARRAY
27078: PUSH
27079: LD_VAR 0 2
27083: PUSH
27084: LD_VAR 0 4
27088: ARRAY
27089: PPUSH
27090: CALL_OW 255
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PPUSH
27099: CALL 34522 0 3
27103: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27104: LD_VAR 0 2
27108: PUSH
27109: LD_VAR 0 4
27113: ARRAY
27114: PPUSH
27115: LD_VAR 0 1
27119: PPUSH
27120: CALL_OW 255
27124: PPUSH
27125: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27129: LD_VAR 0 2
27133: PUSH
27134: LD_VAR 0 4
27138: ARRAY
27139: PPUSH
27140: CALL_OW 141
// end ;
27144: GO 26976
27146: POP
27147: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27148: LD_VAR 0 1
27152: PPUSH
27153: LD_EXP 89
27157: PUSH
27158: LD_VAR 0 5
27162: ARRAY
27163: PUSH
27164: LD_INT 0
27166: PLUS
27167: PPUSH
27168: CALL_OW 505
// end ;
27172: LD_VAR 0 3
27176: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27177: LD_INT 0
27179: PPUSH
27180: PPUSH
27181: PPUSH
27182: PPUSH
// if not hack in hackTanks then
27183: LD_VAR 0 1
27187: PUSH
27188: LD_EXP 88
27192: IN
27193: NOT
27194: IFFALSE 27198
// exit ;
27196: GO 27438
// index := GetElementIndex ( hackTanks , hack ) ;
27198: LD_ADDR_VAR 0 4
27202: PUSH
27203: LD_EXP 88
27207: PPUSH
27208: LD_VAR 0 1
27212: PPUSH
27213: CALL 34307 0 2
27217: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27218: LD_ADDR_VAR 0 3
27222: PUSH
27223: DOUBLE
27224: LD_EXP 89
27228: PUSH
27229: LD_VAR 0 4
27233: ARRAY
27234: INC
27235: ST_TO_ADDR
27236: LD_INT 1
27238: PUSH
27239: FOR_DOWNTO
27240: IFFALSE 27412
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27242: LD_ADDR_VAR 0 5
27246: PUSH
27247: LD_EXP 89
27251: PUSH
27252: LD_VAR 0 4
27256: ARRAY
27257: PUSH
27258: LD_VAR 0 3
27262: ARRAY
27263: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27264: LD_VAR 0 5
27268: PUSH
27269: LD_INT 1
27271: ARRAY
27272: PPUSH
27273: CALL_OW 302
27277: NOT
27278: PUSH
27279: LD_VAR 0 5
27283: PUSH
27284: LD_INT 1
27286: ARRAY
27287: PPUSH
27288: CALL_OW 255
27292: PUSH
27293: LD_VAR 0 1
27297: PPUSH
27298: CALL_OW 255
27302: NONEQUAL
27303: OR
27304: IFFALSE 27410
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27306: LD_VAR 0 5
27310: PUSH
27311: LD_INT 1
27313: ARRAY
27314: PPUSH
27315: CALL_OW 305
27319: PUSH
27320: LD_VAR 0 5
27324: PUSH
27325: LD_INT 1
27327: ARRAY
27328: PPUSH
27329: CALL_OW 255
27333: PUSH
27334: LD_VAR 0 1
27338: PPUSH
27339: CALL_OW 255
27343: EQUAL
27344: AND
27345: IFFALSE 27369
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27347: LD_VAR 0 5
27351: PUSH
27352: LD_INT 1
27354: ARRAY
27355: PPUSH
27356: LD_VAR 0 5
27360: PUSH
27361: LD_INT 2
27363: ARRAY
27364: PPUSH
27365: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27369: LD_ADDR_EXP 89
27373: PUSH
27374: LD_EXP 89
27378: PPUSH
27379: LD_VAR 0 4
27383: PPUSH
27384: LD_EXP 89
27388: PUSH
27389: LD_VAR 0 4
27393: ARRAY
27394: PPUSH
27395: LD_VAR 0 3
27399: PPUSH
27400: CALL_OW 3
27404: PPUSH
27405: CALL_OW 1
27409: ST_TO_ADDR
// end ; end ;
27410: GO 27239
27412: POP
27413: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27414: LD_VAR 0 1
27418: PPUSH
27419: LD_EXP 89
27423: PUSH
27424: LD_VAR 0 4
27428: ARRAY
27429: PUSH
27430: LD_INT 0
27432: PLUS
27433: PPUSH
27434: CALL_OW 505
// end ;
27438: LD_VAR 0 2
27442: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27443: LD_INT 0
27445: PPUSH
27446: PPUSH
27447: PPUSH
27448: PPUSH
// if not hack in hackTanks then
27449: LD_VAR 0 1
27453: PUSH
27454: LD_EXP 88
27458: IN
27459: NOT
27460: IFFALSE 27464
// exit ;
27462: GO 27549
// index := GetElementIndex ( hackTanks , hack ) ;
27464: LD_ADDR_VAR 0 5
27468: PUSH
27469: LD_EXP 88
27473: PPUSH
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL 34307 0 2
27483: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27484: LD_ADDR_VAR 0 4
27488: PUSH
27489: DOUBLE
27490: LD_INT 1
27492: DEC
27493: ST_TO_ADDR
27494: LD_EXP 89
27498: PUSH
27499: LD_VAR 0 5
27503: ARRAY
27504: PUSH
27505: FOR_TO
27506: IFFALSE 27547
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27508: LD_EXP 89
27512: PUSH
27513: LD_VAR 0 5
27517: ARRAY
27518: PUSH
27519: LD_VAR 0 4
27523: ARRAY
27524: PUSH
27525: LD_INT 1
27527: ARRAY
27528: PUSH
27529: LD_VAR 0 2
27533: EQUAL
27534: IFFALSE 27545
// KillUnit ( vehicle ) ;
27536: LD_VAR 0 2
27540: PPUSH
27541: CALL_OW 66
27545: GO 27505
27547: POP
27548: POP
// end ;
27549: LD_VAR 0 3
27553: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27554: LD_EXP 93
27558: NOT
27559: IFFALSE 27594
27561: GO 27563
27563: DISABLE
// begin initMiner := true ;
27564: LD_ADDR_EXP 93
27568: PUSH
27569: LD_INT 1
27571: ST_TO_ADDR
// minersList := [ ] ;
27572: LD_ADDR_EXP 94
27576: PUSH
27577: EMPTY
27578: ST_TO_ADDR
// minerMinesList := [ ] ;
27579: LD_ADDR_EXP 95
27583: PUSH
27584: EMPTY
27585: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27586: LD_ADDR_EXP 96
27590: PUSH
27591: LD_INT 5
27593: ST_TO_ADDR
// end ;
27594: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27595: LD_EXP 93
27599: PUSH
27600: LD_INT 34
27602: PUSH
27603: LD_INT 81
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PPUSH
27610: CALL_OW 69
27614: AND
27615: IFFALSE 28076
27617: GO 27619
27619: DISABLE
27620: LD_INT 0
27622: PPUSH
27623: PPUSH
27624: PPUSH
27625: PPUSH
// begin enable ;
27626: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27627: LD_ADDR_VAR 0 1
27631: PUSH
27632: LD_INT 34
27634: PUSH
27635: LD_INT 81
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PPUSH
27642: CALL_OW 69
27646: PUSH
27647: FOR_IN
27648: IFFALSE 27720
// begin if not i in minersList then
27650: LD_VAR 0 1
27654: PUSH
27655: LD_EXP 94
27659: IN
27660: NOT
27661: IFFALSE 27718
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27663: LD_ADDR_EXP 94
27667: PUSH
27668: LD_EXP 94
27672: PPUSH
27673: LD_EXP 94
27677: PUSH
27678: LD_INT 1
27680: PLUS
27681: PPUSH
27682: LD_VAR 0 1
27686: PPUSH
27687: CALL_OW 1
27691: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27692: LD_ADDR_EXP 95
27696: PUSH
27697: LD_EXP 95
27701: PPUSH
27702: LD_EXP 95
27706: PUSH
27707: LD_INT 1
27709: PLUS
27710: PPUSH
27711: EMPTY
27712: PPUSH
27713: CALL_OW 1
27717: ST_TO_ADDR
// end end ;
27718: GO 27647
27720: POP
27721: POP
// for i := minerMinesList downto 1 do
27722: LD_ADDR_VAR 0 1
27726: PUSH
27727: DOUBLE
27728: LD_EXP 95
27732: INC
27733: ST_TO_ADDR
27734: LD_INT 1
27736: PUSH
27737: FOR_DOWNTO
27738: IFFALSE 28074
// begin if IsLive ( minersList [ i ] ) then
27740: LD_EXP 94
27744: PUSH
27745: LD_VAR 0 1
27749: ARRAY
27750: PPUSH
27751: CALL_OW 300
27755: IFFALSE 27783
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27757: LD_EXP 94
27761: PUSH
27762: LD_VAR 0 1
27766: ARRAY
27767: PPUSH
27768: LD_EXP 95
27772: PUSH
27773: LD_VAR 0 1
27777: ARRAY
27778: PPUSH
27779: CALL_OW 505
// if not minerMinesList [ i ] then
27783: LD_EXP 95
27787: PUSH
27788: LD_VAR 0 1
27792: ARRAY
27793: NOT
27794: IFFALSE 27798
// continue ;
27796: GO 27737
// for j := minerMinesList [ i ] downto 1 do
27798: LD_ADDR_VAR 0 2
27802: PUSH
27803: DOUBLE
27804: LD_EXP 95
27808: PUSH
27809: LD_VAR 0 1
27813: ARRAY
27814: INC
27815: ST_TO_ADDR
27816: LD_INT 1
27818: PUSH
27819: FOR_DOWNTO
27820: IFFALSE 28070
// begin side := GetSide ( minersList [ i ] ) ;
27822: LD_ADDR_VAR 0 3
27826: PUSH
27827: LD_EXP 94
27831: PUSH
27832: LD_VAR 0 1
27836: ARRAY
27837: PPUSH
27838: CALL_OW 255
27842: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27843: LD_ADDR_VAR 0 4
27847: PUSH
27848: LD_EXP 95
27852: PUSH
27853: LD_VAR 0 1
27857: ARRAY
27858: PUSH
27859: LD_VAR 0 2
27863: ARRAY
27864: PUSH
27865: LD_INT 1
27867: ARRAY
27868: PPUSH
27869: LD_EXP 95
27873: PUSH
27874: LD_VAR 0 1
27878: ARRAY
27879: PUSH
27880: LD_VAR 0 2
27884: ARRAY
27885: PUSH
27886: LD_INT 2
27888: ARRAY
27889: PPUSH
27890: CALL_OW 428
27894: ST_TO_ADDR
// if not tmp then
27895: LD_VAR 0 4
27899: NOT
27900: IFFALSE 27904
// continue ;
27902: GO 27819
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27904: LD_VAR 0 4
27908: PUSH
27909: LD_INT 81
27911: PUSH
27912: LD_VAR 0 3
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PPUSH
27921: CALL_OW 69
27925: IN
27926: PUSH
27927: LD_EXP 95
27931: PUSH
27932: LD_VAR 0 1
27936: ARRAY
27937: PUSH
27938: LD_VAR 0 2
27942: ARRAY
27943: PUSH
27944: LD_INT 1
27946: ARRAY
27947: PPUSH
27948: LD_EXP 95
27952: PUSH
27953: LD_VAR 0 1
27957: ARRAY
27958: PUSH
27959: LD_VAR 0 2
27963: ARRAY
27964: PUSH
27965: LD_INT 2
27967: ARRAY
27968: PPUSH
27969: CALL_OW 458
27973: AND
27974: IFFALSE 28068
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27976: LD_EXP 95
27980: PUSH
27981: LD_VAR 0 1
27985: ARRAY
27986: PUSH
27987: LD_VAR 0 2
27991: ARRAY
27992: PUSH
27993: LD_INT 1
27995: ARRAY
27996: PPUSH
27997: LD_EXP 95
28001: PUSH
28002: LD_VAR 0 1
28006: ARRAY
28007: PUSH
28008: LD_VAR 0 2
28012: ARRAY
28013: PUSH
28014: LD_INT 2
28016: ARRAY
28017: PPUSH
28018: LD_VAR 0 3
28022: PPUSH
28023: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28027: LD_ADDR_EXP 95
28031: PUSH
28032: LD_EXP 95
28036: PPUSH
28037: LD_VAR 0 1
28041: PPUSH
28042: LD_EXP 95
28046: PUSH
28047: LD_VAR 0 1
28051: ARRAY
28052: PPUSH
28053: LD_VAR 0 2
28057: PPUSH
28058: CALL_OW 3
28062: PPUSH
28063: CALL_OW 1
28067: ST_TO_ADDR
// end ; end ;
28068: GO 27819
28070: POP
28071: POP
// end ;
28072: GO 27737
28074: POP
28075: POP
// end ;
28076: PPOPN 4
28078: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28079: LD_INT 0
28081: PPUSH
28082: PPUSH
// result := false ;
28083: LD_ADDR_VAR 0 4
28087: PUSH
28088: LD_INT 0
28090: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28091: LD_VAR 0 1
28095: PPUSH
28096: CALL_OW 264
28100: PUSH
28101: LD_INT 81
28103: EQUAL
28104: NOT
28105: IFFALSE 28109
// exit ;
28107: GO 28349
// index := GetElementIndex ( minersList , unit ) ;
28109: LD_ADDR_VAR 0 5
28113: PUSH
28114: LD_EXP 94
28118: PPUSH
28119: LD_VAR 0 1
28123: PPUSH
28124: CALL 34307 0 2
28128: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28129: LD_EXP 95
28133: PUSH
28134: LD_VAR 0 5
28138: ARRAY
28139: PUSH
28140: LD_EXP 96
28144: GREATEREQUAL
28145: IFFALSE 28149
// exit ;
28147: GO 28349
// ComMoveXY ( unit , x , y ) ;
28149: LD_VAR 0 1
28153: PPUSH
28154: LD_VAR 0 2
28158: PPUSH
28159: LD_VAR 0 3
28163: PPUSH
28164: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28168: LD_INT 35
28170: PPUSH
28171: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28175: LD_VAR 0 1
28179: PPUSH
28180: LD_VAR 0 2
28184: PPUSH
28185: LD_VAR 0 3
28189: PPUSH
28190: CALL 65662 0 3
28194: NOT
28195: PUSH
28196: LD_VAR 0 1
28200: PPUSH
28201: CALL_OW 314
28205: AND
28206: IFFALSE 28210
// exit ;
28208: GO 28349
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28210: LD_VAR 0 2
28214: PPUSH
28215: LD_VAR 0 3
28219: PPUSH
28220: CALL_OW 428
28224: PUSH
28225: LD_VAR 0 1
28229: EQUAL
28230: PUSH
28231: LD_VAR 0 1
28235: PPUSH
28236: CALL_OW 314
28240: NOT
28241: AND
28242: IFFALSE 28168
// PlaySoundXY ( x , y , PlantMine ) ;
28244: LD_VAR 0 2
28248: PPUSH
28249: LD_VAR 0 3
28253: PPUSH
28254: LD_STRING PlantMine
28256: PPUSH
28257: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28261: LD_VAR 0 2
28265: PPUSH
28266: LD_VAR 0 3
28270: PPUSH
28271: LD_VAR 0 1
28275: PPUSH
28276: CALL_OW 255
28280: PPUSH
28281: LD_INT 0
28283: PPUSH
28284: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28288: LD_ADDR_EXP 95
28292: PUSH
28293: LD_EXP 95
28297: PPUSH
28298: LD_VAR 0 5
28302: PUSH
28303: LD_EXP 95
28307: PUSH
28308: LD_VAR 0 5
28312: ARRAY
28313: PUSH
28314: LD_INT 1
28316: PLUS
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PPUSH
28322: LD_VAR 0 2
28326: PUSH
28327: LD_VAR 0 3
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PPUSH
28336: CALL 34522 0 3
28340: ST_TO_ADDR
// result := true ;
28341: LD_ADDR_VAR 0 4
28345: PUSH
28346: LD_INT 1
28348: ST_TO_ADDR
// end ;
28349: LD_VAR 0 4
28353: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28354: LD_INT 0
28356: PPUSH
28357: PPUSH
28358: PPUSH
// if not unit in minersList then
28359: LD_VAR 0 1
28363: PUSH
28364: LD_EXP 94
28368: IN
28369: NOT
28370: IFFALSE 28374
// exit ;
28372: GO 28766
// index := GetElementIndex ( minersList , unit ) ;
28374: LD_ADDR_VAR 0 6
28378: PUSH
28379: LD_EXP 94
28383: PPUSH
28384: LD_VAR 0 1
28388: PPUSH
28389: CALL 34307 0 2
28393: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28394: LD_ADDR_VAR 0 5
28398: PUSH
28399: DOUBLE
28400: LD_EXP 95
28404: PUSH
28405: LD_VAR 0 6
28409: ARRAY
28410: INC
28411: ST_TO_ADDR
28412: LD_INT 1
28414: PUSH
28415: FOR_DOWNTO
28416: IFFALSE 28577
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28418: LD_EXP 95
28422: PUSH
28423: LD_VAR 0 6
28427: ARRAY
28428: PUSH
28429: LD_VAR 0 5
28433: ARRAY
28434: PUSH
28435: LD_INT 1
28437: ARRAY
28438: PUSH
28439: LD_VAR 0 2
28443: EQUAL
28444: PUSH
28445: LD_EXP 95
28449: PUSH
28450: LD_VAR 0 6
28454: ARRAY
28455: PUSH
28456: LD_VAR 0 5
28460: ARRAY
28461: PUSH
28462: LD_INT 2
28464: ARRAY
28465: PUSH
28466: LD_VAR 0 3
28470: EQUAL
28471: AND
28472: IFFALSE 28575
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28474: LD_EXP 95
28478: PUSH
28479: LD_VAR 0 6
28483: ARRAY
28484: PUSH
28485: LD_VAR 0 5
28489: ARRAY
28490: PUSH
28491: LD_INT 1
28493: ARRAY
28494: PPUSH
28495: LD_EXP 95
28499: PUSH
28500: LD_VAR 0 6
28504: ARRAY
28505: PUSH
28506: LD_VAR 0 5
28510: ARRAY
28511: PUSH
28512: LD_INT 2
28514: ARRAY
28515: PPUSH
28516: LD_VAR 0 1
28520: PPUSH
28521: CALL_OW 255
28525: PPUSH
28526: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28530: LD_ADDR_EXP 95
28534: PUSH
28535: LD_EXP 95
28539: PPUSH
28540: LD_VAR 0 6
28544: PPUSH
28545: LD_EXP 95
28549: PUSH
28550: LD_VAR 0 6
28554: ARRAY
28555: PPUSH
28556: LD_VAR 0 5
28560: PPUSH
28561: CALL_OW 3
28565: PPUSH
28566: CALL_OW 1
28570: ST_TO_ADDR
// exit ;
28571: POP
28572: POP
28573: GO 28766
// end ; end ;
28575: GO 28415
28577: POP
28578: POP
// for i := minerMinesList [ index ] downto 1 do
28579: LD_ADDR_VAR 0 5
28583: PUSH
28584: DOUBLE
28585: LD_EXP 95
28589: PUSH
28590: LD_VAR 0 6
28594: ARRAY
28595: INC
28596: ST_TO_ADDR
28597: LD_INT 1
28599: PUSH
28600: FOR_DOWNTO
28601: IFFALSE 28764
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28603: LD_EXP 95
28607: PUSH
28608: LD_VAR 0 6
28612: ARRAY
28613: PUSH
28614: LD_VAR 0 5
28618: ARRAY
28619: PUSH
28620: LD_INT 1
28622: ARRAY
28623: PPUSH
28624: LD_EXP 95
28628: PUSH
28629: LD_VAR 0 6
28633: ARRAY
28634: PUSH
28635: LD_VAR 0 5
28639: ARRAY
28640: PUSH
28641: LD_INT 2
28643: ARRAY
28644: PPUSH
28645: LD_VAR 0 2
28649: PPUSH
28650: LD_VAR 0 3
28654: PPUSH
28655: CALL_OW 298
28659: PUSH
28660: LD_INT 6
28662: LESS
28663: IFFALSE 28762
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28665: LD_EXP 95
28669: PUSH
28670: LD_VAR 0 6
28674: ARRAY
28675: PUSH
28676: LD_VAR 0 5
28680: ARRAY
28681: PUSH
28682: LD_INT 1
28684: ARRAY
28685: PPUSH
28686: LD_EXP 95
28690: PUSH
28691: LD_VAR 0 6
28695: ARRAY
28696: PUSH
28697: LD_VAR 0 5
28701: ARRAY
28702: PUSH
28703: LD_INT 2
28705: ARRAY
28706: PPUSH
28707: LD_VAR 0 1
28711: PPUSH
28712: CALL_OW 255
28716: PPUSH
28717: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28721: LD_ADDR_EXP 95
28725: PUSH
28726: LD_EXP 95
28730: PPUSH
28731: LD_VAR 0 6
28735: PPUSH
28736: LD_EXP 95
28740: PUSH
28741: LD_VAR 0 6
28745: ARRAY
28746: PPUSH
28747: LD_VAR 0 5
28751: PPUSH
28752: CALL_OW 3
28756: PPUSH
28757: CALL_OW 1
28761: ST_TO_ADDR
// end ; end ;
28762: GO 28600
28764: POP
28765: POP
// end ;
28766: LD_VAR 0 4
28770: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28771: LD_INT 0
28773: PPUSH
28774: PPUSH
28775: PPUSH
28776: PPUSH
28777: PPUSH
28778: PPUSH
28779: PPUSH
28780: PPUSH
28781: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28782: LD_VAR 0 1
28786: PPUSH
28787: CALL_OW 264
28791: PUSH
28792: LD_INT 81
28794: EQUAL
28795: NOT
28796: PUSH
28797: LD_VAR 0 1
28801: PUSH
28802: LD_EXP 94
28806: IN
28807: NOT
28808: OR
28809: IFFALSE 28813
// exit ;
28811: GO 29135
// index := GetElementIndex ( minersList , unit ) ;
28813: LD_ADDR_VAR 0 6
28817: PUSH
28818: LD_EXP 94
28822: PPUSH
28823: LD_VAR 0 1
28827: PPUSH
28828: CALL 34307 0 2
28832: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28833: LD_ADDR_VAR 0 8
28837: PUSH
28838: LD_EXP 96
28842: PUSH
28843: LD_EXP 95
28847: PUSH
28848: LD_VAR 0 6
28852: ARRAY
28853: MINUS
28854: ST_TO_ADDR
// if not minesFreeAmount then
28855: LD_VAR 0 8
28859: NOT
28860: IFFALSE 28864
// exit ;
28862: GO 29135
// tmp := [ ] ;
28864: LD_ADDR_VAR 0 7
28868: PUSH
28869: EMPTY
28870: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28871: LD_ADDR_VAR 0 5
28875: PUSH
28876: DOUBLE
28877: LD_INT 1
28879: DEC
28880: ST_TO_ADDR
28881: LD_VAR 0 8
28885: PUSH
28886: FOR_TO
28887: IFFALSE 29082
// begin _d := rand ( 0 , 5 ) ;
28889: LD_ADDR_VAR 0 11
28893: PUSH
28894: LD_INT 0
28896: PPUSH
28897: LD_INT 5
28899: PPUSH
28900: CALL_OW 12
28904: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28905: LD_ADDR_VAR 0 12
28909: PUSH
28910: LD_INT 2
28912: PPUSH
28913: LD_INT 6
28915: PPUSH
28916: CALL_OW 12
28920: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28921: LD_ADDR_VAR 0 9
28925: PUSH
28926: LD_VAR 0 2
28930: PPUSH
28931: LD_VAR 0 11
28935: PPUSH
28936: LD_VAR 0 12
28940: PPUSH
28941: CALL_OW 272
28945: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28946: LD_ADDR_VAR 0 10
28950: PUSH
28951: LD_VAR 0 3
28955: PPUSH
28956: LD_VAR 0 11
28960: PPUSH
28961: LD_VAR 0 12
28965: PPUSH
28966: CALL_OW 273
28970: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28971: LD_VAR 0 9
28975: PPUSH
28976: LD_VAR 0 10
28980: PPUSH
28981: CALL_OW 488
28985: PUSH
28986: LD_VAR 0 9
28990: PUSH
28991: LD_VAR 0 10
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_VAR 0 7
29004: IN
29005: NOT
29006: AND
29007: PUSH
29008: LD_VAR 0 9
29012: PPUSH
29013: LD_VAR 0 10
29017: PPUSH
29018: CALL_OW 458
29022: NOT
29023: AND
29024: IFFALSE 29066
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29026: LD_ADDR_VAR 0 7
29030: PUSH
29031: LD_VAR 0 7
29035: PPUSH
29036: LD_VAR 0 7
29040: PUSH
29041: LD_INT 1
29043: PLUS
29044: PPUSH
29045: LD_VAR 0 9
29049: PUSH
29050: LD_VAR 0 10
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PPUSH
29059: CALL_OW 1
29063: ST_TO_ADDR
29064: GO 29080
// i := i - 1 ;
29066: LD_ADDR_VAR 0 5
29070: PUSH
29071: LD_VAR 0 5
29075: PUSH
29076: LD_INT 1
29078: MINUS
29079: ST_TO_ADDR
// end ;
29080: GO 28886
29082: POP
29083: POP
// for i in tmp do
29084: LD_ADDR_VAR 0 5
29088: PUSH
29089: LD_VAR 0 7
29093: PUSH
29094: FOR_IN
29095: IFFALSE 29133
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29097: LD_VAR 0 1
29101: PPUSH
29102: LD_VAR 0 5
29106: PUSH
29107: LD_INT 1
29109: ARRAY
29110: PPUSH
29111: LD_VAR 0 5
29115: PUSH
29116: LD_INT 2
29118: ARRAY
29119: PPUSH
29120: CALL 28079 0 3
29124: NOT
29125: IFFALSE 29131
// exit ;
29127: POP
29128: POP
29129: GO 29135
29131: GO 29094
29133: POP
29134: POP
// end ;
29135: LD_VAR 0 4
29139: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29140: LD_INT 0
29142: PPUSH
29143: PPUSH
29144: PPUSH
29145: PPUSH
29146: PPUSH
29147: PPUSH
29148: PPUSH
// if not GetClass ( unit ) = class_sniper then
29149: LD_VAR 0 1
29153: PPUSH
29154: CALL_OW 257
29158: PUSH
29159: LD_INT 5
29161: EQUAL
29162: NOT
29163: IFFALSE 29167
// exit ;
29165: GO 29555
// dist := 8 ;
29167: LD_ADDR_VAR 0 5
29171: PUSH
29172: LD_INT 8
29174: ST_TO_ADDR
// viewRange := 12 ;
29175: LD_ADDR_VAR 0 7
29179: PUSH
29180: LD_INT 12
29182: ST_TO_ADDR
// side := GetSide ( unit ) ;
29183: LD_ADDR_VAR 0 6
29187: PUSH
29188: LD_VAR 0 1
29192: PPUSH
29193: CALL_OW 255
29197: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29198: LD_INT 61
29200: PPUSH
29201: LD_VAR 0 6
29205: PPUSH
29206: CALL_OW 321
29210: PUSH
29211: LD_INT 2
29213: EQUAL
29214: IFFALSE 29224
// viewRange := 16 ;
29216: LD_ADDR_VAR 0 7
29220: PUSH
29221: LD_INT 16
29223: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29224: LD_VAR 0 1
29228: PPUSH
29229: LD_VAR 0 2
29233: PPUSH
29234: LD_VAR 0 3
29238: PPUSH
29239: CALL_OW 297
29243: PUSH
29244: LD_VAR 0 5
29248: GREATER
29249: IFFALSE 29328
// begin ComMoveXY ( unit , x , y ) ;
29251: LD_VAR 0 1
29255: PPUSH
29256: LD_VAR 0 2
29260: PPUSH
29261: LD_VAR 0 3
29265: PPUSH
29266: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29270: LD_INT 35
29272: PPUSH
29273: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29277: LD_VAR 0 1
29281: PPUSH
29282: LD_VAR 0 2
29286: PPUSH
29287: LD_VAR 0 3
29291: PPUSH
29292: CALL 65662 0 3
29296: NOT
29297: IFFALSE 29301
// exit ;
29299: GO 29555
// until GetDistUnitXY ( unit , x , y ) < dist ;
29301: LD_VAR 0 1
29305: PPUSH
29306: LD_VAR 0 2
29310: PPUSH
29311: LD_VAR 0 3
29315: PPUSH
29316: CALL_OW 297
29320: PUSH
29321: LD_VAR 0 5
29325: LESS
29326: IFFALSE 29270
// end ; ComTurnXY ( unit , x , y ) ;
29328: LD_VAR 0 1
29332: PPUSH
29333: LD_VAR 0 2
29337: PPUSH
29338: LD_VAR 0 3
29342: PPUSH
29343: CALL_OW 118
// wait ( 5 ) ;
29347: LD_INT 5
29349: PPUSH
29350: CALL_OW 67
// _d := GetDir ( unit ) ;
29354: LD_ADDR_VAR 0 10
29358: PUSH
29359: LD_VAR 0 1
29363: PPUSH
29364: CALL_OW 254
29368: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29369: LD_ADDR_VAR 0 8
29373: PUSH
29374: LD_VAR 0 1
29378: PPUSH
29379: CALL_OW 250
29383: PPUSH
29384: LD_VAR 0 10
29388: PPUSH
29389: LD_VAR 0 5
29393: PPUSH
29394: CALL_OW 272
29398: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29399: LD_ADDR_VAR 0 9
29403: PUSH
29404: LD_VAR 0 1
29408: PPUSH
29409: CALL_OW 251
29413: PPUSH
29414: LD_VAR 0 10
29418: PPUSH
29419: LD_VAR 0 5
29423: PPUSH
29424: CALL_OW 273
29428: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29429: LD_VAR 0 8
29433: PPUSH
29434: LD_VAR 0 9
29438: PPUSH
29439: CALL_OW 488
29443: NOT
29444: IFFALSE 29448
// exit ;
29446: GO 29555
// ComAnimCustom ( unit , 1 ) ;
29448: LD_VAR 0 1
29452: PPUSH
29453: LD_INT 1
29455: PPUSH
29456: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29460: LD_VAR 0 8
29464: PPUSH
29465: LD_VAR 0 9
29469: PPUSH
29470: LD_VAR 0 6
29474: PPUSH
29475: LD_VAR 0 7
29479: PPUSH
29480: CALL_OW 330
// repeat wait ( 1 ) ;
29484: LD_INT 1
29486: PPUSH
29487: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29491: LD_VAR 0 1
29495: PPUSH
29496: CALL_OW 316
29500: PUSH
29501: LD_VAR 0 1
29505: PPUSH
29506: CALL_OW 314
29510: OR
29511: PUSH
29512: LD_VAR 0 1
29516: PPUSH
29517: CALL_OW 302
29521: NOT
29522: OR
29523: PUSH
29524: LD_VAR 0 1
29528: PPUSH
29529: CALL_OW 301
29533: OR
29534: IFFALSE 29484
// RemoveSeeing ( _x , _y , side ) ;
29536: LD_VAR 0 8
29540: PPUSH
29541: LD_VAR 0 9
29545: PPUSH
29546: LD_VAR 0 6
29550: PPUSH
29551: CALL_OW 331
// end ; end_of_file
29555: LD_VAR 0 4
29559: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29560: LD_INT 0
29562: PPUSH
29563: PPUSH
// if exist_mode then
29564: LD_VAR 0 2
29568: IFFALSE 29593
// unit := CreateCharacter ( prefix & ident ) else
29570: LD_ADDR_VAR 0 5
29574: PUSH
29575: LD_VAR 0 3
29579: PUSH
29580: LD_VAR 0 1
29584: STR
29585: PPUSH
29586: CALL_OW 34
29590: ST_TO_ADDR
29591: GO 29608
// unit := NewCharacter ( ident ) ;
29593: LD_ADDR_VAR 0 5
29597: PUSH
29598: LD_VAR 0 1
29602: PPUSH
29603: CALL_OW 25
29607: ST_TO_ADDR
// result := unit ;
29608: LD_ADDR_VAR 0 4
29612: PUSH
29613: LD_VAR 0 5
29617: ST_TO_ADDR
// end ;
29618: LD_VAR 0 4
29622: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29623: LD_INT 0
29625: PPUSH
29626: PPUSH
// if not side or not nation then
29627: LD_VAR 0 1
29631: NOT
29632: PUSH
29633: LD_VAR 0 2
29637: NOT
29638: OR
29639: IFFALSE 29643
// exit ;
29641: GO 30411
// case nation of nation_american :
29643: LD_VAR 0 2
29647: PUSH
29648: LD_INT 1
29650: DOUBLE
29651: EQUAL
29652: IFTRUE 29656
29654: GO 29870
29656: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29657: LD_ADDR_VAR 0 4
29661: PUSH
29662: LD_INT 35
29664: PUSH
29665: LD_INT 45
29667: PUSH
29668: LD_INT 46
29670: PUSH
29671: LD_INT 47
29673: PUSH
29674: LD_INT 82
29676: PUSH
29677: LD_INT 83
29679: PUSH
29680: LD_INT 84
29682: PUSH
29683: LD_INT 85
29685: PUSH
29686: LD_INT 86
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: LD_INT 2
29694: PUSH
29695: LD_INT 6
29697: PUSH
29698: LD_INT 15
29700: PUSH
29701: LD_INT 16
29703: PUSH
29704: LD_INT 7
29706: PUSH
29707: LD_INT 12
29709: PUSH
29710: LD_INT 13
29712: PUSH
29713: LD_INT 10
29715: PUSH
29716: LD_INT 14
29718: PUSH
29719: LD_INT 20
29721: PUSH
29722: LD_INT 21
29724: PUSH
29725: LD_INT 22
29727: PUSH
29728: LD_INT 25
29730: PUSH
29731: LD_INT 32
29733: PUSH
29734: LD_INT 27
29736: PUSH
29737: LD_INT 36
29739: PUSH
29740: LD_INT 69
29742: PUSH
29743: LD_INT 39
29745: PUSH
29746: LD_INT 34
29748: PUSH
29749: LD_INT 40
29751: PUSH
29752: LD_INT 48
29754: PUSH
29755: LD_INT 49
29757: PUSH
29758: LD_INT 50
29760: PUSH
29761: LD_INT 51
29763: PUSH
29764: LD_INT 52
29766: PUSH
29767: LD_INT 53
29769: PUSH
29770: LD_INT 54
29772: PUSH
29773: LD_INT 55
29775: PUSH
29776: LD_INT 56
29778: PUSH
29779: LD_INT 57
29781: PUSH
29782: LD_INT 58
29784: PUSH
29785: LD_INT 59
29787: PUSH
29788: LD_INT 60
29790: PUSH
29791: LD_INT 61
29793: PUSH
29794: LD_INT 62
29796: PUSH
29797: LD_INT 80
29799: PUSH
29800: LD_INT 82
29802: PUSH
29803: LD_INT 83
29805: PUSH
29806: LD_INT 84
29808: PUSH
29809: LD_INT 85
29811: PUSH
29812: LD_INT 86
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: ST_TO_ADDR
29868: GO 30335
29870: LD_INT 2
29872: DOUBLE
29873: EQUAL
29874: IFTRUE 29878
29876: GO 30104
29878: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29879: LD_ADDR_VAR 0 4
29883: PUSH
29884: LD_INT 35
29886: PUSH
29887: LD_INT 45
29889: PUSH
29890: LD_INT 46
29892: PUSH
29893: LD_INT 47
29895: PUSH
29896: LD_INT 82
29898: PUSH
29899: LD_INT 83
29901: PUSH
29902: LD_INT 84
29904: PUSH
29905: LD_INT 85
29907: PUSH
29908: LD_INT 87
29910: PUSH
29911: LD_INT 70
29913: PUSH
29914: LD_INT 1
29916: PUSH
29917: LD_INT 11
29919: PUSH
29920: LD_INT 3
29922: PUSH
29923: LD_INT 4
29925: PUSH
29926: LD_INT 5
29928: PUSH
29929: LD_INT 6
29931: PUSH
29932: LD_INT 15
29934: PUSH
29935: LD_INT 18
29937: PUSH
29938: LD_INT 7
29940: PUSH
29941: LD_INT 17
29943: PUSH
29944: LD_INT 8
29946: PUSH
29947: LD_INT 20
29949: PUSH
29950: LD_INT 21
29952: PUSH
29953: LD_INT 22
29955: PUSH
29956: LD_INT 72
29958: PUSH
29959: LD_INT 26
29961: PUSH
29962: LD_INT 69
29964: PUSH
29965: LD_INT 39
29967: PUSH
29968: LD_INT 40
29970: PUSH
29971: LD_INT 41
29973: PUSH
29974: LD_INT 42
29976: PUSH
29977: LD_INT 43
29979: PUSH
29980: LD_INT 48
29982: PUSH
29983: LD_INT 49
29985: PUSH
29986: LD_INT 50
29988: PUSH
29989: LD_INT 51
29991: PUSH
29992: LD_INT 52
29994: PUSH
29995: LD_INT 53
29997: PUSH
29998: LD_INT 54
30000: PUSH
30001: LD_INT 55
30003: PUSH
30004: LD_INT 56
30006: PUSH
30007: LD_INT 60
30009: PUSH
30010: LD_INT 61
30012: PUSH
30013: LD_INT 62
30015: PUSH
30016: LD_INT 66
30018: PUSH
30019: LD_INT 67
30021: PUSH
30022: LD_INT 68
30024: PUSH
30025: LD_INT 81
30027: PUSH
30028: LD_INT 82
30030: PUSH
30031: LD_INT 83
30033: PUSH
30034: LD_INT 84
30036: PUSH
30037: LD_INT 85
30039: PUSH
30040: LD_INT 87
30042: PUSH
30043: LD_INT 88
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: ST_TO_ADDR
30102: GO 30335
30104: LD_INT 3
30106: DOUBLE
30107: EQUAL
30108: IFTRUE 30112
30110: GO 30334
30112: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30113: LD_ADDR_VAR 0 4
30117: PUSH
30118: LD_INT 46
30120: PUSH
30121: LD_INT 47
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: LD_INT 82
30132: PUSH
30133: LD_INT 83
30135: PUSH
30136: LD_INT 84
30138: PUSH
30139: LD_INT 85
30141: PUSH
30142: LD_INT 86
30144: PUSH
30145: LD_INT 11
30147: PUSH
30148: LD_INT 9
30150: PUSH
30151: LD_INT 20
30153: PUSH
30154: LD_INT 19
30156: PUSH
30157: LD_INT 21
30159: PUSH
30160: LD_INT 24
30162: PUSH
30163: LD_INT 22
30165: PUSH
30166: LD_INT 25
30168: PUSH
30169: LD_INT 28
30171: PUSH
30172: LD_INT 29
30174: PUSH
30175: LD_INT 30
30177: PUSH
30178: LD_INT 31
30180: PUSH
30181: LD_INT 37
30183: PUSH
30184: LD_INT 38
30186: PUSH
30187: LD_INT 32
30189: PUSH
30190: LD_INT 27
30192: PUSH
30193: LD_INT 33
30195: PUSH
30196: LD_INT 69
30198: PUSH
30199: LD_INT 39
30201: PUSH
30202: LD_INT 34
30204: PUSH
30205: LD_INT 40
30207: PUSH
30208: LD_INT 71
30210: PUSH
30211: LD_INT 23
30213: PUSH
30214: LD_INT 44
30216: PUSH
30217: LD_INT 48
30219: PUSH
30220: LD_INT 49
30222: PUSH
30223: LD_INT 50
30225: PUSH
30226: LD_INT 51
30228: PUSH
30229: LD_INT 52
30231: PUSH
30232: LD_INT 53
30234: PUSH
30235: LD_INT 54
30237: PUSH
30238: LD_INT 55
30240: PUSH
30241: LD_INT 56
30243: PUSH
30244: LD_INT 57
30246: PUSH
30247: LD_INT 58
30249: PUSH
30250: LD_INT 59
30252: PUSH
30253: LD_INT 63
30255: PUSH
30256: LD_INT 64
30258: PUSH
30259: LD_INT 65
30261: PUSH
30262: LD_INT 82
30264: PUSH
30265: LD_INT 83
30267: PUSH
30268: LD_INT 84
30270: PUSH
30271: LD_INT 85
30273: PUSH
30274: LD_INT 86
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: ST_TO_ADDR
30332: GO 30335
30334: POP
// if state > - 1 and state < 3 then
30335: LD_VAR 0 3
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: GREATER
30344: PUSH
30345: LD_VAR 0 3
30349: PUSH
30350: LD_INT 3
30352: LESS
30353: AND
30354: IFFALSE 30411
// for i in result do
30356: LD_ADDR_VAR 0 5
30360: PUSH
30361: LD_VAR 0 4
30365: PUSH
30366: FOR_IN
30367: IFFALSE 30409
// if GetTech ( i , side ) <> state then
30369: LD_VAR 0 5
30373: PPUSH
30374: LD_VAR 0 1
30378: PPUSH
30379: CALL_OW 321
30383: PUSH
30384: LD_VAR 0 3
30388: NONEQUAL
30389: IFFALSE 30407
// result := result diff i ;
30391: LD_ADDR_VAR 0 4
30395: PUSH
30396: LD_VAR 0 4
30400: PUSH
30401: LD_VAR 0 5
30405: DIFF
30406: ST_TO_ADDR
30407: GO 30366
30409: POP
30410: POP
// end ;
30411: LD_VAR 0 4
30415: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30416: LD_INT 0
30418: PPUSH
30419: PPUSH
30420: PPUSH
// result := true ;
30421: LD_ADDR_VAR 0 3
30425: PUSH
30426: LD_INT 1
30428: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30429: LD_ADDR_VAR 0 5
30433: PUSH
30434: LD_VAR 0 2
30438: PPUSH
30439: CALL_OW 480
30443: ST_TO_ADDR
// if not tmp then
30444: LD_VAR 0 5
30448: NOT
30449: IFFALSE 30453
// exit ;
30451: GO 30502
// for i in tmp do
30453: LD_ADDR_VAR 0 4
30457: PUSH
30458: LD_VAR 0 5
30462: PUSH
30463: FOR_IN
30464: IFFALSE 30500
// if GetTech ( i , side ) <> state_researched then
30466: LD_VAR 0 4
30470: PPUSH
30471: LD_VAR 0 1
30475: PPUSH
30476: CALL_OW 321
30480: PUSH
30481: LD_INT 2
30483: NONEQUAL
30484: IFFALSE 30498
// begin result := false ;
30486: LD_ADDR_VAR 0 3
30490: PUSH
30491: LD_INT 0
30493: ST_TO_ADDR
// exit ;
30494: POP
30495: POP
30496: GO 30502
// end ;
30498: GO 30463
30500: POP
30501: POP
// end ;
30502: LD_VAR 0 3
30506: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30507: LD_INT 0
30509: PPUSH
30510: PPUSH
30511: PPUSH
30512: PPUSH
30513: PPUSH
30514: PPUSH
30515: PPUSH
30516: PPUSH
30517: PPUSH
30518: PPUSH
30519: PPUSH
30520: PPUSH
30521: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30522: LD_VAR 0 1
30526: NOT
30527: PUSH
30528: LD_VAR 0 1
30532: PPUSH
30533: CALL_OW 257
30537: PUSH
30538: LD_INT 9
30540: NONEQUAL
30541: OR
30542: IFFALSE 30546
// exit ;
30544: GO 31119
// side := GetSide ( unit ) ;
30546: LD_ADDR_VAR 0 9
30550: PUSH
30551: LD_VAR 0 1
30555: PPUSH
30556: CALL_OW 255
30560: ST_TO_ADDR
// tech_space := tech_spacanom ;
30561: LD_ADDR_VAR 0 12
30565: PUSH
30566: LD_INT 29
30568: ST_TO_ADDR
// tech_time := tech_taurad ;
30569: LD_ADDR_VAR 0 13
30573: PUSH
30574: LD_INT 28
30576: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30577: LD_ADDR_VAR 0 11
30581: PUSH
30582: LD_VAR 0 1
30586: PPUSH
30587: CALL_OW 310
30591: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30592: LD_VAR 0 11
30596: PPUSH
30597: CALL_OW 247
30601: PUSH
30602: LD_INT 2
30604: EQUAL
30605: IFFALSE 30609
// exit ;
30607: GO 31119
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30609: LD_ADDR_VAR 0 8
30613: PUSH
30614: LD_INT 81
30616: PUSH
30617: LD_VAR 0 9
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 3
30628: PUSH
30629: LD_INT 21
30631: PUSH
30632: LD_INT 3
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PPUSH
30647: CALL_OW 69
30651: ST_TO_ADDR
// if not tmp then
30652: LD_VAR 0 8
30656: NOT
30657: IFFALSE 30661
// exit ;
30659: GO 31119
// if in_unit then
30661: LD_VAR 0 11
30665: IFFALSE 30689
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30667: LD_ADDR_VAR 0 10
30671: PUSH
30672: LD_VAR 0 8
30676: PPUSH
30677: LD_VAR 0 11
30681: PPUSH
30682: CALL_OW 74
30686: ST_TO_ADDR
30687: GO 30709
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30689: LD_ADDR_VAR 0 10
30693: PUSH
30694: LD_VAR 0 8
30698: PPUSH
30699: LD_VAR 0 1
30703: PPUSH
30704: CALL_OW 74
30708: ST_TO_ADDR
// if not enemy then
30709: LD_VAR 0 10
30713: NOT
30714: IFFALSE 30718
// exit ;
30716: GO 31119
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30718: LD_VAR 0 11
30722: PUSH
30723: LD_VAR 0 11
30727: PPUSH
30728: LD_VAR 0 10
30732: PPUSH
30733: CALL_OW 296
30737: PUSH
30738: LD_INT 13
30740: GREATER
30741: AND
30742: PUSH
30743: LD_VAR 0 1
30747: PPUSH
30748: LD_VAR 0 10
30752: PPUSH
30753: CALL_OW 296
30757: PUSH
30758: LD_INT 12
30760: GREATER
30761: OR
30762: IFFALSE 30766
// exit ;
30764: GO 31119
// missile := [ 1 ] ;
30766: LD_ADDR_VAR 0 14
30770: PUSH
30771: LD_INT 1
30773: PUSH
30774: EMPTY
30775: LIST
30776: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30777: LD_VAR 0 9
30781: PPUSH
30782: LD_VAR 0 12
30786: PPUSH
30787: CALL_OW 325
30791: IFFALSE 30820
// missile := Replace ( missile , missile + 1 , 2 ) ;
30793: LD_ADDR_VAR 0 14
30797: PUSH
30798: LD_VAR 0 14
30802: PPUSH
30803: LD_VAR 0 14
30807: PUSH
30808: LD_INT 1
30810: PLUS
30811: PPUSH
30812: LD_INT 2
30814: PPUSH
30815: CALL_OW 1
30819: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30820: LD_VAR 0 9
30824: PPUSH
30825: LD_VAR 0 13
30829: PPUSH
30830: CALL_OW 325
30834: PUSH
30835: LD_VAR 0 10
30839: PPUSH
30840: CALL_OW 255
30844: PPUSH
30845: LD_VAR 0 13
30849: PPUSH
30850: CALL_OW 325
30854: NOT
30855: AND
30856: IFFALSE 30885
// missile := Replace ( missile , missile + 1 , 3 ) ;
30858: LD_ADDR_VAR 0 14
30862: PUSH
30863: LD_VAR 0 14
30867: PPUSH
30868: LD_VAR 0 14
30872: PUSH
30873: LD_INT 1
30875: PLUS
30876: PPUSH
30877: LD_INT 3
30879: PPUSH
30880: CALL_OW 1
30884: ST_TO_ADDR
// if missile < 2 then
30885: LD_VAR 0 14
30889: PUSH
30890: LD_INT 2
30892: LESS
30893: IFFALSE 30897
// exit ;
30895: GO 31119
// x := GetX ( enemy ) ;
30897: LD_ADDR_VAR 0 4
30901: PUSH
30902: LD_VAR 0 10
30906: PPUSH
30907: CALL_OW 250
30911: ST_TO_ADDR
// y := GetY ( enemy ) ;
30912: LD_ADDR_VAR 0 5
30916: PUSH
30917: LD_VAR 0 10
30921: PPUSH
30922: CALL_OW 251
30926: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30927: LD_ADDR_VAR 0 6
30931: PUSH
30932: LD_VAR 0 4
30936: PUSH
30937: LD_INT 1
30939: NEG
30940: PPUSH
30941: LD_INT 1
30943: PPUSH
30944: CALL_OW 12
30948: PLUS
30949: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30950: LD_ADDR_VAR 0 7
30954: PUSH
30955: LD_VAR 0 5
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PPUSH
30964: LD_INT 1
30966: PPUSH
30967: CALL_OW 12
30971: PLUS
30972: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30973: LD_VAR 0 6
30977: PPUSH
30978: LD_VAR 0 7
30982: PPUSH
30983: CALL_OW 488
30987: NOT
30988: IFFALSE 31010
// begin _x := x ;
30990: LD_ADDR_VAR 0 6
30994: PUSH
30995: LD_VAR 0 4
30999: ST_TO_ADDR
// _y := y ;
31000: LD_ADDR_VAR 0 7
31004: PUSH
31005: LD_VAR 0 5
31009: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31010: LD_ADDR_VAR 0 3
31014: PUSH
31015: LD_INT 1
31017: PPUSH
31018: LD_VAR 0 14
31022: PPUSH
31023: CALL_OW 12
31027: ST_TO_ADDR
// case i of 1 :
31028: LD_VAR 0 3
31032: PUSH
31033: LD_INT 1
31035: DOUBLE
31036: EQUAL
31037: IFTRUE 31041
31039: GO 31058
31041: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31042: LD_VAR 0 1
31046: PPUSH
31047: LD_VAR 0 10
31051: PPUSH
31052: CALL_OW 115
31056: GO 31119
31058: LD_INT 2
31060: DOUBLE
31061: EQUAL
31062: IFTRUE 31066
31064: GO 31088
31066: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31067: LD_VAR 0 1
31071: PPUSH
31072: LD_VAR 0 6
31076: PPUSH
31077: LD_VAR 0 7
31081: PPUSH
31082: CALL_OW 153
31086: GO 31119
31088: LD_INT 3
31090: DOUBLE
31091: EQUAL
31092: IFTRUE 31096
31094: GO 31118
31096: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31097: LD_VAR 0 1
31101: PPUSH
31102: LD_VAR 0 6
31106: PPUSH
31107: LD_VAR 0 7
31111: PPUSH
31112: CALL_OW 154
31116: GO 31119
31118: POP
// end ;
31119: LD_VAR 0 2
31123: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31124: LD_INT 0
31126: PPUSH
31127: PPUSH
31128: PPUSH
31129: PPUSH
31130: PPUSH
31131: PPUSH
// if not unit or not building then
31132: LD_VAR 0 1
31136: NOT
31137: PUSH
31138: LD_VAR 0 2
31142: NOT
31143: OR
31144: IFFALSE 31148
// exit ;
31146: GO 31306
// x := GetX ( building ) ;
31148: LD_ADDR_VAR 0 5
31152: PUSH
31153: LD_VAR 0 2
31157: PPUSH
31158: CALL_OW 250
31162: ST_TO_ADDR
// y := GetY ( building ) ;
31163: LD_ADDR_VAR 0 6
31167: PUSH
31168: LD_VAR 0 2
31172: PPUSH
31173: CALL_OW 251
31177: ST_TO_ADDR
// for i = 0 to 5 do
31178: LD_ADDR_VAR 0 4
31182: PUSH
31183: DOUBLE
31184: LD_INT 0
31186: DEC
31187: ST_TO_ADDR
31188: LD_INT 5
31190: PUSH
31191: FOR_TO
31192: IFFALSE 31304
// begin _x := ShiftX ( x , i , 3 ) ;
31194: LD_ADDR_VAR 0 7
31198: PUSH
31199: LD_VAR 0 5
31203: PPUSH
31204: LD_VAR 0 4
31208: PPUSH
31209: LD_INT 3
31211: PPUSH
31212: CALL_OW 272
31216: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31217: LD_ADDR_VAR 0 8
31221: PUSH
31222: LD_VAR 0 6
31226: PPUSH
31227: LD_VAR 0 4
31231: PPUSH
31232: LD_INT 3
31234: PPUSH
31235: CALL_OW 273
31239: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31240: LD_VAR 0 7
31244: PPUSH
31245: LD_VAR 0 8
31249: PPUSH
31250: CALL_OW 488
31254: NOT
31255: IFFALSE 31259
// continue ;
31257: GO 31191
// if HexInfo ( _x , _y ) = 0 then
31259: LD_VAR 0 7
31263: PPUSH
31264: LD_VAR 0 8
31268: PPUSH
31269: CALL_OW 428
31273: PUSH
31274: LD_INT 0
31276: EQUAL
31277: IFFALSE 31302
// begin ComMoveXY ( unit , _x , _y ) ;
31279: LD_VAR 0 1
31283: PPUSH
31284: LD_VAR 0 7
31288: PPUSH
31289: LD_VAR 0 8
31293: PPUSH
31294: CALL_OW 111
// exit ;
31298: POP
31299: POP
31300: GO 31306
// end ; end ;
31302: GO 31191
31304: POP
31305: POP
// end ;
31306: LD_VAR 0 3
31310: RET
// export function ScanBase ( side , base_area ) ; begin
31311: LD_INT 0
31313: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31314: LD_ADDR_VAR 0 3
31318: PUSH
31319: LD_VAR 0 2
31323: PPUSH
31324: LD_INT 81
31326: PUSH
31327: LD_VAR 0 1
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PPUSH
31336: CALL_OW 70
31340: ST_TO_ADDR
// end ;
31341: LD_VAR 0 3
31345: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31346: LD_INT 0
31348: PPUSH
31349: PPUSH
31350: PPUSH
31351: PPUSH
// result := false ;
31352: LD_ADDR_VAR 0 2
31356: PUSH
31357: LD_INT 0
31359: ST_TO_ADDR
// side := GetSide ( unit ) ;
31360: LD_ADDR_VAR 0 3
31364: PUSH
31365: LD_VAR 0 1
31369: PPUSH
31370: CALL_OW 255
31374: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31375: LD_ADDR_VAR 0 4
31379: PUSH
31380: LD_VAR 0 1
31384: PPUSH
31385: CALL_OW 248
31389: ST_TO_ADDR
// case nat of 1 :
31390: LD_VAR 0 4
31394: PUSH
31395: LD_INT 1
31397: DOUBLE
31398: EQUAL
31399: IFTRUE 31403
31401: GO 31414
31403: POP
// tech := tech_lassight ; 2 :
31404: LD_ADDR_VAR 0 5
31408: PUSH
31409: LD_INT 12
31411: ST_TO_ADDR
31412: GO 31453
31414: LD_INT 2
31416: DOUBLE
31417: EQUAL
31418: IFTRUE 31422
31420: GO 31433
31422: POP
// tech := tech_mortar ; 3 :
31423: LD_ADDR_VAR 0 5
31427: PUSH
31428: LD_INT 41
31430: ST_TO_ADDR
31431: GO 31453
31433: LD_INT 3
31435: DOUBLE
31436: EQUAL
31437: IFTRUE 31441
31439: GO 31452
31441: POP
// tech := tech_bazooka ; end ;
31442: LD_ADDR_VAR 0 5
31446: PUSH
31447: LD_INT 44
31449: ST_TO_ADDR
31450: GO 31453
31452: POP
// if Researched ( side , tech ) then
31453: LD_VAR 0 3
31457: PPUSH
31458: LD_VAR 0 5
31462: PPUSH
31463: CALL_OW 325
31467: IFFALSE 31494
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31469: LD_ADDR_VAR 0 2
31473: PUSH
31474: LD_INT 5
31476: PUSH
31477: LD_INT 8
31479: PUSH
31480: LD_INT 9
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: LIST
31487: PUSH
31488: LD_VAR 0 4
31492: ARRAY
31493: ST_TO_ADDR
// end ;
31494: LD_VAR 0 2
31498: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31499: LD_INT 0
31501: PPUSH
31502: PPUSH
31503: PPUSH
// if not mines then
31504: LD_VAR 0 2
31508: NOT
31509: IFFALSE 31513
// exit ;
31511: GO 31657
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31513: LD_ADDR_VAR 0 5
31517: PUSH
31518: LD_INT 81
31520: PUSH
31521: LD_VAR 0 1
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 3
31532: PUSH
31533: LD_INT 21
31535: PUSH
31536: LD_INT 3
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PPUSH
31551: CALL_OW 69
31555: ST_TO_ADDR
// for i in mines do
31556: LD_ADDR_VAR 0 4
31560: PUSH
31561: LD_VAR 0 2
31565: PUSH
31566: FOR_IN
31567: IFFALSE 31655
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31569: LD_VAR 0 4
31573: PUSH
31574: LD_INT 1
31576: ARRAY
31577: PPUSH
31578: LD_VAR 0 4
31582: PUSH
31583: LD_INT 2
31585: ARRAY
31586: PPUSH
31587: CALL_OW 458
31591: NOT
31592: IFFALSE 31596
// continue ;
31594: GO 31566
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31596: LD_VAR 0 4
31600: PUSH
31601: LD_INT 1
31603: ARRAY
31604: PPUSH
31605: LD_VAR 0 4
31609: PUSH
31610: LD_INT 2
31612: ARRAY
31613: PPUSH
31614: CALL_OW 428
31618: PUSH
31619: LD_VAR 0 5
31623: IN
31624: IFFALSE 31653
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31626: LD_VAR 0 4
31630: PUSH
31631: LD_INT 1
31633: ARRAY
31634: PPUSH
31635: LD_VAR 0 4
31639: PUSH
31640: LD_INT 2
31642: ARRAY
31643: PPUSH
31644: LD_VAR 0 1
31648: PPUSH
31649: CALL_OW 456
// end ;
31653: GO 31566
31655: POP
31656: POP
// end ;
31657: LD_VAR 0 3
31661: RET
// export function Count ( array ) ; begin
31662: LD_INT 0
31664: PPUSH
// result := array + 0 ;
31665: LD_ADDR_VAR 0 2
31669: PUSH
31670: LD_VAR 0 1
31674: PUSH
31675: LD_INT 0
31677: PLUS
31678: ST_TO_ADDR
// end ;
31679: LD_VAR 0 2
31683: RET
// export function IsEmpty ( building ) ; begin
31684: LD_INT 0
31686: PPUSH
// if not building then
31687: LD_VAR 0 1
31691: NOT
31692: IFFALSE 31696
// exit ;
31694: GO 31739
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31696: LD_ADDR_VAR 0 2
31700: PUSH
31701: LD_VAR 0 1
31705: PUSH
31706: LD_INT 22
31708: PUSH
31709: LD_VAR 0 1
31713: PPUSH
31714: CALL_OW 255
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 58
31725: PUSH
31726: EMPTY
31727: LIST
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PPUSH
31733: CALL_OW 69
31737: IN
31738: ST_TO_ADDR
// end ;
31739: LD_VAR 0 2
31743: RET
// export function IsNotFull ( building ) ; var places ; begin
31744: LD_INT 0
31746: PPUSH
31747: PPUSH
// if not building then
31748: LD_VAR 0 1
31752: NOT
31753: IFFALSE 31757
// exit ;
31755: GO 31785
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31757: LD_ADDR_VAR 0 2
31761: PUSH
31762: LD_VAR 0 1
31766: PPUSH
31767: LD_INT 3
31769: PUSH
31770: LD_INT 62
31772: PUSH
31773: EMPTY
31774: LIST
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PPUSH
31780: CALL_OW 72
31784: ST_TO_ADDR
// end ;
31785: LD_VAR 0 2
31789: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31790: LD_INT 0
31792: PPUSH
31793: PPUSH
31794: PPUSH
31795: PPUSH
// tmp := [ ] ;
31796: LD_ADDR_VAR 0 3
31800: PUSH
31801: EMPTY
31802: ST_TO_ADDR
// list := [ ] ;
31803: LD_ADDR_VAR 0 5
31807: PUSH
31808: EMPTY
31809: ST_TO_ADDR
// for i = 16 to 25 do
31810: LD_ADDR_VAR 0 4
31814: PUSH
31815: DOUBLE
31816: LD_INT 16
31818: DEC
31819: ST_TO_ADDR
31820: LD_INT 25
31822: PUSH
31823: FOR_TO
31824: IFFALSE 31897
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31826: LD_ADDR_VAR 0 3
31830: PUSH
31831: LD_VAR 0 3
31835: PUSH
31836: LD_INT 22
31838: PUSH
31839: LD_VAR 0 1
31843: PPUSH
31844: CALL_OW 255
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 91
31855: PUSH
31856: LD_VAR 0 1
31860: PUSH
31861: LD_INT 6
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 30
31871: PUSH
31872: LD_VAR 0 4
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: PUSH
31886: EMPTY
31887: LIST
31888: PPUSH
31889: CALL_OW 69
31893: ADD
31894: ST_TO_ADDR
31895: GO 31823
31897: POP
31898: POP
// for i = 1 to tmp do
31899: LD_ADDR_VAR 0 4
31903: PUSH
31904: DOUBLE
31905: LD_INT 1
31907: DEC
31908: ST_TO_ADDR
31909: LD_VAR 0 3
31913: PUSH
31914: FOR_TO
31915: IFFALSE 32003
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31917: LD_ADDR_VAR 0 5
31921: PUSH
31922: LD_VAR 0 5
31926: PUSH
31927: LD_VAR 0 3
31931: PUSH
31932: LD_VAR 0 4
31936: ARRAY
31937: PPUSH
31938: CALL_OW 266
31942: PUSH
31943: LD_VAR 0 3
31947: PUSH
31948: LD_VAR 0 4
31952: ARRAY
31953: PPUSH
31954: CALL_OW 250
31958: PUSH
31959: LD_VAR 0 3
31963: PUSH
31964: LD_VAR 0 4
31968: ARRAY
31969: PPUSH
31970: CALL_OW 251
31974: PUSH
31975: LD_VAR 0 3
31979: PUSH
31980: LD_VAR 0 4
31984: ARRAY
31985: PPUSH
31986: CALL_OW 254
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: PUSH
31997: EMPTY
31998: LIST
31999: ADD
32000: ST_TO_ADDR
32001: GO 31914
32003: POP
32004: POP
// result := list ;
32005: LD_ADDR_VAR 0 2
32009: PUSH
32010: LD_VAR 0 5
32014: ST_TO_ADDR
// end ;
32015: LD_VAR 0 2
32019: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32020: LD_INT 0
32022: PPUSH
32023: PPUSH
32024: PPUSH
32025: PPUSH
32026: PPUSH
32027: PPUSH
32028: PPUSH
// if not factory then
32029: LD_VAR 0 1
32033: NOT
32034: IFFALSE 32038
// exit ;
32036: GO 32631
// if control = control_apeman then
32038: LD_VAR 0 4
32042: PUSH
32043: LD_INT 5
32045: EQUAL
32046: IFFALSE 32155
// begin tmp := UnitsInside ( factory ) ;
32048: LD_ADDR_VAR 0 8
32052: PUSH
32053: LD_VAR 0 1
32057: PPUSH
32058: CALL_OW 313
32062: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32063: LD_VAR 0 8
32067: PPUSH
32068: LD_INT 25
32070: PUSH
32071: LD_INT 12
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PPUSH
32078: CALL_OW 72
32082: NOT
32083: IFFALSE 32093
// control := control_manual ;
32085: LD_ADDR_VAR 0 4
32089: PUSH
32090: LD_INT 1
32092: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32093: LD_ADDR_VAR 0 8
32097: PUSH
32098: LD_VAR 0 1
32102: PPUSH
32103: CALL 31790 0 1
32107: ST_TO_ADDR
// if tmp then
32108: LD_VAR 0 8
32112: IFFALSE 32155
// begin for i in tmp do
32114: LD_ADDR_VAR 0 7
32118: PUSH
32119: LD_VAR 0 8
32123: PUSH
32124: FOR_IN
32125: IFFALSE 32153
// if i [ 1 ] = b_ext_radio then
32127: LD_VAR 0 7
32131: PUSH
32132: LD_INT 1
32134: ARRAY
32135: PUSH
32136: LD_INT 22
32138: EQUAL
32139: IFFALSE 32151
// begin control := control_remote ;
32141: LD_ADDR_VAR 0 4
32145: PUSH
32146: LD_INT 2
32148: ST_TO_ADDR
// break ;
32149: GO 32153
// end ;
32151: GO 32124
32153: POP
32154: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32155: LD_VAR 0 1
32159: PPUSH
32160: LD_VAR 0 2
32164: PPUSH
32165: LD_VAR 0 3
32169: PPUSH
32170: LD_VAR 0 4
32174: PPUSH
32175: LD_VAR 0 5
32179: PPUSH
32180: CALL_OW 448
32184: IFFALSE 32219
// begin result := [ chassis , engine , control , weapon ] ;
32186: LD_ADDR_VAR 0 6
32190: PUSH
32191: LD_VAR 0 2
32195: PUSH
32196: LD_VAR 0 3
32200: PUSH
32201: LD_VAR 0 4
32205: PUSH
32206: LD_VAR 0 5
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: ST_TO_ADDR
// exit ;
32217: GO 32631
// end ; _chassis := AvailableChassisList ( factory ) ;
32219: LD_ADDR_VAR 0 9
32223: PUSH
32224: LD_VAR 0 1
32228: PPUSH
32229: CALL_OW 475
32233: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32234: LD_ADDR_VAR 0 11
32238: PUSH
32239: LD_VAR 0 1
32243: PPUSH
32244: CALL_OW 476
32248: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32249: LD_ADDR_VAR 0 12
32253: PUSH
32254: LD_VAR 0 1
32258: PPUSH
32259: CALL_OW 477
32263: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32264: LD_ADDR_VAR 0 10
32268: PUSH
32269: LD_VAR 0 1
32273: PPUSH
32274: CALL_OW 478
32278: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32279: LD_VAR 0 9
32283: NOT
32284: PUSH
32285: LD_VAR 0 11
32289: NOT
32290: OR
32291: PUSH
32292: LD_VAR 0 12
32296: NOT
32297: OR
32298: PUSH
32299: LD_VAR 0 10
32303: NOT
32304: OR
32305: IFFALSE 32340
// begin result := [ chassis , engine , control , weapon ] ;
32307: LD_ADDR_VAR 0 6
32311: PUSH
32312: LD_VAR 0 2
32316: PUSH
32317: LD_VAR 0 3
32321: PUSH
32322: LD_VAR 0 4
32326: PUSH
32327: LD_VAR 0 5
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: ST_TO_ADDR
// exit ;
32338: GO 32631
// end ; if not chassis in _chassis then
32340: LD_VAR 0 2
32344: PUSH
32345: LD_VAR 0 9
32349: IN
32350: NOT
32351: IFFALSE 32377
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32353: LD_ADDR_VAR 0 2
32357: PUSH
32358: LD_VAR 0 9
32362: PUSH
32363: LD_INT 1
32365: PPUSH
32366: LD_VAR 0 9
32370: PPUSH
32371: CALL_OW 12
32375: ARRAY
32376: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32377: LD_VAR 0 2
32381: PPUSH
32382: LD_VAR 0 3
32386: PPUSH
32387: CALL 32636 0 2
32391: NOT
32392: IFFALSE 32451
// repeat engine := _engine [ 1 ] ;
32394: LD_ADDR_VAR 0 3
32398: PUSH
32399: LD_VAR 0 11
32403: PUSH
32404: LD_INT 1
32406: ARRAY
32407: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32408: LD_ADDR_VAR 0 11
32412: PUSH
32413: LD_VAR 0 11
32417: PPUSH
32418: LD_INT 1
32420: PPUSH
32421: CALL_OW 3
32425: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32426: LD_VAR 0 2
32430: PPUSH
32431: LD_VAR 0 3
32435: PPUSH
32436: CALL 32636 0 2
32440: PUSH
32441: LD_VAR 0 11
32445: PUSH
32446: EMPTY
32447: EQUAL
32448: OR
32449: IFFALSE 32394
// if not control in _control then
32451: LD_VAR 0 4
32455: PUSH
32456: LD_VAR 0 12
32460: IN
32461: NOT
32462: IFFALSE 32488
// control := _control [ rand ( 1 , _control ) ] ;
32464: LD_ADDR_VAR 0 4
32468: PUSH
32469: LD_VAR 0 12
32473: PUSH
32474: LD_INT 1
32476: PPUSH
32477: LD_VAR 0 12
32481: PPUSH
32482: CALL_OW 12
32486: ARRAY
32487: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32488: LD_VAR 0 2
32492: PPUSH
32493: LD_VAR 0 5
32497: PPUSH
32498: CALL 32856 0 2
32502: NOT
32503: IFFALSE 32562
// repeat weapon := _weapon [ 1 ] ;
32505: LD_ADDR_VAR 0 5
32509: PUSH
32510: LD_VAR 0 10
32514: PUSH
32515: LD_INT 1
32517: ARRAY
32518: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32519: LD_ADDR_VAR 0 10
32523: PUSH
32524: LD_VAR 0 10
32528: PPUSH
32529: LD_INT 1
32531: PPUSH
32532: CALL_OW 3
32536: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32537: LD_VAR 0 2
32541: PPUSH
32542: LD_VAR 0 5
32546: PPUSH
32547: CALL 32856 0 2
32551: PUSH
32552: LD_VAR 0 10
32556: PUSH
32557: EMPTY
32558: EQUAL
32559: OR
32560: IFFALSE 32505
// result := [ ] ;
32562: LD_ADDR_VAR 0 6
32566: PUSH
32567: EMPTY
32568: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32569: LD_VAR 0 1
32573: PPUSH
32574: LD_VAR 0 2
32578: PPUSH
32579: LD_VAR 0 3
32583: PPUSH
32584: LD_VAR 0 4
32588: PPUSH
32589: LD_VAR 0 5
32593: PPUSH
32594: CALL_OW 448
32598: IFFALSE 32631
// result := [ chassis , engine , control , weapon ] ;
32600: LD_ADDR_VAR 0 6
32604: PUSH
32605: LD_VAR 0 2
32609: PUSH
32610: LD_VAR 0 3
32614: PUSH
32615: LD_VAR 0 4
32619: PUSH
32620: LD_VAR 0 5
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: ST_TO_ADDR
// end ;
32631: LD_VAR 0 6
32635: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32636: LD_INT 0
32638: PPUSH
// if not chassis or not engine then
32639: LD_VAR 0 1
32643: NOT
32644: PUSH
32645: LD_VAR 0 2
32649: NOT
32650: OR
32651: IFFALSE 32655
// exit ;
32653: GO 32851
// case engine of engine_solar :
32655: LD_VAR 0 2
32659: PUSH
32660: LD_INT 2
32662: DOUBLE
32663: EQUAL
32664: IFTRUE 32668
32666: GO 32706
32668: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32669: LD_ADDR_VAR 0 3
32673: PUSH
32674: LD_INT 11
32676: PUSH
32677: LD_INT 12
32679: PUSH
32680: LD_INT 13
32682: PUSH
32683: LD_INT 14
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: LD_INT 2
32691: PUSH
32692: LD_INT 3
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: ST_TO_ADDR
32704: GO 32835
32706: LD_INT 1
32708: DOUBLE
32709: EQUAL
32710: IFTRUE 32714
32712: GO 32776
32714: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32715: LD_ADDR_VAR 0 3
32719: PUSH
32720: LD_INT 11
32722: PUSH
32723: LD_INT 12
32725: PUSH
32726: LD_INT 13
32728: PUSH
32729: LD_INT 14
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: LD_INT 2
32737: PUSH
32738: LD_INT 3
32740: PUSH
32741: LD_INT 4
32743: PUSH
32744: LD_INT 5
32746: PUSH
32747: LD_INT 21
32749: PUSH
32750: LD_INT 23
32752: PUSH
32753: LD_INT 22
32755: PUSH
32756: LD_INT 24
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: ST_TO_ADDR
32774: GO 32835
32776: LD_INT 3
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32834
32784: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32785: LD_ADDR_VAR 0 3
32789: PUSH
32790: LD_INT 13
32792: PUSH
32793: LD_INT 14
32795: PUSH
32796: LD_INT 2
32798: PUSH
32799: LD_INT 3
32801: PUSH
32802: LD_INT 4
32804: PUSH
32805: LD_INT 5
32807: PUSH
32808: LD_INT 21
32810: PUSH
32811: LD_INT 22
32813: PUSH
32814: LD_INT 23
32816: PUSH
32817: LD_INT 24
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: ST_TO_ADDR
32832: GO 32835
32834: POP
// result := ( chassis in result ) ;
32835: LD_ADDR_VAR 0 3
32839: PUSH
32840: LD_VAR 0 1
32844: PUSH
32845: LD_VAR 0 3
32849: IN
32850: ST_TO_ADDR
// end ;
32851: LD_VAR 0 3
32855: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32856: LD_INT 0
32858: PPUSH
// if not chassis or not weapon then
32859: LD_VAR 0 1
32863: NOT
32864: PUSH
32865: LD_VAR 0 2
32869: NOT
32870: OR
32871: IFFALSE 32875
// exit ;
32873: GO 33935
// case weapon of us_machine_gun :
32875: LD_VAR 0 2
32879: PUSH
32880: LD_INT 2
32882: DOUBLE
32883: EQUAL
32884: IFTRUE 32888
32886: GO 32918
32888: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32889: LD_ADDR_VAR 0 3
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: LD_INT 2
32899: PUSH
32900: LD_INT 3
32902: PUSH
32903: LD_INT 4
32905: PUSH
32906: LD_INT 5
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: ST_TO_ADDR
32916: GO 33919
32918: LD_INT 3
32920: DOUBLE
32921: EQUAL
32922: IFTRUE 32926
32924: GO 32956
32926: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32927: LD_ADDR_VAR 0 3
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: LD_INT 2
32937: PUSH
32938: LD_INT 3
32940: PUSH
32941: LD_INT 4
32943: PUSH
32944: LD_INT 5
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: ST_TO_ADDR
32954: GO 33919
32956: LD_INT 11
32958: DOUBLE
32959: EQUAL
32960: IFTRUE 32964
32962: GO 32994
32964: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32965: LD_ADDR_VAR 0 3
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: LD_INT 3
32978: PUSH
32979: LD_INT 4
32981: PUSH
32982: LD_INT 5
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: ST_TO_ADDR
32992: GO 33919
32994: LD_INT 4
32996: DOUBLE
32997: EQUAL
32998: IFTRUE 33002
33000: GO 33028
33002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33003: LD_ADDR_VAR 0 3
33007: PUSH
33008: LD_INT 2
33010: PUSH
33011: LD_INT 3
33013: PUSH
33014: LD_INT 4
33016: PUSH
33017: LD_INT 5
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: ST_TO_ADDR
33026: GO 33919
33028: LD_INT 5
33030: DOUBLE
33031: EQUAL
33032: IFTRUE 33036
33034: GO 33062
33036: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33037: LD_ADDR_VAR 0 3
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: LD_INT 3
33047: PUSH
33048: LD_INT 4
33050: PUSH
33051: LD_INT 5
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: ST_TO_ADDR
33060: GO 33919
33062: LD_INT 9
33064: DOUBLE
33065: EQUAL
33066: IFTRUE 33070
33068: GO 33096
33070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33071: LD_ADDR_VAR 0 3
33075: PUSH
33076: LD_INT 2
33078: PUSH
33079: LD_INT 3
33081: PUSH
33082: LD_INT 4
33084: PUSH
33085: LD_INT 5
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: ST_TO_ADDR
33094: GO 33919
33096: LD_INT 7
33098: DOUBLE
33099: EQUAL
33100: IFTRUE 33104
33102: GO 33130
33104: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33105: LD_ADDR_VAR 0 3
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: LD_INT 3
33115: PUSH
33116: LD_INT 4
33118: PUSH
33119: LD_INT 5
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: ST_TO_ADDR
33128: GO 33919
33130: LD_INT 12
33132: DOUBLE
33133: EQUAL
33134: IFTRUE 33138
33136: GO 33164
33138: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33139: LD_ADDR_VAR 0 3
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: LD_INT 3
33149: PUSH
33150: LD_INT 4
33152: PUSH
33153: LD_INT 5
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: ST_TO_ADDR
33162: GO 33919
33164: LD_INT 13
33166: DOUBLE
33167: EQUAL
33168: IFTRUE 33172
33170: GO 33198
33172: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33173: LD_ADDR_VAR 0 3
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: LD_INT 3
33183: PUSH
33184: LD_INT 4
33186: PUSH
33187: LD_INT 5
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: ST_TO_ADDR
33196: GO 33919
33198: LD_INT 14
33200: DOUBLE
33201: EQUAL
33202: IFTRUE 33206
33204: GO 33224
33206: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33207: LD_ADDR_VAR 0 3
33211: PUSH
33212: LD_INT 4
33214: PUSH
33215: LD_INT 5
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: ST_TO_ADDR
33222: GO 33919
33224: LD_INT 6
33226: DOUBLE
33227: EQUAL
33228: IFTRUE 33232
33230: GO 33250
33232: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33233: LD_ADDR_VAR 0 3
33237: PUSH
33238: LD_INT 4
33240: PUSH
33241: LD_INT 5
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: ST_TO_ADDR
33248: GO 33919
33250: LD_INT 10
33252: DOUBLE
33253: EQUAL
33254: IFTRUE 33258
33256: GO 33276
33258: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33259: LD_ADDR_VAR 0 3
33263: PUSH
33264: LD_INT 4
33266: PUSH
33267: LD_INT 5
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: ST_TO_ADDR
33274: GO 33919
33276: LD_INT 22
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33310
33284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33285: LD_ADDR_VAR 0 3
33289: PUSH
33290: LD_INT 11
33292: PUSH
33293: LD_INT 12
33295: PUSH
33296: LD_INT 13
33298: PUSH
33299: LD_INT 14
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: ST_TO_ADDR
33308: GO 33919
33310: LD_INT 23
33312: DOUBLE
33313: EQUAL
33314: IFTRUE 33318
33316: GO 33344
33318: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33319: LD_ADDR_VAR 0 3
33323: PUSH
33324: LD_INT 11
33326: PUSH
33327: LD_INT 12
33329: PUSH
33330: LD_INT 13
33332: PUSH
33333: LD_INT 14
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: ST_TO_ADDR
33342: GO 33919
33344: LD_INT 24
33346: DOUBLE
33347: EQUAL
33348: IFTRUE 33352
33350: GO 33378
33352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33353: LD_ADDR_VAR 0 3
33357: PUSH
33358: LD_INT 11
33360: PUSH
33361: LD_INT 12
33363: PUSH
33364: LD_INT 13
33366: PUSH
33367: LD_INT 14
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: ST_TO_ADDR
33376: GO 33919
33378: LD_INT 30
33380: DOUBLE
33381: EQUAL
33382: IFTRUE 33386
33384: GO 33412
33386: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33387: LD_ADDR_VAR 0 3
33391: PUSH
33392: LD_INT 11
33394: PUSH
33395: LD_INT 12
33397: PUSH
33398: LD_INT 13
33400: PUSH
33401: LD_INT 14
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: ST_TO_ADDR
33410: GO 33919
33412: LD_INT 25
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33420
33418: GO 33438
33420: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33421: LD_ADDR_VAR 0 3
33425: PUSH
33426: LD_INT 13
33428: PUSH
33429: LD_INT 14
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: ST_TO_ADDR
33436: GO 33919
33438: LD_INT 27
33440: DOUBLE
33441: EQUAL
33442: IFTRUE 33446
33444: GO 33464
33446: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33447: LD_ADDR_VAR 0 3
33451: PUSH
33452: LD_INT 13
33454: PUSH
33455: LD_INT 14
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: ST_TO_ADDR
33462: GO 33919
33464: LD_INT 92
33466: DOUBLE
33467: EQUAL
33468: IFTRUE 33472
33470: GO 33498
33472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33473: LD_ADDR_VAR 0 3
33477: PUSH
33478: LD_INT 11
33480: PUSH
33481: LD_INT 12
33483: PUSH
33484: LD_INT 13
33486: PUSH
33487: LD_INT 14
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: ST_TO_ADDR
33496: GO 33919
33498: LD_INT 28
33500: DOUBLE
33501: EQUAL
33502: IFTRUE 33506
33504: GO 33524
33506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33507: LD_ADDR_VAR 0 3
33511: PUSH
33512: LD_INT 13
33514: PUSH
33515: LD_INT 14
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: ST_TO_ADDR
33522: GO 33919
33524: LD_INT 29
33526: DOUBLE
33527: EQUAL
33528: IFTRUE 33532
33530: GO 33550
33532: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_INT 13
33540: PUSH
33541: LD_INT 14
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: ST_TO_ADDR
33548: GO 33919
33550: LD_INT 31
33552: DOUBLE
33553: EQUAL
33554: IFTRUE 33558
33556: GO 33576
33558: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33559: LD_ADDR_VAR 0 3
33563: PUSH
33564: LD_INT 13
33566: PUSH
33567: LD_INT 14
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: ST_TO_ADDR
33574: GO 33919
33576: LD_INT 26
33578: DOUBLE
33579: EQUAL
33580: IFTRUE 33584
33582: GO 33602
33584: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33585: LD_ADDR_VAR 0 3
33589: PUSH
33590: LD_INT 13
33592: PUSH
33593: LD_INT 14
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: ST_TO_ADDR
33600: GO 33919
33602: LD_INT 42
33604: DOUBLE
33605: EQUAL
33606: IFTRUE 33610
33608: GO 33636
33610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33611: LD_ADDR_VAR 0 3
33615: PUSH
33616: LD_INT 21
33618: PUSH
33619: LD_INT 22
33621: PUSH
33622: LD_INT 23
33624: PUSH
33625: LD_INT 24
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: ST_TO_ADDR
33634: GO 33919
33636: LD_INT 43
33638: DOUBLE
33639: EQUAL
33640: IFTRUE 33644
33642: GO 33670
33644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: LD_INT 21
33652: PUSH
33653: LD_INT 22
33655: PUSH
33656: LD_INT 23
33658: PUSH
33659: LD_INT 24
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: ST_TO_ADDR
33668: GO 33919
33670: LD_INT 44
33672: DOUBLE
33673: EQUAL
33674: IFTRUE 33678
33676: GO 33704
33678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33679: LD_ADDR_VAR 0 3
33683: PUSH
33684: LD_INT 21
33686: PUSH
33687: LD_INT 22
33689: PUSH
33690: LD_INT 23
33692: PUSH
33693: LD_INT 24
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: ST_TO_ADDR
33702: GO 33919
33704: LD_INT 45
33706: DOUBLE
33707: EQUAL
33708: IFTRUE 33712
33710: GO 33738
33712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33713: LD_ADDR_VAR 0 3
33717: PUSH
33718: LD_INT 21
33720: PUSH
33721: LD_INT 22
33723: PUSH
33724: LD_INT 23
33726: PUSH
33727: LD_INT 24
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: ST_TO_ADDR
33736: GO 33919
33738: LD_INT 49
33740: DOUBLE
33741: EQUAL
33742: IFTRUE 33746
33744: GO 33772
33746: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33747: LD_ADDR_VAR 0 3
33751: PUSH
33752: LD_INT 21
33754: PUSH
33755: LD_INT 22
33757: PUSH
33758: LD_INT 23
33760: PUSH
33761: LD_INT 24
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: ST_TO_ADDR
33770: GO 33919
33772: LD_INT 51
33774: DOUBLE
33775: EQUAL
33776: IFTRUE 33780
33778: GO 33806
33780: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33781: LD_ADDR_VAR 0 3
33785: PUSH
33786: LD_INT 21
33788: PUSH
33789: LD_INT 22
33791: PUSH
33792: LD_INT 23
33794: PUSH
33795: LD_INT 24
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: ST_TO_ADDR
33804: GO 33919
33806: LD_INT 52
33808: DOUBLE
33809: EQUAL
33810: IFTRUE 33814
33812: GO 33840
33814: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33815: LD_ADDR_VAR 0 3
33819: PUSH
33820: LD_INT 21
33822: PUSH
33823: LD_INT 22
33825: PUSH
33826: LD_INT 23
33828: PUSH
33829: LD_INT 24
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: ST_TO_ADDR
33838: GO 33919
33840: LD_INT 53
33842: DOUBLE
33843: EQUAL
33844: IFTRUE 33848
33846: GO 33866
33848: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33849: LD_ADDR_VAR 0 3
33853: PUSH
33854: LD_INT 23
33856: PUSH
33857: LD_INT 24
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: ST_TO_ADDR
33864: GO 33919
33866: LD_INT 46
33868: DOUBLE
33869: EQUAL
33870: IFTRUE 33874
33872: GO 33892
33874: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33875: LD_ADDR_VAR 0 3
33879: PUSH
33880: LD_INT 23
33882: PUSH
33883: LD_INT 24
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: ST_TO_ADDR
33890: GO 33919
33892: LD_INT 47
33894: DOUBLE
33895: EQUAL
33896: IFTRUE 33900
33898: GO 33918
33900: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33901: LD_ADDR_VAR 0 3
33905: PUSH
33906: LD_INT 23
33908: PUSH
33909: LD_INT 24
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: ST_TO_ADDR
33916: GO 33919
33918: POP
// result := ( chassis in result ) ;
33919: LD_ADDR_VAR 0 3
33923: PUSH
33924: LD_VAR 0 1
33928: PUSH
33929: LD_VAR 0 3
33933: IN
33934: ST_TO_ADDR
// end ;
33935: LD_VAR 0 3
33939: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33940: LD_INT 0
33942: PPUSH
33943: PPUSH
33944: PPUSH
33945: PPUSH
33946: PPUSH
33947: PPUSH
33948: PPUSH
// result := array ;
33949: LD_ADDR_VAR 0 5
33953: PUSH
33954: LD_VAR 0 1
33958: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33959: LD_VAR 0 1
33963: NOT
33964: PUSH
33965: LD_VAR 0 2
33969: NOT
33970: OR
33971: PUSH
33972: LD_VAR 0 3
33976: NOT
33977: OR
33978: PUSH
33979: LD_VAR 0 2
33983: PUSH
33984: LD_VAR 0 1
33988: GREATER
33989: OR
33990: PUSH
33991: LD_VAR 0 3
33995: PUSH
33996: LD_VAR 0 1
34000: GREATER
34001: OR
34002: IFFALSE 34006
// exit ;
34004: GO 34302
// if direction then
34006: LD_VAR 0 4
34010: IFFALSE 34074
// begin d := 1 ;
34012: LD_ADDR_VAR 0 9
34016: PUSH
34017: LD_INT 1
34019: ST_TO_ADDR
// if i_from > i_to then
34020: LD_VAR 0 2
34024: PUSH
34025: LD_VAR 0 3
34029: GREATER
34030: IFFALSE 34056
// length := ( array - i_from ) + i_to else
34032: LD_ADDR_VAR 0 11
34036: PUSH
34037: LD_VAR 0 1
34041: PUSH
34042: LD_VAR 0 2
34046: MINUS
34047: PUSH
34048: LD_VAR 0 3
34052: PLUS
34053: ST_TO_ADDR
34054: GO 34072
// length := i_to - i_from ;
34056: LD_ADDR_VAR 0 11
34060: PUSH
34061: LD_VAR 0 3
34065: PUSH
34066: LD_VAR 0 2
34070: MINUS
34071: ST_TO_ADDR
// end else
34072: GO 34135
// begin d := - 1 ;
34074: LD_ADDR_VAR 0 9
34078: PUSH
34079: LD_INT 1
34081: NEG
34082: ST_TO_ADDR
// if i_from > i_to then
34083: LD_VAR 0 2
34087: PUSH
34088: LD_VAR 0 3
34092: GREATER
34093: IFFALSE 34113
// length := i_from - i_to else
34095: LD_ADDR_VAR 0 11
34099: PUSH
34100: LD_VAR 0 2
34104: PUSH
34105: LD_VAR 0 3
34109: MINUS
34110: ST_TO_ADDR
34111: GO 34135
// length := ( array - i_to ) + i_from ;
34113: LD_ADDR_VAR 0 11
34117: PUSH
34118: LD_VAR 0 1
34122: PUSH
34123: LD_VAR 0 3
34127: MINUS
34128: PUSH
34129: LD_VAR 0 2
34133: PLUS
34134: ST_TO_ADDR
// end ; if not length then
34135: LD_VAR 0 11
34139: NOT
34140: IFFALSE 34144
// exit ;
34142: GO 34302
// tmp := array ;
34144: LD_ADDR_VAR 0 10
34148: PUSH
34149: LD_VAR 0 1
34153: ST_TO_ADDR
// for i = 1 to length do
34154: LD_ADDR_VAR 0 6
34158: PUSH
34159: DOUBLE
34160: LD_INT 1
34162: DEC
34163: ST_TO_ADDR
34164: LD_VAR 0 11
34168: PUSH
34169: FOR_TO
34170: IFFALSE 34290
// begin for j = 1 to array do
34172: LD_ADDR_VAR 0 7
34176: PUSH
34177: DOUBLE
34178: LD_INT 1
34180: DEC
34181: ST_TO_ADDR
34182: LD_VAR 0 1
34186: PUSH
34187: FOR_TO
34188: IFFALSE 34276
// begin k := j + d ;
34190: LD_ADDR_VAR 0 8
34194: PUSH
34195: LD_VAR 0 7
34199: PUSH
34200: LD_VAR 0 9
34204: PLUS
34205: ST_TO_ADDR
// if k > array then
34206: LD_VAR 0 8
34210: PUSH
34211: LD_VAR 0 1
34215: GREATER
34216: IFFALSE 34226
// k := 1 ;
34218: LD_ADDR_VAR 0 8
34222: PUSH
34223: LD_INT 1
34225: ST_TO_ADDR
// if not k then
34226: LD_VAR 0 8
34230: NOT
34231: IFFALSE 34243
// k := array ;
34233: LD_ADDR_VAR 0 8
34237: PUSH
34238: LD_VAR 0 1
34242: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34243: LD_ADDR_VAR 0 10
34247: PUSH
34248: LD_VAR 0 10
34252: PPUSH
34253: LD_VAR 0 8
34257: PPUSH
34258: LD_VAR 0 1
34262: PUSH
34263: LD_VAR 0 7
34267: ARRAY
34268: PPUSH
34269: CALL_OW 1
34273: ST_TO_ADDR
// end ;
34274: GO 34187
34276: POP
34277: POP
// array := tmp ;
34278: LD_ADDR_VAR 0 1
34282: PUSH
34283: LD_VAR 0 10
34287: ST_TO_ADDR
// end ;
34288: GO 34169
34290: POP
34291: POP
// result := array ;
34292: LD_ADDR_VAR 0 5
34296: PUSH
34297: LD_VAR 0 1
34301: ST_TO_ADDR
// end ;
34302: LD_VAR 0 5
34306: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34307: LD_INT 0
34309: PPUSH
34310: PPUSH
// result := 0 ;
34311: LD_ADDR_VAR 0 3
34315: PUSH
34316: LD_INT 0
34318: ST_TO_ADDR
// if not array or not value in array then
34319: LD_VAR 0 1
34323: NOT
34324: PUSH
34325: LD_VAR 0 2
34329: PUSH
34330: LD_VAR 0 1
34334: IN
34335: NOT
34336: OR
34337: IFFALSE 34341
// exit ;
34339: GO 34395
// for i = 1 to array do
34341: LD_ADDR_VAR 0 4
34345: PUSH
34346: DOUBLE
34347: LD_INT 1
34349: DEC
34350: ST_TO_ADDR
34351: LD_VAR 0 1
34355: PUSH
34356: FOR_TO
34357: IFFALSE 34393
// if value = array [ i ] then
34359: LD_VAR 0 2
34363: PUSH
34364: LD_VAR 0 1
34368: PUSH
34369: LD_VAR 0 4
34373: ARRAY
34374: EQUAL
34375: IFFALSE 34391
// begin result := i ;
34377: LD_ADDR_VAR 0 3
34381: PUSH
34382: LD_VAR 0 4
34386: ST_TO_ADDR
// exit ;
34387: POP
34388: POP
34389: GO 34395
// end ;
34391: GO 34356
34393: POP
34394: POP
// end ;
34395: LD_VAR 0 3
34399: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34400: LD_INT 0
34402: PPUSH
// vc_chassis := chassis ;
34403: LD_ADDR_OWVAR 37
34407: PUSH
34408: LD_VAR 0 1
34412: ST_TO_ADDR
// vc_engine := engine ;
34413: LD_ADDR_OWVAR 39
34417: PUSH
34418: LD_VAR 0 2
34422: ST_TO_ADDR
// vc_control := control ;
34423: LD_ADDR_OWVAR 38
34427: PUSH
34428: LD_VAR 0 3
34432: ST_TO_ADDR
// vc_weapon := weapon ;
34433: LD_ADDR_OWVAR 40
34437: PUSH
34438: LD_VAR 0 4
34442: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34443: LD_ADDR_OWVAR 41
34447: PUSH
34448: LD_VAR 0 5
34452: ST_TO_ADDR
// end ;
34453: LD_VAR 0 6
34457: RET
// export function WantPlant ( unit ) ; var task ; begin
34458: LD_INT 0
34460: PPUSH
34461: PPUSH
// result := false ;
34462: LD_ADDR_VAR 0 2
34466: PUSH
34467: LD_INT 0
34469: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34470: LD_ADDR_VAR 0 3
34474: PUSH
34475: LD_VAR 0 1
34479: PPUSH
34480: CALL_OW 437
34484: ST_TO_ADDR
// if task then
34485: LD_VAR 0 3
34489: IFFALSE 34517
// if task [ 1 ] [ 1 ] = p then
34491: LD_VAR 0 3
34495: PUSH
34496: LD_INT 1
34498: ARRAY
34499: PUSH
34500: LD_INT 1
34502: ARRAY
34503: PUSH
34504: LD_STRING p
34506: EQUAL
34507: IFFALSE 34517
// result := true ;
34509: LD_ADDR_VAR 0 2
34513: PUSH
34514: LD_INT 1
34516: ST_TO_ADDR
// end ;
34517: LD_VAR 0 2
34521: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34522: LD_INT 0
34524: PPUSH
34525: PPUSH
34526: PPUSH
34527: PPUSH
// if pos < 1 then
34528: LD_VAR 0 2
34532: PUSH
34533: LD_INT 1
34535: LESS
34536: IFFALSE 34540
// exit ;
34538: GO 34843
// if pos = 1 then
34540: LD_VAR 0 2
34544: PUSH
34545: LD_INT 1
34547: EQUAL
34548: IFFALSE 34581
// result := Replace ( arr , pos [ 1 ] , value ) else
34550: LD_ADDR_VAR 0 4
34554: PUSH
34555: LD_VAR 0 1
34559: PPUSH
34560: LD_VAR 0 2
34564: PUSH
34565: LD_INT 1
34567: ARRAY
34568: PPUSH
34569: LD_VAR 0 3
34573: PPUSH
34574: CALL_OW 1
34578: ST_TO_ADDR
34579: GO 34843
// begin tmp := arr ;
34581: LD_ADDR_VAR 0 6
34585: PUSH
34586: LD_VAR 0 1
34590: ST_TO_ADDR
// s_arr := [ tmp ] ;
34591: LD_ADDR_VAR 0 7
34595: PUSH
34596: LD_VAR 0 6
34600: PUSH
34601: EMPTY
34602: LIST
34603: ST_TO_ADDR
// for i = 1 to pos - 1 do
34604: LD_ADDR_VAR 0 5
34608: PUSH
34609: DOUBLE
34610: LD_INT 1
34612: DEC
34613: ST_TO_ADDR
34614: LD_VAR 0 2
34618: PUSH
34619: LD_INT 1
34621: MINUS
34622: PUSH
34623: FOR_TO
34624: IFFALSE 34669
// begin tmp := tmp [ pos [ i ] ] ;
34626: LD_ADDR_VAR 0 6
34630: PUSH
34631: LD_VAR 0 6
34635: PUSH
34636: LD_VAR 0 2
34640: PUSH
34641: LD_VAR 0 5
34645: ARRAY
34646: ARRAY
34647: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34648: LD_ADDR_VAR 0 7
34652: PUSH
34653: LD_VAR 0 7
34657: PUSH
34658: LD_VAR 0 6
34662: PUSH
34663: EMPTY
34664: LIST
34665: ADD
34666: ST_TO_ADDR
// end ;
34667: GO 34623
34669: POP
34670: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34671: LD_ADDR_VAR 0 6
34675: PUSH
34676: LD_VAR 0 6
34680: PPUSH
34681: LD_VAR 0 2
34685: PUSH
34686: LD_VAR 0 2
34690: ARRAY
34691: PPUSH
34692: LD_VAR 0 3
34696: PPUSH
34697: CALL_OW 1
34701: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34702: LD_ADDR_VAR 0 7
34706: PUSH
34707: LD_VAR 0 7
34711: PPUSH
34712: LD_VAR 0 7
34716: PPUSH
34717: LD_VAR 0 6
34721: PPUSH
34722: CALL_OW 1
34726: ST_TO_ADDR
// for i = s_arr downto 2 do
34727: LD_ADDR_VAR 0 5
34731: PUSH
34732: DOUBLE
34733: LD_VAR 0 7
34737: INC
34738: ST_TO_ADDR
34739: LD_INT 2
34741: PUSH
34742: FOR_DOWNTO
34743: IFFALSE 34827
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34745: LD_ADDR_VAR 0 6
34749: PUSH
34750: LD_VAR 0 7
34754: PUSH
34755: LD_VAR 0 5
34759: PUSH
34760: LD_INT 1
34762: MINUS
34763: ARRAY
34764: PPUSH
34765: LD_VAR 0 2
34769: PUSH
34770: LD_VAR 0 5
34774: PUSH
34775: LD_INT 1
34777: MINUS
34778: ARRAY
34779: PPUSH
34780: LD_VAR 0 7
34784: PUSH
34785: LD_VAR 0 5
34789: ARRAY
34790: PPUSH
34791: CALL_OW 1
34795: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34796: LD_ADDR_VAR 0 7
34800: PUSH
34801: LD_VAR 0 7
34805: PPUSH
34806: LD_VAR 0 5
34810: PUSH
34811: LD_INT 1
34813: MINUS
34814: PPUSH
34815: LD_VAR 0 6
34819: PPUSH
34820: CALL_OW 1
34824: ST_TO_ADDR
// end ;
34825: GO 34742
34827: POP
34828: POP
// result := s_arr [ 1 ] ;
34829: LD_ADDR_VAR 0 4
34833: PUSH
34834: LD_VAR 0 7
34838: PUSH
34839: LD_INT 1
34841: ARRAY
34842: ST_TO_ADDR
// end ; end ;
34843: LD_VAR 0 4
34847: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34848: LD_INT 0
34850: PPUSH
34851: PPUSH
// if not list then
34852: LD_VAR 0 1
34856: NOT
34857: IFFALSE 34861
// exit ;
34859: GO 34952
// i := list [ pos1 ] ;
34861: LD_ADDR_VAR 0 5
34865: PUSH
34866: LD_VAR 0 1
34870: PUSH
34871: LD_VAR 0 2
34875: ARRAY
34876: ST_TO_ADDR
// if not i then
34877: LD_VAR 0 5
34881: NOT
34882: IFFALSE 34886
// exit ;
34884: GO 34952
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34886: LD_ADDR_VAR 0 1
34890: PUSH
34891: LD_VAR 0 1
34895: PPUSH
34896: LD_VAR 0 2
34900: PPUSH
34901: LD_VAR 0 1
34905: PUSH
34906: LD_VAR 0 3
34910: ARRAY
34911: PPUSH
34912: CALL_OW 1
34916: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34917: LD_ADDR_VAR 0 1
34921: PUSH
34922: LD_VAR 0 1
34926: PPUSH
34927: LD_VAR 0 3
34931: PPUSH
34932: LD_VAR 0 5
34936: PPUSH
34937: CALL_OW 1
34941: ST_TO_ADDR
// result := list ;
34942: LD_ADDR_VAR 0 4
34946: PUSH
34947: LD_VAR 0 1
34951: ST_TO_ADDR
// end ;
34952: LD_VAR 0 4
34956: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34957: LD_INT 0
34959: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34960: LD_ADDR_VAR 0 5
34964: PUSH
34965: LD_VAR 0 1
34969: PPUSH
34970: CALL_OW 250
34974: PPUSH
34975: LD_VAR 0 1
34979: PPUSH
34980: CALL_OW 251
34984: PPUSH
34985: LD_VAR 0 2
34989: PPUSH
34990: LD_VAR 0 3
34994: PPUSH
34995: LD_VAR 0 4
34999: PPUSH
35000: CALL 35010 0 5
35004: ST_TO_ADDR
// end ;
35005: LD_VAR 0 5
35009: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35010: LD_INT 0
35012: PPUSH
35013: PPUSH
35014: PPUSH
35015: PPUSH
// if not list then
35016: LD_VAR 0 3
35020: NOT
35021: IFFALSE 35025
// exit ;
35023: GO 35413
// result := [ ] ;
35025: LD_ADDR_VAR 0 6
35029: PUSH
35030: EMPTY
35031: ST_TO_ADDR
// for i in list do
35032: LD_ADDR_VAR 0 7
35036: PUSH
35037: LD_VAR 0 3
35041: PUSH
35042: FOR_IN
35043: IFFALSE 35245
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35045: LD_ADDR_VAR 0 9
35049: PUSH
35050: LD_VAR 0 7
35054: PPUSH
35055: LD_VAR 0 1
35059: PPUSH
35060: LD_VAR 0 2
35064: PPUSH
35065: CALL_OW 297
35069: ST_TO_ADDR
// if not result then
35070: LD_VAR 0 6
35074: NOT
35075: IFFALSE 35101
// result := [ [ i , tmp ] ] else
35077: LD_ADDR_VAR 0 6
35081: PUSH
35082: LD_VAR 0 7
35086: PUSH
35087: LD_VAR 0 9
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: EMPTY
35097: LIST
35098: ST_TO_ADDR
35099: GO 35243
// begin if result [ result ] [ 2 ] < tmp then
35101: LD_VAR 0 6
35105: PUSH
35106: LD_VAR 0 6
35110: ARRAY
35111: PUSH
35112: LD_INT 2
35114: ARRAY
35115: PUSH
35116: LD_VAR 0 9
35120: LESS
35121: IFFALSE 35163
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35123: LD_ADDR_VAR 0 6
35127: PUSH
35128: LD_VAR 0 6
35132: PPUSH
35133: LD_VAR 0 6
35137: PUSH
35138: LD_INT 1
35140: PLUS
35141: PPUSH
35142: LD_VAR 0 7
35146: PUSH
35147: LD_VAR 0 9
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PPUSH
35156: CALL_OW 2
35160: ST_TO_ADDR
35161: GO 35243
// for j = 1 to result do
35163: LD_ADDR_VAR 0 8
35167: PUSH
35168: DOUBLE
35169: LD_INT 1
35171: DEC
35172: ST_TO_ADDR
35173: LD_VAR 0 6
35177: PUSH
35178: FOR_TO
35179: IFFALSE 35241
// begin if tmp < result [ j ] [ 2 ] then
35181: LD_VAR 0 9
35185: PUSH
35186: LD_VAR 0 6
35190: PUSH
35191: LD_VAR 0 8
35195: ARRAY
35196: PUSH
35197: LD_INT 2
35199: ARRAY
35200: LESS
35201: IFFALSE 35239
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35203: LD_ADDR_VAR 0 6
35207: PUSH
35208: LD_VAR 0 6
35212: PPUSH
35213: LD_VAR 0 8
35217: PPUSH
35218: LD_VAR 0 7
35222: PUSH
35223: LD_VAR 0 9
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PPUSH
35232: CALL_OW 2
35236: ST_TO_ADDR
// break ;
35237: GO 35241
// end ; end ;
35239: GO 35178
35241: POP
35242: POP
// end ; end ;
35243: GO 35042
35245: POP
35246: POP
// if result and not asc then
35247: LD_VAR 0 6
35251: PUSH
35252: LD_VAR 0 4
35256: NOT
35257: AND
35258: IFFALSE 35333
// begin tmp := result ;
35260: LD_ADDR_VAR 0 9
35264: PUSH
35265: LD_VAR 0 6
35269: ST_TO_ADDR
// for i = tmp downto 1 do
35270: LD_ADDR_VAR 0 7
35274: PUSH
35275: DOUBLE
35276: LD_VAR 0 9
35280: INC
35281: ST_TO_ADDR
35282: LD_INT 1
35284: PUSH
35285: FOR_DOWNTO
35286: IFFALSE 35331
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35288: LD_ADDR_VAR 0 6
35292: PUSH
35293: LD_VAR 0 6
35297: PPUSH
35298: LD_VAR 0 9
35302: PUSH
35303: LD_VAR 0 7
35307: MINUS
35308: PUSH
35309: LD_INT 1
35311: PLUS
35312: PPUSH
35313: LD_VAR 0 9
35317: PUSH
35318: LD_VAR 0 7
35322: ARRAY
35323: PPUSH
35324: CALL_OW 1
35328: ST_TO_ADDR
35329: GO 35285
35331: POP
35332: POP
// end ; tmp := [ ] ;
35333: LD_ADDR_VAR 0 9
35337: PUSH
35338: EMPTY
35339: ST_TO_ADDR
// if mode then
35340: LD_VAR 0 5
35344: IFFALSE 35413
// begin for i = 1 to result do
35346: LD_ADDR_VAR 0 7
35350: PUSH
35351: DOUBLE
35352: LD_INT 1
35354: DEC
35355: ST_TO_ADDR
35356: LD_VAR 0 6
35360: PUSH
35361: FOR_TO
35362: IFFALSE 35401
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35364: LD_ADDR_VAR 0 9
35368: PUSH
35369: LD_VAR 0 9
35373: PPUSH
35374: LD_VAR 0 7
35378: PPUSH
35379: LD_VAR 0 6
35383: PUSH
35384: LD_VAR 0 7
35388: ARRAY
35389: PUSH
35390: LD_INT 1
35392: ARRAY
35393: PPUSH
35394: CALL_OW 1
35398: ST_TO_ADDR
35399: GO 35361
35401: POP
35402: POP
// result := tmp ;
35403: LD_ADDR_VAR 0 6
35407: PUSH
35408: LD_VAR 0 9
35412: ST_TO_ADDR
// end ; end ;
35413: LD_VAR 0 6
35417: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35418: LD_INT 0
35420: PPUSH
35421: PPUSH
35422: PPUSH
35423: PPUSH
35424: PPUSH
35425: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35426: LD_ADDR_VAR 0 5
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: ST_TO_ADDR
// if not x or not y then
35448: LD_VAR 0 2
35452: NOT
35453: PUSH
35454: LD_VAR 0 3
35458: NOT
35459: OR
35460: IFFALSE 35464
// exit ;
35462: GO 37114
// if not range then
35464: LD_VAR 0 4
35468: NOT
35469: IFFALSE 35479
// range := 10 ;
35471: LD_ADDR_VAR 0 4
35475: PUSH
35476: LD_INT 10
35478: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35479: LD_ADDR_VAR 0 8
35483: PUSH
35484: LD_INT 81
35486: PUSH
35487: LD_VAR 0 1
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 92
35498: PUSH
35499: LD_VAR 0 2
35503: PUSH
35504: LD_VAR 0 3
35508: PUSH
35509: LD_VAR 0 4
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 3
35522: PUSH
35523: LD_INT 21
35525: PUSH
35526: LD_INT 3
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: LIST
35541: PPUSH
35542: CALL_OW 69
35546: ST_TO_ADDR
// if not tmp then
35547: LD_VAR 0 8
35551: NOT
35552: IFFALSE 35556
// exit ;
35554: GO 37114
// for i in tmp do
35556: LD_ADDR_VAR 0 6
35560: PUSH
35561: LD_VAR 0 8
35565: PUSH
35566: FOR_IN
35567: IFFALSE 37089
// begin points := [ 0 , 0 , 0 ] ;
35569: LD_ADDR_VAR 0 9
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: ST_TO_ADDR
// bpoints := 1 ;
35588: LD_ADDR_VAR 0 10
35592: PUSH
35593: LD_INT 1
35595: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35596: LD_VAR 0 6
35600: PPUSH
35601: CALL_OW 247
35605: PUSH
35606: LD_INT 1
35608: DOUBLE
35609: EQUAL
35610: IFTRUE 35614
35612: GO 36192
35614: POP
// begin if GetClass ( i ) = 1 then
35615: LD_VAR 0 6
35619: PPUSH
35620: CALL_OW 257
35624: PUSH
35625: LD_INT 1
35627: EQUAL
35628: IFFALSE 35649
// points := [ 10 , 5 , 3 ] ;
35630: LD_ADDR_VAR 0 9
35634: PUSH
35635: LD_INT 10
35637: PUSH
35638: LD_INT 5
35640: PUSH
35641: LD_INT 3
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: LIST
35648: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35649: LD_VAR 0 6
35653: PPUSH
35654: CALL_OW 257
35658: PUSH
35659: LD_INT 2
35661: PUSH
35662: LD_INT 3
35664: PUSH
35665: LD_INT 4
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: LIST
35672: IN
35673: IFFALSE 35694
// points := [ 3 , 2 , 1 ] ;
35675: LD_ADDR_VAR 0 9
35679: PUSH
35680: LD_INT 3
35682: PUSH
35683: LD_INT 2
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: LIST
35693: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35694: LD_VAR 0 6
35698: PPUSH
35699: CALL_OW 257
35703: PUSH
35704: LD_INT 5
35706: EQUAL
35707: IFFALSE 35728
// points := [ 130 , 5 , 2 ] ;
35709: LD_ADDR_VAR 0 9
35713: PUSH
35714: LD_INT 130
35716: PUSH
35717: LD_INT 5
35719: PUSH
35720: LD_INT 2
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: LIST
35727: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35728: LD_VAR 0 6
35732: PPUSH
35733: CALL_OW 257
35737: PUSH
35738: LD_INT 8
35740: EQUAL
35741: IFFALSE 35762
// points := [ 35 , 35 , 30 ] ;
35743: LD_ADDR_VAR 0 9
35747: PUSH
35748: LD_INT 35
35750: PUSH
35751: LD_INT 35
35753: PUSH
35754: LD_INT 30
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35762: LD_VAR 0 6
35766: PPUSH
35767: CALL_OW 257
35771: PUSH
35772: LD_INT 9
35774: EQUAL
35775: IFFALSE 35796
// points := [ 20 , 55 , 40 ] ;
35777: LD_ADDR_VAR 0 9
35781: PUSH
35782: LD_INT 20
35784: PUSH
35785: LD_INT 55
35787: PUSH
35788: LD_INT 40
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: LIST
35795: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35796: LD_VAR 0 6
35800: PPUSH
35801: CALL_OW 257
35805: PUSH
35806: LD_INT 12
35808: PUSH
35809: LD_INT 16
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: IN
35816: IFFALSE 35837
// points := [ 5 , 3 , 2 ] ;
35818: LD_ADDR_VAR 0 9
35822: PUSH
35823: LD_INT 5
35825: PUSH
35826: LD_INT 3
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: LIST
35836: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35837: LD_VAR 0 6
35841: PPUSH
35842: CALL_OW 257
35846: PUSH
35847: LD_INT 17
35849: EQUAL
35850: IFFALSE 35871
// points := [ 100 , 50 , 75 ] ;
35852: LD_ADDR_VAR 0 9
35856: PUSH
35857: LD_INT 100
35859: PUSH
35860: LD_INT 50
35862: PUSH
35863: LD_INT 75
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: LIST
35870: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35871: LD_VAR 0 6
35875: PPUSH
35876: CALL_OW 257
35880: PUSH
35881: LD_INT 15
35883: EQUAL
35884: IFFALSE 35905
// points := [ 10 , 5 , 3 ] ;
35886: LD_ADDR_VAR 0 9
35890: PUSH
35891: LD_INT 10
35893: PUSH
35894: LD_INT 5
35896: PUSH
35897: LD_INT 3
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35905: LD_VAR 0 6
35909: PPUSH
35910: CALL_OW 257
35914: PUSH
35915: LD_INT 14
35917: EQUAL
35918: IFFALSE 35939
// points := [ 10 , 0 , 0 ] ;
35920: LD_ADDR_VAR 0 9
35924: PUSH
35925: LD_INT 10
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: LIST
35938: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35939: LD_VAR 0 6
35943: PPUSH
35944: CALL_OW 257
35948: PUSH
35949: LD_INT 11
35951: EQUAL
35952: IFFALSE 35973
// points := [ 30 , 10 , 5 ] ;
35954: LD_ADDR_VAR 0 9
35958: PUSH
35959: LD_INT 30
35961: PUSH
35962: LD_INT 10
35964: PUSH
35965: LD_INT 5
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35973: LD_VAR 0 1
35977: PPUSH
35978: LD_INT 5
35980: PPUSH
35981: CALL_OW 321
35985: PUSH
35986: LD_INT 2
35988: EQUAL
35989: IFFALSE 36006
// bpoints := bpoints * 1.8 ;
35991: LD_ADDR_VAR 0 10
35995: PUSH
35996: LD_VAR 0 10
36000: PUSH
36001: LD_REAL  1.80000000000000E+0000
36004: MUL
36005: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36006: LD_VAR 0 6
36010: PPUSH
36011: CALL_OW 257
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: LD_INT 2
36021: PUSH
36022: LD_INT 3
36024: PUSH
36025: LD_INT 4
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: IN
36034: PUSH
36035: LD_VAR 0 1
36039: PPUSH
36040: LD_INT 51
36042: PPUSH
36043: CALL_OW 321
36047: PUSH
36048: LD_INT 2
36050: EQUAL
36051: AND
36052: IFFALSE 36069
// bpoints := bpoints * 1.2 ;
36054: LD_ADDR_VAR 0 10
36058: PUSH
36059: LD_VAR 0 10
36063: PUSH
36064: LD_REAL  1.20000000000000E+0000
36067: MUL
36068: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36069: LD_VAR 0 6
36073: PPUSH
36074: CALL_OW 257
36078: PUSH
36079: LD_INT 5
36081: PUSH
36082: LD_INT 7
36084: PUSH
36085: LD_INT 9
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: IN
36093: PUSH
36094: LD_VAR 0 1
36098: PPUSH
36099: LD_INT 52
36101: PPUSH
36102: CALL_OW 321
36106: PUSH
36107: LD_INT 2
36109: EQUAL
36110: AND
36111: IFFALSE 36128
// bpoints := bpoints * 1.5 ;
36113: LD_ADDR_VAR 0 10
36117: PUSH
36118: LD_VAR 0 10
36122: PUSH
36123: LD_REAL  1.50000000000000E+0000
36126: MUL
36127: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36128: LD_VAR 0 1
36132: PPUSH
36133: LD_INT 66
36135: PPUSH
36136: CALL_OW 321
36140: PUSH
36141: LD_INT 2
36143: EQUAL
36144: IFFALSE 36161
// bpoints := bpoints * 1.1 ;
36146: LD_ADDR_VAR 0 10
36150: PUSH
36151: LD_VAR 0 10
36155: PUSH
36156: LD_REAL  1.10000000000000E+0000
36159: MUL
36160: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36161: LD_ADDR_VAR 0 10
36165: PUSH
36166: LD_VAR 0 10
36170: PUSH
36171: LD_VAR 0 6
36175: PPUSH
36176: LD_INT 1
36178: PPUSH
36179: CALL_OW 259
36183: PUSH
36184: LD_REAL  1.15000000000000E+0000
36187: MUL
36188: MUL
36189: ST_TO_ADDR
// end ; unit_vehicle :
36190: GO 37018
36192: LD_INT 2
36194: DOUBLE
36195: EQUAL
36196: IFTRUE 36200
36198: GO 37006
36200: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36201: LD_VAR 0 6
36205: PPUSH
36206: CALL_OW 264
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: LD_INT 42
36216: PUSH
36217: LD_INT 24
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: IN
36225: IFFALSE 36246
// points := [ 25 , 5 , 3 ] ;
36227: LD_ADDR_VAR 0 9
36231: PUSH
36232: LD_INT 25
36234: PUSH
36235: LD_INT 5
36237: PUSH
36238: LD_INT 3
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36246: LD_VAR 0 6
36250: PPUSH
36251: CALL_OW 264
36255: PUSH
36256: LD_INT 4
36258: PUSH
36259: LD_INT 43
36261: PUSH
36262: LD_INT 25
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: IN
36270: IFFALSE 36291
// points := [ 40 , 15 , 5 ] ;
36272: LD_ADDR_VAR 0 9
36276: PUSH
36277: LD_INT 40
36279: PUSH
36280: LD_INT 15
36282: PUSH
36283: LD_INT 5
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: LIST
36290: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36291: LD_VAR 0 6
36295: PPUSH
36296: CALL_OW 264
36300: PUSH
36301: LD_INT 3
36303: PUSH
36304: LD_INT 23
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: IN
36311: IFFALSE 36332
// points := [ 7 , 25 , 8 ] ;
36313: LD_ADDR_VAR 0 9
36317: PUSH
36318: LD_INT 7
36320: PUSH
36321: LD_INT 25
36323: PUSH
36324: LD_INT 8
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: LIST
36331: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36332: LD_VAR 0 6
36336: PPUSH
36337: CALL_OW 264
36341: PUSH
36342: LD_INT 5
36344: PUSH
36345: LD_INT 27
36347: PUSH
36348: LD_INT 44
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: IN
36356: IFFALSE 36377
// points := [ 14 , 50 , 16 ] ;
36358: LD_ADDR_VAR 0 9
36362: PUSH
36363: LD_INT 14
36365: PUSH
36366: LD_INT 50
36368: PUSH
36369: LD_INT 16
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: LIST
36376: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36377: LD_VAR 0 6
36381: PPUSH
36382: CALL_OW 264
36386: PUSH
36387: LD_INT 6
36389: PUSH
36390: LD_INT 46
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: IN
36397: IFFALSE 36418
// points := [ 32 , 120 , 70 ] ;
36399: LD_ADDR_VAR 0 9
36403: PUSH
36404: LD_INT 32
36406: PUSH
36407: LD_INT 120
36409: PUSH
36410: LD_INT 70
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36418: LD_VAR 0 6
36422: PPUSH
36423: CALL_OW 264
36427: PUSH
36428: LD_INT 7
36430: PUSH
36431: LD_INT 28
36433: PUSH
36434: LD_INT 45
36436: PUSH
36437: LD_INT 92
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: IN
36446: IFFALSE 36467
// points := [ 35 , 20 , 45 ] ;
36448: LD_ADDR_VAR 0 9
36452: PUSH
36453: LD_INT 35
36455: PUSH
36456: LD_INT 20
36458: PUSH
36459: LD_INT 45
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36467: LD_VAR 0 6
36471: PPUSH
36472: CALL_OW 264
36476: PUSH
36477: LD_INT 47
36479: PUSH
36480: EMPTY
36481: LIST
36482: IN
36483: IFFALSE 36504
// points := [ 67 , 45 , 75 ] ;
36485: LD_ADDR_VAR 0 9
36489: PUSH
36490: LD_INT 67
36492: PUSH
36493: LD_INT 45
36495: PUSH
36496: LD_INT 75
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36504: LD_VAR 0 6
36508: PPUSH
36509: CALL_OW 264
36513: PUSH
36514: LD_INT 26
36516: PUSH
36517: EMPTY
36518: LIST
36519: IN
36520: IFFALSE 36541
// points := [ 120 , 30 , 80 ] ;
36522: LD_ADDR_VAR 0 9
36526: PUSH
36527: LD_INT 120
36529: PUSH
36530: LD_INT 30
36532: PUSH
36533: LD_INT 80
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: LIST
36540: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36541: LD_VAR 0 6
36545: PPUSH
36546: CALL_OW 264
36550: PUSH
36551: LD_INT 22
36553: PUSH
36554: EMPTY
36555: LIST
36556: IN
36557: IFFALSE 36578
// points := [ 40 , 1 , 1 ] ;
36559: LD_ADDR_VAR 0 9
36563: PUSH
36564: LD_INT 40
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: LD_INT 1
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36578: LD_VAR 0 6
36582: PPUSH
36583: CALL_OW 264
36587: PUSH
36588: LD_INT 29
36590: PUSH
36591: EMPTY
36592: LIST
36593: IN
36594: IFFALSE 36615
// points := [ 70 , 200 , 400 ] ;
36596: LD_ADDR_VAR 0 9
36600: PUSH
36601: LD_INT 70
36603: PUSH
36604: LD_INT 200
36606: PUSH
36607: LD_INT 400
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36615: LD_VAR 0 6
36619: PPUSH
36620: CALL_OW 264
36624: PUSH
36625: LD_INT 14
36627: PUSH
36628: LD_INT 53
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: IN
36635: IFFALSE 36656
// points := [ 40 , 10 , 20 ] ;
36637: LD_ADDR_VAR 0 9
36641: PUSH
36642: LD_INT 40
36644: PUSH
36645: LD_INT 10
36647: PUSH
36648: LD_INT 20
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36656: LD_VAR 0 6
36660: PPUSH
36661: CALL_OW 264
36665: PUSH
36666: LD_INT 9
36668: PUSH
36669: EMPTY
36670: LIST
36671: IN
36672: IFFALSE 36693
// points := [ 5 , 70 , 20 ] ;
36674: LD_ADDR_VAR 0 9
36678: PUSH
36679: LD_INT 5
36681: PUSH
36682: LD_INT 70
36684: PUSH
36685: LD_INT 20
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: LIST
36692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36693: LD_VAR 0 6
36697: PPUSH
36698: CALL_OW 264
36702: PUSH
36703: LD_INT 10
36705: PUSH
36706: EMPTY
36707: LIST
36708: IN
36709: IFFALSE 36730
// points := [ 35 , 110 , 70 ] ;
36711: LD_ADDR_VAR 0 9
36715: PUSH
36716: LD_INT 35
36718: PUSH
36719: LD_INT 110
36721: PUSH
36722: LD_INT 70
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: LIST
36729: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36730: LD_VAR 0 6
36734: PPUSH
36735: CALL_OW 265
36739: PUSH
36740: LD_INT 25
36742: EQUAL
36743: IFFALSE 36764
// points := [ 80 , 65 , 100 ] ;
36745: LD_ADDR_VAR 0 9
36749: PUSH
36750: LD_INT 80
36752: PUSH
36753: LD_INT 65
36755: PUSH
36756: LD_INT 100
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36764: LD_VAR 0 6
36768: PPUSH
36769: CALL_OW 263
36773: PUSH
36774: LD_INT 1
36776: EQUAL
36777: IFFALSE 36812
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36779: LD_ADDR_VAR 0 10
36783: PUSH
36784: LD_VAR 0 10
36788: PUSH
36789: LD_VAR 0 6
36793: PPUSH
36794: CALL_OW 311
36798: PPUSH
36799: LD_INT 3
36801: PPUSH
36802: CALL_OW 259
36806: PUSH
36807: LD_INT 4
36809: MUL
36810: MUL
36811: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36812: LD_VAR 0 6
36816: PPUSH
36817: CALL_OW 263
36821: PUSH
36822: LD_INT 2
36824: EQUAL
36825: IFFALSE 36876
// begin j := IsControledBy ( i ) ;
36827: LD_ADDR_VAR 0 7
36831: PUSH
36832: LD_VAR 0 6
36836: PPUSH
36837: CALL_OW 312
36841: ST_TO_ADDR
// if j then
36842: LD_VAR 0 7
36846: IFFALSE 36876
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36848: LD_ADDR_VAR 0 10
36852: PUSH
36853: LD_VAR 0 10
36857: PUSH
36858: LD_VAR 0 7
36862: PPUSH
36863: LD_INT 3
36865: PPUSH
36866: CALL_OW 259
36870: PUSH
36871: LD_INT 3
36873: MUL
36874: MUL
36875: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36876: LD_VAR 0 6
36880: PPUSH
36881: CALL_OW 264
36885: PUSH
36886: LD_INT 5
36888: PUSH
36889: LD_INT 6
36891: PUSH
36892: LD_INT 46
36894: PUSH
36895: LD_INT 44
36897: PUSH
36898: LD_INT 47
36900: PUSH
36901: LD_INT 45
36903: PUSH
36904: LD_INT 28
36906: PUSH
36907: LD_INT 7
36909: PUSH
36910: LD_INT 27
36912: PUSH
36913: LD_INT 29
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: IN
36928: PUSH
36929: LD_VAR 0 1
36933: PPUSH
36934: LD_INT 52
36936: PPUSH
36937: CALL_OW 321
36941: PUSH
36942: LD_INT 2
36944: EQUAL
36945: AND
36946: IFFALSE 36963
// bpoints := bpoints * 1.2 ;
36948: LD_ADDR_VAR 0 10
36952: PUSH
36953: LD_VAR 0 10
36957: PUSH
36958: LD_REAL  1.20000000000000E+0000
36961: MUL
36962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36963: LD_VAR 0 6
36967: PPUSH
36968: CALL_OW 264
36972: PUSH
36973: LD_INT 6
36975: PUSH
36976: LD_INT 46
36978: PUSH
36979: LD_INT 47
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: IN
36987: IFFALSE 37004
// bpoints := bpoints * 1.2 ;
36989: LD_ADDR_VAR 0 10
36993: PUSH
36994: LD_VAR 0 10
36998: PUSH
36999: LD_REAL  1.20000000000000E+0000
37002: MUL
37003: ST_TO_ADDR
// end ; unit_building :
37004: GO 37018
37006: LD_INT 3
37008: DOUBLE
37009: EQUAL
37010: IFTRUE 37014
37012: GO 37017
37014: POP
// ; end ;
37015: GO 37018
37017: POP
// for j = 1 to 3 do
37018: LD_ADDR_VAR 0 7
37022: PUSH
37023: DOUBLE
37024: LD_INT 1
37026: DEC
37027: ST_TO_ADDR
37028: LD_INT 3
37030: PUSH
37031: FOR_TO
37032: IFFALSE 37085
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37034: LD_ADDR_VAR 0 5
37038: PUSH
37039: LD_VAR 0 5
37043: PPUSH
37044: LD_VAR 0 7
37048: PPUSH
37049: LD_VAR 0 5
37053: PUSH
37054: LD_VAR 0 7
37058: ARRAY
37059: PUSH
37060: LD_VAR 0 9
37064: PUSH
37065: LD_VAR 0 7
37069: ARRAY
37070: PUSH
37071: LD_VAR 0 10
37075: MUL
37076: PLUS
37077: PPUSH
37078: CALL_OW 1
37082: ST_TO_ADDR
37083: GO 37031
37085: POP
37086: POP
// end ;
37087: GO 35566
37089: POP
37090: POP
// result := Replace ( result , 4 , tmp ) ;
37091: LD_ADDR_VAR 0 5
37095: PUSH
37096: LD_VAR 0 5
37100: PPUSH
37101: LD_INT 4
37103: PPUSH
37104: LD_VAR 0 8
37108: PPUSH
37109: CALL_OW 1
37113: ST_TO_ADDR
// end ;
37114: LD_VAR 0 5
37118: RET
// export function DangerAtRange ( unit , range ) ; begin
37119: LD_INT 0
37121: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37122: LD_ADDR_VAR 0 3
37126: PUSH
37127: LD_VAR 0 1
37131: PPUSH
37132: CALL_OW 255
37136: PPUSH
37137: LD_VAR 0 1
37141: PPUSH
37142: CALL_OW 250
37146: PPUSH
37147: LD_VAR 0 1
37151: PPUSH
37152: CALL_OW 251
37156: PPUSH
37157: LD_VAR 0 2
37161: PPUSH
37162: CALL 35418 0 4
37166: ST_TO_ADDR
// end ;
37167: LD_VAR 0 3
37171: RET
// export function DangerInArea ( side , area ) ; begin
37172: LD_INT 0
37174: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37175: LD_ADDR_VAR 0 3
37179: PUSH
37180: LD_VAR 0 2
37184: PPUSH
37185: LD_INT 81
37187: PUSH
37188: LD_VAR 0 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PPUSH
37197: CALL_OW 70
37201: ST_TO_ADDR
// end ;
37202: LD_VAR 0 3
37206: RET
// export function IsExtension ( b ) ; begin
37207: LD_INT 0
37209: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37210: LD_ADDR_VAR 0 2
37214: PUSH
37215: LD_VAR 0 1
37219: PUSH
37220: LD_INT 23
37222: PUSH
37223: LD_INT 20
37225: PUSH
37226: LD_INT 22
37228: PUSH
37229: LD_INT 17
37231: PUSH
37232: LD_INT 24
37234: PUSH
37235: LD_INT 21
37237: PUSH
37238: LD_INT 19
37240: PUSH
37241: LD_INT 16
37243: PUSH
37244: LD_INT 25
37246: PUSH
37247: LD_INT 18
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: IN
37262: ST_TO_ADDR
// end ;
37263: LD_VAR 0 2
37267: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37268: LD_INT 0
37270: PPUSH
37271: PPUSH
37272: PPUSH
// result := [ ] ;
37273: LD_ADDR_VAR 0 4
37277: PUSH
37278: EMPTY
37279: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37280: LD_ADDR_VAR 0 5
37284: PUSH
37285: LD_VAR 0 2
37289: PPUSH
37290: LD_INT 21
37292: PUSH
37293: LD_INT 3
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PPUSH
37300: CALL_OW 70
37304: ST_TO_ADDR
// if not tmp then
37305: LD_VAR 0 5
37309: NOT
37310: IFFALSE 37314
// exit ;
37312: GO 37378
// if checkLink then
37314: LD_VAR 0 3
37318: IFFALSE 37368
// begin for i in tmp do
37320: LD_ADDR_VAR 0 6
37324: PUSH
37325: LD_VAR 0 5
37329: PUSH
37330: FOR_IN
37331: IFFALSE 37366
// if GetBase ( i ) <> base then
37333: LD_VAR 0 6
37337: PPUSH
37338: CALL_OW 274
37342: PUSH
37343: LD_VAR 0 1
37347: NONEQUAL
37348: IFFALSE 37364
// ComLinkToBase ( base , i ) ;
37350: LD_VAR 0 1
37354: PPUSH
37355: LD_VAR 0 6
37359: PPUSH
37360: CALL_OW 169
37364: GO 37330
37366: POP
37367: POP
// end ; result := tmp ;
37368: LD_ADDR_VAR 0 4
37372: PUSH
37373: LD_VAR 0 5
37377: ST_TO_ADDR
// end ;
37378: LD_VAR 0 4
37382: RET
// export function ComComplete ( units , b ) ; var i ; begin
37383: LD_INT 0
37385: PPUSH
37386: PPUSH
// if not units then
37387: LD_VAR 0 1
37391: NOT
37392: IFFALSE 37396
// exit ;
37394: GO 37486
// for i in units do
37396: LD_ADDR_VAR 0 4
37400: PUSH
37401: LD_VAR 0 1
37405: PUSH
37406: FOR_IN
37407: IFFALSE 37484
// if BuildingStatus ( b ) = bs_build then
37409: LD_VAR 0 2
37413: PPUSH
37414: CALL_OW 461
37418: PUSH
37419: LD_INT 1
37421: EQUAL
37422: IFFALSE 37482
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37424: LD_VAR 0 4
37428: PPUSH
37429: LD_STRING h
37431: PUSH
37432: LD_VAR 0 2
37436: PPUSH
37437: CALL_OW 250
37441: PUSH
37442: LD_VAR 0 2
37446: PPUSH
37447: CALL_OW 251
37451: PUSH
37452: LD_VAR 0 2
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: PPUSH
37478: CALL_OW 446
37482: GO 37406
37484: POP
37485: POP
// end ;
37486: LD_VAR 0 3
37490: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37491: LD_INT 0
37493: PPUSH
37494: PPUSH
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37499: LD_VAR 0 1
37503: NOT
37504: PUSH
37505: LD_VAR 0 1
37509: PPUSH
37510: CALL_OW 263
37514: PUSH
37515: LD_INT 2
37517: NONEQUAL
37518: OR
37519: IFFALSE 37523
// exit ;
37521: GO 37839
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37523: LD_ADDR_VAR 0 6
37527: PUSH
37528: LD_INT 22
37530: PUSH
37531: LD_VAR 0 1
37535: PPUSH
37536: CALL_OW 255
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: LD_INT 30
37550: PUSH
37551: LD_INT 36
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 34
37560: PUSH
37561: LD_INT 31
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: LIST
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PPUSH
37577: CALL_OW 69
37581: ST_TO_ADDR
// if not tmp then
37582: LD_VAR 0 6
37586: NOT
37587: IFFALSE 37591
// exit ;
37589: GO 37839
// result := [ ] ;
37591: LD_ADDR_VAR 0 2
37595: PUSH
37596: EMPTY
37597: ST_TO_ADDR
// for i in tmp do
37598: LD_ADDR_VAR 0 3
37602: PUSH
37603: LD_VAR 0 6
37607: PUSH
37608: FOR_IN
37609: IFFALSE 37680
// begin t := UnitsInside ( i ) ;
37611: LD_ADDR_VAR 0 4
37615: PUSH
37616: LD_VAR 0 3
37620: PPUSH
37621: CALL_OW 313
37625: ST_TO_ADDR
// if t then
37626: LD_VAR 0 4
37630: IFFALSE 37678
// for j in t do
37632: LD_ADDR_VAR 0 7
37636: PUSH
37637: LD_VAR 0 4
37641: PUSH
37642: FOR_IN
37643: IFFALSE 37676
// result := Replace ( result , result + 1 , j ) ;
37645: LD_ADDR_VAR 0 2
37649: PUSH
37650: LD_VAR 0 2
37654: PPUSH
37655: LD_VAR 0 2
37659: PUSH
37660: LD_INT 1
37662: PLUS
37663: PPUSH
37664: LD_VAR 0 7
37668: PPUSH
37669: CALL_OW 1
37673: ST_TO_ADDR
37674: GO 37642
37676: POP
37677: POP
// end ;
37678: GO 37608
37680: POP
37681: POP
// if not result then
37682: LD_VAR 0 2
37686: NOT
37687: IFFALSE 37691
// exit ;
37689: GO 37839
// mech := result [ 1 ] ;
37691: LD_ADDR_VAR 0 5
37695: PUSH
37696: LD_VAR 0 2
37700: PUSH
37701: LD_INT 1
37703: ARRAY
37704: ST_TO_ADDR
// if result > 1 then
37705: LD_VAR 0 2
37709: PUSH
37710: LD_INT 1
37712: GREATER
37713: IFFALSE 37825
// begin for i = 2 to result do
37715: LD_ADDR_VAR 0 3
37719: PUSH
37720: DOUBLE
37721: LD_INT 2
37723: DEC
37724: ST_TO_ADDR
37725: LD_VAR 0 2
37729: PUSH
37730: FOR_TO
37731: IFFALSE 37823
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37733: LD_ADDR_VAR 0 4
37737: PUSH
37738: LD_VAR 0 2
37742: PUSH
37743: LD_VAR 0 3
37747: ARRAY
37748: PPUSH
37749: LD_INT 3
37751: PPUSH
37752: CALL_OW 259
37756: PUSH
37757: LD_VAR 0 2
37761: PUSH
37762: LD_VAR 0 3
37766: ARRAY
37767: PPUSH
37768: CALL_OW 432
37772: MINUS
37773: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37774: LD_VAR 0 4
37778: PUSH
37779: LD_VAR 0 5
37783: PPUSH
37784: LD_INT 3
37786: PPUSH
37787: CALL_OW 259
37791: PUSH
37792: LD_VAR 0 5
37796: PPUSH
37797: CALL_OW 432
37801: MINUS
37802: GREATEREQUAL
37803: IFFALSE 37821
// mech := result [ i ] ;
37805: LD_ADDR_VAR 0 5
37809: PUSH
37810: LD_VAR 0 2
37814: PUSH
37815: LD_VAR 0 3
37819: ARRAY
37820: ST_TO_ADDR
// end ;
37821: GO 37730
37823: POP
37824: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37825: LD_VAR 0 1
37829: PPUSH
37830: LD_VAR 0 5
37834: PPUSH
37835: CALL_OW 135
// end ;
37839: LD_VAR 0 2
37843: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37844: LD_INT 0
37846: PPUSH
37847: PPUSH
37848: PPUSH
37849: PPUSH
37850: PPUSH
37851: PPUSH
37852: PPUSH
37853: PPUSH
37854: PPUSH
37855: PPUSH
37856: PPUSH
37857: PPUSH
37858: PPUSH
// result := [ ] ;
37859: LD_ADDR_VAR 0 7
37863: PUSH
37864: EMPTY
37865: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37866: LD_VAR 0 1
37870: PPUSH
37871: CALL_OW 266
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: IN
37886: NOT
37887: IFFALSE 37891
// exit ;
37889: GO 39525
// if name then
37891: LD_VAR 0 3
37895: IFFALSE 37911
// SetBName ( base_dep , name ) ;
37897: LD_VAR 0 1
37901: PPUSH
37902: LD_VAR 0 3
37906: PPUSH
37907: CALL_OW 500
// base := GetBase ( base_dep ) ;
37911: LD_ADDR_VAR 0 15
37915: PUSH
37916: LD_VAR 0 1
37920: PPUSH
37921: CALL_OW 274
37925: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37926: LD_ADDR_VAR 0 16
37930: PUSH
37931: LD_VAR 0 1
37935: PPUSH
37936: CALL_OW 255
37940: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37941: LD_ADDR_VAR 0 17
37945: PUSH
37946: LD_VAR 0 1
37950: PPUSH
37951: CALL_OW 248
37955: ST_TO_ADDR
// if sources then
37956: LD_VAR 0 5
37960: IFFALSE 38007
// for i = 1 to 3 do
37962: LD_ADDR_VAR 0 8
37966: PUSH
37967: DOUBLE
37968: LD_INT 1
37970: DEC
37971: ST_TO_ADDR
37972: LD_INT 3
37974: PUSH
37975: FOR_TO
37976: IFFALSE 38005
// AddResourceType ( base , i , sources [ i ] ) ;
37978: LD_VAR 0 15
37982: PPUSH
37983: LD_VAR 0 8
37987: PPUSH
37988: LD_VAR 0 5
37992: PUSH
37993: LD_VAR 0 8
37997: ARRAY
37998: PPUSH
37999: CALL_OW 276
38003: GO 37975
38005: POP
38006: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38007: LD_ADDR_VAR 0 18
38011: PUSH
38012: LD_VAR 0 15
38016: PPUSH
38017: LD_VAR 0 2
38021: PPUSH
38022: LD_INT 1
38024: PPUSH
38025: CALL 37268 0 3
38029: ST_TO_ADDR
// InitHc ;
38030: CALL_OW 19
// InitUc ;
38034: CALL_OW 18
// uc_side := side ;
38038: LD_ADDR_OWVAR 20
38042: PUSH
38043: LD_VAR 0 16
38047: ST_TO_ADDR
// uc_nation := nation ;
38048: LD_ADDR_OWVAR 21
38052: PUSH
38053: LD_VAR 0 17
38057: ST_TO_ADDR
// if buildings then
38058: LD_VAR 0 18
38062: IFFALSE 39384
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38064: LD_ADDR_VAR 0 19
38068: PUSH
38069: LD_VAR 0 18
38073: PPUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 30
38079: PUSH
38080: LD_INT 29
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 30
38089: PUSH
38090: LD_INT 30
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: LIST
38101: PPUSH
38102: CALL_OW 72
38106: ST_TO_ADDR
// if tmp then
38107: LD_VAR 0 19
38111: IFFALSE 38159
// for i in tmp do
38113: LD_ADDR_VAR 0 8
38117: PUSH
38118: LD_VAR 0 19
38122: PUSH
38123: FOR_IN
38124: IFFALSE 38157
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38126: LD_VAR 0 8
38130: PPUSH
38131: CALL_OW 250
38135: PPUSH
38136: LD_VAR 0 8
38140: PPUSH
38141: CALL_OW 251
38145: PPUSH
38146: LD_VAR 0 16
38150: PPUSH
38151: CALL_OW 441
38155: GO 38123
38157: POP
38158: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38159: LD_VAR 0 18
38163: PPUSH
38164: LD_INT 2
38166: PUSH
38167: LD_INT 30
38169: PUSH
38170: LD_INT 32
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 30
38179: PUSH
38180: LD_INT 33
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: LIST
38191: PPUSH
38192: CALL_OW 72
38196: IFFALSE 38284
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38198: LD_ADDR_VAR 0 8
38202: PUSH
38203: LD_VAR 0 18
38207: PPUSH
38208: LD_INT 2
38210: PUSH
38211: LD_INT 30
38213: PUSH
38214: LD_INT 32
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 30
38223: PUSH
38224: LD_INT 33
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: PPUSH
38236: CALL_OW 72
38240: PUSH
38241: FOR_IN
38242: IFFALSE 38282
// begin if not GetBWeapon ( i ) then
38244: LD_VAR 0 8
38248: PPUSH
38249: CALL_OW 269
38253: NOT
38254: IFFALSE 38280
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38256: LD_VAR 0 8
38260: PPUSH
38261: LD_VAR 0 8
38265: PPUSH
38266: LD_VAR 0 2
38270: PPUSH
38271: CALL 39530 0 2
38275: PPUSH
38276: CALL_OW 431
// end ;
38280: GO 38241
38282: POP
38283: POP
// end ; for i = 1 to personel do
38284: LD_ADDR_VAR 0 8
38288: PUSH
38289: DOUBLE
38290: LD_INT 1
38292: DEC
38293: ST_TO_ADDR
38294: LD_VAR 0 6
38298: PUSH
38299: FOR_TO
38300: IFFALSE 39364
// begin if i > 4 then
38302: LD_VAR 0 8
38306: PUSH
38307: LD_INT 4
38309: GREATER
38310: IFFALSE 38314
// break ;
38312: GO 39364
// case i of 1 :
38314: LD_VAR 0 8
38318: PUSH
38319: LD_INT 1
38321: DOUBLE
38322: EQUAL
38323: IFTRUE 38327
38325: GO 38407
38327: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38328: LD_ADDR_VAR 0 12
38332: PUSH
38333: LD_VAR 0 18
38337: PPUSH
38338: LD_INT 22
38340: PUSH
38341: LD_VAR 0 16
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 58
38352: PUSH
38353: EMPTY
38354: LIST
38355: PUSH
38356: LD_INT 2
38358: PUSH
38359: LD_INT 30
38361: PUSH
38362: LD_INT 32
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 30
38371: PUSH
38372: LD_INT 4
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 30
38381: PUSH
38382: LD_INT 5
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: PPUSH
38400: CALL_OW 72
38404: ST_TO_ADDR
38405: GO 38629
38407: LD_INT 2
38409: DOUBLE
38410: EQUAL
38411: IFTRUE 38415
38413: GO 38477
38415: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38416: LD_ADDR_VAR 0 12
38420: PUSH
38421: LD_VAR 0 18
38425: PPUSH
38426: LD_INT 22
38428: PUSH
38429: LD_VAR 0 16
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: LD_INT 30
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 30
38453: PUSH
38454: LD_INT 1
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: LIST
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PPUSH
38470: CALL_OW 72
38474: ST_TO_ADDR
38475: GO 38629
38477: LD_INT 3
38479: DOUBLE
38480: EQUAL
38481: IFTRUE 38485
38483: GO 38547
38485: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38486: LD_ADDR_VAR 0 12
38490: PUSH
38491: LD_VAR 0 18
38495: PPUSH
38496: LD_INT 22
38498: PUSH
38499: LD_VAR 0 16
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 2
38510: PUSH
38511: LD_INT 30
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 30
38523: PUSH
38524: LD_INT 3
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: LIST
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PPUSH
38540: CALL_OW 72
38544: ST_TO_ADDR
38545: GO 38629
38547: LD_INT 4
38549: DOUBLE
38550: EQUAL
38551: IFTRUE 38555
38553: GO 38628
38555: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38556: LD_ADDR_VAR 0 12
38560: PUSH
38561: LD_VAR 0 18
38565: PPUSH
38566: LD_INT 22
38568: PUSH
38569: LD_VAR 0 16
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 2
38580: PUSH
38581: LD_INT 30
38583: PUSH
38584: LD_INT 6
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 30
38593: PUSH
38594: LD_INT 7
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 30
38603: PUSH
38604: LD_INT 8
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PPUSH
38621: CALL_OW 72
38625: ST_TO_ADDR
38626: GO 38629
38628: POP
// if i = 1 then
38629: LD_VAR 0 8
38633: PUSH
38634: LD_INT 1
38636: EQUAL
38637: IFFALSE 38748
// begin tmp := [ ] ;
38639: LD_ADDR_VAR 0 19
38643: PUSH
38644: EMPTY
38645: ST_TO_ADDR
// for j in f do
38646: LD_ADDR_VAR 0 9
38650: PUSH
38651: LD_VAR 0 12
38655: PUSH
38656: FOR_IN
38657: IFFALSE 38730
// if GetBType ( j ) = b_bunker then
38659: LD_VAR 0 9
38663: PPUSH
38664: CALL_OW 266
38668: PUSH
38669: LD_INT 32
38671: EQUAL
38672: IFFALSE 38699
// tmp := Insert ( tmp , 1 , j ) else
38674: LD_ADDR_VAR 0 19
38678: PUSH
38679: LD_VAR 0 19
38683: PPUSH
38684: LD_INT 1
38686: PPUSH
38687: LD_VAR 0 9
38691: PPUSH
38692: CALL_OW 2
38696: ST_TO_ADDR
38697: GO 38728
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38699: LD_ADDR_VAR 0 19
38703: PUSH
38704: LD_VAR 0 19
38708: PPUSH
38709: LD_VAR 0 19
38713: PUSH
38714: LD_INT 1
38716: PLUS
38717: PPUSH
38718: LD_VAR 0 9
38722: PPUSH
38723: CALL_OW 2
38727: ST_TO_ADDR
38728: GO 38656
38730: POP
38731: POP
// if tmp then
38732: LD_VAR 0 19
38736: IFFALSE 38748
// f := tmp ;
38738: LD_ADDR_VAR 0 12
38742: PUSH
38743: LD_VAR 0 19
38747: ST_TO_ADDR
// end ; x := personel [ i ] ;
38748: LD_ADDR_VAR 0 13
38752: PUSH
38753: LD_VAR 0 6
38757: PUSH
38758: LD_VAR 0 8
38762: ARRAY
38763: ST_TO_ADDR
// if x = - 1 then
38764: LD_VAR 0 13
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: EQUAL
38773: IFFALSE 38982
// begin for j in f do
38775: LD_ADDR_VAR 0 9
38779: PUSH
38780: LD_VAR 0 12
38784: PUSH
38785: FOR_IN
38786: IFFALSE 38978
// repeat InitHc ;
38788: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38792: LD_VAR 0 9
38796: PPUSH
38797: CALL_OW 266
38801: PUSH
38802: LD_INT 5
38804: EQUAL
38805: IFFALSE 38875
// begin if UnitsInside ( j ) < 3 then
38807: LD_VAR 0 9
38811: PPUSH
38812: CALL_OW 313
38816: PUSH
38817: LD_INT 3
38819: LESS
38820: IFFALSE 38856
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38822: LD_INT 0
38824: PPUSH
38825: LD_INT 5
38827: PUSH
38828: LD_INT 8
38830: PUSH
38831: LD_INT 9
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: PUSH
38839: LD_VAR 0 17
38843: ARRAY
38844: PPUSH
38845: LD_VAR 0 4
38849: PPUSH
38850: CALL_OW 380
38854: GO 38873
// PrepareHuman ( false , i , skill ) ;
38856: LD_INT 0
38858: PPUSH
38859: LD_VAR 0 8
38863: PPUSH
38864: LD_VAR 0 4
38868: PPUSH
38869: CALL_OW 380
// end else
38873: GO 38892
// PrepareHuman ( false , i , skill ) ;
38875: LD_INT 0
38877: PPUSH
38878: LD_VAR 0 8
38882: PPUSH
38883: LD_VAR 0 4
38887: PPUSH
38888: CALL_OW 380
// un := CreateHuman ;
38892: LD_ADDR_VAR 0 14
38896: PUSH
38897: CALL_OW 44
38901: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38902: LD_ADDR_VAR 0 7
38906: PUSH
38907: LD_VAR 0 7
38911: PPUSH
38912: LD_INT 1
38914: PPUSH
38915: LD_VAR 0 14
38919: PPUSH
38920: CALL_OW 2
38924: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38925: LD_VAR 0 14
38929: PPUSH
38930: LD_VAR 0 9
38934: PPUSH
38935: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38939: LD_VAR 0 9
38943: PPUSH
38944: CALL_OW 313
38948: PUSH
38949: LD_INT 6
38951: EQUAL
38952: PUSH
38953: LD_VAR 0 9
38957: PPUSH
38958: CALL_OW 266
38962: PUSH
38963: LD_INT 32
38965: PUSH
38966: LD_INT 31
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: IN
38973: OR
38974: IFFALSE 38788
38976: GO 38785
38978: POP
38979: POP
// end else
38980: GO 39362
// for j = 1 to x do
38982: LD_ADDR_VAR 0 9
38986: PUSH
38987: DOUBLE
38988: LD_INT 1
38990: DEC
38991: ST_TO_ADDR
38992: LD_VAR 0 13
38996: PUSH
38997: FOR_TO
38998: IFFALSE 39360
// begin InitHc ;
39000: CALL_OW 19
// if not f then
39004: LD_VAR 0 12
39008: NOT
39009: IFFALSE 39098
// begin PrepareHuman ( false , i , skill ) ;
39011: LD_INT 0
39013: PPUSH
39014: LD_VAR 0 8
39018: PPUSH
39019: LD_VAR 0 4
39023: PPUSH
39024: CALL_OW 380
// un := CreateHuman ;
39028: LD_ADDR_VAR 0 14
39032: PUSH
39033: CALL_OW 44
39037: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39038: LD_ADDR_VAR 0 7
39042: PUSH
39043: LD_VAR 0 7
39047: PPUSH
39048: LD_INT 1
39050: PPUSH
39051: LD_VAR 0 14
39055: PPUSH
39056: CALL_OW 2
39060: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39061: LD_VAR 0 14
39065: PPUSH
39066: LD_VAR 0 1
39070: PPUSH
39071: CALL_OW 250
39075: PPUSH
39076: LD_VAR 0 1
39080: PPUSH
39081: CALL_OW 251
39085: PPUSH
39086: LD_INT 10
39088: PPUSH
39089: LD_INT 0
39091: PPUSH
39092: CALL_OW 50
// continue ;
39096: GO 38997
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39098: LD_VAR 0 12
39102: PUSH
39103: LD_INT 1
39105: ARRAY
39106: PPUSH
39107: CALL_OW 313
39111: PUSH
39112: LD_VAR 0 12
39116: PUSH
39117: LD_INT 1
39119: ARRAY
39120: PPUSH
39121: CALL_OW 266
39125: PUSH
39126: LD_INT 32
39128: PUSH
39129: LD_INT 31
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: IN
39136: AND
39137: PUSH
39138: LD_VAR 0 12
39142: PUSH
39143: LD_INT 1
39145: ARRAY
39146: PPUSH
39147: CALL_OW 313
39151: PUSH
39152: LD_INT 6
39154: EQUAL
39155: OR
39156: IFFALSE 39176
// f := Delete ( f , 1 ) ;
39158: LD_ADDR_VAR 0 12
39162: PUSH
39163: LD_VAR 0 12
39167: PPUSH
39168: LD_INT 1
39170: PPUSH
39171: CALL_OW 3
39175: ST_TO_ADDR
// if not f then
39176: LD_VAR 0 12
39180: NOT
39181: IFFALSE 39199
// begin x := x + 2 ;
39183: LD_ADDR_VAR 0 13
39187: PUSH
39188: LD_VAR 0 13
39192: PUSH
39193: LD_INT 2
39195: PLUS
39196: ST_TO_ADDR
// continue ;
39197: GO 38997
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39199: LD_VAR 0 12
39203: PUSH
39204: LD_INT 1
39206: ARRAY
39207: PPUSH
39208: CALL_OW 266
39212: PUSH
39213: LD_INT 5
39215: EQUAL
39216: IFFALSE 39290
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39218: LD_VAR 0 12
39222: PUSH
39223: LD_INT 1
39225: ARRAY
39226: PPUSH
39227: CALL_OW 313
39231: PUSH
39232: LD_INT 3
39234: LESS
39235: IFFALSE 39271
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39237: LD_INT 0
39239: PPUSH
39240: LD_INT 5
39242: PUSH
39243: LD_INT 8
39245: PUSH
39246: LD_INT 9
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: LIST
39253: PUSH
39254: LD_VAR 0 17
39258: ARRAY
39259: PPUSH
39260: LD_VAR 0 4
39264: PPUSH
39265: CALL_OW 380
39269: GO 39288
// PrepareHuman ( false , i , skill ) ;
39271: LD_INT 0
39273: PPUSH
39274: LD_VAR 0 8
39278: PPUSH
39279: LD_VAR 0 4
39283: PPUSH
39284: CALL_OW 380
// end else
39288: GO 39307
// PrepareHuman ( false , i , skill ) ;
39290: LD_INT 0
39292: PPUSH
39293: LD_VAR 0 8
39297: PPUSH
39298: LD_VAR 0 4
39302: PPUSH
39303: CALL_OW 380
// un := CreateHuman ;
39307: LD_ADDR_VAR 0 14
39311: PUSH
39312: CALL_OW 44
39316: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39317: LD_ADDR_VAR 0 7
39321: PUSH
39322: LD_VAR 0 7
39326: PPUSH
39327: LD_INT 1
39329: PPUSH
39330: LD_VAR 0 14
39334: PPUSH
39335: CALL_OW 2
39339: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39340: LD_VAR 0 14
39344: PPUSH
39345: LD_VAR 0 12
39349: PUSH
39350: LD_INT 1
39352: ARRAY
39353: PPUSH
39354: CALL_OW 52
// end ;
39358: GO 38997
39360: POP
39361: POP
// end ;
39362: GO 38299
39364: POP
39365: POP
// result := result ^ buildings ;
39366: LD_ADDR_VAR 0 7
39370: PUSH
39371: LD_VAR 0 7
39375: PUSH
39376: LD_VAR 0 18
39380: ADD
39381: ST_TO_ADDR
// end else
39382: GO 39525
// begin for i = 1 to personel do
39384: LD_ADDR_VAR 0 8
39388: PUSH
39389: DOUBLE
39390: LD_INT 1
39392: DEC
39393: ST_TO_ADDR
39394: LD_VAR 0 6
39398: PUSH
39399: FOR_TO
39400: IFFALSE 39523
// begin if i > 4 then
39402: LD_VAR 0 8
39406: PUSH
39407: LD_INT 4
39409: GREATER
39410: IFFALSE 39414
// break ;
39412: GO 39523
// x := personel [ i ] ;
39414: LD_ADDR_VAR 0 13
39418: PUSH
39419: LD_VAR 0 6
39423: PUSH
39424: LD_VAR 0 8
39428: ARRAY
39429: ST_TO_ADDR
// if x = - 1 then
39430: LD_VAR 0 13
39434: PUSH
39435: LD_INT 1
39437: NEG
39438: EQUAL
39439: IFFALSE 39443
// continue ;
39441: GO 39399
// PrepareHuman ( false , i , skill ) ;
39443: LD_INT 0
39445: PPUSH
39446: LD_VAR 0 8
39450: PPUSH
39451: LD_VAR 0 4
39455: PPUSH
39456: CALL_OW 380
// un := CreateHuman ;
39460: LD_ADDR_VAR 0 14
39464: PUSH
39465: CALL_OW 44
39469: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39470: LD_VAR 0 14
39474: PPUSH
39475: LD_VAR 0 1
39479: PPUSH
39480: CALL_OW 250
39484: PPUSH
39485: LD_VAR 0 1
39489: PPUSH
39490: CALL_OW 251
39494: PPUSH
39495: LD_INT 10
39497: PPUSH
39498: LD_INT 0
39500: PPUSH
39501: CALL_OW 50
// result := result ^ un ;
39505: LD_ADDR_VAR 0 7
39509: PUSH
39510: LD_VAR 0 7
39514: PUSH
39515: LD_VAR 0 14
39519: ADD
39520: ST_TO_ADDR
// end ;
39521: GO 39399
39523: POP
39524: POP
// end ; end ;
39525: LD_VAR 0 7
39529: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39530: LD_INT 0
39532: PPUSH
39533: PPUSH
39534: PPUSH
39535: PPUSH
39536: PPUSH
39537: PPUSH
39538: PPUSH
39539: PPUSH
39540: PPUSH
39541: PPUSH
39542: PPUSH
39543: PPUSH
39544: PPUSH
39545: PPUSH
39546: PPUSH
39547: PPUSH
// result := false ;
39548: LD_ADDR_VAR 0 3
39552: PUSH
39553: LD_INT 0
39555: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39556: LD_VAR 0 1
39560: NOT
39561: PUSH
39562: LD_VAR 0 1
39566: PPUSH
39567: CALL_OW 266
39571: PUSH
39572: LD_INT 32
39574: PUSH
39575: LD_INT 33
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: IN
39582: NOT
39583: OR
39584: IFFALSE 39588
// exit ;
39586: GO 40697
// nat := GetNation ( tower ) ;
39588: LD_ADDR_VAR 0 12
39592: PUSH
39593: LD_VAR 0 1
39597: PPUSH
39598: CALL_OW 248
39602: ST_TO_ADDR
// side := GetSide ( tower ) ;
39603: LD_ADDR_VAR 0 16
39607: PUSH
39608: LD_VAR 0 1
39612: PPUSH
39613: CALL_OW 255
39617: ST_TO_ADDR
// x := GetX ( tower ) ;
39618: LD_ADDR_VAR 0 10
39622: PUSH
39623: LD_VAR 0 1
39627: PPUSH
39628: CALL_OW 250
39632: ST_TO_ADDR
// y := GetY ( tower ) ;
39633: LD_ADDR_VAR 0 11
39637: PUSH
39638: LD_VAR 0 1
39642: PPUSH
39643: CALL_OW 251
39647: ST_TO_ADDR
// if not x or not y then
39648: LD_VAR 0 10
39652: NOT
39653: PUSH
39654: LD_VAR 0 11
39658: NOT
39659: OR
39660: IFFALSE 39664
// exit ;
39662: GO 40697
// weapon := 0 ;
39664: LD_ADDR_VAR 0 18
39668: PUSH
39669: LD_INT 0
39671: ST_TO_ADDR
// fac_list := [ ] ;
39672: LD_ADDR_VAR 0 17
39676: PUSH
39677: EMPTY
39678: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39679: LD_ADDR_VAR 0 6
39683: PUSH
39684: LD_VAR 0 1
39688: PPUSH
39689: CALL_OW 274
39693: PPUSH
39694: LD_VAR 0 2
39698: PPUSH
39699: LD_INT 0
39701: PPUSH
39702: CALL 37268 0 3
39706: PPUSH
39707: LD_INT 30
39709: PUSH
39710: LD_INT 3
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PPUSH
39717: CALL_OW 72
39721: ST_TO_ADDR
// if not factories then
39722: LD_VAR 0 6
39726: NOT
39727: IFFALSE 39731
// exit ;
39729: GO 40697
// for i in factories do
39731: LD_ADDR_VAR 0 8
39735: PUSH
39736: LD_VAR 0 6
39740: PUSH
39741: FOR_IN
39742: IFFALSE 39767
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39744: LD_ADDR_VAR 0 17
39748: PUSH
39749: LD_VAR 0 17
39753: PUSH
39754: LD_VAR 0 8
39758: PPUSH
39759: CALL_OW 478
39763: UNION
39764: ST_TO_ADDR
39765: GO 39741
39767: POP
39768: POP
// if not fac_list then
39769: LD_VAR 0 17
39773: NOT
39774: IFFALSE 39778
// exit ;
39776: GO 40697
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39778: LD_ADDR_VAR 0 5
39782: PUSH
39783: LD_INT 4
39785: PUSH
39786: LD_INT 5
39788: PUSH
39789: LD_INT 9
39791: PUSH
39792: LD_INT 10
39794: PUSH
39795: LD_INT 6
39797: PUSH
39798: LD_INT 7
39800: PUSH
39801: LD_INT 11
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 27
39815: PUSH
39816: LD_INT 28
39818: PUSH
39819: LD_INT 26
39821: PUSH
39822: LD_INT 30
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 43
39833: PUSH
39834: LD_INT 44
39836: PUSH
39837: LD_INT 46
39839: PUSH
39840: LD_INT 45
39842: PUSH
39843: LD_INT 47
39845: PUSH
39846: LD_INT 49
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: PUSH
39862: LD_VAR 0 12
39866: ARRAY
39867: ST_TO_ADDR
// list := list isect fac_list ;
39868: LD_ADDR_VAR 0 5
39872: PUSH
39873: LD_VAR 0 5
39877: PUSH
39878: LD_VAR 0 17
39882: ISECT
39883: ST_TO_ADDR
// if not list then
39884: LD_VAR 0 5
39888: NOT
39889: IFFALSE 39893
// exit ;
39891: GO 40697
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39893: LD_VAR 0 12
39897: PUSH
39898: LD_INT 3
39900: EQUAL
39901: PUSH
39902: LD_INT 49
39904: PUSH
39905: LD_VAR 0 5
39909: IN
39910: AND
39911: PUSH
39912: LD_INT 31
39914: PPUSH
39915: LD_VAR 0 16
39919: PPUSH
39920: CALL_OW 321
39924: PUSH
39925: LD_INT 2
39927: EQUAL
39928: AND
39929: IFFALSE 39989
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39931: LD_INT 22
39933: PUSH
39934: LD_VAR 0 16
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 35
39945: PUSH
39946: LD_INT 49
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 91
39955: PUSH
39956: LD_VAR 0 1
39960: PUSH
39961: LD_INT 10
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: LIST
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: LIST
39973: PPUSH
39974: CALL_OW 69
39978: NOT
39979: IFFALSE 39989
// weapon := ru_time_lapser ;
39981: LD_ADDR_VAR 0 18
39985: PUSH
39986: LD_INT 49
39988: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39989: LD_VAR 0 12
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: IN
40004: PUSH
40005: LD_INT 11
40007: PUSH
40008: LD_VAR 0 5
40012: IN
40013: PUSH
40014: LD_INT 30
40016: PUSH
40017: LD_VAR 0 5
40021: IN
40022: OR
40023: AND
40024: PUSH
40025: LD_INT 6
40027: PPUSH
40028: LD_VAR 0 16
40032: PPUSH
40033: CALL_OW 321
40037: PUSH
40038: LD_INT 2
40040: EQUAL
40041: AND
40042: IFFALSE 40207
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40044: LD_INT 22
40046: PUSH
40047: LD_VAR 0 16
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 2
40058: PUSH
40059: LD_INT 35
40061: PUSH
40062: LD_INT 11
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 35
40071: PUSH
40072: LD_INT 30
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 91
40086: PUSH
40087: LD_VAR 0 1
40091: PUSH
40092: LD_INT 18
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: LIST
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: LIST
40104: PPUSH
40105: CALL_OW 69
40109: NOT
40110: PUSH
40111: LD_INT 22
40113: PUSH
40114: LD_VAR 0 16
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: LD_INT 30
40128: PUSH
40129: LD_INT 32
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 30
40138: PUSH
40139: LD_INT 33
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 91
40153: PUSH
40154: LD_VAR 0 1
40158: PUSH
40159: LD_INT 12
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: LIST
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: PUSH
40172: EMPTY
40173: LIST
40174: PPUSH
40175: CALL_OW 69
40179: PUSH
40180: LD_INT 2
40182: GREATER
40183: AND
40184: IFFALSE 40207
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40186: LD_ADDR_VAR 0 18
40190: PUSH
40191: LD_INT 11
40193: PUSH
40194: LD_INT 30
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_VAR 0 12
40205: ARRAY
40206: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40207: LD_VAR 0 18
40211: NOT
40212: PUSH
40213: LD_INT 40
40215: PPUSH
40216: LD_VAR 0 16
40220: PPUSH
40221: CALL_OW 321
40225: PUSH
40226: LD_INT 2
40228: EQUAL
40229: AND
40230: PUSH
40231: LD_INT 7
40233: PUSH
40234: LD_VAR 0 5
40238: IN
40239: PUSH
40240: LD_INT 28
40242: PUSH
40243: LD_VAR 0 5
40247: IN
40248: OR
40249: PUSH
40250: LD_INT 45
40252: PUSH
40253: LD_VAR 0 5
40257: IN
40258: OR
40259: AND
40260: IFFALSE 40514
// begin hex := GetHexInfo ( x , y ) ;
40262: LD_ADDR_VAR 0 4
40266: PUSH
40267: LD_VAR 0 10
40271: PPUSH
40272: LD_VAR 0 11
40276: PPUSH
40277: CALL_OW 546
40281: ST_TO_ADDR
// if hex [ 1 ] then
40282: LD_VAR 0 4
40286: PUSH
40287: LD_INT 1
40289: ARRAY
40290: IFFALSE 40294
// exit ;
40292: GO 40697
// height := hex [ 2 ] ;
40294: LD_ADDR_VAR 0 15
40298: PUSH
40299: LD_VAR 0 4
40303: PUSH
40304: LD_INT 2
40306: ARRAY
40307: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40308: LD_ADDR_VAR 0 14
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: LD_INT 3
40321: PUSH
40322: LD_INT 5
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: ST_TO_ADDR
// for i in tmp do
40331: LD_ADDR_VAR 0 8
40335: PUSH
40336: LD_VAR 0 14
40340: PUSH
40341: FOR_IN
40342: IFFALSE 40512
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40344: LD_ADDR_VAR 0 9
40348: PUSH
40349: LD_VAR 0 10
40353: PPUSH
40354: LD_VAR 0 8
40358: PPUSH
40359: LD_INT 5
40361: PPUSH
40362: CALL_OW 272
40366: PUSH
40367: LD_VAR 0 11
40371: PPUSH
40372: LD_VAR 0 8
40376: PPUSH
40377: LD_INT 5
40379: PPUSH
40380: CALL_OW 273
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40389: LD_VAR 0 9
40393: PUSH
40394: LD_INT 1
40396: ARRAY
40397: PPUSH
40398: LD_VAR 0 9
40402: PUSH
40403: LD_INT 2
40405: ARRAY
40406: PPUSH
40407: CALL_OW 488
40411: IFFALSE 40510
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40413: LD_ADDR_VAR 0 4
40417: PUSH
40418: LD_VAR 0 9
40422: PUSH
40423: LD_INT 1
40425: ARRAY
40426: PPUSH
40427: LD_VAR 0 9
40431: PUSH
40432: LD_INT 2
40434: ARRAY
40435: PPUSH
40436: CALL_OW 546
40440: ST_TO_ADDR
// if hex [ 1 ] then
40441: LD_VAR 0 4
40445: PUSH
40446: LD_INT 1
40448: ARRAY
40449: IFFALSE 40453
// continue ;
40451: GO 40341
// h := hex [ 2 ] ;
40453: LD_ADDR_VAR 0 13
40457: PUSH
40458: LD_VAR 0 4
40462: PUSH
40463: LD_INT 2
40465: ARRAY
40466: ST_TO_ADDR
// if h + 7 < height then
40467: LD_VAR 0 13
40471: PUSH
40472: LD_INT 7
40474: PLUS
40475: PUSH
40476: LD_VAR 0 15
40480: LESS
40481: IFFALSE 40510
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40483: LD_ADDR_VAR 0 18
40487: PUSH
40488: LD_INT 7
40490: PUSH
40491: LD_INT 28
40493: PUSH
40494: LD_INT 45
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: LIST
40501: PUSH
40502: LD_VAR 0 12
40506: ARRAY
40507: ST_TO_ADDR
// break ;
40508: GO 40512
// end ; end ; end ;
40510: GO 40341
40512: POP
40513: POP
// end ; if not weapon then
40514: LD_VAR 0 18
40518: NOT
40519: IFFALSE 40579
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40521: LD_ADDR_VAR 0 5
40525: PUSH
40526: LD_VAR 0 5
40530: PUSH
40531: LD_INT 11
40533: PUSH
40534: LD_INT 30
40536: PUSH
40537: LD_INT 49
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: LIST
40544: DIFF
40545: ST_TO_ADDR
// if not list then
40546: LD_VAR 0 5
40550: NOT
40551: IFFALSE 40555
// exit ;
40553: GO 40697
// weapon := list [ rand ( 1 , list ) ] ;
40555: LD_ADDR_VAR 0 18
40559: PUSH
40560: LD_VAR 0 5
40564: PUSH
40565: LD_INT 1
40567: PPUSH
40568: LD_VAR 0 5
40572: PPUSH
40573: CALL_OW 12
40577: ARRAY
40578: ST_TO_ADDR
// end ; if weapon then
40579: LD_VAR 0 18
40583: IFFALSE 40697
// begin tmp := CostOfWeapon ( weapon ) ;
40585: LD_ADDR_VAR 0 14
40589: PUSH
40590: LD_VAR 0 18
40594: PPUSH
40595: CALL_OW 451
40599: ST_TO_ADDR
// j := GetBase ( tower ) ;
40600: LD_ADDR_VAR 0 9
40604: PUSH
40605: LD_VAR 0 1
40609: PPUSH
40610: CALL_OW 274
40614: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40615: LD_VAR 0 9
40619: PPUSH
40620: LD_INT 1
40622: PPUSH
40623: CALL_OW 275
40627: PUSH
40628: LD_VAR 0 14
40632: PUSH
40633: LD_INT 1
40635: ARRAY
40636: GREATEREQUAL
40637: PUSH
40638: LD_VAR 0 9
40642: PPUSH
40643: LD_INT 2
40645: PPUSH
40646: CALL_OW 275
40650: PUSH
40651: LD_VAR 0 14
40655: PUSH
40656: LD_INT 2
40658: ARRAY
40659: GREATEREQUAL
40660: AND
40661: PUSH
40662: LD_VAR 0 9
40666: PPUSH
40667: LD_INT 3
40669: PPUSH
40670: CALL_OW 275
40674: PUSH
40675: LD_VAR 0 14
40679: PUSH
40680: LD_INT 3
40682: ARRAY
40683: GREATEREQUAL
40684: AND
40685: IFFALSE 40697
// result := weapon ;
40687: LD_ADDR_VAR 0 3
40691: PUSH
40692: LD_VAR 0 18
40696: ST_TO_ADDR
// end ; end ;
40697: LD_VAR 0 3
40701: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40702: LD_INT 0
40704: PPUSH
40705: PPUSH
// result := true ;
40706: LD_ADDR_VAR 0 3
40710: PUSH
40711: LD_INT 1
40713: ST_TO_ADDR
// if array1 = array2 then
40714: LD_VAR 0 1
40718: PUSH
40719: LD_VAR 0 2
40723: EQUAL
40724: IFFALSE 40784
// begin for i = 1 to array1 do
40726: LD_ADDR_VAR 0 4
40730: PUSH
40731: DOUBLE
40732: LD_INT 1
40734: DEC
40735: ST_TO_ADDR
40736: LD_VAR 0 1
40740: PUSH
40741: FOR_TO
40742: IFFALSE 40780
// if array1 [ i ] <> array2 [ i ] then
40744: LD_VAR 0 1
40748: PUSH
40749: LD_VAR 0 4
40753: ARRAY
40754: PUSH
40755: LD_VAR 0 2
40759: PUSH
40760: LD_VAR 0 4
40764: ARRAY
40765: NONEQUAL
40766: IFFALSE 40778
// begin result := false ;
40768: LD_ADDR_VAR 0 3
40772: PUSH
40773: LD_INT 0
40775: ST_TO_ADDR
// break ;
40776: GO 40780
// end ;
40778: GO 40741
40780: POP
40781: POP
// end else
40782: GO 40792
// result := false ;
40784: LD_ADDR_VAR 0 3
40788: PUSH
40789: LD_INT 0
40791: ST_TO_ADDR
// end ;
40792: LD_VAR 0 3
40796: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40797: LD_INT 0
40799: PPUSH
40800: PPUSH
// if not array1 or not array2 then
40801: LD_VAR 0 1
40805: NOT
40806: PUSH
40807: LD_VAR 0 2
40811: NOT
40812: OR
40813: IFFALSE 40817
// exit ;
40815: GO 40881
// result := true ;
40817: LD_ADDR_VAR 0 3
40821: PUSH
40822: LD_INT 1
40824: ST_TO_ADDR
// for i = 1 to array1 do
40825: LD_ADDR_VAR 0 4
40829: PUSH
40830: DOUBLE
40831: LD_INT 1
40833: DEC
40834: ST_TO_ADDR
40835: LD_VAR 0 1
40839: PUSH
40840: FOR_TO
40841: IFFALSE 40879
// if array1 [ i ] <> array2 [ i ] then
40843: LD_VAR 0 1
40847: PUSH
40848: LD_VAR 0 4
40852: ARRAY
40853: PUSH
40854: LD_VAR 0 2
40858: PUSH
40859: LD_VAR 0 4
40863: ARRAY
40864: NONEQUAL
40865: IFFALSE 40877
// begin result := false ;
40867: LD_ADDR_VAR 0 3
40871: PUSH
40872: LD_INT 0
40874: ST_TO_ADDR
// break ;
40875: GO 40879
// end ;
40877: GO 40840
40879: POP
40880: POP
// end ;
40881: LD_VAR 0 3
40885: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40886: LD_INT 0
40888: PPUSH
40889: PPUSH
40890: PPUSH
// pom := GetBase ( fac ) ;
40891: LD_ADDR_VAR 0 5
40895: PUSH
40896: LD_VAR 0 1
40900: PPUSH
40901: CALL_OW 274
40905: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40906: LD_ADDR_VAR 0 4
40910: PUSH
40911: LD_VAR 0 2
40915: PUSH
40916: LD_INT 1
40918: ARRAY
40919: PPUSH
40920: LD_VAR 0 2
40924: PUSH
40925: LD_INT 2
40927: ARRAY
40928: PPUSH
40929: LD_VAR 0 2
40933: PUSH
40934: LD_INT 3
40936: ARRAY
40937: PPUSH
40938: LD_VAR 0 2
40942: PUSH
40943: LD_INT 4
40945: ARRAY
40946: PPUSH
40947: CALL_OW 449
40951: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40952: LD_ADDR_VAR 0 3
40956: PUSH
40957: LD_VAR 0 5
40961: PPUSH
40962: LD_INT 1
40964: PPUSH
40965: CALL_OW 275
40969: PUSH
40970: LD_VAR 0 4
40974: PUSH
40975: LD_INT 1
40977: ARRAY
40978: GREATEREQUAL
40979: PUSH
40980: LD_VAR 0 5
40984: PPUSH
40985: LD_INT 2
40987: PPUSH
40988: CALL_OW 275
40992: PUSH
40993: LD_VAR 0 4
40997: PUSH
40998: LD_INT 2
41000: ARRAY
41001: GREATEREQUAL
41002: AND
41003: PUSH
41004: LD_VAR 0 5
41008: PPUSH
41009: LD_INT 3
41011: PPUSH
41012: CALL_OW 275
41016: PUSH
41017: LD_VAR 0 4
41021: PUSH
41022: LD_INT 3
41024: ARRAY
41025: GREATEREQUAL
41026: AND
41027: ST_TO_ADDR
// end ;
41028: LD_VAR 0 3
41032: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41033: LD_INT 0
41035: PPUSH
41036: PPUSH
41037: PPUSH
41038: PPUSH
// pom := GetBase ( building ) ;
41039: LD_ADDR_VAR 0 3
41043: PUSH
41044: LD_VAR 0 1
41048: PPUSH
41049: CALL_OW 274
41053: ST_TO_ADDR
// if not pom then
41054: LD_VAR 0 3
41058: NOT
41059: IFFALSE 41063
// exit ;
41061: GO 41233
// btype := GetBType ( building ) ;
41063: LD_ADDR_VAR 0 5
41067: PUSH
41068: LD_VAR 0 1
41072: PPUSH
41073: CALL_OW 266
41077: ST_TO_ADDR
// if btype = b_armoury then
41078: LD_VAR 0 5
41082: PUSH
41083: LD_INT 4
41085: EQUAL
41086: IFFALSE 41096
// btype := b_barracks ;
41088: LD_ADDR_VAR 0 5
41092: PUSH
41093: LD_INT 5
41095: ST_TO_ADDR
// if btype = b_depot then
41096: LD_VAR 0 5
41100: PUSH
41101: LD_INT 0
41103: EQUAL
41104: IFFALSE 41114
// btype := b_warehouse ;
41106: LD_ADDR_VAR 0 5
41110: PUSH
41111: LD_INT 1
41113: ST_TO_ADDR
// if btype = b_workshop then
41114: LD_VAR 0 5
41118: PUSH
41119: LD_INT 2
41121: EQUAL
41122: IFFALSE 41132
// btype := b_factory ;
41124: LD_ADDR_VAR 0 5
41128: PUSH
41129: LD_INT 3
41131: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41132: LD_ADDR_VAR 0 4
41136: PUSH
41137: LD_VAR 0 5
41141: PPUSH
41142: LD_VAR 0 1
41146: PPUSH
41147: CALL_OW 248
41151: PPUSH
41152: CALL_OW 450
41156: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41157: LD_ADDR_VAR 0 2
41161: PUSH
41162: LD_VAR 0 3
41166: PPUSH
41167: LD_INT 1
41169: PPUSH
41170: CALL_OW 275
41174: PUSH
41175: LD_VAR 0 4
41179: PUSH
41180: LD_INT 1
41182: ARRAY
41183: GREATEREQUAL
41184: PUSH
41185: LD_VAR 0 3
41189: PPUSH
41190: LD_INT 2
41192: PPUSH
41193: CALL_OW 275
41197: PUSH
41198: LD_VAR 0 4
41202: PUSH
41203: LD_INT 2
41205: ARRAY
41206: GREATEREQUAL
41207: AND
41208: PUSH
41209: LD_VAR 0 3
41213: PPUSH
41214: LD_INT 3
41216: PPUSH
41217: CALL_OW 275
41221: PUSH
41222: LD_VAR 0 4
41226: PUSH
41227: LD_INT 3
41229: ARRAY
41230: GREATEREQUAL
41231: AND
41232: ST_TO_ADDR
// end ;
41233: LD_VAR 0 2
41237: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41238: LD_INT 0
41240: PPUSH
41241: PPUSH
41242: PPUSH
// pom := GetBase ( building ) ;
41243: LD_ADDR_VAR 0 4
41247: PUSH
41248: LD_VAR 0 1
41252: PPUSH
41253: CALL_OW 274
41257: ST_TO_ADDR
// if not pom then
41258: LD_VAR 0 4
41262: NOT
41263: IFFALSE 41267
// exit ;
41265: GO 41368
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41267: LD_ADDR_VAR 0 5
41271: PUSH
41272: LD_VAR 0 2
41276: PPUSH
41277: LD_VAR 0 1
41281: PPUSH
41282: CALL_OW 248
41286: PPUSH
41287: CALL_OW 450
41291: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41292: LD_ADDR_VAR 0 3
41296: PUSH
41297: LD_VAR 0 4
41301: PPUSH
41302: LD_INT 1
41304: PPUSH
41305: CALL_OW 275
41309: PUSH
41310: LD_VAR 0 5
41314: PUSH
41315: LD_INT 1
41317: ARRAY
41318: GREATEREQUAL
41319: PUSH
41320: LD_VAR 0 4
41324: PPUSH
41325: LD_INT 2
41327: PPUSH
41328: CALL_OW 275
41332: PUSH
41333: LD_VAR 0 5
41337: PUSH
41338: LD_INT 2
41340: ARRAY
41341: GREATEREQUAL
41342: AND
41343: PUSH
41344: LD_VAR 0 4
41348: PPUSH
41349: LD_INT 3
41351: PPUSH
41352: CALL_OW 275
41356: PUSH
41357: LD_VAR 0 5
41361: PUSH
41362: LD_INT 3
41364: ARRAY
41365: GREATEREQUAL
41366: AND
41367: ST_TO_ADDR
// end ;
41368: LD_VAR 0 3
41372: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41373: LD_INT 0
41375: PPUSH
41376: PPUSH
41377: PPUSH
41378: PPUSH
41379: PPUSH
41380: PPUSH
41381: PPUSH
41382: PPUSH
41383: PPUSH
41384: PPUSH
41385: PPUSH
// result := false ;
41386: LD_ADDR_VAR 0 8
41390: PUSH
41391: LD_INT 0
41393: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41394: LD_VAR 0 5
41398: NOT
41399: PUSH
41400: LD_VAR 0 1
41404: NOT
41405: OR
41406: PUSH
41407: LD_VAR 0 2
41411: NOT
41412: OR
41413: PUSH
41414: LD_VAR 0 3
41418: NOT
41419: OR
41420: IFFALSE 41424
// exit ;
41422: GO 42238
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41424: LD_ADDR_VAR 0 14
41428: PUSH
41429: LD_VAR 0 1
41433: PPUSH
41434: LD_VAR 0 2
41438: PPUSH
41439: LD_VAR 0 3
41443: PPUSH
41444: LD_VAR 0 4
41448: PPUSH
41449: LD_VAR 0 5
41453: PUSH
41454: LD_INT 1
41456: ARRAY
41457: PPUSH
41458: CALL_OW 248
41462: PPUSH
41463: LD_INT 0
41465: PPUSH
41466: CALL 43471 0 6
41470: ST_TO_ADDR
// if not hexes then
41471: LD_VAR 0 14
41475: NOT
41476: IFFALSE 41480
// exit ;
41478: GO 42238
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41480: LD_ADDR_VAR 0 17
41484: PUSH
41485: LD_VAR 0 5
41489: PPUSH
41490: LD_INT 22
41492: PUSH
41493: LD_VAR 0 13
41497: PPUSH
41498: CALL_OW 255
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: LD_INT 30
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 30
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: LIST
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PPUSH
41539: CALL_OW 72
41543: ST_TO_ADDR
// for i = 1 to hexes do
41544: LD_ADDR_VAR 0 9
41548: PUSH
41549: DOUBLE
41550: LD_INT 1
41552: DEC
41553: ST_TO_ADDR
41554: LD_VAR 0 14
41558: PUSH
41559: FOR_TO
41560: IFFALSE 42236
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41562: LD_ADDR_VAR 0 13
41566: PUSH
41567: LD_VAR 0 14
41571: PUSH
41572: LD_VAR 0 9
41576: ARRAY
41577: PUSH
41578: LD_INT 1
41580: ARRAY
41581: PPUSH
41582: LD_VAR 0 14
41586: PUSH
41587: LD_VAR 0 9
41591: ARRAY
41592: PUSH
41593: LD_INT 2
41595: ARRAY
41596: PPUSH
41597: CALL_OW 428
41601: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41602: LD_VAR 0 14
41606: PUSH
41607: LD_VAR 0 9
41611: ARRAY
41612: PUSH
41613: LD_INT 1
41615: ARRAY
41616: PPUSH
41617: LD_VAR 0 14
41621: PUSH
41622: LD_VAR 0 9
41626: ARRAY
41627: PUSH
41628: LD_INT 2
41630: ARRAY
41631: PPUSH
41632: CALL_OW 351
41636: PUSH
41637: LD_VAR 0 14
41641: PUSH
41642: LD_VAR 0 9
41646: ARRAY
41647: PUSH
41648: LD_INT 1
41650: ARRAY
41651: PPUSH
41652: LD_VAR 0 14
41656: PUSH
41657: LD_VAR 0 9
41661: ARRAY
41662: PUSH
41663: LD_INT 2
41665: ARRAY
41666: PPUSH
41667: CALL_OW 488
41671: NOT
41672: OR
41673: PUSH
41674: LD_VAR 0 13
41678: PPUSH
41679: CALL_OW 247
41683: PUSH
41684: LD_INT 3
41686: EQUAL
41687: OR
41688: IFFALSE 41694
// exit ;
41690: POP
41691: POP
41692: GO 42238
// if not tmp then
41694: LD_VAR 0 13
41698: NOT
41699: IFFALSE 41703
// continue ;
41701: GO 41559
// result := true ;
41703: LD_ADDR_VAR 0 8
41707: PUSH
41708: LD_INT 1
41710: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41711: LD_VAR 0 6
41715: PUSH
41716: LD_VAR 0 13
41720: PPUSH
41721: CALL_OW 247
41725: PUSH
41726: LD_INT 2
41728: EQUAL
41729: AND
41730: PUSH
41731: LD_VAR 0 13
41735: PPUSH
41736: CALL_OW 263
41740: PUSH
41741: LD_INT 1
41743: EQUAL
41744: AND
41745: IFFALSE 41909
// begin if IsDrivenBy ( tmp ) then
41747: LD_VAR 0 13
41751: PPUSH
41752: CALL_OW 311
41756: IFFALSE 41760
// continue ;
41758: GO 41559
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41760: LD_VAR 0 6
41764: PPUSH
41765: LD_INT 3
41767: PUSH
41768: LD_INT 60
41770: PUSH
41771: EMPTY
41772: LIST
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 3
41780: PUSH
41781: LD_INT 55
41783: PUSH
41784: EMPTY
41785: LIST
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PPUSH
41795: CALL_OW 72
41799: IFFALSE 41907
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41801: LD_ADDR_VAR 0 18
41805: PUSH
41806: LD_VAR 0 6
41810: PPUSH
41811: LD_INT 3
41813: PUSH
41814: LD_INT 60
41816: PUSH
41817: EMPTY
41818: LIST
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 3
41826: PUSH
41827: LD_INT 55
41829: PUSH
41830: EMPTY
41831: LIST
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PPUSH
41841: CALL_OW 72
41845: PUSH
41846: LD_INT 1
41848: ARRAY
41849: ST_TO_ADDR
// if IsInUnit ( driver ) then
41850: LD_VAR 0 18
41854: PPUSH
41855: CALL_OW 310
41859: IFFALSE 41870
// ComExit ( driver ) ;
41861: LD_VAR 0 18
41865: PPUSH
41866: CALL 67250 0 1
// AddComEnterUnit ( driver , tmp ) ;
41870: LD_VAR 0 18
41874: PPUSH
41875: LD_VAR 0 13
41879: PPUSH
41880: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41884: LD_VAR 0 18
41888: PPUSH
41889: LD_VAR 0 7
41893: PPUSH
41894: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41898: LD_VAR 0 18
41902: PPUSH
41903: CALL_OW 181
// end ; continue ;
41907: GO 41559
// end ; if not cleaners or not tmp in cleaners then
41909: LD_VAR 0 6
41913: NOT
41914: PUSH
41915: LD_VAR 0 13
41919: PUSH
41920: LD_VAR 0 6
41924: IN
41925: NOT
41926: OR
41927: IFFALSE 42234
// begin if dep then
41929: LD_VAR 0 17
41933: IFFALSE 42069
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41935: LD_ADDR_VAR 0 16
41939: PUSH
41940: LD_VAR 0 17
41944: PUSH
41945: LD_INT 1
41947: ARRAY
41948: PPUSH
41949: CALL_OW 250
41953: PPUSH
41954: LD_VAR 0 17
41958: PUSH
41959: LD_INT 1
41961: ARRAY
41962: PPUSH
41963: CALL_OW 254
41967: PPUSH
41968: LD_INT 5
41970: PPUSH
41971: CALL_OW 272
41975: PUSH
41976: LD_VAR 0 17
41980: PUSH
41981: LD_INT 1
41983: ARRAY
41984: PPUSH
41985: CALL_OW 251
41989: PPUSH
41990: LD_VAR 0 17
41994: PUSH
41995: LD_INT 1
41997: ARRAY
41998: PPUSH
41999: CALL_OW 254
42003: PPUSH
42004: LD_INT 5
42006: PPUSH
42007: CALL_OW 273
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42016: LD_VAR 0 16
42020: PUSH
42021: LD_INT 1
42023: ARRAY
42024: PPUSH
42025: LD_VAR 0 16
42029: PUSH
42030: LD_INT 2
42032: ARRAY
42033: PPUSH
42034: CALL_OW 488
42038: IFFALSE 42069
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42040: LD_VAR 0 13
42044: PPUSH
42045: LD_VAR 0 16
42049: PUSH
42050: LD_INT 1
42052: ARRAY
42053: PPUSH
42054: LD_VAR 0 16
42058: PUSH
42059: LD_INT 2
42061: ARRAY
42062: PPUSH
42063: CALL_OW 111
// continue ;
42067: GO 41559
// end ; end ; r := GetDir ( tmp ) ;
42069: LD_ADDR_VAR 0 15
42073: PUSH
42074: LD_VAR 0 13
42078: PPUSH
42079: CALL_OW 254
42083: ST_TO_ADDR
// if r = 5 then
42084: LD_VAR 0 15
42088: PUSH
42089: LD_INT 5
42091: EQUAL
42092: IFFALSE 42102
// r := 0 ;
42094: LD_ADDR_VAR 0 15
42098: PUSH
42099: LD_INT 0
42101: ST_TO_ADDR
// for j = r to 5 do
42102: LD_ADDR_VAR 0 10
42106: PUSH
42107: DOUBLE
42108: LD_VAR 0 15
42112: DEC
42113: ST_TO_ADDR
42114: LD_INT 5
42116: PUSH
42117: FOR_TO
42118: IFFALSE 42232
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42120: LD_ADDR_VAR 0 11
42124: PUSH
42125: LD_VAR 0 13
42129: PPUSH
42130: CALL_OW 250
42134: PPUSH
42135: LD_VAR 0 10
42139: PPUSH
42140: LD_INT 2
42142: PPUSH
42143: CALL_OW 272
42147: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42148: LD_ADDR_VAR 0 12
42152: PUSH
42153: LD_VAR 0 13
42157: PPUSH
42158: CALL_OW 251
42162: PPUSH
42163: LD_VAR 0 10
42167: PPUSH
42168: LD_INT 2
42170: PPUSH
42171: CALL_OW 273
42175: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42176: LD_VAR 0 11
42180: PPUSH
42181: LD_VAR 0 12
42185: PPUSH
42186: CALL_OW 488
42190: PUSH
42191: LD_VAR 0 11
42195: PPUSH
42196: LD_VAR 0 12
42200: PPUSH
42201: CALL_OW 428
42205: NOT
42206: AND
42207: IFFALSE 42230
// begin ComMoveXY ( tmp , _x , _y ) ;
42209: LD_VAR 0 13
42213: PPUSH
42214: LD_VAR 0 11
42218: PPUSH
42219: LD_VAR 0 12
42223: PPUSH
42224: CALL_OW 111
// break ;
42228: GO 42232
// end ; end ;
42230: GO 42117
42232: POP
42233: POP
// end ; end ;
42234: GO 41559
42236: POP
42237: POP
// end ;
42238: LD_VAR 0 8
42242: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42243: LD_INT 0
42245: PPUSH
// result := true ;
42246: LD_ADDR_VAR 0 3
42250: PUSH
42251: LD_INT 1
42253: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42254: LD_VAR 0 2
42258: PUSH
42259: LD_INT 24
42261: DOUBLE
42262: EQUAL
42263: IFTRUE 42273
42265: LD_INT 33
42267: DOUBLE
42268: EQUAL
42269: IFTRUE 42273
42271: GO 42298
42273: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42274: LD_ADDR_VAR 0 3
42278: PUSH
42279: LD_INT 32
42281: PPUSH
42282: LD_VAR 0 1
42286: PPUSH
42287: CALL_OW 321
42291: PUSH
42292: LD_INT 2
42294: EQUAL
42295: ST_TO_ADDR
42296: GO 42614
42298: LD_INT 20
42300: DOUBLE
42301: EQUAL
42302: IFTRUE 42306
42304: GO 42331
42306: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42307: LD_ADDR_VAR 0 3
42311: PUSH
42312: LD_INT 6
42314: PPUSH
42315: LD_VAR 0 1
42319: PPUSH
42320: CALL_OW 321
42324: PUSH
42325: LD_INT 2
42327: EQUAL
42328: ST_TO_ADDR
42329: GO 42614
42331: LD_INT 22
42333: DOUBLE
42334: EQUAL
42335: IFTRUE 42345
42337: LD_INT 36
42339: DOUBLE
42340: EQUAL
42341: IFTRUE 42345
42343: GO 42370
42345: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42346: LD_ADDR_VAR 0 3
42350: PUSH
42351: LD_INT 15
42353: PPUSH
42354: LD_VAR 0 1
42358: PPUSH
42359: CALL_OW 321
42363: PUSH
42364: LD_INT 2
42366: EQUAL
42367: ST_TO_ADDR
42368: GO 42614
42370: LD_INT 30
42372: DOUBLE
42373: EQUAL
42374: IFTRUE 42378
42376: GO 42403
42378: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42379: LD_ADDR_VAR 0 3
42383: PUSH
42384: LD_INT 20
42386: PPUSH
42387: LD_VAR 0 1
42391: PPUSH
42392: CALL_OW 321
42396: PUSH
42397: LD_INT 2
42399: EQUAL
42400: ST_TO_ADDR
42401: GO 42614
42403: LD_INT 28
42405: DOUBLE
42406: EQUAL
42407: IFTRUE 42417
42409: LD_INT 21
42411: DOUBLE
42412: EQUAL
42413: IFTRUE 42417
42415: GO 42442
42417: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42418: LD_ADDR_VAR 0 3
42422: PUSH
42423: LD_INT 21
42425: PPUSH
42426: LD_VAR 0 1
42430: PPUSH
42431: CALL_OW 321
42435: PUSH
42436: LD_INT 2
42438: EQUAL
42439: ST_TO_ADDR
42440: GO 42614
42442: LD_INT 16
42444: DOUBLE
42445: EQUAL
42446: IFTRUE 42450
42448: GO 42475
42450: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42451: LD_ADDR_VAR 0 3
42455: PUSH
42456: LD_INT 84
42458: PPUSH
42459: LD_VAR 0 1
42463: PPUSH
42464: CALL_OW 321
42468: PUSH
42469: LD_INT 2
42471: EQUAL
42472: ST_TO_ADDR
42473: GO 42614
42475: LD_INT 19
42477: DOUBLE
42478: EQUAL
42479: IFTRUE 42489
42481: LD_INT 23
42483: DOUBLE
42484: EQUAL
42485: IFTRUE 42489
42487: GO 42514
42489: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42490: LD_ADDR_VAR 0 3
42494: PUSH
42495: LD_INT 83
42497: PPUSH
42498: LD_VAR 0 1
42502: PPUSH
42503: CALL_OW 321
42507: PUSH
42508: LD_INT 2
42510: EQUAL
42511: ST_TO_ADDR
42512: GO 42614
42514: LD_INT 17
42516: DOUBLE
42517: EQUAL
42518: IFTRUE 42522
42520: GO 42547
42522: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42523: LD_ADDR_VAR 0 3
42527: PUSH
42528: LD_INT 39
42530: PPUSH
42531: LD_VAR 0 1
42535: PPUSH
42536: CALL_OW 321
42540: PUSH
42541: LD_INT 2
42543: EQUAL
42544: ST_TO_ADDR
42545: GO 42614
42547: LD_INT 18
42549: DOUBLE
42550: EQUAL
42551: IFTRUE 42555
42553: GO 42580
42555: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42556: LD_ADDR_VAR 0 3
42560: PUSH
42561: LD_INT 40
42563: PPUSH
42564: LD_VAR 0 1
42568: PPUSH
42569: CALL_OW 321
42573: PUSH
42574: LD_INT 2
42576: EQUAL
42577: ST_TO_ADDR
42578: GO 42614
42580: LD_INT 27
42582: DOUBLE
42583: EQUAL
42584: IFTRUE 42588
42586: GO 42613
42588: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42589: LD_ADDR_VAR 0 3
42593: PUSH
42594: LD_INT 35
42596: PPUSH
42597: LD_VAR 0 1
42601: PPUSH
42602: CALL_OW 321
42606: PUSH
42607: LD_INT 2
42609: EQUAL
42610: ST_TO_ADDR
42611: GO 42614
42613: POP
// end ;
42614: LD_VAR 0 3
42618: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42619: LD_INT 0
42621: PPUSH
42622: PPUSH
42623: PPUSH
42624: PPUSH
42625: PPUSH
42626: PPUSH
42627: PPUSH
42628: PPUSH
42629: PPUSH
42630: PPUSH
42631: PPUSH
// result := false ;
42632: LD_ADDR_VAR 0 6
42636: PUSH
42637: LD_INT 0
42639: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42640: LD_VAR 0 1
42644: NOT
42645: PUSH
42646: LD_VAR 0 1
42650: PPUSH
42651: CALL_OW 266
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: IN
42666: NOT
42667: OR
42668: PUSH
42669: LD_VAR 0 2
42673: NOT
42674: OR
42675: PUSH
42676: LD_VAR 0 5
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: LD_INT 3
42692: PUSH
42693: LD_INT 4
42695: PUSH
42696: LD_INT 5
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: IN
42707: NOT
42708: OR
42709: PUSH
42710: LD_VAR 0 3
42714: PPUSH
42715: LD_VAR 0 4
42719: PPUSH
42720: CALL_OW 488
42724: NOT
42725: OR
42726: IFFALSE 42730
// exit ;
42728: GO 43466
// side := GetSide ( depot ) ;
42730: LD_ADDR_VAR 0 9
42734: PUSH
42735: LD_VAR 0 1
42739: PPUSH
42740: CALL_OW 255
42744: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42745: LD_VAR 0 9
42749: PPUSH
42750: LD_VAR 0 2
42754: PPUSH
42755: CALL 42243 0 2
42759: NOT
42760: IFFALSE 42764
// exit ;
42762: GO 43466
// pom := GetBase ( depot ) ;
42764: LD_ADDR_VAR 0 10
42768: PUSH
42769: LD_VAR 0 1
42773: PPUSH
42774: CALL_OW 274
42778: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42779: LD_ADDR_VAR 0 11
42783: PUSH
42784: LD_VAR 0 2
42788: PPUSH
42789: LD_VAR 0 1
42793: PPUSH
42794: CALL_OW 248
42798: PPUSH
42799: CALL_OW 450
42803: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42804: LD_VAR 0 10
42808: PPUSH
42809: LD_INT 1
42811: PPUSH
42812: CALL_OW 275
42816: PUSH
42817: LD_VAR 0 11
42821: PUSH
42822: LD_INT 1
42824: ARRAY
42825: GREATEREQUAL
42826: PUSH
42827: LD_VAR 0 10
42831: PPUSH
42832: LD_INT 2
42834: PPUSH
42835: CALL_OW 275
42839: PUSH
42840: LD_VAR 0 11
42844: PUSH
42845: LD_INT 2
42847: ARRAY
42848: GREATEREQUAL
42849: AND
42850: PUSH
42851: LD_VAR 0 10
42855: PPUSH
42856: LD_INT 3
42858: PPUSH
42859: CALL_OW 275
42863: PUSH
42864: LD_VAR 0 11
42868: PUSH
42869: LD_INT 3
42871: ARRAY
42872: GREATEREQUAL
42873: AND
42874: NOT
42875: IFFALSE 42879
// exit ;
42877: GO 43466
// if GetBType ( depot ) = b_depot then
42879: LD_VAR 0 1
42883: PPUSH
42884: CALL_OW 266
42888: PUSH
42889: LD_INT 0
42891: EQUAL
42892: IFFALSE 42904
// dist := 28 else
42894: LD_ADDR_VAR 0 14
42898: PUSH
42899: LD_INT 28
42901: ST_TO_ADDR
42902: GO 42912
// dist := 36 ;
42904: LD_ADDR_VAR 0 14
42908: PUSH
42909: LD_INT 36
42911: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42912: LD_VAR 0 1
42916: PPUSH
42917: LD_VAR 0 3
42921: PPUSH
42922: LD_VAR 0 4
42926: PPUSH
42927: CALL_OW 297
42931: PUSH
42932: LD_VAR 0 14
42936: GREATER
42937: IFFALSE 42941
// exit ;
42939: GO 43466
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42941: LD_ADDR_VAR 0 12
42945: PUSH
42946: LD_VAR 0 2
42950: PPUSH
42951: LD_VAR 0 3
42955: PPUSH
42956: LD_VAR 0 4
42960: PPUSH
42961: LD_VAR 0 5
42965: PPUSH
42966: LD_VAR 0 1
42970: PPUSH
42971: CALL_OW 248
42975: PPUSH
42976: LD_INT 0
42978: PPUSH
42979: CALL 43471 0 6
42983: ST_TO_ADDR
// if not hexes then
42984: LD_VAR 0 12
42988: NOT
42989: IFFALSE 42993
// exit ;
42991: GO 43466
// hex := GetHexInfo ( x , y ) ;
42993: LD_ADDR_VAR 0 15
42997: PUSH
42998: LD_VAR 0 3
43002: PPUSH
43003: LD_VAR 0 4
43007: PPUSH
43008: CALL_OW 546
43012: ST_TO_ADDR
// if hex [ 1 ] then
43013: LD_VAR 0 15
43017: PUSH
43018: LD_INT 1
43020: ARRAY
43021: IFFALSE 43025
// exit ;
43023: GO 43466
// height := hex [ 2 ] ;
43025: LD_ADDR_VAR 0 13
43029: PUSH
43030: LD_VAR 0 15
43034: PUSH
43035: LD_INT 2
43037: ARRAY
43038: ST_TO_ADDR
// for i = 1 to hexes do
43039: LD_ADDR_VAR 0 7
43043: PUSH
43044: DOUBLE
43045: LD_INT 1
43047: DEC
43048: ST_TO_ADDR
43049: LD_VAR 0 12
43053: PUSH
43054: FOR_TO
43055: IFFALSE 43385
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43057: LD_VAR 0 12
43061: PUSH
43062: LD_VAR 0 7
43066: ARRAY
43067: PUSH
43068: LD_INT 1
43070: ARRAY
43071: PPUSH
43072: LD_VAR 0 12
43076: PUSH
43077: LD_VAR 0 7
43081: ARRAY
43082: PUSH
43083: LD_INT 2
43085: ARRAY
43086: PPUSH
43087: CALL_OW 488
43091: NOT
43092: PUSH
43093: LD_VAR 0 12
43097: PUSH
43098: LD_VAR 0 7
43102: ARRAY
43103: PUSH
43104: LD_INT 1
43106: ARRAY
43107: PPUSH
43108: LD_VAR 0 12
43112: PUSH
43113: LD_VAR 0 7
43117: ARRAY
43118: PUSH
43119: LD_INT 2
43121: ARRAY
43122: PPUSH
43123: CALL_OW 428
43127: PUSH
43128: LD_INT 0
43130: GREATER
43131: OR
43132: PUSH
43133: LD_VAR 0 12
43137: PUSH
43138: LD_VAR 0 7
43142: ARRAY
43143: PUSH
43144: LD_INT 1
43146: ARRAY
43147: PPUSH
43148: LD_VAR 0 12
43152: PUSH
43153: LD_VAR 0 7
43157: ARRAY
43158: PUSH
43159: LD_INT 2
43161: ARRAY
43162: PPUSH
43163: CALL_OW 351
43167: OR
43168: IFFALSE 43174
// exit ;
43170: POP
43171: POP
43172: GO 43466
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43174: LD_ADDR_VAR 0 8
43178: PUSH
43179: LD_VAR 0 12
43183: PUSH
43184: LD_VAR 0 7
43188: ARRAY
43189: PUSH
43190: LD_INT 1
43192: ARRAY
43193: PPUSH
43194: LD_VAR 0 12
43198: PUSH
43199: LD_VAR 0 7
43203: ARRAY
43204: PUSH
43205: LD_INT 2
43207: ARRAY
43208: PPUSH
43209: CALL_OW 546
43213: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43214: LD_VAR 0 8
43218: PUSH
43219: LD_INT 1
43221: ARRAY
43222: PUSH
43223: LD_VAR 0 8
43227: PUSH
43228: LD_INT 2
43230: ARRAY
43231: PUSH
43232: LD_VAR 0 13
43236: PUSH
43237: LD_INT 2
43239: PLUS
43240: GREATER
43241: OR
43242: PUSH
43243: LD_VAR 0 8
43247: PUSH
43248: LD_INT 2
43250: ARRAY
43251: PUSH
43252: LD_VAR 0 13
43256: PUSH
43257: LD_INT 2
43259: MINUS
43260: LESS
43261: OR
43262: PUSH
43263: LD_VAR 0 8
43267: PUSH
43268: LD_INT 3
43270: ARRAY
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 8
43277: PUSH
43278: LD_INT 9
43280: PUSH
43281: LD_INT 10
43283: PUSH
43284: LD_INT 11
43286: PUSH
43287: LD_INT 12
43289: PUSH
43290: LD_INT 13
43292: PUSH
43293: LD_INT 16
43295: PUSH
43296: LD_INT 17
43298: PUSH
43299: LD_INT 18
43301: PUSH
43302: LD_INT 19
43304: PUSH
43305: LD_INT 20
43307: PUSH
43308: LD_INT 21
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: IN
43326: NOT
43327: OR
43328: PUSH
43329: LD_VAR 0 8
43333: PUSH
43334: LD_INT 5
43336: ARRAY
43337: NOT
43338: OR
43339: PUSH
43340: LD_VAR 0 8
43344: PUSH
43345: LD_INT 6
43347: ARRAY
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: LD_INT 2
43354: PUSH
43355: LD_INT 7
43357: PUSH
43358: LD_INT 9
43360: PUSH
43361: LD_INT 10
43363: PUSH
43364: LD_INT 11
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: IN
43375: NOT
43376: OR
43377: IFFALSE 43383
// exit ;
43379: POP
43380: POP
43381: GO 43466
// end ;
43383: GO 43054
43385: POP
43386: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43387: LD_VAR 0 9
43391: PPUSH
43392: LD_VAR 0 3
43396: PPUSH
43397: LD_VAR 0 4
43401: PPUSH
43402: LD_INT 20
43404: PPUSH
43405: CALL 35418 0 4
43409: PUSH
43410: LD_INT 4
43412: ARRAY
43413: IFFALSE 43417
// exit ;
43415: GO 43466
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43417: LD_VAR 0 2
43421: PUSH
43422: LD_INT 29
43424: PUSH
43425: LD_INT 30
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: IN
43432: PUSH
43433: LD_VAR 0 3
43437: PPUSH
43438: LD_VAR 0 4
43442: PPUSH
43443: LD_VAR 0 9
43447: PPUSH
43448: CALL_OW 440
43452: NOT
43453: AND
43454: IFFALSE 43458
// exit ;
43456: GO 43466
// result := true ;
43458: LD_ADDR_VAR 0 6
43462: PUSH
43463: LD_INT 1
43465: ST_TO_ADDR
// end ;
43466: LD_VAR 0 6
43470: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43471: LD_INT 0
43473: PPUSH
43474: PPUSH
43475: PPUSH
43476: PPUSH
43477: PPUSH
43478: PPUSH
43479: PPUSH
43480: PPUSH
43481: PPUSH
43482: PPUSH
43483: PPUSH
43484: PPUSH
43485: PPUSH
43486: PPUSH
43487: PPUSH
43488: PPUSH
43489: PPUSH
43490: PPUSH
43491: PPUSH
43492: PPUSH
43493: PPUSH
43494: PPUSH
43495: PPUSH
43496: PPUSH
43497: PPUSH
43498: PPUSH
43499: PPUSH
43500: PPUSH
43501: PPUSH
43502: PPUSH
43503: PPUSH
43504: PPUSH
43505: PPUSH
43506: PPUSH
43507: PPUSH
43508: PPUSH
43509: PPUSH
43510: PPUSH
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
43515: PPUSH
43516: PPUSH
43517: PPUSH
43518: PPUSH
43519: PPUSH
43520: PPUSH
43521: PPUSH
43522: PPUSH
43523: PPUSH
43524: PPUSH
43525: PPUSH
43526: PPUSH
43527: PPUSH
43528: PPUSH
43529: PPUSH
43530: PPUSH
// result = [ ] ;
43531: LD_ADDR_VAR 0 7
43535: PUSH
43536: EMPTY
43537: ST_TO_ADDR
// temp_list = [ ] ;
43538: LD_ADDR_VAR 0 9
43542: PUSH
43543: EMPTY
43544: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43545: LD_VAR 0 4
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: LD_INT 3
43561: PUSH
43562: LD_INT 4
43564: PUSH
43565: LD_INT 5
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: IN
43576: NOT
43577: PUSH
43578: LD_VAR 0 1
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: IN
43593: PUSH
43594: LD_VAR 0 5
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: LD_INT 2
43604: PUSH
43605: LD_INT 3
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: LIST
43612: IN
43613: NOT
43614: AND
43615: OR
43616: IFFALSE 43620
// exit ;
43618: GO 62011
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43620: LD_VAR 0 1
43624: PUSH
43625: LD_INT 6
43627: PUSH
43628: LD_INT 7
43630: PUSH
43631: LD_INT 8
43633: PUSH
43634: LD_INT 13
43636: PUSH
43637: LD_INT 12
43639: PUSH
43640: LD_INT 15
43642: PUSH
43643: LD_INT 11
43645: PUSH
43646: LD_INT 14
43648: PUSH
43649: LD_INT 10
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: IN
43663: IFFALSE 43673
// btype = b_lab ;
43665: LD_ADDR_VAR 0 1
43669: PUSH
43670: LD_INT 6
43672: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43673: LD_VAR 0 6
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: LIST
43691: IN
43692: NOT
43693: PUSH
43694: LD_VAR 0 1
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: LD_INT 6
43713: PUSH
43714: LD_INT 36
43716: PUSH
43717: LD_INT 4
43719: PUSH
43720: LD_INT 5
43722: PUSH
43723: LD_INT 31
43725: PUSH
43726: LD_INT 32
43728: PUSH
43729: LD_INT 33
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: IN
43745: NOT
43746: PUSH
43747: LD_VAR 0 6
43751: PUSH
43752: LD_INT 1
43754: EQUAL
43755: AND
43756: OR
43757: PUSH
43758: LD_VAR 0 1
43762: PUSH
43763: LD_INT 2
43765: PUSH
43766: LD_INT 3
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: IN
43773: NOT
43774: PUSH
43775: LD_VAR 0 6
43779: PUSH
43780: LD_INT 2
43782: EQUAL
43783: AND
43784: OR
43785: IFFALSE 43795
// mode = 0 ;
43787: LD_ADDR_VAR 0 6
43791: PUSH
43792: LD_INT 0
43794: ST_TO_ADDR
// case mode of 0 :
43795: LD_VAR 0 6
43799: PUSH
43800: LD_INT 0
43802: DOUBLE
43803: EQUAL
43804: IFTRUE 43808
43806: GO 55261
43808: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43809: LD_ADDR_VAR 0 11
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 2
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: LD_INT 2
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 2
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: NEG
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: LD_INT 3
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 3
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44002: LD_ADDR_VAR 0 12
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 2
44148: NEG
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 3
44159: NEG
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 3
44170: NEG
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44198: LD_ADDR_VAR 0 13
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: LD_INT 2
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 2
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: LD_INT 2
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 2
44321: NEG
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: NEG
44334: PUSH
44335: LD_INT 2
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: NEG
44346: PUSH
44347: LD_INT 3
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 3
44357: NEG
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 3
44369: NEG
44370: PUSH
44371: LD_INT 3
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44397: LD_ADDR_VAR 0 14
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: LD_INT 2
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: LD_INT 2
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: LD_INT 3
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: LD_INT 3
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: LD_INT 2
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44593: LD_ADDR_VAR 0 15
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 3
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 3
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44786: LD_ADDR_VAR 0 16
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 2
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: NEG
44922: PUSH
44923: LD_INT 2
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 3
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 3
44943: PUSH
44944: LD_INT 3
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 2
44953: PUSH
44954: LD_INT 3
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44979: LD_ADDR_VAR 0 17
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: LD_INT 2
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 2
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45209: LD_ADDR_VAR 0 18
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: LD_INT 2
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 2
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: NEG
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45439: LD_ADDR_VAR 0 19
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45669: LD_ADDR_VAR 0 20
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 2
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: LD_INT 2
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 2
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45899: LD_ADDR_VAR 0 21
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 2
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46129: LD_ADDR_VAR 0 22
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 2
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 2
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46359: LD_ADDR_VAR 0 23
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: LD_INT 1
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: LD_INT 2
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: LD_INT 3
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: LD_INT 3
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 2
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46639: LD_ADDR_VAR 0 24
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: LD_INT 2
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: NEG
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 3
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 3
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46915: LD_ADDR_VAR 0 25
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: NEG
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 3
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 3
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: LD_INT 3
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47189: LD_ADDR_VAR 0 26
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 2
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: LD_INT 2
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: NEG
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 2
47388: NEG
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: LD_INT 3
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 3
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47465: LD_ADDR_VAR 0 27
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: LD_INT 2
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 3
47698: NEG
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 3
47710: NEG
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47745: LD_ADDR_VAR 0 28
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: LD_INT 3
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: LD_INT 3
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 3
47980: NEG
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 3
47992: NEG
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48027: LD_ADDR_VAR 0 29
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 2
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: LD_INT 3
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 3
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 3
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 3
48271: NEG
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48306: LD_ADDR_VAR 0 30
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: LD_INT 2
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 3
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 3
48518: PUSH
48519: LD_INT 2
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: LD_INT 3
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 2
48538: NEG
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 3
48549: NEG
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48584: LD_ADDR_VAR 0 31
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: LD_INT 3
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 3
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 3
48827: NEG
48828: PUSH
48829: LD_INT 2
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48862: LD_ADDR_VAR 0 32
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: LD_INT 2
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 3
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: LD_INT 3
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 3
49105: NEG
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49140: LD_ADDR_VAR 0 33
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: LD_INT 3
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 3
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: LD_INT 3
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 3
49384: NEG
49385: PUSH
49386: LD_INT 2
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49419: LD_ADDR_VAR 0 34
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 2
49598: NEG
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 3
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 3
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: LD_INT 3
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 3
49664: NEG
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49699: LD_ADDR_VAR 0 35
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49811: LD_ADDR_VAR 0 36
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49923: LD_ADDR_VAR 0 37
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50035: LD_ADDR_VAR 0 38
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50147: LD_ADDR_VAR 0 39
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 2
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50259: LD_ADDR_VAR 0 40
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50371: LD_ADDR_VAR 0 41
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: LD_INT 3
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 3
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 3
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 3
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 3
50614: PUSH
50615: LD_INT 3
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: LD_INT 3
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 3
50645: NEG
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 3
50668: NEG
50669: PUSH
50670: LD_INT 2
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: LD_INT 3
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50721: LD_ADDR_VAR 0 42
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: LD_INT 3
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: LD_INT 3
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 3
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: LD_INT 2
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 3
50967: PUSH
50968: LD_INT 3
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: LD_INT 3
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 3
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 3
51018: NEG
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 3
51030: NEG
51031: PUSH
51032: LD_INT 3
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51071: LD_ADDR_VAR 0 43
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 2
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 2
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 3
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 3
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: LD_INT 2
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 3
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 3
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 3
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 3
51378: NEG
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51419: LD_ADDR_VAR 0 44
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 2
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 2
51585: NEG
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: NEG
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 2
51609: NEG
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 3
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 3
51662: PUSH
51663: LD_INT 3
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 3
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 3
51693: NEG
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 3
51704: NEG
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 3
51716: NEG
51717: PUSH
51718: LD_INT 2
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 3
51728: NEG
51729: PUSH
51730: LD_INT 3
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51769: LD_ADDR_VAR 0 45
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: LD_INT 2
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: LD_INT 3
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 3
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: LD_INT 3
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 3
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 3
52015: PUSH
52016: LD_INT 3
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: LD_INT 3
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 3
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 3
52066: NEG
52067: PUSH
52068: LD_INT 2
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: LD_INT 3
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52119: LD_ADDR_VAR 0 46
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 2
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: LD_INT 1
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 3
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 3
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 3
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 3
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 3
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 3
52415: NEG
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 3
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52467: LD_ADDR_VAR 0 47
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 2
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: LD_INT 2
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52618: LD_ADDR_VAR 0 48
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52765: LD_ADDR_VAR 0 49
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 2
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: LD_INT 2
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52909: LD_ADDR_VAR 0 50
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: LD_INT 2
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53053: LD_ADDR_VAR 0 51
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53200: LD_ADDR_VAR 0 52
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: NEG
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53351: LD_ADDR_VAR 0 53
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 2
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53581: LD_ADDR_VAR 0 54
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 2
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: LD_INT 2
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 2
53780: NEG
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53811: LD_ADDR_VAR 0 55
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54041: LD_ADDR_VAR 0 56
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54271: LD_ADDR_VAR 0 57
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: LD_INT 2
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: LD_INT 2
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: LD_INT 2
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: NEG
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54501: LD_ADDR_VAR 0 58
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 2
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54731: LD_ADDR_VAR 0 59
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54819: LD_ADDR_VAR 0 60
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54907: LD_ADDR_VAR 0 61
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54995: LD_ADDR_VAR 0 62
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55083: LD_ADDR_VAR 0 63
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55171: LD_ADDR_VAR 0 64
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: ST_TO_ADDR
// end ; 1 :
55259: GO 61156
55261: LD_INT 1
55263: DOUBLE
55264: EQUAL
55265: IFTRUE 55269
55267: GO 57892
55269: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55270: LD_ADDR_VAR 0 11
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 3
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 3
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: LD_INT 2
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55314: LD_ADDR_VAR 0 12
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 3
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 3
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55355: LD_ADDR_VAR 0 13
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 3
55372: PUSH
55373: LD_INT 3
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: LD_INT 3
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: LIST
55394: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55395: LD_ADDR_VAR 0 14
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: LD_INT 3
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 3
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: LIST
55435: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55436: LD_ADDR_VAR 0 15
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 3
55454: NEG
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 3
55465: NEG
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55480: LD_ADDR_VAR 0 16
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: LD_INT 3
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 3
55499: NEG
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 3
55511: NEG
55512: PUSH
55513: LD_INT 3
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: LIST
55525: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55526: LD_ADDR_VAR 0 17
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 3
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: LD_INT 3
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: LIST
55569: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55570: LD_ADDR_VAR 0 18
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 3
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 3
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: LIST
55610: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55611: LD_ADDR_VAR 0 19
55615: PUSH
55616: LD_INT 3
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 3
55628: PUSH
55629: LD_INT 3
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: LIST
55650: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55651: LD_ADDR_VAR 0 20
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55692: LD_ADDR_VAR 0 21
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 3
55710: NEG
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 3
55721: NEG
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: LIST
55735: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55736: LD_ADDR_VAR 0 22
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: LD_INT 3
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 3
55755: NEG
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 3
55767: NEG
55768: PUSH
55769: LD_INT 3
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: LIST
55781: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55782: LD_ADDR_VAR 0 23
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 3
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 4
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: LD_INT 3
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: LIST
55825: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55826: LD_ADDR_VAR 0 24
55830: PUSH
55831: LD_INT 3
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 3
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 4
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: LIST
55866: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55867: LD_ADDR_VAR 0 25
55871: PUSH
55872: LD_INT 3
55874: PUSH
55875: LD_INT 3
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 4
55884: PUSH
55885: LD_INT 3
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 3
55894: PUSH
55895: LD_INT 4
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: LIST
55906: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55907: LD_ADDR_VAR 0 26
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: LD_INT 3
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 4
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: LIST
55947: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55948: LD_ADDR_VAR 0 27
55952: PUSH
55953: LD_INT 3
55955: NEG
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 3
55966: NEG
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 4
55977: NEG
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: LIST
55991: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55992: LD_ADDR_VAR 0 28
55996: PUSH
55997: LD_INT 3
55999: NEG
56000: PUSH
56001: LD_INT 3
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: LD_INT 4
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 4
56023: NEG
56024: PUSH
56025: LD_INT 3
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: LIST
56037: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56038: LD_ADDR_VAR 0 29
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: LD_INT 3
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: LD_INT 3
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: LD_INT 4
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 4
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: LD_INT 3
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 5
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 5
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 4
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 6
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 6
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 5
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56193: LD_ADDR_VAR 0 30
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 3
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 3
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 3
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 4
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 4
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 4
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 5
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 5
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 5
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 6
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 6
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56336: LD_ADDR_VAR 0 31
56340: PUSH
56341: LD_INT 3
56343: PUSH
56344: LD_INT 2
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: LD_INT 3
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 4
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 4
56383: PUSH
56384: LD_INT 4
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 3
56393: PUSH
56394: LD_INT 4
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 5
56403: PUSH
56404: LD_INT 4
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 5
56413: PUSH
56414: LD_INT 5
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 4
56423: PUSH
56424: LD_INT 5
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 6
56433: PUSH
56434: LD_INT 5
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 6
56443: PUSH
56444: LD_INT 6
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 5
56453: PUSH
56454: LD_INT 6
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56475: LD_ADDR_VAR 0 32
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 3
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 4
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 4
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 3
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 5
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: LD_INT 5
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: LD_INT 4
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: LD_INT 6
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: LD_INT 6
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 5
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56618: LD_ADDR_VAR 0 33
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 3
56636: NEG
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 3
56647: NEG
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 3
56659: NEG
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 4
56670: NEG
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 4
56681: NEG
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 4
56693: NEG
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 5
56704: NEG
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 5
56715: NEG
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 5
56727: NEG
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 6
56738: NEG
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 6
56749: NEG
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56773: LD_ADDR_VAR 0 34
56777: PUSH
56778: LD_INT 2
56780: NEG
56781: PUSH
56782: LD_INT 3
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 3
56792: NEG
56793: PUSH
56794: LD_INT 2
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 3
56804: NEG
56805: PUSH
56806: LD_INT 3
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 3
56816: NEG
56817: PUSH
56818: LD_INT 4
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 4
56828: NEG
56829: PUSH
56830: LD_INT 3
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 4
56840: NEG
56841: PUSH
56842: LD_INT 4
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 4
56852: NEG
56853: PUSH
56854: LD_INT 5
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 5
56864: NEG
56865: PUSH
56866: LD_INT 4
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 5
56876: NEG
56877: PUSH
56878: LD_INT 5
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 5
56888: NEG
56889: PUSH
56890: LD_INT 6
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 6
56900: NEG
56901: PUSH
56902: LD_INT 5
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 6
56912: NEG
56913: PUSH
56914: LD_INT 6
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56936: LD_ADDR_VAR 0 41
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: LD_INT 3
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56980: LD_ADDR_VAR 0 42
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 3
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: LIST
57020: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57021: LD_ADDR_VAR 0 43
57025: PUSH
57026: LD_INT 2
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: LD_INT 2
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 2
57048: PUSH
57049: LD_INT 3
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: LIST
57060: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57061: LD_ADDR_VAR 0 44
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 2
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: LD_INT 3
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: LIST
57101: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57102: LD_ADDR_VAR 0 45
57106: PUSH
57107: LD_INT 2
57109: NEG
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 3
57131: NEG
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: LIST
57145: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57146: LD_ADDR_VAR 0 46
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: LD_INT 2
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 2
57165: NEG
57166: PUSH
57167: LD_INT 3
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 3
57177: NEG
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: LIST
57191: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57192: LD_ADDR_VAR 0 47
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: LD_INT 3
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: LD_INT 3
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57225: LD_ADDR_VAR 0 48
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57256: LD_ADDR_VAR 0 49
57260: PUSH
57261: LD_INT 3
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: LD_INT 2
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57285: LD_ADDR_VAR 0 50
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: LD_INT 3
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57314: LD_ADDR_VAR 0 51
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: NEG
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57345: LD_ADDR_VAR 0 52
57349: PUSH
57350: LD_INT 3
57352: NEG
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 3
57364: NEG
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57378: LD_ADDR_VAR 0 53
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: LD_INT 3
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: LD_INT 3
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57422: LD_ADDR_VAR 0 54
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 3
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: LIST
57462: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57463: LD_ADDR_VAR 0 55
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 3
57480: PUSH
57481: LD_INT 3
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 2
57490: PUSH
57491: LD_INT 3
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: LIST
57502: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57503: LD_ADDR_VAR 0 56
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: LD_INT 3
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: LD_INT 3
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: LIST
57543: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57544: LD_ADDR_VAR 0 57
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 3
57562: NEG
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 3
57573: NEG
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57588: LD_ADDR_VAR 0 58
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: LD_INT 3
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 3
57607: NEG
57608: PUSH
57609: LD_INT 2
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 3
57619: NEG
57620: PUSH
57621: LD_INT 3
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: LIST
57633: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57634: LD_ADDR_VAR 0 59
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: LIST
57677: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57678: LD_ADDR_VAR 0 60
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: LIST
57718: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57719: LD_ADDR_VAR 0 61
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 2
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: LIST
57758: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57759: LD_ADDR_VAR 0 62
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: LIST
57799: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57800: LD_ADDR_VAR 0 63
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 2
57818: NEG
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: LIST
57843: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57844: LD_ADDR_VAR 0 64
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: NEG
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: LD_INT 2
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: ST_TO_ADDR
// end ; 2 :
57890: GO 61156
57892: LD_INT 2
57894: DOUBLE
57895: EQUAL
57896: IFTRUE 57900
57898: GO 61155
57900: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57901: LD_ADDR_VAR 0 29
57905: PUSH
57906: LD_INT 4
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 4
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 5
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 5
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 4
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 3
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 3
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 5
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 3
58001: PUSH
58002: LD_INT 3
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 3
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 4
58021: PUSH
58022: LD_INT 3
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 4
58031: PUSH
58032: LD_INT 4
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 3
58041: PUSH
58042: LD_INT 4
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: LD_INT 3
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 2
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 4
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: LD_INT 4
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: LD_INT 4
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: LD_INT 4
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: LD_INT 5
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: LD_INT 5
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: LD_INT 4
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: LD_INT 5
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 2
58173: NEG
58174: PUSH
58175: LD_INT 3
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 3
58184: NEG
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 3
58195: NEG
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 2
58207: NEG
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 3
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 4
58240: NEG
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 4
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 4
58263: NEG
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: NEG
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 4
58286: NEG
58287: PUSH
58288: LD_INT 4
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 4
58298: NEG
58299: PUSH
58300: LD_INT 5
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 3
58310: NEG
58311: PUSH
58312: LD_INT 4
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: LD_INT 3
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 4
58334: NEG
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 5
58346: NEG
58347: PUSH
58348: LD_INT 4
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 5
58358: NEG
58359: PUSH
58360: LD_INT 5
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 3
58370: NEG
58371: PUSH
58372: LD_INT 5
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 5
58382: NEG
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58439: LD_ADDR_VAR 0 30
58443: PUSH
58444: LD_INT 4
58446: PUSH
58447: LD_INT 4
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 4
58456: PUSH
58457: LD_INT 3
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 5
58466: PUSH
58467: LD_INT 4
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 5
58476: PUSH
58477: LD_INT 5
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 4
58486: PUSH
58487: LD_INT 5
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 3
58496: PUSH
58497: LD_INT 4
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: LD_INT 3
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 5
58516: PUSH
58517: LD_INT 3
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 3
58526: PUSH
58527: LD_INT 5
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: LD_INT 3
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: LD_INT 4
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: LD_INT 4
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 3
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: LD_INT 4
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 2
58618: NEG
58619: PUSH
58620: LD_INT 2
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 4
58629: NEG
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 4
58640: NEG
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 3
58652: NEG
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 3
58663: NEG
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 4
58674: NEG
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 5
58685: NEG
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 5
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 5
58708: NEG
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 3
58720: NEG
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 3
58731: NEG
58732: PUSH
58733: LD_INT 3
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 3
58743: NEG
58744: PUSH
58745: LD_INT 4
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: LD_INT 3
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: LD_INT 2
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 4
58791: NEG
58792: PUSH
58793: LD_INT 3
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 4
58803: NEG
58804: PUSH
58805: LD_INT 4
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: NEG
58816: PUSH
58817: LD_INT 4
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 4
58827: NEG
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: LD_INT 4
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: LD_INT 5
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: LD_INT 4
58864: NEG
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: LD_INT 3
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: LD_INT 3
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: LD_INT 4
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: LD_INT 5
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 2
58918: PUSH
58919: LD_INT 3
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 2
58929: NEG
58930: PUSH
58931: LD_INT 5
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58986: LD_ADDR_VAR 0 31
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: LD_INT 4
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: LD_INT 3
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: LD_INT 4
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: LD_INT 5
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: LD_INT 5
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: LD_INT 4
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: PUSH
59056: LD_INT 3
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 2
59065: PUSH
59066: LD_INT 5
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: LD_INT 3
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 3
59097: NEG
59098: PUSH
59099: LD_INT 1
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 3
59131: NEG
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 4
59142: NEG
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 4
59153: NEG
59154: PUSH
59155: LD_INT 1
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 4
59165: NEG
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: NEG
59178: PUSH
59179: LD_INT 2
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 4
59188: NEG
59189: PUSH
59190: LD_INT 4
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 4
59200: NEG
59201: PUSH
59202: LD_INT 5
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: NEG
59213: PUSH
59214: LD_INT 4
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 3
59224: NEG
59225: PUSH
59226: LD_INT 3
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 4
59236: NEG
59237: PUSH
59238: LD_INT 3
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 5
59248: NEG
59249: PUSH
59250: LD_INT 4
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 5
59260: NEG
59261: PUSH
59262: LD_INT 5
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: NEG
59273: PUSH
59274: LD_INT 5
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 5
59284: NEG
59285: PUSH
59286: LD_INT 3
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 3
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 4
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: LD_INT 3
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: LD_INT 4
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 2
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: LD_INT 4
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 4
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 4
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 5
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 5
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 4
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 3
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 3
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 3
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 5
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59536: LD_ADDR_VAR 0 32
59540: PUSH
59541: LD_INT 4
59543: NEG
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 4
59554: NEG
59555: PUSH
59556: LD_INT 1
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 3
59566: NEG
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 3
59577: NEG
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 4
59588: NEG
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 5
59599: NEG
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 5
59610: NEG
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 5
59622: NEG
59623: PUSH
59624: LD_INT 2
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 3
59634: NEG
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 3
59645: NEG
59646: PUSH
59647: LD_INT 3
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: NEG
59658: PUSH
59659: LD_INT 4
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 2
59669: NEG
59670: PUSH
59671: LD_INT 3
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: LD_INT 2
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 3
59693: NEG
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 4
59705: NEG
59706: PUSH
59707: LD_INT 3
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 4
59717: NEG
59718: PUSH
59719: LD_INT 4
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 2
59729: NEG
59730: PUSH
59731: LD_INT 4
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 4
59741: NEG
59742: PUSH
59743: LD_INT 2
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: LD_INT 4
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 5
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: LD_INT 4
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: LD_INT 3
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: LD_INT 3
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: LD_INT 4
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: LD_INT 5
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 2
59832: PUSH
59833: LD_INT 3
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: LD_INT 5
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 3
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 4
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 4
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 3
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 2
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 4
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 4
59948: PUSH
59949: LD_INT 4
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 4
59958: PUSH
59959: LD_INT 3
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 5
59968: PUSH
59969: LD_INT 4
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 5
59978: PUSH
59979: LD_INT 5
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 4
59988: PUSH
59989: LD_INT 5
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 3
59998: PUSH
59999: LD_INT 4
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 3
60008: PUSH
60009: LD_INT 3
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 5
60018: PUSH
60019: LD_INT 3
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 3
60028: PUSH
60029: LD_INT 5
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60083: LD_ADDR_VAR 0 33
60087: PUSH
60088: LD_INT 4
60090: NEG
60091: PUSH
60092: LD_INT 4
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 4
60102: NEG
60103: PUSH
60104: LD_INT 5
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 3
60114: NEG
60115: PUSH
60116: LD_INT 4
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 3
60126: NEG
60127: PUSH
60128: LD_INT 3
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 4
60138: NEG
60139: PUSH
60140: LD_INT 3
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 5
60150: NEG
60151: PUSH
60152: LD_INT 4
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 5
60162: NEG
60163: PUSH
60164: LD_INT 5
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: NEG
60175: PUSH
60176: LD_INT 5
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 5
60186: NEG
60187: PUSH
60188: LD_INT 3
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: LD_INT 3
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 4
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: LD_INT 3
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: LD_INT 2
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: LD_INT 3
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: LD_INT 4
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 2
60288: NEG
60289: PUSH
60290: LD_INT 4
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 4
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 4
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 5
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 5
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 4
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 3
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 3
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 5
60383: PUSH
60384: LD_INT 2
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 3
60393: PUSH
60394: LD_INT 3
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 3
60403: PUSH
60404: LD_INT 2
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 4
60413: PUSH
60414: LD_INT 3
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 4
60423: PUSH
60424: LD_INT 4
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: PUSH
60434: LD_INT 4
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 2
60453: PUSH
60454: LD_INT 2
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 4
60463: PUSH
60464: LD_INT 2
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: LD_INT 4
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 4
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 3
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: LD_INT 4
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: LD_INT 5
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: LD_INT 5
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: LD_INT 4
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: LD_INT 3
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 2
60555: PUSH
60556: LD_INT 5
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 2
60565: NEG
60566: PUSH
60567: LD_INT 3
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60621: LD_ADDR_VAR 0 34
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: LD_INT 4
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: LD_INT 5
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: LD_INT 4
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: LD_INT 3
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: LD_INT 3
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 1
60683: NEG
60684: PUSH
60685: LD_INT 4
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: LD_INT 5
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: LD_INT 3
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 2
60718: NEG
60719: PUSH
60720: LD_INT 5
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 3
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 4
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 4
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 3
60771: PUSH
60772: LD_INT 1
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: LD_INT 1
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 2
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 4
60813: PUSH
60814: LD_INT 2
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 4
60823: PUSH
60824: LD_INT 4
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 4
60833: PUSH
60834: LD_INT 3
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 5
60843: PUSH
60844: LD_INT 4
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 5
60853: PUSH
60854: LD_INT 5
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 4
60863: PUSH
60864: LD_INT 5
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 3
60873: PUSH
60874: LD_INT 4
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 3
60883: PUSH
60884: LD_INT 3
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 5
60893: PUSH
60894: LD_INT 3
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: LD_INT 5
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: LD_INT 3
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: LD_INT 4
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: LD_INT 4
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: LD_INT 3
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: LD_INT 4
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: LD_INT 2
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 4
61006: NEG
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 4
61017: NEG
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 3
61029: NEG
61030: PUSH
61031: LD_INT 0
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 3
61040: NEG
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 4
61051: NEG
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 5
61062: NEG
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 5
61073: NEG
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 5
61085: NEG
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 3
61097: NEG
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: ST_TO_ADDR
// end ; end ;
61153: GO 61156
61155: POP
// case btype of b_depot , b_warehouse :
61156: LD_VAR 0 1
61160: PUSH
61161: LD_INT 0
61163: DOUBLE
61164: EQUAL
61165: IFTRUE 61175
61167: LD_INT 1
61169: DOUBLE
61170: EQUAL
61171: IFTRUE 61175
61173: GO 61376
61175: POP
// case nation of nation_american :
61176: LD_VAR 0 5
61180: PUSH
61181: LD_INT 1
61183: DOUBLE
61184: EQUAL
61185: IFTRUE 61189
61187: GO 61245
61189: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61190: LD_ADDR_VAR 0 9
61194: PUSH
61195: LD_VAR 0 11
61199: PUSH
61200: LD_VAR 0 12
61204: PUSH
61205: LD_VAR 0 13
61209: PUSH
61210: LD_VAR 0 14
61214: PUSH
61215: LD_VAR 0 15
61219: PUSH
61220: LD_VAR 0 16
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: PUSH
61233: LD_VAR 0 4
61237: PUSH
61238: LD_INT 1
61240: PLUS
61241: ARRAY
61242: ST_TO_ADDR
61243: GO 61374
61245: LD_INT 2
61247: DOUBLE
61248: EQUAL
61249: IFTRUE 61253
61251: GO 61309
61253: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61254: LD_ADDR_VAR 0 9
61258: PUSH
61259: LD_VAR 0 17
61263: PUSH
61264: LD_VAR 0 18
61268: PUSH
61269: LD_VAR 0 19
61273: PUSH
61274: LD_VAR 0 20
61278: PUSH
61279: LD_VAR 0 21
61283: PUSH
61284: LD_VAR 0 22
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: PUSH
61297: LD_VAR 0 4
61301: PUSH
61302: LD_INT 1
61304: PLUS
61305: ARRAY
61306: ST_TO_ADDR
61307: GO 61374
61309: LD_INT 3
61311: DOUBLE
61312: EQUAL
61313: IFTRUE 61317
61315: GO 61373
61317: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61318: LD_ADDR_VAR 0 9
61322: PUSH
61323: LD_VAR 0 23
61327: PUSH
61328: LD_VAR 0 24
61332: PUSH
61333: LD_VAR 0 25
61337: PUSH
61338: LD_VAR 0 26
61342: PUSH
61343: LD_VAR 0 27
61347: PUSH
61348: LD_VAR 0 28
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: PUSH
61361: LD_VAR 0 4
61365: PUSH
61366: LD_INT 1
61368: PLUS
61369: ARRAY
61370: ST_TO_ADDR
61371: GO 61374
61373: POP
61374: GO 61929
61376: LD_INT 2
61378: DOUBLE
61379: EQUAL
61380: IFTRUE 61390
61382: LD_INT 3
61384: DOUBLE
61385: EQUAL
61386: IFTRUE 61390
61388: GO 61446
61390: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61391: LD_ADDR_VAR 0 9
61395: PUSH
61396: LD_VAR 0 29
61400: PUSH
61401: LD_VAR 0 30
61405: PUSH
61406: LD_VAR 0 31
61410: PUSH
61411: LD_VAR 0 32
61415: PUSH
61416: LD_VAR 0 33
61420: PUSH
61421: LD_VAR 0 34
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: PUSH
61434: LD_VAR 0 4
61438: PUSH
61439: LD_INT 1
61441: PLUS
61442: ARRAY
61443: ST_TO_ADDR
61444: GO 61929
61446: LD_INT 16
61448: DOUBLE
61449: EQUAL
61450: IFTRUE 61508
61452: LD_INT 17
61454: DOUBLE
61455: EQUAL
61456: IFTRUE 61508
61458: LD_INT 18
61460: DOUBLE
61461: EQUAL
61462: IFTRUE 61508
61464: LD_INT 19
61466: DOUBLE
61467: EQUAL
61468: IFTRUE 61508
61470: LD_INT 22
61472: DOUBLE
61473: EQUAL
61474: IFTRUE 61508
61476: LD_INT 20
61478: DOUBLE
61479: EQUAL
61480: IFTRUE 61508
61482: LD_INT 21
61484: DOUBLE
61485: EQUAL
61486: IFTRUE 61508
61488: LD_INT 23
61490: DOUBLE
61491: EQUAL
61492: IFTRUE 61508
61494: LD_INT 24
61496: DOUBLE
61497: EQUAL
61498: IFTRUE 61508
61500: LD_INT 25
61502: DOUBLE
61503: EQUAL
61504: IFTRUE 61508
61506: GO 61564
61508: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61509: LD_ADDR_VAR 0 9
61513: PUSH
61514: LD_VAR 0 35
61518: PUSH
61519: LD_VAR 0 36
61523: PUSH
61524: LD_VAR 0 37
61528: PUSH
61529: LD_VAR 0 38
61533: PUSH
61534: LD_VAR 0 39
61538: PUSH
61539: LD_VAR 0 40
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: PUSH
61552: LD_VAR 0 4
61556: PUSH
61557: LD_INT 1
61559: PLUS
61560: ARRAY
61561: ST_TO_ADDR
61562: GO 61929
61564: LD_INT 6
61566: DOUBLE
61567: EQUAL
61568: IFTRUE 61620
61570: LD_INT 7
61572: DOUBLE
61573: EQUAL
61574: IFTRUE 61620
61576: LD_INT 8
61578: DOUBLE
61579: EQUAL
61580: IFTRUE 61620
61582: LD_INT 13
61584: DOUBLE
61585: EQUAL
61586: IFTRUE 61620
61588: LD_INT 12
61590: DOUBLE
61591: EQUAL
61592: IFTRUE 61620
61594: LD_INT 15
61596: DOUBLE
61597: EQUAL
61598: IFTRUE 61620
61600: LD_INT 11
61602: DOUBLE
61603: EQUAL
61604: IFTRUE 61620
61606: LD_INT 14
61608: DOUBLE
61609: EQUAL
61610: IFTRUE 61620
61612: LD_INT 10
61614: DOUBLE
61615: EQUAL
61616: IFTRUE 61620
61618: GO 61676
61620: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61621: LD_ADDR_VAR 0 9
61625: PUSH
61626: LD_VAR 0 41
61630: PUSH
61631: LD_VAR 0 42
61635: PUSH
61636: LD_VAR 0 43
61640: PUSH
61641: LD_VAR 0 44
61645: PUSH
61646: LD_VAR 0 45
61650: PUSH
61651: LD_VAR 0 46
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: PUSH
61664: LD_VAR 0 4
61668: PUSH
61669: LD_INT 1
61671: PLUS
61672: ARRAY
61673: ST_TO_ADDR
61674: GO 61929
61676: LD_INT 36
61678: DOUBLE
61679: EQUAL
61680: IFTRUE 61684
61682: GO 61740
61684: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61685: LD_ADDR_VAR 0 9
61689: PUSH
61690: LD_VAR 0 47
61694: PUSH
61695: LD_VAR 0 48
61699: PUSH
61700: LD_VAR 0 49
61704: PUSH
61705: LD_VAR 0 50
61709: PUSH
61710: LD_VAR 0 51
61714: PUSH
61715: LD_VAR 0 52
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: PUSH
61728: LD_VAR 0 4
61732: PUSH
61733: LD_INT 1
61735: PLUS
61736: ARRAY
61737: ST_TO_ADDR
61738: GO 61929
61740: LD_INT 4
61742: DOUBLE
61743: EQUAL
61744: IFTRUE 61766
61746: LD_INT 5
61748: DOUBLE
61749: EQUAL
61750: IFTRUE 61766
61752: LD_INT 34
61754: DOUBLE
61755: EQUAL
61756: IFTRUE 61766
61758: LD_INT 37
61760: DOUBLE
61761: EQUAL
61762: IFTRUE 61766
61764: GO 61822
61766: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61767: LD_ADDR_VAR 0 9
61771: PUSH
61772: LD_VAR 0 53
61776: PUSH
61777: LD_VAR 0 54
61781: PUSH
61782: LD_VAR 0 55
61786: PUSH
61787: LD_VAR 0 56
61791: PUSH
61792: LD_VAR 0 57
61796: PUSH
61797: LD_VAR 0 58
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: PUSH
61810: LD_VAR 0 4
61814: PUSH
61815: LD_INT 1
61817: PLUS
61818: ARRAY
61819: ST_TO_ADDR
61820: GO 61929
61822: LD_INT 31
61824: DOUBLE
61825: EQUAL
61826: IFTRUE 61872
61828: LD_INT 32
61830: DOUBLE
61831: EQUAL
61832: IFTRUE 61872
61834: LD_INT 33
61836: DOUBLE
61837: EQUAL
61838: IFTRUE 61872
61840: LD_INT 27
61842: DOUBLE
61843: EQUAL
61844: IFTRUE 61872
61846: LD_INT 26
61848: DOUBLE
61849: EQUAL
61850: IFTRUE 61872
61852: LD_INT 28
61854: DOUBLE
61855: EQUAL
61856: IFTRUE 61872
61858: LD_INT 29
61860: DOUBLE
61861: EQUAL
61862: IFTRUE 61872
61864: LD_INT 30
61866: DOUBLE
61867: EQUAL
61868: IFTRUE 61872
61870: GO 61928
61872: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61873: LD_ADDR_VAR 0 9
61877: PUSH
61878: LD_VAR 0 59
61882: PUSH
61883: LD_VAR 0 60
61887: PUSH
61888: LD_VAR 0 61
61892: PUSH
61893: LD_VAR 0 62
61897: PUSH
61898: LD_VAR 0 63
61902: PUSH
61903: LD_VAR 0 64
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: PUSH
61916: LD_VAR 0 4
61920: PUSH
61921: LD_INT 1
61923: PLUS
61924: ARRAY
61925: ST_TO_ADDR
61926: GO 61929
61928: POP
// temp_list2 = [ ] ;
61929: LD_ADDR_VAR 0 10
61933: PUSH
61934: EMPTY
61935: ST_TO_ADDR
// for i in temp_list do
61936: LD_ADDR_VAR 0 8
61940: PUSH
61941: LD_VAR 0 9
61945: PUSH
61946: FOR_IN
61947: IFFALSE 61999
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61949: LD_ADDR_VAR 0 10
61953: PUSH
61954: LD_VAR 0 10
61958: PUSH
61959: LD_VAR 0 8
61963: PUSH
61964: LD_INT 1
61966: ARRAY
61967: PUSH
61968: LD_VAR 0 2
61972: PLUS
61973: PUSH
61974: LD_VAR 0 8
61978: PUSH
61979: LD_INT 2
61981: ARRAY
61982: PUSH
61983: LD_VAR 0 3
61987: PLUS
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: EMPTY
61994: LIST
61995: ADD
61996: ST_TO_ADDR
61997: GO 61946
61999: POP
62000: POP
// result = temp_list2 ;
62001: LD_ADDR_VAR 0 7
62005: PUSH
62006: LD_VAR 0 10
62010: ST_TO_ADDR
// end ;
62011: LD_VAR 0 7
62015: RET
// export function EnemyInRange ( unit , dist ) ; begin
62016: LD_INT 0
62018: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62019: LD_ADDR_VAR 0 3
62023: PUSH
62024: LD_VAR 0 1
62028: PPUSH
62029: CALL_OW 255
62033: PPUSH
62034: LD_VAR 0 1
62038: PPUSH
62039: CALL_OW 250
62043: PPUSH
62044: LD_VAR 0 1
62048: PPUSH
62049: CALL_OW 251
62053: PPUSH
62054: LD_VAR 0 2
62058: PPUSH
62059: CALL 35418 0 4
62063: PUSH
62064: LD_INT 4
62066: ARRAY
62067: ST_TO_ADDR
// end ;
62068: LD_VAR 0 3
62072: RET
// export function PlayerSeeMe ( unit ) ; begin
62073: LD_INT 0
62075: PPUSH
// result := See ( your_side , unit ) ;
62076: LD_ADDR_VAR 0 2
62080: PUSH
62081: LD_OWVAR 2
62085: PPUSH
62086: LD_VAR 0 1
62090: PPUSH
62091: CALL_OW 292
62095: ST_TO_ADDR
// end ;
62096: LD_VAR 0 2
62100: RET
// export function ReverseDir ( unit ) ; begin
62101: LD_INT 0
62103: PPUSH
// if not unit then
62104: LD_VAR 0 1
62108: NOT
62109: IFFALSE 62113
// exit ;
62111: GO 62136
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62113: LD_ADDR_VAR 0 2
62117: PUSH
62118: LD_VAR 0 1
62122: PPUSH
62123: CALL_OW 254
62127: PUSH
62128: LD_INT 3
62130: PLUS
62131: PUSH
62132: LD_INT 6
62134: MOD
62135: ST_TO_ADDR
// end ;
62136: LD_VAR 0 2
62140: RET
// export function ReverseArray ( array ) ; var i ; begin
62141: LD_INT 0
62143: PPUSH
62144: PPUSH
// if not array then
62145: LD_VAR 0 1
62149: NOT
62150: IFFALSE 62154
// exit ;
62152: GO 62209
// result := [ ] ;
62154: LD_ADDR_VAR 0 2
62158: PUSH
62159: EMPTY
62160: ST_TO_ADDR
// for i := array downto 1 do
62161: LD_ADDR_VAR 0 3
62165: PUSH
62166: DOUBLE
62167: LD_VAR 0 1
62171: INC
62172: ST_TO_ADDR
62173: LD_INT 1
62175: PUSH
62176: FOR_DOWNTO
62177: IFFALSE 62207
// result := Join ( result , array [ i ] ) ;
62179: LD_ADDR_VAR 0 2
62183: PUSH
62184: LD_VAR 0 2
62188: PPUSH
62189: LD_VAR 0 1
62193: PUSH
62194: LD_VAR 0 3
62198: ARRAY
62199: PPUSH
62200: CALL 66852 0 2
62204: ST_TO_ADDR
62205: GO 62176
62207: POP
62208: POP
// end ;
62209: LD_VAR 0 2
62213: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62214: LD_INT 0
62216: PPUSH
62217: PPUSH
62218: PPUSH
62219: PPUSH
62220: PPUSH
62221: PPUSH
// if not unit or not hexes then
62222: LD_VAR 0 1
62226: NOT
62227: PUSH
62228: LD_VAR 0 2
62232: NOT
62233: OR
62234: IFFALSE 62238
// exit ;
62236: GO 62361
// dist := 9999 ;
62238: LD_ADDR_VAR 0 5
62242: PUSH
62243: LD_INT 9999
62245: ST_TO_ADDR
// for i = 1 to hexes do
62246: LD_ADDR_VAR 0 4
62250: PUSH
62251: DOUBLE
62252: LD_INT 1
62254: DEC
62255: ST_TO_ADDR
62256: LD_VAR 0 2
62260: PUSH
62261: FOR_TO
62262: IFFALSE 62349
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62264: LD_ADDR_VAR 0 6
62268: PUSH
62269: LD_VAR 0 1
62273: PPUSH
62274: LD_VAR 0 2
62278: PUSH
62279: LD_VAR 0 4
62283: ARRAY
62284: PUSH
62285: LD_INT 1
62287: ARRAY
62288: PPUSH
62289: LD_VAR 0 2
62293: PUSH
62294: LD_VAR 0 4
62298: ARRAY
62299: PUSH
62300: LD_INT 2
62302: ARRAY
62303: PPUSH
62304: CALL_OW 297
62308: ST_TO_ADDR
// if tdist < dist then
62309: LD_VAR 0 6
62313: PUSH
62314: LD_VAR 0 5
62318: LESS
62319: IFFALSE 62347
// begin hex := hexes [ i ] ;
62321: LD_ADDR_VAR 0 8
62325: PUSH
62326: LD_VAR 0 2
62330: PUSH
62331: LD_VAR 0 4
62335: ARRAY
62336: ST_TO_ADDR
// dist := tdist ;
62337: LD_ADDR_VAR 0 5
62341: PUSH
62342: LD_VAR 0 6
62346: ST_TO_ADDR
// end ; end ;
62347: GO 62261
62349: POP
62350: POP
// result := hex ;
62351: LD_ADDR_VAR 0 3
62355: PUSH
62356: LD_VAR 0 8
62360: ST_TO_ADDR
// end ;
62361: LD_VAR 0 3
62365: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62366: LD_INT 0
62368: PPUSH
62369: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62370: LD_VAR 0 1
62374: NOT
62375: PUSH
62376: LD_VAR 0 1
62380: PUSH
62381: LD_INT 21
62383: PUSH
62384: LD_INT 2
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 23
62393: PUSH
62394: LD_INT 2
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PPUSH
62405: CALL_OW 69
62409: IN
62410: NOT
62411: OR
62412: IFFALSE 62416
// exit ;
62414: GO 62463
// for i = 1 to 3 do
62416: LD_ADDR_VAR 0 3
62420: PUSH
62421: DOUBLE
62422: LD_INT 1
62424: DEC
62425: ST_TO_ADDR
62426: LD_INT 3
62428: PUSH
62429: FOR_TO
62430: IFFALSE 62461
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62432: LD_VAR 0 1
62436: PPUSH
62437: CALL_OW 250
62441: PPUSH
62442: LD_VAR 0 1
62446: PPUSH
62447: CALL_OW 251
62451: PPUSH
62452: LD_INT 1
62454: PPUSH
62455: CALL_OW 453
62459: GO 62429
62461: POP
62462: POP
// end ;
62463: LD_VAR 0 2
62467: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62468: LD_INT 0
62470: PPUSH
62471: PPUSH
62472: PPUSH
62473: PPUSH
62474: PPUSH
62475: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62476: LD_VAR 0 1
62480: NOT
62481: PUSH
62482: LD_VAR 0 2
62486: NOT
62487: OR
62488: PUSH
62489: LD_VAR 0 1
62493: PPUSH
62494: CALL_OW 314
62498: OR
62499: IFFALSE 62503
// exit ;
62501: GO 62970
// if GetLives ( i ) < 250 then
62503: LD_VAR 0 4
62507: PPUSH
62508: CALL_OW 256
62512: PUSH
62513: LD_INT 250
62515: LESS
62516: IFFALSE 62529
// begin ComAutodestruct ( i ) ;
62518: LD_VAR 0 4
62522: PPUSH
62523: CALL 62366 0 1
// exit ;
62527: GO 62970
// end ; x := GetX ( enemy_unit ) ;
62529: LD_ADDR_VAR 0 7
62533: PUSH
62534: LD_VAR 0 2
62538: PPUSH
62539: CALL_OW 250
62543: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62544: LD_ADDR_VAR 0 8
62548: PUSH
62549: LD_VAR 0 2
62553: PPUSH
62554: CALL_OW 251
62558: ST_TO_ADDR
// if not x or not y then
62559: LD_VAR 0 7
62563: NOT
62564: PUSH
62565: LD_VAR 0 8
62569: NOT
62570: OR
62571: IFFALSE 62575
// exit ;
62573: GO 62970
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62575: LD_ADDR_VAR 0 6
62579: PUSH
62580: LD_VAR 0 7
62584: PPUSH
62585: LD_INT 0
62587: PPUSH
62588: LD_INT 4
62590: PPUSH
62591: CALL_OW 272
62595: PUSH
62596: LD_VAR 0 8
62600: PPUSH
62601: LD_INT 0
62603: PPUSH
62604: LD_INT 4
62606: PPUSH
62607: CALL_OW 273
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_VAR 0 7
62620: PPUSH
62621: LD_INT 1
62623: PPUSH
62624: LD_INT 4
62626: PPUSH
62627: CALL_OW 272
62631: PUSH
62632: LD_VAR 0 8
62636: PPUSH
62637: LD_INT 1
62639: PPUSH
62640: LD_INT 4
62642: PPUSH
62643: CALL_OW 273
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_VAR 0 7
62656: PPUSH
62657: LD_INT 2
62659: PPUSH
62660: LD_INT 4
62662: PPUSH
62663: CALL_OW 272
62667: PUSH
62668: LD_VAR 0 8
62672: PPUSH
62673: LD_INT 2
62675: PPUSH
62676: LD_INT 4
62678: PPUSH
62679: CALL_OW 273
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_VAR 0 7
62692: PPUSH
62693: LD_INT 3
62695: PPUSH
62696: LD_INT 4
62698: PPUSH
62699: CALL_OW 272
62703: PUSH
62704: LD_VAR 0 8
62708: PPUSH
62709: LD_INT 3
62711: PPUSH
62712: LD_INT 4
62714: PPUSH
62715: CALL_OW 273
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_VAR 0 7
62728: PPUSH
62729: LD_INT 4
62731: PPUSH
62732: LD_INT 4
62734: PPUSH
62735: CALL_OW 272
62739: PUSH
62740: LD_VAR 0 8
62744: PPUSH
62745: LD_INT 4
62747: PPUSH
62748: LD_INT 4
62750: PPUSH
62751: CALL_OW 273
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_VAR 0 7
62764: PPUSH
62765: LD_INT 5
62767: PPUSH
62768: LD_INT 4
62770: PPUSH
62771: CALL_OW 272
62775: PUSH
62776: LD_VAR 0 8
62780: PPUSH
62781: LD_INT 5
62783: PPUSH
62784: LD_INT 4
62786: PPUSH
62787: CALL_OW 273
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: ST_TO_ADDR
// for i = tmp downto 1 do
62804: LD_ADDR_VAR 0 4
62808: PUSH
62809: DOUBLE
62810: LD_VAR 0 6
62814: INC
62815: ST_TO_ADDR
62816: LD_INT 1
62818: PUSH
62819: FOR_DOWNTO
62820: IFFALSE 62921
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62822: LD_VAR 0 6
62826: PUSH
62827: LD_VAR 0 4
62831: ARRAY
62832: PUSH
62833: LD_INT 1
62835: ARRAY
62836: PPUSH
62837: LD_VAR 0 6
62841: PUSH
62842: LD_VAR 0 4
62846: ARRAY
62847: PUSH
62848: LD_INT 2
62850: ARRAY
62851: PPUSH
62852: CALL_OW 488
62856: NOT
62857: PUSH
62858: LD_VAR 0 6
62862: PUSH
62863: LD_VAR 0 4
62867: ARRAY
62868: PUSH
62869: LD_INT 1
62871: ARRAY
62872: PPUSH
62873: LD_VAR 0 6
62877: PUSH
62878: LD_VAR 0 4
62882: ARRAY
62883: PUSH
62884: LD_INT 2
62886: ARRAY
62887: PPUSH
62888: CALL_OW 428
62892: PUSH
62893: LD_INT 0
62895: NONEQUAL
62896: OR
62897: IFFALSE 62919
// tmp := Delete ( tmp , i ) ;
62899: LD_ADDR_VAR 0 6
62903: PUSH
62904: LD_VAR 0 6
62908: PPUSH
62909: LD_VAR 0 4
62913: PPUSH
62914: CALL_OW 3
62918: ST_TO_ADDR
62919: GO 62819
62921: POP
62922: POP
// j := GetClosestHex ( unit , tmp ) ;
62923: LD_ADDR_VAR 0 5
62927: PUSH
62928: LD_VAR 0 1
62932: PPUSH
62933: LD_VAR 0 6
62937: PPUSH
62938: CALL 62214 0 2
62942: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62943: LD_VAR 0 1
62947: PPUSH
62948: LD_VAR 0 5
62952: PUSH
62953: LD_INT 1
62955: ARRAY
62956: PPUSH
62957: LD_VAR 0 5
62961: PUSH
62962: LD_INT 2
62964: ARRAY
62965: PPUSH
62966: CALL_OW 111
// end ;
62970: LD_VAR 0 3
62974: RET
// export function PrepareApemanSoldier ( ) ; begin
62975: LD_INT 0
62977: PPUSH
// uc_nation := 0 ;
62978: LD_ADDR_OWVAR 21
62982: PUSH
62983: LD_INT 0
62985: ST_TO_ADDR
// hc_sex := sex_male ;
62986: LD_ADDR_OWVAR 27
62990: PUSH
62991: LD_INT 1
62993: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62994: LD_ADDR_OWVAR 28
62998: PUSH
62999: LD_INT 15
63001: ST_TO_ADDR
// hc_gallery :=  ;
63002: LD_ADDR_OWVAR 33
63006: PUSH
63007: LD_STRING 
63009: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63010: LD_ADDR_OWVAR 31
63014: PUSH
63015: LD_INT 0
63017: PPUSH
63018: LD_INT 3
63020: PPUSH
63021: CALL_OW 12
63025: PUSH
63026: LD_INT 0
63028: PPUSH
63029: LD_INT 3
63031: PPUSH
63032: CALL_OW 12
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: ST_TO_ADDR
// end ;
63049: LD_VAR 0 1
63053: RET
// export function PrepareApemanEngineer ( ) ; begin
63054: LD_INT 0
63056: PPUSH
// uc_nation := 0 ;
63057: LD_ADDR_OWVAR 21
63061: PUSH
63062: LD_INT 0
63064: ST_TO_ADDR
// hc_sex := sex_male ;
63065: LD_ADDR_OWVAR 27
63069: PUSH
63070: LD_INT 1
63072: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63073: LD_ADDR_OWVAR 28
63077: PUSH
63078: LD_INT 16
63080: ST_TO_ADDR
// hc_gallery :=  ;
63081: LD_ADDR_OWVAR 33
63085: PUSH
63086: LD_STRING 
63088: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63089: LD_ADDR_OWVAR 31
63093: PUSH
63094: LD_INT 0
63096: PPUSH
63097: LD_INT 3
63099: PPUSH
63100: CALL_OW 12
63104: PUSH
63105: LD_INT 0
63107: PPUSH
63108: LD_INT 3
63110: PPUSH
63111: CALL_OW 12
63115: PUSH
63116: LD_INT 0
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: ST_TO_ADDR
// end ;
63128: LD_VAR 0 1
63132: RET
// export function PrepareApeman ( agressivity ) ; begin
63133: LD_INT 0
63135: PPUSH
// uc_side := 0 ;
63136: LD_ADDR_OWVAR 20
63140: PUSH
63141: LD_INT 0
63143: ST_TO_ADDR
// uc_nation := 0 ;
63144: LD_ADDR_OWVAR 21
63148: PUSH
63149: LD_INT 0
63151: ST_TO_ADDR
// hc_sex := sex_male ;
63152: LD_ADDR_OWVAR 27
63156: PUSH
63157: LD_INT 1
63159: ST_TO_ADDR
// hc_class := class_apeman ;
63160: LD_ADDR_OWVAR 28
63164: PUSH
63165: LD_INT 12
63167: ST_TO_ADDR
// hc_gallery :=  ;
63168: LD_ADDR_OWVAR 33
63172: PUSH
63173: LD_STRING 
63175: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63176: LD_ADDR_OWVAR 35
63180: PUSH
63181: LD_VAR 0 1
63185: NEG
63186: PPUSH
63187: LD_VAR 0 1
63191: PPUSH
63192: CALL_OW 12
63196: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63197: LD_ADDR_OWVAR 31
63201: PUSH
63202: LD_INT 0
63204: PPUSH
63205: LD_INT 3
63207: PPUSH
63208: CALL_OW 12
63212: PUSH
63213: LD_INT 0
63215: PPUSH
63216: LD_INT 3
63218: PPUSH
63219: CALL_OW 12
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: ST_TO_ADDR
// end ;
63236: LD_VAR 0 2
63240: RET
// export function PrepareTiger ( agressivity ) ; begin
63241: LD_INT 0
63243: PPUSH
// uc_side := 0 ;
63244: LD_ADDR_OWVAR 20
63248: PUSH
63249: LD_INT 0
63251: ST_TO_ADDR
// uc_nation := 0 ;
63252: LD_ADDR_OWVAR 21
63256: PUSH
63257: LD_INT 0
63259: ST_TO_ADDR
// hc_class := class_tiger ;
63260: LD_ADDR_OWVAR 28
63264: PUSH
63265: LD_INT 14
63267: ST_TO_ADDR
// hc_gallery :=  ;
63268: LD_ADDR_OWVAR 33
63272: PUSH
63273: LD_STRING 
63275: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63276: LD_ADDR_OWVAR 35
63280: PUSH
63281: LD_VAR 0 1
63285: NEG
63286: PPUSH
63287: LD_VAR 0 1
63291: PPUSH
63292: CALL_OW 12
63296: ST_TO_ADDR
// end ;
63297: LD_VAR 0 2
63301: RET
// export function PrepareEnchidna ( ) ; begin
63302: LD_INT 0
63304: PPUSH
// uc_side := 0 ;
63305: LD_ADDR_OWVAR 20
63309: PUSH
63310: LD_INT 0
63312: ST_TO_ADDR
// uc_nation := 0 ;
63313: LD_ADDR_OWVAR 21
63317: PUSH
63318: LD_INT 0
63320: ST_TO_ADDR
// hc_class := class_baggie ;
63321: LD_ADDR_OWVAR 28
63325: PUSH
63326: LD_INT 13
63328: ST_TO_ADDR
// hc_gallery :=  ;
63329: LD_ADDR_OWVAR 33
63333: PUSH
63334: LD_STRING 
63336: ST_TO_ADDR
// end ;
63337: LD_VAR 0 1
63341: RET
// export function PrepareFrog ( ) ; begin
63342: LD_INT 0
63344: PPUSH
// uc_side := 0 ;
63345: LD_ADDR_OWVAR 20
63349: PUSH
63350: LD_INT 0
63352: ST_TO_ADDR
// uc_nation := 0 ;
63353: LD_ADDR_OWVAR 21
63357: PUSH
63358: LD_INT 0
63360: ST_TO_ADDR
// hc_class := class_frog ;
63361: LD_ADDR_OWVAR 28
63365: PUSH
63366: LD_INT 19
63368: ST_TO_ADDR
// hc_gallery :=  ;
63369: LD_ADDR_OWVAR 33
63373: PUSH
63374: LD_STRING 
63376: ST_TO_ADDR
// end ;
63377: LD_VAR 0 1
63381: RET
// export function PrepareFish ( ) ; begin
63382: LD_INT 0
63384: PPUSH
// uc_side := 0 ;
63385: LD_ADDR_OWVAR 20
63389: PUSH
63390: LD_INT 0
63392: ST_TO_ADDR
// uc_nation := 0 ;
63393: LD_ADDR_OWVAR 21
63397: PUSH
63398: LD_INT 0
63400: ST_TO_ADDR
// hc_class := class_fish ;
63401: LD_ADDR_OWVAR 28
63405: PUSH
63406: LD_INT 20
63408: ST_TO_ADDR
// hc_gallery :=  ;
63409: LD_ADDR_OWVAR 33
63413: PUSH
63414: LD_STRING 
63416: ST_TO_ADDR
// end ;
63417: LD_VAR 0 1
63421: RET
// export function PrepareBird ( ) ; begin
63422: LD_INT 0
63424: PPUSH
// uc_side := 0 ;
63425: LD_ADDR_OWVAR 20
63429: PUSH
63430: LD_INT 0
63432: ST_TO_ADDR
// uc_nation := 0 ;
63433: LD_ADDR_OWVAR 21
63437: PUSH
63438: LD_INT 0
63440: ST_TO_ADDR
// hc_class := class_phororhacos ;
63441: LD_ADDR_OWVAR 28
63445: PUSH
63446: LD_INT 18
63448: ST_TO_ADDR
// hc_gallery :=  ;
63449: LD_ADDR_OWVAR 33
63453: PUSH
63454: LD_STRING 
63456: ST_TO_ADDR
// end ;
63457: LD_VAR 0 1
63461: RET
// export function PrepareHorse ( ) ; begin
63462: LD_INT 0
63464: PPUSH
// uc_side := 0 ;
63465: LD_ADDR_OWVAR 20
63469: PUSH
63470: LD_INT 0
63472: ST_TO_ADDR
// uc_nation := 0 ;
63473: LD_ADDR_OWVAR 21
63477: PUSH
63478: LD_INT 0
63480: ST_TO_ADDR
// hc_class := class_horse ;
63481: LD_ADDR_OWVAR 28
63485: PUSH
63486: LD_INT 21
63488: ST_TO_ADDR
// hc_gallery :=  ;
63489: LD_ADDR_OWVAR 33
63493: PUSH
63494: LD_STRING 
63496: ST_TO_ADDR
// end ;
63497: LD_VAR 0 1
63501: RET
// export function PrepareMastodont ( ) ; begin
63502: LD_INT 0
63504: PPUSH
// uc_side := 0 ;
63505: LD_ADDR_OWVAR 20
63509: PUSH
63510: LD_INT 0
63512: ST_TO_ADDR
// uc_nation := 0 ;
63513: LD_ADDR_OWVAR 21
63517: PUSH
63518: LD_INT 0
63520: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63521: LD_ADDR_OWVAR 37
63525: PUSH
63526: LD_INT 31
63528: ST_TO_ADDR
// vc_control := control_rider ;
63529: LD_ADDR_OWVAR 38
63533: PUSH
63534: LD_INT 4
63536: ST_TO_ADDR
// end ;
63537: LD_VAR 0 1
63541: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63542: LD_INT 0
63544: PPUSH
63545: PPUSH
63546: PPUSH
// uc_side = 0 ;
63547: LD_ADDR_OWVAR 20
63551: PUSH
63552: LD_INT 0
63554: ST_TO_ADDR
// uc_nation = 0 ;
63555: LD_ADDR_OWVAR 21
63559: PUSH
63560: LD_INT 0
63562: ST_TO_ADDR
// InitHc_All ( ) ;
63563: CALL_OW 584
// InitVc ;
63567: CALL_OW 20
// if mastodonts then
63571: LD_VAR 0 6
63575: IFFALSE 63642
// for i = 1 to mastodonts do
63577: LD_ADDR_VAR 0 11
63581: PUSH
63582: DOUBLE
63583: LD_INT 1
63585: DEC
63586: ST_TO_ADDR
63587: LD_VAR 0 6
63591: PUSH
63592: FOR_TO
63593: IFFALSE 63640
// begin vc_chassis := 31 ;
63595: LD_ADDR_OWVAR 37
63599: PUSH
63600: LD_INT 31
63602: ST_TO_ADDR
// vc_control := control_rider ;
63603: LD_ADDR_OWVAR 38
63607: PUSH
63608: LD_INT 4
63610: ST_TO_ADDR
// animal := CreateVehicle ;
63611: LD_ADDR_VAR 0 12
63615: PUSH
63616: CALL_OW 45
63620: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63621: LD_VAR 0 12
63625: PPUSH
63626: LD_VAR 0 8
63630: PPUSH
63631: LD_INT 0
63633: PPUSH
63634: CALL 65770 0 3
// end ;
63638: GO 63592
63640: POP
63641: POP
// if horses then
63642: LD_VAR 0 5
63646: IFFALSE 63713
// for i = 1 to horses do
63648: LD_ADDR_VAR 0 11
63652: PUSH
63653: DOUBLE
63654: LD_INT 1
63656: DEC
63657: ST_TO_ADDR
63658: LD_VAR 0 5
63662: PUSH
63663: FOR_TO
63664: IFFALSE 63711
// begin hc_class := 21 ;
63666: LD_ADDR_OWVAR 28
63670: PUSH
63671: LD_INT 21
63673: ST_TO_ADDR
// hc_gallery :=  ;
63674: LD_ADDR_OWVAR 33
63678: PUSH
63679: LD_STRING 
63681: ST_TO_ADDR
// animal := CreateHuman ;
63682: LD_ADDR_VAR 0 12
63686: PUSH
63687: CALL_OW 44
63691: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63692: LD_VAR 0 12
63696: PPUSH
63697: LD_VAR 0 8
63701: PPUSH
63702: LD_INT 0
63704: PPUSH
63705: CALL 65770 0 3
// end ;
63709: GO 63663
63711: POP
63712: POP
// if birds then
63713: LD_VAR 0 1
63717: IFFALSE 63784
// for i = 1 to birds do
63719: LD_ADDR_VAR 0 11
63723: PUSH
63724: DOUBLE
63725: LD_INT 1
63727: DEC
63728: ST_TO_ADDR
63729: LD_VAR 0 1
63733: PUSH
63734: FOR_TO
63735: IFFALSE 63782
// begin hc_class = 18 ;
63737: LD_ADDR_OWVAR 28
63741: PUSH
63742: LD_INT 18
63744: ST_TO_ADDR
// hc_gallery =  ;
63745: LD_ADDR_OWVAR 33
63749: PUSH
63750: LD_STRING 
63752: ST_TO_ADDR
// animal := CreateHuman ;
63753: LD_ADDR_VAR 0 12
63757: PUSH
63758: CALL_OW 44
63762: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63763: LD_VAR 0 12
63767: PPUSH
63768: LD_VAR 0 8
63772: PPUSH
63773: LD_INT 0
63775: PPUSH
63776: CALL 65770 0 3
// end ;
63780: GO 63734
63782: POP
63783: POP
// if tigers then
63784: LD_VAR 0 2
63788: IFFALSE 63872
// for i = 1 to tigers do
63790: LD_ADDR_VAR 0 11
63794: PUSH
63795: DOUBLE
63796: LD_INT 1
63798: DEC
63799: ST_TO_ADDR
63800: LD_VAR 0 2
63804: PUSH
63805: FOR_TO
63806: IFFALSE 63870
// begin hc_class = class_tiger ;
63808: LD_ADDR_OWVAR 28
63812: PUSH
63813: LD_INT 14
63815: ST_TO_ADDR
// hc_gallery =  ;
63816: LD_ADDR_OWVAR 33
63820: PUSH
63821: LD_STRING 
63823: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63824: LD_ADDR_OWVAR 35
63828: PUSH
63829: LD_INT 7
63831: NEG
63832: PPUSH
63833: LD_INT 7
63835: PPUSH
63836: CALL_OW 12
63840: ST_TO_ADDR
// animal := CreateHuman ;
63841: LD_ADDR_VAR 0 12
63845: PUSH
63846: CALL_OW 44
63850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63851: LD_VAR 0 12
63855: PPUSH
63856: LD_VAR 0 8
63860: PPUSH
63861: LD_INT 0
63863: PPUSH
63864: CALL 65770 0 3
// end ;
63868: GO 63805
63870: POP
63871: POP
// if apemans then
63872: LD_VAR 0 3
63876: IFFALSE 63999
// for i = 1 to apemans do
63878: LD_ADDR_VAR 0 11
63882: PUSH
63883: DOUBLE
63884: LD_INT 1
63886: DEC
63887: ST_TO_ADDR
63888: LD_VAR 0 3
63892: PUSH
63893: FOR_TO
63894: IFFALSE 63997
// begin hc_class = class_apeman ;
63896: LD_ADDR_OWVAR 28
63900: PUSH
63901: LD_INT 12
63903: ST_TO_ADDR
// hc_gallery =  ;
63904: LD_ADDR_OWVAR 33
63908: PUSH
63909: LD_STRING 
63911: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63912: LD_ADDR_OWVAR 35
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PPUSH
63921: LD_INT 2
63923: PPUSH
63924: CALL_OW 12
63928: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63929: LD_ADDR_OWVAR 31
63933: PUSH
63934: LD_INT 1
63936: PPUSH
63937: LD_INT 3
63939: PPUSH
63940: CALL_OW 12
63944: PUSH
63945: LD_INT 1
63947: PPUSH
63948: LD_INT 3
63950: PPUSH
63951: CALL_OW 12
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: ST_TO_ADDR
// animal := CreateHuman ;
63968: LD_ADDR_VAR 0 12
63972: PUSH
63973: CALL_OW 44
63977: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63978: LD_VAR 0 12
63982: PPUSH
63983: LD_VAR 0 8
63987: PPUSH
63988: LD_INT 0
63990: PPUSH
63991: CALL 65770 0 3
// end ;
63995: GO 63893
63997: POP
63998: POP
// if enchidnas then
63999: LD_VAR 0 4
64003: IFFALSE 64070
// for i = 1 to enchidnas do
64005: LD_ADDR_VAR 0 11
64009: PUSH
64010: DOUBLE
64011: LD_INT 1
64013: DEC
64014: ST_TO_ADDR
64015: LD_VAR 0 4
64019: PUSH
64020: FOR_TO
64021: IFFALSE 64068
// begin hc_class = 13 ;
64023: LD_ADDR_OWVAR 28
64027: PUSH
64028: LD_INT 13
64030: ST_TO_ADDR
// hc_gallery =  ;
64031: LD_ADDR_OWVAR 33
64035: PUSH
64036: LD_STRING 
64038: ST_TO_ADDR
// animal := CreateHuman ;
64039: LD_ADDR_VAR 0 12
64043: PUSH
64044: CALL_OW 44
64048: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64049: LD_VAR 0 12
64053: PPUSH
64054: LD_VAR 0 8
64058: PPUSH
64059: LD_INT 0
64061: PPUSH
64062: CALL 65770 0 3
// end ;
64066: GO 64020
64068: POP
64069: POP
// if fishes then
64070: LD_VAR 0 7
64074: IFFALSE 64141
// for i = 1 to fishes do
64076: LD_ADDR_VAR 0 11
64080: PUSH
64081: DOUBLE
64082: LD_INT 1
64084: DEC
64085: ST_TO_ADDR
64086: LD_VAR 0 7
64090: PUSH
64091: FOR_TO
64092: IFFALSE 64139
// begin hc_class = 20 ;
64094: LD_ADDR_OWVAR 28
64098: PUSH
64099: LD_INT 20
64101: ST_TO_ADDR
// hc_gallery =  ;
64102: LD_ADDR_OWVAR 33
64106: PUSH
64107: LD_STRING 
64109: ST_TO_ADDR
// animal := CreateHuman ;
64110: LD_ADDR_VAR 0 12
64114: PUSH
64115: CALL_OW 44
64119: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64120: LD_VAR 0 12
64124: PPUSH
64125: LD_VAR 0 9
64129: PPUSH
64130: LD_INT 0
64132: PPUSH
64133: CALL 65770 0 3
// end ;
64137: GO 64091
64139: POP
64140: POP
// end ;
64141: LD_VAR 0 10
64145: RET
// export function WantHeal ( sci , unit ) ; begin
64146: LD_INT 0
64148: PPUSH
// if GetTaskList ( sci ) > 0 then
64149: LD_VAR 0 1
64153: PPUSH
64154: CALL_OW 437
64158: PUSH
64159: LD_INT 0
64161: GREATER
64162: IFFALSE 64232
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64164: LD_VAR 0 1
64168: PPUSH
64169: CALL_OW 437
64173: PUSH
64174: LD_INT 1
64176: ARRAY
64177: PUSH
64178: LD_INT 1
64180: ARRAY
64181: PUSH
64182: LD_STRING l
64184: EQUAL
64185: PUSH
64186: LD_VAR 0 1
64190: PPUSH
64191: CALL_OW 437
64195: PUSH
64196: LD_INT 1
64198: ARRAY
64199: PUSH
64200: LD_INT 4
64202: ARRAY
64203: PUSH
64204: LD_VAR 0 2
64208: EQUAL
64209: AND
64210: IFFALSE 64222
// result := true else
64212: LD_ADDR_VAR 0 3
64216: PUSH
64217: LD_INT 1
64219: ST_TO_ADDR
64220: GO 64230
// result := false ;
64222: LD_ADDR_VAR 0 3
64226: PUSH
64227: LD_INT 0
64229: ST_TO_ADDR
// end else
64230: GO 64240
// result := false ;
64232: LD_ADDR_VAR 0 3
64236: PUSH
64237: LD_INT 0
64239: ST_TO_ADDR
// end ;
64240: LD_VAR 0 3
64244: RET
// export function HealTarget ( sci ) ; begin
64245: LD_INT 0
64247: PPUSH
// if not sci then
64248: LD_VAR 0 1
64252: NOT
64253: IFFALSE 64257
// exit ;
64255: GO 64322
// result := 0 ;
64257: LD_ADDR_VAR 0 2
64261: PUSH
64262: LD_INT 0
64264: ST_TO_ADDR
// if GetTaskList ( sci ) then
64265: LD_VAR 0 1
64269: PPUSH
64270: CALL_OW 437
64274: IFFALSE 64322
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64276: LD_VAR 0 1
64280: PPUSH
64281: CALL_OW 437
64285: PUSH
64286: LD_INT 1
64288: ARRAY
64289: PUSH
64290: LD_INT 1
64292: ARRAY
64293: PUSH
64294: LD_STRING l
64296: EQUAL
64297: IFFALSE 64322
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64299: LD_ADDR_VAR 0 2
64303: PUSH
64304: LD_VAR 0 1
64308: PPUSH
64309: CALL_OW 437
64313: PUSH
64314: LD_INT 1
64316: ARRAY
64317: PUSH
64318: LD_INT 4
64320: ARRAY
64321: ST_TO_ADDR
// end ;
64322: LD_VAR 0 2
64326: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64327: LD_INT 0
64329: PPUSH
64330: PPUSH
64331: PPUSH
64332: PPUSH
// if not base_units then
64333: LD_VAR 0 1
64337: NOT
64338: IFFALSE 64342
// exit ;
64340: GO 64429
// result := false ;
64342: LD_ADDR_VAR 0 2
64346: PUSH
64347: LD_INT 0
64349: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64350: LD_ADDR_VAR 0 5
64354: PUSH
64355: LD_VAR 0 1
64359: PPUSH
64360: LD_INT 21
64362: PUSH
64363: LD_INT 3
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PPUSH
64370: CALL_OW 72
64374: ST_TO_ADDR
// if not tmp then
64375: LD_VAR 0 5
64379: NOT
64380: IFFALSE 64384
// exit ;
64382: GO 64429
// for i in tmp do
64384: LD_ADDR_VAR 0 3
64388: PUSH
64389: LD_VAR 0 5
64393: PUSH
64394: FOR_IN
64395: IFFALSE 64427
// begin result := EnemyInRange ( i , 22 ) ;
64397: LD_ADDR_VAR 0 2
64401: PUSH
64402: LD_VAR 0 3
64406: PPUSH
64407: LD_INT 22
64409: PPUSH
64410: CALL 62016 0 2
64414: ST_TO_ADDR
// if result then
64415: LD_VAR 0 2
64419: IFFALSE 64425
// exit ;
64421: POP
64422: POP
64423: GO 64429
// end ;
64425: GO 64394
64427: POP
64428: POP
// end ;
64429: LD_VAR 0 2
64433: RET
// export function FilterByTag ( units , tag ) ; begin
64434: LD_INT 0
64436: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64437: LD_ADDR_VAR 0 3
64441: PUSH
64442: LD_VAR 0 1
64446: PPUSH
64447: LD_INT 120
64449: PUSH
64450: LD_VAR 0 2
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PPUSH
64459: CALL_OW 72
64463: ST_TO_ADDR
// end ;
64464: LD_VAR 0 3
64468: RET
// export function IsDriver ( un ) ; begin
64469: LD_INT 0
64471: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64472: LD_ADDR_VAR 0 2
64476: PUSH
64477: LD_VAR 0 1
64481: PUSH
64482: LD_INT 55
64484: PUSH
64485: EMPTY
64486: LIST
64487: PPUSH
64488: CALL_OW 69
64492: IN
64493: ST_TO_ADDR
// end ;
64494: LD_VAR 0 2
64498: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64499: LD_INT 0
64501: PPUSH
64502: PPUSH
// list := [ ] ;
64503: LD_ADDR_VAR 0 5
64507: PUSH
64508: EMPTY
64509: ST_TO_ADDR
// case d of 0 :
64510: LD_VAR 0 3
64514: PUSH
64515: LD_INT 0
64517: DOUBLE
64518: EQUAL
64519: IFTRUE 64523
64521: GO 64656
64523: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64524: LD_ADDR_VAR 0 5
64528: PUSH
64529: LD_VAR 0 1
64533: PUSH
64534: LD_INT 4
64536: MINUS
64537: PUSH
64538: LD_VAR 0 2
64542: PUSH
64543: LD_INT 4
64545: MINUS
64546: PUSH
64547: LD_INT 2
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: LIST
64554: PUSH
64555: LD_VAR 0 1
64559: PUSH
64560: LD_INT 3
64562: MINUS
64563: PUSH
64564: LD_VAR 0 2
64568: PUSH
64569: LD_INT 1
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: LIST
64576: PUSH
64577: LD_VAR 0 1
64581: PUSH
64582: LD_INT 4
64584: PLUS
64585: PUSH
64586: LD_VAR 0 2
64590: PUSH
64591: LD_INT 4
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: LIST
64598: PUSH
64599: LD_VAR 0 1
64603: PUSH
64604: LD_INT 3
64606: PLUS
64607: PUSH
64608: LD_VAR 0 2
64612: PUSH
64613: LD_INT 3
64615: PLUS
64616: PUSH
64617: LD_INT 5
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: LIST
64624: PUSH
64625: LD_VAR 0 1
64629: PUSH
64630: LD_VAR 0 2
64634: PUSH
64635: LD_INT 4
64637: PLUS
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: LIST
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: ST_TO_ADDR
// end ; 1 :
64654: GO 65354
64656: LD_INT 1
64658: DOUBLE
64659: EQUAL
64660: IFTRUE 64664
64662: GO 64797
64664: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64665: LD_ADDR_VAR 0 5
64669: PUSH
64670: LD_VAR 0 1
64674: PUSH
64675: LD_VAR 0 2
64679: PUSH
64680: LD_INT 4
64682: MINUS
64683: PUSH
64684: LD_INT 3
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: LIST
64691: PUSH
64692: LD_VAR 0 1
64696: PUSH
64697: LD_INT 3
64699: MINUS
64700: PUSH
64701: LD_VAR 0 2
64705: PUSH
64706: LD_INT 3
64708: MINUS
64709: PUSH
64710: LD_INT 2
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: LIST
64717: PUSH
64718: LD_VAR 0 1
64722: PUSH
64723: LD_INT 4
64725: MINUS
64726: PUSH
64727: LD_VAR 0 2
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: LIST
64739: PUSH
64740: LD_VAR 0 1
64744: PUSH
64745: LD_VAR 0 2
64749: PUSH
64750: LD_INT 3
64752: PLUS
64753: PUSH
64754: LD_INT 0
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: LIST
64761: PUSH
64762: LD_VAR 0 1
64766: PUSH
64767: LD_INT 4
64769: PLUS
64770: PUSH
64771: LD_VAR 0 2
64775: PUSH
64776: LD_INT 4
64778: PLUS
64779: PUSH
64780: LD_INT 5
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: LIST
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: ST_TO_ADDR
// end ; 2 :
64795: GO 65354
64797: LD_INT 2
64799: DOUBLE
64800: EQUAL
64801: IFTRUE 64805
64803: GO 64934
64805: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64806: LD_ADDR_VAR 0 5
64810: PUSH
64811: LD_VAR 0 1
64815: PUSH
64816: LD_VAR 0 2
64820: PUSH
64821: LD_INT 3
64823: MINUS
64824: PUSH
64825: LD_INT 3
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: LIST
64832: PUSH
64833: LD_VAR 0 1
64837: PUSH
64838: LD_INT 4
64840: PLUS
64841: PUSH
64842: LD_VAR 0 2
64846: PUSH
64847: LD_INT 4
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: LIST
64854: PUSH
64855: LD_VAR 0 1
64859: PUSH
64860: LD_VAR 0 2
64864: PUSH
64865: LD_INT 4
64867: PLUS
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: LIST
64876: PUSH
64877: LD_VAR 0 1
64881: PUSH
64882: LD_INT 3
64884: MINUS
64885: PUSH
64886: LD_VAR 0 2
64890: PUSH
64891: LD_INT 1
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: LIST
64898: PUSH
64899: LD_VAR 0 1
64903: PUSH
64904: LD_INT 4
64906: MINUS
64907: PUSH
64908: LD_VAR 0 2
64912: PUSH
64913: LD_INT 4
64915: MINUS
64916: PUSH
64917: LD_INT 2
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: ST_TO_ADDR
// end ; 3 :
64932: GO 65354
64934: LD_INT 3
64936: DOUBLE
64937: EQUAL
64938: IFTRUE 64942
64940: GO 65075
64942: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64943: LD_ADDR_VAR 0 5
64947: PUSH
64948: LD_VAR 0 1
64952: PUSH
64953: LD_INT 3
64955: PLUS
64956: PUSH
64957: LD_VAR 0 2
64961: PUSH
64962: LD_INT 4
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: LIST
64969: PUSH
64970: LD_VAR 0 1
64974: PUSH
64975: LD_INT 4
64977: PLUS
64978: PUSH
64979: LD_VAR 0 2
64983: PUSH
64984: LD_INT 4
64986: PLUS
64987: PUSH
64988: LD_INT 5
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: LIST
64995: PUSH
64996: LD_VAR 0 1
65000: PUSH
65001: LD_INT 4
65003: MINUS
65004: PUSH
65005: LD_VAR 0 2
65009: PUSH
65010: LD_INT 1
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: LIST
65017: PUSH
65018: LD_VAR 0 1
65022: PUSH
65023: LD_VAR 0 2
65027: PUSH
65028: LD_INT 4
65030: MINUS
65031: PUSH
65032: LD_INT 3
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: LIST
65039: PUSH
65040: LD_VAR 0 1
65044: PUSH
65045: LD_INT 3
65047: MINUS
65048: PUSH
65049: LD_VAR 0 2
65053: PUSH
65054: LD_INT 3
65056: MINUS
65057: PUSH
65058: LD_INT 2
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: LIST
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: ST_TO_ADDR
// end ; 4 :
65073: GO 65354
65075: LD_INT 4
65077: DOUBLE
65078: EQUAL
65079: IFTRUE 65083
65081: GO 65216
65083: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65084: LD_ADDR_VAR 0 5
65088: PUSH
65089: LD_VAR 0 1
65093: PUSH
65094: LD_VAR 0 2
65098: PUSH
65099: LD_INT 4
65101: PLUS
65102: PUSH
65103: LD_INT 0
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: LIST
65110: PUSH
65111: LD_VAR 0 1
65115: PUSH
65116: LD_INT 3
65118: PLUS
65119: PUSH
65120: LD_VAR 0 2
65124: PUSH
65125: LD_INT 3
65127: PLUS
65128: PUSH
65129: LD_INT 5
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: PUSH
65137: LD_VAR 0 1
65141: PUSH
65142: LD_INT 4
65144: PLUS
65145: PUSH
65146: LD_VAR 0 2
65150: PUSH
65151: LD_INT 4
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: LIST
65158: PUSH
65159: LD_VAR 0 1
65163: PUSH
65164: LD_VAR 0 2
65168: PUSH
65169: LD_INT 3
65171: MINUS
65172: PUSH
65173: LD_INT 3
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: LIST
65180: PUSH
65181: LD_VAR 0 1
65185: PUSH
65186: LD_INT 4
65188: MINUS
65189: PUSH
65190: LD_VAR 0 2
65194: PUSH
65195: LD_INT 4
65197: MINUS
65198: PUSH
65199: LD_INT 2
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: LIST
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: ST_TO_ADDR
// end ; 5 :
65214: GO 65354
65216: LD_INT 5
65218: DOUBLE
65219: EQUAL
65220: IFTRUE 65224
65222: GO 65353
65224: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65225: LD_ADDR_VAR 0 5
65229: PUSH
65230: LD_VAR 0 1
65234: PUSH
65235: LD_INT 4
65237: MINUS
65238: PUSH
65239: LD_VAR 0 2
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: LIST
65251: PUSH
65252: LD_VAR 0 1
65256: PUSH
65257: LD_VAR 0 2
65261: PUSH
65262: LD_INT 4
65264: MINUS
65265: PUSH
65266: LD_INT 3
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: LIST
65273: PUSH
65274: LD_VAR 0 1
65278: PUSH
65279: LD_INT 4
65281: PLUS
65282: PUSH
65283: LD_VAR 0 2
65287: PUSH
65288: LD_INT 4
65290: PLUS
65291: PUSH
65292: LD_INT 5
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: LIST
65299: PUSH
65300: LD_VAR 0 1
65304: PUSH
65305: LD_INT 3
65307: PLUS
65308: PUSH
65309: LD_VAR 0 2
65313: PUSH
65314: LD_INT 4
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: LIST
65321: PUSH
65322: LD_VAR 0 1
65326: PUSH
65327: LD_VAR 0 2
65331: PUSH
65332: LD_INT 3
65334: PLUS
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: ST_TO_ADDR
// end ; end ;
65351: GO 65354
65353: POP
// result := list ;
65354: LD_ADDR_VAR 0 4
65358: PUSH
65359: LD_VAR 0 5
65363: ST_TO_ADDR
// end ;
65364: LD_VAR 0 4
65368: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65369: LD_INT 0
65371: PPUSH
65372: PPUSH
65373: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65374: LD_VAR 0 1
65378: NOT
65379: PUSH
65380: LD_VAR 0 2
65384: PUSH
65385: LD_INT 1
65387: PUSH
65388: LD_INT 2
65390: PUSH
65391: LD_INT 3
65393: PUSH
65394: LD_INT 4
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: IN
65403: NOT
65404: OR
65405: IFFALSE 65409
// exit ;
65407: GO 65492
// tmp := [ ] ;
65409: LD_ADDR_VAR 0 5
65413: PUSH
65414: EMPTY
65415: ST_TO_ADDR
// for i in units do
65416: LD_ADDR_VAR 0 4
65420: PUSH
65421: LD_VAR 0 1
65425: PUSH
65426: FOR_IN
65427: IFFALSE 65461
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65429: LD_ADDR_VAR 0 5
65433: PUSH
65434: LD_VAR 0 5
65438: PPUSH
65439: LD_VAR 0 4
65443: PPUSH
65444: LD_VAR 0 2
65448: PPUSH
65449: CALL_OW 259
65453: PPUSH
65454: CALL 66852 0 2
65458: ST_TO_ADDR
65459: GO 65426
65461: POP
65462: POP
// if not tmp then
65463: LD_VAR 0 5
65467: NOT
65468: IFFALSE 65472
// exit ;
65470: GO 65492
// result := SortListByListDesc ( units , tmp ) ;
65472: LD_ADDR_VAR 0 3
65476: PUSH
65477: LD_VAR 0 1
65481: PPUSH
65482: LD_VAR 0 5
65486: PPUSH
65487: CALL_OW 77
65491: ST_TO_ADDR
// end ;
65492: LD_VAR 0 3
65496: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65497: LD_INT 0
65499: PPUSH
65500: PPUSH
65501: PPUSH
// result := false ;
65502: LD_ADDR_VAR 0 3
65506: PUSH
65507: LD_INT 0
65509: ST_TO_ADDR
// if not building then
65510: LD_VAR 0 2
65514: NOT
65515: IFFALSE 65519
// exit ;
65517: GO 65657
// x := GetX ( building ) ;
65519: LD_ADDR_VAR 0 4
65523: PUSH
65524: LD_VAR 0 2
65528: PPUSH
65529: CALL_OW 250
65533: ST_TO_ADDR
// y := GetY ( building ) ;
65534: LD_ADDR_VAR 0 5
65538: PUSH
65539: LD_VAR 0 2
65543: PPUSH
65544: CALL_OW 251
65548: ST_TO_ADDR
// if not x or not y then
65549: LD_VAR 0 4
65553: NOT
65554: PUSH
65555: LD_VAR 0 5
65559: NOT
65560: OR
65561: IFFALSE 65565
// exit ;
65563: GO 65657
// if GetTaskList ( unit ) then
65565: LD_VAR 0 1
65569: PPUSH
65570: CALL_OW 437
65574: IFFALSE 65657
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65576: LD_STRING e
65578: PUSH
65579: LD_VAR 0 1
65583: PPUSH
65584: CALL_OW 437
65588: PUSH
65589: LD_INT 1
65591: ARRAY
65592: PUSH
65593: LD_INT 1
65595: ARRAY
65596: EQUAL
65597: PUSH
65598: LD_VAR 0 4
65602: PUSH
65603: LD_VAR 0 1
65607: PPUSH
65608: CALL_OW 437
65612: PUSH
65613: LD_INT 1
65615: ARRAY
65616: PUSH
65617: LD_INT 2
65619: ARRAY
65620: EQUAL
65621: AND
65622: PUSH
65623: LD_VAR 0 5
65627: PUSH
65628: LD_VAR 0 1
65632: PPUSH
65633: CALL_OW 437
65637: PUSH
65638: LD_INT 1
65640: ARRAY
65641: PUSH
65642: LD_INT 3
65644: ARRAY
65645: EQUAL
65646: AND
65647: IFFALSE 65657
// result := true end ;
65649: LD_ADDR_VAR 0 3
65653: PUSH
65654: LD_INT 1
65656: ST_TO_ADDR
// end ;
65657: LD_VAR 0 3
65661: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65662: LD_INT 0
65664: PPUSH
// result := false ;
65665: LD_ADDR_VAR 0 4
65669: PUSH
65670: LD_INT 0
65672: ST_TO_ADDR
// if GetTaskList ( unit ) then
65673: LD_VAR 0 1
65677: PPUSH
65678: CALL_OW 437
65682: IFFALSE 65765
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65684: LD_STRING M
65686: PUSH
65687: LD_VAR 0 1
65691: PPUSH
65692: CALL_OW 437
65696: PUSH
65697: LD_INT 1
65699: ARRAY
65700: PUSH
65701: LD_INT 1
65703: ARRAY
65704: EQUAL
65705: PUSH
65706: LD_VAR 0 2
65710: PUSH
65711: LD_VAR 0 1
65715: PPUSH
65716: CALL_OW 437
65720: PUSH
65721: LD_INT 1
65723: ARRAY
65724: PUSH
65725: LD_INT 2
65727: ARRAY
65728: EQUAL
65729: AND
65730: PUSH
65731: LD_VAR 0 3
65735: PUSH
65736: LD_VAR 0 1
65740: PPUSH
65741: CALL_OW 437
65745: PUSH
65746: LD_INT 1
65748: ARRAY
65749: PUSH
65750: LD_INT 3
65752: ARRAY
65753: EQUAL
65754: AND
65755: IFFALSE 65765
// result := true ;
65757: LD_ADDR_VAR 0 4
65761: PUSH
65762: LD_INT 1
65764: ST_TO_ADDR
// end ; end ;
65765: LD_VAR 0 4
65769: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65770: LD_INT 0
65772: PPUSH
65773: PPUSH
65774: PPUSH
65775: PPUSH
// if not unit or not area then
65776: LD_VAR 0 1
65780: NOT
65781: PUSH
65782: LD_VAR 0 2
65786: NOT
65787: OR
65788: IFFALSE 65792
// exit ;
65790: GO 65955
// tmp := AreaToList ( area , i ) ;
65792: LD_ADDR_VAR 0 6
65796: PUSH
65797: LD_VAR 0 2
65801: PPUSH
65802: LD_VAR 0 5
65806: PPUSH
65807: CALL_OW 517
65811: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65812: LD_ADDR_VAR 0 5
65816: PUSH
65817: DOUBLE
65818: LD_INT 1
65820: DEC
65821: ST_TO_ADDR
65822: LD_VAR 0 6
65826: PUSH
65827: LD_INT 1
65829: ARRAY
65830: PUSH
65831: FOR_TO
65832: IFFALSE 65953
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65834: LD_ADDR_VAR 0 7
65838: PUSH
65839: LD_VAR 0 6
65843: PUSH
65844: LD_INT 1
65846: ARRAY
65847: PUSH
65848: LD_VAR 0 5
65852: ARRAY
65853: PUSH
65854: LD_VAR 0 6
65858: PUSH
65859: LD_INT 2
65861: ARRAY
65862: PUSH
65863: LD_VAR 0 5
65867: ARRAY
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
65873: LD_INT 92
65875: PUSH
65876: LD_VAR 0 7
65880: PUSH
65881: LD_INT 1
65883: ARRAY
65884: PUSH
65885: LD_VAR 0 7
65889: PUSH
65890: LD_INT 2
65892: ARRAY
65893: PUSH
65894: LD_INT 3
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: PPUSH
65903: CALL_OW 69
65907: PUSH
65908: LD_INT 0
65910: EQUAL
65911: IFFALSE 65951
// begin PlaceUnitArea ( unit , area , mode ) ;
65913: LD_VAR 0 1
65917: PPUSH
65918: LD_VAR 0 2
65922: PPUSH
65923: LD_VAR 0 3
65927: PPUSH
65928: CALL_OW 49
// result := IsPlaced ( unit ) ;
65932: LD_ADDR_VAR 0 4
65936: PUSH
65937: LD_VAR 0 1
65941: PPUSH
65942: CALL_OW 305
65946: ST_TO_ADDR
// exit ;
65947: POP
65948: POP
65949: GO 65955
// end ; end ;
65951: GO 65831
65953: POP
65954: POP
// end ;
65955: LD_VAR 0 4
65959: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65960: LD_INT 0
65962: PPUSH
65963: PPUSH
65964: PPUSH
// if not side or side > 8 then
65965: LD_VAR 0 1
65969: NOT
65970: PUSH
65971: LD_VAR 0 1
65975: PUSH
65976: LD_INT 8
65978: GREATER
65979: OR
65980: IFFALSE 65984
// exit ;
65982: GO 66171
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65984: LD_ADDR_VAR 0 4
65988: PUSH
65989: LD_INT 22
65991: PUSH
65992: LD_VAR 0 1
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 21
66003: PUSH
66004: LD_INT 3
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PPUSH
66015: CALL_OW 69
66019: ST_TO_ADDR
// if not tmp then
66020: LD_VAR 0 4
66024: NOT
66025: IFFALSE 66029
// exit ;
66027: GO 66171
// enable_addtolog := true ;
66029: LD_ADDR_OWVAR 81
66033: PUSH
66034: LD_INT 1
66036: ST_TO_ADDR
// AddToLog ( [ ) ;
66037: LD_STRING [
66039: PPUSH
66040: CALL_OW 561
// for i in tmp do
66044: LD_ADDR_VAR 0 3
66048: PUSH
66049: LD_VAR 0 4
66053: PUSH
66054: FOR_IN
66055: IFFALSE 66162
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66057: LD_STRING [
66059: PUSH
66060: LD_VAR 0 3
66064: PPUSH
66065: CALL_OW 266
66069: STR
66070: PUSH
66071: LD_STRING , 
66073: STR
66074: PUSH
66075: LD_VAR 0 3
66079: PPUSH
66080: CALL_OW 250
66084: STR
66085: PUSH
66086: LD_STRING , 
66088: STR
66089: PUSH
66090: LD_VAR 0 3
66094: PPUSH
66095: CALL_OW 251
66099: STR
66100: PUSH
66101: LD_STRING , 
66103: STR
66104: PUSH
66105: LD_VAR 0 3
66109: PPUSH
66110: CALL_OW 254
66114: STR
66115: PUSH
66116: LD_STRING , 
66118: STR
66119: PUSH
66120: LD_VAR 0 3
66124: PPUSH
66125: LD_INT 1
66127: PPUSH
66128: CALL_OW 268
66132: STR
66133: PUSH
66134: LD_STRING , 
66136: STR
66137: PUSH
66138: LD_VAR 0 3
66142: PPUSH
66143: LD_INT 2
66145: PPUSH
66146: CALL_OW 268
66150: STR
66151: PUSH
66152: LD_STRING ],
66154: STR
66155: PPUSH
66156: CALL_OW 561
// end ;
66160: GO 66054
66162: POP
66163: POP
// AddToLog ( ]; ) ;
66164: LD_STRING ];
66166: PPUSH
66167: CALL_OW 561
// end ;
66171: LD_VAR 0 2
66175: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66176: LD_INT 0
66178: PPUSH
66179: PPUSH
66180: PPUSH
66181: PPUSH
66182: PPUSH
// if not area or not rate or not max then
66183: LD_VAR 0 1
66187: NOT
66188: PUSH
66189: LD_VAR 0 2
66193: NOT
66194: OR
66195: PUSH
66196: LD_VAR 0 4
66200: NOT
66201: OR
66202: IFFALSE 66206
// exit ;
66204: GO 66395
// while 1 do
66206: LD_INT 1
66208: IFFALSE 66395
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66210: LD_ADDR_VAR 0 9
66214: PUSH
66215: LD_VAR 0 1
66219: PPUSH
66220: LD_INT 1
66222: PPUSH
66223: CALL_OW 287
66227: PUSH
66228: LD_INT 10
66230: MUL
66231: ST_TO_ADDR
// r := rate / 10 ;
66232: LD_ADDR_VAR 0 7
66236: PUSH
66237: LD_VAR 0 2
66241: PUSH
66242: LD_INT 10
66244: DIVREAL
66245: ST_TO_ADDR
// time := 1 1$00 ;
66246: LD_ADDR_VAR 0 8
66250: PUSH
66251: LD_INT 2100
66253: ST_TO_ADDR
// if amount < min then
66254: LD_VAR 0 9
66258: PUSH
66259: LD_VAR 0 3
66263: LESS
66264: IFFALSE 66282
// r := r * 2 else
66266: LD_ADDR_VAR 0 7
66270: PUSH
66271: LD_VAR 0 7
66275: PUSH
66276: LD_INT 2
66278: MUL
66279: ST_TO_ADDR
66280: GO 66308
// if amount > max then
66282: LD_VAR 0 9
66286: PUSH
66287: LD_VAR 0 4
66291: GREATER
66292: IFFALSE 66308
// r := r / 2 ;
66294: LD_ADDR_VAR 0 7
66298: PUSH
66299: LD_VAR 0 7
66303: PUSH
66304: LD_INT 2
66306: DIVREAL
66307: ST_TO_ADDR
// time := time / r ;
66308: LD_ADDR_VAR 0 8
66312: PUSH
66313: LD_VAR 0 8
66317: PUSH
66318: LD_VAR 0 7
66322: DIVREAL
66323: ST_TO_ADDR
// if time < 0 then
66324: LD_VAR 0 8
66328: PUSH
66329: LD_INT 0
66331: LESS
66332: IFFALSE 66349
// time := time * - 1 ;
66334: LD_ADDR_VAR 0 8
66338: PUSH
66339: LD_VAR 0 8
66343: PUSH
66344: LD_INT 1
66346: NEG
66347: MUL
66348: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66349: LD_VAR 0 8
66353: PUSH
66354: LD_INT 35
66356: PPUSH
66357: LD_INT 875
66359: PPUSH
66360: CALL_OW 12
66364: PLUS
66365: PPUSH
66366: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66370: LD_INT 1
66372: PPUSH
66373: LD_INT 5
66375: PPUSH
66376: CALL_OW 12
66380: PPUSH
66381: LD_VAR 0 1
66385: PPUSH
66386: LD_INT 1
66388: PPUSH
66389: CALL_OW 55
// end ;
66393: GO 66206
// end ;
66395: LD_VAR 0 5
66399: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66400: LD_INT 0
66402: PPUSH
66403: PPUSH
66404: PPUSH
66405: PPUSH
66406: PPUSH
66407: PPUSH
66408: PPUSH
66409: PPUSH
// if not turrets or not factories then
66410: LD_VAR 0 1
66414: NOT
66415: PUSH
66416: LD_VAR 0 2
66420: NOT
66421: OR
66422: IFFALSE 66426
// exit ;
66424: GO 66733
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66426: LD_ADDR_VAR 0 10
66430: PUSH
66431: LD_INT 5
66433: PUSH
66434: LD_INT 6
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 2
66443: PUSH
66444: LD_INT 4
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 3
66453: PUSH
66454: LD_INT 5
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 24
66468: PUSH
66469: LD_INT 25
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 23
66478: PUSH
66479: LD_INT 27
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 42
66492: PUSH
66493: LD_INT 43
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 44
66502: PUSH
66503: LD_INT 46
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 45
66512: PUSH
66513: LD_INT 47
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: LIST
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: LIST
66529: ST_TO_ADDR
// result := [ ] ;
66530: LD_ADDR_VAR 0 3
66534: PUSH
66535: EMPTY
66536: ST_TO_ADDR
// for i in turrets do
66537: LD_ADDR_VAR 0 4
66541: PUSH
66542: LD_VAR 0 1
66546: PUSH
66547: FOR_IN
66548: IFFALSE 66731
// begin nat := GetNation ( i ) ;
66550: LD_ADDR_VAR 0 7
66554: PUSH
66555: LD_VAR 0 4
66559: PPUSH
66560: CALL_OW 248
66564: ST_TO_ADDR
// weapon := 0 ;
66565: LD_ADDR_VAR 0 8
66569: PUSH
66570: LD_INT 0
66572: ST_TO_ADDR
// if not nat then
66573: LD_VAR 0 7
66577: NOT
66578: IFFALSE 66582
// continue ;
66580: GO 66547
// for j in list [ nat ] do
66582: LD_ADDR_VAR 0 5
66586: PUSH
66587: LD_VAR 0 10
66591: PUSH
66592: LD_VAR 0 7
66596: ARRAY
66597: PUSH
66598: FOR_IN
66599: IFFALSE 66640
// if GetBWeapon ( i ) = j [ 1 ] then
66601: LD_VAR 0 4
66605: PPUSH
66606: CALL_OW 269
66610: PUSH
66611: LD_VAR 0 5
66615: PUSH
66616: LD_INT 1
66618: ARRAY
66619: EQUAL
66620: IFFALSE 66638
// begin weapon := j [ 2 ] ;
66622: LD_ADDR_VAR 0 8
66626: PUSH
66627: LD_VAR 0 5
66631: PUSH
66632: LD_INT 2
66634: ARRAY
66635: ST_TO_ADDR
// break ;
66636: GO 66640
// end ;
66638: GO 66598
66640: POP
66641: POP
// if not weapon then
66642: LD_VAR 0 8
66646: NOT
66647: IFFALSE 66651
// continue ;
66649: GO 66547
// for k in factories do
66651: LD_ADDR_VAR 0 6
66655: PUSH
66656: LD_VAR 0 2
66660: PUSH
66661: FOR_IN
66662: IFFALSE 66727
// begin weapons := AvailableWeaponList ( k ) ;
66664: LD_ADDR_VAR 0 9
66668: PUSH
66669: LD_VAR 0 6
66673: PPUSH
66674: CALL_OW 478
66678: ST_TO_ADDR
// if not weapons then
66679: LD_VAR 0 9
66683: NOT
66684: IFFALSE 66688
// continue ;
66686: GO 66661
// if weapon in weapons then
66688: LD_VAR 0 8
66692: PUSH
66693: LD_VAR 0 9
66697: IN
66698: IFFALSE 66725
// begin result := [ i , weapon ] ;
66700: LD_ADDR_VAR 0 3
66704: PUSH
66705: LD_VAR 0 4
66709: PUSH
66710: LD_VAR 0 8
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: ST_TO_ADDR
// exit ;
66719: POP
66720: POP
66721: POP
66722: POP
66723: GO 66733
// end ; end ;
66725: GO 66661
66727: POP
66728: POP
// end ;
66729: GO 66547
66731: POP
66732: POP
// end ;
66733: LD_VAR 0 3
66737: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66738: LD_INT 0
66740: PPUSH
// if not side or side > 8 then
66741: LD_VAR 0 3
66745: NOT
66746: PUSH
66747: LD_VAR 0 3
66751: PUSH
66752: LD_INT 8
66754: GREATER
66755: OR
66756: IFFALSE 66760
// exit ;
66758: GO 66819
// if not range then
66760: LD_VAR 0 4
66764: NOT
66765: IFFALSE 66776
// range := - 12 ;
66767: LD_ADDR_VAR 0 4
66771: PUSH
66772: LD_INT 12
66774: NEG
66775: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66776: LD_VAR 0 1
66780: PPUSH
66781: LD_VAR 0 2
66785: PPUSH
66786: LD_VAR 0 3
66790: PPUSH
66791: LD_VAR 0 4
66795: PPUSH
66796: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66800: LD_VAR 0 1
66804: PPUSH
66805: LD_VAR 0 2
66809: PPUSH
66810: LD_VAR 0 3
66814: PPUSH
66815: CALL_OW 331
// end ;
66819: LD_VAR 0 5
66823: RET
// export function Video ( mode ) ; begin
66824: LD_INT 0
66826: PPUSH
// ingame_video = mode ;
66827: LD_ADDR_OWVAR 52
66831: PUSH
66832: LD_VAR 0 1
66836: ST_TO_ADDR
// interface_hidden = mode ;
66837: LD_ADDR_OWVAR 54
66841: PUSH
66842: LD_VAR 0 1
66846: ST_TO_ADDR
// end ;
66847: LD_VAR 0 2
66851: RET
// export function Join ( array , element ) ; begin
66852: LD_INT 0
66854: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66855: LD_ADDR_VAR 0 3
66859: PUSH
66860: LD_VAR 0 1
66864: PPUSH
66865: LD_VAR 0 1
66869: PUSH
66870: LD_INT 1
66872: PLUS
66873: PPUSH
66874: LD_VAR 0 2
66878: PPUSH
66879: CALL_OW 1
66883: ST_TO_ADDR
// end ;
66884: LD_VAR 0 3
66888: RET
// export function JoinUnion ( array , element ) ; begin
66889: LD_INT 0
66891: PPUSH
// result := array union element ;
66892: LD_ADDR_VAR 0 3
66896: PUSH
66897: LD_VAR 0 1
66901: PUSH
66902: LD_VAR 0 2
66906: UNION
66907: ST_TO_ADDR
// end ;
66908: LD_VAR 0 3
66912: RET
// export function GetBehemoths ( side ) ; begin
66913: LD_INT 0
66915: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66916: LD_ADDR_VAR 0 2
66920: PUSH
66921: LD_INT 22
66923: PUSH
66924: LD_VAR 0 1
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 31
66935: PUSH
66936: LD_INT 25
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PPUSH
66947: CALL_OW 69
66951: ST_TO_ADDR
// end ;
66952: LD_VAR 0 2
66956: RET
// export function Shuffle ( array ) ; var i , index ; begin
66957: LD_INT 0
66959: PPUSH
66960: PPUSH
66961: PPUSH
// result := [ ] ;
66962: LD_ADDR_VAR 0 2
66966: PUSH
66967: EMPTY
66968: ST_TO_ADDR
// if not array then
66969: LD_VAR 0 1
66973: NOT
66974: IFFALSE 66978
// exit ;
66976: GO 67077
// Randomize ;
66978: CALL_OW 10
// for i = array downto 1 do
66982: LD_ADDR_VAR 0 3
66986: PUSH
66987: DOUBLE
66988: LD_VAR 0 1
66992: INC
66993: ST_TO_ADDR
66994: LD_INT 1
66996: PUSH
66997: FOR_DOWNTO
66998: IFFALSE 67075
// begin index := rand ( 1 , array ) ;
67000: LD_ADDR_VAR 0 4
67004: PUSH
67005: LD_INT 1
67007: PPUSH
67008: LD_VAR 0 1
67012: PPUSH
67013: CALL_OW 12
67017: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67018: LD_ADDR_VAR 0 2
67022: PUSH
67023: LD_VAR 0 2
67027: PPUSH
67028: LD_VAR 0 2
67032: PUSH
67033: LD_INT 1
67035: PLUS
67036: PPUSH
67037: LD_VAR 0 1
67041: PUSH
67042: LD_VAR 0 4
67046: ARRAY
67047: PPUSH
67048: CALL_OW 2
67052: ST_TO_ADDR
// array := Delete ( array , index ) ;
67053: LD_ADDR_VAR 0 1
67057: PUSH
67058: LD_VAR 0 1
67062: PPUSH
67063: LD_VAR 0 4
67067: PPUSH
67068: CALL_OW 3
67072: ST_TO_ADDR
// end ;
67073: GO 66997
67075: POP
67076: POP
// end ;
67077: LD_VAR 0 2
67081: RET
// export function GetBaseMaterials ( base ) ; begin
67082: LD_INT 0
67084: PPUSH
// result := [ 0 , 0 , 0 ] ;
67085: LD_ADDR_VAR 0 2
67089: PUSH
67090: LD_INT 0
67092: PUSH
67093: LD_INT 0
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: LIST
67103: ST_TO_ADDR
// if not base then
67104: LD_VAR 0 1
67108: NOT
67109: IFFALSE 67113
// exit ;
67111: GO 67162
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67113: LD_ADDR_VAR 0 2
67117: PUSH
67118: LD_VAR 0 1
67122: PPUSH
67123: LD_INT 1
67125: PPUSH
67126: CALL_OW 275
67130: PUSH
67131: LD_VAR 0 1
67135: PPUSH
67136: LD_INT 2
67138: PPUSH
67139: CALL_OW 275
67143: PUSH
67144: LD_VAR 0 1
67148: PPUSH
67149: LD_INT 3
67151: PPUSH
67152: CALL_OW 275
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: LIST
67161: ST_TO_ADDR
// end ;
67162: LD_VAR 0 2
67166: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67167: LD_INT 0
67169: PPUSH
67170: PPUSH
// result := array ;
67171: LD_ADDR_VAR 0 3
67175: PUSH
67176: LD_VAR 0 1
67180: ST_TO_ADDR
// if size >= result then
67181: LD_VAR 0 2
67185: PUSH
67186: LD_VAR 0 3
67190: GREATEREQUAL
67191: IFFALSE 67195
// exit ;
67193: GO 67245
// if size then
67195: LD_VAR 0 2
67199: IFFALSE 67245
// for i := array downto size do
67201: LD_ADDR_VAR 0 4
67205: PUSH
67206: DOUBLE
67207: LD_VAR 0 1
67211: INC
67212: ST_TO_ADDR
67213: LD_VAR 0 2
67217: PUSH
67218: FOR_DOWNTO
67219: IFFALSE 67243
// result := Delete ( result , result ) ;
67221: LD_ADDR_VAR 0 3
67225: PUSH
67226: LD_VAR 0 3
67230: PPUSH
67231: LD_VAR 0 3
67235: PPUSH
67236: CALL_OW 3
67240: ST_TO_ADDR
67241: GO 67218
67243: POP
67244: POP
// end ;
67245: LD_VAR 0 3
67249: RET
// export function ComExit ( unit ) ; var tmp ; begin
67250: LD_INT 0
67252: PPUSH
67253: PPUSH
// if not IsInUnit ( unit ) then
67254: LD_VAR 0 1
67258: PPUSH
67259: CALL_OW 310
67263: NOT
67264: IFFALSE 67268
// exit ;
67266: GO 67328
// tmp := IsInUnit ( unit ) ;
67268: LD_ADDR_VAR 0 3
67272: PUSH
67273: LD_VAR 0 1
67277: PPUSH
67278: CALL_OW 310
67282: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67283: LD_VAR 0 3
67287: PPUSH
67288: CALL_OW 247
67292: PUSH
67293: LD_INT 2
67295: EQUAL
67296: IFFALSE 67309
// ComExitVehicle ( unit ) else
67298: LD_VAR 0 1
67302: PPUSH
67303: CALL_OW 121
67307: GO 67318
// ComExitBuilding ( unit ) ;
67309: LD_VAR 0 1
67313: PPUSH
67314: CALL_OW 122
// result := tmp ;
67318: LD_ADDR_VAR 0 2
67322: PUSH
67323: LD_VAR 0 3
67327: ST_TO_ADDR
// end ;
67328: LD_VAR 0 2
67332: RET
// export function ComExitAll ( units ) ; var i ; begin
67333: LD_INT 0
67335: PPUSH
67336: PPUSH
// if not units then
67337: LD_VAR 0 1
67341: NOT
67342: IFFALSE 67346
// exit ;
67344: GO 67372
// for i in units do
67346: LD_ADDR_VAR 0 3
67350: PUSH
67351: LD_VAR 0 1
67355: PUSH
67356: FOR_IN
67357: IFFALSE 67370
// ComExit ( i ) ;
67359: LD_VAR 0 3
67363: PPUSH
67364: CALL 67250 0 1
67368: GO 67356
67370: POP
67371: POP
// end ;
67372: LD_VAR 0 2
67376: RET
// export function ResetHc ; begin
67377: LD_INT 0
67379: PPUSH
// InitHc ;
67380: CALL_OW 19
// hc_importance := 0 ;
67384: LD_ADDR_OWVAR 32
67388: PUSH
67389: LD_INT 0
67391: ST_TO_ADDR
// end ;
67392: LD_VAR 0 1
67396: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67397: LD_INT 0
67399: PPUSH
67400: PPUSH
67401: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67402: LD_ADDR_VAR 0 6
67406: PUSH
67407: LD_VAR 0 1
67411: PUSH
67412: LD_VAR 0 3
67416: PLUS
67417: PUSH
67418: LD_INT 2
67420: DIV
67421: ST_TO_ADDR
// if _x < 0 then
67422: LD_VAR 0 6
67426: PUSH
67427: LD_INT 0
67429: LESS
67430: IFFALSE 67447
// _x := _x * - 1 ;
67432: LD_ADDR_VAR 0 6
67436: PUSH
67437: LD_VAR 0 6
67441: PUSH
67442: LD_INT 1
67444: NEG
67445: MUL
67446: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67447: LD_ADDR_VAR 0 7
67451: PUSH
67452: LD_VAR 0 2
67456: PUSH
67457: LD_VAR 0 4
67461: PLUS
67462: PUSH
67463: LD_INT 2
67465: DIV
67466: ST_TO_ADDR
// if _y < 0 then
67467: LD_VAR 0 7
67471: PUSH
67472: LD_INT 0
67474: LESS
67475: IFFALSE 67492
// _y := _y * - 1 ;
67477: LD_ADDR_VAR 0 7
67481: PUSH
67482: LD_VAR 0 7
67486: PUSH
67487: LD_INT 1
67489: NEG
67490: MUL
67491: ST_TO_ADDR
// result := [ _x , _y ] ;
67492: LD_ADDR_VAR 0 5
67496: PUSH
67497: LD_VAR 0 6
67501: PUSH
67502: LD_VAR 0 7
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: ST_TO_ADDR
// end ;
67511: LD_VAR 0 5
67515: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67516: LD_INT 0
67518: PPUSH
67519: PPUSH
67520: PPUSH
67521: PPUSH
// task := GetTaskList ( unit ) ;
67522: LD_ADDR_VAR 0 7
67526: PUSH
67527: LD_VAR 0 1
67531: PPUSH
67532: CALL_OW 437
67536: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67537: LD_VAR 0 7
67541: NOT
67542: PUSH
67543: LD_VAR 0 1
67547: PPUSH
67548: LD_VAR 0 2
67552: PPUSH
67553: CALL_OW 308
67557: NOT
67558: AND
67559: IFFALSE 67563
// exit ;
67561: GO 67681
// if IsInArea ( unit , area ) then
67563: LD_VAR 0 1
67567: PPUSH
67568: LD_VAR 0 2
67572: PPUSH
67573: CALL_OW 308
67577: IFFALSE 67595
// begin ComMoveToArea ( unit , goAway ) ;
67579: LD_VAR 0 1
67583: PPUSH
67584: LD_VAR 0 3
67588: PPUSH
67589: CALL_OW 113
// exit ;
67593: GO 67681
// end ; if task [ 1 ] [ 1 ] <> M then
67595: LD_VAR 0 7
67599: PUSH
67600: LD_INT 1
67602: ARRAY
67603: PUSH
67604: LD_INT 1
67606: ARRAY
67607: PUSH
67608: LD_STRING M
67610: NONEQUAL
67611: IFFALSE 67615
// exit ;
67613: GO 67681
// x := task [ 1 ] [ 2 ] ;
67615: LD_ADDR_VAR 0 5
67619: PUSH
67620: LD_VAR 0 7
67624: PUSH
67625: LD_INT 1
67627: ARRAY
67628: PUSH
67629: LD_INT 2
67631: ARRAY
67632: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67633: LD_ADDR_VAR 0 6
67637: PUSH
67638: LD_VAR 0 7
67642: PUSH
67643: LD_INT 1
67645: ARRAY
67646: PUSH
67647: LD_INT 3
67649: ARRAY
67650: ST_TO_ADDR
// if InArea ( x , y , area ) then
67651: LD_VAR 0 5
67655: PPUSH
67656: LD_VAR 0 6
67660: PPUSH
67661: LD_VAR 0 2
67665: PPUSH
67666: CALL_OW 309
67670: IFFALSE 67681
// ComStop ( unit ) ;
67672: LD_VAR 0 1
67676: PPUSH
67677: CALL_OW 141
// end ;
67681: LD_VAR 0 4
67685: RET
// export function Abs ( value ) ; begin
67686: LD_INT 0
67688: PPUSH
// result := value ;
67689: LD_ADDR_VAR 0 2
67693: PUSH
67694: LD_VAR 0 1
67698: ST_TO_ADDR
// if value < 0 then
67699: LD_VAR 0 1
67703: PUSH
67704: LD_INT 0
67706: LESS
67707: IFFALSE 67724
// result := value * - 1 ;
67709: LD_ADDR_VAR 0 2
67713: PUSH
67714: LD_VAR 0 1
67718: PUSH
67719: LD_INT 1
67721: NEG
67722: MUL
67723: ST_TO_ADDR
// end ;
67724: LD_VAR 0 2
67728: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67729: LD_INT 0
67731: PPUSH
67732: PPUSH
67733: PPUSH
67734: PPUSH
67735: PPUSH
67736: PPUSH
67737: PPUSH
67738: PPUSH
// if not unit or not building then
67739: LD_VAR 0 1
67743: NOT
67744: PUSH
67745: LD_VAR 0 2
67749: NOT
67750: OR
67751: IFFALSE 67755
// exit ;
67753: GO 67981
// x := GetX ( building ) ;
67755: LD_ADDR_VAR 0 4
67759: PUSH
67760: LD_VAR 0 2
67764: PPUSH
67765: CALL_OW 250
67769: ST_TO_ADDR
// y := GetY ( building ) ;
67770: LD_ADDR_VAR 0 6
67774: PUSH
67775: LD_VAR 0 2
67779: PPUSH
67780: CALL_OW 251
67784: ST_TO_ADDR
// d := GetDir ( building ) ;
67785: LD_ADDR_VAR 0 8
67789: PUSH
67790: LD_VAR 0 2
67794: PPUSH
67795: CALL_OW 254
67799: ST_TO_ADDR
// r := 4 ;
67800: LD_ADDR_VAR 0 9
67804: PUSH
67805: LD_INT 4
67807: ST_TO_ADDR
// for i := 1 to 5 do
67808: LD_ADDR_VAR 0 10
67812: PUSH
67813: DOUBLE
67814: LD_INT 1
67816: DEC
67817: ST_TO_ADDR
67818: LD_INT 5
67820: PUSH
67821: FOR_TO
67822: IFFALSE 67979
// begin _x := ShiftX ( x , d , r + i ) ;
67824: LD_ADDR_VAR 0 5
67828: PUSH
67829: LD_VAR 0 4
67833: PPUSH
67834: LD_VAR 0 8
67838: PPUSH
67839: LD_VAR 0 9
67843: PUSH
67844: LD_VAR 0 10
67848: PLUS
67849: PPUSH
67850: CALL_OW 272
67854: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67855: LD_ADDR_VAR 0 7
67859: PUSH
67860: LD_VAR 0 6
67864: PPUSH
67865: LD_VAR 0 8
67869: PPUSH
67870: LD_VAR 0 9
67874: PUSH
67875: LD_VAR 0 10
67879: PLUS
67880: PPUSH
67881: CALL_OW 273
67885: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67886: LD_VAR 0 5
67890: PPUSH
67891: LD_VAR 0 7
67895: PPUSH
67896: CALL_OW 488
67900: PUSH
67901: LD_VAR 0 5
67905: PPUSH
67906: LD_VAR 0 7
67910: PPUSH
67911: CALL_OW 428
67915: PPUSH
67916: CALL_OW 247
67920: PUSH
67921: LD_INT 3
67923: PUSH
67924: LD_INT 2
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: IN
67931: NOT
67932: AND
67933: IFFALSE 67977
// begin ComMoveXY ( unit , _x , _y ) ;
67935: LD_VAR 0 1
67939: PPUSH
67940: LD_VAR 0 5
67944: PPUSH
67945: LD_VAR 0 7
67949: PPUSH
67950: CALL_OW 111
// result := [ _x , _y ] ;
67954: LD_ADDR_VAR 0 3
67958: PUSH
67959: LD_VAR 0 5
67963: PUSH
67964: LD_VAR 0 7
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: ST_TO_ADDR
// exit ;
67973: POP
67974: POP
67975: GO 67981
// end ; end ;
67977: GO 67821
67979: POP
67980: POP
// end ;
67981: LD_VAR 0 3
67985: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67986: LD_INT 0
67988: PPUSH
67989: PPUSH
67990: PPUSH
// result := 0 ;
67991: LD_ADDR_VAR 0 3
67995: PUSH
67996: LD_INT 0
67998: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67999: LD_VAR 0 1
68003: PUSH
68004: LD_INT 0
68006: LESS
68007: PUSH
68008: LD_VAR 0 1
68012: PUSH
68013: LD_INT 8
68015: GREATER
68016: OR
68017: PUSH
68018: LD_VAR 0 2
68022: PUSH
68023: LD_INT 0
68025: LESS
68026: OR
68027: PUSH
68028: LD_VAR 0 2
68032: PUSH
68033: LD_INT 8
68035: GREATER
68036: OR
68037: IFFALSE 68041
// exit ;
68039: GO 68116
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68041: LD_ADDR_VAR 0 4
68045: PUSH
68046: LD_INT 22
68048: PUSH
68049: LD_VAR 0 2
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PPUSH
68058: CALL_OW 69
68062: PUSH
68063: FOR_IN
68064: IFFALSE 68114
// begin un := UnitShoot ( i ) ;
68066: LD_ADDR_VAR 0 5
68070: PUSH
68071: LD_VAR 0 4
68075: PPUSH
68076: CALL_OW 504
68080: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68081: LD_VAR 0 5
68085: PPUSH
68086: CALL_OW 255
68090: PUSH
68091: LD_VAR 0 1
68095: EQUAL
68096: IFFALSE 68112
// begin result := un ;
68098: LD_ADDR_VAR 0 3
68102: PUSH
68103: LD_VAR 0 5
68107: ST_TO_ADDR
// exit ;
68108: POP
68109: POP
68110: GO 68116
// end ; end ;
68112: GO 68063
68114: POP
68115: POP
// end ;
68116: LD_VAR 0 3
68120: RET
// export function GetCargoBay ( units ) ; begin
68121: LD_INT 0
68123: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68124: LD_ADDR_VAR 0 2
68128: PUSH
68129: LD_VAR 0 1
68133: PPUSH
68134: LD_INT 2
68136: PUSH
68137: LD_INT 34
68139: PUSH
68140: LD_INT 12
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 34
68149: PUSH
68150: LD_INT 51
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 34
68159: PUSH
68160: LD_INT 32
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 34
68169: PUSH
68170: LD_INT 89
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: PPUSH
68184: CALL_OW 72
68188: ST_TO_ADDR
// end ;
68189: LD_VAR 0 2
68193: RET
// export function Negate ( value ) ; begin
68194: LD_INT 0
68196: PPUSH
// result := not value ;
68197: LD_ADDR_VAR 0 2
68201: PUSH
68202: LD_VAR 0 1
68206: NOT
68207: ST_TO_ADDR
// end ;
68208: LD_VAR 0 2
68212: RET
// export function Inc ( value ) ; begin
68213: LD_INT 0
68215: PPUSH
// result := value + 1 ;
68216: LD_ADDR_VAR 0 2
68220: PUSH
68221: LD_VAR 0 1
68225: PUSH
68226: LD_INT 1
68228: PLUS
68229: ST_TO_ADDR
// end ;
68230: LD_VAR 0 2
68234: RET
// export function Dec ( value ) ; begin
68235: LD_INT 0
68237: PPUSH
// result := value - 1 ;
68238: LD_ADDR_VAR 0 2
68242: PUSH
68243: LD_VAR 0 1
68247: PUSH
68248: LD_INT 1
68250: MINUS
68251: ST_TO_ADDR
// end ;
68252: LD_VAR 0 2
68256: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68257: LD_INT 0
68259: PPUSH
68260: PPUSH
68261: PPUSH
68262: PPUSH
68263: PPUSH
68264: PPUSH
68265: PPUSH
68266: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68267: LD_VAR 0 1
68271: PPUSH
68272: LD_VAR 0 2
68276: PPUSH
68277: CALL_OW 488
68281: NOT
68282: PUSH
68283: LD_VAR 0 3
68287: PPUSH
68288: LD_VAR 0 4
68292: PPUSH
68293: CALL_OW 488
68297: NOT
68298: OR
68299: IFFALSE 68312
// begin result := - 1 ;
68301: LD_ADDR_VAR 0 5
68305: PUSH
68306: LD_INT 1
68308: NEG
68309: ST_TO_ADDR
// exit ;
68310: GO 68547
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68312: LD_ADDR_VAR 0 12
68316: PUSH
68317: LD_VAR 0 1
68321: PPUSH
68322: LD_VAR 0 2
68326: PPUSH
68327: LD_VAR 0 3
68331: PPUSH
68332: LD_VAR 0 4
68336: PPUSH
68337: CALL 67397 0 4
68341: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68342: LD_ADDR_VAR 0 11
68346: PUSH
68347: LD_VAR 0 1
68351: PPUSH
68352: LD_VAR 0 2
68356: PPUSH
68357: LD_VAR 0 12
68361: PUSH
68362: LD_INT 1
68364: ARRAY
68365: PPUSH
68366: LD_VAR 0 12
68370: PUSH
68371: LD_INT 2
68373: ARRAY
68374: PPUSH
68375: CALL_OW 298
68379: ST_TO_ADDR
// distance := 9999 ;
68380: LD_ADDR_VAR 0 10
68384: PUSH
68385: LD_INT 9999
68387: ST_TO_ADDR
// for i := 0 to 5 do
68388: LD_ADDR_VAR 0 6
68392: PUSH
68393: DOUBLE
68394: LD_INT 0
68396: DEC
68397: ST_TO_ADDR
68398: LD_INT 5
68400: PUSH
68401: FOR_TO
68402: IFFALSE 68545
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68404: LD_ADDR_VAR 0 7
68408: PUSH
68409: LD_VAR 0 1
68413: PPUSH
68414: LD_VAR 0 6
68418: PPUSH
68419: LD_VAR 0 11
68423: PPUSH
68424: CALL_OW 272
68428: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68429: LD_ADDR_VAR 0 8
68433: PUSH
68434: LD_VAR 0 2
68438: PPUSH
68439: LD_VAR 0 6
68443: PPUSH
68444: LD_VAR 0 11
68448: PPUSH
68449: CALL_OW 273
68453: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68454: LD_VAR 0 7
68458: PPUSH
68459: LD_VAR 0 8
68463: PPUSH
68464: CALL_OW 488
68468: NOT
68469: IFFALSE 68473
// continue ;
68471: GO 68401
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68473: LD_ADDR_VAR 0 9
68477: PUSH
68478: LD_VAR 0 12
68482: PUSH
68483: LD_INT 1
68485: ARRAY
68486: PPUSH
68487: LD_VAR 0 12
68491: PUSH
68492: LD_INT 2
68494: ARRAY
68495: PPUSH
68496: LD_VAR 0 7
68500: PPUSH
68501: LD_VAR 0 8
68505: PPUSH
68506: CALL_OW 298
68510: ST_TO_ADDR
// if tmp < distance then
68511: LD_VAR 0 9
68515: PUSH
68516: LD_VAR 0 10
68520: LESS
68521: IFFALSE 68543
// begin result := i ;
68523: LD_ADDR_VAR 0 5
68527: PUSH
68528: LD_VAR 0 6
68532: ST_TO_ADDR
// distance := tmp ;
68533: LD_ADDR_VAR 0 10
68537: PUSH
68538: LD_VAR 0 9
68542: ST_TO_ADDR
// end ; end ;
68543: GO 68401
68545: POP
68546: POP
// end ;
68547: LD_VAR 0 5
68551: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68552: LD_INT 0
68554: PPUSH
68555: PPUSH
// if not driver or not IsInUnit ( driver ) then
68556: LD_VAR 0 1
68560: NOT
68561: PUSH
68562: LD_VAR 0 1
68566: PPUSH
68567: CALL_OW 310
68571: NOT
68572: OR
68573: IFFALSE 68577
// exit ;
68575: GO 68667
// vehicle := IsInUnit ( driver ) ;
68577: LD_ADDR_VAR 0 3
68581: PUSH
68582: LD_VAR 0 1
68586: PPUSH
68587: CALL_OW 310
68591: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68592: LD_VAR 0 1
68596: PPUSH
68597: LD_STRING \
68599: PUSH
68600: LD_INT 0
68602: PUSH
68603: LD_INT 0
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: LD_INT 0
68611: PUSH
68612: LD_INT 0
68614: PUSH
68615: LD_INT 0
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: PUSH
68627: LD_STRING E
68629: PUSH
68630: LD_INT 0
68632: PUSH
68633: LD_INT 0
68635: PUSH
68636: LD_VAR 0 3
68640: PUSH
68641: LD_INT 0
68643: PUSH
68644: LD_INT 0
68646: PUSH
68647: LD_INT 0
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PPUSH
68663: CALL_OW 446
// end ;
68667: LD_VAR 0 2
68671: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68672: LD_INT 0
68674: PPUSH
68675: PPUSH
// if not driver or not IsInUnit ( driver ) then
68676: LD_VAR 0 1
68680: NOT
68681: PUSH
68682: LD_VAR 0 1
68686: PPUSH
68687: CALL_OW 310
68691: NOT
68692: OR
68693: IFFALSE 68697
// exit ;
68695: GO 68787
// vehicle := IsInUnit ( driver ) ;
68697: LD_ADDR_VAR 0 3
68701: PUSH
68702: LD_VAR 0 1
68706: PPUSH
68707: CALL_OW 310
68711: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68712: LD_VAR 0 1
68716: PPUSH
68717: LD_STRING \
68719: PUSH
68720: LD_INT 0
68722: PUSH
68723: LD_INT 0
68725: PUSH
68726: LD_INT 0
68728: PUSH
68729: LD_INT 0
68731: PUSH
68732: LD_INT 0
68734: PUSH
68735: LD_INT 0
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: PUSH
68747: LD_STRING E
68749: PUSH
68750: LD_INT 0
68752: PUSH
68753: LD_INT 0
68755: PUSH
68756: LD_VAR 0 3
68760: PUSH
68761: LD_INT 0
68763: PUSH
68764: LD_INT 0
68766: PUSH
68767: LD_INT 0
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PPUSH
68783: CALL_OW 447
// end ;
68787: LD_VAR 0 2
68791: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68792: LD_INT 0
68794: PPUSH
68795: PPUSH
68796: PPUSH
// tmp := [ ] ;
68797: LD_ADDR_VAR 0 5
68801: PUSH
68802: EMPTY
68803: ST_TO_ADDR
// for i in units do
68804: LD_ADDR_VAR 0 4
68808: PUSH
68809: LD_VAR 0 1
68813: PUSH
68814: FOR_IN
68815: IFFALSE 68853
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68817: LD_ADDR_VAR 0 5
68821: PUSH
68822: LD_VAR 0 5
68826: PPUSH
68827: LD_VAR 0 5
68831: PUSH
68832: LD_INT 1
68834: PLUS
68835: PPUSH
68836: LD_VAR 0 4
68840: PPUSH
68841: CALL_OW 256
68845: PPUSH
68846: CALL_OW 2
68850: ST_TO_ADDR
68851: GO 68814
68853: POP
68854: POP
// if not tmp then
68855: LD_VAR 0 5
68859: NOT
68860: IFFALSE 68864
// exit ;
68862: GO 68912
// if asc then
68864: LD_VAR 0 2
68868: IFFALSE 68892
// result := SortListByListAsc ( units , tmp ) else
68870: LD_ADDR_VAR 0 3
68874: PUSH
68875: LD_VAR 0 1
68879: PPUSH
68880: LD_VAR 0 5
68884: PPUSH
68885: CALL_OW 76
68889: ST_TO_ADDR
68890: GO 68912
// result := SortListByListDesc ( units , tmp ) ;
68892: LD_ADDR_VAR 0 3
68896: PUSH
68897: LD_VAR 0 1
68901: PPUSH
68902: LD_VAR 0 5
68906: PPUSH
68907: CALL_OW 77
68911: ST_TO_ADDR
// end ;
68912: LD_VAR 0 3
68916: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68917: LD_INT 0
68919: PPUSH
68920: PPUSH
// task := GetTaskList ( mech ) ;
68921: LD_ADDR_VAR 0 4
68925: PUSH
68926: LD_VAR 0 1
68930: PPUSH
68931: CALL_OW 437
68935: ST_TO_ADDR
// if not task then
68936: LD_VAR 0 4
68940: NOT
68941: IFFALSE 68945
// exit ;
68943: GO 68987
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68945: LD_ADDR_VAR 0 3
68949: PUSH
68950: LD_VAR 0 4
68954: PUSH
68955: LD_INT 1
68957: ARRAY
68958: PUSH
68959: LD_INT 1
68961: ARRAY
68962: PUSH
68963: LD_STRING r
68965: EQUAL
68966: PUSH
68967: LD_VAR 0 4
68971: PUSH
68972: LD_INT 1
68974: ARRAY
68975: PUSH
68976: LD_INT 4
68978: ARRAY
68979: PUSH
68980: LD_VAR 0 2
68984: EQUAL
68985: AND
68986: ST_TO_ADDR
// end ;
68987: LD_VAR 0 3
68991: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68992: LD_INT 0
68994: PPUSH
// SetDir ( unit , d ) ;
68995: LD_VAR 0 1
68999: PPUSH
69000: LD_VAR 0 4
69004: PPUSH
69005: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69009: LD_VAR 0 1
69013: PPUSH
69014: LD_VAR 0 2
69018: PPUSH
69019: LD_VAR 0 3
69023: PPUSH
69024: LD_VAR 0 5
69028: PPUSH
69029: CALL_OW 48
// end ;
69033: LD_VAR 0 6
69037: RET
// export function ToNaturalNumber ( number ) ; begin
69038: LD_INT 0
69040: PPUSH
// result := number div 1 ;
69041: LD_ADDR_VAR 0 2
69045: PUSH
69046: LD_VAR 0 1
69050: PUSH
69051: LD_INT 1
69053: DIV
69054: ST_TO_ADDR
// if number < 0 then
69055: LD_VAR 0 1
69059: PUSH
69060: LD_INT 0
69062: LESS
69063: IFFALSE 69073
// result := 0 ;
69065: LD_ADDR_VAR 0 2
69069: PUSH
69070: LD_INT 0
69072: ST_TO_ADDR
// end ;
69073: LD_VAR 0 2
69077: RET
// export function SortByClass ( units , class ) ; var un ; begin
69078: LD_INT 0
69080: PPUSH
69081: PPUSH
// if not units or not class then
69082: LD_VAR 0 1
69086: NOT
69087: PUSH
69088: LD_VAR 0 2
69092: NOT
69093: OR
69094: IFFALSE 69098
// exit ;
69096: GO 69193
// result := [ ] ;
69098: LD_ADDR_VAR 0 3
69102: PUSH
69103: EMPTY
69104: ST_TO_ADDR
// for un in units do
69105: LD_ADDR_VAR 0 4
69109: PUSH
69110: LD_VAR 0 1
69114: PUSH
69115: FOR_IN
69116: IFFALSE 69191
// if GetClass ( un ) = class then
69118: LD_VAR 0 4
69122: PPUSH
69123: CALL_OW 257
69127: PUSH
69128: LD_VAR 0 2
69132: EQUAL
69133: IFFALSE 69160
// result := Insert ( result , 1 , un ) else
69135: LD_ADDR_VAR 0 3
69139: PUSH
69140: LD_VAR 0 3
69144: PPUSH
69145: LD_INT 1
69147: PPUSH
69148: LD_VAR 0 4
69152: PPUSH
69153: CALL_OW 2
69157: ST_TO_ADDR
69158: GO 69189
// result := Replace ( result , result + 1 , un ) ;
69160: LD_ADDR_VAR 0 3
69164: PUSH
69165: LD_VAR 0 3
69169: PPUSH
69170: LD_VAR 0 3
69174: PUSH
69175: LD_INT 1
69177: PLUS
69178: PPUSH
69179: LD_VAR 0 4
69183: PPUSH
69184: CALL_OW 1
69188: ST_TO_ADDR
69189: GO 69115
69191: POP
69192: POP
// end ;
69193: LD_VAR 0 3
69197: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69198: LD_INT 0
69200: PPUSH
69201: PPUSH
69202: PPUSH
69203: PPUSH
69204: PPUSH
69205: PPUSH
69206: PPUSH
// result := [ ] ;
69207: LD_ADDR_VAR 0 4
69211: PUSH
69212: EMPTY
69213: ST_TO_ADDR
// if x - r < 0 then
69214: LD_VAR 0 1
69218: PUSH
69219: LD_VAR 0 3
69223: MINUS
69224: PUSH
69225: LD_INT 0
69227: LESS
69228: IFFALSE 69240
// min_x := 0 else
69230: LD_ADDR_VAR 0 8
69234: PUSH
69235: LD_INT 0
69237: ST_TO_ADDR
69238: GO 69256
// min_x := x - r ;
69240: LD_ADDR_VAR 0 8
69244: PUSH
69245: LD_VAR 0 1
69249: PUSH
69250: LD_VAR 0 3
69254: MINUS
69255: ST_TO_ADDR
// if y - r < 0 then
69256: LD_VAR 0 2
69260: PUSH
69261: LD_VAR 0 3
69265: MINUS
69266: PUSH
69267: LD_INT 0
69269: LESS
69270: IFFALSE 69282
// min_y := 0 else
69272: LD_ADDR_VAR 0 7
69276: PUSH
69277: LD_INT 0
69279: ST_TO_ADDR
69280: GO 69298
// min_y := y - r ;
69282: LD_ADDR_VAR 0 7
69286: PUSH
69287: LD_VAR 0 2
69291: PUSH
69292: LD_VAR 0 3
69296: MINUS
69297: ST_TO_ADDR
// max_x := x + r ;
69298: LD_ADDR_VAR 0 9
69302: PUSH
69303: LD_VAR 0 1
69307: PUSH
69308: LD_VAR 0 3
69312: PLUS
69313: ST_TO_ADDR
// max_y := y + r ;
69314: LD_ADDR_VAR 0 10
69318: PUSH
69319: LD_VAR 0 2
69323: PUSH
69324: LD_VAR 0 3
69328: PLUS
69329: ST_TO_ADDR
// for _x = min_x to max_x do
69330: LD_ADDR_VAR 0 5
69334: PUSH
69335: DOUBLE
69336: LD_VAR 0 8
69340: DEC
69341: ST_TO_ADDR
69342: LD_VAR 0 9
69346: PUSH
69347: FOR_TO
69348: IFFALSE 69449
// for _y = min_y to max_y do
69350: LD_ADDR_VAR 0 6
69354: PUSH
69355: DOUBLE
69356: LD_VAR 0 7
69360: DEC
69361: ST_TO_ADDR
69362: LD_VAR 0 10
69366: PUSH
69367: FOR_TO
69368: IFFALSE 69445
// begin if not ValidHex ( _x , _y ) then
69370: LD_VAR 0 5
69374: PPUSH
69375: LD_VAR 0 6
69379: PPUSH
69380: CALL_OW 488
69384: NOT
69385: IFFALSE 69389
// continue ;
69387: GO 69367
// if GetResourceTypeXY ( _x , _y ) then
69389: LD_VAR 0 5
69393: PPUSH
69394: LD_VAR 0 6
69398: PPUSH
69399: CALL_OW 283
69403: IFFALSE 69443
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69405: LD_ADDR_VAR 0 4
69409: PUSH
69410: LD_VAR 0 4
69414: PPUSH
69415: LD_VAR 0 4
69419: PUSH
69420: LD_INT 1
69422: PLUS
69423: PPUSH
69424: LD_VAR 0 5
69428: PUSH
69429: LD_VAR 0 6
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PPUSH
69438: CALL_OW 1
69442: ST_TO_ADDR
// end ;
69443: GO 69367
69445: POP
69446: POP
69447: GO 69347
69449: POP
69450: POP
// end ;
69451: LD_VAR 0 4
69455: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69456: LD_INT 0
69458: PPUSH
69459: PPUSH
69460: PPUSH
69461: PPUSH
69462: PPUSH
69463: PPUSH
69464: PPUSH
69465: PPUSH
// if not units then
69466: LD_VAR 0 1
69470: NOT
69471: IFFALSE 69475
// exit ;
69473: GO 69999
// result := UnitFilter ( units , [ f_ok ] ) ;
69475: LD_ADDR_VAR 0 3
69479: PUSH
69480: LD_VAR 0 1
69484: PPUSH
69485: LD_INT 50
69487: PUSH
69488: EMPTY
69489: LIST
69490: PPUSH
69491: CALL_OW 72
69495: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69496: LD_ADDR_VAR 0 8
69500: PUSH
69501: LD_VAR 0 1
69505: PUSH
69506: LD_INT 1
69508: ARRAY
69509: PPUSH
69510: CALL_OW 255
69514: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69515: LD_ADDR_VAR 0 10
69519: PUSH
69520: LD_INT 29
69522: PUSH
69523: LD_INT 91
69525: PUSH
69526: LD_INT 49
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: LIST
69533: ST_TO_ADDR
// if not result then
69534: LD_VAR 0 3
69538: NOT
69539: IFFALSE 69543
// exit ;
69541: GO 69999
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69543: LD_ADDR_VAR 0 5
69547: PUSH
69548: LD_INT 81
69550: PUSH
69551: LD_VAR 0 8
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PPUSH
69560: CALL_OW 69
69564: ST_TO_ADDR
// for i in result do
69565: LD_ADDR_VAR 0 4
69569: PUSH
69570: LD_VAR 0 3
69574: PUSH
69575: FOR_IN
69576: IFFALSE 69997
// begin tag := GetTag ( i ) + 1 ;
69578: LD_ADDR_VAR 0 9
69582: PUSH
69583: LD_VAR 0 4
69587: PPUSH
69588: CALL_OW 110
69592: PUSH
69593: LD_INT 1
69595: PLUS
69596: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69597: LD_ADDR_VAR 0 7
69601: PUSH
69602: LD_VAR 0 4
69606: PPUSH
69607: CALL_OW 250
69611: PPUSH
69612: LD_VAR 0 4
69616: PPUSH
69617: CALL_OW 251
69621: PPUSH
69622: LD_INT 6
69624: PPUSH
69625: CALL 69198 0 3
69629: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69630: LD_VAR 0 4
69634: PPUSH
69635: CALL_OW 247
69639: PUSH
69640: LD_INT 2
69642: EQUAL
69643: PUSH
69644: LD_VAR 0 7
69648: AND
69649: PUSH
69650: LD_VAR 0 4
69654: PPUSH
69655: CALL_OW 264
69659: PUSH
69660: LD_VAR 0 10
69664: IN
69665: NOT
69666: AND
69667: IFFALSE 69706
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69669: LD_VAR 0 4
69673: PPUSH
69674: LD_VAR 0 7
69678: PUSH
69679: LD_INT 1
69681: ARRAY
69682: PUSH
69683: LD_INT 1
69685: ARRAY
69686: PPUSH
69687: LD_VAR 0 7
69691: PUSH
69692: LD_INT 1
69694: ARRAY
69695: PUSH
69696: LD_INT 2
69698: ARRAY
69699: PPUSH
69700: CALL_OW 116
69704: GO 69995
// if path > tag then
69706: LD_VAR 0 2
69710: PUSH
69711: LD_VAR 0 9
69715: GREATER
69716: IFFALSE 69924
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69718: LD_ADDR_VAR 0 6
69722: PUSH
69723: LD_VAR 0 5
69727: PPUSH
69728: LD_INT 91
69730: PUSH
69731: LD_VAR 0 4
69735: PUSH
69736: LD_INT 8
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: LIST
69743: PPUSH
69744: CALL_OW 72
69748: ST_TO_ADDR
// if nearEnemy then
69749: LD_VAR 0 6
69753: IFFALSE 69822
// begin if GetWeapon ( i ) = ru_time_lapser then
69755: LD_VAR 0 4
69759: PPUSH
69760: CALL_OW 264
69764: PUSH
69765: LD_INT 49
69767: EQUAL
69768: IFFALSE 69796
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69770: LD_VAR 0 4
69774: PPUSH
69775: LD_VAR 0 6
69779: PPUSH
69780: LD_VAR 0 4
69784: PPUSH
69785: CALL_OW 74
69789: PPUSH
69790: CALL_OW 112
69794: GO 69820
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69796: LD_VAR 0 4
69800: PPUSH
69801: LD_VAR 0 6
69805: PPUSH
69806: LD_VAR 0 4
69810: PPUSH
69811: CALL_OW 74
69815: PPUSH
69816: CALL_OW 115
// end else
69820: GO 69922
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69822: LD_VAR 0 4
69826: PPUSH
69827: LD_VAR 0 2
69831: PUSH
69832: LD_VAR 0 9
69836: ARRAY
69837: PUSH
69838: LD_INT 1
69840: ARRAY
69841: PPUSH
69842: LD_VAR 0 2
69846: PUSH
69847: LD_VAR 0 9
69851: ARRAY
69852: PUSH
69853: LD_INT 2
69855: ARRAY
69856: PPUSH
69857: CALL_OW 297
69861: PUSH
69862: LD_INT 6
69864: GREATER
69865: IFFALSE 69908
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69867: LD_VAR 0 4
69871: PPUSH
69872: LD_VAR 0 2
69876: PUSH
69877: LD_VAR 0 9
69881: ARRAY
69882: PUSH
69883: LD_INT 1
69885: ARRAY
69886: PPUSH
69887: LD_VAR 0 2
69891: PUSH
69892: LD_VAR 0 9
69896: ARRAY
69897: PUSH
69898: LD_INT 2
69900: ARRAY
69901: PPUSH
69902: CALL_OW 114
69906: GO 69922
// SetTag ( i , tag ) ;
69908: LD_VAR 0 4
69912: PPUSH
69913: LD_VAR 0 9
69917: PPUSH
69918: CALL_OW 109
// end else
69922: GO 69995
// if enemy then
69924: LD_VAR 0 5
69928: IFFALSE 69995
// begin if GetWeapon ( i ) = ru_time_lapser then
69930: LD_VAR 0 4
69934: PPUSH
69935: CALL_OW 264
69939: PUSH
69940: LD_INT 49
69942: EQUAL
69943: IFFALSE 69971
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69945: LD_VAR 0 4
69949: PPUSH
69950: LD_VAR 0 5
69954: PPUSH
69955: LD_VAR 0 4
69959: PPUSH
69960: CALL_OW 74
69964: PPUSH
69965: CALL_OW 112
69969: GO 69995
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69971: LD_VAR 0 4
69975: PPUSH
69976: LD_VAR 0 5
69980: PPUSH
69981: LD_VAR 0 4
69985: PPUSH
69986: CALL_OW 74
69990: PPUSH
69991: CALL_OW 115
// end ; end ;
69995: GO 69575
69997: POP
69998: POP
// end ;
69999: LD_VAR 0 3
70003: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70004: LD_INT 0
70006: PPUSH
70007: PPUSH
70008: PPUSH
// if not unit or IsInUnit ( unit ) then
70009: LD_VAR 0 1
70013: NOT
70014: PUSH
70015: LD_VAR 0 1
70019: PPUSH
70020: CALL_OW 310
70024: OR
70025: IFFALSE 70029
// exit ;
70027: GO 70120
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70029: LD_ADDR_VAR 0 4
70033: PUSH
70034: LD_VAR 0 1
70038: PPUSH
70039: CALL_OW 250
70043: PPUSH
70044: LD_VAR 0 2
70048: PPUSH
70049: LD_INT 1
70051: PPUSH
70052: CALL_OW 272
70056: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70057: LD_ADDR_VAR 0 5
70061: PUSH
70062: LD_VAR 0 1
70066: PPUSH
70067: CALL_OW 251
70071: PPUSH
70072: LD_VAR 0 2
70076: PPUSH
70077: LD_INT 1
70079: PPUSH
70080: CALL_OW 273
70084: ST_TO_ADDR
// if ValidHex ( x , y ) then
70085: LD_VAR 0 4
70089: PPUSH
70090: LD_VAR 0 5
70094: PPUSH
70095: CALL_OW 488
70099: IFFALSE 70120
// ComTurnXY ( unit , x , y ) ;
70101: LD_VAR 0 1
70105: PPUSH
70106: LD_VAR 0 4
70110: PPUSH
70111: LD_VAR 0 5
70115: PPUSH
70116: CALL_OW 118
// end ;
70120: LD_VAR 0 3
70124: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70125: LD_INT 0
70127: PPUSH
70128: PPUSH
// result := false ;
70129: LD_ADDR_VAR 0 3
70133: PUSH
70134: LD_INT 0
70136: ST_TO_ADDR
// if not units then
70137: LD_VAR 0 2
70141: NOT
70142: IFFALSE 70146
// exit ;
70144: GO 70191
// for i in units do
70146: LD_ADDR_VAR 0 4
70150: PUSH
70151: LD_VAR 0 2
70155: PUSH
70156: FOR_IN
70157: IFFALSE 70189
// if See ( side , i ) then
70159: LD_VAR 0 1
70163: PPUSH
70164: LD_VAR 0 4
70168: PPUSH
70169: CALL_OW 292
70173: IFFALSE 70187
// begin result := true ;
70175: LD_ADDR_VAR 0 3
70179: PUSH
70180: LD_INT 1
70182: ST_TO_ADDR
// exit ;
70183: POP
70184: POP
70185: GO 70191
// end ;
70187: GO 70156
70189: POP
70190: POP
// end ;
70191: LD_VAR 0 3
70195: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70196: LD_INT 0
70198: PPUSH
70199: PPUSH
70200: PPUSH
70201: PPUSH
// if not unit or not points then
70202: LD_VAR 0 1
70206: NOT
70207: PUSH
70208: LD_VAR 0 2
70212: NOT
70213: OR
70214: IFFALSE 70218
// exit ;
70216: GO 70308
// dist := 99999 ;
70218: LD_ADDR_VAR 0 5
70222: PUSH
70223: LD_INT 99999
70225: ST_TO_ADDR
// for i in points do
70226: LD_ADDR_VAR 0 4
70230: PUSH
70231: LD_VAR 0 2
70235: PUSH
70236: FOR_IN
70237: IFFALSE 70306
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70239: LD_ADDR_VAR 0 6
70243: PUSH
70244: LD_VAR 0 1
70248: PPUSH
70249: LD_VAR 0 4
70253: PUSH
70254: LD_INT 1
70256: ARRAY
70257: PPUSH
70258: LD_VAR 0 4
70262: PUSH
70263: LD_INT 2
70265: ARRAY
70266: PPUSH
70267: CALL_OW 297
70271: ST_TO_ADDR
// if tmpDist < dist then
70272: LD_VAR 0 6
70276: PUSH
70277: LD_VAR 0 5
70281: LESS
70282: IFFALSE 70304
// begin result := i ;
70284: LD_ADDR_VAR 0 3
70288: PUSH
70289: LD_VAR 0 4
70293: ST_TO_ADDR
// dist := tmpDist ;
70294: LD_ADDR_VAR 0 5
70298: PUSH
70299: LD_VAR 0 6
70303: ST_TO_ADDR
// end ; end ;
70304: GO 70236
70306: POP
70307: POP
// end ;
70308: LD_VAR 0 3
70312: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70313: LD_INT 0
70315: PPUSH
// uc_side := side ;
70316: LD_ADDR_OWVAR 20
70320: PUSH
70321: LD_VAR 0 1
70325: ST_TO_ADDR
// uc_nation := 3 ;
70326: LD_ADDR_OWVAR 21
70330: PUSH
70331: LD_INT 3
70333: ST_TO_ADDR
// vc_chassis := 25 ;
70334: LD_ADDR_OWVAR 37
70338: PUSH
70339: LD_INT 25
70341: ST_TO_ADDR
// vc_engine := engine_siberite ;
70342: LD_ADDR_OWVAR 39
70346: PUSH
70347: LD_INT 3
70349: ST_TO_ADDR
// vc_control := control_computer ;
70350: LD_ADDR_OWVAR 38
70354: PUSH
70355: LD_INT 3
70357: ST_TO_ADDR
// vc_weapon := 59 ;
70358: LD_ADDR_OWVAR 40
70362: PUSH
70363: LD_INT 59
70365: ST_TO_ADDR
// result := CreateVehicle ;
70366: LD_ADDR_VAR 0 5
70370: PUSH
70371: CALL_OW 45
70375: ST_TO_ADDR
// SetDir ( result , d ) ;
70376: LD_VAR 0 5
70380: PPUSH
70381: LD_VAR 0 4
70385: PPUSH
70386: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70390: LD_VAR 0 5
70394: PPUSH
70395: LD_VAR 0 2
70399: PPUSH
70400: LD_VAR 0 3
70404: PPUSH
70405: LD_INT 0
70407: PPUSH
70408: CALL_OW 48
// end ;
70412: LD_VAR 0 5
70416: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70417: LD_INT 0
70419: PPUSH
70420: PPUSH
70421: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70422: LD_ADDR_VAR 0 2
70426: PUSH
70427: LD_INT 0
70429: PUSH
70430: LD_INT 0
70432: PUSH
70433: LD_INT 0
70435: PUSH
70436: LD_INT 0
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70445: LD_VAR 0 1
70449: NOT
70450: PUSH
70451: LD_VAR 0 1
70455: PPUSH
70456: CALL_OW 264
70460: PUSH
70461: LD_INT 12
70463: PUSH
70464: LD_INT 51
70466: PUSH
70467: LD_INT 32
70469: PUSH
70470: LD_INT 89
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: IN
70479: NOT
70480: OR
70481: IFFALSE 70485
// exit ;
70483: GO 70583
// for i := 1 to 3 do
70485: LD_ADDR_VAR 0 3
70489: PUSH
70490: DOUBLE
70491: LD_INT 1
70493: DEC
70494: ST_TO_ADDR
70495: LD_INT 3
70497: PUSH
70498: FOR_TO
70499: IFFALSE 70581
// begin tmp := GetCargo ( cargo , i ) ;
70501: LD_ADDR_VAR 0 4
70505: PUSH
70506: LD_VAR 0 1
70510: PPUSH
70511: LD_VAR 0 3
70515: PPUSH
70516: CALL_OW 289
70520: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70521: LD_ADDR_VAR 0 2
70525: PUSH
70526: LD_VAR 0 2
70530: PPUSH
70531: LD_VAR 0 3
70535: PPUSH
70536: LD_VAR 0 4
70540: PPUSH
70541: CALL_OW 1
70545: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70546: LD_ADDR_VAR 0 2
70550: PUSH
70551: LD_VAR 0 2
70555: PPUSH
70556: LD_INT 4
70558: PPUSH
70559: LD_VAR 0 2
70563: PUSH
70564: LD_INT 4
70566: ARRAY
70567: PUSH
70568: LD_VAR 0 4
70572: PLUS
70573: PPUSH
70574: CALL_OW 1
70578: ST_TO_ADDR
// end ;
70579: GO 70498
70581: POP
70582: POP
// end ;
70583: LD_VAR 0 2
70587: RET
// export function Length ( array ) ; begin
70588: LD_INT 0
70590: PPUSH
// result := array + 0 ;
70591: LD_ADDR_VAR 0 2
70595: PUSH
70596: LD_VAR 0 1
70600: PUSH
70601: LD_INT 0
70603: PLUS
70604: ST_TO_ADDR
// end ;
70605: LD_VAR 0 2
70609: RET
// export function PrepareArray ( array ) ; begin
70610: LD_INT 0
70612: PPUSH
// result := array diff 0 ;
70613: LD_ADDR_VAR 0 2
70617: PUSH
70618: LD_VAR 0 1
70622: PUSH
70623: LD_INT 0
70625: DIFF
70626: ST_TO_ADDR
// if not result [ 1 ] then
70627: LD_VAR 0 2
70631: PUSH
70632: LD_INT 1
70634: ARRAY
70635: NOT
70636: IFFALSE 70656
// result := Delete ( result , 1 ) ;
70638: LD_ADDR_VAR 0 2
70642: PUSH
70643: LD_VAR 0 2
70647: PPUSH
70648: LD_INT 1
70650: PPUSH
70651: CALL_OW 3
70655: ST_TO_ADDR
// end ;
70656: LD_VAR 0 2
70660: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70661: LD_INT 0
70663: PPUSH
70664: PPUSH
70665: PPUSH
70666: PPUSH
// sibRocketRange := 25 ;
70667: LD_ADDR_VAR 0 6
70671: PUSH
70672: LD_INT 25
70674: ST_TO_ADDR
// result := false ;
70675: LD_ADDR_VAR 0 4
70679: PUSH
70680: LD_INT 0
70682: ST_TO_ADDR
// for i := 0 to 5 do
70683: LD_ADDR_VAR 0 5
70687: PUSH
70688: DOUBLE
70689: LD_INT 0
70691: DEC
70692: ST_TO_ADDR
70693: LD_INT 5
70695: PUSH
70696: FOR_TO
70697: IFFALSE 70764
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70699: LD_VAR 0 1
70703: PPUSH
70704: LD_VAR 0 5
70708: PPUSH
70709: LD_VAR 0 6
70713: PPUSH
70714: CALL_OW 272
70718: PPUSH
70719: LD_VAR 0 2
70723: PPUSH
70724: LD_VAR 0 5
70728: PPUSH
70729: LD_VAR 0 6
70733: PPUSH
70734: CALL_OW 273
70738: PPUSH
70739: LD_VAR 0 3
70743: PPUSH
70744: CALL_OW 309
70748: IFFALSE 70762
// begin result := true ;
70750: LD_ADDR_VAR 0 4
70754: PUSH
70755: LD_INT 1
70757: ST_TO_ADDR
// exit ;
70758: POP
70759: POP
70760: GO 70766
// end ;
70762: GO 70696
70764: POP
70765: POP
// end ;
70766: LD_VAR 0 4
70770: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70771: LD_INT 0
70773: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70774: LD_VAR 0 1
70778: PPUSH
70779: LD_VAR 0 2
70783: PPUSH
70784: LD_INT 0
70786: PPUSH
70787: LD_INT 0
70789: PPUSH
70790: LD_INT 1
70792: PPUSH
70793: LD_INT 0
70795: PPUSH
70796: CALL_OW 587
// end ;
70800: LD_VAR 0 3
70804: RET
// export function CenterOnNow ( unit ) ; begin
70805: LD_INT 0
70807: PPUSH
// result := IsInUnit ( unit ) ;
70808: LD_ADDR_VAR 0 2
70812: PUSH
70813: LD_VAR 0 1
70817: PPUSH
70818: CALL_OW 310
70822: ST_TO_ADDR
// if not result then
70823: LD_VAR 0 2
70827: NOT
70828: IFFALSE 70840
// result := unit ;
70830: LD_ADDR_VAR 0 2
70834: PUSH
70835: LD_VAR 0 1
70839: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70840: LD_VAR 0 1
70844: PPUSH
70845: CALL_OW 87
// end ;
70849: LD_VAR 0 2
70853: RET
// export function ComMoveHex ( unit , hex ) ; begin
70854: LD_INT 0
70856: PPUSH
// if not hex then
70857: LD_VAR 0 2
70861: NOT
70862: IFFALSE 70866
// exit ;
70864: GO 70919
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70866: LD_VAR 0 2
70870: PUSH
70871: LD_INT 1
70873: ARRAY
70874: PPUSH
70875: LD_VAR 0 2
70879: PUSH
70880: LD_INT 2
70882: ARRAY
70883: PPUSH
70884: CALL_OW 428
70888: IFFALSE 70892
// exit ;
70890: GO 70919
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70892: LD_VAR 0 1
70896: PPUSH
70897: LD_VAR 0 2
70901: PUSH
70902: LD_INT 1
70904: ARRAY
70905: PPUSH
70906: LD_VAR 0 2
70910: PUSH
70911: LD_INT 2
70913: ARRAY
70914: PPUSH
70915: CALL_OW 111
// end ; end_of_file
70919: LD_VAR 0 3
70923: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70924: LD_VAR 0 1
70928: PUSH
70929: LD_INT 200
70931: DOUBLE
70932: GREATEREQUAL
70933: IFFALSE 70941
70935: LD_INT 299
70937: DOUBLE
70938: LESSEQUAL
70939: IFTRUE 70943
70941: GO 70975
70943: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70944: LD_VAR 0 1
70948: PPUSH
70949: LD_VAR 0 2
70953: PPUSH
70954: LD_VAR 0 3
70958: PPUSH
70959: LD_VAR 0 4
70963: PPUSH
70964: LD_VAR 0 5
70968: PPUSH
70969: CALL 25647 0 5
70973: GO 71052
70975: LD_INT 300
70977: DOUBLE
70978: GREATEREQUAL
70979: IFFALSE 70987
70981: LD_INT 399
70983: DOUBLE
70984: LESSEQUAL
70985: IFTRUE 70989
70987: GO 71051
70989: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70990: LD_VAR 0 1
70994: PPUSH
70995: LD_VAR 0 2
70999: PPUSH
71000: LD_VAR 0 3
71004: PPUSH
71005: LD_VAR 0 4
71009: PPUSH
71010: LD_VAR 0 5
71014: PPUSH
71015: LD_VAR 0 6
71019: PPUSH
71020: LD_VAR 0 7
71024: PPUSH
71025: LD_VAR 0 8
71029: PPUSH
71030: LD_VAR 0 9
71034: PPUSH
71035: LD_VAR 0 10
71039: PPUSH
71040: LD_VAR 0 11
71044: PPUSH
71045: CALL 21972 0 11
71049: GO 71052
71051: POP
// end ;
71052: PPOPN 11
71054: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71055: LD_VAR 0 1
71059: PPUSH
71060: LD_VAR 0 2
71064: PPUSH
71065: LD_VAR 0 3
71069: PPUSH
71070: LD_VAR 0 4
71074: PPUSH
71075: LD_VAR 0 5
71079: PPUSH
71080: CALL 25383 0 5
// end ; end_of_file
71084: PPOPN 5
71086: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71087: LD_VAR 0 1
71091: PPUSH
71092: LD_VAR 0 2
71096: PPUSH
71097: LD_VAR 0 3
71101: PPUSH
71102: LD_VAR 0 4
71106: PPUSH
71107: LD_VAR 0 5
71111: PPUSH
71112: LD_VAR 0 6
71116: PPUSH
71117: CALL 9624 0 6
// end ;
71121: PPOPN 6
71123: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71124: LD_INT 0
71126: PPUSH
// begin if not units then
71127: LD_VAR 0 1
71131: NOT
71132: IFFALSE 71136
// exit ;
71134: GO 71136
// end ;
71136: PPOPN 7
71138: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71139: CALL 9528 0 0
// end ;
71143: PPOPN 1
71145: END
