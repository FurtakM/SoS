// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8617 0 0
// PrepareAmerican ;
 100: CALL 5237 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2712: LD_VAR 0 1
2716: PPUSH
2717: CALL_OW 255
2721: PUSH
2722: LD_INT 3
2724: EQUAL
2725: PUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 263
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: AND
2740: IFFALSE 2750
// comp_tested := true ;
2742: LD_ADDR_EXP 22
2746: PUSH
2747: LD_INT 1
2749: ST_TO_ADDR
// end ;
2750: PPOPN 2
2752: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2753: LD_VAR 0 1
2757: PUSH
2758: LD_INT 22
2760: PUSH
2761: LD_INT 1
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: LD_INT 21
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PPUSH
2782: CALL_OW 69
2786: IN
2787: IFFALSE 2865
// if attacked = false and sikorski_ar = false then
2789: LD_EXP 15
2793: PUSH
2794: LD_INT 0
2796: EQUAL
2797: PUSH
2798: LD_EXP 12
2802: PUSH
2803: LD_INT 0
2805: EQUAL
2806: AND
2807: IFFALSE 2865
// begin attacked := true ;
2809: LD_ADDR_EXP 15
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// if IsInUnit ( donald ) then
2817: LD_EXP 13
2821: PPUSH
2822: CALL_OW 310
2826: IFFALSE 2842
// SayRadio ( donald , DGammaF ) else
2828: LD_EXP 13
2832: PPUSH
2833: LD_STRING DGammaF
2835: PPUSH
2836: CALL_OW 94
2840: GO 2865
// if IsInUnit ( van ) then
2842: LD_EXP 14
2846: PPUSH
2847: CALL_OW 310
2851: IFFALSE 2865
// SayRadio ( van , DGammaM ) ;
2853: LD_EXP 14
2857: PPUSH
2858: LD_STRING DGammaM
2860: PPUSH
2861: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2865: LD_VAR 0 1
2869: PUSH
2870: LD_INT 33
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: IN
2885: IFFALSE 2896
// ComUnlink ( un ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 136
// end ;
2896: PPOPN 1
2898: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2899: LD_VAR 0 2
2903: PPUSH
2904: CALL_OW 258
2908: PUSH
2909: LD_INT 1
2911: EQUAL
2912: IFFALSE 2926
// Say ( sci , Dsci3 ) ;
2914: LD_VAR 0 2
2918: PPUSH
2919: LD_STRING Dsci3
2921: PPUSH
2922: CALL_OW 88
// end ;
2926: PPOPN 2
2928: END
// on BuildingComplete ( b ) do var i ;
2929: LD_INT 0
2931: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2932: LD_VAR 0 1
2936: PPUSH
2937: CALL_OW 266
2941: PUSH
2942: LD_INT 0
2944: EQUAL
2945: PUSH
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 255
2955: PUSH
2956: LD_INT 3
2958: EQUAL
2959: AND
2960: PUSH
2961: LD_EXP 6
2965: PUSH
2966: LD_INT 0
2968: EQUAL
2969: AND
2970: IFFALSE 3034
// begin SetBName ( b , kalinin ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: LD_STRING kalinin
2979: PPUSH
2980: CALL_OW 500
// dep_x := GetX ( b ) ;
2984: LD_ADDR_EXP 7
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 250
2998: ST_TO_ADDR
// dep_y := GetY ( b ) ;
2999: LD_ADDR_EXP 8
3003: PUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 251
3013: ST_TO_ADDR
// depot_rdy := true ;
3014: LD_ADDR_EXP 6
3018: PUSH
3019: LD_INT 1
3021: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3022: LD_EXP 2
3026: PPUSH
3027: LD_STRING Dpop3
3029: PPUSH
3030: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3034: LD_VAR 0 1
3038: PPUSH
3039: CALL_OW 266
3043: PUSH
3044: LD_INT 6
3046: EQUAL
3047: PUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 255
3057: PUSH
3058: LD_INT 3
3060: EQUAL
3061: AND
3062: PUSH
3063: LD_EXP 21
3067: PUSH
3068: LD_INT 0
3070: EQUAL
3071: AND
3072: IFFALSE 3167
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3074: LD_INT 22
3076: PUSH
3077: LD_INT 3
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 25
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PPUSH
3098: CALL_OW 69
3102: PUSH
3103: LD_INT 0
3105: GREATER
3106: IFFALSE 3167
// begin event_comp := true ;
3108: LD_ADDR_EXP 21
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3116: LD_INT 22
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 25
3128: PUSH
3129: LD_INT 4
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 26
3138: PUSH
3139: LD_INT 1
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: PUSH
3156: LD_INT 1
3158: ARRAY
3159: PPUSH
3160: LD_STRING Dsci1
3162: PPUSH
3163: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3167: LD_VAR 0 1
3171: PPUSH
3172: CALL_OW 266
3176: PUSH
3177: LD_INT 32
3179: EQUAL
3180: PUSH
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 255
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: AND
3195: IFFALSE 3260
// begin RaiseSailEvent ( 6 ) ;
3197: LD_INT 6
3199: PPUSH
3200: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3204: LD_VAR 0 1
3208: PPUSH
3209: LD_EXP 18
3213: PUSH
3214: LD_INT 4
3216: ARRAY
3217: PPUSH
3218: CALL_OW 208
// for i = 1 to 4 do
3222: LD_ADDR_VAR 0 2
3226: PUSH
3227: DOUBLE
3228: LD_INT 1
3230: DEC
3231: ST_TO_ADDR
3232: LD_INT 4
3234: PUSH
3235: FOR_TO
3236: IFFALSE 3258
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3238: LD_ADDR_EXP 18
3242: PUSH
3243: LD_EXP 18
3247: PPUSH
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 3
3255: ST_TO_ADDR
3256: GO 3235
3258: POP
3259: POP
// end ; end ;
3260: PPOPN 2
3262: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL 20617 0 1
// if un in Patrol then
3272: LD_VAR 0 1
3276: PUSH
3277: LD_EXP 17
3281: IN
3282: IFFALSE 3300
// Patrol := Patrol diff un ;
3284: LD_ADDR_EXP 17
3288: PUSH
3289: LD_EXP 17
3293: PUSH
3294: LD_VAR 0 1
3298: DIFF
3299: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3300: LD_VAR 0 1
3304: PUSH
3305: LD_INT 22
3307: PUSH
3308: LD_INT 1
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 30
3317: PUSH
3318: LD_INT 32
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 69
3333: IN
3334: IFFALSE 3420
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3336: LD_ADDR_EXP 18
3340: PUSH
3341: LD_EXP 18
3345: PUSH
3346: LD_VAR 0 1
3350: PPUSH
3351: CALL_OW 250
3355: ADD
3356: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3357: LD_ADDR_EXP 18
3361: PUSH
3362: LD_EXP 18
3366: PUSH
3367: LD_VAR 0 1
3371: PPUSH
3372: CALL_OW 251
3376: ADD
3377: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3378: LD_ADDR_EXP 18
3382: PUSH
3383: LD_EXP 18
3387: PUSH
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 254
3397: ADD
3398: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3399: LD_ADDR_EXP 18
3403: PUSH
3404: LD_EXP 18
3408: PUSH
3409: LD_VAR 0 1
3413: PPUSH
3414: CALL_OW 269
3418: ADD
3419: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3420: LD_VAR 0 1
3424: PUSH
3425: LD_INT 33
3427: PUSH
3428: LD_INT 2
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 3
3437: PUSH
3438: LD_INT 34
3440: PUSH
3441: LD_INT 13
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PPUSH
3456: CALL_OW 69
3460: IN
3461: IFFALSE 3477
// new_veh := new_veh + 1 ;
3463: LD_ADDR_EXP 19
3467: PUSH
3468: LD_EXP 19
3472: PUSH
3473: LD_INT 1
3475: PLUS
3476: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3477: LD_VAR 0 1
3481: PUSH
3482: LD_INT 34
3484: PUSH
3485: LD_INT 13
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 69
3496: IN
3497: IFFALSE 3518
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3499: LD_INT 26
3501: PPUSH
3502: LD_INT 3
3504: PPUSH
3505: LD_INT 2
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: LD_INT 13
3513: PPUSH
3514: CALL_OW 185
// if un = am_dep then
3518: LD_VAR 0 1
3522: PUSH
3523: LD_INT 25
3525: EQUAL
3526: IFFALSE 3694
// begin SayRadio ( Platonov , DPlat ) ;
3528: LD_EXP 4
3532: PPUSH
3533: LD_STRING DPlat
3535: PPUSH
3536: CALL_OW 94
// if timer <= 30 30$00 then
3540: LD_EXP 24
3544: PUSH
3545: LD_INT 63000
3547: LESSEQUAL
3548: IFFALSE 3562
// AddMedal ( gamma_med3 , 1 ) else
3550: LD_STRING gamma_med3
3552: PPUSH
3553: LD_INT 1
3555: PPUSH
3556: CALL_OW 101
3560: GO 3612
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3562: LD_EXP 24
3566: PUSH
3567: LD_INT 105000
3569: PUSH
3570: LD_INT 88200
3572: PUSH
3573: LD_INT 73500
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_EXP 1
3585: ARRAY
3586: LESSEQUAL
3587: IFFALSE 3601
// AddMedal ( gamma_med3 , 2 ) else
3589: LD_STRING gamma_med3
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 101
3599: GO 3612
// AddMedal ( gamma_med3 , - 1 ) ;
3601: LD_STRING gamma_med3
3603: PPUSH
3604: LD_INT 1
3606: NEG
3607: PPUSH
3608: CALL_OW 101
// if not comp_tested then
3612: LD_EXP 22
3616: NOT
3617: IFFALSE 3632
// AddMedal ( gamma_med2 , - 1 ) else
3619: LD_STRING gamma_med2
3621: PPUSH
3622: LD_INT 1
3624: NEG
3625: PPUSH
3626: CALL_OW 101
3630: GO 3642
// AddMedal ( gamma_med2 , 1 ) ;
3632: LD_STRING gamma_med2
3634: PPUSH
3635: LD_INT 1
3637: PPUSH
3638: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3642: LD_EXP 9
3646: PPUSH
3647: CALL_OW 301
3651: PUSH
3652: LD_EXP 23
3656: NOT
3657: AND
3658: IFFALSE 3672
// AddMedal ( gamma_med1 , 1 ) else
3660: LD_STRING gamma_med1
3662: PPUSH
3663: LD_INT 1
3665: PPUSH
3666: CALL_OW 101
3670: GO 3683
// AddMedal ( gamma_med1 , - 1 ) ;
3672: LD_STRING gamma_med1
3674: PPUSH
3675: LD_INT 1
3677: NEG
3678: PPUSH
3679: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3683: LD_STRING GAMMA_MEDALS
3685: PPUSH
3686: CALL_OW 102
// YouWin ;
3690: CALL_OW 103
// end ; if un = commander then
3694: LD_VAR 0 1
3698: PUSH
3699: LD_EXP 3
3703: EQUAL
3704: IFFALSE 3713
// YouLost ( comml ) ;
3706: LD_STRING comml
3708: PPUSH
3709: CALL_OW 104
// if un = sikorski then
3713: LD_VAR 0 1
3717: PUSH
3718: LD_EXP 9
3722: EQUAL
3723: IFFALSE 3735
// AddMedal ( gamma_med1 , 1 ) ;
3725: LD_STRING gamma_med1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: CALL_OW 101
// end ;
3735: PPOPN 1
3737: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
// begin if event = 1 then
3749: LD_VAR 0 1
3753: PUSH
3754: LD_INT 1
3756: EQUAL
3757: IFFALSE 4054
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3759: LD_ADDR_VAR 0 4
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 1
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 21
3776: PUSH
3777: LD_INT 3
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 3
3786: PUSH
3787: LD_INT 24
3789: PUSH
3790: LD_INT 1000
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: PPUSH
3806: CALL_OW 69
3810: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3811: LD_ADDR_VAR 0 8
3815: PUSH
3816: LD_INT 22
3818: PUSH
3819: LD_INT 1
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 25
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 24
3838: PUSH
3839: LD_INT 1000
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: PPUSH
3854: CALL_OW 69
3858: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3859: LD_ADDR_VAR 0 9
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 1
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 13
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 69
3892: ST_TO_ADDR
// if engs > 0 then
3893: LD_VAR 0 8
3897: PUSH
3898: LD_INT 0
3900: GREATER
3901: IFFALSE 4006
// for i = 1 to engs do
3903: LD_ADDR_VAR 0 2
3907: PUSH
3908: DOUBLE
3909: LD_INT 1
3911: DEC
3912: ST_TO_ADDR
3913: LD_VAR 0 8
3917: PUSH
3918: FOR_TO
3919: IFFALSE 4004
// begin if IsInUnit ( engs [ i ] ) then
3921: LD_VAR 0 8
3925: PUSH
3926: LD_VAR 0 2
3930: ARRAY
3931: PPUSH
3932: CALL_OW 310
3936: IFFALSE 3953
// ComExitBuilding ( engs [ i ] ) ;
3938: LD_VAR 0 8
3942: PUSH
3943: LD_VAR 0 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3953: LD_INT 7
3955: PPUSH
3956: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3960: LD_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: ARRAY
3970: PPUSH
3971: CALL_OW 314
3975: NOT
3976: IFFALSE 4002
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3978: LD_VAR 0 8
3982: PUSH
3983: LD_VAR 0 2
3987: ARRAY
3988: PPUSH
3989: LD_VAR 0 4
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: CALL_OW 130
// end ;
4002: GO 3918
4004: POP
4005: POP
// if crane > 0 then
4006: LD_VAR 0 9
4010: PUSH
4011: LD_INT 0
4013: GREATER
4014: IFFALSE 4054
// if not HasTask ( crane [ 1 ] ) then
4016: LD_VAR 0 9
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: CALL_OW 314
4029: NOT
4030: IFFALSE 4054
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4032: LD_VAR 0 9
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: LD_VAR 0 4
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: PPUSH
4050: CALL_OW 130
// end ; if event = 2 then
4054: LD_VAR 0 1
4058: PUSH
4059: LD_INT 2
4061: EQUAL
4062: IFFALSE 4184
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4064: LD_ADDR_VAR 0 8
4068: PUSH
4069: LD_INT 22
4071: PUSH
4072: LD_INT 1
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 2
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 69
4097: ST_TO_ADDR
// if engs > 0 then
4098: LD_VAR 0 8
4102: PUSH
4103: LD_INT 0
4105: GREATER
4106: IFFALSE 4184
// for i = 1 to engs do
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: DOUBLE
4114: LD_INT 1
4116: DEC
4117: ST_TO_ADDR
4118: LD_VAR 0 8
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4182
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4126: LD_VAR 0 8
4130: PUSH
4131: LD_VAR 0 2
4135: ARRAY
4136: PPUSH
4137: CALL_OW 314
4141: NOT
4142: PUSH
4143: LD_VAR 0 8
4147: PUSH
4148: LD_VAR 0 2
4152: ARRAY
4153: PPUSH
4154: CALL_OW 310
4158: NOT
4159: AND
4160: IFFALSE 4180
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4162: LD_VAR 0 8
4166: PUSH
4167: LD_VAR 0 2
4171: ARRAY
4172: PPUSH
4173: LD_INT 25
4175: PPUSH
4176: CALL_OW 120
4180: GO 4123
4182: POP
4183: POP
// end ; if event = 3 then
4184: LD_VAR 0 1
4188: PUSH
4189: LD_INT 3
4191: EQUAL
4192: IFFALSE 4556
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4194: LD_ADDR_VAR 0 4
4198: PUSH
4199: LD_INT 22
4201: PUSH
4202: LD_INT 1
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 21
4211: PUSH
4212: LD_INT 1
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 3
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 4
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PUSH
4236: LD_INT 3
4238: PUSH
4239: LD_INT 24
4241: PUSH
4242: LD_INT 800
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: PPUSH
4262: CALL_OW 69
4266: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4267: LD_ADDR_VAR 0 5
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 25
4284: PUSH
4285: LD_INT 4
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 69
4300: ST_TO_ADDR
// if filter > 0 then
4301: LD_VAR 0 4
4305: PUSH
4306: LD_INT 0
4308: GREATER
4309: IFFALSE 4498
// begin for i = 1 to doc do
4311: LD_ADDR_VAR 0 2
4315: PUSH
4316: DOUBLE
4317: LD_INT 1
4319: DEC
4320: ST_TO_ADDR
4321: LD_VAR 0 5
4325: PUSH
4326: FOR_TO
4327: IFFALSE 4427
// begin if IsInUnit ( doc [ i ] ) then
4329: LD_VAR 0 5
4333: PUSH
4334: LD_VAR 0 2
4338: ARRAY
4339: PPUSH
4340: CALL_OW 310
4344: IFFALSE 4361
// ComExitBuilding ( doc [ i ] ) ;
4346: LD_VAR 0 5
4350: PUSH
4351: LD_VAR 0 2
4355: ARRAY
4356: PPUSH
4357: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4361: LD_VAR 0 4
4365: PUSH
4366: LD_INT 1
4368: ARRAY
4369: PPUSH
4370: LD_INT 46
4372: PPUSH
4373: CALL_OW 296
4377: PUSH
4378: LD_INT 10
4380: LESS
4381: PUSH
4382: LD_VAR 0 5
4386: PUSH
4387: LD_VAR 0 2
4391: ARRAY
4392: PPUSH
4393: CALL_OW 314
4397: NOT
4398: AND
4399: IFFALSE 4425
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4401: LD_VAR 0 5
4405: PUSH
4406: LD_VAR 0 2
4410: ARRAY
4411: PPUSH
4412: LD_VAR 0 4
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PPUSH
4421: CALL_OW 128
// end ;
4425: GO 4326
4427: POP
4428: POP
// for i = 1 to filter do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_VAR 0 4
4443: PUSH
4444: FOR_TO
4445: IFFALSE 4494
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4447: LD_VAR 0 4
4451: PUSH
4452: LD_VAR 0 2
4456: ARRAY
4457: PPUSH
4458: LD_INT 46
4460: PPUSH
4461: CALL_OW 296
4465: PUSH
4466: LD_INT 10
4468: GREATER
4469: IFFALSE 4492
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4471: LD_VAR 0 4
4475: PUSH
4476: LD_VAR 0 2
4480: ARRAY
4481: PPUSH
4482: LD_INT 47
4484: PPUSH
4485: LD_INT 12
4487: PPUSH
4488: CALL_OW 111
4492: GO 4444
4494: POP
4495: POP
// end else
4496: GO 4556
// for i = 1 to doc do
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: DOUBLE
4504: LD_INT 1
4506: DEC
4507: ST_TO_ADDR
4508: LD_VAR 0 5
4512: PUSH
4513: FOR_TO
4514: IFFALSE 4554
// if not IsInUnit ( doc [ i ] ) then
4516: LD_VAR 0 5
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: PPUSH
4527: CALL_OW 310
4531: NOT
4532: IFFALSE 4552
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4534: LD_VAR 0 5
4538: PUSH
4539: LD_VAR 0 2
4543: ARRAY
4544: PPUSH
4545: LD_INT 46
4547: PPUSH
4548: CALL_OW 120
4552: GO 4513
4554: POP
4555: POP
// end ; if event = 4 then
4556: LD_VAR 0 1
4560: PUSH
4561: LD_INT 4
4563: EQUAL
4564: IFFALSE 4815
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4566: LD_ADDR_VAR 0 6
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 5
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: ST_TO_ADDR
// for i = 1 to bac do
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: DOUBLE
4606: LD_INT 1
4608: DEC
4609: ST_TO_ADDR
4610: LD_VAR 0 6
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4657
// if UnitsInside ( bac [ i ] ) < 6 then
4618: LD_VAR 0 6
4622: PUSH
4623: LD_VAR 0 2
4627: ARRAY
4628: PPUSH
4629: CALL_OW 313
4633: PUSH
4634: LD_INT 6
4636: LESS
4637: IFFALSE 4655
// place := bac [ i ] ;
4639: LD_ADDR_VAR 0 7
4643: PUSH
4644: LD_VAR 0 6
4648: PUSH
4649: LD_VAR 0 2
4653: ARRAY
4654: ST_TO_ADDR
4655: GO 4615
4657: POP
4658: POP
// if place then
4659: LD_VAR 0 7
4663: IFFALSE 4815
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4665: LD_ADDR_VAR 0 4
4669: PUSH
4670: LD_INT 22
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 25
4695: PUSH
4696: LD_INT 5
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 24
4710: PUSH
4711: LD_INT 1000
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PUSH
4723: EMPTY
4724: LIST
4725: PPUSH
4726: CALL_OW 69
4730: PUSH
4731: LD_EXP 17
4735: DIFF
4736: ST_TO_ADDR
// for i = 1 to filter do
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: DOUBLE
4743: LD_INT 1
4745: DEC
4746: ST_TO_ADDR
4747: LD_VAR 0 4
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4813
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4755: LD_VAR 0 4
4759: PUSH
4760: LD_VAR 0 2
4764: ARRAY
4765: PPUSH
4766: CALL_OW 310
4770: NOT
4771: PUSH
4772: LD_VAR 0 4
4776: PUSH
4777: LD_VAR 0 2
4781: ARRAY
4782: PPUSH
4783: CALL_OW 314
4787: NOT
4788: AND
4789: IFFALSE 4811
// ComEnterUnit ( filter [ i ] , place ) ;
4791: LD_VAR 0 4
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_VAR 0 7
4806: PPUSH
4807: CALL_OW 120
4811: GO 4752
4813: POP
4814: POP
// end ; end ; if event = 5 then
4815: LD_VAR 0 1
4819: PUSH
4820: LD_INT 5
4822: EQUAL
4823: IFFALSE 4977
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4825: LD_INT 12
4827: PPUSH
4828: LD_INT 81
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 70
4842: PUSH
4843: LD_INT 0
4845: EQUAL
4846: IFFALSE 4977
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4848: LD_ADDR_VAR 0 8
4852: PUSH
4853: LD_INT 22
4855: PUSH
4856: LD_INT 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 25
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 69
4881: ST_TO_ADDR
// if engs > 0 then
4882: LD_VAR 0 8
4886: PUSH
4887: LD_INT 0
4889: GREATER
4890: IFFALSE 4977
// for i = 1 to engs do
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: DOUBLE
4898: LD_INT 1
4900: DEC
4901: ST_TO_ADDR
4902: LD_VAR 0 8
4906: PUSH
4907: FOR_TO
4908: IFFALSE 4975
// if not HasTask ( engs [ i ] ) then
4910: LD_VAR 0 8
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: CALL_OW 314
4925: NOT
4926: IFFALSE 4973
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4928: LD_VAR 0 8
4932: PUSH
4933: LD_VAR 0 2
4937: ARRAY
4938: PPUSH
4939: LD_INT 32
4941: PPUSH
4942: LD_EXP 18
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: LD_EXP 18
4955: PUSH
4956: LD_INT 2
4958: ARRAY
4959: PPUSH
4960: LD_EXP 18
4964: PUSH
4965: LD_INT 3
4967: ARRAY
4968: PPUSH
4969: CALL_OW 145
4973: GO 4907
4975: POP
4976: POP
// end ; end ; if event = 6 then
4977: LD_VAR 0 1
4981: PUSH
4982: LD_INT 6
4984: EQUAL
4985: IFFALSE 5169
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4987: LD_ADDR_VAR 0 6
4991: PUSH
4992: LD_INT 22
4994: PUSH
4995: LD_INT 1
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PPUSH
5016: CALL_OW 69
5020: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5021: LD_VAR 0 6
5025: PUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 30
5038: PUSH
5039: LD_INT 32
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 58
5048: PUSH
5049: EMPTY
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: PPUSH
5060: CALL_OW 69
5064: PUSH
5065: LD_INT 0
5067: GREATER
5068: AND
5069: IFFALSE 5169
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5071: LD_ADDR_VAR 0 10
5075: PUSH
5076: LD_INT 22
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 30
5088: PUSH
5089: LD_INT 32
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 58
5098: PUSH
5099: EMPTY
5100: LIST
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: PUSH
5115: LD_INT 1
5117: ARRAY
5118: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: LD_VAR 0 6
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: PPUSH
5133: CALL_OW 313
5137: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5151: LD_VAR 0 3
5155: PUSH
5156: LD_INT 1
5158: ARRAY
5159: PPUSH
5160: LD_VAR 0 10
5164: PPUSH
5165: CALL_OW 180
// end ; end ; end ;
5169: PPOPN 10
5171: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_INT 1
5179: EQUAL
5180: PUSH
5181: LD_VAR 0 2
5185: PUSH
5186: LD_INT 3
5188: EQUAL
5189: AND
5190: IFFALSE 5200
// contact_am := true ;
5192: LD_ADDR_EXP 16
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// end ;
5200: PPOPN 2
5202: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: LD_VAR 0 3
5217: PPUSH
5218: CALL 20715 0 3
// end ;
5222: PPOPN 3
5224: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL 20723 0 1
// end ; end_of_file
5234: PPOPN 1
5236: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
5241: PPUSH
5242: PPUSH
5243: PPUSH
5244: PPUSH
5245: PPUSH
5246: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5247: LD_ADDR_VAR 0 5
5251: PUSH
5252: LD_INT 5
5254: PUSH
5255: LD_INT 6
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: LD_EXP 1
5270: ARRAY
5271: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5272: LD_ADDR_VAR 0 6
5276: PUSH
5277: LD_INT 4
5279: PUSH
5280: LD_INT 4
5282: PUSH
5283: LD_INT 4
5285: PUSH
5286: LD_INT 5
5288: PUSH
5289: LD_INT 5
5291: PUSH
5292: LD_INT 5
5294: PUSH
5295: LD_INT 6
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// SForce := [ ] ;
5307: LD_ADDR_EXP 11
5311: PUSH
5312: EMPTY
5313: ST_TO_ADDR
// Sikorski_Ar := false ;
5314: LD_ADDR_EXP 12
5318: PUSH
5319: LD_INT 0
5321: ST_TO_ADDR
// attacked := false ;
5322: LD_ADDR_EXP 15
5326: PUSH
5327: LD_INT 0
5329: ST_TO_ADDR
// contact_am := false ;
5330: LD_ADDR_EXP 16
5334: PUSH
5335: LD_INT 0
5337: ST_TO_ADDR
// patrol := [ ] ;
5338: LD_ADDR_EXP 17
5342: PUSH
5343: EMPTY
5344: ST_TO_ADDR
// gamma_towers := [ ] ;
5345: LD_ADDR_EXP 18
5349: PUSH
5350: EMPTY
5351: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5352: LD_INT 25
5354: PPUSH
5355: LD_STRING gamma
5357: PPUSH
5358: CALL_OW 500
// uc_side := 1 ;
5362: LD_ADDR_OWVAR 20
5366: PUSH
5367: LD_INT 1
5369: ST_TO_ADDR
// uc_nation := 1 ;
5370: LD_ADDR_OWVAR 21
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// hc_importance := 0 ;
5378: LD_ADDR_OWVAR 32
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5386: LD_ADDR_OWVAR 26
5390: PUSH
5391: LD_STRING Jeremy Sikorski
5393: ST_TO_ADDR
// hc_gallery := us ;
5394: LD_ADDR_OWVAR 33
5398: PUSH
5399: LD_STRING us
5401: ST_TO_ADDR
// hc_face_number := 19 ;
5402: LD_ADDR_OWVAR 34
5406: PUSH
5407: LD_INT 19
5409: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5410: LD_ADDR_OWVAR 31
5414: PUSH
5415: LD_VAR 0 5
5419: PPUSH
5420: LD_VAR 0 5
5424: PUSH
5425: LD_INT 2
5427: PLUS
5428: PPUSH
5429: CALL_OW 12
5433: PUSH
5434: LD_INT 4
5436: PUSH
5437: LD_INT 6
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: ST_TO_ADDR
// hc_sex := sex_male ;
5449: LD_ADDR_OWVAR 27
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// hc_class := 1 ;
5457: LD_ADDR_OWVAR 28
5461: PUSH
5462: LD_INT 1
5464: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5465: LD_ADDR_OWVAR 29
5469: PUSH
5470: LD_INT 10
5472: PUSH
5473: LD_INT 11
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: ST_TO_ADDR
// sikorski := CreateHuman ;
5480: LD_ADDR_EXP 9
5484: PUSH
5485: CALL_OW 44
5489: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5490: LD_ADDR_OWVAR 26
5494: PUSH
5495: LD_STRING Lucy Donaldson
5497: ST_TO_ADDR
// hc_gallery := us ;
5498: LD_ADDR_OWVAR 33
5502: PUSH
5503: LD_STRING us
5505: ST_TO_ADDR
// hc_face_number := 2 ;
5506: LD_ADDR_OWVAR 34
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5514: LD_ADDR_OWVAR 31
5518: PUSH
5519: LD_VAR 0 5
5523: PPUSH
5524: LD_VAR 0 5
5528: PUSH
5529: LD_INT 2
5531: PLUS
5532: PPUSH
5533: CALL_OW 12
5537: PUSH
5538: LD_INT 6
5540: PUSH
5541: LD_INT 4
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: ST_TO_ADDR
// hc_sex := sex_female ;
5553: LD_ADDR_OWVAR 27
5557: PUSH
5558: LD_INT 2
5560: ST_TO_ADDR
// hc_class := 1 ;
5561: LD_ADDR_OWVAR 28
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// donald := CreateHuman ;
5569: LD_ADDR_EXP 13
5573: PUSH
5574: CALL_OW 44
5578: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5579: LD_ADDR_OWVAR 26
5583: PUSH
5584: LD_STRING Peter Van Houten
5586: ST_TO_ADDR
// hc_gallery := us ;
5587: LD_ADDR_OWVAR 33
5591: PUSH
5592: LD_STRING us
5594: ST_TO_ADDR
// hc_face_number := 16 ;
5595: LD_ADDR_OWVAR 34
5599: PUSH
5600: LD_INT 16
5602: ST_TO_ADDR
// hc_sex := sex_male ;
5603: LD_ADDR_OWVAR 27
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// van := CreateHuman ;
5611: LD_ADDR_EXP 14
5615: PUSH
5616: CALL_OW 44
5620: ST_TO_ADDR
// hc_importance := 0 ;
5621: LD_ADDR_OWVAR 32
5625: PUSH
5626: LD_INT 0
5628: ST_TO_ADDR
// case dif of 1 :
5629: LD_EXP 1
5633: PUSH
5634: LD_INT 1
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5642
5640: GO 5653
5642: POP
// lw = 1 ; 2 :
5643: LD_ADDR_VAR 0 8
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
5651: GO 5700
5653: LD_INT 2
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5661
5659: GO 5680
5661: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5662: LD_ADDR_VAR 0 8
5666: PUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: CALL_OW 12
5677: ST_TO_ADDR
5678: GO 5700
5680: LD_INT 3
5682: DOUBLE
5683: EQUAL
5684: IFTRUE 5688
5686: GO 5699
5688: POP
// lw = 2 ; end ;
5689: LD_ADDR_VAR 0 8
5693: PUSH
5694: LD_INT 2
5696: ST_TO_ADDR
5697: GO 5700
5699: POP
// case lw of 1 :
5700: LD_VAR 0 8
5704: PUSH
5705: LD_INT 1
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5728
5713: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5714: LD_EXP 13
5718: PPUSH
5719: LD_INT 25
5721: PPUSH
5722: CALL_OW 52
5726: GO 5752
5728: LD_INT 2
5730: DOUBLE
5731: EQUAL
5732: IFTRUE 5736
5734: GO 5751
5736: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5737: LD_EXP 14
5741: PPUSH
5742: LD_INT 25
5744: PPUSH
5745: CALL_OW 52
5749: GO 5752
5751: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5752: LD_ADDR_VAR 0 2
5756: PUSH
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 30
5769: PUSH
5770: LD_INT 32
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: PUSH
5786: FOR_IN
5787: IFFALSE 5841
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5789: LD_INT 1
5791: PPUSH
5792: LD_VAR 0 5
5796: PPUSH
5797: CALL 734 0 2
5801: PPUSH
5802: LD_VAR 0 2
5806: PPUSH
5807: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5811: LD_VAR 0 2
5815: PPUSH
5816: LD_VAR 0 6
5820: PUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 12
5833: ARRAY
5834: PPUSH
5835: CALL_OW 431
// end ;
5839: GO 5786
5841: POP
5842: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5843: LD_ADDR_VAR 0 7
5847: PUSH
5848: LD_INT 22
5850: PUSH
5851: LD_INT 1
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 2
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 1
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 5
5873: PUSH
5874: EMPTY
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 69
5890: ST_TO_ADDR
// for i = 1 to sol do
5891: LD_ADDR_VAR 0 2
5895: PUSH
5896: DOUBLE
5897: LD_INT 1
5899: DEC
5900: ST_TO_ADDR
5901: LD_VAR 0 7
5905: PUSH
5906: FOR_TO
5907: IFFALSE 5929
// SetTag ( sol [ i ] , 1 ) ;
5909: LD_VAR 0 7
5913: PUSH
5914: LD_VAR 0 2
5918: ARRAY
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: CALL_OW 109
5927: GO 5906
5929: POP
5930: POP
// for i = 1 to 3 do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: DOUBLE
5937: LD_INT 1
5939: DEC
5940: ST_TO_ADDR
5941: LD_INT 3
5943: PUSH
5944: FOR_TO
5945: IFFALSE 5969
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5947: LD_INT 3
5949: PPUSH
5950: LD_VAR 0 5
5954: PPUSH
5955: CALL 734 0 2
5959: PPUSH
5960: LD_INT 56
5962: PPUSH
5963: CALL_OW 52
5967: GO 5944
5969: POP
5970: POP
// for i = 1 to 6 do
5971: LD_ADDR_VAR 0 2
5975: PUSH
5976: DOUBLE
5977: LD_INT 1
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 6
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6009
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
5987: LD_INT 3
5989: PPUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: CALL 734 0 2
5999: PPUSH
6000: LD_INT 26
6002: PPUSH
6003: CALL_OW 52
6007: GO 5984
6009: POP
6010: POP
// for i = 1 to 5 do
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: DOUBLE
6017: LD_INT 1
6019: DEC
6020: ST_TO_ADDR
6021: LD_INT 5
6023: PUSH
6024: FOR_TO
6025: IFFALSE 6052
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_VAR 0 5
6034: PPUSH
6035: CALL 734 0 2
6039: PPUSH
6040: LD_INT 7
6042: PPUSH
6043: LD_INT 0
6045: PPUSH
6046: CALL_OW 49
6050: GO 6024
6052: POP
6053: POP
// for i = 1 to 3 do
6054: LD_ADDR_VAR 0 2
6058: PUSH
6059: DOUBLE
6060: LD_INT 1
6062: DEC
6063: ST_TO_ADDR
6064: LD_INT 3
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6092
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6070: LD_INT 4
6072: PPUSH
6073: LD_VAR 0 5
6077: PPUSH
6078: CALL 734 0 2
6082: PPUSH
6083: LD_INT 46
6085: PPUSH
6086: CALL_OW 52
6090: GO 6067
6092: POP
6093: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 30
6111: PUSH
6112: LD_INT 5
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PPUSH
6123: CALL_OW 69
6127: PUSH
6128: FOR_IN
6129: IFFALSE 6243
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6131: LD_INT 5
6133: PPUSH
6134: LD_VAR 0 5
6138: PPUSH
6139: CALL 734 0 2
6143: PPUSH
6144: LD_VAR 0 2
6148: PPUSH
6149: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6153: LD_INT 5
6155: PPUSH
6156: LD_VAR 0 5
6160: PPUSH
6161: CALL 734 0 2
6165: PPUSH
6166: LD_VAR 0 2
6170: PPUSH
6171: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6175: LD_INT 1
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: CALL 734 0 2
6187: PPUSH
6188: LD_VAR 0 2
6192: PPUSH
6193: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6197: LD_INT 1
6199: PPUSH
6200: LD_VAR 0 5
6204: PPUSH
6205: CALL 734 0 2
6209: PPUSH
6210: LD_VAR 0 2
6214: PPUSH
6215: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6219: LD_INT 1
6221: PPUSH
6222: LD_VAR 0 5
6226: PPUSH
6227: CALL 734 0 2
6231: PPUSH
6232: LD_VAR 0 2
6236: PPUSH
6237: CALL_OW 52
// end ;
6241: GO 6128
6243: POP
6244: POP
// if dif > 1 then
6245: LD_EXP 1
6249: PUSH
6250: LD_INT 1
6252: GREATER
6253: IFFALSE 6326
// for i = 1 to ( dif - 1 ) do
6255: LD_ADDR_VAR 0 2
6259: PUSH
6260: DOUBLE
6261: LD_INT 1
6263: DEC
6264: ST_TO_ADDR
6265: LD_EXP 1
6269: PUSH
6270: LD_INT 1
6272: MINUS
6273: PUSH
6274: FOR_TO
6275: IFFALSE 6324
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6277: LD_ADDR_EXP 17
6281: PUSH
6282: LD_EXP 17
6286: PUSH
6287: LD_INT 1
6289: PPUSH
6290: LD_VAR 0 5
6294: PPUSH
6295: CALL 734 0 2
6299: ADD
6300: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6301: LD_EXP 17
6305: PUSH
6306: LD_VAR 0 2
6310: ARRAY
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: LD_INT 0
6317: PPUSH
6318: CALL_OW 49
// end ;
6322: GO 6274
6324: POP
6325: POP
// game_started := true ;
6326: LD_ADDR_EXP 10
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6334: LD_INT 26
6336: PPUSH
6337: LD_INT 3
6339: PPUSH
6340: LD_INT 2
6342: PPUSH
6343: LD_INT 2
6345: PPUSH
6346: LD_INT 13
6348: PPUSH
6349: CALL_OW 125
// while ( contact_am = false ) do
6353: LD_EXP 16
6357: PUSH
6358: LD_INT 0
6360: EQUAL
6361: IFFALSE 6372
// begin Wait ( 0 0$01 ) ;
6363: LD_INT 35
6365: PPUSH
6366: CALL_OW 67
// end ;
6370: GO 6353
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6372: LD_INT 8400
6374: PUSH
6375: LD_INT 6300
6377: PUSH
6378: LD_INT 5250
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_EXP 1
6390: ARRAY
6391: PPUSH
6392: CALL_OW 67
// case dif of 1 :
6396: LD_EXP 1
6400: PUSH
6401: LD_INT 1
6403: DOUBLE
6404: EQUAL
6405: IFTRUE 6409
6407: GO 6584
6409: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6410: LD_INT 26
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 1
6418: PPUSH
6419: LD_INT 2
6421: PPUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: LD_INT 1
6442: PPUSH
6443: LD_INT 4
6445: PPUSH
6446: CALL_OW 12
6450: ARRAY
6451: PPUSH
6452: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6456: LD_INT 26
6458: PPUSH
6459: LD_INT 3
6461: PPUSH
6462: LD_INT 1
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: LD_INT 4
6470: PUSH
6471: LD_INT 5
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 1
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: CALL_OW 12
6492: ARRAY
6493: PPUSH
6494: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6498: LD_INT 26
6500: PPUSH
6501: LD_INT 3
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: LD_INT 4
6512: PUSH
6513: LD_INT 5
6515: PUSH
6516: LD_INT 5
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_INT 3
6529: PPUSH
6530: CALL_OW 12
6534: ARRAY
6535: PPUSH
6536: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6540: LD_INT 26
6542: PPUSH
6543: LD_INT 3
6545: PPUSH
6546: LD_INT 1
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: LD_INT 4
6554: PUSH
6555: LD_INT 3
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 3
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: PPUSH
6578: CALL_OW 185
// end ; 2 :
6582: GO 7111
6584: LD_INT 2
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6805
6592: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6593: LD_INT 26
6595: PPUSH
6596: LD_INT 3
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 2
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 5
6610: PUSH
6611: LD_INT 5
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6635: LD_INT 26
6637: PPUSH
6638: LD_INT 3
6640: PPUSH
6641: LD_INT 1
6643: PPUSH
6644: LD_INT 2
6646: PPUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 5
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_INT 3
6666: PPUSH
6667: CALL_OW 12
6671: ARRAY
6672: PPUSH
6673: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6677: LD_INT 26
6679: PPUSH
6680: LD_INT 3
6682: PPUSH
6683: LD_INT 1
6685: PPUSH
6686: LD_INT 2
6688: PPUSH
6689: LD_INT 4
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 1
6705: PPUSH
6706: LD_INT 3
6708: PPUSH
6709: CALL_OW 12
6713: ARRAY
6714: PPUSH
6715: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6719: LD_INT 26
6721: PPUSH
6722: LD_INT 4
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_INT 2
6730: PPUSH
6731: LD_INT 4
6733: PUSH
6734: LD_INT 5
6736: PUSH
6737: LD_INT 6
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 1
6747: PPUSH
6748: LD_INT 3
6750: PPUSH
6751: CALL_OW 12
6755: ARRAY
6756: PPUSH
6757: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6761: LD_INT 26
6763: PPUSH
6764: LD_INT 4
6766: PPUSH
6767: LD_INT 1
6769: PPUSH
6770: LD_INT 2
6772: PPUSH
6773: LD_INT 4
6775: PUSH
6776: LD_INT 5
6778: PUSH
6779: LD_INT 6
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 1
6789: PPUSH
6790: LD_INT 3
6792: PPUSH
6793: CALL_OW 12
6797: ARRAY
6798: PPUSH
6799: CALL_OW 185
// end ; 3 :
6803: GO 7111
6805: LD_INT 3
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 7110
6813: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6814: LD_INT 26
6816: PPUSH
6817: LD_INT 3
6819: PPUSH
6820: LD_INT 1
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: LD_INT 4
6828: PUSH
6829: LD_INT 5
6831: PUSH
6832: LD_INT 5
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 1
6842: PPUSH
6843: LD_INT 3
6845: PPUSH
6846: CALL_OW 12
6850: ARRAY
6851: PPUSH
6852: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6856: LD_INT 26
6858: PPUSH
6859: LD_INT 3
6861: PPUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_INT 2
6867: PPUSH
6868: LD_INT 4
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: LD_INT 5
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 1
6884: PPUSH
6885: LD_INT 3
6887: PPUSH
6888: CALL_OW 12
6892: ARRAY
6893: PPUSH
6894: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6898: LD_INT 26
6900: PPUSH
6901: LD_INT 3
6903: PPUSH
6904: LD_INT 1
6906: PPUSH
6907: LD_INT 2
6909: PPUSH
6910: LD_INT 4
6912: PUSH
6913: LD_INT 5
6915: PUSH
6916: LD_INT 5
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 1
6926: PPUSH
6927: LD_INT 3
6929: PPUSH
6930: CALL_OW 12
6934: ARRAY
6935: PPUSH
6936: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6940: LD_INT 26
6942: PPUSH
6943: LD_INT 3
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 2
6951: PPUSH
6952: LD_INT 4
6954: PUSH
6955: LD_INT 5
6957: PUSH
6958: LD_INT 5
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 1
6968: PPUSH
6969: LD_INT 3
6971: PPUSH
6972: CALL_OW 12
6976: ARRAY
6977: PPUSH
6978: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6982: LD_INT 26
6984: PPUSH
6985: LD_INT 4
6987: PPUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: LD_INT 4
6996: PUSH
6997: LD_INT 5
6999: PUSH
7000: LD_INT 6
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 1
7010: PPUSH
7011: LD_INT 3
7013: PPUSH
7014: CALL_OW 12
7018: ARRAY
7019: PPUSH
7020: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7024: LD_INT 26
7026: PPUSH
7027: LD_INT 4
7029: PPUSH
7030: LD_INT 1
7032: PPUSH
7033: LD_INT 2
7035: PPUSH
7036: LD_INT 4
7038: PUSH
7039: LD_INT 5
7041: PUSH
7042: LD_INT 6
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 1
7052: PPUSH
7053: LD_INT 3
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7066: LD_INT 26
7068: PPUSH
7069: LD_INT 4
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: LD_INT 4
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 1
7094: PPUSH
7095: LD_INT 3
7097: PPUSH
7098: CALL_OW 12
7102: ARRAY
7103: PPUSH
7104: CALL_OW 185
// end ; end ;
7108: GO 7111
7110: POP
// end ;
7111: LD_VAR 0 1
7115: RET
// every 0 0$01 do var i , filter ;
7116: GO 7118
7118: DISABLE
7119: LD_INT 0
7121: PPUSH
7122: PPUSH
// begin enable ;
7123: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7124: LD_INT 22
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 25
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PUSH
7153: LD_INT 0
7155: GREATER
7156: IFFALSE 7165
// RaiseSailEvent ( 3 ) ;
7158: LD_INT 3
7160: PPUSH
7161: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7165: LD_INT 22
7167: PUSH
7168: LD_INT 1
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 21
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 3
7187: PUSH
7188: LD_INT 24
7190: PUSH
7191: LD_INT 1000
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PPUSH
7207: CALL_OW 69
7211: PUSH
7212: LD_INT 0
7214: GREATER
7215: IFFALSE 7226
// RaiseSailEvent ( 1 ) else
7217: LD_INT 1
7219: PPUSH
7220: CALL_OW 427
7224: GO 7233
// RaiseSailEvent ( 2 ) ;
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7233: LD_INT 22
7235: PUSH
7236: LD_INT 1
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 30
7245: PUSH
7246: LD_INT 5
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: PUSH
7262: LD_INT 0
7264: GREATER
7265: IFFALSE 7274
// RaiseSailEvent ( 4 ) ;
7267: LD_INT 4
7269: PPUSH
7270: CALL_OW 427
// if gamma_towers > 0 then
7274: LD_EXP 18
7278: PUSH
7279: LD_INT 0
7281: GREATER
7282: IFFALSE 7291
// RaiseSailEvent ( 5 ) ;
7284: LD_INT 5
7286: PPUSH
7287: CALL_OW 427
// end ;
7291: PPOPN 2
7293: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7294: GO 7296
7296: DISABLE
7297: LD_INT 0
7299: PPUSH
7300: PPUSH
// begin enable ;
7301: ENABLE
// if new_veh > 0 then
7302: LD_EXP 19
7306: PUSH
7307: LD_INT 0
7309: GREATER
7310: IFFALSE 7497
// while ( new_veh > 0 ) do
7312: LD_EXP 19
7316: PUSH
7317: LD_INT 0
7319: GREATER
7320: IFFALSE 7497
// begin Wait ( 0 0$01 ) ;
7322: LD_INT 35
7324: PPUSH
7325: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7329: LD_INT 26
7331: PPUSH
7332: CALL_OW 461
7336: PUSH
7337: LD_INT 2
7339: EQUAL
7340: IFFALSE 7495
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7342: LD_ADDR_VAR 0 1
7346: PUSH
7347: LD_INT 2
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: LD_INT 4
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 4
7370: PPUSH
7371: CALL_OW 12
7375: ARRAY
7376: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7377: LD_VAR 0 1
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: IN
7392: IFFALSE 7427
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7394: LD_ADDR_VAR 0 2
7398: PUSH
7399: LD_INT 4
7401: PUSH
7402: LD_INT 5
7404: PUSH
7405: LD_INT 7
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 1
7415: PPUSH
7416: LD_INT 3
7418: PPUSH
7419: CALL_OW 12
7423: ARRAY
7424: ST_TO_ADDR
7425: GO 7458
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7427: LD_ADDR_VAR 0 2
7431: PUSH
7432: LD_INT 5
7434: PUSH
7435: LD_INT 7
7437: PUSH
7438: LD_INT 6
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_INT 3
7451: PPUSH
7452: CALL_OW 12
7456: ARRAY
7457: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7458: LD_INT 26
7460: PPUSH
7461: LD_VAR 0 1
7465: PPUSH
7466: LD_INT 1
7468: PPUSH
7469: LD_INT 2
7471: PPUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 125
// new_veh := new_veh - 1 ;
7481: LD_ADDR_EXP 19
7485: PUSH
7486: LD_EXP 19
7490: PUSH
7491: LD_INT 1
7493: MINUS
7494: ST_TO_ADDR
// end ; end ;
7495: GO 7312
// end ;
7497: PPOPN 2
7499: END
// every 0 0$01 do var v , filter , am_cmeh ;
7500: GO 7502
7502: DISABLE
7503: LD_INT 0
7505: PPUSH
7506: PPUSH
7507: PPUSH
// begin enable ;
7508: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7509: LD_ADDR_VAR 0 3
7513: PUSH
7514: LD_INT 56
7516: PPUSH
7517: CALL_OW 313
7521: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: LD_INT 22
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 33
7539: PUSH
7540: LD_INT 2
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 50
7549: PUSH
7550: EMPTY
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: ST_TO_ADDR
// if filter > 0 then
7566: LD_VAR 0 2
7570: PUSH
7571: LD_INT 0
7573: GREATER
7574: IFFALSE 7642
// begin for v in filter do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_VAR 0 2
7585: PUSH
7586: FOR_IN
7587: IFFALSE 7640
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7589: LD_VAR 0 1
7593: PPUSH
7594: CALL_OW 312
7598: NOT
7599: PUSH
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 302
7609: AND
7610: IFFALSE 7638
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_VAR 0 3
7621: PUSH
7622: LD_INT 1
7624: PPUSH
7625: LD_INT 3
7627: PPUSH
7628: CALL_OW 12
7632: ARRAY
7633: PPUSH
7634: CALL_OW 135
// end ;
7638: GO 7586
7640: POP
7641: POP
// end ; end ;
7642: PPOPN 3
7644: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7645: LD_INT 33
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 34
7660: PUSH
7661: LD_INT 13
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: PUSH
7681: LD_INT 4
7683: PUSH
7684: LD_INT 5
7686: PUSH
7687: LD_INT 7
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PUSH
7695: LD_EXP 1
7699: ARRAY
7700: EQUAL
7701: PUSH
7702: LD_INT 26
7704: PPUSH
7705: CALL_OW 461
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: AND
7714: IFFALSE 7925
7716: GO 7718
7718: DISABLE
7719: LD_INT 0
7721: PPUSH
7722: PPUSH
7723: PPUSH
// begin enable ;
7724: ENABLE
// if Sikorski_Ar then
7725: LD_EXP 12
7729: IFFALSE 7806
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7731: LD_ADDR_EXP 11
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: LD_INT 22
7741: PUSH
7742: LD_INT 4
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 22
7751: PUSH
7752: LD_INT 1
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: LD_INT 33
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 13
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: ST_TO_ADDR
7804: GO 7847
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7806: LD_ADDR_EXP 11
7810: PUSH
7811: LD_INT 33
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 34
7826: PUSH
7827: LD_INT 13
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 69
7846: ST_TO_ADDR
// repeat begin for un in SForce do
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_EXP 11
7856: PUSH
7857: FOR_IN
7858: IFFALSE 7913
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7860: LD_ADDR_VAR 0 3
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: LD_VAR 0 2
7894: PPUSH
7895: CALL_OW 74
7899: PPUSH
7900: CALL_OW 115
// Wait ( 0 0$01 ) ;
7904: LD_INT 35
7906: PPUSH
7907: CALL_OW 67
// end ;
7911: GO 7857
7913: POP
7914: POP
// end until SForce = 0 ;
7915: LD_EXP 11
7919: PUSH
7920: LD_INT 0
7922: EQUAL
7923: IFFALSE 7847
// end ;
7925: PPOPN 3
7927: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7928: LD_INT 0
7930: PPUSH
7931: PPUSH
7932: PPUSH
7933: PPUSH
7934: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 14
7942: PPUSH
7943: EMPTY
7944: PPUSH
7945: CALL_OW 70
7949: ST_TO_ADDR
// if tmp then
7950: LD_VAR 0 6
7954: IFFALSE 7988
// for i in tmp do
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_VAR 0 6
7965: PUSH
7966: FOR_IN
7967: IFFALSE 7986
// ComMoveXY ( i , 42 , 23 ) ;
7969: LD_VAR 0 3
7973: PPUSH
7974: LD_INT 42
7976: PPUSH
7977: LD_INT 23
7979: PPUSH
7980: CALL_OW 111
7984: GO 7966
7986: POP
7987: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
7988: LD_INT 14
7990: PPUSH
7991: LD_INT 1
7993: PPUSH
7994: CALL_OW 286
// uc_side := 4 ;
7998: LD_ADDR_OWVAR 20
8002: PUSH
8003: LD_INT 4
8005: ST_TO_ADDR
// uc_nation := 1 ;
8006: LD_ADDR_OWVAR 21
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8014: LD_ADDR_OWVAR 37
8018: PUSH
8019: LD_INT 4
8021: ST_TO_ADDR
// vc_control := control_manual ;
8022: LD_ADDR_OWVAR 38
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// vc_engine := engine_combustion ;
8030: LD_ADDR_OWVAR 39
8034: PUSH
8035: LD_INT 1
8037: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8038: LD_ADDR_OWVAR 40
8042: PUSH
8043: LD_INT 4
8045: PUSH
8046: LD_INT 5
8048: PUSH
8049: LD_INT 7
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_EXP 1
8061: ARRAY
8062: ST_TO_ADDR
// veh := CreateVehicle ;
8063: LD_ADDR_VAR 0 5
8067: PUSH
8068: CALL_OW 45
8072: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8073: LD_VAR 0 5
8077: PPUSH
8078: LD_INT 2
8080: PPUSH
8081: LD_INT 0
8083: PPUSH
8084: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8088: LD_EXP 9
8092: PPUSH
8093: LD_VAR 0 5
8097: PPUSH
8098: CALL_OW 52
// SetMark ( veh , 1 ) ;
8102: LD_VAR 0 5
8106: PPUSH
8107: LD_INT 1
8109: PPUSH
8110: CALL_OW 242
// while ( num > 0 ) do
8114: LD_VAR 0 1
8118: PUSH
8119: LD_INT 0
8121: GREATER
8122: IFFALSE 8289
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8124: LD_INT 3
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 3
8132: PUSH
8133: LD_INT 4
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: LD_EXP 1
8146: PPUSH
8147: LD_INT 4
8149: PPUSH
8150: CALL_OW 12
8154: ARRAY
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 4
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: LD_INT 5
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_EXP 1
8184: PUSH
8185: LD_INT 1
8187: PLUS
8188: PPUSH
8189: CALL_OW 12
8193: ARRAY
8194: PPUSH
8195: LD_INT 11
8197: PPUSH
8198: LD_INT 2
8200: PPUSH
8201: LD_INT 5
8203: PUSH
8204: LD_INT 6
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: LD_EXP 1
8219: ARRAY
8220: PPUSH
8221: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8225: LD_ADDR_VAR 0 4
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8245: LD_VAR 0 4
8249: PUSH
8250: LD_VAR 0 4
8254: ARRAY
8255: PPUSH
8256: LD_INT 36
8258: PPUSH
8259: LD_INT 18
8261: PPUSH
8262: CALL_OW 111
// Wait ( 0 0$02 ) ;
8266: LD_INT 70
8268: PPUSH
8269: CALL_OW 67
// num := num - 1 ;
8273: LD_ADDR_VAR 0 1
8277: PUSH
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: MINUS
8286: ST_TO_ADDR
// end ;
8287: GO 8114
// end ;
8289: LD_VAR 0 2
8293: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8294: LD_EXP 17
8298: PUSH
8299: LD_INT 0
8301: GREATER
8302: IFFALSE 8571
8304: GO 8306
8306: DISABLE
8307: LD_INT 0
8309: PPUSH
// begin enable ;
8310: ENABLE
// for i = 1 to patrol do
8311: LD_ADDR_VAR 0 1
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_EXP 17
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8569
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8329: LD_EXP 17
8333: PUSH
8334: LD_VAR 0 1
8338: ARRAY
8339: PUSH
8340: LD_EXP 17
8344: PUSH
8345: LD_VAR 0 1
8349: ARRAY
8350: PPUSH
8351: CALL_OW 300
8355: AND
8356: PUSH
8357: LD_EXP 17
8361: PUSH
8362: LD_VAR 0 1
8366: ARRAY
8367: PPUSH
8368: CALL_OW 314
8372: NOT
8373: AND
8374: IFFALSE 8524
// case i of 1 :
8376: LD_VAR 0 1
8380: PUSH
8381: LD_INT 1
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8452
8389: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8390: LD_EXP 17
8394: PUSH
8395: LD_VAR 0 1
8399: ARRAY
8400: PPUSH
8401: LD_INT 53
8403: PPUSH
8404: LD_INT 91
8406: PPUSH
8407: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8411: LD_EXP 17
8415: PUSH
8416: LD_VAR 0 1
8420: ARRAY
8421: PPUSH
8422: LD_INT 245
8424: PPUSH
8425: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8429: LD_EXP 17
8433: PUSH
8434: LD_VAR 0 1
8438: ARRAY
8439: PPUSH
8440: LD_INT 24
8442: PPUSH
8443: LD_INT 26
8445: PPUSH
8446: CALL_OW 171
// end ; 2 :
8450: GO 8524
8452: LD_INT 2
8454: DOUBLE
8455: EQUAL
8456: IFTRUE 8460
8458: GO 8523
8460: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8461: LD_EXP 17
8465: PUSH
8466: LD_VAR 0 1
8470: ARRAY
8471: PPUSH
8472: LD_INT 83
8474: PPUSH
8475: LD_INT 57
8477: PPUSH
8478: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8482: LD_EXP 17
8486: PUSH
8487: LD_VAR 0 1
8491: ARRAY
8492: PPUSH
8493: LD_INT 245
8495: PPUSH
8496: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8500: LD_EXP 17
8504: PUSH
8505: LD_VAR 0 1
8509: ARRAY
8510: PPUSH
8511: LD_INT 47
8513: PPUSH
8514: LD_INT 53
8516: PPUSH
8517: CALL_OW 171
// end ; end ;
8521: GO 8524
8523: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8524: LD_EXP 17
8528: PUSH
8529: LD_VAR 0 1
8533: ARRAY
8534: PPUSH
8535: CALL_OW 256
8539: PUSH
8540: LD_INT 1000
8542: LESS
8543: IFFALSE 8567
// patrol := patrol diff patrol [ i ] ;
8545: LD_ADDR_EXP 17
8549: PUSH
8550: LD_EXP 17
8554: PUSH
8555: LD_EXP 17
8559: PUSH
8560: LD_VAR 0 1
8564: ARRAY
8565: DIFF
8566: ST_TO_ADDR
// end ;
8567: GO 8326
8569: POP
8570: POP
// end ;
8571: PPOPN 1
8573: END
// every 0 0$10 do
8574: GO 8576
8576: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8577: LD_INT 42000
8579: PUSH
8580: LD_INT 37800
8582: PUSH
8583: LD_INT 33600
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: LD_EXP 1
8595: ARRAY
8596: PPUSH
8597: CALL_OW 67
// if not contact_am then
8601: LD_EXP 16
8605: NOT
8606: IFFALSE 8616
// contact_am := true ;
8608: LD_ADDR_EXP 16
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// end ; end_of_file
8616: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8617: LD_INT 0
8619: PPUSH
// comp_tested := false ;
8620: LD_ADDR_EXP 22
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sikorski_run := false ;
8628: LD_ADDR_EXP 23
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// InGameOn ;
8636: CALL_OW 8
// CenterNowOnUnits ( commander ) ;
8640: LD_EXP 3
8644: PPUSH
8645: CALL_OW 87
// Wait ( 0 0$01 ) ;
8649: LD_INT 35
8651: PPUSH
8652: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8656: LD_EXP 2
8660: PPUSH
8661: LD_STRING Dpop1
8663: PPUSH
8664: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8668: LD_EXP 3
8672: PPUSH
8673: LD_STRING Dcomm1
8675: PPUSH
8676: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8680: LD_EXP 2
8684: PPUSH
8685: LD_STRING Dpop2
8687: PPUSH
8688: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8692: LD_EXP 3
8696: PPUSH
8697: LD_STRING Dcomm2
8699: PPUSH
8700: CALL_OW 88
// InGameOff ;
8704: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8708: LD_STRING T1
8710: PPUSH
8711: CALL_OW 337
// end ;
8715: LD_VAR 0 1
8719: RET
// every 0 0$01 trigger timer > 2 2$01 do
8720: LD_EXP 24
8724: PUSH
8725: LD_INT 4235
8727: GREATER
8728: IFFALSE 8745
8730: GO 8732
8732: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8733: LD_EXP 5
8737: PPUSH
8738: LD_STRING DKap1
8740: PPUSH
8741: CALL_OW 94
// end ;
8745: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8746: LD_EXP 24
8750: PUSH
8751: LD_INT 46200
8753: PUSH
8754: LD_INT 52500
8756: PUSH
8757: LD_INT 63000
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: LIST
8764: PUSH
8765: LD_EXP 1
8769: ARRAY
8770: GREATER
8771: IFFALSE 9138
8773: GO 8775
8775: DISABLE
8776: LD_INT 0
8778: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8779: LD_EXP 5
8783: PPUSH
8784: LD_STRING DKap2
8786: PPUSH
8787: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8791: LD_INT 10
8793: PPUSH
8794: CALL_OW 67
// Say ( commander , Dcommk ) ;
8798: LD_EXP 3
8802: PPUSH
8803: LD_STRING Dcommk
8805: PPUSH
8806: CALL_OW 88
// Wait ( 0 0$44 ) ;
8810: LD_INT 1540
8812: PPUSH
8813: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8817: LD_EXP 5
8821: PPUSH
8822: LD_INT 3
8824: PPUSH
8825: LD_INT 0
8827: PPUSH
8828: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8832: LD_EXP 5
8836: PPUSH
8837: CALL_OW 87
// Wait ( 0 0$10 ) ;
8841: LD_INT 350
8843: PPUSH
8844: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8848: LD_INT 6
8850: PUSH
8851: LD_INT 7
8853: PUSH
8854: LD_INT 8
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: PUSH
8862: LD_EXP 1
8866: ARRAY
8867: PPUSH
8868: CALL 7928 0 1
// Wait ( 2 2$00 ) ;
8872: LD_INT 4200
8874: PPUSH
8875: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8879: LD_INT 33
8881: PUSH
8882: LD_INT 2
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 3
8891: PUSH
8892: LD_INT 34
8894: PUSH
8895: LD_INT 13
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PPUSH
8910: CALL_OW 69
8914: PUSH
8915: LD_INT 3
8917: LESS
8918: IFFALSE 8929
// Wait ( 0 0$01 ) ;
8920: LD_INT 35
8922: PPUSH
8923: CALL_OW 67
8927: GO 8879
// uc_side := 4 ;
8929: LD_ADDR_OWVAR 20
8933: PUSH
8934: LD_INT 4
8936: ST_TO_ADDR
// uc_nation := 1 ;
8937: LD_ADDR_OWVAR 21
8941: PUSH
8942: LD_INT 1
8944: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8945: LD_ADDR_VAR 0 1
8949: PUSH
8950: DOUBLE
8951: LD_INT 1
8953: DEC
8954: ST_TO_ADDR
8955: LD_INT 4
8957: PUSH
8958: LD_INT 5
8960: PUSH
8961: LD_INT 6
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: LIST
8968: PUSH
8969: LD_EXP 1
8973: ARRAY
8974: PUSH
8975: FOR_TO
8976: IFFALSE 9018
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
8978: LD_INT 1
8980: PPUSH
8981: LD_INT 5
8983: PUSH
8984: LD_INT 6
8986: PUSH
8987: LD_INT 7
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: LIST
8994: PUSH
8995: LD_EXP 1
8999: ARRAY
9000: PPUSH
9001: CALL 734 0 2
9005: PPUSH
9006: LD_INT 4
9008: PPUSH
9009: LD_INT 0
9011: PPUSH
9012: CALL_OW 49
9016: GO 8975
9018: POP
9019: POP
// sikorski_ar := true ;
9020: LD_ADDR_EXP 12
9024: PUSH
9025: LD_INT 1
9027: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9028: LD_EXP 9
9032: PPUSH
9033: LD_STRING DSik1
9035: PPUSH
9036: CALL_OW 94
// Wait ( 0 0$30 ) ;
9040: LD_INT 1050
9042: PPUSH
9043: CALL_OW 67
// uc_side := 4 ;
9047: LD_ADDR_OWVAR 20
9051: PUSH
9052: LD_INT 4
9054: ST_TO_ADDR
// uc_nation := 1 ;
9055: LD_ADDR_OWVAR 21
9059: PUSH
9060: LD_INT 1
9062: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9063: LD_ADDR_VAR 0 1
9067: PUSH
9068: DOUBLE
9069: LD_INT 1
9071: DEC
9072: ST_TO_ADDR
9073: LD_INT 3
9075: PUSH
9076: LD_INT 4
9078: PUSH
9079: LD_INT 4
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: LIST
9086: PUSH
9087: LD_EXP 1
9091: ARRAY
9092: PUSH
9093: FOR_TO
9094: IFFALSE 9136
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9096: LD_INT 1
9098: PPUSH
9099: LD_INT 5
9101: PUSH
9102: LD_INT 6
9104: PUSH
9105: LD_INT 7
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: PUSH
9113: LD_EXP 1
9117: ARRAY
9118: PPUSH
9119: CALL 734 0 2
9123: PPUSH
9124: LD_INT 13
9126: PPUSH
9127: LD_INT 0
9129: PPUSH
9130: CALL_OW 49
9134: GO 9093
9136: POP
9137: POP
// end ;
9138: PPOPN 1
9140: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9141: LD_EXP 9
9145: PPUSH
9146: CALL_OW 256
9150: PUSH
9151: LD_INT 650
9153: LESS
9154: IFFALSE 9236
9156: GO 9158
9158: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9159: LD_EXP 9
9163: PPUSH
9164: LD_STRING DSik2
9166: PPUSH
9167: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9171: LD_EXP 9
9175: PPUSH
9176: CALL_OW 300
9180: IFFALSE 9236
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9182: LD_EXP 9
9186: PPUSH
9187: LD_INT 2
9189: PPUSH
9190: CALL_OW 113
// Wait ( 0 0$01 ) ;
9194: LD_INT 35
9196: PPUSH
9197: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9201: LD_EXP 9
9205: PPUSH
9206: LD_INT 2
9208: PPUSH
9209: CALL_OW 308
9213: IFFALSE 9234
// begin RemoveUnit ( sikorski ) ;
9215: LD_EXP 9
9219: PPUSH
9220: CALL_OW 64
// break ;
9224: GO 9236
// sikorski_run := true ;
9226: LD_ADDR_EXP 23
9230: PUSH
9231: LD_INT 1
9233: ST_TO_ADDR
// end ; end ;
9234: GO 9171
// end ;
9236: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9237: LD_EXP 9
9241: PPUSH
9242: CALL_OW 256
9246: PUSH
9247: LD_INT 1000
9249: LESS
9250: IFFALSE 9267
9252: GO 9254
9254: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9255: LD_EXP 9
9259: PPUSH
9260: LD_STRING DSkik3
9262: PPUSH
9263: CALL_OW 88
9267: END
// every 1 1$45 + 0 0$15 do
9268: GO 9270
9270: DISABLE
// begin enable ;
9271: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9272: LD_INT 1
9274: PPUSH
9275: LD_INT 5
9277: PPUSH
9278: CALL_OW 12
9282: PPUSH
9283: LD_INT 8
9285: PPUSH
9286: LD_INT 1
9288: PPUSH
9289: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9293: LD_INT 350
9295: PPUSH
9296: LD_INT 1295
9298: PPUSH
9299: CALL_OW 12
9303: PPUSH
9304: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9308: LD_INT 1
9310: PPUSH
9311: LD_INT 5
9313: PPUSH
9314: CALL_OW 12
9318: PPUSH
9319: LD_INT 1
9321: PPUSH
9322: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9326: LD_INT 350
9328: PPUSH
9329: LD_INT 1050
9331: PPUSH
9332: CALL_OW 12
9336: PPUSH
9337: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9341: LD_EXP 24
9345: PUSH
9346: LD_INT 25200
9348: PUSH
9349: LD_INT 23100
9351: PUSH
9352: LD_INT 21000
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: PUSH
9360: LD_EXP 1
9364: ARRAY
9365: LESSEQUAL
9366: IFFALSE 9389
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9368: LD_INT 1
9370: PPUSH
9371: LD_INT 5
9373: PPUSH
9374: CALL_OW 12
9378: PPUSH
9379: LD_INT 8
9381: PPUSH
9382: LD_INT 1
9384: PPUSH
9385: CALL_OW 55
// end ;
9389: END
// export timer ; every 1 do
9390: GO 9392
9392: DISABLE
// timer := 0 0$00 ;
9393: LD_ADDR_EXP 24
9397: PUSH
9398: LD_INT 0
9400: ST_TO_ADDR
9401: END
// every 0 0$01 do
9402: GO 9404
9404: DISABLE
// begin enable ;
9405: ENABLE
// Display_Strings := [ #tick , timer ] ;
9406: LD_ADDR_OWVAR 47
9410: PUSH
9411: LD_STRING #tick
9413: PUSH
9414: LD_EXP 24
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9423: LD_ADDR_EXP 24
9427: PUSH
9428: LD_EXP 24
9432: PUSH
9433: LD_INT 35
9435: PLUS
9436: ST_TO_ADDR
// end ; end_of_file
9437: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
9438: LD_INT 0
9440: PPUSH
// ru_radar := 98 ;
9441: LD_ADDR_EXP 25
9445: PUSH
9446: LD_INT 98
9448: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9449: LD_ADDR_EXP 26
9453: PUSH
9454: LD_INT 89
9456: ST_TO_ADDR
// us_hack := 99 ;
9457: LD_ADDR_EXP 27
9461: PUSH
9462: LD_INT 99
9464: ST_TO_ADDR
// us_artillery := 97 ;
9465: LD_ADDR_EXP 28
9469: PUSH
9470: LD_INT 97
9472: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9473: LD_ADDR_EXP 29
9477: PUSH
9478: LD_INT 91
9480: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
9481: LD_ADDR_EXP 30
9485: PUSH
9486: LD_INT 92
9488: ST_TO_ADDR
// tech_Artillery := 80 ;
9489: LD_ADDR_EXP 31
9493: PUSH
9494: LD_INT 80
9496: ST_TO_ADDR
// tech_RadMat := 81 ;
9497: LD_ADDR_EXP 32
9501: PUSH
9502: LD_INT 81
9504: ST_TO_ADDR
// tech_BasicTools := 82 ;
9505: LD_ADDR_EXP 33
9509: PUSH
9510: LD_INT 82
9512: ST_TO_ADDR
// tech_Cargo := 83 ;
9513: LD_ADDR_EXP 34
9517: PUSH
9518: LD_INT 83
9520: ST_TO_ADDR
// tech_Track := 84 ;
9521: LD_ADDR_EXP 35
9525: PUSH
9526: LD_INT 84
9528: ST_TO_ADDR
// tech_Crane := 85 ;
9529: LD_ADDR_EXP 36
9533: PUSH
9534: LD_INT 85
9536: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9537: LD_ADDR_EXP 37
9541: PUSH
9542: LD_INT 86
9544: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9545: LD_ADDR_EXP 38
9549: PUSH
9550: LD_INT 87
9552: ST_TO_ADDR
// end ;
9553: LD_VAR 0 1
9557: RET
// every 1 do
9558: GO 9560
9560: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
9561: CALL 9438 0 0
9565: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9566: GO 9568
9568: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9569: LD_STRING initStreamRollete();
9571: PPUSH
9572: CALL_OW 559
// InitStreamMode ;
9576: CALL 9585 0 0
// DefineStreamItems ( ) ;
9580: CALL 10025 0 0
// end ;
9584: END
// function InitStreamMode ; begin
9585: LD_INT 0
9587: PPUSH
// streamModeActive := false ;
9588: LD_ADDR_EXP 39
9592: PUSH
9593: LD_INT 0
9595: ST_TO_ADDR
// normalCounter := 36 ;
9596: LD_ADDR_EXP 40
9600: PUSH
9601: LD_INT 36
9603: ST_TO_ADDR
// hardcoreCounter := 16 ;
9604: LD_ADDR_EXP 41
9608: PUSH
9609: LD_INT 16
9611: ST_TO_ADDR
// sRocket := false ;
9612: LD_ADDR_EXP 44
9616: PUSH
9617: LD_INT 0
9619: ST_TO_ADDR
// sSpeed := false ;
9620: LD_ADDR_EXP 43
9624: PUSH
9625: LD_INT 0
9627: ST_TO_ADDR
// sEngine := false ;
9628: LD_ADDR_EXP 45
9632: PUSH
9633: LD_INT 0
9635: ST_TO_ADDR
// sSpec := false ;
9636: LD_ADDR_EXP 42
9640: PUSH
9641: LD_INT 0
9643: ST_TO_ADDR
// sLevel := false ;
9644: LD_ADDR_EXP 46
9648: PUSH
9649: LD_INT 0
9651: ST_TO_ADDR
// sArmoury := false ;
9652: LD_ADDR_EXP 47
9656: PUSH
9657: LD_INT 0
9659: ST_TO_ADDR
// sRadar := false ;
9660: LD_ADDR_EXP 48
9664: PUSH
9665: LD_INT 0
9667: ST_TO_ADDR
// sBunker := false ;
9668: LD_ADDR_EXP 49
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// sHack := false ;
9676: LD_ADDR_EXP 50
9680: PUSH
9681: LD_INT 0
9683: ST_TO_ADDR
// sFire := false ;
9684: LD_ADDR_EXP 51
9688: PUSH
9689: LD_INT 0
9691: ST_TO_ADDR
// sRefresh := false ;
9692: LD_ADDR_EXP 52
9696: PUSH
9697: LD_INT 0
9699: ST_TO_ADDR
// sExp := false ;
9700: LD_ADDR_EXP 53
9704: PUSH
9705: LD_INT 0
9707: ST_TO_ADDR
// sDepot := false ;
9708: LD_ADDR_EXP 54
9712: PUSH
9713: LD_INT 0
9715: ST_TO_ADDR
// sFlag := false ;
9716: LD_ADDR_EXP 55
9720: PUSH
9721: LD_INT 0
9723: ST_TO_ADDR
// sKamikadze := false ;
9724: LD_ADDR_EXP 63
9728: PUSH
9729: LD_INT 0
9731: ST_TO_ADDR
// sTroll := false ;
9732: LD_ADDR_EXP 64
9736: PUSH
9737: LD_INT 0
9739: ST_TO_ADDR
// sSlow := false ;
9740: LD_ADDR_EXP 65
9744: PUSH
9745: LD_INT 0
9747: ST_TO_ADDR
// sLack := false ;
9748: LD_ADDR_EXP 66
9752: PUSH
9753: LD_INT 0
9755: ST_TO_ADDR
// sTank := false ;
9756: LD_ADDR_EXP 68
9760: PUSH
9761: LD_INT 0
9763: ST_TO_ADDR
// sRemote := false ;
9764: LD_ADDR_EXP 69
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// sPowell := false ;
9772: LD_ADDR_EXP 70
9776: PUSH
9777: LD_INT 0
9779: ST_TO_ADDR
// sTeleport := false ;
9780: LD_ADDR_EXP 73
9784: PUSH
9785: LD_INT 0
9787: ST_TO_ADDR
// sOilTower := false ;
9788: LD_ADDR_EXP 75
9792: PUSH
9793: LD_INT 0
9795: ST_TO_ADDR
// sShovel := false ;
9796: LD_ADDR_EXP 76
9800: PUSH
9801: LD_INT 0
9803: ST_TO_ADDR
// sSheik := false ;
9804: LD_ADDR_EXP 77
9808: PUSH
9809: LD_INT 0
9811: ST_TO_ADDR
// sEarthquake := false ;
9812: LD_ADDR_EXP 79
9816: PUSH
9817: LD_INT 0
9819: ST_TO_ADDR
// sAI := false ;
9820: LD_ADDR_EXP 80
9824: PUSH
9825: LD_INT 0
9827: ST_TO_ADDR
// sCargo := false ;
9828: LD_ADDR_EXP 83
9832: PUSH
9833: LD_INT 0
9835: ST_TO_ADDR
// sDLaser := false ;
9836: LD_ADDR_EXP 84
9840: PUSH
9841: LD_INT 0
9843: ST_TO_ADDR
// sExchange := false ;
9844: LD_ADDR_EXP 85
9848: PUSH
9849: LD_INT 0
9851: ST_TO_ADDR
// sFac := false ;
9852: LD_ADDR_EXP 86
9856: PUSH
9857: LD_INT 0
9859: ST_TO_ADDR
// sPower := false ;
9860: LD_ADDR_EXP 87
9864: PUSH
9865: LD_INT 0
9867: ST_TO_ADDR
// sRandom := false ;
9868: LD_ADDR_EXP 88
9872: PUSH
9873: LD_INT 0
9875: ST_TO_ADDR
// sShield := false ;
9876: LD_ADDR_EXP 89
9880: PUSH
9881: LD_INT 0
9883: ST_TO_ADDR
// sTime := false ;
9884: LD_ADDR_EXP 90
9888: PUSH
9889: LD_INT 0
9891: ST_TO_ADDR
// sTools := false ;
9892: LD_ADDR_EXP 91
9896: PUSH
9897: LD_INT 0
9899: ST_TO_ADDR
// sSold := false ;
9900: LD_ADDR_EXP 56
9904: PUSH
9905: LD_INT 0
9907: ST_TO_ADDR
// sDiff := false ;
9908: LD_ADDR_EXP 57
9912: PUSH
9913: LD_INT 0
9915: ST_TO_ADDR
// sFog := false ;
9916: LD_ADDR_EXP 60
9920: PUSH
9921: LD_INT 0
9923: ST_TO_ADDR
// sReset := false ;
9924: LD_ADDR_EXP 61
9928: PUSH
9929: LD_INT 0
9931: ST_TO_ADDR
// sSun := false ;
9932: LD_ADDR_EXP 62
9936: PUSH
9937: LD_INT 0
9939: ST_TO_ADDR
// sTiger := false ;
9940: LD_ADDR_EXP 58
9944: PUSH
9945: LD_INT 0
9947: ST_TO_ADDR
// sBomb := false ;
9948: LD_ADDR_EXP 59
9952: PUSH
9953: LD_INT 0
9955: ST_TO_ADDR
// sWound := false ;
9956: LD_ADDR_EXP 67
9960: PUSH
9961: LD_INT 0
9963: ST_TO_ADDR
// sBetray := false ;
9964: LD_ADDR_EXP 71
9968: PUSH
9969: LD_INT 0
9971: ST_TO_ADDR
// sContamin := false ;
9972: LD_ADDR_EXP 72
9976: PUSH
9977: LD_INT 0
9979: ST_TO_ADDR
// sOil := false ;
9980: LD_ADDR_EXP 74
9984: PUSH
9985: LD_INT 0
9987: ST_TO_ADDR
// sStu := false ;
9988: LD_ADDR_EXP 78
9992: PUSH
9993: LD_INT 0
9995: ST_TO_ADDR
// sBazooka := false ;
9996: LD_ADDR_EXP 81
10000: PUSH
10001: LD_INT 0
10003: ST_TO_ADDR
// sMortar := false ;
10004: LD_ADDR_EXP 82
10008: PUSH
10009: LD_INT 0
10011: ST_TO_ADDR
// sRanger := false ;
10012: LD_ADDR_EXP 92
10016: PUSH
10017: LD_INT 0
10019: ST_TO_ADDR
// end ;
10020: LD_VAR 0 1
10024: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
10025: LD_INT 0
10027: PPUSH
10028: PPUSH
10029: PPUSH
10030: PPUSH
10031: PPUSH
// result := [ ] ;
10032: LD_ADDR_VAR 0 1
10036: PUSH
10037: EMPTY
10038: ST_TO_ADDR
// if campaign_id = 1 then
10039: LD_OWVAR 69
10043: PUSH
10044: LD_INT 1
10046: EQUAL
10047: IFFALSE 12985
// begin case mission_number of 1 :
10049: LD_OWVAR 70
10053: PUSH
10054: LD_INT 1
10056: DOUBLE
10057: EQUAL
10058: IFTRUE 10062
10060: GO 10126
10062: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
10063: LD_ADDR_VAR 0 1
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: LD_INT 4
10073: PUSH
10074: LD_INT 11
10076: PUSH
10077: LD_INT 12
10079: PUSH
10080: LD_INT 15
10082: PUSH
10083: LD_INT 16
10085: PUSH
10086: LD_INT 22
10088: PUSH
10089: LD_INT 23
10091: PUSH
10092: LD_INT 26
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 101
10108: PUSH
10109: LD_INT 102
10111: PUSH
10112: LD_INT 106
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: ST_TO_ADDR
10124: GO 12983
10126: LD_INT 2
10128: DOUBLE
10129: EQUAL
10130: IFTRUE 10134
10132: GO 10206
10134: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
10135: LD_ADDR_VAR 0 1
10139: PUSH
10140: LD_INT 2
10142: PUSH
10143: LD_INT 4
10145: PUSH
10146: LD_INT 11
10148: PUSH
10149: LD_INT 12
10151: PUSH
10152: LD_INT 15
10154: PUSH
10155: LD_INT 16
10157: PUSH
10158: LD_INT 22
10160: PUSH
10161: LD_INT 23
10163: PUSH
10164: LD_INT 26
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 101
10180: PUSH
10181: LD_INT 102
10183: PUSH
10184: LD_INT 105
10186: PUSH
10187: LD_INT 106
10189: PUSH
10190: LD_INT 108
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: ST_TO_ADDR
10204: GO 12983
10206: LD_INT 3
10208: DOUBLE
10209: EQUAL
10210: IFTRUE 10214
10212: GO 10290
10214: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
10215: LD_ADDR_VAR 0 1
10219: PUSH
10220: LD_INT 2
10222: PUSH
10223: LD_INT 4
10225: PUSH
10226: LD_INT 5
10228: PUSH
10229: LD_INT 11
10231: PUSH
10232: LD_INT 12
10234: PUSH
10235: LD_INT 15
10237: PUSH
10238: LD_INT 16
10240: PUSH
10241: LD_INT 22
10243: PUSH
10244: LD_INT 26
10246: PUSH
10247: LD_INT 36
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 101
10264: PUSH
10265: LD_INT 102
10267: PUSH
10268: LD_INT 105
10270: PUSH
10271: LD_INT 106
10273: PUSH
10274: LD_INT 108
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: ST_TO_ADDR
10288: GO 12983
10290: LD_INT 4
10292: DOUBLE
10293: EQUAL
10294: IFTRUE 10298
10296: GO 10382
10298: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10299: LD_ADDR_VAR 0 1
10303: PUSH
10304: LD_INT 2
10306: PUSH
10307: LD_INT 4
10309: PUSH
10310: LD_INT 5
10312: PUSH
10313: LD_INT 8
10315: PUSH
10316: LD_INT 11
10318: PUSH
10319: LD_INT 12
10321: PUSH
10322: LD_INT 15
10324: PUSH
10325: LD_INT 16
10327: PUSH
10328: LD_INT 22
10330: PUSH
10331: LD_INT 23
10333: PUSH
10334: LD_INT 26
10336: PUSH
10337: LD_INT 36
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 101
10356: PUSH
10357: LD_INT 102
10359: PUSH
10360: LD_INT 105
10362: PUSH
10363: LD_INT 106
10365: PUSH
10366: LD_INT 108
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: ST_TO_ADDR
10380: GO 12983
10382: LD_INT 5
10384: DOUBLE
10385: EQUAL
10386: IFTRUE 10390
10388: GO 10490
10390: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10391: LD_ADDR_VAR 0 1
10395: PUSH
10396: LD_INT 2
10398: PUSH
10399: LD_INT 4
10401: PUSH
10402: LD_INT 5
10404: PUSH
10405: LD_INT 6
10407: PUSH
10408: LD_INT 8
10410: PUSH
10411: LD_INT 11
10413: PUSH
10414: LD_INT 12
10416: PUSH
10417: LD_INT 15
10419: PUSH
10420: LD_INT 16
10422: PUSH
10423: LD_INT 22
10425: PUSH
10426: LD_INT 23
10428: PUSH
10429: LD_INT 25
10431: PUSH
10432: LD_INT 26
10434: PUSH
10435: LD_INT 36
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 101
10456: PUSH
10457: LD_INT 102
10459: PUSH
10460: LD_INT 105
10462: PUSH
10463: LD_INT 106
10465: PUSH
10466: LD_INT 108
10468: PUSH
10469: LD_INT 109
10471: PUSH
10472: LD_INT 112
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: ST_TO_ADDR
10488: GO 12983
10490: LD_INT 6
10492: DOUBLE
10493: EQUAL
10494: IFTRUE 10498
10496: GO 10618
10498: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10499: LD_ADDR_VAR 0 1
10503: PUSH
10504: LD_INT 2
10506: PUSH
10507: LD_INT 4
10509: PUSH
10510: LD_INT 5
10512: PUSH
10513: LD_INT 6
10515: PUSH
10516: LD_INT 8
10518: PUSH
10519: LD_INT 11
10521: PUSH
10522: LD_INT 12
10524: PUSH
10525: LD_INT 15
10527: PUSH
10528: LD_INT 16
10530: PUSH
10531: LD_INT 20
10533: PUSH
10534: LD_INT 21
10536: PUSH
10537: LD_INT 22
10539: PUSH
10540: LD_INT 23
10542: PUSH
10543: LD_INT 25
10545: PUSH
10546: LD_INT 26
10548: PUSH
10549: LD_INT 30
10551: PUSH
10552: LD_INT 31
10554: PUSH
10555: LD_INT 32
10557: PUSH
10558: LD_INT 36
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 101
10584: PUSH
10585: LD_INT 102
10587: PUSH
10588: LD_INT 105
10590: PUSH
10591: LD_INT 106
10593: PUSH
10594: LD_INT 108
10596: PUSH
10597: LD_INT 109
10599: PUSH
10600: LD_INT 112
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: ST_TO_ADDR
10616: GO 12983
10618: LD_INT 7
10620: DOUBLE
10621: EQUAL
10622: IFTRUE 10626
10624: GO 10726
10626: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10627: LD_ADDR_VAR 0 1
10631: PUSH
10632: LD_INT 2
10634: PUSH
10635: LD_INT 4
10637: PUSH
10638: LD_INT 5
10640: PUSH
10641: LD_INT 7
10643: PUSH
10644: LD_INT 11
10646: PUSH
10647: LD_INT 12
10649: PUSH
10650: LD_INT 15
10652: PUSH
10653: LD_INT 16
10655: PUSH
10656: LD_INT 20
10658: PUSH
10659: LD_INT 21
10661: PUSH
10662: LD_INT 22
10664: PUSH
10665: LD_INT 23
10667: PUSH
10668: LD_INT 25
10670: PUSH
10671: LD_INT 26
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: PUSH
10690: LD_INT 101
10692: PUSH
10693: LD_INT 102
10695: PUSH
10696: LD_INT 103
10698: PUSH
10699: LD_INT 105
10701: PUSH
10702: LD_INT 106
10704: PUSH
10705: LD_INT 108
10707: PUSH
10708: LD_INT 112
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: ST_TO_ADDR
10724: GO 12983
10726: LD_INT 8
10728: DOUBLE
10729: EQUAL
10730: IFTRUE 10734
10732: GO 10862
10734: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10735: LD_ADDR_VAR 0 1
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: LD_INT 4
10745: PUSH
10746: LD_INT 5
10748: PUSH
10749: LD_INT 6
10751: PUSH
10752: LD_INT 7
10754: PUSH
10755: LD_INT 8
10757: PUSH
10758: LD_INT 11
10760: PUSH
10761: LD_INT 12
10763: PUSH
10764: LD_INT 15
10766: PUSH
10767: LD_INT 16
10769: PUSH
10770: LD_INT 20
10772: PUSH
10773: LD_INT 21
10775: PUSH
10776: LD_INT 22
10778: PUSH
10779: LD_INT 23
10781: PUSH
10782: LD_INT 25
10784: PUSH
10785: LD_INT 26
10787: PUSH
10788: LD_INT 30
10790: PUSH
10791: LD_INT 31
10793: PUSH
10794: LD_INT 32
10796: PUSH
10797: LD_INT 36
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 101
10824: PUSH
10825: LD_INT 102
10827: PUSH
10828: LD_INT 103
10830: PUSH
10831: LD_INT 105
10833: PUSH
10834: LD_INT 106
10836: PUSH
10837: LD_INT 108
10839: PUSH
10840: LD_INT 109
10842: PUSH
10843: LD_INT 112
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: ST_TO_ADDR
10860: GO 12983
10862: LD_INT 9
10864: DOUBLE
10865: EQUAL
10866: IFTRUE 10870
10868: GO 11006
10870: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10871: LD_ADDR_VAR 0 1
10875: PUSH
10876: LD_INT 2
10878: PUSH
10879: LD_INT 4
10881: PUSH
10882: LD_INT 5
10884: PUSH
10885: LD_INT 6
10887: PUSH
10888: LD_INT 7
10890: PUSH
10891: LD_INT 8
10893: PUSH
10894: LD_INT 11
10896: PUSH
10897: LD_INT 12
10899: PUSH
10900: LD_INT 15
10902: PUSH
10903: LD_INT 16
10905: PUSH
10906: LD_INT 20
10908: PUSH
10909: LD_INT 21
10911: PUSH
10912: LD_INT 22
10914: PUSH
10915: LD_INT 23
10917: PUSH
10918: LD_INT 25
10920: PUSH
10921: LD_INT 26
10923: PUSH
10924: LD_INT 28
10926: PUSH
10927: LD_INT 30
10929: PUSH
10930: LD_INT 31
10932: PUSH
10933: LD_INT 32
10935: PUSH
10936: LD_INT 36
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: PUSH
10962: LD_INT 101
10964: PUSH
10965: LD_INT 102
10967: PUSH
10968: LD_INT 103
10970: PUSH
10971: LD_INT 105
10973: PUSH
10974: LD_INT 106
10976: PUSH
10977: LD_INT 108
10979: PUSH
10980: LD_INT 109
10982: PUSH
10983: LD_INT 112
10985: PUSH
10986: LD_INT 114
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: ST_TO_ADDR
11004: GO 12983
11006: LD_INT 10
11008: DOUBLE
11009: EQUAL
11010: IFTRUE 11014
11012: GO 11198
11014: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
11015: LD_ADDR_VAR 0 1
11019: PUSH
11020: LD_INT 2
11022: PUSH
11023: LD_INT 4
11025: PUSH
11026: LD_INT 5
11028: PUSH
11029: LD_INT 6
11031: PUSH
11032: LD_INT 7
11034: PUSH
11035: LD_INT 8
11037: PUSH
11038: LD_INT 9
11040: PUSH
11041: LD_INT 10
11043: PUSH
11044: LD_INT 11
11046: PUSH
11047: LD_INT 12
11049: PUSH
11050: LD_INT 13
11052: PUSH
11053: LD_INT 14
11055: PUSH
11056: LD_INT 15
11058: PUSH
11059: LD_INT 16
11061: PUSH
11062: LD_INT 17
11064: PUSH
11065: LD_INT 18
11067: PUSH
11068: LD_INT 19
11070: PUSH
11071: LD_INT 20
11073: PUSH
11074: LD_INT 21
11076: PUSH
11077: LD_INT 22
11079: PUSH
11080: LD_INT 23
11082: PUSH
11083: LD_INT 24
11085: PUSH
11086: LD_INT 25
11088: PUSH
11089: LD_INT 26
11091: PUSH
11092: LD_INT 28
11094: PUSH
11095: LD_INT 30
11097: PUSH
11098: LD_INT 31
11100: PUSH
11101: LD_INT 32
11103: PUSH
11104: LD_INT 36
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: PUSH
11138: LD_INT 101
11140: PUSH
11141: LD_INT 102
11143: PUSH
11144: LD_INT 103
11146: PUSH
11147: LD_INT 104
11149: PUSH
11150: LD_INT 105
11152: PUSH
11153: LD_INT 106
11155: PUSH
11156: LD_INT 107
11158: PUSH
11159: LD_INT 108
11161: PUSH
11162: LD_INT 109
11164: PUSH
11165: LD_INT 110
11167: PUSH
11168: LD_INT 111
11170: PUSH
11171: LD_INT 112
11173: PUSH
11174: LD_INT 114
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: ST_TO_ADDR
11196: GO 12983
11198: LD_INT 11
11200: DOUBLE
11201: EQUAL
11202: IFTRUE 11206
11204: GO 11398
11206: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
11207: LD_ADDR_VAR 0 1
11211: PUSH
11212: LD_INT 2
11214: PUSH
11215: LD_INT 3
11217: PUSH
11218: LD_INT 4
11220: PUSH
11221: LD_INT 5
11223: PUSH
11224: LD_INT 6
11226: PUSH
11227: LD_INT 7
11229: PUSH
11230: LD_INT 8
11232: PUSH
11233: LD_INT 9
11235: PUSH
11236: LD_INT 10
11238: PUSH
11239: LD_INT 11
11241: PUSH
11242: LD_INT 12
11244: PUSH
11245: LD_INT 13
11247: PUSH
11248: LD_INT 14
11250: PUSH
11251: LD_INT 15
11253: PUSH
11254: LD_INT 16
11256: PUSH
11257: LD_INT 17
11259: PUSH
11260: LD_INT 18
11262: PUSH
11263: LD_INT 19
11265: PUSH
11266: LD_INT 20
11268: PUSH
11269: LD_INT 21
11271: PUSH
11272: LD_INT 22
11274: PUSH
11275: LD_INT 23
11277: PUSH
11278: LD_INT 24
11280: PUSH
11281: LD_INT 25
11283: PUSH
11284: LD_INT 26
11286: PUSH
11287: LD_INT 28
11289: PUSH
11290: LD_INT 30
11292: PUSH
11293: LD_INT 31
11295: PUSH
11296: LD_INT 32
11298: PUSH
11299: LD_INT 34
11301: PUSH
11302: LD_INT 36
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 101
11340: PUSH
11341: LD_INT 102
11343: PUSH
11344: LD_INT 103
11346: PUSH
11347: LD_INT 104
11349: PUSH
11350: LD_INT 105
11352: PUSH
11353: LD_INT 106
11355: PUSH
11356: LD_INT 107
11358: PUSH
11359: LD_INT 108
11361: PUSH
11362: LD_INT 109
11364: PUSH
11365: LD_INT 110
11367: PUSH
11368: LD_INT 111
11370: PUSH
11371: LD_INT 112
11373: PUSH
11374: LD_INT 114
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: ST_TO_ADDR
11396: GO 12983
11398: LD_INT 12
11400: DOUBLE
11401: EQUAL
11402: IFTRUE 11406
11404: GO 11614
11406: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11407: LD_ADDR_VAR 0 1
11411: PUSH
11412: LD_INT 1
11414: PUSH
11415: LD_INT 2
11417: PUSH
11418: LD_INT 3
11420: PUSH
11421: LD_INT 4
11423: PUSH
11424: LD_INT 5
11426: PUSH
11427: LD_INT 6
11429: PUSH
11430: LD_INT 7
11432: PUSH
11433: LD_INT 8
11435: PUSH
11436: LD_INT 9
11438: PUSH
11439: LD_INT 10
11441: PUSH
11442: LD_INT 11
11444: PUSH
11445: LD_INT 12
11447: PUSH
11448: LD_INT 13
11450: PUSH
11451: LD_INT 14
11453: PUSH
11454: LD_INT 15
11456: PUSH
11457: LD_INT 16
11459: PUSH
11460: LD_INT 17
11462: PUSH
11463: LD_INT 18
11465: PUSH
11466: LD_INT 19
11468: PUSH
11469: LD_INT 20
11471: PUSH
11472: LD_INT 21
11474: PUSH
11475: LD_INT 22
11477: PUSH
11478: LD_INT 23
11480: PUSH
11481: LD_INT 24
11483: PUSH
11484: LD_INT 25
11486: PUSH
11487: LD_INT 26
11489: PUSH
11490: LD_INT 27
11492: PUSH
11493: LD_INT 28
11495: PUSH
11496: LD_INT 30
11498: PUSH
11499: LD_INT 31
11501: PUSH
11502: LD_INT 32
11504: PUSH
11505: LD_INT 33
11507: PUSH
11508: LD_INT 34
11510: PUSH
11511: LD_INT 36
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 101
11552: PUSH
11553: LD_INT 102
11555: PUSH
11556: LD_INT 103
11558: PUSH
11559: LD_INT 104
11561: PUSH
11562: LD_INT 105
11564: PUSH
11565: LD_INT 106
11567: PUSH
11568: LD_INT 107
11570: PUSH
11571: LD_INT 108
11573: PUSH
11574: LD_INT 109
11576: PUSH
11577: LD_INT 110
11579: PUSH
11580: LD_INT 111
11582: PUSH
11583: LD_INT 112
11585: PUSH
11586: LD_INT 113
11588: PUSH
11589: LD_INT 114
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: ST_TO_ADDR
11612: GO 12983
11614: LD_INT 13
11616: DOUBLE
11617: EQUAL
11618: IFTRUE 11622
11620: GO 11818
11622: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11623: LD_ADDR_VAR 0 1
11627: PUSH
11628: LD_INT 1
11630: PUSH
11631: LD_INT 2
11633: PUSH
11634: LD_INT 3
11636: PUSH
11637: LD_INT 4
11639: PUSH
11640: LD_INT 5
11642: PUSH
11643: LD_INT 8
11645: PUSH
11646: LD_INT 9
11648: PUSH
11649: LD_INT 10
11651: PUSH
11652: LD_INT 11
11654: PUSH
11655: LD_INT 12
11657: PUSH
11658: LD_INT 14
11660: PUSH
11661: LD_INT 15
11663: PUSH
11664: LD_INT 16
11666: PUSH
11667: LD_INT 17
11669: PUSH
11670: LD_INT 18
11672: PUSH
11673: LD_INT 19
11675: PUSH
11676: LD_INT 20
11678: PUSH
11679: LD_INT 21
11681: PUSH
11682: LD_INT 22
11684: PUSH
11685: LD_INT 23
11687: PUSH
11688: LD_INT 24
11690: PUSH
11691: LD_INT 25
11693: PUSH
11694: LD_INT 26
11696: PUSH
11697: LD_INT 27
11699: PUSH
11700: LD_INT 28
11702: PUSH
11703: LD_INT 30
11705: PUSH
11706: LD_INT 31
11708: PUSH
11709: LD_INT 32
11711: PUSH
11712: LD_INT 33
11714: PUSH
11715: LD_INT 34
11717: PUSH
11718: LD_INT 36
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 101
11756: PUSH
11757: LD_INT 102
11759: PUSH
11760: LD_INT 103
11762: PUSH
11763: LD_INT 104
11765: PUSH
11766: LD_INT 105
11768: PUSH
11769: LD_INT 106
11771: PUSH
11772: LD_INT 107
11774: PUSH
11775: LD_INT 108
11777: PUSH
11778: LD_INT 109
11780: PUSH
11781: LD_INT 110
11783: PUSH
11784: LD_INT 111
11786: PUSH
11787: LD_INT 112
11789: PUSH
11790: LD_INT 113
11792: PUSH
11793: LD_INT 114
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: ST_TO_ADDR
11816: GO 12983
11818: LD_INT 14
11820: DOUBLE
11821: EQUAL
11822: IFTRUE 11826
11824: GO 12038
11826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11827: LD_ADDR_VAR 0 1
11831: PUSH
11832: LD_INT 1
11834: PUSH
11835: LD_INT 2
11837: PUSH
11838: LD_INT 3
11840: PUSH
11841: LD_INT 4
11843: PUSH
11844: LD_INT 5
11846: PUSH
11847: LD_INT 6
11849: PUSH
11850: LD_INT 7
11852: PUSH
11853: LD_INT 8
11855: PUSH
11856: LD_INT 9
11858: PUSH
11859: LD_INT 10
11861: PUSH
11862: LD_INT 11
11864: PUSH
11865: LD_INT 12
11867: PUSH
11868: LD_INT 13
11870: PUSH
11871: LD_INT 14
11873: PUSH
11874: LD_INT 15
11876: PUSH
11877: LD_INT 16
11879: PUSH
11880: LD_INT 17
11882: PUSH
11883: LD_INT 18
11885: PUSH
11886: LD_INT 19
11888: PUSH
11889: LD_INT 20
11891: PUSH
11892: LD_INT 21
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_INT 23
11900: PUSH
11901: LD_INT 24
11903: PUSH
11904: LD_INT 25
11906: PUSH
11907: LD_INT 26
11909: PUSH
11910: LD_INT 27
11912: PUSH
11913: LD_INT 28
11915: PUSH
11916: LD_INT 29
11918: PUSH
11919: LD_INT 30
11921: PUSH
11922: LD_INT 31
11924: PUSH
11925: LD_INT 32
11927: PUSH
11928: LD_INT 33
11930: PUSH
11931: LD_INT 34
11933: PUSH
11934: LD_INT 36
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 101
11976: PUSH
11977: LD_INT 102
11979: PUSH
11980: LD_INT 103
11982: PUSH
11983: LD_INT 104
11985: PUSH
11986: LD_INT 105
11988: PUSH
11989: LD_INT 106
11991: PUSH
11992: LD_INT 107
11994: PUSH
11995: LD_INT 108
11997: PUSH
11998: LD_INT 109
12000: PUSH
12001: LD_INT 110
12003: PUSH
12004: LD_INT 111
12006: PUSH
12007: LD_INT 112
12009: PUSH
12010: LD_INT 113
12012: PUSH
12013: LD_INT 114
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: ST_TO_ADDR
12036: GO 12983
12038: LD_INT 15
12040: DOUBLE
12041: EQUAL
12042: IFTRUE 12046
12044: GO 12258
12046: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
12047: LD_ADDR_VAR 0 1
12051: PUSH
12052: LD_INT 1
12054: PUSH
12055: LD_INT 2
12057: PUSH
12058: LD_INT 3
12060: PUSH
12061: LD_INT 4
12063: PUSH
12064: LD_INT 5
12066: PUSH
12067: LD_INT 6
12069: PUSH
12070: LD_INT 7
12072: PUSH
12073: LD_INT 8
12075: PUSH
12076: LD_INT 9
12078: PUSH
12079: LD_INT 10
12081: PUSH
12082: LD_INT 11
12084: PUSH
12085: LD_INT 12
12087: PUSH
12088: LD_INT 13
12090: PUSH
12091: LD_INT 14
12093: PUSH
12094: LD_INT 15
12096: PUSH
12097: LD_INT 16
12099: PUSH
12100: LD_INT 17
12102: PUSH
12103: LD_INT 18
12105: PUSH
12106: LD_INT 19
12108: PUSH
12109: LD_INT 20
12111: PUSH
12112: LD_INT 21
12114: PUSH
12115: LD_INT 22
12117: PUSH
12118: LD_INT 23
12120: PUSH
12121: LD_INT 24
12123: PUSH
12124: LD_INT 25
12126: PUSH
12127: LD_INT 26
12129: PUSH
12130: LD_INT 27
12132: PUSH
12133: LD_INT 28
12135: PUSH
12136: LD_INT 29
12138: PUSH
12139: LD_INT 30
12141: PUSH
12142: LD_INT 31
12144: PUSH
12145: LD_INT 32
12147: PUSH
12148: LD_INT 33
12150: PUSH
12151: LD_INT 34
12153: PUSH
12154: LD_INT 36
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: PUSH
12194: LD_INT 101
12196: PUSH
12197: LD_INT 102
12199: PUSH
12200: LD_INT 103
12202: PUSH
12203: LD_INT 104
12205: PUSH
12206: LD_INT 105
12208: PUSH
12209: LD_INT 106
12211: PUSH
12212: LD_INT 107
12214: PUSH
12215: LD_INT 108
12217: PUSH
12218: LD_INT 109
12220: PUSH
12221: LD_INT 110
12223: PUSH
12224: LD_INT 111
12226: PUSH
12227: LD_INT 112
12229: PUSH
12230: LD_INT 113
12232: PUSH
12233: LD_INT 114
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: ST_TO_ADDR
12256: GO 12983
12258: LD_INT 16
12260: DOUBLE
12261: EQUAL
12262: IFTRUE 12266
12264: GO 12390
12266: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
12267: LD_ADDR_VAR 0 1
12271: PUSH
12272: LD_INT 2
12274: PUSH
12275: LD_INT 4
12277: PUSH
12278: LD_INT 5
12280: PUSH
12281: LD_INT 7
12283: PUSH
12284: LD_INT 11
12286: PUSH
12287: LD_INT 12
12289: PUSH
12290: LD_INT 15
12292: PUSH
12293: LD_INT 16
12295: PUSH
12296: LD_INT 20
12298: PUSH
12299: LD_INT 21
12301: PUSH
12302: LD_INT 22
12304: PUSH
12305: LD_INT 23
12307: PUSH
12308: LD_INT 25
12310: PUSH
12311: LD_INT 26
12313: PUSH
12314: LD_INT 30
12316: PUSH
12317: LD_INT 31
12319: PUSH
12320: LD_INT 32
12322: PUSH
12323: LD_INT 33
12325: PUSH
12326: LD_INT 34
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 101
12352: PUSH
12353: LD_INT 102
12355: PUSH
12356: LD_INT 103
12358: PUSH
12359: LD_INT 106
12361: PUSH
12362: LD_INT 108
12364: PUSH
12365: LD_INT 112
12367: PUSH
12368: LD_INT 113
12370: PUSH
12371: LD_INT 114
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: ST_TO_ADDR
12388: GO 12983
12390: LD_INT 17
12392: DOUBLE
12393: EQUAL
12394: IFTRUE 12398
12396: GO 12610
12398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12399: LD_ADDR_VAR 0 1
12403: PUSH
12404: LD_INT 1
12406: PUSH
12407: LD_INT 2
12409: PUSH
12410: LD_INT 3
12412: PUSH
12413: LD_INT 4
12415: PUSH
12416: LD_INT 5
12418: PUSH
12419: LD_INT 6
12421: PUSH
12422: LD_INT 7
12424: PUSH
12425: LD_INT 8
12427: PUSH
12428: LD_INT 9
12430: PUSH
12431: LD_INT 10
12433: PUSH
12434: LD_INT 11
12436: PUSH
12437: LD_INT 12
12439: PUSH
12440: LD_INT 13
12442: PUSH
12443: LD_INT 14
12445: PUSH
12446: LD_INT 15
12448: PUSH
12449: LD_INT 16
12451: PUSH
12452: LD_INT 17
12454: PUSH
12455: LD_INT 18
12457: PUSH
12458: LD_INT 19
12460: PUSH
12461: LD_INT 20
12463: PUSH
12464: LD_INT 21
12466: PUSH
12467: LD_INT 22
12469: PUSH
12470: LD_INT 23
12472: PUSH
12473: LD_INT 24
12475: PUSH
12476: LD_INT 25
12478: PUSH
12479: LD_INT 26
12481: PUSH
12482: LD_INT 27
12484: PUSH
12485: LD_INT 28
12487: PUSH
12488: LD_INT 29
12490: PUSH
12491: LD_INT 30
12493: PUSH
12494: LD_INT 31
12496: PUSH
12497: LD_INT 32
12499: PUSH
12500: LD_INT 33
12502: PUSH
12503: LD_INT 34
12505: PUSH
12506: LD_INT 36
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 101
12548: PUSH
12549: LD_INT 102
12551: PUSH
12552: LD_INT 103
12554: PUSH
12555: LD_INT 104
12557: PUSH
12558: LD_INT 105
12560: PUSH
12561: LD_INT 106
12563: PUSH
12564: LD_INT 107
12566: PUSH
12567: LD_INT 108
12569: PUSH
12570: LD_INT 109
12572: PUSH
12573: LD_INT 110
12575: PUSH
12576: LD_INT 111
12578: PUSH
12579: LD_INT 112
12581: PUSH
12582: LD_INT 113
12584: PUSH
12585: LD_INT 114
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: ST_TO_ADDR
12608: GO 12983
12610: LD_INT 18
12612: DOUBLE
12613: EQUAL
12614: IFTRUE 12618
12616: GO 12754
12618: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12619: LD_ADDR_VAR 0 1
12623: PUSH
12624: LD_INT 2
12626: PUSH
12627: LD_INT 4
12629: PUSH
12630: LD_INT 5
12632: PUSH
12633: LD_INT 7
12635: PUSH
12636: LD_INT 11
12638: PUSH
12639: LD_INT 12
12641: PUSH
12642: LD_INT 15
12644: PUSH
12645: LD_INT 16
12647: PUSH
12648: LD_INT 20
12650: PUSH
12651: LD_INT 21
12653: PUSH
12654: LD_INT 22
12656: PUSH
12657: LD_INT 23
12659: PUSH
12660: LD_INT 25
12662: PUSH
12663: LD_INT 26
12665: PUSH
12666: LD_INT 30
12668: PUSH
12669: LD_INT 31
12671: PUSH
12672: LD_INT 32
12674: PUSH
12675: LD_INT 33
12677: PUSH
12678: LD_INT 34
12680: PUSH
12681: LD_INT 35
12683: PUSH
12684: LD_INT 36
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 101
12712: PUSH
12713: LD_INT 102
12715: PUSH
12716: LD_INT 103
12718: PUSH
12719: LD_INT 106
12721: PUSH
12722: LD_INT 108
12724: PUSH
12725: LD_INT 112
12727: PUSH
12728: LD_INT 113
12730: PUSH
12731: LD_INT 114
12733: PUSH
12734: LD_INT 115
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: ST_TO_ADDR
12752: GO 12983
12754: LD_INT 19
12756: DOUBLE
12757: EQUAL
12758: IFTRUE 12762
12760: GO 12982
12762: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12763: LD_ADDR_VAR 0 1
12767: PUSH
12768: LD_INT 1
12770: PUSH
12771: LD_INT 2
12773: PUSH
12774: LD_INT 3
12776: PUSH
12777: LD_INT 4
12779: PUSH
12780: LD_INT 5
12782: PUSH
12783: LD_INT 6
12785: PUSH
12786: LD_INT 7
12788: PUSH
12789: LD_INT 8
12791: PUSH
12792: LD_INT 9
12794: PUSH
12795: LD_INT 10
12797: PUSH
12798: LD_INT 11
12800: PUSH
12801: LD_INT 12
12803: PUSH
12804: LD_INT 13
12806: PUSH
12807: LD_INT 14
12809: PUSH
12810: LD_INT 15
12812: PUSH
12813: LD_INT 16
12815: PUSH
12816: LD_INT 17
12818: PUSH
12819: LD_INT 18
12821: PUSH
12822: LD_INT 19
12824: PUSH
12825: LD_INT 20
12827: PUSH
12828: LD_INT 21
12830: PUSH
12831: LD_INT 22
12833: PUSH
12834: LD_INT 23
12836: PUSH
12837: LD_INT 24
12839: PUSH
12840: LD_INT 25
12842: PUSH
12843: LD_INT 26
12845: PUSH
12846: LD_INT 27
12848: PUSH
12849: LD_INT 28
12851: PUSH
12852: LD_INT 29
12854: PUSH
12855: LD_INT 30
12857: PUSH
12858: LD_INT 31
12860: PUSH
12861: LD_INT 32
12863: PUSH
12864: LD_INT 33
12866: PUSH
12867: LD_INT 34
12869: PUSH
12870: LD_INT 35
12872: PUSH
12873: LD_INT 36
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 101
12916: PUSH
12917: LD_INT 102
12919: PUSH
12920: LD_INT 103
12922: PUSH
12923: LD_INT 104
12925: PUSH
12926: LD_INT 105
12928: PUSH
12929: LD_INT 106
12931: PUSH
12932: LD_INT 107
12934: PUSH
12935: LD_INT 108
12937: PUSH
12938: LD_INT 109
12940: PUSH
12941: LD_INT 110
12943: PUSH
12944: LD_INT 111
12946: PUSH
12947: LD_INT 112
12949: PUSH
12950: LD_INT 113
12952: PUSH
12953: LD_INT 114
12955: PUSH
12956: LD_INT 115
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: ST_TO_ADDR
12980: GO 12983
12982: POP
// end else
12983: GO 13202
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12985: LD_ADDR_VAR 0 1
12989: PUSH
12990: LD_INT 1
12992: PUSH
12993: LD_INT 2
12995: PUSH
12996: LD_INT 3
12998: PUSH
12999: LD_INT 4
13001: PUSH
13002: LD_INT 5
13004: PUSH
13005: LD_INT 6
13007: PUSH
13008: LD_INT 7
13010: PUSH
13011: LD_INT 8
13013: PUSH
13014: LD_INT 9
13016: PUSH
13017: LD_INT 10
13019: PUSH
13020: LD_INT 11
13022: PUSH
13023: LD_INT 12
13025: PUSH
13026: LD_INT 13
13028: PUSH
13029: LD_INT 14
13031: PUSH
13032: LD_INT 15
13034: PUSH
13035: LD_INT 16
13037: PUSH
13038: LD_INT 17
13040: PUSH
13041: LD_INT 18
13043: PUSH
13044: LD_INT 19
13046: PUSH
13047: LD_INT 20
13049: PUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 22
13055: PUSH
13056: LD_INT 23
13058: PUSH
13059: LD_INT 24
13061: PUSH
13062: LD_INT 25
13064: PUSH
13065: LD_INT 26
13067: PUSH
13068: LD_INT 27
13070: PUSH
13071: LD_INT 28
13073: PUSH
13074: LD_INT 29
13076: PUSH
13077: LD_INT 30
13079: PUSH
13080: LD_INT 31
13082: PUSH
13083: LD_INT 32
13085: PUSH
13086: LD_INT 33
13088: PUSH
13089: LD_INT 34
13091: PUSH
13092: LD_INT 35
13094: PUSH
13095: LD_INT 36
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: PUSH
13136: LD_INT 101
13138: PUSH
13139: LD_INT 102
13141: PUSH
13142: LD_INT 103
13144: PUSH
13145: LD_INT 104
13147: PUSH
13148: LD_INT 105
13150: PUSH
13151: LD_INT 106
13153: PUSH
13154: LD_INT 107
13156: PUSH
13157: LD_INT 108
13159: PUSH
13160: LD_INT 109
13162: PUSH
13163: LD_INT 110
13165: PUSH
13166: LD_INT 111
13168: PUSH
13169: LD_INT 112
13171: PUSH
13172: LD_INT 113
13174: PUSH
13175: LD_INT 114
13177: PUSH
13178: LD_INT 115
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: ST_TO_ADDR
// if result then
13202: LD_VAR 0 1
13206: IFFALSE 13495
// begin normal :=  ;
13208: LD_ADDR_VAR 0 3
13212: PUSH
13213: LD_STRING 
13215: ST_TO_ADDR
// hardcore :=  ;
13216: LD_ADDR_VAR 0 4
13220: PUSH
13221: LD_STRING 
13223: ST_TO_ADDR
// for i = 1 to normalCounter do
13224: LD_ADDR_VAR 0 5
13228: PUSH
13229: DOUBLE
13230: LD_INT 1
13232: DEC
13233: ST_TO_ADDR
13234: LD_EXP 40
13238: PUSH
13239: FOR_TO
13240: IFFALSE 13341
// begin tmp := 0 ;
13242: LD_ADDR_VAR 0 2
13246: PUSH
13247: LD_STRING 0
13249: ST_TO_ADDR
// if result [ 1 ] then
13250: LD_VAR 0 1
13254: PUSH
13255: LD_INT 1
13257: ARRAY
13258: IFFALSE 13323
// if result [ 1 ] [ 1 ] = i then
13260: LD_VAR 0 1
13264: PUSH
13265: LD_INT 1
13267: ARRAY
13268: PUSH
13269: LD_INT 1
13271: ARRAY
13272: PUSH
13273: LD_VAR 0 5
13277: EQUAL
13278: IFFALSE 13323
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13280: LD_ADDR_VAR 0 1
13284: PUSH
13285: LD_VAR 0 1
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: LD_VAR 0 1
13297: PUSH
13298: LD_INT 1
13300: ARRAY
13301: PPUSH
13302: LD_INT 1
13304: PPUSH
13305: CALL_OW 3
13309: PPUSH
13310: CALL_OW 1
13314: ST_TO_ADDR
// tmp := 1 ;
13315: LD_ADDR_VAR 0 2
13319: PUSH
13320: LD_STRING 1
13322: ST_TO_ADDR
// end ; normal := normal & tmp ;
13323: LD_ADDR_VAR 0 3
13327: PUSH
13328: LD_VAR 0 3
13332: PUSH
13333: LD_VAR 0 2
13337: STR
13338: ST_TO_ADDR
// end ;
13339: GO 13239
13341: POP
13342: POP
// for i = 1 to hardcoreCounter do
13343: LD_ADDR_VAR 0 5
13347: PUSH
13348: DOUBLE
13349: LD_INT 1
13351: DEC
13352: ST_TO_ADDR
13353: LD_EXP 41
13357: PUSH
13358: FOR_TO
13359: IFFALSE 13464
// begin tmp := 0 ;
13361: LD_ADDR_VAR 0 2
13365: PUSH
13366: LD_STRING 0
13368: ST_TO_ADDR
// if result [ 2 ] then
13369: LD_VAR 0 1
13373: PUSH
13374: LD_INT 2
13376: ARRAY
13377: IFFALSE 13446
// if result [ 2 ] [ 1 ] = 100 + i then
13379: LD_VAR 0 1
13383: PUSH
13384: LD_INT 2
13386: ARRAY
13387: PUSH
13388: LD_INT 1
13390: ARRAY
13391: PUSH
13392: LD_INT 100
13394: PUSH
13395: LD_VAR 0 5
13399: PLUS
13400: EQUAL
13401: IFFALSE 13446
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13403: LD_ADDR_VAR 0 1
13407: PUSH
13408: LD_VAR 0 1
13412: PPUSH
13413: LD_INT 2
13415: PPUSH
13416: LD_VAR 0 1
13420: PUSH
13421: LD_INT 2
13423: ARRAY
13424: PPUSH
13425: LD_INT 1
13427: PPUSH
13428: CALL_OW 3
13432: PPUSH
13433: CALL_OW 1
13437: ST_TO_ADDR
// tmp := 1 ;
13438: LD_ADDR_VAR 0 2
13442: PUSH
13443: LD_STRING 1
13445: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13446: LD_ADDR_VAR 0 4
13450: PUSH
13451: LD_VAR 0 4
13455: PUSH
13456: LD_VAR 0 2
13460: STR
13461: ST_TO_ADDR
// end ;
13462: GO 13358
13464: POP
13465: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13466: LD_STRING getStreamItemsFromMission("
13468: PUSH
13469: LD_VAR 0 3
13473: STR
13474: PUSH
13475: LD_STRING ","
13477: STR
13478: PUSH
13479: LD_VAR 0 4
13483: STR
13484: PUSH
13485: LD_STRING ")
13487: STR
13488: PPUSH
13489: CALL_OW 559
// end else
13493: GO 13502
// ToLua ( getStreamItemsFromMission("","") ) ;
13495: LD_STRING getStreamItemsFromMission("","")
13497: PPUSH
13498: CALL_OW 559
// end ;
13502: LD_VAR 0 1
13506: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
13507: LD_VAR 0 2
13511: PUSH
13512: LD_INT 100
13514: EQUAL
13515: IFFALSE 14464
// begin if not StreamModeActive then
13517: LD_EXP 39
13521: NOT
13522: IFFALSE 13532
// StreamModeActive := true ;
13524: LD_ADDR_EXP 39
13528: PUSH
13529: LD_INT 1
13531: ST_TO_ADDR
// if p3 = 0 then
13532: LD_VAR 0 3
13536: PUSH
13537: LD_INT 0
13539: EQUAL
13540: IFFALSE 13546
// InitStreamMode ;
13542: CALL 9585 0 0
// if p3 = 1 then
13546: LD_VAR 0 3
13550: PUSH
13551: LD_INT 1
13553: EQUAL
13554: IFFALSE 13564
// sRocket := true ;
13556: LD_ADDR_EXP 44
13560: PUSH
13561: LD_INT 1
13563: ST_TO_ADDR
// if p3 = 2 then
13564: LD_VAR 0 3
13568: PUSH
13569: LD_INT 2
13571: EQUAL
13572: IFFALSE 13582
// sSpeed := true ;
13574: LD_ADDR_EXP 43
13578: PUSH
13579: LD_INT 1
13581: ST_TO_ADDR
// if p3 = 3 then
13582: LD_VAR 0 3
13586: PUSH
13587: LD_INT 3
13589: EQUAL
13590: IFFALSE 13600
// sEngine := true ;
13592: LD_ADDR_EXP 45
13596: PUSH
13597: LD_INT 1
13599: ST_TO_ADDR
// if p3 = 4 then
13600: LD_VAR 0 3
13604: PUSH
13605: LD_INT 4
13607: EQUAL
13608: IFFALSE 13618
// sSpec := true ;
13610: LD_ADDR_EXP 42
13614: PUSH
13615: LD_INT 1
13617: ST_TO_ADDR
// if p3 = 5 then
13618: LD_VAR 0 3
13622: PUSH
13623: LD_INT 5
13625: EQUAL
13626: IFFALSE 13636
// sLevel := true ;
13628: LD_ADDR_EXP 46
13632: PUSH
13633: LD_INT 1
13635: ST_TO_ADDR
// if p3 = 6 then
13636: LD_VAR 0 3
13640: PUSH
13641: LD_INT 6
13643: EQUAL
13644: IFFALSE 13654
// sArmoury := true ;
13646: LD_ADDR_EXP 47
13650: PUSH
13651: LD_INT 1
13653: ST_TO_ADDR
// if p3 = 7 then
13654: LD_VAR 0 3
13658: PUSH
13659: LD_INT 7
13661: EQUAL
13662: IFFALSE 13672
// sRadar := true ;
13664: LD_ADDR_EXP 48
13668: PUSH
13669: LD_INT 1
13671: ST_TO_ADDR
// if p3 = 8 then
13672: LD_VAR 0 3
13676: PUSH
13677: LD_INT 8
13679: EQUAL
13680: IFFALSE 13690
// sBunker := true ;
13682: LD_ADDR_EXP 49
13686: PUSH
13687: LD_INT 1
13689: ST_TO_ADDR
// if p3 = 9 then
13690: LD_VAR 0 3
13694: PUSH
13695: LD_INT 9
13697: EQUAL
13698: IFFALSE 13708
// sHack := true ;
13700: LD_ADDR_EXP 50
13704: PUSH
13705: LD_INT 1
13707: ST_TO_ADDR
// if p3 = 10 then
13708: LD_VAR 0 3
13712: PUSH
13713: LD_INT 10
13715: EQUAL
13716: IFFALSE 13726
// sFire := true ;
13718: LD_ADDR_EXP 51
13722: PUSH
13723: LD_INT 1
13725: ST_TO_ADDR
// if p3 = 11 then
13726: LD_VAR 0 3
13730: PUSH
13731: LD_INT 11
13733: EQUAL
13734: IFFALSE 13744
// sRefresh := true ;
13736: LD_ADDR_EXP 52
13740: PUSH
13741: LD_INT 1
13743: ST_TO_ADDR
// if p3 = 12 then
13744: LD_VAR 0 3
13748: PUSH
13749: LD_INT 12
13751: EQUAL
13752: IFFALSE 13762
// sExp := true ;
13754: LD_ADDR_EXP 53
13758: PUSH
13759: LD_INT 1
13761: ST_TO_ADDR
// if p3 = 13 then
13762: LD_VAR 0 3
13766: PUSH
13767: LD_INT 13
13769: EQUAL
13770: IFFALSE 13780
// sDepot := true ;
13772: LD_ADDR_EXP 54
13776: PUSH
13777: LD_INT 1
13779: ST_TO_ADDR
// if p3 = 14 then
13780: LD_VAR 0 3
13784: PUSH
13785: LD_INT 14
13787: EQUAL
13788: IFFALSE 13798
// sFlag := true ;
13790: LD_ADDR_EXP 55
13794: PUSH
13795: LD_INT 1
13797: ST_TO_ADDR
// if p3 = 15 then
13798: LD_VAR 0 3
13802: PUSH
13803: LD_INT 15
13805: EQUAL
13806: IFFALSE 13816
// sKamikadze := true ;
13808: LD_ADDR_EXP 63
13812: PUSH
13813: LD_INT 1
13815: ST_TO_ADDR
// if p3 = 16 then
13816: LD_VAR 0 3
13820: PUSH
13821: LD_INT 16
13823: EQUAL
13824: IFFALSE 13834
// sTroll := true ;
13826: LD_ADDR_EXP 64
13830: PUSH
13831: LD_INT 1
13833: ST_TO_ADDR
// if p3 = 17 then
13834: LD_VAR 0 3
13838: PUSH
13839: LD_INT 17
13841: EQUAL
13842: IFFALSE 13852
// sSlow := true ;
13844: LD_ADDR_EXP 65
13848: PUSH
13849: LD_INT 1
13851: ST_TO_ADDR
// if p3 = 18 then
13852: LD_VAR 0 3
13856: PUSH
13857: LD_INT 18
13859: EQUAL
13860: IFFALSE 13870
// sLack := true ;
13862: LD_ADDR_EXP 66
13866: PUSH
13867: LD_INT 1
13869: ST_TO_ADDR
// if p3 = 19 then
13870: LD_VAR 0 3
13874: PUSH
13875: LD_INT 19
13877: EQUAL
13878: IFFALSE 13888
// sTank := true ;
13880: LD_ADDR_EXP 68
13884: PUSH
13885: LD_INT 1
13887: ST_TO_ADDR
// if p3 = 20 then
13888: LD_VAR 0 3
13892: PUSH
13893: LD_INT 20
13895: EQUAL
13896: IFFALSE 13906
// sRemote := true ;
13898: LD_ADDR_EXP 69
13902: PUSH
13903: LD_INT 1
13905: ST_TO_ADDR
// if p3 = 21 then
13906: LD_VAR 0 3
13910: PUSH
13911: LD_INT 21
13913: EQUAL
13914: IFFALSE 13924
// sPowell := true ;
13916: LD_ADDR_EXP 70
13920: PUSH
13921: LD_INT 1
13923: ST_TO_ADDR
// if p3 = 22 then
13924: LD_VAR 0 3
13928: PUSH
13929: LD_INT 22
13931: EQUAL
13932: IFFALSE 13942
// sTeleport := true ;
13934: LD_ADDR_EXP 73
13938: PUSH
13939: LD_INT 1
13941: ST_TO_ADDR
// if p3 = 23 then
13942: LD_VAR 0 3
13946: PUSH
13947: LD_INT 23
13949: EQUAL
13950: IFFALSE 13960
// sOilTower := true ;
13952: LD_ADDR_EXP 75
13956: PUSH
13957: LD_INT 1
13959: ST_TO_ADDR
// if p3 = 24 then
13960: LD_VAR 0 3
13964: PUSH
13965: LD_INT 24
13967: EQUAL
13968: IFFALSE 13978
// sShovel := true ;
13970: LD_ADDR_EXP 76
13974: PUSH
13975: LD_INT 1
13977: ST_TO_ADDR
// if p3 = 25 then
13978: LD_VAR 0 3
13982: PUSH
13983: LD_INT 25
13985: EQUAL
13986: IFFALSE 13996
// sSheik := true ;
13988: LD_ADDR_EXP 77
13992: PUSH
13993: LD_INT 1
13995: ST_TO_ADDR
// if p3 = 26 then
13996: LD_VAR 0 3
14000: PUSH
14001: LD_INT 26
14003: EQUAL
14004: IFFALSE 14014
// sEarthquake := true ;
14006: LD_ADDR_EXP 79
14010: PUSH
14011: LD_INT 1
14013: ST_TO_ADDR
// if p3 = 27 then
14014: LD_VAR 0 3
14018: PUSH
14019: LD_INT 27
14021: EQUAL
14022: IFFALSE 14032
// sAI := true ;
14024: LD_ADDR_EXP 80
14028: PUSH
14029: LD_INT 1
14031: ST_TO_ADDR
// if p3 = 28 then
14032: LD_VAR 0 3
14036: PUSH
14037: LD_INT 28
14039: EQUAL
14040: IFFALSE 14050
// sCargo := true ;
14042: LD_ADDR_EXP 83
14046: PUSH
14047: LD_INT 1
14049: ST_TO_ADDR
// if p3 = 29 then
14050: LD_VAR 0 3
14054: PUSH
14055: LD_INT 29
14057: EQUAL
14058: IFFALSE 14068
// sDLaser := true ;
14060: LD_ADDR_EXP 84
14064: PUSH
14065: LD_INT 1
14067: ST_TO_ADDR
// if p3 = 30 then
14068: LD_VAR 0 3
14072: PUSH
14073: LD_INT 30
14075: EQUAL
14076: IFFALSE 14086
// sExchange := true ;
14078: LD_ADDR_EXP 85
14082: PUSH
14083: LD_INT 1
14085: ST_TO_ADDR
// if p3 = 31 then
14086: LD_VAR 0 3
14090: PUSH
14091: LD_INT 31
14093: EQUAL
14094: IFFALSE 14104
// sFac := true ;
14096: LD_ADDR_EXP 86
14100: PUSH
14101: LD_INT 1
14103: ST_TO_ADDR
// if p3 = 32 then
14104: LD_VAR 0 3
14108: PUSH
14109: LD_INT 32
14111: EQUAL
14112: IFFALSE 14122
// sPower := true ;
14114: LD_ADDR_EXP 87
14118: PUSH
14119: LD_INT 1
14121: ST_TO_ADDR
// if p3 = 33 then
14122: LD_VAR 0 3
14126: PUSH
14127: LD_INT 33
14129: EQUAL
14130: IFFALSE 14140
// sRandom := true ;
14132: LD_ADDR_EXP 88
14136: PUSH
14137: LD_INT 1
14139: ST_TO_ADDR
// if p3 = 34 then
14140: LD_VAR 0 3
14144: PUSH
14145: LD_INT 34
14147: EQUAL
14148: IFFALSE 14158
// sShield := true ;
14150: LD_ADDR_EXP 89
14154: PUSH
14155: LD_INT 1
14157: ST_TO_ADDR
// if p3 = 35 then
14158: LD_VAR 0 3
14162: PUSH
14163: LD_INT 35
14165: EQUAL
14166: IFFALSE 14176
// sTime := true ;
14168: LD_ADDR_EXP 90
14172: PUSH
14173: LD_INT 1
14175: ST_TO_ADDR
// if p3 = 36 then
14176: LD_VAR 0 3
14180: PUSH
14181: LD_INT 36
14183: EQUAL
14184: IFFALSE 14194
// sTools := true ;
14186: LD_ADDR_EXP 91
14190: PUSH
14191: LD_INT 1
14193: ST_TO_ADDR
// if p3 = 101 then
14194: LD_VAR 0 3
14198: PUSH
14199: LD_INT 101
14201: EQUAL
14202: IFFALSE 14212
// sSold := true ;
14204: LD_ADDR_EXP 56
14208: PUSH
14209: LD_INT 1
14211: ST_TO_ADDR
// if p3 = 102 then
14212: LD_VAR 0 3
14216: PUSH
14217: LD_INT 102
14219: EQUAL
14220: IFFALSE 14230
// sDiff := true ;
14222: LD_ADDR_EXP 57
14226: PUSH
14227: LD_INT 1
14229: ST_TO_ADDR
// if p3 = 103 then
14230: LD_VAR 0 3
14234: PUSH
14235: LD_INT 103
14237: EQUAL
14238: IFFALSE 14248
// sFog := true ;
14240: LD_ADDR_EXP 60
14244: PUSH
14245: LD_INT 1
14247: ST_TO_ADDR
// if p3 = 104 then
14248: LD_VAR 0 3
14252: PUSH
14253: LD_INT 104
14255: EQUAL
14256: IFFALSE 14266
// sReset := true ;
14258: LD_ADDR_EXP 61
14262: PUSH
14263: LD_INT 1
14265: ST_TO_ADDR
// if p3 = 105 then
14266: LD_VAR 0 3
14270: PUSH
14271: LD_INT 105
14273: EQUAL
14274: IFFALSE 14284
// sSun := true ;
14276: LD_ADDR_EXP 62
14280: PUSH
14281: LD_INT 1
14283: ST_TO_ADDR
// if p3 = 106 then
14284: LD_VAR 0 3
14288: PUSH
14289: LD_INT 106
14291: EQUAL
14292: IFFALSE 14302
// sTiger := true ;
14294: LD_ADDR_EXP 58
14298: PUSH
14299: LD_INT 1
14301: ST_TO_ADDR
// if p3 = 107 then
14302: LD_VAR 0 3
14306: PUSH
14307: LD_INT 107
14309: EQUAL
14310: IFFALSE 14320
// sBomb := true ;
14312: LD_ADDR_EXP 59
14316: PUSH
14317: LD_INT 1
14319: ST_TO_ADDR
// if p3 = 108 then
14320: LD_VAR 0 3
14324: PUSH
14325: LD_INT 108
14327: EQUAL
14328: IFFALSE 14338
// sWound := true ;
14330: LD_ADDR_EXP 67
14334: PUSH
14335: LD_INT 1
14337: ST_TO_ADDR
// if p3 = 109 then
14338: LD_VAR 0 3
14342: PUSH
14343: LD_INT 109
14345: EQUAL
14346: IFFALSE 14356
// sBetray := true ;
14348: LD_ADDR_EXP 71
14352: PUSH
14353: LD_INT 1
14355: ST_TO_ADDR
// if p3 = 110 then
14356: LD_VAR 0 3
14360: PUSH
14361: LD_INT 110
14363: EQUAL
14364: IFFALSE 14374
// sContamin := true ;
14366: LD_ADDR_EXP 72
14370: PUSH
14371: LD_INT 1
14373: ST_TO_ADDR
// if p3 = 111 then
14374: LD_VAR 0 3
14378: PUSH
14379: LD_INT 111
14381: EQUAL
14382: IFFALSE 14392
// sOil := true ;
14384: LD_ADDR_EXP 74
14388: PUSH
14389: LD_INT 1
14391: ST_TO_ADDR
// if p3 = 112 then
14392: LD_VAR 0 3
14396: PUSH
14397: LD_INT 112
14399: EQUAL
14400: IFFALSE 14410
// sStu := true ;
14402: LD_ADDR_EXP 78
14406: PUSH
14407: LD_INT 1
14409: ST_TO_ADDR
// if p3 = 113 then
14410: LD_VAR 0 3
14414: PUSH
14415: LD_INT 113
14417: EQUAL
14418: IFFALSE 14428
// sBazooka := true ;
14420: LD_ADDR_EXP 81
14424: PUSH
14425: LD_INT 1
14427: ST_TO_ADDR
// if p3 = 114 then
14428: LD_VAR 0 3
14432: PUSH
14433: LD_INT 114
14435: EQUAL
14436: IFFALSE 14446
// sMortar := true ;
14438: LD_ADDR_EXP 82
14442: PUSH
14443: LD_INT 1
14445: ST_TO_ADDR
// if p3 = 115 then
14446: LD_VAR 0 3
14450: PUSH
14451: LD_INT 115
14453: EQUAL
14454: IFFALSE 14464
// sRanger := true ;
14456: LD_ADDR_EXP 92
14460: PUSH
14461: LD_INT 1
14463: ST_TO_ADDR
// end ; end ;
14464: PPOPN 6
14466: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14467: LD_EXP 39
14471: PUSH
14472: LD_EXP 44
14476: AND
14477: IFFALSE 14601
14479: GO 14481
14481: DISABLE
14482: LD_INT 0
14484: PPUSH
14485: PPUSH
// begin enable ;
14486: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14487: LD_ADDR_VAR 0 2
14491: PUSH
14492: LD_INT 22
14494: PUSH
14495: LD_OWVAR 2
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 2
14506: PUSH
14507: LD_INT 34
14509: PUSH
14510: LD_INT 7
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 34
14519: PUSH
14520: LD_INT 45
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 34
14529: PUSH
14530: LD_INT 28
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: LD_INT 34
14539: PUSH
14540: LD_INT 47
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PPUSH
14558: CALL_OW 69
14562: ST_TO_ADDR
// if not tmp then
14563: LD_VAR 0 2
14567: NOT
14568: IFFALSE 14572
// exit ;
14570: GO 14601
// for i in tmp do
14572: LD_ADDR_VAR 0 1
14576: PUSH
14577: LD_VAR 0 2
14581: PUSH
14582: FOR_IN
14583: IFFALSE 14599
// begin SetLives ( i , 0 ) ;
14585: LD_VAR 0 1
14589: PPUSH
14590: LD_INT 0
14592: PPUSH
14593: CALL_OW 234
// end ;
14597: GO 14582
14599: POP
14600: POP
// end ;
14601: PPOPN 2
14603: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14604: LD_EXP 39
14608: PUSH
14609: LD_EXP 45
14613: AND
14614: IFFALSE 14698
14616: GO 14618
14618: DISABLE
14619: LD_INT 0
14621: PPUSH
14622: PPUSH
// begin enable ;
14623: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14624: LD_ADDR_VAR 0 2
14628: PUSH
14629: LD_INT 22
14631: PUSH
14632: LD_OWVAR 2
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 32
14643: PUSH
14644: LD_INT 3
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PPUSH
14655: CALL_OW 69
14659: ST_TO_ADDR
// if not tmp then
14660: LD_VAR 0 2
14664: NOT
14665: IFFALSE 14669
// exit ;
14667: GO 14698
// for i in tmp do
14669: LD_ADDR_VAR 0 1
14673: PUSH
14674: LD_VAR 0 2
14678: PUSH
14679: FOR_IN
14680: IFFALSE 14696
// begin SetLives ( i , 0 ) ;
14682: LD_VAR 0 1
14686: PPUSH
14687: LD_INT 0
14689: PPUSH
14690: CALL_OW 234
// end ;
14694: GO 14679
14696: POP
14697: POP
// end ;
14698: PPOPN 2
14700: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14701: LD_EXP 39
14705: PUSH
14706: LD_EXP 42
14710: AND
14711: IFFALSE 14804
14713: GO 14715
14715: DISABLE
14716: LD_INT 0
14718: PPUSH
// begin enable ;
14719: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14720: LD_ADDR_VAR 0 1
14724: PUSH
14725: LD_INT 22
14727: PUSH
14728: LD_OWVAR 2
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 2
14739: PUSH
14740: LD_INT 25
14742: PUSH
14743: LD_INT 5
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: LD_INT 25
14752: PUSH
14753: LD_INT 9
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 25
14762: PUSH
14763: LD_INT 8
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PPUSH
14780: CALL_OW 69
14784: PUSH
14785: FOR_IN
14786: IFFALSE 14802
// begin SetClass ( i , 1 ) ;
14788: LD_VAR 0 1
14792: PPUSH
14793: LD_INT 1
14795: PPUSH
14796: CALL_OW 336
// end ;
14800: GO 14785
14802: POP
14803: POP
// end ;
14804: PPOPN 1
14806: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14807: LD_EXP 39
14811: PUSH
14812: LD_EXP 43
14816: AND
14817: PUSH
14818: LD_OWVAR 65
14822: PUSH
14823: LD_INT 7
14825: LESS
14826: AND
14827: IFFALSE 14841
14829: GO 14831
14831: DISABLE
// begin enable ;
14832: ENABLE
// game_speed := 7 ;
14833: LD_ADDR_OWVAR 65
14837: PUSH
14838: LD_INT 7
14840: ST_TO_ADDR
// end ;
14841: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14842: LD_EXP 39
14846: PUSH
14847: LD_EXP 46
14851: AND
14852: IFFALSE 15054
14854: GO 14856
14856: DISABLE
14857: LD_INT 0
14859: PPUSH
14860: PPUSH
14861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14862: LD_ADDR_VAR 0 3
14866: PUSH
14867: LD_INT 81
14869: PUSH
14870: LD_OWVAR 2
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 21
14881: PUSH
14882: LD_INT 1
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 69
14897: ST_TO_ADDR
// if not tmp then
14898: LD_VAR 0 3
14902: NOT
14903: IFFALSE 14907
// exit ;
14905: GO 15054
// if tmp > 5 then
14907: LD_VAR 0 3
14911: PUSH
14912: LD_INT 5
14914: GREATER
14915: IFFALSE 14927
// k := 5 else
14917: LD_ADDR_VAR 0 2
14921: PUSH
14922: LD_INT 5
14924: ST_TO_ADDR
14925: GO 14937
// k := tmp ;
14927: LD_ADDR_VAR 0 2
14931: PUSH
14932: LD_VAR 0 3
14936: ST_TO_ADDR
// for i := 1 to k do
14937: LD_ADDR_VAR 0 1
14941: PUSH
14942: DOUBLE
14943: LD_INT 1
14945: DEC
14946: ST_TO_ADDR
14947: LD_VAR 0 2
14951: PUSH
14952: FOR_TO
14953: IFFALSE 15052
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14955: LD_VAR 0 3
14959: PUSH
14960: LD_VAR 0 1
14964: ARRAY
14965: PPUSH
14966: LD_VAR 0 1
14970: PUSH
14971: LD_INT 4
14973: MOD
14974: PUSH
14975: LD_INT 1
14977: PLUS
14978: PPUSH
14979: CALL_OW 259
14983: PUSH
14984: LD_INT 10
14986: LESS
14987: IFFALSE 15050
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14989: LD_VAR 0 3
14993: PUSH
14994: LD_VAR 0 1
14998: ARRAY
14999: PPUSH
15000: LD_VAR 0 1
15004: PUSH
15005: LD_INT 4
15007: MOD
15008: PUSH
15009: LD_INT 1
15011: PLUS
15012: PPUSH
15013: LD_VAR 0 3
15017: PUSH
15018: LD_VAR 0 1
15022: ARRAY
15023: PPUSH
15024: LD_VAR 0 1
15028: PUSH
15029: LD_INT 4
15031: MOD
15032: PUSH
15033: LD_INT 1
15035: PLUS
15036: PPUSH
15037: CALL_OW 259
15041: PUSH
15042: LD_INT 1
15044: PLUS
15045: PPUSH
15046: CALL_OW 237
15050: GO 14952
15052: POP
15053: POP
// end ;
15054: PPOPN 3
15056: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15057: LD_EXP 39
15061: PUSH
15062: LD_EXP 47
15066: AND
15067: IFFALSE 15087
15069: GO 15071
15071: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15072: LD_INT 4
15074: PPUSH
15075: LD_OWVAR 2
15079: PPUSH
15080: LD_INT 0
15082: PPUSH
15083: CALL_OW 324
15087: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15088: LD_EXP 39
15092: PUSH
15093: LD_EXP 76
15097: AND
15098: IFFALSE 15118
15100: GO 15102
15102: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15103: LD_INT 19
15105: PPUSH
15106: LD_OWVAR 2
15110: PPUSH
15111: LD_INT 0
15113: PPUSH
15114: CALL_OW 324
15118: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15119: LD_EXP 39
15123: PUSH
15124: LD_EXP 48
15128: AND
15129: IFFALSE 15231
15131: GO 15133
15133: DISABLE
15134: LD_INT 0
15136: PPUSH
15137: PPUSH
// begin enable ;
15138: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15139: LD_ADDR_VAR 0 2
15143: PUSH
15144: LD_INT 22
15146: PUSH
15147: LD_OWVAR 2
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: LD_INT 34
15161: PUSH
15162: LD_INT 11
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: LD_INT 34
15171: PUSH
15172: LD_INT 30
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 69
15192: ST_TO_ADDR
// if not tmp then
15193: LD_VAR 0 2
15197: NOT
15198: IFFALSE 15202
// exit ;
15200: GO 15231
// for i in tmp do
15202: LD_ADDR_VAR 0 1
15206: PUSH
15207: LD_VAR 0 2
15211: PUSH
15212: FOR_IN
15213: IFFALSE 15229
// begin SetLives ( i , 0 ) ;
15215: LD_VAR 0 1
15219: PPUSH
15220: LD_INT 0
15222: PPUSH
15223: CALL_OW 234
// end ;
15227: GO 15212
15229: POP
15230: POP
// end ;
15231: PPOPN 2
15233: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15234: LD_EXP 39
15238: PUSH
15239: LD_EXP 49
15243: AND
15244: IFFALSE 15264
15246: GO 15248
15248: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15249: LD_INT 32
15251: PPUSH
15252: LD_OWVAR 2
15256: PPUSH
15257: LD_INT 0
15259: PPUSH
15260: CALL_OW 324
15264: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15265: LD_EXP 39
15269: PUSH
15270: LD_EXP 50
15274: AND
15275: IFFALSE 15456
15277: GO 15279
15279: DISABLE
15280: LD_INT 0
15282: PPUSH
15283: PPUSH
15284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15285: LD_ADDR_VAR 0 2
15289: PUSH
15290: LD_INT 22
15292: PUSH
15293: LD_OWVAR 2
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 33
15304: PUSH
15305: LD_INT 3
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PPUSH
15316: CALL_OW 69
15320: ST_TO_ADDR
// if not tmp then
15321: LD_VAR 0 2
15325: NOT
15326: IFFALSE 15330
// exit ;
15328: GO 15456
// side := 0 ;
15330: LD_ADDR_VAR 0 3
15334: PUSH
15335: LD_INT 0
15337: ST_TO_ADDR
// for i := 1 to 8 do
15338: LD_ADDR_VAR 0 1
15342: PUSH
15343: DOUBLE
15344: LD_INT 1
15346: DEC
15347: ST_TO_ADDR
15348: LD_INT 8
15350: PUSH
15351: FOR_TO
15352: IFFALSE 15400
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15354: LD_OWVAR 2
15358: PUSH
15359: LD_VAR 0 1
15363: NONEQUAL
15364: PUSH
15365: LD_OWVAR 2
15369: PPUSH
15370: LD_VAR 0 1
15374: PPUSH
15375: CALL_OW 81
15379: PUSH
15380: LD_INT 2
15382: EQUAL
15383: AND
15384: IFFALSE 15398
// begin side := i ;
15386: LD_ADDR_VAR 0 3
15390: PUSH
15391: LD_VAR 0 1
15395: ST_TO_ADDR
// break ;
15396: GO 15400
// end ;
15398: GO 15351
15400: POP
15401: POP
// if not side then
15402: LD_VAR 0 3
15406: NOT
15407: IFFALSE 15411
// exit ;
15409: GO 15456
// for i := 1 to tmp do
15411: LD_ADDR_VAR 0 1
15415: PUSH
15416: DOUBLE
15417: LD_INT 1
15419: DEC
15420: ST_TO_ADDR
15421: LD_VAR 0 2
15425: PUSH
15426: FOR_TO
15427: IFFALSE 15454
// if Prob ( 60 ) then
15429: LD_INT 60
15431: PPUSH
15432: CALL_OW 13
15436: IFFALSE 15452
// SetSide ( i , side ) ;
15438: LD_VAR 0 1
15442: PPUSH
15443: LD_VAR 0 3
15447: PPUSH
15448: CALL_OW 235
15452: GO 15426
15454: POP
15455: POP
// end ;
15456: PPOPN 3
15458: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15459: LD_EXP 39
15463: PUSH
15464: LD_EXP 52
15468: AND
15469: IFFALSE 15588
15471: GO 15473
15473: DISABLE
15474: LD_INT 0
15476: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15477: LD_ADDR_VAR 0 1
15481: PUSH
15482: LD_INT 22
15484: PUSH
15485: LD_OWVAR 2
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 21
15496: PUSH
15497: LD_INT 1
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 3
15506: PUSH
15507: LD_INT 23
15509: PUSH
15510: LD_INT 0
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: PPUSH
15526: CALL_OW 69
15530: PUSH
15531: FOR_IN
15532: IFFALSE 15586
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15534: LD_VAR 0 1
15538: PPUSH
15539: CALL_OW 257
15543: PUSH
15544: LD_INT 1
15546: PUSH
15547: LD_INT 2
15549: PUSH
15550: LD_INT 3
15552: PUSH
15553: LD_INT 4
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: IN
15562: IFFALSE 15584
// SetClass ( un , rand ( 1 , 4 ) ) ;
15564: LD_VAR 0 1
15568: PPUSH
15569: LD_INT 1
15571: PPUSH
15572: LD_INT 4
15574: PPUSH
15575: CALL_OW 12
15579: PPUSH
15580: CALL_OW 336
15584: GO 15531
15586: POP
15587: POP
// end ;
15588: PPOPN 1
15590: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15591: LD_EXP 39
15595: PUSH
15596: LD_EXP 51
15600: AND
15601: IFFALSE 15680
15603: GO 15605
15605: DISABLE
15606: LD_INT 0
15608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15609: LD_ADDR_VAR 0 1
15613: PUSH
15614: LD_INT 22
15616: PUSH
15617: LD_OWVAR 2
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 21
15628: PUSH
15629: LD_INT 3
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PPUSH
15640: CALL_OW 69
15644: ST_TO_ADDR
// if not tmp then
15645: LD_VAR 0 1
15649: NOT
15650: IFFALSE 15654
// exit ;
15652: GO 15680
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15654: LD_VAR 0 1
15658: PUSH
15659: LD_INT 1
15661: PPUSH
15662: LD_VAR 0 1
15666: PPUSH
15667: CALL_OW 12
15671: ARRAY
15672: PPUSH
15673: LD_INT 100
15675: PPUSH
15676: CALL_OW 234
// end ;
15680: PPOPN 1
15682: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15683: LD_EXP 39
15687: PUSH
15688: LD_EXP 53
15692: AND
15693: IFFALSE 15791
15695: GO 15697
15697: DISABLE
15698: LD_INT 0
15700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15701: LD_ADDR_VAR 0 1
15705: PUSH
15706: LD_INT 22
15708: PUSH
15709: LD_OWVAR 2
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 21
15720: PUSH
15721: LD_INT 1
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PPUSH
15732: CALL_OW 69
15736: ST_TO_ADDR
// if not tmp then
15737: LD_VAR 0 1
15741: NOT
15742: IFFALSE 15746
// exit ;
15744: GO 15791
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15746: LD_VAR 0 1
15750: PUSH
15751: LD_INT 1
15753: PPUSH
15754: LD_VAR 0 1
15758: PPUSH
15759: CALL_OW 12
15763: ARRAY
15764: PPUSH
15765: LD_INT 1
15767: PPUSH
15768: LD_INT 4
15770: PPUSH
15771: CALL_OW 12
15775: PPUSH
15776: LD_INT 3000
15778: PPUSH
15779: LD_INT 9000
15781: PPUSH
15782: CALL_OW 12
15786: PPUSH
15787: CALL_OW 492
// end ;
15791: PPOPN 1
15793: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15794: LD_EXP 39
15798: PUSH
15799: LD_EXP 54
15803: AND
15804: IFFALSE 15824
15806: GO 15808
15808: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15809: LD_INT 1
15811: PPUSH
15812: LD_OWVAR 2
15816: PPUSH
15817: LD_INT 0
15819: PPUSH
15820: CALL_OW 324
15824: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15825: LD_EXP 39
15829: PUSH
15830: LD_EXP 55
15834: AND
15835: IFFALSE 15918
15837: GO 15839
15839: DISABLE
15840: LD_INT 0
15842: PPUSH
15843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15844: LD_ADDR_VAR 0 2
15848: PUSH
15849: LD_INT 22
15851: PUSH
15852: LD_OWVAR 2
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 21
15863: PUSH
15864: LD_INT 3
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PPUSH
15875: CALL_OW 69
15879: ST_TO_ADDR
// if not tmp then
15880: LD_VAR 0 2
15884: NOT
15885: IFFALSE 15889
// exit ;
15887: GO 15918
// for i in tmp do
15889: LD_ADDR_VAR 0 1
15893: PUSH
15894: LD_VAR 0 2
15898: PUSH
15899: FOR_IN
15900: IFFALSE 15916
// SetBLevel ( i , 10 ) ;
15902: LD_VAR 0 1
15906: PPUSH
15907: LD_INT 10
15909: PPUSH
15910: CALL_OW 241
15914: GO 15899
15916: POP
15917: POP
// end ;
15918: PPOPN 2
15920: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15921: LD_EXP 39
15925: PUSH
15926: LD_EXP 56
15930: AND
15931: IFFALSE 16042
15933: GO 15935
15935: DISABLE
15936: LD_INT 0
15938: PPUSH
15939: PPUSH
15940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15941: LD_ADDR_VAR 0 3
15945: PUSH
15946: LD_INT 22
15948: PUSH
15949: LD_OWVAR 2
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: LD_INT 25
15960: PUSH
15961: LD_INT 1
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 69
15976: ST_TO_ADDR
// if not tmp then
15977: LD_VAR 0 3
15981: NOT
15982: IFFALSE 15986
// exit ;
15984: GO 16042
// un := tmp [ rand ( 1 , tmp ) ] ;
15986: LD_ADDR_VAR 0 2
15990: PUSH
15991: LD_VAR 0 3
15995: PUSH
15996: LD_INT 1
15998: PPUSH
15999: LD_VAR 0 3
16003: PPUSH
16004: CALL_OW 12
16008: ARRAY
16009: ST_TO_ADDR
// if Crawls ( un ) then
16010: LD_VAR 0 2
16014: PPUSH
16015: CALL_OW 318
16019: IFFALSE 16030
// ComWalk ( un ) ;
16021: LD_VAR 0 2
16025: PPUSH
16026: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16030: LD_VAR 0 2
16034: PPUSH
16035: LD_INT 5
16037: PPUSH
16038: CALL_OW 336
// end ;
16042: PPOPN 3
16044: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16045: LD_EXP 39
16049: PUSH
16050: LD_EXP 57
16054: AND
16055: PUSH
16056: LD_OWVAR 67
16060: PUSH
16061: LD_INT 3
16063: LESS
16064: AND
16065: IFFALSE 16084
16067: GO 16069
16069: DISABLE
// Difficulty := Difficulty + 1 ;
16070: LD_ADDR_OWVAR 67
16074: PUSH
16075: LD_OWVAR 67
16079: PUSH
16080: LD_INT 1
16082: PLUS
16083: ST_TO_ADDR
16084: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16085: LD_EXP 39
16089: PUSH
16090: LD_EXP 58
16094: AND
16095: IFFALSE 16198
16097: GO 16099
16099: DISABLE
16100: LD_INT 0
16102: PPUSH
// begin for i := 1 to 5 do
16103: LD_ADDR_VAR 0 1
16107: PUSH
16108: DOUBLE
16109: LD_INT 1
16111: DEC
16112: ST_TO_ADDR
16113: LD_INT 5
16115: PUSH
16116: FOR_TO
16117: IFFALSE 16196
// begin uc_nation := nation_nature ;
16119: LD_ADDR_OWVAR 21
16123: PUSH
16124: LD_INT 0
16126: ST_TO_ADDR
// uc_side := 0 ;
16127: LD_ADDR_OWVAR 20
16131: PUSH
16132: LD_INT 0
16134: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16135: LD_ADDR_OWVAR 29
16139: PUSH
16140: LD_INT 12
16142: PUSH
16143: LD_INT 12
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: ST_TO_ADDR
// hc_agressivity := 20 ;
16150: LD_ADDR_OWVAR 35
16154: PUSH
16155: LD_INT 20
16157: ST_TO_ADDR
// hc_class := class_tiger ;
16158: LD_ADDR_OWVAR 28
16162: PUSH
16163: LD_INT 14
16165: ST_TO_ADDR
// hc_gallery :=  ;
16166: LD_ADDR_OWVAR 33
16170: PUSH
16171: LD_STRING 
16173: ST_TO_ADDR
// hc_name :=  ;
16174: LD_ADDR_OWVAR 26
16178: PUSH
16179: LD_STRING 
16181: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16182: CALL_OW 44
16186: PPUSH
16187: LD_INT 0
16189: PPUSH
16190: CALL_OW 51
// end ;
16194: GO 16116
16196: POP
16197: POP
// end ;
16198: PPOPN 1
16200: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16201: LD_EXP 39
16205: PUSH
16206: LD_EXP 59
16210: AND
16211: IFFALSE 16220
16213: GO 16215
16215: DISABLE
// StreamSibBomb ;
16216: CALL 16221 0 0
16220: END
// export function StreamSibBomb ; var i , x , y ; begin
16221: LD_INT 0
16223: PPUSH
16224: PPUSH
16225: PPUSH
16226: PPUSH
// result := false ;
16227: LD_ADDR_VAR 0 1
16231: PUSH
16232: LD_INT 0
16234: ST_TO_ADDR
// for i := 1 to 16 do
16235: LD_ADDR_VAR 0 2
16239: PUSH
16240: DOUBLE
16241: LD_INT 1
16243: DEC
16244: ST_TO_ADDR
16245: LD_INT 16
16247: PUSH
16248: FOR_TO
16249: IFFALSE 16448
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16251: LD_ADDR_VAR 0 3
16255: PUSH
16256: LD_INT 10
16258: PUSH
16259: LD_INT 20
16261: PUSH
16262: LD_INT 30
16264: PUSH
16265: LD_INT 40
16267: PUSH
16268: LD_INT 50
16270: PUSH
16271: LD_INT 60
16273: PUSH
16274: LD_INT 70
16276: PUSH
16277: LD_INT 80
16279: PUSH
16280: LD_INT 90
16282: PUSH
16283: LD_INT 100
16285: PUSH
16286: LD_INT 110
16288: PUSH
16289: LD_INT 120
16291: PUSH
16292: LD_INT 130
16294: PUSH
16295: LD_INT 140
16297: PUSH
16298: LD_INT 150
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: PUSH
16318: LD_INT 1
16320: PPUSH
16321: LD_INT 15
16323: PPUSH
16324: CALL_OW 12
16328: ARRAY
16329: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16330: LD_ADDR_VAR 0 4
16334: PUSH
16335: LD_INT 10
16337: PUSH
16338: LD_INT 20
16340: PUSH
16341: LD_INT 30
16343: PUSH
16344: LD_INT 40
16346: PUSH
16347: LD_INT 50
16349: PUSH
16350: LD_INT 60
16352: PUSH
16353: LD_INT 70
16355: PUSH
16356: LD_INT 80
16358: PUSH
16359: LD_INT 90
16361: PUSH
16362: LD_INT 100
16364: PUSH
16365: LD_INT 110
16367: PUSH
16368: LD_INT 120
16370: PUSH
16371: LD_INT 130
16373: PUSH
16374: LD_INT 140
16376: PUSH
16377: LD_INT 150
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 1
16399: PPUSH
16400: LD_INT 15
16402: PPUSH
16403: CALL_OW 12
16407: ARRAY
16408: ST_TO_ADDR
// if ValidHex ( x , y ) then
16409: LD_VAR 0 3
16413: PPUSH
16414: LD_VAR 0 4
16418: PPUSH
16419: CALL_OW 488
16423: IFFALSE 16446
// begin result := [ x , y ] ;
16425: LD_ADDR_VAR 0 1
16429: PUSH
16430: LD_VAR 0 3
16434: PUSH
16435: LD_VAR 0 4
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: ST_TO_ADDR
// break ;
16444: GO 16448
// end ; end ;
16446: GO 16248
16448: POP
16449: POP
// if result then
16450: LD_VAR 0 1
16454: IFFALSE 16514
// begin ToLua ( playSibBomb() ) ;
16456: LD_STRING playSibBomb()
16458: PPUSH
16459: CALL_OW 559
// wait ( 0 0$14 ) ;
16463: LD_INT 490
16465: PPUSH
16466: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16470: LD_VAR 0 1
16474: PUSH
16475: LD_INT 1
16477: ARRAY
16478: PPUSH
16479: LD_VAR 0 1
16483: PUSH
16484: LD_INT 2
16486: ARRAY
16487: PPUSH
16488: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16492: LD_VAR 0 1
16496: PUSH
16497: LD_INT 1
16499: ARRAY
16500: PPUSH
16501: LD_VAR 0 1
16505: PUSH
16506: LD_INT 2
16508: ARRAY
16509: PPUSH
16510: CALL_OW 429
// end ; end ;
16514: LD_VAR 0 1
16518: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16519: LD_EXP 39
16523: PUSH
16524: LD_EXP 61
16528: AND
16529: IFFALSE 16541
16531: GO 16533
16533: DISABLE
// YouLost (  ) ;
16534: LD_STRING 
16536: PPUSH
16537: CALL_OW 104
16541: END
// every 0 0$1 trigger StreamModeActive and sFog do
16542: LD_EXP 39
16546: PUSH
16547: LD_EXP 60
16551: AND
16552: IFFALSE 16566
16554: GO 16556
16556: DISABLE
// FogOff ( your_side ) ;
16557: LD_OWVAR 2
16561: PPUSH
16562: CALL_OW 344
16566: END
// every 0 0$1 trigger StreamModeActive and sSun do
16567: LD_EXP 39
16571: PUSH
16572: LD_EXP 62
16576: AND
16577: IFFALSE 16605
16579: GO 16581
16581: DISABLE
// begin solar_recharge_percent := 0 ;
16582: LD_ADDR_OWVAR 79
16586: PUSH
16587: LD_INT 0
16589: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16590: LD_INT 10500
16592: PPUSH
16593: CALL_OW 67
// solar_recharge_percent := 100 ;
16597: LD_ADDR_OWVAR 79
16601: PUSH
16602: LD_INT 100
16604: ST_TO_ADDR
// end ;
16605: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16606: LD_EXP 39
16610: PUSH
16611: LD_EXP 63
16615: AND
16616: IFFALSE 16855
16618: GO 16620
16620: DISABLE
16621: LD_INT 0
16623: PPUSH
16624: PPUSH
16625: PPUSH
// begin tmp := [ ] ;
16626: LD_ADDR_VAR 0 3
16630: PUSH
16631: EMPTY
16632: ST_TO_ADDR
// for i := 1 to 6 do
16633: LD_ADDR_VAR 0 1
16637: PUSH
16638: DOUBLE
16639: LD_INT 1
16641: DEC
16642: ST_TO_ADDR
16643: LD_INT 6
16645: PUSH
16646: FOR_TO
16647: IFFALSE 16752
// begin uc_nation := nation_nature ;
16649: LD_ADDR_OWVAR 21
16653: PUSH
16654: LD_INT 0
16656: ST_TO_ADDR
// uc_side := 0 ;
16657: LD_ADDR_OWVAR 20
16661: PUSH
16662: LD_INT 0
16664: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16665: LD_ADDR_OWVAR 29
16669: PUSH
16670: LD_INT 12
16672: PUSH
16673: LD_INT 12
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: ST_TO_ADDR
// hc_agressivity := 20 ;
16680: LD_ADDR_OWVAR 35
16684: PUSH
16685: LD_INT 20
16687: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16688: LD_ADDR_OWVAR 28
16692: PUSH
16693: LD_INT 17
16695: ST_TO_ADDR
// hc_gallery :=  ;
16696: LD_ADDR_OWVAR 33
16700: PUSH
16701: LD_STRING 
16703: ST_TO_ADDR
// hc_name :=  ;
16704: LD_ADDR_OWVAR 26
16708: PUSH
16709: LD_STRING 
16711: ST_TO_ADDR
// un := CreateHuman ;
16712: LD_ADDR_VAR 0 2
16716: PUSH
16717: CALL_OW 44
16721: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16722: LD_VAR 0 2
16726: PPUSH
16727: LD_INT 1
16729: PPUSH
16730: CALL_OW 51
// tmp := tmp ^ un ;
16734: LD_ADDR_VAR 0 3
16738: PUSH
16739: LD_VAR 0 3
16743: PUSH
16744: LD_VAR 0 2
16748: ADD
16749: ST_TO_ADDR
// end ;
16750: GO 16646
16752: POP
16753: POP
// repeat wait ( 0 0$1 ) ;
16754: LD_INT 35
16756: PPUSH
16757: CALL_OW 67
// for un in tmp do
16761: LD_ADDR_VAR 0 2
16765: PUSH
16766: LD_VAR 0 3
16770: PUSH
16771: FOR_IN
16772: IFFALSE 16846
// begin if IsDead ( un ) then
16774: LD_VAR 0 2
16778: PPUSH
16779: CALL_OW 301
16783: IFFALSE 16803
// begin tmp := tmp diff un ;
16785: LD_ADDR_VAR 0 3
16789: PUSH
16790: LD_VAR 0 3
16794: PUSH
16795: LD_VAR 0 2
16799: DIFF
16800: ST_TO_ADDR
// continue ;
16801: GO 16771
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16803: LD_VAR 0 2
16807: PPUSH
16808: LD_INT 3
16810: PUSH
16811: LD_INT 22
16813: PUSH
16814: LD_INT 0
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PPUSH
16825: CALL_OW 69
16829: PPUSH
16830: LD_VAR 0 2
16834: PPUSH
16835: CALL_OW 74
16839: PPUSH
16840: CALL_OW 115
// end ;
16844: GO 16771
16846: POP
16847: POP
// until not tmp ;
16848: LD_VAR 0 3
16852: NOT
16853: IFFALSE 16754
// end ;
16855: PPOPN 3
16857: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16858: LD_EXP 39
16862: PUSH
16863: LD_EXP 64
16867: AND
16868: IFFALSE 16922
16870: GO 16872
16872: DISABLE
// begin ToLua ( displayTroll(); ) ;
16873: LD_STRING displayTroll();
16875: PPUSH
16876: CALL_OW 559
// wait ( 3 3$00 ) ;
16880: LD_INT 6300
16882: PPUSH
16883: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16887: LD_STRING hideTroll();
16889: PPUSH
16890: CALL_OW 559
// wait ( 1 1$00 ) ;
16894: LD_INT 2100
16896: PPUSH
16897: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16901: LD_STRING displayTroll();
16903: PPUSH
16904: CALL_OW 559
// wait ( 1 1$00 ) ;
16908: LD_INT 2100
16910: PPUSH
16911: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16915: LD_STRING hideTroll();
16917: PPUSH
16918: CALL_OW 559
// end ;
16922: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16923: LD_EXP 39
16927: PUSH
16928: LD_EXP 65
16932: AND
16933: IFFALSE 16996
16935: GO 16937
16937: DISABLE
16938: LD_INT 0
16940: PPUSH
// begin p := 0 ;
16941: LD_ADDR_VAR 0 1
16945: PUSH
16946: LD_INT 0
16948: ST_TO_ADDR
// repeat game_speed := 1 ;
16949: LD_ADDR_OWVAR 65
16953: PUSH
16954: LD_INT 1
16956: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16957: LD_INT 35
16959: PPUSH
16960: CALL_OW 67
// p := p + 1 ;
16964: LD_ADDR_VAR 0 1
16968: PUSH
16969: LD_VAR 0 1
16973: PUSH
16974: LD_INT 1
16976: PLUS
16977: ST_TO_ADDR
// until p >= 60 ;
16978: LD_VAR 0 1
16982: PUSH
16983: LD_INT 60
16985: GREATEREQUAL
16986: IFFALSE 16949
// game_speed := 4 ;
16988: LD_ADDR_OWVAR 65
16992: PUSH
16993: LD_INT 4
16995: ST_TO_ADDR
// end ;
16996: PPOPN 1
16998: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16999: LD_EXP 39
17003: PUSH
17004: LD_EXP 66
17008: AND
17009: IFFALSE 17155
17011: GO 17013
17013: DISABLE
17014: LD_INT 0
17016: PPUSH
17017: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17018: LD_ADDR_VAR 0 1
17022: PUSH
17023: LD_INT 22
17025: PUSH
17026: LD_OWVAR 2
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: LD_INT 2
17037: PUSH
17038: LD_INT 30
17040: PUSH
17041: LD_INT 0
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 30
17050: PUSH
17051: LD_INT 1
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 69
17071: ST_TO_ADDR
// if not depot then
17072: LD_VAR 0 1
17076: NOT
17077: IFFALSE 17081
// exit ;
17079: GO 17155
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17081: LD_ADDR_VAR 0 2
17085: PUSH
17086: LD_VAR 0 1
17090: PUSH
17091: LD_INT 1
17093: PPUSH
17094: LD_VAR 0 1
17098: PPUSH
17099: CALL_OW 12
17103: ARRAY
17104: PPUSH
17105: CALL_OW 274
17109: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17110: LD_VAR 0 2
17114: PPUSH
17115: LD_INT 1
17117: PPUSH
17118: LD_INT 0
17120: PPUSH
17121: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17125: LD_VAR 0 2
17129: PPUSH
17130: LD_INT 2
17132: PPUSH
17133: LD_INT 0
17135: PPUSH
17136: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17140: LD_VAR 0 2
17144: PPUSH
17145: LD_INT 3
17147: PPUSH
17148: LD_INT 0
17150: PPUSH
17151: CALL_OW 277
// end ;
17155: PPOPN 2
17157: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17158: LD_EXP 39
17162: PUSH
17163: LD_EXP 67
17167: AND
17168: IFFALSE 17265
17170: GO 17172
17172: DISABLE
17173: LD_INT 0
17175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17176: LD_ADDR_VAR 0 1
17180: PUSH
17181: LD_INT 22
17183: PUSH
17184: LD_OWVAR 2
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 21
17195: PUSH
17196: LD_INT 1
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 3
17205: PUSH
17206: LD_INT 23
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: LIST
17224: PPUSH
17225: CALL_OW 69
17229: ST_TO_ADDR
// if not tmp then
17230: LD_VAR 0 1
17234: NOT
17235: IFFALSE 17239
// exit ;
17237: GO 17265
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17239: LD_VAR 0 1
17243: PUSH
17244: LD_INT 1
17246: PPUSH
17247: LD_VAR 0 1
17251: PPUSH
17252: CALL_OW 12
17256: ARRAY
17257: PPUSH
17258: LD_INT 200
17260: PPUSH
17261: CALL_OW 234
// end ;
17265: PPOPN 1
17267: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17268: LD_EXP 39
17272: PUSH
17273: LD_EXP 68
17277: AND
17278: IFFALSE 17357
17280: GO 17282
17282: DISABLE
17283: LD_INT 0
17285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17286: LD_ADDR_VAR 0 1
17290: PUSH
17291: LD_INT 22
17293: PUSH
17294: LD_OWVAR 2
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 21
17305: PUSH
17306: LD_INT 2
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PPUSH
17317: CALL_OW 69
17321: ST_TO_ADDR
// if not tmp then
17322: LD_VAR 0 1
17326: NOT
17327: IFFALSE 17331
// exit ;
17329: GO 17357
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17331: LD_VAR 0 1
17335: PUSH
17336: LD_INT 1
17338: PPUSH
17339: LD_VAR 0 1
17343: PPUSH
17344: CALL_OW 12
17348: ARRAY
17349: PPUSH
17350: LD_INT 60
17352: PPUSH
17353: CALL_OW 234
// end ;
17357: PPOPN 1
17359: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17360: LD_EXP 39
17364: PUSH
17365: LD_EXP 69
17369: AND
17370: IFFALSE 17469
17372: GO 17374
17374: DISABLE
17375: LD_INT 0
17377: PPUSH
17378: PPUSH
// begin enable ;
17379: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17380: LD_ADDR_VAR 0 1
17384: PUSH
17385: LD_INT 22
17387: PUSH
17388: LD_OWVAR 2
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 61
17399: PUSH
17400: EMPTY
17401: LIST
17402: PUSH
17403: LD_INT 33
17405: PUSH
17406: LD_INT 2
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: PPUSH
17418: CALL_OW 69
17422: ST_TO_ADDR
// if not tmp then
17423: LD_VAR 0 1
17427: NOT
17428: IFFALSE 17432
// exit ;
17430: GO 17469
// for i in tmp do
17432: LD_ADDR_VAR 0 2
17436: PUSH
17437: LD_VAR 0 1
17441: PUSH
17442: FOR_IN
17443: IFFALSE 17467
// if IsControledBy ( i ) then
17445: LD_VAR 0 2
17449: PPUSH
17450: CALL_OW 312
17454: IFFALSE 17465
// ComUnlink ( i ) ;
17456: LD_VAR 0 2
17460: PPUSH
17461: CALL_OW 136
17465: GO 17442
17467: POP
17468: POP
// end ;
17469: PPOPN 2
17471: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17472: LD_EXP 39
17476: PUSH
17477: LD_EXP 70
17481: AND
17482: IFFALSE 17622
17484: GO 17486
17486: DISABLE
17487: LD_INT 0
17489: PPUSH
17490: PPUSH
// begin ToLua ( displayPowell(); ) ;
17491: LD_STRING displayPowell();
17493: PPUSH
17494: CALL_OW 559
// uc_side := 0 ;
17498: LD_ADDR_OWVAR 20
17502: PUSH
17503: LD_INT 0
17505: ST_TO_ADDR
// uc_nation := 2 ;
17506: LD_ADDR_OWVAR 21
17510: PUSH
17511: LD_INT 2
17513: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17514: LD_ADDR_OWVAR 37
17518: PUSH
17519: LD_INT 14
17521: ST_TO_ADDR
// vc_engine := engine_siberite ;
17522: LD_ADDR_OWVAR 39
17526: PUSH
17527: LD_INT 3
17529: ST_TO_ADDR
// vc_control := control_apeman ;
17530: LD_ADDR_OWVAR 38
17534: PUSH
17535: LD_INT 5
17537: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17538: LD_ADDR_OWVAR 40
17542: PUSH
17543: LD_INT 29
17545: ST_TO_ADDR
// un := CreateVehicle ;
17546: LD_ADDR_VAR 0 2
17550: PUSH
17551: CALL_OW 45
17555: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17556: LD_VAR 0 2
17560: PPUSH
17561: LD_INT 1
17563: PPUSH
17564: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17568: LD_INT 35
17570: PPUSH
17571: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17575: LD_VAR 0 2
17579: PPUSH
17580: LD_INT 22
17582: PUSH
17583: LD_OWVAR 2
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PPUSH
17592: CALL_OW 69
17596: PPUSH
17597: LD_VAR 0 2
17601: PPUSH
17602: CALL_OW 74
17606: PPUSH
17607: CALL_OW 115
// until IsDead ( un ) ;
17611: LD_VAR 0 2
17615: PPUSH
17616: CALL_OW 301
17620: IFFALSE 17568
// end ;
17622: PPOPN 2
17624: END
// every 0 0$1 trigger StreamModeActive and sStu do
17625: LD_EXP 39
17629: PUSH
17630: LD_EXP 78
17634: AND
17635: IFFALSE 17651
17637: GO 17639
17639: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17640: LD_STRING displayStucuk();
17642: PPUSH
17643: CALL_OW 559
// ResetFog ;
17647: CALL_OW 335
// end ;
17651: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17652: LD_EXP 39
17656: PUSH
17657: LD_EXP 71
17661: AND
17662: IFFALSE 17803
17664: GO 17666
17666: DISABLE
17667: LD_INT 0
17669: PPUSH
17670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17671: LD_ADDR_VAR 0 2
17675: PUSH
17676: LD_INT 22
17678: PUSH
17679: LD_OWVAR 2
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 21
17690: PUSH
17691: LD_INT 1
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PPUSH
17702: CALL_OW 69
17706: ST_TO_ADDR
// if not tmp then
17707: LD_VAR 0 2
17711: NOT
17712: IFFALSE 17716
// exit ;
17714: GO 17803
// un := tmp [ rand ( 1 , tmp ) ] ;
17716: LD_ADDR_VAR 0 1
17720: PUSH
17721: LD_VAR 0 2
17725: PUSH
17726: LD_INT 1
17728: PPUSH
17729: LD_VAR 0 2
17733: PPUSH
17734: CALL_OW 12
17738: ARRAY
17739: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17740: LD_VAR 0 1
17744: PPUSH
17745: LD_INT 0
17747: PPUSH
17748: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17752: LD_VAR 0 1
17756: PPUSH
17757: LD_OWVAR 3
17761: PUSH
17762: LD_VAR 0 1
17766: DIFF
17767: PPUSH
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 74
17777: PPUSH
17778: CALL_OW 115
// wait ( 0 0$20 ) ;
17782: LD_INT 700
17784: PPUSH
17785: CALL_OW 67
// SetSide ( un , your_side ) ;
17789: LD_VAR 0 1
17793: PPUSH
17794: LD_OWVAR 2
17798: PPUSH
17799: CALL_OW 235
// end ;
17803: PPOPN 2
17805: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17806: LD_EXP 39
17810: PUSH
17811: LD_EXP 72
17815: AND
17816: IFFALSE 17922
17818: GO 17820
17820: DISABLE
17821: LD_INT 0
17823: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17824: LD_ADDR_VAR 0 1
17828: PUSH
17829: LD_INT 22
17831: PUSH
17832: LD_OWVAR 2
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 2
17843: PUSH
17844: LD_INT 30
17846: PUSH
17847: LD_INT 0
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 30
17856: PUSH
17857: LD_INT 1
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: LIST
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PPUSH
17873: CALL_OW 69
17877: ST_TO_ADDR
// if not depot then
17878: LD_VAR 0 1
17882: NOT
17883: IFFALSE 17887
// exit ;
17885: GO 17922
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17887: LD_VAR 0 1
17891: PUSH
17892: LD_INT 1
17894: ARRAY
17895: PPUSH
17896: CALL_OW 250
17900: PPUSH
17901: LD_VAR 0 1
17905: PUSH
17906: LD_INT 1
17908: ARRAY
17909: PPUSH
17910: CALL_OW 251
17914: PPUSH
17915: LD_INT 70
17917: PPUSH
17918: CALL_OW 495
// end ;
17922: PPOPN 1
17924: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17925: LD_EXP 39
17929: PUSH
17930: LD_EXP 73
17934: AND
17935: IFFALSE 18146
17937: GO 17939
17939: DISABLE
17940: LD_INT 0
17942: PPUSH
17943: PPUSH
17944: PPUSH
17945: PPUSH
17946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17947: LD_ADDR_VAR 0 5
17951: PUSH
17952: LD_INT 22
17954: PUSH
17955: LD_OWVAR 2
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 21
17966: PUSH
17967: LD_INT 1
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PPUSH
17978: CALL_OW 69
17982: ST_TO_ADDR
// if not tmp then
17983: LD_VAR 0 5
17987: NOT
17988: IFFALSE 17992
// exit ;
17990: GO 18146
// for i in tmp do
17992: LD_ADDR_VAR 0 1
17996: PUSH
17997: LD_VAR 0 5
18001: PUSH
18002: FOR_IN
18003: IFFALSE 18144
// begin d := rand ( 0 , 5 ) ;
18005: LD_ADDR_VAR 0 4
18009: PUSH
18010: LD_INT 0
18012: PPUSH
18013: LD_INT 5
18015: PPUSH
18016: CALL_OW 12
18020: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18021: LD_ADDR_VAR 0 2
18025: PUSH
18026: LD_VAR 0 1
18030: PPUSH
18031: CALL_OW 250
18035: PPUSH
18036: LD_VAR 0 4
18040: PPUSH
18041: LD_INT 3
18043: PPUSH
18044: LD_INT 12
18046: PPUSH
18047: CALL_OW 12
18051: PPUSH
18052: CALL_OW 272
18056: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18057: LD_ADDR_VAR 0 3
18061: PUSH
18062: LD_VAR 0 1
18066: PPUSH
18067: CALL_OW 251
18071: PPUSH
18072: LD_VAR 0 4
18076: PPUSH
18077: LD_INT 3
18079: PPUSH
18080: LD_INT 12
18082: PPUSH
18083: CALL_OW 12
18087: PPUSH
18088: CALL_OW 273
18092: ST_TO_ADDR
// if ValidHex ( x , y ) then
18093: LD_VAR 0 2
18097: PPUSH
18098: LD_VAR 0 3
18102: PPUSH
18103: CALL_OW 488
18107: IFFALSE 18142
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18109: LD_VAR 0 1
18113: PPUSH
18114: LD_VAR 0 2
18118: PPUSH
18119: LD_VAR 0 3
18123: PPUSH
18124: LD_INT 3
18126: PPUSH
18127: LD_INT 6
18129: PPUSH
18130: CALL_OW 12
18134: PPUSH
18135: LD_INT 1
18137: PPUSH
18138: CALL_OW 483
// end ;
18142: GO 18002
18144: POP
18145: POP
// end ;
18146: PPOPN 5
18148: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18149: LD_EXP 39
18153: PUSH
18154: LD_EXP 74
18158: AND
18159: IFFALSE 18253
18161: GO 18163
18163: DISABLE
18164: LD_INT 0
18166: PPUSH
18167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18168: LD_ADDR_VAR 0 2
18172: PUSH
18173: LD_INT 22
18175: PUSH
18176: LD_OWVAR 2
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 32
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 21
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: PPUSH
18210: CALL_OW 69
18214: ST_TO_ADDR
// if not tmp then
18215: LD_VAR 0 2
18219: NOT
18220: IFFALSE 18224
// exit ;
18222: GO 18253
// for i in tmp do
18224: LD_ADDR_VAR 0 1
18228: PUSH
18229: LD_VAR 0 2
18233: PUSH
18234: FOR_IN
18235: IFFALSE 18251
// SetFuel ( i , 0 ) ;
18237: LD_VAR 0 1
18241: PPUSH
18242: LD_INT 0
18244: PPUSH
18245: CALL_OW 240
18249: GO 18234
18251: POP
18252: POP
// end ;
18253: PPOPN 2
18255: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18256: LD_EXP 39
18260: PUSH
18261: LD_EXP 75
18265: AND
18266: IFFALSE 18332
18268: GO 18270
18270: DISABLE
18271: LD_INT 0
18273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18274: LD_ADDR_VAR 0 1
18278: PUSH
18279: LD_INT 22
18281: PUSH
18282: LD_OWVAR 2
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 30
18293: PUSH
18294: LD_INT 29
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PPUSH
18305: CALL_OW 69
18309: ST_TO_ADDR
// if not tmp then
18310: LD_VAR 0 1
18314: NOT
18315: IFFALSE 18319
// exit ;
18317: GO 18332
// DestroyUnit ( tmp [ 1 ] ) ;
18319: LD_VAR 0 1
18323: PUSH
18324: LD_INT 1
18326: ARRAY
18327: PPUSH
18328: CALL_OW 65
// end ;
18332: PPOPN 1
18334: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18335: LD_EXP 39
18339: PUSH
18340: LD_EXP 77
18344: AND
18345: IFFALSE 18474
18347: GO 18349
18349: DISABLE
18350: LD_INT 0
18352: PPUSH
// begin uc_side := 0 ;
18353: LD_ADDR_OWVAR 20
18357: PUSH
18358: LD_INT 0
18360: ST_TO_ADDR
// uc_nation := nation_arabian ;
18361: LD_ADDR_OWVAR 21
18365: PUSH
18366: LD_INT 2
18368: ST_TO_ADDR
// hc_gallery :=  ;
18369: LD_ADDR_OWVAR 33
18373: PUSH
18374: LD_STRING 
18376: ST_TO_ADDR
// hc_name :=  ;
18377: LD_ADDR_OWVAR 26
18381: PUSH
18382: LD_STRING 
18384: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18385: LD_INT 1
18387: PPUSH
18388: LD_INT 11
18390: PPUSH
18391: LD_INT 10
18393: PPUSH
18394: CALL_OW 380
// un := CreateHuman ;
18398: LD_ADDR_VAR 0 1
18402: PUSH
18403: CALL_OW 44
18407: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18408: LD_VAR 0 1
18412: PPUSH
18413: LD_INT 1
18415: PPUSH
18416: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18420: LD_INT 35
18422: PPUSH
18423: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18427: LD_VAR 0 1
18431: PPUSH
18432: LD_INT 22
18434: PUSH
18435: LD_OWVAR 2
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PPUSH
18444: CALL_OW 69
18448: PPUSH
18449: LD_VAR 0 1
18453: PPUSH
18454: CALL_OW 74
18458: PPUSH
18459: CALL_OW 115
// until IsDead ( un ) ;
18463: LD_VAR 0 1
18467: PPUSH
18468: CALL_OW 301
18472: IFFALSE 18420
// end ;
18474: PPOPN 1
18476: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18477: LD_EXP 39
18481: PUSH
18482: LD_EXP 79
18486: AND
18487: IFFALSE 18499
18489: GO 18491
18491: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18492: LD_STRING earthquake(getX(game), 0, 32)
18494: PPUSH
18495: CALL_OW 559
18499: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18500: LD_EXP 39
18504: PUSH
18505: LD_EXP 80
18509: AND
18510: IFFALSE 18601
18512: GO 18514
18514: DISABLE
18515: LD_INT 0
18517: PPUSH
// begin enable ;
18518: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18519: LD_ADDR_VAR 0 1
18523: PUSH
18524: LD_INT 22
18526: PUSH
18527: LD_OWVAR 2
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 21
18538: PUSH
18539: LD_INT 2
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 33
18548: PUSH
18549: LD_INT 3
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: PPUSH
18561: CALL_OW 69
18565: ST_TO_ADDR
// if not tmp then
18566: LD_VAR 0 1
18570: NOT
18571: IFFALSE 18575
// exit ;
18573: GO 18601
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18575: LD_VAR 0 1
18579: PUSH
18580: LD_INT 1
18582: PPUSH
18583: LD_VAR 0 1
18587: PPUSH
18588: CALL_OW 12
18592: ARRAY
18593: PPUSH
18594: LD_INT 1
18596: PPUSH
18597: CALL_OW 234
// end ;
18601: PPOPN 1
18603: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18604: LD_EXP 39
18608: PUSH
18609: LD_EXP 81
18613: AND
18614: IFFALSE 18755
18616: GO 18618
18618: DISABLE
18619: LD_INT 0
18621: PPUSH
18622: PPUSH
18623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18624: LD_ADDR_VAR 0 3
18628: PUSH
18629: LD_INT 22
18631: PUSH
18632: LD_OWVAR 2
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 25
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PPUSH
18655: CALL_OW 69
18659: ST_TO_ADDR
// if not tmp then
18660: LD_VAR 0 3
18664: NOT
18665: IFFALSE 18669
// exit ;
18667: GO 18755
// un := tmp [ rand ( 1 , tmp ) ] ;
18669: LD_ADDR_VAR 0 2
18673: PUSH
18674: LD_VAR 0 3
18678: PUSH
18679: LD_INT 1
18681: PPUSH
18682: LD_VAR 0 3
18686: PPUSH
18687: CALL_OW 12
18691: ARRAY
18692: ST_TO_ADDR
// if Crawls ( un ) then
18693: LD_VAR 0 2
18697: PPUSH
18698: CALL_OW 318
18702: IFFALSE 18713
// ComWalk ( un ) ;
18704: LD_VAR 0 2
18708: PPUSH
18709: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18713: LD_VAR 0 2
18717: PPUSH
18718: LD_INT 9
18720: PPUSH
18721: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18725: LD_INT 28
18727: PPUSH
18728: LD_OWVAR 2
18732: PPUSH
18733: LD_INT 2
18735: PPUSH
18736: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18740: LD_INT 29
18742: PPUSH
18743: LD_OWVAR 2
18747: PPUSH
18748: LD_INT 2
18750: PPUSH
18751: CALL_OW 322
// end ;
18755: PPOPN 3
18757: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18758: LD_EXP 39
18762: PUSH
18763: LD_EXP 82
18767: AND
18768: IFFALSE 18879
18770: GO 18772
18772: DISABLE
18773: LD_INT 0
18775: PPUSH
18776: PPUSH
18777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18778: LD_ADDR_VAR 0 3
18782: PUSH
18783: LD_INT 22
18785: PUSH
18786: LD_OWVAR 2
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 25
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 69
18813: ST_TO_ADDR
// if not tmp then
18814: LD_VAR 0 3
18818: NOT
18819: IFFALSE 18823
// exit ;
18821: GO 18879
// un := tmp [ rand ( 1 , tmp ) ] ;
18823: LD_ADDR_VAR 0 2
18827: PUSH
18828: LD_VAR 0 3
18832: PUSH
18833: LD_INT 1
18835: PPUSH
18836: LD_VAR 0 3
18840: PPUSH
18841: CALL_OW 12
18845: ARRAY
18846: ST_TO_ADDR
// if Crawls ( un ) then
18847: LD_VAR 0 2
18851: PPUSH
18852: CALL_OW 318
18856: IFFALSE 18867
// ComWalk ( un ) ;
18858: LD_VAR 0 2
18862: PPUSH
18863: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18867: LD_VAR 0 2
18871: PPUSH
18872: LD_INT 8
18874: PPUSH
18875: CALL_OW 336
// end ;
18879: PPOPN 3
18881: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18882: LD_EXP 39
18886: PUSH
18887: LD_EXP 83
18891: AND
18892: IFFALSE 19036
18894: GO 18896
18896: DISABLE
18897: LD_INT 0
18899: PPUSH
18900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18901: LD_ADDR_VAR 0 2
18905: PUSH
18906: LD_INT 22
18908: PUSH
18909: LD_OWVAR 2
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 21
18920: PUSH
18921: LD_INT 2
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 2
18930: PUSH
18931: LD_INT 34
18933: PUSH
18934: LD_INT 12
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 34
18943: PUSH
18944: LD_INT 51
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 34
18953: PUSH
18954: LD_INT 32
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: PPUSH
18972: CALL_OW 69
18976: ST_TO_ADDR
// if not tmp then
18977: LD_VAR 0 2
18981: NOT
18982: IFFALSE 18986
// exit ;
18984: GO 19036
// for i in tmp do
18986: LD_ADDR_VAR 0 1
18990: PUSH
18991: LD_VAR 0 2
18995: PUSH
18996: FOR_IN
18997: IFFALSE 19034
// if GetCargo ( i , mat_artifact ) = 0 then
18999: LD_VAR 0 1
19003: PPUSH
19004: LD_INT 4
19006: PPUSH
19007: CALL_OW 289
19011: PUSH
19012: LD_INT 0
19014: EQUAL
19015: IFFALSE 19032
// SetCargo ( i , mat_siberit , 100 ) ;
19017: LD_VAR 0 1
19021: PPUSH
19022: LD_INT 3
19024: PPUSH
19025: LD_INT 100
19027: PPUSH
19028: CALL_OW 290
19032: GO 18996
19034: POP
19035: POP
// end ;
19036: PPOPN 2
19038: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19039: LD_EXP 39
19043: PUSH
19044: LD_EXP 84
19048: AND
19049: IFFALSE 19232
19051: GO 19053
19053: DISABLE
19054: LD_INT 0
19056: PPUSH
19057: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19058: LD_ADDR_VAR 0 2
19062: PUSH
19063: LD_INT 22
19065: PUSH
19066: LD_OWVAR 2
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PPUSH
19075: CALL_OW 69
19079: ST_TO_ADDR
// if not tmp then
19080: LD_VAR 0 2
19084: NOT
19085: IFFALSE 19089
// exit ;
19087: GO 19232
// for i := 1 to 2 do
19089: LD_ADDR_VAR 0 1
19093: PUSH
19094: DOUBLE
19095: LD_INT 1
19097: DEC
19098: ST_TO_ADDR
19099: LD_INT 2
19101: PUSH
19102: FOR_TO
19103: IFFALSE 19230
// begin uc_side := your_side ;
19105: LD_ADDR_OWVAR 20
19109: PUSH
19110: LD_OWVAR 2
19114: ST_TO_ADDR
// uc_nation := nation_american ;
19115: LD_ADDR_OWVAR 21
19119: PUSH
19120: LD_INT 1
19122: ST_TO_ADDR
// vc_chassis := us_morphling ;
19123: LD_ADDR_OWVAR 37
19127: PUSH
19128: LD_INT 5
19130: ST_TO_ADDR
// vc_engine := engine_siberite ;
19131: LD_ADDR_OWVAR 39
19135: PUSH
19136: LD_INT 3
19138: ST_TO_ADDR
// vc_control := control_computer ;
19139: LD_ADDR_OWVAR 38
19143: PUSH
19144: LD_INT 3
19146: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19147: LD_ADDR_OWVAR 40
19151: PUSH
19152: LD_INT 10
19154: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19155: LD_VAR 0 2
19159: PUSH
19160: LD_INT 1
19162: ARRAY
19163: PPUSH
19164: CALL_OW 310
19168: NOT
19169: IFFALSE 19216
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19171: CALL_OW 45
19175: PPUSH
19176: LD_VAR 0 2
19180: PUSH
19181: LD_INT 1
19183: ARRAY
19184: PPUSH
19185: CALL_OW 250
19189: PPUSH
19190: LD_VAR 0 2
19194: PUSH
19195: LD_INT 1
19197: ARRAY
19198: PPUSH
19199: CALL_OW 251
19203: PPUSH
19204: LD_INT 12
19206: PPUSH
19207: LD_INT 1
19209: PPUSH
19210: CALL_OW 50
19214: GO 19228
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19216: CALL_OW 45
19220: PPUSH
19221: LD_INT 1
19223: PPUSH
19224: CALL_OW 51
// end ;
19228: GO 19102
19230: POP
19231: POP
// end ;
19232: PPOPN 2
19234: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19235: LD_EXP 39
19239: PUSH
19240: LD_EXP 85
19244: AND
19245: IFFALSE 19467
19247: GO 19249
19249: DISABLE
19250: LD_INT 0
19252: PPUSH
19253: PPUSH
19254: PPUSH
19255: PPUSH
19256: PPUSH
19257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19258: LD_ADDR_VAR 0 6
19262: PUSH
19263: LD_INT 22
19265: PUSH
19266: LD_OWVAR 2
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 21
19277: PUSH
19278: LD_INT 1
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 3
19287: PUSH
19288: LD_INT 23
19290: PUSH
19291: LD_INT 0
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: LIST
19306: PPUSH
19307: CALL_OW 69
19311: ST_TO_ADDR
// if not tmp then
19312: LD_VAR 0 6
19316: NOT
19317: IFFALSE 19321
// exit ;
19319: GO 19467
// s1 := rand ( 1 , 4 ) ;
19321: LD_ADDR_VAR 0 2
19325: PUSH
19326: LD_INT 1
19328: PPUSH
19329: LD_INT 4
19331: PPUSH
19332: CALL_OW 12
19336: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19337: LD_ADDR_VAR 0 4
19341: PUSH
19342: LD_VAR 0 6
19346: PUSH
19347: LD_INT 1
19349: ARRAY
19350: PPUSH
19351: LD_VAR 0 2
19355: PPUSH
19356: CALL_OW 259
19360: ST_TO_ADDR
// if s1 = 1 then
19361: LD_VAR 0 2
19365: PUSH
19366: LD_INT 1
19368: EQUAL
19369: IFFALSE 19389
// s2 := rand ( 2 , 4 ) else
19371: LD_ADDR_VAR 0 3
19375: PUSH
19376: LD_INT 2
19378: PPUSH
19379: LD_INT 4
19381: PPUSH
19382: CALL_OW 12
19386: ST_TO_ADDR
19387: GO 19397
// s2 := 1 ;
19389: LD_ADDR_VAR 0 3
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19397: LD_ADDR_VAR 0 5
19401: PUSH
19402: LD_VAR 0 6
19406: PUSH
19407: LD_INT 1
19409: ARRAY
19410: PPUSH
19411: LD_VAR 0 3
19415: PPUSH
19416: CALL_OW 259
19420: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19421: LD_VAR 0 6
19425: PUSH
19426: LD_INT 1
19428: ARRAY
19429: PPUSH
19430: LD_VAR 0 2
19434: PPUSH
19435: LD_VAR 0 5
19439: PPUSH
19440: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19444: LD_VAR 0 6
19448: PUSH
19449: LD_INT 1
19451: ARRAY
19452: PPUSH
19453: LD_VAR 0 3
19457: PPUSH
19458: LD_VAR 0 4
19462: PPUSH
19463: CALL_OW 237
// end ;
19467: PPOPN 6
19469: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19470: LD_EXP 39
19474: PUSH
19475: LD_EXP 86
19479: AND
19480: IFFALSE 19559
19482: GO 19484
19484: DISABLE
19485: LD_INT 0
19487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19488: LD_ADDR_VAR 0 1
19492: PUSH
19493: LD_INT 22
19495: PUSH
19496: LD_OWVAR 2
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 30
19507: PUSH
19508: LD_INT 3
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PPUSH
19519: CALL_OW 69
19523: ST_TO_ADDR
// if not tmp then
19524: LD_VAR 0 1
19528: NOT
19529: IFFALSE 19533
// exit ;
19531: GO 19559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19533: LD_VAR 0 1
19537: PUSH
19538: LD_INT 1
19540: PPUSH
19541: LD_VAR 0 1
19545: PPUSH
19546: CALL_OW 12
19550: ARRAY
19551: PPUSH
19552: LD_INT 1
19554: PPUSH
19555: CALL_OW 234
// end ;
19559: PPOPN 1
19561: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19562: LD_EXP 39
19566: PUSH
19567: LD_EXP 87
19571: AND
19572: IFFALSE 19684
19574: GO 19576
19576: DISABLE
19577: LD_INT 0
19579: PPUSH
19580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19581: LD_ADDR_VAR 0 2
19585: PUSH
19586: LD_INT 22
19588: PUSH
19589: LD_OWVAR 2
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 2
19600: PUSH
19601: LD_INT 30
19603: PUSH
19604: LD_INT 27
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 30
19613: PUSH
19614: LD_INT 26
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 30
19623: PUSH
19624: LD_INT 28
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PPUSH
19641: CALL_OW 69
19645: ST_TO_ADDR
// if not tmp then
19646: LD_VAR 0 2
19650: NOT
19651: IFFALSE 19655
// exit ;
19653: GO 19684
// for i in tmp do
19655: LD_ADDR_VAR 0 1
19659: PUSH
19660: LD_VAR 0 2
19664: PUSH
19665: FOR_IN
19666: IFFALSE 19682
// SetLives ( i , 1 ) ;
19668: LD_VAR 0 1
19672: PPUSH
19673: LD_INT 1
19675: PPUSH
19676: CALL_OW 234
19680: GO 19665
19682: POP
19683: POP
// end ;
19684: PPOPN 2
19686: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19687: LD_EXP 39
19691: PUSH
19692: LD_EXP 88
19696: AND
19697: IFFALSE 19971
19699: GO 19701
19701: DISABLE
19702: LD_INT 0
19704: PPUSH
19705: PPUSH
19706: PPUSH
// begin i := rand ( 1 , 7 ) ;
19707: LD_ADDR_VAR 0 1
19711: PUSH
19712: LD_INT 1
19714: PPUSH
19715: LD_INT 7
19717: PPUSH
19718: CALL_OW 12
19722: ST_TO_ADDR
// case i of 1 :
19723: LD_VAR 0 1
19727: PUSH
19728: LD_INT 1
19730: DOUBLE
19731: EQUAL
19732: IFTRUE 19736
19734: GO 19746
19736: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19737: LD_STRING earthquake(getX(game), 0, 32)
19739: PPUSH
19740: CALL_OW 559
19744: GO 19971
19746: LD_INT 2
19748: DOUBLE
19749: EQUAL
19750: IFTRUE 19754
19752: GO 19768
19754: POP
// begin ToLua ( displayStucuk(); ) ;
19755: LD_STRING displayStucuk();
19757: PPUSH
19758: CALL_OW 559
// ResetFog ;
19762: CALL_OW 335
// end ; 3 :
19766: GO 19971
19768: LD_INT 3
19770: DOUBLE
19771: EQUAL
19772: IFTRUE 19776
19774: GO 19880
19776: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19777: LD_ADDR_VAR 0 2
19781: PUSH
19782: LD_INT 22
19784: PUSH
19785: LD_OWVAR 2
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 25
19796: PUSH
19797: LD_INT 1
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PPUSH
19808: CALL_OW 69
19812: ST_TO_ADDR
// if not tmp then
19813: LD_VAR 0 2
19817: NOT
19818: IFFALSE 19822
// exit ;
19820: GO 19971
// un := tmp [ rand ( 1 , tmp ) ] ;
19822: LD_ADDR_VAR 0 3
19826: PUSH
19827: LD_VAR 0 2
19831: PUSH
19832: LD_INT 1
19834: PPUSH
19835: LD_VAR 0 2
19839: PPUSH
19840: CALL_OW 12
19844: ARRAY
19845: ST_TO_ADDR
// if Crawls ( un ) then
19846: LD_VAR 0 3
19850: PPUSH
19851: CALL_OW 318
19855: IFFALSE 19866
// ComWalk ( un ) ;
19857: LD_VAR 0 3
19861: PPUSH
19862: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19866: LD_VAR 0 3
19870: PPUSH
19871: LD_INT 8
19873: PPUSH
19874: CALL_OW 336
// end ; 4 :
19878: GO 19971
19880: LD_INT 4
19882: DOUBLE
19883: EQUAL
19884: IFTRUE 19888
19886: GO 19949
19888: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19889: LD_ADDR_VAR 0 2
19893: PUSH
19894: LD_INT 22
19896: PUSH
19897: LD_OWVAR 2
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 30
19908: PUSH
19909: LD_INT 29
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PPUSH
19920: CALL_OW 69
19924: ST_TO_ADDR
// if not tmp then
19925: LD_VAR 0 2
19929: NOT
19930: IFFALSE 19934
// exit ;
19932: GO 19971
// DestroyUnit ( tmp [ 1 ] ) ;
19934: LD_VAR 0 2
19938: PUSH
19939: LD_INT 1
19941: ARRAY
19942: PPUSH
19943: CALL_OW 65
// end ; 5 .. 7 :
19947: GO 19971
19949: LD_INT 5
19951: DOUBLE
19952: GREATEREQUAL
19953: IFFALSE 19961
19955: LD_INT 7
19957: DOUBLE
19958: LESSEQUAL
19959: IFTRUE 19963
19961: GO 19970
19963: POP
// StreamSibBomb ; end ;
19964: CALL 16221 0 0
19968: GO 19971
19970: POP
// end ;
19971: PPOPN 3
19973: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19974: LD_EXP 39
19978: PUSH
19979: LD_EXP 89
19983: AND
19984: IFFALSE 20140
19986: GO 19988
19988: DISABLE
19989: LD_INT 0
19991: PPUSH
19992: PPUSH
19993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19994: LD_ADDR_VAR 0 2
19998: PUSH
19999: LD_INT 81
20001: PUSH
20002: LD_OWVAR 2
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 2
20013: PUSH
20014: LD_INT 21
20016: PUSH
20017: LD_INT 1
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 21
20026: PUSH
20027: LD_INT 2
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: LIST
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PPUSH
20043: CALL_OW 69
20047: ST_TO_ADDR
// if not tmp then
20048: LD_VAR 0 2
20052: NOT
20053: IFFALSE 20057
// exit ;
20055: GO 20140
// p := 0 ;
20057: LD_ADDR_VAR 0 3
20061: PUSH
20062: LD_INT 0
20064: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20065: LD_INT 35
20067: PPUSH
20068: CALL_OW 67
// p := p + 1 ;
20072: LD_ADDR_VAR 0 3
20076: PUSH
20077: LD_VAR 0 3
20081: PUSH
20082: LD_INT 1
20084: PLUS
20085: ST_TO_ADDR
// for i in tmp do
20086: LD_ADDR_VAR 0 1
20090: PUSH
20091: LD_VAR 0 2
20095: PUSH
20096: FOR_IN
20097: IFFALSE 20128
// if GetLives ( i ) < 1000 then
20099: LD_VAR 0 1
20103: PPUSH
20104: CALL_OW 256
20108: PUSH
20109: LD_INT 1000
20111: LESS
20112: IFFALSE 20126
// SetLives ( i , 1000 ) ;
20114: LD_VAR 0 1
20118: PPUSH
20119: LD_INT 1000
20121: PPUSH
20122: CALL_OW 234
20126: GO 20096
20128: POP
20129: POP
// until p > 20 ;
20130: LD_VAR 0 3
20134: PUSH
20135: LD_INT 20
20137: GREATER
20138: IFFALSE 20065
// end ;
20140: PPOPN 3
20142: END
// every 0 0$1 trigger StreamModeActive and sTime do
20143: LD_EXP 39
20147: PUSH
20148: LD_EXP 90
20152: AND
20153: IFFALSE 20188
20155: GO 20157
20157: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20158: LD_INT 28
20160: PPUSH
20161: LD_OWVAR 2
20165: PPUSH
20166: LD_INT 2
20168: PPUSH
20169: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20173: LD_INT 30
20175: PPUSH
20176: LD_OWVAR 2
20180: PPUSH
20181: LD_INT 2
20183: PPUSH
20184: CALL_OW 322
// end ;
20188: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20189: LD_EXP 39
20193: PUSH
20194: LD_EXP 91
20198: AND
20199: IFFALSE 20320
20201: GO 20203
20203: DISABLE
20204: LD_INT 0
20206: PPUSH
20207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20208: LD_ADDR_VAR 0 2
20212: PUSH
20213: LD_INT 22
20215: PUSH
20216: LD_OWVAR 2
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 21
20227: PUSH
20228: LD_INT 1
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 3
20237: PUSH
20238: LD_INT 23
20240: PUSH
20241: LD_INT 0
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: LIST
20256: PPUSH
20257: CALL_OW 69
20261: ST_TO_ADDR
// if not tmp then
20262: LD_VAR 0 2
20266: NOT
20267: IFFALSE 20271
// exit ;
20269: GO 20320
// for i in tmp do
20271: LD_ADDR_VAR 0 1
20275: PUSH
20276: LD_VAR 0 2
20280: PUSH
20281: FOR_IN
20282: IFFALSE 20318
// begin if Crawls ( i ) then
20284: LD_VAR 0 1
20288: PPUSH
20289: CALL_OW 318
20293: IFFALSE 20304
// ComWalk ( i ) ;
20295: LD_VAR 0 1
20299: PPUSH
20300: CALL_OW 138
// SetClass ( i , 2 ) ;
20304: LD_VAR 0 1
20308: PPUSH
20309: LD_INT 2
20311: PPUSH
20312: CALL_OW 336
// end ;
20316: GO 20281
20318: POP
20319: POP
// end ;
20320: PPOPN 2
20322: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20323: LD_EXP 39
20327: PUSH
20328: LD_EXP 92
20332: AND
20333: IFFALSE 20614
20335: GO 20337
20337: DISABLE
20338: LD_INT 0
20340: PPUSH
20341: PPUSH
20342: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20343: LD_OWVAR 2
20347: PPUSH
20348: LD_INT 9
20350: PPUSH
20351: LD_INT 1
20353: PPUSH
20354: LD_INT 1
20356: PPUSH
20357: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20361: LD_INT 9
20363: PPUSH
20364: LD_OWVAR 2
20368: PPUSH
20369: CALL_OW 343
// uc_side := 9 ;
20373: LD_ADDR_OWVAR 20
20377: PUSH
20378: LD_INT 9
20380: ST_TO_ADDR
// uc_nation := 2 ;
20381: LD_ADDR_OWVAR 21
20385: PUSH
20386: LD_INT 2
20388: ST_TO_ADDR
// hc_name := Dark Warrior ;
20389: LD_ADDR_OWVAR 26
20393: PUSH
20394: LD_STRING Dark Warrior
20396: ST_TO_ADDR
// hc_gallery :=  ;
20397: LD_ADDR_OWVAR 33
20401: PUSH
20402: LD_STRING 
20404: ST_TO_ADDR
// hc_noskilllimit := true ;
20405: LD_ADDR_OWVAR 76
20409: PUSH
20410: LD_INT 1
20412: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20413: LD_ADDR_OWVAR 31
20417: PUSH
20418: LD_INT 30
20420: PUSH
20421: LD_INT 30
20423: PUSH
20424: LD_INT 30
20426: PUSH
20427: LD_INT 30
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: ST_TO_ADDR
// un := CreateHuman ;
20436: LD_ADDR_VAR 0 3
20440: PUSH
20441: CALL_OW 44
20445: ST_TO_ADDR
// hc_noskilllimit := false ;
20446: LD_ADDR_OWVAR 76
20450: PUSH
20451: LD_INT 0
20453: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20454: LD_VAR 0 3
20458: PPUSH
20459: LD_INT 1
20461: PPUSH
20462: CALL_OW 51
// p := 0 ;
20466: LD_ADDR_VAR 0 2
20470: PUSH
20471: LD_INT 0
20473: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20474: LD_INT 35
20476: PPUSH
20477: CALL_OW 67
// p := p + 1 ;
20481: LD_ADDR_VAR 0 2
20485: PUSH
20486: LD_VAR 0 2
20490: PUSH
20491: LD_INT 1
20493: PLUS
20494: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20495: LD_VAR 0 3
20499: PPUSH
20500: CALL_OW 256
20504: PUSH
20505: LD_INT 1000
20507: LESS
20508: IFFALSE 20522
// SetLives ( un , 1000 ) ;
20510: LD_VAR 0 3
20514: PPUSH
20515: LD_INT 1000
20517: PPUSH
20518: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20522: LD_VAR 0 3
20526: PPUSH
20527: LD_INT 81
20529: PUSH
20530: LD_OWVAR 2
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 91
20541: PUSH
20542: LD_VAR 0 3
20546: PUSH
20547: LD_INT 30
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: LIST
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PPUSH
20559: CALL_OW 69
20563: PPUSH
20564: LD_VAR 0 3
20568: PPUSH
20569: CALL_OW 74
20573: PPUSH
20574: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20578: LD_VAR 0 2
20582: PUSH
20583: LD_INT 60
20585: GREATER
20586: PUSH
20587: LD_VAR 0 3
20591: PPUSH
20592: CALL_OW 301
20596: OR
20597: IFFALSE 20474
// if un then
20599: LD_VAR 0 3
20603: IFFALSE 20614
// RemoveUnit ( un ) ;
20605: LD_VAR 0 3
20609: PPUSH
20610: CALL_OW 64
// end ; end_of_file
20614: PPOPN 3
20616: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20617: LD_INT 0
20619: PPUSH
20620: PPUSH
20621: PPUSH
20622: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20623: LD_VAR 0 1
20627: PPUSH
20628: CALL_OW 264
20632: PUSH
20633: LD_EXP 29
20637: EQUAL
20638: IFFALSE 20710
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20640: LD_INT 68
20642: PPUSH
20643: LD_VAR 0 1
20647: PPUSH
20648: CALL_OW 255
20652: PPUSH
20653: CALL_OW 321
20657: PUSH
20658: LD_INT 2
20660: EQUAL
20661: IFFALSE 20673
// eff := 70 else
20663: LD_ADDR_VAR 0 4
20667: PUSH
20668: LD_INT 70
20670: ST_TO_ADDR
20671: GO 20681
// eff := 30 ;
20673: LD_ADDR_VAR 0 4
20677: PUSH
20678: LD_INT 30
20680: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20681: LD_VAR 0 1
20685: PPUSH
20686: CALL_OW 250
20690: PPUSH
20691: LD_VAR 0 1
20695: PPUSH
20696: CALL_OW 251
20700: PPUSH
20701: LD_VAR 0 4
20705: PPUSH
20706: CALL_OW 495
// end ; end ;
20710: LD_VAR 0 2
20714: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20715: LD_INT 0
20717: PPUSH
// end ;
20718: LD_VAR 0 4
20722: RET
// export function SOS_Command ( cmd ) ; begin
20723: LD_INT 0
20725: PPUSH
// end ;
20726: LD_VAR 0 2
20730: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20731: LD_VAR 0 1
20735: PUSH
20736: LD_INT 254
20738: EQUAL
20739: PUSH
20740: LD_VAR 0 2
20744: PPUSH
20745: CALL_OW 264
20749: PUSH
20750: LD_EXP 27
20754: EQUAL
20755: AND
20756: PUSH
20757: LD_VAR 0 3
20761: PPUSH
20762: CALL_OW 263
20766: PUSH
20767: LD_INT 3
20769: EQUAL
20770: AND
20771: IFFALSE 20782
// DestroyUnit ( selectedUnit ) ;
20773: LD_VAR 0 3
20777: PPUSH
20778: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20782: LD_VAR 0 1
20786: PUSH
20787: LD_INT 255
20789: EQUAL
20790: PUSH
20791: LD_VAR 0 2
20795: PPUSH
20796: CALL_OW 264
20800: PUSH
20801: LD_INT 14
20803: PUSH
20804: LD_INT 53
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: IN
20811: AND
20812: PUSH
20813: LD_VAR 0 4
20817: PPUSH
20818: LD_VAR 0 5
20822: PPUSH
20823: CALL_OW 488
20827: AND
20828: IFFALSE 20852
// CutTreeXYR ( unit , x , y , 12 ) ;
20830: LD_VAR 0 2
20834: PPUSH
20835: LD_VAR 0 4
20839: PPUSH
20840: LD_VAR 0 5
20844: PPUSH
20845: LD_INT 12
20847: PPUSH
20848: CALL 20855 0 4
// end ;
20852: PPOPN 5
20854: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20855: LD_INT 0
20857: PPUSH
20858: PPUSH
20859: PPUSH
20860: PPUSH
20861: PPUSH
20862: PPUSH
20863: PPUSH
20864: PPUSH
20865: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20866: LD_VAR 0 1
20870: NOT
20871: PUSH
20872: LD_VAR 0 2
20876: PPUSH
20877: LD_VAR 0 3
20881: PPUSH
20882: CALL_OW 488
20886: NOT
20887: OR
20888: PUSH
20889: LD_VAR 0 4
20893: NOT
20894: OR
20895: IFFALSE 20899
// exit ;
20897: GO 21239
// list := [ ] ;
20899: LD_ADDR_VAR 0 13
20903: PUSH
20904: EMPTY
20905: ST_TO_ADDR
// if x - r < 0 then
20906: LD_VAR 0 2
20910: PUSH
20911: LD_VAR 0 4
20915: MINUS
20916: PUSH
20917: LD_INT 0
20919: LESS
20920: IFFALSE 20932
// min_x := 0 else
20922: LD_ADDR_VAR 0 7
20926: PUSH
20927: LD_INT 0
20929: ST_TO_ADDR
20930: GO 20948
// min_x := x - r ;
20932: LD_ADDR_VAR 0 7
20936: PUSH
20937: LD_VAR 0 2
20941: PUSH
20942: LD_VAR 0 4
20946: MINUS
20947: ST_TO_ADDR
// if y - r < 0 then
20948: LD_VAR 0 3
20952: PUSH
20953: LD_VAR 0 4
20957: MINUS
20958: PUSH
20959: LD_INT 0
20961: LESS
20962: IFFALSE 20974
// min_y := 0 else
20964: LD_ADDR_VAR 0 8
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
20972: GO 20990
// min_y := y - r ;
20974: LD_ADDR_VAR 0 8
20978: PUSH
20979: LD_VAR 0 3
20983: PUSH
20984: LD_VAR 0 4
20988: MINUS
20989: ST_TO_ADDR
// max_x := x + r ;
20990: LD_ADDR_VAR 0 9
20994: PUSH
20995: LD_VAR 0 2
20999: PUSH
21000: LD_VAR 0 4
21004: PLUS
21005: ST_TO_ADDR
// max_y := y + r ;
21006: LD_ADDR_VAR 0 10
21010: PUSH
21011: LD_VAR 0 3
21015: PUSH
21016: LD_VAR 0 4
21020: PLUS
21021: ST_TO_ADDR
// for _x = min_x to max_x do
21022: LD_ADDR_VAR 0 11
21026: PUSH
21027: DOUBLE
21028: LD_VAR 0 7
21032: DEC
21033: ST_TO_ADDR
21034: LD_VAR 0 9
21038: PUSH
21039: FOR_TO
21040: IFFALSE 21157
// for _y = min_y to max_y do
21042: LD_ADDR_VAR 0 12
21046: PUSH
21047: DOUBLE
21048: LD_VAR 0 8
21052: DEC
21053: ST_TO_ADDR
21054: LD_VAR 0 10
21058: PUSH
21059: FOR_TO
21060: IFFALSE 21153
// begin if not ValidHex ( _x , _y ) then
21062: LD_VAR 0 11
21066: PPUSH
21067: LD_VAR 0 12
21071: PPUSH
21072: CALL_OW 488
21076: NOT
21077: IFFALSE 21081
// continue ;
21079: GO 21059
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21081: LD_VAR 0 11
21085: PPUSH
21086: LD_VAR 0 12
21090: PPUSH
21091: CALL_OW 351
21095: PUSH
21096: LD_VAR 0 11
21100: PPUSH
21101: LD_VAR 0 12
21105: PPUSH
21106: CALL_OW 554
21110: AND
21111: IFFALSE 21151
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21113: LD_ADDR_VAR 0 13
21117: PUSH
21118: LD_VAR 0 13
21122: PPUSH
21123: LD_VAR 0 13
21127: PUSH
21128: LD_INT 1
21130: PLUS
21131: PPUSH
21132: LD_VAR 0 11
21136: PUSH
21137: LD_VAR 0 12
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PPUSH
21146: CALL_OW 2
21150: ST_TO_ADDR
// end ;
21151: GO 21059
21153: POP
21154: POP
21155: GO 21039
21157: POP
21158: POP
// if not list then
21159: LD_VAR 0 13
21163: NOT
21164: IFFALSE 21168
// exit ;
21166: GO 21239
// for i in list do
21168: LD_ADDR_VAR 0 6
21172: PUSH
21173: LD_VAR 0 13
21177: PUSH
21178: FOR_IN
21179: IFFALSE 21237
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21181: LD_VAR 0 1
21185: PPUSH
21186: LD_STRING M
21188: PUSH
21189: LD_VAR 0 6
21193: PUSH
21194: LD_INT 1
21196: ARRAY
21197: PUSH
21198: LD_VAR 0 6
21202: PUSH
21203: LD_INT 2
21205: ARRAY
21206: PUSH
21207: LD_INT 0
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: LD_INT 0
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: PUSH
21228: EMPTY
21229: LIST
21230: PPUSH
21231: CALL_OW 447
21235: GO 21178
21237: POP
21238: POP
// end ;
21239: LD_VAR 0 5
21243: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist ; every 0 0$1 trigger not initHack do
21244: LD_EXP 93
21248: NOT
21249: IFFALSE 21292
21251: GO 21253
21253: DISABLE
// begin initHack := true ;
21254: LD_ADDR_EXP 93
21258: PUSH
21259: LD_INT 1
21261: ST_TO_ADDR
// hackTanks := [ ] ;
21262: LD_ADDR_EXP 94
21266: PUSH
21267: EMPTY
21268: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21269: LD_ADDR_EXP 95
21273: PUSH
21274: EMPTY
21275: ST_TO_ADDR
// hackLimit := 3 ;
21276: LD_ADDR_EXP 96
21280: PUSH
21281: LD_INT 3
21283: ST_TO_ADDR
// hackDist := 12 ;
21284: LD_ADDR_EXP 97
21288: PUSH
21289: LD_INT 12
21291: ST_TO_ADDR
// end ;
21292: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21293: LD_EXP 93
21297: PUSH
21298: LD_INT 34
21300: PUSH
21301: LD_EXP 27
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PPUSH
21310: CALL_OW 69
21314: AND
21315: IFFALSE 21544
21317: GO 21319
21319: DISABLE
21320: LD_INT 0
21322: PPUSH
21323: PPUSH
// begin enable ;
21324: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21325: LD_ADDR_VAR 0 1
21329: PUSH
21330: LD_INT 34
21332: PUSH
21333: LD_EXP 27
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PPUSH
21342: CALL_OW 69
21346: PUSH
21347: FOR_IN
21348: IFFALSE 21542
// begin if not i in hackTanks then
21350: LD_VAR 0 1
21354: PUSH
21355: LD_EXP 94
21359: IN
21360: NOT
21361: IFFALSE 21418
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21363: LD_ADDR_EXP 94
21367: PUSH
21368: LD_EXP 94
21372: PPUSH
21373: LD_EXP 94
21377: PUSH
21378: LD_INT 1
21380: PLUS
21381: PPUSH
21382: LD_VAR 0 1
21386: PPUSH
21387: CALL_OW 1
21391: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21392: LD_ADDR_EXP 95
21396: PUSH
21397: LD_EXP 95
21401: PPUSH
21402: LD_EXP 95
21406: PUSH
21407: LD_INT 1
21409: PLUS
21410: PPUSH
21411: EMPTY
21412: PPUSH
21413: CALL_OW 1
21417: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21418: LD_VAR 0 1
21422: PPUSH
21423: CALL_OW 302
21427: NOT
21428: IFFALSE 21441
// begin HackUnlinkAll ( i ) ;
21430: LD_VAR 0 1
21434: PPUSH
21435: CALL 21547 0 1
// continue ;
21439: GO 21347
// end ; HackCheckCapturedStatus ( i ) ;
21441: LD_VAR 0 1
21445: PPUSH
21446: CALL 21965 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21450: LD_ADDR_VAR 0 2
21454: PUSH
21455: LD_INT 81
21457: PUSH
21458: LD_VAR 0 1
21462: PPUSH
21463: CALL_OW 255
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 33
21474: PUSH
21475: LD_INT 3
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 91
21484: PUSH
21485: LD_VAR 0 1
21489: PUSH
21490: LD_EXP 97
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 50
21502: PUSH
21503: EMPTY
21504: LIST
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL_OW 69
21516: ST_TO_ADDR
// if not tmp then
21517: LD_VAR 0 2
21521: NOT
21522: IFFALSE 21526
// continue ;
21524: GO 21347
// HackLink ( i , tmp ) ;
21526: LD_VAR 0 1
21530: PPUSH
21531: LD_VAR 0 2
21535: PPUSH
21536: CALL 21683 0 2
// end ;
21540: GO 21347
21542: POP
21543: POP
// end ;
21544: PPOPN 2
21546: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21547: LD_INT 0
21549: PPUSH
21550: PPUSH
21551: PPUSH
// if not hack in hackTanks then
21552: LD_VAR 0 1
21556: PUSH
21557: LD_EXP 94
21561: IN
21562: NOT
21563: IFFALSE 21567
// exit ;
21565: GO 21678
// index := GetElementIndex ( hackTanks , hack ) ;
21567: LD_ADDR_VAR 0 4
21571: PUSH
21572: LD_EXP 94
21576: PPUSH
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL 26962 0 2
21586: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21587: LD_EXP 95
21591: PUSH
21592: LD_VAR 0 4
21596: ARRAY
21597: IFFALSE 21678
// begin for i in hackTanksCaptured [ index ] do
21599: LD_ADDR_VAR 0 3
21603: PUSH
21604: LD_EXP 95
21608: PUSH
21609: LD_VAR 0 4
21613: ARRAY
21614: PUSH
21615: FOR_IN
21616: IFFALSE 21642
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21618: LD_VAR 0 3
21622: PUSH
21623: LD_INT 1
21625: ARRAY
21626: PPUSH
21627: LD_VAR 0 3
21631: PUSH
21632: LD_INT 2
21634: ARRAY
21635: PPUSH
21636: CALL_OW 235
21640: GO 21615
21642: POP
21643: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21644: LD_ADDR_EXP 95
21648: PUSH
21649: LD_EXP 95
21653: PPUSH
21654: LD_VAR 0 4
21658: PPUSH
21659: EMPTY
21660: PPUSH
21661: CALL_OW 1
21665: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21666: LD_VAR 0 1
21670: PPUSH
21671: LD_INT 0
21673: PPUSH
21674: CALL_OW 505
// end ; end ;
21678: LD_VAR 0 2
21682: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21683: LD_INT 0
21685: PPUSH
21686: PPUSH
21687: PPUSH
// if not hack in hackTanks or not vehicles then
21688: LD_VAR 0 1
21692: PUSH
21693: LD_EXP 94
21697: IN
21698: NOT
21699: PUSH
21700: LD_VAR 0 2
21704: NOT
21705: OR
21706: IFFALSE 21710
// exit ;
21708: GO 21960
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21710: LD_ADDR_VAR 0 2
21714: PUSH
21715: LD_VAR 0 1
21719: PPUSH
21720: LD_VAR 0 2
21724: PPUSH
21725: LD_INT 1
21727: PPUSH
21728: LD_INT 1
21730: PPUSH
21731: CALL 27612 0 4
21735: ST_TO_ADDR
// display_strings := vehicles ;
21736: LD_ADDR_OWVAR 47
21740: PUSH
21741: LD_VAR 0 2
21745: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21746: LD_ADDR_VAR 0 5
21750: PUSH
21751: LD_EXP 94
21755: PPUSH
21756: LD_VAR 0 1
21760: PPUSH
21761: CALL 26962 0 2
21765: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21766: LD_EXP 95
21770: PUSH
21771: LD_VAR 0 5
21775: ARRAY
21776: PUSH
21777: LD_EXP 96
21781: LESS
21782: IFFALSE 21936
// begin for i := 1 to vehicles do
21784: LD_ADDR_VAR 0 4
21788: PUSH
21789: DOUBLE
21790: LD_INT 1
21792: DEC
21793: ST_TO_ADDR
21794: LD_VAR 0 2
21798: PUSH
21799: FOR_TO
21800: IFFALSE 21934
// begin if hackTanksCaptured [ index ] = hackLimit then
21802: LD_EXP 95
21806: PUSH
21807: LD_VAR 0 5
21811: ARRAY
21812: PUSH
21813: LD_EXP 96
21817: EQUAL
21818: IFFALSE 21822
// break ;
21820: GO 21934
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21822: LD_ADDR_EXP 95
21826: PUSH
21827: LD_EXP 95
21831: PPUSH
21832: LD_VAR 0 5
21836: PUSH
21837: LD_EXP 95
21841: PUSH
21842: LD_VAR 0 5
21846: ARRAY
21847: PUSH
21848: LD_INT 1
21850: PLUS
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PPUSH
21856: LD_VAR 0 2
21860: PUSH
21861: LD_VAR 0 4
21865: ARRAY
21866: PUSH
21867: LD_VAR 0 2
21871: PUSH
21872: LD_VAR 0 4
21876: ARRAY
21877: PPUSH
21878: CALL_OW 255
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PPUSH
21887: CALL 27177 0 3
21891: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21892: LD_VAR 0 2
21896: PUSH
21897: LD_VAR 0 4
21901: ARRAY
21902: PPUSH
21903: LD_VAR 0 1
21907: PPUSH
21908: CALL_OW 255
21912: PPUSH
21913: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21917: LD_VAR 0 2
21921: PUSH
21922: LD_VAR 0 4
21926: ARRAY
21927: PPUSH
21928: CALL_OW 141
// end ;
21932: GO 21799
21934: POP
21935: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21936: LD_VAR 0 1
21940: PPUSH
21941: LD_EXP 95
21945: PUSH
21946: LD_VAR 0 5
21950: ARRAY
21951: PUSH
21952: LD_INT 0
21954: PLUS
21955: PPUSH
21956: CALL_OW 505
// end ;
21960: LD_VAR 0 3
21964: RET
// export function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21965: LD_INT 0
21967: PPUSH
21968: PPUSH
21969: PPUSH
21970: PPUSH
// if not hack in hackTanks then
21971: LD_VAR 0 1
21975: PUSH
21976: LD_EXP 94
21980: IN
21981: NOT
21982: IFFALSE 21986
// exit ;
21984: GO 22226
// index := GetElementIndex ( hackTanks , hack ) ;
21986: LD_ADDR_VAR 0 4
21990: PUSH
21991: LD_EXP 94
21995: PPUSH
21996: LD_VAR 0 1
22000: PPUSH
22001: CALL 26962 0 2
22005: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22006: LD_ADDR_VAR 0 3
22010: PUSH
22011: DOUBLE
22012: LD_EXP 95
22016: PUSH
22017: LD_VAR 0 4
22021: ARRAY
22022: INC
22023: ST_TO_ADDR
22024: LD_INT 1
22026: PUSH
22027: FOR_DOWNTO
22028: IFFALSE 22200
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22030: LD_ADDR_VAR 0 5
22034: PUSH
22035: LD_EXP 95
22039: PUSH
22040: LD_VAR 0 4
22044: ARRAY
22045: PUSH
22046: LD_VAR 0 3
22050: ARRAY
22051: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22052: LD_VAR 0 5
22056: PUSH
22057: LD_INT 1
22059: ARRAY
22060: PPUSH
22061: CALL_OW 302
22065: NOT
22066: PUSH
22067: LD_VAR 0 5
22071: PUSH
22072: LD_INT 1
22074: ARRAY
22075: PPUSH
22076: CALL_OW 255
22080: PUSH
22081: LD_VAR 0 1
22085: PPUSH
22086: CALL_OW 255
22090: NONEQUAL
22091: OR
22092: IFFALSE 22198
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22094: LD_VAR 0 5
22098: PUSH
22099: LD_INT 1
22101: ARRAY
22102: PPUSH
22103: CALL_OW 305
22107: PUSH
22108: LD_VAR 0 5
22112: PUSH
22113: LD_INT 1
22115: ARRAY
22116: PPUSH
22117: CALL_OW 255
22121: PUSH
22122: LD_VAR 0 1
22126: PPUSH
22127: CALL_OW 255
22131: EQUAL
22132: AND
22133: IFFALSE 22157
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22135: LD_VAR 0 5
22139: PUSH
22140: LD_INT 1
22142: ARRAY
22143: PPUSH
22144: LD_VAR 0 5
22148: PUSH
22149: LD_INT 2
22151: ARRAY
22152: PPUSH
22153: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22157: LD_ADDR_EXP 95
22161: PUSH
22162: LD_EXP 95
22166: PPUSH
22167: LD_VAR 0 4
22171: PPUSH
22172: LD_EXP 95
22176: PUSH
22177: LD_VAR 0 4
22181: ARRAY
22182: PPUSH
22183: LD_VAR 0 3
22187: PPUSH
22188: CALL_OW 3
22192: PPUSH
22193: CALL_OW 1
22197: ST_TO_ADDR
// end ; end ;
22198: GO 22027
22200: POP
22201: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22202: LD_VAR 0 1
22206: PPUSH
22207: LD_EXP 95
22211: PUSH
22212: LD_VAR 0 4
22216: ARRAY
22217: PUSH
22218: LD_INT 0
22220: PLUS
22221: PPUSH
22222: CALL_OW 505
// end ; end_of_file
22226: LD_VAR 0 2
22230: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22231: LD_INT 0
22233: PPUSH
22234: PPUSH
// if exist_mode then
22235: LD_VAR 0 2
22239: IFFALSE 22264
// unit := CreateCharacter ( prefix & ident ) else
22241: LD_ADDR_VAR 0 5
22245: PUSH
22246: LD_VAR 0 3
22250: PUSH
22251: LD_VAR 0 1
22255: STR
22256: PPUSH
22257: CALL_OW 34
22261: ST_TO_ADDR
22262: GO 22279
// unit := NewCharacter ( ident ) ;
22264: LD_ADDR_VAR 0 5
22268: PUSH
22269: LD_VAR 0 1
22273: PPUSH
22274: CALL_OW 25
22278: ST_TO_ADDR
// result := unit ;
22279: LD_ADDR_VAR 0 4
22283: PUSH
22284: LD_VAR 0 5
22288: ST_TO_ADDR
// end ;
22289: LD_VAR 0 4
22293: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22294: LD_INT 0
22296: PPUSH
22297: PPUSH
// if not side or not nation then
22298: LD_VAR 0 1
22302: NOT
22303: PUSH
22304: LD_VAR 0 2
22308: NOT
22309: OR
22310: IFFALSE 22314
// exit ;
22312: GO 23078
// case nation of nation_american :
22314: LD_VAR 0 2
22318: PUSH
22319: LD_INT 1
22321: DOUBLE
22322: EQUAL
22323: IFTRUE 22327
22325: GO 22541
22327: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22328: LD_ADDR_VAR 0 4
22332: PUSH
22333: LD_INT 35
22335: PUSH
22336: LD_INT 45
22338: PUSH
22339: LD_INT 46
22341: PUSH
22342: LD_INT 47
22344: PUSH
22345: LD_INT 82
22347: PUSH
22348: LD_INT 83
22350: PUSH
22351: LD_INT 84
22353: PUSH
22354: LD_INT 85
22356: PUSH
22357: LD_INT 86
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: LD_INT 2
22365: PUSH
22366: LD_INT 6
22368: PUSH
22369: LD_INT 15
22371: PUSH
22372: LD_INT 16
22374: PUSH
22375: LD_INT 7
22377: PUSH
22378: LD_INT 12
22380: PUSH
22381: LD_INT 13
22383: PUSH
22384: LD_INT 10
22386: PUSH
22387: LD_INT 14
22389: PUSH
22390: LD_INT 20
22392: PUSH
22393: LD_INT 21
22395: PUSH
22396: LD_INT 22
22398: PUSH
22399: LD_INT 25
22401: PUSH
22402: LD_INT 32
22404: PUSH
22405: LD_INT 27
22407: PUSH
22408: LD_INT 36
22410: PUSH
22411: LD_INT 69
22413: PUSH
22414: LD_INT 39
22416: PUSH
22417: LD_INT 34
22419: PUSH
22420: LD_INT 40
22422: PUSH
22423: LD_INT 48
22425: PUSH
22426: LD_INT 49
22428: PUSH
22429: LD_INT 50
22431: PUSH
22432: LD_INT 51
22434: PUSH
22435: LD_INT 52
22437: PUSH
22438: LD_INT 53
22440: PUSH
22441: LD_INT 54
22443: PUSH
22444: LD_INT 55
22446: PUSH
22447: LD_INT 56
22449: PUSH
22450: LD_INT 57
22452: PUSH
22453: LD_INT 58
22455: PUSH
22456: LD_INT 59
22458: PUSH
22459: LD_INT 60
22461: PUSH
22462: LD_INT 61
22464: PUSH
22465: LD_INT 62
22467: PUSH
22468: LD_INT 80
22470: PUSH
22471: LD_INT 82
22473: PUSH
22474: LD_INT 83
22476: PUSH
22477: LD_INT 84
22479: PUSH
22480: LD_INT 85
22482: PUSH
22483: LD_INT 86
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: ST_TO_ADDR
22539: GO 23002
22541: LD_INT 2
22543: DOUBLE
22544: EQUAL
22545: IFTRUE 22549
22547: GO 22771
22549: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
22550: LD_ADDR_VAR 0 4
22554: PUSH
22555: LD_INT 35
22557: PUSH
22558: LD_INT 45
22560: PUSH
22561: LD_INT 46
22563: PUSH
22564: LD_INT 47
22566: PUSH
22567: LD_INT 82
22569: PUSH
22570: LD_INT 83
22572: PUSH
22573: LD_INT 84
22575: PUSH
22576: LD_INT 85
22578: PUSH
22579: LD_INT 87
22581: PUSH
22582: LD_INT 70
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: LD_INT 11
22590: PUSH
22591: LD_INT 3
22593: PUSH
22594: LD_INT 4
22596: PUSH
22597: LD_INT 5
22599: PUSH
22600: LD_INT 6
22602: PUSH
22603: LD_INT 15
22605: PUSH
22606: LD_INT 18
22608: PUSH
22609: LD_INT 7
22611: PUSH
22612: LD_INT 17
22614: PUSH
22615: LD_INT 8
22617: PUSH
22618: LD_INT 20
22620: PUSH
22621: LD_INT 21
22623: PUSH
22624: LD_INT 22
22626: PUSH
22627: LD_INT 72
22629: PUSH
22630: LD_INT 26
22632: PUSH
22633: LD_INT 69
22635: PUSH
22636: LD_INT 39
22638: PUSH
22639: LD_INT 40
22641: PUSH
22642: LD_INT 41
22644: PUSH
22645: LD_INT 42
22647: PUSH
22648: LD_INT 43
22650: PUSH
22651: LD_INT 48
22653: PUSH
22654: LD_INT 49
22656: PUSH
22657: LD_INT 50
22659: PUSH
22660: LD_INT 51
22662: PUSH
22663: LD_INT 52
22665: PUSH
22666: LD_INT 53
22668: PUSH
22669: LD_INT 54
22671: PUSH
22672: LD_INT 55
22674: PUSH
22675: LD_INT 56
22677: PUSH
22678: LD_INT 60
22680: PUSH
22681: LD_INT 61
22683: PUSH
22684: LD_INT 62
22686: PUSH
22687: LD_INT 66
22689: PUSH
22690: LD_INT 67
22692: PUSH
22693: LD_INT 68
22695: PUSH
22696: LD_INT 81
22698: PUSH
22699: LD_INT 82
22701: PUSH
22702: LD_INT 83
22704: PUSH
22705: LD_INT 84
22707: PUSH
22708: LD_INT 85
22710: PUSH
22711: LD_INT 87
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: ST_TO_ADDR
22769: GO 23002
22771: LD_INT 3
22773: DOUBLE
22774: EQUAL
22775: IFTRUE 22779
22777: GO 23001
22779: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22780: LD_ADDR_VAR 0 4
22784: PUSH
22785: LD_INT 46
22787: PUSH
22788: LD_INT 47
22790: PUSH
22791: LD_INT 1
22793: PUSH
22794: LD_INT 2
22796: PUSH
22797: LD_INT 82
22799: PUSH
22800: LD_INT 83
22802: PUSH
22803: LD_INT 84
22805: PUSH
22806: LD_INT 85
22808: PUSH
22809: LD_INT 86
22811: PUSH
22812: LD_INT 11
22814: PUSH
22815: LD_INT 9
22817: PUSH
22818: LD_INT 20
22820: PUSH
22821: LD_INT 19
22823: PUSH
22824: LD_INT 21
22826: PUSH
22827: LD_INT 24
22829: PUSH
22830: LD_INT 22
22832: PUSH
22833: LD_INT 25
22835: PUSH
22836: LD_INT 28
22838: PUSH
22839: LD_INT 29
22841: PUSH
22842: LD_INT 30
22844: PUSH
22845: LD_INT 31
22847: PUSH
22848: LD_INT 37
22850: PUSH
22851: LD_INT 38
22853: PUSH
22854: LD_INT 32
22856: PUSH
22857: LD_INT 27
22859: PUSH
22860: LD_INT 33
22862: PUSH
22863: LD_INT 69
22865: PUSH
22866: LD_INT 39
22868: PUSH
22869: LD_INT 34
22871: PUSH
22872: LD_INT 40
22874: PUSH
22875: LD_INT 71
22877: PUSH
22878: LD_INT 23
22880: PUSH
22881: LD_INT 44
22883: PUSH
22884: LD_INT 48
22886: PUSH
22887: LD_INT 49
22889: PUSH
22890: LD_INT 50
22892: PUSH
22893: LD_INT 51
22895: PUSH
22896: LD_INT 52
22898: PUSH
22899: LD_INT 53
22901: PUSH
22902: LD_INT 54
22904: PUSH
22905: LD_INT 55
22907: PUSH
22908: LD_INT 56
22910: PUSH
22911: LD_INT 57
22913: PUSH
22914: LD_INT 58
22916: PUSH
22917: LD_INT 59
22919: PUSH
22920: LD_INT 63
22922: PUSH
22923: LD_INT 64
22925: PUSH
22926: LD_INT 65
22928: PUSH
22929: LD_INT 82
22931: PUSH
22932: LD_INT 83
22934: PUSH
22935: LD_INT 84
22937: PUSH
22938: LD_INT 85
22940: PUSH
22941: LD_INT 86
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: ST_TO_ADDR
22999: GO 23002
23001: POP
// if state > - 1 and state < 3 then
23002: LD_VAR 0 3
23006: PUSH
23007: LD_INT 1
23009: NEG
23010: GREATER
23011: PUSH
23012: LD_VAR 0 3
23016: PUSH
23017: LD_INT 3
23019: LESS
23020: AND
23021: IFFALSE 23078
// for i in result do
23023: LD_ADDR_VAR 0 5
23027: PUSH
23028: LD_VAR 0 4
23032: PUSH
23033: FOR_IN
23034: IFFALSE 23076
// if GetTech ( i , side ) <> state then
23036: LD_VAR 0 5
23040: PPUSH
23041: LD_VAR 0 1
23045: PPUSH
23046: CALL_OW 321
23050: PUSH
23051: LD_VAR 0 3
23055: NONEQUAL
23056: IFFALSE 23074
// result := result diff i ;
23058: LD_ADDR_VAR 0 4
23062: PUSH
23063: LD_VAR 0 4
23067: PUSH
23068: LD_VAR 0 5
23072: DIFF
23073: ST_TO_ADDR
23074: GO 23033
23076: POP
23077: POP
// end ;
23078: LD_VAR 0 4
23082: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23083: LD_INT 0
23085: PPUSH
23086: PPUSH
23087: PPUSH
// result := true ;
23088: LD_ADDR_VAR 0 3
23092: PUSH
23093: LD_INT 1
23095: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23096: LD_ADDR_VAR 0 5
23100: PUSH
23101: LD_VAR 0 2
23105: PPUSH
23106: CALL_OW 480
23110: ST_TO_ADDR
// if not tmp then
23111: LD_VAR 0 5
23115: NOT
23116: IFFALSE 23120
// exit ;
23118: GO 23169
// for i in tmp do
23120: LD_ADDR_VAR 0 4
23124: PUSH
23125: LD_VAR 0 5
23129: PUSH
23130: FOR_IN
23131: IFFALSE 23167
// if GetTech ( i , side ) <> state_researched then
23133: LD_VAR 0 4
23137: PPUSH
23138: LD_VAR 0 1
23142: PPUSH
23143: CALL_OW 321
23147: PUSH
23148: LD_INT 2
23150: NONEQUAL
23151: IFFALSE 23165
// begin result := false ;
23153: LD_ADDR_VAR 0 3
23157: PUSH
23158: LD_INT 0
23160: ST_TO_ADDR
// exit ;
23161: POP
23162: POP
23163: GO 23169
// end ;
23165: GO 23130
23167: POP
23168: POP
// end ;
23169: LD_VAR 0 3
23173: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23174: LD_INT 0
23176: PPUSH
23177: PPUSH
23178: PPUSH
23179: PPUSH
23180: PPUSH
23181: PPUSH
23182: PPUSH
23183: PPUSH
23184: PPUSH
23185: PPUSH
23186: PPUSH
23187: PPUSH
23188: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23189: LD_VAR 0 1
23193: NOT
23194: PUSH
23195: LD_VAR 0 1
23199: PPUSH
23200: CALL_OW 257
23204: PUSH
23205: LD_INT 9
23207: NONEQUAL
23208: OR
23209: IFFALSE 23213
// exit ;
23211: GO 23786
// side := GetSide ( unit ) ;
23213: LD_ADDR_VAR 0 9
23217: PUSH
23218: LD_VAR 0 1
23222: PPUSH
23223: CALL_OW 255
23227: ST_TO_ADDR
// tech_space := tech_spacanom ;
23228: LD_ADDR_VAR 0 12
23232: PUSH
23233: LD_INT 29
23235: ST_TO_ADDR
// tech_time := tech_taurad ;
23236: LD_ADDR_VAR 0 13
23240: PUSH
23241: LD_INT 28
23243: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23244: LD_ADDR_VAR 0 11
23248: PUSH
23249: LD_VAR 0 1
23253: PPUSH
23254: CALL_OW 310
23258: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23259: LD_VAR 0 11
23263: PPUSH
23264: CALL_OW 247
23268: PUSH
23269: LD_INT 2
23271: EQUAL
23272: IFFALSE 23276
// exit ;
23274: GO 23786
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23276: LD_ADDR_VAR 0 8
23280: PUSH
23281: LD_INT 81
23283: PUSH
23284: LD_VAR 0 9
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 3
23295: PUSH
23296: LD_INT 21
23298: PUSH
23299: LD_INT 3
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PPUSH
23314: CALL_OW 69
23318: ST_TO_ADDR
// if not tmp then
23319: LD_VAR 0 8
23323: NOT
23324: IFFALSE 23328
// exit ;
23326: GO 23786
// if in_unit then
23328: LD_VAR 0 11
23332: IFFALSE 23356
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23334: LD_ADDR_VAR 0 10
23338: PUSH
23339: LD_VAR 0 8
23343: PPUSH
23344: LD_VAR 0 11
23348: PPUSH
23349: CALL_OW 74
23353: ST_TO_ADDR
23354: GO 23376
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23356: LD_ADDR_VAR 0 10
23360: PUSH
23361: LD_VAR 0 8
23365: PPUSH
23366: LD_VAR 0 1
23370: PPUSH
23371: CALL_OW 74
23375: ST_TO_ADDR
// if not enemy then
23376: LD_VAR 0 10
23380: NOT
23381: IFFALSE 23385
// exit ;
23383: GO 23786
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23385: LD_VAR 0 11
23389: PUSH
23390: LD_VAR 0 11
23394: PPUSH
23395: LD_VAR 0 10
23399: PPUSH
23400: CALL_OW 296
23404: PUSH
23405: LD_INT 13
23407: GREATER
23408: AND
23409: PUSH
23410: LD_VAR 0 1
23414: PPUSH
23415: LD_VAR 0 10
23419: PPUSH
23420: CALL_OW 296
23424: PUSH
23425: LD_INT 12
23427: GREATER
23428: OR
23429: IFFALSE 23433
// exit ;
23431: GO 23786
// missile := [ 1 ] ;
23433: LD_ADDR_VAR 0 14
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: EMPTY
23442: LIST
23443: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23444: LD_VAR 0 9
23448: PPUSH
23449: LD_VAR 0 12
23453: PPUSH
23454: CALL_OW 325
23458: IFFALSE 23487
// missile := Insert ( missile , missile + 1 , 2 ) ;
23460: LD_ADDR_VAR 0 14
23464: PUSH
23465: LD_VAR 0 14
23469: PPUSH
23470: LD_VAR 0 14
23474: PUSH
23475: LD_INT 1
23477: PLUS
23478: PPUSH
23479: LD_INT 2
23481: PPUSH
23482: CALL_OW 2
23486: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23487: LD_VAR 0 9
23491: PPUSH
23492: LD_VAR 0 13
23496: PPUSH
23497: CALL_OW 325
23501: PUSH
23502: LD_VAR 0 10
23506: PPUSH
23507: CALL_OW 255
23511: PPUSH
23512: LD_VAR 0 13
23516: PPUSH
23517: CALL_OW 325
23521: NOT
23522: AND
23523: IFFALSE 23552
// missile := Insert ( missile , missile + 1 , 3 ) ;
23525: LD_ADDR_VAR 0 14
23529: PUSH
23530: LD_VAR 0 14
23534: PPUSH
23535: LD_VAR 0 14
23539: PUSH
23540: LD_INT 1
23542: PLUS
23543: PPUSH
23544: LD_INT 3
23546: PPUSH
23547: CALL_OW 2
23551: ST_TO_ADDR
// if missile < 2 then
23552: LD_VAR 0 14
23556: PUSH
23557: LD_INT 2
23559: LESS
23560: IFFALSE 23564
// exit ;
23562: GO 23786
// x := GetX ( enemy ) ;
23564: LD_ADDR_VAR 0 4
23568: PUSH
23569: LD_VAR 0 10
23573: PPUSH
23574: CALL_OW 250
23578: ST_TO_ADDR
// y := GetY ( enemy ) ;
23579: LD_ADDR_VAR 0 5
23583: PUSH
23584: LD_VAR 0 10
23588: PPUSH
23589: CALL_OW 251
23593: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23594: LD_ADDR_VAR 0 6
23598: PUSH
23599: LD_VAR 0 4
23603: PUSH
23604: LD_INT 1
23606: NEG
23607: PPUSH
23608: LD_INT 1
23610: PPUSH
23611: CALL_OW 12
23615: PLUS
23616: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23617: LD_ADDR_VAR 0 7
23621: PUSH
23622: LD_VAR 0 5
23626: PUSH
23627: LD_INT 1
23629: NEG
23630: PPUSH
23631: LD_INT 1
23633: PPUSH
23634: CALL_OW 12
23638: PLUS
23639: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23640: LD_VAR 0 6
23644: PPUSH
23645: LD_VAR 0 7
23649: PPUSH
23650: CALL_OW 488
23654: NOT
23655: IFFALSE 23677
// begin _x := x ;
23657: LD_ADDR_VAR 0 6
23661: PUSH
23662: LD_VAR 0 4
23666: ST_TO_ADDR
// _y := y ;
23667: LD_ADDR_VAR 0 7
23671: PUSH
23672: LD_VAR 0 5
23676: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23677: LD_ADDR_VAR 0 3
23681: PUSH
23682: LD_INT 1
23684: PPUSH
23685: LD_VAR 0 14
23689: PPUSH
23690: CALL_OW 12
23694: ST_TO_ADDR
// case i of 1 :
23695: LD_VAR 0 3
23699: PUSH
23700: LD_INT 1
23702: DOUBLE
23703: EQUAL
23704: IFTRUE 23708
23706: GO 23725
23708: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23709: LD_VAR 0 1
23713: PPUSH
23714: LD_VAR 0 10
23718: PPUSH
23719: CALL_OW 115
23723: GO 23786
23725: LD_INT 2
23727: DOUBLE
23728: EQUAL
23729: IFTRUE 23733
23731: GO 23755
23733: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23734: LD_VAR 0 1
23738: PPUSH
23739: LD_VAR 0 6
23743: PPUSH
23744: LD_VAR 0 7
23748: PPUSH
23749: CALL_OW 153
23753: GO 23786
23755: LD_INT 3
23757: DOUBLE
23758: EQUAL
23759: IFTRUE 23763
23761: GO 23785
23763: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23764: LD_VAR 0 1
23768: PPUSH
23769: LD_VAR 0 6
23773: PPUSH
23774: LD_VAR 0 7
23778: PPUSH
23779: CALL_OW 154
23783: GO 23786
23785: POP
// end ;
23786: LD_VAR 0 2
23790: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23791: LD_INT 0
23793: PPUSH
23794: PPUSH
23795: PPUSH
23796: PPUSH
23797: PPUSH
23798: PPUSH
// if not unit or not building then
23799: LD_VAR 0 1
23803: NOT
23804: PUSH
23805: LD_VAR 0 2
23809: NOT
23810: OR
23811: IFFALSE 23815
// exit ;
23813: GO 23973
// x := GetX ( building ) ;
23815: LD_ADDR_VAR 0 5
23819: PUSH
23820: LD_VAR 0 2
23824: PPUSH
23825: CALL_OW 250
23829: ST_TO_ADDR
// y := GetY ( building ) ;
23830: LD_ADDR_VAR 0 6
23834: PUSH
23835: LD_VAR 0 2
23839: PPUSH
23840: CALL_OW 251
23844: ST_TO_ADDR
// for i = 0 to 5 do
23845: LD_ADDR_VAR 0 4
23849: PUSH
23850: DOUBLE
23851: LD_INT 0
23853: DEC
23854: ST_TO_ADDR
23855: LD_INT 5
23857: PUSH
23858: FOR_TO
23859: IFFALSE 23971
// begin _x := ShiftX ( x , i , 3 ) ;
23861: LD_ADDR_VAR 0 7
23865: PUSH
23866: LD_VAR 0 5
23870: PPUSH
23871: LD_VAR 0 4
23875: PPUSH
23876: LD_INT 3
23878: PPUSH
23879: CALL_OW 272
23883: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23884: LD_ADDR_VAR 0 8
23888: PUSH
23889: LD_VAR 0 6
23893: PPUSH
23894: LD_VAR 0 4
23898: PPUSH
23899: LD_INT 3
23901: PPUSH
23902: CALL_OW 273
23906: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23907: LD_VAR 0 7
23911: PPUSH
23912: LD_VAR 0 8
23916: PPUSH
23917: CALL_OW 488
23921: NOT
23922: IFFALSE 23926
// continue ;
23924: GO 23858
// if HexInfo ( _x , _y ) = 0 then
23926: LD_VAR 0 7
23930: PPUSH
23931: LD_VAR 0 8
23935: PPUSH
23936: CALL_OW 428
23940: PUSH
23941: LD_INT 0
23943: EQUAL
23944: IFFALSE 23969
// begin ComMoveXY ( unit , _x , _y ) ;
23946: LD_VAR 0 1
23950: PPUSH
23951: LD_VAR 0 7
23955: PPUSH
23956: LD_VAR 0 8
23960: PPUSH
23961: CALL_OW 111
// exit ;
23965: POP
23966: POP
23967: GO 23973
// end ; end ;
23969: GO 23858
23971: POP
23972: POP
// end ;
23973: LD_VAR 0 3
23977: RET
// export function ScanBase ( side , base_area ) ; begin
23978: LD_INT 0
23980: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23981: LD_ADDR_VAR 0 3
23985: PUSH
23986: LD_VAR 0 2
23990: PPUSH
23991: LD_INT 81
23993: PUSH
23994: LD_VAR 0 1
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PPUSH
24003: CALL_OW 70
24007: ST_TO_ADDR
// end ;
24008: LD_VAR 0 3
24012: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24013: LD_INT 0
24015: PPUSH
24016: PPUSH
24017: PPUSH
24018: PPUSH
// result := false ;
24019: LD_ADDR_VAR 0 2
24023: PUSH
24024: LD_INT 0
24026: ST_TO_ADDR
// side := GetSide ( unit ) ;
24027: LD_ADDR_VAR 0 3
24031: PUSH
24032: LD_VAR 0 1
24036: PPUSH
24037: CALL_OW 255
24041: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24042: LD_ADDR_VAR 0 4
24046: PUSH
24047: LD_VAR 0 1
24051: PPUSH
24052: CALL_OW 248
24056: ST_TO_ADDR
// case nat of 1 :
24057: LD_VAR 0 4
24061: PUSH
24062: LD_INT 1
24064: DOUBLE
24065: EQUAL
24066: IFTRUE 24070
24068: GO 24081
24070: POP
// tech := tech_lassight ; 2 :
24071: LD_ADDR_VAR 0 5
24075: PUSH
24076: LD_INT 12
24078: ST_TO_ADDR
24079: GO 24120
24081: LD_INT 2
24083: DOUBLE
24084: EQUAL
24085: IFTRUE 24089
24087: GO 24100
24089: POP
// tech := tech_mortar ; 3 :
24090: LD_ADDR_VAR 0 5
24094: PUSH
24095: LD_INT 41
24097: ST_TO_ADDR
24098: GO 24120
24100: LD_INT 3
24102: DOUBLE
24103: EQUAL
24104: IFTRUE 24108
24106: GO 24119
24108: POP
// tech := tech_bazooka ; end ;
24109: LD_ADDR_VAR 0 5
24113: PUSH
24114: LD_INT 44
24116: ST_TO_ADDR
24117: GO 24120
24119: POP
// if Researched ( side , tech ) then
24120: LD_VAR 0 3
24124: PPUSH
24125: LD_VAR 0 5
24129: PPUSH
24130: CALL_OW 325
24134: IFFALSE 24161
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24136: LD_ADDR_VAR 0 2
24140: PUSH
24141: LD_INT 5
24143: PUSH
24144: LD_INT 8
24146: PUSH
24147: LD_INT 9
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: LIST
24154: PUSH
24155: LD_VAR 0 4
24159: ARRAY
24160: ST_TO_ADDR
// end ;
24161: LD_VAR 0 2
24165: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24166: LD_INT 0
24168: PPUSH
24169: PPUSH
24170: PPUSH
// if not mines then
24171: LD_VAR 0 2
24175: NOT
24176: IFFALSE 24180
// exit ;
24178: GO 24324
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24180: LD_ADDR_VAR 0 5
24184: PUSH
24185: LD_INT 81
24187: PUSH
24188: LD_VAR 0 1
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 3
24199: PUSH
24200: LD_INT 21
24202: PUSH
24203: LD_INT 3
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PPUSH
24218: CALL_OW 69
24222: ST_TO_ADDR
// for i in mines do
24223: LD_ADDR_VAR 0 4
24227: PUSH
24228: LD_VAR 0 2
24232: PUSH
24233: FOR_IN
24234: IFFALSE 24322
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24236: LD_VAR 0 4
24240: PUSH
24241: LD_INT 1
24243: ARRAY
24244: PPUSH
24245: LD_VAR 0 4
24249: PUSH
24250: LD_INT 2
24252: ARRAY
24253: PPUSH
24254: CALL_OW 458
24258: NOT
24259: IFFALSE 24263
// continue ;
24261: GO 24233
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24263: LD_VAR 0 4
24267: PUSH
24268: LD_INT 1
24270: ARRAY
24271: PPUSH
24272: LD_VAR 0 4
24276: PUSH
24277: LD_INT 2
24279: ARRAY
24280: PPUSH
24281: CALL_OW 428
24285: PUSH
24286: LD_VAR 0 5
24290: IN
24291: IFFALSE 24320
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24293: LD_VAR 0 4
24297: PUSH
24298: LD_INT 1
24300: ARRAY
24301: PPUSH
24302: LD_VAR 0 4
24306: PUSH
24307: LD_INT 2
24309: ARRAY
24310: PPUSH
24311: LD_VAR 0 1
24315: PPUSH
24316: CALL_OW 456
// end ;
24320: GO 24233
24322: POP
24323: POP
// end ;
24324: LD_VAR 0 3
24328: RET
// export function Count ( array ) ; var i ; begin
24329: LD_INT 0
24331: PPUSH
24332: PPUSH
// result := 0 ;
24333: LD_ADDR_VAR 0 2
24337: PUSH
24338: LD_INT 0
24340: ST_TO_ADDR
// for i in array do
24341: LD_ADDR_VAR 0 3
24345: PUSH
24346: LD_VAR 0 1
24350: PUSH
24351: FOR_IN
24352: IFFALSE 24376
// if i then
24354: LD_VAR 0 3
24358: IFFALSE 24374
// result := result + 1 ;
24360: LD_ADDR_VAR 0 2
24364: PUSH
24365: LD_VAR 0 2
24369: PUSH
24370: LD_INT 1
24372: PLUS
24373: ST_TO_ADDR
24374: GO 24351
24376: POP
24377: POP
// end ;
24378: LD_VAR 0 2
24382: RET
// export function IsEmpty ( building ) ; begin
24383: LD_INT 0
24385: PPUSH
// if not building then
24386: LD_VAR 0 1
24390: NOT
24391: IFFALSE 24395
// exit ;
24393: GO 24438
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24395: LD_ADDR_VAR 0 2
24399: PUSH
24400: LD_VAR 0 1
24404: PUSH
24405: LD_INT 22
24407: PUSH
24408: LD_VAR 0 1
24412: PPUSH
24413: CALL_OW 255
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 58
24424: PUSH
24425: EMPTY
24426: LIST
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PPUSH
24432: CALL_OW 69
24436: IN
24437: ST_TO_ADDR
// end ;
24438: LD_VAR 0 2
24442: RET
// export function IsNotFull ( building ) ; begin
24443: LD_INT 0
24445: PPUSH
// if not building then
24446: LD_VAR 0 1
24450: NOT
24451: IFFALSE 24455
// exit ;
24453: GO 24474
// result := UnitsInside ( building ) < 6 ;
24455: LD_ADDR_VAR 0 2
24459: PUSH
24460: LD_VAR 0 1
24464: PPUSH
24465: CALL_OW 313
24469: PUSH
24470: LD_INT 6
24472: LESS
24473: ST_TO_ADDR
// end ;
24474: LD_VAR 0 2
24478: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24479: LD_INT 0
24481: PPUSH
24482: PPUSH
24483: PPUSH
24484: PPUSH
// tmp := [ ] ;
24485: LD_ADDR_VAR 0 3
24489: PUSH
24490: EMPTY
24491: ST_TO_ADDR
// list := [ ] ;
24492: LD_ADDR_VAR 0 5
24496: PUSH
24497: EMPTY
24498: ST_TO_ADDR
// for i = 16 to 25 do
24499: LD_ADDR_VAR 0 4
24503: PUSH
24504: DOUBLE
24505: LD_INT 16
24507: DEC
24508: ST_TO_ADDR
24509: LD_INT 25
24511: PUSH
24512: FOR_TO
24513: IFFALSE 24586
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24515: LD_ADDR_VAR 0 3
24519: PUSH
24520: LD_VAR 0 3
24524: PUSH
24525: LD_INT 22
24527: PUSH
24528: LD_VAR 0 1
24532: PPUSH
24533: CALL_OW 255
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 91
24544: PUSH
24545: LD_VAR 0 1
24549: PUSH
24550: LD_INT 6
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 30
24560: PUSH
24561: LD_VAR 0 4
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: LIST
24574: PUSH
24575: EMPTY
24576: LIST
24577: PPUSH
24578: CALL_OW 69
24582: ADD
24583: ST_TO_ADDR
24584: GO 24512
24586: POP
24587: POP
// for i = 1 to tmp do
24588: LD_ADDR_VAR 0 4
24592: PUSH
24593: DOUBLE
24594: LD_INT 1
24596: DEC
24597: ST_TO_ADDR
24598: LD_VAR 0 3
24602: PUSH
24603: FOR_TO
24604: IFFALSE 24692
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24606: LD_ADDR_VAR 0 5
24610: PUSH
24611: LD_VAR 0 5
24615: PUSH
24616: LD_VAR 0 3
24620: PUSH
24621: LD_VAR 0 4
24625: ARRAY
24626: PPUSH
24627: CALL_OW 266
24631: PUSH
24632: LD_VAR 0 3
24636: PUSH
24637: LD_VAR 0 4
24641: ARRAY
24642: PPUSH
24643: CALL_OW 250
24647: PUSH
24648: LD_VAR 0 3
24652: PUSH
24653: LD_VAR 0 4
24657: ARRAY
24658: PPUSH
24659: CALL_OW 251
24663: PUSH
24664: LD_VAR 0 3
24668: PUSH
24669: LD_VAR 0 4
24673: ARRAY
24674: PPUSH
24675: CALL_OW 254
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: PUSH
24686: EMPTY
24687: LIST
24688: ADD
24689: ST_TO_ADDR
24690: GO 24603
24692: POP
24693: POP
// result := list ;
24694: LD_ADDR_VAR 0 2
24698: PUSH
24699: LD_VAR 0 5
24703: ST_TO_ADDR
// end ;
24704: LD_VAR 0 2
24708: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24709: LD_INT 0
24711: PPUSH
24712: PPUSH
24713: PPUSH
24714: PPUSH
24715: PPUSH
24716: PPUSH
24717: PPUSH
// if not factory then
24718: LD_VAR 0 1
24722: NOT
24723: IFFALSE 24727
// exit ;
24725: GO 25320
// if control = control_apeman then
24727: LD_VAR 0 4
24731: PUSH
24732: LD_INT 5
24734: EQUAL
24735: IFFALSE 24844
// begin tmp := UnitsInside ( factory ) ;
24737: LD_ADDR_VAR 0 8
24741: PUSH
24742: LD_VAR 0 1
24746: PPUSH
24747: CALL_OW 313
24751: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24752: LD_VAR 0 8
24756: PPUSH
24757: LD_INT 25
24759: PUSH
24760: LD_INT 12
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PPUSH
24767: CALL_OW 72
24771: NOT
24772: IFFALSE 24782
// control := control_manual ;
24774: LD_ADDR_VAR 0 4
24778: PUSH
24779: LD_INT 1
24781: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24782: LD_ADDR_VAR 0 8
24786: PUSH
24787: LD_VAR 0 1
24791: PPUSH
24792: CALL 24479 0 1
24796: ST_TO_ADDR
// if tmp then
24797: LD_VAR 0 8
24801: IFFALSE 24844
// begin for i in tmp do
24803: LD_ADDR_VAR 0 7
24807: PUSH
24808: LD_VAR 0 8
24812: PUSH
24813: FOR_IN
24814: IFFALSE 24842
// if i [ 1 ] = b_ext_radio then
24816: LD_VAR 0 7
24820: PUSH
24821: LD_INT 1
24823: ARRAY
24824: PUSH
24825: LD_INT 22
24827: EQUAL
24828: IFFALSE 24840
// begin control := control_remote ;
24830: LD_ADDR_VAR 0 4
24834: PUSH
24835: LD_INT 2
24837: ST_TO_ADDR
// break ;
24838: GO 24842
// end ;
24840: GO 24813
24842: POP
24843: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24844: LD_VAR 0 1
24848: PPUSH
24849: LD_VAR 0 2
24853: PPUSH
24854: LD_VAR 0 3
24858: PPUSH
24859: LD_VAR 0 4
24863: PPUSH
24864: LD_VAR 0 5
24868: PPUSH
24869: CALL_OW 448
24873: IFFALSE 24908
// begin result := [ chassis , engine , control , weapon ] ;
24875: LD_ADDR_VAR 0 6
24879: PUSH
24880: LD_VAR 0 2
24884: PUSH
24885: LD_VAR 0 3
24889: PUSH
24890: LD_VAR 0 4
24894: PUSH
24895: LD_VAR 0 5
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: ST_TO_ADDR
// exit ;
24906: GO 25320
// end ; _chassis := AvailableChassisList ( factory ) ;
24908: LD_ADDR_VAR 0 9
24912: PUSH
24913: LD_VAR 0 1
24917: PPUSH
24918: CALL_OW 475
24922: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24923: LD_ADDR_VAR 0 11
24927: PUSH
24928: LD_VAR 0 1
24932: PPUSH
24933: CALL_OW 476
24937: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24938: LD_ADDR_VAR 0 12
24942: PUSH
24943: LD_VAR 0 1
24947: PPUSH
24948: CALL_OW 477
24952: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24953: LD_ADDR_VAR 0 10
24957: PUSH
24958: LD_VAR 0 1
24962: PPUSH
24963: CALL_OW 478
24967: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24968: LD_VAR 0 9
24972: NOT
24973: PUSH
24974: LD_VAR 0 11
24978: NOT
24979: OR
24980: PUSH
24981: LD_VAR 0 12
24985: NOT
24986: OR
24987: PUSH
24988: LD_VAR 0 10
24992: NOT
24993: OR
24994: IFFALSE 25029
// begin result := [ chassis , engine , control , weapon ] ;
24996: LD_ADDR_VAR 0 6
25000: PUSH
25001: LD_VAR 0 2
25005: PUSH
25006: LD_VAR 0 3
25010: PUSH
25011: LD_VAR 0 4
25015: PUSH
25016: LD_VAR 0 5
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: ST_TO_ADDR
// exit ;
25027: GO 25320
// end ; if not chassis in _chassis then
25029: LD_VAR 0 2
25033: PUSH
25034: LD_VAR 0 9
25038: IN
25039: NOT
25040: IFFALSE 25066
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25042: LD_ADDR_VAR 0 2
25046: PUSH
25047: LD_VAR 0 9
25051: PUSH
25052: LD_INT 1
25054: PPUSH
25055: LD_VAR 0 9
25059: PPUSH
25060: CALL_OW 12
25064: ARRAY
25065: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25066: LD_VAR 0 2
25070: PPUSH
25071: LD_VAR 0 3
25075: PPUSH
25076: CALL 25325 0 2
25080: NOT
25081: IFFALSE 25140
// repeat engine := _engine [ 1 ] ;
25083: LD_ADDR_VAR 0 3
25087: PUSH
25088: LD_VAR 0 11
25092: PUSH
25093: LD_INT 1
25095: ARRAY
25096: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25097: LD_ADDR_VAR 0 11
25101: PUSH
25102: LD_VAR 0 11
25106: PPUSH
25107: LD_INT 1
25109: PPUSH
25110: CALL_OW 3
25114: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25115: LD_VAR 0 2
25119: PPUSH
25120: LD_VAR 0 3
25124: PPUSH
25125: CALL 25325 0 2
25129: PUSH
25130: LD_VAR 0 11
25134: PUSH
25135: EMPTY
25136: EQUAL
25137: OR
25138: IFFALSE 25083
// if not control in _control then
25140: LD_VAR 0 4
25144: PUSH
25145: LD_VAR 0 12
25149: IN
25150: NOT
25151: IFFALSE 25177
// control := _control [ rand ( 1 , _control ) ] ;
25153: LD_ADDR_VAR 0 4
25157: PUSH
25158: LD_VAR 0 12
25162: PUSH
25163: LD_INT 1
25165: PPUSH
25166: LD_VAR 0 12
25170: PPUSH
25171: CALL_OW 12
25175: ARRAY
25176: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25177: LD_VAR 0 2
25181: PPUSH
25182: LD_VAR 0 5
25186: PPUSH
25187: CALL 25545 0 2
25191: NOT
25192: IFFALSE 25251
// repeat weapon := _weapon [ 1 ] ;
25194: LD_ADDR_VAR 0 5
25198: PUSH
25199: LD_VAR 0 10
25203: PUSH
25204: LD_INT 1
25206: ARRAY
25207: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25208: LD_ADDR_VAR 0 10
25212: PUSH
25213: LD_VAR 0 10
25217: PPUSH
25218: LD_INT 1
25220: PPUSH
25221: CALL_OW 3
25225: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25226: LD_VAR 0 2
25230: PPUSH
25231: LD_VAR 0 5
25235: PPUSH
25236: CALL 25545 0 2
25240: PUSH
25241: LD_VAR 0 10
25245: PUSH
25246: EMPTY
25247: EQUAL
25248: OR
25249: IFFALSE 25194
// result := [ ] ;
25251: LD_ADDR_VAR 0 6
25255: PUSH
25256: EMPTY
25257: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25258: LD_VAR 0 1
25262: PPUSH
25263: LD_VAR 0 2
25267: PPUSH
25268: LD_VAR 0 3
25272: PPUSH
25273: LD_VAR 0 4
25277: PPUSH
25278: LD_VAR 0 5
25282: PPUSH
25283: CALL_OW 448
25287: IFFALSE 25320
// result := [ chassis , engine , control , weapon ] ;
25289: LD_ADDR_VAR 0 6
25293: PUSH
25294: LD_VAR 0 2
25298: PUSH
25299: LD_VAR 0 3
25303: PUSH
25304: LD_VAR 0 4
25308: PUSH
25309: LD_VAR 0 5
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: ST_TO_ADDR
// end ;
25320: LD_VAR 0 6
25324: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25325: LD_INT 0
25327: PPUSH
// if not chassis or not engine then
25328: LD_VAR 0 1
25332: NOT
25333: PUSH
25334: LD_VAR 0 2
25338: NOT
25339: OR
25340: IFFALSE 25344
// exit ;
25342: GO 25540
// case engine of engine_solar :
25344: LD_VAR 0 2
25348: PUSH
25349: LD_INT 2
25351: DOUBLE
25352: EQUAL
25353: IFTRUE 25357
25355: GO 25395
25357: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25358: LD_ADDR_VAR 0 3
25362: PUSH
25363: LD_INT 11
25365: PUSH
25366: LD_INT 12
25368: PUSH
25369: LD_INT 13
25371: PUSH
25372: LD_INT 14
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: LD_INT 2
25380: PUSH
25381: LD_INT 3
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: ST_TO_ADDR
25393: GO 25524
25395: LD_INT 1
25397: DOUBLE
25398: EQUAL
25399: IFTRUE 25403
25401: GO 25465
25403: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25404: LD_ADDR_VAR 0 3
25408: PUSH
25409: LD_INT 11
25411: PUSH
25412: LD_INT 12
25414: PUSH
25415: LD_INT 13
25417: PUSH
25418: LD_INT 14
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: LD_INT 2
25426: PUSH
25427: LD_INT 3
25429: PUSH
25430: LD_INT 4
25432: PUSH
25433: LD_INT 5
25435: PUSH
25436: LD_INT 21
25438: PUSH
25439: LD_INT 23
25441: PUSH
25442: LD_INT 22
25444: PUSH
25445: LD_INT 24
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: ST_TO_ADDR
25463: GO 25524
25465: LD_INT 3
25467: DOUBLE
25468: EQUAL
25469: IFTRUE 25473
25471: GO 25523
25473: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25474: LD_ADDR_VAR 0 3
25478: PUSH
25479: LD_INT 13
25481: PUSH
25482: LD_INT 14
25484: PUSH
25485: LD_INT 2
25487: PUSH
25488: LD_INT 3
25490: PUSH
25491: LD_INT 4
25493: PUSH
25494: LD_INT 5
25496: PUSH
25497: LD_INT 21
25499: PUSH
25500: LD_INT 22
25502: PUSH
25503: LD_INT 23
25505: PUSH
25506: LD_INT 24
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: ST_TO_ADDR
25521: GO 25524
25523: POP
// result := ( chassis in result ) ;
25524: LD_ADDR_VAR 0 3
25528: PUSH
25529: LD_VAR 0 1
25533: PUSH
25534: LD_VAR 0 3
25538: IN
25539: ST_TO_ADDR
// end ;
25540: LD_VAR 0 3
25544: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25545: LD_INT 0
25547: PPUSH
// if not chassis or not weapon then
25548: LD_VAR 0 1
25552: NOT
25553: PUSH
25554: LD_VAR 0 2
25558: NOT
25559: OR
25560: IFFALSE 25564
// exit ;
25562: GO 26590
// case weapon of us_machine_gun :
25564: LD_VAR 0 2
25568: PUSH
25569: LD_INT 2
25571: DOUBLE
25572: EQUAL
25573: IFTRUE 25577
25575: GO 25607
25577: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25578: LD_ADDR_VAR 0 3
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: LD_INT 2
25588: PUSH
25589: LD_INT 3
25591: PUSH
25592: LD_INT 4
25594: PUSH
25595: LD_INT 5
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: ST_TO_ADDR
25605: GO 26574
25607: LD_INT 3
25609: DOUBLE
25610: EQUAL
25611: IFTRUE 25615
25613: GO 25645
25615: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25616: LD_ADDR_VAR 0 3
25620: PUSH
25621: LD_INT 1
25623: PUSH
25624: LD_INT 2
25626: PUSH
25627: LD_INT 3
25629: PUSH
25630: LD_INT 4
25632: PUSH
25633: LD_INT 5
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: ST_TO_ADDR
25643: GO 26574
25645: LD_INT 11
25647: DOUBLE
25648: EQUAL
25649: IFTRUE 25653
25651: GO 25683
25653: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25654: LD_ADDR_VAR 0 3
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: LD_INT 3
25667: PUSH
25668: LD_INT 4
25670: PUSH
25671: LD_INT 5
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: ST_TO_ADDR
25681: GO 26574
25683: LD_INT 4
25685: DOUBLE
25686: EQUAL
25687: IFTRUE 25691
25689: GO 25717
25691: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25692: LD_ADDR_VAR 0 3
25696: PUSH
25697: LD_INT 2
25699: PUSH
25700: LD_INT 3
25702: PUSH
25703: LD_INT 4
25705: PUSH
25706: LD_INT 5
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: ST_TO_ADDR
25715: GO 26574
25717: LD_INT 5
25719: DOUBLE
25720: EQUAL
25721: IFTRUE 25725
25723: GO 25751
25725: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25726: LD_ADDR_VAR 0 3
25730: PUSH
25731: LD_INT 2
25733: PUSH
25734: LD_INT 3
25736: PUSH
25737: LD_INT 4
25739: PUSH
25740: LD_INT 5
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: ST_TO_ADDR
25749: GO 26574
25751: LD_INT 9
25753: DOUBLE
25754: EQUAL
25755: IFTRUE 25759
25757: GO 25785
25759: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25760: LD_ADDR_VAR 0 3
25764: PUSH
25765: LD_INT 2
25767: PUSH
25768: LD_INT 3
25770: PUSH
25771: LD_INT 4
25773: PUSH
25774: LD_INT 5
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: ST_TO_ADDR
25783: GO 26574
25785: LD_INT 7
25787: DOUBLE
25788: EQUAL
25789: IFTRUE 25793
25791: GO 25819
25793: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25794: LD_ADDR_VAR 0 3
25798: PUSH
25799: LD_INT 2
25801: PUSH
25802: LD_INT 3
25804: PUSH
25805: LD_INT 4
25807: PUSH
25808: LD_INT 5
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: ST_TO_ADDR
25817: GO 26574
25819: LD_INT 12
25821: DOUBLE
25822: EQUAL
25823: IFTRUE 25827
25825: GO 25853
25827: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25828: LD_ADDR_VAR 0 3
25832: PUSH
25833: LD_INT 2
25835: PUSH
25836: LD_INT 3
25838: PUSH
25839: LD_INT 4
25841: PUSH
25842: LD_INT 5
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: ST_TO_ADDR
25851: GO 26574
25853: LD_INT 13
25855: DOUBLE
25856: EQUAL
25857: IFTRUE 25861
25859: GO 25887
25861: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25862: LD_ADDR_VAR 0 3
25866: PUSH
25867: LD_INT 2
25869: PUSH
25870: LD_INT 3
25872: PUSH
25873: LD_INT 4
25875: PUSH
25876: LD_INT 5
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: ST_TO_ADDR
25885: GO 26574
25887: LD_INT 14
25889: DOUBLE
25890: EQUAL
25891: IFTRUE 25895
25893: GO 25913
25895: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25896: LD_ADDR_VAR 0 3
25900: PUSH
25901: LD_INT 4
25903: PUSH
25904: LD_INT 5
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: ST_TO_ADDR
25911: GO 26574
25913: LD_INT 6
25915: DOUBLE
25916: EQUAL
25917: IFTRUE 25921
25919: GO 25939
25921: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25922: LD_ADDR_VAR 0 3
25926: PUSH
25927: LD_INT 4
25929: PUSH
25930: LD_INT 5
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: ST_TO_ADDR
25937: GO 26574
25939: LD_INT 10
25941: DOUBLE
25942: EQUAL
25943: IFTRUE 25947
25945: GO 25965
25947: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25948: LD_ADDR_VAR 0 3
25952: PUSH
25953: LD_INT 4
25955: PUSH
25956: LD_INT 5
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: ST_TO_ADDR
25963: GO 26574
25965: LD_INT 22
25967: DOUBLE
25968: EQUAL
25969: IFTRUE 25973
25971: GO 25999
25973: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25974: LD_ADDR_VAR 0 3
25978: PUSH
25979: LD_INT 11
25981: PUSH
25982: LD_INT 12
25984: PUSH
25985: LD_INT 13
25987: PUSH
25988: LD_INT 14
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: ST_TO_ADDR
25997: GO 26574
25999: LD_INT 23
26001: DOUBLE
26002: EQUAL
26003: IFTRUE 26007
26005: GO 26033
26007: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26008: LD_ADDR_VAR 0 3
26012: PUSH
26013: LD_INT 11
26015: PUSH
26016: LD_INT 12
26018: PUSH
26019: LD_INT 13
26021: PUSH
26022: LD_INT 14
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: ST_TO_ADDR
26031: GO 26574
26033: LD_INT 24
26035: DOUBLE
26036: EQUAL
26037: IFTRUE 26041
26039: GO 26067
26041: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26042: LD_ADDR_VAR 0 3
26046: PUSH
26047: LD_INT 11
26049: PUSH
26050: LD_INT 12
26052: PUSH
26053: LD_INT 13
26055: PUSH
26056: LD_INT 14
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: ST_TO_ADDR
26065: GO 26574
26067: LD_INT 30
26069: DOUBLE
26070: EQUAL
26071: IFTRUE 26075
26073: GO 26101
26075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26076: LD_ADDR_VAR 0 3
26080: PUSH
26081: LD_INT 11
26083: PUSH
26084: LD_INT 12
26086: PUSH
26087: LD_INT 13
26089: PUSH
26090: LD_INT 14
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: ST_TO_ADDR
26099: GO 26574
26101: LD_INT 25
26103: DOUBLE
26104: EQUAL
26105: IFTRUE 26109
26107: GO 26127
26109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26110: LD_ADDR_VAR 0 3
26114: PUSH
26115: LD_INT 13
26117: PUSH
26118: LD_INT 14
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: ST_TO_ADDR
26125: GO 26574
26127: LD_INT 27
26129: DOUBLE
26130: EQUAL
26131: IFTRUE 26135
26133: GO 26153
26135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26136: LD_ADDR_VAR 0 3
26140: PUSH
26141: LD_INT 13
26143: PUSH
26144: LD_INT 14
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: ST_TO_ADDR
26151: GO 26574
26153: LD_INT 28
26155: DOUBLE
26156: EQUAL
26157: IFTRUE 26161
26159: GO 26179
26161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26162: LD_ADDR_VAR 0 3
26166: PUSH
26167: LD_INT 13
26169: PUSH
26170: LD_INT 14
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: ST_TO_ADDR
26177: GO 26574
26179: LD_INT 29
26181: DOUBLE
26182: EQUAL
26183: IFTRUE 26187
26185: GO 26205
26187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26188: LD_ADDR_VAR 0 3
26192: PUSH
26193: LD_INT 13
26195: PUSH
26196: LD_INT 14
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: ST_TO_ADDR
26203: GO 26574
26205: LD_INT 31
26207: DOUBLE
26208: EQUAL
26209: IFTRUE 26213
26211: GO 26231
26213: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26214: LD_ADDR_VAR 0 3
26218: PUSH
26219: LD_INT 13
26221: PUSH
26222: LD_INT 14
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: ST_TO_ADDR
26229: GO 26574
26231: LD_INT 26
26233: DOUBLE
26234: EQUAL
26235: IFTRUE 26239
26237: GO 26257
26239: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26240: LD_ADDR_VAR 0 3
26244: PUSH
26245: LD_INT 13
26247: PUSH
26248: LD_INT 14
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: ST_TO_ADDR
26255: GO 26574
26257: LD_INT 42
26259: DOUBLE
26260: EQUAL
26261: IFTRUE 26265
26263: GO 26291
26265: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26266: LD_ADDR_VAR 0 3
26270: PUSH
26271: LD_INT 21
26273: PUSH
26274: LD_INT 22
26276: PUSH
26277: LD_INT 23
26279: PUSH
26280: LD_INT 24
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: ST_TO_ADDR
26289: GO 26574
26291: LD_INT 43
26293: DOUBLE
26294: EQUAL
26295: IFTRUE 26299
26297: GO 26325
26299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26300: LD_ADDR_VAR 0 3
26304: PUSH
26305: LD_INT 21
26307: PUSH
26308: LD_INT 22
26310: PUSH
26311: LD_INT 23
26313: PUSH
26314: LD_INT 24
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: ST_TO_ADDR
26323: GO 26574
26325: LD_INT 44
26327: DOUBLE
26328: EQUAL
26329: IFTRUE 26333
26331: GO 26359
26333: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26334: LD_ADDR_VAR 0 3
26338: PUSH
26339: LD_INT 21
26341: PUSH
26342: LD_INT 22
26344: PUSH
26345: LD_INT 23
26347: PUSH
26348: LD_INT 24
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: ST_TO_ADDR
26357: GO 26574
26359: LD_INT 45
26361: DOUBLE
26362: EQUAL
26363: IFTRUE 26367
26365: GO 26393
26367: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26368: LD_ADDR_VAR 0 3
26372: PUSH
26373: LD_INT 21
26375: PUSH
26376: LD_INT 22
26378: PUSH
26379: LD_INT 23
26381: PUSH
26382: LD_INT 24
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: ST_TO_ADDR
26391: GO 26574
26393: LD_INT 49
26395: DOUBLE
26396: EQUAL
26397: IFTRUE 26401
26399: GO 26427
26401: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26402: LD_ADDR_VAR 0 3
26406: PUSH
26407: LD_INT 21
26409: PUSH
26410: LD_INT 22
26412: PUSH
26413: LD_INT 23
26415: PUSH
26416: LD_INT 24
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: ST_TO_ADDR
26425: GO 26574
26427: LD_INT 51
26429: DOUBLE
26430: EQUAL
26431: IFTRUE 26435
26433: GO 26461
26435: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26436: LD_ADDR_VAR 0 3
26440: PUSH
26441: LD_INT 21
26443: PUSH
26444: LD_INT 22
26446: PUSH
26447: LD_INT 23
26449: PUSH
26450: LD_INT 24
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: ST_TO_ADDR
26459: GO 26574
26461: LD_INT 52
26463: DOUBLE
26464: EQUAL
26465: IFTRUE 26469
26467: GO 26495
26469: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26470: LD_ADDR_VAR 0 3
26474: PUSH
26475: LD_INT 21
26477: PUSH
26478: LD_INT 22
26480: PUSH
26481: LD_INT 23
26483: PUSH
26484: LD_INT 24
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: ST_TO_ADDR
26493: GO 26574
26495: LD_INT 53
26497: DOUBLE
26498: EQUAL
26499: IFTRUE 26503
26501: GO 26521
26503: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26504: LD_ADDR_VAR 0 3
26508: PUSH
26509: LD_INT 23
26511: PUSH
26512: LD_INT 24
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: ST_TO_ADDR
26519: GO 26574
26521: LD_INT 46
26523: DOUBLE
26524: EQUAL
26525: IFTRUE 26529
26527: GO 26547
26529: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26530: LD_ADDR_VAR 0 3
26534: PUSH
26535: LD_INT 23
26537: PUSH
26538: LD_INT 24
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: ST_TO_ADDR
26545: GO 26574
26547: LD_INT 47
26549: DOUBLE
26550: EQUAL
26551: IFTRUE 26555
26553: GO 26573
26555: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26556: LD_ADDR_VAR 0 3
26560: PUSH
26561: LD_INT 23
26563: PUSH
26564: LD_INT 24
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: ST_TO_ADDR
26571: GO 26574
26573: POP
// result := ( chassis in result ) ;
26574: LD_ADDR_VAR 0 3
26578: PUSH
26579: LD_VAR 0 1
26583: PUSH
26584: LD_VAR 0 3
26588: IN
26589: ST_TO_ADDR
// end ;
26590: LD_VAR 0 3
26594: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26595: LD_INT 0
26597: PPUSH
26598: PPUSH
26599: PPUSH
26600: PPUSH
26601: PPUSH
26602: PPUSH
26603: PPUSH
// result := array ;
26604: LD_ADDR_VAR 0 5
26608: PUSH
26609: LD_VAR 0 1
26613: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26614: LD_VAR 0 1
26618: NOT
26619: PUSH
26620: LD_VAR 0 2
26624: NOT
26625: OR
26626: PUSH
26627: LD_VAR 0 3
26631: NOT
26632: OR
26633: PUSH
26634: LD_VAR 0 2
26638: PUSH
26639: LD_VAR 0 1
26643: GREATER
26644: OR
26645: PUSH
26646: LD_VAR 0 3
26650: PUSH
26651: LD_VAR 0 1
26655: GREATER
26656: OR
26657: IFFALSE 26661
// exit ;
26659: GO 26957
// if direction then
26661: LD_VAR 0 4
26665: IFFALSE 26729
// begin d := 1 ;
26667: LD_ADDR_VAR 0 9
26671: PUSH
26672: LD_INT 1
26674: ST_TO_ADDR
// if i_from > i_to then
26675: LD_VAR 0 2
26679: PUSH
26680: LD_VAR 0 3
26684: GREATER
26685: IFFALSE 26711
// length := ( array - i_from ) + i_to else
26687: LD_ADDR_VAR 0 11
26691: PUSH
26692: LD_VAR 0 1
26696: PUSH
26697: LD_VAR 0 2
26701: MINUS
26702: PUSH
26703: LD_VAR 0 3
26707: PLUS
26708: ST_TO_ADDR
26709: GO 26727
// length := i_to - i_from ;
26711: LD_ADDR_VAR 0 11
26715: PUSH
26716: LD_VAR 0 3
26720: PUSH
26721: LD_VAR 0 2
26725: MINUS
26726: ST_TO_ADDR
// end else
26727: GO 26790
// begin d := - 1 ;
26729: LD_ADDR_VAR 0 9
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: ST_TO_ADDR
// if i_from > i_to then
26738: LD_VAR 0 2
26742: PUSH
26743: LD_VAR 0 3
26747: GREATER
26748: IFFALSE 26768
// length := i_from - i_to else
26750: LD_ADDR_VAR 0 11
26754: PUSH
26755: LD_VAR 0 2
26759: PUSH
26760: LD_VAR 0 3
26764: MINUS
26765: ST_TO_ADDR
26766: GO 26790
// length := ( array - i_to ) + i_from ;
26768: LD_ADDR_VAR 0 11
26772: PUSH
26773: LD_VAR 0 1
26777: PUSH
26778: LD_VAR 0 3
26782: MINUS
26783: PUSH
26784: LD_VAR 0 2
26788: PLUS
26789: ST_TO_ADDR
// end ; if not length then
26790: LD_VAR 0 11
26794: NOT
26795: IFFALSE 26799
// exit ;
26797: GO 26957
// tmp := array ;
26799: LD_ADDR_VAR 0 10
26803: PUSH
26804: LD_VAR 0 1
26808: ST_TO_ADDR
// for i = 1 to length do
26809: LD_ADDR_VAR 0 6
26813: PUSH
26814: DOUBLE
26815: LD_INT 1
26817: DEC
26818: ST_TO_ADDR
26819: LD_VAR 0 11
26823: PUSH
26824: FOR_TO
26825: IFFALSE 26945
// begin for j = 1 to array do
26827: LD_ADDR_VAR 0 7
26831: PUSH
26832: DOUBLE
26833: LD_INT 1
26835: DEC
26836: ST_TO_ADDR
26837: LD_VAR 0 1
26841: PUSH
26842: FOR_TO
26843: IFFALSE 26931
// begin k := j + d ;
26845: LD_ADDR_VAR 0 8
26849: PUSH
26850: LD_VAR 0 7
26854: PUSH
26855: LD_VAR 0 9
26859: PLUS
26860: ST_TO_ADDR
// if k > array then
26861: LD_VAR 0 8
26865: PUSH
26866: LD_VAR 0 1
26870: GREATER
26871: IFFALSE 26881
// k := 1 ;
26873: LD_ADDR_VAR 0 8
26877: PUSH
26878: LD_INT 1
26880: ST_TO_ADDR
// if not k then
26881: LD_VAR 0 8
26885: NOT
26886: IFFALSE 26898
// k := array ;
26888: LD_ADDR_VAR 0 8
26892: PUSH
26893: LD_VAR 0 1
26897: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26898: LD_ADDR_VAR 0 10
26902: PUSH
26903: LD_VAR 0 10
26907: PPUSH
26908: LD_VAR 0 8
26912: PPUSH
26913: LD_VAR 0 1
26917: PUSH
26918: LD_VAR 0 7
26922: ARRAY
26923: PPUSH
26924: CALL_OW 1
26928: ST_TO_ADDR
// end ;
26929: GO 26842
26931: POP
26932: POP
// array := tmp ;
26933: LD_ADDR_VAR 0 1
26937: PUSH
26938: LD_VAR 0 10
26942: ST_TO_ADDR
// end ;
26943: GO 26824
26945: POP
26946: POP
// result := array ;
26947: LD_ADDR_VAR 0 5
26951: PUSH
26952: LD_VAR 0 1
26956: ST_TO_ADDR
// end ;
26957: LD_VAR 0 5
26961: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26962: LD_INT 0
26964: PPUSH
26965: PPUSH
// result := 0 ;
26966: LD_ADDR_VAR 0 3
26970: PUSH
26971: LD_INT 0
26973: ST_TO_ADDR
// if not array or not value in array then
26974: LD_VAR 0 1
26978: NOT
26979: PUSH
26980: LD_VAR 0 2
26984: PUSH
26985: LD_VAR 0 1
26989: IN
26990: NOT
26991: OR
26992: IFFALSE 26996
// exit ;
26994: GO 27050
// for i = 1 to array do
26996: LD_ADDR_VAR 0 4
27000: PUSH
27001: DOUBLE
27002: LD_INT 1
27004: DEC
27005: ST_TO_ADDR
27006: LD_VAR 0 1
27010: PUSH
27011: FOR_TO
27012: IFFALSE 27048
// if value = array [ i ] then
27014: LD_VAR 0 2
27018: PUSH
27019: LD_VAR 0 1
27023: PUSH
27024: LD_VAR 0 4
27028: ARRAY
27029: EQUAL
27030: IFFALSE 27046
// begin result := i ;
27032: LD_ADDR_VAR 0 3
27036: PUSH
27037: LD_VAR 0 4
27041: ST_TO_ADDR
// exit ;
27042: POP
27043: POP
27044: GO 27050
// end ;
27046: GO 27011
27048: POP
27049: POP
// end ;
27050: LD_VAR 0 3
27054: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27055: LD_INT 0
27057: PPUSH
// vc_chassis := chassis ;
27058: LD_ADDR_OWVAR 37
27062: PUSH
27063: LD_VAR 0 1
27067: ST_TO_ADDR
// vc_engine := engine ;
27068: LD_ADDR_OWVAR 39
27072: PUSH
27073: LD_VAR 0 2
27077: ST_TO_ADDR
// vc_control := control ;
27078: LD_ADDR_OWVAR 38
27082: PUSH
27083: LD_VAR 0 3
27087: ST_TO_ADDR
// vc_weapon := weapon ;
27088: LD_ADDR_OWVAR 40
27092: PUSH
27093: LD_VAR 0 4
27097: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27098: LD_ADDR_OWVAR 41
27102: PUSH
27103: LD_VAR 0 5
27107: ST_TO_ADDR
// end ;
27108: LD_VAR 0 6
27112: RET
// export function WantPlant ( unit ) ; var task ; begin
27113: LD_INT 0
27115: PPUSH
27116: PPUSH
// result := false ;
27117: LD_ADDR_VAR 0 2
27121: PUSH
27122: LD_INT 0
27124: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27125: LD_ADDR_VAR 0 3
27129: PUSH
27130: LD_VAR 0 1
27134: PPUSH
27135: CALL_OW 437
27139: ST_TO_ADDR
// if task then
27140: LD_VAR 0 3
27144: IFFALSE 27172
// if task [ 1 ] [ 1 ] = p then
27146: LD_VAR 0 3
27150: PUSH
27151: LD_INT 1
27153: ARRAY
27154: PUSH
27155: LD_INT 1
27157: ARRAY
27158: PUSH
27159: LD_STRING p
27161: EQUAL
27162: IFFALSE 27172
// result := true ;
27164: LD_ADDR_VAR 0 2
27168: PUSH
27169: LD_INT 1
27171: ST_TO_ADDR
// end ;
27172: LD_VAR 0 2
27176: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27177: LD_INT 0
27179: PPUSH
27180: PPUSH
27181: PPUSH
27182: PPUSH
// if pos < 1 then
27183: LD_VAR 0 2
27187: PUSH
27188: LD_INT 1
27190: LESS
27191: IFFALSE 27195
// exit ;
27193: GO 27498
// if pos = 1 then
27195: LD_VAR 0 2
27199: PUSH
27200: LD_INT 1
27202: EQUAL
27203: IFFALSE 27236
// result := Replace ( arr , pos [ 1 ] , value ) else
27205: LD_ADDR_VAR 0 4
27209: PUSH
27210: LD_VAR 0 1
27214: PPUSH
27215: LD_VAR 0 2
27219: PUSH
27220: LD_INT 1
27222: ARRAY
27223: PPUSH
27224: LD_VAR 0 3
27228: PPUSH
27229: CALL_OW 1
27233: ST_TO_ADDR
27234: GO 27498
// begin tmp := arr ;
27236: LD_ADDR_VAR 0 6
27240: PUSH
27241: LD_VAR 0 1
27245: ST_TO_ADDR
// s_arr := [ tmp ] ;
27246: LD_ADDR_VAR 0 7
27250: PUSH
27251: LD_VAR 0 6
27255: PUSH
27256: EMPTY
27257: LIST
27258: ST_TO_ADDR
// for i = 1 to pos - 1 do
27259: LD_ADDR_VAR 0 5
27263: PUSH
27264: DOUBLE
27265: LD_INT 1
27267: DEC
27268: ST_TO_ADDR
27269: LD_VAR 0 2
27273: PUSH
27274: LD_INT 1
27276: MINUS
27277: PUSH
27278: FOR_TO
27279: IFFALSE 27324
// begin tmp := tmp [ pos [ i ] ] ;
27281: LD_ADDR_VAR 0 6
27285: PUSH
27286: LD_VAR 0 6
27290: PUSH
27291: LD_VAR 0 2
27295: PUSH
27296: LD_VAR 0 5
27300: ARRAY
27301: ARRAY
27302: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27303: LD_ADDR_VAR 0 7
27307: PUSH
27308: LD_VAR 0 7
27312: PUSH
27313: LD_VAR 0 6
27317: PUSH
27318: EMPTY
27319: LIST
27320: ADD
27321: ST_TO_ADDR
// end ;
27322: GO 27278
27324: POP
27325: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27326: LD_ADDR_VAR 0 6
27330: PUSH
27331: LD_VAR 0 6
27335: PPUSH
27336: LD_VAR 0 2
27340: PUSH
27341: LD_VAR 0 2
27345: ARRAY
27346: PPUSH
27347: LD_VAR 0 3
27351: PPUSH
27352: CALL_OW 1
27356: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27357: LD_ADDR_VAR 0 7
27361: PUSH
27362: LD_VAR 0 7
27366: PPUSH
27367: LD_VAR 0 7
27371: PPUSH
27372: LD_VAR 0 6
27376: PPUSH
27377: CALL_OW 1
27381: ST_TO_ADDR
// for i = s_arr downto 2 do
27382: LD_ADDR_VAR 0 5
27386: PUSH
27387: DOUBLE
27388: LD_VAR 0 7
27392: INC
27393: ST_TO_ADDR
27394: LD_INT 2
27396: PUSH
27397: FOR_DOWNTO
27398: IFFALSE 27482
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27400: LD_ADDR_VAR 0 6
27404: PUSH
27405: LD_VAR 0 7
27409: PUSH
27410: LD_VAR 0 5
27414: PUSH
27415: LD_INT 1
27417: MINUS
27418: ARRAY
27419: PPUSH
27420: LD_VAR 0 2
27424: PUSH
27425: LD_VAR 0 5
27429: PUSH
27430: LD_INT 1
27432: MINUS
27433: ARRAY
27434: PPUSH
27435: LD_VAR 0 7
27439: PUSH
27440: LD_VAR 0 5
27444: ARRAY
27445: PPUSH
27446: CALL_OW 1
27450: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27451: LD_ADDR_VAR 0 7
27455: PUSH
27456: LD_VAR 0 7
27460: PPUSH
27461: LD_VAR 0 5
27465: PUSH
27466: LD_INT 1
27468: MINUS
27469: PPUSH
27470: LD_VAR 0 6
27474: PPUSH
27475: CALL_OW 1
27479: ST_TO_ADDR
// end ;
27480: GO 27397
27482: POP
27483: POP
// result := s_arr [ 1 ] ;
27484: LD_ADDR_VAR 0 4
27488: PUSH
27489: LD_VAR 0 7
27493: PUSH
27494: LD_INT 1
27496: ARRAY
27497: ST_TO_ADDR
// end ; end ;
27498: LD_VAR 0 4
27502: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27503: LD_INT 0
27505: PPUSH
27506: PPUSH
// if not list then
27507: LD_VAR 0 1
27511: NOT
27512: IFFALSE 27516
// exit ;
27514: GO 27607
// i := list [ pos1 ] ;
27516: LD_ADDR_VAR 0 5
27520: PUSH
27521: LD_VAR 0 1
27525: PUSH
27526: LD_VAR 0 2
27530: ARRAY
27531: ST_TO_ADDR
// if not i then
27532: LD_VAR 0 5
27536: NOT
27537: IFFALSE 27541
// exit ;
27539: GO 27607
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27541: LD_ADDR_VAR 0 1
27545: PUSH
27546: LD_VAR 0 1
27550: PPUSH
27551: LD_VAR 0 2
27555: PPUSH
27556: LD_VAR 0 1
27560: PUSH
27561: LD_VAR 0 3
27565: ARRAY
27566: PPUSH
27567: CALL_OW 1
27571: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27572: LD_ADDR_VAR 0 1
27576: PUSH
27577: LD_VAR 0 1
27581: PPUSH
27582: LD_VAR 0 3
27586: PPUSH
27587: LD_VAR 0 5
27591: PPUSH
27592: CALL_OW 1
27596: ST_TO_ADDR
// result := list ;
27597: LD_ADDR_VAR 0 4
27601: PUSH
27602: LD_VAR 0 1
27606: ST_TO_ADDR
// end ;
27607: LD_VAR 0 4
27611: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27612: LD_INT 0
27614: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27615: LD_ADDR_VAR 0 5
27619: PUSH
27620: LD_VAR 0 1
27624: PPUSH
27625: CALL_OW 250
27629: PPUSH
27630: LD_VAR 0 1
27634: PPUSH
27635: CALL_OW 251
27639: PPUSH
27640: LD_VAR 0 2
27644: PPUSH
27645: LD_VAR 0 3
27649: PPUSH
27650: LD_VAR 0 4
27654: PPUSH
27655: CALL 27665 0 5
27659: ST_TO_ADDR
// end ;
27660: LD_VAR 0 5
27664: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27665: LD_INT 0
27667: PPUSH
27668: PPUSH
27669: PPUSH
27670: PPUSH
// if not list then
27671: LD_VAR 0 3
27675: NOT
27676: IFFALSE 27680
// exit ;
27678: GO 28068
// result := [ ] ;
27680: LD_ADDR_VAR 0 6
27684: PUSH
27685: EMPTY
27686: ST_TO_ADDR
// for i in list do
27687: LD_ADDR_VAR 0 7
27691: PUSH
27692: LD_VAR 0 3
27696: PUSH
27697: FOR_IN
27698: IFFALSE 27900
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27700: LD_ADDR_VAR 0 9
27704: PUSH
27705: LD_VAR 0 7
27709: PPUSH
27710: LD_VAR 0 1
27714: PPUSH
27715: LD_VAR 0 2
27719: PPUSH
27720: CALL_OW 297
27724: ST_TO_ADDR
// if not result then
27725: LD_VAR 0 6
27729: NOT
27730: IFFALSE 27756
// result := [ [ i , tmp ] ] else
27732: LD_ADDR_VAR 0 6
27736: PUSH
27737: LD_VAR 0 7
27741: PUSH
27742: LD_VAR 0 9
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: EMPTY
27752: LIST
27753: ST_TO_ADDR
27754: GO 27898
// begin if result [ result ] [ 2 ] < tmp then
27756: LD_VAR 0 6
27760: PUSH
27761: LD_VAR 0 6
27765: ARRAY
27766: PUSH
27767: LD_INT 2
27769: ARRAY
27770: PUSH
27771: LD_VAR 0 9
27775: LESS
27776: IFFALSE 27818
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27778: LD_ADDR_VAR 0 6
27782: PUSH
27783: LD_VAR 0 6
27787: PPUSH
27788: LD_VAR 0 6
27792: PUSH
27793: LD_INT 1
27795: PLUS
27796: PPUSH
27797: LD_VAR 0 7
27801: PUSH
27802: LD_VAR 0 9
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PPUSH
27811: CALL_OW 2
27815: ST_TO_ADDR
27816: GO 27898
// for j = 1 to result do
27818: LD_ADDR_VAR 0 8
27822: PUSH
27823: DOUBLE
27824: LD_INT 1
27826: DEC
27827: ST_TO_ADDR
27828: LD_VAR 0 6
27832: PUSH
27833: FOR_TO
27834: IFFALSE 27896
// begin if tmp < result [ j ] [ 2 ] then
27836: LD_VAR 0 9
27840: PUSH
27841: LD_VAR 0 6
27845: PUSH
27846: LD_VAR 0 8
27850: ARRAY
27851: PUSH
27852: LD_INT 2
27854: ARRAY
27855: LESS
27856: IFFALSE 27894
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27858: LD_ADDR_VAR 0 6
27862: PUSH
27863: LD_VAR 0 6
27867: PPUSH
27868: LD_VAR 0 8
27872: PPUSH
27873: LD_VAR 0 7
27877: PUSH
27878: LD_VAR 0 9
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PPUSH
27887: CALL_OW 2
27891: ST_TO_ADDR
// break ;
27892: GO 27896
// end ; end ;
27894: GO 27833
27896: POP
27897: POP
// end ; end ;
27898: GO 27697
27900: POP
27901: POP
// if result and not asc then
27902: LD_VAR 0 6
27906: PUSH
27907: LD_VAR 0 4
27911: NOT
27912: AND
27913: IFFALSE 27988
// begin tmp := result ;
27915: LD_ADDR_VAR 0 9
27919: PUSH
27920: LD_VAR 0 6
27924: ST_TO_ADDR
// for i = tmp downto 1 do
27925: LD_ADDR_VAR 0 7
27929: PUSH
27930: DOUBLE
27931: LD_VAR 0 9
27935: INC
27936: ST_TO_ADDR
27937: LD_INT 1
27939: PUSH
27940: FOR_DOWNTO
27941: IFFALSE 27986
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27943: LD_ADDR_VAR 0 6
27947: PUSH
27948: LD_VAR 0 6
27952: PPUSH
27953: LD_VAR 0 9
27957: PUSH
27958: LD_VAR 0 7
27962: MINUS
27963: PUSH
27964: LD_INT 1
27966: PLUS
27967: PPUSH
27968: LD_VAR 0 9
27972: PUSH
27973: LD_VAR 0 7
27977: ARRAY
27978: PPUSH
27979: CALL_OW 1
27983: ST_TO_ADDR
27984: GO 27940
27986: POP
27987: POP
// end ; tmp := [ ] ;
27988: LD_ADDR_VAR 0 9
27992: PUSH
27993: EMPTY
27994: ST_TO_ADDR
// if mode then
27995: LD_VAR 0 5
27999: IFFALSE 28068
// begin for i = 1 to result do
28001: LD_ADDR_VAR 0 7
28005: PUSH
28006: DOUBLE
28007: LD_INT 1
28009: DEC
28010: ST_TO_ADDR
28011: LD_VAR 0 6
28015: PUSH
28016: FOR_TO
28017: IFFALSE 28056
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28019: LD_ADDR_VAR 0 9
28023: PUSH
28024: LD_VAR 0 9
28028: PPUSH
28029: LD_VAR 0 7
28033: PPUSH
28034: LD_VAR 0 6
28038: PUSH
28039: LD_VAR 0 7
28043: ARRAY
28044: PUSH
28045: LD_INT 1
28047: ARRAY
28048: PPUSH
28049: CALL_OW 1
28053: ST_TO_ADDR
28054: GO 28016
28056: POP
28057: POP
// result := tmp ;
28058: LD_ADDR_VAR 0 6
28062: PUSH
28063: LD_VAR 0 9
28067: ST_TO_ADDR
// end ; end ;
28068: LD_VAR 0 6
28072: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28073: LD_INT 0
28075: PPUSH
28076: PPUSH
28077: PPUSH
28078: PPUSH
28079: PPUSH
28080: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28081: LD_ADDR_VAR 0 5
28085: PUSH
28086: LD_INT 0
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: EMPTY
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: ST_TO_ADDR
// if not x or not y then
28103: LD_VAR 0 2
28107: NOT
28108: PUSH
28109: LD_VAR 0 3
28113: NOT
28114: OR
28115: IFFALSE 28119
// exit ;
28117: GO 29765
// if not range then
28119: LD_VAR 0 4
28123: NOT
28124: IFFALSE 28134
// range := 10 ;
28126: LD_ADDR_VAR 0 4
28130: PUSH
28131: LD_INT 10
28133: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28134: LD_ADDR_VAR 0 8
28138: PUSH
28139: LD_INT 81
28141: PUSH
28142: LD_VAR 0 1
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 92
28153: PUSH
28154: LD_VAR 0 2
28158: PUSH
28159: LD_VAR 0 3
28163: PUSH
28164: LD_VAR 0 4
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 3
28177: PUSH
28178: LD_INT 21
28180: PUSH
28181: LD_INT 3
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: LIST
28196: PPUSH
28197: CALL_OW 69
28201: ST_TO_ADDR
// if not tmp then
28202: LD_VAR 0 8
28206: NOT
28207: IFFALSE 28211
// exit ;
28209: GO 29765
// for i in tmp do
28211: LD_ADDR_VAR 0 6
28215: PUSH
28216: LD_VAR 0 8
28220: PUSH
28221: FOR_IN
28222: IFFALSE 29740
// begin points := [ 0 , 0 , 0 ] ;
28224: LD_ADDR_VAR 0 9
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: LIST
28242: ST_TO_ADDR
// bpoints := 1 ;
28243: LD_ADDR_VAR 0 10
28247: PUSH
28248: LD_INT 1
28250: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28251: LD_VAR 0 6
28255: PPUSH
28256: CALL_OW 247
28260: PUSH
28261: LD_INT 1
28263: DOUBLE
28264: EQUAL
28265: IFTRUE 28269
28267: GO 28847
28269: POP
// begin if GetClass ( i ) = 1 then
28270: LD_VAR 0 6
28274: PPUSH
28275: CALL_OW 257
28279: PUSH
28280: LD_INT 1
28282: EQUAL
28283: IFFALSE 28304
// points := [ 10 , 5 , 3 ] ;
28285: LD_ADDR_VAR 0 9
28289: PUSH
28290: LD_INT 10
28292: PUSH
28293: LD_INT 5
28295: PUSH
28296: LD_INT 3
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: LIST
28303: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28304: LD_VAR 0 6
28308: PPUSH
28309: CALL_OW 257
28313: PUSH
28314: LD_INT 2
28316: PUSH
28317: LD_INT 3
28319: PUSH
28320: LD_INT 4
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: LIST
28327: IN
28328: IFFALSE 28349
// points := [ 3 , 2 , 1 ] ;
28330: LD_ADDR_VAR 0 9
28334: PUSH
28335: LD_INT 3
28337: PUSH
28338: LD_INT 2
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: LIST
28348: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28349: LD_VAR 0 6
28353: PPUSH
28354: CALL_OW 257
28358: PUSH
28359: LD_INT 5
28361: EQUAL
28362: IFFALSE 28383
// points := [ 130 , 5 , 2 ] ;
28364: LD_ADDR_VAR 0 9
28368: PUSH
28369: LD_INT 130
28371: PUSH
28372: LD_INT 5
28374: PUSH
28375: LD_INT 2
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: LIST
28382: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28383: LD_VAR 0 6
28387: PPUSH
28388: CALL_OW 257
28392: PUSH
28393: LD_INT 8
28395: EQUAL
28396: IFFALSE 28417
// points := [ 35 , 35 , 30 ] ;
28398: LD_ADDR_VAR 0 9
28402: PUSH
28403: LD_INT 35
28405: PUSH
28406: LD_INT 35
28408: PUSH
28409: LD_INT 30
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: LIST
28416: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28417: LD_VAR 0 6
28421: PPUSH
28422: CALL_OW 257
28426: PUSH
28427: LD_INT 9
28429: EQUAL
28430: IFFALSE 28451
// points := [ 20 , 55 , 40 ] ;
28432: LD_ADDR_VAR 0 9
28436: PUSH
28437: LD_INT 20
28439: PUSH
28440: LD_INT 55
28442: PUSH
28443: LD_INT 40
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: LIST
28450: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28451: LD_VAR 0 6
28455: PPUSH
28456: CALL_OW 257
28460: PUSH
28461: LD_INT 12
28463: PUSH
28464: LD_INT 16
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: IN
28471: IFFALSE 28492
// points := [ 5 , 3 , 2 ] ;
28473: LD_ADDR_VAR 0 9
28477: PUSH
28478: LD_INT 5
28480: PUSH
28481: LD_INT 3
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: LIST
28491: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28492: LD_VAR 0 6
28496: PPUSH
28497: CALL_OW 257
28501: PUSH
28502: LD_INT 17
28504: EQUAL
28505: IFFALSE 28526
// points := [ 100 , 50 , 75 ] ;
28507: LD_ADDR_VAR 0 9
28511: PUSH
28512: LD_INT 100
28514: PUSH
28515: LD_INT 50
28517: PUSH
28518: LD_INT 75
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: LIST
28525: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28526: LD_VAR 0 6
28530: PPUSH
28531: CALL_OW 257
28535: PUSH
28536: LD_INT 15
28538: EQUAL
28539: IFFALSE 28560
// points := [ 10 , 5 , 3 ] ;
28541: LD_ADDR_VAR 0 9
28545: PUSH
28546: LD_INT 10
28548: PUSH
28549: LD_INT 5
28551: PUSH
28552: LD_INT 3
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: LIST
28559: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28560: LD_VAR 0 6
28564: PPUSH
28565: CALL_OW 257
28569: PUSH
28570: LD_INT 14
28572: EQUAL
28573: IFFALSE 28594
// points := [ 10 , 0 , 0 ] ;
28575: LD_ADDR_VAR 0 9
28579: PUSH
28580: LD_INT 10
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28594: LD_VAR 0 6
28598: PPUSH
28599: CALL_OW 257
28603: PUSH
28604: LD_INT 11
28606: EQUAL
28607: IFFALSE 28628
// points := [ 30 , 10 , 5 ] ;
28609: LD_ADDR_VAR 0 9
28613: PUSH
28614: LD_INT 30
28616: PUSH
28617: LD_INT 10
28619: PUSH
28620: LD_INT 5
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: LIST
28627: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28628: LD_VAR 0 1
28632: PPUSH
28633: LD_INT 5
28635: PPUSH
28636: CALL_OW 321
28640: PUSH
28641: LD_INT 2
28643: EQUAL
28644: IFFALSE 28661
// bpoints := bpoints * 1.8 ;
28646: LD_ADDR_VAR 0 10
28650: PUSH
28651: LD_VAR 0 10
28655: PUSH
28656: LD_REAL  1.80000000000000E+0000
28659: MUL
28660: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28661: LD_VAR 0 6
28665: PPUSH
28666: CALL_OW 257
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: LD_INT 2
28676: PUSH
28677: LD_INT 3
28679: PUSH
28680: LD_INT 4
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: IN
28689: PUSH
28690: LD_VAR 0 1
28694: PPUSH
28695: LD_INT 51
28697: PPUSH
28698: CALL_OW 321
28702: PUSH
28703: LD_INT 2
28705: EQUAL
28706: AND
28707: IFFALSE 28724
// bpoints := bpoints * 1.2 ;
28709: LD_ADDR_VAR 0 10
28713: PUSH
28714: LD_VAR 0 10
28718: PUSH
28719: LD_REAL  1.20000000000000E+0000
28722: MUL
28723: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28724: LD_VAR 0 6
28728: PPUSH
28729: CALL_OW 257
28733: PUSH
28734: LD_INT 5
28736: PUSH
28737: LD_INT 7
28739: PUSH
28740: LD_INT 9
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: LIST
28747: IN
28748: PUSH
28749: LD_VAR 0 1
28753: PPUSH
28754: LD_INT 52
28756: PPUSH
28757: CALL_OW 321
28761: PUSH
28762: LD_INT 2
28764: EQUAL
28765: AND
28766: IFFALSE 28783
// bpoints := bpoints * 1.5 ;
28768: LD_ADDR_VAR 0 10
28772: PUSH
28773: LD_VAR 0 10
28777: PUSH
28778: LD_REAL  1.50000000000000E+0000
28781: MUL
28782: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28783: LD_VAR 0 1
28787: PPUSH
28788: LD_INT 66
28790: PPUSH
28791: CALL_OW 321
28795: PUSH
28796: LD_INT 2
28798: EQUAL
28799: IFFALSE 28816
// bpoints := bpoints * 1.1 ;
28801: LD_ADDR_VAR 0 10
28805: PUSH
28806: LD_VAR 0 10
28810: PUSH
28811: LD_REAL  1.10000000000000E+0000
28814: MUL
28815: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28816: LD_ADDR_VAR 0 10
28820: PUSH
28821: LD_VAR 0 10
28825: PUSH
28826: LD_VAR 0 6
28830: PPUSH
28831: LD_INT 1
28833: PPUSH
28834: CALL_OW 259
28838: PUSH
28839: LD_REAL  1.15000000000000E+0000
28842: MUL
28843: MUL
28844: ST_TO_ADDR
// end ; unit_vehicle :
28845: GO 29669
28847: LD_INT 2
28849: DOUBLE
28850: EQUAL
28851: IFTRUE 28855
28853: GO 29657
28855: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28856: LD_VAR 0 6
28860: PPUSH
28861: CALL_OW 264
28865: PUSH
28866: LD_INT 2
28868: PUSH
28869: LD_INT 42
28871: PUSH
28872: LD_INT 24
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: LIST
28879: IN
28880: IFFALSE 28901
// points := [ 25 , 5 , 3 ] ;
28882: LD_ADDR_VAR 0 9
28886: PUSH
28887: LD_INT 25
28889: PUSH
28890: LD_INT 5
28892: PUSH
28893: LD_INT 3
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: LIST
28900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28901: LD_VAR 0 6
28905: PPUSH
28906: CALL_OW 264
28910: PUSH
28911: LD_INT 4
28913: PUSH
28914: LD_INT 43
28916: PUSH
28917: LD_INT 25
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: LIST
28924: IN
28925: IFFALSE 28946
// points := [ 40 , 15 , 5 ] ;
28927: LD_ADDR_VAR 0 9
28931: PUSH
28932: LD_INT 40
28934: PUSH
28935: LD_INT 15
28937: PUSH
28938: LD_INT 5
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: LIST
28945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28946: LD_VAR 0 6
28950: PPUSH
28951: CALL_OW 264
28955: PUSH
28956: LD_INT 3
28958: PUSH
28959: LD_INT 23
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: IN
28966: IFFALSE 28987
// points := [ 7 , 25 , 8 ] ;
28968: LD_ADDR_VAR 0 9
28972: PUSH
28973: LD_INT 7
28975: PUSH
28976: LD_INT 25
28978: PUSH
28979: LD_INT 8
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: LIST
28986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28987: LD_VAR 0 6
28991: PPUSH
28992: CALL_OW 264
28996: PUSH
28997: LD_INT 5
28999: PUSH
29000: LD_INT 27
29002: PUSH
29003: LD_INT 44
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: LIST
29010: IN
29011: IFFALSE 29032
// points := [ 14 , 50 , 16 ] ;
29013: LD_ADDR_VAR 0 9
29017: PUSH
29018: LD_INT 14
29020: PUSH
29021: LD_INT 50
29023: PUSH
29024: LD_INT 16
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29032: LD_VAR 0 6
29036: PPUSH
29037: CALL_OW 264
29041: PUSH
29042: LD_INT 6
29044: PUSH
29045: LD_INT 46
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: IN
29052: IFFALSE 29073
// points := [ 32 , 120 , 70 ] ;
29054: LD_ADDR_VAR 0 9
29058: PUSH
29059: LD_INT 32
29061: PUSH
29062: LD_INT 120
29064: PUSH
29065: LD_INT 70
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: LIST
29072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
29073: LD_VAR 0 6
29077: PPUSH
29078: CALL_OW 264
29082: PUSH
29083: LD_INT 7
29085: PUSH
29086: LD_INT 28
29088: PUSH
29089: LD_INT 45
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: IN
29097: IFFALSE 29118
// points := [ 35 , 20 , 45 ] ;
29099: LD_ADDR_VAR 0 9
29103: PUSH
29104: LD_INT 35
29106: PUSH
29107: LD_INT 20
29109: PUSH
29110: LD_INT 45
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: LIST
29117: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29118: LD_VAR 0 6
29122: PPUSH
29123: CALL_OW 264
29127: PUSH
29128: LD_INT 47
29130: PUSH
29131: EMPTY
29132: LIST
29133: IN
29134: IFFALSE 29155
// points := [ 67 , 45 , 75 ] ;
29136: LD_ADDR_VAR 0 9
29140: PUSH
29141: LD_INT 67
29143: PUSH
29144: LD_INT 45
29146: PUSH
29147: LD_INT 75
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29155: LD_VAR 0 6
29159: PPUSH
29160: CALL_OW 264
29164: PUSH
29165: LD_INT 26
29167: PUSH
29168: EMPTY
29169: LIST
29170: IN
29171: IFFALSE 29192
// points := [ 120 , 30 , 80 ] ;
29173: LD_ADDR_VAR 0 9
29177: PUSH
29178: LD_INT 120
29180: PUSH
29181: LD_INT 30
29183: PUSH
29184: LD_INT 80
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: LIST
29191: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29192: LD_VAR 0 6
29196: PPUSH
29197: CALL_OW 264
29201: PUSH
29202: LD_INT 22
29204: PUSH
29205: EMPTY
29206: LIST
29207: IN
29208: IFFALSE 29229
// points := [ 40 , 1 , 1 ] ;
29210: LD_ADDR_VAR 0 9
29214: PUSH
29215: LD_INT 40
29217: PUSH
29218: LD_INT 1
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: LIST
29228: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29229: LD_VAR 0 6
29233: PPUSH
29234: CALL_OW 264
29238: PUSH
29239: LD_INT 29
29241: PUSH
29242: EMPTY
29243: LIST
29244: IN
29245: IFFALSE 29266
// points := [ 70 , 200 , 400 ] ;
29247: LD_ADDR_VAR 0 9
29251: PUSH
29252: LD_INT 70
29254: PUSH
29255: LD_INT 200
29257: PUSH
29258: LD_INT 400
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: LIST
29265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29266: LD_VAR 0 6
29270: PPUSH
29271: CALL_OW 264
29275: PUSH
29276: LD_INT 14
29278: PUSH
29279: LD_INT 53
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: IN
29286: IFFALSE 29307
// points := [ 40 , 10 , 20 ] ;
29288: LD_ADDR_VAR 0 9
29292: PUSH
29293: LD_INT 40
29295: PUSH
29296: LD_INT 10
29298: PUSH
29299: LD_INT 20
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29307: LD_VAR 0 6
29311: PPUSH
29312: CALL_OW 264
29316: PUSH
29317: LD_INT 9
29319: PUSH
29320: EMPTY
29321: LIST
29322: IN
29323: IFFALSE 29344
// points := [ 5 , 70 , 20 ] ;
29325: LD_ADDR_VAR 0 9
29329: PUSH
29330: LD_INT 5
29332: PUSH
29333: LD_INT 70
29335: PUSH
29336: LD_INT 20
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: LIST
29343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29344: LD_VAR 0 6
29348: PPUSH
29349: CALL_OW 264
29353: PUSH
29354: LD_INT 10
29356: PUSH
29357: EMPTY
29358: LIST
29359: IN
29360: IFFALSE 29381
// points := [ 35 , 110 , 70 ] ;
29362: LD_ADDR_VAR 0 9
29366: PUSH
29367: LD_INT 35
29369: PUSH
29370: LD_INT 110
29372: PUSH
29373: LD_INT 70
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: LIST
29380: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29381: LD_VAR 0 6
29385: PPUSH
29386: CALL_OW 265
29390: PUSH
29391: LD_INT 25
29393: EQUAL
29394: IFFALSE 29415
// points := [ 80 , 65 , 100 ] ;
29396: LD_ADDR_VAR 0 9
29400: PUSH
29401: LD_INT 80
29403: PUSH
29404: LD_INT 65
29406: PUSH
29407: LD_INT 100
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: LIST
29414: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29415: LD_VAR 0 6
29419: PPUSH
29420: CALL_OW 263
29424: PUSH
29425: LD_INT 1
29427: EQUAL
29428: IFFALSE 29463
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29430: LD_ADDR_VAR 0 10
29434: PUSH
29435: LD_VAR 0 10
29439: PUSH
29440: LD_VAR 0 6
29444: PPUSH
29445: CALL_OW 311
29449: PPUSH
29450: LD_INT 3
29452: PPUSH
29453: CALL_OW 259
29457: PUSH
29458: LD_INT 4
29460: MUL
29461: MUL
29462: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29463: LD_VAR 0 6
29467: PPUSH
29468: CALL_OW 263
29472: PUSH
29473: LD_INT 2
29475: EQUAL
29476: IFFALSE 29527
// begin j := IsControledBy ( i ) ;
29478: LD_ADDR_VAR 0 7
29482: PUSH
29483: LD_VAR 0 6
29487: PPUSH
29488: CALL_OW 312
29492: ST_TO_ADDR
// if j then
29493: LD_VAR 0 7
29497: IFFALSE 29527
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29499: LD_ADDR_VAR 0 10
29503: PUSH
29504: LD_VAR 0 10
29508: PUSH
29509: LD_VAR 0 7
29513: PPUSH
29514: LD_INT 3
29516: PPUSH
29517: CALL_OW 259
29521: PUSH
29522: LD_INT 3
29524: MUL
29525: MUL
29526: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29527: LD_VAR 0 6
29531: PPUSH
29532: CALL_OW 264
29536: PUSH
29537: LD_INT 5
29539: PUSH
29540: LD_INT 6
29542: PUSH
29543: LD_INT 46
29545: PUSH
29546: LD_INT 44
29548: PUSH
29549: LD_INT 47
29551: PUSH
29552: LD_INT 45
29554: PUSH
29555: LD_INT 28
29557: PUSH
29558: LD_INT 7
29560: PUSH
29561: LD_INT 27
29563: PUSH
29564: LD_INT 29
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: IN
29579: PUSH
29580: LD_VAR 0 1
29584: PPUSH
29585: LD_INT 52
29587: PPUSH
29588: CALL_OW 321
29592: PUSH
29593: LD_INT 2
29595: EQUAL
29596: AND
29597: IFFALSE 29614
// bpoints := bpoints * 1.2 ;
29599: LD_ADDR_VAR 0 10
29603: PUSH
29604: LD_VAR 0 10
29608: PUSH
29609: LD_REAL  1.20000000000000E+0000
29612: MUL
29613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29614: LD_VAR 0 6
29618: PPUSH
29619: CALL_OW 264
29623: PUSH
29624: LD_INT 6
29626: PUSH
29627: LD_INT 46
29629: PUSH
29630: LD_INT 47
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: LIST
29637: IN
29638: IFFALSE 29655
// bpoints := bpoints * 1.2 ;
29640: LD_ADDR_VAR 0 10
29644: PUSH
29645: LD_VAR 0 10
29649: PUSH
29650: LD_REAL  1.20000000000000E+0000
29653: MUL
29654: ST_TO_ADDR
// end ; unit_building :
29655: GO 29669
29657: LD_INT 3
29659: DOUBLE
29660: EQUAL
29661: IFTRUE 29665
29663: GO 29668
29665: POP
// ; end ;
29666: GO 29669
29668: POP
// for j = 1 to 3 do
29669: LD_ADDR_VAR 0 7
29673: PUSH
29674: DOUBLE
29675: LD_INT 1
29677: DEC
29678: ST_TO_ADDR
29679: LD_INT 3
29681: PUSH
29682: FOR_TO
29683: IFFALSE 29736
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29685: LD_ADDR_VAR 0 5
29689: PUSH
29690: LD_VAR 0 5
29694: PPUSH
29695: LD_VAR 0 7
29699: PPUSH
29700: LD_VAR 0 5
29704: PUSH
29705: LD_VAR 0 7
29709: ARRAY
29710: PUSH
29711: LD_VAR 0 9
29715: PUSH
29716: LD_VAR 0 7
29720: ARRAY
29721: PUSH
29722: LD_VAR 0 10
29726: MUL
29727: PLUS
29728: PPUSH
29729: CALL_OW 1
29733: ST_TO_ADDR
29734: GO 29682
29736: POP
29737: POP
// end ;
29738: GO 28221
29740: POP
29741: POP
// result := Replace ( result , 4 , tmp ) ;
29742: LD_ADDR_VAR 0 5
29746: PUSH
29747: LD_VAR 0 5
29751: PPUSH
29752: LD_INT 4
29754: PPUSH
29755: LD_VAR 0 8
29759: PPUSH
29760: CALL_OW 1
29764: ST_TO_ADDR
// end ;
29765: LD_VAR 0 5
29769: RET
// export function DangerAtRange ( unit , range ) ; begin
29770: LD_INT 0
29772: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29773: LD_ADDR_VAR 0 3
29777: PUSH
29778: LD_VAR 0 1
29782: PPUSH
29783: CALL_OW 255
29787: PPUSH
29788: LD_VAR 0 1
29792: PPUSH
29793: CALL_OW 250
29797: PPUSH
29798: LD_VAR 0 1
29802: PPUSH
29803: CALL_OW 251
29807: PPUSH
29808: LD_VAR 0 2
29812: PPUSH
29813: CALL 28073 0 4
29817: ST_TO_ADDR
// end ;
29818: LD_VAR 0 3
29822: RET
// export function DangerInArea ( side , area ) ; begin
29823: LD_INT 0
29825: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29826: LD_ADDR_VAR 0 3
29830: PUSH
29831: LD_VAR 0 2
29835: PPUSH
29836: LD_INT 81
29838: PUSH
29839: LD_VAR 0 1
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PPUSH
29848: CALL_OW 70
29852: ST_TO_ADDR
// end ;
29853: LD_VAR 0 3
29857: RET
// export function IsExtension ( b ) ; begin
29858: LD_INT 0
29860: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29861: LD_ADDR_VAR 0 2
29865: PUSH
29866: LD_VAR 0 1
29870: PUSH
29871: LD_INT 23
29873: PUSH
29874: LD_INT 20
29876: PUSH
29877: LD_INT 22
29879: PUSH
29880: LD_INT 17
29882: PUSH
29883: LD_INT 24
29885: PUSH
29886: LD_INT 21
29888: PUSH
29889: LD_INT 19
29891: PUSH
29892: LD_INT 16
29894: PUSH
29895: LD_INT 25
29897: PUSH
29898: LD_INT 18
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: IN
29913: ST_TO_ADDR
// end ;
29914: LD_VAR 0 2
29918: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29919: LD_INT 0
29921: PPUSH
29922: PPUSH
29923: PPUSH
// result := [ ] ;
29924: LD_ADDR_VAR 0 3
29928: PUSH
29929: EMPTY
29930: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29931: LD_ADDR_VAR 0 4
29935: PUSH
29936: LD_VAR 0 2
29940: PPUSH
29941: LD_INT 21
29943: PUSH
29944: LD_INT 3
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PPUSH
29951: CALL_OW 70
29955: ST_TO_ADDR
// if not tmp then
29956: LD_VAR 0 4
29960: NOT
29961: IFFALSE 29965
// exit ;
29963: GO 30023
// for i in tmp do
29965: LD_ADDR_VAR 0 5
29969: PUSH
29970: LD_VAR 0 4
29974: PUSH
29975: FOR_IN
29976: IFFALSE 30011
// if GetBase ( i ) <> base then
29978: LD_VAR 0 5
29982: PPUSH
29983: CALL_OW 274
29987: PUSH
29988: LD_VAR 0 1
29992: NONEQUAL
29993: IFFALSE 30009
// ComLinkToBase ( base , i ) ;
29995: LD_VAR 0 1
29999: PPUSH
30000: LD_VAR 0 5
30004: PPUSH
30005: CALL_OW 169
30009: GO 29975
30011: POP
30012: POP
// result := tmp ;
30013: LD_ADDR_VAR 0 3
30017: PUSH
30018: LD_VAR 0 4
30022: ST_TO_ADDR
// end ;
30023: LD_VAR 0 3
30027: RET
// export function ComComplete ( unit , b ) ; var i ; begin
30028: LD_INT 0
30030: PPUSH
30031: PPUSH
// if BuildingStatus ( b ) = bs_build then
30032: LD_VAR 0 2
30036: PPUSH
30037: CALL_OW 461
30041: PUSH
30042: LD_INT 1
30044: EQUAL
30045: IFFALSE 30105
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30047: LD_VAR 0 1
30051: PPUSH
30052: LD_STRING h
30054: PUSH
30055: LD_VAR 0 2
30059: PPUSH
30060: CALL_OW 250
30064: PUSH
30065: LD_VAR 0 2
30069: PPUSH
30070: CALL_OW 251
30074: PUSH
30075: LD_VAR 0 2
30079: PUSH
30080: LD_INT 0
30082: PUSH
30083: LD_INT 0
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: PUSH
30098: EMPTY
30099: LIST
30100: PPUSH
30101: CALL_OW 446
// end ;
30105: LD_VAR 0 3
30109: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30110: LD_INT 0
30112: PPUSH
30113: PPUSH
30114: PPUSH
30115: PPUSH
30116: PPUSH
30117: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
30118: LD_VAR 0 1
30122: NOT
30123: PUSH
30124: LD_VAR 0 1
30128: PPUSH
30129: CALL_OW 263
30133: PUSH
30134: LD_INT 2
30136: EQUAL
30137: NOT
30138: OR
30139: IFFALSE 30143
// exit ;
30141: GO 30459
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30143: LD_ADDR_VAR 0 6
30147: PUSH
30148: LD_INT 22
30150: PUSH
30151: LD_VAR 0 1
30155: PPUSH
30156: CALL_OW 255
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 2
30167: PUSH
30168: LD_INT 30
30170: PUSH
30171: LD_INT 36
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 34
30180: PUSH
30181: LD_INT 31
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: LIST
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PPUSH
30197: CALL_OW 69
30201: ST_TO_ADDR
// if not tmp then
30202: LD_VAR 0 6
30206: NOT
30207: IFFALSE 30211
// exit ;
30209: GO 30459
// result := [ ] ;
30211: LD_ADDR_VAR 0 2
30215: PUSH
30216: EMPTY
30217: ST_TO_ADDR
// for i in tmp do
30218: LD_ADDR_VAR 0 3
30222: PUSH
30223: LD_VAR 0 6
30227: PUSH
30228: FOR_IN
30229: IFFALSE 30300
// begin t := UnitsInside ( i ) ;
30231: LD_ADDR_VAR 0 4
30235: PUSH
30236: LD_VAR 0 3
30240: PPUSH
30241: CALL_OW 313
30245: ST_TO_ADDR
// if t then
30246: LD_VAR 0 4
30250: IFFALSE 30298
// for j in t do
30252: LD_ADDR_VAR 0 7
30256: PUSH
30257: LD_VAR 0 4
30261: PUSH
30262: FOR_IN
30263: IFFALSE 30296
// result := Insert ( result , result + 1 , j ) ;
30265: LD_ADDR_VAR 0 2
30269: PUSH
30270: LD_VAR 0 2
30274: PPUSH
30275: LD_VAR 0 2
30279: PUSH
30280: LD_INT 1
30282: PLUS
30283: PPUSH
30284: LD_VAR 0 7
30288: PPUSH
30289: CALL_OW 2
30293: ST_TO_ADDR
30294: GO 30262
30296: POP
30297: POP
// end ;
30298: GO 30228
30300: POP
30301: POP
// if not result then
30302: LD_VAR 0 2
30306: NOT
30307: IFFALSE 30311
// exit ;
30309: GO 30459
// mech := result [ 1 ] ;
30311: LD_ADDR_VAR 0 5
30315: PUSH
30316: LD_VAR 0 2
30320: PUSH
30321: LD_INT 1
30323: ARRAY
30324: ST_TO_ADDR
// if result > 1 then
30325: LD_VAR 0 2
30329: PUSH
30330: LD_INT 1
30332: GREATER
30333: IFFALSE 30445
// for i = 2 to result do
30335: LD_ADDR_VAR 0 3
30339: PUSH
30340: DOUBLE
30341: LD_INT 2
30343: DEC
30344: ST_TO_ADDR
30345: LD_VAR 0 2
30349: PUSH
30350: FOR_TO
30351: IFFALSE 30443
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30353: LD_ADDR_VAR 0 4
30357: PUSH
30358: LD_VAR 0 2
30362: PUSH
30363: LD_VAR 0 3
30367: ARRAY
30368: PPUSH
30369: LD_INT 3
30371: PPUSH
30372: CALL_OW 259
30376: PUSH
30377: LD_VAR 0 2
30381: PUSH
30382: LD_VAR 0 3
30386: ARRAY
30387: PPUSH
30388: CALL_OW 432
30392: MINUS
30393: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30394: LD_VAR 0 4
30398: PUSH
30399: LD_VAR 0 5
30403: PPUSH
30404: LD_INT 3
30406: PPUSH
30407: CALL_OW 259
30411: PUSH
30412: LD_VAR 0 5
30416: PPUSH
30417: CALL_OW 432
30421: MINUS
30422: GREATEREQUAL
30423: IFFALSE 30441
// mech := result [ i ] ;
30425: LD_ADDR_VAR 0 5
30429: PUSH
30430: LD_VAR 0 2
30434: PUSH
30435: LD_VAR 0 3
30439: ARRAY
30440: ST_TO_ADDR
// end ;
30441: GO 30350
30443: POP
30444: POP
// ComLinkTo ( vehicle , mech ) ;
30445: LD_VAR 0 1
30449: PPUSH
30450: LD_VAR 0 5
30454: PPUSH
30455: CALL_OW 135
// end ;
30459: LD_VAR 0 2
30463: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30464: LD_INT 0
30466: PPUSH
30467: PPUSH
30468: PPUSH
30469: PPUSH
30470: PPUSH
30471: PPUSH
30472: PPUSH
30473: PPUSH
30474: PPUSH
30475: PPUSH
30476: PPUSH
30477: PPUSH
30478: PPUSH
// result := [ ] ;
30479: LD_ADDR_VAR 0 7
30483: PUSH
30484: EMPTY
30485: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30486: LD_VAR 0 1
30490: PPUSH
30491: CALL_OW 266
30495: PUSH
30496: LD_INT 0
30498: PUSH
30499: LD_INT 1
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: IN
30506: NOT
30507: IFFALSE 30511
// exit ;
30509: GO 32142
// if name then
30511: LD_VAR 0 3
30515: IFFALSE 30531
// SetBName ( base_dep , name ) ;
30517: LD_VAR 0 1
30521: PPUSH
30522: LD_VAR 0 3
30526: PPUSH
30527: CALL_OW 500
// base := GetBase ( base_dep ) ;
30531: LD_ADDR_VAR 0 15
30535: PUSH
30536: LD_VAR 0 1
30540: PPUSH
30541: CALL_OW 274
30545: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30546: LD_ADDR_VAR 0 16
30550: PUSH
30551: LD_VAR 0 1
30555: PPUSH
30556: CALL_OW 255
30560: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30561: LD_ADDR_VAR 0 17
30565: PUSH
30566: LD_VAR 0 1
30570: PPUSH
30571: CALL_OW 248
30575: ST_TO_ADDR
// if sources then
30576: LD_VAR 0 5
30580: IFFALSE 30627
// for i = 1 to 3 do
30582: LD_ADDR_VAR 0 8
30586: PUSH
30587: DOUBLE
30588: LD_INT 1
30590: DEC
30591: ST_TO_ADDR
30592: LD_INT 3
30594: PUSH
30595: FOR_TO
30596: IFFALSE 30625
// AddResourceType ( base , i , sources [ i ] ) ;
30598: LD_VAR 0 15
30602: PPUSH
30603: LD_VAR 0 8
30607: PPUSH
30608: LD_VAR 0 5
30612: PUSH
30613: LD_VAR 0 8
30617: ARRAY
30618: PPUSH
30619: CALL_OW 276
30623: GO 30595
30625: POP
30626: POP
// buildings := GetBaseBuildings ( base , area ) ;
30627: LD_ADDR_VAR 0 18
30631: PUSH
30632: LD_VAR 0 15
30636: PPUSH
30637: LD_VAR 0 2
30641: PPUSH
30642: CALL 29919 0 2
30646: ST_TO_ADDR
// InitHc ;
30647: CALL_OW 19
// InitUc ;
30651: CALL_OW 18
// uc_side := side ;
30655: LD_ADDR_OWVAR 20
30659: PUSH
30660: LD_VAR 0 16
30664: ST_TO_ADDR
// uc_nation := nation ;
30665: LD_ADDR_OWVAR 21
30669: PUSH
30670: LD_VAR 0 17
30674: ST_TO_ADDR
// if buildings then
30675: LD_VAR 0 18
30679: IFFALSE 32001
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30681: LD_ADDR_VAR 0 19
30685: PUSH
30686: LD_VAR 0 18
30690: PPUSH
30691: LD_INT 2
30693: PUSH
30694: LD_INT 30
30696: PUSH
30697: LD_INT 29
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 30
30706: PUSH
30707: LD_INT 30
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: PPUSH
30719: CALL_OW 72
30723: ST_TO_ADDR
// if tmp then
30724: LD_VAR 0 19
30728: IFFALSE 30776
// for i in tmp do
30730: LD_ADDR_VAR 0 8
30734: PUSH
30735: LD_VAR 0 19
30739: PUSH
30740: FOR_IN
30741: IFFALSE 30774
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30743: LD_VAR 0 8
30747: PPUSH
30748: CALL_OW 250
30752: PPUSH
30753: LD_VAR 0 8
30757: PPUSH
30758: CALL_OW 251
30762: PPUSH
30763: LD_VAR 0 16
30767: PPUSH
30768: CALL_OW 441
30772: GO 30740
30774: POP
30775: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30776: LD_VAR 0 18
30780: PPUSH
30781: LD_INT 2
30783: PUSH
30784: LD_INT 30
30786: PUSH
30787: LD_INT 32
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 30
30796: PUSH
30797: LD_INT 33
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: LIST
30808: PPUSH
30809: CALL_OW 72
30813: IFFALSE 30901
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30815: LD_ADDR_VAR 0 8
30819: PUSH
30820: LD_VAR 0 18
30824: PPUSH
30825: LD_INT 2
30827: PUSH
30828: LD_INT 30
30830: PUSH
30831: LD_INT 32
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 30
30840: PUSH
30841: LD_INT 33
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: LIST
30852: PPUSH
30853: CALL_OW 72
30857: PUSH
30858: FOR_IN
30859: IFFALSE 30899
// begin if not GetBWeapon ( i ) then
30861: LD_VAR 0 8
30865: PPUSH
30866: CALL_OW 269
30870: NOT
30871: IFFALSE 30897
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30873: LD_VAR 0 8
30877: PPUSH
30878: LD_VAR 0 8
30882: PPUSH
30883: LD_VAR 0 2
30887: PPUSH
30888: CALL 32147 0 2
30892: PPUSH
30893: CALL_OW 431
// end ;
30897: GO 30858
30899: POP
30900: POP
// end ; for i = 1 to personel do
30901: LD_ADDR_VAR 0 8
30905: PUSH
30906: DOUBLE
30907: LD_INT 1
30909: DEC
30910: ST_TO_ADDR
30911: LD_VAR 0 6
30915: PUSH
30916: FOR_TO
30917: IFFALSE 31981
// begin if i > 4 then
30919: LD_VAR 0 8
30923: PUSH
30924: LD_INT 4
30926: GREATER
30927: IFFALSE 30931
// break ;
30929: GO 31981
// case i of 1 :
30931: LD_VAR 0 8
30935: PUSH
30936: LD_INT 1
30938: DOUBLE
30939: EQUAL
30940: IFTRUE 30944
30942: GO 31024
30944: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30945: LD_ADDR_VAR 0 12
30949: PUSH
30950: LD_VAR 0 18
30954: PPUSH
30955: LD_INT 22
30957: PUSH
30958: LD_VAR 0 16
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 58
30969: PUSH
30970: EMPTY
30971: LIST
30972: PUSH
30973: LD_INT 2
30975: PUSH
30976: LD_INT 30
30978: PUSH
30979: LD_INT 32
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 30
30988: PUSH
30989: LD_INT 4
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 30
30998: PUSH
30999: LD_INT 5
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: PPUSH
31017: CALL_OW 72
31021: ST_TO_ADDR
31022: GO 31246
31024: LD_INT 2
31026: DOUBLE
31027: EQUAL
31028: IFTRUE 31032
31030: GO 31094
31032: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31033: LD_ADDR_VAR 0 12
31037: PUSH
31038: LD_VAR 0 18
31042: PPUSH
31043: LD_INT 22
31045: PUSH
31046: LD_VAR 0 16
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 2
31057: PUSH
31058: LD_INT 30
31060: PUSH
31061: LD_INT 0
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 30
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: LIST
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PPUSH
31087: CALL_OW 72
31091: ST_TO_ADDR
31092: GO 31246
31094: LD_INT 3
31096: DOUBLE
31097: EQUAL
31098: IFTRUE 31102
31100: GO 31164
31102: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31103: LD_ADDR_VAR 0 12
31107: PUSH
31108: LD_VAR 0 18
31112: PPUSH
31113: LD_INT 22
31115: PUSH
31116: LD_VAR 0 16
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: LD_INT 30
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 30
31140: PUSH
31141: LD_INT 3
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: LIST
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PPUSH
31157: CALL_OW 72
31161: ST_TO_ADDR
31162: GO 31246
31164: LD_INT 4
31166: DOUBLE
31167: EQUAL
31168: IFTRUE 31172
31170: GO 31245
31172: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31173: LD_ADDR_VAR 0 12
31177: PUSH
31178: LD_VAR 0 18
31182: PPUSH
31183: LD_INT 22
31185: PUSH
31186: LD_VAR 0 16
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 2
31197: PUSH
31198: LD_INT 30
31200: PUSH
31201: LD_INT 6
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 30
31210: PUSH
31211: LD_INT 7
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 30
31220: PUSH
31221: LD_INT 8
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PPUSH
31238: CALL_OW 72
31242: ST_TO_ADDR
31243: GO 31246
31245: POP
// if i = 1 then
31246: LD_VAR 0 8
31250: PUSH
31251: LD_INT 1
31253: EQUAL
31254: IFFALSE 31365
// begin tmp := [ ] ;
31256: LD_ADDR_VAR 0 19
31260: PUSH
31261: EMPTY
31262: ST_TO_ADDR
// for j in f do
31263: LD_ADDR_VAR 0 9
31267: PUSH
31268: LD_VAR 0 12
31272: PUSH
31273: FOR_IN
31274: IFFALSE 31347
// if GetBType ( j ) = b_bunker then
31276: LD_VAR 0 9
31280: PPUSH
31281: CALL_OW 266
31285: PUSH
31286: LD_INT 32
31288: EQUAL
31289: IFFALSE 31316
// tmp := Insert ( tmp , 1 , j ) else
31291: LD_ADDR_VAR 0 19
31295: PUSH
31296: LD_VAR 0 19
31300: PPUSH
31301: LD_INT 1
31303: PPUSH
31304: LD_VAR 0 9
31308: PPUSH
31309: CALL_OW 2
31313: ST_TO_ADDR
31314: GO 31345
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31316: LD_ADDR_VAR 0 19
31320: PUSH
31321: LD_VAR 0 19
31325: PPUSH
31326: LD_VAR 0 19
31330: PUSH
31331: LD_INT 1
31333: PLUS
31334: PPUSH
31335: LD_VAR 0 9
31339: PPUSH
31340: CALL_OW 2
31344: ST_TO_ADDR
31345: GO 31273
31347: POP
31348: POP
// if tmp then
31349: LD_VAR 0 19
31353: IFFALSE 31365
// f := tmp ;
31355: LD_ADDR_VAR 0 12
31359: PUSH
31360: LD_VAR 0 19
31364: ST_TO_ADDR
// end ; x := personel [ i ] ;
31365: LD_ADDR_VAR 0 13
31369: PUSH
31370: LD_VAR 0 6
31374: PUSH
31375: LD_VAR 0 8
31379: ARRAY
31380: ST_TO_ADDR
// if x = - 1 then
31381: LD_VAR 0 13
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: EQUAL
31390: IFFALSE 31599
// begin for j in f do
31392: LD_ADDR_VAR 0 9
31396: PUSH
31397: LD_VAR 0 12
31401: PUSH
31402: FOR_IN
31403: IFFALSE 31595
// repeat InitHc ;
31405: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31409: LD_VAR 0 9
31413: PPUSH
31414: CALL_OW 266
31418: PUSH
31419: LD_INT 5
31421: EQUAL
31422: IFFALSE 31492
// begin if UnitsInside ( j ) < 3 then
31424: LD_VAR 0 9
31428: PPUSH
31429: CALL_OW 313
31433: PUSH
31434: LD_INT 3
31436: LESS
31437: IFFALSE 31473
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31439: LD_INT 0
31441: PPUSH
31442: LD_INT 5
31444: PUSH
31445: LD_INT 8
31447: PUSH
31448: LD_INT 9
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: LIST
31455: PUSH
31456: LD_VAR 0 17
31460: ARRAY
31461: PPUSH
31462: LD_VAR 0 4
31466: PPUSH
31467: CALL_OW 380
31471: GO 31490
// PrepareHuman ( false , i , skill ) ;
31473: LD_INT 0
31475: PPUSH
31476: LD_VAR 0 8
31480: PPUSH
31481: LD_VAR 0 4
31485: PPUSH
31486: CALL_OW 380
// end else
31490: GO 31509
// PrepareHuman ( false , i , skill ) ;
31492: LD_INT 0
31494: PPUSH
31495: LD_VAR 0 8
31499: PPUSH
31500: LD_VAR 0 4
31504: PPUSH
31505: CALL_OW 380
// un := CreateHuman ;
31509: LD_ADDR_VAR 0 14
31513: PUSH
31514: CALL_OW 44
31518: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31519: LD_ADDR_VAR 0 7
31523: PUSH
31524: LD_VAR 0 7
31528: PPUSH
31529: LD_INT 1
31531: PPUSH
31532: LD_VAR 0 14
31536: PPUSH
31537: CALL_OW 2
31541: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31542: LD_VAR 0 14
31546: PPUSH
31547: LD_VAR 0 9
31551: PPUSH
31552: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31556: LD_VAR 0 9
31560: PPUSH
31561: CALL_OW 313
31565: PUSH
31566: LD_INT 6
31568: EQUAL
31569: PUSH
31570: LD_VAR 0 9
31574: PPUSH
31575: CALL_OW 266
31579: PUSH
31580: LD_INT 32
31582: PUSH
31583: LD_INT 31
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: IN
31590: OR
31591: IFFALSE 31405
31593: GO 31402
31595: POP
31596: POP
// end else
31597: GO 31979
// for j = 1 to x do
31599: LD_ADDR_VAR 0 9
31603: PUSH
31604: DOUBLE
31605: LD_INT 1
31607: DEC
31608: ST_TO_ADDR
31609: LD_VAR 0 13
31613: PUSH
31614: FOR_TO
31615: IFFALSE 31977
// begin InitHc ;
31617: CALL_OW 19
// if not f then
31621: LD_VAR 0 12
31625: NOT
31626: IFFALSE 31715
// begin PrepareHuman ( false , i , skill ) ;
31628: LD_INT 0
31630: PPUSH
31631: LD_VAR 0 8
31635: PPUSH
31636: LD_VAR 0 4
31640: PPUSH
31641: CALL_OW 380
// un := CreateHuman ;
31645: LD_ADDR_VAR 0 14
31649: PUSH
31650: CALL_OW 44
31654: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31655: LD_ADDR_VAR 0 7
31659: PUSH
31660: LD_VAR 0 7
31664: PPUSH
31665: LD_INT 1
31667: PPUSH
31668: LD_VAR 0 14
31672: PPUSH
31673: CALL_OW 2
31677: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31678: LD_VAR 0 14
31682: PPUSH
31683: LD_VAR 0 1
31687: PPUSH
31688: CALL_OW 250
31692: PPUSH
31693: LD_VAR 0 1
31697: PPUSH
31698: CALL_OW 251
31702: PPUSH
31703: LD_INT 10
31705: PPUSH
31706: LD_INT 0
31708: PPUSH
31709: CALL_OW 50
// continue ;
31713: GO 31614
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31715: LD_VAR 0 12
31719: PUSH
31720: LD_INT 1
31722: ARRAY
31723: PPUSH
31724: CALL_OW 313
31728: PUSH
31729: LD_VAR 0 12
31733: PUSH
31734: LD_INT 1
31736: ARRAY
31737: PPUSH
31738: CALL_OW 266
31742: PUSH
31743: LD_INT 32
31745: PUSH
31746: LD_INT 31
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: IN
31753: AND
31754: PUSH
31755: LD_VAR 0 12
31759: PUSH
31760: LD_INT 1
31762: ARRAY
31763: PPUSH
31764: CALL_OW 313
31768: PUSH
31769: LD_INT 6
31771: EQUAL
31772: OR
31773: IFFALSE 31793
// f := Delete ( f , 1 ) ;
31775: LD_ADDR_VAR 0 12
31779: PUSH
31780: LD_VAR 0 12
31784: PPUSH
31785: LD_INT 1
31787: PPUSH
31788: CALL_OW 3
31792: ST_TO_ADDR
// if not f then
31793: LD_VAR 0 12
31797: NOT
31798: IFFALSE 31816
// begin x := x + 2 ;
31800: LD_ADDR_VAR 0 13
31804: PUSH
31805: LD_VAR 0 13
31809: PUSH
31810: LD_INT 2
31812: PLUS
31813: ST_TO_ADDR
// continue ;
31814: GO 31614
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31816: LD_VAR 0 12
31820: PUSH
31821: LD_INT 1
31823: ARRAY
31824: PPUSH
31825: CALL_OW 266
31829: PUSH
31830: LD_INT 5
31832: EQUAL
31833: IFFALSE 31907
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31835: LD_VAR 0 12
31839: PUSH
31840: LD_INT 1
31842: ARRAY
31843: PPUSH
31844: CALL_OW 313
31848: PUSH
31849: LD_INT 3
31851: LESS
31852: IFFALSE 31888
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31854: LD_INT 0
31856: PPUSH
31857: LD_INT 5
31859: PUSH
31860: LD_INT 8
31862: PUSH
31863: LD_INT 9
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: LIST
31870: PUSH
31871: LD_VAR 0 17
31875: ARRAY
31876: PPUSH
31877: LD_VAR 0 4
31881: PPUSH
31882: CALL_OW 380
31886: GO 31905
// PrepareHuman ( false , i , skill ) ;
31888: LD_INT 0
31890: PPUSH
31891: LD_VAR 0 8
31895: PPUSH
31896: LD_VAR 0 4
31900: PPUSH
31901: CALL_OW 380
// end else
31905: GO 31924
// PrepareHuman ( false , i , skill ) ;
31907: LD_INT 0
31909: PPUSH
31910: LD_VAR 0 8
31914: PPUSH
31915: LD_VAR 0 4
31919: PPUSH
31920: CALL_OW 380
// un := CreateHuman ;
31924: LD_ADDR_VAR 0 14
31928: PUSH
31929: CALL_OW 44
31933: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31934: LD_ADDR_VAR 0 7
31938: PUSH
31939: LD_VAR 0 7
31943: PPUSH
31944: LD_INT 1
31946: PPUSH
31947: LD_VAR 0 14
31951: PPUSH
31952: CALL_OW 2
31956: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31957: LD_VAR 0 14
31961: PPUSH
31962: LD_VAR 0 12
31966: PUSH
31967: LD_INT 1
31969: ARRAY
31970: PPUSH
31971: CALL_OW 52
// end ;
31975: GO 31614
31977: POP
31978: POP
// end ;
31979: GO 30916
31981: POP
31982: POP
// result := result ^ buildings ;
31983: LD_ADDR_VAR 0 7
31987: PUSH
31988: LD_VAR 0 7
31992: PUSH
31993: LD_VAR 0 18
31997: ADD
31998: ST_TO_ADDR
// end else
31999: GO 32142
// begin for i = 1 to personel do
32001: LD_ADDR_VAR 0 8
32005: PUSH
32006: DOUBLE
32007: LD_INT 1
32009: DEC
32010: ST_TO_ADDR
32011: LD_VAR 0 6
32015: PUSH
32016: FOR_TO
32017: IFFALSE 32140
// begin if i > 4 then
32019: LD_VAR 0 8
32023: PUSH
32024: LD_INT 4
32026: GREATER
32027: IFFALSE 32031
// break ;
32029: GO 32140
// x := personel [ i ] ;
32031: LD_ADDR_VAR 0 13
32035: PUSH
32036: LD_VAR 0 6
32040: PUSH
32041: LD_VAR 0 8
32045: ARRAY
32046: ST_TO_ADDR
// if x = - 1 then
32047: LD_VAR 0 13
32051: PUSH
32052: LD_INT 1
32054: NEG
32055: EQUAL
32056: IFFALSE 32060
// continue ;
32058: GO 32016
// PrepareHuman ( false , i , skill ) ;
32060: LD_INT 0
32062: PPUSH
32063: LD_VAR 0 8
32067: PPUSH
32068: LD_VAR 0 4
32072: PPUSH
32073: CALL_OW 380
// un := CreateHuman ;
32077: LD_ADDR_VAR 0 14
32081: PUSH
32082: CALL_OW 44
32086: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32087: LD_VAR 0 14
32091: PPUSH
32092: LD_VAR 0 1
32096: PPUSH
32097: CALL_OW 250
32101: PPUSH
32102: LD_VAR 0 1
32106: PPUSH
32107: CALL_OW 251
32111: PPUSH
32112: LD_INT 10
32114: PPUSH
32115: LD_INT 0
32117: PPUSH
32118: CALL_OW 50
// result := result ^ un ;
32122: LD_ADDR_VAR 0 7
32126: PUSH
32127: LD_VAR 0 7
32131: PUSH
32132: LD_VAR 0 14
32136: ADD
32137: ST_TO_ADDR
// end ;
32138: GO 32016
32140: POP
32141: POP
// end ; end ;
32142: LD_VAR 0 7
32146: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32147: LD_INT 0
32149: PPUSH
32150: PPUSH
32151: PPUSH
32152: PPUSH
32153: PPUSH
32154: PPUSH
32155: PPUSH
32156: PPUSH
32157: PPUSH
32158: PPUSH
32159: PPUSH
32160: PPUSH
32161: PPUSH
32162: PPUSH
32163: PPUSH
32164: PPUSH
// result := false ;
32165: LD_ADDR_VAR 0 3
32169: PUSH
32170: LD_INT 0
32172: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32173: LD_VAR 0 1
32177: NOT
32178: PUSH
32179: LD_VAR 0 1
32183: PPUSH
32184: CALL_OW 266
32188: PUSH
32189: LD_INT 32
32191: PUSH
32192: LD_INT 33
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: IN
32199: NOT
32200: OR
32201: IFFALSE 32205
// exit ;
32203: GO 33341
// nat := GetNation ( tower ) ;
32205: LD_ADDR_VAR 0 12
32209: PUSH
32210: LD_VAR 0 1
32214: PPUSH
32215: CALL_OW 248
32219: ST_TO_ADDR
// side := GetSide ( tower ) ;
32220: LD_ADDR_VAR 0 16
32224: PUSH
32225: LD_VAR 0 1
32229: PPUSH
32230: CALL_OW 255
32234: ST_TO_ADDR
// x := GetX ( tower ) ;
32235: LD_ADDR_VAR 0 10
32239: PUSH
32240: LD_VAR 0 1
32244: PPUSH
32245: CALL_OW 250
32249: ST_TO_ADDR
// y := GetY ( tower ) ;
32250: LD_ADDR_VAR 0 11
32254: PUSH
32255: LD_VAR 0 1
32259: PPUSH
32260: CALL_OW 251
32264: ST_TO_ADDR
// if not x or not y then
32265: LD_VAR 0 10
32269: NOT
32270: PUSH
32271: LD_VAR 0 11
32275: NOT
32276: OR
32277: IFFALSE 32281
// exit ;
32279: GO 33341
// weapon := 0 ;
32281: LD_ADDR_VAR 0 18
32285: PUSH
32286: LD_INT 0
32288: ST_TO_ADDR
// fac_list := [ ] ;
32289: LD_ADDR_VAR 0 17
32293: PUSH
32294: EMPTY
32295: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
32296: LD_ADDR_VAR 0 6
32300: PUSH
32301: LD_VAR 0 1
32305: PPUSH
32306: CALL_OW 274
32310: PPUSH
32311: LD_VAR 0 2
32315: PPUSH
32316: CALL 29919 0 2
32320: PPUSH
32321: LD_INT 30
32323: PUSH
32324: LD_INT 3
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PPUSH
32331: CALL_OW 72
32335: ST_TO_ADDR
// if not factories then
32336: LD_VAR 0 6
32340: NOT
32341: IFFALSE 32345
// exit ;
32343: GO 33341
// for i in factories do
32345: LD_ADDR_VAR 0 8
32349: PUSH
32350: LD_VAR 0 6
32354: PUSH
32355: FOR_IN
32356: IFFALSE 32381
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32358: LD_ADDR_VAR 0 17
32362: PUSH
32363: LD_VAR 0 17
32367: PUSH
32368: LD_VAR 0 8
32372: PPUSH
32373: CALL_OW 478
32377: UNION
32378: ST_TO_ADDR
32379: GO 32355
32381: POP
32382: POP
// if not fac_list then
32383: LD_VAR 0 17
32387: NOT
32388: IFFALSE 32392
// exit ;
32390: GO 33341
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32392: LD_ADDR_VAR 0 5
32396: PUSH
32397: LD_INT 4
32399: PUSH
32400: LD_INT 5
32402: PUSH
32403: LD_INT 9
32405: PUSH
32406: LD_INT 10
32408: PUSH
32409: LD_INT 6
32411: PUSH
32412: LD_INT 7
32414: PUSH
32415: LD_INT 11
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 27
32429: PUSH
32430: LD_INT 28
32432: PUSH
32433: LD_INT 26
32435: PUSH
32436: LD_INT 30
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 43
32447: PUSH
32448: LD_INT 44
32450: PUSH
32451: LD_INT 46
32453: PUSH
32454: LD_INT 45
32456: PUSH
32457: LD_INT 47
32459: PUSH
32460: LD_INT 49
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: LIST
32475: PUSH
32476: LD_VAR 0 12
32480: ARRAY
32481: ST_TO_ADDR
// for i in list do
32482: LD_ADDR_VAR 0 8
32486: PUSH
32487: LD_VAR 0 5
32491: PUSH
32492: FOR_IN
32493: IFFALSE 32526
// if not i in fac_list then
32495: LD_VAR 0 8
32499: PUSH
32500: LD_VAR 0 17
32504: IN
32505: NOT
32506: IFFALSE 32524
// list := list diff i ;
32508: LD_ADDR_VAR 0 5
32512: PUSH
32513: LD_VAR 0 5
32517: PUSH
32518: LD_VAR 0 8
32522: DIFF
32523: ST_TO_ADDR
32524: GO 32492
32526: POP
32527: POP
// if not list then
32528: LD_VAR 0 5
32532: NOT
32533: IFFALSE 32537
// exit ;
32535: GO 33341
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32537: LD_VAR 0 12
32541: PUSH
32542: LD_INT 3
32544: EQUAL
32545: PUSH
32546: LD_INT 49
32548: PUSH
32549: LD_VAR 0 5
32553: IN
32554: AND
32555: PUSH
32556: LD_INT 31
32558: PPUSH
32559: LD_VAR 0 16
32563: PPUSH
32564: CALL_OW 321
32568: PUSH
32569: LD_INT 2
32571: EQUAL
32572: AND
32573: IFFALSE 32633
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32575: LD_INT 22
32577: PUSH
32578: LD_VAR 0 16
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 35
32589: PUSH
32590: LD_INT 49
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 91
32599: PUSH
32600: LD_VAR 0 1
32604: PUSH
32605: LD_INT 10
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: LIST
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: PPUSH
32618: CALL_OW 69
32622: NOT
32623: IFFALSE 32633
// weapon := ru_time_lapser ;
32625: LD_ADDR_VAR 0 18
32629: PUSH
32630: LD_INT 49
32632: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32633: LD_VAR 0 12
32637: PUSH
32638: LD_INT 1
32640: PUSH
32641: LD_INT 2
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: IN
32648: PUSH
32649: LD_INT 11
32651: PUSH
32652: LD_VAR 0 5
32656: IN
32657: PUSH
32658: LD_INT 30
32660: PUSH
32661: LD_VAR 0 5
32665: IN
32666: OR
32667: AND
32668: PUSH
32669: LD_INT 6
32671: PPUSH
32672: LD_VAR 0 16
32676: PPUSH
32677: CALL_OW 321
32681: PUSH
32682: LD_INT 2
32684: EQUAL
32685: AND
32686: IFFALSE 32851
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32688: LD_INT 22
32690: PUSH
32691: LD_VAR 0 16
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 2
32702: PUSH
32703: LD_INT 35
32705: PUSH
32706: LD_INT 11
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 35
32715: PUSH
32716: LD_INT 30
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 91
32730: PUSH
32731: LD_VAR 0 1
32735: PUSH
32736: LD_INT 18
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: LIST
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: LIST
32748: PPUSH
32749: CALL_OW 69
32753: NOT
32754: PUSH
32755: LD_INT 22
32757: PUSH
32758: LD_VAR 0 16
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: LD_INT 30
32772: PUSH
32773: LD_INT 32
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 30
32782: PUSH
32783: LD_INT 33
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 91
32797: PUSH
32798: LD_VAR 0 1
32802: PUSH
32803: LD_INT 12
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: LIST
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: PUSH
32816: EMPTY
32817: LIST
32818: PPUSH
32819: CALL_OW 69
32823: PUSH
32824: LD_INT 2
32826: GREATER
32827: AND
32828: IFFALSE 32851
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32830: LD_ADDR_VAR 0 18
32834: PUSH
32835: LD_INT 11
32837: PUSH
32838: LD_INT 30
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_VAR 0 12
32849: ARRAY
32850: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32851: LD_VAR 0 18
32855: NOT
32856: PUSH
32857: LD_INT 40
32859: PPUSH
32860: LD_VAR 0 16
32864: PPUSH
32865: CALL_OW 321
32869: PUSH
32870: LD_INT 2
32872: EQUAL
32873: AND
32874: PUSH
32875: LD_INT 7
32877: PUSH
32878: LD_VAR 0 5
32882: IN
32883: PUSH
32884: LD_INT 28
32886: PUSH
32887: LD_VAR 0 5
32891: IN
32892: OR
32893: PUSH
32894: LD_INT 45
32896: PUSH
32897: LD_VAR 0 5
32901: IN
32902: OR
32903: AND
32904: IFFALSE 33158
// begin hex := GetHexInfo ( x , y ) ;
32906: LD_ADDR_VAR 0 4
32910: PUSH
32911: LD_VAR 0 10
32915: PPUSH
32916: LD_VAR 0 11
32920: PPUSH
32921: CALL_OW 546
32925: ST_TO_ADDR
// if hex [ 1 ] then
32926: LD_VAR 0 4
32930: PUSH
32931: LD_INT 1
32933: ARRAY
32934: IFFALSE 32938
// exit ;
32936: GO 33341
// height := hex [ 2 ] ;
32938: LD_ADDR_VAR 0 15
32942: PUSH
32943: LD_VAR 0 4
32947: PUSH
32948: LD_INT 2
32950: ARRAY
32951: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32952: LD_ADDR_VAR 0 14
32956: PUSH
32957: LD_INT 0
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: LD_INT 3
32965: PUSH
32966: LD_INT 5
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: ST_TO_ADDR
// for i in tmp do
32975: LD_ADDR_VAR 0 8
32979: PUSH
32980: LD_VAR 0 14
32984: PUSH
32985: FOR_IN
32986: IFFALSE 33156
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32988: LD_ADDR_VAR 0 9
32992: PUSH
32993: LD_VAR 0 10
32997: PPUSH
32998: LD_VAR 0 8
33002: PPUSH
33003: LD_INT 5
33005: PPUSH
33006: CALL_OW 272
33010: PUSH
33011: LD_VAR 0 11
33015: PPUSH
33016: LD_VAR 0 8
33020: PPUSH
33021: LD_INT 5
33023: PPUSH
33024: CALL_OW 273
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33033: LD_VAR 0 9
33037: PUSH
33038: LD_INT 1
33040: ARRAY
33041: PPUSH
33042: LD_VAR 0 9
33046: PUSH
33047: LD_INT 2
33049: ARRAY
33050: PPUSH
33051: CALL_OW 488
33055: IFFALSE 33154
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33057: LD_ADDR_VAR 0 4
33061: PUSH
33062: LD_VAR 0 9
33066: PUSH
33067: LD_INT 1
33069: ARRAY
33070: PPUSH
33071: LD_VAR 0 9
33075: PUSH
33076: LD_INT 2
33078: ARRAY
33079: PPUSH
33080: CALL_OW 546
33084: ST_TO_ADDR
// if hex [ 1 ] then
33085: LD_VAR 0 4
33089: PUSH
33090: LD_INT 1
33092: ARRAY
33093: IFFALSE 33097
// continue ;
33095: GO 32985
// h := hex [ 2 ] ;
33097: LD_ADDR_VAR 0 13
33101: PUSH
33102: LD_VAR 0 4
33106: PUSH
33107: LD_INT 2
33109: ARRAY
33110: ST_TO_ADDR
// if h + 7 < height then
33111: LD_VAR 0 13
33115: PUSH
33116: LD_INT 7
33118: PLUS
33119: PUSH
33120: LD_VAR 0 15
33124: LESS
33125: IFFALSE 33154
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33127: LD_ADDR_VAR 0 18
33131: PUSH
33132: LD_INT 7
33134: PUSH
33135: LD_INT 28
33137: PUSH
33138: LD_INT 45
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: LIST
33145: PUSH
33146: LD_VAR 0 12
33150: ARRAY
33151: ST_TO_ADDR
// break ;
33152: GO 33156
// end ; end ; end ;
33154: GO 32985
33156: POP
33157: POP
// end ; if not weapon then
33158: LD_VAR 0 18
33162: NOT
33163: IFFALSE 33223
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33165: LD_ADDR_VAR 0 5
33169: PUSH
33170: LD_VAR 0 5
33174: PUSH
33175: LD_INT 11
33177: PUSH
33178: LD_INT 30
33180: PUSH
33181: LD_INT 49
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: LIST
33188: DIFF
33189: ST_TO_ADDR
// if not list then
33190: LD_VAR 0 5
33194: NOT
33195: IFFALSE 33199
// exit ;
33197: GO 33341
// weapon := list [ rand ( 1 , list ) ] ;
33199: LD_ADDR_VAR 0 18
33203: PUSH
33204: LD_VAR 0 5
33208: PUSH
33209: LD_INT 1
33211: PPUSH
33212: LD_VAR 0 5
33216: PPUSH
33217: CALL_OW 12
33221: ARRAY
33222: ST_TO_ADDR
// end ; if weapon then
33223: LD_VAR 0 18
33227: IFFALSE 33341
// begin tmp := CostOfWeapon ( weapon ) ;
33229: LD_ADDR_VAR 0 14
33233: PUSH
33234: LD_VAR 0 18
33238: PPUSH
33239: CALL_OW 451
33243: ST_TO_ADDR
// j := GetBase ( tower ) ;
33244: LD_ADDR_VAR 0 9
33248: PUSH
33249: LD_VAR 0 1
33253: PPUSH
33254: CALL_OW 274
33258: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33259: LD_VAR 0 9
33263: PPUSH
33264: LD_INT 1
33266: PPUSH
33267: CALL_OW 275
33271: PUSH
33272: LD_VAR 0 14
33276: PUSH
33277: LD_INT 1
33279: ARRAY
33280: GREATEREQUAL
33281: PUSH
33282: LD_VAR 0 9
33286: PPUSH
33287: LD_INT 2
33289: PPUSH
33290: CALL_OW 275
33294: PUSH
33295: LD_VAR 0 14
33299: PUSH
33300: LD_INT 2
33302: ARRAY
33303: GREATEREQUAL
33304: AND
33305: PUSH
33306: LD_VAR 0 9
33310: PPUSH
33311: LD_INT 3
33313: PPUSH
33314: CALL_OW 275
33318: PUSH
33319: LD_VAR 0 14
33323: PUSH
33324: LD_INT 3
33326: ARRAY
33327: GREATEREQUAL
33328: AND
33329: IFFALSE 33341
// result := weapon ;
33331: LD_ADDR_VAR 0 3
33335: PUSH
33336: LD_VAR 0 18
33340: ST_TO_ADDR
// end ; end ;
33341: LD_VAR 0 3
33345: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33346: LD_INT 0
33348: PPUSH
33349: PPUSH
// result := true ;
33350: LD_ADDR_VAR 0 3
33354: PUSH
33355: LD_INT 1
33357: ST_TO_ADDR
// if array1 = array2 then
33358: LD_VAR 0 1
33362: PUSH
33363: LD_VAR 0 2
33367: EQUAL
33368: IFFALSE 33428
// begin for i = 1 to array1 do
33370: LD_ADDR_VAR 0 4
33374: PUSH
33375: DOUBLE
33376: LD_INT 1
33378: DEC
33379: ST_TO_ADDR
33380: LD_VAR 0 1
33384: PUSH
33385: FOR_TO
33386: IFFALSE 33424
// if array1 [ i ] <> array2 [ i ] then
33388: LD_VAR 0 1
33392: PUSH
33393: LD_VAR 0 4
33397: ARRAY
33398: PUSH
33399: LD_VAR 0 2
33403: PUSH
33404: LD_VAR 0 4
33408: ARRAY
33409: NONEQUAL
33410: IFFALSE 33422
// begin result := false ;
33412: LD_ADDR_VAR 0 3
33416: PUSH
33417: LD_INT 0
33419: ST_TO_ADDR
// break ;
33420: GO 33424
// end ;
33422: GO 33385
33424: POP
33425: POP
// end else
33426: GO 33436
// result := false ;
33428: LD_ADDR_VAR 0 3
33432: PUSH
33433: LD_INT 0
33435: ST_TO_ADDR
// end ;
33436: LD_VAR 0 3
33440: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33441: LD_INT 0
33443: PPUSH
33444: PPUSH
33445: PPUSH
// pom := GetBase ( fac ) ;
33446: LD_ADDR_VAR 0 5
33450: PUSH
33451: LD_VAR 0 1
33455: PPUSH
33456: CALL_OW 274
33460: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33461: LD_ADDR_VAR 0 4
33465: PUSH
33466: LD_VAR 0 2
33470: PUSH
33471: LD_INT 1
33473: ARRAY
33474: PPUSH
33475: LD_VAR 0 2
33479: PUSH
33480: LD_INT 2
33482: ARRAY
33483: PPUSH
33484: LD_VAR 0 2
33488: PUSH
33489: LD_INT 3
33491: ARRAY
33492: PPUSH
33493: LD_VAR 0 2
33497: PUSH
33498: LD_INT 4
33500: ARRAY
33501: PPUSH
33502: CALL_OW 449
33506: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33507: LD_ADDR_VAR 0 3
33511: PUSH
33512: LD_VAR 0 5
33516: PPUSH
33517: LD_INT 1
33519: PPUSH
33520: CALL_OW 275
33524: PUSH
33525: LD_VAR 0 4
33529: PUSH
33530: LD_INT 1
33532: ARRAY
33533: GREATEREQUAL
33534: PUSH
33535: LD_VAR 0 5
33539: PPUSH
33540: LD_INT 2
33542: PPUSH
33543: CALL_OW 275
33547: PUSH
33548: LD_VAR 0 4
33552: PUSH
33553: LD_INT 2
33555: ARRAY
33556: GREATEREQUAL
33557: AND
33558: PUSH
33559: LD_VAR 0 5
33563: PPUSH
33564: LD_INT 3
33566: PPUSH
33567: CALL_OW 275
33571: PUSH
33572: LD_VAR 0 4
33576: PUSH
33577: LD_INT 3
33579: ARRAY
33580: GREATEREQUAL
33581: AND
33582: ST_TO_ADDR
// end ;
33583: LD_VAR 0 3
33587: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33588: LD_INT 0
33590: PPUSH
33591: PPUSH
33592: PPUSH
33593: PPUSH
// pom := GetBase ( building ) ;
33594: LD_ADDR_VAR 0 3
33598: PUSH
33599: LD_VAR 0 1
33603: PPUSH
33604: CALL_OW 274
33608: ST_TO_ADDR
// if not pom then
33609: LD_VAR 0 3
33613: NOT
33614: IFFALSE 33618
// exit ;
33616: GO 33788
// btype := GetBType ( building ) ;
33618: LD_ADDR_VAR 0 5
33622: PUSH
33623: LD_VAR 0 1
33627: PPUSH
33628: CALL_OW 266
33632: ST_TO_ADDR
// if btype = b_armoury then
33633: LD_VAR 0 5
33637: PUSH
33638: LD_INT 4
33640: EQUAL
33641: IFFALSE 33651
// btype := b_barracks ;
33643: LD_ADDR_VAR 0 5
33647: PUSH
33648: LD_INT 5
33650: ST_TO_ADDR
// if btype = b_depot then
33651: LD_VAR 0 5
33655: PUSH
33656: LD_INT 0
33658: EQUAL
33659: IFFALSE 33669
// btype := b_warehouse ;
33661: LD_ADDR_VAR 0 5
33665: PUSH
33666: LD_INT 1
33668: ST_TO_ADDR
// if btype = b_workshop then
33669: LD_VAR 0 5
33673: PUSH
33674: LD_INT 2
33676: EQUAL
33677: IFFALSE 33687
// btype := b_factory ;
33679: LD_ADDR_VAR 0 5
33683: PUSH
33684: LD_INT 3
33686: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33687: LD_ADDR_VAR 0 4
33691: PUSH
33692: LD_VAR 0 5
33696: PPUSH
33697: LD_VAR 0 1
33701: PPUSH
33702: CALL_OW 248
33706: PPUSH
33707: CALL_OW 450
33711: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33712: LD_ADDR_VAR 0 2
33716: PUSH
33717: LD_VAR 0 3
33721: PPUSH
33722: LD_INT 1
33724: PPUSH
33725: CALL_OW 275
33729: PUSH
33730: LD_VAR 0 4
33734: PUSH
33735: LD_INT 1
33737: ARRAY
33738: GREATEREQUAL
33739: PUSH
33740: LD_VAR 0 3
33744: PPUSH
33745: LD_INT 2
33747: PPUSH
33748: CALL_OW 275
33752: PUSH
33753: LD_VAR 0 4
33757: PUSH
33758: LD_INT 2
33760: ARRAY
33761: GREATEREQUAL
33762: AND
33763: PUSH
33764: LD_VAR 0 3
33768: PPUSH
33769: LD_INT 3
33771: PPUSH
33772: CALL_OW 275
33776: PUSH
33777: LD_VAR 0 4
33781: PUSH
33782: LD_INT 3
33784: ARRAY
33785: GREATEREQUAL
33786: AND
33787: ST_TO_ADDR
// end ;
33788: LD_VAR 0 2
33792: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33793: LD_INT 0
33795: PPUSH
33796: PPUSH
33797: PPUSH
// pom := GetBase ( building ) ;
33798: LD_ADDR_VAR 0 4
33802: PUSH
33803: LD_VAR 0 1
33807: PPUSH
33808: CALL_OW 274
33812: ST_TO_ADDR
// if not pom then
33813: LD_VAR 0 4
33817: NOT
33818: IFFALSE 33822
// exit ;
33820: GO 33923
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33822: LD_ADDR_VAR 0 5
33826: PUSH
33827: LD_VAR 0 2
33831: PPUSH
33832: LD_VAR 0 1
33836: PPUSH
33837: CALL_OW 248
33841: PPUSH
33842: CALL_OW 450
33846: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33847: LD_ADDR_VAR 0 3
33851: PUSH
33852: LD_VAR 0 4
33856: PPUSH
33857: LD_INT 1
33859: PPUSH
33860: CALL_OW 275
33864: PUSH
33865: LD_VAR 0 5
33869: PUSH
33870: LD_INT 1
33872: ARRAY
33873: GREATEREQUAL
33874: PUSH
33875: LD_VAR 0 4
33879: PPUSH
33880: LD_INT 2
33882: PPUSH
33883: CALL_OW 275
33887: PUSH
33888: LD_VAR 0 5
33892: PUSH
33893: LD_INT 2
33895: ARRAY
33896: GREATEREQUAL
33897: AND
33898: PUSH
33899: LD_VAR 0 4
33903: PPUSH
33904: LD_INT 3
33906: PPUSH
33907: CALL_OW 275
33911: PUSH
33912: LD_VAR 0 5
33916: PUSH
33917: LD_INT 3
33919: ARRAY
33920: GREATEREQUAL
33921: AND
33922: ST_TO_ADDR
// end ;
33923: LD_VAR 0 3
33927: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33928: LD_INT 0
33930: PPUSH
33931: PPUSH
33932: PPUSH
33933: PPUSH
33934: PPUSH
33935: PPUSH
33936: PPUSH
33937: PPUSH
33938: PPUSH
33939: PPUSH
// result := false ;
33940: LD_ADDR_VAR 0 6
33944: PUSH
33945: LD_INT 0
33947: ST_TO_ADDR
// if not base or not btype or not x or not y then
33948: LD_VAR 0 1
33952: NOT
33953: PUSH
33954: LD_VAR 0 2
33958: NOT
33959: OR
33960: PUSH
33961: LD_VAR 0 3
33965: NOT
33966: OR
33967: PUSH
33968: LD_VAR 0 4
33972: NOT
33973: OR
33974: IFFALSE 33978
// exit ;
33976: GO 34587
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33978: LD_ADDR_VAR 0 12
33982: PUSH
33983: LD_VAR 0 2
33987: PPUSH
33988: LD_VAR 0 3
33992: PPUSH
33993: LD_VAR 0 4
33997: PPUSH
33998: LD_VAR 0 5
34002: PPUSH
34003: LD_VAR 0 1
34007: PUSH
34008: LD_INT 1
34010: ARRAY
34011: PPUSH
34012: CALL_OW 248
34016: PPUSH
34017: LD_INT 0
34019: PPUSH
34020: CALL 35424 0 6
34024: ST_TO_ADDR
// if not hexes then
34025: LD_VAR 0 12
34029: NOT
34030: IFFALSE 34034
// exit ;
34032: GO 34587
// for i = 1 to hexes do
34034: LD_ADDR_VAR 0 7
34038: PUSH
34039: DOUBLE
34040: LD_INT 1
34042: DEC
34043: ST_TO_ADDR
34044: LD_VAR 0 12
34048: PUSH
34049: FOR_TO
34050: IFFALSE 34585
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34052: LD_ADDR_VAR 0 11
34056: PUSH
34057: LD_VAR 0 12
34061: PUSH
34062: LD_VAR 0 7
34066: ARRAY
34067: PUSH
34068: LD_INT 1
34070: ARRAY
34071: PPUSH
34072: LD_VAR 0 12
34076: PUSH
34077: LD_VAR 0 7
34081: ARRAY
34082: PUSH
34083: LD_INT 2
34085: ARRAY
34086: PPUSH
34087: CALL_OW 428
34091: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34092: LD_VAR 0 12
34096: PUSH
34097: LD_VAR 0 7
34101: ARRAY
34102: PUSH
34103: LD_INT 1
34105: ARRAY
34106: PPUSH
34107: LD_VAR 0 12
34111: PUSH
34112: LD_VAR 0 7
34116: ARRAY
34117: PUSH
34118: LD_INT 2
34120: ARRAY
34121: PPUSH
34122: CALL_OW 351
34126: PUSH
34127: LD_VAR 0 12
34131: PUSH
34132: LD_VAR 0 7
34136: ARRAY
34137: PUSH
34138: LD_INT 1
34140: ARRAY
34141: PPUSH
34142: LD_VAR 0 12
34146: PUSH
34147: LD_VAR 0 7
34151: ARRAY
34152: PUSH
34153: LD_INT 2
34155: ARRAY
34156: PPUSH
34157: CALL_OW 488
34161: NOT
34162: OR
34163: PUSH
34164: LD_VAR 0 11
34168: PPUSH
34169: CALL_OW 247
34173: PUSH
34174: LD_INT 3
34176: EQUAL
34177: OR
34178: IFFALSE 34184
// exit ;
34180: POP
34181: POP
34182: GO 34587
// if not tmp or not tmp in base then
34184: LD_VAR 0 11
34188: NOT
34189: PUSH
34190: LD_VAR 0 11
34194: PUSH
34195: LD_VAR 0 1
34199: IN
34200: NOT
34201: OR
34202: IFFALSE 34206
// continue ;
34204: GO 34049
// result := true ;
34206: LD_ADDR_VAR 0 6
34210: PUSH
34211: LD_INT 1
34213: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34214: LD_ADDR_VAR 0 15
34218: PUSH
34219: LD_VAR 0 1
34223: PPUSH
34224: LD_INT 22
34226: PUSH
34227: LD_VAR 0 11
34231: PPUSH
34232: CALL_OW 255
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 2
34243: PUSH
34244: LD_INT 30
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 30
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: LIST
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PPUSH
34273: CALL_OW 72
34277: ST_TO_ADDR
// if dep then
34278: LD_VAR 0 15
34282: IFFALSE 34418
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34284: LD_ADDR_VAR 0 14
34288: PUSH
34289: LD_VAR 0 15
34293: PUSH
34294: LD_INT 1
34296: ARRAY
34297: PPUSH
34298: CALL_OW 250
34302: PPUSH
34303: LD_VAR 0 15
34307: PUSH
34308: LD_INT 1
34310: ARRAY
34311: PPUSH
34312: CALL_OW 254
34316: PPUSH
34317: LD_INT 5
34319: PPUSH
34320: CALL_OW 272
34324: PUSH
34325: LD_VAR 0 15
34329: PUSH
34330: LD_INT 1
34332: ARRAY
34333: PPUSH
34334: CALL_OW 251
34338: PPUSH
34339: LD_VAR 0 15
34343: PUSH
34344: LD_INT 1
34346: ARRAY
34347: PPUSH
34348: CALL_OW 254
34352: PPUSH
34353: LD_INT 5
34355: PPUSH
34356: CALL_OW 273
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34365: LD_VAR 0 14
34369: PUSH
34370: LD_INT 1
34372: ARRAY
34373: PPUSH
34374: LD_VAR 0 14
34378: PUSH
34379: LD_INT 2
34381: ARRAY
34382: PPUSH
34383: CALL_OW 488
34387: IFFALSE 34418
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34389: LD_VAR 0 11
34393: PPUSH
34394: LD_VAR 0 14
34398: PUSH
34399: LD_INT 1
34401: ARRAY
34402: PPUSH
34403: LD_VAR 0 14
34407: PUSH
34408: LD_INT 2
34410: ARRAY
34411: PPUSH
34412: CALL_OW 111
// continue ;
34416: GO 34049
// end ; end ; r := GetDir ( tmp ) ;
34418: LD_ADDR_VAR 0 13
34422: PUSH
34423: LD_VAR 0 11
34427: PPUSH
34428: CALL_OW 254
34432: ST_TO_ADDR
// if r = 5 then
34433: LD_VAR 0 13
34437: PUSH
34438: LD_INT 5
34440: EQUAL
34441: IFFALSE 34451
// r := 0 ;
34443: LD_ADDR_VAR 0 13
34447: PUSH
34448: LD_INT 0
34450: ST_TO_ADDR
// for j = r to 5 do
34451: LD_ADDR_VAR 0 8
34455: PUSH
34456: DOUBLE
34457: LD_VAR 0 13
34461: DEC
34462: ST_TO_ADDR
34463: LD_INT 5
34465: PUSH
34466: FOR_TO
34467: IFFALSE 34581
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34469: LD_ADDR_VAR 0 9
34473: PUSH
34474: LD_VAR 0 11
34478: PPUSH
34479: CALL_OW 250
34483: PPUSH
34484: LD_VAR 0 8
34488: PPUSH
34489: LD_INT 2
34491: PPUSH
34492: CALL_OW 272
34496: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34497: LD_ADDR_VAR 0 10
34501: PUSH
34502: LD_VAR 0 11
34506: PPUSH
34507: CALL_OW 251
34511: PPUSH
34512: LD_VAR 0 8
34516: PPUSH
34517: LD_INT 2
34519: PPUSH
34520: CALL_OW 273
34524: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34525: LD_VAR 0 9
34529: PPUSH
34530: LD_VAR 0 10
34534: PPUSH
34535: CALL_OW 488
34539: PUSH
34540: LD_VAR 0 9
34544: PPUSH
34545: LD_VAR 0 10
34549: PPUSH
34550: CALL_OW 428
34554: NOT
34555: AND
34556: IFFALSE 34579
// begin ComMoveXY ( tmp , _x , _y ) ;
34558: LD_VAR 0 11
34562: PPUSH
34563: LD_VAR 0 9
34567: PPUSH
34568: LD_VAR 0 10
34572: PPUSH
34573: CALL_OW 111
// break ;
34577: GO 34581
// end ; end ;
34579: GO 34466
34581: POP
34582: POP
// end ;
34583: GO 34049
34585: POP
34586: POP
// end ;
34587: LD_VAR 0 6
34591: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34592: LD_INT 0
34594: PPUSH
34595: PPUSH
34596: PPUSH
34597: PPUSH
34598: PPUSH
34599: PPUSH
34600: PPUSH
34601: PPUSH
34602: PPUSH
34603: PPUSH
// result := false ;
34604: LD_ADDR_VAR 0 6
34608: PUSH
34609: LD_INT 0
34611: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34612: LD_VAR 0 1
34616: NOT
34617: PUSH
34618: LD_VAR 0 1
34622: PPUSH
34623: CALL_OW 266
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: IN
34638: NOT
34639: OR
34640: PUSH
34641: LD_VAR 0 2
34645: NOT
34646: OR
34647: PUSH
34648: LD_VAR 0 5
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: LD_INT 1
34658: PUSH
34659: LD_INT 2
34661: PUSH
34662: LD_INT 3
34664: PUSH
34665: LD_INT 4
34667: PUSH
34668: LD_INT 5
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: IN
34679: NOT
34680: OR
34681: PUSH
34682: LD_VAR 0 3
34686: PPUSH
34687: LD_VAR 0 4
34691: PPUSH
34692: CALL_OW 488
34696: NOT
34697: OR
34698: IFFALSE 34702
// exit ;
34700: GO 35419
// pom := GetBase ( depot ) ;
34702: LD_ADDR_VAR 0 10
34706: PUSH
34707: LD_VAR 0 1
34711: PPUSH
34712: CALL_OW 274
34716: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34717: LD_ADDR_VAR 0 11
34721: PUSH
34722: LD_VAR 0 2
34726: PPUSH
34727: LD_VAR 0 1
34731: PPUSH
34732: CALL_OW 248
34736: PPUSH
34737: CALL_OW 450
34741: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34742: LD_VAR 0 10
34746: PPUSH
34747: LD_INT 1
34749: PPUSH
34750: CALL_OW 275
34754: PUSH
34755: LD_VAR 0 11
34759: PUSH
34760: LD_INT 1
34762: ARRAY
34763: GREATEREQUAL
34764: PUSH
34765: LD_VAR 0 10
34769: PPUSH
34770: LD_INT 2
34772: PPUSH
34773: CALL_OW 275
34777: PUSH
34778: LD_VAR 0 11
34782: PUSH
34783: LD_INT 2
34785: ARRAY
34786: GREATEREQUAL
34787: AND
34788: PUSH
34789: LD_VAR 0 10
34793: PPUSH
34794: LD_INT 3
34796: PPUSH
34797: CALL_OW 275
34801: PUSH
34802: LD_VAR 0 11
34806: PUSH
34807: LD_INT 3
34809: ARRAY
34810: GREATEREQUAL
34811: AND
34812: NOT
34813: IFFALSE 34817
// exit ;
34815: GO 35419
// if GetBType ( depot ) = b_depot then
34817: LD_VAR 0 1
34821: PPUSH
34822: CALL_OW 266
34826: PUSH
34827: LD_INT 0
34829: EQUAL
34830: IFFALSE 34842
// dist := 28 else
34832: LD_ADDR_VAR 0 14
34836: PUSH
34837: LD_INT 28
34839: ST_TO_ADDR
34840: GO 34850
// dist := 36 ;
34842: LD_ADDR_VAR 0 14
34846: PUSH
34847: LD_INT 36
34849: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34850: LD_VAR 0 1
34854: PPUSH
34855: LD_VAR 0 3
34859: PPUSH
34860: LD_VAR 0 4
34864: PPUSH
34865: CALL_OW 297
34869: PUSH
34870: LD_VAR 0 14
34874: GREATER
34875: IFFALSE 34879
// exit ;
34877: GO 35419
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34879: LD_ADDR_VAR 0 12
34883: PUSH
34884: LD_VAR 0 2
34888: PPUSH
34889: LD_VAR 0 3
34893: PPUSH
34894: LD_VAR 0 4
34898: PPUSH
34899: LD_VAR 0 5
34903: PPUSH
34904: LD_VAR 0 1
34908: PPUSH
34909: CALL_OW 248
34913: PPUSH
34914: LD_INT 0
34916: PPUSH
34917: CALL 35424 0 6
34921: ST_TO_ADDR
// if not hexes then
34922: LD_VAR 0 12
34926: NOT
34927: IFFALSE 34931
// exit ;
34929: GO 35419
// hex := GetHexInfo ( x , y ) ;
34931: LD_ADDR_VAR 0 15
34935: PUSH
34936: LD_VAR 0 3
34940: PPUSH
34941: LD_VAR 0 4
34945: PPUSH
34946: CALL_OW 546
34950: ST_TO_ADDR
// if hex [ 1 ] then
34951: LD_VAR 0 15
34955: PUSH
34956: LD_INT 1
34958: ARRAY
34959: IFFALSE 34963
// exit ;
34961: GO 35419
// height := hex [ 2 ] ;
34963: LD_ADDR_VAR 0 13
34967: PUSH
34968: LD_VAR 0 15
34972: PUSH
34973: LD_INT 2
34975: ARRAY
34976: ST_TO_ADDR
// for i = 1 to hexes do
34977: LD_ADDR_VAR 0 7
34981: PUSH
34982: DOUBLE
34983: LD_INT 1
34985: DEC
34986: ST_TO_ADDR
34987: LD_VAR 0 12
34991: PUSH
34992: FOR_TO
34993: IFFALSE 35323
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34995: LD_VAR 0 12
34999: PUSH
35000: LD_VAR 0 7
35004: ARRAY
35005: PUSH
35006: LD_INT 1
35008: ARRAY
35009: PPUSH
35010: LD_VAR 0 12
35014: PUSH
35015: LD_VAR 0 7
35019: ARRAY
35020: PUSH
35021: LD_INT 2
35023: ARRAY
35024: PPUSH
35025: CALL_OW 488
35029: NOT
35030: PUSH
35031: LD_VAR 0 12
35035: PUSH
35036: LD_VAR 0 7
35040: ARRAY
35041: PUSH
35042: LD_INT 1
35044: ARRAY
35045: PPUSH
35046: LD_VAR 0 12
35050: PUSH
35051: LD_VAR 0 7
35055: ARRAY
35056: PUSH
35057: LD_INT 2
35059: ARRAY
35060: PPUSH
35061: CALL_OW 428
35065: PUSH
35066: LD_INT 0
35068: GREATER
35069: OR
35070: PUSH
35071: LD_VAR 0 12
35075: PUSH
35076: LD_VAR 0 7
35080: ARRAY
35081: PUSH
35082: LD_INT 1
35084: ARRAY
35085: PPUSH
35086: LD_VAR 0 12
35090: PUSH
35091: LD_VAR 0 7
35095: ARRAY
35096: PUSH
35097: LD_INT 2
35099: ARRAY
35100: PPUSH
35101: CALL_OW 351
35105: OR
35106: IFFALSE 35112
// exit ;
35108: POP
35109: POP
35110: GO 35419
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35112: LD_ADDR_VAR 0 8
35116: PUSH
35117: LD_VAR 0 12
35121: PUSH
35122: LD_VAR 0 7
35126: ARRAY
35127: PUSH
35128: LD_INT 1
35130: ARRAY
35131: PPUSH
35132: LD_VAR 0 12
35136: PUSH
35137: LD_VAR 0 7
35141: ARRAY
35142: PUSH
35143: LD_INT 2
35145: ARRAY
35146: PPUSH
35147: CALL_OW 546
35151: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35152: LD_VAR 0 8
35156: PUSH
35157: LD_INT 1
35159: ARRAY
35160: PUSH
35161: LD_VAR 0 8
35165: PUSH
35166: LD_INT 2
35168: ARRAY
35169: PUSH
35170: LD_VAR 0 13
35174: PUSH
35175: LD_INT 2
35177: PLUS
35178: GREATER
35179: OR
35180: PUSH
35181: LD_VAR 0 8
35185: PUSH
35186: LD_INT 2
35188: ARRAY
35189: PUSH
35190: LD_VAR 0 13
35194: PUSH
35195: LD_INT 2
35197: MINUS
35198: LESS
35199: OR
35200: PUSH
35201: LD_VAR 0 8
35205: PUSH
35206: LD_INT 3
35208: ARRAY
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: LD_INT 8
35215: PUSH
35216: LD_INT 9
35218: PUSH
35219: LD_INT 10
35221: PUSH
35222: LD_INT 11
35224: PUSH
35225: LD_INT 12
35227: PUSH
35228: LD_INT 13
35230: PUSH
35231: LD_INT 16
35233: PUSH
35234: LD_INT 17
35236: PUSH
35237: LD_INT 18
35239: PUSH
35240: LD_INT 19
35242: PUSH
35243: LD_INT 20
35245: PUSH
35246: LD_INT 21
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: IN
35264: NOT
35265: OR
35266: PUSH
35267: LD_VAR 0 8
35271: PUSH
35272: LD_INT 5
35274: ARRAY
35275: NOT
35276: OR
35277: PUSH
35278: LD_VAR 0 8
35282: PUSH
35283: LD_INT 6
35285: ARRAY
35286: PUSH
35287: LD_INT 1
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: LD_INT 7
35295: PUSH
35296: LD_INT 9
35298: PUSH
35299: LD_INT 10
35301: PUSH
35302: LD_INT 11
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: IN
35313: NOT
35314: OR
35315: IFFALSE 35321
// exit ;
35317: POP
35318: POP
35319: GO 35419
// end ;
35321: GO 34992
35323: POP
35324: POP
// side := GetSide ( depot ) ;
35325: LD_ADDR_VAR 0 9
35329: PUSH
35330: LD_VAR 0 1
35334: PPUSH
35335: CALL_OW 255
35339: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35340: LD_VAR 0 9
35344: PPUSH
35345: LD_VAR 0 3
35349: PPUSH
35350: LD_VAR 0 4
35354: PPUSH
35355: LD_INT 20
35357: PPUSH
35358: CALL 28073 0 4
35362: PUSH
35363: LD_INT 4
35365: ARRAY
35366: IFFALSE 35370
// exit ;
35368: GO 35419
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35370: LD_VAR 0 2
35374: PUSH
35375: LD_INT 29
35377: PUSH
35378: LD_INT 30
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: IN
35385: PUSH
35386: LD_VAR 0 3
35390: PPUSH
35391: LD_VAR 0 4
35395: PPUSH
35396: LD_VAR 0 9
35400: PPUSH
35401: CALL_OW 440
35405: NOT
35406: AND
35407: IFFALSE 35411
// exit ;
35409: GO 35419
// result := true ;
35411: LD_ADDR_VAR 0 6
35415: PUSH
35416: LD_INT 1
35418: ST_TO_ADDR
// end ;
35419: LD_VAR 0 6
35423: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
35424: LD_INT 0
35426: PPUSH
35427: PPUSH
35428: PPUSH
35429: PPUSH
35430: PPUSH
35431: PPUSH
35432: PPUSH
35433: PPUSH
35434: PPUSH
35435: PPUSH
35436: PPUSH
35437: PPUSH
35438: PPUSH
35439: PPUSH
35440: PPUSH
35441: PPUSH
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
35446: PPUSH
35447: PPUSH
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
35458: PPUSH
35459: PPUSH
35460: PPUSH
35461: PPUSH
35462: PPUSH
35463: PPUSH
35464: PPUSH
35465: PPUSH
35466: PPUSH
35467: PPUSH
35468: PPUSH
35469: PPUSH
35470: PPUSH
35471: PPUSH
35472: PPUSH
35473: PPUSH
35474: PPUSH
35475: PPUSH
35476: PPUSH
35477: PPUSH
35478: PPUSH
35479: PPUSH
35480: PPUSH
35481: PPUSH
35482: PPUSH
35483: PPUSH
// result = [ ] ;
35484: LD_ADDR_VAR 0 7
35488: PUSH
35489: EMPTY
35490: ST_TO_ADDR
// temp_list = [ ] ;
35491: LD_ADDR_VAR 0 9
35495: PUSH
35496: EMPTY
35497: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35498: LD_VAR 0 4
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: LD_INT 3
35514: PUSH
35515: LD_INT 4
35517: PUSH
35518: LD_INT 5
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: IN
35529: NOT
35530: PUSH
35531: LD_VAR 0 1
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: IN
35546: PUSH
35547: LD_VAR 0 5
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: LD_INT 3
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: LIST
35565: IN
35566: NOT
35567: AND
35568: OR
35569: IFFALSE 35573
// exit ;
35571: GO 53964
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35573: LD_VAR 0 1
35577: PUSH
35578: LD_INT 6
35580: PUSH
35581: LD_INT 7
35583: PUSH
35584: LD_INT 8
35586: PUSH
35587: LD_INT 13
35589: PUSH
35590: LD_INT 12
35592: PUSH
35593: LD_INT 15
35595: PUSH
35596: LD_INT 11
35598: PUSH
35599: LD_INT 14
35601: PUSH
35602: LD_INT 10
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: IN
35616: IFFALSE 35626
// btype = b_lab ;
35618: LD_ADDR_VAR 0 1
35622: PUSH
35623: LD_INT 6
35625: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35626: LD_VAR 0 6
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: LIST
35644: IN
35645: NOT
35646: PUSH
35647: LD_VAR 0 1
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: LD_INT 2
35660: PUSH
35661: LD_INT 3
35663: PUSH
35664: LD_INT 6
35666: PUSH
35667: LD_INT 36
35669: PUSH
35670: LD_INT 4
35672: PUSH
35673: LD_INT 5
35675: PUSH
35676: LD_INT 31
35678: PUSH
35679: LD_INT 32
35681: PUSH
35682: LD_INT 33
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: IN
35698: NOT
35699: PUSH
35700: LD_VAR 0 6
35704: PUSH
35705: LD_INT 1
35707: EQUAL
35708: AND
35709: OR
35710: PUSH
35711: LD_VAR 0 1
35715: PUSH
35716: LD_INT 2
35718: PUSH
35719: LD_INT 3
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: IN
35726: NOT
35727: PUSH
35728: LD_VAR 0 6
35732: PUSH
35733: LD_INT 2
35735: EQUAL
35736: AND
35737: OR
35738: IFFALSE 35748
// mode = 0 ;
35740: LD_ADDR_VAR 0 6
35744: PUSH
35745: LD_INT 0
35747: ST_TO_ADDR
// case mode of 0 :
35748: LD_VAR 0 6
35752: PUSH
35753: LD_INT 0
35755: DOUBLE
35756: EQUAL
35757: IFTRUE 35761
35759: GO 47214
35761: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35762: LD_ADDR_VAR 0 11
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 1
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: LD_INT 1
35835: NEG
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: LD_INT 2
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: LD_INT 2
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: LD_INT 2
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 3
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 3
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35955: LD_ADDR_VAR 0 12
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 1
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: LD_INT 1
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: LD_INT 1
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: PUSH
36026: LD_INT 1
36028: NEG
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 2
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 2
36078: NEG
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 2
36089: NEG
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 2
36101: NEG
36102: PUSH
36103: LD_INT 1
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 3
36112: NEG
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 3
36123: NEG
36124: PUSH
36125: LD_INT 1
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36151: LD_ADDR_VAR 0 13
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: LD_INT 1
36171: NEG
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: LD_INT 1
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: LD_INT 2
36236: NEG
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 2
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 2
36254: PUSH
36255: LD_INT 2
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: PUSH
36265: LD_INT 2
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 2
36274: NEG
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 2
36286: NEG
36287: PUSH
36288: LD_INT 2
36290: NEG
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 2
36298: NEG
36299: PUSH
36300: LD_INT 3
36302: NEG
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 3
36310: NEG
36311: PUSH
36312: LD_INT 2
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 3
36322: NEG
36323: PUSH
36324: LD_INT 3
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36350: LD_ADDR_VAR 0 14
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 2
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: LD_INT 2
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 1
36496: NEG
36497: PUSH
36498: LD_INT 3
36500: NEG
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: LD_INT 3
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36546: LD_ADDR_VAR 0 15
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: LD_INT 1
36619: NEG
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: LD_INT 1
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 1
36658: NEG
36659: PUSH
36660: LD_INT 1
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 2
36669: NEG
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 2
36680: NEG
36681: PUSH
36682: LD_INT 1
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 3
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 3
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36739: LD_ADDR_VAR 0 16
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: LD_INT 1
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: LD_INT 2
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: LD_INT 1
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 2
36842: PUSH
36843: LD_INT 2
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: LD_INT 2
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 2
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 2
36874: NEG
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 3
36886: PUSH
36887: LD_INT 2
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 3
36896: PUSH
36897: LD_INT 3
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: LD_INT 3
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36932: LD_ADDR_VAR 0 17
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: LD_INT 1
36952: NEG
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 1
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: LD_INT 1
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 1
36990: NEG
36991: PUSH
36992: LD_INT 0
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: LD_INT 1
37005: NEG
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: NEG
37014: PUSH
37015: LD_INT 2
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: LD_INT 2
37028: NEG
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: LD_INT 1
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 2
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 2
37057: PUSH
37058: LD_INT 1
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 2
37067: PUSH
37068: LD_INT 2
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: LD_INT 2
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: LD_INT 2
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 2
37108: NEG
37109: PUSH
37110: LD_INT 0
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: LD_INT 1
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 2
37131: NEG
37132: PUSH
37133: LD_INT 2
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37162: LD_ADDR_VAR 0 18
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: LD_INT 0
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: LD_INT 1
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 1
37200: PUSH
37201: LD_INT 1
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: LD_INT 1
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: LD_INT 1
37235: NEG
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: LD_INT 2
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: LD_INT 2
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 2
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 2
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: LD_INT 2
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: LD_INT 2
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: NEG
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 2
37338: NEG
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 2
37349: NEG
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 2
37361: NEG
37362: PUSH
37363: LD_INT 2
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37392: LD_ADDR_VAR 0 19
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: LD_INT 1
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: LD_INT 1
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: LD_INT 0
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: NEG
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: LD_INT 2
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 0
37485: PUSH
37486: LD_INT 2
37488: NEG
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: LD_INT 1
37499: NEG
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 2
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 2
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: LD_INT 2
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: LD_INT 2
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 0
37547: PUSH
37548: LD_INT 2
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 2
37568: NEG
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 2
37579: NEG
37580: PUSH
37581: LD_INT 1
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 2
37591: NEG
37592: PUSH
37593: LD_INT 2
37595: NEG
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37622: LD_ADDR_VAR 0 20
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: NEG
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 0
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: LD_INT 1
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: LD_INT 0
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 2
37747: PUSH
37748: LD_INT 1
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 2
37757: PUSH
37758: LD_INT 2
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: LD_INT 2
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: LD_INT 2
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 1
37787: NEG
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: NEG
37799: PUSH
37800: LD_INT 0
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 2
37809: NEG
37810: PUSH
37811: LD_INT 1
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 2
37821: NEG
37822: PUSH
37823: LD_INT 2
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37852: LD_ADDR_VAR 0 21
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: LD_INT 1
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 1
37890: PUSH
37891: LD_INT 1
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 1
37910: NEG
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: LD_INT 1
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: NEG
37934: PUSH
37935: LD_INT 2
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: LD_INT 2
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: LD_INT 1
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 2
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: LD_INT 2
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 0
38007: PUSH
38008: LD_INT 2
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: NEG
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 2
38028: NEG
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 2
38039: NEG
38040: PUSH
38041: LD_INT 1
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: NEG
38052: PUSH
38053: LD_INT 2
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38082: LD_ADDR_VAR 0 22
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: LD_INT 0
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: LD_INT 1
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: LD_INT 2
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: LD_INT 2
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 2
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 2
38207: PUSH
38208: LD_INT 1
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 2
38217: PUSH
38218: LD_INT 2
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: LD_INT 2
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: LD_INT 2
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: LD_INT 1
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: LD_INT 0
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 2
38269: NEG
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: NEG
38282: PUSH
38283: LD_INT 2
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38312: LD_ADDR_VAR 0 23
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: LD_INT 1
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: LD_INT 0
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: LD_INT 1
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: LD_INT 2
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: LD_INT 2
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 2
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 2
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: LD_INT 2
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: LD_INT 2
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: LD_INT 2
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 2
38488: NEG
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: LD_INT 1
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 2
38511: NEG
38512: PUSH
38513: LD_INT 2
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 2
38523: NEG
38524: PUSH
38525: LD_INT 3
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 1
38535: NEG
38536: PUSH
38537: LD_INT 3
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: LD_INT 2
38550: NEG
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 2
38558: PUSH
38559: LD_INT 1
38561: NEG
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38592: LD_ADDR_VAR 0 24
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 1
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: LD_INT 1
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: LD_INT 2
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: LD_INT 2
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 1
38757: NEG
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 2
38768: NEG
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 2
38791: NEG
38792: PUSH
38793: LD_INT 2
38795: NEG
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 2
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 3
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 3
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38868: LD_ADDR_VAR 0 25
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 1
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: LD_INT 2
38953: NEG
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: LD_INT 2
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 2
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 2
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 2
39044: NEG
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 2
39055: NEG
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: NEG
39068: PUSH
39069: LD_INT 2
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 3
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 3
39089: PUSH
39090: LD_INT 2
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: PUSH
39100: LD_INT 3
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: LD_INT 3
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39142: LD_ADDR_VAR 0 26
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: LD_INT 1
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: LD_INT 1
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: LD_INT 1
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 1
39223: NEG
39224: PUSH
39225: LD_INT 2
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: LD_INT 2
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 2
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 2
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 2
39277: PUSH
39278: LD_INT 2
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: LD_INT 2
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: NEG
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 2
39329: NEG
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 2
39341: NEG
39342: PUSH
39343: LD_INT 2
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 2
39353: PUSH
39354: LD_INT 3
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: LD_INT 3
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: LD_INT 2
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 2
39384: NEG
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39418: LD_ADDR_VAR 0 27
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: LD_INT 0
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 1
39487: NEG
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: LD_INT 2
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: LD_INT 2
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 2
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 2
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 2
39594: NEG
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 2
39605: NEG
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 2
39617: NEG
39618: PUSH
39619: LD_INT 2
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 3
39651: NEG
39652: PUSH
39653: LD_INT 1
39655: NEG
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 3
39663: NEG
39664: PUSH
39665: LD_INT 2
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39698: LD_ADDR_VAR 0 28
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 0
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 2
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 2
39833: PUSH
39834: LD_INT 2
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: LD_INT 2
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 2
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: NEG
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 2
39885: NEG
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: LD_INT 2
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 2
39909: NEG
39910: PUSH
39911: LD_INT 3
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: LD_INT 3
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 3
39933: NEG
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 3
39945: NEG
39946: PUSH
39947: LD_INT 2
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39980: LD_ADDR_VAR 0 29
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: LD_INT 2
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 2
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 2
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: LD_INT 2
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: LD_INT 2
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: NEG
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 2
40146: NEG
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 2
40158: NEG
40159: PUSH
40160: LD_INT 2
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: NEG
40171: PUSH
40172: LD_INT 3
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 3
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: LD_INT 3
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 3
40224: NEG
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40259: LD_ADDR_VAR 0 30
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: LD_INT 2
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: LD_INT 2
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 2
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 2
40394: PUSH
40395: LD_INT 2
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: LD_INT 2
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 2
40436: NEG
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: LD_INT 3
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: LD_INT 2
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 3
40471: PUSH
40472: LD_INT 2
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: LD_INT 3
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: NEG
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 3
40502: NEG
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40537: LD_ADDR_VAR 0 31
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 1
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: LD_INT 2
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: LD_INT 2
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 2
40702: NEG
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 2
40714: NEG
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 2
40726: NEG
40727: PUSH
40728: LD_INT 3
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 3
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 3
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 3
40780: NEG
40781: PUSH
40782: LD_INT 2
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40815: LD_ADDR_VAR 0 32
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: NEG
40897: PUSH
40898: LD_INT 2
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 2
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 2
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 2
40940: PUSH
40941: LD_INT 2
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 2
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 2
40981: NEG
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: LD_INT 3
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 2
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 3
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: LD_INT 3
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 3
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41093: LD_ADDR_VAR 0 33
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: LD_INT 2
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: NEG
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 2
41259: NEG
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 2
41271: NEG
41272: PUSH
41273: LD_INT 2
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: LD_INT 3
41287: NEG
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 3
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: LD_INT 3
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 3
41337: NEG
41338: PUSH
41339: LD_INT 2
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41372: LD_ADDR_VAR 0 34
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 1
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: NEG
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: LD_INT 2
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 2
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 2
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 2
41497: PUSH
41498: LD_INT 2
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 2
41539: NEG
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 2
41551: NEG
41552: PUSH
41553: LD_INT 2
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: LD_INT 3
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 3
41586: PUSH
41587: LD_INT 2
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: LD_INT 3
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: LD_INT 1
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 3
41617: NEG
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41652: LD_ADDR_VAR 0 35
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41764: LD_ADDR_VAR 0 36
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: LD_INT 2
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: LD_INT 2
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41876: LD_ADDR_VAR 0 37
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41988: LD_ADDR_VAR 0 38
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: LD_INT 1
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 2
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 2
42079: NEG
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42100: LD_ADDR_VAR 0 39
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: LD_INT 2
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42212: LD_ADDR_VAR 0 40
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42324: LD_ADDR_VAR 0 41
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: LD_INT 2
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 2
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 2
42479: NEG
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 2
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 2
42502: NEG
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 2
42514: NEG
42515: PUSH
42516: LD_INT 3
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 3
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 3
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 3
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 3
42567: PUSH
42568: LD_INT 3
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: LD_INT 3
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 2
42587: NEG
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 3
42598: NEG
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 3
42609: NEG
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 3
42621: NEG
42622: PUSH
42623: LD_INT 2
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 3
42633: NEG
42634: PUSH
42635: LD_INT 3
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42674: LD_ADDR_VAR 0 42
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 2
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: LD_INT 2
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: NEG
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: NEG
42853: PUSH
42854: LD_INT 2
42856: NEG
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: LD_INT 3
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: LD_INT 3
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 3
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: LD_INT 2
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 3
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 3
42920: PUSH
42921: LD_INT 3
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: LD_INT 3
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: LD_INT 3
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: LD_INT 3
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 3
42971: NEG
42972: PUSH
42973: LD_INT 2
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 3
42983: NEG
42984: PUSH
42985: LD_INT 3
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43024: LD_ADDR_VAR 0 43
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 2
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 2
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 2
43190: NEG
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 2
43201: NEG
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: LD_INT 3
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: LD_INT 3
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: LD_INT 2
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 2
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 3
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 3
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: LD_INT 3
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: LD_INT 3
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 3
43320: NEG
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 3
43331: NEG
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43372: LD_ADDR_VAR 0 44
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 2
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 2
43527: NEG
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 2
43538: NEG
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 2
43562: NEG
43563: PUSH
43564: LD_INT 3
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 3
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 3
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 3
43605: PUSH
43606: LD_INT 2
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 3
43615: PUSH
43616: LD_INT 3
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: LD_INT 3
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 3
43646: NEG
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 3
43657: NEG
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 3
43669: NEG
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 3
43681: NEG
43682: PUSH
43683: LD_INT 3
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43722: LD_ADDR_VAR 0 45
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 2
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: LD_INT 1
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: LD_INT 2
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: LD_INT 3
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: LD_INT 3
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 3
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 3
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 3
43968: PUSH
43969: LD_INT 3
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 2
43978: PUSH
43979: LD_INT 3
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: LD_INT 3
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: LD_INT 3
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 3
44019: NEG
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 3
44031: NEG
44032: PUSH
44033: LD_INT 3
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44072: LD_ADDR_VAR 0 46
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 2
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: LD_INT 2
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: LD_INT 3
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 3
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: LD_INT 2
44287: NEG
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 3
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 3
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 3
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 3
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 3
44368: NEG
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 3
44379: NEG
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44420: LD_ADDR_VAR 0 47
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: LD_INT 1
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 2
44547: NEG
44548: PUSH
44549: LD_INT 2
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44571: LD_ADDR_VAR 0 48
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: LD_INT 2
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: LD_INT 2
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44718: LD_ADDR_VAR 0 49
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: LD_INT 2
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44862: LD_ADDR_VAR 0 50
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 2
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 2
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: LD_INT 2
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45006: LD_ADDR_VAR 0 51
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45153: LD_ADDR_VAR 0 52
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: NEG
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 2
45280: NEG
45281: PUSH
45282: LD_INT 2
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45304: LD_ADDR_VAR 0 53
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: LD_INT 2
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: LD_INT 2
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 2
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45534: LD_ADDR_VAR 0 54
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 2
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 2
45733: NEG
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45764: LD_ADDR_VAR 0 55
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45994: LD_ADDR_VAR 0 56
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: LD_INT 2
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46224: LD_ADDR_VAR 0 57
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: NEG
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46454: LD_ADDR_VAR 0 58
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46684: LD_ADDR_VAR 0 59
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46772: LD_ADDR_VAR 0 60
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46860: LD_ADDR_VAR 0 61
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46948: LD_ADDR_VAR 0 62
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47036: LD_ADDR_VAR 0 63
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47124: LD_ADDR_VAR 0 64
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: ST_TO_ADDR
// end ; 1 :
47212: GO 53109
47214: LD_INT 1
47216: DOUBLE
47217: EQUAL
47218: IFTRUE 47222
47220: GO 49845
47222: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47223: LD_ADDR_VAR 0 11
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 3
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 3
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: LIST
47266: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47267: LD_ADDR_VAR 0 12
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 3
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 3
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: LIST
47307: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47308: LD_ADDR_VAR 0 13
47312: PUSH
47313: LD_INT 3
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 3
47325: PUSH
47326: LD_INT 3
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: LD_INT 3
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: LIST
47347: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47348: LD_ADDR_VAR 0 14
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 3
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 3
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: LIST
47388: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47389: LD_ADDR_VAR 0 15
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 3
47407: NEG
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 3
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: LIST
47432: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47433: LD_ADDR_VAR 0 16
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: LD_INT 3
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 3
47452: NEG
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: LD_INT 3
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: LIST
47478: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47479: LD_ADDR_VAR 0 17
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 3
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 3
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: LIST
47522: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47523: LD_ADDR_VAR 0 18
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 3
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 3
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: LIST
47563: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47564: LD_ADDR_VAR 0 19
47568: PUSH
47569: LD_INT 3
47571: PUSH
47572: LD_INT 2
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 3
47581: PUSH
47582: LD_INT 3
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: LD_INT 3
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47604: LD_ADDR_VAR 0 20
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 3
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 3
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47645: LD_ADDR_VAR 0 21
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 3
47663: NEG
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 3
47674: NEG
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47689: LD_ADDR_VAR 0 22
47693: PUSH
47694: LD_INT 2
47696: NEG
47697: PUSH
47698: LD_INT 3
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 3
47708: NEG
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 3
47720: NEG
47721: PUSH
47722: LD_INT 3
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: LIST
47734: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47735: LD_ADDR_VAR 0 23
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: LD_INT 3
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 4
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: LD_INT 3
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: LIST
47778: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47779: LD_ADDR_VAR 0 24
47783: PUSH
47784: LD_INT 3
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 4
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: LIST
47819: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47820: LD_ADDR_VAR 0 25
47824: PUSH
47825: LD_INT 3
47827: PUSH
47828: LD_INT 3
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 4
47837: PUSH
47838: LD_INT 3
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 3
47847: PUSH
47848: LD_INT 4
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: LIST
47859: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47860: LD_ADDR_VAR 0 26
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 3
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 4
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: LIST
47900: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47901: LD_ADDR_VAR 0 27
47905: PUSH
47906: LD_INT 3
47908: NEG
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 3
47919: NEG
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 4
47930: NEG
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: LIST
47944: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47945: LD_ADDR_VAR 0 28
47949: PUSH
47950: LD_INT 3
47952: NEG
47953: PUSH
47954: LD_INT 3
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 3
47964: NEG
47965: PUSH
47966: LD_INT 4
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 4
47976: NEG
47977: PUSH
47978: LD_INT 3
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: LIST
47990: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47991: LD_ADDR_VAR 0 29
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 3
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 3
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 4
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 4
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 3
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: LD_INT 5
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 5
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: LD_INT 4
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 6
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 6
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 5
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48146: LD_ADDR_VAR 0 30
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 3
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 3
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 3
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 4
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 4
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 4
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 5
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 5
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 5
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 6
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 6
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48289: LD_ADDR_VAR 0 31
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 3
48306: PUSH
48307: LD_INT 3
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: LD_INT 3
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 4
48326: PUSH
48327: LD_INT 3
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 4
48336: PUSH
48337: LD_INT 4
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 3
48346: PUSH
48347: LD_INT 4
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 5
48356: PUSH
48357: LD_INT 4
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 5
48366: PUSH
48367: LD_INT 5
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 4
48376: PUSH
48377: LD_INT 5
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 6
48386: PUSH
48387: LD_INT 5
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 6
48396: PUSH
48397: LD_INT 6
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 5
48406: PUSH
48407: LD_INT 6
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48428: LD_ADDR_VAR 0 32
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 3
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 4
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 4
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 3
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 5
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 5
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: LD_INT 4
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 6
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: LD_INT 6
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 5
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48571: LD_ADDR_VAR 0 33
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 3
48589: NEG
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 3
48600: NEG
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 3
48612: NEG
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 4
48623: NEG
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 4
48634: NEG
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 4
48646: NEG
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 5
48657: NEG
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 5
48668: NEG
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 5
48680: NEG
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 6
48691: NEG
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 6
48702: NEG
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48726: LD_ADDR_VAR 0 34
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: LD_INT 3
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 3
48745: NEG
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 3
48757: NEG
48758: PUSH
48759: LD_INT 3
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 3
48769: NEG
48770: PUSH
48771: LD_INT 4
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 4
48781: NEG
48782: PUSH
48783: LD_INT 3
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 4
48793: NEG
48794: PUSH
48795: LD_INT 4
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 4
48805: NEG
48806: PUSH
48807: LD_INT 5
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 5
48817: NEG
48818: PUSH
48819: LD_INT 4
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 5
48829: NEG
48830: PUSH
48831: LD_INT 5
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 5
48841: NEG
48842: PUSH
48843: LD_INT 6
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 6
48853: NEG
48854: PUSH
48855: LD_INT 5
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 6
48865: NEG
48866: PUSH
48867: LD_INT 6
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48889: LD_ADDR_VAR 0 41
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 3
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: LIST
48932: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48933: LD_ADDR_VAR 0 42
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 3
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: LIST
48973: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48974: LD_ADDR_VAR 0 43
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: LD_INT 2
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 3
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: LD_INT 3
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: LIST
49013: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49014: LD_ADDR_VAR 0 44
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: LD_INT 2
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: LIST
49054: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49055: LD_ADDR_VAR 0 45
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 3
49084: NEG
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: LIST
49098: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49099: LD_ADDR_VAR 0 46
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: LD_INT 2
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: LD_INT 3
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 3
49130: NEG
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: LIST
49144: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49145: LD_ADDR_VAR 0 47
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: LD_INT 3
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: LD_INT 3
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49178: LD_ADDR_VAR 0 48
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49209: LD_ADDR_VAR 0 49
49213: PUSH
49214: LD_INT 3
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 3
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49238: LD_ADDR_VAR 0 50
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: LD_INT 3
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: LD_INT 3
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49267: LD_ADDR_VAR 0 51
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49298: LD_ADDR_VAR 0 52
49302: PUSH
49303: LD_INT 3
49305: NEG
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 3
49317: NEG
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49331: LD_ADDR_VAR 0 53
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: LD_INT 3
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: LD_INT 3
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: LIST
49374: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49375: LD_ADDR_VAR 0 54
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 3
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 3
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: LIST
49415: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49416: LD_ADDR_VAR 0 55
49420: PUSH
49421: LD_INT 3
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 3
49433: PUSH
49434: LD_INT 3
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: LD_INT 3
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: LIST
49455: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49456: LD_ADDR_VAR 0 56
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 3
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 3
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: LIST
49496: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49497: LD_ADDR_VAR 0 57
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 3
49515: NEG
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 3
49526: NEG
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: LIST
49540: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49541: LD_ADDR_VAR 0 58
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: LD_INT 3
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 3
49560: NEG
49561: PUSH
49562: LD_INT 2
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 3
49572: NEG
49573: PUSH
49574: LD_INT 3
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: LIST
49586: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49587: LD_ADDR_VAR 0 59
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: LD_INT 2
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: LIST
49630: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49631: LD_ADDR_VAR 0 60
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49672: LD_ADDR_VAR 0 61
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: LIST
49711: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49712: LD_ADDR_VAR 0 62
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: LD_INT 2
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: LD_INT 2
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: LIST
49752: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49753: LD_ADDR_VAR 0 63
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: LIST
49796: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49797: LD_ADDR_VAR 0 64
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: NEG
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: LIST
49842: ST_TO_ADDR
// end ; 2 :
49843: GO 53109
49845: LD_INT 2
49847: DOUBLE
49848: EQUAL
49849: IFTRUE 49853
49851: GO 53108
49853: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49854: LD_ADDR_VAR 0 29
49858: PUSH
49859: LD_INT 4
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 4
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 5
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 5
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 4
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 3
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 3
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 5
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 3
49954: PUSH
49955: LD_INT 3
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 3
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 4
49974: PUSH
49975: LD_INT 3
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 4
49984: PUSH
49985: LD_INT 4
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: LD_INT 4
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 2
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 4
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: LD_INT 4
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 4
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 3
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: LD_INT 4
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 5
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: LD_INT 5
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: LD_INT 4
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 3
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: LD_INT 5
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 3
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 3
50137: NEG
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 3
50148: NEG
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 2
50171: NEG
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 3
50182: NEG
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 4
50193: NEG
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 4
50204: NEG
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 4
50216: NEG
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 4
50239: NEG
50240: PUSH
50241: LD_INT 4
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 4
50251: NEG
50252: PUSH
50253: LD_INT 5
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: LD_INT 4
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 3
50275: NEG
50276: PUSH
50277: LD_INT 3
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 4
50287: NEG
50288: PUSH
50289: LD_INT 3
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 5
50299: NEG
50300: PUSH
50301: LD_INT 4
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 5
50311: NEG
50312: PUSH
50313: LD_INT 5
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 3
50323: NEG
50324: PUSH
50325: LD_INT 5
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 5
50335: NEG
50336: PUSH
50337: LD_INT 3
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50392: LD_ADDR_VAR 0 30
50396: PUSH
50397: LD_INT 4
50399: PUSH
50400: LD_INT 4
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 4
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 5
50419: PUSH
50420: LD_INT 4
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 5
50429: PUSH
50430: LD_INT 5
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 4
50439: PUSH
50440: LD_INT 5
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 3
50449: PUSH
50450: LD_INT 4
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 3
50459: PUSH
50460: LD_INT 3
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 5
50469: PUSH
50470: LD_INT 3
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 3
50479: PUSH
50480: LD_INT 5
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 3
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 2
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: LD_INT 3
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: LD_INT 4
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 4
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: LD_INT 3
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: LD_INT 4
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 4
50582: NEG
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 4
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 3
50605: NEG
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 3
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 4
50627: NEG
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 5
50638: NEG
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 5
50649: NEG
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 5
50661: NEG
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 3
50673: NEG
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 3
50684: NEG
50685: PUSH
50686: LD_INT 3
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 3
50696: NEG
50697: PUSH
50698: LD_INT 4
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: NEG
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 3
50732: NEG
50733: PUSH
50734: LD_INT 2
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 4
50744: NEG
50745: PUSH
50746: LD_INT 3
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 4
50756: NEG
50757: PUSH
50758: LD_INT 4
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: LD_INT 4
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 4
50780: NEG
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 4
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 5
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: LD_INT 4
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 3
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 3
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 4
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 5
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: LD_INT 3
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: LD_INT 5
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50939: LD_ADDR_VAR 0 31
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 4
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 3
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 4
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 5
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 5
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 4
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: LD_INT 5
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: LD_INT 3
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 3
51039: NEG
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 3
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 2
51073: NEG
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 3
51084: NEG
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 4
51095: NEG
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 4
51106: NEG
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 4
51118: NEG
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 4
51141: NEG
51142: PUSH
51143: LD_INT 4
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 4
51153: NEG
51154: PUSH
51155: LD_INT 5
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 3
51165: NEG
51166: PUSH
51167: LD_INT 4
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 3
51177: NEG
51178: PUSH
51179: LD_INT 3
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 4
51189: NEG
51190: PUSH
51191: LD_INT 3
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 5
51201: NEG
51202: PUSH
51203: LD_INT 4
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 5
51213: NEG
51214: PUSH
51215: LD_INT 5
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 3
51225: NEG
51226: PUSH
51227: LD_INT 5
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 5
51237: NEG
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: LD_INT 3
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 4
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 3
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 3
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 4
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: LD_INT 4
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 4
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 4
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 5
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 5
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 4
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 3
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 3
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 3
51423: PUSH
51424: LD_INT 2
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 5
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51489: LD_ADDR_VAR 0 32
51493: PUSH
51494: LD_INT 4
51496: NEG
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 4
51507: NEG
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 3
51519: NEG
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 3
51530: NEG
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 4
51541: NEG
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 5
51552: NEG
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 5
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 5
51575: NEG
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 3
51587: NEG
51588: PUSH
51589: LD_INT 2
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 3
51598: NEG
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 3
51610: NEG
51611: PUSH
51612: LD_INT 4
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: LD_INT 3
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 3
51646: NEG
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 4
51658: NEG
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 4
51670: NEG
51671: PUSH
51672: LD_INT 4
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: LD_INT 4
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 4
51694: NEG
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 4
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: LD_INT 5
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: LD_INT 4
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: LD_INT 3
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 3
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 4
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 5
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: LD_INT 3
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: LD_INT 5
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 3
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 3
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 4
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 4
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 2
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 4
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 4
51901: PUSH
51902: LD_INT 4
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 4
51911: PUSH
51912: LD_INT 3
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 5
51921: PUSH
51922: LD_INT 4
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 5
51931: PUSH
51932: LD_INT 5
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 4
51941: PUSH
51942: LD_INT 5
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 3
51951: PUSH
51952: LD_INT 4
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 3
51961: PUSH
51962: LD_INT 3
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 5
51971: PUSH
51972: LD_INT 3
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: LD_INT 5
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52036: LD_ADDR_VAR 0 33
52040: PUSH
52041: LD_INT 4
52043: NEG
52044: PUSH
52045: LD_INT 4
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 4
52055: NEG
52056: PUSH
52057: LD_INT 5
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 3
52067: NEG
52068: PUSH
52069: LD_INT 4
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 3
52079: NEG
52080: PUSH
52081: LD_INT 3
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 4
52091: NEG
52092: PUSH
52093: LD_INT 3
52095: NEG
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 5
52103: NEG
52104: PUSH
52105: LD_INT 4
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 5
52115: NEG
52116: PUSH
52117: LD_INT 5
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 3
52127: NEG
52128: PUSH
52129: LD_INT 5
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 5
52139: NEG
52140: PUSH
52141: LD_INT 3
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 3
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: LD_INT 4
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 3
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: LD_INT 2
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 3
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: LD_INT 4
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 2
52241: NEG
52242: PUSH
52243: LD_INT 4
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 4
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 4
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 5
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 5
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 4
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 3
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 3
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 5
52336: PUSH
52337: LD_INT 2
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 3
52346: PUSH
52347: LD_INT 3
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 3
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 4
52366: PUSH
52367: LD_INT 3
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 4
52376: PUSH
52377: LD_INT 4
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 3
52386: PUSH
52387: LD_INT 4
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: LD_INT 3
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: LD_INT 2
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 4
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: LD_INT 4
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 4
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: LD_INT 3
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 4
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: LD_INT 5
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: LD_INT 5
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: LD_INT 4
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: LD_INT 3
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: LD_INT 5
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: LD_INT 3
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52574: LD_ADDR_VAR 0 34
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 4
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 5
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: LD_INT 4
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 3
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 4
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 5
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 5
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 3
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 4
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 4
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 4
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 4
52776: PUSH
52777: LD_INT 4
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 4
52786: PUSH
52787: LD_INT 3
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 5
52796: PUSH
52797: LD_INT 4
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 5
52806: PUSH
52807: LD_INT 5
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 4
52816: PUSH
52817: LD_INT 5
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 3
52826: PUSH
52827: LD_INT 4
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 3
52836: PUSH
52837: LD_INT 3
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 5
52846: PUSH
52847: LD_INT 3
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 3
52856: PUSH
52857: LD_INT 5
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 3
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: LD_INT 4
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 4
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: LD_INT 4
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: LD_INT 2
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 4
52959: NEG
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 4
52970: NEG
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: NEG
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 3
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 4
53004: NEG
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 5
53015: NEG
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 5
53026: NEG
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 5
53038: NEG
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 3
53050: NEG
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: ST_TO_ADDR
// end ; end ;
53106: GO 53109
53108: POP
// case btype of b_depot , b_warehouse :
53109: LD_VAR 0 1
53113: PUSH
53114: LD_INT 0
53116: DOUBLE
53117: EQUAL
53118: IFTRUE 53128
53120: LD_INT 1
53122: DOUBLE
53123: EQUAL
53124: IFTRUE 53128
53126: GO 53329
53128: POP
// case nation of nation_american :
53129: LD_VAR 0 5
53133: PUSH
53134: LD_INT 1
53136: DOUBLE
53137: EQUAL
53138: IFTRUE 53142
53140: GO 53198
53142: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
53143: LD_ADDR_VAR 0 9
53147: PUSH
53148: LD_VAR 0 11
53152: PUSH
53153: LD_VAR 0 12
53157: PUSH
53158: LD_VAR 0 13
53162: PUSH
53163: LD_VAR 0 14
53167: PUSH
53168: LD_VAR 0 15
53172: PUSH
53173: LD_VAR 0 16
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: PUSH
53186: LD_VAR 0 4
53190: PUSH
53191: LD_INT 1
53193: PLUS
53194: ARRAY
53195: ST_TO_ADDR
53196: GO 53327
53198: LD_INT 2
53200: DOUBLE
53201: EQUAL
53202: IFTRUE 53206
53204: GO 53262
53206: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
53207: LD_ADDR_VAR 0 9
53211: PUSH
53212: LD_VAR 0 17
53216: PUSH
53217: LD_VAR 0 18
53221: PUSH
53222: LD_VAR 0 19
53226: PUSH
53227: LD_VAR 0 20
53231: PUSH
53232: LD_VAR 0 21
53236: PUSH
53237: LD_VAR 0 22
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: PUSH
53250: LD_VAR 0 4
53254: PUSH
53255: LD_INT 1
53257: PLUS
53258: ARRAY
53259: ST_TO_ADDR
53260: GO 53327
53262: LD_INT 3
53264: DOUBLE
53265: EQUAL
53266: IFTRUE 53270
53268: GO 53326
53270: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53271: LD_ADDR_VAR 0 9
53275: PUSH
53276: LD_VAR 0 23
53280: PUSH
53281: LD_VAR 0 24
53285: PUSH
53286: LD_VAR 0 25
53290: PUSH
53291: LD_VAR 0 26
53295: PUSH
53296: LD_VAR 0 27
53300: PUSH
53301: LD_VAR 0 28
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: PUSH
53314: LD_VAR 0 4
53318: PUSH
53319: LD_INT 1
53321: PLUS
53322: ARRAY
53323: ST_TO_ADDR
53324: GO 53327
53326: POP
53327: GO 53882
53329: LD_INT 2
53331: DOUBLE
53332: EQUAL
53333: IFTRUE 53343
53335: LD_INT 3
53337: DOUBLE
53338: EQUAL
53339: IFTRUE 53343
53341: GO 53399
53343: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53344: LD_ADDR_VAR 0 9
53348: PUSH
53349: LD_VAR 0 29
53353: PUSH
53354: LD_VAR 0 30
53358: PUSH
53359: LD_VAR 0 31
53363: PUSH
53364: LD_VAR 0 32
53368: PUSH
53369: LD_VAR 0 33
53373: PUSH
53374: LD_VAR 0 34
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: PUSH
53387: LD_VAR 0 4
53391: PUSH
53392: LD_INT 1
53394: PLUS
53395: ARRAY
53396: ST_TO_ADDR
53397: GO 53882
53399: LD_INT 16
53401: DOUBLE
53402: EQUAL
53403: IFTRUE 53461
53405: LD_INT 17
53407: DOUBLE
53408: EQUAL
53409: IFTRUE 53461
53411: LD_INT 18
53413: DOUBLE
53414: EQUAL
53415: IFTRUE 53461
53417: LD_INT 19
53419: DOUBLE
53420: EQUAL
53421: IFTRUE 53461
53423: LD_INT 22
53425: DOUBLE
53426: EQUAL
53427: IFTRUE 53461
53429: LD_INT 20
53431: DOUBLE
53432: EQUAL
53433: IFTRUE 53461
53435: LD_INT 21
53437: DOUBLE
53438: EQUAL
53439: IFTRUE 53461
53441: LD_INT 23
53443: DOUBLE
53444: EQUAL
53445: IFTRUE 53461
53447: LD_INT 24
53449: DOUBLE
53450: EQUAL
53451: IFTRUE 53461
53453: LD_INT 25
53455: DOUBLE
53456: EQUAL
53457: IFTRUE 53461
53459: GO 53517
53461: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53462: LD_ADDR_VAR 0 9
53466: PUSH
53467: LD_VAR 0 35
53471: PUSH
53472: LD_VAR 0 36
53476: PUSH
53477: LD_VAR 0 37
53481: PUSH
53482: LD_VAR 0 38
53486: PUSH
53487: LD_VAR 0 39
53491: PUSH
53492: LD_VAR 0 40
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: PUSH
53505: LD_VAR 0 4
53509: PUSH
53510: LD_INT 1
53512: PLUS
53513: ARRAY
53514: ST_TO_ADDR
53515: GO 53882
53517: LD_INT 6
53519: DOUBLE
53520: EQUAL
53521: IFTRUE 53573
53523: LD_INT 7
53525: DOUBLE
53526: EQUAL
53527: IFTRUE 53573
53529: LD_INT 8
53531: DOUBLE
53532: EQUAL
53533: IFTRUE 53573
53535: LD_INT 13
53537: DOUBLE
53538: EQUAL
53539: IFTRUE 53573
53541: LD_INT 12
53543: DOUBLE
53544: EQUAL
53545: IFTRUE 53573
53547: LD_INT 15
53549: DOUBLE
53550: EQUAL
53551: IFTRUE 53573
53553: LD_INT 11
53555: DOUBLE
53556: EQUAL
53557: IFTRUE 53573
53559: LD_INT 14
53561: DOUBLE
53562: EQUAL
53563: IFTRUE 53573
53565: LD_INT 10
53567: DOUBLE
53568: EQUAL
53569: IFTRUE 53573
53571: GO 53629
53573: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
53574: LD_ADDR_VAR 0 9
53578: PUSH
53579: LD_VAR 0 41
53583: PUSH
53584: LD_VAR 0 42
53588: PUSH
53589: LD_VAR 0 43
53593: PUSH
53594: LD_VAR 0 44
53598: PUSH
53599: LD_VAR 0 45
53603: PUSH
53604: LD_VAR 0 46
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: PUSH
53617: LD_VAR 0 4
53621: PUSH
53622: LD_INT 1
53624: PLUS
53625: ARRAY
53626: ST_TO_ADDR
53627: GO 53882
53629: LD_INT 36
53631: DOUBLE
53632: EQUAL
53633: IFTRUE 53637
53635: GO 53693
53637: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53638: LD_ADDR_VAR 0 9
53642: PUSH
53643: LD_VAR 0 47
53647: PUSH
53648: LD_VAR 0 48
53652: PUSH
53653: LD_VAR 0 49
53657: PUSH
53658: LD_VAR 0 50
53662: PUSH
53663: LD_VAR 0 51
53667: PUSH
53668: LD_VAR 0 52
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: PUSH
53681: LD_VAR 0 4
53685: PUSH
53686: LD_INT 1
53688: PLUS
53689: ARRAY
53690: ST_TO_ADDR
53691: GO 53882
53693: LD_INT 4
53695: DOUBLE
53696: EQUAL
53697: IFTRUE 53719
53699: LD_INT 5
53701: DOUBLE
53702: EQUAL
53703: IFTRUE 53719
53705: LD_INT 34
53707: DOUBLE
53708: EQUAL
53709: IFTRUE 53719
53711: LD_INT 37
53713: DOUBLE
53714: EQUAL
53715: IFTRUE 53719
53717: GO 53775
53719: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53720: LD_ADDR_VAR 0 9
53724: PUSH
53725: LD_VAR 0 53
53729: PUSH
53730: LD_VAR 0 54
53734: PUSH
53735: LD_VAR 0 55
53739: PUSH
53740: LD_VAR 0 56
53744: PUSH
53745: LD_VAR 0 57
53749: PUSH
53750: LD_VAR 0 58
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: PUSH
53763: LD_VAR 0 4
53767: PUSH
53768: LD_INT 1
53770: PLUS
53771: ARRAY
53772: ST_TO_ADDR
53773: GO 53882
53775: LD_INT 31
53777: DOUBLE
53778: EQUAL
53779: IFTRUE 53825
53781: LD_INT 32
53783: DOUBLE
53784: EQUAL
53785: IFTRUE 53825
53787: LD_INT 33
53789: DOUBLE
53790: EQUAL
53791: IFTRUE 53825
53793: LD_INT 27
53795: DOUBLE
53796: EQUAL
53797: IFTRUE 53825
53799: LD_INT 26
53801: DOUBLE
53802: EQUAL
53803: IFTRUE 53825
53805: LD_INT 28
53807: DOUBLE
53808: EQUAL
53809: IFTRUE 53825
53811: LD_INT 29
53813: DOUBLE
53814: EQUAL
53815: IFTRUE 53825
53817: LD_INT 30
53819: DOUBLE
53820: EQUAL
53821: IFTRUE 53825
53823: GO 53881
53825: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
53826: LD_ADDR_VAR 0 9
53830: PUSH
53831: LD_VAR 0 59
53835: PUSH
53836: LD_VAR 0 60
53840: PUSH
53841: LD_VAR 0 61
53845: PUSH
53846: LD_VAR 0 62
53850: PUSH
53851: LD_VAR 0 63
53855: PUSH
53856: LD_VAR 0 64
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: PUSH
53869: LD_VAR 0 4
53873: PUSH
53874: LD_INT 1
53876: PLUS
53877: ARRAY
53878: ST_TO_ADDR
53879: GO 53882
53881: POP
// temp_list2 = [ ] ;
53882: LD_ADDR_VAR 0 10
53886: PUSH
53887: EMPTY
53888: ST_TO_ADDR
// for i in temp_list do
53889: LD_ADDR_VAR 0 8
53893: PUSH
53894: LD_VAR 0 9
53898: PUSH
53899: FOR_IN
53900: IFFALSE 53952
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53902: LD_ADDR_VAR 0 10
53906: PUSH
53907: LD_VAR 0 10
53911: PUSH
53912: LD_VAR 0 8
53916: PUSH
53917: LD_INT 1
53919: ARRAY
53920: PUSH
53921: LD_VAR 0 2
53925: PLUS
53926: PUSH
53927: LD_VAR 0 8
53931: PUSH
53932: LD_INT 2
53934: ARRAY
53935: PUSH
53936: LD_VAR 0 3
53940: PLUS
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: EMPTY
53947: LIST
53948: ADD
53949: ST_TO_ADDR
53950: GO 53899
53952: POP
53953: POP
// result = temp_list2 ;
53954: LD_ADDR_VAR 0 7
53958: PUSH
53959: LD_VAR 0 10
53963: ST_TO_ADDR
// end ;
53964: LD_VAR 0 7
53968: RET
// export function EnemyInRange ( unit , dist ) ; begin
53969: LD_INT 0
53971: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53972: LD_ADDR_VAR 0 3
53976: PUSH
53977: LD_VAR 0 1
53981: PPUSH
53982: CALL_OW 255
53986: PPUSH
53987: LD_VAR 0 1
53991: PPUSH
53992: CALL_OW 250
53996: PPUSH
53997: LD_VAR 0 1
54001: PPUSH
54002: CALL_OW 251
54006: PPUSH
54007: LD_VAR 0 2
54011: PPUSH
54012: CALL 28073 0 4
54016: PUSH
54017: LD_INT 4
54019: ARRAY
54020: ST_TO_ADDR
// end ;
54021: LD_VAR 0 3
54025: RET
// export function PlayerSeeMe ( unit ) ; begin
54026: LD_INT 0
54028: PPUSH
// result := See ( your_side , unit ) ;
54029: LD_ADDR_VAR 0 2
54033: PUSH
54034: LD_OWVAR 2
54038: PPUSH
54039: LD_VAR 0 1
54043: PPUSH
54044: CALL_OW 292
54048: ST_TO_ADDR
// end ;
54049: LD_VAR 0 2
54053: RET
// export function ReverseDir ( unit ) ; begin
54054: LD_INT 0
54056: PPUSH
// if not unit then
54057: LD_VAR 0 1
54061: NOT
54062: IFFALSE 54066
// exit ;
54064: GO 54089
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54066: LD_ADDR_VAR 0 2
54070: PUSH
54071: LD_VAR 0 1
54075: PPUSH
54076: CALL_OW 254
54080: PUSH
54081: LD_INT 3
54083: PLUS
54084: PUSH
54085: LD_INT 6
54087: MOD
54088: ST_TO_ADDR
// end ;
54089: LD_VAR 0 2
54093: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54094: LD_INT 0
54096: PPUSH
54097: PPUSH
54098: PPUSH
54099: PPUSH
54100: PPUSH
// if not hexes then
54101: LD_VAR 0 2
54105: NOT
54106: IFFALSE 54110
// exit ;
54108: GO 54258
// dist := 9999 ;
54110: LD_ADDR_VAR 0 5
54114: PUSH
54115: LD_INT 9999
54117: ST_TO_ADDR
// for i = 1 to hexes do
54118: LD_ADDR_VAR 0 4
54122: PUSH
54123: DOUBLE
54124: LD_INT 1
54126: DEC
54127: ST_TO_ADDR
54128: LD_VAR 0 2
54132: PUSH
54133: FOR_TO
54134: IFFALSE 54246
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54136: LD_VAR 0 1
54140: PPUSH
54141: LD_VAR 0 2
54145: PUSH
54146: LD_VAR 0 4
54150: ARRAY
54151: PUSH
54152: LD_INT 1
54154: ARRAY
54155: PPUSH
54156: LD_VAR 0 2
54160: PUSH
54161: LD_VAR 0 4
54165: ARRAY
54166: PUSH
54167: LD_INT 2
54169: ARRAY
54170: PPUSH
54171: CALL_OW 297
54175: PUSH
54176: LD_VAR 0 5
54180: LESS
54181: IFFALSE 54244
// begin hex := hexes [ i ] ;
54183: LD_ADDR_VAR 0 7
54187: PUSH
54188: LD_VAR 0 2
54192: PUSH
54193: LD_VAR 0 4
54197: ARRAY
54198: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54199: LD_ADDR_VAR 0 5
54203: PUSH
54204: LD_VAR 0 1
54208: PPUSH
54209: LD_VAR 0 2
54213: PUSH
54214: LD_VAR 0 4
54218: ARRAY
54219: PUSH
54220: LD_INT 1
54222: ARRAY
54223: PPUSH
54224: LD_VAR 0 2
54228: PUSH
54229: LD_VAR 0 4
54233: ARRAY
54234: PUSH
54235: LD_INT 2
54237: ARRAY
54238: PPUSH
54239: CALL_OW 297
54243: ST_TO_ADDR
// end ; end ;
54244: GO 54133
54246: POP
54247: POP
// result := hex ;
54248: LD_ADDR_VAR 0 3
54252: PUSH
54253: LD_VAR 0 7
54257: ST_TO_ADDR
// end ;
54258: LD_VAR 0 3
54262: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54263: LD_INT 0
54265: PPUSH
54266: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54267: LD_VAR 0 1
54271: NOT
54272: PUSH
54273: LD_VAR 0 1
54277: PUSH
54278: LD_INT 21
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 23
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PPUSH
54302: CALL_OW 69
54306: IN
54307: NOT
54308: OR
54309: IFFALSE 54313
// exit ;
54311: GO 54360
// for i = 1 to 3 do
54313: LD_ADDR_VAR 0 3
54317: PUSH
54318: DOUBLE
54319: LD_INT 1
54321: DEC
54322: ST_TO_ADDR
54323: LD_INT 3
54325: PUSH
54326: FOR_TO
54327: IFFALSE 54358
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54329: LD_VAR 0 1
54333: PPUSH
54334: CALL_OW 250
54338: PPUSH
54339: LD_VAR 0 1
54343: PPUSH
54344: CALL_OW 251
54348: PPUSH
54349: LD_INT 1
54351: PPUSH
54352: CALL_OW 453
54356: GO 54326
54358: POP
54359: POP
// end ;
54360: LD_VAR 0 2
54364: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54365: LD_INT 0
54367: PPUSH
54368: PPUSH
54369: PPUSH
54370: PPUSH
54371: PPUSH
54372: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54373: LD_VAR 0 1
54377: NOT
54378: PUSH
54379: LD_VAR 0 2
54383: NOT
54384: OR
54385: PUSH
54386: LD_VAR 0 1
54390: PPUSH
54391: CALL_OW 314
54395: OR
54396: IFFALSE 54400
// exit ;
54398: GO 54841
// x := GetX ( enemy_unit ) ;
54400: LD_ADDR_VAR 0 7
54404: PUSH
54405: LD_VAR 0 2
54409: PPUSH
54410: CALL_OW 250
54414: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54415: LD_ADDR_VAR 0 8
54419: PUSH
54420: LD_VAR 0 2
54424: PPUSH
54425: CALL_OW 251
54429: ST_TO_ADDR
// if not x or not y then
54430: LD_VAR 0 7
54434: NOT
54435: PUSH
54436: LD_VAR 0 8
54440: NOT
54441: OR
54442: IFFALSE 54446
// exit ;
54444: GO 54841
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54446: LD_ADDR_VAR 0 6
54450: PUSH
54451: LD_VAR 0 7
54455: PPUSH
54456: LD_INT 0
54458: PPUSH
54459: LD_INT 4
54461: PPUSH
54462: CALL_OW 272
54466: PUSH
54467: LD_VAR 0 8
54471: PPUSH
54472: LD_INT 0
54474: PPUSH
54475: LD_INT 4
54477: PPUSH
54478: CALL_OW 273
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_VAR 0 7
54491: PPUSH
54492: LD_INT 1
54494: PPUSH
54495: LD_INT 4
54497: PPUSH
54498: CALL_OW 272
54502: PUSH
54503: LD_VAR 0 8
54507: PPUSH
54508: LD_INT 1
54510: PPUSH
54511: LD_INT 4
54513: PPUSH
54514: CALL_OW 273
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_VAR 0 7
54527: PPUSH
54528: LD_INT 2
54530: PPUSH
54531: LD_INT 4
54533: PPUSH
54534: CALL_OW 272
54538: PUSH
54539: LD_VAR 0 8
54543: PPUSH
54544: LD_INT 2
54546: PPUSH
54547: LD_INT 4
54549: PPUSH
54550: CALL_OW 273
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_VAR 0 7
54563: PPUSH
54564: LD_INT 3
54566: PPUSH
54567: LD_INT 4
54569: PPUSH
54570: CALL_OW 272
54574: PUSH
54575: LD_VAR 0 8
54579: PPUSH
54580: LD_INT 3
54582: PPUSH
54583: LD_INT 4
54585: PPUSH
54586: CALL_OW 273
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_VAR 0 7
54599: PPUSH
54600: LD_INT 4
54602: PPUSH
54603: LD_INT 4
54605: PPUSH
54606: CALL_OW 272
54610: PUSH
54611: LD_VAR 0 8
54615: PPUSH
54616: LD_INT 4
54618: PPUSH
54619: LD_INT 4
54621: PPUSH
54622: CALL_OW 273
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_VAR 0 7
54635: PPUSH
54636: LD_INT 5
54638: PPUSH
54639: LD_INT 4
54641: PPUSH
54642: CALL_OW 272
54646: PUSH
54647: LD_VAR 0 8
54651: PPUSH
54652: LD_INT 5
54654: PPUSH
54655: LD_INT 4
54657: PPUSH
54658: CALL_OW 273
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: ST_TO_ADDR
// for i = tmp downto 1 do
54675: LD_ADDR_VAR 0 4
54679: PUSH
54680: DOUBLE
54681: LD_VAR 0 6
54685: INC
54686: ST_TO_ADDR
54687: LD_INT 1
54689: PUSH
54690: FOR_DOWNTO
54691: IFFALSE 54792
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54693: LD_VAR 0 6
54697: PUSH
54698: LD_VAR 0 4
54702: ARRAY
54703: PUSH
54704: LD_INT 1
54706: ARRAY
54707: PPUSH
54708: LD_VAR 0 6
54712: PUSH
54713: LD_VAR 0 4
54717: ARRAY
54718: PUSH
54719: LD_INT 2
54721: ARRAY
54722: PPUSH
54723: CALL_OW 488
54727: NOT
54728: PUSH
54729: LD_VAR 0 6
54733: PUSH
54734: LD_VAR 0 4
54738: ARRAY
54739: PUSH
54740: LD_INT 1
54742: ARRAY
54743: PPUSH
54744: LD_VAR 0 6
54748: PUSH
54749: LD_VAR 0 4
54753: ARRAY
54754: PUSH
54755: LD_INT 2
54757: ARRAY
54758: PPUSH
54759: CALL_OW 428
54763: PUSH
54764: LD_INT 0
54766: NONEQUAL
54767: OR
54768: IFFALSE 54790
// tmp := Delete ( tmp , i ) ;
54770: LD_ADDR_VAR 0 6
54774: PUSH
54775: LD_VAR 0 6
54779: PPUSH
54780: LD_VAR 0 4
54784: PPUSH
54785: CALL_OW 3
54789: ST_TO_ADDR
54790: GO 54690
54792: POP
54793: POP
// j := GetClosestHex ( unit , tmp ) ;
54794: LD_ADDR_VAR 0 5
54798: PUSH
54799: LD_VAR 0 1
54803: PPUSH
54804: LD_VAR 0 6
54808: PPUSH
54809: CALL 54094 0 2
54813: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54814: LD_VAR 0 1
54818: PPUSH
54819: LD_VAR 0 5
54823: PUSH
54824: LD_INT 1
54826: ARRAY
54827: PPUSH
54828: LD_VAR 0 5
54832: PUSH
54833: LD_INT 2
54835: ARRAY
54836: PPUSH
54837: CALL_OW 111
// end ;
54841: LD_VAR 0 3
54845: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54846: LD_INT 0
54848: PPUSH
54849: PPUSH
54850: PPUSH
// uc_side = 0 ;
54851: LD_ADDR_OWVAR 20
54855: PUSH
54856: LD_INT 0
54858: ST_TO_ADDR
// uc_nation = 0 ;
54859: LD_ADDR_OWVAR 21
54863: PUSH
54864: LD_INT 0
54866: ST_TO_ADDR
// InitHc ;
54867: CALL_OW 19
// InitVc ;
54871: CALL_OW 20
// if mastodonts then
54875: LD_VAR 0 6
54879: IFFALSE 54946
// for i = 1 to mastodonts do
54881: LD_ADDR_VAR 0 11
54885: PUSH
54886: DOUBLE
54887: LD_INT 1
54889: DEC
54890: ST_TO_ADDR
54891: LD_VAR 0 6
54895: PUSH
54896: FOR_TO
54897: IFFALSE 54944
// begin vc_chassis := 31 ;
54899: LD_ADDR_OWVAR 37
54903: PUSH
54904: LD_INT 31
54906: ST_TO_ADDR
// vc_control := control_rider ;
54907: LD_ADDR_OWVAR 38
54911: PUSH
54912: LD_INT 4
54914: ST_TO_ADDR
// animal := CreateVehicle ;
54915: LD_ADDR_VAR 0 12
54919: PUSH
54920: CALL_OW 45
54924: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54925: LD_VAR 0 12
54929: PPUSH
54930: LD_VAR 0 8
54934: PPUSH
54935: LD_INT 0
54937: PPUSH
54938: CALL 57015 0 3
// end ;
54942: GO 54896
54944: POP
54945: POP
// if horses then
54946: LD_VAR 0 5
54950: IFFALSE 55017
// for i = 1 to horses do
54952: LD_ADDR_VAR 0 11
54956: PUSH
54957: DOUBLE
54958: LD_INT 1
54960: DEC
54961: ST_TO_ADDR
54962: LD_VAR 0 5
54966: PUSH
54967: FOR_TO
54968: IFFALSE 55015
// begin hc_class := 21 ;
54970: LD_ADDR_OWVAR 28
54974: PUSH
54975: LD_INT 21
54977: ST_TO_ADDR
// hc_gallery :=  ;
54978: LD_ADDR_OWVAR 33
54982: PUSH
54983: LD_STRING 
54985: ST_TO_ADDR
// animal := CreateHuman ;
54986: LD_ADDR_VAR 0 12
54990: PUSH
54991: CALL_OW 44
54995: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54996: LD_VAR 0 12
55000: PPUSH
55001: LD_VAR 0 8
55005: PPUSH
55006: LD_INT 0
55008: PPUSH
55009: CALL 57015 0 3
// end ;
55013: GO 54967
55015: POP
55016: POP
// if birds then
55017: LD_VAR 0 1
55021: IFFALSE 55088
// for i = 1 to birds do
55023: LD_ADDR_VAR 0 11
55027: PUSH
55028: DOUBLE
55029: LD_INT 1
55031: DEC
55032: ST_TO_ADDR
55033: LD_VAR 0 1
55037: PUSH
55038: FOR_TO
55039: IFFALSE 55086
// begin hc_class = 18 ;
55041: LD_ADDR_OWVAR 28
55045: PUSH
55046: LD_INT 18
55048: ST_TO_ADDR
// hc_gallery =  ;
55049: LD_ADDR_OWVAR 33
55053: PUSH
55054: LD_STRING 
55056: ST_TO_ADDR
// animal := CreateHuman ;
55057: LD_ADDR_VAR 0 12
55061: PUSH
55062: CALL_OW 44
55066: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55067: LD_VAR 0 12
55071: PPUSH
55072: LD_VAR 0 8
55076: PPUSH
55077: LD_INT 0
55079: PPUSH
55080: CALL 57015 0 3
// end ;
55084: GO 55038
55086: POP
55087: POP
// if tigers then
55088: LD_VAR 0 2
55092: IFFALSE 55176
// for i = 1 to tigers do
55094: LD_ADDR_VAR 0 11
55098: PUSH
55099: DOUBLE
55100: LD_INT 1
55102: DEC
55103: ST_TO_ADDR
55104: LD_VAR 0 2
55108: PUSH
55109: FOR_TO
55110: IFFALSE 55174
// begin hc_class = class_tiger ;
55112: LD_ADDR_OWVAR 28
55116: PUSH
55117: LD_INT 14
55119: ST_TO_ADDR
// hc_gallery =  ;
55120: LD_ADDR_OWVAR 33
55124: PUSH
55125: LD_STRING 
55127: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55128: LD_ADDR_OWVAR 35
55132: PUSH
55133: LD_INT 7
55135: NEG
55136: PPUSH
55137: LD_INT 7
55139: PPUSH
55140: CALL_OW 12
55144: ST_TO_ADDR
// animal := CreateHuman ;
55145: LD_ADDR_VAR 0 12
55149: PUSH
55150: CALL_OW 44
55154: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55155: LD_VAR 0 12
55159: PPUSH
55160: LD_VAR 0 8
55164: PPUSH
55165: LD_INT 0
55167: PPUSH
55168: CALL 57015 0 3
// end ;
55172: GO 55109
55174: POP
55175: POP
// if apemans then
55176: LD_VAR 0 3
55180: IFFALSE 55303
// for i = 1 to apemans do
55182: LD_ADDR_VAR 0 11
55186: PUSH
55187: DOUBLE
55188: LD_INT 1
55190: DEC
55191: ST_TO_ADDR
55192: LD_VAR 0 3
55196: PUSH
55197: FOR_TO
55198: IFFALSE 55301
// begin hc_class = class_apeman ;
55200: LD_ADDR_OWVAR 28
55204: PUSH
55205: LD_INT 12
55207: ST_TO_ADDR
// hc_gallery =  ;
55208: LD_ADDR_OWVAR 33
55212: PUSH
55213: LD_STRING 
55215: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
55216: LD_ADDR_OWVAR 35
55220: PUSH
55221: LD_INT 5
55223: NEG
55224: PPUSH
55225: LD_INT 5
55227: PPUSH
55228: CALL_OW 12
55232: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55233: LD_ADDR_OWVAR 31
55237: PUSH
55238: LD_INT 1
55240: PPUSH
55241: LD_INT 3
55243: PPUSH
55244: CALL_OW 12
55248: PUSH
55249: LD_INT 1
55251: PPUSH
55252: LD_INT 3
55254: PPUSH
55255: CALL_OW 12
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: ST_TO_ADDR
// animal := CreateHuman ;
55272: LD_ADDR_VAR 0 12
55276: PUSH
55277: CALL_OW 44
55281: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55282: LD_VAR 0 12
55286: PPUSH
55287: LD_VAR 0 8
55291: PPUSH
55292: LD_INT 0
55294: PPUSH
55295: CALL 57015 0 3
// end ;
55299: GO 55197
55301: POP
55302: POP
// if enchidnas then
55303: LD_VAR 0 4
55307: IFFALSE 55374
// for i = 1 to enchidnas do
55309: LD_ADDR_VAR 0 11
55313: PUSH
55314: DOUBLE
55315: LD_INT 1
55317: DEC
55318: ST_TO_ADDR
55319: LD_VAR 0 4
55323: PUSH
55324: FOR_TO
55325: IFFALSE 55372
// begin hc_class = 13 ;
55327: LD_ADDR_OWVAR 28
55331: PUSH
55332: LD_INT 13
55334: ST_TO_ADDR
// hc_gallery =  ;
55335: LD_ADDR_OWVAR 33
55339: PUSH
55340: LD_STRING 
55342: ST_TO_ADDR
// animal := CreateHuman ;
55343: LD_ADDR_VAR 0 12
55347: PUSH
55348: CALL_OW 44
55352: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55353: LD_VAR 0 12
55357: PPUSH
55358: LD_VAR 0 8
55362: PPUSH
55363: LD_INT 0
55365: PPUSH
55366: CALL 57015 0 3
// end ;
55370: GO 55324
55372: POP
55373: POP
// if fishes then
55374: LD_VAR 0 7
55378: IFFALSE 55445
// for i = 1 to fishes do
55380: LD_ADDR_VAR 0 11
55384: PUSH
55385: DOUBLE
55386: LD_INT 1
55388: DEC
55389: ST_TO_ADDR
55390: LD_VAR 0 7
55394: PUSH
55395: FOR_TO
55396: IFFALSE 55443
// begin hc_class = 20 ;
55398: LD_ADDR_OWVAR 28
55402: PUSH
55403: LD_INT 20
55405: ST_TO_ADDR
// hc_gallery =  ;
55406: LD_ADDR_OWVAR 33
55410: PUSH
55411: LD_STRING 
55413: ST_TO_ADDR
// animal := CreateHuman ;
55414: LD_ADDR_VAR 0 12
55418: PUSH
55419: CALL_OW 44
55423: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55424: LD_VAR 0 12
55428: PPUSH
55429: LD_VAR 0 9
55433: PPUSH
55434: LD_INT 0
55436: PPUSH
55437: CALL 57015 0 3
// end ;
55441: GO 55395
55443: POP
55444: POP
// end ;
55445: LD_VAR 0 10
55449: RET
// export function WantHeal ( sci , unit ) ; begin
55450: LD_INT 0
55452: PPUSH
// if GetTaskList ( sci ) > 0 then
55453: LD_VAR 0 1
55457: PPUSH
55458: CALL_OW 437
55462: PUSH
55463: LD_INT 0
55465: GREATER
55466: IFFALSE 55536
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55468: LD_VAR 0 1
55472: PPUSH
55473: CALL_OW 437
55477: PUSH
55478: LD_INT 1
55480: ARRAY
55481: PUSH
55482: LD_INT 1
55484: ARRAY
55485: PUSH
55486: LD_STRING l
55488: EQUAL
55489: PUSH
55490: LD_VAR 0 1
55494: PPUSH
55495: CALL_OW 437
55499: PUSH
55500: LD_INT 1
55502: ARRAY
55503: PUSH
55504: LD_INT 4
55506: ARRAY
55507: PUSH
55508: LD_VAR 0 2
55512: EQUAL
55513: AND
55514: IFFALSE 55526
// result := true else
55516: LD_ADDR_VAR 0 3
55520: PUSH
55521: LD_INT 1
55523: ST_TO_ADDR
55524: GO 55534
// result := false ;
55526: LD_ADDR_VAR 0 3
55530: PUSH
55531: LD_INT 0
55533: ST_TO_ADDR
// end else
55534: GO 55544
// result := false ;
55536: LD_ADDR_VAR 0 3
55540: PUSH
55541: LD_INT 0
55543: ST_TO_ADDR
// end ;
55544: LD_VAR 0 3
55548: RET
// export function HealTarget ( sci ) ; begin
55549: LD_INT 0
55551: PPUSH
// if not sci then
55552: LD_VAR 0 1
55556: NOT
55557: IFFALSE 55561
// exit ;
55559: GO 55626
// result := 0 ;
55561: LD_ADDR_VAR 0 2
55565: PUSH
55566: LD_INT 0
55568: ST_TO_ADDR
// if GetTaskList ( sci ) then
55569: LD_VAR 0 1
55573: PPUSH
55574: CALL_OW 437
55578: IFFALSE 55626
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55580: LD_VAR 0 1
55584: PPUSH
55585: CALL_OW 437
55589: PUSH
55590: LD_INT 1
55592: ARRAY
55593: PUSH
55594: LD_INT 1
55596: ARRAY
55597: PUSH
55598: LD_STRING l
55600: EQUAL
55601: IFFALSE 55626
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55603: LD_ADDR_VAR 0 2
55607: PUSH
55608: LD_VAR 0 1
55612: PPUSH
55613: CALL_OW 437
55617: PUSH
55618: LD_INT 1
55620: ARRAY
55621: PUSH
55622: LD_INT 4
55624: ARRAY
55625: ST_TO_ADDR
// end ;
55626: LD_VAR 0 2
55630: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55631: LD_INT 0
55633: PPUSH
55634: PPUSH
55635: PPUSH
55636: PPUSH
// if not base_units then
55637: LD_VAR 0 1
55641: NOT
55642: IFFALSE 55646
// exit ;
55644: GO 55733
// result := false ;
55646: LD_ADDR_VAR 0 2
55650: PUSH
55651: LD_INT 0
55653: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55654: LD_ADDR_VAR 0 5
55658: PUSH
55659: LD_VAR 0 1
55663: PPUSH
55664: LD_INT 21
55666: PUSH
55667: LD_INT 3
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PPUSH
55674: CALL_OW 72
55678: ST_TO_ADDR
// if not tmp then
55679: LD_VAR 0 5
55683: NOT
55684: IFFALSE 55688
// exit ;
55686: GO 55733
// for i in tmp do
55688: LD_ADDR_VAR 0 3
55692: PUSH
55693: LD_VAR 0 5
55697: PUSH
55698: FOR_IN
55699: IFFALSE 55731
// begin result := EnemyInRange ( i , 22 ) ;
55701: LD_ADDR_VAR 0 2
55705: PUSH
55706: LD_VAR 0 3
55710: PPUSH
55711: LD_INT 22
55713: PPUSH
55714: CALL 53969 0 2
55718: ST_TO_ADDR
// if result then
55719: LD_VAR 0 2
55723: IFFALSE 55729
// exit ;
55725: POP
55726: POP
55727: GO 55733
// end ;
55729: GO 55698
55731: POP
55732: POP
// end ;
55733: LD_VAR 0 2
55737: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55738: LD_INT 0
55740: PPUSH
55741: PPUSH
// if not units then
55742: LD_VAR 0 1
55746: NOT
55747: IFFALSE 55751
// exit ;
55749: GO 55821
// result := [ ] ;
55751: LD_ADDR_VAR 0 3
55755: PUSH
55756: EMPTY
55757: ST_TO_ADDR
// for i in units do
55758: LD_ADDR_VAR 0 4
55762: PUSH
55763: LD_VAR 0 1
55767: PUSH
55768: FOR_IN
55769: IFFALSE 55819
// if GetTag ( i ) = tag then
55771: LD_VAR 0 4
55775: PPUSH
55776: CALL_OW 110
55780: PUSH
55781: LD_VAR 0 2
55785: EQUAL
55786: IFFALSE 55817
// result := Insert ( result , result + 1 , i ) ;
55788: LD_ADDR_VAR 0 3
55792: PUSH
55793: LD_VAR 0 3
55797: PPUSH
55798: LD_VAR 0 3
55802: PUSH
55803: LD_INT 1
55805: PLUS
55806: PPUSH
55807: LD_VAR 0 4
55811: PPUSH
55812: CALL_OW 2
55816: ST_TO_ADDR
55817: GO 55768
55819: POP
55820: POP
// end ;
55821: LD_VAR 0 3
55825: RET
// export function IsDriver ( un ) ; begin
55826: LD_INT 0
55828: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55829: LD_ADDR_VAR 0 2
55833: PUSH
55834: LD_VAR 0 1
55838: PUSH
55839: LD_INT 55
55841: PUSH
55842: EMPTY
55843: LIST
55844: PPUSH
55845: CALL_OW 69
55849: IN
55850: ST_TO_ADDR
// end ;
55851: LD_VAR 0 2
55855: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55856: LD_INT 0
55858: PPUSH
55859: PPUSH
// list := [ ] ;
55860: LD_ADDR_VAR 0 5
55864: PUSH
55865: EMPTY
55866: ST_TO_ADDR
// case d of 0 :
55867: LD_VAR 0 3
55871: PUSH
55872: LD_INT 0
55874: DOUBLE
55875: EQUAL
55876: IFTRUE 55880
55878: GO 56013
55880: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55881: LD_ADDR_VAR 0 5
55885: PUSH
55886: LD_VAR 0 1
55890: PUSH
55891: LD_INT 4
55893: MINUS
55894: PUSH
55895: LD_VAR 0 2
55899: PUSH
55900: LD_INT 4
55902: MINUS
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: LIST
55911: PUSH
55912: LD_VAR 0 1
55916: PUSH
55917: LD_INT 3
55919: MINUS
55920: PUSH
55921: LD_VAR 0 2
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: LIST
55933: PUSH
55934: LD_VAR 0 1
55938: PUSH
55939: LD_INT 4
55941: PLUS
55942: PUSH
55943: LD_VAR 0 2
55947: PUSH
55948: LD_INT 4
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: LIST
55955: PUSH
55956: LD_VAR 0 1
55960: PUSH
55961: LD_INT 3
55963: PLUS
55964: PUSH
55965: LD_VAR 0 2
55969: PUSH
55970: LD_INT 3
55972: PLUS
55973: PUSH
55974: LD_INT 5
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: LIST
55981: PUSH
55982: LD_VAR 0 1
55986: PUSH
55987: LD_VAR 0 2
55991: PUSH
55992: LD_INT 4
55994: PLUS
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: LIST
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: ST_TO_ADDR
// end ; 1 :
56011: GO 56711
56013: LD_INT 1
56015: DOUBLE
56016: EQUAL
56017: IFTRUE 56021
56019: GO 56154
56021: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56022: LD_ADDR_VAR 0 5
56026: PUSH
56027: LD_VAR 0 1
56031: PUSH
56032: LD_VAR 0 2
56036: PUSH
56037: LD_INT 4
56039: MINUS
56040: PUSH
56041: LD_INT 3
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: LIST
56048: PUSH
56049: LD_VAR 0 1
56053: PUSH
56054: LD_INT 3
56056: MINUS
56057: PUSH
56058: LD_VAR 0 2
56062: PUSH
56063: LD_INT 3
56065: MINUS
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: LIST
56074: PUSH
56075: LD_VAR 0 1
56079: PUSH
56080: LD_INT 4
56082: MINUS
56083: PUSH
56084: LD_VAR 0 2
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: LIST
56096: PUSH
56097: LD_VAR 0 1
56101: PUSH
56102: LD_VAR 0 2
56106: PUSH
56107: LD_INT 3
56109: PLUS
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: LIST
56118: PUSH
56119: LD_VAR 0 1
56123: PUSH
56124: LD_INT 4
56126: PLUS
56127: PUSH
56128: LD_VAR 0 2
56132: PUSH
56133: LD_INT 4
56135: PLUS
56136: PUSH
56137: LD_INT 5
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: LIST
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: ST_TO_ADDR
// end ; 2 :
56152: GO 56711
56154: LD_INT 2
56156: DOUBLE
56157: EQUAL
56158: IFTRUE 56162
56160: GO 56291
56162: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56163: LD_ADDR_VAR 0 5
56167: PUSH
56168: LD_VAR 0 1
56172: PUSH
56173: LD_VAR 0 2
56177: PUSH
56178: LD_INT 3
56180: MINUS
56181: PUSH
56182: LD_INT 3
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: LIST
56189: PUSH
56190: LD_VAR 0 1
56194: PUSH
56195: LD_INT 4
56197: PLUS
56198: PUSH
56199: LD_VAR 0 2
56203: PUSH
56204: LD_INT 4
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: LIST
56211: PUSH
56212: LD_VAR 0 1
56216: PUSH
56217: LD_VAR 0 2
56221: PUSH
56222: LD_INT 4
56224: PLUS
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: LIST
56233: PUSH
56234: LD_VAR 0 1
56238: PUSH
56239: LD_INT 3
56241: MINUS
56242: PUSH
56243: LD_VAR 0 2
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: LIST
56255: PUSH
56256: LD_VAR 0 1
56260: PUSH
56261: LD_INT 4
56263: MINUS
56264: PUSH
56265: LD_VAR 0 2
56269: PUSH
56270: LD_INT 4
56272: MINUS
56273: PUSH
56274: LD_INT 2
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: ST_TO_ADDR
// end ; 3 :
56289: GO 56711
56291: LD_INT 3
56293: DOUBLE
56294: EQUAL
56295: IFTRUE 56299
56297: GO 56432
56299: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56300: LD_ADDR_VAR 0 5
56304: PUSH
56305: LD_VAR 0 1
56309: PUSH
56310: LD_INT 3
56312: PLUS
56313: PUSH
56314: LD_VAR 0 2
56318: PUSH
56319: LD_INT 4
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: PUSH
56327: LD_VAR 0 1
56331: PUSH
56332: LD_INT 4
56334: PLUS
56335: PUSH
56336: LD_VAR 0 2
56340: PUSH
56341: LD_INT 4
56343: PLUS
56344: PUSH
56345: LD_INT 5
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: LIST
56352: PUSH
56353: LD_VAR 0 1
56357: PUSH
56358: LD_INT 4
56360: MINUS
56361: PUSH
56362: LD_VAR 0 2
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: LIST
56374: PUSH
56375: LD_VAR 0 1
56379: PUSH
56380: LD_VAR 0 2
56384: PUSH
56385: LD_INT 4
56387: MINUS
56388: PUSH
56389: LD_INT 3
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: LIST
56396: PUSH
56397: LD_VAR 0 1
56401: PUSH
56402: LD_INT 3
56404: MINUS
56405: PUSH
56406: LD_VAR 0 2
56410: PUSH
56411: LD_INT 3
56413: MINUS
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: LIST
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: ST_TO_ADDR
// end ; 4 :
56430: GO 56711
56432: LD_INT 4
56434: DOUBLE
56435: EQUAL
56436: IFTRUE 56440
56438: GO 56573
56440: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56441: LD_ADDR_VAR 0 5
56445: PUSH
56446: LD_VAR 0 1
56450: PUSH
56451: LD_VAR 0 2
56455: PUSH
56456: LD_INT 4
56458: PLUS
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: PUSH
56468: LD_VAR 0 1
56472: PUSH
56473: LD_INT 3
56475: PLUS
56476: PUSH
56477: LD_VAR 0 2
56481: PUSH
56482: LD_INT 3
56484: PLUS
56485: PUSH
56486: LD_INT 5
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: LIST
56493: PUSH
56494: LD_VAR 0 1
56498: PUSH
56499: LD_INT 4
56501: PLUS
56502: PUSH
56503: LD_VAR 0 2
56507: PUSH
56508: LD_INT 4
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: PUSH
56516: LD_VAR 0 1
56520: PUSH
56521: LD_VAR 0 2
56525: PUSH
56526: LD_INT 3
56528: MINUS
56529: PUSH
56530: LD_INT 3
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: LIST
56537: PUSH
56538: LD_VAR 0 1
56542: PUSH
56543: LD_INT 4
56545: MINUS
56546: PUSH
56547: LD_VAR 0 2
56551: PUSH
56552: LD_INT 4
56554: MINUS
56555: PUSH
56556: LD_INT 2
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: LIST
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: ST_TO_ADDR
// end ; 5 :
56571: GO 56711
56573: LD_INT 5
56575: DOUBLE
56576: EQUAL
56577: IFTRUE 56581
56579: GO 56710
56581: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56582: LD_ADDR_VAR 0 5
56586: PUSH
56587: LD_VAR 0 1
56591: PUSH
56592: LD_INT 4
56594: MINUS
56595: PUSH
56596: LD_VAR 0 2
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: LIST
56608: PUSH
56609: LD_VAR 0 1
56613: PUSH
56614: LD_VAR 0 2
56618: PUSH
56619: LD_INT 4
56621: MINUS
56622: PUSH
56623: LD_INT 3
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: LIST
56630: PUSH
56631: LD_VAR 0 1
56635: PUSH
56636: LD_INT 4
56638: PLUS
56639: PUSH
56640: LD_VAR 0 2
56644: PUSH
56645: LD_INT 4
56647: PLUS
56648: PUSH
56649: LD_INT 5
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: LIST
56656: PUSH
56657: LD_VAR 0 1
56661: PUSH
56662: LD_INT 3
56664: PLUS
56665: PUSH
56666: LD_VAR 0 2
56670: PUSH
56671: LD_INT 4
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: LIST
56678: PUSH
56679: LD_VAR 0 1
56683: PUSH
56684: LD_VAR 0 2
56688: PUSH
56689: LD_INT 3
56691: PLUS
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: LIST
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: ST_TO_ADDR
// end ; end ;
56708: GO 56711
56710: POP
// result := list ;
56711: LD_ADDR_VAR 0 4
56715: PUSH
56716: LD_VAR 0 5
56720: ST_TO_ADDR
// end ;
56721: LD_VAR 0 4
56725: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56726: LD_INT 0
56728: PPUSH
56729: PPUSH
56730: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56731: LD_VAR 0 1
56735: NOT
56736: PUSH
56737: LD_VAR 0 2
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 2
56747: PUSH
56748: LD_INT 3
56750: PUSH
56751: LD_INT 4
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: IN
56760: NOT
56761: OR
56762: IFFALSE 56766
// exit ;
56764: GO 56858
// tmp := [ ] ;
56766: LD_ADDR_VAR 0 5
56770: PUSH
56771: EMPTY
56772: ST_TO_ADDR
// for i in units do
56773: LD_ADDR_VAR 0 4
56777: PUSH
56778: LD_VAR 0 1
56782: PUSH
56783: FOR_IN
56784: IFFALSE 56827
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56786: LD_ADDR_VAR 0 5
56790: PUSH
56791: LD_VAR 0 5
56795: PPUSH
56796: LD_VAR 0 5
56800: PUSH
56801: LD_INT 1
56803: PLUS
56804: PPUSH
56805: LD_VAR 0 4
56809: PPUSH
56810: LD_VAR 0 2
56814: PPUSH
56815: CALL_OW 259
56819: PPUSH
56820: CALL_OW 2
56824: ST_TO_ADDR
56825: GO 56783
56827: POP
56828: POP
// if not tmp then
56829: LD_VAR 0 5
56833: NOT
56834: IFFALSE 56838
// exit ;
56836: GO 56858
// result := SortListByListDesc ( units , tmp ) ;
56838: LD_ADDR_VAR 0 3
56842: PUSH
56843: LD_VAR 0 1
56847: PPUSH
56848: LD_VAR 0 5
56852: PPUSH
56853: CALL_OW 77
56857: ST_TO_ADDR
// end ;
56858: LD_VAR 0 3
56862: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56863: LD_INT 0
56865: PPUSH
56866: PPUSH
56867: PPUSH
// x := GetX ( building ) ;
56868: LD_ADDR_VAR 0 4
56872: PUSH
56873: LD_VAR 0 2
56877: PPUSH
56878: CALL_OW 250
56882: ST_TO_ADDR
// y := GetY ( building ) ;
56883: LD_ADDR_VAR 0 5
56887: PUSH
56888: LD_VAR 0 2
56892: PPUSH
56893: CALL_OW 251
56897: ST_TO_ADDR
// if GetTaskList ( unit ) then
56898: LD_VAR 0 1
56902: PPUSH
56903: CALL_OW 437
56907: IFFALSE 57002
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56909: LD_STRING e
56911: PUSH
56912: LD_VAR 0 1
56916: PPUSH
56917: CALL_OW 437
56921: PUSH
56922: LD_INT 1
56924: ARRAY
56925: PUSH
56926: LD_INT 1
56928: ARRAY
56929: EQUAL
56930: PUSH
56931: LD_VAR 0 4
56935: PUSH
56936: LD_VAR 0 1
56940: PPUSH
56941: CALL_OW 437
56945: PUSH
56946: LD_INT 1
56948: ARRAY
56949: PUSH
56950: LD_INT 2
56952: ARRAY
56953: EQUAL
56954: AND
56955: PUSH
56956: LD_VAR 0 5
56960: PUSH
56961: LD_VAR 0 1
56965: PPUSH
56966: CALL_OW 437
56970: PUSH
56971: LD_INT 1
56973: ARRAY
56974: PUSH
56975: LD_INT 3
56977: ARRAY
56978: EQUAL
56979: AND
56980: IFFALSE 56992
// result := true else
56982: LD_ADDR_VAR 0 3
56986: PUSH
56987: LD_INT 1
56989: ST_TO_ADDR
56990: GO 57000
// result := false ;
56992: LD_ADDR_VAR 0 3
56996: PUSH
56997: LD_INT 0
56999: ST_TO_ADDR
// end else
57000: GO 57010
// result := false ;
57002: LD_ADDR_VAR 0 3
57006: PUSH
57007: LD_INT 0
57009: ST_TO_ADDR
// end ;
57010: LD_VAR 0 3
57014: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57015: LD_INT 0
57017: PPUSH
57018: PPUSH
57019: PPUSH
57020: PPUSH
// if not unit or not area then
57021: LD_VAR 0 1
57025: NOT
57026: PUSH
57027: LD_VAR 0 2
57031: NOT
57032: OR
57033: IFFALSE 57037
// exit ;
57035: GO 57201
// tmp := AreaToList ( area , i ) ;
57037: LD_ADDR_VAR 0 6
57041: PUSH
57042: LD_VAR 0 2
57046: PPUSH
57047: LD_VAR 0 5
57051: PPUSH
57052: CALL_OW 517
57056: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57057: LD_ADDR_VAR 0 5
57061: PUSH
57062: DOUBLE
57063: LD_INT 1
57065: DEC
57066: ST_TO_ADDR
57067: LD_VAR 0 6
57071: PUSH
57072: LD_INT 1
57074: ARRAY
57075: PUSH
57076: FOR_TO
57077: IFFALSE 57199
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57079: LD_ADDR_VAR 0 7
57083: PUSH
57084: LD_VAR 0 6
57088: PUSH
57089: LD_INT 1
57091: ARRAY
57092: PUSH
57093: LD_VAR 0 5
57097: ARRAY
57098: PUSH
57099: LD_VAR 0 6
57103: PUSH
57104: LD_INT 2
57106: ARRAY
57107: PUSH
57108: LD_VAR 0 5
57112: ARRAY
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57118: LD_VAR 0 7
57122: PUSH
57123: LD_INT 1
57125: ARRAY
57126: PPUSH
57127: LD_VAR 0 7
57131: PUSH
57132: LD_INT 2
57134: ARRAY
57135: PPUSH
57136: CALL_OW 428
57140: PUSH
57141: LD_INT 0
57143: EQUAL
57144: IFFALSE 57197
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57146: LD_VAR 0 1
57150: PPUSH
57151: LD_VAR 0 7
57155: PUSH
57156: LD_INT 1
57158: ARRAY
57159: PPUSH
57160: LD_VAR 0 7
57164: PUSH
57165: LD_INT 2
57167: ARRAY
57168: PPUSH
57169: LD_VAR 0 3
57173: PPUSH
57174: CALL_OW 48
// result := IsPlaced ( unit ) ;
57178: LD_ADDR_VAR 0 4
57182: PUSH
57183: LD_VAR 0 1
57187: PPUSH
57188: CALL_OW 305
57192: ST_TO_ADDR
// exit ;
57193: POP
57194: POP
57195: GO 57201
// end ; end ;
57197: GO 57076
57199: POP
57200: POP
// end ;
57201: LD_VAR 0 4
57205: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57206: LD_INT 0
57208: PPUSH
57209: PPUSH
57210: PPUSH
// if not side or side > 8 then
57211: LD_VAR 0 1
57215: NOT
57216: PUSH
57217: LD_VAR 0 1
57221: PUSH
57222: LD_INT 8
57224: GREATER
57225: OR
57226: IFFALSE 57230
// exit ;
57228: GO 57417
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57230: LD_ADDR_VAR 0 4
57234: PUSH
57235: LD_INT 22
57237: PUSH
57238: LD_VAR 0 1
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 21
57249: PUSH
57250: LD_INT 3
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PPUSH
57261: CALL_OW 69
57265: ST_TO_ADDR
// if not tmp then
57266: LD_VAR 0 4
57270: NOT
57271: IFFALSE 57275
// exit ;
57273: GO 57417
// enable_addtolog := true ;
57275: LD_ADDR_OWVAR 81
57279: PUSH
57280: LD_INT 1
57282: ST_TO_ADDR
// AddToLog ( [ ) ;
57283: LD_STRING [
57285: PPUSH
57286: CALL_OW 561
// for i in tmp do
57290: LD_ADDR_VAR 0 3
57294: PUSH
57295: LD_VAR 0 4
57299: PUSH
57300: FOR_IN
57301: IFFALSE 57408
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57303: LD_STRING [
57305: PUSH
57306: LD_VAR 0 3
57310: PPUSH
57311: CALL_OW 266
57315: STR
57316: PUSH
57317: LD_STRING , 
57319: STR
57320: PUSH
57321: LD_VAR 0 3
57325: PPUSH
57326: CALL_OW 250
57330: STR
57331: PUSH
57332: LD_STRING , 
57334: STR
57335: PUSH
57336: LD_VAR 0 3
57340: PPUSH
57341: CALL_OW 251
57345: STR
57346: PUSH
57347: LD_STRING , 
57349: STR
57350: PUSH
57351: LD_VAR 0 3
57355: PPUSH
57356: CALL_OW 254
57360: STR
57361: PUSH
57362: LD_STRING , 
57364: STR
57365: PUSH
57366: LD_VAR 0 3
57370: PPUSH
57371: LD_INT 1
57373: PPUSH
57374: CALL_OW 268
57378: STR
57379: PUSH
57380: LD_STRING , 
57382: STR
57383: PUSH
57384: LD_VAR 0 3
57388: PPUSH
57389: LD_INT 2
57391: PPUSH
57392: CALL_OW 268
57396: STR
57397: PUSH
57398: LD_STRING ],
57400: STR
57401: PPUSH
57402: CALL_OW 561
// end ;
57406: GO 57300
57408: POP
57409: POP
// AddToLog ( ]; ) ;
57410: LD_STRING ];
57412: PPUSH
57413: CALL_OW 561
// end ;
57417: LD_VAR 0 2
57421: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57422: LD_INT 0
57424: PPUSH
57425: PPUSH
57426: PPUSH
57427: PPUSH
57428: PPUSH
// if not area or not rate or not max then
57429: LD_VAR 0 1
57433: NOT
57434: PUSH
57435: LD_VAR 0 2
57439: NOT
57440: OR
57441: PUSH
57442: LD_VAR 0 4
57446: NOT
57447: OR
57448: IFFALSE 57452
// exit ;
57450: GO 57644
// while 1 do
57452: LD_INT 1
57454: IFFALSE 57644
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57456: LD_ADDR_VAR 0 9
57460: PUSH
57461: LD_VAR 0 1
57465: PPUSH
57466: LD_INT 1
57468: PPUSH
57469: CALL_OW 287
57473: PUSH
57474: LD_INT 10
57476: MUL
57477: ST_TO_ADDR
// r := rate / 10 ;
57478: LD_ADDR_VAR 0 7
57482: PUSH
57483: LD_VAR 0 2
57487: PUSH
57488: LD_INT 10
57490: DIVREAL
57491: ST_TO_ADDR
// time := 1 1$00 ;
57492: LD_ADDR_VAR 0 8
57496: PUSH
57497: LD_INT 2100
57499: ST_TO_ADDR
// if amount < min then
57500: LD_VAR 0 9
57504: PUSH
57505: LD_VAR 0 3
57509: LESS
57510: IFFALSE 57528
// r := r * 2 else
57512: LD_ADDR_VAR 0 7
57516: PUSH
57517: LD_VAR 0 7
57521: PUSH
57522: LD_INT 2
57524: MUL
57525: ST_TO_ADDR
57526: GO 57554
// if amount > max then
57528: LD_VAR 0 9
57532: PUSH
57533: LD_VAR 0 4
57537: GREATER
57538: IFFALSE 57554
// r := r / 2 ;
57540: LD_ADDR_VAR 0 7
57544: PUSH
57545: LD_VAR 0 7
57549: PUSH
57550: LD_INT 2
57552: DIVREAL
57553: ST_TO_ADDR
// time := time / r ;
57554: LD_ADDR_VAR 0 8
57558: PUSH
57559: LD_VAR 0 8
57563: PUSH
57564: LD_VAR 0 7
57568: DIVREAL
57569: ST_TO_ADDR
// if time < 0 then
57570: LD_VAR 0 8
57574: PUSH
57575: LD_INT 0
57577: LESS
57578: IFFALSE 57595
// time := time * - 1 ;
57580: LD_ADDR_VAR 0 8
57584: PUSH
57585: LD_VAR 0 8
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: MUL
57594: ST_TO_ADDR
// wait ( time ) ;
57595: LD_VAR 0 8
57599: PPUSH
57600: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57604: LD_INT 35
57606: PPUSH
57607: LD_INT 875
57609: PPUSH
57610: CALL_OW 12
57614: PPUSH
57615: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57619: LD_INT 1
57621: PPUSH
57622: LD_INT 5
57624: PPUSH
57625: CALL_OW 12
57629: PPUSH
57630: LD_VAR 0 1
57634: PPUSH
57635: LD_INT 1
57637: PPUSH
57638: CALL_OW 55
// end ;
57642: GO 57452
// end ;
57644: LD_VAR 0 5
57648: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57649: LD_INT 0
57651: PPUSH
57652: PPUSH
57653: PPUSH
57654: PPUSH
57655: PPUSH
57656: PPUSH
57657: PPUSH
57658: PPUSH
// if not turrets or not factories then
57659: LD_VAR 0 1
57663: NOT
57664: PUSH
57665: LD_VAR 0 2
57669: NOT
57670: OR
57671: IFFALSE 57675
// exit ;
57673: GO 57982
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57675: LD_ADDR_VAR 0 10
57679: PUSH
57680: LD_INT 5
57682: PUSH
57683: LD_INT 6
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: LD_INT 4
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 3
57702: PUSH
57703: LD_INT 5
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 24
57717: PUSH
57718: LD_INT 25
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 23
57727: PUSH
57728: LD_INT 27
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 42
57741: PUSH
57742: LD_INT 43
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 44
57751: PUSH
57752: LD_INT 46
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 45
57761: PUSH
57762: LD_INT 47
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: LIST
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: LIST
57778: ST_TO_ADDR
// result := [ ] ;
57779: LD_ADDR_VAR 0 3
57783: PUSH
57784: EMPTY
57785: ST_TO_ADDR
// for i in turrets do
57786: LD_ADDR_VAR 0 4
57790: PUSH
57791: LD_VAR 0 1
57795: PUSH
57796: FOR_IN
57797: IFFALSE 57980
// begin nat := GetNation ( i ) ;
57799: LD_ADDR_VAR 0 7
57803: PUSH
57804: LD_VAR 0 4
57808: PPUSH
57809: CALL_OW 248
57813: ST_TO_ADDR
// weapon := 0 ;
57814: LD_ADDR_VAR 0 8
57818: PUSH
57819: LD_INT 0
57821: ST_TO_ADDR
// if not nat then
57822: LD_VAR 0 7
57826: NOT
57827: IFFALSE 57831
// continue ;
57829: GO 57796
// for j in list [ nat ] do
57831: LD_ADDR_VAR 0 5
57835: PUSH
57836: LD_VAR 0 10
57840: PUSH
57841: LD_VAR 0 7
57845: ARRAY
57846: PUSH
57847: FOR_IN
57848: IFFALSE 57889
// if GetBWeapon ( i ) = j [ 1 ] then
57850: LD_VAR 0 4
57854: PPUSH
57855: CALL_OW 269
57859: PUSH
57860: LD_VAR 0 5
57864: PUSH
57865: LD_INT 1
57867: ARRAY
57868: EQUAL
57869: IFFALSE 57887
// begin weapon := j [ 2 ] ;
57871: LD_ADDR_VAR 0 8
57875: PUSH
57876: LD_VAR 0 5
57880: PUSH
57881: LD_INT 2
57883: ARRAY
57884: ST_TO_ADDR
// break ;
57885: GO 57889
// end ;
57887: GO 57847
57889: POP
57890: POP
// if not weapon then
57891: LD_VAR 0 8
57895: NOT
57896: IFFALSE 57900
// continue ;
57898: GO 57796
// for k in factories do
57900: LD_ADDR_VAR 0 6
57904: PUSH
57905: LD_VAR 0 2
57909: PUSH
57910: FOR_IN
57911: IFFALSE 57976
// begin weapons := AvailableWeaponList ( k ) ;
57913: LD_ADDR_VAR 0 9
57917: PUSH
57918: LD_VAR 0 6
57922: PPUSH
57923: CALL_OW 478
57927: ST_TO_ADDR
// if not weapons then
57928: LD_VAR 0 9
57932: NOT
57933: IFFALSE 57937
// continue ;
57935: GO 57910
// if weapon in weapons then
57937: LD_VAR 0 8
57941: PUSH
57942: LD_VAR 0 9
57946: IN
57947: IFFALSE 57974
// begin result := [ i , weapon ] ;
57949: LD_ADDR_VAR 0 3
57953: PUSH
57954: LD_VAR 0 4
57958: PUSH
57959: LD_VAR 0 8
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: ST_TO_ADDR
// exit ;
57968: POP
57969: POP
57970: POP
57971: POP
57972: GO 57982
// end ; end ;
57974: GO 57910
57976: POP
57977: POP
// end ;
57978: GO 57796
57980: POP
57981: POP
// end ;
57982: LD_VAR 0 3
57986: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57987: LD_INT 0
57989: PPUSH
// if not side or side > 8 then
57990: LD_VAR 0 3
57994: NOT
57995: PUSH
57996: LD_VAR 0 3
58000: PUSH
58001: LD_INT 8
58003: GREATER
58004: OR
58005: IFFALSE 58009
// exit ;
58007: GO 58068
// if not range then
58009: LD_VAR 0 4
58013: NOT
58014: IFFALSE 58025
// range := - 12 ;
58016: LD_ADDR_VAR 0 4
58020: PUSH
58021: LD_INT 12
58023: NEG
58024: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58025: LD_VAR 0 1
58029: PPUSH
58030: LD_VAR 0 2
58034: PPUSH
58035: LD_VAR 0 3
58039: PPUSH
58040: LD_VAR 0 4
58044: PPUSH
58045: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58049: LD_VAR 0 1
58053: PPUSH
58054: LD_VAR 0 2
58058: PPUSH
58059: LD_VAR 0 3
58063: PPUSH
58064: CALL_OW 331
// end ;
58068: LD_VAR 0 5
58072: RET
// export function Video ( mode ) ; begin
58073: LD_INT 0
58075: PPUSH
// ingame_video = mode ;
58076: LD_ADDR_OWVAR 52
58080: PUSH
58081: LD_VAR 0 1
58085: ST_TO_ADDR
// interface_hidden = mode ;
58086: LD_ADDR_OWVAR 54
58090: PUSH
58091: LD_VAR 0 1
58095: ST_TO_ADDR
// end ;
58096: LD_VAR 0 2
58100: RET
// export function Join ( array , element ) ; begin
58101: LD_INT 0
58103: PPUSH
// result := array ^ element ;
58104: LD_ADDR_VAR 0 3
58108: PUSH
58109: LD_VAR 0 1
58113: PUSH
58114: LD_VAR 0 2
58118: ADD
58119: ST_TO_ADDR
// end ;
58120: LD_VAR 0 3
58124: RET
// export function JoinUnion ( array , element ) ; begin
58125: LD_INT 0
58127: PPUSH
// result := array union element ;
58128: LD_ADDR_VAR 0 3
58132: PUSH
58133: LD_VAR 0 1
58137: PUSH
58138: LD_VAR 0 2
58142: UNION
58143: ST_TO_ADDR
// end ;
58144: LD_VAR 0 3
58148: RET
// export function GetBehemoths ( side ) ; begin
58149: LD_INT 0
58151: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58152: LD_ADDR_VAR 0 2
58156: PUSH
58157: LD_INT 22
58159: PUSH
58160: LD_VAR 0 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 31
58171: PUSH
58172: LD_INT 25
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PPUSH
58183: CALL_OW 69
58187: ST_TO_ADDR
// end ;
58188: LD_VAR 0 2
58192: RET
// export function Shuffle ( array ) ; var i , index ; begin
58193: LD_INT 0
58195: PPUSH
58196: PPUSH
58197: PPUSH
// result := [ ] ;
58198: LD_ADDR_VAR 0 2
58202: PUSH
58203: EMPTY
58204: ST_TO_ADDR
// if not array then
58205: LD_VAR 0 1
58209: NOT
58210: IFFALSE 58214
// exit ;
58212: GO 58313
// Randomize ;
58214: CALL_OW 10
// for i = array downto 1 do
58218: LD_ADDR_VAR 0 3
58222: PUSH
58223: DOUBLE
58224: LD_VAR 0 1
58228: INC
58229: ST_TO_ADDR
58230: LD_INT 1
58232: PUSH
58233: FOR_DOWNTO
58234: IFFALSE 58311
// begin index := rand ( 1 , array ) ;
58236: LD_ADDR_VAR 0 4
58240: PUSH
58241: LD_INT 1
58243: PPUSH
58244: LD_VAR 0 1
58248: PPUSH
58249: CALL_OW 12
58253: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58254: LD_ADDR_VAR 0 2
58258: PUSH
58259: LD_VAR 0 2
58263: PPUSH
58264: LD_VAR 0 2
58268: PUSH
58269: LD_INT 1
58271: PLUS
58272: PPUSH
58273: LD_VAR 0 1
58277: PUSH
58278: LD_VAR 0 4
58282: ARRAY
58283: PPUSH
58284: CALL_OW 2
58288: ST_TO_ADDR
// array := Delete ( array , index ) ;
58289: LD_ADDR_VAR 0 1
58293: PUSH
58294: LD_VAR 0 1
58298: PPUSH
58299: LD_VAR 0 4
58303: PPUSH
58304: CALL_OW 3
58308: ST_TO_ADDR
// end ;
58309: GO 58233
58311: POP
58312: POP
// end ;
58313: LD_VAR 0 2
58317: RET
// export function GetBaseMaterials ( base ) ; begin
58318: LD_INT 0
58320: PPUSH
// result := [ 0 , 0 , 0 ] ;
58321: LD_ADDR_VAR 0 2
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: LIST
58339: ST_TO_ADDR
// if not base then
58340: LD_VAR 0 1
58344: NOT
58345: IFFALSE 58349
// exit ;
58347: GO 58398
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58349: LD_ADDR_VAR 0 2
58353: PUSH
58354: LD_VAR 0 1
58358: PPUSH
58359: LD_INT 1
58361: PPUSH
58362: CALL_OW 275
58366: PUSH
58367: LD_VAR 0 1
58371: PPUSH
58372: LD_INT 2
58374: PPUSH
58375: CALL_OW 275
58379: PUSH
58380: LD_VAR 0 1
58384: PPUSH
58385: LD_INT 3
58387: PPUSH
58388: CALL_OW 275
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: LIST
58397: ST_TO_ADDR
// end ;
58398: LD_VAR 0 2
58402: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58403: LD_INT 0
58405: PPUSH
58406: PPUSH
// result := array ;
58407: LD_ADDR_VAR 0 3
58411: PUSH
58412: LD_VAR 0 1
58416: ST_TO_ADDR
// if size > 0 then
58417: LD_VAR 0 2
58421: PUSH
58422: LD_INT 0
58424: GREATER
58425: IFFALSE 58471
// for i := array downto size do
58427: LD_ADDR_VAR 0 4
58431: PUSH
58432: DOUBLE
58433: LD_VAR 0 1
58437: INC
58438: ST_TO_ADDR
58439: LD_VAR 0 2
58443: PUSH
58444: FOR_DOWNTO
58445: IFFALSE 58469
// result := Delete ( result , result ) ;
58447: LD_ADDR_VAR 0 3
58451: PUSH
58452: LD_VAR 0 3
58456: PPUSH
58457: LD_VAR 0 3
58461: PPUSH
58462: CALL_OW 3
58466: ST_TO_ADDR
58467: GO 58444
58469: POP
58470: POP
// end ;
58471: LD_VAR 0 3
58475: RET
// export function ComExit ( unit ) ; var tmp ; begin
58476: LD_INT 0
58478: PPUSH
58479: PPUSH
// if not IsInUnit ( unit ) then
58480: LD_VAR 0 1
58484: PPUSH
58485: CALL_OW 310
58489: NOT
58490: IFFALSE 58494
// exit ;
58492: GO 58554
// tmp := IsInUnit ( unit ) ;
58494: LD_ADDR_VAR 0 3
58498: PUSH
58499: LD_VAR 0 1
58503: PPUSH
58504: CALL_OW 310
58508: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58509: LD_VAR 0 3
58513: PPUSH
58514: CALL_OW 247
58518: PUSH
58519: LD_INT 2
58521: EQUAL
58522: IFFALSE 58535
// ComExitVehicle ( unit ) else
58524: LD_VAR 0 1
58528: PPUSH
58529: CALL_OW 121
58533: GO 58544
// ComExitBuilding ( unit ) ;
58535: LD_VAR 0 1
58539: PPUSH
58540: CALL_OW 122
// result := tmp ;
58544: LD_ADDR_VAR 0 2
58548: PUSH
58549: LD_VAR 0 3
58553: ST_TO_ADDR
// end ;
58554: LD_VAR 0 2
58558: RET
// export function ResetHc ; begin
58559: LD_INT 0
58561: PPUSH
// InitHc ;
58562: CALL_OW 19
// hc_importance := 0 ;
58566: LD_ADDR_OWVAR 32
58570: PUSH
58571: LD_INT 0
58573: ST_TO_ADDR
// end ;
58574: LD_VAR 0 1
58578: RET
