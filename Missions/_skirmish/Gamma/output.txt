// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8617 0 0
// PrepareAmerican ;
 100: CALL 5237 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2712: LD_VAR 0 1
2716: PPUSH
2717: CALL_OW 255
2721: PUSH
2722: LD_INT 3
2724: EQUAL
2725: PUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 263
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: AND
2740: IFFALSE 2750
// comp_tested := true ;
2742: LD_ADDR_EXP 22
2746: PUSH
2747: LD_INT 1
2749: ST_TO_ADDR
// end ;
2750: PPOPN 2
2752: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2753: LD_VAR 0 1
2757: PUSH
2758: LD_INT 22
2760: PUSH
2761: LD_INT 1
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: LD_INT 21
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PPUSH
2782: CALL_OW 69
2786: IN
2787: IFFALSE 2865
// if attacked = false and sikorski_ar = false then
2789: LD_EXP 15
2793: PUSH
2794: LD_INT 0
2796: EQUAL
2797: PUSH
2798: LD_EXP 12
2802: PUSH
2803: LD_INT 0
2805: EQUAL
2806: AND
2807: IFFALSE 2865
// begin attacked := true ;
2809: LD_ADDR_EXP 15
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// if IsInUnit ( donald ) then
2817: LD_EXP 13
2821: PPUSH
2822: CALL_OW 310
2826: IFFALSE 2842
// SayRadio ( donald , DGammaF ) else
2828: LD_EXP 13
2832: PPUSH
2833: LD_STRING DGammaF
2835: PPUSH
2836: CALL_OW 94
2840: GO 2865
// if IsInUnit ( van ) then
2842: LD_EXP 14
2846: PPUSH
2847: CALL_OW 310
2851: IFFALSE 2865
// SayRadio ( van , DGammaM ) ;
2853: LD_EXP 14
2857: PPUSH
2858: LD_STRING DGammaM
2860: PPUSH
2861: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2865: LD_VAR 0 1
2869: PUSH
2870: LD_INT 33
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: IN
2885: IFFALSE 2896
// ComUnlink ( un ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 136
// end ;
2896: PPOPN 1
2898: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2899: LD_VAR 0 2
2903: PPUSH
2904: CALL_OW 258
2908: PUSH
2909: LD_INT 1
2911: EQUAL
2912: IFFALSE 2926
// Say ( sci , Dsci3 ) ;
2914: LD_VAR 0 2
2918: PPUSH
2919: LD_STRING Dsci3
2921: PPUSH
2922: CALL_OW 88
// end ;
2926: PPOPN 2
2928: END
// on BuildingComplete ( b ) do var i ;
2929: LD_INT 0
2931: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2932: LD_VAR 0 1
2936: PPUSH
2937: CALL_OW 266
2941: PUSH
2942: LD_INT 0
2944: EQUAL
2945: PUSH
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 255
2955: PUSH
2956: LD_INT 3
2958: EQUAL
2959: AND
2960: PUSH
2961: LD_EXP 6
2965: PUSH
2966: LD_INT 0
2968: EQUAL
2969: AND
2970: IFFALSE 3034
// begin SetBName ( b , kalinin ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: LD_STRING kalinin
2979: PPUSH
2980: CALL_OW 500
// dep_x := GetX ( b ) ;
2984: LD_ADDR_EXP 7
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 250
2998: ST_TO_ADDR
// dep_y := GetY ( b ) ;
2999: LD_ADDR_EXP 8
3003: PUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 251
3013: ST_TO_ADDR
// depot_rdy := true ;
3014: LD_ADDR_EXP 6
3018: PUSH
3019: LD_INT 1
3021: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3022: LD_EXP 2
3026: PPUSH
3027: LD_STRING Dpop3
3029: PPUSH
3030: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3034: LD_VAR 0 1
3038: PPUSH
3039: CALL_OW 266
3043: PUSH
3044: LD_INT 6
3046: EQUAL
3047: PUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 255
3057: PUSH
3058: LD_INT 3
3060: EQUAL
3061: AND
3062: PUSH
3063: LD_EXP 21
3067: PUSH
3068: LD_INT 0
3070: EQUAL
3071: AND
3072: IFFALSE 3167
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3074: LD_INT 22
3076: PUSH
3077: LD_INT 3
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 25
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PPUSH
3098: CALL_OW 69
3102: PUSH
3103: LD_INT 0
3105: GREATER
3106: IFFALSE 3167
// begin event_comp := true ;
3108: LD_ADDR_EXP 21
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3116: LD_INT 22
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 25
3128: PUSH
3129: LD_INT 4
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 26
3138: PUSH
3139: LD_INT 1
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: PUSH
3156: LD_INT 1
3158: ARRAY
3159: PPUSH
3160: LD_STRING Dsci1
3162: PPUSH
3163: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3167: LD_VAR 0 1
3171: PPUSH
3172: CALL_OW 266
3176: PUSH
3177: LD_INT 32
3179: EQUAL
3180: PUSH
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 255
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: AND
3195: IFFALSE 3260
// begin RaiseSailEvent ( 6 ) ;
3197: LD_INT 6
3199: PPUSH
3200: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3204: LD_VAR 0 1
3208: PPUSH
3209: LD_EXP 18
3213: PUSH
3214: LD_INT 4
3216: ARRAY
3217: PPUSH
3218: CALL_OW 208
// for i = 1 to 4 do
3222: LD_ADDR_VAR 0 2
3226: PUSH
3227: DOUBLE
3228: LD_INT 1
3230: DEC
3231: ST_TO_ADDR
3232: LD_INT 4
3234: PUSH
3235: FOR_TO
3236: IFFALSE 3258
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3238: LD_ADDR_EXP 18
3242: PUSH
3243: LD_EXP 18
3247: PPUSH
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 3
3255: ST_TO_ADDR
3256: GO 3235
3258: POP
3259: POP
// end ; end ;
3260: PPOPN 2
3262: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL 23408 0 1
// if un in Patrol then
3272: LD_VAR 0 1
3276: PUSH
3277: LD_EXP 17
3281: IN
3282: IFFALSE 3300
// Patrol := Patrol diff un ;
3284: LD_ADDR_EXP 17
3288: PUSH
3289: LD_EXP 17
3293: PUSH
3294: LD_VAR 0 1
3298: DIFF
3299: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3300: LD_VAR 0 1
3304: PUSH
3305: LD_INT 22
3307: PUSH
3308: LD_INT 1
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 30
3317: PUSH
3318: LD_INT 32
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 69
3333: IN
3334: IFFALSE 3420
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3336: LD_ADDR_EXP 18
3340: PUSH
3341: LD_EXP 18
3345: PUSH
3346: LD_VAR 0 1
3350: PPUSH
3351: CALL_OW 250
3355: ADD
3356: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3357: LD_ADDR_EXP 18
3361: PUSH
3362: LD_EXP 18
3366: PUSH
3367: LD_VAR 0 1
3371: PPUSH
3372: CALL_OW 251
3376: ADD
3377: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3378: LD_ADDR_EXP 18
3382: PUSH
3383: LD_EXP 18
3387: PUSH
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 254
3397: ADD
3398: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3399: LD_ADDR_EXP 18
3403: PUSH
3404: LD_EXP 18
3408: PUSH
3409: LD_VAR 0 1
3413: PPUSH
3414: CALL_OW 269
3418: ADD
3419: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3420: LD_VAR 0 1
3424: PUSH
3425: LD_INT 33
3427: PUSH
3428: LD_INT 2
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 3
3437: PUSH
3438: LD_INT 34
3440: PUSH
3441: LD_INT 13
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PPUSH
3456: CALL_OW 69
3460: IN
3461: IFFALSE 3477
// new_veh := new_veh + 1 ;
3463: LD_ADDR_EXP 19
3467: PUSH
3468: LD_EXP 19
3472: PUSH
3473: LD_INT 1
3475: PLUS
3476: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3477: LD_VAR 0 1
3481: PUSH
3482: LD_INT 34
3484: PUSH
3485: LD_INT 13
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 69
3496: IN
3497: IFFALSE 3518
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3499: LD_INT 26
3501: PPUSH
3502: LD_INT 3
3504: PPUSH
3505: LD_INT 2
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: LD_INT 13
3513: PPUSH
3514: CALL_OW 185
// if un = am_dep then
3518: LD_VAR 0 1
3522: PUSH
3523: LD_INT 25
3525: EQUAL
3526: IFFALSE 3694
// begin SayRadio ( Platonov , DPlat ) ;
3528: LD_EXP 4
3532: PPUSH
3533: LD_STRING DPlat
3535: PPUSH
3536: CALL_OW 94
// if timer <= 30 30$00 then
3540: LD_EXP 24
3544: PUSH
3545: LD_INT 63000
3547: LESSEQUAL
3548: IFFALSE 3562
// AddMedal ( gamma_med3 , 1 ) else
3550: LD_STRING gamma_med3
3552: PPUSH
3553: LD_INT 1
3555: PPUSH
3556: CALL_OW 101
3560: GO 3612
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3562: LD_EXP 24
3566: PUSH
3567: LD_INT 105000
3569: PUSH
3570: LD_INT 88200
3572: PUSH
3573: LD_INT 73500
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_EXP 1
3585: ARRAY
3586: LESSEQUAL
3587: IFFALSE 3601
// AddMedal ( gamma_med3 , 2 ) else
3589: LD_STRING gamma_med3
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 101
3599: GO 3612
// AddMedal ( gamma_med3 , - 1 ) ;
3601: LD_STRING gamma_med3
3603: PPUSH
3604: LD_INT 1
3606: NEG
3607: PPUSH
3608: CALL_OW 101
// if not comp_tested then
3612: LD_EXP 22
3616: NOT
3617: IFFALSE 3632
// AddMedal ( gamma_med2 , - 1 ) else
3619: LD_STRING gamma_med2
3621: PPUSH
3622: LD_INT 1
3624: NEG
3625: PPUSH
3626: CALL_OW 101
3630: GO 3642
// AddMedal ( gamma_med2 , 1 ) ;
3632: LD_STRING gamma_med2
3634: PPUSH
3635: LD_INT 1
3637: PPUSH
3638: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3642: LD_EXP 9
3646: PPUSH
3647: CALL_OW 301
3651: PUSH
3652: LD_EXP 23
3656: NOT
3657: AND
3658: IFFALSE 3672
// AddMedal ( gamma_med1 , 1 ) else
3660: LD_STRING gamma_med1
3662: PPUSH
3663: LD_INT 1
3665: PPUSH
3666: CALL_OW 101
3670: GO 3683
// AddMedal ( gamma_med1 , - 1 ) ;
3672: LD_STRING gamma_med1
3674: PPUSH
3675: LD_INT 1
3677: NEG
3678: PPUSH
3679: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3683: LD_STRING GAMMA_MEDALS
3685: PPUSH
3686: CALL_OW 102
// YouWin ;
3690: CALL_OW 103
// end ; if un = commander then
3694: LD_VAR 0 1
3698: PUSH
3699: LD_EXP 3
3703: EQUAL
3704: IFFALSE 3713
// YouLost ( comml ) ;
3706: LD_STRING comml
3708: PPUSH
3709: CALL_OW 104
// if un = sikorski then
3713: LD_VAR 0 1
3717: PUSH
3718: LD_EXP 9
3722: EQUAL
3723: IFFALSE 3735
// AddMedal ( gamma_med1 , 1 ) ;
3725: LD_STRING gamma_med1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: CALL_OW 101
// end ;
3735: PPOPN 1
3737: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
// begin if event = 1 then
3749: LD_VAR 0 1
3753: PUSH
3754: LD_INT 1
3756: EQUAL
3757: IFFALSE 4054
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3759: LD_ADDR_VAR 0 4
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 1
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 21
3776: PUSH
3777: LD_INT 3
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 3
3786: PUSH
3787: LD_INT 24
3789: PUSH
3790: LD_INT 1000
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: PPUSH
3806: CALL_OW 69
3810: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3811: LD_ADDR_VAR 0 8
3815: PUSH
3816: LD_INT 22
3818: PUSH
3819: LD_INT 1
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 25
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 24
3838: PUSH
3839: LD_INT 1000
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: PPUSH
3854: CALL_OW 69
3858: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3859: LD_ADDR_VAR 0 9
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 1
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 13
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 69
3892: ST_TO_ADDR
// if engs > 0 then
3893: LD_VAR 0 8
3897: PUSH
3898: LD_INT 0
3900: GREATER
3901: IFFALSE 4006
// for i = 1 to engs do
3903: LD_ADDR_VAR 0 2
3907: PUSH
3908: DOUBLE
3909: LD_INT 1
3911: DEC
3912: ST_TO_ADDR
3913: LD_VAR 0 8
3917: PUSH
3918: FOR_TO
3919: IFFALSE 4004
// begin if IsInUnit ( engs [ i ] ) then
3921: LD_VAR 0 8
3925: PUSH
3926: LD_VAR 0 2
3930: ARRAY
3931: PPUSH
3932: CALL_OW 310
3936: IFFALSE 3953
// ComExitBuilding ( engs [ i ] ) ;
3938: LD_VAR 0 8
3942: PUSH
3943: LD_VAR 0 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3953: LD_INT 7
3955: PPUSH
3956: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3960: LD_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: ARRAY
3970: PPUSH
3971: CALL_OW 314
3975: NOT
3976: IFFALSE 4002
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3978: LD_VAR 0 8
3982: PUSH
3983: LD_VAR 0 2
3987: ARRAY
3988: PPUSH
3989: LD_VAR 0 4
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: CALL_OW 130
// end ;
4002: GO 3918
4004: POP
4005: POP
// if crane > 0 then
4006: LD_VAR 0 9
4010: PUSH
4011: LD_INT 0
4013: GREATER
4014: IFFALSE 4054
// if not HasTask ( crane [ 1 ] ) then
4016: LD_VAR 0 9
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: CALL_OW 314
4029: NOT
4030: IFFALSE 4054
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4032: LD_VAR 0 9
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: LD_VAR 0 4
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: PPUSH
4050: CALL_OW 130
// end ; if event = 2 then
4054: LD_VAR 0 1
4058: PUSH
4059: LD_INT 2
4061: EQUAL
4062: IFFALSE 4184
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4064: LD_ADDR_VAR 0 8
4068: PUSH
4069: LD_INT 22
4071: PUSH
4072: LD_INT 1
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 2
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 69
4097: ST_TO_ADDR
// if engs > 0 then
4098: LD_VAR 0 8
4102: PUSH
4103: LD_INT 0
4105: GREATER
4106: IFFALSE 4184
// for i = 1 to engs do
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: DOUBLE
4114: LD_INT 1
4116: DEC
4117: ST_TO_ADDR
4118: LD_VAR 0 8
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4182
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4126: LD_VAR 0 8
4130: PUSH
4131: LD_VAR 0 2
4135: ARRAY
4136: PPUSH
4137: CALL_OW 314
4141: NOT
4142: PUSH
4143: LD_VAR 0 8
4147: PUSH
4148: LD_VAR 0 2
4152: ARRAY
4153: PPUSH
4154: CALL_OW 310
4158: NOT
4159: AND
4160: IFFALSE 4180
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4162: LD_VAR 0 8
4166: PUSH
4167: LD_VAR 0 2
4171: ARRAY
4172: PPUSH
4173: LD_INT 25
4175: PPUSH
4176: CALL_OW 120
4180: GO 4123
4182: POP
4183: POP
// end ; if event = 3 then
4184: LD_VAR 0 1
4188: PUSH
4189: LD_INT 3
4191: EQUAL
4192: IFFALSE 4556
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4194: LD_ADDR_VAR 0 4
4198: PUSH
4199: LD_INT 22
4201: PUSH
4202: LD_INT 1
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 21
4211: PUSH
4212: LD_INT 1
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 3
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 4
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PUSH
4236: LD_INT 3
4238: PUSH
4239: LD_INT 24
4241: PUSH
4242: LD_INT 800
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: PPUSH
4262: CALL_OW 69
4266: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4267: LD_ADDR_VAR 0 5
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 25
4284: PUSH
4285: LD_INT 4
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 69
4300: ST_TO_ADDR
// if filter > 0 then
4301: LD_VAR 0 4
4305: PUSH
4306: LD_INT 0
4308: GREATER
4309: IFFALSE 4498
// begin for i = 1 to doc do
4311: LD_ADDR_VAR 0 2
4315: PUSH
4316: DOUBLE
4317: LD_INT 1
4319: DEC
4320: ST_TO_ADDR
4321: LD_VAR 0 5
4325: PUSH
4326: FOR_TO
4327: IFFALSE 4427
// begin if IsInUnit ( doc [ i ] ) then
4329: LD_VAR 0 5
4333: PUSH
4334: LD_VAR 0 2
4338: ARRAY
4339: PPUSH
4340: CALL_OW 310
4344: IFFALSE 4361
// ComExitBuilding ( doc [ i ] ) ;
4346: LD_VAR 0 5
4350: PUSH
4351: LD_VAR 0 2
4355: ARRAY
4356: PPUSH
4357: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4361: LD_VAR 0 4
4365: PUSH
4366: LD_INT 1
4368: ARRAY
4369: PPUSH
4370: LD_INT 46
4372: PPUSH
4373: CALL_OW 296
4377: PUSH
4378: LD_INT 10
4380: LESS
4381: PUSH
4382: LD_VAR 0 5
4386: PUSH
4387: LD_VAR 0 2
4391: ARRAY
4392: PPUSH
4393: CALL_OW 314
4397: NOT
4398: AND
4399: IFFALSE 4425
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4401: LD_VAR 0 5
4405: PUSH
4406: LD_VAR 0 2
4410: ARRAY
4411: PPUSH
4412: LD_VAR 0 4
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PPUSH
4421: CALL_OW 128
// end ;
4425: GO 4326
4427: POP
4428: POP
// for i = 1 to filter do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_VAR 0 4
4443: PUSH
4444: FOR_TO
4445: IFFALSE 4494
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4447: LD_VAR 0 4
4451: PUSH
4452: LD_VAR 0 2
4456: ARRAY
4457: PPUSH
4458: LD_INT 46
4460: PPUSH
4461: CALL_OW 296
4465: PUSH
4466: LD_INT 10
4468: GREATER
4469: IFFALSE 4492
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4471: LD_VAR 0 4
4475: PUSH
4476: LD_VAR 0 2
4480: ARRAY
4481: PPUSH
4482: LD_INT 47
4484: PPUSH
4485: LD_INT 12
4487: PPUSH
4488: CALL_OW 111
4492: GO 4444
4494: POP
4495: POP
// end else
4496: GO 4556
// for i = 1 to doc do
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: DOUBLE
4504: LD_INT 1
4506: DEC
4507: ST_TO_ADDR
4508: LD_VAR 0 5
4512: PUSH
4513: FOR_TO
4514: IFFALSE 4554
// if not IsInUnit ( doc [ i ] ) then
4516: LD_VAR 0 5
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: PPUSH
4527: CALL_OW 310
4531: NOT
4532: IFFALSE 4552
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4534: LD_VAR 0 5
4538: PUSH
4539: LD_VAR 0 2
4543: ARRAY
4544: PPUSH
4545: LD_INT 46
4547: PPUSH
4548: CALL_OW 120
4552: GO 4513
4554: POP
4555: POP
// end ; if event = 4 then
4556: LD_VAR 0 1
4560: PUSH
4561: LD_INT 4
4563: EQUAL
4564: IFFALSE 4815
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4566: LD_ADDR_VAR 0 6
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 5
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: ST_TO_ADDR
// for i = 1 to bac do
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: DOUBLE
4606: LD_INT 1
4608: DEC
4609: ST_TO_ADDR
4610: LD_VAR 0 6
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4657
// if UnitsInside ( bac [ i ] ) < 6 then
4618: LD_VAR 0 6
4622: PUSH
4623: LD_VAR 0 2
4627: ARRAY
4628: PPUSH
4629: CALL_OW 313
4633: PUSH
4634: LD_INT 6
4636: LESS
4637: IFFALSE 4655
// place := bac [ i ] ;
4639: LD_ADDR_VAR 0 7
4643: PUSH
4644: LD_VAR 0 6
4648: PUSH
4649: LD_VAR 0 2
4653: ARRAY
4654: ST_TO_ADDR
4655: GO 4615
4657: POP
4658: POP
// if place then
4659: LD_VAR 0 7
4663: IFFALSE 4815
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4665: LD_ADDR_VAR 0 4
4669: PUSH
4670: LD_INT 22
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 25
4695: PUSH
4696: LD_INT 5
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 24
4710: PUSH
4711: LD_INT 1000
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PUSH
4723: EMPTY
4724: LIST
4725: PPUSH
4726: CALL_OW 69
4730: PUSH
4731: LD_EXP 17
4735: DIFF
4736: ST_TO_ADDR
// for i = 1 to filter do
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: DOUBLE
4743: LD_INT 1
4745: DEC
4746: ST_TO_ADDR
4747: LD_VAR 0 4
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4813
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4755: LD_VAR 0 4
4759: PUSH
4760: LD_VAR 0 2
4764: ARRAY
4765: PPUSH
4766: CALL_OW 310
4770: NOT
4771: PUSH
4772: LD_VAR 0 4
4776: PUSH
4777: LD_VAR 0 2
4781: ARRAY
4782: PPUSH
4783: CALL_OW 314
4787: NOT
4788: AND
4789: IFFALSE 4811
// ComEnterUnit ( filter [ i ] , place ) ;
4791: LD_VAR 0 4
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_VAR 0 7
4806: PPUSH
4807: CALL_OW 120
4811: GO 4752
4813: POP
4814: POP
// end ; end ; if event = 5 then
4815: LD_VAR 0 1
4819: PUSH
4820: LD_INT 5
4822: EQUAL
4823: IFFALSE 4977
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4825: LD_INT 12
4827: PPUSH
4828: LD_INT 81
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 70
4842: PUSH
4843: LD_INT 0
4845: EQUAL
4846: IFFALSE 4977
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4848: LD_ADDR_VAR 0 8
4852: PUSH
4853: LD_INT 22
4855: PUSH
4856: LD_INT 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 25
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 69
4881: ST_TO_ADDR
// if engs > 0 then
4882: LD_VAR 0 8
4886: PUSH
4887: LD_INT 0
4889: GREATER
4890: IFFALSE 4977
// for i = 1 to engs do
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: DOUBLE
4898: LD_INT 1
4900: DEC
4901: ST_TO_ADDR
4902: LD_VAR 0 8
4906: PUSH
4907: FOR_TO
4908: IFFALSE 4975
// if not HasTask ( engs [ i ] ) then
4910: LD_VAR 0 8
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: CALL_OW 314
4925: NOT
4926: IFFALSE 4973
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4928: LD_VAR 0 8
4932: PUSH
4933: LD_VAR 0 2
4937: ARRAY
4938: PPUSH
4939: LD_INT 32
4941: PPUSH
4942: LD_EXP 18
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: LD_EXP 18
4955: PUSH
4956: LD_INT 2
4958: ARRAY
4959: PPUSH
4960: LD_EXP 18
4964: PUSH
4965: LD_INT 3
4967: ARRAY
4968: PPUSH
4969: CALL_OW 145
4973: GO 4907
4975: POP
4976: POP
// end ; end ; if event = 6 then
4977: LD_VAR 0 1
4981: PUSH
4982: LD_INT 6
4984: EQUAL
4985: IFFALSE 5169
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4987: LD_ADDR_VAR 0 6
4991: PUSH
4992: LD_INT 22
4994: PUSH
4995: LD_INT 1
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PPUSH
5016: CALL_OW 69
5020: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5021: LD_VAR 0 6
5025: PUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 30
5038: PUSH
5039: LD_INT 32
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 58
5048: PUSH
5049: EMPTY
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: PPUSH
5060: CALL_OW 69
5064: PUSH
5065: LD_INT 0
5067: GREATER
5068: AND
5069: IFFALSE 5169
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5071: LD_ADDR_VAR 0 10
5075: PUSH
5076: LD_INT 22
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 30
5088: PUSH
5089: LD_INT 32
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 58
5098: PUSH
5099: EMPTY
5100: LIST
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: PUSH
5115: LD_INT 1
5117: ARRAY
5118: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: LD_VAR 0 6
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: PPUSH
5133: CALL_OW 313
5137: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5151: LD_VAR 0 3
5155: PUSH
5156: LD_INT 1
5158: ARRAY
5159: PPUSH
5160: LD_VAR 0 10
5164: PPUSH
5165: CALL_OW 180
// end ; end ; end ;
5169: PPOPN 10
5171: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_INT 1
5179: EQUAL
5180: PUSH
5181: LD_VAR 0 2
5185: PUSH
5186: LD_INT 3
5188: EQUAL
5189: AND
5190: IFFALSE 5200
// contact_am := true ;
5192: LD_ADDR_EXP 16
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// end ;
5200: PPOPN 2
5202: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: LD_VAR 0 3
5217: PPUSH
5218: CALL 23506 0 3
// end ;
5222: PPOPN 3
5224: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL 23514 0 1
// end ; end_of_file
5234: PPOPN 1
5236: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
5241: PPUSH
5242: PPUSH
5243: PPUSH
5244: PPUSH
5245: PPUSH
5246: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5247: LD_ADDR_VAR 0 5
5251: PUSH
5252: LD_INT 5
5254: PUSH
5255: LD_INT 6
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: LD_EXP 1
5270: ARRAY
5271: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5272: LD_ADDR_VAR 0 6
5276: PUSH
5277: LD_INT 4
5279: PUSH
5280: LD_INT 4
5282: PUSH
5283: LD_INT 4
5285: PUSH
5286: LD_INT 5
5288: PUSH
5289: LD_INT 5
5291: PUSH
5292: LD_INT 5
5294: PUSH
5295: LD_INT 6
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// SForce := [ ] ;
5307: LD_ADDR_EXP 11
5311: PUSH
5312: EMPTY
5313: ST_TO_ADDR
// Sikorski_Ar := false ;
5314: LD_ADDR_EXP 12
5318: PUSH
5319: LD_INT 0
5321: ST_TO_ADDR
// attacked := false ;
5322: LD_ADDR_EXP 15
5326: PUSH
5327: LD_INT 0
5329: ST_TO_ADDR
// contact_am := false ;
5330: LD_ADDR_EXP 16
5334: PUSH
5335: LD_INT 0
5337: ST_TO_ADDR
// patrol := [ ] ;
5338: LD_ADDR_EXP 17
5342: PUSH
5343: EMPTY
5344: ST_TO_ADDR
// gamma_towers := [ ] ;
5345: LD_ADDR_EXP 18
5349: PUSH
5350: EMPTY
5351: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5352: LD_INT 25
5354: PPUSH
5355: LD_STRING gamma
5357: PPUSH
5358: CALL_OW 500
// uc_side := 1 ;
5362: LD_ADDR_OWVAR 20
5366: PUSH
5367: LD_INT 1
5369: ST_TO_ADDR
// uc_nation := 1 ;
5370: LD_ADDR_OWVAR 21
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// hc_importance := 0 ;
5378: LD_ADDR_OWVAR 32
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5386: LD_ADDR_OWVAR 26
5390: PUSH
5391: LD_STRING Jeremy Sikorski
5393: ST_TO_ADDR
// hc_gallery := us ;
5394: LD_ADDR_OWVAR 33
5398: PUSH
5399: LD_STRING us
5401: ST_TO_ADDR
// hc_face_number := 19 ;
5402: LD_ADDR_OWVAR 34
5406: PUSH
5407: LD_INT 19
5409: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5410: LD_ADDR_OWVAR 31
5414: PUSH
5415: LD_VAR 0 5
5419: PPUSH
5420: LD_VAR 0 5
5424: PUSH
5425: LD_INT 2
5427: PLUS
5428: PPUSH
5429: CALL_OW 12
5433: PUSH
5434: LD_INT 4
5436: PUSH
5437: LD_INT 6
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: ST_TO_ADDR
// hc_sex := sex_male ;
5449: LD_ADDR_OWVAR 27
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// hc_class := 1 ;
5457: LD_ADDR_OWVAR 28
5461: PUSH
5462: LD_INT 1
5464: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5465: LD_ADDR_OWVAR 29
5469: PUSH
5470: LD_INT 10
5472: PUSH
5473: LD_INT 11
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: ST_TO_ADDR
// sikorski := CreateHuman ;
5480: LD_ADDR_EXP 9
5484: PUSH
5485: CALL_OW 44
5489: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5490: LD_ADDR_OWVAR 26
5494: PUSH
5495: LD_STRING Lucy Donaldson
5497: ST_TO_ADDR
// hc_gallery := us ;
5498: LD_ADDR_OWVAR 33
5502: PUSH
5503: LD_STRING us
5505: ST_TO_ADDR
// hc_face_number := 2 ;
5506: LD_ADDR_OWVAR 34
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5514: LD_ADDR_OWVAR 31
5518: PUSH
5519: LD_VAR 0 5
5523: PPUSH
5524: LD_VAR 0 5
5528: PUSH
5529: LD_INT 2
5531: PLUS
5532: PPUSH
5533: CALL_OW 12
5537: PUSH
5538: LD_INT 6
5540: PUSH
5541: LD_INT 4
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: ST_TO_ADDR
// hc_sex := sex_female ;
5553: LD_ADDR_OWVAR 27
5557: PUSH
5558: LD_INT 2
5560: ST_TO_ADDR
// hc_class := 1 ;
5561: LD_ADDR_OWVAR 28
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// donald := CreateHuman ;
5569: LD_ADDR_EXP 13
5573: PUSH
5574: CALL_OW 44
5578: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5579: LD_ADDR_OWVAR 26
5583: PUSH
5584: LD_STRING Peter Van Houten
5586: ST_TO_ADDR
// hc_gallery := us ;
5587: LD_ADDR_OWVAR 33
5591: PUSH
5592: LD_STRING us
5594: ST_TO_ADDR
// hc_face_number := 16 ;
5595: LD_ADDR_OWVAR 34
5599: PUSH
5600: LD_INT 16
5602: ST_TO_ADDR
// hc_sex := sex_male ;
5603: LD_ADDR_OWVAR 27
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// van := CreateHuman ;
5611: LD_ADDR_EXP 14
5615: PUSH
5616: CALL_OW 44
5620: ST_TO_ADDR
// hc_importance := 0 ;
5621: LD_ADDR_OWVAR 32
5625: PUSH
5626: LD_INT 0
5628: ST_TO_ADDR
// case dif of 1 :
5629: LD_EXP 1
5633: PUSH
5634: LD_INT 1
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5642
5640: GO 5653
5642: POP
// lw = 1 ; 2 :
5643: LD_ADDR_VAR 0 8
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
5651: GO 5700
5653: LD_INT 2
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5661
5659: GO 5680
5661: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5662: LD_ADDR_VAR 0 8
5666: PUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: CALL_OW 12
5677: ST_TO_ADDR
5678: GO 5700
5680: LD_INT 3
5682: DOUBLE
5683: EQUAL
5684: IFTRUE 5688
5686: GO 5699
5688: POP
// lw = 2 ; end ;
5689: LD_ADDR_VAR 0 8
5693: PUSH
5694: LD_INT 2
5696: ST_TO_ADDR
5697: GO 5700
5699: POP
// case lw of 1 :
5700: LD_VAR 0 8
5704: PUSH
5705: LD_INT 1
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5728
5713: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5714: LD_EXP 13
5718: PPUSH
5719: LD_INT 25
5721: PPUSH
5722: CALL_OW 52
5726: GO 5752
5728: LD_INT 2
5730: DOUBLE
5731: EQUAL
5732: IFTRUE 5736
5734: GO 5751
5736: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5737: LD_EXP 14
5741: PPUSH
5742: LD_INT 25
5744: PPUSH
5745: CALL_OW 52
5749: GO 5752
5751: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5752: LD_ADDR_VAR 0 2
5756: PUSH
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 30
5769: PUSH
5770: LD_INT 32
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: PUSH
5786: FOR_IN
5787: IFFALSE 5841
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5789: LD_INT 1
5791: PPUSH
5792: LD_VAR 0 5
5796: PPUSH
5797: CALL 734 0 2
5801: PPUSH
5802: LD_VAR 0 2
5806: PPUSH
5807: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5811: LD_VAR 0 2
5815: PPUSH
5816: LD_VAR 0 6
5820: PUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 12
5833: ARRAY
5834: PPUSH
5835: CALL_OW 431
// end ;
5839: GO 5786
5841: POP
5842: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5843: LD_ADDR_VAR 0 7
5847: PUSH
5848: LD_INT 22
5850: PUSH
5851: LD_INT 1
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 2
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 1
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 5
5873: PUSH
5874: EMPTY
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 69
5890: ST_TO_ADDR
// for i = 1 to sol do
5891: LD_ADDR_VAR 0 2
5895: PUSH
5896: DOUBLE
5897: LD_INT 1
5899: DEC
5900: ST_TO_ADDR
5901: LD_VAR 0 7
5905: PUSH
5906: FOR_TO
5907: IFFALSE 5929
// SetTag ( sol [ i ] , 1 ) ;
5909: LD_VAR 0 7
5913: PUSH
5914: LD_VAR 0 2
5918: ARRAY
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: CALL_OW 109
5927: GO 5906
5929: POP
5930: POP
// for i = 1 to 3 do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: DOUBLE
5937: LD_INT 1
5939: DEC
5940: ST_TO_ADDR
5941: LD_INT 3
5943: PUSH
5944: FOR_TO
5945: IFFALSE 5969
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5947: LD_INT 3
5949: PPUSH
5950: LD_VAR 0 5
5954: PPUSH
5955: CALL 734 0 2
5959: PPUSH
5960: LD_INT 56
5962: PPUSH
5963: CALL_OW 52
5967: GO 5944
5969: POP
5970: POP
// for i = 1 to 6 do
5971: LD_ADDR_VAR 0 2
5975: PUSH
5976: DOUBLE
5977: LD_INT 1
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 6
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6009
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
5987: LD_INT 3
5989: PPUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: CALL 734 0 2
5999: PPUSH
6000: LD_INT 26
6002: PPUSH
6003: CALL_OW 52
6007: GO 5984
6009: POP
6010: POP
// for i = 1 to 5 do
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: DOUBLE
6017: LD_INT 1
6019: DEC
6020: ST_TO_ADDR
6021: LD_INT 5
6023: PUSH
6024: FOR_TO
6025: IFFALSE 6052
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_VAR 0 5
6034: PPUSH
6035: CALL 734 0 2
6039: PPUSH
6040: LD_INT 7
6042: PPUSH
6043: LD_INT 0
6045: PPUSH
6046: CALL_OW 49
6050: GO 6024
6052: POP
6053: POP
// for i = 1 to 3 do
6054: LD_ADDR_VAR 0 2
6058: PUSH
6059: DOUBLE
6060: LD_INT 1
6062: DEC
6063: ST_TO_ADDR
6064: LD_INT 3
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6092
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6070: LD_INT 4
6072: PPUSH
6073: LD_VAR 0 5
6077: PPUSH
6078: CALL 734 0 2
6082: PPUSH
6083: LD_INT 46
6085: PPUSH
6086: CALL_OW 52
6090: GO 6067
6092: POP
6093: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 30
6111: PUSH
6112: LD_INT 5
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PPUSH
6123: CALL_OW 69
6127: PUSH
6128: FOR_IN
6129: IFFALSE 6243
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6131: LD_INT 5
6133: PPUSH
6134: LD_VAR 0 5
6138: PPUSH
6139: CALL 734 0 2
6143: PPUSH
6144: LD_VAR 0 2
6148: PPUSH
6149: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6153: LD_INT 5
6155: PPUSH
6156: LD_VAR 0 5
6160: PPUSH
6161: CALL 734 0 2
6165: PPUSH
6166: LD_VAR 0 2
6170: PPUSH
6171: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6175: LD_INT 1
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: CALL 734 0 2
6187: PPUSH
6188: LD_VAR 0 2
6192: PPUSH
6193: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6197: LD_INT 1
6199: PPUSH
6200: LD_VAR 0 5
6204: PPUSH
6205: CALL 734 0 2
6209: PPUSH
6210: LD_VAR 0 2
6214: PPUSH
6215: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6219: LD_INT 1
6221: PPUSH
6222: LD_VAR 0 5
6226: PPUSH
6227: CALL 734 0 2
6231: PPUSH
6232: LD_VAR 0 2
6236: PPUSH
6237: CALL_OW 52
// end ;
6241: GO 6128
6243: POP
6244: POP
// if dif > 1 then
6245: LD_EXP 1
6249: PUSH
6250: LD_INT 1
6252: GREATER
6253: IFFALSE 6326
// for i = 1 to ( dif - 1 ) do
6255: LD_ADDR_VAR 0 2
6259: PUSH
6260: DOUBLE
6261: LD_INT 1
6263: DEC
6264: ST_TO_ADDR
6265: LD_EXP 1
6269: PUSH
6270: LD_INT 1
6272: MINUS
6273: PUSH
6274: FOR_TO
6275: IFFALSE 6324
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6277: LD_ADDR_EXP 17
6281: PUSH
6282: LD_EXP 17
6286: PUSH
6287: LD_INT 1
6289: PPUSH
6290: LD_VAR 0 5
6294: PPUSH
6295: CALL 734 0 2
6299: ADD
6300: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6301: LD_EXP 17
6305: PUSH
6306: LD_VAR 0 2
6310: ARRAY
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: LD_INT 0
6317: PPUSH
6318: CALL_OW 49
// end ;
6322: GO 6274
6324: POP
6325: POP
// game_started := true ;
6326: LD_ADDR_EXP 10
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6334: LD_INT 26
6336: PPUSH
6337: LD_INT 3
6339: PPUSH
6340: LD_INT 2
6342: PPUSH
6343: LD_INT 2
6345: PPUSH
6346: LD_INT 13
6348: PPUSH
6349: CALL_OW 125
// while ( contact_am = false ) do
6353: LD_EXP 16
6357: PUSH
6358: LD_INT 0
6360: EQUAL
6361: IFFALSE 6372
// begin Wait ( 0 0$01 ) ;
6363: LD_INT 35
6365: PPUSH
6366: CALL_OW 67
// end ;
6370: GO 6353
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6372: LD_INT 8400
6374: PUSH
6375: LD_INT 6300
6377: PUSH
6378: LD_INT 5250
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_EXP 1
6390: ARRAY
6391: PPUSH
6392: CALL_OW 67
// case dif of 1 :
6396: LD_EXP 1
6400: PUSH
6401: LD_INT 1
6403: DOUBLE
6404: EQUAL
6405: IFTRUE 6409
6407: GO 6584
6409: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6410: LD_INT 26
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 1
6418: PPUSH
6419: LD_INT 2
6421: PPUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: LD_INT 1
6442: PPUSH
6443: LD_INT 4
6445: PPUSH
6446: CALL_OW 12
6450: ARRAY
6451: PPUSH
6452: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6456: LD_INT 26
6458: PPUSH
6459: LD_INT 3
6461: PPUSH
6462: LD_INT 1
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: LD_INT 4
6470: PUSH
6471: LD_INT 5
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 1
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: CALL_OW 12
6492: ARRAY
6493: PPUSH
6494: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6498: LD_INT 26
6500: PPUSH
6501: LD_INT 3
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: LD_INT 4
6512: PUSH
6513: LD_INT 5
6515: PUSH
6516: LD_INT 5
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_INT 3
6529: PPUSH
6530: CALL_OW 12
6534: ARRAY
6535: PPUSH
6536: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6540: LD_INT 26
6542: PPUSH
6543: LD_INT 3
6545: PPUSH
6546: LD_INT 1
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: LD_INT 4
6554: PUSH
6555: LD_INT 3
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 3
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: PPUSH
6578: CALL_OW 185
// end ; 2 :
6582: GO 7111
6584: LD_INT 2
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6805
6592: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6593: LD_INT 26
6595: PPUSH
6596: LD_INT 3
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 2
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 5
6610: PUSH
6611: LD_INT 5
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6635: LD_INT 26
6637: PPUSH
6638: LD_INT 3
6640: PPUSH
6641: LD_INT 1
6643: PPUSH
6644: LD_INT 2
6646: PPUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 5
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_INT 3
6666: PPUSH
6667: CALL_OW 12
6671: ARRAY
6672: PPUSH
6673: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6677: LD_INT 26
6679: PPUSH
6680: LD_INT 3
6682: PPUSH
6683: LD_INT 1
6685: PPUSH
6686: LD_INT 2
6688: PPUSH
6689: LD_INT 4
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 1
6705: PPUSH
6706: LD_INT 3
6708: PPUSH
6709: CALL_OW 12
6713: ARRAY
6714: PPUSH
6715: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6719: LD_INT 26
6721: PPUSH
6722: LD_INT 4
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_INT 2
6730: PPUSH
6731: LD_INT 4
6733: PUSH
6734: LD_INT 5
6736: PUSH
6737: LD_INT 6
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 1
6747: PPUSH
6748: LD_INT 3
6750: PPUSH
6751: CALL_OW 12
6755: ARRAY
6756: PPUSH
6757: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6761: LD_INT 26
6763: PPUSH
6764: LD_INT 4
6766: PPUSH
6767: LD_INT 1
6769: PPUSH
6770: LD_INT 2
6772: PPUSH
6773: LD_INT 4
6775: PUSH
6776: LD_INT 5
6778: PUSH
6779: LD_INT 6
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 1
6789: PPUSH
6790: LD_INT 3
6792: PPUSH
6793: CALL_OW 12
6797: ARRAY
6798: PPUSH
6799: CALL_OW 185
// end ; 3 :
6803: GO 7111
6805: LD_INT 3
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 7110
6813: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6814: LD_INT 26
6816: PPUSH
6817: LD_INT 3
6819: PPUSH
6820: LD_INT 1
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: LD_INT 4
6828: PUSH
6829: LD_INT 5
6831: PUSH
6832: LD_INT 5
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 1
6842: PPUSH
6843: LD_INT 3
6845: PPUSH
6846: CALL_OW 12
6850: ARRAY
6851: PPUSH
6852: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6856: LD_INT 26
6858: PPUSH
6859: LD_INT 3
6861: PPUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_INT 2
6867: PPUSH
6868: LD_INT 4
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: LD_INT 5
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 1
6884: PPUSH
6885: LD_INT 3
6887: PPUSH
6888: CALL_OW 12
6892: ARRAY
6893: PPUSH
6894: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6898: LD_INT 26
6900: PPUSH
6901: LD_INT 3
6903: PPUSH
6904: LD_INT 1
6906: PPUSH
6907: LD_INT 2
6909: PPUSH
6910: LD_INT 4
6912: PUSH
6913: LD_INT 5
6915: PUSH
6916: LD_INT 5
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 1
6926: PPUSH
6927: LD_INT 3
6929: PPUSH
6930: CALL_OW 12
6934: ARRAY
6935: PPUSH
6936: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6940: LD_INT 26
6942: PPUSH
6943: LD_INT 3
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 2
6951: PPUSH
6952: LD_INT 4
6954: PUSH
6955: LD_INT 5
6957: PUSH
6958: LD_INT 5
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 1
6968: PPUSH
6969: LD_INT 3
6971: PPUSH
6972: CALL_OW 12
6976: ARRAY
6977: PPUSH
6978: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6982: LD_INT 26
6984: PPUSH
6985: LD_INT 4
6987: PPUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: LD_INT 4
6996: PUSH
6997: LD_INT 5
6999: PUSH
7000: LD_INT 6
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 1
7010: PPUSH
7011: LD_INT 3
7013: PPUSH
7014: CALL_OW 12
7018: ARRAY
7019: PPUSH
7020: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7024: LD_INT 26
7026: PPUSH
7027: LD_INT 4
7029: PPUSH
7030: LD_INT 1
7032: PPUSH
7033: LD_INT 2
7035: PPUSH
7036: LD_INT 4
7038: PUSH
7039: LD_INT 5
7041: PUSH
7042: LD_INT 6
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 1
7052: PPUSH
7053: LD_INT 3
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7066: LD_INT 26
7068: PPUSH
7069: LD_INT 4
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: LD_INT 4
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 1
7094: PPUSH
7095: LD_INT 3
7097: PPUSH
7098: CALL_OW 12
7102: ARRAY
7103: PPUSH
7104: CALL_OW 185
// end ; end ;
7108: GO 7111
7110: POP
// end ;
7111: LD_VAR 0 1
7115: RET
// every 0 0$01 do var i , filter ;
7116: GO 7118
7118: DISABLE
7119: LD_INT 0
7121: PPUSH
7122: PPUSH
// begin enable ;
7123: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7124: LD_INT 22
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 25
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PUSH
7153: LD_INT 0
7155: GREATER
7156: IFFALSE 7165
// RaiseSailEvent ( 3 ) ;
7158: LD_INT 3
7160: PPUSH
7161: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7165: LD_INT 22
7167: PUSH
7168: LD_INT 1
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 21
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 3
7187: PUSH
7188: LD_INT 24
7190: PUSH
7191: LD_INT 1000
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PPUSH
7207: CALL_OW 69
7211: PUSH
7212: LD_INT 0
7214: GREATER
7215: IFFALSE 7226
// RaiseSailEvent ( 1 ) else
7217: LD_INT 1
7219: PPUSH
7220: CALL_OW 427
7224: GO 7233
// RaiseSailEvent ( 2 ) ;
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7233: LD_INT 22
7235: PUSH
7236: LD_INT 1
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 30
7245: PUSH
7246: LD_INT 5
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: PUSH
7262: LD_INT 0
7264: GREATER
7265: IFFALSE 7274
// RaiseSailEvent ( 4 ) ;
7267: LD_INT 4
7269: PPUSH
7270: CALL_OW 427
// if gamma_towers > 0 then
7274: LD_EXP 18
7278: PUSH
7279: LD_INT 0
7281: GREATER
7282: IFFALSE 7291
// RaiseSailEvent ( 5 ) ;
7284: LD_INT 5
7286: PPUSH
7287: CALL_OW 427
// end ;
7291: PPOPN 2
7293: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7294: GO 7296
7296: DISABLE
7297: LD_INT 0
7299: PPUSH
7300: PPUSH
// begin enable ;
7301: ENABLE
// if new_veh > 0 then
7302: LD_EXP 19
7306: PUSH
7307: LD_INT 0
7309: GREATER
7310: IFFALSE 7497
// while ( new_veh > 0 ) do
7312: LD_EXP 19
7316: PUSH
7317: LD_INT 0
7319: GREATER
7320: IFFALSE 7497
// begin Wait ( 0 0$01 ) ;
7322: LD_INT 35
7324: PPUSH
7325: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7329: LD_INT 26
7331: PPUSH
7332: CALL_OW 461
7336: PUSH
7337: LD_INT 2
7339: EQUAL
7340: IFFALSE 7495
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7342: LD_ADDR_VAR 0 1
7346: PUSH
7347: LD_INT 2
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: LD_INT 4
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 4
7370: PPUSH
7371: CALL_OW 12
7375: ARRAY
7376: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7377: LD_VAR 0 1
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: IN
7392: IFFALSE 7427
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7394: LD_ADDR_VAR 0 2
7398: PUSH
7399: LD_INT 4
7401: PUSH
7402: LD_INT 5
7404: PUSH
7405: LD_INT 7
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 1
7415: PPUSH
7416: LD_INT 3
7418: PPUSH
7419: CALL_OW 12
7423: ARRAY
7424: ST_TO_ADDR
7425: GO 7458
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7427: LD_ADDR_VAR 0 2
7431: PUSH
7432: LD_INT 5
7434: PUSH
7435: LD_INT 7
7437: PUSH
7438: LD_INT 6
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_INT 3
7451: PPUSH
7452: CALL_OW 12
7456: ARRAY
7457: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7458: LD_INT 26
7460: PPUSH
7461: LD_VAR 0 1
7465: PPUSH
7466: LD_INT 1
7468: PPUSH
7469: LD_INT 2
7471: PPUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 125
// new_veh := new_veh - 1 ;
7481: LD_ADDR_EXP 19
7485: PUSH
7486: LD_EXP 19
7490: PUSH
7491: LD_INT 1
7493: MINUS
7494: ST_TO_ADDR
// end ; end ;
7495: GO 7312
// end ;
7497: PPOPN 2
7499: END
// every 0 0$01 do var v , filter , am_cmeh ;
7500: GO 7502
7502: DISABLE
7503: LD_INT 0
7505: PPUSH
7506: PPUSH
7507: PPUSH
// begin enable ;
7508: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7509: LD_ADDR_VAR 0 3
7513: PUSH
7514: LD_INT 56
7516: PPUSH
7517: CALL_OW 313
7521: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: LD_INT 22
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 33
7539: PUSH
7540: LD_INT 2
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 50
7549: PUSH
7550: EMPTY
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: ST_TO_ADDR
// if filter > 0 then
7566: LD_VAR 0 2
7570: PUSH
7571: LD_INT 0
7573: GREATER
7574: IFFALSE 7642
// begin for v in filter do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_VAR 0 2
7585: PUSH
7586: FOR_IN
7587: IFFALSE 7640
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7589: LD_VAR 0 1
7593: PPUSH
7594: CALL_OW 312
7598: NOT
7599: PUSH
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 302
7609: AND
7610: IFFALSE 7638
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_VAR 0 3
7621: PUSH
7622: LD_INT 1
7624: PPUSH
7625: LD_INT 3
7627: PPUSH
7628: CALL_OW 12
7632: ARRAY
7633: PPUSH
7634: CALL_OW 135
// end ;
7638: GO 7586
7640: POP
7641: POP
// end ; end ;
7642: PPOPN 3
7644: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7645: LD_INT 33
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 34
7660: PUSH
7661: LD_INT 13
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: PUSH
7681: LD_INT 4
7683: PUSH
7684: LD_INT 5
7686: PUSH
7687: LD_INT 7
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PUSH
7695: LD_EXP 1
7699: ARRAY
7700: EQUAL
7701: PUSH
7702: LD_INT 26
7704: PPUSH
7705: CALL_OW 461
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: AND
7714: IFFALSE 7925
7716: GO 7718
7718: DISABLE
7719: LD_INT 0
7721: PPUSH
7722: PPUSH
7723: PPUSH
// begin enable ;
7724: ENABLE
// if Sikorski_Ar then
7725: LD_EXP 12
7729: IFFALSE 7806
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7731: LD_ADDR_EXP 11
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: LD_INT 22
7741: PUSH
7742: LD_INT 4
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 22
7751: PUSH
7752: LD_INT 1
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: LD_INT 33
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 13
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: ST_TO_ADDR
7804: GO 7847
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7806: LD_ADDR_EXP 11
7810: PUSH
7811: LD_INT 33
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 34
7826: PUSH
7827: LD_INT 13
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 69
7846: ST_TO_ADDR
// repeat begin for un in SForce do
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_EXP 11
7856: PUSH
7857: FOR_IN
7858: IFFALSE 7913
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7860: LD_ADDR_VAR 0 3
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: LD_VAR 0 2
7894: PPUSH
7895: CALL_OW 74
7899: PPUSH
7900: CALL_OW 115
// Wait ( 0 0$01 ) ;
7904: LD_INT 35
7906: PPUSH
7907: CALL_OW 67
// end ;
7911: GO 7857
7913: POP
7914: POP
// end until SForce = 0 ;
7915: LD_EXP 11
7919: PUSH
7920: LD_INT 0
7922: EQUAL
7923: IFFALSE 7847
// end ;
7925: PPOPN 3
7927: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7928: LD_INT 0
7930: PPUSH
7931: PPUSH
7932: PPUSH
7933: PPUSH
7934: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 14
7942: PPUSH
7943: EMPTY
7944: PPUSH
7945: CALL_OW 70
7949: ST_TO_ADDR
// if tmp then
7950: LD_VAR 0 6
7954: IFFALSE 7988
// for i in tmp do
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_VAR 0 6
7965: PUSH
7966: FOR_IN
7967: IFFALSE 7986
// ComMoveXY ( i , 42 , 23 ) ;
7969: LD_VAR 0 3
7973: PPUSH
7974: LD_INT 42
7976: PPUSH
7977: LD_INT 23
7979: PPUSH
7980: CALL_OW 111
7984: GO 7966
7986: POP
7987: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
7988: LD_INT 14
7990: PPUSH
7991: LD_INT 1
7993: PPUSH
7994: CALL_OW 286
// uc_side := 4 ;
7998: LD_ADDR_OWVAR 20
8002: PUSH
8003: LD_INT 4
8005: ST_TO_ADDR
// uc_nation := 1 ;
8006: LD_ADDR_OWVAR 21
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8014: LD_ADDR_OWVAR 37
8018: PUSH
8019: LD_INT 4
8021: ST_TO_ADDR
// vc_control := control_manual ;
8022: LD_ADDR_OWVAR 38
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// vc_engine := engine_combustion ;
8030: LD_ADDR_OWVAR 39
8034: PUSH
8035: LD_INT 1
8037: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8038: LD_ADDR_OWVAR 40
8042: PUSH
8043: LD_INT 4
8045: PUSH
8046: LD_INT 5
8048: PUSH
8049: LD_INT 7
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_EXP 1
8061: ARRAY
8062: ST_TO_ADDR
// veh := CreateVehicle ;
8063: LD_ADDR_VAR 0 5
8067: PUSH
8068: CALL_OW 45
8072: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8073: LD_VAR 0 5
8077: PPUSH
8078: LD_INT 2
8080: PPUSH
8081: LD_INT 0
8083: PPUSH
8084: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8088: LD_EXP 9
8092: PPUSH
8093: LD_VAR 0 5
8097: PPUSH
8098: CALL_OW 52
// SetMark ( veh , 1 ) ;
8102: LD_VAR 0 5
8106: PPUSH
8107: LD_INT 1
8109: PPUSH
8110: CALL_OW 242
// while ( num > 0 ) do
8114: LD_VAR 0 1
8118: PUSH
8119: LD_INT 0
8121: GREATER
8122: IFFALSE 8289
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8124: LD_INT 3
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 3
8132: PUSH
8133: LD_INT 4
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: LD_EXP 1
8146: PPUSH
8147: LD_INT 4
8149: PPUSH
8150: CALL_OW 12
8154: ARRAY
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 4
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: LD_INT 5
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_EXP 1
8184: PUSH
8185: LD_INT 1
8187: PLUS
8188: PPUSH
8189: CALL_OW 12
8193: ARRAY
8194: PPUSH
8195: LD_INT 11
8197: PPUSH
8198: LD_INT 2
8200: PPUSH
8201: LD_INT 5
8203: PUSH
8204: LD_INT 6
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: LD_EXP 1
8219: ARRAY
8220: PPUSH
8221: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8225: LD_ADDR_VAR 0 4
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8245: LD_VAR 0 4
8249: PUSH
8250: LD_VAR 0 4
8254: ARRAY
8255: PPUSH
8256: LD_INT 36
8258: PPUSH
8259: LD_INT 18
8261: PPUSH
8262: CALL_OW 111
// Wait ( 0 0$02 ) ;
8266: LD_INT 70
8268: PPUSH
8269: CALL_OW 67
// num := num - 1 ;
8273: LD_ADDR_VAR 0 1
8277: PUSH
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: MINUS
8286: ST_TO_ADDR
// end ;
8287: GO 8114
// end ;
8289: LD_VAR 0 2
8293: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8294: LD_EXP 17
8298: PUSH
8299: LD_INT 0
8301: GREATER
8302: IFFALSE 8571
8304: GO 8306
8306: DISABLE
8307: LD_INT 0
8309: PPUSH
// begin enable ;
8310: ENABLE
// for i = 1 to patrol do
8311: LD_ADDR_VAR 0 1
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_EXP 17
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8569
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8329: LD_EXP 17
8333: PUSH
8334: LD_VAR 0 1
8338: ARRAY
8339: PUSH
8340: LD_EXP 17
8344: PUSH
8345: LD_VAR 0 1
8349: ARRAY
8350: PPUSH
8351: CALL_OW 300
8355: AND
8356: PUSH
8357: LD_EXP 17
8361: PUSH
8362: LD_VAR 0 1
8366: ARRAY
8367: PPUSH
8368: CALL_OW 314
8372: NOT
8373: AND
8374: IFFALSE 8524
// case i of 1 :
8376: LD_VAR 0 1
8380: PUSH
8381: LD_INT 1
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8452
8389: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8390: LD_EXP 17
8394: PUSH
8395: LD_VAR 0 1
8399: ARRAY
8400: PPUSH
8401: LD_INT 53
8403: PPUSH
8404: LD_INT 91
8406: PPUSH
8407: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8411: LD_EXP 17
8415: PUSH
8416: LD_VAR 0 1
8420: ARRAY
8421: PPUSH
8422: LD_INT 245
8424: PPUSH
8425: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8429: LD_EXP 17
8433: PUSH
8434: LD_VAR 0 1
8438: ARRAY
8439: PPUSH
8440: LD_INT 24
8442: PPUSH
8443: LD_INT 26
8445: PPUSH
8446: CALL_OW 171
// end ; 2 :
8450: GO 8524
8452: LD_INT 2
8454: DOUBLE
8455: EQUAL
8456: IFTRUE 8460
8458: GO 8523
8460: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8461: LD_EXP 17
8465: PUSH
8466: LD_VAR 0 1
8470: ARRAY
8471: PPUSH
8472: LD_INT 83
8474: PPUSH
8475: LD_INT 57
8477: PPUSH
8478: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8482: LD_EXP 17
8486: PUSH
8487: LD_VAR 0 1
8491: ARRAY
8492: PPUSH
8493: LD_INT 245
8495: PPUSH
8496: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8500: LD_EXP 17
8504: PUSH
8505: LD_VAR 0 1
8509: ARRAY
8510: PPUSH
8511: LD_INT 47
8513: PPUSH
8514: LD_INT 53
8516: PPUSH
8517: CALL_OW 171
// end ; end ;
8521: GO 8524
8523: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8524: LD_EXP 17
8528: PUSH
8529: LD_VAR 0 1
8533: ARRAY
8534: PPUSH
8535: CALL_OW 256
8539: PUSH
8540: LD_INT 1000
8542: LESS
8543: IFFALSE 8567
// patrol := patrol diff patrol [ i ] ;
8545: LD_ADDR_EXP 17
8549: PUSH
8550: LD_EXP 17
8554: PUSH
8555: LD_EXP 17
8559: PUSH
8560: LD_VAR 0 1
8564: ARRAY
8565: DIFF
8566: ST_TO_ADDR
// end ;
8567: GO 8326
8569: POP
8570: POP
// end ;
8571: PPOPN 1
8573: END
// every 0 0$10 do
8574: GO 8576
8576: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8577: LD_INT 42000
8579: PUSH
8580: LD_INT 37800
8582: PUSH
8583: LD_INT 33600
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: LD_EXP 1
8595: ARRAY
8596: PPUSH
8597: CALL_OW 67
// if not contact_am then
8601: LD_EXP 16
8605: NOT
8606: IFFALSE 8616
// contact_am := true ;
8608: LD_ADDR_EXP 16
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// end ; end_of_file
8616: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8617: LD_INT 0
8619: PPUSH
// comp_tested := false ;
8620: LD_ADDR_EXP 22
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sikorski_run := false ;
8628: LD_ADDR_EXP 23
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// InGameOn ;
8636: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8640: LD_INT 5
8642: PPUSH
8643: LD_INT 4
8645: PPUSH
8646: CALL_OW 86
// wait ( 0 0$2 ) ;
8650: LD_INT 70
8652: PPUSH
8653: CALL_OW 67
// CenterOnUnits ( commander ) ;
8657: LD_EXP 3
8661: PPUSH
8662: CALL_OW 85
// wait ( 0 0$01 ) ;
8666: LD_INT 35
8668: PPUSH
8669: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8673: LD_EXP 2
8677: PPUSH
8678: LD_STRING Dpop1
8680: PPUSH
8681: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8685: LD_EXP 3
8689: PPUSH
8690: LD_STRING Dcomm1
8692: PPUSH
8693: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8697: LD_EXP 2
8701: PPUSH
8702: LD_STRING Dpop2
8704: PPUSH
8705: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8709: LD_EXP 3
8713: PPUSH
8714: LD_STRING Dcomm2
8716: PPUSH
8717: CALL_OW 88
// InGameOff ;
8721: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8725: LD_STRING T1
8727: PPUSH
8728: CALL_OW 337
// end ;
8732: LD_VAR 0 1
8736: RET
// every 0 0$01 trigger timer > 2 2$01 do
8737: LD_EXP 24
8741: PUSH
8742: LD_INT 4235
8744: GREATER
8745: IFFALSE 8762
8747: GO 8749
8749: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8750: LD_EXP 5
8754: PPUSH
8755: LD_STRING DKap1
8757: PPUSH
8758: CALL_OW 94
// end ;
8762: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8763: LD_EXP 24
8767: PUSH
8768: LD_INT 46200
8770: PUSH
8771: LD_INT 52500
8773: PUSH
8774: LD_INT 63000
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: LD_EXP 1
8786: ARRAY
8787: GREATER
8788: IFFALSE 9155
8790: GO 8792
8792: DISABLE
8793: LD_INT 0
8795: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8796: LD_EXP 5
8800: PPUSH
8801: LD_STRING DKap2
8803: PPUSH
8804: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8808: LD_INT 10
8810: PPUSH
8811: CALL_OW 67
// Say ( commander , Dcommk ) ;
8815: LD_EXP 3
8819: PPUSH
8820: LD_STRING Dcommk
8822: PPUSH
8823: CALL_OW 88
// Wait ( 0 0$44 ) ;
8827: LD_INT 1540
8829: PPUSH
8830: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8834: LD_EXP 5
8838: PPUSH
8839: LD_INT 3
8841: PPUSH
8842: LD_INT 0
8844: PPUSH
8845: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8849: LD_EXP 5
8853: PPUSH
8854: CALL_OW 87
// Wait ( 0 0$10 ) ;
8858: LD_INT 350
8860: PPUSH
8861: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8865: LD_INT 6
8867: PUSH
8868: LD_INT 7
8870: PUSH
8871: LD_INT 8
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: LD_EXP 1
8883: ARRAY
8884: PPUSH
8885: CALL 7928 0 1
// Wait ( 2 2$00 ) ;
8889: LD_INT 4200
8891: PPUSH
8892: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8896: LD_INT 33
8898: PUSH
8899: LD_INT 2
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: LD_INT 34
8911: PUSH
8912: LD_INT 13
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 69
8931: PUSH
8932: LD_INT 3
8934: LESS
8935: IFFALSE 8946
// Wait ( 0 0$01 ) ;
8937: LD_INT 35
8939: PPUSH
8940: CALL_OW 67
8944: GO 8896
// uc_side := 4 ;
8946: LD_ADDR_OWVAR 20
8950: PUSH
8951: LD_INT 4
8953: ST_TO_ADDR
// uc_nation := 1 ;
8954: LD_ADDR_OWVAR 21
8958: PUSH
8959: LD_INT 1
8961: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8962: LD_ADDR_VAR 0 1
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_INT 4
8974: PUSH
8975: LD_INT 5
8977: PUSH
8978: LD_INT 6
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: LD_EXP 1
8990: ARRAY
8991: PUSH
8992: FOR_TO
8993: IFFALSE 9035
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
8995: LD_INT 1
8997: PPUSH
8998: LD_INT 5
9000: PUSH
9001: LD_INT 6
9003: PUSH
9004: LD_INT 7
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: PUSH
9012: LD_EXP 1
9016: ARRAY
9017: PPUSH
9018: CALL 734 0 2
9022: PPUSH
9023: LD_INT 4
9025: PPUSH
9026: LD_INT 0
9028: PPUSH
9029: CALL_OW 49
9033: GO 8992
9035: POP
9036: POP
// sikorski_ar := true ;
9037: LD_ADDR_EXP 12
9041: PUSH
9042: LD_INT 1
9044: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9045: LD_EXP 9
9049: PPUSH
9050: LD_STRING DSik1
9052: PPUSH
9053: CALL_OW 94
// Wait ( 0 0$30 ) ;
9057: LD_INT 1050
9059: PPUSH
9060: CALL_OW 67
// uc_side := 4 ;
9064: LD_ADDR_OWVAR 20
9068: PUSH
9069: LD_INT 4
9071: ST_TO_ADDR
// uc_nation := 1 ;
9072: LD_ADDR_OWVAR 21
9076: PUSH
9077: LD_INT 1
9079: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_INT 3
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: LD_INT 4
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_EXP 1
9108: ARRAY
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9153
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9113: LD_INT 1
9115: PPUSH
9116: LD_INT 5
9118: PUSH
9119: LD_INT 6
9121: PUSH
9122: LD_INT 7
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: PUSH
9130: LD_EXP 1
9134: ARRAY
9135: PPUSH
9136: CALL 734 0 2
9140: PPUSH
9141: LD_INT 13
9143: PPUSH
9144: LD_INT 0
9146: PPUSH
9147: CALL_OW 49
9151: GO 9110
9153: POP
9154: POP
// end ;
9155: PPOPN 1
9157: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9158: LD_EXP 9
9162: PPUSH
9163: CALL_OW 256
9167: PUSH
9168: LD_INT 650
9170: LESS
9171: IFFALSE 9253
9173: GO 9175
9175: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9176: LD_EXP 9
9180: PPUSH
9181: LD_STRING DSik2
9183: PPUSH
9184: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9188: LD_EXP 9
9192: PPUSH
9193: CALL_OW 300
9197: IFFALSE 9253
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9199: LD_EXP 9
9203: PPUSH
9204: LD_INT 2
9206: PPUSH
9207: CALL_OW 113
// Wait ( 0 0$01 ) ;
9211: LD_INT 35
9213: PPUSH
9214: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9218: LD_EXP 9
9222: PPUSH
9223: LD_INT 2
9225: PPUSH
9226: CALL_OW 308
9230: IFFALSE 9251
// begin RemoveUnit ( sikorski ) ;
9232: LD_EXP 9
9236: PPUSH
9237: CALL_OW 64
// break ;
9241: GO 9253
// sikorski_run := true ;
9243: LD_ADDR_EXP 23
9247: PUSH
9248: LD_INT 1
9250: ST_TO_ADDR
// end ; end ;
9251: GO 9188
// end ;
9253: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9254: LD_EXP 9
9258: PPUSH
9259: CALL_OW 256
9263: PUSH
9264: LD_INT 1000
9266: LESS
9267: IFFALSE 9284
9269: GO 9271
9271: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9272: LD_EXP 9
9276: PPUSH
9277: LD_STRING DSkik3
9279: PPUSH
9280: CALL_OW 88
9284: END
// every 1 1$45 + 0 0$15 do
9285: GO 9287
9287: DISABLE
// begin enable ;
9288: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9289: LD_INT 1
9291: PPUSH
9292: LD_INT 5
9294: PPUSH
9295: CALL_OW 12
9299: PPUSH
9300: LD_INT 8
9302: PPUSH
9303: LD_INT 1
9305: PPUSH
9306: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9310: LD_INT 350
9312: PPUSH
9313: LD_INT 1295
9315: PPUSH
9316: CALL_OW 12
9320: PPUSH
9321: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9325: LD_INT 1
9327: PPUSH
9328: LD_INT 5
9330: PPUSH
9331: CALL_OW 12
9335: PPUSH
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9343: LD_INT 350
9345: PPUSH
9346: LD_INT 1050
9348: PPUSH
9349: CALL_OW 12
9353: PPUSH
9354: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9358: LD_EXP 24
9362: PUSH
9363: LD_INT 25200
9365: PUSH
9366: LD_INT 23100
9368: PUSH
9369: LD_INT 21000
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PUSH
9377: LD_EXP 1
9381: ARRAY
9382: LESSEQUAL
9383: IFFALSE 9406
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9385: LD_INT 1
9387: PPUSH
9388: LD_INT 5
9390: PPUSH
9391: CALL_OW 12
9395: PPUSH
9396: LD_INT 8
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 55
// end ;
9406: END
// export timer ; every 1 do
9407: GO 9409
9409: DISABLE
// timer := 0 0$00 ;
9410: LD_ADDR_EXP 24
9414: PUSH
9415: LD_INT 0
9417: ST_TO_ADDR
9418: END
// every 0 0$01 do
9419: GO 9421
9421: DISABLE
// begin enable ;
9422: ENABLE
// Display_Strings := [ #tick , timer ] ;
9423: LD_ADDR_OWVAR 47
9427: PUSH
9428: LD_STRING #tick
9430: PUSH
9431: LD_EXP 24
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9440: LD_ADDR_EXP 24
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: LD_INT 35
9452: PLUS
9453: ST_TO_ADDR
// end ; end_of_file
9454: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
9455: LD_INT 0
9457: PPUSH
// ar_miner := 81 ;
9458: LD_ADDR_EXP 32
9462: PUSH
9463: LD_INT 81
9465: ST_TO_ADDR
// ar_crane := 88 ;
9466: LD_ADDR_EXP 31
9470: PUSH
9471: LD_INT 88
9473: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9474: LD_ADDR_EXP 26
9478: PUSH
9479: LD_INT 89
9481: ST_TO_ADDR
// us_hack := 99 ;
9482: LD_ADDR_EXP 27
9486: PUSH
9487: LD_INT 99
9489: ST_TO_ADDR
// us_artillery := 97 ;
9490: LD_ADDR_EXP 28
9494: PUSH
9495: LD_INT 97
9497: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9498: LD_ADDR_EXP 29
9502: PUSH
9503: LD_INT 91
9505: ST_TO_ADDR
// ar_mortar := 92 ;
9506: LD_ADDR_EXP 30
9510: PUSH
9511: LD_INT 92
9513: ST_TO_ADDR
// ru_radar := 98 ;
9514: LD_ADDR_EXP 25
9518: PUSH
9519: LD_INT 98
9521: ST_TO_ADDR
// tech_Artillery := 80 ;
9522: LD_ADDR_EXP 33
9526: PUSH
9527: LD_INT 80
9529: ST_TO_ADDR
// tech_RadMat := 81 ;
9530: LD_ADDR_EXP 34
9534: PUSH
9535: LD_INT 81
9537: ST_TO_ADDR
// tech_BasicTools := 82 ;
9538: LD_ADDR_EXP 35
9542: PUSH
9543: LD_INT 82
9545: ST_TO_ADDR
// tech_Cargo := 83 ;
9546: LD_ADDR_EXP 36
9550: PUSH
9551: LD_INT 83
9553: ST_TO_ADDR
// tech_Track := 84 ;
9554: LD_ADDR_EXP 37
9558: PUSH
9559: LD_INT 84
9561: ST_TO_ADDR
// tech_Crane := 85 ;
9562: LD_ADDR_EXP 38
9566: PUSH
9567: LD_INT 85
9569: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9570: LD_ADDR_EXP 39
9574: PUSH
9575: LD_INT 86
9577: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9578: LD_ADDR_EXP 40
9582: PUSH
9583: LD_INT 87
9585: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
9586: LD_ADDR_EXP 41
9590: PUSH
9591: LD_INT 88
9593: ST_TO_ADDR
// class_mastodont := 31 ;
9594: LD_ADDR_EXP 42
9598: PUSH
9599: LD_INT 31
9601: ST_TO_ADDR
// class_horse := 21 ;
9602: LD_ADDR_EXP 43
9606: PUSH
9607: LD_INT 21
9609: ST_TO_ADDR
// end ;
9610: LD_VAR 0 1
9614: RET
// every 1 do
9615: GO 9617
9617: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
9618: CALL 9455 0 0
9622: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9623: LD_INT 0
9625: PPUSH
// if p2 = 100 then
9626: LD_VAR 0 2
9630: PUSH
9631: LD_INT 100
9633: EQUAL
9634: IFFALSE 10637
// begin if not StreamModeActive then
9636: LD_EXP 44
9640: NOT
9641: IFFALSE 9651
// StreamModeActive := true ;
9643: LD_ADDR_EXP 44
9647: PUSH
9648: LD_INT 1
9650: ST_TO_ADDR
// if p3 = 0 then
9651: LD_VAR 0 3
9655: PUSH
9656: LD_INT 0
9658: EQUAL
9659: IFFALSE 9665
// InitStreamMode ;
9661: CALL 10797 0 0
// if p3 = 1 then
9665: LD_VAR 0 3
9669: PUSH
9670: LD_INT 1
9672: EQUAL
9673: IFFALSE 9683
// sRocket := true ;
9675: LD_ADDR_EXP 49
9679: PUSH
9680: LD_INT 1
9682: ST_TO_ADDR
// if p3 = 2 then
9683: LD_VAR 0 3
9687: PUSH
9688: LD_INT 2
9690: EQUAL
9691: IFFALSE 9701
// sSpeed := true ;
9693: LD_ADDR_EXP 48
9697: PUSH
9698: LD_INT 1
9700: ST_TO_ADDR
// if p3 = 3 then
9701: LD_VAR 0 3
9705: PUSH
9706: LD_INT 3
9708: EQUAL
9709: IFFALSE 9719
// sEngine := true ;
9711: LD_ADDR_EXP 50
9715: PUSH
9716: LD_INT 1
9718: ST_TO_ADDR
// if p3 = 4 then
9719: LD_VAR 0 3
9723: PUSH
9724: LD_INT 4
9726: EQUAL
9727: IFFALSE 9737
// sSpec := true ;
9729: LD_ADDR_EXP 47
9733: PUSH
9734: LD_INT 1
9736: ST_TO_ADDR
// if p3 = 5 then
9737: LD_VAR 0 3
9741: PUSH
9742: LD_INT 5
9744: EQUAL
9745: IFFALSE 9755
// sLevel := true ;
9747: LD_ADDR_EXP 51
9751: PUSH
9752: LD_INT 1
9754: ST_TO_ADDR
// if p3 = 6 then
9755: LD_VAR 0 3
9759: PUSH
9760: LD_INT 6
9762: EQUAL
9763: IFFALSE 9773
// sArmoury := true ;
9765: LD_ADDR_EXP 52
9769: PUSH
9770: LD_INT 1
9772: ST_TO_ADDR
// if p3 = 7 then
9773: LD_VAR 0 3
9777: PUSH
9778: LD_INT 7
9780: EQUAL
9781: IFFALSE 9791
// sRadar := true ;
9783: LD_ADDR_EXP 53
9787: PUSH
9788: LD_INT 1
9790: ST_TO_ADDR
// if p3 = 8 then
9791: LD_VAR 0 3
9795: PUSH
9796: LD_INT 8
9798: EQUAL
9799: IFFALSE 9809
// sBunker := true ;
9801: LD_ADDR_EXP 54
9805: PUSH
9806: LD_INT 1
9808: ST_TO_ADDR
// if p3 = 9 then
9809: LD_VAR 0 3
9813: PUSH
9814: LD_INT 9
9816: EQUAL
9817: IFFALSE 9827
// sHack := true ;
9819: LD_ADDR_EXP 55
9823: PUSH
9824: LD_INT 1
9826: ST_TO_ADDR
// if p3 = 10 then
9827: LD_VAR 0 3
9831: PUSH
9832: LD_INT 10
9834: EQUAL
9835: IFFALSE 9845
// sFire := true ;
9837: LD_ADDR_EXP 56
9841: PUSH
9842: LD_INT 1
9844: ST_TO_ADDR
// if p3 = 11 then
9845: LD_VAR 0 3
9849: PUSH
9850: LD_INT 11
9852: EQUAL
9853: IFFALSE 9863
// sRefresh := true ;
9855: LD_ADDR_EXP 57
9859: PUSH
9860: LD_INT 1
9862: ST_TO_ADDR
// if p3 = 12 then
9863: LD_VAR 0 3
9867: PUSH
9868: LD_INT 12
9870: EQUAL
9871: IFFALSE 9881
// sExp := true ;
9873: LD_ADDR_EXP 58
9877: PUSH
9878: LD_INT 1
9880: ST_TO_ADDR
// if p3 = 13 then
9881: LD_VAR 0 3
9885: PUSH
9886: LD_INT 13
9888: EQUAL
9889: IFFALSE 9899
// sDepot := true ;
9891: LD_ADDR_EXP 59
9895: PUSH
9896: LD_INT 1
9898: ST_TO_ADDR
// if p3 = 14 then
9899: LD_VAR 0 3
9903: PUSH
9904: LD_INT 14
9906: EQUAL
9907: IFFALSE 9917
// sFlag := true ;
9909: LD_ADDR_EXP 60
9913: PUSH
9914: LD_INT 1
9916: ST_TO_ADDR
// if p3 = 15 then
9917: LD_VAR 0 3
9921: PUSH
9922: LD_INT 15
9924: EQUAL
9925: IFFALSE 9935
// sKamikadze := true ;
9927: LD_ADDR_EXP 68
9931: PUSH
9932: LD_INT 1
9934: ST_TO_ADDR
// if p3 = 16 then
9935: LD_VAR 0 3
9939: PUSH
9940: LD_INT 16
9942: EQUAL
9943: IFFALSE 9953
// sTroll := true ;
9945: LD_ADDR_EXP 69
9949: PUSH
9950: LD_INT 1
9952: ST_TO_ADDR
// if p3 = 17 then
9953: LD_VAR 0 3
9957: PUSH
9958: LD_INT 17
9960: EQUAL
9961: IFFALSE 9971
// sSlow := true ;
9963: LD_ADDR_EXP 70
9967: PUSH
9968: LD_INT 1
9970: ST_TO_ADDR
// if p3 = 18 then
9971: LD_VAR 0 3
9975: PUSH
9976: LD_INT 18
9978: EQUAL
9979: IFFALSE 9989
// sLack := true ;
9981: LD_ADDR_EXP 71
9985: PUSH
9986: LD_INT 1
9988: ST_TO_ADDR
// if p3 = 19 then
9989: LD_VAR 0 3
9993: PUSH
9994: LD_INT 19
9996: EQUAL
9997: IFFALSE 10007
// sTank := true ;
9999: LD_ADDR_EXP 73
10003: PUSH
10004: LD_INT 1
10006: ST_TO_ADDR
// if p3 = 20 then
10007: LD_VAR 0 3
10011: PUSH
10012: LD_INT 20
10014: EQUAL
10015: IFFALSE 10025
// sRemote := true ;
10017: LD_ADDR_EXP 74
10021: PUSH
10022: LD_INT 1
10024: ST_TO_ADDR
// if p3 = 21 then
10025: LD_VAR 0 3
10029: PUSH
10030: LD_INT 21
10032: EQUAL
10033: IFFALSE 10043
// sPowell := true ;
10035: LD_ADDR_EXP 75
10039: PUSH
10040: LD_INT 1
10042: ST_TO_ADDR
// if p3 = 22 then
10043: LD_VAR 0 3
10047: PUSH
10048: LD_INT 22
10050: EQUAL
10051: IFFALSE 10061
// sTeleport := true ;
10053: LD_ADDR_EXP 78
10057: PUSH
10058: LD_INT 1
10060: ST_TO_ADDR
// if p3 = 23 then
10061: LD_VAR 0 3
10065: PUSH
10066: LD_INT 23
10068: EQUAL
10069: IFFALSE 10079
// sOilTower := true ;
10071: LD_ADDR_EXP 80
10075: PUSH
10076: LD_INT 1
10078: ST_TO_ADDR
// if p3 = 24 then
10079: LD_VAR 0 3
10083: PUSH
10084: LD_INT 24
10086: EQUAL
10087: IFFALSE 10097
// sShovel := true ;
10089: LD_ADDR_EXP 81
10093: PUSH
10094: LD_INT 1
10096: ST_TO_ADDR
// if p3 = 25 then
10097: LD_VAR 0 3
10101: PUSH
10102: LD_INT 25
10104: EQUAL
10105: IFFALSE 10115
// sSheik := true ;
10107: LD_ADDR_EXP 82
10111: PUSH
10112: LD_INT 1
10114: ST_TO_ADDR
// if p3 = 26 then
10115: LD_VAR 0 3
10119: PUSH
10120: LD_INT 26
10122: EQUAL
10123: IFFALSE 10133
// sEarthquake := true ;
10125: LD_ADDR_EXP 84
10129: PUSH
10130: LD_INT 1
10132: ST_TO_ADDR
// if p3 = 27 then
10133: LD_VAR 0 3
10137: PUSH
10138: LD_INT 27
10140: EQUAL
10141: IFFALSE 10151
// sAI := true ;
10143: LD_ADDR_EXP 85
10147: PUSH
10148: LD_INT 1
10150: ST_TO_ADDR
// if p3 = 28 then
10151: LD_VAR 0 3
10155: PUSH
10156: LD_INT 28
10158: EQUAL
10159: IFFALSE 10169
// sCargo := true ;
10161: LD_ADDR_EXP 88
10165: PUSH
10166: LD_INT 1
10168: ST_TO_ADDR
// if p3 = 29 then
10169: LD_VAR 0 3
10173: PUSH
10174: LD_INT 29
10176: EQUAL
10177: IFFALSE 10187
// sDLaser := true ;
10179: LD_ADDR_EXP 89
10183: PUSH
10184: LD_INT 1
10186: ST_TO_ADDR
// if p3 = 30 then
10187: LD_VAR 0 3
10191: PUSH
10192: LD_INT 30
10194: EQUAL
10195: IFFALSE 10205
// sExchange := true ;
10197: LD_ADDR_EXP 90
10201: PUSH
10202: LD_INT 1
10204: ST_TO_ADDR
// if p3 = 31 then
10205: LD_VAR 0 3
10209: PUSH
10210: LD_INT 31
10212: EQUAL
10213: IFFALSE 10223
// sFac := true ;
10215: LD_ADDR_EXP 91
10219: PUSH
10220: LD_INT 1
10222: ST_TO_ADDR
// if p3 = 32 then
10223: LD_VAR 0 3
10227: PUSH
10228: LD_INT 32
10230: EQUAL
10231: IFFALSE 10241
// sPower := true ;
10233: LD_ADDR_EXP 92
10237: PUSH
10238: LD_INT 1
10240: ST_TO_ADDR
// if p3 = 33 then
10241: LD_VAR 0 3
10245: PUSH
10246: LD_INT 33
10248: EQUAL
10249: IFFALSE 10259
// sRandom := true ;
10251: LD_ADDR_EXP 93
10255: PUSH
10256: LD_INT 1
10258: ST_TO_ADDR
// if p3 = 34 then
10259: LD_VAR 0 3
10263: PUSH
10264: LD_INT 34
10266: EQUAL
10267: IFFALSE 10277
// sShield := true ;
10269: LD_ADDR_EXP 94
10273: PUSH
10274: LD_INT 1
10276: ST_TO_ADDR
// if p3 = 35 then
10277: LD_VAR 0 3
10281: PUSH
10282: LD_INT 35
10284: EQUAL
10285: IFFALSE 10295
// sTime := true ;
10287: LD_ADDR_EXP 95
10291: PUSH
10292: LD_INT 1
10294: ST_TO_ADDR
// if p3 = 36 then
10295: LD_VAR 0 3
10299: PUSH
10300: LD_INT 36
10302: EQUAL
10303: IFFALSE 10313
// sTools := true ;
10305: LD_ADDR_EXP 96
10309: PUSH
10310: LD_INT 1
10312: ST_TO_ADDR
// if p3 = 101 then
10313: LD_VAR 0 3
10317: PUSH
10318: LD_INT 101
10320: EQUAL
10321: IFFALSE 10331
// sSold := true ;
10323: LD_ADDR_EXP 61
10327: PUSH
10328: LD_INT 1
10330: ST_TO_ADDR
// if p3 = 102 then
10331: LD_VAR 0 3
10335: PUSH
10336: LD_INT 102
10338: EQUAL
10339: IFFALSE 10349
// sDiff := true ;
10341: LD_ADDR_EXP 62
10345: PUSH
10346: LD_INT 1
10348: ST_TO_ADDR
// if p3 = 103 then
10349: LD_VAR 0 3
10353: PUSH
10354: LD_INT 103
10356: EQUAL
10357: IFFALSE 10367
// sFog := true ;
10359: LD_ADDR_EXP 65
10363: PUSH
10364: LD_INT 1
10366: ST_TO_ADDR
// if p3 = 104 then
10367: LD_VAR 0 3
10371: PUSH
10372: LD_INT 104
10374: EQUAL
10375: IFFALSE 10385
// sReset := true ;
10377: LD_ADDR_EXP 66
10381: PUSH
10382: LD_INT 1
10384: ST_TO_ADDR
// if p3 = 105 then
10385: LD_VAR 0 3
10389: PUSH
10390: LD_INT 105
10392: EQUAL
10393: IFFALSE 10403
// sSun := true ;
10395: LD_ADDR_EXP 67
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// if p3 = 106 then
10403: LD_VAR 0 3
10407: PUSH
10408: LD_INT 106
10410: EQUAL
10411: IFFALSE 10421
// sTiger := true ;
10413: LD_ADDR_EXP 63
10417: PUSH
10418: LD_INT 1
10420: ST_TO_ADDR
// if p3 = 107 then
10421: LD_VAR 0 3
10425: PUSH
10426: LD_INT 107
10428: EQUAL
10429: IFFALSE 10439
// sBomb := true ;
10431: LD_ADDR_EXP 64
10435: PUSH
10436: LD_INT 1
10438: ST_TO_ADDR
// if p3 = 108 then
10439: LD_VAR 0 3
10443: PUSH
10444: LD_INT 108
10446: EQUAL
10447: IFFALSE 10457
// sWound := true ;
10449: LD_ADDR_EXP 72
10453: PUSH
10454: LD_INT 1
10456: ST_TO_ADDR
// if p3 = 109 then
10457: LD_VAR 0 3
10461: PUSH
10462: LD_INT 109
10464: EQUAL
10465: IFFALSE 10475
// sBetray := true ;
10467: LD_ADDR_EXP 76
10471: PUSH
10472: LD_INT 1
10474: ST_TO_ADDR
// if p3 = 110 then
10475: LD_VAR 0 3
10479: PUSH
10480: LD_INT 110
10482: EQUAL
10483: IFFALSE 10493
// sContamin := true ;
10485: LD_ADDR_EXP 77
10489: PUSH
10490: LD_INT 1
10492: ST_TO_ADDR
// if p3 = 111 then
10493: LD_VAR 0 3
10497: PUSH
10498: LD_INT 111
10500: EQUAL
10501: IFFALSE 10511
// sOil := true ;
10503: LD_ADDR_EXP 79
10507: PUSH
10508: LD_INT 1
10510: ST_TO_ADDR
// if p3 = 112 then
10511: LD_VAR 0 3
10515: PUSH
10516: LD_INT 112
10518: EQUAL
10519: IFFALSE 10529
// sStu := true ;
10521: LD_ADDR_EXP 83
10525: PUSH
10526: LD_INT 1
10528: ST_TO_ADDR
// if p3 = 113 then
10529: LD_VAR 0 3
10533: PUSH
10534: LD_INT 113
10536: EQUAL
10537: IFFALSE 10547
// sBazooka := true ;
10539: LD_ADDR_EXP 86
10543: PUSH
10544: LD_INT 1
10546: ST_TO_ADDR
// if p3 = 114 then
10547: LD_VAR 0 3
10551: PUSH
10552: LD_INT 114
10554: EQUAL
10555: IFFALSE 10565
// sMortar := true ;
10557: LD_ADDR_EXP 87
10561: PUSH
10562: LD_INT 1
10564: ST_TO_ADDR
// if p3 = 115 then
10565: LD_VAR 0 3
10569: PUSH
10570: LD_INT 115
10572: EQUAL
10573: IFFALSE 10583
// sRanger := true ;
10575: LD_ADDR_EXP 97
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
// if p3 = 116 then
10583: LD_VAR 0 3
10587: PUSH
10588: LD_INT 116
10590: EQUAL
10591: IFFALSE 10601
// sComputer := true ;
10593: LD_ADDR_EXP 98
10597: PUSH
10598: LD_INT 1
10600: ST_TO_ADDR
// if p3 = 117 then
10601: LD_VAR 0 3
10605: PUSH
10606: LD_INT 117
10608: EQUAL
10609: IFFALSE 10619
// s30 := true ;
10611: LD_ADDR_EXP 99
10615: PUSH
10616: LD_INT 1
10618: ST_TO_ADDR
// if p3 = 118 then
10619: LD_VAR 0 3
10623: PUSH
10624: LD_INT 118
10626: EQUAL
10627: IFFALSE 10637
// s60 := true ;
10629: LD_ADDR_EXP 100
10633: PUSH
10634: LD_INT 1
10636: ST_TO_ADDR
// end ; if p2 = 101 then
10637: LD_VAR 0 2
10641: PUSH
10642: LD_INT 101
10644: EQUAL
10645: IFFALSE 10773
// begin case p3 of 1 :
10647: LD_VAR 0 3
10651: PUSH
10652: LD_INT 1
10654: DOUBLE
10655: EQUAL
10656: IFTRUE 10660
10658: GO 10667
10660: POP
// hHackUnlimitedResources ; 2 :
10661: CALL 22369 0 0
10665: GO 10773
10667: LD_INT 2
10669: DOUBLE
10670: EQUAL
10671: IFTRUE 10675
10673: GO 10682
10675: POP
// hHackSetLevel10 ; 3 :
10676: CALL 22502 0 0
10680: GO 10773
10682: LD_INT 3
10684: DOUBLE
10685: EQUAL
10686: IFTRUE 10690
10688: GO 10697
10690: POP
// hHackSetLevel10YourUnits ; 4 :
10691: CALL 22587 0 0
10695: GO 10773
10697: LD_INT 4
10699: DOUBLE
10700: EQUAL
10701: IFTRUE 10705
10703: GO 10712
10705: POP
// hHackInvincible ; 5 :
10706: CALL 23035 0 0
10710: GO 10773
10712: LD_INT 5
10714: DOUBLE
10715: EQUAL
10716: IFTRUE 10720
10718: GO 10727
10720: POP
// hHackInvisible ; 6 :
10721: CALL 23146 0 0
10725: GO 10773
10727: LD_INT 6
10729: DOUBLE
10730: EQUAL
10731: IFTRUE 10735
10733: GO 10742
10735: POP
// hHackChangeYourSide ; 7 :
10736: CALL 23203 0 0
10740: GO 10773
10742: LD_INT 7
10744: DOUBLE
10745: EQUAL
10746: IFTRUE 10750
10748: GO 10757
10750: POP
// hHackChangeUnitSide ; 8 :
10751: CALL 23245 0 0
10755: GO 10773
10757: LD_INT 8
10759: DOUBLE
10760: EQUAL
10761: IFTRUE 10765
10763: GO 10772
10765: POP
// hHackFog ; end ;
10766: CALL 23346 0 0
10770: GO 10773
10772: POP
// end ; end ;
10773: LD_VAR 0 7
10777: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
10778: GO 10780
10780: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10781: LD_STRING initStreamRollete();
10783: PPUSH
10784: CALL_OW 559
// InitStreamMode ;
10788: CALL 10797 0 0
// DefineStreamItems ( ) ;
10792: CALL 11261 0 0
// end ;
10796: END
// function InitStreamMode ; begin
10797: LD_INT 0
10799: PPUSH
// streamModeActive := false ;
10800: LD_ADDR_EXP 44
10804: PUSH
10805: LD_INT 0
10807: ST_TO_ADDR
// normalCounter := 36 ;
10808: LD_ADDR_EXP 45
10812: PUSH
10813: LD_INT 36
10815: ST_TO_ADDR
// hardcoreCounter := 16 ;
10816: LD_ADDR_EXP 46
10820: PUSH
10821: LD_INT 16
10823: ST_TO_ADDR
// sRocket := false ;
10824: LD_ADDR_EXP 49
10828: PUSH
10829: LD_INT 0
10831: ST_TO_ADDR
// sSpeed := false ;
10832: LD_ADDR_EXP 48
10836: PUSH
10837: LD_INT 0
10839: ST_TO_ADDR
// sEngine := false ;
10840: LD_ADDR_EXP 50
10844: PUSH
10845: LD_INT 0
10847: ST_TO_ADDR
// sSpec := false ;
10848: LD_ADDR_EXP 47
10852: PUSH
10853: LD_INT 0
10855: ST_TO_ADDR
// sLevel := false ;
10856: LD_ADDR_EXP 51
10860: PUSH
10861: LD_INT 0
10863: ST_TO_ADDR
// sArmoury := false ;
10864: LD_ADDR_EXP 52
10868: PUSH
10869: LD_INT 0
10871: ST_TO_ADDR
// sRadar := false ;
10872: LD_ADDR_EXP 53
10876: PUSH
10877: LD_INT 0
10879: ST_TO_ADDR
// sBunker := false ;
10880: LD_ADDR_EXP 54
10884: PUSH
10885: LD_INT 0
10887: ST_TO_ADDR
// sHack := false ;
10888: LD_ADDR_EXP 55
10892: PUSH
10893: LD_INT 0
10895: ST_TO_ADDR
// sFire := false ;
10896: LD_ADDR_EXP 56
10900: PUSH
10901: LD_INT 0
10903: ST_TO_ADDR
// sRefresh := false ;
10904: LD_ADDR_EXP 57
10908: PUSH
10909: LD_INT 0
10911: ST_TO_ADDR
// sExp := false ;
10912: LD_ADDR_EXP 58
10916: PUSH
10917: LD_INT 0
10919: ST_TO_ADDR
// sDepot := false ;
10920: LD_ADDR_EXP 59
10924: PUSH
10925: LD_INT 0
10927: ST_TO_ADDR
// sFlag := false ;
10928: LD_ADDR_EXP 60
10932: PUSH
10933: LD_INT 0
10935: ST_TO_ADDR
// sKamikadze := false ;
10936: LD_ADDR_EXP 68
10940: PUSH
10941: LD_INT 0
10943: ST_TO_ADDR
// sTroll := false ;
10944: LD_ADDR_EXP 69
10948: PUSH
10949: LD_INT 0
10951: ST_TO_ADDR
// sSlow := false ;
10952: LD_ADDR_EXP 70
10956: PUSH
10957: LD_INT 0
10959: ST_TO_ADDR
// sLack := false ;
10960: LD_ADDR_EXP 71
10964: PUSH
10965: LD_INT 0
10967: ST_TO_ADDR
// sTank := false ;
10968: LD_ADDR_EXP 73
10972: PUSH
10973: LD_INT 0
10975: ST_TO_ADDR
// sRemote := false ;
10976: LD_ADDR_EXP 74
10980: PUSH
10981: LD_INT 0
10983: ST_TO_ADDR
// sPowell := false ;
10984: LD_ADDR_EXP 75
10988: PUSH
10989: LD_INT 0
10991: ST_TO_ADDR
// sTeleport := false ;
10992: LD_ADDR_EXP 78
10996: PUSH
10997: LD_INT 0
10999: ST_TO_ADDR
// sOilTower := false ;
11000: LD_ADDR_EXP 80
11004: PUSH
11005: LD_INT 0
11007: ST_TO_ADDR
// sShovel := false ;
11008: LD_ADDR_EXP 81
11012: PUSH
11013: LD_INT 0
11015: ST_TO_ADDR
// sSheik := false ;
11016: LD_ADDR_EXP 82
11020: PUSH
11021: LD_INT 0
11023: ST_TO_ADDR
// sEarthquake := false ;
11024: LD_ADDR_EXP 84
11028: PUSH
11029: LD_INT 0
11031: ST_TO_ADDR
// sAI := false ;
11032: LD_ADDR_EXP 85
11036: PUSH
11037: LD_INT 0
11039: ST_TO_ADDR
// sCargo := false ;
11040: LD_ADDR_EXP 88
11044: PUSH
11045: LD_INT 0
11047: ST_TO_ADDR
// sDLaser := false ;
11048: LD_ADDR_EXP 89
11052: PUSH
11053: LD_INT 0
11055: ST_TO_ADDR
// sExchange := false ;
11056: LD_ADDR_EXP 90
11060: PUSH
11061: LD_INT 0
11063: ST_TO_ADDR
// sFac := false ;
11064: LD_ADDR_EXP 91
11068: PUSH
11069: LD_INT 0
11071: ST_TO_ADDR
// sPower := false ;
11072: LD_ADDR_EXP 92
11076: PUSH
11077: LD_INT 0
11079: ST_TO_ADDR
// sRandom := false ;
11080: LD_ADDR_EXP 93
11084: PUSH
11085: LD_INT 0
11087: ST_TO_ADDR
// sShield := false ;
11088: LD_ADDR_EXP 94
11092: PUSH
11093: LD_INT 0
11095: ST_TO_ADDR
// sTime := false ;
11096: LD_ADDR_EXP 95
11100: PUSH
11101: LD_INT 0
11103: ST_TO_ADDR
// sTools := false ;
11104: LD_ADDR_EXP 96
11108: PUSH
11109: LD_INT 0
11111: ST_TO_ADDR
// sSold := false ;
11112: LD_ADDR_EXP 61
11116: PUSH
11117: LD_INT 0
11119: ST_TO_ADDR
// sDiff := false ;
11120: LD_ADDR_EXP 62
11124: PUSH
11125: LD_INT 0
11127: ST_TO_ADDR
// sFog := false ;
11128: LD_ADDR_EXP 65
11132: PUSH
11133: LD_INT 0
11135: ST_TO_ADDR
// sReset := false ;
11136: LD_ADDR_EXP 66
11140: PUSH
11141: LD_INT 0
11143: ST_TO_ADDR
// sSun := false ;
11144: LD_ADDR_EXP 67
11148: PUSH
11149: LD_INT 0
11151: ST_TO_ADDR
// sTiger := false ;
11152: LD_ADDR_EXP 63
11156: PUSH
11157: LD_INT 0
11159: ST_TO_ADDR
// sBomb := false ;
11160: LD_ADDR_EXP 64
11164: PUSH
11165: LD_INT 0
11167: ST_TO_ADDR
// sWound := false ;
11168: LD_ADDR_EXP 72
11172: PUSH
11173: LD_INT 0
11175: ST_TO_ADDR
// sBetray := false ;
11176: LD_ADDR_EXP 76
11180: PUSH
11181: LD_INT 0
11183: ST_TO_ADDR
// sContamin := false ;
11184: LD_ADDR_EXP 77
11188: PUSH
11189: LD_INT 0
11191: ST_TO_ADDR
// sOil := false ;
11192: LD_ADDR_EXP 79
11196: PUSH
11197: LD_INT 0
11199: ST_TO_ADDR
// sStu := false ;
11200: LD_ADDR_EXP 83
11204: PUSH
11205: LD_INT 0
11207: ST_TO_ADDR
// sBazooka := false ;
11208: LD_ADDR_EXP 86
11212: PUSH
11213: LD_INT 0
11215: ST_TO_ADDR
// sMortar := false ;
11216: LD_ADDR_EXP 87
11220: PUSH
11221: LD_INT 0
11223: ST_TO_ADDR
// sRanger := false ;
11224: LD_ADDR_EXP 97
11228: PUSH
11229: LD_INT 0
11231: ST_TO_ADDR
// sComputer := false ;
11232: LD_ADDR_EXP 98
11236: PUSH
11237: LD_INT 0
11239: ST_TO_ADDR
// s30 := false ;
11240: LD_ADDR_EXP 99
11244: PUSH
11245: LD_INT 0
11247: ST_TO_ADDR
// s60 := false ;
11248: LD_ADDR_EXP 100
11252: PUSH
11253: LD_INT 0
11255: ST_TO_ADDR
// end ;
11256: LD_VAR 0 1
11260: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11261: LD_INT 0
11263: PPUSH
11264: PPUSH
11265: PPUSH
11266: PPUSH
11267: PPUSH
// result := [ ] ;
11268: LD_ADDR_VAR 0 1
11272: PUSH
11273: EMPTY
11274: ST_TO_ADDR
// if campaign_id = 1 then
11275: LD_OWVAR 69
11279: PUSH
11280: LD_INT 1
11282: EQUAL
11283: IFFALSE 14449
// begin case mission_number of 1 :
11285: LD_OWVAR 70
11289: PUSH
11290: LD_INT 1
11292: DOUBLE
11293: EQUAL
11294: IFTRUE 11298
11296: GO 11374
11298: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11299: LD_ADDR_VAR 0 1
11303: PUSH
11304: LD_INT 2
11306: PUSH
11307: LD_INT 4
11309: PUSH
11310: LD_INT 11
11312: PUSH
11313: LD_INT 12
11315: PUSH
11316: LD_INT 15
11318: PUSH
11319: LD_INT 16
11321: PUSH
11322: LD_INT 22
11324: PUSH
11325: LD_INT 23
11327: PUSH
11328: LD_INT 26
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 101
11344: PUSH
11345: LD_INT 102
11347: PUSH
11348: LD_INT 106
11350: PUSH
11351: LD_INT 116
11353: PUSH
11354: LD_INT 117
11356: PUSH
11357: LD_INT 118
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: ST_TO_ADDR
11372: GO 14447
11374: LD_INT 2
11376: DOUBLE
11377: EQUAL
11378: IFTRUE 11382
11380: GO 11466
11382: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11383: LD_ADDR_VAR 0 1
11387: PUSH
11388: LD_INT 2
11390: PUSH
11391: LD_INT 4
11393: PUSH
11394: LD_INT 11
11396: PUSH
11397: LD_INT 12
11399: PUSH
11400: LD_INT 15
11402: PUSH
11403: LD_INT 16
11405: PUSH
11406: LD_INT 22
11408: PUSH
11409: LD_INT 23
11411: PUSH
11412: LD_INT 26
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 101
11428: PUSH
11429: LD_INT 102
11431: PUSH
11432: LD_INT 105
11434: PUSH
11435: LD_INT 106
11437: PUSH
11438: LD_INT 108
11440: PUSH
11441: LD_INT 116
11443: PUSH
11444: LD_INT 117
11446: PUSH
11447: LD_INT 118
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: ST_TO_ADDR
11464: GO 14447
11466: LD_INT 3
11468: DOUBLE
11469: EQUAL
11470: IFTRUE 11474
11472: GO 11562
11474: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_INT 2
11482: PUSH
11483: LD_INT 4
11485: PUSH
11486: LD_INT 5
11488: PUSH
11489: LD_INT 11
11491: PUSH
11492: LD_INT 12
11494: PUSH
11495: LD_INT 15
11497: PUSH
11498: LD_INT 16
11500: PUSH
11501: LD_INT 22
11503: PUSH
11504: LD_INT 26
11506: PUSH
11507: LD_INT 36
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 101
11524: PUSH
11525: LD_INT 102
11527: PUSH
11528: LD_INT 105
11530: PUSH
11531: LD_INT 106
11533: PUSH
11534: LD_INT 108
11536: PUSH
11537: LD_INT 116
11539: PUSH
11540: LD_INT 117
11542: PUSH
11543: LD_INT 118
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: ST_TO_ADDR
11560: GO 14447
11562: LD_INT 4
11564: DOUBLE
11565: EQUAL
11566: IFTRUE 11570
11568: GO 11666
11570: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11571: LD_ADDR_VAR 0 1
11575: PUSH
11576: LD_INT 2
11578: PUSH
11579: LD_INT 4
11581: PUSH
11582: LD_INT 5
11584: PUSH
11585: LD_INT 8
11587: PUSH
11588: LD_INT 11
11590: PUSH
11591: LD_INT 12
11593: PUSH
11594: LD_INT 15
11596: PUSH
11597: LD_INT 16
11599: PUSH
11600: LD_INT 22
11602: PUSH
11603: LD_INT 23
11605: PUSH
11606: LD_INT 26
11608: PUSH
11609: LD_INT 36
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 101
11628: PUSH
11629: LD_INT 102
11631: PUSH
11632: LD_INT 105
11634: PUSH
11635: LD_INT 106
11637: PUSH
11638: LD_INT 108
11640: PUSH
11641: LD_INT 116
11643: PUSH
11644: LD_INT 117
11646: PUSH
11647: LD_INT 118
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: ST_TO_ADDR
11664: GO 14447
11666: LD_INT 5
11668: DOUBLE
11669: EQUAL
11670: IFTRUE 11674
11672: GO 11786
11674: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11675: LD_ADDR_VAR 0 1
11679: PUSH
11680: LD_INT 2
11682: PUSH
11683: LD_INT 4
11685: PUSH
11686: LD_INT 5
11688: PUSH
11689: LD_INT 6
11691: PUSH
11692: LD_INT 8
11694: PUSH
11695: LD_INT 11
11697: PUSH
11698: LD_INT 12
11700: PUSH
11701: LD_INT 15
11703: PUSH
11704: LD_INT 16
11706: PUSH
11707: LD_INT 22
11709: PUSH
11710: LD_INT 23
11712: PUSH
11713: LD_INT 25
11715: PUSH
11716: LD_INT 26
11718: PUSH
11719: LD_INT 36
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: PUSH
11738: LD_INT 101
11740: PUSH
11741: LD_INT 102
11743: PUSH
11744: LD_INT 105
11746: PUSH
11747: LD_INT 106
11749: PUSH
11750: LD_INT 108
11752: PUSH
11753: LD_INT 109
11755: PUSH
11756: LD_INT 112
11758: PUSH
11759: LD_INT 116
11761: PUSH
11762: LD_INT 117
11764: PUSH
11765: LD_INT 118
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: ST_TO_ADDR
11784: GO 14447
11786: LD_INT 6
11788: DOUBLE
11789: EQUAL
11790: IFTRUE 11794
11792: GO 11926
11794: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11795: LD_ADDR_VAR 0 1
11799: PUSH
11800: LD_INT 2
11802: PUSH
11803: LD_INT 4
11805: PUSH
11806: LD_INT 5
11808: PUSH
11809: LD_INT 6
11811: PUSH
11812: LD_INT 8
11814: PUSH
11815: LD_INT 11
11817: PUSH
11818: LD_INT 12
11820: PUSH
11821: LD_INT 15
11823: PUSH
11824: LD_INT 16
11826: PUSH
11827: LD_INT 20
11829: PUSH
11830: LD_INT 21
11832: PUSH
11833: LD_INT 22
11835: PUSH
11836: LD_INT 23
11838: PUSH
11839: LD_INT 25
11841: PUSH
11842: LD_INT 26
11844: PUSH
11845: LD_INT 30
11847: PUSH
11848: LD_INT 31
11850: PUSH
11851: LD_INT 32
11853: PUSH
11854: LD_INT 36
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: PUSH
11878: LD_INT 101
11880: PUSH
11881: LD_INT 102
11883: PUSH
11884: LD_INT 105
11886: PUSH
11887: LD_INT 106
11889: PUSH
11890: LD_INT 108
11892: PUSH
11893: LD_INT 109
11895: PUSH
11896: LD_INT 112
11898: PUSH
11899: LD_INT 116
11901: PUSH
11902: LD_INT 117
11904: PUSH
11905: LD_INT 118
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: ST_TO_ADDR
11924: GO 14447
11926: LD_INT 7
11928: DOUBLE
11929: EQUAL
11930: IFTRUE 11934
11932: GO 12046
11934: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11935: LD_ADDR_VAR 0 1
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: LD_INT 4
11945: PUSH
11946: LD_INT 5
11948: PUSH
11949: LD_INT 7
11951: PUSH
11952: LD_INT 11
11954: PUSH
11955: LD_INT 12
11957: PUSH
11958: LD_INT 15
11960: PUSH
11961: LD_INT 16
11963: PUSH
11964: LD_INT 20
11966: PUSH
11967: LD_INT 21
11969: PUSH
11970: LD_INT 22
11972: PUSH
11973: LD_INT 23
11975: PUSH
11976: LD_INT 25
11978: PUSH
11979: LD_INT 26
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 101
12000: PUSH
12001: LD_INT 102
12003: PUSH
12004: LD_INT 103
12006: PUSH
12007: LD_INT 105
12009: PUSH
12010: LD_INT 106
12012: PUSH
12013: LD_INT 108
12015: PUSH
12016: LD_INT 112
12018: PUSH
12019: LD_INT 116
12021: PUSH
12022: LD_INT 117
12024: PUSH
12025: LD_INT 118
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: ST_TO_ADDR
12044: GO 14447
12046: LD_INT 8
12048: DOUBLE
12049: EQUAL
12050: IFTRUE 12054
12052: GO 12194
12054: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12055: LD_ADDR_VAR 0 1
12059: PUSH
12060: LD_INT 2
12062: PUSH
12063: LD_INT 4
12065: PUSH
12066: LD_INT 5
12068: PUSH
12069: LD_INT 6
12071: PUSH
12072: LD_INT 7
12074: PUSH
12075: LD_INT 8
12077: PUSH
12078: LD_INT 11
12080: PUSH
12081: LD_INT 12
12083: PUSH
12084: LD_INT 15
12086: PUSH
12087: LD_INT 16
12089: PUSH
12090: LD_INT 20
12092: PUSH
12093: LD_INT 21
12095: PUSH
12096: LD_INT 22
12098: PUSH
12099: LD_INT 23
12101: PUSH
12102: LD_INT 25
12104: PUSH
12105: LD_INT 26
12107: PUSH
12108: LD_INT 30
12110: PUSH
12111: LD_INT 31
12113: PUSH
12114: LD_INT 32
12116: PUSH
12117: LD_INT 36
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 101
12144: PUSH
12145: LD_INT 102
12147: PUSH
12148: LD_INT 103
12150: PUSH
12151: LD_INT 105
12153: PUSH
12154: LD_INT 106
12156: PUSH
12157: LD_INT 108
12159: PUSH
12160: LD_INT 109
12162: PUSH
12163: LD_INT 112
12165: PUSH
12166: LD_INT 116
12168: PUSH
12169: LD_INT 117
12171: PUSH
12172: LD_INT 118
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: ST_TO_ADDR
12192: GO 14447
12194: LD_INT 9
12196: DOUBLE
12197: EQUAL
12198: IFTRUE 12202
12200: GO 12350
12202: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12203: LD_ADDR_VAR 0 1
12207: PUSH
12208: LD_INT 2
12210: PUSH
12211: LD_INT 4
12213: PUSH
12214: LD_INT 5
12216: PUSH
12217: LD_INT 6
12219: PUSH
12220: LD_INT 7
12222: PUSH
12223: LD_INT 8
12225: PUSH
12226: LD_INT 11
12228: PUSH
12229: LD_INT 12
12231: PUSH
12232: LD_INT 15
12234: PUSH
12235: LD_INT 16
12237: PUSH
12238: LD_INT 20
12240: PUSH
12241: LD_INT 21
12243: PUSH
12244: LD_INT 22
12246: PUSH
12247: LD_INT 23
12249: PUSH
12250: LD_INT 25
12252: PUSH
12253: LD_INT 26
12255: PUSH
12256: LD_INT 28
12258: PUSH
12259: LD_INT 30
12261: PUSH
12262: LD_INT 31
12264: PUSH
12265: LD_INT 32
12267: PUSH
12268: LD_INT 36
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 101
12296: PUSH
12297: LD_INT 102
12299: PUSH
12300: LD_INT 103
12302: PUSH
12303: LD_INT 105
12305: PUSH
12306: LD_INT 106
12308: PUSH
12309: LD_INT 108
12311: PUSH
12312: LD_INT 109
12314: PUSH
12315: LD_INT 112
12317: PUSH
12318: LD_INT 114
12320: PUSH
12321: LD_INT 116
12323: PUSH
12324: LD_INT 117
12326: PUSH
12327: LD_INT 118
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: ST_TO_ADDR
12348: GO 14447
12350: LD_INT 10
12352: DOUBLE
12353: EQUAL
12354: IFTRUE 12358
12356: GO 12554
12358: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12359: LD_ADDR_VAR 0 1
12363: PUSH
12364: LD_INT 2
12366: PUSH
12367: LD_INT 4
12369: PUSH
12370: LD_INT 5
12372: PUSH
12373: LD_INT 6
12375: PUSH
12376: LD_INT 7
12378: PUSH
12379: LD_INT 8
12381: PUSH
12382: LD_INT 9
12384: PUSH
12385: LD_INT 10
12387: PUSH
12388: LD_INT 11
12390: PUSH
12391: LD_INT 12
12393: PUSH
12394: LD_INT 13
12396: PUSH
12397: LD_INT 14
12399: PUSH
12400: LD_INT 15
12402: PUSH
12403: LD_INT 16
12405: PUSH
12406: LD_INT 17
12408: PUSH
12409: LD_INT 18
12411: PUSH
12412: LD_INT 19
12414: PUSH
12415: LD_INT 20
12417: PUSH
12418: LD_INT 21
12420: PUSH
12421: LD_INT 22
12423: PUSH
12424: LD_INT 23
12426: PUSH
12427: LD_INT 24
12429: PUSH
12430: LD_INT 25
12432: PUSH
12433: LD_INT 26
12435: PUSH
12436: LD_INT 28
12438: PUSH
12439: LD_INT 30
12441: PUSH
12442: LD_INT 31
12444: PUSH
12445: LD_INT 32
12447: PUSH
12448: LD_INT 36
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 101
12484: PUSH
12485: LD_INT 102
12487: PUSH
12488: LD_INT 103
12490: PUSH
12491: LD_INT 104
12493: PUSH
12494: LD_INT 105
12496: PUSH
12497: LD_INT 106
12499: PUSH
12500: LD_INT 107
12502: PUSH
12503: LD_INT 108
12505: PUSH
12506: LD_INT 109
12508: PUSH
12509: LD_INT 110
12511: PUSH
12512: LD_INT 111
12514: PUSH
12515: LD_INT 112
12517: PUSH
12518: LD_INT 114
12520: PUSH
12521: LD_INT 116
12523: PUSH
12524: LD_INT 117
12526: PUSH
12527: LD_INT 118
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: ST_TO_ADDR
12552: GO 14447
12554: LD_INT 11
12556: DOUBLE
12557: EQUAL
12558: IFTRUE 12562
12560: GO 12766
12562: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12563: LD_ADDR_VAR 0 1
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: LD_INT 3
12573: PUSH
12574: LD_INT 4
12576: PUSH
12577: LD_INT 5
12579: PUSH
12580: LD_INT 6
12582: PUSH
12583: LD_INT 7
12585: PUSH
12586: LD_INT 8
12588: PUSH
12589: LD_INT 9
12591: PUSH
12592: LD_INT 10
12594: PUSH
12595: LD_INT 11
12597: PUSH
12598: LD_INT 12
12600: PUSH
12601: LD_INT 13
12603: PUSH
12604: LD_INT 14
12606: PUSH
12607: LD_INT 15
12609: PUSH
12610: LD_INT 16
12612: PUSH
12613: LD_INT 17
12615: PUSH
12616: LD_INT 18
12618: PUSH
12619: LD_INT 19
12621: PUSH
12622: LD_INT 20
12624: PUSH
12625: LD_INT 21
12627: PUSH
12628: LD_INT 22
12630: PUSH
12631: LD_INT 23
12633: PUSH
12634: LD_INT 24
12636: PUSH
12637: LD_INT 25
12639: PUSH
12640: LD_INT 26
12642: PUSH
12643: LD_INT 28
12645: PUSH
12646: LD_INT 30
12648: PUSH
12649: LD_INT 31
12651: PUSH
12652: LD_INT 32
12654: PUSH
12655: LD_INT 34
12657: PUSH
12658: LD_INT 36
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 101
12696: PUSH
12697: LD_INT 102
12699: PUSH
12700: LD_INT 103
12702: PUSH
12703: LD_INT 104
12705: PUSH
12706: LD_INT 105
12708: PUSH
12709: LD_INT 106
12711: PUSH
12712: LD_INT 107
12714: PUSH
12715: LD_INT 108
12717: PUSH
12718: LD_INT 109
12720: PUSH
12721: LD_INT 110
12723: PUSH
12724: LD_INT 111
12726: PUSH
12727: LD_INT 112
12729: PUSH
12730: LD_INT 114
12732: PUSH
12733: LD_INT 116
12735: PUSH
12736: LD_INT 117
12738: PUSH
12739: LD_INT 118
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: ST_TO_ADDR
12764: GO 14447
12766: LD_INT 12
12768: DOUBLE
12769: EQUAL
12770: IFTRUE 12774
12772: GO 12994
12774: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12775: LD_ADDR_VAR 0 1
12779: PUSH
12780: LD_INT 1
12782: PUSH
12783: LD_INT 2
12785: PUSH
12786: LD_INT 3
12788: PUSH
12789: LD_INT 4
12791: PUSH
12792: LD_INT 5
12794: PUSH
12795: LD_INT 6
12797: PUSH
12798: LD_INT 7
12800: PUSH
12801: LD_INT 8
12803: PUSH
12804: LD_INT 9
12806: PUSH
12807: LD_INT 10
12809: PUSH
12810: LD_INT 11
12812: PUSH
12813: LD_INT 12
12815: PUSH
12816: LD_INT 13
12818: PUSH
12819: LD_INT 14
12821: PUSH
12822: LD_INT 15
12824: PUSH
12825: LD_INT 16
12827: PUSH
12828: LD_INT 17
12830: PUSH
12831: LD_INT 18
12833: PUSH
12834: LD_INT 19
12836: PUSH
12837: LD_INT 20
12839: PUSH
12840: LD_INT 21
12842: PUSH
12843: LD_INT 22
12845: PUSH
12846: LD_INT 23
12848: PUSH
12849: LD_INT 24
12851: PUSH
12852: LD_INT 25
12854: PUSH
12855: LD_INT 26
12857: PUSH
12858: LD_INT 27
12860: PUSH
12861: LD_INT 28
12863: PUSH
12864: LD_INT 30
12866: PUSH
12867: LD_INT 31
12869: PUSH
12870: LD_INT 32
12872: PUSH
12873: LD_INT 33
12875: PUSH
12876: LD_INT 34
12878: PUSH
12879: LD_INT 36
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: PUSH
12918: LD_INT 101
12920: PUSH
12921: LD_INT 102
12923: PUSH
12924: LD_INT 103
12926: PUSH
12927: LD_INT 104
12929: PUSH
12930: LD_INT 105
12932: PUSH
12933: LD_INT 106
12935: PUSH
12936: LD_INT 107
12938: PUSH
12939: LD_INT 108
12941: PUSH
12942: LD_INT 109
12944: PUSH
12945: LD_INT 110
12947: PUSH
12948: LD_INT 111
12950: PUSH
12951: LD_INT 112
12953: PUSH
12954: LD_INT 113
12956: PUSH
12957: LD_INT 114
12959: PUSH
12960: LD_INT 116
12962: PUSH
12963: LD_INT 117
12965: PUSH
12966: LD_INT 118
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: ST_TO_ADDR
12992: GO 14447
12994: LD_INT 13
12996: DOUBLE
12997: EQUAL
12998: IFTRUE 13002
13000: GO 13210
13002: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13003: LD_ADDR_VAR 0 1
13007: PUSH
13008: LD_INT 1
13010: PUSH
13011: LD_INT 2
13013: PUSH
13014: LD_INT 3
13016: PUSH
13017: LD_INT 4
13019: PUSH
13020: LD_INT 5
13022: PUSH
13023: LD_INT 8
13025: PUSH
13026: LD_INT 9
13028: PUSH
13029: LD_INT 10
13031: PUSH
13032: LD_INT 11
13034: PUSH
13035: LD_INT 12
13037: PUSH
13038: LD_INT 14
13040: PUSH
13041: LD_INT 15
13043: PUSH
13044: LD_INT 16
13046: PUSH
13047: LD_INT 17
13049: PUSH
13050: LD_INT 18
13052: PUSH
13053: LD_INT 19
13055: PUSH
13056: LD_INT 20
13058: PUSH
13059: LD_INT 21
13061: PUSH
13062: LD_INT 22
13064: PUSH
13065: LD_INT 23
13067: PUSH
13068: LD_INT 24
13070: PUSH
13071: LD_INT 25
13073: PUSH
13074: LD_INT 26
13076: PUSH
13077: LD_INT 27
13079: PUSH
13080: LD_INT 28
13082: PUSH
13083: LD_INT 30
13085: PUSH
13086: LD_INT 31
13088: PUSH
13089: LD_INT 32
13091: PUSH
13092: LD_INT 33
13094: PUSH
13095: LD_INT 34
13097: PUSH
13098: LD_INT 36
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: PUSH
13134: LD_INT 101
13136: PUSH
13137: LD_INT 102
13139: PUSH
13140: LD_INT 103
13142: PUSH
13143: LD_INT 104
13145: PUSH
13146: LD_INT 105
13148: PUSH
13149: LD_INT 106
13151: PUSH
13152: LD_INT 107
13154: PUSH
13155: LD_INT 108
13157: PUSH
13158: LD_INT 109
13160: PUSH
13161: LD_INT 110
13163: PUSH
13164: LD_INT 111
13166: PUSH
13167: LD_INT 112
13169: PUSH
13170: LD_INT 113
13172: PUSH
13173: LD_INT 114
13175: PUSH
13176: LD_INT 116
13178: PUSH
13179: LD_INT 117
13181: PUSH
13182: LD_INT 118
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: ST_TO_ADDR
13208: GO 14447
13210: LD_INT 14
13212: DOUBLE
13213: EQUAL
13214: IFTRUE 13218
13216: GO 13442
13218: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13219: LD_ADDR_VAR 0 1
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: LD_INT 2
13229: PUSH
13230: LD_INT 3
13232: PUSH
13233: LD_INT 4
13235: PUSH
13236: LD_INT 5
13238: PUSH
13239: LD_INT 6
13241: PUSH
13242: LD_INT 7
13244: PUSH
13245: LD_INT 8
13247: PUSH
13248: LD_INT 9
13250: PUSH
13251: LD_INT 10
13253: PUSH
13254: LD_INT 11
13256: PUSH
13257: LD_INT 12
13259: PUSH
13260: LD_INT 13
13262: PUSH
13263: LD_INT 14
13265: PUSH
13266: LD_INT 15
13268: PUSH
13269: LD_INT 16
13271: PUSH
13272: LD_INT 17
13274: PUSH
13275: LD_INT 18
13277: PUSH
13278: LD_INT 19
13280: PUSH
13281: LD_INT 20
13283: PUSH
13284: LD_INT 21
13286: PUSH
13287: LD_INT 22
13289: PUSH
13290: LD_INT 23
13292: PUSH
13293: LD_INT 24
13295: PUSH
13296: LD_INT 25
13298: PUSH
13299: LD_INT 26
13301: PUSH
13302: LD_INT 27
13304: PUSH
13305: LD_INT 28
13307: PUSH
13308: LD_INT 29
13310: PUSH
13311: LD_INT 30
13313: PUSH
13314: LD_INT 31
13316: PUSH
13317: LD_INT 32
13319: PUSH
13320: LD_INT 33
13322: PUSH
13323: LD_INT 34
13325: PUSH
13326: LD_INT 36
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 101
13368: PUSH
13369: LD_INT 102
13371: PUSH
13372: LD_INT 103
13374: PUSH
13375: LD_INT 104
13377: PUSH
13378: LD_INT 105
13380: PUSH
13381: LD_INT 106
13383: PUSH
13384: LD_INT 107
13386: PUSH
13387: LD_INT 108
13389: PUSH
13390: LD_INT 109
13392: PUSH
13393: LD_INT 110
13395: PUSH
13396: LD_INT 111
13398: PUSH
13399: LD_INT 112
13401: PUSH
13402: LD_INT 113
13404: PUSH
13405: LD_INT 114
13407: PUSH
13408: LD_INT 116
13410: PUSH
13411: LD_INT 117
13413: PUSH
13414: LD_INT 118
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: ST_TO_ADDR
13440: GO 14447
13442: LD_INT 15
13444: DOUBLE
13445: EQUAL
13446: IFTRUE 13450
13448: GO 13674
13450: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13451: LD_ADDR_VAR 0 1
13455: PUSH
13456: LD_INT 1
13458: PUSH
13459: LD_INT 2
13461: PUSH
13462: LD_INT 3
13464: PUSH
13465: LD_INT 4
13467: PUSH
13468: LD_INT 5
13470: PUSH
13471: LD_INT 6
13473: PUSH
13474: LD_INT 7
13476: PUSH
13477: LD_INT 8
13479: PUSH
13480: LD_INT 9
13482: PUSH
13483: LD_INT 10
13485: PUSH
13486: LD_INT 11
13488: PUSH
13489: LD_INT 12
13491: PUSH
13492: LD_INT 13
13494: PUSH
13495: LD_INT 14
13497: PUSH
13498: LD_INT 15
13500: PUSH
13501: LD_INT 16
13503: PUSH
13504: LD_INT 17
13506: PUSH
13507: LD_INT 18
13509: PUSH
13510: LD_INT 19
13512: PUSH
13513: LD_INT 20
13515: PUSH
13516: LD_INT 21
13518: PUSH
13519: LD_INT 22
13521: PUSH
13522: LD_INT 23
13524: PUSH
13525: LD_INT 24
13527: PUSH
13528: LD_INT 25
13530: PUSH
13531: LD_INT 26
13533: PUSH
13534: LD_INT 27
13536: PUSH
13537: LD_INT 28
13539: PUSH
13540: LD_INT 29
13542: PUSH
13543: LD_INT 30
13545: PUSH
13546: LD_INT 31
13548: PUSH
13549: LD_INT 32
13551: PUSH
13552: LD_INT 33
13554: PUSH
13555: LD_INT 34
13557: PUSH
13558: LD_INT 36
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 101
13600: PUSH
13601: LD_INT 102
13603: PUSH
13604: LD_INT 103
13606: PUSH
13607: LD_INT 104
13609: PUSH
13610: LD_INT 105
13612: PUSH
13613: LD_INT 106
13615: PUSH
13616: LD_INT 107
13618: PUSH
13619: LD_INT 108
13621: PUSH
13622: LD_INT 109
13624: PUSH
13625: LD_INT 110
13627: PUSH
13628: LD_INT 111
13630: PUSH
13631: LD_INT 112
13633: PUSH
13634: LD_INT 113
13636: PUSH
13637: LD_INT 114
13639: PUSH
13640: LD_INT 116
13642: PUSH
13643: LD_INT 117
13645: PUSH
13646: LD_INT 118
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: ST_TO_ADDR
13672: GO 14447
13674: LD_INT 16
13676: DOUBLE
13677: EQUAL
13678: IFTRUE 13682
13680: GO 13818
13682: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13683: LD_ADDR_VAR 0 1
13687: PUSH
13688: LD_INT 2
13690: PUSH
13691: LD_INT 4
13693: PUSH
13694: LD_INT 5
13696: PUSH
13697: LD_INT 7
13699: PUSH
13700: LD_INT 11
13702: PUSH
13703: LD_INT 12
13705: PUSH
13706: LD_INT 15
13708: PUSH
13709: LD_INT 16
13711: PUSH
13712: LD_INT 20
13714: PUSH
13715: LD_INT 21
13717: PUSH
13718: LD_INT 22
13720: PUSH
13721: LD_INT 23
13723: PUSH
13724: LD_INT 25
13726: PUSH
13727: LD_INT 26
13729: PUSH
13730: LD_INT 30
13732: PUSH
13733: LD_INT 31
13735: PUSH
13736: LD_INT 32
13738: PUSH
13739: LD_INT 33
13741: PUSH
13742: LD_INT 34
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: PUSH
13766: LD_INT 101
13768: PUSH
13769: LD_INT 102
13771: PUSH
13772: LD_INT 103
13774: PUSH
13775: LD_INT 106
13777: PUSH
13778: LD_INT 108
13780: PUSH
13781: LD_INT 112
13783: PUSH
13784: LD_INT 113
13786: PUSH
13787: LD_INT 114
13789: PUSH
13790: LD_INT 116
13792: PUSH
13793: LD_INT 117
13795: PUSH
13796: LD_INT 118
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: ST_TO_ADDR
13816: GO 14447
13818: LD_INT 17
13820: DOUBLE
13821: EQUAL
13822: IFTRUE 13826
13824: GO 14050
13826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13827: LD_ADDR_VAR 0 1
13831: PUSH
13832: LD_INT 1
13834: PUSH
13835: LD_INT 2
13837: PUSH
13838: LD_INT 3
13840: PUSH
13841: LD_INT 4
13843: PUSH
13844: LD_INT 5
13846: PUSH
13847: LD_INT 6
13849: PUSH
13850: LD_INT 7
13852: PUSH
13853: LD_INT 8
13855: PUSH
13856: LD_INT 9
13858: PUSH
13859: LD_INT 10
13861: PUSH
13862: LD_INT 11
13864: PUSH
13865: LD_INT 12
13867: PUSH
13868: LD_INT 13
13870: PUSH
13871: LD_INT 14
13873: PUSH
13874: LD_INT 15
13876: PUSH
13877: LD_INT 16
13879: PUSH
13880: LD_INT 17
13882: PUSH
13883: LD_INT 18
13885: PUSH
13886: LD_INT 19
13888: PUSH
13889: LD_INT 20
13891: PUSH
13892: LD_INT 21
13894: PUSH
13895: LD_INT 22
13897: PUSH
13898: LD_INT 23
13900: PUSH
13901: LD_INT 24
13903: PUSH
13904: LD_INT 25
13906: PUSH
13907: LD_INT 26
13909: PUSH
13910: LD_INT 27
13912: PUSH
13913: LD_INT 28
13915: PUSH
13916: LD_INT 29
13918: PUSH
13919: LD_INT 30
13921: PUSH
13922: LD_INT 31
13924: PUSH
13925: LD_INT 32
13927: PUSH
13928: LD_INT 33
13930: PUSH
13931: LD_INT 34
13933: PUSH
13934: LD_INT 36
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 101
13976: PUSH
13977: LD_INT 102
13979: PUSH
13980: LD_INT 103
13982: PUSH
13983: LD_INT 104
13985: PUSH
13986: LD_INT 105
13988: PUSH
13989: LD_INT 106
13991: PUSH
13992: LD_INT 107
13994: PUSH
13995: LD_INT 108
13997: PUSH
13998: LD_INT 109
14000: PUSH
14001: LD_INT 110
14003: PUSH
14004: LD_INT 111
14006: PUSH
14007: LD_INT 112
14009: PUSH
14010: LD_INT 113
14012: PUSH
14013: LD_INT 114
14015: PUSH
14016: LD_INT 116
14018: PUSH
14019: LD_INT 117
14021: PUSH
14022: LD_INT 118
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: ST_TO_ADDR
14048: GO 14447
14050: LD_INT 18
14052: DOUBLE
14053: EQUAL
14054: IFTRUE 14058
14056: GO 14206
14058: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14059: LD_ADDR_VAR 0 1
14063: PUSH
14064: LD_INT 2
14066: PUSH
14067: LD_INT 4
14069: PUSH
14070: LD_INT 5
14072: PUSH
14073: LD_INT 7
14075: PUSH
14076: LD_INT 11
14078: PUSH
14079: LD_INT 12
14081: PUSH
14082: LD_INT 15
14084: PUSH
14085: LD_INT 16
14087: PUSH
14088: LD_INT 20
14090: PUSH
14091: LD_INT 21
14093: PUSH
14094: LD_INT 22
14096: PUSH
14097: LD_INT 23
14099: PUSH
14100: LD_INT 25
14102: PUSH
14103: LD_INT 26
14105: PUSH
14106: LD_INT 30
14108: PUSH
14109: LD_INT 31
14111: PUSH
14112: LD_INT 32
14114: PUSH
14115: LD_INT 33
14117: PUSH
14118: LD_INT 34
14120: PUSH
14121: LD_INT 35
14123: PUSH
14124: LD_INT 36
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 101
14152: PUSH
14153: LD_INT 102
14155: PUSH
14156: LD_INT 103
14158: PUSH
14159: LD_INT 106
14161: PUSH
14162: LD_INT 108
14164: PUSH
14165: LD_INT 112
14167: PUSH
14168: LD_INT 113
14170: PUSH
14171: LD_INT 114
14173: PUSH
14174: LD_INT 115
14176: PUSH
14177: LD_INT 116
14179: PUSH
14180: LD_INT 117
14182: PUSH
14183: LD_INT 118
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: ST_TO_ADDR
14204: GO 14447
14206: LD_INT 19
14208: DOUBLE
14209: EQUAL
14210: IFTRUE 14214
14212: GO 14446
14214: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14215: LD_ADDR_VAR 0 1
14219: PUSH
14220: LD_INT 1
14222: PUSH
14223: LD_INT 2
14225: PUSH
14226: LD_INT 3
14228: PUSH
14229: LD_INT 4
14231: PUSH
14232: LD_INT 5
14234: PUSH
14235: LD_INT 6
14237: PUSH
14238: LD_INT 7
14240: PUSH
14241: LD_INT 8
14243: PUSH
14244: LD_INT 9
14246: PUSH
14247: LD_INT 10
14249: PUSH
14250: LD_INT 11
14252: PUSH
14253: LD_INT 12
14255: PUSH
14256: LD_INT 13
14258: PUSH
14259: LD_INT 14
14261: PUSH
14262: LD_INT 15
14264: PUSH
14265: LD_INT 16
14267: PUSH
14268: LD_INT 17
14270: PUSH
14271: LD_INT 18
14273: PUSH
14274: LD_INT 19
14276: PUSH
14277: LD_INT 20
14279: PUSH
14280: LD_INT 21
14282: PUSH
14283: LD_INT 22
14285: PUSH
14286: LD_INT 23
14288: PUSH
14289: LD_INT 24
14291: PUSH
14292: LD_INT 25
14294: PUSH
14295: LD_INT 26
14297: PUSH
14298: LD_INT 27
14300: PUSH
14301: LD_INT 28
14303: PUSH
14304: LD_INT 29
14306: PUSH
14307: LD_INT 30
14309: PUSH
14310: LD_INT 31
14312: PUSH
14313: LD_INT 32
14315: PUSH
14316: LD_INT 33
14318: PUSH
14319: LD_INT 34
14321: PUSH
14322: LD_INT 35
14324: PUSH
14325: LD_INT 36
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: PUSH
14366: LD_INT 101
14368: PUSH
14369: LD_INT 102
14371: PUSH
14372: LD_INT 103
14374: PUSH
14375: LD_INT 104
14377: PUSH
14378: LD_INT 105
14380: PUSH
14381: LD_INT 106
14383: PUSH
14384: LD_INT 107
14386: PUSH
14387: LD_INT 108
14389: PUSH
14390: LD_INT 109
14392: PUSH
14393: LD_INT 110
14395: PUSH
14396: LD_INT 111
14398: PUSH
14399: LD_INT 112
14401: PUSH
14402: LD_INT 113
14404: PUSH
14405: LD_INT 114
14407: PUSH
14408: LD_INT 115
14410: PUSH
14411: LD_INT 116
14413: PUSH
14414: LD_INT 117
14416: PUSH
14417: LD_INT 118
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: ST_TO_ADDR
14444: GO 14447
14446: POP
// end else
14447: GO 14678
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14449: LD_ADDR_VAR 0 1
14453: PUSH
14454: LD_INT 1
14456: PUSH
14457: LD_INT 2
14459: PUSH
14460: LD_INT 3
14462: PUSH
14463: LD_INT 4
14465: PUSH
14466: LD_INT 5
14468: PUSH
14469: LD_INT 6
14471: PUSH
14472: LD_INT 7
14474: PUSH
14475: LD_INT 8
14477: PUSH
14478: LD_INT 9
14480: PUSH
14481: LD_INT 10
14483: PUSH
14484: LD_INT 11
14486: PUSH
14487: LD_INT 12
14489: PUSH
14490: LD_INT 13
14492: PUSH
14493: LD_INT 14
14495: PUSH
14496: LD_INT 15
14498: PUSH
14499: LD_INT 16
14501: PUSH
14502: LD_INT 17
14504: PUSH
14505: LD_INT 18
14507: PUSH
14508: LD_INT 19
14510: PUSH
14511: LD_INT 20
14513: PUSH
14514: LD_INT 21
14516: PUSH
14517: LD_INT 22
14519: PUSH
14520: LD_INT 23
14522: PUSH
14523: LD_INT 24
14525: PUSH
14526: LD_INT 25
14528: PUSH
14529: LD_INT 26
14531: PUSH
14532: LD_INT 27
14534: PUSH
14535: LD_INT 28
14537: PUSH
14538: LD_INT 29
14540: PUSH
14541: LD_INT 30
14543: PUSH
14544: LD_INT 31
14546: PUSH
14547: LD_INT 32
14549: PUSH
14550: LD_INT 33
14552: PUSH
14553: LD_INT 34
14555: PUSH
14556: LD_INT 35
14558: PUSH
14559: LD_INT 36
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: PUSH
14600: LD_INT 101
14602: PUSH
14603: LD_INT 102
14605: PUSH
14606: LD_INT 103
14608: PUSH
14609: LD_INT 104
14611: PUSH
14612: LD_INT 105
14614: PUSH
14615: LD_INT 106
14617: PUSH
14618: LD_INT 107
14620: PUSH
14621: LD_INT 108
14623: PUSH
14624: LD_INT 109
14626: PUSH
14627: LD_INT 110
14629: PUSH
14630: LD_INT 111
14632: PUSH
14633: LD_INT 112
14635: PUSH
14636: LD_INT 113
14638: PUSH
14639: LD_INT 114
14641: PUSH
14642: LD_INT 115
14644: PUSH
14645: LD_INT 116
14647: PUSH
14648: LD_INT 117
14650: PUSH
14651: LD_INT 118
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: ST_TO_ADDR
// if result then
14678: LD_VAR 0 1
14682: IFFALSE 14971
// begin normal :=  ;
14684: LD_ADDR_VAR 0 3
14688: PUSH
14689: LD_STRING 
14691: ST_TO_ADDR
// hardcore :=  ;
14692: LD_ADDR_VAR 0 4
14696: PUSH
14697: LD_STRING 
14699: ST_TO_ADDR
// for i = 1 to normalCounter do
14700: LD_ADDR_VAR 0 5
14704: PUSH
14705: DOUBLE
14706: LD_INT 1
14708: DEC
14709: ST_TO_ADDR
14710: LD_EXP 45
14714: PUSH
14715: FOR_TO
14716: IFFALSE 14817
// begin tmp := 0 ;
14718: LD_ADDR_VAR 0 2
14722: PUSH
14723: LD_STRING 0
14725: ST_TO_ADDR
// if result [ 1 ] then
14726: LD_VAR 0 1
14730: PUSH
14731: LD_INT 1
14733: ARRAY
14734: IFFALSE 14799
// if result [ 1 ] [ 1 ] = i then
14736: LD_VAR 0 1
14740: PUSH
14741: LD_INT 1
14743: ARRAY
14744: PUSH
14745: LD_INT 1
14747: ARRAY
14748: PUSH
14749: LD_VAR 0 5
14753: EQUAL
14754: IFFALSE 14799
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14756: LD_ADDR_VAR 0 1
14760: PUSH
14761: LD_VAR 0 1
14765: PPUSH
14766: LD_INT 1
14768: PPUSH
14769: LD_VAR 0 1
14773: PUSH
14774: LD_INT 1
14776: ARRAY
14777: PPUSH
14778: LD_INT 1
14780: PPUSH
14781: CALL_OW 3
14785: PPUSH
14786: CALL_OW 1
14790: ST_TO_ADDR
// tmp := 1 ;
14791: LD_ADDR_VAR 0 2
14795: PUSH
14796: LD_STRING 1
14798: ST_TO_ADDR
// end ; normal := normal & tmp ;
14799: LD_ADDR_VAR 0 3
14803: PUSH
14804: LD_VAR 0 3
14808: PUSH
14809: LD_VAR 0 2
14813: STR
14814: ST_TO_ADDR
// end ;
14815: GO 14715
14817: POP
14818: POP
// for i = 1 to hardcoreCounter do
14819: LD_ADDR_VAR 0 5
14823: PUSH
14824: DOUBLE
14825: LD_INT 1
14827: DEC
14828: ST_TO_ADDR
14829: LD_EXP 46
14833: PUSH
14834: FOR_TO
14835: IFFALSE 14940
// begin tmp := 0 ;
14837: LD_ADDR_VAR 0 2
14841: PUSH
14842: LD_STRING 0
14844: ST_TO_ADDR
// if result [ 2 ] then
14845: LD_VAR 0 1
14849: PUSH
14850: LD_INT 2
14852: ARRAY
14853: IFFALSE 14922
// if result [ 2 ] [ 1 ] = 100 + i then
14855: LD_VAR 0 1
14859: PUSH
14860: LD_INT 2
14862: ARRAY
14863: PUSH
14864: LD_INT 1
14866: ARRAY
14867: PUSH
14868: LD_INT 100
14870: PUSH
14871: LD_VAR 0 5
14875: PLUS
14876: EQUAL
14877: IFFALSE 14922
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14879: LD_ADDR_VAR 0 1
14883: PUSH
14884: LD_VAR 0 1
14888: PPUSH
14889: LD_INT 2
14891: PPUSH
14892: LD_VAR 0 1
14896: PUSH
14897: LD_INT 2
14899: ARRAY
14900: PPUSH
14901: LD_INT 1
14903: PPUSH
14904: CALL_OW 3
14908: PPUSH
14909: CALL_OW 1
14913: ST_TO_ADDR
// tmp := 1 ;
14914: LD_ADDR_VAR 0 2
14918: PUSH
14919: LD_STRING 1
14921: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14922: LD_ADDR_VAR 0 4
14926: PUSH
14927: LD_VAR 0 4
14931: PUSH
14932: LD_VAR 0 2
14936: STR
14937: ST_TO_ADDR
// end ;
14938: GO 14834
14940: POP
14941: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14942: LD_STRING getStreamItemsFromMission("
14944: PUSH
14945: LD_VAR 0 3
14949: STR
14950: PUSH
14951: LD_STRING ","
14953: STR
14954: PUSH
14955: LD_VAR 0 4
14959: STR
14960: PUSH
14961: LD_STRING ")
14963: STR
14964: PPUSH
14965: CALL_OW 559
// end else
14969: GO 14978
// ToLua ( getStreamItemsFromMission("","") ) ;
14971: LD_STRING getStreamItemsFromMission("","")
14973: PPUSH
14974: CALL_OW 559
// end ;
14978: LD_VAR 0 1
14982: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14983: LD_EXP 44
14987: PUSH
14988: LD_EXP 49
14992: AND
14993: IFFALSE 15117
14995: GO 14997
14997: DISABLE
14998: LD_INT 0
15000: PPUSH
15001: PPUSH
// begin enable ;
15002: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15003: LD_ADDR_VAR 0 2
15007: PUSH
15008: LD_INT 22
15010: PUSH
15011: LD_OWVAR 2
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PUSH
15020: LD_INT 2
15022: PUSH
15023: LD_INT 34
15025: PUSH
15026: LD_INT 7
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PUSH
15033: LD_INT 34
15035: PUSH
15036: LD_INT 45
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 34
15045: PUSH
15046: LD_INT 28
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 34
15055: PUSH
15056: LD_INT 47
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PPUSH
15074: CALL_OW 69
15078: ST_TO_ADDR
// if not tmp then
15079: LD_VAR 0 2
15083: NOT
15084: IFFALSE 15088
// exit ;
15086: GO 15117
// for i in tmp do
15088: LD_ADDR_VAR 0 1
15092: PUSH
15093: LD_VAR 0 2
15097: PUSH
15098: FOR_IN
15099: IFFALSE 15115
// begin SetLives ( i , 0 ) ;
15101: LD_VAR 0 1
15105: PPUSH
15106: LD_INT 0
15108: PPUSH
15109: CALL_OW 234
// end ;
15113: GO 15098
15115: POP
15116: POP
// end ;
15117: PPOPN 2
15119: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15120: LD_EXP 44
15124: PUSH
15125: LD_EXP 50
15129: AND
15130: IFFALSE 15214
15132: GO 15134
15134: DISABLE
15135: LD_INT 0
15137: PPUSH
15138: PPUSH
// begin enable ;
15139: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15140: LD_ADDR_VAR 0 2
15144: PUSH
15145: LD_INT 22
15147: PUSH
15148: LD_OWVAR 2
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PUSH
15157: LD_INT 32
15159: PUSH
15160: LD_INT 3
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PPUSH
15171: CALL_OW 69
15175: ST_TO_ADDR
// if not tmp then
15176: LD_VAR 0 2
15180: NOT
15181: IFFALSE 15185
// exit ;
15183: GO 15214
// for i in tmp do
15185: LD_ADDR_VAR 0 1
15189: PUSH
15190: LD_VAR 0 2
15194: PUSH
15195: FOR_IN
15196: IFFALSE 15212
// begin SetLives ( i , 0 ) ;
15198: LD_VAR 0 1
15202: PPUSH
15203: LD_INT 0
15205: PPUSH
15206: CALL_OW 234
// end ;
15210: GO 15195
15212: POP
15213: POP
// end ;
15214: PPOPN 2
15216: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15217: LD_EXP 44
15221: PUSH
15222: LD_EXP 47
15226: AND
15227: IFFALSE 15320
15229: GO 15231
15231: DISABLE
15232: LD_INT 0
15234: PPUSH
// begin enable ;
15235: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15236: LD_ADDR_VAR 0 1
15240: PUSH
15241: LD_INT 22
15243: PUSH
15244: LD_OWVAR 2
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: LD_INT 2
15255: PUSH
15256: LD_INT 25
15258: PUSH
15259: LD_INT 5
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 25
15268: PUSH
15269: LD_INT 9
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 25
15278: PUSH
15279: LD_INT 8
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PPUSH
15296: CALL_OW 69
15300: PUSH
15301: FOR_IN
15302: IFFALSE 15318
// begin SetClass ( i , 1 ) ;
15304: LD_VAR 0 1
15308: PPUSH
15309: LD_INT 1
15311: PPUSH
15312: CALL_OW 336
// end ;
15316: GO 15301
15318: POP
15319: POP
// end ;
15320: PPOPN 1
15322: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15323: LD_EXP 44
15327: PUSH
15328: LD_EXP 48
15332: AND
15333: PUSH
15334: LD_OWVAR 65
15338: PUSH
15339: LD_INT 7
15341: LESS
15342: AND
15343: IFFALSE 15357
15345: GO 15347
15347: DISABLE
// begin enable ;
15348: ENABLE
// game_speed := 7 ;
15349: LD_ADDR_OWVAR 65
15353: PUSH
15354: LD_INT 7
15356: ST_TO_ADDR
// end ;
15357: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15358: LD_EXP 44
15362: PUSH
15363: LD_EXP 51
15367: AND
15368: IFFALSE 15570
15370: GO 15372
15372: DISABLE
15373: LD_INT 0
15375: PPUSH
15376: PPUSH
15377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15378: LD_ADDR_VAR 0 3
15382: PUSH
15383: LD_INT 81
15385: PUSH
15386: LD_OWVAR 2
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 21
15397: PUSH
15398: LD_INT 1
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PPUSH
15409: CALL_OW 69
15413: ST_TO_ADDR
// if not tmp then
15414: LD_VAR 0 3
15418: NOT
15419: IFFALSE 15423
// exit ;
15421: GO 15570
// if tmp > 5 then
15423: LD_VAR 0 3
15427: PUSH
15428: LD_INT 5
15430: GREATER
15431: IFFALSE 15443
// k := 5 else
15433: LD_ADDR_VAR 0 2
15437: PUSH
15438: LD_INT 5
15440: ST_TO_ADDR
15441: GO 15453
// k := tmp ;
15443: LD_ADDR_VAR 0 2
15447: PUSH
15448: LD_VAR 0 3
15452: ST_TO_ADDR
// for i := 1 to k do
15453: LD_ADDR_VAR 0 1
15457: PUSH
15458: DOUBLE
15459: LD_INT 1
15461: DEC
15462: ST_TO_ADDR
15463: LD_VAR 0 2
15467: PUSH
15468: FOR_TO
15469: IFFALSE 15568
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15471: LD_VAR 0 3
15475: PUSH
15476: LD_VAR 0 1
15480: ARRAY
15481: PPUSH
15482: LD_VAR 0 1
15486: PUSH
15487: LD_INT 4
15489: MOD
15490: PUSH
15491: LD_INT 1
15493: PLUS
15494: PPUSH
15495: CALL_OW 259
15499: PUSH
15500: LD_INT 10
15502: LESS
15503: IFFALSE 15566
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15505: LD_VAR 0 3
15509: PUSH
15510: LD_VAR 0 1
15514: ARRAY
15515: PPUSH
15516: LD_VAR 0 1
15520: PUSH
15521: LD_INT 4
15523: MOD
15524: PUSH
15525: LD_INT 1
15527: PLUS
15528: PPUSH
15529: LD_VAR 0 3
15533: PUSH
15534: LD_VAR 0 1
15538: ARRAY
15539: PPUSH
15540: LD_VAR 0 1
15544: PUSH
15545: LD_INT 4
15547: MOD
15548: PUSH
15549: LD_INT 1
15551: PLUS
15552: PPUSH
15553: CALL_OW 259
15557: PUSH
15558: LD_INT 1
15560: PLUS
15561: PPUSH
15562: CALL_OW 237
15566: GO 15468
15568: POP
15569: POP
// end ;
15570: PPOPN 3
15572: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15573: LD_EXP 44
15577: PUSH
15578: LD_EXP 52
15582: AND
15583: IFFALSE 15603
15585: GO 15587
15587: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15588: LD_INT 4
15590: PPUSH
15591: LD_OWVAR 2
15595: PPUSH
15596: LD_INT 0
15598: PPUSH
15599: CALL_OW 324
15603: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15604: LD_EXP 44
15608: PUSH
15609: LD_EXP 81
15613: AND
15614: IFFALSE 15634
15616: GO 15618
15618: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15619: LD_INT 19
15621: PPUSH
15622: LD_OWVAR 2
15626: PPUSH
15627: LD_INT 0
15629: PPUSH
15630: CALL_OW 324
15634: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15635: LD_EXP 44
15639: PUSH
15640: LD_EXP 53
15644: AND
15645: IFFALSE 15747
15647: GO 15649
15649: DISABLE
15650: LD_INT 0
15652: PPUSH
15653: PPUSH
// begin enable ;
15654: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15655: LD_ADDR_VAR 0 2
15659: PUSH
15660: LD_INT 22
15662: PUSH
15663: LD_OWVAR 2
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 2
15674: PUSH
15675: LD_INT 34
15677: PUSH
15678: LD_INT 11
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 34
15687: PUSH
15688: LD_INT 30
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: LIST
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PPUSH
15704: CALL_OW 69
15708: ST_TO_ADDR
// if not tmp then
15709: LD_VAR 0 2
15713: NOT
15714: IFFALSE 15718
// exit ;
15716: GO 15747
// for i in tmp do
15718: LD_ADDR_VAR 0 1
15722: PUSH
15723: LD_VAR 0 2
15727: PUSH
15728: FOR_IN
15729: IFFALSE 15745
// begin SetLives ( i , 0 ) ;
15731: LD_VAR 0 1
15735: PPUSH
15736: LD_INT 0
15738: PPUSH
15739: CALL_OW 234
// end ;
15743: GO 15728
15745: POP
15746: POP
// end ;
15747: PPOPN 2
15749: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15750: LD_EXP 44
15754: PUSH
15755: LD_EXP 54
15759: AND
15760: IFFALSE 15780
15762: GO 15764
15764: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15765: LD_INT 32
15767: PPUSH
15768: LD_OWVAR 2
15772: PPUSH
15773: LD_INT 0
15775: PPUSH
15776: CALL_OW 324
15780: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15781: LD_EXP 44
15785: PUSH
15786: LD_EXP 55
15790: AND
15791: IFFALSE 15972
15793: GO 15795
15795: DISABLE
15796: LD_INT 0
15798: PPUSH
15799: PPUSH
15800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15801: LD_ADDR_VAR 0 2
15805: PUSH
15806: LD_INT 22
15808: PUSH
15809: LD_OWVAR 2
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 33
15820: PUSH
15821: LD_INT 3
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PPUSH
15832: CALL_OW 69
15836: ST_TO_ADDR
// if not tmp then
15837: LD_VAR 0 2
15841: NOT
15842: IFFALSE 15846
// exit ;
15844: GO 15972
// side := 0 ;
15846: LD_ADDR_VAR 0 3
15850: PUSH
15851: LD_INT 0
15853: ST_TO_ADDR
// for i := 1 to 8 do
15854: LD_ADDR_VAR 0 1
15858: PUSH
15859: DOUBLE
15860: LD_INT 1
15862: DEC
15863: ST_TO_ADDR
15864: LD_INT 8
15866: PUSH
15867: FOR_TO
15868: IFFALSE 15916
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15870: LD_OWVAR 2
15874: PUSH
15875: LD_VAR 0 1
15879: NONEQUAL
15880: PUSH
15881: LD_OWVAR 2
15885: PPUSH
15886: LD_VAR 0 1
15890: PPUSH
15891: CALL_OW 81
15895: PUSH
15896: LD_INT 2
15898: EQUAL
15899: AND
15900: IFFALSE 15914
// begin side := i ;
15902: LD_ADDR_VAR 0 3
15906: PUSH
15907: LD_VAR 0 1
15911: ST_TO_ADDR
// break ;
15912: GO 15916
// end ;
15914: GO 15867
15916: POP
15917: POP
// if not side then
15918: LD_VAR 0 3
15922: NOT
15923: IFFALSE 15927
// exit ;
15925: GO 15972
// for i := 1 to tmp do
15927: LD_ADDR_VAR 0 1
15931: PUSH
15932: DOUBLE
15933: LD_INT 1
15935: DEC
15936: ST_TO_ADDR
15937: LD_VAR 0 2
15941: PUSH
15942: FOR_TO
15943: IFFALSE 15970
// if Prob ( 60 ) then
15945: LD_INT 60
15947: PPUSH
15948: CALL_OW 13
15952: IFFALSE 15968
// SetSide ( i , side ) ;
15954: LD_VAR 0 1
15958: PPUSH
15959: LD_VAR 0 3
15963: PPUSH
15964: CALL_OW 235
15968: GO 15942
15970: POP
15971: POP
// end ;
15972: PPOPN 3
15974: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15975: LD_EXP 44
15979: PUSH
15980: LD_EXP 57
15984: AND
15985: IFFALSE 16104
15987: GO 15989
15989: DISABLE
15990: LD_INT 0
15992: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15993: LD_ADDR_VAR 0 1
15997: PUSH
15998: LD_INT 22
16000: PUSH
16001: LD_OWVAR 2
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 21
16012: PUSH
16013: LD_INT 1
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 3
16022: PUSH
16023: LD_INT 23
16025: PUSH
16026: LD_INT 0
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: LIST
16041: PPUSH
16042: CALL_OW 69
16046: PUSH
16047: FOR_IN
16048: IFFALSE 16102
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL_OW 257
16059: PUSH
16060: LD_INT 1
16062: PUSH
16063: LD_INT 2
16065: PUSH
16066: LD_INT 3
16068: PUSH
16069: LD_INT 4
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: IN
16078: IFFALSE 16100
// SetClass ( un , rand ( 1 , 4 ) ) ;
16080: LD_VAR 0 1
16084: PPUSH
16085: LD_INT 1
16087: PPUSH
16088: LD_INT 4
16090: PPUSH
16091: CALL_OW 12
16095: PPUSH
16096: CALL_OW 336
16100: GO 16047
16102: POP
16103: POP
// end ;
16104: PPOPN 1
16106: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16107: LD_EXP 44
16111: PUSH
16112: LD_EXP 56
16116: AND
16117: IFFALSE 16196
16119: GO 16121
16121: DISABLE
16122: LD_INT 0
16124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16125: LD_ADDR_VAR 0 1
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_OWVAR 2
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 21
16144: PUSH
16145: LD_INT 3
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PPUSH
16156: CALL_OW 69
16160: ST_TO_ADDR
// if not tmp then
16161: LD_VAR 0 1
16165: NOT
16166: IFFALSE 16170
// exit ;
16168: GO 16196
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16170: LD_VAR 0 1
16174: PUSH
16175: LD_INT 1
16177: PPUSH
16178: LD_VAR 0 1
16182: PPUSH
16183: CALL_OW 12
16187: ARRAY
16188: PPUSH
16189: LD_INT 100
16191: PPUSH
16192: CALL_OW 234
// end ;
16196: PPOPN 1
16198: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16199: LD_EXP 44
16203: PUSH
16204: LD_EXP 58
16208: AND
16209: IFFALSE 16307
16211: GO 16213
16213: DISABLE
16214: LD_INT 0
16216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16217: LD_ADDR_VAR 0 1
16221: PUSH
16222: LD_INT 22
16224: PUSH
16225: LD_OWVAR 2
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: LD_INT 21
16236: PUSH
16237: LD_INT 1
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: ST_TO_ADDR
// if not tmp then
16253: LD_VAR 0 1
16257: NOT
16258: IFFALSE 16262
// exit ;
16260: GO 16307
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16262: LD_VAR 0 1
16266: PUSH
16267: LD_INT 1
16269: PPUSH
16270: LD_VAR 0 1
16274: PPUSH
16275: CALL_OW 12
16279: ARRAY
16280: PPUSH
16281: LD_INT 1
16283: PPUSH
16284: LD_INT 4
16286: PPUSH
16287: CALL_OW 12
16291: PPUSH
16292: LD_INT 3000
16294: PPUSH
16295: LD_INT 9000
16297: PPUSH
16298: CALL_OW 12
16302: PPUSH
16303: CALL_OW 492
// end ;
16307: PPOPN 1
16309: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16310: LD_EXP 44
16314: PUSH
16315: LD_EXP 59
16319: AND
16320: IFFALSE 16340
16322: GO 16324
16324: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16325: LD_INT 1
16327: PPUSH
16328: LD_OWVAR 2
16332: PPUSH
16333: LD_INT 0
16335: PPUSH
16336: CALL_OW 324
16340: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16341: LD_EXP 44
16345: PUSH
16346: LD_EXP 60
16350: AND
16351: IFFALSE 16434
16353: GO 16355
16355: DISABLE
16356: LD_INT 0
16358: PPUSH
16359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16360: LD_ADDR_VAR 0 2
16364: PUSH
16365: LD_INT 22
16367: PUSH
16368: LD_OWVAR 2
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 21
16379: PUSH
16380: LD_INT 3
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PPUSH
16391: CALL_OW 69
16395: ST_TO_ADDR
// if not tmp then
16396: LD_VAR 0 2
16400: NOT
16401: IFFALSE 16405
// exit ;
16403: GO 16434
// for i in tmp do
16405: LD_ADDR_VAR 0 1
16409: PUSH
16410: LD_VAR 0 2
16414: PUSH
16415: FOR_IN
16416: IFFALSE 16432
// SetBLevel ( i , 10 ) ;
16418: LD_VAR 0 1
16422: PPUSH
16423: LD_INT 10
16425: PPUSH
16426: CALL_OW 241
16430: GO 16415
16432: POP
16433: POP
// end ;
16434: PPOPN 2
16436: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16437: LD_EXP 44
16441: PUSH
16442: LD_EXP 61
16446: AND
16447: IFFALSE 16558
16449: GO 16451
16451: DISABLE
16452: LD_INT 0
16454: PPUSH
16455: PPUSH
16456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16457: LD_ADDR_VAR 0 3
16461: PUSH
16462: LD_INT 22
16464: PUSH
16465: LD_OWVAR 2
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 25
16476: PUSH
16477: LD_INT 1
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: PPUSH
16488: CALL_OW 69
16492: ST_TO_ADDR
// if not tmp then
16493: LD_VAR 0 3
16497: NOT
16498: IFFALSE 16502
// exit ;
16500: GO 16558
// un := tmp [ rand ( 1 , tmp ) ] ;
16502: LD_ADDR_VAR 0 2
16506: PUSH
16507: LD_VAR 0 3
16511: PUSH
16512: LD_INT 1
16514: PPUSH
16515: LD_VAR 0 3
16519: PPUSH
16520: CALL_OW 12
16524: ARRAY
16525: ST_TO_ADDR
// if Crawls ( un ) then
16526: LD_VAR 0 2
16530: PPUSH
16531: CALL_OW 318
16535: IFFALSE 16546
// ComWalk ( un ) ;
16537: LD_VAR 0 2
16541: PPUSH
16542: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16546: LD_VAR 0 2
16550: PPUSH
16551: LD_INT 5
16553: PPUSH
16554: CALL_OW 336
// end ;
16558: PPOPN 3
16560: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16561: LD_EXP 44
16565: PUSH
16566: LD_EXP 62
16570: AND
16571: PUSH
16572: LD_OWVAR 67
16576: PUSH
16577: LD_INT 4
16579: LESS
16580: AND
16581: IFFALSE 16600
16583: GO 16585
16585: DISABLE
// begin Difficulty := Difficulty + 1 ;
16586: LD_ADDR_OWVAR 67
16590: PUSH
16591: LD_OWVAR 67
16595: PUSH
16596: LD_INT 1
16598: PLUS
16599: ST_TO_ADDR
// end ;
16600: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16601: LD_EXP 44
16605: PUSH
16606: LD_EXP 63
16610: AND
16611: IFFALSE 16714
16613: GO 16615
16615: DISABLE
16616: LD_INT 0
16618: PPUSH
// begin for i := 1 to 5 do
16619: LD_ADDR_VAR 0 1
16623: PUSH
16624: DOUBLE
16625: LD_INT 1
16627: DEC
16628: ST_TO_ADDR
16629: LD_INT 5
16631: PUSH
16632: FOR_TO
16633: IFFALSE 16712
// begin uc_nation := nation_nature ;
16635: LD_ADDR_OWVAR 21
16639: PUSH
16640: LD_INT 0
16642: ST_TO_ADDR
// uc_side := 0 ;
16643: LD_ADDR_OWVAR 20
16647: PUSH
16648: LD_INT 0
16650: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16651: LD_ADDR_OWVAR 29
16655: PUSH
16656: LD_INT 12
16658: PUSH
16659: LD_INT 12
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: ST_TO_ADDR
// hc_agressivity := 20 ;
16666: LD_ADDR_OWVAR 35
16670: PUSH
16671: LD_INT 20
16673: ST_TO_ADDR
// hc_class := class_tiger ;
16674: LD_ADDR_OWVAR 28
16678: PUSH
16679: LD_INT 14
16681: ST_TO_ADDR
// hc_gallery :=  ;
16682: LD_ADDR_OWVAR 33
16686: PUSH
16687: LD_STRING 
16689: ST_TO_ADDR
// hc_name :=  ;
16690: LD_ADDR_OWVAR 26
16694: PUSH
16695: LD_STRING 
16697: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16698: CALL_OW 44
16702: PPUSH
16703: LD_INT 0
16705: PPUSH
16706: CALL_OW 51
// end ;
16710: GO 16632
16712: POP
16713: POP
// end ;
16714: PPOPN 1
16716: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16717: LD_EXP 44
16721: PUSH
16722: LD_EXP 64
16726: AND
16727: IFFALSE 16736
16729: GO 16731
16731: DISABLE
// StreamSibBomb ;
16732: CALL 16737 0 0
16736: END
// export function StreamSibBomb ; var i , x , y ; begin
16737: LD_INT 0
16739: PPUSH
16740: PPUSH
16741: PPUSH
16742: PPUSH
// result := false ;
16743: LD_ADDR_VAR 0 1
16747: PUSH
16748: LD_INT 0
16750: ST_TO_ADDR
// for i := 1 to 16 do
16751: LD_ADDR_VAR 0 2
16755: PUSH
16756: DOUBLE
16757: LD_INT 1
16759: DEC
16760: ST_TO_ADDR
16761: LD_INT 16
16763: PUSH
16764: FOR_TO
16765: IFFALSE 16964
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16767: LD_ADDR_VAR 0 3
16771: PUSH
16772: LD_INT 10
16774: PUSH
16775: LD_INT 20
16777: PUSH
16778: LD_INT 30
16780: PUSH
16781: LD_INT 40
16783: PUSH
16784: LD_INT 50
16786: PUSH
16787: LD_INT 60
16789: PUSH
16790: LD_INT 70
16792: PUSH
16793: LD_INT 80
16795: PUSH
16796: LD_INT 90
16798: PUSH
16799: LD_INT 100
16801: PUSH
16802: LD_INT 110
16804: PUSH
16805: LD_INT 120
16807: PUSH
16808: LD_INT 130
16810: PUSH
16811: LD_INT 140
16813: PUSH
16814: LD_INT 150
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 1
16836: PPUSH
16837: LD_INT 15
16839: PPUSH
16840: CALL_OW 12
16844: ARRAY
16845: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16846: LD_ADDR_VAR 0 4
16850: PUSH
16851: LD_INT 10
16853: PUSH
16854: LD_INT 20
16856: PUSH
16857: LD_INT 30
16859: PUSH
16860: LD_INT 40
16862: PUSH
16863: LD_INT 50
16865: PUSH
16866: LD_INT 60
16868: PUSH
16869: LD_INT 70
16871: PUSH
16872: LD_INT 80
16874: PUSH
16875: LD_INT 90
16877: PUSH
16878: LD_INT 100
16880: PUSH
16881: LD_INT 110
16883: PUSH
16884: LD_INT 120
16886: PUSH
16887: LD_INT 130
16889: PUSH
16890: LD_INT 140
16892: PUSH
16893: LD_INT 150
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 1
16915: PPUSH
16916: LD_INT 15
16918: PPUSH
16919: CALL_OW 12
16923: ARRAY
16924: ST_TO_ADDR
// if ValidHex ( x , y ) then
16925: LD_VAR 0 3
16929: PPUSH
16930: LD_VAR 0 4
16934: PPUSH
16935: CALL_OW 488
16939: IFFALSE 16962
// begin result := [ x , y ] ;
16941: LD_ADDR_VAR 0 1
16945: PUSH
16946: LD_VAR 0 3
16950: PUSH
16951: LD_VAR 0 4
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: ST_TO_ADDR
// break ;
16960: GO 16964
// end ; end ;
16962: GO 16764
16964: POP
16965: POP
// if result then
16966: LD_VAR 0 1
16970: IFFALSE 17030
// begin ToLua ( playSibBomb() ) ;
16972: LD_STRING playSibBomb()
16974: PPUSH
16975: CALL_OW 559
// wait ( 0 0$14 ) ;
16979: LD_INT 490
16981: PPUSH
16982: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16986: LD_VAR 0 1
16990: PUSH
16991: LD_INT 1
16993: ARRAY
16994: PPUSH
16995: LD_VAR 0 1
16999: PUSH
17000: LD_INT 2
17002: ARRAY
17003: PPUSH
17004: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17008: LD_VAR 0 1
17012: PUSH
17013: LD_INT 1
17015: ARRAY
17016: PPUSH
17017: LD_VAR 0 1
17021: PUSH
17022: LD_INT 2
17024: ARRAY
17025: PPUSH
17026: CALL_OW 429
// end ; end ;
17030: LD_VAR 0 1
17034: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17035: LD_EXP 44
17039: PUSH
17040: LD_EXP 66
17044: AND
17045: IFFALSE 17057
17047: GO 17049
17049: DISABLE
// YouLost (  ) ;
17050: LD_STRING 
17052: PPUSH
17053: CALL_OW 104
17057: END
// every 0 0$1 trigger StreamModeActive and sFog do
17058: LD_EXP 44
17062: PUSH
17063: LD_EXP 65
17067: AND
17068: IFFALSE 17082
17070: GO 17072
17072: DISABLE
// FogOff ( your_side ) ;
17073: LD_OWVAR 2
17077: PPUSH
17078: CALL_OW 344
17082: END
// every 0 0$1 trigger StreamModeActive and sSun do
17083: LD_EXP 44
17087: PUSH
17088: LD_EXP 67
17092: AND
17093: IFFALSE 17121
17095: GO 17097
17097: DISABLE
// begin solar_recharge_percent := 0 ;
17098: LD_ADDR_OWVAR 79
17102: PUSH
17103: LD_INT 0
17105: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17106: LD_INT 10500
17108: PPUSH
17109: CALL_OW 67
// solar_recharge_percent := 100 ;
17113: LD_ADDR_OWVAR 79
17117: PUSH
17118: LD_INT 100
17120: ST_TO_ADDR
// end ;
17121: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17122: LD_EXP 44
17126: PUSH
17127: LD_EXP 68
17131: AND
17132: IFFALSE 17371
17134: GO 17136
17136: DISABLE
17137: LD_INT 0
17139: PPUSH
17140: PPUSH
17141: PPUSH
// begin tmp := [ ] ;
17142: LD_ADDR_VAR 0 3
17146: PUSH
17147: EMPTY
17148: ST_TO_ADDR
// for i := 1 to 6 do
17149: LD_ADDR_VAR 0 1
17153: PUSH
17154: DOUBLE
17155: LD_INT 1
17157: DEC
17158: ST_TO_ADDR
17159: LD_INT 6
17161: PUSH
17162: FOR_TO
17163: IFFALSE 17268
// begin uc_nation := nation_nature ;
17165: LD_ADDR_OWVAR 21
17169: PUSH
17170: LD_INT 0
17172: ST_TO_ADDR
// uc_side := 0 ;
17173: LD_ADDR_OWVAR 20
17177: PUSH
17178: LD_INT 0
17180: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17181: LD_ADDR_OWVAR 29
17185: PUSH
17186: LD_INT 12
17188: PUSH
17189: LD_INT 12
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: ST_TO_ADDR
// hc_agressivity := 20 ;
17196: LD_ADDR_OWVAR 35
17200: PUSH
17201: LD_INT 20
17203: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17204: LD_ADDR_OWVAR 28
17208: PUSH
17209: LD_INT 17
17211: ST_TO_ADDR
// hc_gallery :=  ;
17212: LD_ADDR_OWVAR 33
17216: PUSH
17217: LD_STRING 
17219: ST_TO_ADDR
// hc_name :=  ;
17220: LD_ADDR_OWVAR 26
17224: PUSH
17225: LD_STRING 
17227: ST_TO_ADDR
// un := CreateHuman ;
17228: LD_ADDR_VAR 0 2
17232: PUSH
17233: CALL_OW 44
17237: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17238: LD_VAR 0 2
17242: PPUSH
17243: LD_INT 1
17245: PPUSH
17246: CALL_OW 51
// tmp := tmp ^ un ;
17250: LD_ADDR_VAR 0 3
17254: PUSH
17255: LD_VAR 0 3
17259: PUSH
17260: LD_VAR 0 2
17264: ADD
17265: ST_TO_ADDR
// end ;
17266: GO 17162
17268: POP
17269: POP
// repeat wait ( 0 0$1 ) ;
17270: LD_INT 35
17272: PPUSH
17273: CALL_OW 67
// for un in tmp do
17277: LD_ADDR_VAR 0 2
17281: PUSH
17282: LD_VAR 0 3
17286: PUSH
17287: FOR_IN
17288: IFFALSE 17362
// begin if IsDead ( un ) then
17290: LD_VAR 0 2
17294: PPUSH
17295: CALL_OW 301
17299: IFFALSE 17319
// begin tmp := tmp diff un ;
17301: LD_ADDR_VAR 0 3
17305: PUSH
17306: LD_VAR 0 3
17310: PUSH
17311: LD_VAR 0 2
17315: DIFF
17316: ST_TO_ADDR
// continue ;
17317: GO 17287
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17319: LD_VAR 0 2
17323: PPUSH
17324: LD_INT 3
17326: PUSH
17327: LD_INT 22
17329: PUSH
17330: LD_INT 0
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PPUSH
17341: CALL_OW 69
17345: PPUSH
17346: LD_VAR 0 2
17350: PPUSH
17351: CALL_OW 74
17355: PPUSH
17356: CALL_OW 115
// end ;
17360: GO 17287
17362: POP
17363: POP
// until not tmp ;
17364: LD_VAR 0 3
17368: NOT
17369: IFFALSE 17270
// end ;
17371: PPOPN 3
17373: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17374: LD_EXP 44
17378: PUSH
17379: LD_EXP 69
17383: AND
17384: IFFALSE 17438
17386: GO 17388
17388: DISABLE
// begin ToLua ( displayTroll(); ) ;
17389: LD_STRING displayTroll();
17391: PPUSH
17392: CALL_OW 559
// wait ( 3 3$00 ) ;
17396: LD_INT 6300
17398: PPUSH
17399: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17403: LD_STRING hideTroll();
17405: PPUSH
17406: CALL_OW 559
// wait ( 1 1$00 ) ;
17410: LD_INT 2100
17412: PPUSH
17413: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17417: LD_STRING displayTroll();
17419: PPUSH
17420: CALL_OW 559
// wait ( 1 1$00 ) ;
17424: LD_INT 2100
17426: PPUSH
17427: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17431: LD_STRING hideTroll();
17433: PPUSH
17434: CALL_OW 559
// end ;
17438: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17439: LD_EXP 44
17443: PUSH
17444: LD_EXP 70
17448: AND
17449: IFFALSE 17512
17451: GO 17453
17453: DISABLE
17454: LD_INT 0
17456: PPUSH
// begin p := 0 ;
17457: LD_ADDR_VAR 0 1
17461: PUSH
17462: LD_INT 0
17464: ST_TO_ADDR
// repeat game_speed := 1 ;
17465: LD_ADDR_OWVAR 65
17469: PUSH
17470: LD_INT 1
17472: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17473: LD_INT 35
17475: PPUSH
17476: CALL_OW 67
// p := p + 1 ;
17480: LD_ADDR_VAR 0 1
17484: PUSH
17485: LD_VAR 0 1
17489: PUSH
17490: LD_INT 1
17492: PLUS
17493: ST_TO_ADDR
// until p >= 60 ;
17494: LD_VAR 0 1
17498: PUSH
17499: LD_INT 60
17501: GREATEREQUAL
17502: IFFALSE 17465
// game_speed := 4 ;
17504: LD_ADDR_OWVAR 65
17508: PUSH
17509: LD_INT 4
17511: ST_TO_ADDR
// end ;
17512: PPOPN 1
17514: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17515: LD_EXP 44
17519: PUSH
17520: LD_EXP 71
17524: AND
17525: IFFALSE 17671
17527: GO 17529
17529: DISABLE
17530: LD_INT 0
17532: PPUSH
17533: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17534: LD_ADDR_VAR 0 1
17538: PUSH
17539: LD_INT 22
17541: PUSH
17542: LD_OWVAR 2
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 2
17553: PUSH
17554: LD_INT 30
17556: PUSH
17557: LD_INT 0
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 30
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PPUSH
17583: CALL_OW 69
17587: ST_TO_ADDR
// if not depot then
17588: LD_VAR 0 1
17592: NOT
17593: IFFALSE 17597
// exit ;
17595: GO 17671
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17597: LD_ADDR_VAR 0 2
17601: PUSH
17602: LD_VAR 0 1
17606: PUSH
17607: LD_INT 1
17609: PPUSH
17610: LD_VAR 0 1
17614: PPUSH
17615: CALL_OW 12
17619: ARRAY
17620: PPUSH
17621: CALL_OW 274
17625: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17626: LD_VAR 0 2
17630: PPUSH
17631: LD_INT 1
17633: PPUSH
17634: LD_INT 0
17636: PPUSH
17637: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17641: LD_VAR 0 2
17645: PPUSH
17646: LD_INT 2
17648: PPUSH
17649: LD_INT 0
17651: PPUSH
17652: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17656: LD_VAR 0 2
17660: PPUSH
17661: LD_INT 3
17663: PPUSH
17664: LD_INT 0
17666: PPUSH
17667: CALL_OW 277
// end ;
17671: PPOPN 2
17673: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17674: LD_EXP 44
17678: PUSH
17679: LD_EXP 72
17683: AND
17684: IFFALSE 17781
17686: GO 17688
17688: DISABLE
17689: LD_INT 0
17691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17692: LD_ADDR_VAR 0 1
17696: PUSH
17697: LD_INT 22
17699: PUSH
17700: LD_OWVAR 2
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 21
17711: PUSH
17712: LD_INT 1
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 3
17721: PUSH
17722: LD_INT 23
17724: PUSH
17725: LD_INT 0
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: LIST
17740: PPUSH
17741: CALL_OW 69
17745: ST_TO_ADDR
// if not tmp then
17746: LD_VAR 0 1
17750: NOT
17751: IFFALSE 17755
// exit ;
17753: GO 17781
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17755: LD_VAR 0 1
17759: PUSH
17760: LD_INT 1
17762: PPUSH
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 12
17772: ARRAY
17773: PPUSH
17774: LD_INT 200
17776: PPUSH
17777: CALL_OW 234
// end ;
17781: PPOPN 1
17783: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17784: LD_EXP 44
17788: PUSH
17789: LD_EXP 73
17793: AND
17794: IFFALSE 17873
17796: GO 17798
17798: DISABLE
17799: LD_INT 0
17801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17802: LD_ADDR_VAR 0 1
17806: PUSH
17807: LD_INT 22
17809: PUSH
17810: LD_OWVAR 2
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 21
17821: PUSH
17822: LD_INT 2
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PPUSH
17833: CALL_OW 69
17837: ST_TO_ADDR
// if not tmp then
17838: LD_VAR 0 1
17842: NOT
17843: IFFALSE 17847
// exit ;
17845: GO 17873
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17847: LD_VAR 0 1
17851: PUSH
17852: LD_INT 1
17854: PPUSH
17855: LD_VAR 0 1
17859: PPUSH
17860: CALL_OW 12
17864: ARRAY
17865: PPUSH
17866: LD_INT 60
17868: PPUSH
17869: CALL_OW 234
// end ;
17873: PPOPN 1
17875: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17876: LD_EXP 44
17880: PUSH
17881: LD_EXP 74
17885: AND
17886: IFFALSE 17985
17888: GO 17890
17890: DISABLE
17891: LD_INT 0
17893: PPUSH
17894: PPUSH
// begin enable ;
17895: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17896: LD_ADDR_VAR 0 1
17900: PUSH
17901: LD_INT 22
17903: PUSH
17904: LD_OWVAR 2
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: LD_INT 61
17915: PUSH
17916: EMPTY
17917: LIST
17918: PUSH
17919: LD_INT 33
17921: PUSH
17922: LD_INT 2
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: LIST
17933: PPUSH
17934: CALL_OW 69
17938: ST_TO_ADDR
// if not tmp then
17939: LD_VAR 0 1
17943: NOT
17944: IFFALSE 17948
// exit ;
17946: GO 17985
// for i in tmp do
17948: LD_ADDR_VAR 0 2
17952: PUSH
17953: LD_VAR 0 1
17957: PUSH
17958: FOR_IN
17959: IFFALSE 17983
// if IsControledBy ( i ) then
17961: LD_VAR 0 2
17965: PPUSH
17966: CALL_OW 312
17970: IFFALSE 17981
// ComUnlink ( i ) ;
17972: LD_VAR 0 2
17976: PPUSH
17977: CALL_OW 136
17981: GO 17958
17983: POP
17984: POP
// end ;
17985: PPOPN 2
17987: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17988: LD_EXP 44
17992: PUSH
17993: LD_EXP 75
17997: AND
17998: IFFALSE 18138
18000: GO 18002
18002: DISABLE
18003: LD_INT 0
18005: PPUSH
18006: PPUSH
// begin ToLua ( displayPowell(); ) ;
18007: LD_STRING displayPowell();
18009: PPUSH
18010: CALL_OW 559
// uc_side := 0 ;
18014: LD_ADDR_OWVAR 20
18018: PUSH
18019: LD_INT 0
18021: ST_TO_ADDR
// uc_nation := 2 ;
18022: LD_ADDR_OWVAR 21
18026: PUSH
18027: LD_INT 2
18029: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18030: LD_ADDR_OWVAR 37
18034: PUSH
18035: LD_INT 14
18037: ST_TO_ADDR
// vc_engine := engine_siberite ;
18038: LD_ADDR_OWVAR 39
18042: PUSH
18043: LD_INT 3
18045: ST_TO_ADDR
// vc_control := control_apeman ;
18046: LD_ADDR_OWVAR 38
18050: PUSH
18051: LD_INT 5
18053: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18054: LD_ADDR_OWVAR 40
18058: PUSH
18059: LD_INT 29
18061: ST_TO_ADDR
// un := CreateVehicle ;
18062: LD_ADDR_VAR 0 2
18066: PUSH
18067: CALL_OW 45
18071: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18072: LD_VAR 0 2
18076: PPUSH
18077: LD_INT 1
18079: PPUSH
18080: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18084: LD_INT 35
18086: PPUSH
18087: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18091: LD_VAR 0 2
18095: PPUSH
18096: LD_INT 22
18098: PUSH
18099: LD_OWVAR 2
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PPUSH
18108: CALL_OW 69
18112: PPUSH
18113: LD_VAR 0 2
18117: PPUSH
18118: CALL_OW 74
18122: PPUSH
18123: CALL_OW 115
// until IsDead ( un ) ;
18127: LD_VAR 0 2
18131: PPUSH
18132: CALL_OW 301
18136: IFFALSE 18084
// end ;
18138: PPOPN 2
18140: END
// every 0 0$1 trigger StreamModeActive and sStu do
18141: LD_EXP 44
18145: PUSH
18146: LD_EXP 83
18150: AND
18151: IFFALSE 18167
18153: GO 18155
18155: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18156: LD_STRING displayStucuk();
18158: PPUSH
18159: CALL_OW 559
// ResetFog ;
18163: CALL_OW 335
// end ;
18167: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18168: LD_EXP 44
18172: PUSH
18173: LD_EXP 76
18177: AND
18178: IFFALSE 18319
18180: GO 18182
18182: DISABLE
18183: LD_INT 0
18185: PPUSH
18186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18187: LD_ADDR_VAR 0 2
18191: PUSH
18192: LD_INT 22
18194: PUSH
18195: LD_OWVAR 2
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 21
18206: PUSH
18207: LD_INT 1
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PPUSH
18218: CALL_OW 69
18222: ST_TO_ADDR
// if not tmp then
18223: LD_VAR 0 2
18227: NOT
18228: IFFALSE 18232
// exit ;
18230: GO 18319
// un := tmp [ rand ( 1 , tmp ) ] ;
18232: LD_ADDR_VAR 0 1
18236: PUSH
18237: LD_VAR 0 2
18241: PUSH
18242: LD_INT 1
18244: PPUSH
18245: LD_VAR 0 2
18249: PPUSH
18250: CALL_OW 12
18254: ARRAY
18255: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18256: LD_VAR 0 1
18260: PPUSH
18261: LD_INT 0
18263: PPUSH
18264: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18268: LD_VAR 0 1
18272: PPUSH
18273: LD_OWVAR 3
18277: PUSH
18278: LD_VAR 0 1
18282: DIFF
18283: PPUSH
18284: LD_VAR 0 1
18288: PPUSH
18289: CALL_OW 74
18293: PPUSH
18294: CALL_OW 115
// wait ( 0 0$20 ) ;
18298: LD_INT 700
18300: PPUSH
18301: CALL_OW 67
// SetSide ( un , your_side ) ;
18305: LD_VAR 0 1
18309: PPUSH
18310: LD_OWVAR 2
18314: PPUSH
18315: CALL_OW 235
// end ;
18319: PPOPN 2
18321: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18322: LD_EXP 44
18326: PUSH
18327: LD_EXP 77
18331: AND
18332: IFFALSE 18438
18334: GO 18336
18336: DISABLE
18337: LD_INT 0
18339: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18340: LD_ADDR_VAR 0 1
18344: PUSH
18345: LD_INT 22
18347: PUSH
18348: LD_OWVAR 2
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 2
18359: PUSH
18360: LD_INT 30
18362: PUSH
18363: LD_INT 0
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 30
18372: PUSH
18373: LD_INT 1
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: LIST
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PPUSH
18389: CALL_OW 69
18393: ST_TO_ADDR
// if not depot then
18394: LD_VAR 0 1
18398: NOT
18399: IFFALSE 18403
// exit ;
18401: GO 18438
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18403: LD_VAR 0 1
18407: PUSH
18408: LD_INT 1
18410: ARRAY
18411: PPUSH
18412: CALL_OW 250
18416: PPUSH
18417: LD_VAR 0 1
18421: PUSH
18422: LD_INT 1
18424: ARRAY
18425: PPUSH
18426: CALL_OW 251
18430: PPUSH
18431: LD_INT 70
18433: PPUSH
18434: CALL_OW 495
// end ;
18438: PPOPN 1
18440: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18441: LD_EXP 44
18445: PUSH
18446: LD_EXP 78
18450: AND
18451: IFFALSE 18662
18453: GO 18455
18455: DISABLE
18456: LD_INT 0
18458: PPUSH
18459: PPUSH
18460: PPUSH
18461: PPUSH
18462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18463: LD_ADDR_VAR 0 5
18467: PUSH
18468: LD_INT 22
18470: PUSH
18471: LD_OWVAR 2
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 21
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PPUSH
18494: CALL_OW 69
18498: ST_TO_ADDR
// if not tmp then
18499: LD_VAR 0 5
18503: NOT
18504: IFFALSE 18508
// exit ;
18506: GO 18662
// for i in tmp do
18508: LD_ADDR_VAR 0 1
18512: PUSH
18513: LD_VAR 0 5
18517: PUSH
18518: FOR_IN
18519: IFFALSE 18660
// begin d := rand ( 0 , 5 ) ;
18521: LD_ADDR_VAR 0 4
18525: PUSH
18526: LD_INT 0
18528: PPUSH
18529: LD_INT 5
18531: PPUSH
18532: CALL_OW 12
18536: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18537: LD_ADDR_VAR 0 2
18541: PUSH
18542: LD_VAR 0 1
18546: PPUSH
18547: CALL_OW 250
18551: PPUSH
18552: LD_VAR 0 4
18556: PPUSH
18557: LD_INT 3
18559: PPUSH
18560: LD_INT 12
18562: PPUSH
18563: CALL_OW 12
18567: PPUSH
18568: CALL_OW 272
18572: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18573: LD_ADDR_VAR 0 3
18577: PUSH
18578: LD_VAR 0 1
18582: PPUSH
18583: CALL_OW 251
18587: PPUSH
18588: LD_VAR 0 4
18592: PPUSH
18593: LD_INT 3
18595: PPUSH
18596: LD_INT 12
18598: PPUSH
18599: CALL_OW 12
18603: PPUSH
18604: CALL_OW 273
18608: ST_TO_ADDR
// if ValidHex ( x , y ) then
18609: LD_VAR 0 2
18613: PPUSH
18614: LD_VAR 0 3
18618: PPUSH
18619: CALL_OW 488
18623: IFFALSE 18658
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18625: LD_VAR 0 1
18629: PPUSH
18630: LD_VAR 0 2
18634: PPUSH
18635: LD_VAR 0 3
18639: PPUSH
18640: LD_INT 3
18642: PPUSH
18643: LD_INT 6
18645: PPUSH
18646: CALL_OW 12
18650: PPUSH
18651: LD_INT 1
18653: PPUSH
18654: CALL_OW 483
// end ;
18658: GO 18518
18660: POP
18661: POP
// end ;
18662: PPOPN 5
18664: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18665: LD_EXP 44
18669: PUSH
18670: LD_EXP 79
18674: AND
18675: IFFALSE 18769
18677: GO 18679
18679: DISABLE
18680: LD_INT 0
18682: PPUSH
18683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18684: LD_ADDR_VAR 0 2
18688: PUSH
18689: LD_INT 22
18691: PUSH
18692: LD_OWVAR 2
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 32
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 21
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: LIST
18725: PPUSH
18726: CALL_OW 69
18730: ST_TO_ADDR
// if not tmp then
18731: LD_VAR 0 2
18735: NOT
18736: IFFALSE 18740
// exit ;
18738: GO 18769
// for i in tmp do
18740: LD_ADDR_VAR 0 1
18744: PUSH
18745: LD_VAR 0 2
18749: PUSH
18750: FOR_IN
18751: IFFALSE 18767
// SetFuel ( i , 0 ) ;
18753: LD_VAR 0 1
18757: PPUSH
18758: LD_INT 0
18760: PPUSH
18761: CALL_OW 240
18765: GO 18750
18767: POP
18768: POP
// end ;
18769: PPOPN 2
18771: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18772: LD_EXP 44
18776: PUSH
18777: LD_EXP 80
18781: AND
18782: IFFALSE 18848
18784: GO 18786
18786: DISABLE
18787: LD_INT 0
18789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18790: LD_ADDR_VAR 0 1
18794: PUSH
18795: LD_INT 22
18797: PUSH
18798: LD_OWVAR 2
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 30
18809: PUSH
18810: LD_INT 29
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PPUSH
18821: CALL_OW 69
18825: ST_TO_ADDR
// if not tmp then
18826: LD_VAR 0 1
18830: NOT
18831: IFFALSE 18835
// exit ;
18833: GO 18848
// DestroyUnit ( tmp [ 1 ] ) ;
18835: LD_VAR 0 1
18839: PUSH
18840: LD_INT 1
18842: ARRAY
18843: PPUSH
18844: CALL_OW 65
// end ;
18848: PPOPN 1
18850: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18851: LD_EXP 44
18855: PUSH
18856: LD_EXP 82
18860: AND
18861: IFFALSE 18990
18863: GO 18865
18865: DISABLE
18866: LD_INT 0
18868: PPUSH
// begin uc_side := 0 ;
18869: LD_ADDR_OWVAR 20
18873: PUSH
18874: LD_INT 0
18876: ST_TO_ADDR
// uc_nation := nation_arabian ;
18877: LD_ADDR_OWVAR 21
18881: PUSH
18882: LD_INT 2
18884: ST_TO_ADDR
// hc_gallery :=  ;
18885: LD_ADDR_OWVAR 33
18889: PUSH
18890: LD_STRING 
18892: ST_TO_ADDR
// hc_name :=  ;
18893: LD_ADDR_OWVAR 26
18897: PUSH
18898: LD_STRING 
18900: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18901: LD_INT 1
18903: PPUSH
18904: LD_INT 11
18906: PPUSH
18907: LD_INT 10
18909: PPUSH
18910: CALL_OW 380
// un := CreateHuman ;
18914: LD_ADDR_VAR 0 1
18918: PUSH
18919: CALL_OW 44
18923: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18924: LD_VAR 0 1
18928: PPUSH
18929: LD_INT 1
18931: PPUSH
18932: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18936: LD_INT 35
18938: PPUSH
18939: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18943: LD_VAR 0 1
18947: PPUSH
18948: LD_INT 22
18950: PUSH
18951: LD_OWVAR 2
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PPUSH
18960: CALL_OW 69
18964: PPUSH
18965: LD_VAR 0 1
18969: PPUSH
18970: CALL_OW 74
18974: PPUSH
18975: CALL_OW 115
// until IsDead ( un ) ;
18979: LD_VAR 0 1
18983: PPUSH
18984: CALL_OW 301
18988: IFFALSE 18936
// end ;
18990: PPOPN 1
18992: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18993: LD_EXP 44
18997: PUSH
18998: LD_EXP 84
19002: AND
19003: IFFALSE 19015
19005: GO 19007
19007: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19008: LD_STRING earthquake(getX(game), 0, 32)
19010: PPUSH
19011: CALL_OW 559
19015: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19016: LD_EXP 44
19020: PUSH
19021: LD_EXP 85
19025: AND
19026: IFFALSE 19117
19028: GO 19030
19030: DISABLE
19031: LD_INT 0
19033: PPUSH
// begin enable ;
19034: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19035: LD_ADDR_VAR 0 1
19039: PUSH
19040: LD_INT 22
19042: PUSH
19043: LD_OWVAR 2
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 21
19054: PUSH
19055: LD_INT 2
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 33
19064: PUSH
19065: LD_INT 3
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: LIST
19076: PPUSH
19077: CALL_OW 69
19081: ST_TO_ADDR
// if not tmp then
19082: LD_VAR 0 1
19086: NOT
19087: IFFALSE 19091
// exit ;
19089: GO 19117
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19091: LD_VAR 0 1
19095: PUSH
19096: LD_INT 1
19098: PPUSH
19099: LD_VAR 0 1
19103: PPUSH
19104: CALL_OW 12
19108: ARRAY
19109: PPUSH
19110: LD_INT 1
19112: PPUSH
19113: CALL_OW 234
// end ;
19117: PPOPN 1
19119: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19120: LD_EXP 44
19124: PUSH
19125: LD_EXP 86
19129: AND
19130: IFFALSE 19271
19132: GO 19134
19134: DISABLE
19135: LD_INT 0
19137: PPUSH
19138: PPUSH
19139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19140: LD_ADDR_VAR 0 3
19144: PUSH
19145: LD_INT 22
19147: PUSH
19148: LD_OWVAR 2
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 25
19159: PUSH
19160: LD_INT 1
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PPUSH
19171: CALL_OW 69
19175: ST_TO_ADDR
// if not tmp then
19176: LD_VAR 0 3
19180: NOT
19181: IFFALSE 19185
// exit ;
19183: GO 19271
// un := tmp [ rand ( 1 , tmp ) ] ;
19185: LD_ADDR_VAR 0 2
19189: PUSH
19190: LD_VAR 0 3
19194: PUSH
19195: LD_INT 1
19197: PPUSH
19198: LD_VAR 0 3
19202: PPUSH
19203: CALL_OW 12
19207: ARRAY
19208: ST_TO_ADDR
// if Crawls ( un ) then
19209: LD_VAR 0 2
19213: PPUSH
19214: CALL_OW 318
19218: IFFALSE 19229
// ComWalk ( un ) ;
19220: LD_VAR 0 2
19224: PPUSH
19225: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19229: LD_VAR 0 2
19233: PPUSH
19234: LD_INT 9
19236: PPUSH
19237: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19241: LD_INT 28
19243: PPUSH
19244: LD_OWVAR 2
19248: PPUSH
19249: LD_INT 2
19251: PPUSH
19252: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19256: LD_INT 29
19258: PPUSH
19259: LD_OWVAR 2
19263: PPUSH
19264: LD_INT 2
19266: PPUSH
19267: CALL_OW 322
// end ;
19271: PPOPN 3
19273: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19274: LD_EXP 44
19278: PUSH
19279: LD_EXP 87
19283: AND
19284: IFFALSE 19395
19286: GO 19288
19288: DISABLE
19289: LD_INT 0
19291: PPUSH
19292: PPUSH
19293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19294: LD_ADDR_VAR 0 3
19298: PUSH
19299: LD_INT 22
19301: PUSH
19302: LD_OWVAR 2
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 25
19313: PUSH
19314: LD_INT 1
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PPUSH
19325: CALL_OW 69
19329: ST_TO_ADDR
// if not tmp then
19330: LD_VAR 0 3
19334: NOT
19335: IFFALSE 19339
// exit ;
19337: GO 19395
// un := tmp [ rand ( 1 , tmp ) ] ;
19339: LD_ADDR_VAR 0 2
19343: PUSH
19344: LD_VAR 0 3
19348: PUSH
19349: LD_INT 1
19351: PPUSH
19352: LD_VAR 0 3
19356: PPUSH
19357: CALL_OW 12
19361: ARRAY
19362: ST_TO_ADDR
// if Crawls ( un ) then
19363: LD_VAR 0 2
19367: PPUSH
19368: CALL_OW 318
19372: IFFALSE 19383
// ComWalk ( un ) ;
19374: LD_VAR 0 2
19378: PPUSH
19379: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19383: LD_VAR 0 2
19387: PPUSH
19388: LD_INT 8
19390: PPUSH
19391: CALL_OW 336
// end ;
19395: PPOPN 3
19397: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19398: LD_EXP 44
19402: PUSH
19403: LD_EXP 88
19407: AND
19408: IFFALSE 19552
19410: GO 19412
19412: DISABLE
19413: LD_INT 0
19415: PPUSH
19416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19417: LD_ADDR_VAR 0 2
19421: PUSH
19422: LD_INT 22
19424: PUSH
19425: LD_OWVAR 2
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 21
19436: PUSH
19437: LD_INT 2
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: LD_INT 34
19449: PUSH
19450: LD_INT 12
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 34
19459: PUSH
19460: LD_INT 51
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 34
19469: PUSH
19470: LD_INT 32
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: LIST
19487: PPUSH
19488: CALL_OW 69
19492: ST_TO_ADDR
// if not tmp then
19493: LD_VAR 0 2
19497: NOT
19498: IFFALSE 19502
// exit ;
19500: GO 19552
// for i in tmp do
19502: LD_ADDR_VAR 0 1
19506: PUSH
19507: LD_VAR 0 2
19511: PUSH
19512: FOR_IN
19513: IFFALSE 19550
// if GetCargo ( i , mat_artifact ) = 0 then
19515: LD_VAR 0 1
19519: PPUSH
19520: LD_INT 4
19522: PPUSH
19523: CALL_OW 289
19527: PUSH
19528: LD_INT 0
19530: EQUAL
19531: IFFALSE 19548
// SetCargo ( i , mat_siberit , 100 ) ;
19533: LD_VAR 0 1
19537: PPUSH
19538: LD_INT 3
19540: PPUSH
19541: LD_INT 100
19543: PPUSH
19544: CALL_OW 290
19548: GO 19512
19550: POP
19551: POP
// end ;
19552: PPOPN 2
19554: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19555: LD_EXP 44
19559: PUSH
19560: LD_EXP 89
19564: AND
19565: IFFALSE 19748
19567: GO 19569
19569: DISABLE
19570: LD_INT 0
19572: PPUSH
19573: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19574: LD_ADDR_VAR 0 2
19578: PUSH
19579: LD_INT 22
19581: PUSH
19582: LD_OWVAR 2
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PPUSH
19591: CALL_OW 69
19595: ST_TO_ADDR
// if not tmp then
19596: LD_VAR 0 2
19600: NOT
19601: IFFALSE 19605
// exit ;
19603: GO 19748
// for i := 1 to 2 do
19605: LD_ADDR_VAR 0 1
19609: PUSH
19610: DOUBLE
19611: LD_INT 1
19613: DEC
19614: ST_TO_ADDR
19615: LD_INT 2
19617: PUSH
19618: FOR_TO
19619: IFFALSE 19746
// begin uc_side := your_side ;
19621: LD_ADDR_OWVAR 20
19625: PUSH
19626: LD_OWVAR 2
19630: ST_TO_ADDR
// uc_nation := nation_american ;
19631: LD_ADDR_OWVAR 21
19635: PUSH
19636: LD_INT 1
19638: ST_TO_ADDR
// vc_chassis := us_morphling ;
19639: LD_ADDR_OWVAR 37
19643: PUSH
19644: LD_INT 5
19646: ST_TO_ADDR
// vc_engine := engine_siberite ;
19647: LD_ADDR_OWVAR 39
19651: PUSH
19652: LD_INT 3
19654: ST_TO_ADDR
// vc_control := control_computer ;
19655: LD_ADDR_OWVAR 38
19659: PUSH
19660: LD_INT 3
19662: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19663: LD_ADDR_OWVAR 40
19667: PUSH
19668: LD_INT 10
19670: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19671: LD_VAR 0 2
19675: PUSH
19676: LD_INT 1
19678: ARRAY
19679: PPUSH
19680: CALL_OW 310
19684: NOT
19685: IFFALSE 19732
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19687: CALL_OW 45
19691: PPUSH
19692: LD_VAR 0 2
19696: PUSH
19697: LD_INT 1
19699: ARRAY
19700: PPUSH
19701: CALL_OW 250
19705: PPUSH
19706: LD_VAR 0 2
19710: PUSH
19711: LD_INT 1
19713: ARRAY
19714: PPUSH
19715: CALL_OW 251
19719: PPUSH
19720: LD_INT 12
19722: PPUSH
19723: LD_INT 1
19725: PPUSH
19726: CALL_OW 50
19730: GO 19744
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19732: CALL_OW 45
19736: PPUSH
19737: LD_INT 1
19739: PPUSH
19740: CALL_OW 51
// end ;
19744: GO 19618
19746: POP
19747: POP
// end ;
19748: PPOPN 2
19750: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19751: LD_EXP 44
19755: PUSH
19756: LD_EXP 90
19760: AND
19761: IFFALSE 19983
19763: GO 19765
19765: DISABLE
19766: LD_INT 0
19768: PPUSH
19769: PPUSH
19770: PPUSH
19771: PPUSH
19772: PPUSH
19773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19774: LD_ADDR_VAR 0 6
19778: PUSH
19779: LD_INT 22
19781: PUSH
19782: LD_OWVAR 2
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 21
19793: PUSH
19794: LD_INT 1
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 3
19803: PUSH
19804: LD_INT 23
19806: PUSH
19807: LD_INT 0
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: LIST
19822: PPUSH
19823: CALL_OW 69
19827: ST_TO_ADDR
// if not tmp then
19828: LD_VAR 0 6
19832: NOT
19833: IFFALSE 19837
// exit ;
19835: GO 19983
// s1 := rand ( 1 , 4 ) ;
19837: LD_ADDR_VAR 0 2
19841: PUSH
19842: LD_INT 1
19844: PPUSH
19845: LD_INT 4
19847: PPUSH
19848: CALL_OW 12
19852: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19853: LD_ADDR_VAR 0 4
19857: PUSH
19858: LD_VAR 0 6
19862: PUSH
19863: LD_INT 1
19865: ARRAY
19866: PPUSH
19867: LD_VAR 0 2
19871: PPUSH
19872: CALL_OW 259
19876: ST_TO_ADDR
// if s1 = 1 then
19877: LD_VAR 0 2
19881: PUSH
19882: LD_INT 1
19884: EQUAL
19885: IFFALSE 19905
// s2 := rand ( 2 , 4 ) else
19887: LD_ADDR_VAR 0 3
19891: PUSH
19892: LD_INT 2
19894: PPUSH
19895: LD_INT 4
19897: PPUSH
19898: CALL_OW 12
19902: ST_TO_ADDR
19903: GO 19913
// s2 := 1 ;
19905: LD_ADDR_VAR 0 3
19909: PUSH
19910: LD_INT 1
19912: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19913: LD_ADDR_VAR 0 5
19917: PUSH
19918: LD_VAR 0 6
19922: PUSH
19923: LD_INT 1
19925: ARRAY
19926: PPUSH
19927: LD_VAR 0 3
19931: PPUSH
19932: CALL_OW 259
19936: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19937: LD_VAR 0 6
19941: PUSH
19942: LD_INT 1
19944: ARRAY
19945: PPUSH
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_VAR 0 5
19955: PPUSH
19956: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19960: LD_VAR 0 6
19964: PUSH
19965: LD_INT 1
19967: ARRAY
19968: PPUSH
19969: LD_VAR 0 3
19973: PPUSH
19974: LD_VAR 0 4
19978: PPUSH
19979: CALL_OW 237
// end ;
19983: PPOPN 6
19985: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19986: LD_EXP 44
19990: PUSH
19991: LD_EXP 91
19995: AND
19996: IFFALSE 20075
19998: GO 20000
20000: DISABLE
20001: LD_INT 0
20003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20004: LD_ADDR_VAR 0 1
20008: PUSH
20009: LD_INT 22
20011: PUSH
20012: LD_OWVAR 2
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 30
20023: PUSH
20024: LD_INT 3
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PPUSH
20035: CALL_OW 69
20039: ST_TO_ADDR
// if not tmp then
20040: LD_VAR 0 1
20044: NOT
20045: IFFALSE 20049
// exit ;
20047: GO 20075
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20049: LD_VAR 0 1
20053: PUSH
20054: LD_INT 1
20056: PPUSH
20057: LD_VAR 0 1
20061: PPUSH
20062: CALL_OW 12
20066: ARRAY
20067: PPUSH
20068: LD_INT 1
20070: PPUSH
20071: CALL_OW 234
// end ;
20075: PPOPN 1
20077: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20078: LD_EXP 44
20082: PUSH
20083: LD_EXP 92
20087: AND
20088: IFFALSE 20200
20090: GO 20092
20092: DISABLE
20093: LD_INT 0
20095: PPUSH
20096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20097: LD_ADDR_VAR 0 2
20101: PUSH
20102: LD_INT 22
20104: PUSH
20105: LD_OWVAR 2
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 2
20116: PUSH
20117: LD_INT 30
20119: PUSH
20120: LD_INT 27
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 30
20129: PUSH
20130: LD_INT 26
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 30
20139: PUSH
20140: LD_INT 28
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PPUSH
20157: CALL_OW 69
20161: ST_TO_ADDR
// if not tmp then
20162: LD_VAR 0 2
20166: NOT
20167: IFFALSE 20171
// exit ;
20169: GO 20200
// for i in tmp do
20171: LD_ADDR_VAR 0 1
20175: PUSH
20176: LD_VAR 0 2
20180: PUSH
20181: FOR_IN
20182: IFFALSE 20198
// SetLives ( i , 1 ) ;
20184: LD_VAR 0 1
20188: PPUSH
20189: LD_INT 1
20191: PPUSH
20192: CALL_OW 234
20196: GO 20181
20198: POP
20199: POP
// end ;
20200: PPOPN 2
20202: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20203: LD_EXP 44
20207: PUSH
20208: LD_EXP 93
20212: AND
20213: IFFALSE 20500
20215: GO 20217
20217: DISABLE
20218: LD_INT 0
20220: PPUSH
20221: PPUSH
20222: PPUSH
// begin i := rand ( 1 , 7 ) ;
20223: LD_ADDR_VAR 0 1
20227: PUSH
20228: LD_INT 1
20230: PPUSH
20231: LD_INT 7
20233: PPUSH
20234: CALL_OW 12
20238: ST_TO_ADDR
// case i of 1 :
20239: LD_VAR 0 1
20243: PUSH
20244: LD_INT 1
20246: DOUBLE
20247: EQUAL
20248: IFTRUE 20252
20250: GO 20262
20252: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20253: LD_STRING earthquake(getX(game), 0, 32)
20255: PPUSH
20256: CALL_OW 559
20260: GO 20500
20262: LD_INT 2
20264: DOUBLE
20265: EQUAL
20266: IFTRUE 20270
20268: GO 20284
20270: POP
// begin ToLua ( displayStucuk(); ) ;
20271: LD_STRING displayStucuk();
20273: PPUSH
20274: CALL_OW 559
// ResetFog ;
20278: CALL_OW 335
// end ; 3 :
20282: GO 20500
20284: LD_INT 3
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20396
20292: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20293: LD_ADDR_VAR 0 2
20297: PUSH
20298: LD_INT 22
20300: PUSH
20301: LD_OWVAR 2
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 25
20312: PUSH
20313: LD_INT 1
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PPUSH
20324: CALL_OW 69
20328: ST_TO_ADDR
// if not tmp then
20329: LD_VAR 0 2
20333: NOT
20334: IFFALSE 20338
// exit ;
20336: GO 20500
// un := tmp [ rand ( 1 , tmp ) ] ;
20338: LD_ADDR_VAR 0 3
20342: PUSH
20343: LD_VAR 0 2
20347: PUSH
20348: LD_INT 1
20350: PPUSH
20351: LD_VAR 0 2
20355: PPUSH
20356: CALL_OW 12
20360: ARRAY
20361: ST_TO_ADDR
// if Crawls ( un ) then
20362: LD_VAR 0 3
20366: PPUSH
20367: CALL_OW 318
20371: IFFALSE 20382
// ComWalk ( un ) ;
20373: LD_VAR 0 3
20377: PPUSH
20378: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20382: LD_VAR 0 3
20386: PPUSH
20387: LD_INT 8
20389: PPUSH
20390: CALL_OW 336
// end ; 4 :
20394: GO 20500
20396: LD_INT 4
20398: DOUBLE
20399: EQUAL
20400: IFTRUE 20404
20402: GO 20478
20404: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20405: LD_ADDR_VAR 0 2
20409: PUSH
20410: LD_INT 22
20412: PUSH
20413: LD_OWVAR 2
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 30
20424: PUSH
20425: LD_INT 29
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PPUSH
20436: CALL_OW 69
20440: ST_TO_ADDR
// if not tmp then
20441: LD_VAR 0 2
20445: NOT
20446: IFFALSE 20450
// exit ;
20448: GO 20500
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20450: LD_VAR 0 2
20454: PUSH
20455: LD_INT 1
20457: ARRAY
20458: PPUSH
20459: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20463: LD_VAR 0 2
20467: PUSH
20468: LD_INT 1
20470: ARRAY
20471: PPUSH
20472: CALL_OW 65
// end ; 5 .. 7 :
20476: GO 20500
20478: LD_INT 5
20480: DOUBLE
20481: GREATEREQUAL
20482: IFFALSE 20490
20484: LD_INT 7
20486: DOUBLE
20487: LESSEQUAL
20488: IFTRUE 20492
20490: GO 20499
20492: POP
// StreamSibBomb ; end ;
20493: CALL 16737 0 0
20497: GO 20500
20499: POP
// end ;
20500: PPOPN 3
20502: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20503: LD_EXP 44
20507: PUSH
20508: LD_EXP 94
20512: AND
20513: IFFALSE 20669
20515: GO 20517
20517: DISABLE
20518: LD_INT 0
20520: PPUSH
20521: PPUSH
20522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20523: LD_ADDR_VAR 0 2
20527: PUSH
20528: LD_INT 81
20530: PUSH
20531: LD_OWVAR 2
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: LD_INT 21
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 21
20555: PUSH
20556: LD_INT 2
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: LIST
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PPUSH
20572: CALL_OW 69
20576: ST_TO_ADDR
// if not tmp then
20577: LD_VAR 0 2
20581: NOT
20582: IFFALSE 20586
// exit ;
20584: GO 20669
// p := 0 ;
20586: LD_ADDR_VAR 0 3
20590: PUSH
20591: LD_INT 0
20593: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20594: LD_INT 35
20596: PPUSH
20597: CALL_OW 67
// p := p + 1 ;
20601: LD_ADDR_VAR 0 3
20605: PUSH
20606: LD_VAR 0 3
20610: PUSH
20611: LD_INT 1
20613: PLUS
20614: ST_TO_ADDR
// for i in tmp do
20615: LD_ADDR_VAR 0 1
20619: PUSH
20620: LD_VAR 0 2
20624: PUSH
20625: FOR_IN
20626: IFFALSE 20657
// if GetLives ( i ) < 1000 then
20628: LD_VAR 0 1
20632: PPUSH
20633: CALL_OW 256
20637: PUSH
20638: LD_INT 1000
20640: LESS
20641: IFFALSE 20655
// SetLives ( i , 1000 ) ;
20643: LD_VAR 0 1
20647: PPUSH
20648: LD_INT 1000
20650: PPUSH
20651: CALL_OW 234
20655: GO 20625
20657: POP
20658: POP
// until p > 20 ;
20659: LD_VAR 0 3
20663: PUSH
20664: LD_INT 20
20666: GREATER
20667: IFFALSE 20594
// end ;
20669: PPOPN 3
20671: END
// every 0 0$1 trigger StreamModeActive and sTime do
20672: LD_EXP 44
20676: PUSH
20677: LD_EXP 95
20681: AND
20682: IFFALSE 20717
20684: GO 20686
20686: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20687: LD_INT 28
20689: PPUSH
20690: LD_OWVAR 2
20694: PPUSH
20695: LD_INT 2
20697: PPUSH
20698: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20702: LD_INT 30
20704: PPUSH
20705: LD_OWVAR 2
20709: PPUSH
20710: LD_INT 2
20712: PPUSH
20713: CALL_OW 322
// end ;
20717: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20718: LD_EXP 44
20722: PUSH
20723: LD_EXP 96
20727: AND
20728: IFFALSE 20849
20730: GO 20732
20732: DISABLE
20733: LD_INT 0
20735: PPUSH
20736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20737: LD_ADDR_VAR 0 2
20741: PUSH
20742: LD_INT 22
20744: PUSH
20745: LD_OWVAR 2
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 21
20756: PUSH
20757: LD_INT 1
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 3
20766: PUSH
20767: LD_INT 23
20769: PUSH
20770: LD_INT 0
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: LIST
20785: PPUSH
20786: CALL_OW 69
20790: ST_TO_ADDR
// if not tmp then
20791: LD_VAR 0 2
20795: NOT
20796: IFFALSE 20800
// exit ;
20798: GO 20849
// for i in tmp do
20800: LD_ADDR_VAR 0 1
20804: PUSH
20805: LD_VAR 0 2
20809: PUSH
20810: FOR_IN
20811: IFFALSE 20847
// begin if Crawls ( i ) then
20813: LD_VAR 0 1
20817: PPUSH
20818: CALL_OW 318
20822: IFFALSE 20833
// ComWalk ( i ) ;
20824: LD_VAR 0 1
20828: PPUSH
20829: CALL_OW 138
// SetClass ( i , 2 ) ;
20833: LD_VAR 0 1
20837: PPUSH
20838: LD_INT 2
20840: PPUSH
20841: CALL_OW 336
// end ;
20845: GO 20810
20847: POP
20848: POP
// end ;
20849: PPOPN 2
20851: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20852: LD_EXP 44
20856: PUSH
20857: LD_EXP 97
20861: AND
20862: IFFALSE 21150
20864: GO 20866
20866: DISABLE
20867: LD_INT 0
20869: PPUSH
20870: PPUSH
20871: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20872: LD_OWVAR 2
20876: PPUSH
20877: LD_INT 9
20879: PPUSH
20880: LD_INT 1
20882: PPUSH
20883: LD_INT 1
20885: PPUSH
20886: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20890: LD_INT 9
20892: PPUSH
20893: LD_OWVAR 2
20897: PPUSH
20898: CALL_OW 343
// uc_side := 9 ;
20902: LD_ADDR_OWVAR 20
20906: PUSH
20907: LD_INT 9
20909: ST_TO_ADDR
// uc_nation := 2 ;
20910: LD_ADDR_OWVAR 21
20914: PUSH
20915: LD_INT 2
20917: ST_TO_ADDR
// hc_name := Dark Warrior ;
20918: LD_ADDR_OWVAR 26
20922: PUSH
20923: LD_STRING Dark Warrior
20925: ST_TO_ADDR
// hc_gallery :=  ;
20926: LD_ADDR_OWVAR 33
20930: PUSH
20931: LD_STRING 
20933: ST_TO_ADDR
// hc_noskilllimit := true ;
20934: LD_ADDR_OWVAR 76
20938: PUSH
20939: LD_INT 1
20941: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20942: LD_ADDR_OWVAR 31
20946: PUSH
20947: LD_INT 30
20949: PUSH
20950: LD_INT 30
20952: PUSH
20953: LD_INT 30
20955: PUSH
20956: LD_INT 30
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: ST_TO_ADDR
// un := CreateHuman ;
20965: LD_ADDR_VAR 0 3
20969: PUSH
20970: CALL_OW 44
20974: ST_TO_ADDR
// hc_noskilllimit := false ;
20975: LD_ADDR_OWVAR 76
20979: PUSH
20980: LD_INT 0
20982: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20983: LD_VAR 0 3
20987: PPUSH
20988: LD_INT 1
20990: PPUSH
20991: CALL_OW 51
// ToLua ( playRanger() ) ;
20995: LD_STRING playRanger()
20997: PPUSH
20998: CALL_OW 559
// p := 0 ;
21002: LD_ADDR_VAR 0 2
21006: PUSH
21007: LD_INT 0
21009: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21010: LD_INT 35
21012: PPUSH
21013: CALL_OW 67
// p := p + 1 ;
21017: LD_ADDR_VAR 0 2
21021: PUSH
21022: LD_VAR 0 2
21026: PUSH
21027: LD_INT 1
21029: PLUS
21030: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21031: LD_VAR 0 3
21035: PPUSH
21036: CALL_OW 256
21040: PUSH
21041: LD_INT 1000
21043: LESS
21044: IFFALSE 21058
// SetLives ( un , 1000 ) ;
21046: LD_VAR 0 3
21050: PPUSH
21051: LD_INT 1000
21053: PPUSH
21054: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21058: LD_VAR 0 3
21062: PPUSH
21063: LD_INT 81
21065: PUSH
21066: LD_OWVAR 2
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 91
21077: PUSH
21078: LD_VAR 0 3
21082: PUSH
21083: LD_INT 30
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: LIST
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PPUSH
21095: CALL_OW 69
21099: PPUSH
21100: LD_VAR 0 3
21104: PPUSH
21105: CALL_OW 74
21109: PPUSH
21110: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21114: LD_VAR 0 2
21118: PUSH
21119: LD_INT 80
21121: GREATER
21122: PUSH
21123: LD_VAR 0 3
21127: PPUSH
21128: CALL_OW 301
21132: OR
21133: IFFALSE 21010
// if un then
21135: LD_VAR 0 3
21139: IFFALSE 21150
// RemoveUnit ( un ) ;
21141: LD_VAR 0 3
21145: PPUSH
21146: CALL_OW 64
// end ;
21150: PPOPN 3
21152: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21153: LD_EXP 98
21157: IFFALSE 21273
21159: GO 21161
21161: DISABLE
21162: LD_INT 0
21164: PPUSH
21165: PPUSH
21166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21167: LD_ADDR_VAR 0 2
21171: PUSH
21172: LD_INT 81
21174: PUSH
21175: LD_OWVAR 2
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 21
21186: PUSH
21187: LD_INT 1
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PPUSH
21198: CALL_OW 69
21202: ST_TO_ADDR
// if not tmp then
21203: LD_VAR 0 2
21207: NOT
21208: IFFALSE 21212
// exit ;
21210: GO 21273
// ToLua ( playComputer() ) ;
21212: LD_STRING playComputer()
21214: PPUSH
21215: CALL_OW 559
// for i in tmp do
21219: LD_ADDR_VAR 0 1
21223: PUSH
21224: LD_VAR 0 2
21228: PUSH
21229: FOR_IN
21230: IFFALSE 21271
// for j := 1 to 4 do
21232: LD_ADDR_VAR 0 3
21236: PUSH
21237: DOUBLE
21238: LD_INT 1
21240: DEC
21241: ST_TO_ADDR
21242: LD_INT 4
21244: PUSH
21245: FOR_TO
21246: IFFALSE 21267
// SetSkill ( i , j , 10 ) ;
21248: LD_VAR 0 1
21252: PPUSH
21253: LD_VAR 0 3
21257: PPUSH
21258: LD_INT 10
21260: PPUSH
21261: CALL_OW 237
21265: GO 21245
21267: POP
21268: POP
21269: GO 21229
21271: POP
21272: POP
// end ;
21273: PPOPN 3
21275: END
// every 0 0$1 trigger s30 do var i , tmp ;
21276: LD_EXP 99
21280: IFFALSE 21349
21282: GO 21284
21284: DISABLE
21285: LD_INT 0
21287: PPUSH
21288: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: LD_INT 22
21296: PUSH
21297: LD_OWVAR 2
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PPUSH
21306: CALL_OW 69
21310: ST_TO_ADDR
// if not tmp then
21311: LD_VAR 0 2
21315: NOT
21316: IFFALSE 21320
// exit ;
21318: GO 21349
// for i in tmp do
21320: LD_ADDR_VAR 0 1
21324: PUSH
21325: LD_VAR 0 2
21329: PUSH
21330: FOR_IN
21331: IFFALSE 21347
// SetLives ( i , 300 ) ;
21333: LD_VAR 0 1
21337: PPUSH
21338: LD_INT 300
21340: PPUSH
21341: CALL_OW 234
21345: GO 21330
21347: POP
21348: POP
// end ;
21349: PPOPN 2
21351: END
// every 0 0$1 trigger s60 do var i , tmp ;
21352: LD_EXP 100
21356: IFFALSE 21425
21358: GO 21360
21360: DISABLE
21361: LD_INT 0
21363: PPUSH
21364: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21365: LD_ADDR_VAR 0 2
21369: PUSH
21370: LD_INT 22
21372: PUSH
21373: LD_OWVAR 2
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PPUSH
21382: CALL_OW 69
21386: ST_TO_ADDR
// if not tmp then
21387: LD_VAR 0 2
21391: NOT
21392: IFFALSE 21396
// exit ;
21394: GO 21425
// for i in tmp do
21396: LD_ADDR_VAR 0 1
21400: PUSH
21401: LD_VAR 0 2
21405: PUSH
21406: FOR_IN
21407: IFFALSE 21423
// SetLives ( i , 600 ) ;
21409: LD_VAR 0 1
21413: PPUSH
21414: LD_INT 600
21416: PPUSH
21417: CALL_OW 234
21421: GO 21406
21423: POP
21424: POP
// end ;
21425: PPOPN 2
21427: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21428: LD_INT 0
21430: PPUSH
// case cmd of 301 :
21431: LD_VAR 0 1
21435: PUSH
21436: LD_INT 301
21438: DOUBLE
21439: EQUAL
21440: IFTRUE 21444
21442: GO 21476
21444: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21445: LD_VAR 0 6
21449: PPUSH
21450: LD_VAR 0 7
21454: PPUSH
21455: LD_VAR 0 8
21459: PPUSH
21460: LD_VAR 0 4
21464: PPUSH
21465: LD_VAR 0 5
21469: PPUSH
21470: CALL 22677 0 5
21474: GO 21597
21476: LD_INT 302
21478: DOUBLE
21479: EQUAL
21480: IFTRUE 21484
21482: GO 21521
21484: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21485: LD_VAR 0 6
21489: PPUSH
21490: LD_VAR 0 7
21494: PPUSH
21495: LD_VAR 0 8
21499: PPUSH
21500: LD_VAR 0 9
21504: PPUSH
21505: LD_VAR 0 4
21509: PPUSH
21510: LD_VAR 0 5
21514: PPUSH
21515: CALL 22768 0 6
21519: GO 21597
21521: LD_INT 303
21523: DOUBLE
21524: EQUAL
21525: IFTRUE 21529
21527: GO 21566
21529: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21530: LD_VAR 0 6
21534: PPUSH
21535: LD_VAR 0 7
21539: PPUSH
21540: LD_VAR 0 8
21544: PPUSH
21545: LD_VAR 0 9
21549: PPUSH
21550: LD_VAR 0 4
21554: PPUSH
21555: LD_VAR 0 5
21559: PPUSH
21560: CALL 21602 0 6
21564: GO 21597
21566: LD_INT 304
21568: DOUBLE
21569: EQUAL
21570: IFTRUE 21574
21572: GO 21596
21574: POP
// hHackTeleport ( unit , x , y ) ; end ;
21575: LD_VAR 0 2
21579: PPUSH
21580: LD_VAR 0 4
21584: PPUSH
21585: LD_VAR 0 5
21589: PPUSH
21590: CALL 23361 0 3
21594: GO 21597
21596: POP
// end ;
21597: LD_VAR 0 12
21601: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21602: LD_INT 0
21604: PPUSH
21605: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21606: LD_VAR 0 1
21610: PUSH
21611: LD_INT 1
21613: LESS
21614: PUSH
21615: LD_VAR 0 1
21619: PUSH
21620: LD_INT 3
21622: GREATER
21623: OR
21624: PUSH
21625: LD_VAR 0 5
21629: PPUSH
21630: LD_VAR 0 6
21634: PPUSH
21635: CALL_OW 428
21639: OR
21640: IFFALSE 21644
// exit ;
21642: GO 22364
// uc_side := your_side ;
21644: LD_ADDR_OWVAR 20
21648: PUSH
21649: LD_OWVAR 2
21653: ST_TO_ADDR
// uc_nation := nation ;
21654: LD_ADDR_OWVAR 21
21658: PUSH
21659: LD_VAR 0 1
21663: ST_TO_ADDR
// bc_level = 1 ;
21664: LD_ADDR_OWVAR 43
21668: PUSH
21669: LD_INT 1
21671: ST_TO_ADDR
// case btype of 1 :
21672: LD_VAR 0 2
21676: PUSH
21677: LD_INT 1
21679: DOUBLE
21680: EQUAL
21681: IFTRUE 21685
21683: GO 21696
21685: POP
// bc_type := b_depot ; 2 :
21686: LD_ADDR_OWVAR 42
21690: PUSH
21691: LD_INT 0
21693: ST_TO_ADDR
21694: GO 22308
21696: LD_INT 2
21698: DOUBLE
21699: EQUAL
21700: IFTRUE 21704
21702: GO 21715
21704: POP
// bc_type := b_warehouse ; 3 :
21705: LD_ADDR_OWVAR 42
21709: PUSH
21710: LD_INT 1
21712: ST_TO_ADDR
21713: GO 22308
21715: LD_INT 3
21717: DOUBLE
21718: EQUAL
21719: IFTRUE 21723
21721: GO 21734
21723: POP
// bc_type := b_lab ; 4 .. 9 :
21724: LD_ADDR_OWVAR 42
21728: PUSH
21729: LD_INT 6
21731: ST_TO_ADDR
21732: GO 22308
21734: LD_INT 4
21736: DOUBLE
21737: GREATEREQUAL
21738: IFFALSE 21746
21740: LD_INT 9
21742: DOUBLE
21743: LESSEQUAL
21744: IFTRUE 21748
21746: GO 21800
21748: POP
// begin bc_type := b_lab_half ;
21749: LD_ADDR_OWVAR 42
21753: PUSH
21754: LD_INT 7
21756: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21757: LD_ADDR_OWVAR 44
21761: PUSH
21762: LD_INT 10
21764: PUSH
21765: LD_INT 11
21767: PUSH
21768: LD_INT 12
21770: PUSH
21771: LD_INT 15
21773: PUSH
21774: LD_INT 14
21776: PUSH
21777: LD_INT 13
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: PUSH
21788: LD_VAR 0 2
21792: PUSH
21793: LD_INT 3
21795: MINUS
21796: ARRAY
21797: ST_TO_ADDR
// end ; 10 .. 13 :
21798: GO 22308
21800: LD_INT 10
21802: DOUBLE
21803: GREATEREQUAL
21804: IFFALSE 21812
21806: LD_INT 13
21808: DOUBLE
21809: LESSEQUAL
21810: IFTRUE 21814
21812: GO 21891
21814: POP
// begin bc_type := b_lab_full ;
21815: LD_ADDR_OWVAR 42
21819: PUSH
21820: LD_INT 8
21822: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21823: LD_ADDR_OWVAR 44
21827: PUSH
21828: LD_INT 10
21830: PUSH
21831: LD_INT 12
21833: PUSH
21834: LD_INT 14
21836: PUSH
21837: LD_INT 13
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: PUSH
21846: LD_VAR 0 2
21850: PUSH
21851: LD_INT 9
21853: MINUS
21854: ARRAY
21855: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21856: LD_ADDR_OWVAR 45
21860: PUSH
21861: LD_INT 11
21863: PUSH
21864: LD_INT 15
21866: PUSH
21867: LD_INT 12
21869: PUSH
21870: LD_INT 15
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: PUSH
21879: LD_VAR 0 2
21883: PUSH
21884: LD_INT 9
21886: MINUS
21887: ARRAY
21888: ST_TO_ADDR
// end ; 14 :
21889: GO 22308
21891: LD_INT 14
21893: DOUBLE
21894: EQUAL
21895: IFTRUE 21899
21897: GO 21910
21899: POP
// bc_type := b_workshop ; 15 :
21900: LD_ADDR_OWVAR 42
21904: PUSH
21905: LD_INT 2
21907: ST_TO_ADDR
21908: GO 22308
21910: LD_INT 15
21912: DOUBLE
21913: EQUAL
21914: IFTRUE 21918
21916: GO 21929
21918: POP
// bc_type := b_factory ; 16 :
21919: LD_ADDR_OWVAR 42
21923: PUSH
21924: LD_INT 3
21926: ST_TO_ADDR
21927: GO 22308
21929: LD_INT 16
21931: DOUBLE
21932: EQUAL
21933: IFTRUE 21937
21935: GO 21948
21937: POP
// bc_type := b_ext_gun ; 17 :
21938: LD_ADDR_OWVAR 42
21942: PUSH
21943: LD_INT 17
21945: ST_TO_ADDR
21946: GO 22308
21948: LD_INT 17
21950: DOUBLE
21951: EQUAL
21952: IFTRUE 21956
21954: GO 21984
21956: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21957: LD_ADDR_OWVAR 42
21961: PUSH
21962: LD_INT 19
21964: PUSH
21965: LD_INT 23
21967: PUSH
21968: LD_INT 19
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: LIST
21975: PUSH
21976: LD_VAR 0 1
21980: ARRAY
21981: ST_TO_ADDR
21982: GO 22308
21984: LD_INT 18
21986: DOUBLE
21987: EQUAL
21988: IFTRUE 21992
21990: GO 22003
21992: POP
// bc_type := b_ext_radar ; 19 :
21993: LD_ADDR_OWVAR 42
21997: PUSH
21998: LD_INT 20
22000: ST_TO_ADDR
22001: GO 22308
22003: LD_INT 19
22005: DOUBLE
22006: EQUAL
22007: IFTRUE 22011
22009: GO 22022
22011: POP
// bc_type := b_ext_radio ; 20 :
22012: LD_ADDR_OWVAR 42
22016: PUSH
22017: LD_INT 22
22019: ST_TO_ADDR
22020: GO 22308
22022: LD_INT 20
22024: DOUBLE
22025: EQUAL
22026: IFTRUE 22030
22028: GO 22041
22030: POP
// bc_type := b_ext_siberium ; 21 :
22031: LD_ADDR_OWVAR 42
22035: PUSH
22036: LD_INT 21
22038: ST_TO_ADDR
22039: GO 22308
22041: LD_INT 21
22043: DOUBLE
22044: EQUAL
22045: IFTRUE 22049
22047: GO 22060
22049: POP
// bc_type := b_ext_computer ; 22 :
22050: LD_ADDR_OWVAR 42
22054: PUSH
22055: LD_INT 24
22057: ST_TO_ADDR
22058: GO 22308
22060: LD_INT 22
22062: DOUBLE
22063: EQUAL
22064: IFTRUE 22068
22066: GO 22079
22068: POP
// bc_type := b_ext_track ; 23 :
22069: LD_ADDR_OWVAR 42
22073: PUSH
22074: LD_INT 16
22076: ST_TO_ADDR
22077: GO 22308
22079: LD_INT 23
22081: DOUBLE
22082: EQUAL
22083: IFTRUE 22087
22085: GO 22098
22087: POP
// bc_type := b_ext_laser ; 24 :
22088: LD_ADDR_OWVAR 42
22092: PUSH
22093: LD_INT 25
22095: ST_TO_ADDR
22096: GO 22308
22098: LD_INT 24
22100: DOUBLE
22101: EQUAL
22102: IFTRUE 22106
22104: GO 22117
22106: POP
// bc_type := b_control_tower ; 25 :
22107: LD_ADDR_OWVAR 42
22111: PUSH
22112: LD_INT 36
22114: ST_TO_ADDR
22115: GO 22308
22117: LD_INT 25
22119: DOUBLE
22120: EQUAL
22121: IFTRUE 22125
22123: GO 22136
22125: POP
// bc_type := b_breastwork ; 26 :
22126: LD_ADDR_OWVAR 42
22130: PUSH
22131: LD_INT 31
22133: ST_TO_ADDR
22134: GO 22308
22136: LD_INT 26
22138: DOUBLE
22139: EQUAL
22140: IFTRUE 22144
22142: GO 22155
22144: POP
// bc_type := b_bunker ; 27 :
22145: LD_ADDR_OWVAR 42
22149: PUSH
22150: LD_INT 32
22152: ST_TO_ADDR
22153: GO 22308
22155: LD_INT 27
22157: DOUBLE
22158: EQUAL
22159: IFTRUE 22163
22161: GO 22174
22163: POP
// bc_type := b_turret ; 28 :
22164: LD_ADDR_OWVAR 42
22168: PUSH
22169: LD_INT 33
22171: ST_TO_ADDR
22172: GO 22308
22174: LD_INT 28
22176: DOUBLE
22177: EQUAL
22178: IFTRUE 22182
22180: GO 22193
22182: POP
// bc_type := b_armoury ; 29 :
22183: LD_ADDR_OWVAR 42
22187: PUSH
22188: LD_INT 4
22190: ST_TO_ADDR
22191: GO 22308
22193: LD_INT 29
22195: DOUBLE
22196: EQUAL
22197: IFTRUE 22201
22199: GO 22212
22201: POP
// bc_type := b_barracks ; 30 :
22202: LD_ADDR_OWVAR 42
22206: PUSH
22207: LD_INT 5
22209: ST_TO_ADDR
22210: GO 22308
22212: LD_INT 30
22214: DOUBLE
22215: EQUAL
22216: IFTRUE 22220
22218: GO 22231
22220: POP
// bc_type := b_solar_power ; 31 :
22221: LD_ADDR_OWVAR 42
22225: PUSH
22226: LD_INT 27
22228: ST_TO_ADDR
22229: GO 22308
22231: LD_INT 31
22233: DOUBLE
22234: EQUAL
22235: IFTRUE 22239
22237: GO 22250
22239: POP
// bc_type := b_oil_power ; 32 :
22240: LD_ADDR_OWVAR 42
22244: PUSH
22245: LD_INT 26
22247: ST_TO_ADDR
22248: GO 22308
22250: LD_INT 32
22252: DOUBLE
22253: EQUAL
22254: IFTRUE 22258
22256: GO 22269
22258: POP
// bc_type := b_siberite_power ; 33 :
22259: LD_ADDR_OWVAR 42
22263: PUSH
22264: LD_INT 28
22266: ST_TO_ADDR
22267: GO 22308
22269: LD_INT 33
22271: DOUBLE
22272: EQUAL
22273: IFTRUE 22277
22275: GO 22288
22277: POP
// bc_type := b_oil_mine ; 34 :
22278: LD_ADDR_OWVAR 42
22282: PUSH
22283: LD_INT 29
22285: ST_TO_ADDR
22286: GO 22308
22288: LD_INT 34
22290: DOUBLE
22291: EQUAL
22292: IFTRUE 22296
22294: GO 22307
22296: POP
// bc_type := b_siberite_mine ; end ;
22297: LD_ADDR_OWVAR 42
22301: PUSH
22302: LD_INT 30
22304: ST_TO_ADDR
22305: GO 22308
22307: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22308: LD_ADDR_VAR 0 8
22312: PUSH
22313: LD_VAR 0 5
22317: PPUSH
22318: LD_VAR 0 6
22322: PPUSH
22323: LD_VAR 0 3
22327: PPUSH
22328: CALL_OW 47
22332: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22333: LD_OWVAR 42
22337: PUSH
22338: LD_INT 32
22340: PUSH
22341: LD_INT 33
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: IN
22348: IFFALSE 22364
// PlaceWeaponTurret ( b , weapon ) ;
22350: LD_VAR 0 8
22354: PPUSH
22355: LD_VAR 0 4
22359: PPUSH
22360: CALL_OW 431
// end ;
22364: LD_VAR 0 7
22368: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22369: LD_INT 0
22371: PPUSH
22372: PPUSH
22373: PPUSH
22374: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22375: LD_ADDR_VAR 0 4
22379: PUSH
22380: LD_INT 22
22382: PUSH
22383: LD_OWVAR 2
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 2
22394: PUSH
22395: LD_INT 30
22397: PUSH
22398: LD_INT 0
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 30
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: LIST
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PPUSH
22424: CALL_OW 69
22428: ST_TO_ADDR
// if not tmp then
22429: LD_VAR 0 4
22433: NOT
22434: IFFALSE 22438
// exit ;
22436: GO 22497
// for i in tmp do
22438: LD_ADDR_VAR 0 2
22442: PUSH
22443: LD_VAR 0 4
22447: PUSH
22448: FOR_IN
22449: IFFALSE 22495
// for j = 1 to 3 do
22451: LD_ADDR_VAR 0 3
22455: PUSH
22456: DOUBLE
22457: LD_INT 1
22459: DEC
22460: ST_TO_ADDR
22461: LD_INT 3
22463: PUSH
22464: FOR_TO
22465: IFFALSE 22491
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22467: LD_VAR 0 2
22471: PPUSH
22472: CALL_OW 274
22476: PPUSH
22477: LD_VAR 0 3
22481: PPUSH
22482: LD_INT 99999
22484: PPUSH
22485: CALL_OW 277
22489: GO 22464
22491: POP
22492: POP
22493: GO 22448
22495: POP
22496: POP
// end ;
22497: LD_VAR 0 1
22501: RET
// export function hHackSetLevel10 ; var i , j ; begin
22502: LD_INT 0
22504: PPUSH
22505: PPUSH
22506: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22507: LD_ADDR_VAR 0 2
22511: PUSH
22512: LD_INT 21
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PPUSH
22522: CALL_OW 69
22526: PUSH
22527: FOR_IN
22528: IFFALSE 22580
// if IsSelected ( i ) then
22530: LD_VAR 0 2
22534: PPUSH
22535: CALL_OW 306
22539: IFFALSE 22578
// begin for j := 1 to 4 do
22541: LD_ADDR_VAR 0 3
22545: PUSH
22546: DOUBLE
22547: LD_INT 1
22549: DEC
22550: ST_TO_ADDR
22551: LD_INT 4
22553: PUSH
22554: FOR_TO
22555: IFFALSE 22576
// SetSkill ( i , j , 10 ) ;
22557: LD_VAR 0 2
22561: PPUSH
22562: LD_VAR 0 3
22566: PPUSH
22567: LD_INT 10
22569: PPUSH
22570: CALL_OW 237
22574: GO 22554
22576: POP
22577: POP
// end ;
22578: GO 22527
22580: POP
22581: POP
// end ;
22582: LD_VAR 0 1
22586: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22587: LD_INT 0
22589: PPUSH
22590: PPUSH
22591: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22592: LD_ADDR_VAR 0 2
22596: PUSH
22597: LD_INT 22
22599: PUSH
22600: LD_OWVAR 2
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 21
22611: PUSH
22612: LD_INT 1
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PPUSH
22623: CALL_OW 69
22627: PUSH
22628: FOR_IN
22629: IFFALSE 22670
// begin for j := 1 to 4 do
22631: LD_ADDR_VAR 0 3
22635: PUSH
22636: DOUBLE
22637: LD_INT 1
22639: DEC
22640: ST_TO_ADDR
22641: LD_INT 4
22643: PUSH
22644: FOR_TO
22645: IFFALSE 22666
// SetSkill ( i , j , 10 ) ;
22647: LD_VAR 0 2
22651: PPUSH
22652: LD_VAR 0 3
22656: PPUSH
22657: LD_INT 10
22659: PPUSH
22660: CALL_OW 237
22664: GO 22644
22666: POP
22667: POP
// end ;
22668: GO 22628
22670: POP
22671: POP
// end ;
22672: LD_VAR 0 1
22676: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22677: LD_INT 0
22679: PPUSH
// uc_side := your_side ;
22680: LD_ADDR_OWVAR 20
22684: PUSH
22685: LD_OWVAR 2
22689: ST_TO_ADDR
// uc_nation := nation ;
22690: LD_ADDR_OWVAR 21
22694: PUSH
22695: LD_VAR 0 1
22699: ST_TO_ADDR
// InitHc ;
22700: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22704: LD_INT 0
22706: PPUSH
22707: LD_VAR 0 2
22711: PPUSH
22712: LD_VAR 0 3
22716: PPUSH
22717: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22721: LD_VAR 0 4
22725: PPUSH
22726: LD_VAR 0 5
22730: PPUSH
22731: CALL_OW 428
22735: PUSH
22736: LD_INT 0
22738: EQUAL
22739: IFFALSE 22763
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22741: CALL_OW 44
22745: PPUSH
22746: LD_VAR 0 4
22750: PPUSH
22751: LD_VAR 0 5
22755: PPUSH
22756: LD_INT 1
22758: PPUSH
22759: CALL_OW 48
// end ;
22763: LD_VAR 0 6
22767: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22768: LD_INT 0
22770: PPUSH
22771: PPUSH
// uc_side := your_side ;
22772: LD_ADDR_OWVAR 20
22776: PUSH
22777: LD_OWVAR 2
22781: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22782: LD_VAR 0 1
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: LD_INT 3
22795: PUSH
22796: LD_INT 4
22798: PUSH
22799: LD_INT 5
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: IN
22809: IFFALSE 22821
// uc_nation := nation_american else
22811: LD_ADDR_OWVAR 21
22815: PUSH
22816: LD_INT 1
22818: ST_TO_ADDR
22819: GO 22864
// if chassis in [ 11 , 12 , 13 , 14 ] then
22821: LD_VAR 0 1
22825: PUSH
22826: LD_INT 11
22828: PUSH
22829: LD_INT 12
22831: PUSH
22832: LD_INT 13
22834: PUSH
22835: LD_INT 14
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: IN
22844: IFFALSE 22856
// uc_nation := nation_arabian else
22846: LD_ADDR_OWVAR 21
22850: PUSH
22851: LD_INT 2
22853: ST_TO_ADDR
22854: GO 22864
// uc_nation := nation_russian ;
22856: LD_ADDR_OWVAR 21
22860: PUSH
22861: LD_INT 3
22863: ST_TO_ADDR
// vc_chassis := chassis ;
22864: LD_ADDR_OWVAR 37
22868: PUSH
22869: LD_VAR 0 1
22873: ST_TO_ADDR
// vc_engine := engine ;
22874: LD_ADDR_OWVAR 39
22878: PUSH
22879: LD_VAR 0 2
22883: ST_TO_ADDR
// vc_control := control ;
22884: LD_ADDR_OWVAR 38
22888: PUSH
22889: LD_VAR 0 3
22893: ST_TO_ADDR
// vc_weapon := weapon ;
22894: LD_ADDR_OWVAR 40
22898: PUSH
22899: LD_VAR 0 4
22903: ST_TO_ADDR
// un := CreateVehicle ;
22904: LD_ADDR_VAR 0 8
22908: PUSH
22909: CALL_OW 45
22913: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22914: LD_VAR 0 8
22918: PPUSH
22919: LD_INT 0
22921: PPUSH
22922: LD_INT 5
22924: PPUSH
22925: CALL_OW 12
22929: PPUSH
22930: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22934: LD_VAR 0 8
22938: PPUSH
22939: LD_VAR 0 5
22943: PPUSH
22944: LD_VAR 0 6
22948: PPUSH
22949: LD_INT 1
22951: PPUSH
22952: CALL_OW 48
// end ;
22956: LD_VAR 0 7
22960: RET
// export hInvincible ; every 1 do
22961: GO 22963
22963: DISABLE
// hInvincible := [ ] ;
22964: LD_ADDR_EXP 101
22968: PUSH
22969: EMPTY
22970: ST_TO_ADDR
22971: END
// every 10 do var i ;
22972: GO 22974
22974: DISABLE
22975: LD_INT 0
22977: PPUSH
// begin enable ;
22978: ENABLE
// if not hInvincible then
22979: LD_EXP 101
22983: NOT
22984: IFFALSE 22988
// exit ;
22986: GO 23032
// for i in hInvincible do
22988: LD_ADDR_VAR 0 1
22992: PUSH
22993: LD_EXP 101
22997: PUSH
22998: FOR_IN
22999: IFFALSE 23030
// if GetLives ( i ) < 1000 then
23001: LD_VAR 0 1
23005: PPUSH
23006: CALL_OW 256
23010: PUSH
23011: LD_INT 1000
23013: LESS
23014: IFFALSE 23028
// SetLives ( i , 1000 ) ;
23016: LD_VAR 0 1
23020: PPUSH
23021: LD_INT 1000
23023: PPUSH
23024: CALL_OW 234
23028: GO 22998
23030: POP
23031: POP
// end ;
23032: PPOPN 1
23034: END
// export function hHackInvincible ; var i ; begin
23035: LD_INT 0
23037: PPUSH
23038: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23039: LD_ADDR_VAR 0 2
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: LD_INT 21
23049: PUSH
23050: LD_INT 1
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 21
23059: PUSH
23060: LD_INT 2
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: PPUSH
23072: CALL_OW 69
23076: PUSH
23077: FOR_IN
23078: IFFALSE 23139
// if IsSelected ( i ) then
23080: LD_VAR 0 2
23084: PPUSH
23085: CALL_OW 306
23089: IFFALSE 23137
// begin if i in hInvincible then
23091: LD_VAR 0 2
23095: PUSH
23096: LD_EXP 101
23100: IN
23101: IFFALSE 23121
// hInvincible := hInvincible diff i else
23103: LD_ADDR_EXP 101
23107: PUSH
23108: LD_EXP 101
23112: PUSH
23113: LD_VAR 0 2
23117: DIFF
23118: ST_TO_ADDR
23119: GO 23137
// hInvincible := hInvincible union i ;
23121: LD_ADDR_EXP 101
23125: PUSH
23126: LD_EXP 101
23130: PUSH
23131: LD_VAR 0 2
23135: UNION
23136: ST_TO_ADDR
// end ;
23137: GO 23077
23139: POP
23140: POP
// end ;
23141: LD_VAR 0 1
23145: RET
// export function hHackInvisible ; var i , j ; begin
23146: LD_INT 0
23148: PPUSH
23149: PPUSH
23150: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23151: LD_ADDR_VAR 0 2
23155: PUSH
23156: LD_INT 21
23158: PUSH
23159: LD_INT 1
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PPUSH
23166: CALL_OW 69
23170: PUSH
23171: FOR_IN
23172: IFFALSE 23196
// if IsSelected ( i ) then
23174: LD_VAR 0 2
23178: PPUSH
23179: CALL_OW 306
23183: IFFALSE 23194
// ComForceInvisible ( i ) ;
23185: LD_VAR 0 2
23189: PPUSH
23190: CALL_OW 496
23194: GO 23171
23196: POP
23197: POP
// end ;
23198: LD_VAR 0 1
23202: RET
// export function hHackChangeYourSide ; begin
23203: LD_INT 0
23205: PPUSH
// if your_side = 8 then
23206: LD_OWVAR 2
23210: PUSH
23211: LD_INT 8
23213: EQUAL
23214: IFFALSE 23226
// your_side := 0 else
23216: LD_ADDR_OWVAR 2
23220: PUSH
23221: LD_INT 0
23223: ST_TO_ADDR
23224: GO 23240
// your_side := your_side + 1 ;
23226: LD_ADDR_OWVAR 2
23230: PUSH
23231: LD_OWVAR 2
23235: PUSH
23236: LD_INT 1
23238: PLUS
23239: ST_TO_ADDR
// end ;
23240: LD_VAR 0 1
23244: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23245: LD_INT 0
23247: PPUSH
23248: PPUSH
23249: PPUSH
// for i in all_units do
23250: LD_ADDR_VAR 0 2
23254: PUSH
23255: LD_OWVAR 3
23259: PUSH
23260: FOR_IN
23261: IFFALSE 23339
// if IsSelected ( i ) then
23263: LD_VAR 0 2
23267: PPUSH
23268: CALL_OW 306
23272: IFFALSE 23337
// begin j := GetSide ( i ) ;
23274: LD_ADDR_VAR 0 3
23278: PUSH
23279: LD_VAR 0 2
23283: PPUSH
23284: CALL_OW 255
23288: ST_TO_ADDR
// if j = 8 then
23289: LD_VAR 0 3
23293: PUSH
23294: LD_INT 8
23296: EQUAL
23297: IFFALSE 23309
// j := 0 else
23299: LD_ADDR_VAR 0 3
23303: PUSH
23304: LD_INT 0
23306: ST_TO_ADDR
23307: GO 23323
// j := j + 1 ;
23309: LD_ADDR_VAR 0 3
23313: PUSH
23314: LD_VAR 0 3
23318: PUSH
23319: LD_INT 1
23321: PLUS
23322: ST_TO_ADDR
// SetSide ( i , j ) ;
23323: LD_VAR 0 2
23327: PPUSH
23328: LD_VAR 0 3
23332: PPUSH
23333: CALL_OW 235
// end ;
23337: GO 23260
23339: POP
23340: POP
// end ;
23341: LD_VAR 0 1
23345: RET
// export function hHackFog ; begin
23346: LD_INT 0
23348: PPUSH
// FogOff ( true ) ;
23349: LD_INT 1
23351: PPUSH
23352: CALL_OW 344
// end ;
23356: LD_VAR 0 1
23360: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23361: LD_INT 0
23363: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23364: LD_VAR 0 1
23368: PPUSH
23369: LD_VAR 0 2
23373: PPUSH
23374: LD_VAR 0 3
23378: PPUSH
23379: LD_INT 1
23381: PPUSH
23382: LD_INT 1
23384: PPUSH
23385: CALL_OW 483
// CenterOnXY ( x , y ) ;
23389: LD_VAR 0 2
23393: PPUSH
23394: LD_VAR 0 3
23398: PPUSH
23399: CALL_OW 84
// end ; end_of_file
23403: LD_VAR 0 4
23407: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23408: LD_INT 0
23410: PPUSH
23411: PPUSH
23412: PPUSH
23413: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23414: LD_VAR 0 1
23418: PPUSH
23419: CALL_OW 264
23423: PUSH
23424: LD_EXP 29
23428: EQUAL
23429: IFFALSE 23501
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23431: LD_INT 68
23433: PPUSH
23434: LD_VAR 0 1
23438: PPUSH
23439: CALL_OW 255
23443: PPUSH
23444: CALL_OW 321
23448: PUSH
23449: LD_INT 2
23451: EQUAL
23452: IFFALSE 23464
// eff := 70 else
23454: LD_ADDR_VAR 0 4
23458: PUSH
23459: LD_INT 70
23461: ST_TO_ADDR
23462: GO 23472
// eff := 30 ;
23464: LD_ADDR_VAR 0 4
23468: PUSH
23469: LD_INT 30
23471: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23472: LD_VAR 0 1
23476: PPUSH
23477: CALL_OW 250
23481: PPUSH
23482: LD_VAR 0 1
23486: PPUSH
23487: CALL_OW 251
23491: PPUSH
23492: LD_VAR 0 4
23496: PPUSH
23497: CALL_OW 495
// end ; end ;
23501: LD_VAR 0 2
23505: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23506: LD_INT 0
23508: PPUSH
// end ;
23509: LD_VAR 0 4
23513: RET
// export function SOS_Command ( cmd ) ; begin
23514: LD_INT 0
23516: PPUSH
// end ;
23517: LD_VAR 0 2
23521: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23522: LD_INT 0
23524: PPUSH
// end ;
23525: LD_VAR 0 6
23529: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23530: LD_INT 0
23532: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23533: LD_VAR 0 1
23537: PUSH
23538: LD_INT 250
23540: EQUAL
23541: PUSH
23542: LD_VAR 0 2
23546: PPUSH
23547: CALL_OW 264
23551: PUSH
23552: LD_EXP 32
23556: EQUAL
23557: AND
23558: IFFALSE 23579
// MinerPlaceMine ( unit , x , y ) ;
23560: LD_VAR 0 2
23564: PPUSH
23565: LD_VAR 0 4
23569: PPUSH
23570: LD_VAR 0 5
23574: PPUSH
23575: CALL 25928 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23579: LD_VAR 0 1
23583: PUSH
23584: LD_INT 251
23586: EQUAL
23587: PUSH
23588: LD_VAR 0 2
23592: PPUSH
23593: CALL_OW 264
23597: PUSH
23598: LD_EXP 32
23602: EQUAL
23603: AND
23604: IFFALSE 23625
// MinerDetonateMine ( unit , x , y ) ;
23606: LD_VAR 0 2
23610: PPUSH
23611: LD_VAR 0 4
23615: PPUSH
23616: LD_VAR 0 5
23620: PPUSH
23621: CALL 26205 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23625: LD_VAR 0 1
23629: PUSH
23630: LD_INT 252
23632: EQUAL
23633: PUSH
23634: LD_VAR 0 2
23638: PPUSH
23639: CALL_OW 264
23643: PUSH
23644: LD_EXP 32
23648: EQUAL
23649: AND
23650: IFFALSE 23671
// MinerCreateMinefield ( unit , x , y ) ;
23652: LD_VAR 0 2
23656: PPUSH
23657: LD_VAR 0 4
23661: PPUSH
23662: LD_VAR 0 5
23666: PPUSH
23667: CALL 26622 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23671: LD_VAR 0 1
23675: PUSH
23676: LD_INT 253
23678: EQUAL
23679: PUSH
23680: LD_VAR 0 2
23684: PPUSH
23685: CALL_OW 257
23689: PUSH
23690: LD_INT 5
23692: EQUAL
23693: AND
23694: IFFALSE 23715
// ComBinocular ( unit , x , y ) ;
23696: LD_VAR 0 2
23700: PPUSH
23701: LD_VAR 0 4
23705: PPUSH
23706: LD_VAR 0 5
23710: PPUSH
23711: CALL 26993 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23715: LD_VAR 0 1
23719: PUSH
23720: LD_INT 254
23722: EQUAL
23723: PUSH
23724: LD_VAR 0 2
23728: PPUSH
23729: CALL_OW 264
23733: PUSH
23734: LD_EXP 27
23738: EQUAL
23739: AND
23740: PUSH
23741: LD_VAR 0 3
23745: PPUSH
23746: CALL_OW 263
23750: PUSH
23751: LD_INT 3
23753: EQUAL
23754: AND
23755: IFFALSE 23771
// HackDestroyVehicle ( unit , selectedUnit ) ;
23757: LD_VAR 0 2
23761: PPUSH
23762: LD_VAR 0 3
23766: PPUSH
23767: CALL 25288 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23771: LD_VAR 0 1
23775: PUSH
23776: LD_INT 255
23778: EQUAL
23779: PUSH
23780: LD_VAR 0 2
23784: PPUSH
23785: CALL_OW 264
23789: PUSH
23790: LD_INT 14
23792: PUSH
23793: LD_INT 53
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: IN
23800: AND
23801: PUSH
23802: LD_VAR 0 4
23806: PPUSH
23807: LD_VAR 0 5
23811: PPUSH
23812: CALL_OW 488
23816: AND
23817: IFFALSE 23841
// CutTreeXYR ( unit , x , y , 12 ) ;
23819: LD_VAR 0 2
23823: PPUSH
23824: LD_VAR 0 4
23828: PPUSH
23829: LD_VAR 0 5
23833: PPUSH
23834: LD_INT 12
23836: PPUSH
23837: CALL 23854 0 4
// end ;
23841: LD_VAR 0 6
23845: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23846: LD_INT 0
23848: PPUSH
// end ;
23849: LD_VAR 0 4
23853: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23854: LD_INT 0
23856: PPUSH
23857: PPUSH
23858: PPUSH
23859: PPUSH
23860: PPUSH
23861: PPUSH
23862: PPUSH
23863: PPUSH
23864: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23865: LD_VAR 0 1
23869: NOT
23870: PUSH
23871: LD_VAR 0 2
23875: PPUSH
23876: LD_VAR 0 3
23880: PPUSH
23881: CALL_OW 488
23885: NOT
23886: OR
23887: PUSH
23888: LD_VAR 0 4
23892: NOT
23893: OR
23894: IFFALSE 23898
// exit ;
23896: GO 24238
// list := [ ] ;
23898: LD_ADDR_VAR 0 13
23902: PUSH
23903: EMPTY
23904: ST_TO_ADDR
// if x - r < 0 then
23905: LD_VAR 0 2
23909: PUSH
23910: LD_VAR 0 4
23914: MINUS
23915: PUSH
23916: LD_INT 0
23918: LESS
23919: IFFALSE 23931
// min_x := 0 else
23921: LD_ADDR_VAR 0 7
23925: PUSH
23926: LD_INT 0
23928: ST_TO_ADDR
23929: GO 23947
// min_x := x - r ;
23931: LD_ADDR_VAR 0 7
23935: PUSH
23936: LD_VAR 0 2
23940: PUSH
23941: LD_VAR 0 4
23945: MINUS
23946: ST_TO_ADDR
// if y - r < 0 then
23947: LD_VAR 0 3
23951: PUSH
23952: LD_VAR 0 4
23956: MINUS
23957: PUSH
23958: LD_INT 0
23960: LESS
23961: IFFALSE 23973
// min_y := 0 else
23963: LD_ADDR_VAR 0 8
23967: PUSH
23968: LD_INT 0
23970: ST_TO_ADDR
23971: GO 23989
// min_y := y - r ;
23973: LD_ADDR_VAR 0 8
23977: PUSH
23978: LD_VAR 0 3
23982: PUSH
23983: LD_VAR 0 4
23987: MINUS
23988: ST_TO_ADDR
// max_x := x + r ;
23989: LD_ADDR_VAR 0 9
23993: PUSH
23994: LD_VAR 0 2
23998: PUSH
23999: LD_VAR 0 4
24003: PLUS
24004: ST_TO_ADDR
// max_y := y + r ;
24005: LD_ADDR_VAR 0 10
24009: PUSH
24010: LD_VAR 0 3
24014: PUSH
24015: LD_VAR 0 4
24019: PLUS
24020: ST_TO_ADDR
// for _x = min_x to max_x do
24021: LD_ADDR_VAR 0 11
24025: PUSH
24026: DOUBLE
24027: LD_VAR 0 7
24031: DEC
24032: ST_TO_ADDR
24033: LD_VAR 0 9
24037: PUSH
24038: FOR_TO
24039: IFFALSE 24156
// for _y = min_y to max_y do
24041: LD_ADDR_VAR 0 12
24045: PUSH
24046: DOUBLE
24047: LD_VAR 0 8
24051: DEC
24052: ST_TO_ADDR
24053: LD_VAR 0 10
24057: PUSH
24058: FOR_TO
24059: IFFALSE 24152
// begin if not ValidHex ( _x , _y ) then
24061: LD_VAR 0 11
24065: PPUSH
24066: LD_VAR 0 12
24070: PPUSH
24071: CALL_OW 488
24075: NOT
24076: IFFALSE 24080
// continue ;
24078: GO 24058
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24080: LD_VAR 0 11
24084: PPUSH
24085: LD_VAR 0 12
24089: PPUSH
24090: CALL_OW 351
24094: PUSH
24095: LD_VAR 0 11
24099: PPUSH
24100: LD_VAR 0 12
24104: PPUSH
24105: CALL_OW 554
24109: AND
24110: IFFALSE 24150
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24112: LD_ADDR_VAR 0 13
24116: PUSH
24117: LD_VAR 0 13
24121: PPUSH
24122: LD_VAR 0 13
24126: PUSH
24127: LD_INT 1
24129: PLUS
24130: PPUSH
24131: LD_VAR 0 11
24135: PUSH
24136: LD_VAR 0 12
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PPUSH
24145: CALL_OW 2
24149: ST_TO_ADDR
// end ;
24150: GO 24058
24152: POP
24153: POP
24154: GO 24038
24156: POP
24157: POP
// if not list then
24158: LD_VAR 0 13
24162: NOT
24163: IFFALSE 24167
// exit ;
24165: GO 24238
// for i in list do
24167: LD_ADDR_VAR 0 6
24171: PUSH
24172: LD_VAR 0 13
24176: PUSH
24177: FOR_IN
24178: IFFALSE 24236
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24180: LD_VAR 0 1
24184: PPUSH
24185: LD_STRING M
24187: PUSH
24188: LD_VAR 0 6
24192: PUSH
24193: LD_INT 1
24195: ARRAY
24196: PUSH
24197: LD_VAR 0 6
24201: PUSH
24202: LD_INT 2
24204: ARRAY
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: LD_INT 0
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: PUSH
24227: EMPTY
24228: LIST
24229: PPUSH
24230: CALL_OW 447
24234: GO 24177
24236: POP
24237: POP
// end ;
24238: LD_VAR 0 5
24242: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24243: LD_EXP 104
24247: NOT
24248: IFFALSE 24298
24250: GO 24252
24252: DISABLE
// begin initHack := true ;
24253: LD_ADDR_EXP 104
24257: PUSH
24258: LD_INT 1
24260: ST_TO_ADDR
// hackTanks := [ ] ;
24261: LD_ADDR_EXP 105
24265: PUSH
24266: EMPTY
24267: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24268: LD_ADDR_EXP 106
24272: PUSH
24273: EMPTY
24274: ST_TO_ADDR
// hackLimit := 3 ;
24275: LD_ADDR_EXP 107
24279: PUSH
24280: LD_INT 3
24282: ST_TO_ADDR
// hackDist := 12 ;
24283: LD_ADDR_EXP 108
24287: PUSH
24288: LD_INT 12
24290: ST_TO_ADDR
// hackCounter := [ ] ;
24291: LD_ADDR_EXP 109
24295: PUSH
24296: EMPTY
24297: ST_TO_ADDR
// end ;
24298: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24299: LD_EXP 104
24303: PUSH
24304: LD_INT 34
24306: PUSH
24307: LD_EXP 27
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PPUSH
24316: CALL_OW 69
24320: AND
24321: IFFALSE 24576
24323: GO 24325
24325: DISABLE
24326: LD_INT 0
24328: PPUSH
24329: PPUSH
// begin enable ;
24330: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24331: LD_ADDR_VAR 0 1
24335: PUSH
24336: LD_INT 34
24338: PUSH
24339: LD_EXP 27
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PPUSH
24348: CALL_OW 69
24352: PUSH
24353: FOR_IN
24354: IFFALSE 24574
// begin if not i in hackTanks then
24356: LD_VAR 0 1
24360: PUSH
24361: LD_EXP 105
24365: IN
24366: NOT
24367: IFFALSE 24450
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24369: LD_ADDR_EXP 105
24373: PUSH
24374: LD_EXP 105
24378: PPUSH
24379: LD_EXP 105
24383: PUSH
24384: LD_INT 1
24386: PLUS
24387: PPUSH
24388: LD_VAR 0 1
24392: PPUSH
24393: CALL_OW 1
24397: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24398: LD_ADDR_EXP 106
24402: PUSH
24403: LD_EXP 106
24407: PPUSH
24408: LD_EXP 106
24412: PUSH
24413: LD_INT 1
24415: PLUS
24416: PPUSH
24417: EMPTY
24418: PPUSH
24419: CALL_OW 1
24423: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24424: LD_ADDR_EXP 109
24428: PUSH
24429: LD_EXP 109
24433: PPUSH
24434: LD_EXP 109
24438: PUSH
24439: LD_INT 1
24441: PLUS
24442: PPUSH
24443: EMPTY
24444: PPUSH
24445: CALL_OW 1
24449: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24450: LD_VAR 0 1
24454: PPUSH
24455: CALL_OW 302
24459: NOT
24460: IFFALSE 24473
// begin HackUnlinkAll ( i ) ;
24462: LD_VAR 0 1
24466: PPUSH
24467: CALL 24579 0 1
// continue ;
24471: GO 24353
// end ; HackCheckCapturedStatus ( i ) ;
24473: LD_VAR 0 1
24477: PPUSH
24478: CALL 25022 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24482: LD_ADDR_VAR 0 2
24486: PUSH
24487: LD_INT 81
24489: PUSH
24490: LD_VAR 0 1
24494: PPUSH
24495: CALL_OW 255
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 33
24506: PUSH
24507: LD_INT 3
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 91
24516: PUSH
24517: LD_VAR 0 1
24521: PUSH
24522: LD_EXP 108
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 50
24534: PUSH
24535: EMPTY
24536: LIST
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: PPUSH
24544: CALL_OW 69
24548: ST_TO_ADDR
// if not tmp then
24549: LD_VAR 0 2
24553: NOT
24554: IFFALSE 24558
// continue ;
24556: GO 24353
// HackLink ( i , tmp ) ;
24558: LD_VAR 0 1
24562: PPUSH
24563: LD_VAR 0 2
24567: PPUSH
24568: CALL 24715 0 2
// end ;
24572: GO 24353
24574: POP
24575: POP
// end ;
24576: PPOPN 2
24578: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24579: LD_INT 0
24581: PPUSH
24582: PPUSH
24583: PPUSH
// if not hack in hackTanks then
24584: LD_VAR 0 1
24588: PUSH
24589: LD_EXP 105
24593: IN
24594: NOT
24595: IFFALSE 24599
// exit ;
24597: GO 24710
// index := GetElementIndex ( hackTanks , hack ) ;
24599: LD_ADDR_VAR 0 4
24603: PUSH
24604: LD_EXP 105
24608: PPUSH
24609: LD_VAR 0 1
24613: PPUSH
24614: CALL 32184 0 2
24618: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24619: LD_EXP 106
24623: PUSH
24624: LD_VAR 0 4
24628: ARRAY
24629: IFFALSE 24710
// begin for i in hackTanksCaptured [ index ] do
24631: LD_ADDR_VAR 0 3
24635: PUSH
24636: LD_EXP 106
24640: PUSH
24641: LD_VAR 0 4
24645: ARRAY
24646: PUSH
24647: FOR_IN
24648: IFFALSE 24674
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24650: LD_VAR 0 3
24654: PUSH
24655: LD_INT 1
24657: ARRAY
24658: PPUSH
24659: LD_VAR 0 3
24663: PUSH
24664: LD_INT 2
24666: ARRAY
24667: PPUSH
24668: CALL_OW 235
24672: GO 24647
24674: POP
24675: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24676: LD_ADDR_EXP 106
24680: PUSH
24681: LD_EXP 106
24685: PPUSH
24686: LD_VAR 0 4
24690: PPUSH
24691: EMPTY
24692: PPUSH
24693: CALL_OW 1
24697: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24698: LD_VAR 0 1
24702: PPUSH
24703: LD_INT 0
24705: PPUSH
24706: CALL_OW 505
// end ; end ;
24710: LD_VAR 0 2
24714: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24715: LD_INT 0
24717: PPUSH
24718: PPUSH
24719: PPUSH
// if not hack in hackTanks or not vehicles then
24720: LD_VAR 0 1
24724: PUSH
24725: LD_EXP 105
24729: IN
24730: NOT
24731: PUSH
24732: LD_VAR 0 2
24736: NOT
24737: OR
24738: IFFALSE 24742
// exit ;
24740: GO 25017
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24742: LD_ADDR_VAR 0 2
24746: PUSH
24747: LD_VAR 0 1
24751: PPUSH
24752: LD_VAR 0 2
24756: PPUSH
24757: LD_INT 1
24759: PPUSH
24760: LD_INT 1
24762: PPUSH
24763: CALL 32834 0 4
24767: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24768: LD_ADDR_VAR 0 5
24772: PUSH
24773: LD_EXP 105
24777: PPUSH
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL 32184 0 2
24787: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24788: LD_EXP 106
24792: PUSH
24793: LD_VAR 0 5
24797: ARRAY
24798: PUSH
24799: LD_EXP 107
24803: LESS
24804: IFFALSE 24993
// begin for i := 1 to vehicles do
24806: LD_ADDR_VAR 0 4
24810: PUSH
24811: DOUBLE
24812: LD_INT 1
24814: DEC
24815: ST_TO_ADDR
24816: LD_VAR 0 2
24820: PUSH
24821: FOR_TO
24822: IFFALSE 24991
// begin if hackTanksCaptured [ index ] = hackLimit then
24824: LD_EXP 106
24828: PUSH
24829: LD_VAR 0 5
24833: ARRAY
24834: PUSH
24835: LD_EXP 107
24839: EQUAL
24840: IFFALSE 24844
// break ;
24842: GO 24991
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24844: LD_ADDR_EXP 109
24848: PUSH
24849: LD_EXP 109
24853: PPUSH
24854: LD_VAR 0 5
24858: PPUSH
24859: LD_EXP 109
24863: PUSH
24864: LD_VAR 0 5
24868: ARRAY
24869: PUSH
24870: LD_INT 1
24872: PLUS
24873: PPUSH
24874: CALL_OW 1
24878: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24879: LD_ADDR_EXP 106
24883: PUSH
24884: LD_EXP 106
24888: PPUSH
24889: LD_VAR 0 5
24893: PUSH
24894: LD_EXP 106
24898: PUSH
24899: LD_VAR 0 5
24903: ARRAY
24904: PUSH
24905: LD_INT 1
24907: PLUS
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PPUSH
24913: LD_VAR 0 2
24917: PUSH
24918: LD_VAR 0 4
24922: ARRAY
24923: PUSH
24924: LD_VAR 0 2
24928: PUSH
24929: LD_VAR 0 4
24933: ARRAY
24934: PPUSH
24935: CALL_OW 255
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PPUSH
24944: CALL 32399 0 3
24948: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24949: LD_VAR 0 2
24953: PUSH
24954: LD_VAR 0 4
24958: ARRAY
24959: PPUSH
24960: LD_VAR 0 1
24964: PPUSH
24965: CALL_OW 255
24969: PPUSH
24970: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24974: LD_VAR 0 2
24978: PUSH
24979: LD_VAR 0 4
24983: ARRAY
24984: PPUSH
24985: CALL_OW 141
// end ;
24989: GO 24821
24991: POP
24992: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24993: LD_VAR 0 1
24997: PPUSH
24998: LD_EXP 106
25002: PUSH
25003: LD_VAR 0 5
25007: ARRAY
25008: PUSH
25009: LD_INT 0
25011: PLUS
25012: PPUSH
25013: CALL_OW 505
// end ;
25017: LD_VAR 0 3
25021: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25022: LD_INT 0
25024: PPUSH
25025: PPUSH
25026: PPUSH
25027: PPUSH
// if not hack in hackTanks then
25028: LD_VAR 0 1
25032: PUSH
25033: LD_EXP 105
25037: IN
25038: NOT
25039: IFFALSE 25043
// exit ;
25041: GO 25283
// index := GetElementIndex ( hackTanks , hack ) ;
25043: LD_ADDR_VAR 0 4
25047: PUSH
25048: LD_EXP 105
25052: PPUSH
25053: LD_VAR 0 1
25057: PPUSH
25058: CALL 32184 0 2
25062: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25063: LD_ADDR_VAR 0 3
25067: PUSH
25068: DOUBLE
25069: LD_EXP 106
25073: PUSH
25074: LD_VAR 0 4
25078: ARRAY
25079: INC
25080: ST_TO_ADDR
25081: LD_INT 1
25083: PUSH
25084: FOR_DOWNTO
25085: IFFALSE 25257
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25087: LD_ADDR_VAR 0 5
25091: PUSH
25092: LD_EXP 106
25096: PUSH
25097: LD_VAR 0 4
25101: ARRAY
25102: PUSH
25103: LD_VAR 0 3
25107: ARRAY
25108: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25109: LD_VAR 0 5
25113: PUSH
25114: LD_INT 1
25116: ARRAY
25117: PPUSH
25118: CALL_OW 302
25122: NOT
25123: PUSH
25124: LD_VAR 0 5
25128: PUSH
25129: LD_INT 1
25131: ARRAY
25132: PPUSH
25133: CALL_OW 255
25137: PUSH
25138: LD_VAR 0 1
25142: PPUSH
25143: CALL_OW 255
25147: NONEQUAL
25148: OR
25149: IFFALSE 25255
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25151: LD_VAR 0 5
25155: PUSH
25156: LD_INT 1
25158: ARRAY
25159: PPUSH
25160: CALL_OW 305
25164: PUSH
25165: LD_VAR 0 5
25169: PUSH
25170: LD_INT 1
25172: ARRAY
25173: PPUSH
25174: CALL_OW 255
25178: PUSH
25179: LD_VAR 0 1
25183: PPUSH
25184: CALL_OW 255
25188: EQUAL
25189: AND
25190: IFFALSE 25214
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25192: LD_VAR 0 5
25196: PUSH
25197: LD_INT 1
25199: ARRAY
25200: PPUSH
25201: LD_VAR 0 5
25205: PUSH
25206: LD_INT 2
25208: ARRAY
25209: PPUSH
25210: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25214: LD_ADDR_EXP 106
25218: PUSH
25219: LD_EXP 106
25223: PPUSH
25224: LD_VAR 0 4
25228: PPUSH
25229: LD_EXP 106
25233: PUSH
25234: LD_VAR 0 4
25238: ARRAY
25239: PPUSH
25240: LD_VAR 0 3
25244: PPUSH
25245: CALL_OW 3
25249: PPUSH
25250: CALL_OW 1
25254: ST_TO_ADDR
// end ; end ;
25255: GO 25084
25257: POP
25258: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25259: LD_VAR 0 1
25263: PPUSH
25264: LD_EXP 106
25268: PUSH
25269: LD_VAR 0 4
25273: ARRAY
25274: PUSH
25275: LD_INT 0
25277: PLUS
25278: PPUSH
25279: CALL_OW 505
// end ;
25283: LD_VAR 0 2
25287: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25288: LD_INT 0
25290: PPUSH
25291: PPUSH
25292: PPUSH
25293: PPUSH
// if not hack in hackTanks then
25294: LD_VAR 0 1
25298: PUSH
25299: LD_EXP 105
25303: IN
25304: NOT
25305: IFFALSE 25309
// exit ;
25307: GO 25394
// index := GetElementIndex ( hackTanks , hack ) ;
25309: LD_ADDR_VAR 0 5
25313: PUSH
25314: LD_EXP 105
25318: PPUSH
25319: LD_VAR 0 1
25323: PPUSH
25324: CALL 32184 0 2
25328: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25329: LD_ADDR_VAR 0 4
25333: PUSH
25334: DOUBLE
25335: LD_INT 1
25337: DEC
25338: ST_TO_ADDR
25339: LD_EXP 106
25343: PUSH
25344: LD_VAR 0 5
25348: ARRAY
25349: PUSH
25350: FOR_TO
25351: IFFALSE 25392
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25353: LD_EXP 106
25357: PUSH
25358: LD_VAR 0 5
25362: ARRAY
25363: PUSH
25364: LD_VAR 0 4
25368: ARRAY
25369: PUSH
25370: LD_INT 1
25372: ARRAY
25373: PUSH
25374: LD_VAR 0 2
25378: EQUAL
25379: IFFALSE 25390
// KillUnit ( vehicle ) ;
25381: LD_VAR 0 2
25385: PPUSH
25386: CALL_OW 66
25390: GO 25350
25392: POP
25393: POP
// end ;
25394: LD_VAR 0 3
25398: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25399: LD_EXP 110
25403: NOT
25404: IFFALSE 25439
25406: GO 25408
25408: DISABLE
// begin initMiner := true ;
25409: LD_ADDR_EXP 110
25413: PUSH
25414: LD_INT 1
25416: ST_TO_ADDR
// minersList := [ ] ;
25417: LD_ADDR_EXP 111
25421: PUSH
25422: EMPTY
25423: ST_TO_ADDR
// minerMinesList := [ ] ;
25424: LD_ADDR_EXP 112
25428: PUSH
25429: EMPTY
25430: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25431: LD_ADDR_EXP 113
25435: PUSH
25436: LD_INT 5
25438: ST_TO_ADDR
// end ;
25439: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25440: LD_EXP 110
25444: PUSH
25445: LD_INT 34
25447: PUSH
25448: LD_EXP 32
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PPUSH
25457: CALL_OW 69
25461: AND
25462: IFFALSE 25925
25464: GO 25466
25466: DISABLE
25467: LD_INT 0
25469: PPUSH
25470: PPUSH
25471: PPUSH
25472: PPUSH
// begin enable ;
25473: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25474: LD_ADDR_VAR 0 1
25478: PUSH
25479: LD_INT 34
25481: PUSH
25482: LD_EXP 32
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PPUSH
25491: CALL_OW 69
25495: PUSH
25496: FOR_IN
25497: IFFALSE 25569
// begin if not i in minersList then
25499: LD_VAR 0 1
25503: PUSH
25504: LD_EXP 111
25508: IN
25509: NOT
25510: IFFALSE 25567
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25512: LD_ADDR_EXP 111
25516: PUSH
25517: LD_EXP 111
25521: PPUSH
25522: LD_EXP 111
25526: PUSH
25527: LD_INT 1
25529: PLUS
25530: PPUSH
25531: LD_VAR 0 1
25535: PPUSH
25536: CALL_OW 1
25540: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25541: LD_ADDR_EXP 112
25545: PUSH
25546: LD_EXP 112
25550: PPUSH
25551: LD_EXP 112
25555: PUSH
25556: LD_INT 1
25558: PLUS
25559: PPUSH
25560: EMPTY
25561: PPUSH
25562: CALL_OW 1
25566: ST_TO_ADDR
// end end ;
25567: GO 25496
25569: POP
25570: POP
// for i := minerMinesList downto 1 do
25571: LD_ADDR_VAR 0 1
25575: PUSH
25576: DOUBLE
25577: LD_EXP 112
25581: INC
25582: ST_TO_ADDR
25583: LD_INT 1
25585: PUSH
25586: FOR_DOWNTO
25587: IFFALSE 25923
// begin if IsLive ( minersList [ i ] ) then
25589: LD_EXP 111
25593: PUSH
25594: LD_VAR 0 1
25598: ARRAY
25599: PPUSH
25600: CALL_OW 300
25604: IFFALSE 25632
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25606: LD_EXP 111
25610: PUSH
25611: LD_VAR 0 1
25615: ARRAY
25616: PPUSH
25617: LD_EXP 112
25621: PUSH
25622: LD_VAR 0 1
25626: ARRAY
25627: PPUSH
25628: CALL_OW 505
// if not minerMinesList [ i ] then
25632: LD_EXP 112
25636: PUSH
25637: LD_VAR 0 1
25641: ARRAY
25642: NOT
25643: IFFALSE 25647
// continue ;
25645: GO 25586
// for j := minerMinesList [ i ] downto 1 do
25647: LD_ADDR_VAR 0 2
25651: PUSH
25652: DOUBLE
25653: LD_EXP 112
25657: PUSH
25658: LD_VAR 0 1
25662: ARRAY
25663: INC
25664: ST_TO_ADDR
25665: LD_INT 1
25667: PUSH
25668: FOR_DOWNTO
25669: IFFALSE 25919
// begin side := GetSide ( minersList [ i ] ) ;
25671: LD_ADDR_VAR 0 3
25675: PUSH
25676: LD_EXP 111
25680: PUSH
25681: LD_VAR 0 1
25685: ARRAY
25686: PPUSH
25687: CALL_OW 255
25691: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25692: LD_ADDR_VAR 0 4
25696: PUSH
25697: LD_EXP 112
25701: PUSH
25702: LD_VAR 0 1
25706: ARRAY
25707: PUSH
25708: LD_VAR 0 2
25712: ARRAY
25713: PUSH
25714: LD_INT 1
25716: ARRAY
25717: PPUSH
25718: LD_EXP 112
25722: PUSH
25723: LD_VAR 0 1
25727: ARRAY
25728: PUSH
25729: LD_VAR 0 2
25733: ARRAY
25734: PUSH
25735: LD_INT 2
25737: ARRAY
25738: PPUSH
25739: CALL_OW 428
25743: ST_TO_ADDR
// if not tmp then
25744: LD_VAR 0 4
25748: NOT
25749: IFFALSE 25753
// continue ;
25751: GO 25668
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25753: LD_VAR 0 4
25757: PUSH
25758: LD_INT 81
25760: PUSH
25761: LD_VAR 0 3
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PPUSH
25770: CALL_OW 69
25774: IN
25775: PUSH
25776: LD_EXP 112
25780: PUSH
25781: LD_VAR 0 1
25785: ARRAY
25786: PUSH
25787: LD_VAR 0 2
25791: ARRAY
25792: PUSH
25793: LD_INT 1
25795: ARRAY
25796: PPUSH
25797: LD_EXP 112
25801: PUSH
25802: LD_VAR 0 1
25806: ARRAY
25807: PUSH
25808: LD_VAR 0 2
25812: ARRAY
25813: PUSH
25814: LD_INT 2
25816: ARRAY
25817: PPUSH
25818: CALL_OW 458
25822: AND
25823: IFFALSE 25917
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25825: LD_EXP 112
25829: PUSH
25830: LD_VAR 0 1
25834: ARRAY
25835: PUSH
25836: LD_VAR 0 2
25840: ARRAY
25841: PUSH
25842: LD_INT 1
25844: ARRAY
25845: PPUSH
25846: LD_EXP 112
25850: PUSH
25851: LD_VAR 0 1
25855: ARRAY
25856: PUSH
25857: LD_VAR 0 2
25861: ARRAY
25862: PUSH
25863: LD_INT 2
25865: ARRAY
25866: PPUSH
25867: LD_VAR 0 3
25871: PPUSH
25872: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25876: LD_ADDR_EXP 112
25880: PUSH
25881: LD_EXP 112
25885: PPUSH
25886: LD_VAR 0 1
25890: PPUSH
25891: LD_EXP 112
25895: PUSH
25896: LD_VAR 0 1
25900: ARRAY
25901: PPUSH
25902: LD_VAR 0 2
25906: PPUSH
25907: CALL_OW 3
25911: PPUSH
25912: CALL_OW 1
25916: ST_TO_ADDR
// end ; end ;
25917: GO 25668
25919: POP
25920: POP
// end ;
25921: GO 25586
25923: POP
25924: POP
// end ;
25925: PPOPN 4
25927: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25928: LD_INT 0
25930: PPUSH
25931: PPUSH
// result := false ;
25932: LD_ADDR_VAR 0 4
25936: PUSH
25937: LD_INT 0
25939: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25940: LD_VAR 0 1
25944: PPUSH
25945: CALL_OW 264
25949: PUSH
25950: LD_EXP 32
25954: EQUAL
25955: NOT
25956: IFFALSE 25960
// exit ;
25958: GO 26200
// index := GetElementIndex ( minersList , unit ) ;
25960: LD_ADDR_VAR 0 5
25964: PUSH
25965: LD_EXP 111
25969: PPUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: CALL 32184 0 2
25979: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25980: LD_EXP 112
25984: PUSH
25985: LD_VAR 0 5
25989: ARRAY
25990: PUSH
25991: LD_EXP 113
25995: GREATEREQUAL
25996: IFFALSE 26000
// exit ;
25998: GO 26200
// ComMoveXY ( unit , x , y ) ;
26000: LD_VAR 0 1
26004: PPUSH
26005: LD_VAR 0 2
26009: PPUSH
26010: LD_VAR 0 3
26014: PPUSH
26015: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26019: LD_INT 35
26021: PPUSH
26022: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26026: LD_VAR 0 1
26030: PPUSH
26031: LD_VAR 0 2
26035: PPUSH
26036: LD_VAR 0 3
26040: PPUSH
26041: CALL 62956 0 3
26045: NOT
26046: PUSH
26047: LD_VAR 0 1
26051: PPUSH
26052: CALL_OW 314
26056: AND
26057: IFFALSE 26061
// exit ;
26059: GO 26200
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26061: LD_VAR 0 2
26065: PPUSH
26066: LD_VAR 0 3
26070: PPUSH
26071: CALL_OW 428
26075: PUSH
26076: LD_VAR 0 1
26080: EQUAL
26081: PUSH
26082: LD_VAR 0 1
26086: PPUSH
26087: CALL_OW 314
26091: NOT
26092: AND
26093: IFFALSE 26019
// PlaySoundXY ( x , y , PlantMine ) ;
26095: LD_VAR 0 2
26099: PPUSH
26100: LD_VAR 0 3
26104: PPUSH
26105: LD_STRING PlantMine
26107: PPUSH
26108: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26112: LD_VAR 0 2
26116: PPUSH
26117: LD_VAR 0 3
26121: PPUSH
26122: LD_VAR 0 1
26126: PPUSH
26127: CALL_OW 255
26131: PPUSH
26132: LD_INT 0
26134: PPUSH
26135: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26139: LD_ADDR_EXP 112
26143: PUSH
26144: LD_EXP 112
26148: PPUSH
26149: LD_VAR 0 5
26153: PUSH
26154: LD_EXP 112
26158: PUSH
26159: LD_VAR 0 5
26163: ARRAY
26164: PUSH
26165: LD_INT 1
26167: PLUS
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PPUSH
26173: LD_VAR 0 2
26177: PUSH
26178: LD_VAR 0 3
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PPUSH
26187: CALL 32399 0 3
26191: ST_TO_ADDR
// result := true ;
26192: LD_ADDR_VAR 0 4
26196: PUSH
26197: LD_INT 1
26199: ST_TO_ADDR
// end ;
26200: LD_VAR 0 4
26204: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26205: LD_INT 0
26207: PPUSH
26208: PPUSH
26209: PPUSH
// if not unit in minersList then
26210: LD_VAR 0 1
26214: PUSH
26215: LD_EXP 111
26219: IN
26220: NOT
26221: IFFALSE 26225
// exit ;
26223: GO 26617
// index := GetElementIndex ( minersList , unit ) ;
26225: LD_ADDR_VAR 0 6
26229: PUSH
26230: LD_EXP 111
26234: PPUSH
26235: LD_VAR 0 1
26239: PPUSH
26240: CALL 32184 0 2
26244: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26245: LD_ADDR_VAR 0 5
26249: PUSH
26250: DOUBLE
26251: LD_EXP 112
26255: PUSH
26256: LD_VAR 0 6
26260: ARRAY
26261: INC
26262: ST_TO_ADDR
26263: LD_INT 1
26265: PUSH
26266: FOR_DOWNTO
26267: IFFALSE 26428
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26269: LD_EXP 112
26273: PUSH
26274: LD_VAR 0 6
26278: ARRAY
26279: PUSH
26280: LD_VAR 0 5
26284: ARRAY
26285: PUSH
26286: LD_INT 1
26288: ARRAY
26289: PUSH
26290: LD_VAR 0 2
26294: EQUAL
26295: PUSH
26296: LD_EXP 112
26300: PUSH
26301: LD_VAR 0 6
26305: ARRAY
26306: PUSH
26307: LD_VAR 0 5
26311: ARRAY
26312: PUSH
26313: LD_INT 2
26315: ARRAY
26316: PUSH
26317: LD_VAR 0 3
26321: EQUAL
26322: AND
26323: IFFALSE 26426
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26325: LD_EXP 112
26329: PUSH
26330: LD_VAR 0 6
26334: ARRAY
26335: PUSH
26336: LD_VAR 0 5
26340: ARRAY
26341: PUSH
26342: LD_INT 1
26344: ARRAY
26345: PPUSH
26346: LD_EXP 112
26350: PUSH
26351: LD_VAR 0 6
26355: ARRAY
26356: PUSH
26357: LD_VAR 0 5
26361: ARRAY
26362: PUSH
26363: LD_INT 2
26365: ARRAY
26366: PPUSH
26367: LD_VAR 0 1
26371: PPUSH
26372: CALL_OW 255
26376: PPUSH
26377: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26381: LD_ADDR_EXP 112
26385: PUSH
26386: LD_EXP 112
26390: PPUSH
26391: LD_VAR 0 6
26395: PPUSH
26396: LD_EXP 112
26400: PUSH
26401: LD_VAR 0 6
26405: ARRAY
26406: PPUSH
26407: LD_VAR 0 5
26411: PPUSH
26412: CALL_OW 3
26416: PPUSH
26417: CALL_OW 1
26421: ST_TO_ADDR
// exit ;
26422: POP
26423: POP
26424: GO 26617
// end ; end ;
26426: GO 26266
26428: POP
26429: POP
// for i := minerMinesList [ index ] downto 1 do
26430: LD_ADDR_VAR 0 5
26434: PUSH
26435: DOUBLE
26436: LD_EXP 112
26440: PUSH
26441: LD_VAR 0 6
26445: ARRAY
26446: INC
26447: ST_TO_ADDR
26448: LD_INT 1
26450: PUSH
26451: FOR_DOWNTO
26452: IFFALSE 26615
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26454: LD_EXP 112
26458: PUSH
26459: LD_VAR 0 6
26463: ARRAY
26464: PUSH
26465: LD_VAR 0 5
26469: ARRAY
26470: PUSH
26471: LD_INT 1
26473: ARRAY
26474: PPUSH
26475: LD_EXP 112
26479: PUSH
26480: LD_VAR 0 6
26484: ARRAY
26485: PUSH
26486: LD_VAR 0 5
26490: ARRAY
26491: PUSH
26492: LD_INT 2
26494: ARRAY
26495: PPUSH
26496: LD_VAR 0 2
26500: PPUSH
26501: LD_VAR 0 3
26505: PPUSH
26506: CALL_OW 298
26510: PUSH
26511: LD_INT 6
26513: LESS
26514: IFFALSE 26613
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26516: LD_EXP 112
26520: PUSH
26521: LD_VAR 0 6
26525: ARRAY
26526: PUSH
26527: LD_VAR 0 5
26531: ARRAY
26532: PUSH
26533: LD_INT 1
26535: ARRAY
26536: PPUSH
26537: LD_EXP 112
26541: PUSH
26542: LD_VAR 0 6
26546: ARRAY
26547: PUSH
26548: LD_VAR 0 5
26552: ARRAY
26553: PUSH
26554: LD_INT 2
26556: ARRAY
26557: PPUSH
26558: LD_VAR 0 1
26562: PPUSH
26563: CALL_OW 255
26567: PPUSH
26568: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26572: LD_ADDR_EXP 112
26576: PUSH
26577: LD_EXP 112
26581: PPUSH
26582: LD_VAR 0 6
26586: PPUSH
26587: LD_EXP 112
26591: PUSH
26592: LD_VAR 0 6
26596: ARRAY
26597: PPUSH
26598: LD_VAR 0 5
26602: PPUSH
26603: CALL_OW 3
26607: PPUSH
26608: CALL_OW 1
26612: ST_TO_ADDR
// end ; end ;
26613: GO 26451
26615: POP
26616: POP
// end ;
26617: LD_VAR 0 4
26621: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26622: LD_INT 0
26624: PPUSH
26625: PPUSH
26626: PPUSH
26627: PPUSH
26628: PPUSH
26629: PPUSH
26630: PPUSH
26631: PPUSH
26632: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26633: LD_VAR 0 1
26637: PPUSH
26638: CALL_OW 264
26642: PUSH
26643: LD_EXP 32
26647: EQUAL
26648: NOT
26649: PUSH
26650: LD_VAR 0 1
26654: PUSH
26655: LD_EXP 111
26659: IN
26660: NOT
26661: OR
26662: IFFALSE 26666
// exit ;
26664: GO 26988
// index := GetElementIndex ( minersList , unit ) ;
26666: LD_ADDR_VAR 0 6
26670: PUSH
26671: LD_EXP 111
26675: PPUSH
26676: LD_VAR 0 1
26680: PPUSH
26681: CALL 32184 0 2
26685: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26686: LD_ADDR_VAR 0 8
26690: PUSH
26691: LD_EXP 113
26695: PUSH
26696: LD_EXP 112
26700: PUSH
26701: LD_VAR 0 6
26705: ARRAY
26706: MINUS
26707: ST_TO_ADDR
// if not minesFreeAmount then
26708: LD_VAR 0 8
26712: NOT
26713: IFFALSE 26717
// exit ;
26715: GO 26988
// tmp := [ ] ;
26717: LD_ADDR_VAR 0 7
26721: PUSH
26722: EMPTY
26723: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26724: LD_ADDR_VAR 0 5
26728: PUSH
26729: DOUBLE
26730: LD_INT 1
26732: DEC
26733: ST_TO_ADDR
26734: LD_VAR 0 8
26738: PUSH
26739: FOR_TO
26740: IFFALSE 26935
// begin _d := rand ( 0 , 5 ) ;
26742: LD_ADDR_VAR 0 11
26746: PUSH
26747: LD_INT 0
26749: PPUSH
26750: LD_INT 5
26752: PPUSH
26753: CALL_OW 12
26757: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26758: LD_ADDR_VAR 0 12
26762: PUSH
26763: LD_INT 2
26765: PPUSH
26766: LD_INT 6
26768: PPUSH
26769: CALL_OW 12
26773: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26774: LD_ADDR_VAR 0 9
26778: PUSH
26779: LD_VAR 0 2
26783: PPUSH
26784: LD_VAR 0 11
26788: PPUSH
26789: LD_VAR 0 12
26793: PPUSH
26794: CALL_OW 272
26798: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26799: LD_ADDR_VAR 0 10
26803: PUSH
26804: LD_VAR 0 3
26808: PPUSH
26809: LD_VAR 0 11
26813: PPUSH
26814: LD_VAR 0 12
26818: PPUSH
26819: CALL_OW 273
26823: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26824: LD_VAR 0 9
26828: PPUSH
26829: LD_VAR 0 10
26833: PPUSH
26834: CALL_OW 488
26838: PUSH
26839: LD_VAR 0 9
26843: PUSH
26844: LD_VAR 0 10
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_VAR 0 7
26857: IN
26858: NOT
26859: AND
26860: PUSH
26861: LD_VAR 0 9
26865: PPUSH
26866: LD_VAR 0 10
26870: PPUSH
26871: CALL_OW 458
26875: NOT
26876: AND
26877: IFFALSE 26919
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26879: LD_ADDR_VAR 0 7
26883: PUSH
26884: LD_VAR 0 7
26888: PPUSH
26889: LD_VAR 0 7
26893: PUSH
26894: LD_INT 1
26896: PLUS
26897: PPUSH
26898: LD_VAR 0 9
26902: PUSH
26903: LD_VAR 0 10
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PPUSH
26912: CALL_OW 1
26916: ST_TO_ADDR
26917: GO 26933
// i := i - 1 ;
26919: LD_ADDR_VAR 0 5
26923: PUSH
26924: LD_VAR 0 5
26928: PUSH
26929: LD_INT 1
26931: MINUS
26932: ST_TO_ADDR
// end ;
26933: GO 26739
26935: POP
26936: POP
// for i in tmp do
26937: LD_ADDR_VAR 0 5
26941: PUSH
26942: LD_VAR 0 7
26946: PUSH
26947: FOR_IN
26948: IFFALSE 26986
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26950: LD_VAR 0 1
26954: PPUSH
26955: LD_VAR 0 5
26959: PUSH
26960: LD_INT 1
26962: ARRAY
26963: PPUSH
26964: LD_VAR 0 5
26968: PUSH
26969: LD_INT 2
26971: ARRAY
26972: PPUSH
26973: CALL 25928 0 3
26977: NOT
26978: IFFALSE 26984
// exit ;
26980: POP
26981: POP
26982: GO 26988
26984: GO 26947
26986: POP
26987: POP
// end ;
26988: LD_VAR 0 4
26992: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26993: LD_INT 0
26995: PPUSH
26996: PPUSH
26997: PPUSH
26998: PPUSH
26999: PPUSH
27000: PPUSH
27001: PPUSH
// if not GetClass ( unit ) = class_sniper then
27002: LD_VAR 0 1
27006: PPUSH
27007: CALL_OW 257
27011: PUSH
27012: LD_INT 5
27014: EQUAL
27015: NOT
27016: IFFALSE 27020
// exit ;
27018: GO 27408
// dist := 8 ;
27020: LD_ADDR_VAR 0 5
27024: PUSH
27025: LD_INT 8
27027: ST_TO_ADDR
// viewRange := 12 ;
27028: LD_ADDR_VAR 0 7
27032: PUSH
27033: LD_INT 12
27035: ST_TO_ADDR
// side := GetSide ( unit ) ;
27036: LD_ADDR_VAR 0 6
27040: PUSH
27041: LD_VAR 0 1
27045: PPUSH
27046: CALL_OW 255
27050: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27051: LD_INT 61
27053: PPUSH
27054: LD_VAR 0 6
27058: PPUSH
27059: CALL_OW 321
27063: PUSH
27064: LD_INT 2
27066: EQUAL
27067: IFFALSE 27077
// viewRange := 16 ;
27069: LD_ADDR_VAR 0 7
27073: PUSH
27074: LD_INT 16
27076: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27077: LD_VAR 0 1
27081: PPUSH
27082: LD_VAR 0 2
27086: PPUSH
27087: LD_VAR 0 3
27091: PPUSH
27092: CALL_OW 297
27096: PUSH
27097: LD_VAR 0 5
27101: GREATER
27102: IFFALSE 27181
// begin ComMoveXY ( unit , x , y ) ;
27104: LD_VAR 0 1
27108: PPUSH
27109: LD_VAR 0 2
27113: PPUSH
27114: LD_VAR 0 3
27118: PPUSH
27119: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27123: LD_INT 35
27125: PPUSH
27126: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27130: LD_VAR 0 1
27134: PPUSH
27135: LD_VAR 0 2
27139: PPUSH
27140: LD_VAR 0 3
27144: PPUSH
27145: CALL 62956 0 3
27149: NOT
27150: IFFALSE 27154
// exit ;
27152: GO 27408
// until GetDistUnitXY ( unit , x , y ) < dist ;
27154: LD_VAR 0 1
27158: PPUSH
27159: LD_VAR 0 2
27163: PPUSH
27164: LD_VAR 0 3
27168: PPUSH
27169: CALL_OW 297
27173: PUSH
27174: LD_VAR 0 5
27178: LESS
27179: IFFALSE 27123
// end ; ComTurnXY ( unit , x , y ) ;
27181: LD_VAR 0 1
27185: PPUSH
27186: LD_VAR 0 2
27190: PPUSH
27191: LD_VAR 0 3
27195: PPUSH
27196: CALL_OW 118
// wait ( 5 ) ;
27200: LD_INT 5
27202: PPUSH
27203: CALL_OW 67
// _d := GetDir ( unit ) ;
27207: LD_ADDR_VAR 0 10
27211: PUSH
27212: LD_VAR 0 1
27216: PPUSH
27217: CALL_OW 254
27221: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27222: LD_ADDR_VAR 0 8
27226: PUSH
27227: LD_VAR 0 1
27231: PPUSH
27232: CALL_OW 250
27236: PPUSH
27237: LD_VAR 0 10
27241: PPUSH
27242: LD_VAR 0 5
27246: PPUSH
27247: CALL_OW 272
27251: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27252: LD_ADDR_VAR 0 9
27256: PUSH
27257: LD_VAR 0 1
27261: PPUSH
27262: CALL_OW 251
27266: PPUSH
27267: LD_VAR 0 10
27271: PPUSH
27272: LD_VAR 0 5
27276: PPUSH
27277: CALL_OW 273
27281: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27282: LD_VAR 0 8
27286: PPUSH
27287: LD_VAR 0 9
27291: PPUSH
27292: CALL_OW 488
27296: NOT
27297: IFFALSE 27301
// exit ;
27299: GO 27408
// ComAnimCustom ( unit , 1 ) ;
27301: LD_VAR 0 1
27305: PPUSH
27306: LD_INT 1
27308: PPUSH
27309: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27313: LD_VAR 0 8
27317: PPUSH
27318: LD_VAR 0 9
27322: PPUSH
27323: LD_VAR 0 6
27327: PPUSH
27328: LD_VAR 0 7
27332: PPUSH
27333: CALL_OW 330
// repeat wait ( 1 ) ;
27337: LD_INT 1
27339: PPUSH
27340: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27344: LD_VAR 0 1
27348: PPUSH
27349: CALL_OW 316
27353: PUSH
27354: LD_VAR 0 1
27358: PPUSH
27359: CALL_OW 314
27363: OR
27364: PUSH
27365: LD_VAR 0 1
27369: PPUSH
27370: CALL_OW 302
27374: NOT
27375: OR
27376: PUSH
27377: LD_VAR 0 1
27381: PPUSH
27382: CALL_OW 301
27386: OR
27387: IFFALSE 27337
// RemoveSeeing ( _x , _y , side ) ;
27389: LD_VAR 0 8
27393: PPUSH
27394: LD_VAR 0 9
27398: PPUSH
27399: LD_VAR 0 6
27403: PPUSH
27404: CALL_OW 331
// end ; end_of_file
27408: LD_VAR 0 4
27412: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27413: LD_INT 0
27415: PPUSH
27416: PPUSH
// if exist_mode then
27417: LD_VAR 0 2
27421: IFFALSE 27446
// unit := CreateCharacter ( prefix & ident ) else
27423: LD_ADDR_VAR 0 5
27427: PUSH
27428: LD_VAR 0 3
27432: PUSH
27433: LD_VAR 0 1
27437: STR
27438: PPUSH
27439: CALL_OW 34
27443: ST_TO_ADDR
27444: GO 27461
// unit := NewCharacter ( ident ) ;
27446: LD_ADDR_VAR 0 5
27450: PUSH
27451: LD_VAR 0 1
27455: PPUSH
27456: CALL_OW 25
27460: ST_TO_ADDR
// result := unit ;
27461: LD_ADDR_VAR 0 4
27465: PUSH
27466: LD_VAR 0 5
27470: ST_TO_ADDR
// end ;
27471: LD_VAR 0 4
27475: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27476: LD_INT 0
27478: PPUSH
27479: PPUSH
// if not side or not nation then
27480: LD_VAR 0 1
27484: NOT
27485: PUSH
27486: LD_VAR 0 2
27490: NOT
27491: OR
27492: IFFALSE 27496
// exit ;
27494: GO 28264
// case nation of nation_american :
27496: LD_VAR 0 2
27500: PUSH
27501: LD_INT 1
27503: DOUBLE
27504: EQUAL
27505: IFTRUE 27509
27507: GO 27723
27509: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27510: LD_ADDR_VAR 0 4
27514: PUSH
27515: LD_INT 35
27517: PUSH
27518: LD_INT 45
27520: PUSH
27521: LD_INT 46
27523: PUSH
27524: LD_INT 47
27526: PUSH
27527: LD_INT 82
27529: PUSH
27530: LD_INT 83
27532: PUSH
27533: LD_INT 84
27535: PUSH
27536: LD_INT 85
27538: PUSH
27539: LD_INT 86
27541: PUSH
27542: LD_INT 1
27544: PUSH
27545: LD_INT 2
27547: PUSH
27548: LD_INT 6
27550: PUSH
27551: LD_INT 15
27553: PUSH
27554: LD_INT 16
27556: PUSH
27557: LD_INT 7
27559: PUSH
27560: LD_INT 12
27562: PUSH
27563: LD_INT 13
27565: PUSH
27566: LD_INT 10
27568: PUSH
27569: LD_INT 14
27571: PUSH
27572: LD_INT 20
27574: PUSH
27575: LD_INT 21
27577: PUSH
27578: LD_INT 22
27580: PUSH
27581: LD_INT 25
27583: PUSH
27584: LD_INT 32
27586: PUSH
27587: LD_INT 27
27589: PUSH
27590: LD_INT 36
27592: PUSH
27593: LD_INT 69
27595: PUSH
27596: LD_INT 39
27598: PUSH
27599: LD_INT 34
27601: PUSH
27602: LD_INT 40
27604: PUSH
27605: LD_INT 48
27607: PUSH
27608: LD_INT 49
27610: PUSH
27611: LD_INT 50
27613: PUSH
27614: LD_INT 51
27616: PUSH
27617: LD_INT 52
27619: PUSH
27620: LD_INT 53
27622: PUSH
27623: LD_INT 54
27625: PUSH
27626: LD_INT 55
27628: PUSH
27629: LD_INT 56
27631: PUSH
27632: LD_INT 57
27634: PUSH
27635: LD_INT 58
27637: PUSH
27638: LD_INT 59
27640: PUSH
27641: LD_INT 60
27643: PUSH
27644: LD_INT 61
27646: PUSH
27647: LD_INT 62
27649: PUSH
27650: LD_INT 80
27652: PUSH
27653: LD_INT 82
27655: PUSH
27656: LD_INT 83
27658: PUSH
27659: LD_INT 84
27661: PUSH
27662: LD_INT 85
27664: PUSH
27665: LD_INT 86
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: ST_TO_ADDR
27721: GO 28188
27723: LD_INT 2
27725: DOUBLE
27726: EQUAL
27727: IFTRUE 27731
27729: GO 27957
27731: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27732: LD_ADDR_VAR 0 4
27736: PUSH
27737: LD_INT 35
27739: PUSH
27740: LD_INT 45
27742: PUSH
27743: LD_INT 46
27745: PUSH
27746: LD_INT 47
27748: PUSH
27749: LD_INT 82
27751: PUSH
27752: LD_INT 83
27754: PUSH
27755: LD_INT 84
27757: PUSH
27758: LD_INT 85
27760: PUSH
27761: LD_INT 87
27763: PUSH
27764: LD_INT 70
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: LD_INT 11
27772: PUSH
27773: LD_INT 3
27775: PUSH
27776: LD_INT 4
27778: PUSH
27779: LD_INT 5
27781: PUSH
27782: LD_INT 6
27784: PUSH
27785: LD_INT 15
27787: PUSH
27788: LD_INT 18
27790: PUSH
27791: LD_INT 7
27793: PUSH
27794: LD_INT 17
27796: PUSH
27797: LD_INT 8
27799: PUSH
27800: LD_INT 20
27802: PUSH
27803: LD_INT 21
27805: PUSH
27806: LD_INT 22
27808: PUSH
27809: LD_INT 72
27811: PUSH
27812: LD_INT 26
27814: PUSH
27815: LD_INT 69
27817: PUSH
27818: LD_INT 39
27820: PUSH
27821: LD_INT 40
27823: PUSH
27824: LD_INT 41
27826: PUSH
27827: LD_INT 42
27829: PUSH
27830: LD_INT 43
27832: PUSH
27833: LD_INT 48
27835: PUSH
27836: LD_INT 49
27838: PUSH
27839: LD_INT 50
27841: PUSH
27842: LD_INT 51
27844: PUSH
27845: LD_INT 52
27847: PUSH
27848: LD_INT 53
27850: PUSH
27851: LD_INT 54
27853: PUSH
27854: LD_INT 55
27856: PUSH
27857: LD_INT 56
27859: PUSH
27860: LD_INT 60
27862: PUSH
27863: LD_INT 61
27865: PUSH
27866: LD_INT 62
27868: PUSH
27869: LD_INT 66
27871: PUSH
27872: LD_INT 67
27874: PUSH
27875: LD_INT 68
27877: PUSH
27878: LD_INT 81
27880: PUSH
27881: LD_INT 82
27883: PUSH
27884: LD_INT 83
27886: PUSH
27887: LD_INT 84
27889: PUSH
27890: LD_INT 85
27892: PUSH
27893: LD_INT 87
27895: PUSH
27896: LD_INT 88
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: ST_TO_ADDR
27955: GO 28188
27957: LD_INT 3
27959: DOUBLE
27960: EQUAL
27961: IFTRUE 27965
27963: GO 28187
27965: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27966: LD_ADDR_VAR 0 4
27970: PUSH
27971: LD_INT 46
27973: PUSH
27974: LD_INT 47
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: LD_INT 2
27982: PUSH
27983: LD_INT 82
27985: PUSH
27986: LD_INT 83
27988: PUSH
27989: LD_INT 84
27991: PUSH
27992: LD_INT 85
27994: PUSH
27995: LD_INT 86
27997: PUSH
27998: LD_INT 11
28000: PUSH
28001: LD_INT 9
28003: PUSH
28004: LD_INT 20
28006: PUSH
28007: LD_INT 19
28009: PUSH
28010: LD_INT 21
28012: PUSH
28013: LD_INT 24
28015: PUSH
28016: LD_INT 22
28018: PUSH
28019: LD_INT 25
28021: PUSH
28022: LD_INT 28
28024: PUSH
28025: LD_INT 29
28027: PUSH
28028: LD_INT 30
28030: PUSH
28031: LD_INT 31
28033: PUSH
28034: LD_INT 37
28036: PUSH
28037: LD_INT 38
28039: PUSH
28040: LD_INT 32
28042: PUSH
28043: LD_INT 27
28045: PUSH
28046: LD_INT 33
28048: PUSH
28049: LD_INT 69
28051: PUSH
28052: LD_INT 39
28054: PUSH
28055: LD_INT 34
28057: PUSH
28058: LD_INT 40
28060: PUSH
28061: LD_INT 71
28063: PUSH
28064: LD_INT 23
28066: PUSH
28067: LD_INT 44
28069: PUSH
28070: LD_INT 48
28072: PUSH
28073: LD_INT 49
28075: PUSH
28076: LD_INT 50
28078: PUSH
28079: LD_INT 51
28081: PUSH
28082: LD_INT 52
28084: PUSH
28085: LD_INT 53
28087: PUSH
28088: LD_INT 54
28090: PUSH
28091: LD_INT 55
28093: PUSH
28094: LD_INT 56
28096: PUSH
28097: LD_INT 57
28099: PUSH
28100: LD_INT 58
28102: PUSH
28103: LD_INT 59
28105: PUSH
28106: LD_INT 63
28108: PUSH
28109: LD_INT 64
28111: PUSH
28112: LD_INT 65
28114: PUSH
28115: LD_INT 82
28117: PUSH
28118: LD_INT 83
28120: PUSH
28121: LD_INT 84
28123: PUSH
28124: LD_INT 85
28126: PUSH
28127: LD_INT 86
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: ST_TO_ADDR
28185: GO 28188
28187: POP
// if state > - 1 and state < 3 then
28188: LD_VAR 0 3
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: GREATER
28197: PUSH
28198: LD_VAR 0 3
28202: PUSH
28203: LD_INT 3
28205: LESS
28206: AND
28207: IFFALSE 28264
// for i in result do
28209: LD_ADDR_VAR 0 5
28213: PUSH
28214: LD_VAR 0 4
28218: PUSH
28219: FOR_IN
28220: IFFALSE 28262
// if GetTech ( i , side ) <> state then
28222: LD_VAR 0 5
28226: PPUSH
28227: LD_VAR 0 1
28231: PPUSH
28232: CALL_OW 321
28236: PUSH
28237: LD_VAR 0 3
28241: NONEQUAL
28242: IFFALSE 28260
// result := result diff i ;
28244: LD_ADDR_VAR 0 4
28248: PUSH
28249: LD_VAR 0 4
28253: PUSH
28254: LD_VAR 0 5
28258: DIFF
28259: ST_TO_ADDR
28260: GO 28219
28262: POP
28263: POP
// end ;
28264: LD_VAR 0 4
28268: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28269: LD_INT 0
28271: PPUSH
28272: PPUSH
28273: PPUSH
// result := true ;
28274: LD_ADDR_VAR 0 3
28278: PUSH
28279: LD_INT 1
28281: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28282: LD_ADDR_VAR 0 5
28286: PUSH
28287: LD_VAR 0 2
28291: PPUSH
28292: CALL_OW 480
28296: ST_TO_ADDR
// if not tmp then
28297: LD_VAR 0 5
28301: NOT
28302: IFFALSE 28306
// exit ;
28304: GO 28355
// for i in tmp do
28306: LD_ADDR_VAR 0 4
28310: PUSH
28311: LD_VAR 0 5
28315: PUSH
28316: FOR_IN
28317: IFFALSE 28353
// if GetTech ( i , side ) <> state_researched then
28319: LD_VAR 0 4
28323: PPUSH
28324: LD_VAR 0 1
28328: PPUSH
28329: CALL_OW 321
28333: PUSH
28334: LD_INT 2
28336: NONEQUAL
28337: IFFALSE 28351
// begin result := false ;
28339: LD_ADDR_VAR 0 3
28343: PUSH
28344: LD_INT 0
28346: ST_TO_ADDR
// exit ;
28347: POP
28348: POP
28349: GO 28355
// end ;
28351: GO 28316
28353: POP
28354: POP
// end ;
28355: LD_VAR 0 3
28359: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28360: LD_INT 0
28362: PPUSH
28363: PPUSH
28364: PPUSH
28365: PPUSH
28366: PPUSH
28367: PPUSH
28368: PPUSH
28369: PPUSH
28370: PPUSH
28371: PPUSH
28372: PPUSH
28373: PPUSH
28374: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28375: LD_VAR 0 1
28379: NOT
28380: PUSH
28381: LD_VAR 0 1
28385: PPUSH
28386: CALL_OW 257
28390: PUSH
28391: LD_INT 9
28393: NONEQUAL
28394: OR
28395: IFFALSE 28399
// exit ;
28397: GO 28972
// side := GetSide ( unit ) ;
28399: LD_ADDR_VAR 0 9
28403: PUSH
28404: LD_VAR 0 1
28408: PPUSH
28409: CALL_OW 255
28413: ST_TO_ADDR
// tech_space := tech_spacanom ;
28414: LD_ADDR_VAR 0 12
28418: PUSH
28419: LD_INT 29
28421: ST_TO_ADDR
// tech_time := tech_taurad ;
28422: LD_ADDR_VAR 0 13
28426: PUSH
28427: LD_INT 28
28429: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28430: LD_ADDR_VAR 0 11
28434: PUSH
28435: LD_VAR 0 1
28439: PPUSH
28440: CALL_OW 310
28444: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28445: LD_VAR 0 11
28449: PPUSH
28450: CALL_OW 247
28454: PUSH
28455: LD_INT 2
28457: EQUAL
28458: IFFALSE 28462
// exit ;
28460: GO 28972
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28462: LD_ADDR_VAR 0 8
28466: PUSH
28467: LD_INT 81
28469: PUSH
28470: LD_VAR 0 9
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 3
28481: PUSH
28482: LD_INT 21
28484: PUSH
28485: LD_INT 3
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PPUSH
28500: CALL_OW 69
28504: ST_TO_ADDR
// if not tmp then
28505: LD_VAR 0 8
28509: NOT
28510: IFFALSE 28514
// exit ;
28512: GO 28972
// if in_unit then
28514: LD_VAR 0 11
28518: IFFALSE 28542
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28520: LD_ADDR_VAR 0 10
28524: PUSH
28525: LD_VAR 0 8
28529: PPUSH
28530: LD_VAR 0 11
28534: PPUSH
28535: CALL_OW 74
28539: ST_TO_ADDR
28540: GO 28562
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28542: LD_ADDR_VAR 0 10
28546: PUSH
28547: LD_VAR 0 8
28551: PPUSH
28552: LD_VAR 0 1
28556: PPUSH
28557: CALL_OW 74
28561: ST_TO_ADDR
// if not enemy then
28562: LD_VAR 0 10
28566: NOT
28567: IFFALSE 28571
// exit ;
28569: GO 28972
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28571: LD_VAR 0 11
28575: PUSH
28576: LD_VAR 0 11
28580: PPUSH
28581: LD_VAR 0 10
28585: PPUSH
28586: CALL_OW 296
28590: PUSH
28591: LD_INT 13
28593: GREATER
28594: AND
28595: PUSH
28596: LD_VAR 0 1
28600: PPUSH
28601: LD_VAR 0 10
28605: PPUSH
28606: CALL_OW 296
28610: PUSH
28611: LD_INT 12
28613: GREATER
28614: OR
28615: IFFALSE 28619
// exit ;
28617: GO 28972
// missile := [ 1 ] ;
28619: LD_ADDR_VAR 0 14
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: EMPTY
28628: LIST
28629: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28630: LD_VAR 0 9
28634: PPUSH
28635: LD_VAR 0 12
28639: PPUSH
28640: CALL_OW 325
28644: IFFALSE 28673
// missile := Insert ( missile , missile + 1 , 2 ) ;
28646: LD_ADDR_VAR 0 14
28650: PUSH
28651: LD_VAR 0 14
28655: PPUSH
28656: LD_VAR 0 14
28660: PUSH
28661: LD_INT 1
28663: PLUS
28664: PPUSH
28665: LD_INT 2
28667: PPUSH
28668: CALL_OW 2
28672: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28673: LD_VAR 0 9
28677: PPUSH
28678: LD_VAR 0 13
28682: PPUSH
28683: CALL_OW 325
28687: PUSH
28688: LD_VAR 0 10
28692: PPUSH
28693: CALL_OW 255
28697: PPUSH
28698: LD_VAR 0 13
28702: PPUSH
28703: CALL_OW 325
28707: NOT
28708: AND
28709: IFFALSE 28738
// missile := Insert ( missile , missile + 1 , 3 ) ;
28711: LD_ADDR_VAR 0 14
28715: PUSH
28716: LD_VAR 0 14
28720: PPUSH
28721: LD_VAR 0 14
28725: PUSH
28726: LD_INT 1
28728: PLUS
28729: PPUSH
28730: LD_INT 3
28732: PPUSH
28733: CALL_OW 2
28737: ST_TO_ADDR
// if missile < 2 then
28738: LD_VAR 0 14
28742: PUSH
28743: LD_INT 2
28745: LESS
28746: IFFALSE 28750
// exit ;
28748: GO 28972
// x := GetX ( enemy ) ;
28750: LD_ADDR_VAR 0 4
28754: PUSH
28755: LD_VAR 0 10
28759: PPUSH
28760: CALL_OW 250
28764: ST_TO_ADDR
// y := GetY ( enemy ) ;
28765: LD_ADDR_VAR 0 5
28769: PUSH
28770: LD_VAR 0 10
28774: PPUSH
28775: CALL_OW 251
28779: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28780: LD_ADDR_VAR 0 6
28784: PUSH
28785: LD_VAR 0 4
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PPUSH
28794: LD_INT 1
28796: PPUSH
28797: CALL_OW 12
28801: PLUS
28802: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28803: LD_ADDR_VAR 0 7
28807: PUSH
28808: LD_VAR 0 5
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PPUSH
28817: LD_INT 1
28819: PPUSH
28820: CALL_OW 12
28824: PLUS
28825: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28826: LD_VAR 0 6
28830: PPUSH
28831: LD_VAR 0 7
28835: PPUSH
28836: CALL_OW 488
28840: NOT
28841: IFFALSE 28863
// begin _x := x ;
28843: LD_ADDR_VAR 0 6
28847: PUSH
28848: LD_VAR 0 4
28852: ST_TO_ADDR
// _y := y ;
28853: LD_ADDR_VAR 0 7
28857: PUSH
28858: LD_VAR 0 5
28862: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28863: LD_ADDR_VAR 0 3
28867: PUSH
28868: LD_INT 1
28870: PPUSH
28871: LD_VAR 0 14
28875: PPUSH
28876: CALL_OW 12
28880: ST_TO_ADDR
// case i of 1 :
28881: LD_VAR 0 3
28885: PUSH
28886: LD_INT 1
28888: DOUBLE
28889: EQUAL
28890: IFTRUE 28894
28892: GO 28911
28894: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28895: LD_VAR 0 1
28899: PPUSH
28900: LD_VAR 0 10
28904: PPUSH
28905: CALL_OW 115
28909: GO 28972
28911: LD_INT 2
28913: DOUBLE
28914: EQUAL
28915: IFTRUE 28919
28917: GO 28941
28919: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28920: LD_VAR 0 1
28924: PPUSH
28925: LD_VAR 0 6
28929: PPUSH
28930: LD_VAR 0 7
28934: PPUSH
28935: CALL_OW 153
28939: GO 28972
28941: LD_INT 3
28943: DOUBLE
28944: EQUAL
28945: IFTRUE 28949
28947: GO 28971
28949: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28950: LD_VAR 0 1
28954: PPUSH
28955: LD_VAR 0 6
28959: PPUSH
28960: LD_VAR 0 7
28964: PPUSH
28965: CALL_OW 154
28969: GO 28972
28971: POP
// end ;
28972: LD_VAR 0 2
28976: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28977: LD_INT 0
28979: PPUSH
28980: PPUSH
28981: PPUSH
28982: PPUSH
28983: PPUSH
28984: PPUSH
// if not unit or not building then
28985: LD_VAR 0 1
28989: NOT
28990: PUSH
28991: LD_VAR 0 2
28995: NOT
28996: OR
28997: IFFALSE 29001
// exit ;
28999: GO 29159
// x := GetX ( building ) ;
29001: LD_ADDR_VAR 0 5
29005: PUSH
29006: LD_VAR 0 2
29010: PPUSH
29011: CALL_OW 250
29015: ST_TO_ADDR
// y := GetY ( building ) ;
29016: LD_ADDR_VAR 0 6
29020: PUSH
29021: LD_VAR 0 2
29025: PPUSH
29026: CALL_OW 251
29030: ST_TO_ADDR
// for i = 0 to 5 do
29031: LD_ADDR_VAR 0 4
29035: PUSH
29036: DOUBLE
29037: LD_INT 0
29039: DEC
29040: ST_TO_ADDR
29041: LD_INT 5
29043: PUSH
29044: FOR_TO
29045: IFFALSE 29157
// begin _x := ShiftX ( x , i , 3 ) ;
29047: LD_ADDR_VAR 0 7
29051: PUSH
29052: LD_VAR 0 5
29056: PPUSH
29057: LD_VAR 0 4
29061: PPUSH
29062: LD_INT 3
29064: PPUSH
29065: CALL_OW 272
29069: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29070: LD_ADDR_VAR 0 8
29074: PUSH
29075: LD_VAR 0 6
29079: PPUSH
29080: LD_VAR 0 4
29084: PPUSH
29085: LD_INT 3
29087: PPUSH
29088: CALL_OW 273
29092: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29093: LD_VAR 0 7
29097: PPUSH
29098: LD_VAR 0 8
29102: PPUSH
29103: CALL_OW 488
29107: NOT
29108: IFFALSE 29112
// continue ;
29110: GO 29044
// if HexInfo ( _x , _y ) = 0 then
29112: LD_VAR 0 7
29116: PPUSH
29117: LD_VAR 0 8
29121: PPUSH
29122: CALL_OW 428
29126: PUSH
29127: LD_INT 0
29129: EQUAL
29130: IFFALSE 29155
// begin ComMoveXY ( unit , _x , _y ) ;
29132: LD_VAR 0 1
29136: PPUSH
29137: LD_VAR 0 7
29141: PPUSH
29142: LD_VAR 0 8
29146: PPUSH
29147: CALL_OW 111
// exit ;
29151: POP
29152: POP
29153: GO 29159
// end ; end ;
29155: GO 29044
29157: POP
29158: POP
// end ;
29159: LD_VAR 0 3
29163: RET
// export function ScanBase ( side , base_area ) ; begin
29164: LD_INT 0
29166: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29167: LD_ADDR_VAR 0 3
29171: PUSH
29172: LD_VAR 0 2
29176: PPUSH
29177: LD_INT 81
29179: PUSH
29180: LD_VAR 0 1
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PPUSH
29189: CALL_OW 70
29193: ST_TO_ADDR
// end ;
29194: LD_VAR 0 3
29198: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29199: LD_INT 0
29201: PPUSH
29202: PPUSH
29203: PPUSH
29204: PPUSH
// result := false ;
29205: LD_ADDR_VAR 0 2
29209: PUSH
29210: LD_INT 0
29212: ST_TO_ADDR
// side := GetSide ( unit ) ;
29213: LD_ADDR_VAR 0 3
29217: PUSH
29218: LD_VAR 0 1
29222: PPUSH
29223: CALL_OW 255
29227: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29228: LD_ADDR_VAR 0 4
29232: PUSH
29233: LD_VAR 0 1
29237: PPUSH
29238: CALL_OW 248
29242: ST_TO_ADDR
// case nat of 1 :
29243: LD_VAR 0 4
29247: PUSH
29248: LD_INT 1
29250: DOUBLE
29251: EQUAL
29252: IFTRUE 29256
29254: GO 29267
29256: POP
// tech := tech_lassight ; 2 :
29257: LD_ADDR_VAR 0 5
29261: PUSH
29262: LD_INT 12
29264: ST_TO_ADDR
29265: GO 29306
29267: LD_INT 2
29269: DOUBLE
29270: EQUAL
29271: IFTRUE 29275
29273: GO 29286
29275: POP
// tech := tech_mortar ; 3 :
29276: LD_ADDR_VAR 0 5
29280: PUSH
29281: LD_INT 41
29283: ST_TO_ADDR
29284: GO 29306
29286: LD_INT 3
29288: DOUBLE
29289: EQUAL
29290: IFTRUE 29294
29292: GO 29305
29294: POP
// tech := tech_bazooka ; end ;
29295: LD_ADDR_VAR 0 5
29299: PUSH
29300: LD_INT 44
29302: ST_TO_ADDR
29303: GO 29306
29305: POP
// if Researched ( side , tech ) then
29306: LD_VAR 0 3
29310: PPUSH
29311: LD_VAR 0 5
29315: PPUSH
29316: CALL_OW 325
29320: IFFALSE 29347
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29322: LD_ADDR_VAR 0 2
29326: PUSH
29327: LD_INT 5
29329: PUSH
29330: LD_INT 8
29332: PUSH
29333: LD_INT 9
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: LIST
29340: PUSH
29341: LD_VAR 0 4
29345: ARRAY
29346: ST_TO_ADDR
// end ;
29347: LD_VAR 0 2
29351: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29352: LD_INT 0
29354: PPUSH
29355: PPUSH
29356: PPUSH
// if not mines then
29357: LD_VAR 0 2
29361: NOT
29362: IFFALSE 29366
// exit ;
29364: GO 29510
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29366: LD_ADDR_VAR 0 5
29370: PUSH
29371: LD_INT 81
29373: PUSH
29374: LD_VAR 0 1
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 3
29385: PUSH
29386: LD_INT 21
29388: PUSH
29389: LD_INT 3
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PPUSH
29404: CALL_OW 69
29408: ST_TO_ADDR
// for i in mines do
29409: LD_ADDR_VAR 0 4
29413: PUSH
29414: LD_VAR 0 2
29418: PUSH
29419: FOR_IN
29420: IFFALSE 29508
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29422: LD_VAR 0 4
29426: PUSH
29427: LD_INT 1
29429: ARRAY
29430: PPUSH
29431: LD_VAR 0 4
29435: PUSH
29436: LD_INT 2
29438: ARRAY
29439: PPUSH
29440: CALL_OW 458
29444: NOT
29445: IFFALSE 29449
// continue ;
29447: GO 29419
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29449: LD_VAR 0 4
29453: PUSH
29454: LD_INT 1
29456: ARRAY
29457: PPUSH
29458: LD_VAR 0 4
29462: PUSH
29463: LD_INT 2
29465: ARRAY
29466: PPUSH
29467: CALL_OW 428
29471: PUSH
29472: LD_VAR 0 5
29476: IN
29477: IFFALSE 29506
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29479: LD_VAR 0 4
29483: PUSH
29484: LD_INT 1
29486: ARRAY
29487: PPUSH
29488: LD_VAR 0 4
29492: PUSH
29493: LD_INT 2
29495: ARRAY
29496: PPUSH
29497: LD_VAR 0 1
29501: PPUSH
29502: CALL_OW 456
// end ;
29506: GO 29419
29508: POP
29509: POP
// end ;
29510: LD_VAR 0 3
29514: RET
// export function Count ( array ) ; var i ; begin
29515: LD_INT 0
29517: PPUSH
29518: PPUSH
// result := 0 ;
29519: LD_ADDR_VAR 0 2
29523: PUSH
29524: LD_INT 0
29526: ST_TO_ADDR
// for i in array do
29527: LD_ADDR_VAR 0 3
29531: PUSH
29532: LD_VAR 0 1
29536: PUSH
29537: FOR_IN
29538: IFFALSE 29562
// if i then
29540: LD_VAR 0 3
29544: IFFALSE 29560
// result := result + 1 ;
29546: LD_ADDR_VAR 0 2
29550: PUSH
29551: LD_VAR 0 2
29555: PUSH
29556: LD_INT 1
29558: PLUS
29559: ST_TO_ADDR
29560: GO 29537
29562: POP
29563: POP
// end ;
29564: LD_VAR 0 2
29568: RET
// export function IsEmpty ( building ) ; begin
29569: LD_INT 0
29571: PPUSH
// if not building then
29572: LD_VAR 0 1
29576: NOT
29577: IFFALSE 29581
// exit ;
29579: GO 29624
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29581: LD_ADDR_VAR 0 2
29585: PUSH
29586: LD_VAR 0 1
29590: PUSH
29591: LD_INT 22
29593: PUSH
29594: LD_VAR 0 1
29598: PPUSH
29599: CALL_OW 255
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 58
29610: PUSH
29611: EMPTY
29612: LIST
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PPUSH
29618: CALL_OW 69
29622: IN
29623: ST_TO_ADDR
// end ;
29624: LD_VAR 0 2
29628: RET
// export function IsNotFull ( building ) ; begin
29629: LD_INT 0
29631: PPUSH
// if not building then
29632: LD_VAR 0 1
29636: NOT
29637: IFFALSE 29641
// exit ;
29639: GO 29660
// result := UnitsInside ( building ) < 6 ;
29641: LD_ADDR_VAR 0 2
29645: PUSH
29646: LD_VAR 0 1
29650: PPUSH
29651: CALL_OW 313
29655: PUSH
29656: LD_INT 6
29658: LESS
29659: ST_TO_ADDR
// end ;
29660: LD_VAR 0 2
29664: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29665: LD_INT 0
29667: PPUSH
29668: PPUSH
29669: PPUSH
29670: PPUSH
// tmp := [ ] ;
29671: LD_ADDR_VAR 0 3
29675: PUSH
29676: EMPTY
29677: ST_TO_ADDR
// list := [ ] ;
29678: LD_ADDR_VAR 0 5
29682: PUSH
29683: EMPTY
29684: ST_TO_ADDR
// for i = 16 to 25 do
29685: LD_ADDR_VAR 0 4
29689: PUSH
29690: DOUBLE
29691: LD_INT 16
29693: DEC
29694: ST_TO_ADDR
29695: LD_INT 25
29697: PUSH
29698: FOR_TO
29699: IFFALSE 29772
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29701: LD_ADDR_VAR 0 3
29705: PUSH
29706: LD_VAR 0 3
29710: PUSH
29711: LD_INT 22
29713: PUSH
29714: LD_VAR 0 1
29718: PPUSH
29719: CALL_OW 255
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 91
29730: PUSH
29731: LD_VAR 0 1
29735: PUSH
29736: LD_INT 6
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 30
29746: PUSH
29747: LD_VAR 0 4
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: LIST
29760: PUSH
29761: EMPTY
29762: LIST
29763: PPUSH
29764: CALL_OW 69
29768: ADD
29769: ST_TO_ADDR
29770: GO 29698
29772: POP
29773: POP
// for i = 1 to tmp do
29774: LD_ADDR_VAR 0 4
29778: PUSH
29779: DOUBLE
29780: LD_INT 1
29782: DEC
29783: ST_TO_ADDR
29784: LD_VAR 0 3
29788: PUSH
29789: FOR_TO
29790: IFFALSE 29878
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29792: LD_ADDR_VAR 0 5
29796: PUSH
29797: LD_VAR 0 5
29801: PUSH
29802: LD_VAR 0 3
29806: PUSH
29807: LD_VAR 0 4
29811: ARRAY
29812: PPUSH
29813: CALL_OW 266
29817: PUSH
29818: LD_VAR 0 3
29822: PUSH
29823: LD_VAR 0 4
29827: ARRAY
29828: PPUSH
29829: CALL_OW 250
29833: PUSH
29834: LD_VAR 0 3
29838: PUSH
29839: LD_VAR 0 4
29843: ARRAY
29844: PPUSH
29845: CALL_OW 251
29849: PUSH
29850: LD_VAR 0 3
29854: PUSH
29855: LD_VAR 0 4
29859: ARRAY
29860: PPUSH
29861: CALL_OW 254
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: PUSH
29872: EMPTY
29873: LIST
29874: ADD
29875: ST_TO_ADDR
29876: GO 29789
29878: POP
29879: POP
// result := list ;
29880: LD_ADDR_VAR 0 2
29884: PUSH
29885: LD_VAR 0 5
29889: ST_TO_ADDR
// end ;
29890: LD_VAR 0 2
29894: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29895: LD_INT 0
29897: PPUSH
29898: PPUSH
29899: PPUSH
29900: PPUSH
29901: PPUSH
29902: PPUSH
29903: PPUSH
// if not factory then
29904: LD_VAR 0 1
29908: NOT
29909: IFFALSE 29913
// exit ;
29911: GO 30506
// if control = control_apeman then
29913: LD_VAR 0 4
29917: PUSH
29918: LD_INT 5
29920: EQUAL
29921: IFFALSE 30030
// begin tmp := UnitsInside ( factory ) ;
29923: LD_ADDR_VAR 0 8
29927: PUSH
29928: LD_VAR 0 1
29932: PPUSH
29933: CALL_OW 313
29937: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29938: LD_VAR 0 8
29942: PPUSH
29943: LD_INT 25
29945: PUSH
29946: LD_INT 12
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PPUSH
29953: CALL_OW 72
29957: NOT
29958: IFFALSE 29968
// control := control_manual ;
29960: LD_ADDR_VAR 0 4
29964: PUSH
29965: LD_INT 1
29967: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29968: LD_ADDR_VAR 0 8
29972: PUSH
29973: LD_VAR 0 1
29977: PPUSH
29978: CALL 29665 0 1
29982: ST_TO_ADDR
// if tmp then
29983: LD_VAR 0 8
29987: IFFALSE 30030
// begin for i in tmp do
29989: LD_ADDR_VAR 0 7
29993: PUSH
29994: LD_VAR 0 8
29998: PUSH
29999: FOR_IN
30000: IFFALSE 30028
// if i [ 1 ] = b_ext_radio then
30002: LD_VAR 0 7
30006: PUSH
30007: LD_INT 1
30009: ARRAY
30010: PUSH
30011: LD_INT 22
30013: EQUAL
30014: IFFALSE 30026
// begin control := control_remote ;
30016: LD_ADDR_VAR 0 4
30020: PUSH
30021: LD_INT 2
30023: ST_TO_ADDR
// break ;
30024: GO 30028
// end ;
30026: GO 29999
30028: POP
30029: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30030: LD_VAR 0 1
30034: PPUSH
30035: LD_VAR 0 2
30039: PPUSH
30040: LD_VAR 0 3
30044: PPUSH
30045: LD_VAR 0 4
30049: PPUSH
30050: LD_VAR 0 5
30054: PPUSH
30055: CALL_OW 448
30059: IFFALSE 30094
// begin result := [ chassis , engine , control , weapon ] ;
30061: LD_ADDR_VAR 0 6
30065: PUSH
30066: LD_VAR 0 2
30070: PUSH
30071: LD_VAR 0 3
30075: PUSH
30076: LD_VAR 0 4
30080: PUSH
30081: LD_VAR 0 5
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: ST_TO_ADDR
// exit ;
30092: GO 30506
// end ; _chassis := AvailableChassisList ( factory ) ;
30094: LD_ADDR_VAR 0 9
30098: PUSH
30099: LD_VAR 0 1
30103: PPUSH
30104: CALL_OW 475
30108: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30109: LD_ADDR_VAR 0 11
30113: PUSH
30114: LD_VAR 0 1
30118: PPUSH
30119: CALL_OW 476
30123: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30124: LD_ADDR_VAR 0 12
30128: PUSH
30129: LD_VAR 0 1
30133: PPUSH
30134: CALL_OW 477
30138: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30139: LD_ADDR_VAR 0 10
30143: PUSH
30144: LD_VAR 0 1
30148: PPUSH
30149: CALL_OW 478
30153: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30154: LD_VAR 0 9
30158: NOT
30159: PUSH
30160: LD_VAR 0 11
30164: NOT
30165: OR
30166: PUSH
30167: LD_VAR 0 12
30171: NOT
30172: OR
30173: PUSH
30174: LD_VAR 0 10
30178: NOT
30179: OR
30180: IFFALSE 30215
// begin result := [ chassis , engine , control , weapon ] ;
30182: LD_ADDR_VAR 0 6
30186: PUSH
30187: LD_VAR 0 2
30191: PUSH
30192: LD_VAR 0 3
30196: PUSH
30197: LD_VAR 0 4
30201: PUSH
30202: LD_VAR 0 5
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: ST_TO_ADDR
// exit ;
30213: GO 30506
// end ; if not chassis in _chassis then
30215: LD_VAR 0 2
30219: PUSH
30220: LD_VAR 0 9
30224: IN
30225: NOT
30226: IFFALSE 30252
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30228: LD_ADDR_VAR 0 2
30232: PUSH
30233: LD_VAR 0 9
30237: PUSH
30238: LD_INT 1
30240: PPUSH
30241: LD_VAR 0 9
30245: PPUSH
30246: CALL_OW 12
30250: ARRAY
30251: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30252: LD_VAR 0 2
30256: PPUSH
30257: LD_VAR 0 3
30261: PPUSH
30262: CALL 30511 0 2
30266: NOT
30267: IFFALSE 30326
// repeat engine := _engine [ 1 ] ;
30269: LD_ADDR_VAR 0 3
30273: PUSH
30274: LD_VAR 0 11
30278: PUSH
30279: LD_INT 1
30281: ARRAY
30282: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30283: LD_ADDR_VAR 0 11
30287: PUSH
30288: LD_VAR 0 11
30292: PPUSH
30293: LD_INT 1
30295: PPUSH
30296: CALL_OW 3
30300: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30301: LD_VAR 0 2
30305: PPUSH
30306: LD_VAR 0 3
30310: PPUSH
30311: CALL 30511 0 2
30315: PUSH
30316: LD_VAR 0 11
30320: PUSH
30321: EMPTY
30322: EQUAL
30323: OR
30324: IFFALSE 30269
// if not control in _control then
30326: LD_VAR 0 4
30330: PUSH
30331: LD_VAR 0 12
30335: IN
30336: NOT
30337: IFFALSE 30363
// control := _control [ rand ( 1 , _control ) ] ;
30339: LD_ADDR_VAR 0 4
30343: PUSH
30344: LD_VAR 0 12
30348: PUSH
30349: LD_INT 1
30351: PPUSH
30352: LD_VAR 0 12
30356: PPUSH
30357: CALL_OW 12
30361: ARRAY
30362: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30363: LD_VAR 0 2
30367: PPUSH
30368: LD_VAR 0 5
30372: PPUSH
30373: CALL 30731 0 2
30377: NOT
30378: IFFALSE 30437
// repeat weapon := _weapon [ 1 ] ;
30380: LD_ADDR_VAR 0 5
30384: PUSH
30385: LD_VAR 0 10
30389: PUSH
30390: LD_INT 1
30392: ARRAY
30393: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30394: LD_ADDR_VAR 0 10
30398: PUSH
30399: LD_VAR 0 10
30403: PPUSH
30404: LD_INT 1
30406: PPUSH
30407: CALL_OW 3
30411: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30412: LD_VAR 0 2
30416: PPUSH
30417: LD_VAR 0 5
30421: PPUSH
30422: CALL 30731 0 2
30426: PUSH
30427: LD_VAR 0 10
30431: PUSH
30432: EMPTY
30433: EQUAL
30434: OR
30435: IFFALSE 30380
// result := [ ] ;
30437: LD_ADDR_VAR 0 6
30441: PUSH
30442: EMPTY
30443: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30444: LD_VAR 0 1
30448: PPUSH
30449: LD_VAR 0 2
30453: PPUSH
30454: LD_VAR 0 3
30458: PPUSH
30459: LD_VAR 0 4
30463: PPUSH
30464: LD_VAR 0 5
30468: PPUSH
30469: CALL_OW 448
30473: IFFALSE 30506
// result := [ chassis , engine , control , weapon ] ;
30475: LD_ADDR_VAR 0 6
30479: PUSH
30480: LD_VAR 0 2
30484: PUSH
30485: LD_VAR 0 3
30489: PUSH
30490: LD_VAR 0 4
30494: PUSH
30495: LD_VAR 0 5
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: ST_TO_ADDR
// end ;
30506: LD_VAR 0 6
30510: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30511: LD_INT 0
30513: PPUSH
// if not chassis or not engine then
30514: LD_VAR 0 1
30518: NOT
30519: PUSH
30520: LD_VAR 0 2
30524: NOT
30525: OR
30526: IFFALSE 30530
// exit ;
30528: GO 30726
// case engine of engine_solar :
30530: LD_VAR 0 2
30534: PUSH
30535: LD_INT 2
30537: DOUBLE
30538: EQUAL
30539: IFTRUE 30543
30541: GO 30581
30543: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30544: LD_ADDR_VAR 0 3
30548: PUSH
30549: LD_INT 11
30551: PUSH
30552: LD_INT 12
30554: PUSH
30555: LD_INT 13
30557: PUSH
30558: LD_INT 14
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: LD_INT 2
30566: PUSH
30567: LD_INT 3
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: ST_TO_ADDR
30579: GO 30710
30581: LD_INT 1
30583: DOUBLE
30584: EQUAL
30585: IFTRUE 30589
30587: GO 30651
30589: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30590: LD_ADDR_VAR 0 3
30594: PUSH
30595: LD_INT 11
30597: PUSH
30598: LD_INT 12
30600: PUSH
30601: LD_INT 13
30603: PUSH
30604: LD_INT 14
30606: PUSH
30607: LD_INT 1
30609: PUSH
30610: LD_INT 2
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: LD_INT 4
30618: PUSH
30619: LD_INT 5
30621: PUSH
30622: LD_INT 21
30624: PUSH
30625: LD_INT 23
30627: PUSH
30628: LD_INT 22
30630: PUSH
30631: LD_INT 24
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: ST_TO_ADDR
30649: GO 30710
30651: LD_INT 3
30653: DOUBLE
30654: EQUAL
30655: IFTRUE 30659
30657: GO 30709
30659: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30660: LD_ADDR_VAR 0 3
30664: PUSH
30665: LD_INT 13
30667: PUSH
30668: LD_INT 14
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: LD_INT 4
30679: PUSH
30680: LD_INT 5
30682: PUSH
30683: LD_INT 21
30685: PUSH
30686: LD_INT 22
30688: PUSH
30689: LD_INT 23
30691: PUSH
30692: LD_INT 24
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: ST_TO_ADDR
30707: GO 30710
30709: POP
// result := ( chassis in result ) ;
30710: LD_ADDR_VAR 0 3
30714: PUSH
30715: LD_VAR 0 1
30719: PUSH
30720: LD_VAR 0 3
30724: IN
30725: ST_TO_ADDR
// end ;
30726: LD_VAR 0 3
30730: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30731: LD_INT 0
30733: PPUSH
// if not chassis or not weapon then
30734: LD_VAR 0 1
30738: NOT
30739: PUSH
30740: LD_VAR 0 2
30744: NOT
30745: OR
30746: IFFALSE 30750
// exit ;
30748: GO 31812
// case weapon of us_machine_gun :
30750: LD_VAR 0 2
30754: PUSH
30755: LD_INT 2
30757: DOUBLE
30758: EQUAL
30759: IFTRUE 30763
30761: GO 30793
30763: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30764: LD_ADDR_VAR 0 3
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: LD_INT 2
30774: PUSH
30775: LD_INT 3
30777: PUSH
30778: LD_INT 4
30780: PUSH
30781: LD_INT 5
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: ST_TO_ADDR
30791: GO 31796
30793: LD_INT 3
30795: DOUBLE
30796: EQUAL
30797: IFTRUE 30801
30799: GO 30831
30801: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30802: LD_ADDR_VAR 0 3
30806: PUSH
30807: LD_INT 1
30809: PUSH
30810: LD_INT 2
30812: PUSH
30813: LD_INT 3
30815: PUSH
30816: LD_INT 4
30818: PUSH
30819: LD_INT 5
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: ST_TO_ADDR
30829: GO 31796
30831: LD_INT 11
30833: DOUBLE
30834: EQUAL
30835: IFTRUE 30839
30837: GO 30869
30839: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30840: LD_ADDR_VAR 0 3
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: LD_INT 3
30853: PUSH
30854: LD_INT 4
30856: PUSH
30857: LD_INT 5
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: ST_TO_ADDR
30867: GO 31796
30869: LD_INT 4
30871: DOUBLE
30872: EQUAL
30873: IFTRUE 30877
30875: GO 30903
30877: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30878: LD_ADDR_VAR 0 3
30882: PUSH
30883: LD_INT 2
30885: PUSH
30886: LD_INT 3
30888: PUSH
30889: LD_INT 4
30891: PUSH
30892: LD_INT 5
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: ST_TO_ADDR
30901: GO 31796
30903: LD_INT 5
30905: DOUBLE
30906: EQUAL
30907: IFTRUE 30911
30909: GO 30937
30911: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30912: LD_ADDR_VAR 0 3
30916: PUSH
30917: LD_INT 2
30919: PUSH
30920: LD_INT 3
30922: PUSH
30923: LD_INT 4
30925: PUSH
30926: LD_INT 5
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: ST_TO_ADDR
30935: GO 31796
30937: LD_INT 9
30939: DOUBLE
30940: EQUAL
30941: IFTRUE 30945
30943: GO 30971
30945: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30946: LD_ADDR_VAR 0 3
30950: PUSH
30951: LD_INT 2
30953: PUSH
30954: LD_INT 3
30956: PUSH
30957: LD_INT 4
30959: PUSH
30960: LD_INT 5
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: ST_TO_ADDR
30969: GO 31796
30971: LD_INT 7
30973: DOUBLE
30974: EQUAL
30975: IFTRUE 30979
30977: GO 31005
30979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30980: LD_ADDR_VAR 0 3
30984: PUSH
30985: LD_INT 2
30987: PUSH
30988: LD_INT 3
30990: PUSH
30991: LD_INT 4
30993: PUSH
30994: LD_INT 5
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: ST_TO_ADDR
31003: GO 31796
31005: LD_INT 12
31007: DOUBLE
31008: EQUAL
31009: IFTRUE 31013
31011: GO 31039
31013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31014: LD_ADDR_VAR 0 3
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: LD_INT 3
31024: PUSH
31025: LD_INT 4
31027: PUSH
31028: LD_INT 5
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: ST_TO_ADDR
31037: GO 31796
31039: LD_INT 13
31041: DOUBLE
31042: EQUAL
31043: IFTRUE 31047
31045: GO 31073
31047: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31048: LD_ADDR_VAR 0 3
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: LD_INT 3
31058: PUSH
31059: LD_INT 4
31061: PUSH
31062: LD_INT 5
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: ST_TO_ADDR
31071: GO 31796
31073: LD_INT 14
31075: DOUBLE
31076: EQUAL
31077: IFTRUE 31081
31079: GO 31099
31081: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31082: LD_ADDR_VAR 0 3
31086: PUSH
31087: LD_INT 4
31089: PUSH
31090: LD_INT 5
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: ST_TO_ADDR
31097: GO 31796
31099: LD_INT 6
31101: DOUBLE
31102: EQUAL
31103: IFTRUE 31107
31105: GO 31125
31107: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31108: LD_ADDR_VAR 0 3
31112: PUSH
31113: LD_INT 4
31115: PUSH
31116: LD_INT 5
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: ST_TO_ADDR
31123: GO 31796
31125: LD_INT 10
31127: DOUBLE
31128: EQUAL
31129: IFTRUE 31133
31131: GO 31151
31133: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31134: LD_ADDR_VAR 0 3
31138: PUSH
31139: LD_INT 4
31141: PUSH
31142: LD_INT 5
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: ST_TO_ADDR
31149: GO 31796
31151: LD_INT 22
31153: DOUBLE
31154: EQUAL
31155: IFTRUE 31159
31157: GO 31185
31159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31160: LD_ADDR_VAR 0 3
31164: PUSH
31165: LD_INT 11
31167: PUSH
31168: LD_INT 12
31170: PUSH
31171: LD_INT 13
31173: PUSH
31174: LD_INT 14
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: ST_TO_ADDR
31183: GO 31796
31185: LD_INT 23
31187: DOUBLE
31188: EQUAL
31189: IFTRUE 31193
31191: GO 31219
31193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31194: LD_ADDR_VAR 0 3
31198: PUSH
31199: LD_INT 11
31201: PUSH
31202: LD_INT 12
31204: PUSH
31205: LD_INT 13
31207: PUSH
31208: LD_INT 14
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: ST_TO_ADDR
31217: GO 31796
31219: LD_INT 24
31221: DOUBLE
31222: EQUAL
31223: IFTRUE 31227
31225: GO 31253
31227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31228: LD_ADDR_VAR 0 3
31232: PUSH
31233: LD_INT 11
31235: PUSH
31236: LD_INT 12
31238: PUSH
31239: LD_INT 13
31241: PUSH
31242: LD_INT 14
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: ST_TO_ADDR
31251: GO 31796
31253: LD_INT 30
31255: DOUBLE
31256: EQUAL
31257: IFTRUE 31261
31259: GO 31287
31261: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31262: LD_ADDR_VAR 0 3
31266: PUSH
31267: LD_INT 11
31269: PUSH
31270: LD_INT 12
31272: PUSH
31273: LD_INT 13
31275: PUSH
31276: LD_INT 14
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: ST_TO_ADDR
31285: GO 31796
31287: LD_INT 25
31289: DOUBLE
31290: EQUAL
31291: IFTRUE 31295
31293: GO 31313
31295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31296: LD_ADDR_VAR 0 3
31300: PUSH
31301: LD_INT 13
31303: PUSH
31304: LD_INT 14
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: ST_TO_ADDR
31311: GO 31796
31313: LD_INT 27
31315: DOUBLE
31316: EQUAL
31317: IFTRUE 31321
31319: GO 31339
31321: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31322: LD_ADDR_VAR 0 3
31326: PUSH
31327: LD_INT 13
31329: PUSH
31330: LD_INT 14
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: ST_TO_ADDR
31337: GO 31796
31339: LD_EXP 30
31343: DOUBLE
31344: EQUAL
31345: IFTRUE 31349
31347: GO 31375
31349: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31350: LD_ADDR_VAR 0 3
31354: PUSH
31355: LD_INT 11
31357: PUSH
31358: LD_INT 12
31360: PUSH
31361: LD_INT 13
31363: PUSH
31364: LD_INT 14
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: ST_TO_ADDR
31373: GO 31796
31375: LD_INT 28
31377: DOUBLE
31378: EQUAL
31379: IFTRUE 31383
31381: GO 31401
31383: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31384: LD_ADDR_VAR 0 3
31388: PUSH
31389: LD_INT 13
31391: PUSH
31392: LD_INT 14
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: ST_TO_ADDR
31399: GO 31796
31401: LD_INT 29
31403: DOUBLE
31404: EQUAL
31405: IFTRUE 31409
31407: GO 31427
31409: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31410: LD_ADDR_VAR 0 3
31414: PUSH
31415: LD_INT 13
31417: PUSH
31418: LD_INT 14
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: ST_TO_ADDR
31425: GO 31796
31427: LD_INT 31
31429: DOUBLE
31430: EQUAL
31431: IFTRUE 31435
31433: GO 31453
31435: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31436: LD_ADDR_VAR 0 3
31440: PUSH
31441: LD_INT 13
31443: PUSH
31444: LD_INT 14
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: ST_TO_ADDR
31451: GO 31796
31453: LD_INT 26
31455: DOUBLE
31456: EQUAL
31457: IFTRUE 31461
31459: GO 31479
31461: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31462: LD_ADDR_VAR 0 3
31466: PUSH
31467: LD_INT 13
31469: PUSH
31470: LD_INT 14
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: ST_TO_ADDR
31477: GO 31796
31479: LD_INT 42
31481: DOUBLE
31482: EQUAL
31483: IFTRUE 31487
31485: GO 31513
31487: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31488: LD_ADDR_VAR 0 3
31492: PUSH
31493: LD_INT 21
31495: PUSH
31496: LD_INT 22
31498: PUSH
31499: LD_INT 23
31501: PUSH
31502: LD_INT 24
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: ST_TO_ADDR
31511: GO 31796
31513: LD_INT 43
31515: DOUBLE
31516: EQUAL
31517: IFTRUE 31521
31519: GO 31547
31521: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31522: LD_ADDR_VAR 0 3
31526: PUSH
31527: LD_INT 21
31529: PUSH
31530: LD_INT 22
31532: PUSH
31533: LD_INT 23
31535: PUSH
31536: LD_INT 24
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: ST_TO_ADDR
31545: GO 31796
31547: LD_INT 44
31549: DOUBLE
31550: EQUAL
31551: IFTRUE 31555
31553: GO 31581
31555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31556: LD_ADDR_VAR 0 3
31560: PUSH
31561: LD_INT 21
31563: PUSH
31564: LD_INT 22
31566: PUSH
31567: LD_INT 23
31569: PUSH
31570: LD_INT 24
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: ST_TO_ADDR
31579: GO 31796
31581: LD_INT 45
31583: DOUBLE
31584: EQUAL
31585: IFTRUE 31589
31587: GO 31615
31589: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31590: LD_ADDR_VAR 0 3
31594: PUSH
31595: LD_INT 21
31597: PUSH
31598: LD_INT 22
31600: PUSH
31601: LD_INT 23
31603: PUSH
31604: LD_INT 24
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: ST_TO_ADDR
31613: GO 31796
31615: LD_INT 49
31617: DOUBLE
31618: EQUAL
31619: IFTRUE 31623
31621: GO 31649
31623: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31624: LD_ADDR_VAR 0 3
31628: PUSH
31629: LD_INT 21
31631: PUSH
31632: LD_INT 22
31634: PUSH
31635: LD_INT 23
31637: PUSH
31638: LD_INT 24
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: ST_TO_ADDR
31647: GO 31796
31649: LD_INT 51
31651: DOUBLE
31652: EQUAL
31653: IFTRUE 31657
31655: GO 31683
31657: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31658: LD_ADDR_VAR 0 3
31662: PUSH
31663: LD_INT 21
31665: PUSH
31666: LD_INT 22
31668: PUSH
31669: LD_INT 23
31671: PUSH
31672: LD_INT 24
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: ST_TO_ADDR
31681: GO 31796
31683: LD_INT 52
31685: DOUBLE
31686: EQUAL
31687: IFTRUE 31691
31689: GO 31717
31691: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31692: LD_ADDR_VAR 0 3
31696: PUSH
31697: LD_INT 21
31699: PUSH
31700: LD_INT 22
31702: PUSH
31703: LD_INT 23
31705: PUSH
31706: LD_INT 24
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: ST_TO_ADDR
31715: GO 31796
31717: LD_INT 53
31719: DOUBLE
31720: EQUAL
31721: IFTRUE 31725
31723: GO 31743
31725: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31726: LD_ADDR_VAR 0 3
31730: PUSH
31731: LD_INT 23
31733: PUSH
31734: LD_INT 24
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: ST_TO_ADDR
31741: GO 31796
31743: LD_INT 46
31745: DOUBLE
31746: EQUAL
31747: IFTRUE 31751
31749: GO 31769
31751: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31752: LD_ADDR_VAR 0 3
31756: PUSH
31757: LD_INT 23
31759: PUSH
31760: LD_INT 24
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: ST_TO_ADDR
31767: GO 31796
31769: LD_INT 47
31771: DOUBLE
31772: EQUAL
31773: IFTRUE 31777
31775: GO 31795
31777: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31778: LD_ADDR_VAR 0 3
31782: PUSH
31783: LD_INT 23
31785: PUSH
31786: LD_INT 24
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: ST_TO_ADDR
31793: GO 31796
31795: POP
// result := ( chassis in result ) ;
31796: LD_ADDR_VAR 0 3
31800: PUSH
31801: LD_VAR 0 1
31805: PUSH
31806: LD_VAR 0 3
31810: IN
31811: ST_TO_ADDR
// end ;
31812: LD_VAR 0 3
31816: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31817: LD_INT 0
31819: PPUSH
31820: PPUSH
31821: PPUSH
31822: PPUSH
31823: PPUSH
31824: PPUSH
31825: PPUSH
// result := array ;
31826: LD_ADDR_VAR 0 5
31830: PUSH
31831: LD_VAR 0 1
31835: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31836: LD_VAR 0 1
31840: NOT
31841: PUSH
31842: LD_VAR 0 2
31846: NOT
31847: OR
31848: PUSH
31849: LD_VAR 0 3
31853: NOT
31854: OR
31855: PUSH
31856: LD_VAR 0 2
31860: PUSH
31861: LD_VAR 0 1
31865: GREATER
31866: OR
31867: PUSH
31868: LD_VAR 0 3
31872: PUSH
31873: LD_VAR 0 1
31877: GREATER
31878: OR
31879: IFFALSE 31883
// exit ;
31881: GO 32179
// if direction then
31883: LD_VAR 0 4
31887: IFFALSE 31951
// begin d := 1 ;
31889: LD_ADDR_VAR 0 9
31893: PUSH
31894: LD_INT 1
31896: ST_TO_ADDR
// if i_from > i_to then
31897: LD_VAR 0 2
31901: PUSH
31902: LD_VAR 0 3
31906: GREATER
31907: IFFALSE 31933
// length := ( array - i_from ) + i_to else
31909: LD_ADDR_VAR 0 11
31913: PUSH
31914: LD_VAR 0 1
31918: PUSH
31919: LD_VAR 0 2
31923: MINUS
31924: PUSH
31925: LD_VAR 0 3
31929: PLUS
31930: ST_TO_ADDR
31931: GO 31949
// length := i_to - i_from ;
31933: LD_ADDR_VAR 0 11
31937: PUSH
31938: LD_VAR 0 3
31942: PUSH
31943: LD_VAR 0 2
31947: MINUS
31948: ST_TO_ADDR
// end else
31949: GO 32012
// begin d := - 1 ;
31951: LD_ADDR_VAR 0 9
31955: PUSH
31956: LD_INT 1
31958: NEG
31959: ST_TO_ADDR
// if i_from > i_to then
31960: LD_VAR 0 2
31964: PUSH
31965: LD_VAR 0 3
31969: GREATER
31970: IFFALSE 31990
// length := i_from - i_to else
31972: LD_ADDR_VAR 0 11
31976: PUSH
31977: LD_VAR 0 2
31981: PUSH
31982: LD_VAR 0 3
31986: MINUS
31987: ST_TO_ADDR
31988: GO 32012
// length := ( array - i_to ) + i_from ;
31990: LD_ADDR_VAR 0 11
31994: PUSH
31995: LD_VAR 0 1
31999: PUSH
32000: LD_VAR 0 3
32004: MINUS
32005: PUSH
32006: LD_VAR 0 2
32010: PLUS
32011: ST_TO_ADDR
// end ; if not length then
32012: LD_VAR 0 11
32016: NOT
32017: IFFALSE 32021
// exit ;
32019: GO 32179
// tmp := array ;
32021: LD_ADDR_VAR 0 10
32025: PUSH
32026: LD_VAR 0 1
32030: ST_TO_ADDR
// for i = 1 to length do
32031: LD_ADDR_VAR 0 6
32035: PUSH
32036: DOUBLE
32037: LD_INT 1
32039: DEC
32040: ST_TO_ADDR
32041: LD_VAR 0 11
32045: PUSH
32046: FOR_TO
32047: IFFALSE 32167
// begin for j = 1 to array do
32049: LD_ADDR_VAR 0 7
32053: PUSH
32054: DOUBLE
32055: LD_INT 1
32057: DEC
32058: ST_TO_ADDR
32059: LD_VAR 0 1
32063: PUSH
32064: FOR_TO
32065: IFFALSE 32153
// begin k := j + d ;
32067: LD_ADDR_VAR 0 8
32071: PUSH
32072: LD_VAR 0 7
32076: PUSH
32077: LD_VAR 0 9
32081: PLUS
32082: ST_TO_ADDR
// if k > array then
32083: LD_VAR 0 8
32087: PUSH
32088: LD_VAR 0 1
32092: GREATER
32093: IFFALSE 32103
// k := 1 ;
32095: LD_ADDR_VAR 0 8
32099: PUSH
32100: LD_INT 1
32102: ST_TO_ADDR
// if not k then
32103: LD_VAR 0 8
32107: NOT
32108: IFFALSE 32120
// k := array ;
32110: LD_ADDR_VAR 0 8
32114: PUSH
32115: LD_VAR 0 1
32119: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32120: LD_ADDR_VAR 0 10
32124: PUSH
32125: LD_VAR 0 10
32129: PPUSH
32130: LD_VAR 0 8
32134: PPUSH
32135: LD_VAR 0 1
32139: PUSH
32140: LD_VAR 0 7
32144: ARRAY
32145: PPUSH
32146: CALL_OW 1
32150: ST_TO_ADDR
// end ;
32151: GO 32064
32153: POP
32154: POP
// array := tmp ;
32155: LD_ADDR_VAR 0 1
32159: PUSH
32160: LD_VAR 0 10
32164: ST_TO_ADDR
// end ;
32165: GO 32046
32167: POP
32168: POP
// result := array ;
32169: LD_ADDR_VAR 0 5
32173: PUSH
32174: LD_VAR 0 1
32178: ST_TO_ADDR
// end ;
32179: LD_VAR 0 5
32183: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32184: LD_INT 0
32186: PPUSH
32187: PPUSH
// result := 0 ;
32188: LD_ADDR_VAR 0 3
32192: PUSH
32193: LD_INT 0
32195: ST_TO_ADDR
// if not array or not value in array then
32196: LD_VAR 0 1
32200: NOT
32201: PUSH
32202: LD_VAR 0 2
32206: PUSH
32207: LD_VAR 0 1
32211: IN
32212: NOT
32213: OR
32214: IFFALSE 32218
// exit ;
32216: GO 32272
// for i = 1 to array do
32218: LD_ADDR_VAR 0 4
32222: PUSH
32223: DOUBLE
32224: LD_INT 1
32226: DEC
32227: ST_TO_ADDR
32228: LD_VAR 0 1
32232: PUSH
32233: FOR_TO
32234: IFFALSE 32270
// if value = array [ i ] then
32236: LD_VAR 0 2
32240: PUSH
32241: LD_VAR 0 1
32245: PUSH
32246: LD_VAR 0 4
32250: ARRAY
32251: EQUAL
32252: IFFALSE 32268
// begin result := i ;
32254: LD_ADDR_VAR 0 3
32258: PUSH
32259: LD_VAR 0 4
32263: ST_TO_ADDR
// exit ;
32264: POP
32265: POP
32266: GO 32272
// end ;
32268: GO 32233
32270: POP
32271: POP
// end ;
32272: LD_VAR 0 3
32276: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32277: LD_INT 0
32279: PPUSH
// vc_chassis := chassis ;
32280: LD_ADDR_OWVAR 37
32284: PUSH
32285: LD_VAR 0 1
32289: ST_TO_ADDR
// vc_engine := engine ;
32290: LD_ADDR_OWVAR 39
32294: PUSH
32295: LD_VAR 0 2
32299: ST_TO_ADDR
// vc_control := control ;
32300: LD_ADDR_OWVAR 38
32304: PUSH
32305: LD_VAR 0 3
32309: ST_TO_ADDR
// vc_weapon := weapon ;
32310: LD_ADDR_OWVAR 40
32314: PUSH
32315: LD_VAR 0 4
32319: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32320: LD_ADDR_OWVAR 41
32324: PUSH
32325: LD_VAR 0 5
32329: ST_TO_ADDR
// end ;
32330: LD_VAR 0 6
32334: RET
// export function WantPlant ( unit ) ; var task ; begin
32335: LD_INT 0
32337: PPUSH
32338: PPUSH
// result := false ;
32339: LD_ADDR_VAR 0 2
32343: PUSH
32344: LD_INT 0
32346: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32347: LD_ADDR_VAR 0 3
32351: PUSH
32352: LD_VAR 0 1
32356: PPUSH
32357: CALL_OW 437
32361: ST_TO_ADDR
// if task then
32362: LD_VAR 0 3
32366: IFFALSE 32394
// if task [ 1 ] [ 1 ] = p then
32368: LD_VAR 0 3
32372: PUSH
32373: LD_INT 1
32375: ARRAY
32376: PUSH
32377: LD_INT 1
32379: ARRAY
32380: PUSH
32381: LD_STRING p
32383: EQUAL
32384: IFFALSE 32394
// result := true ;
32386: LD_ADDR_VAR 0 2
32390: PUSH
32391: LD_INT 1
32393: ST_TO_ADDR
// end ;
32394: LD_VAR 0 2
32398: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32399: LD_INT 0
32401: PPUSH
32402: PPUSH
32403: PPUSH
32404: PPUSH
// if pos < 1 then
32405: LD_VAR 0 2
32409: PUSH
32410: LD_INT 1
32412: LESS
32413: IFFALSE 32417
// exit ;
32415: GO 32720
// if pos = 1 then
32417: LD_VAR 0 2
32421: PUSH
32422: LD_INT 1
32424: EQUAL
32425: IFFALSE 32458
// result := Replace ( arr , pos [ 1 ] , value ) else
32427: LD_ADDR_VAR 0 4
32431: PUSH
32432: LD_VAR 0 1
32436: PPUSH
32437: LD_VAR 0 2
32441: PUSH
32442: LD_INT 1
32444: ARRAY
32445: PPUSH
32446: LD_VAR 0 3
32450: PPUSH
32451: CALL_OW 1
32455: ST_TO_ADDR
32456: GO 32720
// begin tmp := arr ;
32458: LD_ADDR_VAR 0 6
32462: PUSH
32463: LD_VAR 0 1
32467: ST_TO_ADDR
// s_arr := [ tmp ] ;
32468: LD_ADDR_VAR 0 7
32472: PUSH
32473: LD_VAR 0 6
32477: PUSH
32478: EMPTY
32479: LIST
32480: ST_TO_ADDR
// for i = 1 to pos - 1 do
32481: LD_ADDR_VAR 0 5
32485: PUSH
32486: DOUBLE
32487: LD_INT 1
32489: DEC
32490: ST_TO_ADDR
32491: LD_VAR 0 2
32495: PUSH
32496: LD_INT 1
32498: MINUS
32499: PUSH
32500: FOR_TO
32501: IFFALSE 32546
// begin tmp := tmp [ pos [ i ] ] ;
32503: LD_ADDR_VAR 0 6
32507: PUSH
32508: LD_VAR 0 6
32512: PUSH
32513: LD_VAR 0 2
32517: PUSH
32518: LD_VAR 0 5
32522: ARRAY
32523: ARRAY
32524: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32525: LD_ADDR_VAR 0 7
32529: PUSH
32530: LD_VAR 0 7
32534: PUSH
32535: LD_VAR 0 6
32539: PUSH
32540: EMPTY
32541: LIST
32542: ADD
32543: ST_TO_ADDR
// end ;
32544: GO 32500
32546: POP
32547: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32548: LD_ADDR_VAR 0 6
32552: PUSH
32553: LD_VAR 0 6
32557: PPUSH
32558: LD_VAR 0 2
32562: PUSH
32563: LD_VAR 0 2
32567: ARRAY
32568: PPUSH
32569: LD_VAR 0 3
32573: PPUSH
32574: CALL_OW 1
32578: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32579: LD_ADDR_VAR 0 7
32583: PUSH
32584: LD_VAR 0 7
32588: PPUSH
32589: LD_VAR 0 7
32593: PPUSH
32594: LD_VAR 0 6
32598: PPUSH
32599: CALL_OW 1
32603: ST_TO_ADDR
// for i = s_arr downto 2 do
32604: LD_ADDR_VAR 0 5
32608: PUSH
32609: DOUBLE
32610: LD_VAR 0 7
32614: INC
32615: ST_TO_ADDR
32616: LD_INT 2
32618: PUSH
32619: FOR_DOWNTO
32620: IFFALSE 32704
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32622: LD_ADDR_VAR 0 6
32626: PUSH
32627: LD_VAR 0 7
32631: PUSH
32632: LD_VAR 0 5
32636: PUSH
32637: LD_INT 1
32639: MINUS
32640: ARRAY
32641: PPUSH
32642: LD_VAR 0 2
32646: PUSH
32647: LD_VAR 0 5
32651: PUSH
32652: LD_INT 1
32654: MINUS
32655: ARRAY
32656: PPUSH
32657: LD_VAR 0 7
32661: PUSH
32662: LD_VAR 0 5
32666: ARRAY
32667: PPUSH
32668: CALL_OW 1
32672: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32673: LD_ADDR_VAR 0 7
32677: PUSH
32678: LD_VAR 0 7
32682: PPUSH
32683: LD_VAR 0 5
32687: PUSH
32688: LD_INT 1
32690: MINUS
32691: PPUSH
32692: LD_VAR 0 6
32696: PPUSH
32697: CALL_OW 1
32701: ST_TO_ADDR
// end ;
32702: GO 32619
32704: POP
32705: POP
// result := s_arr [ 1 ] ;
32706: LD_ADDR_VAR 0 4
32710: PUSH
32711: LD_VAR 0 7
32715: PUSH
32716: LD_INT 1
32718: ARRAY
32719: ST_TO_ADDR
// end ; end ;
32720: LD_VAR 0 4
32724: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32725: LD_INT 0
32727: PPUSH
32728: PPUSH
// if not list then
32729: LD_VAR 0 1
32733: NOT
32734: IFFALSE 32738
// exit ;
32736: GO 32829
// i := list [ pos1 ] ;
32738: LD_ADDR_VAR 0 5
32742: PUSH
32743: LD_VAR 0 1
32747: PUSH
32748: LD_VAR 0 2
32752: ARRAY
32753: ST_TO_ADDR
// if not i then
32754: LD_VAR 0 5
32758: NOT
32759: IFFALSE 32763
// exit ;
32761: GO 32829
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32763: LD_ADDR_VAR 0 1
32767: PUSH
32768: LD_VAR 0 1
32772: PPUSH
32773: LD_VAR 0 2
32777: PPUSH
32778: LD_VAR 0 1
32782: PUSH
32783: LD_VAR 0 3
32787: ARRAY
32788: PPUSH
32789: CALL_OW 1
32793: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32794: LD_ADDR_VAR 0 1
32798: PUSH
32799: LD_VAR 0 1
32803: PPUSH
32804: LD_VAR 0 3
32808: PPUSH
32809: LD_VAR 0 5
32813: PPUSH
32814: CALL_OW 1
32818: ST_TO_ADDR
// result := list ;
32819: LD_ADDR_VAR 0 4
32823: PUSH
32824: LD_VAR 0 1
32828: ST_TO_ADDR
// end ;
32829: LD_VAR 0 4
32833: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32834: LD_INT 0
32836: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32837: LD_ADDR_VAR 0 5
32841: PUSH
32842: LD_VAR 0 1
32846: PPUSH
32847: CALL_OW 250
32851: PPUSH
32852: LD_VAR 0 1
32856: PPUSH
32857: CALL_OW 251
32861: PPUSH
32862: LD_VAR 0 2
32866: PPUSH
32867: LD_VAR 0 3
32871: PPUSH
32872: LD_VAR 0 4
32876: PPUSH
32877: CALL 32887 0 5
32881: ST_TO_ADDR
// end ;
32882: LD_VAR 0 5
32886: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32887: LD_INT 0
32889: PPUSH
32890: PPUSH
32891: PPUSH
32892: PPUSH
// if not list then
32893: LD_VAR 0 3
32897: NOT
32898: IFFALSE 32902
// exit ;
32900: GO 33290
// result := [ ] ;
32902: LD_ADDR_VAR 0 6
32906: PUSH
32907: EMPTY
32908: ST_TO_ADDR
// for i in list do
32909: LD_ADDR_VAR 0 7
32913: PUSH
32914: LD_VAR 0 3
32918: PUSH
32919: FOR_IN
32920: IFFALSE 33122
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32922: LD_ADDR_VAR 0 9
32926: PUSH
32927: LD_VAR 0 7
32931: PPUSH
32932: LD_VAR 0 1
32936: PPUSH
32937: LD_VAR 0 2
32941: PPUSH
32942: CALL_OW 297
32946: ST_TO_ADDR
// if not result then
32947: LD_VAR 0 6
32951: NOT
32952: IFFALSE 32978
// result := [ [ i , tmp ] ] else
32954: LD_ADDR_VAR 0 6
32958: PUSH
32959: LD_VAR 0 7
32963: PUSH
32964: LD_VAR 0 9
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: EMPTY
32974: LIST
32975: ST_TO_ADDR
32976: GO 33120
// begin if result [ result ] [ 2 ] < tmp then
32978: LD_VAR 0 6
32982: PUSH
32983: LD_VAR 0 6
32987: ARRAY
32988: PUSH
32989: LD_INT 2
32991: ARRAY
32992: PUSH
32993: LD_VAR 0 9
32997: LESS
32998: IFFALSE 33040
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33000: LD_ADDR_VAR 0 6
33004: PUSH
33005: LD_VAR 0 6
33009: PPUSH
33010: LD_VAR 0 6
33014: PUSH
33015: LD_INT 1
33017: PLUS
33018: PPUSH
33019: LD_VAR 0 7
33023: PUSH
33024: LD_VAR 0 9
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PPUSH
33033: CALL_OW 2
33037: ST_TO_ADDR
33038: GO 33120
// for j = 1 to result do
33040: LD_ADDR_VAR 0 8
33044: PUSH
33045: DOUBLE
33046: LD_INT 1
33048: DEC
33049: ST_TO_ADDR
33050: LD_VAR 0 6
33054: PUSH
33055: FOR_TO
33056: IFFALSE 33118
// begin if tmp < result [ j ] [ 2 ] then
33058: LD_VAR 0 9
33062: PUSH
33063: LD_VAR 0 6
33067: PUSH
33068: LD_VAR 0 8
33072: ARRAY
33073: PUSH
33074: LD_INT 2
33076: ARRAY
33077: LESS
33078: IFFALSE 33116
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33080: LD_ADDR_VAR 0 6
33084: PUSH
33085: LD_VAR 0 6
33089: PPUSH
33090: LD_VAR 0 8
33094: PPUSH
33095: LD_VAR 0 7
33099: PUSH
33100: LD_VAR 0 9
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PPUSH
33109: CALL_OW 2
33113: ST_TO_ADDR
// break ;
33114: GO 33118
// end ; end ;
33116: GO 33055
33118: POP
33119: POP
// end ; end ;
33120: GO 32919
33122: POP
33123: POP
// if result and not asc then
33124: LD_VAR 0 6
33128: PUSH
33129: LD_VAR 0 4
33133: NOT
33134: AND
33135: IFFALSE 33210
// begin tmp := result ;
33137: LD_ADDR_VAR 0 9
33141: PUSH
33142: LD_VAR 0 6
33146: ST_TO_ADDR
// for i = tmp downto 1 do
33147: LD_ADDR_VAR 0 7
33151: PUSH
33152: DOUBLE
33153: LD_VAR 0 9
33157: INC
33158: ST_TO_ADDR
33159: LD_INT 1
33161: PUSH
33162: FOR_DOWNTO
33163: IFFALSE 33208
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33165: LD_ADDR_VAR 0 6
33169: PUSH
33170: LD_VAR 0 6
33174: PPUSH
33175: LD_VAR 0 9
33179: PUSH
33180: LD_VAR 0 7
33184: MINUS
33185: PUSH
33186: LD_INT 1
33188: PLUS
33189: PPUSH
33190: LD_VAR 0 9
33194: PUSH
33195: LD_VAR 0 7
33199: ARRAY
33200: PPUSH
33201: CALL_OW 1
33205: ST_TO_ADDR
33206: GO 33162
33208: POP
33209: POP
// end ; tmp := [ ] ;
33210: LD_ADDR_VAR 0 9
33214: PUSH
33215: EMPTY
33216: ST_TO_ADDR
// if mode then
33217: LD_VAR 0 5
33221: IFFALSE 33290
// begin for i = 1 to result do
33223: LD_ADDR_VAR 0 7
33227: PUSH
33228: DOUBLE
33229: LD_INT 1
33231: DEC
33232: ST_TO_ADDR
33233: LD_VAR 0 6
33237: PUSH
33238: FOR_TO
33239: IFFALSE 33278
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33241: LD_ADDR_VAR 0 9
33245: PUSH
33246: LD_VAR 0 9
33250: PPUSH
33251: LD_VAR 0 7
33255: PPUSH
33256: LD_VAR 0 6
33260: PUSH
33261: LD_VAR 0 7
33265: ARRAY
33266: PUSH
33267: LD_INT 1
33269: ARRAY
33270: PPUSH
33271: CALL_OW 1
33275: ST_TO_ADDR
33276: GO 33238
33278: POP
33279: POP
// result := tmp ;
33280: LD_ADDR_VAR 0 6
33284: PUSH
33285: LD_VAR 0 9
33289: ST_TO_ADDR
// end ; end ;
33290: LD_VAR 0 6
33294: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33295: LD_INT 0
33297: PPUSH
33298: PPUSH
33299: PPUSH
33300: PPUSH
33301: PPUSH
33302: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33303: LD_ADDR_VAR 0 5
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: EMPTY
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: ST_TO_ADDR
// if not x or not y then
33325: LD_VAR 0 2
33329: NOT
33330: PUSH
33331: LD_VAR 0 3
33335: NOT
33336: OR
33337: IFFALSE 33341
// exit ;
33339: GO 34993
// if not range then
33341: LD_VAR 0 4
33345: NOT
33346: IFFALSE 33356
// range := 10 ;
33348: LD_ADDR_VAR 0 4
33352: PUSH
33353: LD_INT 10
33355: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33356: LD_ADDR_VAR 0 8
33360: PUSH
33361: LD_INT 81
33363: PUSH
33364: LD_VAR 0 1
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 92
33375: PUSH
33376: LD_VAR 0 2
33380: PUSH
33381: LD_VAR 0 3
33385: PUSH
33386: LD_VAR 0 4
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 3
33399: PUSH
33400: LD_INT 21
33402: PUSH
33403: LD_INT 3
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: LIST
33418: PPUSH
33419: CALL_OW 69
33423: ST_TO_ADDR
// if not tmp then
33424: LD_VAR 0 8
33428: NOT
33429: IFFALSE 33433
// exit ;
33431: GO 34993
// for i in tmp do
33433: LD_ADDR_VAR 0 6
33437: PUSH
33438: LD_VAR 0 8
33442: PUSH
33443: FOR_IN
33444: IFFALSE 34968
// begin points := [ 0 , 0 , 0 ] ;
33446: LD_ADDR_VAR 0 9
33450: PUSH
33451: LD_INT 0
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: LIST
33464: ST_TO_ADDR
// bpoints := 1 ;
33465: LD_ADDR_VAR 0 10
33469: PUSH
33470: LD_INT 1
33472: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33473: LD_VAR 0 6
33477: PPUSH
33478: CALL_OW 247
33482: PUSH
33483: LD_INT 1
33485: DOUBLE
33486: EQUAL
33487: IFTRUE 33491
33489: GO 34069
33491: POP
// begin if GetClass ( i ) = 1 then
33492: LD_VAR 0 6
33496: PPUSH
33497: CALL_OW 257
33501: PUSH
33502: LD_INT 1
33504: EQUAL
33505: IFFALSE 33526
// points := [ 10 , 5 , 3 ] ;
33507: LD_ADDR_VAR 0 9
33511: PUSH
33512: LD_INT 10
33514: PUSH
33515: LD_INT 5
33517: PUSH
33518: LD_INT 3
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: LIST
33525: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33526: LD_VAR 0 6
33530: PPUSH
33531: CALL_OW 257
33535: PUSH
33536: LD_INT 2
33538: PUSH
33539: LD_INT 3
33541: PUSH
33542: LD_INT 4
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: LIST
33549: IN
33550: IFFALSE 33571
// points := [ 3 , 2 , 1 ] ;
33552: LD_ADDR_VAR 0 9
33556: PUSH
33557: LD_INT 3
33559: PUSH
33560: LD_INT 2
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: LIST
33570: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33571: LD_VAR 0 6
33575: PPUSH
33576: CALL_OW 257
33580: PUSH
33581: LD_INT 5
33583: EQUAL
33584: IFFALSE 33605
// points := [ 130 , 5 , 2 ] ;
33586: LD_ADDR_VAR 0 9
33590: PUSH
33591: LD_INT 130
33593: PUSH
33594: LD_INT 5
33596: PUSH
33597: LD_INT 2
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: LIST
33604: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33605: LD_VAR 0 6
33609: PPUSH
33610: CALL_OW 257
33614: PUSH
33615: LD_INT 8
33617: EQUAL
33618: IFFALSE 33639
// points := [ 35 , 35 , 30 ] ;
33620: LD_ADDR_VAR 0 9
33624: PUSH
33625: LD_INT 35
33627: PUSH
33628: LD_INT 35
33630: PUSH
33631: LD_INT 30
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33639: LD_VAR 0 6
33643: PPUSH
33644: CALL_OW 257
33648: PUSH
33649: LD_INT 9
33651: EQUAL
33652: IFFALSE 33673
// points := [ 20 , 55 , 40 ] ;
33654: LD_ADDR_VAR 0 9
33658: PUSH
33659: LD_INT 20
33661: PUSH
33662: LD_INT 55
33664: PUSH
33665: LD_INT 40
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: LIST
33672: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33673: LD_VAR 0 6
33677: PPUSH
33678: CALL_OW 257
33682: PUSH
33683: LD_INT 12
33685: PUSH
33686: LD_INT 16
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: IN
33693: IFFALSE 33714
// points := [ 5 , 3 , 2 ] ;
33695: LD_ADDR_VAR 0 9
33699: PUSH
33700: LD_INT 5
33702: PUSH
33703: LD_INT 3
33705: PUSH
33706: LD_INT 2
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: LIST
33713: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33714: LD_VAR 0 6
33718: PPUSH
33719: CALL_OW 257
33723: PUSH
33724: LD_INT 17
33726: EQUAL
33727: IFFALSE 33748
// points := [ 100 , 50 , 75 ] ;
33729: LD_ADDR_VAR 0 9
33733: PUSH
33734: LD_INT 100
33736: PUSH
33737: LD_INT 50
33739: PUSH
33740: LD_INT 75
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: LIST
33747: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33748: LD_VAR 0 6
33752: PPUSH
33753: CALL_OW 257
33757: PUSH
33758: LD_INT 15
33760: EQUAL
33761: IFFALSE 33782
// points := [ 10 , 5 , 3 ] ;
33763: LD_ADDR_VAR 0 9
33767: PUSH
33768: LD_INT 10
33770: PUSH
33771: LD_INT 5
33773: PUSH
33774: LD_INT 3
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: LIST
33781: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33782: LD_VAR 0 6
33786: PPUSH
33787: CALL_OW 257
33791: PUSH
33792: LD_INT 14
33794: EQUAL
33795: IFFALSE 33816
// points := [ 10 , 0 , 0 ] ;
33797: LD_ADDR_VAR 0 9
33801: PUSH
33802: LD_INT 10
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: LIST
33815: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33816: LD_VAR 0 6
33820: PPUSH
33821: CALL_OW 257
33825: PUSH
33826: LD_INT 11
33828: EQUAL
33829: IFFALSE 33850
// points := [ 30 , 10 , 5 ] ;
33831: LD_ADDR_VAR 0 9
33835: PUSH
33836: LD_INT 30
33838: PUSH
33839: LD_INT 10
33841: PUSH
33842: LD_INT 5
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33850: LD_VAR 0 1
33854: PPUSH
33855: LD_INT 5
33857: PPUSH
33858: CALL_OW 321
33862: PUSH
33863: LD_INT 2
33865: EQUAL
33866: IFFALSE 33883
// bpoints := bpoints * 1.8 ;
33868: LD_ADDR_VAR 0 10
33872: PUSH
33873: LD_VAR 0 10
33877: PUSH
33878: LD_REAL  1.80000000000000E+0000
33881: MUL
33882: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33883: LD_VAR 0 6
33887: PPUSH
33888: CALL_OW 257
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: LD_INT 2
33898: PUSH
33899: LD_INT 3
33901: PUSH
33902: LD_INT 4
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: IN
33911: PUSH
33912: LD_VAR 0 1
33916: PPUSH
33917: LD_INT 51
33919: PPUSH
33920: CALL_OW 321
33924: PUSH
33925: LD_INT 2
33927: EQUAL
33928: AND
33929: IFFALSE 33946
// bpoints := bpoints * 1.2 ;
33931: LD_ADDR_VAR 0 10
33935: PUSH
33936: LD_VAR 0 10
33940: PUSH
33941: LD_REAL  1.20000000000000E+0000
33944: MUL
33945: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33946: LD_VAR 0 6
33950: PPUSH
33951: CALL_OW 257
33955: PUSH
33956: LD_INT 5
33958: PUSH
33959: LD_INT 7
33961: PUSH
33962: LD_INT 9
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: LIST
33969: IN
33970: PUSH
33971: LD_VAR 0 1
33975: PPUSH
33976: LD_INT 52
33978: PPUSH
33979: CALL_OW 321
33983: PUSH
33984: LD_INT 2
33986: EQUAL
33987: AND
33988: IFFALSE 34005
// bpoints := bpoints * 1.5 ;
33990: LD_ADDR_VAR 0 10
33994: PUSH
33995: LD_VAR 0 10
33999: PUSH
34000: LD_REAL  1.50000000000000E+0000
34003: MUL
34004: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34005: LD_VAR 0 1
34009: PPUSH
34010: LD_INT 66
34012: PPUSH
34013: CALL_OW 321
34017: PUSH
34018: LD_INT 2
34020: EQUAL
34021: IFFALSE 34038
// bpoints := bpoints * 1.1 ;
34023: LD_ADDR_VAR 0 10
34027: PUSH
34028: LD_VAR 0 10
34032: PUSH
34033: LD_REAL  1.10000000000000E+0000
34036: MUL
34037: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34038: LD_ADDR_VAR 0 10
34042: PUSH
34043: LD_VAR 0 10
34047: PUSH
34048: LD_VAR 0 6
34052: PPUSH
34053: LD_INT 1
34055: PPUSH
34056: CALL_OW 259
34060: PUSH
34061: LD_REAL  1.15000000000000E+0000
34064: MUL
34065: MUL
34066: ST_TO_ADDR
// end ; unit_vehicle :
34067: GO 34897
34069: LD_INT 2
34071: DOUBLE
34072: EQUAL
34073: IFTRUE 34077
34075: GO 34885
34077: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34078: LD_VAR 0 6
34082: PPUSH
34083: CALL_OW 264
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: LD_INT 42
34093: PUSH
34094: LD_INT 24
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: LIST
34101: IN
34102: IFFALSE 34123
// points := [ 25 , 5 , 3 ] ;
34104: LD_ADDR_VAR 0 9
34108: PUSH
34109: LD_INT 25
34111: PUSH
34112: LD_INT 5
34114: PUSH
34115: LD_INT 3
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: LIST
34122: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34123: LD_VAR 0 6
34127: PPUSH
34128: CALL_OW 264
34132: PUSH
34133: LD_INT 4
34135: PUSH
34136: LD_INT 43
34138: PUSH
34139: LD_INT 25
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: LIST
34146: IN
34147: IFFALSE 34168
// points := [ 40 , 15 , 5 ] ;
34149: LD_ADDR_VAR 0 9
34153: PUSH
34154: LD_INT 40
34156: PUSH
34157: LD_INT 15
34159: PUSH
34160: LD_INT 5
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: LIST
34167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34168: LD_VAR 0 6
34172: PPUSH
34173: CALL_OW 264
34177: PUSH
34178: LD_INT 3
34180: PUSH
34181: LD_INT 23
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: IN
34188: IFFALSE 34209
// points := [ 7 , 25 , 8 ] ;
34190: LD_ADDR_VAR 0 9
34194: PUSH
34195: LD_INT 7
34197: PUSH
34198: LD_INT 25
34200: PUSH
34201: LD_INT 8
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: LIST
34208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34209: LD_VAR 0 6
34213: PPUSH
34214: CALL_OW 264
34218: PUSH
34219: LD_INT 5
34221: PUSH
34222: LD_INT 27
34224: PUSH
34225: LD_INT 44
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: LIST
34232: IN
34233: IFFALSE 34254
// points := [ 14 , 50 , 16 ] ;
34235: LD_ADDR_VAR 0 9
34239: PUSH
34240: LD_INT 14
34242: PUSH
34243: LD_INT 50
34245: PUSH
34246: LD_INT 16
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: LIST
34253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34254: LD_VAR 0 6
34258: PPUSH
34259: CALL_OW 264
34263: PUSH
34264: LD_INT 6
34266: PUSH
34267: LD_INT 46
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: IN
34274: IFFALSE 34295
// points := [ 32 , 120 , 70 ] ;
34276: LD_ADDR_VAR 0 9
34280: PUSH
34281: LD_INT 32
34283: PUSH
34284: LD_INT 120
34286: PUSH
34287: LD_INT 70
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: LIST
34294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34295: LD_VAR 0 6
34299: PPUSH
34300: CALL_OW 264
34304: PUSH
34305: LD_INT 7
34307: PUSH
34308: LD_INT 28
34310: PUSH
34311: LD_INT 45
34313: PUSH
34314: LD_EXP 30
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: IN
34325: IFFALSE 34346
// points := [ 35 , 20 , 45 ] ;
34327: LD_ADDR_VAR 0 9
34331: PUSH
34332: LD_INT 35
34334: PUSH
34335: LD_INT 20
34337: PUSH
34338: LD_INT 45
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34346: LD_VAR 0 6
34350: PPUSH
34351: CALL_OW 264
34355: PUSH
34356: LD_INT 47
34358: PUSH
34359: EMPTY
34360: LIST
34361: IN
34362: IFFALSE 34383
// points := [ 67 , 45 , 75 ] ;
34364: LD_ADDR_VAR 0 9
34368: PUSH
34369: LD_INT 67
34371: PUSH
34372: LD_INT 45
34374: PUSH
34375: LD_INT 75
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: LIST
34382: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34383: LD_VAR 0 6
34387: PPUSH
34388: CALL_OW 264
34392: PUSH
34393: LD_INT 26
34395: PUSH
34396: EMPTY
34397: LIST
34398: IN
34399: IFFALSE 34420
// points := [ 120 , 30 , 80 ] ;
34401: LD_ADDR_VAR 0 9
34405: PUSH
34406: LD_INT 120
34408: PUSH
34409: LD_INT 30
34411: PUSH
34412: LD_INT 80
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34420: LD_VAR 0 6
34424: PPUSH
34425: CALL_OW 264
34429: PUSH
34430: LD_INT 22
34432: PUSH
34433: EMPTY
34434: LIST
34435: IN
34436: IFFALSE 34457
// points := [ 40 , 1 , 1 ] ;
34438: LD_ADDR_VAR 0 9
34442: PUSH
34443: LD_INT 40
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: LIST
34456: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34457: LD_VAR 0 6
34461: PPUSH
34462: CALL_OW 264
34466: PUSH
34467: LD_INT 29
34469: PUSH
34470: EMPTY
34471: LIST
34472: IN
34473: IFFALSE 34494
// points := [ 70 , 200 , 400 ] ;
34475: LD_ADDR_VAR 0 9
34479: PUSH
34480: LD_INT 70
34482: PUSH
34483: LD_INT 200
34485: PUSH
34486: LD_INT 400
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: LIST
34493: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34494: LD_VAR 0 6
34498: PPUSH
34499: CALL_OW 264
34503: PUSH
34504: LD_INT 14
34506: PUSH
34507: LD_INT 53
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: IN
34514: IFFALSE 34535
// points := [ 40 , 10 , 20 ] ;
34516: LD_ADDR_VAR 0 9
34520: PUSH
34521: LD_INT 40
34523: PUSH
34524: LD_INT 10
34526: PUSH
34527: LD_INT 20
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: LIST
34534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34535: LD_VAR 0 6
34539: PPUSH
34540: CALL_OW 264
34544: PUSH
34545: LD_INT 9
34547: PUSH
34548: EMPTY
34549: LIST
34550: IN
34551: IFFALSE 34572
// points := [ 5 , 70 , 20 ] ;
34553: LD_ADDR_VAR 0 9
34557: PUSH
34558: LD_INT 5
34560: PUSH
34561: LD_INT 70
34563: PUSH
34564: LD_INT 20
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: LIST
34571: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34572: LD_VAR 0 6
34576: PPUSH
34577: CALL_OW 264
34581: PUSH
34582: LD_INT 10
34584: PUSH
34585: EMPTY
34586: LIST
34587: IN
34588: IFFALSE 34609
// points := [ 35 , 110 , 70 ] ;
34590: LD_ADDR_VAR 0 9
34594: PUSH
34595: LD_INT 35
34597: PUSH
34598: LD_INT 110
34600: PUSH
34601: LD_INT 70
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34609: LD_VAR 0 6
34613: PPUSH
34614: CALL_OW 265
34618: PUSH
34619: LD_INT 25
34621: EQUAL
34622: IFFALSE 34643
// points := [ 80 , 65 , 100 ] ;
34624: LD_ADDR_VAR 0 9
34628: PUSH
34629: LD_INT 80
34631: PUSH
34632: LD_INT 65
34634: PUSH
34635: LD_INT 100
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34643: LD_VAR 0 6
34647: PPUSH
34648: CALL_OW 263
34652: PUSH
34653: LD_INT 1
34655: EQUAL
34656: IFFALSE 34691
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34658: LD_ADDR_VAR 0 10
34662: PUSH
34663: LD_VAR 0 10
34667: PUSH
34668: LD_VAR 0 6
34672: PPUSH
34673: CALL_OW 311
34677: PPUSH
34678: LD_INT 3
34680: PPUSH
34681: CALL_OW 259
34685: PUSH
34686: LD_INT 4
34688: MUL
34689: MUL
34690: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34691: LD_VAR 0 6
34695: PPUSH
34696: CALL_OW 263
34700: PUSH
34701: LD_INT 2
34703: EQUAL
34704: IFFALSE 34755
// begin j := IsControledBy ( i ) ;
34706: LD_ADDR_VAR 0 7
34710: PUSH
34711: LD_VAR 0 6
34715: PPUSH
34716: CALL_OW 312
34720: ST_TO_ADDR
// if j then
34721: LD_VAR 0 7
34725: IFFALSE 34755
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34727: LD_ADDR_VAR 0 10
34731: PUSH
34732: LD_VAR 0 10
34736: PUSH
34737: LD_VAR 0 7
34741: PPUSH
34742: LD_INT 3
34744: PPUSH
34745: CALL_OW 259
34749: PUSH
34750: LD_INT 3
34752: MUL
34753: MUL
34754: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34755: LD_VAR 0 6
34759: PPUSH
34760: CALL_OW 264
34764: PUSH
34765: LD_INT 5
34767: PUSH
34768: LD_INT 6
34770: PUSH
34771: LD_INT 46
34773: PUSH
34774: LD_INT 44
34776: PUSH
34777: LD_INT 47
34779: PUSH
34780: LD_INT 45
34782: PUSH
34783: LD_INT 28
34785: PUSH
34786: LD_INT 7
34788: PUSH
34789: LD_INT 27
34791: PUSH
34792: LD_INT 29
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: IN
34807: PUSH
34808: LD_VAR 0 1
34812: PPUSH
34813: LD_INT 52
34815: PPUSH
34816: CALL_OW 321
34820: PUSH
34821: LD_INT 2
34823: EQUAL
34824: AND
34825: IFFALSE 34842
// bpoints := bpoints * 1.2 ;
34827: LD_ADDR_VAR 0 10
34831: PUSH
34832: LD_VAR 0 10
34836: PUSH
34837: LD_REAL  1.20000000000000E+0000
34840: MUL
34841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34842: LD_VAR 0 6
34846: PPUSH
34847: CALL_OW 264
34851: PUSH
34852: LD_INT 6
34854: PUSH
34855: LD_INT 46
34857: PUSH
34858: LD_INT 47
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: LIST
34865: IN
34866: IFFALSE 34883
// bpoints := bpoints * 1.2 ;
34868: LD_ADDR_VAR 0 10
34872: PUSH
34873: LD_VAR 0 10
34877: PUSH
34878: LD_REAL  1.20000000000000E+0000
34881: MUL
34882: ST_TO_ADDR
// end ; unit_building :
34883: GO 34897
34885: LD_INT 3
34887: DOUBLE
34888: EQUAL
34889: IFTRUE 34893
34891: GO 34896
34893: POP
// ; end ;
34894: GO 34897
34896: POP
// for j = 1 to 3 do
34897: LD_ADDR_VAR 0 7
34901: PUSH
34902: DOUBLE
34903: LD_INT 1
34905: DEC
34906: ST_TO_ADDR
34907: LD_INT 3
34909: PUSH
34910: FOR_TO
34911: IFFALSE 34964
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34913: LD_ADDR_VAR 0 5
34917: PUSH
34918: LD_VAR 0 5
34922: PPUSH
34923: LD_VAR 0 7
34927: PPUSH
34928: LD_VAR 0 5
34932: PUSH
34933: LD_VAR 0 7
34937: ARRAY
34938: PUSH
34939: LD_VAR 0 9
34943: PUSH
34944: LD_VAR 0 7
34948: ARRAY
34949: PUSH
34950: LD_VAR 0 10
34954: MUL
34955: PLUS
34956: PPUSH
34957: CALL_OW 1
34961: ST_TO_ADDR
34962: GO 34910
34964: POP
34965: POP
// end ;
34966: GO 33443
34968: POP
34969: POP
// result := Replace ( result , 4 , tmp ) ;
34970: LD_ADDR_VAR 0 5
34974: PUSH
34975: LD_VAR 0 5
34979: PPUSH
34980: LD_INT 4
34982: PPUSH
34983: LD_VAR 0 8
34987: PPUSH
34988: CALL_OW 1
34992: ST_TO_ADDR
// end ;
34993: LD_VAR 0 5
34997: RET
// export function DangerAtRange ( unit , range ) ; begin
34998: LD_INT 0
35000: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35001: LD_ADDR_VAR 0 3
35005: PUSH
35006: LD_VAR 0 1
35010: PPUSH
35011: CALL_OW 255
35015: PPUSH
35016: LD_VAR 0 1
35020: PPUSH
35021: CALL_OW 250
35025: PPUSH
35026: LD_VAR 0 1
35030: PPUSH
35031: CALL_OW 251
35035: PPUSH
35036: LD_VAR 0 2
35040: PPUSH
35041: CALL 33295 0 4
35045: ST_TO_ADDR
// end ;
35046: LD_VAR 0 3
35050: RET
// export function DangerInArea ( side , area ) ; begin
35051: LD_INT 0
35053: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35054: LD_ADDR_VAR 0 3
35058: PUSH
35059: LD_VAR 0 2
35063: PPUSH
35064: LD_INT 81
35066: PUSH
35067: LD_VAR 0 1
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PPUSH
35076: CALL_OW 70
35080: ST_TO_ADDR
// end ;
35081: LD_VAR 0 3
35085: RET
// export function IsExtension ( b ) ; begin
35086: LD_INT 0
35088: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35089: LD_ADDR_VAR 0 2
35093: PUSH
35094: LD_VAR 0 1
35098: PUSH
35099: LD_INT 23
35101: PUSH
35102: LD_INT 20
35104: PUSH
35105: LD_INT 22
35107: PUSH
35108: LD_INT 17
35110: PUSH
35111: LD_INT 24
35113: PUSH
35114: LD_INT 21
35116: PUSH
35117: LD_INT 19
35119: PUSH
35120: LD_INT 16
35122: PUSH
35123: LD_INT 25
35125: PUSH
35126: LD_INT 18
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: IN
35141: ST_TO_ADDR
// end ;
35142: LD_VAR 0 2
35146: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35147: LD_INT 0
35149: PPUSH
35150: PPUSH
35151: PPUSH
// result := [ ] ;
35152: LD_ADDR_VAR 0 4
35156: PUSH
35157: EMPTY
35158: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35159: LD_ADDR_VAR 0 5
35163: PUSH
35164: LD_VAR 0 2
35168: PPUSH
35169: LD_INT 21
35171: PUSH
35172: LD_INT 3
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PPUSH
35179: CALL_OW 70
35183: ST_TO_ADDR
// if not tmp then
35184: LD_VAR 0 5
35188: NOT
35189: IFFALSE 35193
// exit ;
35191: GO 35257
// if checkLink then
35193: LD_VAR 0 3
35197: IFFALSE 35247
// begin for i in tmp do
35199: LD_ADDR_VAR 0 6
35203: PUSH
35204: LD_VAR 0 5
35208: PUSH
35209: FOR_IN
35210: IFFALSE 35245
// if GetBase ( i ) <> base then
35212: LD_VAR 0 6
35216: PPUSH
35217: CALL_OW 274
35221: PUSH
35222: LD_VAR 0 1
35226: NONEQUAL
35227: IFFALSE 35243
// ComLinkToBase ( base , i ) ;
35229: LD_VAR 0 1
35233: PPUSH
35234: LD_VAR 0 6
35238: PPUSH
35239: CALL_OW 169
35243: GO 35209
35245: POP
35246: POP
// end ; result := tmp ;
35247: LD_ADDR_VAR 0 4
35251: PUSH
35252: LD_VAR 0 5
35256: ST_TO_ADDR
// end ;
35257: LD_VAR 0 4
35261: RET
// export function ComComplete ( units , b ) ; var i ; begin
35262: LD_INT 0
35264: PPUSH
35265: PPUSH
// if not units then
35266: LD_VAR 0 1
35270: NOT
35271: IFFALSE 35275
// exit ;
35273: GO 35365
// for i in units do
35275: LD_ADDR_VAR 0 4
35279: PUSH
35280: LD_VAR 0 1
35284: PUSH
35285: FOR_IN
35286: IFFALSE 35363
// if BuildingStatus ( b ) = bs_build then
35288: LD_VAR 0 2
35292: PPUSH
35293: CALL_OW 461
35297: PUSH
35298: LD_INT 1
35300: EQUAL
35301: IFFALSE 35361
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35303: LD_VAR 0 4
35307: PPUSH
35308: LD_STRING h
35310: PUSH
35311: LD_VAR 0 2
35315: PPUSH
35316: CALL_OW 250
35320: PUSH
35321: LD_VAR 0 2
35325: PPUSH
35326: CALL_OW 251
35330: PUSH
35331: LD_VAR 0 2
35335: PUSH
35336: LD_INT 0
35338: PUSH
35339: LD_INT 0
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: PUSH
35354: EMPTY
35355: LIST
35356: PPUSH
35357: CALL_OW 446
35361: GO 35285
35363: POP
35364: POP
// end ;
35365: LD_VAR 0 3
35369: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35370: LD_INT 0
35372: PPUSH
35373: PPUSH
35374: PPUSH
35375: PPUSH
35376: PPUSH
35377: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35378: LD_VAR 0 1
35382: NOT
35383: PUSH
35384: LD_VAR 0 1
35388: PPUSH
35389: CALL_OW 263
35393: PUSH
35394: LD_INT 2
35396: NONEQUAL
35397: OR
35398: IFFALSE 35402
// exit ;
35400: GO 35718
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35402: LD_ADDR_VAR 0 6
35406: PUSH
35407: LD_INT 22
35409: PUSH
35410: LD_VAR 0 1
35414: PPUSH
35415: CALL_OW 255
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 2
35426: PUSH
35427: LD_INT 30
35429: PUSH
35430: LD_INT 36
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 34
35439: PUSH
35440: LD_INT 31
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: LIST
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PPUSH
35456: CALL_OW 69
35460: ST_TO_ADDR
// if not tmp then
35461: LD_VAR 0 6
35465: NOT
35466: IFFALSE 35470
// exit ;
35468: GO 35718
// result := [ ] ;
35470: LD_ADDR_VAR 0 2
35474: PUSH
35475: EMPTY
35476: ST_TO_ADDR
// for i in tmp do
35477: LD_ADDR_VAR 0 3
35481: PUSH
35482: LD_VAR 0 6
35486: PUSH
35487: FOR_IN
35488: IFFALSE 35559
// begin t := UnitsInside ( i ) ;
35490: LD_ADDR_VAR 0 4
35494: PUSH
35495: LD_VAR 0 3
35499: PPUSH
35500: CALL_OW 313
35504: ST_TO_ADDR
// if t then
35505: LD_VAR 0 4
35509: IFFALSE 35557
// for j in t do
35511: LD_ADDR_VAR 0 7
35515: PUSH
35516: LD_VAR 0 4
35520: PUSH
35521: FOR_IN
35522: IFFALSE 35555
// result := Replace ( result , result + 1 , j ) ;
35524: LD_ADDR_VAR 0 2
35528: PUSH
35529: LD_VAR 0 2
35533: PPUSH
35534: LD_VAR 0 2
35538: PUSH
35539: LD_INT 1
35541: PLUS
35542: PPUSH
35543: LD_VAR 0 7
35547: PPUSH
35548: CALL_OW 1
35552: ST_TO_ADDR
35553: GO 35521
35555: POP
35556: POP
// end ;
35557: GO 35487
35559: POP
35560: POP
// if not result then
35561: LD_VAR 0 2
35565: NOT
35566: IFFALSE 35570
// exit ;
35568: GO 35718
// mech := result [ 1 ] ;
35570: LD_ADDR_VAR 0 5
35574: PUSH
35575: LD_VAR 0 2
35579: PUSH
35580: LD_INT 1
35582: ARRAY
35583: ST_TO_ADDR
// if result > 1 then
35584: LD_VAR 0 2
35588: PUSH
35589: LD_INT 1
35591: GREATER
35592: IFFALSE 35704
// begin for i = 2 to result do
35594: LD_ADDR_VAR 0 3
35598: PUSH
35599: DOUBLE
35600: LD_INT 2
35602: DEC
35603: ST_TO_ADDR
35604: LD_VAR 0 2
35608: PUSH
35609: FOR_TO
35610: IFFALSE 35702
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35612: LD_ADDR_VAR 0 4
35616: PUSH
35617: LD_VAR 0 2
35621: PUSH
35622: LD_VAR 0 3
35626: ARRAY
35627: PPUSH
35628: LD_INT 3
35630: PPUSH
35631: CALL_OW 259
35635: PUSH
35636: LD_VAR 0 2
35640: PUSH
35641: LD_VAR 0 3
35645: ARRAY
35646: PPUSH
35647: CALL_OW 432
35651: MINUS
35652: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35653: LD_VAR 0 4
35657: PUSH
35658: LD_VAR 0 5
35662: PPUSH
35663: LD_INT 3
35665: PPUSH
35666: CALL_OW 259
35670: PUSH
35671: LD_VAR 0 5
35675: PPUSH
35676: CALL_OW 432
35680: MINUS
35681: GREATEREQUAL
35682: IFFALSE 35700
// mech := result [ i ] ;
35684: LD_ADDR_VAR 0 5
35688: PUSH
35689: LD_VAR 0 2
35693: PUSH
35694: LD_VAR 0 3
35698: ARRAY
35699: ST_TO_ADDR
// end ;
35700: GO 35609
35702: POP
35703: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35704: LD_VAR 0 1
35708: PPUSH
35709: LD_VAR 0 5
35713: PPUSH
35714: CALL_OW 135
// end ;
35718: LD_VAR 0 2
35722: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35723: LD_INT 0
35725: PPUSH
35726: PPUSH
35727: PPUSH
35728: PPUSH
35729: PPUSH
35730: PPUSH
35731: PPUSH
35732: PPUSH
35733: PPUSH
35734: PPUSH
35735: PPUSH
35736: PPUSH
35737: PPUSH
// result := [ ] ;
35738: LD_ADDR_VAR 0 7
35742: PUSH
35743: EMPTY
35744: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35745: LD_VAR 0 1
35749: PPUSH
35750: CALL_OW 266
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: IN
35765: NOT
35766: IFFALSE 35770
// exit ;
35768: GO 37404
// if name then
35770: LD_VAR 0 3
35774: IFFALSE 35790
// SetBName ( base_dep , name ) ;
35776: LD_VAR 0 1
35780: PPUSH
35781: LD_VAR 0 3
35785: PPUSH
35786: CALL_OW 500
// base := GetBase ( base_dep ) ;
35790: LD_ADDR_VAR 0 15
35794: PUSH
35795: LD_VAR 0 1
35799: PPUSH
35800: CALL_OW 274
35804: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35805: LD_ADDR_VAR 0 16
35809: PUSH
35810: LD_VAR 0 1
35814: PPUSH
35815: CALL_OW 255
35819: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35820: LD_ADDR_VAR 0 17
35824: PUSH
35825: LD_VAR 0 1
35829: PPUSH
35830: CALL_OW 248
35834: ST_TO_ADDR
// if sources then
35835: LD_VAR 0 5
35839: IFFALSE 35886
// for i = 1 to 3 do
35841: LD_ADDR_VAR 0 8
35845: PUSH
35846: DOUBLE
35847: LD_INT 1
35849: DEC
35850: ST_TO_ADDR
35851: LD_INT 3
35853: PUSH
35854: FOR_TO
35855: IFFALSE 35884
// AddResourceType ( base , i , sources [ i ] ) ;
35857: LD_VAR 0 15
35861: PPUSH
35862: LD_VAR 0 8
35866: PPUSH
35867: LD_VAR 0 5
35871: PUSH
35872: LD_VAR 0 8
35876: ARRAY
35877: PPUSH
35878: CALL_OW 276
35882: GO 35854
35884: POP
35885: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35886: LD_ADDR_VAR 0 18
35890: PUSH
35891: LD_VAR 0 15
35895: PPUSH
35896: LD_VAR 0 2
35900: PPUSH
35901: LD_INT 1
35903: PPUSH
35904: CALL 35147 0 3
35908: ST_TO_ADDR
// InitHc ;
35909: CALL_OW 19
// InitUc ;
35913: CALL_OW 18
// uc_side := side ;
35917: LD_ADDR_OWVAR 20
35921: PUSH
35922: LD_VAR 0 16
35926: ST_TO_ADDR
// uc_nation := nation ;
35927: LD_ADDR_OWVAR 21
35931: PUSH
35932: LD_VAR 0 17
35936: ST_TO_ADDR
// if buildings then
35937: LD_VAR 0 18
35941: IFFALSE 37263
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35943: LD_ADDR_VAR 0 19
35947: PUSH
35948: LD_VAR 0 18
35952: PPUSH
35953: LD_INT 2
35955: PUSH
35956: LD_INT 30
35958: PUSH
35959: LD_INT 29
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 30
35968: PUSH
35969: LD_INT 30
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: LIST
35980: PPUSH
35981: CALL_OW 72
35985: ST_TO_ADDR
// if tmp then
35986: LD_VAR 0 19
35990: IFFALSE 36038
// for i in tmp do
35992: LD_ADDR_VAR 0 8
35996: PUSH
35997: LD_VAR 0 19
36001: PUSH
36002: FOR_IN
36003: IFFALSE 36036
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36005: LD_VAR 0 8
36009: PPUSH
36010: CALL_OW 250
36014: PPUSH
36015: LD_VAR 0 8
36019: PPUSH
36020: CALL_OW 251
36024: PPUSH
36025: LD_VAR 0 16
36029: PPUSH
36030: CALL_OW 441
36034: GO 36002
36036: POP
36037: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36038: LD_VAR 0 18
36042: PPUSH
36043: LD_INT 2
36045: PUSH
36046: LD_INT 30
36048: PUSH
36049: LD_INT 32
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 30
36058: PUSH
36059: LD_INT 33
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: LIST
36070: PPUSH
36071: CALL_OW 72
36075: IFFALSE 36163
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36077: LD_ADDR_VAR 0 8
36081: PUSH
36082: LD_VAR 0 18
36086: PPUSH
36087: LD_INT 2
36089: PUSH
36090: LD_INT 30
36092: PUSH
36093: LD_INT 32
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 30
36102: PUSH
36103: LD_INT 33
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: LIST
36114: PPUSH
36115: CALL_OW 72
36119: PUSH
36120: FOR_IN
36121: IFFALSE 36161
// begin if not GetBWeapon ( i ) then
36123: LD_VAR 0 8
36127: PPUSH
36128: CALL_OW 269
36132: NOT
36133: IFFALSE 36159
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36135: LD_VAR 0 8
36139: PPUSH
36140: LD_VAR 0 8
36144: PPUSH
36145: LD_VAR 0 2
36149: PPUSH
36150: CALL 37409 0 2
36154: PPUSH
36155: CALL_OW 431
// end ;
36159: GO 36120
36161: POP
36162: POP
// end ; for i = 1 to personel do
36163: LD_ADDR_VAR 0 8
36167: PUSH
36168: DOUBLE
36169: LD_INT 1
36171: DEC
36172: ST_TO_ADDR
36173: LD_VAR 0 6
36177: PUSH
36178: FOR_TO
36179: IFFALSE 37243
// begin if i > 4 then
36181: LD_VAR 0 8
36185: PUSH
36186: LD_INT 4
36188: GREATER
36189: IFFALSE 36193
// break ;
36191: GO 37243
// case i of 1 :
36193: LD_VAR 0 8
36197: PUSH
36198: LD_INT 1
36200: DOUBLE
36201: EQUAL
36202: IFTRUE 36206
36204: GO 36286
36206: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36207: LD_ADDR_VAR 0 12
36211: PUSH
36212: LD_VAR 0 18
36216: PPUSH
36217: LD_INT 22
36219: PUSH
36220: LD_VAR 0 16
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 58
36231: PUSH
36232: EMPTY
36233: LIST
36234: PUSH
36235: LD_INT 2
36237: PUSH
36238: LD_INT 30
36240: PUSH
36241: LD_INT 32
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 30
36250: PUSH
36251: LD_INT 4
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 30
36260: PUSH
36261: LD_INT 5
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: LIST
36278: PPUSH
36279: CALL_OW 72
36283: ST_TO_ADDR
36284: GO 36508
36286: LD_INT 2
36288: DOUBLE
36289: EQUAL
36290: IFTRUE 36294
36292: GO 36356
36294: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36295: LD_ADDR_VAR 0 12
36299: PUSH
36300: LD_VAR 0 18
36304: PPUSH
36305: LD_INT 22
36307: PUSH
36308: LD_VAR 0 16
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 2
36319: PUSH
36320: LD_INT 30
36322: PUSH
36323: LD_INT 0
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 30
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: LIST
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PPUSH
36349: CALL_OW 72
36353: ST_TO_ADDR
36354: GO 36508
36356: LD_INT 3
36358: DOUBLE
36359: EQUAL
36360: IFTRUE 36364
36362: GO 36426
36364: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36365: LD_ADDR_VAR 0 12
36369: PUSH
36370: LD_VAR 0 18
36374: PPUSH
36375: LD_INT 22
36377: PUSH
36378: LD_VAR 0 16
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 2
36389: PUSH
36390: LD_INT 30
36392: PUSH
36393: LD_INT 2
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 30
36402: PUSH
36403: LD_INT 3
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PPUSH
36419: CALL_OW 72
36423: ST_TO_ADDR
36424: GO 36508
36426: LD_INT 4
36428: DOUBLE
36429: EQUAL
36430: IFTRUE 36434
36432: GO 36507
36434: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36435: LD_ADDR_VAR 0 12
36439: PUSH
36440: LD_VAR 0 18
36444: PPUSH
36445: LD_INT 22
36447: PUSH
36448: LD_VAR 0 16
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 2
36459: PUSH
36460: LD_INT 30
36462: PUSH
36463: LD_INT 6
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 30
36472: PUSH
36473: LD_INT 7
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 30
36482: PUSH
36483: LD_INT 8
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PPUSH
36500: CALL_OW 72
36504: ST_TO_ADDR
36505: GO 36508
36507: POP
// if i = 1 then
36508: LD_VAR 0 8
36512: PUSH
36513: LD_INT 1
36515: EQUAL
36516: IFFALSE 36627
// begin tmp := [ ] ;
36518: LD_ADDR_VAR 0 19
36522: PUSH
36523: EMPTY
36524: ST_TO_ADDR
// for j in f do
36525: LD_ADDR_VAR 0 9
36529: PUSH
36530: LD_VAR 0 12
36534: PUSH
36535: FOR_IN
36536: IFFALSE 36609
// if GetBType ( j ) = b_bunker then
36538: LD_VAR 0 9
36542: PPUSH
36543: CALL_OW 266
36547: PUSH
36548: LD_INT 32
36550: EQUAL
36551: IFFALSE 36578
// tmp := Insert ( tmp , 1 , j ) else
36553: LD_ADDR_VAR 0 19
36557: PUSH
36558: LD_VAR 0 19
36562: PPUSH
36563: LD_INT 1
36565: PPUSH
36566: LD_VAR 0 9
36570: PPUSH
36571: CALL_OW 2
36575: ST_TO_ADDR
36576: GO 36607
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36578: LD_ADDR_VAR 0 19
36582: PUSH
36583: LD_VAR 0 19
36587: PPUSH
36588: LD_VAR 0 19
36592: PUSH
36593: LD_INT 1
36595: PLUS
36596: PPUSH
36597: LD_VAR 0 9
36601: PPUSH
36602: CALL_OW 2
36606: ST_TO_ADDR
36607: GO 36535
36609: POP
36610: POP
// if tmp then
36611: LD_VAR 0 19
36615: IFFALSE 36627
// f := tmp ;
36617: LD_ADDR_VAR 0 12
36621: PUSH
36622: LD_VAR 0 19
36626: ST_TO_ADDR
// end ; x := personel [ i ] ;
36627: LD_ADDR_VAR 0 13
36631: PUSH
36632: LD_VAR 0 6
36636: PUSH
36637: LD_VAR 0 8
36641: ARRAY
36642: ST_TO_ADDR
// if x = - 1 then
36643: LD_VAR 0 13
36647: PUSH
36648: LD_INT 1
36650: NEG
36651: EQUAL
36652: IFFALSE 36861
// begin for j in f do
36654: LD_ADDR_VAR 0 9
36658: PUSH
36659: LD_VAR 0 12
36663: PUSH
36664: FOR_IN
36665: IFFALSE 36857
// repeat InitHc ;
36667: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36671: LD_VAR 0 9
36675: PPUSH
36676: CALL_OW 266
36680: PUSH
36681: LD_INT 5
36683: EQUAL
36684: IFFALSE 36754
// begin if UnitsInside ( j ) < 3 then
36686: LD_VAR 0 9
36690: PPUSH
36691: CALL_OW 313
36695: PUSH
36696: LD_INT 3
36698: LESS
36699: IFFALSE 36735
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36701: LD_INT 0
36703: PPUSH
36704: LD_INT 5
36706: PUSH
36707: LD_INT 8
36709: PUSH
36710: LD_INT 9
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: PUSH
36718: LD_VAR 0 17
36722: ARRAY
36723: PPUSH
36724: LD_VAR 0 4
36728: PPUSH
36729: CALL_OW 380
36733: GO 36752
// PrepareHuman ( false , i , skill ) ;
36735: LD_INT 0
36737: PPUSH
36738: LD_VAR 0 8
36742: PPUSH
36743: LD_VAR 0 4
36747: PPUSH
36748: CALL_OW 380
// end else
36752: GO 36771
// PrepareHuman ( false , i , skill ) ;
36754: LD_INT 0
36756: PPUSH
36757: LD_VAR 0 8
36761: PPUSH
36762: LD_VAR 0 4
36766: PPUSH
36767: CALL_OW 380
// un := CreateHuman ;
36771: LD_ADDR_VAR 0 14
36775: PUSH
36776: CALL_OW 44
36780: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36781: LD_ADDR_VAR 0 7
36785: PUSH
36786: LD_VAR 0 7
36790: PPUSH
36791: LD_INT 1
36793: PPUSH
36794: LD_VAR 0 14
36798: PPUSH
36799: CALL_OW 2
36803: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36804: LD_VAR 0 14
36808: PPUSH
36809: LD_VAR 0 9
36813: PPUSH
36814: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36818: LD_VAR 0 9
36822: PPUSH
36823: CALL_OW 313
36827: PUSH
36828: LD_INT 6
36830: EQUAL
36831: PUSH
36832: LD_VAR 0 9
36836: PPUSH
36837: CALL_OW 266
36841: PUSH
36842: LD_INT 32
36844: PUSH
36845: LD_INT 31
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: IN
36852: OR
36853: IFFALSE 36667
36855: GO 36664
36857: POP
36858: POP
// end else
36859: GO 37241
// for j = 1 to x do
36861: LD_ADDR_VAR 0 9
36865: PUSH
36866: DOUBLE
36867: LD_INT 1
36869: DEC
36870: ST_TO_ADDR
36871: LD_VAR 0 13
36875: PUSH
36876: FOR_TO
36877: IFFALSE 37239
// begin InitHc ;
36879: CALL_OW 19
// if not f then
36883: LD_VAR 0 12
36887: NOT
36888: IFFALSE 36977
// begin PrepareHuman ( false , i , skill ) ;
36890: LD_INT 0
36892: PPUSH
36893: LD_VAR 0 8
36897: PPUSH
36898: LD_VAR 0 4
36902: PPUSH
36903: CALL_OW 380
// un := CreateHuman ;
36907: LD_ADDR_VAR 0 14
36911: PUSH
36912: CALL_OW 44
36916: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36917: LD_ADDR_VAR 0 7
36921: PUSH
36922: LD_VAR 0 7
36926: PPUSH
36927: LD_INT 1
36929: PPUSH
36930: LD_VAR 0 14
36934: PPUSH
36935: CALL_OW 2
36939: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36940: LD_VAR 0 14
36944: PPUSH
36945: LD_VAR 0 1
36949: PPUSH
36950: CALL_OW 250
36954: PPUSH
36955: LD_VAR 0 1
36959: PPUSH
36960: CALL_OW 251
36964: PPUSH
36965: LD_INT 10
36967: PPUSH
36968: LD_INT 0
36970: PPUSH
36971: CALL_OW 50
// continue ;
36975: GO 36876
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36977: LD_VAR 0 12
36981: PUSH
36982: LD_INT 1
36984: ARRAY
36985: PPUSH
36986: CALL_OW 313
36990: PUSH
36991: LD_VAR 0 12
36995: PUSH
36996: LD_INT 1
36998: ARRAY
36999: PPUSH
37000: CALL_OW 266
37004: PUSH
37005: LD_INT 32
37007: PUSH
37008: LD_INT 31
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: IN
37015: AND
37016: PUSH
37017: LD_VAR 0 12
37021: PUSH
37022: LD_INT 1
37024: ARRAY
37025: PPUSH
37026: CALL_OW 313
37030: PUSH
37031: LD_INT 6
37033: EQUAL
37034: OR
37035: IFFALSE 37055
// f := Delete ( f , 1 ) ;
37037: LD_ADDR_VAR 0 12
37041: PUSH
37042: LD_VAR 0 12
37046: PPUSH
37047: LD_INT 1
37049: PPUSH
37050: CALL_OW 3
37054: ST_TO_ADDR
// if not f then
37055: LD_VAR 0 12
37059: NOT
37060: IFFALSE 37078
// begin x := x + 2 ;
37062: LD_ADDR_VAR 0 13
37066: PUSH
37067: LD_VAR 0 13
37071: PUSH
37072: LD_INT 2
37074: PLUS
37075: ST_TO_ADDR
// continue ;
37076: GO 36876
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37078: LD_VAR 0 12
37082: PUSH
37083: LD_INT 1
37085: ARRAY
37086: PPUSH
37087: CALL_OW 266
37091: PUSH
37092: LD_INT 5
37094: EQUAL
37095: IFFALSE 37169
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37097: LD_VAR 0 12
37101: PUSH
37102: LD_INT 1
37104: ARRAY
37105: PPUSH
37106: CALL_OW 313
37110: PUSH
37111: LD_INT 3
37113: LESS
37114: IFFALSE 37150
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37116: LD_INT 0
37118: PPUSH
37119: LD_INT 5
37121: PUSH
37122: LD_INT 8
37124: PUSH
37125: LD_INT 9
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: LIST
37132: PUSH
37133: LD_VAR 0 17
37137: ARRAY
37138: PPUSH
37139: LD_VAR 0 4
37143: PPUSH
37144: CALL_OW 380
37148: GO 37167
// PrepareHuman ( false , i , skill ) ;
37150: LD_INT 0
37152: PPUSH
37153: LD_VAR 0 8
37157: PPUSH
37158: LD_VAR 0 4
37162: PPUSH
37163: CALL_OW 380
// end else
37167: GO 37186
// PrepareHuman ( false , i , skill ) ;
37169: LD_INT 0
37171: PPUSH
37172: LD_VAR 0 8
37176: PPUSH
37177: LD_VAR 0 4
37181: PPUSH
37182: CALL_OW 380
// un := CreateHuman ;
37186: LD_ADDR_VAR 0 14
37190: PUSH
37191: CALL_OW 44
37195: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37196: LD_ADDR_VAR 0 7
37200: PUSH
37201: LD_VAR 0 7
37205: PPUSH
37206: LD_INT 1
37208: PPUSH
37209: LD_VAR 0 14
37213: PPUSH
37214: CALL_OW 2
37218: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37219: LD_VAR 0 14
37223: PPUSH
37224: LD_VAR 0 12
37228: PUSH
37229: LD_INT 1
37231: ARRAY
37232: PPUSH
37233: CALL_OW 52
// end ;
37237: GO 36876
37239: POP
37240: POP
// end ;
37241: GO 36178
37243: POP
37244: POP
// result := result ^ buildings ;
37245: LD_ADDR_VAR 0 7
37249: PUSH
37250: LD_VAR 0 7
37254: PUSH
37255: LD_VAR 0 18
37259: ADD
37260: ST_TO_ADDR
// end else
37261: GO 37404
// begin for i = 1 to personel do
37263: LD_ADDR_VAR 0 8
37267: PUSH
37268: DOUBLE
37269: LD_INT 1
37271: DEC
37272: ST_TO_ADDR
37273: LD_VAR 0 6
37277: PUSH
37278: FOR_TO
37279: IFFALSE 37402
// begin if i > 4 then
37281: LD_VAR 0 8
37285: PUSH
37286: LD_INT 4
37288: GREATER
37289: IFFALSE 37293
// break ;
37291: GO 37402
// x := personel [ i ] ;
37293: LD_ADDR_VAR 0 13
37297: PUSH
37298: LD_VAR 0 6
37302: PUSH
37303: LD_VAR 0 8
37307: ARRAY
37308: ST_TO_ADDR
// if x = - 1 then
37309: LD_VAR 0 13
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: EQUAL
37318: IFFALSE 37322
// continue ;
37320: GO 37278
// PrepareHuman ( false , i , skill ) ;
37322: LD_INT 0
37324: PPUSH
37325: LD_VAR 0 8
37329: PPUSH
37330: LD_VAR 0 4
37334: PPUSH
37335: CALL_OW 380
// un := CreateHuman ;
37339: LD_ADDR_VAR 0 14
37343: PUSH
37344: CALL_OW 44
37348: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37349: LD_VAR 0 14
37353: PPUSH
37354: LD_VAR 0 1
37358: PPUSH
37359: CALL_OW 250
37363: PPUSH
37364: LD_VAR 0 1
37368: PPUSH
37369: CALL_OW 251
37373: PPUSH
37374: LD_INT 10
37376: PPUSH
37377: LD_INT 0
37379: PPUSH
37380: CALL_OW 50
// result := result ^ un ;
37384: LD_ADDR_VAR 0 7
37388: PUSH
37389: LD_VAR 0 7
37393: PUSH
37394: LD_VAR 0 14
37398: ADD
37399: ST_TO_ADDR
// end ;
37400: GO 37278
37402: POP
37403: POP
// end ; end ;
37404: LD_VAR 0 7
37408: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37409: LD_INT 0
37411: PPUSH
37412: PPUSH
37413: PPUSH
37414: PPUSH
37415: PPUSH
37416: PPUSH
37417: PPUSH
37418: PPUSH
37419: PPUSH
37420: PPUSH
37421: PPUSH
37422: PPUSH
37423: PPUSH
37424: PPUSH
37425: PPUSH
37426: PPUSH
// result := false ;
37427: LD_ADDR_VAR 0 3
37431: PUSH
37432: LD_INT 0
37434: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37435: LD_VAR 0 1
37439: NOT
37440: PUSH
37441: LD_VAR 0 1
37445: PPUSH
37446: CALL_OW 266
37450: PUSH
37451: LD_INT 32
37453: PUSH
37454: LD_INT 33
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: IN
37461: NOT
37462: OR
37463: IFFALSE 37467
// exit ;
37465: GO 38576
// nat := GetNation ( tower ) ;
37467: LD_ADDR_VAR 0 12
37471: PUSH
37472: LD_VAR 0 1
37476: PPUSH
37477: CALL_OW 248
37481: ST_TO_ADDR
// side := GetSide ( tower ) ;
37482: LD_ADDR_VAR 0 16
37486: PUSH
37487: LD_VAR 0 1
37491: PPUSH
37492: CALL_OW 255
37496: ST_TO_ADDR
// x := GetX ( tower ) ;
37497: LD_ADDR_VAR 0 10
37501: PUSH
37502: LD_VAR 0 1
37506: PPUSH
37507: CALL_OW 250
37511: ST_TO_ADDR
// y := GetY ( tower ) ;
37512: LD_ADDR_VAR 0 11
37516: PUSH
37517: LD_VAR 0 1
37521: PPUSH
37522: CALL_OW 251
37526: ST_TO_ADDR
// if not x or not y then
37527: LD_VAR 0 10
37531: NOT
37532: PUSH
37533: LD_VAR 0 11
37537: NOT
37538: OR
37539: IFFALSE 37543
// exit ;
37541: GO 38576
// weapon := 0 ;
37543: LD_ADDR_VAR 0 18
37547: PUSH
37548: LD_INT 0
37550: ST_TO_ADDR
// fac_list := [ ] ;
37551: LD_ADDR_VAR 0 17
37555: PUSH
37556: EMPTY
37557: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37558: LD_ADDR_VAR 0 6
37562: PUSH
37563: LD_VAR 0 1
37567: PPUSH
37568: CALL_OW 274
37572: PPUSH
37573: LD_VAR 0 2
37577: PPUSH
37578: LD_INT 0
37580: PPUSH
37581: CALL 35147 0 3
37585: PPUSH
37586: LD_INT 30
37588: PUSH
37589: LD_INT 3
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PPUSH
37596: CALL_OW 72
37600: ST_TO_ADDR
// if not factories then
37601: LD_VAR 0 6
37605: NOT
37606: IFFALSE 37610
// exit ;
37608: GO 38576
// for i in factories do
37610: LD_ADDR_VAR 0 8
37614: PUSH
37615: LD_VAR 0 6
37619: PUSH
37620: FOR_IN
37621: IFFALSE 37646
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37623: LD_ADDR_VAR 0 17
37627: PUSH
37628: LD_VAR 0 17
37632: PUSH
37633: LD_VAR 0 8
37637: PPUSH
37638: CALL_OW 478
37642: UNION
37643: ST_TO_ADDR
37644: GO 37620
37646: POP
37647: POP
// if not fac_list then
37648: LD_VAR 0 17
37652: NOT
37653: IFFALSE 37657
// exit ;
37655: GO 38576
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37657: LD_ADDR_VAR 0 5
37661: PUSH
37662: LD_INT 4
37664: PUSH
37665: LD_INT 5
37667: PUSH
37668: LD_INT 9
37670: PUSH
37671: LD_INT 10
37673: PUSH
37674: LD_INT 6
37676: PUSH
37677: LD_INT 7
37679: PUSH
37680: LD_INT 11
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 27
37694: PUSH
37695: LD_INT 28
37697: PUSH
37698: LD_INT 26
37700: PUSH
37701: LD_INT 30
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 43
37712: PUSH
37713: LD_INT 44
37715: PUSH
37716: LD_INT 46
37718: PUSH
37719: LD_INT 45
37721: PUSH
37722: LD_INT 47
37724: PUSH
37725: LD_INT 49
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: LIST
37740: PUSH
37741: LD_VAR 0 12
37745: ARRAY
37746: ST_TO_ADDR
// list := list isect fac_list ;
37747: LD_ADDR_VAR 0 5
37751: PUSH
37752: LD_VAR 0 5
37756: PUSH
37757: LD_VAR 0 17
37761: ISECT
37762: ST_TO_ADDR
// if not list then
37763: LD_VAR 0 5
37767: NOT
37768: IFFALSE 37772
// exit ;
37770: GO 38576
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37772: LD_VAR 0 12
37776: PUSH
37777: LD_INT 3
37779: EQUAL
37780: PUSH
37781: LD_INT 49
37783: PUSH
37784: LD_VAR 0 5
37788: IN
37789: AND
37790: PUSH
37791: LD_INT 31
37793: PPUSH
37794: LD_VAR 0 16
37798: PPUSH
37799: CALL_OW 321
37803: PUSH
37804: LD_INT 2
37806: EQUAL
37807: AND
37808: IFFALSE 37868
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37810: LD_INT 22
37812: PUSH
37813: LD_VAR 0 16
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 35
37824: PUSH
37825: LD_INT 49
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 91
37834: PUSH
37835: LD_VAR 0 1
37839: PUSH
37840: LD_INT 10
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: LIST
37852: PPUSH
37853: CALL_OW 69
37857: NOT
37858: IFFALSE 37868
// weapon := ru_time_lapser ;
37860: LD_ADDR_VAR 0 18
37864: PUSH
37865: LD_INT 49
37867: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37868: LD_VAR 0 12
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: IN
37883: PUSH
37884: LD_INT 11
37886: PUSH
37887: LD_VAR 0 5
37891: IN
37892: PUSH
37893: LD_INT 30
37895: PUSH
37896: LD_VAR 0 5
37900: IN
37901: OR
37902: AND
37903: PUSH
37904: LD_INT 6
37906: PPUSH
37907: LD_VAR 0 16
37911: PPUSH
37912: CALL_OW 321
37916: PUSH
37917: LD_INT 2
37919: EQUAL
37920: AND
37921: IFFALSE 38086
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37923: LD_INT 22
37925: PUSH
37926: LD_VAR 0 16
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 2
37937: PUSH
37938: LD_INT 35
37940: PUSH
37941: LD_INT 11
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 35
37950: PUSH
37951: LD_INT 30
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 91
37965: PUSH
37966: LD_VAR 0 1
37970: PUSH
37971: LD_INT 18
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: LIST
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: LIST
37983: PPUSH
37984: CALL_OW 69
37988: NOT
37989: PUSH
37990: LD_INT 22
37992: PUSH
37993: LD_VAR 0 16
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: LD_INT 30
38007: PUSH
38008: LD_INT 32
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 30
38017: PUSH
38018: LD_INT 33
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 91
38032: PUSH
38033: LD_VAR 0 1
38037: PUSH
38038: LD_INT 12
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: LIST
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: LIST
38050: PUSH
38051: EMPTY
38052: LIST
38053: PPUSH
38054: CALL_OW 69
38058: PUSH
38059: LD_INT 2
38061: GREATER
38062: AND
38063: IFFALSE 38086
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38065: LD_ADDR_VAR 0 18
38069: PUSH
38070: LD_INT 11
38072: PUSH
38073: LD_INT 30
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_VAR 0 12
38084: ARRAY
38085: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38086: LD_VAR 0 18
38090: NOT
38091: PUSH
38092: LD_INT 40
38094: PPUSH
38095: LD_VAR 0 16
38099: PPUSH
38100: CALL_OW 321
38104: PUSH
38105: LD_INT 2
38107: EQUAL
38108: AND
38109: PUSH
38110: LD_INT 7
38112: PUSH
38113: LD_VAR 0 5
38117: IN
38118: PUSH
38119: LD_INT 28
38121: PUSH
38122: LD_VAR 0 5
38126: IN
38127: OR
38128: PUSH
38129: LD_INT 45
38131: PUSH
38132: LD_VAR 0 5
38136: IN
38137: OR
38138: AND
38139: IFFALSE 38393
// begin hex := GetHexInfo ( x , y ) ;
38141: LD_ADDR_VAR 0 4
38145: PUSH
38146: LD_VAR 0 10
38150: PPUSH
38151: LD_VAR 0 11
38155: PPUSH
38156: CALL_OW 546
38160: ST_TO_ADDR
// if hex [ 1 ] then
38161: LD_VAR 0 4
38165: PUSH
38166: LD_INT 1
38168: ARRAY
38169: IFFALSE 38173
// exit ;
38171: GO 38576
// height := hex [ 2 ] ;
38173: LD_ADDR_VAR 0 15
38177: PUSH
38178: LD_VAR 0 4
38182: PUSH
38183: LD_INT 2
38185: ARRAY
38186: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38187: LD_ADDR_VAR 0 14
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: LD_INT 2
38197: PUSH
38198: LD_INT 3
38200: PUSH
38201: LD_INT 5
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
// for i in tmp do
38210: LD_ADDR_VAR 0 8
38214: PUSH
38215: LD_VAR 0 14
38219: PUSH
38220: FOR_IN
38221: IFFALSE 38391
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38223: LD_ADDR_VAR 0 9
38227: PUSH
38228: LD_VAR 0 10
38232: PPUSH
38233: LD_VAR 0 8
38237: PPUSH
38238: LD_INT 5
38240: PPUSH
38241: CALL_OW 272
38245: PUSH
38246: LD_VAR 0 11
38250: PPUSH
38251: LD_VAR 0 8
38255: PPUSH
38256: LD_INT 5
38258: PPUSH
38259: CALL_OW 273
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38268: LD_VAR 0 9
38272: PUSH
38273: LD_INT 1
38275: ARRAY
38276: PPUSH
38277: LD_VAR 0 9
38281: PUSH
38282: LD_INT 2
38284: ARRAY
38285: PPUSH
38286: CALL_OW 488
38290: IFFALSE 38389
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38292: LD_ADDR_VAR 0 4
38296: PUSH
38297: LD_VAR 0 9
38301: PUSH
38302: LD_INT 1
38304: ARRAY
38305: PPUSH
38306: LD_VAR 0 9
38310: PUSH
38311: LD_INT 2
38313: ARRAY
38314: PPUSH
38315: CALL_OW 546
38319: ST_TO_ADDR
// if hex [ 1 ] then
38320: LD_VAR 0 4
38324: PUSH
38325: LD_INT 1
38327: ARRAY
38328: IFFALSE 38332
// continue ;
38330: GO 38220
// h := hex [ 2 ] ;
38332: LD_ADDR_VAR 0 13
38336: PUSH
38337: LD_VAR 0 4
38341: PUSH
38342: LD_INT 2
38344: ARRAY
38345: ST_TO_ADDR
// if h + 7 < height then
38346: LD_VAR 0 13
38350: PUSH
38351: LD_INT 7
38353: PLUS
38354: PUSH
38355: LD_VAR 0 15
38359: LESS
38360: IFFALSE 38389
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38362: LD_ADDR_VAR 0 18
38366: PUSH
38367: LD_INT 7
38369: PUSH
38370: LD_INT 28
38372: PUSH
38373: LD_INT 45
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: LIST
38380: PUSH
38381: LD_VAR 0 12
38385: ARRAY
38386: ST_TO_ADDR
// break ;
38387: GO 38391
// end ; end ; end ;
38389: GO 38220
38391: POP
38392: POP
// end ; if not weapon then
38393: LD_VAR 0 18
38397: NOT
38398: IFFALSE 38458
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38400: LD_ADDR_VAR 0 5
38404: PUSH
38405: LD_VAR 0 5
38409: PUSH
38410: LD_INT 11
38412: PUSH
38413: LD_INT 30
38415: PUSH
38416: LD_INT 49
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: LIST
38423: DIFF
38424: ST_TO_ADDR
// if not list then
38425: LD_VAR 0 5
38429: NOT
38430: IFFALSE 38434
// exit ;
38432: GO 38576
// weapon := list [ rand ( 1 , list ) ] ;
38434: LD_ADDR_VAR 0 18
38438: PUSH
38439: LD_VAR 0 5
38443: PUSH
38444: LD_INT 1
38446: PPUSH
38447: LD_VAR 0 5
38451: PPUSH
38452: CALL_OW 12
38456: ARRAY
38457: ST_TO_ADDR
// end ; if weapon then
38458: LD_VAR 0 18
38462: IFFALSE 38576
// begin tmp := CostOfWeapon ( weapon ) ;
38464: LD_ADDR_VAR 0 14
38468: PUSH
38469: LD_VAR 0 18
38473: PPUSH
38474: CALL_OW 451
38478: ST_TO_ADDR
// j := GetBase ( tower ) ;
38479: LD_ADDR_VAR 0 9
38483: PUSH
38484: LD_VAR 0 1
38488: PPUSH
38489: CALL_OW 274
38493: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38494: LD_VAR 0 9
38498: PPUSH
38499: LD_INT 1
38501: PPUSH
38502: CALL_OW 275
38506: PUSH
38507: LD_VAR 0 14
38511: PUSH
38512: LD_INT 1
38514: ARRAY
38515: GREATEREQUAL
38516: PUSH
38517: LD_VAR 0 9
38521: PPUSH
38522: LD_INT 2
38524: PPUSH
38525: CALL_OW 275
38529: PUSH
38530: LD_VAR 0 14
38534: PUSH
38535: LD_INT 2
38537: ARRAY
38538: GREATEREQUAL
38539: AND
38540: PUSH
38541: LD_VAR 0 9
38545: PPUSH
38546: LD_INT 3
38548: PPUSH
38549: CALL_OW 275
38553: PUSH
38554: LD_VAR 0 14
38558: PUSH
38559: LD_INT 3
38561: ARRAY
38562: GREATEREQUAL
38563: AND
38564: IFFALSE 38576
// result := weapon ;
38566: LD_ADDR_VAR 0 3
38570: PUSH
38571: LD_VAR 0 18
38575: ST_TO_ADDR
// end ; end ;
38576: LD_VAR 0 3
38580: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38581: LD_INT 0
38583: PPUSH
38584: PPUSH
// result := true ;
38585: LD_ADDR_VAR 0 3
38589: PUSH
38590: LD_INT 1
38592: ST_TO_ADDR
// if array1 = array2 then
38593: LD_VAR 0 1
38597: PUSH
38598: LD_VAR 0 2
38602: EQUAL
38603: IFFALSE 38663
// begin for i = 1 to array1 do
38605: LD_ADDR_VAR 0 4
38609: PUSH
38610: DOUBLE
38611: LD_INT 1
38613: DEC
38614: ST_TO_ADDR
38615: LD_VAR 0 1
38619: PUSH
38620: FOR_TO
38621: IFFALSE 38659
// if array1 [ i ] <> array2 [ i ] then
38623: LD_VAR 0 1
38627: PUSH
38628: LD_VAR 0 4
38632: ARRAY
38633: PUSH
38634: LD_VAR 0 2
38638: PUSH
38639: LD_VAR 0 4
38643: ARRAY
38644: NONEQUAL
38645: IFFALSE 38657
// begin result := false ;
38647: LD_ADDR_VAR 0 3
38651: PUSH
38652: LD_INT 0
38654: ST_TO_ADDR
// break ;
38655: GO 38659
// end ;
38657: GO 38620
38659: POP
38660: POP
// end else
38661: GO 38671
// result := false ;
38663: LD_ADDR_VAR 0 3
38667: PUSH
38668: LD_INT 0
38670: ST_TO_ADDR
// end ;
38671: LD_VAR 0 3
38675: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38676: LD_INT 0
38678: PPUSH
38679: PPUSH
// if not array1 or not array2 then
38680: LD_VAR 0 1
38684: NOT
38685: PUSH
38686: LD_VAR 0 2
38690: NOT
38691: OR
38692: IFFALSE 38696
// exit ;
38694: GO 38760
// result := true ;
38696: LD_ADDR_VAR 0 3
38700: PUSH
38701: LD_INT 1
38703: ST_TO_ADDR
// for i = 1 to array1 do
38704: LD_ADDR_VAR 0 4
38708: PUSH
38709: DOUBLE
38710: LD_INT 1
38712: DEC
38713: ST_TO_ADDR
38714: LD_VAR 0 1
38718: PUSH
38719: FOR_TO
38720: IFFALSE 38758
// if array1 [ i ] <> array2 [ i ] then
38722: LD_VAR 0 1
38726: PUSH
38727: LD_VAR 0 4
38731: ARRAY
38732: PUSH
38733: LD_VAR 0 2
38737: PUSH
38738: LD_VAR 0 4
38742: ARRAY
38743: NONEQUAL
38744: IFFALSE 38756
// begin result := false ;
38746: LD_ADDR_VAR 0 3
38750: PUSH
38751: LD_INT 0
38753: ST_TO_ADDR
// break ;
38754: GO 38758
// end ;
38756: GO 38719
38758: POP
38759: POP
// end ;
38760: LD_VAR 0 3
38764: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38765: LD_INT 0
38767: PPUSH
38768: PPUSH
38769: PPUSH
// pom := GetBase ( fac ) ;
38770: LD_ADDR_VAR 0 5
38774: PUSH
38775: LD_VAR 0 1
38779: PPUSH
38780: CALL_OW 274
38784: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38785: LD_ADDR_VAR 0 4
38789: PUSH
38790: LD_VAR 0 2
38794: PUSH
38795: LD_INT 1
38797: ARRAY
38798: PPUSH
38799: LD_VAR 0 2
38803: PUSH
38804: LD_INT 2
38806: ARRAY
38807: PPUSH
38808: LD_VAR 0 2
38812: PUSH
38813: LD_INT 3
38815: ARRAY
38816: PPUSH
38817: LD_VAR 0 2
38821: PUSH
38822: LD_INT 4
38824: ARRAY
38825: PPUSH
38826: CALL_OW 449
38830: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38831: LD_ADDR_VAR 0 3
38835: PUSH
38836: LD_VAR 0 5
38840: PPUSH
38841: LD_INT 1
38843: PPUSH
38844: CALL_OW 275
38848: PUSH
38849: LD_VAR 0 4
38853: PUSH
38854: LD_INT 1
38856: ARRAY
38857: GREATEREQUAL
38858: PUSH
38859: LD_VAR 0 5
38863: PPUSH
38864: LD_INT 2
38866: PPUSH
38867: CALL_OW 275
38871: PUSH
38872: LD_VAR 0 4
38876: PUSH
38877: LD_INT 2
38879: ARRAY
38880: GREATEREQUAL
38881: AND
38882: PUSH
38883: LD_VAR 0 5
38887: PPUSH
38888: LD_INT 3
38890: PPUSH
38891: CALL_OW 275
38895: PUSH
38896: LD_VAR 0 4
38900: PUSH
38901: LD_INT 3
38903: ARRAY
38904: GREATEREQUAL
38905: AND
38906: ST_TO_ADDR
// end ;
38907: LD_VAR 0 3
38911: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38912: LD_INT 0
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
// pom := GetBase ( building ) ;
38918: LD_ADDR_VAR 0 3
38922: PUSH
38923: LD_VAR 0 1
38927: PPUSH
38928: CALL_OW 274
38932: ST_TO_ADDR
// if not pom then
38933: LD_VAR 0 3
38937: NOT
38938: IFFALSE 38942
// exit ;
38940: GO 39112
// btype := GetBType ( building ) ;
38942: LD_ADDR_VAR 0 5
38946: PUSH
38947: LD_VAR 0 1
38951: PPUSH
38952: CALL_OW 266
38956: ST_TO_ADDR
// if btype = b_armoury then
38957: LD_VAR 0 5
38961: PUSH
38962: LD_INT 4
38964: EQUAL
38965: IFFALSE 38975
// btype := b_barracks ;
38967: LD_ADDR_VAR 0 5
38971: PUSH
38972: LD_INT 5
38974: ST_TO_ADDR
// if btype = b_depot then
38975: LD_VAR 0 5
38979: PUSH
38980: LD_INT 0
38982: EQUAL
38983: IFFALSE 38993
// btype := b_warehouse ;
38985: LD_ADDR_VAR 0 5
38989: PUSH
38990: LD_INT 1
38992: ST_TO_ADDR
// if btype = b_workshop then
38993: LD_VAR 0 5
38997: PUSH
38998: LD_INT 2
39000: EQUAL
39001: IFFALSE 39011
// btype := b_factory ;
39003: LD_ADDR_VAR 0 5
39007: PUSH
39008: LD_INT 3
39010: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39011: LD_ADDR_VAR 0 4
39015: PUSH
39016: LD_VAR 0 5
39020: PPUSH
39021: LD_VAR 0 1
39025: PPUSH
39026: CALL_OW 248
39030: PPUSH
39031: CALL_OW 450
39035: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39036: LD_ADDR_VAR 0 2
39040: PUSH
39041: LD_VAR 0 3
39045: PPUSH
39046: LD_INT 1
39048: PPUSH
39049: CALL_OW 275
39053: PUSH
39054: LD_VAR 0 4
39058: PUSH
39059: LD_INT 1
39061: ARRAY
39062: GREATEREQUAL
39063: PUSH
39064: LD_VAR 0 3
39068: PPUSH
39069: LD_INT 2
39071: PPUSH
39072: CALL_OW 275
39076: PUSH
39077: LD_VAR 0 4
39081: PUSH
39082: LD_INT 2
39084: ARRAY
39085: GREATEREQUAL
39086: AND
39087: PUSH
39088: LD_VAR 0 3
39092: PPUSH
39093: LD_INT 3
39095: PPUSH
39096: CALL_OW 275
39100: PUSH
39101: LD_VAR 0 4
39105: PUSH
39106: LD_INT 3
39108: ARRAY
39109: GREATEREQUAL
39110: AND
39111: ST_TO_ADDR
// end ;
39112: LD_VAR 0 2
39116: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39117: LD_INT 0
39119: PPUSH
39120: PPUSH
39121: PPUSH
// pom := GetBase ( building ) ;
39122: LD_ADDR_VAR 0 4
39126: PUSH
39127: LD_VAR 0 1
39131: PPUSH
39132: CALL_OW 274
39136: ST_TO_ADDR
// if not pom then
39137: LD_VAR 0 4
39141: NOT
39142: IFFALSE 39146
// exit ;
39144: GO 39247
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39146: LD_ADDR_VAR 0 5
39150: PUSH
39151: LD_VAR 0 2
39155: PPUSH
39156: LD_VAR 0 1
39160: PPUSH
39161: CALL_OW 248
39165: PPUSH
39166: CALL_OW 450
39170: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39171: LD_ADDR_VAR 0 3
39175: PUSH
39176: LD_VAR 0 4
39180: PPUSH
39181: LD_INT 1
39183: PPUSH
39184: CALL_OW 275
39188: PUSH
39189: LD_VAR 0 5
39193: PUSH
39194: LD_INT 1
39196: ARRAY
39197: GREATEREQUAL
39198: PUSH
39199: LD_VAR 0 4
39203: PPUSH
39204: LD_INT 2
39206: PPUSH
39207: CALL_OW 275
39211: PUSH
39212: LD_VAR 0 5
39216: PUSH
39217: LD_INT 2
39219: ARRAY
39220: GREATEREQUAL
39221: AND
39222: PUSH
39223: LD_VAR 0 4
39227: PPUSH
39228: LD_INT 3
39230: PPUSH
39231: CALL_OW 275
39235: PUSH
39236: LD_VAR 0 5
39240: PUSH
39241: LD_INT 3
39243: ARRAY
39244: GREATEREQUAL
39245: AND
39246: ST_TO_ADDR
// end ;
39247: LD_VAR 0 3
39251: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39252: LD_INT 0
39254: PPUSH
39255: PPUSH
39256: PPUSH
39257: PPUSH
39258: PPUSH
39259: PPUSH
39260: PPUSH
39261: PPUSH
39262: PPUSH
39263: PPUSH
39264: PPUSH
// result := false ;
39265: LD_ADDR_VAR 0 8
39269: PUSH
39270: LD_INT 0
39272: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39273: LD_VAR 0 5
39277: NOT
39278: PUSH
39279: LD_VAR 0 1
39283: NOT
39284: OR
39285: PUSH
39286: LD_VAR 0 2
39290: NOT
39291: OR
39292: PUSH
39293: LD_VAR 0 3
39297: NOT
39298: OR
39299: IFFALSE 39303
// exit ;
39301: GO 40117
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39303: LD_ADDR_VAR 0 14
39307: PUSH
39308: LD_VAR 0 1
39312: PPUSH
39313: LD_VAR 0 2
39317: PPUSH
39318: LD_VAR 0 3
39322: PPUSH
39323: LD_VAR 0 4
39327: PPUSH
39328: LD_VAR 0 5
39332: PUSH
39333: LD_INT 1
39335: ARRAY
39336: PPUSH
39337: CALL_OW 248
39341: PPUSH
39342: LD_INT 0
39344: PPUSH
39345: CALL 41354 0 6
39349: ST_TO_ADDR
// if not hexes then
39350: LD_VAR 0 14
39354: NOT
39355: IFFALSE 39359
// exit ;
39357: GO 40117
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39359: LD_ADDR_VAR 0 17
39363: PUSH
39364: LD_VAR 0 5
39368: PPUSH
39369: LD_INT 22
39371: PUSH
39372: LD_VAR 0 13
39376: PPUSH
39377: CALL_OW 255
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: LD_INT 30
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 30
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: LIST
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PPUSH
39418: CALL_OW 72
39422: ST_TO_ADDR
// for i = 1 to hexes do
39423: LD_ADDR_VAR 0 9
39427: PUSH
39428: DOUBLE
39429: LD_INT 1
39431: DEC
39432: ST_TO_ADDR
39433: LD_VAR 0 14
39437: PUSH
39438: FOR_TO
39439: IFFALSE 40115
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39441: LD_ADDR_VAR 0 13
39445: PUSH
39446: LD_VAR 0 14
39450: PUSH
39451: LD_VAR 0 9
39455: ARRAY
39456: PUSH
39457: LD_INT 1
39459: ARRAY
39460: PPUSH
39461: LD_VAR 0 14
39465: PUSH
39466: LD_VAR 0 9
39470: ARRAY
39471: PUSH
39472: LD_INT 2
39474: ARRAY
39475: PPUSH
39476: CALL_OW 428
39480: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39481: LD_VAR 0 14
39485: PUSH
39486: LD_VAR 0 9
39490: ARRAY
39491: PUSH
39492: LD_INT 1
39494: ARRAY
39495: PPUSH
39496: LD_VAR 0 14
39500: PUSH
39501: LD_VAR 0 9
39505: ARRAY
39506: PUSH
39507: LD_INT 2
39509: ARRAY
39510: PPUSH
39511: CALL_OW 351
39515: PUSH
39516: LD_VAR 0 14
39520: PUSH
39521: LD_VAR 0 9
39525: ARRAY
39526: PUSH
39527: LD_INT 1
39529: ARRAY
39530: PPUSH
39531: LD_VAR 0 14
39535: PUSH
39536: LD_VAR 0 9
39540: ARRAY
39541: PUSH
39542: LD_INT 2
39544: ARRAY
39545: PPUSH
39546: CALL_OW 488
39550: NOT
39551: OR
39552: PUSH
39553: LD_VAR 0 13
39557: PPUSH
39558: CALL_OW 247
39562: PUSH
39563: LD_INT 3
39565: EQUAL
39566: OR
39567: IFFALSE 39573
// exit ;
39569: POP
39570: POP
39571: GO 40117
// if not tmp then
39573: LD_VAR 0 13
39577: NOT
39578: IFFALSE 39582
// continue ;
39580: GO 39438
// result := true ;
39582: LD_ADDR_VAR 0 8
39586: PUSH
39587: LD_INT 1
39589: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39590: LD_VAR 0 6
39594: PUSH
39595: LD_VAR 0 13
39599: PPUSH
39600: CALL_OW 247
39604: PUSH
39605: LD_INT 2
39607: EQUAL
39608: AND
39609: PUSH
39610: LD_VAR 0 13
39614: PPUSH
39615: CALL_OW 263
39619: PUSH
39620: LD_INT 1
39622: EQUAL
39623: AND
39624: IFFALSE 39788
// begin if IsDrivenBy ( tmp ) then
39626: LD_VAR 0 13
39630: PPUSH
39631: CALL_OW 311
39635: IFFALSE 39639
// continue ;
39637: GO 39438
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39639: LD_VAR 0 6
39643: PPUSH
39644: LD_INT 3
39646: PUSH
39647: LD_INT 60
39649: PUSH
39650: EMPTY
39651: LIST
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 3
39659: PUSH
39660: LD_INT 55
39662: PUSH
39663: EMPTY
39664: LIST
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PPUSH
39674: CALL_OW 72
39678: IFFALSE 39786
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39680: LD_ADDR_VAR 0 18
39684: PUSH
39685: LD_VAR 0 6
39689: PPUSH
39690: LD_INT 3
39692: PUSH
39693: LD_INT 60
39695: PUSH
39696: EMPTY
39697: LIST
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 3
39705: PUSH
39706: LD_INT 55
39708: PUSH
39709: EMPTY
39710: LIST
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PPUSH
39720: CALL_OW 72
39724: PUSH
39725: LD_INT 1
39727: ARRAY
39728: ST_TO_ADDR
// if IsInUnit ( driver ) then
39729: LD_VAR 0 18
39733: PPUSH
39734: CALL_OW 310
39738: IFFALSE 39749
// ComExit ( driver ) ;
39740: LD_VAR 0 18
39744: PPUSH
39745: CALL 64538 0 1
// AddComEnterUnit ( driver , tmp ) ;
39749: LD_VAR 0 18
39753: PPUSH
39754: LD_VAR 0 13
39758: PPUSH
39759: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39763: LD_VAR 0 18
39767: PPUSH
39768: LD_VAR 0 7
39772: PPUSH
39773: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39777: LD_VAR 0 18
39781: PPUSH
39782: CALL_OW 181
// end ; continue ;
39786: GO 39438
// end ; if not cleaners or not tmp in cleaners then
39788: LD_VAR 0 6
39792: NOT
39793: PUSH
39794: LD_VAR 0 13
39798: PUSH
39799: LD_VAR 0 6
39803: IN
39804: NOT
39805: OR
39806: IFFALSE 40113
// begin if dep then
39808: LD_VAR 0 17
39812: IFFALSE 39948
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39814: LD_ADDR_VAR 0 16
39818: PUSH
39819: LD_VAR 0 17
39823: PUSH
39824: LD_INT 1
39826: ARRAY
39827: PPUSH
39828: CALL_OW 250
39832: PPUSH
39833: LD_VAR 0 17
39837: PUSH
39838: LD_INT 1
39840: ARRAY
39841: PPUSH
39842: CALL_OW 254
39846: PPUSH
39847: LD_INT 5
39849: PPUSH
39850: CALL_OW 272
39854: PUSH
39855: LD_VAR 0 17
39859: PUSH
39860: LD_INT 1
39862: ARRAY
39863: PPUSH
39864: CALL_OW 251
39868: PPUSH
39869: LD_VAR 0 17
39873: PUSH
39874: LD_INT 1
39876: ARRAY
39877: PPUSH
39878: CALL_OW 254
39882: PPUSH
39883: LD_INT 5
39885: PPUSH
39886: CALL_OW 273
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39895: LD_VAR 0 16
39899: PUSH
39900: LD_INT 1
39902: ARRAY
39903: PPUSH
39904: LD_VAR 0 16
39908: PUSH
39909: LD_INT 2
39911: ARRAY
39912: PPUSH
39913: CALL_OW 488
39917: IFFALSE 39948
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39919: LD_VAR 0 13
39923: PPUSH
39924: LD_VAR 0 16
39928: PUSH
39929: LD_INT 1
39931: ARRAY
39932: PPUSH
39933: LD_VAR 0 16
39937: PUSH
39938: LD_INT 2
39940: ARRAY
39941: PPUSH
39942: CALL_OW 111
// continue ;
39946: GO 39438
// end ; end ; r := GetDir ( tmp ) ;
39948: LD_ADDR_VAR 0 15
39952: PUSH
39953: LD_VAR 0 13
39957: PPUSH
39958: CALL_OW 254
39962: ST_TO_ADDR
// if r = 5 then
39963: LD_VAR 0 15
39967: PUSH
39968: LD_INT 5
39970: EQUAL
39971: IFFALSE 39981
// r := 0 ;
39973: LD_ADDR_VAR 0 15
39977: PUSH
39978: LD_INT 0
39980: ST_TO_ADDR
// for j = r to 5 do
39981: LD_ADDR_VAR 0 10
39985: PUSH
39986: DOUBLE
39987: LD_VAR 0 15
39991: DEC
39992: ST_TO_ADDR
39993: LD_INT 5
39995: PUSH
39996: FOR_TO
39997: IFFALSE 40111
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39999: LD_ADDR_VAR 0 11
40003: PUSH
40004: LD_VAR 0 13
40008: PPUSH
40009: CALL_OW 250
40013: PPUSH
40014: LD_VAR 0 10
40018: PPUSH
40019: LD_INT 2
40021: PPUSH
40022: CALL_OW 272
40026: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40027: LD_ADDR_VAR 0 12
40031: PUSH
40032: LD_VAR 0 13
40036: PPUSH
40037: CALL_OW 251
40041: PPUSH
40042: LD_VAR 0 10
40046: PPUSH
40047: LD_INT 2
40049: PPUSH
40050: CALL_OW 273
40054: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40055: LD_VAR 0 11
40059: PPUSH
40060: LD_VAR 0 12
40064: PPUSH
40065: CALL_OW 488
40069: PUSH
40070: LD_VAR 0 11
40074: PPUSH
40075: LD_VAR 0 12
40079: PPUSH
40080: CALL_OW 428
40084: NOT
40085: AND
40086: IFFALSE 40109
// begin ComMoveXY ( tmp , _x , _y ) ;
40088: LD_VAR 0 13
40092: PPUSH
40093: LD_VAR 0 11
40097: PPUSH
40098: LD_VAR 0 12
40102: PPUSH
40103: CALL_OW 111
// break ;
40107: GO 40111
// end ; end ;
40109: GO 39996
40111: POP
40112: POP
// end ; end ;
40113: GO 39438
40115: POP
40116: POP
// end ;
40117: LD_VAR 0 8
40121: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40122: LD_INT 0
40124: PPUSH
// result := true ;
40125: LD_ADDR_VAR 0 3
40129: PUSH
40130: LD_INT 1
40132: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40133: LD_VAR 0 2
40137: PUSH
40138: LD_INT 24
40140: DOUBLE
40141: EQUAL
40142: IFTRUE 40152
40144: LD_INT 33
40146: DOUBLE
40147: EQUAL
40148: IFTRUE 40152
40150: GO 40177
40152: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40153: LD_ADDR_VAR 0 3
40157: PUSH
40158: LD_INT 32
40160: PPUSH
40161: LD_VAR 0 1
40165: PPUSH
40166: CALL_OW 321
40170: PUSH
40171: LD_INT 2
40173: EQUAL
40174: ST_TO_ADDR
40175: GO 40497
40177: LD_INT 20
40179: DOUBLE
40180: EQUAL
40181: IFTRUE 40185
40183: GO 40210
40185: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40186: LD_ADDR_VAR 0 3
40190: PUSH
40191: LD_INT 6
40193: PPUSH
40194: LD_VAR 0 1
40198: PPUSH
40199: CALL_OW 321
40203: PUSH
40204: LD_INT 2
40206: EQUAL
40207: ST_TO_ADDR
40208: GO 40497
40210: LD_INT 22
40212: DOUBLE
40213: EQUAL
40214: IFTRUE 40224
40216: LD_INT 36
40218: DOUBLE
40219: EQUAL
40220: IFTRUE 40224
40222: GO 40249
40224: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40225: LD_ADDR_VAR 0 3
40229: PUSH
40230: LD_INT 15
40232: PPUSH
40233: LD_VAR 0 1
40237: PPUSH
40238: CALL_OW 321
40242: PUSH
40243: LD_INT 2
40245: EQUAL
40246: ST_TO_ADDR
40247: GO 40497
40249: LD_INT 30
40251: DOUBLE
40252: EQUAL
40253: IFTRUE 40257
40255: GO 40282
40257: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40258: LD_ADDR_VAR 0 3
40262: PUSH
40263: LD_INT 20
40265: PPUSH
40266: LD_VAR 0 1
40270: PPUSH
40271: CALL_OW 321
40275: PUSH
40276: LD_INT 2
40278: EQUAL
40279: ST_TO_ADDR
40280: GO 40497
40282: LD_INT 28
40284: DOUBLE
40285: EQUAL
40286: IFTRUE 40296
40288: LD_INT 21
40290: DOUBLE
40291: EQUAL
40292: IFTRUE 40296
40294: GO 40321
40296: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40297: LD_ADDR_VAR 0 3
40301: PUSH
40302: LD_INT 21
40304: PPUSH
40305: LD_VAR 0 1
40309: PPUSH
40310: CALL_OW 321
40314: PUSH
40315: LD_INT 2
40317: EQUAL
40318: ST_TO_ADDR
40319: GO 40497
40321: LD_INT 16
40323: DOUBLE
40324: EQUAL
40325: IFTRUE 40329
40327: GO 40356
40329: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40330: LD_ADDR_VAR 0 3
40334: PUSH
40335: LD_EXP 37
40339: PPUSH
40340: LD_VAR 0 1
40344: PPUSH
40345: CALL_OW 321
40349: PUSH
40350: LD_INT 2
40352: EQUAL
40353: ST_TO_ADDR
40354: GO 40497
40356: LD_INT 19
40358: DOUBLE
40359: EQUAL
40360: IFTRUE 40370
40362: LD_INT 23
40364: DOUBLE
40365: EQUAL
40366: IFTRUE 40370
40368: GO 40397
40370: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40371: LD_ADDR_VAR 0 3
40375: PUSH
40376: LD_EXP 36
40380: PPUSH
40381: LD_VAR 0 1
40385: PPUSH
40386: CALL_OW 321
40390: PUSH
40391: LD_INT 2
40393: EQUAL
40394: ST_TO_ADDR
40395: GO 40497
40397: LD_INT 17
40399: DOUBLE
40400: EQUAL
40401: IFTRUE 40405
40403: GO 40430
40405: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40406: LD_ADDR_VAR 0 3
40410: PUSH
40411: LD_INT 39
40413: PPUSH
40414: LD_VAR 0 1
40418: PPUSH
40419: CALL_OW 321
40423: PUSH
40424: LD_INT 2
40426: EQUAL
40427: ST_TO_ADDR
40428: GO 40497
40430: LD_INT 18
40432: DOUBLE
40433: EQUAL
40434: IFTRUE 40438
40436: GO 40463
40438: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40439: LD_ADDR_VAR 0 3
40443: PUSH
40444: LD_INT 40
40446: PPUSH
40447: LD_VAR 0 1
40451: PPUSH
40452: CALL_OW 321
40456: PUSH
40457: LD_INT 2
40459: EQUAL
40460: ST_TO_ADDR
40461: GO 40497
40463: LD_INT 27
40465: DOUBLE
40466: EQUAL
40467: IFTRUE 40471
40469: GO 40496
40471: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40472: LD_ADDR_VAR 0 3
40476: PUSH
40477: LD_INT 35
40479: PPUSH
40480: LD_VAR 0 1
40484: PPUSH
40485: CALL_OW 321
40489: PUSH
40490: LD_INT 2
40492: EQUAL
40493: ST_TO_ADDR
40494: GO 40497
40496: POP
// end ;
40497: LD_VAR 0 3
40501: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40502: LD_INT 0
40504: PPUSH
40505: PPUSH
40506: PPUSH
40507: PPUSH
40508: PPUSH
40509: PPUSH
40510: PPUSH
40511: PPUSH
40512: PPUSH
40513: PPUSH
40514: PPUSH
// result := false ;
40515: LD_ADDR_VAR 0 6
40519: PUSH
40520: LD_INT 0
40522: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40523: LD_VAR 0 1
40527: NOT
40528: PUSH
40529: LD_VAR 0 1
40533: PPUSH
40534: CALL_OW 266
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: IN
40549: NOT
40550: OR
40551: PUSH
40552: LD_VAR 0 2
40556: NOT
40557: OR
40558: PUSH
40559: LD_VAR 0 5
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: LD_INT 3
40575: PUSH
40576: LD_INT 4
40578: PUSH
40579: LD_INT 5
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: IN
40590: NOT
40591: OR
40592: PUSH
40593: LD_VAR 0 3
40597: PPUSH
40598: LD_VAR 0 4
40602: PPUSH
40603: CALL_OW 488
40607: NOT
40608: OR
40609: IFFALSE 40613
// exit ;
40611: GO 41349
// side := GetSide ( depot ) ;
40613: LD_ADDR_VAR 0 9
40617: PUSH
40618: LD_VAR 0 1
40622: PPUSH
40623: CALL_OW 255
40627: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40628: LD_VAR 0 9
40632: PPUSH
40633: LD_VAR 0 2
40637: PPUSH
40638: CALL 40122 0 2
40642: NOT
40643: IFFALSE 40647
// exit ;
40645: GO 41349
// pom := GetBase ( depot ) ;
40647: LD_ADDR_VAR 0 10
40651: PUSH
40652: LD_VAR 0 1
40656: PPUSH
40657: CALL_OW 274
40661: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40662: LD_ADDR_VAR 0 11
40666: PUSH
40667: LD_VAR 0 2
40671: PPUSH
40672: LD_VAR 0 1
40676: PPUSH
40677: CALL_OW 248
40681: PPUSH
40682: CALL_OW 450
40686: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40687: LD_VAR 0 10
40691: PPUSH
40692: LD_INT 1
40694: PPUSH
40695: CALL_OW 275
40699: PUSH
40700: LD_VAR 0 11
40704: PUSH
40705: LD_INT 1
40707: ARRAY
40708: GREATEREQUAL
40709: PUSH
40710: LD_VAR 0 10
40714: PPUSH
40715: LD_INT 2
40717: PPUSH
40718: CALL_OW 275
40722: PUSH
40723: LD_VAR 0 11
40727: PUSH
40728: LD_INT 2
40730: ARRAY
40731: GREATEREQUAL
40732: AND
40733: PUSH
40734: LD_VAR 0 10
40738: PPUSH
40739: LD_INT 3
40741: PPUSH
40742: CALL_OW 275
40746: PUSH
40747: LD_VAR 0 11
40751: PUSH
40752: LD_INT 3
40754: ARRAY
40755: GREATEREQUAL
40756: AND
40757: NOT
40758: IFFALSE 40762
// exit ;
40760: GO 41349
// if GetBType ( depot ) = b_depot then
40762: LD_VAR 0 1
40766: PPUSH
40767: CALL_OW 266
40771: PUSH
40772: LD_INT 0
40774: EQUAL
40775: IFFALSE 40787
// dist := 28 else
40777: LD_ADDR_VAR 0 14
40781: PUSH
40782: LD_INT 28
40784: ST_TO_ADDR
40785: GO 40795
// dist := 36 ;
40787: LD_ADDR_VAR 0 14
40791: PUSH
40792: LD_INT 36
40794: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40795: LD_VAR 0 1
40799: PPUSH
40800: LD_VAR 0 3
40804: PPUSH
40805: LD_VAR 0 4
40809: PPUSH
40810: CALL_OW 297
40814: PUSH
40815: LD_VAR 0 14
40819: GREATER
40820: IFFALSE 40824
// exit ;
40822: GO 41349
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40824: LD_ADDR_VAR 0 12
40828: PUSH
40829: LD_VAR 0 2
40833: PPUSH
40834: LD_VAR 0 3
40838: PPUSH
40839: LD_VAR 0 4
40843: PPUSH
40844: LD_VAR 0 5
40848: PPUSH
40849: LD_VAR 0 1
40853: PPUSH
40854: CALL_OW 248
40858: PPUSH
40859: LD_INT 0
40861: PPUSH
40862: CALL 41354 0 6
40866: ST_TO_ADDR
// if not hexes then
40867: LD_VAR 0 12
40871: NOT
40872: IFFALSE 40876
// exit ;
40874: GO 41349
// hex := GetHexInfo ( x , y ) ;
40876: LD_ADDR_VAR 0 15
40880: PUSH
40881: LD_VAR 0 3
40885: PPUSH
40886: LD_VAR 0 4
40890: PPUSH
40891: CALL_OW 546
40895: ST_TO_ADDR
// if hex [ 1 ] then
40896: LD_VAR 0 15
40900: PUSH
40901: LD_INT 1
40903: ARRAY
40904: IFFALSE 40908
// exit ;
40906: GO 41349
// height := hex [ 2 ] ;
40908: LD_ADDR_VAR 0 13
40912: PUSH
40913: LD_VAR 0 15
40917: PUSH
40918: LD_INT 2
40920: ARRAY
40921: ST_TO_ADDR
// for i = 1 to hexes do
40922: LD_ADDR_VAR 0 7
40926: PUSH
40927: DOUBLE
40928: LD_INT 1
40930: DEC
40931: ST_TO_ADDR
40932: LD_VAR 0 12
40936: PUSH
40937: FOR_TO
40938: IFFALSE 41268
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40940: LD_VAR 0 12
40944: PUSH
40945: LD_VAR 0 7
40949: ARRAY
40950: PUSH
40951: LD_INT 1
40953: ARRAY
40954: PPUSH
40955: LD_VAR 0 12
40959: PUSH
40960: LD_VAR 0 7
40964: ARRAY
40965: PUSH
40966: LD_INT 2
40968: ARRAY
40969: PPUSH
40970: CALL_OW 488
40974: NOT
40975: PUSH
40976: LD_VAR 0 12
40980: PUSH
40981: LD_VAR 0 7
40985: ARRAY
40986: PUSH
40987: LD_INT 1
40989: ARRAY
40990: PPUSH
40991: LD_VAR 0 12
40995: PUSH
40996: LD_VAR 0 7
41000: ARRAY
41001: PUSH
41002: LD_INT 2
41004: ARRAY
41005: PPUSH
41006: CALL_OW 428
41010: PUSH
41011: LD_INT 0
41013: GREATER
41014: OR
41015: PUSH
41016: LD_VAR 0 12
41020: PUSH
41021: LD_VAR 0 7
41025: ARRAY
41026: PUSH
41027: LD_INT 1
41029: ARRAY
41030: PPUSH
41031: LD_VAR 0 12
41035: PUSH
41036: LD_VAR 0 7
41040: ARRAY
41041: PUSH
41042: LD_INT 2
41044: ARRAY
41045: PPUSH
41046: CALL_OW 351
41050: OR
41051: IFFALSE 41057
// exit ;
41053: POP
41054: POP
41055: GO 41349
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41057: LD_ADDR_VAR 0 8
41061: PUSH
41062: LD_VAR 0 12
41066: PUSH
41067: LD_VAR 0 7
41071: ARRAY
41072: PUSH
41073: LD_INT 1
41075: ARRAY
41076: PPUSH
41077: LD_VAR 0 12
41081: PUSH
41082: LD_VAR 0 7
41086: ARRAY
41087: PUSH
41088: LD_INT 2
41090: ARRAY
41091: PPUSH
41092: CALL_OW 546
41096: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41097: LD_VAR 0 8
41101: PUSH
41102: LD_INT 1
41104: ARRAY
41105: PUSH
41106: LD_VAR 0 8
41110: PUSH
41111: LD_INT 2
41113: ARRAY
41114: PUSH
41115: LD_VAR 0 13
41119: PUSH
41120: LD_INT 2
41122: PLUS
41123: GREATER
41124: OR
41125: PUSH
41126: LD_VAR 0 8
41130: PUSH
41131: LD_INT 2
41133: ARRAY
41134: PUSH
41135: LD_VAR 0 13
41139: PUSH
41140: LD_INT 2
41142: MINUS
41143: LESS
41144: OR
41145: PUSH
41146: LD_VAR 0 8
41150: PUSH
41151: LD_INT 3
41153: ARRAY
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: LD_INT 8
41160: PUSH
41161: LD_INT 9
41163: PUSH
41164: LD_INT 10
41166: PUSH
41167: LD_INT 11
41169: PUSH
41170: LD_INT 12
41172: PUSH
41173: LD_INT 13
41175: PUSH
41176: LD_INT 16
41178: PUSH
41179: LD_INT 17
41181: PUSH
41182: LD_INT 18
41184: PUSH
41185: LD_INT 19
41187: PUSH
41188: LD_INT 20
41190: PUSH
41191: LD_INT 21
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: IN
41209: NOT
41210: OR
41211: PUSH
41212: LD_VAR 0 8
41216: PUSH
41217: LD_INT 5
41219: ARRAY
41220: NOT
41221: OR
41222: PUSH
41223: LD_VAR 0 8
41227: PUSH
41228: LD_INT 6
41230: ARRAY
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: LD_INT 2
41237: PUSH
41238: LD_INT 7
41240: PUSH
41241: LD_INT 9
41243: PUSH
41244: LD_INT 10
41246: PUSH
41247: LD_INT 11
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: IN
41258: NOT
41259: OR
41260: IFFALSE 41266
// exit ;
41262: POP
41263: POP
41264: GO 41349
// end ;
41266: GO 40937
41268: POP
41269: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41270: LD_VAR 0 9
41274: PPUSH
41275: LD_VAR 0 3
41279: PPUSH
41280: LD_VAR 0 4
41284: PPUSH
41285: LD_INT 20
41287: PPUSH
41288: CALL 33295 0 4
41292: PUSH
41293: LD_INT 4
41295: ARRAY
41296: IFFALSE 41300
// exit ;
41298: GO 41349
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41300: LD_VAR 0 2
41304: PUSH
41305: LD_INT 29
41307: PUSH
41308: LD_INT 30
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: IN
41315: PUSH
41316: LD_VAR 0 3
41320: PPUSH
41321: LD_VAR 0 4
41325: PPUSH
41326: LD_VAR 0 9
41330: PPUSH
41331: CALL_OW 440
41335: NOT
41336: AND
41337: IFFALSE 41341
// exit ;
41339: GO 41349
// result := true ;
41341: LD_ADDR_VAR 0 6
41345: PUSH
41346: LD_INT 1
41348: ST_TO_ADDR
// end ;
41349: LD_VAR 0 6
41353: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41354: LD_INT 0
41356: PPUSH
41357: PPUSH
41358: PPUSH
41359: PPUSH
41360: PPUSH
41361: PPUSH
41362: PPUSH
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
41368: PPUSH
41369: PPUSH
41370: PPUSH
41371: PPUSH
41372: PPUSH
41373: PPUSH
41374: PPUSH
41375: PPUSH
41376: PPUSH
41377: PPUSH
41378: PPUSH
41379: PPUSH
41380: PPUSH
41381: PPUSH
41382: PPUSH
41383: PPUSH
41384: PPUSH
41385: PPUSH
41386: PPUSH
41387: PPUSH
41388: PPUSH
41389: PPUSH
41390: PPUSH
41391: PPUSH
41392: PPUSH
41393: PPUSH
41394: PPUSH
41395: PPUSH
41396: PPUSH
41397: PPUSH
41398: PPUSH
41399: PPUSH
41400: PPUSH
41401: PPUSH
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
41406: PPUSH
41407: PPUSH
41408: PPUSH
41409: PPUSH
41410: PPUSH
41411: PPUSH
41412: PPUSH
41413: PPUSH
// result = [ ] ;
41414: LD_ADDR_VAR 0 7
41418: PUSH
41419: EMPTY
41420: ST_TO_ADDR
// temp_list = [ ] ;
41421: LD_ADDR_VAR 0 9
41425: PUSH
41426: EMPTY
41427: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41428: LD_VAR 0 4
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: LD_INT 4
41447: PUSH
41448: LD_INT 5
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: IN
41459: NOT
41460: PUSH
41461: LD_VAR 0 1
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: IN
41476: PUSH
41477: LD_VAR 0 5
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: LD_INT 2
41487: PUSH
41488: LD_INT 3
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: LIST
41495: IN
41496: NOT
41497: AND
41498: OR
41499: IFFALSE 41503
// exit ;
41501: GO 59894
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41503: LD_VAR 0 1
41507: PUSH
41508: LD_INT 6
41510: PUSH
41511: LD_INT 7
41513: PUSH
41514: LD_INT 8
41516: PUSH
41517: LD_INT 13
41519: PUSH
41520: LD_INT 12
41522: PUSH
41523: LD_INT 15
41525: PUSH
41526: LD_INT 11
41528: PUSH
41529: LD_INT 14
41531: PUSH
41532: LD_INT 10
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: IN
41546: IFFALSE 41556
// btype = b_lab ;
41548: LD_ADDR_VAR 0 1
41552: PUSH
41553: LD_INT 6
41555: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41556: LD_VAR 0 6
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: LIST
41574: IN
41575: NOT
41576: PUSH
41577: LD_VAR 0 1
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: LD_INT 3
41593: PUSH
41594: LD_INT 6
41596: PUSH
41597: LD_INT 36
41599: PUSH
41600: LD_INT 4
41602: PUSH
41603: LD_INT 5
41605: PUSH
41606: LD_INT 31
41608: PUSH
41609: LD_INT 32
41611: PUSH
41612: LD_INT 33
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: IN
41628: NOT
41629: PUSH
41630: LD_VAR 0 6
41634: PUSH
41635: LD_INT 1
41637: EQUAL
41638: AND
41639: OR
41640: PUSH
41641: LD_VAR 0 1
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: LD_INT 3
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: IN
41656: NOT
41657: PUSH
41658: LD_VAR 0 6
41662: PUSH
41663: LD_INT 2
41665: EQUAL
41666: AND
41667: OR
41668: IFFALSE 41678
// mode = 0 ;
41670: LD_ADDR_VAR 0 6
41674: PUSH
41675: LD_INT 0
41677: ST_TO_ADDR
// case mode of 0 :
41678: LD_VAR 0 6
41682: PUSH
41683: LD_INT 0
41685: DOUBLE
41686: EQUAL
41687: IFTRUE 41691
41689: GO 53144
41691: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41692: LD_ADDR_VAR 0 11
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: NEG
41762: PUSH
41763: LD_INT 1
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: NEG
41774: PUSH
41775: LD_INT 2
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: LD_INT 2
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: LD_INT 1
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 3
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: LD_INT 2
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41885: LD_ADDR_VAR 0 12
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 2
42019: NEG
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 3
42042: NEG
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 3
42053: NEG
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42081: LD_ADDR_VAR 0 13
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: NEG
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: LD_INT 2
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 2
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 2
42216: NEG
42217: PUSH
42218: LD_INT 2
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 2
42228: NEG
42229: PUSH
42230: LD_INT 3
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 3
42240: NEG
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 3
42252: NEG
42253: PUSH
42254: LD_INT 3
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42280: LD_ADDR_VAR 0 14
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: NEG
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 2
42376: NEG
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: LD_INT 2
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: LD_INT 2
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: LD_INT 3
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 3
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 2
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42476: LD_ADDR_VAR 0 15
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 2
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 2
42599: NEG
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: NEG
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 2
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 3
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 3
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42669: LD_ADDR_VAR 0 16
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 2
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 2
42792: NEG
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 2
42804: NEG
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 3
42826: PUSH
42827: LD_INT 3
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: LD_INT 3
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42862: LD_ADDR_VAR 0 17
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: LD_INT 2
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43092: LD_ADDR_VAR 0 18
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 2
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 2
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: LD_INT 2
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43322: LD_ADDR_VAR 0 19
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 2
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: LD_INT 2
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43552: LD_ADDR_VAR 0 20
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: LD_INT 2
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 2
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: LD_INT 2
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: LD_INT 2
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43782: LD_ADDR_VAR 0 21
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: LD_INT 2
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44012: LD_ADDR_VAR 0 22
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: LD_INT 2
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: LD_INT 2
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 2
44188: NEG
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 2
44211: NEG
44212: PUSH
44213: LD_INT 2
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44242: LD_ADDR_VAR 0 23
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: LD_INT 3
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 3
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: LD_INT 2
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44522: LD_ADDR_VAR 0 24
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: LD_INT 2
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 2
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 3
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 3
44765: PUSH
44766: LD_INT 2
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44798: LD_ADDR_VAR 0 25
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 2
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 2
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: NEG
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 2
44985: NEG
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: NEG
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 3
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 3
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: LD_INT 3
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 3
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45072: LD_ADDR_VAR 0 26
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: LD_INT 2
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: NEG
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: NEG
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: LD_INT 3
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 3
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45348: LD_ADDR_VAR 0 27
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 2
45570: NEG
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 3
45581: NEG
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 3
45593: NEG
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45628: LD_ADDR_VAR 0 28
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 2
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: LD_INT 3
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: LD_INT 3
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 3
45863: NEG
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 3
45875: NEG
45876: PUSH
45877: LD_INT 2
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45910: LD_ADDR_VAR 0 29
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: LD_INT 2
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 2
46076: NEG
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 2
46100: NEG
46101: PUSH
46102: LD_INT 3
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 3
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: LD_INT 3
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 3
46154: NEG
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46189: LD_ADDR_VAR 0 30
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: LD_INT 3
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 3
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: LD_INT 3
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 3
46432: NEG
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46467: LD_ADDR_VAR 0 31
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 2
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: LD_INT 3
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 3
46710: NEG
46711: PUSH
46712: LD_INT 2
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46745: LD_ADDR_VAR 0 32
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: LD_INT 3
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 3
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: LD_INT 3
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 3
46988: NEG
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47023: LD_ADDR_VAR 0 33
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: LD_INT 2
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: LD_INT 3
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 3
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 3
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 3
47267: NEG
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47302: LD_ADDR_VAR 0 34
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: NEG
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 2
47481: NEG
47482: PUSH
47483: LD_INT 2
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: LD_INT 3
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 3
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: LD_INT 3
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 2
47536: NEG
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 3
47547: NEG
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47582: LD_ADDR_VAR 0 35
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47694: LD_ADDR_VAR 0 36
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47806: LD_ADDR_VAR 0 37
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47918: LD_ADDR_VAR 0 38
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: NEG
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48030: LD_ADDR_VAR 0 39
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 2
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48142: LD_ADDR_VAR 0 40
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48254: LD_ADDR_VAR 0 41
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: NEG
48433: PUSH
48434: LD_INT 2
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: LD_INT 3
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 3
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 3
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 3
48497: PUSH
48498: LD_INT 3
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: LD_INT 3
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 2
48517: NEG
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 3
48528: NEG
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 3
48539: NEG
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 3
48551: NEG
48552: PUSH
48553: LD_INT 2
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 3
48563: NEG
48564: PUSH
48565: LD_INT 3
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48604: LD_ADDR_VAR 0 42
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: NEG
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: LD_INT 3
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: LD_INT 3
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: LD_INT 3
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 3
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 3
48850: PUSH
48851: LD_INT 3
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 2
48860: PUSH
48861: LD_INT 3
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: LD_INT 3
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 3
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 2
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 3
48901: NEG
48902: PUSH
48903: LD_INT 2
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 3
48913: NEG
48914: PUSH
48915: LD_INT 3
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48954: LD_ADDR_VAR 0 43
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 2
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 2
49120: NEG
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 3
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: LD_INT 3
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 3
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 3
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: LD_INT 3
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: LD_INT 3
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 3
49250: NEG
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 3
49261: NEG
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49302: LD_ADDR_VAR 0 44
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 2
49468: NEG
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: LD_INT 2
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: LD_INT 3
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 3
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 3
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 3
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 3
49545: PUSH
49546: LD_INT 3
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: LD_INT 3
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 3
49576: NEG
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 3
49599: NEG
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 3
49611: NEG
49612: PUSH
49613: LD_INT 3
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49652: LD_ADDR_VAR 0 45
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 2
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 2
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: LD_INT 3
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 3
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 3
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 3
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 3
49898: PUSH
49899: LD_INT 3
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 3
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 3
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 3
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 3
49949: NEG
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 3
49961: NEG
49962: PUSH
49963: LD_INT 3
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50002: LD_ADDR_VAR 0 46
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: LD_INT 2
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: LD_INT 3
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 3
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 3
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 3
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 3
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 3
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: LD_INT 2
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 3
50298: NEG
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 3
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50350: LD_ADDR_VAR 0 47
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50501: LD_ADDR_VAR 0 48
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50648: LD_ADDR_VAR 0 49
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50792: LD_ADDR_VAR 0 50
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50936: LD_ADDR_VAR 0 51
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: NEG
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51083: LD_ADDR_VAR 0 52
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: NEG
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51234: LD_ADDR_VAR 0 53
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51464: LD_ADDR_VAR 0 54
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 2
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 2
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51694: LD_ADDR_VAR 0 55
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 2
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 2
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 2
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51924: LD_ADDR_VAR 0 56
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 2
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 2
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 2
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 2
52123: NEG
52124: PUSH
52125: LD_INT 2
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52154: LD_ADDR_VAR 0 57
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 2
52353: NEG
52354: PUSH
52355: LD_INT 2
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52384: LD_ADDR_VAR 0 58
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 2
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: LD_INT 2
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 2
52583: NEG
52584: PUSH
52585: LD_INT 2
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52614: LD_ADDR_VAR 0 59
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52702: LD_ADDR_VAR 0 60
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52790: LD_ADDR_VAR 0 61
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52878: LD_ADDR_VAR 0 62
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52966: LD_ADDR_VAR 0 63
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53054: LD_ADDR_VAR 0 64
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: ST_TO_ADDR
// end ; 1 :
53142: GO 59039
53144: LD_INT 1
53146: DOUBLE
53147: EQUAL
53148: IFTRUE 53152
53150: GO 55775
53152: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53153: LD_ADDR_VAR 0 11
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: LD_INT 3
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: LD_INT 3
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: LD_INT 2
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: LIST
53196: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53197: LD_ADDR_VAR 0 12
53201: PUSH
53202: LD_INT 2
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 3
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 3
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: LIST
53237: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53238: LD_ADDR_VAR 0 13
53242: PUSH
53243: LD_INT 3
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 3
53255: PUSH
53256: LD_INT 3
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: LD_INT 3
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: LIST
53277: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53278: LD_ADDR_VAR 0 14
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 3
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 3
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: LIST
53318: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53319: LD_ADDR_VAR 0 15
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 3
53337: NEG
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 3
53348: NEG
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: LIST
53362: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53363: LD_ADDR_VAR 0 16
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 3
53382: NEG
53383: PUSH
53384: LD_INT 2
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 3
53394: NEG
53395: PUSH
53396: LD_INT 3
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: LIST
53408: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53409: LD_ADDR_VAR 0 17
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 3
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 3
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: LD_INT 2
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53453: LD_ADDR_VAR 0 18
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 3
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 3
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: LIST
53493: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53494: LD_ADDR_VAR 0 19
53498: PUSH
53499: LD_INT 3
53501: PUSH
53502: LD_INT 2
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 3
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: LD_INT 3
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: LIST
53533: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53534: LD_ADDR_VAR 0 20
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 3
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 3
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: LIST
53574: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53575: LD_ADDR_VAR 0 21
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 3
53593: NEG
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 3
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: LIST
53618: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53619: LD_ADDR_VAR 0 22
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 3
53638: NEG
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 3
53650: NEG
53651: PUSH
53652: LD_INT 3
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: LIST
53664: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53665: LD_ADDR_VAR 0 23
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 3
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: LD_INT 4
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: LD_INT 3
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: LIST
53708: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53709: LD_ADDR_VAR 0 24
53713: PUSH
53714: LD_INT 3
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 3
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 4
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: LIST
53749: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53750: LD_ADDR_VAR 0 25
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: LD_INT 3
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 4
53767: PUSH
53768: LD_INT 3
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: LD_INT 4
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: LIST
53789: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53790: LD_ADDR_VAR 0 26
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 4
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 3
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: LIST
53830: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53831: LD_ADDR_VAR 0 27
53835: PUSH
53836: LD_INT 3
53838: NEG
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 3
53849: NEG
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 4
53860: NEG
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: LIST
53874: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53875: LD_ADDR_VAR 0 28
53879: PUSH
53880: LD_INT 3
53882: NEG
53883: PUSH
53884: LD_INT 3
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 3
53894: NEG
53895: PUSH
53896: LD_INT 4
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 4
53906: NEG
53907: PUSH
53908: LD_INT 3
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: LIST
53920: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53921: LD_ADDR_VAR 0 29
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 3
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: LD_INT 3
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 4
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 4
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 3
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: LD_INT 5
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 5
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: LD_INT 4
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: LD_INT 6
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: LD_INT 6
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 5
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54076: LD_ADDR_VAR 0 30
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 3
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 3
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 4
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 4
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 4
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 5
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 5
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 5
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 6
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 6
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54219: LD_ADDR_VAR 0 31
54223: PUSH
54224: LD_INT 3
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 3
54236: PUSH
54237: LD_INT 3
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: LD_INT 3
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 4
54256: PUSH
54257: LD_INT 3
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 4
54266: PUSH
54267: LD_INT 4
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 3
54276: PUSH
54277: LD_INT 4
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 5
54286: PUSH
54287: LD_INT 4
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 5
54296: PUSH
54297: LD_INT 5
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 4
54306: PUSH
54307: LD_INT 5
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 6
54316: PUSH
54317: LD_INT 5
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 6
54326: PUSH
54327: LD_INT 6
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 5
54336: PUSH
54337: LD_INT 6
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54358: LD_ADDR_VAR 0 32
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 3
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 3
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: LD_INT 4
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: LD_INT 4
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 3
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: LD_INT 5
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 5
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: LD_INT 4
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 6
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 6
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 5
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54501: LD_ADDR_VAR 0 33
54505: PUSH
54506: LD_INT 2
54508: NEG
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 3
54519: NEG
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 3
54530: NEG
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 4
54553: NEG
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 4
54564: NEG
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 4
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 5
54587: NEG
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 5
54598: NEG
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 5
54610: NEG
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 6
54621: NEG
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 6
54632: NEG
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54656: LD_ADDR_VAR 0 34
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: LD_INT 3
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 3
54675: NEG
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 3
54687: NEG
54688: PUSH
54689: LD_INT 3
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: LD_INT 4
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 4
54711: NEG
54712: PUSH
54713: LD_INT 3
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 4
54723: NEG
54724: PUSH
54725: LD_INT 4
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 4
54735: NEG
54736: PUSH
54737: LD_INT 5
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 5
54747: NEG
54748: PUSH
54749: LD_INT 4
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 5
54759: NEG
54760: PUSH
54761: LD_INT 5
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 5
54771: NEG
54772: PUSH
54773: LD_INT 6
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 6
54783: NEG
54784: PUSH
54785: LD_INT 5
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 6
54795: NEG
54796: PUSH
54797: LD_INT 6
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54819: LD_ADDR_VAR 0 41
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: LD_INT 3
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54863: LD_ADDR_VAR 0 42
54867: PUSH
54868: LD_INT 2
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 3
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: LIST
54903: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54904: LD_ADDR_VAR 0 43
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 3
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: LD_INT 3
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: LIST
54943: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54944: LD_ADDR_VAR 0 44
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 3
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: LIST
54984: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54985: LD_ADDR_VAR 0 45
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 3
55014: NEG
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55029: LD_ADDR_VAR 0 46
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: LD_INT 3
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: LIST
55074: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55075: LD_ADDR_VAR 0 47
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 3
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55108: LD_ADDR_VAR 0 48
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55139: LD_ADDR_VAR 0 49
55143: PUSH
55144: LD_INT 3
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 3
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55168: LD_ADDR_VAR 0 50
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: LD_INT 3
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: LD_INT 3
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55197: LD_ADDR_VAR 0 51
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55228: LD_ADDR_VAR 0 52
55232: PUSH
55233: LD_INT 3
55235: NEG
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 3
55247: NEG
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55261: LD_ADDR_VAR 0 53
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: LD_INT 3
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: LD_INT 3
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: LIST
55304: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55305: LD_ADDR_VAR 0 54
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 3
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 3
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: LIST
55345: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55346: LD_ADDR_VAR 0 55
55350: PUSH
55351: LD_INT 3
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 3
55363: PUSH
55364: LD_INT 3
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: LD_INT 3
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55386: LD_ADDR_VAR 0 56
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 3
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 3
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 2
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: LIST
55426: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55427: LD_ADDR_VAR 0 57
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 3
55445: NEG
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 3
55456: NEG
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: LIST
55470: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55471: LD_ADDR_VAR 0 58
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: LD_INT 3
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 3
55490: NEG
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: LD_INT 3
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: LIST
55516: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55517: LD_ADDR_VAR 0 59
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: LIST
55560: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55561: LD_ADDR_VAR 0 60
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: LIST
55601: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55602: LD_ADDR_VAR 0 61
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: LIST
55641: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55642: LD_ADDR_VAR 0 62
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: LD_INT 2
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: LIST
55682: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55683: LD_ADDR_VAR 0 63
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: LIST
55726: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55727: LD_ADDR_VAR 0 64
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: LD_INT 1
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: LD_INT 2
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: LIST
55772: ST_TO_ADDR
// end ; 2 :
55773: GO 59039
55775: LD_INT 2
55777: DOUBLE
55778: EQUAL
55779: IFTRUE 55783
55781: GO 59038
55783: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55784: LD_ADDR_VAR 0 29
55788: PUSH
55789: LD_INT 4
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 4
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 5
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 5
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 4
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 3
55863: PUSH
55864: LD_INT 2
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 5
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 3
55884: PUSH
55885: LD_INT 3
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 3
55894: PUSH
55895: LD_INT 2
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 4
55904: PUSH
55905: LD_INT 3
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 4
55914: PUSH
55915: LD_INT 4
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 3
55924: PUSH
55925: LD_INT 4
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: LD_INT 3
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 4
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: LD_INT 4
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: LD_INT 4
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 3
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 4
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: LD_INT 5
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 5
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: LD_INT 4
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 3
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: LD_INT 5
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 2
56056: NEG
56057: PUSH
56058: LD_INT 3
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 3
56067: NEG
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 3
56078: NEG
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: NEG
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: NEG
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 3
56112: NEG
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 4
56123: NEG
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 4
56134: NEG
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 4
56146: NEG
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 4
56169: NEG
56170: PUSH
56171: LD_INT 4
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 4
56181: NEG
56182: PUSH
56183: LD_INT 5
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 3
56193: NEG
56194: PUSH
56195: LD_INT 4
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: LD_INT 3
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 4
56217: NEG
56218: PUSH
56219: LD_INT 3
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 5
56229: NEG
56230: PUSH
56231: LD_INT 4
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 5
56241: NEG
56242: PUSH
56243: LD_INT 5
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 3
56253: NEG
56254: PUSH
56255: LD_INT 5
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 5
56265: NEG
56266: PUSH
56267: LD_INT 3
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56322: LD_ADDR_VAR 0 30
56326: PUSH
56327: LD_INT 4
56329: PUSH
56330: LD_INT 4
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 4
56339: PUSH
56340: LD_INT 3
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 5
56349: PUSH
56350: LD_INT 4
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 5
56359: PUSH
56360: LD_INT 5
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 4
56369: PUSH
56370: LD_INT 5
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 3
56379: PUSH
56380: LD_INT 4
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 3
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 5
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 3
56409: PUSH
56410: LD_INT 5
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 3
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 2
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: LD_INT 4
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 4
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: LD_INT 3
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: LD_INT 4
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 4
56512: NEG
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 4
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 3
56535: NEG
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 3
56546: NEG
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 4
56557: NEG
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 5
56568: NEG
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 5
56579: NEG
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 5
56591: NEG
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: LD_INT 2
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 3
56614: NEG
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: LD_INT 4
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: LD_INT 3
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 3
56662: NEG
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 4
56674: NEG
56675: PUSH
56676: LD_INT 3
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 4
56686: NEG
56687: PUSH
56688: LD_INT 4
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 2
56698: NEG
56699: PUSH
56700: LD_INT 4
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 4
56710: NEG
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: LD_INT 4
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 5
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 4
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 3
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 3
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: LD_INT 4
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: LD_INT 5
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: LD_INT 3
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 5
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56869: LD_ADDR_VAR 0 31
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 4
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 3
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: LD_INT 4
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: LD_INT 5
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: LD_INT 5
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: LD_INT 4
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: LD_INT 3
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: LD_INT 5
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: LD_INT 3
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 3
56969: NEG
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 3
56980: NEG
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 2
56992: NEG
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 2
57003: NEG
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 3
57014: NEG
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 4
57025: NEG
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 4
57036: NEG
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 4
57048: NEG
57049: PUSH
57050: LD_INT 2
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 4
57071: NEG
57072: PUSH
57073: LD_INT 4
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 4
57083: NEG
57084: PUSH
57085: LD_INT 5
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 3
57095: NEG
57096: PUSH
57097: LD_INT 4
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 3
57107: NEG
57108: PUSH
57109: LD_INT 3
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 4
57119: NEG
57120: PUSH
57121: LD_INT 3
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 5
57131: NEG
57132: PUSH
57133: LD_INT 4
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 5
57143: NEG
57144: PUSH
57145: LD_INT 5
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 3
57155: NEG
57156: PUSH
57157: LD_INT 5
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 5
57167: NEG
57168: PUSH
57169: LD_INT 3
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 3
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 4
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: LD_INT 3
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: LD_INT 3
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: LD_INT 4
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: LD_INT 4
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 4
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 4
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 5
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 5
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 4
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 3
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 3
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 3
57353: PUSH
57354: LD_INT 2
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 5
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57419: LD_ADDR_VAR 0 32
57423: PUSH
57424: LD_INT 4
57426: NEG
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 4
57437: NEG
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 3
57449: NEG
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 4
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 5
57482: NEG
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 5
57493: NEG
57494: PUSH
57495: LD_INT 1
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 5
57505: NEG
57506: PUSH
57507: LD_INT 2
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 3
57517: NEG
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 3
57528: NEG
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 3
57540: NEG
57541: PUSH
57542: LD_INT 4
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: NEG
57553: PUSH
57554: LD_INT 3
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: NEG
57565: PUSH
57566: LD_INT 2
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 3
57576: NEG
57577: PUSH
57578: LD_INT 2
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 4
57588: NEG
57589: PUSH
57590: LD_INT 3
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 4
57600: NEG
57601: PUSH
57602: LD_INT 4
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: LD_INT 4
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 4
57624: NEG
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: LD_INT 4
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 5
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: LD_INT 4
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: LD_INT 4
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: LD_INT 5
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: LD_INT 3
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: LD_INT 5
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 3
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 3
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 4
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 4
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 3
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: LD_INT 2
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 4
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 4
57831: PUSH
57832: LD_INT 4
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 4
57841: PUSH
57842: LD_INT 3
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 5
57851: PUSH
57852: LD_INT 4
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 5
57861: PUSH
57862: LD_INT 5
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 4
57871: PUSH
57872: LD_INT 5
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 3
57881: PUSH
57882: LD_INT 4
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 3
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 5
57901: PUSH
57902: LD_INT 3
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 3
57911: PUSH
57912: LD_INT 5
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57966: LD_ADDR_VAR 0 33
57970: PUSH
57971: LD_INT 4
57973: NEG
57974: PUSH
57975: LD_INT 4
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 4
57985: NEG
57986: PUSH
57987: LD_INT 5
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 3
57997: NEG
57998: PUSH
57999: LD_INT 4
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 3
58009: NEG
58010: PUSH
58011: LD_INT 3
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 4
58021: NEG
58022: PUSH
58023: LD_INT 3
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 5
58033: NEG
58034: PUSH
58035: LD_INT 4
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 5
58045: NEG
58046: PUSH
58047: LD_INT 5
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 3
58057: NEG
58058: PUSH
58059: LD_INT 5
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 5
58069: NEG
58070: PUSH
58071: LD_INT 3
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 3
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: LD_INT 4
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 4
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: LD_INT 4
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 4
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 4
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 5
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 5
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 4
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 3
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 3
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 3
58255: PUSH
58256: LD_INT 2
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 5
58266: PUSH
58267: LD_INT 2
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 3
58276: PUSH
58277: LD_INT 3
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 4
58296: PUSH
58297: LD_INT 3
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 4
58306: PUSH
58307: LD_INT 4
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 3
58316: PUSH
58317: LD_INT 4
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: LD_INT 3
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 4
58346: PUSH
58347: LD_INT 2
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: LD_INT 4
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: LD_INT 4
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 3
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: LD_INT 4
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: LD_INT 5
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: LD_INT 5
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: LD_INT 4
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: LD_INT 5
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: LD_INT 3
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58504: LD_ADDR_VAR 0 34
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: LD_INT 4
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 5
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 4
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: LD_INT 3
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: LD_INT 3
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: LD_INT 4
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: LD_INT 5
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: LD_INT 3
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: LD_INT 5
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 3
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 3
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 4
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 4
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 3
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 2
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: LD_INT 2
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 4
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 4
58706: PUSH
58707: LD_INT 4
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 4
58716: PUSH
58717: LD_INT 3
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 5
58726: PUSH
58727: LD_INT 4
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 5
58736: PUSH
58737: LD_INT 5
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 4
58746: PUSH
58747: LD_INT 5
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: LD_INT 4
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 3
58766: PUSH
58767: LD_INT 3
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 5
58776: PUSH
58777: LD_INT 3
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 3
58786: PUSH
58787: LD_INT 5
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: LD_INT 3
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 2
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: LD_INT 4
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: LD_INT 4
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: LD_INT 3
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 2
58868: PUSH
58869: LD_INT 4
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: NEG
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 4
58889: NEG
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 4
58900: NEG
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 3
58912: NEG
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 3
58923: NEG
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 4
58934: NEG
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 5
58945: NEG
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 5
58956: NEG
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 5
58968: NEG
58969: PUSH
58970: LD_INT 2
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 3
58980: NEG
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: ST_TO_ADDR
// end ; end ;
59036: GO 59039
59038: POP
// case btype of b_depot , b_warehouse :
59039: LD_VAR 0 1
59043: PUSH
59044: LD_INT 0
59046: DOUBLE
59047: EQUAL
59048: IFTRUE 59058
59050: LD_INT 1
59052: DOUBLE
59053: EQUAL
59054: IFTRUE 59058
59056: GO 59259
59058: POP
// case nation of nation_american :
59059: LD_VAR 0 5
59063: PUSH
59064: LD_INT 1
59066: DOUBLE
59067: EQUAL
59068: IFTRUE 59072
59070: GO 59128
59072: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59073: LD_ADDR_VAR 0 9
59077: PUSH
59078: LD_VAR 0 11
59082: PUSH
59083: LD_VAR 0 12
59087: PUSH
59088: LD_VAR 0 13
59092: PUSH
59093: LD_VAR 0 14
59097: PUSH
59098: LD_VAR 0 15
59102: PUSH
59103: LD_VAR 0 16
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: PUSH
59116: LD_VAR 0 4
59120: PUSH
59121: LD_INT 1
59123: PLUS
59124: ARRAY
59125: ST_TO_ADDR
59126: GO 59257
59128: LD_INT 2
59130: DOUBLE
59131: EQUAL
59132: IFTRUE 59136
59134: GO 59192
59136: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59137: LD_ADDR_VAR 0 9
59141: PUSH
59142: LD_VAR 0 17
59146: PUSH
59147: LD_VAR 0 18
59151: PUSH
59152: LD_VAR 0 19
59156: PUSH
59157: LD_VAR 0 20
59161: PUSH
59162: LD_VAR 0 21
59166: PUSH
59167: LD_VAR 0 22
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: PUSH
59180: LD_VAR 0 4
59184: PUSH
59185: LD_INT 1
59187: PLUS
59188: ARRAY
59189: ST_TO_ADDR
59190: GO 59257
59192: LD_INT 3
59194: DOUBLE
59195: EQUAL
59196: IFTRUE 59200
59198: GO 59256
59200: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59201: LD_ADDR_VAR 0 9
59205: PUSH
59206: LD_VAR 0 23
59210: PUSH
59211: LD_VAR 0 24
59215: PUSH
59216: LD_VAR 0 25
59220: PUSH
59221: LD_VAR 0 26
59225: PUSH
59226: LD_VAR 0 27
59230: PUSH
59231: LD_VAR 0 28
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: PUSH
59244: LD_VAR 0 4
59248: PUSH
59249: LD_INT 1
59251: PLUS
59252: ARRAY
59253: ST_TO_ADDR
59254: GO 59257
59256: POP
59257: GO 59812
59259: LD_INT 2
59261: DOUBLE
59262: EQUAL
59263: IFTRUE 59273
59265: LD_INT 3
59267: DOUBLE
59268: EQUAL
59269: IFTRUE 59273
59271: GO 59329
59273: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59274: LD_ADDR_VAR 0 9
59278: PUSH
59279: LD_VAR 0 29
59283: PUSH
59284: LD_VAR 0 30
59288: PUSH
59289: LD_VAR 0 31
59293: PUSH
59294: LD_VAR 0 32
59298: PUSH
59299: LD_VAR 0 33
59303: PUSH
59304: LD_VAR 0 34
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: PUSH
59317: LD_VAR 0 4
59321: PUSH
59322: LD_INT 1
59324: PLUS
59325: ARRAY
59326: ST_TO_ADDR
59327: GO 59812
59329: LD_INT 16
59331: DOUBLE
59332: EQUAL
59333: IFTRUE 59391
59335: LD_INT 17
59337: DOUBLE
59338: EQUAL
59339: IFTRUE 59391
59341: LD_INT 18
59343: DOUBLE
59344: EQUAL
59345: IFTRUE 59391
59347: LD_INT 19
59349: DOUBLE
59350: EQUAL
59351: IFTRUE 59391
59353: LD_INT 22
59355: DOUBLE
59356: EQUAL
59357: IFTRUE 59391
59359: LD_INT 20
59361: DOUBLE
59362: EQUAL
59363: IFTRUE 59391
59365: LD_INT 21
59367: DOUBLE
59368: EQUAL
59369: IFTRUE 59391
59371: LD_INT 23
59373: DOUBLE
59374: EQUAL
59375: IFTRUE 59391
59377: LD_INT 24
59379: DOUBLE
59380: EQUAL
59381: IFTRUE 59391
59383: LD_INT 25
59385: DOUBLE
59386: EQUAL
59387: IFTRUE 59391
59389: GO 59447
59391: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59392: LD_ADDR_VAR 0 9
59396: PUSH
59397: LD_VAR 0 35
59401: PUSH
59402: LD_VAR 0 36
59406: PUSH
59407: LD_VAR 0 37
59411: PUSH
59412: LD_VAR 0 38
59416: PUSH
59417: LD_VAR 0 39
59421: PUSH
59422: LD_VAR 0 40
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: PUSH
59435: LD_VAR 0 4
59439: PUSH
59440: LD_INT 1
59442: PLUS
59443: ARRAY
59444: ST_TO_ADDR
59445: GO 59812
59447: LD_INT 6
59449: DOUBLE
59450: EQUAL
59451: IFTRUE 59503
59453: LD_INT 7
59455: DOUBLE
59456: EQUAL
59457: IFTRUE 59503
59459: LD_INT 8
59461: DOUBLE
59462: EQUAL
59463: IFTRUE 59503
59465: LD_INT 13
59467: DOUBLE
59468: EQUAL
59469: IFTRUE 59503
59471: LD_INT 12
59473: DOUBLE
59474: EQUAL
59475: IFTRUE 59503
59477: LD_INT 15
59479: DOUBLE
59480: EQUAL
59481: IFTRUE 59503
59483: LD_INT 11
59485: DOUBLE
59486: EQUAL
59487: IFTRUE 59503
59489: LD_INT 14
59491: DOUBLE
59492: EQUAL
59493: IFTRUE 59503
59495: LD_INT 10
59497: DOUBLE
59498: EQUAL
59499: IFTRUE 59503
59501: GO 59559
59503: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59504: LD_ADDR_VAR 0 9
59508: PUSH
59509: LD_VAR 0 41
59513: PUSH
59514: LD_VAR 0 42
59518: PUSH
59519: LD_VAR 0 43
59523: PUSH
59524: LD_VAR 0 44
59528: PUSH
59529: LD_VAR 0 45
59533: PUSH
59534: LD_VAR 0 46
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: PUSH
59547: LD_VAR 0 4
59551: PUSH
59552: LD_INT 1
59554: PLUS
59555: ARRAY
59556: ST_TO_ADDR
59557: GO 59812
59559: LD_INT 36
59561: DOUBLE
59562: EQUAL
59563: IFTRUE 59567
59565: GO 59623
59567: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59568: LD_ADDR_VAR 0 9
59572: PUSH
59573: LD_VAR 0 47
59577: PUSH
59578: LD_VAR 0 48
59582: PUSH
59583: LD_VAR 0 49
59587: PUSH
59588: LD_VAR 0 50
59592: PUSH
59593: LD_VAR 0 51
59597: PUSH
59598: LD_VAR 0 52
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: PUSH
59611: LD_VAR 0 4
59615: PUSH
59616: LD_INT 1
59618: PLUS
59619: ARRAY
59620: ST_TO_ADDR
59621: GO 59812
59623: LD_INT 4
59625: DOUBLE
59626: EQUAL
59627: IFTRUE 59649
59629: LD_INT 5
59631: DOUBLE
59632: EQUAL
59633: IFTRUE 59649
59635: LD_INT 34
59637: DOUBLE
59638: EQUAL
59639: IFTRUE 59649
59641: LD_INT 37
59643: DOUBLE
59644: EQUAL
59645: IFTRUE 59649
59647: GO 59705
59649: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59650: LD_ADDR_VAR 0 9
59654: PUSH
59655: LD_VAR 0 53
59659: PUSH
59660: LD_VAR 0 54
59664: PUSH
59665: LD_VAR 0 55
59669: PUSH
59670: LD_VAR 0 56
59674: PUSH
59675: LD_VAR 0 57
59679: PUSH
59680: LD_VAR 0 58
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: PUSH
59693: LD_VAR 0 4
59697: PUSH
59698: LD_INT 1
59700: PLUS
59701: ARRAY
59702: ST_TO_ADDR
59703: GO 59812
59705: LD_INT 31
59707: DOUBLE
59708: EQUAL
59709: IFTRUE 59755
59711: LD_INT 32
59713: DOUBLE
59714: EQUAL
59715: IFTRUE 59755
59717: LD_INT 33
59719: DOUBLE
59720: EQUAL
59721: IFTRUE 59755
59723: LD_INT 27
59725: DOUBLE
59726: EQUAL
59727: IFTRUE 59755
59729: LD_INT 26
59731: DOUBLE
59732: EQUAL
59733: IFTRUE 59755
59735: LD_INT 28
59737: DOUBLE
59738: EQUAL
59739: IFTRUE 59755
59741: LD_INT 29
59743: DOUBLE
59744: EQUAL
59745: IFTRUE 59755
59747: LD_INT 30
59749: DOUBLE
59750: EQUAL
59751: IFTRUE 59755
59753: GO 59811
59755: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59756: LD_ADDR_VAR 0 9
59760: PUSH
59761: LD_VAR 0 59
59765: PUSH
59766: LD_VAR 0 60
59770: PUSH
59771: LD_VAR 0 61
59775: PUSH
59776: LD_VAR 0 62
59780: PUSH
59781: LD_VAR 0 63
59785: PUSH
59786: LD_VAR 0 64
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: PUSH
59799: LD_VAR 0 4
59803: PUSH
59804: LD_INT 1
59806: PLUS
59807: ARRAY
59808: ST_TO_ADDR
59809: GO 59812
59811: POP
// temp_list2 = [ ] ;
59812: LD_ADDR_VAR 0 10
59816: PUSH
59817: EMPTY
59818: ST_TO_ADDR
// for i in temp_list do
59819: LD_ADDR_VAR 0 8
59823: PUSH
59824: LD_VAR 0 9
59828: PUSH
59829: FOR_IN
59830: IFFALSE 59882
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59832: LD_ADDR_VAR 0 10
59836: PUSH
59837: LD_VAR 0 10
59841: PUSH
59842: LD_VAR 0 8
59846: PUSH
59847: LD_INT 1
59849: ARRAY
59850: PUSH
59851: LD_VAR 0 2
59855: PLUS
59856: PUSH
59857: LD_VAR 0 8
59861: PUSH
59862: LD_INT 2
59864: ARRAY
59865: PUSH
59866: LD_VAR 0 3
59870: PLUS
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: EMPTY
59877: LIST
59878: ADD
59879: ST_TO_ADDR
59880: GO 59829
59882: POP
59883: POP
// result = temp_list2 ;
59884: LD_ADDR_VAR 0 7
59888: PUSH
59889: LD_VAR 0 10
59893: ST_TO_ADDR
// end ;
59894: LD_VAR 0 7
59898: RET
// export function EnemyInRange ( unit , dist ) ; begin
59899: LD_INT 0
59901: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59902: LD_ADDR_VAR 0 3
59906: PUSH
59907: LD_VAR 0 1
59911: PPUSH
59912: CALL_OW 255
59916: PPUSH
59917: LD_VAR 0 1
59921: PPUSH
59922: CALL_OW 250
59926: PPUSH
59927: LD_VAR 0 1
59931: PPUSH
59932: CALL_OW 251
59936: PPUSH
59937: LD_VAR 0 2
59941: PPUSH
59942: CALL 33295 0 4
59946: PUSH
59947: LD_INT 4
59949: ARRAY
59950: ST_TO_ADDR
// end ;
59951: LD_VAR 0 3
59955: RET
// export function PlayerSeeMe ( unit ) ; begin
59956: LD_INT 0
59958: PPUSH
// result := See ( your_side , unit ) ;
59959: LD_ADDR_VAR 0 2
59963: PUSH
59964: LD_OWVAR 2
59968: PPUSH
59969: LD_VAR 0 1
59973: PPUSH
59974: CALL_OW 292
59978: ST_TO_ADDR
// end ;
59979: LD_VAR 0 2
59983: RET
// export function ReverseDir ( unit ) ; begin
59984: LD_INT 0
59986: PPUSH
// if not unit then
59987: LD_VAR 0 1
59991: NOT
59992: IFFALSE 59996
// exit ;
59994: GO 60019
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59996: LD_ADDR_VAR 0 2
60000: PUSH
60001: LD_VAR 0 1
60005: PPUSH
60006: CALL_OW 254
60010: PUSH
60011: LD_INT 3
60013: PLUS
60014: PUSH
60015: LD_INT 6
60017: MOD
60018: ST_TO_ADDR
// end ;
60019: LD_VAR 0 2
60023: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60024: LD_INT 0
60026: PPUSH
60027: PPUSH
60028: PPUSH
60029: PPUSH
60030: PPUSH
// if not hexes then
60031: LD_VAR 0 2
60035: NOT
60036: IFFALSE 60040
// exit ;
60038: GO 60188
// dist := 9999 ;
60040: LD_ADDR_VAR 0 5
60044: PUSH
60045: LD_INT 9999
60047: ST_TO_ADDR
// for i = 1 to hexes do
60048: LD_ADDR_VAR 0 4
60052: PUSH
60053: DOUBLE
60054: LD_INT 1
60056: DEC
60057: ST_TO_ADDR
60058: LD_VAR 0 2
60062: PUSH
60063: FOR_TO
60064: IFFALSE 60176
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60066: LD_VAR 0 1
60070: PPUSH
60071: LD_VAR 0 2
60075: PUSH
60076: LD_VAR 0 4
60080: ARRAY
60081: PUSH
60082: LD_INT 1
60084: ARRAY
60085: PPUSH
60086: LD_VAR 0 2
60090: PUSH
60091: LD_VAR 0 4
60095: ARRAY
60096: PUSH
60097: LD_INT 2
60099: ARRAY
60100: PPUSH
60101: CALL_OW 297
60105: PUSH
60106: LD_VAR 0 5
60110: LESS
60111: IFFALSE 60174
// begin hex := hexes [ i ] ;
60113: LD_ADDR_VAR 0 7
60117: PUSH
60118: LD_VAR 0 2
60122: PUSH
60123: LD_VAR 0 4
60127: ARRAY
60128: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60129: LD_ADDR_VAR 0 5
60133: PUSH
60134: LD_VAR 0 1
60138: PPUSH
60139: LD_VAR 0 2
60143: PUSH
60144: LD_VAR 0 4
60148: ARRAY
60149: PUSH
60150: LD_INT 1
60152: ARRAY
60153: PPUSH
60154: LD_VAR 0 2
60158: PUSH
60159: LD_VAR 0 4
60163: ARRAY
60164: PUSH
60165: LD_INT 2
60167: ARRAY
60168: PPUSH
60169: CALL_OW 297
60173: ST_TO_ADDR
// end ; end ;
60174: GO 60063
60176: POP
60177: POP
// result := hex ;
60178: LD_ADDR_VAR 0 3
60182: PUSH
60183: LD_VAR 0 7
60187: ST_TO_ADDR
// end ;
60188: LD_VAR 0 3
60192: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60193: LD_INT 0
60195: PPUSH
60196: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60197: LD_VAR 0 1
60201: NOT
60202: PUSH
60203: LD_VAR 0 1
60207: PUSH
60208: LD_INT 21
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 23
60220: PUSH
60221: LD_INT 2
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PPUSH
60232: CALL_OW 69
60236: IN
60237: NOT
60238: OR
60239: IFFALSE 60243
// exit ;
60241: GO 60290
// for i = 1 to 3 do
60243: LD_ADDR_VAR 0 3
60247: PUSH
60248: DOUBLE
60249: LD_INT 1
60251: DEC
60252: ST_TO_ADDR
60253: LD_INT 3
60255: PUSH
60256: FOR_TO
60257: IFFALSE 60288
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60259: LD_VAR 0 1
60263: PPUSH
60264: CALL_OW 250
60268: PPUSH
60269: LD_VAR 0 1
60273: PPUSH
60274: CALL_OW 251
60278: PPUSH
60279: LD_INT 1
60281: PPUSH
60282: CALL_OW 453
60286: GO 60256
60288: POP
60289: POP
// end ;
60290: LD_VAR 0 2
60294: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60295: LD_INT 0
60297: PPUSH
60298: PPUSH
60299: PPUSH
60300: PPUSH
60301: PPUSH
60302: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60303: LD_VAR 0 1
60307: NOT
60308: PUSH
60309: LD_VAR 0 2
60313: NOT
60314: OR
60315: PUSH
60316: LD_VAR 0 1
60320: PPUSH
60321: CALL_OW 314
60325: OR
60326: IFFALSE 60330
// exit ;
60328: GO 60771
// x := GetX ( enemy_unit ) ;
60330: LD_ADDR_VAR 0 7
60334: PUSH
60335: LD_VAR 0 2
60339: PPUSH
60340: CALL_OW 250
60344: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60345: LD_ADDR_VAR 0 8
60349: PUSH
60350: LD_VAR 0 2
60354: PPUSH
60355: CALL_OW 251
60359: ST_TO_ADDR
// if not x or not y then
60360: LD_VAR 0 7
60364: NOT
60365: PUSH
60366: LD_VAR 0 8
60370: NOT
60371: OR
60372: IFFALSE 60376
// exit ;
60374: GO 60771
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60376: LD_ADDR_VAR 0 6
60380: PUSH
60381: LD_VAR 0 7
60385: PPUSH
60386: LD_INT 0
60388: PPUSH
60389: LD_INT 4
60391: PPUSH
60392: CALL_OW 272
60396: PUSH
60397: LD_VAR 0 8
60401: PPUSH
60402: LD_INT 0
60404: PPUSH
60405: LD_INT 4
60407: PPUSH
60408: CALL_OW 273
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_VAR 0 7
60421: PPUSH
60422: LD_INT 1
60424: PPUSH
60425: LD_INT 4
60427: PPUSH
60428: CALL_OW 272
60432: PUSH
60433: LD_VAR 0 8
60437: PPUSH
60438: LD_INT 1
60440: PPUSH
60441: LD_INT 4
60443: PPUSH
60444: CALL_OW 273
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_VAR 0 7
60457: PPUSH
60458: LD_INT 2
60460: PPUSH
60461: LD_INT 4
60463: PPUSH
60464: CALL_OW 272
60468: PUSH
60469: LD_VAR 0 8
60473: PPUSH
60474: LD_INT 2
60476: PPUSH
60477: LD_INT 4
60479: PPUSH
60480: CALL_OW 273
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_VAR 0 7
60493: PPUSH
60494: LD_INT 3
60496: PPUSH
60497: LD_INT 4
60499: PPUSH
60500: CALL_OW 272
60504: PUSH
60505: LD_VAR 0 8
60509: PPUSH
60510: LD_INT 3
60512: PPUSH
60513: LD_INT 4
60515: PPUSH
60516: CALL_OW 273
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_VAR 0 7
60529: PPUSH
60530: LD_INT 4
60532: PPUSH
60533: LD_INT 4
60535: PPUSH
60536: CALL_OW 272
60540: PUSH
60541: LD_VAR 0 8
60545: PPUSH
60546: LD_INT 4
60548: PPUSH
60549: LD_INT 4
60551: PPUSH
60552: CALL_OW 273
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_VAR 0 7
60565: PPUSH
60566: LD_INT 5
60568: PPUSH
60569: LD_INT 4
60571: PPUSH
60572: CALL_OW 272
60576: PUSH
60577: LD_VAR 0 8
60581: PPUSH
60582: LD_INT 5
60584: PPUSH
60585: LD_INT 4
60587: PPUSH
60588: CALL_OW 273
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: ST_TO_ADDR
// for i = tmp downto 1 do
60605: LD_ADDR_VAR 0 4
60609: PUSH
60610: DOUBLE
60611: LD_VAR 0 6
60615: INC
60616: ST_TO_ADDR
60617: LD_INT 1
60619: PUSH
60620: FOR_DOWNTO
60621: IFFALSE 60722
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60623: LD_VAR 0 6
60627: PUSH
60628: LD_VAR 0 4
60632: ARRAY
60633: PUSH
60634: LD_INT 1
60636: ARRAY
60637: PPUSH
60638: LD_VAR 0 6
60642: PUSH
60643: LD_VAR 0 4
60647: ARRAY
60648: PUSH
60649: LD_INT 2
60651: ARRAY
60652: PPUSH
60653: CALL_OW 488
60657: NOT
60658: PUSH
60659: LD_VAR 0 6
60663: PUSH
60664: LD_VAR 0 4
60668: ARRAY
60669: PUSH
60670: LD_INT 1
60672: ARRAY
60673: PPUSH
60674: LD_VAR 0 6
60678: PUSH
60679: LD_VAR 0 4
60683: ARRAY
60684: PUSH
60685: LD_INT 2
60687: ARRAY
60688: PPUSH
60689: CALL_OW 428
60693: PUSH
60694: LD_INT 0
60696: NONEQUAL
60697: OR
60698: IFFALSE 60720
// tmp := Delete ( tmp , i ) ;
60700: LD_ADDR_VAR 0 6
60704: PUSH
60705: LD_VAR 0 6
60709: PPUSH
60710: LD_VAR 0 4
60714: PPUSH
60715: CALL_OW 3
60719: ST_TO_ADDR
60720: GO 60620
60722: POP
60723: POP
// j := GetClosestHex ( unit , tmp ) ;
60724: LD_ADDR_VAR 0 5
60728: PUSH
60729: LD_VAR 0 1
60733: PPUSH
60734: LD_VAR 0 6
60738: PPUSH
60739: CALL 60024 0 2
60743: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60744: LD_VAR 0 1
60748: PPUSH
60749: LD_VAR 0 5
60753: PUSH
60754: LD_INT 1
60756: ARRAY
60757: PPUSH
60758: LD_VAR 0 5
60762: PUSH
60763: LD_INT 2
60765: ARRAY
60766: PPUSH
60767: CALL_OW 111
// end ;
60771: LD_VAR 0 3
60775: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60776: LD_INT 0
60778: PPUSH
60779: PPUSH
60780: PPUSH
// uc_side = 0 ;
60781: LD_ADDR_OWVAR 20
60785: PUSH
60786: LD_INT 0
60788: ST_TO_ADDR
// uc_nation = 0 ;
60789: LD_ADDR_OWVAR 21
60793: PUSH
60794: LD_INT 0
60796: ST_TO_ADDR
// InitHc_All ( ) ;
60797: CALL_OW 584
// InitVc ;
60801: CALL_OW 20
// if mastodonts then
60805: LD_VAR 0 6
60809: IFFALSE 60876
// for i = 1 to mastodonts do
60811: LD_ADDR_VAR 0 11
60815: PUSH
60816: DOUBLE
60817: LD_INT 1
60819: DEC
60820: ST_TO_ADDR
60821: LD_VAR 0 6
60825: PUSH
60826: FOR_TO
60827: IFFALSE 60874
// begin vc_chassis := 31 ;
60829: LD_ADDR_OWVAR 37
60833: PUSH
60834: LD_INT 31
60836: ST_TO_ADDR
// vc_control := control_rider ;
60837: LD_ADDR_OWVAR 38
60841: PUSH
60842: LD_INT 4
60844: ST_TO_ADDR
// animal := CreateVehicle ;
60845: LD_ADDR_VAR 0 12
60849: PUSH
60850: CALL_OW 45
60854: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60855: LD_VAR 0 12
60859: PPUSH
60860: LD_VAR 0 8
60864: PPUSH
60865: LD_INT 0
60867: PPUSH
60868: CALL 63064 0 3
// end ;
60872: GO 60826
60874: POP
60875: POP
// if horses then
60876: LD_VAR 0 5
60880: IFFALSE 60947
// for i = 1 to horses do
60882: LD_ADDR_VAR 0 11
60886: PUSH
60887: DOUBLE
60888: LD_INT 1
60890: DEC
60891: ST_TO_ADDR
60892: LD_VAR 0 5
60896: PUSH
60897: FOR_TO
60898: IFFALSE 60945
// begin hc_class := 21 ;
60900: LD_ADDR_OWVAR 28
60904: PUSH
60905: LD_INT 21
60907: ST_TO_ADDR
// hc_gallery :=  ;
60908: LD_ADDR_OWVAR 33
60912: PUSH
60913: LD_STRING 
60915: ST_TO_ADDR
// animal := CreateHuman ;
60916: LD_ADDR_VAR 0 12
60920: PUSH
60921: CALL_OW 44
60925: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60926: LD_VAR 0 12
60930: PPUSH
60931: LD_VAR 0 8
60935: PPUSH
60936: LD_INT 0
60938: PPUSH
60939: CALL 63064 0 3
// end ;
60943: GO 60897
60945: POP
60946: POP
// if birds then
60947: LD_VAR 0 1
60951: IFFALSE 61018
// for i = 1 to birds do
60953: LD_ADDR_VAR 0 11
60957: PUSH
60958: DOUBLE
60959: LD_INT 1
60961: DEC
60962: ST_TO_ADDR
60963: LD_VAR 0 1
60967: PUSH
60968: FOR_TO
60969: IFFALSE 61016
// begin hc_class = 18 ;
60971: LD_ADDR_OWVAR 28
60975: PUSH
60976: LD_INT 18
60978: ST_TO_ADDR
// hc_gallery =  ;
60979: LD_ADDR_OWVAR 33
60983: PUSH
60984: LD_STRING 
60986: ST_TO_ADDR
// animal := CreateHuman ;
60987: LD_ADDR_VAR 0 12
60991: PUSH
60992: CALL_OW 44
60996: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60997: LD_VAR 0 12
61001: PPUSH
61002: LD_VAR 0 8
61006: PPUSH
61007: LD_INT 0
61009: PPUSH
61010: CALL 63064 0 3
// end ;
61014: GO 60968
61016: POP
61017: POP
// if tigers then
61018: LD_VAR 0 2
61022: IFFALSE 61106
// for i = 1 to tigers do
61024: LD_ADDR_VAR 0 11
61028: PUSH
61029: DOUBLE
61030: LD_INT 1
61032: DEC
61033: ST_TO_ADDR
61034: LD_VAR 0 2
61038: PUSH
61039: FOR_TO
61040: IFFALSE 61104
// begin hc_class = class_tiger ;
61042: LD_ADDR_OWVAR 28
61046: PUSH
61047: LD_INT 14
61049: ST_TO_ADDR
// hc_gallery =  ;
61050: LD_ADDR_OWVAR 33
61054: PUSH
61055: LD_STRING 
61057: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61058: LD_ADDR_OWVAR 35
61062: PUSH
61063: LD_INT 7
61065: NEG
61066: PPUSH
61067: LD_INT 7
61069: PPUSH
61070: CALL_OW 12
61074: ST_TO_ADDR
// animal := CreateHuman ;
61075: LD_ADDR_VAR 0 12
61079: PUSH
61080: CALL_OW 44
61084: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61085: LD_VAR 0 12
61089: PPUSH
61090: LD_VAR 0 8
61094: PPUSH
61095: LD_INT 0
61097: PPUSH
61098: CALL 63064 0 3
// end ;
61102: GO 61039
61104: POP
61105: POP
// if apemans then
61106: LD_VAR 0 3
61110: IFFALSE 61233
// for i = 1 to apemans do
61112: LD_ADDR_VAR 0 11
61116: PUSH
61117: DOUBLE
61118: LD_INT 1
61120: DEC
61121: ST_TO_ADDR
61122: LD_VAR 0 3
61126: PUSH
61127: FOR_TO
61128: IFFALSE 61231
// begin hc_class = class_apeman ;
61130: LD_ADDR_OWVAR 28
61134: PUSH
61135: LD_INT 12
61137: ST_TO_ADDR
// hc_gallery =  ;
61138: LD_ADDR_OWVAR 33
61142: PUSH
61143: LD_STRING 
61145: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61146: LD_ADDR_OWVAR 35
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PPUSH
61155: LD_INT 2
61157: PPUSH
61158: CALL_OW 12
61162: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61163: LD_ADDR_OWVAR 31
61167: PUSH
61168: LD_INT 1
61170: PPUSH
61171: LD_INT 3
61173: PPUSH
61174: CALL_OW 12
61178: PUSH
61179: LD_INT 1
61181: PPUSH
61182: LD_INT 3
61184: PPUSH
61185: CALL_OW 12
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: LD_INT 0
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: ST_TO_ADDR
// animal := CreateHuman ;
61202: LD_ADDR_VAR 0 12
61206: PUSH
61207: CALL_OW 44
61211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61212: LD_VAR 0 12
61216: PPUSH
61217: LD_VAR 0 8
61221: PPUSH
61222: LD_INT 0
61224: PPUSH
61225: CALL 63064 0 3
// end ;
61229: GO 61127
61231: POP
61232: POP
// if enchidnas then
61233: LD_VAR 0 4
61237: IFFALSE 61304
// for i = 1 to enchidnas do
61239: LD_ADDR_VAR 0 11
61243: PUSH
61244: DOUBLE
61245: LD_INT 1
61247: DEC
61248: ST_TO_ADDR
61249: LD_VAR 0 4
61253: PUSH
61254: FOR_TO
61255: IFFALSE 61302
// begin hc_class = 13 ;
61257: LD_ADDR_OWVAR 28
61261: PUSH
61262: LD_INT 13
61264: ST_TO_ADDR
// hc_gallery =  ;
61265: LD_ADDR_OWVAR 33
61269: PUSH
61270: LD_STRING 
61272: ST_TO_ADDR
// animal := CreateHuman ;
61273: LD_ADDR_VAR 0 12
61277: PUSH
61278: CALL_OW 44
61282: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61283: LD_VAR 0 12
61287: PPUSH
61288: LD_VAR 0 8
61292: PPUSH
61293: LD_INT 0
61295: PPUSH
61296: CALL 63064 0 3
// end ;
61300: GO 61254
61302: POP
61303: POP
// if fishes then
61304: LD_VAR 0 7
61308: IFFALSE 61375
// for i = 1 to fishes do
61310: LD_ADDR_VAR 0 11
61314: PUSH
61315: DOUBLE
61316: LD_INT 1
61318: DEC
61319: ST_TO_ADDR
61320: LD_VAR 0 7
61324: PUSH
61325: FOR_TO
61326: IFFALSE 61373
// begin hc_class = 20 ;
61328: LD_ADDR_OWVAR 28
61332: PUSH
61333: LD_INT 20
61335: ST_TO_ADDR
// hc_gallery =  ;
61336: LD_ADDR_OWVAR 33
61340: PUSH
61341: LD_STRING 
61343: ST_TO_ADDR
// animal := CreateHuman ;
61344: LD_ADDR_VAR 0 12
61348: PUSH
61349: CALL_OW 44
61353: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61354: LD_VAR 0 12
61358: PPUSH
61359: LD_VAR 0 9
61363: PPUSH
61364: LD_INT 0
61366: PPUSH
61367: CALL 63064 0 3
// end ;
61371: GO 61325
61373: POP
61374: POP
// end ;
61375: LD_VAR 0 10
61379: RET
// export function WantHeal ( sci , unit ) ; begin
61380: LD_INT 0
61382: PPUSH
// if GetTaskList ( sci ) > 0 then
61383: LD_VAR 0 1
61387: PPUSH
61388: CALL_OW 437
61392: PUSH
61393: LD_INT 0
61395: GREATER
61396: IFFALSE 61466
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61398: LD_VAR 0 1
61402: PPUSH
61403: CALL_OW 437
61407: PUSH
61408: LD_INT 1
61410: ARRAY
61411: PUSH
61412: LD_INT 1
61414: ARRAY
61415: PUSH
61416: LD_STRING l
61418: EQUAL
61419: PUSH
61420: LD_VAR 0 1
61424: PPUSH
61425: CALL_OW 437
61429: PUSH
61430: LD_INT 1
61432: ARRAY
61433: PUSH
61434: LD_INT 4
61436: ARRAY
61437: PUSH
61438: LD_VAR 0 2
61442: EQUAL
61443: AND
61444: IFFALSE 61456
// result := true else
61446: LD_ADDR_VAR 0 3
61450: PUSH
61451: LD_INT 1
61453: ST_TO_ADDR
61454: GO 61464
// result := false ;
61456: LD_ADDR_VAR 0 3
61460: PUSH
61461: LD_INT 0
61463: ST_TO_ADDR
// end else
61464: GO 61474
// result := false ;
61466: LD_ADDR_VAR 0 3
61470: PUSH
61471: LD_INT 0
61473: ST_TO_ADDR
// end ;
61474: LD_VAR 0 3
61478: RET
// export function HealTarget ( sci ) ; begin
61479: LD_INT 0
61481: PPUSH
// if not sci then
61482: LD_VAR 0 1
61486: NOT
61487: IFFALSE 61491
// exit ;
61489: GO 61556
// result := 0 ;
61491: LD_ADDR_VAR 0 2
61495: PUSH
61496: LD_INT 0
61498: ST_TO_ADDR
// if GetTaskList ( sci ) then
61499: LD_VAR 0 1
61503: PPUSH
61504: CALL_OW 437
61508: IFFALSE 61556
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61510: LD_VAR 0 1
61514: PPUSH
61515: CALL_OW 437
61519: PUSH
61520: LD_INT 1
61522: ARRAY
61523: PUSH
61524: LD_INT 1
61526: ARRAY
61527: PUSH
61528: LD_STRING l
61530: EQUAL
61531: IFFALSE 61556
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61533: LD_ADDR_VAR 0 2
61537: PUSH
61538: LD_VAR 0 1
61542: PPUSH
61543: CALL_OW 437
61547: PUSH
61548: LD_INT 1
61550: ARRAY
61551: PUSH
61552: LD_INT 4
61554: ARRAY
61555: ST_TO_ADDR
// end ;
61556: LD_VAR 0 2
61560: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61561: LD_INT 0
61563: PPUSH
61564: PPUSH
61565: PPUSH
61566: PPUSH
// if not base_units then
61567: LD_VAR 0 1
61571: NOT
61572: IFFALSE 61576
// exit ;
61574: GO 61663
// result := false ;
61576: LD_ADDR_VAR 0 2
61580: PUSH
61581: LD_INT 0
61583: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61584: LD_ADDR_VAR 0 5
61588: PUSH
61589: LD_VAR 0 1
61593: PPUSH
61594: LD_INT 21
61596: PUSH
61597: LD_INT 3
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PPUSH
61604: CALL_OW 72
61608: ST_TO_ADDR
// if not tmp then
61609: LD_VAR 0 5
61613: NOT
61614: IFFALSE 61618
// exit ;
61616: GO 61663
// for i in tmp do
61618: LD_ADDR_VAR 0 3
61622: PUSH
61623: LD_VAR 0 5
61627: PUSH
61628: FOR_IN
61629: IFFALSE 61661
// begin result := EnemyInRange ( i , 22 ) ;
61631: LD_ADDR_VAR 0 2
61635: PUSH
61636: LD_VAR 0 3
61640: PPUSH
61641: LD_INT 22
61643: PPUSH
61644: CALL 59899 0 2
61648: ST_TO_ADDR
// if result then
61649: LD_VAR 0 2
61653: IFFALSE 61659
// exit ;
61655: POP
61656: POP
61657: GO 61663
// end ;
61659: GO 61628
61661: POP
61662: POP
// end ;
61663: LD_VAR 0 2
61667: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61668: LD_INT 0
61670: PPUSH
61671: PPUSH
// if not units then
61672: LD_VAR 0 1
61676: NOT
61677: IFFALSE 61681
// exit ;
61679: GO 61751
// result := [ ] ;
61681: LD_ADDR_VAR 0 3
61685: PUSH
61686: EMPTY
61687: ST_TO_ADDR
// for i in units do
61688: LD_ADDR_VAR 0 4
61692: PUSH
61693: LD_VAR 0 1
61697: PUSH
61698: FOR_IN
61699: IFFALSE 61749
// if GetTag ( i ) = tag then
61701: LD_VAR 0 4
61705: PPUSH
61706: CALL_OW 110
61710: PUSH
61711: LD_VAR 0 2
61715: EQUAL
61716: IFFALSE 61747
// result := Replace ( result , result + 1 , i ) ;
61718: LD_ADDR_VAR 0 3
61722: PUSH
61723: LD_VAR 0 3
61727: PPUSH
61728: LD_VAR 0 3
61732: PUSH
61733: LD_INT 1
61735: PLUS
61736: PPUSH
61737: LD_VAR 0 4
61741: PPUSH
61742: CALL_OW 1
61746: ST_TO_ADDR
61747: GO 61698
61749: POP
61750: POP
// end ;
61751: LD_VAR 0 3
61755: RET
// export function IsDriver ( un ) ; begin
61756: LD_INT 0
61758: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61759: LD_ADDR_VAR 0 2
61763: PUSH
61764: LD_VAR 0 1
61768: PUSH
61769: LD_INT 55
61771: PUSH
61772: EMPTY
61773: LIST
61774: PPUSH
61775: CALL_OW 69
61779: IN
61780: ST_TO_ADDR
// end ;
61781: LD_VAR 0 2
61785: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61786: LD_INT 0
61788: PPUSH
61789: PPUSH
// list := [ ] ;
61790: LD_ADDR_VAR 0 5
61794: PUSH
61795: EMPTY
61796: ST_TO_ADDR
// case d of 0 :
61797: LD_VAR 0 3
61801: PUSH
61802: LD_INT 0
61804: DOUBLE
61805: EQUAL
61806: IFTRUE 61810
61808: GO 61943
61810: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61811: LD_ADDR_VAR 0 5
61815: PUSH
61816: LD_VAR 0 1
61820: PUSH
61821: LD_INT 4
61823: MINUS
61824: PUSH
61825: LD_VAR 0 2
61829: PUSH
61830: LD_INT 4
61832: MINUS
61833: PUSH
61834: LD_INT 2
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: LIST
61841: PUSH
61842: LD_VAR 0 1
61846: PUSH
61847: LD_INT 3
61849: MINUS
61850: PUSH
61851: LD_VAR 0 2
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: LIST
61863: PUSH
61864: LD_VAR 0 1
61868: PUSH
61869: LD_INT 4
61871: PLUS
61872: PUSH
61873: LD_VAR 0 2
61877: PUSH
61878: LD_INT 4
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: LIST
61885: PUSH
61886: LD_VAR 0 1
61890: PUSH
61891: LD_INT 3
61893: PLUS
61894: PUSH
61895: LD_VAR 0 2
61899: PUSH
61900: LD_INT 3
61902: PLUS
61903: PUSH
61904: LD_INT 5
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: LIST
61911: PUSH
61912: LD_VAR 0 1
61916: PUSH
61917: LD_VAR 0 2
61921: PUSH
61922: LD_INT 4
61924: PLUS
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: LIST
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: ST_TO_ADDR
// end ; 1 :
61941: GO 62641
61943: LD_INT 1
61945: DOUBLE
61946: EQUAL
61947: IFTRUE 61951
61949: GO 62084
61951: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61952: LD_ADDR_VAR 0 5
61956: PUSH
61957: LD_VAR 0 1
61961: PUSH
61962: LD_VAR 0 2
61966: PUSH
61967: LD_INT 4
61969: MINUS
61970: PUSH
61971: LD_INT 3
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: LIST
61978: PUSH
61979: LD_VAR 0 1
61983: PUSH
61984: LD_INT 3
61986: MINUS
61987: PUSH
61988: LD_VAR 0 2
61992: PUSH
61993: LD_INT 3
61995: MINUS
61996: PUSH
61997: LD_INT 2
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: LIST
62004: PUSH
62005: LD_VAR 0 1
62009: PUSH
62010: LD_INT 4
62012: MINUS
62013: PUSH
62014: LD_VAR 0 2
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: LIST
62026: PUSH
62027: LD_VAR 0 1
62031: PUSH
62032: LD_VAR 0 2
62036: PUSH
62037: LD_INT 3
62039: PLUS
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: LIST
62048: PUSH
62049: LD_VAR 0 1
62053: PUSH
62054: LD_INT 4
62056: PLUS
62057: PUSH
62058: LD_VAR 0 2
62062: PUSH
62063: LD_INT 4
62065: PLUS
62066: PUSH
62067: LD_INT 5
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: LIST
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: ST_TO_ADDR
// end ; 2 :
62082: GO 62641
62084: LD_INT 2
62086: DOUBLE
62087: EQUAL
62088: IFTRUE 62092
62090: GO 62221
62092: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62093: LD_ADDR_VAR 0 5
62097: PUSH
62098: LD_VAR 0 1
62102: PUSH
62103: LD_VAR 0 2
62107: PUSH
62108: LD_INT 3
62110: MINUS
62111: PUSH
62112: LD_INT 3
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: LIST
62119: PUSH
62120: LD_VAR 0 1
62124: PUSH
62125: LD_INT 4
62127: PLUS
62128: PUSH
62129: LD_VAR 0 2
62133: PUSH
62134: LD_INT 4
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: LIST
62141: PUSH
62142: LD_VAR 0 1
62146: PUSH
62147: LD_VAR 0 2
62151: PUSH
62152: LD_INT 4
62154: PLUS
62155: PUSH
62156: LD_INT 0
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: LIST
62163: PUSH
62164: LD_VAR 0 1
62168: PUSH
62169: LD_INT 3
62171: MINUS
62172: PUSH
62173: LD_VAR 0 2
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: LIST
62185: PUSH
62186: LD_VAR 0 1
62190: PUSH
62191: LD_INT 4
62193: MINUS
62194: PUSH
62195: LD_VAR 0 2
62199: PUSH
62200: LD_INT 4
62202: MINUS
62203: PUSH
62204: LD_INT 2
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: LIST
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: ST_TO_ADDR
// end ; 3 :
62219: GO 62641
62221: LD_INT 3
62223: DOUBLE
62224: EQUAL
62225: IFTRUE 62229
62227: GO 62362
62229: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62230: LD_ADDR_VAR 0 5
62234: PUSH
62235: LD_VAR 0 1
62239: PUSH
62240: LD_INT 3
62242: PLUS
62243: PUSH
62244: LD_VAR 0 2
62248: PUSH
62249: LD_INT 4
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: LIST
62256: PUSH
62257: LD_VAR 0 1
62261: PUSH
62262: LD_INT 4
62264: PLUS
62265: PUSH
62266: LD_VAR 0 2
62270: PUSH
62271: LD_INT 4
62273: PLUS
62274: PUSH
62275: LD_INT 5
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: LIST
62282: PUSH
62283: LD_VAR 0 1
62287: PUSH
62288: LD_INT 4
62290: MINUS
62291: PUSH
62292: LD_VAR 0 2
62296: PUSH
62297: LD_INT 1
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: LIST
62304: PUSH
62305: LD_VAR 0 1
62309: PUSH
62310: LD_VAR 0 2
62314: PUSH
62315: LD_INT 4
62317: MINUS
62318: PUSH
62319: LD_INT 3
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: LIST
62326: PUSH
62327: LD_VAR 0 1
62331: PUSH
62332: LD_INT 3
62334: MINUS
62335: PUSH
62336: LD_VAR 0 2
62340: PUSH
62341: LD_INT 3
62343: MINUS
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: ST_TO_ADDR
// end ; 4 :
62360: GO 62641
62362: LD_INT 4
62364: DOUBLE
62365: EQUAL
62366: IFTRUE 62370
62368: GO 62503
62370: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62371: LD_ADDR_VAR 0 5
62375: PUSH
62376: LD_VAR 0 1
62380: PUSH
62381: LD_VAR 0 2
62385: PUSH
62386: LD_INT 4
62388: PLUS
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: LIST
62397: PUSH
62398: LD_VAR 0 1
62402: PUSH
62403: LD_INT 3
62405: PLUS
62406: PUSH
62407: LD_VAR 0 2
62411: PUSH
62412: LD_INT 3
62414: PLUS
62415: PUSH
62416: LD_INT 5
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: LIST
62423: PUSH
62424: LD_VAR 0 1
62428: PUSH
62429: LD_INT 4
62431: PLUS
62432: PUSH
62433: LD_VAR 0 2
62437: PUSH
62438: LD_INT 4
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: LIST
62445: PUSH
62446: LD_VAR 0 1
62450: PUSH
62451: LD_VAR 0 2
62455: PUSH
62456: LD_INT 3
62458: MINUS
62459: PUSH
62460: LD_INT 3
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: LIST
62467: PUSH
62468: LD_VAR 0 1
62472: PUSH
62473: LD_INT 4
62475: MINUS
62476: PUSH
62477: LD_VAR 0 2
62481: PUSH
62482: LD_INT 4
62484: MINUS
62485: PUSH
62486: LD_INT 2
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: LIST
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: ST_TO_ADDR
// end ; 5 :
62501: GO 62641
62503: LD_INT 5
62505: DOUBLE
62506: EQUAL
62507: IFTRUE 62511
62509: GO 62640
62511: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62512: LD_ADDR_VAR 0 5
62516: PUSH
62517: LD_VAR 0 1
62521: PUSH
62522: LD_INT 4
62524: MINUS
62525: PUSH
62526: LD_VAR 0 2
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: LIST
62538: PUSH
62539: LD_VAR 0 1
62543: PUSH
62544: LD_VAR 0 2
62548: PUSH
62549: LD_INT 4
62551: MINUS
62552: PUSH
62553: LD_INT 3
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: LIST
62560: PUSH
62561: LD_VAR 0 1
62565: PUSH
62566: LD_INT 4
62568: PLUS
62569: PUSH
62570: LD_VAR 0 2
62574: PUSH
62575: LD_INT 4
62577: PLUS
62578: PUSH
62579: LD_INT 5
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: LIST
62586: PUSH
62587: LD_VAR 0 1
62591: PUSH
62592: LD_INT 3
62594: PLUS
62595: PUSH
62596: LD_VAR 0 2
62600: PUSH
62601: LD_INT 4
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: LIST
62608: PUSH
62609: LD_VAR 0 1
62613: PUSH
62614: LD_VAR 0 2
62618: PUSH
62619: LD_INT 3
62621: PLUS
62622: PUSH
62623: LD_INT 0
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: LIST
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: ST_TO_ADDR
// end ; end ;
62638: GO 62641
62640: POP
// result := list ;
62641: LD_ADDR_VAR 0 4
62645: PUSH
62646: LD_VAR 0 5
62650: ST_TO_ADDR
// end ;
62651: LD_VAR 0 4
62655: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62656: LD_INT 0
62658: PPUSH
62659: PPUSH
62660: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62661: LD_VAR 0 1
62665: NOT
62666: PUSH
62667: LD_VAR 0 2
62671: PUSH
62672: LD_INT 1
62674: PUSH
62675: LD_INT 2
62677: PUSH
62678: LD_INT 3
62680: PUSH
62681: LD_INT 4
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: IN
62690: NOT
62691: OR
62692: IFFALSE 62696
// exit ;
62694: GO 62788
// tmp := [ ] ;
62696: LD_ADDR_VAR 0 5
62700: PUSH
62701: EMPTY
62702: ST_TO_ADDR
// for i in units do
62703: LD_ADDR_VAR 0 4
62707: PUSH
62708: LD_VAR 0 1
62712: PUSH
62713: FOR_IN
62714: IFFALSE 62757
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62716: LD_ADDR_VAR 0 5
62720: PUSH
62721: LD_VAR 0 5
62725: PPUSH
62726: LD_VAR 0 5
62730: PUSH
62731: LD_INT 1
62733: PLUS
62734: PPUSH
62735: LD_VAR 0 4
62739: PPUSH
62740: LD_VAR 0 2
62744: PPUSH
62745: CALL_OW 259
62749: PPUSH
62750: CALL_OW 2
62754: ST_TO_ADDR
62755: GO 62713
62757: POP
62758: POP
// if not tmp then
62759: LD_VAR 0 5
62763: NOT
62764: IFFALSE 62768
// exit ;
62766: GO 62788
// result := SortListByListDesc ( units , tmp ) ;
62768: LD_ADDR_VAR 0 3
62772: PUSH
62773: LD_VAR 0 1
62777: PPUSH
62778: LD_VAR 0 5
62782: PPUSH
62783: CALL_OW 77
62787: ST_TO_ADDR
// end ;
62788: LD_VAR 0 3
62792: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62793: LD_INT 0
62795: PPUSH
62796: PPUSH
62797: PPUSH
// result := false ;
62798: LD_ADDR_VAR 0 3
62802: PUSH
62803: LD_INT 0
62805: ST_TO_ADDR
// x := GetX ( building ) ;
62806: LD_ADDR_VAR 0 4
62810: PUSH
62811: LD_VAR 0 2
62815: PPUSH
62816: CALL_OW 250
62820: ST_TO_ADDR
// y := GetY ( building ) ;
62821: LD_ADDR_VAR 0 5
62825: PUSH
62826: LD_VAR 0 2
62830: PPUSH
62831: CALL_OW 251
62835: ST_TO_ADDR
// if not building or not x or not y then
62836: LD_VAR 0 2
62840: NOT
62841: PUSH
62842: LD_VAR 0 4
62846: NOT
62847: OR
62848: PUSH
62849: LD_VAR 0 5
62853: NOT
62854: OR
62855: IFFALSE 62859
// exit ;
62857: GO 62951
// if GetTaskList ( unit ) then
62859: LD_VAR 0 1
62863: PPUSH
62864: CALL_OW 437
62868: IFFALSE 62951
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62870: LD_STRING e
62872: PUSH
62873: LD_VAR 0 1
62877: PPUSH
62878: CALL_OW 437
62882: PUSH
62883: LD_INT 1
62885: ARRAY
62886: PUSH
62887: LD_INT 1
62889: ARRAY
62890: EQUAL
62891: PUSH
62892: LD_VAR 0 4
62896: PUSH
62897: LD_VAR 0 1
62901: PPUSH
62902: CALL_OW 437
62906: PUSH
62907: LD_INT 1
62909: ARRAY
62910: PUSH
62911: LD_INT 2
62913: ARRAY
62914: EQUAL
62915: AND
62916: PUSH
62917: LD_VAR 0 5
62921: PUSH
62922: LD_VAR 0 1
62926: PPUSH
62927: CALL_OW 437
62931: PUSH
62932: LD_INT 1
62934: ARRAY
62935: PUSH
62936: LD_INT 3
62938: ARRAY
62939: EQUAL
62940: AND
62941: IFFALSE 62951
// result := true end ;
62943: LD_ADDR_VAR 0 3
62947: PUSH
62948: LD_INT 1
62950: ST_TO_ADDR
// end ;
62951: LD_VAR 0 3
62955: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62956: LD_INT 0
62958: PPUSH
// result := false ;
62959: LD_ADDR_VAR 0 4
62963: PUSH
62964: LD_INT 0
62966: ST_TO_ADDR
// if GetTaskList ( unit ) then
62967: LD_VAR 0 1
62971: PPUSH
62972: CALL_OW 437
62976: IFFALSE 63059
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62978: LD_STRING M
62980: PUSH
62981: LD_VAR 0 1
62985: PPUSH
62986: CALL_OW 437
62990: PUSH
62991: LD_INT 1
62993: ARRAY
62994: PUSH
62995: LD_INT 1
62997: ARRAY
62998: EQUAL
62999: PUSH
63000: LD_VAR 0 2
63004: PUSH
63005: LD_VAR 0 1
63009: PPUSH
63010: CALL_OW 437
63014: PUSH
63015: LD_INT 1
63017: ARRAY
63018: PUSH
63019: LD_INT 2
63021: ARRAY
63022: EQUAL
63023: AND
63024: PUSH
63025: LD_VAR 0 3
63029: PUSH
63030: LD_VAR 0 1
63034: PPUSH
63035: CALL_OW 437
63039: PUSH
63040: LD_INT 1
63042: ARRAY
63043: PUSH
63044: LD_INT 3
63046: ARRAY
63047: EQUAL
63048: AND
63049: IFFALSE 63059
// result := true ;
63051: LD_ADDR_VAR 0 4
63055: PUSH
63056: LD_INT 1
63058: ST_TO_ADDR
// end ; end ;
63059: LD_VAR 0 4
63063: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63064: LD_INT 0
63066: PPUSH
63067: PPUSH
63068: PPUSH
63069: PPUSH
// if not unit or not area then
63070: LD_VAR 0 1
63074: NOT
63075: PUSH
63076: LD_VAR 0 2
63080: NOT
63081: OR
63082: IFFALSE 63086
// exit ;
63084: GO 63250
// tmp := AreaToList ( area , i ) ;
63086: LD_ADDR_VAR 0 6
63090: PUSH
63091: LD_VAR 0 2
63095: PPUSH
63096: LD_VAR 0 5
63100: PPUSH
63101: CALL_OW 517
63105: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63106: LD_ADDR_VAR 0 5
63110: PUSH
63111: DOUBLE
63112: LD_INT 1
63114: DEC
63115: ST_TO_ADDR
63116: LD_VAR 0 6
63120: PUSH
63121: LD_INT 1
63123: ARRAY
63124: PUSH
63125: FOR_TO
63126: IFFALSE 63248
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63128: LD_ADDR_VAR 0 7
63132: PUSH
63133: LD_VAR 0 6
63137: PUSH
63138: LD_INT 1
63140: ARRAY
63141: PUSH
63142: LD_VAR 0 5
63146: ARRAY
63147: PUSH
63148: LD_VAR 0 6
63152: PUSH
63153: LD_INT 2
63155: ARRAY
63156: PUSH
63157: LD_VAR 0 5
63161: ARRAY
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63167: LD_VAR 0 7
63171: PUSH
63172: LD_INT 1
63174: ARRAY
63175: PPUSH
63176: LD_VAR 0 7
63180: PUSH
63181: LD_INT 2
63183: ARRAY
63184: PPUSH
63185: CALL_OW 428
63189: PUSH
63190: LD_INT 0
63192: EQUAL
63193: IFFALSE 63246
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63195: LD_VAR 0 1
63199: PPUSH
63200: LD_VAR 0 7
63204: PUSH
63205: LD_INT 1
63207: ARRAY
63208: PPUSH
63209: LD_VAR 0 7
63213: PUSH
63214: LD_INT 2
63216: ARRAY
63217: PPUSH
63218: LD_VAR 0 3
63222: PPUSH
63223: CALL_OW 48
// result := IsPlaced ( unit ) ;
63227: LD_ADDR_VAR 0 4
63231: PUSH
63232: LD_VAR 0 1
63236: PPUSH
63237: CALL_OW 305
63241: ST_TO_ADDR
// exit ;
63242: POP
63243: POP
63244: GO 63250
// end ; end ;
63246: GO 63125
63248: POP
63249: POP
// end ;
63250: LD_VAR 0 4
63254: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63255: LD_INT 0
63257: PPUSH
63258: PPUSH
63259: PPUSH
// if not side or side > 8 then
63260: LD_VAR 0 1
63264: NOT
63265: PUSH
63266: LD_VAR 0 1
63270: PUSH
63271: LD_INT 8
63273: GREATER
63274: OR
63275: IFFALSE 63279
// exit ;
63277: GO 63466
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63279: LD_ADDR_VAR 0 4
63283: PUSH
63284: LD_INT 22
63286: PUSH
63287: LD_VAR 0 1
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 21
63298: PUSH
63299: LD_INT 3
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PPUSH
63310: CALL_OW 69
63314: ST_TO_ADDR
// if not tmp then
63315: LD_VAR 0 4
63319: NOT
63320: IFFALSE 63324
// exit ;
63322: GO 63466
// enable_addtolog := true ;
63324: LD_ADDR_OWVAR 81
63328: PUSH
63329: LD_INT 1
63331: ST_TO_ADDR
// AddToLog ( [ ) ;
63332: LD_STRING [
63334: PPUSH
63335: CALL_OW 561
// for i in tmp do
63339: LD_ADDR_VAR 0 3
63343: PUSH
63344: LD_VAR 0 4
63348: PUSH
63349: FOR_IN
63350: IFFALSE 63457
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63352: LD_STRING [
63354: PUSH
63355: LD_VAR 0 3
63359: PPUSH
63360: CALL_OW 266
63364: STR
63365: PUSH
63366: LD_STRING , 
63368: STR
63369: PUSH
63370: LD_VAR 0 3
63374: PPUSH
63375: CALL_OW 250
63379: STR
63380: PUSH
63381: LD_STRING , 
63383: STR
63384: PUSH
63385: LD_VAR 0 3
63389: PPUSH
63390: CALL_OW 251
63394: STR
63395: PUSH
63396: LD_STRING , 
63398: STR
63399: PUSH
63400: LD_VAR 0 3
63404: PPUSH
63405: CALL_OW 254
63409: STR
63410: PUSH
63411: LD_STRING , 
63413: STR
63414: PUSH
63415: LD_VAR 0 3
63419: PPUSH
63420: LD_INT 1
63422: PPUSH
63423: CALL_OW 268
63427: STR
63428: PUSH
63429: LD_STRING , 
63431: STR
63432: PUSH
63433: LD_VAR 0 3
63437: PPUSH
63438: LD_INT 2
63440: PPUSH
63441: CALL_OW 268
63445: STR
63446: PUSH
63447: LD_STRING ],
63449: STR
63450: PPUSH
63451: CALL_OW 561
// end ;
63455: GO 63349
63457: POP
63458: POP
// AddToLog ( ]; ) ;
63459: LD_STRING ];
63461: PPUSH
63462: CALL_OW 561
// end ;
63466: LD_VAR 0 2
63470: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63471: LD_INT 0
63473: PPUSH
63474: PPUSH
63475: PPUSH
63476: PPUSH
63477: PPUSH
// if not area or not rate or not max then
63478: LD_VAR 0 1
63482: NOT
63483: PUSH
63484: LD_VAR 0 2
63488: NOT
63489: OR
63490: PUSH
63491: LD_VAR 0 4
63495: NOT
63496: OR
63497: IFFALSE 63501
// exit ;
63499: GO 63693
// while 1 do
63501: LD_INT 1
63503: IFFALSE 63693
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63505: LD_ADDR_VAR 0 9
63509: PUSH
63510: LD_VAR 0 1
63514: PPUSH
63515: LD_INT 1
63517: PPUSH
63518: CALL_OW 287
63522: PUSH
63523: LD_INT 10
63525: MUL
63526: ST_TO_ADDR
// r := rate / 10 ;
63527: LD_ADDR_VAR 0 7
63531: PUSH
63532: LD_VAR 0 2
63536: PUSH
63537: LD_INT 10
63539: DIVREAL
63540: ST_TO_ADDR
// time := 1 1$00 ;
63541: LD_ADDR_VAR 0 8
63545: PUSH
63546: LD_INT 2100
63548: ST_TO_ADDR
// if amount < min then
63549: LD_VAR 0 9
63553: PUSH
63554: LD_VAR 0 3
63558: LESS
63559: IFFALSE 63577
// r := r * 2 else
63561: LD_ADDR_VAR 0 7
63565: PUSH
63566: LD_VAR 0 7
63570: PUSH
63571: LD_INT 2
63573: MUL
63574: ST_TO_ADDR
63575: GO 63603
// if amount > max then
63577: LD_VAR 0 9
63581: PUSH
63582: LD_VAR 0 4
63586: GREATER
63587: IFFALSE 63603
// r := r / 2 ;
63589: LD_ADDR_VAR 0 7
63593: PUSH
63594: LD_VAR 0 7
63598: PUSH
63599: LD_INT 2
63601: DIVREAL
63602: ST_TO_ADDR
// time := time / r ;
63603: LD_ADDR_VAR 0 8
63607: PUSH
63608: LD_VAR 0 8
63612: PUSH
63613: LD_VAR 0 7
63617: DIVREAL
63618: ST_TO_ADDR
// if time < 0 then
63619: LD_VAR 0 8
63623: PUSH
63624: LD_INT 0
63626: LESS
63627: IFFALSE 63644
// time := time * - 1 ;
63629: LD_ADDR_VAR 0 8
63633: PUSH
63634: LD_VAR 0 8
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: MUL
63643: ST_TO_ADDR
// wait ( time ) ;
63644: LD_VAR 0 8
63648: PPUSH
63649: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63653: LD_INT 35
63655: PPUSH
63656: LD_INT 875
63658: PPUSH
63659: CALL_OW 12
63663: PPUSH
63664: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63668: LD_INT 1
63670: PPUSH
63671: LD_INT 5
63673: PPUSH
63674: CALL_OW 12
63678: PPUSH
63679: LD_VAR 0 1
63683: PPUSH
63684: LD_INT 1
63686: PPUSH
63687: CALL_OW 55
// end ;
63691: GO 63501
// end ;
63693: LD_VAR 0 5
63697: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63698: LD_INT 0
63700: PPUSH
63701: PPUSH
63702: PPUSH
63703: PPUSH
63704: PPUSH
63705: PPUSH
63706: PPUSH
63707: PPUSH
// if not turrets or not factories then
63708: LD_VAR 0 1
63712: NOT
63713: PUSH
63714: LD_VAR 0 2
63718: NOT
63719: OR
63720: IFFALSE 63724
// exit ;
63722: GO 64031
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63724: LD_ADDR_VAR 0 10
63728: PUSH
63729: LD_INT 5
63731: PUSH
63732: LD_INT 6
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 2
63741: PUSH
63742: LD_INT 4
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 3
63751: PUSH
63752: LD_INT 5
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 24
63766: PUSH
63767: LD_INT 25
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 23
63776: PUSH
63777: LD_INT 27
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 42
63790: PUSH
63791: LD_INT 43
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 44
63800: PUSH
63801: LD_INT 46
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 45
63810: PUSH
63811: LD_INT 47
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: LIST
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: LIST
63827: ST_TO_ADDR
// result := [ ] ;
63828: LD_ADDR_VAR 0 3
63832: PUSH
63833: EMPTY
63834: ST_TO_ADDR
// for i in turrets do
63835: LD_ADDR_VAR 0 4
63839: PUSH
63840: LD_VAR 0 1
63844: PUSH
63845: FOR_IN
63846: IFFALSE 64029
// begin nat := GetNation ( i ) ;
63848: LD_ADDR_VAR 0 7
63852: PUSH
63853: LD_VAR 0 4
63857: PPUSH
63858: CALL_OW 248
63862: ST_TO_ADDR
// weapon := 0 ;
63863: LD_ADDR_VAR 0 8
63867: PUSH
63868: LD_INT 0
63870: ST_TO_ADDR
// if not nat then
63871: LD_VAR 0 7
63875: NOT
63876: IFFALSE 63880
// continue ;
63878: GO 63845
// for j in list [ nat ] do
63880: LD_ADDR_VAR 0 5
63884: PUSH
63885: LD_VAR 0 10
63889: PUSH
63890: LD_VAR 0 7
63894: ARRAY
63895: PUSH
63896: FOR_IN
63897: IFFALSE 63938
// if GetBWeapon ( i ) = j [ 1 ] then
63899: LD_VAR 0 4
63903: PPUSH
63904: CALL_OW 269
63908: PUSH
63909: LD_VAR 0 5
63913: PUSH
63914: LD_INT 1
63916: ARRAY
63917: EQUAL
63918: IFFALSE 63936
// begin weapon := j [ 2 ] ;
63920: LD_ADDR_VAR 0 8
63924: PUSH
63925: LD_VAR 0 5
63929: PUSH
63930: LD_INT 2
63932: ARRAY
63933: ST_TO_ADDR
// break ;
63934: GO 63938
// end ;
63936: GO 63896
63938: POP
63939: POP
// if not weapon then
63940: LD_VAR 0 8
63944: NOT
63945: IFFALSE 63949
// continue ;
63947: GO 63845
// for k in factories do
63949: LD_ADDR_VAR 0 6
63953: PUSH
63954: LD_VAR 0 2
63958: PUSH
63959: FOR_IN
63960: IFFALSE 64025
// begin weapons := AvailableWeaponList ( k ) ;
63962: LD_ADDR_VAR 0 9
63966: PUSH
63967: LD_VAR 0 6
63971: PPUSH
63972: CALL_OW 478
63976: ST_TO_ADDR
// if not weapons then
63977: LD_VAR 0 9
63981: NOT
63982: IFFALSE 63986
// continue ;
63984: GO 63959
// if weapon in weapons then
63986: LD_VAR 0 8
63990: PUSH
63991: LD_VAR 0 9
63995: IN
63996: IFFALSE 64023
// begin result := [ i , weapon ] ;
63998: LD_ADDR_VAR 0 3
64002: PUSH
64003: LD_VAR 0 4
64007: PUSH
64008: LD_VAR 0 8
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: ST_TO_ADDR
// exit ;
64017: POP
64018: POP
64019: POP
64020: POP
64021: GO 64031
// end ; end ;
64023: GO 63959
64025: POP
64026: POP
// end ;
64027: GO 63845
64029: POP
64030: POP
// end ;
64031: LD_VAR 0 3
64035: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64036: LD_INT 0
64038: PPUSH
// if not side or side > 8 then
64039: LD_VAR 0 3
64043: NOT
64044: PUSH
64045: LD_VAR 0 3
64049: PUSH
64050: LD_INT 8
64052: GREATER
64053: OR
64054: IFFALSE 64058
// exit ;
64056: GO 64117
// if not range then
64058: LD_VAR 0 4
64062: NOT
64063: IFFALSE 64074
// range := - 12 ;
64065: LD_ADDR_VAR 0 4
64069: PUSH
64070: LD_INT 12
64072: NEG
64073: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64074: LD_VAR 0 1
64078: PPUSH
64079: LD_VAR 0 2
64083: PPUSH
64084: LD_VAR 0 3
64088: PPUSH
64089: LD_VAR 0 4
64093: PPUSH
64094: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64098: LD_VAR 0 1
64102: PPUSH
64103: LD_VAR 0 2
64107: PPUSH
64108: LD_VAR 0 3
64112: PPUSH
64113: CALL_OW 331
// end ;
64117: LD_VAR 0 5
64121: RET
// export function Video ( mode ) ; begin
64122: LD_INT 0
64124: PPUSH
// ingame_video = mode ;
64125: LD_ADDR_OWVAR 52
64129: PUSH
64130: LD_VAR 0 1
64134: ST_TO_ADDR
// interface_hidden = mode ;
64135: LD_ADDR_OWVAR 54
64139: PUSH
64140: LD_VAR 0 1
64144: ST_TO_ADDR
// end ;
64145: LD_VAR 0 2
64149: RET
// export function Join ( array , element ) ; begin
64150: LD_INT 0
64152: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64153: LD_ADDR_VAR 0 3
64157: PUSH
64158: LD_VAR 0 1
64162: PPUSH
64163: LD_VAR 0 1
64167: PUSH
64168: LD_INT 1
64170: PLUS
64171: PPUSH
64172: LD_VAR 0 2
64176: PPUSH
64177: CALL_OW 1
64181: ST_TO_ADDR
// end ;
64182: LD_VAR 0 3
64186: RET
// export function JoinUnion ( array , element ) ; begin
64187: LD_INT 0
64189: PPUSH
// result := array union element ;
64190: LD_ADDR_VAR 0 3
64194: PUSH
64195: LD_VAR 0 1
64199: PUSH
64200: LD_VAR 0 2
64204: UNION
64205: ST_TO_ADDR
// end ;
64206: LD_VAR 0 3
64210: RET
// export function GetBehemoths ( side ) ; begin
64211: LD_INT 0
64213: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64214: LD_ADDR_VAR 0 2
64218: PUSH
64219: LD_INT 22
64221: PUSH
64222: LD_VAR 0 1
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 31
64233: PUSH
64234: LD_INT 25
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PPUSH
64245: CALL_OW 69
64249: ST_TO_ADDR
// end ;
64250: LD_VAR 0 2
64254: RET
// export function Shuffle ( array ) ; var i , index ; begin
64255: LD_INT 0
64257: PPUSH
64258: PPUSH
64259: PPUSH
// result := [ ] ;
64260: LD_ADDR_VAR 0 2
64264: PUSH
64265: EMPTY
64266: ST_TO_ADDR
// if not array then
64267: LD_VAR 0 1
64271: NOT
64272: IFFALSE 64276
// exit ;
64274: GO 64375
// Randomize ;
64276: CALL_OW 10
// for i = array downto 1 do
64280: LD_ADDR_VAR 0 3
64284: PUSH
64285: DOUBLE
64286: LD_VAR 0 1
64290: INC
64291: ST_TO_ADDR
64292: LD_INT 1
64294: PUSH
64295: FOR_DOWNTO
64296: IFFALSE 64373
// begin index := rand ( 1 , array ) ;
64298: LD_ADDR_VAR 0 4
64302: PUSH
64303: LD_INT 1
64305: PPUSH
64306: LD_VAR 0 1
64310: PPUSH
64311: CALL_OW 12
64315: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64316: LD_ADDR_VAR 0 2
64320: PUSH
64321: LD_VAR 0 2
64325: PPUSH
64326: LD_VAR 0 2
64330: PUSH
64331: LD_INT 1
64333: PLUS
64334: PPUSH
64335: LD_VAR 0 1
64339: PUSH
64340: LD_VAR 0 4
64344: ARRAY
64345: PPUSH
64346: CALL_OW 2
64350: ST_TO_ADDR
// array := Delete ( array , index ) ;
64351: LD_ADDR_VAR 0 1
64355: PUSH
64356: LD_VAR 0 1
64360: PPUSH
64361: LD_VAR 0 4
64365: PPUSH
64366: CALL_OW 3
64370: ST_TO_ADDR
// end ;
64371: GO 64295
64373: POP
64374: POP
// end ;
64375: LD_VAR 0 2
64379: RET
// export function GetBaseMaterials ( base ) ; begin
64380: LD_INT 0
64382: PPUSH
// result := [ 0 , 0 , 0 ] ;
64383: LD_ADDR_VAR 0 2
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: LIST
64401: ST_TO_ADDR
// if not base then
64402: LD_VAR 0 1
64406: NOT
64407: IFFALSE 64411
// exit ;
64409: GO 64460
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64411: LD_ADDR_VAR 0 2
64415: PUSH
64416: LD_VAR 0 1
64420: PPUSH
64421: LD_INT 1
64423: PPUSH
64424: CALL_OW 275
64428: PUSH
64429: LD_VAR 0 1
64433: PPUSH
64434: LD_INT 2
64436: PPUSH
64437: CALL_OW 275
64441: PUSH
64442: LD_VAR 0 1
64446: PPUSH
64447: LD_INT 3
64449: PPUSH
64450: CALL_OW 275
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: LIST
64459: ST_TO_ADDR
// end ;
64460: LD_VAR 0 2
64464: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64465: LD_INT 0
64467: PPUSH
64468: PPUSH
// result := array ;
64469: LD_ADDR_VAR 0 3
64473: PUSH
64474: LD_VAR 0 1
64478: ST_TO_ADDR
// if size > 0 then
64479: LD_VAR 0 2
64483: PUSH
64484: LD_INT 0
64486: GREATER
64487: IFFALSE 64533
// for i := array downto size do
64489: LD_ADDR_VAR 0 4
64493: PUSH
64494: DOUBLE
64495: LD_VAR 0 1
64499: INC
64500: ST_TO_ADDR
64501: LD_VAR 0 2
64505: PUSH
64506: FOR_DOWNTO
64507: IFFALSE 64531
// result := Delete ( result , result ) ;
64509: LD_ADDR_VAR 0 3
64513: PUSH
64514: LD_VAR 0 3
64518: PPUSH
64519: LD_VAR 0 3
64523: PPUSH
64524: CALL_OW 3
64528: ST_TO_ADDR
64529: GO 64506
64531: POP
64532: POP
// end ;
64533: LD_VAR 0 3
64537: RET
// export function ComExit ( unit ) ; var tmp ; begin
64538: LD_INT 0
64540: PPUSH
64541: PPUSH
// if not IsInUnit ( unit ) then
64542: LD_VAR 0 1
64546: PPUSH
64547: CALL_OW 310
64551: NOT
64552: IFFALSE 64556
// exit ;
64554: GO 64616
// tmp := IsInUnit ( unit ) ;
64556: LD_ADDR_VAR 0 3
64560: PUSH
64561: LD_VAR 0 1
64565: PPUSH
64566: CALL_OW 310
64570: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64571: LD_VAR 0 3
64575: PPUSH
64576: CALL_OW 247
64580: PUSH
64581: LD_INT 2
64583: EQUAL
64584: IFFALSE 64597
// ComExitVehicle ( unit ) else
64586: LD_VAR 0 1
64590: PPUSH
64591: CALL_OW 121
64595: GO 64606
// ComExitBuilding ( unit ) ;
64597: LD_VAR 0 1
64601: PPUSH
64602: CALL_OW 122
// result := tmp ;
64606: LD_ADDR_VAR 0 2
64610: PUSH
64611: LD_VAR 0 3
64615: ST_TO_ADDR
// end ;
64616: LD_VAR 0 2
64620: RET
// export function ComExitAll ( units ) ; var i ; begin
64621: LD_INT 0
64623: PPUSH
64624: PPUSH
// if not units then
64625: LD_VAR 0 1
64629: NOT
64630: IFFALSE 64634
// exit ;
64632: GO 64660
// for i in units do
64634: LD_ADDR_VAR 0 3
64638: PUSH
64639: LD_VAR 0 1
64643: PUSH
64644: FOR_IN
64645: IFFALSE 64658
// ComExit ( i ) ;
64647: LD_VAR 0 3
64651: PPUSH
64652: CALL 64538 0 1
64656: GO 64644
64658: POP
64659: POP
// end ;
64660: LD_VAR 0 2
64664: RET
// export function ResetHc ; begin
64665: LD_INT 0
64667: PPUSH
// InitHc ;
64668: CALL_OW 19
// hc_importance := 0 ;
64672: LD_ADDR_OWVAR 32
64676: PUSH
64677: LD_INT 0
64679: ST_TO_ADDR
// end ;
64680: LD_VAR 0 1
64684: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64685: LD_INT 0
64687: PPUSH
64688: PPUSH
64689: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64690: LD_ADDR_VAR 0 6
64694: PUSH
64695: LD_VAR 0 1
64699: PUSH
64700: LD_VAR 0 3
64704: PLUS
64705: PUSH
64706: LD_INT 2
64708: DIV
64709: ST_TO_ADDR
// if _x < 0 then
64710: LD_VAR 0 6
64714: PUSH
64715: LD_INT 0
64717: LESS
64718: IFFALSE 64735
// _x := _x * - 1 ;
64720: LD_ADDR_VAR 0 6
64724: PUSH
64725: LD_VAR 0 6
64729: PUSH
64730: LD_INT 1
64732: NEG
64733: MUL
64734: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64735: LD_ADDR_VAR 0 7
64739: PUSH
64740: LD_VAR 0 2
64744: PUSH
64745: LD_VAR 0 4
64749: PLUS
64750: PUSH
64751: LD_INT 2
64753: DIV
64754: ST_TO_ADDR
// if _y < 0 then
64755: LD_VAR 0 7
64759: PUSH
64760: LD_INT 0
64762: LESS
64763: IFFALSE 64780
// _y := _y * - 1 ;
64765: LD_ADDR_VAR 0 7
64769: PUSH
64770: LD_VAR 0 7
64774: PUSH
64775: LD_INT 1
64777: NEG
64778: MUL
64779: ST_TO_ADDR
// result := [ _x , _y ] ;
64780: LD_ADDR_VAR 0 5
64784: PUSH
64785: LD_VAR 0 6
64789: PUSH
64790: LD_VAR 0 7
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: ST_TO_ADDR
// end ;
64799: LD_VAR 0 5
64803: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64804: LD_INT 0
64806: PPUSH
64807: PPUSH
64808: PPUSH
64809: PPUSH
// task := GetTaskList ( unit ) ;
64810: LD_ADDR_VAR 0 7
64814: PUSH
64815: LD_VAR 0 1
64819: PPUSH
64820: CALL_OW 437
64824: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64825: LD_VAR 0 7
64829: NOT
64830: PUSH
64831: LD_VAR 0 1
64835: PPUSH
64836: LD_VAR 0 2
64840: PPUSH
64841: CALL_OW 308
64845: NOT
64846: AND
64847: IFFALSE 64851
// exit ;
64849: GO 64969
// if IsInArea ( unit , area ) then
64851: LD_VAR 0 1
64855: PPUSH
64856: LD_VAR 0 2
64860: PPUSH
64861: CALL_OW 308
64865: IFFALSE 64883
// begin ComMoveToArea ( unit , goAway ) ;
64867: LD_VAR 0 1
64871: PPUSH
64872: LD_VAR 0 3
64876: PPUSH
64877: CALL_OW 113
// exit ;
64881: GO 64969
// end ; if task [ 1 ] [ 1 ] <> M then
64883: LD_VAR 0 7
64887: PUSH
64888: LD_INT 1
64890: ARRAY
64891: PUSH
64892: LD_INT 1
64894: ARRAY
64895: PUSH
64896: LD_STRING M
64898: NONEQUAL
64899: IFFALSE 64903
// exit ;
64901: GO 64969
// x := task [ 1 ] [ 2 ] ;
64903: LD_ADDR_VAR 0 5
64907: PUSH
64908: LD_VAR 0 7
64912: PUSH
64913: LD_INT 1
64915: ARRAY
64916: PUSH
64917: LD_INT 2
64919: ARRAY
64920: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64921: LD_ADDR_VAR 0 6
64925: PUSH
64926: LD_VAR 0 7
64930: PUSH
64931: LD_INT 1
64933: ARRAY
64934: PUSH
64935: LD_INT 3
64937: ARRAY
64938: ST_TO_ADDR
// if InArea ( x , y , area ) then
64939: LD_VAR 0 5
64943: PPUSH
64944: LD_VAR 0 6
64948: PPUSH
64949: LD_VAR 0 2
64953: PPUSH
64954: CALL_OW 309
64958: IFFALSE 64969
// ComStop ( unit ) ;
64960: LD_VAR 0 1
64964: PPUSH
64965: CALL_OW 141
// end ;
64969: LD_VAR 0 4
64973: RET
// export function Abs ( value ) ; begin
64974: LD_INT 0
64976: PPUSH
// result := value ;
64977: LD_ADDR_VAR 0 2
64981: PUSH
64982: LD_VAR 0 1
64986: ST_TO_ADDR
// if value < 0 then
64987: LD_VAR 0 1
64991: PUSH
64992: LD_INT 0
64994: LESS
64995: IFFALSE 65012
// result := value * - 1 ;
64997: LD_ADDR_VAR 0 2
65001: PUSH
65002: LD_VAR 0 1
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: MUL
65011: ST_TO_ADDR
// end ;
65012: LD_VAR 0 2
65016: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65017: LD_INT 0
65019: PPUSH
65020: PPUSH
65021: PPUSH
65022: PPUSH
65023: PPUSH
65024: PPUSH
65025: PPUSH
65026: PPUSH
// if not unit or not building then
65027: LD_VAR 0 1
65031: NOT
65032: PUSH
65033: LD_VAR 0 2
65037: NOT
65038: OR
65039: IFFALSE 65043
// exit ;
65041: GO 65269
// x := GetX ( building ) ;
65043: LD_ADDR_VAR 0 4
65047: PUSH
65048: LD_VAR 0 2
65052: PPUSH
65053: CALL_OW 250
65057: ST_TO_ADDR
// y := GetY ( building ) ;
65058: LD_ADDR_VAR 0 6
65062: PUSH
65063: LD_VAR 0 2
65067: PPUSH
65068: CALL_OW 251
65072: ST_TO_ADDR
// d := GetDir ( building ) ;
65073: LD_ADDR_VAR 0 8
65077: PUSH
65078: LD_VAR 0 2
65082: PPUSH
65083: CALL_OW 254
65087: ST_TO_ADDR
// r := 4 ;
65088: LD_ADDR_VAR 0 9
65092: PUSH
65093: LD_INT 4
65095: ST_TO_ADDR
// for i := 1 to 5 do
65096: LD_ADDR_VAR 0 10
65100: PUSH
65101: DOUBLE
65102: LD_INT 1
65104: DEC
65105: ST_TO_ADDR
65106: LD_INT 5
65108: PUSH
65109: FOR_TO
65110: IFFALSE 65267
// begin _x := ShiftX ( x , d , r + i ) ;
65112: LD_ADDR_VAR 0 5
65116: PUSH
65117: LD_VAR 0 4
65121: PPUSH
65122: LD_VAR 0 8
65126: PPUSH
65127: LD_VAR 0 9
65131: PUSH
65132: LD_VAR 0 10
65136: PLUS
65137: PPUSH
65138: CALL_OW 272
65142: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65143: LD_ADDR_VAR 0 7
65147: PUSH
65148: LD_VAR 0 6
65152: PPUSH
65153: LD_VAR 0 8
65157: PPUSH
65158: LD_VAR 0 9
65162: PUSH
65163: LD_VAR 0 10
65167: PLUS
65168: PPUSH
65169: CALL_OW 273
65173: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65174: LD_VAR 0 5
65178: PPUSH
65179: LD_VAR 0 7
65183: PPUSH
65184: CALL_OW 488
65188: PUSH
65189: LD_VAR 0 5
65193: PPUSH
65194: LD_VAR 0 7
65198: PPUSH
65199: CALL_OW 428
65203: PPUSH
65204: CALL_OW 247
65208: PUSH
65209: LD_INT 3
65211: PUSH
65212: LD_INT 2
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: IN
65219: NOT
65220: AND
65221: IFFALSE 65265
// begin ComMoveXY ( unit , _x , _y ) ;
65223: LD_VAR 0 1
65227: PPUSH
65228: LD_VAR 0 5
65232: PPUSH
65233: LD_VAR 0 7
65237: PPUSH
65238: CALL_OW 111
// result := [ _x , _y ] ;
65242: LD_ADDR_VAR 0 3
65246: PUSH
65247: LD_VAR 0 5
65251: PUSH
65252: LD_VAR 0 7
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: ST_TO_ADDR
// exit ;
65261: POP
65262: POP
65263: GO 65269
// end ; end ;
65265: GO 65109
65267: POP
65268: POP
// end ;
65269: LD_VAR 0 3
65273: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65274: LD_INT 0
65276: PPUSH
65277: PPUSH
65278: PPUSH
// result := 0 ;
65279: LD_ADDR_VAR 0 3
65283: PUSH
65284: LD_INT 0
65286: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65287: LD_VAR 0 1
65291: PUSH
65292: LD_INT 0
65294: LESS
65295: PUSH
65296: LD_VAR 0 1
65300: PUSH
65301: LD_INT 8
65303: GREATER
65304: OR
65305: PUSH
65306: LD_VAR 0 2
65310: PUSH
65311: LD_INT 0
65313: LESS
65314: OR
65315: PUSH
65316: LD_VAR 0 2
65320: PUSH
65321: LD_INT 8
65323: GREATER
65324: OR
65325: IFFALSE 65329
// exit ;
65327: GO 65404
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65329: LD_ADDR_VAR 0 4
65333: PUSH
65334: LD_INT 22
65336: PUSH
65337: LD_VAR 0 2
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PPUSH
65346: CALL_OW 69
65350: PUSH
65351: FOR_IN
65352: IFFALSE 65402
// begin un := UnitShoot ( i ) ;
65354: LD_ADDR_VAR 0 5
65358: PUSH
65359: LD_VAR 0 4
65363: PPUSH
65364: CALL_OW 504
65368: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65369: LD_VAR 0 5
65373: PPUSH
65374: CALL_OW 255
65378: PUSH
65379: LD_VAR 0 1
65383: EQUAL
65384: IFFALSE 65400
// begin result := un ;
65386: LD_ADDR_VAR 0 3
65390: PUSH
65391: LD_VAR 0 5
65395: ST_TO_ADDR
// exit ;
65396: POP
65397: POP
65398: GO 65404
// end ; end ;
65400: GO 65351
65402: POP
65403: POP
// end ;
65404: LD_VAR 0 3
65408: RET
// export function GetCargoBay ( units ) ; begin
65409: LD_INT 0
65411: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65412: LD_ADDR_VAR 0 2
65416: PUSH
65417: LD_VAR 0 1
65421: PPUSH
65422: LD_INT 2
65424: PUSH
65425: LD_INT 34
65427: PUSH
65428: LD_INT 12
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 34
65437: PUSH
65438: LD_INT 51
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 34
65447: PUSH
65448: LD_INT 32
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 34
65457: PUSH
65458: LD_EXP 26
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: PPUSH
65474: CALL_OW 72
65478: ST_TO_ADDR
// end ;
65479: LD_VAR 0 2
65483: RET
// export function Negate ( value ) ; begin
65484: LD_INT 0
65486: PPUSH
// result := not value ;
65487: LD_ADDR_VAR 0 2
65491: PUSH
65492: LD_VAR 0 1
65496: NOT
65497: ST_TO_ADDR
// end ;
65498: LD_VAR 0 2
65502: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
65503: LD_INT 0
65505: PPUSH
// if x1 = x2 then
65506: LD_VAR 0 1
65510: PUSH
65511: LD_VAR 0 3
65515: EQUAL
65516: IFFALSE 65550
// begin if y1 > y2 then
65518: LD_VAR 0 2
65522: PUSH
65523: LD_VAR 0 4
65527: GREATER
65528: IFFALSE 65540
// result := 0 else
65530: LD_ADDR_VAR 0 5
65534: PUSH
65535: LD_INT 0
65537: ST_TO_ADDR
65538: GO 65548
// result := 3 ;
65540: LD_ADDR_VAR 0 5
65544: PUSH
65545: LD_INT 3
65547: ST_TO_ADDR
// exit ;
65548: GO 65636
// end ; if y1 = y2 then
65550: LD_VAR 0 2
65554: PUSH
65555: LD_VAR 0 4
65559: EQUAL
65560: IFFALSE 65594
// begin if x1 > x2 then
65562: LD_VAR 0 1
65566: PUSH
65567: LD_VAR 0 3
65571: GREATER
65572: IFFALSE 65584
// result := 1 else
65574: LD_ADDR_VAR 0 5
65578: PUSH
65579: LD_INT 1
65581: ST_TO_ADDR
65582: GO 65592
// result := 4 ;
65584: LD_ADDR_VAR 0 5
65588: PUSH
65589: LD_INT 4
65591: ST_TO_ADDR
// exit ;
65592: GO 65636
// end ; if x1 > x2 and y1 > y2 then
65594: LD_VAR 0 1
65598: PUSH
65599: LD_VAR 0 3
65603: GREATER
65604: PUSH
65605: LD_VAR 0 2
65609: PUSH
65610: LD_VAR 0 4
65614: GREATER
65615: AND
65616: IFFALSE 65628
// result := 2 else
65618: LD_ADDR_VAR 0 5
65622: PUSH
65623: LD_INT 2
65625: ST_TO_ADDR
65626: GO 65636
// result := 5 ;
65628: LD_ADDR_VAR 0 5
65632: PUSH
65633: LD_INT 5
65635: ST_TO_ADDR
// end ;
65636: LD_VAR 0 5
65640: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65641: LD_INT 0
65643: PPUSH
65644: PPUSH
// if not driver or not IsInUnit ( driver ) then
65645: LD_VAR 0 1
65649: NOT
65650: PUSH
65651: LD_VAR 0 1
65655: PPUSH
65656: CALL_OW 310
65660: NOT
65661: OR
65662: IFFALSE 65666
// exit ;
65664: GO 65756
// vehicle := IsInUnit ( driver ) ;
65666: LD_ADDR_VAR 0 3
65670: PUSH
65671: LD_VAR 0 1
65675: PPUSH
65676: CALL_OW 310
65680: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65681: LD_VAR 0 1
65685: PPUSH
65686: LD_STRING \
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: PUSH
65716: LD_STRING E
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: LD_VAR 0 3
65729: PUSH
65730: LD_INT 0
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PPUSH
65752: CALL_OW 446
// end ;
65756: LD_VAR 0 2
65760: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65761: LD_INT 0
65763: PPUSH
65764: PPUSH
// if not driver or not IsInUnit ( driver ) then
65765: LD_VAR 0 1
65769: NOT
65770: PUSH
65771: LD_VAR 0 1
65775: PPUSH
65776: CALL_OW 310
65780: NOT
65781: OR
65782: IFFALSE 65786
// exit ;
65784: GO 65876
// vehicle := IsInUnit ( driver ) ;
65786: LD_ADDR_VAR 0 3
65790: PUSH
65791: LD_VAR 0 1
65795: PPUSH
65796: CALL_OW 310
65800: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65801: LD_VAR 0 1
65805: PPUSH
65806: LD_STRING \
65808: PUSH
65809: LD_INT 0
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: PUSH
65836: LD_STRING E
65838: PUSH
65839: LD_INT 0
65841: PUSH
65842: LD_INT 0
65844: PUSH
65845: LD_VAR 0 3
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: LD_INT 0
65855: PUSH
65856: LD_INT 0
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PPUSH
65872: CALL_OW 447
// end ;
65876: LD_VAR 0 2
65880: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65881: LD_INT 0
65883: PPUSH
65884: PPUSH
65885: PPUSH
// tmp := [ ] ;
65886: LD_ADDR_VAR 0 5
65890: PUSH
65891: EMPTY
65892: ST_TO_ADDR
// for i in units do
65893: LD_ADDR_VAR 0 4
65897: PUSH
65898: LD_VAR 0 1
65902: PUSH
65903: FOR_IN
65904: IFFALSE 65942
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65906: LD_ADDR_VAR 0 5
65910: PUSH
65911: LD_VAR 0 5
65915: PPUSH
65916: LD_VAR 0 5
65920: PUSH
65921: LD_INT 1
65923: PLUS
65924: PPUSH
65925: LD_VAR 0 4
65929: PPUSH
65930: CALL_OW 256
65934: PPUSH
65935: CALL_OW 2
65939: ST_TO_ADDR
65940: GO 65903
65942: POP
65943: POP
// if not tmp then
65944: LD_VAR 0 5
65948: NOT
65949: IFFALSE 65953
// exit ;
65951: GO 66001
// if asc then
65953: LD_VAR 0 2
65957: IFFALSE 65981
// result := SortListByListAsc ( units , tmp ) else
65959: LD_ADDR_VAR 0 3
65963: PUSH
65964: LD_VAR 0 1
65968: PPUSH
65969: LD_VAR 0 5
65973: PPUSH
65974: CALL_OW 76
65978: ST_TO_ADDR
65979: GO 66001
// result := SortListByListDesc ( units , tmp ) ;
65981: LD_ADDR_VAR 0 3
65985: PUSH
65986: LD_VAR 0 1
65990: PPUSH
65991: LD_VAR 0 5
65995: PPUSH
65996: CALL_OW 77
66000: ST_TO_ADDR
// end ;
66001: LD_VAR 0 3
66005: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66006: LD_INT 0
66008: PPUSH
66009: PPUSH
// task := GetTaskList ( mech ) ;
66010: LD_ADDR_VAR 0 4
66014: PUSH
66015: LD_VAR 0 1
66019: PPUSH
66020: CALL_OW 437
66024: ST_TO_ADDR
// if not task then
66025: LD_VAR 0 4
66029: NOT
66030: IFFALSE 66034
// exit ;
66032: GO 66076
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66034: LD_ADDR_VAR 0 3
66038: PUSH
66039: LD_VAR 0 4
66043: PUSH
66044: LD_INT 1
66046: ARRAY
66047: PUSH
66048: LD_INT 1
66050: ARRAY
66051: PUSH
66052: LD_STRING r
66054: EQUAL
66055: PUSH
66056: LD_VAR 0 4
66060: PUSH
66061: LD_INT 1
66063: ARRAY
66064: PUSH
66065: LD_INT 4
66067: ARRAY
66068: PUSH
66069: LD_VAR 0 2
66073: EQUAL
66074: AND
66075: ST_TO_ADDR
// end ;
66076: LD_VAR 0 3
66080: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66081: LD_INT 0
66083: PPUSH
// SetDir ( unit , d ) ;
66084: LD_VAR 0 1
66088: PPUSH
66089: LD_VAR 0 4
66093: PPUSH
66094: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66098: LD_VAR 0 1
66102: PPUSH
66103: LD_VAR 0 2
66107: PPUSH
66108: LD_VAR 0 3
66112: PPUSH
66113: LD_VAR 0 5
66117: PPUSH
66118: CALL_OW 48
// end ;
66122: LD_VAR 0 6
66126: RET
// export function ToNaturalNumber ( number ) ; begin
66127: LD_INT 0
66129: PPUSH
// result := number div 1 ;
66130: LD_ADDR_VAR 0 2
66134: PUSH
66135: LD_VAR 0 1
66139: PUSH
66140: LD_INT 1
66142: DIV
66143: ST_TO_ADDR
// if number < 0 then
66144: LD_VAR 0 1
66148: PUSH
66149: LD_INT 0
66151: LESS
66152: IFFALSE 66162
// result := 0 ;
66154: LD_ADDR_VAR 0 2
66158: PUSH
66159: LD_INT 0
66161: ST_TO_ADDR
// end ;
66162: LD_VAR 0 2
66166: RET
// export function SortByClass ( units , class ) ; var un ; begin
66167: LD_INT 0
66169: PPUSH
66170: PPUSH
// if not units or not class then
66171: LD_VAR 0 1
66175: NOT
66176: PUSH
66177: LD_VAR 0 2
66181: NOT
66182: OR
66183: IFFALSE 66187
// exit ;
66185: GO 66282
// result := [ ] ;
66187: LD_ADDR_VAR 0 3
66191: PUSH
66192: EMPTY
66193: ST_TO_ADDR
// for un in units do
66194: LD_ADDR_VAR 0 4
66198: PUSH
66199: LD_VAR 0 1
66203: PUSH
66204: FOR_IN
66205: IFFALSE 66280
// if GetClass ( un ) = class then
66207: LD_VAR 0 4
66211: PPUSH
66212: CALL_OW 257
66216: PUSH
66217: LD_VAR 0 2
66221: EQUAL
66222: IFFALSE 66249
// result := Insert ( result , 1 , un ) else
66224: LD_ADDR_VAR 0 3
66228: PUSH
66229: LD_VAR 0 3
66233: PPUSH
66234: LD_INT 1
66236: PPUSH
66237: LD_VAR 0 4
66241: PPUSH
66242: CALL_OW 2
66246: ST_TO_ADDR
66247: GO 66278
// result := Replace ( result , result + 1 , un ) ;
66249: LD_ADDR_VAR 0 3
66253: PUSH
66254: LD_VAR 0 3
66258: PPUSH
66259: LD_VAR 0 3
66263: PUSH
66264: LD_INT 1
66266: PLUS
66267: PPUSH
66268: LD_VAR 0 4
66272: PPUSH
66273: CALL_OW 1
66277: ST_TO_ADDR
66278: GO 66204
66280: POP
66281: POP
// end ;
66282: LD_VAR 0 3
66286: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66287: LD_INT 0
66289: PPUSH
66290: PPUSH
66291: PPUSH
66292: PPUSH
66293: PPUSH
66294: PPUSH
66295: PPUSH
// result := [ ] ;
66296: LD_ADDR_VAR 0 4
66300: PUSH
66301: EMPTY
66302: ST_TO_ADDR
// if x - r < 0 then
66303: LD_VAR 0 1
66307: PUSH
66308: LD_VAR 0 3
66312: MINUS
66313: PUSH
66314: LD_INT 0
66316: LESS
66317: IFFALSE 66329
// min_x := 0 else
66319: LD_ADDR_VAR 0 8
66323: PUSH
66324: LD_INT 0
66326: ST_TO_ADDR
66327: GO 66345
// min_x := x - r ;
66329: LD_ADDR_VAR 0 8
66333: PUSH
66334: LD_VAR 0 1
66338: PUSH
66339: LD_VAR 0 3
66343: MINUS
66344: ST_TO_ADDR
// if y - r < 0 then
66345: LD_VAR 0 2
66349: PUSH
66350: LD_VAR 0 3
66354: MINUS
66355: PUSH
66356: LD_INT 0
66358: LESS
66359: IFFALSE 66371
// min_y := 0 else
66361: LD_ADDR_VAR 0 7
66365: PUSH
66366: LD_INT 0
66368: ST_TO_ADDR
66369: GO 66387
// min_y := y - r ;
66371: LD_ADDR_VAR 0 7
66375: PUSH
66376: LD_VAR 0 2
66380: PUSH
66381: LD_VAR 0 3
66385: MINUS
66386: ST_TO_ADDR
// max_x := x + r ;
66387: LD_ADDR_VAR 0 9
66391: PUSH
66392: LD_VAR 0 1
66396: PUSH
66397: LD_VAR 0 3
66401: PLUS
66402: ST_TO_ADDR
// max_y := y + r ;
66403: LD_ADDR_VAR 0 10
66407: PUSH
66408: LD_VAR 0 2
66412: PUSH
66413: LD_VAR 0 3
66417: PLUS
66418: ST_TO_ADDR
// for _x = min_x to max_x do
66419: LD_ADDR_VAR 0 5
66423: PUSH
66424: DOUBLE
66425: LD_VAR 0 8
66429: DEC
66430: ST_TO_ADDR
66431: LD_VAR 0 9
66435: PUSH
66436: FOR_TO
66437: IFFALSE 66538
// for _y = min_y to max_y do
66439: LD_ADDR_VAR 0 6
66443: PUSH
66444: DOUBLE
66445: LD_VAR 0 7
66449: DEC
66450: ST_TO_ADDR
66451: LD_VAR 0 10
66455: PUSH
66456: FOR_TO
66457: IFFALSE 66534
// begin if not ValidHex ( _x , _y ) then
66459: LD_VAR 0 5
66463: PPUSH
66464: LD_VAR 0 6
66468: PPUSH
66469: CALL_OW 488
66473: NOT
66474: IFFALSE 66478
// continue ;
66476: GO 66456
// if GetResourceTypeXY ( _x , _y ) then
66478: LD_VAR 0 5
66482: PPUSH
66483: LD_VAR 0 6
66487: PPUSH
66488: CALL_OW 283
66492: IFFALSE 66532
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66494: LD_ADDR_VAR 0 4
66498: PUSH
66499: LD_VAR 0 4
66503: PPUSH
66504: LD_VAR 0 4
66508: PUSH
66509: LD_INT 1
66511: PLUS
66512: PPUSH
66513: LD_VAR 0 5
66517: PUSH
66518: LD_VAR 0 6
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PPUSH
66527: CALL_OW 1
66531: ST_TO_ADDR
// end ;
66532: GO 66456
66534: POP
66535: POP
66536: GO 66436
66538: POP
66539: POP
// end ;
66540: LD_VAR 0 4
66544: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
66545: LD_INT 0
66547: PPUSH
66548: PPUSH
66549: PPUSH
66550: PPUSH
66551: PPUSH
66552: PPUSH
// if not units then
66553: LD_VAR 0 1
66557: NOT
66558: IFFALSE 66562
// exit ;
66560: GO 66963
// result := UnitFilter ( units , [ f_ok ] ) ;
66562: LD_ADDR_VAR 0 3
66566: PUSH
66567: LD_VAR 0 1
66571: PPUSH
66572: LD_INT 50
66574: PUSH
66575: EMPTY
66576: LIST
66577: PPUSH
66578: CALL_OW 72
66582: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66583: LD_ADDR_VAR 0 7
66587: PUSH
66588: LD_VAR 0 1
66592: PUSH
66593: LD_INT 1
66595: ARRAY
66596: PPUSH
66597: CALL_OW 255
66601: ST_TO_ADDR
// if not result then
66602: LD_VAR 0 3
66606: NOT
66607: IFFALSE 66611
// exit ;
66609: GO 66963
// for i in result do
66611: LD_ADDR_VAR 0 4
66615: PUSH
66616: LD_VAR 0 3
66620: PUSH
66621: FOR_IN
66622: IFFALSE 66961
// begin tag := GetTag ( i ) + 1 ;
66624: LD_ADDR_VAR 0 8
66628: PUSH
66629: LD_VAR 0 4
66633: PPUSH
66634: CALL_OW 110
66638: PUSH
66639: LD_INT 1
66641: PLUS
66642: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66643: LD_ADDR_VAR 0 6
66647: PUSH
66648: LD_VAR 0 4
66652: PPUSH
66653: CALL_OW 250
66657: PPUSH
66658: LD_VAR 0 4
66662: PPUSH
66663: CALL_OW 251
66667: PPUSH
66668: LD_INT 6
66670: PPUSH
66671: CALL 66287 0 3
66675: ST_TO_ADDR
// if cr then
66676: LD_VAR 0 6
66680: IFFALSE 66719
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66682: LD_VAR 0 4
66686: PPUSH
66687: LD_VAR 0 6
66691: PUSH
66692: LD_INT 1
66694: ARRAY
66695: PUSH
66696: LD_INT 1
66698: ARRAY
66699: PPUSH
66700: LD_VAR 0 6
66704: PUSH
66705: LD_INT 1
66707: ARRAY
66708: PUSH
66709: LD_INT 2
66711: ARRAY
66712: PPUSH
66713: CALL_OW 116
66717: GO 66959
// if path > tag then
66719: LD_VAR 0 2
66723: PUSH
66724: LD_VAR 0 8
66728: GREATER
66729: IFFALSE 66907
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
66731: LD_ADDR_VAR 0 5
66735: PUSH
66736: LD_INT 81
66738: PUSH
66739: LD_VAR 0 7
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 91
66750: PUSH
66751: LD_VAR 0 4
66755: PUSH
66756: LD_INT 12
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: LIST
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PPUSH
66768: CALL_OW 69
66772: ST_TO_ADDR
// if enemy then
66773: LD_VAR 0 5
66777: IFFALSE 66805
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66779: LD_VAR 0 4
66783: PPUSH
66784: LD_VAR 0 5
66788: PPUSH
66789: LD_VAR 0 4
66793: PPUSH
66794: CALL_OW 74
66798: PPUSH
66799: CALL_OW 115
66803: GO 66905
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66805: LD_VAR 0 4
66809: PPUSH
66810: LD_VAR 0 2
66814: PUSH
66815: LD_VAR 0 8
66819: ARRAY
66820: PUSH
66821: LD_INT 1
66823: ARRAY
66824: PPUSH
66825: LD_VAR 0 2
66829: PUSH
66830: LD_VAR 0 8
66834: ARRAY
66835: PUSH
66836: LD_INT 2
66838: ARRAY
66839: PPUSH
66840: CALL_OW 297
66844: PUSH
66845: LD_INT 6
66847: GREATER
66848: IFFALSE 66891
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66850: LD_VAR 0 4
66854: PPUSH
66855: LD_VAR 0 2
66859: PUSH
66860: LD_VAR 0 8
66864: ARRAY
66865: PUSH
66866: LD_INT 1
66868: ARRAY
66869: PPUSH
66870: LD_VAR 0 2
66874: PUSH
66875: LD_VAR 0 8
66879: ARRAY
66880: PUSH
66881: LD_INT 2
66883: ARRAY
66884: PPUSH
66885: CALL_OW 114
66889: GO 66905
// SetTag ( i , tag ) ;
66891: LD_VAR 0 4
66895: PPUSH
66896: LD_VAR 0 8
66900: PPUSH
66901: CALL_OW 109
// end else
66905: GO 66959
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66907: LD_ADDR_VAR 0 5
66911: PUSH
66912: LD_INT 81
66914: PUSH
66915: LD_VAR 0 7
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PPUSH
66924: CALL_OW 69
66928: ST_TO_ADDR
// if enemy then
66929: LD_VAR 0 5
66933: IFFALSE 66959
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66935: LD_VAR 0 4
66939: PPUSH
66940: LD_VAR 0 5
66944: PPUSH
66945: LD_VAR 0 4
66949: PPUSH
66950: CALL_OW 74
66954: PPUSH
66955: CALL_OW 115
// end ; end ;
66959: GO 66621
66961: POP
66962: POP
// end ; end_of_file
66963: LD_VAR 0 3
66967: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66968: LD_VAR 0 1
66972: PUSH
66973: LD_INT 200
66975: DOUBLE
66976: GREATEREQUAL
66977: IFFALSE 66985
66979: LD_INT 299
66981: DOUBLE
66982: LESSEQUAL
66983: IFTRUE 66987
66985: GO 67019
66987: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66988: LD_VAR 0 1
66992: PPUSH
66993: LD_VAR 0 2
66997: PPUSH
66998: LD_VAR 0 3
67002: PPUSH
67003: LD_VAR 0 4
67007: PPUSH
67008: LD_VAR 0 5
67012: PPUSH
67013: CALL 23530 0 5
67017: GO 67096
67019: LD_INT 300
67021: DOUBLE
67022: GREATEREQUAL
67023: IFFALSE 67031
67025: LD_INT 399
67027: DOUBLE
67028: LESSEQUAL
67029: IFTRUE 67033
67031: GO 67095
67033: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67034: LD_VAR 0 1
67038: PPUSH
67039: LD_VAR 0 2
67043: PPUSH
67044: LD_VAR 0 3
67048: PPUSH
67049: LD_VAR 0 4
67053: PPUSH
67054: LD_VAR 0 5
67058: PPUSH
67059: LD_VAR 0 6
67063: PPUSH
67064: LD_VAR 0 7
67068: PPUSH
67069: LD_VAR 0 8
67073: PPUSH
67074: LD_VAR 0 9
67078: PPUSH
67079: LD_VAR 0 10
67083: PPUSH
67084: LD_VAR 0 11
67088: PPUSH
67089: CALL 21428 0 11
67093: GO 67096
67095: POP
// end ;
67096: PPOPN 11
67098: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67099: LD_VAR 0 1
67103: PPUSH
67104: LD_VAR 0 2
67108: PPUSH
67109: LD_VAR 0 3
67113: PPUSH
67114: LD_VAR 0 4
67118: PPUSH
67119: LD_VAR 0 5
67123: PPUSH
67124: CALL 23522 0 5
// end ; end_of_file
67128: PPOPN 5
67130: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67131: LD_VAR 0 1
67135: PPUSH
67136: LD_VAR 0 2
67140: PPUSH
67141: LD_VAR 0 3
67145: PPUSH
67146: LD_VAR 0 4
67150: PPUSH
67151: LD_VAR 0 5
67155: PPUSH
67156: LD_VAR 0 6
67160: PPUSH
67161: CALL 9623 0 6
// end ;
67165: PPOPN 6
67167: END
