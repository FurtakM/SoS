// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8631 0 0
// PrepareAmerican ;
 100: CALL 5251 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Platonov ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Platonov
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 25408 0 2
// if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 255
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: PUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL_OW 263
2749: PUSH
2750: LD_INT 3
2752: EQUAL
2753: AND
2754: IFFALSE 2764
// comp_tested := true ;
2756: LD_ADDR_EXP 22
2760: PUSH
2761: LD_INT 1
2763: ST_TO_ADDR
// end ;
2764: PPOPN 2
2766: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2767: LD_VAR 0 1
2771: PUSH
2772: LD_INT 22
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 21
2784: PUSH
2785: LD_INT 3
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IN
2801: IFFALSE 2879
// if attacked = false and sikorski_ar = false then
2803: LD_EXP 15
2807: PUSH
2808: LD_INT 0
2810: EQUAL
2811: PUSH
2812: LD_EXP 12
2816: PUSH
2817: LD_INT 0
2819: EQUAL
2820: AND
2821: IFFALSE 2879
// begin attacked := true ;
2823: LD_ADDR_EXP 15
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// if IsInUnit ( donald ) then
2831: LD_EXP 13
2835: PPUSH
2836: CALL_OW 310
2840: IFFALSE 2856
// SayRadio ( donald , DGammaF ) else
2842: LD_EXP 13
2846: PPUSH
2847: LD_STRING DGammaF
2849: PPUSH
2850: CALL_OW 94
2854: GO 2879
// if IsInUnit ( van ) then
2856: LD_EXP 14
2860: PPUSH
2861: CALL_OW 310
2865: IFFALSE 2879
// SayRadio ( van , DGammaM ) ;
2867: LD_EXP 14
2871: PPUSH
2872: LD_STRING DGammaM
2874: PPUSH
2875: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2879: LD_VAR 0 1
2883: PUSH
2884: LD_INT 33
2886: PUSH
2887: LD_INT 2
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 69
2898: IN
2899: IFFALSE 2910
// ComUnlink ( un ) ;
2901: LD_VAR 0 1
2905: PPUSH
2906: CALL_OW 136
// end ;
2910: PPOPN 1
2912: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2913: LD_VAR 0 2
2917: PPUSH
2918: CALL_OW 258
2922: PUSH
2923: LD_INT 1
2925: EQUAL
2926: IFFALSE 2940
// Say ( sci , Dsci3 ) ;
2928: LD_VAR 0 2
2932: PPUSH
2933: LD_STRING Dsci3
2935: PPUSH
2936: CALL_OW 88
// end ;
2940: PPOPN 2
2942: END
// on BuildingComplete ( b ) do var i ;
2943: LD_INT 0
2945: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 266
2955: PUSH
2956: LD_INT 0
2958: EQUAL
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 255
2969: PUSH
2970: LD_INT 3
2972: EQUAL
2973: AND
2974: PUSH
2975: LD_EXP 6
2979: PUSH
2980: LD_INT 0
2982: EQUAL
2983: AND
2984: IFFALSE 3048
// begin SetBName ( b , kalinin ) ;
2986: LD_VAR 0 1
2990: PPUSH
2991: LD_STRING kalinin
2993: PPUSH
2994: CALL_OW 500
// dep_x := GetX ( b ) ;
2998: LD_ADDR_EXP 7
3002: PUSH
3003: LD_VAR 0 1
3007: PPUSH
3008: CALL_OW 250
3012: ST_TO_ADDR
// dep_y := GetY ( b ) ;
3013: LD_ADDR_EXP 8
3017: PUSH
3018: LD_VAR 0 1
3022: PPUSH
3023: CALL_OW 251
3027: ST_TO_ADDR
// depot_rdy := true ;
3028: LD_ADDR_EXP 6
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3036: LD_EXP 2
3040: PPUSH
3041: LD_STRING Dpop3
3043: PPUSH
3044: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 266
3057: PUSH
3058: LD_INT 6
3060: EQUAL
3061: PUSH
3062: LD_VAR 0 1
3066: PPUSH
3067: CALL_OW 255
3071: PUSH
3072: LD_INT 3
3074: EQUAL
3075: AND
3076: PUSH
3077: LD_EXP 21
3081: PUSH
3082: LD_INT 0
3084: EQUAL
3085: AND
3086: IFFALSE 3181
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3088: LD_INT 22
3090: PUSH
3091: LD_INT 3
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 25
3100: PUSH
3101: LD_INT 4
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_INT 0
3119: GREATER
3120: IFFALSE 3181
// begin event_comp := true ;
3122: LD_ADDR_EXP 21
3126: PUSH
3127: LD_INT 1
3129: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3130: LD_INT 22
3132: PUSH
3133: LD_INT 3
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 25
3142: PUSH
3143: LD_INT 4
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 26
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_STRING Dsci1
3176: PPUSH
3177: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 266
3190: PUSH
3191: LD_INT 32
3193: EQUAL
3194: PUSH
3195: LD_VAR 0 1
3199: PPUSH
3200: CALL_OW 255
3204: PUSH
3205: LD_INT 1
3207: EQUAL
3208: AND
3209: IFFALSE 3274
// begin RaiseSailEvent ( 6 ) ;
3211: LD_INT 6
3213: PPUSH
3214: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3218: LD_VAR 0 1
3222: PPUSH
3223: LD_EXP 18
3227: PUSH
3228: LD_INT 4
3230: ARRAY
3231: PPUSH
3232: CALL_OW 208
// for i = 1 to 4 do
3236: LD_ADDR_VAR 0 2
3240: PUSH
3241: DOUBLE
3242: LD_INT 1
3244: DEC
3245: ST_TO_ADDR
3246: LD_INT 4
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3272
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3252: LD_ADDR_EXP 18
3256: PUSH
3257: LD_EXP 18
3261: PPUSH
3262: LD_INT 1
3264: PPUSH
3265: CALL_OW 3
3269: ST_TO_ADDR
3270: GO 3249
3272: POP
3273: POP
// end ; end ;
3274: PPOPN 2
3276: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3277: LD_VAR 0 1
3281: PPUSH
3282: CALL 25288 0 1
// if un in Patrol then
3286: LD_VAR 0 1
3290: PUSH
3291: LD_EXP 17
3295: IN
3296: IFFALSE 3314
// Patrol := Patrol diff un ;
3298: LD_ADDR_EXP 17
3302: PUSH
3303: LD_EXP 17
3307: PUSH
3308: LD_VAR 0 1
3312: DIFF
3313: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3314: LD_VAR 0 1
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: IN
3348: IFFALSE 3434
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3350: LD_ADDR_EXP 18
3354: PUSH
3355: LD_EXP 18
3359: PUSH
3360: LD_VAR 0 1
3364: PPUSH
3365: CALL_OW 250
3369: ADD
3370: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3371: LD_ADDR_EXP 18
3375: PUSH
3376: LD_EXP 18
3380: PUSH
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 251
3390: ADD
3391: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3392: LD_ADDR_EXP 18
3396: PUSH
3397: LD_EXP 18
3401: PUSH
3402: LD_VAR 0 1
3406: PPUSH
3407: CALL_OW 254
3411: ADD
3412: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3413: LD_ADDR_EXP 18
3417: PUSH
3418: LD_EXP 18
3422: PUSH
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 269
3432: ADD
3433: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3434: LD_VAR 0 1
3438: PUSH
3439: LD_INT 33
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: LD_INT 34
3454: PUSH
3455: LD_INT 13
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 69
3474: IN
3475: IFFALSE 3491
// new_veh := new_veh + 1 ;
3477: LD_ADDR_EXP 19
3481: PUSH
3482: LD_EXP 19
3486: PUSH
3487: LD_INT 1
3489: PLUS
3490: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3491: LD_VAR 0 1
3495: PUSH
3496: LD_INT 34
3498: PUSH
3499: LD_INT 13
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: IN
3511: IFFALSE 3532
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3513: LD_INT 26
3515: PPUSH
3516: LD_INT 3
3518: PPUSH
3519: LD_INT 2
3521: PPUSH
3522: LD_INT 2
3524: PPUSH
3525: LD_INT 13
3527: PPUSH
3528: CALL_OW 185
// if un = am_dep then
3532: LD_VAR 0 1
3536: PUSH
3537: LD_INT 25
3539: EQUAL
3540: IFFALSE 3708
// begin SayRadio ( Platonov , DPlat ) ;
3542: LD_EXP 4
3546: PPUSH
3547: LD_STRING DPlat
3549: PPUSH
3550: CALL_OW 94
// if timer <= 30 30$00 then
3554: LD_EXP 24
3558: PUSH
3559: LD_INT 63000
3561: LESSEQUAL
3562: IFFALSE 3576
// AddMedal ( gamma_med3 , 1 ) else
3564: LD_STRING gamma_med3
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 101
3574: GO 3626
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3576: LD_EXP 24
3580: PUSH
3581: LD_INT 105000
3583: PUSH
3584: LD_INT 88200
3586: PUSH
3587: LD_INT 73500
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: LD_EXP 1
3599: ARRAY
3600: LESSEQUAL
3601: IFFALSE 3615
// AddMedal ( gamma_med3 , 2 ) else
3603: LD_STRING gamma_med3
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 101
3613: GO 3626
// AddMedal ( gamma_med3 , - 1 ) ;
3615: LD_STRING gamma_med3
3617: PPUSH
3618: LD_INT 1
3620: NEG
3621: PPUSH
3622: CALL_OW 101
// if not comp_tested then
3626: LD_EXP 22
3630: NOT
3631: IFFALSE 3646
// AddMedal ( gamma_med2 , - 1 ) else
3633: LD_STRING gamma_med2
3635: PPUSH
3636: LD_INT 1
3638: NEG
3639: PPUSH
3640: CALL_OW 101
3644: GO 3656
// AddMedal ( gamma_med2 , 1 ) ;
3646: LD_STRING gamma_med2
3648: PPUSH
3649: LD_INT 1
3651: PPUSH
3652: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3656: LD_EXP 9
3660: PPUSH
3661: CALL_OW 301
3665: PUSH
3666: LD_EXP 23
3670: NOT
3671: AND
3672: IFFALSE 3686
// AddMedal ( gamma_med1 , 1 ) else
3674: LD_STRING gamma_med1
3676: PPUSH
3677: LD_INT 1
3679: PPUSH
3680: CALL_OW 101
3684: GO 3697
// AddMedal ( gamma_med1 , - 1 ) ;
3686: LD_STRING gamma_med1
3688: PPUSH
3689: LD_INT 1
3691: NEG
3692: PPUSH
3693: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3697: LD_STRING GAMMA_MEDALS
3699: PPUSH
3700: CALL_OW 102
// YouWin ;
3704: CALL_OW 103
// end ; if un = commander then
3708: LD_VAR 0 1
3712: PUSH
3713: LD_EXP 3
3717: EQUAL
3718: IFFALSE 3727
// YouLost ( comml ) ;
3720: LD_STRING comml
3722: PPUSH
3723: CALL_OW 104
// if un = sikorski then
3727: LD_VAR 0 1
3731: PUSH
3732: LD_EXP 9
3736: EQUAL
3737: IFFALSE 3749
// AddMedal ( gamma_med1 , 1 ) ;
3739: LD_STRING gamma_med1
3741: PPUSH
3742: LD_INT 1
3744: PPUSH
3745: CALL_OW 101
// end ;
3749: PPOPN 1
3751: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3752: LD_INT 0
3754: PPUSH
3755: PPUSH
3756: PPUSH
3757: PPUSH
3758: PPUSH
3759: PPUSH
3760: PPUSH
3761: PPUSH
3762: PPUSH
// begin if event = 1 then
3763: LD_VAR 0 1
3767: PUSH
3768: LD_INT 1
3770: EQUAL
3771: IFFALSE 4068
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3773: LD_ADDR_VAR 0 4
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 1
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 21
3790: PUSH
3791: LD_INT 3
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 3
3800: PUSH
3801: LD_INT 24
3803: PUSH
3804: LD_INT 1000
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3825: LD_ADDR_VAR 0 8
3829: PUSH
3830: LD_INT 22
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 25
3842: PUSH
3843: LD_INT 2
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_INT 24
3852: PUSH
3853: LD_INT 1000
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3873: LD_ADDR_VAR 0 9
3877: PUSH
3878: LD_INT 22
3880: PUSH
3881: LD_INT 1
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: LD_INT 34
3890: PUSH
3891: LD_INT 13
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: CALL_OW 69
3906: ST_TO_ADDR
// if engs > 0 then
3907: LD_VAR 0 8
3911: PUSH
3912: LD_INT 0
3914: GREATER
3915: IFFALSE 4020
// for i = 1 to engs do
3917: LD_ADDR_VAR 0 2
3921: PUSH
3922: DOUBLE
3923: LD_INT 1
3925: DEC
3926: ST_TO_ADDR
3927: LD_VAR 0 8
3931: PUSH
3932: FOR_TO
3933: IFFALSE 4018
// begin if IsInUnit ( engs [ i ] ) then
3935: LD_VAR 0 8
3939: PUSH
3940: LD_VAR 0 2
3944: ARRAY
3945: PPUSH
3946: CALL_OW 310
3950: IFFALSE 3967
// ComExitBuilding ( engs [ i ] ) ;
3952: LD_VAR 0 8
3956: PUSH
3957: LD_VAR 0 2
3961: ARRAY
3962: PPUSH
3963: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3967: LD_INT 7
3969: PPUSH
3970: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3974: LD_VAR 0 8
3978: PUSH
3979: LD_VAR 0 2
3983: ARRAY
3984: PPUSH
3985: CALL_OW 314
3989: NOT
3990: IFFALSE 4016
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3992: LD_VAR 0 8
3996: PUSH
3997: LD_VAR 0 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 4
4007: PUSH
4008: LD_INT 1
4010: ARRAY
4011: PPUSH
4012: CALL_OW 130
// end ;
4016: GO 3932
4018: POP
4019: POP
// if crane > 0 then
4020: LD_VAR 0 9
4024: PUSH
4025: LD_INT 0
4027: GREATER
4028: IFFALSE 4068
// if not HasTask ( crane [ 1 ] ) then
4030: LD_VAR 0 9
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: PPUSH
4039: CALL_OW 314
4043: NOT
4044: IFFALSE 4068
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4046: LD_VAR 0 9
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: LD_VAR 0 4
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: CALL_OW 130
// end ; if event = 2 then
4068: LD_VAR 0 1
4072: PUSH
4073: LD_INT 2
4075: EQUAL
4076: IFFALSE 4198
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4078: LD_ADDR_VAR 0 8
4082: PUSH
4083: LD_INT 22
4085: PUSH
4086: LD_INT 1
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 25
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PPUSH
4107: CALL_OW 69
4111: ST_TO_ADDR
// if engs > 0 then
4112: LD_VAR 0 8
4116: PUSH
4117: LD_INT 0
4119: GREATER
4120: IFFALSE 4198
// for i = 1 to engs do
4122: LD_ADDR_VAR 0 2
4126: PUSH
4127: DOUBLE
4128: LD_INT 1
4130: DEC
4131: ST_TO_ADDR
4132: LD_VAR 0 8
4136: PUSH
4137: FOR_TO
4138: IFFALSE 4196
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4140: LD_VAR 0 8
4144: PUSH
4145: LD_VAR 0 2
4149: ARRAY
4150: PPUSH
4151: CALL_OW 314
4155: NOT
4156: PUSH
4157: LD_VAR 0 8
4161: PUSH
4162: LD_VAR 0 2
4166: ARRAY
4167: PPUSH
4168: CALL_OW 310
4172: NOT
4173: AND
4174: IFFALSE 4194
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4176: LD_VAR 0 8
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PPUSH
4187: LD_INT 25
4189: PPUSH
4190: CALL_OW 120
4194: GO 4137
4196: POP
4197: POP
// end ; if event = 3 then
4198: LD_VAR 0 1
4202: PUSH
4203: LD_INT 3
4205: EQUAL
4206: IFFALSE 4570
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4208: LD_ADDR_VAR 0 4
4212: PUSH
4213: LD_INT 22
4215: PUSH
4216: LD_INT 1
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 21
4225: PUSH
4226: LD_INT 1
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: LD_INT 25
4238: PUSH
4239: LD_INT 4
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: LD_INT 24
4255: PUSH
4256: LD_INT 800
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: PPUSH
4276: CALL_OW 69
4280: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4281: LD_ADDR_VAR 0 5
4285: PUSH
4286: LD_INT 22
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 25
4298: PUSH
4299: LD_INT 4
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: ST_TO_ADDR
// if filter > 0 then
4315: LD_VAR 0 4
4319: PUSH
4320: LD_INT 0
4322: GREATER
4323: IFFALSE 4512
// begin for i = 1 to doc do
4325: LD_ADDR_VAR 0 2
4329: PUSH
4330: DOUBLE
4331: LD_INT 1
4333: DEC
4334: ST_TO_ADDR
4335: LD_VAR 0 5
4339: PUSH
4340: FOR_TO
4341: IFFALSE 4441
// begin if IsInUnit ( doc [ i ] ) then
4343: LD_VAR 0 5
4347: PUSH
4348: LD_VAR 0 2
4352: ARRAY
4353: PPUSH
4354: CALL_OW 310
4358: IFFALSE 4375
// ComExitBuilding ( doc [ i ] ) ;
4360: LD_VAR 0 5
4364: PUSH
4365: LD_VAR 0 2
4369: ARRAY
4370: PPUSH
4371: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4375: LD_VAR 0 4
4379: PUSH
4380: LD_INT 1
4382: ARRAY
4383: PPUSH
4384: LD_INT 46
4386: PPUSH
4387: CALL_OW 296
4391: PUSH
4392: LD_INT 10
4394: LESS
4395: PUSH
4396: LD_VAR 0 5
4400: PUSH
4401: LD_VAR 0 2
4405: ARRAY
4406: PPUSH
4407: CALL_OW 314
4411: NOT
4412: AND
4413: IFFALSE 4439
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4415: LD_VAR 0 5
4419: PUSH
4420: LD_VAR 0 2
4424: ARRAY
4425: PPUSH
4426: LD_VAR 0 4
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: PPUSH
4435: CALL_OW 128
// end ;
4439: GO 4340
4441: POP
4442: POP
// for i = 1 to filter do
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: DOUBLE
4449: LD_INT 1
4451: DEC
4452: ST_TO_ADDR
4453: LD_VAR 0 4
4457: PUSH
4458: FOR_TO
4459: IFFALSE 4508
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4461: LD_VAR 0 4
4465: PUSH
4466: LD_VAR 0 2
4470: ARRAY
4471: PPUSH
4472: LD_INT 46
4474: PPUSH
4475: CALL_OW 296
4479: PUSH
4480: LD_INT 10
4482: GREATER
4483: IFFALSE 4506
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4485: LD_VAR 0 4
4489: PUSH
4490: LD_VAR 0 2
4494: ARRAY
4495: PPUSH
4496: LD_INT 47
4498: PPUSH
4499: LD_INT 12
4501: PPUSH
4502: CALL_OW 111
4506: GO 4458
4508: POP
4509: POP
// end else
4510: GO 4570
// for i = 1 to doc do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: DOUBLE
4518: LD_INT 1
4520: DEC
4521: ST_TO_ADDR
4522: LD_VAR 0 5
4526: PUSH
4527: FOR_TO
4528: IFFALSE 4568
// if not IsInUnit ( doc [ i ] ) then
4530: LD_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: ARRAY
4540: PPUSH
4541: CALL_OW 310
4545: NOT
4546: IFFALSE 4566
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4548: LD_VAR 0 5
4552: PUSH
4553: LD_VAR 0 2
4557: ARRAY
4558: PPUSH
4559: LD_INT 46
4561: PPUSH
4562: CALL_OW 120
4566: GO 4527
4568: POP
4569: POP
// end ; if event = 4 then
4570: LD_VAR 0 1
4574: PUSH
4575: LD_INT 4
4577: EQUAL
4578: IFFALSE 4829
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4580: LD_ADDR_VAR 0 6
4584: PUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 30
4597: PUSH
4598: LD_INT 5
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: ST_TO_ADDR
// for i = 1 to bac do
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_VAR 0 6
4628: PUSH
4629: FOR_TO
4630: IFFALSE 4671
// if UnitsInside ( bac [ i ] ) < 6 then
4632: LD_VAR 0 6
4636: PUSH
4637: LD_VAR 0 2
4641: ARRAY
4642: PPUSH
4643: CALL_OW 313
4647: PUSH
4648: LD_INT 6
4650: LESS
4651: IFFALSE 4669
// place := bac [ i ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: LD_VAR 0 6
4662: PUSH
4663: LD_VAR 0 2
4667: ARRAY
4668: ST_TO_ADDR
4669: GO 4629
4671: POP
4672: POP
// if place then
4673: LD_VAR 0 7
4677: IFFALSE 4829
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4679: LD_ADDR_VAR 0 4
4683: PUSH
4684: LD_INT 22
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 25
4699: PUSH
4700: LD_INT 1
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 25
4709: PUSH
4710: LD_INT 5
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 24
4724: PUSH
4725: LD_INT 1000
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: EMPTY
4738: LIST
4739: PPUSH
4740: CALL_OW 69
4744: PUSH
4745: LD_EXP 17
4749: DIFF
4750: ST_TO_ADDR
// for i = 1 to filter do
4751: LD_ADDR_VAR 0 2
4755: PUSH
4756: DOUBLE
4757: LD_INT 1
4759: DEC
4760: ST_TO_ADDR
4761: LD_VAR 0 4
4765: PUSH
4766: FOR_TO
4767: IFFALSE 4827
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4769: LD_VAR 0 4
4773: PUSH
4774: LD_VAR 0 2
4778: ARRAY
4779: PPUSH
4780: CALL_OW 310
4784: NOT
4785: PUSH
4786: LD_VAR 0 4
4790: PUSH
4791: LD_VAR 0 2
4795: ARRAY
4796: PPUSH
4797: CALL_OW 314
4801: NOT
4802: AND
4803: IFFALSE 4825
// ComEnterUnit ( filter [ i ] , place ) ;
4805: LD_VAR 0 4
4809: PUSH
4810: LD_VAR 0 2
4814: ARRAY
4815: PPUSH
4816: LD_VAR 0 7
4820: PPUSH
4821: CALL_OW 120
4825: GO 4766
4827: POP
4828: POP
// end ; end ; if event = 5 then
4829: LD_VAR 0 1
4833: PUSH
4834: LD_INT 5
4836: EQUAL
4837: IFFALSE 4991
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4839: LD_INT 12
4841: PPUSH
4842: LD_INT 81
4844: PUSH
4845: LD_INT 1
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 70
4856: PUSH
4857: LD_INT 0
4859: EQUAL
4860: IFFALSE 4991
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4862: LD_ADDR_VAR 0 8
4866: PUSH
4867: LD_INT 22
4869: PUSH
4870: LD_INT 1
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PPUSH
4891: CALL_OW 69
4895: ST_TO_ADDR
// if engs > 0 then
4896: LD_VAR 0 8
4900: PUSH
4901: LD_INT 0
4903: GREATER
4904: IFFALSE 4991
// for i = 1 to engs do
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: DOUBLE
4912: LD_INT 1
4914: DEC
4915: ST_TO_ADDR
4916: LD_VAR 0 8
4920: PUSH
4921: FOR_TO
4922: IFFALSE 4989
// if not HasTask ( engs [ i ] ) then
4924: LD_VAR 0 8
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PPUSH
4935: CALL_OW 314
4939: NOT
4940: IFFALSE 4987
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4942: LD_VAR 0 8
4946: PUSH
4947: LD_VAR 0 2
4951: ARRAY
4952: PPUSH
4953: LD_INT 32
4955: PPUSH
4956: LD_EXP 18
4960: PUSH
4961: LD_INT 1
4963: ARRAY
4964: PPUSH
4965: LD_EXP 18
4969: PUSH
4970: LD_INT 2
4972: ARRAY
4973: PPUSH
4974: LD_EXP 18
4978: PUSH
4979: LD_INT 3
4981: ARRAY
4982: PPUSH
4983: CALL_OW 145
4987: GO 4921
4989: POP
4990: POP
// end ; end ; if event = 6 then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 6
4998: EQUAL
4999: IFFALSE 5183
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
5001: LD_ADDR_VAR 0 6
5005: PUSH
5006: LD_INT 22
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 30
5018: PUSH
5019: LD_INT 5
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 69
5034: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5035: LD_VAR 0 6
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 30
5052: PUSH
5053: LD_INT 32
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 58
5062: PUSH
5063: EMPTY
5064: LIST
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: PPUSH
5074: CALL_OW 69
5078: PUSH
5079: LD_INT 0
5081: GREATER
5082: AND
5083: IFFALSE 5183
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5085: LD_ADDR_VAR 0 10
5089: PUSH
5090: LD_INT 22
5092: PUSH
5093: LD_INT 1
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: LD_INT 30
5102: PUSH
5103: LD_INT 32
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 58
5112: PUSH
5113: EMPTY
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: PUSH
5121: EMPTY
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5133: LD_ADDR_VAR 0 3
5137: PUSH
5138: LD_VAR 0 6
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 313
5151: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 1
5159: ARRAY
5160: PPUSH
5161: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 1
5172: ARRAY
5173: PPUSH
5174: LD_VAR 0 10
5178: PPUSH
5179: CALL_OW 180
// end ; end ; end ;
5183: PPOPN 10
5185: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5186: LD_VAR 0 1
5190: PUSH
5191: LD_INT 1
5193: EQUAL
5194: PUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_INT 3
5202: EQUAL
5203: AND
5204: IFFALSE 5214
// contact_am := true ;
5206: LD_ADDR_EXP 16
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ;
5214: PPOPN 2
5216: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5217: LD_VAR 0 1
5221: PPUSH
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_VAR 0 3
5231: PPUSH
5232: CALL 25384 0 3
// end ;
5236: PPOPN 3
5238: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5239: LD_VAR 0 1
5243: PPUSH
5244: CALL 25392 0 1
// end ; end_of_file
5248: PPOPN 1
5250: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5251: LD_INT 0
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5261: LD_ADDR_VAR 0 5
5265: PUSH
5266: LD_INT 5
5268: PUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: PUSH
5280: LD_EXP 1
5284: ARRAY
5285: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5286: LD_ADDR_VAR 0 6
5290: PUSH
5291: LD_INT 4
5293: PUSH
5294: LD_INT 4
5296: PUSH
5297: LD_INT 4
5299: PUSH
5300: LD_INT 5
5302: PUSH
5303: LD_INT 5
5305: PUSH
5306: LD_INT 5
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: ST_TO_ADDR
// SForce := [ ] ;
5321: LD_ADDR_EXP 11
5325: PUSH
5326: EMPTY
5327: ST_TO_ADDR
// Sikorski_Ar := false ;
5328: LD_ADDR_EXP 12
5332: PUSH
5333: LD_INT 0
5335: ST_TO_ADDR
// attacked := false ;
5336: LD_ADDR_EXP 15
5340: PUSH
5341: LD_INT 0
5343: ST_TO_ADDR
// contact_am := false ;
5344: LD_ADDR_EXP 16
5348: PUSH
5349: LD_INT 0
5351: ST_TO_ADDR
// patrol := [ ] ;
5352: LD_ADDR_EXP 17
5356: PUSH
5357: EMPTY
5358: ST_TO_ADDR
// gamma_towers := [ ] ;
5359: LD_ADDR_EXP 18
5363: PUSH
5364: EMPTY
5365: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5366: LD_INT 25
5368: PPUSH
5369: LD_STRING gamma
5371: PPUSH
5372: CALL_OW 500
// uc_side := 1 ;
5376: LD_ADDR_OWVAR 20
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// uc_nation := 1 ;
5384: LD_ADDR_OWVAR 21
5388: PUSH
5389: LD_INT 1
5391: ST_TO_ADDR
// hc_importance := 0 ;
5392: LD_ADDR_OWVAR 32
5396: PUSH
5397: LD_INT 0
5399: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5400: LD_ADDR_OWVAR 26
5404: PUSH
5405: LD_STRING Jeremy Sikorski
5407: ST_TO_ADDR
// hc_gallery := us ;
5408: LD_ADDR_OWVAR 33
5412: PUSH
5413: LD_STRING us
5415: ST_TO_ADDR
// hc_face_number := 19 ;
5416: LD_ADDR_OWVAR 34
5420: PUSH
5421: LD_INT 19
5423: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5424: LD_ADDR_OWVAR 31
5428: PUSH
5429: LD_VAR 0 5
5433: PPUSH
5434: LD_VAR 0 5
5438: PUSH
5439: LD_INT 2
5441: PLUS
5442: PPUSH
5443: CALL_OW 12
5447: PUSH
5448: LD_INT 4
5450: PUSH
5451: LD_INT 6
5453: PUSH
5454: LD_INT 3
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: ST_TO_ADDR
// hc_sex := sex_male ;
5463: LD_ADDR_OWVAR 27
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// hc_class := 1 ;
5471: LD_ADDR_OWVAR 28
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5479: LD_ADDR_OWVAR 29
5483: PUSH
5484: LD_INT 10
5486: PUSH
5487: LD_INT 11
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: ST_TO_ADDR
// sikorski := CreateHuman ;
5494: LD_ADDR_EXP 9
5498: PUSH
5499: CALL_OW 44
5503: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5504: LD_ADDR_OWVAR 26
5508: PUSH
5509: LD_STRING Lucy Donaldson
5511: ST_TO_ADDR
// hc_gallery := us ;
5512: LD_ADDR_OWVAR 33
5516: PUSH
5517: LD_STRING us
5519: ST_TO_ADDR
// hc_face_number := 2 ;
5520: LD_ADDR_OWVAR 34
5524: PUSH
5525: LD_INT 2
5527: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5528: LD_ADDR_OWVAR 31
5532: PUSH
5533: LD_VAR 0 5
5537: PPUSH
5538: LD_VAR 0 5
5542: PUSH
5543: LD_INT 2
5545: PLUS
5546: PPUSH
5547: CALL_OW 12
5551: PUSH
5552: LD_INT 6
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: ST_TO_ADDR
// hc_sex := sex_female ;
5567: LD_ADDR_OWVAR 27
5571: PUSH
5572: LD_INT 2
5574: ST_TO_ADDR
// hc_class := 1 ;
5575: LD_ADDR_OWVAR 28
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// donald := CreateHuman ;
5583: LD_ADDR_EXP 13
5587: PUSH
5588: CALL_OW 44
5592: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5593: LD_ADDR_OWVAR 26
5597: PUSH
5598: LD_STRING Peter Van Houten
5600: ST_TO_ADDR
// hc_gallery := us ;
5601: LD_ADDR_OWVAR 33
5605: PUSH
5606: LD_STRING us
5608: ST_TO_ADDR
// hc_face_number := 16 ;
5609: LD_ADDR_OWVAR 34
5613: PUSH
5614: LD_INT 16
5616: ST_TO_ADDR
// hc_sex := sex_male ;
5617: LD_ADDR_OWVAR 27
5621: PUSH
5622: LD_INT 1
5624: ST_TO_ADDR
// van := CreateHuman ;
5625: LD_ADDR_EXP 14
5629: PUSH
5630: CALL_OW 44
5634: ST_TO_ADDR
// hc_importance := 0 ;
5635: LD_ADDR_OWVAR 32
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// case dif of 1 :
5643: LD_EXP 1
5647: PUSH
5648: LD_INT 1
5650: DOUBLE
5651: EQUAL
5652: IFTRUE 5656
5654: GO 5667
5656: POP
// lw = 1 ; 2 :
5657: LD_ADDR_VAR 0 8
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
5665: GO 5714
5667: LD_INT 2
5669: DOUBLE
5670: EQUAL
5671: IFTRUE 5675
5673: GO 5694
5675: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5676: LD_ADDR_VAR 0 8
5680: PUSH
5681: LD_INT 1
5683: PPUSH
5684: LD_INT 2
5686: PPUSH
5687: CALL_OW 12
5691: ST_TO_ADDR
5692: GO 5714
5694: LD_INT 3
5696: DOUBLE
5697: EQUAL
5698: IFTRUE 5702
5700: GO 5713
5702: POP
// lw = 2 ; end ;
5703: LD_ADDR_VAR 0 8
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
5711: GO 5714
5713: POP
// case lw of 1 :
5714: LD_VAR 0 8
5718: PUSH
5719: LD_INT 1
5721: DOUBLE
5722: EQUAL
5723: IFTRUE 5727
5725: GO 5742
5727: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5728: LD_EXP 13
5732: PPUSH
5733: LD_INT 25
5735: PPUSH
5736: CALL_OW 52
5740: GO 5766
5742: LD_INT 2
5744: DOUBLE
5745: EQUAL
5746: IFTRUE 5750
5748: GO 5765
5750: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5751: LD_EXP 14
5755: PPUSH
5756: LD_INT 25
5758: PPUSH
5759: CALL_OW 52
5763: GO 5766
5765: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 30
5783: PUSH
5784: LD_INT 32
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PPUSH
5795: CALL_OW 69
5799: PUSH
5800: FOR_IN
5801: IFFALSE 5855
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5803: LD_INT 1
5805: PPUSH
5806: LD_VAR 0 5
5810: PPUSH
5811: CALL 734 0 2
5815: PPUSH
5816: LD_VAR 0 2
5820: PPUSH
5821: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5825: LD_VAR 0 2
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_INT 1
5837: PPUSH
5838: LD_VAR 0 6
5842: PPUSH
5843: CALL_OW 12
5847: ARRAY
5848: PPUSH
5849: CALL_OW 431
// end ;
5853: GO 5800
5855: POP
5856: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5857: LD_ADDR_VAR 0 7
5861: PUSH
5862: LD_INT 22
5864: PUSH
5865: LD_INT 1
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PUSH
5872: LD_INT 2
5874: PUSH
5875: LD_INT 25
5877: PUSH
5878: LD_INT 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 5
5887: PUSH
5888: EMPTY
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PPUSH
5900: CALL_OW 69
5904: ST_TO_ADDR
// for i = 1 to sol do
5905: LD_ADDR_VAR 0 2
5909: PUSH
5910: DOUBLE
5911: LD_INT 1
5913: DEC
5914: ST_TO_ADDR
5915: LD_VAR 0 7
5919: PUSH
5920: FOR_TO
5921: IFFALSE 5943
// SetTag ( sol [ i ] , 1 ) ;
5923: LD_VAR 0 7
5927: PUSH
5928: LD_VAR 0 2
5932: ARRAY
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL_OW 109
5941: GO 5920
5943: POP
5944: POP
// for i = 1 to 3 do
5945: LD_ADDR_VAR 0 2
5949: PUSH
5950: DOUBLE
5951: LD_INT 1
5953: DEC
5954: ST_TO_ADDR
5955: LD_INT 3
5957: PUSH
5958: FOR_TO
5959: IFFALSE 5983
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5961: LD_INT 3
5963: PPUSH
5964: LD_VAR 0 5
5968: PPUSH
5969: CALL 734 0 2
5973: PPUSH
5974: LD_INT 56
5976: PPUSH
5977: CALL_OW 52
5981: GO 5958
5983: POP
5984: POP
// for i = 1 to 6 do
5985: LD_ADDR_VAR 0 2
5989: PUSH
5990: DOUBLE
5991: LD_INT 1
5993: DEC
5994: ST_TO_ADDR
5995: LD_INT 6
5997: PUSH
5998: FOR_TO
5999: IFFALSE 6023
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
6001: LD_INT 3
6003: PPUSH
6004: LD_VAR 0 5
6008: PPUSH
6009: CALL 734 0 2
6013: PPUSH
6014: LD_INT 26
6016: PPUSH
6017: CALL_OW 52
6021: GO 5998
6023: POP
6024: POP
// for i = 1 to 5 do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: DOUBLE
6031: LD_INT 1
6033: DEC
6034: ST_TO_ADDR
6035: LD_INT 5
6037: PUSH
6038: FOR_TO
6039: IFFALSE 6066
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6041: LD_INT 2
6043: PPUSH
6044: LD_VAR 0 5
6048: PPUSH
6049: CALL 734 0 2
6053: PPUSH
6054: LD_INT 7
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 49
6064: GO 6038
6066: POP
6067: POP
// for i = 1 to 3 do
6068: LD_ADDR_VAR 0 2
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 3
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6106
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6084: LD_INT 4
6086: PPUSH
6087: LD_VAR 0 5
6091: PPUSH
6092: CALL 734 0 2
6096: PPUSH
6097: LD_INT 46
6099: PPUSH
6100: CALL_OW 52
6104: GO 6081
6106: POP
6107: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_INT 22
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 30
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 69
6141: PUSH
6142: FOR_IN
6143: IFFALSE 6257
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6145: LD_INT 5
6147: PPUSH
6148: LD_VAR 0 5
6152: PPUSH
6153: CALL 734 0 2
6157: PPUSH
6158: LD_VAR 0 2
6162: PPUSH
6163: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6167: LD_INT 5
6169: PPUSH
6170: LD_VAR 0 5
6174: PPUSH
6175: CALL 734 0 2
6179: PPUSH
6180: LD_VAR 0 2
6184: PPUSH
6185: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6189: LD_INT 1
6191: PPUSH
6192: LD_VAR 0 5
6196: PPUSH
6197: CALL 734 0 2
6201: PPUSH
6202: LD_VAR 0 2
6206: PPUSH
6207: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6211: LD_INT 1
6213: PPUSH
6214: LD_VAR 0 5
6218: PPUSH
6219: CALL 734 0 2
6223: PPUSH
6224: LD_VAR 0 2
6228: PPUSH
6229: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6233: LD_INT 1
6235: PPUSH
6236: LD_VAR 0 5
6240: PPUSH
6241: CALL 734 0 2
6245: PPUSH
6246: LD_VAR 0 2
6250: PPUSH
6251: CALL_OW 52
// end ;
6255: GO 6142
6257: POP
6258: POP
// if dif > 1 then
6259: LD_EXP 1
6263: PUSH
6264: LD_INT 1
6266: GREATER
6267: IFFALSE 6340
// for i = 1 to ( dif - 1 ) do
6269: LD_ADDR_VAR 0 2
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_EXP 1
6283: PUSH
6284: LD_INT 1
6286: MINUS
6287: PUSH
6288: FOR_TO
6289: IFFALSE 6338
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6291: LD_ADDR_EXP 17
6295: PUSH
6296: LD_EXP 17
6300: PUSH
6301: LD_INT 1
6303: PPUSH
6304: LD_VAR 0 5
6308: PPUSH
6309: CALL 734 0 2
6313: ADD
6314: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6315: LD_EXP 17
6319: PUSH
6320: LD_VAR 0 2
6324: ARRAY
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 49
// end ;
6336: GO 6288
6338: POP
6339: POP
// game_started := true ;
6340: LD_ADDR_EXP 10
6344: PUSH
6345: LD_INT 1
6347: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6348: LD_INT 26
6350: PPUSH
6351: LD_INT 3
6353: PPUSH
6354: LD_INT 2
6356: PPUSH
6357: LD_INT 2
6359: PPUSH
6360: LD_INT 13
6362: PPUSH
6363: CALL_OW 125
// while ( contact_am = false ) do
6367: LD_EXP 16
6371: PUSH
6372: LD_INT 0
6374: EQUAL
6375: IFFALSE 6386
// begin Wait ( 0 0$01 ) ;
6377: LD_INT 35
6379: PPUSH
6380: CALL_OW 67
// end ;
6384: GO 6367
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6386: LD_INT 8400
6388: PUSH
6389: LD_INT 6300
6391: PUSH
6392: LD_INT 5250
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: LD_EXP 1
6404: ARRAY
6405: PPUSH
6406: CALL_OW 67
// case dif of 1 :
6410: LD_EXP 1
6414: PUSH
6415: LD_INT 1
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6423
6421: GO 6598
6423: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6424: LD_INT 26
6426: PPUSH
6427: LD_INT 3
6429: PPUSH
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 2
6435: PPUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 4
6441: PUSH
6442: LD_INT 5
6444: PUSH
6445: LD_INT 5
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 1
6456: PPUSH
6457: LD_INT 4
6459: PPUSH
6460: CALL_OW 12
6464: ARRAY
6465: PPUSH
6466: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6470: LD_INT 26
6472: PPUSH
6473: LD_INT 3
6475: PPUSH
6476: LD_INT 1
6478: PPUSH
6479: LD_INT 2
6481: PPUSH
6482: LD_INT 4
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: LD_INT 5
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 1
6498: PPUSH
6499: LD_INT 3
6501: PPUSH
6502: CALL_OW 12
6506: ARRAY
6507: PPUSH
6508: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6512: LD_INT 26
6514: PPUSH
6515: LD_INT 3
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 5
6529: PUSH
6530: LD_INT 5
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 1
6540: PPUSH
6541: LD_INT 3
6543: PPUSH
6544: CALL_OW 12
6548: ARRAY
6549: PPUSH
6550: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6554: LD_INT 26
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_INT 2
6565: PPUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 1
6582: PPUSH
6583: LD_INT 3
6585: PPUSH
6586: CALL_OW 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 185
// end ; 2 :
6596: GO 7125
6598: LD_INT 2
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6819
6606: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6607: LD_INT 26
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 1
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: LD_INT 4
6621: PUSH
6622: LD_INT 5
6624: PUSH
6625: LD_INT 5
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 1
6635: PPUSH
6636: LD_INT 3
6638: PPUSH
6639: CALL_OW 12
6643: ARRAY
6644: PPUSH
6645: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6649: LD_INT 26
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_INT 1
6657: PPUSH
6658: LD_INT 2
6660: PPUSH
6661: LD_INT 4
6663: PUSH
6664: LD_INT 5
6666: PUSH
6667: LD_INT 5
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: PUSH
6675: LD_INT 1
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 12
6685: ARRAY
6686: PPUSH
6687: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6691: LD_INT 26
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 1
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: LD_INT 4
6705: PUSH
6706: LD_INT 3
6708: PUSH
6709: LD_INT 5
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 1
6719: PPUSH
6720: LD_INT 3
6722: PPUSH
6723: CALL_OW 12
6727: ARRAY
6728: PPUSH
6729: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6733: LD_INT 26
6735: PPUSH
6736: LD_INT 4
6738: PPUSH
6739: LD_INT 1
6741: PPUSH
6742: LD_INT 2
6744: PPUSH
6745: LD_INT 4
6747: PUSH
6748: LD_INT 5
6750: PUSH
6751: LD_INT 6
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: CALL_OW 12
6769: ARRAY
6770: PPUSH
6771: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6775: LD_INT 26
6777: PPUSH
6778: LD_INT 4
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: LD_INT 2
6786: PPUSH
6787: LD_INT 4
6789: PUSH
6790: LD_INT 6
6792: PUSH
6793: LD_INT 6
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 3
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: PPUSH
6813: CALL_OW 185
// end ; 3 :
6817: GO 7125
6819: LD_INT 3
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 7124
6827: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6828: LD_INT 26
6830: PPUSH
6831: LD_INT 3
6833: PPUSH
6834: LD_INT 1
6836: PPUSH
6837: LD_INT 2
6839: PPUSH
6840: LD_INT 4
6842: PUSH
6843: LD_INT 5
6845: PUSH
6846: LD_INT 5
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 1
6856: PPUSH
6857: LD_INT 3
6859: PPUSH
6860: CALL_OW 12
6864: ARRAY
6865: PPUSH
6866: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6870: LD_INT 26
6872: PPUSH
6873: LD_INT 3
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: LD_INT 2
6881: PPUSH
6882: LD_INT 4
6884: PUSH
6885: LD_INT 5
6887: PUSH
6888: LD_INT 5
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 1
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: CALL_OW 12
6906: ARRAY
6907: PPUSH
6908: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6912: LD_INT 26
6914: PPUSH
6915: LD_INT 3
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_INT 2
6923: PPUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 5
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 1
6940: PPUSH
6941: LD_INT 3
6943: PPUSH
6944: CALL_OW 12
6948: ARRAY
6949: PPUSH
6950: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6954: LD_INT 26
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_INT 2
6965: PPUSH
6966: LD_INT 4
6968: PUSH
6969: LD_INT 5
6971: PUSH
6972: LD_INT 5
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 1
6982: PPUSH
6983: LD_INT 3
6985: PPUSH
6986: CALL_OW 12
6990: ARRAY
6991: PPUSH
6992: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6996: LD_INT 26
6998: PPUSH
6999: LD_INT 4
7001: PPUSH
7002: LD_INT 1
7004: PPUSH
7005: LD_INT 2
7007: PPUSH
7008: LD_INT 4
7010: PUSH
7011: LD_INT 6
7013: PUSH
7014: LD_INT 6
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_INT 3
7027: PPUSH
7028: CALL_OW 12
7032: ARRAY
7033: PPUSH
7034: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7038: LD_INT 26
7040: PPUSH
7041: LD_INT 4
7043: PPUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_INT 2
7049: PPUSH
7050: LD_INT 4
7052: PUSH
7053: LD_INT 6
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 3
7069: PPUSH
7070: CALL_OW 12
7074: ARRAY
7075: PPUSH
7076: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7080: LD_INT 26
7082: PPUSH
7083: LD_INT 4
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 2
7091: PPUSH
7092: LD_INT 4
7094: PUSH
7095: LD_INT 6
7097: PUSH
7098: LD_INT 6
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 12
7116: ARRAY
7117: PPUSH
7118: CALL_OW 185
// end ; end ;
7122: GO 7125
7124: POP
// end ;
7125: LD_VAR 0 1
7129: RET
// every 0 0$01 do var i , filter ;
7130: GO 7132
7132: DISABLE
7133: LD_INT 0
7135: PPUSH
7136: PPUSH
// begin enable ;
7137: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7138: LD_INT 22
7140: PUSH
7141: LD_INT 1
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: PUSH
7167: LD_INT 0
7169: GREATER
7170: IFFALSE 7179
// RaiseSailEvent ( 3 ) ;
7172: LD_INT 3
7174: PPUSH
7175: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7179: LD_INT 22
7181: PUSH
7182: LD_INT 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 21
7191: PUSH
7192: LD_INT 3
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 3
7201: PUSH
7202: LD_INT 24
7204: PUSH
7205: LD_INT 1000
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: PPUSH
7221: CALL_OW 69
7225: PUSH
7226: LD_INT 0
7228: GREATER
7229: IFFALSE 7240
// RaiseSailEvent ( 1 ) else
7231: LD_INT 1
7233: PPUSH
7234: CALL_OW 427
7238: GO 7247
// RaiseSailEvent ( 2 ) ;
7240: LD_INT 2
7242: PPUSH
7243: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7247: LD_INT 22
7249: PUSH
7250: LD_INT 1
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 30
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 69
7275: PUSH
7276: LD_INT 0
7278: GREATER
7279: IFFALSE 7288
// RaiseSailEvent ( 4 ) ;
7281: LD_INT 4
7283: PPUSH
7284: CALL_OW 427
// if gamma_towers > 0 then
7288: LD_EXP 18
7292: PUSH
7293: LD_INT 0
7295: GREATER
7296: IFFALSE 7305
// RaiseSailEvent ( 5 ) ;
7298: LD_INT 5
7300: PPUSH
7301: CALL_OW 427
// end ;
7305: PPOPN 2
7307: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7308: GO 7310
7310: DISABLE
7311: LD_INT 0
7313: PPUSH
7314: PPUSH
// begin enable ;
7315: ENABLE
// if new_veh > 0 then
7316: LD_EXP 19
7320: PUSH
7321: LD_INT 0
7323: GREATER
7324: IFFALSE 7511
// while ( new_veh > 0 ) do
7326: LD_EXP 19
7330: PUSH
7331: LD_INT 0
7333: GREATER
7334: IFFALSE 7511
// begin Wait ( 0 0$01 ) ;
7336: LD_INT 35
7338: PPUSH
7339: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7343: LD_INT 26
7345: PPUSH
7346: CALL_OW 461
7350: PUSH
7351: LD_INT 2
7353: EQUAL
7354: IFFALSE 7509
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7356: LD_ADDR_VAR 0 1
7360: PUSH
7361: LD_INT 2
7363: PUSH
7364: LD_INT 3
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_INT 4
7384: PPUSH
7385: CALL_OW 12
7389: ARRAY
7390: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: IN
7406: IFFALSE 7441
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_INT 4
7415: PUSH
7416: LD_INT 5
7418: PUSH
7419: LD_INT 7
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 1
7429: PPUSH
7430: LD_INT 3
7432: PPUSH
7433: CALL_OW 12
7437: ARRAY
7438: ST_TO_ADDR
7439: GO 7472
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7441: LD_ADDR_VAR 0 2
7445: PUSH
7446: LD_INT 5
7448: PUSH
7449: LD_INT 7
7451: PUSH
7452: LD_INT 6
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 1
7462: PPUSH
7463: LD_INT 3
7465: PPUSH
7466: CALL_OW 12
7470: ARRAY
7471: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7472: LD_INT 26
7474: PPUSH
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: LD_INT 2
7485: PPUSH
7486: LD_VAR 0 2
7490: PPUSH
7491: CALL_OW 125
// new_veh := new_veh - 1 ;
7495: LD_ADDR_EXP 19
7499: PUSH
7500: LD_EXP 19
7504: PUSH
7505: LD_INT 1
7507: MINUS
7508: ST_TO_ADDR
// end ; end ;
7509: GO 7326
// end ;
7511: PPOPN 2
7513: END
// every 0 0$01 do var v , filter , am_cmeh ;
7514: GO 7516
7516: DISABLE
7517: LD_INT 0
7519: PPUSH
7520: PPUSH
7521: PPUSH
// begin enable ;
7522: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7523: LD_ADDR_VAR 0 3
7527: PUSH
7528: LD_INT 56
7530: PPUSH
7531: CALL_OW 313
7535: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7536: LD_ADDR_VAR 0 2
7540: PUSH
7541: LD_INT 22
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 33
7553: PUSH
7554: LD_INT 2
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 50
7563: PUSH
7564: EMPTY
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: ST_TO_ADDR
// if filter > 0 then
7580: LD_VAR 0 2
7584: PUSH
7585: LD_INT 0
7587: GREATER
7588: IFFALSE 7656
// begin for v in filter do
7590: LD_ADDR_VAR 0 1
7594: PUSH
7595: LD_VAR 0 2
7599: PUSH
7600: FOR_IN
7601: IFFALSE 7654
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 312
7612: NOT
7613: PUSH
7614: LD_VAR 0 1
7618: PPUSH
7619: CALL_OW 302
7623: AND
7624: IFFALSE 7652
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_VAR 0 3
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_INT 3
7641: PPUSH
7642: CALL_OW 12
7646: ARRAY
7647: PPUSH
7648: CALL_OW 135
// end ;
7652: GO 7600
7654: POP
7655: POP
// end ; end ;
7656: PPOPN 3
7658: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7659: LD_INT 33
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_INT 3
7671: PUSH
7672: LD_INT 34
7674: PUSH
7675: LD_INT 13
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 69
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: LD_INT 5
7700: PUSH
7701: LD_INT 7
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_EXP 1
7713: ARRAY
7714: EQUAL
7715: PUSH
7716: LD_INT 26
7718: PPUSH
7719: CALL_OW 461
7723: PUSH
7724: LD_INT 2
7726: EQUAL
7727: AND
7728: IFFALSE 7939
7730: GO 7732
7732: DISABLE
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
// begin enable ;
7738: ENABLE
// if Sikorski_Ar then
7739: LD_EXP 12
7743: IFFALSE 7820
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7745: LD_ADDR_EXP 11
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: LD_INT 22
7755: PUSH
7756: LD_INT 4
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_INT 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 33
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: LD_INT 34
7788: PUSH
7789: LD_INT 13
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: PPUSH
7813: CALL_OW 69
7817: ST_TO_ADDR
7818: GO 7861
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7820: LD_ADDR_EXP 11
7824: PUSH
7825: LD_INT 33
7827: PUSH
7828: LD_INT 2
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 3
7837: PUSH
7838: LD_INT 34
7840: PUSH
7841: LD_INT 13
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 69
7860: ST_TO_ADDR
// repeat begin for un in SForce do
7861: LD_ADDR_VAR 0 2
7865: PUSH
7866: LD_EXP 11
7870: PUSH
7871: FOR_IN
7872: IFFALSE 7927
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7874: LD_ADDR_VAR 0 3
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PPUSH
7889: CALL_OW 69
7893: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7894: LD_VAR 0 2
7898: PPUSH
7899: LD_VAR 0 3
7903: PPUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: CALL_OW 74
7913: PPUSH
7914: CALL_OW 115
// Wait ( 0 0$01 ) ;
7918: LD_INT 35
7920: PPUSH
7921: CALL_OW 67
// end ;
7925: GO 7871
7927: POP
7928: POP
// end until SForce = 0 ;
7929: LD_EXP 11
7933: PUSH
7934: LD_INT 0
7936: EQUAL
7937: IFFALSE 7861
// end ;
7939: PPOPN 3
7941: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7949: LD_ADDR_VAR 0 6
7953: PUSH
7954: LD_INT 14
7956: PPUSH
7957: EMPTY
7958: PPUSH
7959: CALL_OW 70
7963: ST_TO_ADDR
// if tmp then
7964: LD_VAR 0 6
7968: IFFALSE 8002
// for i in tmp do
7970: LD_ADDR_VAR 0 3
7974: PUSH
7975: LD_VAR 0 6
7979: PUSH
7980: FOR_IN
7981: IFFALSE 8000
// ComMoveXY ( i , 42 , 23 ) ;
7983: LD_VAR 0 3
7987: PPUSH
7988: LD_INT 42
7990: PPUSH
7991: LD_INT 23
7993: PPUSH
7994: CALL_OW 111
7998: GO 7980
8000: POP
8001: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
8002: LD_INT 14
8004: PPUSH
8005: LD_INT 1
8007: PPUSH
8008: CALL_OW 286
// uc_side := 4 ;
8012: LD_ADDR_OWVAR 20
8016: PUSH
8017: LD_INT 4
8019: ST_TO_ADDR
// uc_nation := 1 ;
8020: LD_ADDR_OWVAR 21
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8028: LD_ADDR_OWVAR 37
8032: PUSH
8033: LD_INT 4
8035: ST_TO_ADDR
// vc_control := control_manual ;
8036: LD_ADDR_OWVAR 38
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// vc_engine := engine_combustion ;
8044: LD_ADDR_OWVAR 39
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8052: LD_ADDR_OWVAR 40
8056: PUSH
8057: LD_INT 4
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: LD_INT 7
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: PUSH
8071: LD_EXP 1
8075: ARRAY
8076: ST_TO_ADDR
// veh := CreateVehicle ;
8077: LD_ADDR_VAR 0 5
8081: PUSH
8082: CALL_OW 45
8086: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8087: LD_VAR 0 5
8091: PPUSH
8092: LD_INT 2
8094: PPUSH
8095: LD_INT 0
8097: PPUSH
8098: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8102: LD_EXP 9
8106: PPUSH
8107: LD_VAR 0 5
8111: PPUSH
8112: CALL_OW 52
// SetMark ( veh , 1 ) ;
8116: LD_VAR 0 5
8120: PPUSH
8121: LD_INT 1
8123: PPUSH
8124: CALL_OW 242
// while ( num > 0 ) do
8128: LD_VAR 0 1
8132: PUSH
8133: LD_INT 0
8135: GREATER
8136: IFFALSE 8303
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8138: LD_INT 3
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 4
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: PUSH
8156: LD_EXP 1
8160: PPUSH
8161: LD_INT 4
8163: PPUSH
8164: CALL_OW 12
8168: ARRAY
8169: PPUSH
8170: LD_INT 1
8172: PPUSH
8173: LD_INT 4
8175: PUSH
8176: LD_INT 5
8178: PUSH
8179: LD_INT 5
8181: PUSH
8182: LD_INT 7
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: LD_EXP 1
8198: PUSH
8199: LD_INT 1
8201: PLUS
8202: PPUSH
8203: CALL_OW 12
8207: ARRAY
8208: PPUSH
8209: LD_INT 11
8211: PPUSH
8212: LD_INT 2
8214: PPUSH
8215: LD_INT 5
8217: PUSH
8218: LD_INT 6
8220: PUSH
8221: LD_INT 7
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: PUSH
8229: LD_EXP 1
8233: ARRAY
8234: PPUSH
8235: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8239: LD_ADDR_VAR 0 4
8243: PUSH
8244: LD_INT 22
8246: PUSH
8247: LD_INT 4
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 69
8258: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8259: LD_VAR 0 4
8263: PUSH
8264: LD_VAR 0 4
8268: ARRAY
8269: PPUSH
8270: LD_INT 36
8272: PPUSH
8273: LD_INT 18
8275: PPUSH
8276: CALL_OW 111
// Wait ( 0 0$02 ) ;
8280: LD_INT 70
8282: PPUSH
8283: CALL_OW 67
// num := num - 1 ;
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_VAR 0 1
8296: PUSH
8297: LD_INT 1
8299: MINUS
8300: ST_TO_ADDR
// end ;
8301: GO 8128
// end ;
8303: LD_VAR 0 2
8307: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8308: LD_EXP 17
8312: PUSH
8313: LD_INT 0
8315: GREATER
8316: IFFALSE 8585
8318: GO 8320
8320: DISABLE
8321: LD_INT 0
8323: PPUSH
// begin enable ;
8324: ENABLE
// for i = 1 to patrol do
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: DOUBLE
8331: LD_INT 1
8333: DEC
8334: ST_TO_ADDR
8335: LD_EXP 17
8339: PUSH
8340: FOR_TO
8341: IFFALSE 8583
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8343: LD_EXP 17
8347: PUSH
8348: LD_VAR 0 1
8352: ARRAY
8353: PUSH
8354: LD_EXP 17
8358: PUSH
8359: LD_VAR 0 1
8363: ARRAY
8364: PPUSH
8365: CALL_OW 300
8369: AND
8370: PUSH
8371: LD_EXP 17
8375: PUSH
8376: LD_VAR 0 1
8380: ARRAY
8381: PPUSH
8382: CALL_OW 314
8386: NOT
8387: AND
8388: IFFALSE 8538
// case i of 1 :
8390: LD_VAR 0 1
8394: PUSH
8395: LD_INT 1
8397: DOUBLE
8398: EQUAL
8399: IFTRUE 8403
8401: GO 8466
8403: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8404: LD_EXP 17
8408: PUSH
8409: LD_VAR 0 1
8413: ARRAY
8414: PPUSH
8415: LD_INT 53
8417: PPUSH
8418: LD_INT 91
8420: PPUSH
8421: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8425: LD_EXP 17
8429: PUSH
8430: LD_VAR 0 1
8434: ARRAY
8435: PPUSH
8436: LD_INT 245
8438: PPUSH
8439: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8443: LD_EXP 17
8447: PUSH
8448: LD_VAR 0 1
8452: ARRAY
8453: PPUSH
8454: LD_INT 24
8456: PPUSH
8457: LD_INT 26
8459: PPUSH
8460: CALL_OW 171
// end ; 2 :
8464: GO 8538
8466: LD_INT 2
8468: DOUBLE
8469: EQUAL
8470: IFTRUE 8474
8472: GO 8537
8474: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8475: LD_EXP 17
8479: PUSH
8480: LD_VAR 0 1
8484: ARRAY
8485: PPUSH
8486: LD_INT 83
8488: PPUSH
8489: LD_INT 57
8491: PPUSH
8492: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8496: LD_EXP 17
8500: PUSH
8501: LD_VAR 0 1
8505: ARRAY
8506: PPUSH
8507: LD_INT 245
8509: PPUSH
8510: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8514: LD_EXP 17
8518: PUSH
8519: LD_VAR 0 1
8523: ARRAY
8524: PPUSH
8525: LD_INT 47
8527: PPUSH
8528: LD_INT 53
8530: PPUSH
8531: CALL_OW 171
// end ; end ;
8535: GO 8538
8537: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8538: LD_EXP 17
8542: PUSH
8543: LD_VAR 0 1
8547: ARRAY
8548: PPUSH
8549: CALL_OW 256
8553: PUSH
8554: LD_INT 1000
8556: LESS
8557: IFFALSE 8581
// patrol := patrol diff patrol [ i ] ;
8559: LD_ADDR_EXP 17
8563: PUSH
8564: LD_EXP 17
8568: PUSH
8569: LD_EXP 17
8573: PUSH
8574: LD_VAR 0 1
8578: ARRAY
8579: DIFF
8580: ST_TO_ADDR
// end ;
8581: GO 8340
8583: POP
8584: POP
// end ;
8585: PPOPN 1
8587: END
// every 0 0$10 do
8588: GO 8590
8590: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8591: LD_INT 42000
8593: PUSH
8594: LD_INT 37800
8596: PUSH
8597: LD_INT 33600
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: PUSH
8605: LD_EXP 1
8609: ARRAY
8610: PPUSH
8611: CALL_OW 67
// if not contact_am then
8615: LD_EXP 16
8619: NOT
8620: IFFALSE 8630
// contact_am := true ;
8622: LD_ADDR_EXP 16
8626: PUSH
8627: LD_INT 1
8629: ST_TO_ADDR
// end ; end_of_file
8630: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8631: LD_INT 0
8633: PPUSH
// comp_tested := false ;
8634: LD_ADDR_EXP 22
8638: PUSH
8639: LD_INT 0
8641: ST_TO_ADDR
// sikorski_run := false ;
8642: LD_ADDR_EXP 23
8646: PUSH
8647: LD_INT 0
8649: ST_TO_ADDR
// InGameOn ;
8650: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8654: LD_INT 5
8656: PPUSH
8657: LD_INT 4
8659: PPUSH
8660: CALL_OW 86
// wait ( 0 0$2 ) ;
8664: LD_INT 70
8666: PPUSH
8667: CALL_OW 67
// CenterOnUnits ( commander ) ;
8671: LD_EXP 3
8675: PPUSH
8676: CALL_OW 85
// wait ( 0 0$01 ) ;
8680: LD_INT 35
8682: PPUSH
8683: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8687: LD_EXP 2
8691: PPUSH
8692: LD_STRING Dpop1
8694: PPUSH
8695: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8699: LD_EXP 3
8703: PPUSH
8704: LD_STRING Dcomm1
8706: PPUSH
8707: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8711: LD_EXP 2
8715: PPUSH
8716: LD_STRING Dpop2
8718: PPUSH
8719: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8723: LD_EXP 3
8727: PPUSH
8728: LD_STRING Dcomm2
8730: PPUSH
8731: CALL_OW 88
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8739: LD_STRING T1
8741: PPUSH
8742: CALL_OW 337
// end ;
8746: LD_VAR 0 1
8750: RET
// every 0 0$01 trigger timer > 2 2$01 do
8751: LD_EXP 24
8755: PUSH
8756: LD_INT 4235
8758: GREATER
8759: IFFALSE 8776
8761: GO 8763
8763: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8764: LD_EXP 5
8768: PPUSH
8769: LD_STRING DKap1
8771: PPUSH
8772: CALL_OW 94
// end ;
8776: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8777: LD_EXP 24
8781: PUSH
8782: LD_INT 46200
8784: PUSH
8785: LD_INT 52500
8787: PUSH
8788: LD_INT 63000
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: PUSH
8796: LD_EXP 1
8800: ARRAY
8801: GREATER
8802: IFFALSE 9169
8804: GO 8806
8806: DISABLE
8807: LD_INT 0
8809: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8810: LD_EXP 5
8814: PPUSH
8815: LD_STRING DKap2
8817: PPUSH
8818: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8822: LD_INT 10
8824: PPUSH
8825: CALL_OW 67
// Say ( commander , Dcommk ) ;
8829: LD_EXP 3
8833: PPUSH
8834: LD_STRING Dcommk
8836: PPUSH
8837: CALL_OW 88
// Wait ( 0 0$44 ) ;
8841: LD_INT 1540
8843: PPUSH
8844: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8848: LD_EXP 5
8852: PPUSH
8853: LD_INT 3
8855: PPUSH
8856: LD_INT 0
8858: PPUSH
8859: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8863: LD_EXP 5
8867: PPUSH
8868: CALL_OW 87
// Wait ( 0 0$10 ) ;
8872: LD_INT 350
8874: PPUSH
8875: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8879: LD_INT 6
8881: PUSH
8882: LD_INT 7
8884: PUSH
8885: LD_INT 8
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: PUSH
8893: LD_EXP 1
8897: ARRAY
8898: PPUSH
8899: CALL 7942 0 1
// Wait ( 2 2$00 ) ;
8903: LD_INT 4200
8905: PPUSH
8906: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8910: LD_INT 33
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: LD_INT 34
8925: PUSH
8926: LD_INT 13
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 69
8945: PUSH
8946: LD_INT 3
8948: LESS
8949: IFFALSE 8960
// Wait ( 0 0$01 ) ;
8951: LD_INT 35
8953: PPUSH
8954: CALL_OW 67
8958: GO 8910
// uc_side := 4 ;
8960: LD_ADDR_OWVAR 20
8964: PUSH
8965: LD_INT 4
8967: ST_TO_ADDR
// uc_nation := 1 ;
8968: LD_ADDR_OWVAR 21
8972: PUSH
8973: LD_INT 1
8975: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: DOUBLE
8982: LD_INT 1
8984: DEC
8985: ST_TO_ADDR
8986: LD_INT 4
8988: PUSH
8989: LD_INT 5
8991: PUSH
8992: LD_INT 6
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: LD_EXP 1
9004: ARRAY
9005: PUSH
9006: FOR_TO
9007: IFFALSE 9049
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
9009: LD_INT 1
9011: PPUSH
9012: LD_INT 5
9014: PUSH
9015: LD_INT 6
9017: PUSH
9018: LD_INT 7
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: PUSH
9026: LD_EXP 1
9030: ARRAY
9031: PPUSH
9032: CALL 734 0 2
9036: PPUSH
9037: LD_INT 4
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL_OW 49
9047: GO 9006
9049: POP
9050: POP
// sikorski_ar := true ;
9051: LD_ADDR_EXP 12
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9059: LD_EXP 9
9063: PPUSH
9064: LD_STRING DSik1
9066: PPUSH
9067: CALL_OW 94
// Wait ( 0 0$30 ) ;
9071: LD_INT 1050
9073: PPUSH
9074: CALL_OW 67
// uc_side := 4 ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_INT 4
9085: ST_TO_ADDR
// uc_nation := 1 ;
9086: LD_ADDR_OWVAR 21
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9094: LD_ADDR_VAR 0 1
9098: PUSH
9099: DOUBLE
9100: LD_INT 1
9102: DEC
9103: ST_TO_ADDR
9104: LD_INT 3
9106: PUSH
9107: LD_INT 4
9109: PUSH
9110: LD_INT 4
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: LD_EXP 1
9122: ARRAY
9123: PUSH
9124: FOR_TO
9125: IFFALSE 9167
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9127: LD_INT 1
9129: PPUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: LD_EXP 1
9148: ARRAY
9149: PPUSH
9150: CALL 734 0 2
9154: PPUSH
9155: LD_INT 13
9157: PPUSH
9158: LD_INT 0
9160: PPUSH
9161: CALL_OW 49
9165: GO 9124
9167: POP
9168: POP
// end ;
9169: PPOPN 1
9171: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9172: LD_EXP 9
9176: PPUSH
9177: CALL_OW 256
9181: PUSH
9182: LD_INT 650
9184: LESS
9185: IFFALSE 9267
9187: GO 9189
9189: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9190: LD_EXP 9
9194: PPUSH
9195: LD_STRING DSik2
9197: PPUSH
9198: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9202: LD_EXP 9
9206: PPUSH
9207: CALL_OW 300
9211: IFFALSE 9267
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9213: LD_EXP 9
9217: PPUSH
9218: LD_INT 2
9220: PPUSH
9221: CALL_OW 113
// Wait ( 0 0$01 ) ;
9225: LD_INT 35
9227: PPUSH
9228: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9232: LD_EXP 9
9236: PPUSH
9237: LD_INT 2
9239: PPUSH
9240: CALL_OW 308
9244: IFFALSE 9265
// begin RemoveUnit ( sikorski ) ;
9246: LD_EXP 9
9250: PPUSH
9251: CALL_OW 64
// break ;
9255: GO 9267
// sikorski_run := true ;
9257: LD_ADDR_EXP 23
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// end ; end ;
9265: GO 9202
// end ;
9267: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9268: LD_EXP 9
9272: PPUSH
9273: CALL_OW 256
9277: PUSH
9278: LD_INT 1000
9280: LESS
9281: IFFALSE 9298
9283: GO 9285
9285: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9286: LD_EXP 9
9290: PPUSH
9291: LD_STRING DSkik3
9293: PPUSH
9294: CALL_OW 88
9298: END
// every 1 1$45 + 0 0$15 do
9299: GO 9301
9301: DISABLE
// begin enable ;
9302: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9303: LD_INT 1
9305: PPUSH
9306: LD_INT 5
9308: PPUSH
9309: CALL_OW 12
9313: PPUSH
9314: LD_INT 8
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9324: LD_INT 350
9326: PPUSH
9327: LD_INT 1295
9329: PPUSH
9330: CALL_OW 12
9334: PPUSH
9335: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9339: LD_INT 1
9341: PPUSH
9342: LD_INT 5
9344: PPUSH
9345: CALL_OW 12
9349: PPUSH
9350: LD_INT 1
9352: PPUSH
9353: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9357: LD_INT 350
9359: PPUSH
9360: LD_INT 1050
9362: PPUSH
9363: CALL_OW 12
9367: PPUSH
9368: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9372: LD_EXP 24
9376: PUSH
9377: LD_INT 25200
9379: PUSH
9380: LD_INT 23100
9382: PUSH
9383: LD_INT 21000
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_EXP 1
9395: ARRAY
9396: LESSEQUAL
9397: IFFALSE 9420
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9399: LD_INT 1
9401: PPUSH
9402: LD_INT 5
9404: PPUSH
9405: CALL_OW 12
9409: PPUSH
9410: LD_INT 8
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: CALL_OW 55
// end ;
9420: END
// export timer ; every 1 do
9421: GO 9423
9423: DISABLE
// timer := 0 0$00 ;
9424: LD_ADDR_EXP 24
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
9432: END
// every 0 0$01 do
9433: GO 9435
9435: DISABLE
// begin enable ;
9436: ENABLE
// Display_Strings := [ #tick , timer ] ;
9437: LD_ADDR_OWVAR 47
9441: PUSH
9442: LD_STRING #tick
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9454: LD_ADDR_EXP 24
9458: PUSH
9459: LD_EXP 24
9463: PUSH
9464: LD_INT 35
9466: PLUS
9467: ST_TO_ADDR
// end ; end_of_file end_of_file
9468: END
// export globalGameSaveCounter ; every 0 0$1 do
9469: GO 9471
9471: DISABLE
// begin enable ;
9472: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9473: LD_STRING updateTimer(
9475: PUSH
9476: LD_OWVAR 1
9480: STR
9481: PUSH
9482: LD_STRING );
9484: STR
9485: PPUSH
9486: CALL_OW 559
// end ;
9490: END
// every 0 0$1 do
9491: GO 9493
9493: DISABLE
// begin globalGameSaveCounter := 0 ;
9494: LD_ADDR_EXP 25
9498: PUSH
9499: LD_INT 0
9501: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
9502: LD_STRING setGameSaveCounter(0)
9504: PPUSH
9505: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
9509: LD_STRING initStreamRollete();
9511: PPUSH
9512: CALL_OW 559
// InitStreamMode ;
9516: CALL 10859 0 0
// DefineStreamItems ( false ) ;
9520: LD_INT 0
9522: PPUSH
9523: CALL 11323 0 1
// end ;
9527: END
// export function SOS_MapStart ( ) ; begin
9528: LD_INT 0
9530: PPUSH
// if streamModeActive then
9531: LD_EXP 26
9535: IFFALSE 9544
// DefineStreamItems ( true ) ;
9537: LD_INT 1
9539: PPUSH
9540: CALL 11323 0 1
// UpdateLuaVariables ( ) ;
9544: CALL 9561 0 0
// UpdateFactoryWaypoints ( ) ;
9548: CALL 24192 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9552: CALL 24449 0 0
// end ;
9556: LD_VAR 0 1
9560: RET
// function UpdateLuaVariables ( ) ; begin
9561: LD_INT 0
9563: PPUSH
// if globalGameSaveCounter then
9564: LD_EXP 25
9568: IFFALSE 9602
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
9570: LD_ADDR_EXP 25
9574: PUSH
9575: LD_EXP 25
9579: PPUSH
9580: CALL 69234 0 1
9584: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9585: LD_STRING setGameSaveCounter(
9587: PUSH
9588: LD_EXP 25
9592: STR
9593: PUSH
9594: LD_STRING )
9596: STR
9597: PPUSH
9598: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9602: LD_STRING setGameDifficulty(
9604: PUSH
9605: LD_OWVAR 67
9609: STR
9610: PUSH
9611: LD_STRING )
9613: STR
9614: PPUSH
9615: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
9619: LD_STRING displayDifficulty(
9621: PUSH
9622: LD_OWVAR 67
9626: STR
9627: PUSH
9628: LD_STRING )
9630: STR
9631: PPUSH
9632: CALL_OW 559
// end ;
9636: LD_VAR 0 1
9640: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9641: LD_INT 0
9643: PPUSH
// if p2 = stream_mode then
9644: LD_VAR 0 2
9648: PUSH
9649: LD_INT 100
9651: EQUAL
9652: IFFALSE 10655
// begin if not StreamModeActive then
9654: LD_EXP 26
9658: NOT
9659: IFFALSE 9669
// StreamModeActive := true ;
9661: LD_ADDR_EXP 26
9665: PUSH
9666: LD_INT 1
9668: ST_TO_ADDR
// if p3 = 0 then
9669: LD_VAR 0 3
9673: PUSH
9674: LD_INT 0
9676: EQUAL
9677: IFFALSE 9683
// InitStreamMode ;
9679: CALL 10859 0 0
// if p3 = 1 then
9683: LD_VAR 0 3
9687: PUSH
9688: LD_INT 1
9690: EQUAL
9691: IFFALSE 9701
// sRocket := true ;
9693: LD_ADDR_EXP 31
9697: PUSH
9698: LD_INT 1
9700: ST_TO_ADDR
// if p3 = 2 then
9701: LD_VAR 0 3
9705: PUSH
9706: LD_INT 2
9708: EQUAL
9709: IFFALSE 9719
// sSpeed := true ;
9711: LD_ADDR_EXP 30
9715: PUSH
9716: LD_INT 1
9718: ST_TO_ADDR
// if p3 = 3 then
9719: LD_VAR 0 3
9723: PUSH
9724: LD_INT 3
9726: EQUAL
9727: IFFALSE 9737
// sEngine := true ;
9729: LD_ADDR_EXP 32
9733: PUSH
9734: LD_INT 1
9736: ST_TO_ADDR
// if p3 = 4 then
9737: LD_VAR 0 3
9741: PUSH
9742: LD_INT 4
9744: EQUAL
9745: IFFALSE 9755
// sSpec := true ;
9747: LD_ADDR_EXP 29
9751: PUSH
9752: LD_INT 1
9754: ST_TO_ADDR
// if p3 = 5 then
9755: LD_VAR 0 3
9759: PUSH
9760: LD_INT 5
9762: EQUAL
9763: IFFALSE 9773
// sLevel := true ;
9765: LD_ADDR_EXP 33
9769: PUSH
9770: LD_INT 1
9772: ST_TO_ADDR
// if p3 = 6 then
9773: LD_VAR 0 3
9777: PUSH
9778: LD_INT 6
9780: EQUAL
9781: IFFALSE 9791
// sArmoury := true ;
9783: LD_ADDR_EXP 34
9787: PUSH
9788: LD_INT 1
9790: ST_TO_ADDR
// if p3 = 7 then
9791: LD_VAR 0 3
9795: PUSH
9796: LD_INT 7
9798: EQUAL
9799: IFFALSE 9809
// sRadar := true ;
9801: LD_ADDR_EXP 35
9805: PUSH
9806: LD_INT 1
9808: ST_TO_ADDR
// if p3 = 8 then
9809: LD_VAR 0 3
9813: PUSH
9814: LD_INT 8
9816: EQUAL
9817: IFFALSE 9827
// sBunker := true ;
9819: LD_ADDR_EXP 36
9823: PUSH
9824: LD_INT 1
9826: ST_TO_ADDR
// if p3 = 9 then
9827: LD_VAR 0 3
9831: PUSH
9832: LD_INT 9
9834: EQUAL
9835: IFFALSE 9845
// sHack := true ;
9837: LD_ADDR_EXP 37
9841: PUSH
9842: LD_INT 1
9844: ST_TO_ADDR
// if p3 = 10 then
9845: LD_VAR 0 3
9849: PUSH
9850: LD_INT 10
9852: EQUAL
9853: IFFALSE 9863
// sFire := true ;
9855: LD_ADDR_EXP 38
9859: PUSH
9860: LD_INT 1
9862: ST_TO_ADDR
// if p3 = 11 then
9863: LD_VAR 0 3
9867: PUSH
9868: LD_INT 11
9870: EQUAL
9871: IFFALSE 9881
// sRefresh := true ;
9873: LD_ADDR_EXP 39
9877: PUSH
9878: LD_INT 1
9880: ST_TO_ADDR
// if p3 = 12 then
9881: LD_VAR 0 3
9885: PUSH
9886: LD_INT 12
9888: EQUAL
9889: IFFALSE 9899
// sExp := true ;
9891: LD_ADDR_EXP 40
9895: PUSH
9896: LD_INT 1
9898: ST_TO_ADDR
// if p3 = 13 then
9899: LD_VAR 0 3
9903: PUSH
9904: LD_INT 13
9906: EQUAL
9907: IFFALSE 9917
// sDepot := true ;
9909: LD_ADDR_EXP 41
9913: PUSH
9914: LD_INT 1
9916: ST_TO_ADDR
// if p3 = 14 then
9917: LD_VAR 0 3
9921: PUSH
9922: LD_INT 14
9924: EQUAL
9925: IFFALSE 9935
// sFlag := true ;
9927: LD_ADDR_EXP 42
9931: PUSH
9932: LD_INT 1
9934: ST_TO_ADDR
// if p3 = 15 then
9935: LD_VAR 0 3
9939: PUSH
9940: LD_INT 15
9942: EQUAL
9943: IFFALSE 9953
// sKamikadze := true ;
9945: LD_ADDR_EXP 50
9949: PUSH
9950: LD_INT 1
9952: ST_TO_ADDR
// if p3 = 16 then
9953: LD_VAR 0 3
9957: PUSH
9958: LD_INT 16
9960: EQUAL
9961: IFFALSE 9971
// sTroll := true ;
9963: LD_ADDR_EXP 51
9967: PUSH
9968: LD_INT 1
9970: ST_TO_ADDR
// if p3 = 17 then
9971: LD_VAR 0 3
9975: PUSH
9976: LD_INT 17
9978: EQUAL
9979: IFFALSE 9989
// sSlow := true ;
9981: LD_ADDR_EXP 52
9985: PUSH
9986: LD_INT 1
9988: ST_TO_ADDR
// if p3 = 18 then
9989: LD_VAR 0 3
9993: PUSH
9994: LD_INT 18
9996: EQUAL
9997: IFFALSE 10007
// sLack := true ;
9999: LD_ADDR_EXP 53
10003: PUSH
10004: LD_INT 1
10006: ST_TO_ADDR
// if p3 = 19 then
10007: LD_VAR 0 3
10011: PUSH
10012: LD_INT 19
10014: EQUAL
10015: IFFALSE 10025
// sTank := true ;
10017: LD_ADDR_EXP 55
10021: PUSH
10022: LD_INT 1
10024: ST_TO_ADDR
// if p3 = 20 then
10025: LD_VAR 0 3
10029: PUSH
10030: LD_INT 20
10032: EQUAL
10033: IFFALSE 10043
// sRemote := true ;
10035: LD_ADDR_EXP 56
10039: PUSH
10040: LD_INT 1
10042: ST_TO_ADDR
// if p3 = 21 then
10043: LD_VAR 0 3
10047: PUSH
10048: LD_INT 21
10050: EQUAL
10051: IFFALSE 10061
// sPowell := true ;
10053: LD_ADDR_EXP 57
10057: PUSH
10058: LD_INT 1
10060: ST_TO_ADDR
// if p3 = 22 then
10061: LD_VAR 0 3
10065: PUSH
10066: LD_INT 22
10068: EQUAL
10069: IFFALSE 10079
// sTeleport := true ;
10071: LD_ADDR_EXP 60
10075: PUSH
10076: LD_INT 1
10078: ST_TO_ADDR
// if p3 = 23 then
10079: LD_VAR 0 3
10083: PUSH
10084: LD_INT 23
10086: EQUAL
10087: IFFALSE 10097
// sOilTower := true ;
10089: LD_ADDR_EXP 62
10093: PUSH
10094: LD_INT 1
10096: ST_TO_ADDR
// if p3 = 24 then
10097: LD_VAR 0 3
10101: PUSH
10102: LD_INT 24
10104: EQUAL
10105: IFFALSE 10115
// sShovel := true ;
10107: LD_ADDR_EXP 63
10111: PUSH
10112: LD_INT 1
10114: ST_TO_ADDR
// if p3 = 25 then
10115: LD_VAR 0 3
10119: PUSH
10120: LD_INT 25
10122: EQUAL
10123: IFFALSE 10133
// sSheik := true ;
10125: LD_ADDR_EXP 64
10129: PUSH
10130: LD_INT 1
10132: ST_TO_ADDR
// if p3 = 26 then
10133: LD_VAR 0 3
10137: PUSH
10138: LD_INT 26
10140: EQUAL
10141: IFFALSE 10151
// sEarthquake := true ;
10143: LD_ADDR_EXP 66
10147: PUSH
10148: LD_INT 1
10150: ST_TO_ADDR
// if p3 = 27 then
10151: LD_VAR 0 3
10155: PUSH
10156: LD_INT 27
10158: EQUAL
10159: IFFALSE 10169
// sAI := true ;
10161: LD_ADDR_EXP 67
10165: PUSH
10166: LD_INT 1
10168: ST_TO_ADDR
// if p3 = 28 then
10169: LD_VAR 0 3
10173: PUSH
10174: LD_INT 28
10176: EQUAL
10177: IFFALSE 10187
// sCargo := true ;
10179: LD_ADDR_EXP 70
10183: PUSH
10184: LD_INT 1
10186: ST_TO_ADDR
// if p3 = 29 then
10187: LD_VAR 0 3
10191: PUSH
10192: LD_INT 29
10194: EQUAL
10195: IFFALSE 10205
// sDLaser := true ;
10197: LD_ADDR_EXP 71
10201: PUSH
10202: LD_INT 1
10204: ST_TO_ADDR
// if p3 = 30 then
10205: LD_VAR 0 3
10209: PUSH
10210: LD_INT 30
10212: EQUAL
10213: IFFALSE 10223
// sExchange := true ;
10215: LD_ADDR_EXP 72
10219: PUSH
10220: LD_INT 1
10222: ST_TO_ADDR
// if p3 = 31 then
10223: LD_VAR 0 3
10227: PUSH
10228: LD_INT 31
10230: EQUAL
10231: IFFALSE 10241
// sFac := true ;
10233: LD_ADDR_EXP 73
10237: PUSH
10238: LD_INT 1
10240: ST_TO_ADDR
// if p3 = 32 then
10241: LD_VAR 0 3
10245: PUSH
10246: LD_INT 32
10248: EQUAL
10249: IFFALSE 10259
// sPower := true ;
10251: LD_ADDR_EXP 74
10255: PUSH
10256: LD_INT 1
10258: ST_TO_ADDR
// if p3 = 33 then
10259: LD_VAR 0 3
10263: PUSH
10264: LD_INT 33
10266: EQUAL
10267: IFFALSE 10277
// sRandom := true ;
10269: LD_ADDR_EXP 75
10273: PUSH
10274: LD_INT 1
10276: ST_TO_ADDR
// if p3 = 34 then
10277: LD_VAR 0 3
10281: PUSH
10282: LD_INT 34
10284: EQUAL
10285: IFFALSE 10295
// sShield := true ;
10287: LD_ADDR_EXP 76
10291: PUSH
10292: LD_INT 1
10294: ST_TO_ADDR
// if p3 = 35 then
10295: LD_VAR 0 3
10299: PUSH
10300: LD_INT 35
10302: EQUAL
10303: IFFALSE 10313
// sTime := true ;
10305: LD_ADDR_EXP 77
10309: PUSH
10310: LD_INT 1
10312: ST_TO_ADDR
// if p3 = 36 then
10313: LD_VAR 0 3
10317: PUSH
10318: LD_INT 36
10320: EQUAL
10321: IFFALSE 10331
// sTools := true ;
10323: LD_ADDR_EXP 78
10327: PUSH
10328: LD_INT 1
10330: ST_TO_ADDR
// if p3 = 101 then
10331: LD_VAR 0 3
10335: PUSH
10336: LD_INT 101
10338: EQUAL
10339: IFFALSE 10349
// sSold := true ;
10341: LD_ADDR_EXP 43
10345: PUSH
10346: LD_INT 1
10348: ST_TO_ADDR
// if p3 = 102 then
10349: LD_VAR 0 3
10353: PUSH
10354: LD_INT 102
10356: EQUAL
10357: IFFALSE 10367
// sDiff := true ;
10359: LD_ADDR_EXP 44
10363: PUSH
10364: LD_INT 1
10366: ST_TO_ADDR
// if p3 = 103 then
10367: LD_VAR 0 3
10371: PUSH
10372: LD_INT 103
10374: EQUAL
10375: IFFALSE 10385
// sFog := true ;
10377: LD_ADDR_EXP 47
10381: PUSH
10382: LD_INT 1
10384: ST_TO_ADDR
// if p3 = 104 then
10385: LD_VAR 0 3
10389: PUSH
10390: LD_INT 104
10392: EQUAL
10393: IFFALSE 10403
// sReset := true ;
10395: LD_ADDR_EXP 48
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// if p3 = 105 then
10403: LD_VAR 0 3
10407: PUSH
10408: LD_INT 105
10410: EQUAL
10411: IFFALSE 10421
// sSun := true ;
10413: LD_ADDR_EXP 49
10417: PUSH
10418: LD_INT 1
10420: ST_TO_ADDR
// if p3 = 106 then
10421: LD_VAR 0 3
10425: PUSH
10426: LD_INT 106
10428: EQUAL
10429: IFFALSE 10439
// sTiger := true ;
10431: LD_ADDR_EXP 45
10435: PUSH
10436: LD_INT 1
10438: ST_TO_ADDR
// if p3 = 107 then
10439: LD_VAR 0 3
10443: PUSH
10444: LD_INT 107
10446: EQUAL
10447: IFFALSE 10457
// sBomb := true ;
10449: LD_ADDR_EXP 46
10453: PUSH
10454: LD_INT 1
10456: ST_TO_ADDR
// if p3 = 108 then
10457: LD_VAR 0 3
10461: PUSH
10462: LD_INT 108
10464: EQUAL
10465: IFFALSE 10475
// sWound := true ;
10467: LD_ADDR_EXP 54
10471: PUSH
10472: LD_INT 1
10474: ST_TO_ADDR
// if p3 = 109 then
10475: LD_VAR 0 3
10479: PUSH
10480: LD_INT 109
10482: EQUAL
10483: IFFALSE 10493
// sBetray := true ;
10485: LD_ADDR_EXP 58
10489: PUSH
10490: LD_INT 1
10492: ST_TO_ADDR
// if p3 = 110 then
10493: LD_VAR 0 3
10497: PUSH
10498: LD_INT 110
10500: EQUAL
10501: IFFALSE 10511
// sContamin := true ;
10503: LD_ADDR_EXP 59
10507: PUSH
10508: LD_INT 1
10510: ST_TO_ADDR
// if p3 = 111 then
10511: LD_VAR 0 3
10515: PUSH
10516: LD_INT 111
10518: EQUAL
10519: IFFALSE 10529
// sOil := true ;
10521: LD_ADDR_EXP 61
10525: PUSH
10526: LD_INT 1
10528: ST_TO_ADDR
// if p3 = 112 then
10529: LD_VAR 0 3
10533: PUSH
10534: LD_INT 112
10536: EQUAL
10537: IFFALSE 10547
// sStu := true ;
10539: LD_ADDR_EXP 65
10543: PUSH
10544: LD_INT 1
10546: ST_TO_ADDR
// if p3 = 113 then
10547: LD_VAR 0 3
10551: PUSH
10552: LD_INT 113
10554: EQUAL
10555: IFFALSE 10565
// sBazooka := true ;
10557: LD_ADDR_EXP 68
10561: PUSH
10562: LD_INT 1
10564: ST_TO_ADDR
// if p3 = 114 then
10565: LD_VAR 0 3
10569: PUSH
10570: LD_INT 114
10572: EQUAL
10573: IFFALSE 10583
// sMortar := true ;
10575: LD_ADDR_EXP 69
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
// if p3 = 115 then
10583: LD_VAR 0 3
10587: PUSH
10588: LD_INT 115
10590: EQUAL
10591: IFFALSE 10601
// sRanger := true ;
10593: LD_ADDR_EXP 79
10597: PUSH
10598: LD_INT 1
10600: ST_TO_ADDR
// if p3 = 116 then
10601: LD_VAR 0 3
10605: PUSH
10606: LD_INT 116
10608: EQUAL
10609: IFFALSE 10619
// sComputer := true ;
10611: LD_ADDR_EXP 80
10615: PUSH
10616: LD_INT 1
10618: ST_TO_ADDR
// if p3 = 117 then
10619: LD_VAR 0 3
10623: PUSH
10624: LD_INT 117
10626: EQUAL
10627: IFFALSE 10637
// s30 := true ;
10629: LD_ADDR_EXP 81
10633: PUSH
10634: LD_INT 1
10636: ST_TO_ADDR
// if p3 = 118 then
10637: LD_VAR 0 3
10641: PUSH
10642: LD_INT 118
10644: EQUAL
10645: IFFALSE 10655
// s60 := true ;
10647: LD_ADDR_EXP 82
10651: PUSH
10652: LD_INT 1
10654: ST_TO_ADDR
// end ; if p2 = hack_mode then
10655: LD_VAR 0 2
10659: PUSH
10660: LD_INT 101
10662: EQUAL
10663: IFFALSE 10791
// begin case p3 of 1 :
10665: LD_VAR 0 3
10669: PUSH
10670: LD_INT 1
10672: DOUBLE
10673: EQUAL
10674: IFTRUE 10678
10676: GO 10685
10678: POP
// hHackUnlimitedResources ; 2 :
10679: CALL 22938 0 0
10683: GO 10791
10685: LD_INT 2
10687: DOUBLE
10688: EQUAL
10689: IFTRUE 10693
10691: GO 10700
10693: POP
// hHackSetLevel10 ; 3 :
10694: CALL 23071 0 0
10698: GO 10791
10700: LD_INT 3
10702: DOUBLE
10703: EQUAL
10704: IFTRUE 10708
10706: GO 10715
10708: POP
// hHackSetLevel10YourUnits ; 4 :
10709: CALL 23156 0 0
10713: GO 10791
10715: LD_INT 4
10717: DOUBLE
10718: EQUAL
10719: IFTRUE 10723
10721: GO 10730
10723: POP
// hHackInvincible ; 5 :
10724: CALL 23604 0 0
10728: GO 10791
10730: LD_INT 5
10732: DOUBLE
10733: EQUAL
10734: IFTRUE 10738
10736: GO 10745
10738: POP
// hHackInvisible ; 6 :
10739: CALL 23715 0 0
10743: GO 10791
10745: LD_INT 6
10747: DOUBLE
10748: EQUAL
10749: IFTRUE 10753
10751: GO 10760
10753: POP
// hHackChangeYourSide ; 7 :
10754: CALL 23772 0 0
10758: GO 10791
10760: LD_INT 7
10762: DOUBLE
10763: EQUAL
10764: IFTRUE 10768
10766: GO 10775
10768: POP
// hHackChangeUnitSide ; 8 :
10769: CALL 23814 0 0
10773: GO 10791
10775: LD_INT 8
10777: DOUBLE
10778: EQUAL
10779: IFTRUE 10783
10781: GO 10790
10783: POP
// hHackFog ; end ;
10784: CALL 23915 0 0
10788: GO 10791
10790: POP
// end ; if p2 = game_save_mode then
10791: LD_VAR 0 2
10795: PUSH
10796: LD_INT 102
10798: EQUAL
10799: IFFALSE 10854
// begin if p3 = 1 then
10801: LD_VAR 0 3
10805: PUSH
10806: LD_INT 1
10808: EQUAL
10809: IFFALSE 10821
// globalGameSaveCounter := p4 ;
10811: LD_ADDR_EXP 25
10815: PUSH
10816: LD_VAR 0 4
10820: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10821: LD_VAR 0 3
10825: PUSH
10826: LD_INT 2
10828: EQUAL
10829: PUSH
10830: LD_EXP 25
10834: AND
10835: IFFALSE 10854
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10837: LD_STRING setGameSaveCounter(
10839: PUSH
10840: LD_EXP 25
10844: STR
10845: PUSH
10846: LD_STRING )
10848: STR
10849: PPUSH
10850: CALL_OW 559
// end ; end ;
10854: LD_VAR 0 7
10858: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10859: LD_INT 0
10861: PPUSH
// streamModeActive := false ;
10862: LD_ADDR_EXP 26
10866: PUSH
10867: LD_INT 0
10869: ST_TO_ADDR
// normalCounter := 36 ;
10870: LD_ADDR_EXP 27
10874: PUSH
10875: LD_INT 36
10877: ST_TO_ADDR
// hardcoreCounter := 18 ;
10878: LD_ADDR_EXP 28
10882: PUSH
10883: LD_INT 18
10885: ST_TO_ADDR
// sRocket := false ;
10886: LD_ADDR_EXP 31
10890: PUSH
10891: LD_INT 0
10893: ST_TO_ADDR
// sSpeed := false ;
10894: LD_ADDR_EXP 30
10898: PUSH
10899: LD_INT 0
10901: ST_TO_ADDR
// sEngine := false ;
10902: LD_ADDR_EXP 32
10906: PUSH
10907: LD_INT 0
10909: ST_TO_ADDR
// sSpec := false ;
10910: LD_ADDR_EXP 29
10914: PUSH
10915: LD_INT 0
10917: ST_TO_ADDR
// sLevel := false ;
10918: LD_ADDR_EXP 33
10922: PUSH
10923: LD_INT 0
10925: ST_TO_ADDR
// sArmoury := false ;
10926: LD_ADDR_EXP 34
10930: PUSH
10931: LD_INT 0
10933: ST_TO_ADDR
// sRadar := false ;
10934: LD_ADDR_EXP 35
10938: PUSH
10939: LD_INT 0
10941: ST_TO_ADDR
// sBunker := false ;
10942: LD_ADDR_EXP 36
10946: PUSH
10947: LD_INT 0
10949: ST_TO_ADDR
// sHack := false ;
10950: LD_ADDR_EXP 37
10954: PUSH
10955: LD_INT 0
10957: ST_TO_ADDR
// sFire := false ;
10958: LD_ADDR_EXP 38
10962: PUSH
10963: LD_INT 0
10965: ST_TO_ADDR
// sRefresh := false ;
10966: LD_ADDR_EXP 39
10970: PUSH
10971: LD_INT 0
10973: ST_TO_ADDR
// sExp := false ;
10974: LD_ADDR_EXP 40
10978: PUSH
10979: LD_INT 0
10981: ST_TO_ADDR
// sDepot := false ;
10982: LD_ADDR_EXP 41
10986: PUSH
10987: LD_INT 0
10989: ST_TO_ADDR
// sFlag := false ;
10990: LD_ADDR_EXP 42
10994: PUSH
10995: LD_INT 0
10997: ST_TO_ADDR
// sKamikadze := false ;
10998: LD_ADDR_EXP 50
11002: PUSH
11003: LD_INT 0
11005: ST_TO_ADDR
// sTroll := false ;
11006: LD_ADDR_EXP 51
11010: PUSH
11011: LD_INT 0
11013: ST_TO_ADDR
// sSlow := false ;
11014: LD_ADDR_EXP 52
11018: PUSH
11019: LD_INT 0
11021: ST_TO_ADDR
// sLack := false ;
11022: LD_ADDR_EXP 53
11026: PUSH
11027: LD_INT 0
11029: ST_TO_ADDR
// sTank := false ;
11030: LD_ADDR_EXP 55
11034: PUSH
11035: LD_INT 0
11037: ST_TO_ADDR
// sRemote := false ;
11038: LD_ADDR_EXP 56
11042: PUSH
11043: LD_INT 0
11045: ST_TO_ADDR
// sPowell := false ;
11046: LD_ADDR_EXP 57
11050: PUSH
11051: LD_INT 0
11053: ST_TO_ADDR
// sTeleport := false ;
11054: LD_ADDR_EXP 60
11058: PUSH
11059: LD_INT 0
11061: ST_TO_ADDR
// sOilTower := false ;
11062: LD_ADDR_EXP 62
11066: PUSH
11067: LD_INT 0
11069: ST_TO_ADDR
// sShovel := false ;
11070: LD_ADDR_EXP 63
11074: PUSH
11075: LD_INT 0
11077: ST_TO_ADDR
// sSheik := false ;
11078: LD_ADDR_EXP 64
11082: PUSH
11083: LD_INT 0
11085: ST_TO_ADDR
// sEarthquake := false ;
11086: LD_ADDR_EXP 66
11090: PUSH
11091: LD_INT 0
11093: ST_TO_ADDR
// sAI := false ;
11094: LD_ADDR_EXP 67
11098: PUSH
11099: LD_INT 0
11101: ST_TO_ADDR
// sCargo := false ;
11102: LD_ADDR_EXP 70
11106: PUSH
11107: LD_INT 0
11109: ST_TO_ADDR
// sDLaser := false ;
11110: LD_ADDR_EXP 71
11114: PUSH
11115: LD_INT 0
11117: ST_TO_ADDR
// sExchange := false ;
11118: LD_ADDR_EXP 72
11122: PUSH
11123: LD_INT 0
11125: ST_TO_ADDR
// sFac := false ;
11126: LD_ADDR_EXP 73
11130: PUSH
11131: LD_INT 0
11133: ST_TO_ADDR
// sPower := false ;
11134: LD_ADDR_EXP 74
11138: PUSH
11139: LD_INT 0
11141: ST_TO_ADDR
// sRandom := false ;
11142: LD_ADDR_EXP 75
11146: PUSH
11147: LD_INT 0
11149: ST_TO_ADDR
// sShield := false ;
11150: LD_ADDR_EXP 76
11154: PUSH
11155: LD_INT 0
11157: ST_TO_ADDR
// sTime := false ;
11158: LD_ADDR_EXP 77
11162: PUSH
11163: LD_INT 0
11165: ST_TO_ADDR
// sTools := false ;
11166: LD_ADDR_EXP 78
11170: PUSH
11171: LD_INT 0
11173: ST_TO_ADDR
// sSold := false ;
11174: LD_ADDR_EXP 43
11178: PUSH
11179: LD_INT 0
11181: ST_TO_ADDR
// sDiff := false ;
11182: LD_ADDR_EXP 44
11186: PUSH
11187: LD_INT 0
11189: ST_TO_ADDR
// sFog := false ;
11190: LD_ADDR_EXP 47
11194: PUSH
11195: LD_INT 0
11197: ST_TO_ADDR
// sReset := false ;
11198: LD_ADDR_EXP 48
11202: PUSH
11203: LD_INT 0
11205: ST_TO_ADDR
// sSun := false ;
11206: LD_ADDR_EXP 49
11210: PUSH
11211: LD_INT 0
11213: ST_TO_ADDR
// sTiger := false ;
11214: LD_ADDR_EXP 45
11218: PUSH
11219: LD_INT 0
11221: ST_TO_ADDR
// sBomb := false ;
11222: LD_ADDR_EXP 46
11226: PUSH
11227: LD_INT 0
11229: ST_TO_ADDR
// sWound := false ;
11230: LD_ADDR_EXP 54
11234: PUSH
11235: LD_INT 0
11237: ST_TO_ADDR
// sBetray := false ;
11238: LD_ADDR_EXP 58
11242: PUSH
11243: LD_INT 0
11245: ST_TO_ADDR
// sContamin := false ;
11246: LD_ADDR_EXP 59
11250: PUSH
11251: LD_INT 0
11253: ST_TO_ADDR
// sOil := false ;
11254: LD_ADDR_EXP 61
11258: PUSH
11259: LD_INT 0
11261: ST_TO_ADDR
// sStu := false ;
11262: LD_ADDR_EXP 65
11266: PUSH
11267: LD_INT 0
11269: ST_TO_ADDR
// sBazooka := false ;
11270: LD_ADDR_EXP 68
11274: PUSH
11275: LD_INT 0
11277: ST_TO_ADDR
// sMortar := false ;
11278: LD_ADDR_EXP 69
11282: PUSH
11283: LD_INT 0
11285: ST_TO_ADDR
// sRanger := false ;
11286: LD_ADDR_EXP 79
11290: PUSH
11291: LD_INT 0
11293: ST_TO_ADDR
// sComputer := false ;
11294: LD_ADDR_EXP 80
11298: PUSH
11299: LD_INT 0
11301: ST_TO_ADDR
// s30 := false ;
11302: LD_ADDR_EXP 81
11306: PUSH
11307: LD_INT 0
11309: ST_TO_ADDR
// s60 := false ;
11310: LD_ADDR_EXP 82
11314: PUSH
11315: LD_INT 0
11317: ST_TO_ADDR
// end ;
11318: LD_VAR 0 1
11322: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
11327: PPUSH
11328: PPUSH
11329: PPUSH
11330: PPUSH
11331: PPUSH
// result := [ ] ;
11332: LD_ADDR_VAR 0 2
11336: PUSH
11337: EMPTY
11338: ST_TO_ADDR
// if campaign_id = 1 then
11339: LD_OWVAR 69
11343: PUSH
11344: LD_INT 1
11346: EQUAL
11347: IFFALSE 14513
// begin case mission_number of 1 :
11349: LD_OWVAR 70
11353: PUSH
11354: LD_INT 1
11356: DOUBLE
11357: EQUAL
11358: IFTRUE 11362
11360: GO 11438
11362: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11363: LD_ADDR_VAR 0 2
11367: PUSH
11368: LD_INT 2
11370: PUSH
11371: LD_INT 4
11373: PUSH
11374: LD_INT 11
11376: PUSH
11377: LD_INT 12
11379: PUSH
11380: LD_INT 15
11382: PUSH
11383: LD_INT 16
11385: PUSH
11386: LD_INT 22
11388: PUSH
11389: LD_INT 23
11391: PUSH
11392: LD_INT 26
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 101
11408: PUSH
11409: LD_INT 102
11411: PUSH
11412: LD_INT 106
11414: PUSH
11415: LD_INT 116
11417: PUSH
11418: LD_INT 117
11420: PUSH
11421: LD_INT 118
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: ST_TO_ADDR
11436: GO 14511
11438: LD_INT 2
11440: DOUBLE
11441: EQUAL
11442: IFTRUE 11446
11444: GO 11530
11446: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11447: LD_ADDR_VAR 0 2
11451: PUSH
11452: LD_INT 2
11454: PUSH
11455: LD_INT 4
11457: PUSH
11458: LD_INT 11
11460: PUSH
11461: LD_INT 12
11463: PUSH
11464: LD_INT 15
11466: PUSH
11467: LD_INT 16
11469: PUSH
11470: LD_INT 22
11472: PUSH
11473: LD_INT 23
11475: PUSH
11476: LD_INT 26
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 101
11492: PUSH
11493: LD_INT 102
11495: PUSH
11496: LD_INT 105
11498: PUSH
11499: LD_INT 106
11501: PUSH
11502: LD_INT 108
11504: PUSH
11505: LD_INT 116
11507: PUSH
11508: LD_INT 117
11510: PUSH
11511: LD_INT 118
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: ST_TO_ADDR
11528: GO 14511
11530: LD_INT 3
11532: DOUBLE
11533: EQUAL
11534: IFTRUE 11538
11536: GO 11626
11538: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11539: LD_ADDR_VAR 0 2
11543: PUSH
11544: LD_INT 2
11546: PUSH
11547: LD_INT 4
11549: PUSH
11550: LD_INT 5
11552: PUSH
11553: LD_INT 11
11555: PUSH
11556: LD_INT 12
11558: PUSH
11559: LD_INT 15
11561: PUSH
11562: LD_INT 16
11564: PUSH
11565: LD_INT 22
11567: PUSH
11568: LD_INT 26
11570: PUSH
11571: LD_INT 36
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 101
11588: PUSH
11589: LD_INT 102
11591: PUSH
11592: LD_INT 105
11594: PUSH
11595: LD_INT 106
11597: PUSH
11598: LD_INT 108
11600: PUSH
11601: LD_INT 116
11603: PUSH
11604: LD_INT 117
11606: PUSH
11607: LD_INT 118
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: ST_TO_ADDR
11624: GO 14511
11626: LD_INT 4
11628: DOUBLE
11629: EQUAL
11630: IFTRUE 11634
11632: GO 11730
11634: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11635: LD_ADDR_VAR 0 2
11639: PUSH
11640: LD_INT 2
11642: PUSH
11643: LD_INT 4
11645: PUSH
11646: LD_INT 5
11648: PUSH
11649: LD_INT 8
11651: PUSH
11652: LD_INT 11
11654: PUSH
11655: LD_INT 12
11657: PUSH
11658: LD_INT 15
11660: PUSH
11661: LD_INT 16
11663: PUSH
11664: LD_INT 22
11666: PUSH
11667: LD_INT 23
11669: PUSH
11670: LD_INT 26
11672: PUSH
11673: LD_INT 36
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 101
11692: PUSH
11693: LD_INT 102
11695: PUSH
11696: LD_INT 105
11698: PUSH
11699: LD_INT 106
11701: PUSH
11702: LD_INT 108
11704: PUSH
11705: LD_INT 116
11707: PUSH
11708: LD_INT 117
11710: PUSH
11711: LD_INT 118
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: ST_TO_ADDR
11728: GO 14511
11730: LD_INT 5
11732: DOUBLE
11733: EQUAL
11734: IFTRUE 11738
11736: GO 11850
11738: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11739: LD_ADDR_VAR 0 2
11743: PUSH
11744: LD_INT 2
11746: PUSH
11747: LD_INT 4
11749: PUSH
11750: LD_INT 5
11752: PUSH
11753: LD_INT 6
11755: PUSH
11756: LD_INT 8
11758: PUSH
11759: LD_INT 11
11761: PUSH
11762: LD_INT 12
11764: PUSH
11765: LD_INT 15
11767: PUSH
11768: LD_INT 16
11770: PUSH
11771: LD_INT 22
11773: PUSH
11774: LD_INT 23
11776: PUSH
11777: LD_INT 25
11779: PUSH
11780: LD_INT 26
11782: PUSH
11783: LD_INT 36
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 101
11804: PUSH
11805: LD_INT 102
11807: PUSH
11808: LD_INT 105
11810: PUSH
11811: LD_INT 106
11813: PUSH
11814: LD_INT 108
11816: PUSH
11817: LD_INT 109
11819: PUSH
11820: LD_INT 112
11822: PUSH
11823: LD_INT 116
11825: PUSH
11826: LD_INT 117
11828: PUSH
11829: LD_INT 118
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: ST_TO_ADDR
11848: GO 14511
11850: LD_INT 6
11852: DOUBLE
11853: EQUAL
11854: IFTRUE 11858
11856: GO 11990
11858: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11859: LD_ADDR_VAR 0 2
11863: PUSH
11864: LD_INT 2
11866: PUSH
11867: LD_INT 4
11869: PUSH
11870: LD_INT 5
11872: PUSH
11873: LD_INT 6
11875: PUSH
11876: LD_INT 8
11878: PUSH
11879: LD_INT 11
11881: PUSH
11882: LD_INT 12
11884: PUSH
11885: LD_INT 15
11887: PUSH
11888: LD_INT 16
11890: PUSH
11891: LD_INT 20
11893: PUSH
11894: LD_INT 21
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 23
11902: PUSH
11903: LD_INT 25
11905: PUSH
11906: LD_INT 26
11908: PUSH
11909: LD_INT 30
11911: PUSH
11912: LD_INT 31
11914: PUSH
11915: LD_INT 32
11917: PUSH
11918: LD_INT 36
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 101
11944: PUSH
11945: LD_INT 102
11947: PUSH
11948: LD_INT 105
11950: PUSH
11951: LD_INT 106
11953: PUSH
11954: LD_INT 108
11956: PUSH
11957: LD_INT 109
11959: PUSH
11960: LD_INT 112
11962: PUSH
11963: LD_INT 116
11965: PUSH
11966: LD_INT 117
11968: PUSH
11969: LD_INT 118
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: ST_TO_ADDR
11988: GO 14511
11990: LD_INT 7
11992: DOUBLE
11993: EQUAL
11994: IFTRUE 11998
11996: GO 12110
11998: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11999: LD_ADDR_VAR 0 2
12003: PUSH
12004: LD_INT 2
12006: PUSH
12007: LD_INT 4
12009: PUSH
12010: LD_INT 5
12012: PUSH
12013: LD_INT 7
12015: PUSH
12016: LD_INT 11
12018: PUSH
12019: LD_INT 12
12021: PUSH
12022: LD_INT 15
12024: PUSH
12025: LD_INT 16
12027: PUSH
12028: LD_INT 20
12030: PUSH
12031: LD_INT 21
12033: PUSH
12034: LD_INT 22
12036: PUSH
12037: LD_INT 23
12039: PUSH
12040: LD_INT 25
12042: PUSH
12043: LD_INT 26
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 101
12064: PUSH
12065: LD_INT 102
12067: PUSH
12068: LD_INT 103
12070: PUSH
12071: LD_INT 105
12073: PUSH
12074: LD_INT 106
12076: PUSH
12077: LD_INT 108
12079: PUSH
12080: LD_INT 112
12082: PUSH
12083: LD_INT 116
12085: PUSH
12086: LD_INT 117
12088: PUSH
12089: LD_INT 118
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: ST_TO_ADDR
12108: GO 14511
12110: LD_INT 8
12112: DOUBLE
12113: EQUAL
12114: IFTRUE 12118
12116: GO 12258
12118: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12119: LD_ADDR_VAR 0 2
12123: PUSH
12124: LD_INT 2
12126: PUSH
12127: LD_INT 4
12129: PUSH
12130: LD_INT 5
12132: PUSH
12133: LD_INT 6
12135: PUSH
12136: LD_INT 7
12138: PUSH
12139: LD_INT 8
12141: PUSH
12142: LD_INT 11
12144: PUSH
12145: LD_INT 12
12147: PUSH
12148: LD_INT 15
12150: PUSH
12151: LD_INT 16
12153: PUSH
12154: LD_INT 20
12156: PUSH
12157: LD_INT 21
12159: PUSH
12160: LD_INT 22
12162: PUSH
12163: LD_INT 23
12165: PUSH
12166: LD_INT 25
12168: PUSH
12169: LD_INT 26
12171: PUSH
12172: LD_INT 30
12174: PUSH
12175: LD_INT 31
12177: PUSH
12178: LD_INT 32
12180: PUSH
12181: LD_INT 36
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 101
12208: PUSH
12209: LD_INT 102
12211: PUSH
12212: LD_INT 103
12214: PUSH
12215: LD_INT 105
12217: PUSH
12218: LD_INT 106
12220: PUSH
12221: LD_INT 108
12223: PUSH
12224: LD_INT 109
12226: PUSH
12227: LD_INT 112
12229: PUSH
12230: LD_INT 116
12232: PUSH
12233: LD_INT 117
12235: PUSH
12236: LD_INT 118
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: ST_TO_ADDR
12256: GO 14511
12258: LD_INT 9
12260: DOUBLE
12261: EQUAL
12262: IFTRUE 12266
12264: GO 12414
12266: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12267: LD_ADDR_VAR 0 2
12271: PUSH
12272: LD_INT 2
12274: PUSH
12275: LD_INT 4
12277: PUSH
12278: LD_INT 5
12280: PUSH
12281: LD_INT 6
12283: PUSH
12284: LD_INT 7
12286: PUSH
12287: LD_INT 8
12289: PUSH
12290: LD_INT 11
12292: PUSH
12293: LD_INT 12
12295: PUSH
12296: LD_INT 15
12298: PUSH
12299: LD_INT 16
12301: PUSH
12302: LD_INT 20
12304: PUSH
12305: LD_INT 21
12307: PUSH
12308: LD_INT 22
12310: PUSH
12311: LD_INT 23
12313: PUSH
12314: LD_INT 25
12316: PUSH
12317: LD_INT 26
12319: PUSH
12320: LD_INT 28
12322: PUSH
12323: LD_INT 30
12325: PUSH
12326: LD_INT 31
12328: PUSH
12329: LD_INT 32
12331: PUSH
12332: LD_INT 36
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 101
12360: PUSH
12361: LD_INT 102
12363: PUSH
12364: LD_INT 103
12366: PUSH
12367: LD_INT 105
12369: PUSH
12370: LD_INT 106
12372: PUSH
12373: LD_INT 108
12375: PUSH
12376: LD_INT 109
12378: PUSH
12379: LD_INT 112
12381: PUSH
12382: LD_INT 114
12384: PUSH
12385: LD_INT 116
12387: PUSH
12388: LD_INT 117
12390: PUSH
12391: LD_INT 118
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: ST_TO_ADDR
12412: GO 14511
12414: LD_INT 10
12416: DOUBLE
12417: EQUAL
12418: IFTRUE 12422
12420: GO 12618
12422: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12423: LD_ADDR_VAR 0 2
12427: PUSH
12428: LD_INT 2
12430: PUSH
12431: LD_INT 4
12433: PUSH
12434: LD_INT 5
12436: PUSH
12437: LD_INT 6
12439: PUSH
12440: LD_INT 7
12442: PUSH
12443: LD_INT 8
12445: PUSH
12446: LD_INT 9
12448: PUSH
12449: LD_INT 10
12451: PUSH
12452: LD_INT 11
12454: PUSH
12455: LD_INT 12
12457: PUSH
12458: LD_INT 13
12460: PUSH
12461: LD_INT 14
12463: PUSH
12464: LD_INT 15
12466: PUSH
12467: LD_INT 16
12469: PUSH
12470: LD_INT 17
12472: PUSH
12473: LD_INT 18
12475: PUSH
12476: LD_INT 19
12478: PUSH
12479: LD_INT 20
12481: PUSH
12482: LD_INT 21
12484: PUSH
12485: LD_INT 22
12487: PUSH
12488: LD_INT 23
12490: PUSH
12491: LD_INT 24
12493: PUSH
12494: LD_INT 25
12496: PUSH
12497: LD_INT 26
12499: PUSH
12500: LD_INT 28
12502: PUSH
12503: LD_INT 30
12505: PUSH
12506: LD_INT 31
12508: PUSH
12509: LD_INT 32
12511: PUSH
12512: LD_INT 36
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 101
12548: PUSH
12549: LD_INT 102
12551: PUSH
12552: LD_INT 103
12554: PUSH
12555: LD_INT 104
12557: PUSH
12558: LD_INT 105
12560: PUSH
12561: LD_INT 106
12563: PUSH
12564: LD_INT 107
12566: PUSH
12567: LD_INT 108
12569: PUSH
12570: LD_INT 109
12572: PUSH
12573: LD_INT 110
12575: PUSH
12576: LD_INT 111
12578: PUSH
12579: LD_INT 112
12581: PUSH
12582: LD_INT 114
12584: PUSH
12585: LD_INT 116
12587: PUSH
12588: LD_INT 117
12590: PUSH
12591: LD_INT 118
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: ST_TO_ADDR
12616: GO 14511
12618: LD_INT 11
12620: DOUBLE
12621: EQUAL
12622: IFTRUE 12626
12624: GO 12830
12626: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12627: LD_ADDR_VAR 0 2
12631: PUSH
12632: LD_INT 2
12634: PUSH
12635: LD_INT 3
12637: PUSH
12638: LD_INT 4
12640: PUSH
12641: LD_INT 5
12643: PUSH
12644: LD_INT 6
12646: PUSH
12647: LD_INT 7
12649: PUSH
12650: LD_INT 8
12652: PUSH
12653: LD_INT 9
12655: PUSH
12656: LD_INT 10
12658: PUSH
12659: LD_INT 11
12661: PUSH
12662: LD_INT 12
12664: PUSH
12665: LD_INT 13
12667: PUSH
12668: LD_INT 14
12670: PUSH
12671: LD_INT 15
12673: PUSH
12674: LD_INT 16
12676: PUSH
12677: LD_INT 17
12679: PUSH
12680: LD_INT 18
12682: PUSH
12683: LD_INT 19
12685: PUSH
12686: LD_INT 20
12688: PUSH
12689: LD_INT 21
12691: PUSH
12692: LD_INT 22
12694: PUSH
12695: LD_INT 23
12697: PUSH
12698: LD_INT 24
12700: PUSH
12701: LD_INT 25
12703: PUSH
12704: LD_INT 26
12706: PUSH
12707: LD_INT 28
12709: PUSH
12710: LD_INT 30
12712: PUSH
12713: LD_INT 31
12715: PUSH
12716: LD_INT 32
12718: PUSH
12719: LD_INT 34
12721: PUSH
12722: LD_INT 36
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: PUSH
12758: LD_INT 101
12760: PUSH
12761: LD_INT 102
12763: PUSH
12764: LD_INT 103
12766: PUSH
12767: LD_INT 104
12769: PUSH
12770: LD_INT 105
12772: PUSH
12773: LD_INT 106
12775: PUSH
12776: LD_INT 107
12778: PUSH
12779: LD_INT 108
12781: PUSH
12782: LD_INT 109
12784: PUSH
12785: LD_INT 110
12787: PUSH
12788: LD_INT 111
12790: PUSH
12791: LD_INT 112
12793: PUSH
12794: LD_INT 114
12796: PUSH
12797: LD_INT 116
12799: PUSH
12800: LD_INT 117
12802: PUSH
12803: LD_INT 118
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: ST_TO_ADDR
12828: GO 14511
12830: LD_INT 12
12832: DOUBLE
12833: EQUAL
12834: IFTRUE 12838
12836: GO 13058
12838: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12839: LD_ADDR_VAR 0 2
12843: PUSH
12844: LD_INT 1
12846: PUSH
12847: LD_INT 2
12849: PUSH
12850: LD_INT 3
12852: PUSH
12853: LD_INT 4
12855: PUSH
12856: LD_INT 5
12858: PUSH
12859: LD_INT 6
12861: PUSH
12862: LD_INT 7
12864: PUSH
12865: LD_INT 8
12867: PUSH
12868: LD_INT 9
12870: PUSH
12871: LD_INT 10
12873: PUSH
12874: LD_INT 11
12876: PUSH
12877: LD_INT 12
12879: PUSH
12880: LD_INT 13
12882: PUSH
12883: LD_INT 14
12885: PUSH
12886: LD_INT 15
12888: PUSH
12889: LD_INT 16
12891: PUSH
12892: LD_INT 17
12894: PUSH
12895: LD_INT 18
12897: PUSH
12898: LD_INT 19
12900: PUSH
12901: LD_INT 20
12903: PUSH
12904: LD_INT 21
12906: PUSH
12907: LD_INT 22
12909: PUSH
12910: LD_INT 23
12912: PUSH
12913: LD_INT 24
12915: PUSH
12916: LD_INT 25
12918: PUSH
12919: LD_INT 26
12921: PUSH
12922: LD_INT 27
12924: PUSH
12925: LD_INT 28
12927: PUSH
12928: LD_INT 30
12930: PUSH
12931: LD_INT 31
12933: PUSH
12934: LD_INT 32
12936: PUSH
12937: LD_INT 33
12939: PUSH
12940: LD_INT 34
12942: PUSH
12943: LD_INT 36
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 101
12984: PUSH
12985: LD_INT 102
12987: PUSH
12988: LD_INT 103
12990: PUSH
12991: LD_INT 104
12993: PUSH
12994: LD_INT 105
12996: PUSH
12997: LD_INT 106
12999: PUSH
13000: LD_INT 107
13002: PUSH
13003: LD_INT 108
13005: PUSH
13006: LD_INT 109
13008: PUSH
13009: LD_INT 110
13011: PUSH
13012: LD_INT 111
13014: PUSH
13015: LD_INT 112
13017: PUSH
13018: LD_INT 113
13020: PUSH
13021: LD_INT 114
13023: PUSH
13024: LD_INT 116
13026: PUSH
13027: LD_INT 117
13029: PUSH
13030: LD_INT 118
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: ST_TO_ADDR
13056: GO 14511
13058: LD_INT 13
13060: DOUBLE
13061: EQUAL
13062: IFTRUE 13066
13064: GO 13274
13066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13067: LD_ADDR_VAR 0 2
13071: PUSH
13072: LD_INT 1
13074: PUSH
13075: LD_INT 2
13077: PUSH
13078: LD_INT 3
13080: PUSH
13081: LD_INT 4
13083: PUSH
13084: LD_INT 5
13086: PUSH
13087: LD_INT 8
13089: PUSH
13090: LD_INT 9
13092: PUSH
13093: LD_INT 10
13095: PUSH
13096: LD_INT 11
13098: PUSH
13099: LD_INT 12
13101: PUSH
13102: LD_INT 14
13104: PUSH
13105: LD_INT 15
13107: PUSH
13108: LD_INT 16
13110: PUSH
13111: LD_INT 17
13113: PUSH
13114: LD_INT 18
13116: PUSH
13117: LD_INT 19
13119: PUSH
13120: LD_INT 20
13122: PUSH
13123: LD_INT 21
13125: PUSH
13126: LD_INT 22
13128: PUSH
13129: LD_INT 23
13131: PUSH
13132: LD_INT 24
13134: PUSH
13135: LD_INT 25
13137: PUSH
13138: LD_INT 26
13140: PUSH
13141: LD_INT 27
13143: PUSH
13144: LD_INT 28
13146: PUSH
13147: LD_INT 30
13149: PUSH
13150: LD_INT 31
13152: PUSH
13153: LD_INT 32
13155: PUSH
13156: LD_INT 33
13158: PUSH
13159: LD_INT 34
13161: PUSH
13162: LD_INT 36
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 101
13200: PUSH
13201: LD_INT 102
13203: PUSH
13204: LD_INT 103
13206: PUSH
13207: LD_INT 104
13209: PUSH
13210: LD_INT 105
13212: PUSH
13213: LD_INT 106
13215: PUSH
13216: LD_INT 107
13218: PUSH
13219: LD_INT 108
13221: PUSH
13222: LD_INT 109
13224: PUSH
13225: LD_INT 110
13227: PUSH
13228: LD_INT 111
13230: PUSH
13231: LD_INT 112
13233: PUSH
13234: LD_INT 113
13236: PUSH
13237: LD_INT 114
13239: PUSH
13240: LD_INT 116
13242: PUSH
13243: LD_INT 117
13245: PUSH
13246: LD_INT 118
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: ST_TO_ADDR
13272: GO 14511
13274: LD_INT 14
13276: DOUBLE
13277: EQUAL
13278: IFTRUE 13282
13280: GO 13506
13282: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13283: LD_ADDR_VAR 0 2
13287: PUSH
13288: LD_INT 1
13290: PUSH
13291: LD_INT 2
13293: PUSH
13294: LD_INT 3
13296: PUSH
13297: LD_INT 4
13299: PUSH
13300: LD_INT 5
13302: PUSH
13303: LD_INT 6
13305: PUSH
13306: LD_INT 7
13308: PUSH
13309: LD_INT 8
13311: PUSH
13312: LD_INT 9
13314: PUSH
13315: LD_INT 10
13317: PUSH
13318: LD_INT 11
13320: PUSH
13321: LD_INT 12
13323: PUSH
13324: LD_INT 13
13326: PUSH
13327: LD_INT 14
13329: PUSH
13330: LD_INT 15
13332: PUSH
13333: LD_INT 16
13335: PUSH
13336: LD_INT 17
13338: PUSH
13339: LD_INT 18
13341: PUSH
13342: LD_INT 19
13344: PUSH
13345: LD_INT 20
13347: PUSH
13348: LD_INT 21
13350: PUSH
13351: LD_INT 22
13353: PUSH
13354: LD_INT 23
13356: PUSH
13357: LD_INT 24
13359: PUSH
13360: LD_INT 25
13362: PUSH
13363: LD_INT 26
13365: PUSH
13366: LD_INT 27
13368: PUSH
13369: LD_INT 28
13371: PUSH
13372: LD_INT 29
13374: PUSH
13375: LD_INT 30
13377: PUSH
13378: LD_INT 31
13380: PUSH
13381: LD_INT 32
13383: PUSH
13384: LD_INT 33
13386: PUSH
13387: LD_INT 34
13389: PUSH
13390: LD_INT 36
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 101
13432: PUSH
13433: LD_INT 102
13435: PUSH
13436: LD_INT 103
13438: PUSH
13439: LD_INT 104
13441: PUSH
13442: LD_INT 105
13444: PUSH
13445: LD_INT 106
13447: PUSH
13448: LD_INT 107
13450: PUSH
13451: LD_INT 108
13453: PUSH
13454: LD_INT 109
13456: PUSH
13457: LD_INT 110
13459: PUSH
13460: LD_INT 111
13462: PUSH
13463: LD_INT 112
13465: PUSH
13466: LD_INT 113
13468: PUSH
13469: LD_INT 114
13471: PUSH
13472: LD_INT 116
13474: PUSH
13475: LD_INT 117
13477: PUSH
13478: LD_INT 118
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: ST_TO_ADDR
13504: GO 14511
13506: LD_INT 15
13508: DOUBLE
13509: EQUAL
13510: IFTRUE 13514
13512: GO 13738
13514: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13515: LD_ADDR_VAR 0 2
13519: PUSH
13520: LD_INT 1
13522: PUSH
13523: LD_INT 2
13525: PUSH
13526: LD_INT 3
13528: PUSH
13529: LD_INT 4
13531: PUSH
13532: LD_INT 5
13534: PUSH
13535: LD_INT 6
13537: PUSH
13538: LD_INT 7
13540: PUSH
13541: LD_INT 8
13543: PUSH
13544: LD_INT 9
13546: PUSH
13547: LD_INT 10
13549: PUSH
13550: LD_INT 11
13552: PUSH
13553: LD_INT 12
13555: PUSH
13556: LD_INT 13
13558: PUSH
13559: LD_INT 14
13561: PUSH
13562: LD_INT 15
13564: PUSH
13565: LD_INT 16
13567: PUSH
13568: LD_INT 17
13570: PUSH
13571: LD_INT 18
13573: PUSH
13574: LD_INT 19
13576: PUSH
13577: LD_INT 20
13579: PUSH
13580: LD_INT 21
13582: PUSH
13583: LD_INT 22
13585: PUSH
13586: LD_INT 23
13588: PUSH
13589: LD_INT 24
13591: PUSH
13592: LD_INT 25
13594: PUSH
13595: LD_INT 26
13597: PUSH
13598: LD_INT 27
13600: PUSH
13601: LD_INT 28
13603: PUSH
13604: LD_INT 29
13606: PUSH
13607: LD_INT 30
13609: PUSH
13610: LD_INT 31
13612: PUSH
13613: LD_INT 32
13615: PUSH
13616: LD_INT 33
13618: PUSH
13619: LD_INT 34
13621: PUSH
13622: LD_INT 36
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 101
13664: PUSH
13665: LD_INT 102
13667: PUSH
13668: LD_INT 103
13670: PUSH
13671: LD_INT 104
13673: PUSH
13674: LD_INT 105
13676: PUSH
13677: LD_INT 106
13679: PUSH
13680: LD_INT 107
13682: PUSH
13683: LD_INT 108
13685: PUSH
13686: LD_INT 109
13688: PUSH
13689: LD_INT 110
13691: PUSH
13692: LD_INT 111
13694: PUSH
13695: LD_INT 112
13697: PUSH
13698: LD_INT 113
13700: PUSH
13701: LD_INT 114
13703: PUSH
13704: LD_INT 116
13706: PUSH
13707: LD_INT 117
13709: PUSH
13710: LD_INT 118
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: ST_TO_ADDR
13736: GO 14511
13738: LD_INT 16
13740: DOUBLE
13741: EQUAL
13742: IFTRUE 13746
13744: GO 13882
13746: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13747: LD_ADDR_VAR 0 2
13751: PUSH
13752: LD_INT 2
13754: PUSH
13755: LD_INT 4
13757: PUSH
13758: LD_INT 5
13760: PUSH
13761: LD_INT 7
13763: PUSH
13764: LD_INT 11
13766: PUSH
13767: LD_INT 12
13769: PUSH
13770: LD_INT 15
13772: PUSH
13773: LD_INT 16
13775: PUSH
13776: LD_INT 20
13778: PUSH
13779: LD_INT 21
13781: PUSH
13782: LD_INT 22
13784: PUSH
13785: LD_INT 23
13787: PUSH
13788: LD_INT 25
13790: PUSH
13791: LD_INT 26
13793: PUSH
13794: LD_INT 30
13796: PUSH
13797: LD_INT 31
13799: PUSH
13800: LD_INT 32
13802: PUSH
13803: LD_INT 33
13805: PUSH
13806: LD_INT 34
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 101
13832: PUSH
13833: LD_INT 102
13835: PUSH
13836: LD_INT 103
13838: PUSH
13839: LD_INT 106
13841: PUSH
13842: LD_INT 108
13844: PUSH
13845: LD_INT 112
13847: PUSH
13848: LD_INT 113
13850: PUSH
13851: LD_INT 114
13853: PUSH
13854: LD_INT 116
13856: PUSH
13857: LD_INT 117
13859: PUSH
13860: LD_INT 118
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: ST_TO_ADDR
13880: GO 14511
13882: LD_INT 17
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 14114
13890: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13891: LD_ADDR_VAR 0 2
13895: PUSH
13896: LD_INT 1
13898: PUSH
13899: LD_INT 2
13901: PUSH
13902: LD_INT 3
13904: PUSH
13905: LD_INT 4
13907: PUSH
13908: LD_INT 5
13910: PUSH
13911: LD_INT 6
13913: PUSH
13914: LD_INT 7
13916: PUSH
13917: LD_INT 8
13919: PUSH
13920: LD_INT 9
13922: PUSH
13923: LD_INT 10
13925: PUSH
13926: LD_INT 11
13928: PUSH
13929: LD_INT 12
13931: PUSH
13932: LD_INT 13
13934: PUSH
13935: LD_INT 14
13937: PUSH
13938: LD_INT 15
13940: PUSH
13941: LD_INT 16
13943: PUSH
13944: LD_INT 17
13946: PUSH
13947: LD_INT 18
13949: PUSH
13950: LD_INT 19
13952: PUSH
13953: LD_INT 20
13955: PUSH
13956: LD_INT 21
13958: PUSH
13959: LD_INT 22
13961: PUSH
13962: LD_INT 23
13964: PUSH
13965: LD_INT 24
13967: PUSH
13968: LD_INT 25
13970: PUSH
13971: LD_INT 26
13973: PUSH
13974: LD_INT 27
13976: PUSH
13977: LD_INT 28
13979: PUSH
13980: LD_INT 29
13982: PUSH
13983: LD_INT 30
13985: PUSH
13986: LD_INT 31
13988: PUSH
13989: LD_INT 32
13991: PUSH
13992: LD_INT 33
13994: PUSH
13995: LD_INT 34
13997: PUSH
13998: LD_INT 36
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: PUSH
14038: LD_INT 101
14040: PUSH
14041: LD_INT 102
14043: PUSH
14044: LD_INT 103
14046: PUSH
14047: LD_INT 104
14049: PUSH
14050: LD_INT 105
14052: PUSH
14053: LD_INT 106
14055: PUSH
14056: LD_INT 107
14058: PUSH
14059: LD_INT 108
14061: PUSH
14062: LD_INT 109
14064: PUSH
14065: LD_INT 110
14067: PUSH
14068: LD_INT 111
14070: PUSH
14071: LD_INT 112
14073: PUSH
14074: LD_INT 113
14076: PUSH
14077: LD_INT 114
14079: PUSH
14080: LD_INT 116
14082: PUSH
14083: LD_INT 117
14085: PUSH
14086: LD_INT 118
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: ST_TO_ADDR
14112: GO 14511
14114: LD_INT 18
14116: DOUBLE
14117: EQUAL
14118: IFTRUE 14122
14120: GO 14270
14122: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14123: LD_ADDR_VAR 0 2
14127: PUSH
14128: LD_INT 2
14130: PUSH
14131: LD_INT 4
14133: PUSH
14134: LD_INT 5
14136: PUSH
14137: LD_INT 7
14139: PUSH
14140: LD_INT 11
14142: PUSH
14143: LD_INT 12
14145: PUSH
14146: LD_INT 15
14148: PUSH
14149: LD_INT 16
14151: PUSH
14152: LD_INT 20
14154: PUSH
14155: LD_INT 21
14157: PUSH
14158: LD_INT 22
14160: PUSH
14161: LD_INT 23
14163: PUSH
14164: LD_INT 25
14166: PUSH
14167: LD_INT 26
14169: PUSH
14170: LD_INT 30
14172: PUSH
14173: LD_INT 31
14175: PUSH
14176: LD_INT 32
14178: PUSH
14179: LD_INT 33
14181: PUSH
14182: LD_INT 34
14184: PUSH
14185: LD_INT 35
14187: PUSH
14188: LD_INT 36
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 101
14216: PUSH
14217: LD_INT 102
14219: PUSH
14220: LD_INT 103
14222: PUSH
14223: LD_INT 106
14225: PUSH
14226: LD_INT 108
14228: PUSH
14229: LD_INT 112
14231: PUSH
14232: LD_INT 113
14234: PUSH
14235: LD_INT 114
14237: PUSH
14238: LD_INT 115
14240: PUSH
14241: LD_INT 116
14243: PUSH
14244: LD_INT 117
14246: PUSH
14247: LD_INT 118
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: ST_TO_ADDR
14268: GO 14511
14270: LD_INT 19
14272: DOUBLE
14273: EQUAL
14274: IFTRUE 14278
14276: GO 14510
14278: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14279: LD_ADDR_VAR 0 2
14283: PUSH
14284: LD_INT 1
14286: PUSH
14287: LD_INT 2
14289: PUSH
14290: LD_INT 3
14292: PUSH
14293: LD_INT 4
14295: PUSH
14296: LD_INT 5
14298: PUSH
14299: LD_INT 6
14301: PUSH
14302: LD_INT 7
14304: PUSH
14305: LD_INT 8
14307: PUSH
14308: LD_INT 9
14310: PUSH
14311: LD_INT 10
14313: PUSH
14314: LD_INT 11
14316: PUSH
14317: LD_INT 12
14319: PUSH
14320: LD_INT 13
14322: PUSH
14323: LD_INT 14
14325: PUSH
14326: LD_INT 15
14328: PUSH
14329: LD_INT 16
14331: PUSH
14332: LD_INT 17
14334: PUSH
14335: LD_INT 18
14337: PUSH
14338: LD_INT 19
14340: PUSH
14341: LD_INT 20
14343: PUSH
14344: LD_INT 21
14346: PUSH
14347: LD_INT 22
14349: PUSH
14350: LD_INT 23
14352: PUSH
14353: LD_INT 24
14355: PUSH
14356: LD_INT 25
14358: PUSH
14359: LD_INT 26
14361: PUSH
14362: LD_INT 27
14364: PUSH
14365: LD_INT 28
14367: PUSH
14368: LD_INT 29
14370: PUSH
14371: LD_INT 30
14373: PUSH
14374: LD_INT 31
14376: PUSH
14377: LD_INT 32
14379: PUSH
14380: LD_INT 33
14382: PUSH
14383: LD_INT 34
14385: PUSH
14386: LD_INT 35
14388: PUSH
14389: LD_INT 36
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 101
14432: PUSH
14433: LD_INT 102
14435: PUSH
14436: LD_INT 103
14438: PUSH
14439: LD_INT 104
14441: PUSH
14442: LD_INT 105
14444: PUSH
14445: LD_INT 106
14447: PUSH
14448: LD_INT 107
14450: PUSH
14451: LD_INT 108
14453: PUSH
14454: LD_INT 109
14456: PUSH
14457: LD_INT 110
14459: PUSH
14460: LD_INT 111
14462: PUSH
14463: LD_INT 112
14465: PUSH
14466: LD_INT 113
14468: PUSH
14469: LD_INT 114
14471: PUSH
14472: LD_INT 115
14474: PUSH
14475: LD_INT 116
14477: PUSH
14478: LD_INT 117
14480: PUSH
14481: LD_INT 118
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: ST_TO_ADDR
14508: GO 14511
14510: POP
// end else
14511: GO 14742
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14513: LD_ADDR_VAR 0 2
14517: PUSH
14518: LD_INT 1
14520: PUSH
14521: LD_INT 2
14523: PUSH
14524: LD_INT 3
14526: PUSH
14527: LD_INT 4
14529: PUSH
14530: LD_INT 5
14532: PUSH
14533: LD_INT 6
14535: PUSH
14536: LD_INT 7
14538: PUSH
14539: LD_INT 8
14541: PUSH
14542: LD_INT 9
14544: PUSH
14545: LD_INT 10
14547: PUSH
14548: LD_INT 11
14550: PUSH
14551: LD_INT 12
14553: PUSH
14554: LD_INT 13
14556: PUSH
14557: LD_INT 14
14559: PUSH
14560: LD_INT 15
14562: PUSH
14563: LD_INT 16
14565: PUSH
14566: LD_INT 17
14568: PUSH
14569: LD_INT 18
14571: PUSH
14572: LD_INT 19
14574: PUSH
14575: LD_INT 20
14577: PUSH
14578: LD_INT 21
14580: PUSH
14581: LD_INT 22
14583: PUSH
14584: LD_INT 23
14586: PUSH
14587: LD_INT 24
14589: PUSH
14590: LD_INT 25
14592: PUSH
14593: LD_INT 26
14595: PUSH
14596: LD_INT 27
14598: PUSH
14599: LD_INT 28
14601: PUSH
14602: LD_INT 29
14604: PUSH
14605: LD_INT 30
14607: PUSH
14608: LD_INT 31
14610: PUSH
14611: LD_INT 32
14613: PUSH
14614: LD_INT 33
14616: PUSH
14617: LD_INT 34
14619: PUSH
14620: LD_INT 35
14622: PUSH
14623: LD_INT 36
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 101
14666: PUSH
14667: LD_INT 102
14669: PUSH
14670: LD_INT 103
14672: PUSH
14673: LD_INT 104
14675: PUSH
14676: LD_INT 105
14678: PUSH
14679: LD_INT 106
14681: PUSH
14682: LD_INT 107
14684: PUSH
14685: LD_INT 108
14687: PUSH
14688: LD_INT 109
14690: PUSH
14691: LD_INT 110
14693: PUSH
14694: LD_INT 111
14696: PUSH
14697: LD_INT 112
14699: PUSH
14700: LD_INT 113
14702: PUSH
14703: LD_INT 114
14705: PUSH
14706: LD_INT 115
14708: PUSH
14709: LD_INT 116
14711: PUSH
14712: LD_INT 117
14714: PUSH
14715: LD_INT 118
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: ST_TO_ADDR
// if result then
14742: LD_VAR 0 2
14746: IFFALSE 15532
// begin normal :=  ;
14748: LD_ADDR_VAR 0 5
14752: PUSH
14753: LD_STRING 
14755: ST_TO_ADDR
// hardcore :=  ;
14756: LD_ADDR_VAR 0 6
14760: PUSH
14761: LD_STRING 
14763: ST_TO_ADDR
// active :=  ;
14764: LD_ADDR_VAR 0 7
14768: PUSH
14769: LD_STRING 
14771: ST_TO_ADDR
// for i = 1 to normalCounter do
14772: LD_ADDR_VAR 0 8
14776: PUSH
14777: DOUBLE
14778: LD_INT 1
14780: DEC
14781: ST_TO_ADDR
14782: LD_EXP 27
14786: PUSH
14787: FOR_TO
14788: IFFALSE 14889
// begin tmp := 0 ;
14790: LD_ADDR_VAR 0 3
14794: PUSH
14795: LD_STRING 0
14797: ST_TO_ADDR
// if result [ 1 ] then
14798: LD_VAR 0 2
14802: PUSH
14803: LD_INT 1
14805: ARRAY
14806: IFFALSE 14871
// if result [ 1 ] [ 1 ] = i then
14808: LD_VAR 0 2
14812: PUSH
14813: LD_INT 1
14815: ARRAY
14816: PUSH
14817: LD_INT 1
14819: ARRAY
14820: PUSH
14821: LD_VAR 0 8
14825: EQUAL
14826: IFFALSE 14871
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14828: LD_ADDR_VAR 0 2
14832: PUSH
14833: LD_VAR 0 2
14837: PPUSH
14838: LD_INT 1
14840: PPUSH
14841: LD_VAR 0 2
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PPUSH
14850: LD_INT 1
14852: PPUSH
14853: CALL_OW 3
14857: PPUSH
14858: CALL_OW 1
14862: ST_TO_ADDR
// tmp := 1 ;
14863: LD_ADDR_VAR 0 3
14867: PUSH
14868: LD_STRING 1
14870: ST_TO_ADDR
// end ; normal := normal & tmp ;
14871: LD_ADDR_VAR 0 5
14875: PUSH
14876: LD_VAR 0 5
14880: PUSH
14881: LD_VAR 0 3
14885: STR
14886: ST_TO_ADDR
// end ;
14887: GO 14787
14889: POP
14890: POP
// for i = 1 to hardcoreCounter do
14891: LD_ADDR_VAR 0 8
14895: PUSH
14896: DOUBLE
14897: LD_INT 1
14899: DEC
14900: ST_TO_ADDR
14901: LD_EXP 28
14905: PUSH
14906: FOR_TO
14907: IFFALSE 15012
// begin tmp := 0 ;
14909: LD_ADDR_VAR 0 3
14913: PUSH
14914: LD_STRING 0
14916: ST_TO_ADDR
// if result [ 2 ] then
14917: LD_VAR 0 2
14921: PUSH
14922: LD_INT 2
14924: ARRAY
14925: IFFALSE 14994
// if result [ 2 ] [ 1 ] = 100 + i then
14927: LD_VAR 0 2
14931: PUSH
14932: LD_INT 2
14934: ARRAY
14935: PUSH
14936: LD_INT 1
14938: ARRAY
14939: PUSH
14940: LD_INT 100
14942: PUSH
14943: LD_VAR 0 8
14947: PLUS
14948: EQUAL
14949: IFFALSE 14994
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14951: LD_ADDR_VAR 0 2
14955: PUSH
14956: LD_VAR 0 2
14960: PPUSH
14961: LD_INT 2
14963: PPUSH
14964: LD_VAR 0 2
14968: PUSH
14969: LD_INT 2
14971: ARRAY
14972: PPUSH
14973: LD_INT 1
14975: PPUSH
14976: CALL_OW 3
14980: PPUSH
14981: CALL_OW 1
14985: ST_TO_ADDR
// tmp := 1 ;
14986: LD_ADDR_VAR 0 3
14990: PUSH
14991: LD_STRING 1
14993: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14994: LD_ADDR_VAR 0 6
14998: PUSH
14999: LD_VAR 0 6
15003: PUSH
15004: LD_VAR 0 3
15008: STR
15009: ST_TO_ADDR
// end ;
15010: GO 14906
15012: POP
15013: POP
// if isGameLoad then
15014: LD_VAR 0 1
15018: IFFALSE 15493
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15020: LD_ADDR_VAR 0 4
15024: PUSH
15025: LD_EXP 31
15029: PUSH
15030: LD_EXP 30
15034: PUSH
15035: LD_EXP 32
15039: PUSH
15040: LD_EXP 29
15044: PUSH
15045: LD_EXP 33
15049: PUSH
15050: LD_EXP 34
15054: PUSH
15055: LD_EXP 35
15059: PUSH
15060: LD_EXP 36
15064: PUSH
15065: LD_EXP 37
15069: PUSH
15070: LD_EXP 38
15074: PUSH
15075: LD_EXP 39
15079: PUSH
15080: LD_EXP 40
15084: PUSH
15085: LD_EXP 41
15089: PUSH
15090: LD_EXP 42
15094: PUSH
15095: LD_EXP 50
15099: PUSH
15100: LD_EXP 51
15104: PUSH
15105: LD_EXP 52
15109: PUSH
15110: LD_EXP 53
15114: PUSH
15115: LD_EXP 55
15119: PUSH
15120: LD_EXP 56
15124: PUSH
15125: LD_EXP 57
15129: PUSH
15130: LD_EXP 60
15134: PUSH
15135: LD_EXP 62
15139: PUSH
15140: LD_EXP 63
15144: PUSH
15145: LD_EXP 64
15149: PUSH
15150: LD_EXP 66
15154: PUSH
15155: LD_EXP 67
15159: PUSH
15160: LD_EXP 70
15164: PUSH
15165: LD_EXP 71
15169: PUSH
15170: LD_EXP 72
15174: PUSH
15175: LD_EXP 73
15179: PUSH
15180: LD_EXP 74
15184: PUSH
15185: LD_EXP 75
15189: PUSH
15190: LD_EXP 76
15194: PUSH
15195: LD_EXP 77
15199: PUSH
15200: LD_EXP 78
15204: PUSH
15205: LD_EXP 43
15209: PUSH
15210: LD_EXP 44
15214: PUSH
15215: LD_EXP 47
15219: PUSH
15220: LD_EXP 48
15224: PUSH
15225: LD_EXP 49
15229: PUSH
15230: LD_EXP 45
15234: PUSH
15235: LD_EXP 46
15239: PUSH
15240: LD_EXP 54
15244: PUSH
15245: LD_EXP 58
15249: PUSH
15250: LD_EXP 59
15254: PUSH
15255: LD_EXP 61
15259: PUSH
15260: LD_EXP 65
15264: PUSH
15265: LD_EXP 68
15269: PUSH
15270: LD_EXP 69
15274: PUSH
15275: LD_EXP 79
15279: PUSH
15280: LD_EXP 80
15284: PUSH
15285: LD_EXP 81
15289: PUSH
15290: LD_EXP 82
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: ST_TO_ADDR
// tmp :=  ;
15351: LD_ADDR_VAR 0 3
15355: PUSH
15356: LD_STRING 
15358: ST_TO_ADDR
// for i = 1 to normalCounter do
15359: LD_ADDR_VAR 0 8
15363: PUSH
15364: DOUBLE
15365: LD_INT 1
15367: DEC
15368: ST_TO_ADDR
15369: LD_EXP 27
15373: PUSH
15374: FOR_TO
15375: IFFALSE 15411
// begin if flags [ i ] then
15377: LD_VAR 0 4
15381: PUSH
15382: LD_VAR 0 8
15386: ARRAY
15387: IFFALSE 15409
// tmp := tmp & i & ; ;
15389: LD_ADDR_VAR 0 3
15393: PUSH
15394: LD_VAR 0 3
15398: PUSH
15399: LD_VAR 0 8
15403: STR
15404: PUSH
15405: LD_STRING ;
15407: STR
15408: ST_TO_ADDR
// end ;
15409: GO 15374
15411: POP
15412: POP
// for i = 1 to hardcoreCounter do
15413: LD_ADDR_VAR 0 8
15417: PUSH
15418: DOUBLE
15419: LD_INT 1
15421: DEC
15422: ST_TO_ADDR
15423: LD_EXP 28
15427: PUSH
15428: FOR_TO
15429: IFFALSE 15475
// begin if flags [ normalCounter + i ] then
15431: LD_VAR 0 4
15435: PUSH
15436: LD_EXP 27
15440: PUSH
15441: LD_VAR 0 8
15445: PLUS
15446: ARRAY
15447: IFFALSE 15473
// tmp := tmp & ( 100 + i ) & ; ;
15449: LD_ADDR_VAR 0 3
15453: PUSH
15454: LD_VAR 0 3
15458: PUSH
15459: LD_INT 100
15461: PUSH
15462: LD_VAR 0 8
15466: PLUS
15467: STR
15468: PUSH
15469: LD_STRING ;
15471: STR
15472: ST_TO_ADDR
// end ;
15473: GO 15428
15475: POP
15476: POP
// if tmp then
15477: LD_VAR 0 3
15481: IFFALSE 15493
// active := tmp ;
15483: LD_ADDR_VAR 0 7
15487: PUSH
15488: LD_VAR 0 3
15492: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15493: LD_STRING getStreamItemsFromMission("
15495: PUSH
15496: LD_VAR 0 5
15500: STR
15501: PUSH
15502: LD_STRING ","
15504: STR
15505: PUSH
15506: LD_VAR 0 6
15510: STR
15511: PUSH
15512: LD_STRING ","
15514: STR
15515: PUSH
15516: LD_VAR 0 7
15520: STR
15521: PUSH
15522: LD_STRING ")
15524: STR
15525: PPUSH
15526: CALL_OW 559
// end else
15530: GO 15539
// ToLua ( getStreamItemsFromMission("","","") ) ;
15532: LD_STRING getStreamItemsFromMission("","","")
15534: PPUSH
15535: CALL_OW 559
// end ;
15539: LD_VAR 0 2
15543: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15544: LD_EXP 26
15548: PUSH
15549: LD_EXP 31
15553: AND
15554: IFFALSE 15678
15556: GO 15558
15558: DISABLE
15559: LD_INT 0
15561: PPUSH
15562: PPUSH
// begin enable ;
15563: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15564: LD_ADDR_VAR 0 2
15568: PUSH
15569: LD_INT 22
15571: PUSH
15572: LD_OWVAR 2
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 2
15583: PUSH
15584: LD_INT 34
15586: PUSH
15587: LD_INT 7
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 34
15596: PUSH
15597: LD_INT 45
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 34
15606: PUSH
15607: LD_INT 28
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 34
15616: PUSH
15617: LD_INT 47
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PPUSH
15635: CALL_OW 69
15639: ST_TO_ADDR
// if not tmp then
15640: LD_VAR 0 2
15644: NOT
15645: IFFALSE 15649
// exit ;
15647: GO 15678
// for i in tmp do
15649: LD_ADDR_VAR 0 1
15653: PUSH
15654: LD_VAR 0 2
15658: PUSH
15659: FOR_IN
15660: IFFALSE 15676
// begin SetLives ( i , 0 ) ;
15662: LD_VAR 0 1
15666: PPUSH
15667: LD_INT 0
15669: PPUSH
15670: CALL_OW 234
// end ;
15674: GO 15659
15676: POP
15677: POP
// end ;
15678: PPOPN 2
15680: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15681: LD_EXP 26
15685: PUSH
15686: LD_EXP 32
15690: AND
15691: IFFALSE 15775
15693: GO 15695
15695: DISABLE
15696: LD_INT 0
15698: PPUSH
15699: PPUSH
// begin enable ;
15700: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15701: LD_ADDR_VAR 0 2
15705: PUSH
15706: LD_INT 22
15708: PUSH
15709: LD_OWVAR 2
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 32
15720: PUSH
15721: LD_INT 3
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PPUSH
15732: CALL_OW 69
15736: ST_TO_ADDR
// if not tmp then
15737: LD_VAR 0 2
15741: NOT
15742: IFFALSE 15746
// exit ;
15744: GO 15775
// for i in tmp do
15746: LD_ADDR_VAR 0 1
15750: PUSH
15751: LD_VAR 0 2
15755: PUSH
15756: FOR_IN
15757: IFFALSE 15773
// begin SetLives ( i , 0 ) ;
15759: LD_VAR 0 1
15763: PPUSH
15764: LD_INT 0
15766: PPUSH
15767: CALL_OW 234
// end ;
15771: GO 15756
15773: POP
15774: POP
// end ;
15775: PPOPN 2
15777: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15778: LD_EXP 26
15782: PUSH
15783: LD_EXP 29
15787: AND
15788: IFFALSE 15881
15790: GO 15792
15792: DISABLE
15793: LD_INT 0
15795: PPUSH
// begin enable ;
15796: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15797: LD_ADDR_VAR 0 1
15801: PUSH
15802: LD_INT 22
15804: PUSH
15805: LD_OWVAR 2
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 2
15816: PUSH
15817: LD_INT 25
15819: PUSH
15820: LD_INT 5
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 25
15829: PUSH
15830: LD_INT 9
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 25
15839: PUSH
15840: LD_INT 8
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PPUSH
15857: CALL_OW 69
15861: PUSH
15862: FOR_IN
15863: IFFALSE 15879
// begin SetClass ( i , 1 ) ;
15865: LD_VAR 0 1
15869: PPUSH
15870: LD_INT 1
15872: PPUSH
15873: CALL_OW 336
// end ;
15877: GO 15862
15879: POP
15880: POP
// end ;
15881: PPOPN 1
15883: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15884: LD_EXP 26
15888: PUSH
15889: LD_EXP 30
15893: AND
15894: PUSH
15895: LD_OWVAR 65
15899: PUSH
15900: LD_INT 7
15902: LESS
15903: AND
15904: IFFALSE 15918
15906: GO 15908
15908: DISABLE
// begin enable ;
15909: ENABLE
// game_speed := 7 ;
15910: LD_ADDR_OWVAR 65
15914: PUSH
15915: LD_INT 7
15917: ST_TO_ADDR
// end ;
15918: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15919: LD_EXP 26
15923: PUSH
15924: LD_EXP 33
15928: AND
15929: IFFALSE 16131
15931: GO 15933
15933: DISABLE
15934: LD_INT 0
15936: PPUSH
15937: PPUSH
15938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15939: LD_ADDR_VAR 0 3
15943: PUSH
15944: LD_INT 81
15946: PUSH
15947: LD_OWVAR 2
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PUSH
15956: LD_INT 21
15958: PUSH
15959: LD_INT 1
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PPUSH
15970: CALL_OW 69
15974: ST_TO_ADDR
// if not tmp then
15975: LD_VAR 0 3
15979: NOT
15980: IFFALSE 15984
// exit ;
15982: GO 16131
// if tmp > 5 then
15984: LD_VAR 0 3
15988: PUSH
15989: LD_INT 5
15991: GREATER
15992: IFFALSE 16004
// k := 5 else
15994: LD_ADDR_VAR 0 2
15998: PUSH
15999: LD_INT 5
16001: ST_TO_ADDR
16002: GO 16014
// k := tmp ;
16004: LD_ADDR_VAR 0 2
16008: PUSH
16009: LD_VAR 0 3
16013: ST_TO_ADDR
// for i := 1 to k do
16014: LD_ADDR_VAR 0 1
16018: PUSH
16019: DOUBLE
16020: LD_INT 1
16022: DEC
16023: ST_TO_ADDR
16024: LD_VAR 0 2
16028: PUSH
16029: FOR_TO
16030: IFFALSE 16129
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16032: LD_VAR 0 3
16036: PUSH
16037: LD_VAR 0 1
16041: ARRAY
16042: PPUSH
16043: LD_VAR 0 1
16047: PUSH
16048: LD_INT 4
16050: MOD
16051: PUSH
16052: LD_INT 1
16054: PLUS
16055: PPUSH
16056: CALL_OW 259
16060: PUSH
16061: LD_INT 10
16063: LESS
16064: IFFALSE 16127
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16066: LD_VAR 0 3
16070: PUSH
16071: LD_VAR 0 1
16075: ARRAY
16076: PPUSH
16077: LD_VAR 0 1
16081: PUSH
16082: LD_INT 4
16084: MOD
16085: PUSH
16086: LD_INT 1
16088: PLUS
16089: PPUSH
16090: LD_VAR 0 3
16094: PUSH
16095: LD_VAR 0 1
16099: ARRAY
16100: PPUSH
16101: LD_VAR 0 1
16105: PUSH
16106: LD_INT 4
16108: MOD
16109: PUSH
16110: LD_INT 1
16112: PLUS
16113: PPUSH
16114: CALL_OW 259
16118: PUSH
16119: LD_INT 1
16121: PLUS
16122: PPUSH
16123: CALL_OW 237
16127: GO 16029
16129: POP
16130: POP
// end ;
16131: PPOPN 3
16133: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16134: LD_EXP 26
16138: PUSH
16139: LD_EXP 34
16143: AND
16144: IFFALSE 16164
16146: GO 16148
16148: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16149: LD_INT 4
16151: PPUSH
16152: LD_OWVAR 2
16156: PPUSH
16157: LD_INT 0
16159: PPUSH
16160: CALL_OW 324
16164: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16165: LD_EXP 26
16169: PUSH
16170: LD_EXP 63
16174: AND
16175: IFFALSE 16195
16177: GO 16179
16179: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16180: LD_INT 19
16182: PPUSH
16183: LD_OWVAR 2
16187: PPUSH
16188: LD_INT 0
16190: PPUSH
16191: CALL_OW 324
16195: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16196: LD_EXP 26
16200: PUSH
16201: LD_EXP 35
16205: AND
16206: IFFALSE 16308
16208: GO 16210
16210: DISABLE
16211: LD_INT 0
16213: PPUSH
16214: PPUSH
// begin enable ;
16215: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16216: LD_ADDR_VAR 0 2
16220: PUSH
16221: LD_INT 22
16223: PUSH
16224: LD_OWVAR 2
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 2
16235: PUSH
16236: LD_INT 34
16238: PUSH
16239: LD_INT 11
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 34
16248: PUSH
16249: LD_INT 30
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: LIST
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PPUSH
16265: CALL_OW 69
16269: ST_TO_ADDR
// if not tmp then
16270: LD_VAR 0 2
16274: NOT
16275: IFFALSE 16279
// exit ;
16277: GO 16308
// for i in tmp do
16279: LD_ADDR_VAR 0 1
16283: PUSH
16284: LD_VAR 0 2
16288: PUSH
16289: FOR_IN
16290: IFFALSE 16306
// begin SetLives ( i , 0 ) ;
16292: LD_VAR 0 1
16296: PPUSH
16297: LD_INT 0
16299: PPUSH
16300: CALL_OW 234
// end ;
16304: GO 16289
16306: POP
16307: POP
// end ;
16308: PPOPN 2
16310: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16311: LD_EXP 26
16315: PUSH
16316: LD_EXP 36
16320: AND
16321: IFFALSE 16341
16323: GO 16325
16325: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16326: LD_INT 32
16328: PPUSH
16329: LD_OWVAR 2
16333: PPUSH
16334: LD_INT 0
16336: PPUSH
16337: CALL_OW 324
16341: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16342: LD_EXP 26
16346: PUSH
16347: LD_EXP 37
16351: AND
16352: IFFALSE 16533
16354: GO 16356
16356: DISABLE
16357: LD_INT 0
16359: PPUSH
16360: PPUSH
16361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16362: LD_ADDR_VAR 0 2
16366: PUSH
16367: LD_INT 22
16369: PUSH
16370: LD_OWVAR 2
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 33
16381: PUSH
16382: LD_INT 3
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PPUSH
16393: CALL_OW 69
16397: ST_TO_ADDR
// if not tmp then
16398: LD_VAR 0 2
16402: NOT
16403: IFFALSE 16407
// exit ;
16405: GO 16533
// side := 0 ;
16407: LD_ADDR_VAR 0 3
16411: PUSH
16412: LD_INT 0
16414: ST_TO_ADDR
// for i := 1 to 8 do
16415: LD_ADDR_VAR 0 1
16419: PUSH
16420: DOUBLE
16421: LD_INT 1
16423: DEC
16424: ST_TO_ADDR
16425: LD_INT 8
16427: PUSH
16428: FOR_TO
16429: IFFALSE 16477
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16431: LD_OWVAR 2
16435: PUSH
16436: LD_VAR 0 1
16440: NONEQUAL
16441: PUSH
16442: LD_OWVAR 2
16446: PPUSH
16447: LD_VAR 0 1
16451: PPUSH
16452: CALL_OW 81
16456: PUSH
16457: LD_INT 2
16459: EQUAL
16460: AND
16461: IFFALSE 16475
// begin side := i ;
16463: LD_ADDR_VAR 0 3
16467: PUSH
16468: LD_VAR 0 1
16472: ST_TO_ADDR
// break ;
16473: GO 16477
// end ;
16475: GO 16428
16477: POP
16478: POP
// if not side then
16479: LD_VAR 0 3
16483: NOT
16484: IFFALSE 16488
// exit ;
16486: GO 16533
// for i := 1 to tmp do
16488: LD_ADDR_VAR 0 1
16492: PUSH
16493: DOUBLE
16494: LD_INT 1
16496: DEC
16497: ST_TO_ADDR
16498: LD_VAR 0 2
16502: PUSH
16503: FOR_TO
16504: IFFALSE 16531
// if Prob ( 60 ) then
16506: LD_INT 60
16508: PPUSH
16509: CALL_OW 13
16513: IFFALSE 16529
// SetSide ( i , side ) ;
16515: LD_VAR 0 1
16519: PPUSH
16520: LD_VAR 0 3
16524: PPUSH
16525: CALL_OW 235
16529: GO 16503
16531: POP
16532: POP
// end ;
16533: PPOPN 3
16535: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16536: LD_EXP 26
16540: PUSH
16541: LD_EXP 39
16545: AND
16546: IFFALSE 16665
16548: GO 16550
16550: DISABLE
16551: LD_INT 0
16553: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16554: LD_ADDR_VAR 0 1
16558: PUSH
16559: LD_INT 22
16561: PUSH
16562: LD_OWVAR 2
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 21
16573: PUSH
16574: LD_INT 1
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 3
16583: PUSH
16584: LD_INT 23
16586: PUSH
16587: LD_INT 0
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: PPUSH
16603: CALL_OW 69
16607: PUSH
16608: FOR_IN
16609: IFFALSE 16663
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16611: LD_VAR 0 1
16615: PPUSH
16616: CALL_OW 257
16620: PUSH
16621: LD_INT 1
16623: PUSH
16624: LD_INT 2
16626: PUSH
16627: LD_INT 3
16629: PUSH
16630: LD_INT 4
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: IN
16639: IFFALSE 16661
// SetClass ( un , rand ( 1 , 4 ) ) ;
16641: LD_VAR 0 1
16645: PPUSH
16646: LD_INT 1
16648: PPUSH
16649: LD_INT 4
16651: PPUSH
16652: CALL_OW 12
16656: PPUSH
16657: CALL_OW 336
16661: GO 16608
16663: POP
16664: POP
// end ;
16665: PPOPN 1
16667: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16668: LD_EXP 26
16672: PUSH
16673: LD_EXP 38
16677: AND
16678: IFFALSE 16757
16680: GO 16682
16682: DISABLE
16683: LD_INT 0
16685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16686: LD_ADDR_VAR 0 1
16690: PUSH
16691: LD_INT 22
16693: PUSH
16694: LD_OWVAR 2
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: LD_INT 21
16705: PUSH
16706: LD_INT 3
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PPUSH
16717: CALL_OW 69
16721: ST_TO_ADDR
// if not tmp then
16722: LD_VAR 0 1
16726: NOT
16727: IFFALSE 16731
// exit ;
16729: GO 16757
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16731: LD_VAR 0 1
16735: PUSH
16736: LD_INT 1
16738: PPUSH
16739: LD_VAR 0 1
16743: PPUSH
16744: CALL_OW 12
16748: ARRAY
16749: PPUSH
16750: LD_INT 100
16752: PPUSH
16753: CALL_OW 234
// end ;
16757: PPOPN 1
16759: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16760: LD_EXP 26
16764: PUSH
16765: LD_EXP 40
16769: AND
16770: IFFALSE 16868
16772: GO 16774
16774: DISABLE
16775: LD_INT 0
16777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16778: LD_ADDR_VAR 0 1
16782: PUSH
16783: LD_INT 22
16785: PUSH
16786: LD_OWVAR 2
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 21
16797: PUSH
16798: LD_INT 1
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PPUSH
16809: CALL_OW 69
16813: ST_TO_ADDR
// if not tmp then
16814: LD_VAR 0 1
16818: NOT
16819: IFFALSE 16823
// exit ;
16821: GO 16868
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16823: LD_VAR 0 1
16827: PUSH
16828: LD_INT 1
16830: PPUSH
16831: LD_VAR 0 1
16835: PPUSH
16836: CALL_OW 12
16840: ARRAY
16841: PPUSH
16842: LD_INT 1
16844: PPUSH
16845: LD_INT 4
16847: PPUSH
16848: CALL_OW 12
16852: PPUSH
16853: LD_INT 3000
16855: PPUSH
16856: LD_INT 9000
16858: PPUSH
16859: CALL_OW 12
16863: PPUSH
16864: CALL_OW 492
// end ;
16868: PPOPN 1
16870: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16871: LD_EXP 26
16875: PUSH
16876: LD_EXP 41
16880: AND
16881: IFFALSE 16901
16883: GO 16885
16885: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16886: LD_INT 1
16888: PPUSH
16889: LD_OWVAR 2
16893: PPUSH
16894: LD_INT 0
16896: PPUSH
16897: CALL_OW 324
16901: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16902: LD_EXP 26
16906: PUSH
16907: LD_EXP 42
16911: AND
16912: IFFALSE 16995
16914: GO 16916
16916: DISABLE
16917: LD_INT 0
16919: PPUSH
16920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16921: LD_ADDR_VAR 0 2
16925: PUSH
16926: LD_INT 22
16928: PUSH
16929: LD_OWVAR 2
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 21
16940: PUSH
16941: LD_INT 3
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PPUSH
16952: CALL_OW 69
16956: ST_TO_ADDR
// if not tmp then
16957: LD_VAR 0 2
16961: NOT
16962: IFFALSE 16966
// exit ;
16964: GO 16995
// for i in tmp do
16966: LD_ADDR_VAR 0 1
16970: PUSH
16971: LD_VAR 0 2
16975: PUSH
16976: FOR_IN
16977: IFFALSE 16993
// SetBLevel ( i , 10 ) ;
16979: LD_VAR 0 1
16983: PPUSH
16984: LD_INT 10
16986: PPUSH
16987: CALL_OW 241
16991: GO 16976
16993: POP
16994: POP
// end ;
16995: PPOPN 2
16997: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16998: LD_EXP 26
17002: PUSH
17003: LD_EXP 43
17007: AND
17008: IFFALSE 17119
17010: GO 17012
17012: DISABLE
17013: LD_INT 0
17015: PPUSH
17016: PPUSH
17017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17018: LD_ADDR_VAR 0 3
17022: PUSH
17023: LD_INT 22
17025: PUSH
17026: LD_OWVAR 2
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: LD_INT 25
17037: PUSH
17038: LD_INT 1
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PPUSH
17049: CALL_OW 69
17053: ST_TO_ADDR
// if not tmp then
17054: LD_VAR 0 3
17058: NOT
17059: IFFALSE 17063
// exit ;
17061: GO 17119
// un := tmp [ rand ( 1 , tmp ) ] ;
17063: LD_ADDR_VAR 0 2
17067: PUSH
17068: LD_VAR 0 3
17072: PUSH
17073: LD_INT 1
17075: PPUSH
17076: LD_VAR 0 3
17080: PPUSH
17081: CALL_OW 12
17085: ARRAY
17086: ST_TO_ADDR
// if Crawls ( un ) then
17087: LD_VAR 0 2
17091: PPUSH
17092: CALL_OW 318
17096: IFFALSE 17107
// ComWalk ( un ) ;
17098: LD_VAR 0 2
17102: PPUSH
17103: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17107: LD_VAR 0 2
17111: PPUSH
17112: LD_INT 5
17114: PPUSH
17115: CALL_OW 336
// end ;
17119: PPOPN 3
17121: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17122: LD_EXP 26
17126: PUSH
17127: LD_EXP 44
17131: AND
17132: PUSH
17133: LD_OWVAR 67
17137: PUSH
17138: LD_INT 4
17140: LESS
17141: AND
17142: IFFALSE 17161
17144: GO 17146
17146: DISABLE
// begin Difficulty := Difficulty + 1 ;
17147: LD_ADDR_OWVAR 67
17151: PUSH
17152: LD_OWVAR 67
17156: PUSH
17157: LD_INT 1
17159: PLUS
17160: ST_TO_ADDR
// end ;
17161: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17162: LD_EXP 26
17166: PUSH
17167: LD_EXP 45
17171: AND
17172: IFFALSE 17275
17174: GO 17176
17176: DISABLE
17177: LD_INT 0
17179: PPUSH
// begin for i := 1 to 5 do
17180: LD_ADDR_VAR 0 1
17184: PUSH
17185: DOUBLE
17186: LD_INT 1
17188: DEC
17189: ST_TO_ADDR
17190: LD_INT 5
17192: PUSH
17193: FOR_TO
17194: IFFALSE 17273
// begin uc_nation := nation_nature ;
17196: LD_ADDR_OWVAR 21
17200: PUSH
17201: LD_INT 0
17203: ST_TO_ADDR
// uc_side := 0 ;
17204: LD_ADDR_OWVAR 20
17208: PUSH
17209: LD_INT 0
17211: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17212: LD_ADDR_OWVAR 29
17216: PUSH
17217: LD_INT 12
17219: PUSH
17220: LD_INT 12
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: ST_TO_ADDR
// hc_agressivity := 20 ;
17227: LD_ADDR_OWVAR 35
17231: PUSH
17232: LD_INT 20
17234: ST_TO_ADDR
// hc_class := class_tiger ;
17235: LD_ADDR_OWVAR 28
17239: PUSH
17240: LD_INT 14
17242: ST_TO_ADDR
// hc_gallery :=  ;
17243: LD_ADDR_OWVAR 33
17247: PUSH
17248: LD_STRING 
17250: ST_TO_ADDR
// hc_name :=  ;
17251: LD_ADDR_OWVAR 26
17255: PUSH
17256: LD_STRING 
17258: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17259: CALL_OW 44
17263: PPUSH
17264: LD_INT 0
17266: PPUSH
17267: CALL_OW 51
// end ;
17271: GO 17193
17273: POP
17274: POP
// end ;
17275: PPOPN 1
17277: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17278: LD_EXP 26
17282: PUSH
17283: LD_EXP 46
17287: AND
17288: IFFALSE 17297
17290: GO 17292
17292: DISABLE
// StreamSibBomb ;
17293: CALL 17298 0 0
17297: END
// export function StreamSibBomb ; var i , x , y ; begin
17298: LD_INT 0
17300: PPUSH
17301: PPUSH
17302: PPUSH
17303: PPUSH
// result := false ;
17304: LD_ADDR_VAR 0 1
17308: PUSH
17309: LD_INT 0
17311: ST_TO_ADDR
// for i := 1 to 16 do
17312: LD_ADDR_VAR 0 2
17316: PUSH
17317: DOUBLE
17318: LD_INT 1
17320: DEC
17321: ST_TO_ADDR
17322: LD_INT 16
17324: PUSH
17325: FOR_TO
17326: IFFALSE 17525
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17328: LD_ADDR_VAR 0 3
17332: PUSH
17333: LD_INT 10
17335: PUSH
17336: LD_INT 20
17338: PUSH
17339: LD_INT 30
17341: PUSH
17342: LD_INT 40
17344: PUSH
17345: LD_INT 50
17347: PUSH
17348: LD_INT 60
17350: PUSH
17351: LD_INT 70
17353: PUSH
17354: LD_INT 80
17356: PUSH
17357: LD_INT 90
17359: PUSH
17360: LD_INT 100
17362: PUSH
17363: LD_INT 110
17365: PUSH
17366: LD_INT 120
17368: PUSH
17369: LD_INT 130
17371: PUSH
17372: LD_INT 140
17374: PUSH
17375: LD_INT 150
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 1
17397: PPUSH
17398: LD_INT 15
17400: PPUSH
17401: CALL_OW 12
17405: ARRAY
17406: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17407: LD_ADDR_VAR 0 4
17411: PUSH
17412: LD_INT 10
17414: PUSH
17415: LD_INT 20
17417: PUSH
17418: LD_INT 30
17420: PUSH
17421: LD_INT 40
17423: PUSH
17424: LD_INT 50
17426: PUSH
17427: LD_INT 60
17429: PUSH
17430: LD_INT 70
17432: PUSH
17433: LD_INT 80
17435: PUSH
17436: LD_INT 90
17438: PUSH
17439: LD_INT 100
17441: PUSH
17442: LD_INT 110
17444: PUSH
17445: LD_INT 120
17447: PUSH
17448: LD_INT 130
17450: PUSH
17451: LD_INT 140
17453: PUSH
17454: LD_INT 150
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 1
17476: PPUSH
17477: LD_INT 15
17479: PPUSH
17480: CALL_OW 12
17484: ARRAY
17485: ST_TO_ADDR
// if ValidHex ( x , y ) then
17486: LD_VAR 0 3
17490: PPUSH
17491: LD_VAR 0 4
17495: PPUSH
17496: CALL_OW 488
17500: IFFALSE 17523
// begin result := [ x , y ] ;
17502: LD_ADDR_VAR 0 1
17506: PUSH
17507: LD_VAR 0 3
17511: PUSH
17512: LD_VAR 0 4
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: ST_TO_ADDR
// break ;
17521: GO 17525
// end ; end ;
17523: GO 17325
17525: POP
17526: POP
// if result then
17527: LD_VAR 0 1
17531: IFFALSE 17591
// begin ToLua ( playSibBomb() ) ;
17533: LD_STRING playSibBomb()
17535: PPUSH
17536: CALL_OW 559
// wait ( 0 0$14 ) ;
17540: LD_INT 490
17542: PPUSH
17543: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17547: LD_VAR 0 1
17551: PUSH
17552: LD_INT 1
17554: ARRAY
17555: PPUSH
17556: LD_VAR 0 1
17560: PUSH
17561: LD_INT 2
17563: ARRAY
17564: PPUSH
17565: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17569: LD_VAR 0 1
17573: PUSH
17574: LD_INT 1
17576: ARRAY
17577: PPUSH
17578: LD_VAR 0 1
17582: PUSH
17583: LD_INT 2
17585: ARRAY
17586: PPUSH
17587: CALL_OW 429
// end ; end ;
17591: LD_VAR 0 1
17595: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17596: LD_EXP 26
17600: PUSH
17601: LD_EXP 48
17605: AND
17606: IFFALSE 17618
17608: GO 17610
17610: DISABLE
// YouLost (  ) ;
17611: LD_STRING 
17613: PPUSH
17614: CALL_OW 104
17618: END
// every 0 0$1 trigger StreamModeActive and sFog do
17619: LD_EXP 26
17623: PUSH
17624: LD_EXP 47
17628: AND
17629: IFFALSE 17643
17631: GO 17633
17633: DISABLE
// FogOff ( your_side ) ;
17634: LD_OWVAR 2
17638: PPUSH
17639: CALL_OW 344
17643: END
// every 0 0$1 trigger StreamModeActive and sSun do
17644: LD_EXP 26
17648: PUSH
17649: LD_EXP 49
17653: AND
17654: IFFALSE 17682
17656: GO 17658
17658: DISABLE
// begin solar_recharge_percent := 0 ;
17659: LD_ADDR_OWVAR 79
17663: PUSH
17664: LD_INT 0
17666: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17667: LD_INT 10500
17669: PPUSH
17670: CALL_OW 67
// solar_recharge_percent := 100 ;
17674: LD_ADDR_OWVAR 79
17678: PUSH
17679: LD_INT 100
17681: ST_TO_ADDR
// end ;
17682: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17683: LD_EXP 26
17687: PUSH
17688: LD_EXP 50
17692: AND
17693: IFFALSE 17932
17695: GO 17697
17697: DISABLE
17698: LD_INT 0
17700: PPUSH
17701: PPUSH
17702: PPUSH
// begin tmp := [ ] ;
17703: LD_ADDR_VAR 0 3
17707: PUSH
17708: EMPTY
17709: ST_TO_ADDR
// for i := 1 to 6 do
17710: LD_ADDR_VAR 0 1
17714: PUSH
17715: DOUBLE
17716: LD_INT 1
17718: DEC
17719: ST_TO_ADDR
17720: LD_INT 6
17722: PUSH
17723: FOR_TO
17724: IFFALSE 17829
// begin uc_nation := nation_nature ;
17726: LD_ADDR_OWVAR 21
17730: PUSH
17731: LD_INT 0
17733: ST_TO_ADDR
// uc_side := 0 ;
17734: LD_ADDR_OWVAR 20
17738: PUSH
17739: LD_INT 0
17741: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17742: LD_ADDR_OWVAR 29
17746: PUSH
17747: LD_INT 12
17749: PUSH
17750: LD_INT 12
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: ST_TO_ADDR
// hc_agressivity := 20 ;
17757: LD_ADDR_OWVAR 35
17761: PUSH
17762: LD_INT 20
17764: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17765: LD_ADDR_OWVAR 28
17769: PUSH
17770: LD_INT 17
17772: ST_TO_ADDR
// hc_gallery :=  ;
17773: LD_ADDR_OWVAR 33
17777: PUSH
17778: LD_STRING 
17780: ST_TO_ADDR
// hc_name :=  ;
17781: LD_ADDR_OWVAR 26
17785: PUSH
17786: LD_STRING 
17788: ST_TO_ADDR
// un := CreateHuman ;
17789: LD_ADDR_VAR 0 2
17793: PUSH
17794: CALL_OW 44
17798: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17799: LD_VAR 0 2
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: CALL_OW 51
// tmp := tmp ^ un ;
17811: LD_ADDR_VAR 0 3
17815: PUSH
17816: LD_VAR 0 3
17820: PUSH
17821: LD_VAR 0 2
17825: ADD
17826: ST_TO_ADDR
// end ;
17827: GO 17723
17829: POP
17830: POP
// repeat wait ( 0 0$1 ) ;
17831: LD_INT 35
17833: PPUSH
17834: CALL_OW 67
// for un in tmp do
17838: LD_ADDR_VAR 0 2
17842: PUSH
17843: LD_VAR 0 3
17847: PUSH
17848: FOR_IN
17849: IFFALSE 17923
// begin if IsDead ( un ) then
17851: LD_VAR 0 2
17855: PPUSH
17856: CALL_OW 301
17860: IFFALSE 17880
// begin tmp := tmp diff un ;
17862: LD_ADDR_VAR 0 3
17866: PUSH
17867: LD_VAR 0 3
17871: PUSH
17872: LD_VAR 0 2
17876: DIFF
17877: ST_TO_ADDR
// continue ;
17878: GO 17848
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17880: LD_VAR 0 2
17884: PPUSH
17885: LD_INT 3
17887: PUSH
17888: LD_INT 22
17890: PUSH
17891: LD_INT 0
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PPUSH
17902: CALL_OW 69
17906: PPUSH
17907: LD_VAR 0 2
17911: PPUSH
17912: CALL_OW 74
17916: PPUSH
17917: CALL_OW 115
// end ;
17921: GO 17848
17923: POP
17924: POP
// until not tmp ;
17925: LD_VAR 0 3
17929: NOT
17930: IFFALSE 17831
// end ;
17932: PPOPN 3
17934: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17935: LD_EXP 26
17939: PUSH
17940: LD_EXP 51
17944: AND
17945: IFFALSE 17999
17947: GO 17949
17949: DISABLE
// begin ToLua ( displayTroll(); ) ;
17950: LD_STRING displayTroll();
17952: PPUSH
17953: CALL_OW 559
// wait ( 3 3$00 ) ;
17957: LD_INT 6300
17959: PPUSH
17960: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17964: LD_STRING hideTroll();
17966: PPUSH
17967: CALL_OW 559
// wait ( 1 1$00 ) ;
17971: LD_INT 2100
17973: PPUSH
17974: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17978: LD_STRING displayTroll();
17980: PPUSH
17981: CALL_OW 559
// wait ( 1 1$00 ) ;
17985: LD_INT 2100
17987: PPUSH
17988: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17992: LD_STRING hideTroll();
17994: PPUSH
17995: CALL_OW 559
// end ;
17999: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18000: LD_EXP 26
18004: PUSH
18005: LD_EXP 52
18009: AND
18010: IFFALSE 18073
18012: GO 18014
18014: DISABLE
18015: LD_INT 0
18017: PPUSH
// begin p := 0 ;
18018: LD_ADDR_VAR 0 1
18022: PUSH
18023: LD_INT 0
18025: ST_TO_ADDR
// repeat game_speed := 1 ;
18026: LD_ADDR_OWVAR 65
18030: PUSH
18031: LD_INT 1
18033: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18034: LD_INT 35
18036: PPUSH
18037: CALL_OW 67
// p := p + 1 ;
18041: LD_ADDR_VAR 0 1
18045: PUSH
18046: LD_VAR 0 1
18050: PUSH
18051: LD_INT 1
18053: PLUS
18054: ST_TO_ADDR
// until p >= 60 ;
18055: LD_VAR 0 1
18059: PUSH
18060: LD_INT 60
18062: GREATEREQUAL
18063: IFFALSE 18026
// game_speed := 4 ;
18065: LD_ADDR_OWVAR 65
18069: PUSH
18070: LD_INT 4
18072: ST_TO_ADDR
// end ;
18073: PPOPN 1
18075: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18076: LD_EXP 26
18080: PUSH
18081: LD_EXP 53
18085: AND
18086: IFFALSE 18232
18088: GO 18090
18090: DISABLE
18091: LD_INT 0
18093: PPUSH
18094: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18095: LD_ADDR_VAR 0 1
18099: PUSH
18100: LD_INT 22
18102: PUSH
18103: LD_OWVAR 2
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 2
18114: PUSH
18115: LD_INT 30
18117: PUSH
18118: LD_INT 0
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 30
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: LIST
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PPUSH
18144: CALL_OW 69
18148: ST_TO_ADDR
// if not depot then
18149: LD_VAR 0 1
18153: NOT
18154: IFFALSE 18158
// exit ;
18156: GO 18232
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18158: LD_ADDR_VAR 0 2
18162: PUSH
18163: LD_VAR 0 1
18167: PUSH
18168: LD_INT 1
18170: PPUSH
18171: LD_VAR 0 1
18175: PPUSH
18176: CALL_OW 12
18180: ARRAY
18181: PPUSH
18182: CALL_OW 274
18186: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18187: LD_VAR 0 2
18191: PPUSH
18192: LD_INT 1
18194: PPUSH
18195: LD_INT 0
18197: PPUSH
18198: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18202: LD_VAR 0 2
18206: PPUSH
18207: LD_INT 2
18209: PPUSH
18210: LD_INT 0
18212: PPUSH
18213: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18217: LD_VAR 0 2
18221: PPUSH
18222: LD_INT 3
18224: PPUSH
18225: LD_INT 0
18227: PPUSH
18228: CALL_OW 277
// end ;
18232: PPOPN 2
18234: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18235: LD_EXP 26
18239: PUSH
18240: LD_EXP 54
18244: AND
18245: IFFALSE 18342
18247: GO 18249
18249: DISABLE
18250: LD_INT 0
18252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18253: LD_ADDR_VAR 0 1
18257: PUSH
18258: LD_INT 22
18260: PUSH
18261: LD_OWVAR 2
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 21
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 3
18282: PUSH
18283: LD_INT 23
18285: PUSH
18286: LD_INT 0
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: LIST
18301: PPUSH
18302: CALL_OW 69
18306: ST_TO_ADDR
// if not tmp then
18307: LD_VAR 0 1
18311: NOT
18312: IFFALSE 18316
// exit ;
18314: GO 18342
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18316: LD_VAR 0 1
18320: PUSH
18321: LD_INT 1
18323: PPUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 12
18333: ARRAY
18334: PPUSH
18335: LD_INT 200
18337: PPUSH
18338: CALL_OW 234
// end ;
18342: PPOPN 1
18344: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18345: LD_EXP 26
18349: PUSH
18350: LD_EXP 55
18354: AND
18355: IFFALSE 18434
18357: GO 18359
18359: DISABLE
18360: LD_INT 0
18362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18363: LD_ADDR_VAR 0 1
18367: PUSH
18368: LD_INT 22
18370: PUSH
18371: LD_OWVAR 2
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 21
18382: PUSH
18383: LD_INT 2
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PPUSH
18394: CALL_OW 69
18398: ST_TO_ADDR
// if not tmp then
18399: LD_VAR 0 1
18403: NOT
18404: IFFALSE 18408
// exit ;
18406: GO 18434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18408: LD_VAR 0 1
18412: PUSH
18413: LD_INT 1
18415: PPUSH
18416: LD_VAR 0 1
18420: PPUSH
18421: CALL_OW 12
18425: ARRAY
18426: PPUSH
18427: LD_INT 60
18429: PPUSH
18430: CALL_OW 234
// end ;
18434: PPOPN 1
18436: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18437: LD_EXP 26
18441: PUSH
18442: LD_EXP 56
18446: AND
18447: IFFALSE 18546
18449: GO 18451
18451: DISABLE
18452: LD_INT 0
18454: PPUSH
18455: PPUSH
// begin enable ;
18456: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18457: LD_ADDR_VAR 0 1
18461: PUSH
18462: LD_INT 22
18464: PUSH
18465: LD_OWVAR 2
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 61
18476: PUSH
18477: EMPTY
18478: LIST
18479: PUSH
18480: LD_INT 33
18482: PUSH
18483: LD_INT 2
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: LIST
18494: PPUSH
18495: CALL_OW 69
18499: ST_TO_ADDR
// if not tmp then
18500: LD_VAR 0 1
18504: NOT
18505: IFFALSE 18509
// exit ;
18507: GO 18546
// for i in tmp do
18509: LD_ADDR_VAR 0 2
18513: PUSH
18514: LD_VAR 0 1
18518: PUSH
18519: FOR_IN
18520: IFFALSE 18544
// if IsControledBy ( i ) then
18522: LD_VAR 0 2
18526: PPUSH
18527: CALL_OW 312
18531: IFFALSE 18542
// ComUnlink ( i ) ;
18533: LD_VAR 0 2
18537: PPUSH
18538: CALL_OW 136
18542: GO 18519
18544: POP
18545: POP
// end ;
18546: PPOPN 2
18548: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18549: LD_EXP 26
18553: PUSH
18554: LD_EXP 57
18558: AND
18559: IFFALSE 18699
18561: GO 18563
18563: DISABLE
18564: LD_INT 0
18566: PPUSH
18567: PPUSH
// begin ToLua ( displayPowell(); ) ;
18568: LD_STRING displayPowell();
18570: PPUSH
18571: CALL_OW 559
// uc_side := 0 ;
18575: LD_ADDR_OWVAR 20
18579: PUSH
18580: LD_INT 0
18582: ST_TO_ADDR
// uc_nation := 2 ;
18583: LD_ADDR_OWVAR 21
18587: PUSH
18588: LD_INT 2
18590: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18591: LD_ADDR_OWVAR 37
18595: PUSH
18596: LD_INT 14
18598: ST_TO_ADDR
// vc_engine := engine_siberite ;
18599: LD_ADDR_OWVAR 39
18603: PUSH
18604: LD_INT 3
18606: ST_TO_ADDR
// vc_control := control_apeman ;
18607: LD_ADDR_OWVAR 38
18611: PUSH
18612: LD_INT 5
18614: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18615: LD_ADDR_OWVAR 40
18619: PUSH
18620: LD_INT 29
18622: ST_TO_ADDR
// un := CreateVehicle ;
18623: LD_ADDR_VAR 0 2
18627: PUSH
18628: CALL_OW 45
18632: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18633: LD_VAR 0 2
18637: PPUSH
18638: LD_INT 1
18640: PPUSH
18641: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18645: LD_INT 35
18647: PPUSH
18648: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18652: LD_VAR 0 2
18656: PPUSH
18657: LD_INT 22
18659: PUSH
18660: LD_OWVAR 2
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PPUSH
18669: CALL_OW 69
18673: PPUSH
18674: LD_VAR 0 2
18678: PPUSH
18679: CALL_OW 74
18683: PPUSH
18684: CALL_OW 115
// until IsDead ( un ) ;
18688: LD_VAR 0 2
18692: PPUSH
18693: CALL_OW 301
18697: IFFALSE 18645
// end ;
18699: PPOPN 2
18701: END
// every 0 0$1 trigger StreamModeActive and sStu do
18702: LD_EXP 26
18706: PUSH
18707: LD_EXP 65
18711: AND
18712: IFFALSE 18728
18714: GO 18716
18716: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18717: LD_STRING displayStucuk();
18719: PPUSH
18720: CALL_OW 559
// ResetFog ;
18724: CALL_OW 335
// end ;
18728: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18729: LD_EXP 26
18733: PUSH
18734: LD_EXP 58
18738: AND
18739: IFFALSE 18880
18741: GO 18743
18743: DISABLE
18744: LD_INT 0
18746: PPUSH
18747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18748: LD_ADDR_VAR 0 2
18752: PUSH
18753: LD_INT 22
18755: PUSH
18756: LD_OWVAR 2
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 21
18767: PUSH
18768: LD_INT 1
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PPUSH
18779: CALL_OW 69
18783: ST_TO_ADDR
// if not tmp then
18784: LD_VAR 0 2
18788: NOT
18789: IFFALSE 18793
// exit ;
18791: GO 18880
// un := tmp [ rand ( 1 , tmp ) ] ;
18793: LD_ADDR_VAR 0 1
18797: PUSH
18798: LD_VAR 0 2
18802: PUSH
18803: LD_INT 1
18805: PPUSH
18806: LD_VAR 0 2
18810: PPUSH
18811: CALL_OW 12
18815: ARRAY
18816: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18817: LD_VAR 0 1
18821: PPUSH
18822: LD_INT 0
18824: PPUSH
18825: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18829: LD_VAR 0 1
18833: PPUSH
18834: LD_OWVAR 3
18838: PUSH
18839: LD_VAR 0 1
18843: DIFF
18844: PPUSH
18845: LD_VAR 0 1
18849: PPUSH
18850: CALL_OW 74
18854: PPUSH
18855: CALL_OW 115
// wait ( 0 0$20 ) ;
18859: LD_INT 700
18861: PPUSH
18862: CALL_OW 67
// SetSide ( un , your_side ) ;
18866: LD_VAR 0 1
18870: PPUSH
18871: LD_OWVAR 2
18875: PPUSH
18876: CALL_OW 235
// end ;
18880: PPOPN 2
18882: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18883: LD_EXP 26
18887: PUSH
18888: LD_EXP 59
18892: AND
18893: IFFALSE 18999
18895: GO 18897
18897: DISABLE
18898: LD_INT 0
18900: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18901: LD_ADDR_VAR 0 1
18905: PUSH
18906: LD_INT 22
18908: PUSH
18909: LD_OWVAR 2
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 2
18920: PUSH
18921: LD_INT 30
18923: PUSH
18924: LD_INT 0
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 30
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PPUSH
18950: CALL_OW 69
18954: ST_TO_ADDR
// if not depot then
18955: LD_VAR 0 1
18959: NOT
18960: IFFALSE 18964
// exit ;
18962: GO 18999
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18964: LD_VAR 0 1
18968: PUSH
18969: LD_INT 1
18971: ARRAY
18972: PPUSH
18973: CALL_OW 250
18977: PPUSH
18978: LD_VAR 0 1
18982: PUSH
18983: LD_INT 1
18985: ARRAY
18986: PPUSH
18987: CALL_OW 251
18991: PPUSH
18992: LD_INT 70
18994: PPUSH
18995: CALL_OW 495
// end ;
18999: PPOPN 1
19001: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19002: LD_EXP 26
19006: PUSH
19007: LD_EXP 60
19011: AND
19012: IFFALSE 19223
19014: GO 19016
19016: DISABLE
19017: LD_INT 0
19019: PPUSH
19020: PPUSH
19021: PPUSH
19022: PPUSH
19023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19024: LD_ADDR_VAR 0 5
19028: PUSH
19029: LD_INT 22
19031: PUSH
19032: LD_OWVAR 2
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 21
19043: PUSH
19044: LD_INT 1
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PPUSH
19055: CALL_OW 69
19059: ST_TO_ADDR
// if not tmp then
19060: LD_VAR 0 5
19064: NOT
19065: IFFALSE 19069
// exit ;
19067: GO 19223
// for i in tmp do
19069: LD_ADDR_VAR 0 1
19073: PUSH
19074: LD_VAR 0 5
19078: PUSH
19079: FOR_IN
19080: IFFALSE 19221
// begin d := rand ( 0 , 5 ) ;
19082: LD_ADDR_VAR 0 4
19086: PUSH
19087: LD_INT 0
19089: PPUSH
19090: LD_INT 5
19092: PPUSH
19093: CALL_OW 12
19097: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19098: LD_ADDR_VAR 0 2
19102: PUSH
19103: LD_VAR 0 1
19107: PPUSH
19108: CALL_OW 250
19112: PPUSH
19113: LD_VAR 0 4
19117: PPUSH
19118: LD_INT 3
19120: PPUSH
19121: LD_INT 12
19123: PPUSH
19124: CALL_OW 12
19128: PPUSH
19129: CALL_OW 272
19133: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19134: LD_ADDR_VAR 0 3
19138: PUSH
19139: LD_VAR 0 1
19143: PPUSH
19144: CALL_OW 251
19148: PPUSH
19149: LD_VAR 0 4
19153: PPUSH
19154: LD_INT 3
19156: PPUSH
19157: LD_INT 12
19159: PPUSH
19160: CALL_OW 12
19164: PPUSH
19165: CALL_OW 273
19169: ST_TO_ADDR
// if ValidHex ( x , y ) then
19170: LD_VAR 0 2
19174: PPUSH
19175: LD_VAR 0 3
19179: PPUSH
19180: CALL_OW 488
19184: IFFALSE 19219
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19186: LD_VAR 0 1
19190: PPUSH
19191: LD_VAR 0 2
19195: PPUSH
19196: LD_VAR 0 3
19200: PPUSH
19201: LD_INT 3
19203: PPUSH
19204: LD_INT 6
19206: PPUSH
19207: CALL_OW 12
19211: PPUSH
19212: LD_INT 1
19214: PPUSH
19215: CALL_OW 483
// end ;
19219: GO 19079
19221: POP
19222: POP
// end ;
19223: PPOPN 5
19225: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19226: LD_EXP 26
19230: PUSH
19231: LD_EXP 61
19235: AND
19236: IFFALSE 19330
19238: GO 19240
19240: DISABLE
19241: LD_INT 0
19243: PPUSH
19244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19245: LD_ADDR_VAR 0 2
19249: PUSH
19250: LD_INT 22
19252: PUSH
19253: LD_OWVAR 2
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 32
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 21
19274: PUSH
19275: LD_INT 2
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: LIST
19286: PPUSH
19287: CALL_OW 69
19291: ST_TO_ADDR
// if not tmp then
19292: LD_VAR 0 2
19296: NOT
19297: IFFALSE 19301
// exit ;
19299: GO 19330
// for i in tmp do
19301: LD_ADDR_VAR 0 1
19305: PUSH
19306: LD_VAR 0 2
19310: PUSH
19311: FOR_IN
19312: IFFALSE 19328
// SetFuel ( i , 0 ) ;
19314: LD_VAR 0 1
19318: PPUSH
19319: LD_INT 0
19321: PPUSH
19322: CALL_OW 240
19326: GO 19311
19328: POP
19329: POP
// end ;
19330: PPOPN 2
19332: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19333: LD_EXP 26
19337: PUSH
19338: LD_EXP 62
19342: AND
19343: IFFALSE 19409
19345: GO 19347
19347: DISABLE
19348: LD_INT 0
19350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19351: LD_ADDR_VAR 0 1
19355: PUSH
19356: LD_INT 22
19358: PUSH
19359: LD_OWVAR 2
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 30
19370: PUSH
19371: LD_INT 29
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PPUSH
19382: CALL_OW 69
19386: ST_TO_ADDR
// if not tmp then
19387: LD_VAR 0 1
19391: NOT
19392: IFFALSE 19396
// exit ;
19394: GO 19409
// DestroyUnit ( tmp [ 1 ] ) ;
19396: LD_VAR 0 1
19400: PUSH
19401: LD_INT 1
19403: ARRAY
19404: PPUSH
19405: CALL_OW 65
// end ;
19409: PPOPN 1
19411: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19412: LD_EXP 26
19416: PUSH
19417: LD_EXP 64
19421: AND
19422: IFFALSE 19551
19424: GO 19426
19426: DISABLE
19427: LD_INT 0
19429: PPUSH
// begin uc_side := 0 ;
19430: LD_ADDR_OWVAR 20
19434: PUSH
19435: LD_INT 0
19437: ST_TO_ADDR
// uc_nation := nation_arabian ;
19438: LD_ADDR_OWVAR 21
19442: PUSH
19443: LD_INT 2
19445: ST_TO_ADDR
// hc_gallery :=  ;
19446: LD_ADDR_OWVAR 33
19450: PUSH
19451: LD_STRING 
19453: ST_TO_ADDR
// hc_name :=  ;
19454: LD_ADDR_OWVAR 26
19458: PUSH
19459: LD_STRING 
19461: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19462: LD_INT 1
19464: PPUSH
19465: LD_INT 11
19467: PPUSH
19468: LD_INT 10
19470: PPUSH
19471: CALL_OW 380
// un := CreateHuman ;
19475: LD_ADDR_VAR 0 1
19479: PUSH
19480: CALL_OW 44
19484: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19485: LD_VAR 0 1
19489: PPUSH
19490: LD_INT 1
19492: PPUSH
19493: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19497: LD_INT 35
19499: PPUSH
19500: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19504: LD_VAR 0 1
19508: PPUSH
19509: LD_INT 22
19511: PUSH
19512: LD_OWVAR 2
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 69
19525: PPUSH
19526: LD_VAR 0 1
19530: PPUSH
19531: CALL_OW 74
19535: PPUSH
19536: CALL_OW 115
// until IsDead ( un ) ;
19540: LD_VAR 0 1
19544: PPUSH
19545: CALL_OW 301
19549: IFFALSE 19497
// end ;
19551: PPOPN 1
19553: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19554: LD_EXP 26
19558: PUSH
19559: LD_EXP 66
19563: AND
19564: IFFALSE 19576
19566: GO 19568
19568: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19569: LD_STRING earthquake(getX(game), 0, 32)
19571: PPUSH
19572: CALL_OW 559
19576: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19577: LD_EXP 26
19581: PUSH
19582: LD_EXP 67
19586: AND
19587: IFFALSE 19678
19589: GO 19591
19591: DISABLE
19592: LD_INT 0
19594: PPUSH
// begin enable ;
19595: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19596: LD_ADDR_VAR 0 1
19600: PUSH
19601: LD_INT 22
19603: PUSH
19604: LD_OWVAR 2
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 21
19615: PUSH
19616: LD_INT 2
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 33
19625: PUSH
19626: LD_INT 3
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: LIST
19637: PPUSH
19638: CALL_OW 69
19642: ST_TO_ADDR
// if not tmp then
19643: LD_VAR 0 1
19647: NOT
19648: IFFALSE 19652
// exit ;
19650: GO 19678
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19652: LD_VAR 0 1
19656: PUSH
19657: LD_INT 1
19659: PPUSH
19660: LD_VAR 0 1
19664: PPUSH
19665: CALL_OW 12
19669: ARRAY
19670: PPUSH
19671: LD_INT 1
19673: PPUSH
19674: CALL_OW 234
// end ;
19678: PPOPN 1
19680: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19681: LD_EXP 26
19685: PUSH
19686: LD_EXP 68
19690: AND
19691: IFFALSE 19832
19693: GO 19695
19695: DISABLE
19696: LD_INT 0
19698: PPUSH
19699: PPUSH
19700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19701: LD_ADDR_VAR 0 3
19705: PUSH
19706: LD_INT 22
19708: PUSH
19709: LD_OWVAR 2
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 25
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PPUSH
19732: CALL_OW 69
19736: ST_TO_ADDR
// if not tmp then
19737: LD_VAR 0 3
19741: NOT
19742: IFFALSE 19746
// exit ;
19744: GO 19832
// un := tmp [ rand ( 1 , tmp ) ] ;
19746: LD_ADDR_VAR 0 2
19750: PUSH
19751: LD_VAR 0 3
19755: PUSH
19756: LD_INT 1
19758: PPUSH
19759: LD_VAR 0 3
19763: PPUSH
19764: CALL_OW 12
19768: ARRAY
19769: ST_TO_ADDR
// if Crawls ( un ) then
19770: LD_VAR 0 2
19774: PPUSH
19775: CALL_OW 318
19779: IFFALSE 19790
// ComWalk ( un ) ;
19781: LD_VAR 0 2
19785: PPUSH
19786: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19790: LD_VAR 0 2
19794: PPUSH
19795: LD_INT 9
19797: PPUSH
19798: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19802: LD_INT 28
19804: PPUSH
19805: LD_OWVAR 2
19809: PPUSH
19810: LD_INT 2
19812: PPUSH
19813: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19817: LD_INT 29
19819: PPUSH
19820: LD_OWVAR 2
19824: PPUSH
19825: LD_INT 2
19827: PPUSH
19828: CALL_OW 322
// end ;
19832: PPOPN 3
19834: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19835: LD_EXP 26
19839: PUSH
19840: LD_EXP 69
19844: AND
19845: IFFALSE 19956
19847: GO 19849
19849: DISABLE
19850: LD_INT 0
19852: PPUSH
19853: PPUSH
19854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19855: LD_ADDR_VAR 0 3
19859: PUSH
19860: LD_INT 22
19862: PUSH
19863: LD_OWVAR 2
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 25
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PPUSH
19886: CALL_OW 69
19890: ST_TO_ADDR
// if not tmp then
19891: LD_VAR 0 3
19895: NOT
19896: IFFALSE 19900
// exit ;
19898: GO 19956
// un := tmp [ rand ( 1 , tmp ) ] ;
19900: LD_ADDR_VAR 0 2
19904: PUSH
19905: LD_VAR 0 3
19909: PUSH
19910: LD_INT 1
19912: PPUSH
19913: LD_VAR 0 3
19917: PPUSH
19918: CALL_OW 12
19922: ARRAY
19923: ST_TO_ADDR
// if Crawls ( un ) then
19924: LD_VAR 0 2
19928: PPUSH
19929: CALL_OW 318
19933: IFFALSE 19944
// ComWalk ( un ) ;
19935: LD_VAR 0 2
19939: PPUSH
19940: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19944: LD_VAR 0 2
19948: PPUSH
19949: LD_INT 8
19951: PPUSH
19952: CALL_OW 336
// end ;
19956: PPOPN 3
19958: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19959: LD_EXP 26
19963: PUSH
19964: LD_EXP 70
19968: AND
19969: IFFALSE 20113
19971: GO 19973
19973: DISABLE
19974: LD_INT 0
19976: PPUSH
19977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19978: LD_ADDR_VAR 0 2
19982: PUSH
19983: LD_INT 22
19985: PUSH
19986: LD_OWVAR 2
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 21
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 2
20007: PUSH
20008: LD_INT 34
20010: PUSH
20011: LD_INT 12
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 34
20020: PUSH
20021: LD_INT 51
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 34
20030: PUSH
20031: LD_INT 32
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: LIST
20048: PPUSH
20049: CALL_OW 69
20053: ST_TO_ADDR
// if not tmp then
20054: LD_VAR 0 2
20058: NOT
20059: IFFALSE 20063
// exit ;
20061: GO 20113
// for i in tmp do
20063: LD_ADDR_VAR 0 1
20067: PUSH
20068: LD_VAR 0 2
20072: PUSH
20073: FOR_IN
20074: IFFALSE 20111
// if GetCargo ( i , mat_artifact ) = 0 then
20076: LD_VAR 0 1
20080: PPUSH
20081: LD_INT 4
20083: PPUSH
20084: CALL_OW 289
20088: PUSH
20089: LD_INT 0
20091: EQUAL
20092: IFFALSE 20109
// SetCargo ( i , mat_siberit , 100 ) ;
20094: LD_VAR 0 1
20098: PPUSH
20099: LD_INT 3
20101: PPUSH
20102: LD_INT 100
20104: PPUSH
20105: CALL_OW 290
20109: GO 20073
20111: POP
20112: POP
// end ;
20113: PPOPN 2
20115: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20116: LD_EXP 26
20120: PUSH
20121: LD_EXP 71
20125: AND
20126: IFFALSE 20309
20128: GO 20130
20130: DISABLE
20131: LD_INT 0
20133: PPUSH
20134: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20135: LD_ADDR_VAR 0 2
20139: PUSH
20140: LD_INT 22
20142: PUSH
20143: LD_OWVAR 2
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PPUSH
20152: CALL_OW 69
20156: ST_TO_ADDR
// if not tmp then
20157: LD_VAR 0 2
20161: NOT
20162: IFFALSE 20166
// exit ;
20164: GO 20309
// for i := 1 to 2 do
20166: LD_ADDR_VAR 0 1
20170: PUSH
20171: DOUBLE
20172: LD_INT 1
20174: DEC
20175: ST_TO_ADDR
20176: LD_INT 2
20178: PUSH
20179: FOR_TO
20180: IFFALSE 20307
// begin uc_side := your_side ;
20182: LD_ADDR_OWVAR 20
20186: PUSH
20187: LD_OWVAR 2
20191: ST_TO_ADDR
// uc_nation := nation_american ;
20192: LD_ADDR_OWVAR 21
20196: PUSH
20197: LD_INT 1
20199: ST_TO_ADDR
// vc_chassis := us_morphling ;
20200: LD_ADDR_OWVAR 37
20204: PUSH
20205: LD_INT 5
20207: ST_TO_ADDR
// vc_engine := engine_siberite ;
20208: LD_ADDR_OWVAR 39
20212: PUSH
20213: LD_INT 3
20215: ST_TO_ADDR
// vc_control := control_computer ;
20216: LD_ADDR_OWVAR 38
20220: PUSH
20221: LD_INT 3
20223: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20224: LD_ADDR_OWVAR 40
20228: PUSH
20229: LD_INT 10
20231: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20232: LD_VAR 0 2
20236: PUSH
20237: LD_INT 1
20239: ARRAY
20240: PPUSH
20241: CALL_OW 310
20245: NOT
20246: IFFALSE 20293
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20248: CALL_OW 45
20252: PPUSH
20253: LD_VAR 0 2
20257: PUSH
20258: LD_INT 1
20260: ARRAY
20261: PPUSH
20262: CALL_OW 250
20266: PPUSH
20267: LD_VAR 0 2
20271: PUSH
20272: LD_INT 1
20274: ARRAY
20275: PPUSH
20276: CALL_OW 251
20280: PPUSH
20281: LD_INT 12
20283: PPUSH
20284: LD_INT 1
20286: PPUSH
20287: CALL_OW 50
20291: GO 20305
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20293: CALL_OW 45
20297: PPUSH
20298: LD_INT 1
20300: PPUSH
20301: CALL_OW 51
// end ;
20305: GO 20179
20307: POP
20308: POP
// end ;
20309: PPOPN 2
20311: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20312: LD_EXP 26
20316: PUSH
20317: LD_EXP 72
20321: AND
20322: IFFALSE 20544
20324: GO 20326
20326: DISABLE
20327: LD_INT 0
20329: PPUSH
20330: PPUSH
20331: PPUSH
20332: PPUSH
20333: PPUSH
20334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20335: LD_ADDR_VAR 0 6
20339: PUSH
20340: LD_INT 22
20342: PUSH
20343: LD_OWVAR 2
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 21
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 3
20364: PUSH
20365: LD_INT 23
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: LIST
20383: PPUSH
20384: CALL_OW 69
20388: ST_TO_ADDR
// if not tmp then
20389: LD_VAR 0 6
20393: NOT
20394: IFFALSE 20398
// exit ;
20396: GO 20544
// s1 := rand ( 1 , 4 ) ;
20398: LD_ADDR_VAR 0 2
20402: PUSH
20403: LD_INT 1
20405: PPUSH
20406: LD_INT 4
20408: PPUSH
20409: CALL_OW 12
20413: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20414: LD_ADDR_VAR 0 4
20418: PUSH
20419: LD_VAR 0 6
20423: PUSH
20424: LD_INT 1
20426: ARRAY
20427: PPUSH
20428: LD_VAR 0 2
20432: PPUSH
20433: CALL_OW 259
20437: ST_TO_ADDR
// if s1 = 1 then
20438: LD_VAR 0 2
20442: PUSH
20443: LD_INT 1
20445: EQUAL
20446: IFFALSE 20466
// s2 := rand ( 2 , 4 ) else
20448: LD_ADDR_VAR 0 3
20452: PUSH
20453: LD_INT 2
20455: PPUSH
20456: LD_INT 4
20458: PPUSH
20459: CALL_OW 12
20463: ST_TO_ADDR
20464: GO 20474
// s2 := 1 ;
20466: LD_ADDR_VAR 0 3
20470: PUSH
20471: LD_INT 1
20473: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20474: LD_ADDR_VAR 0 5
20478: PUSH
20479: LD_VAR 0 6
20483: PUSH
20484: LD_INT 1
20486: ARRAY
20487: PPUSH
20488: LD_VAR 0 3
20492: PPUSH
20493: CALL_OW 259
20497: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20498: LD_VAR 0 6
20502: PUSH
20503: LD_INT 1
20505: ARRAY
20506: PPUSH
20507: LD_VAR 0 2
20511: PPUSH
20512: LD_VAR 0 5
20516: PPUSH
20517: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20521: LD_VAR 0 6
20525: PUSH
20526: LD_INT 1
20528: ARRAY
20529: PPUSH
20530: LD_VAR 0 3
20534: PPUSH
20535: LD_VAR 0 4
20539: PPUSH
20540: CALL_OW 237
// end ;
20544: PPOPN 6
20546: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20547: LD_EXP 26
20551: PUSH
20552: LD_EXP 73
20556: AND
20557: IFFALSE 20636
20559: GO 20561
20561: DISABLE
20562: LD_INT 0
20564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20565: LD_ADDR_VAR 0 1
20569: PUSH
20570: LD_INT 22
20572: PUSH
20573: LD_OWVAR 2
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 30
20584: PUSH
20585: LD_INT 3
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PPUSH
20596: CALL_OW 69
20600: ST_TO_ADDR
// if not tmp then
20601: LD_VAR 0 1
20605: NOT
20606: IFFALSE 20610
// exit ;
20608: GO 20636
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20610: LD_VAR 0 1
20614: PUSH
20615: LD_INT 1
20617: PPUSH
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 12
20627: ARRAY
20628: PPUSH
20629: LD_INT 1
20631: PPUSH
20632: CALL_OW 234
// end ;
20636: PPOPN 1
20638: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20639: LD_EXP 26
20643: PUSH
20644: LD_EXP 74
20648: AND
20649: IFFALSE 20761
20651: GO 20653
20653: DISABLE
20654: LD_INT 0
20656: PPUSH
20657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20658: LD_ADDR_VAR 0 2
20662: PUSH
20663: LD_INT 22
20665: PUSH
20666: LD_OWVAR 2
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 2
20677: PUSH
20678: LD_INT 30
20680: PUSH
20681: LD_INT 27
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 30
20690: PUSH
20691: LD_INT 26
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 30
20700: PUSH
20701: LD_INT 28
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PPUSH
20718: CALL_OW 69
20722: ST_TO_ADDR
// if not tmp then
20723: LD_VAR 0 2
20727: NOT
20728: IFFALSE 20732
// exit ;
20730: GO 20761
// for i in tmp do
20732: LD_ADDR_VAR 0 1
20736: PUSH
20737: LD_VAR 0 2
20741: PUSH
20742: FOR_IN
20743: IFFALSE 20759
// SetLives ( i , 1 ) ;
20745: LD_VAR 0 1
20749: PPUSH
20750: LD_INT 1
20752: PPUSH
20753: CALL_OW 234
20757: GO 20742
20759: POP
20760: POP
// end ;
20761: PPOPN 2
20763: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20764: LD_EXP 26
20768: PUSH
20769: LD_EXP 75
20773: AND
20774: IFFALSE 21061
20776: GO 20778
20778: DISABLE
20779: LD_INT 0
20781: PPUSH
20782: PPUSH
20783: PPUSH
// begin i := rand ( 1 , 7 ) ;
20784: LD_ADDR_VAR 0 1
20788: PUSH
20789: LD_INT 1
20791: PPUSH
20792: LD_INT 7
20794: PPUSH
20795: CALL_OW 12
20799: ST_TO_ADDR
// case i of 1 :
20800: LD_VAR 0 1
20804: PUSH
20805: LD_INT 1
20807: DOUBLE
20808: EQUAL
20809: IFTRUE 20813
20811: GO 20823
20813: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20814: LD_STRING earthquake(getX(game), 0, 32)
20816: PPUSH
20817: CALL_OW 559
20821: GO 21061
20823: LD_INT 2
20825: DOUBLE
20826: EQUAL
20827: IFTRUE 20831
20829: GO 20845
20831: POP
// begin ToLua ( displayStucuk(); ) ;
20832: LD_STRING displayStucuk();
20834: PPUSH
20835: CALL_OW 559
// ResetFog ;
20839: CALL_OW 335
// end ; 3 :
20843: GO 21061
20845: LD_INT 3
20847: DOUBLE
20848: EQUAL
20849: IFTRUE 20853
20851: GO 20957
20853: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20854: LD_ADDR_VAR 0 2
20858: PUSH
20859: LD_INT 22
20861: PUSH
20862: LD_OWVAR 2
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 25
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PPUSH
20885: CALL_OW 69
20889: ST_TO_ADDR
// if not tmp then
20890: LD_VAR 0 2
20894: NOT
20895: IFFALSE 20899
// exit ;
20897: GO 21061
// un := tmp [ rand ( 1 , tmp ) ] ;
20899: LD_ADDR_VAR 0 3
20903: PUSH
20904: LD_VAR 0 2
20908: PUSH
20909: LD_INT 1
20911: PPUSH
20912: LD_VAR 0 2
20916: PPUSH
20917: CALL_OW 12
20921: ARRAY
20922: ST_TO_ADDR
// if Crawls ( un ) then
20923: LD_VAR 0 3
20927: PPUSH
20928: CALL_OW 318
20932: IFFALSE 20943
// ComWalk ( un ) ;
20934: LD_VAR 0 3
20938: PPUSH
20939: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20943: LD_VAR 0 3
20947: PPUSH
20948: LD_INT 8
20950: PPUSH
20951: CALL_OW 336
// end ; 4 :
20955: GO 21061
20957: LD_INT 4
20959: DOUBLE
20960: EQUAL
20961: IFTRUE 20965
20963: GO 21039
20965: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20966: LD_ADDR_VAR 0 2
20970: PUSH
20971: LD_INT 22
20973: PUSH
20974: LD_OWVAR 2
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 30
20985: PUSH
20986: LD_INT 29
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PPUSH
20997: CALL_OW 69
21001: ST_TO_ADDR
// if not tmp then
21002: LD_VAR 0 2
21006: NOT
21007: IFFALSE 21011
// exit ;
21009: GO 21061
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21011: LD_VAR 0 2
21015: PUSH
21016: LD_INT 1
21018: ARRAY
21019: PPUSH
21020: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21024: LD_VAR 0 2
21028: PUSH
21029: LD_INT 1
21031: ARRAY
21032: PPUSH
21033: CALL_OW 65
// end ; 5 .. 7 :
21037: GO 21061
21039: LD_INT 5
21041: DOUBLE
21042: GREATEREQUAL
21043: IFFALSE 21051
21045: LD_INT 7
21047: DOUBLE
21048: LESSEQUAL
21049: IFTRUE 21053
21051: GO 21060
21053: POP
// StreamSibBomb ; end ;
21054: CALL 17298 0 0
21058: GO 21061
21060: POP
// end ;
21061: PPOPN 3
21063: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21064: LD_EXP 26
21068: PUSH
21069: LD_EXP 76
21073: AND
21074: IFFALSE 21230
21076: GO 21078
21078: DISABLE
21079: LD_INT 0
21081: PPUSH
21082: PPUSH
21083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21084: LD_ADDR_VAR 0 2
21088: PUSH
21089: LD_INT 81
21091: PUSH
21092: LD_OWVAR 2
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 2
21103: PUSH
21104: LD_INT 21
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 21
21116: PUSH
21117: LD_INT 2
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: LIST
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PPUSH
21133: CALL_OW 69
21137: ST_TO_ADDR
// if not tmp then
21138: LD_VAR 0 2
21142: NOT
21143: IFFALSE 21147
// exit ;
21145: GO 21230
// p := 0 ;
21147: LD_ADDR_VAR 0 3
21151: PUSH
21152: LD_INT 0
21154: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21155: LD_INT 35
21157: PPUSH
21158: CALL_OW 67
// p := p + 1 ;
21162: LD_ADDR_VAR 0 3
21166: PUSH
21167: LD_VAR 0 3
21171: PUSH
21172: LD_INT 1
21174: PLUS
21175: ST_TO_ADDR
// for i in tmp do
21176: LD_ADDR_VAR 0 1
21180: PUSH
21181: LD_VAR 0 2
21185: PUSH
21186: FOR_IN
21187: IFFALSE 21218
// if GetLives ( i ) < 1000 then
21189: LD_VAR 0 1
21193: PPUSH
21194: CALL_OW 256
21198: PUSH
21199: LD_INT 1000
21201: LESS
21202: IFFALSE 21216
// SetLives ( i , 1000 ) ;
21204: LD_VAR 0 1
21208: PPUSH
21209: LD_INT 1000
21211: PPUSH
21212: CALL_OW 234
21216: GO 21186
21218: POP
21219: POP
// until p > 20 ;
21220: LD_VAR 0 3
21224: PUSH
21225: LD_INT 20
21227: GREATER
21228: IFFALSE 21155
// end ;
21230: PPOPN 3
21232: END
// every 0 0$1 trigger StreamModeActive and sTime do
21233: LD_EXP 26
21237: PUSH
21238: LD_EXP 77
21242: AND
21243: IFFALSE 21278
21245: GO 21247
21247: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21248: LD_INT 28
21250: PPUSH
21251: LD_OWVAR 2
21255: PPUSH
21256: LD_INT 2
21258: PPUSH
21259: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21263: LD_INT 30
21265: PPUSH
21266: LD_OWVAR 2
21270: PPUSH
21271: LD_INT 2
21273: PPUSH
21274: CALL_OW 322
// end ;
21278: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21279: LD_EXP 26
21283: PUSH
21284: LD_EXP 78
21288: AND
21289: IFFALSE 21410
21291: GO 21293
21293: DISABLE
21294: LD_INT 0
21296: PPUSH
21297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21298: LD_ADDR_VAR 0 2
21302: PUSH
21303: LD_INT 22
21305: PUSH
21306: LD_OWVAR 2
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 21
21317: PUSH
21318: LD_INT 1
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 3
21327: PUSH
21328: LD_INT 23
21330: PUSH
21331: LD_INT 0
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: LIST
21346: PPUSH
21347: CALL_OW 69
21351: ST_TO_ADDR
// if not tmp then
21352: LD_VAR 0 2
21356: NOT
21357: IFFALSE 21361
// exit ;
21359: GO 21410
// for i in tmp do
21361: LD_ADDR_VAR 0 1
21365: PUSH
21366: LD_VAR 0 2
21370: PUSH
21371: FOR_IN
21372: IFFALSE 21408
// begin if Crawls ( i ) then
21374: LD_VAR 0 1
21378: PPUSH
21379: CALL_OW 318
21383: IFFALSE 21394
// ComWalk ( i ) ;
21385: LD_VAR 0 1
21389: PPUSH
21390: CALL_OW 138
// SetClass ( i , 2 ) ;
21394: LD_VAR 0 1
21398: PPUSH
21399: LD_INT 2
21401: PPUSH
21402: CALL_OW 336
// end ;
21406: GO 21371
21408: POP
21409: POP
// end ;
21410: PPOPN 2
21412: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21413: LD_EXP 26
21417: PUSH
21418: LD_EXP 79
21422: AND
21423: IFFALSE 21711
21425: GO 21427
21427: DISABLE
21428: LD_INT 0
21430: PPUSH
21431: PPUSH
21432: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21433: LD_OWVAR 2
21437: PPUSH
21438: LD_INT 9
21440: PPUSH
21441: LD_INT 1
21443: PPUSH
21444: LD_INT 1
21446: PPUSH
21447: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21451: LD_INT 9
21453: PPUSH
21454: LD_OWVAR 2
21458: PPUSH
21459: CALL_OW 343
// uc_side := 9 ;
21463: LD_ADDR_OWVAR 20
21467: PUSH
21468: LD_INT 9
21470: ST_TO_ADDR
// uc_nation := 2 ;
21471: LD_ADDR_OWVAR 21
21475: PUSH
21476: LD_INT 2
21478: ST_TO_ADDR
// hc_name := Dark Warrior ;
21479: LD_ADDR_OWVAR 26
21483: PUSH
21484: LD_STRING Dark Warrior
21486: ST_TO_ADDR
// hc_gallery :=  ;
21487: LD_ADDR_OWVAR 33
21491: PUSH
21492: LD_STRING 
21494: ST_TO_ADDR
// hc_noskilllimit := true ;
21495: LD_ADDR_OWVAR 76
21499: PUSH
21500: LD_INT 1
21502: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21503: LD_ADDR_OWVAR 31
21507: PUSH
21508: LD_INT 30
21510: PUSH
21511: LD_INT 30
21513: PUSH
21514: LD_INT 30
21516: PUSH
21517: LD_INT 30
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: ST_TO_ADDR
// un := CreateHuman ;
21526: LD_ADDR_VAR 0 3
21530: PUSH
21531: CALL_OW 44
21535: ST_TO_ADDR
// hc_noskilllimit := false ;
21536: LD_ADDR_OWVAR 76
21540: PUSH
21541: LD_INT 0
21543: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21544: LD_VAR 0 3
21548: PPUSH
21549: LD_INT 1
21551: PPUSH
21552: CALL_OW 51
// ToLua ( playRanger() ) ;
21556: LD_STRING playRanger()
21558: PPUSH
21559: CALL_OW 559
// p := 0 ;
21563: LD_ADDR_VAR 0 2
21567: PUSH
21568: LD_INT 0
21570: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21571: LD_INT 35
21573: PPUSH
21574: CALL_OW 67
// p := p + 1 ;
21578: LD_ADDR_VAR 0 2
21582: PUSH
21583: LD_VAR 0 2
21587: PUSH
21588: LD_INT 1
21590: PLUS
21591: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21592: LD_VAR 0 3
21596: PPUSH
21597: CALL_OW 256
21601: PUSH
21602: LD_INT 1000
21604: LESS
21605: IFFALSE 21619
// SetLives ( un , 1000 ) ;
21607: LD_VAR 0 3
21611: PPUSH
21612: LD_INT 1000
21614: PPUSH
21615: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21619: LD_VAR 0 3
21623: PPUSH
21624: LD_INT 81
21626: PUSH
21627: LD_OWVAR 2
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 91
21638: PUSH
21639: LD_VAR 0 3
21643: PUSH
21644: LD_INT 30
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: LIST
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PPUSH
21656: CALL_OW 69
21660: PPUSH
21661: LD_VAR 0 3
21665: PPUSH
21666: CALL_OW 74
21670: PPUSH
21671: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21675: LD_VAR 0 2
21679: PUSH
21680: LD_INT 80
21682: GREATER
21683: PUSH
21684: LD_VAR 0 3
21688: PPUSH
21689: CALL_OW 301
21693: OR
21694: IFFALSE 21571
// if un then
21696: LD_VAR 0 3
21700: IFFALSE 21711
// RemoveUnit ( un ) ;
21702: LD_VAR 0 3
21706: PPUSH
21707: CALL_OW 64
// end ;
21711: PPOPN 3
21713: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21714: LD_EXP 80
21718: IFFALSE 21834
21720: GO 21722
21722: DISABLE
21723: LD_INT 0
21725: PPUSH
21726: PPUSH
21727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21728: LD_ADDR_VAR 0 2
21732: PUSH
21733: LD_INT 81
21735: PUSH
21736: LD_OWVAR 2
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 21
21747: PUSH
21748: LD_INT 1
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PPUSH
21759: CALL_OW 69
21763: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21764: LD_STRING playComputer()
21766: PPUSH
21767: CALL_OW 559
// if not tmp then
21771: LD_VAR 0 2
21775: NOT
21776: IFFALSE 21780
// exit ;
21778: GO 21834
// for i in tmp do
21780: LD_ADDR_VAR 0 1
21784: PUSH
21785: LD_VAR 0 2
21789: PUSH
21790: FOR_IN
21791: IFFALSE 21832
// for j := 1 to 4 do
21793: LD_ADDR_VAR 0 3
21797: PUSH
21798: DOUBLE
21799: LD_INT 1
21801: DEC
21802: ST_TO_ADDR
21803: LD_INT 4
21805: PUSH
21806: FOR_TO
21807: IFFALSE 21828
// SetSkill ( i , j , 10 ) ;
21809: LD_VAR 0 1
21813: PPUSH
21814: LD_VAR 0 3
21818: PPUSH
21819: LD_INT 10
21821: PPUSH
21822: CALL_OW 237
21826: GO 21806
21828: POP
21829: POP
21830: GO 21790
21832: POP
21833: POP
// end ;
21834: PPOPN 3
21836: END
// every 0 0$1 trigger s30 do var i , tmp ;
21837: LD_EXP 81
21841: IFFALSE 21910
21843: GO 21845
21845: DISABLE
21846: LD_INT 0
21848: PPUSH
21849: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21850: LD_ADDR_VAR 0 2
21854: PUSH
21855: LD_INT 22
21857: PUSH
21858: LD_OWVAR 2
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PPUSH
21867: CALL_OW 69
21871: ST_TO_ADDR
// if not tmp then
21872: LD_VAR 0 2
21876: NOT
21877: IFFALSE 21881
// exit ;
21879: GO 21910
// for i in tmp do
21881: LD_ADDR_VAR 0 1
21885: PUSH
21886: LD_VAR 0 2
21890: PUSH
21891: FOR_IN
21892: IFFALSE 21908
// SetLives ( i , 300 ) ;
21894: LD_VAR 0 1
21898: PPUSH
21899: LD_INT 300
21901: PPUSH
21902: CALL_OW 234
21906: GO 21891
21908: POP
21909: POP
// end ;
21910: PPOPN 2
21912: END
// every 0 0$1 trigger s60 do var i , tmp ;
21913: LD_EXP 82
21917: IFFALSE 21986
21919: GO 21921
21921: DISABLE
21922: LD_INT 0
21924: PPUSH
21925: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21926: LD_ADDR_VAR 0 2
21930: PUSH
21931: LD_INT 22
21933: PUSH
21934: LD_OWVAR 2
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PPUSH
21943: CALL_OW 69
21947: ST_TO_ADDR
// if not tmp then
21948: LD_VAR 0 2
21952: NOT
21953: IFFALSE 21957
// exit ;
21955: GO 21986
// for i in tmp do
21957: LD_ADDR_VAR 0 1
21961: PUSH
21962: LD_VAR 0 2
21966: PUSH
21967: FOR_IN
21968: IFFALSE 21984
// SetLives ( i , 600 ) ;
21970: LD_VAR 0 1
21974: PPUSH
21975: LD_INT 600
21977: PPUSH
21978: CALL_OW 234
21982: GO 21967
21984: POP
21985: POP
// end ;
21986: PPOPN 2
21988: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21989: LD_INT 0
21991: PPUSH
// case cmd of 301 :
21992: LD_VAR 0 1
21996: PUSH
21997: LD_INT 301
21999: DOUBLE
22000: EQUAL
22001: IFTRUE 22005
22003: GO 22037
22005: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22006: LD_VAR 0 6
22010: PPUSH
22011: LD_VAR 0 7
22015: PPUSH
22016: LD_VAR 0 8
22020: PPUSH
22021: LD_VAR 0 4
22025: PPUSH
22026: LD_VAR 0 5
22030: PPUSH
22031: CALL 23246 0 5
22035: GO 22158
22037: LD_INT 302
22039: DOUBLE
22040: EQUAL
22041: IFTRUE 22045
22043: GO 22082
22045: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22046: LD_VAR 0 6
22050: PPUSH
22051: LD_VAR 0 7
22055: PPUSH
22056: LD_VAR 0 8
22060: PPUSH
22061: LD_VAR 0 9
22065: PPUSH
22066: LD_VAR 0 4
22070: PPUSH
22071: LD_VAR 0 5
22075: PPUSH
22076: CALL 23337 0 6
22080: GO 22158
22082: LD_INT 303
22084: DOUBLE
22085: EQUAL
22086: IFTRUE 22090
22088: GO 22127
22090: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22091: LD_VAR 0 6
22095: PPUSH
22096: LD_VAR 0 7
22100: PPUSH
22101: LD_VAR 0 8
22105: PPUSH
22106: LD_VAR 0 9
22110: PPUSH
22111: LD_VAR 0 4
22115: PPUSH
22116: LD_VAR 0 5
22120: PPUSH
22121: CALL 22163 0 6
22125: GO 22158
22127: LD_INT 304
22129: DOUBLE
22130: EQUAL
22131: IFTRUE 22135
22133: GO 22157
22135: POP
// hHackTeleport ( unit , x , y ) ; end ;
22136: LD_VAR 0 2
22140: PPUSH
22141: LD_VAR 0 4
22145: PPUSH
22146: LD_VAR 0 5
22150: PPUSH
22151: CALL 23930 0 3
22155: GO 22158
22157: POP
// end ;
22158: LD_VAR 0 12
22162: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22163: LD_INT 0
22165: PPUSH
22166: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22167: LD_VAR 0 1
22171: PUSH
22172: LD_INT 1
22174: LESS
22175: PUSH
22176: LD_VAR 0 1
22180: PUSH
22181: LD_INT 3
22183: GREATER
22184: OR
22185: PUSH
22186: LD_VAR 0 5
22190: PPUSH
22191: LD_VAR 0 6
22195: PPUSH
22196: CALL_OW 428
22200: OR
22201: IFFALSE 22205
// exit ;
22203: GO 22933
// uc_side := your_side ;
22205: LD_ADDR_OWVAR 20
22209: PUSH
22210: LD_OWVAR 2
22214: ST_TO_ADDR
// uc_nation := nation ;
22215: LD_ADDR_OWVAR 21
22219: PUSH
22220: LD_VAR 0 1
22224: ST_TO_ADDR
// bc_level = 1 ;
22225: LD_ADDR_OWVAR 43
22229: PUSH
22230: LD_INT 1
22232: ST_TO_ADDR
// case btype of 1 :
22233: LD_VAR 0 2
22237: PUSH
22238: LD_INT 1
22240: DOUBLE
22241: EQUAL
22242: IFTRUE 22246
22244: GO 22257
22246: POP
// bc_type := b_depot ; 2 :
22247: LD_ADDR_OWVAR 42
22251: PUSH
22252: LD_INT 0
22254: ST_TO_ADDR
22255: GO 22877
22257: LD_INT 2
22259: DOUBLE
22260: EQUAL
22261: IFTRUE 22265
22263: GO 22276
22265: POP
// bc_type := b_warehouse ; 3 :
22266: LD_ADDR_OWVAR 42
22270: PUSH
22271: LD_INT 1
22273: ST_TO_ADDR
22274: GO 22877
22276: LD_INT 3
22278: DOUBLE
22279: EQUAL
22280: IFTRUE 22284
22282: GO 22295
22284: POP
// bc_type := b_lab ; 4 .. 9 :
22285: LD_ADDR_OWVAR 42
22289: PUSH
22290: LD_INT 6
22292: ST_TO_ADDR
22293: GO 22877
22295: LD_INT 4
22297: DOUBLE
22298: GREATEREQUAL
22299: IFFALSE 22307
22301: LD_INT 9
22303: DOUBLE
22304: LESSEQUAL
22305: IFTRUE 22309
22307: GO 22369
22309: POP
// begin bc_type := b_lab_half ;
22310: LD_ADDR_OWVAR 42
22314: PUSH
22315: LD_INT 7
22317: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22318: LD_ADDR_OWVAR 44
22322: PUSH
22323: LD_INT 10
22325: PUSH
22326: LD_INT 11
22328: PUSH
22329: LD_INT 12
22331: PUSH
22332: LD_INT 15
22334: PUSH
22335: LD_INT 14
22337: PUSH
22338: LD_INT 13
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: PUSH
22349: LD_VAR 0 2
22353: PUSH
22354: LD_INT 3
22356: MINUS
22357: ARRAY
22358: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22359: LD_ADDR_OWVAR 45
22363: PUSH
22364: LD_INT 9
22366: ST_TO_ADDR
// end ; 10 .. 13 :
22367: GO 22877
22369: LD_INT 10
22371: DOUBLE
22372: GREATEREQUAL
22373: IFFALSE 22381
22375: LD_INT 13
22377: DOUBLE
22378: LESSEQUAL
22379: IFTRUE 22383
22381: GO 22460
22383: POP
// begin bc_type := b_lab_full ;
22384: LD_ADDR_OWVAR 42
22388: PUSH
22389: LD_INT 8
22391: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22392: LD_ADDR_OWVAR 44
22396: PUSH
22397: LD_INT 10
22399: PUSH
22400: LD_INT 12
22402: PUSH
22403: LD_INT 14
22405: PUSH
22406: LD_INT 13
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: PUSH
22415: LD_VAR 0 2
22419: PUSH
22420: LD_INT 9
22422: MINUS
22423: ARRAY
22424: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22425: LD_ADDR_OWVAR 45
22429: PUSH
22430: LD_INT 11
22432: PUSH
22433: LD_INT 15
22435: PUSH
22436: LD_INT 12
22438: PUSH
22439: LD_INT 15
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: PUSH
22448: LD_VAR 0 2
22452: PUSH
22453: LD_INT 9
22455: MINUS
22456: ARRAY
22457: ST_TO_ADDR
// end ; 14 :
22458: GO 22877
22460: LD_INT 14
22462: DOUBLE
22463: EQUAL
22464: IFTRUE 22468
22466: GO 22479
22468: POP
// bc_type := b_workshop ; 15 :
22469: LD_ADDR_OWVAR 42
22473: PUSH
22474: LD_INT 2
22476: ST_TO_ADDR
22477: GO 22877
22479: LD_INT 15
22481: DOUBLE
22482: EQUAL
22483: IFTRUE 22487
22485: GO 22498
22487: POP
// bc_type := b_factory ; 16 :
22488: LD_ADDR_OWVAR 42
22492: PUSH
22493: LD_INT 3
22495: ST_TO_ADDR
22496: GO 22877
22498: LD_INT 16
22500: DOUBLE
22501: EQUAL
22502: IFTRUE 22506
22504: GO 22517
22506: POP
// bc_type := b_ext_gun ; 17 :
22507: LD_ADDR_OWVAR 42
22511: PUSH
22512: LD_INT 17
22514: ST_TO_ADDR
22515: GO 22877
22517: LD_INT 17
22519: DOUBLE
22520: EQUAL
22521: IFTRUE 22525
22523: GO 22553
22525: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22526: LD_ADDR_OWVAR 42
22530: PUSH
22531: LD_INT 19
22533: PUSH
22534: LD_INT 23
22536: PUSH
22537: LD_INT 19
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: LIST
22544: PUSH
22545: LD_VAR 0 1
22549: ARRAY
22550: ST_TO_ADDR
22551: GO 22877
22553: LD_INT 18
22555: DOUBLE
22556: EQUAL
22557: IFTRUE 22561
22559: GO 22572
22561: POP
// bc_type := b_ext_radar ; 19 :
22562: LD_ADDR_OWVAR 42
22566: PUSH
22567: LD_INT 20
22569: ST_TO_ADDR
22570: GO 22877
22572: LD_INT 19
22574: DOUBLE
22575: EQUAL
22576: IFTRUE 22580
22578: GO 22591
22580: POP
// bc_type := b_ext_radio ; 20 :
22581: LD_ADDR_OWVAR 42
22585: PUSH
22586: LD_INT 22
22588: ST_TO_ADDR
22589: GO 22877
22591: LD_INT 20
22593: DOUBLE
22594: EQUAL
22595: IFTRUE 22599
22597: GO 22610
22599: POP
// bc_type := b_ext_siberium ; 21 :
22600: LD_ADDR_OWVAR 42
22604: PUSH
22605: LD_INT 21
22607: ST_TO_ADDR
22608: GO 22877
22610: LD_INT 21
22612: DOUBLE
22613: EQUAL
22614: IFTRUE 22618
22616: GO 22629
22618: POP
// bc_type := b_ext_computer ; 22 :
22619: LD_ADDR_OWVAR 42
22623: PUSH
22624: LD_INT 24
22626: ST_TO_ADDR
22627: GO 22877
22629: LD_INT 22
22631: DOUBLE
22632: EQUAL
22633: IFTRUE 22637
22635: GO 22648
22637: POP
// bc_type := b_ext_track ; 23 :
22638: LD_ADDR_OWVAR 42
22642: PUSH
22643: LD_INT 16
22645: ST_TO_ADDR
22646: GO 22877
22648: LD_INT 23
22650: DOUBLE
22651: EQUAL
22652: IFTRUE 22656
22654: GO 22667
22656: POP
// bc_type := b_ext_laser ; 24 :
22657: LD_ADDR_OWVAR 42
22661: PUSH
22662: LD_INT 25
22664: ST_TO_ADDR
22665: GO 22877
22667: LD_INT 24
22669: DOUBLE
22670: EQUAL
22671: IFTRUE 22675
22673: GO 22686
22675: POP
// bc_type := b_control_tower ; 25 :
22676: LD_ADDR_OWVAR 42
22680: PUSH
22681: LD_INT 36
22683: ST_TO_ADDR
22684: GO 22877
22686: LD_INT 25
22688: DOUBLE
22689: EQUAL
22690: IFTRUE 22694
22692: GO 22705
22694: POP
// bc_type := b_breastwork ; 26 :
22695: LD_ADDR_OWVAR 42
22699: PUSH
22700: LD_INT 31
22702: ST_TO_ADDR
22703: GO 22877
22705: LD_INT 26
22707: DOUBLE
22708: EQUAL
22709: IFTRUE 22713
22711: GO 22724
22713: POP
// bc_type := b_bunker ; 27 :
22714: LD_ADDR_OWVAR 42
22718: PUSH
22719: LD_INT 32
22721: ST_TO_ADDR
22722: GO 22877
22724: LD_INT 27
22726: DOUBLE
22727: EQUAL
22728: IFTRUE 22732
22730: GO 22743
22732: POP
// bc_type := b_turret ; 28 :
22733: LD_ADDR_OWVAR 42
22737: PUSH
22738: LD_INT 33
22740: ST_TO_ADDR
22741: GO 22877
22743: LD_INT 28
22745: DOUBLE
22746: EQUAL
22747: IFTRUE 22751
22749: GO 22762
22751: POP
// bc_type := b_armoury ; 29 :
22752: LD_ADDR_OWVAR 42
22756: PUSH
22757: LD_INT 4
22759: ST_TO_ADDR
22760: GO 22877
22762: LD_INT 29
22764: DOUBLE
22765: EQUAL
22766: IFTRUE 22770
22768: GO 22781
22770: POP
// bc_type := b_barracks ; 30 :
22771: LD_ADDR_OWVAR 42
22775: PUSH
22776: LD_INT 5
22778: ST_TO_ADDR
22779: GO 22877
22781: LD_INT 30
22783: DOUBLE
22784: EQUAL
22785: IFTRUE 22789
22787: GO 22800
22789: POP
// bc_type := b_solar_power ; 31 :
22790: LD_ADDR_OWVAR 42
22794: PUSH
22795: LD_INT 27
22797: ST_TO_ADDR
22798: GO 22877
22800: LD_INT 31
22802: DOUBLE
22803: EQUAL
22804: IFTRUE 22808
22806: GO 22819
22808: POP
// bc_type := b_oil_power ; 32 :
22809: LD_ADDR_OWVAR 42
22813: PUSH
22814: LD_INT 26
22816: ST_TO_ADDR
22817: GO 22877
22819: LD_INT 32
22821: DOUBLE
22822: EQUAL
22823: IFTRUE 22827
22825: GO 22838
22827: POP
// bc_type := b_siberite_power ; 33 :
22828: LD_ADDR_OWVAR 42
22832: PUSH
22833: LD_INT 28
22835: ST_TO_ADDR
22836: GO 22877
22838: LD_INT 33
22840: DOUBLE
22841: EQUAL
22842: IFTRUE 22846
22844: GO 22857
22846: POP
// bc_type := b_oil_mine ; 34 :
22847: LD_ADDR_OWVAR 42
22851: PUSH
22852: LD_INT 29
22854: ST_TO_ADDR
22855: GO 22877
22857: LD_INT 34
22859: DOUBLE
22860: EQUAL
22861: IFTRUE 22865
22863: GO 22876
22865: POP
// bc_type := b_siberite_mine ; end ;
22866: LD_ADDR_OWVAR 42
22870: PUSH
22871: LD_INT 30
22873: ST_TO_ADDR
22874: GO 22877
22876: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22877: LD_ADDR_VAR 0 8
22881: PUSH
22882: LD_VAR 0 5
22886: PPUSH
22887: LD_VAR 0 6
22891: PPUSH
22892: LD_VAR 0 3
22896: PPUSH
22897: CALL_OW 47
22901: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22902: LD_OWVAR 42
22906: PUSH
22907: LD_INT 32
22909: PUSH
22910: LD_INT 33
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: IN
22917: IFFALSE 22933
// PlaceWeaponTurret ( b , weapon ) ;
22919: LD_VAR 0 8
22923: PPUSH
22924: LD_VAR 0 4
22928: PPUSH
22929: CALL_OW 431
// end ;
22933: LD_VAR 0 7
22937: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22938: LD_INT 0
22940: PPUSH
22941: PPUSH
22942: PPUSH
22943: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22944: LD_ADDR_VAR 0 4
22948: PUSH
22949: LD_INT 22
22951: PUSH
22952: LD_OWVAR 2
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 2
22963: PUSH
22964: LD_INT 30
22966: PUSH
22967: LD_INT 0
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 30
22976: PUSH
22977: LD_INT 1
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: LIST
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PPUSH
22993: CALL_OW 69
22997: ST_TO_ADDR
// if not tmp then
22998: LD_VAR 0 4
23002: NOT
23003: IFFALSE 23007
// exit ;
23005: GO 23066
// for i in tmp do
23007: LD_ADDR_VAR 0 2
23011: PUSH
23012: LD_VAR 0 4
23016: PUSH
23017: FOR_IN
23018: IFFALSE 23064
// for j = 1 to 3 do
23020: LD_ADDR_VAR 0 3
23024: PUSH
23025: DOUBLE
23026: LD_INT 1
23028: DEC
23029: ST_TO_ADDR
23030: LD_INT 3
23032: PUSH
23033: FOR_TO
23034: IFFALSE 23060
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23036: LD_VAR 0 2
23040: PPUSH
23041: CALL_OW 274
23045: PPUSH
23046: LD_VAR 0 3
23050: PPUSH
23051: LD_INT 99999
23053: PPUSH
23054: CALL_OW 277
23058: GO 23033
23060: POP
23061: POP
23062: GO 23017
23064: POP
23065: POP
// end ;
23066: LD_VAR 0 1
23070: RET
// export function hHackSetLevel10 ; var i , j ; begin
23071: LD_INT 0
23073: PPUSH
23074: PPUSH
23075: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23076: LD_ADDR_VAR 0 2
23080: PUSH
23081: LD_INT 21
23083: PUSH
23084: LD_INT 1
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PPUSH
23091: CALL_OW 69
23095: PUSH
23096: FOR_IN
23097: IFFALSE 23149
// if IsSelected ( i ) then
23099: LD_VAR 0 2
23103: PPUSH
23104: CALL_OW 306
23108: IFFALSE 23147
// begin for j := 1 to 4 do
23110: LD_ADDR_VAR 0 3
23114: PUSH
23115: DOUBLE
23116: LD_INT 1
23118: DEC
23119: ST_TO_ADDR
23120: LD_INT 4
23122: PUSH
23123: FOR_TO
23124: IFFALSE 23145
// SetSkill ( i , j , 10 ) ;
23126: LD_VAR 0 2
23130: PPUSH
23131: LD_VAR 0 3
23135: PPUSH
23136: LD_INT 10
23138: PPUSH
23139: CALL_OW 237
23143: GO 23123
23145: POP
23146: POP
// end ;
23147: GO 23096
23149: POP
23150: POP
// end ;
23151: LD_VAR 0 1
23155: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23156: LD_INT 0
23158: PPUSH
23159: PPUSH
23160: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23161: LD_ADDR_VAR 0 2
23165: PUSH
23166: LD_INT 22
23168: PUSH
23169: LD_OWVAR 2
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 21
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PPUSH
23192: CALL_OW 69
23196: PUSH
23197: FOR_IN
23198: IFFALSE 23239
// begin for j := 1 to 4 do
23200: LD_ADDR_VAR 0 3
23204: PUSH
23205: DOUBLE
23206: LD_INT 1
23208: DEC
23209: ST_TO_ADDR
23210: LD_INT 4
23212: PUSH
23213: FOR_TO
23214: IFFALSE 23235
// SetSkill ( i , j , 10 ) ;
23216: LD_VAR 0 2
23220: PPUSH
23221: LD_VAR 0 3
23225: PPUSH
23226: LD_INT 10
23228: PPUSH
23229: CALL_OW 237
23233: GO 23213
23235: POP
23236: POP
// end ;
23237: GO 23197
23239: POP
23240: POP
// end ;
23241: LD_VAR 0 1
23245: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23246: LD_INT 0
23248: PPUSH
// uc_side := your_side ;
23249: LD_ADDR_OWVAR 20
23253: PUSH
23254: LD_OWVAR 2
23258: ST_TO_ADDR
// uc_nation := nation ;
23259: LD_ADDR_OWVAR 21
23263: PUSH
23264: LD_VAR 0 1
23268: ST_TO_ADDR
// InitHc ;
23269: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23273: LD_INT 0
23275: PPUSH
23276: LD_VAR 0 2
23280: PPUSH
23281: LD_VAR 0 3
23285: PPUSH
23286: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23290: LD_VAR 0 4
23294: PPUSH
23295: LD_VAR 0 5
23299: PPUSH
23300: CALL_OW 428
23304: PUSH
23305: LD_INT 0
23307: EQUAL
23308: IFFALSE 23332
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23310: CALL_OW 44
23314: PPUSH
23315: LD_VAR 0 4
23319: PPUSH
23320: LD_VAR 0 5
23324: PPUSH
23325: LD_INT 1
23327: PPUSH
23328: CALL_OW 48
// end ;
23332: LD_VAR 0 6
23336: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23337: LD_INT 0
23339: PPUSH
23340: PPUSH
// uc_side := your_side ;
23341: LD_ADDR_OWVAR 20
23345: PUSH
23346: LD_OWVAR 2
23350: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23351: LD_VAR 0 1
23355: PUSH
23356: LD_INT 1
23358: PUSH
23359: LD_INT 2
23361: PUSH
23362: LD_INT 3
23364: PUSH
23365: LD_INT 4
23367: PUSH
23368: LD_INT 5
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: IN
23378: IFFALSE 23390
// uc_nation := nation_american else
23380: LD_ADDR_OWVAR 21
23384: PUSH
23385: LD_INT 1
23387: ST_TO_ADDR
23388: GO 23433
// if chassis in [ 11 , 12 , 13 , 14 ] then
23390: LD_VAR 0 1
23394: PUSH
23395: LD_INT 11
23397: PUSH
23398: LD_INT 12
23400: PUSH
23401: LD_INT 13
23403: PUSH
23404: LD_INT 14
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: IN
23413: IFFALSE 23425
// uc_nation := nation_arabian else
23415: LD_ADDR_OWVAR 21
23419: PUSH
23420: LD_INT 2
23422: ST_TO_ADDR
23423: GO 23433
// uc_nation := nation_russian ;
23425: LD_ADDR_OWVAR 21
23429: PUSH
23430: LD_INT 3
23432: ST_TO_ADDR
// vc_chassis := chassis ;
23433: LD_ADDR_OWVAR 37
23437: PUSH
23438: LD_VAR 0 1
23442: ST_TO_ADDR
// vc_engine := engine ;
23443: LD_ADDR_OWVAR 39
23447: PUSH
23448: LD_VAR 0 2
23452: ST_TO_ADDR
// vc_control := control ;
23453: LD_ADDR_OWVAR 38
23457: PUSH
23458: LD_VAR 0 3
23462: ST_TO_ADDR
// vc_weapon := weapon ;
23463: LD_ADDR_OWVAR 40
23467: PUSH
23468: LD_VAR 0 4
23472: ST_TO_ADDR
// un := CreateVehicle ;
23473: LD_ADDR_VAR 0 8
23477: PUSH
23478: CALL_OW 45
23482: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23483: LD_VAR 0 8
23487: PPUSH
23488: LD_INT 0
23490: PPUSH
23491: LD_INT 5
23493: PPUSH
23494: CALL_OW 12
23498: PPUSH
23499: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23503: LD_VAR 0 8
23507: PPUSH
23508: LD_VAR 0 5
23512: PPUSH
23513: LD_VAR 0 6
23517: PPUSH
23518: LD_INT 1
23520: PPUSH
23521: CALL_OW 48
// end ;
23525: LD_VAR 0 7
23529: RET
// export hInvincible ; every 1 do
23530: GO 23532
23532: DISABLE
// hInvincible := [ ] ;
23533: LD_ADDR_EXP 83
23537: PUSH
23538: EMPTY
23539: ST_TO_ADDR
23540: END
// every 10 do var i ;
23541: GO 23543
23543: DISABLE
23544: LD_INT 0
23546: PPUSH
// begin enable ;
23547: ENABLE
// if not hInvincible then
23548: LD_EXP 83
23552: NOT
23553: IFFALSE 23557
// exit ;
23555: GO 23601
// for i in hInvincible do
23557: LD_ADDR_VAR 0 1
23561: PUSH
23562: LD_EXP 83
23566: PUSH
23567: FOR_IN
23568: IFFALSE 23599
// if GetLives ( i ) < 1000 then
23570: LD_VAR 0 1
23574: PPUSH
23575: CALL_OW 256
23579: PUSH
23580: LD_INT 1000
23582: LESS
23583: IFFALSE 23597
// SetLives ( i , 1000 ) ;
23585: LD_VAR 0 1
23589: PPUSH
23590: LD_INT 1000
23592: PPUSH
23593: CALL_OW 234
23597: GO 23567
23599: POP
23600: POP
// end ;
23601: PPOPN 1
23603: END
// export function hHackInvincible ; var i ; begin
23604: LD_INT 0
23606: PPUSH
23607: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23608: LD_ADDR_VAR 0 2
23612: PUSH
23613: LD_INT 2
23615: PUSH
23616: LD_INT 21
23618: PUSH
23619: LD_INT 1
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 21
23628: PUSH
23629: LD_INT 2
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: PPUSH
23641: CALL_OW 69
23645: PUSH
23646: FOR_IN
23647: IFFALSE 23708
// if IsSelected ( i ) then
23649: LD_VAR 0 2
23653: PPUSH
23654: CALL_OW 306
23658: IFFALSE 23706
// begin if i in hInvincible then
23660: LD_VAR 0 2
23664: PUSH
23665: LD_EXP 83
23669: IN
23670: IFFALSE 23690
// hInvincible := hInvincible diff i else
23672: LD_ADDR_EXP 83
23676: PUSH
23677: LD_EXP 83
23681: PUSH
23682: LD_VAR 0 2
23686: DIFF
23687: ST_TO_ADDR
23688: GO 23706
// hInvincible := hInvincible union i ;
23690: LD_ADDR_EXP 83
23694: PUSH
23695: LD_EXP 83
23699: PUSH
23700: LD_VAR 0 2
23704: UNION
23705: ST_TO_ADDR
// end ;
23706: GO 23646
23708: POP
23709: POP
// end ;
23710: LD_VAR 0 1
23714: RET
// export function hHackInvisible ; var i , j ; begin
23715: LD_INT 0
23717: PPUSH
23718: PPUSH
23719: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23720: LD_ADDR_VAR 0 2
23724: PUSH
23725: LD_INT 21
23727: PUSH
23728: LD_INT 1
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PPUSH
23735: CALL_OW 69
23739: PUSH
23740: FOR_IN
23741: IFFALSE 23765
// if IsSelected ( i ) then
23743: LD_VAR 0 2
23747: PPUSH
23748: CALL_OW 306
23752: IFFALSE 23763
// ComForceInvisible ( i ) ;
23754: LD_VAR 0 2
23758: PPUSH
23759: CALL_OW 496
23763: GO 23740
23765: POP
23766: POP
// end ;
23767: LD_VAR 0 1
23771: RET
// export function hHackChangeYourSide ; begin
23772: LD_INT 0
23774: PPUSH
// if your_side = 8 then
23775: LD_OWVAR 2
23779: PUSH
23780: LD_INT 8
23782: EQUAL
23783: IFFALSE 23795
// your_side := 0 else
23785: LD_ADDR_OWVAR 2
23789: PUSH
23790: LD_INT 0
23792: ST_TO_ADDR
23793: GO 23809
// your_side := your_side + 1 ;
23795: LD_ADDR_OWVAR 2
23799: PUSH
23800: LD_OWVAR 2
23804: PUSH
23805: LD_INT 1
23807: PLUS
23808: ST_TO_ADDR
// end ;
23809: LD_VAR 0 1
23813: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23814: LD_INT 0
23816: PPUSH
23817: PPUSH
23818: PPUSH
// for i in all_units do
23819: LD_ADDR_VAR 0 2
23823: PUSH
23824: LD_OWVAR 3
23828: PUSH
23829: FOR_IN
23830: IFFALSE 23908
// if IsSelected ( i ) then
23832: LD_VAR 0 2
23836: PPUSH
23837: CALL_OW 306
23841: IFFALSE 23906
// begin j := GetSide ( i ) ;
23843: LD_ADDR_VAR 0 3
23847: PUSH
23848: LD_VAR 0 2
23852: PPUSH
23853: CALL_OW 255
23857: ST_TO_ADDR
// if j = 8 then
23858: LD_VAR 0 3
23862: PUSH
23863: LD_INT 8
23865: EQUAL
23866: IFFALSE 23878
// j := 0 else
23868: LD_ADDR_VAR 0 3
23872: PUSH
23873: LD_INT 0
23875: ST_TO_ADDR
23876: GO 23892
// j := j + 1 ;
23878: LD_ADDR_VAR 0 3
23882: PUSH
23883: LD_VAR 0 3
23887: PUSH
23888: LD_INT 1
23890: PLUS
23891: ST_TO_ADDR
// SetSide ( i , j ) ;
23892: LD_VAR 0 2
23896: PPUSH
23897: LD_VAR 0 3
23901: PPUSH
23902: CALL_OW 235
// end ;
23906: GO 23829
23908: POP
23909: POP
// end ;
23910: LD_VAR 0 1
23914: RET
// export function hHackFog ; begin
23915: LD_INT 0
23917: PPUSH
// FogOff ( true ) ;
23918: LD_INT 1
23920: PPUSH
23921: CALL_OW 344
// end ;
23925: LD_VAR 0 1
23929: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23930: LD_INT 0
23932: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23933: LD_VAR 0 1
23937: PPUSH
23938: LD_VAR 0 2
23942: PPUSH
23943: LD_VAR 0 3
23947: PPUSH
23948: LD_INT 1
23950: PPUSH
23951: LD_INT 1
23953: PPUSH
23954: CALL_OW 483
// CenterOnXY ( x , y ) ;
23958: LD_VAR 0 2
23962: PPUSH
23963: LD_VAR 0 3
23967: PPUSH
23968: CALL_OW 84
// end ;
23972: LD_VAR 0 4
23976: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23977: LD_INT 0
23979: PPUSH
23980: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23981: LD_VAR 0 1
23985: NOT
23986: PUSH
23987: LD_VAR 0 2
23991: PPUSH
23992: LD_VAR 0 3
23996: PPUSH
23997: CALL_OW 488
24001: NOT
24002: OR
24003: PUSH
24004: LD_VAR 0 1
24008: PPUSH
24009: CALL_OW 266
24013: PUSH
24014: LD_INT 3
24016: NONEQUAL
24017: PUSH
24018: LD_VAR 0 1
24022: PPUSH
24023: CALL_OW 247
24027: PUSH
24028: LD_INT 1
24030: EQUAL
24031: NOT
24032: AND
24033: OR
24034: IFFALSE 24038
// exit ;
24036: GO 24187
// if GetType ( factory ) = unit_human then
24038: LD_VAR 0 1
24042: PPUSH
24043: CALL_OW 247
24047: PUSH
24048: LD_INT 1
24050: EQUAL
24051: IFFALSE 24068
// factory := IsInUnit ( factory ) ;
24053: LD_ADDR_VAR 0 1
24057: PUSH
24058: LD_VAR 0 1
24062: PPUSH
24063: CALL_OW 310
24067: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24068: LD_VAR 0 1
24072: PPUSH
24073: CALL_OW 266
24077: PUSH
24078: LD_INT 3
24080: NONEQUAL
24081: IFFALSE 24085
// exit ;
24083: GO 24187
// if HexInfo ( x , y ) = factory then
24085: LD_VAR 0 2
24089: PPUSH
24090: LD_VAR 0 3
24094: PPUSH
24095: CALL_OW 428
24099: PUSH
24100: LD_VAR 0 1
24104: EQUAL
24105: IFFALSE 24132
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24107: LD_ADDR_EXP 84
24111: PUSH
24112: LD_EXP 84
24116: PPUSH
24117: LD_VAR 0 1
24121: PPUSH
24122: LD_INT 0
24124: PPUSH
24125: CALL_OW 1
24129: ST_TO_ADDR
24130: GO 24183
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24132: LD_ADDR_EXP 84
24136: PUSH
24137: LD_EXP 84
24141: PPUSH
24142: LD_VAR 0 1
24146: PPUSH
24147: LD_VAR 0 1
24151: PPUSH
24152: CALL_OW 255
24156: PUSH
24157: LD_VAR 0 1
24161: PUSH
24162: LD_VAR 0 2
24166: PUSH
24167: LD_VAR 0 3
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: PPUSH
24178: CALL_OW 1
24182: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24183: CALL 24192 0 0
// end ;
24187: LD_VAR 0 4
24191: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24192: LD_INT 0
24194: PPUSH
24195: PPUSH
24196: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24197: LD_STRING resetFactoryWaypoint();
24199: PPUSH
24200: CALL_OW 559
// if factoryWaypoints then
24204: LD_EXP 84
24208: IFFALSE 24334
// begin list := PrepareArray ( factoryWaypoints ) ;
24210: LD_ADDR_VAR 0 3
24214: PUSH
24215: LD_EXP 84
24219: PPUSH
24220: CALL 71631 0 1
24224: ST_TO_ADDR
// for i := 1 to list do
24225: LD_ADDR_VAR 0 2
24229: PUSH
24230: DOUBLE
24231: LD_INT 1
24233: DEC
24234: ST_TO_ADDR
24235: LD_VAR 0 3
24239: PUSH
24240: FOR_TO
24241: IFFALSE 24332
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24243: LD_STRING setFactoryWaypointXY(
24245: PUSH
24246: LD_VAR 0 3
24250: PUSH
24251: LD_VAR 0 2
24255: ARRAY
24256: PUSH
24257: LD_INT 1
24259: ARRAY
24260: STR
24261: PUSH
24262: LD_STRING ,
24264: STR
24265: PUSH
24266: LD_VAR 0 3
24270: PUSH
24271: LD_VAR 0 2
24275: ARRAY
24276: PUSH
24277: LD_INT 2
24279: ARRAY
24280: STR
24281: PUSH
24282: LD_STRING ,
24284: STR
24285: PUSH
24286: LD_VAR 0 3
24290: PUSH
24291: LD_VAR 0 2
24295: ARRAY
24296: PUSH
24297: LD_INT 3
24299: ARRAY
24300: STR
24301: PUSH
24302: LD_STRING ,
24304: STR
24305: PUSH
24306: LD_VAR 0 3
24310: PUSH
24311: LD_VAR 0 2
24315: ARRAY
24316: PUSH
24317: LD_INT 4
24319: ARRAY
24320: STR
24321: PUSH
24322: LD_STRING )
24324: STR
24325: PPUSH
24326: CALL_OW 559
24330: GO 24240
24332: POP
24333: POP
// end ; end ;
24334: LD_VAR 0 1
24338: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24339: LD_INT 0
24341: PPUSH
// if HexInfo ( x , y ) = warehouse then
24342: LD_VAR 0 2
24346: PPUSH
24347: LD_VAR 0 3
24351: PPUSH
24352: CALL_OW 428
24356: PUSH
24357: LD_VAR 0 1
24361: EQUAL
24362: IFFALSE 24389
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24364: LD_ADDR_EXP 85
24368: PUSH
24369: LD_EXP 85
24373: PPUSH
24374: LD_VAR 0 1
24378: PPUSH
24379: LD_INT 0
24381: PPUSH
24382: CALL_OW 1
24386: ST_TO_ADDR
24387: GO 24440
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24389: LD_ADDR_EXP 85
24393: PUSH
24394: LD_EXP 85
24398: PPUSH
24399: LD_VAR 0 1
24403: PPUSH
24404: LD_VAR 0 1
24408: PPUSH
24409: CALL_OW 255
24413: PUSH
24414: LD_VAR 0 1
24418: PUSH
24419: LD_VAR 0 2
24423: PUSH
24424: LD_VAR 0 3
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: PPUSH
24435: CALL_OW 1
24439: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24440: CALL 24449 0 0
// end ;
24444: LD_VAR 0 4
24448: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24449: LD_INT 0
24451: PPUSH
24452: PPUSH
24453: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24454: LD_STRING resetWarehouseGatheringPoints();
24456: PPUSH
24457: CALL_OW 559
// if warehouseGatheringPoints then
24461: LD_EXP 85
24465: IFFALSE 24591
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24467: LD_ADDR_VAR 0 3
24471: PUSH
24472: LD_EXP 85
24476: PPUSH
24477: CALL 71631 0 1
24481: ST_TO_ADDR
// for i := 1 to list do
24482: LD_ADDR_VAR 0 2
24486: PUSH
24487: DOUBLE
24488: LD_INT 1
24490: DEC
24491: ST_TO_ADDR
24492: LD_VAR 0 3
24496: PUSH
24497: FOR_TO
24498: IFFALSE 24589
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24500: LD_STRING setWarehouseGatheringPointXY(
24502: PUSH
24503: LD_VAR 0 3
24507: PUSH
24508: LD_VAR 0 2
24512: ARRAY
24513: PUSH
24514: LD_INT 1
24516: ARRAY
24517: STR
24518: PUSH
24519: LD_STRING ,
24521: STR
24522: PUSH
24523: LD_VAR 0 3
24527: PUSH
24528: LD_VAR 0 2
24532: ARRAY
24533: PUSH
24534: LD_INT 2
24536: ARRAY
24537: STR
24538: PUSH
24539: LD_STRING ,
24541: STR
24542: PUSH
24543: LD_VAR 0 3
24547: PUSH
24548: LD_VAR 0 2
24552: ARRAY
24553: PUSH
24554: LD_INT 3
24556: ARRAY
24557: STR
24558: PUSH
24559: LD_STRING ,
24561: STR
24562: PUSH
24563: LD_VAR 0 3
24567: PUSH
24568: LD_VAR 0 2
24572: ARRAY
24573: PUSH
24574: LD_INT 4
24576: ARRAY
24577: STR
24578: PUSH
24579: LD_STRING )
24581: STR
24582: PPUSH
24583: CALL_OW 559
24587: GO 24497
24589: POP
24590: POP
// end ; end ;
24591: LD_VAR 0 1
24595: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24596: LD_EXP 85
24600: IFFALSE 25285
24602: GO 24604
24604: DISABLE
24605: LD_INT 0
24607: PPUSH
24608: PPUSH
24609: PPUSH
24610: PPUSH
24611: PPUSH
24612: PPUSH
24613: PPUSH
24614: PPUSH
24615: PPUSH
// begin enable ;
24616: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24617: LD_ADDR_VAR 0 3
24621: PUSH
24622: LD_EXP 85
24626: PPUSH
24627: CALL 71631 0 1
24631: ST_TO_ADDR
// if not list then
24632: LD_VAR 0 3
24636: NOT
24637: IFFALSE 24641
// exit ;
24639: GO 25285
// for i := 1 to list do
24641: LD_ADDR_VAR 0 1
24645: PUSH
24646: DOUBLE
24647: LD_INT 1
24649: DEC
24650: ST_TO_ADDR
24651: LD_VAR 0 3
24655: PUSH
24656: FOR_TO
24657: IFFALSE 25283
// begin depot := list [ i ] [ 2 ] ;
24659: LD_ADDR_VAR 0 8
24663: PUSH
24664: LD_VAR 0 3
24668: PUSH
24669: LD_VAR 0 1
24673: ARRAY
24674: PUSH
24675: LD_INT 2
24677: ARRAY
24678: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24679: LD_ADDR_VAR 0 5
24683: PUSH
24684: LD_VAR 0 3
24688: PUSH
24689: LD_VAR 0 1
24693: ARRAY
24694: PUSH
24695: LD_INT 1
24697: ARRAY
24698: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24699: LD_VAR 0 8
24703: PPUSH
24704: CALL_OW 301
24708: PUSH
24709: LD_VAR 0 5
24713: PUSH
24714: LD_VAR 0 8
24718: PPUSH
24719: CALL_OW 255
24723: NONEQUAL
24724: OR
24725: IFFALSE 24754
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24727: LD_ADDR_EXP 85
24731: PUSH
24732: LD_EXP 85
24736: PPUSH
24737: LD_VAR 0 8
24741: PPUSH
24742: LD_INT 0
24744: PPUSH
24745: CALL_OW 1
24749: ST_TO_ADDR
// exit ;
24750: POP
24751: POP
24752: GO 25285
// end ; x := list [ i ] [ 3 ] ;
24754: LD_ADDR_VAR 0 6
24758: PUSH
24759: LD_VAR 0 3
24763: PUSH
24764: LD_VAR 0 1
24768: ARRAY
24769: PUSH
24770: LD_INT 3
24772: ARRAY
24773: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24774: LD_ADDR_VAR 0 7
24778: PUSH
24779: LD_VAR 0 3
24783: PUSH
24784: LD_VAR 0 1
24788: ARRAY
24789: PUSH
24790: LD_INT 4
24792: ARRAY
24793: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24794: LD_ADDR_VAR 0 9
24798: PUSH
24799: LD_VAR 0 6
24803: PPUSH
24804: LD_VAR 0 7
24808: PPUSH
24809: LD_INT 16
24811: PPUSH
24812: CALL 70219 0 3
24816: ST_TO_ADDR
// if not cratesNearbyPoint then
24817: LD_VAR 0 9
24821: NOT
24822: IFFALSE 24828
// exit ;
24824: POP
24825: POP
24826: GO 25285
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24828: LD_ADDR_VAR 0 4
24832: PUSH
24833: LD_INT 22
24835: PUSH
24836: LD_VAR 0 5
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 3
24847: PUSH
24848: LD_INT 60
24850: PUSH
24851: EMPTY
24852: LIST
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 91
24860: PUSH
24861: LD_VAR 0 8
24865: PUSH
24866: LD_INT 6
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: LD_INT 25
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 25
24889: PUSH
24890: LD_INT 16
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: LIST
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: PPUSH
24908: CALL_OW 69
24912: PUSH
24913: LD_VAR 0 8
24917: PPUSH
24918: CALL_OW 313
24922: PPUSH
24923: LD_INT 3
24925: PUSH
24926: LD_INT 60
24928: PUSH
24929: EMPTY
24930: LIST
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: LD_INT 25
24941: PUSH
24942: LD_INT 2
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 25
24951: PUSH
24952: LD_INT 16
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: LIST
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PPUSH
24968: CALL_OW 72
24972: UNION
24973: ST_TO_ADDR
// if tmp then
24974: LD_VAR 0 4
24978: IFFALSE 25058
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24980: LD_ADDR_VAR 0 4
24984: PUSH
24985: LD_VAR 0 4
24989: PPUSH
24990: LD_INT 3
24992: PPUSH
24993: CALL 68188 0 2
24997: ST_TO_ADDR
// for j in tmp do
24998: LD_ADDR_VAR 0 2
25002: PUSH
25003: LD_VAR 0 4
25007: PUSH
25008: FOR_IN
25009: IFFALSE 25052
// begin if IsInUnit ( j ) then
25011: LD_VAR 0 2
25015: PPUSH
25016: CALL_OW 310
25020: IFFALSE 25031
// ComExit ( j ) ;
25022: LD_VAR 0 2
25026: PPUSH
25027: CALL 68271 0 1
// AddComCollect ( j , x , y ) ;
25031: LD_VAR 0 2
25035: PPUSH
25036: LD_VAR 0 6
25040: PPUSH
25041: LD_VAR 0 7
25045: PPUSH
25046: CALL_OW 177
// end ;
25050: GO 25008
25052: POP
25053: POP
// exit ;
25054: POP
25055: POP
25056: GO 25285
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25058: LD_ADDR_VAR 0 4
25062: PUSH
25063: LD_INT 22
25065: PUSH
25066: LD_VAR 0 5
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 91
25077: PUSH
25078: LD_VAR 0 8
25082: PUSH
25083: LD_INT 8
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 2
25093: PUSH
25094: LD_INT 34
25096: PUSH
25097: LD_INT 12
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 34
25106: PUSH
25107: LD_INT 51
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 34
25116: PUSH
25117: LD_INT 32
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 34
25126: PUSH
25127: LD_INT 89
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: LIST
25145: PPUSH
25146: CALL_OW 69
25150: ST_TO_ADDR
// if tmp then
25151: LD_VAR 0 4
25155: IFFALSE 25281
// begin for j in tmp do
25157: LD_ADDR_VAR 0 2
25161: PUSH
25162: LD_VAR 0 4
25166: PUSH
25167: FOR_IN
25168: IFFALSE 25279
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25170: LD_VAR 0 2
25174: PPUSH
25175: CALL_OW 262
25179: PUSH
25180: LD_INT 3
25182: EQUAL
25183: PUSH
25184: LD_VAR 0 2
25188: PPUSH
25189: CALL_OW 261
25193: PUSH
25194: LD_INT 20
25196: GREATER
25197: OR
25198: PUSH
25199: LD_VAR 0 2
25203: PPUSH
25204: CALL_OW 314
25208: NOT
25209: AND
25210: PUSH
25211: LD_VAR 0 2
25215: PPUSH
25216: CALL_OW 263
25220: PUSH
25221: LD_INT 1
25223: NONEQUAL
25224: PUSH
25225: LD_VAR 0 2
25229: PPUSH
25230: CALL_OW 311
25234: OR
25235: AND
25236: IFFALSE 25277
// begin ComCollect ( j , x , y ) ;
25238: LD_VAR 0 2
25242: PPUSH
25243: LD_VAR 0 6
25247: PPUSH
25248: LD_VAR 0 7
25252: PPUSH
25253: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25257: LD_VAR 0 2
25261: PPUSH
25262: LD_VAR 0 8
25266: PPUSH
25267: CALL_OW 172
// exit ;
25271: POP
25272: POP
25273: POP
25274: POP
25275: GO 25285
// end ;
25277: GO 25167
25279: POP
25280: POP
// end ; end ;
25281: GO 24656
25283: POP
25284: POP
// end ; end_of_file
25285: PPOPN 9
25287: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25288: LD_INT 0
25290: PPUSH
25291: PPUSH
25292: PPUSH
25293: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25294: LD_VAR 0 1
25298: PPUSH
25299: CALL_OW 264
25303: PUSH
25304: LD_INT 91
25306: EQUAL
25307: IFFALSE 25379
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25309: LD_INT 68
25311: PPUSH
25312: LD_VAR 0 1
25316: PPUSH
25317: CALL_OW 255
25321: PPUSH
25322: CALL_OW 321
25326: PUSH
25327: LD_INT 2
25329: EQUAL
25330: IFFALSE 25342
// eff := 70 else
25332: LD_ADDR_VAR 0 4
25336: PUSH
25337: LD_INT 70
25339: ST_TO_ADDR
25340: GO 25350
// eff := 30 ;
25342: LD_ADDR_VAR 0 4
25346: PUSH
25347: LD_INT 30
25349: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25350: LD_VAR 0 1
25354: PPUSH
25355: CALL_OW 250
25359: PPUSH
25360: LD_VAR 0 1
25364: PPUSH
25365: CALL_OW 251
25369: PPUSH
25370: LD_VAR 0 4
25374: PPUSH
25375: CALL_OW 495
// end ; end ;
25379: LD_VAR 0 2
25383: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25384: LD_INT 0
25386: PPUSH
// end ;
25387: LD_VAR 0 4
25391: RET
// export function SOS_Command ( cmd ) ; begin
25392: LD_INT 0
25394: PPUSH
// end ;
25395: LD_VAR 0 2
25399: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25400: LD_INT 0
25402: PPUSH
// end ;
25403: LD_VAR 0 6
25407: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25408: LD_INT 0
25410: PPUSH
25411: PPUSH
// if not vehicle or not factory then
25412: LD_VAR 0 1
25416: NOT
25417: PUSH
25418: LD_VAR 0 2
25422: NOT
25423: OR
25424: IFFALSE 25428
// exit ;
25426: GO 25659
// if factoryWaypoints >= factory then
25428: LD_EXP 84
25432: PUSH
25433: LD_VAR 0 2
25437: GREATEREQUAL
25438: IFFALSE 25659
// if factoryWaypoints [ factory ] then
25440: LD_EXP 84
25444: PUSH
25445: LD_VAR 0 2
25449: ARRAY
25450: IFFALSE 25659
// begin if GetControl ( vehicle ) = control_manual then
25452: LD_VAR 0 1
25456: PPUSH
25457: CALL_OW 263
25461: PUSH
25462: LD_INT 1
25464: EQUAL
25465: IFFALSE 25546
// begin driver := IsDrivenBy ( vehicle ) ;
25467: LD_ADDR_VAR 0 4
25471: PUSH
25472: LD_VAR 0 1
25476: PPUSH
25477: CALL_OW 311
25481: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25482: LD_VAR 0 4
25486: PPUSH
25487: LD_EXP 84
25491: PUSH
25492: LD_VAR 0 2
25496: ARRAY
25497: PUSH
25498: LD_INT 3
25500: ARRAY
25501: PPUSH
25502: LD_EXP 84
25506: PUSH
25507: LD_VAR 0 2
25511: ARRAY
25512: PUSH
25513: LD_INT 4
25515: ARRAY
25516: PPUSH
25517: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25521: LD_VAR 0 4
25525: PPUSH
25526: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25530: LD_VAR 0 4
25534: PPUSH
25535: LD_VAR 0 2
25539: PPUSH
25540: CALL_OW 180
// end else
25544: GO 25659
// if GetControl ( vehicle ) = control_remote then
25546: LD_VAR 0 1
25550: PPUSH
25551: CALL_OW 263
25555: PUSH
25556: LD_INT 2
25558: EQUAL
25559: IFFALSE 25620
// begin wait ( 0 0$2 ) ;
25561: LD_INT 70
25563: PPUSH
25564: CALL_OW 67
// if Connect ( vehicle ) then
25568: LD_VAR 0 1
25572: PPUSH
25573: CALL 38490 0 1
25577: IFFALSE 25618
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25579: LD_VAR 0 1
25583: PPUSH
25584: LD_EXP 84
25588: PUSH
25589: LD_VAR 0 2
25593: ARRAY
25594: PUSH
25595: LD_INT 3
25597: ARRAY
25598: PPUSH
25599: LD_EXP 84
25603: PUSH
25604: LD_VAR 0 2
25608: ARRAY
25609: PUSH
25610: LD_INT 4
25612: ARRAY
25613: PPUSH
25614: CALL_OW 171
// end else
25618: GO 25659
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25620: LD_VAR 0 1
25624: PPUSH
25625: LD_EXP 84
25629: PUSH
25630: LD_VAR 0 2
25634: ARRAY
25635: PUSH
25636: LD_INT 3
25638: ARRAY
25639: PPUSH
25640: LD_EXP 84
25644: PUSH
25645: LD_VAR 0 2
25649: ARRAY
25650: PUSH
25651: LD_INT 4
25653: ARRAY
25654: PPUSH
25655: CALL_OW 171
// end ; end ;
25659: LD_VAR 0 3
25663: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25664: LD_INT 0
25666: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25667: LD_VAR 0 1
25671: PUSH
25672: LD_INT 250
25674: EQUAL
25675: PUSH
25676: LD_VAR 0 2
25680: PPUSH
25681: CALL_OW 264
25685: PUSH
25686: LD_INT 81
25688: EQUAL
25689: AND
25690: IFFALSE 25711
// MinerPlaceMine ( unit , x , y ) ;
25692: LD_VAR 0 2
25696: PPUSH
25697: LD_VAR 0 4
25701: PPUSH
25702: LD_VAR 0 5
25706: PPUSH
25707: CALL 28701 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25711: LD_VAR 0 1
25715: PUSH
25716: LD_INT 251
25718: EQUAL
25719: PUSH
25720: LD_VAR 0 2
25724: PPUSH
25725: CALL_OW 264
25729: PUSH
25730: LD_INT 81
25732: EQUAL
25733: AND
25734: IFFALSE 25755
// MinerDetonateMine ( unit , x , y ) ;
25736: LD_VAR 0 2
25740: PPUSH
25741: LD_VAR 0 4
25745: PPUSH
25746: LD_VAR 0 5
25750: PPUSH
25751: CALL 28976 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25755: LD_VAR 0 1
25759: PUSH
25760: LD_INT 252
25762: EQUAL
25763: PUSH
25764: LD_VAR 0 2
25768: PPUSH
25769: CALL_OW 264
25773: PUSH
25774: LD_INT 81
25776: EQUAL
25777: AND
25778: IFFALSE 25799
// MinerCreateMinefield ( unit , x , y ) ;
25780: LD_VAR 0 2
25784: PPUSH
25785: LD_VAR 0 4
25789: PPUSH
25790: LD_VAR 0 5
25794: PPUSH
25795: CALL 29393 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25799: LD_VAR 0 1
25803: PUSH
25804: LD_INT 253
25806: EQUAL
25807: PUSH
25808: LD_VAR 0 2
25812: PPUSH
25813: CALL_OW 257
25817: PUSH
25818: LD_INT 5
25820: EQUAL
25821: AND
25822: IFFALSE 25843
// ComBinocular ( unit , x , y ) ;
25824: LD_VAR 0 2
25828: PPUSH
25829: LD_VAR 0 4
25833: PPUSH
25834: LD_VAR 0 5
25838: PPUSH
25839: CALL 29762 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25843: LD_VAR 0 1
25847: PUSH
25848: LD_INT 254
25850: EQUAL
25851: PUSH
25852: LD_VAR 0 2
25856: PPUSH
25857: CALL_OW 264
25861: PUSH
25862: LD_INT 99
25864: EQUAL
25865: AND
25866: PUSH
25867: LD_VAR 0 3
25871: PPUSH
25872: CALL_OW 263
25876: PUSH
25877: LD_INT 3
25879: EQUAL
25880: AND
25881: IFFALSE 25897
// HackDestroyVehicle ( unit , selectedUnit ) ;
25883: LD_VAR 0 2
25887: PPUSH
25888: LD_VAR 0 3
25892: PPUSH
25893: CALL 28065 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25897: LD_VAR 0 1
25901: PUSH
25902: LD_INT 255
25904: EQUAL
25905: PUSH
25906: LD_VAR 0 2
25910: PPUSH
25911: CALL_OW 264
25915: PUSH
25916: LD_INT 14
25918: PUSH
25919: LD_INT 53
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: IN
25926: AND
25927: PUSH
25928: LD_VAR 0 4
25932: PPUSH
25933: LD_VAR 0 5
25937: PPUSH
25938: CALL_OW 488
25942: AND
25943: IFFALSE 25967
// CutTreeXYR ( unit , x , y , 12 ) ;
25945: LD_VAR 0 2
25949: PPUSH
25950: LD_VAR 0 4
25954: PPUSH
25955: LD_VAR 0 5
25959: PPUSH
25960: LD_INT 12
25962: PPUSH
25963: CALL 26062 0 4
// if cmd = 256 then
25967: LD_VAR 0 1
25971: PUSH
25972: LD_INT 256
25974: EQUAL
25975: IFFALSE 25996
// SetFactoryWaypoint ( unit , x , y ) ;
25977: LD_VAR 0 2
25981: PPUSH
25982: LD_VAR 0 4
25986: PPUSH
25987: LD_VAR 0 5
25991: PPUSH
25992: CALL 23977 0 3
// if cmd = 257 then
25996: LD_VAR 0 1
26000: PUSH
26001: LD_INT 257
26003: EQUAL
26004: IFFALSE 26025
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26006: LD_VAR 0 2
26010: PPUSH
26011: LD_VAR 0 4
26015: PPUSH
26016: LD_VAR 0 5
26020: PPUSH
26021: CALL 24339 0 3
// if cmd = 258 then
26025: LD_VAR 0 1
26029: PUSH
26030: LD_INT 258
26032: EQUAL
26033: IFFALSE 26057
// BurnTreeXYR ( unit , x , y , 8 ) ;
26035: LD_VAR 0 2
26039: PPUSH
26040: LD_VAR 0 4
26044: PPUSH
26045: LD_VAR 0 5
26049: PPUSH
26050: LD_INT 8
26052: PPUSH
26053: CALL 26456 0 4
// end ;
26057: LD_VAR 0 6
26061: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26062: LD_INT 0
26064: PPUSH
26065: PPUSH
26066: PPUSH
26067: PPUSH
26068: PPUSH
26069: PPUSH
26070: PPUSH
26071: PPUSH
26072: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
26073: LD_VAR 0 1
26077: PPUSH
26078: CALL_OW 302
26082: NOT
26083: PUSH
26084: LD_VAR 0 2
26088: PPUSH
26089: LD_VAR 0 3
26093: PPUSH
26094: CALL_OW 488
26098: NOT
26099: OR
26100: PUSH
26101: LD_VAR 0 4
26105: NOT
26106: OR
26107: IFFALSE 26111
// exit ;
26109: GO 26451
// list := [ ] ;
26111: LD_ADDR_VAR 0 13
26115: PUSH
26116: EMPTY
26117: ST_TO_ADDR
// if x - r < 0 then
26118: LD_VAR 0 2
26122: PUSH
26123: LD_VAR 0 4
26127: MINUS
26128: PUSH
26129: LD_INT 0
26131: LESS
26132: IFFALSE 26144
// min_x := 0 else
26134: LD_ADDR_VAR 0 7
26138: PUSH
26139: LD_INT 0
26141: ST_TO_ADDR
26142: GO 26160
// min_x := x - r ;
26144: LD_ADDR_VAR 0 7
26148: PUSH
26149: LD_VAR 0 2
26153: PUSH
26154: LD_VAR 0 4
26158: MINUS
26159: ST_TO_ADDR
// if y - r < 0 then
26160: LD_VAR 0 3
26164: PUSH
26165: LD_VAR 0 4
26169: MINUS
26170: PUSH
26171: LD_INT 0
26173: LESS
26174: IFFALSE 26186
// min_y := 0 else
26176: LD_ADDR_VAR 0 8
26180: PUSH
26181: LD_INT 0
26183: ST_TO_ADDR
26184: GO 26202
// min_y := y - r ;
26186: LD_ADDR_VAR 0 8
26190: PUSH
26191: LD_VAR 0 3
26195: PUSH
26196: LD_VAR 0 4
26200: MINUS
26201: ST_TO_ADDR
// max_x := x + r ;
26202: LD_ADDR_VAR 0 9
26206: PUSH
26207: LD_VAR 0 2
26211: PUSH
26212: LD_VAR 0 4
26216: PLUS
26217: ST_TO_ADDR
// max_y := y + r ;
26218: LD_ADDR_VAR 0 10
26222: PUSH
26223: LD_VAR 0 3
26227: PUSH
26228: LD_VAR 0 4
26232: PLUS
26233: ST_TO_ADDR
// for _x = min_x to max_x do
26234: LD_ADDR_VAR 0 11
26238: PUSH
26239: DOUBLE
26240: LD_VAR 0 7
26244: DEC
26245: ST_TO_ADDR
26246: LD_VAR 0 9
26250: PUSH
26251: FOR_TO
26252: IFFALSE 26369
// for _y = min_y to max_y do
26254: LD_ADDR_VAR 0 12
26258: PUSH
26259: DOUBLE
26260: LD_VAR 0 8
26264: DEC
26265: ST_TO_ADDR
26266: LD_VAR 0 10
26270: PUSH
26271: FOR_TO
26272: IFFALSE 26365
// begin if not ValidHex ( _x , _y ) then
26274: LD_VAR 0 11
26278: PPUSH
26279: LD_VAR 0 12
26283: PPUSH
26284: CALL_OW 488
26288: NOT
26289: IFFALSE 26293
// continue ;
26291: GO 26271
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26293: LD_VAR 0 11
26297: PPUSH
26298: LD_VAR 0 12
26302: PPUSH
26303: CALL_OW 351
26307: PUSH
26308: LD_VAR 0 11
26312: PPUSH
26313: LD_VAR 0 12
26317: PPUSH
26318: CALL_OW 554
26322: AND
26323: IFFALSE 26363
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26325: LD_ADDR_VAR 0 13
26329: PUSH
26330: LD_VAR 0 13
26334: PPUSH
26335: LD_VAR 0 13
26339: PUSH
26340: LD_INT 1
26342: PLUS
26343: PPUSH
26344: LD_VAR 0 11
26348: PUSH
26349: LD_VAR 0 12
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PPUSH
26358: CALL_OW 2
26362: ST_TO_ADDR
// end ;
26363: GO 26271
26365: POP
26366: POP
26367: GO 26251
26369: POP
26370: POP
// if not list then
26371: LD_VAR 0 13
26375: NOT
26376: IFFALSE 26380
// exit ;
26378: GO 26451
// for i in list do
26380: LD_ADDR_VAR 0 6
26384: PUSH
26385: LD_VAR 0 13
26389: PUSH
26390: FOR_IN
26391: IFFALSE 26449
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26393: LD_VAR 0 1
26397: PPUSH
26398: LD_STRING M
26400: PUSH
26401: LD_VAR 0 6
26405: PUSH
26406: LD_INT 1
26408: ARRAY
26409: PUSH
26410: LD_VAR 0 6
26414: PUSH
26415: LD_INT 2
26417: ARRAY
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: LD_INT 0
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: PUSH
26440: EMPTY
26441: LIST
26442: PPUSH
26443: CALL_OW 447
26447: GO 26390
26449: POP
26450: POP
// end ;
26451: LD_VAR 0 5
26455: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
26456: LD_INT 0
26458: PPUSH
26459: PPUSH
26460: PPUSH
26461: PPUSH
26462: PPUSH
26463: PPUSH
26464: PPUSH
26465: PPUSH
26466: PPUSH
26467: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
26468: LD_VAR 0 1
26472: PPUSH
26473: CALL_OW 302
26477: NOT
26478: PUSH
26479: LD_VAR 0 2
26483: PPUSH
26484: LD_VAR 0 3
26488: PPUSH
26489: CALL_OW 488
26493: NOT
26494: OR
26495: PUSH
26496: LD_VAR 0 4
26500: NOT
26501: OR
26502: IFFALSE 26506
// exit ;
26504: GO 27019
// list := [ ] ;
26506: LD_ADDR_VAR 0 13
26510: PUSH
26511: EMPTY
26512: ST_TO_ADDR
// if x - r < 0 then
26513: LD_VAR 0 2
26517: PUSH
26518: LD_VAR 0 4
26522: MINUS
26523: PUSH
26524: LD_INT 0
26526: LESS
26527: IFFALSE 26539
// min_x := 0 else
26529: LD_ADDR_VAR 0 7
26533: PUSH
26534: LD_INT 0
26536: ST_TO_ADDR
26537: GO 26555
// min_x := x - r ;
26539: LD_ADDR_VAR 0 7
26543: PUSH
26544: LD_VAR 0 2
26548: PUSH
26549: LD_VAR 0 4
26553: MINUS
26554: ST_TO_ADDR
// if y - r < 0 then
26555: LD_VAR 0 3
26559: PUSH
26560: LD_VAR 0 4
26564: MINUS
26565: PUSH
26566: LD_INT 0
26568: LESS
26569: IFFALSE 26581
// min_y := 0 else
26571: LD_ADDR_VAR 0 8
26575: PUSH
26576: LD_INT 0
26578: ST_TO_ADDR
26579: GO 26597
// min_y := y - r ;
26581: LD_ADDR_VAR 0 8
26585: PUSH
26586: LD_VAR 0 3
26590: PUSH
26591: LD_VAR 0 4
26595: MINUS
26596: ST_TO_ADDR
// max_x := x + r ;
26597: LD_ADDR_VAR 0 9
26601: PUSH
26602: LD_VAR 0 2
26606: PUSH
26607: LD_VAR 0 4
26611: PLUS
26612: ST_TO_ADDR
// max_y := y + r ;
26613: LD_ADDR_VAR 0 10
26617: PUSH
26618: LD_VAR 0 3
26622: PUSH
26623: LD_VAR 0 4
26627: PLUS
26628: ST_TO_ADDR
// for _x = min_x to max_x do
26629: LD_ADDR_VAR 0 11
26633: PUSH
26634: DOUBLE
26635: LD_VAR 0 7
26639: DEC
26640: ST_TO_ADDR
26641: LD_VAR 0 9
26645: PUSH
26646: FOR_TO
26647: IFFALSE 26764
// for _y = min_y to max_y do
26649: LD_ADDR_VAR 0 12
26653: PUSH
26654: DOUBLE
26655: LD_VAR 0 8
26659: DEC
26660: ST_TO_ADDR
26661: LD_VAR 0 10
26665: PUSH
26666: FOR_TO
26667: IFFALSE 26760
// begin if not ValidHex ( _x , _y ) then
26669: LD_VAR 0 11
26673: PPUSH
26674: LD_VAR 0 12
26678: PPUSH
26679: CALL_OW 488
26683: NOT
26684: IFFALSE 26688
// continue ;
26686: GO 26666
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26688: LD_VAR 0 11
26692: PPUSH
26693: LD_VAR 0 12
26697: PPUSH
26698: CALL_OW 351
26702: PUSH
26703: LD_VAR 0 11
26707: PPUSH
26708: LD_VAR 0 12
26712: PPUSH
26713: CALL_OW 554
26717: AND
26718: IFFALSE 26758
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26720: LD_ADDR_VAR 0 13
26724: PUSH
26725: LD_VAR 0 13
26729: PPUSH
26730: LD_VAR 0 13
26734: PUSH
26735: LD_INT 1
26737: PLUS
26738: PPUSH
26739: LD_VAR 0 11
26743: PUSH
26744: LD_VAR 0 12
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PPUSH
26753: CALL_OW 2
26757: ST_TO_ADDR
// end ;
26758: GO 26666
26760: POP
26761: POP
26762: GO 26646
26764: POP
26765: POP
// if not list then
26766: LD_VAR 0 13
26770: NOT
26771: IFFALSE 26775
// exit ;
26773: GO 27019
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
26775: LD_ADDR_VAR 0 13
26779: PUSH
26780: LD_VAR 0 1
26784: PPUSH
26785: LD_VAR 0 13
26789: PPUSH
26790: LD_INT 1
26792: PPUSH
26793: LD_INT 1
26795: PPUSH
26796: CALL 35632 0 4
26800: ST_TO_ADDR
// ComStop ( flame ) ;
26801: LD_VAR 0 1
26805: PPUSH
26806: CALL_OW 141
// for i in list do
26810: LD_ADDR_VAR 0 6
26814: PUSH
26815: LD_VAR 0 13
26819: PUSH
26820: FOR_IN
26821: IFFALSE 26852
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
26823: LD_VAR 0 1
26827: PPUSH
26828: LD_VAR 0 6
26832: PUSH
26833: LD_INT 1
26835: ARRAY
26836: PPUSH
26837: LD_VAR 0 6
26841: PUSH
26842: LD_INT 2
26844: ARRAY
26845: PPUSH
26846: CALL_OW 176
26850: GO 26820
26852: POP
26853: POP
// repeat wait ( 0 0$1 ) ;
26854: LD_INT 35
26856: PPUSH
26857: CALL_OW 67
// task := GetTaskList ( flame ) ;
26861: LD_ADDR_VAR 0 14
26865: PUSH
26866: LD_VAR 0 1
26870: PPUSH
26871: CALL_OW 437
26875: ST_TO_ADDR
// if not task then
26876: LD_VAR 0 14
26880: NOT
26881: IFFALSE 26885
// exit ;
26883: GO 27019
// if task [ 1 ] [ 1 ] <> | then
26885: LD_VAR 0 14
26889: PUSH
26890: LD_INT 1
26892: ARRAY
26893: PUSH
26894: LD_INT 1
26896: ARRAY
26897: PUSH
26898: LD_STRING |
26900: NONEQUAL
26901: IFFALSE 26905
// exit ;
26903: GO 27019
// _x := task [ 1 ] [ 2 ] ;
26905: LD_ADDR_VAR 0 11
26909: PUSH
26910: LD_VAR 0 14
26914: PUSH
26915: LD_INT 1
26917: ARRAY
26918: PUSH
26919: LD_INT 2
26921: ARRAY
26922: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
26923: LD_ADDR_VAR 0 12
26927: PUSH
26928: LD_VAR 0 14
26932: PUSH
26933: LD_INT 1
26935: ARRAY
26936: PUSH
26937: LD_INT 3
26939: ARRAY
26940: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
26941: LD_VAR 0 11
26945: PPUSH
26946: LD_VAR 0 12
26950: PPUSH
26951: CALL_OW 351
26955: NOT
26956: PUSH
26957: LD_VAR 0 11
26961: PPUSH
26962: LD_VAR 0 12
26966: PPUSH
26967: CALL_OW 554
26971: NOT
26972: OR
26973: IFFALSE 27007
// begin task := Delete ( task , 1 ) ;
26975: LD_ADDR_VAR 0 14
26979: PUSH
26980: LD_VAR 0 14
26984: PPUSH
26985: LD_INT 1
26987: PPUSH
26988: CALL_OW 3
26992: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
26993: LD_VAR 0 1
26997: PPUSH
26998: LD_VAR 0 14
27002: PPUSH
27003: CALL_OW 446
// end ; until not HasTask ( flame ) ;
27007: LD_VAR 0 1
27011: PPUSH
27012: CALL_OW 314
27016: NOT
27017: IFFALSE 26854
// end ;
27019: LD_VAR 0 5
27023: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27024: LD_EXP 87
27028: NOT
27029: IFFALSE 27079
27031: GO 27033
27033: DISABLE
// begin initHack := true ;
27034: LD_ADDR_EXP 87
27038: PUSH
27039: LD_INT 1
27041: ST_TO_ADDR
// hackTanks := [ ] ;
27042: LD_ADDR_EXP 88
27046: PUSH
27047: EMPTY
27048: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27049: LD_ADDR_EXP 89
27053: PUSH
27054: EMPTY
27055: ST_TO_ADDR
// hackLimit := 3 ;
27056: LD_ADDR_EXP 90
27060: PUSH
27061: LD_INT 3
27063: ST_TO_ADDR
// hackDist := 12 ;
27064: LD_ADDR_EXP 91
27068: PUSH
27069: LD_INT 12
27071: ST_TO_ADDR
// hackCounter := [ ] ;
27072: LD_ADDR_EXP 92
27076: PUSH
27077: EMPTY
27078: ST_TO_ADDR
// end ;
27079: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27080: LD_EXP 87
27084: PUSH
27085: LD_INT 34
27087: PUSH
27088: LD_INT 99
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PPUSH
27095: CALL_OW 69
27099: AND
27100: IFFALSE 27353
27102: GO 27104
27104: DISABLE
27105: LD_INT 0
27107: PPUSH
27108: PPUSH
// begin enable ;
27109: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27110: LD_ADDR_VAR 0 1
27114: PUSH
27115: LD_INT 34
27117: PUSH
27118: LD_INT 99
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PPUSH
27125: CALL_OW 69
27129: PUSH
27130: FOR_IN
27131: IFFALSE 27351
// begin if not i in hackTanks then
27133: LD_VAR 0 1
27137: PUSH
27138: LD_EXP 88
27142: IN
27143: NOT
27144: IFFALSE 27227
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27146: LD_ADDR_EXP 88
27150: PUSH
27151: LD_EXP 88
27155: PPUSH
27156: LD_EXP 88
27160: PUSH
27161: LD_INT 1
27163: PLUS
27164: PPUSH
27165: LD_VAR 0 1
27169: PPUSH
27170: CALL_OW 1
27174: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27175: LD_ADDR_EXP 89
27179: PUSH
27180: LD_EXP 89
27184: PPUSH
27185: LD_EXP 89
27189: PUSH
27190: LD_INT 1
27192: PLUS
27193: PPUSH
27194: EMPTY
27195: PPUSH
27196: CALL_OW 1
27200: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27201: LD_ADDR_EXP 92
27205: PUSH
27206: LD_EXP 92
27210: PPUSH
27211: LD_EXP 92
27215: PUSH
27216: LD_INT 1
27218: PLUS
27219: PPUSH
27220: EMPTY
27221: PPUSH
27222: CALL_OW 1
27226: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27227: LD_VAR 0 1
27231: PPUSH
27232: CALL_OW 302
27236: NOT
27237: IFFALSE 27250
// begin HackUnlinkAll ( i ) ;
27239: LD_VAR 0 1
27243: PPUSH
27244: CALL 27356 0 1
// continue ;
27248: GO 27130
// end ; HackCheckCapturedStatus ( i ) ;
27250: LD_VAR 0 1
27254: PPUSH
27255: CALL 27799 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27259: LD_ADDR_VAR 0 2
27263: PUSH
27264: LD_INT 81
27266: PUSH
27267: LD_VAR 0 1
27271: PPUSH
27272: CALL_OW 255
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 33
27283: PUSH
27284: LD_INT 3
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 91
27293: PUSH
27294: LD_VAR 0 1
27298: PUSH
27299: LD_EXP 91
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 50
27311: PUSH
27312: EMPTY
27313: LIST
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: PPUSH
27321: CALL_OW 69
27325: ST_TO_ADDR
// if not tmp then
27326: LD_VAR 0 2
27330: NOT
27331: IFFALSE 27335
// continue ;
27333: GO 27130
// HackLink ( i , tmp ) ;
27335: LD_VAR 0 1
27339: PPUSH
27340: LD_VAR 0 2
27344: PPUSH
27345: CALL 27492 0 2
// end ;
27349: GO 27130
27351: POP
27352: POP
// end ;
27353: PPOPN 2
27355: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27356: LD_INT 0
27358: PPUSH
27359: PPUSH
27360: PPUSH
// if not hack in hackTanks then
27361: LD_VAR 0 1
27365: PUSH
27366: LD_EXP 88
27370: IN
27371: NOT
27372: IFFALSE 27376
// exit ;
27374: GO 27487
// index := GetElementIndex ( hackTanks , hack ) ;
27376: LD_ADDR_VAR 0 4
27380: PUSH
27381: LD_EXP 88
27385: PPUSH
27386: LD_VAR 0 1
27390: PPUSH
27391: CALL 34929 0 2
27395: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27396: LD_EXP 89
27400: PUSH
27401: LD_VAR 0 4
27405: ARRAY
27406: IFFALSE 27487
// begin for i in hackTanksCaptured [ index ] do
27408: LD_ADDR_VAR 0 3
27412: PUSH
27413: LD_EXP 89
27417: PUSH
27418: LD_VAR 0 4
27422: ARRAY
27423: PUSH
27424: FOR_IN
27425: IFFALSE 27451
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27427: LD_VAR 0 3
27431: PUSH
27432: LD_INT 1
27434: ARRAY
27435: PPUSH
27436: LD_VAR 0 3
27440: PUSH
27441: LD_INT 2
27443: ARRAY
27444: PPUSH
27445: CALL_OW 235
27449: GO 27424
27451: POP
27452: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27453: LD_ADDR_EXP 89
27457: PUSH
27458: LD_EXP 89
27462: PPUSH
27463: LD_VAR 0 4
27467: PPUSH
27468: EMPTY
27469: PPUSH
27470: CALL_OW 1
27474: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27475: LD_VAR 0 1
27479: PPUSH
27480: LD_INT 0
27482: PPUSH
27483: CALL_OW 505
// end ; end ;
27487: LD_VAR 0 2
27491: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27492: LD_INT 0
27494: PPUSH
27495: PPUSH
27496: PPUSH
// if not hack in hackTanks or not vehicles then
27497: LD_VAR 0 1
27501: PUSH
27502: LD_EXP 88
27506: IN
27507: NOT
27508: PUSH
27509: LD_VAR 0 2
27513: NOT
27514: OR
27515: IFFALSE 27519
// exit ;
27517: GO 27794
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27519: LD_ADDR_VAR 0 2
27523: PUSH
27524: LD_VAR 0 1
27528: PPUSH
27529: LD_VAR 0 2
27533: PPUSH
27534: LD_INT 1
27536: PPUSH
27537: LD_INT 1
27539: PPUSH
27540: CALL 35579 0 4
27544: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27545: LD_ADDR_VAR 0 5
27549: PUSH
27550: LD_EXP 88
27554: PPUSH
27555: LD_VAR 0 1
27559: PPUSH
27560: CALL 34929 0 2
27564: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27565: LD_EXP 89
27569: PUSH
27570: LD_VAR 0 5
27574: ARRAY
27575: PUSH
27576: LD_EXP 90
27580: LESS
27581: IFFALSE 27770
// begin for i := 1 to vehicles do
27583: LD_ADDR_VAR 0 4
27587: PUSH
27588: DOUBLE
27589: LD_INT 1
27591: DEC
27592: ST_TO_ADDR
27593: LD_VAR 0 2
27597: PUSH
27598: FOR_TO
27599: IFFALSE 27768
// begin if hackTanksCaptured [ index ] = hackLimit then
27601: LD_EXP 89
27605: PUSH
27606: LD_VAR 0 5
27610: ARRAY
27611: PUSH
27612: LD_EXP 90
27616: EQUAL
27617: IFFALSE 27621
// break ;
27619: GO 27768
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27621: LD_ADDR_EXP 92
27625: PUSH
27626: LD_EXP 92
27630: PPUSH
27631: LD_VAR 0 5
27635: PPUSH
27636: LD_EXP 92
27640: PUSH
27641: LD_VAR 0 5
27645: ARRAY
27646: PUSH
27647: LD_INT 1
27649: PLUS
27650: PPUSH
27651: CALL_OW 1
27655: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27656: LD_ADDR_EXP 89
27660: PUSH
27661: LD_EXP 89
27665: PPUSH
27666: LD_VAR 0 5
27670: PUSH
27671: LD_EXP 89
27675: PUSH
27676: LD_VAR 0 5
27680: ARRAY
27681: PUSH
27682: LD_INT 1
27684: PLUS
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PPUSH
27690: LD_VAR 0 2
27694: PUSH
27695: LD_VAR 0 4
27699: ARRAY
27700: PUSH
27701: LD_VAR 0 2
27705: PUSH
27706: LD_VAR 0 4
27710: ARRAY
27711: PPUSH
27712: CALL_OW 255
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PPUSH
27721: CALL 35144 0 3
27725: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27726: LD_VAR 0 2
27730: PUSH
27731: LD_VAR 0 4
27735: ARRAY
27736: PPUSH
27737: LD_VAR 0 1
27741: PPUSH
27742: CALL_OW 255
27746: PPUSH
27747: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27751: LD_VAR 0 2
27755: PUSH
27756: LD_VAR 0 4
27760: ARRAY
27761: PPUSH
27762: CALL_OW 141
// end ;
27766: GO 27598
27768: POP
27769: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27770: LD_VAR 0 1
27774: PPUSH
27775: LD_EXP 89
27779: PUSH
27780: LD_VAR 0 5
27784: ARRAY
27785: PUSH
27786: LD_INT 0
27788: PLUS
27789: PPUSH
27790: CALL_OW 505
// end ;
27794: LD_VAR 0 3
27798: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27799: LD_INT 0
27801: PPUSH
27802: PPUSH
27803: PPUSH
27804: PPUSH
// if not hack in hackTanks then
27805: LD_VAR 0 1
27809: PUSH
27810: LD_EXP 88
27814: IN
27815: NOT
27816: IFFALSE 27820
// exit ;
27818: GO 28060
// index := GetElementIndex ( hackTanks , hack ) ;
27820: LD_ADDR_VAR 0 4
27824: PUSH
27825: LD_EXP 88
27829: PPUSH
27830: LD_VAR 0 1
27834: PPUSH
27835: CALL 34929 0 2
27839: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27840: LD_ADDR_VAR 0 3
27844: PUSH
27845: DOUBLE
27846: LD_EXP 89
27850: PUSH
27851: LD_VAR 0 4
27855: ARRAY
27856: INC
27857: ST_TO_ADDR
27858: LD_INT 1
27860: PUSH
27861: FOR_DOWNTO
27862: IFFALSE 28034
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27864: LD_ADDR_VAR 0 5
27868: PUSH
27869: LD_EXP 89
27873: PUSH
27874: LD_VAR 0 4
27878: ARRAY
27879: PUSH
27880: LD_VAR 0 3
27884: ARRAY
27885: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27886: LD_VAR 0 5
27890: PUSH
27891: LD_INT 1
27893: ARRAY
27894: PPUSH
27895: CALL_OW 302
27899: NOT
27900: PUSH
27901: LD_VAR 0 5
27905: PUSH
27906: LD_INT 1
27908: ARRAY
27909: PPUSH
27910: CALL_OW 255
27914: PUSH
27915: LD_VAR 0 1
27919: PPUSH
27920: CALL_OW 255
27924: NONEQUAL
27925: OR
27926: IFFALSE 28032
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27928: LD_VAR 0 5
27932: PUSH
27933: LD_INT 1
27935: ARRAY
27936: PPUSH
27937: CALL_OW 305
27941: PUSH
27942: LD_VAR 0 5
27946: PUSH
27947: LD_INT 1
27949: ARRAY
27950: PPUSH
27951: CALL_OW 255
27955: PUSH
27956: LD_VAR 0 1
27960: PPUSH
27961: CALL_OW 255
27965: EQUAL
27966: AND
27967: IFFALSE 27991
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27969: LD_VAR 0 5
27973: PUSH
27974: LD_INT 1
27976: ARRAY
27977: PPUSH
27978: LD_VAR 0 5
27982: PUSH
27983: LD_INT 2
27985: ARRAY
27986: PPUSH
27987: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27991: LD_ADDR_EXP 89
27995: PUSH
27996: LD_EXP 89
28000: PPUSH
28001: LD_VAR 0 4
28005: PPUSH
28006: LD_EXP 89
28010: PUSH
28011: LD_VAR 0 4
28015: ARRAY
28016: PPUSH
28017: LD_VAR 0 3
28021: PPUSH
28022: CALL_OW 3
28026: PPUSH
28027: CALL_OW 1
28031: ST_TO_ADDR
// end ; end ;
28032: GO 27861
28034: POP
28035: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28036: LD_VAR 0 1
28040: PPUSH
28041: LD_EXP 89
28045: PUSH
28046: LD_VAR 0 4
28050: ARRAY
28051: PUSH
28052: LD_INT 0
28054: PLUS
28055: PPUSH
28056: CALL_OW 505
// end ;
28060: LD_VAR 0 2
28064: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28065: LD_INT 0
28067: PPUSH
28068: PPUSH
28069: PPUSH
28070: PPUSH
// if not hack in hackTanks then
28071: LD_VAR 0 1
28075: PUSH
28076: LD_EXP 88
28080: IN
28081: NOT
28082: IFFALSE 28086
// exit ;
28084: GO 28171
// index := GetElementIndex ( hackTanks , hack ) ;
28086: LD_ADDR_VAR 0 5
28090: PUSH
28091: LD_EXP 88
28095: PPUSH
28096: LD_VAR 0 1
28100: PPUSH
28101: CALL 34929 0 2
28105: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28106: LD_ADDR_VAR 0 4
28110: PUSH
28111: DOUBLE
28112: LD_INT 1
28114: DEC
28115: ST_TO_ADDR
28116: LD_EXP 89
28120: PUSH
28121: LD_VAR 0 5
28125: ARRAY
28126: PUSH
28127: FOR_TO
28128: IFFALSE 28169
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28130: LD_EXP 89
28134: PUSH
28135: LD_VAR 0 5
28139: ARRAY
28140: PUSH
28141: LD_VAR 0 4
28145: ARRAY
28146: PUSH
28147: LD_INT 1
28149: ARRAY
28150: PUSH
28151: LD_VAR 0 2
28155: EQUAL
28156: IFFALSE 28167
// KillUnit ( vehicle ) ;
28158: LD_VAR 0 2
28162: PPUSH
28163: CALL_OW 66
28167: GO 28127
28169: POP
28170: POP
// end ;
28171: LD_VAR 0 3
28175: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28176: LD_EXP 93
28180: NOT
28181: IFFALSE 28216
28183: GO 28185
28185: DISABLE
// begin initMiner := true ;
28186: LD_ADDR_EXP 93
28190: PUSH
28191: LD_INT 1
28193: ST_TO_ADDR
// minersList := [ ] ;
28194: LD_ADDR_EXP 94
28198: PUSH
28199: EMPTY
28200: ST_TO_ADDR
// minerMinesList := [ ] ;
28201: LD_ADDR_EXP 95
28205: PUSH
28206: EMPTY
28207: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28208: LD_ADDR_EXP 96
28212: PUSH
28213: LD_INT 5
28215: ST_TO_ADDR
// end ;
28216: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28217: LD_EXP 93
28221: PUSH
28222: LD_INT 34
28224: PUSH
28225: LD_INT 81
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PPUSH
28232: CALL_OW 69
28236: AND
28237: IFFALSE 28698
28239: GO 28241
28241: DISABLE
28242: LD_INT 0
28244: PPUSH
28245: PPUSH
28246: PPUSH
28247: PPUSH
// begin enable ;
28248: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28249: LD_ADDR_VAR 0 1
28253: PUSH
28254: LD_INT 34
28256: PUSH
28257: LD_INT 81
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PPUSH
28264: CALL_OW 69
28268: PUSH
28269: FOR_IN
28270: IFFALSE 28342
// begin if not i in minersList then
28272: LD_VAR 0 1
28276: PUSH
28277: LD_EXP 94
28281: IN
28282: NOT
28283: IFFALSE 28340
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28285: LD_ADDR_EXP 94
28289: PUSH
28290: LD_EXP 94
28294: PPUSH
28295: LD_EXP 94
28299: PUSH
28300: LD_INT 1
28302: PLUS
28303: PPUSH
28304: LD_VAR 0 1
28308: PPUSH
28309: CALL_OW 1
28313: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28314: LD_ADDR_EXP 95
28318: PUSH
28319: LD_EXP 95
28323: PPUSH
28324: LD_EXP 95
28328: PUSH
28329: LD_INT 1
28331: PLUS
28332: PPUSH
28333: EMPTY
28334: PPUSH
28335: CALL_OW 1
28339: ST_TO_ADDR
// end end ;
28340: GO 28269
28342: POP
28343: POP
// for i := minerMinesList downto 1 do
28344: LD_ADDR_VAR 0 1
28348: PUSH
28349: DOUBLE
28350: LD_EXP 95
28354: INC
28355: ST_TO_ADDR
28356: LD_INT 1
28358: PUSH
28359: FOR_DOWNTO
28360: IFFALSE 28696
// begin if IsLive ( minersList [ i ] ) then
28362: LD_EXP 94
28366: PUSH
28367: LD_VAR 0 1
28371: ARRAY
28372: PPUSH
28373: CALL_OW 300
28377: IFFALSE 28405
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28379: LD_EXP 94
28383: PUSH
28384: LD_VAR 0 1
28388: ARRAY
28389: PPUSH
28390: LD_EXP 95
28394: PUSH
28395: LD_VAR 0 1
28399: ARRAY
28400: PPUSH
28401: CALL_OW 505
// if not minerMinesList [ i ] then
28405: LD_EXP 95
28409: PUSH
28410: LD_VAR 0 1
28414: ARRAY
28415: NOT
28416: IFFALSE 28420
// continue ;
28418: GO 28359
// for j := minerMinesList [ i ] downto 1 do
28420: LD_ADDR_VAR 0 2
28424: PUSH
28425: DOUBLE
28426: LD_EXP 95
28430: PUSH
28431: LD_VAR 0 1
28435: ARRAY
28436: INC
28437: ST_TO_ADDR
28438: LD_INT 1
28440: PUSH
28441: FOR_DOWNTO
28442: IFFALSE 28692
// begin side := GetSide ( minersList [ i ] ) ;
28444: LD_ADDR_VAR 0 3
28448: PUSH
28449: LD_EXP 94
28453: PUSH
28454: LD_VAR 0 1
28458: ARRAY
28459: PPUSH
28460: CALL_OW 255
28464: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28465: LD_ADDR_VAR 0 4
28469: PUSH
28470: LD_EXP 95
28474: PUSH
28475: LD_VAR 0 1
28479: ARRAY
28480: PUSH
28481: LD_VAR 0 2
28485: ARRAY
28486: PUSH
28487: LD_INT 1
28489: ARRAY
28490: PPUSH
28491: LD_EXP 95
28495: PUSH
28496: LD_VAR 0 1
28500: ARRAY
28501: PUSH
28502: LD_VAR 0 2
28506: ARRAY
28507: PUSH
28508: LD_INT 2
28510: ARRAY
28511: PPUSH
28512: CALL_OW 428
28516: ST_TO_ADDR
// if not tmp then
28517: LD_VAR 0 4
28521: NOT
28522: IFFALSE 28526
// continue ;
28524: GO 28441
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28526: LD_VAR 0 4
28530: PUSH
28531: LD_INT 81
28533: PUSH
28534: LD_VAR 0 3
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PPUSH
28543: CALL_OW 69
28547: IN
28548: PUSH
28549: LD_EXP 95
28553: PUSH
28554: LD_VAR 0 1
28558: ARRAY
28559: PUSH
28560: LD_VAR 0 2
28564: ARRAY
28565: PUSH
28566: LD_INT 1
28568: ARRAY
28569: PPUSH
28570: LD_EXP 95
28574: PUSH
28575: LD_VAR 0 1
28579: ARRAY
28580: PUSH
28581: LD_VAR 0 2
28585: ARRAY
28586: PUSH
28587: LD_INT 2
28589: ARRAY
28590: PPUSH
28591: CALL_OW 458
28595: AND
28596: IFFALSE 28690
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28598: LD_EXP 95
28602: PUSH
28603: LD_VAR 0 1
28607: ARRAY
28608: PUSH
28609: LD_VAR 0 2
28613: ARRAY
28614: PUSH
28615: LD_INT 1
28617: ARRAY
28618: PPUSH
28619: LD_EXP 95
28623: PUSH
28624: LD_VAR 0 1
28628: ARRAY
28629: PUSH
28630: LD_VAR 0 2
28634: ARRAY
28635: PUSH
28636: LD_INT 2
28638: ARRAY
28639: PPUSH
28640: LD_VAR 0 3
28644: PPUSH
28645: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28649: LD_ADDR_EXP 95
28653: PUSH
28654: LD_EXP 95
28658: PPUSH
28659: LD_VAR 0 1
28663: PPUSH
28664: LD_EXP 95
28668: PUSH
28669: LD_VAR 0 1
28673: ARRAY
28674: PPUSH
28675: LD_VAR 0 2
28679: PPUSH
28680: CALL_OW 3
28684: PPUSH
28685: CALL_OW 1
28689: ST_TO_ADDR
// end ; end ;
28690: GO 28441
28692: POP
28693: POP
// end ;
28694: GO 28359
28696: POP
28697: POP
// end ;
28698: PPOPN 4
28700: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28701: LD_INT 0
28703: PPUSH
28704: PPUSH
// result := false ;
28705: LD_ADDR_VAR 0 4
28709: PUSH
28710: LD_INT 0
28712: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28713: LD_VAR 0 1
28717: PPUSH
28718: CALL_OW 264
28722: PUSH
28723: LD_INT 81
28725: EQUAL
28726: NOT
28727: IFFALSE 28731
// exit ;
28729: GO 28971
// index := GetElementIndex ( minersList , unit ) ;
28731: LD_ADDR_VAR 0 5
28735: PUSH
28736: LD_EXP 94
28740: PPUSH
28741: LD_VAR 0 1
28745: PPUSH
28746: CALL 34929 0 2
28750: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28751: LD_EXP 95
28755: PUSH
28756: LD_VAR 0 5
28760: ARRAY
28761: PUSH
28762: LD_EXP 96
28766: GREATEREQUAL
28767: IFFALSE 28771
// exit ;
28769: GO 28971
// ComMoveXY ( unit , x , y ) ;
28771: LD_VAR 0 1
28775: PPUSH
28776: LD_VAR 0 2
28780: PPUSH
28781: LD_VAR 0 3
28785: PPUSH
28786: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28790: LD_INT 35
28792: PPUSH
28793: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28797: LD_VAR 0 1
28801: PPUSH
28802: LD_VAR 0 2
28806: PPUSH
28807: LD_VAR 0 3
28811: PPUSH
28812: CALL 66670 0 3
28816: NOT
28817: PUSH
28818: LD_VAR 0 1
28822: PPUSH
28823: CALL_OW 314
28827: AND
28828: IFFALSE 28832
// exit ;
28830: GO 28971
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28832: LD_VAR 0 2
28836: PPUSH
28837: LD_VAR 0 3
28841: PPUSH
28842: CALL_OW 428
28846: PUSH
28847: LD_VAR 0 1
28851: EQUAL
28852: PUSH
28853: LD_VAR 0 1
28857: PPUSH
28858: CALL_OW 314
28862: NOT
28863: AND
28864: IFFALSE 28790
// PlaySoundXY ( x , y , PlantMine ) ;
28866: LD_VAR 0 2
28870: PPUSH
28871: LD_VAR 0 3
28875: PPUSH
28876: LD_STRING PlantMine
28878: PPUSH
28879: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28883: LD_VAR 0 2
28887: PPUSH
28888: LD_VAR 0 3
28892: PPUSH
28893: LD_VAR 0 1
28897: PPUSH
28898: CALL_OW 255
28902: PPUSH
28903: LD_INT 0
28905: PPUSH
28906: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28910: LD_ADDR_EXP 95
28914: PUSH
28915: LD_EXP 95
28919: PPUSH
28920: LD_VAR 0 5
28924: PUSH
28925: LD_EXP 95
28929: PUSH
28930: LD_VAR 0 5
28934: ARRAY
28935: PUSH
28936: LD_INT 1
28938: PLUS
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PPUSH
28944: LD_VAR 0 2
28948: PUSH
28949: LD_VAR 0 3
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PPUSH
28958: CALL 35144 0 3
28962: ST_TO_ADDR
// result := true ;
28963: LD_ADDR_VAR 0 4
28967: PUSH
28968: LD_INT 1
28970: ST_TO_ADDR
// end ;
28971: LD_VAR 0 4
28975: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28976: LD_INT 0
28978: PPUSH
28979: PPUSH
28980: PPUSH
// if not unit in minersList then
28981: LD_VAR 0 1
28985: PUSH
28986: LD_EXP 94
28990: IN
28991: NOT
28992: IFFALSE 28996
// exit ;
28994: GO 29388
// index := GetElementIndex ( minersList , unit ) ;
28996: LD_ADDR_VAR 0 6
29000: PUSH
29001: LD_EXP 94
29005: PPUSH
29006: LD_VAR 0 1
29010: PPUSH
29011: CALL 34929 0 2
29015: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29016: LD_ADDR_VAR 0 5
29020: PUSH
29021: DOUBLE
29022: LD_EXP 95
29026: PUSH
29027: LD_VAR 0 6
29031: ARRAY
29032: INC
29033: ST_TO_ADDR
29034: LD_INT 1
29036: PUSH
29037: FOR_DOWNTO
29038: IFFALSE 29199
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29040: LD_EXP 95
29044: PUSH
29045: LD_VAR 0 6
29049: ARRAY
29050: PUSH
29051: LD_VAR 0 5
29055: ARRAY
29056: PUSH
29057: LD_INT 1
29059: ARRAY
29060: PUSH
29061: LD_VAR 0 2
29065: EQUAL
29066: PUSH
29067: LD_EXP 95
29071: PUSH
29072: LD_VAR 0 6
29076: ARRAY
29077: PUSH
29078: LD_VAR 0 5
29082: ARRAY
29083: PUSH
29084: LD_INT 2
29086: ARRAY
29087: PUSH
29088: LD_VAR 0 3
29092: EQUAL
29093: AND
29094: IFFALSE 29197
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29096: LD_EXP 95
29100: PUSH
29101: LD_VAR 0 6
29105: ARRAY
29106: PUSH
29107: LD_VAR 0 5
29111: ARRAY
29112: PUSH
29113: LD_INT 1
29115: ARRAY
29116: PPUSH
29117: LD_EXP 95
29121: PUSH
29122: LD_VAR 0 6
29126: ARRAY
29127: PUSH
29128: LD_VAR 0 5
29132: ARRAY
29133: PUSH
29134: LD_INT 2
29136: ARRAY
29137: PPUSH
29138: LD_VAR 0 1
29142: PPUSH
29143: CALL_OW 255
29147: PPUSH
29148: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29152: LD_ADDR_EXP 95
29156: PUSH
29157: LD_EXP 95
29161: PPUSH
29162: LD_VAR 0 6
29166: PPUSH
29167: LD_EXP 95
29171: PUSH
29172: LD_VAR 0 6
29176: ARRAY
29177: PPUSH
29178: LD_VAR 0 5
29182: PPUSH
29183: CALL_OW 3
29187: PPUSH
29188: CALL_OW 1
29192: ST_TO_ADDR
// exit ;
29193: POP
29194: POP
29195: GO 29388
// end ; end ;
29197: GO 29037
29199: POP
29200: POP
// for i := minerMinesList [ index ] downto 1 do
29201: LD_ADDR_VAR 0 5
29205: PUSH
29206: DOUBLE
29207: LD_EXP 95
29211: PUSH
29212: LD_VAR 0 6
29216: ARRAY
29217: INC
29218: ST_TO_ADDR
29219: LD_INT 1
29221: PUSH
29222: FOR_DOWNTO
29223: IFFALSE 29386
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29225: LD_EXP 95
29229: PUSH
29230: LD_VAR 0 6
29234: ARRAY
29235: PUSH
29236: LD_VAR 0 5
29240: ARRAY
29241: PUSH
29242: LD_INT 1
29244: ARRAY
29245: PPUSH
29246: LD_EXP 95
29250: PUSH
29251: LD_VAR 0 6
29255: ARRAY
29256: PUSH
29257: LD_VAR 0 5
29261: ARRAY
29262: PUSH
29263: LD_INT 2
29265: ARRAY
29266: PPUSH
29267: LD_VAR 0 2
29271: PPUSH
29272: LD_VAR 0 3
29276: PPUSH
29277: CALL_OW 298
29281: PUSH
29282: LD_INT 6
29284: LESS
29285: IFFALSE 29384
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29287: LD_EXP 95
29291: PUSH
29292: LD_VAR 0 6
29296: ARRAY
29297: PUSH
29298: LD_VAR 0 5
29302: ARRAY
29303: PUSH
29304: LD_INT 1
29306: ARRAY
29307: PPUSH
29308: LD_EXP 95
29312: PUSH
29313: LD_VAR 0 6
29317: ARRAY
29318: PUSH
29319: LD_VAR 0 5
29323: ARRAY
29324: PUSH
29325: LD_INT 2
29327: ARRAY
29328: PPUSH
29329: LD_VAR 0 1
29333: PPUSH
29334: CALL_OW 255
29338: PPUSH
29339: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29343: LD_ADDR_EXP 95
29347: PUSH
29348: LD_EXP 95
29352: PPUSH
29353: LD_VAR 0 6
29357: PPUSH
29358: LD_EXP 95
29362: PUSH
29363: LD_VAR 0 6
29367: ARRAY
29368: PPUSH
29369: LD_VAR 0 5
29373: PPUSH
29374: CALL_OW 3
29378: PPUSH
29379: CALL_OW 1
29383: ST_TO_ADDR
// end ; end ;
29384: GO 29222
29386: POP
29387: POP
// end ;
29388: LD_VAR 0 4
29392: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29393: LD_INT 0
29395: PPUSH
29396: PPUSH
29397: PPUSH
29398: PPUSH
29399: PPUSH
29400: PPUSH
29401: PPUSH
29402: PPUSH
29403: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29404: LD_VAR 0 1
29408: PPUSH
29409: CALL_OW 264
29413: PUSH
29414: LD_INT 81
29416: EQUAL
29417: NOT
29418: PUSH
29419: LD_VAR 0 1
29423: PUSH
29424: LD_EXP 94
29428: IN
29429: NOT
29430: OR
29431: IFFALSE 29435
// exit ;
29433: GO 29757
// index := GetElementIndex ( minersList , unit ) ;
29435: LD_ADDR_VAR 0 6
29439: PUSH
29440: LD_EXP 94
29444: PPUSH
29445: LD_VAR 0 1
29449: PPUSH
29450: CALL 34929 0 2
29454: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29455: LD_ADDR_VAR 0 8
29459: PUSH
29460: LD_EXP 96
29464: PUSH
29465: LD_EXP 95
29469: PUSH
29470: LD_VAR 0 6
29474: ARRAY
29475: MINUS
29476: ST_TO_ADDR
// if not minesFreeAmount then
29477: LD_VAR 0 8
29481: NOT
29482: IFFALSE 29486
// exit ;
29484: GO 29757
// tmp := [ ] ;
29486: LD_ADDR_VAR 0 7
29490: PUSH
29491: EMPTY
29492: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29493: LD_ADDR_VAR 0 5
29497: PUSH
29498: DOUBLE
29499: LD_INT 1
29501: DEC
29502: ST_TO_ADDR
29503: LD_VAR 0 8
29507: PUSH
29508: FOR_TO
29509: IFFALSE 29704
// begin _d := rand ( 0 , 5 ) ;
29511: LD_ADDR_VAR 0 11
29515: PUSH
29516: LD_INT 0
29518: PPUSH
29519: LD_INT 5
29521: PPUSH
29522: CALL_OW 12
29526: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29527: LD_ADDR_VAR 0 12
29531: PUSH
29532: LD_INT 2
29534: PPUSH
29535: LD_INT 6
29537: PPUSH
29538: CALL_OW 12
29542: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29543: LD_ADDR_VAR 0 9
29547: PUSH
29548: LD_VAR 0 2
29552: PPUSH
29553: LD_VAR 0 11
29557: PPUSH
29558: LD_VAR 0 12
29562: PPUSH
29563: CALL_OW 272
29567: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29568: LD_ADDR_VAR 0 10
29572: PUSH
29573: LD_VAR 0 3
29577: PPUSH
29578: LD_VAR 0 11
29582: PPUSH
29583: LD_VAR 0 12
29587: PPUSH
29588: CALL_OW 273
29592: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29593: LD_VAR 0 9
29597: PPUSH
29598: LD_VAR 0 10
29602: PPUSH
29603: CALL_OW 488
29607: PUSH
29608: LD_VAR 0 9
29612: PUSH
29613: LD_VAR 0 10
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_VAR 0 7
29626: IN
29627: NOT
29628: AND
29629: PUSH
29630: LD_VAR 0 9
29634: PPUSH
29635: LD_VAR 0 10
29639: PPUSH
29640: CALL_OW 458
29644: NOT
29645: AND
29646: IFFALSE 29688
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29648: LD_ADDR_VAR 0 7
29652: PUSH
29653: LD_VAR 0 7
29657: PPUSH
29658: LD_VAR 0 7
29662: PUSH
29663: LD_INT 1
29665: PLUS
29666: PPUSH
29667: LD_VAR 0 9
29671: PUSH
29672: LD_VAR 0 10
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PPUSH
29681: CALL_OW 1
29685: ST_TO_ADDR
29686: GO 29702
// i := i - 1 ;
29688: LD_ADDR_VAR 0 5
29692: PUSH
29693: LD_VAR 0 5
29697: PUSH
29698: LD_INT 1
29700: MINUS
29701: ST_TO_ADDR
// end ;
29702: GO 29508
29704: POP
29705: POP
// for i in tmp do
29706: LD_ADDR_VAR 0 5
29710: PUSH
29711: LD_VAR 0 7
29715: PUSH
29716: FOR_IN
29717: IFFALSE 29755
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29719: LD_VAR 0 1
29723: PPUSH
29724: LD_VAR 0 5
29728: PUSH
29729: LD_INT 1
29731: ARRAY
29732: PPUSH
29733: LD_VAR 0 5
29737: PUSH
29738: LD_INT 2
29740: ARRAY
29741: PPUSH
29742: CALL 28701 0 3
29746: NOT
29747: IFFALSE 29753
// exit ;
29749: POP
29750: POP
29751: GO 29757
29753: GO 29716
29755: POP
29756: POP
// end ;
29757: LD_VAR 0 4
29761: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29762: LD_INT 0
29764: PPUSH
29765: PPUSH
29766: PPUSH
29767: PPUSH
29768: PPUSH
29769: PPUSH
29770: PPUSH
// if not GetClass ( unit ) = class_sniper then
29771: LD_VAR 0 1
29775: PPUSH
29776: CALL_OW 257
29780: PUSH
29781: LD_INT 5
29783: EQUAL
29784: NOT
29785: IFFALSE 29789
// exit ;
29787: GO 30177
// dist := 8 ;
29789: LD_ADDR_VAR 0 5
29793: PUSH
29794: LD_INT 8
29796: ST_TO_ADDR
// viewRange := 12 ;
29797: LD_ADDR_VAR 0 7
29801: PUSH
29802: LD_INT 12
29804: ST_TO_ADDR
// side := GetSide ( unit ) ;
29805: LD_ADDR_VAR 0 6
29809: PUSH
29810: LD_VAR 0 1
29814: PPUSH
29815: CALL_OW 255
29819: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29820: LD_INT 61
29822: PPUSH
29823: LD_VAR 0 6
29827: PPUSH
29828: CALL_OW 321
29832: PUSH
29833: LD_INT 2
29835: EQUAL
29836: IFFALSE 29846
// viewRange := 16 ;
29838: LD_ADDR_VAR 0 7
29842: PUSH
29843: LD_INT 16
29845: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29846: LD_VAR 0 1
29850: PPUSH
29851: LD_VAR 0 2
29855: PPUSH
29856: LD_VAR 0 3
29860: PPUSH
29861: CALL_OW 297
29865: PUSH
29866: LD_VAR 0 5
29870: GREATER
29871: IFFALSE 29950
// begin ComMoveXY ( unit , x , y ) ;
29873: LD_VAR 0 1
29877: PPUSH
29878: LD_VAR 0 2
29882: PPUSH
29883: LD_VAR 0 3
29887: PPUSH
29888: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29892: LD_INT 35
29894: PPUSH
29895: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29899: LD_VAR 0 1
29903: PPUSH
29904: LD_VAR 0 2
29908: PPUSH
29909: LD_VAR 0 3
29913: PPUSH
29914: CALL 66670 0 3
29918: NOT
29919: IFFALSE 29923
// exit ;
29921: GO 30177
// until GetDistUnitXY ( unit , x , y ) < dist ;
29923: LD_VAR 0 1
29927: PPUSH
29928: LD_VAR 0 2
29932: PPUSH
29933: LD_VAR 0 3
29937: PPUSH
29938: CALL_OW 297
29942: PUSH
29943: LD_VAR 0 5
29947: LESS
29948: IFFALSE 29892
// end ; ComTurnXY ( unit , x , y ) ;
29950: LD_VAR 0 1
29954: PPUSH
29955: LD_VAR 0 2
29959: PPUSH
29960: LD_VAR 0 3
29964: PPUSH
29965: CALL_OW 118
// wait ( 5 ) ;
29969: LD_INT 5
29971: PPUSH
29972: CALL_OW 67
// _d := GetDir ( unit ) ;
29976: LD_ADDR_VAR 0 10
29980: PUSH
29981: LD_VAR 0 1
29985: PPUSH
29986: CALL_OW 254
29990: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29991: LD_ADDR_VAR 0 8
29995: PUSH
29996: LD_VAR 0 1
30000: PPUSH
30001: CALL_OW 250
30005: PPUSH
30006: LD_VAR 0 10
30010: PPUSH
30011: LD_VAR 0 5
30015: PPUSH
30016: CALL_OW 272
30020: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30021: LD_ADDR_VAR 0 9
30025: PUSH
30026: LD_VAR 0 1
30030: PPUSH
30031: CALL_OW 251
30035: PPUSH
30036: LD_VAR 0 10
30040: PPUSH
30041: LD_VAR 0 5
30045: PPUSH
30046: CALL_OW 273
30050: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30051: LD_VAR 0 8
30055: PPUSH
30056: LD_VAR 0 9
30060: PPUSH
30061: CALL_OW 488
30065: NOT
30066: IFFALSE 30070
// exit ;
30068: GO 30177
// ComAnimCustom ( unit , 1 ) ;
30070: LD_VAR 0 1
30074: PPUSH
30075: LD_INT 1
30077: PPUSH
30078: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30082: LD_VAR 0 8
30086: PPUSH
30087: LD_VAR 0 9
30091: PPUSH
30092: LD_VAR 0 6
30096: PPUSH
30097: LD_VAR 0 7
30101: PPUSH
30102: CALL_OW 330
// repeat wait ( 1 ) ;
30106: LD_INT 1
30108: PPUSH
30109: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30113: LD_VAR 0 1
30117: PPUSH
30118: CALL_OW 316
30122: PUSH
30123: LD_VAR 0 1
30127: PPUSH
30128: CALL_OW 314
30132: OR
30133: PUSH
30134: LD_VAR 0 1
30138: PPUSH
30139: CALL_OW 302
30143: NOT
30144: OR
30145: PUSH
30146: LD_VAR 0 1
30150: PPUSH
30151: CALL_OW 301
30155: OR
30156: IFFALSE 30106
// RemoveSeeing ( _x , _y , side ) ;
30158: LD_VAR 0 8
30162: PPUSH
30163: LD_VAR 0 9
30167: PPUSH
30168: LD_VAR 0 6
30172: PPUSH
30173: CALL_OW 331
// end ; end_of_file
30177: LD_VAR 0 4
30181: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30182: LD_INT 0
30184: PPUSH
30185: PPUSH
// if exist_mode then
30186: LD_VAR 0 2
30190: IFFALSE 30215
// unit := CreateCharacter ( prefix & ident ) else
30192: LD_ADDR_VAR 0 5
30196: PUSH
30197: LD_VAR 0 3
30201: PUSH
30202: LD_VAR 0 1
30206: STR
30207: PPUSH
30208: CALL_OW 34
30212: ST_TO_ADDR
30213: GO 30230
// unit := NewCharacter ( ident ) ;
30215: LD_ADDR_VAR 0 5
30219: PUSH
30220: LD_VAR 0 1
30224: PPUSH
30225: CALL_OW 25
30229: ST_TO_ADDR
// result := unit ;
30230: LD_ADDR_VAR 0 4
30234: PUSH
30235: LD_VAR 0 5
30239: ST_TO_ADDR
// end ;
30240: LD_VAR 0 4
30244: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30245: LD_INT 0
30247: PPUSH
30248: PPUSH
// if not side or not nation then
30249: LD_VAR 0 1
30253: NOT
30254: PUSH
30255: LD_VAR 0 2
30259: NOT
30260: OR
30261: IFFALSE 30265
// exit ;
30263: GO 31033
// case nation of nation_american :
30265: LD_VAR 0 2
30269: PUSH
30270: LD_INT 1
30272: DOUBLE
30273: EQUAL
30274: IFTRUE 30278
30276: GO 30492
30278: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30279: LD_ADDR_VAR 0 4
30283: PUSH
30284: LD_INT 35
30286: PUSH
30287: LD_INT 45
30289: PUSH
30290: LD_INT 46
30292: PUSH
30293: LD_INT 47
30295: PUSH
30296: LD_INT 82
30298: PUSH
30299: LD_INT 83
30301: PUSH
30302: LD_INT 84
30304: PUSH
30305: LD_INT 85
30307: PUSH
30308: LD_INT 86
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: LD_INT 2
30316: PUSH
30317: LD_INT 6
30319: PUSH
30320: LD_INT 15
30322: PUSH
30323: LD_INT 16
30325: PUSH
30326: LD_INT 7
30328: PUSH
30329: LD_INT 12
30331: PUSH
30332: LD_INT 13
30334: PUSH
30335: LD_INT 10
30337: PUSH
30338: LD_INT 14
30340: PUSH
30341: LD_INT 20
30343: PUSH
30344: LD_INT 21
30346: PUSH
30347: LD_INT 22
30349: PUSH
30350: LD_INT 25
30352: PUSH
30353: LD_INT 32
30355: PUSH
30356: LD_INT 27
30358: PUSH
30359: LD_INT 36
30361: PUSH
30362: LD_INT 69
30364: PUSH
30365: LD_INT 39
30367: PUSH
30368: LD_INT 34
30370: PUSH
30371: LD_INT 40
30373: PUSH
30374: LD_INT 48
30376: PUSH
30377: LD_INT 49
30379: PUSH
30380: LD_INT 50
30382: PUSH
30383: LD_INT 51
30385: PUSH
30386: LD_INT 52
30388: PUSH
30389: LD_INT 53
30391: PUSH
30392: LD_INT 54
30394: PUSH
30395: LD_INT 55
30397: PUSH
30398: LD_INT 56
30400: PUSH
30401: LD_INT 57
30403: PUSH
30404: LD_INT 58
30406: PUSH
30407: LD_INT 59
30409: PUSH
30410: LD_INT 60
30412: PUSH
30413: LD_INT 61
30415: PUSH
30416: LD_INT 62
30418: PUSH
30419: LD_INT 80
30421: PUSH
30422: LD_INT 82
30424: PUSH
30425: LD_INT 83
30427: PUSH
30428: LD_INT 84
30430: PUSH
30431: LD_INT 85
30433: PUSH
30434: LD_INT 86
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: ST_TO_ADDR
30490: GO 30957
30492: LD_INT 2
30494: DOUBLE
30495: EQUAL
30496: IFTRUE 30500
30498: GO 30726
30500: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30501: LD_ADDR_VAR 0 4
30505: PUSH
30506: LD_INT 35
30508: PUSH
30509: LD_INT 45
30511: PUSH
30512: LD_INT 46
30514: PUSH
30515: LD_INT 47
30517: PUSH
30518: LD_INT 82
30520: PUSH
30521: LD_INT 83
30523: PUSH
30524: LD_INT 84
30526: PUSH
30527: LD_INT 85
30529: PUSH
30530: LD_INT 87
30532: PUSH
30533: LD_INT 70
30535: PUSH
30536: LD_INT 1
30538: PUSH
30539: LD_INT 11
30541: PUSH
30542: LD_INT 3
30544: PUSH
30545: LD_INT 4
30547: PUSH
30548: LD_INT 5
30550: PUSH
30551: LD_INT 6
30553: PUSH
30554: LD_INT 15
30556: PUSH
30557: LD_INT 18
30559: PUSH
30560: LD_INT 7
30562: PUSH
30563: LD_INT 17
30565: PUSH
30566: LD_INT 8
30568: PUSH
30569: LD_INT 20
30571: PUSH
30572: LD_INT 21
30574: PUSH
30575: LD_INT 22
30577: PUSH
30578: LD_INT 72
30580: PUSH
30581: LD_INT 26
30583: PUSH
30584: LD_INT 69
30586: PUSH
30587: LD_INT 39
30589: PUSH
30590: LD_INT 40
30592: PUSH
30593: LD_INT 41
30595: PUSH
30596: LD_INT 42
30598: PUSH
30599: LD_INT 43
30601: PUSH
30602: LD_INT 48
30604: PUSH
30605: LD_INT 49
30607: PUSH
30608: LD_INT 50
30610: PUSH
30611: LD_INT 51
30613: PUSH
30614: LD_INT 52
30616: PUSH
30617: LD_INT 53
30619: PUSH
30620: LD_INT 54
30622: PUSH
30623: LD_INT 55
30625: PUSH
30626: LD_INT 56
30628: PUSH
30629: LD_INT 60
30631: PUSH
30632: LD_INT 61
30634: PUSH
30635: LD_INT 62
30637: PUSH
30638: LD_INT 66
30640: PUSH
30641: LD_INT 67
30643: PUSH
30644: LD_INT 68
30646: PUSH
30647: LD_INT 81
30649: PUSH
30650: LD_INT 82
30652: PUSH
30653: LD_INT 83
30655: PUSH
30656: LD_INT 84
30658: PUSH
30659: LD_INT 85
30661: PUSH
30662: LD_INT 87
30664: PUSH
30665: LD_INT 88
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: ST_TO_ADDR
30724: GO 30957
30726: LD_INT 3
30728: DOUBLE
30729: EQUAL
30730: IFTRUE 30734
30732: GO 30956
30734: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30735: LD_ADDR_VAR 0 4
30739: PUSH
30740: LD_INT 46
30742: PUSH
30743: LD_INT 47
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: LD_INT 2
30751: PUSH
30752: LD_INT 82
30754: PUSH
30755: LD_INT 83
30757: PUSH
30758: LD_INT 84
30760: PUSH
30761: LD_INT 85
30763: PUSH
30764: LD_INT 86
30766: PUSH
30767: LD_INT 11
30769: PUSH
30770: LD_INT 9
30772: PUSH
30773: LD_INT 20
30775: PUSH
30776: LD_INT 19
30778: PUSH
30779: LD_INT 21
30781: PUSH
30782: LD_INT 24
30784: PUSH
30785: LD_INT 22
30787: PUSH
30788: LD_INT 25
30790: PUSH
30791: LD_INT 28
30793: PUSH
30794: LD_INT 29
30796: PUSH
30797: LD_INT 30
30799: PUSH
30800: LD_INT 31
30802: PUSH
30803: LD_INT 37
30805: PUSH
30806: LD_INT 38
30808: PUSH
30809: LD_INT 32
30811: PUSH
30812: LD_INT 27
30814: PUSH
30815: LD_INT 33
30817: PUSH
30818: LD_INT 69
30820: PUSH
30821: LD_INT 39
30823: PUSH
30824: LD_INT 34
30826: PUSH
30827: LD_INT 40
30829: PUSH
30830: LD_INT 71
30832: PUSH
30833: LD_INT 23
30835: PUSH
30836: LD_INT 44
30838: PUSH
30839: LD_INT 48
30841: PUSH
30842: LD_INT 49
30844: PUSH
30845: LD_INT 50
30847: PUSH
30848: LD_INT 51
30850: PUSH
30851: LD_INT 52
30853: PUSH
30854: LD_INT 53
30856: PUSH
30857: LD_INT 54
30859: PUSH
30860: LD_INT 55
30862: PUSH
30863: LD_INT 56
30865: PUSH
30866: LD_INT 57
30868: PUSH
30869: LD_INT 58
30871: PUSH
30872: LD_INT 59
30874: PUSH
30875: LD_INT 63
30877: PUSH
30878: LD_INT 64
30880: PUSH
30881: LD_INT 65
30883: PUSH
30884: LD_INT 82
30886: PUSH
30887: LD_INT 83
30889: PUSH
30890: LD_INT 84
30892: PUSH
30893: LD_INT 85
30895: PUSH
30896: LD_INT 86
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: ST_TO_ADDR
30954: GO 30957
30956: POP
// if state > - 1 and state < 3 then
30957: LD_VAR 0 3
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: GREATER
30966: PUSH
30967: LD_VAR 0 3
30971: PUSH
30972: LD_INT 3
30974: LESS
30975: AND
30976: IFFALSE 31033
// for i in result do
30978: LD_ADDR_VAR 0 5
30982: PUSH
30983: LD_VAR 0 4
30987: PUSH
30988: FOR_IN
30989: IFFALSE 31031
// if GetTech ( i , side ) <> state then
30991: LD_VAR 0 5
30995: PPUSH
30996: LD_VAR 0 1
31000: PPUSH
31001: CALL_OW 321
31005: PUSH
31006: LD_VAR 0 3
31010: NONEQUAL
31011: IFFALSE 31029
// result := result diff i ;
31013: LD_ADDR_VAR 0 4
31017: PUSH
31018: LD_VAR 0 4
31022: PUSH
31023: LD_VAR 0 5
31027: DIFF
31028: ST_TO_ADDR
31029: GO 30988
31031: POP
31032: POP
// end ;
31033: LD_VAR 0 4
31037: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31038: LD_INT 0
31040: PPUSH
31041: PPUSH
31042: PPUSH
// result := true ;
31043: LD_ADDR_VAR 0 3
31047: PUSH
31048: LD_INT 1
31050: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31051: LD_ADDR_VAR 0 5
31055: PUSH
31056: LD_VAR 0 2
31060: PPUSH
31061: CALL_OW 480
31065: ST_TO_ADDR
// if not tmp then
31066: LD_VAR 0 5
31070: NOT
31071: IFFALSE 31075
// exit ;
31073: GO 31124
// for i in tmp do
31075: LD_ADDR_VAR 0 4
31079: PUSH
31080: LD_VAR 0 5
31084: PUSH
31085: FOR_IN
31086: IFFALSE 31122
// if GetTech ( i , side ) <> state_researched then
31088: LD_VAR 0 4
31092: PPUSH
31093: LD_VAR 0 1
31097: PPUSH
31098: CALL_OW 321
31102: PUSH
31103: LD_INT 2
31105: NONEQUAL
31106: IFFALSE 31120
// begin result := false ;
31108: LD_ADDR_VAR 0 3
31112: PUSH
31113: LD_INT 0
31115: ST_TO_ADDR
// exit ;
31116: POP
31117: POP
31118: GO 31124
// end ;
31120: GO 31085
31122: POP
31123: POP
// end ;
31124: LD_VAR 0 3
31128: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31129: LD_INT 0
31131: PPUSH
31132: PPUSH
31133: PPUSH
31134: PPUSH
31135: PPUSH
31136: PPUSH
31137: PPUSH
31138: PPUSH
31139: PPUSH
31140: PPUSH
31141: PPUSH
31142: PPUSH
31143: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31144: LD_VAR 0 1
31148: NOT
31149: PUSH
31150: LD_VAR 0 1
31154: PPUSH
31155: CALL_OW 257
31159: PUSH
31160: LD_INT 9
31162: NONEQUAL
31163: OR
31164: IFFALSE 31168
// exit ;
31166: GO 31741
// side := GetSide ( unit ) ;
31168: LD_ADDR_VAR 0 9
31172: PUSH
31173: LD_VAR 0 1
31177: PPUSH
31178: CALL_OW 255
31182: ST_TO_ADDR
// tech_space := tech_spacanom ;
31183: LD_ADDR_VAR 0 12
31187: PUSH
31188: LD_INT 29
31190: ST_TO_ADDR
// tech_time := tech_taurad ;
31191: LD_ADDR_VAR 0 13
31195: PUSH
31196: LD_INT 28
31198: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31199: LD_ADDR_VAR 0 11
31203: PUSH
31204: LD_VAR 0 1
31208: PPUSH
31209: CALL_OW 310
31213: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31214: LD_VAR 0 11
31218: PPUSH
31219: CALL_OW 247
31223: PUSH
31224: LD_INT 2
31226: EQUAL
31227: IFFALSE 31231
// exit ;
31229: GO 31741
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31231: LD_ADDR_VAR 0 8
31235: PUSH
31236: LD_INT 81
31238: PUSH
31239: LD_VAR 0 9
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 3
31250: PUSH
31251: LD_INT 21
31253: PUSH
31254: LD_INT 3
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PPUSH
31269: CALL_OW 69
31273: ST_TO_ADDR
// if not tmp then
31274: LD_VAR 0 8
31278: NOT
31279: IFFALSE 31283
// exit ;
31281: GO 31741
// if in_unit then
31283: LD_VAR 0 11
31287: IFFALSE 31311
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31289: LD_ADDR_VAR 0 10
31293: PUSH
31294: LD_VAR 0 8
31298: PPUSH
31299: LD_VAR 0 11
31303: PPUSH
31304: CALL_OW 74
31308: ST_TO_ADDR
31309: GO 31331
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31311: LD_ADDR_VAR 0 10
31315: PUSH
31316: LD_VAR 0 8
31320: PPUSH
31321: LD_VAR 0 1
31325: PPUSH
31326: CALL_OW 74
31330: ST_TO_ADDR
// if not enemy then
31331: LD_VAR 0 10
31335: NOT
31336: IFFALSE 31340
// exit ;
31338: GO 31741
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31340: LD_VAR 0 11
31344: PUSH
31345: LD_VAR 0 11
31349: PPUSH
31350: LD_VAR 0 10
31354: PPUSH
31355: CALL_OW 296
31359: PUSH
31360: LD_INT 13
31362: GREATER
31363: AND
31364: PUSH
31365: LD_VAR 0 1
31369: PPUSH
31370: LD_VAR 0 10
31374: PPUSH
31375: CALL_OW 296
31379: PUSH
31380: LD_INT 12
31382: GREATER
31383: OR
31384: IFFALSE 31388
// exit ;
31386: GO 31741
// missile := [ 1 ] ;
31388: LD_ADDR_VAR 0 14
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: EMPTY
31397: LIST
31398: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31399: LD_VAR 0 9
31403: PPUSH
31404: LD_VAR 0 12
31408: PPUSH
31409: CALL_OW 325
31413: IFFALSE 31442
// missile := Replace ( missile , missile + 1 , 2 ) ;
31415: LD_ADDR_VAR 0 14
31419: PUSH
31420: LD_VAR 0 14
31424: PPUSH
31425: LD_VAR 0 14
31429: PUSH
31430: LD_INT 1
31432: PLUS
31433: PPUSH
31434: LD_INT 2
31436: PPUSH
31437: CALL_OW 1
31441: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31442: LD_VAR 0 9
31446: PPUSH
31447: LD_VAR 0 13
31451: PPUSH
31452: CALL_OW 325
31456: PUSH
31457: LD_VAR 0 10
31461: PPUSH
31462: CALL_OW 255
31466: PPUSH
31467: LD_VAR 0 13
31471: PPUSH
31472: CALL_OW 325
31476: NOT
31477: AND
31478: IFFALSE 31507
// missile := Replace ( missile , missile + 1 , 3 ) ;
31480: LD_ADDR_VAR 0 14
31484: PUSH
31485: LD_VAR 0 14
31489: PPUSH
31490: LD_VAR 0 14
31494: PUSH
31495: LD_INT 1
31497: PLUS
31498: PPUSH
31499: LD_INT 3
31501: PPUSH
31502: CALL_OW 1
31506: ST_TO_ADDR
// if missile < 2 then
31507: LD_VAR 0 14
31511: PUSH
31512: LD_INT 2
31514: LESS
31515: IFFALSE 31519
// exit ;
31517: GO 31741
// x := GetX ( enemy ) ;
31519: LD_ADDR_VAR 0 4
31523: PUSH
31524: LD_VAR 0 10
31528: PPUSH
31529: CALL_OW 250
31533: ST_TO_ADDR
// y := GetY ( enemy ) ;
31534: LD_ADDR_VAR 0 5
31538: PUSH
31539: LD_VAR 0 10
31543: PPUSH
31544: CALL_OW 251
31548: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31549: LD_ADDR_VAR 0 6
31553: PUSH
31554: LD_VAR 0 4
31558: PUSH
31559: LD_INT 1
31561: NEG
31562: PPUSH
31563: LD_INT 1
31565: PPUSH
31566: CALL_OW 12
31570: PLUS
31571: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31572: LD_ADDR_VAR 0 7
31576: PUSH
31577: LD_VAR 0 5
31581: PUSH
31582: LD_INT 1
31584: NEG
31585: PPUSH
31586: LD_INT 1
31588: PPUSH
31589: CALL_OW 12
31593: PLUS
31594: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31595: LD_VAR 0 6
31599: PPUSH
31600: LD_VAR 0 7
31604: PPUSH
31605: CALL_OW 488
31609: NOT
31610: IFFALSE 31632
// begin _x := x ;
31612: LD_ADDR_VAR 0 6
31616: PUSH
31617: LD_VAR 0 4
31621: ST_TO_ADDR
// _y := y ;
31622: LD_ADDR_VAR 0 7
31626: PUSH
31627: LD_VAR 0 5
31631: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31632: LD_ADDR_VAR 0 3
31636: PUSH
31637: LD_INT 1
31639: PPUSH
31640: LD_VAR 0 14
31644: PPUSH
31645: CALL_OW 12
31649: ST_TO_ADDR
// case i of 1 :
31650: LD_VAR 0 3
31654: PUSH
31655: LD_INT 1
31657: DOUBLE
31658: EQUAL
31659: IFTRUE 31663
31661: GO 31680
31663: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31664: LD_VAR 0 1
31668: PPUSH
31669: LD_VAR 0 10
31673: PPUSH
31674: CALL_OW 115
31678: GO 31741
31680: LD_INT 2
31682: DOUBLE
31683: EQUAL
31684: IFTRUE 31688
31686: GO 31710
31688: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31689: LD_VAR 0 1
31693: PPUSH
31694: LD_VAR 0 6
31698: PPUSH
31699: LD_VAR 0 7
31703: PPUSH
31704: CALL_OW 153
31708: GO 31741
31710: LD_INT 3
31712: DOUBLE
31713: EQUAL
31714: IFTRUE 31718
31716: GO 31740
31718: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31719: LD_VAR 0 1
31723: PPUSH
31724: LD_VAR 0 6
31728: PPUSH
31729: LD_VAR 0 7
31733: PPUSH
31734: CALL_OW 154
31738: GO 31741
31740: POP
// end ;
31741: LD_VAR 0 2
31745: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31746: LD_INT 0
31748: PPUSH
31749: PPUSH
31750: PPUSH
31751: PPUSH
31752: PPUSH
31753: PPUSH
// if not unit or not building then
31754: LD_VAR 0 1
31758: NOT
31759: PUSH
31760: LD_VAR 0 2
31764: NOT
31765: OR
31766: IFFALSE 31770
// exit ;
31768: GO 31928
// x := GetX ( building ) ;
31770: LD_ADDR_VAR 0 5
31774: PUSH
31775: LD_VAR 0 2
31779: PPUSH
31780: CALL_OW 250
31784: ST_TO_ADDR
// y := GetY ( building ) ;
31785: LD_ADDR_VAR 0 6
31789: PUSH
31790: LD_VAR 0 2
31794: PPUSH
31795: CALL_OW 251
31799: ST_TO_ADDR
// for i = 0 to 5 do
31800: LD_ADDR_VAR 0 4
31804: PUSH
31805: DOUBLE
31806: LD_INT 0
31808: DEC
31809: ST_TO_ADDR
31810: LD_INT 5
31812: PUSH
31813: FOR_TO
31814: IFFALSE 31926
// begin _x := ShiftX ( x , i , 3 ) ;
31816: LD_ADDR_VAR 0 7
31820: PUSH
31821: LD_VAR 0 5
31825: PPUSH
31826: LD_VAR 0 4
31830: PPUSH
31831: LD_INT 3
31833: PPUSH
31834: CALL_OW 272
31838: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31839: LD_ADDR_VAR 0 8
31843: PUSH
31844: LD_VAR 0 6
31848: PPUSH
31849: LD_VAR 0 4
31853: PPUSH
31854: LD_INT 3
31856: PPUSH
31857: CALL_OW 273
31861: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31862: LD_VAR 0 7
31866: PPUSH
31867: LD_VAR 0 8
31871: PPUSH
31872: CALL_OW 488
31876: NOT
31877: IFFALSE 31881
// continue ;
31879: GO 31813
// if HexInfo ( _x , _y ) = 0 then
31881: LD_VAR 0 7
31885: PPUSH
31886: LD_VAR 0 8
31890: PPUSH
31891: CALL_OW 428
31895: PUSH
31896: LD_INT 0
31898: EQUAL
31899: IFFALSE 31924
// begin ComMoveXY ( unit , _x , _y ) ;
31901: LD_VAR 0 1
31905: PPUSH
31906: LD_VAR 0 7
31910: PPUSH
31911: LD_VAR 0 8
31915: PPUSH
31916: CALL_OW 111
// exit ;
31920: POP
31921: POP
31922: GO 31928
// end ; end ;
31924: GO 31813
31926: POP
31927: POP
// end ;
31928: LD_VAR 0 3
31932: RET
// export function ScanBase ( side , base_area ) ; begin
31933: LD_INT 0
31935: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31936: LD_ADDR_VAR 0 3
31940: PUSH
31941: LD_VAR 0 2
31945: PPUSH
31946: LD_INT 81
31948: PUSH
31949: LD_VAR 0 1
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PPUSH
31958: CALL_OW 70
31962: ST_TO_ADDR
// end ;
31963: LD_VAR 0 3
31967: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31968: LD_INT 0
31970: PPUSH
31971: PPUSH
31972: PPUSH
31973: PPUSH
// result := false ;
31974: LD_ADDR_VAR 0 2
31978: PUSH
31979: LD_INT 0
31981: ST_TO_ADDR
// side := GetSide ( unit ) ;
31982: LD_ADDR_VAR 0 3
31986: PUSH
31987: LD_VAR 0 1
31991: PPUSH
31992: CALL_OW 255
31996: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31997: LD_ADDR_VAR 0 4
32001: PUSH
32002: LD_VAR 0 1
32006: PPUSH
32007: CALL_OW 248
32011: ST_TO_ADDR
// case nat of 1 :
32012: LD_VAR 0 4
32016: PUSH
32017: LD_INT 1
32019: DOUBLE
32020: EQUAL
32021: IFTRUE 32025
32023: GO 32036
32025: POP
// tech := tech_lassight ; 2 :
32026: LD_ADDR_VAR 0 5
32030: PUSH
32031: LD_INT 12
32033: ST_TO_ADDR
32034: GO 32075
32036: LD_INT 2
32038: DOUBLE
32039: EQUAL
32040: IFTRUE 32044
32042: GO 32055
32044: POP
// tech := tech_mortar ; 3 :
32045: LD_ADDR_VAR 0 5
32049: PUSH
32050: LD_INT 41
32052: ST_TO_ADDR
32053: GO 32075
32055: LD_INT 3
32057: DOUBLE
32058: EQUAL
32059: IFTRUE 32063
32061: GO 32074
32063: POP
// tech := tech_bazooka ; end ;
32064: LD_ADDR_VAR 0 5
32068: PUSH
32069: LD_INT 44
32071: ST_TO_ADDR
32072: GO 32075
32074: POP
// if Researched ( side , tech ) then
32075: LD_VAR 0 3
32079: PPUSH
32080: LD_VAR 0 5
32084: PPUSH
32085: CALL_OW 325
32089: IFFALSE 32116
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32091: LD_ADDR_VAR 0 2
32095: PUSH
32096: LD_INT 5
32098: PUSH
32099: LD_INT 8
32101: PUSH
32102: LD_INT 9
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: LIST
32109: PUSH
32110: LD_VAR 0 4
32114: ARRAY
32115: ST_TO_ADDR
// end ;
32116: LD_VAR 0 2
32120: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32121: LD_INT 0
32123: PPUSH
32124: PPUSH
32125: PPUSH
// if not mines then
32126: LD_VAR 0 2
32130: NOT
32131: IFFALSE 32135
// exit ;
32133: GO 32279
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32135: LD_ADDR_VAR 0 5
32139: PUSH
32140: LD_INT 81
32142: PUSH
32143: LD_VAR 0 1
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 3
32154: PUSH
32155: LD_INT 21
32157: PUSH
32158: LD_INT 3
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PPUSH
32173: CALL_OW 69
32177: ST_TO_ADDR
// for i in mines do
32178: LD_ADDR_VAR 0 4
32182: PUSH
32183: LD_VAR 0 2
32187: PUSH
32188: FOR_IN
32189: IFFALSE 32277
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32191: LD_VAR 0 4
32195: PUSH
32196: LD_INT 1
32198: ARRAY
32199: PPUSH
32200: LD_VAR 0 4
32204: PUSH
32205: LD_INT 2
32207: ARRAY
32208: PPUSH
32209: CALL_OW 458
32213: NOT
32214: IFFALSE 32218
// continue ;
32216: GO 32188
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32218: LD_VAR 0 4
32222: PUSH
32223: LD_INT 1
32225: ARRAY
32226: PPUSH
32227: LD_VAR 0 4
32231: PUSH
32232: LD_INT 2
32234: ARRAY
32235: PPUSH
32236: CALL_OW 428
32240: PUSH
32241: LD_VAR 0 5
32245: IN
32246: IFFALSE 32275
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32248: LD_VAR 0 4
32252: PUSH
32253: LD_INT 1
32255: ARRAY
32256: PPUSH
32257: LD_VAR 0 4
32261: PUSH
32262: LD_INT 2
32264: ARRAY
32265: PPUSH
32266: LD_VAR 0 1
32270: PPUSH
32271: CALL_OW 456
// end ;
32275: GO 32188
32277: POP
32278: POP
// end ;
32279: LD_VAR 0 3
32283: RET
// export function Count ( array ) ; begin
32284: LD_INT 0
32286: PPUSH
// result := array + 0 ;
32287: LD_ADDR_VAR 0 2
32291: PUSH
32292: LD_VAR 0 1
32296: PUSH
32297: LD_INT 0
32299: PLUS
32300: ST_TO_ADDR
// end ;
32301: LD_VAR 0 2
32305: RET
// export function IsEmpty ( building ) ; begin
32306: LD_INT 0
32308: PPUSH
// if not building then
32309: LD_VAR 0 1
32313: NOT
32314: IFFALSE 32318
// exit ;
32316: GO 32361
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32318: LD_ADDR_VAR 0 2
32322: PUSH
32323: LD_VAR 0 1
32327: PUSH
32328: LD_INT 22
32330: PUSH
32331: LD_VAR 0 1
32335: PPUSH
32336: CALL_OW 255
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 58
32347: PUSH
32348: EMPTY
32349: LIST
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PPUSH
32355: CALL_OW 69
32359: IN
32360: ST_TO_ADDR
// end ;
32361: LD_VAR 0 2
32365: RET
// export function IsNotFull ( building ) ; var places ; begin
32366: LD_INT 0
32368: PPUSH
32369: PPUSH
// if not building then
32370: LD_VAR 0 1
32374: NOT
32375: IFFALSE 32379
// exit ;
32377: GO 32407
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32379: LD_ADDR_VAR 0 2
32383: PUSH
32384: LD_VAR 0 1
32388: PPUSH
32389: LD_INT 3
32391: PUSH
32392: LD_INT 62
32394: PUSH
32395: EMPTY
32396: LIST
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PPUSH
32402: CALL_OW 72
32406: ST_TO_ADDR
// end ;
32407: LD_VAR 0 2
32411: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32412: LD_INT 0
32414: PPUSH
32415: PPUSH
32416: PPUSH
32417: PPUSH
// tmp := [ ] ;
32418: LD_ADDR_VAR 0 3
32422: PUSH
32423: EMPTY
32424: ST_TO_ADDR
// list := [ ] ;
32425: LD_ADDR_VAR 0 5
32429: PUSH
32430: EMPTY
32431: ST_TO_ADDR
// for i = 16 to 25 do
32432: LD_ADDR_VAR 0 4
32436: PUSH
32437: DOUBLE
32438: LD_INT 16
32440: DEC
32441: ST_TO_ADDR
32442: LD_INT 25
32444: PUSH
32445: FOR_TO
32446: IFFALSE 32519
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32448: LD_ADDR_VAR 0 3
32452: PUSH
32453: LD_VAR 0 3
32457: PUSH
32458: LD_INT 22
32460: PUSH
32461: LD_VAR 0 1
32465: PPUSH
32466: CALL_OW 255
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 91
32477: PUSH
32478: LD_VAR 0 1
32482: PUSH
32483: LD_INT 6
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 30
32493: PUSH
32494: LD_VAR 0 4
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: LIST
32507: PUSH
32508: EMPTY
32509: LIST
32510: PPUSH
32511: CALL_OW 69
32515: ADD
32516: ST_TO_ADDR
32517: GO 32445
32519: POP
32520: POP
// for i = 1 to tmp do
32521: LD_ADDR_VAR 0 4
32525: PUSH
32526: DOUBLE
32527: LD_INT 1
32529: DEC
32530: ST_TO_ADDR
32531: LD_VAR 0 3
32535: PUSH
32536: FOR_TO
32537: IFFALSE 32625
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32539: LD_ADDR_VAR 0 5
32543: PUSH
32544: LD_VAR 0 5
32548: PUSH
32549: LD_VAR 0 3
32553: PUSH
32554: LD_VAR 0 4
32558: ARRAY
32559: PPUSH
32560: CALL_OW 266
32564: PUSH
32565: LD_VAR 0 3
32569: PUSH
32570: LD_VAR 0 4
32574: ARRAY
32575: PPUSH
32576: CALL_OW 250
32580: PUSH
32581: LD_VAR 0 3
32585: PUSH
32586: LD_VAR 0 4
32590: ARRAY
32591: PPUSH
32592: CALL_OW 251
32596: PUSH
32597: LD_VAR 0 3
32601: PUSH
32602: LD_VAR 0 4
32606: ARRAY
32607: PPUSH
32608: CALL_OW 254
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: PUSH
32619: EMPTY
32620: LIST
32621: ADD
32622: ST_TO_ADDR
32623: GO 32536
32625: POP
32626: POP
// result := list ;
32627: LD_ADDR_VAR 0 2
32631: PUSH
32632: LD_VAR 0 5
32636: ST_TO_ADDR
// end ;
32637: LD_VAR 0 2
32641: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32642: LD_INT 0
32644: PPUSH
32645: PPUSH
32646: PPUSH
32647: PPUSH
32648: PPUSH
32649: PPUSH
32650: PPUSH
// if not factory then
32651: LD_VAR 0 1
32655: NOT
32656: IFFALSE 32660
// exit ;
32658: GO 33253
// if control = control_apeman then
32660: LD_VAR 0 4
32664: PUSH
32665: LD_INT 5
32667: EQUAL
32668: IFFALSE 32777
// begin tmp := UnitsInside ( factory ) ;
32670: LD_ADDR_VAR 0 8
32674: PUSH
32675: LD_VAR 0 1
32679: PPUSH
32680: CALL_OW 313
32684: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32685: LD_VAR 0 8
32689: PPUSH
32690: LD_INT 25
32692: PUSH
32693: LD_INT 12
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PPUSH
32700: CALL_OW 72
32704: NOT
32705: IFFALSE 32715
// control := control_manual ;
32707: LD_ADDR_VAR 0 4
32711: PUSH
32712: LD_INT 1
32714: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32715: LD_ADDR_VAR 0 8
32719: PUSH
32720: LD_VAR 0 1
32724: PPUSH
32725: CALL 32412 0 1
32729: ST_TO_ADDR
// if tmp then
32730: LD_VAR 0 8
32734: IFFALSE 32777
// begin for i in tmp do
32736: LD_ADDR_VAR 0 7
32740: PUSH
32741: LD_VAR 0 8
32745: PUSH
32746: FOR_IN
32747: IFFALSE 32775
// if i [ 1 ] = b_ext_radio then
32749: LD_VAR 0 7
32753: PUSH
32754: LD_INT 1
32756: ARRAY
32757: PUSH
32758: LD_INT 22
32760: EQUAL
32761: IFFALSE 32773
// begin control := control_remote ;
32763: LD_ADDR_VAR 0 4
32767: PUSH
32768: LD_INT 2
32770: ST_TO_ADDR
// break ;
32771: GO 32775
// end ;
32773: GO 32746
32775: POP
32776: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32777: LD_VAR 0 1
32781: PPUSH
32782: LD_VAR 0 2
32786: PPUSH
32787: LD_VAR 0 3
32791: PPUSH
32792: LD_VAR 0 4
32796: PPUSH
32797: LD_VAR 0 5
32801: PPUSH
32802: CALL_OW 448
32806: IFFALSE 32841
// begin result := [ chassis , engine , control , weapon ] ;
32808: LD_ADDR_VAR 0 6
32812: PUSH
32813: LD_VAR 0 2
32817: PUSH
32818: LD_VAR 0 3
32822: PUSH
32823: LD_VAR 0 4
32827: PUSH
32828: LD_VAR 0 5
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: ST_TO_ADDR
// exit ;
32839: GO 33253
// end ; _chassis := AvailableChassisList ( factory ) ;
32841: LD_ADDR_VAR 0 9
32845: PUSH
32846: LD_VAR 0 1
32850: PPUSH
32851: CALL_OW 475
32855: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32856: LD_ADDR_VAR 0 11
32860: PUSH
32861: LD_VAR 0 1
32865: PPUSH
32866: CALL_OW 476
32870: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32871: LD_ADDR_VAR 0 12
32875: PUSH
32876: LD_VAR 0 1
32880: PPUSH
32881: CALL_OW 477
32885: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32886: LD_ADDR_VAR 0 10
32890: PUSH
32891: LD_VAR 0 1
32895: PPUSH
32896: CALL_OW 478
32900: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32901: LD_VAR 0 9
32905: NOT
32906: PUSH
32907: LD_VAR 0 11
32911: NOT
32912: OR
32913: PUSH
32914: LD_VAR 0 12
32918: NOT
32919: OR
32920: PUSH
32921: LD_VAR 0 10
32925: NOT
32926: OR
32927: IFFALSE 32962
// begin result := [ chassis , engine , control , weapon ] ;
32929: LD_ADDR_VAR 0 6
32933: PUSH
32934: LD_VAR 0 2
32938: PUSH
32939: LD_VAR 0 3
32943: PUSH
32944: LD_VAR 0 4
32948: PUSH
32949: LD_VAR 0 5
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: ST_TO_ADDR
// exit ;
32960: GO 33253
// end ; if not chassis in _chassis then
32962: LD_VAR 0 2
32966: PUSH
32967: LD_VAR 0 9
32971: IN
32972: NOT
32973: IFFALSE 32999
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32975: LD_ADDR_VAR 0 2
32979: PUSH
32980: LD_VAR 0 9
32984: PUSH
32985: LD_INT 1
32987: PPUSH
32988: LD_VAR 0 9
32992: PPUSH
32993: CALL_OW 12
32997: ARRAY
32998: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32999: LD_VAR 0 2
33003: PPUSH
33004: LD_VAR 0 3
33008: PPUSH
33009: CALL 33258 0 2
33013: NOT
33014: IFFALSE 33073
// repeat engine := _engine [ 1 ] ;
33016: LD_ADDR_VAR 0 3
33020: PUSH
33021: LD_VAR 0 11
33025: PUSH
33026: LD_INT 1
33028: ARRAY
33029: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33030: LD_ADDR_VAR 0 11
33034: PUSH
33035: LD_VAR 0 11
33039: PPUSH
33040: LD_INT 1
33042: PPUSH
33043: CALL_OW 3
33047: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33048: LD_VAR 0 2
33052: PPUSH
33053: LD_VAR 0 3
33057: PPUSH
33058: CALL 33258 0 2
33062: PUSH
33063: LD_VAR 0 11
33067: PUSH
33068: EMPTY
33069: EQUAL
33070: OR
33071: IFFALSE 33016
// if not control in _control then
33073: LD_VAR 0 4
33077: PUSH
33078: LD_VAR 0 12
33082: IN
33083: NOT
33084: IFFALSE 33110
// control := _control [ rand ( 1 , _control ) ] ;
33086: LD_ADDR_VAR 0 4
33090: PUSH
33091: LD_VAR 0 12
33095: PUSH
33096: LD_INT 1
33098: PPUSH
33099: LD_VAR 0 12
33103: PPUSH
33104: CALL_OW 12
33108: ARRAY
33109: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33110: LD_VAR 0 2
33114: PPUSH
33115: LD_VAR 0 5
33119: PPUSH
33120: CALL 33478 0 2
33124: NOT
33125: IFFALSE 33184
// repeat weapon := _weapon [ 1 ] ;
33127: LD_ADDR_VAR 0 5
33131: PUSH
33132: LD_VAR 0 10
33136: PUSH
33137: LD_INT 1
33139: ARRAY
33140: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33141: LD_ADDR_VAR 0 10
33145: PUSH
33146: LD_VAR 0 10
33150: PPUSH
33151: LD_INT 1
33153: PPUSH
33154: CALL_OW 3
33158: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33159: LD_VAR 0 2
33163: PPUSH
33164: LD_VAR 0 5
33168: PPUSH
33169: CALL 33478 0 2
33173: PUSH
33174: LD_VAR 0 10
33178: PUSH
33179: EMPTY
33180: EQUAL
33181: OR
33182: IFFALSE 33127
// result := [ ] ;
33184: LD_ADDR_VAR 0 6
33188: PUSH
33189: EMPTY
33190: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33191: LD_VAR 0 1
33195: PPUSH
33196: LD_VAR 0 2
33200: PPUSH
33201: LD_VAR 0 3
33205: PPUSH
33206: LD_VAR 0 4
33210: PPUSH
33211: LD_VAR 0 5
33215: PPUSH
33216: CALL_OW 448
33220: IFFALSE 33253
// result := [ chassis , engine , control , weapon ] ;
33222: LD_ADDR_VAR 0 6
33226: PUSH
33227: LD_VAR 0 2
33231: PUSH
33232: LD_VAR 0 3
33236: PUSH
33237: LD_VAR 0 4
33241: PUSH
33242: LD_VAR 0 5
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: ST_TO_ADDR
// end ;
33253: LD_VAR 0 6
33257: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33258: LD_INT 0
33260: PPUSH
// if not chassis or not engine then
33261: LD_VAR 0 1
33265: NOT
33266: PUSH
33267: LD_VAR 0 2
33271: NOT
33272: OR
33273: IFFALSE 33277
// exit ;
33275: GO 33473
// case engine of engine_solar :
33277: LD_VAR 0 2
33281: PUSH
33282: LD_INT 2
33284: DOUBLE
33285: EQUAL
33286: IFTRUE 33290
33288: GO 33328
33290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33291: LD_ADDR_VAR 0 3
33295: PUSH
33296: LD_INT 11
33298: PUSH
33299: LD_INT 12
33301: PUSH
33302: LD_INT 13
33304: PUSH
33305: LD_INT 14
33307: PUSH
33308: LD_INT 1
33310: PUSH
33311: LD_INT 2
33313: PUSH
33314: LD_INT 3
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: ST_TO_ADDR
33326: GO 33457
33328: LD_INT 1
33330: DOUBLE
33331: EQUAL
33332: IFTRUE 33336
33334: GO 33398
33336: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33337: LD_ADDR_VAR 0 3
33341: PUSH
33342: LD_INT 11
33344: PUSH
33345: LD_INT 12
33347: PUSH
33348: LD_INT 13
33350: PUSH
33351: LD_INT 14
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: LD_INT 3
33362: PUSH
33363: LD_INT 4
33365: PUSH
33366: LD_INT 5
33368: PUSH
33369: LD_INT 21
33371: PUSH
33372: LD_INT 23
33374: PUSH
33375: LD_INT 22
33377: PUSH
33378: LD_INT 24
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: ST_TO_ADDR
33396: GO 33457
33398: LD_INT 3
33400: DOUBLE
33401: EQUAL
33402: IFTRUE 33406
33404: GO 33456
33406: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33407: LD_ADDR_VAR 0 3
33411: PUSH
33412: LD_INT 13
33414: PUSH
33415: LD_INT 14
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: LD_INT 3
33423: PUSH
33424: LD_INT 4
33426: PUSH
33427: LD_INT 5
33429: PUSH
33430: LD_INT 21
33432: PUSH
33433: LD_INT 22
33435: PUSH
33436: LD_INT 23
33438: PUSH
33439: LD_INT 24
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: ST_TO_ADDR
33454: GO 33457
33456: POP
// result := ( chassis in result ) ;
33457: LD_ADDR_VAR 0 3
33461: PUSH
33462: LD_VAR 0 1
33466: PUSH
33467: LD_VAR 0 3
33471: IN
33472: ST_TO_ADDR
// end ;
33473: LD_VAR 0 3
33477: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33478: LD_INT 0
33480: PPUSH
// if not chassis or not weapon then
33481: LD_VAR 0 1
33485: NOT
33486: PUSH
33487: LD_VAR 0 2
33491: NOT
33492: OR
33493: IFFALSE 33497
// exit ;
33495: GO 34557
// case weapon of us_machine_gun :
33497: LD_VAR 0 2
33501: PUSH
33502: LD_INT 2
33504: DOUBLE
33505: EQUAL
33506: IFTRUE 33510
33508: GO 33540
33510: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33511: LD_ADDR_VAR 0 3
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: LD_INT 2
33521: PUSH
33522: LD_INT 3
33524: PUSH
33525: LD_INT 4
33527: PUSH
33528: LD_INT 5
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: ST_TO_ADDR
33538: GO 34541
33540: LD_INT 3
33542: DOUBLE
33543: EQUAL
33544: IFTRUE 33548
33546: GO 33578
33548: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33549: LD_ADDR_VAR 0 3
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: LD_INT 3
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: LD_INT 5
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: ST_TO_ADDR
33576: GO 34541
33578: LD_INT 11
33580: DOUBLE
33581: EQUAL
33582: IFTRUE 33586
33584: GO 33616
33586: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33587: LD_ADDR_VAR 0 3
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: LD_INT 2
33597: PUSH
33598: LD_INT 3
33600: PUSH
33601: LD_INT 4
33603: PUSH
33604: LD_INT 5
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: ST_TO_ADDR
33614: GO 34541
33616: LD_INT 4
33618: DOUBLE
33619: EQUAL
33620: IFTRUE 33624
33622: GO 33650
33624: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33625: LD_ADDR_VAR 0 3
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: LD_INT 3
33635: PUSH
33636: LD_INT 4
33638: PUSH
33639: LD_INT 5
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: ST_TO_ADDR
33648: GO 34541
33650: LD_INT 5
33652: DOUBLE
33653: EQUAL
33654: IFTRUE 33658
33656: GO 33684
33658: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33659: LD_ADDR_VAR 0 3
33663: PUSH
33664: LD_INT 2
33666: PUSH
33667: LD_INT 3
33669: PUSH
33670: LD_INT 4
33672: PUSH
33673: LD_INT 5
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: ST_TO_ADDR
33682: GO 34541
33684: LD_INT 9
33686: DOUBLE
33687: EQUAL
33688: IFTRUE 33692
33690: GO 33718
33692: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33693: LD_ADDR_VAR 0 3
33697: PUSH
33698: LD_INT 2
33700: PUSH
33701: LD_INT 3
33703: PUSH
33704: LD_INT 4
33706: PUSH
33707: LD_INT 5
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: ST_TO_ADDR
33716: GO 34541
33718: LD_INT 7
33720: DOUBLE
33721: EQUAL
33722: IFTRUE 33726
33724: GO 33752
33726: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33727: LD_ADDR_VAR 0 3
33731: PUSH
33732: LD_INT 2
33734: PUSH
33735: LD_INT 3
33737: PUSH
33738: LD_INT 4
33740: PUSH
33741: LD_INT 5
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: ST_TO_ADDR
33750: GO 34541
33752: LD_INT 12
33754: DOUBLE
33755: EQUAL
33756: IFTRUE 33760
33758: GO 33786
33760: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33761: LD_ADDR_VAR 0 3
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: LD_INT 3
33771: PUSH
33772: LD_INT 4
33774: PUSH
33775: LD_INT 5
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: ST_TO_ADDR
33784: GO 34541
33786: LD_INT 13
33788: DOUBLE
33789: EQUAL
33790: IFTRUE 33794
33792: GO 33820
33794: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33795: LD_ADDR_VAR 0 3
33799: PUSH
33800: LD_INT 2
33802: PUSH
33803: LD_INT 3
33805: PUSH
33806: LD_INT 4
33808: PUSH
33809: LD_INT 5
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: ST_TO_ADDR
33818: GO 34541
33820: LD_INT 14
33822: DOUBLE
33823: EQUAL
33824: IFTRUE 33828
33826: GO 33846
33828: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33829: LD_ADDR_VAR 0 3
33833: PUSH
33834: LD_INT 4
33836: PUSH
33837: LD_INT 5
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: ST_TO_ADDR
33844: GO 34541
33846: LD_INT 6
33848: DOUBLE
33849: EQUAL
33850: IFTRUE 33854
33852: GO 33872
33854: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33855: LD_ADDR_VAR 0 3
33859: PUSH
33860: LD_INT 4
33862: PUSH
33863: LD_INT 5
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: ST_TO_ADDR
33870: GO 34541
33872: LD_INT 10
33874: DOUBLE
33875: EQUAL
33876: IFTRUE 33880
33878: GO 33898
33880: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33881: LD_ADDR_VAR 0 3
33885: PUSH
33886: LD_INT 4
33888: PUSH
33889: LD_INT 5
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: ST_TO_ADDR
33896: GO 34541
33898: LD_INT 22
33900: DOUBLE
33901: EQUAL
33902: IFTRUE 33906
33904: GO 33932
33906: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33907: LD_ADDR_VAR 0 3
33911: PUSH
33912: LD_INT 11
33914: PUSH
33915: LD_INT 12
33917: PUSH
33918: LD_INT 13
33920: PUSH
33921: LD_INT 14
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: ST_TO_ADDR
33930: GO 34541
33932: LD_INT 23
33934: DOUBLE
33935: EQUAL
33936: IFTRUE 33940
33938: GO 33966
33940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33941: LD_ADDR_VAR 0 3
33945: PUSH
33946: LD_INT 11
33948: PUSH
33949: LD_INT 12
33951: PUSH
33952: LD_INT 13
33954: PUSH
33955: LD_INT 14
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: ST_TO_ADDR
33964: GO 34541
33966: LD_INT 24
33968: DOUBLE
33969: EQUAL
33970: IFTRUE 33974
33972: GO 34000
33974: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33975: LD_ADDR_VAR 0 3
33979: PUSH
33980: LD_INT 11
33982: PUSH
33983: LD_INT 12
33985: PUSH
33986: LD_INT 13
33988: PUSH
33989: LD_INT 14
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: ST_TO_ADDR
33998: GO 34541
34000: LD_INT 30
34002: DOUBLE
34003: EQUAL
34004: IFTRUE 34008
34006: GO 34034
34008: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34009: LD_ADDR_VAR 0 3
34013: PUSH
34014: LD_INT 11
34016: PUSH
34017: LD_INT 12
34019: PUSH
34020: LD_INT 13
34022: PUSH
34023: LD_INT 14
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: ST_TO_ADDR
34032: GO 34541
34034: LD_INT 25
34036: DOUBLE
34037: EQUAL
34038: IFTRUE 34042
34040: GO 34060
34042: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34043: LD_ADDR_VAR 0 3
34047: PUSH
34048: LD_INT 13
34050: PUSH
34051: LD_INT 14
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: ST_TO_ADDR
34058: GO 34541
34060: LD_INT 27
34062: DOUBLE
34063: EQUAL
34064: IFTRUE 34068
34066: GO 34086
34068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34069: LD_ADDR_VAR 0 3
34073: PUSH
34074: LD_INT 13
34076: PUSH
34077: LD_INT 14
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: ST_TO_ADDR
34084: GO 34541
34086: LD_INT 92
34088: DOUBLE
34089: EQUAL
34090: IFTRUE 34094
34092: GO 34120
34094: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34095: LD_ADDR_VAR 0 3
34099: PUSH
34100: LD_INT 11
34102: PUSH
34103: LD_INT 12
34105: PUSH
34106: LD_INT 13
34108: PUSH
34109: LD_INT 14
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: ST_TO_ADDR
34118: GO 34541
34120: LD_INT 28
34122: DOUBLE
34123: EQUAL
34124: IFTRUE 34128
34126: GO 34146
34128: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34129: LD_ADDR_VAR 0 3
34133: PUSH
34134: LD_INT 13
34136: PUSH
34137: LD_INT 14
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: ST_TO_ADDR
34144: GO 34541
34146: LD_INT 29
34148: DOUBLE
34149: EQUAL
34150: IFTRUE 34154
34152: GO 34172
34154: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34155: LD_ADDR_VAR 0 3
34159: PUSH
34160: LD_INT 13
34162: PUSH
34163: LD_INT 14
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: ST_TO_ADDR
34170: GO 34541
34172: LD_INT 31
34174: DOUBLE
34175: EQUAL
34176: IFTRUE 34180
34178: GO 34198
34180: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34181: LD_ADDR_VAR 0 3
34185: PUSH
34186: LD_INT 13
34188: PUSH
34189: LD_INT 14
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: ST_TO_ADDR
34196: GO 34541
34198: LD_INT 26
34200: DOUBLE
34201: EQUAL
34202: IFTRUE 34206
34204: GO 34224
34206: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34207: LD_ADDR_VAR 0 3
34211: PUSH
34212: LD_INT 13
34214: PUSH
34215: LD_INT 14
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: ST_TO_ADDR
34222: GO 34541
34224: LD_INT 42
34226: DOUBLE
34227: EQUAL
34228: IFTRUE 34232
34230: GO 34258
34232: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34233: LD_ADDR_VAR 0 3
34237: PUSH
34238: LD_INT 21
34240: PUSH
34241: LD_INT 22
34243: PUSH
34244: LD_INT 23
34246: PUSH
34247: LD_INT 24
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: ST_TO_ADDR
34256: GO 34541
34258: LD_INT 43
34260: DOUBLE
34261: EQUAL
34262: IFTRUE 34266
34264: GO 34292
34266: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34267: LD_ADDR_VAR 0 3
34271: PUSH
34272: LD_INT 21
34274: PUSH
34275: LD_INT 22
34277: PUSH
34278: LD_INT 23
34280: PUSH
34281: LD_INT 24
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: ST_TO_ADDR
34290: GO 34541
34292: LD_INT 44
34294: DOUBLE
34295: EQUAL
34296: IFTRUE 34300
34298: GO 34326
34300: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34301: LD_ADDR_VAR 0 3
34305: PUSH
34306: LD_INT 21
34308: PUSH
34309: LD_INT 22
34311: PUSH
34312: LD_INT 23
34314: PUSH
34315: LD_INT 24
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: ST_TO_ADDR
34324: GO 34541
34326: LD_INT 45
34328: DOUBLE
34329: EQUAL
34330: IFTRUE 34334
34332: GO 34360
34334: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34335: LD_ADDR_VAR 0 3
34339: PUSH
34340: LD_INT 21
34342: PUSH
34343: LD_INT 22
34345: PUSH
34346: LD_INT 23
34348: PUSH
34349: LD_INT 24
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: ST_TO_ADDR
34358: GO 34541
34360: LD_INT 49
34362: DOUBLE
34363: EQUAL
34364: IFTRUE 34368
34366: GO 34394
34368: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34369: LD_ADDR_VAR 0 3
34373: PUSH
34374: LD_INT 21
34376: PUSH
34377: LD_INT 22
34379: PUSH
34380: LD_INT 23
34382: PUSH
34383: LD_INT 24
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: ST_TO_ADDR
34392: GO 34541
34394: LD_INT 51
34396: DOUBLE
34397: EQUAL
34398: IFTRUE 34402
34400: GO 34428
34402: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34403: LD_ADDR_VAR 0 3
34407: PUSH
34408: LD_INT 21
34410: PUSH
34411: LD_INT 22
34413: PUSH
34414: LD_INT 23
34416: PUSH
34417: LD_INT 24
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: ST_TO_ADDR
34426: GO 34541
34428: LD_INT 52
34430: DOUBLE
34431: EQUAL
34432: IFTRUE 34436
34434: GO 34462
34436: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34437: LD_ADDR_VAR 0 3
34441: PUSH
34442: LD_INT 21
34444: PUSH
34445: LD_INT 22
34447: PUSH
34448: LD_INT 23
34450: PUSH
34451: LD_INT 24
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: ST_TO_ADDR
34460: GO 34541
34462: LD_INT 53
34464: DOUBLE
34465: EQUAL
34466: IFTRUE 34470
34468: GO 34488
34470: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34471: LD_ADDR_VAR 0 3
34475: PUSH
34476: LD_INT 23
34478: PUSH
34479: LD_INT 24
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: ST_TO_ADDR
34486: GO 34541
34488: LD_INT 46
34490: DOUBLE
34491: EQUAL
34492: IFTRUE 34496
34494: GO 34514
34496: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34497: LD_ADDR_VAR 0 3
34501: PUSH
34502: LD_INT 23
34504: PUSH
34505: LD_INT 24
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: ST_TO_ADDR
34512: GO 34541
34514: LD_INT 47
34516: DOUBLE
34517: EQUAL
34518: IFTRUE 34522
34520: GO 34540
34522: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34523: LD_ADDR_VAR 0 3
34527: PUSH
34528: LD_INT 23
34530: PUSH
34531: LD_INT 24
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: ST_TO_ADDR
34538: GO 34541
34540: POP
// result := ( chassis in result ) ;
34541: LD_ADDR_VAR 0 3
34545: PUSH
34546: LD_VAR 0 1
34550: PUSH
34551: LD_VAR 0 3
34555: IN
34556: ST_TO_ADDR
// end ;
34557: LD_VAR 0 3
34561: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34562: LD_INT 0
34564: PPUSH
34565: PPUSH
34566: PPUSH
34567: PPUSH
34568: PPUSH
34569: PPUSH
34570: PPUSH
// result := array ;
34571: LD_ADDR_VAR 0 5
34575: PUSH
34576: LD_VAR 0 1
34580: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34581: LD_VAR 0 1
34585: NOT
34586: PUSH
34587: LD_VAR 0 2
34591: NOT
34592: OR
34593: PUSH
34594: LD_VAR 0 3
34598: NOT
34599: OR
34600: PUSH
34601: LD_VAR 0 2
34605: PUSH
34606: LD_VAR 0 1
34610: GREATER
34611: OR
34612: PUSH
34613: LD_VAR 0 3
34617: PUSH
34618: LD_VAR 0 1
34622: GREATER
34623: OR
34624: IFFALSE 34628
// exit ;
34626: GO 34924
// if direction then
34628: LD_VAR 0 4
34632: IFFALSE 34696
// begin d := 1 ;
34634: LD_ADDR_VAR 0 9
34638: PUSH
34639: LD_INT 1
34641: ST_TO_ADDR
// if i_from > i_to then
34642: LD_VAR 0 2
34646: PUSH
34647: LD_VAR 0 3
34651: GREATER
34652: IFFALSE 34678
// length := ( array - i_from ) + i_to else
34654: LD_ADDR_VAR 0 11
34658: PUSH
34659: LD_VAR 0 1
34663: PUSH
34664: LD_VAR 0 2
34668: MINUS
34669: PUSH
34670: LD_VAR 0 3
34674: PLUS
34675: ST_TO_ADDR
34676: GO 34694
// length := i_to - i_from ;
34678: LD_ADDR_VAR 0 11
34682: PUSH
34683: LD_VAR 0 3
34687: PUSH
34688: LD_VAR 0 2
34692: MINUS
34693: ST_TO_ADDR
// end else
34694: GO 34757
// begin d := - 1 ;
34696: LD_ADDR_VAR 0 9
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: ST_TO_ADDR
// if i_from > i_to then
34705: LD_VAR 0 2
34709: PUSH
34710: LD_VAR 0 3
34714: GREATER
34715: IFFALSE 34735
// length := i_from - i_to else
34717: LD_ADDR_VAR 0 11
34721: PUSH
34722: LD_VAR 0 2
34726: PUSH
34727: LD_VAR 0 3
34731: MINUS
34732: ST_TO_ADDR
34733: GO 34757
// length := ( array - i_to ) + i_from ;
34735: LD_ADDR_VAR 0 11
34739: PUSH
34740: LD_VAR 0 1
34744: PUSH
34745: LD_VAR 0 3
34749: MINUS
34750: PUSH
34751: LD_VAR 0 2
34755: PLUS
34756: ST_TO_ADDR
// end ; if not length then
34757: LD_VAR 0 11
34761: NOT
34762: IFFALSE 34766
// exit ;
34764: GO 34924
// tmp := array ;
34766: LD_ADDR_VAR 0 10
34770: PUSH
34771: LD_VAR 0 1
34775: ST_TO_ADDR
// for i = 1 to length do
34776: LD_ADDR_VAR 0 6
34780: PUSH
34781: DOUBLE
34782: LD_INT 1
34784: DEC
34785: ST_TO_ADDR
34786: LD_VAR 0 11
34790: PUSH
34791: FOR_TO
34792: IFFALSE 34912
// begin for j = 1 to array do
34794: LD_ADDR_VAR 0 7
34798: PUSH
34799: DOUBLE
34800: LD_INT 1
34802: DEC
34803: ST_TO_ADDR
34804: LD_VAR 0 1
34808: PUSH
34809: FOR_TO
34810: IFFALSE 34898
// begin k := j + d ;
34812: LD_ADDR_VAR 0 8
34816: PUSH
34817: LD_VAR 0 7
34821: PUSH
34822: LD_VAR 0 9
34826: PLUS
34827: ST_TO_ADDR
// if k > array then
34828: LD_VAR 0 8
34832: PUSH
34833: LD_VAR 0 1
34837: GREATER
34838: IFFALSE 34848
// k := 1 ;
34840: LD_ADDR_VAR 0 8
34844: PUSH
34845: LD_INT 1
34847: ST_TO_ADDR
// if not k then
34848: LD_VAR 0 8
34852: NOT
34853: IFFALSE 34865
// k := array ;
34855: LD_ADDR_VAR 0 8
34859: PUSH
34860: LD_VAR 0 1
34864: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34865: LD_ADDR_VAR 0 10
34869: PUSH
34870: LD_VAR 0 10
34874: PPUSH
34875: LD_VAR 0 8
34879: PPUSH
34880: LD_VAR 0 1
34884: PUSH
34885: LD_VAR 0 7
34889: ARRAY
34890: PPUSH
34891: CALL_OW 1
34895: ST_TO_ADDR
// end ;
34896: GO 34809
34898: POP
34899: POP
// array := tmp ;
34900: LD_ADDR_VAR 0 1
34904: PUSH
34905: LD_VAR 0 10
34909: ST_TO_ADDR
// end ;
34910: GO 34791
34912: POP
34913: POP
// result := array ;
34914: LD_ADDR_VAR 0 5
34918: PUSH
34919: LD_VAR 0 1
34923: ST_TO_ADDR
// end ;
34924: LD_VAR 0 5
34928: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34929: LD_INT 0
34931: PPUSH
34932: PPUSH
// result := 0 ;
34933: LD_ADDR_VAR 0 3
34937: PUSH
34938: LD_INT 0
34940: ST_TO_ADDR
// if not array or not value in array then
34941: LD_VAR 0 1
34945: NOT
34946: PUSH
34947: LD_VAR 0 2
34951: PUSH
34952: LD_VAR 0 1
34956: IN
34957: NOT
34958: OR
34959: IFFALSE 34963
// exit ;
34961: GO 35017
// for i = 1 to array do
34963: LD_ADDR_VAR 0 4
34967: PUSH
34968: DOUBLE
34969: LD_INT 1
34971: DEC
34972: ST_TO_ADDR
34973: LD_VAR 0 1
34977: PUSH
34978: FOR_TO
34979: IFFALSE 35015
// if value = array [ i ] then
34981: LD_VAR 0 2
34985: PUSH
34986: LD_VAR 0 1
34990: PUSH
34991: LD_VAR 0 4
34995: ARRAY
34996: EQUAL
34997: IFFALSE 35013
// begin result := i ;
34999: LD_ADDR_VAR 0 3
35003: PUSH
35004: LD_VAR 0 4
35008: ST_TO_ADDR
// exit ;
35009: POP
35010: POP
35011: GO 35017
// end ;
35013: GO 34978
35015: POP
35016: POP
// end ;
35017: LD_VAR 0 3
35021: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35022: LD_INT 0
35024: PPUSH
// vc_chassis := chassis ;
35025: LD_ADDR_OWVAR 37
35029: PUSH
35030: LD_VAR 0 1
35034: ST_TO_ADDR
// vc_engine := engine ;
35035: LD_ADDR_OWVAR 39
35039: PUSH
35040: LD_VAR 0 2
35044: ST_TO_ADDR
// vc_control := control ;
35045: LD_ADDR_OWVAR 38
35049: PUSH
35050: LD_VAR 0 3
35054: ST_TO_ADDR
// vc_weapon := weapon ;
35055: LD_ADDR_OWVAR 40
35059: PUSH
35060: LD_VAR 0 4
35064: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35065: LD_ADDR_OWVAR 41
35069: PUSH
35070: LD_VAR 0 5
35074: ST_TO_ADDR
// end ;
35075: LD_VAR 0 6
35079: RET
// export function WantPlant ( unit ) ; var task ; begin
35080: LD_INT 0
35082: PPUSH
35083: PPUSH
// result := false ;
35084: LD_ADDR_VAR 0 2
35088: PUSH
35089: LD_INT 0
35091: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35092: LD_ADDR_VAR 0 3
35096: PUSH
35097: LD_VAR 0 1
35101: PPUSH
35102: CALL_OW 437
35106: ST_TO_ADDR
// if task then
35107: LD_VAR 0 3
35111: IFFALSE 35139
// if task [ 1 ] [ 1 ] = p then
35113: LD_VAR 0 3
35117: PUSH
35118: LD_INT 1
35120: ARRAY
35121: PUSH
35122: LD_INT 1
35124: ARRAY
35125: PUSH
35126: LD_STRING p
35128: EQUAL
35129: IFFALSE 35139
// result := true ;
35131: LD_ADDR_VAR 0 2
35135: PUSH
35136: LD_INT 1
35138: ST_TO_ADDR
// end ;
35139: LD_VAR 0 2
35143: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35144: LD_INT 0
35146: PPUSH
35147: PPUSH
35148: PPUSH
35149: PPUSH
// if pos < 1 then
35150: LD_VAR 0 2
35154: PUSH
35155: LD_INT 1
35157: LESS
35158: IFFALSE 35162
// exit ;
35160: GO 35465
// if pos = 1 then
35162: LD_VAR 0 2
35166: PUSH
35167: LD_INT 1
35169: EQUAL
35170: IFFALSE 35203
// result := Replace ( arr , pos [ 1 ] , value ) else
35172: LD_ADDR_VAR 0 4
35176: PUSH
35177: LD_VAR 0 1
35181: PPUSH
35182: LD_VAR 0 2
35186: PUSH
35187: LD_INT 1
35189: ARRAY
35190: PPUSH
35191: LD_VAR 0 3
35195: PPUSH
35196: CALL_OW 1
35200: ST_TO_ADDR
35201: GO 35465
// begin tmp := arr ;
35203: LD_ADDR_VAR 0 6
35207: PUSH
35208: LD_VAR 0 1
35212: ST_TO_ADDR
// s_arr := [ tmp ] ;
35213: LD_ADDR_VAR 0 7
35217: PUSH
35218: LD_VAR 0 6
35222: PUSH
35223: EMPTY
35224: LIST
35225: ST_TO_ADDR
// for i = 1 to pos - 1 do
35226: LD_ADDR_VAR 0 5
35230: PUSH
35231: DOUBLE
35232: LD_INT 1
35234: DEC
35235: ST_TO_ADDR
35236: LD_VAR 0 2
35240: PUSH
35241: LD_INT 1
35243: MINUS
35244: PUSH
35245: FOR_TO
35246: IFFALSE 35291
// begin tmp := tmp [ pos [ i ] ] ;
35248: LD_ADDR_VAR 0 6
35252: PUSH
35253: LD_VAR 0 6
35257: PUSH
35258: LD_VAR 0 2
35262: PUSH
35263: LD_VAR 0 5
35267: ARRAY
35268: ARRAY
35269: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35270: LD_ADDR_VAR 0 7
35274: PUSH
35275: LD_VAR 0 7
35279: PUSH
35280: LD_VAR 0 6
35284: PUSH
35285: EMPTY
35286: LIST
35287: ADD
35288: ST_TO_ADDR
// end ;
35289: GO 35245
35291: POP
35292: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35293: LD_ADDR_VAR 0 6
35297: PUSH
35298: LD_VAR 0 6
35302: PPUSH
35303: LD_VAR 0 2
35307: PUSH
35308: LD_VAR 0 2
35312: ARRAY
35313: PPUSH
35314: LD_VAR 0 3
35318: PPUSH
35319: CALL_OW 1
35323: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35324: LD_ADDR_VAR 0 7
35328: PUSH
35329: LD_VAR 0 7
35333: PPUSH
35334: LD_VAR 0 7
35338: PPUSH
35339: LD_VAR 0 6
35343: PPUSH
35344: CALL_OW 1
35348: ST_TO_ADDR
// for i = s_arr downto 2 do
35349: LD_ADDR_VAR 0 5
35353: PUSH
35354: DOUBLE
35355: LD_VAR 0 7
35359: INC
35360: ST_TO_ADDR
35361: LD_INT 2
35363: PUSH
35364: FOR_DOWNTO
35365: IFFALSE 35449
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35367: LD_ADDR_VAR 0 6
35371: PUSH
35372: LD_VAR 0 7
35376: PUSH
35377: LD_VAR 0 5
35381: PUSH
35382: LD_INT 1
35384: MINUS
35385: ARRAY
35386: PPUSH
35387: LD_VAR 0 2
35391: PUSH
35392: LD_VAR 0 5
35396: PUSH
35397: LD_INT 1
35399: MINUS
35400: ARRAY
35401: PPUSH
35402: LD_VAR 0 7
35406: PUSH
35407: LD_VAR 0 5
35411: ARRAY
35412: PPUSH
35413: CALL_OW 1
35417: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35418: LD_ADDR_VAR 0 7
35422: PUSH
35423: LD_VAR 0 7
35427: PPUSH
35428: LD_VAR 0 5
35432: PUSH
35433: LD_INT 1
35435: MINUS
35436: PPUSH
35437: LD_VAR 0 6
35441: PPUSH
35442: CALL_OW 1
35446: ST_TO_ADDR
// end ;
35447: GO 35364
35449: POP
35450: POP
// result := s_arr [ 1 ] ;
35451: LD_ADDR_VAR 0 4
35455: PUSH
35456: LD_VAR 0 7
35460: PUSH
35461: LD_INT 1
35463: ARRAY
35464: ST_TO_ADDR
// end ; end ;
35465: LD_VAR 0 4
35469: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35470: LD_INT 0
35472: PPUSH
35473: PPUSH
// if not list then
35474: LD_VAR 0 1
35478: NOT
35479: IFFALSE 35483
// exit ;
35481: GO 35574
// i := list [ pos1 ] ;
35483: LD_ADDR_VAR 0 5
35487: PUSH
35488: LD_VAR 0 1
35492: PUSH
35493: LD_VAR 0 2
35497: ARRAY
35498: ST_TO_ADDR
// if not i then
35499: LD_VAR 0 5
35503: NOT
35504: IFFALSE 35508
// exit ;
35506: GO 35574
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35508: LD_ADDR_VAR 0 1
35512: PUSH
35513: LD_VAR 0 1
35517: PPUSH
35518: LD_VAR 0 2
35522: PPUSH
35523: LD_VAR 0 1
35527: PUSH
35528: LD_VAR 0 3
35532: ARRAY
35533: PPUSH
35534: CALL_OW 1
35538: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35539: LD_ADDR_VAR 0 1
35543: PUSH
35544: LD_VAR 0 1
35548: PPUSH
35549: LD_VAR 0 3
35553: PPUSH
35554: LD_VAR 0 5
35558: PPUSH
35559: CALL_OW 1
35563: ST_TO_ADDR
// result := list ;
35564: LD_ADDR_VAR 0 4
35568: PUSH
35569: LD_VAR 0 1
35573: ST_TO_ADDR
// end ;
35574: LD_VAR 0 4
35578: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35579: LD_INT 0
35581: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35582: LD_ADDR_VAR 0 5
35586: PUSH
35587: LD_VAR 0 1
35591: PPUSH
35592: CALL_OW 250
35596: PPUSH
35597: LD_VAR 0 1
35601: PPUSH
35602: CALL_OW 251
35606: PPUSH
35607: LD_VAR 0 2
35611: PPUSH
35612: LD_VAR 0 3
35616: PPUSH
35617: LD_VAR 0 4
35621: PPUSH
35622: CALL 36000 0 5
35626: ST_TO_ADDR
// end ;
35627: LD_VAR 0 5
35631: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35632: LD_INT 0
35634: PPUSH
35635: PPUSH
35636: PPUSH
35637: PPUSH
// if not list or not unit then
35638: LD_VAR 0 2
35642: NOT
35643: PUSH
35644: LD_VAR 0 1
35648: NOT
35649: OR
35650: IFFALSE 35654
// exit ;
35652: GO 35995
// result := [ ] ;
35654: LD_ADDR_VAR 0 5
35658: PUSH
35659: EMPTY
35660: ST_TO_ADDR
// for i in list do
35661: LD_ADDR_VAR 0 6
35665: PUSH
35666: LD_VAR 0 2
35670: PUSH
35671: FOR_IN
35672: IFFALSE 35890
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35674: LD_ADDR_VAR 0 8
35678: PUSH
35679: LD_VAR 0 1
35683: PPUSH
35684: LD_VAR 0 6
35688: PUSH
35689: LD_INT 1
35691: ARRAY
35692: PPUSH
35693: LD_VAR 0 6
35697: PUSH
35698: LD_INT 2
35700: ARRAY
35701: PPUSH
35702: CALL_OW 297
35706: ST_TO_ADDR
// if not Count ( result ) then
35707: LD_VAR 0 5
35711: PPUSH
35712: CALL 32284 0 1
35716: NOT
35717: IFFALSE 35750
// begin result := Join ( result , [ i , tmp ] ) ;
35719: LD_ADDR_VAR 0 5
35723: PUSH
35724: LD_VAR 0 5
35728: PPUSH
35729: LD_VAR 0 6
35733: PUSH
35734: LD_VAR 0 8
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PPUSH
35743: CALL 67873 0 2
35747: ST_TO_ADDR
// continue ;
35748: GO 35671
// end ; if result [ result ] [ 2 ] <= tmp then
35750: LD_VAR 0 5
35754: PUSH
35755: LD_VAR 0 5
35759: ARRAY
35760: PUSH
35761: LD_INT 2
35763: ARRAY
35764: PUSH
35765: LD_VAR 0 8
35769: LESSEQUAL
35770: IFFALSE 35803
// result := Join ( result , [ i , tmp ] ) else
35772: LD_ADDR_VAR 0 5
35776: PUSH
35777: LD_VAR 0 5
35781: PPUSH
35782: LD_VAR 0 6
35786: PUSH
35787: LD_VAR 0 8
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PPUSH
35796: CALL 67873 0 2
35800: ST_TO_ADDR
35801: GO 35888
// begin for j := 1 to Count ( result ) do
35803: LD_ADDR_VAR 0 7
35807: PUSH
35808: DOUBLE
35809: LD_INT 1
35811: DEC
35812: ST_TO_ADDR
35813: LD_VAR 0 5
35817: PPUSH
35818: CALL 32284 0 1
35822: PUSH
35823: FOR_TO
35824: IFFALSE 35886
// begin if tmp < result [ j ] [ 2 ] then
35826: LD_VAR 0 8
35830: PUSH
35831: LD_VAR 0 5
35835: PUSH
35836: LD_VAR 0 7
35840: ARRAY
35841: PUSH
35842: LD_INT 2
35844: ARRAY
35845: LESS
35846: IFFALSE 35884
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35848: LD_ADDR_VAR 0 5
35852: PUSH
35853: LD_VAR 0 5
35857: PPUSH
35858: LD_VAR 0 7
35862: PPUSH
35863: LD_VAR 0 6
35867: PUSH
35868: LD_VAR 0 8
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PPUSH
35877: CALL_OW 2
35881: ST_TO_ADDR
// break ;
35882: GO 35886
// end ; end ;
35884: GO 35823
35886: POP
35887: POP
// end ; end ;
35888: GO 35671
35890: POP
35891: POP
// if result and not asc then
35892: LD_VAR 0 5
35896: PUSH
35897: LD_VAR 0 3
35901: NOT
35902: AND
35903: IFFALSE 35920
// result := ReverseArray ( result ) ;
35905: LD_ADDR_VAR 0 5
35909: PUSH
35910: LD_VAR 0 5
35914: PPUSH
35915: CALL 63160 0 1
35919: ST_TO_ADDR
// tmp := [ ] ;
35920: LD_ADDR_VAR 0 8
35924: PUSH
35925: EMPTY
35926: ST_TO_ADDR
// if mode then
35927: LD_VAR 0 4
35931: IFFALSE 35995
// begin for i := 1 to result do
35933: LD_ADDR_VAR 0 6
35937: PUSH
35938: DOUBLE
35939: LD_INT 1
35941: DEC
35942: ST_TO_ADDR
35943: LD_VAR 0 5
35947: PUSH
35948: FOR_TO
35949: IFFALSE 35983
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35951: LD_ADDR_VAR 0 8
35955: PUSH
35956: LD_VAR 0 8
35960: PPUSH
35961: LD_VAR 0 5
35965: PUSH
35966: LD_VAR 0 6
35970: ARRAY
35971: PUSH
35972: LD_INT 1
35974: ARRAY
35975: PPUSH
35976: CALL 67873 0 2
35980: ST_TO_ADDR
35981: GO 35948
35983: POP
35984: POP
// result := tmp ;
35985: LD_ADDR_VAR 0 5
35989: PUSH
35990: LD_VAR 0 8
35994: ST_TO_ADDR
// end ; end ;
35995: LD_VAR 0 5
35999: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36000: LD_INT 0
36002: PPUSH
36003: PPUSH
36004: PPUSH
36005: PPUSH
// if not list then
36006: LD_VAR 0 3
36010: NOT
36011: IFFALSE 36015
// exit ;
36013: GO 36403
// result := [ ] ;
36015: LD_ADDR_VAR 0 6
36019: PUSH
36020: EMPTY
36021: ST_TO_ADDR
// for i in list do
36022: LD_ADDR_VAR 0 7
36026: PUSH
36027: LD_VAR 0 3
36031: PUSH
36032: FOR_IN
36033: IFFALSE 36235
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36035: LD_ADDR_VAR 0 9
36039: PUSH
36040: LD_VAR 0 7
36044: PPUSH
36045: LD_VAR 0 1
36049: PPUSH
36050: LD_VAR 0 2
36054: PPUSH
36055: CALL_OW 297
36059: ST_TO_ADDR
// if not result then
36060: LD_VAR 0 6
36064: NOT
36065: IFFALSE 36091
// result := [ [ i , tmp ] ] else
36067: LD_ADDR_VAR 0 6
36071: PUSH
36072: LD_VAR 0 7
36076: PUSH
36077: LD_VAR 0 9
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: EMPTY
36087: LIST
36088: ST_TO_ADDR
36089: GO 36233
// begin if result [ result ] [ 2 ] < tmp then
36091: LD_VAR 0 6
36095: PUSH
36096: LD_VAR 0 6
36100: ARRAY
36101: PUSH
36102: LD_INT 2
36104: ARRAY
36105: PUSH
36106: LD_VAR 0 9
36110: LESS
36111: IFFALSE 36153
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36113: LD_ADDR_VAR 0 6
36117: PUSH
36118: LD_VAR 0 6
36122: PPUSH
36123: LD_VAR 0 6
36127: PUSH
36128: LD_INT 1
36130: PLUS
36131: PPUSH
36132: LD_VAR 0 7
36136: PUSH
36137: LD_VAR 0 9
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PPUSH
36146: CALL_OW 2
36150: ST_TO_ADDR
36151: GO 36233
// for j = 1 to result do
36153: LD_ADDR_VAR 0 8
36157: PUSH
36158: DOUBLE
36159: LD_INT 1
36161: DEC
36162: ST_TO_ADDR
36163: LD_VAR 0 6
36167: PUSH
36168: FOR_TO
36169: IFFALSE 36231
// begin if tmp < result [ j ] [ 2 ] then
36171: LD_VAR 0 9
36175: PUSH
36176: LD_VAR 0 6
36180: PUSH
36181: LD_VAR 0 8
36185: ARRAY
36186: PUSH
36187: LD_INT 2
36189: ARRAY
36190: LESS
36191: IFFALSE 36229
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36193: LD_ADDR_VAR 0 6
36197: PUSH
36198: LD_VAR 0 6
36202: PPUSH
36203: LD_VAR 0 8
36207: PPUSH
36208: LD_VAR 0 7
36212: PUSH
36213: LD_VAR 0 9
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PPUSH
36222: CALL_OW 2
36226: ST_TO_ADDR
// break ;
36227: GO 36231
// end ; end ;
36229: GO 36168
36231: POP
36232: POP
// end ; end ;
36233: GO 36032
36235: POP
36236: POP
// if result and not asc then
36237: LD_VAR 0 6
36241: PUSH
36242: LD_VAR 0 4
36246: NOT
36247: AND
36248: IFFALSE 36323
// begin tmp := result ;
36250: LD_ADDR_VAR 0 9
36254: PUSH
36255: LD_VAR 0 6
36259: ST_TO_ADDR
// for i = tmp downto 1 do
36260: LD_ADDR_VAR 0 7
36264: PUSH
36265: DOUBLE
36266: LD_VAR 0 9
36270: INC
36271: ST_TO_ADDR
36272: LD_INT 1
36274: PUSH
36275: FOR_DOWNTO
36276: IFFALSE 36321
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36278: LD_ADDR_VAR 0 6
36282: PUSH
36283: LD_VAR 0 6
36287: PPUSH
36288: LD_VAR 0 9
36292: PUSH
36293: LD_VAR 0 7
36297: MINUS
36298: PUSH
36299: LD_INT 1
36301: PLUS
36302: PPUSH
36303: LD_VAR 0 9
36307: PUSH
36308: LD_VAR 0 7
36312: ARRAY
36313: PPUSH
36314: CALL_OW 1
36318: ST_TO_ADDR
36319: GO 36275
36321: POP
36322: POP
// end ; tmp := [ ] ;
36323: LD_ADDR_VAR 0 9
36327: PUSH
36328: EMPTY
36329: ST_TO_ADDR
// if mode then
36330: LD_VAR 0 5
36334: IFFALSE 36403
// begin for i = 1 to result do
36336: LD_ADDR_VAR 0 7
36340: PUSH
36341: DOUBLE
36342: LD_INT 1
36344: DEC
36345: ST_TO_ADDR
36346: LD_VAR 0 6
36350: PUSH
36351: FOR_TO
36352: IFFALSE 36391
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36354: LD_ADDR_VAR 0 9
36358: PUSH
36359: LD_VAR 0 9
36363: PPUSH
36364: LD_VAR 0 7
36368: PPUSH
36369: LD_VAR 0 6
36373: PUSH
36374: LD_VAR 0 7
36378: ARRAY
36379: PUSH
36380: LD_INT 1
36382: ARRAY
36383: PPUSH
36384: CALL_OW 1
36388: ST_TO_ADDR
36389: GO 36351
36391: POP
36392: POP
// result := tmp ;
36393: LD_ADDR_VAR 0 6
36397: PUSH
36398: LD_VAR 0 9
36402: ST_TO_ADDR
// end ; end ;
36403: LD_VAR 0 6
36407: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36408: LD_INT 0
36410: PPUSH
36411: PPUSH
36412: PPUSH
36413: PPUSH
36414: PPUSH
36415: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36416: LD_ADDR_VAR 0 5
36420: PUSH
36421: LD_INT 0
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: EMPTY
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: ST_TO_ADDR
// if not x or not y then
36438: LD_VAR 0 2
36442: NOT
36443: PUSH
36444: LD_VAR 0 3
36448: NOT
36449: OR
36450: IFFALSE 36454
// exit ;
36452: GO 38104
// if not range then
36454: LD_VAR 0 4
36458: NOT
36459: IFFALSE 36469
// range := 10 ;
36461: LD_ADDR_VAR 0 4
36465: PUSH
36466: LD_INT 10
36468: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36469: LD_ADDR_VAR 0 8
36473: PUSH
36474: LD_INT 81
36476: PUSH
36477: LD_VAR 0 1
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 92
36488: PUSH
36489: LD_VAR 0 2
36493: PUSH
36494: LD_VAR 0 3
36498: PUSH
36499: LD_VAR 0 4
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 3
36512: PUSH
36513: LD_INT 21
36515: PUSH
36516: LD_INT 3
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: PPUSH
36532: CALL_OW 69
36536: ST_TO_ADDR
// if not tmp then
36537: LD_VAR 0 8
36541: NOT
36542: IFFALSE 36546
// exit ;
36544: GO 38104
// for i in tmp do
36546: LD_ADDR_VAR 0 6
36550: PUSH
36551: LD_VAR 0 8
36555: PUSH
36556: FOR_IN
36557: IFFALSE 38079
// begin points := [ 0 , 0 , 0 ] ;
36559: LD_ADDR_VAR 0 9
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: ST_TO_ADDR
// bpoints := 1 ;
36578: LD_ADDR_VAR 0 10
36582: PUSH
36583: LD_INT 1
36585: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36586: LD_VAR 0 6
36590: PPUSH
36591: CALL_OW 247
36595: PUSH
36596: LD_INT 1
36598: DOUBLE
36599: EQUAL
36600: IFTRUE 36604
36602: GO 37182
36604: POP
// begin if GetClass ( i ) = 1 then
36605: LD_VAR 0 6
36609: PPUSH
36610: CALL_OW 257
36614: PUSH
36615: LD_INT 1
36617: EQUAL
36618: IFFALSE 36639
// points := [ 10 , 5 , 3 ] ;
36620: LD_ADDR_VAR 0 9
36624: PUSH
36625: LD_INT 10
36627: PUSH
36628: LD_INT 5
36630: PUSH
36631: LD_INT 3
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36639: LD_VAR 0 6
36643: PPUSH
36644: CALL_OW 257
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: LD_INT 3
36654: PUSH
36655: LD_INT 4
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: IN
36663: IFFALSE 36684
// points := [ 3 , 2 , 1 ] ;
36665: LD_ADDR_VAR 0 9
36669: PUSH
36670: LD_INT 3
36672: PUSH
36673: LD_INT 2
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36684: LD_VAR 0 6
36688: PPUSH
36689: CALL_OW 257
36693: PUSH
36694: LD_INT 5
36696: EQUAL
36697: IFFALSE 36718
// points := [ 130 , 5 , 2 ] ;
36699: LD_ADDR_VAR 0 9
36703: PUSH
36704: LD_INT 130
36706: PUSH
36707: LD_INT 5
36709: PUSH
36710: LD_INT 2
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36718: LD_VAR 0 6
36722: PPUSH
36723: CALL_OW 257
36727: PUSH
36728: LD_INT 8
36730: EQUAL
36731: IFFALSE 36752
// points := [ 35 , 35 , 30 ] ;
36733: LD_ADDR_VAR 0 9
36737: PUSH
36738: LD_INT 35
36740: PUSH
36741: LD_INT 35
36743: PUSH
36744: LD_INT 30
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36752: LD_VAR 0 6
36756: PPUSH
36757: CALL_OW 257
36761: PUSH
36762: LD_INT 9
36764: EQUAL
36765: IFFALSE 36786
// points := [ 20 , 55 , 40 ] ;
36767: LD_ADDR_VAR 0 9
36771: PUSH
36772: LD_INT 20
36774: PUSH
36775: LD_INT 55
36777: PUSH
36778: LD_INT 40
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: LIST
36785: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36786: LD_VAR 0 6
36790: PPUSH
36791: CALL_OW 257
36795: PUSH
36796: LD_INT 12
36798: PUSH
36799: LD_INT 16
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: IN
36806: IFFALSE 36827
// points := [ 5 , 3 , 2 ] ;
36808: LD_ADDR_VAR 0 9
36812: PUSH
36813: LD_INT 5
36815: PUSH
36816: LD_INT 3
36818: PUSH
36819: LD_INT 2
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: LIST
36826: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36827: LD_VAR 0 6
36831: PPUSH
36832: CALL_OW 257
36836: PUSH
36837: LD_INT 17
36839: EQUAL
36840: IFFALSE 36861
// points := [ 100 , 50 , 75 ] ;
36842: LD_ADDR_VAR 0 9
36846: PUSH
36847: LD_INT 100
36849: PUSH
36850: LD_INT 50
36852: PUSH
36853: LD_INT 75
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36861: LD_VAR 0 6
36865: PPUSH
36866: CALL_OW 257
36870: PUSH
36871: LD_INT 15
36873: EQUAL
36874: IFFALSE 36895
// points := [ 10 , 5 , 3 ] ;
36876: LD_ADDR_VAR 0 9
36880: PUSH
36881: LD_INT 10
36883: PUSH
36884: LD_INT 5
36886: PUSH
36887: LD_INT 3
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36895: LD_VAR 0 6
36899: PPUSH
36900: CALL_OW 257
36904: PUSH
36905: LD_INT 14
36907: EQUAL
36908: IFFALSE 36929
// points := [ 10 , 0 , 0 ] ;
36910: LD_ADDR_VAR 0 9
36914: PUSH
36915: LD_INT 10
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: LIST
36928: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36929: LD_VAR 0 6
36933: PPUSH
36934: CALL_OW 257
36938: PUSH
36939: LD_INT 11
36941: EQUAL
36942: IFFALSE 36963
// points := [ 30 , 10 , 5 ] ;
36944: LD_ADDR_VAR 0 9
36948: PUSH
36949: LD_INT 30
36951: PUSH
36952: LD_INT 10
36954: PUSH
36955: LD_INT 5
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36963: LD_VAR 0 1
36967: PPUSH
36968: LD_INT 5
36970: PPUSH
36971: CALL_OW 321
36975: PUSH
36976: LD_INT 2
36978: EQUAL
36979: IFFALSE 36996
// bpoints := bpoints * 1.8 ;
36981: LD_ADDR_VAR 0 10
36985: PUSH
36986: LD_VAR 0 10
36990: PUSH
36991: LD_REAL  1.80000000000000E+0000
36994: MUL
36995: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36996: LD_VAR 0 6
37000: PPUSH
37001: CALL_OW 257
37005: PUSH
37006: LD_INT 1
37008: PUSH
37009: LD_INT 2
37011: PUSH
37012: LD_INT 3
37014: PUSH
37015: LD_INT 4
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: IN
37024: PUSH
37025: LD_VAR 0 1
37029: PPUSH
37030: LD_INT 51
37032: PPUSH
37033: CALL_OW 321
37037: PUSH
37038: LD_INT 2
37040: EQUAL
37041: AND
37042: IFFALSE 37059
// bpoints := bpoints * 1.2 ;
37044: LD_ADDR_VAR 0 10
37048: PUSH
37049: LD_VAR 0 10
37053: PUSH
37054: LD_REAL  1.20000000000000E+0000
37057: MUL
37058: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37059: LD_VAR 0 6
37063: PPUSH
37064: CALL_OW 257
37068: PUSH
37069: LD_INT 5
37071: PUSH
37072: LD_INT 7
37074: PUSH
37075: LD_INT 9
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: IN
37083: PUSH
37084: LD_VAR 0 1
37088: PPUSH
37089: LD_INT 52
37091: PPUSH
37092: CALL_OW 321
37096: PUSH
37097: LD_INT 2
37099: EQUAL
37100: AND
37101: IFFALSE 37118
// bpoints := bpoints * 1.5 ;
37103: LD_ADDR_VAR 0 10
37107: PUSH
37108: LD_VAR 0 10
37112: PUSH
37113: LD_REAL  1.50000000000000E+0000
37116: MUL
37117: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37118: LD_VAR 0 1
37122: PPUSH
37123: LD_INT 66
37125: PPUSH
37126: CALL_OW 321
37130: PUSH
37131: LD_INT 2
37133: EQUAL
37134: IFFALSE 37151
// bpoints := bpoints * 1.1 ;
37136: LD_ADDR_VAR 0 10
37140: PUSH
37141: LD_VAR 0 10
37145: PUSH
37146: LD_REAL  1.10000000000000E+0000
37149: MUL
37150: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37151: LD_ADDR_VAR 0 10
37155: PUSH
37156: LD_VAR 0 10
37160: PUSH
37161: LD_VAR 0 6
37165: PPUSH
37166: LD_INT 1
37168: PPUSH
37169: CALL_OW 259
37173: PUSH
37174: LD_REAL  1.15000000000000E+0000
37177: MUL
37178: MUL
37179: ST_TO_ADDR
// end ; unit_vehicle :
37180: GO 38008
37182: LD_INT 2
37184: DOUBLE
37185: EQUAL
37186: IFTRUE 37190
37188: GO 37996
37190: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37191: LD_VAR 0 6
37195: PPUSH
37196: CALL_OW 264
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: LD_INT 42
37206: PUSH
37207: LD_INT 24
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: LIST
37214: IN
37215: IFFALSE 37236
// points := [ 25 , 5 , 3 ] ;
37217: LD_ADDR_VAR 0 9
37221: PUSH
37222: LD_INT 25
37224: PUSH
37225: LD_INT 5
37227: PUSH
37228: LD_INT 3
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: LIST
37235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37236: LD_VAR 0 6
37240: PPUSH
37241: CALL_OW 264
37245: PUSH
37246: LD_INT 4
37248: PUSH
37249: LD_INT 43
37251: PUSH
37252: LD_INT 25
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: LIST
37259: IN
37260: IFFALSE 37281
// points := [ 40 , 15 , 5 ] ;
37262: LD_ADDR_VAR 0 9
37266: PUSH
37267: LD_INT 40
37269: PUSH
37270: LD_INT 15
37272: PUSH
37273: LD_INT 5
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37281: LD_VAR 0 6
37285: PPUSH
37286: CALL_OW 264
37290: PUSH
37291: LD_INT 3
37293: PUSH
37294: LD_INT 23
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: IN
37301: IFFALSE 37322
// points := [ 7 , 25 , 8 ] ;
37303: LD_ADDR_VAR 0 9
37307: PUSH
37308: LD_INT 7
37310: PUSH
37311: LD_INT 25
37313: PUSH
37314: LD_INT 8
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: LIST
37321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37322: LD_VAR 0 6
37326: PPUSH
37327: CALL_OW 264
37331: PUSH
37332: LD_INT 5
37334: PUSH
37335: LD_INT 27
37337: PUSH
37338: LD_INT 44
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: LIST
37345: IN
37346: IFFALSE 37367
// points := [ 14 , 50 , 16 ] ;
37348: LD_ADDR_VAR 0 9
37352: PUSH
37353: LD_INT 14
37355: PUSH
37356: LD_INT 50
37358: PUSH
37359: LD_INT 16
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: LIST
37366: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37367: LD_VAR 0 6
37371: PPUSH
37372: CALL_OW 264
37376: PUSH
37377: LD_INT 6
37379: PUSH
37380: LD_INT 46
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: IN
37387: IFFALSE 37408
// points := [ 32 , 120 , 70 ] ;
37389: LD_ADDR_VAR 0 9
37393: PUSH
37394: LD_INT 32
37396: PUSH
37397: LD_INT 120
37399: PUSH
37400: LD_INT 70
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: LIST
37407: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37408: LD_VAR 0 6
37412: PPUSH
37413: CALL_OW 264
37417: PUSH
37418: LD_INT 7
37420: PUSH
37421: LD_INT 28
37423: PUSH
37424: LD_INT 45
37426: PUSH
37427: LD_INT 92
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: IN
37436: IFFALSE 37457
// points := [ 35 , 20 , 45 ] ;
37438: LD_ADDR_VAR 0 9
37442: PUSH
37443: LD_INT 35
37445: PUSH
37446: LD_INT 20
37448: PUSH
37449: LD_INT 45
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: LIST
37456: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37457: LD_VAR 0 6
37461: PPUSH
37462: CALL_OW 264
37466: PUSH
37467: LD_INT 47
37469: PUSH
37470: EMPTY
37471: LIST
37472: IN
37473: IFFALSE 37494
// points := [ 67 , 45 , 75 ] ;
37475: LD_ADDR_VAR 0 9
37479: PUSH
37480: LD_INT 67
37482: PUSH
37483: LD_INT 45
37485: PUSH
37486: LD_INT 75
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: LIST
37493: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37494: LD_VAR 0 6
37498: PPUSH
37499: CALL_OW 264
37503: PUSH
37504: LD_INT 26
37506: PUSH
37507: EMPTY
37508: LIST
37509: IN
37510: IFFALSE 37531
// points := [ 120 , 30 , 80 ] ;
37512: LD_ADDR_VAR 0 9
37516: PUSH
37517: LD_INT 120
37519: PUSH
37520: LD_INT 30
37522: PUSH
37523: LD_INT 80
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: LIST
37530: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37531: LD_VAR 0 6
37535: PPUSH
37536: CALL_OW 264
37540: PUSH
37541: LD_INT 22
37543: PUSH
37544: EMPTY
37545: LIST
37546: IN
37547: IFFALSE 37568
// points := [ 40 , 1 , 1 ] ;
37549: LD_ADDR_VAR 0 9
37553: PUSH
37554: LD_INT 40
37556: PUSH
37557: LD_INT 1
37559: PUSH
37560: LD_INT 1
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37568: LD_VAR 0 6
37572: PPUSH
37573: CALL_OW 264
37577: PUSH
37578: LD_INT 29
37580: PUSH
37581: EMPTY
37582: LIST
37583: IN
37584: IFFALSE 37605
// points := [ 70 , 200 , 400 ] ;
37586: LD_ADDR_VAR 0 9
37590: PUSH
37591: LD_INT 70
37593: PUSH
37594: LD_INT 200
37596: PUSH
37597: LD_INT 400
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: LIST
37604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37605: LD_VAR 0 6
37609: PPUSH
37610: CALL_OW 264
37614: PUSH
37615: LD_INT 14
37617: PUSH
37618: LD_INT 53
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: IN
37625: IFFALSE 37646
// points := [ 40 , 10 , 20 ] ;
37627: LD_ADDR_VAR 0 9
37631: PUSH
37632: LD_INT 40
37634: PUSH
37635: LD_INT 10
37637: PUSH
37638: LD_INT 20
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37646: LD_VAR 0 6
37650: PPUSH
37651: CALL_OW 264
37655: PUSH
37656: LD_INT 9
37658: PUSH
37659: EMPTY
37660: LIST
37661: IN
37662: IFFALSE 37683
// points := [ 5 , 70 , 20 ] ;
37664: LD_ADDR_VAR 0 9
37668: PUSH
37669: LD_INT 5
37671: PUSH
37672: LD_INT 70
37674: PUSH
37675: LD_INT 20
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: LIST
37682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37683: LD_VAR 0 6
37687: PPUSH
37688: CALL_OW 264
37692: PUSH
37693: LD_INT 10
37695: PUSH
37696: EMPTY
37697: LIST
37698: IN
37699: IFFALSE 37720
// points := [ 35 , 110 , 70 ] ;
37701: LD_ADDR_VAR 0 9
37705: PUSH
37706: LD_INT 35
37708: PUSH
37709: LD_INT 110
37711: PUSH
37712: LD_INT 70
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37720: LD_VAR 0 6
37724: PPUSH
37725: CALL_OW 265
37729: PUSH
37730: LD_INT 25
37732: EQUAL
37733: IFFALSE 37754
// points := [ 80 , 65 , 100 ] ;
37735: LD_ADDR_VAR 0 9
37739: PUSH
37740: LD_INT 80
37742: PUSH
37743: LD_INT 65
37745: PUSH
37746: LD_INT 100
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: LIST
37753: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37754: LD_VAR 0 6
37758: PPUSH
37759: CALL_OW 263
37763: PUSH
37764: LD_INT 1
37766: EQUAL
37767: IFFALSE 37802
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37769: LD_ADDR_VAR 0 10
37773: PUSH
37774: LD_VAR 0 10
37778: PUSH
37779: LD_VAR 0 6
37783: PPUSH
37784: CALL_OW 311
37788: PPUSH
37789: LD_INT 3
37791: PPUSH
37792: CALL_OW 259
37796: PUSH
37797: LD_INT 4
37799: MUL
37800: MUL
37801: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37802: LD_VAR 0 6
37806: PPUSH
37807: CALL_OW 263
37811: PUSH
37812: LD_INT 2
37814: EQUAL
37815: IFFALSE 37866
// begin j := IsControledBy ( i ) ;
37817: LD_ADDR_VAR 0 7
37821: PUSH
37822: LD_VAR 0 6
37826: PPUSH
37827: CALL_OW 312
37831: ST_TO_ADDR
// if j then
37832: LD_VAR 0 7
37836: IFFALSE 37866
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37838: LD_ADDR_VAR 0 10
37842: PUSH
37843: LD_VAR 0 10
37847: PUSH
37848: LD_VAR 0 7
37852: PPUSH
37853: LD_INT 3
37855: PPUSH
37856: CALL_OW 259
37860: PUSH
37861: LD_INT 3
37863: MUL
37864: MUL
37865: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37866: LD_VAR 0 6
37870: PPUSH
37871: CALL_OW 264
37875: PUSH
37876: LD_INT 5
37878: PUSH
37879: LD_INT 6
37881: PUSH
37882: LD_INT 46
37884: PUSH
37885: LD_INT 44
37887: PUSH
37888: LD_INT 47
37890: PUSH
37891: LD_INT 45
37893: PUSH
37894: LD_INT 28
37896: PUSH
37897: LD_INT 7
37899: PUSH
37900: LD_INT 27
37902: PUSH
37903: LD_INT 29
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: IN
37918: PUSH
37919: LD_VAR 0 1
37923: PPUSH
37924: LD_INT 52
37926: PPUSH
37927: CALL_OW 321
37931: PUSH
37932: LD_INT 2
37934: EQUAL
37935: AND
37936: IFFALSE 37953
// bpoints := bpoints * 1.2 ;
37938: LD_ADDR_VAR 0 10
37942: PUSH
37943: LD_VAR 0 10
37947: PUSH
37948: LD_REAL  1.20000000000000E+0000
37951: MUL
37952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37953: LD_VAR 0 6
37957: PPUSH
37958: CALL_OW 264
37962: PUSH
37963: LD_INT 6
37965: PUSH
37966: LD_INT 46
37968: PUSH
37969: LD_INT 47
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: IN
37977: IFFALSE 37994
// bpoints := bpoints * 1.2 ;
37979: LD_ADDR_VAR 0 10
37983: PUSH
37984: LD_VAR 0 10
37988: PUSH
37989: LD_REAL  1.20000000000000E+0000
37992: MUL
37993: ST_TO_ADDR
// end ; unit_building :
37994: GO 38008
37996: LD_INT 3
37998: DOUBLE
37999: EQUAL
38000: IFTRUE 38004
38002: GO 38007
38004: POP
// ; end ;
38005: GO 38008
38007: POP
// for j = 1 to 3 do
38008: LD_ADDR_VAR 0 7
38012: PUSH
38013: DOUBLE
38014: LD_INT 1
38016: DEC
38017: ST_TO_ADDR
38018: LD_INT 3
38020: PUSH
38021: FOR_TO
38022: IFFALSE 38075
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38024: LD_ADDR_VAR 0 5
38028: PUSH
38029: LD_VAR 0 5
38033: PPUSH
38034: LD_VAR 0 7
38038: PPUSH
38039: LD_VAR 0 5
38043: PUSH
38044: LD_VAR 0 7
38048: ARRAY
38049: PUSH
38050: LD_VAR 0 9
38054: PUSH
38055: LD_VAR 0 7
38059: ARRAY
38060: PUSH
38061: LD_VAR 0 10
38065: MUL
38066: PLUS
38067: PPUSH
38068: CALL_OW 1
38072: ST_TO_ADDR
38073: GO 38021
38075: POP
38076: POP
// end ;
38077: GO 36556
38079: POP
38080: POP
// result := Replace ( result , 4 , tmp ) ;
38081: LD_ADDR_VAR 0 5
38085: PUSH
38086: LD_VAR 0 5
38090: PPUSH
38091: LD_INT 4
38093: PPUSH
38094: LD_VAR 0 8
38098: PPUSH
38099: CALL_OW 1
38103: ST_TO_ADDR
// end ;
38104: LD_VAR 0 5
38108: RET
// export function DangerAtRange ( unit , range ) ; begin
38109: LD_INT 0
38111: PPUSH
// if not unit then
38112: LD_VAR 0 1
38116: NOT
38117: IFFALSE 38121
// exit ;
38119: GO 38166
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38121: LD_ADDR_VAR 0 3
38125: PUSH
38126: LD_VAR 0 1
38130: PPUSH
38131: CALL_OW 255
38135: PPUSH
38136: LD_VAR 0 1
38140: PPUSH
38141: CALL_OW 250
38145: PPUSH
38146: LD_VAR 0 1
38150: PPUSH
38151: CALL_OW 251
38155: PPUSH
38156: LD_VAR 0 2
38160: PPUSH
38161: CALL 36408 0 4
38165: ST_TO_ADDR
// end ;
38166: LD_VAR 0 3
38170: RET
// export function DangerInArea ( side , area ) ; begin
38171: LD_INT 0
38173: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38174: LD_ADDR_VAR 0 3
38178: PUSH
38179: LD_VAR 0 2
38183: PPUSH
38184: LD_INT 81
38186: PUSH
38187: LD_VAR 0 1
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PPUSH
38196: CALL_OW 70
38200: ST_TO_ADDR
// end ;
38201: LD_VAR 0 3
38205: RET
// export function IsExtension ( b ) ; begin
38206: LD_INT 0
38208: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38209: LD_ADDR_VAR 0 2
38213: PUSH
38214: LD_VAR 0 1
38218: PUSH
38219: LD_INT 23
38221: PUSH
38222: LD_INT 20
38224: PUSH
38225: LD_INT 22
38227: PUSH
38228: LD_INT 17
38230: PUSH
38231: LD_INT 24
38233: PUSH
38234: LD_INT 21
38236: PUSH
38237: LD_INT 19
38239: PUSH
38240: LD_INT 16
38242: PUSH
38243: LD_INT 25
38245: PUSH
38246: LD_INT 18
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: IN
38261: ST_TO_ADDR
// end ;
38262: LD_VAR 0 2
38266: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38267: LD_INT 0
38269: PPUSH
38270: PPUSH
38271: PPUSH
// result := [ ] ;
38272: LD_ADDR_VAR 0 4
38276: PUSH
38277: EMPTY
38278: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38279: LD_ADDR_VAR 0 5
38283: PUSH
38284: LD_VAR 0 2
38288: PPUSH
38289: LD_INT 21
38291: PUSH
38292: LD_INT 3
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PPUSH
38299: CALL_OW 70
38303: ST_TO_ADDR
// if not tmp then
38304: LD_VAR 0 5
38308: NOT
38309: IFFALSE 38313
// exit ;
38311: GO 38377
// if checkLink then
38313: LD_VAR 0 3
38317: IFFALSE 38367
// begin for i in tmp do
38319: LD_ADDR_VAR 0 6
38323: PUSH
38324: LD_VAR 0 5
38328: PUSH
38329: FOR_IN
38330: IFFALSE 38365
// if GetBase ( i ) <> base then
38332: LD_VAR 0 6
38336: PPUSH
38337: CALL_OW 274
38341: PUSH
38342: LD_VAR 0 1
38346: NONEQUAL
38347: IFFALSE 38363
// ComLinkToBase ( base , i ) ;
38349: LD_VAR 0 1
38353: PPUSH
38354: LD_VAR 0 6
38358: PPUSH
38359: CALL_OW 169
38363: GO 38329
38365: POP
38366: POP
// end ; result := tmp ;
38367: LD_ADDR_VAR 0 4
38371: PUSH
38372: LD_VAR 0 5
38376: ST_TO_ADDR
// end ;
38377: LD_VAR 0 4
38381: RET
// export function ComComplete ( units , b ) ; var i ; begin
38382: LD_INT 0
38384: PPUSH
38385: PPUSH
// if not units then
38386: LD_VAR 0 1
38390: NOT
38391: IFFALSE 38395
// exit ;
38393: GO 38485
// for i in units do
38395: LD_ADDR_VAR 0 4
38399: PUSH
38400: LD_VAR 0 1
38404: PUSH
38405: FOR_IN
38406: IFFALSE 38483
// if BuildingStatus ( b ) = bs_build then
38408: LD_VAR 0 2
38412: PPUSH
38413: CALL_OW 461
38417: PUSH
38418: LD_INT 1
38420: EQUAL
38421: IFFALSE 38481
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38423: LD_VAR 0 4
38427: PPUSH
38428: LD_STRING h
38430: PUSH
38431: LD_VAR 0 2
38435: PPUSH
38436: CALL_OW 250
38440: PUSH
38441: LD_VAR 0 2
38445: PPUSH
38446: CALL_OW 251
38450: PUSH
38451: LD_VAR 0 2
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: PUSH
38474: EMPTY
38475: LIST
38476: PPUSH
38477: CALL_OW 446
38481: GO 38405
38483: POP
38484: POP
// end ;
38485: LD_VAR 0 3
38489: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38490: LD_INT 0
38492: PPUSH
38493: PPUSH
38494: PPUSH
38495: PPUSH
38496: PPUSH
38497: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38498: LD_VAR 0 1
38502: NOT
38503: PUSH
38504: LD_VAR 0 1
38508: PPUSH
38509: CALL_OW 263
38513: PUSH
38514: LD_INT 2
38516: NONEQUAL
38517: OR
38518: IFFALSE 38522
// exit ;
38520: GO 38838
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38522: LD_ADDR_VAR 0 6
38526: PUSH
38527: LD_INT 22
38529: PUSH
38530: LD_VAR 0 1
38534: PPUSH
38535: CALL_OW 255
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 2
38546: PUSH
38547: LD_INT 30
38549: PUSH
38550: LD_INT 36
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 34
38559: PUSH
38560: LD_INT 31
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PPUSH
38576: CALL_OW 69
38580: ST_TO_ADDR
// if not tmp then
38581: LD_VAR 0 6
38585: NOT
38586: IFFALSE 38590
// exit ;
38588: GO 38838
// result := [ ] ;
38590: LD_ADDR_VAR 0 2
38594: PUSH
38595: EMPTY
38596: ST_TO_ADDR
// for i in tmp do
38597: LD_ADDR_VAR 0 3
38601: PUSH
38602: LD_VAR 0 6
38606: PUSH
38607: FOR_IN
38608: IFFALSE 38679
// begin t := UnitsInside ( i ) ;
38610: LD_ADDR_VAR 0 4
38614: PUSH
38615: LD_VAR 0 3
38619: PPUSH
38620: CALL_OW 313
38624: ST_TO_ADDR
// if t then
38625: LD_VAR 0 4
38629: IFFALSE 38677
// for j in t do
38631: LD_ADDR_VAR 0 7
38635: PUSH
38636: LD_VAR 0 4
38640: PUSH
38641: FOR_IN
38642: IFFALSE 38675
// result := Replace ( result , result + 1 , j ) ;
38644: LD_ADDR_VAR 0 2
38648: PUSH
38649: LD_VAR 0 2
38653: PPUSH
38654: LD_VAR 0 2
38658: PUSH
38659: LD_INT 1
38661: PLUS
38662: PPUSH
38663: LD_VAR 0 7
38667: PPUSH
38668: CALL_OW 1
38672: ST_TO_ADDR
38673: GO 38641
38675: POP
38676: POP
// end ;
38677: GO 38607
38679: POP
38680: POP
// if not result then
38681: LD_VAR 0 2
38685: NOT
38686: IFFALSE 38690
// exit ;
38688: GO 38838
// mech := result [ 1 ] ;
38690: LD_ADDR_VAR 0 5
38694: PUSH
38695: LD_VAR 0 2
38699: PUSH
38700: LD_INT 1
38702: ARRAY
38703: ST_TO_ADDR
// if result > 1 then
38704: LD_VAR 0 2
38708: PUSH
38709: LD_INT 1
38711: GREATER
38712: IFFALSE 38824
// begin for i = 2 to result do
38714: LD_ADDR_VAR 0 3
38718: PUSH
38719: DOUBLE
38720: LD_INT 2
38722: DEC
38723: ST_TO_ADDR
38724: LD_VAR 0 2
38728: PUSH
38729: FOR_TO
38730: IFFALSE 38822
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38732: LD_ADDR_VAR 0 4
38736: PUSH
38737: LD_VAR 0 2
38741: PUSH
38742: LD_VAR 0 3
38746: ARRAY
38747: PPUSH
38748: LD_INT 3
38750: PPUSH
38751: CALL_OW 259
38755: PUSH
38756: LD_VAR 0 2
38760: PUSH
38761: LD_VAR 0 3
38765: ARRAY
38766: PPUSH
38767: CALL_OW 432
38771: MINUS
38772: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38773: LD_VAR 0 4
38777: PUSH
38778: LD_VAR 0 5
38782: PPUSH
38783: LD_INT 3
38785: PPUSH
38786: CALL_OW 259
38790: PUSH
38791: LD_VAR 0 5
38795: PPUSH
38796: CALL_OW 432
38800: MINUS
38801: GREATEREQUAL
38802: IFFALSE 38820
// mech := result [ i ] ;
38804: LD_ADDR_VAR 0 5
38808: PUSH
38809: LD_VAR 0 2
38813: PUSH
38814: LD_VAR 0 3
38818: ARRAY
38819: ST_TO_ADDR
// end ;
38820: GO 38729
38822: POP
38823: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38824: LD_VAR 0 1
38828: PPUSH
38829: LD_VAR 0 5
38833: PPUSH
38834: CALL_OW 135
// end ;
38838: LD_VAR 0 2
38842: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38843: LD_INT 0
38845: PPUSH
38846: PPUSH
38847: PPUSH
38848: PPUSH
38849: PPUSH
38850: PPUSH
38851: PPUSH
38852: PPUSH
38853: PPUSH
38854: PPUSH
38855: PPUSH
38856: PPUSH
38857: PPUSH
// result := [ ] ;
38858: LD_ADDR_VAR 0 7
38862: PUSH
38863: EMPTY
38864: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38865: LD_VAR 0 1
38869: PPUSH
38870: CALL_OW 266
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 1
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: IN
38885: NOT
38886: IFFALSE 38890
// exit ;
38888: GO 40524
// if name then
38890: LD_VAR 0 3
38894: IFFALSE 38910
// SetBName ( base_dep , name ) ;
38896: LD_VAR 0 1
38900: PPUSH
38901: LD_VAR 0 3
38905: PPUSH
38906: CALL_OW 500
// base := GetBase ( base_dep ) ;
38910: LD_ADDR_VAR 0 15
38914: PUSH
38915: LD_VAR 0 1
38919: PPUSH
38920: CALL_OW 274
38924: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38925: LD_ADDR_VAR 0 16
38929: PUSH
38930: LD_VAR 0 1
38934: PPUSH
38935: CALL_OW 255
38939: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38940: LD_ADDR_VAR 0 17
38944: PUSH
38945: LD_VAR 0 1
38949: PPUSH
38950: CALL_OW 248
38954: ST_TO_ADDR
// if sources then
38955: LD_VAR 0 5
38959: IFFALSE 39006
// for i = 1 to 3 do
38961: LD_ADDR_VAR 0 8
38965: PUSH
38966: DOUBLE
38967: LD_INT 1
38969: DEC
38970: ST_TO_ADDR
38971: LD_INT 3
38973: PUSH
38974: FOR_TO
38975: IFFALSE 39004
// AddResourceType ( base , i , sources [ i ] ) ;
38977: LD_VAR 0 15
38981: PPUSH
38982: LD_VAR 0 8
38986: PPUSH
38987: LD_VAR 0 5
38991: PUSH
38992: LD_VAR 0 8
38996: ARRAY
38997: PPUSH
38998: CALL_OW 276
39002: GO 38974
39004: POP
39005: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39006: LD_ADDR_VAR 0 18
39010: PUSH
39011: LD_VAR 0 15
39015: PPUSH
39016: LD_VAR 0 2
39020: PPUSH
39021: LD_INT 1
39023: PPUSH
39024: CALL 38267 0 3
39028: ST_TO_ADDR
// InitHc ;
39029: CALL_OW 19
// InitUc ;
39033: CALL_OW 18
// uc_side := side ;
39037: LD_ADDR_OWVAR 20
39041: PUSH
39042: LD_VAR 0 16
39046: ST_TO_ADDR
// uc_nation := nation ;
39047: LD_ADDR_OWVAR 21
39051: PUSH
39052: LD_VAR 0 17
39056: ST_TO_ADDR
// if buildings then
39057: LD_VAR 0 18
39061: IFFALSE 40383
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39063: LD_ADDR_VAR 0 19
39067: PUSH
39068: LD_VAR 0 18
39072: PPUSH
39073: LD_INT 2
39075: PUSH
39076: LD_INT 30
39078: PUSH
39079: LD_INT 29
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 30
39088: PUSH
39089: LD_INT 30
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: PPUSH
39101: CALL_OW 72
39105: ST_TO_ADDR
// if tmp then
39106: LD_VAR 0 19
39110: IFFALSE 39158
// for i in tmp do
39112: LD_ADDR_VAR 0 8
39116: PUSH
39117: LD_VAR 0 19
39121: PUSH
39122: FOR_IN
39123: IFFALSE 39156
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39125: LD_VAR 0 8
39129: PPUSH
39130: CALL_OW 250
39134: PPUSH
39135: LD_VAR 0 8
39139: PPUSH
39140: CALL_OW 251
39144: PPUSH
39145: LD_VAR 0 16
39149: PPUSH
39150: CALL_OW 441
39154: GO 39122
39156: POP
39157: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39158: LD_VAR 0 18
39162: PPUSH
39163: LD_INT 2
39165: PUSH
39166: LD_INT 30
39168: PUSH
39169: LD_INT 32
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 30
39178: PUSH
39179: LD_INT 33
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: PPUSH
39191: CALL_OW 72
39195: IFFALSE 39283
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39197: LD_ADDR_VAR 0 8
39201: PUSH
39202: LD_VAR 0 18
39206: PPUSH
39207: LD_INT 2
39209: PUSH
39210: LD_INT 30
39212: PUSH
39213: LD_INT 32
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 30
39222: PUSH
39223: LD_INT 33
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: LIST
39234: PPUSH
39235: CALL_OW 72
39239: PUSH
39240: FOR_IN
39241: IFFALSE 39281
// begin if not GetBWeapon ( i ) then
39243: LD_VAR 0 8
39247: PPUSH
39248: CALL_OW 269
39252: NOT
39253: IFFALSE 39279
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39255: LD_VAR 0 8
39259: PPUSH
39260: LD_VAR 0 8
39264: PPUSH
39265: LD_VAR 0 2
39269: PPUSH
39270: CALL 40529 0 2
39274: PPUSH
39275: CALL_OW 431
// end ;
39279: GO 39240
39281: POP
39282: POP
// end ; for i = 1 to personel do
39283: LD_ADDR_VAR 0 8
39287: PUSH
39288: DOUBLE
39289: LD_INT 1
39291: DEC
39292: ST_TO_ADDR
39293: LD_VAR 0 6
39297: PUSH
39298: FOR_TO
39299: IFFALSE 40363
// begin if i > 4 then
39301: LD_VAR 0 8
39305: PUSH
39306: LD_INT 4
39308: GREATER
39309: IFFALSE 39313
// break ;
39311: GO 40363
// case i of 1 :
39313: LD_VAR 0 8
39317: PUSH
39318: LD_INT 1
39320: DOUBLE
39321: EQUAL
39322: IFTRUE 39326
39324: GO 39406
39326: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39327: LD_ADDR_VAR 0 12
39331: PUSH
39332: LD_VAR 0 18
39336: PPUSH
39337: LD_INT 22
39339: PUSH
39340: LD_VAR 0 16
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 58
39351: PUSH
39352: EMPTY
39353: LIST
39354: PUSH
39355: LD_INT 2
39357: PUSH
39358: LD_INT 30
39360: PUSH
39361: LD_INT 32
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 30
39370: PUSH
39371: LD_INT 4
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 30
39380: PUSH
39381: LD_INT 5
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: LIST
39398: PPUSH
39399: CALL_OW 72
39403: ST_TO_ADDR
39404: GO 39628
39406: LD_INT 2
39408: DOUBLE
39409: EQUAL
39410: IFTRUE 39414
39412: GO 39476
39414: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39415: LD_ADDR_VAR 0 12
39419: PUSH
39420: LD_VAR 0 18
39424: PPUSH
39425: LD_INT 22
39427: PUSH
39428: LD_VAR 0 16
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: LD_INT 30
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 30
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PPUSH
39469: CALL_OW 72
39473: ST_TO_ADDR
39474: GO 39628
39476: LD_INT 3
39478: DOUBLE
39479: EQUAL
39480: IFTRUE 39484
39482: GO 39546
39484: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39485: LD_ADDR_VAR 0 12
39489: PUSH
39490: LD_VAR 0 18
39494: PPUSH
39495: LD_INT 22
39497: PUSH
39498: LD_VAR 0 16
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: LD_INT 30
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 30
39522: PUSH
39523: LD_INT 3
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PPUSH
39539: CALL_OW 72
39543: ST_TO_ADDR
39544: GO 39628
39546: LD_INT 4
39548: DOUBLE
39549: EQUAL
39550: IFTRUE 39554
39552: GO 39627
39554: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39555: LD_ADDR_VAR 0 12
39559: PUSH
39560: LD_VAR 0 18
39564: PPUSH
39565: LD_INT 22
39567: PUSH
39568: LD_VAR 0 16
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 2
39579: PUSH
39580: LD_INT 30
39582: PUSH
39583: LD_INT 6
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 30
39592: PUSH
39593: LD_INT 7
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 30
39602: PUSH
39603: LD_INT 8
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PPUSH
39620: CALL_OW 72
39624: ST_TO_ADDR
39625: GO 39628
39627: POP
// if i = 1 then
39628: LD_VAR 0 8
39632: PUSH
39633: LD_INT 1
39635: EQUAL
39636: IFFALSE 39747
// begin tmp := [ ] ;
39638: LD_ADDR_VAR 0 19
39642: PUSH
39643: EMPTY
39644: ST_TO_ADDR
// for j in f do
39645: LD_ADDR_VAR 0 9
39649: PUSH
39650: LD_VAR 0 12
39654: PUSH
39655: FOR_IN
39656: IFFALSE 39729
// if GetBType ( j ) = b_bunker then
39658: LD_VAR 0 9
39662: PPUSH
39663: CALL_OW 266
39667: PUSH
39668: LD_INT 32
39670: EQUAL
39671: IFFALSE 39698
// tmp := Insert ( tmp , 1 , j ) else
39673: LD_ADDR_VAR 0 19
39677: PUSH
39678: LD_VAR 0 19
39682: PPUSH
39683: LD_INT 1
39685: PPUSH
39686: LD_VAR 0 9
39690: PPUSH
39691: CALL_OW 2
39695: ST_TO_ADDR
39696: GO 39727
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39698: LD_ADDR_VAR 0 19
39702: PUSH
39703: LD_VAR 0 19
39707: PPUSH
39708: LD_VAR 0 19
39712: PUSH
39713: LD_INT 1
39715: PLUS
39716: PPUSH
39717: LD_VAR 0 9
39721: PPUSH
39722: CALL_OW 2
39726: ST_TO_ADDR
39727: GO 39655
39729: POP
39730: POP
// if tmp then
39731: LD_VAR 0 19
39735: IFFALSE 39747
// f := tmp ;
39737: LD_ADDR_VAR 0 12
39741: PUSH
39742: LD_VAR 0 19
39746: ST_TO_ADDR
// end ; x := personel [ i ] ;
39747: LD_ADDR_VAR 0 13
39751: PUSH
39752: LD_VAR 0 6
39756: PUSH
39757: LD_VAR 0 8
39761: ARRAY
39762: ST_TO_ADDR
// if x = - 1 then
39763: LD_VAR 0 13
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: EQUAL
39772: IFFALSE 39981
// begin for j in f do
39774: LD_ADDR_VAR 0 9
39778: PUSH
39779: LD_VAR 0 12
39783: PUSH
39784: FOR_IN
39785: IFFALSE 39977
// repeat InitHc ;
39787: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39791: LD_VAR 0 9
39795: PPUSH
39796: CALL_OW 266
39800: PUSH
39801: LD_INT 5
39803: EQUAL
39804: IFFALSE 39874
// begin if UnitsInside ( j ) < 3 then
39806: LD_VAR 0 9
39810: PPUSH
39811: CALL_OW 313
39815: PUSH
39816: LD_INT 3
39818: LESS
39819: IFFALSE 39855
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39821: LD_INT 0
39823: PPUSH
39824: LD_INT 5
39826: PUSH
39827: LD_INT 8
39829: PUSH
39830: LD_INT 9
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: LIST
39837: PUSH
39838: LD_VAR 0 17
39842: ARRAY
39843: PPUSH
39844: LD_VAR 0 4
39848: PPUSH
39849: CALL_OW 380
39853: GO 39872
// PrepareHuman ( false , i , skill ) ;
39855: LD_INT 0
39857: PPUSH
39858: LD_VAR 0 8
39862: PPUSH
39863: LD_VAR 0 4
39867: PPUSH
39868: CALL_OW 380
// end else
39872: GO 39891
// PrepareHuman ( false , i , skill ) ;
39874: LD_INT 0
39876: PPUSH
39877: LD_VAR 0 8
39881: PPUSH
39882: LD_VAR 0 4
39886: PPUSH
39887: CALL_OW 380
// un := CreateHuman ;
39891: LD_ADDR_VAR 0 14
39895: PUSH
39896: CALL_OW 44
39900: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39901: LD_ADDR_VAR 0 7
39905: PUSH
39906: LD_VAR 0 7
39910: PPUSH
39911: LD_INT 1
39913: PPUSH
39914: LD_VAR 0 14
39918: PPUSH
39919: CALL_OW 2
39923: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39924: LD_VAR 0 14
39928: PPUSH
39929: LD_VAR 0 9
39933: PPUSH
39934: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39938: LD_VAR 0 9
39942: PPUSH
39943: CALL_OW 313
39947: PUSH
39948: LD_INT 6
39950: EQUAL
39951: PUSH
39952: LD_VAR 0 9
39956: PPUSH
39957: CALL_OW 266
39961: PUSH
39962: LD_INT 32
39964: PUSH
39965: LD_INT 31
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: IN
39972: OR
39973: IFFALSE 39787
39975: GO 39784
39977: POP
39978: POP
// end else
39979: GO 40361
// for j = 1 to x do
39981: LD_ADDR_VAR 0 9
39985: PUSH
39986: DOUBLE
39987: LD_INT 1
39989: DEC
39990: ST_TO_ADDR
39991: LD_VAR 0 13
39995: PUSH
39996: FOR_TO
39997: IFFALSE 40359
// begin InitHc ;
39999: CALL_OW 19
// if not f then
40003: LD_VAR 0 12
40007: NOT
40008: IFFALSE 40097
// begin PrepareHuman ( false , i , skill ) ;
40010: LD_INT 0
40012: PPUSH
40013: LD_VAR 0 8
40017: PPUSH
40018: LD_VAR 0 4
40022: PPUSH
40023: CALL_OW 380
// un := CreateHuman ;
40027: LD_ADDR_VAR 0 14
40031: PUSH
40032: CALL_OW 44
40036: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40037: LD_ADDR_VAR 0 7
40041: PUSH
40042: LD_VAR 0 7
40046: PPUSH
40047: LD_INT 1
40049: PPUSH
40050: LD_VAR 0 14
40054: PPUSH
40055: CALL_OW 2
40059: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40060: LD_VAR 0 14
40064: PPUSH
40065: LD_VAR 0 1
40069: PPUSH
40070: CALL_OW 250
40074: PPUSH
40075: LD_VAR 0 1
40079: PPUSH
40080: CALL_OW 251
40084: PPUSH
40085: LD_INT 10
40087: PPUSH
40088: LD_INT 0
40090: PPUSH
40091: CALL_OW 50
// continue ;
40095: GO 39996
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40097: LD_VAR 0 12
40101: PUSH
40102: LD_INT 1
40104: ARRAY
40105: PPUSH
40106: CALL_OW 313
40110: PUSH
40111: LD_VAR 0 12
40115: PUSH
40116: LD_INT 1
40118: ARRAY
40119: PPUSH
40120: CALL_OW 266
40124: PUSH
40125: LD_INT 32
40127: PUSH
40128: LD_INT 31
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: IN
40135: AND
40136: PUSH
40137: LD_VAR 0 12
40141: PUSH
40142: LD_INT 1
40144: ARRAY
40145: PPUSH
40146: CALL_OW 313
40150: PUSH
40151: LD_INT 6
40153: EQUAL
40154: OR
40155: IFFALSE 40175
// f := Delete ( f , 1 ) ;
40157: LD_ADDR_VAR 0 12
40161: PUSH
40162: LD_VAR 0 12
40166: PPUSH
40167: LD_INT 1
40169: PPUSH
40170: CALL_OW 3
40174: ST_TO_ADDR
// if not f then
40175: LD_VAR 0 12
40179: NOT
40180: IFFALSE 40198
// begin x := x + 2 ;
40182: LD_ADDR_VAR 0 13
40186: PUSH
40187: LD_VAR 0 13
40191: PUSH
40192: LD_INT 2
40194: PLUS
40195: ST_TO_ADDR
// continue ;
40196: GO 39996
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40198: LD_VAR 0 12
40202: PUSH
40203: LD_INT 1
40205: ARRAY
40206: PPUSH
40207: CALL_OW 266
40211: PUSH
40212: LD_INT 5
40214: EQUAL
40215: IFFALSE 40289
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40217: LD_VAR 0 12
40221: PUSH
40222: LD_INT 1
40224: ARRAY
40225: PPUSH
40226: CALL_OW 313
40230: PUSH
40231: LD_INT 3
40233: LESS
40234: IFFALSE 40270
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40236: LD_INT 0
40238: PPUSH
40239: LD_INT 5
40241: PUSH
40242: LD_INT 8
40244: PUSH
40245: LD_INT 9
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: PUSH
40253: LD_VAR 0 17
40257: ARRAY
40258: PPUSH
40259: LD_VAR 0 4
40263: PPUSH
40264: CALL_OW 380
40268: GO 40287
// PrepareHuman ( false , i , skill ) ;
40270: LD_INT 0
40272: PPUSH
40273: LD_VAR 0 8
40277: PPUSH
40278: LD_VAR 0 4
40282: PPUSH
40283: CALL_OW 380
// end else
40287: GO 40306
// PrepareHuman ( false , i , skill ) ;
40289: LD_INT 0
40291: PPUSH
40292: LD_VAR 0 8
40296: PPUSH
40297: LD_VAR 0 4
40301: PPUSH
40302: CALL_OW 380
// un := CreateHuman ;
40306: LD_ADDR_VAR 0 14
40310: PUSH
40311: CALL_OW 44
40315: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40316: LD_ADDR_VAR 0 7
40320: PUSH
40321: LD_VAR 0 7
40325: PPUSH
40326: LD_INT 1
40328: PPUSH
40329: LD_VAR 0 14
40333: PPUSH
40334: CALL_OW 2
40338: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40339: LD_VAR 0 14
40343: PPUSH
40344: LD_VAR 0 12
40348: PUSH
40349: LD_INT 1
40351: ARRAY
40352: PPUSH
40353: CALL_OW 52
// end ;
40357: GO 39996
40359: POP
40360: POP
// end ;
40361: GO 39298
40363: POP
40364: POP
// result := result ^ buildings ;
40365: LD_ADDR_VAR 0 7
40369: PUSH
40370: LD_VAR 0 7
40374: PUSH
40375: LD_VAR 0 18
40379: ADD
40380: ST_TO_ADDR
// end else
40381: GO 40524
// begin for i = 1 to personel do
40383: LD_ADDR_VAR 0 8
40387: PUSH
40388: DOUBLE
40389: LD_INT 1
40391: DEC
40392: ST_TO_ADDR
40393: LD_VAR 0 6
40397: PUSH
40398: FOR_TO
40399: IFFALSE 40522
// begin if i > 4 then
40401: LD_VAR 0 8
40405: PUSH
40406: LD_INT 4
40408: GREATER
40409: IFFALSE 40413
// break ;
40411: GO 40522
// x := personel [ i ] ;
40413: LD_ADDR_VAR 0 13
40417: PUSH
40418: LD_VAR 0 6
40422: PUSH
40423: LD_VAR 0 8
40427: ARRAY
40428: ST_TO_ADDR
// if x = - 1 then
40429: LD_VAR 0 13
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: EQUAL
40438: IFFALSE 40442
// continue ;
40440: GO 40398
// PrepareHuman ( false , i , skill ) ;
40442: LD_INT 0
40444: PPUSH
40445: LD_VAR 0 8
40449: PPUSH
40450: LD_VAR 0 4
40454: PPUSH
40455: CALL_OW 380
// un := CreateHuman ;
40459: LD_ADDR_VAR 0 14
40463: PUSH
40464: CALL_OW 44
40468: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40469: LD_VAR 0 14
40473: PPUSH
40474: LD_VAR 0 1
40478: PPUSH
40479: CALL_OW 250
40483: PPUSH
40484: LD_VAR 0 1
40488: PPUSH
40489: CALL_OW 251
40493: PPUSH
40494: LD_INT 10
40496: PPUSH
40497: LD_INT 0
40499: PPUSH
40500: CALL_OW 50
// result := result ^ un ;
40504: LD_ADDR_VAR 0 7
40508: PUSH
40509: LD_VAR 0 7
40513: PUSH
40514: LD_VAR 0 14
40518: ADD
40519: ST_TO_ADDR
// end ;
40520: GO 40398
40522: POP
40523: POP
// end ; end ;
40524: LD_VAR 0 7
40528: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40529: LD_INT 0
40531: PPUSH
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
40543: PPUSH
40544: PPUSH
40545: PPUSH
40546: PPUSH
// result := false ;
40547: LD_ADDR_VAR 0 3
40551: PUSH
40552: LD_INT 0
40554: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40555: LD_VAR 0 1
40559: NOT
40560: PUSH
40561: LD_VAR 0 1
40565: PPUSH
40566: CALL_OW 266
40570: PUSH
40571: LD_INT 32
40573: PUSH
40574: LD_INT 33
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: IN
40581: NOT
40582: OR
40583: IFFALSE 40587
// exit ;
40585: GO 41696
// nat := GetNation ( tower ) ;
40587: LD_ADDR_VAR 0 12
40591: PUSH
40592: LD_VAR 0 1
40596: PPUSH
40597: CALL_OW 248
40601: ST_TO_ADDR
// side := GetSide ( tower ) ;
40602: LD_ADDR_VAR 0 16
40606: PUSH
40607: LD_VAR 0 1
40611: PPUSH
40612: CALL_OW 255
40616: ST_TO_ADDR
// x := GetX ( tower ) ;
40617: LD_ADDR_VAR 0 10
40621: PUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: CALL_OW 250
40631: ST_TO_ADDR
// y := GetY ( tower ) ;
40632: LD_ADDR_VAR 0 11
40636: PUSH
40637: LD_VAR 0 1
40641: PPUSH
40642: CALL_OW 251
40646: ST_TO_ADDR
// if not x or not y then
40647: LD_VAR 0 10
40651: NOT
40652: PUSH
40653: LD_VAR 0 11
40657: NOT
40658: OR
40659: IFFALSE 40663
// exit ;
40661: GO 41696
// weapon := 0 ;
40663: LD_ADDR_VAR 0 18
40667: PUSH
40668: LD_INT 0
40670: ST_TO_ADDR
// fac_list := [ ] ;
40671: LD_ADDR_VAR 0 17
40675: PUSH
40676: EMPTY
40677: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40678: LD_ADDR_VAR 0 6
40682: PUSH
40683: LD_VAR 0 1
40687: PPUSH
40688: CALL_OW 274
40692: PPUSH
40693: LD_VAR 0 2
40697: PPUSH
40698: LD_INT 0
40700: PPUSH
40701: CALL 38267 0 3
40705: PPUSH
40706: LD_INT 30
40708: PUSH
40709: LD_INT 3
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PPUSH
40716: CALL_OW 72
40720: ST_TO_ADDR
// if not factories then
40721: LD_VAR 0 6
40725: NOT
40726: IFFALSE 40730
// exit ;
40728: GO 41696
// for i in factories do
40730: LD_ADDR_VAR 0 8
40734: PUSH
40735: LD_VAR 0 6
40739: PUSH
40740: FOR_IN
40741: IFFALSE 40766
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40743: LD_ADDR_VAR 0 17
40747: PUSH
40748: LD_VAR 0 17
40752: PUSH
40753: LD_VAR 0 8
40757: PPUSH
40758: CALL_OW 478
40762: UNION
40763: ST_TO_ADDR
40764: GO 40740
40766: POP
40767: POP
// if not fac_list then
40768: LD_VAR 0 17
40772: NOT
40773: IFFALSE 40777
// exit ;
40775: GO 41696
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40777: LD_ADDR_VAR 0 5
40781: PUSH
40782: LD_INT 4
40784: PUSH
40785: LD_INT 5
40787: PUSH
40788: LD_INT 9
40790: PUSH
40791: LD_INT 10
40793: PUSH
40794: LD_INT 6
40796: PUSH
40797: LD_INT 7
40799: PUSH
40800: LD_INT 11
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 27
40814: PUSH
40815: LD_INT 28
40817: PUSH
40818: LD_INT 26
40820: PUSH
40821: LD_INT 30
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 43
40832: PUSH
40833: LD_INT 44
40835: PUSH
40836: LD_INT 46
40838: PUSH
40839: LD_INT 45
40841: PUSH
40842: LD_INT 47
40844: PUSH
40845: LD_INT 49
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: PUSH
40861: LD_VAR 0 12
40865: ARRAY
40866: ST_TO_ADDR
// list := list isect fac_list ;
40867: LD_ADDR_VAR 0 5
40871: PUSH
40872: LD_VAR 0 5
40876: PUSH
40877: LD_VAR 0 17
40881: ISECT
40882: ST_TO_ADDR
// if not list then
40883: LD_VAR 0 5
40887: NOT
40888: IFFALSE 40892
// exit ;
40890: GO 41696
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40892: LD_VAR 0 12
40896: PUSH
40897: LD_INT 3
40899: EQUAL
40900: PUSH
40901: LD_INT 49
40903: PUSH
40904: LD_VAR 0 5
40908: IN
40909: AND
40910: PUSH
40911: LD_INT 31
40913: PPUSH
40914: LD_VAR 0 16
40918: PPUSH
40919: CALL_OW 321
40923: PUSH
40924: LD_INT 2
40926: EQUAL
40927: AND
40928: IFFALSE 40988
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40930: LD_INT 22
40932: PUSH
40933: LD_VAR 0 16
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 35
40944: PUSH
40945: LD_INT 49
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 91
40954: PUSH
40955: LD_VAR 0 1
40959: PUSH
40960: LD_INT 10
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: LIST
40972: PPUSH
40973: CALL_OW 69
40977: NOT
40978: IFFALSE 40988
// weapon := ru_time_lapser ;
40980: LD_ADDR_VAR 0 18
40984: PUSH
40985: LD_INT 49
40987: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40988: LD_VAR 0 12
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: IN
41003: PUSH
41004: LD_INT 11
41006: PUSH
41007: LD_VAR 0 5
41011: IN
41012: PUSH
41013: LD_INT 30
41015: PUSH
41016: LD_VAR 0 5
41020: IN
41021: OR
41022: AND
41023: PUSH
41024: LD_INT 6
41026: PPUSH
41027: LD_VAR 0 16
41031: PPUSH
41032: CALL_OW 321
41036: PUSH
41037: LD_INT 2
41039: EQUAL
41040: AND
41041: IFFALSE 41206
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41043: LD_INT 22
41045: PUSH
41046: LD_VAR 0 16
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: LD_INT 35
41060: PUSH
41061: LD_INT 11
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 35
41070: PUSH
41071: LD_INT 30
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 91
41085: PUSH
41086: LD_VAR 0 1
41090: PUSH
41091: LD_INT 18
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: LIST
41103: PPUSH
41104: CALL_OW 69
41108: NOT
41109: PUSH
41110: LD_INT 22
41112: PUSH
41113: LD_VAR 0 16
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: LD_INT 30
41127: PUSH
41128: LD_INT 32
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 30
41137: PUSH
41138: LD_INT 33
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 91
41152: PUSH
41153: LD_VAR 0 1
41157: PUSH
41158: LD_INT 12
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: LIST
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: PUSH
41171: EMPTY
41172: LIST
41173: PPUSH
41174: CALL_OW 69
41178: PUSH
41179: LD_INT 2
41181: GREATER
41182: AND
41183: IFFALSE 41206
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41185: LD_ADDR_VAR 0 18
41189: PUSH
41190: LD_INT 11
41192: PUSH
41193: LD_INT 30
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_VAR 0 12
41204: ARRAY
41205: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41206: LD_VAR 0 18
41210: NOT
41211: PUSH
41212: LD_INT 40
41214: PPUSH
41215: LD_VAR 0 16
41219: PPUSH
41220: CALL_OW 321
41224: PUSH
41225: LD_INT 2
41227: EQUAL
41228: AND
41229: PUSH
41230: LD_INT 7
41232: PUSH
41233: LD_VAR 0 5
41237: IN
41238: PUSH
41239: LD_INT 28
41241: PUSH
41242: LD_VAR 0 5
41246: IN
41247: OR
41248: PUSH
41249: LD_INT 45
41251: PUSH
41252: LD_VAR 0 5
41256: IN
41257: OR
41258: AND
41259: IFFALSE 41513
// begin hex := GetHexInfo ( x , y ) ;
41261: LD_ADDR_VAR 0 4
41265: PUSH
41266: LD_VAR 0 10
41270: PPUSH
41271: LD_VAR 0 11
41275: PPUSH
41276: CALL_OW 546
41280: ST_TO_ADDR
// if hex [ 1 ] then
41281: LD_VAR 0 4
41285: PUSH
41286: LD_INT 1
41288: ARRAY
41289: IFFALSE 41293
// exit ;
41291: GO 41696
// height := hex [ 2 ] ;
41293: LD_ADDR_VAR 0 15
41297: PUSH
41298: LD_VAR 0 4
41302: PUSH
41303: LD_INT 2
41305: ARRAY
41306: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41307: LD_ADDR_VAR 0 14
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: LD_INT 2
41317: PUSH
41318: LD_INT 3
41320: PUSH
41321: LD_INT 5
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: ST_TO_ADDR
// for i in tmp do
41330: LD_ADDR_VAR 0 8
41334: PUSH
41335: LD_VAR 0 14
41339: PUSH
41340: FOR_IN
41341: IFFALSE 41511
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41343: LD_ADDR_VAR 0 9
41347: PUSH
41348: LD_VAR 0 10
41352: PPUSH
41353: LD_VAR 0 8
41357: PPUSH
41358: LD_INT 5
41360: PPUSH
41361: CALL_OW 272
41365: PUSH
41366: LD_VAR 0 11
41370: PPUSH
41371: LD_VAR 0 8
41375: PPUSH
41376: LD_INT 5
41378: PPUSH
41379: CALL_OW 273
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41388: LD_VAR 0 9
41392: PUSH
41393: LD_INT 1
41395: ARRAY
41396: PPUSH
41397: LD_VAR 0 9
41401: PUSH
41402: LD_INT 2
41404: ARRAY
41405: PPUSH
41406: CALL_OW 488
41410: IFFALSE 41509
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41412: LD_ADDR_VAR 0 4
41416: PUSH
41417: LD_VAR 0 9
41421: PUSH
41422: LD_INT 1
41424: ARRAY
41425: PPUSH
41426: LD_VAR 0 9
41430: PUSH
41431: LD_INT 2
41433: ARRAY
41434: PPUSH
41435: CALL_OW 546
41439: ST_TO_ADDR
// if hex [ 1 ] then
41440: LD_VAR 0 4
41444: PUSH
41445: LD_INT 1
41447: ARRAY
41448: IFFALSE 41452
// continue ;
41450: GO 41340
// h := hex [ 2 ] ;
41452: LD_ADDR_VAR 0 13
41456: PUSH
41457: LD_VAR 0 4
41461: PUSH
41462: LD_INT 2
41464: ARRAY
41465: ST_TO_ADDR
// if h + 7 < height then
41466: LD_VAR 0 13
41470: PUSH
41471: LD_INT 7
41473: PLUS
41474: PUSH
41475: LD_VAR 0 15
41479: LESS
41480: IFFALSE 41509
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41482: LD_ADDR_VAR 0 18
41486: PUSH
41487: LD_INT 7
41489: PUSH
41490: LD_INT 28
41492: PUSH
41493: LD_INT 45
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: LIST
41500: PUSH
41501: LD_VAR 0 12
41505: ARRAY
41506: ST_TO_ADDR
// break ;
41507: GO 41511
// end ; end ; end ;
41509: GO 41340
41511: POP
41512: POP
// end ; if not weapon then
41513: LD_VAR 0 18
41517: NOT
41518: IFFALSE 41578
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41520: LD_ADDR_VAR 0 5
41524: PUSH
41525: LD_VAR 0 5
41529: PUSH
41530: LD_INT 11
41532: PUSH
41533: LD_INT 30
41535: PUSH
41536: LD_INT 49
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: LIST
41543: DIFF
41544: ST_TO_ADDR
// if not list then
41545: LD_VAR 0 5
41549: NOT
41550: IFFALSE 41554
// exit ;
41552: GO 41696
// weapon := list [ rand ( 1 , list ) ] ;
41554: LD_ADDR_VAR 0 18
41558: PUSH
41559: LD_VAR 0 5
41563: PUSH
41564: LD_INT 1
41566: PPUSH
41567: LD_VAR 0 5
41571: PPUSH
41572: CALL_OW 12
41576: ARRAY
41577: ST_TO_ADDR
// end ; if weapon then
41578: LD_VAR 0 18
41582: IFFALSE 41696
// begin tmp := CostOfWeapon ( weapon ) ;
41584: LD_ADDR_VAR 0 14
41588: PUSH
41589: LD_VAR 0 18
41593: PPUSH
41594: CALL_OW 451
41598: ST_TO_ADDR
// j := GetBase ( tower ) ;
41599: LD_ADDR_VAR 0 9
41603: PUSH
41604: LD_VAR 0 1
41608: PPUSH
41609: CALL_OW 274
41613: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41614: LD_VAR 0 9
41618: PPUSH
41619: LD_INT 1
41621: PPUSH
41622: CALL_OW 275
41626: PUSH
41627: LD_VAR 0 14
41631: PUSH
41632: LD_INT 1
41634: ARRAY
41635: GREATEREQUAL
41636: PUSH
41637: LD_VAR 0 9
41641: PPUSH
41642: LD_INT 2
41644: PPUSH
41645: CALL_OW 275
41649: PUSH
41650: LD_VAR 0 14
41654: PUSH
41655: LD_INT 2
41657: ARRAY
41658: GREATEREQUAL
41659: AND
41660: PUSH
41661: LD_VAR 0 9
41665: PPUSH
41666: LD_INT 3
41668: PPUSH
41669: CALL_OW 275
41673: PUSH
41674: LD_VAR 0 14
41678: PUSH
41679: LD_INT 3
41681: ARRAY
41682: GREATEREQUAL
41683: AND
41684: IFFALSE 41696
// result := weapon ;
41686: LD_ADDR_VAR 0 3
41690: PUSH
41691: LD_VAR 0 18
41695: ST_TO_ADDR
// end ; end ;
41696: LD_VAR 0 3
41700: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41701: LD_INT 0
41703: PPUSH
41704: PPUSH
// result := true ;
41705: LD_ADDR_VAR 0 3
41709: PUSH
41710: LD_INT 1
41712: ST_TO_ADDR
// if array1 = array2 then
41713: LD_VAR 0 1
41717: PUSH
41718: LD_VAR 0 2
41722: EQUAL
41723: IFFALSE 41783
// begin for i = 1 to array1 do
41725: LD_ADDR_VAR 0 4
41729: PUSH
41730: DOUBLE
41731: LD_INT 1
41733: DEC
41734: ST_TO_ADDR
41735: LD_VAR 0 1
41739: PUSH
41740: FOR_TO
41741: IFFALSE 41779
// if array1 [ i ] <> array2 [ i ] then
41743: LD_VAR 0 1
41747: PUSH
41748: LD_VAR 0 4
41752: ARRAY
41753: PUSH
41754: LD_VAR 0 2
41758: PUSH
41759: LD_VAR 0 4
41763: ARRAY
41764: NONEQUAL
41765: IFFALSE 41777
// begin result := false ;
41767: LD_ADDR_VAR 0 3
41771: PUSH
41772: LD_INT 0
41774: ST_TO_ADDR
// break ;
41775: GO 41779
// end ;
41777: GO 41740
41779: POP
41780: POP
// end else
41781: GO 41791
// result := false ;
41783: LD_ADDR_VAR 0 3
41787: PUSH
41788: LD_INT 0
41790: ST_TO_ADDR
// end ;
41791: LD_VAR 0 3
41795: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41796: LD_INT 0
41798: PPUSH
41799: PPUSH
// if not array1 or not array2 then
41800: LD_VAR 0 1
41804: NOT
41805: PUSH
41806: LD_VAR 0 2
41810: NOT
41811: OR
41812: IFFALSE 41816
// exit ;
41814: GO 41880
// result := true ;
41816: LD_ADDR_VAR 0 3
41820: PUSH
41821: LD_INT 1
41823: ST_TO_ADDR
// for i = 1 to array1 do
41824: LD_ADDR_VAR 0 4
41828: PUSH
41829: DOUBLE
41830: LD_INT 1
41832: DEC
41833: ST_TO_ADDR
41834: LD_VAR 0 1
41838: PUSH
41839: FOR_TO
41840: IFFALSE 41878
// if array1 [ i ] <> array2 [ i ] then
41842: LD_VAR 0 1
41846: PUSH
41847: LD_VAR 0 4
41851: ARRAY
41852: PUSH
41853: LD_VAR 0 2
41857: PUSH
41858: LD_VAR 0 4
41862: ARRAY
41863: NONEQUAL
41864: IFFALSE 41876
// begin result := false ;
41866: LD_ADDR_VAR 0 3
41870: PUSH
41871: LD_INT 0
41873: ST_TO_ADDR
// break ;
41874: GO 41878
// end ;
41876: GO 41839
41878: POP
41879: POP
// end ;
41880: LD_VAR 0 3
41884: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41885: LD_INT 0
41887: PPUSH
41888: PPUSH
41889: PPUSH
// pom := GetBase ( fac ) ;
41890: LD_ADDR_VAR 0 5
41894: PUSH
41895: LD_VAR 0 1
41899: PPUSH
41900: CALL_OW 274
41904: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41905: LD_ADDR_VAR 0 4
41909: PUSH
41910: LD_VAR 0 2
41914: PUSH
41915: LD_INT 1
41917: ARRAY
41918: PPUSH
41919: LD_VAR 0 2
41923: PUSH
41924: LD_INT 2
41926: ARRAY
41927: PPUSH
41928: LD_VAR 0 2
41932: PUSH
41933: LD_INT 3
41935: ARRAY
41936: PPUSH
41937: LD_VAR 0 2
41941: PUSH
41942: LD_INT 4
41944: ARRAY
41945: PPUSH
41946: CALL_OW 449
41950: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41951: LD_ADDR_VAR 0 3
41955: PUSH
41956: LD_VAR 0 5
41960: PPUSH
41961: LD_INT 1
41963: PPUSH
41964: CALL_OW 275
41968: PUSH
41969: LD_VAR 0 4
41973: PUSH
41974: LD_INT 1
41976: ARRAY
41977: GREATEREQUAL
41978: PUSH
41979: LD_VAR 0 5
41983: PPUSH
41984: LD_INT 2
41986: PPUSH
41987: CALL_OW 275
41991: PUSH
41992: LD_VAR 0 4
41996: PUSH
41997: LD_INT 2
41999: ARRAY
42000: GREATEREQUAL
42001: AND
42002: PUSH
42003: LD_VAR 0 5
42007: PPUSH
42008: LD_INT 3
42010: PPUSH
42011: CALL_OW 275
42015: PUSH
42016: LD_VAR 0 4
42020: PUSH
42021: LD_INT 3
42023: ARRAY
42024: GREATEREQUAL
42025: AND
42026: ST_TO_ADDR
// end ;
42027: LD_VAR 0 3
42031: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42032: LD_INT 0
42034: PPUSH
42035: PPUSH
42036: PPUSH
42037: PPUSH
// pom := GetBase ( building ) ;
42038: LD_ADDR_VAR 0 3
42042: PUSH
42043: LD_VAR 0 1
42047: PPUSH
42048: CALL_OW 274
42052: ST_TO_ADDR
// if not pom then
42053: LD_VAR 0 3
42057: NOT
42058: IFFALSE 42062
// exit ;
42060: GO 42232
// btype := GetBType ( building ) ;
42062: LD_ADDR_VAR 0 5
42066: PUSH
42067: LD_VAR 0 1
42071: PPUSH
42072: CALL_OW 266
42076: ST_TO_ADDR
// if btype = b_armoury then
42077: LD_VAR 0 5
42081: PUSH
42082: LD_INT 4
42084: EQUAL
42085: IFFALSE 42095
// btype := b_barracks ;
42087: LD_ADDR_VAR 0 5
42091: PUSH
42092: LD_INT 5
42094: ST_TO_ADDR
// if btype = b_depot then
42095: LD_VAR 0 5
42099: PUSH
42100: LD_INT 0
42102: EQUAL
42103: IFFALSE 42113
// btype := b_warehouse ;
42105: LD_ADDR_VAR 0 5
42109: PUSH
42110: LD_INT 1
42112: ST_TO_ADDR
// if btype = b_workshop then
42113: LD_VAR 0 5
42117: PUSH
42118: LD_INT 2
42120: EQUAL
42121: IFFALSE 42131
// btype := b_factory ;
42123: LD_ADDR_VAR 0 5
42127: PUSH
42128: LD_INT 3
42130: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42131: LD_ADDR_VAR 0 4
42135: PUSH
42136: LD_VAR 0 5
42140: PPUSH
42141: LD_VAR 0 1
42145: PPUSH
42146: CALL_OW 248
42150: PPUSH
42151: CALL_OW 450
42155: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42156: LD_ADDR_VAR 0 2
42160: PUSH
42161: LD_VAR 0 3
42165: PPUSH
42166: LD_INT 1
42168: PPUSH
42169: CALL_OW 275
42173: PUSH
42174: LD_VAR 0 4
42178: PUSH
42179: LD_INT 1
42181: ARRAY
42182: GREATEREQUAL
42183: PUSH
42184: LD_VAR 0 3
42188: PPUSH
42189: LD_INT 2
42191: PPUSH
42192: CALL_OW 275
42196: PUSH
42197: LD_VAR 0 4
42201: PUSH
42202: LD_INT 2
42204: ARRAY
42205: GREATEREQUAL
42206: AND
42207: PUSH
42208: LD_VAR 0 3
42212: PPUSH
42213: LD_INT 3
42215: PPUSH
42216: CALL_OW 275
42220: PUSH
42221: LD_VAR 0 4
42225: PUSH
42226: LD_INT 3
42228: ARRAY
42229: GREATEREQUAL
42230: AND
42231: ST_TO_ADDR
// end ;
42232: LD_VAR 0 2
42236: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42237: LD_INT 0
42239: PPUSH
42240: PPUSH
42241: PPUSH
// pom := GetBase ( building ) ;
42242: LD_ADDR_VAR 0 4
42246: PUSH
42247: LD_VAR 0 1
42251: PPUSH
42252: CALL_OW 274
42256: ST_TO_ADDR
// if not pom then
42257: LD_VAR 0 4
42261: NOT
42262: IFFALSE 42266
// exit ;
42264: GO 42367
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42266: LD_ADDR_VAR 0 5
42270: PUSH
42271: LD_VAR 0 2
42275: PPUSH
42276: LD_VAR 0 1
42280: PPUSH
42281: CALL_OW 248
42285: PPUSH
42286: CALL_OW 450
42290: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42291: LD_ADDR_VAR 0 3
42295: PUSH
42296: LD_VAR 0 4
42300: PPUSH
42301: LD_INT 1
42303: PPUSH
42304: CALL_OW 275
42308: PUSH
42309: LD_VAR 0 5
42313: PUSH
42314: LD_INT 1
42316: ARRAY
42317: GREATEREQUAL
42318: PUSH
42319: LD_VAR 0 4
42323: PPUSH
42324: LD_INT 2
42326: PPUSH
42327: CALL_OW 275
42331: PUSH
42332: LD_VAR 0 5
42336: PUSH
42337: LD_INT 2
42339: ARRAY
42340: GREATEREQUAL
42341: AND
42342: PUSH
42343: LD_VAR 0 4
42347: PPUSH
42348: LD_INT 3
42350: PPUSH
42351: CALL_OW 275
42355: PUSH
42356: LD_VAR 0 5
42360: PUSH
42361: LD_INT 3
42363: ARRAY
42364: GREATEREQUAL
42365: AND
42366: ST_TO_ADDR
// end ;
42367: LD_VAR 0 3
42371: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42372: LD_INT 0
42374: PPUSH
42375: PPUSH
42376: PPUSH
42377: PPUSH
42378: PPUSH
42379: PPUSH
42380: PPUSH
42381: PPUSH
42382: PPUSH
42383: PPUSH
42384: PPUSH
// result := false ;
42385: LD_ADDR_VAR 0 8
42389: PUSH
42390: LD_INT 0
42392: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42393: LD_VAR 0 5
42397: NOT
42398: PUSH
42399: LD_VAR 0 1
42403: NOT
42404: OR
42405: PUSH
42406: LD_VAR 0 2
42410: NOT
42411: OR
42412: PUSH
42413: LD_VAR 0 3
42417: NOT
42418: OR
42419: IFFALSE 42423
// exit ;
42421: GO 43237
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42423: LD_ADDR_VAR 0 14
42427: PUSH
42428: LD_VAR 0 1
42432: PPUSH
42433: LD_VAR 0 2
42437: PPUSH
42438: LD_VAR 0 3
42442: PPUSH
42443: LD_VAR 0 4
42447: PPUSH
42448: LD_VAR 0 5
42452: PUSH
42453: LD_INT 1
42455: ARRAY
42456: PPUSH
42457: CALL_OW 248
42461: PPUSH
42462: LD_INT 0
42464: PPUSH
42465: CALL 44490 0 6
42469: ST_TO_ADDR
// if not hexes then
42470: LD_VAR 0 14
42474: NOT
42475: IFFALSE 42479
// exit ;
42477: GO 43237
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42479: LD_ADDR_VAR 0 17
42483: PUSH
42484: LD_VAR 0 5
42488: PPUSH
42489: LD_INT 22
42491: PUSH
42492: LD_VAR 0 13
42496: PPUSH
42497: CALL_OW 255
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: LD_INT 30
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 30
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: LIST
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PPUSH
42538: CALL_OW 72
42542: ST_TO_ADDR
// for i = 1 to hexes do
42543: LD_ADDR_VAR 0 9
42547: PUSH
42548: DOUBLE
42549: LD_INT 1
42551: DEC
42552: ST_TO_ADDR
42553: LD_VAR 0 14
42557: PUSH
42558: FOR_TO
42559: IFFALSE 43235
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42561: LD_ADDR_VAR 0 13
42565: PUSH
42566: LD_VAR 0 14
42570: PUSH
42571: LD_VAR 0 9
42575: ARRAY
42576: PUSH
42577: LD_INT 1
42579: ARRAY
42580: PPUSH
42581: LD_VAR 0 14
42585: PUSH
42586: LD_VAR 0 9
42590: ARRAY
42591: PUSH
42592: LD_INT 2
42594: ARRAY
42595: PPUSH
42596: CALL_OW 428
42600: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42601: LD_VAR 0 14
42605: PUSH
42606: LD_VAR 0 9
42610: ARRAY
42611: PUSH
42612: LD_INT 1
42614: ARRAY
42615: PPUSH
42616: LD_VAR 0 14
42620: PUSH
42621: LD_VAR 0 9
42625: ARRAY
42626: PUSH
42627: LD_INT 2
42629: ARRAY
42630: PPUSH
42631: CALL_OW 351
42635: PUSH
42636: LD_VAR 0 14
42640: PUSH
42641: LD_VAR 0 9
42645: ARRAY
42646: PUSH
42647: LD_INT 1
42649: ARRAY
42650: PPUSH
42651: LD_VAR 0 14
42655: PUSH
42656: LD_VAR 0 9
42660: ARRAY
42661: PUSH
42662: LD_INT 2
42664: ARRAY
42665: PPUSH
42666: CALL_OW 488
42670: NOT
42671: OR
42672: PUSH
42673: LD_VAR 0 13
42677: PPUSH
42678: CALL_OW 247
42682: PUSH
42683: LD_INT 3
42685: EQUAL
42686: OR
42687: IFFALSE 42693
// exit ;
42689: POP
42690: POP
42691: GO 43237
// if not tmp then
42693: LD_VAR 0 13
42697: NOT
42698: IFFALSE 42702
// continue ;
42700: GO 42558
// result := true ;
42702: LD_ADDR_VAR 0 8
42706: PUSH
42707: LD_INT 1
42709: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42710: LD_VAR 0 6
42714: PUSH
42715: LD_VAR 0 13
42719: PPUSH
42720: CALL_OW 247
42724: PUSH
42725: LD_INT 2
42727: EQUAL
42728: AND
42729: PUSH
42730: LD_VAR 0 13
42734: PPUSH
42735: CALL_OW 263
42739: PUSH
42740: LD_INT 1
42742: EQUAL
42743: AND
42744: IFFALSE 42908
// begin if IsDrivenBy ( tmp ) then
42746: LD_VAR 0 13
42750: PPUSH
42751: CALL_OW 311
42755: IFFALSE 42759
// continue ;
42757: GO 42558
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42759: LD_VAR 0 6
42763: PPUSH
42764: LD_INT 3
42766: PUSH
42767: LD_INT 60
42769: PUSH
42770: EMPTY
42771: LIST
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 3
42779: PUSH
42780: LD_INT 55
42782: PUSH
42783: EMPTY
42784: LIST
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PPUSH
42794: CALL_OW 72
42798: IFFALSE 42906
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42800: LD_ADDR_VAR 0 18
42804: PUSH
42805: LD_VAR 0 6
42809: PPUSH
42810: LD_INT 3
42812: PUSH
42813: LD_INT 60
42815: PUSH
42816: EMPTY
42817: LIST
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 3
42825: PUSH
42826: LD_INT 55
42828: PUSH
42829: EMPTY
42830: LIST
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PPUSH
42840: CALL_OW 72
42844: PUSH
42845: LD_INT 1
42847: ARRAY
42848: ST_TO_ADDR
// if IsInUnit ( driver ) then
42849: LD_VAR 0 18
42853: PPUSH
42854: CALL_OW 310
42858: IFFALSE 42869
// ComExit ( driver ) ;
42860: LD_VAR 0 18
42864: PPUSH
42865: CALL 68271 0 1
// AddComEnterUnit ( driver , tmp ) ;
42869: LD_VAR 0 18
42873: PPUSH
42874: LD_VAR 0 13
42878: PPUSH
42879: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42883: LD_VAR 0 18
42887: PPUSH
42888: LD_VAR 0 7
42892: PPUSH
42893: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42897: LD_VAR 0 18
42901: PPUSH
42902: CALL_OW 181
// end ; continue ;
42906: GO 42558
// end ; if not cleaners or not tmp in cleaners then
42908: LD_VAR 0 6
42912: NOT
42913: PUSH
42914: LD_VAR 0 13
42918: PUSH
42919: LD_VAR 0 6
42923: IN
42924: NOT
42925: OR
42926: IFFALSE 43233
// begin if dep then
42928: LD_VAR 0 17
42932: IFFALSE 43068
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42934: LD_ADDR_VAR 0 16
42938: PUSH
42939: LD_VAR 0 17
42943: PUSH
42944: LD_INT 1
42946: ARRAY
42947: PPUSH
42948: CALL_OW 250
42952: PPUSH
42953: LD_VAR 0 17
42957: PUSH
42958: LD_INT 1
42960: ARRAY
42961: PPUSH
42962: CALL_OW 254
42966: PPUSH
42967: LD_INT 5
42969: PPUSH
42970: CALL_OW 272
42974: PUSH
42975: LD_VAR 0 17
42979: PUSH
42980: LD_INT 1
42982: ARRAY
42983: PPUSH
42984: CALL_OW 251
42988: PPUSH
42989: LD_VAR 0 17
42993: PUSH
42994: LD_INT 1
42996: ARRAY
42997: PPUSH
42998: CALL_OW 254
43002: PPUSH
43003: LD_INT 5
43005: PPUSH
43006: CALL_OW 273
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43015: LD_VAR 0 16
43019: PUSH
43020: LD_INT 1
43022: ARRAY
43023: PPUSH
43024: LD_VAR 0 16
43028: PUSH
43029: LD_INT 2
43031: ARRAY
43032: PPUSH
43033: CALL_OW 488
43037: IFFALSE 43068
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43039: LD_VAR 0 13
43043: PPUSH
43044: LD_VAR 0 16
43048: PUSH
43049: LD_INT 1
43051: ARRAY
43052: PPUSH
43053: LD_VAR 0 16
43057: PUSH
43058: LD_INT 2
43060: ARRAY
43061: PPUSH
43062: CALL_OW 111
// continue ;
43066: GO 42558
// end ; end ; r := GetDir ( tmp ) ;
43068: LD_ADDR_VAR 0 15
43072: PUSH
43073: LD_VAR 0 13
43077: PPUSH
43078: CALL_OW 254
43082: ST_TO_ADDR
// if r = 5 then
43083: LD_VAR 0 15
43087: PUSH
43088: LD_INT 5
43090: EQUAL
43091: IFFALSE 43101
// r := 0 ;
43093: LD_ADDR_VAR 0 15
43097: PUSH
43098: LD_INT 0
43100: ST_TO_ADDR
// for j = r to 5 do
43101: LD_ADDR_VAR 0 10
43105: PUSH
43106: DOUBLE
43107: LD_VAR 0 15
43111: DEC
43112: ST_TO_ADDR
43113: LD_INT 5
43115: PUSH
43116: FOR_TO
43117: IFFALSE 43231
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43119: LD_ADDR_VAR 0 11
43123: PUSH
43124: LD_VAR 0 13
43128: PPUSH
43129: CALL_OW 250
43133: PPUSH
43134: LD_VAR 0 10
43138: PPUSH
43139: LD_INT 2
43141: PPUSH
43142: CALL_OW 272
43146: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43147: LD_ADDR_VAR 0 12
43151: PUSH
43152: LD_VAR 0 13
43156: PPUSH
43157: CALL_OW 251
43161: PPUSH
43162: LD_VAR 0 10
43166: PPUSH
43167: LD_INT 2
43169: PPUSH
43170: CALL_OW 273
43174: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43175: LD_VAR 0 11
43179: PPUSH
43180: LD_VAR 0 12
43184: PPUSH
43185: CALL_OW 488
43189: PUSH
43190: LD_VAR 0 11
43194: PPUSH
43195: LD_VAR 0 12
43199: PPUSH
43200: CALL_OW 428
43204: NOT
43205: AND
43206: IFFALSE 43229
// begin ComMoveXY ( tmp , _x , _y ) ;
43208: LD_VAR 0 13
43212: PPUSH
43213: LD_VAR 0 11
43217: PPUSH
43218: LD_VAR 0 12
43222: PPUSH
43223: CALL_OW 111
// break ;
43227: GO 43231
// end ; end ;
43229: GO 43116
43231: POP
43232: POP
// end ; end ;
43233: GO 42558
43235: POP
43236: POP
// end ;
43237: LD_VAR 0 8
43241: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43242: LD_INT 0
43244: PPUSH
// result := true ;
43245: LD_ADDR_VAR 0 3
43249: PUSH
43250: LD_INT 1
43252: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43253: LD_VAR 0 2
43257: PUSH
43258: LD_INT 24
43260: DOUBLE
43261: EQUAL
43262: IFTRUE 43272
43264: LD_INT 33
43266: DOUBLE
43267: EQUAL
43268: IFTRUE 43272
43270: GO 43297
43272: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43273: LD_ADDR_VAR 0 3
43277: PUSH
43278: LD_INT 32
43280: PPUSH
43281: LD_VAR 0 1
43285: PPUSH
43286: CALL_OW 321
43290: PUSH
43291: LD_INT 2
43293: EQUAL
43294: ST_TO_ADDR
43295: GO 43613
43297: LD_INT 20
43299: DOUBLE
43300: EQUAL
43301: IFTRUE 43305
43303: GO 43330
43305: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43306: LD_ADDR_VAR 0 3
43310: PUSH
43311: LD_INT 6
43313: PPUSH
43314: LD_VAR 0 1
43318: PPUSH
43319: CALL_OW 321
43323: PUSH
43324: LD_INT 2
43326: EQUAL
43327: ST_TO_ADDR
43328: GO 43613
43330: LD_INT 22
43332: DOUBLE
43333: EQUAL
43334: IFTRUE 43344
43336: LD_INT 36
43338: DOUBLE
43339: EQUAL
43340: IFTRUE 43344
43342: GO 43369
43344: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43345: LD_ADDR_VAR 0 3
43349: PUSH
43350: LD_INT 15
43352: PPUSH
43353: LD_VAR 0 1
43357: PPUSH
43358: CALL_OW 321
43362: PUSH
43363: LD_INT 2
43365: EQUAL
43366: ST_TO_ADDR
43367: GO 43613
43369: LD_INT 30
43371: DOUBLE
43372: EQUAL
43373: IFTRUE 43377
43375: GO 43402
43377: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43378: LD_ADDR_VAR 0 3
43382: PUSH
43383: LD_INT 20
43385: PPUSH
43386: LD_VAR 0 1
43390: PPUSH
43391: CALL_OW 321
43395: PUSH
43396: LD_INT 2
43398: EQUAL
43399: ST_TO_ADDR
43400: GO 43613
43402: LD_INT 28
43404: DOUBLE
43405: EQUAL
43406: IFTRUE 43416
43408: LD_INT 21
43410: DOUBLE
43411: EQUAL
43412: IFTRUE 43416
43414: GO 43441
43416: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43417: LD_ADDR_VAR 0 3
43421: PUSH
43422: LD_INT 21
43424: PPUSH
43425: LD_VAR 0 1
43429: PPUSH
43430: CALL_OW 321
43434: PUSH
43435: LD_INT 2
43437: EQUAL
43438: ST_TO_ADDR
43439: GO 43613
43441: LD_INT 16
43443: DOUBLE
43444: EQUAL
43445: IFTRUE 43449
43447: GO 43474
43449: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43450: LD_ADDR_VAR 0 3
43454: PUSH
43455: LD_INT 84
43457: PPUSH
43458: LD_VAR 0 1
43462: PPUSH
43463: CALL_OW 321
43467: PUSH
43468: LD_INT 2
43470: EQUAL
43471: ST_TO_ADDR
43472: GO 43613
43474: LD_INT 19
43476: DOUBLE
43477: EQUAL
43478: IFTRUE 43488
43480: LD_INT 23
43482: DOUBLE
43483: EQUAL
43484: IFTRUE 43488
43486: GO 43513
43488: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43489: LD_ADDR_VAR 0 3
43493: PUSH
43494: LD_INT 83
43496: PPUSH
43497: LD_VAR 0 1
43501: PPUSH
43502: CALL_OW 321
43506: PUSH
43507: LD_INT 2
43509: EQUAL
43510: ST_TO_ADDR
43511: GO 43613
43513: LD_INT 17
43515: DOUBLE
43516: EQUAL
43517: IFTRUE 43521
43519: GO 43546
43521: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43522: LD_ADDR_VAR 0 3
43526: PUSH
43527: LD_INT 39
43529: PPUSH
43530: LD_VAR 0 1
43534: PPUSH
43535: CALL_OW 321
43539: PUSH
43540: LD_INT 2
43542: EQUAL
43543: ST_TO_ADDR
43544: GO 43613
43546: LD_INT 18
43548: DOUBLE
43549: EQUAL
43550: IFTRUE 43554
43552: GO 43579
43554: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43555: LD_ADDR_VAR 0 3
43559: PUSH
43560: LD_INT 40
43562: PPUSH
43563: LD_VAR 0 1
43567: PPUSH
43568: CALL_OW 321
43572: PUSH
43573: LD_INT 2
43575: EQUAL
43576: ST_TO_ADDR
43577: GO 43613
43579: LD_INT 27
43581: DOUBLE
43582: EQUAL
43583: IFTRUE 43587
43585: GO 43612
43587: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43588: LD_ADDR_VAR 0 3
43592: PUSH
43593: LD_INT 35
43595: PPUSH
43596: LD_VAR 0 1
43600: PPUSH
43601: CALL_OW 321
43605: PUSH
43606: LD_INT 2
43608: EQUAL
43609: ST_TO_ADDR
43610: GO 43613
43612: POP
// end ;
43613: LD_VAR 0 3
43617: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43618: LD_INT 0
43620: PPUSH
43621: PPUSH
43622: PPUSH
43623: PPUSH
43624: PPUSH
43625: PPUSH
43626: PPUSH
43627: PPUSH
43628: PPUSH
43629: PPUSH
43630: PPUSH
// result := false ;
43631: LD_ADDR_VAR 0 6
43635: PUSH
43636: LD_INT 0
43638: ST_TO_ADDR
// if btype = b_depot then
43639: LD_VAR 0 2
43643: PUSH
43644: LD_INT 0
43646: EQUAL
43647: IFFALSE 43659
// begin result := true ;
43649: LD_ADDR_VAR 0 6
43653: PUSH
43654: LD_INT 1
43656: ST_TO_ADDR
// exit ;
43657: GO 44485
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43659: LD_VAR 0 1
43663: NOT
43664: PUSH
43665: LD_VAR 0 1
43669: PPUSH
43670: CALL_OW 266
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: IN
43685: NOT
43686: OR
43687: PUSH
43688: LD_VAR 0 2
43692: NOT
43693: OR
43694: PUSH
43695: LD_VAR 0 5
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: LD_INT 3
43711: PUSH
43712: LD_INT 4
43714: PUSH
43715: LD_INT 5
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: IN
43726: NOT
43727: OR
43728: PUSH
43729: LD_VAR 0 3
43733: PPUSH
43734: LD_VAR 0 4
43738: PPUSH
43739: CALL_OW 488
43743: NOT
43744: OR
43745: IFFALSE 43749
// exit ;
43747: GO 44485
// side := GetSide ( depot ) ;
43749: LD_ADDR_VAR 0 9
43753: PUSH
43754: LD_VAR 0 1
43758: PPUSH
43759: CALL_OW 255
43763: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43764: LD_VAR 0 9
43768: PPUSH
43769: LD_VAR 0 2
43773: PPUSH
43774: CALL 43242 0 2
43778: NOT
43779: IFFALSE 43783
// exit ;
43781: GO 44485
// pom := GetBase ( depot ) ;
43783: LD_ADDR_VAR 0 10
43787: PUSH
43788: LD_VAR 0 1
43792: PPUSH
43793: CALL_OW 274
43797: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43798: LD_ADDR_VAR 0 11
43802: PUSH
43803: LD_VAR 0 2
43807: PPUSH
43808: LD_VAR 0 1
43812: PPUSH
43813: CALL_OW 248
43817: PPUSH
43818: CALL_OW 450
43822: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43823: LD_VAR 0 10
43827: PPUSH
43828: LD_INT 1
43830: PPUSH
43831: CALL_OW 275
43835: PUSH
43836: LD_VAR 0 11
43840: PUSH
43841: LD_INT 1
43843: ARRAY
43844: GREATEREQUAL
43845: PUSH
43846: LD_VAR 0 10
43850: PPUSH
43851: LD_INT 2
43853: PPUSH
43854: CALL_OW 275
43858: PUSH
43859: LD_VAR 0 11
43863: PUSH
43864: LD_INT 2
43866: ARRAY
43867: GREATEREQUAL
43868: AND
43869: PUSH
43870: LD_VAR 0 10
43874: PPUSH
43875: LD_INT 3
43877: PPUSH
43878: CALL_OW 275
43882: PUSH
43883: LD_VAR 0 11
43887: PUSH
43888: LD_INT 3
43890: ARRAY
43891: GREATEREQUAL
43892: AND
43893: NOT
43894: IFFALSE 43898
// exit ;
43896: GO 44485
// if GetBType ( depot ) = b_depot then
43898: LD_VAR 0 1
43902: PPUSH
43903: CALL_OW 266
43907: PUSH
43908: LD_INT 0
43910: EQUAL
43911: IFFALSE 43923
// dist := 28 else
43913: LD_ADDR_VAR 0 14
43917: PUSH
43918: LD_INT 28
43920: ST_TO_ADDR
43921: GO 43931
// dist := 36 ;
43923: LD_ADDR_VAR 0 14
43927: PUSH
43928: LD_INT 36
43930: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43931: LD_VAR 0 1
43935: PPUSH
43936: LD_VAR 0 3
43940: PPUSH
43941: LD_VAR 0 4
43945: PPUSH
43946: CALL_OW 297
43950: PUSH
43951: LD_VAR 0 14
43955: GREATER
43956: IFFALSE 43960
// exit ;
43958: GO 44485
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43960: LD_ADDR_VAR 0 12
43964: PUSH
43965: LD_VAR 0 2
43969: PPUSH
43970: LD_VAR 0 3
43974: PPUSH
43975: LD_VAR 0 4
43979: PPUSH
43980: LD_VAR 0 5
43984: PPUSH
43985: LD_VAR 0 1
43989: PPUSH
43990: CALL_OW 248
43994: PPUSH
43995: LD_INT 0
43997: PPUSH
43998: CALL 44490 0 6
44002: ST_TO_ADDR
// if not hexes then
44003: LD_VAR 0 12
44007: NOT
44008: IFFALSE 44012
// exit ;
44010: GO 44485
// hex := GetHexInfo ( x , y ) ;
44012: LD_ADDR_VAR 0 15
44016: PUSH
44017: LD_VAR 0 3
44021: PPUSH
44022: LD_VAR 0 4
44026: PPUSH
44027: CALL_OW 546
44031: ST_TO_ADDR
// if hex [ 1 ] then
44032: LD_VAR 0 15
44036: PUSH
44037: LD_INT 1
44039: ARRAY
44040: IFFALSE 44044
// exit ;
44042: GO 44485
// height := hex [ 2 ] ;
44044: LD_ADDR_VAR 0 13
44048: PUSH
44049: LD_VAR 0 15
44053: PUSH
44054: LD_INT 2
44056: ARRAY
44057: ST_TO_ADDR
// for i = 1 to hexes do
44058: LD_ADDR_VAR 0 7
44062: PUSH
44063: DOUBLE
44064: LD_INT 1
44066: DEC
44067: ST_TO_ADDR
44068: LD_VAR 0 12
44072: PUSH
44073: FOR_TO
44074: IFFALSE 44404
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44076: LD_VAR 0 12
44080: PUSH
44081: LD_VAR 0 7
44085: ARRAY
44086: PUSH
44087: LD_INT 1
44089: ARRAY
44090: PPUSH
44091: LD_VAR 0 12
44095: PUSH
44096: LD_VAR 0 7
44100: ARRAY
44101: PUSH
44102: LD_INT 2
44104: ARRAY
44105: PPUSH
44106: CALL_OW 488
44110: NOT
44111: PUSH
44112: LD_VAR 0 12
44116: PUSH
44117: LD_VAR 0 7
44121: ARRAY
44122: PUSH
44123: LD_INT 1
44125: ARRAY
44126: PPUSH
44127: LD_VAR 0 12
44131: PUSH
44132: LD_VAR 0 7
44136: ARRAY
44137: PUSH
44138: LD_INT 2
44140: ARRAY
44141: PPUSH
44142: CALL_OW 428
44146: PUSH
44147: LD_INT 0
44149: GREATER
44150: OR
44151: PUSH
44152: LD_VAR 0 12
44156: PUSH
44157: LD_VAR 0 7
44161: ARRAY
44162: PUSH
44163: LD_INT 1
44165: ARRAY
44166: PPUSH
44167: LD_VAR 0 12
44171: PUSH
44172: LD_VAR 0 7
44176: ARRAY
44177: PUSH
44178: LD_INT 2
44180: ARRAY
44181: PPUSH
44182: CALL_OW 351
44186: OR
44187: IFFALSE 44193
// exit ;
44189: POP
44190: POP
44191: GO 44485
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44193: LD_ADDR_VAR 0 8
44197: PUSH
44198: LD_VAR 0 12
44202: PUSH
44203: LD_VAR 0 7
44207: ARRAY
44208: PUSH
44209: LD_INT 1
44211: ARRAY
44212: PPUSH
44213: LD_VAR 0 12
44217: PUSH
44218: LD_VAR 0 7
44222: ARRAY
44223: PUSH
44224: LD_INT 2
44226: ARRAY
44227: PPUSH
44228: CALL_OW 546
44232: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44233: LD_VAR 0 8
44237: PUSH
44238: LD_INT 1
44240: ARRAY
44241: PUSH
44242: LD_VAR 0 8
44246: PUSH
44247: LD_INT 2
44249: ARRAY
44250: PUSH
44251: LD_VAR 0 13
44255: PUSH
44256: LD_INT 2
44258: PLUS
44259: GREATER
44260: OR
44261: PUSH
44262: LD_VAR 0 8
44266: PUSH
44267: LD_INT 2
44269: ARRAY
44270: PUSH
44271: LD_VAR 0 13
44275: PUSH
44276: LD_INT 2
44278: MINUS
44279: LESS
44280: OR
44281: PUSH
44282: LD_VAR 0 8
44286: PUSH
44287: LD_INT 3
44289: ARRAY
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 8
44296: PUSH
44297: LD_INT 9
44299: PUSH
44300: LD_INT 10
44302: PUSH
44303: LD_INT 11
44305: PUSH
44306: LD_INT 12
44308: PUSH
44309: LD_INT 13
44311: PUSH
44312: LD_INT 16
44314: PUSH
44315: LD_INT 17
44317: PUSH
44318: LD_INT 18
44320: PUSH
44321: LD_INT 19
44323: PUSH
44324: LD_INT 20
44326: PUSH
44327: LD_INT 21
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: IN
44345: NOT
44346: OR
44347: PUSH
44348: LD_VAR 0 8
44352: PUSH
44353: LD_INT 5
44355: ARRAY
44356: NOT
44357: OR
44358: PUSH
44359: LD_VAR 0 8
44363: PUSH
44364: LD_INT 6
44366: ARRAY
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 7
44376: PUSH
44377: LD_INT 9
44379: PUSH
44380: LD_INT 10
44382: PUSH
44383: LD_INT 11
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: IN
44394: NOT
44395: OR
44396: IFFALSE 44402
// exit ;
44398: POP
44399: POP
44400: GO 44485
// end ;
44402: GO 44073
44404: POP
44405: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44406: LD_VAR 0 9
44410: PPUSH
44411: LD_VAR 0 3
44415: PPUSH
44416: LD_VAR 0 4
44420: PPUSH
44421: LD_INT 20
44423: PPUSH
44424: CALL 36408 0 4
44428: PUSH
44429: LD_INT 4
44431: ARRAY
44432: IFFALSE 44436
// exit ;
44434: GO 44485
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44436: LD_VAR 0 2
44440: PUSH
44441: LD_INT 29
44443: PUSH
44444: LD_INT 30
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: IN
44451: PUSH
44452: LD_VAR 0 3
44456: PPUSH
44457: LD_VAR 0 4
44461: PPUSH
44462: LD_VAR 0 9
44466: PPUSH
44467: CALL_OW 440
44471: NOT
44472: AND
44473: IFFALSE 44477
// exit ;
44475: GO 44485
// result := true ;
44477: LD_ADDR_VAR 0 6
44481: PUSH
44482: LD_INT 1
44484: ST_TO_ADDR
// end ;
44485: LD_VAR 0 6
44489: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44490: LD_INT 0
44492: PPUSH
44493: PPUSH
44494: PPUSH
44495: PPUSH
44496: PPUSH
44497: PPUSH
44498: PPUSH
44499: PPUSH
44500: PPUSH
44501: PPUSH
44502: PPUSH
44503: PPUSH
44504: PPUSH
44505: PPUSH
44506: PPUSH
44507: PPUSH
44508: PPUSH
44509: PPUSH
44510: PPUSH
44511: PPUSH
44512: PPUSH
44513: PPUSH
44514: PPUSH
44515: PPUSH
44516: PPUSH
44517: PPUSH
44518: PPUSH
44519: PPUSH
44520: PPUSH
44521: PPUSH
44522: PPUSH
44523: PPUSH
44524: PPUSH
44525: PPUSH
44526: PPUSH
44527: PPUSH
44528: PPUSH
44529: PPUSH
44530: PPUSH
44531: PPUSH
44532: PPUSH
44533: PPUSH
44534: PPUSH
44535: PPUSH
44536: PPUSH
44537: PPUSH
44538: PPUSH
44539: PPUSH
44540: PPUSH
44541: PPUSH
44542: PPUSH
44543: PPUSH
44544: PPUSH
44545: PPUSH
44546: PPUSH
44547: PPUSH
44548: PPUSH
44549: PPUSH
// result = [ ] ;
44550: LD_ADDR_VAR 0 7
44554: PUSH
44555: EMPTY
44556: ST_TO_ADDR
// temp_list = [ ] ;
44557: LD_ADDR_VAR 0 9
44561: PUSH
44562: EMPTY
44563: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44564: LD_VAR 0 4
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 2
44577: PUSH
44578: LD_INT 3
44580: PUSH
44581: LD_INT 4
44583: PUSH
44584: LD_INT 5
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: IN
44595: NOT
44596: PUSH
44597: LD_VAR 0 1
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: IN
44612: PUSH
44613: LD_VAR 0 5
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 3
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: LIST
44631: IN
44632: NOT
44633: AND
44634: OR
44635: IFFALSE 44639
// exit ;
44637: GO 63030
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44639: LD_VAR 0 1
44643: PUSH
44644: LD_INT 6
44646: PUSH
44647: LD_INT 7
44649: PUSH
44650: LD_INT 8
44652: PUSH
44653: LD_INT 13
44655: PUSH
44656: LD_INT 12
44658: PUSH
44659: LD_INT 15
44661: PUSH
44662: LD_INT 11
44664: PUSH
44665: LD_INT 14
44667: PUSH
44668: LD_INT 10
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: IN
44682: IFFALSE 44692
// btype = b_lab ;
44684: LD_ADDR_VAR 0 1
44688: PUSH
44689: LD_INT 6
44691: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44692: LD_VAR 0 6
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: LIST
44710: IN
44711: NOT
44712: PUSH
44713: LD_VAR 0 1
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: LD_INT 3
44729: PUSH
44730: LD_INT 6
44732: PUSH
44733: LD_INT 36
44735: PUSH
44736: LD_INT 4
44738: PUSH
44739: LD_INT 5
44741: PUSH
44742: LD_INT 31
44744: PUSH
44745: LD_INT 32
44747: PUSH
44748: LD_INT 33
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: IN
44764: NOT
44765: PUSH
44766: LD_VAR 0 6
44770: PUSH
44771: LD_INT 1
44773: EQUAL
44774: AND
44775: OR
44776: PUSH
44777: LD_VAR 0 1
44781: PUSH
44782: LD_INT 2
44784: PUSH
44785: LD_INT 3
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: IN
44792: NOT
44793: PUSH
44794: LD_VAR 0 6
44798: PUSH
44799: LD_INT 2
44801: EQUAL
44802: AND
44803: OR
44804: IFFALSE 44814
// mode = 0 ;
44806: LD_ADDR_VAR 0 6
44810: PUSH
44811: LD_INT 0
44813: ST_TO_ADDR
// case mode of 0 :
44814: LD_VAR 0 6
44818: PUSH
44819: LD_INT 0
44821: DOUBLE
44822: EQUAL
44823: IFTRUE 44827
44825: GO 56280
44827: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44828: LD_ADDR_VAR 0 11
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 2
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: LD_INT 3
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 3
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45021: LD_ADDR_VAR 0 12
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 2
45144: NEG
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 3
45178: NEG
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 3
45189: NEG
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45217: LD_ADDR_VAR 0 13
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 2
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: NEG
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 2
45352: NEG
45353: PUSH
45354: LD_INT 2
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 2
45364: NEG
45365: PUSH
45366: LD_INT 3
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 3
45376: NEG
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 3
45388: NEG
45389: PUSH
45390: LD_INT 3
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45416: LD_ADDR_VAR 0 14
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 3
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 3
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45612: LD_ADDR_VAR 0 15
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 2
45735: NEG
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 3
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 3
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45805: LD_ADDR_VAR 0 16
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 3
45952: PUSH
45953: LD_INT 2
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 3
45962: PUSH
45963: LD_INT 3
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: PUSH
45973: LD_INT 3
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45998: LD_ADDR_VAR 0 17
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 2
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: LD_INT 2
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: LD_INT 2
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46228: LD_ADDR_VAR 0 18
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46458: LD_ADDR_VAR 0 19
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: LD_INT 2
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46688: LD_ADDR_VAR 0 20
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 2
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46918: LD_ADDR_VAR 0 21
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: LD_INT 2
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: LD_INT 2
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: LD_INT 2
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47148: LD_ADDR_VAR 0 22
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: NEG
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: NEG
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 2
47347: NEG
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47378: LD_ADDR_VAR 0 23
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 2
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 2
47554: NEG
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 2
47565: NEG
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: LD_INT 3
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: LD_INT 3
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47658: LD_ADDR_VAR 0 24
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 2
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 2
47857: NEG
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47934: LD_ADDR_VAR 0 25
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 2
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 3
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 3
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: LD_INT 3
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 3
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48208: LD_ADDR_VAR 0 26
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: LD_INT 3
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 3
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 2
48450: NEG
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48484: LD_ADDR_VAR 0 27
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 2
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 2
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 2
48660: NEG
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 2
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 3
48717: NEG
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 3
48729: NEG
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48764: LD_ADDR_VAR 0 28
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 2
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 2
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: NEG
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: NEG
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: LD_INT 2
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: LD_INT 3
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: LD_INT 3
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 3
48999: NEG
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 3
49011: NEG
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49046: LD_ADDR_VAR 0 29
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: LD_INT 3
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 3
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 3
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 3
49290: NEG
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49325: LD_ADDR_VAR 0 30
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: NEG
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: NEG
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: LD_INT 3
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 3
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: LD_INT 3
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 3
49568: NEG
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49603: LD_ADDR_VAR 0 31
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: LD_INT 2
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 3
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 3
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 3
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 3
49846: NEG
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49881: LD_ADDR_VAR 0 32
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: LD_INT 3
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 3
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: LD_INT 3
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 3
50124: NEG
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50159: LD_ADDR_VAR 0 33
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 2
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: NEG
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: NEG
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: NEG
50350: PUSH
50351: LD_INT 3
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 3
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 3
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: LD_INT 2
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 3
50403: NEG
50404: PUSH
50405: LD_INT 2
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50438: LD_ADDR_VAR 0 34
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: NEG
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 3
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 3
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: LD_INT 3
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: NEG
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 3
50683: NEG
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50718: LD_ADDR_VAR 0 35
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50830: LD_ADDR_VAR 0 36
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 2
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50942: LD_ADDR_VAR 0 37
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51054: LD_ADDR_VAR 0 38
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51166: LD_ADDR_VAR 0 39
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51278: LD_ADDR_VAR 0 40
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51390: LD_ADDR_VAR 0 41
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 2
51568: NEG
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: LD_INT 3
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 3
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 3
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 3
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 3
51633: PUSH
51634: LD_INT 3
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: LD_INT 3
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 3
51664: NEG
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 3
51675: NEG
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 3
51687: NEG
51688: PUSH
51689: LD_INT 2
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: NEG
51700: PUSH
51701: LD_INT 3
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51740: LD_ADDR_VAR 0 42
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: LD_INT 3
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: LD_INT 3
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 3
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 3
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 3
51986: PUSH
51987: LD_INT 3
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: LD_INT 3
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 3
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: LD_INT 3
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 3
52037: NEG
52038: PUSH
52039: LD_INT 2
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 3
52049: NEG
52050: PUSH
52051: LD_INT 3
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52090: LD_ADDR_VAR 0 43
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: NEG
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 3
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 3
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 3
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 3
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 3
52386: NEG
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 3
52397: NEG
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52438: LD_ADDR_VAR 0 44
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: LD_INT 2
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: LD_INT 3
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 3
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 3
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 3
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 3
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 2
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 3
52712: NEG
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 3
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 3
52735: NEG
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 3
52747: NEG
52748: PUSH
52749: LD_INT 3
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52788: LD_ADDR_VAR 0 45
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: LD_INT 2
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: LD_INT 2
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 2
52978: NEG
52979: PUSH
52980: LD_INT 3
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: LD_INT 3
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 3
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 3
53034: PUSH
53035: LD_INT 3
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: LD_INT 3
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 3
53085: NEG
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 3
53097: NEG
53098: PUSH
53099: LD_INT 3
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53138: LD_ADDR_VAR 0 46
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: NEG
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: LD_INT 3
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 3
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 3
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 3
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 3
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: LD_INT 3
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 3
53434: NEG
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 3
53445: NEG
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53486: LD_ADDR_VAR 0 47
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 2
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: NEG
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53637: LD_ADDR_VAR 0 48
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53784: LD_ADDR_VAR 0 49
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53928: LD_ADDR_VAR 0 50
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: LD_INT 2
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54072: LD_ADDR_VAR 0 51
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54219: LD_ADDR_VAR 0 52
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54370: LD_ADDR_VAR 0 53
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54600: LD_ADDR_VAR 0 54
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54830: LD_ADDR_VAR 0 55
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: LD_INT 2
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 2
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 2
55006: NEG
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55060: LD_ADDR_VAR 0 56
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 2
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 2
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 2
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 2
55236: NEG
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55290: LD_ADDR_VAR 0 57
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: LD_INT 2
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 2
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 2
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 2
55466: NEG
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: NEG
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55520: LD_ADDR_VAR 0 58
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55750: LD_ADDR_VAR 0 59
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55838: LD_ADDR_VAR 0 60
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55926: LD_ADDR_VAR 0 61
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56014: LD_ADDR_VAR 0 62
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56102: LD_ADDR_VAR 0 63
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56190: LD_ADDR_VAR 0 64
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: ST_TO_ADDR
// end ; 1 :
56278: GO 62175
56280: LD_INT 1
56282: DOUBLE
56283: EQUAL
56284: IFTRUE 56288
56286: GO 58911
56288: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56289: LD_ADDR_VAR 0 11
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 3
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: LD_INT 3
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: LIST
56332: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56333: LD_ADDR_VAR 0 12
56337: PUSH
56338: LD_INT 2
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 3
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: LIST
56373: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56374: LD_ADDR_VAR 0 13
56378: PUSH
56379: LD_INT 3
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 3
56391: PUSH
56392: LD_INT 3
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: LD_INT 3
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: LIST
56413: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56414: LD_ADDR_VAR 0 14
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: LD_INT 3
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: LIST
56454: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56455: LD_ADDR_VAR 0 15
56459: PUSH
56460: LD_INT 2
56462: NEG
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 3
56473: NEG
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 3
56484: NEG
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: LIST
56498: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56499: LD_ADDR_VAR 0 16
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: LD_INT 3
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 3
56518: NEG
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: LD_INT 3
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: LIST
56544: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56545: LD_ADDR_VAR 0 17
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: LD_INT 3
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: LD_INT 3
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: LD_INT 2
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: LIST
56588: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56589: LD_ADDR_VAR 0 18
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 3
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56630: LD_ADDR_VAR 0 19
56634: PUSH
56635: LD_INT 3
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 3
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: LD_INT 3
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: LIST
56669: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56670: LD_ADDR_VAR 0 20
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: LD_INT 3
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 3
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: LIST
56710: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56711: LD_ADDR_VAR 0 21
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 3
56729: NEG
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 3
56740: NEG
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: LIST
56754: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56755: LD_ADDR_VAR 0 22
56759: PUSH
56760: LD_INT 2
56762: NEG
56763: PUSH
56764: LD_INT 3
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 3
56774: NEG
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 3
56786: NEG
56787: PUSH
56788: LD_INT 3
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: LIST
56800: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56801: LD_ADDR_VAR 0 23
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 3
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: LD_INT 4
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: LD_INT 3
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: LIST
56844: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56845: LD_ADDR_VAR 0 24
56849: PUSH
56850: LD_INT 3
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 3
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 4
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56886: LD_ADDR_VAR 0 25
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: LD_INT 3
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 4
56903: PUSH
56904: LD_INT 3
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 3
56913: PUSH
56914: LD_INT 4
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: LIST
56925: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56926: LD_ADDR_VAR 0 26
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: LD_INT 3
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: LD_INT 4
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: LD_INT 3
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: LIST
56966: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56967: LD_ADDR_VAR 0 27
56971: PUSH
56972: LD_INT 3
56974: NEG
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 3
56985: NEG
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 4
56996: NEG
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: LIST
57010: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57011: LD_ADDR_VAR 0 28
57015: PUSH
57016: LD_INT 3
57018: NEG
57019: PUSH
57020: LD_INT 3
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 3
57030: NEG
57031: PUSH
57032: LD_INT 4
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 4
57042: NEG
57043: PUSH
57044: LD_INT 3
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: LIST
57056: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57057: LD_ADDR_VAR 0 29
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 3
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: LD_INT 2
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: LD_INT 4
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 4
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 3
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 5
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 5
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: LD_INT 4
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 6
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 6
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 5
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57212: LD_ADDR_VAR 0 30
57216: PUSH
57217: LD_INT 2
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 3
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 3
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 3
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 4
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 4
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 4
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 5
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 5
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 5
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 6
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 6
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57355: LD_ADDR_VAR 0 31
57359: PUSH
57360: LD_INT 3
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 3
57372: PUSH
57373: LD_INT 3
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: LD_INT 3
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 4
57392: PUSH
57393: LD_INT 3
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 4
57402: PUSH
57403: LD_INT 4
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: PUSH
57413: LD_INT 4
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 5
57422: PUSH
57423: LD_INT 4
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 5
57432: PUSH
57433: LD_INT 5
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 4
57442: PUSH
57443: LD_INT 5
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 6
57452: PUSH
57453: LD_INT 5
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 6
57462: PUSH
57463: LD_INT 6
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 5
57472: PUSH
57473: LD_INT 6
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57494: LD_ADDR_VAR 0 32
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: LD_INT 3
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: LD_INT 3
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: LD_INT 4
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 4
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 3
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: LD_INT 5
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: LD_INT 5
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: LD_INT 4
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: LD_INT 6
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: LD_INT 6
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 5
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57637: LD_ADDR_VAR 0 33
57641: PUSH
57642: LD_INT 2
57644: NEG
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 3
57655: NEG
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 3
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 4
57689: NEG
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 4
57700: NEG
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 4
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 5
57723: NEG
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 5
57734: NEG
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 5
57746: NEG
57747: PUSH
57748: LD_INT 1
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 6
57757: NEG
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 6
57768: NEG
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57792: LD_ADDR_VAR 0 34
57796: PUSH
57797: LD_INT 2
57799: NEG
57800: PUSH
57801: LD_INT 3
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 3
57811: NEG
57812: PUSH
57813: LD_INT 2
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 3
57823: NEG
57824: PUSH
57825: LD_INT 3
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 3
57835: NEG
57836: PUSH
57837: LD_INT 4
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 4
57847: NEG
57848: PUSH
57849: LD_INT 3
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 4
57859: NEG
57860: PUSH
57861: LD_INT 4
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 4
57871: NEG
57872: PUSH
57873: LD_INT 5
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 5
57883: NEG
57884: PUSH
57885: LD_INT 4
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 5
57895: NEG
57896: PUSH
57897: LD_INT 5
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 5
57907: NEG
57908: PUSH
57909: LD_INT 6
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 6
57919: NEG
57920: PUSH
57921: LD_INT 5
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 6
57931: NEG
57932: PUSH
57933: LD_INT 6
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57955: LD_ADDR_VAR 0 41
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 3
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: LIST
57998: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57999: LD_ADDR_VAR 0 42
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 3
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: LIST
58039: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58040: LD_ADDR_VAR 0 43
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 3
58057: PUSH
58058: LD_INT 2
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: LD_INT 3
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: LIST
58079: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58080: LD_ADDR_VAR 0 44
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: LD_INT 3
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: LIST
58120: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58121: LD_ADDR_VAR 0 45
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 3
58150: NEG
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58165: LD_ADDR_VAR 0 46
58169: PUSH
58170: LD_INT 2
58172: NEG
58173: PUSH
58174: LD_INT 2
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 2
58184: NEG
58185: PUSH
58186: LD_INT 3
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: NEG
58197: PUSH
58198: LD_INT 2
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: LIST
58210: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58211: LD_ADDR_VAR 0 47
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 3
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58244: LD_ADDR_VAR 0 48
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58275: LD_ADDR_VAR 0 49
58279: PUSH
58280: LD_INT 3
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 3
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58304: LD_ADDR_VAR 0 50
58308: PUSH
58309: LD_INT 2
58311: PUSH
58312: LD_INT 3
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: LD_INT 3
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58333: LD_ADDR_VAR 0 51
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 2
58351: NEG
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58364: LD_ADDR_VAR 0 52
58368: PUSH
58369: LD_INT 3
58371: NEG
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 3
58383: NEG
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58397: LD_ADDR_VAR 0 53
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: LD_INT 3
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: LD_INT 3
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: LD_INT 2
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: LIST
58440: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58441: LD_ADDR_VAR 0 54
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 3
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 3
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58482: LD_ADDR_VAR 0 55
58486: PUSH
58487: LD_INT 3
58489: PUSH
58490: LD_INT 2
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 3
58499: PUSH
58500: LD_INT 3
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 2
58509: PUSH
58510: LD_INT 3
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: LIST
58521: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58522: LD_ADDR_VAR 0 56
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 3
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 3
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 2
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: LIST
58562: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58563: LD_ADDR_VAR 0 57
58567: PUSH
58568: LD_INT 2
58570: NEG
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 3
58581: NEG
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 3
58592: NEG
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: LIST
58606: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58607: LD_ADDR_VAR 0 58
58611: PUSH
58612: LD_INT 2
58614: NEG
58615: PUSH
58616: LD_INT 3
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: NEG
58627: PUSH
58628: LD_INT 2
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 3
58638: NEG
58639: PUSH
58640: LD_INT 3
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: LIST
58652: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58653: LD_ADDR_VAR 0 59
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58697: LD_ADDR_VAR 0 60
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: LIST
58737: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58738: LD_ADDR_VAR 0 61
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: LD_INT 2
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 2
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: LIST
58777: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58778: LD_ADDR_VAR 0 62
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: LIST
58818: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58819: LD_ADDR_VAR 0 63
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: LIST
58862: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58863: LD_ADDR_VAR 0 64
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: LD_INT 2
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: NEG
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: LIST
58908: ST_TO_ADDR
// end ; 2 :
58909: GO 62175
58911: LD_INT 2
58913: DOUBLE
58914: EQUAL
58915: IFTRUE 58919
58917: GO 62174
58919: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58920: LD_ADDR_VAR 0 29
58924: PUSH
58925: LD_INT 4
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 4
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 5
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 5
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 4
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 3
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 3
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 3
58999: PUSH
59000: LD_INT 2
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 5
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 3
59020: PUSH
59021: LD_INT 3
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 3
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 4
59040: PUSH
59041: LD_INT 3
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 4
59050: PUSH
59051: LD_INT 4
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 3
59060: PUSH
59061: LD_INT 4
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 2
59070: PUSH
59071: LD_INT 3
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 4
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: LD_INT 4
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: LD_INT 4
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: LD_INT 3
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: LD_INT 4
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: LD_INT 5
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 5
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: LD_INT 4
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: LD_INT 3
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: LD_INT 5
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: NEG
59193: PUSH
59194: LD_INT 3
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 3
59214: NEG
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 3
59248: NEG
59249: PUSH
59250: LD_INT 1
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 4
59259: NEG
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 4
59270: NEG
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 4
59282: NEG
59283: PUSH
59284: LD_INT 2
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 2
59294: NEG
59295: PUSH
59296: LD_INT 2
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 4
59305: NEG
59306: PUSH
59307: LD_INT 4
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 4
59317: NEG
59318: PUSH
59319: LD_INT 5
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 3
59329: NEG
59330: PUSH
59331: LD_INT 4
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 3
59341: NEG
59342: PUSH
59343: LD_INT 3
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 4
59353: NEG
59354: PUSH
59355: LD_INT 3
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 5
59365: NEG
59366: PUSH
59367: LD_INT 4
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 5
59377: NEG
59378: PUSH
59379: LD_INT 5
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 3
59389: NEG
59390: PUSH
59391: LD_INT 5
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 5
59401: NEG
59402: PUSH
59403: LD_INT 3
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59458: LD_ADDR_VAR 0 30
59462: PUSH
59463: LD_INT 4
59465: PUSH
59466: LD_INT 4
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 4
59475: PUSH
59476: LD_INT 3
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 5
59485: PUSH
59486: LD_INT 4
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 5
59495: PUSH
59496: LD_INT 5
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 4
59505: PUSH
59506: LD_INT 5
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 3
59515: PUSH
59516: LD_INT 4
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 3
59525: PUSH
59526: LD_INT 3
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 5
59535: PUSH
59536: LD_INT 3
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 3
59545: PUSH
59546: LD_INT 5
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 3
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: LD_INT 2
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 4
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 4
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: LD_INT 3
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: LD_INT 2
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 2
59627: PUSH
59628: LD_INT 4
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: LD_INT 2
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 4
59648: NEG
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 4
59659: NEG
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 3
59671: NEG
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 3
59682: NEG
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 4
59693: NEG
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 5
59704: NEG
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 5
59715: NEG
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 5
59727: NEG
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 3
59739: NEG
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 3
59750: NEG
59751: PUSH
59752: LD_INT 3
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 3
59762: NEG
59763: PUSH
59764: LD_INT 4
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 2
59774: NEG
59775: PUSH
59776: LD_INT 3
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 2
59786: NEG
59787: PUSH
59788: LD_INT 2
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 3
59798: NEG
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 4
59810: NEG
59811: PUSH
59812: LD_INT 3
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 4
59822: NEG
59823: PUSH
59824: LD_INT 4
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: NEG
59835: PUSH
59836: LD_INT 4
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 4
59846: NEG
59847: PUSH
59848: LD_INT 2
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: LD_INT 4
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: LD_INT 5
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: LD_INT 4
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: LD_INT 3
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: LD_INT 3
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: LD_INT 4
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: LD_INT 5
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 2
59937: PUSH
59938: LD_INT 3
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: NEG
59949: PUSH
59950: LD_INT 5
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60005: LD_ADDR_VAR 0 31
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: LD_INT 4
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 3
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: LD_INT 4
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: LD_INT 5
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: LD_INT 5
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: LD_INT 4
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: LD_INT 3
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: LD_INT 5
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: LD_INT 3
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 3
60105: NEG
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 3
60116: NEG
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 2
60139: NEG
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 3
60150: NEG
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 4
60161: NEG
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 4
60172: NEG
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 4
60184: NEG
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 2
60196: NEG
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 4
60207: NEG
60208: PUSH
60209: LD_INT 4
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 4
60219: NEG
60220: PUSH
60221: LD_INT 5
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 3
60231: NEG
60232: PUSH
60233: LD_INT 4
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 3
60243: NEG
60244: PUSH
60245: LD_INT 3
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 4
60255: NEG
60256: PUSH
60257: LD_INT 3
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 5
60267: NEG
60268: PUSH
60269: LD_INT 4
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 5
60279: NEG
60280: PUSH
60281: LD_INT 5
60283: NEG
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 3
60291: NEG
60292: PUSH
60293: LD_INT 5
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 5
60303: NEG
60304: PUSH
60305: LD_INT 3
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: LD_INT 3
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 4
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 3
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: LD_INT 3
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: LD_INT 4
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: LD_INT 4
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 4
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 4
60427: PUSH
60428: LD_INT 1
60430: NEG
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 5
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 5
60448: PUSH
60449: LD_INT 1
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 4
60458: PUSH
60459: LD_INT 1
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 3
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 3
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 3
60489: PUSH
60490: LD_INT 2
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 5
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60555: LD_ADDR_VAR 0 32
60559: PUSH
60560: LD_INT 4
60562: NEG
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 4
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 3
60585: NEG
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 3
60596: NEG
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 4
60607: NEG
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 5
60618: NEG
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 5
60629: NEG
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 5
60641: NEG
60642: PUSH
60643: LD_INT 2
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 3
60653: NEG
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 3
60664: NEG
60665: PUSH
60666: LD_INT 3
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 3
60676: NEG
60677: PUSH
60678: LD_INT 4
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: LD_INT 3
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 2
60700: NEG
60701: PUSH
60702: LD_INT 2
60704: NEG
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 3
60712: NEG
60713: PUSH
60714: LD_INT 2
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 4
60724: NEG
60725: PUSH
60726: LD_INT 3
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 4
60736: NEG
60737: PUSH
60738: LD_INT 4
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 2
60748: NEG
60749: PUSH
60750: LD_INT 4
60752: NEG
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 4
60760: NEG
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: LD_INT 4
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: LD_INT 5
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 1
60794: PUSH
60795: LD_INT 4
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: LD_INT 3
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 0
60816: PUSH
60817: LD_INT 3
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: LD_INT 4
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: LD_INT 5
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: LD_INT 3
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 2
60862: NEG
60863: PUSH
60864: LD_INT 5
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 3
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 3
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 4
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 4
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 3
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 2
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: LD_INT 2
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 4
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 4
60967: PUSH
60968: LD_INT 4
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 4
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 5
60987: PUSH
60988: LD_INT 4
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 5
60997: PUSH
60998: LD_INT 5
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 4
61007: PUSH
61008: LD_INT 5
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 3
61017: PUSH
61018: LD_INT 4
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 3
61027: PUSH
61028: LD_INT 3
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 5
61037: PUSH
61038: LD_INT 3
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 3
61047: PUSH
61048: LD_INT 5
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61102: LD_ADDR_VAR 0 33
61106: PUSH
61107: LD_INT 4
61109: NEG
61110: PUSH
61111: LD_INT 4
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 4
61121: NEG
61122: PUSH
61123: LD_INT 5
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 3
61133: NEG
61134: PUSH
61135: LD_INT 4
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 3
61145: NEG
61146: PUSH
61147: LD_INT 3
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 4
61157: NEG
61158: PUSH
61159: LD_INT 3
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 5
61169: NEG
61170: PUSH
61171: LD_INT 4
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 5
61181: NEG
61182: PUSH
61183: LD_INT 5
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 3
61193: NEG
61194: PUSH
61195: LD_INT 5
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 5
61205: NEG
61206: PUSH
61207: LD_INT 3
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 3
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: LD_INT 4
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 1
61239: PUSH
61240: LD_INT 3
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: LD_INT 2
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: LD_INT 4
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: LD_INT 4
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 4
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 4
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 5
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 5
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 4
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 3
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 3
61391: PUSH
61392: LD_INT 2
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 5
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: LD_INT 3
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 3
61422: PUSH
61423: LD_INT 2
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 4
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 4
61442: PUSH
61443: LD_INT 4
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 3
61452: PUSH
61453: LD_INT 4
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 2
61462: PUSH
61463: LD_INT 3
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 2
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 4
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: LD_INT 4
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 4
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 3
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: LD_INT 4
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: LD_INT 5
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: LD_INT 5
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: LD_INT 4
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: LD_INT 3
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 2
61574: PUSH
61575: LD_INT 5
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: LD_INT 3
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61640: LD_ADDR_VAR 0 34
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: LD_INT 4
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: LD_INT 5
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: LD_INT 4
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: LD_INT 3
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 3
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: LD_INT 4
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: NEG
61715: PUSH
61716: LD_INT 5
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 2
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: LD_INT 5
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 3
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 3
61759: PUSH
61760: LD_INT 1
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 4
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 4
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 3
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 2
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 2
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 2
61821: PUSH
61822: LD_INT 2
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 4
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 4
61842: PUSH
61843: LD_INT 4
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 4
61852: PUSH
61853: LD_INT 3
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 5
61862: PUSH
61863: LD_INT 4
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 5
61872: PUSH
61873: LD_INT 5
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 4
61882: PUSH
61883: LD_INT 5
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 3
61892: PUSH
61893: LD_INT 4
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 3
61902: PUSH
61903: LD_INT 3
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 5
61912: PUSH
61913: LD_INT 3
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 3
61922: PUSH
61923: LD_INT 5
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: LD_INT 3
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: LD_INT 2
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: LD_INT 3
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: LD_INT 4
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: LD_INT 4
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: LD_INT 3
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: LD_INT 2
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 2
62004: PUSH
62005: LD_INT 4
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: NEG
62015: PUSH
62016: LD_INT 2
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 4
62025: NEG
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 4
62036: NEG
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 3
62048: NEG
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 3
62059: NEG
62060: PUSH
62061: LD_INT 1
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 4
62070: NEG
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 5
62081: NEG
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 5
62092: NEG
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 5
62104: NEG
62105: PUSH
62106: LD_INT 2
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 3
62116: NEG
62117: PUSH
62118: LD_INT 2
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: ST_TO_ADDR
// end ; end ;
62172: GO 62175
62174: POP
// case btype of b_depot , b_warehouse :
62175: LD_VAR 0 1
62179: PUSH
62180: LD_INT 0
62182: DOUBLE
62183: EQUAL
62184: IFTRUE 62194
62186: LD_INT 1
62188: DOUBLE
62189: EQUAL
62190: IFTRUE 62194
62192: GO 62395
62194: POP
// case nation of nation_american :
62195: LD_VAR 0 5
62199: PUSH
62200: LD_INT 1
62202: DOUBLE
62203: EQUAL
62204: IFTRUE 62208
62206: GO 62264
62208: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62209: LD_ADDR_VAR 0 9
62213: PUSH
62214: LD_VAR 0 11
62218: PUSH
62219: LD_VAR 0 12
62223: PUSH
62224: LD_VAR 0 13
62228: PUSH
62229: LD_VAR 0 14
62233: PUSH
62234: LD_VAR 0 15
62238: PUSH
62239: LD_VAR 0 16
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: PUSH
62252: LD_VAR 0 4
62256: PUSH
62257: LD_INT 1
62259: PLUS
62260: ARRAY
62261: ST_TO_ADDR
62262: GO 62393
62264: LD_INT 2
62266: DOUBLE
62267: EQUAL
62268: IFTRUE 62272
62270: GO 62328
62272: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62273: LD_ADDR_VAR 0 9
62277: PUSH
62278: LD_VAR 0 17
62282: PUSH
62283: LD_VAR 0 18
62287: PUSH
62288: LD_VAR 0 19
62292: PUSH
62293: LD_VAR 0 20
62297: PUSH
62298: LD_VAR 0 21
62302: PUSH
62303: LD_VAR 0 22
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: PUSH
62316: LD_VAR 0 4
62320: PUSH
62321: LD_INT 1
62323: PLUS
62324: ARRAY
62325: ST_TO_ADDR
62326: GO 62393
62328: LD_INT 3
62330: DOUBLE
62331: EQUAL
62332: IFTRUE 62336
62334: GO 62392
62336: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62337: LD_ADDR_VAR 0 9
62341: PUSH
62342: LD_VAR 0 23
62346: PUSH
62347: LD_VAR 0 24
62351: PUSH
62352: LD_VAR 0 25
62356: PUSH
62357: LD_VAR 0 26
62361: PUSH
62362: LD_VAR 0 27
62366: PUSH
62367: LD_VAR 0 28
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: PUSH
62380: LD_VAR 0 4
62384: PUSH
62385: LD_INT 1
62387: PLUS
62388: ARRAY
62389: ST_TO_ADDR
62390: GO 62393
62392: POP
62393: GO 62948
62395: LD_INT 2
62397: DOUBLE
62398: EQUAL
62399: IFTRUE 62409
62401: LD_INT 3
62403: DOUBLE
62404: EQUAL
62405: IFTRUE 62409
62407: GO 62465
62409: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62410: LD_ADDR_VAR 0 9
62414: PUSH
62415: LD_VAR 0 29
62419: PUSH
62420: LD_VAR 0 30
62424: PUSH
62425: LD_VAR 0 31
62429: PUSH
62430: LD_VAR 0 32
62434: PUSH
62435: LD_VAR 0 33
62439: PUSH
62440: LD_VAR 0 34
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: PUSH
62453: LD_VAR 0 4
62457: PUSH
62458: LD_INT 1
62460: PLUS
62461: ARRAY
62462: ST_TO_ADDR
62463: GO 62948
62465: LD_INT 16
62467: DOUBLE
62468: EQUAL
62469: IFTRUE 62527
62471: LD_INT 17
62473: DOUBLE
62474: EQUAL
62475: IFTRUE 62527
62477: LD_INT 18
62479: DOUBLE
62480: EQUAL
62481: IFTRUE 62527
62483: LD_INT 19
62485: DOUBLE
62486: EQUAL
62487: IFTRUE 62527
62489: LD_INT 22
62491: DOUBLE
62492: EQUAL
62493: IFTRUE 62527
62495: LD_INT 20
62497: DOUBLE
62498: EQUAL
62499: IFTRUE 62527
62501: LD_INT 21
62503: DOUBLE
62504: EQUAL
62505: IFTRUE 62527
62507: LD_INT 23
62509: DOUBLE
62510: EQUAL
62511: IFTRUE 62527
62513: LD_INT 24
62515: DOUBLE
62516: EQUAL
62517: IFTRUE 62527
62519: LD_INT 25
62521: DOUBLE
62522: EQUAL
62523: IFTRUE 62527
62525: GO 62583
62527: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62528: LD_ADDR_VAR 0 9
62532: PUSH
62533: LD_VAR 0 35
62537: PUSH
62538: LD_VAR 0 36
62542: PUSH
62543: LD_VAR 0 37
62547: PUSH
62548: LD_VAR 0 38
62552: PUSH
62553: LD_VAR 0 39
62557: PUSH
62558: LD_VAR 0 40
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: PUSH
62571: LD_VAR 0 4
62575: PUSH
62576: LD_INT 1
62578: PLUS
62579: ARRAY
62580: ST_TO_ADDR
62581: GO 62948
62583: LD_INT 6
62585: DOUBLE
62586: EQUAL
62587: IFTRUE 62639
62589: LD_INT 7
62591: DOUBLE
62592: EQUAL
62593: IFTRUE 62639
62595: LD_INT 8
62597: DOUBLE
62598: EQUAL
62599: IFTRUE 62639
62601: LD_INT 13
62603: DOUBLE
62604: EQUAL
62605: IFTRUE 62639
62607: LD_INT 12
62609: DOUBLE
62610: EQUAL
62611: IFTRUE 62639
62613: LD_INT 15
62615: DOUBLE
62616: EQUAL
62617: IFTRUE 62639
62619: LD_INT 11
62621: DOUBLE
62622: EQUAL
62623: IFTRUE 62639
62625: LD_INT 14
62627: DOUBLE
62628: EQUAL
62629: IFTRUE 62639
62631: LD_INT 10
62633: DOUBLE
62634: EQUAL
62635: IFTRUE 62639
62637: GO 62695
62639: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62640: LD_ADDR_VAR 0 9
62644: PUSH
62645: LD_VAR 0 41
62649: PUSH
62650: LD_VAR 0 42
62654: PUSH
62655: LD_VAR 0 43
62659: PUSH
62660: LD_VAR 0 44
62664: PUSH
62665: LD_VAR 0 45
62669: PUSH
62670: LD_VAR 0 46
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: PUSH
62683: LD_VAR 0 4
62687: PUSH
62688: LD_INT 1
62690: PLUS
62691: ARRAY
62692: ST_TO_ADDR
62693: GO 62948
62695: LD_INT 36
62697: DOUBLE
62698: EQUAL
62699: IFTRUE 62703
62701: GO 62759
62703: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62704: LD_ADDR_VAR 0 9
62708: PUSH
62709: LD_VAR 0 47
62713: PUSH
62714: LD_VAR 0 48
62718: PUSH
62719: LD_VAR 0 49
62723: PUSH
62724: LD_VAR 0 50
62728: PUSH
62729: LD_VAR 0 51
62733: PUSH
62734: LD_VAR 0 52
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: PUSH
62747: LD_VAR 0 4
62751: PUSH
62752: LD_INT 1
62754: PLUS
62755: ARRAY
62756: ST_TO_ADDR
62757: GO 62948
62759: LD_INT 4
62761: DOUBLE
62762: EQUAL
62763: IFTRUE 62785
62765: LD_INT 5
62767: DOUBLE
62768: EQUAL
62769: IFTRUE 62785
62771: LD_INT 34
62773: DOUBLE
62774: EQUAL
62775: IFTRUE 62785
62777: LD_INT 37
62779: DOUBLE
62780: EQUAL
62781: IFTRUE 62785
62783: GO 62841
62785: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62786: LD_ADDR_VAR 0 9
62790: PUSH
62791: LD_VAR 0 53
62795: PUSH
62796: LD_VAR 0 54
62800: PUSH
62801: LD_VAR 0 55
62805: PUSH
62806: LD_VAR 0 56
62810: PUSH
62811: LD_VAR 0 57
62815: PUSH
62816: LD_VAR 0 58
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: PUSH
62829: LD_VAR 0 4
62833: PUSH
62834: LD_INT 1
62836: PLUS
62837: ARRAY
62838: ST_TO_ADDR
62839: GO 62948
62841: LD_INT 31
62843: DOUBLE
62844: EQUAL
62845: IFTRUE 62891
62847: LD_INT 32
62849: DOUBLE
62850: EQUAL
62851: IFTRUE 62891
62853: LD_INT 33
62855: DOUBLE
62856: EQUAL
62857: IFTRUE 62891
62859: LD_INT 27
62861: DOUBLE
62862: EQUAL
62863: IFTRUE 62891
62865: LD_INT 26
62867: DOUBLE
62868: EQUAL
62869: IFTRUE 62891
62871: LD_INT 28
62873: DOUBLE
62874: EQUAL
62875: IFTRUE 62891
62877: LD_INT 29
62879: DOUBLE
62880: EQUAL
62881: IFTRUE 62891
62883: LD_INT 30
62885: DOUBLE
62886: EQUAL
62887: IFTRUE 62891
62889: GO 62947
62891: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62892: LD_ADDR_VAR 0 9
62896: PUSH
62897: LD_VAR 0 59
62901: PUSH
62902: LD_VAR 0 60
62906: PUSH
62907: LD_VAR 0 61
62911: PUSH
62912: LD_VAR 0 62
62916: PUSH
62917: LD_VAR 0 63
62921: PUSH
62922: LD_VAR 0 64
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: PUSH
62935: LD_VAR 0 4
62939: PUSH
62940: LD_INT 1
62942: PLUS
62943: ARRAY
62944: ST_TO_ADDR
62945: GO 62948
62947: POP
// temp_list2 = [ ] ;
62948: LD_ADDR_VAR 0 10
62952: PUSH
62953: EMPTY
62954: ST_TO_ADDR
// for i in temp_list do
62955: LD_ADDR_VAR 0 8
62959: PUSH
62960: LD_VAR 0 9
62964: PUSH
62965: FOR_IN
62966: IFFALSE 63018
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62968: LD_ADDR_VAR 0 10
62972: PUSH
62973: LD_VAR 0 10
62977: PUSH
62978: LD_VAR 0 8
62982: PUSH
62983: LD_INT 1
62985: ARRAY
62986: PUSH
62987: LD_VAR 0 2
62991: PLUS
62992: PUSH
62993: LD_VAR 0 8
62997: PUSH
62998: LD_INT 2
63000: ARRAY
63001: PUSH
63002: LD_VAR 0 3
63006: PLUS
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: EMPTY
63013: LIST
63014: ADD
63015: ST_TO_ADDR
63016: GO 62965
63018: POP
63019: POP
// result = temp_list2 ;
63020: LD_ADDR_VAR 0 7
63024: PUSH
63025: LD_VAR 0 10
63029: ST_TO_ADDR
// end ;
63030: LD_VAR 0 7
63034: RET
// export function EnemyInRange ( unit , dist ) ; begin
63035: LD_INT 0
63037: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63038: LD_ADDR_VAR 0 3
63042: PUSH
63043: LD_VAR 0 1
63047: PPUSH
63048: CALL_OW 255
63052: PPUSH
63053: LD_VAR 0 1
63057: PPUSH
63058: CALL_OW 250
63062: PPUSH
63063: LD_VAR 0 1
63067: PPUSH
63068: CALL_OW 251
63072: PPUSH
63073: LD_VAR 0 2
63077: PPUSH
63078: CALL 36408 0 4
63082: PUSH
63083: LD_INT 4
63085: ARRAY
63086: ST_TO_ADDR
// end ;
63087: LD_VAR 0 3
63091: RET
// export function PlayerSeeMe ( unit ) ; begin
63092: LD_INT 0
63094: PPUSH
// result := See ( your_side , unit ) ;
63095: LD_ADDR_VAR 0 2
63099: PUSH
63100: LD_OWVAR 2
63104: PPUSH
63105: LD_VAR 0 1
63109: PPUSH
63110: CALL_OW 292
63114: ST_TO_ADDR
// end ;
63115: LD_VAR 0 2
63119: RET
// export function ReverseDir ( unit ) ; begin
63120: LD_INT 0
63122: PPUSH
// if not unit then
63123: LD_VAR 0 1
63127: NOT
63128: IFFALSE 63132
// exit ;
63130: GO 63155
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63132: LD_ADDR_VAR 0 2
63136: PUSH
63137: LD_VAR 0 1
63141: PPUSH
63142: CALL_OW 254
63146: PUSH
63147: LD_INT 3
63149: PLUS
63150: PUSH
63151: LD_INT 6
63153: MOD
63154: ST_TO_ADDR
// end ;
63155: LD_VAR 0 2
63159: RET
// export function ReverseArray ( array ) ; var i ; begin
63160: LD_INT 0
63162: PPUSH
63163: PPUSH
// if not array then
63164: LD_VAR 0 1
63168: NOT
63169: IFFALSE 63173
// exit ;
63171: GO 63228
// result := [ ] ;
63173: LD_ADDR_VAR 0 2
63177: PUSH
63178: EMPTY
63179: ST_TO_ADDR
// for i := array downto 1 do
63180: LD_ADDR_VAR 0 3
63184: PUSH
63185: DOUBLE
63186: LD_VAR 0 1
63190: INC
63191: ST_TO_ADDR
63192: LD_INT 1
63194: PUSH
63195: FOR_DOWNTO
63196: IFFALSE 63226
// result := Join ( result , array [ i ] ) ;
63198: LD_ADDR_VAR 0 2
63202: PUSH
63203: LD_VAR 0 2
63207: PPUSH
63208: LD_VAR 0 1
63212: PUSH
63213: LD_VAR 0 3
63217: ARRAY
63218: PPUSH
63219: CALL 67873 0 2
63223: ST_TO_ADDR
63224: GO 63195
63226: POP
63227: POP
// end ;
63228: LD_VAR 0 2
63232: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63233: LD_INT 0
63235: PPUSH
63236: PPUSH
63237: PPUSH
63238: PPUSH
63239: PPUSH
63240: PPUSH
// if not unit or not hexes then
63241: LD_VAR 0 1
63245: NOT
63246: PUSH
63247: LD_VAR 0 2
63251: NOT
63252: OR
63253: IFFALSE 63257
// exit ;
63255: GO 63380
// dist := 9999 ;
63257: LD_ADDR_VAR 0 5
63261: PUSH
63262: LD_INT 9999
63264: ST_TO_ADDR
// for i = 1 to hexes do
63265: LD_ADDR_VAR 0 4
63269: PUSH
63270: DOUBLE
63271: LD_INT 1
63273: DEC
63274: ST_TO_ADDR
63275: LD_VAR 0 2
63279: PUSH
63280: FOR_TO
63281: IFFALSE 63368
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63283: LD_ADDR_VAR 0 6
63287: PUSH
63288: LD_VAR 0 1
63292: PPUSH
63293: LD_VAR 0 2
63297: PUSH
63298: LD_VAR 0 4
63302: ARRAY
63303: PUSH
63304: LD_INT 1
63306: ARRAY
63307: PPUSH
63308: LD_VAR 0 2
63312: PUSH
63313: LD_VAR 0 4
63317: ARRAY
63318: PUSH
63319: LD_INT 2
63321: ARRAY
63322: PPUSH
63323: CALL_OW 297
63327: ST_TO_ADDR
// if tdist < dist then
63328: LD_VAR 0 6
63332: PUSH
63333: LD_VAR 0 5
63337: LESS
63338: IFFALSE 63366
// begin hex := hexes [ i ] ;
63340: LD_ADDR_VAR 0 8
63344: PUSH
63345: LD_VAR 0 2
63349: PUSH
63350: LD_VAR 0 4
63354: ARRAY
63355: ST_TO_ADDR
// dist := tdist ;
63356: LD_ADDR_VAR 0 5
63360: PUSH
63361: LD_VAR 0 6
63365: ST_TO_ADDR
// end ; end ;
63366: GO 63280
63368: POP
63369: POP
// result := hex ;
63370: LD_ADDR_VAR 0 3
63374: PUSH
63375: LD_VAR 0 8
63379: ST_TO_ADDR
// end ;
63380: LD_VAR 0 3
63384: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63385: LD_INT 0
63387: PPUSH
63388: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63389: LD_VAR 0 1
63393: NOT
63394: PUSH
63395: LD_VAR 0 1
63399: PUSH
63400: LD_INT 21
63402: PUSH
63403: LD_INT 2
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 23
63412: PUSH
63413: LD_INT 2
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PPUSH
63424: CALL_OW 69
63428: IN
63429: NOT
63430: OR
63431: IFFALSE 63435
// exit ;
63433: GO 63482
// for i = 1 to 3 do
63435: LD_ADDR_VAR 0 3
63439: PUSH
63440: DOUBLE
63441: LD_INT 1
63443: DEC
63444: ST_TO_ADDR
63445: LD_INT 3
63447: PUSH
63448: FOR_TO
63449: IFFALSE 63480
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63451: LD_VAR 0 1
63455: PPUSH
63456: CALL_OW 250
63460: PPUSH
63461: LD_VAR 0 1
63465: PPUSH
63466: CALL_OW 251
63470: PPUSH
63471: LD_INT 1
63473: PPUSH
63474: CALL_OW 453
63478: GO 63448
63480: POP
63481: POP
// end ;
63482: LD_VAR 0 2
63486: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63487: LD_INT 0
63489: PPUSH
63490: PPUSH
63491: PPUSH
63492: PPUSH
63493: PPUSH
63494: PPUSH
// if not unit or not enemy_unit then
63495: LD_VAR 0 1
63499: NOT
63500: PUSH
63501: LD_VAR 0 2
63505: NOT
63506: OR
63507: IFFALSE 63511
// exit ;
63509: GO 63978
// if GetLives ( i ) < 250 then
63511: LD_VAR 0 4
63515: PPUSH
63516: CALL_OW 256
63520: PUSH
63521: LD_INT 250
63523: LESS
63524: IFFALSE 63537
// begin ComAutodestruct ( i ) ;
63526: LD_VAR 0 4
63530: PPUSH
63531: CALL 63385 0 1
// exit ;
63535: GO 63978
// end ; x := GetX ( enemy_unit ) ;
63537: LD_ADDR_VAR 0 7
63541: PUSH
63542: LD_VAR 0 2
63546: PPUSH
63547: CALL_OW 250
63551: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63552: LD_ADDR_VAR 0 8
63556: PUSH
63557: LD_VAR 0 2
63561: PPUSH
63562: CALL_OW 251
63566: ST_TO_ADDR
// if not x or not y then
63567: LD_VAR 0 7
63571: NOT
63572: PUSH
63573: LD_VAR 0 8
63577: NOT
63578: OR
63579: IFFALSE 63583
// exit ;
63581: GO 63978
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63583: LD_ADDR_VAR 0 6
63587: PUSH
63588: LD_VAR 0 7
63592: PPUSH
63593: LD_INT 0
63595: PPUSH
63596: LD_INT 4
63598: PPUSH
63599: CALL_OW 272
63603: PUSH
63604: LD_VAR 0 8
63608: PPUSH
63609: LD_INT 0
63611: PPUSH
63612: LD_INT 4
63614: PPUSH
63615: CALL_OW 273
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_VAR 0 7
63628: PPUSH
63629: LD_INT 1
63631: PPUSH
63632: LD_INT 4
63634: PPUSH
63635: CALL_OW 272
63639: PUSH
63640: LD_VAR 0 8
63644: PPUSH
63645: LD_INT 1
63647: PPUSH
63648: LD_INT 4
63650: PPUSH
63651: CALL_OW 273
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_VAR 0 7
63664: PPUSH
63665: LD_INT 2
63667: PPUSH
63668: LD_INT 4
63670: PPUSH
63671: CALL_OW 272
63675: PUSH
63676: LD_VAR 0 8
63680: PPUSH
63681: LD_INT 2
63683: PPUSH
63684: LD_INT 4
63686: PPUSH
63687: CALL_OW 273
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_VAR 0 7
63700: PPUSH
63701: LD_INT 3
63703: PPUSH
63704: LD_INT 4
63706: PPUSH
63707: CALL_OW 272
63711: PUSH
63712: LD_VAR 0 8
63716: PPUSH
63717: LD_INT 3
63719: PPUSH
63720: LD_INT 4
63722: PPUSH
63723: CALL_OW 273
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_VAR 0 7
63736: PPUSH
63737: LD_INT 4
63739: PPUSH
63740: LD_INT 4
63742: PPUSH
63743: CALL_OW 272
63747: PUSH
63748: LD_VAR 0 8
63752: PPUSH
63753: LD_INT 4
63755: PPUSH
63756: LD_INT 4
63758: PPUSH
63759: CALL_OW 273
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_VAR 0 7
63772: PPUSH
63773: LD_INT 5
63775: PPUSH
63776: LD_INT 4
63778: PPUSH
63779: CALL_OW 272
63783: PUSH
63784: LD_VAR 0 8
63788: PPUSH
63789: LD_INT 5
63791: PPUSH
63792: LD_INT 4
63794: PPUSH
63795: CALL_OW 273
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: ST_TO_ADDR
// for i = tmp downto 1 do
63812: LD_ADDR_VAR 0 4
63816: PUSH
63817: DOUBLE
63818: LD_VAR 0 6
63822: INC
63823: ST_TO_ADDR
63824: LD_INT 1
63826: PUSH
63827: FOR_DOWNTO
63828: IFFALSE 63929
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63830: LD_VAR 0 6
63834: PUSH
63835: LD_VAR 0 4
63839: ARRAY
63840: PUSH
63841: LD_INT 1
63843: ARRAY
63844: PPUSH
63845: LD_VAR 0 6
63849: PUSH
63850: LD_VAR 0 4
63854: ARRAY
63855: PUSH
63856: LD_INT 2
63858: ARRAY
63859: PPUSH
63860: CALL_OW 488
63864: NOT
63865: PUSH
63866: LD_VAR 0 6
63870: PUSH
63871: LD_VAR 0 4
63875: ARRAY
63876: PUSH
63877: LD_INT 1
63879: ARRAY
63880: PPUSH
63881: LD_VAR 0 6
63885: PUSH
63886: LD_VAR 0 4
63890: ARRAY
63891: PUSH
63892: LD_INT 2
63894: ARRAY
63895: PPUSH
63896: CALL_OW 428
63900: PUSH
63901: LD_INT 0
63903: NONEQUAL
63904: OR
63905: IFFALSE 63927
// tmp := Delete ( tmp , i ) ;
63907: LD_ADDR_VAR 0 6
63911: PUSH
63912: LD_VAR 0 6
63916: PPUSH
63917: LD_VAR 0 4
63921: PPUSH
63922: CALL_OW 3
63926: ST_TO_ADDR
63927: GO 63827
63929: POP
63930: POP
// j := GetClosestHex ( unit , tmp ) ;
63931: LD_ADDR_VAR 0 5
63935: PUSH
63936: LD_VAR 0 1
63940: PPUSH
63941: LD_VAR 0 6
63945: PPUSH
63946: CALL 63233 0 2
63950: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63951: LD_VAR 0 1
63955: PPUSH
63956: LD_VAR 0 5
63960: PUSH
63961: LD_INT 1
63963: ARRAY
63964: PPUSH
63965: LD_VAR 0 5
63969: PUSH
63970: LD_INT 2
63972: ARRAY
63973: PPUSH
63974: CALL_OW 111
// end ;
63978: LD_VAR 0 3
63982: RET
// export function PrepareApemanSoldier ( ) ; begin
63983: LD_INT 0
63985: PPUSH
// uc_nation := 0 ;
63986: LD_ADDR_OWVAR 21
63990: PUSH
63991: LD_INT 0
63993: ST_TO_ADDR
// hc_sex := sex_male ;
63994: LD_ADDR_OWVAR 27
63998: PUSH
63999: LD_INT 1
64001: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64002: LD_ADDR_OWVAR 28
64006: PUSH
64007: LD_INT 15
64009: ST_TO_ADDR
// hc_gallery :=  ;
64010: LD_ADDR_OWVAR 33
64014: PUSH
64015: LD_STRING 
64017: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64018: LD_ADDR_OWVAR 31
64022: PUSH
64023: LD_INT 0
64025: PPUSH
64026: LD_INT 3
64028: PPUSH
64029: CALL_OW 12
64033: PUSH
64034: LD_INT 0
64036: PPUSH
64037: LD_INT 3
64039: PPUSH
64040: CALL_OW 12
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: ST_TO_ADDR
// end ;
64057: LD_VAR 0 1
64061: RET
// export function PrepareApemanEngineer ( ) ; begin
64062: LD_INT 0
64064: PPUSH
// uc_nation := 0 ;
64065: LD_ADDR_OWVAR 21
64069: PUSH
64070: LD_INT 0
64072: ST_TO_ADDR
// hc_sex := sex_male ;
64073: LD_ADDR_OWVAR 27
64077: PUSH
64078: LD_INT 1
64080: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64081: LD_ADDR_OWVAR 28
64085: PUSH
64086: LD_INT 16
64088: ST_TO_ADDR
// hc_gallery :=  ;
64089: LD_ADDR_OWVAR 33
64093: PUSH
64094: LD_STRING 
64096: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64097: LD_ADDR_OWVAR 31
64101: PUSH
64102: LD_INT 0
64104: PPUSH
64105: LD_INT 3
64107: PPUSH
64108: CALL_OW 12
64112: PUSH
64113: LD_INT 0
64115: PPUSH
64116: LD_INT 3
64118: PPUSH
64119: CALL_OW 12
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: ST_TO_ADDR
// end ;
64136: LD_VAR 0 1
64140: RET
// export function PrepareApeman ( agressivity ) ; begin
64141: LD_INT 0
64143: PPUSH
// uc_side := 0 ;
64144: LD_ADDR_OWVAR 20
64148: PUSH
64149: LD_INT 0
64151: ST_TO_ADDR
// uc_nation := 0 ;
64152: LD_ADDR_OWVAR 21
64156: PUSH
64157: LD_INT 0
64159: ST_TO_ADDR
// hc_sex := sex_male ;
64160: LD_ADDR_OWVAR 27
64164: PUSH
64165: LD_INT 1
64167: ST_TO_ADDR
// hc_class := class_apeman ;
64168: LD_ADDR_OWVAR 28
64172: PUSH
64173: LD_INT 12
64175: ST_TO_ADDR
// hc_gallery :=  ;
64176: LD_ADDR_OWVAR 33
64180: PUSH
64181: LD_STRING 
64183: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64184: LD_ADDR_OWVAR 35
64188: PUSH
64189: LD_VAR 0 1
64193: NEG
64194: PPUSH
64195: LD_VAR 0 1
64199: PPUSH
64200: CALL_OW 12
64204: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64205: LD_ADDR_OWVAR 31
64209: PUSH
64210: LD_INT 0
64212: PPUSH
64213: LD_INT 3
64215: PPUSH
64216: CALL_OW 12
64220: PUSH
64221: LD_INT 0
64223: PPUSH
64224: LD_INT 3
64226: PPUSH
64227: CALL_OW 12
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: ST_TO_ADDR
// end ;
64244: LD_VAR 0 2
64248: RET
// export function PrepareTiger ( agressivity ) ; begin
64249: LD_INT 0
64251: PPUSH
// uc_side := 0 ;
64252: LD_ADDR_OWVAR 20
64256: PUSH
64257: LD_INT 0
64259: ST_TO_ADDR
// uc_nation := 0 ;
64260: LD_ADDR_OWVAR 21
64264: PUSH
64265: LD_INT 0
64267: ST_TO_ADDR
// hc_class := class_tiger ;
64268: LD_ADDR_OWVAR 28
64272: PUSH
64273: LD_INT 14
64275: ST_TO_ADDR
// hc_gallery :=  ;
64276: LD_ADDR_OWVAR 33
64280: PUSH
64281: LD_STRING 
64283: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64284: LD_ADDR_OWVAR 35
64288: PUSH
64289: LD_VAR 0 1
64293: NEG
64294: PPUSH
64295: LD_VAR 0 1
64299: PPUSH
64300: CALL_OW 12
64304: ST_TO_ADDR
// end ;
64305: LD_VAR 0 2
64309: RET
// export function PrepareEnchidna ( ) ; begin
64310: LD_INT 0
64312: PPUSH
// uc_side := 0 ;
64313: LD_ADDR_OWVAR 20
64317: PUSH
64318: LD_INT 0
64320: ST_TO_ADDR
// uc_nation := 0 ;
64321: LD_ADDR_OWVAR 21
64325: PUSH
64326: LD_INT 0
64328: ST_TO_ADDR
// hc_class := class_baggie ;
64329: LD_ADDR_OWVAR 28
64333: PUSH
64334: LD_INT 13
64336: ST_TO_ADDR
// hc_gallery :=  ;
64337: LD_ADDR_OWVAR 33
64341: PUSH
64342: LD_STRING 
64344: ST_TO_ADDR
// end ;
64345: LD_VAR 0 1
64349: RET
// export function PrepareFrog ( ) ; begin
64350: LD_INT 0
64352: PPUSH
// uc_side := 0 ;
64353: LD_ADDR_OWVAR 20
64357: PUSH
64358: LD_INT 0
64360: ST_TO_ADDR
// uc_nation := 0 ;
64361: LD_ADDR_OWVAR 21
64365: PUSH
64366: LD_INT 0
64368: ST_TO_ADDR
// hc_class := class_frog ;
64369: LD_ADDR_OWVAR 28
64373: PUSH
64374: LD_INT 19
64376: ST_TO_ADDR
// hc_gallery :=  ;
64377: LD_ADDR_OWVAR 33
64381: PUSH
64382: LD_STRING 
64384: ST_TO_ADDR
// end ;
64385: LD_VAR 0 1
64389: RET
// export function PrepareFish ( ) ; begin
64390: LD_INT 0
64392: PPUSH
// uc_side := 0 ;
64393: LD_ADDR_OWVAR 20
64397: PUSH
64398: LD_INT 0
64400: ST_TO_ADDR
// uc_nation := 0 ;
64401: LD_ADDR_OWVAR 21
64405: PUSH
64406: LD_INT 0
64408: ST_TO_ADDR
// hc_class := class_fish ;
64409: LD_ADDR_OWVAR 28
64413: PUSH
64414: LD_INT 20
64416: ST_TO_ADDR
// hc_gallery :=  ;
64417: LD_ADDR_OWVAR 33
64421: PUSH
64422: LD_STRING 
64424: ST_TO_ADDR
// end ;
64425: LD_VAR 0 1
64429: RET
// export function PrepareBird ( ) ; begin
64430: LD_INT 0
64432: PPUSH
// uc_side := 0 ;
64433: LD_ADDR_OWVAR 20
64437: PUSH
64438: LD_INT 0
64440: ST_TO_ADDR
// uc_nation := 0 ;
64441: LD_ADDR_OWVAR 21
64445: PUSH
64446: LD_INT 0
64448: ST_TO_ADDR
// hc_class := class_phororhacos ;
64449: LD_ADDR_OWVAR 28
64453: PUSH
64454: LD_INT 18
64456: ST_TO_ADDR
// hc_gallery :=  ;
64457: LD_ADDR_OWVAR 33
64461: PUSH
64462: LD_STRING 
64464: ST_TO_ADDR
// end ;
64465: LD_VAR 0 1
64469: RET
// export function PrepareHorse ( ) ; begin
64470: LD_INT 0
64472: PPUSH
// uc_side := 0 ;
64473: LD_ADDR_OWVAR 20
64477: PUSH
64478: LD_INT 0
64480: ST_TO_ADDR
// uc_nation := 0 ;
64481: LD_ADDR_OWVAR 21
64485: PUSH
64486: LD_INT 0
64488: ST_TO_ADDR
// hc_class := class_horse ;
64489: LD_ADDR_OWVAR 28
64493: PUSH
64494: LD_INT 21
64496: ST_TO_ADDR
// hc_gallery :=  ;
64497: LD_ADDR_OWVAR 33
64501: PUSH
64502: LD_STRING 
64504: ST_TO_ADDR
// end ;
64505: LD_VAR 0 1
64509: RET
// export function PrepareMastodont ( ) ; begin
64510: LD_INT 0
64512: PPUSH
// uc_side := 0 ;
64513: LD_ADDR_OWVAR 20
64517: PUSH
64518: LD_INT 0
64520: ST_TO_ADDR
// uc_nation := 0 ;
64521: LD_ADDR_OWVAR 21
64525: PUSH
64526: LD_INT 0
64528: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64529: LD_ADDR_OWVAR 37
64533: PUSH
64534: LD_INT 31
64536: ST_TO_ADDR
// vc_control := control_rider ;
64537: LD_ADDR_OWVAR 38
64541: PUSH
64542: LD_INT 4
64544: ST_TO_ADDR
// end ;
64545: LD_VAR 0 1
64549: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64550: LD_INT 0
64552: PPUSH
64553: PPUSH
64554: PPUSH
// uc_side = 0 ;
64555: LD_ADDR_OWVAR 20
64559: PUSH
64560: LD_INT 0
64562: ST_TO_ADDR
// uc_nation = 0 ;
64563: LD_ADDR_OWVAR 21
64567: PUSH
64568: LD_INT 0
64570: ST_TO_ADDR
// InitHc_All ( ) ;
64571: CALL_OW 584
// InitVc ;
64575: CALL_OW 20
// if mastodonts then
64579: LD_VAR 0 6
64583: IFFALSE 64650
// for i = 1 to mastodonts do
64585: LD_ADDR_VAR 0 11
64589: PUSH
64590: DOUBLE
64591: LD_INT 1
64593: DEC
64594: ST_TO_ADDR
64595: LD_VAR 0 6
64599: PUSH
64600: FOR_TO
64601: IFFALSE 64648
// begin vc_chassis := 31 ;
64603: LD_ADDR_OWVAR 37
64607: PUSH
64608: LD_INT 31
64610: ST_TO_ADDR
// vc_control := control_rider ;
64611: LD_ADDR_OWVAR 38
64615: PUSH
64616: LD_INT 4
64618: ST_TO_ADDR
// animal := CreateVehicle ;
64619: LD_ADDR_VAR 0 12
64623: PUSH
64624: CALL_OW 45
64628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64629: LD_VAR 0 12
64633: PPUSH
64634: LD_VAR 0 8
64638: PPUSH
64639: LD_INT 0
64641: PPUSH
64642: CALL 66778 0 3
// end ;
64646: GO 64600
64648: POP
64649: POP
// if horses then
64650: LD_VAR 0 5
64654: IFFALSE 64721
// for i = 1 to horses do
64656: LD_ADDR_VAR 0 11
64660: PUSH
64661: DOUBLE
64662: LD_INT 1
64664: DEC
64665: ST_TO_ADDR
64666: LD_VAR 0 5
64670: PUSH
64671: FOR_TO
64672: IFFALSE 64719
// begin hc_class := 21 ;
64674: LD_ADDR_OWVAR 28
64678: PUSH
64679: LD_INT 21
64681: ST_TO_ADDR
// hc_gallery :=  ;
64682: LD_ADDR_OWVAR 33
64686: PUSH
64687: LD_STRING 
64689: ST_TO_ADDR
// animal := CreateHuman ;
64690: LD_ADDR_VAR 0 12
64694: PUSH
64695: CALL_OW 44
64699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64700: LD_VAR 0 12
64704: PPUSH
64705: LD_VAR 0 8
64709: PPUSH
64710: LD_INT 0
64712: PPUSH
64713: CALL 66778 0 3
// end ;
64717: GO 64671
64719: POP
64720: POP
// if birds then
64721: LD_VAR 0 1
64725: IFFALSE 64792
// for i = 1 to birds do
64727: LD_ADDR_VAR 0 11
64731: PUSH
64732: DOUBLE
64733: LD_INT 1
64735: DEC
64736: ST_TO_ADDR
64737: LD_VAR 0 1
64741: PUSH
64742: FOR_TO
64743: IFFALSE 64790
// begin hc_class := 18 ;
64745: LD_ADDR_OWVAR 28
64749: PUSH
64750: LD_INT 18
64752: ST_TO_ADDR
// hc_gallery =  ;
64753: LD_ADDR_OWVAR 33
64757: PUSH
64758: LD_STRING 
64760: ST_TO_ADDR
// animal := CreateHuman ;
64761: LD_ADDR_VAR 0 12
64765: PUSH
64766: CALL_OW 44
64770: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64771: LD_VAR 0 12
64775: PPUSH
64776: LD_VAR 0 8
64780: PPUSH
64781: LD_INT 0
64783: PPUSH
64784: CALL 66778 0 3
// end ;
64788: GO 64742
64790: POP
64791: POP
// if tigers then
64792: LD_VAR 0 2
64796: IFFALSE 64880
// for i = 1 to tigers do
64798: LD_ADDR_VAR 0 11
64802: PUSH
64803: DOUBLE
64804: LD_INT 1
64806: DEC
64807: ST_TO_ADDR
64808: LD_VAR 0 2
64812: PUSH
64813: FOR_TO
64814: IFFALSE 64878
// begin hc_class = class_tiger ;
64816: LD_ADDR_OWVAR 28
64820: PUSH
64821: LD_INT 14
64823: ST_TO_ADDR
// hc_gallery =  ;
64824: LD_ADDR_OWVAR 33
64828: PUSH
64829: LD_STRING 
64831: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64832: LD_ADDR_OWVAR 35
64836: PUSH
64837: LD_INT 7
64839: NEG
64840: PPUSH
64841: LD_INT 7
64843: PPUSH
64844: CALL_OW 12
64848: ST_TO_ADDR
// animal := CreateHuman ;
64849: LD_ADDR_VAR 0 12
64853: PUSH
64854: CALL_OW 44
64858: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64859: LD_VAR 0 12
64863: PPUSH
64864: LD_VAR 0 8
64868: PPUSH
64869: LD_INT 0
64871: PPUSH
64872: CALL 66778 0 3
// end ;
64876: GO 64813
64878: POP
64879: POP
// if apemans then
64880: LD_VAR 0 3
64884: IFFALSE 65007
// for i = 1 to apemans do
64886: LD_ADDR_VAR 0 11
64890: PUSH
64891: DOUBLE
64892: LD_INT 1
64894: DEC
64895: ST_TO_ADDR
64896: LD_VAR 0 3
64900: PUSH
64901: FOR_TO
64902: IFFALSE 65005
// begin hc_class = class_apeman ;
64904: LD_ADDR_OWVAR 28
64908: PUSH
64909: LD_INT 12
64911: ST_TO_ADDR
// hc_gallery =  ;
64912: LD_ADDR_OWVAR 33
64916: PUSH
64917: LD_STRING 
64919: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64920: LD_ADDR_OWVAR 35
64924: PUSH
64925: LD_INT 2
64927: NEG
64928: PPUSH
64929: LD_INT 2
64931: PPUSH
64932: CALL_OW 12
64936: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64937: LD_ADDR_OWVAR 31
64941: PUSH
64942: LD_INT 1
64944: PPUSH
64945: LD_INT 3
64947: PPUSH
64948: CALL_OW 12
64952: PUSH
64953: LD_INT 1
64955: PPUSH
64956: LD_INT 3
64958: PPUSH
64959: CALL_OW 12
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: ST_TO_ADDR
// animal := CreateHuman ;
64976: LD_ADDR_VAR 0 12
64980: PUSH
64981: CALL_OW 44
64985: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64986: LD_VAR 0 12
64990: PPUSH
64991: LD_VAR 0 8
64995: PPUSH
64996: LD_INT 0
64998: PPUSH
64999: CALL 66778 0 3
// end ;
65003: GO 64901
65005: POP
65006: POP
// if enchidnas then
65007: LD_VAR 0 4
65011: IFFALSE 65078
// for i = 1 to enchidnas do
65013: LD_ADDR_VAR 0 11
65017: PUSH
65018: DOUBLE
65019: LD_INT 1
65021: DEC
65022: ST_TO_ADDR
65023: LD_VAR 0 4
65027: PUSH
65028: FOR_TO
65029: IFFALSE 65076
// begin hc_class = 13 ;
65031: LD_ADDR_OWVAR 28
65035: PUSH
65036: LD_INT 13
65038: ST_TO_ADDR
// hc_gallery =  ;
65039: LD_ADDR_OWVAR 33
65043: PUSH
65044: LD_STRING 
65046: ST_TO_ADDR
// animal := CreateHuman ;
65047: LD_ADDR_VAR 0 12
65051: PUSH
65052: CALL_OW 44
65056: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65057: LD_VAR 0 12
65061: PPUSH
65062: LD_VAR 0 8
65066: PPUSH
65067: LD_INT 0
65069: PPUSH
65070: CALL 66778 0 3
// end ;
65074: GO 65028
65076: POP
65077: POP
// if fishes then
65078: LD_VAR 0 7
65082: IFFALSE 65149
// for i = 1 to fishes do
65084: LD_ADDR_VAR 0 11
65088: PUSH
65089: DOUBLE
65090: LD_INT 1
65092: DEC
65093: ST_TO_ADDR
65094: LD_VAR 0 7
65098: PUSH
65099: FOR_TO
65100: IFFALSE 65147
// begin hc_class = 20 ;
65102: LD_ADDR_OWVAR 28
65106: PUSH
65107: LD_INT 20
65109: ST_TO_ADDR
// hc_gallery =  ;
65110: LD_ADDR_OWVAR 33
65114: PUSH
65115: LD_STRING 
65117: ST_TO_ADDR
// animal := CreateHuman ;
65118: LD_ADDR_VAR 0 12
65122: PUSH
65123: CALL_OW 44
65127: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65128: LD_VAR 0 12
65132: PPUSH
65133: LD_VAR 0 9
65137: PPUSH
65138: LD_INT 0
65140: PPUSH
65141: CALL 66778 0 3
// end ;
65145: GO 65099
65147: POP
65148: POP
// end ;
65149: LD_VAR 0 10
65153: RET
// export function WantHeal ( sci , unit ) ; begin
65154: LD_INT 0
65156: PPUSH
// if GetTaskList ( sci ) > 0 then
65157: LD_VAR 0 1
65161: PPUSH
65162: CALL_OW 437
65166: PUSH
65167: LD_INT 0
65169: GREATER
65170: IFFALSE 65240
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65172: LD_VAR 0 1
65176: PPUSH
65177: CALL_OW 437
65181: PUSH
65182: LD_INT 1
65184: ARRAY
65185: PUSH
65186: LD_INT 1
65188: ARRAY
65189: PUSH
65190: LD_STRING l
65192: EQUAL
65193: PUSH
65194: LD_VAR 0 1
65198: PPUSH
65199: CALL_OW 437
65203: PUSH
65204: LD_INT 1
65206: ARRAY
65207: PUSH
65208: LD_INT 4
65210: ARRAY
65211: PUSH
65212: LD_VAR 0 2
65216: EQUAL
65217: AND
65218: IFFALSE 65230
// result := true else
65220: LD_ADDR_VAR 0 3
65224: PUSH
65225: LD_INT 1
65227: ST_TO_ADDR
65228: GO 65238
// result := false ;
65230: LD_ADDR_VAR 0 3
65234: PUSH
65235: LD_INT 0
65237: ST_TO_ADDR
// end else
65238: GO 65248
// result := false ;
65240: LD_ADDR_VAR 0 3
65244: PUSH
65245: LD_INT 0
65247: ST_TO_ADDR
// end ;
65248: LD_VAR 0 3
65252: RET
// export function HealTarget ( sci ) ; begin
65253: LD_INT 0
65255: PPUSH
// if not sci then
65256: LD_VAR 0 1
65260: NOT
65261: IFFALSE 65265
// exit ;
65263: GO 65330
// result := 0 ;
65265: LD_ADDR_VAR 0 2
65269: PUSH
65270: LD_INT 0
65272: ST_TO_ADDR
// if GetTaskList ( sci ) then
65273: LD_VAR 0 1
65277: PPUSH
65278: CALL_OW 437
65282: IFFALSE 65330
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65284: LD_VAR 0 1
65288: PPUSH
65289: CALL_OW 437
65293: PUSH
65294: LD_INT 1
65296: ARRAY
65297: PUSH
65298: LD_INT 1
65300: ARRAY
65301: PUSH
65302: LD_STRING l
65304: EQUAL
65305: IFFALSE 65330
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65307: LD_ADDR_VAR 0 2
65311: PUSH
65312: LD_VAR 0 1
65316: PPUSH
65317: CALL_OW 437
65321: PUSH
65322: LD_INT 1
65324: ARRAY
65325: PUSH
65326: LD_INT 4
65328: ARRAY
65329: ST_TO_ADDR
// end ;
65330: LD_VAR 0 2
65334: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65335: LD_INT 0
65337: PPUSH
65338: PPUSH
65339: PPUSH
65340: PPUSH
// if not base_units then
65341: LD_VAR 0 1
65345: NOT
65346: IFFALSE 65350
// exit ;
65348: GO 65437
// result := false ;
65350: LD_ADDR_VAR 0 2
65354: PUSH
65355: LD_INT 0
65357: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65358: LD_ADDR_VAR 0 5
65362: PUSH
65363: LD_VAR 0 1
65367: PPUSH
65368: LD_INT 21
65370: PUSH
65371: LD_INT 3
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PPUSH
65378: CALL_OW 72
65382: ST_TO_ADDR
// if not tmp then
65383: LD_VAR 0 5
65387: NOT
65388: IFFALSE 65392
// exit ;
65390: GO 65437
// for i in tmp do
65392: LD_ADDR_VAR 0 3
65396: PUSH
65397: LD_VAR 0 5
65401: PUSH
65402: FOR_IN
65403: IFFALSE 65435
// begin result := EnemyInRange ( i , 22 ) ;
65405: LD_ADDR_VAR 0 2
65409: PUSH
65410: LD_VAR 0 3
65414: PPUSH
65415: LD_INT 22
65417: PPUSH
65418: CALL 63035 0 2
65422: ST_TO_ADDR
// if result then
65423: LD_VAR 0 2
65427: IFFALSE 65433
// exit ;
65429: POP
65430: POP
65431: GO 65437
// end ;
65433: GO 65402
65435: POP
65436: POP
// end ;
65437: LD_VAR 0 2
65441: RET
// export function FilterByTag ( units , tag ) ; begin
65442: LD_INT 0
65444: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65445: LD_ADDR_VAR 0 3
65449: PUSH
65450: LD_VAR 0 1
65454: PPUSH
65455: LD_INT 120
65457: PUSH
65458: LD_VAR 0 2
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PPUSH
65467: CALL_OW 72
65471: ST_TO_ADDR
// end ;
65472: LD_VAR 0 3
65476: RET
// export function IsDriver ( un ) ; begin
65477: LD_INT 0
65479: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65480: LD_ADDR_VAR 0 2
65484: PUSH
65485: LD_VAR 0 1
65489: PUSH
65490: LD_INT 55
65492: PUSH
65493: EMPTY
65494: LIST
65495: PPUSH
65496: CALL_OW 69
65500: IN
65501: ST_TO_ADDR
// end ;
65502: LD_VAR 0 2
65506: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65507: LD_INT 0
65509: PPUSH
65510: PPUSH
// list := [ ] ;
65511: LD_ADDR_VAR 0 5
65515: PUSH
65516: EMPTY
65517: ST_TO_ADDR
// case d of 0 :
65518: LD_VAR 0 3
65522: PUSH
65523: LD_INT 0
65525: DOUBLE
65526: EQUAL
65527: IFTRUE 65531
65529: GO 65664
65531: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65532: LD_ADDR_VAR 0 5
65536: PUSH
65537: LD_VAR 0 1
65541: PUSH
65542: LD_INT 4
65544: MINUS
65545: PUSH
65546: LD_VAR 0 2
65550: PUSH
65551: LD_INT 4
65553: MINUS
65554: PUSH
65555: LD_INT 2
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: LIST
65562: PUSH
65563: LD_VAR 0 1
65567: PUSH
65568: LD_INT 3
65570: MINUS
65571: PUSH
65572: LD_VAR 0 2
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: LIST
65584: PUSH
65585: LD_VAR 0 1
65589: PUSH
65590: LD_INT 4
65592: PLUS
65593: PUSH
65594: LD_VAR 0 2
65598: PUSH
65599: LD_INT 4
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: LIST
65606: PUSH
65607: LD_VAR 0 1
65611: PUSH
65612: LD_INT 3
65614: PLUS
65615: PUSH
65616: LD_VAR 0 2
65620: PUSH
65621: LD_INT 3
65623: PLUS
65624: PUSH
65625: LD_INT 5
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: LIST
65632: PUSH
65633: LD_VAR 0 1
65637: PUSH
65638: LD_VAR 0 2
65642: PUSH
65643: LD_INT 4
65645: PLUS
65646: PUSH
65647: LD_INT 0
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: LIST
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: ST_TO_ADDR
// end ; 1 :
65662: GO 66362
65664: LD_INT 1
65666: DOUBLE
65667: EQUAL
65668: IFTRUE 65672
65670: GO 65805
65672: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65673: LD_ADDR_VAR 0 5
65677: PUSH
65678: LD_VAR 0 1
65682: PUSH
65683: LD_VAR 0 2
65687: PUSH
65688: LD_INT 4
65690: MINUS
65691: PUSH
65692: LD_INT 3
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: LIST
65699: PUSH
65700: LD_VAR 0 1
65704: PUSH
65705: LD_INT 3
65707: MINUS
65708: PUSH
65709: LD_VAR 0 2
65713: PUSH
65714: LD_INT 3
65716: MINUS
65717: PUSH
65718: LD_INT 2
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: LIST
65725: PUSH
65726: LD_VAR 0 1
65730: PUSH
65731: LD_INT 4
65733: MINUS
65734: PUSH
65735: LD_VAR 0 2
65739: PUSH
65740: LD_INT 1
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: LIST
65747: PUSH
65748: LD_VAR 0 1
65752: PUSH
65753: LD_VAR 0 2
65757: PUSH
65758: LD_INT 3
65760: PLUS
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: LIST
65769: PUSH
65770: LD_VAR 0 1
65774: PUSH
65775: LD_INT 4
65777: PLUS
65778: PUSH
65779: LD_VAR 0 2
65783: PUSH
65784: LD_INT 4
65786: PLUS
65787: PUSH
65788: LD_INT 5
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: LIST
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: ST_TO_ADDR
// end ; 2 :
65803: GO 66362
65805: LD_INT 2
65807: DOUBLE
65808: EQUAL
65809: IFTRUE 65813
65811: GO 65942
65813: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65814: LD_ADDR_VAR 0 5
65818: PUSH
65819: LD_VAR 0 1
65823: PUSH
65824: LD_VAR 0 2
65828: PUSH
65829: LD_INT 3
65831: MINUS
65832: PUSH
65833: LD_INT 3
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: PUSH
65841: LD_VAR 0 1
65845: PUSH
65846: LD_INT 4
65848: PLUS
65849: PUSH
65850: LD_VAR 0 2
65854: PUSH
65855: LD_INT 4
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: LIST
65862: PUSH
65863: LD_VAR 0 1
65867: PUSH
65868: LD_VAR 0 2
65872: PUSH
65873: LD_INT 4
65875: PLUS
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: LIST
65884: PUSH
65885: LD_VAR 0 1
65889: PUSH
65890: LD_INT 3
65892: MINUS
65893: PUSH
65894: LD_VAR 0 2
65898: PUSH
65899: LD_INT 1
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: LIST
65906: PUSH
65907: LD_VAR 0 1
65911: PUSH
65912: LD_INT 4
65914: MINUS
65915: PUSH
65916: LD_VAR 0 2
65920: PUSH
65921: LD_INT 4
65923: MINUS
65924: PUSH
65925: LD_INT 2
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: LIST
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: ST_TO_ADDR
// end ; 3 :
65940: GO 66362
65942: LD_INT 3
65944: DOUBLE
65945: EQUAL
65946: IFTRUE 65950
65948: GO 66083
65950: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65951: LD_ADDR_VAR 0 5
65955: PUSH
65956: LD_VAR 0 1
65960: PUSH
65961: LD_INT 3
65963: PLUS
65964: PUSH
65965: LD_VAR 0 2
65969: PUSH
65970: LD_INT 4
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: LIST
65977: PUSH
65978: LD_VAR 0 1
65982: PUSH
65983: LD_INT 4
65985: PLUS
65986: PUSH
65987: LD_VAR 0 2
65991: PUSH
65992: LD_INT 4
65994: PLUS
65995: PUSH
65996: LD_INT 5
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: LIST
66003: PUSH
66004: LD_VAR 0 1
66008: PUSH
66009: LD_INT 4
66011: MINUS
66012: PUSH
66013: LD_VAR 0 2
66017: PUSH
66018: LD_INT 1
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: LIST
66025: PUSH
66026: LD_VAR 0 1
66030: PUSH
66031: LD_VAR 0 2
66035: PUSH
66036: LD_INT 4
66038: MINUS
66039: PUSH
66040: LD_INT 3
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: LIST
66047: PUSH
66048: LD_VAR 0 1
66052: PUSH
66053: LD_INT 3
66055: MINUS
66056: PUSH
66057: LD_VAR 0 2
66061: PUSH
66062: LD_INT 3
66064: MINUS
66065: PUSH
66066: LD_INT 2
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: LIST
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: ST_TO_ADDR
// end ; 4 :
66081: GO 66362
66083: LD_INT 4
66085: DOUBLE
66086: EQUAL
66087: IFTRUE 66091
66089: GO 66224
66091: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66092: LD_ADDR_VAR 0 5
66096: PUSH
66097: LD_VAR 0 1
66101: PUSH
66102: LD_VAR 0 2
66106: PUSH
66107: LD_INT 4
66109: PLUS
66110: PUSH
66111: LD_INT 0
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: LIST
66118: PUSH
66119: LD_VAR 0 1
66123: PUSH
66124: LD_INT 3
66126: PLUS
66127: PUSH
66128: LD_VAR 0 2
66132: PUSH
66133: LD_INT 3
66135: PLUS
66136: PUSH
66137: LD_INT 5
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: LIST
66144: PUSH
66145: LD_VAR 0 1
66149: PUSH
66150: LD_INT 4
66152: PLUS
66153: PUSH
66154: LD_VAR 0 2
66158: PUSH
66159: LD_INT 4
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: LIST
66166: PUSH
66167: LD_VAR 0 1
66171: PUSH
66172: LD_VAR 0 2
66176: PUSH
66177: LD_INT 3
66179: MINUS
66180: PUSH
66181: LD_INT 3
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: LIST
66188: PUSH
66189: LD_VAR 0 1
66193: PUSH
66194: LD_INT 4
66196: MINUS
66197: PUSH
66198: LD_VAR 0 2
66202: PUSH
66203: LD_INT 4
66205: MINUS
66206: PUSH
66207: LD_INT 2
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: LIST
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: ST_TO_ADDR
// end ; 5 :
66222: GO 66362
66224: LD_INT 5
66226: DOUBLE
66227: EQUAL
66228: IFTRUE 66232
66230: GO 66361
66232: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66233: LD_ADDR_VAR 0 5
66237: PUSH
66238: LD_VAR 0 1
66242: PUSH
66243: LD_INT 4
66245: MINUS
66246: PUSH
66247: LD_VAR 0 2
66251: PUSH
66252: LD_INT 1
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: LIST
66259: PUSH
66260: LD_VAR 0 1
66264: PUSH
66265: LD_VAR 0 2
66269: PUSH
66270: LD_INT 4
66272: MINUS
66273: PUSH
66274: LD_INT 3
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: LIST
66281: PUSH
66282: LD_VAR 0 1
66286: PUSH
66287: LD_INT 4
66289: PLUS
66290: PUSH
66291: LD_VAR 0 2
66295: PUSH
66296: LD_INT 4
66298: PLUS
66299: PUSH
66300: LD_INT 5
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: LIST
66307: PUSH
66308: LD_VAR 0 1
66312: PUSH
66313: LD_INT 3
66315: PLUS
66316: PUSH
66317: LD_VAR 0 2
66321: PUSH
66322: LD_INT 4
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: LIST
66329: PUSH
66330: LD_VAR 0 1
66334: PUSH
66335: LD_VAR 0 2
66339: PUSH
66340: LD_INT 3
66342: PLUS
66343: PUSH
66344: LD_INT 0
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: ST_TO_ADDR
// end ; end ;
66359: GO 66362
66361: POP
// result := list ;
66362: LD_ADDR_VAR 0 4
66366: PUSH
66367: LD_VAR 0 5
66371: ST_TO_ADDR
// end ;
66372: LD_VAR 0 4
66376: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66377: LD_INT 0
66379: PPUSH
66380: PPUSH
66381: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66382: LD_VAR 0 1
66386: NOT
66387: PUSH
66388: LD_VAR 0 2
66392: PUSH
66393: LD_INT 1
66395: PUSH
66396: LD_INT 2
66398: PUSH
66399: LD_INT 3
66401: PUSH
66402: LD_INT 4
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: IN
66411: NOT
66412: OR
66413: IFFALSE 66417
// exit ;
66415: GO 66500
// tmp := [ ] ;
66417: LD_ADDR_VAR 0 5
66421: PUSH
66422: EMPTY
66423: ST_TO_ADDR
// for i in units do
66424: LD_ADDR_VAR 0 4
66428: PUSH
66429: LD_VAR 0 1
66433: PUSH
66434: FOR_IN
66435: IFFALSE 66469
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66437: LD_ADDR_VAR 0 5
66441: PUSH
66442: LD_VAR 0 5
66446: PPUSH
66447: LD_VAR 0 4
66451: PPUSH
66452: LD_VAR 0 2
66456: PPUSH
66457: CALL_OW 259
66461: PPUSH
66462: CALL 67873 0 2
66466: ST_TO_ADDR
66467: GO 66434
66469: POP
66470: POP
// if not tmp then
66471: LD_VAR 0 5
66475: NOT
66476: IFFALSE 66480
// exit ;
66478: GO 66500
// result := SortListByListDesc ( units , tmp ) ;
66480: LD_ADDR_VAR 0 3
66484: PUSH
66485: LD_VAR 0 1
66489: PPUSH
66490: LD_VAR 0 5
66494: PPUSH
66495: CALL_OW 77
66499: ST_TO_ADDR
// end ;
66500: LD_VAR 0 3
66504: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66505: LD_INT 0
66507: PPUSH
66508: PPUSH
66509: PPUSH
// result := false ;
66510: LD_ADDR_VAR 0 3
66514: PUSH
66515: LD_INT 0
66517: ST_TO_ADDR
// if not building then
66518: LD_VAR 0 2
66522: NOT
66523: IFFALSE 66527
// exit ;
66525: GO 66665
// x := GetX ( building ) ;
66527: LD_ADDR_VAR 0 4
66531: PUSH
66532: LD_VAR 0 2
66536: PPUSH
66537: CALL_OW 250
66541: ST_TO_ADDR
// y := GetY ( building ) ;
66542: LD_ADDR_VAR 0 5
66546: PUSH
66547: LD_VAR 0 2
66551: PPUSH
66552: CALL_OW 251
66556: ST_TO_ADDR
// if not x or not y then
66557: LD_VAR 0 4
66561: NOT
66562: PUSH
66563: LD_VAR 0 5
66567: NOT
66568: OR
66569: IFFALSE 66573
// exit ;
66571: GO 66665
// if GetTaskList ( unit ) then
66573: LD_VAR 0 1
66577: PPUSH
66578: CALL_OW 437
66582: IFFALSE 66665
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66584: LD_STRING e
66586: PUSH
66587: LD_VAR 0 1
66591: PPUSH
66592: CALL_OW 437
66596: PUSH
66597: LD_INT 1
66599: ARRAY
66600: PUSH
66601: LD_INT 1
66603: ARRAY
66604: EQUAL
66605: PUSH
66606: LD_VAR 0 4
66610: PUSH
66611: LD_VAR 0 1
66615: PPUSH
66616: CALL_OW 437
66620: PUSH
66621: LD_INT 1
66623: ARRAY
66624: PUSH
66625: LD_INT 2
66627: ARRAY
66628: EQUAL
66629: AND
66630: PUSH
66631: LD_VAR 0 5
66635: PUSH
66636: LD_VAR 0 1
66640: PPUSH
66641: CALL_OW 437
66645: PUSH
66646: LD_INT 1
66648: ARRAY
66649: PUSH
66650: LD_INT 3
66652: ARRAY
66653: EQUAL
66654: AND
66655: IFFALSE 66665
// result := true end ;
66657: LD_ADDR_VAR 0 3
66661: PUSH
66662: LD_INT 1
66664: ST_TO_ADDR
// end ;
66665: LD_VAR 0 3
66669: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66670: LD_INT 0
66672: PPUSH
// result := false ;
66673: LD_ADDR_VAR 0 4
66677: PUSH
66678: LD_INT 0
66680: ST_TO_ADDR
// if GetTaskList ( unit ) then
66681: LD_VAR 0 1
66685: PPUSH
66686: CALL_OW 437
66690: IFFALSE 66773
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66692: LD_STRING M
66694: PUSH
66695: LD_VAR 0 1
66699: PPUSH
66700: CALL_OW 437
66704: PUSH
66705: LD_INT 1
66707: ARRAY
66708: PUSH
66709: LD_INT 1
66711: ARRAY
66712: EQUAL
66713: PUSH
66714: LD_VAR 0 2
66718: PUSH
66719: LD_VAR 0 1
66723: PPUSH
66724: CALL_OW 437
66728: PUSH
66729: LD_INT 1
66731: ARRAY
66732: PUSH
66733: LD_INT 2
66735: ARRAY
66736: EQUAL
66737: AND
66738: PUSH
66739: LD_VAR 0 3
66743: PUSH
66744: LD_VAR 0 1
66748: PPUSH
66749: CALL_OW 437
66753: PUSH
66754: LD_INT 1
66756: ARRAY
66757: PUSH
66758: LD_INT 3
66760: ARRAY
66761: EQUAL
66762: AND
66763: IFFALSE 66773
// result := true ;
66765: LD_ADDR_VAR 0 4
66769: PUSH
66770: LD_INT 1
66772: ST_TO_ADDR
// end ; end ;
66773: LD_VAR 0 4
66777: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66778: LD_INT 0
66780: PPUSH
66781: PPUSH
66782: PPUSH
66783: PPUSH
// if not unit or not area then
66784: LD_VAR 0 1
66788: NOT
66789: PUSH
66790: LD_VAR 0 2
66794: NOT
66795: OR
66796: IFFALSE 66800
// exit ;
66798: GO 66976
// tmp := AreaToList ( area , i ) ;
66800: LD_ADDR_VAR 0 6
66804: PUSH
66805: LD_VAR 0 2
66809: PPUSH
66810: LD_VAR 0 5
66814: PPUSH
66815: CALL_OW 517
66819: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66820: LD_ADDR_VAR 0 5
66824: PUSH
66825: DOUBLE
66826: LD_INT 1
66828: DEC
66829: ST_TO_ADDR
66830: LD_VAR 0 6
66834: PUSH
66835: LD_INT 1
66837: ARRAY
66838: PUSH
66839: FOR_TO
66840: IFFALSE 66974
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66842: LD_ADDR_VAR 0 7
66846: PUSH
66847: LD_VAR 0 6
66851: PUSH
66852: LD_INT 1
66854: ARRAY
66855: PUSH
66856: LD_VAR 0 5
66860: ARRAY
66861: PUSH
66862: LD_VAR 0 6
66866: PUSH
66867: LD_INT 2
66869: ARRAY
66870: PUSH
66871: LD_VAR 0 5
66875: ARRAY
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66881: LD_INT 92
66883: PUSH
66884: LD_VAR 0 7
66888: PUSH
66889: LD_INT 1
66891: ARRAY
66892: PUSH
66893: LD_VAR 0 7
66897: PUSH
66898: LD_INT 2
66900: ARRAY
66901: PUSH
66902: LD_INT 2
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: PPUSH
66911: CALL_OW 69
66915: PUSH
66916: LD_INT 0
66918: EQUAL
66919: IFFALSE 66972
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66921: LD_VAR 0 1
66925: PPUSH
66926: LD_VAR 0 7
66930: PUSH
66931: LD_INT 1
66933: ARRAY
66934: PPUSH
66935: LD_VAR 0 7
66939: PUSH
66940: LD_INT 2
66942: ARRAY
66943: PPUSH
66944: LD_VAR 0 3
66948: PPUSH
66949: CALL_OW 48
// result := IsPlaced ( unit ) ;
66953: LD_ADDR_VAR 0 4
66957: PUSH
66958: LD_VAR 0 1
66962: PPUSH
66963: CALL_OW 305
66967: ST_TO_ADDR
// exit ;
66968: POP
66969: POP
66970: GO 66976
// end ; end ;
66972: GO 66839
66974: POP
66975: POP
// end ;
66976: LD_VAR 0 4
66980: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66981: LD_INT 0
66983: PPUSH
66984: PPUSH
66985: PPUSH
// if not side or side > 8 then
66986: LD_VAR 0 1
66990: NOT
66991: PUSH
66992: LD_VAR 0 1
66996: PUSH
66997: LD_INT 8
66999: GREATER
67000: OR
67001: IFFALSE 67005
// exit ;
67003: GO 67192
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67005: LD_ADDR_VAR 0 4
67009: PUSH
67010: LD_INT 22
67012: PUSH
67013: LD_VAR 0 1
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 21
67024: PUSH
67025: LD_INT 3
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PPUSH
67036: CALL_OW 69
67040: ST_TO_ADDR
// if not tmp then
67041: LD_VAR 0 4
67045: NOT
67046: IFFALSE 67050
// exit ;
67048: GO 67192
// enable_addtolog := true ;
67050: LD_ADDR_OWVAR 81
67054: PUSH
67055: LD_INT 1
67057: ST_TO_ADDR
// AddToLog ( [ ) ;
67058: LD_STRING [
67060: PPUSH
67061: CALL_OW 561
// for i in tmp do
67065: LD_ADDR_VAR 0 3
67069: PUSH
67070: LD_VAR 0 4
67074: PUSH
67075: FOR_IN
67076: IFFALSE 67183
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67078: LD_STRING [
67080: PUSH
67081: LD_VAR 0 3
67085: PPUSH
67086: CALL_OW 266
67090: STR
67091: PUSH
67092: LD_STRING , 
67094: STR
67095: PUSH
67096: LD_VAR 0 3
67100: PPUSH
67101: CALL_OW 250
67105: STR
67106: PUSH
67107: LD_STRING , 
67109: STR
67110: PUSH
67111: LD_VAR 0 3
67115: PPUSH
67116: CALL_OW 251
67120: STR
67121: PUSH
67122: LD_STRING , 
67124: STR
67125: PUSH
67126: LD_VAR 0 3
67130: PPUSH
67131: CALL_OW 254
67135: STR
67136: PUSH
67137: LD_STRING , 
67139: STR
67140: PUSH
67141: LD_VAR 0 3
67145: PPUSH
67146: LD_INT 1
67148: PPUSH
67149: CALL_OW 268
67153: STR
67154: PUSH
67155: LD_STRING , 
67157: STR
67158: PUSH
67159: LD_VAR 0 3
67163: PPUSH
67164: LD_INT 2
67166: PPUSH
67167: CALL_OW 268
67171: STR
67172: PUSH
67173: LD_STRING ],
67175: STR
67176: PPUSH
67177: CALL_OW 561
// end ;
67181: GO 67075
67183: POP
67184: POP
// AddToLog ( ]; ) ;
67185: LD_STRING ];
67187: PPUSH
67188: CALL_OW 561
// end ;
67192: LD_VAR 0 2
67196: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67197: LD_INT 0
67199: PPUSH
67200: PPUSH
67201: PPUSH
67202: PPUSH
67203: PPUSH
// if not area or not rate or not max then
67204: LD_VAR 0 1
67208: NOT
67209: PUSH
67210: LD_VAR 0 2
67214: NOT
67215: OR
67216: PUSH
67217: LD_VAR 0 4
67221: NOT
67222: OR
67223: IFFALSE 67227
// exit ;
67225: GO 67416
// while 1 do
67227: LD_INT 1
67229: IFFALSE 67416
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67231: LD_ADDR_VAR 0 9
67235: PUSH
67236: LD_VAR 0 1
67240: PPUSH
67241: LD_INT 1
67243: PPUSH
67244: CALL_OW 287
67248: PUSH
67249: LD_INT 10
67251: MUL
67252: ST_TO_ADDR
// r := rate / 10 ;
67253: LD_ADDR_VAR 0 7
67257: PUSH
67258: LD_VAR 0 2
67262: PUSH
67263: LD_INT 10
67265: DIVREAL
67266: ST_TO_ADDR
// time := 1 1$00 ;
67267: LD_ADDR_VAR 0 8
67271: PUSH
67272: LD_INT 2100
67274: ST_TO_ADDR
// if amount < min then
67275: LD_VAR 0 9
67279: PUSH
67280: LD_VAR 0 3
67284: LESS
67285: IFFALSE 67303
// r := r * 2 else
67287: LD_ADDR_VAR 0 7
67291: PUSH
67292: LD_VAR 0 7
67296: PUSH
67297: LD_INT 2
67299: MUL
67300: ST_TO_ADDR
67301: GO 67329
// if amount > max then
67303: LD_VAR 0 9
67307: PUSH
67308: LD_VAR 0 4
67312: GREATER
67313: IFFALSE 67329
// r := r / 2 ;
67315: LD_ADDR_VAR 0 7
67319: PUSH
67320: LD_VAR 0 7
67324: PUSH
67325: LD_INT 2
67327: DIVREAL
67328: ST_TO_ADDR
// time := time / r ;
67329: LD_ADDR_VAR 0 8
67333: PUSH
67334: LD_VAR 0 8
67338: PUSH
67339: LD_VAR 0 7
67343: DIVREAL
67344: ST_TO_ADDR
// if time < 0 then
67345: LD_VAR 0 8
67349: PUSH
67350: LD_INT 0
67352: LESS
67353: IFFALSE 67370
// time := time * - 1 ;
67355: LD_ADDR_VAR 0 8
67359: PUSH
67360: LD_VAR 0 8
67364: PUSH
67365: LD_INT 1
67367: NEG
67368: MUL
67369: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67370: LD_VAR 0 8
67374: PUSH
67375: LD_INT 35
67377: PPUSH
67378: LD_INT 875
67380: PPUSH
67381: CALL_OW 12
67385: PLUS
67386: PPUSH
67387: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67391: LD_INT 1
67393: PPUSH
67394: LD_INT 5
67396: PPUSH
67397: CALL_OW 12
67401: PPUSH
67402: LD_VAR 0 1
67406: PPUSH
67407: LD_INT 1
67409: PPUSH
67410: CALL_OW 55
// end ;
67414: GO 67227
// end ;
67416: LD_VAR 0 5
67420: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67421: LD_INT 0
67423: PPUSH
67424: PPUSH
67425: PPUSH
67426: PPUSH
67427: PPUSH
67428: PPUSH
67429: PPUSH
67430: PPUSH
// if not turrets or not factories then
67431: LD_VAR 0 1
67435: NOT
67436: PUSH
67437: LD_VAR 0 2
67441: NOT
67442: OR
67443: IFFALSE 67447
// exit ;
67445: GO 67754
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67447: LD_ADDR_VAR 0 10
67451: PUSH
67452: LD_INT 5
67454: PUSH
67455: LD_INT 6
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 2
67464: PUSH
67465: LD_INT 4
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 3
67474: PUSH
67475: LD_INT 5
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 24
67489: PUSH
67490: LD_INT 25
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 23
67499: PUSH
67500: LD_INT 27
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 42
67513: PUSH
67514: LD_INT 43
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 44
67523: PUSH
67524: LD_INT 46
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 45
67533: PUSH
67534: LD_INT 47
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: LIST
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: LIST
67550: ST_TO_ADDR
// result := [ ] ;
67551: LD_ADDR_VAR 0 3
67555: PUSH
67556: EMPTY
67557: ST_TO_ADDR
// for i in turrets do
67558: LD_ADDR_VAR 0 4
67562: PUSH
67563: LD_VAR 0 1
67567: PUSH
67568: FOR_IN
67569: IFFALSE 67752
// begin nat := GetNation ( i ) ;
67571: LD_ADDR_VAR 0 7
67575: PUSH
67576: LD_VAR 0 4
67580: PPUSH
67581: CALL_OW 248
67585: ST_TO_ADDR
// weapon := 0 ;
67586: LD_ADDR_VAR 0 8
67590: PUSH
67591: LD_INT 0
67593: ST_TO_ADDR
// if not nat then
67594: LD_VAR 0 7
67598: NOT
67599: IFFALSE 67603
// continue ;
67601: GO 67568
// for j in list [ nat ] do
67603: LD_ADDR_VAR 0 5
67607: PUSH
67608: LD_VAR 0 10
67612: PUSH
67613: LD_VAR 0 7
67617: ARRAY
67618: PUSH
67619: FOR_IN
67620: IFFALSE 67661
// if GetBWeapon ( i ) = j [ 1 ] then
67622: LD_VAR 0 4
67626: PPUSH
67627: CALL_OW 269
67631: PUSH
67632: LD_VAR 0 5
67636: PUSH
67637: LD_INT 1
67639: ARRAY
67640: EQUAL
67641: IFFALSE 67659
// begin weapon := j [ 2 ] ;
67643: LD_ADDR_VAR 0 8
67647: PUSH
67648: LD_VAR 0 5
67652: PUSH
67653: LD_INT 2
67655: ARRAY
67656: ST_TO_ADDR
// break ;
67657: GO 67661
// end ;
67659: GO 67619
67661: POP
67662: POP
// if not weapon then
67663: LD_VAR 0 8
67667: NOT
67668: IFFALSE 67672
// continue ;
67670: GO 67568
// for k in factories do
67672: LD_ADDR_VAR 0 6
67676: PUSH
67677: LD_VAR 0 2
67681: PUSH
67682: FOR_IN
67683: IFFALSE 67748
// begin weapons := AvailableWeaponList ( k ) ;
67685: LD_ADDR_VAR 0 9
67689: PUSH
67690: LD_VAR 0 6
67694: PPUSH
67695: CALL_OW 478
67699: ST_TO_ADDR
// if not weapons then
67700: LD_VAR 0 9
67704: NOT
67705: IFFALSE 67709
// continue ;
67707: GO 67682
// if weapon in weapons then
67709: LD_VAR 0 8
67713: PUSH
67714: LD_VAR 0 9
67718: IN
67719: IFFALSE 67746
// begin result := [ i , weapon ] ;
67721: LD_ADDR_VAR 0 3
67725: PUSH
67726: LD_VAR 0 4
67730: PUSH
67731: LD_VAR 0 8
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: ST_TO_ADDR
// exit ;
67740: POP
67741: POP
67742: POP
67743: POP
67744: GO 67754
// end ; end ;
67746: GO 67682
67748: POP
67749: POP
// end ;
67750: GO 67568
67752: POP
67753: POP
// end ;
67754: LD_VAR 0 3
67758: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67759: LD_INT 0
67761: PPUSH
// if not side or side > 8 then
67762: LD_VAR 0 3
67766: NOT
67767: PUSH
67768: LD_VAR 0 3
67772: PUSH
67773: LD_INT 8
67775: GREATER
67776: OR
67777: IFFALSE 67781
// exit ;
67779: GO 67840
// if not range then
67781: LD_VAR 0 4
67785: NOT
67786: IFFALSE 67797
// range := - 12 ;
67788: LD_ADDR_VAR 0 4
67792: PUSH
67793: LD_INT 12
67795: NEG
67796: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67797: LD_VAR 0 1
67801: PPUSH
67802: LD_VAR 0 2
67806: PPUSH
67807: LD_VAR 0 3
67811: PPUSH
67812: LD_VAR 0 4
67816: PPUSH
67817: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67821: LD_VAR 0 1
67825: PPUSH
67826: LD_VAR 0 2
67830: PPUSH
67831: LD_VAR 0 3
67835: PPUSH
67836: CALL_OW 331
// end ;
67840: LD_VAR 0 5
67844: RET
// export function Video ( mode ) ; begin
67845: LD_INT 0
67847: PPUSH
// ingame_video = mode ;
67848: LD_ADDR_OWVAR 52
67852: PUSH
67853: LD_VAR 0 1
67857: ST_TO_ADDR
// interface_hidden = mode ;
67858: LD_ADDR_OWVAR 54
67862: PUSH
67863: LD_VAR 0 1
67867: ST_TO_ADDR
// end ;
67868: LD_VAR 0 2
67872: RET
// export function Join ( array , element ) ; begin
67873: LD_INT 0
67875: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67876: LD_ADDR_VAR 0 3
67880: PUSH
67881: LD_VAR 0 1
67885: PPUSH
67886: LD_VAR 0 1
67890: PUSH
67891: LD_INT 1
67893: PLUS
67894: PPUSH
67895: LD_VAR 0 2
67899: PPUSH
67900: CALL_OW 1
67904: ST_TO_ADDR
// end ;
67905: LD_VAR 0 3
67909: RET
// export function JoinUnion ( array , element ) ; begin
67910: LD_INT 0
67912: PPUSH
// result := array union element ;
67913: LD_ADDR_VAR 0 3
67917: PUSH
67918: LD_VAR 0 1
67922: PUSH
67923: LD_VAR 0 2
67927: UNION
67928: ST_TO_ADDR
// end ;
67929: LD_VAR 0 3
67933: RET
// export function GetBehemoths ( side ) ; begin
67934: LD_INT 0
67936: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67937: LD_ADDR_VAR 0 2
67941: PUSH
67942: LD_INT 22
67944: PUSH
67945: LD_VAR 0 1
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 31
67956: PUSH
67957: LD_INT 25
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PPUSH
67968: CALL_OW 69
67972: ST_TO_ADDR
// end ;
67973: LD_VAR 0 2
67977: RET
// export function Shuffle ( array ) ; var i , index ; begin
67978: LD_INT 0
67980: PPUSH
67981: PPUSH
67982: PPUSH
// result := [ ] ;
67983: LD_ADDR_VAR 0 2
67987: PUSH
67988: EMPTY
67989: ST_TO_ADDR
// if not array then
67990: LD_VAR 0 1
67994: NOT
67995: IFFALSE 67999
// exit ;
67997: GO 68098
// Randomize ;
67999: CALL_OW 10
// for i = array downto 1 do
68003: LD_ADDR_VAR 0 3
68007: PUSH
68008: DOUBLE
68009: LD_VAR 0 1
68013: INC
68014: ST_TO_ADDR
68015: LD_INT 1
68017: PUSH
68018: FOR_DOWNTO
68019: IFFALSE 68096
// begin index := rand ( 1 , array ) ;
68021: LD_ADDR_VAR 0 4
68025: PUSH
68026: LD_INT 1
68028: PPUSH
68029: LD_VAR 0 1
68033: PPUSH
68034: CALL_OW 12
68038: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68039: LD_ADDR_VAR 0 2
68043: PUSH
68044: LD_VAR 0 2
68048: PPUSH
68049: LD_VAR 0 2
68053: PUSH
68054: LD_INT 1
68056: PLUS
68057: PPUSH
68058: LD_VAR 0 1
68062: PUSH
68063: LD_VAR 0 4
68067: ARRAY
68068: PPUSH
68069: CALL_OW 2
68073: ST_TO_ADDR
// array := Delete ( array , index ) ;
68074: LD_ADDR_VAR 0 1
68078: PUSH
68079: LD_VAR 0 1
68083: PPUSH
68084: LD_VAR 0 4
68088: PPUSH
68089: CALL_OW 3
68093: ST_TO_ADDR
// end ;
68094: GO 68018
68096: POP
68097: POP
// end ;
68098: LD_VAR 0 2
68102: RET
// export function GetBaseMaterials ( base ) ; begin
68103: LD_INT 0
68105: PPUSH
// result := [ 0 , 0 , 0 ] ;
68106: LD_ADDR_VAR 0 2
68110: PUSH
68111: LD_INT 0
68113: PUSH
68114: LD_INT 0
68116: PUSH
68117: LD_INT 0
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: LIST
68124: ST_TO_ADDR
// if not base then
68125: LD_VAR 0 1
68129: NOT
68130: IFFALSE 68134
// exit ;
68132: GO 68183
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68134: LD_ADDR_VAR 0 2
68138: PUSH
68139: LD_VAR 0 1
68143: PPUSH
68144: LD_INT 1
68146: PPUSH
68147: CALL_OW 275
68151: PUSH
68152: LD_VAR 0 1
68156: PPUSH
68157: LD_INT 2
68159: PPUSH
68160: CALL_OW 275
68164: PUSH
68165: LD_VAR 0 1
68169: PPUSH
68170: LD_INT 3
68172: PPUSH
68173: CALL_OW 275
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: LIST
68182: ST_TO_ADDR
// end ;
68183: LD_VAR 0 2
68187: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68188: LD_INT 0
68190: PPUSH
68191: PPUSH
// result := array ;
68192: LD_ADDR_VAR 0 3
68196: PUSH
68197: LD_VAR 0 1
68201: ST_TO_ADDR
// if size >= result then
68202: LD_VAR 0 2
68206: PUSH
68207: LD_VAR 0 3
68211: GREATEREQUAL
68212: IFFALSE 68216
// exit ;
68214: GO 68266
// if size then
68216: LD_VAR 0 2
68220: IFFALSE 68266
// for i := array downto size do
68222: LD_ADDR_VAR 0 4
68226: PUSH
68227: DOUBLE
68228: LD_VAR 0 1
68232: INC
68233: ST_TO_ADDR
68234: LD_VAR 0 2
68238: PUSH
68239: FOR_DOWNTO
68240: IFFALSE 68264
// result := Delete ( result , result ) ;
68242: LD_ADDR_VAR 0 3
68246: PUSH
68247: LD_VAR 0 3
68251: PPUSH
68252: LD_VAR 0 3
68256: PPUSH
68257: CALL_OW 3
68261: ST_TO_ADDR
68262: GO 68239
68264: POP
68265: POP
// end ;
68266: LD_VAR 0 3
68270: RET
// export function ComExit ( unit ) ; var tmp ; begin
68271: LD_INT 0
68273: PPUSH
68274: PPUSH
// if not IsInUnit ( unit ) then
68275: LD_VAR 0 1
68279: PPUSH
68280: CALL_OW 310
68284: NOT
68285: IFFALSE 68289
// exit ;
68287: GO 68349
// tmp := IsInUnit ( unit ) ;
68289: LD_ADDR_VAR 0 3
68293: PUSH
68294: LD_VAR 0 1
68298: PPUSH
68299: CALL_OW 310
68303: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68304: LD_VAR 0 3
68308: PPUSH
68309: CALL_OW 247
68313: PUSH
68314: LD_INT 2
68316: EQUAL
68317: IFFALSE 68330
// ComExitVehicle ( unit ) else
68319: LD_VAR 0 1
68323: PPUSH
68324: CALL_OW 121
68328: GO 68339
// ComExitBuilding ( unit ) ;
68330: LD_VAR 0 1
68334: PPUSH
68335: CALL_OW 122
// result := tmp ;
68339: LD_ADDR_VAR 0 2
68343: PUSH
68344: LD_VAR 0 3
68348: ST_TO_ADDR
// end ;
68349: LD_VAR 0 2
68353: RET
// export function ComExitAll ( units ) ; var i ; begin
68354: LD_INT 0
68356: PPUSH
68357: PPUSH
// if not units then
68358: LD_VAR 0 1
68362: NOT
68363: IFFALSE 68367
// exit ;
68365: GO 68393
// for i in units do
68367: LD_ADDR_VAR 0 3
68371: PUSH
68372: LD_VAR 0 1
68376: PUSH
68377: FOR_IN
68378: IFFALSE 68391
// ComExit ( i ) ;
68380: LD_VAR 0 3
68384: PPUSH
68385: CALL 68271 0 1
68389: GO 68377
68391: POP
68392: POP
// end ;
68393: LD_VAR 0 2
68397: RET
// export function ResetHc ; begin
68398: LD_INT 0
68400: PPUSH
// InitHc ;
68401: CALL_OW 19
// hc_importance := 0 ;
68405: LD_ADDR_OWVAR 32
68409: PUSH
68410: LD_INT 0
68412: ST_TO_ADDR
// end ;
68413: LD_VAR 0 1
68417: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68418: LD_INT 0
68420: PPUSH
68421: PPUSH
68422: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68423: LD_ADDR_VAR 0 6
68427: PUSH
68428: LD_VAR 0 1
68432: PUSH
68433: LD_VAR 0 3
68437: PLUS
68438: PUSH
68439: LD_INT 2
68441: DIV
68442: ST_TO_ADDR
// if _x < 0 then
68443: LD_VAR 0 6
68447: PUSH
68448: LD_INT 0
68450: LESS
68451: IFFALSE 68468
// _x := _x * - 1 ;
68453: LD_ADDR_VAR 0 6
68457: PUSH
68458: LD_VAR 0 6
68462: PUSH
68463: LD_INT 1
68465: NEG
68466: MUL
68467: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68468: LD_ADDR_VAR 0 7
68472: PUSH
68473: LD_VAR 0 2
68477: PUSH
68478: LD_VAR 0 4
68482: PLUS
68483: PUSH
68484: LD_INT 2
68486: DIV
68487: ST_TO_ADDR
// if _y < 0 then
68488: LD_VAR 0 7
68492: PUSH
68493: LD_INT 0
68495: LESS
68496: IFFALSE 68513
// _y := _y * - 1 ;
68498: LD_ADDR_VAR 0 7
68502: PUSH
68503: LD_VAR 0 7
68507: PUSH
68508: LD_INT 1
68510: NEG
68511: MUL
68512: ST_TO_ADDR
// result := [ _x , _y ] ;
68513: LD_ADDR_VAR 0 5
68517: PUSH
68518: LD_VAR 0 6
68522: PUSH
68523: LD_VAR 0 7
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: ST_TO_ADDR
// end ;
68532: LD_VAR 0 5
68536: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68537: LD_INT 0
68539: PPUSH
68540: PPUSH
68541: PPUSH
68542: PPUSH
// task := GetTaskList ( unit ) ;
68543: LD_ADDR_VAR 0 7
68547: PUSH
68548: LD_VAR 0 1
68552: PPUSH
68553: CALL_OW 437
68557: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68558: LD_VAR 0 7
68562: NOT
68563: PUSH
68564: LD_VAR 0 1
68568: PPUSH
68569: LD_VAR 0 2
68573: PPUSH
68574: CALL_OW 308
68578: NOT
68579: AND
68580: IFFALSE 68584
// exit ;
68582: GO 68702
// if IsInArea ( unit , area ) then
68584: LD_VAR 0 1
68588: PPUSH
68589: LD_VAR 0 2
68593: PPUSH
68594: CALL_OW 308
68598: IFFALSE 68616
// begin ComMoveToArea ( unit , goAway ) ;
68600: LD_VAR 0 1
68604: PPUSH
68605: LD_VAR 0 3
68609: PPUSH
68610: CALL_OW 113
// exit ;
68614: GO 68702
// end ; if task [ 1 ] [ 1 ] <> M then
68616: LD_VAR 0 7
68620: PUSH
68621: LD_INT 1
68623: ARRAY
68624: PUSH
68625: LD_INT 1
68627: ARRAY
68628: PUSH
68629: LD_STRING M
68631: NONEQUAL
68632: IFFALSE 68636
// exit ;
68634: GO 68702
// x := task [ 1 ] [ 2 ] ;
68636: LD_ADDR_VAR 0 5
68640: PUSH
68641: LD_VAR 0 7
68645: PUSH
68646: LD_INT 1
68648: ARRAY
68649: PUSH
68650: LD_INT 2
68652: ARRAY
68653: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68654: LD_ADDR_VAR 0 6
68658: PUSH
68659: LD_VAR 0 7
68663: PUSH
68664: LD_INT 1
68666: ARRAY
68667: PUSH
68668: LD_INT 3
68670: ARRAY
68671: ST_TO_ADDR
// if InArea ( x , y , area ) then
68672: LD_VAR 0 5
68676: PPUSH
68677: LD_VAR 0 6
68681: PPUSH
68682: LD_VAR 0 2
68686: PPUSH
68687: CALL_OW 309
68691: IFFALSE 68702
// ComStop ( unit ) ;
68693: LD_VAR 0 1
68697: PPUSH
68698: CALL_OW 141
// end ;
68702: LD_VAR 0 4
68706: RET
// export function Abs ( value ) ; begin
68707: LD_INT 0
68709: PPUSH
// result := value ;
68710: LD_ADDR_VAR 0 2
68714: PUSH
68715: LD_VAR 0 1
68719: ST_TO_ADDR
// if value < 0 then
68720: LD_VAR 0 1
68724: PUSH
68725: LD_INT 0
68727: LESS
68728: IFFALSE 68745
// result := value * - 1 ;
68730: LD_ADDR_VAR 0 2
68734: PUSH
68735: LD_VAR 0 1
68739: PUSH
68740: LD_INT 1
68742: NEG
68743: MUL
68744: ST_TO_ADDR
// end ;
68745: LD_VAR 0 2
68749: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68750: LD_INT 0
68752: PPUSH
68753: PPUSH
68754: PPUSH
68755: PPUSH
68756: PPUSH
68757: PPUSH
68758: PPUSH
68759: PPUSH
// if not unit or not building then
68760: LD_VAR 0 1
68764: NOT
68765: PUSH
68766: LD_VAR 0 2
68770: NOT
68771: OR
68772: IFFALSE 68776
// exit ;
68774: GO 69002
// x := GetX ( building ) ;
68776: LD_ADDR_VAR 0 4
68780: PUSH
68781: LD_VAR 0 2
68785: PPUSH
68786: CALL_OW 250
68790: ST_TO_ADDR
// y := GetY ( building ) ;
68791: LD_ADDR_VAR 0 6
68795: PUSH
68796: LD_VAR 0 2
68800: PPUSH
68801: CALL_OW 251
68805: ST_TO_ADDR
// d := GetDir ( building ) ;
68806: LD_ADDR_VAR 0 8
68810: PUSH
68811: LD_VAR 0 2
68815: PPUSH
68816: CALL_OW 254
68820: ST_TO_ADDR
// r := 4 ;
68821: LD_ADDR_VAR 0 9
68825: PUSH
68826: LD_INT 4
68828: ST_TO_ADDR
// for i := 1 to 5 do
68829: LD_ADDR_VAR 0 10
68833: PUSH
68834: DOUBLE
68835: LD_INT 1
68837: DEC
68838: ST_TO_ADDR
68839: LD_INT 5
68841: PUSH
68842: FOR_TO
68843: IFFALSE 69000
// begin _x := ShiftX ( x , d , r + i ) ;
68845: LD_ADDR_VAR 0 5
68849: PUSH
68850: LD_VAR 0 4
68854: PPUSH
68855: LD_VAR 0 8
68859: PPUSH
68860: LD_VAR 0 9
68864: PUSH
68865: LD_VAR 0 10
68869: PLUS
68870: PPUSH
68871: CALL_OW 272
68875: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68876: LD_ADDR_VAR 0 7
68880: PUSH
68881: LD_VAR 0 6
68885: PPUSH
68886: LD_VAR 0 8
68890: PPUSH
68891: LD_VAR 0 9
68895: PUSH
68896: LD_VAR 0 10
68900: PLUS
68901: PPUSH
68902: CALL_OW 273
68906: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68907: LD_VAR 0 5
68911: PPUSH
68912: LD_VAR 0 7
68916: PPUSH
68917: CALL_OW 488
68921: PUSH
68922: LD_VAR 0 5
68926: PPUSH
68927: LD_VAR 0 7
68931: PPUSH
68932: CALL_OW 428
68936: PPUSH
68937: CALL_OW 247
68941: PUSH
68942: LD_INT 3
68944: PUSH
68945: LD_INT 2
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: IN
68952: NOT
68953: AND
68954: IFFALSE 68998
// begin ComMoveXY ( unit , _x , _y ) ;
68956: LD_VAR 0 1
68960: PPUSH
68961: LD_VAR 0 5
68965: PPUSH
68966: LD_VAR 0 7
68970: PPUSH
68971: CALL_OW 111
// result := [ _x , _y ] ;
68975: LD_ADDR_VAR 0 3
68979: PUSH
68980: LD_VAR 0 5
68984: PUSH
68985: LD_VAR 0 7
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: ST_TO_ADDR
// exit ;
68994: POP
68995: POP
68996: GO 69002
// end ; end ;
68998: GO 68842
69000: POP
69001: POP
// end ;
69002: LD_VAR 0 3
69006: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69007: LD_INT 0
69009: PPUSH
69010: PPUSH
69011: PPUSH
// result := 0 ;
69012: LD_ADDR_VAR 0 3
69016: PUSH
69017: LD_INT 0
69019: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69020: LD_VAR 0 1
69024: PUSH
69025: LD_INT 0
69027: LESS
69028: PUSH
69029: LD_VAR 0 1
69033: PUSH
69034: LD_INT 8
69036: GREATER
69037: OR
69038: PUSH
69039: LD_VAR 0 2
69043: PUSH
69044: LD_INT 0
69046: LESS
69047: OR
69048: PUSH
69049: LD_VAR 0 2
69053: PUSH
69054: LD_INT 8
69056: GREATER
69057: OR
69058: IFFALSE 69062
// exit ;
69060: GO 69137
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69062: LD_ADDR_VAR 0 4
69066: PUSH
69067: LD_INT 22
69069: PUSH
69070: LD_VAR 0 2
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PPUSH
69079: CALL_OW 69
69083: PUSH
69084: FOR_IN
69085: IFFALSE 69135
// begin un := UnitShoot ( i ) ;
69087: LD_ADDR_VAR 0 5
69091: PUSH
69092: LD_VAR 0 4
69096: PPUSH
69097: CALL_OW 504
69101: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69102: LD_VAR 0 5
69106: PPUSH
69107: CALL_OW 255
69111: PUSH
69112: LD_VAR 0 1
69116: EQUAL
69117: IFFALSE 69133
// begin result := un ;
69119: LD_ADDR_VAR 0 3
69123: PUSH
69124: LD_VAR 0 5
69128: ST_TO_ADDR
// exit ;
69129: POP
69130: POP
69131: GO 69137
// end ; end ;
69133: GO 69084
69135: POP
69136: POP
// end ;
69137: LD_VAR 0 3
69141: RET
// export function GetCargoBay ( units ) ; begin
69142: LD_INT 0
69144: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69145: LD_ADDR_VAR 0 2
69149: PUSH
69150: LD_VAR 0 1
69154: PPUSH
69155: LD_INT 2
69157: PUSH
69158: LD_INT 34
69160: PUSH
69161: LD_INT 12
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 34
69170: PUSH
69171: LD_INT 51
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 34
69180: PUSH
69181: LD_INT 32
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 34
69190: PUSH
69191: LD_INT 89
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: PPUSH
69205: CALL_OW 72
69209: ST_TO_ADDR
// end ;
69210: LD_VAR 0 2
69214: RET
// export function Negate ( value ) ; begin
69215: LD_INT 0
69217: PPUSH
// result := not value ;
69218: LD_ADDR_VAR 0 2
69222: PUSH
69223: LD_VAR 0 1
69227: NOT
69228: ST_TO_ADDR
// end ;
69229: LD_VAR 0 2
69233: RET
// export function Inc ( value ) ; begin
69234: LD_INT 0
69236: PPUSH
// result := value + 1 ;
69237: LD_ADDR_VAR 0 2
69241: PUSH
69242: LD_VAR 0 1
69246: PUSH
69247: LD_INT 1
69249: PLUS
69250: ST_TO_ADDR
// end ;
69251: LD_VAR 0 2
69255: RET
// export function Dec ( value ) ; begin
69256: LD_INT 0
69258: PPUSH
// result := value - 1 ;
69259: LD_ADDR_VAR 0 2
69263: PUSH
69264: LD_VAR 0 1
69268: PUSH
69269: LD_INT 1
69271: MINUS
69272: ST_TO_ADDR
// end ;
69273: LD_VAR 0 2
69277: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69278: LD_INT 0
69280: PPUSH
69281: PPUSH
69282: PPUSH
69283: PPUSH
69284: PPUSH
69285: PPUSH
69286: PPUSH
69287: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69288: LD_VAR 0 1
69292: PPUSH
69293: LD_VAR 0 2
69297: PPUSH
69298: CALL_OW 488
69302: NOT
69303: PUSH
69304: LD_VAR 0 3
69308: PPUSH
69309: LD_VAR 0 4
69313: PPUSH
69314: CALL_OW 488
69318: NOT
69319: OR
69320: IFFALSE 69333
// begin result := - 1 ;
69322: LD_ADDR_VAR 0 5
69326: PUSH
69327: LD_INT 1
69329: NEG
69330: ST_TO_ADDR
// exit ;
69331: GO 69568
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69333: LD_ADDR_VAR 0 12
69337: PUSH
69338: LD_VAR 0 1
69342: PPUSH
69343: LD_VAR 0 2
69347: PPUSH
69348: LD_VAR 0 3
69352: PPUSH
69353: LD_VAR 0 4
69357: PPUSH
69358: CALL 68418 0 4
69362: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69363: LD_ADDR_VAR 0 11
69367: PUSH
69368: LD_VAR 0 1
69372: PPUSH
69373: LD_VAR 0 2
69377: PPUSH
69378: LD_VAR 0 12
69382: PUSH
69383: LD_INT 1
69385: ARRAY
69386: PPUSH
69387: LD_VAR 0 12
69391: PUSH
69392: LD_INT 2
69394: ARRAY
69395: PPUSH
69396: CALL_OW 298
69400: ST_TO_ADDR
// distance := 9999 ;
69401: LD_ADDR_VAR 0 10
69405: PUSH
69406: LD_INT 9999
69408: ST_TO_ADDR
// for i := 0 to 5 do
69409: LD_ADDR_VAR 0 6
69413: PUSH
69414: DOUBLE
69415: LD_INT 0
69417: DEC
69418: ST_TO_ADDR
69419: LD_INT 5
69421: PUSH
69422: FOR_TO
69423: IFFALSE 69566
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69425: LD_ADDR_VAR 0 7
69429: PUSH
69430: LD_VAR 0 1
69434: PPUSH
69435: LD_VAR 0 6
69439: PPUSH
69440: LD_VAR 0 11
69444: PPUSH
69445: CALL_OW 272
69449: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69450: LD_ADDR_VAR 0 8
69454: PUSH
69455: LD_VAR 0 2
69459: PPUSH
69460: LD_VAR 0 6
69464: PPUSH
69465: LD_VAR 0 11
69469: PPUSH
69470: CALL_OW 273
69474: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69475: LD_VAR 0 7
69479: PPUSH
69480: LD_VAR 0 8
69484: PPUSH
69485: CALL_OW 488
69489: NOT
69490: IFFALSE 69494
// continue ;
69492: GO 69422
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69494: LD_ADDR_VAR 0 9
69498: PUSH
69499: LD_VAR 0 12
69503: PUSH
69504: LD_INT 1
69506: ARRAY
69507: PPUSH
69508: LD_VAR 0 12
69512: PUSH
69513: LD_INT 2
69515: ARRAY
69516: PPUSH
69517: LD_VAR 0 7
69521: PPUSH
69522: LD_VAR 0 8
69526: PPUSH
69527: CALL_OW 298
69531: ST_TO_ADDR
// if tmp < distance then
69532: LD_VAR 0 9
69536: PUSH
69537: LD_VAR 0 10
69541: LESS
69542: IFFALSE 69564
// begin result := i ;
69544: LD_ADDR_VAR 0 5
69548: PUSH
69549: LD_VAR 0 6
69553: ST_TO_ADDR
// distance := tmp ;
69554: LD_ADDR_VAR 0 10
69558: PUSH
69559: LD_VAR 0 9
69563: ST_TO_ADDR
// end ; end ;
69564: GO 69422
69566: POP
69567: POP
// end ;
69568: LD_VAR 0 5
69572: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69573: LD_INT 0
69575: PPUSH
69576: PPUSH
// if not driver or not IsInUnit ( driver ) then
69577: LD_VAR 0 1
69581: NOT
69582: PUSH
69583: LD_VAR 0 1
69587: PPUSH
69588: CALL_OW 310
69592: NOT
69593: OR
69594: IFFALSE 69598
// exit ;
69596: GO 69688
// vehicle := IsInUnit ( driver ) ;
69598: LD_ADDR_VAR 0 3
69602: PUSH
69603: LD_VAR 0 1
69607: PPUSH
69608: CALL_OW 310
69612: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69613: LD_VAR 0 1
69617: PPUSH
69618: LD_STRING \
69620: PUSH
69621: LD_INT 0
69623: PUSH
69624: LD_INT 0
69626: PUSH
69627: LD_INT 0
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: LD_INT 0
69635: PUSH
69636: LD_INT 0
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: PUSH
69648: LD_STRING E
69650: PUSH
69651: LD_INT 0
69653: PUSH
69654: LD_INT 0
69656: PUSH
69657: LD_VAR 0 3
69661: PUSH
69662: LD_INT 0
69664: PUSH
69665: LD_INT 0
69667: PUSH
69668: LD_INT 0
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PPUSH
69684: CALL_OW 446
// end ;
69688: LD_VAR 0 2
69692: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69693: LD_INT 0
69695: PPUSH
69696: PPUSH
// if not driver or not IsInUnit ( driver ) then
69697: LD_VAR 0 1
69701: NOT
69702: PUSH
69703: LD_VAR 0 1
69707: PPUSH
69708: CALL_OW 310
69712: NOT
69713: OR
69714: IFFALSE 69718
// exit ;
69716: GO 69808
// vehicle := IsInUnit ( driver ) ;
69718: LD_ADDR_VAR 0 3
69722: PUSH
69723: LD_VAR 0 1
69727: PPUSH
69728: CALL_OW 310
69732: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69733: LD_VAR 0 1
69737: PPUSH
69738: LD_STRING \
69740: PUSH
69741: LD_INT 0
69743: PUSH
69744: LD_INT 0
69746: PUSH
69747: LD_INT 0
69749: PUSH
69750: LD_INT 0
69752: PUSH
69753: LD_INT 0
69755: PUSH
69756: LD_INT 0
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: PUSH
69768: LD_STRING E
69770: PUSH
69771: LD_INT 0
69773: PUSH
69774: LD_INT 0
69776: PUSH
69777: LD_VAR 0 3
69781: PUSH
69782: LD_INT 0
69784: PUSH
69785: LD_INT 0
69787: PUSH
69788: LD_INT 0
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PPUSH
69804: CALL_OW 447
// end ;
69808: LD_VAR 0 2
69812: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69813: LD_INT 0
69815: PPUSH
69816: PPUSH
69817: PPUSH
// tmp := [ ] ;
69818: LD_ADDR_VAR 0 5
69822: PUSH
69823: EMPTY
69824: ST_TO_ADDR
// for i in units do
69825: LD_ADDR_VAR 0 4
69829: PUSH
69830: LD_VAR 0 1
69834: PUSH
69835: FOR_IN
69836: IFFALSE 69874
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69838: LD_ADDR_VAR 0 5
69842: PUSH
69843: LD_VAR 0 5
69847: PPUSH
69848: LD_VAR 0 5
69852: PUSH
69853: LD_INT 1
69855: PLUS
69856: PPUSH
69857: LD_VAR 0 4
69861: PPUSH
69862: CALL_OW 256
69866: PPUSH
69867: CALL_OW 2
69871: ST_TO_ADDR
69872: GO 69835
69874: POP
69875: POP
// if not tmp then
69876: LD_VAR 0 5
69880: NOT
69881: IFFALSE 69885
// exit ;
69883: GO 69933
// if asc then
69885: LD_VAR 0 2
69889: IFFALSE 69913
// result := SortListByListAsc ( units , tmp ) else
69891: LD_ADDR_VAR 0 3
69895: PUSH
69896: LD_VAR 0 1
69900: PPUSH
69901: LD_VAR 0 5
69905: PPUSH
69906: CALL_OW 76
69910: ST_TO_ADDR
69911: GO 69933
// result := SortListByListDesc ( units , tmp ) ;
69913: LD_ADDR_VAR 0 3
69917: PUSH
69918: LD_VAR 0 1
69922: PPUSH
69923: LD_VAR 0 5
69927: PPUSH
69928: CALL_OW 77
69932: ST_TO_ADDR
// end ;
69933: LD_VAR 0 3
69937: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69938: LD_INT 0
69940: PPUSH
69941: PPUSH
// task := GetTaskList ( mech ) ;
69942: LD_ADDR_VAR 0 4
69946: PUSH
69947: LD_VAR 0 1
69951: PPUSH
69952: CALL_OW 437
69956: ST_TO_ADDR
// if not task then
69957: LD_VAR 0 4
69961: NOT
69962: IFFALSE 69966
// exit ;
69964: GO 70008
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69966: LD_ADDR_VAR 0 3
69970: PUSH
69971: LD_VAR 0 4
69975: PUSH
69976: LD_INT 1
69978: ARRAY
69979: PUSH
69980: LD_INT 1
69982: ARRAY
69983: PUSH
69984: LD_STRING r
69986: EQUAL
69987: PUSH
69988: LD_VAR 0 4
69992: PUSH
69993: LD_INT 1
69995: ARRAY
69996: PUSH
69997: LD_INT 4
69999: ARRAY
70000: PUSH
70001: LD_VAR 0 2
70005: EQUAL
70006: AND
70007: ST_TO_ADDR
// end ;
70008: LD_VAR 0 3
70012: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70013: LD_INT 0
70015: PPUSH
// SetDir ( unit , d ) ;
70016: LD_VAR 0 1
70020: PPUSH
70021: LD_VAR 0 4
70025: PPUSH
70026: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70030: LD_VAR 0 1
70034: PPUSH
70035: LD_VAR 0 2
70039: PPUSH
70040: LD_VAR 0 3
70044: PPUSH
70045: LD_VAR 0 5
70049: PPUSH
70050: CALL_OW 48
// end ;
70054: LD_VAR 0 6
70058: RET
// export function ToNaturalNumber ( number ) ; begin
70059: LD_INT 0
70061: PPUSH
// result := number div 1 ;
70062: LD_ADDR_VAR 0 2
70066: PUSH
70067: LD_VAR 0 1
70071: PUSH
70072: LD_INT 1
70074: DIV
70075: ST_TO_ADDR
// if number < 0 then
70076: LD_VAR 0 1
70080: PUSH
70081: LD_INT 0
70083: LESS
70084: IFFALSE 70094
// result := 0 ;
70086: LD_ADDR_VAR 0 2
70090: PUSH
70091: LD_INT 0
70093: ST_TO_ADDR
// end ;
70094: LD_VAR 0 2
70098: RET
// export function SortByClass ( units , class ) ; var un ; begin
70099: LD_INT 0
70101: PPUSH
70102: PPUSH
// if not units or not class then
70103: LD_VAR 0 1
70107: NOT
70108: PUSH
70109: LD_VAR 0 2
70113: NOT
70114: OR
70115: IFFALSE 70119
// exit ;
70117: GO 70214
// result := [ ] ;
70119: LD_ADDR_VAR 0 3
70123: PUSH
70124: EMPTY
70125: ST_TO_ADDR
// for un in units do
70126: LD_ADDR_VAR 0 4
70130: PUSH
70131: LD_VAR 0 1
70135: PUSH
70136: FOR_IN
70137: IFFALSE 70212
// if GetClass ( un ) = class then
70139: LD_VAR 0 4
70143: PPUSH
70144: CALL_OW 257
70148: PUSH
70149: LD_VAR 0 2
70153: EQUAL
70154: IFFALSE 70181
// result := Insert ( result , 1 , un ) else
70156: LD_ADDR_VAR 0 3
70160: PUSH
70161: LD_VAR 0 3
70165: PPUSH
70166: LD_INT 1
70168: PPUSH
70169: LD_VAR 0 4
70173: PPUSH
70174: CALL_OW 2
70178: ST_TO_ADDR
70179: GO 70210
// result := Replace ( result , result + 1 , un ) ;
70181: LD_ADDR_VAR 0 3
70185: PUSH
70186: LD_VAR 0 3
70190: PPUSH
70191: LD_VAR 0 3
70195: PUSH
70196: LD_INT 1
70198: PLUS
70199: PPUSH
70200: LD_VAR 0 4
70204: PPUSH
70205: CALL_OW 1
70209: ST_TO_ADDR
70210: GO 70136
70212: POP
70213: POP
// end ;
70214: LD_VAR 0 3
70218: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70219: LD_INT 0
70221: PPUSH
70222: PPUSH
70223: PPUSH
70224: PPUSH
70225: PPUSH
70226: PPUSH
70227: PPUSH
// result := [ ] ;
70228: LD_ADDR_VAR 0 4
70232: PUSH
70233: EMPTY
70234: ST_TO_ADDR
// if x - r < 0 then
70235: LD_VAR 0 1
70239: PUSH
70240: LD_VAR 0 3
70244: MINUS
70245: PUSH
70246: LD_INT 0
70248: LESS
70249: IFFALSE 70261
// min_x := 0 else
70251: LD_ADDR_VAR 0 8
70255: PUSH
70256: LD_INT 0
70258: ST_TO_ADDR
70259: GO 70277
// min_x := x - r ;
70261: LD_ADDR_VAR 0 8
70265: PUSH
70266: LD_VAR 0 1
70270: PUSH
70271: LD_VAR 0 3
70275: MINUS
70276: ST_TO_ADDR
// if y - r < 0 then
70277: LD_VAR 0 2
70281: PUSH
70282: LD_VAR 0 3
70286: MINUS
70287: PUSH
70288: LD_INT 0
70290: LESS
70291: IFFALSE 70303
// min_y := 0 else
70293: LD_ADDR_VAR 0 7
70297: PUSH
70298: LD_INT 0
70300: ST_TO_ADDR
70301: GO 70319
// min_y := y - r ;
70303: LD_ADDR_VAR 0 7
70307: PUSH
70308: LD_VAR 0 2
70312: PUSH
70313: LD_VAR 0 3
70317: MINUS
70318: ST_TO_ADDR
// max_x := x + r ;
70319: LD_ADDR_VAR 0 9
70323: PUSH
70324: LD_VAR 0 1
70328: PUSH
70329: LD_VAR 0 3
70333: PLUS
70334: ST_TO_ADDR
// max_y := y + r ;
70335: LD_ADDR_VAR 0 10
70339: PUSH
70340: LD_VAR 0 2
70344: PUSH
70345: LD_VAR 0 3
70349: PLUS
70350: ST_TO_ADDR
// for _x = min_x to max_x do
70351: LD_ADDR_VAR 0 5
70355: PUSH
70356: DOUBLE
70357: LD_VAR 0 8
70361: DEC
70362: ST_TO_ADDR
70363: LD_VAR 0 9
70367: PUSH
70368: FOR_TO
70369: IFFALSE 70470
// for _y = min_y to max_y do
70371: LD_ADDR_VAR 0 6
70375: PUSH
70376: DOUBLE
70377: LD_VAR 0 7
70381: DEC
70382: ST_TO_ADDR
70383: LD_VAR 0 10
70387: PUSH
70388: FOR_TO
70389: IFFALSE 70466
// begin if not ValidHex ( _x , _y ) then
70391: LD_VAR 0 5
70395: PPUSH
70396: LD_VAR 0 6
70400: PPUSH
70401: CALL_OW 488
70405: NOT
70406: IFFALSE 70410
// continue ;
70408: GO 70388
// if GetResourceTypeXY ( _x , _y ) then
70410: LD_VAR 0 5
70414: PPUSH
70415: LD_VAR 0 6
70419: PPUSH
70420: CALL_OW 283
70424: IFFALSE 70464
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70426: LD_ADDR_VAR 0 4
70430: PUSH
70431: LD_VAR 0 4
70435: PPUSH
70436: LD_VAR 0 4
70440: PUSH
70441: LD_INT 1
70443: PLUS
70444: PPUSH
70445: LD_VAR 0 5
70449: PUSH
70450: LD_VAR 0 6
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PPUSH
70459: CALL_OW 1
70463: ST_TO_ADDR
// end ;
70464: GO 70388
70466: POP
70467: POP
70468: GO 70368
70470: POP
70471: POP
// end ;
70472: LD_VAR 0 4
70476: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70477: LD_INT 0
70479: PPUSH
70480: PPUSH
70481: PPUSH
70482: PPUSH
70483: PPUSH
70484: PPUSH
70485: PPUSH
70486: PPUSH
// if not units then
70487: LD_VAR 0 1
70491: NOT
70492: IFFALSE 70496
// exit ;
70494: GO 71020
// result := UnitFilter ( units , [ f_ok ] ) ;
70496: LD_ADDR_VAR 0 3
70500: PUSH
70501: LD_VAR 0 1
70505: PPUSH
70506: LD_INT 50
70508: PUSH
70509: EMPTY
70510: LIST
70511: PPUSH
70512: CALL_OW 72
70516: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70517: LD_ADDR_VAR 0 8
70521: PUSH
70522: LD_VAR 0 1
70526: PUSH
70527: LD_INT 1
70529: ARRAY
70530: PPUSH
70531: CALL_OW 255
70535: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70536: LD_ADDR_VAR 0 10
70540: PUSH
70541: LD_INT 29
70543: PUSH
70544: LD_INT 91
70546: PUSH
70547: LD_INT 49
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: LIST
70554: ST_TO_ADDR
// if not result then
70555: LD_VAR 0 3
70559: NOT
70560: IFFALSE 70564
// exit ;
70562: GO 71020
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70564: LD_ADDR_VAR 0 5
70568: PUSH
70569: LD_INT 81
70571: PUSH
70572: LD_VAR 0 8
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PPUSH
70581: CALL_OW 69
70585: ST_TO_ADDR
// for i in result do
70586: LD_ADDR_VAR 0 4
70590: PUSH
70591: LD_VAR 0 3
70595: PUSH
70596: FOR_IN
70597: IFFALSE 71018
// begin tag := GetTag ( i ) + 1 ;
70599: LD_ADDR_VAR 0 9
70603: PUSH
70604: LD_VAR 0 4
70608: PPUSH
70609: CALL_OW 110
70613: PUSH
70614: LD_INT 1
70616: PLUS
70617: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70618: LD_ADDR_VAR 0 7
70622: PUSH
70623: LD_VAR 0 4
70627: PPUSH
70628: CALL_OW 250
70632: PPUSH
70633: LD_VAR 0 4
70637: PPUSH
70638: CALL_OW 251
70642: PPUSH
70643: LD_INT 6
70645: PPUSH
70646: CALL 70219 0 3
70650: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70651: LD_VAR 0 4
70655: PPUSH
70656: CALL_OW 247
70660: PUSH
70661: LD_INT 2
70663: EQUAL
70664: PUSH
70665: LD_VAR 0 7
70669: AND
70670: PUSH
70671: LD_VAR 0 4
70675: PPUSH
70676: CALL_OW 264
70680: PUSH
70681: LD_VAR 0 10
70685: IN
70686: NOT
70687: AND
70688: IFFALSE 70727
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70690: LD_VAR 0 4
70694: PPUSH
70695: LD_VAR 0 7
70699: PUSH
70700: LD_INT 1
70702: ARRAY
70703: PUSH
70704: LD_INT 1
70706: ARRAY
70707: PPUSH
70708: LD_VAR 0 7
70712: PUSH
70713: LD_INT 1
70715: ARRAY
70716: PUSH
70717: LD_INT 2
70719: ARRAY
70720: PPUSH
70721: CALL_OW 116
70725: GO 71016
// if path > tag then
70727: LD_VAR 0 2
70731: PUSH
70732: LD_VAR 0 9
70736: GREATER
70737: IFFALSE 70945
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70739: LD_ADDR_VAR 0 6
70743: PUSH
70744: LD_VAR 0 5
70748: PPUSH
70749: LD_INT 91
70751: PUSH
70752: LD_VAR 0 4
70756: PUSH
70757: LD_INT 8
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: LIST
70764: PPUSH
70765: CALL_OW 72
70769: ST_TO_ADDR
// if nearEnemy then
70770: LD_VAR 0 6
70774: IFFALSE 70843
// begin if GetWeapon ( i ) = ru_time_lapser then
70776: LD_VAR 0 4
70780: PPUSH
70781: CALL_OW 264
70785: PUSH
70786: LD_INT 49
70788: EQUAL
70789: IFFALSE 70817
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70791: LD_VAR 0 4
70795: PPUSH
70796: LD_VAR 0 6
70800: PPUSH
70801: LD_VAR 0 4
70805: PPUSH
70806: CALL_OW 74
70810: PPUSH
70811: CALL_OW 112
70815: GO 70841
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70817: LD_VAR 0 4
70821: PPUSH
70822: LD_VAR 0 6
70826: PPUSH
70827: LD_VAR 0 4
70831: PPUSH
70832: CALL_OW 74
70836: PPUSH
70837: CALL 71945 0 2
// end else
70841: GO 70943
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70843: LD_VAR 0 4
70847: PPUSH
70848: LD_VAR 0 2
70852: PUSH
70853: LD_VAR 0 9
70857: ARRAY
70858: PUSH
70859: LD_INT 1
70861: ARRAY
70862: PPUSH
70863: LD_VAR 0 2
70867: PUSH
70868: LD_VAR 0 9
70872: ARRAY
70873: PUSH
70874: LD_INT 2
70876: ARRAY
70877: PPUSH
70878: CALL_OW 297
70882: PUSH
70883: LD_INT 6
70885: GREATER
70886: IFFALSE 70929
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70888: LD_VAR 0 4
70892: PPUSH
70893: LD_VAR 0 2
70897: PUSH
70898: LD_VAR 0 9
70902: ARRAY
70903: PUSH
70904: LD_INT 1
70906: ARRAY
70907: PPUSH
70908: LD_VAR 0 2
70912: PUSH
70913: LD_VAR 0 9
70917: ARRAY
70918: PUSH
70919: LD_INT 2
70921: ARRAY
70922: PPUSH
70923: CALL_OW 114
70927: GO 70943
// SetTag ( i , tag ) ;
70929: LD_VAR 0 4
70933: PPUSH
70934: LD_VAR 0 9
70938: PPUSH
70939: CALL_OW 109
// end else
70943: GO 71016
// if enemy then
70945: LD_VAR 0 5
70949: IFFALSE 71016
// begin if GetWeapon ( i ) = ru_time_lapser then
70951: LD_VAR 0 4
70955: PPUSH
70956: CALL_OW 264
70960: PUSH
70961: LD_INT 49
70963: EQUAL
70964: IFFALSE 70992
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70966: LD_VAR 0 4
70970: PPUSH
70971: LD_VAR 0 5
70975: PPUSH
70976: LD_VAR 0 4
70980: PPUSH
70981: CALL_OW 74
70985: PPUSH
70986: CALL_OW 112
70990: GO 71016
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70992: LD_VAR 0 4
70996: PPUSH
70997: LD_VAR 0 5
71001: PPUSH
71002: LD_VAR 0 4
71006: PPUSH
71007: CALL_OW 74
71011: PPUSH
71012: CALL 71945 0 2
// end ; end ;
71016: GO 70596
71018: POP
71019: POP
// end ;
71020: LD_VAR 0 3
71024: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71025: LD_INT 0
71027: PPUSH
71028: PPUSH
71029: PPUSH
// if not unit or IsInUnit ( unit ) then
71030: LD_VAR 0 1
71034: NOT
71035: PUSH
71036: LD_VAR 0 1
71040: PPUSH
71041: CALL_OW 310
71045: OR
71046: IFFALSE 71050
// exit ;
71048: GO 71141
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71050: LD_ADDR_VAR 0 4
71054: PUSH
71055: LD_VAR 0 1
71059: PPUSH
71060: CALL_OW 250
71064: PPUSH
71065: LD_VAR 0 2
71069: PPUSH
71070: LD_INT 1
71072: PPUSH
71073: CALL_OW 272
71077: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71078: LD_ADDR_VAR 0 5
71082: PUSH
71083: LD_VAR 0 1
71087: PPUSH
71088: CALL_OW 251
71092: PPUSH
71093: LD_VAR 0 2
71097: PPUSH
71098: LD_INT 1
71100: PPUSH
71101: CALL_OW 273
71105: ST_TO_ADDR
// if ValidHex ( x , y ) then
71106: LD_VAR 0 4
71110: PPUSH
71111: LD_VAR 0 5
71115: PPUSH
71116: CALL_OW 488
71120: IFFALSE 71141
// ComTurnXY ( unit , x , y ) ;
71122: LD_VAR 0 1
71126: PPUSH
71127: LD_VAR 0 4
71131: PPUSH
71132: LD_VAR 0 5
71136: PPUSH
71137: CALL_OW 118
// end ;
71141: LD_VAR 0 3
71145: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71146: LD_INT 0
71148: PPUSH
71149: PPUSH
// result := false ;
71150: LD_ADDR_VAR 0 3
71154: PUSH
71155: LD_INT 0
71157: ST_TO_ADDR
// if not units then
71158: LD_VAR 0 2
71162: NOT
71163: IFFALSE 71167
// exit ;
71165: GO 71212
// for i in units do
71167: LD_ADDR_VAR 0 4
71171: PUSH
71172: LD_VAR 0 2
71176: PUSH
71177: FOR_IN
71178: IFFALSE 71210
// if See ( side , i ) then
71180: LD_VAR 0 1
71184: PPUSH
71185: LD_VAR 0 4
71189: PPUSH
71190: CALL_OW 292
71194: IFFALSE 71208
// begin result := true ;
71196: LD_ADDR_VAR 0 3
71200: PUSH
71201: LD_INT 1
71203: ST_TO_ADDR
// exit ;
71204: POP
71205: POP
71206: GO 71212
// end ;
71208: GO 71177
71210: POP
71211: POP
// end ;
71212: LD_VAR 0 3
71216: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71217: LD_INT 0
71219: PPUSH
71220: PPUSH
71221: PPUSH
71222: PPUSH
// if not unit or not points then
71223: LD_VAR 0 1
71227: NOT
71228: PUSH
71229: LD_VAR 0 2
71233: NOT
71234: OR
71235: IFFALSE 71239
// exit ;
71237: GO 71329
// dist := 99999 ;
71239: LD_ADDR_VAR 0 5
71243: PUSH
71244: LD_INT 99999
71246: ST_TO_ADDR
// for i in points do
71247: LD_ADDR_VAR 0 4
71251: PUSH
71252: LD_VAR 0 2
71256: PUSH
71257: FOR_IN
71258: IFFALSE 71327
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71260: LD_ADDR_VAR 0 6
71264: PUSH
71265: LD_VAR 0 1
71269: PPUSH
71270: LD_VAR 0 4
71274: PUSH
71275: LD_INT 1
71277: ARRAY
71278: PPUSH
71279: LD_VAR 0 4
71283: PUSH
71284: LD_INT 2
71286: ARRAY
71287: PPUSH
71288: CALL_OW 297
71292: ST_TO_ADDR
// if tmpDist < dist then
71293: LD_VAR 0 6
71297: PUSH
71298: LD_VAR 0 5
71302: LESS
71303: IFFALSE 71325
// begin result := i ;
71305: LD_ADDR_VAR 0 3
71309: PUSH
71310: LD_VAR 0 4
71314: ST_TO_ADDR
// dist := tmpDist ;
71315: LD_ADDR_VAR 0 5
71319: PUSH
71320: LD_VAR 0 6
71324: ST_TO_ADDR
// end ; end ;
71325: GO 71257
71327: POP
71328: POP
// end ;
71329: LD_VAR 0 3
71333: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71334: LD_INT 0
71336: PPUSH
// uc_side := side ;
71337: LD_ADDR_OWVAR 20
71341: PUSH
71342: LD_VAR 0 1
71346: ST_TO_ADDR
// uc_nation := 3 ;
71347: LD_ADDR_OWVAR 21
71351: PUSH
71352: LD_INT 3
71354: ST_TO_ADDR
// vc_chassis := 25 ;
71355: LD_ADDR_OWVAR 37
71359: PUSH
71360: LD_INT 25
71362: ST_TO_ADDR
// vc_engine := engine_siberite ;
71363: LD_ADDR_OWVAR 39
71367: PUSH
71368: LD_INT 3
71370: ST_TO_ADDR
// vc_control := control_computer ;
71371: LD_ADDR_OWVAR 38
71375: PUSH
71376: LD_INT 3
71378: ST_TO_ADDR
// vc_weapon := 59 ;
71379: LD_ADDR_OWVAR 40
71383: PUSH
71384: LD_INT 59
71386: ST_TO_ADDR
// result := CreateVehicle ;
71387: LD_ADDR_VAR 0 5
71391: PUSH
71392: CALL_OW 45
71396: ST_TO_ADDR
// SetDir ( result , d ) ;
71397: LD_VAR 0 5
71401: PPUSH
71402: LD_VAR 0 4
71406: PPUSH
71407: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71411: LD_VAR 0 5
71415: PPUSH
71416: LD_VAR 0 2
71420: PPUSH
71421: LD_VAR 0 3
71425: PPUSH
71426: LD_INT 0
71428: PPUSH
71429: CALL_OW 48
// end ;
71433: LD_VAR 0 5
71437: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71438: LD_INT 0
71440: PPUSH
71441: PPUSH
71442: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71443: LD_ADDR_VAR 0 2
71447: PUSH
71448: LD_INT 0
71450: PUSH
71451: LD_INT 0
71453: PUSH
71454: LD_INT 0
71456: PUSH
71457: LD_INT 0
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71466: LD_VAR 0 1
71470: NOT
71471: PUSH
71472: LD_VAR 0 1
71476: PPUSH
71477: CALL_OW 264
71481: PUSH
71482: LD_INT 12
71484: PUSH
71485: LD_INT 51
71487: PUSH
71488: LD_INT 32
71490: PUSH
71491: LD_INT 89
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: IN
71500: NOT
71501: OR
71502: IFFALSE 71506
// exit ;
71504: GO 71604
// for i := 1 to 3 do
71506: LD_ADDR_VAR 0 3
71510: PUSH
71511: DOUBLE
71512: LD_INT 1
71514: DEC
71515: ST_TO_ADDR
71516: LD_INT 3
71518: PUSH
71519: FOR_TO
71520: IFFALSE 71602
// begin tmp := GetCargo ( cargo , i ) ;
71522: LD_ADDR_VAR 0 4
71526: PUSH
71527: LD_VAR 0 1
71531: PPUSH
71532: LD_VAR 0 3
71536: PPUSH
71537: CALL_OW 289
71541: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71542: LD_ADDR_VAR 0 2
71546: PUSH
71547: LD_VAR 0 2
71551: PPUSH
71552: LD_VAR 0 3
71556: PPUSH
71557: LD_VAR 0 4
71561: PPUSH
71562: CALL_OW 1
71566: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71567: LD_ADDR_VAR 0 2
71571: PUSH
71572: LD_VAR 0 2
71576: PPUSH
71577: LD_INT 4
71579: PPUSH
71580: LD_VAR 0 2
71584: PUSH
71585: LD_INT 4
71587: ARRAY
71588: PUSH
71589: LD_VAR 0 4
71593: PLUS
71594: PPUSH
71595: CALL_OW 1
71599: ST_TO_ADDR
// end ;
71600: GO 71519
71602: POP
71603: POP
// end ;
71604: LD_VAR 0 2
71608: RET
// export function Length ( array ) ; begin
71609: LD_INT 0
71611: PPUSH
// result := array + 0 ;
71612: LD_ADDR_VAR 0 2
71616: PUSH
71617: LD_VAR 0 1
71621: PUSH
71622: LD_INT 0
71624: PLUS
71625: ST_TO_ADDR
// end ;
71626: LD_VAR 0 2
71630: RET
// export function PrepareArray ( array ) ; begin
71631: LD_INT 0
71633: PPUSH
// result := array diff 0 ;
71634: LD_ADDR_VAR 0 2
71638: PUSH
71639: LD_VAR 0 1
71643: PUSH
71644: LD_INT 0
71646: DIFF
71647: ST_TO_ADDR
// if not result [ 1 ] then
71648: LD_VAR 0 2
71652: PUSH
71653: LD_INT 1
71655: ARRAY
71656: NOT
71657: IFFALSE 71677
// result := Delete ( result , 1 ) ;
71659: LD_ADDR_VAR 0 2
71663: PUSH
71664: LD_VAR 0 2
71668: PPUSH
71669: LD_INT 1
71671: PPUSH
71672: CALL_OW 3
71676: ST_TO_ADDR
// end ;
71677: LD_VAR 0 2
71681: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71682: LD_INT 0
71684: PPUSH
71685: PPUSH
71686: PPUSH
71687: PPUSH
// sibRocketRange := 25 ;
71688: LD_ADDR_VAR 0 6
71692: PUSH
71693: LD_INT 25
71695: ST_TO_ADDR
// result := false ;
71696: LD_ADDR_VAR 0 4
71700: PUSH
71701: LD_INT 0
71703: ST_TO_ADDR
// for i := 0 to 5 do
71704: LD_ADDR_VAR 0 5
71708: PUSH
71709: DOUBLE
71710: LD_INT 0
71712: DEC
71713: ST_TO_ADDR
71714: LD_INT 5
71716: PUSH
71717: FOR_TO
71718: IFFALSE 71785
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71720: LD_VAR 0 1
71724: PPUSH
71725: LD_VAR 0 5
71729: PPUSH
71730: LD_VAR 0 6
71734: PPUSH
71735: CALL_OW 272
71739: PPUSH
71740: LD_VAR 0 2
71744: PPUSH
71745: LD_VAR 0 5
71749: PPUSH
71750: LD_VAR 0 6
71754: PPUSH
71755: CALL_OW 273
71759: PPUSH
71760: LD_VAR 0 3
71764: PPUSH
71765: CALL_OW 309
71769: IFFALSE 71783
// begin result := true ;
71771: LD_ADDR_VAR 0 4
71775: PUSH
71776: LD_INT 1
71778: ST_TO_ADDR
// exit ;
71779: POP
71780: POP
71781: GO 71787
// end ;
71783: GO 71717
71785: POP
71786: POP
// end ;
71787: LD_VAR 0 4
71791: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71792: LD_INT 0
71794: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71795: LD_VAR 0 1
71799: PPUSH
71800: LD_VAR 0 2
71804: PPUSH
71805: LD_INT 0
71807: PPUSH
71808: LD_INT 0
71810: PPUSH
71811: LD_INT 1
71813: PPUSH
71814: LD_INT 0
71816: PPUSH
71817: CALL_OW 587
// end ;
71821: LD_VAR 0 3
71825: RET
// export function CenterOnNow ( unit ) ; begin
71826: LD_INT 0
71828: PPUSH
// result := IsInUnit ( unit ) ;
71829: LD_ADDR_VAR 0 2
71833: PUSH
71834: LD_VAR 0 1
71838: PPUSH
71839: CALL_OW 310
71843: ST_TO_ADDR
// if not result then
71844: LD_VAR 0 2
71848: NOT
71849: IFFALSE 71861
// result := unit ;
71851: LD_ADDR_VAR 0 2
71855: PUSH
71856: LD_VAR 0 1
71860: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71861: LD_VAR 0 1
71865: PPUSH
71866: CALL_OW 87
// end ;
71870: LD_VAR 0 2
71874: RET
// export function ComMoveHex ( unit , hex ) ; begin
71875: LD_INT 0
71877: PPUSH
// if not hex then
71878: LD_VAR 0 2
71882: NOT
71883: IFFALSE 71887
// exit ;
71885: GO 71940
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71887: LD_VAR 0 2
71891: PUSH
71892: LD_INT 1
71894: ARRAY
71895: PPUSH
71896: LD_VAR 0 2
71900: PUSH
71901: LD_INT 2
71903: ARRAY
71904: PPUSH
71905: CALL_OW 428
71909: IFFALSE 71913
// exit ;
71911: GO 71940
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71913: LD_VAR 0 1
71917: PPUSH
71918: LD_VAR 0 2
71922: PUSH
71923: LD_INT 1
71925: ARRAY
71926: PPUSH
71927: LD_VAR 0 2
71931: PUSH
71932: LD_INT 2
71934: ARRAY
71935: PPUSH
71936: CALL_OW 111
// end ;
71940: LD_VAR 0 3
71944: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71945: LD_INT 0
71947: PPUSH
71948: PPUSH
71949: PPUSH
// if not unit or not enemy then
71950: LD_VAR 0 1
71954: NOT
71955: PUSH
71956: LD_VAR 0 2
71960: NOT
71961: OR
71962: IFFALSE 71966
// exit ;
71964: GO 72090
// x := GetX ( enemy ) ;
71966: LD_ADDR_VAR 0 4
71970: PUSH
71971: LD_VAR 0 2
71975: PPUSH
71976: CALL_OW 250
71980: ST_TO_ADDR
// y := GetY ( enemy ) ;
71981: LD_ADDR_VAR 0 5
71985: PUSH
71986: LD_VAR 0 2
71990: PPUSH
71991: CALL_OW 251
71995: ST_TO_ADDR
// if ValidHex ( x , y ) then
71996: LD_VAR 0 4
72000: PPUSH
72001: LD_VAR 0 5
72005: PPUSH
72006: CALL_OW 488
72010: IFFALSE 72090
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72012: LD_VAR 0 2
72016: PPUSH
72017: CALL_OW 247
72021: PUSH
72022: LD_INT 3
72024: PUSH
72025: LD_INT 2
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: IN
72032: PUSH
72033: LD_VAR 0 1
72037: PPUSH
72038: CALL_OW 255
72042: PPUSH
72043: LD_VAR 0 2
72047: PPUSH
72048: CALL_OW 292
72052: OR
72053: IFFALSE 72071
// ComAttackUnit ( unit , enemy ) else
72055: LD_VAR 0 1
72059: PPUSH
72060: LD_VAR 0 2
72064: PPUSH
72065: CALL_OW 115
72069: GO 72090
// ComAgressiveMove ( unit , x , y ) ;
72071: LD_VAR 0 1
72075: PPUSH
72076: LD_VAR 0 4
72080: PPUSH
72081: LD_VAR 0 5
72085: PPUSH
72086: CALL_OW 114
// end ;
72090: LD_VAR 0 3
72094: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72095: LD_INT 0
72097: PPUSH
72098: PPUSH
72099: PPUSH
// list := AreaToList ( area , 0 ) ;
72100: LD_ADDR_VAR 0 5
72104: PUSH
72105: LD_VAR 0 1
72109: PPUSH
72110: LD_INT 0
72112: PPUSH
72113: CALL_OW 517
72117: ST_TO_ADDR
// if not list then
72118: LD_VAR 0 5
72122: NOT
72123: IFFALSE 72127
// exit ;
72125: GO 72257
// if all then
72127: LD_VAR 0 2
72131: IFFALSE 72219
// begin for i := 1 to list [ 1 ] do
72133: LD_ADDR_VAR 0 4
72137: PUSH
72138: DOUBLE
72139: LD_INT 1
72141: DEC
72142: ST_TO_ADDR
72143: LD_VAR 0 5
72147: PUSH
72148: LD_INT 1
72150: ARRAY
72151: PUSH
72152: FOR_TO
72153: IFFALSE 72215
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72155: LD_ADDR_VAR 0 3
72159: PUSH
72160: LD_VAR 0 3
72164: PPUSH
72165: LD_VAR 0 3
72169: PUSH
72170: LD_INT 1
72172: PLUS
72173: PPUSH
72174: LD_VAR 0 5
72178: PUSH
72179: LD_INT 1
72181: ARRAY
72182: PUSH
72183: LD_VAR 0 4
72187: ARRAY
72188: PUSH
72189: LD_VAR 0 5
72193: PUSH
72194: LD_INT 2
72196: ARRAY
72197: PUSH
72198: LD_VAR 0 4
72202: ARRAY
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PPUSH
72208: CALL_OW 1
72212: ST_TO_ADDR
72213: GO 72152
72215: POP
72216: POP
// exit ;
72217: GO 72257
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72219: LD_ADDR_VAR 0 3
72223: PUSH
72224: LD_VAR 0 5
72228: PUSH
72229: LD_INT 1
72231: ARRAY
72232: PUSH
72233: LD_INT 1
72235: ARRAY
72236: PUSH
72237: LD_VAR 0 5
72241: PUSH
72242: LD_INT 2
72244: ARRAY
72245: PUSH
72246: LD_INT 1
72248: ARRAY
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: EMPTY
72255: LIST
72256: ST_TO_ADDR
// end ;
72257: LD_VAR 0 3
72261: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72262: LD_INT 0
72264: PPUSH
72265: PPUSH
// list := AreaToList ( area , 0 ) ;
72266: LD_ADDR_VAR 0 4
72270: PUSH
72271: LD_VAR 0 1
72275: PPUSH
72276: LD_INT 0
72278: PPUSH
72279: CALL_OW 517
72283: ST_TO_ADDR
// if not list then
72284: LD_VAR 0 4
72288: NOT
72289: IFFALSE 72293
// exit ;
72291: GO 72334
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
72293: LD_ADDR_VAR 0 3
72297: PUSH
72298: LD_VAR 0 4
72302: PUSH
72303: LD_INT 1
72305: ARRAY
72306: PUSH
72307: LD_INT 1
72309: ARRAY
72310: PUSH
72311: LD_VAR 0 4
72315: PUSH
72316: LD_INT 2
72318: ARRAY
72319: PUSH
72320: LD_INT 1
72322: ARRAY
72323: PUSH
72324: LD_VAR 0 2
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: LIST
72333: ST_TO_ADDR
// end ;
72334: LD_VAR 0 3
72338: RET
// export function First ( array ) ; begin
72339: LD_INT 0
72341: PPUSH
// if not array then
72342: LD_VAR 0 1
72346: NOT
72347: IFFALSE 72351
// exit ;
72349: GO 72365
// result := array [ 1 ] ;
72351: LD_ADDR_VAR 0 2
72355: PUSH
72356: LD_VAR 0 1
72360: PUSH
72361: LD_INT 1
72363: ARRAY
72364: ST_TO_ADDR
// end ;
72365: LD_VAR 0 2
72369: RET
// export function Last ( array ) ; begin
72370: LD_INT 0
72372: PPUSH
// if not array then
72373: LD_VAR 0 1
72377: NOT
72378: IFFALSE 72382
// exit ;
72380: GO 72398
// result := array [ array ] ;
72382: LD_ADDR_VAR 0 2
72386: PUSH
72387: LD_VAR 0 1
72391: PUSH
72392: LD_VAR 0 1
72396: ARRAY
72397: ST_TO_ADDR
// end ;
72398: LD_VAR 0 2
72402: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
72403: LD_INT 0
72405: PPUSH
72406: PPUSH
// result := [ ] ;
72407: LD_ADDR_VAR 0 5
72411: PUSH
72412: EMPTY
72413: ST_TO_ADDR
// if not array then
72414: LD_VAR 0 1
72418: NOT
72419: IFFALSE 72423
// exit ;
72421: GO 72535
// for i := 1 to array do
72423: LD_ADDR_VAR 0 6
72427: PUSH
72428: DOUBLE
72429: LD_INT 1
72431: DEC
72432: ST_TO_ADDR
72433: LD_VAR 0 1
72437: PUSH
72438: FOR_TO
72439: IFFALSE 72533
// if array [ i ] [ index ] = value then
72441: LD_VAR 0 1
72445: PUSH
72446: LD_VAR 0 6
72450: ARRAY
72451: PUSH
72452: LD_VAR 0 2
72456: ARRAY
72457: PUSH
72458: LD_VAR 0 3
72462: EQUAL
72463: IFFALSE 72531
// begin if indexColumn then
72465: LD_VAR 0 4
72469: IFFALSE 72505
// result := Join ( result , array [ i ] [ indexColumn ] ) else
72471: LD_ADDR_VAR 0 5
72475: PUSH
72476: LD_VAR 0 5
72480: PPUSH
72481: LD_VAR 0 1
72485: PUSH
72486: LD_VAR 0 6
72490: ARRAY
72491: PUSH
72492: LD_VAR 0 4
72496: ARRAY
72497: PPUSH
72498: CALL 67873 0 2
72502: ST_TO_ADDR
72503: GO 72531
// result := Join ( result , array [ i ] ) ;
72505: LD_ADDR_VAR 0 5
72509: PUSH
72510: LD_VAR 0 5
72514: PPUSH
72515: LD_VAR 0 1
72519: PUSH
72520: LD_VAR 0 6
72524: ARRAY
72525: PPUSH
72526: CALL 67873 0 2
72530: ST_TO_ADDR
// end ;
72531: GO 72438
72533: POP
72534: POP
// end ;
72535: LD_VAR 0 5
72539: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72540: LD_INT 0
72542: PPUSH
72543: PPUSH
72544: PPUSH
// if btype = b_depot then
72545: LD_VAR 0 2
72549: PUSH
72550: LD_INT 0
72552: EQUAL
72553: IFFALSE 72565
// begin result := true ;
72555: LD_ADDR_VAR 0 3
72559: PUSH
72560: LD_INT 1
72562: ST_TO_ADDR
// exit ;
72563: GO 72681
// end ; pom := GetBase ( depot ) ;
72565: LD_ADDR_VAR 0 4
72569: PUSH
72570: LD_VAR 0 1
72574: PPUSH
72575: CALL_OW 274
72579: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72580: LD_ADDR_VAR 0 5
72584: PUSH
72585: LD_VAR 0 2
72589: PPUSH
72590: LD_VAR 0 1
72594: PPUSH
72595: CALL_OW 248
72599: PPUSH
72600: CALL_OW 450
72604: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72605: LD_ADDR_VAR 0 3
72609: PUSH
72610: LD_VAR 0 4
72614: PPUSH
72615: LD_INT 1
72617: PPUSH
72618: CALL_OW 275
72622: PUSH
72623: LD_VAR 0 5
72627: PUSH
72628: LD_INT 1
72630: ARRAY
72631: GREATEREQUAL
72632: PUSH
72633: LD_VAR 0 4
72637: PPUSH
72638: LD_INT 2
72640: PPUSH
72641: CALL_OW 275
72645: PUSH
72646: LD_VAR 0 5
72650: PUSH
72651: LD_INT 2
72653: ARRAY
72654: GREATEREQUAL
72655: AND
72656: PUSH
72657: LD_VAR 0 4
72661: PPUSH
72662: LD_INT 3
72664: PPUSH
72665: CALL_OW 275
72669: PUSH
72670: LD_VAR 0 5
72674: PUSH
72675: LD_INT 3
72677: ARRAY
72678: GREATEREQUAL
72679: AND
72680: ST_TO_ADDR
// end ;
72681: LD_VAR 0 3
72685: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
72686: LD_INT 0
72688: PPUSH
// if not vehicles or not parkingPoint then
72689: LD_VAR 0 1
72693: NOT
72694: PUSH
72695: LD_VAR 0 2
72699: NOT
72700: OR
72701: IFFALSE 72705
// exit ;
72703: GO 72803
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
72705: LD_ADDR_VAR 0 1
72709: PUSH
72710: LD_VAR 0 1
72714: PPUSH
72715: LD_INT 50
72717: PUSH
72718: EMPTY
72719: LIST
72720: PUSH
72721: LD_INT 3
72723: PUSH
72724: LD_INT 92
72726: PUSH
72727: LD_VAR 0 2
72731: PUSH
72732: LD_INT 1
72734: ARRAY
72735: PUSH
72736: LD_VAR 0 2
72740: PUSH
72741: LD_INT 2
72743: ARRAY
72744: PUSH
72745: LD_INT 8
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PPUSH
72762: CALL_OW 72
72766: ST_TO_ADDR
// if not vehicles then
72767: LD_VAR 0 1
72771: NOT
72772: IFFALSE 72776
// exit ;
72774: GO 72803
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72776: LD_VAR 0 1
72780: PPUSH
72781: LD_VAR 0 2
72785: PUSH
72786: LD_INT 1
72788: ARRAY
72789: PPUSH
72790: LD_VAR 0 2
72794: PUSH
72795: LD_INT 2
72797: ARRAY
72798: PPUSH
72799: CALL_OW 111
// end ;
72803: LD_VAR 0 3
72807: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72808: LD_INT 0
72810: PPUSH
72811: PPUSH
72812: PPUSH
// if not side or not area then
72813: LD_VAR 0 1
72817: NOT
72818: PUSH
72819: LD_VAR 0 2
72823: NOT
72824: OR
72825: IFFALSE 72829
// exit ;
72827: GO 72948
// tmp := AreaToList ( area , 0 ) ;
72829: LD_ADDR_VAR 0 5
72833: PUSH
72834: LD_VAR 0 2
72838: PPUSH
72839: LD_INT 0
72841: PPUSH
72842: CALL_OW 517
72846: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72847: LD_ADDR_VAR 0 4
72851: PUSH
72852: DOUBLE
72853: LD_INT 1
72855: DEC
72856: ST_TO_ADDR
72857: LD_VAR 0 5
72861: PUSH
72862: LD_INT 1
72864: ARRAY
72865: PUSH
72866: FOR_TO
72867: IFFALSE 72946
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
72869: LD_VAR 0 5
72873: PUSH
72874: LD_INT 1
72876: ARRAY
72877: PUSH
72878: LD_VAR 0 4
72882: ARRAY
72883: PPUSH
72884: LD_VAR 0 5
72888: PUSH
72889: LD_INT 2
72891: ARRAY
72892: PUSH
72893: LD_VAR 0 4
72897: ARRAY
72898: PPUSH
72899: CALL_OW 351
72903: IFFALSE 72944
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
72905: LD_VAR 0 5
72909: PUSH
72910: LD_INT 1
72912: ARRAY
72913: PUSH
72914: LD_VAR 0 4
72918: ARRAY
72919: PPUSH
72920: LD_VAR 0 5
72924: PUSH
72925: LD_INT 2
72927: ARRAY
72928: PUSH
72929: LD_VAR 0 4
72933: ARRAY
72934: PPUSH
72935: LD_VAR 0 1
72939: PPUSH
72940: CALL_OW 244
// end ;
72944: GO 72866
72946: POP
72947: POP
// end ; end_of_file
72948: LD_VAR 0 3
72952: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72953: LD_VAR 0 1
72957: PUSH
72958: LD_INT 200
72960: DOUBLE
72961: GREATEREQUAL
72962: IFFALSE 72970
72964: LD_INT 299
72966: DOUBLE
72967: LESSEQUAL
72968: IFTRUE 72972
72970: GO 73004
72972: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72973: LD_VAR 0 1
72977: PPUSH
72978: LD_VAR 0 2
72982: PPUSH
72983: LD_VAR 0 3
72987: PPUSH
72988: LD_VAR 0 4
72992: PPUSH
72993: LD_VAR 0 5
72997: PPUSH
72998: CALL 25664 0 5
73002: GO 73081
73004: LD_INT 300
73006: DOUBLE
73007: GREATEREQUAL
73008: IFFALSE 73016
73010: LD_INT 399
73012: DOUBLE
73013: LESSEQUAL
73014: IFTRUE 73018
73016: GO 73080
73018: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73019: LD_VAR 0 1
73023: PPUSH
73024: LD_VAR 0 2
73028: PPUSH
73029: LD_VAR 0 3
73033: PPUSH
73034: LD_VAR 0 4
73038: PPUSH
73039: LD_VAR 0 5
73043: PPUSH
73044: LD_VAR 0 6
73048: PPUSH
73049: LD_VAR 0 7
73053: PPUSH
73054: LD_VAR 0 8
73058: PPUSH
73059: LD_VAR 0 9
73063: PPUSH
73064: LD_VAR 0 10
73068: PPUSH
73069: LD_VAR 0 11
73073: PPUSH
73074: CALL 21989 0 11
73078: GO 73081
73080: POP
// end ;
73081: PPOPN 11
73083: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73084: LD_VAR 0 1
73088: PPUSH
73089: LD_VAR 0 2
73093: PPUSH
73094: LD_VAR 0 3
73098: PPUSH
73099: LD_VAR 0 4
73103: PPUSH
73104: LD_VAR 0 5
73108: PPUSH
73109: CALL 25400 0 5
// end ; end_of_file
73113: PPOPN 5
73115: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73116: LD_VAR 0 1
73120: PPUSH
73121: LD_VAR 0 2
73125: PPUSH
73126: LD_VAR 0 3
73130: PPUSH
73131: LD_VAR 0 4
73135: PPUSH
73136: LD_VAR 0 5
73140: PPUSH
73141: LD_VAR 0 6
73145: PPUSH
73146: CALL 9641 0 6
// end ;
73150: PPOPN 6
73152: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73153: LD_INT 0
73155: PPUSH
// begin if not units then
73156: LD_VAR 0 1
73160: NOT
73161: IFFALSE 73165
// exit ;
73163: GO 73165
// end ;
73165: PPOPN 7
73167: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73168: CALL 9528 0 0
// end ;
73172: PPOPN 1
73174: END
