// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8617 0 0
// PrepareAmerican ;
 100: CALL 5237 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2712: LD_VAR 0 1
2716: PPUSH
2717: CALL_OW 255
2721: PUSH
2722: LD_INT 3
2724: EQUAL
2725: PUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 263
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: AND
2740: IFFALSE 2750
// comp_tested := true ;
2742: LD_ADDR_EXP 22
2746: PUSH
2747: LD_INT 1
2749: ST_TO_ADDR
// end ;
2750: PPOPN 2
2752: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2753: LD_VAR 0 1
2757: PUSH
2758: LD_INT 22
2760: PUSH
2761: LD_INT 1
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: LD_INT 21
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PPUSH
2782: CALL_OW 69
2786: IN
2787: IFFALSE 2865
// if attacked = false and sikorski_ar = false then
2789: LD_EXP 15
2793: PUSH
2794: LD_INT 0
2796: EQUAL
2797: PUSH
2798: LD_EXP 12
2802: PUSH
2803: LD_INT 0
2805: EQUAL
2806: AND
2807: IFFALSE 2865
// begin attacked := true ;
2809: LD_ADDR_EXP 15
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// if IsInUnit ( donald ) then
2817: LD_EXP 13
2821: PPUSH
2822: CALL_OW 310
2826: IFFALSE 2842
// SayRadio ( donald , DGammaF ) else
2828: LD_EXP 13
2832: PPUSH
2833: LD_STRING DGammaF
2835: PPUSH
2836: CALL_OW 94
2840: GO 2865
// if IsInUnit ( van ) then
2842: LD_EXP 14
2846: PPUSH
2847: CALL_OW 310
2851: IFFALSE 2865
// SayRadio ( van , DGammaM ) ;
2853: LD_EXP 14
2857: PPUSH
2858: LD_STRING DGammaM
2860: PPUSH
2861: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2865: LD_VAR 0 1
2869: PUSH
2870: LD_INT 33
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: IN
2885: IFFALSE 2896
// ComUnlink ( un ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 136
// end ;
2896: PPOPN 1
2898: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2899: LD_VAR 0 2
2903: PPUSH
2904: CALL_OW 258
2908: PUSH
2909: LD_INT 1
2911: EQUAL
2912: IFFALSE 2926
// Say ( sci , Dsci3 ) ;
2914: LD_VAR 0 2
2918: PPUSH
2919: LD_STRING Dsci3
2921: PPUSH
2922: CALL_OW 88
// end ;
2926: PPOPN 2
2928: END
// on BuildingComplete ( b ) do var i ;
2929: LD_INT 0
2931: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2932: LD_VAR 0 1
2936: PPUSH
2937: CALL_OW 266
2941: PUSH
2942: LD_INT 0
2944: EQUAL
2945: PUSH
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 255
2955: PUSH
2956: LD_INT 3
2958: EQUAL
2959: AND
2960: PUSH
2961: LD_EXP 6
2965: PUSH
2966: LD_INT 0
2968: EQUAL
2969: AND
2970: IFFALSE 3034
// begin SetBName ( b , kalinin ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: LD_STRING kalinin
2979: PPUSH
2980: CALL_OW 500
// dep_x := GetX ( b ) ;
2984: LD_ADDR_EXP 7
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 250
2998: ST_TO_ADDR
// dep_y := GetY ( b ) ;
2999: LD_ADDR_EXP 8
3003: PUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 251
3013: ST_TO_ADDR
// depot_rdy := true ;
3014: LD_ADDR_EXP 6
3018: PUSH
3019: LD_INT 1
3021: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3022: LD_EXP 2
3026: PPUSH
3027: LD_STRING Dpop3
3029: PPUSH
3030: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3034: LD_VAR 0 1
3038: PPUSH
3039: CALL_OW 266
3043: PUSH
3044: LD_INT 6
3046: EQUAL
3047: PUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 255
3057: PUSH
3058: LD_INT 3
3060: EQUAL
3061: AND
3062: PUSH
3063: LD_EXP 21
3067: PUSH
3068: LD_INT 0
3070: EQUAL
3071: AND
3072: IFFALSE 3167
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3074: LD_INT 22
3076: PUSH
3077: LD_INT 3
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 25
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PPUSH
3098: CALL_OW 69
3102: PUSH
3103: LD_INT 0
3105: GREATER
3106: IFFALSE 3167
// begin event_comp := true ;
3108: LD_ADDR_EXP 21
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3116: LD_INT 22
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 25
3128: PUSH
3129: LD_INT 4
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 26
3138: PUSH
3139: LD_INT 1
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: PUSH
3156: LD_INT 1
3158: ARRAY
3159: PPUSH
3160: LD_STRING Dsci1
3162: PPUSH
3163: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3167: LD_VAR 0 1
3171: PPUSH
3172: CALL_OW 266
3176: PUSH
3177: LD_INT 32
3179: EQUAL
3180: PUSH
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 255
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: AND
3195: IFFALSE 3260
// begin RaiseSailEvent ( 6 ) ;
3197: LD_INT 6
3199: PPUSH
3200: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3204: LD_VAR 0 1
3208: PPUSH
3209: LD_EXP 18
3213: PUSH
3214: LD_INT 4
3216: ARRAY
3217: PPUSH
3218: CALL_OW 208
// for i = 1 to 4 do
3222: LD_ADDR_VAR 0 2
3226: PUSH
3227: DOUBLE
3228: LD_INT 1
3230: DEC
3231: ST_TO_ADDR
3232: LD_INT 4
3234: PUSH
3235: FOR_TO
3236: IFFALSE 3258
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3238: LD_ADDR_EXP 18
3242: PUSH
3243: LD_EXP 18
3247: PPUSH
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 3
3255: ST_TO_ADDR
3256: GO 3235
3258: POP
3259: POP
// end ; end ;
3260: PPOPN 2
3262: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL 22766 0 1
// if un in Patrol then
3272: LD_VAR 0 1
3276: PUSH
3277: LD_EXP 17
3281: IN
3282: IFFALSE 3300
// Patrol := Patrol diff un ;
3284: LD_ADDR_EXP 17
3288: PUSH
3289: LD_EXP 17
3293: PUSH
3294: LD_VAR 0 1
3298: DIFF
3299: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3300: LD_VAR 0 1
3304: PUSH
3305: LD_INT 22
3307: PUSH
3308: LD_INT 1
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 30
3317: PUSH
3318: LD_INT 32
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 69
3333: IN
3334: IFFALSE 3420
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3336: LD_ADDR_EXP 18
3340: PUSH
3341: LD_EXP 18
3345: PUSH
3346: LD_VAR 0 1
3350: PPUSH
3351: CALL_OW 250
3355: ADD
3356: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3357: LD_ADDR_EXP 18
3361: PUSH
3362: LD_EXP 18
3366: PUSH
3367: LD_VAR 0 1
3371: PPUSH
3372: CALL_OW 251
3376: ADD
3377: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3378: LD_ADDR_EXP 18
3382: PUSH
3383: LD_EXP 18
3387: PUSH
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 254
3397: ADD
3398: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3399: LD_ADDR_EXP 18
3403: PUSH
3404: LD_EXP 18
3408: PUSH
3409: LD_VAR 0 1
3413: PPUSH
3414: CALL_OW 269
3418: ADD
3419: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3420: LD_VAR 0 1
3424: PUSH
3425: LD_INT 33
3427: PUSH
3428: LD_INT 2
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 3
3437: PUSH
3438: LD_INT 34
3440: PUSH
3441: LD_INT 13
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PPUSH
3456: CALL_OW 69
3460: IN
3461: IFFALSE 3477
// new_veh := new_veh + 1 ;
3463: LD_ADDR_EXP 19
3467: PUSH
3468: LD_EXP 19
3472: PUSH
3473: LD_INT 1
3475: PLUS
3476: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3477: LD_VAR 0 1
3481: PUSH
3482: LD_INT 34
3484: PUSH
3485: LD_INT 13
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 69
3496: IN
3497: IFFALSE 3518
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3499: LD_INT 26
3501: PPUSH
3502: LD_INT 3
3504: PPUSH
3505: LD_INT 2
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: LD_INT 13
3513: PPUSH
3514: CALL_OW 185
// if un = am_dep then
3518: LD_VAR 0 1
3522: PUSH
3523: LD_INT 25
3525: EQUAL
3526: IFFALSE 3694
// begin SayRadio ( Platonov , DPlat ) ;
3528: LD_EXP 4
3532: PPUSH
3533: LD_STRING DPlat
3535: PPUSH
3536: CALL_OW 94
// if timer <= 30 30$00 then
3540: LD_EXP 24
3544: PUSH
3545: LD_INT 63000
3547: LESSEQUAL
3548: IFFALSE 3562
// AddMedal ( gamma_med3 , 1 ) else
3550: LD_STRING gamma_med3
3552: PPUSH
3553: LD_INT 1
3555: PPUSH
3556: CALL_OW 101
3560: GO 3612
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3562: LD_EXP 24
3566: PUSH
3567: LD_INT 105000
3569: PUSH
3570: LD_INT 88200
3572: PUSH
3573: LD_INT 73500
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_EXP 1
3585: ARRAY
3586: LESSEQUAL
3587: IFFALSE 3601
// AddMedal ( gamma_med3 , 2 ) else
3589: LD_STRING gamma_med3
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 101
3599: GO 3612
// AddMedal ( gamma_med3 , - 1 ) ;
3601: LD_STRING gamma_med3
3603: PPUSH
3604: LD_INT 1
3606: NEG
3607: PPUSH
3608: CALL_OW 101
// if not comp_tested then
3612: LD_EXP 22
3616: NOT
3617: IFFALSE 3632
// AddMedal ( gamma_med2 , - 1 ) else
3619: LD_STRING gamma_med2
3621: PPUSH
3622: LD_INT 1
3624: NEG
3625: PPUSH
3626: CALL_OW 101
3630: GO 3642
// AddMedal ( gamma_med2 , 1 ) ;
3632: LD_STRING gamma_med2
3634: PPUSH
3635: LD_INT 1
3637: PPUSH
3638: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3642: LD_EXP 9
3646: PPUSH
3647: CALL_OW 301
3651: PUSH
3652: LD_EXP 23
3656: NOT
3657: AND
3658: IFFALSE 3672
// AddMedal ( gamma_med1 , 1 ) else
3660: LD_STRING gamma_med1
3662: PPUSH
3663: LD_INT 1
3665: PPUSH
3666: CALL_OW 101
3670: GO 3683
// AddMedal ( gamma_med1 , - 1 ) ;
3672: LD_STRING gamma_med1
3674: PPUSH
3675: LD_INT 1
3677: NEG
3678: PPUSH
3679: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3683: LD_STRING GAMMA_MEDALS
3685: PPUSH
3686: CALL_OW 102
// YouWin ;
3690: CALL_OW 103
// end ; if un = commander then
3694: LD_VAR 0 1
3698: PUSH
3699: LD_EXP 3
3703: EQUAL
3704: IFFALSE 3713
// YouLost ( comml ) ;
3706: LD_STRING comml
3708: PPUSH
3709: CALL_OW 104
// if un = sikorski then
3713: LD_VAR 0 1
3717: PUSH
3718: LD_EXP 9
3722: EQUAL
3723: IFFALSE 3735
// AddMedal ( gamma_med1 , 1 ) ;
3725: LD_STRING gamma_med1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: CALL_OW 101
// end ;
3735: PPOPN 1
3737: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
// begin if event = 1 then
3749: LD_VAR 0 1
3753: PUSH
3754: LD_INT 1
3756: EQUAL
3757: IFFALSE 4054
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3759: LD_ADDR_VAR 0 4
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 1
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 21
3776: PUSH
3777: LD_INT 3
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 3
3786: PUSH
3787: LD_INT 24
3789: PUSH
3790: LD_INT 1000
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: PPUSH
3806: CALL_OW 69
3810: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3811: LD_ADDR_VAR 0 8
3815: PUSH
3816: LD_INT 22
3818: PUSH
3819: LD_INT 1
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 25
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 24
3838: PUSH
3839: LD_INT 1000
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: PPUSH
3854: CALL_OW 69
3858: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3859: LD_ADDR_VAR 0 9
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 1
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 13
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 69
3892: ST_TO_ADDR
// if engs > 0 then
3893: LD_VAR 0 8
3897: PUSH
3898: LD_INT 0
3900: GREATER
3901: IFFALSE 4006
// for i = 1 to engs do
3903: LD_ADDR_VAR 0 2
3907: PUSH
3908: DOUBLE
3909: LD_INT 1
3911: DEC
3912: ST_TO_ADDR
3913: LD_VAR 0 8
3917: PUSH
3918: FOR_TO
3919: IFFALSE 4004
// begin if IsInUnit ( engs [ i ] ) then
3921: LD_VAR 0 8
3925: PUSH
3926: LD_VAR 0 2
3930: ARRAY
3931: PPUSH
3932: CALL_OW 310
3936: IFFALSE 3953
// ComExitBuilding ( engs [ i ] ) ;
3938: LD_VAR 0 8
3942: PUSH
3943: LD_VAR 0 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3953: LD_INT 7
3955: PPUSH
3956: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3960: LD_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: ARRAY
3970: PPUSH
3971: CALL_OW 314
3975: NOT
3976: IFFALSE 4002
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3978: LD_VAR 0 8
3982: PUSH
3983: LD_VAR 0 2
3987: ARRAY
3988: PPUSH
3989: LD_VAR 0 4
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: CALL_OW 130
// end ;
4002: GO 3918
4004: POP
4005: POP
// if crane > 0 then
4006: LD_VAR 0 9
4010: PUSH
4011: LD_INT 0
4013: GREATER
4014: IFFALSE 4054
// if not HasTask ( crane [ 1 ] ) then
4016: LD_VAR 0 9
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: CALL_OW 314
4029: NOT
4030: IFFALSE 4054
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4032: LD_VAR 0 9
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: LD_VAR 0 4
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: PPUSH
4050: CALL_OW 130
// end ; if event = 2 then
4054: LD_VAR 0 1
4058: PUSH
4059: LD_INT 2
4061: EQUAL
4062: IFFALSE 4184
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4064: LD_ADDR_VAR 0 8
4068: PUSH
4069: LD_INT 22
4071: PUSH
4072: LD_INT 1
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 2
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 69
4097: ST_TO_ADDR
// if engs > 0 then
4098: LD_VAR 0 8
4102: PUSH
4103: LD_INT 0
4105: GREATER
4106: IFFALSE 4184
// for i = 1 to engs do
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: DOUBLE
4114: LD_INT 1
4116: DEC
4117: ST_TO_ADDR
4118: LD_VAR 0 8
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4182
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4126: LD_VAR 0 8
4130: PUSH
4131: LD_VAR 0 2
4135: ARRAY
4136: PPUSH
4137: CALL_OW 314
4141: NOT
4142: PUSH
4143: LD_VAR 0 8
4147: PUSH
4148: LD_VAR 0 2
4152: ARRAY
4153: PPUSH
4154: CALL_OW 310
4158: NOT
4159: AND
4160: IFFALSE 4180
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4162: LD_VAR 0 8
4166: PUSH
4167: LD_VAR 0 2
4171: ARRAY
4172: PPUSH
4173: LD_INT 25
4175: PPUSH
4176: CALL_OW 120
4180: GO 4123
4182: POP
4183: POP
// end ; if event = 3 then
4184: LD_VAR 0 1
4188: PUSH
4189: LD_INT 3
4191: EQUAL
4192: IFFALSE 4556
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4194: LD_ADDR_VAR 0 4
4198: PUSH
4199: LD_INT 22
4201: PUSH
4202: LD_INT 1
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 21
4211: PUSH
4212: LD_INT 1
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 3
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 4
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PUSH
4236: LD_INT 3
4238: PUSH
4239: LD_INT 24
4241: PUSH
4242: LD_INT 800
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: PPUSH
4262: CALL_OW 69
4266: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4267: LD_ADDR_VAR 0 5
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 25
4284: PUSH
4285: LD_INT 4
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 69
4300: ST_TO_ADDR
// if filter > 0 then
4301: LD_VAR 0 4
4305: PUSH
4306: LD_INT 0
4308: GREATER
4309: IFFALSE 4498
// begin for i = 1 to doc do
4311: LD_ADDR_VAR 0 2
4315: PUSH
4316: DOUBLE
4317: LD_INT 1
4319: DEC
4320: ST_TO_ADDR
4321: LD_VAR 0 5
4325: PUSH
4326: FOR_TO
4327: IFFALSE 4427
// begin if IsInUnit ( doc [ i ] ) then
4329: LD_VAR 0 5
4333: PUSH
4334: LD_VAR 0 2
4338: ARRAY
4339: PPUSH
4340: CALL_OW 310
4344: IFFALSE 4361
// ComExitBuilding ( doc [ i ] ) ;
4346: LD_VAR 0 5
4350: PUSH
4351: LD_VAR 0 2
4355: ARRAY
4356: PPUSH
4357: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4361: LD_VAR 0 4
4365: PUSH
4366: LD_INT 1
4368: ARRAY
4369: PPUSH
4370: LD_INT 46
4372: PPUSH
4373: CALL_OW 296
4377: PUSH
4378: LD_INT 10
4380: LESS
4381: PUSH
4382: LD_VAR 0 5
4386: PUSH
4387: LD_VAR 0 2
4391: ARRAY
4392: PPUSH
4393: CALL_OW 314
4397: NOT
4398: AND
4399: IFFALSE 4425
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4401: LD_VAR 0 5
4405: PUSH
4406: LD_VAR 0 2
4410: ARRAY
4411: PPUSH
4412: LD_VAR 0 4
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PPUSH
4421: CALL_OW 128
// end ;
4425: GO 4326
4427: POP
4428: POP
// for i = 1 to filter do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_VAR 0 4
4443: PUSH
4444: FOR_TO
4445: IFFALSE 4494
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4447: LD_VAR 0 4
4451: PUSH
4452: LD_VAR 0 2
4456: ARRAY
4457: PPUSH
4458: LD_INT 46
4460: PPUSH
4461: CALL_OW 296
4465: PUSH
4466: LD_INT 10
4468: GREATER
4469: IFFALSE 4492
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4471: LD_VAR 0 4
4475: PUSH
4476: LD_VAR 0 2
4480: ARRAY
4481: PPUSH
4482: LD_INT 47
4484: PPUSH
4485: LD_INT 12
4487: PPUSH
4488: CALL_OW 111
4492: GO 4444
4494: POP
4495: POP
// end else
4496: GO 4556
// for i = 1 to doc do
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: DOUBLE
4504: LD_INT 1
4506: DEC
4507: ST_TO_ADDR
4508: LD_VAR 0 5
4512: PUSH
4513: FOR_TO
4514: IFFALSE 4554
// if not IsInUnit ( doc [ i ] ) then
4516: LD_VAR 0 5
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: PPUSH
4527: CALL_OW 310
4531: NOT
4532: IFFALSE 4552
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4534: LD_VAR 0 5
4538: PUSH
4539: LD_VAR 0 2
4543: ARRAY
4544: PPUSH
4545: LD_INT 46
4547: PPUSH
4548: CALL_OW 120
4552: GO 4513
4554: POP
4555: POP
// end ; if event = 4 then
4556: LD_VAR 0 1
4560: PUSH
4561: LD_INT 4
4563: EQUAL
4564: IFFALSE 4815
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4566: LD_ADDR_VAR 0 6
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 5
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: ST_TO_ADDR
// for i = 1 to bac do
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: DOUBLE
4606: LD_INT 1
4608: DEC
4609: ST_TO_ADDR
4610: LD_VAR 0 6
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4657
// if UnitsInside ( bac [ i ] ) < 6 then
4618: LD_VAR 0 6
4622: PUSH
4623: LD_VAR 0 2
4627: ARRAY
4628: PPUSH
4629: CALL_OW 313
4633: PUSH
4634: LD_INT 6
4636: LESS
4637: IFFALSE 4655
// place := bac [ i ] ;
4639: LD_ADDR_VAR 0 7
4643: PUSH
4644: LD_VAR 0 6
4648: PUSH
4649: LD_VAR 0 2
4653: ARRAY
4654: ST_TO_ADDR
4655: GO 4615
4657: POP
4658: POP
// if place then
4659: LD_VAR 0 7
4663: IFFALSE 4815
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4665: LD_ADDR_VAR 0 4
4669: PUSH
4670: LD_INT 22
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 25
4695: PUSH
4696: LD_INT 5
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 24
4710: PUSH
4711: LD_INT 1000
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PUSH
4723: EMPTY
4724: LIST
4725: PPUSH
4726: CALL_OW 69
4730: PUSH
4731: LD_EXP 17
4735: DIFF
4736: ST_TO_ADDR
// for i = 1 to filter do
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: DOUBLE
4743: LD_INT 1
4745: DEC
4746: ST_TO_ADDR
4747: LD_VAR 0 4
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4813
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4755: LD_VAR 0 4
4759: PUSH
4760: LD_VAR 0 2
4764: ARRAY
4765: PPUSH
4766: CALL_OW 310
4770: NOT
4771: PUSH
4772: LD_VAR 0 4
4776: PUSH
4777: LD_VAR 0 2
4781: ARRAY
4782: PPUSH
4783: CALL_OW 314
4787: NOT
4788: AND
4789: IFFALSE 4811
// ComEnterUnit ( filter [ i ] , place ) ;
4791: LD_VAR 0 4
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_VAR 0 7
4806: PPUSH
4807: CALL_OW 120
4811: GO 4752
4813: POP
4814: POP
// end ; end ; if event = 5 then
4815: LD_VAR 0 1
4819: PUSH
4820: LD_INT 5
4822: EQUAL
4823: IFFALSE 4977
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4825: LD_INT 12
4827: PPUSH
4828: LD_INT 81
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 70
4842: PUSH
4843: LD_INT 0
4845: EQUAL
4846: IFFALSE 4977
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4848: LD_ADDR_VAR 0 8
4852: PUSH
4853: LD_INT 22
4855: PUSH
4856: LD_INT 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 25
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 69
4881: ST_TO_ADDR
// if engs > 0 then
4882: LD_VAR 0 8
4886: PUSH
4887: LD_INT 0
4889: GREATER
4890: IFFALSE 4977
// for i = 1 to engs do
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: DOUBLE
4898: LD_INT 1
4900: DEC
4901: ST_TO_ADDR
4902: LD_VAR 0 8
4906: PUSH
4907: FOR_TO
4908: IFFALSE 4975
// if not HasTask ( engs [ i ] ) then
4910: LD_VAR 0 8
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: CALL_OW 314
4925: NOT
4926: IFFALSE 4973
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4928: LD_VAR 0 8
4932: PUSH
4933: LD_VAR 0 2
4937: ARRAY
4938: PPUSH
4939: LD_INT 32
4941: PPUSH
4942: LD_EXP 18
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: LD_EXP 18
4955: PUSH
4956: LD_INT 2
4958: ARRAY
4959: PPUSH
4960: LD_EXP 18
4964: PUSH
4965: LD_INT 3
4967: ARRAY
4968: PPUSH
4969: CALL_OW 145
4973: GO 4907
4975: POP
4976: POP
// end ; end ; if event = 6 then
4977: LD_VAR 0 1
4981: PUSH
4982: LD_INT 6
4984: EQUAL
4985: IFFALSE 5169
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4987: LD_ADDR_VAR 0 6
4991: PUSH
4992: LD_INT 22
4994: PUSH
4995: LD_INT 1
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PPUSH
5016: CALL_OW 69
5020: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5021: LD_VAR 0 6
5025: PUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 30
5038: PUSH
5039: LD_INT 32
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 58
5048: PUSH
5049: EMPTY
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: PPUSH
5060: CALL_OW 69
5064: PUSH
5065: LD_INT 0
5067: GREATER
5068: AND
5069: IFFALSE 5169
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5071: LD_ADDR_VAR 0 10
5075: PUSH
5076: LD_INT 22
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 30
5088: PUSH
5089: LD_INT 32
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 58
5098: PUSH
5099: EMPTY
5100: LIST
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: PUSH
5115: LD_INT 1
5117: ARRAY
5118: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: LD_VAR 0 6
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: PPUSH
5133: CALL_OW 313
5137: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5151: LD_VAR 0 3
5155: PUSH
5156: LD_INT 1
5158: ARRAY
5159: PPUSH
5160: LD_VAR 0 10
5164: PPUSH
5165: CALL_OW 180
// end ; end ; end ;
5169: PPOPN 10
5171: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_INT 1
5179: EQUAL
5180: PUSH
5181: LD_VAR 0 2
5185: PUSH
5186: LD_INT 3
5188: EQUAL
5189: AND
5190: IFFALSE 5200
// contact_am := true ;
5192: LD_ADDR_EXP 16
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// end ;
5200: PPOPN 2
5202: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: LD_VAR 0 3
5217: PPUSH
5218: CALL 22864 0 3
// end ;
5222: PPOPN 3
5224: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL 22872 0 1
// end ; end_of_file
5234: PPOPN 1
5236: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
5241: PPUSH
5242: PPUSH
5243: PPUSH
5244: PPUSH
5245: PPUSH
5246: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5247: LD_ADDR_VAR 0 5
5251: PUSH
5252: LD_INT 5
5254: PUSH
5255: LD_INT 6
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: LD_EXP 1
5270: ARRAY
5271: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5272: LD_ADDR_VAR 0 6
5276: PUSH
5277: LD_INT 4
5279: PUSH
5280: LD_INT 4
5282: PUSH
5283: LD_INT 4
5285: PUSH
5286: LD_INT 5
5288: PUSH
5289: LD_INT 5
5291: PUSH
5292: LD_INT 5
5294: PUSH
5295: LD_INT 6
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// SForce := [ ] ;
5307: LD_ADDR_EXP 11
5311: PUSH
5312: EMPTY
5313: ST_TO_ADDR
// Sikorski_Ar := false ;
5314: LD_ADDR_EXP 12
5318: PUSH
5319: LD_INT 0
5321: ST_TO_ADDR
// attacked := false ;
5322: LD_ADDR_EXP 15
5326: PUSH
5327: LD_INT 0
5329: ST_TO_ADDR
// contact_am := false ;
5330: LD_ADDR_EXP 16
5334: PUSH
5335: LD_INT 0
5337: ST_TO_ADDR
// patrol := [ ] ;
5338: LD_ADDR_EXP 17
5342: PUSH
5343: EMPTY
5344: ST_TO_ADDR
// gamma_towers := [ ] ;
5345: LD_ADDR_EXP 18
5349: PUSH
5350: EMPTY
5351: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5352: LD_INT 25
5354: PPUSH
5355: LD_STRING gamma
5357: PPUSH
5358: CALL_OW 500
// uc_side := 1 ;
5362: LD_ADDR_OWVAR 20
5366: PUSH
5367: LD_INT 1
5369: ST_TO_ADDR
// uc_nation := 1 ;
5370: LD_ADDR_OWVAR 21
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// hc_importance := 0 ;
5378: LD_ADDR_OWVAR 32
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5386: LD_ADDR_OWVAR 26
5390: PUSH
5391: LD_STRING Jeremy Sikorski
5393: ST_TO_ADDR
// hc_gallery := us ;
5394: LD_ADDR_OWVAR 33
5398: PUSH
5399: LD_STRING us
5401: ST_TO_ADDR
// hc_face_number := 19 ;
5402: LD_ADDR_OWVAR 34
5406: PUSH
5407: LD_INT 19
5409: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5410: LD_ADDR_OWVAR 31
5414: PUSH
5415: LD_VAR 0 5
5419: PPUSH
5420: LD_VAR 0 5
5424: PUSH
5425: LD_INT 2
5427: PLUS
5428: PPUSH
5429: CALL_OW 12
5433: PUSH
5434: LD_INT 4
5436: PUSH
5437: LD_INT 6
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: ST_TO_ADDR
// hc_sex := sex_male ;
5449: LD_ADDR_OWVAR 27
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// hc_class := 1 ;
5457: LD_ADDR_OWVAR 28
5461: PUSH
5462: LD_INT 1
5464: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5465: LD_ADDR_OWVAR 29
5469: PUSH
5470: LD_INT 10
5472: PUSH
5473: LD_INT 11
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: ST_TO_ADDR
// sikorski := CreateHuman ;
5480: LD_ADDR_EXP 9
5484: PUSH
5485: CALL_OW 44
5489: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5490: LD_ADDR_OWVAR 26
5494: PUSH
5495: LD_STRING Lucy Donaldson
5497: ST_TO_ADDR
// hc_gallery := us ;
5498: LD_ADDR_OWVAR 33
5502: PUSH
5503: LD_STRING us
5505: ST_TO_ADDR
// hc_face_number := 2 ;
5506: LD_ADDR_OWVAR 34
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5514: LD_ADDR_OWVAR 31
5518: PUSH
5519: LD_VAR 0 5
5523: PPUSH
5524: LD_VAR 0 5
5528: PUSH
5529: LD_INT 2
5531: PLUS
5532: PPUSH
5533: CALL_OW 12
5537: PUSH
5538: LD_INT 6
5540: PUSH
5541: LD_INT 4
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: ST_TO_ADDR
// hc_sex := sex_female ;
5553: LD_ADDR_OWVAR 27
5557: PUSH
5558: LD_INT 2
5560: ST_TO_ADDR
// hc_class := 1 ;
5561: LD_ADDR_OWVAR 28
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// donald := CreateHuman ;
5569: LD_ADDR_EXP 13
5573: PUSH
5574: CALL_OW 44
5578: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5579: LD_ADDR_OWVAR 26
5583: PUSH
5584: LD_STRING Peter Van Houten
5586: ST_TO_ADDR
// hc_gallery := us ;
5587: LD_ADDR_OWVAR 33
5591: PUSH
5592: LD_STRING us
5594: ST_TO_ADDR
// hc_face_number := 16 ;
5595: LD_ADDR_OWVAR 34
5599: PUSH
5600: LD_INT 16
5602: ST_TO_ADDR
// hc_sex := sex_male ;
5603: LD_ADDR_OWVAR 27
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// van := CreateHuman ;
5611: LD_ADDR_EXP 14
5615: PUSH
5616: CALL_OW 44
5620: ST_TO_ADDR
// hc_importance := 0 ;
5621: LD_ADDR_OWVAR 32
5625: PUSH
5626: LD_INT 0
5628: ST_TO_ADDR
// case dif of 1 :
5629: LD_EXP 1
5633: PUSH
5634: LD_INT 1
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5642
5640: GO 5653
5642: POP
// lw = 1 ; 2 :
5643: LD_ADDR_VAR 0 8
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
5651: GO 5700
5653: LD_INT 2
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5661
5659: GO 5680
5661: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5662: LD_ADDR_VAR 0 8
5666: PUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: CALL_OW 12
5677: ST_TO_ADDR
5678: GO 5700
5680: LD_INT 3
5682: DOUBLE
5683: EQUAL
5684: IFTRUE 5688
5686: GO 5699
5688: POP
// lw = 2 ; end ;
5689: LD_ADDR_VAR 0 8
5693: PUSH
5694: LD_INT 2
5696: ST_TO_ADDR
5697: GO 5700
5699: POP
// case lw of 1 :
5700: LD_VAR 0 8
5704: PUSH
5705: LD_INT 1
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5728
5713: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5714: LD_EXP 13
5718: PPUSH
5719: LD_INT 25
5721: PPUSH
5722: CALL_OW 52
5726: GO 5752
5728: LD_INT 2
5730: DOUBLE
5731: EQUAL
5732: IFTRUE 5736
5734: GO 5751
5736: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5737: LD_EXP 14
5741: PPUSH
5742: LD_INT 25
5744: PPUSH
5745: CALL_OW 52
5749: GO 5752
5751: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5752: LD_ADDR_VAR 0 2
5756: PUSH
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 30
5769: PUSH
5770: LD_INT 32
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: PUSH
5786: FOR_IN
5787: IFFALSE 5841
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5789: LD_INT 1
5791: PPUSH
5792: LD_VAR 0 5
5796: PPUSH
5797: CALL 734 0 2
5801: PPUSH
5802: LD_VAR 0 2
5806: PPUSH
5807: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5811: LD_VAR 0 2
5815: PPUSH
5816: LD_VAR 0 6
5820: PUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 12
5833: ARRAY
5834: PPUSH
5835: CALL_OW 431
// end ;
5839: GO 5786
5841: POP
5842: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5843: LD_ADDR_VAR 0 7
5847: PUSH
5848: LD_INT 22
5850: PUSH
5851: LD_INT 1
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 2
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 1
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 5
5873: PUSH
5874: EMPTY
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 69
5890: ST_TO_ADDR
// for i = 1 to sol do
5891: LD_ADDR_VAR 0 2
5895: PUSH
5896: DOUBLE
5897: LD_INT 1
5899: DEC
5900: ST_TO_ADDR
5901: LD_VAR 0 7
5905: PUSH
5906: FOR_TO
5907: IFFALSE 5929
// SetTag ( sol [ i ] , 1 ) ;
5909: LD_VAR 0 7
5913: PUSH
5914: LD_VAR 0 2
5918: ARRAY
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: CALL_OW 109
5927: GO 5906
5929: POP
5930: POP
// for i = 1 to 3 do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: DOUBLE
5937: LD_INT 1
5939: DEC
5940: ST_TO_ADDR
5941: LD_INT 3
5943: PUSH
5944: FOR_TO
5945: IFFALSE 5969
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5947: LD_INT 3
5949: PPUSH
5950: LD_VAR 0 5
5954: PPUSH
5955: CALL 734 0 2
5959: PPUSH
5960: LD_INT 56
5962: PPUSH
5963: CALL_OW 52
5967: GO 5944
5969: POP
5970: POP
// for i = 1 to 6 do
5971: LD_ADDR_VAR 0 2
5975: PUSH
5976: DOUBLE
5977: LD_INT 1
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 6
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6009
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
5987: LD_INT 3
5989: PPUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: CALL 734 0 2
5999: PPUSH
6000: LD_INT 26
6002: PPUSH
6003: CALL_OW 52
6007: GO 5984
6009: POP
6010: POP
// for i = 1 to 5 do
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: DOUBLE
6017: LD_INT 1
6019: DEC
6020: ST_TO_ADDR
6021: LD_INT 5
6023: PUSH
6024: FOR_TO
6025: IFFALSE 6052
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_VAR 0 5
6034: PPUSH
6035: CALL 734 0 2
6039: PPUSH
6040: LD_INT 7
6042: PPUSH
6043: LD_INT 0
6045: PPUSH
6046: CALL_OW 49
6050: GO 6024
6052: POP
6053: POP
// for i = 1 to 3 do
6054: LD_ADDR_VAR 0 2
6058: PUSH
6059: DOUBLE
6060: LD_INT 1
6062: DEC
6063: ST_TO_ADDR
6064: LD_INT 3
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6092
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6070: LD_INT 4
6072: PPUSH
6073: LD_VAR 0 5
6077: PPUSH
6078: CALL 734 0 2
6082: PPUSH
6083: LD_INT 46
6085: PPUSH
6086: CALL_OW 52
6090: GO 6067
6092: POP
6093: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 30
6111: PUSH
6112: LD_INT 5
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PPUSH
6123: CALL_OW 69
6127: PUSH
6128: FOR_IN
6129: IFFALSE 6243
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6131: LD_INT 5
6133: PPUSH
6134: LD_VAR 0 5
6138: PPUSH
6139: CALL 734 0 2
6143: PPUSH
6144: LD_VAR 0 2
6148: PPUSH
6149: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6153: LD_INT 5
6155: PPUSH
6156: LD_VAR 0 5
6160: PPUSH
6161: CALL 734 0 2
6165: PPUSH
6166: LD_VAR 0 2
6170: PPUSH
6171: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6175: LD_INT 1
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: CALL 734 0 2
6187: PPUSH
6188: LD_VAR 0 2
6192: PPUSH
6193: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6197: LD_INT 1
6199: PPUSH
6200: LD_VAR 0 5
6204: PPUSH
6205: CALL 734 0 2
6209: PPUSH
6210: LD_VAR 0 2
6214: PPUSH
6215: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6219: LD_INT 1
6221: PPUSH
6222: LD_VAR 0 5
6226: PPUSH
6227: CALL 734 0 2
6231: PPUSH
6232: LD_VAR 0 2
6236: PPUSH
6237: CALL_OW 52
// end ;
6241: GO 6128
6243: POP
6244: POP
// if dif > 1 then
6245: LD_EXP 1
6249: PUSH
6250: LD_INT 1
6252: GREATER
6253: IFFALSE 6326
// for i = 1 to ( dif - 1 ) do
6255: LD_ADDR_VAR 0 2
6259: PUSH
6260: DOUBLE
6261: LD_INT 1
6263: DEC
6264: ST_TO_ADDR
6265: LD_EXP 1
6269: PUSH
6270: LD_INT 1
6272: MINUS
6273: PUSH
6274: FOR_TO
6275: IFFALSE 6324
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6277: LD_ADDR_EXP 17
6281: PUSH
6282: LD_EXP 17
6286: PUSH
6287: LD_INT 1
6289: PPUSH
6290: LD_VAR 0 5
6294: PPUSH
6295: CALL 734 0 2
6299: ADD
6300: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6301: LD_EXP 17
6305: PUSH
6306: LD_VAR 0 2
6310: ARRAY
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: LD_INT 0
6317: PPUSH
6318: CALL_OW 49
// end ;
6322: GO 6274
6324: POP
6325: POP
// game_started := true ;
6326: LD_ADDR_EXP 10
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6334: LD_INT 26
6336: PPUSH
6337: LD_INT 3
6339: PPUSH
6340: LD_INT 2
6342: PPUSH
6343: LD_INT 2
6345: PPUSH
6346: LD_INT 13
6348: PPUSH
6349: CALL_OW 125
// while ( contact_am = false ) do
6353: LD_EXP 16
6357: PUSH
6358: LD_INT 0
6360: EQUAL
6361: IFFALSE 6372
// begin Wait ( 0 0$01 ) ;
6363: LD_INT 35
6365: PPUSH
6366: CALL_OW 67
// end ;
6370: GO 6353
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6372: LD_INT 8400
6374: PUSH
6375: LD_INT 6300
6377: PUSH
6378: LD_INT 5250
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_EXP 1
6390: ARRAY
6391: PPUSH
6392: CALL_OW 67
// case dif of 1 :
6396: LD_EXP 1
6400: PUSH
6401: LD_INT 1
6403: DOUBLE
6404: EQUAL
6405: IFTRUE 6409
6407: GO 6584
6409: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6410: LD_INT 26
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 1
6418: PPUSH
6419: LD_INT 2
6421: PPUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: LD_INT 1
6442: PPUSH
6443: LD_INT 4
6445: PPUSH
6446: CALL_OW 12
6450: ARRAY
6451: PPUSH
6452: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6456: LD_INT 26
6458: PPUSH
6459: LD_INT 3
6461: PPUSH
6462: LD_INT 1
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: LD_INT 4
6470: PUSH
6471: LD_INT 5
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 1
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: CALL_OW 12
6492: ARRAY
6493: PPUSH
6494: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6498: LD_INT 26
6500: PPUSH
6501: LD_INT 3
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: LD_INT 4
6512: PUSH
6513: LD_INT 5
6515: PUSH
6516: LD_INT 5
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_INT 3
6529: PPUSH
6530: CALL_OW 12
6534: ARRAY
6535: PPUSH
6536: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6540: LD_INT 26
6542: PPUSH
6543: LD_INT 3
6545: PPUSH
6546: LD_INT 1
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: LD_INT 4
6554: PUSH
6555: LD_INT 3
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 3
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: PPUSH
6578: CALL_OW 185
// end ; 2 :
6582: GO 7111
6584: LD_INT 2
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6805
6592: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6593: LD_INT 26
6595: PPUSH
6596: LD_INT 3
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 2
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 5
6610: PUSH
6611: LD_INT 5
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6635: LD_INT 26
6637: PPUSH
6638: LD_INT 3
6640: PPUSH
6641: LD_INT 1
6643: PPUSH
6644: LD_INT 2
6646: PPUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 5
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_INT 3
6666: PPUSH
6667: CALL_OW 12
6671: ARRAY
6672: PPUSH
6673: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6677: LD_INT 26
6679: PPUSH
6680: LD_INT 3
6682: PPUSH
6683: LD_INT 1
6685: PPUSH
6686: LD_INT 2
6688: PPUSH
6689: LD_INT 4
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 1
6705: PPUSH
6706: LD_INT 3
6708: PPUSH
6709: CALL_OW 12
6713: ARRAY
6714: PPUSH
6715: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6719: LD_INT 26
6721: PPUSH
6722: LD_INT 4
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_INT 2
6730: PPUSH
6731: LD_INT 4
6733: PUSH
6734: LD_INT 5
6736: PUSH
6737: LD_INT 6
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 1
6747: PPUSH
6748: LD_INT 3
6750: PPUSH
6751: CALL_OW 12
6755: ARRAY
6756: PPUSH
6757: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6761: LD_INT 26
6763: PPUSH
6764: LD_INT 4
6766: PPUSH
6767: LD_INT 1
6769: PPUSH
6770: LD_INT 2
6772: PPUSH
6773: LD_INT 4
6775: PUSH
6776: LD_INT 5
6778: PUSH
6779: LD_INT 6
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 1
6789: PPUSH
6790: LD_INT 3
6792: PPUSH
6793: CALL_OW 12
6797: ARRAY
6798: PPUSH
6799: CALL_OW 185
// end ; 3 :
6803: GO 7111
6805: LD_INT 3
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 7110
6813: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6814: LD_INT 26
6816: PPUSH
6817: LD_INT 3
6819: PPUSH
6820: LD_INT 1
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: LD_INT 4
6828: PUSH
6829: LD_INT 5
6831: PUSH
6832: LD_INT 5
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 1
6842: PPUSH
6843: LD_INT 3
6845: PPUSH
6846: CALL_OW 12
6850: ARRAY
6851: PPUSH
6852: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6856: LD_INT 26
6858: PPUSH
6859: LD_INT 3
6861: PPUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_INT 2
6867: PPUSH
6868: LD_INT 4
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: LD_INT 5
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 1
6884: PPUSH
6885: LD_INT 3
6887: PPUSH
6888: CALL_OW 12
6892: ARRAY
6893: PPUSH
6894: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6898: LD_INT 26
6900: PPUSH
6901: LD_INT 3
6903: PPUSH
6904: LD_INT 1
6906: PPUSH
6907: LD_INT 2
6909: PPUSH
6910: LD_INT 4
6912: PUSH
6913: LD_INT 5
6915: PUSH
6916: LD_INT 5
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 1
6926: PPUSH
6927: LD_INT 3
6929: PPUSH
6930: CALL_OW 12
6934: ARRAY
6935: PPUSH
6936: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6940: LD_INT 26
6942: PPUSH
6943: LD_INT 3
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 2
6951: PPUSH
6952: LD_INT 4
6954: PUSH
6955: LD_INT 5
6957: PUSH
6958: LD_INT 5
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 1
6968: PPUSH
6969: LD_INT 3
6971: PPUSH
6972: CALL_OW 12
6976: ARRAY
6977: PPUSH
6978: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6982: LD_INT 26
6984: PPUSH
6985: LD_INT 4
6987: PPUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: LD_INT 4
6996: PUSH
6997: LD_INT 5
6999: PUSH
7000: LD_INT 6
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 1
7010: PPUSH
7011: LD_INT 3
7013: PPUSH
7014: CALL_OW 12
7018: ARRAY
7019: PPUSH
7020: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7024: LD_INT 26
7026: PPUSH
7027: LD_INT 4
7029: PPUSH
7030: LD_INT 1
7032: PPUSH
7033: LD_INT 2
7035: PPUSH
7036: LD_INT 4
7038: PUSH
7039: LD_INT 5
7041: PUSH
7042: LD_INT 6
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 1
7052: PPUSH
7053: LD_INT 3
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7066: LD_INT 26
7068: PPUSH
7069: LD_INT 4
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: LD_INT 4
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 1
7094: PPUSH
7095: LD_INT 3
7097: PPUSH
7098: CALL_OW 12
7102: ARRAY
7103: PPUSH
7104: CALL_OW 185
// end ; end ;
7108: GO 7111
7110: POP
// end ;
7111: LD_VAR 0 1
7115: RET
// every 0 0$01 do var i , filter ;
7116: GO 7118
7118: DISABLE
7119: LD_INT 0
7121: PPUSH
7122: PPUSH
// begin enable ;
7123: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7124: LD_INT 22
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 25
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PUSH
7153: LD_INT 0
7155: GREATER
7156: IFFALSE 7165
// RaiseSailEvent ( 3 ) ;
7158: LD_INT 3
7160: PPUSH
7161: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7165: LD_INT 22
7167: PUSH
7168: LD_INT 1
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 21
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 3
7187: PUSH
7188: LD_INT 24
7190: PUSH
7191: LD_INT 1000
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PPUSH
7207: CALL_OW 69
7211: PUSH
7212: LD_INT 0
7214: GREATER
7215: IFFALSE 7226
// RaiseSailEvent ( 1 ) else
7217: LD_INT 1
7219: PPUSH
7220: CALL_OW 427
7224: GO 7233
// RaiseSailEvent ( 2 ) ;
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7233: LD_INT 22
7235: PUSH
7236: LD_INT 1
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 30
7245: PUSH
7246: LD_INT 5
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: PUSH
7262: LD_INT 0
7264: GREATER
7265: IFFALSE 7274
// RaiseSailEvent ( 4 ) ;
7267: LD_INT 4
7269: PPUSH
7270: CALL_OW 427
// if gamma_towers > 0 then
7274: LD_EXP 18
7278: PUSH
7279: LD_INT 0
7281: GREATER
7282: IFFALSE 7291
// RaiseSailEvent ( 5 ) ;
7284: LD_INT 5
7286: PPUSH
7287: CALL_OW 427
// end ;
7291: PPOPN 2
7293: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7294: GO 7296
7296: DISABLE
7297: LD_INT 0
7299: PPUSH
7300: PPUSH
// begin enable ;
7301: ENABLE
// if new_veh > 0 then
7302: LD_EXP 19
7306: PUSH
7307: LD_INT 0
7309: GREATER
7310: IFFALSE 7497
// while ( new_veh > 0 ) do
7312: LD_EXP 19
7316: PUSH
7317: LD_INT 0
7319: GREATER
7320: IFFALSE 7497
// begin Wait ( 0 0$01 ) ;
7322: LD_INT 35
7324: PPUSH
7325: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7329: LD_INT 26
7331: PPUSH
7332: CALL_OW 461
7336: PUSH
7337: LD_INT 2
7339: EQUAL
7340: IFFALSE 7495
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7342: LD_ADDR_VAR 0 1
7346: PUSH
7347: LD_INT 2
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: LD_INT 4
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 4
7370: PPUSH
7371: CALL_OW 12
7375: ARRAY
7376: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7377: LD_VAR 0 1
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: IN
7392: IFFALSE 7427
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7394: LD_ADDR_VAR 0 2
7398: PUSH
7399: LD_INT 4
7401: PUSH
7402: LD_INT 5
7404: PUSH
7405: LD_INT 7
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 1
7415: PPUSH
7416: LD_INT 3
7418: PPUSH
7419: CALL_OW 12
7423: ARRAY
7424: ST_TO_ADDR
7425: GO 7458
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7427: LD_ADDR_VAR 0 2
7431: PUSH
7432: LD_INT 5
7434: PUSH
7435: LD_INT 7
7437: PUSH
7438: LD_INT 6
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_INT 3
7451: PPUSH
7452: CALL_OW 12
7456: ARRAY
7457: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7458: LD_INT 26
7460: PPUSH
7461: LD_VAR 0 1
7465: PPUSH
7466: LD_INT 1
7468: PPUSH
7469: LD_INT 2
7471: PPUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 125
// new_veh := new_veh - 1 ;
7481: LD_ADDR_EXP 19
7485: PUSH
7486: LD_EXP 19
7490: PUSH
7491: LD_INT 1
7493: MINUS
7494: ST_TO_ADDR
// end ; end ;
7495: GO 7312
// end ;
7497: PPOPN 2
7499: END
// every 0 0$01 do var v , filter , am_cmeh ;
7500: GO 7502
7502: DISABLE
7503: LD_INT 0
7505: PPUSH
7506: PPUSH
7507: PPUSH
// begin enable ;
7508: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7509: LD_ADDR_VAR 0 3
7513: PUSH
7514: LD_INT 56
7516: PPUSH
7517: CALL_OW 313
7521: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: LD_INT 22
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 33
7539: PUSH
7540: LD_INT 2
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 50
7549: PUSH
7550: EMPTY
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: ST_TO_ADDR
// if filter > 0 then
7566: LD_VAR 0 2
7570: PUSH
7571: LD_INT 0
7573: GREATER
7574: IFFALSE 7642
// begin for v in filter do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_VAR 0 2
7585: PUSH
7586: FOR_IN
7587: IFFALSE 7640
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7589: LD_VAR 0 1
7593: PPUSH
7594: CALL_OW 312
7598: NOT
7599: PUSH
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 302
7609: AND
7610: IFFALSE 7638
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_VAR 0 3
7621: PUSH
7622: LD_INT 1
7624: PPUSH
7625: LD_INT 3
7627: PPUSH
7628: CALL_OW 12
7632: ARRAY
7633: PPUSH
7634: CALL_OW 135
// end ;
7638: GO 7586
7640: POP
7641: POP
// end ; end ;
7642: PPOPN 3
7644: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7645: LD_INT 33
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 34
7660: PUSH
7661: LD_INT 13
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: PUSH
7681: LD_INT 4
7683: PUSH
7684: LD_INT 5
7686: PUSH
7687: LD_INT 7
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PUSH
7695: LD_EXP 1
7699: ARRAY
7700: EQUAL
7701: PUSH
7702: LD_INT 26
7704: PPUSH
7705: CALL_OW 461
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: AND
7714: IFFALSE 7925
7716: GO 7718
7718: DISABLE
7719: LD_INT 0
7721: PPUSH
7722: PPUSH
7723: PPUSH
// begin enable ;
7724: ENABLE
// if Sikorski_Ar then
7725: LD_EXP 12
7729: IFFALSE 7806
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7731: LD_ADDR_EXP 11
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: LD_INT 22
7741: PUSH
7742: LD_INT 4
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 22
7751: PUSH
7752: LD_INT 1
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: LD_INT 33
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 13
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: ST_TO_ADDR
7804: GO 7847
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7806: LD_ADDR_EXP 11
7810: PUSH
7811: LD_INT 33
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 34
7826: PUSH
7827: LD_INT 13
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 69
7846: ST_TO_ADDR
// repeat begin for un in SForce do
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_EXP 11
7856: PUSH
7857: FOR_IN
7858: IFFALSE 7913
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7860: LD_ADDR_VAR 0 3
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: LD_VAR 0 2
7894: PPUSH
7895: CALL_OW 74
7899: PPUSH
7900: CALL_OW 115
// Wait ( 0 0$01 ) ;
7904: LD_INT 35
7906: PPUSH
7907: CALL_OW 67
// end ;
7911: GO 7857
7913: POP
7914: POP
// end until SForce = 0 ;
7915: LD_EXP 11
7919: PUSH
7920: LD_INT 0
7922: EQUAL
7923: IFFALSE 7847
// end ;
7925: PPOPN 3
7927: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7928: LD_INT 0
7930: PPUSH
7931: PPUSH
7932: PPUSH
7933: PPUSH
7934: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 14
7942: PPUSH
7943: EMPTY
7944: PPUSH
7945: CALL_OW 70
7949: ST_TO_ADDR
// if tmp then
7950: LD_VAR 0 6
7954: IFFALSE 7988
// for i in tmp do
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_VAR 0 6
7965: PUSH
7966: FOR_IN
7967: IFFALSE 7986
// ComMoveXY ( i , 42 , 23 ) ;
7969: LD_VAR 0 3
7973: PPUSH
7974: LD_INT 42
7976: PPUSH
7977: LD_INT 23
7979: PPUSH
7980: CALL_OW 111
7984: GO 7966
7986: POP
7987: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
7988: LD_INT 14
7990: PPUSH
7991: LD_INT 1
7993: PPUSH
7994: CALL_OW 286
// uc_side := 4 ;
7998: LD_ADDR_OWVAR 20
8002: PUSH
8003: LD_INT 4
8005: ST_TO_ADDR
// uc_nation := 1 ;
8006: LD_ADDR_OWVAR 21
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8014: LD_ADDR_OWVAR 37
8018: PUSH
8019: LD_INT 4
8021: ST_TO_ADDR
// vc_control := control_manual ;
8022: LD_ADDR_OWVAR 38
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// vc_engine := engine_combustion ;
8030: LD_ADDR_OWVAR 39
8034: PUSH
8035: LD_INT 1
8037: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8038: LD_ADDR_OWVAR 40
8042: PUSH
8043: LD_INT 4
8045: PUSH
8046: LD_INT 5
8048: PUSH
8049: LD_INT 7
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_EXP 1
8061: ARRAY
8062: ST_TO_ADDR
// veh := CreateVehicle ;
8063: LD_ADDR_VAR 0 5
8067: PUSH
8068: CALL_OW 45
8072: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8073: LD_VAR 0 5
8077: PPUSH
8078: LD_INT 2
8080: PPUSH
8081: LD_INT 0
8083: PPUSH
8084: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8088: LD_EXP 9
8092: PPUSH
8093: LD_VAR 0 5
8097: PPUSH
8098: CALL_OW 52
// SetMark ( veh , 1 ) ;
8102: LD_VAR 0 5
8106: PPUSH
8107: LD_INT 1
8109: PPUSH
8110: CALL_OW 242
// while ( num > 0 ) do
8114: LD_VAR 0 1
8118: PUSH
8119: LD_INT 0
8121: GREATER
8122: IFFALSE 8289
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8124: LD_INT 3
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 3
8132: PUSH
8133: LD_INT 4
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: LD_EXP 1
8146: PPUSH
8147: LD_INT 4
8149: PPUSH
8150: CALL_OW 12
8154: ARRAY
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 4
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: LD_INT 5
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_EXP 1
8184: PUSH
8185: LD_INT 1
8187: PLUS
8188: PPUSH
8189: CALL_OW 12
8193: ARRAY
8194: PPUSH
8195: LD_INT 11
8197: PPUSH
8198: LD_INT 2
8200: PPUSH
8201: LD_INT 5
8203: PUSH
8204: LD_INT 6
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: LD_EXP 1
8219: ARRAY
8220: PPUSH
8221: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8225: LD_ADDR_VAR 0 4
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8245: LD_VAR 0 4
8249: PUSH
8250: LD_VAR 0 4
8254: ARRAY
8255: PPUSH
8256: LD_INT 36
8258: PPUSH
8259: LD_INT 18
8261: PPUSH
8262: CALL_OW 111
// Wait ( 0 0$02 ) ;
8266: LD_INT 70
8268: PPUSH
8269: CALL_OW 67
// num := num - 1 ;
8273: LD_ADDR_VAR 0 1
8277: PUSH
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: MINUS
8286: ST_TO_ADDR
// end ;
8287: GO 8114
// end ;
8289: LD_VAR 0 2
8293: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8294: LD_EXP 17
8298: PUSH
8299: LD_INT 0
8301: GREATER
8302: IFFALSE 8571
8304: GO 8306
8306: DISABLE
8307: LD_INT 0
8309: PPUSH
// begin enable ;
8310: ENABLE
// for i = 1 to patrol do
8311: LD_ADDR_VAR 0 1
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_EXP 17
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8569
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8329: LD_EXP 17
8333: PUSH
8334: LD_VAR 0 1
8338: ARRAY
8339: PUSH
8340: LD_EXP 17
8344: PUSH
8345: LD_VAR 0 1
8349: ARRAY
8350: PPUSH
8351: CALL_OW 300
8355: AND
8356: PUSH
8357: LD_EXP 17
8361: PUSH
8362: LD_VAR 0 1
8366: ARRAY
8367: PPUSH
8368: CALL_OW 314
8372: NOT
8373: AND
8374: IFFALSE 8524
// case i of 1 :
8376: LD_VAR 0 1
8380: PUSH
8381: LD_INT 1
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8452
8389: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8390: LD_EXP 17
8394: PUSH
8395: LD_VAR 0 1
8399: ARRAY
8400: PPUSH
8401: LD_INT 53
8403: PPUSH
8404: LD_INT 91
8406: PPUSH
8407: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8411: LD_EXP 17
8415: PUSH
8416: LD_VAR 0 1
8420: ARRAY
8421: PPUSH
8422: LD_INT 245
8424: PPUSH
8425: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8429: LD_EXP 17
8433: PUSH
8434: LD_VAR 0 1
8438: ARRAY
8439: PPUSH
8440: LD_INT 24
8442: PPUSH
8443: LD_INT 26
8445: PPUSH
8446: CALL_OW 171
// end ; 2 :
8450: GO 8524
8452: LD_INT 2
8454: DOUBLE
8455: EQUAL
8456: IFTRUE 8460
8458: GO 8523
8460: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8461: LD_EXP 17
8465: PUSH
8466: LD_VAR 0 1
8470: ARRAY
8471: PPUSH
8472: LD_INT 83
8474: PPUSH
8475: LD_INT 57
8477: PPUSH
8478: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8482: LD_EXP 17
8486: PUSH
8487: LD_VAR 0 1
8491: ARRAY
8492: PPUSH
8493: LD_INT 245
8495: PPUSH
8496: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8500: LD_EXP 17
8504: PUSH
8505: LD_VAR 0 1
8509: ARRAY
8510: PPUSH
8511: LD_INT 47
8513: PPUSH
8514: LD_INT 53
8516: PPUSH
8517: CALL_OW 171
// end ; end ;
8521: GO 8524
8523: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8524: LD_EXP 17
8528: PUSH
8529: LD_VAR 0 1
8533: ARRAY
8534: PPUSH
8535: CALL_OW 256
8539: PUSH
8540: LD_INT 1000
8542: LESS
8543: IFFALSE 8567
// patrol := patrol diff patrol [ i ] ;
8545: LD_ADDR_EXP 17
8549: PUSH
8550: LD_EXP 17
8554: PUSH
8555: LD_EXP 17
8559: PUSH
8560: LD_VAR 0 1
8564: ARRAY
8565: DIFF
8566: ST_TO_ADDR
// end ;
8567: GO 8326
8569: POP
8570: POP
// end ;
8571: PPOPN 1
8573: END
// every 0 0$10 do
8574: GO 8576
8576: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8577: LD_INT 42000
8579: PUSH
8580: LD_INT 37800
8582: PUSH
8583: LD_INT 33600
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: LD_EXP 1
8595: ARRAY
8596: PPUSH
8597: CALL_OW 67
// if not contact_am then
8601: LD_EXP 16
8605: NOT
8606: IFFALSE 8616
// contact_am := true ;
8608: LD_ADDR_EXP 16
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// end ; end_of_file
8616: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8617: LD_INT 0
8619: PPUSH
// comp_tested := false ;
8620: LD_ADDR_EXP 22
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sikorski_run := false ;
8628: LD_ADDR_EXP 23
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// InGameOn ;
8636: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8640: LD_INT 5
8642: PPUSH
8643: LD_INT 4
8645: PPUSH
8646: CALL_OW 86
// wait ( 0 0$2 ) ;
8650: LD_INT 70
8652: PPUSH
8653: CALL_OW 67
// CenterOnUnits ( commander ) ;
8657: LD_EXP 3
8661: PPUSH
8662: CALL_OW 85
// wait ( 0 0$01 ) ;
8666: LD_INT 35
8668: PPUSH
8669: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8673: LD_EXP 2
8677: PPUSH
8678: LD_STRING Dpop1
8680: PPUSH
8681: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8685: LD_EXP 3
8689: PPUSH
8690: LD_STRING Dcomm1
8692: PPUSH
8693: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8697: LD_EXP 2
8701: PPUSH
8702: LD_STRING Dpop2
8704: PPUSH
8705: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8709: LD_EXP 3
8713: PPUSH
8714: LD_STRING Dcomm2
8716: PPUSH
8717: CALL_OW 88
// InGameOff ;
8721: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8725: LD_STRING T1
8727: PPUSH
8728: CALL_OW 337
// end ;
8732: LD_VAR 0 1
8736: RET
// every 0 0$01 trigger timer > 2 2$01 do
8737: LD_EXP 24
8741: PUSH
8742: LD_INT 4235
8744: GREATER
8745: IFFALSE 8762
8747: GO 8749
8749: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8750: LD_EXP 5
8754: PPUSH
8755: LD_STRING DKap1
8757: PPUSH
8758: CALL_OW 94
// end ;
8762: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8763: LD_EXP 24
8767: PUSH
8768: LD_INT 46200
8770: PUSH
8771: LD_INT 52500
8773: PUSH
8774: LD_INT 63000
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: LD_EXP 1
8786: ARRAY
8787: GREATER
8788: IFFALSE 9155
8790: GO 8792
8792: DISABLE
8793: LD_INT 0
8795: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8796: LD_EXP 5
8800: PPUSH
8801: LD_STRING DKap2
8803: PPUSH
8804: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8808: LD_INT 10
8810: PPUSH
8811: CALL_OW 67
// Say ( commander , Dcommk ) ;
8815: LD_EXP 3
8819: PPUSH
8820: LD_STRING Dcommk
8822: PPUSH
8823: CALL_OW 88
// Wait ( 0 0$44 ) ;
8827: LD_INT 1540
8829: PPUSH
8830: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8834: LD_EXP 5
8838: PPUSH
8839: LD_INT 3
8841: PPUSH
8842: LD_INT 0
8844: PPUSH
8845: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8849: LD_EXP 5
8853: PPUSH
8854: CALL_OW 87
// Wait ( 0 0$10 ) ;
8858: LD_INT 350
8860: PPUSH
8861: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8865: LD_INT 6
8867: PUSH
8868: LD_INT 7
8870: PUSH
8871: LD_INT 8
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: LD_EXP 1
8883: ARRAY
8884: PPUSH
8885: CALL 7928 0 1
// Wait ( 2 2$00 ) ;
8889: LD_INT 4200
8891: PPUSH
8892: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8896: LD_INT 33
8898: PUSH
8899: LD_INT 2
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: LD_INT 34
8911: PUSH
8912: LD_INT 13
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 69
8931: PUSH
8932: LD_INT 3
8934: LESS
8935: IFFALSE 8946
// Wait ( 0 0$01 ) ;
8937: LD_INT 35
8939: PPUSH
8940: CALL_OW 67
8944: GO 8896
// uc_side := 4 ;
8946: LD_ADDR_OWVAR 20
8950: PUSH
8951: LD_INT 4
8953: ST_TO_ADDR
// uc_nation := 1 ;
8954: LD_ADDR_OWVAR 21
8958: PUSH
8959: LD_INT 1
8961: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8962: LD_ADDR_VAR 0 1
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_INT 4
8974: PUSH
8975: LD_INT 5
8977: PUSH
8978: LD_INT 6
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: LD_EXP 1
8990: ARRAY
8991: PUSH
8992: FOR_TO
8993: IFFALSE 9035
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
8995: LD_INT 1
8997: PPUSH
8998: LD_INT 5
9000: PUSH
9001: LD_INT 6
9003: PUSH
9004: LD_INT 7
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: PUSH
9012: LD_EXP 1
9016: ARRAY
9017: PPUSH
9018: CALL 734 0 2
9022: PPUSH
9023: LD_INT 4
9025: PPUSH
9026: LD_INT 0
9028: PPUSH
9029: CALL_OW 49
9033: GO 8992
9035: POP
9036: POP
// sikorski_ar := true ;
9037: LD_ADDR_EXP 12
9041: PUSH
9042: LD_INT 1
9044: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9045: LD_EXP 9
9049: PPUSH
9050: LD_STRING DSik1
9052: PPUSH
9053: CALL_OW 94
// Wait ( 0 0$30 ) ;
9057: LD_INT 1050
9059: PPUSH
9060: CALL_OW 67
// uc_side := 4 ;
9064: LD_ADDR_OWVAR 20
9068: PUSH
9069: LD_INT 4
9071: ST_TO_ADDR
// uc_nation := 1 ;
9072: LD_ADDR_OWVAR 21
9076: PUSH
9077: LD_INT 1
9079: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_INT 3
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: LD_INT 4
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_EXP 1
9108: ARRAY
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9153
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9113: LD_INT 1
9115: PPUSH
9116: LD_INT 5
9118: PUSH
9119: LD_INT 6
9121: PUSH
9122: LD_INT 7
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: PUSH
9130: LD_EXP 1
9134: ARRAY
9135: PPUSH
9136: CALL 734 0 2
9140: PPUSH
9141: LD_INT 13
9143: PPUSH
9144: LD_INT 0
9146: PPUSH
9147: CALL_OW 49
9151: GO 9110
9153: POP
9154: POP
// end ;
9155: PPOPN 1
9157: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9158: LD_EXP 9
9162: PPUSH
9163: CALL_OW 256
9167: PUSH
9168: LD_INT 650
9170: LESS
9171: IFFALSE 9253
9173: GO 9175
9175: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9176: LD_EXP 9
9180: PPUSH
9181: LD_STRING DSik2
9183: PPUSH
9184: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9188: LD_EXP 9
9192: PPUSH
9193: CALL_OW 300
9197: IFFALSE 9253
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9199: LD_EXP 9
9203: PPUSH
9204: LD_INT 2
9206: PPUSH
9207: CALL_OW 113
// Wait ( 0 0$01 ) ;
9211: LD_INT 35
9213: PPUSH
9214: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9218: LD_EXP 9
9222: PPUSH
9223: LD_INT 2
9225: PPUSH
9226: CALL_OW 308
9230: IFFALSE 9251
// begin RemoveUnit ( sikorski ) ;
9232: LD_EXP 9
9236: PPUSH
9237: CALL_OW 64
// break ;
9241: GO 9253
// sikorski_run := true ;
9243: LD_ADDR_EXP 23
9247: PUSH
9248: LD_INT 1
9250: ST_TO_ADDR
// end ; end ;
9251: GO 9188
// end ;
9253: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9254: LD_EXP 9
9258: PPUSH
9259: CALL_OW 256
9263: PUSH
9264: LD_INT 1000
9266: LESS
9267: IFFALSE 9284
9269: GO 9271
9271: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9272: LD_EXP 9
9276: PPUSH
9277: LD_STRING DSkik3
9279: PPUSH
9280: CALL_OW 88
9284: END
// every 1 1$45 + 0 0$15 do
9285: GO 9287
9287: DISABLE
// begin enable ;
9288: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9289: LD_INT 1
9291: PPUSH
9292: LD_INT 5
9294: PPUSH
9295: CALL_OW 12
9299: PPUSH
9300: LD_INT 8
9302: PPUSH
9303: LD_INT 1
9305: PPUSH
9306: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9310: LD_INT 350
9312: PPUSH
9313: LD_INT 1295
9315: PPUSH
9316: CALL_OW 12
9320: PPUSH
9321: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9325: LD_INT 1
9327: PPUSH
9328: LD_INT 5
9330: PPUSH
9331: CALL_OW 12
9335: PPUSH
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9343: LD_INT 350
9345: PPUSH
9346: LD_INT 1050
9348: PPUSH
9349: CALL_OW 12
9353: PPUSH
9354: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9358: LD_EXP 24
9362: PUSH
9363: LD_INT 25200
9365: PUSH
9366: LD_INT 23100
9368: PUSH
9369: LD_INT 21000
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PUSH
9377: LD_EXP 1
9381: ARRAY
9382: LESSEQUAL
9383: IFFALSE 9406
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9385: LD_INT 1
9387: PPUSH
9388: LD_INT 5
9390: PPUSH
9391: CALL_OW 12
9395: PPUSH
9396: LD_INT 8
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 55
// end ;
9406: END
// export timer ; every 1 do
9407: GO 9409
9409: DISABLE
// timer := 0 0$00 ;
9410: LD_ADDR_EXP 24
9414: PUSH
9415: LD_INT 0
9417: ST_TO_ADDR
9418: END
// every 0 0$01 do
9419: GO 9421
9421: DISABLE
// begin enable ;
9422: ENABLE
// Display_Strings := [ #tick , timer ] ;
9423: LD_ADDR_OWVAR 47
9427: PUSH
9428: LD_STRING #tick
9430: PUSH
9431: LD_EXP 24
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9440: LD_ADDR_EXP 24
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: LD_INT 35
9452: PLUS
9453: ST_TO_ADDR
// end ; end_of_file
9454: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
9455: LD_INT 0
9457: PPUSH
// ar_miner := 81 ;
9458: LD_ADDR_EXP 32
9462: PUSH
9463: LD_INT 81
9465: ST_TO_ADDR
// ar_crane := 88 ;
9466: LD_ADDR_EXP 31
9470: PUSH
9471: LD_INT 88
9473: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9474: LD_ADDR_EXP 26
9478: PUSH
9479: LD_INT 89
9481: ST_TO_ADDR
// us_hack := 99 ;
9482: LD_ADDR_EXP 27
9486: PUSH
9487: LD_INT 99
9489: ST_TO_ADDR
// us_artillery := 97 ;
9490: LD_ADDR_EXP 28
9494: PUSH
9495: LD_INT 97
9497: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9498: LD_ADDR_EXP 29
9502: PUSH
9503: LD_INT 91
9505: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
9506: LD_ADDR_EXP 30
9510: PUSH
9511: LD_INT 92
9513: ST_TO_ADDR
// ru_radar := 98 ;
9514: LD_ADDR_EXP 25
9518: PUSH
9519: LD_INT 98
9521: ST_TO_ADDR
// tech_Artillery := 80 ;
9522: LD_ADDR_EXP 33
9526: PUSH
9527: LD_INT 80
9529: ST_TO_ADDR
// tech_RadMat := 81 ;
9530: LD_ADDR_EXP 34
9534: PUSH
9535: LD_INT 81
9537: ST_TO_ADDR
// tech_BasicTools := 82 ;
9538: LD_ADDR_EXP 35
9542: PUSH
9543: LD_INT 82
9545: ST_TO_ADDR
// tech_Cargo := 83 ;
9546: LD_ADDR_EXP 36
9550: PUSH
9551: LD_INT 83
9553: ST_TO_ADDR
// tech_Track := 84 ;
9554: LD_ADDR_EXP 37
9558: PUSH
9559: LD_INT 84
9561: ST_TO_ADDR
// tech_Crane := 85 ;
9562: LD_ADDR_EXP 38
9566: PUSH
9567: LD_INT 85
9569: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9570: LD_ADDR_EXP 39
9574: PUSH
9575: LD_INT 86
9577: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9578: LD_ADDR_EXP 40
9582: PUSH
9583: LD_INT 87
9585: ST_TO_ADDR
// end ;
9586: LD_VAR 0 1
9590: RET
// every 1 do
9591: GO 9593
9593: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
9594: CALL 9455 0 0
9598: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
9599: LD_VAR 0 2
9603: PUSH
9604: LD_INT 100
9606: EQUAL
9607: IFFALSE 10556
// begin if not StreamModeActive then
9609: LD_EXP 41
9613: NOT
9614: IFFALSE 9624
// StreamModeActive := true ;
9616: LD_ADDR_EXP 41
9620: PUSH
9621: LD_INT 1
9623: ST_TO_ADDR
// if p3 = 0 then
9624: LD_VAR 0 3
9628: PUSH
9629: LD_INT 0
9631: EQUAL
9632: IFFALSE 9638
// InitStreamMode ;
9634: CALL 10714 0 0
// if p3 = 1 then
9638: LD_VAR 0 3
9642: PUSH
9643: LD_INT 1
9645: EQUAL
9646: IFFALSE 9656
// sRocket := true ;
9648: LD_ADDR_EXP 46
9652: PUSH
9653: LD_INT 1
9655: ST_TO_ADDR
// if p3 = 2 then
9656: LD_VAR 0 3
9660: PUSH
9661: LD_INT 2
9663: EQUAL
9664: IFFALSE 9674
// sSpeed := true ;
9666: LD_ADDR_EXP 45
9670: PUSH
9671: LD_INT 1
9673: ST_TO_ADDR
// if p3 = 3 then
9674: LD_VAR 0 3
9678: PUSH
9679: LD_INT 3
9681: EQUAL
9682: IFFALSE 9692
// sEngine := true ;
9684: LD_ADDR_EXP 47
9688: PUSH
9689: LD_INT 1
9691: ST_TO_ADDR
// if p3 = 4 then
9692: LD_VAR 0 3
9696: PUSH
9697: LD_INT 4
9699: EQUAL
9700: IFFALSE 9710
// sSpec := true ;
9702: LD_ADDR_EXP 44
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// if p3 = 5 then
9710: LD_VAR 0 3
9714: PUSH
9715: LD_INT 5
9717: EQUAL
9718: IFFALSE 9728
// sLevel := true ;
9720: LD_ADDR_EXP 48
9724: PUSH
9725: LD_INT 1
9727: ST_TO_ADDR
// if p3 = 6 then
9728: LD_VAR 0 3
9732: PUSH
9733: LD_INT 6
9735: EQUAL
9736: IFFALSE 9746
// sArmoury := true ;
9738: LD_ADDR_EXP 49
9742: PUSH
9743: LD_INT 1
9745: ST_TO_ADDR
// if p3 = 7 then
9746: LD_VAR 0 3
9750: PUSH
9751: LD_INT 7
9753: EQUAL
9754: IFFALSE 9764
// sRadar := true ;
9756: LD_ADDR_EXP 50
9760: PUSH
9761: LD_INT 1
9763: ST_TO_ADDR
// if p3 = 8 then
9764: LD_VAR 0 3
9768: PUSH
9769: LD_INT 8
9771: EQUAL
9772: IFFALSE 9782
// sBunker := true ;
9774: LD_ADDR_EXP 51
9778: PUSH
9779: LD_INT 1
9781: ST_TO_ADDR
// if p3 = 9 then
9782: LD_VAR 0 3
9786: PUSH
9787: LD_INT 9
9789: EQUAL
9790: IFFALSE 9800
// sHack := true ;
9792: LD_ADDR_EXP 52
9796: PUSH
9797: LD_INT 1
9799: ST_TO_ADDR
// if p3 = 10 then
9800: LD_VAR 0 3
9804: PUSH
9805: LD_INT 10
9807: EQUAL
9808: IFFALSE 9818
// sFire := true ;
9810: LD_ADDR_EXP 53
9814: PUSH
9815: LD_INT 1
9817: ST_TO_ADDR
// if p3 = 11 then
9818: LD_VAR 0 3
9822: PUSH
9823: LD_INT 11
9825: EQUAL
9826: IFFALSE 9836
// sRefresh := true ;
9828: LD_ADDR_EXP 54
9832: PUSH
9833: LD_INT 1
9835: ST_TO_ADDR
// if p3 = 12 then
9836: LD_VAR 0 3
9840: PUSH
9841: LD_INT 12
9843: EQUAL
9844: IFFALSE 9854
// sExp := true ;
9846: LD_ADDR_EXP 55
9850: PUSH
9851: LD_INT 1
9853: ST_TO_ADDR
// if p3 = 13 then
9854: LD_VAR 0 3
9858: PUSH
9859: LD_INT 13
9861: EQUAL
9862: IFFALSE 9872
// sDepot := true ;
9864: LD_ADDR_EXP 56
9868: PUSH
9869: LD_INT 1
9871: ST_TO_ADDR
// if p3 = 14 then
9872: LD_VAR 0 3
9876: PUSH
9877: LD_INT 14
9879: EQUAL
9880: IFFALSE 9890
// sFlag := true ;
9882: LD_ADDR_EXP 57
9886: PUSH
9887: LD_INT 1
9889: ST_TO_ADDR
// if p3 = 15 then
9890: LD_VAR 0 3
9894: PUSH
9895: LD_INT 15
9897: EQUAL
9898: IFFALSE 9908
// sKamikadze := true ;
9900: LD_ADDR_EXP 65
9904: PUSH
9905: LD_INT 1
9907: ST_TO_ADDR
// if p3 = 16 then
9908: LD_VAR 0 3
9912: PUSH
9913: LD_INT 16
9915: EQUAL
9916: IFFALSE 9926
// sTroll := true ;
9918: LD_ADDR_EXP 66
9922: PUSH
9923: LD_INT 1
9925: ST_TO_ADDR
// if p3 = 17 then
9926: LD_VAR 0 3
9930: PUSH
9931: LD_INT 17
9933: EQUAL
9934: IFFALSE 9944
// sSlow := true ;
9936: LD_ADDR_EXP 67
9940: PUSH
9941: LD_INT 1
9943: ST_TO_ADDR
// if p3 = 18 then
9944: LD_VAR 0 3
9948: PUSH
9949: LD_INT 18
9951: EQUAL
9952: IFFALSE 9962
// sLack := true ;
9954: LD_ADDR_EXP 68
9958: PUSH
9959: LD_INT 1
9961: ST_TO_ADDR
// if p3 = 19 then
9962: LD_VAR 0 3
9966: PUSH
9967: LD_INT 19
9969: EQUAL
9970: IFFALSE 9980
// sTank := true ;
9972: LD_ADDR_EXP 70
9976: PUSH
9977: LD_INT 1
9979: ST_TO_ADDR
// if p3 = 20 then
9980: LD_VAR 0 3
9984: PUSH
9985: LD_INT 20
9987: EQUAL
9988: IFFALSE 9998
// sRemote := true ;
9990: LD_ADDR_EXP 71
9994: PUSH
9995: LD_INT 1
9997: ST_TO_ADDR
// if p3 = 21 then
9998: LD_VAR 0 3
10002: PUSH
10003: LD_INT 21
10005: EQUAL
10006: IFFALSE 10016
// sPowell := true ;
10008: LD_ADDR_EXP 72
10012: PUSH
10013: LD_INT 1
10015: ST_TO_ADDR
// if p3 = 22 then
10016: LD_VAR 0 3
10020: PUSH
10021: LD_INT 22
10023: EQUAL
10024: IFFALSE 10034
// sTeleport := true ;
10026: LD_ADDR_EXP 75
10030: PUSH
10031: LD_INT 1
10033: ST_TO_ADDR
// if p3 = 23 then
10034: LD_VAR 0 3
10038: PUSH
10039: LD_INT 23
10041: EQUAL
10042: IFFALSE 10052
// sOilTower := true ;
10044: LD_ADDR_EXP 77
10048: PUSH
10049: LD_INT 1
10051: ST_TO_ADDR
// if p3 = 24 then
10052: LD_VAR 0 3
10056: PUSH
10057: LD_INT 24
10059: EQUAL
10060: IFFALSE 10070
// sShovel := true ;
10062: LD_ADDR_EXP 78
10066: PUSH
10067: LD_INT 1
10069: ST_TO_ADDR
// if p3 = 25 then
10070: LD_VAR 0 3
10074: PUSH
10075: LD_INT 25
10077: EQUAL
10078: IFFALSE 10088
// sSheik := true ;
10080: LD_ADDR_EXP 79
10084: PUSH
10085: LD_INT 1
10087: ST_TO_ADDR
// if p3 = 26 then
10088: LD_VAR 0 3
10092: PUSH
10093: LD_INT 26
10095: EQUAL
10096: IFFALSE 10106
// sEarthquake := true ;
10098: LD_ADDR_EXP 81
10102: PUSH
10103: LD_INT 1
10105: ST_TO_ADDR
// if p3 = 27 then
10106: LD_VAR 0 3
10110: PUSH
10111: LD_INT 27
10113: EQUAL
10114: IFFALSE 10124
// sAI := true ;
10116: LD_ADDR_EXP 82
10120: PUSH
10121: LD_INT 1
10123: ST_TO_ADDR
// if p3 = 28 then
10124: LD_VAR 0 3
10128: PUSH
10129: LD_INT 28
10131: EQUAL
10132: IFFALSE 10142
// sCargo := true ;
10134: LD_ADDR_EXP 85
10138: PUSH
10139: LD_INT 1
10141: ST_TO_ADDR
// if p3 = 29 then
10142: LD_VAR 0 3
10146: PUSH
10147: LD_INT 29
10149: EQUAL
10150: IFFALSE 10160
// sDLaser := true ;
10152: LD_ADDR_EXP 86
10156: PUSH
10157: LD_INT 1
10159: ST_TO_ADDR
// if p3 = 30 then
10160: LD_VAR 0 3
10164: PUSH
10165: LD_INT 30
10167: EQUAL
10168: IFFALSE 10178
// sExchange := true ;
10170: LD_ADDR_EXP 87
10174: PUSH
10175: LD_INT 1
10177: ST_TO_ADDR
// if p3 = 31 then
10178: LD_VAR 0 3
10182: PUSH
10183: LD_INT 31
10185: EQUAL
10186: IFFALSE 10196
// sFac := true ;
10188: LD_ADDR_EXP 88
10192: PUSH
10193: LD_INT 1
10195: ST_TO_ADDR
// if p3 = 32 then
10196: LD_VAR 0 3
10200: PUSH
10201: LD_INT 32
10203: EQUAL
10204: IFFALSE 10214
// sPower := true ;
10206: LD_ADDR_EXP 89
10210: PUSH
10211: LD_INT 1
10213: ST_TO_ADDR
// if p3 = 33 then
10214: LD_VAR 0 3
10218: PUSH
10219: LD_INT 33
10221: EQUAL
10222: IFFALSE 10232
// sRandom := true ;
10224: LD_ADDR_EXP 90
10228: PUSH
10229: LD_INT 1
10231: ST_TO_ADDR
// if p3 = 34 then
10232: LD_VAR 0 3
10236: PUSH
10237: LD_INT 34
10239: EQUAL
10240: IFFALSE 10250
// sShield := true ;
10242: LD_ADDR_EXP 91
10246: PUSH
10247: LD_INT 1
10249: ST_TO_ADDR
// if p3 = 35 then
10250: LD_VAR 0 3
10254: PUSH
10255: LD_INT 35
10257: EQUAL
10258: IFFALSE 10268
// sTime := true ;
10260: LD_ADDR_EXP 92
10264: PUSH
10265: LD_INT 1
10267: ST_TO_ADDR
// if p3 = 36 then
10268: LD_VAR 0 3
10272: PUSH
10273: LD_INT 36
10275: EQUAL
10276: IFFALSE 10286
// sTools := true ;
10278: LD_ADDR_EXP 93
10282: PUSH
10283: LD_INT 1
10285: ST_TO_ADDR
// if p3 = 101 then
10286: LD_VAR 0 3
10290: PUSH
10291: LD_INT 101
10293: EQUAL
10294: IFFALSE 10304
// sSold := true ;
10296: LD_ADDR_EXP 58
10300: PUSH
10301: LD_INT 1
10303: ST_TO_ADDR
// if p3 = 102 then
10304: LD_VAR 0 3
10308: PUSH
10309: LD_INT 102
10311: EQUAL
10312: IFFALSE 10322
// sDiff := true ;
10314: LD_ADDR_EXP 59
10318: PUSH
10319: LD_INT 1
10321: ST_TO_ADDR
// if p3 = 103 then
10322: LD_VAR 0 3
10326: PUSH
10327: LD_INT 103
10329: EQUAL
10330: IFFALSE 10340
// sFog := true ;
10332: LD_ADDR_EXP 62
10336: PUSH
10337: LD_INT 1
10339: ST_TO_ADDR
// if p3 = 104 then
10340: LD_VAR 0 3
10344: PUSH
10345: LD_INT 104
10347: EQUAL
10348: IFFALSE 10358
// sReset := true ;
10350: LD_ADDR_EXP 63
10354: PUSH
10355: LD_INT 1
10357: ST_TO_ADDR
// if p3 = 105 then
10358: LD_VAR 0 3
10362: PUSH
10363: LD_INT 105
10365: EQUAL
10366: IFFALSE 10376
// sSun := true ;
10368: LD_ADDR_EXP 64
10372: PUSH
10373: LD_INT 1
10375: ST_TO_ADDR
// if p3 = 106 then
10376: LD_VAR 0 3
10380: PUSH
10381: LD_INT 106
10383: EQUAL
10384: IFFALSE 10394
// sTiger := true ;
10386: LD_ADDR_EXP 60
10390: PUSH
10391: LD_INT 1
10393: ST_TO_ADDR
// if p3 = 107 then
10394: LD_VAR 0 3
10398: PUSH
10399: LD_INT 107
10401: EQUAL
10402: IFFALSE 10412
// sBomb := true ;
10404: LD_ADDR_EXP 61
10408: PUSH
10409: LD_INT 1
10411: ST_TO_ADDR
// if p3 = 108 then
10412: LD_VAR 0 3
10416: PUSH
10417: LD_INT 108
10419: EQUAL
10420: IFFALSE 10430
// sWound := true ;
10422: LD_ADDR_EXP 69
10426: PUSH
10427: LD_INT 1
10429: ST_TO_ADDR
// if p3 = 109 then
10430: LD_VAR 0 3
10434: PUSH
10435: LD_INT 109
10437: EQUAL
10438: IFFALSE 10448
// sBetray := true ;
10440: LD_ADDR_EXP 73
10444: PUSH
10445: LD_INT 1
10447: ST_TO_ADDR
// if p3 = 110 then
10448: LD_VAR 0 3
10452: PUSH
10453: LD_INT 110
10455: EQUAL
10456: IFFALSE 10466
// sContamin := true ;
10458: LD_ADDR_EXP 74
10462: PUSH
10463: LD_INT 1
10465: ST_TO_ADDR
// if p3 = 111 then
10466: LD_VAR 0 3
10470: PUSH
10471: LD_INT 111
10473: EQUAL
10474: IFFALSE 10484
// sOil := true ;
10476: LD_ADDR_EXP 76
10480: PUSH
10481: LD_INT 1
10483: ST_TO_ADDR
// if p3 = 112 then
10484: LD_VAR 0 3
10488: PUSH
10489: LD_INT 112
10491: EQUAL
10492: IFFALSE 10502
// sStu := true ;
10494: LD_ADDR_EXP 80
10498: PUSH
10499: LD_INT 1
10501: ST_TO_ADDR
// if p3 = 113 then
10502: LD_VAR 0 3
10506: PUSH
10507: LD_INT 113
10509: EQUAL
10510: IFFALSE 10520
// sBazooka := true ;
10512: LD_ADDR_EXP 83
10516: PUSH
10517: LD_INT 1
10519: ST_TO_ADDR
// if p3 = 114 then
10520: LD_VAR 0 3
10524: PUSH
10525: LD_INT 114
10527: EQUAL
10528: IFFALSE 10538
// sMortar := true ;
10530: LD_ADDR_EXP 84
10534: PUSH
10535: LD_INT 1
10537: ST_TO_ADDR
// if p3 = 115 then
10538: LD_VAR 0 3
10542: PUSH
10543: LD_INT 115
10545: EQUAL
10546: IFFALSE 10556
// sRanger := true ;
10548: LD_ADDR_EXP 94
10552: PUSH
10553: LD_INT 1
10555: ST_TO_ADDR
// end ; if p2 = 101 then
10556: LD_VAR 0 2
10560: PUSH
10561: LD_INT 101
10563: EQUAL
10564: IFFALSE 10692
// begin case p3 of 1 :
10566: LD_VAR 0 3
10570: PUSH
10571: LD_INT 1
10573: DOUBLE
10574: EQUAL
10575: IFTRUE 10579
10577: GO 10586
10579: POP
// hHackUnlimitedResources ; 2 :
10580: CALL 21727 0 0
10584: GO 10692
10586: LD_INT 2
10588: DOUBLE
10589: EQUAL
10590: IFTRUE 10594
10592: GO 10601
10594: POP
// hHackSetLevel10 ; 3 :
10595: CALL 21860 0 0
10599: GO 10692
10601: LD_INT 3
10603: DOUBLE
10604: EQUAL
10605: IFTRUE 10609
10607: GO 10616
10609: POP
// hHackSetLevel10YourUnits ; 4 :
10610: CALL 21945 0 0
10614: GO 10692
10616: LD_INT 4
10618: DOUBLE
10619: EQUAL
10620: IFTRUE 10624
10622: GO 10631
10624: POP
// hHackInvincible ; 5 :
10625: CALL 22393 0 0
10629: GO 10692
10631: LD_INT 5
10633: DOUBLE
10634: EQUAL
10635: IFTRUE 10639
10637: GO 10646
10639: POP
// hHackInvisible ; 6 :
10640: CALL 22504 0 0
10644: GO 10692
10646: LD_INT 6
10648: DOUBLE
10649: EQUAL
10650: IFTRUE 10654
10652: GO 10661
10654: POP
// hHackChangeYourSide ; 7 :
10655: CALL 22561 0 0
10659: GO 10692
10661: LD_INT 7
10663: DOUBLE
10664: EQUAL
10665: IFTRUE 10669
10667: GO 10676
10669: POP
// hHackChangeUnitSide ; 8 :
10670: CALL 22603 0 0
10674: GO 10692
10676: LD_INT 8
10678: DOUBLE
10679: EQUAL
10680: IFTRUE 10684
10682: GO 10691
10684: POP
// hHackFog ; end ;
10685: CALL 22704 0 0
10689: GO 10692
10691: POP
// end ; end ;
10692: PPOPN 6
10694: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10695: GO 10697
10697: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10698: LD_STRING initStreamRollete();
10700: PPUSH
10701: CALL_OW 559
// InitStreamMode ;
10705: CALL 10714 0 0
// DefineStreamItems ( ) ;
10709: CALL 11154 0 0
// end ;
10713: END
// function InitStreamMode ; begin
10714: LD_INT 0
10716: PPUSH
// streamModeActive := false ;
10717: LD_ADDR_EXP 41
10721: PUSH
10722: LD_INT 0
10724: ST_TO_ADDR
// normalCounter := 36 ;
10725: LD_ADDR_EXP 42
10729: PUSH
10730: LD_INT 36
10732: ST_TO_ADDR
// hardcoreCounter := 16 ;
10733: LD_ADDR_EXP 43
10737: PUSH
10738: LD_INT 16
10740: ST_TO_ADDR
// sRocket := false ;
10741: LD_ADDR_EXP 46
10745: PUSH
10746: LD_INT 0
10748: ST_TO_ADDR
// sSpeed := false ;
10749: LD_ADDR_EXP 45
10753: PUSH
10754: LD_INT 0
10756: ST_TO_ADDR
// sEngine := false ;
10757: LD_ADDR_EXP 47
10761: PUSH
10762: LD_INT 0
10764: ST_TO_ADDR
// sSpec := false ;
10765: LD_ADDR_EXP 44
10769: PUSH
10770: LD_INT 0
10772: ST_TO_ADDR
// sLevel := false ;
10773: LD_ADDR_EXP 48
10777: PUSH
10778: LD_INT 0
10780: ST_TO_ADDR
// sArmoury := false ;
10781: LD_ADDR_EXP 49
10785: PUSH
10786: LD_INT 0
10788: ST_TO_ADDR
// sRadar := false ;
10789: LD_ADDR_EXP 50
10793: PUSH
10794: LD_INT 0
10796: ST_TO_ADDR
// sBunker := false ;
10797: LD_ADDR_EXP 51
10801: PUSH
10802: LD_INT 0
10804: ST_TO_ADDR
// sHack := false ;
10805: LD_ADDR_EXP 52
10809: PUSH
10810: LD_INT 0
10812: ST_TO_ADDR
// sFire := false ;
10813: LD_ADDR_EXP 53
10817: PUSH
10818: LD_INT 0
10820: ST_TO_ADDR
// sRefresh := false ;
10821: LD_ADDR_EXP 54
10825: PUSH
10826: LD_INT 0
10828: ST_TO_ADDR
// sExp := false ;
10829: LD_ADDR_EXP 55
10833: PUSH
10834: LD_INT 0
10836: ST_TO_ADDR
// sDepot := false ;
10837: LD_ADDR_EXP 56
10841: PUSH
10842: LD_INT 0
10844: ST_TO_ADDR
// sFlag := false ;
10845: LD_ADDR_EXP 57
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// sKamikadze := false ;
10853: LD_ADDR_EXP 65
10857: PUSH
10858: LD_INT 0
10860: ST_TO_ADDR
// sTroll := false ;
10861: LD_ADDR_EXP 66
10865: PUSH
10866: LD_INT 0
10868: ST_TO_ADDR
// sSlow := false ;
10869: LD_ADDR_EXP 67
10873: PUSH
10874: LD_INT 0
10876: ST_TO_ADDR
// sLack := false ;
10877: LD_ADDR_EXP 68
10881: PUSH
10882: LD_INT 0
10884: ST_TO_ADDR
// sTank := false ;
10885: LD_ADDR_EXP 70
10889: PUSH
10890: LD_INT 0
10892: ST_TO_ADDR
// sRemote := false ;
10893: LD_ADDR_EXP 71
10897: PUSH
10898: LD_INT 0
10900: ST_TO_ADDR
// sPowell := false ;
10901: LD_ADDR_EXP 72
10905: PUSH
10906: LD_INT 0
10908: ST_TO_ADDR
// sTeleport := false ;
10909: LD_ADDR_EXP 75
10913: PUSH
10914: LD_INT 0
10916: ST_TO_ADDR
// sOilTower := false ;
10917: LD_ADDR_EXP 77
10921: PUSH
10922: LD_INT 0
10924: ST_TO_ADDR
// sShovel := false ;
10925: LD_ADDR_EXP 78
10929: PUSH
10930: LD_INT 0
10932: ST_TO_ADDR
// sSheik := false ;
10933: LD_ADDR_EXP 79
10937: PUSH
10938: LD_INT 0
10940: ST_TO_ADDR
// sEarthquake := false ;
10941: LD_ADDR_EXP 81
10945: PUSH
10946: LD_INT 0
10948: ST_TO_ADDR
// sAI := false ;
10949: LD_ADDR_EXP 82
10953: PUSH
10954: LD_INT 0
10956: ST_TO_ADDR
// sCargo := false ;
10957: LD_ADDR_EXP 85
10961: PUSH
10962: LD_INT 0
10964: ST_TO_ADDR
// sDLaser := false ;
10965: LD_ADDR_EXP 86
10969: PUSH
10970: LD_INT 0
10972: ST_TO_ADDR
// sExchange := false ;
10973: LD_ADDR_EXP 87
10977: PUSH
10978: LD_INT 0
10980: ST_TO_ADDR
// sFac := false ;
10981: LD_ADDR_EXP 88
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// sPower := false ;
10989: LD_ADDR_EXP 89
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// sRandom := false ;
10997: LD_ADDR_EXP 90
11001: PUSH
11002: LD_INT 0
11004: ST_TO_ADDR
// sShield := false ;
11005: LD_ADDR_EXP 91
11009: PUSH
11010: LD_INT 0
11012: ST_TO_ADDR
// sTime := false ;
11013: LD_ADDR_EXP 92
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// sTools := false ;
11021: LD_ADDR_EXP 93
11025: PUSH
11026: LD_INT 0
11028: ST_TO_ADDR
// sSold := false ;
11029: LD_ADDR_EXP 58
11033: PUSH
11034: LD_INT 0
11036: ST_TO_ADDR
// sDiff := false ;
11037: LD_ADDR_EXP 59
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// sFog := false ;
11045: LD_ADDR_EXP 62
11049: PUSH
11050: LD_INT 0
11052: ST_TO_ADDR
// sReset := false ;
11053: LD_ADDR_EXP 63
11057: PUSH
11058: LD_INT 0
11060: ST_TO_ADDR
// sSun := false ;
11061: LD_ADDR_EXP 64
11065: PUSH
11066: LD_INT 0
11068: ST_TO_ADDR
// sTiger := false ;
11069: LD_ADDR_EXP 60
11073: PUSH
11074: LD_INT 0
11076: ST_TO_ADDR
// sBomb := false ;
11077: LD_ADDR_EXP 61
11081: PUSH
11082: LD_INT 0
11084: ST_TO_ADDR
// sWound := false ;
11085: LD_ADDR_EXP 69
11089: PUSH
11090: LD_INT 0
11092: ST_TO_ADDR
// sBetray := false ;
11093: LD_ADDR_EXP 73
11097: PUSH
11098: LD_INT 0
11100: ST_TO_ADDR
// sContamin := false ;
11101: LD_ADDR_EXP 74
11105: PUSH
11106: LD_INT 0
11108: ST_TO_ADDR
// sOil := false ;
11109: LD_ADDR_EXP 76
11113: PUSH
11114: LD_INT 0
11116: ST_TO_ADDR
// sStu := false ;
11117: LD_ADDR_EXP 80
11121: PUSH
11122: LD_INT 0
11124: ST_TO_ADDR
// sBazooka := false ;
11125: LD_ADDR_EXP 83
11129: PUSH
11130: LD_INT 0
11132: ST_TO_ADDR
// sMortar := false ;
11133: LD_ADDR_EXP 84
11137: PUSH
11138: LD_INT 0
11140: ST_TO_ADDR
// sRanger := false ;
11141: LD_ADDR_EXP 94
11145: PUSH
11146: LD_INT 0
11148: ST_TO_ADDR
// end ;
11149: LD_VAR 0 1
11153: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11154: LD_INT 0
11156: PPUSH
11157: PPUSH
11158: PPUSH
11159: PPUSH
11160: PPUSH
// result := [ ] ;
11161: LD_ADDR_VAR 0 1
11165: PUSH
11166: EMPTY
11167: ST_TO_ADDR
// if campaign_id = 1 then
11168: LD_OWVAR 69
11172: PUSH
11173: LD_INT 1
11175: EQUAL
11176: IFFALSE 14114
// begin case mission_number of 1 :
11178: LD_OWVAR 70
11182: PUSH
11183: LD_INT 1
11185: DOUBLE
11186: EQUAL
11187: IFTRUE 11191
11189: GO 11255
11191: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11192: LD_ADDR_VAR 0 1
11196: PUSH
11197: LD_INT 2
11199: PUSH
11200: LD_INT 4
11202: PUSH
11203: LD_INT 11
11205: PUSH
11206: LD_INT 12
11208: PUSH
11209: LD_INT 15
11211: PUSH
11212: LD_INT 16
11214: PUSH
11215: LD_INT 22
11217: PUSH
11218: LD_INT 23
11220: PUSH
11221: LD_INT 26
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 101
11237: PUSH
11238: LD_INT 102
11240: PUSH
11241: LD_INT 106
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: LIST
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: ST_TO_ADDR
11253: GO 14112
11255: LD_INT 2
11257: DOUBLE
11258: EQUAL
11259: IFTRUE 11263
11261: GO 11335
11263: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11264: LD_ADDR_VAR 0 1
11268: PUSH
11269: LD_INT 2
11271: PUSH
11272: LD_INT 4
11274: PUSH
11275: LD_INT 11
11277: PUSH
11278: LD_INT 12
11280: PUSH
11281: LD_INT 15
11283: PUSH
11284: LD_INT 16
11286: PUSH
11287: LD_INT 22
11289: PUSH
11290: LD_INT 23
11292: PUSH
11293: LD_INT 26
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 101
11309: PUSH
11310: LD_INT 102
11312: PUSH
11313: LD_INT 105
11315: PUSH
11316: LD_INT 106
11318: PUSH
11319: LD_INT 108
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: ST_TO_ADDR
11333: GO 14112
11335: LD_INT 3
11337: DOUBLE
11338: EQUAL
11339: IFTRUE 11343
11341: GO 11419
11343: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11344: LD_ADDR_VAR 0 1
11348: PUSH
11349: LD_INT 2
11351: PUSH
11352: LD_INT 4
11354: PUSH
11355: LD_INT 5
11357: PUSH
11358: LD_INT 11
11360: PUSH
11361: LD_INT 12
11363: PUSH
11364: LD_INT 15
11366: PUSH
11367: LD_INT 16
11369: PUSH
11370: LD_INT 22
11372: PUSH
11373: LD_INT 26
11375: PUSH
11376: LD_INT 36
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: PUSH
11391: LD_INT 101
11393: PUSH
11394: LD_INT 102
11396: PUSH
11397: LD_INT 105
11399: PUSH
11400: LD_INT 106
11402: PUSH
11403: LD_INT 108
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: ST_TO_ADDR
11417: GO 14112
11419: LD_INT 4
11421: DOUBLE
11422: EQUAL
11423: IFTRUE 11427
11425: GO 11511
11427: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11428: LD_ADDR_VAR 0 1
11432: PUSH
11433: LD_INT 2
11435: PUSH
11436: LD_INT 4
11438: PUSH
11439: LD_INT 5
11441: PUSH
11442: LD_INT 8
11444: PUSH
11445: LD_INT 11
11447: PUSH
11448: LD_INT 12
11450: PUSH
11451: LD_INT 15
11453: PUSH
11454: LD_INT 16
11456: PUSH
11457: LD_INT 22
11459: PUSH
11460: LD_INT 23
11462: PUSH
11463: LD_INT 26
11465: PUSH
11466: LD_INT 36
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 101
11485: PUSH
11486: LD_INT 102
11488: PUSH
11489: LD_INT 105
11491: PUSH
11492: LD_INT 106
11494: PUSH
11495: LD_INT 108
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: ST_TO_ADDR
11509: GO 14112
11511: LD_INT 5
11513: DOUBLE
11514: EQUAL
11515: IFTRUE 11519
11517: GO 11619
11519: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11520: LD_ADDR_VAR 0 1
11524: PUSH
11525: LD_INT 2
11527: PUSH
11528: LD_INT 4
11530: PUSH
11531: LD_INT 5
11533: PUSH
11534: LD_INT 6
11536: PUSH
11537: LD_INT 8
11539: PUSH
11540: LD_INT 11
11542: PUSH
11543: LD_INT 12
11545: PUSH
11546: LD_INT 15
11548: PUSH
11549: LD_INT 16
11551: PUSH
11552: LD_INT 22
11554: PUSH
11555: LD_INT 23
11557: PUSH
11558: LD_INT 25
11560: PUSH
11561: LD_INT 26
11563: PUSH
11564: LD_INT 36
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 101
11585: PUSH
11586: LD_INT 102
11588: PUSH
11589: LD_INT 105
11591: PUSH
11592: LD_INT 106
11594: PUSH
11595: LD_INT 108
11597: PUSH
11598: LD_INT 109
11600: PUSH
11601: LD_INT 112
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: ST_TO_ADDR
11617: GO 14112
11619: LD_INT 6
11621: DOUBLE
11622: EQUAL
11623: IFTRUE 11627
11625: GO 11747
11627: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11628: LD_ADDR_VAR 0 1
11632: PUSH
11633: LD_INT 2
11635: PUSH
11636: LD_INT 4
11638: PUSH
11639: LD_INT 5
11641: PUSH
11642: LD_INT 6
11644: PUSH
11645: LD_INT 8
11647: PUSH
11648: LD_INT 11
11650: PUSH
11651: LD_INT 12
11653: PUSH
11654: LD_INT 15
11656: PUSH
11657: LD_INT 16
11659: PUSH
11660: LD_INT 20
11662: PUSH
11663: LD_INT 21
11665: PUSH
11666: LD_INT 22
11668: PUSH
11669: LD_INT 23
11671: PUSH
11672: LD_INT 25
11674: PUSH
11675: LD_INT 26
11677: PUSH
11678: LD_INT 30
11680: PUSH
11681: LD_INT 31
11683: PUSH
11684: LD_INT 32
11686: PUSH
11687: LD_INT 36
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 101
11713: PUSH
11714: LD_INT 102
11716: PUSH
11717: LD_INT 105
11719: PUSH
11720: LD_INT 106
11722: PUSH
11723: LD_INT 108
11725: PUSH
11726: LD_INT 109
11728: PUSH
11729: LD_INT 112
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: ST_TO_ADDR
11745: GO 14112
11747: LD_INT 7
11749: DOUBLE
11750: EQUAL
11751: IFTRUE 11755
11753: GO 11855
11755: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11756: LD_ADDR_VAR 0 1
11760: PUSH
11761: LD_INT 2
11763: PUSH
11764: LD_INT 4
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: LD_INT 7
11772: PUSH
11773: LD_INT 11
11775: PUSH
11776: LD_INT 12
11778: PUSH
11779: LD_INT 15
11781: PUSH
11782: LD_INT 16
11784: PUSH
11785: LD_INT 20
11787: PUSH
11788: LD_INT 21
11790: PUSH
11791: LD_INT 22
11793: PUSH
11794: LD_INT 23
11796: PUSH
11797: LD_INT 25
11799: PUSH
11800: LD_INT 26
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 101
11821: PUSH
11822: LD_INT 102
11824: PUSH
11825: LD_INT 103
11827: PUSH
11828: LD_INT 105
11830: PUSH
11831: LD_INT 106
11833: PUSH
11834: LD_INT 108
11836: PUSH
11837: LD_INT 112
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: ST_TO_ADDR
11853: GO 14112
11855: LD_INT 8
11857: DOUBLE
11858: EQUAL
11859: IFTRUE 11863
11861: GO 11991
11863: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11864: LD_ADDR_VAR 0 1
11868: PUSH
11869: LD_INT 2
11871: PUSH
11872: LD_INT 4
11874: PUSH
11875: LD_INT 5
11877: PUSH
11878: LD_INT 6
11880: PUSH
11881: LD_INT 7
11883: PUSH
11884: LD_INT 8
11886: PUSH
11887: LD_INT 11
11889: PUSH
11890: LD_INT 12
11892: PUSH
11893: LD_INT 15
11895: PUSH
11896: LD_INT 16
11898: PUSH
11899: LD_INT 20
11901: PUSH
11902: LD_INT 21
11904: PUSH
11905: LD_INT 22
11907: PUSH
11908: LD_INT 23
11910: PUSH
11911: LD_INT 25
11913: PUSH
11914: LD_INT 26
11916: PUSH
11917: LD_INT 30
11919: PUSH
11920: LD_INT 31
11922: PUSH
11923: LD_INT 32
11925: PUSH
11926: LD_INT 36
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 101
11953: PUSH
11954: LD_INT 102
11956: PUSH
11957: LD_INT 103
11959: PUSH
11960: LD_INT 105
11962: PUSH
11963: LD_INT 106
11965: PUSH
11966: LD_INT 108
11968: PUSH
11969: LD_INT 109
11971: PUSH
11972: LD_INT 112
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: ST_TO_ADDR
11989: GO 14112
11991: LD_INT 9
11993: DOUBLE
11994: EQUAL
11995: IFTRUE 11999
11997: GO 12135
11999: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12000: LD_ADDR_VAR 0 1
12004: PUSH
12005: LD_INT 2
12007: PUSH
12008: LD_INT 4
12010: PUSH
12011: LD_INT 5
12013: PUSH
12014: LD_INT 6
12016: PUSH
12017: LD_INT 7
12019: PUSH
12020: LD_INT 8
12022: PUSH
12023: LD_INT 11
12025: PUSH
12026: LD_INT 12
12028: PUSH
12029: LD_INT 15
12031: PUSH
12032: LD_INT 16
12034: PUSH
12035: LD_INT 20
12037: PUSH
12038: LD_INT 21
12040: PUSH
12041: LD_INT 22
12043: PUSH
12044: LD_INT 23
12046: PUSH
12047: LD_INT 25
12049: PUSH
12050: LD_INT 26
12052: PUSH
12053: LD_INT 28
12055: PUSH
12056: LD_INT 30
12058: PUSH
12059: LD_INT 31
12061: PUSH
12062: LD_INT 32
12064: PUSH
12065: LD_INT 36
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: LD_INT 101
12093: PUSH
12094: LD_INT 102
12096: PUSH
12097: LD_INT 103
12099: PUSH
12100: LD_INT 105
12102: PUSH
12103: LD_INT 106
12105: PUSH
12106: LD_INT 108
12108: PUSH
12109: LD_INT 109
12111: PUSH
12112: LD_INT 112
12114: PUSH
12115: LD_INT 114
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: ST_TO_ADDR
12133: GO 14112
12135: LD_INT 10
12137: DOUBLE
12138: EQUAL
12139: IFTRUE 12143
12141: GO 12327
12143: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12144: LD_ADDR_VAR 0 1
12148: PUSH
12149: LD_INT 2
12151: PUSH
12152: LD_INT 4
12154: PUSH
12155: LD_INT 5
12157: PUSH
12158: LD_INT 6
12160: PUSH
12161: LD_INT 7
12163: PUSH
12164: LD_INT 8
12166: PUSH
12167: LD_INT 9
12169: PUSH
12170: LD_INT 10
12172: PUSH
12173: LD_INT 11
12175: PUSH
12176: LD_INT 12
12178: PUSH
12179: LD_INT 13
12181: PUSH
12182: LD_INT 14
12184: PUSH
12185: LD_INT 15
12187: PUSH
12188: LD_INT 16
12190: PUSH
12191: LD_INT 17
12193: PUSH
12194: LD_INT 18
12196: PUSH
12197: LD_INT 19
12199: PUSH
12200: LD_INT 20
12202: PUSH
12203: LD_INT 21
12205: PUSH
12206: LD_INT 22
12208: PUSH
12209: LD_INT 23
12211: PUSH
12212: LD_INT 24
12214: PUSH
12215: LD_INT 25
12217: PUSH
12218: LD_INT 26
12220: PUSH
12221: LD_INT 28
12223: PUSH
12224: LD_INT 30
12226: PUSH
12227: LD_INT 31
12229: PUSH
12230: LD_INT 32
12232: PUSH
12233: LD_INT 36
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 101
12269: PUSH
12270: LD_INT 102
12272: PUSH
12273: LD_INT 103
12275: PUSH
12276: LD_INT 104
12278: PUSH
12279: LD_INT 105
12281: PUSH
12282: LD_INT 106
12284: PUSH
12285: LD_INT 107
12287: PUSH
12288: LD_INT 108
12290: PUSH
12291: LD_INT 109
12293: PUSH
12294: LD_INT 110
12296: PUSH
12297: LD_INT 111
12299: PUSH
12300: LD_INT 112
12302: PUSH
12303: LD_INT 114
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: ST_TO_ADDR
12325: GO 14112
12327: LD_INT 11
12329: DOUBLE
12330: EQUAL
12331: IFTRUE 12335
12333: GO 12527
12335: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12336: LD_ADDR_VAR 0 1
12340: PUSH
12341: LD_INT 2
12343: PUSH
12344: LD_INT 3
12346: PUSH
12347: LD_INT 4
12349: PUSH
12350: LD_INT 5
12352: PUSH
12353: LD_INT 6
12355: PUSH
12356: LD_INT 7
12358: PUSH
12359: LD_INT 8
12361: PUSH
12362: LD_INT 9
12364: PUSH
12365: LD_INT 10
12367: PUSH
12368: LD_INT 11
12370: PUSH
12371: LD_INT 12
12373: PUSH
12374: LD_INT 13
12376: PUSH
12377: LD_INT 14
12379: PUSH
12380: LD_INT 15
12382: PUSH
12383: LD_INT 16
12385: PUSH
12386: LD_INT 17
12388: PUSH
12389: LD_INT 18
12391: PUSH
12392: LD_INT 19
12394: PUSH
12395: LD_INT 20
12397: PUSH
12398: LD_INT 21
12400: PUSH
12401: LD_INT 22
12403: PUSH
12404: LD_INT 23
12406: PUSH
12407: LD_INT 24
12409: PUSH
12410: LD_INT 25
12412: PUSH
12413: LD_INT 26
12415: PUSH
12416: LD_INT 28
12418: PUSH
12419: LD_INT 30
12421: PUSH
12422: LD_INT 31
12424: PUSH
12425: LD_INT 32
12427: PUSH
12428: LD_INT 34
12430: PUSH
12431: LD_INT 36
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 101
12469: PUSH
12470: LD_INT 102
12472: PUSH
12473: LD_INT 103
12475: PUSH
12476: LD_INT 104
12478: PUSH
12479: LD_INT 105
12481: PUSH
12482: LD_INT 106
12484: PUSH
12485: LD_INT 107
12487: PUSH
12488: LD_INT 108
12490: PUSH
12491: LD_INT 109
12493: PUSH
12494: LD_INT 110
12496: PUSH
12497: LD_INT 111
12499: PUSH
12500: LD_INT 112
12502: PUSH
12503: LD_INT 114
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: ST_TO_ADDR
12525: GO 14112
12527: LD_INT 12
12529: DOUBLE
12530: EQUAL
12531: IFTRUE 12535
12533: GO 12743
12535: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12536: LD_ADDR_VAR 0 1
12540: PUSH
12541: LD_INT 1
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: LD_INT 3
12549: PUSH
12550: LD_INT 4
12552: PUSH
12553: LD_INT 5
12555: PUSH
12556: LD_INT 6
12558: PUSH
12559: LD_INT 7
12561: PUSH
12562: LD_INT 8
12564: PUSH
12565: LD_INT 9
12567: PUSH
12568: LD_INT 10
12570: PUSH
12571: LD_INT 11
12573: PUSH
12574: LD_INT 12
12576: PUSH
12577: LD_INT 13
12579: PUSH
12580: LD_INT 14
12582: PUSH
12583: LD_INT 15
12585: PUSH
12586: LD_INT 16
12588: PUSH
12589: LD_INT 17
12591: PUSH
12592: LD_INT 18
12594: PUSH
12595: LD_INT 19
12597: PUSH
12598: LD_INT 20
12600: PUSH
12601: LD_INT 21
12603: PUSH
12604: LD_INT 22
12606: PUSH
12607: LD_INT 23
12609: PUSH
12610: LD_INT 24
12612: PUSH
12613: LD_INT 25
12615: PUSH
12616: LD_INT 26
12618: PUSH
12619: LD_INT 27
12621: PUSH
12622: LD_INT 28
12624: PUSH
12625: LD_INT 30
12627: PUSH
12628: LD_INT 31
12630: PUSH
12631: LD_INT 32
12633: PUSH
12634: LD_INT 33
12636: PUSH
12637: LD_INT 34
12639: PUSH
12640: LD_INT 36
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 101
12681: PUSH
12682: LD_INT 102
12684: PUSH
12685: LD_INT 103
12687: PUSH
12688: LD_INT 104
12690: PUSH
12691: LD_INT 105
12693: PUSH
12694: LD_INT 106
12696: PUSH
12697: LD_INT 107
12699: PUSH
12700: LD_INT 108
12702: PUSH
12703: LD_INT 109
12705: PUSH
12706: LD_INT 110
12708: PUSH
12709: LD_INT 111
12711: PUSH
12712: LD_INT 112
12714: PUSH
12715: LD_INT 113
12717: PUSH
12718: LD_INT 114
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: ST_TO_ADDR
12741: GO 14112
12743: LD_INT 13
12745: DOUBLE
12746: EQUAL
12747: IFTRUE 12751
12749: GO 12947
12751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12752: LD_ADDR_VAR 0 1
12756: PUSH
12757: LD_INT 1
12759: PUSH
12760: LD_INT 2
12762: PUSH
12763: LD_INT 3
12765: PUSH
12766: LD_INT 4
12768: PUSH
12769: LD_INT 5
12771: PUSH
12772: LD_INT 8
12774: PUSH
12775: LD_INT 9
12777: PUSH
12778: LD_INT 10
12780: PUSH
12781: LD_INT 11
12783: PUSH
12784: LD_INT 12
12786: PUSH
12787: LD_INT 14
12789: PUSH
12790: LD_INT 15
12792: PUSH
12793: LD_INT 16
12795: PUSH
12796: LD_INT 17
12798: PUSH
12799: LD_INT 18
12801: PUSH
12802: LD_INT 19
12804: PUSH
12805: LD_INT 20
12807: PUSH
12808: LD_INT 21
12810: PUSH
12811: LD_INT 22
12813: PUSH
12814: LD_INT 23
12816: PUSH
12817: LD_INT 24
12819: PUSH
12820: LD_INT 25
12822: PUSH
12823: LD_INT 26
12825: PUSH
12826: LD_INT 27
12828: PUSH
12829: LD_INT 28
12831: PUSH
12832: LD_INT 30
12834: PUSH
12835: LD_INT 31
12837: PUSH
12838: LD_INT 32
12840: PUSH
12841: LD_INT 33
12843: PUSH
12844: LD_INT 34
12846: PUSH
12847: LD_INT 36
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: LD_INT 101
12885: PUSH
12886: LD_INT 102
12888: PUSH
12889: LD_INT 103
12891: PUSH
12892: LD_INT 104
12894: PUSH
12895: LD_INT 105
12897: PUSH
12898: LD_INT 106
12900: PUSH
12901: LD_INT 107
12903: PUSH
12904: LD_INT 108
12906: PUSH
12907: LD_INT 109
12909: PUSH
12910: LD_INT 110
12912: PUSH
12913: LD_INT 111
12915: PUSH
12916: LD_INT 112
12918: PUSH
12919: LD_INT 113
12921: PUSH
12922: LD_INT 114
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: ST_TO_ADDR
12945: GO 14112
12947: LD_INT 14
12949: DOUBLE
12950: EQUAL
12951: IFTRUE 12955
12953: GO 13167
12955: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
12956: LD_ADDR_VAR 0 1
12960: PUSH
12961: LD_INT 1
12963: PUSH
12964: LD_INT 2
12966: PUSH
12967: LD_INT 3
12969: PUSH
12970: LD_INT 4
12972: PUSH
12973: LD_INT 5
12975: PUSH
12976: LD_INT 6
12978: PUSH
12979: LD_INT 7
12981: PUSH
12982: LD_INT 8
12984: PUSH
12985: LD_INT 9
12987: PUSH
12988: LD_INT 10
12990: PUSH
12991: LD_INT 11
12993: PUSH
12994: LD_INT 12
12996: PUSH
12997: LD_INT 13
12999: PUSH
13000: LD_INT 14
13002: PUSH
13003: LD_INT 15
13005: PUSH
13006: LD_INT 16
13008: PUSH
13009: LD_INT 17
13011: PUSH
13012: LD_INT 18
13014: PUSH
13015: LD_INT 19
13017: PUSH
13018: LD_INT 20
13020: PUSH
13021: LD_INT 21
13023: PUSH
13024: LD_INT 22
13026: PUSH
13027: LD_INT 23
13029: PUSH
13030: LD_INT 24
13032: PUSH
13033: LD_INT 25
13035: PUSH
13036: LD_INT 26
13038: PUSH
13039: LD_INT 27
13041: PUSH
13042: LD_INT 28
13044: PUSH
13045: LD_INT 29
13047: PUSH
13048: LD_INT 30
13050: PUSH
13051: LD_INT 31
13053: PUSH
13054: LD_INT 32
13056: PUSH
13057: LD_INT 33
13059: PUSH
13060: LD_INT 34
13062: PUSH
13063: LD_INT 36
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 101
13105: PUSH
13106: LD_INT 102
13108: PUSH
13109: LD_INT 103
13111: PUSH
13112: LD_INT 104
13114: PUSH
13115: LD_INT 105
13117: PUSH
13118: LD_INT 106
13120: PUSH
13121: LD_INT 107
13123: PUSH
13124: LD_INT 108
13126: PUSH
13127: LD_INT 109
13129: PUSH
13130: LD_INT 110
13132: PUSH
13133: LD_INT 111
13135: PUSH
13136: LD_INT 112
13138: PUSH
13139: LD_INT 113
13141: PUSH
13142: LD_INT 114
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: ST_TO_ADDR
13165: GO 14112
13167: LD_INT 15
13169: DOUBLE
13170: EQUAL
13171: IFTRUE 13175
13173: GO 13387
13175: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13176: LD_ADDR_VAR 0 1
13180: PUSH
13181: LD_INT 1
13183: PUSH
13184: LD_INT 2
13186: PUSH
13187: LD_INT 3
13189: PUSH
13190: LD_INT 4
13192: PUSH
13193: LD_INT 5
13195: PUSH
13196: LD_INT 6
13198: PUSH
13199: LD_INT 7
13201: PUSH
13202: LD_INT 8
13204: PUSH
13205: LD_INT 9
13207: PUSH
13208: LD_INT 10
13210: PUSH
13211: LD_INT 11
13213: PUSH
13214: LD_INT 12
13216: PUSH
13217: LD_INT 13
13219: PUSH
13220: LD_INT 14
13222: PUSH
13223: LD_INT 15
13225: PUSH
13226: LD_INT 16
13228: PUSH
13229: LD_INT 17
13231: PUSH
13232: LD_INT 18
13234: PUSH
13235: LD_INT 19
13237: PUSH
13238: LD_INT 20
13240: PUSH
13241: LD_INT 21
13243: PUSH
13244: LD_INT 22
13246: PUSH
13247: LD_INT 23
13249: PUSH
13250: LD_INT 24
13252: PUSH
13253: LD_INT 25
13255: PUSH
13256: LD_INT 26
13258: PUSH
13259: LD_INT 27
13261: PUSH
13262: LD_INT 28
13264: PUSH
13265: LD_INT 29
13267: PUSH
13268: LD_INT 30
13270: PUSH
13271: LD_INT 31
13273: PUSH
13274: LD_INT 32
13276: PUSH
13277: LD_INT 33
13279: PUSH
13280: LD_INT 34
13282: PUSH
13283: LD_INT 36
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 101
13325: PUSH
13326: LD_INT 102
13328: PUSH
13329: LD_INT 103
13331: PUSH
13332: LD_INT 104
13334: PUSH
13335: LD_INT 105
13337: PUSH
13338: LD_INT 106
13340: PUSH
13341: LD_INT 107
13343: PUSH
13344: LD_INT 108
13346: PUSH
13347: LD_INT 109
13349: PUSH
13350: LD_INT 110
13352: PUSH
13353: LD_INT 111
13355: PUSH
13356: LD_INT 112
13358: PUSH
13359: LD_INT 113
13361: PUSH
13362: LD_INT 114
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: ST_TO_ADDR
13385: GO 14112
13387: LD_INT 16
13389: DOUBLE
13390: EQUAL
13391: IFTRUE 13395
13393: GO 13519
13395: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13396: LD_ADDR_VAR 0 1
13400: PUSH
13401: LD_INT 2
13403: PUSH
13404: LD_INT 4
13406: PUSH
13407: LD_INT 5
13409: PUSH
13410: LD_INT 7
13412: PUSH
13413: LD_INT 11
13415: PUSH
13416: LD_INT 12
13418: PUSH
13419: LD_INT 15
13421: PUSH
13422: LD_INT 16
13424: PUSH
13425: LD_INT 20
13427: PUSH
13428: LD_INT 21
13430: PUSH
13431: LD_INT 22
13433: PUSH
13434: LD_INT 23
13436: PUSH
13437: LD_INT 25
13439: PUSH
13440: LD_INT 26
13442: PUSH
13443: LD_INT 30
13445: PUSH
13446: LD_INT 31
13448: PUSH
13449: LD_INT 32
13451: PUSH
13452: LD_INT 33
13454: PUSH
13455: LD_INT 34
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: PUSH
13479: LD_INT 101
13481: PUSH
13482: LD_INT 102
13484: PUSH
13485: LD_INT 103
13487: PUSH
13488: LD_INT 106
13490: PUSH
13491: LD_INT 108
13493: PUSH
13494: LD_INT 112
13496: PUSH
13497: LD_INT 113
13499: PUSH
13500: LD_INT 114
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: ST_TO_ADDR
13517: GO 14112
13519: LD_INT 17
13521: DOUBLE
13522: EQUAL
13523: IFTRUE 13527
13525: GO 13739
13527: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13528: LD_ADDR_VAR 0 1
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: LD_INT 2
13538: PUSH
13539: LD_INT 3
13541: PUSH
13542: LD_INT 4
13544: PUSH
13545: LD_INT 5
13547: PUSH
13548: LD_INT 6
13550: PUSH
13551: LD_INT 7
13553: PUSH
13554: LD_INT 8
13556: PUSH
13557: LD_INT 9
13559: PUSH
13560: LD_INT 10
13562: PUSH
13563: LD_INT 11
13565: PUSH
13566: LD_INT 12
13568: PUSH
13569: LD_INT 13
13571: PUSH
13572: LD_INT 14
13574: PUSH
13575: LD_INT 15
13577: PUSH
13578: LD_INT 16
13580: PUSH
13581: LD_INT 17
13583: PUSH
13584: LD_INT 18
13586: PUSH
13587: LD_INT 19
13589: PUSH
13590: LD_INT 20
13592: PUSH
13593: LD_INT 21
13595: PUSH
13596: LD_INT 22
13598: PUSH
13599: LD_INT 23
13601: PUSH
13602: LD_INT 24
13604: PUSH
13605: LD_INT 25
13607: PUSH
13608: LD_INT 26
13610: PUSH
13611: LD_INT 27
13613: PUSH
13614: LD_INT 28
13616: PUSH
13617: LD_INT 29
13619: PUSH
13620: LD_INT 30
13622: PUSH
13623: LD_INT 31
13625: PUSH
13626: LD_INT 32
13628: PUSH
13629: LD_INT 33
13631: PUSH
13632: LD_INT 34
13634: PUSH
13635: LD_INT 36
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 101
13677: PUSH
13678: LD_INT 102
13680: PUSH
13681: LD_INT 103
13683: PUSH
13684: LD_INT 104
13686: PUSH
13687: LD_INT 105
13689: PUSH
13690: LD_INT 106
13692: PUSH
13693: LD_INT 107
13695: PUSH
13696: LD_INT 108
13698: PUSH
13699: LD_INT 109
13701: PUSH
13702: LD_INT 110
13704: PUSH
13705: LD_INT 111
13707: PUSH
13708: LD_INT 112
13710: PUSH
13711: LD_INT 113
13713: PUSH
13714: LD_INT 114
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: ST_TO_ADDR
13737: GO 14112
13739: LD_INT 18
13741: DOUBLE
13742: EQUAL
13743: IFTRUE 13747
13745: GO 13883
13747: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13748: LD_ADDR_VAR 0 1
13752: PUSH
13753: LD_INT 2
13755: PUSH
13756: LD_INT 4
13758: PUSH
13759: LD_INT 5
13761: PUSH
13762: LD_INT 7
13764: PUSH
13765: LD_INT 11
13767: PUSH
13768: LD_INT 12
13770: PUSH
13771: LD_INT 15
13773: PUSH
13774: LD_INT 16
13776: PUSH
13777: LD_INT 20
13779: PUSH
13780: LD_INT 21
13782: PUSH
13783: LD_INT 22
13785: PUSH
13786: LD_INT 23
13788: PUSH
13789: LD_INT 25
13791: PUSH
13792: LD_INT 26
13794: PUSH
13795: LD_INT 30
13797: PUSH
13798: LD_INT 31
13800: PUSH
13801: LD_INT 32
13803: PUSH
13804: LD_INT 33
13806: PUSH
13807: LD_INT 34
13809: PUSH
13810: LD_INT 35
13812: PUSH
13813: LD_INT 36
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 101
13841: PUSH
13842: LD_INT 102
13844: PUSH
13845: LD_INT 103
13847: PUSH
13848: LD_INT 106
13850: PUSH
13851: LD_INT 108
13853: PUSH
13854: LD_INT 112
13856: PUSH
13857: LD_INT 113
13859: PUSH
13860: LD_INT 114
13862: PUSH
13863: LD_INT 115
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: ST_TO_ADDR
13881: GO 14112
13883: LD_INT 19
13885: DOUBLE
13886: EQUAL
13887: IFTRUE 13891
13889: GO 14111
13891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13892: LD_ADDR_VAR 0 1
13896: PUSH
13897: LD_INT 1
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: LD_INT 3
13905: PUSH
13906: LD_INT 4
13908: PUSH
13909: LD_INT 5
13911: PUSH
13912: LD_INT 6
13914: PUSH
13915: LD_INT 7
13917: PUSH
13918: LD_INT 8
13920: PUSH
13921: LD_INT 9
13923: PUSH
13924: LD_INT 10
13926: PUSH
13927: LD_INT 11
13929: PUSH
13930: LD_INT 12
13932: PUSH
13933: LD_INT 13
13935: PUSH
13936: LD_INT 14
13938: PUSH
13939: LD_INT 15
13941: PUSH
13942: LD_INT 16
13944: PUSH
13945: LD_INT 17
13947: PUSH
13948: LD_INT 18
13950: PUSH
13951: LD_INT 19
13953: PUSH
13954: LD_INT 20
13956: PUSH
13957: LD_INT 21
13959: PUSH
13960: LD_INT 22
13962: PUSH
13963: LD_INT 23
13965: PUSH
13966: LD_INT 24
13968: PUSH
13969: LD_INT 25
13971: PUSH
13972: LD_INT 26
13974: PUSH
13975: LD_INT 27
13977: PUSH
13978: LD_INT 28
13980: PUSH
13981: LD_INT 29
13983: PUSH
13984: LD_INT 30
13986: PUSH
13987: LD_INT 31
13989: PUSH
13990: LD_INT 32
13992: PUSH
13993: LD_INT 33
13995: PUSH
13996: LD_INT 34
13998: PUSH
13999: LD_INT 35
14001: PUSH
14002: LD_INT 36
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 101
14045: PUSH
14046: LD_INT 102
14048: PUSH
14049: LD_INT 103
14051: PUSH
14052: LD_INT 104
14054: PUSH
14055: LD_INT 105
14057: PUSH
14058: LD_INT 106
14060: PUSH
14061: LD_INT 107
14063: PUSH
14064: LD_INT 108
14066: PUSH
14067: LD_INT 109
14069: PUSH
14070: LD_INT 110
14072: PUSH
14073: LD_INT 111
14075: PUSH
14076: LD_INT 112
14078: PUSH
14079: LD_INT 113
14081: PUSH
14082: LD_INT 114
14084: PUSH
14085: LD_INT 115
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: ST_TO_ADDR
14109: GO 14112
14111: POP
// end else
14112: GO 14331
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14114: LD_ADDR_VAR 0 1
14118: PUSH
14119: LD_INT 1
14121: PUSH
14122: LD_INT 2
14124: PUSH
14125: LD_INT 3
14127: PUSH
14128: LD_INT 4
14130: PUSH
14131: LD_INT 5
14133: PUSH
14134: LD_INT 6
14136: PUSH
14137: LD_INT 7
14139: PUSH
14140: LD_INT 8
14142: PUSH
14143: LD_INT 9
14145: PUSH
14146: LD_INT 10
14148: PUSH
14149: LD_INT 11
14151: PUSH
14152: LD_INT 12
14154: PUSH
14155: LD_INT 13
14157: PUSH
14158: LD_INT 14
14160: PUSH
14161: LD_INT 15
14163: PUSH
14164: LD_INT 16
14166: PUSH
14167: LD_INT 17
14169: PUSH
14170: LD_INT 18
14172: PUSH
14173: LD_INT 19
14175: PUSH
14176: LD_INT 20
14178: PUSH
14179: LD_INT 21
14181: PUSH
14182: LD_INT 22
14184: PUSH
14185: LD_INT 23
14187: PUSH
14188: LD_INT 24
14190: PUSH
14191: LD_INT 25
14193: PUSH
14194: LD_INT 26
14196: PUSH
14197: LD_INT 27
14199: PUSH
14200: LD_INT 28
14202: PUSH
14203: LD_INT 29
14205: PUSH
14206: LD_INT 30
14208: PUSH
14209: LD_INT 31
14211: PUSH
14212: LD_INT 32
14214: PUSH
14215: LD_INT 33
14217: PUSH
14218: LD_INT 34
14220: PUSH
14221: LD_INT 35
14223: PUSH
14224: LD_INT 36
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 101
14267: PUSH
14268: LD_INT 102
14270: PUSH
14271: LD_INT 103
14273: PUSH
14274: LD_INT 104
14276: PUSH
14277: LD_INT 105
14279: PUSH
14280: LD_INT 106
14282: PUSH
14283: LD_INT 107
14285: PUSH
14286: LD_INT 108
14288: PUSH
14289: LD_INT 109
14291: PUSH
14292: LD_INT 110
14294: PUSH
14295: LD_INT 111
14297: PUSH
14298: LD_INT 112
14300: PUSH
14301: LD_INT 113
14303: PUSH
14304: LD_INT 114
14306: PUSH
14307: LD_INT 115
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: ST_TO_ADDR
// if result then
14331: LD_VAR 0 1
14335: IFFALSE 14624
// begin normal :=  ;
14337: LD_ADDR_VAR 0 3
14341: PUSH
14342: LD_STRING 
14344: ST_TO_ADDR
// hardcore :=  ;
14345: LD_ADDR_VAR 0 4
14349: PUSH
14350: LD_STRING 
14352: ST_TO_ADDR
// for i = 1 to normalCounter do
14353: LD_ADDR_VAR 0 5
14357: PUSH
14358: DOUBLE
14359: LD_INT 1
14361: DEC
14362: ST_TO_ADDR
14363: LD_EXP 42
14367: PUSH
14368: FOR_TO
14369: IFFALSE 14470
// begin tmp := 0 ;
14371: LD_ADDR_VAR 0 2
14375: PUSH
14376: LD_STRING 0
14378: ST_TO_ADDR
// if result [ 1 ] then
14379: LD_VAR 0 1
14383: PUSH
14384: LD_INT 1
14386: ARRAY
14387: IFFALSE 14452
// if result [ 1 ] [ 1 ] = i then
14389: LD_VAR 0 1
14393: PUSH
14394: LD_INT 1
14396: ARRAY
14397: PUSH
14398: LD_INT 1
14400: ARRAY
14401: PUSH
14402: LD_VAR 0 5
14406: EQUAL
14407: IFFALSE 14452
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14409: LD_ADDR_VAR 0 1
14413: PUSH
14414: LD_VAR 0 1
14418: PPUSH
14419: LD_INT 1
14421: PPUSH
14422: LD_VAR 0 1
14426: PUSH
14427: LD_INT 1
14429: ARRAY
14430: PPUSH
14431: LD_INT 1
14433: PPUSH
14434: CALL_OW 3
14438: PPUSH
14439: CALL_OW 1
14443: ST_TO_ADDR
// tmp := 1 ;
14444: LD_ADDR_VAR 0 2
14448: PUSH
14449: LD_STRING 1
14451: ST_TO_ADDR
// end ; normal := normal & tmp ;
14452: LD_ADDR_VAR 0 3
14456: PUSH
14457: LD_VAR 0 3
14461: PUSH
14462: LD_VAR 0 2
14466: STR
14467: ST_TO_ADDR
// end ;
14468: GO 14368
14470: POP
14471: POP
// for i = 1 to hardcoreCounter do
14472: LD_ADDR_VAR 0 5
14476: PUSH
14477: DOUBLE
14478: LD_INT 1
14480: DEC
14481: ST_TO_ADDR
14482: LD_EXP 43
14486: PUSH
14487: FOR_TO
14488: IFFALSE 14593
// begin tmp := 0 ;
14490: LD_ADDR_VAR 0 2
14494: PUSH
14495: LD_STRING 0
14497: ST_TO_ADDR
// if result [ 2 ] then
14498: LD_VAR 0 1
14502: PUSH
14503: LD_INT 2
14505: ARRAY
14506: IFFALSE 14575
// if result [ 2 ] [ 1 ] = 100 + i then
14508: LD_VAR 0 1
14512: PUSH
14513: LD_INT 2
14515: ARRAY
14516: PUSH
14517: LD_INT 1
14519: ARRAY
14520: PUSH
14521: LD_INT 100
14523: PUSH
14524: LD_VAR 0 5
14528: PLUS
14529: EQUAL
14530: IFFALSE 14575
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14532: LD_ADDR_VAR 0 1
14536: PUSH
14537: LD_VAR 0 1
14541: PPUSH
14542: LD_INT 2
14544: PPUSH
14545: LD_VAR 0 1
14549: PUSH
14550: LD_INT 2
14552: ARRAY
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: CALL_OW 3
14561: PPUSH
14562: CALL_OW 1
14566: ST_TO_ADDR
// tmp := 1 ;
14567: LD_ADDR_VAR 0 2
14571: PUSH
14572: LD_STRING 1
14574: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14575: LD_ADDR_VAR 0 4
14579: PUSH
14580: LD_VAR 0 4
14584: PUSH
14585: LD_VAR 0 2
14589: STR
14590: ST_TO_ADDR
// end ;
14591: GO 14487
14593: POP
14594: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14595: LD_STRING getStreamItemsFromMission("
14597: PUSH
14598: LD_VAR 0 3
14602: STR
14603: PUSH
14604: LD_STRING ","
14606: STR
14607: PUSH
14608: LD_VAR 0 4
14612: STR
14613: PUSH
14614: LD_STRING ")
14616: STR
14617: PPUSH
14618: CALL_OW 559
// end else
14622: GO 14631
// ToLua ( getStreamItemsFromMission("","") ) ;
14624: LD_STRING getStreamItemsFromMission("","")
14626: PPUSH
14627: CALL_OW 559
// end ;
14631: LD_VAR 0 1
14635: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14636: LD_EXP 41
14640: PUSH
14641: LD_EXP 46
14645: AND
14646: IFFALSE 14770
14648: GO 14650
14650: DISABLE
14651: LD_INT 0
14653: PPUSH
14654: PPUSH
// begin enable ;
14655: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14656: LD_ADDR_VAR 0 2
14660: PUSH
14661: LD_INT 22
14663: PUSH
14664: LD_OWVAR 2
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 2
14675: PUSH
14676: LD_INT 34
14678: PUSH
14679: LD_INT 7
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 34
14688: PUSH
14689: LD_INT 45
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 34
14698: PUSH
14699: LD_INT 28
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 34
14708: PUSH
14709: LD_INT 47
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PPUSH
14727: CALL_OW 69
14731: ST_TO_ADDR
// if not tmp then
14732: LD_VAR 0 2
14736: NOT
14737: IFFALSE 14741
// exit ;
14739: GO 14770
// for i in tmp do
14741: LD_ADDR_VAR 0 1
14745: PUSH
14746: LD_VAR 0 2
14750: PUSH
14751: FOR_IN
14752: IFFALSE 14768
// begin SetLives ( i , 0 ) ;
14754: LD_VAR 0 1
14758: PPUSH
14759: LD_INT 0
14761: PPUSH
14762: CALL_OW 234
// end ;
14766: GO 14751
14768: POP
14769: POP
// end ;
14770: PPOPN 2
14772: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14773: LD_EXP 41
14777: PUSH
14778: LD_EXP 47
14782: AND
14783: IFFALSE 14867
14785: GO 14787
14787: DISABLE
14788: LD_INT 0
14790: PPUSH
14791: PPUSH
// begin enable ;
14792: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14793: LD_ADDR_VAR 0 2
14797: PUSH
14798: LD_INT 22
14800: PUSH
14801: LD_OWVAR 2
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 32
14812: PUSH
14813: LD_INT 3
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PPUSH
14824: CALL_OW 69
14828: ST_TO_ADDR
// if not tmp then
14829: LD_VAR 0 2
14833: NOT
14834: IFFALSE 14838
// exit ;
14836: GO 14867
// for i in tmp do
14838: LD_ADDR_VAR 0 1
14842: PUSH
14843: LD_VAR 0 2
14847: PUSH
14848: FOR_IN
14849: IFFALSE 14865
// begin SetLives ( i , 0 ) ;
14851: LD_VAR 0 1
14855: PPUSH
14856: LD_INT 0
14858: PPUSH
14859: CALL_OW 234
// end ;
14863: GO 14848
14865: POP
14866: POP
// end ;
14867: PPOPN 2
14869: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14870: LD_EXP 41
14874: PUSH
14875: LD_EXP 44
14879: AND
14880: IFFALSE 14973
14882: GO 14884
14884: DISABLE
14885: LD_INT 0
14887: PPUSH
// begin enable ;
14888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14889: LD_ADDR_VAR 0 1
14893: PUSH
14894: LD_INT 22
14896: PUSH
14897: LD_OWVAR 2
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 2
14908: PUSH
14909: LD_INT 25
14911: PUSH
14912: LD_INT 5
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 25
14921: PUSH
14922: LD_INT 9
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 25
14931: PUSH
14932: LD_INT 8
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PPUSH
14949: CALL_OW 69
14953: PUSH
14954: FOR_IN
14955: IFFALSE 14971
// begin SetClass ( i , 1 ) ;
14957: LD_VAR 0 1
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: CALL_OW 336
// end ;
14969: GO 14954
14971: POP
14972: POP
// end ;
14973: PPOPN 1
14975: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14976: LD_EXP 41
14980: PUSH
14981: LD_EXP 45
14985: AND
14986: PUSH
14987: LD_OWVAR 65
14991: PUSH
14992: LD_INT 7
14994: LESS
14995: AND
14996: IFFALSE 15010
14998: GO 15000
15000: DISABLE
// begin enable ;
15001: ENABLE
// game_speed := 7 ;
15002: LD_ADDR_OWVAR 65
15006: PUSH
15007: LD_INT 7
15009: ST_TO_ADDR
// end ;
15010: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15011: LD_EXP 41
15015: PUSH
15016: LD_EXP 48
15020: AND
15021: IFFALSE 15223
15023: GO 15025
15025: DISABLE
15026: LD_INT 0
15028: PPUSH
15029: PPUSH
15030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15031: LD_ADDR_VAR 0 3
15035: PUSH
15036: LD_INT 81
15038: PUSH
15039: LD_OWVAR 2
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 21
15050: PUSH
15051: LD_INT 1
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PPUSH
15062: CALL_OW 69
15066: ST_TO_ADDR
// if not tmp then
15067: LD_VAR 0 3
15071: NOT
15072: IFFALSE 15076
// exit ;
15074: GO 15223
// if tmp > 5 then
15076: LD_VAR 0 3
15080: PUSH
15081: LD_INT 5
15083: GREATER
15084: IFFALSE 15096
// k := 5 else
15086: LD_ADDR_VAR 0 2
15090: PUSH
15091: LD_INT 5
15093: ST_TO_ADDR
15094: GO 15106
// k := tmp ;
15096: LD_ADDR_VAR 0 2
15100: PUSH
15101: LD_VAR 0 3
15105: ST_TO_ADDR
// for i := 1 to k do
15106: LD_ADDR_VAR 0 1
15110: PUSH
15111: DOUBLE
15112: LD_INT 1
15114: DEC
15115: ST_TO_ADDR
15116: LD_VAR 0 2
15120: PUSH
15121: FOR_TO
15122: IFFALSE 15221
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15124: LD_VAR 0 3
15128: PUSH
15129: LD_VAR 0 1
15133: ARRAY
15134: PPUSH
15135: LD_VAR 0 1
15139: PUSH
15140: LD_INT 4
15142: MOD
15143: PUSH
15144: LD_INT 1
15146: PLUS
15147: PPUSH
15148: CALL_OW 259
15152: PUSH
15153: LD_INT 10
15155: LESS
15156: IFFALSE 15219
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15158: LD_VAR 0 3
15162: PUSH
15163: LD_VAR 0 1
15167: ARRAY
15168: PPUSH
15169: LD_VAR 0 1
15173: PUSH
15174: LD_INT 4
15176: MOD
15177: PUSH
15178: LD_INT 1
15180: PLUS
15181: PPUSH
15182: LD_VAR 0 3
15186: PUSH
15187: LD_VAR 0 1
15191: ARRAY
15192: PPUSH
15193: LD_VAR 0 1
15197: PUSH
15198: LD_INT 4
15200: MOD
15201: PUSH
15202: LD_INT 1
15204: PLUS
15205: PPUSH
15206: CALL_OW 259
15210: PUSH
15211: LD_INT 1
15213: PLUS
15214: PPUSH
15215: CALL_OW 237
15219: GO 15121
15221: POP
15222: POP
// end ;
15223: PPOPN 3
15225: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15226: LD_EXP 41
15230: PUSH
15231: LD_EXP 49
15235: AND
15236: IFFALSE 15256
15238: GO 15240
15240: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15241: LD_INT 4
15243: PPUSH
15244: LD_OWVAR 2
15248: PPUSH
15249: LD_INT 0
15251: PPUSH
15252: CALL_OW 324
15256: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15257: LD_EXP 41
15261: PUSH
15262: LD_EXP 78
15266: AND
15267: IFFALSE 15287
15269: GO 15271
15271: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15272: LD_INT 19
15274: PPUSH
15275: LD_OWVAR 2
15279: PPUSH
15280: LD_INT 0
15282: PPUSH
15283: CALL_OW 324
15287: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15288: LD_EXP 41
15292: PUSH
15293: LD_EXP 50
15297: AND
15298: IFFALSE 15400
15300: GO 15302
15302: DISABLE
15303: LD_INT 0
15305: PPUSH
15306: PPUSH
// begin enable ;
15307: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15308: LD_ADDR_VAR 0 2
15312: PUSH
15313: LD_INT 22
15315: PUSH
15316: LD_OWVAR 2
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 2
15327: PUSH
15328: LD_INT 34
15330: PUSH
15331: LD_INT 11
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 34
15340: PUSH
15341: LD_INT 30
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PPUSH
15357: CALL_OW 69
15361: ST_TO_ADDR
// if not tmp then
15362: LD_VAR 0 2
15366: NOT
15367: IFFALSE 15371
// exit ;
15369: GO 15400
// for i in tmp do
15371: LD_ADDR_VAR 0 1
15375: PUSH
15376: LD_VAR 0 2
15380: PUSH
15381: FOR_IN
15382: IFFALSE 15398
// begin SetLives ( i , 0 ) ;
15384: LD_VAR 0 1
15388: PPUSH
15389: LD_INT 0
15391: PPUSH
15392: CALL_OW 234
// end ;
15396: GO 15381
15398: POP
15399: POP
// end ;
15400: PPOPN 2
15402: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15403: LD_EXP 41
15407: PUSH
15408: LD_EXP 51
15412: AND
15413: IFFALSE 15433
15415: GO 15417
15417: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15418: LD_INT 32
15420: PPUSH
15421: LD_OWVAR 2
15425: PPUSH
15426: LD_INT 0
15428: PPUSH
15429: CALL_OW 324
15433: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15434: LD_EXP 41
15438: PUSH
15439: LD_EXP 52
15443: AND
15444: IFFALSE 15625
15446: GO 15448
15448: DISABLE
15449: LD_INT 0
15451: PPUSH
15452: PPUSH
15453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15454: LD_ADDR_VAR 0 2
15458: PUSH
15459: LD_INT 22
15461: PUSH
15462: LD_OWVAR 2
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 33
15473: PUSH
15474: LD_INT 3
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PPUSH
15485: CALL_OW 69
15489: ST_TO_ADDR
// if not tmp then
15490: LD_VAR 0 2
15494: NOT
15495: IFFALSE 15499
// exit ;
15497: GO 15625
// side := 0 ;
15499: LD_ADDR_VAR 0 3
15503: PUSH
15504: LD_INT 0
15506: ST_TO_ADDR
// for i := 1 to 8 do
15507: LD_ADDR_VAR 0 1
15511: PUSH
15512: DOUBLE
15513: LD_INT 1
15515: DEC
15516: ST_TO_ADDR
15517: LD_INT 8
15519: PUSH
15520: FOR_TO
15521: IFFALSE 15569
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15523: LD_OWVAR 2
15527: PUSH
15528: LD_VAR 0 1
15532: NONEQUAL
15533: PUSH
15534: LD_OWVAR 2
15538: PPUSH
15539: LD_VAR 0 1
15543: PPUSH
15544: CALL_OW 81
15548: PUSH
15549: LD_INT 2
15551: EQUAL
15552: AND
15553: IFFALSE 15567
// begin side := i ;
15555: LD_ADDR_VAR 0 3
15559: PUSH
15560: LD_VAR 0 1
15564: ST_TO_ADDR
// break ;
15565: GO 15569
// end ;
15567: GO 15520
15569: POP
15570: POP
// if not side then
15571: LD_VAR 0 3
15575: NOT
15576: IFFALSE 15580
// exit ;
15578: GO 15625
// for i := 1 to tmp do
15580: LD_ADDR_VAR 0 1
15584: PUSH
15585: DOUBLE
15586: LD_INT 1
15588: DEC
15589: ST_TO_ADDR
15590: LD_VAR 0 2
15594: PUSH
15595: FOR_TO
15596: IFFALSE 15623
// if Prob ( 60 ) then
15598: LD_INT 60
15600: PPUSH
15601: CALL_OW 13
15605: IFFALSE 15621
// SetSide ( i , side ) ;
15607: LD_VAR 0 1
15611: PPUSH
15612: LD_VAR 0 3
15616: PPUSH
15617: CALL_OW 235
15621: GO 15595
15623: POP
15624: POP
// end ;
15625: PPOPN 3
15627: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15628: LD_EXP 41
15632: PUSH
15633: LD_EXP 54
15637: AND
15638: IFFALSE 15757
15640: GO 15642
15642: DISABLE
15643: LD_INT 0
15645: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15646: LD_ADDR_VAR 0 1
15650: PUSH
15651: LD_INT 22
15653: PUSH
15654: LD_OWVAR 2
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 21
15665: PUSH
15666: LD_INT 1
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 3
15675: PUSH
15676: LD_INT 23
15678: PUSH
15679: LD_INT 0
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: PPUSH
15695: CALL_OW 69
15699: PUSH
15700: FOR_IN
15701: IFFALSE 15755
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL_OW 257
15712: PUSH
15713: LD_INT 1
15715: PUSH
15716: LD_INT 2
15718: PUSH
15719: LD_INT 3
15721: PUSH
15722: LD_INT 4
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: IN
15731: IFFALSE 15753
// SetClass ( un , rand ( 1 , 4 ) ) ;
15733: LD_VAR 0 1
15737: PPUSH
15738: LD_INT 1
15740: PPUSH
15741: LD_INT 4
15743: PPUSH
15744: CALL_OW 12
15748: PPUSH
15749: CALL_OW 336
15753: GO 15700
15755: POP
15756: POP
// end ;
15757: PPOPN 1
15759: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15760: LD_EXP 41
15764: PUSH
15765: LD_EXP 53
15769: AND
15770: IFFALSE 15849
15772: GO 15774
15774: DISABLE
15775: LD_INT 0
15777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15778: LD_ADDR_VAR 0 1
15782: PUSH
15783: LD_INT 22
15785: PUSH
15786: LD_OWVAR 2
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 21
15797: PUSH
15798: LD_INT 3
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PPUSH
15809: CALL_OW 69
15813: ST_TO_ADDR
// if not tmp then
15814: LD_VAR 0 1
15818: NOT
15819: IFFALSE 15823
// exit ;
15821: GO 15849
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15823: LD_VAR 0 1
15827: PUSH
15828: LD_INT 1
15830: PPUSH
15831: LD_VAR 0 1
15835: PPUSH
15836: CALL_OW 12
15840: ARRAY
15841: PPUSH
15842: LD_INT 100
15844: PPUSH
15845: CALL_OW 234
// end ;
15849: PPOPN 1
15851: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15852: LD_EXP 41
15856: PUSH
15857: LD_EXP 55
15861: AND
15862: IFFALSE 15960
15864: GO 15866
15866: DISABLE
15867: LD_INT 0
15869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15870: LD_ADDR_VAR 0 1
15874: PUSH
15875: LD_INT 22
15877: PUSH
15878: LD_OWVAR 2
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: LD_INT 21
15889: PUSH
15890: LD_INT 1
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PPUSH
15901: CALL_OW 69
15905: ST_TO_ADDR
// if not tmp then
15906: LD_VAR 0 1
15910: NOT
15911: IFFALSE 15915
// exit ;
15913: GO 15960
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15915: LD_VAR 0 1
15919: PUSH
15920: LD_INT 1
15922: PPUSH
15923: LD_VAR 0 1
15927: PPUSH
15928: CALL_OW 12
15932: ARRAY
15933: PPUSH
15934: LD_INT 1
15936: PPUSH
15937: LD_INT 4
15939: PPUSH
15940: CALL_OW 12
15944: PPUSH
15945: LD_INT 3000
15947: PPUSH
15948: LD_INT 9000
15950: PPUSH
15951: CALL_OW 12
15955: PPUSH
15956: CALL_OW 492
// end ;
15960: PPOPN 1
15962: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15963: LD_EXP 41
15967: PUSH
15968: LD_EXP 56
15972: AND
15973: IFFALSE 15993
15975: GO 15977
15977: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15978: LD_INT 1
15980: PPUSH
15981: LD_OWVAR 2
15985: PPUSH
15986: LD_INT 0
15988: PPUSH
15989: CALL_OW 324
15993: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15994: LD_EXP 41
15998: PUSH
15999: LD_EXP 57
16003: AND
16004: IFFALSE 16087
16006: GO 16008
16008: DISABLE
16009: LD_INT 0
16011: PPUSH
16012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16013: LD_ADDR_VAR 0 2
16017: PUSH
16018: LD_INT 22
16020: PUSH
16021: LD_OWVAR 2
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: LD_INT 21
16032: PUSH
16033: LD_INT 3
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PPUSH
16044: CALL_OW 69
16048: ST_TO_ADDR
// if not tmp then
16049: LD_VAR 0 2
16053: NOT
16054: IFFALSE 16058
// exit ;
16056: GO 16087
// for i in tmp do
16058: LD_ADDR_VAR 0 1
16062: PUSH
16063: LD_VAR 0 2
16067: PUSH
16068: FOR_IN
16069: IFFALSE 16085
// SetBLevel ( i , 10 ) ;
16071: LD_VAR 0 1
16075: PPUSH
16076: LD_INT 10
16078: PPUSH
16079: CALL_OW 241
16083: GO 16068
16085: POP
16086: POP
// end ;
16087: PPOPN 2
16089: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16090: LD_EXP 41
16094: PUSH
16095: LD_EXP 58
16099: AND
16100: IFFALSE 16211
16102: GO 16104
16104: DISABLE
16105: LD_INT 0
16107: PPUSH
16108: PPUSH
16109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16110: LD_ADDR_VAR 0 3
16114: PUSH
16115: LD_INT 22
16117: PUSH
16118: LD_OWVAR 2
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: LD_INT 25
16129: PUSH
16130: LD_INT 1
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PPUSH
16141: CALL_OW 69
16145: ST_TO_ADDR
// if not tmp then
16146: LD_VAR 0 3
16150: NOT
16151: IFFALSE 16155
// exit ;
16153: GO 16211
// un := tmp [ rand ( 1 , tmp ) ] ;
16155: LD_ADDR_VAR 0 2
16159: PUSH
16160: LD_VAR 0 3
16164: PUSH
16165: LD_INT 1
16167: PPUSH
16168: LD_VAR 0 3
16172: PPUSH
16173: CALL_OW 12
16177: ARRAY
16178: ST_TO_ADDR
// if Crawls ( un ) then
16179: LD_VAR 0 2
16183: PPUSH
16184: CALL_OW 318
16188: IFFALSE 16199
// ComWalk ( un ) ;
16190: LD_VAR 0 2
16194: PPUSH
16195: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16199: LD_VAR 0 2
16203: PPUSH
16204: LD_INT 5
16206: PPUSH
16207: CALL_OW 336
// end ;
16211: PPOPN 3
16213: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16214: LD_EXP 41
16218: PUSH
16219: LD_EXP 59
16223: AND
16224: PUSH
16225: LD_OWVAR 67
16229: PUSH
16230: LD_INT 3
16232: LESS
16233: AND
16234: IFFALSE 16253
16236: GO 16238
16238: DISABLE
// Difficulty := Difficulty + 1 ;
16239: LD_ADDR_OWVAR 67
16243: PUSH
16244: LD_OWVAR 67
16248: PUSH
16249: LD_INT 1
16251: PLUS
16252: ST_TO_ADDR
16253: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16254: LD_EXP 41
16258: PUSH
16259: LD_EXP 60
16263: AND
16264: IFFALSE 16367
16266: GO 16268
16268: DISABLE
16269: LD_INT 0
16271: PPUSH
// begin for i := 1 to 5 do
16272: LD_ADDR_VAR 0 1
16276: PUSH
16277: DOUBLE
16278: LD_INT 1
16280: DEC
16281: ST_TO_ADDR
16282: LD_INT 5
16284: PUSH
16285: FOR_TO
16286: IFFALSE 16365
// begin uc_nation := nation_nature ;
16288: LD_ADDR_OWVAR 21
16292: PUSH
16293: LD_INT 0
16295: ST_TO_ADDR
// uc_side := 0 ;
16296: LD_ADDR_OWVAR 20
16300: PUSH
16301: LD_INT 0
16303: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16304: LD_ADDR_OWVAR 29
16308: PUSH
16309: LD_INT 12
16311: PUSH
16312: LD_INT 12
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: ST_TO_ADDR
// hc_agressivity := 20 ;
16319: LD_ADDR_OWVAR 35
16323: PUSH
16324: LD_INT 20
16326: ST_TO_ADDR
// hc_class := class_tiger ;
16327: LD_ADDR_OWVAR 28
16331: PUSH
16332: LD_INT 14
16334: ST_TO_ADDR
// hc_gallery :=  ;
16335: LD_ADDR_OWVAR 33
16339: PUSH
16340: LD_STRING 
16342: ST_TO_ADDR
// hc_name :=  ;
16343: LD_ADDR_OWVAR 26
16347: PUSH
16348: LD_STRING 
16350: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16351: CALL_OW 44
16355: PPUSH
16356: LD_INT 0
16358: PPUSH
16359: CALL_OW 51
// end ;
16363: GO 16285
16365: POP
16366: POP
// end ;
16367: PPOPN 1
16369: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16370: LD_EXP 41
16374: PUSH
16375: LD_EXP 61
16379: AND
16380: IFFALSE 16389
16382: GO 16384
16384: DISABLE
// StreamSibBomb ;
16385: CALL 16390 0 0
16389: END
// export function StreamSibBomb ; var i , x , y ; begin
16390: LD_INT 0
16392: PPUSH
16393: PPUSH
16394: PPUSH
16395: PPUSH
// result := false ;
16396: LD_ADDR_VAR 0 1
16400: PUSH
16401: LD_INT 0
16403: ST_TO_ADDR
// for i := 1 to 16 do
16404: LD_ADDR_VAR 0 2
16408: PUSH
16409: DOUBLE
16410: LD_INT 1
16412: DEC
16413: ST_TO_ADDR
16414: LD_INT 16
16416: PUSH
16417: FOR_TO
16418: IFFALSE 16617
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16420: LD_ADDR_VAR 0 3
16424: PUSH
16425: LD_INT 10
16427: PUSH
16428: LD_INT 20
16430: PUSH
16431: LD_INT 30
16433: PUSH
16434: LD_INT 40
16436: PUSH
16437: LD_INT 50
16439: PUSH
16440: LD_INT 60
16442: PUSH
16443: LD_INT 70
16445: PUSH
16446: LD_INT 80
16448: PUSH
16449: LD_INT 90
16451: PUSH
16452: LD_INT 100
16454: PUSH
16455: LD_INT 110
16457: PUSH
16458: LD_INT 120
16460: PUSH
16461: LD_INT 130
16463: PUSH
16464: LD_INT 140
16466: PUSH
16467: LD_INT 150
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 1
16489: PPUSH
16490: LD_INT 15
16492: PPUSH
16493: CALL_OW 12
16497: ARRAY
16498: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16499: LD_ADDR_VAR 0 4
16503: PUSH
16504: LD_INT 10
16506: PUSH
16507: LD_INT 20
16509: PUSH
16510: LD_INT 30
16512: PUSH
16513: LD_INT 40
16515: PUSH
16516: LD_INT 50
16518: PUSH
16519: LD_INT 60
16521: PUSH
16522: LD_INT 70
16524: PUSH
16525: LD_INT 80
16527: PUSH
16528: LD_INT 90
16530: PUSH
16531: LD_INT 100
16533: PUSH
16534: LD_INT 110
16536: PUSH
16537: LD_INT 120
16539: PUSH
16540: LD_INT 130
16542: PUSH
16543: LD_INT 140
16545: PUSH
16546: LD_INT 150
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 1
16568: PPUSH
16569: LD_INT 15
16571: PPUSH
16572: CALL_OW 12
16576: ARRAY
16577: ST_TO_ADDR
// if ValidHex ( x , y ) then
16578: LD_VAR 0 3
16582: PPUSH
16583: LD_VAR 0 4
16587: PPUSH
16588: CALL_OW 488
16592: IFFALSE 16615
// begin result := [ x , y ] ;
16594: LD_ADDR_VAR 0 1
16598: PUSH
16599: LD_VAR 0 3
16603: PUSH
16604: LD_VAR 0 4
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: ST_TO_ADDR
// break ;
16613: GO 16617
// end ; end ;
16615: GO 16417
16617: POP
16618: POP
// if result then
16619: LD_VAR 0 1
16623: IFFALSE 16683
// begin ToLua ( playSibBomb() ) ;
16625: LD_STRING playSibBomb()
16627: PPUSH
16628: CALL_OW 559
// wait ( 0 0$14 ) ;
16632: LD_INT 490
16634: PPUSH
16635: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16639: LD_VAR 0 1
16643: PUSH
16644: LD_INT 1
16646: ARRAY
16647: PPUSH
16648: LD_VAR 0 1
16652: PUSH
16653: LD_INT 2
16655: ARRAY
16656: PPUSH
16657: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16661: LD_VAR 0 1
16665: PUSH
16666: LD_INT 1
16668: ARRAY
16669: PPUSH
16670: LD_VAR 0 1
16674: PUSH
16675: LD_INT 2
16677: ARRAY
16678: PPUSH
16679: CALL_OW 429
// end ; end ;
16683: LD_VAR 0 1
16687: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16688: LD_EXP 41
16692: PUSH
16693: LD_EXP 63
16697: AND
16698: IFFALSE 16710
16700: GO 16702
16702: DISABLE
// YouLost (  ) ;
16703: LD_STRING 
16705: PPUSH
16706: CALL_OW 104
16710: END
// every 0 0$1 trigger StreamModeActive and sFog do
16711: LD_EXP 41
16715: PUSH
16716: LD_EXP 62
16720: AND
16721: IFFALSE 16735
16723: GO 16725
16725: DISABLE
// FogOff ( your_side ) ;
16726: LD_OWVAR 2
16730: PPUSH
16731: CALL_OW 344
16735: END
// every 0 0$1 trigger StreamModeActive and sSun do
16736: LD_EXP 41
16740: PUSH
16741: LD_EXP 64
16745: AND
16746: IFFALSE 16774
16748: GO 16750
16750: DISABLE
// begin solar_recharge_percent := 0 ;
16751: LD_ADDR_OWVAR 79
16755: PUSH
16756: LD_INT 0
16758: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16759: LD_INT 10500
16761: PPUSH
16762: CALL_OW 67
// solar_recharge_percent := 100 ;
16766: LD_ADDR_OWVAR 79
16770: PUSH
16771: LD_INT 100
16773: ST_TO_ADDR
// end ;
16774: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16775: LD_EXP 41
16779: PUSH
16780: LD_EXP 65
16784: AND
16785: IFFALSE 17024
16787: GO 16789
16789: DISABLE
16790: LD_INT 0
16792: PPUSH
16793: PPUSH
16794: PPUSH
// begin tmp := [ ] ;
16795: LD_ADDR_VAR 0 3
16799: PUSH
16800: EMPTY
16801: ST_TO_ADDR
// for i := 1 to 6 do
16802: LD_ADDR_VAR 0 1
16806: PUSH
16807: DOUBLE
16808: LD_INT 1
16810: DEC
16811: ST_TO_ADDR
16812: LD_INT 6
16814: PUSH
16815: FOR_TO
16816: IFFALSE 16921
// begin uc_nation := nation_nature ;
16818: LD_ADDR_OWVAR 21
16822: PUSH
16823: LD_INT 0
16825: ST_TO_ADDR
// uc_side := 0 ;
16826: LD_ADDR_OWVAR 20
16830: PUSH
16831: LD_INT 0
16833: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16834: LD_ADDR_OWVAR 29
16838: PUSH
16839: LD_INT 12
16841: PUSH
16842: LD_INT 12
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: ST_TO_ADDR
// hc_agressivity := 20 ;
16849: LD_ADDR_OWVAR 35
16853: PUSH
16854: LD_INT 20
16856: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16857: LD_ADDR_OWVAR 28
16861: PUSH
16862: LD_INT 17
16864: ST_TO_ADDR
// hc_gallery :=  ;
16865: LD_ADDR_OWVAR 33
16869: PUSH
16870: LD_STRING 
16872: ST_TO_ADDR
// hc_name :=  ;
16873: LD_ADDR_OWVAR 26
16877: PUSH
16878: LD_STRING 
16880: ST_TO_ADDR
// un := CreateHuman ;
16881: LD_ADDR_VAR 0 2
16885: PUSH
16886: CALL_OW 44
16890: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16891: LD_VAR 0 2
16895: PPUSH
16896: LD_INT 1
16898: PPUSH
16899: CALL_OW 51
// tmp := tmp ^ un ;
16903: LD_ADDR_VAR 0 3
16907: PUSH
16908: LD_VAR 0 3
16912: PUSH
16913: LD_VAR 0 2
16917: ADD
16918: ST_TO_ADDR
// end ;
16919: GO 16815
16921: POP
16922: POP
// repeat wait ( 0 0$1 ) ;
16923: LD_INT 35
16925: PPUSH
16926: CALL_OW 67
// for un in tmp do
16930: LD_ADDR_VAR 0 2
16934: PUSH
16935: LD_VAR 0 3
16939: PUSH
16940: FOR_IN
16941: IFFALSE 17015
// begin if IsDead ( un ) then
16943: LD_VAR 0 2
16947: PPUSH
16948: CALL_OW 301
16952: IFFALSE 16972
// begin tmp := tmp diff un ;
16954: LD_ADDR_VAR 0 3
16958: PUSH
16959: LD_VAR 0 3
16963: PUSH
16964: LD_VAR 0 2
16968: DIFF
16969: ST_TO_ADDR
// continue ;
16970: GO 16940
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16972: LD_VAR 0 2
16976: PPUSH
16977: LD_INT 3
16979: PUSH
16980: LD_INT 22
16982: PUSH
16983: LD_INT 0
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PPUSH
16994: CALL_OW 69
16998: PPUSH
16999: LD_VAR 0 2
17003: PPUSH
17004: CALL_OW 74
17008: PPUSH
17009: CALL_OW 115
// end ;
17013: GO 16940
17015: POP
17016: POP
// until not tmp ;
17017: LD_VAR 0 3
17021: NOT
17022: IFFALSE 16923
// end ;
17024: PPOPN 3
17026: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17027: LD_EXP 41
17031: PUSH
17032: LD_EXP 66
17036: AND
17037: IFFALSE 17091
17039: GO 17041
17041: DISABLE
// begin ToLua ( displayTroll(); ) ;
17042: LD_STRING displayTroll();
17044: PPUSH
17045: CALL_OW 559
// wait ( 3 3$00 ) ;
17049: LD_INT 6300
17051: PPUSH
17052: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17056: LD_STRING hideTroll();
17058: PPUSH
17059: CALL_OW 559
// wait ( 1 1$00 ) ;
17063: LD_INT 2100
17065: PPUSH
17066: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17070: LD_STRING displayTroll();
17072: PPUSH
17073: CALL_OW 559
// wait ( 1 1$00 ) ;
17077: LD_INT 2100
17079: PPUSH
17080: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17084: LD_STRING hideTroll();
17086: PPUSH
17087: CALL_OW 559
// end ;
17091: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17092: LD_EXP 41
17096: PUSH
17097: LD_EXP 67
17101: AND
17102: IFFALSE 17165
17104: GO 17106
17106: DISABLE
17107: LD_INT 0
17109: PPUSH
// begin p := 0 ;
17110: LD_ADDR_VAR 0 1
17114: PUSH
17115: LD_INT 0
17117: ST_TO_ADDR
// repeat game_speed := 1 ;
17118: LD_ADDR_OWVAR 65
17122: PUSH
17123: LD_INT 1
17125: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17126: LD_INT 35
17128: PPUSH
17129: CALL_OW 67
// p := p + 1 ;
17133: LD_ADDR_VAR 0 1
17137: PUSH
17138: LD_VAR 0 1
17142: PUSH
17143: LD_INT 1
17145: PLUS
17146: ST_TO_ADDR
// until p >= 60 ;
17147: LD_VAR 0 1
17151: PUSH
17152: LD_INT 60
17154: GREATEREQUAL
17155: IFFALSE 17118
// game_speed := 4 ;
17157: LD_ADDR_OWVAR 65
17161: PUSH
17162: LD_INT 4
17164: ST_TO_ADDR
// end ;
17165: PPOPN 1
17167: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17168: LD_EXP 41
17172: PUSH
17173: LD_EXP 68
17177: AND
17178: IFFALSE 17324
17180: GO 17182
17182: DISABLE
17183: LD_INT 0
17185: PPUSH
17186: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17187: LD_ADDR_VAR 0 1
17191: PUSH
17192: LD_INT 22
17194: PUSH
17195: LD_OWVAR 2
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 2
17206: PUSH
17207: LD_INT 30
17209: PUSH
17210: LD_INT 0
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 30
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: LIST
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 69
17240: ST_TO_ADDR
// if not depot then
17241: LD_VAR 0 1
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 17324
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_VAR 0 1
17259: PUSH
17260: LD_INT 1
17262: PPUSH
17263: LD_VAR 0 1
17267: PPUSH
17268: CALL_OW 12
17272: ARRAY
17273: PPUSH
17274: CALL_OW 274
17278: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17279: LD_VAR 0 2
17283: PPUSH
17284: LD_INT 1
17286: PPUSH
17287: LD_INT 0
17289: PPUSH
17290: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17294: LD_VAR 0 2
17298: PPUSH
17299: LD_INT 2
17301: PPUSH
17302: LD_INT 0
17304: PPUSH
17305: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17309: LD_VAR 0 2
17313: PPUSH
17314: LD_INT 3
17316: PPUSH
17317: LD_INT 0
17319: PPUSH
17320: CALL_OW 277
// end ;
17324: PPOPN 2
17326: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17327: LD_EXP 41
17331: PUSH
17332: LD_EXP 69
17336: AND
17337: IFFALSE 17434
17339: GO 17341
17341: DISABLE
17342: LD_INT 0
17344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17345: LD_ADDR_VAR 0 1
17349: PUSH
17350: LD_INT 22
17352: PUSH
17353: LD_OWVAR 2
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 21
17364: PUSH
17365: LD_INT 1
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 3
17374: PUSH
17375: LD_INT 23
17377: PUSH
17378: LD_INT 0
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: LIST
17393: PPUSH
17394: CALL_OW 69
17398: ST_TO_ADDR
// if not tmp then
17399: LD_VAR 0 1
17403: NOT
17404: IFFALSE 17408
// exit ;
17406: GO 17434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17408: LD_VAR 0 1
17412: PUSH
17413: LD_INT 1
17415: PPUSH
17416: LD_VAR 0 1
17420: PPUSH
17421: CALL_OW 12
17425: ARRAY
17426: PPUSH
17427: LD_INT 200
17429: PPUSH
17430: CALL_OW 234
// end ;
17434: PPOPN 1
17436: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17437: LD_EXP 41
17441: PUSH
17442: LD_EXP 70
17446: AND
17447: IFFALSE 17526
17449: GO 17451
17451: DISABLE
17452: LD_INT 0
17454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17455: LD_ADDR_VAR 0 1
17459: PUSH
17460: LD_INT 22
17462: PUSH
17463: LD_OWVAR 2
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 21
17474: PUSH
17475: LD_INT 2
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PPUSH
17486: CALL_OW 69
17490: ST_TO_ADDR
// if not tmp then
17491: LD_VAR 0 1
17495: NOT
17496: IFFALSE 17500
// exit ;
17498: GO 17526
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17500: LD_VAR 0 1
17504: PUSH
17505: LD_INT 1
17507: PPUSH
17508: LD_VAR 0 1
17512: PPUSH
17513: CALL_OW 12
17517: ARRAY
17518: PPUSH
17519: LD_INT 60
17521: PPUSH
17522: CALL_OW 234
// end ;
17526: PPOPN 1
17528: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17529: LD_EXP 41
17533: PUSH
17534: LD_EXP 71
17538: AND
17539: IFFALSE 17638
17541: GO 17543
17543: DISABLE
17544: LD_INT 0
17546: PPUSH
17547: PPUSH
// begin enable ;
17548: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17549: LD_ADDR_VAR 0 1
17553: PUSH
17554: LD_INT 22
17556: PUSH
17557: LD_OWVAR 2
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 61
17568: PUSH
17569: EMPTY
17570: LIST
17571: PUSH
17572: LD_INT 33
17574: PUSH
17575: LD_INT 2
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: PPUSH
17587: CALL_OW 69
17591: ST_TO_ADDR
// if not tmp then
17592: LD_VAR 0 1
17596: NOT
17597: IFFALSE 17601
// exit ;
17599: GO 17638
// for i in tmp do
17601: LD_ADDR_VAR 0 2
17605: PUSH
17606: LD_VAR 0 1
17610: PUSH
17611: FOR_IN
17612: IFFALSE 17636
// if IsControledBy ( i ) then
17614: LD_VAR 0 2
17618: PPUSH
17619: CALL_OW 312
17623: IFFALSE 17634
// ComUnlink ( i ) ;
17625: LD_VAR 0 2
17629: PPUSH
17630: CALL_OW 136
17634: GO 17611
17636: POP
17637: POP
// end ;
17638: PPOPN 2
17640: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17641: LD_EXP 41
17645: PUSH
17646: LD_EXP 72
17650: AND
17651: IFFALSE 17791
17653: GO 17655
17655: DISABLE
17656: LD_INT 0
17658: PPUSH
17659: PPUSH
// begin ToLua ( displayPowell(); ) ;
17660: LD_STRING displayPowell();
17662: PPUSH
17663: CALL_OW 559
// uc_side := 0 ;
17667: LD_ADDR_OWVAR 20
17671: PUSH
17672: LD_INT 0
17674: ST_TO_ADDR
// uc_nation := 2 ;
17675: LD_ADDR_OWVAR 21
17679: PUSH
17680: LD_INT 2
17682: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17683: LD_ADDR_OWVAR 37
17687: PUSH
17688: LD_INT 14
17690: ST_TO_ADDR
// vc_engine := engine_siberite ;
17691: LD_ADDR_OWVAR 39
17695: PUSH
17696: LD_INT 3
17698: ST_TO_ADDR
// vc_control := control_apeman ;
17699: LD_ADDR_OWVAR 38
17703: PUSH
17704: LD_INT 5
17706: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17707: LD_ADDR_OWVAR 40
17711: PUSH
17712: LD_INT 29
17714: ST_TO_ADDR
// un := CreateVehicle ;
17715: LD_ADDR_VAR 0 2
17719: PUSH
17720: CALL_OW 45
17724: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17725: LD_VAR 0 2
17729: PPUSH
17730: LD_INT 1
17732: PPUSH
17733: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17737: LD_INT 35
17739: PPUSH
17740: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17744: LD_VAR 0 2
17748: PPUSH
17749: LD_INT 22
17751: PUSH
17752: LD_OWVAR 2
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PPUSH
17761: CALL_OW 69
17765: PPUSH
17766: LD_VAR 0 2
17770: PPUSH
17771: CALL_OW 74
17775: PPUSH
17776: CALL_OW 115
// until IsDead ( un ) ;
17780: LD_VAR 0 2
17784: PPUSH
17785: CALL_OW 301
17789: IFFALSE 17737
// end ;
17791: PPOPN 2
17793: END
// every 0 0$1 trigger StreamModeActive and sStu do
17794: LD_EXP 41
17798: PUSH
17799: LD_EXP 80
17803: AND
17804: IFFALSE 17820
17806: GO 17808
17808: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17809: LD_STRING displayStucuk();
17811: PPUSH
17812: CALL_OW 559
// ResetFog ;
17816: CALL_OW 335
// end ;
17820: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17821: LD_EXP 41
17825: PUSH
17826: LD_EXP 73
17830: AND
17831: IFFALSE 17972
17833: GO 17835
17835: DISABLE
17836: LD_INT 0
17838: PPUSH
17839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17840: LD_ADDR_VAR 0 2
17844: PUSH
17845: LD_INT 22
17847: PUSH
17848: LD_OWVAR 2
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 21
17859: PUSH
17860: LD_INT 1
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PPUSH
17871: CALL_OW 69
17875: ST_TO_ADDR
// if not tmp then
17876: LD_VAR 0 2
17880: NOT
17881: IFFALSE 17885
// exit ;
17883: GO 17972
// un := tmp [ rand ( 1 , tmp ) ] ;
17885: LD_ADDR_VAR 0 1
17889: PUSH
17890: LD_VAR 0 2
17894: PUSH
17895: LD_INT 1
17897: PPUSH
17898: LD_VAR 0 2
17902: PPUSH
17903: CALL_OW 12
17907: ARRAY
17908: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17909: LD_VAR 0 1
17913: PPUSH
17914: LD_INT 0
17916: PPUSH
17917: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17921: LD_VAR 0 1
17925: PPUSH
17926: LD_OWVAR 3
17930: PUSH
17931: LD_VAR 0 1
17935: DIFF
17936: PPUSH
17937: LD_VAR 0 1
17941: PPUSH
17942: CALL_OW 74
17946: PPUSH
17947: CALL_OW 115
// wait ( 0 0$20 ) ;
17951: LD_INT 700
17953: PPUSH
17954: CALL_OW 67
// SetSide ( un , your_side ) ;
17958: LD_VAR 0 1
17962: PPUSH
17963: LD_OWVAR 2
17967: PPUSH
17968: CALL_OW 235
// end ;
17972: PPOPN 2
17974: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17975: LD_EXP 41
17979: PUSH
17980: LD_EXP 74
17984: AND
17985: IFFALSE 18091
17987: GO 17989
17989: DISABLE
17990: LD_INT 0
17992: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17993: LD_ADDR_VAR 0 1
17997: PUSH
17998: LD_INT 22
18000: PUSH
18001: LD_OWVAR 2
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 2
18012: PUSH
18013: LD_INT 30
18015: PUSH
18016: LD_INT 0
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 30
18025: PUSH
18026: LD_INT 1
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: LIST
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PPUSH
18042: CALL_OW 69
18046: ST_TO_ADDR
// if not depot then
18047: LD_VAR 0 1
18051: NOT
18052: IFFALSE 18056
// exit ;
18054: GO 18091
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18056: LD_VAR 0 1
18060: PUSH
18061: LD_INT 1
18063: ARRAY
18064: PPUSH
18065: CALL_OW 250
18069: PPUSH
18070: LD_VAR 0 1
18074: PUSH
18075: LD_INT 1
18077: ARRAY
18078: PPUSH
18079: CALL_OW 251
18083: PPUSH
18084: LD_INT 70
18086: PPUSH
18087: CALL_OW 495
// end ;
18091: PPOPN 1
18093: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18094: LD_EXP 41
18098: PUSH
18099: LD_EXP 75
18103: AND
18104: IFFALSE 18315
18106: GO 18108
18108: DISABLE
18109: LD_INT 0
18111: PPUSH
18112: PPUSH
18113: PPUSH
18114: PPUSH
18115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18116: LD_ADDR_VAR 0 5
18120: PUSH
18121: LD_INT 22
18123: PUSH
18124: LD_OWVAR 2
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 21
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PPUSH
18147: CALL_OW 69
18151: ST_TO_ADDR
// if not tmp then
18152: LD_VAR 0 5
18156: NOT
18157: IFFALSE 18161
// exit ;
18159: GO 18315
// for i in tmp do
18161: LD_ADDR_VAR 0 1
18165: PUSH
18166: LD_VAR 0 5
18170: PUSH
18171: FOR_IN
18172: IFFALSE 18313
// begin d := rand ( 0 , 5 ) ;
18174: LD_ADDR_VAR 0 4
18178: PUSH
18179: LD_INT 0
18181: PPUSH
18182: LD_INT 5
18184: PPUSH
18185: CALL_OW 12
18189: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18190: LD_ADDR_VAR 0 2
18194: PUSH
18195: LD_VAR 0 1
18199: PPUSH
18200: CALL_OW 250
18204: PPUSH
18205: LD_VAR 0 4
18209: PPUSH
18210: LD_INT 3
18212: PPUSH
18213: LD_INT 12
18215: PPUSH
18216: CALL_OW 12
18220: PPUSH
18221: CALL_OW 272
18225: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18226: LD_ADDR_VAR 0 3
18230: PUSH
18231: LD_VAR 0 1
18235: PPUSH
18236: CALL_OW 251
18240: PPUSH
18241: LD_VAR 0 4
18245: PPUSH
18246: LD_INT 3
18248: PPUSH
18249: LD_INT 12
18251: PPUSH
18252: CALL_OW 12
18256: PPUSH
18257: CALL_OW 273
18261: ST_TO_ADDR
// if ValidHex ( x , y ) then
18262: LD_VAR 0 2
18266: PPUSH
18267: LD_VAR 0 3
18271: PPUSH
18272: CALL_OW 488
18276: IFFALSE 18311
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18278: LD_VAR 0 1
18282: PPUSH
18283: LD_VAR 0 2
18287: PPUSH
18288: LD_VAR 0 3
18292: PPUSH
18293: LD_INT 3
18295: PPUSH
18296: LD_INT 6
18298: PPUSH
18299: CALL_OW 12
18303: PPUSH
18304: LD_INT 1
18306: PPUSH
18307: CALL_OW 483
// end ;
18311: GO 18171
18313: POP
18314: POP
// end ;
18315: PPOPN 5
18317: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18318: LD_EXP 41
18322: PUSH
18323: LD_EXP 76
18327: AND
18328: IFFALSE 18422
18330: GO 18332
18332: DISABLE
18333: LD_INT 0
18335: PPUSH
18336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18337: LD_ADDR_VAR 0 2
18341: PUSH
18342: LD_INT 22
18344: PUSH
18345: LD_OWVAR 2
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 32
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 21
18366: PUSH
18367: LD_INT 2
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: PPUSH
18379: CALL_OW 69
18383: ST_TO_ADDR
// if not tmp then
18384: LD_VAR 0 2
18388: NOT
18389: IFFALSE 18393
// exit ;
18391: GO 18422
// for i in tmp do
18393: LD_ADDR_VAR 0 1
18397: PUSH
18398: LD_VAR 0 2
18402: PUSH
18403: FOR_IN
18404: IFFALSE 18420
// SetFuel ( i , 0 ) ;
18406: LD_VAR 0 1
18410: PPUSH
18411: LD_INT 0
18413: PPUSH
18414: CALL_OW 240
18418: GO 18403
18420: POP
18421: POP
// end ;
18422: PPOPN 2
18424: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18425: LD_EXP 41
18429: PUSH
18430: LD_EXP 77
18434: AND
18435: IFFALSE 18501
18437: GO 18439
18439: DISABLE
18440: LD_INT 0
18442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18443: LD_ADDR_VAR 0 1
18447: PUSH
18448: LD_INT 22
18450: PUSH
18451: LD_OWVAR 2
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 30
18462: PUSH
18463: LD_INT 29
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PPUSH
18474: CALL_OW 69
18478: ST_TO_ADDR
// if not tmp then
18479: LD_VAR 0 1
18483: NOT
18484: IFFALSE 18488
// exit ;
18486: GO 18501
// DestroyUnit ( tmp [ 1 ] ) ;
18488: LD_VAR 0 1
18492: PUSH
18493: LD_INT 1
18495: ARRAY
18496: PPUSH
18497: CALL_OW 65
// end ;
18501: PPOPN 1
18503: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18504: LD_EXP 41
18508: PUSH
18509: LD_EXP 79
18513: AND
18514: IFFALSE 18643
18516: GO 18518
18518: DISABLE
18519: LD_INT 0
18521: PPUSH
// begin uc_side := 0 ;
18522: LD_ADDR_OWVAR 20
18526: PUSH
18527: LD_INT 0
18529: ST_TO_ADDR
// uc_nation := nation_arabian ;
18530: LD_ADDR_OWVAR 21
18534: PUSH
18535: LD_INT 2
18537: ST_TO_ADDR
// hc_gallery :=  ;
18538: LD_ADDR_OWVAR 33
18542: PUSH
18543: LD_STRING 
18545: ST_TO_ADDR
// hc_name :=  ;
18546: LD_ADDR_OWVAR 26
18550: PUSH
18551: LD_STRING 
18553: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18554: LD_INT 1
18556: PPUSH
18557: LD_INT 11
18559: PPUSH
18560: LD_INT 10
18562: PPUSH
18563: CALL_OW 380
// un := CreateHuman ;
18567: LD_ADDR_VAR 0 1
18571: PUSH
18572: CALL_OW 44
18576: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18577: LD_VAR 0 1
18581: PPUSH
18582: LD_INT 1
18584: PPUSH
18585: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18589: LD_INT 35
18591: PPUSH
18592: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18596: LD_VAR 0 1
18600: PPUSH
18601: LD_INT 22
18603: PUSH
18604: LD_OWVAR 2
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PPUSH
18613: CALL_OW 69
18617: PPUSH
18618: LD_VAR 0 1
18622: PPUSH
18623: CALL_OW 74
18627: PPUSH
18628: CALL_OW 115
// until IsDead ( un ) ;
18632: LD_VAR 0 1
18636: PPUSH
18637: CALL_OW 301
18641: IFFALSE 18589
// end ;
18643: PPOPN 1
18645: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18646: LD_EXP 41
18650: PUSH
18651: LD_EXP 81
18655: AND
18656: IFFALSE 18668
18658: GO 18660
18660: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18661: LD_STRING earthquake(getX(game), 0, 32)
18663: PPUSH
18664: CALL_OW 559
18668: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18669: LD_EXP 41
18673: PUSH
18674: LD_EXP 82
18678: AND
18679: IFFALSE 18770
18681: GO 18683
18683: DISABLE
18684: LD_INT 0
18686: PPUSH
// begin enable ;
18687: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18688: LD_ADDR_VAR 0 1
18692: PUSH
18693: LD_INT 22
18695: PUSH
18696: LD_OWVAR 2
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 21
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 33
18717: PUSH
18718: LD_INT 3
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: LIST
18729: PPUSH
18730: CALL_OW 69
18734: ST_TO_ADDR
// if not tmp then
18735: LD_VAR 0 1
18739: NOT
18740: IFFALSE 18744
// exit ;
18742: GO 18770
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18744: LD_VAR 0 1
18748: PUSH
18749: LD_INT 1
18751: PPUSH
18752: LD_VAR 0 1
18756: PPUSH
18757: CALL_OW 12
18761: ARRAY
18762: PPUSH
18763: LD_INT 1
18765: PPUSH
18766: CALL_OW 234
// end ;
18770: PPOPN 1
18772: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18773: LD_EXP 41
18777: PUSH
18778: LD_EXP 83
18782: AND
18783: IFFALSE 18924
18785: GO 18787
18787: DISABLE
18788: LD_INT 0
18790: PPUSH
18791: PPUSH
18792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18793: LD_ADDR_VAR 0 3
18797: PUSH
18798: LD_INT 22
18800: PUSH
18801: LD_OWVAR 2
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 25
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PPUSH
18824: CALL_OW 69
18828: ST_TO_ADDR
// if not tmp then
18829: LD_VAR 0 3
18833: NOT
18834: IFFALSE 18838
// exit ;
18836: GO 18924
// un := tmp [ rand ( 1 , tmp ) ] ;
18838: LD_ADDR_VAR 0 2
18842: PUSH
18843: LD_VAR 0 3
18847: PUSH
18848: LD_INT 1
18850: PPUSH
18851: LD_VAR 0 3
18855: PPUSH
18856: CALL_OW 12
18860: ARRAY
18861: ST_TO_ADDR
// if Crawls ( un ) then
18862: LD_VAR 0 2
18866: PPUSH
18867: CALL_OW 318
18871: IFFALSE 18882
// ComWalk ( un ) ;
18873: LD_VAR 0 2
18877: PPUSH
18878: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18882: LD_VAR 0 2
18886: PPUSH
18887: LD_INT 9
18889: PPUSH
18890: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18894: LD_INT 28
18896: PPUSH
18897: LD_OWVAR 2
18901: PPUSH
18902: LD_INT 2
18904: PPUSH
18905: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18909: LD_INT 29
18911: PPUSH
18912: LD_OWVAR 2
18916: PPUSH
18917: LD_INT 2
18919: PPUSH
18920: CALL_OW 322
// end ;
18924: PPOPN 3
18926: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18927: LD_EXP 41
18931: PUSH
18932: LD_EXP 84
18936: AND
18937: IFFALSE 19048
18939: GO 18941
18941: DISABLE
18942: LD_INT 0
18944: PPUSH
18945: PPUSH
18946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18947: LD_ADDR_VAR 0 3
18951: PUSH
18952: LD_INT 22
18954: PUSH
18955: LD_OWVAR 2
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 25
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PPUSH
18978: CALL_OW 69
18982: ST_TO_ADDR
// if not tmp then
18983: LD_VAR 0 3
18987: NOT
18988: IFFALSE 18992
// exit ;
18990: GO 19048
// un := tmp [ rand ( 1 , tmp ) ] ;
18992: LD_ADDR_VAR 0 2
18996: PUSH
18997: LD_VAR 0 3
19001: PUSH
19002: LD_INT 1
19004: PPUSH
19005: LD_VAR 0 3
19009: PPUSH
19010: CALL_OW 12
19014: ARRAY
19015: ST_TO_ADDR
// if Crawls ( un ) then
19016: LD_VAR 0 2
19020: PPUSH
19021: CALL_OW 318
19025: IFFALSE 19036
// ComWalk ( un ) ;
19027: LD_VAR 0 2
19031: PPUSH
19032: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19036: LD_VAR 0 2
19040: PPUSH
19041: LD_INT 8
19043: PPUSH
19044: CALL_OW 336
// end ;
19048: PPOPN 3
19050: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19051: LD_EXP 41
19055: PUSH
19056: LD_EXP 85
19060: AND
19061: IFFALSE 19205
19063: GO 19065
19065: DISABLE
19066: LD_INT 0
19068: PPUSH
19069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19070: LD_ADDR_VAR 0 2
19074: PUSH
19075: LD_INT 22
19077: PUSH
19078: LD_OWVAR 2
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 21
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 2
19099: PUSH
19100: LD_INT 34
19102: PUSH
19103: LD_INT 12
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 34
19112: PUSH
19113: LD_INT 51
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 34
19122: PUSH
19123: LD_INT 32
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: LIST
19140: PPUSH
19141: CALL_OW 69
19145: ST_TO_ADDR
// if not tmp then
19146: LD_VAR 0 2
19150: NOT
19151: IFFALSE 19155
// exit ;
19153: GO 19205
// for i in tmp do
19155: LD_ADDR_VAR 0 1
19159: PUSH
19160: LD_VAR 0 2
19164: PUSH
19165: FOR_IN
19166: IFFALSE 19203
// if GetCargo ( i , mat_artifact ) = 0 then
19168: LD_VAR 0 1
19172: PPUSH
19173: LD_INT 4
19175: PPUSH
19176: CALL_OW 289
19180: PUSH
19181: LD_INT 0
19183: EQUAL
19184: IFFALSE 19201
// SetCargo ( i , mat_siberit , 100 ) ;
19186: LD_VAR 0 1
19190: PPUSH
19191: LD_INT 3
19193: PPUSH
19194: LD_INT 100
19196: PPUSH
19197: CALL_OW 290
19201: GO 19165
19203: POP
19204: POP
// end ;
19205: PPOPN 2
19207: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19208: LD_EXP 41
19212: PUSH
19213: LD_EXP 86
19217: AND
19218: IFFALSE 19401
19220: GO 19222
19222: DISABLE
19223: LD_INT 0
19225: PPUSH
19226: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19227: LD_ADDR_VAR 0 2
19231: PUSH
19232: LD_INT 22
19234: PUSH
19235: LD_OWVAR 2
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PPUSH
19244: CALL_OW 69
19248: ST_TO_ADDR
// if not tmp then
19249: LD_VAR 0 2
19253: NOT
19254: IFFALSE 19258
// exit ;
19256: GO 19401
// for i := 1 to 2 do
19258: LD_ADDR_VAR 0 1
19262: PUSH
19263: DOUBLE
19264: LD_INT 1
19266: DEC
19267: ST_TO_ADDR
19268: LD_INT 2
19270: PUSH
19271: FOR_TO
19272: IFFALSE 19399
// begin uc_side := your_side ;
19274: LD_ADDR_OWVAR 20
19278: PUSH
19279: LD_OWVAR 2
19283: ST_TO_ADDR
// uc_nation := nation_american ;
19284: LD_ADDR_OWVAR 21
19288: PUSH
19289: LD_INT 1
19291: ST_TO_ADDR
// vc_chassis := us_morphling ;
19292: LD_ADDR_OWVAR 37
19296: PUSH
19297: LD_INT 5
19299: ST_TO_ADDR
// vc_engine := engine_siberite ;
19300: LD_ADDR_OWVAR 39
19304: PUSH
19305: LD_INT 3
19307: ST_TO_ADDR
// vc_control := control_computer ;
19308: LD_ADDR_OWVAR 38
19312: PUSH
19313: LD_INT 3
19315: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19316: LD_ADDR_OWVAR 40
19320: PUSH
19321: LD_INT 10
19323: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19324: LD_VAR 0 2
19328: PUSH
19329: LD_INT 1
19331: ARRAY
19332: PPUSH
19333: CALL_OW 310
19337: NOT
19338: IFFALSE 19385
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19340: CALL_OW 45
19344: PPUSH
19345: LD_VAR 0 2
19349: PUSH
19350: LD_INT 1
19352: ARRAY
19353: PPUSH
19354: CALL_OW 250
19358: PPUSH
19359: LD_VAR 0 2
19363: PUSH
19364: LD_INT 1
19366: ARRAY
19367: PPUSH
19368: CALL_OW 251
19372: PPUSH
19373: LD_INT 12
19375: PPUSH
19376: LD_INT 1
19378: PPUSH
19379: CALL_OW 50
19383: GO 19397
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19385: CALL_OW 45
19389: PPUSH
19390: LD_INT 1
19392: PPUSH
19393: CALL_OW 51
// end ;
19397: GO 19271
19399: POP
19400: POP
// end ;
19401: PPOPN 2
19403: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19404: LD_EXP 41
19408: PUSH
19409: LD_EXP 87
19413: AND
19414: IFFALSE 19636
19416: GO 19418
19418: DISABLE
19419: LD_INT 0
19421: PPUSH
19422: PPUSH
19423: PPUSH
19424: PPUSH
19425: PPUSH
19426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19427: LD_ADDR_VAR 0 6
19431: PUSH
19432: LD_INT 22
19434: PUSH
19435: LD_OWVAR 2
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 21
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 3
19456: PUSH
19457: LD_INT 23
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: LIST
19475: PPUSH
19476: CALL_OW 69
19480: ST_TO_ADDR
// if not tmp then
19481: LD_VAR 0 6
19485: NOT
19486: IFFALSE 19490
// exit ;
19488: GO 19636
// s1 := rand ( 1 , 4 ) ;
19490: LD_ADDR_VAR 0 2
19494: PUSH
19495: LD_INT 1
19497: PPUSH
19498: LD_INT 4
19500: PPUSH
19501: CALL_OW 12
19505: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19506: LD_ADDR_VAR 0 4
19510: PUSH
19511: LD_VAR 0 6
19515: PUSH
19516: LD_INT 1
19518: ARRAY
19519: PPUSH
19520: LD_VAR 0 2
19524: PPUSH
19525: CALL_OW 259
19529: ST_TO_ADDR
// if s1 = 1 then
19530: LD_VAR 0 2
19534: PUSH
19535: LD_INT 1
19537: EQUAL
19538: IFFALSE 19558
// s2 := rand ( 2 , 4 ) else
19540: LD_ADDR_VAR 0 3
19544: PUSH
19545: LD_INT 2
19547: PPUSH
19548: LD_INT 4
19550: PPUSH
19551: CALL_OW 12
19555: ST_TO_ADDR
19556: GO 19566
// s2 := 1 ;
19558: LD_ADDR_VAR 0 3
19562: PUSH
19563: LD_INT 1
19565: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19566: LD_ADDR_VAR 0 5
19570: PUSH
19571: LD_VAR 0 6
19575: PUSH
19576: LD_INT 1
19578: ARRAY
19579: PPUSH
19580: LD_VAR 0 3
19584: PPUSH
19585: CALL_OW 259
19589: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19590: LD_VAR 0 6
19594: PUSH
19595: LD_INT 1
19597: ARRAY
19598: PPUSH
19599: LD_VAR 0 2
19603: PPUSH
19604: LD_VAR 0 5
19608: PPUSH
19609: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19613: LD_VAR 0 6
19617: PUSH
19618: LD_INT 1
19620: ARRAY
19621: PPUSH
19622: LD_VAR 0 3
19626: PPUSH
19627: LD_VAR 0 4
19631: PPUSH
19632: CALL_OW 237
// end ;
19636: PPOPN 6
19638: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19639: LD_EXP 41
19643: PUSH
19644: LD_EXP 88
19648: AND
19649: IFFALSE 19728
19651: GO 19653
19653: DISABLE
19654: LD_INT 0
19656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19657: LD_ADDR_VAR 0 1
19661: PUSH
19662: LD_INT 22
19664: PUSH
19665: LD_OWVAR 2
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 30
19676: PUSH
19677: LD_INT 3
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PPUSH
19688: CALL_OW 69
19692: ST_TO_ADDR
// if not tmp then
19693: LD_VAR 0 1
19697: NOT
19698: IFFALSE 19702
// exit ;
19700: GO 19728
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19702: LD_VAR 0 1
19706: PUSH
19707: LD_INT 1
19709: PPUSH
19710: LD_VAR 0 1
19714: PPUSH
19715: CALL_OW 12
19719: ARRAY
19720: PPUSH
19721: LD_INT 1
19723: PPUSH
19724: CALL_OW 234
// end ;
19728: PPOPN 1
19730: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19731: LD_EXP 41
19735: PUSH
19736: LD_EXP 89
19740: AND
19741: IFFALSE 19853
19743: GO 19745
19745: DISABLE
19746: LD_INT 0
19748: PPUSH
19749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19750: LD_ADDR_VAR 0 2
19754: PUSH
19755: LD_INT 22
19757: PUSH
19758: LD_OWVAR 2
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 2
19769: PUSH
19770: LD_INT 30
19772: PUSH
19773: LD_INT 27
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 30
19782: PUSH
19783: LD_INT 26
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 30
19792: PUSH
19793: LD_INT 28
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PPUSH
19810: CALL_OW 69
19814: ST_TO_ADDR
// if not tmp then
19815: LD_VAR 0 2
19819: NOT
19820: IFFALSE 19824
// exit ;
19822: GO 19853
// for i in tmp do
19824: LD_ADDR_VAR 0 1
19828: PUSH
19829: LD_VAR 0 2
19833: PUSH
19834: FOR_IN
19835: IFFALSE 19851
// SetLives ( i , 1 ) ;
19837: LD_VAR 0 1
19841: PPUSH
19842: LD_INT 1
19844: PPUSH
19845: CALL_OW 234
19849: GO 19834
19851: POP
19852: POP
// end ;
19853: PPOPN 2
19855: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19856: LD_EXP 41
19860: PUSH
19861: LD_EXP 90
19865: AND
19866: IFFALSE 20140
19868: GO 19870
19870: DISABLE
19871: LD_INT 0
19873: PPUSH
19874: PPUSH
19875: PPUSH
// begin i := rand ( 1 , 7 ) ;
19876: LD_ADDR_VAR 0 1
19880: PUSH
19881: LD_INT 1
19883: PPUSH
19884: LD_INT 7
19886: PPUSH
19887: CALL_OW 12
19891: ST_TO_ADDR
// case i of 1 :
19892: LD_VAR 0 1
19896: PUSH
19897: LD_INT 1
19899: DOUBLE
19900: EQUAL
19901: IFTRUE 19905
19903: GO 19915
19905: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19906: LD_STRING earthquake(getX(game), 0, 32)
19908: PPUSH
19909: CALL_OW 559
19913: GO 20140
19915: LD_INT 2
19917: DOUBLE
19918: EQUAL
19919: IFTRUE 19923
19921: GO 19937
19923: POP
// begin ToLua ( displayStucuk(); ) ;
19924: LD_STRING displayStucuk();
19926: PPUSH
19927: CALL_OW 559
// ResetFog ;
19931: CALL_OW 335
// end ; 3 :
19935: GO 20140
19937: LD_INT 3
19939: DOUBLE
19940: EQUAL
19941: IFTRUE 19945
19943: GO 20049
19945: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19946: LD_ADDR_VAR 0 2
19950: PUSH
19951: LD_INT 22
19953: PUSH
19954: LD_OWVAR 2
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 25
19965: PUSH
19966: LD_INT 1
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PPUSH
19977: CALL_OW 69
19981: ST_TO_ADDR
// if not tmp then
19982: LD_VAR 0 2
19986: NOT
19987: IFFALSE 19991
// exit ;
19989: GO 20140
// un := tmp [ rand ( 1 , tmp ) ] ;
19991: LD_ADDR_VAR 0 3
19995: PUSH
19996: LD_VAR 0 2
20000: PUSH
20001: LD_INT 1
20003: PPUSH
20004: LD_VAR 0 2
20008: PPUSH
20009: CALL_OW 12
20013: ARRAY
20014: ST_TO_ADDR
// if Crawls ( un ) then
20015: LD_VAR 0 3
20019: PPUSH
20020: CALL_OW 318
20024: IFFALSE 20035
// ComWalk ( un ) ;
20026: LD_VAR 0 3
20030: PPUSH
20031: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20035: LD_VAR 0 3
20039: PPUSH
20040: LD_INT 8
20042: PPUSH
20043: CALL_OW 336
// end ; 4 :
20047: GO 20140
20049: LD_INT 4
20051: DOUBLE
20052: EQUAL
20053: IFTRUE 20057
20055: GO 20118
20057: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20058: LD_ADDR_VAR 0 2
20062: PUSH
20063: LD_INT 22
20065: PUSH
20066: LD_OWVAR 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 30
20077: PUSH
20078: LD_INT 29
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PPUSH
20089: CALL_OW 69
20093: ST_TO_ADDR
// if not tmp then
20094: LD_VAR 0 2
20098: NOT
20099: IFFALSE 20103
// exit ;
20101: GO 20140
// DestroyUnit ( tmp [ 1 ] ) ;
20103: LD_VAR 0 2
20107: PUSH
20108: LD_INT 1
20110: ARRAY
20111: PPUSH
20112: CALL_OW 65
// end ; 5 .. 7 :
20116: GO 20140
20118: LD_INT 5
20120: DOUBLE
20121: GREATEREQUAL
20122: IFFALSE 20130
20124: LD_INT 7
20126: DOUBLE
20127: LESSEQUAL
20128: IFTRUE 20132
20130: GO 20139
20132: POP
// StreamSibBomb ; end ;
20133: CALL 16390 0 0
20137: GO 20140
20139: POP
// end ;
20140: PPOPN 3
20142: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20143: LD_EXP 41
20147: PUSH
20148: LD_EXP 91
20152: AND
20153: IFFALSE 20309
20155: GO 20157
20157: DISABLE
20158: LD_INT 0
20160: PPUSH
20161: PPUSH
20162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20163: LD_ADDR_VAR 0 2
20167: PUSH
20168: LD_INT 81
20170: PUSH
20171: LD_OWVAR 2
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: LD_INT 21
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 21
20195: PUSH
20196: LD_INT 2
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: LIST
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PPUSH
20212: CALL_OW 69
20216: ST_TO_ADDR
// if not tmp then
20217: LD_VAR 0 2
20221: NOT
20222: IFFALSE 20226
// exit ;
20224: GO 20309
// p := 0 ;
20226: LD_ADDR_VAR 0 3
20230: PUSH
20231: LD_INT 0
20233: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20234: LD_INT 35
20236: PPUSH
20237: CALL_OW 67
// p := p + 1 ;
20241: LD_ADDR_VAR 0 3
20245: PUSH
20246: LD_VAR 0 3
20250: PUSH
20251: LD_INT 1
20253: PLUS
20254: ST_TO_ADDR
// for i in tmp do
20255: LD_ADDR_VAR 0 1
20259: PUSH
20260: LD_VAR 0 2
20264: PUSH
20265: FOR_IN
20266: IFFALSE 20297
// if GetLives ( i ) < 1000 then
20268: LD_VAR 0 1
20272: PPUSH
20273: CALL_OW 256
20277: PUSH
20278: LD_INT 1000
20280: LESS
20281: IFFALSE 20295
// SetLives ( i , 1000 ) ;
20283: LD_VAR 0 1
20287: PPUSH
20288: LD_INT 1000
20290: PPUSH
20291: CALL_OW 234
20295: GO 20265
20297: POP
20298: POP
// until p > 20 ;
20299: LD_VAR 0 3
20303: PUSH
20304: LD_INT 20
20306: GREATER
20307: IFFALSE 20234
// end ;
20309: PPOPN 3
20311: END
// every 0 0$1 trigger StreamModeActive and sTime do
20312: LD_EXP 41
20316: PUSH
20317: LD_EXP 92
20321: AND
20322: IFFALSE 20357
20324: GO 20326
20326: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20327: LD_INT 28
20329: PPUSH
20330: LD_OWVAR 2
20334: PPUSH
20335: LD_INT 2
20337: PPUSH
20338: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20342: LD_INT 30
20344: PPUSH
20345: LD_OWVAR 2
20349: PPUSH
20350: LD_INT 2
20352: PPUSH
20353: CALL_OW 322
// end ;
20357: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20358: LD_EXP 41
20362: PUSH
20363: LD_EXP 93
20367: AND
20368: IFFALSE 20489
20370: GO 20372
20372: DISABLE
20373: LD_INT 0
20375: PPUSH
20376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20377: LD_ADDR_VAR 0 2
20381: PUSH
20382: LD_INT 22
20384: PUSH
20385: LD_OWVAR 2
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 21
20396: PUSH
20397: LD_INT 1
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 3
20406: PUSH
20407: LD_INT 23
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: PPUSH
20426: CALL_OW 69
20430: ST_TO_ADDR
// if not tmp then
20431: LD_VAR 0 2
20435: NOT
20436: IFFALSE 20440
// exit ;
20438: GO 20489
// for i in tmp do
20440: LD_ADDR_VAR 0 1
20444: PUSH
20445: LD_VAR 0 2
20449: PUSH
20450: FOR_IN
20451: IFFALSE 20487
// begin if Crawls ( i ) then
20453: LD_VAR 0 1
20457: PPUSH
20458: CALL_OW 318
20462: IFFALSE 20473
// ComWalk ( i ) ;
20464: LD_VAR 0 1
20468: PPUSH
20469: CALL_OW 138
// SetClass ( i , 2 ) ;
20473: LD_VAR 0 1
20477: PPUSH
20478: LD_INT 2
20480: PPUSH
20481: CALL_OW 336
// end ;
20485: GO 20450
20487: POP
20488: POP
// end ;
20489: PPOPN 2
20491: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20492: LD_EXP 41
20496: PUSH
20497: LD_EXP 94
20501: AND
20502: IFFALSE 20783
20504: GO 20506
20506: DISABLE
20507: LD_INT 0
20509: PPUSH
20510: PPUSH
20511: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20512: LD_OWVAR 2
20516: PPUSH
20517: LD_INT 9
20519: PPUSH
20520: LD_INT 1
20522: PPUSH
20523: LD_INT 1
20525: PPUSH
20526: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20530: LD_INT 9
20532: PPUSH
20533: LD_OWVAR 2
20537: PPUSH
20538: CALL_OW 343
// uc_side := 9 ;
20542: LD_ADDR_OWVAR 20
20546: PUSH
20547: LD_INT 9
20549: ST_TO_ADDR
// uc_nation := 2 ;
20550: LD_ADDR_OWVAR 21
20554: PUSH
20555: LD_INT 2
20557: ST_TO_ADDR
// hc_name := Dark Warrior ;
20558: LD_ADDR_OWVAR 26
20562: PUSH
20563: LD_STRING Dark Warrior
20565: ST_TO_ADDR
// hc_gallery :=  ;
20566: LD_ADDR_OWVAR 33
20570: PUSH
20571: LD_STRING 
20573: ST_TO_ADDR
// hc_noskilllimit := true ;
20574: LD_ADDR_OWVAR 76
20578: PUSH
20579: LD_INT 1
20581: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20582: LD_ADDR_OWVAR 31
20586: PUSH
20587: LD_INT 30
20589: PUSH
20590: LD_INT 30
20592: PUSH
20593: LD_INT 30
20595: PUSH
20596: LD_INT 30
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: ST_TO_ADDR
// un := CreateHuman ;
20605: LD_ADDR_VAR 0 3
20609: PUSH
20610: CALL_OW 44
20614: ST_TO_ADDR
// hc_noskilllimit := false ;
20615: LD_ADDR_OWVAR 76
20619: PUSH
20620: LD_INT 0
20622: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20623: LD_VAR 0 3
20627: PPUSH
20628: LD_INT 1
20630: PPUSH
20631: CALL_OW 51
// p := 0 ;
20635: LD_ADDR_VAR 0 2
20639: PUSH
20640: LD_INT 0
20642: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20643: LD_INT 35
20645: PPUSH
20646: CALL_OW 67
// p := p + 1 ;
20650: LD_ADDR_VAR 0 2
20654: PUSH
20655: LD_VAR 0 2
20659: PUSH
20660: LD_INT 1
20662: PLUS
20663: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20664: LD_VAR 0 3
20668: PPUSH
20669: CALL_OW 256
20673: PUSH
20674: LD_INT 1000
20676: LESS
20677: IFFALSE 20691
// SetLives ( un , 1000 ) ;
20679: LD_VAR 0 3
20683: PPUSH
20684: LD_INT 1000
20686: PPUSH
20687: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20691: LD_VAR 0 3
20695: PPUSH
20696: LD_INT 81
20698: PUSH
20699: LD_OWVAR 2
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 91
20710: PUSH
20711: LD_VAR 0 3
20715: PUSH
20716: LD_INT 30
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: LIST
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PPUSH
20728: CALL_OW 69
20732: PPUSH
20733: LD_VAR 0 3
20737: PPUSH
20738: CALL_OW 74
20742: PPUSH
20743: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20747: LD_VAR 0 2
20751: PUSH
20752: LD_INT 60
20754: GREATER
20755: PUSH
20756: LD_VAR 0 3
20760: PPUSH
20761: CALL_OW 301
20765: OR
20766: IFFALSE 20643
// if un then
20768: LD_VAR 0 3
20772: IFFALSE 20783
// RemoveUnit ( un ) ;
20774: LD_VAR 0 3
20778: PPUSH
20779: CALL_OW 64
// end ;
20783: PPOPN 3
20785: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20786: LD_INT 0
20788: PPUSH
// case cmd of 301 :
20789: LD_VAR 0 1
20793: PUSH
20794: LD_INT 301
20796: DOUBLE
20797: EQUAL
20798: IFTRUE 20802
20800: GO 20834
20802: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20803: LD_VAR 0 6
20807: PPUSH
20808: LD_VAR 0 7
20812: PPUSH
20813: LD_VAR 0 8
20817: PPUSH
20818: LD_VAR 0 4
20822: PPUSH
20823: LD_VAR 0 5
20827: PPUSH
20828: CALL 22035 0 5
20832: GO 20955
20834: LD_INT 302
20836: DOUBLE
20837: EQUAL
20838: IFTRUE 20842
20840: GO 20879
20842: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20843: LD_VAR 0 6
20847: PPUSH
20848: LD_VAR 0 7
20852: PPUSH
20853: LD_VAR 0 8
20857: PPUSH
20858: LD_VAR 0 9
20862: PPUSH
20863: LD_VAR 0 4
20867: PPUSH
20868: LD_VAR 0 5
20872: PPUSH
20873: CALL 22126 0 6
20877: GO 20955
20879: LD_INT 303
20881: DOUBLE
20882: EQUAL
20883: IFTRUE 20887
20885: GO 20924
20887: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20888: LD_VAR 0 6
20892: PPUSH
20893: LD_VAR 0 7
20897: PPUSH
20898: LD_VAR 0 8
20902: PPUSH
20903: LD_VAR 0 9
20907: PPUSH
20908: LD_VAR 0 4
20912: PPUSH
20913: LD_VAR 0 5
20917: PPUSH
20918: CALL 20960 0 6
20922: GO 20955
20924: LD_INT 304
20926: DOUBLE
20927: EQUAL
20928: IFTRUE 20932
20930: GO 20954
20932: POP
// hHackTeleport ( unit , x , y ) ; end ;
20933: LD_VAR 0 2
20937: PPUSH
20938: LD_VAR 0 4
20942: PPUSH
20943: LD_VAR 0 5
20947: PPUSH
20948: CALL 22719 0 3
20952: GO 20955
20954: POP
// end ;
20955: LD_VAR 0 12
20959: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20960: LD_INT 0
20962: PPUSH
20963: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20964: LD_VAR 0 1
20968: PUSH
20969: LD_INT 1
20971: LESS
20972: PUSH
20973: LD_VAR 0 1
20977: PUSH
20978: LD_INT 3
20980: GREATER
20981: OR
20982: PUSH
20983: LD_VAR 0 5
20987: PPUSH
20988: LD_VAR 0 6
20992: PPUSH
20993: CALL_OW 428
20997: OR
20998: IFFALSE 21002
// exit ;
21000: GO 21722
// uc_side := your_side ;
21002: LD_ADDR_OWVAR 20
21006: PUSH
21007: LD_OWVAR 2
21011: ST_TO_ADDR
// uc_nation := nation ;
21012: LD_ADDR_OWVAR 21
21016: PUSH
21017: LD_VAR 0 1
21021: ST_TO_ADDR
// bc_level = 1 ;
21022: LD_ADDR_OWVAR 43
21026: PUSH
21027: LD_INT 1
21029: ST_TO_ADDR
// case btype of 1 :
21030: LD_VAR 0 2
21034: PUSH
21035: LD_INT 1
21037: DOUBLE
21038: EQUAL
21039: IFTRUE 21043
21041: GO 21054
21043: POP
// bc_type := b_depot ; 2 :
21044: LD_ADDR_OWVAR 42
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
21052: GO 21666
21054: LD_INT 2
21056: DOUBLE
21057: EQUAL
21058: IFTRUE 21062
21060: GO 21073
21062: POP
// bc_type := b_warehouse ; 3 :
21063: LD_ADDR_OWVAR 42
21067: PUSH
21068: LD_INT 1
21070: ST_TO_ADDR
21071: GO 21666
21073: LD_INT 3
21075: DOUBLE
21076: EQUAL
21077: IFTRUE 21081
21079: GO 21092
21081: POP
// bc_type := b_lab ; 4 .. 9 :
21082: LD_ADDR_OWVAR 42
21086: PUSH
21087: LD_INT 6
21089: ST_TO_ADDR
21090: GO 21666
21092: LD_INT 4
21094: DOUBLE
21095: GREATEREQUAL
21096: IFFALSE 21104
21098: LD_INT 9
21100: DOUBLE
21101: LESSEQUAL
21102: IFTRUE 21106
21104: GO 21158
21106: POP
// begin bc_type := b_lab_half ;
21107: LD_ADDR_OWVAR 42
21111: PUSH
21112: LD_INT 7
21114: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21115: LD_ADDR_OWVAR 44
21119: PUSH
21120: LD_INT 10
21122: PUSH
21123: LD_INT 11
21125: PUSH
21126: LD_INT 12
21128: PUSH
21129: LD_INT 15
21131: PUSH
21132: LD_INT 14
21134: PUSH
21135: LD_INT 13
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: PUSH
21146: LD_VAR 0 2
21150: PUSH
21151: LD_INT 3
21153: MINUS
21154: ARRAY
21155: ST_TO_ADDR
// end ; 10 .. 13 :
21156: GO 21666
21158: LD_INT 10
21160: DOUBLE
21161: GREATEREQUAL
21162: IFFALSE 21170
21164: LD_INT 13
21166: DOUBLE
21167: LESSEQUAL
21168: IFTRUE 21172
21170: GO 21249
21172: POP
// begin bc_type := b_lab_full ;
21173: LD_ADDR_OWVAR 42
21177: PUSH
21178: LD_INT 8
21180: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21181: LD_ADDR_OWVAR 44
21185: PUSH
21186: LD_INT 10
21188: PUSH
21189: LD_INT 12
21191: PUSH
21192: LD_INT 14
21194: PUSH
21195: LD_INT 13
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: PUSH
21204: LD_VAR 0 2
21208: PUSH
21209: LD_INT 9
21211: MINUS
21212: ARRAY
21213: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21214: LD_ADDR_OWVAR 45
21218: PUSH
21219: LD_INT 11
21221: PUSH
21222: LD_INT 15
21224: PUSH
21225: LD_INT 12
21227: PUSH
21228: LD_INT 15
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: PUSH
21237: LD_VAR 0 2
21241: PUSH
21242: LD_INT 9
21244: MINUS
21245: ARRAY
21246: ST_TO_ADDR
// end ; 14 :
21247: GO 21666
21249: LD_INT 14
21251: DOUBLE
21252: EQUAL
21253: IFTRUE 21257
21255: GO 21268
21257: POP
// bc_type := b_workshop ; 15 :
21258: LD_ADDR_OWVAR 42
21262: PUSH
21263: LD_INT 2
21265: ST_TO_ADDR
21266: GO 21666
21268: LD_INT 15
21270: DOUBLE
21271: EQUAL
21272: IFTRUE 21276
21274: GO 21287
21276: POP
// bc_type := b_factory ; 16 :
21277: LD_ADDR_OWVAR 42
21281: PUSH
21282: LD_INT 3
21284: ST_TO_ADDR
21285: GO 21666
21287: LD_INT 16
21289: DOUBLE
21290: EQUAL
21291: IFTRUE 21295
21293: GO 21306
21295: POP
// bc_type := b_ext_gun ; 17 :
21296: LD_ADDR_OWVAR 42
21300: PUSH
21301: LD_INT 17
21303: ST_TO_ADDR
21304: GO 21666
21306: LD_INT 17
21308: DOUBLE
21309: EQUAL
21310: IFTRUE 21314
21312: GO 21342
21314: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21315: LD_ADDR_OWVAR 42
21319: PUSH
21320: LD_INT 19
21322: PUSH
21323: LD_INT 23
21325: PUSH
21326: LD_INT 19
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: PUSH
21334: LD_VAR 0 1
21338: ARRAY
21339: ST_TO_ADDR
21340: GO 21666
21342: LD_INT 18
21344: DOUBLE
21345: EQUAL
21346: IFTRUE 21350
21348: GO 21361
21350: POP
// bc_type := b_ext_radar ; 19 :
21351: LD_ADDR_OWVAR 42
21355: PUSH
21356: LD_INT 20
21358: ST_TO_ADDR
21359: GO 21666
21361: LD_INT 19
21363: DOUBLE
21364: EQUAL
21365: IFTRUE 21369
21367: GO 21380
21369: POP
// bc_type := b_ext_radio ; 20 :
21370: LD_ADDR_OWVAR 42
21374: PUSH
21375: LD_INT 22
21377: ST_TO_ADDR
21378: GO 21666
21380: LD_INT 20
21382: DOUBLE
21383: EQUAL
21384: IFTRUE 21388
21386: GO 21399
21388: POP
// bc_type := b_ext_siberium ; 21 :
21389: LD_ADDR_OWVAR 42
21393: PUSH
21394: LD_INT 21
21396: ST_TO_ADDR
21397: GO 21666
21399: LD_INT 21
21401: DOUBLE
21402: EQUAL
21403: IFTRUE 21407
21405: GO 21418
21407: POP
// bc_type := b_ext_computer ; 22 :
21408: LD_ADDR_OWVAR 42
21412: PUSH
21413: LD_INT 24
21415: ST_TO_ADDR
21416: GO 21666
21418: LD_INT 22
21420: DOUBLE
21421: EQUAL
21422: IFTRUE 21426
21424: GO 21437
21426: POP
// bc_type := b_ext_track ; 23 :
21427: LD_ADDR_OWVAR 42
21431: PUSH
21432: LD_INT 16
21434: ST_TO_ADDR
21435: GO 21666
21437: LD_INT 23
21439: DOUBLE
21440: EQUAL
21441: IFTRUE 21445
21443: GO 21456
21445: POP
// bc_type := b_ext_laser ; 24 :
21446: LD_ADDR_OWVAR 42
21450: PUSH
21451: LD_INT 25
21453: ST_TO_ADDR
21454: GO 21666
21456: LD_INT 24
21458: DOUBLE
21459: EQUAL
21460: IFTRUE 21464
21462: GO 21475
21464: POP
// bc_type := b_control_tower ; 25 :
21465: LD_ADDR_OWVAR 42
21469: PUSH
21470: LD_INT 36
21472: ST_TO_ADDR
21473: GO 21666
21475: LD_INT 25
21477: DOUBLE
21478: EQUAL
21479: IFTRUE 21483
21481: GO 21494
21483: POP
// bc_type := b_breastwork ; 26 :
21484: LD_ADDR_OWVAR 42
21488: PUSH
21489: LD_INT 31
21491: ST_TO_ADDR
21492: GO 21666
21494: LD_INT 26
21496: DOUBLE
21497: EQUAL
21498: IFTRUE 21502
21500: GO 21513
21502: POP
// bc_type := b_bunker ; 27 :
21503: LD_ADDR_OWVAR 42
21507: PUSH
21508: LD_INT 32
21510: ST_TO_ADDR
21511: GO 21666
21513: LD_INT 27
21515: DOUBLE
21516: EQUAL
21517: IFTRUE 21521
21519: GO 21532
21521: POP
// bc_type := b_turret ; 28 :
21522: LD_ADDR_OWVAR 42
21526: PUSH
21527: LD_INT 33
21529: ST_TO_ADDR
21530: GO 21666
21532: LD_INT 28
21534: DOUBLE
21535: EQUAL
21536: IFTRUE 21540
21538: GO 21551
21540: POP
// bc_type := b_armoury ; 29 :
21541: LD_ADDR_OWVAR 42
21545: PUSH
21546: LD_INT 4
21548: ST_TO_ADDR
21549: GO 21666
21551: LD_INT 29
21553: DOUBLE
21554: EQUAL
21555: IFTRUE 21559
21557: GO 21570
21559: POP
// bc_type := b_barracks ; 30 :
21560: LD_ADDR_OWVAR 42
21564: PUSH
21565: LD_INT 5
21567: ST_TO_ADDR
21568: GO 21666
21570: LD_INT 30
21572: DOUBLE
21573: EQUAL
21574: IFTRUE 21578
21576: GO 21589
21578: POP
// bc_type := b_solar_power ; 31 :
21579: LD_ADDR_OWVAR 42
21583: PUSH
21584: LD_INT 27
21586: ST_TO_ADDR
21587: GO 21666
21589: LD_INT 31
21591: DOUBLE
21592: EQUAL
21593: IFTRUE 21597
21595: GO 21608
21597: POP
// bc_type := b_oil_power ; 32 :
21598: LD_ADDR_OWVAR 42
21602: PUSH
21603: LD_INT 26
21605: ST_TO_ADDR
21606: GO 21666
21608: LD_INT 32
21610: DOUBLE
21611: EQUAL
21612: IFTRUE 21616
21614: GO 21627
21616: POP
// bc_type := b_siberite_power ; 33 :
21617: LD_ADDR_OWVAR 42
21621: PUSH
21622: LD_INT 28
21624: ST_TO_ADDR
21625: GO 21666
21627: LD_INT 33
21629: DOUBLE
21630: EQUAL
21631: IFTRUE 21635
21633: GO 21646
21635: POP
// bc_type := b_oil_mine ; 34 :
21636: LD_ADDR_OWVAR 42
21640: PUSH
21641: LD_INT 29
21643: ST_TO_ADDR
21644: GO 21666
21646: LD_INT 34
21648: DOUBLE
21649: EQUAL
21650: IFTRUE 21654
21652: GO 21665
21654: POP
// bc_type := b_siberite_mine ; end ;
21655: LD_ADDR_OWVAR 42
21659: PUSH
21660: LD_INT 30
21662: ST_TO_ADDR
21663: GO 21666
21665: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21666: LD_ADDR_VAR 0 8
21670: PUSH
21671: LD_VAR 0 5
21675: PPUSH
21676: LD_VAR 0 6
21680: PPUSH
21681: LD_VAR 0 3
21685: PPUSH
21686: CALL_OW 47
21690: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21691: LD_OWVAR 42
21695: PUSH
21696: LD_INT 32
21698: PUSH
21699: LD_INT 33
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: IN
21706: IFFALSE 21722
// PlaceWeaponTurret ( b , weapon ) ;
21708: LD_VAR 0 8
21712: PPUSH
21713: LD_VAR 0 4
21717: PPUSH
21718: CALL_OW 431
// end ;
21722: LD_VAR 0 7
21726: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21727: LD_INT 0
21729: PPUSH
21730: PPUSH
21731: PPUSH
21732: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21733: LD_ADDR_VAR 0 4
21737: PUSH
21738: LD_INT 22
21740: PUSH
21741: LD_OWVAR 2
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 2
21752: PUSH
21753: LD_INT 30
21755: PUSH
21756: LD_INT 0
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 30
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: LIST
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PPUSH
21782: CALL_OW 69
21786: ST_TO_ADDR
// if not tmp then
21787: LD_VAR 0 4
21791: NOT
21792: IFFALSE 21796
// exit ;
21794: GO 21855
// for i in tmp do
21796: LD_ADDR_VAR 0 2
21800: PUSH
21801: LD_VAR 0 4
21805: PUSH
21806: FOR_IN
21807: IFFALSE 21853
// for j = 1 to 3 do
21809: LD_ADDR_VAR 0 3
21813: PUSH
21814: DOUBLE
21815: LD_INT 1
21817: DEC
21818: ST_TO_ADDR
21819: LD_INT 3
21821: PUSH
21822: FOR_TO
21823: IFFALSE 21849
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21825: LD_VAR 0 2
21829: PPUSH
21830: CALL_OW 274
21834: PPUSH
21835: LD_VAR 0 3
21839: PPUSH
21840: LD_INT 99999
21842: PPUSH
21843: CALL_OW 277
21847: GO 21822
21849: POP
21850: POP
21851: GO 21806
21853: POP
21854: POP
// end ;
21855: LD_VAR 0 1
21859: RET
// export function hHackSetLevel10 ; var i , j ; begin
21860: LD_INT 0
21862: PPUSH
21863: PPUSH
21864: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21865: LD_ADDR_VAR 0 2
21869: PUSH
21870: LD_INT 21
21872: PUSH
21873: LD_INT 1
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PPUSH
21880: CALL_OW 69
21884: PUSH
21885: FOR_IN
21886: IFFALSE 21938
// if IsSelected ( i ) then
21888: LD_VAR 0 2
21892: PPUSH
21893: CALL_OW 306
21897: IFFALSE 21936
// begin for j := 1 to 4 do
21899: LD_ADDR_VAR 0 3
21903: PUSH
21904: DOUBLE
21905: LD_INT 1
21907: DEC
21908: ST_TO_ADDR
21909: LD_INT 4
21911: PUSH
21912: FOR_TO
21913: IFFALSE 21934
// SetSkill ( i , j , 10 ) ;
21915: LD_VAR 0 2
21919: PPUSH
21920: LD_VAR 0 3
21924: PPUSH
21925: LD_INT 10
21927: PPUSH
21928: CALL_OW 237
21932: GO 21912
21934: POP
21935: POP
// end ;
21936: GO 21885
21938: POP
21939: POP
// end ;
21940: LD_VAR 0 1
21944: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21945: LD_INT 0
21947: PPUSH
21948: PPUSH
21949: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21950: LD_ADDR_VAR 0 2
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_OWVAR 2
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 21
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PPUSH
21981: CALL_OW 69
21985: PUSH
21986: FOR_IN
21987: IFFALSE 22028
// begin for j := 1 to 4 do
21989: LD_ADDR_VAR 0 3
21993: PUSH
21994: DOUBLE
21995: LD_INT 1
21997: DEC
21998: ST_TO_ADDR
21999: LD_INT 4
22001: PUSH
22002: FOR_TO
22003: IFFALSE 22024
// SetSkill ( i , j , 10 ) ;
22005: LD_VAR 0 2
22009: PPUSH
22010: LD_VAR 0 3
22014: PPUSH
22015: LD_INT 10
22017: PPUSH
22018: CALL_OW 237
22022: GO 22002
22024: POP
22025: POP
// end ;
22026: GO 21986
22028: POP
22029: POP
// end ;
22030: LD_VAR 0 1
22034: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22035: LD_INT 0
22037: PPUSH
// uc_side := your_side ;
22038: LD_ADDR_OWVAR 20
22042: PUSH
22043: LD_OWVAR 2
22047: ST_TO_ADDR
// uc_nation := nation ;
22048: LD_ADDR_OWVAR 21
22052: PUSH
22053: LD_VAR 0 1
22057: ST_TO_ADDR
// InitHc ;
22058: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22062: LD_INT 0
22064: PPUSH
22065: LD_VAR 0 2
22069: PPUSH
22070: LD_VAR 0 3
22074: PPUSH
22075: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22079: LD_VAR 0 4
22083: PPUSH
22084: LD_VAR 0 5
22088: PPUSH
22089: CALL_OW 428
22093: PUSH
22094: LD_INT 0
22096: EQUAL
22097: IFFALSE 22121
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22099: CALL_OW 44
22103: PPUSH
22104: LD_VAR 0 4
22108: PPUSH
22109: LD_VAR 0 5
22113: PPUSH
22114: LD_INT 1
22116: PPUSH
22117: CALL_OW 48
// end ;
22121: LD_VAR 0 6
22125: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22126: LD_INT 0
22128: PPUSH
22129: PPUSH
// uc_side := your_side ;
22130: LD_ADDR_OWVAR 20
22134: PUSH
22135: LD_OWVAR 2
22139: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22140: LD_VAR 0 1
22144: PUSH
22145: LD_INT 1
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: LD_INT 3
22153: PUSH
22154: LD_INT 4
22156: PUSH
22157: LD_INT 5
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: IN
22167: IFFALSE 22179
// uc_nation := nation_american else
22169: LD_ADDR_OWVAR 21
22173: PUSH
22174: LD_INT 1
22176: ST_TO_ADDR
22177: GO 22222
// if chassis in [ 11 , 12 , 13 , 14 ] then
22179: LD_VAR 0 1
22183: PUSH
22184: LD_INT 11
22186: PUSH
22187: LD_INT 12
22189: PUSH
22190: LD_INT 13
22192: PUSH
22193: LD_INT 14
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: IN
22202: IFFALSE 22214
// uc_nation := nation_arabian else
22204: LD_ADDR_OWVAR 21
22208: PUSH
22209: LD_INT 2
22211: ST_TO_ADDR
22212: GO 22222
// uc_nation := nation_russian ;
22214: LD_ADDR_OWVAR 21
22218: PUSH
22219: LD_INT 3
22221: ST_TO_ADDR
// vc_chassis := chassis ;
22222: LD_ADDR_OWVAR 37
22226: PUSH
22227: LD_VAR 0 1
22231: ST_TO_ADDR
// vc_engine := engine ;
22232: LD_ADDR_OWVAR 39
22236: PUSH
22237: LD_VAR 0 2
22241: ST_TO_ADDR
// vc_control := control ;
22242: LD_ADDR_OWVAR 38
22246: PUSH
22247: LD_VAR 0 3
22251: ST_TO_ADDR
// vc_weapon := weapon ;
22252: LD_ADDR_OWVAR 40
22256: PUSH
22257: LD_VAR 0 4
22261: ST_TO_ADDR
// un := CreateVehicle ;
22262: LD_ADDR_VAR 0 8
22266: PUSH
22267: CALL_OW 45
22271: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22272: LD_VAR 0 8
22276: PPUSH
22277: LD_INT 0
22279: PPUSH
22280: LD_INT 5
22282: PPUSH
22283: CALL_OW 12
22287: PPUSH
22288: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22292: LD_VAR 0 8
22296: PPUSH
22297: LD_VAR 0 5
22301: PPUSH
22302: LD_VAR 0 6
22306: PPUSH
22307: LD_INT 1
22309: PPUSH
22310: CALL_OW 48
// end ;
22314: LD_VAR 0 7
22318: RET
// export hInvincible ; every 1 do
22319: GO 22321
22321: DISABLE
// hInvincible := [ ] ;
22322: LD_ADDR_EXP 95
22326: PUSH
22327: EMPTY
22328: ST_TO_ADDR
22329: END
// every 10 do var i ;
22330: GO 22332
22332: DISABLE
22333: LD_INT 0
22335: PPUSH
// begin enable ;
22336: ENABLE
// if not hInvincible then
22337: LD_EXP 95
22341: NOT
22342: IFFALSE 22346
// exit ;
22344: GO 22390
// for i in hInvincible do
22346: LD_ADDR_VAR 0 1
22350: PUSH
22351: LD_EXP 95
22355: PUSH
22356: FOR_IN
22357: IFFALSE 22388
// if GetLives ( i ) < 1000 then
22359: LD_VAR 0 1
22363: PPUSH
22364: CALL_OW 256
22368: PUSH
22369: LD_INT 1000
22371: LESS
22372: IFFALSE 22386
// SetLives ( i , 1000 ) ;
22374: LD_VAR 0 1
22378: PPUSH
22379: LD_INT 1000
22381: PPUSH
22382: CALL_OW 234
22386: GO 22356
22388: POP
22389: POP
// end ;
22390: PPOPN 1
22392: END
// export function hHackInvincible ; var i ; begin
22393: LD_INT 0
22395: PPUSH
22396: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22397: LD_ADDR_VAR 0 2
22401: PUSH
22402: LD_INT 2
22404: PUSH
22405: LD_INT 21
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 21
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: LIST
22429: PPUSH
22430: CALL_OW 69
22434: PUSH
22435: FOR_IN
22436: IFFALSE 22497
// if IsSelected ( i ) then
22438: LD_VAR 0 2
22442: PPUSH
22443: CALL_OW 306
22447: IFFALSE 22495
// begin if i in hInvincible then
22449: LD_VAR 0 2
22453: PUSH
22454: LD_EXP 95
22458: IN
22459: IFFALSE 22479
// hInvincible := hInvincible diff i else
22461: LD_ADDR_EXP 95
22465: PUSH
22466: LD_EXP 95
22470: PUSH
22471: LD_VAR 0 2
22475: DIFF
22476: ST_TO_ADDR
22477: GO 22495
// hInvincible := hInvincible union i ;
22479: LD_ADDR_EXP 95
22483: PUSH
22484: LD_EXP 95
22488: PUSH
22489: LD_VAR 0 2
22493: UNION
22494: ST_TO_ADDR
// end ;
22495: GO 22435
22497: POP
22498: POP
// end ;
22499: LD_VAR 0 1
22503: RET
// export function hHackInvisible ; var i , j ; begin
22504: LD_INT 0
22506: PPUSH
22507: PPUSH
22508: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22509: LD_ADDR_VAR 0 2
22513: PUSH
22514: LD_INT 21
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PPUSH
22524: CALL_OW 69
22528: PUSH
22529: FOR_IN
22530: IFFALSE 22554
// if IsSelected ( i ) then
22532: LD_VAR 0 2
22536: PPUSH
22537: CALL_OW 306
22541: IFFALSE 22552
// ComForceInvisible ( i ) ;
22543: LD_VAR 0 2
22547: PPUSH
22548: CALL_OW 496
22552: GO 22529
22554: POP
22555: POP
// end ;
22556: LD_VAR 0 1
22560: RET
// export function hHackChangeYourSide ; begin
22561: LD_INT 0
22563: PPUSH
// if your_side = 8 then
22564: LD_OWVAR 2
22568: PUSH
22569: LD_INT 8
22571: EQUAL
22572: IFFALSE 22584
// your_side := 0 else
22574: LD_ADDR_OWVAR 2
22578: PUSH
22579: LD_INT 0
22581: ST_TO_ADDR
22582: GO 22598
// your_side := your_side + 1 ;
22584: LD_ADDR_OWVAR 2
22588: PUSH
22589: LD_OWVAR 2
22593: PUSH
22594: LD_INT 1
22596: PLUS
22597: ST_TO_ADDR
// end ;
22598: LD_VAR 0 1
22602: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22603: LD_INT 0
22605: PPUSH
22606: PPUSH
22607: PPUSH
// for i in all_units do
22608: LD_ADDR_VAR 0 2
22612: PUSH
22613: LD_OWVAR 3
22617: PUSH
22618: FOR_IN
22619: IFFALSE 22697
// if IsSelected ( i ) then
22621: LD_VAR 0 2
22625: PPUSH
22626: CALL_OW 306
22630: IFFALSE 22695
// begin j := GetSide ( i ) ;
22632: LD_ADDR_VAR 0 3
22636: PUSH
22637: LD_VAR 0 2
22641: PPUSH
22642: CALL_OW 255
22646: ST_TO_ADDR
// if j = 8 then
22647: LD_VAR 0 3
22651: PUSH
22652: LD_INT 8
22654: EQUAL
22655: IFFALSE 22667
// j := 0 else
22657: LD_ADDR_VAR 0 3
22661: PUSH
22662: LD_INT 0
22664: ST_TO_ADDR
22665: GO 22681
// j := j + 1 ;
22667: LD_ADDR_VAR 0 3
22671: PUSH
22672: LD_VAR 0 3
22676: PUSH
22677: LD_INT 1
22679: PLUS
22680: ST_TO_ADDR
// SetSide ( i , j ) ;
22681: LD_VAR 0 2
22685: PPUSH
22686: LD_VAR 0 3
22690: PPUSH
22691: CALL_OW 235
// end ;
22695: GO 22618
22697: POP
22698: POP
// end ;
22699: LD_VAR 0 1
22703: RET
// export function hHackFog ; begin
22704: LD_INT 0
22706: PPUSH
// FogOff ( true ) ;
22707: LD_INT 1
22709: PPUSH
22710: CALL_OW 344
// end ;
22714: LD_VAR 0 1
22718: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22719: LD_INT 0
22721: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22722: LD_VAR 0 1
22726: PPUSH
22727: LD_VAR 0 2
22731: PPUSH
22732: LD_VAR 0 3
22736: PPUSH
22737: LD_INT 1
22739: PPUSH
22740: LD_INT 1
22742: PPUSH
22743: CALL_OW 483
// CenterOnXY ( x , y ) ;
22747: LD_VAR 0 2
22751: PPUSH
22752: LD_VAR 0 3
22756: PPUSH
22757: CALL_OW 84
// end ; end_of_file
22761: LD_VAR 0 4
22765: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22766: LD_INT 0
22768: PPUSH
22769: PPUSH
22770: PPUSH
22771: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22772: LD_VAR 0 1
22776: PPUSH
22777: CALL_OW 264
22781: PUSH
22782: LD_EXP 29
22786: EQUAL
22787: IFFALSE 22859
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22789: LD_INT 68
22791: PPUSH
22792: LD_VAR 0 1
22796: PPUSH
22797: CALL_OW 255
22801: PPUSH
22802: CALL_OW 321
22806: PUSH
22807: LD_INT 2
22809: EQUAL
22810: IFFALSE 22822
// eff := 70 else
22812: LD_ADDR_VAR 0 4
22816: PUSH
22817: LD_INT 70
22819: ST_TO_ADDR
22820: GO 22830
// eff := 30 ;
22822: LD_ADDR_VAR 0 4
22826: PUSH
22827: LD_INT 30
22829: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22830: LD_VAR 0 1
22834: PPUSH
22835: CALL_OW 250
22839: PPUSH
22840: LD_VAR 0 1
22844: PPUSH
22845: CALL_OW 251
22849: PPUSH
22850: LD_VAR 0 4
22854: PPUSH
22855: CALL_OW 495
// end ; end ;
22859: LD_VAR 0 2
22863: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22864: LD_INT 0
22866: PPUSH
// end ;
22867: LD_VAR 0 4
22871: RET
// export function SOS_Command ( cmd ) ; begin
22872: LD_INT 0
22874: PPUSH
// end ;
22875: LD_VAR 0 2
22879: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22880: LD_INT 0
22882: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22883: LD_VAR 0 1
22887: PUSH
22888: LD_INT 250
22890: EQUAL
22891: PUSH
22892: LD_VAR 0 2
22896: PPUSH
22897: CALL_OW 264
22901: PUSH
22902: LD_EXP 32
22906: EQUAL
22907: AND
22908: IFFALSE 22929
// MinerPlaceMine ( unit , x , y ) ;
22910: LD_VAR 0 2
22914: PPUSH
22915: LD_VAR 0 4
22919: PPUSH
22920: LD_VAR 0 5
22924: PPUSH
22925: CALL 25270 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22929: LD_VAR 0 1
22933: PUSH
22934: LD_INT 251
22936: EQUAL
22937: PUSH
22938: LD_VAR 0 2
22942: PPUSH
22943: CALL_OW 264
22947: PUSH
22948: LD_EXP 32
22952: EQUAL
22953: AND
22954: IFFALSE 22975
// MinerDetonateMine ( unit , x , y ) ;
22956: LD_VAR 0 2
22960: PPUSH
22961: LD_VAR 0 4
22965: PPUSH
22966: LD_VAR 0 5
22970: PPUSH
22971: CALL 25547 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22975: LD_VAR 0 1
22979: PUSH
22980: LD_INT 252
22982: EQUAL
22983: PUSH
22984: LD_VAR 0 2
22988: PPUSH
22989: CALL_OW 264
22993: PUSH
22994: LD_EXP 32
22998: EQUAL
22999: AND
23000: IFFALSE 23021
// MinerCreateMinefield ( unit , x , y ) ;
23002: LD_VAR 0 2
23006: PPUSH
23007: LD_VAR 0 4
23011: PPUSH
23012: LD_VAR 0 5
23016: PPUSH
23017: CALL 25964 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23021: LD_VAR 0 1
23025: PUSH
23026: LD_INT 253
23028: EQUAL
23029: PUSH
23030: LD_VAR 0 2
23034: PPUSH
23035: CALL_OW 257
23039: PUSH
23040: LD_INT 5
23042: EQUAL
23043: AND
23044: IFFALSE 23065
// ComBinocular ( unit , x , y ) ;
23046: LD_VAR 0 2
23050: PPUSH
23051: LD_VAR 0 4
23055: PPUSH
23056: LD_VAR 0 5
23060: PPUSH
23061: CALL 26335 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23065: LD_VAR 0 1
23069: PUSH
23070: LD_INT 254
23072: EQUAL
23073: PUSH
23074: LD_VAR 0 2
23078: PPUSH
23079: CALL_OW 264
23083: PUSH
23084: LD_EXP 27
23088: EQUAL
23089: AND
23090: PUSH
23091: LD_VAR 0 3
23095: PPUSH
23096: CALL_OW 263
23100: PUSH
23101: LD_INT 3
23103: EQUAL
23104: AND
23105: IFFALSE 23121
// HackDestroyVehicle ( unit , selectedUnit ) ;
23107: LD_VAR 0 2
23111: PPUSH
23112: LD_VAR 0 3
23116: PPUSH
23117: CALL 24630 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23121: LD_VAR 0 1
23125: PUSH
23126: LD_INT 255
23128: EQUAL
23129: PUSH
23130: LD_VAR 0 2
23134: PPUSH
23135: CALL_OW 264
23139: PUSH
23140: LD_INT 14
23142: PUSH
23143: LD_INT 53
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: IN
23150: AND
23151: PUSH
23152: LD_VAR 0 4
23156: PPUSH
23157: LD_VAR 0 5
23161: PPUSH
23162: CALL_OW 488
23166: AND
23167: IFFALSE 23191
// CutTreeXYR ( unit , x , y , 12 ) ;
23169: LD_VAR 0 2
23173: PPUSH
23174: LD_VAR 0 4
23178: PPUSH
23179: LD_VAR 0 5
23183: PPUSH
23184: LD_INT 12
23186: PPUSH
23187: CALL 23196 0 4
// end ;
23191: LD_VAR 0 6
23195: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23196: LD_INT 0
23198: PPUSH
23199: PPUSH
23200: PPUSH
23201: PPUSH
23202: PPUSH
23203: PPUSH
23204: PPUSH
23205: PPUSH
23206: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23207: LD_VAR 0 1
23211: NOT
23212: PUSH
23213: LD_VAR 0 2
23217: PPUSH
23218: LD_VAR 0 3
23222: PPUSH
23223: CALL_OW 488
23227: NOT
23228: OR
23229: PUSH
23230: LD_VAR 0 4
23234: NOT
23235: OR
23236: IFFALSE 23240
// exit ;
23238: GO 23580
// list := [ ] ;
23240: LD_ADDR_VAR 0 13
23244: PUSH
23245: EMPTY
23246: ST_TO_ADDR
// if x - r < 0 then
23247: LD_VAR 0 2
23251: PUSH
23252: LD_VAR 0 4
23256: MINUS
23257: PUSH
23258: LD_INT 0
23260: LESS
23261: IFFALSE 23273
// min_x := 0 else
23263: LD_ADDR_VAR 0 7
23267: PUSH
23268: LD_INT 0
23270: ST_TO_ADDR
23271: GO 23289
// min_x := x - r ;
23273: LD_ADDR_VAR 0 7
23277: PUSH
23278: LD_VAR 0 2
23282: PUSH
23283: LD_VAR 0 4
23287: MINUS
23288: ST_TO_ADDR
// if y - r < 0 then
23289: LD_VAR 0 3
23293: PUSH
23294: LD_VAR 0 4
23298: MINUS
23299: PUSH
23300: LD_INT 0
23302: LESS
23303: IFFALSE 23315
// min_y := 0 else
23305: LD_ADDR_VAR 0 8
23309: PUSH
23310: LD_INT 0
23312: ST_TO_ADDR
23313: GO 23331
// min_y := y - r ;
23315: LD_ADDR_VAR 0 8
23319: PUSH
23320: LD_VAR 0 3
23324: PUSH
23325: LD_VAR 0 4
23329: MINUS
23330: ST_TO_ADDR
// max_x := x + r ;
23331: LD_ADDR_VAR 0 9
23335: PUSH
23336: LD_VAR 0 2
23340: PUSH
23341: LD_VAR 0 4
23345: PLUS
23346: ST_TO_ADDR
// max_y := y + r ;
23347: LD_ADDR_VAR 0 10
23351: PUSH
23352: LD_VAR 0 3
23356: PUSH
23357: LD_VAR 0 4
23361: PLUS
23362: ST_TO_ADDR
// for _x = min_x to max_x do
23363: LD_ADDR_VAR 0 11
23367: PUSH
23368: DOUBLE
23369: LD_VAR 0 7
23373: DEC
23374: ST_TO_ADDR
23375: LD_VAR 0 9
23379: PUSH
23380: FOR_TO
23381: IFFALSE 23498
// for _y = min_y to max_y do
23383: LD_ADDR_VAR 0 12
23387: PUSH
23388: DOUBLE
23389: LD_VAR 0 8
23393: DEC
23394: ST_TO_ADDR
23395: LD_VAR 0 10
23399: PUSH
23400: FOR_TO
23401: IFFALSE 23494
// begin if not ValidHex ( _x , _y ) then
23403: LD_VAR 0 11
23407: PPUSH
23408: LD_VAR 0 12
23412: PPUSH
23413: CALL_OW 488
23417: NOT
23418: IFFALSE 23422
// continue ;
23420: GO 23400
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23422: LD_VAR 0 11
23426: PPUSH
23427: LD_VAR 0 12
23431: PPUSH
23432: CALL_OW 351
23436: PUSH
23437: LD_VAR 0 11
23441: PPUSH
23442: LD_VAR 0 12
23446: PPUSH
23447: CALL_OW 554
23451: AND
23452: IFFALSE 23492
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23454: LD_ADDR_VAR 0 13
23458: PUSH
23459: LD_VAR 0 13
23463: PPUSH
23464: LD_VAR 0 13
23468: PUSH
23469: LD_INT 1
23471: PLUS
23472: PPUSH
23473: LD_VAR 0 11
23477: PUSH
23478: LD_VAR 0 12
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PPUSH
23487: CALL_OW 2
23491: ST_TO_ADDR
// end ;
23492: GO 23400
23494: POP
23495: POP
23496: GO 23380
23498: POP
23499: POP
// if not list then
23500: LD_VAR 0 13
23504: NOT
23505: IFFALSE 23509
// exit ;
23507: GO 23580
// for i in list do
23509: LD_ADDR_VAR 0 6
23513: PUSH
23514: LD_VAR 0 13
23518: PUSH
23519: FOR_IN
23520: IFFALSE 23578
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23522: LD_VAR 0 1
23526: PPUSH
23527: LD_STRING M
23529: PUSH
23530: LD_VAR 0 6
23534: PUSH
23535: LD_INT 1
23537: ARRAY
23538: PUSH
23539: LD_VAR 0 6
23543: PUSH
23544: LD_INT 2
23546: ARRAY
23547: PUSH
23548: LD_INT 0
23550: PUSH
23551: LD_INT 0
23553: PUSH
23554: LD_INT 0
23556: PUSH
23557: LD_INT 0
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: PUSH
23569: EMPTY
23570: LIST
23571: PPUSH
23572: CALL_OW 447
23576: GO 23519
23578: POP
23579: POP
// end ;
23580: LD_VAR 0 5
23584: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23585: LD_EXP 96
23589: NOT
23590: IFFALSE 23640
23592: GO 23594
23594: DISABLE
// begin initHack := true ;
23595: LD_ADDR_EXP 96
23599: PUSH
23600: LD_INT 1
23602: ST_TO_ADDR
// hackTanks := [ ] ;
23603: LD_ADDR_EXP 97
23607: PUSH
23608: EMPTY
23609: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23610: LD_ADDR_EXP 98
23614: PUSH
23615: EMPTY
23616: ST_TO_ADDR
// hackLimit := 3 ;
23617: LD_ADDR_EXP 99
23621: PUSH
23622: LD_INT 3
23624: ST_TO_ADDR
// hackDist := 12 ;
23625: LD_ADDR_EXP 100
23629: PUSH
23630: LD_INT 12
23632: ST_TO_ADDR
// hackCounter := [ ] ;
23633: LD_ADDR_EXP 101
23637: PUSH
23638: EMPTY
23639: ST_TO_ADDR
// end ;
23640: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23641: LD_EXP 96
23645: PUSH
23646: LD_INT 34
23648: PUSH
23649: LD_EXP 27
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PPUSH
23658: CALL_OW 69
23662: AND
23663: IFFALSE 23918
23665: GO 23667
23667: DISABLE
23668: LD_INT 0
23670: PPUSH
23671: PPUSH
// begin enable ;
23672: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23673: LD_ADDR_VAR 0 1
23677: PUSH
23678: LD_INT 34
23680: PUSH
23681: LD_EXP 27
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PPUSH
23690: CALL_OW 69
23694: PUSH
23695: FOR_IN
23696: IFFALSE 23916
// begin if not i in hackTanks then
23698: LD_VAR 0 1
23702: PUSH
23703: LD_EXP 97
23707: IN
23708: NOT
23709: IFFALSE 23792
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23711: LD_ADDR_EXP 97
23715: PUSH
23716: LD_EXP 97
23720: PPUSH
23721: LD_EXP 97
23725: PUSH
23726: LD_INT 1
23728: PLUS
23729: PPUSH
23730: LD_VAR 0 1
23734: PPUSH
23735: CALL_OW 1
23739: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23740: LD_ADDR_EXP 98
23744: PUSH
23745: LD_EXP 98
23749: PPUSH
23750: LD_EXP 98
23754: PUSH
23755: LD_INT 1
23757: PLUS
23758: PPUSH
23759: EMPTY
23760: PPUSH
23761: CALL_OW 1
23765: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23766: LD_ADDR_EXP 101
23770: PUSH
23771: LD_EXP 101
23775: PPUSH
23776: LD_EXP 101
23780: PUSH
23781: LD_INT 1
23783: PLUS
23784: PPUSH
23785: EMPTY
23786: PPUSH
23787: CALL_OW 1
23791: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23792: LD_VAR 0 1
23796: PPUSH
23797: CALL_OW 302
23801: NOT
23802: IFFALSE 23815
// begin HackUnlinkAll ( i ) ;
23804: LD_VAR 0 1
23808: PPUSH
23809: CALL 23921 0 1
// continue ;
23813: GO 23695
// end ; HackCheckCapturedStatus ( i ) ;
23815: LD_VAR 0 1
23819: PPUSH
23820: CALL 24364 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23824: LD_ADDR_VAR 0 2
23828: PUSH
23829: LD_INT 81
23831: PUSH
23832: LD_VAR 0 1
23836: PPUSH
23837: CALL_OW 255
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 33
23848: PUSH
23849: LD_INT 3
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 91
23858: PUSH
23859: LD_VAR 0 1
23863: PUSH
23864: LD_EXP 100
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 50
23876: PUSH
23877: EMPTY
23878: LIST
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PPUSH
23886: CALL_OW 69
23890: ST_TO_ADDR
// if not tmp then
23891: LD_VAR 0 2
23895: NOT
23896: IFFALSE 23900
// continue ;
23898: GO 23695
// HackLink ( i , tmp ) ;
23900: LD_VAR 0 1
23904: PPUSH
23905: LD_VAR 0 2
23909: PPUSH
23910: CALL 24057 0 2
// end ;
23914: GO 23695
23916: POP
23917: POP
// end ;
23918: PPOPN 2
23920: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23921: LD_INT 0
23923: PPUSH
23924: PPUSH
23925: PPUSH
// if not hack in hackTanks then
23926: LD_VAR 0 1
23930: PUSH
23931: LD_EXP 97
23935: IN
23936: NOT
23937: IFFALSE 23941
// exit ;
23939: GO 24052
// index := GetElementIndex ( hackTanks , hack ) ;
23941: LD_ADDR_VAR 0 4
23945: PUSH
23946: LD_EXP 97
23950: PPUSH
23951: LD_VAR 0 1
23955: PPUSH
23956: CALL 31486 0 2
23960: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23961: LD_EXP 98
23965: PUSH
23966: LD_VAR 0 4
23970: ARRAY
23971: IFFALSE 24052
// begin for i in hackTanksCaptured [ index ] do
23973: LD_ADDR_VAR 0 3
23977: PUSH
23978: LD_EXP 98
23982: PUSH
23983: LD_VAR 0 4
23987: ARRAY
23988: PUSH
23989: FOR_IN
23990: IFFALSE 24016
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23992: LD_VAR 0 3
23996: PUSH
23997: LD_INT 1
23999: ARRAY
24000: PPUSH
24001: LD_VAR 0 3
24005: PUSH
24006: LD_INT 2
24008: ARRAY
24009: PPUSH
24010: CALL_OW 235
24014: GO 23989
24016: POP
24017: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24018: LD_ADDR_EXP 98
24022: PUSH
24023: LD_EXP 98
24027: PPUSH
24028: LD_VAR 0 4
24032: PPUSH
24033: EMPTY
24034: PPUSH
24035: CALL_OW 1
24039: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24040: LD_VAR 0 1
24044: PPUSH
24045: LD_INT 0
24047: PPUSH
24048: CALL_OW 505
// end ; end ;
24052: LD_VAR 0 2
24056: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24057: LD_INT 0
24059: PPUSH
24060: PPUSH
24061: PPUSH
// if not hack in hackTanks or not vehicles then
24062: LD_VAR 0 1
24066: PUSH
24067: LD_EXP 97
24071: IN
24072: NOT
24073: PUSH
24074: LD_VAR 0 2
24078: NOT
24079: OR
24080: IFFALSE 24084
// exit ;
24082: GO 24359
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24084: LD_ADDR_VAR 0 2
24088: PUSH
24089: LD_VAR 0 1
24093: PPUSH
24094: LD_VAR 0 2
24098: PPUSH
24099: LD_INT 1
24101: PPUSH
24102: LD_INT 1
24104: PPUSH
24105: CALL 32136 0 4
24109: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24110: LD_ADDR_VAR 0 5
24114: PUSH
24115: LD_EXP 97
24119: PPUSH
24120: LD_VAR 0 1
24124: PPUSH
24125: CALL 31486 0 2
24129: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24130: LD_EXP 98
24134: PUSH
24135: LD_VAR 0 5
24139: ARRAY
24140: PUSH
24141: LD_EXP 99
24145: LESS
24146: IFFALSE 24335
// begin for i := 1 to vehicles do
24148: LD_ADDR_VAR 0 4
24152: PUSH
24153: DOUBLE
24154: LD_INT 1
24156: DEC
24157: ST_TO_ADDR
24158: LD_VAR 0 2
24162: PUSH
24163: FOR_TO
24164: IFFALSE 24333
// begin if hackTanksCaptured [ index ] = hackLimit then
24166: LD_EXP 98
24170: PUSH
24171: LD_VAR 0 5
24175: ARRAY
24176: PUSH
24177: LD_EXP 99
24181: EQUAL
24182: IFFALSE 24186
// break ;
24184: GO 24333
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24186: LD_ADDR_EXP 101
24190: PUSH
24191: LD_EXP 101
24195: PPUSH
24196: LD_VAR 0 5
24200: PPUSH
24201: LD_EXP 101
24205: PUSH
24206: LD_VAR 0 5
24210: ARRAY
24211: PUSH
24212: LD_INT 1
24214: PLUS
24215: PPUSH
24216: CALL_OW 1
24220: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24221: LD_ADDR_EXP 98
24225: PUSH
24226: LD_EXP 98
24230: PPUSH
24231: LD_VAR 0 5
24235: PUSH
24236: LD_EXP 98
24240: PUSH
24241: LD_VAR 0 5
24245: ARRAY
24246: PUSH
24247: LD_INT 1
24249: PLUS
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PPUSH
24255: LD_VAR 0 2
24259: PUSH
24260: LD_VAR 0 4
24264: ARRAY
24265: PUSH
24266: LD_VAR 0 2
24270: PUSH
24271: LD_VAR 0 4
24275: ARRAY
24276: PPUSH
24277: CALL_OW 255
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PPUSH
24286: CALL 31701 0 3
24290: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24291: LD_VAR 0 2
24295: PUSH
24296: LD_VAR 0 4
24300: ARRAY
24301: PPUSH
24302: LD_VAR 0 1
24306: PPUSH
24307: CALL_OW 255
24311: PPUSH
24312: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24316: LD_VAR 0 2
24320: PUSH
24321: LD_VAR 0 4
24325: ARRAY
24326: PPUSH
24327: CALL_OW 141
// end ;
24331: GO 24163
24333: POP
24334: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24335: LD_VAR 0 1
24339: PPUSH
24340: LD_EXP 98
24344: PUSH
24345: LD_VAR 0 5
24349: ARRAY
24350: PUSH
24351: LD_INT 0
24353: PLUS
24354: PPUSH
24355: CALL_OW 505
// end ;
24359: LD_VAR 0 3
24363: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24364: LD_INT 0
24366: PPUSH
24367: PPUSH
24368: PPUSH
24369: PPUSH
// if not hack in hackTanks then
24370: LD_VAR 0 1
24374: PUSH
24375: LD_EXP 97
24379: IN
24380: NOT
24381: IFFALSE 24385
// exit ;
24383: GO 24625
// index := GetElementIndex ( hackTanks , hack ) ;
24385: LD_ADDR_VAR 0 4
24389: PUSH
24390: LD_EXP 97
24394: PPUSH
24395: LD_VAR 0 1
24399: PPUSH
24400: CALL 31486 0 2
24404: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24405: LD_ADDR_VAR 0 3
24409: PUSH
24410: DOUBLE
24411: LD_EXP 98
24415: PUSH
24416: LD_VAR 0 4
24420: ARRAY
24421: INC
24422: ST_TO_ADDR
24423: LD_INT 1
24425: PUSH
24426: FOR_DOWNTO
24427: IFFALSE 24599
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24429: LD_ADDR_VAR 0 5
24433: PUSH
24434: LD_EXP 98
24438: PUSH
24439: LD_VAR 0 4
24443: ARRAY
24444: PUSH
24445: LD_VAR 0 3
24449: ARRAY
24450: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24451: LD_VAR 0 5
24455: PUSH
24456: LD_INT 1
24458: ARRAY
24459: PPUSH
24460: CALL_OW 302
24464: NOT
24465: PUSH
24466: LD_VAR 0 5
24470: PUSH
24471: LD_INT 1
24473: ARRAY
24474: PPUSH
24475: CALL_OW 255
24479: PUSH
24480: LD_VAR 0 1
24484: PPUSH
24485: CALL_OW 255
24489: NONEQUAL
24490: OR
24491: IFFALSE 24597
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24493: LD_VAR 0 5
24497: PUSH
24498: LD_INT 1
24500: ARRAY
24501: PPUSH
24502: CALL_OW 305
24506: PUSH
24507: LD_VAR 0 5
24511: PUSH
24512: LD_INT 1
24514: ARRAY
24515: PPUSH
24516: CALL_OW 255
24520: PUSH
24521: LD_VAR 0 1
24525: PPUSH
24526: CALL_OW 255
24530: EQUAL
24531: AND
24532: IFFALSE 24556
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24534: LD_VAR 0 5
24538: PUSH
24539: LD_INT 1
24541: ARRAY
24542: PPUSH
24543: LD_VAR 0 5
24547: PUSH
24548: LD_INT 2
24550: ARRAY
24551: PPUSH
24552: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24556: LD_ADDR_EXP 98
24560: PUSH
24561: LD_EXP 98
24565: PPUSH
24566: LD_VAR 0 4
24570: PPUSH
24571: LD_EXP 98
24575: PUSH
24576: LD_VAR 0 4
24580: ARRAY
24581: PPUSH
24582: LD_VAR 0 3
24586: PPUSH
24587: CALL_OW 3
24591: PPUSH
24592: CALL_OW 1
24596: ST_TO_ADDR
// end ; end ;
24597: GO 24426
24599: POP
24600: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24601: LD_VAR 0 1
24605: PPUSH
24606: LD_EXP 98
24610: PUSH
24611: LD_VAR 0 4
24615: ARRAY
24616: PUSH
24617: LD_INT 0
24619: PLUS
24620: PPUSH
24621: CALL_OW 505
// end ;
24625: LD_VAR 0 2
24629: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24630: LD_INT 0
24632: PPUSH
24633: PPUSH
24634: PPUSH
24635: PPUSH
// if not hack in hackTanks then
24636: LD_VAR 0 1
24640: PUSH
24641: LD_EXP 97
24645: IN
24646: NOT
24647: IFFALSE 24651
// exit ;
24649: GO 24736
// index := GetElementIndex ( hackTanks , hack ) ;
24651: LD_ADDR_VAR 0 5
24655: PUSH
24656: LD_EXP 97
24660: PPUSH
24661: LD_VAR 0 1
24665: PPUSH
24666: CALL 31486 0 2
24670: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24671: LD_ADDR_VAR 0 4
24675: PUSH
24676: DOUBLE
24677: LD_INT 1
24679: DEC
24680: ST_TO_ADDR
24681: LD_EXP 98
24685: PUSH
24686: LD_VAR 0 5
24690: ARRAY
24691: PUSH
24692: FOR_TO
24693: IFFALSE 24734
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24695: LD_EXP 98
24699: PUSH
24700: LD_VAR 0 5
24704: ARRAY
24705: PUSH
24706: LD_VAR 0 4
24710: ARRAY
24711: PUSH
24712: LD_INT 1
24714: ARRAY
24715: PUSH
24716: LD_VAR 0 2
24720: EQUAL
24721: IFFALSE 24732
// KillUnit ( vehicle ) ;
24723: LD_VAR 0 2
24727: PPUSH
24728: CALL_OW 66
24732: GO 24692
24734: POP
24735: POP
// end ;
24736: LD_VAR 0 3
24740: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24741: LD_EXP 102
24745: NOT
24746: IFFALSE 24781
24748: GO 24750
24750: DISABLE
// begin initMiner := true ;
24751: LD_ADDR_EXP 102
24755: PUSH
24756: LD_INT 1
24758: ST_TO_ADDR
// minersList := [ ] ;
24759: LD_ADDR_EXP 103
24763: PUSH
24764: EMPTY
24765: ST_TO_ADDR
// minerMinesList := [ ] ;
24766: LD_ADDR_EXP 104
24770: PUSH
24771: EMPTY
24772: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24773: LD_ADDR_EXP 105
24777: PUSH
24778: LD_INT 5
24780: ST_TO_ADDR
// end ;
24781: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24782: LD_EXP 102
24786: PUSH
24787: LD_INT 34
24789: PUSH
24790: LD_EXP 32
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PPUSH
24799: CALL_OW 69
24803: AND
24804: IFFALSE 25267
24806: GO 24808
24808: DISABLE
24809: LD_INT 0
24811: PPUSH
24812: PPUSH
24813: PPUSH
24814: PPUSH
// begin enable ;
24815: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24816: LD_ADDR_VAR 0 1
24820: PUSH
24821: LD_INT 34
24823: PUSH
24824: LD_EXP 32
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PPUSH
24833: CALL_OW 69
24837: PUSH
24838: FOR_IN
24839: IFFALSE 24911
// begin if not i in minersList then
24841: LD_VAR 0 1
24845: PUSH
24846: LD_EXP 103
24850: IN
24851: NOT
24852: IFFALSE 24909
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24854: LD_ADDR_EXP 103
24858: PUSH
24859: LD_EXP 103
24863: PPUSH
24864: LD_EXP 103
24868: PUSH
24869: LD_INT 1
24871: PLUS
24872: PPUSH
24873: LD_VAR 0 1
24877: PPUSH
24878: CALL_OW 1
24882: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24883: LD_ADDR_EXP 104
24887: PUSH
24888: LD_EXP 104
24892: PPUSH
24893: LD_EXP 104
24897: PUSH
24898: LD_INT 1
24900: PLUS
24901: PPUSH
24902: EMPTY
24903: PPUSH
24904: CALL_OW 1
24908: ST_TO_ADDR
// end end ;
24909: GO 24838
24911: POP
24912: POP
// for i := minerMinesList downto 1 do
24913: LD_ADDR_VAR 0 1
24917: PUSH
24918: DOUBLE
24919: LD_EXP 104
24923: INC
24924: ST_TO_ADDR
24925: LD_INT 1
24927: PUSH
24928: FOR_DOWNTO
24929: IFFALSE 25265
// begin if IsLive ( minersList [ i ] ) then
24931: LD_EXP 103
24935: PUSH
24936: LD_VAR 0 1
24940: ARRAY
24941: PPUSH
24942: CALL_OW 300
24946: IFFALSE 24974
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24948: LD_EXP 103
24952: PUSH
24953: LD_VAR 0 1
24957: ARRAY
24958: PPUSH
24959: LD_EXP 104
24963: PUSH
24964: LD_VAR 0 1
24968: ARRAY
24969: PPUSH
24970: CALL_OW 505
// if not minerMinesList [ i ] then
24974: LD_EXP 104
24978: PUSH
24979: LD_VAR 0 1
24983: ARRAY
24984: NOT
24985: IFFALSE 24989
// continue ;
24987: GO 24928
// for j := minerMinesList [ i ] downto 1 do
24989: LD_ADDR_VAR 0 2
24993: PUSH
24994: DOUBLE
24995: LD_EXP 104
24999: PUSH
25000: LD_VAR 0 1
25004: ARRAY
25005: INC
25006: ST_TO_ADDR
25007: LD_INT 1
25009: PUSH
25010: FOR_DOWNTO
25011: IFFALSE 25261
// begin side := GetSide ( minersList [ i ] ) ;
25013: LD_ADDR_VAR 0 3
25017: PUSH
25018: LD_EXP 103
25022: PUSH
25023: LD_VAR 0 1
25027: ARRAY
25028: PPUSH
25029: CALL_OW 255
25033: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25034: LD_ADDR_VAR 0 4
25038: PUSH
25039: LD_EXP 104
25043: PUSH
25044: LD_VAR 0 1
25048: ARRAY
25049: PUSH
25050: LD_VAR 0 2
25054: ARRAY
25055: PUSH
25056: LD_INT 1
25058: ARRAY
25059: PPUSH
25060: LD_EXP 104
25064: PUSH
25065: LD_VAR 0 1
25069: ARRAY
25070: PUSH
25071: LD_VAR 0 2
25075: ARRAY
25076: PUSH
25077: LD_INT 2
25079: ARRAY
25080: PPUSH
25081: CALL_OW 428
25085: ST_TO_ADDR
// if not tmp then
25086: LD_VAR 0 4
25090: NOT
25091: IFFALSE 25095
// continue ;
25093: GO 25010
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25095: LD_VAR 0 4
25099: PUSH
25100: LD_INT 81
25102: PUSH
25103: LD_VAR 0 3
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PPUSH
25112: CALL_OW 69
25116: IN
25117: PUSH
25118: LD_EXP 104
25122: PUSH
25123: LD_VAR 0 1
25127: ARRAY
25128: PUSH
25129: LD_VAR 0 2
25133: ARRAY
25134: PUSH
25135: LD_INT 1
25137: ARRAY
25138: PPUSH
25139: LD_EXP 104
25143: PUSH
25144: LD_VAR 0 1
25148: ARRAY
25149: PUSH
25150: LD_VAR 0 2
25154: ARRAY
25155: PUSH
25156: LD_INT 2
25158: ARRAY
25159: PPUSH
25160: CALL_OW 458
25164: AND
25165: IFFALSE 25259
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25167: LD_EXP 104
25171: PUSH
25172: LD_VAR 0 1
25176: ARRAY
25177: PUSH
25178: LD_VAR 0 2
25182: ARRAY
25183: PUSH
25184: LD_INT 1
25186: ARRAY
25187: PPUSH
25188: LD_EXP 104
25192: PUSH
25193: LD_VAR 0 1
25197: ARRAY
25198: PUSH
25199: LD_VAR 0 2
25203: ARRAY
25204: PUSH
25205: LD_INT 2
25207: ARRAY
25208: PPUSH
25209: LD_VAR 0 3
25213: PPUSH
25214: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25218: LD_ADDR_EXP 104
25222: PUSH
25223: LD_EXP 104
25227: PPUSH
25228: LD_VAR 0 1
25232: PPUSH
25233: LD_EXP 104
25237: PUSH
25238: LD_VAR 0 1
25242: ARRAY
25243: PPUSH
25244: LD_VAR 0 2
25248: PPUSH
25249: CALL_OW 3
25253: PPUSH
25254: CALL_OW 1
25258: ST_TO_ADDR
// end ; end ;
25259: GO 25010
25261: POP
25262: POP
// end ;
25263: GO 24928
25265: POP
25266: POP
// end ;
25267: PPOPN 4
25269: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25270: LD_INT 0
25272: PPUSH
25273: PPUSH
// result := false ;
25274: LD_ADDR_VAR 0 4
25278: PUSH
25279: LD_INT 0
25281: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25282: LD_VAR 0 1
25286: PPUSH
25287: CALL_OW 264
25291: PUSH
25292: LD_EXP 32
25296: EQUAL
25297: NOT
25298: IFFALSE 25302
// exit ;
25300: GO 25542
// index := GetElementIndex ( minersList , unit ) ;
25302: LD_ADDR_VAR 0 5
25306: PUSH
25307: LD_EXP 103
25311: PPUSH
25312: LD_VAR 0 1
25316: PPUSH
25317: CALL 31486 0 2
25321: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25322: LD_EXP 104
25326: PUSH
25327: LD_VAR 0 5
25331: ARRAY
25332: PUSH
25333: LD_EXP 105
25337: GREATEREQUAL
25338: IFFALSE 25342
// exit ;
25340: GO 25542
// ComMoveXY ( unit , x , y ) ;
25342: LD_VAR 0 1
25346: PPUSH
25347: LD_VAR 0 2
25351: PPUSH
25352: LD_VAR 0 3
25356: PPUSH
25357: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25361: LD_INT 35
25363: PPUSH
25364: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25368: LD_VAR 0 1
25372: PPUSH
25373: LD_VAR 0 2
25377: PPUSH
25378: LD_VAR 0 3
25382: PPUSH
25383: CALL 61550 0 3
25387: NOT
25388: PUSH
25389: LD_VAR 0 1
25393: PPUSH
25394: CALL_OW 314
25398: AND
25399: IFFALSE 25403
// exit ;
25401: GO 25542
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25403: LD_VAR 0 2
25407: PPUSH
25408: LD_VAR 0 3
25412: PPUSH
25413: CALL_OW 428
25417: PUSH
25418: LD_VAR 0 1
25422: EQUAL
25423: PUSH
25424: LD_VAR 0 1
25428: PPUSH
25429: CALL_OW 314
25433: NOT
25434: AND
25435: IFFALSE 25361
// PlaySoundXY ( x , y , PlantMine ) ;
25437: LD_VAR 0 2
25441: PPUSH
25442: LD_VAR 0 3
25446: PPUSH
25447: LD_STRING PlantMine
25449: PPUSH
25450: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25454: LD_VAR 0 2
25458: PPUSH
25459: LD_VAR 0 3
25463: PPUSH
25464: LD_VAR 0 1
25468: PPUSH
25469: CALL_OW 255
25473: PPUSH
25474: LD_INT 0
25476: PPUSH
25477: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25481: LD_ADDR_EXP 104
25485: PUSH
25486: LD_EXP 104
25490: PPUSH
25491: LD_VAR 0 5
25495: PUSH
25496: LD_EXP 104
25500: PUSH
25501: LD_VAR 0 5
25505: ARRAY
25506: PUSH
25507: LD_INT 1
25509: PLUS
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PPUSH
25515: LD_VAR 0 2
25519: PUSH
25520: LD_VAR 0 3
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PPUSH
25529: CALL 31701 0 3
25533: ST_TO_ADDR
// result := true ;
25534: LD_ADDR_VAR 0 4
25538: PUSH
25539: LD_INT 1
25541: ST_TO_ADDR
// end ;
25542: LD_VAR 0 4
25546: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25547: LD_INT 0
25549: PPUSH
25550: PPUSH
25551: PPUSH
// if not unit in minersList then
25552: LD_VAR 0 1
25556: PUSH
25557: LD_EXP 103
25561: IN
25562: NOT
25563: IFFALSE 25567
// exit ;
25565: GO 25959
// index := GetElementIndex ( minersList , unit ) ;
25567: LD_ADDR_VAR 0 6
25571: PUSH
25572: LD_EXP 103
25576: PPUSH
25577: LD_VAR 0 1
25581: PPUSH
25582: CALL 31486 0 2
25586: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25587: LD_ADDR_VAR 0 5
25591: PUSH
25592: DOUBLE
25593: LD_EXP 104
25597: PUSH
25598: LD_VAR 0 6
25602: ARRAY
25603: INC
25604: ST_TO_ADDR
25605: LD_INT 1
25607: PUSH
25608: FOR_DOWNTO
25609: IFFALSE 25770
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25611: LD_EXP 104
25615: PUSH
25616: LD_VAR 0 6
25620: ARRAY
25621: PUSH
25622: LD_VAR 0 5
25626: ARRAY
25627: PUSH
25628: LD_INT 1
25630: ARRAY
25631: PUSH
25632: LD_VAR 0 2
25636: EQUAL
25637: PUSH
25638: LD_EXP 104
25642: PUSH
25643: LD_VAR 0 6
25647: ARRAY
25648: PUSH
25649: LD_VAR 0 5
25653: ARRAY
25654: PUSH
25655: LD_INT 2
25657: ARRAY
25658: PUSH
25659: LD_VAR 0 3
25663: EQUAL
25664: AND
25665: IFFALSE 25768
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25667: LD_EXP 104
25671: PUSH
25672: LD_VAR 0 6
25676: ARRAY
25677: PUSH
25678: LD_VAR 0 5
25682: ARRAY
25683: PUSH
25684: LD_INT 1
25686: ARRAY
25687: PPUSH
25688: LD_EXP 104
25692: PUSH
25693: LD_VAR 0 6
25697: ARRAY
25698: PUSH
25699: LD_VAR 0 5
25703: ARRAY
25704: PUSH
25705: LD_INT 2
25707: ARRAY
25708: PPUSH
25709: LD_VAR 0 1
25713: PPUSH
25714: CALL_OW 255
25718: PPUSH
25719: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25723: LD_ADDR_EXP 104
25727: PUSH
25728: LD_EXP 104
25732: PPUSH
25733: LD_VAR 0 6
25737: PPUSH
25738: LD_EXP 104
25742: PUSH
25743: LD_VAR 0 6
25747: ARRAY
25748: PPUSH
25749: LD_VAR 0 5
25753: PPUSH
25754: CALL_OW 3
25758: PPUSH
25759: CALL_OW 1
25763: ST_TO_ADDR
// exit ;
25764: POP
25765: POP
25766: GO 25959
// end ; end ;
25768: GO 25608
25770: POP
25771: POP
// for i := minerMinesList [ index ] downto 1 do
25772: LD_ADDR_VAR 0 5
25776: PUSH
25777: DOUBLE
25778: LD_EXP 104
25782: PUSH
25783: LD_VAR 0 6
25787: ARRAY
25788: INC
25789: ST_TO_ADDR
25790: LD_INT 1
25792: PUSH
25793: FOR_DOWNTO
25794: IFFALSE 25957
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25796: LD_EXP 104
25800: PUSH
25801: LD_VAR 0 6
25805: ARRAY
25806: PUSH
25807: LD_VAR 0 5
25811: ARRAY
25812: PUSH
25813: LD_INT 1
25815: ARRAY
25816: PPUSH
25817: LD_EXP 104
25821: PUSH
25822: LD_VAR 0 6
25826: ARRAY
25827: PUSH
25828: LD_VAR 0 5
25832: ARRAY
25833: PUSH
25834: LD_INT 2
25836: ARRAY
25837: PPUSH
25838: LD_VAR 0 2
25842: PPUSH
25843: LD_VAR 0 3
25847: PPUSH
25848: CALL_OW 298
25852: PUSH
25853: LD_INT 6
25855: LESS
25856: IFFALSE 25955
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25858: LD_EXP 104
25862: PUSH
25863: LD_VAR 0 6
25867: ARRAY
25868: PUSH
25869: LD_VAR 0 5
25873: ARRAY
25874: PUSH
25875: LD_INT 1
25877: ARRAY
25878: PPUSH
25879: LD_EXP 104
25883: PUSH
25884: LD_VAR 0 6
25888: ARRAY
25889: PUSH
25890: LD_VAR 0 5
25894: ARRAY
25895: PUSH
25896: LD_INT 2
25898: ARRAY
25899: PPUSH
25900: LD_VAR 0 1
25904: PPUSH
25905: CALL_OW 255
25909: PPUSH
25910: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25914: LD_ADDR_EXP 104
25918: PUSH
25919: LD_EXP 104
25923: PPUSH
25924: LD_VAR 0 6
25928: PPUSH
25929: LD_EXP 104
25933: PUSH
25934: LD_VAR 0 6
25938: ARRAY
25939: PPUSH
25940: LD_VAR 0 5
25944: PPUSH
25945: CALL_OW 3
25949: PPUSH
25950: CALL_OW 1
25954: ST_TO_ADDR
// end ; end ;
25955: GO 25793
25957: POP
25958: POP
// end ;
25959: LD_VAR 0 4
25963: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25964: LD_INT 0
25966: PPUSH
25967: PPUSH
25968: PPUSH
25969: PPUSH
25970: PPUSH
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25975: LD_VAR 0 1
25979: PPUSH
25980: CALL_OW 264
25984: PUSH
25985: LD_EXP 32
25989: EQUAL
25990: NOT
25991: PUSH
25992: LD_VAR 0 1
25996: PUSH
25997: LD_EXP 103
26001: IN
26002: NOT
26003: OR
26004: IFFALSE 26008
// exit ;
26006: GO 26330
// index := GetElementIndex ( minersList , unit ) ;
26008: LD_ADDR_VAR 0 6
26012: PUSH
26013: LD_EXP 103
26017: PPUSH
26018: LD_VAR 0 1
26022: PPUSH
26023: CALL 31486 0 2
26027: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26028: LD_ADDR_VAR 0 8
26032: PUSH
26033: LD_EXP 105
26037: PUSH
26038: LD_EXP 104
26042: PUSH
26043: LD_VAR 0 6
26047: ARRAY
26048: MINUS
26049: ST_TO_ADDR
// if not minesFreeAmount then
26050: LD_VAR 0 8
26054: NOT
26055: IFFALSE 26059
// exit ;
26057: GO 26330
// tmp := [ ] ;
26059: LD_ADDR_VAR 0 7
26063: PUSH
26064: EMPTY
26065: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26066: LD_ADDR_VAR 0 5
26070: PUSH
26071: DOUBLE
26072: LD_INT 1
26074: DEC
26075: ST_TO_ADDR
26076: LD_VAR 0 8
26080: PUSH
26081: FOR_TO
26082: IFFALSE 26277
// begin _d := rand ( 0 , 5 ) ;
26084: LD_ADDR_VAR 0 11
26088: PUSH
26089: LD_INT 0
26091: PPUSH
26092: LD_INT 5
26094: PPUSH
26095: CALL_OW 12
26099: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26100: LD_ADDR_VAR 0 12
26104: PUSH
26105: LD_INT 2
26107: PPUSH
26108: LD_INT 6
26110: PPUSH
26111: CALL_OW 12
26115: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26116: LD_ADDR_VAR 0 9
26120: PUSH
26121: LD_VAR 0 2
26125: PPUSH
26126: LD_VAR 0 11
26130: PPUSH
26131: LD_VAR 0 12
26135: PPUSH
26136: CALL_OW 272
26140: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26141: LD_ADDR_VAR 0 10
26145: PUSH
26146: LD_VAR 0 3
26150: PPUSH
26151: LD_VAR 0 11
26155: PPUSH
26156: LD_VAR 0 12
26160: PPUSH
26161: CALL_OW 273
26165: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26166: LD_VAR 0 9
26170: PPUSH
26171: LD_VAR 0 10
26175: PPUSH
26176: CALL_OW 488
26180: PUSH
26181: LD_VAR 0 9
26185: PUSH
26186: LD_VAR 0 10
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_VAR 0 7
26199: IN
26200: NOT
26201: AND
26202: PUSH
26203: LD_VAR 0 9
26207: PPUSH
26208: LD_VAR 0 10
26212: PPUSH
26213: CALL_OW 458
26217: NOT
26218: AND
26219: IFFALSE 26261
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26221: LD_ADDR_VAR 0 7
26225: PUSH
26226: LD_VAR 0 7
26230: PPUSH
26231: LD_VAR 0 7
26235: PUSH
26236: LD_INT 1
26238: PLUS
26239: PPUSH
26240: LD_VAR 0 9
26244: PUSH
26245: LD_VAR 0 10
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PPUSH
26254: CALL_OW 1
26258: ST_TO_ADDR
26259: GO 26275
// i := i - 1 ;
26261: LD_ADDR_VAR 0 5
26265: PUSH
26266: LD_VAR 0 5
26270: PUSH
26271: LD_INT 1
26273: MINUS
26274: ST_TO_ADDR
// end ;
26275: GO 26081
26277: POP
26278: POP
// for i in tmp do
26279: LD_ADDR_VAR 0 5
26283: PUSH
26284: LD_VAR 0 7
26288: PUSH
26289: FOR_IN
26290: IFFALSE 26328
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26292: LD_VAR 0 1
26296: PPUSH
26297: LD_VAR 0 5
26301: PUSH
26302: LD_INT 1
26304: ARRAY
26305: PPUSH
26306: LD_VAR 0 5
26310: PUSH
26311: LD_INT 2
26313: ARRAY
26314: PPUSH
26315: CALL 25270 0 3
26319: NOT
26320: IFFALSE 26326
// exit ;
26322: POP
26323: POP
26324: GO 26330
26326: GO 26289
26328: POP
26329: POP
// end ;
26330: LD_VAR 0 4
26334: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26335: LD_INT 0
26337: PPUSH
26338: PPUSH
26339: PPUSH
26340: PPUSH
26341: PPUSH
26342: PPUSH
26343: PPUSH
// if not GetClass ( unit ) = class_sniper then
26344: LD_VAR 0 1
26348: PPUSH
26349: CALL_OW 257
26353: PUSH
26354: LD_INT 5
26356: EQUAL
26357: NOT
26358: IFFALSE 26362
// exit ;
26360: GO 26750
// dist := 8 ;
26362: LD_ADDR_VAR 0 5
26366: PUSH
26367: LD_INT 8
26369: ST_TO_ADDR
// viewRange := 12 ;
26370: LD_ADDR_VAR 0 7
26374: PUSH
26375: LD_INT 12
26377: ST_TO_ADDR
// side := GetSide ( unit ) ;
26378: LD_ADDR_VAR 0 6
26382: PUSH
26383: LD_VAR 0 1
26387: PPUSH
26388: CALL_OW 255
26392: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26393: LD_INT 61
26395: PPUSH
26396: LD_VAR 0 6
26400: PPUSH
26401: CALL_OW 321
26405: PUSH
26406: LD_INT 2
26408: EQUAL
26409: IFFALSE 26419
// viewRange := 16 ;
26411: LD_ADDR_VAR 0 7
26415: PUSH
26416: LD_INT 16
26418: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26419: LD_VAR 0 1
26423: PPUSH
26424: LD_VAR 0 2
26428: PPUSH
26429: LD_VAR 0 3
26433: PPUSH
26434: CALL_OW 297
26438: PUSH
26439: LD_VAR 0 5
26443: GREATER
26444: IFFALSE 26523
// begin ComMoveXY ( unit , x , y ) ;
26446: LD_VAR 0 1
26450: PPUSH
26451: LD_VAR 0 2
26455: PPUSH
26456: LD_VAR 0 3
26460: PPUSH
26461: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26465: LD_INT 35
26467: PPUSH
26468: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26472: LD_VAR 0 1
26476: PPUSH
26477: LD_VAR 0 2
26481: PPUSH
26482: LD_VAR 0 3
26486: PPUSH
26487: CALL 61550 0 3
26491: NOT
26492: IFFALSE 26496
// exit ;
26494: GO 26750
// until GetDistUnitXY ( unit , x , y ) < dist ;
26496: LD_VAR 0 1
26500: PPUSH
26501: LD_VAR 0 2
26505: PPUSH
26506: LD_VAR 0 3
26510: PPUSH
26511: CALL_OW 297
26515: PUSH
26516: LD_VAR 0 5
26520: LESS
26521: IFFALSE 26465
// end ; ComTurnXY ( unit , x , y ) ;
26523: LD_VAR 0 1
26527: PPUSH
26528: LD_VAR 0 2
26532: PPUSH
26533: LD_VAR 0 3
26537: PPUSH
26538: CALL_OW 118
// wait ( 5 ) ;
26542: LD_INT 5
26544: PPUSH
26545: CALL_OW 67
// _d := GetDir ( unit ) ;
26549: LD_ADDR_VAR 0 10
26553: PUSH
26554: LD_VAR 0 1
26558: PPUSH
26559: CALL_OW 254
26563: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26564: LD_ADDR_VAR 0 8
26568: PUSH
26569: LD_VAR 0 1
26573: PPUSH
26574: CALL_OW 250
26578: PPUSH
26579: LD_VAR 0 10
26583: PPUSH
26584: LD_VAR 0 5
26588: PPUSH
26589: CALL_OW 272
26593: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26594: LD_ADDR_VAR 0 9
26598: PUSH
26599: LD_VAR 0 1
26603: PPUSH
26604: CALL_OW 251
26608: PPUSH
26609: LD_VAR 0 10
26613: PPUSH
26614: LD_VAR 0 5
26618: PPUSH
26619: CALL_OW 273
26623: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26624: LD_VAR 0 8
26628: PPUSH
26629: LD_VAR 0 9
26633: PPUSH
26634: CALL_OW 488
26638: NOT
26639: IFFALSE 26643
// exit ;
26641: GO 26750
// ComAnimCustom ( unit , 1 ) ;
26643: LD_VAR 0 1
26647: PPUSH
26648: LD_INT 1
26650: PPUSH
26651: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26655: LD_VAR 0 8
26659: PPUSH
26660: LD_VAR 0 9
26664: PPUSH
26665: LD_VAR 0 6
26669: PPUSH
26670: LD_VAR 0 7
26674: PPUSH
26675: CALL_OW 330
// repeat wait ( 1 ) ;
26679: LD_INT 1
26681: PPUSH
26682: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26686: LD_VAR 0 1
26690: PPUSH
26691: CALL_OW 316
26695: PUSH
26696: LD_VAR 0 1
26700: PPUSH
26701: CALL_OW 314
26705: OR
26706: PUSH
26707: LD_VAR 0 1
26711: PPUSH
26712: CALL_OW 302
26716: NOT
26717: OR
26718: PUSH
26719: LD_VAR 0 1
26723: PPUSH
26724: CALL_OW 301
26728: OR
26729: IFFALSE 26679
// RemoveSeeing ( _x , _y , side ) ;
26731: LD_VAR 0 8
26735: PPUSH
26736: LD_VAR 0 9
26740: PPUSH
26741: LD_VAR 0 6
26745: PPUSH
26746: CALL_OW 331
// end ; end_of_file
26750: LD_VAR 0 4
26754: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26755: LD_INT 0
26757: PPUSH
26758: PPUSH
// if exist_mode then
26759: LD_VAR 0 2
26763: IFFALSE 26788
// unit := CreateCharacter ( prefix & ident ) else
26765: LD_ADDR_VAR 0 5
26769: PUSH
26770: LD_VAR 0 3
26774: PUSH
26775: LD_VAR 0 1
26779: STR
26780: PPUSH
26781: CALL_OW 34
26785: ST_TO_ADDR
26786: GO 26803
// unit := NewCharacter ( ident ) ;
26788: LD_ADDR_VAR 0 5
26792: PUSH
26793: LD_VAR 0 1
26797: PPUSH
26798: CALL_OW 25
26802: ST_TO_ADDR
// result := unit ;
26803: LD_ADDR_VAR 0 4
26807: PUSH
26808: LD_VAR 0 5
26812: ST_TO_ADDR
// end ;
26813: LD_VAR 0 4
26817: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26818: LD_INT 0
26820: PPUSH
26821: PPUSH
// if not side or not nation then
26822: LD_VAR 0 1
26826: NOT
26827: PUSH
26828: LD_VAR 0 2
26832: NOT
26833: OR
26834: IFFALSE 26838
// exit ;
26836: GO 27602
// case nation of nation_american :
26838: LD_VAR 0 2
26842: PUSH
26843: LD_INT 1
26845: DOUBLE
26846: EQUAL
26847: IFTRUE 26851
26849: GO 27065
26851: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26852: LD_ADDR_VAR 0 4
26856: PUSH
26857: LD_INT 35
26859: PUSH
26860: LD_INT 45
26862: PUSH
26863: LD_INT 46
26865: PUSH
26866: LD_INT 47
26868: PUSH
26869: LD_INT 82
26871: PUSH
26872: LD_INT 83
26874: PUSH
26875: LD_INT 84
26877: PUSH
26878: LD_INT 85
26880: PUSH
26881: LD_INT 86
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: LD_INT 2
26889: PUSH
26890: LD_INT 6
26892: PUSH
26893: LD_INT 15
26895: PUSH
26896: LD_INT 16
26898: PUSH
26899: LD_INT 7
26901: PUSH
26902: LD_INT 12
26904: PUSH
26905: LD_INT 13
26907: PUSH
26908: LD_INT 10
26910: PUSH
26911: LD_INT 14
26913: PUSH
26914: LD_INT 20
26916: PUSH
26917: LD_INT 21
26919: PUSH
26920: LD_INT 22
26922: PUSH
26923: LD_INT 25
26925: PUSH
26926: LD_INT 32
26928: PUSH
26929: LD_INT 27
26931: PUSH
26932: LD_INT 36
26934: PUSH
26935: LD_INT 69
26937: PUSH
26938: LD_INT 39
26940: PUSH
26941: LD_INT 34
26943: PUSH
26944: LD_INT 40
26946: PUSH
26947: LD_INT 48
26949: PUSH
26950: LD_INT 49
26952: PUSH
26953: LD_INT 50
26955: PUSH
26956: LD_INT 51
26958: PUSH
26959: LD_INT 52
26961: PUSH
26962: LD_INT 53
26964: PUSH
26965: LD_INT 54
26967: PUSH
26968: LD_INT 55
26970: PUSH
26971: LD_INT 56
26973: PUSH
26974: LD_INT 57
26976: PUSH
26977: LD_INT 58
26979: PUSH
26980: LD_INT 59
26982: PUSH
26983: LD_INT 60
26985: PUSH
26986: LD_INT 61
26988: PUSH
26989: LD_INT 62
26991: PUSH
26992: LD_INT 80
26994: PUSH
26995: LD_INT 82
26997: PUSH
26998: LD_INT 83
27000: PUSH
27001: LD_INT 84
27003: PUSH
27004: LD_INT 85
27006: PUSH
27007: LD_INT 86
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: ST_TO_ADDR
27063: GO 27526
27065: LD_INT 2
27067: DOUBLE
27068: EQUAL
27069: IFTRUE 27073
27071: GO 27295
27073: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27074: LD_ADDR_VAR 0 4
27078: PUSH
27079: LD_INT 35
27081: PUSH
27082: LD_INT 45
27084: PUSH
27085: LD_INT 46
27087: PUSH
27088: LD_INT 47
27090: PUSH
27091: LD_INT 82
27093: PUSH
27094: LD_INT 83
27096: PUSH
27097: LD_INT 84
27099: PUSH
27100: LD_INT 85
27102: PUSH
27103: LD_INT 87
27105: PUSH
27106: LD_INT 70
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: LD_INT 11
27114: PUSH
27115: LD_INT 3
27117: PUSH
27118: LD_INT 4
27120: PUSH
27121: LD_INT 5
27123: PUSH
27124: LD_INT 6
27126: PUSH
27127: LD_INT 15
27129: PUSH
27130: LD_INT 18
27132: PUSH
27133: LD_INT 7
27135: PUSH
27136: LD_INT 17
27138: PUSH
27139: LD_INT 8
27141: PUSH
27142: LD_INT 20
27144: PUSH
27145: LD_INT 21
27147: PUSH
27148: LD_INT 22
27150: PUSH
27151: LD_INT 72
27153: PUSH
27154: LD_INT 26
27156: PUSH
27157: LD_INT 69
27159: PUSH
27160: LD_INT 39
27162: PUSH
27163: LD_INT 40
27165: PUSH
27166: LD_INT 41
27168: PUSH
27169: LD_INT 42
27171: PUSH
27172: LD_INT 43
27174: PUSH
27175: LD_INT 48
27177: PUSH
27178: LD_INT 49
27180: PUSH
27181: LD_INT 50
27183: PUSH
27184: LD_INT 51
27186: PUSH
27187: LD_INT 52
27189: PUSH
27190: LD_INT 53
27192: PUSH
27193: LD_INT 54
27195: PUSH
27196: LD_INT 55
27198: PUSH
27199: LD_INT 56
27201: PUSH
27202: LD_INT 60
27204: PUSH
27205: LD_INT 61
27207: PUSH
27208: LD_INT 62
27210: PUSH
27211: LD_INT 66
27213: PUSH
27214: LD_INT 67
27216: PUSH
27217: LD_INT 68
27219: PUSH
27220: LD_INT 81
27222: PUSH
27223: LD_INT 82
27225: PUSH
27226: LD_INT 83
27228: PUSH
27229: LD_INT 84
27231: PUSH
27232: LD_INT 85
27234: PUSH
27235: LD_INT 87
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: ST_TO_ADDR
27293: GO 27526
27295: LD_INT 3
27297: DOUBLE
27298: EQUAL
27299: IFTRUE 27303
27301: GO 27525
27303: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27304: LD_ADDR_VAR 0 4
27308: PUSH
27309: LD_INT 46
27311: PUSH
27312: LD_INT 47
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: LD_INT 2
27320: PUSH
27321: LD_INT 82
27323: PUSH
27324: LD_INT 83
27326: PUSH
27327: LD_INT 84
27329: PUSH
27330: LD_INT 85
27332: PUSH
27333: LD_INT 86
27335: PUSH
27336: LD_INT 11
27338: PUSH
27339: LD_INT 9
27341: PUSH
27342: LD_INT 20
27344: PUSH
27345: LD_INT 19
27347: PUSH
27348: LD_INT 21
27350: PUSH
27351: LD_INT 24
27353: PUSH
27354: LD_INT 22
27356: PUSH
27357: LD_INT 25
27359: PUSH
27360: LD_INT 28
27362: PUSH
27363: LD_INT 29
27365: PUSH
27366: LD_INT 30
27368: PUSH
27369: LD_INT 31
27371: PUSH
27372: LD_INT 37
27374: PUSH
27375: LD_INT 38
27377: PUSH
27378: LD_INT 32
27380: PUSH
27381: LD_INT 27
27383: PUSH
27384: LD_INT 33
27386: PUSH
27387: LD_INT 69
27389: PUSH
27390: LD_INT 39
27392: PUSH
27393: LD_INT 34
27395: PUSH
27396: LD_INT 40
27398: PUSH
27399: LD_INT 71
27401: PUSH
27402: LD_INT 23
27404: PUSH
27405: LD_INT 44
27407: PUSH
27408: LD_INT 48
27410: PUSH
27411: LD_INT 49
27413: PUSH
27414: LD_INT 50
27416: PUSH
27417: LD_INT 51
27419: PUSH
27420: LD_INT 52
27422: PUSH
27423: LD_INT 53
27425: PUSH
27426: LD_INT 54
27428: PUSH
27429: LD_INT 55
27431: PUSH
27432: LD_INT 56
27434: PUSH
27435: LD_INT 57
27437: PUSH
27438: LD_INT 58
27440: PUSH
27441: LD_INT 59
27443: PUSH
27444: LD_INT 63
27446: PUSH
27447: LD_INT 64
27449: PUSH
27450: LD_INT 65
27452: PUSH
27453: LD_INT 82
27455: PUSH
27456: LD_INT 83
27458: PUSH
27459: LD_INT 84
27461: PUSH
27462: LD_INT 85
27464: PUSH
27465: LD_INT 86
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: ST_TO_ADDR
27523: GO 27526
27525: POP
// if state > - 1 and state < 3 then
27526: LD_VAR 0 3
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: GREATER
27535: PUSH
27536: LD_VAR 0 3
27540: PUSH
27541: LD_INT 3
27543: LESS
27544: AND
27545: IFFALSE 27602
// for i in result do
27547: LD_ADDR_VAR 0 5
27551: PUSH
27552: LD_VAR 0 4
27556: PUSH
27557: FOR_IN
27558: IFFALSE 27600
// if GetTech ( i , side ) <> state then
27560: LD_VAR 0 5
27564: PPUSH
27565: LD_VAR 0 1
27569: PPUSH
27570: CALL_OW 321
27574: PUSH
27575: LD_VAR 0 3
27579: NONEQUAL
27580: IFFALSE 27598
// result := result diff i ;
27582: LD_ADDR_VAR 0 4
27586: PUSH
27587: LD_VAR 0 4
27591: PUSH
27592: LD_VAR 0 5
27596: DIFF
27597: ST_TO_ADDR
27598: GO 27557
27600: POP
27601: POP
// end ;
27602: LD_VAR 0 4
27606: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27607: LD_INT 0
27609: PPUSH
27610: PPUSH
27611: PPUSH
// result := true ;
27612: LD_ADDR_VAR 0 3
27616: PUSH
27617: LD_INT 1
27619: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27620: LD_ADDR_VAR 0 5
27624: PUSH
27625: LD_VAR 0 2
27629: PPUSH
27630: CALL_OW 480
27634: ST_TO_ADDR
// if not tmp then
27635: LD_VAR 0 5
27639: NOT
27640: IFFALSE 27644
// exit ;
27642: GO 27693
// for i in tmp do
27644: LD_ADDR_VAR 0 4
27648: PUSH
27649: LD_VAR 0 5
27653: PUSH
27654: FOR_IN
27655: IFFALSE 27691
// if GetTech ( i , side ) <> state_researched then
27657: LD_VAR 0 4
27661: PPUSH
27662: LD_VAR 0 1
27666: PPUSH
27667: CALL_OW 321
27671: PUSH
27672: LD_INT 2
27674: NONEQUAL
27675: IFFALSE 27689
// begin result := false ;
27677: LD_ADDR_VAR 0 3
27681: PUSH
27682: LD_INT 0
27684: ST_TO_ADDR
// exit ;
27685: POP
27686: POP
27687: GO 27693
// end ;
27689: GO 27654
27691: POP
27692: POP
// end ;
27693: LD_VAR 0 3
27697: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27698: LD_INT 0
27700: PPUSH
27701: PPUSH
27702: PPUSH
27703: PPUSH
27704: PPUSH
27705: PPUSH
27706: PPUSH
27707: PPUSH
27708: PPUSH
27709: PPUSH
27710: PPUSH
27711: PPUSH
27712: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27713: LD_VAR 0 1
27717: NOT
27718: PUSH
27719: LD_VAR 0 1
27723: PPUSH
27724: CALL_OW 257
27728: PUSH
27729: LD_INT 9
27731: NONEQUAL
27732: OR
27733: IFFALSE 27737
// exit ;
27735: GO 28310
// side := GetSide ( unit ) ;
27737: LD_ADDR_VAR 0 9
27741: PUSH
27742: LD_VAR 0 1
27746: PPUSH
27747: CALL_OW 255
27751: ST_TO_ADDR
// tech_space := tech_spacanom ;
27752: LD_ADDR_VAR 0 12
27756: PUSH
27757: LD_INT 29
27759: ST_TO_ADDR
// tech_time := tech_taurad ;
27760: LD_ADDR_VAR 0 13
27764: PUSH
27765: LD_INT 28
27767: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27768: LD_ADDR_VAR 0 11
27772: PUSH
27773: LD_VAR 0 1
27777: PPUSH
27778: CALL_OW 310
27782: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27783: LD_VAR 0 11
27787: PPUSH
27788: CALL_OW 247
27792: PUSH
27793: LD_INT 2
27795: EQUAL
27796: IFFALSE 27800
// exit ;
27798: GO 28310
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27800: LD_ADDR_VAR 0 8
27804: PUSH
27805: LD_INT 81
27807: PUSH
27808: LD_VAR 0 9
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 3
27819: PUSH
27820: LD_INT 21
27822: PUSH
27823: LD_INT 3
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PPUSH
27838: CALL_OW 69
27842: ST_TO_ADDR
// if not tmp then
27843: LD_VAR 0 8
27847: NOT
27848: IFFALSE 27852
// exit ;
27850: GO 28310
// if in_unit then
27852: LD_VAR 0 11
27856: IFFALSE 27880
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27858: LD_ADDR_VAR 0 10
27862: PUSH
27863: LD_VAR 0 8
27867: PPUSH
27868: LD_VAR 0 11
27872: PPUSH
27873: CALL_OW 74
27877: ST_TO_ADDR
27878: GO 27900
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27880: LD_ADDR_VAR 0 10
27884: PUSH
27885: LD_VAR 0 8
27889: PPUSH
27890: LD_VAR 0 1
27894: PPUSH
27895: CALL_OW 74
27899: ST_TO_ADDR
// if not enemy then
27900: LD_VAR 0 10
27904: NOT
27905: IFFALSE 27909
// exit ;
27907: GO 28310
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27909: LD_VAR 0 11
27913: PUSH
27914: LD_VAR 0 11
27918: PPUSH
27919: LD_VAR 0 10
27923: PPUSH
27924: CALL_OW 296
27928: PUSH
27929: LD_INT 13
27931: GREATER
27932: AND
27933: PUSH
27934: LD_VAR 0 1
27938: PPUSH
27939: LD_VAR 0 10
27943: PPUSH
27944: CALL_OW 296
27948: PUSH
27949: LD_INT 12
27951: GREATER
27952: OR
27953: IFFALSE 27957
// exit ;
27955: GO 28310
// missile := [ 1 ] ;
27957: LD_ADDR_VAR 0 14
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: EMPTY
27966: LIST
27967: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27968: LD_VAR 0 9
27972: PPUSH
27973: LD_VAR 0 12
27977: PPUSH
27978: CALL_OW 325
27982: IFFALSE 28011
// missile := Insert ( missile , missile + 1 , 2 ) ;
27984: LD_ADDR_VAR 0 14
27988: PUSH
27989: LD_VAR 0 14
27993: PPUSH
27994: LD_VAR 0 14
27998: PUSH
27999: LD_INT 1
28001: PLUS
28002: PPUSH
28003: LD_INT 2
28005: PPUSH
28006: CALL_OW 2
28010: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28011: LD_VAR 0 9
28015: PPUSH
28016: LD_VAR 0 13
28020: PPUSH
28021: CALL_OW 325
28025: PUSH
28026: LD_VAR 0 10
28030: PPUSH
28031: CALL_OW 255
28035: PPUSH
28036: LD_VAR 0 13
28040: PPUSH
28041: CALL_OW 325
28045: NOT
28046: AND
28047: IFFALSE 28076
// missile := Insert ( missile , missile + 1 , 3 ) ;
28049: LD_ADDR_VAR 0 14
28053: PUSH
28054: LD_VAR 0 14
28058: PPUSH
28059: LD_VAR 0 14
28063: PUSH
28064: LD_INT 1
28066: PLUS
28067: PPUSH
28068: LD_INT 3
28070: PPUSH
28071: CALL_OW 2
28075: ST_TO_ADDR
// if missile < 2 then
28076: LD_VAR 0 14
28080: PUSH
28081: LD_INT 2
28083: LESS
28084: IFFALSE 28088
// exit ;
28086: GO 28310
// x := GetX ( enemy ) ;
28088: LD_ADDR_VAR 0 4
28092: PUSH
28093: LD_VAR 0 10
28097: PPUSH
28098: CALL_OW 250
28102: ST_TO_ADDR
// y := GetY ( enemy ) ;
28103: LD_ADDR_VAR 0 5
28107: PUSH
28108: LD_VAR 0 10
28112: PPUSH
28113: CALL_OW 251
28117: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28118: LD_ADDR_VAR 0 6
28122: PUSH
28123: LD_VAR 0 4
28127: PUSH
28128: LD_INT 1
28130: NEG
28131: PPUSH
28132: LD_INT 1
28134: PPUSH
28135: CALL_OW 12
28139: PLUS
28140: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28141: LD_ADDR_VAR 0 7
28145: PUSH
28146: LD_VAR 0 5
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PPUSH
28155: LD_INT 1
28157: PPUSH
28158: CALL_OW 12
28162: PLUS
28163: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28164: LD_VAR 0 6
28168: PPUSH
28169: LD_VAR 0 7
28173: PPUSH
28174: CALL_OW 488
28178: NOT
28179: IFFALSE 28201
// begin _x := x ;
28181: LD_ADDR_VAR 0 6
28185: PUSH
28186: LD_VAR 0 4
28190: ST_TO_ADDR
// _y := y ;
28191: LD_ADDR_VAR 0 7
28195: PUSH
28196: LD_VAR 0 5
28200: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28201: LD_ADDR_VAR 0 3
28205: PUSH
28206: LD_INT 1
28208: PPUSH
28209: LD_VAR 0 14
28213: PPUSH
28214: CALL_OW 12
28218: ST_TO_ADDR
// case i of 1 :
28219: LD_VAR 0 3
28223: PUSH
28224: LD_INT 1
28226: DOUBLE
28227: EQUAL
28228: IFTRUE 28232
28230: GO 28249
28232: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28233: LD_VAR 0 1
28237: PPUSH
28238: LD_VAR 0 10
28242: PPUSH
28243: CALL_OW 115
28247: GO 28310
28249: LD_INT 2
28251: DOUBLE
28252: EQUAL
28253: IFTRUE 28257
28255: GO 28279
28257: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28258: LD_VAR 0 1
28262: PPUSH
28263: LD_VAR 0 6
28267: PPUSH
28268: LD_VAR 0 7
28272: PPUSH
28273: CALL_OW 153
28277: GO 28310
28279: LD_INT 3
28281: DOUBLE
28282: EQUAL
28283: IFTRUE 28287
28285: GO 28309
28287: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28288: LD_VAR 0 1
28292: PPUSH
28293: LD_VAR 0 6
28297: PPUSH
28298: LD_VAR 0 7
28302: PPUSH
28303: CALL_OW 154
28307: GO 28310
28309: POP
// end ;
28310: LD_VAR 0 2
28314: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28315: LD_INT 0
28317: PPUSH
28318: PPUSH
28319: PPUSH
28320: PPUSH
28321: PPUSH
28322: PPUSH
// if not unit or not building then
28323: LD_VAR 0 1
28327: NOT
28328: PUSH
28329: LD_VAR 0 2
28333: NOT
28334: OR
28335: IFFALSE 28339
// exit ;
28337: GO 28497
// x := GetX ( building ) ;
28339: LD_ADDR_VAR 0 5
28343: PUSH
28344: LD_VAR 0 2
28348: PPUSH
28349: CALL_OW 250
28353: ST_TO_ADDR
// y := GetY ( building ) ;
28354: LD_ADDR_VAR 0 6
28358: PUSH
28359: LD_VAR 0 2
28363: PPUSH
28364: CALL_OW 251
28368: ST_TO_ADDR
// for i = 0 to 5 do
28369: LD_ADDR_VAR 0 4
28373: PUSH
28374: DOUBLE
28375: LD_INT 0
28377: DEC
28378: ST_TO_ADDR
28379: LD_INT 5
28381: PUSH
28382: FOR_TO
28383: IFFALSE 28495
// begin _x := ShiftX ( x , i , 3 ) ;
28385: LD_ADDR_VAR 0 7
28389: PUSH
28390: LD_VAR 0 5
28394: PPUSH
28395: LD_VAR 0 4
28399: PPUSH
28400: LD_INT 3
28402: PPUSH
28403: CALL_OW 272
28407: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28408: LD_ADDR_VAR 0 8
28412: PUSH
28413: LD_VAR 0 6
28417: PPUSH
28418: LD_VAR 0 4
28422: PPUSH
28423: LD_INT 3
28425: PPUSH
28426: CALL_OW 273
28430: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28431: LD_VAR 0 7
28435: PPUSH
28436: LD_VAR 0 8
28440: PPUSH
28441: CALL_OW 488
28445: NOT
28446: IFFALSE 28450
// continue ;
28448: GO 28382
// if HexInfo ( _x , _y ) = 0 then
28450: LD_VAR 0 7
28454: PPUSH
28455: LD_VAR 0 8
28459: PPUSH
28460: CALL_OW 428
28464: PUSH
28465: LD_INT 0
28467: EQUAL
28468: IFFALSE 28493
// begin ComMoveXY ( unit , _x , _y ) ;
28470: LD_VAR 0 1
28474: PPUSH
28475: LD_VAR 0 7
28479: PPUSH
28480: LD_VAR 0 8
28484: PPUSH
28485: CALL_OW 111
// exit ;
28489: POP
28490: POP
28491: GO 28497
// end ; end ;
28493: GO 28382
28495: POP
28496: POP
// end ;
28497: LD_VAR 0 3
28501: RET
// export function ScanBase ( side , base_area ) ; begin
28502: LD_INT 0
28504: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28505: LD_ADDR_VAR 0 3
28509: PUSH
28510: LD_VAR 0 2
28514: PPUSH
28515: LD_INT 81
28517: PUSH
28518: LD_VAR 0 1
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PPUSH
28527: CALL_OW 70
28531: ST_TO_ADDR
// end ;
28532: LD_VAR 0 3
28536: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28537: LD_INT 0
28539: PPUSH
28540: PPUSH
28541: PPUSH
28542: PPUSH
// result := false ;
28543: LD_ADDR_VAR 0 2
28547: PUSH
28548: LD_INT 0
28550: ST_TO_ADDR
// side := GetSide ( unit ) ;
28551: LD_ADDR_VAR 0 3
28555: PUSH
28556: LD_VAR 0 1
28560: PPUSH
28561: CALL_OW 255
28565: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28566: LD_ADDR_VAR 0 4
28570: PUSH
28571: LD_VAR 0 1
28575: PPUSH
28576: CALL_OW 248
28580: ST_TO_ADDR
// case nat of 1 :
28581: LD_VAR 0 4
28585: PUSH
28586: LD_INT 1
28588: DOUBLE
28589: EQUAL
28590: IFTRUE 28594
28592: GO 28605
28594: POP
// tech := tech_lassight ; 2 :
28595: LD_ADDR_VAR 0 5
28599: PUSH
28600: LD_INT 12
28602: ST_TO_ADDR
28603: GO 28644
28605: LD_INT 2
28607: DOUBLE
28608: EQUAL
28609: IFTRUE 28613
28611: GO 28624
28613: POP
// tech := tech_mortar ; 3 :
28614: LD_ADDR_VAR 0 5
28618: PUSH
28619: LD_INT 41
28621: ST_TO_ADDR
28622: GO 28644
28624: LD_INT 3
28626: DOUBLE
28627: EQUAL
28628: IFTRUE 28632
28630: GO 28643
28632: POP
// tech := tech_bazooka ; end ;
28633: LD_ADDR_VAR 0 5
28637: PUSH
28638: LD_INT 44
28640: ST_TO_ADDR
28641: GO 28644
28643: POP
// if Researched ( side , tech ) then
28644: LD_VAR 0 3
28648: PPUSH
28649: LD_VAR 0 5
28653: PPUSH
28654: CALL_OW 325
28658: IFFALSE 28685
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28660: LD_ADDR_VAR 0 2
28664: PUSH
28665: LD_INT 5
28667: PUSH
28668: LD_INT 8
28670: PUSH
28671: LD_INT 9
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: LIST
28678: PUSH
28679: LD_VAR 0 4
28683: ARRAY
28684: ST_TO_ADDR
// end ;
28685: LD_VAR 0 2
28689: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28690: LD_INT 0
28692: PPUSH
28693: PPUSH
28694: PPUSH
// if not mines then
28695: LD_VAR 0 2
28699: NOT
28700: IFFALSE 28704
// exit ;
28702: GO 28848
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28704: LD_ADDR_VAR 0 5
28708: PUSH
28709: LD_INT 81
28711: PUSH
28712: LD_VAR 0 1
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 3
28723: PUSH
28724: LD_INT 21
28726: PUSH
28727: LD_INT 3
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PPUSH
28742: CALL_OW 69
28746: ST_TO_ADDR
// for i in mines do
28747: LD_ADDR_VAR 0 4
28751: PUSH
28752: LD_VAR 0 2
28756: PUSH
28757: FOR_IN
28758: IFFALSE 28846
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28760: LD_VAR 0 4
28764: PUSH
28765: LD_INT 1
28767: ARRAY
28768: PPUSH
28769: LD_VAR 0 4
28773: PUSH
28774: LD_INT 2
28776: ARRAY
28777: PPUSH
28778: CALL_OW 458
28782: NOT
28783: IFFALSE 28787
// continue ;
28785: GO 28757
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28787: LD_VAR 0 4
28791: PUSH
28792: LD_INT 1
28794: ARRAY
28795: PPUSH
28796: LD_VAR 0 4
28800: PUSH
28801: LD_INT 2
28803: ARRAY
28804: PPUSH
28805: CALL_OW 428
28809: PUSH
28810: LD_VAR 0 5
28814: IN
28815: IFFALSE 28844
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28817: LD_VAR 0 4
28821: PUSH
28822: LD_INT 1
28824: ARRAY
28825: PPUSH
28826: LD_VAR 0 4
28830: PUSH
28831: LD_INT 2
28833: ARRAY
28834: PPUSH
28835: LD_VAR 0 1
28839: PPUSH
28840: CALL_OW 456
// end ;
28844: GO 28757
28846: POP
28847: POP
// end ;
28848: LD_VAR 0 3
28852: RET
// export function Count ( array ) ; var i ; begin
28853: LD_INT 0
28855: PPUSH
28856: PPUSH
// result := 0 ;
28857: LD_ADDR_VAR 0 2
28861: PUSH
28862: LD_INT 0
28864: ST_TO_ADDR
// for i in array do
28865: LD_ADDR_VAR 0 3
28869: PUSH
28870: LD_VAR 0 1
28874: PUSH
28875: FOR_IN
28876: IFFALSE 28900
// if i then
28878: LD_VAR 0 3
28882: IFFALSE 28898
// result := result + 1 ;
28884: LD_ADDR_VAR 0 2
28888: PUSH
28889: LD_VAR 0 2
28893: PUSH
28894: LD_INT 1
28896: PLUS
28897: ST_TO_ADDR
28898: GO 28875
28900: POP
28901: POP
// end ;
28902: LD_VAR 0 2
28906: RET
// export function IsEmpty ( building ) ; begin
28907: LD_INT 0
28909: PPUSH
// if not building then
28910: LD_VAR 0 1
28914: NOT
28915: IFFALSE 28919
// exit ;
28917: GO 28962
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28919: LD_ADDR_VAR 0 2
28923: PUSH
28924: LD_VAR 0 1
28928: PUSH
28929: LD_INT 22
28931: PUSH
28932: LD_VAR 0 1
28936: PPUSH
28937: CALL_OW 255
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 58
28948: PUSH
28949: EMPTY
28950: LIST
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PPUSH
28956: CALL_OW 69
28960: IN
28961: ST_TO_ADDR
// end ;
28962: LD_VAR 0 2
28966: RET
// export function IsNotFull ( building ) ; begin
28967: LD_INT 0
28969: PPUSH
// if not building then
28970: LD_VAR 0 1
28974: NOT
28975: IFFALSE 28979
// exit ;
28977: GO 28998
// result := UnitsInside ( building ) < 6 ;
28979: LD_ADDR_VAR 0 2
28983: PUSH
28984: LD_VAR 0 1
28988: PPUSH
28989: CALL_OW 313
28993: PUSH
28994: LD_INT 6
28996: LESS
28997: ST_TO_ADDR
// end ;
28998: LD_VAR 0 2
29002: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29003: LD_INT 0
29005: PPUSH
29006: PPUSH
29007: PPUSH
29008: PPUSH
// tmp := [ ] ;
29009: LD_ADDR_VAR 0 3
29013: PUSH
29014: EMPTY
29015: ST_TO_ADDR
// list := [ ] ;
29016: LD_ADDR_VAR 0 5
29020: PUSH
29021: EMPTY
29022: ST_TO_ADDR
// for i = 16 to 25 do
29023: LD_ADDR_VAR 0 4
29027: PUSH
29028: DOUBLE
29029: LD_INT 16
29031: DEC
29032: ST_TO_ADDR
29033: LD_INT 25
29035: PUSH
29036: FOR_TO
29037: IFFALSE 29110
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29039: LD_ADDR_VAR 0 3
29043: PUSH
29044: LD_VAR 0 3
29048: PUSH
29049: LD_INT 22
29051: PUSH
29052: LD_VAR 0 1
29056: PPUSH
29057: CALL_OW 255
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 91
29068: PUSH
29069: LD_VAR 0 1
29073: PUSH
29074: LD_INT 6
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 30
29084: PUSH
29085: LD_VAR 0 4
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: LIST
29098: PUSH
29099: EMPTY
29100: LIST
29101: PPUSH
29102: CALL_OW 69
29106: ADD
29107: ST_TO_ADDR
29108: GO 29036
29110: POP
29111: POP
// for i = 1 to tmp do
29112: LD_ADDR_VAR 0 4
29116: PUSH
29117: DOUBLE
29118: LD_INT 1
29120: DEC
29121: ST_TO_ADDR
29122: LD_VAR 0 3
29126: PUSH
29127: FOR_TO
29128: IFFALSE 29216
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29130: LD_ADDR_VAR 0 5
29134: PUSH
29135: LD_VAR 0 5
29139: PUSH
29140: LD_VAR 0 3
29144: PUSH
29145: LD_VAR 0 4
29149: ARRAY
29150: PPUSH
29151: CALL_OW 266
29155: PUSH
29156: LD_VAR 0 3
29160: PUSH
29161: LD_VAR 0 4
29165: ARRAY
29166: PPUSH
29167: CALL_OW 250
29171: PUSH
29172: LD_VAR 0 3
29176: PUSH
29177: LD_VAR 0 4
29181: ARRAY
29182: PPUSH
29183: CALL_OW 251
29187: PUSH
29188: LD_VAR 0 3
29192: PUSH
29193: LD_VAR 0 4
29197: ARRAY
29198: PPUSH
29199: CALL_OW 254
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: ADD
29213: ST_TO_ADDR
29214: GO 29127
29216: POP
29217: POP
// result := list ;
29218: LD_ADDR_VAR 0 2
29222: PUSH
29223: LD_VAR 0 5
29227: ST_TO_ADDR
// end ;
29228: LD_VAR 0 2
29232: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29233: LD_INT 0
29235: PPUSH
29236: PPUSH
29237: PPUSH
29238: PPUSH
29239: PPUSH
29240: PPUSH
29241: PPUSH
// if not factory then
29242: LD_VAR 0 1
29246: NOT
29247: IFFALSE 29251
// exit ;
29249: GO 29844
// if control = control_apeman then
29251: LD_VAR 0 4
29255: PUSH
29256: LD_INT 5
29258: EQUAL
29259: IFFALSE 29368
// begin tmp := UnitsInside ( factory ) ;
29261: LD_ADDR_VAR 0 8
29265: PUSH
29266: LD_VAR 0 1
29270: PPUSH
29271: CALL_OW 313
29275: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29276: LD_VAR 0 8
29280: PPUSH
29281: LD_INT 25
29283: PUSH
29284: LD_INT 12
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PPUSH
29291: CALL_OW 72
29295: NOT
29296: IFFALSE 29306
// control := control_manual ;
29298: LD_ADDR_VAR 0 4
29302: PUSH
29303: LD_INT 1
29305: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29306: LD_ADDR_VAR 0 8
29310: PUSH
29311: LD_VAR 0 1
29315: PPUSH
29316: CALL 29003 0 1
29320: ST_TO_ADDR
// if tmp then
29321: LD_VAR 0 8
29325: IFFALSE 29368
// begin for i in tmp do
29327: LD_ADDR_VAR 0 7
29331: PUSH
29332: LD_VAR 0 8
29336: PUSH
29337: FOR_IN
29338: IFFALSE 29366
// if i [ 1 ] = b_ext_radio then
29340: LD_VAR 0 7
29344: PUSH
29345: LD_INT 1
29347: ARRAY
29348: PUSH
29349: LD_INT 22
29351: EQUAL
29352: IFFALSE 29364
// begin control := control_remote ;
29354: LD_ADDR_VAR 0 4
29358: PUSH
29359: LD_INT 2
29361: ST_TO_ADDR
// break ;
29362: GO 29366
// end ;
29364: GO 29337
29366: POP
29367: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29368: LD_VAR 0 1
29372: PPUSH
29373: LD_VAR 0 2
29377: PPUSH
29378: LD_VAR 0 3
29382: PPUSH
29383: LD_VAR 0 4
29387: PPUSH
29388: LD_VAR 0 5
29392: PPUSH
29393: CALL_OW 448
29397: IFFALSE 29432
// begin result := [ chassis , engine , control , weapon ] ;
29399: LD_ADDR_VAR 0 6
29403: PUSH
29404: LD_VAR 0 2
29408: PUSH
29409: LD_VAR 0 3
29413: PUSH
29414: LD_VAR 0 4
29418: PUSH
29419: LD_VAR 0 5
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: ST_TO_ADDR
// exit ;
29430: GO 29844
// end ; _chassis := AvailableChassisList ( factory ) ;
29432: LD_ADDR_VAR 0 9
29436: PUSH
29437: LD_VAR 0 1
29441: PPUSH
29442: CALL_OW 475
29446: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29447: LD_ADDR_VAR 0 11
29451: PUSH
29452: LD_VAR 0 1
29456: PPUSH
29457: CALL_OW 476
29461: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29462: LD_ADDR_VAR 0 12
29466: PUSH
29467: LD_VAR 0 1
29471: PPUSH
29472: CALL_OW 477
29476: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29477: LD_ADDR_VAR 0 10
29481: PUSH
29482: LD_VAR 0 1
29486: PPUSH
29487: CALL_OW 478
29491: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29492: LD_VAR 0 9
29496: NOT
29497: PUSH
29498: LD_VAR 0 11
29502: NOT
29503: OR
29504: PUSH
29505: LD_VAR 0 12
29509: NOT
29510: OR
29511: PUSH
29512: LD_VAR 0 10
29516: NOT
29517: OR
29518: IFFALSE 29553
// begin result := [ chassis , engine , control , weapon ] ;
29520: LD_ADDR_VAR 0 6
29524: PUSH
29525: LD_VAR 0 2
29529: PUSH
29530: LD_VAR 0 3
29534: PUSH
29535: LD_VAR 0 4
29539: PUSH
29540: LD_VAR 0 5
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: ST_TO_ADDR
// exit ;
29551: GO 29844
// end ; if not chassis in _chassis then
29553: LD_VAR 0 2
29557: PUSH
29558: LD_VAR 0 9
29562: IN
29563: NOT
29564: IFFALSE 29590
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29566: LD_ADDR_VAR 0 2
29570: PUSH
29571: LD_VAR 0 9
29575: PUSH
29576: LD_INT 1
29578: PPUSH
29579: LD_VAR 0 9
29583: PPUSH
29584: CALL_OW 12
29588: ARRAY
29589: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29590: LD_VAR 0 2
29594: PPUSH
29595: LD_VAR 0 3
29599: PPUSH
29600: CALL 29849 0 2
29604: NOT
29605: IFFALSE 29664
// repeat engine := _engine [ 1 ] ;
29607: LD_ADDR_VAR 0 3
29611: PUSH
29612: LD_VAR 0 11
29616: PUSH
29617: LD_INT 1
29619: ARRAY
29620: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29621: LD_ADDR_VAR 0 11
29625: PUSH
29626: LD_VAR 0 11
29630: PPUSH
29631: LD_INT 1
29633: PPUSH
29634: CALL_OW 3
29638: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29639: LD_VAR 0 2
29643: PPUSH
29644: LD_VAR 0 3
29648: PPUSH
29649: CALL 29849 0 2
29653: PUSH
29654: LD_VAR 0 11
29658: PUSH
29659: EMPTY
29660: EQUAL
29661: OR
29662: IFFALSE 29607
// if not control in _control then
29664: LD_VAR 0 4
29668: PUSH
29669: LD_VAR 0 12
29673: IN
29674: NOT
29675: IFFALSE 29701
// control := _control [ rand ( 1 , _control ) ] ;
29677: LD_ADDR_VAR 0 4
29681: PUSH
29682: LD_VAR 0 12
29686: PUSH
29687: LD_INT 1
29689: PPUSH
29690: LD_VAR 0 12
29694: PPUSH
29695: CALL_OW 12
29699: ARRAY
29700: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29701: LD_VAR 0 2
29705: PPUSH
29706: LD_VAR 0 5
29710: PPUSH
29711: CALL 30069 0 2
29715: NOT
29716: IFFALSE 29775
// repeat weapon := _weapon [ 1 ] ;
29718: LD_ADDR_VAR 0 5
29722: PUSH
29723: LD_VAR 0 10
29727: PUSH
29728: LD_INT 1
29730: ARRAY
29731: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29732: LD_ADDR_VAR 0 10
29736: PUSH
29737: LD_VAR 0 10
29741: PPUSH
29742: LD_INT 1
29744: PPUSH
29745: CALL_OW 3
29749: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29750: LD_VAR 0 2
29754: PPUSH
29755: LD_VAR 0 5
29759: PPUSH
29760: CALL 30069 0 2
29764: PUSH
29765: LD_VAR 0 10
29769: PUSH
29770: EMPTY
29771: EQUAL
29772: OR
29773: IFFALSE 29718
// result := [ ] ;
29775: LD_ADDR_VAR 0 6
29779: PUSH
29780: EMPTY
29781: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29782: LD_VAR 0 1
29786: PPUSH
29787: LD_VAR 0 2
29791: PPUSH
29792: LD_VAR 0 3
29796: PPUSH
29797: LD_VAR 0 4
29801: PPUSH
29802: LD_VAR 0 5
29806: PPUSH
29807: CALL_OW 448
29811: IFFALSE 29844
// result := [ chassis , engine , control , weapon ] ;
29813: LD_ADDR_VAR 0 6
29817: PUSH
29818: LD_VAR 0 2
29822: PUSH
29823: LD_VAR 0 3
29827: PUSH
29828: LD_VAR 0 4
29832: PUSH
29833: LD_VAR 0 5
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: ST_TO_ADDR
// end ;
29844: LD_VAR 0 6
29848: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29849: LD_INT 0
29851: PPUSH
// if not chassis or not engine then
29852: LD_VAR 0 1
29856: NOT
29857: PUSH
29858: LD_VAR 0 2
29862: NOT
29863: OR
29864: IFFALSE 29868
// exit ;
29866: GO 30064
// case engine of engine_solar :
29868: LD_VAR 0 2
29872: PUSH
29873: LD_INT 2
29875: DOUBLE
29876: EQUAL
29877: IFTRUE 29881
29879: GO 29919
29881: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29882: LD_ADDR_VAR 0 3
29886: PUSH
29887: LD_INT 11
29889: PUSH
29890: LD_INT 12
29892: PUSH
29893: LD_INT 13
29895: PUSH
29896: LD_INT 14
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: LD_INT 2
29904: PUSH
29905: LD_INT 3
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: ST_TO_ADDR
29917: GO 30048
29919: LD_INT 1
29921: DOUBLE
29922: EQUAL
29923: IFTRUE 29927
29925: GO 29989
29927: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29928: LD_ADDR_VAR 0 3
29932: PUSH
29933: LD_INT 11
29935: PUSH
29936: LD_INT 12
29938: PUSH
29939: LD_INT 13
29941: PUSH
29942: LD_INT 14
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: LD_INT 2
29950: PUSH
29951: LD_INT 3
29953: PUSH
29954: LD_INT 4
29956: PUSH
29957: LD_INT 5
29959: PUSH
29960: LD_INT 21
29962: PUSH
29963: LD_INT 23
29965: PUSH
29966: LD_INT 22
29968: PUSH
29969: LD_INT 24
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: ST_TO_ADDR
29987: GO 30048
29989: LD_INT 3
29991: DOUBLE
29992: EQUAL
29993: IFTRUE 29997
29995: GO 30047
29997: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29998: LD_ADDR_VAR 0 3
30002: PUSH
30003: LD_INT 13
30005: PUSH
30006: LD_INT 14
30008: PUSH
30009: LD_INT 2
30011: PUSH
30012: LD_INT 3
30014: PUSH
30015: LD_INT 4
30017: PUSH
30018: LD_INT 5
30020: PUSH
30021: LD_INT 21
30023: PUSH
30024: LD_INT 22
30026: PUSH
30027: LD_INT 23
30029: PUSH
30030: LD_INT 24
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: ST_TO_ADDR
30045: GO 30048
30047: POP
// result := ( chassis in result ) ;
30048: LD_ADDR_VAR 0 3
30052: PUSH
30053: LD_VAR 0 1
30057: PUSH
30058: LD_VAR 0 3
30062: IN
30063: ST_TO_ADDR
// end ;
30064: LD_VAR 0 3
30068: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30069: LD_INT 0
30071: PPUSH
// if not chassis or not weapon then
30072: LD_VAR 0 1
30076: NOT
30077: PUSH
30078: LD_VAR 0 2
30082: NOT
30083: OR
30084: IFFALSE 30088
// exit ;
30086: GO 31114
// case weapon of us_machine_gun :
30088: LD_VAR 0 2
30092: PUSH
30093: LD_INT 2
30095: DOUBLE
30096: EQUAL
30097: IFTRUE 30101
30099: GO 30131
30101: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30102: LD_ADDR_VAR 0 3
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: LD_INT 2
30112: PUSH
30113: LD_INT 3
30115: PUSH
30116: LD_INT 4
30118: PUSH
30119: LD_INT 5
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: ST_TO_ADDR
30129: GO 31098
30131: LD_INT 3
30133: DOUBLE
30134: EQUAL
30135: IFTRUE 30139
30137: GO 30169
30139: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30140: LD_ADDR_VAR 0 3
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: LD_INT 2
30150: PUSH
30151: LD_INT 3
30153: PUSH
30154: LD_INT 4
30156: PUSH
30157: LD_INT 5
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: ST_TO_ADDR
30167: GO 31098
30169: LD_INT 11
30171: DOUBLE
30172: EQUAL
30173: IFTRUE 30177
30175: GO 30207
30177: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30178: LD_ADDR_VAR 0 3
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: LD_INT 2
30188: PUSH
30189: LD_INT 3
30191: PUSH
30192: LD_INT 4
30194: PUSH
30195: LD_INT 5
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: ST_TO_ADDR
30205: GO 31098
30207: LD_INT 4
30209: DOUBLE
30210: EQUAL
30211: IFTRUE 30215
30213: GO 30241
30215: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30216: LD_ADDR_VAR 0 3
30220: PUSH
30221: LD_INT 2
30223: PUSH
30224: LD_INT 3
30226: PUSH
30227: LD_INT 4
30229: PUSH
30230: LD_INT 5
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: ST_TO_ADDR
30239: GO 31098
30241: LD_INT 5
30243: DOUBLE
30244: EQUAL
30245: IFTRUE 30249
30247: GO 30275
30249: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30250: LD_ADDR_VAR 0 3
30254: PUSH
30255: LD_INT 2
30257: PUSH
30258: LD_INT 3
30260: PUSH
30261: LD_INT 4
30263: PUSH
30264: LD_INT 5
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: ST_TO_ADDR
30273: GO 31098
30275: LD_INT 9
30277: DOUBLE
30278: EQUAL
30279: IFTRUE 30283
30281: GO 30309
30283: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30284: LD_ADDR_VAR 0 3
30288: PUSH
30289: LD_INT 2
30291: PUSH
30292: LD_INT 3
30294: PUSH
30295: LD_INT 4
30297: PUSH
30298: LD_INT 5
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: ST_TO_ADDR
30307: GO 31098
30309: LD_INT 7
30311: DOUBLE
30312: EQUAL
30313: IFTRUE 30317
30315: GO 30343
30317: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30318: LD_ADDR_VAR 0 3
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: LD_INT 3
30328: PUSH
30329: LD_INT 4
30331: PUSH
30332: LD_INT 5
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: ST_TO_ADDR
30341: GO 31098
30343: LD_INT 12
30345: DOUBLE
30346: EQUAL
30347: IFTRUE 30351
30349: GO 30377
30351: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30352: LD_ADDR_VAR 0 3
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: LD_INT 3
30362: PUSH
30363: LD_INT 4
30365: PUSH
30366: LD_INT 5
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: ST_TO_ADDR
30375: GO 31098
30377: LD_INT 13
30379: DOUBLE
30380: EQUAL
30381: IFTRUE 30385
30383: GO 30411
30385: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30386: LD_ADDR_VAR 0 3
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: LD_INT 3
30396: PUSH
30397: LD_INT 4
30399: PUSH
30400: LD_INT 5
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: ST_TO_ADDR
30409: GO 31098
30411: LD_INT 14
30413: DOUBLE
30414: EQUAL
30415: IFTRUE 30419
30417: GO 30437
30419: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30420: LD_ADDR_VAR 0 3
30424: PUSH
30425: LD_INT 4
30427: PUSH
30428: LD_INT 5
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: ST_TO_ADDR
30435: GO 31098
30437: LD_INT 6
30439: DOUBLE
30440: EQUAL
30441: IFTRUE 30445
30443: GO 30463
30445: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30446: LD_ADDR_VAR 0 3
30450: PUSH
30451: LD_INT 4
30453: PUSH
30454: LD_INT 5
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: ST_TO_ADDR
30461: GO 31098
30463: LD_INT 10
30465: DOUBLE
30466: EQUAL
30467: IFTRUE 30471
30469: GO 30489
30471: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30472: LD_ADDR_VAR 0 3
30476: PUSH
30477: LD_INT 4
30479: PUSH
30480: LD_INT 5
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: ST_TO_ADDR
30487: GO 31098
30489: LD_INT 22
30491: DOUBLE
30492: EQUAL
30493: IFTRUE 30497
30495: GO 30523
30497: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30498: LD_ADDR_VAR 0 3
30502: PUSH
30503: LD_INT 11
30505: PUSH
30506: LD_INT 12
30508: PUSH
30509: LD_INT 13
30511: PUSH
30512: LD_INT 14
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: ST_TO_ADDR
30521: GO 31098
30523: LD_INT 23
30525: DOUBLE
30526: EQUAL
30527: IFTRUE 30531
30529: GO 30557
30531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30532: LD_ADDR_VAR 0 3
30536: PUSH
30537: LD_INT 11
30539: PUSH
30540: LD_INT 12
30542: PUSH
30543: LD_INT 13
30545: PUSH
30546: LD_INT 14
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: ST_TO_ADDR
30555: GO 31098
30557: LD_INT 24
30559: DOUBLE
30560: EQUAL
30561: IFTRUE 30565
30563: GO 30591
30565: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30566: LD_ADDR_VAR 0 3
30570: PUSH
30571: LD_INT 11
30573: PUSH
30574: LD_INT 12
30576: PUSH
30577: LD_INT 13
30579: PUSH
30580: LD_INT 14
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: ST_TO_ADDR
30589: GO 31098
30591: LD_INT 30
30593: DOUBLE
30594: EQUAL
30595: IFTRUE 30599
30597: GO 30625
30599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30600: LD_ADDR_VAR 0 3
30604: PUSH
30605: LD_INT 11
30607: PUSH
30608: LD_INT 12
30610: PUSH
30611: LD_INT 13
30613: PUSH
30614: LD_INT 14
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: ST_TO_ADDR
30623: GO 31098
30625: LD_INT 25
30627: DOUBLE
30628: EQUAL
30629: IFTRUE 30633
30631: GO 30651
30633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30634: LD_ADDR_VAR 0 3
30638: PUSH
30639: LD_INT 13
30641: PUSH
30642: LD_INT 14
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: ST_TO_ADDR
30649: GO 31098
30651: LD_INT 27
30653: DOUBLE
30654: EQUAL
30655: IFTRUE 30659
30657: GO 30677
30659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30660: LD_ADDR_VAR 0 3
30664: PUSH
30665: LD_INT 13
30667: PUSH
30668: LD_INT 14
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: ST_TO_ADDR
30675: GO 31098
30677: LD_INT 28
30679: DOUBLE
30680: EQUAL
30681: IFTRUE 30685
30683: GO 30703
30685: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30686: LD_ADDR_VAR 0 3
30690: PUSH
30691: LD_INT 13
30693: PUSH
30694: LD_INT 14
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: ST_TO_ADDR
30701: GO 31098
30703: LD_INT 29
30705: DOUBLE
30706: EQUAL
30707: IFTRUE 30711
30709: GO 30729
30711: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30712: LD_ADDR_VAR 0 3
30716: PUSH
30717: LD_INT 13
30719: PUSH
30720: LD_INT 14
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: ST_TO_ADDR
30727: GO 31098
30729: LD_INT 31
30731: DOUBLE
30732: EQUAL
30733: IFTRUE 30737
30735: GO 30755
30737: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30738: LD_ADDR_VAR 0 3
30742: PUSH
30743: LD_INT 13
30745: PUSH
30746: LD_INT 14
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: ST_TO_ADDR
30753: GO 31098
30755: LD_INT 26
30757: DOUBLE
30758: EQUAL
30759: IFTRUE 30763
30761: GO 30781
30763: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30764: LD_ADDR_VAR 0 3
30768: PUSH
30769: LD_INT 13
30771: PUSH
30772: LD_INT 14
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: ST_TO_ADDR
30779: GO 31098
30781: LD_INT 42
30783: DOUBLE
30784: EQUAL
30785: IFTRUE 30789
30787: GO 30815
30789: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30790: LD_ADDR_VAR 0 3
30794: PUSH
30795: LD_INT 21
30797: PUSH
30798: LD_INT 22
30800: PUSH
30801: LD_INT 23
30803: PUSH
30804: LD_INT 24
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: ST_TO_ADDR
30813: GO 31098
30815: LD_INT 43
30817: DOUBLE
30818: EQUAL
30819: IFTRUE 30823
30821: GO 30849
30823: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30824: LD_ADDR_VAR 0 3
30828: PUSH
30829: LD_INT 21
30831: PUSH
30832: LD_INT 22
30834: PUSH
30835: LD_INT 23
30837: PUSH
30838: LD_INT 24
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: ST_TO_ADDR
30847: GO 31098
30849: LD_INT 44
30851: DOUBLE
30852: EQUAL
30853: IFTRUE 30857
30855: GO 30883
30857: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30858: LD_ADDR_VAR 0 3
30862: PUSH
30863: LD_INT 21
30865: PUSH
30866: LD_INT 22
30868: PUSH
30869: LD_INT 23
30871: PUSH
30872: LD_INT 24
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: ST_TO_ADDR
30881: GO 31098
30883: LD_INT 45
30885: DOUBLE
30886: EQUAL
30887: IFTRUE 30891
30889: GO 30917
30891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30892: LD_ADDR_VAR 0 3
30896: PUSH
30897: LD_INT 21
30899: PUSH
30900: LD_INT 22
30902: PUSH
30903: LD_INT 23
30905: PUSH
30906: LD_INT 24
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: ST_TO_ADDR
30915: GO 31098
30917: LD_INT 49
30919: DOUBLE
30920: EQUAL
30921: IFTRUE 30925
30923: GO 30951
30925: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30926: LD_ADDR_VAR 0 3
30930: PUSH
30931: LD_INT 21
30933: PUSH
30934: LD_INT 22
30936: PUSH
30937: LD_INT 23
30939: PUSH
30940: LD_INT 24
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: ST_TO_ADDR
30949: GO 31098
30951: LD_INT 51
30953: DOUBLE
30954: EQUAL
30955: IFTRUE 30959
30957: GO 30985
30959: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30960: LD_ADDR_VAR 0 3
30964: PUSH
30965: LD_INT 21
30967: PUSH
30968: LD_INT 22
30970: PUSH
30971: LD_INT 23
30973: PUSH
30974: LD_INT 24
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: ST_TO_ADDR
30983: GO 31098
30985: LD_INT 52
30987: DOUBLE
30988: EQUAL
30989: IFTRUE 30993
30991: GO 31019
30993: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30994: LD_ADDR_VAR 0 3
30998: PUSH
30999: LD_INT 21
31001: PUSH
31002: LD_INT 22
31004: PUSH
31005: LD_INT 23
31007: PUSH
31008: LD_INT 24
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: ST_TO_ADDR
31017: GO 31098
31019: LD_INT 53
31021: DOUBLE
31022: EQUAL
31023: IFTRUE 31027
31025: GO 31045
31027: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31028: LD_ADDR_VAR 0 3
31032: PUSH
31033: LD_INT 23
31035: PUSH
31036: LD_INT 24
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: ST_TO_ADDR
31043: GO 31098
31045: LD_INT 46
31047: DOUBLE
31048: EQUAL
31049: IFTRUE 31053
31051: GO 31071
31053: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31054: LD_ADDR_VAR 0 3
31058: PUSH
31059: LD_INT 23
31061: PUSH
31062: LD_INT 24
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: ST_TO_ADDR
31069: GO 31098
31071: LD_INT 47
31073: DOUBLE
31074: EQUAL
31075: IFTRUE 31079
31077: GO 31097
31079: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31080: LD_ADDR_VAR 0 3
31084: PUSH
31085: LD_INT 23
31087: PUSH
31088: LD_INT 24
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: ST_TO_ADDR
31095: GO 31098
31097: POP
// result := ( chassis in result ) ;
31098: LD_ADDR_VAR 0 3
31102: PUSH
31103: LD_VAR 0 1
31107: PUSH
31108: LD_VAR 0 3
31112: IN
31113: ST_TO_ADDR
// end ;
31114: LD_VAR 0 3
31118: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31119: LD_INT 0
31121: PPUSH
31122: PPUSH
31123: PPUSH
31124: PPUSH
31125: PPUSH
31126: PPUSH
31127: PPUSH
// result := array ;
31128: LD_ADDR_VAR 0 5
31132: PUSH
31133: LD_VAR 0 1
31137: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31138: LD_VAR 0 1
31142: NOT
31143: PUSH
31144: LD_VAR 0 2
31148: NOT
31149: OR
31150: PUSH
31151: LD_VAR 0 3
31155: NOT
31156: OR
31157: PUSH
31158: LD_VAR 0 2
31162: PUSH
31163: LD_VAR 0 1
31167: GREATER
31168: OR
31169: PUSH
31170: LD_VAR 0 3
31174: PUSH
31175: LD_VAR 0 1
31179: GREATER
31180: OR
31181: IFFALSE 31185
// exit ;
31183: GO 31481
// if direction then
31185: LD_VAR 0 4
31189: IFFALSE 31253
// begin d := 1 ;
31191: LD_ADDR_VAR 0 9
31195: PUSH
31196: LD_INT 1
31198: ST_TO_ADDR
// if i_from > i_to then
31199: LD_VAR 0 2
31203: PUSH
31204: LD_VAR 0 3
31208: GREATER
31209: IFFALSE 31235
// length := ( array - i_from ) + i_to else
31211: LD_ADDR_VAR 0 11
31215: PUSH
31216: LD_VAR 0 1
31220: PUSH
31221: LD_VAR 0 2
31225: MINUS
31226: PUSH
31227: LD_VAR 0 3
31231: PLUS
31232: ST_TO_ADDR
31233: GO 31251
// length := i_to - i_from ;
31235: LD_ADDR_VAR 0 11
31239: PUSH
31240: LD_VAR 0 3
31244: PUSH
31245: LD_VAR 0 2
31249: MINUS
31250: ST_TO_ADDR
// end else
31251: GO 31314
// begin d := - 1 ;
31253: LD_ADDR_VAR 0 9
31257: PUSH
31258: LD_INT 1
31260: NEG
31261: ST_TO_ADDR
// if i_from > i_to then
31262: LD_VAR 0 2
31266: PUSH
31267: LD_VAR 0 3
31271: GREATER
31272: IFFALSE 31292
// length := i_from - i_to else
31274: LD_ADDR_VAR 0 11
31278: PUSH
31279: LD_VAR 0 2
31283: PUSH
31284: LD_VAR 0 3
31288: MINUS
31289: ST_TO_ADDR
31290: GO 31314
// length := ( array - i_to ) + i_from ;
31292: LD_ADDR_VAR 0 11
31296: PUSH
31297: LD_VAR 0 1
31301: PUSH
31302: LD_VAR 0 3
31306: MINUS
31307: PUSH
31308: LD_VAR 0 2
31312: PLUS
31313: ST_TO_ADDR
// end ; if not length then
31314: LD_VAR 0 11
31318: NOT
31319: IFFALSE 31323
// exit ;
31321: GO 31481
// tmp := array ;
31323: LD_ADDR_VAR 0 10
31327: PUSH
31328: LD_VAR 0 1
31332: ST_TO_ADDR
// for i = 1 to length do
31333: LD_ADDR_VAR 0 6
31337: PUSH
31338: DOUBLE
31339: LD_INT 1
31341: DEC
31342: ST_TO_ADDR
31343: LD_VAR 0 11
31347: PUSH
31348: FOR_TO
31349: IFFALSE 31469
// begin for j = 1 to array do
31351: LD_ADDR_VAR 0 7
31355: PUSH
31356: DOUBLE
31357: LD_INT 1
31359: DEC
31360: ST_TO_ADDR
31361: LD_VAR 0 1
31365: PUSH
31366: FOR_TO
31367: IFFALSE 31455
// begin k := j + d ;
31369: LD_ADDR_VAR 0 8
31373: PUSH
31374: LD_VAR 0 7
31378: PUSH
31379: LD_VAR 0 9
31383: PLUS
31384: ST_TO_ADDR
// if k > array then
31385: LD_VAR 0 8
31389: PUSH
31390: LD_VAR 0 1
31394: GREATER
31395: IFFALSE 31405
// k := 1 ;
31397: LD_ADDR_VAR 0 8
31401: PUSH
31402: LD_INT 1
31404: ST_TO_ADDR
// if not k then
31405: LD_VAR 0 8
31409: NOT
31410: IFFALSE 31422
// k := array ;
31412: LD_ADDR_VAR 0 8
31416: PUSH
31417: LD_VAR 0 1
31421: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31422: LD_ADDR_VAR 0 10
31426: PUSH
31427: LD_VAR 0 10
31431: PPUSH
31432: LD_VAR 0 8
31436: PPUSH
31437: LD_VAR 0 1
31441: PUSH
31442: LD_VAR 0 7
31446: ARRAY
31447: PPUSH
31448: CALL_OW 1
31452: ST_TO_ADDR
// end ;
31453: GO 31366
31455: POP
31456: POP
// array := tmp ;
31457: LD_ADDR_VAR 0 1
31461: PUSH
31462: LD_VAR 0 10
31466: ST_TO_ADDR
// end ;
31467: GO 31348
31469: POP
31470: POP
// result := array ;
31471: LD_ADDR_VAR 0 5
31475: PUSH
31476: LD_VAR 0 1
31480: ST_TO_ADDR
// end ;
31481: LD_VAR 0 5
31485: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31486: LD_INT 0
31488: PPUSH
31489: PPUSH
// result := 0 ;
31490: LD_ADDR_VAR 0 3
31494: PUSH
31495: LD_INT 0
31497: ST_TO_ADDR
// if not array or not value in array then
31498: LD_VAR 0 1
31502: NOT
31503: PUSH
31504: LD_VAR 0 2
31508: PUSH
31509: LD_VAR 0 1
31513: IN
31514: NOT
31515: OR
31516: IFFALSE 31520
// exit ;
31518: GO 31574
// for i = 1 to array do
31520: LD_ADDR_VAR 0 4
31524: PUSH
31525: DOUBLE
31526: LD_INT 1
31528: DEC
31529: ST_TO_ADDR
31530: LD_VAR 0 1
31534: PUSH
31535: FOR_TO
31536: IFFALSE 31572
// if value = array [ i ] then
31538: LD_VAR 0 2
31542: PUSH
31543: LD_VAR 0 1
31547: PUSH
31548: LD_VAR 0 4
31552: ARRAY
31553: EQUAL
31554: IFFALSE 31570
// begin result := i ;
31556: LD_ADDR_VAR 0 3
31560: PUSH
31561: LD_VAR 0 4
31565: ST_TO_ADDR
// exit ;
31566: POP
31567: POP
31568: GO 31574
// end ;
31570: GO 31535
31572: POP
31573: POP
// end ;
31574: LD_VAR 0 3
31578: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31579: LD_INT 0
31581: PPUSH
// vc_chassis := chassis ;
31582: LD_ADDR_OWVAR 37
31586: PUSH
31587: LD_VAR 0 1
31591: ST_TO_ADDR
// vc_engine := engine ;
31592: LD_ADDR_OWVAR 39
31596: PUSH
31597: LD_VAR 0 2
31601: ST_TO_ADDR
// vc_control := control ;
31602: LD_ADDR_OWVAR 38
31606: PUSH
31607: LD_VAR 0 3
31611: ST_TO_ADDR
// vc_weapon := weapon ;
31612: LD_ADDR_OWVAR 40
31616: PUSH
31617: LD_VAR 0 4
31621: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31622: LD_ADDR_OWVAR 41
31626: PUSH
31627: LD_VAR 0 5
31631: ST_TO_ADDR
// end ;
31632: LD_VAR 0 6
31636: RET
// export function WantPlant ( unit ) ; var task ; begin
31637: LD_INT 0
31639: PPUSH
31640: PPUSH
// result := false ;
31641: LD_ADDR_VAR 0 2
31645: PUSH
31646: LD_INT 0
31648: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31649: LD_ADDR_VAR 0 3
31653: PUSH
31654: LD_VAR 0 1
31658: PPUSH
31659: CALL_OW 437
31663: ST_TO_ADDR
// if task then
31664: LD_VAR 0 3
31668: IFFALSE 31696
// if task [ 1 ] [ 1 ] = p then
31670: LD_VAR 0 3
31674: PUSH
31675: LD_INT 1
31677: ARRAY
31678: PUSH
31679: LD_INT 1
31681: ARRAY
31682: PUSH
31683: LD_STRING p
31685: EQUAL
31686: IFFALSE 31696
// result := true ;
31688: LD_ADDR_VAR 0 2
31692: PUSH
31693: LD_INT 1
31695: ST_TO_ADDR
// end ;
31696: LD_VAR 0 2
31700: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31701: LD_INT 0
31703: PPUSH
31704: PPUSH
31705: PPUSH
31706: PPUSH
// if pos < 1 then
31707: LD_VAR 0 2
31711: PUSH
31712: LD_INT 1
31714: LESS
31715: IFFALSE 31719
// exit ;
31717: GO 32022
// if pos = 1 then
31719: LD_VAR 0 2
31723: PUSH
31724: LD_INT 1
31726: EQUAL
31727: IFFALSE 31760
// result := Replace ( arr , pos [ 1 ] , value ) else
31729: LD_ADDR_VAR 0 4
31733: PUSH
31734: LD_VAR 0 1
31738: PPUSH
31739: LD_VAR 0 2
31743: PUSH
31744: LD_INT 1
31746: ARRAY
31747: PPUSH
31748: LD_VAR 0 3
31752: PPUSH
31753: CALL_OW 1
31757: ST_TO_ADDR
31758: GO 32022
// begin tmp := arr ;
31760: LD_ADDR_VAR 0 6
31764: PUSH
31765: LD_VAR 0 1
31769: ST_TO_ADDR
// s_arr := [ tmp ] ;
31770: LD_ADDR_VAR 0 7
31774: PUSH
31775: LD_VAR 0 6
31779: PUSH
31780: EMPTY
31781: LIST
31782: ST_TO_ADDR
// for i = 1 to pos - 1 do
31783: LD_ADDR_VAR 0 5
31787: PUSH
31788: DOUBLE
31789: LD_INT 1
31791: DEC
31792: ST_TO_ADDR
31793: LD_VAR 0 2
31797: PUSH
31798: LD_INT 1
31800: MINUS
31801: PUSH
31802: FOR_TO
31803: IFFALSE 31848
// begin tmp := tmp [ pos [ i ] ] ;
31805: LD_ADDR_VAR 0 6
31809: PUSH
31810: LD_VAR 0 6
31814: PUSH
31815: LD_VAR 0 2
31819: PUSH
31820: LD_VAR 0 5
31824: ARRAY
31825: ARRAY
31826: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31827: LD_ADDR_VAR 0 7
31831: PUSH
31832: LD_VAR 0 7
31836: PUSH
31837: LD_VAR 0 6
31841: PUSH
31842: EMPTY
31843: LIST
31844: ADD
31845: ST_TO_ADDR
// end ;
31846: GO 31802
31848: POP
31849: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31850: LD_ADDR_VAR 0 6
31854: PUSH
31855: LD_VAR 0 6
31859: PPUSH
31860: LD_VAR 0 2
31864: PUSH
31865: LD_VAR 0 2
31869: ARRAY
31870: PPUSH
31871: LD_VAR 0 3
31875: PPUSH
31876: CALL_OW 1
31880: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31881: LD_ADDR_VAR 0 7
31885: PUSH
31886: LD_VAR 0 7
31890: PPUSH
31891: LD_VAR 0 7
31895: PPUSH
31896: LD_VAR 0 6
31900: PPUSH
31901: CALL_OW 1
31905: ST_TO_ADDR
// for i = s_arr downto 2 do
31906: LD_ADDR_VAR 0 5
31910: PUSH
31911: DOUBLE
31912: LD_VAR 0 7
31916: INC
31917: ST_TO_ADDR
31918: LD_INT 2
31920: PUSH
31921: FOR_DOWNTO
31922: IFFALSE 32006
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31924: LD_ADDR_VAR 0 6
31928: PUSH
31929: LD_VAR 0 7
31933: PUSH
31934: LD_VAR 0 5
31938: PUSH
31939: LD_INT 1
31941: MINUS
31942: ARRAY
31943: PPUSH
31944: LD_VAR 0 2
31948: PUSH
31949: LD_VAR 0 5
31953: PUSH
31954: LD_INT 1
31956: MINUS
31957: ARRAY
31958: PPUSH
31959: LD_VAR 0 7
31963: PUSH
31964: LD_VAR 0 5
31968: ARRAY
31969: PPUSH
31970: CALL_OW 1
31974: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31975: LD_ADDR_VAR 0 7
31979: PUSH
31980: LD_VAR 0 7
31984: PPUSH
31985: LD_VAR 0 5
31989: PUSH
31990: LD_INT 1
31992: MINUS
31993: PPUSH
31994: LD_VAR 0 6
31998: PPUSH
31999: CALL_OW 1
32003: ST_TO_ADDR
// end ;
32004: GO 31921
32006: POP
32007: POP
// result := s_arr [ 1 ] ;
32008: LD_ADDR_VAR 0 4
32012: PUSH
32013: LD_VAR 0 7
32017: PUSH
32018: LD_INT 1
32020: ARRAY
32021: ST_TO_ADDR
// end ; end ;
32022: LD_VAR 0 4
32026: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32027: LD_INT 0
32029: PPUSH
32030: PPUSH
// if not list then
32031: LD_VAR 0 1
32035: NOT
32036: IFFALSE 32040
// exit ;
32038: GO 32131
// i := list [ pos1 ] ;
32040: LD_ADDR_VAR 0 5
32044: PUSH
32045: LD_VAR 0 1
32049: PUSH
32050: LD_VAR 0 2
32054: ARRAY
32055: ST_TO_ADDR
// if not i then
32056: LD_VAR 0 5
32060: NOT
32061: IFFALSE 32065
// exit ;
32063: GO 32131
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32065: LD_ADDR_VAR 0 1
32069: PUSH
32070: LD_VAR 0 1
32074: PPUSH
32075: LD_VAR 0 2
32079: PPUSH
32080: LD_VAR 0 1
32084: PUSH
32085: LD_VAR 0 3
32089: ARRAY
32090: PPUSH
32091: CALL_OW 1
32095: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32096: LD_ADDR_VAR 0 1
32100: PUSH
32101: LD_VAR 0 1
32105: PPUSH
32106: LD_VAR 0 3
32110: PPUSH
32111: LD_VAR 0 5
32115: PPUSH
32116: CALL_OW 1
32120: ST_TO_ADDR
// result := list ;
32121: LD_ADDR_VAR 0 4
32125: PUSH
32126: LD_VAR 0 1
32130: ST_TO_ADDR
// end ;
32131: LD_VAR 0 4
32135: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32136: LD_INT 0
32138: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32139: LD_ADDR_VAR 0 5
32143: PUSH
32144: LD_VAR 0 1
32148: PPUSH
32149: CALL_OW 250
32153: PPUSH
32154: LD_VAR 0 1
32158: PPUSH
32159: CALL_OW 251
32163: PPUSH
32164: LD_VAR 0 2
32168: PPUSH
32169: LD_VAR 0 3
32173: PPUSH
32174: LD_VAR 0 4
32178: PPUSH
32179: CALL 32189 0 5
32183: ST_TO_ADDR
// end ;
32184: LD_VAR 0 5
32188: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32189: LD_INT 0
32191: PPUSH
32192: PPUSH
32193: PPUSH
32194: PPUSH
// if not list then
32195: LD_VAR 0 3
32199: NOT
32200: IFFALSE 32204
// exit ;
32202: GO 32592
// result := [ ] ;
32204: LD_ADDR_VAR 0 6
32208: PUSH
32209: EMPTY
32210: ST_TO_ADDR
// for i in list do
32211: LD_ADDR_VAR 0 7
32215: PUSH
32216: LD_VAR 0 3
32220: PUSH
32221: FOR_IN
32222: IFFALSE 32424
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32224: LD_ADDR_VAR 0 9
32228: PUSH
32229: LD_VAR 0 7
32233: PPUSH
32234: LD_VAR 0 1
32238: PPUSH
32239: LD_VAR 0 2
32243: PPUSH
32244: CALL_OW 297
32248: ST_TO_ADDR
// if not result then
32249: LD_VAR 0 6
32253: NOT
32254: IFFALSE 32280
// result := [ [ i , tmp ] ] else
32256: LD_ADDR_VAR 0 6
32260: PUSH
32261: LD_VAR 0 7
32265: PUSH
32266: LD_VAR 0 9
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: EMPTY
32276: LIST
32277: ST_TO_ADDR
32278: GO 32422
// begin if result [ result ] [ 2 ] < tmp then
32280: LD_VAR 0 6
32284: PUSH
32285: LD_VAR 0 6
32289: ARRAY
32290: PUSH
32291: LD_INT 2
32293: ARRAY
32294: PUSH
32295: LD_VAR 0 9
32299: LESS
32300: IFFALSE 32342
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32302: LD_ADDR_VAR 0 6
32306: PUSH
32307: LD_VAR 0 6
32311: PPUSH
32312: LD_VAR 0 6
32316: PUSH
32317: LD_INT 1
32319: PLUS
32320: PPUSH
32321: LD_VAR 0 7
32325: PUSH
32326: LD_VAR 0 9
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PPUSH
32335: CALL_OW 2
32339: ST_TO_ADDR
32340: GO 32422
// for j = 1 to result do
32342: LD_ADDR_VAR 0 8
32346: PUSH
32347: DOUBLE
32348: LD_INT 1
32350: DEC
32351: ST_TO_ADDR
32352: LD_VAR 0 6
32356: PUSH
32357: FOR_TO
32358: IFFALSE 32420
// begin if tmp < result [ j ] [ 2 ] then
32360: LD_VAR 0 9
32364: PUSH
32365: LD_VAR 0 6
32369: PUSH
32370: LD_VAR 0 8
32374: ARRAY
32375: PUSH
32376: LD_INT 2
32378: ARRAY
32379: LESS
32380: IFFALSE 32418
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32382: LD_ADDR_VAR 0 6
32386: PUSH
32387: LD_VAR 0 6
32391: PPUSH
32392: LD_VAR 0 8
32396: PPUSH
32397: LD_VAR 0 7
32401: PUSH
32402: LD_VAR 0 9
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PPUSH
32411: CALL_OW 2
32415: ST_TO_ADDR
// break ;
32416: GO 32420
// end ; end ;
32418: GO 32357
32420: POP
32421: POP
// end ; end ;
32422: GO 32221
32424: POP
32425: POP
// if result and not asc then
32426: LD_VAR 0 6
32430: PUSH
32431: LD_VAR 0 4
32435: NOT
32436: AND
32437: IFFALSE 32512
// begin tmp := result ;
32439: LD_ADDR_VAR 0 9
32443: PUSH
32444: LD_VAR 0 6
32448: ST_TO_ADDR
// for i = tmp downto 1 do
32449: LD_ADDR_VAR 0 7
32453: PUSH
32454: DOUBLE
32455: LD_VAR 0 9
32459: INC
32460: ST_TO_ADDR
32461: LD_INT 1
32463: PUSH
32464: FOR_DOWNTO
32465: IFFALSE 32510
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32467: LD_ADDR_VAR 0 6
32471: PUSH
32472: LD_VAR 0 6
32476: PPUSH
32477: LD_VAR 0 9
32481: PUSH
32482: LD_VAR 0 7
32486: MINUS
32487: PUSH
32488: LD_INT 1
32490: PLUS
32491: PPUSH
32492: LD_VAR 0 9
32496: PUSH
32497: LD_VAR 0 7
32501: ARRAY
32502: PPUSH
32503: CALL_OW 1
32507: ST_TO_ADDR
32508: GO 32464
32510: POP
32511: POP
// end ; tmp := [ ] ;
32512: LD_ADDR_VAR 0 9
32516: PUSH
32517: EMPTY
32518: ST_TO_ADDR
// if mode then
32519: LD_VAR 0 5
32523: IFFALSE 32592
// begin for i = 1 to result do
32525: LD_ADDR_VAR 0 7
32529: PUSH
32530: DOUBLE
32531: LD_INT 1
32533: DEC
32534: ST_TO_ADDR
32535: LD_VAR 0 6
32539: PUSH
32540: FOR_TO
32541: IFFALSE 32580
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32543: LD_ADDR_VAR 0 9
32547: PUSH
32548: LD_VAR 0 9
32552: PPUSH
32553: LD_VAR 0 7
32557: PPUSH
32558: LD_VAR 0 6
32562: PUSH
32563: LD_VAR 0 7
32567: ARRAY
32568: PUSH
32569: LD_INT 1
32571: ARRAY
32572: PPUSH
32573: CALL_OW 1
32577: ST_TO_ADDR
32578: GO 32540
32580: POP
32581: POP
// result := tmp ;
32582: LD_ADDR_VAR 0 6
32586: PUSH
32587: LD_VAR 0 9
32591: ST_TO_ADDR
// end ; end ;
32592: LD_VAR 0 6
32596: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32597: LD_INT 0
32599: PPUSH
32600: PPUSH
32601: PPUSH
32602: PPUSH
32603: PPUSH
32604: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32605: LD_ADDR_VAR 0 5
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: LD_INT 0
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: EMPTY
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: ST_TO_ADDR
// if not x or not y then
32627: LD_VAR 0 2
32631: NOT
32632: PUSH
32633: LD_VAR 0 3
32637: NOT
32638: OR
32639: IFFALSE 32643
// exit ;
32641: GO 34289
// if not range then
32643: LD_VAR 0 4
32647: NOT
32648: IFFALSE 32658
// range := 10 ;
32650: LD_ADDR_VAR 0 4
32654: PUSH
32655: LD_INT 10
32657: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32658: LD_ADDR_VAR 0 8
32662: PUSH
32663: LD_INT 81
32665: PUSH
32666: LD_VAR 0 1
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 92
32677: PUSH
32678: LD_VAR 0 2
32682: PUSH
32683: LD_VAR 0 3
32687: PUSH
32688: LD_VAR 0 4
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 3
32701: PUSH
32702: LD_INT 21
32704: PUSH
32705: LD_INT 3
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: LIST
32720: PPUSH
32721: CALL_OW 69
32725: ST_TO_ADDR
// if not tmp then
32726: LD_VAR 0 8
32730: NOT
32731: IFFALSE 32735
// exit ;
32733: GO 34289
// for i in tmp do
32735: LD_ADDR_VAR 0 6
32739: PUSH
32740: LD_VAR 0 8
32744: PUSH
32745: FOR_IN
32746: IFFALSE 34264
// begin points := [ 0 , 0 , 0 ] ;
32748: LD_ADDR_VAR 0 9
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: LD_INT 0
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: LIST
32766: ST_TO_ADDR
// bpoints := 1 ;
32767: LD_ADDR_VAR 0 10
32771: PUSH
32772: LD_INT 1
32774: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32775: LD_VAR 0 6
32779: PPUSH
32780: CALL_OW 247
32784: PUSH
32785: LD_INT 1
32787: DOUBLE
32788: EQUAL
32789: IFTRUE 32793
32791: GO 33371
32793: POP
// begin if GetClass ( i ) = 1 then
32794: LD_VAR 0 6
32798: PPUSH
32799: CALL_OW 257
32803: PUSH
32804: LD_INT 1
32806: EQUAL
32807: IFFALSE 32828
// points := [ 10 , 5 , 3 ] ;
32809: LD_ADDR_VAR 0 9
32813: PUSH
32814: LD_INT 10
32816: PUSH
32817: LD_INT 5
32819: PUSH
32820: LD_INT 3
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: LIST
32827: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32828: LD_VAR 0 6
32832: PPUSH
32833: CALL_OW 257
32837: PUSH
32838: LD_INT 2
32840: PUSH
32841: LD_INT 3
32843: PUSH
32844: LD_INT 4
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: LIST
32851: IN
32852: IFFALSE 32873
// points := [ 3 , 2 , 1 ] ;
32854: LD_ADDR_VAR 0 9
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: LD_INT 2
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32873: LD_VAR 0 6
32877: PPUSH
32878: CALL_OW 257
32882: PUSH
32883: LD_INT 5
32885: EQUAL
32886: IFFALSE 32907
// points := [ 130 , 5 , 2 ] ;
32888: LD_ADDR_VAR 0 9
32892: PUSH
32893: LD_INT 130
32895: PUSH
32896: LD_INT 5
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: LIST
32906: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32907: LD_VAR 0 6
32911: PPUSH
32912: CALL_OW 257
32916: PUSH
32917: LD_INT 8
32919: EQUAL
32920: IFFALSE 32941
// points := [ 35 , 35 , 30 ] ;
32922: LD_ADDR_VAR 0 9
32926: PUSH
32927: LD_INT 35
32929: PUSH
32930: LD_INT 35
32932: PUSH
32933: LD_INT 30
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: LIST
32940: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32941: LD_VAR 0 6
32945: PPUSH
32946: CALL_OW 257
32950: PUSH
32951: LD_INT 9
32953: EQUAL
32954: IFFALSE 32975
// points := [ 20 , 55 , 40 ] ;
32956: LD_ADDR_VAR 0 9
32960: PUSH
32961: LD_INT 20
32963: PUSH
32964: LD_INT 55
32966: PUSH
32967: LD_INT 40
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: LIST
32974: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32975: LD_VAR 0 6
32979: PPUSH
32980: CALL_OW 257
32984: PUSH
32985: LD_INT 12
32987: PUSH
32988: LD_INT 16
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: IN
32995: IFFALSE 33016
// points := [ 5 , 3 , 2 ] ;
32997: LD_ADDR_VAR 0 9
33001: PUSH
33002: LD_INT 5
33004: PUSH
33005: LD_INT 3
33007: PUSH
33008: LD_INT 2
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: LIST
33015: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33016: LD_VAR 0 6
33020: PPUSH
33021: CALL_OW 257
33025: PUSH
33026: LD_INT 17
33028: EQUAL
33029: IFFALSE 33050
// points := [ 100 , 50 , 75 ] ;
33031: LD_ADDR_VAR 0 9
33035: PUSH
33036: LD_INT 100
33038: PUSH
33039: LD_INT 50
33041: PUSH
33042: LD_INT 75
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33050: LD_VAR 0 6
33054: PPUSH
33055: CALL_OW 257
33059: PUSH
33060: LD_INT 15
33062: EQUAL
33063: IFFALSE 33084
// points := [ 10 , 5 , 3 ] ;
33065: LD_ADDR_VAR 0 9
33069: PUSH
33070: LD_INT 10
33072: PUSH
33073: LD_INT 5
33075: PUSH
33076: LD_INT 3
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: LIST
33083: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33084: LD_VAR 0 6
33088: PPUSH
33089: CALL_OW 257
33093: PUSH
33094: LD_INT 14
33096: EQUAL
33097: IFFALSE 33118
// points := [ 10 , 0 , 0 ] ;
33099: LD_ADDR_VAR 0 9
33103: PUSH
33104: LD_INT 10
33106: PUSH
33107: LD_INT 0
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: LIST
33117: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33118: LD_VAR 0 6
33122: PPUSH
33123: CALL_OW 257
33127: PUSH
33128: LD_INT 11
33130: EQUAL
33131: IFFALSE 33152
// points := [ 30 , 10 , 5 ] ;
33133: LD_ADDR_VAR 0 9
33137: PUSH
33138: LD_INT 30
33140: PUSH
33141: LD_INT 10
33143: PUSH
33144: LD_INT 5
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: LIST
33151: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33152: LD_VAR 0 1
33156: PPUSH
33157: LD_INT 5
33159: PPUSH
33160: CALL_OW 321
33164: PUSH
33165: LD_INT 2
33167: EQUAL
33168: IFFALSE 33185
// bpoints := bpoints * 1.8 ;
33170: LD_ADDR_VAR 0 10
33174: PUSH
33175: LD_VAR 0 10
33179: PUSH
33180: LD_REAL  1.80000000000000E+0000
33183: MUL
33184: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33185: LD_VAR 0 6
33189: PPUSH
33190: CALL_OW 257
33194: PUSH
33195: LD_INT 1
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: LD_INT 3
33203: PUSH
33204: LD_INT 4
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: IN
33213: PUSH
33214: LD_VAR 0 1
33218: PPUSH
33219: LD_INT 51
33221: PPUSH
33222: CALL_OW 321
33226: PUSH
33227: LD_INT 2
33229: EQUAL
33230: AND
33231: IFFALSE 33248
// bpoints := bpoints * 1.2 ;
33233: LD_ADDR_VAR 0 10
33237: PUSH
33238: LD_VAR 0 10
33242: PUSH
33243: LD_REAL  1.20000000000000E+0000
33246: MUL
33247: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33248: LD_VAR 0 6
33252: PPUSH
33253: CALL_OW 257
33257: PUSH
33258: LD_INT 5
33260: PUSH
33261: LD_INT 7
33263: PUSH
33264: LD_INT 9
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: LIST
33271: IN
33272: PUSH
33273: LD_VAR 0 1
33277: PPUSH
33278: LD_INT 52
33280: PPUSH
33281: CALL_OW 321
33285: PUSH
33286: LD_INT 2
33288: EQUAL
33289: AND
33290: IFFALSE 33307
// bpoints := bpoints * 1.5 ;
33292: LD_ADDR_VAR 0 10
33296: PUSH
33297: LD_VAR 0 10
33301: PUSH
33302: LD_REAL  1.50000000000000E+0000
33305: MUL
33306: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33307: LD_VAR 0 1
33311: PPUSH
33312: LD_INT 66
33314: PPUSH
33315: CALL_OW 321
33319: PUSH
33320: LD_INT 2
33322: EQUAL
33323: IFFALSE 33340
// bpoints := bpoints * 1.1 ;
33325: LD_ADDR_VAR 0 10
33329: PUSH
33330: LD_VAR 0 10
33334: PUSH
33335: LD_REAL  1.10000000000000E+0000
33338: MUL
33339: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33340: LD_ADDR_VAR 0 10
33344: PUSH
33345: LD_VAR 0 10
33349: PUSH
33350: LD_VAR 0 6
33354: PPUSH
33355: LD_INT 1
33357: PPUSH
33358: CALL_OW 259
33362: PUSH
33363: LD_REAL  1.15000000000000E+0000
33366: MUL
33367: MUL
33368: ST_TO_ADDR
// end ; unit_vehicle :
33369: GO 34193
33371: LD_INT 2
33373: DOUBLE
33374: EQUAL
33375: IFTRUE 33379
33377: GO 34181
33379: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33380: LD_VAR 0 6
33384: PPUSH
33385: CALL_OW 264
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: LD_INT 42
33395: PUSH
33396: LD_INT 24
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: LIST
33403: IN
33404: IFFALSE 33425
// points := [ 25 , 5 , 3 ] ;
33406: LD_ADDR_VAR 0 9
33410: PUSH
33411: LD_INT 25
33413: PUSH
33414: LD_INT 5
33416: PUSH
33417: LD_INT 3
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: LIST
33424: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33425: LD_VAR 0 6
33429: PPUSH
33430: CALL_OW 264
33434: PUSH
33435: LD_INT 4
33437: PUSH
33438: LD_INT 43
33440: PUSH
33441: LD_INT 25
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: IN
33449: IFFALSE 33470
// points := [ 40 , 15 , 5 ] ;
33451: LD_ADDR_VAR 0 9
33455: PUSH
33456: LD_INT 40
33458: PUSH
33459: LD_INT 15
33461: PUSH
33462: LD_INT 5
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: LIST
33469: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33470: LD_VAR 0 6
33474: PPUSH
33475: CALL_OW 264
33479: PUSH
33480: LD_INT 3
33482: PUSH
33483: LD_INT 23
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: IN
33490: IFFALSE 33511
// points := [ 7 , 25 , 8 ] ;
33492: LD_ADDR_VAR 0 9
33496: PUSH
33497: LD_INT 7
33499: PUSH
33500: LD_INT 25
33502: PUSH
33503: LD_INT 8
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: LIST
33510: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33511: LD_VAR 0 6
33515: PPUSH
33516: CALL_OW 264
33520: PUSH
33521: LD_INT 5
33523: PUSH
33524: LD_INT 27
33526: PUSH
33527: LD_INT 44
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: LIST
33534: IN
33535: IFFALSE 33556
// points := [ 14 , 50 , 16 ] ;
33537: LD_ADDR_VAR 0 9
33541: PUSH
33542: LD_INT 14
33544: PUSH
33545: LD_INT 50
33547: PUSH
33548: LD_INT 16
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: LIST
33555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33556: LD_VAR 0 6
33560: PPUSH
33561: CALL_OW 264
33565: PUSH
33566: LD_INT 6
33568: PUSH
33569: LD_INT 46
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: IN
33576: IFFALSE 33597
// points := [ 32 , 120 , 70 ] ;
33578: LD_ADDR_VAR 0 9
33582: PUSH
33583: LD_INT 32
33585: PUSH
33586: LD_INT 120
33588: PUSH
33589: LD_INT 70
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: LIST
33596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
33597: LD_VAR 0 6
33601: PPUSH
33602: CALL_OW 264
33606: PUSH
33607: LD_INT 7
33609: PUSH
33610: LD_INT 28
33612: PUSH
33613: LD_INT 45
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: LIST
33620: IN
33621: IFFALSE 33642
// points := [ 35 , 20 , 45 ] ;
33623: LD_ADDR_VAR 0 9
33627: PUSH
33628: LD_INT 35
33630: PUSH
33631: LD_INT 20
33633: PUSH
33634: LD_INT 45
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: LIST
33641: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33642: LD_VAR 0 6
33646: PPUSH
33647: CALL_OW 264
33651: PUSH
33652: LD_INT 47
33654: PUSH
33655: EMPTY
33656: LIST
33657: IN
33658: IFFALSE 33679
// points := [ 67 , 45 , 75 ] ;
33660: LD_ADDR_VAR 0 9
33664: PUSH
33665: LD_INT 67
33667: PUSH
33668: LD_INT 45
33670: PUSH
33671: LD_INT 75
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: LIST
33678: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33679: LD_VAR 0 6
33683: PPUSH
33684: CALL_OW 264
33688: PUSH
33689: LD_INT 26
33691: PUSH
33692: EMPTY
33693: LIST
33694: IN
33695: IFFALSE 33716
// points := [ 120 , 30 , 80 ] ;
33697: LD_ADDR_VAR 0 9
33701: PUSH
33702: LD_INT 120
33704: PUSH
33705: LD_INT 30
33707: PUSH
33708: LD_INT 80
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: LIST
33715: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33716: LD_VAR 0 6
33720: PPUSH
33721: CALL_OW 264
33725: PUSH
33726: LD_INT 22
33728: PUSH
33729: EMPTY
33730: LIST
33731: IN
33732: IFFALSE 33753
// points := [ 40 , 1 , 1 ] ;
33734: LD_ADDR_VAR 0 9
33738: PUSH
33739: LD_INT 40
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: LIST
33752: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33753: LD_VAR 0 6
33757: PPUSH
33758: CALL_OW 264
33762: PUSH
33763: LD_INT 29
33765: PUSH
33766: EMPTY
33767: LIST
33768: IN
33769: IFFALSE 33790
// points := [ 70 , 200 , 400 ] ;
33771: LD_ADDR_VAR 0 9
33775: PUSH
33776: LD_INT 70
33778: PUSH
33779: LD_INT 200
33781: PUSH
33782: LD_INT 400
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: LIST
33789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33790: LD_VAR 0 6
33794: PPUSH
33795: CALL_OW 264
33799: PUSH
33800: LD_INT 14
33802: PUSH
33803: LD_INT 53
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: IN
33810: IFFALSE 33831
// points := [ 40 , 10 , 20 ] ;
33812: LD_ADDR_VAR 0 9
33816: PUSH
33817: LD_INT 40
33819: PUSH
33820: LD_INT 10
33822: PUSH
33823: LD_INT 20
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33831: LD_VAR 0 6
33835: PPUSH
33836: CALL_OW 264
33840: PUSH
33841: LD_INT 9
33843: PUSH
33844: EMPTY
33845: LIST
33846: IN
33847: IFFALSE 33868
// points := [ 5 , 70 , 20 ] ;
33849: LD_ADDR_VAR 0 9
33853: PUSH
33854: LD_INT 5
33856: PUSH
33857: LD_INT 70
33859: PUSH
33860: LD_INT 20
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: LIST
33867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33868: LD_VAR 0 6
33872: PPUSH
33873: CALL_OW 264
33877: PUSH
33878: LD_INT 10
33880: PUSH
33881: EMPTY
33882: LIST
33883: IN
33884: IFFALSE 33905
// points := [ 35 , 110 , 70 ] ;
33886: LD_ADDR_VAR 0 9
33890: PUSH
33891: LD_INT 35
33893: PUSH
33894: LD_INT 110
33896: PUSH
33897: LD_INT 70
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: LIST
33904: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33905: LD_VAR 0 6
33909: PPUSH
33910: CALL_OW 265
33914: PUSH
33915: LD_INT 25
33917: EQUAL
33918: IFFALSE 33939
// points := [ 80 , 65 , 100 ] ;
33920: LD_ADDR_VAR 0 9
33924: PUSH
33925: LD_INT 80
33927: PUSH
33928: LD_INT 65
33930: PUSH
33931: LD_INT 100
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: LIST
33938: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33939: LD_VAR 0 6
33943: PPUSH
33944: CALL_OW 263
33948: PUSH
33949: LD_INT 1
33951: EQUAL
33952: IFFALSE 33987
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33954: LD_ADDR_VAR 0 10
33958: PUSH
33959: LD_VAR 0 10
33963: PUSH
33964: LD_VAR 0 6
33968: PPUSH
33969: CALL_OW 311
33973: PPUSH
33974: LD_INT 3
33976: PPUSH
33977: CALL_OW 259
33981: PUSH
33982: LD_INT 4
33984: MUL
33985: MUL
33986: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33987: LD_VAR 0 6
33991: PPUSH
33992: CALL_OW 263
33996: PUSH
33997: LD_INT 2
33999: EQUAL
34000: IFFALSE 34051
// begin j := IsControledBy ( i ) ;
34002: LD_ADDR_VAR 0 7
34006: PUSH
34007: LD_VAR 0 6
34011: PPUSH
34012: CALL_OW 312
34016: ST_TO_ADDR
// if j then
34017: LD_VAR 0 7
34021: IFFALSE 34051
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34023: LD_ADDR_VAR 0 10
34027: PUSH
34028: LD_VAR 0 10
34032: PUSH
34033: LD_VAR 0 7
34037: PPUSH
34038: LD_INT 3
34040: PPUSH
34041: CALL_OW 259
34045: PUSH
34046: LD_INT 3
34048: MUL
34049: MUL
34050: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34051: LD_VAR 0 6
34055: PPUSH
34056: CALL_OW 264
34060: PUSH
34061: LD_INT 5
34063: PUSH
34064: LD_INT 6
34066: PUSH
34067: LD_INT 46
34069: PUSH
34070: LD_INT 44
34072: PUSH
34073: LD_INT 47
34075: PUSH
34076: LD_INT 45
34078: PUSH
34079: LD_INT 28
34081: PUSH
34082: LD_INT 7
34084: PUSH
34085: LD_INT 27
34087: PUSH
34088: LD_INT 29
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: IN
34103: PUSH
34104: LD_VAR 0 1
34108: PPUSH
34109: LD_INT 52
34111: PPUSH
34112: CALL_OW 321
34116: PUSH
34117: LD_INT 2
34119: EQUAL
34120: AND
34121: IFFALSE 34138
// bpoints := bpoints * 1.2 ;
34123: LD_ADDR_VAR 0 10
34127: PUSH
34128: LD_VAR 0 10
34132: PUSH
34133: LD_REAL  1.20000000000000E+0000
34136: MUL
34137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34138: LD_VAR 0 6
34142: PPUSH
34143: CALL_OW 264
34147: PUSH
34148: LD_INT 6
34150: PUSH
34151: LD_INT 46
34153: PUSH
34154: LD_INT 47
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: LIST
34161: IN
34162: IFFALSE 34179
// bpoints := bpoints * 1.2 ;
34164: LD_ADDR_VAR 0 10
34168: PUSH
34169: LD_VAR 0 10
34173: PUSH
34174: LD_REAL  1.20000000000000E+0000
34177: MUL
34178: ST_TO_ADDR
// end ; unit_building :
34179: GO 34193
34181: LD_INT 3
34183: DOUBLE
34184: EQUAL
34185: IFTRUE 34189
34187: GO 34192
34189: POP
// ; end ;
34190: GO 34193
34192: POP
// for j = 1 to 3 do
34193: LD_ADDR_VAR 0 7
34197: PUSH
34198: DOUBLE
34199: LD_INT 1
34201: DEC
34202: ST_TO_ADDR
34203: LD_INT 3
34205: PUSH
34206: FOR_TO
34207: IFFALSE 34260
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34209: LD_ADDR_VAR 0 5
34213: PUSH
34214: LD_VAR 0 5
34218: PPUSH
34219: LD_VAR 0 7
34223: PPUSH
34224: LD_VAR 0 5
34228: PUSH
34229: LD_VAR 0 7
34233: ARRAY
34234: PUSH
34235: LD_VAR 0 9
34239: PUSH
34240: LD_VAR 0 7
34244: ARRAY
34245: PUSH
34246: LD_VAR 0 10
34250: MUL
34251: PLUS
34252: PPUSH
34253: CALL_OW 1
34257: ST_TO_ADDR
34258: GO 34206
34260: POP
34261: POP
// end ;
34262: GO 32745
34264: POP
34265: POP
// result := Replace ( result , 4 , tmp ) ;
34266: LD_ADDR_VAR 0 5
34270: PUSH
34271: LD_VAR 0 5
34275: PPUSH
34276: LD_INT 4
34278: PPUSH
34279: LD_VAR 0 8
34283: PPUSH
34284: CALL_OW 1
34288: ST_TO_ADDR
// end ;
34289: LD_VAR 0 5
34293: RET
// export function DangerAtRange ( unit , range ) ; begin
34294: LD_INT 0
34296: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34297: LD_ADDR_VAR 0 3
34301: PUSH
34302: LD_VAR 0 1
34306: PPUSH
34307: CALL_OW 255
34311: PPUSH
34312: LD_VAR 0 1
34316: PPUSH
34317: CALL_OW 250
34321: PPUSH
34322: LD_VAR 0 1
34326: PPUSH
34327: CALL_OW 251
34331: PPUSH
34332: LD_VAR 0 2
34336: PPUSH
34337: CALL 32597 0 4
34341: ST_TO_ADDR
// end ;
34342: LD_VAR 0 3
34346: RET
// export function DangerInArea ( side , area ) ; begin
34347: LD_INT 0
34349: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34350: LD_ADDR_VAR 0 3
34354: PUSH
34355: LD_VAR 0 2
34359: PPUSH
34360: LD_INT 81
34362: PUSH
34363: LD_VAR 0 1
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PPUSH
34372: CALL_OW 70
34376: ST_TO_ADDR
// end ;
34377: LD_VAR 0 3
34381: RET
// export function IsExtension ( b ) ; begin
34382: LD_INT 0
34384: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34385: LD_ADDR_VAR 0 2
34389: PUSH
34390: LD_VAR 0 1
34394: PUSH
34395: LD_INT 23
34397: PUSH
34398: LD_INT 20
34400: PUSH
34401: LD_INT 22
34403: PUSH
34404: LD_INT 17
34406: PUSH
34407: LD_INT 24
34409: PUSH
34410: LD_INT 21
34412: PUSH
34413: LD_INT 19
34415: PUSH
34416: LD_INT 16
34418: PUSH
34419: LD_INT 25
34421: PUSH
34422: LD_INT 18
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: IN
34437: ST_TO_ADDR
// end ;
34438: LD_VAR 0 2
34442: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
34443: LD_INT 0
34445: PPUSH
34446: PPUSH
34447: PPUSH
// result := [ ] ;
34448: LD_ADDR_VAR 0 3
34452: PUSH
34453: EMPTY
34454: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34455: LD_ADDR_VAR 0 4
34459: PUSH
34460: LD_VAR 0 2
34464: PPUSH
34465: LD_INT 21
34467: PUSH
34468: LD_INT 3
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PPUSH
34475: CALL_OW 70
34479: ST_TO_ADDR
// if not tmp then
34480: LD_VAR 0 4
34484: NOT
34485: IFFALSE 34489
// exit ;
34487: GO 34547
// for i in tmp do
34489: LD_ADDR_VAR 0 5
34493: PUSH
34494: LD_VAR 0 4
34498: PUSH
34499: FOR_IN
34500: IFFALSE 34535
// if GetBase ( i ) <> base then
34502: LD_VAR 0 5
34506: PPUSH
34507: CALL_OW 274
34511: PUSH
34512: LD_VAR 0 1
34516: NONEQUAL
34517: IFFALSE 34533
// ComLinkToBase ( base , i ) ;
34519: LD_VAR 0 1
34523: PPUSH
34524: LD_VAR 0 5
34528: PPUSH
34529: CALL_OW 169
34533: GO 34499
34535: POP
34536: POP
// result := tmp ;
34537: LD_ADDR_VAR 0 3
34541: PUSH
34542: LD_VAR 0 4
34546: ST_TO_ADDR
// end ;
34547: LD_VAR 0 3
34551: RET
// export function ComComplete ( unit , b ) ; var i ; begin
34552: LD_INT 0
34554: PPUSH
34555: PPUSH
// if BuildingStatus ( b ) = bs_build then
34556: LD_VAR 0 2
34560: PPUSH
34561: CALL_OW 461
34565: PUSH
34566: LD_INT 1
34568: EQUAL
34569: IFFALSE 34629
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34571: LD_VAR 0 1
34575: PPUSH
34576: LD_STRING h
34578: PUSH
34579: LD_VAR 0 2
34583: PPUSH
34584: CALL_OW 250
34588: PUSH
34589: LD_VAR 0 2
34593: PPUSH
34594: CALL_OW 251
34598: PUSH
34599: LD_VAR 0 2
34603: PUSH
34604: LD_INT 0
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: PUSH
34622: EMPTY
34623: LIST
34624: PPUSH
34625: CALL_OW 446
// end ;
34629: LD_VAR 0 3
34633: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34634: LD_INT 0
34636: PPUSH
34637: PPUSH
34638: PPUSH
34639: PPUSH
34640: PPUSH
34641: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
34642: LD_VAR 0 1
34646: NOT
34647: PUSH
34648: LD_VAR 0 1
34652: PPUSH
34653: CALL_OW 263
34657: PUSH
34658: LD_INT 2
34660: EQUAL
34661: NOT
34662: OR
34663: IFFALSE 34667
// exit ;
34665: GO 34983
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34667: LD_ADDR_VAR 0 6
34671: PUSH
34672: LD_INT 22
34674: PUSH
34675: LD_VAR 0 1
34679: PPUSH
34680: CALL_OW 255
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 2
34691: PUSH
34692: LD_INT 30
34694: PUSH
34695: LD_INT 36
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 34
34704: PUSH
34705: LD_INT 31
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: LIST
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PPUSH
34721: CALL_OW 69
34725: ST_TO_ADDR
// if not tmp then
34726: LD_VAR 0 6
34730: NOT
34731: IFFALSE 34735
// exit ;
34733: GO 34983
// result := [ ] ;
34735: LD_ADDR_VAR 0 2
34739: PUSH
34740: EMPTY
34741: ST_TO_ADDR
// for i in tmp do
34742: LD_ADDR_VAR 0 3
34746: PUSH
34747: LD_VAR 0 6
34751: PUSH
34752: FOR_IN
34753: IFFALSE 34824
// begin t := UnitsInside ( i ) ;
34755: LD_ADDR_VAR 0 4
34759: PUSH
34760: LD_VAR 0 3
34764: PPUSH
34765: CALL_OW 313
34769: ST_TO_ADDR
// if t then
34770: LD_VAR 0 4
34774: IFFALSE 34822
// for j in t do
34776: LD_ADDR_VAR 0 7
34780: PUSH
34781: LD_VAR 0 4
34785: PUSH
34786: FOR_IN
34787: IFFALSE 34820
// result := Insert ( result , result + 1 , j ) ;
34789: LD_ADDR_VAR 0 2
34793: PUSH
34794: LD_VAR 0 2
34798: PPUSH
34799: LD_VAR 0 2
34803: PUSH
34804: LD_INT 1
34806: PLUS
34807: PPUSH
34808: LD_VAR 0 7
34812: PPUSH
34813: CALL_OW 2
34817: ST_TO_ADDR
34818: GO 34786
34820: POP
34821: POP
// end ;
34822: GO 34752
34824: POP
34825: POP
// if not result then
34826: LD_VAR 0 2
34830: NOT
34831: IFFALSE 34835
// exit ;
34833: GO 34983
// mech := result [ 1 ] ;
34835: LD_ADDR_VAR 0 5
34839: PUSH
34840: LD_VAR 0 2
34844: PUSH
34845: LD_INT 1
34847: ARRAY
34848: ST_TO_ADDR
// if result > 1 then
34849: LD_VAR 0 2
34853: PUSH
34854: LD_INT 1
34856: GREATER
34857: IFFALSE 34969
// for i = 2 to result do
34859: LD_ADDR_VAR 0 3
34863: PUSH
34864: DOUBLE
34865: LD_INT 2
34867: DEC
34868: ST_TO_ADDR
34869: LD_VAR 0 2
34873: PUSH
34874: FOR_TO
34875: IFFALSE 34967
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34877: LD_ADDR_VAR 0 4
34881: PUSH
34882: LD_VAR 0 2
34886: PUSH
34887: LD_VAR 0 3
34891: ARRAY
34892: PPUSH
34893: LD_INT 3
34895: PPUSH
34896: CALL_OW 259
34900: PUSH
34901: LD_VAR 0 2
34905: PUSH
34906: LD_VAR 0 3
34910: ARRAY
34911: PPUSH
34912: CALL_OW 432
34916: MINUS
34917: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34918: LD_VAR 0 4
34922: PUSH
34923: LD_VAR 0 5
34927: PPUSH
34928: LD_INT 3
34930: PPUSH
34931: CALL_OW 259
34935: PUSH
34936: LD_VAR 0 5
34940: PPUSH
34941: CALL_OW 432
34945: MINUS
34946: GREATEREQUAL
34947: IFFALSE 34965
// mech := result [ i ] ;
34949: LD_ADDR_VAR 0 5
34953: PUSH
34954: LD_VAR 0 2
34958: PUSH
34959: LD_VAR 0 3
34963: ARRAY
34964: ST_TO_ADDR
// end ;
34965: GO 34874
34967: POP
34968: POP
// ComLinkTo ( vehicle , mech ) ;
34969: LD_VAR 0 1
34973: PPUSH
34974: LD_VAR 0 5
34978: PPUSH
34979: CALL_OW 135
// end ;
34983: LD_VAR 0 2
34987: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34988: LD_INT 0
34990: PPUSH
34991: PPUSH
34992: PPUSH
34993: PPUSH
34994: PPUSH
34995: PPUSH
34996: PPUSH
34997: PPUSH
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
35002: PPUSH
// result := [ ] ;
35003: LD_ADDR_VAR 0 7
35007: PUSH
35008: EMPTY
35009: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35010: LD_VAR 0 1
35014: PPUSH
35015: CALL_OW 266
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: LD_INT 1
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: IN
35030: NOT
35031: IFFALSE 35035
// exit ;
35033: GO 36666
// if name then
35035: LD_VAR 0 3
35039: IFFALSE 35055
// SetBName ( base_dep , name ) ;
35041: LD_VAR 0 1
35045: PPUSH
35046: LD_VAR 0 3
35050: PPUSH
35051: CALL_OW 500
// base := GetBase ( base_dep ) ;
35055: LD_ADDR_VAR 0 15
35059: PUSH
35060: LD_VAR 0 1
35064: PPUSH
35065: CALL_OW 274
35069: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35070: LD_ADDR_VAR 0 16
35074: PUSH
35075: LD_VAR 0 1
35079: PPUSH
35080: CALL_OW 255
35084: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35085: LD_ADDR_VAR 0 17
35089: PUSH
35090: LD_VAR 0 1
35094: PPUSH
35095: CALL_OW 248
35099: ST_TO_ADDR
// if sources then
35100: LD_VAR 0 5
35104: IFFALSE 35151
// for i = 1 to 3 do
35106: LD_ADDR_VAR 0 8
35110: PUSH
35111: DOUBLE
35112: LD_INT 1
35114: DEC
35115: ST_TO_ADDR
35116: LD_INT 3
35118: PUSH
35119: FOR_TO
35120: IFFALSE 35149
// AddResourceType ( base , i , sources [ i ] ) ;
35122: LD_VAR 0 15
35126: PPUSH
35127: LD_VAR 0 8
35131: PPUSH
35132: LD_VAR 0 5
35136: PUSH
35137: LD_VAR 0 8
35141: ARRAY
35142: PPUSH
35143: CALL_OW 276
35147: GO 35119
35149: POP
35150: POP
// buildings := GetBaseBuildings ( base , area ) ;
35151: LD_ADDR_VAR 0 18
35155: PUSH
35156: LD_VAR 0 15
35160: PPUSH
35161: LD_VAR 0 2
35165: PPUSH
35166: CALL 34443 0 2
35170: ST_TO_ADDR
// InitHc ;
35171: CALL_OW 19
// InitUc ;
35175: CALL_OW 18
// uc_side := side ;
35179: LD_ADDR_OWVAR 20
35183: PUSH
35184: LD_VAR 0 16
35188: ST_TO_ADDR
// uc_nation := nation ;
35189: LD_ADDR_OWVAR 21
35193: PUSH
35194: LD_VAR 0 17
35198: ST_TO_ADDR
// if buildings then
35199: LD_VAR 0 18
35203: IFFALSE 36525
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35205: LD_ADDR_VAR 0 19
35209: PUSH
35210: LD_VAR 0 18
35214: PPUSH
35215: LD_INT 2
35217: PUSH
35218: LD_INT 30
35220: PUSH
35221: LD_INT 29
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 30
35230: PUSH
35231: LD_INT 30
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: LIST
35242: PPUSH
35243: CALL_OW 72
35247: ST_TO_ADDR
// if tmp then
35248: LD_VAR 0 19
35252: IFFALSE 35300
// for i in tmp do
35254: LD_ADDR_VAR 0 8
35258: PUSH
35259: LD_VAR 0 19
35263: PUSH
35264: FOR_IN
35265: IFFALSE 35298
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35267: LD_VAR 0 8
35271: PPUSH
35272: CALL_OW 250
35276: PPUSH
35277: LD_VAR 0 8
35281: PPUSH
35282: CALL_OW 251
35286: PPUSH
35287: LD_VAR 0 16
35291: PPUSH
35292: CALL_OW 441
35296: GO 35264
35298: POP
35299: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35300: LD_VAR 0 18
35304: PPUSH
35305: LD_INT 2
35307: PUSH
35308: LD_INT 30
35310: PUSH
35311: LD_INT 32
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 30
35320: PUSH
35321: LD_INT 33
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: PPUSH
35333: CALL_OW 72
35337: IFFALSE 35425
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35339: LD_ADDR_VAR 0 8
35343: PUSH
35344: LD_VAR 0 18
35348: PPUSH
35349: LD_INT 2
35351: PUSH
35352: LD_INT 30
35354: PUSH
35355: LD_INT 32
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 30
35364: PUSH
35365: LD_INT 33
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: LIST
35376: PPUSH
35377: CALL_OW 72
35381: PUSH
35382: FOR_IN
35383: IFFALSE 35423
// begin if not GetBWeapon ( i ) then
35385: LD_VAR 0 8
35389: PPUSH
35390: CALL_OW 269
35394: NOT
35395: IFFALSE 35421
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35397: LD_VAR 0 8
35401: PPUSH
35402: LD_VAR 0 8
35406: PPUSH
35407: LD_VAR 0 2
35411: PPUSH
35412: CALL 36671 0 2
35416: PPUSH
35417: CALL_OW 431
// end ;
35421: GO 35382
35423: POP
35424: POP
// end ; for i = 1 to personel do
35425: LD_ADDR_VAR 0 8
35429: PUSH
35430: DOUBLE
35431: LD_INT 1
35433: DEC
35434: ST_TO_ADDR
35435: LD_VAR 0 6
35439: PUSH
35440: FOR_TO
35441: IFFALSE 36505
// begin if i > 4 then
35443: LD_VAR 0 8
35447: PUSH
35448: LD_INT 4
35450: GREATER
35451: IFFALSE 35455
// break ;
35453: GO 36505
// case i of 1 :
35455: LD_VAR 0 8
35459: PUSH
35460: LD_INT 1
35462: DOUBLE
35463: EQUAL
35464: IFTRUE 35468
35466: GO 35548
35468: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35469: LD_ADDR_VAR 0 12
35473: PUSH
35474: LD_VAR 0 18
35478: PPUSH
35479: LD_INT 22
35481: PUSH
35482: LD_VAR 0 16
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 58
35493: PUSH
35494: EMPTY
35495: LIST
35496: PUSH
35497: LD_INT 2
35499: PUSH
35500: LD_INT 30
35502: PUSH
35503: LD_INT 32
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 30
35512: PUSH
35513: LD_INT 4
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 30
35522: PUSH
35523: LD_INT 5
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: PPUSH
35541: CALL_OW 72
35545: ST_TO_ADDR
35546: GO 35770
35548: LD_INT 2
35550: DOUBLE
35551: EQUAL
35552: IFTRUE 35556
35554: GO 35618
35556: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35557: LD_ADDR_VAR 0 12
35561: PUSH
35562: LD_VAR 0 18
35566: PPUSH
35567: LD_INT 22
35569: PUSH
35570: LD_VAR 0 16
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 2
35581: PUSH
35582: LD_INT 30
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 30
35594: PUSH
35595: LD_INT 1
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PPUSH
35611: CALL_OW 72
35615: ST_TO_ADDR
35616: GO 35770
35618: LD_INT 3
35620: DOUBLE
35621: EQUAL
35622: IFTRUE 35626
35624: GO 35688
35626: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35627: LD_ADDR_VAR 0 12
35631: PUSH
35632: LD_VAR 0 18
35636: PPUSH
35637: LD_INT 22
35639: PUSH
35640: LD_VAR 0 16
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 2
35651: PUSH
35652: LD_INT 30
35654: PUSH
35655: LD_INT 2
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 30
35664: PUSH
35665: LD_INT 3
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PPUSH
35681: CALL_OW 72
35685: ST_TO_ADDR
35686: GO 35770
35688: LD_INT 4
35690: DOUBLE
35691: EQUAL
35692: IFTRUE 35696
35694: GO 35769
35696: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35697: LD_ADDR_VAR 0 12
35701: PUSH
35702: LD_VAR 0 18
35706: PPUSH
35707: LD_INT 22
35709: PUSH
35710: LD_VAR 0 16
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 2
35721: PUSH
35722: LD_INT 30
35724: PUSH
35725: LD_INT 6
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 30
35734: PUSH
35735: LD_INT 7
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 30
35744: PUSH
35745: LD_INT 8
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PPUSH
35762: CALL_OW 72
35766: ST_TO_ADDR
35767: GO 35770
35769: POP
// if i = 1 then
35770: LD_VAR 0 8
35774: PUSH
35775: LD_INT 1
35777: EQUAL
35778: IFFALSE 35889
// begin tmp := [ ] ;
35780: LD_ADDR_VAR 0 19
35784: PUSH
35785: EMPTY
35786: ST_TO_ADDR
// for j in f do
35787: LD_ADDR_VAR 0 9
35791: PUSH
35792: LD_VAR 0 12
35796: PUSH
35797: FOR_IN
35798: IFFALSE 35871
// if GetBType ( j ) = b_bunker then
35800: LD_VAR 0 9
35804: PPUSH
35805: CALL_OW 266
35809: PUSH
35810: LD_INT 32
35812: EQUAL
35813: IFFALSE 35840
// tmp := Insert ( tmp , 1 , j ) else
35815: LD_ADDR_VAR 0 19
35819: PUSH
35820: LD_VAR 0 19
35824: PPUSH
35825: LD_INT 1
35827: PPUSH
35828: LD_VAR 0 9
35832: PPUSH
35833: CALL_OW 2
35837: ST_TO_ADDR
35838: GO 35869
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35840: LD_ADDR_VAR 0 19
35844: PUSH
35845: LD_VAR 0 19
35849: PPUSH
35850: LD_VAR 0 19
35854: PUSH
35855: LD_INT 1
35857: PLUS
35858: PPUSH
35859: LD_VAR 0 9
35863: PPUSH
35864: CALL_OW 2
35868: ST_TO_ADDR
35869: GO 35797
35871: POP
35872: POP
// if tmp then
35873: LD_VAR 0 19
35877: IFFALSE 35889
// f := tmp ;
35879: LD_ADDR_VAR 0 12
35883: PUSH
35884: LD_VAR 0 19
35888: ST_TO_ADDR
// end ; x := personel [ i ] ;
35889: LD_ADDR_VAR 0 13
35893: PUSH
35894: LD_VAR 0 6
35898: PUSH
35899: LD_VAR 0 8
35903: ARRAY
35904: ST_TO_ADDR
// if x = - 1 then
35905: LD_VAR 0 13
35909: PUSH
35910: LD_INT 1
35912: NEG
35913: EQUAL
35914: IFFALSE 36123
// begin for j in f do
35916: LD_ADDR_VAR 0 9
35920: PUSH
35921: LD_VAR 0 12
35925: PUSH
35926: FOR_IN
35927: IFFALSE 36119
// repeat InitHc ;
35929: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35933: LD_VAR 0 9
35937: PPUSH
35938: CALL_OW 266
35942: PUSH
35943: LD_INT 5
35945: EQUAL
35946: IFFALSE 36016
// begin if UnitsInside ( j ) < 3 then
35948: LD_VAR 0 9
35952: PPUSH
35953: CALL_OW 313
35957: PUSH
35958: LD_INT 3
35960: LESS
35961: IFFALSE 35997
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35963: LD_INT 0
35965: PPUSH
35966: LD_INT 5
35968: PUSH
35969: LD_INT 8
35971: PUSH
35972: LD_INT 9
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: LIST
35979: PUSH
35980: LD_VAR 0 17
35984: ARRAY
35985: PPUSH
35986: LD_VAR 0 4
35990: PPUSH
35991: CALL_OW 380
35995: GO 36014
// PrepareHuman ( false , i , skill ) ;
35997: LD_INT 0
35999: PPUSH
36000: LD_VAR 0 8
36004: PPUSH
36005: LD_VAR 0 4
36009: PPUSH
36010: CALL_OW 380
// end else
36014: GO 36033
// PrepareHuman ( false , i , skill ) ;
36016: LD_INT 0
36018: PPUSH
36019: LD_VAR 0 8
36023: PPUSH
36024: LD_VAR 0 4
36028: PPUSH
36029: CALL_OW 380
// un := CreateHuman ;
36033: LD_ADDR_VAR 0 14
36037: PUSH
36038: CALL_OW 44
36042: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36043: LD_ADDR_VAR 0 7
36047: PUSH
36048: LD_VAR 0 7
36052: PPUSH
36053: LD_INT 1
36055: PPUSH
36056: LD_VAR 0 14
36060: PPUSH
36061: CALL_OW 2
36065: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36066: LD_VAR 0 14
36070: PPUSH
36071: LD_VAR 0 9
36075: PPUSH
36076: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36080: LD_VAR 0 9
36084: PPUSH
36085: CALL_OW 313
36089: PUSH
36090: LD_INT 6
36092: EQUAL
36093: PUSH
36094: LD_VAR 0 9
36098: PPUSH
36099: CALL_OW 266
36103: PUSH
36104: LD_INT 32
36106: PUSH
36107: LD_INT 31
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: IN
36114: OR
36115: IFFALSE 35929
36117: GO 35926
36119: POP
36120: POP
// end else
36121: GO 36503
// for j = 1 to x do
36123: LD_ADDR_VAR 0 9
36127: PUSH
36128: DOUBLE
36129: LD_INT 1
36131: DEC
36132: ST_TO_ADDR
36133: LD_VAR 0 13
36137: PUSH
36138: FOR_TO
36139: IFFALSE 36501
// begin InitHc ;
36141: CALL_OW 19
// if not f then
36145: LD_VAR 0 12
36149: NOT
36150: IFFALSE 36239
// begin PrepareHuman ( false , i , skill ) ;
36152: LD_INT 0
36154: PPUSH
36155: LD_VAR 0 8
36159: PPUSH
36160: LD_VAR 0 4
36164: PPUSH
36165: CALL_OW 380
// un := CreateHuman ;
36169: LD_ADDR_VAR 0 14
36173: PUSH
36174: CALL_OW 44
36178: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36179: LD_ADDR_VAR 0 7
36183: PUSH
36184: LD_VAR 0 7
36188: PPUSH
36189: LD_INT 1
36191: PPUSH
36192: LD_VAR 0 14
36196: PPUSH
36197: CALL_OW 2
36201: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36202: LD_VAR 0 14
36206: PPUSH
36207: LD_VAR 0 1
36211: PPUSH
36212: CALL_OW 250
36216: PPUSH
36217: LD_VAR 0 1
36221: PPUSH
36222: CALL_OW 251
36226: PPUSH
36227: LD_INT 10
36229: PPUSH
36230: LD_INT 0
36232: PPUSH
36233: CALL_OW 50
// continue ;
36237: GO 36138
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36239: LD_VAR 0 12
36243: PUSH
36244: LD_INT 1
36246: ARRAY
36247: PPUSH
36248: CALL_OW 313
36252: PUSH
36253: LD_VAR 0 12
36257: PUSH
36258: LD_INT 1
36260: ARRAY
36261: PPUSH
36262: CALL_OW 266
36266: PUSH
36267: LD_INT 32
36269: PUSH
36270: LD_INT 31
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: IN
36277: AND
36278: PUSH
36279: LD_VAR 0 12
36283: PUSH
36284: LD_INT 1
36286: ARRAY
36287: PPUSH
36288: CALL_OW 313
36292: PUSH
36293: LD_INT 6
36295: EQUAL
36296: OR
36297: IFFALSE 36317
// f := Delete ( f , 1 ) ;
36299: LD_ADDR_VAR 0 12
36303: PUSH
36304: LD_VAR 0 12
36308: PPUSH
36309: LD_INT 1
36311: PPUSH
36312: CALL_OW 3
36316: ST_TO_ADDR
// if not f then
36317: LD_VAR 0 12
36321: NOT
36322: IFFALSE 36340
// begin x := x + 2 ;
36324: LD_ADDR_VAR 0 13
36328: PUSH
36329: LD_VAR 0 13
36333: PUSH
36334: LD_INT 2
36336: PLUS
36337: ST_TO_ADDR
// continue ;
36338: GO 36138
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36340: LD_VAR 0 12
36344: PUSH
36345: LD_INT 1
36347: ARRAY
36348: PPUSH
36349: CALL_OW 266
36353: PUSH
36354: LD_INT 5
36356: EQUAL
36357: IFFALSE 36431
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36359: LD_VAR 0 12
36363: PUSH
36364: LD_INT 1
36366: ARRAY
36367: PPUSH
36368: CALL_OW 313
36372: PUSH
36373: LD_INT 3
36375: LESS
36376: IFFALSE 36412
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36378: LD_INT 0
36380: PPUSH
36381: LD_INT 5
36383: PUSH
36384: LD_INT 8
36386: PUSH
36387: LD_INT 9
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: PUSH
36395: LD_VAR 0 17
36399: ARRAY
36400: PPUSH
36401: LD_VAR 0 4
36405: PPUSH
36406: CALL_OW 380
36410: GO 36429
// PrepareHuman ( false , i , skill ) ;
36412: LD_INT 0
36414: PPUSH
36415: LD_VAR 0 8
36419: PPUSH
36420: LD_VAR 0 4
36424: PPUSH
36425: CALL_OW 380
// end else
36429: GO 36448
// PrepareHuman ( false , i , skill ) ;
36431: LD_INT 0
36433: PPUSH
36434: LD_VAR 0 8
36438: PPUSH
36439: LD_VAR 0 4
36443: PPUSH
36444: CALL_OW 380
// un := CreateHuman ;
36448: LD_ADDR_VAR 0 14
36452: PUSH
36453: CALL_OW 44
36457: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36458: LD_ADDR_VAR 0 7
36462: PUSH
36463: LD_VAR 0 7
36467: PPUSH
36468: LD_INT 1
36470: PPUSH
36471: LD_VAR 0 14
36475: PPUSH
36476: CALL_OW 2
36480: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36481: LD_VAR 0 14
36485: PPUSH
36486: LD_VAR 0 12
36490: PUSH
36491: LD_INT 1
36493: ARRAY
36494: PPUSH
36495: CALL_OW 52
// end ;
36499: GO 36138
36501: POP
36502: POP
// end ;
36503: GO 35440
36505: POP
36506: POP
// result := result ^ buildings ;
36507: LD_ADDR_VAR 0 7
36511: PUSH
36512: LD_VAR 0 7
36516: PUSH
36517: LD_VAR 0 18
36521: ADD
36522: ST_TO_ADDR
// end else
36523: GO 36666
// begin for i = 1 to personel do
36525: LD_ADDR_VAR 0 8
36529: PUSH
36530: DOUBLE
36531: LD_INT 1
36533: DEC
36534: ST_TO_ADDR
36535: LD_VAR 0 6
36539: PUSH
36540: FOR_TO
36541: IFFALSE 36664
// begin if i > 4 then
36543: LD_VAR 0 8
36547: PUSH
36548: LD_INT 4
36550: GREATER
36551: IFFALSE 36555
// break ;
36553: GO 36664
// x := personel [ i ] ;
36555: LD_ADDR_VAR 0 13
36559: PUSH
36560: LD_VAR 0 6
36564: PUSH
36565: LD_VAR 0 8
36569: ARRAY
36570: ST_TO_ADDR
// if x = - 1 then
36571: LD_VAR 0 13
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: EQUAL
36580: IFFALSE 36584
// continue ;
36582: GO 36540
// PrepareHuman ( false , i , skill ) ;
36584: LD_INT 0
36586: PPUSH
36587: LD_VAR 0 8
36591: PPUSH
36592: LD_VAR 0 4
36596: PPUSH
36597: CALL_OW 380
// un := CreateHuman ;
36601: LD_ADDR_VAR 0 14
36605: PUSH
36606: CALL_OW 44
36610: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36611: LD_VAR 0 14
36615: PPUSH
36616: LD_VAR 0 1
36620: PPUSH
36621: CALL_OW 250
36625: PPUSH
36626: LD_VAR 0 1
36630: PPUSH
36631: CALL_OW 251
36635: PPUSH
36636: LD_INT 10
36638: PPUSH
36639: LD_INT 0
36641: PPUSH
36642: CALL_OW 50
// result := result ^ un ;
36646: LD_ADDR_VAR 0 7
36650: PUSH
36651: LD_VAR 0 7
36655: PUSH
36656: LD_VAR 0 14
36660: ADD
36661: ST_TO_ADDR
// end ;
36662: GO 36540
36664: POP
36665: POP
// end ; end ;
36666: LD_VAR 0 7
36670: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36671: LD_INT 0
36673: PPUSH
36674: PPUSH
36675: PPUSH
36676: PPUSH
36677: PPUSH
36678: PPUSH
36679: PPUSH
36680: PPUSH
36681: PPUSH
36682: PPUSH
36683: PPUSH
36684: PPUSH
36685: PPUSH
36686: PPUSH
36687: PPUSH
36688: PPUSH
// result := false ;
36689: LD_ADDR_VAR 0 3
36693: PUSH
36694: LD_INT 0
36696: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36697: LD_VAR 0 1
36701: NOT
36702: PUSH
36703: LD_VAR 0 1
36707: PPUSH
36708: CALL_OW 266
36712: PUSH
36713: LD_INT 32
36715: PUSH
36716: LD_INT 33
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: IN
36723: NOT
36724: OR
36725: IFFALSE 36729
// exit ;
36727: GO 37865
// nat := GetNation ( tower ) ;
36729: LD_ADDR_VAR 0 12
36733: PUSH
36734: LD_VAR 0 1
36738: PPUSH
36739: CALL_OW 248
36743: ST_TO_ADDR
// side := GetSide ( tower ) ;
36744: LD_ADDR_VAR 0 16
36748: PUSH
36749: LD_VAR 0 1
36753: PPUSH
36754: CALL_OW 255
36758: ST_TO_ADDR
// x := GetX ( tower ) ;
36759: LD_ADDR_VAR 0 10
36763: PUSH
36764: LD_VAR 0 1
36768: PPUSH
36769: CALL_OW 250
36773: ST_TO_ADDR
// y := GetY ( tower ) ;
36774: LD_ADDR_VAR 0 11
36778: PUSH
36779: LD_VAR 0 1
36783: PPUSH
36784: CALL_OW 251
36788: ST_TO_ADDR
// if not x or not y then
36789: LD_VAR 0 10
36793: NOT
36794: PUSH
36795: LD_VAR 0 11
36799: NOT
36800: OR
36801: IFFALSE 36805
// exit ;
36803: GO 37865
// weapon := 0 ;
36805: LD_ADDR_VAR 0 18
36809: PUSH
36810: LD_INT 0
36812: ST_TO_ADDR
// fac_list := [ ] ;
36813: LD_ADDR_VAR 0 17
36817: PUSH
36818: EMPTY
36819: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
36820: LD_ADDR_VAR 0 6
36824: PUSH
36825: LD_VAR 0 1
36829: PPUSH
36830: CALL_OW 274
36834: PPUSH
36835: LD_VAR 0 2
36839: PPUSH
36840: CALL 34443 0 2
36844: PPUSH
36845: LD_INT 30
36847: PUSH
36848: LD_INT 3
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PPUSH
36855: CALL_OW 72
36859: ST_TO_ADDR
// if not factories then
36860: LD_VAR 0 6
36864: NOT
36865: IFFALSE 36869
// exit ;
36867: GO 37865
// for i in factories do
36869: LD_ADDR_VAR 0 8
36873: PUSH
36874: LD_VAR 0 6
36878: PUSH
36879: FOR_IN
36880: IFFALSE 36905
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36882: LD_ADDR_VAR 0 17
36886: PUSH
36887: LD_VAR 0 17
36891: PUSH
36892: LD_VAR 0 8
36896: PPUSH
36897: CALL_OW 478
36901: UNION
36902: ST_TO_ADDR
36903: GO 36879
36905: POP
36906: POP
// if not fac_list then
36907: LD_VAR 0 17
36911: NOT
36912: IFFALSE 36916
// exit ;
36914: GO 37865
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36916: LD_ADDR_VAR 0 5
36920: PUSH
36921: LD_INT 4
36923: PUSH
36924: LD_INT 5
36926: PUSH
36927: LD_INT 9
36929: PUSH
36930: LD_INT 10
36932: PUSH
36933: LD_INT 6
36935: PUSH
36936: LD_INT 7
36938: PUSH
36939: LD_INT 11
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 27
36953: PUSH
36954: LD_INT 28
36956: PUSH
36957: LD_INT 26
36959: PUSH
36960: LD_INT 30
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 43
36971: PUSH
36972: LD_INT 44
36974: PUSH
36975: LD_INT 46
36977: PUSH
36978: LD_INT 45
36980: PUSH
36981: LD_INT 47
36983: PUSH
36984: LD_INT 49
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: LIST
36999: PUSH
37000: LD_VAR 0 12
37004: ARRAY
37005: ST_TO_ADDR
// for i in list do
37006: LD_ADDR_VAR 0 8
37010: PUSH
37011: LD_VAR 0 5
37015: PUSH
37016: FOR_IN
37017: IFFALSE 37050
// if not i in fac_list then
37019: LD_VAR 0 8
37023: PUSH
37024: LD_VAR 0 17
37028: IN
37029: NOT
37030: IFFALSE 37048
// list := list diff i ;
37032: LD_ADDR_VAR 0 5
37036: PUSH
37037: LD_VAR 0 5
37041: PUSH
37042: LD_VAR 0 8
37046: DIFF
37047: ST_TO_ADDR
37048: GO 37016
37050: POP
37051: POP
// if not list then
37052: LD_VAR 0 5
37056: NOT
37057: IFFALSE 37061
// exit ;
37059: GO 37865
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37061: LD_VAR 0 12
37065: PUSH
37066: LD_INT 3
37068: EQUAL
37069: PUSH
37070: LD_INT 49
37072: PUSH
37073: LD_VAR 0 5
37077: IN
37078: AND
37079: PUSH
37080: LD_INT 31
37082: PPUSH
37083: LD_VAR 0 16
37087: PPUSH
37088: CALL_OW 321
37092: PUSH
37093: LD_INT 2
37095: EQUAL
37096: AND
37097: IFFALSE 37157
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37099: LD_INT 22
37101: PUSH
37102: LD_VAR 0 16
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 35
37113: PUSH
37114: LD_INT 49
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 91
37123: PUSH
37124: LD_VAR 0 1
37128: PUSH
37129: LD_INT 10
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: LIST
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: PPUSH
37142: CALL_OW 69
37146: NOT
37147: IFFALSE 37157
// weapon := ru_time_lapser ;
37149: LD_ADDR_VAR 0 18
37153: PUSH
37154: LD_INT 49
37156: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37157: LD_VAR 0 12
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: LD_INT 2
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: IN
37172: PUSH
37173: LD_INT 11
37175: PUSH
37176: LD_VAR 0 5
37180: IN
37181: PUSH
37182: LD_INT 30
37184: PUSH
37185: LD_VAR 0 5
37189: IN
37190: OR
37191: AND
37192: PUSH
37193: LD_INT 6
37195: PPUSH
37196: LD_VAR 0 16
37200: PPUSH
37201: CALL_OW 321
37205: PUSH
37206: LD_INT 2
37208: EQUAL
37209: AND
37210: IFFALSE 37375
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37212: LD_INT 22
37214: PUSH
37215: LD_VAR 0 16
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: LD_INT 35
37229: PUSH
37230: LD_INT 11
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 35
37239: PUSH
37240: LD_INT 30
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 91
37254: PUSH
37255: LD_VAR 0 1
37259: PUSH
37260: LD_INT 18
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: LIST
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: LIST
37272: PPUSH
37273: CALL_OW 69
37277: NOT
37278: PUSH
37279: LD_INT 22
37281: PUSH
37282: LD_VAR 0 16
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: LD_INT 30
37296: PUSH
37297: LD_INT 32
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 30
37306: PUSH
37307: LD_INT 33
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 91
37321: PUSH
37322: LD_VAR 0 1
37326: PUSH
37327: LD_INT 12
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: LIST
37339: PUSH
37340: EMPTY
37341: LIST
37342: PPUSH
37343: CALL_OW 69
37347: PUSH
37348: LD_INT 2
37350: GREATER
37351: AND
37352: IFFALSE 37375
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37354: LD_ADDR_VAR 0 18
37358: PUSH
37359: LD_INT 11
37361: PUSH
37362: LD_INT 30
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_VAR 0 12
37373: ARRAY
37374: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37375: LD_VAR 0 18
37379: NOT
37380: PUSH
37381: LD_INT 40
37383: PPUSH
37384: LD_VAR 0 16
37388: PPUSH
37389: CALL_OW 321
37393: PUSH
37394: LD_INT 2
37396: EQUAL
37397: AND
37398: PUSH
37399: LD_INT 7
37401: PUSH
37402: LD_VAR 0 5
37406: IN
37407: PUSH
37408: LD_INT 28
37410: PUSH
37411: LD_VAR 0 5
37415: IN
37416: OR
37417: PUSH
37418: LD_INT 45
37420: PUSH
37421: LD_VAR 0 5
37425: IN
37426: OR
37427: AND
37428: IFFALSE 37682
// begin hex := GetHexInfo ( x , y ) ;
37430: LD_ADDR_VAR 0 4
37434: PUSH
37435: LD_VAR 0 10
37439: PPUSH
37440: LD_VAR 0 11
37444: PPUSH
37445: CALL_OW 546
37449: ST_TO_ADDR
// if hex [ 1 ] then
37450: LD_VAR 0 4
37454: PUSH
37455: LD_INT 1
37457: ARRAY
37458: IFFALSE 37462
// exit ;
37460: GO 37865
// height := hex [ 2 ] ;
37462: LD_ADDR_VAR 0 15
37466: PUSH
37467: LD_VAR 0 4
37471: PUSH
37472: LD_INT 2
37474: ARRAY
37475: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37476: LD_ADDR_VAR 0 14
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: LD_INT 3
37489: PUSH
37490: LD_INT 5
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: ST_TO_ADDR
// for i in tmp do
37499: LD_ADDR_VAR 0 8
37503: PUSH
37504: LD_VAR 0 14
37508: PUSH
37509: FOR_IN
37510: IFFALSE 37680
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37512: LD_ADDR_VAR 0 9
37516: PUSH
37517: LD_VAR 0 10
37521: PPUSH
37522: LD_VAR 0 8
37526: PPUSH
37527: LD_INT 5
37529: PPUSH
37530: CALL_OW 272
37534: PUSH
37535: LD_VAR 0 11
37539: PPUSH
37540: LD_VAR 0 8
37544: PPUSH
37545: LD_INT 5
37547: PPUSH
37548: CALL_OW 273
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37557: LD_VAR 0 9
37561: PUSH
37562: LD_INT 1
37564: ARRAY
37565: PPUSH
37566: LD_VAR 0 9
37570: PUSH
37571: LD_INT 2
37573: ARRAY
37574: PPUSH
37575: CALL_OW 488
37579: IFFALSE 37678
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37581: LD_ADDR_VAR 0 4
37585: PUSH
37586: LD_VAR 0 9
37590: PUSH
37591: LD_INT 1
37593: ARRAY
37594: PPUSH
37595: LD_VAR 0 9
37599: PUSH
37600: LD_INT 2
37602: ARRAY
37603: PPUSH
37604: CALL_OW 546
37608: ST_TO_ADDR
// if hex [ 1 ] then
37609: LD_VAR 0 4
37613: PUSH
37614: LD_INT 1
37616: ARRAY
37617: IFFALSE 37621
// continue ;
37619: GO 37509
// h := hex [ 2 ] ;
37621: LD_ADDR_VAR 0 13
37625: PUSH
37626: LD_VAR 0 4
37630: PUSH
37631: LD_INT 2
37633: ARRAY
37634: ST_TO_ADDR
// if h + 7 < height then
37635: LD_VAR 0 13
37639: PUSH
37640: LD_INT 7
37642: PLUS
37643: PUSH
37644: LD_VAR 0 15
37648: LESS
37649: IFFALSE 37678
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37651: LD_ADDR_VAR 0 18
37655: PUSH
37656: LD_INT 7
37658: PUSH
37659: LD_INT 28
37661: PUSH
37662: LD_INT 45
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: LIST
37669: PUSH
37670: LD_VAR 0 12
37674: ARRAY
37675: ST_TO_ADDR
// break ;
37676: GO 37680
// end ; end ; end ;
37678: GO 37509
37680: POP
37681: POP
// end ; if not weapon then
37682: LD_VAR 0 18
37686: NOT
37687: IFFALSE 37747
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37689: LD_ADDR_VAR 0 5
37693: PUSH
37694: LD_VAR 0 5
37698: PUSH
37699: LD_INT 11
37701: PUSH
37702: LD_INT 30
37704: PUSH
37705: LD_INT 49
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: LIST
37712: DIFF
37713: ST_TO_ADDR
// if not list then
37714: LD_VAR 0 5
37718: NOT
37719: IFFALSE 37723
// exit ;
37721: GO 37865
// weapon := list [ rand ( 1 , list ) ] ;
37723: LD_ADDR_VAR 0 18
37727: PUSH
37728: LD_VAR 0 5
37732: PUSH
37733: LD_INT 1
37735: PPUSH
37736: LD_VAR 0 5
37740: PPUSH
37741: CALL_OW 12
37745: ARRAY
37746: ST_TO_ADDR
// end ; if weapon then
37747: LD_VAR 0 18
37751: IFFALSE 37865
// begin tmp := CostOfWeapon ( weapon ) ;
37753: LD_ADDR_VAR 0 14
37757: PUSH
37758: LD_VAR 0 18
37762: PPUSH
37763: CALL_OW 451
37767: ST_TO_ADDR
// j := GetBase ( tower ) ;
37768: LD_ADDR_VAR 0 9
37772: PUSH
37773: LD_VAR 0 1
37777: PPUSH
37778: CALL_OW 274
37782: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37783: LD_VAR 0 9
37787: PPUSH
37788: LD_INT 1
37790: PPUSH
37791: CALL_OW 275
37795: PUSH
37796: LD_VAR 0 14
37800: PUSH
37801: LD_INT 1
37803: ARRAY
37804: GREATEREQUAL
37805: PUSH
37806: LD_VAR 0 9
37810: PPUSH
37811: LD_INT 2
37813: PPUSH
37814: CALL_OW 275
37818: PUSH
37819: LD_VAR 0 14
37823: PUSH
37824: LD_INT 2
37826: ARRAY
37827: GREATEREQUAL
37828: AND
37829: PUSH
37830: LD_VAR 0 9
37834: PPUSH
37835: LD_INT 3
37837: PPUSH
37838: CALL_OW 275
37842: PUSH
37843: LD_VAR 0 14
37847: PUSH
37848: LD_INT 3
37850: ARRAY
37851: GREATEREQUAL
37852: AND
37853: IFFALSE 37865
// result := weapon ;
37855: LD_ADDR_VAR 0 3
37859: PUSH
37860: LD_VAR 0 18
37864: ST_TO_ADDR
// end ; end ;
37865: LD_VAR 0 3
37869: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37870: LD_INT 0
37872: PPUSH
37873: PPUSH
// result := true ;
37874: LD_ADDR_VAR 0 3
37878: PUSH
37879: LD_INT 1
37881: ST_TO_ADDR
// if array1 = array2 then
37882: LD_VAR 0 1
37886: PUSH
37887: LD_VAR 0 2
37891: EQUAL
37892: IFFALSE 37952
// begin for i = 1 to array1 do
37894: LD_ADDR_VAR 0 4
37898: PUSH
37899: DOUBLE
37900: LD_INT 1
37902: DEC
37903: ST_TO_ADDR
37904: LD_VAR 0 1
37908: PUSH
37909: FOR_TO
37910: IFFALSE 37948
// if array1 [ i ] <> array2 [ i ] then
37912: LD_VAR 0 1
37916: PUSH
37917: LD_VAR 0 4
37921: ARRAY
37922: PUSH
37923: LD_VAR 0 2
37927: PUSH
37928: LD_VAR 0 4
37932: ARRAY
37933: NONEQUAL
37934: IFFALSE 37946
// begin result := false ;
37936: LD_ADDR_VAR 0 3
37940: PUSH
37941: LD_INT 0
37943: ST_TO_ADDR
// break ;
37944: GO 37948
// end ;
37946: GO 37909
37948: POP
37949: POP
// end else
37950: GO 37960
// result := false ;
37952: LD_ADDR_VAR 0 3
37956: PUSH
37957: LD_INT 0
37959: ST_TO_ADDR
// end ;
37960: LD_VAR 0 3
37964: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37965: LD_INT 0
37967: PPUSH
37968: PPUSH
37969: PPUSH
// pom := GetBase ( fac ) ;
37970: LD_ADDR_VAR 0 5
37974: PUSH
37975: LD_VAR 0 1
37979: PPUSH
37980: CALL_OW 274
37984: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37985: LD_ADDR_VAR 0 4
37989: PUSH
37990: LD_VAR 0 2
37994: PUSH
37995: LD_INT 1
37997: ARRAY
37998: PPUSH
37999: LD_VAR 0 2
38003: PUSH
38004: LD_INT 2
38006: ARRAY
38007: PPUSH
38008: LD_VAR 0 2
38012: PUSH
38013: LD_INT 3
38015: ARRAY
38016: PPUSH
38017: LD_VAR 0 2
38021: PUSH
38022: LD_INT 4
38024: ARRAY
38025: PPUSH
38026: CALL_OW 449
38030: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38031: LD_ADDR_VAR 0 3
38035: PUSH
38036: LD_VAR 0 5
38040: PPUSH
38041: LD_INT 1
38043: PPUSH
38044: CALL_OW 275
38048: PUSH
38049: LD_VAR 0 4
38053: PUSH
38054: LD_INT 1
38056: ARRAY
38057: GREATEREQUAL
38058: PUSH
38059: LD_VAR 0 5
38063: PPUSH
38064: LD_INT 2
38066: PPUSH
38067: CALL_OW 275
38071: PUSH
38072: LD_VAR 0 4
38076: PUSH
38077: LD_INT 2
38079: ARRAY
38080: GREATEREQUAL
38081: AND
38082: PUSH
38083: LD_VAR 0 5
38087: PPUSH
38088: LD_INT 3
38090: PPUSH
38091: CALL_OW 275
38095: PUSH
38096: LD_VAR 0 4
38100: PUSH
38101: LD_INT 3
38103: ARRAY
38104: GREATEREQUAL
38105: AND
38106: ST_TO_ADDR
// end ;
38107: LD_VAR 0 3
38111: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38112: LD_INT 0
38114: PPUSH
38115: PPUSH
38116: PPUSH
38117: PPUSH
// pom := GetBase ( building ) ;
38118: LD_ADDR_VAR 0 3
38122: PUSH
38123: LD_VAR 0 1
38127: PPUSH
38128: CALL_OW 274
38132: ST_TO_ADDR
// if not pom then
38133: LD_VAR 0 3
38137: NOT
38138: IFFALSE 38142
// exit ;
38140: GO 38312
// btype := GetBType ( building ) ;
38142: LD_ADDR_VAR 0 5
38146: PUSH
38147: LD_VAR 0 1
38151: PPUSH
38152: CALL_OW 266
38156: ST_TO_ADDR
// if btype = b_armoury then
38157: LD_VAR 0 5
38161: PUSH
38162: LD_INT 4
38164: EQUAL
38165: IFFALSE 38175
// btype := b_barracks ;
38167: LD_ADDR_VAR 0 5
38171: PUSH
38172: LD_INT 5
38174: ST_TO_ADDR
// if btype = b_depot then
38175: LD_VAR 0 5
38179: PUSH
38180: LD_INT 0
38182: EQUAL
38183: IFFALSE 38193
// btype := b_warehouse ;
38185: LD_ADDR_VAR 0 5
38189: PUSH
38190: LD_INT 1
38192: ST_TO_ADDR
// if btype = b_workshop then
38193: LD_VAR 0 5
38197: PUSH
38198: LD_INT 2
38200: EQUAL
38201: IFFALSE 38211
// btype := b_factory ;
38203: LD_ADDR_VAR 0 5
38207: PUSH
38208: LD_INT 3
38210: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38211: LD_ADDR_VAR 0 4
38215: PUSH
38216: LD_VAR 0 5
38220: PPUSH
38221: LD_VAR 0 1
38225: PPUSH
38226: CALL_OW 248
38230: PPUSH
38231: CALL_OW 450
38235: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38236: LD_ADDR_VAR 0 2
38240: PUSH
38241: LD_VAR 0 3
38245: PPUSH
38246: LD_INT 1
38248: PPUSH
38249: CALL_OW 275
38253: PUSH
38254: LD_VAR 0 4
38258: PUSH
38259: LD_INT 1
38261: ARRAY
38262: GREATEREQUAL
38263: PUSH
38264: LD_VAR 0 3
38268: PPUSH
38269: LD_INT 2
38271: PPUSH
38272: CALL_OW 275
38276: PUSH
38277: LD_VAR 0 4
38281: PUSH
38282: LD_INT 2
38284: ARRAY
38285: GREATEREQUAL
38286: AND
38287: PUSH
38288: LD_VAR 0 3
38292: PPUSH
38293: LD_INT 3
38295: PPUSH
38296: CALL_OW 275
38300: PUSH
38301: LD_VAR 0 4
38305: PUSH
38306: LD_INT 3
38308: ARRAY
38309: GREATEREQUAL
38310: AND
38311: ST_TO_ADDR
// end ;
38312: LD_VAR 0 2
38316: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38317: LD_INT 0
38319: PPUSH
38320: PPUSH
38321: PPUSH
// pom := GetBase ( building ) ;
38322: LD_ADDR_VAR 0 4
38326: PUSH
38327: LD_VAR 0 1
38331: PPUSH
38332: CALL_OW 274
38336: ST_TO_ADDR
// if not pom then
38337: LD_VAR 0 4
38341: NOT
38342: IFFALSE 38346
// exit ;
38344: GO 38447
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38346: LD_ADDR_VAR 0 5
38350: PUSH
38351: LD_VAR 0 2
38355: PPUSH
38356: LD_VAR 0 1
38360: PPUSH
38361: CALL_OW 248
38365: PPUSH
38366: CALL_OW 450
38370: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38371: LD_ADDR_VAR 0 3
38375: PUSH
38376: LD_VAR 0 4
38380: PPUSH
38381: LD_INT 1
38383: PPUSH
38384: CALL_OW 275
38388: PUSH
38389: LD_VAR 0 5
38393: PUSH
38394: LD_INT 1
38396: ARRAY
38397: GREATEREQUAL
38398: PUSH
38399: LD_VAR 0 4
38403: PPUSH
38404: LD_INT 2
38406: PPUSH
38407: CALL_OW 275
38411: PUSH
38412: LD_VAR 0 5
38416: PUSH
38417: LD_INT 2
38419: ARRAY
38420: GREATEREQUAL
38421: AND
38422: PUSH
38423: LD_VAR 0 4
38427: PPUSH
38428: LD_INT 3
38430: PPUSH
38431: CALL_OW 275
38435: PUSH
38436: LD_VAR 0 5
38440: PUSH
38441: LD_INT 3
38443: ARRAY
38444: GREATEREQUAL
38445: AND
38446: ST_TO_ADDR
// end ;
38447: LD_VAR 0 3
38451: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
38452: LD_INT 0
38454: PPUSH
38455: PPUSH
38456: PPUSH
38457: PPUSH
38458: PPUSH
38459: PPUSH
38460: PPUSH
38461: PPUSH
38462: PPUSH
38463: PPUSH
// result := false ;
38464: LD_ADDR_VAR 0 6
38468: PUSH
38469: LD_INT 0
38471: ST_TO_ADDR
// if not base or not btype or not x or not y then
38472: LD_VAR 0 1
38476: NOT
38477: PUSH
38478: LD_VAR 0 2
38482: NOT
38483: OR
38484: PUSH
38485: LD_VAR 0 3
38489: NOT
38490: OR
38491: PUSH
38492: LD_VAR 0 4
38496: NOT
38497: OR
38498: IFFALSE 38502
// exit ;
38500: GO 39111
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
38502: LD_ADDR_VAR 0 12
38506: PUSH
38507: LD_VAR 0 2
38511: PPUSH
38512: LD_VAR 0 3
38516: PPUSH
38517: LD_VAR 0 4
38521: PPUSH
38522: LD_VAR 0 5
38526: PPUSH
38527: LD_VAR 0 1
38531: PUSH
38532: LD_INT 1
38534: ARRAY
38535: PPUSH
38536: CALL_OW 248
38540: PPUSH
38541: LD_INT 0
38543: PPUSH
38544: CALL 39948 0 6
38548: ST_TO_ADDR
// if not hexes then
38549: LD_VAR 0 12
38553: NOT
38554: IFFALSE 38558
// exit ;
38556: GO 39111
// for i = 1 to hexes do
38558: LD_ADDR_VAR 0 7
38562: PUSH
38563: DOUBLE
38564: LD_INT 1
38566: DEC
38567: ST_TO_ADDR
38568: LD_VAR 0 12
38572: PUSH
38573: FOR_TO
38574: IFFALSE 39109
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38576: LD_ADDR_VAR 0 11
38580: PUSH
38581: LD_VAR 0 12
38585: PUSH
38586: LD_VAR 0 7
38590: ARRAY
38591: PUSH
38592: LD_INT 1
38594: ARRAY
38595: PPUSH
38596: LD_VAR 0 12
38600: PUSH
38601: LD_VAR 0 7
38605: ARRAY
38606: PUSH
38607: LD_INT 2
38609: ARRAY
38610: PPUSH
38611: CALL_OW 428
38615: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38616: LD_VAR 0 12
38620: PUSH
38621: LD_VAR 0 7
38625: ARRAY
38626: PUSH
38627: LD_INT 1
38629: ARRAY
38630: PPUSH
38631: LD_VAR 0 12
38635: PUSH
38636: LD_VAR 0 7
38640: ARRAY
38641: PUSH
38642: LD_INT 2
38644: ARRAY
38645: PPUSH
38646: CALL_OW 351
38650: PUSH
38651: LD_VAR 0 12
38655: PUSH
38656: LD_VAR 0 7
38660: ARRAY
38661: PUSH
38662: LD_INT 1
38664: ARRAY
38665: PPUSH
38666: LD_VAR 0 12
38670: PUSH
38671: LD_VAR 0 7
38675: ARRAY
38676: PUSH
38677: LD_INT 2
38679: ARRAY
38680: PPUSH
38681: CALL_OW 488
38685: NOT
38686: OR
38687: PUSH
38688: LD_VAR 0 11
38692: PPUSH
38693: CALL_OW 247
38697: PUSH
38698: LD_INT 3
38700: EQUAL
38701: OR
38702: IFFALSE 38708
// exit ;
38704: POP
38705: POP
38706: GO 39111
// if not tmp or not tmp in base then
38708: LD_VAR 0 11
38712: NOT
38713: PUSH
38714: LD_VAR 0 11
38718: PUSH
38719: LD_VAR 0 1
38723: IN
38724: NOT
38725: OR
38726: IFFALSE 38730
// continue ;
38728: GO 38573
// result := true ;
38730: LD_ADDR_VAR 0 6
38734: PUSH
38735: LD_INT 1
38737: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38738: LD_ADDR_VAR 0 15
38742: PUSH
38743: LD_VAR 0 1
38747: PPUSH
38748: LD_INT 22
38750: PUSH
38751: LD_VAR 0 11
38755: PPUSH
38756: CALL_OW 255
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 2
38767: PUSH
38768: LD_INT 30
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 30
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: LIST
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PPUSH
38797: CALL_OW 72
38801: ST_TO_ADDR
// if dep then
38802: LD_VAR 0 15
38806: IFFALSE 38942
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38808: LD_ADDR_VAR 0 14
38812: PUSH
38813: LD_VAR 0 15
38817: PUSH
38818: LD_INT 1
38820: ARRAY
38821: PPUSH
38822: CALL_OW 250
38826: PPUSH
38827: LD_VAR 0 15
38831: PUSH
38832: LD_INT 1
38834: ARRAY
38835: PPUSH
38836: CALL_OW 254
38840: PPUSH
38841: LD_INT 5
38843: PPUSH
38844: CALL_OW 272
38848: PUSH
38849: LD_VAR 0 15
38853: PUSH
38854: LD_INT 1
38856: ARRAY
38857: PPUSH
38858: CALL_OW 251
38862: PPUSH
38863: LD_VAR 0 15
38867: PUSH
38868: LD_INT 1
38870: ARRAY
38871: PPUSH
38872: CALL_OW 254
38876: PPUSH
38877: LD_INT 5
38879: PPUSH
38880: CALL_OW 273
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38889: LD_VAR 0 14
38893: PUSH
38894: LD_INT 1
38896: ARRAY
38897: PPUSH
38898: LD_VAR 0 14
38902: PUSH
38903: LD_INT 2
38905: ARRAY
38906: PPUSH
38907: CALL_OW 488
38911: IFFALSE 38942
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38913: LD_VAR 0 11
38917: PPUSH
38918: LD_VAR 0 14
38922: PUSH
38923: LD_INT 1
38925: ARRAY
38926: PPUSH
38927: LD_VAR 0 14
38931: PUSH
38932: LD_INT 2
38934: ARRAY
38935: PPUSH
38936: CALL_OW 111
// continue ;
38940: GO 38573
// end ; end ; r := GetDir ( tmp ) ;
38942: LD_ADDR_VAR 0 13
38946: PUSH
38947: LD_VAR 0 11
38951: PPUSH
38952: CALL_OW 254
38956: ST_TO_ADDR
// if r = 5 then
38957: LD_VAR 0 13
38961: PUSH
38962: LD_INT 5
38964: EQUAL
38965: IFFALSE 38975
// r := 0 ;
38967: LD_ADDR_VAR 0 13
38971: PUSH
38972: LD_INT 0
38974: ST_TO_ADDR
// for j = r to 5 do
38975: LD_ADDR_VAR 0 8
38979: PUSH
38980: DOUBLE
38981: LD_VAR 0 13
38985: DEC
38986: ST_TO_ADDR
38987: LD_INT 5
38989: PUSH
38990: FOR_TO
38991: IFFALSE 39105
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38993: LD_ADDR_VAR 0 9
38997: PUSH
38998: LD_VAR 0 11
39002: PPUSH
39003: CALL_OW 250
39007: PPUSH
39008: LD_VAR 0 8
39012: PPUSH
39013: LD_INT 2
39015: PPUSH
39016: CALL_OW 272
39020: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39021: LD_ADDR_VAR 0 10
39025: PUSH
39026: LD_VAR 0 11
39030: PPUSH
39031: CALL_OW 251
39035: PPUSH
39036: LD_VAR 0 8
39040: PPUSH
39041: LD_INT 2
39043: PPUSH
39044: CALL_OW 273
39048: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39049: LD_VAR 0 9
39053: PPUSH
39054: LD_VAR 0 10
39058: PPUSH
39059: CALL_OW 488
39063: PUSH
39064: LD_VAR 0 9
39068: PPUSH
39069: LD_VAR 0 10
39073: PPUSH
39074: CALL_OW 428
39078: NOT
39079: AND
39080: IFFALSE 39103
// begin ComMoveXY ( tmp , _x , _y ) ;
39082: LD_VAR 0 11
39086: PPUSH
39087: LD_VAR 0 9
39091: PPUSH
39092: LD_VAR 0 10
39096: PPUSH
39097: CALL_OW 111
// break ;
39101: GO 39105
// end ; end ;
39103: GO 38990
39105: POP
39106: POP
// end ;
39107: GO 38573
39109: POP
39110: POP
// end ;
39111: LD_VAR 0 6
39115: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39116: LD_INT 0
39118: PPUSH
39119: PPUSH
39120: PPUSH
39121: PPUSH
39122: PPUSH
39123: PPUSH
39124: PPUSH
39125: PPUSH
39126: PPUSH
39127: PPUSH
// result := false ;
39128: LD_ADDR_VAR 0 6
39132: PUSH
39133: LD_INT 0
39135: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39136: LD_VAR 0 1
39140: NOT
39141: PUSH
39142: LD_VAR 0 1
39146: PPUSH
39147: CALL_OW 266
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: IN
39162: NOT
39163: OR
39164: PUSH
39165: LD_VAR 0 2
39169: NOT
39170: OR
39171: PUSH
39172: LD_VAR 0 5
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: LD_INT 2
39185: PUSH
39186: LD_INT 3
39188: PUSH
39189: LD_INT 4
39191: PUSH
39192: LD_INT 5
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: IN
39203: NOT
39204: OR
39205: PUSH
39206: LD_VAR 0 3
39210: PPUSH
39211: LD_VAR 0 4
39215: PPUSH
39216: CALL_OW 488
39220: NOT
39221: OR
39222: IFFALSE 39226
// exit ;
39224: GO 39943
// pom := GetBase ( depot ) ;
39226: LD_ADDR_VAR 0 10
39230: PUSH
39231: LD_VAR 0 1
39235: PPUSH
39236: CALL_OW 274
39240: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39241: LD_ADDR_VAR 0 11
39245: PUSH
39246: LD_VAR 0 2
39250: PPUSH
39251: LD_VAR 0 1
39255: PPUSH
39256: CALL_OW 248
39260: PPUSH
39261: CALL_OW 450
39265: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39266: LD_VAR 0 10
39270: PPUSH
39271: LD_INT 1
39273: PPUSH
39274: CALL_OW 275
39278: PUSH
39279: LD_VAR 0 11
39283: PUSH
39284: LD_INT 1
39286: ARRAY
39287: GREATEREQUAL
39288: PUSH
39289: LD_VAR 0 10
39293: PPUSH
39294: LD_INT 2
39296: PPUSH
39297: CALL_OW 275
39301: PUSH
39302: LD_VAR 0 11
39306: PUSH
39307: LD_INT 2
39309: ARRAY
39310: GREATEREQUAL
39311: AND
39312: PUSH
39313: LD_VAR 0 10
39317: PPUSH
39318: LD_INT 3
39320: PPUSH
39321: CALL_OW 275
39325: PUSH
39326: LD_VAR 0 11
39330: PUSH
39331: LD_INT 3
39333: ARRAY
39334: GREATEREQUAL
39335: AND
39336: NOT
39337: IFFALSE 39341
// exit ;
39339: GO 39943
// if GetBType ( depot ) = b_depot then
39341: LD_VAR 0 1
39345: PPUSH
39346: CALL_OW 266
39350: PUSH
39351: LD_INT 0
39353: EQUAL
39354: IFFALSE 39366
// dist := 28 else
39356: LD_ADDR_VAR 0 14
39360: PUSH
39361: LD_INT 28
39363: ST_TO_ADDR
39364: GO 39374
// dist := 36 ;
39366: LD_ADDR_VAR 0 14
39370: PUSH
39371: LD_INT 36
39373: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39374: LD_VAR 0 1
39378: PPUSH
39379: LD_VAR 0 3
39383: PPUSH
39384: LD_VAR 0 4
39388: PPUSH
39389: CALL_OW 297
39393: PUSH
39394: LD_VAR 0 14
39398: GREATER
39399: IFFALSE 39403
// exit ;
39401: GO 39943
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39403: LD_ADDR_VAR 0 12
39407: PUSH
39408: LD_VAR 0 2
39412: PPUSH
39413: LD_VAR 0 3
39417: PPUSH
39418: LD_VAR 0 4
39422: PPUSH
39423: LD_VAR 0 5
39427: PPUSH
39428: LD_VAR 0 1
39432: PPUSH
39433: CALL_OW 248
39437: PPUSH
39438: LD_INT 0
39440: PPUSH
39441: CALL 39948 0 6
39445: ST_TO_ADDR
// if not hexes then
39446: LD_VAR 0 12
39450: NOT
39451: IFFALSE 39455
// exit ;
39453: GO 39943
// hex := GetHexInfo ( x , y ) ;
39455: LD_ADDR_VAR 0 15
39459: PUSH
39460: LD_VAR 0 3
39464: PPUSH
39465: LD_VAR 0 4
39469: PPUSH
39470: CALL_OW 546
39474: ST_TO_ADDR
// if hex [ 1 ] then
39475: LD_VAR 0 15
39479: PUSH
39480: LD_INT 1
39482: ARRAY
39483: IFFALSE 39487
// exit ;
39485: GO 39943
// height := hex [ 2 ] ;
39487: LD_ADDR_VAR 0 13
39491: PUSH
39492: LD_VAR 0 15
39496: PUSH
39497: LD_INT 2
39499: ARRAY
39500: ST_TO_ADDR
// for i = 1 to hexes do
39501: LD_ADDR_VAR 0 7
39505: PUSH
39506: DOUBLE
39507: LD_INT 1
39509: DEC
39510: ST_TO_ADDR
39511: LD_VAR 0 12
39515: PUSH
39516: FOR_TO
39517: IFFALSE 39847
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39519: LD_VAR 0 12
39523: PUSH
39524: LD_VAR 0 7
39528: ARRAY
39529: PUSH
39530: LD_INT 1
39532: ARRAY
39533: PPUSH
39534: LD_VAR 0 12
39538: PUSH
39539: LD_VAR 0 7
39543: ARRAY
39544: PUSH
39545: LD_INT 2
39547: ARRAY
39548: PPUSH
39549: CALL_OW 488
39553: NOT
39554: PUSH
39555: LD_VAR 0 12
39559: PUSH
39560: LD_VAR 0 7
39564: ARRAY
39565: PUSH
39566: LD_INT 1
39568: ARRAY
39569: PPUSH
39570: LD_VAR 0 12
39574: PUSH
39575: LD_VAR 0 7
39579: ARRAY
39580: PUSH
39581: LD_INT 2
39583: ARRAY
39584: PPUSH
39585: CALL_OW 428
39589: PUSH
39590: LD_INT 0
39592: GREATER
39593: OR
39594: PUSH
39595: LD_VAR 0 12
39599: PUSH
39600: LD_VAR 0 7
39604: ARRAY
39605: PUSH
39606: LD_INT 1
39608: ARRAY
39609: PPUSH
39610: LD_VAR 0 12
39614: PUSH
39615: LD_VAR 0 7
39619: ARRAY
39620: PUSH
39621: LD_INT 2
39623: ARRAY
39624: PPUSH
39625: CALL_OW 351
39629: OR
39630: IFFALSE 39636
// exit ;
39632: POP
39633: POP
39634: GO 39943
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39636: LD_ADDR_VAR 0 8
39640: PUSH
39641: LD_VAR 0 12
39645: PUSH
39646: LD_VAR 0 7
39650: ARRAY
39651: PUSH
39652: LD_INT 1
39654: ARRAY
39655: PPUSH
39656: LD_VAR 0 12
39660: PUSH
39661: LD_VAR 0 7
39665: ARRAY
39666: PUSH
39667: LD_INT 2
39669: ARRAY
39670: PPUSH
39671: CALL_OW 546
39675: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39676: LD_VAR 0 8
39680: PUSH
39681: LD_INT 1
39683: ARRAY
39684: PUSH
39685: LD_VAR 0 8
39689: PUSH
39690: LD_INT 2
39692: ARRAY
39693: PUSH
39694: LD_VAR 0 13
39698: PUSH
39699: LD_INT 2
39701: PLUS
39702: GREATER
39703: OR
39704: PUSH
39705: LD_VAR 0 8
39709: PUSH
39710: LD_INT 2
39712: ARRAY
39713: PUSH
39714: LD_VAR 0 13
39718: PUSH
39719: LD_INT 2
39721: MINUS
39722: LESS
39723: OR
39724: PUSH
39725: LD_VAR 0 8
39729: PUSH
39730: LD_INT 3
39732: ARRAY
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: LD_INT 8
39739: PUSH
39740: LD_INT 9
39742: PUSH
39743: LD_INT 10
39745: PUSH
39746: LD_INT 11
39748: PUSH
39749: LD_INT 12
39751: PUSH
39752: LD_INT 13
39754: PUSH
39755: LD_INT 16
39757: PUSH
39758: LD_INT 17
39760: PUSH
39761: LD_INT 18
39763: PUSH
39764: LD_INT 19
39766: PUSH
39767: LD_INT 20
39769: PUSH
39770: LD_INT 21
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: IN
39788: NOT
39789: OR
39790: PUSH
39791: LD_VAR 0 8
39795: PUSH
39796: LD_INT 5
39798: ARRAY
39799: NOT
39800: OR
39801: PUSH
39802: LD_VAR 0 8
39806: PUSH
39807: LD_INT 6
39809: ARRAY
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: LD_INT 2
39816: PUSH
39817: LD_INT 7
39819: PUSH
39820: LD_INT 9
39822: PUSH
39823: LD_INT 10
39825: PUSH
39826: LD_INT 11
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: IN
39837: NOT
39838: OR
39839: IFFALSE 39845
// exit ;
39841: POP
39842: POP
39843: GO 39943
// end ;
39845: GO 39516
39847: POP
39848: POP
// side := GetSide ( depot ) ;
39849: LD_ADDR_VAR 0 9
39853: PUSH
39854: LD_VAR 0 1
39858: PPUSH
39859: CALL_OW 255
39863: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39864: LD_VAR 0 9
39868: PPUSH
39869: LD_VAR 0 3
39873: PPUSH
39874: LD_VAR 0 4
39878: PPUSH
39879: LD_INT 20
39881: PPUSH
39882: CALL 32597 0 4
39886: PUSH
39887: LD_INT 4
39889: ARRAY
39890: IFFALSE 39894
// exit ;
39892: GO 39943
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39894: LD_VAR 0 2
39898: PUSH
39899: LD_INT 29
39901: PUSH
39902: LD_INT 30
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: IN
39909: PUSH
39910: LD_VAR 0 3
39914: PPUSH
39915: LD_VAR 0 4
39919: PPUSH
39920: LD_VAR 0 9
39924: PPUSH
39925: CALL_OW 440
39929: NOT
39930: AND
39931: IFFALSE 39935
// exit ;
39933: GO 39943
// result := true ;
39935: LD_ADDR_VAR 0 6
39939: PUSH
39940: LD_INT 1
39942: ST_TO_ADDR
// end ;
39943: LD_VAR 0 6
39947: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39948: LD_INT 0
39950: PPUSH
39951: PPUSH
39952: PPUSH
39953: PPUSH
39954: PPUSH
39955: PPUSH
39956: PPUSH
39957: PPUSH
39958: PPUSH
39959: PPUSH
39960: PPUSH
39961: PPUSH
39962: PPUSH
39963: PPUSH
39964: PPUSH
39965: PPUSH
39966: PPUSH
39967: PPUSH
39968: PPUSH
39969: PPUSH
39970: PPUSH
39971: PPUSH
39972: PPUSH
39973: PPUSH
39974: PPUSH
39975: PPUSH
39976: PPUSH
39977: PPUSH
39978: PPUSH
39979: PPUSH
39980: PPUSH
39981: PPUSH
39982: PPUSH
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
39987: PPUSH
39988: PPUSH
39989: PPUSH
39990: PPUSH
39991: PPUSH
39992: PPUSH
39993: PPUSH
39994: PPUSH
39995: PPUSH
39996: PPUSH
39997: PPUSH
39998: PPUSH
39999: PPUSH
40000: PPUSH
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
// result = [ ] ;
40008: LD_ADDR_VAR 0 7
40012: PUSH
40013: EMPTY
40014: ST_TO_ADDR
// temp_list = [ ] ;
40015: LD_ADDR_VAR 0 9
40019: PUSH
40020: EMPTY
40021: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40022: LD_VAR 0 4
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: LD_INT 3
40038: PUSH
40039: LD_INT 4
40041: PUSH
40042: LD_INT 5
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: IN
40053: NOT
40054: PUSH
40055: LD_VAR 0 1
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: IN
40070: PUSH
40071: LD_VAR 0 5
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: LD_INT 3
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: LIST
40089: IN
40090: NOT
40091: AND
40092: OR
40093: IFFALSE 40097
// exit ;
40095: GO 58488
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40097: LD_VAR 0 1
40101: PUSH
40102: LD_INT 6
40104: PUSH
40105: LD_INT 7
40107: PUSH
40108: LD_INT 8
40110: PUSH
40111: LD_INT 13
40113: PUSH
40114: LD_INT 12
40116: PUSH
40117: LD_INT 15
40119: PUSH
40120: LD_INT 11
40122: PUSH
40123: LD_INT 14
40125: PUSH
40126: LD_INT 10
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: IN
40140: IFFALSE 40150
// btype = b_lab ;
40142: LD_ADDR_VAR 0 1
40146: PUSH
40147: LD_INT 6
40149: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40150: LD_VAR 0 6
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: LD_INT 2
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: LIST
40168: IN
40169: NOT
40170: PUSH
40171: LD_VAR 0 1
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: LD_INT 3
40187: PUSH
40188: LD_INT 6
40190: PUSH
40191: LD_INT 36
40193: PUSH
40194: LD_INT 4
40196: PUSH
40197: LD_INT 5
40199: PUSH
40200: LD_INT 31
40202: PUSH
40203: LD_INT 32
40205: PUSH
40206: LD_INT 33
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: IN
40222: NOT
40223: PUSH
40224: LD_VAR 0 6
40228: PUSH
40229: LD_INT 1
40231: EQUAL
40232: AND
40233: OR
40234: PUSH
40235: LD_VAR 0 1
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 3
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: IN
40250: NOT
40251: PUSH
40252: LD_VAR 0 6
40256: PUSH
40257: LD_INT 2
40259: EQUAL
40260: AND
40261: OR
40262: IFFALSE 40272
// mode = 0 ;
40264: LD_ADDR_VAR 0 6
40268: PUSH
40269: LD_INT 0
40271: ST_TO_ADDR
// case mode of 0 :
40272: LD_VAR 0 6
40276: PUSH
40277: LD_INT 0
40279: DOUBLE
40280: EQUAL
40281: IFTRUE 40285
40283: GO 51738
40285: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40286: LD_ADDR_VAR 0 11
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: LD_INT 2
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: LD_INT 3
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: LD_INT 3
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: LD_INT 2
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40479: LD_ADDR_VAR 0 12
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 2
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 2
40602: NEG
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: NEG
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 2
40625: NEG
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 3
40636: NEG
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 3
40647: NEG
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40675: LD_ADDR_VAR 0 13
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: NEG
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: LD_INT 2
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: LD_INT 2
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 2
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: LD_INT 2
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: LD_INT 3
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 3
40834: NEG
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 3
40846: NEG
40847: PUSH
40848: LD_INT 3
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40874: LD_ADDR_VAR 0 14
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: LD_INT 2
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: LD_INT 2
40970: NEG
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: LD_INT 3
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 3
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: LD_INT 2
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41070: LD_ADDR_VAR 0 15
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 2
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: NEG
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 2
41216: PUSH
41217: LD_INT 1
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 3
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 3
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41263: LD_ADDR_VAR 0 16
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 2
41398: NEG
41399: PUSH
41400: LD_INT 2
41402: NEG
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 3
41410: PUSH
41411: LD_INT 2
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 3
41420: PUSH
41421: LD_INT 3
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: PUSH
41431: LD_INT 3
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41456: LD_ADDR_VAR 0 17
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: LD_INT 1
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 1
41514: NEG
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 2
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 2
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: LD_INT 2
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: LD_INT 2
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 2
41632: NEG
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 2
41643: NEG
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 2
41655: NEG
41656: PUSH
41657: LD_INT 2
41659: NEG
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41686: LD_ADDR_VAR 0 18
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: LD_INT 1
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: NEG
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 2
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 2
41862: NEG
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 2
41873: NEG
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 2
41885: NEG
41886: PUSH
41887: LD_INT 2
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41916: LD_ADDR_VAR 0 19
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: LD_INT 2
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 2
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 2
42051: PUSH
42052: LD_INT 2
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 2
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 2
42092: NEG
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 2
42103: NEG
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 2
42115: NEG
42116: PUSH
42117: LD_INT 2
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42146: LD_ADDR_VAR 0 20
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: NEG
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: LD_INT 2
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 2
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 2
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: LD_INT 2
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 2
42322: NEG
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 2
42333: NEG
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 2
42345: NEG
42346: PUSH
42347: LD_INT 2
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42376: LD_ADDR_VAR 0 21
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 1
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: LD_INT 2
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 2
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 2
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 2
42511: PUSH
42512: LD_INT 2
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: LD_INT 2
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 2
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 2
42552: NEG
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: NEG
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 2
42575: NEG
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42606: LD_ADDR_VAR 0 22
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: NEG
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: LD_INT 2
42691: NEG
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 2
42702: NEG
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 2
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 2
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 2
42782: NEG
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 2
42793: NEG
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 2
42805: NEG
42806: PUSH
42807: LD_INT 2
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42836: LD_ADDR_VAR 0 23
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: LD_INT 2
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 2
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: NEG
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: LD_INT 3
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: LD_INT 3
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43116: LD_ADDR_VAR 0 24
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 2
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 2
43303: NEG
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: LD_INT 2
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 3
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 3
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43392: LD_ADDR_VAR 0 25
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 2
43579: NEG
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: NEG
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 3
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 3
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: LD_INT 3
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: LD_INT 3
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43666: LD_ADDR_VAR 0 26
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: LD_INT 2
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 2
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: LD_INT 2
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: NEG
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 2
43853: NEG
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 2
43865: NEG
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: PUSH
43878: LD_INT 3
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: LD_INT 3
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: LD_INT 2
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 2
43908: NEG
43909: PUSH
43910: LD_INT 1
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43942: LD_ADDR_VAR 0 27
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: LD_INT 2
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 2
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 2
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: PUSH
44078: LD_INT 2
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: LD_INT 2
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 2
44118: NEG
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 2
44141: NEG
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 2
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 3
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 3
44187: NEG
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44222: LD_ADDR_VAR 0 28
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: NEG
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: LD_INT 3
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: LD_INT 3
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 3
44457: NEG
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 3
44469: NEG
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44504: LD_ADDR_VAR 0 29
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: NEG
44695: PUSH
44696: LD_INT 3
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 3
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: LD_INT 3
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 3
44748: NEG
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44783: LD_ADDR_VAR 0 30
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: LD_INT 3
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 3
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: LD_INT 3
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: LD_INT 1
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 3
45026: NEG
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45061: LD_ADDR_VAR 0 31
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 3
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 3
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 3
45304: NEG
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45339: LD_ADDR_VAR 0 32
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 2
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 2
45505: NEG
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 3
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 3
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 3
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 3
45582: NEG
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45617: LD_ADDR_VAR 0 33
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 2
45807: NEG
45808: PUSH
45809: LD_INT 3
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 3
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 3
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 3
45861: NEG
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45896: LD_ADDR_VAR 0 34
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 3
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 3
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: LD_INT 3
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 2
46130: NEG
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 3
46141: NEG
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46176: LD_ADDR_VAR 0 35
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 2
46267: NEG
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46288: LD_ADDR_VAR 0 36
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46400: LD_ADDR_VAR 0 37
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46512: LD_ADDR_VAR 0 38
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46624: LD_ADDR_VAR 0 39
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 2
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46736: LD_ADDR_VAR 0 40
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46848: LD_ADDR_VAR 0 41
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: LD_INT 2
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 2
47003: NEG
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 2
47014: NEG
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 2
47038: NEG
47039: PUSH
47040: LD_INT 3
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 3
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 3
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: LD_INT 2
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 3
47091: PUSH
47092: LD_INT 3
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: LD_INT 3
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 3
47122: NEG
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 3
47133: NEG
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 3
47145: NEG
47146: PUSH
47147: LD_INT 2
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 3
47157: NEG
47158: PUSH
47159: LD_INT 3
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47198: LD_ADDR_VAR 0 42
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 2
47388: NEG
47389: PUSH
47390: LD_INT 3
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: LD_INT 3
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 3
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: LD_INT 3
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 3
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 3
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 3
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 3
47495: NEG
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 3
47507: NEG
47508: PUSH
47509: LD_INT 3
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47548: LD_ADDR_VAR 0 43
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: LD_INT 2
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: LD_INT 3
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: LD_INT 3
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 3
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: LD_INT 3
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 3
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 3
47844: NEG
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 3
47855: NEG
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47896: LD_ADDR_VAR 0 44
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 2
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: NEG
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: NEG
48075: PUSH
48076: LD_INT 2
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: LD_INT 3
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 3
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 3
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 3
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 3
48139: PUSH
48140: LD_INT 3
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 3
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 3
48170: NEG
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 3
48181: NEG
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 3
48193: NEG
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 3
48205: NEG
48206: PUSH
48207: LD_INT 3
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48246: LD_ADDR_VAR 0 45
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 2
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: NEG
48437: PUSH
48438: LD_INT 3
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 3
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: LD_INT 3
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 3
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 3
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 3
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 3
48543: NEG
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 3
48555: NEG
48556: PUSH
48557: LD_INT 3
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48596: LD_ADDR_VAR 0 46
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 3
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: LD_INT 3
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 2
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 3
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 3
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: LD_INT 3
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: LD_INT 3
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 3
48892: NEG
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 3
48903: NEG
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48944: LD_ADDR_VAR 0 47
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49095: LD_ADDR_VAR 0 48
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: LD_INT 2
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49242: LD_ADDR_VAR 0 49
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49386: LD_ADDR_VAR 0 50
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49530: LD_ADDR_VAR 0 51
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49677: LD_ADDR_VAR 0 52
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49828: LD_ADDR_VAR 0 53
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 2
49963: PUSH
49964: LD_INT 2
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 2
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 2
50015: NEG
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 2
50027: NEG
50028: PUSH
50029: LD_INT 2
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50058: LD_ADDR_VAR 0 54
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: LD_INT 2
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: NEG
50258: PUSH
50259: LD_INT 2
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50288: LD_ADDR_VAR 0 55
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: LD_INT 2
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: NEG
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: NEG
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50518: LD_ADDR_VAR 0 56
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 2
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 2
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50748: LD_ADDR_VAR 0 57
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: LD_INT 2
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 2
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50978: LD_ADDR_VAR 0 58
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: LD_INT 2
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: LD_INT 2
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: LD_INT 2
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 2
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 2
51154: NEG
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: NEG
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: LD_INT 2
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51208: LD_ADDR_VAR 0 59
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51296: LD_ADDR_VAR 0 60
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51384: LD_ADDR_VAR 0 61
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51472: LD_ADDR_VAR 0 62
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51560: LD_ADDR_VAR 0 63
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51648: LD_ADDR_VAR 0 64
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: ST_TO_ADDR
// end ; 1 :
51736: GO 57633
51738: LD_INT 1
51740: DOUBLE
51741: EQUAL
51742: IFTRUE 51746
51744: GO 54369
51746: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51747: LD_ADDR_VAR 0 11
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: LD_INT 3
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 3
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 2
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: LIST
51790: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51791: LD_ADDR_VAR 0 12
51795: PUSH
51796: LD_INT 2
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 3
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: LIST
51831: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51832: LD_ADDR_VAR 0 13
51836: PUSH
51837: LD_INT 3
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: LD_INT 3
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 2
51859: PUSH
51860: LD_INT 3
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: LIST
51871: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51872: LD_ADDR_VAR 0 14
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: LD_INT 3
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 3
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: LIST
51912: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51913: LD_ADDR_VAR 0 15
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 3
51931: NEG
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 3
51942: NEG
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51957: LD_ADDR_VAR 0 16
51961: PUSH
51962: LD_INT 2
51964: NEG
51965: PUSH
51966: LD_INT 3
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: NEG
51989: PUSH
51990: LD_INT 3
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52003: LD_ADDR_VAR 0 17
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: LD_INT 3
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 3
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52047: LD_ADDR_VAR 0 18
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 3
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 3
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: LIST
52087: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52088: LD_ADDR_VAR 0 19
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 3
52105: PUSH
52106: LD_INT 3
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: LD_INT 3
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: LIST
52127: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52128: LD_ADDR_VAR 0 20
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: LD_INT 3
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 3
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: LIST
52168: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52169: LD_ADDR_VAR 0 21
52173: PUSH
52174: LD_INT 2
52176: NEG
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 3
52187: NEG
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52213: LD_ADDR_VAR 0 22
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: LD_INT 3
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 3
52232: NEG
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 3
52244: NEG
52245: PUSH
52246: LD_INT 3
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: LIST
52258: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52259: LD_ADDR_VAR 0 23
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 3
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 4
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: LD_INT 3
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: LIST
52302: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52303: LD_ADDR_VAR 0 24
52307: PUSH
52308: LD_INT 3
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 3
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 4
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52344: LD_ADDR_VAR 0 25
52348: PUSH
52349: LD_INT 3
52351: PUSH
52352: LD_INT 3
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 4
52361: PUSH
52362: LD_INT 3
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 3
52371: PUSH
52372: LD_INT 4
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: LIST
52383: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52384: LD_ADDR_VAR 0 26
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: LD_INT 3
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: LD_INT 4
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: LD_INT 3
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: LIST
52424: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52425: LD_ADDR_VAR 0 27
52429: PUSH
52430: LD_INT 3
52432: NEG
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 3
52443: NEG
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 4
52454: NEG
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52469: LD_ADDR_VAR 0 28
52473: PUSH
52474: LD_INT 3
52476: NEG
52477: PUSH
52478: LD_INT 3
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 3
52488: NEG
52489: PUSH
52490: LD_INT 4
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 4
52500: NEG
52501: PUSH
52502: LD_INT 3
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: LIST
52514: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52515: LD_ADDR_VAR 0 29
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 3
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 3
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 4
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 4
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: LD_INT 3
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: LD_INT 5
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 5
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: LD_INT 4
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: LD_INT 6
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 6
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 5
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52670: LD_ADDR_VAR 0 30
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 3
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 3
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 3
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 4
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 4
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 4
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 5
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 5
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 5
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 6
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 6
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52813: LD_ADDR_VAR 0 31
52817: PUSH
52818: LD_INT 3
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 3
52830: PUSH
52831: LD_INT 3
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: LD_INT 3
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 4
52850: PUSH
52851: LD_INT 3
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 4
52860: PUSH
52861: LD_INT 4
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 3
52870: PUSH
52871: LD_INT 4
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 5
52880: PUSH
52881: LD_INT 4
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 5
52890: PUSH
52891: LD_INT 5
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 4
52900: PUSH
52901: LD_INT 5
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 6
52910: PUSH
52911: LD_INT 5
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 6
52920: PUSH
52921: LD_INT 6
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 5
52930: PUSH
52931: LD_INT 6
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52952: LD_ADDR_VAR 0 32
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 3
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 3
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: LD_INT 4
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 4
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 3
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: LD_INT 5
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: LD_INT 5
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: LD_INT 4
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: LD_INT 6
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 6
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: LD_INT 5
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53095: LD_ADDR_VAR 0 33
53099: PUSH
53100: LD_INT 2
53102: NEG
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 3
53113: NEG
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 3
53124: NEG
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 3
53136: NEG
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 4
53147: NEG
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 4
53158: NEG
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 4
53170: NEG
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 5
53181: NEG
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 5
53192: NEG
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 5
53204: NEG
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 6
53215: NEG
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 6
53226: NEG
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53250: LD_ADDR_VAR 0 34
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: LD_INT 3
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 3
53269: NEG
53270: PUSH
53271: LD_INT 2
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 3
53281: NEG
53282: PUSH
53283: LD_INT 3
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 3
53293: NEG
53294: PUSH
53295: LD_INT 4
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 4
53305: NEG
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 4
53317: NEG
53318: PUSH
53319: LD_INT 4
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 4
53329: NEG
53330: PUSH
53331: LD_INT 5
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 5
53341: NEG
53342: PUSH
53343: LD_INT 4
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 5
53353: NEG
53354: PUSH
53355: LD_INT 5
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 5
53365: NEG
53366: PUSH
53367: LD_INT 6
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 6
53377: NEG
53378: PUSH
53379: LD_INT 5
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 6
53389: NEG
53390: PUSH
53391: LD_INT 6
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53413: LD_ADDR_VAR 0 41
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 3
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 2
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: LIST
53456: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53457: LD_ADDR_VAR 0 42
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 2
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 3
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: LIST
53497: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53498: LD_ADDR_VAR 0 43
53502: PUSH
53503: LD_INT 2
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 3
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: LD_INT 3
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: LIST
53537: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53538: LD_ADDR_VAR 0 44
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 3
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: LIST
53578: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53579: LD_ADDR_VAR 0 45
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 3
53608: NEG
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: LIST
53622: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53623: LD_ADDR_VAR 0 46
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: LD_INT 3
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 3
53654: NEG
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: LIST
53668: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53669: LD_ADDR_VAR 0 47
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: LD_INT 3
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 3
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53702: LD_ADDR_VAR 0 48
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53733: LD_ADDR_VAR 0 49
53737: PUSH
53738: LD_INT 3
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 3
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53762: LD_ADDR_VAR 0 50
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: LD_INT 3
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: LD_INT 3
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53791: LD_ADDR_VAR 0 51
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53822: LD_ADDR_VAR 0 52
53826: PUSH
53827: LD_INT 3
53829: NEG
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53855: LD_ADDR_VAR 0 53
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 3
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 3
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 2
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: LIST
53898: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53899: LD_ADDR_VAR 0 54
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 3
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 3
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53940: LD_ADDR_VAR 0 55
53944: PUSH
53945: LD_INT 3
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 3
53957: PUSH
53958: LD_INT 3
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 2
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: LIST
53979: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53980: LD_ADDR_VAR 0 56
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 3
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 2
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: LIST
54020: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54021: LD_ADDR_VAR 0 57
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 3
54039: NEG
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 3
54050: NEG
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: LIST
54064: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54065: LD_ADDR_VAR 0 58
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: LD_INT 3
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 3
54084: NEG
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 3
54096: NEG
54097: PUSH
54098: LD_INT 3
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: LIST
54110: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54111: LD_ADDR_VAR 0 59
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: LD_INT 2
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: LIST
54154: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54155: LD_ADDR_VAR 0 60
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: LIST
54195: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54196: LD_ADDR_VAR 0 61
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: LIST
54235: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54236: LD_ADDR_VAR 0 62
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54277: LD_ADDR_VAR 0 63
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54321: LD_ADDR_VAR 0 64
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: LD_INT 2
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: LD_INT 2
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: LIST
54366: ST_TO_ADDR
// end ; 2 :
54367: GO 57633
54369: LD_INT 2
54371: DOUBLE
54372: EQUAL
54373: IFTRUE 54377
54375: GO 57632
54377: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54378: LD_ADDR_VAR 0 29
54382: PUSH
54383: LD_INT 4
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 4
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 5
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 5
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 4
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 3
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 5
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 3
54478: PUSH
54479: LD_INT 3
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 3
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 4
54498: PUSH
54499: LD_INT 3
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 4
54508: PUSH
54509: LD_INT 4
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: PUSH
54519: LD_INT 4
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 3
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 4
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: LD_INT 4
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 4
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: LD_INT 3
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 4
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 5
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 5
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 4
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: LD_INT 5
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: LD_INT 3
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 3
54661: NEG
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 3
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: NEG
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 3
54706: NEG
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 4
54717: NEG
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 4
54728: NEG
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 4
54740: NEG
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: LD_INT 2
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 4
54763: NEG
54764: PUSH
54765: LD_INT 4
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 4
54775: NEG
54776: PUSH
54777: LD_INT 5
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 3
54787: NEG
54788: PUSH
54789: LD_INT 4
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 3
54799: NEG
54800: PUSH
54801: LD_INT 3
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 4
54811: NEG
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 5
54823: NEG
54824: PUSH
54825: LD_INT 4
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 5
54835: NEG
54836: PUSH
54837: LD_INT 5
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 3
54847: NEG
54848: PUSH
54849: LD_INT 5
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 5
54859: NEG
54860: PUSH
54861: LD_INT 3
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54916: LD_ADDR_VAR 0 30
54920: PUSH
54921: LD_INT 4
54923: PUSH
54924: LD_INT 4
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 4
54933: PUSH
54934: LD_INT 3
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 5
54943: PUSH
54944: LD_INT 4
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 5
54953: PUSH
54954: LD_INT 5
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 4
54963: PUSH
54964: LD_INT 5
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 3
54973: PUSH
54974: LD_INT 4
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 3
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 5
54993: PUSH
54994: LD_INT 3
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 3
55003: PUSH
55004: LD_INT 5
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_INT 3
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 3
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 4
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 4
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: LD_INT 3
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 4
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: LD_INT 2
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 4
55106: NEG
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 4
55117: NEG
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 3
55129: NEG
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 3
55140: NEG
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 4
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 5
55162: NEG
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 5
55173: NEG
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 5
55185: NEG
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 3
55197: NEG
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 3
55208: NEG
55209: PUSH
55210: LD_INT 3
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: NEG
55221: PUSH
55222: LD_INT 4
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: LD_INT 3
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 2
55244: NEG
55245: PUSH
55246: LD_INT 2
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 3
55256: NEG
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 4
55268: NEG
55269: PUSH
55270: LD_INT 3
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 4
55280: NEG
55281: PUSH
55282: LD_INT 4
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: LD_INT 4
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 4
55304: NEG
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 4
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 5
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: LD_INT 4
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 3
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 3
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: LD_INT 4
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: LD_INT 5
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: PUSH
55396: LD_INT 3
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: LD_INT 5
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55463: LD_ADDR_VAR 0 31
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 4
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: LD_INT 4
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: LD_INT 5
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: LD_INT 5
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: LD_INT 4
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 5
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: LD_INT 3
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 3
55563: NEG
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 3
55574: NEG
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 3
55608: NEG
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 4
55619: NEG
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 4
55630: NEG
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 4
55642: NEG
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 4
55665: NEG
55666: PUSH
55667: LD_INT 4
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 4
55677: NEG
55678: PUSH
55679: LD_INT 5
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 3
55689: NEG
55690: PUSH
55691: LD_INT 4
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 3
55701: NEG
55702: PUSH
55703: LD_INT 3
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 4
55713: NEG
55714: PUSH
55715: LD_INT 3
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 5
55725: NEG
55726: PUSH
55727: LD_INT 4
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 5
55737: NEG
55738: PUSH
55739: LD_INT 5
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 3
55749: NEG
55750: PUSH
55751: LD_INT 5
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 5
55761: NEG
55762: PUSH
55763: LD_INT 3
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: LD_INT 3
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: LD_INT 4
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: LD_INT 3
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 3
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: LD_INT 4
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: LD_INT 2
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: LD_INT 4
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 4
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 4
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 5
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 5
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 4
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 3
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 3
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 3
55947: PUSH
55948: LD_INT 2
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 5
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56013: LD_ADDR_VAR 0 32
56017: PUSH
56018: LD_INT 4
56020: NEG
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 4
56031: NEG
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 3
56043: NEG
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 3
56054: NEG
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 4
56065: NEG
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 5
56076: NEG
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 5
56087: NEG
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 5
56099: NEG
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 3
56111: NEG
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 3
56122: NEG
56123: PUSH
56124: LD_INT 3
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 3
56134: NEG
56135: PUSH
56136: LD_INT 4
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 2
56146: NEG
56147: PUSH
56148: LD_INT 3
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 4
56182: NEG
56183: PUSH
56184: LD_INT 3
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 4
56194: NEG
56195: PUSH
56196: LD_INT 4
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: LD_INT 4
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 4
56218: NEG
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 4
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: LD_INT 5
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: LD_INT 4
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: LD_INT 4
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 5
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: LD_INT 3
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: LD_INT 5
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 3
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 3
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 4
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 4
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 3
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 4
56415: PUSH
56416: LD_INT 2
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 4
56425: PUSH
56426: LD_INT 4
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 4
56435: PUSH
56436: LD_INT 3
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 5
56445: PUSH
56446: LD_INT 4
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 5
56455: PUSH
56456: LD_INT 5
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 4
56465: PUSH
56466: LD_INT 5
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 3
56475: PUSH
56476: LD_INT 4
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: LD_INT 3
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 5
56495: PUSH
56496: LD_INT 3
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 3
56505: PUSH
56506: LD_INT 5
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56560: LD_ADDR_VAR 0 33
56564: PUSH
56565: LD_INT 4
56567: NEG
56568: PUSH
56569: LD_INT 4
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 4
56579: NEG
56580: PUSH
56581: LD_INT 5
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: LD_INT 4
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: LD_INT 3
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 4
56615: NEG
56616: PUSH
56617: LD_INT 3
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 5
56627: NEG
56628: PUSH
56629: LD_INT 4
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 5
56639: NEG
56640: PUSH
56641: LD_INT 5
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: NEG
56652: PUSH
56653: LD_INT 5
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 5
56663: NEG
56664: PUSH
56665: LD_INT 3
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: LD_INT 3
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: LD_INT 4
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: LD_INT 3
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 3
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 4
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: NEG
56766: PUSH
56767: LD_INT 4
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 4
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 4
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 5
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 5
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 4
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 3
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 3
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 5
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 3
56870: PUSH
56871: LD_INT 3
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 3
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 4
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 4
56900: PUSH
56901: LD_INT 4
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 3
56910: PUSH
56911: LD_INT 4
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: PUSH
56921: LD_INT 3
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 4
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: LD_INT 4
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 4
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 3
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 4
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 5
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: LD_INT 5
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 4
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 3
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: LD_INT 5
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: LD_INT 3
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57098: LD_ADDR_VAR 0 34
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: LD_INT 4
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 5
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: LD_INT 4
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 3
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: LD_INT 3
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 4
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: LD_INT 5
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 2
57184: PUSH
57185: LD_INT 3
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 2
57195: NEG
57196: PUSH
57197: LD_INT 5
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 3
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 3
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 4
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 4
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 3
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 2
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 2
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 4
57290: PUSH
57291: LD_INT 2
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 4
57300: PUSH
57301: LD_INT 4
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 4
57310: PUSH
57311: LD_INT 3
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 5
57320: PUSH
57321: LD_INT 4
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 5
57330: PUSH
57331: LD_INT 5
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 4
57340: PUSH
57341: LD_INT 5
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 3
57350: PUSH
57351: LD_INT 4
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 3
57360: PUSH
57361: LD_INT 3
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 5
57370: PUSH
57371: LD_INT 3
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 3
57380: PUSH
57381: LD_INT 5
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: LD_INT 3
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 3
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 4
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 4
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: LD_INT 3
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: NEG
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: LD_INT 4
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 4
57483: NEG
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 4
57494: NEG
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 3
57506: NEG
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 3
57517: NEG
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 4
57528: NEG
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 5
57539: NEG
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 5
57550: NEG
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 5
57562: NEG
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 3
57574: NEG
57575: PUSH
57576: LD_INT 2
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: ST_TO_ADDR
// end ; end ;
57630: GO 57633
57632: POP
// case btype of b_depot , b_warehouse :
57633: LD_VAR 0 1
57637: PUSH
57638: LD_INT 0
57640: DOUBLE
57641: EQUAL
57642: IFTRUE 57652
57644: LD_INT 1
57646: DOUBLE
57647: EQUAL
57648: IFTRUE 57652
57650: GO 57853
57652: POP
// case nation of nation_american :
57653: LD_VAR 0 5
57657: PUSH
57658: LD_INT 1
57660: DOUBLE
57661: EQUAL
57662: IFTRUE 57666
57664: GO 57722
57666: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57667: LD_ADDR_VAR 0 9
57671: PUSH
57672: LD_VAR 0 11
57676: PUSH
57677: LD_VAR 0 12
57681: PUSH
57682: LD_VAR 0 13
57686: PUSH
57687: LD_VAR 0 14
57691: PUSH
57692: LD_VAR 0 15
57696: PUSH
57697: LD_VAR 0 16
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: PUSH
57710: LD_VAR 0 4
57714: PUSH
57715: LD_INT 1
57717: PLUS
57718: ARRAY
57719: ST_TO_ADDR
57720: GO 57851
57722: LD_INT 2
57724: DOUBLE
57725: EQUAL
57726: IFTRUE 57730
57728: GO 57786
57730: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57731: LD_ADDR_VAR 0 9
57735: PUSH
57736: LD_VAR 0 17
57740: PUSH
57741: LD_VAR 0 18
57745: PUSH
57746: LD_VAR 0 19
57750: PUSH
57751: LD_VAR 0 20
57755: PUSH
57756: LD_VAR 0 21
57760: PUSH
57761: LD_VAR 0 22
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: PUSH
57774: LD_VAR 0 4
57778: PUSH
57779: LD_INT 1
57781: PLUS
57782: ARRAY
57783: ST_TO_ADDR
57784: GO 57851
57786: LD_INT 3
57788: DOUBLE
57789: EQUAL
57790: IFTRUE 57794
57792: GO 57850
57794: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57795: LD_ADDR_VAR 0 9
57799: PUSH
57800: LD_VAR 0 23
57804: PUSH
57805: LD_VAR 0 24
57809: PUSH
57810: LD_VAR 0 25
57814: PUSH
57815: LD_VAR 0 26
57819: PUSH
57820: LD_VAR 0 27
57824: PUSH
57825: LD_VAR 0 28
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: PUSH
57838: LD_VAR 0 4
57842: PUSH
57843: LD_INT 1
57845: PLUS
57846: ARRAY
57847: ST_TO_ADDR
57848: GO 57851
57850: POP
57851: GO 58406
57853: LD_INT 2
57855: DOUBLE
57856: EQUAL
57857: IFTRUE 57867
57859: LD_INT 3
57861: DOUBLE
57862: EQUAL
57863: IFTRUE 57867
57865: GO 57923
57867: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57868: LD_ADDR_VAR 0 9
57872: PUSH
57873: LD_VAR 0 29
57877: PUSH
57878: LD_VAR 0 30
57882: PUSH
57883: LD_VAR 0 31
57887: PUSH
57888: LD_VAR 0 32
57892: PUSH
57893: LD_VAR 0 33
57897: PUSH
57898: LD_VAR 0 34
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: PUSH
57911: LD_VAR 0 4
57915: PUSH
57916: LD_INT 1
57918: PLUS
57919: ARRAY
57920: ST_TO_ADDR
57921: GO 58406
57923: LD_INT 16
57925: DOUBLE
57926: EQUAL
57927: IFTRUE 57985
57929: LD_INT 17
57931: DOUBLE
57932: EQUAL
57933: IFTRUE 57985
57935: LD_INT 18
57937: DOUBLE
57938: EQUAL
57939: IFTRUE 57985
57941: LD_INT 19
57943: DOUBLE
57944: EQUAL
57945: IFTRUE 57985
57947: LD_INT 22
57949: DOUBLE
57950: EQUAL
57951: IFTRUE 57985
57953: LD_INT 20
57955: DOUBLE
57956: EQUAL
57957: IFTRUE 57985
57959: LD_INT 21
57961: DOUBLE
57962: EQUAL
57963: IFTRUE 57985
57965: LD_INT 23
57967: DOUBLE
57968: EQUAL
57969: IFTRUE 57985
57971: LD_INT 24
57973: DOUBLE
57974: EQUAL
57975: IFTRUE 57985
57977: LD_INT 25
57979: DOUBLE
57980: EQUAL
57981: IFTRUE 57985
57983: GO 58041
57985: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57986: LD_ADDR_VAR 0 9
57990: PUSH
57991: LD_VAR 0 35
57995: PUSH
57996: LD_VAR 0 36
58000: PUSH
58001: LD_VAR 0 37
58005: PUSH
58006: LD_VAR 0 38
58010: PUSH
58011: LD_VAR 0 39
58015: PUSH
58016: LD_VAR 0 40
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: PUSH
58029: LD_VAR 0 4
58033: PUSH
58034: LD_INT 1
58036: PLUS
58037: ARRAY
58038: ST_TO_ADDR
58039: GO 58406
58041: LD_INT 6
58043: DOUBLE
58044: EQUAL
58045: IFTRUE 58097
58047: LD_INT 7
58049: DOUBLE
58050: EQUAL
58051: IFTRUE 58097
58053: LD_INT 8
58055: DOUBLE
58056: EQUAL
58057: IFTRUE 58097
58059: LD_INT 13
58061: DOUBLE
58062: EQUAL
58063: IFTRUE 58097
58065: LD_INT 12
58067: DOUBLE
58068: EQUAL
58069: IFTRUE 58097
58071: LD_INT 15
58073: DOUBLE
58074: EQUAL
58075: IFTRUE 58097
58077: LD_INT 11
58079: DOUBLE
58080: EQUAL
58081: IFTRUE 58097
58083: LD_INT 14
58085: DOUBLE
58086: EQUAL
58087: IFTRUE 58097
58089: LD_INT 10
58091: DOUBLE
58092: EQUAL
58093: IFTRUE 58097
58095: GO 58153
58097: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58098: LD_ADDR_VAR 0 9
58102: PUSH
58103: LD_VAR 0 41
58107: PUSH
58108: LD_VAR 0 42
58112: PUSH
58113: LD_VAR 0 43
58117: PUSH
58118: LD_VAR 0 44
58122: PUSH
58123: LD_VAR 0 45
58127: PUSH
58128: LD_VAR 0 46
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: PUSH
58141: LD_VAR 0 4
58145: PUSH
58146: LD_INT 1
58148: PLUS
58149: ARRAY
58150: ST_TO_ADDR
58151: GO 58406
58153: LD_INT 36
58155: DOUBLE
58156: EQUAL
58157: IFTRUE 58161
58159: GO 58217
58161: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58162: LD_ADDR_VAR 0 9
58166: PUSH
58167: LD_VAR 0 47
58171: PUSH
58172: LD_VAR 0 48
58176: PUSH
58177: LD_VAR 0 49
58181: PUSH
58182: LD_VAR 0 50
58186: PUSH
58187: LD_VAR 0 51
58191: PUSH
58192: LD_VAR 0 52
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: PUSH
58205: LD_VAR 0 4
58209: PUSH
58210: LD_INT 1
58212: PLUS
58213: ARRAY
58214: ST_TO_ADDR
58215: GO 58406
58217: LD_INT 4
58219: DOUBLE
58220: EQUAL
58221: IFTRUE 58243
58223: LD_INT 5
58225: DOUBLE
58226: EQUAL
58227: IFTRUE 58243
58229: LD_INT 34
58231: DOUBLE
58232: EQUAL
58233: IFTRUE 58243
58235: LD_INT 37
58237: DOUBLE
58238: EQUAL
58239: IFTRUE 58243
58241: GO 58299
58243: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58244: LD_ADDR_VAR 0 9
58248: PUSH
58249: LD_VAR 0 53
58253: PUSH
58254: LD_VAR 0 54
58258: PUSH
58259: LD_VAR 0 55
58263: PUSH
58264: LD_VAR 0 56
58268: PUSH
58269: LD_VAR 0 57
58273: PUSH
58274: LD_VAR 0 58
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: PUSH
58287: LD_VAR 0 4
58291: PUSH
58292: LD_INT 1
58294: PLUS
58295: ARRAY
58296: ST_TO_ADDR
58297: GO 58406
58299: LD_INT 31
58301: DOUBLE
58302: EQUAL
58303: IFTRUE 58349
58305: LD_INT 32
58307: DOUBLE
58308: EQUAL
58309: IFTRUE 58349
58311: LD_INT 33
58313: DOUBLE
58314: EQUAL
58315: IFTRUE 58349
58317: LD_INT 27
58319: DOUBLE
58320: EQUAL
58321: IFTRUE 58349
58323: LD_INT 26
58325: DOUBLE
58326: EQUAL
58327: IFTRUE 58349
58329: LD_INT 28
58331: DOUBLE
58332: EQUAL
58333: IFTRUE 58349
58335: LD_INT 29
58337: DOUBLE
58338: EQUAL
58339: IFTRUE 58349
58341: LD_INT 30
58343: DOUBLE
58344: EQUAL
58345: IFTRUE 58349
58347: GO 58405
58349: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58350: LD_ADDR_VAR 0 9
58354: PUSH
58355: LD_VAR 0 59
58359: PUSH
58360: LD_VAR 0 60
58364: PUSH
58365: LD_VAR 0 61
58369: PUSH
58370: LD_VAR 0 62
58374: PUSH
58375: LD_VAR 0 63
58379: PUSH
58380: LD_VAR 0 64
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: PUSH
58393: LD_VAR 0 4
58397: PUSH
58398: LD_INT 1
58400: PLUS
58401: ARRAY
58402: ST_TO_ADDR
58403: GO 58406
58405: POP
// temp_list2 = [ ] ;
58406: LD_ADDR_VAR 0 10
58410: PUSH
58411: EMPTY
58412: ST_TO_ADDR
// for i in temp_list do
58413: LD_ADDR_VAR 0 8
58417: PUSH
58418: LD_VAR 0 9
58422: PUSH
58423: FOR_IN
58424: IFFALSE 58476
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58426: LD_ADDR_VAR 0 10
58430: PUSH
58431: LD_VAR 0 10
58435: PUSH
58436: LD_VAR 0 8
58440: PUSH
58441: LD_INT 1
58443: ARRAY
58444: PUSH
58445: LD_VAR 0 2
58449: PLUS
58450: PUSH
58451: LD_VAR 0 8
58455: PUSH
58456: LD_INT 2
58458: ARRAY
58459: PUSH
58460: LD_VAR 0 3
58464: PLUS
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: EMPTY
58471: LIST
58472: ADD
58473: ST_TO_ADDR
58474: GO 58423
58476: POP
58477: POP
// result = temp_list2 ;
58478: LD_ADDR_VAR 0 7
58482: PUSH
58483: LD_VAR 0 10
58487: ST_TO_ADDR
// end ;
58488: LD_VAR 0 7
58492: RET
// export function EnemyInRange ( unit , dist ) ; begin
58493: LD_INT 0
58495: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58496: LD_ADDR_VAR 0 3
58500: PUSH
58501: LD_VAR 0 1
58505: PPUSH
58506: CALL_OW 255
58510: PPUSH
58511: LD_VAR 0 1
58515: PPUSH
58516: CALL_OW 250
58520: PPUSH
58521: LD_VAR 0 1
58525: PPUSH
58526: CALL_OW 251
58530: PPUSH
58531: LD_VAR 0 2
58535: PPUSH
58536: CALL 32597 0 4
58540: PUSH
58541: LD_INT 4
58543: ARRAY
58544: ST_TO_ADDR
// end ;
58545: LD_VAR 0 3
58549: RET
// export function PlayerSeeMe ( unit ) ; begin
58550: LD_INT 0
58552: PPUSH
// result := See ( your_side , unit ) ;
58553: LD_ADDR_VAR 0 2
58557: PUSH
58558: LD_OWVAR 2
58562: PPUSH
58563: LD_VAR 0 1
58567: PPUSH
58568: CALL_OW 292
58572: ST_TO_ADDR
// end ;
58573: LD_VAR 0 2
58577: RET
// export function ReverseDir ( unit ) ; begin
58578: LD_INT 0
58580: PPUSH
// if not unit then
58581: LD_VAR 0 1
58585: NOT
58586: IFFALSE 58590
// exit ;
58588: GO 58613
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58590: LD_ADDR_VAR 0 2
58594: PUSH
58595: LD_VAR 0 1
58599: PPUSH
58600: CALL_OW 254
58604: PUSH
58605: LD_INT 3
58607: PLUS
58608: PUSH
58609: LD_INT 6
58611: MOD
58612: ST_TO_ADDR
// end ;
58613: LD_VAR 0 2
58617: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58618: LD_INT 0
58620: PPUSH
58621: PPUSH
58622: PPUSH
58623: PPUSH
58624: PPUSH
// if not hexes then
58625: LD_VAR 0 2
58629: NOT
58630: IFFALSE 58634
// exit ;
58632: GO 58782
// dist := 9999 ;
58634: LD_ADDR_VAR 0 5
58638: PUSH
58639: LD_INT 9999
58641: ST_TO_ADDR
// for i = 1 to hexes do
58642: LD_ADDR_VAR 0 4
58646: PUSH
58647: DOUBLE
58648: LD_INT 1
58650: DEC
58651: ST_TO_ADDR
58652: LD_VAR 0 2
58656: PUSH
58657: FOR_TO
58658: IFFALSE 58770
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58660: LD_VAR 0 1
58664: PPUSH
58665: LD_VAR 0 2
58669: PUSH
58670: LD_VAR 0 4
58674: ARRAY
58675: PUSH
58676: LD_INT 1
58678: ARRAY
58679: PPUSH
58680: LD_VAR 0 2
58684: PUSH
58685: LD_VAR 0 4
58689: ARRAY
58690: PUSH
58691: LD_INT 2
58693: ARRAY
58694: PPUSH
58695: CALL_OW 297
58699: PUSH
58700: LD_VAR 0 5
58704: LESS
58705: IFFALSE 58768
// begin hex := hexes [ i ] ;
58707: LD_ADDR_VAR 0 7
58711: PUSH
58712: LD_VAR 0 2
58716: PUSH
58717: LD_VAR 0 4
58721: ARRAY
58722: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58723: LD_ADDR_VAR 0 5
58727: PUSH
58728: LD_VAR 0 1
58732: PPUSH
58733: LD_VAR 0 2
58737: PUSH
58738: LD_VAR 0 4
58742: ARRAY
58743: PUSH
58744: LD_INT 1
58746: ARRAY
58747: PPUSH
58748: LD_VAR 0 2
58752: PUSH
58753: LD_VAR 0 4
58757: ARRAY
58758: PUSH
58759: LD_INT 2
58761: ARRAY
58762: PPUSH
58763: CALL_OW 297
58767: ST_TO_ADDR
// end ; end ;
58768: GO 58657
58770: POP
58771: POP
// result := hex ;
58772: LD_ADDR_VAR 0 3
58776: PUSH
58777: LD_VAR 0 7
58781: ST_TO_ADDR
// end ;
58782: LD_VAR 0 3
58786: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58787: LD_INT 0
58789: PPUSH
58790: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58791: LD_VAR 0 1
58795: NOT
58796: PUSH
58797: LD_VAR 0 1
58801: PUSH
58802: LD_INT 21
58804: PUSH
58805: LD_INT 2
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 23
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PPUSH
58826: CALL_OW 69
58830: IN
58831: NOT
58832: OR
58833: IFFALSE 58837
// exit ;
58835: GO 58884
// for i = 1 to 3 do
58837: LD_ADDR_VAR 0 3
58841: PUSH
58842: DOUBLE
58843: LD_INT 1
58845: DEC
58846: ST_TO_ADDR
58847: LD_INT 3
58849: PUSH
58850: FOR_TO
58851: IFFALSE 58882
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58853: LD_VAR 0 1
58857: PPUSH
58858: CALL_OW 250
58862: PPUSH
58863: LD_VAR 0 1
58867: PPUSH
58868: CALL_OW 251
58872: PPUSH
58873: LD_INT 1
58875: PPUSH
58876: CALL_OW 453
58880: GO 58850
58882: POP
58883: POP
// end ;
58884: LD_VAR 0 2
58888: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58889: LD_INT 0
58891: PPUSH
58892: PPUSH
58893: PPUSH
58894: PPUSH
58895: PPUSH
58896: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58897: LD_VAR 0 1
58901: NOT
58902: PUSH
58903: LD_VAR 0 2
58907: NOT
58908: OR
58909: PUSH
58910: LD_VAR 0 1
58914: PPUSH
58915: CALL_OW 314
58919: OR
58920: IFFALSE 58924
// exit ;
58922: GO 59365
// x := GetX ( enemy_unit ) ;
58924: LD_ADDR_VAR 0 7
58928: PUSH
58929: LD_VAR 0 2
58933: PPUSH
58934: CALL_OW 250
58938: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58939: LD_ADDR_VAR 0 8
58943: PUSH
58944: LD_VAR 0 2
58948: PPUSH
58949: CALL_OW 251
58953: ST_TO_ADDR
// if not x or not y then
58954: LD_VAR 0 7
58958: NOT
58959: PUSH
58960: LD_VAR 0 8
58964: NOT
58965: OR
58966: IFFALSE 58970
// exit ;
58968: GO 59365
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58970: LD_ADDR_VAR 0 6
58974: PUSH
58975: LD_VAR 0 7
58979: PPUSH
58980: LD_INT 0
58982: PPUSH
58983: LD_INT 4
58985: PPUSH
58986: CALL_OW 272
58990: PUSH
58991: LD_VAR 0 8
58995: PPUSH
58996: LD_INT 0
58998: PPUSH
58999: LD_INT 4
59001: PPUSH
59002: CALL_OW 273
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_VAR 0 7
59015: PPUSH
59016: LD_INT 1
59018: PPUSH
59019: LD_INT 4
59021: PPUSH
59022: CALL_OW 272
59026: PUSH
59027: LD_VAR 0 8
59031: PPUSH
59032: LD_INT 1
59034: PPUSH
59035: LD_INT 4
59037: PPUSH
59038: CALL_OW 273
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_VAR 0 7
59051: PPUSH
59052: LD_INT 2
59054: PPUSH
59055: LD_INT 4
59057: PPUSH
59058: CALL_OW 272
59062: PUSH
59063: LD_VAR 0 8
59067: PPUSH
59068: LD_INT 2
59070: PPUSH
59071: LD_INT 4
59073: PPUSH
59074: CALL_OW 273
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_VAR 0 7
59087: PPUSH
59088: LD_INT 3
59090: PPUSH
59091: LD_INT 4
59093: PPUSH
59094: CALL_OW 272
59098: PUSH
59099: LD_VAR 0 8
59103: PPUSH
59104: LD_INT 3
59106: PPUSH
59107: LD_INT 4
59109: PPUSH
59110: CALL_OW 273
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_VAR 0 7
59123: PPUSH
59124: LD_INT 4
59126: PPUSH
59127: LD_INT 4
59129: PPUSH
59130: CALL_OW 272
59134: PUSH
59135: LD_VAR 0 8
59139: PPUSH
59140: LD_INT 4
59142: PPUSH
59143: LD_INT 4
59145: PPUSH
59146: CALL_OW 273
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_VAR 0 7
59159: PPUSH
59160: LD_INT 5
59162: PPUSH
59163: LD_INT 4
59165: PPUSH
59166: CALL_OW 272
59170: PUSH
59171: LD_VAR 0 8
59175: PPUSH
59176: LD_INT 5
59178: PPUSH
59179: LD_INT 4
59181: PPUSH
59182: CALL_OW 273
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: ST_TO_ADDR
// for i = tmp downto 1 do
59199: LD_ADDR_VAR 0 4
59203: PUSH
59204: DOUBLE
59205: LD_VAR 0 6
59209: INC
59210: ST_TO_ADDR
59211: LD_INT 1
59213: PUSH
59214: FOR_DOWNTO
59215: IFFALSE 59316
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59217: LD_VAR 0 6
59221: PUSH
59222: LD_VAR 0 4
59226: ARRAY
59227: PUSH
59228: LD_INT 1
59230: ARRAY
59231: PPUSH
59232: LD_VAR 0 6
59236: PUSH
59237: LD_VAR 0 4
59241: ARRAY
59242: PUSH
59243: LD_INT 2
59245: ARRAY
59246: PPUSH
59247: CALL_OW 488
59251: NOT
59252: PUSH
59253: LD_VAR 0 6
59257: PUSH
59258: LD_VAR 0 4
59262: ARRAY
59263: PUSH
59264: LD_INT 1
59266: ARRAY
59267: PPUSH
59268: LD_VAR 0 6
59272: PUSH
59273: LD_VAR 0 4
59277: ARRAY
59278: PUSH
59279: LD_INT 2
59281: ARRAY
59282: PPUSH
59283: CALL_OW 428
59287: PUSH
59288: LD_INT 0
59290: NONEQUAL
59291: OR
59292: IFFALSE 59314
// tmp := Delete ( tmp , i ) ;
59294: LD_ADDR_VAR 0 6
59298: PUSH
59299: LD_VAR 0 6
59303: PPUSH
59304: LD_VAR 0 4
59308: PPUSH
59309: CALL_OW 3
59313: ST_TO_ADDR
59314: GO 59214
59316: POP
59317: POP
// j := GetClosestHex ( unit , tmp ) ;
59318: LD_ADDR_VAR 0 5
59322: PUSH
59323: LD_VAR 0 1
59327: PPUSH
59328: LD_VAR 0 6
59332: PPUSH
59333: CALL 58618 0 2
59337: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59338: LD_VAR 0 1
59342: PPUSH
59343: LD_VAR 0 5
59347: PUSH
59348: LD_INT 1
59350: ARRAY
59351: PPUSH
59352: LD_VAR 0 5
59356: PUSH
59357: LD_INT 2
59359: ARRAY
59360: PPUSH
59361: CALL_OW 111
// end ;
59365: LD_VAR 0 3
59369: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59370: LD_INT 0
59372: PPUSH
59373: PPUSH
59374: PPUSH
// uc_side = 0 ;
59375: LD_ADDR_OWVAR 20
59379: PUSH
59380: LD_INT 0
59382: ST_TO_ADDR
// uc_nation = 0 ;
59383: LD_ADDR_OWVAR 21
59387: PUSH
59388: LD_INT 0
59390: ST_TO_ADDR
// InitHc_All ( ) ;
59391: CALL_OW 584
// InitVc ;
59395: CALL_OW 20
// if mastodonts then
59399: LD_VAR 0 6
59403: IFFALSE 59470
// for i = 1 to mastodonts do
59405: LD_ADDR_VAR 0 11
59409: PUSH
59410: DOUBLE
59411: LD_INT 1
59413: DEC
59414: ST_TO_ADDR
59415: LD_VAR 0 6
59419: PUSH
59420: FOR_TO
59421: IFFALSE 59468
// begin vc_chassis := 31 ;
59423: LD_ADDR_OWVAR 37
59427: PUSH
59428: LD_INT 31
59430: ST_TO_ADDR
// vc_control := control_rider ;
59431: LD_ADDR_OWVAR 38
59435: PUSH
59436: LD_INT 4
59438: ST_TO_ADDR
// animal := CreateVehicle ;
59439: LD_ADDR_VAR 0 12
59443: PUSH
59444: CALL_OW 45
59448: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59449: LD_VAR 0 12
59453: PPUSH
59454: LD_VAR 0 8
59458: PPUSH
59459: LD_INT 0
59461: PPUSH
59462: CALL 61658 0 3
// end ;
59466: GO 59420
59468: POP
59469: POP
// if horses then
59470: LD_VAR 0 5
59474: IFFALSE 59541
// for i = 1 to horses do
59476: LD_ADDR_VAR 0 11
59480: PUSH
59481: DOUBLE
59482: LD_INT 1
59484: DEC
59485: ST_TO_ADDR
59486: LD_VAR 0 5
59490: PUSH
59491: FOR_TO
59492: IFFALSE 59539
// begin hc_class := 21 ;
59494: LD_ADDR_OWVAR 28
59498: PUSH
59499: LD_INT 21
59501: ST_TO_ADDR
// hc_gallery :=  ;
59502: LD_ADDR_OWVAR 33
59506: PUSH
59507: LD_STRING 
59509: ST_TO_ADDR
// animal := CreateHuman ;
59510: LD_ADDR_VAR 0 12
59514: PUSH
59515: CALL_OW 44
59519: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59520: LD_VAR 0 12
59524: PPUSH
59525: LD_VAR 0 8
59529: PPUSH
59530: LD_INT 0
59532: PPUSH
59533: CALL 61658 0 3
// end ;
59537: GO 59491
59539: POP
59540: POP
// if birds then
59541: LD_VAR 0 1
59545: IFFALSE 59612
// for i = 1 to birds do
59547: LD_ADDR_VAR 0 11
59551: PUSH
59552: DOUBLE
59553: LD_INT 1
59555: DEC
59556: ST_TO_ADDR
59557: LD_VAR 0 1
59561: PUSH
59562: FOR_TO
59563: IFFALSE 59610
// begin hc_class = 18 ;
59565: LD_ADDR_OWVAR 28
59569: PUSH
59570: LD_INT 18
59572: ST_TO_ADDR
// hc_gallery =  ;
59573: LD_ADDR_OWVAR 33
59577: PUSH
59578: LD_STRING 
59580: ST_TO_ADDR
// animal := CreateHuman ;
59581: LD_ADDR_VAR 0 12
59585: PUSH
59586: CALL_OW 44
59590: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59591: LD_VAR 0 12
59595: PPUSH
59596: LD_VAR 0 8
59600: PPUSH
59601: LD_INT 0
59603: PPUSH
59604: CALL 61658 0 3
// end ;
59608: GO 59562
59610: POP
59611: POP
// if tigers then
59612: LD_VAR 0 2
59616: IFFALSE 59700
// for i = 1 to tigers do
59618: LD_ADDR_VAR 0 11
59622: PUSH
59623: DOUBLE
59624: LD_INT 1
59626: DEC
59627: ST_TO_ADDR
59628: LD_VAR 0 2
59632: PUSH
59633: FOR_TO
59634: IFFALSE 59698
// begin hc_class = class_tiger ;
59636: LD_ADDR_OWVAR 28
59640: PUSH
59641: LD_INT 14
59643: ST_TO_ADDR
// hc_gallery =  ;
59644: LD_ADDR_OWVAR 33
59648: PUSH
59649: LD_STRING 
59651: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59652: LD_ADDR_OWVAR 35
59656: PUSH
59657: LD_INT 7
59659: NEG
59660: PPUSH
59661: LD_INT 7
59663: PPUSH
59664: CALL_OW 12
59668: ST_TO_ADDR
// animal := CreateHuman ;
59669: LD_ADDR_VAR 0 12
59673: PUSH
59674: CALL_OW 44
59678: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59679: LD_VAR 0 12
59683: PPUSH
59684: LD_VAR 0 8
59688: PPUSH
59689: LD_INT 0
59691: PPUSH
59692: CALL 61658 0 3
// end ;
59696: GO 59633
59698: POP
59699: POP
// if apemans then
59700: LD_VAR 0 3
59704: IFFALSE 59827
// for i = 1 to apemans do
59706: LD_ADDR_VAR 0 11
59710: PUSH
59711: DOUBLE
59712: LD_INT 1
59714: DEC
59715: ST_TO_ADDR
59716: LD_VAR 0 3
59720: PUSH
59721: FOR_TO
59722: IFFALSE 59825
// begin hc_class = class_apeman ;
59724: LD_ADDR_OWVAR 28
59728: PUSH
59729: LD_INT 12
59731: ST_TO_ADDR
// hc_gallery =  ;
59732: LD_ADDR_OWVAR 33
59736: PUSH
59737: LD_STRING 
59739: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
59740: LD_ADDR_OWVAR 35
59744: PUSH
59745: LD_INT 5
59747: NEG
59748: PPUSH
59749: LD_INT 5
59751: PPUSH
59752: CALL_OW 12
59756: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59757: LD_ADDR_OWVAR 31
59761: PUSH
59762: LD_INT 1
59764: PPUSH
59765: LD_INT 3
59767: PPUSH
59768: CALL_OW 12
59772: PUSH
59773: LD_INT 1
59775: PPUSH
59776: LD_INT 3
59778: PPUSH
59779: CALL_OW 12
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: ST_TO_ADDR
// animal := CreateHuman ;
59796: LD_ADDR_VAR 0 12
59800: PUSH
59801: CALL_OW 44
59805: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59806: LD_VAR 0 12
59810: PPUSH
59811: LD_VAR 0 8
59815: PPUSH
59816: LD_INT 0
59818: PPUSH
59819: CALL 61658 0 3
// end ;
59823: GO 59721
59825: POP
59826: POP
// if enchidnas then
59827: LD_VAR 0 4
59831: IFFALSE 59898
// for i = 1 to enchidnas do
59833: LD_ADDR_VAR 0 11
59837: PUSH
59838: DOUBLE
59839: LD_INT 1
59841: DEC
59842: ST_TO_ADDR
59843: LD_VAR 0 4
59847: PUSH
59848: FOR_TO
59849: IFFALSE 59896
// begin hc_class = 13 ;
59851: LD_ADDR_OWVAR 28
59855: PUSH
59856: LD_INT 13
59858: ST_TO_ADDR
// hc_gallery =  ;
59859: LD_ADDR_OWVAR 33
59863: PUSH
59864: LD_STRING 
59866: ST_TO_ADDR
// animal := CreateHuman ;
59867: LD_ADDR_VAR 0 12
59871: PUSH
59872: CALL_OW 44
59876: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59877: LD_VAR 0 12
59881: PPUSH
59882: LD_VAR 0 8
59886: PPUSH
59887: LD_INT 0
59889: PPUSH
59890: CALL 61658 0 3
// end ;
59894: GO 59848
59896: POP
59897: POP
// if fishes then
59898: LD_VAR 0 7
59902: IFFALSE 59969
// for i = 1 to fishes do
59904: LD_ADDR_VAR 0 11
59908: PUSH
59909: DOUBLE
59910: LD_INT 1
59912: DEC
59913: ST_TO_ADDR
59914: LD_VAR 0 7
59918: PUSH
59919: FOR_TO
59920: IFFALSE 59967
// begin hc_class = 20 ;
59922: LD_ADDR_OWVAR 28
59926: PUSH
59927: LD_INT 20
59929: ST_TO_ADDR
// hc_gallery =  ;
59930: LD_ADDR_OWVAR 33
59934: PUSH
59935: LD_STRING 
59937: ST_TO_ADDR
// animal := CreateHuman ;
59938: LD_ADDR_VAR 0 12
59942: PUSH
59943: CALL_OW 44
59947: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59948: LD_VAR 0 12
59952: PPUSH
59953: LD_VAR 0 9
59957: PPUSH
59958: LD_INT 0
59960: PPUSH
59961: CALL 61658 0 3
// end ;
59965: GO 59919
59967: POP
59968: POP
// end ;
59969: LD_VAR 0 10
59973: RET
// export function WantHeal ( sci , unit ) ; begin
59974: LD_INT 0
59976: PPUSH
// if GetTaskList ( sci ) > 0 then
59977: LD_VAR 0 1
59981: PPUSH
59982: CALL_OW 437
59986: PUSH
59987: LD_INT 0
59989: GREATER
59990: IFFALSE 60060
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59992: LD_VAR 0 1
59996: PPUSH
59997: CALL_OW 437
60001: PUSH
60002: LD_INT 1
60004: ARRAY
60005: PUSH
60006: LD_INT 1
60008: ARRAY
60009: PUSH
60010: LD_STRING l
60012: EQUAL
60013: PUSH
60014: LD_VAR 0 1
60018: PPUSH
60019: CALL_OW 437
60023: PUSH
60024: LD_INT 1
60026: ARRAY
60027: PUSH
60028: LD_INT 4
60030: ARRAY
60031: PUSH
60032: LD_VAR 0 2
60036: EQUAL
60037: AND
60038: IFFALSE 60050
// result := true else
60040: LD_ADDR_VAR 0 3
60044: PUSH
60045: LD_INT 1
60047: ST_TO_ADDR
60048: GO 60058
// result := false ;
60050: LD_ADDR_VAR 0 3
60054: PUSH
60055: LD_INT 0
60057: ST_TO_ADDR
// end else
60058: GO 60068
// result := false ;
60060: LD_ADDR_VAR 0 3
60064: PUSH
60065: LD_INT 0
60067: ST_TO_ADDR
// end ;
60068: LD_VAR 0 3
60072: RET
// export function HealTarget ( sci ) ; begin
60073: LD_INT 0
60075: PPUSH
// if not sci then
60076: LD_VAR 0 1
60080: NOT
60081: IFFALSE 60085
// exit ;
60083: GO 60150
// result := 0 ;
60085: LD_ADDR_VAR 0 2
60089: PUSH
60090: LD_INT 0
60092: ST_TO_ADDR
// if GetTaskList ( sci ) then
60093: LD_VAR 0 1
60097: PPUSH
60098: CALL_OW 437
60102: IFFALSE 60150
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60104: LD_VAR 0 1
60108: PPUSH
60109: CALL_OW 437
60113: PUSH
60114: LD_INT 1
60116: ARRAY
60117: PUSH
60118: LD_INT 1
60120: ARRAY
60121: PUSH
60122: LD_STRING l
60124: EQUAL
60125: IFFALSE 60150
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60127: LD_ADDR_VAR 0 2
60131: PUSH
60132: LD_VAR 0 1
60136: PPUSH
60137: CALL_OW 437
60141: PUSH
60142: LD_INT 1
60144: ARRAY
60145: PUSH
60146: LD_INT 4
60148: ARRAY
60149: ST_TO_ADDR
// end ;
60150: LD_VAR 0 2
60154: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60155: LD_INT 0
60157: PPUSH
60158: PPUSH
60159: PPUSH
60160: PPUSH
// if not base_units then
60161: LD_VAR 0 1
60165: NOT
60166: IFFALSE 60170
// exit ;
60168: GO 60257
// result := false ;
60170: LD_ADDR_VAR 0 2
60174: PUSH
60175: LD_INT 0
60177: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60178: LD_ADDR_VAR 0 5
60182: PUSH
60183: LD_VAR 0 1
60187: PPUSH
60188: LD_INT 21
60190: PUSH
60191: LD_INT 3
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PPUSH
60198: CALL_OW 72
60202: ST_TO_ADDR
// if not tmp then
60203: LD_VAR 0 5
60207: NOT
60208: IFFALSE 60212
// exit ;
60210: GO 60257
// for i in tmp do
60212: LD_ADDR_VAR 0 3
60216: PUSH
60217: LD_VAR 0 5
60221: PUSH
60222: FOR_IN
60223: IFFALSE 60255
// begin result := EnemyInRange ( i , 22 ) ;
60225: LD_ADDR_VAR 0 2
60229: PUSH
60230: LD_VAR 0 3
60234: PPUSH
60235: LD_INT 22
60237: PPUSH
60238: CALL 58493 0 2
60242: ST_TO_ADDR
// if result then
60243: LD_VAR 0 2
60247: IFFALSE 60253
// exit ;
60249: POP
60250: POP
60251: GO 60257
// end ;
60253: GO 60222
60255: POP
60256: POP
// end ;
60257: LD_VAR 0 2
60261: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60262: LD_INT 0
60264: PPUSH
60265: PPUSH
// if not units then
60266: LD_VAR 0 1
60270: NOT
60271: IFFALSE 60275
// exit ;
60273: GO 60345
// result := [ ] ;
60275: LD_ADDR_VAR 0 3
60279: PUSH
60280: EMPTY
60281: ST_TO_ADDR
// for i in units do
60282: LD_ADDR_VAR 0 4
60286: PUSH
60287: LD_VAR 0 1
60291: PUSH
60292: FOR_IN
60293: IFFALSE 60343
// if GetTag ( i ) = tag then
60295: LD_VAR 0 4
60299: PPUSH
60300: CALL_OW 110
60304: PUSH
60305: LD_VAR 0 2
60309: EQUAL
60310: IFFALSE 60341
// result := Insert ( result , result + 1 , i ) ;
60312: LD_ADDR_VAR 0 3
60316: PUSH
60317: LD_VAR 0 3
60321: PPUSH
60322: LD_VAR 0 3
60326: PUSH
60327: LD_INT 1
60329: PLUS
60330: PPUSH
60331: LD_VAR 0 4
60335: PPUSH
60336: CALL_OW 2
60340: ST_TO_ADDR
60341: GO 60292
60343: POP
60344: POP
// end ;
60345: LD_VAR 0 3
60349: RET
// export function IsDriver ( un ) ; begin
60350: LD_INT 0
60352: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60353: LD_ADDR_VAR 0 2
60357: PUSH
60358: LD_VAR 0 1
60362: PUSH
60363: LD_INT 55
60365: PUSH
60366: EMPTY
60367: LIST
60368: PPUSH
60369: CALL_OW 69
60373: IN
60374: ST_TO_ADDR
// end ;
60375: LD_VAR 0 2
60379: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60380: LD_INT 0
60382: PPUSH
60383: PPUSH
// list := [ ] ;
60384: LD_ADDR_VAR 0 5
60388: PUSH
60389: EMPTY
60390: ST_TO_ADDR
// case d of 0 :
60391: LD_VAR 0 3
60395: PUSH
60396: LD_INT 0
60398: DOUBLE
60399: EQUAL
60400: IFTRUE 60404
60402: GO 60537
60404: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60405: LD_ADDR_VAR 0 5
60409: PUSH
60410: LD_VAR 0 1
60414: PUSH
60415: LD_INT 4
60417: MINUS
60418: PUSH
60419: LD_VAR 0 2
60423: PUSH
60424: LD_INT 4
60426: MINUS
60427: PUSH
60428: LD_INT 2
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: LIST
60435: PUSH
60436: LD_VAR 0 1
60440: PUSH
60441: LD_INT 3
60443: MINUS
60444: PUSH
60445: LD_VAR 0 2
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: LIST
60457: PUSH
60458: LD_VAR 0 1
60462: PUSH
60463: LD_INT 4
60465: PLUS
60466: PUSH
60467: LD_VAR 0 2
60471: PUSH
60472: LD_INT 4
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: LIST
60479: PUSH
60480: LD_VAR 0 1
60484: PUSH
60485: LD_INT 3
60487: PLUS
60488: PUSH
60489: LD_VAR 0 2
60493: PUSH
60494: LD_INT 3
60496: PLUS
60497: PUSH
60498: LD_INT 5
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: LIST
60505: PUSH
60506: LD_VAR 0 1
60510: PUSH
60511: LD_VAR 0 2
60515: PUSH
60516: LD_INT 4
60518: PLUS
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: LIST
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: ST_TO_ADDR
// end ; 1 :
60535: GO 61235
60537: LD_INT 1
60539: DOUBLE
60540: EQUAL
60541: IFTRUE 60545
60543: GO 60678
60545: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60546: LD_ADDR_VAR 0 5
60550: PUSH
60551: LD_VAR 0 1
60555: PUSH
60556: LD_VAR 0 2
60560: PUSH
60561: LD_INT 4
60563: MINUS
60564: PUSH
60565: LD_INT 3
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: LIST
60572: PUSH
60573: LD_VAR 0 1
60577: PUSH
60578: LD_INT 3
60580: MINUS
60581: PUSH
60582: LD_VAR 0 2
60586: PUSH
60587: LD_INT 3
60589: MINUS
60590: PUSH
60591: LD_INT 2
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: LIST
60598: PUSH
60599: LD_VAR 0 1
60603: PUSH
60604: LD_INT 4
60606: MINUS
60607: PUSH
60608: LD_VAR 0 2
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: LIST
60620: PUSH
60621: LD_VAR 0 1
60625: PUSH
60626: LD_VAR 0 2
60630: PUSH
60631: LD_INT 3
60633: PLUS
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: LIST
60642: PUSH
60643: LD_VAR 0 1
60647: PUSH
60648: LD_INT 4
60650: PLUS
60651: PUSH
60652: LD_VAR 0 2
60656: PUSH
60657: LD_INT 4
60659: PLUS
60660: PUSH
60661: LD_INT 5
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: LIST
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: ST_TO_ADDR
// end ; 2 :
60676: GO 61235
60678: LD_INT 2
60680: DOUBLE
60681: EQUAL
60682: IFTRUE 60686
60684: GO 60815
60686: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60687: LD_ADDR_VAR 0 5
60691: PUSH
60692: LD_VAR 0 1
60696: PUSH
60697: LD_VAR 0 2
60701: PUSH
60702: LD_INT 3
60704: MINUS
60705: PUSH
60706: LD_INT 3
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: LIST
60713: PUSH
60714: LD_VAR 0 1
60718: PUSH
60719: LD_INT 4
60721: PLUS
60722: PUSH
60723: LD_VAR 0 2
60727: PUSH
60728: LD_INT 4
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: LIST
60735: PUSH
60736: LD_VAR 0 1
60740: PUSH
60741: LD_VAR 0 2
60745: PUSH
60746: LD_INT 4
60748: PLUS
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: LIST
60757: PUSH
60758: LD_VAR 0 1
60762: PUSH
60763: LD_INT 3
60765: MINUS
60766: PUSH
60767: LD_VAR 0 2
60771: PUSH
60772: LD_INT 1
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: LIST
60779: PUSH
60780: LD_VAR 0 1
60784: PUSH
60785: LD_INT 4
60787: MINUS
60788: PUSH
60789: LD_VAR 0 2
60793: PUSH
60794: LD_INT 4
60796: MINUS
60797: PUSH
60798: LD_INT 2
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: LIST
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: ST_TO_ADDR
// end ; 3 :
60813: GO 61235
60815: LD_INT 3
60817: DOUBLE
60818: EQUAL
60819: IFTRUE 60823
60821: GO 60956
60823: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60824: LD_ADDR_VAR 0 5
60828: PUSH
60829: LD_VAR 0 1
60833: PUSH
60834: LD_INT 3
60836: PLUS
60837: PUSH
60838: LD_VAR 0 2
60842: PUSH
60843: LD_INT 4
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: LIST
60850: PUSH
60851: LD_VAR 0 1
60855: PUSH
60856: LD_INT 4
60858: PLUS
60859: PUSH
60860: LD_VAR 0 2
60864: PUSH
60865: LD_INT 4
60867: PLUS
60868: PUSH
60869: LD_INT 5
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: PUSH
60877: LD_VAR 0 1
60881: PUSH
60882: LD_INT 4
60884: MINUS
60885: PUSH
60886: LD_VAR 0 2
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: LIST
60898: PUSH
60899: LD_VAR 0 1
60903: PUSH
60904: LD_VAR 0 2
60908: PUSH
60909: LD_INT 4
60911: MINUS
60912: PUSH
60913: LD_INT 3
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: LIST
60920: PUSH
60921: LD_VAR 0 1
60925: PUSH
60926: LD_INT 3
60928: MINUS
60929: PUSH
60930: LD_VAR 0 2
60934: PUSH
60935: LD_INT 3
60937: MINUS
60938: PUSH
60939: LD_INT 2
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: LIST
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: ST_TO_ADDR
// end ; 4 :
60954: GO 61235
60956: LD_INT 4
60958: DOUBLE
60959: EQUAL
60960: IFTRUE 60964
60962: GO 61097
60964: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60965: LD_ADDR_VAR 0 5
60969: PUSH
60970: LD_VAR 0 1
60974: PUSH
60975: LD_VAR 0 2
60979: PUSH
60980: LD_INT 4
60982: PLUS
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: LIST
60991: PUSH
60992: LD_VAR 0 1
60996: PUSH
60997: LD_INT 3
60999: PLUS
61000: PUSH
61001: LD_VAR 0 2
61005: PUSH
61006: LD_INT 3
61008: PLUS
61009: PUSH
61010: LD_INT 5
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: LIST
61017: PUSH
61018: LD_VAR 0 1
61022: PUSH
61023: LD_INT 4
61025: PLUS
61026: PUSH
61027: LD_VAR 0 2
61031: PUSH
61032: LD_INT 4
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: PUSH
61040: LD_VAR 0 1
61044: PUSH
61045: LD_VAR 0 2
61049: PUSH
61050: LD_INT 3
61052: MINUS
61053: PUSH
61054: LD_INT 3
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: PUSH
61062: LD_VAR 0 1
61066: PUSH
61067: LD_INT 4
61069: MINUS
61070: PUSH
61071: LD_VAR 0 2
61075: PUSH
61076: LD_INT 4
61078: MINUS
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: LIST
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: ST_TO_ADDR
// end ; 5 :
61095: GO 61235
61097: LD_INT 5
61099: DOUBLE
61100: EQUAL
61101: IFTRUE 61105
61103: GO 61234
61105: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61106: LD_ADDR_VAR 0 5
61110: PUSH
61111: LD_VAR 0 1
61115: PUSH
61116: LD_INT 4
61118: MINUS
61119: PUSH
61120: LD_VAR 0 2
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: PUSH
61133: LD_VAR 0 1
61137: PUSH
61138: LD_VAR 0 2
61142: PUSH
61143: LD_INT 4
61145: MINUS
61146: PUSH
61147: LD_INT 3
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: LIST
61154: PUSH
61155: LD_VAR 0 1
61159: PUSH
61160: LD_INT 4
61162: PLUS
61163: PUSH
61164: LD_VAR 0 2
61168: PUSH
61169: LD_INT 4
61171: PLUS
61172: PUSH
61173: LD_INT 5
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: LIST
61180: PUSH
61181: LD_VAR 0 1
61185: PUSH
61186: LD_INT 3
61188: PLUS
61189: PUSH
61190: LD_VAR 0 2
61194: PUSH
61195: LD_INT 4
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: LIST
61202: PUSH
61203: LD_VAR 0 1
61207: PUSH
61208: LD_VAR 0 2
61212: PUSH
61213: LD_INT 3
61215: PLUS
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: LIST
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: ST_TO_ADDR
// end ; end ;
61232: GO 61235
61234: POP
// result := list ;
61235: LD_ADDR_VAR 0 4
61239: PUSH
61240: LD_VAR 0 5
61244: ST_TO_ADDR
// end ;
61245: LD_VAR 0 4
61249: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61250: LD_INT 0
61252: PPUSH
61253: PPUSH
61254: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61255: LD_VAR 0 1
61259: NOT
61260: PUSH
61261: LD_VAR 0 2
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: LD_INT 2
61271: PUSH
61272: LD_INT 3
61274: PUSH
61275: LD_INT 4
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: IN
61284: NOT
61285: OR
61286: IFFALSE 61290
// exit ;
61288: GO 61382
// tmp := [ ] ;
61290: LD_ADDR_VAR 0 5
61294: PUSH
61295: EMPTY
61296: ST_TO_ADDR
// for i in units do
61297: LD_ADDR_VAR 0 4
61301: PUSH
61302: LD_VAR 0 1
61306: PUSH
61307: FOR_IN
61308: IFFALSE 61351
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61310: LD_ADDR_VAR 0 5
61314: PUSH
61315: LD_VAR 0 5
61319: PPUSH
61320: LD_VAR 0 5
61324: PUSH
61325: LD_INT 1
61327: PLUS
61328: PPUSH
61329: LD_VAR 0 4
61333: PPUSH
61334: LD_VAR 0 2
61338: PPUSH
61339: CALL_OW 259
61343: PPUSH
61344: CALL_OW 2
61348: ST_TO_ADDR
61349: GO 61307
61351: POP
61352: POP
// if not tmp then
61353: LD_VAR 0 5
61357: NOT
61358: IFFALSE 61362
// exit ;
61360: GO 61382
// result := SortListByListDesc ( units , tmp ) ;
61362: LD_ADDR_VAR 0 3
61366: PUSH
61367: LD_VAR 0 1
61371: PPUSH
61372: LD_VAR 0 5
61376: PPUSH
61377: CALL_OW 77
61381: ST_TO_ADDR
// end ;
61382: LD_VAR 0 3
61386: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61387: LD_INT 0
61389: PPUSH
61390: PPUSH
61391: PPUSH
// result := false ;
61392: LD_ADDR_VAR 0 3
61396: PUSH
61397: LD_INT 0
61399: ST_TO_ADDR
// x := GetX ( building ) ;
61400: LD_ADDR_VAR 0 4
61404: PUSH
61405: LD_VAR 0 2
61409: PPUSH
61410: CALL_OW 250
61414: ST_TO_ADDR
// y := GetY ( building ) ;
61415: LD_ADDR_VAR 0 5
61419: PUSH
61420: LD_VAR 0 2
61424: PPUSH
61425: CALL_OW 251
61429: ST_TO_ADDR
// if not building or not x or not y then
61430: LD_VAR 0 2
61434: NOT
61435: PUSH
61436: LD_VAR 0 4
61440: NOT
61441: OR
61442: PUSH
61443: LD_VAR 0 5
61447: NOT
61448: OR
61449: IFFALSE 61453
// exit ;
61451: GO 61545
// if GetTaskList ( unit ) then
61453: LD_VAR 0 1
61457: PPUSH
61458: CALL_OW 437
61462: IFFALSE 61545
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61464: LD_STRING e
61466: PUSH
61467: LD_VAR 0 1
61471: PPUSH
61472: CALL_OW 437
61476: PUSH
61477: LD_INT 1
61479: ARRAY
61480: PUSH
61481: LD_INT 1
61483: ARRAY
61484: EQUAL
61485: PUSH
61486: LD_VAR 0 4
61490: PUSH
61491: LD_VAR 0 1
61495: PPUSH
61496: CALL_OW 437
61500: PUSH
61501: LD_INT 1
61503: ARRAY
61504: PUSH
61505: LD_INT 2
61507: ARRAY
61508: EQUAL
61509: AND
61510: PUSH
61511: LD_VAR 0 5
61515: PUSH
61516: LD_VAR 0 1
61520: PPUSH
61521: CALL_OW 437
61525: PUSH
61526: LD_INT 1
61528: ARRAY
61529: PUSH
61530: LD_INT 3
61532: ARRAY
61533: EQUAL
61534: AND
61535: IFFALSE 61545
// result := true end ;
61537: LD_ADDR_VAR 0 3
61541: PUSH
61542: LD_INT 1
61544: ST_TO_ADDR
// end ;
61545: LD_VAR 0 3
61549: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61550: LD_INT 0
61552: PPUSH
// result := false ;
61553: LD_ADDR_VAR 0 4
61557: PUSH
61558: LD_INT 0
61560: ST_TO_ADDR
// if GetTaskList ( unit ) then
61561: LD_VAR 0 1
61565: PPUSH
61566: CALL_OW 437
61570: IFFALSE 61653
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61572: LD_STRING M
61574: PUSH
61575: LD_VAR 0 1
61579: PPUSH
61580: CALL_OW 437
61584: PUSH
61585: LD_INT 1
61587: ARRAY
61588: PUSH
61589: LD_INT 1
61591: ARRAY
61592: EQUAL
61593: PUSH
61594: LD_VAR 0 2
61598: PUSH
61599: LD_VAR 0 1
61603: PPUSH
61604: CALL_OW 437
61608: PUSH
61609: LD_INT 1
61611: ARRAY
61612: PUSH
61613: LD_INT 2
61615: ARRAY
61616: EQUAL
61617: AND
61618: PUSH
61619: LD_VAR 0 3
61623: PUSH
61624: LD_VAR 0 1
61628: PPUSH
61629: CALL_OW 437
61633: PUSH
61634: LD_INT 1
61636: ARRAY
61637: PUSH
61638: LD_INT 3
61640: ARRAY
61641: EQUAL
61642: AND
61643: IFFALSE 61653
// result := true ;
61645: LD_ADDR_VAR 0 4
61649: PUSH
61650: LD_INT 1
61652: ST_TO_ADDR
// end ; end ;
61653: LD_VAR 0 4
61657: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61658: LD_INT 0
61660: PPUSH
61661: PPUSH
61662: PPUSH
61663: PPUSH
// if not unit or not area then
61664: LD_VAR 0 1
61668: NOT
61669: PUSH
61670: LD_VAR 0 2
61674: NOT
61675: OR
61676: IFFALSE 61680
// exit ;
61678: GO 61844
// tmp := AreaToList ( area , i ) ;
61680: LD_ADDR_VAR 0 6
61684: PUSH
61685: LD_VAR 0 2
61689: PPUSH
61690: LD_VAR 0 5
61694: PPUSH
61695: CALL_OW 517
61699: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61700: LD_ADDR_VAR 0 5
61704: PUSH
61705: DOUBLE
61706: LD_INT 1
61708: DEC
61709: ST_TO_ADDR
61710: LD_VAR 0 6
61714: PUSH
61715: LD_INT 1
61717: ARRAY
61718: PUSH
61719: FOR_TO
61720: IFFALSE 61842
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61722: LD_ADDR_VAR 0 7
61726: PUSH
61727: LD_VAR 0 6
61731: PUSH
61732: LD_INT 1
61734: ARRAY
61735: PUSH
61736: LD_VAR 0 5
61740: ARRAY
61741: PUSH
61742: LD_VAR 0 6
61746: PUSH
61747: LD_INT 2
61749: ARRAY
61750: PUSH
61751: LD_VAR 0 5
61755: ARRAY
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61761: LD_VAR 0 7
61765: PUSH
61766: LD_INT 1
61768: ARRAY
61769: PPUSH
61770: LD_VAR 0 7
61774: PUSH
61775: LD_INT 2
61777: ARRAY
61778: PPUSH
61779: CALL_OW 428
61783: PUSH
61784: LD_INT 0
61786: EQUAL
61787: IFFALSE 61840
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61789: LD_VAR 0 1
61793: PPUSH
61794: LD_VAR 0 7
61798: PUSH
61799: LD_INT 1
61801: ARRAY
61802: PPUSH
61803: LD_VAR 0 7
61807: PUSH
61808: LD_INT 2
61810: ARRAY
61811: PPUSH
61812: LD_VAR 0 3
61816: PPUSH
61817: CALL_OW 48
// result := IsPlaced ( unit ) ;
61821: LD_ADDR_VAR 0 4
61825: PUSH
61826: LD_VAR 0 1
61830: PPUSH
61831: CALL_OW 305
61835: ST_TO_ADDR
// exit ;
61836: POP
61837: POP
61838: GO 61844
// end ; end ;
61840: GO 61719
61842: POP
61843: POP
// end ;
61844: LD_VAR 0 4
61848: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61849: LD_INT 0
61851: PPUSH
61852: PPUSH
61853: PPUSH
// if not side or side > 8 then
61854: LD_VAR 0 1
61858: NOT
61859: PUSH
61860: LD_VAR 0 1
61864: PUSH
61865: LD_INT 8
61867: GREATER
61868: OR
61869: IFFALSE 61873
// exit ;
61871: GO 62060
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61873: LD_ADDR_VAR 0 4
61877: PUSH
61878: LD_INT 22
61880: PUSH
61881: LD_VAR 0 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 21
61892: PUSH
61893: LD_INT 3
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PPUSH
61904: CALL_OW 69
61908: ST_TO_ADDR
// if not tmp then
61909: LD_VAR 0 4
61913: NOT
61914: IFFALSE 61918
// exit ;
61916: GO 62060
// enable_addtolog := true ;
61918: LD_ADDR_OWVAR 81
61922: PUSH
61923: LD_INT 1
61925: ST_TO_ADDR
// AddToLog ( [ ) ;
61926: LD_STRING [
61928: PPUSH
61929: CALL_OW 561
// for i in tmp do
61933: LD_ADDR_VAR 0 3
61937: PUSH
61938: LD_VAR 0 4
61942: PUSH
61943: FOR_IN
61944: IFFALSE 62051
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61946: LD_STRING [
61948: PUSH
61949: LD_VAR 0 3
61953: PPUSH
61954: CALL_OW 266
61958: STR
61959: PUSH
61960: LD_STRING , 
61962: STR
61963: PUSH
61964: LD_VAR 0 3
61968: PPUSH
61969: CALL_OW 250
61973: STR
61974: PUSH
61975: LD_STRING , 
61977: STR
61978: PUSH
61979: LD_VAR 0 3
61983: PPUSH
61984: CALL_OW 251
61988: STR
61989: PUSH
61990: LD_STRING , 
61992: STR
61993: PUSH
61994: LD_VAR 0 3
61998: PPUSH
61999: CALL_OW 254
62003: STR
62004: PUSH
62005: LD_STRING , 
62007: STR
62008: PUSH
62009: LD_VAR 0 3
62013: PPUSH
62014: LD_INT 1
62016: PPUSH
62017: CALL_OW 268
62021: STR
62022: PUSH
62023: LD_STRING , 
62025: STR
62026: PUSH
62027: LD_VAR 0 3
62031: PPUSH
62032: LD_INT 2
62034: PPUSH
62035: CALL_OW 268
62039: STR
62040: PUSH
62041: LD_STRING ],
62043: STR
62044: PPUSH
62045: CALL_OW 561
// end ;
62049: GO 61943
62051: POP
62052: POP
// AddToLog ( ]; ) ;
62053: LD_STRING ];
62055: PPUSH
62056: CALL_OW 561
// end ;
62060: LD_VAR 0 2
62064: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62065: LD_INT 0
62067: PPUSH
62068: PPUSH
62069: PPUSH
62070: PPUSH
62071: PPUSH
// if not area or not rate or not max then
62072: LD_VAR 0 1
62076: NOT
62077: PUSH
62078: LD_VAR 0 2
62082: NOT
62083: OR
62084: PUSH
62085: LD_VAR 0 4
62089: NOT
62090: OR
62091: IFFALSE 62095
// exit ;
62093: GO 62287
// while 1 do
62095: LD_INT 1
62097: IFFALSE 62287
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62099: LD_ADDR_VAR 0 9
62103: PUSH
62104: LD_VAR 0 1
62108: PPUSH
62109: LD_INT 1
62111: PPUSH
62112: CALL_OW 287
62116: PUSH
62117: LD_INT 10
62119: MUL
62120: ST_TO_ADDR
// r := rate / 10 ;
62121: LD_ADDR_VAR 0 7
62125: PUSH
62126: LD_VAR 0 2
62130: PUSH
62131: LD_INT 10
62133: DIVREAL
62134: ST_TO_ADDR
// time := 1 1$00 ;
62135: LD_ADDR_VAR 0 8
62139: PUSH
62140: LD_INT 2100
62142: ST_TO_ADDR
// if amount < min then
62143: LD_VAR 0 9
62147: PUSH
62148: LD_VAR 0 3
62152: LESS
62153: IFFALSE 62171
// r := r * 2 else
62155: LD_ADDR_VAR 0 7
62159: PUSH
62160: LD_VAR 0 7
62164: PUSH
62165: LD_INT 2
62167: MUL
62168: ST_TO_ADDR
62169: GO 62197
// if amount > max then
62171: LD_VAR 0 9
62175: PUSH
62176: LD_VAR 0 4
62180: GREATER
62181: IFFALSE 62197
// r := r / 2 ;
62183: LD_ADDR_VAR 0 7
62187: PUSH
62188: LD_VAR 0 7
62192: PUSH
62193: LD_INT 2
62195: DIVREAL
62196: ST_TO_ADDR
// time := time / r ;
62197: LD_ADDR_VAR 0 8
62201: PUSH
62202: LD_VAR 0 8
62206: PUSH
62207: LD_VAR 0 7
62211: DIVREAL
62212: ST_TO_ADDR
// if time < 0 then
62213: LD_VAR 0 8
62217: PUSH
62218: LD_INT 0
62220: LESS
62221: IFFALSE 62238
// time := time * - 1 ;
62223: LD_ADDR_VAR 0 8
62227: PUSH
62228: LD_VAR 0 8
62232: PUSH
62233: LD_INT 1
62235: NEG
62236: MUL
62237: ST_TO_ADDR
// wait ( time ) ;
62238: LD_VAR 0 8
62242: PPUSH
62243: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62247: LD_INT 35
62249: PPUSH
62250: LD_INT 875
62252: PPUSH
62253: CALL_OW 12
62257: PPUSH
62258: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62262: LD_INT 1
62264: PPUSH
62265: LD_INT 5
62267: PPUSH
62268: CALL_OW 12
62272: PPUSH
62273: LD_VAR 0 1
62277: PPUSH
62278: LD_INT 1
62280: PPUSH
62281: CALL_OW 55
// end ;
62285: GO 62095
// end ;
62287: LD_VAR 0 5
62291: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62292: LD_INT 0
62294: PPUSH
62295: PPUSH
62296: PPUSH
62297: PPUSH
62298: PPUSH
62299: PPUSH
62300: PPUSH
62301: PPUSH
// if not turrets or not factories then
62302: LD_VAR 0 1
62306: NOT
62307: PUSH
62308: LD_VAR 0 2
62312: NOT
62313: OR
62314: IFFALSE 62318
// exit ;
62316: GO 62625
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62318: LD_ADDR_VAR 0 10
62322: PUSH
62323: LD_INT 5
62325: PUSH
62326: LD_INT 6
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: LD_INT 4
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 3
62345: PUSH
62346: LD_INT 5
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 24
62360: PUSH
62361: LD_INT 25
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 23
62370: PUSH
62371: LD_INT 27
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 42
62384: PUSH
62385: LD_INT 43
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 44
62394: PUSH
62395: LD_INT 46
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 45
62404: PUSH
62405: LD_INT 47
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: LIST
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: LIST
62421: ST_TO_ADDR
// result := [ ] ;
62422: LD_ADDR_VAR 0 3
62426: PUSH
62427: EMPTY
62428: ST_TO_ADDR
// for i in turrets do
62429: LD_ADDR_VAR 0 4
62433: PUSH
62434: LD_VAR 0 1
62438: PUSH
62439: FOR_IN
62440: IFFALSE 62623
// begin nat := GetNation ( i ) ;
62442: LD_ADDR_VAR 0 7
62446: PUSH
62447: LD_VAR 0 4
62451: PPUSH
62452: CALL_OW 248
62456: ST_TO_ADDR
// weapon := 0 ;
62457: LD_ADDR_VAR 0 8
62461: PUSH
62462: LD_INT 0
62464: ST_TO_ADDR
// if not nat then
62465: LD_VAR 0 7
62469: NOT
62470: IFFALSE 62474
// continue ;
62472: GO 62439
// for j in list [ nat ] do
62474: LD_ADDR_VAR 0 5
62478: PUSH
62479: LD_VAR 0 10
62483: PUSH
62484: LD_VAR 0 7
62488: ARRAY
62489: PUSH
62490: FOR_IN
62491: IFFALSE 62532
// if GetBWeapon ( i ) = j [ 1 ] then
62493: LD_VAR 0 4
62497: PPUSH
62498: CALL_OW 269
62502: PUSH
62503: LD_VAR 0 5
62507: PUSH
62508: LD_INT 1
62510: ARRAY
62511: EQUAL
62512: IFFALSE 62530
// begin weapon := j [ 2 ] ;
62514: LD_ADDR_VAR 0 8
62518: PUSH
62519: LD_VAR 0 5
62523: PUSH
62524: LD_INT 2
62526: ARRAY
62527: ST_TO_ADDR
// break ;
62528: GO 62532
// end ;
62530: GO 62490
62532: POP
62533: POP
// if not weapon then
62534: LD_VAR 0 8
62538: NOT
62539: IFFALSE 62543
// continue ;
62541: GO 62439
// for k in factories do
62543: LD_ADDR_VAR 0 6
62547: PUSH
62548: LD_VAR 0 2
62552: PUSH
62553: FOR_IN
62554: IFFALSE 62619
// begin weapons := AvailableWeaponList ( k ) ;
62556: LD_ADDR_VAR 0 9
62560: PUSH
62561: LD_VAR 0 6
62565: PPUSH
62566: CALL_OW 478
62570: ST_TO_ADDR
// if not weapons then
62571: LD_VAR 0 9
62575: NOT
62576: IFFALSE 62580
// continue ;
62578: GO 62553
// if weapon in weapons then
62580: LD_VAR 0 8
62584: PUSH
62585: LD_VAR 0 9
62589: IN
62590: IFFALSE 62617
// begin result := [ i , weapon ] ;
62592: LD_ADDR_VAR 0 3
62596: PUSH
62597: LD_VAR 0 4
62601: PUSH
62602: LD_VAR 0 8
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: ST_TO_ADDR
// exit ;
62611: POP
62612: POP
62613: POP
62614: POP
62615: GO 62625
// end ; end ;
62617: GO 62553
62619: POP
62620: POP
// end ;
62621: GO 62439
62623: POP
62624: POP
// end ;
62625: LD_VAR 0 3
62629: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62630: LD_INT 0
62632: PPUSH
// if not side or side > 8 then
62633: LD_VAR 0 3
62637: NOT
62638: PUSH
62639: LD_VAR 0 3
62643: PUSH
62644: LD_INT 8
62646: GREATER
62647: OR
62648: IFFALSE 62652
// exit ;
62650: GO 62711
// if not range then
62652: LD_VAR 0 4
62656: NOT
62657: IFFALSE 62668
// range := - 12 ;
62659: LD_ADDR_VAR 0 4
62663: PUSH
62664: LD_INT 12
62666: NEG
62667: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62668: LD_VAR 0 1
62672: PPUSH
62673: LD_VAR 0 2
62677: PPUSH
62678: LD_VAR 0 3
62682: PPUSH
62683: LD_VAR 0 4
62687: PPUSH
62688: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62692: LD_VAR 0 1
62696: PPUSH
62697: LD_VAR 0 2
62701: PPUSH
62702: LD_VAR 0 3
62706: PPUSH
62707: CALL_OW 331
// end ;
62711: LD_VAR 0 5
62715: RET
// export function Video ( mode ) ; begin
62716: LD_INT 0
62718: PPUSH
// ingame_video = mode ;
62719: LD_ADDR_OWVAR 52
62723: PUSH
62724: LD_VAR 0 1
62728: ST_TO_ADDR
// interface_hidden = mode ;
62729: LD_ADDR_OWVAR 54
62733: PUSH
62734: LD_VAR 0 1
62738: ST_TO_ADDR
// end ;
62739: LD_VAR 0 2
62743: RET
// export function Join ( array , element ) ; begin
62744: LD_INT 0
62746: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62747: LD_ADDR_VAR 0 3
62751: PUSH
62752: LD_VAR 0 1
62756: PPUSH
62757: LD_VAR 0 1
62761: PUSH
62762: LD_INT 1
62764: PLUS
62765: PPUSH
62766: LD_VAR 0 2
62770: PPUSH
62771: CALL_OW 1
62775: ST_TO_ADDR
// end ;
62776: LD_VAR 0 3
62780: RET
// export function JoinUnion ( array , element ) ; begin
62781: LD_INT 0
62783: PPUSH
// result := array union element ;
62784: LD_ADDR_VAR 0 3
62788: PUSH
62789: LD_VAR 0 1
62793: PUSH
62794: LD_VAR 0 2
62798: UNION
62799: ST_TO_ADDR
// end ;
62800: LD_VAR 0 3
62804: RET
// export function GetBehemoths ( side ) ; begin
62805: LD_INT 0
62807: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62808: LD_ADDR_VAR 0 2
62812: PUSH
62813: LD_INT 22
62815: PUSH
62816: LD_VAR 0 1
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 31
62827: PUSH
62828: LD_INT 25
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PPUSH
62839: CALL_OW 69
62843: ST_TO_ADDR
// end ;
62844: LD_VAR 0 2
62848: RET
// export function Shuffle ( array ) ; var i , index ; begin
62849: LD_INT 0
62851: PPUSH
62852: PPUSH
62853: PPUSH
// result := [ ] ;
62854: LD_ADDR_VAR 0 2
62858: PUSH
62859: EMPTY
62860: ST_TO_ADDR
// if not array then
62861: LD_VAR 0 1
62865: NOT
62866: IFFALSE 62870
// exit ;
62868: GO 62969
// Randomize ;
62870: CALL_OW 10
// for i = array downto 1 do
62874: LD_ADDR_VAR 0 3
62878: PUSH
62879: DOUBLE
62880: LD_VAR 0 1
62884: INC
62885: ST_TO_ADDR
62886: LD_INT 1
62888: PUSH
62889: FOR_DOWNTO
62890: IFFALSE 62967
// begin index := rand ( 1 , array ) ;
62892: LD_ADDR_VAR 0 4
62896: PUSH
62897: LD_INT 1
62899: PPUSH
62900: LD_VAR 0 1
62904: PPUSH
62905: CALL_OW 12
62909: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62910: LD_ADDR_VAR 0 2
62914: PUSH
62915: LD_VAR 0 2
62919: PPUSH
62920: LD_VAR 0 2
62924: PUSH
62925: LD_INT 1
62927: PLUS
62928: PPUSH
62929: LD_VAR 0 1
62933: PUSH
62934: LD_VAR 0 4
62938: ARRAY
62939: PPUSH
62940: CALL_OW 2
62944: ST_TO_ADDR
// array := Delete ( array , index ) ;
62945: LD_ADDR_VAR 0 1
62949: PUSH
62950: LD_VAR 0 1
62954: PPUSH
62955: LD_VAR 0 4
62959: PPUSH
62960: CALL_OW 3
62964: ST_TO_ADDR
// end ;
62965: GO 62889
62967: POP
62968: POP
// end ;
62969: LD_VAR 0 2
62973: RET
// export function GetBaseMaterials ( base ) ; begin
62974: LD_INT 0
62976: PPUSH
// result := [ 0 , 0 , 0 ] ;
62977: LD_ADDR_VAR 0 2
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: LD_INT 0
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: LIST
62995: ST_TO_ADDR
// if not base then
62996: LD_VAR 0 1
63000: NOT
63001: IFFALSE 63005
// exit ;
63003: GO 63054
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63005: LD_ADDR_VAR 0 2
63009: PUSH
63010: LD_VAR 0 1
63014: PPUSH
63015: LD_INT 1
63017: PPUSH
63018: CALL_OW 275
63022: PUSH
63023: LD_VAR 0 1
63027: PPUSH
63028: LD_INT 2
63030: PPUSH
63031: CALL_OW 275
63035: PUSH
63036: LD_VAR 0 1
63040: PPUSH
63041: LD_INT 3
63043: PPUSH
63044: CALL_OW 275
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: LIST
63053: ST_TO_ADDR
// end ;
63054: LD_VAR 0 2
63058: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63059: LD_INT 0
63061: PPUSH
63062: PPUSH
// result := array ;
63063: LD_ADDR_VAR 0 3
63067: PUSH
63068: LD_VAR 0 1
63072: ST_TO_ADDR
// if size > 0 then
63073: LD_VAR 0 2
63077: PUSH
63078: LD_INT 0
63080: GREATER
63081: IFFALSE 63127
// for i := array downto size do
63083: LD_ADDR_VAR 0 4
63087: PUSH
63088: DOUBLE
63089: LD_VAR 0 1
63093: INC
63094: ST_TO_ADDR
63095: LD_VAR 0 2
63099: PUSH
63100: FOR_DOWNTO
63101: IFFALSE 63125
// result := Delete ( result , result ) ;
63103: LD_ADDR_VAR 0 3
63107: PUSH
63108: LD_VAR 0 3
63112: PPUSH
63113: LD_VAR 0 3
63117: PPUSH
63118: CALL_OW 3
63122: ST_TO_ADDR
63123: GO 63100
63125: POP
63126: POP
// end ;
63127: LD_VAR 0 3
63131: RET
// export function ComExit ( unit ) ; var tmp ; begin
63132: LD_INT 0
63134: PPUSH
63135: PPUSH
// if not IsInUnit ( unit ) then
63136: LD_VAR 0 1
63140: PPUSH
63141: CALL_OW 310
63145: NOT
63146: IFFALSE 63150
// exit ;
63148: GO 63210
// tmp := IsInUnit ( unit ) ;
63150: LD_ADDR_VAR 0 3
63154: PUSH
63155: LD_VAR 0 1
63159: PPUSH
63160: CALL_OW 310
63164: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63165: LD_VAR 0 3
63169: PPUSH
63170: CALL_OW 247
63174: PUSH
63175: LD_INT 2
63177: EQUAL
63178: IFFALSE 63191
// ComExitVehicle ( unit ) else
63180: LD_VAR 0 1
63184: PPUSH
63185: CALL_OW 121
63189: GO 63200
// ComExitBuilding ( unit ) ;
63191: LD_VAR 0 1
63195: PPUSH
63196: CALL_OW 122
// result := tmp ;
63200: LD_ADDR_VAR 0 2
63204: PUSH
63205: LD_VAR 0 3
63209: ST_TO_ADDR
// end ;
63210: LD_VAR 0 2
63214: RET
// export function ResetHc ; begin
63215: LD_INT 0
63217: PPUSH
// InitHc ;
63218: CALL_OW 19
// hc_importance := 0 ;
63222: LD_ADDR_OWVAR 32
63226: PUSH
63227: LD_INT 0
63229: ST_TO_ADDR
// end ;
63230: LD_VAR 0 1
63234: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63235: LD_INT 0
63237: PPUSH
63238: PPUSH
63239: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63240: LD_ADDR_VAR 0 6
63244: PUSH
63245: LD_VAR 0 1
63249: PUSH
63250: LD_VAR 0 3
63254: PLUS
63255: PUSH
63256: LD_INT 2
63258: DIV
63259: ST_TO_ADDR
// if _x < 0 then
63260: LD_VAR 0 6
63264: PUSH
63265: LD_INT 0
63267: LESS
63268: IFFALSE 63285
// _x := _x * - 1 ;
63270: LD_ADDR_VAR 0 6
63274: PUSH
63275: LD_VAR 0 6
63279: PUSH
63280: LD_INT 1
63282: NEG
63283: MUL
63284: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63285: LD_ADDR_VAR 0 7
63289: PUSH
63290: LD_VAR 0 2
63294: PUSH
63295: LD_VAR 0 4
63299: PLUS
63300: PUSH
63301: LD_INT 2
63303: DIV
63304: ST_TO_ADDR
// if _y < 0 then
63305: LD_VAR 0 7
63309: PUSH
63310: LD_INT 0
63312: LESS
63313: IFFALSE 63330
// _y := _y * - 1 ;
63315: LD_ADDR_VAR 0 7
63319: PUSH
63320: LD_VAR 0 7
63324: PUSH
63325: LD_INT 1
63327: NEG
63328: MUL
63329: ST_TO_ADDR
// result := [ _x , _y ] ;
63330: LD_ADDR_VAR 0 5
63334: PUSH
63335: LD_VAR 0 6
63339: PUSH
63340: LD_VAR 0 7
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: ST_TO_ADDR
// end ;
63349: LD_VAR 0 5
63353: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63354: LD_INT 0
63356: PPUSH
63357: PPUSH
63358: PPUSH
63359: PPUSH
// task := GetTaskList ( unit ) ;
63360: LD_ADDR_VAR 0 7
63364: PUSH
63365: LD_VAR 0 1
63369: PPUSH
63370: CALL_OW 437
63374: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63375: LD_VAR 0 7
63379: NOT
63380: PUSH
63381: LD_VAR 0 1
63385: PPUSH
63386: LD_VAR 0 2
63390: PPUSH
63391: CALL_OW 308
63395: NOT
63396: AND
63397: IFFALSE 63401
// exit ;
63399: GO 63519
// if IsInArea ( unit , area ) then
63401: LD_VAR 0 1
63405: PPUSH
63406: LD_VAR 0 2
63410: PPUSH
63411: CALL_OW 308
63415: IFFALSE 63433
// begin ComMoveToArea ( unit , goAway ) ;
63417: LD_VAR 0 1
63421: PPUSH
63422: LD_VAR 0 3
63426: PPUSH
63427: CALL_OW 113
// exit ;
63431: GO 63519
// end ; if task [ 1 ] [ 1 ] <> M then
63433: LD_VAR 0 7
63437: PUSH
63438: LD_INT 1
63440: ARRAY
63441: PUSH
63442: LD_INT 1
63444: ARRAY
63445: PUSH
63446: LD_STRING M
63448: NONEQUAL
63449: IFFALSE 63453
// exit ;
63451: GO 63519
// x := task [ 1 ] [ 2 ] ;
63453: LD_ADDR_VAR 0 5
63457: PUSH
63458: LD_VAR 0 7
63462: PUSH
63463: LD_INT 1
63465: ARRAY
63466: PUSH
63467: LD_INT 2
63469: ARRAY
63470: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63471: LD_ADDR_VAR 0 6
63475: PUSH
63476: LD_VAR 0 7
63480: PUSH
63481: LD_INT 1
63483: ARRAY
63484: PUSH
63485: LD_INT 3
63487: ARRAY
63488: ST_TO_ADDR
// if InArea ( x , y , area ) then
63489: LD_VAR 0 5
63493: PPUSH
63494: LD_VAR 0 6
63498: PPUSH
63499: LD_VAR 0 2
63503: PPUSH
63504: CALL_OW 309
63508: IFFALSE 63519
// ComStop ( unit ) ;
63510: LD_VAR 0 1
63514: PPUSH
63515: CALL_OW 141
// end ;
63519: LD_VAR 0 4
63523: RET
// export function Abs ( value ) ; begin
63524: LD_INT 0
63526: PPUSH
// result := value ;
63527: LD_ADDR_VAR 0 2
63531: PUSH
63532: LD_VAR 0 1
63536: ST_TO_ADDR
// if value < 0 then
63537: LD_VAR 0 1
63541: PUSH
63542: LD_INT 0
63544: LESS
63545: IFFALSE 63562
// result := value * - 1 ;
63547: LD_ADDR_VAR 0 2
63551: PUSH
63552: LD_VAR 0 1
63556: PUSH
63557: LD_INT 1
63559: NEG
63560: MUL
63561: ST_TO_ADDR
// end ;
63562: LD_VAR 0 2
63566: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63567: LD_INT 0
63569: PPUSH
63570: PPUSH
63571: PPUSH
63572: PPUSH
63573: PPUSH
63574: PPUSH
63575: PPUSH
63576: PPUSH
// if not unit or not building then
63577: LD_VAR 0 1
63581: NOT
63582: PUSH
63583: LD_VAR 0 2
63587: NOT
63588: OR
63589: IFFALSE 63593
// exit ;
63591: GO 63819
// x := GetX ( building ) ;
63593: LD_ADDR_VAR 0 4
63597: PUSH
63598: LD_VAR 0 2
63602: PPUSH
63603: CALL_OW 250
63607: ST_TO_ADDR
// y := GetY ( building ) ;
63608: LD_ADDR_VAR 0 6
63612: PUSH
63613: LD_VAR 0 2
63617: PPUSH
63618: CALL_OW 251
63622: ST_TO_ADDR
// d := GetDir ( building ) ;
63623: LD_ADDR_VAR 0 8
63627: PUSH
63628: LD_VAR 0 2
63632: PPUSH
63633: CALL_OW 254
63637: ST_TO_ADDR
// r := 4 ;
63638: LD_ADDR_VAR 0 9
63642: PUSH
63643: LD_INT 4
63645: ST_TO_ADDR
// for i := 1 to 5 do
63646: LD_ADDR_VAR 0 10
63650: PUSH
63651: DOUBLE
63652: LD_INT 1
63654: DEC
63655: ST_TO_ADDR
63656: LD_INT 5
63658: PUSH
63659: FOR_TO
63660: IFFALSE 63817
// begin _x := ShiftX ( x , d , r + i ) ;
63662: LD_ADDR_VAR 0 5
63666: PUSH
63667: LD_VAR 0 4
63671: PPUSH
63672: LD_VAR 0 8
63676: PPUSH
63677: LD_VAR 0 9
63681: PUSH
63682: LD_VAR 0 10
63686: PLUS
63687: PPUSH
63688: CALL_OW 272
63692: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63693: LD_ADDR_VAR 0 7
63697: PUSH
63698: LD_VAR 0 6
63702: PPUSH
63703: LD_VAR 0 8
63707: PPUSH
63708: LD_VAR 0 9
63712: PUSH
63713: LD_VAR 0 10
63717: PLUS
63718: PPUSH
63719: CALL_OW 273
63723: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63724: LD_VAR 0 5
63728: PPUSH
63729: LD_VAR 0 7
63733: PPUSH
63734: CALL_OW 488
63738: PUSH
63739: LD_VAR 0 5
63743: PPUSH
63744: LD_VAR 0 7
63748: PPUSH
63749: CALL_OW 428
63753: PPUSH
63754: CALL_OW 247
63758: PUSH
63759: LD_INT 3
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: IN
63769: NOT
63770: AND
63771: IFFALSE 63815
// begin ComMoveXY ( unit , _x , _y ) ;
63773: LD_VAR 0 1
63777: PPUSH
63778: LD_VAR 0 5
63782: PPUSH
63783: LD_VAR 0 7
63787: PPUSH
63788: CALL_OW 111
// result := [ _x , _y ] ;
63792: LD_ADDR_VAR 0 3
63796: PUSH
63797: LD_VAR 0 5
63801: PUSH
63802: LD_VAR 0 7
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: ST_TO_ADDR
// exit ;
63811: POP
63812: POP
63813: GO 63819
// end ; end ;
63815: GO 63659
63817: POP
63818: POP
// end ;
63819: LD_VAR 0 3
63823: RET
