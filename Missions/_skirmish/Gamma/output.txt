// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8617 0 0
// PrepareAmerican ;
 100: CALL 5237 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2712: LD_VAR 0 1
2716: PPUSH
2717: CALL_OW 255
2721: PUSH
2722: LD_INT 3
2724: EQUAL
2725: PUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 263
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: AND
2740: IFFALSE 2750
// comp_tested := true ;
2742: LD_ADDR_EXP 22
2746: PUSH
2747: LD_INT 1
2749: ST_TO_ADDR
// end ;
2750: PPOPN 2
2752: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2753: LD_VAR 0 1
2757: PUSH
2758: LD_INT 22
2760: PUSH
2761: LD_INT 1
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: LD_INT 21
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PPUSH
2782: CALL_OW 69
2786: IN
2787: IFFALSE 2865
// if attacked = false and sikorski_ar = false then
2789: LD_EXP 15
2793: PUSH
2794: LD_INT 0
2796: EQUAL
2797: PUSH
2798: LD_EXP 12
2802: PUSH
2803: LD_INT 0
2805: EQUAL
2806: AND
2807: IFFALSE 2865
// begin attacked := true ;
2809: LD_ADDR_EXP 15
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// if IsInUnit ( donald ) then
2817: LD_EXP 13
2821: PPUSH
2822: CALL_OW 310
2826: IFFALSE 2842
// SayRadio ( donald , DGammaF ) else
2828: LD_EXP 13
2832: PPUSH
2833: LD_STRING DGammaF
2835: PPUSH
2836: CALL_OW 94
2840: GO 2865
// if IsInUnit ( van ) then
2842: LD_EXP 14
2846: PPUSH
2847: CALL_OW 310
2851: IFFALSE 2865
// SayRadio ( van , DGammaM ) ;
2853: LD_EXP 14
2857: PPUSH
2858: LD_STRING DGammaM
2860: PPUSH
2861: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2865: LD_VAR 0 1
2869: PUSH
2870: LD_INT 33
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: IN
2885: IFFALSE 2896
// ComUnlink ( un ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 136
// end ;
2896: PPOPN 1
2898: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2899: LD_VAR 0 2
2903: PPUSH
2904: CALL_OW 258
2908: PUSH
2909: LD_INT 1
2911: EQUAL
2912: IFFALSE 2926
// Say ( sci , Dsci3 ) ;
2914: LD_VAR 0 2
2918: PPUSH
2919: LD_STRING Dsci3
2921: PPUSH
2922: CALL_OW 88
// end ;
2926: PPOPN 2
2928: END
// on BuildingComplete ( b ) do var i ;
2929: LD_INT 0
2931: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2932: LD_VAR 0 1
2936: PPUSH
2937: CALL_OW 266
2941: PUSH
2942: LD_INT 0
2944: EQUAL
2945: PUSH
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 255
2955: PUSH
2956: LD_INT 3
2958: EQUAL
2959: AND
2960: PUSH
2961: LD_EXP 6
2965: PUSH
2966: LD_INT 0
2968: EQUAL
2969: AND
2970: IFFALSE 3034
// begin SetBName ( b , kalinin ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: LD_STRING kalinin
2979: PPUSH
2980: CALL_OW 500
// dep_x := GetX ( b ) ;
2984: LD_ADDR_EXP 7
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 250
2998: ST_TO_ADDR
// dep_y := GetY ( b ) ;
2999: LD_ADDR_EXP 8
3003: PUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 251
3013: ST_TO_ADDR
// depot_rdy := true ;
3014: LD_ADDR_EXP 6
3018: PUSH
3019: LD_INT 1
3021: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3022: LD_EXP 2
3026: PPUSH
3027: LD_STRING Dpop3
3029: PPUSH
3030: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3034: LD_VAR 0 1
3038: PPUSH
3039: CALL_OW 266
3043: PUSH
3044: LD_INT 6
3046: EQUAL
3047: PUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 255
3057: PUSH
3058: LD_INT 3
3060: EQUAL
3061: AND
3062: PUSH
3063: LD_EXP 21
3067: PUSH
3068: LD_INT 0
3070: EQUAL
3071: AND
3072: IFFALSE 3167
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3074: LD_INT 22
3076: PUSH
3077: LD_INT 3
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 25
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PPUSH
3098: CALL_OW 69
3102: PUSH
3103: LD_INT 0
3105: GREATER
3106: IFFALSE 3167
// begin event_comp := true ;
3108: LD_ADDR_EXP 21
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3116: LD_INT 22
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 25
3128: PUSH
3129: LD_INT 4
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 26
3138: PUSH
3139: LD_INT 1
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: PUSH
3156: LD_INT 1
3158: ARRAY
3159: PPUSH
3160: LD_STRING Dsci1
3162: PPUSH
3163: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3167: LD_VAR 0 1
3171: PPUSH
3172: CALL_OW 266
3176: PUSH
3177: LD_INT 32
3179: EQUAL
3180: PUSH
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 255
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: AND
3195: IFFALSE 3260
// begin RaiseSailEvent ( 6 ) ;
3197: LD_INT 6
3199: PPUSH
3200: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3204: LD_VAR 0 1
3208: PPUSH
3209: LD_EXP 18
3213: PUSH
3214: LD_INT 4
3216: ARRAY
3217: PPUSH
3218: CALL_OW 208
// for i = 1 to 4 do
3222: LD_ADDR_VAR 0 2
3226: PUSH
3227: DOUBLE
3228: LD_INT 1
3230: DEC
3231: ST_TO_ADDR
3232: LD_INT 4
3234: PUSH
3235: FOR_TO
3236: IFFALSE 3258
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3238: LD_ADDR_EXP 18
3242: PUSH
3243: LD_EXP 18
3247: PPUSH
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 3
3255: ST_TO_ADDR
3256: GO 3235
3258: POP
3259: POP
// end ; end ;
3260: PPOPN 2
3262: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL 23430 0 1
// if un in Patrol then
3272: LD_VAR 0 1
3276: PUSH
3277: LD_EXP 17
3281: IN
3282: IFFALSE 3300
// Patrol := Patrol diff un ;
3284: LD_ADDR_EXP 17
3288: PUSH
3289: LD_EXP 17
3293: PUSH
3294: LD_VAR 0 1
3298: DIFF
3299: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3300: LD_VAR 0 1
3304: PUSH
3305: LD_INT 22
3307: PUSH
3308: LD_INT 1
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 30
3317: PUSH
3318: LD_INT 32
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 69
3333: IN
3334: IFFALSE 3420
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3336: LD_ADDR_EXP 18
3340: PUSH
3341: LD_EXP 18
3345: PUSH
3346: LD_VAR 0 1
3350: PPUSH
3351: CALL_OW 250
3355: ADD
3356: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3357: LD_ADDR_EXP 18
3361: PUSH
3362: LD_EXP 18
3366: PUSH
3367: LD_VAR 0 1
3371: PPUSH
3372: CALL_OW 251
3376: ADD
3377: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3378: LD_ADDR_EXP 18
3382: PUSH
3383: LD_EXP 18
3387: PUSH
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 254
3397: ADD
3398: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3399: LD_ADDR_EXP 18
3403: PUSH
3404: LD_EXP 18
3408: PUSH
3409: LD_VAR 0 1
3413: PPUSH
3414: CALL_OW 269
3418: ADD
3419: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3420: LD_VAR 0 1
3424: PUSH
3425: LD_INT 33
3427: PUSH
3428: LD_INT 2
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 3
3437: PUSH
3438: LD_INT 34
3440: PUSH
3441: LD_INT 13
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PPUSH
3456: CALL_OW 69
3460: IN
3461: IFFALSE 3477
// new_veh := new_veh + 1 ;
3463: LD_ADDR_EXP 19
3467: PUSH
3468: LD_EXP 19
3472: PUSH
3473: LD_INT 1
3475: PLUS
3476: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3477: LD_VAR 0 1
3481: PUSH
3482: LD_INT 34
3484: PUSH
3485: LD_INT 13
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 69
3496: IN
3497: IFFALSE 3518
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3499: LD_INT 26
3501: PPUSH
3502: LD_INT 3
3504: PPUSH
3505: LD_INT 2
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: LD_INT 13
3513: PPUSH
3514: CALL_OW 185
// if un = am_dep then
3518: LD_VAR 0 1
3522: PUSH
3523: LD_INT 25
3525: EQUAL
3526: IFFALSE 3694
// begin SayRadio ( Platonov , DPlat ) ;
3528: LD_EXP 4
3532: PPUSH
3533: LD_STRING DPlat
3535: PPUSH
3536: CALL_OW 94
// if timer <= 30 30$00 then
3540: LD_EXP 24
3544: PUSH
3545: LD_INT 63000
3547: LESSEQUAL
3548: IFFALSE 3562
// AddMedal ( gamma_med3 , 1 ) else
3550: LD_STRING gamma_med3
3552: PPUSH
3553: LD_INT 1
3555: PPUSH
3556: CALL_OW 101
3560: GO 3612
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3562: LD_EXP 24
3566: PUSH
3567: LD_INT 105000
3569: PUSH
3570: LD_INT 88200
3572: PUSH
3573: LD_INT 73500
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_EXP 1
3585: ARRAY
3586: LESSEQUAL
3587: IFFALSE 3601
// AddMedal ( gamma_med3 , 2 ) else
3589: LD_STRING gamma_med3
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 101
3599: GO 3612
// AddMedal ( gamma_med3 , - 1 ) ;
3601: LD_STRING gamma_med3
3603: PPUSH
3604: LD_INT 1
3606: NEG
3607: PPUSH
3608: CALL_OW 101
// if not comp_tested then
3612: LD_EXP 22
3616: NOT
3617: IFFALSE 3632
// AddMedal ( gamma_med2 , - 1 ) else
3619: LD_STRING gamma_med2
3621: PPUSH
3622: LD_INT 1
3624: NEG
3625: PPUSH
3626: CALL_OW 101
3630: GO 3642
// AddMedal ( gamma_med2 , 1 ) ;
3632: LD_STRING gamma_med2
3634: PPUSH
3635: LD_INT 1
3637: PPUSH
3638: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3642: LD_EXP 9
3646: PPUSH
3647: CALL_OW 301
3651: PUSH
3652: LD_EXP 23
3656: NOT
3657: AND
3658: IFFALSE 3672
// AddMedal ( gamma_med1 , 1 ) else
3660: LD_STRING gamma_med1
3662: PPUSH
3663: LD_INT 1
3665: PPUSH
3666: CALL_OW 101
3670: GO 3683
// AddMedal ( gamma_med1 , - 1 ) ;
3672: LD_STRING gamma_med1
3674: PPUSH
3675: LD_INT 1
3677: NEG
3678: PPUSH
3679: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3683: LD_STRING GAMMA_MEDALS
3685: PPUSH
3686: CALL_OW 102
// YouWin ;
3690: CALL_OW 103
// end ; if un = commander then
3694: LD_VAR 0 1
3698: PUSH
3699: LD_EXP 3
3703: EQUAL
3704: IFFALSE 3713
// YouLost ( comml ) ;
3706: LD_STRING comml
3708: PPUSH
3709: CALL_OW 104
// if un = sikorski then
3713: LD_VAR 0 1
3717: PUSH
3718: LD_EXP 9
3722: EQUAL
3723: IFFALSE 3735
// AddMedal ( gamma_med1 , 1 ) ;
3725: LD_STRING gamma_med1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: CALL_OW 101
// end ;
3735: PPOPN 1
3737: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
// begin if event = 1 then
3749: LD_VAR 0 1
3753: PUSH
3754: LD_INT 1
3756: EQUAL
3757: IFFALSE 4054
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3759: LD_ADDR_VAR 0 4
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 1
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 21
3776: PUSH
3777: LD_INT 3
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 3
3786: PUSH
3787: LD_INT 24
3789: PUSH
3790: LD_INT 1000
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: PPUSH
3806: CALL_OW 69
3810: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3811: LD_ADDR_VAR 0 8
3815: PUSH
3816: LD_INT 22
3818: PUSH
3819: LD_INT 1
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 25
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 24
3838: PUSH
3839: LD_INT 1000
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: PPUSH
3854: CALL_OW 69
3858: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3859: LD_ADDR_VAR 0 9
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 1
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 13
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 69
3892: ST_TO_ADDR
// if engs > 0 then
3893: LD_VAR 0 8
3897: PUSH
3898: LD_INT 0
3900: GREATER
3901: IFFALSE 4006
// for i = 1 to engs do
3903: LD_ADDR_VAR 0 2
3907: PUSH
3908: DOUBLE
3909: LD_INT 1
3911: DEC
3912: ST_TO_ADDR
3913: LD_VAR 0 8
3917: PUSH
3918: FOR_TO
3919: IFFALSE 4004
// begin if IsInUnit ( engs [ i ] ) then
3921: LD_VAR 0 8
3925: PUSH
3926: LD_VAR 0 2
3930: ARRAY
3931: PPUSH
3932: CALL_OW 310
3936: IFFALSE 3953
// ComExitBuilding ( engs [ i ] ) ;
3938: LD_VAR 0 8
3942: PUSH
3943: LD_VAR 0 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3953: LD_INT 7
3955: PPUSH
3956: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3960: LD_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: ARRAY
3970: PPUSH
3971: CALL_OW 314
3975: NOT
3976: IFFALSE 4002
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3978: LD_VAR 0 8
3982: PUSH
3983: LD_VAR 0 2
3987: ARRAY
3988: PPUSH
3989: LD_VAR 0 4
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: CALL_OW 130
// end ;
4002: GO 3918
4004: POP
4005: POP
// if crane > 0 then
4006: LD_VAR 0 9
4010: PUSH
4011: LD_INT 0
4013: GREATER
4014: IFFALSE 4054
// if not HasTask ( crane [ 1 ] ) then
4016: LD_VAR 0 9
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: CALL_OW 314
4029: NOT
4030: IFFALSE 4054
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4032: LD_VAR 0 9
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: LD_VAR 0 4
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: PPUSH
4050: CALL_OW 130
// end ; if event = 2 then
4054: LD_VAR 0 1
4058: PUSH
4059: LD_INT 2
4061: EQUAL
4062: IFFALSE 4184
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4064: LD_ADDR_VAR 0 8
4068: PUSH
4069: LD_INT 22
4071: PUSH
4072: LD_INT 1
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 2
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 69
4097: ST_TO_ADDR
// if engs > 0 then
4098: LD_VAR 0 8
4102: PUSH
4103: LD_INT 0
4105: GREATER
4106: IFFALSE 4184
// for i = 1 to engs do
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: DOUBLE
4114: LD_INT 1
4116: DEC
4117: ST_TO_ADDR
4118: LD_VAR 0 8
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4182
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4126: LD_VAR 0 8
4130: PUSH
4131: LD_VAR 0 2
4135: ARRAY
4136: PPUSH
4137: CALL_OW 314
4141: NOT
4142: PUSH
4143: LD_VAR 0 8
4147: PUSH
4148: LD_VAR 0 2
4152: ARRAY
4153: PPUSH
4154: CALL_OW 310
4158: NOT
4159: AND
4160: IFFALSE 4180
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4162: LD_VAR 0 8
4166: PUSH
4167: LD_VAR 0 2
4171: ARRAY
4172: PPUSH
4173: LD_INT 25
4175: PPUSH
4176: CALL_OW 120
4180: GO 4123
4182: POP
4183: POP
// end ; if event = 3 then
4184: LD_VAR 0 1
4188: PUSH
4189: LD_INT 3
4191: EQUAL
4192: IFFALSE 4556
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4194: LD_ADDR_VAR 0 4
4198: PUSH
4199: LD_INT 22
4201: PUSH
4202: LD_INT 1
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 21
4211: PUSH
4212: LD_INT 1
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 3
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 4
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PUSH
4236: LD_INT 3
4238: PUSH
4239: LD_INT 24
4241: PUSH
4242: LD_INT 800
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: PPUSH
4262: CALL_OW 69
4266: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4267: LD_ADDR_VAR 0 5
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 25
4284: PUSH
4285: LD_INT 4
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 69
4300: ST_TO_ADDR
// if filter > 0 then
4301: LD_VAR 0 4
4305: PUSH
4306: LD_INT 0
4308: GREATER
4309: IFFALSE 4498
// begin for i = 1 to doc do
4311: LD_ADDR_VAR 0 2
4315: PUSH
4316: DOUBLE
4317: LD_INT 1
4319: DEC
4320: ST_TO_ADDR
4321: LD_VAR 0 5
4325: PUSH
4326: FOR_TO
4327: IFFALSE 4427
// begin if IsInUnit ( doc [ i ] ) then
4329: LD_VAR 0 5
4333: PUSH
4334: LD_VAR 0 2
4338: ARRAY
4339: PPUSH
4340: CALL_OW 310
4344: IFFALSE 4361
// ComExitBuilding ( doc [ i ] ) ;
4346: LD_VAR 0 5
4350: PUSH
4351: LD_VAR 0 2
4355: ARRAY
4356: PPUSH
4357: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4361: LD_VAR 0 4
4365: PUSH
4366: LD_INT 1
4368: ARRAY
4369: PPUSH
4370: LD_INT 46
4372: PPUSH
4373: CALL_OW 296
4377: PUSH
4378: LD_INT 10
4380: LESS
4381: PUSH
4382: LD_VAR 0 5
4386: PUSH
4387: LD_VAR 0 2
4391: ARRAY
4392: PPUSH
4393: CALL_OW 314
4397: NOT
4398: AND
4399: IFFALSE 4425
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4401: LD_VAR 0 5
4405: PUSH
4406: LD_VAR 0 2
4410: ARRAY
4411: PPUSH
4412: LD_VAR 0 4
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PPUSH
4421: CALL_OW 128
// end ;
4425: GO 4326
4427: POP
4428: POP
// for i = 1 to filter do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_VAR 0 4
4443: PUSH
4444: FOR_TO
4445: IFFALSE 4494
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4447: LD_VAR 0 4
4451: PUSH
4452: LD_VAR 0 2
4456: ARRAY
4457: PPUSH
4458: LD_INT 46
4460: PPUSH
4461: CALL_OW 296
4465: PUSH
4466: LD_INT 10
4468: GREATER
4469: IFFALSE 4492
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4471: LD_VAR 0 4
4475: PUSH
4476: LD_VAR 0 2
4480: ARRAY
4481: PPUSH
4482: LD_INT 47
4484: PPUSH
4485: LD_INT 12
4487: PPUSH
4488: CALL_OW 111
4492: GO 4444
4494: POP
4495: POP
// end else
4496: GO 4556
// for i = 1 to doc do
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: DOUBLE
4504: LD_INT 1
4506: DEC
4507: ST_TO_ADDR
4508: LD_VAR 0 5
4512: PUSH
4513: FOR_TO
4514: IFFALSE 4554
// if not IsInUnit ( doc [ i ] ) then
4516: LD_VAR 0 5
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: PPUSH
4527: CALL_OW 310
4531: NOT
4532: IFFALSE 4552
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4534: LD_VAR 0 5
4538: PUSH
4539: LD_VAR 0 2
4543: ARRAY
4544: PPUSH
4545: LD_INT 46
4547: PPUSH
4548: CALL_OW 120
4552: GO 4513
4554: POP
4555: POP
// end ; if event = 4 then
4556: LD_VAR 0 1
4560: PUSH
4561: LD_INT 4
4563: EQUAL
4564: IFFALSE 4815
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4566: LD_ADDR_VAR 0 6
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 5
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: ST_TO_ADDR
// for i = 1 to bac do
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: DOUBLE
4606: LD_INT 1
4608: DEC
4609: ST_TO_ADDR
4610: LD_VAR 0 6
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4657
// if UnitsInside ( bac [ i ] ) < 6 then
4618: LD_VAR 0 6
4622: PUSH
4623: LD_VAR 0 2
4627: ARRAY
4628: PPUSH
4629: CALL_OW 313
4633: PUSH
4634: LD_INT 6
4636: LESS
4637: IFFALSE 4655
// place := bac [ i ] ;
4639: LD_ADDR_VAR 0 7
4643: PUSH
4644: LD_VAR 0 6
4648: PUSH
4649: LD_VAR 0 2
4653: ARRAY
4654: ST_TO_ADDR
4655: GO 4615
4657: POP
4658: POP
// if place then
4659: LD_VAR 0 7
4663: IFFALSE 4815
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4665: LD_ADDR_VAR 0 4
4669: PUSH
4670: LD_INT 22
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 25
4695: PUSH
4696: LD_INT 5
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 24
4710: PUSH
4711: LD_INT 1000
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PUSH
4723: EMPTY
4724: LIST
4725: PPUSH
4726: CALL_OW 69
4730: PUSH
4731: LD_EXP 17
4735: DIFF
4736: ST_TO_ADDR
// for i = 1 to filter do
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: DOUBLE
4743: LD_INT 1
4745: DEC
4746: ST_TO_ADDR
4747: LD_VAR 0 4
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4813
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4755: LD_VAR 0 4
4759: PUSH
4760: LD_VAR 0 2
4764: ARRAY
4765: PPUSH
4766: CALL_OW 310
4770: NOT
4771: PUSH
4772: LD_VAR 0 4
4776: PUSH
4777: LD_VAR 0 2
4781: ARRAY
4782: PPUSH
4783: CALL_OW 314
4787: NOT
4788: AND
4789: IFFALSE 4811
// ComEnterUnit ( filter [ i ] , place ) ;
4791: LD_VAR 0 4
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_VAR 0 7
4806: PPUSH
4807: CALL_OW 120
4811: GO 4752
4813: POP
4814: POP
// end ; end ; if event = 5 then
4815: LD_VAR 0 1
4819: PUSH
4820: LD_INT 5
4822: EQUAL
4823: IFFALSE 4977
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4825: LD_INT 12
4827: PPUSH
4828: LD_INT 81
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 70
4842: PUSH
4843: LD_INT 0
4845: EQUAL
4846: IFFALSE 4977
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4848: LD_ADDR_VAR 0 8
4852: PUSH
4853: LD_INT 22
4855: PUSH
4856: LD_INT 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 25
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 69
4881: ST_TO_ADDR
// if engs > 0 then
4882: LD_VAR 0 8
4886: PUSH
4887: LD_INT 0
4889: GREATER
4890: IFFALSE 4977
// for i = 1 to engs do
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: DOUBLE
4898: LD_INT 1
4900: DEC
4901: ST_TO_ADDR
4902: LD_VAR 0 8
4906: PUSH
4907: FOR_TO
4908: IFFALSE 4975
// if not HasTask ( engs [ i ] ) then
4910: LD_VAR 0 8
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: CALL_OW 314
4925: NOT
4926: IFFALSE 4973
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4928: LD_VAR 0 8
4932: PUSH
4933: LD_VAR 0 2
4937: ARRAY
4938: PPUSH
4939: LD_INT 32
4941: PPUSH
4942: LD_EXP 18
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: LD_EXP 18
4955: PUSH
4956: LD_INT 2
4958: ARRAY
4959: PPUSH
4960: LD_EXP 18
4964: PUSH
4965: LD_INT 3
4967: ARRAY
4968: PPUSH
4969: CALL_OW 145
4973: GO 4907
4975: POP
4976: POP
// end ; end ; if event = 6 then
4977: LD_VAR 0 1
4981: PUSH
4982: LD_INT 6
4984: EQUAL
4985: IFFALSE 5169
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4987: LD_ADDR_VAR 0 6
4991: PUSH
4992: LD_INT 22
4994: PUSH
4995: LD_INT 1
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PPUSH
5016: CALL_OW 69
5020: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5021: LD_VAR 0 6
5025: PUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 30
5038: PUSH
5039: LD_INT 32
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 58
5048: PUSH
5049: EMPTY
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: PPUSH
5060: CALL_OW 69
5064: PUSH
5065: LD_INT 0
5067: GREATER
5068: AND
5069: IFFALSE 5169
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5071: LD_ADDR_VAR 0 10
5075: PUSH
5076: LD_INT 22
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 30
5088: PUSH
5089: LD_INT 32
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 58
5098: PUSH
5099: EMPTY
5100: LIST
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: PUSH
5115: LD_INT 1
5117: ARRAY
5118: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: LD_VAR 0 6
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: PPUSH
5133: CALL_OW 313
5137: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5151: LD_VAR 0 3
5155: PUSH
5156: LD_INT 1
5158: ARRAY
5159: PPUSH
5160: LD_VAR 0 10
5164: PPUSH
5165: CALL_OW 180
// end ; end ; end ;
5169: PPOPN 10
5171: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_INT 1
5179: EQUAL
5180: PUSH
5181: LD_VAR 0 2
5185: PUSH
5186: LD_INT 3
5188: EQUAL
5189: AND
5190: IFFALSE 5200
// contact_am := true ;
5192: LD_ADDR_EXP 16
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// end ;
5200: PPOPN 2
5202: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: LD_VAR 0 3
5217: PPUSH
5218: CALL 23528 0 3
// end ;
5222: PPOPN 3
5224: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL 23536 0 1
// end ; end_of_file
5234: PPOPN 1
5236: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
5241: PPUSH
5242: PPUSH
5243: PPUSH
5244: PPUSH
5245: PPUSH
5246: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5247: LD_ADDR_VAR 0 5
5251: PUSH
5252: LD_INT 5
5254: PUSH
5255: LD_INT 6
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: LD_EXP 1
5270: ARRAY
5271: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5272: LD_ADDR_VAR 0 6
5276: PUSH
5277: LD_INT 4
5279: PUSH
5280: LD_INT 4
5282: PUSH
5283: LD_INT 4
5285: PUSH
5286: LD_INT 5
5288: PUSH
5289: LD_INT 5
5291: PUSH
5292: LD_INT 5
5294: PUSH
5295: LD_INT 6
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// SForce := [ ] ;
5307: LD_ADDR_EXP 11
5311: PUSH
5312: EMPTY
5313: ST_TO_ADDR
// Sikorski_Ar := false ;
5314: LD_ADDR_EXP 12
5318: PUSH
5319: LD_INT 0
5321: ST_TO_ADDR
// attacked := false ;
5322: LD_ADDR_EXP 15
5326: PUSH
5327: LD_INT 0
5329: ST_TO_ADDR
// contact_am := false ;
5330: LD_ADDR_EXP 16
5334: PUSH
5335: LD_INT 0
5337: ST_TO_ADDR
// patrol := [ ] ;
5338: LD_ADDR_EXP 17
5342: PUSH
5343: EMPTY
5344: ST_TO_ADDR
// gamma_towers := [ ] ;
5345: LD_ADDR_EXP 18
5349: PUSH
5350: EMPTY
5351: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5352: LD_INT 25
5354: PPUSH
5355: LD_STRING gamma
5357: PPUSH
5358: CALL_OW 500
// uc_side := 1 ;
5362: LD_ADDR_OWVAR 20
5366: PUSH
5367: LD_INT 1
5369: ST_TO_ADDR
// uc_nation := 1 ;
5370: LD_ADDR_OWVAR 21
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// hc_importance := 0 ;
5378: LD_ADDR_OWVAR 32
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5386: LD_ADDR_OWVAR 26
5390: PUSH
5391: LD_STRING Jeremy Sikorski
5393: ST_TO_ADDR
// hc_gallery := us ;
5394: LD_ADDR_OWVAR 33
5398: PUSH
5399: LD_STRING us
5401: ST_TO_ADDR
// hc_face_number := 19 ;
5402: LD_ADDR_OWVAR 34
5406: PUSH
5407: LD_INT 19
5409: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5410: LD_ADDR_OWVAR 31
5414: PUSH
5415: LD_VAR 0 5
5419: PPUSH
5420: LD_VAR 0 5
5424: PUSH
5425: LD_INT 2
5427: PLUS
5428: PPUSH
5429: CALL_OW 12
5433: PUSH
5434: LD_INT 4
5436: PUSH
5437: LD_INT 6
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: ST_TO_ADDR
// hc_sex := sex_male ;
5449: LD_ADDR_OWVAR 27
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// hc_class := 1 ;
5457: LD_ADDR_OWVAR 28
5461: PUSH
5462: LD_INT 1
5464: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5465: LD_ADDR_OWVAR 29
5469: PUSH
5470: LD_INT 10
5472: PUSH
5473: LD_INT 11
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: ST_TO_ADDR
// sikorski := CreateHuman ;
5480: LD_ADDR_EXP 9
5484: PUSH
5485: CALL_OW 44
5489: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5490: LD_ADDR_OWVAR 26
5494: PUSH
5495: LD_STRING Lucy Donaldson
5497: ST_TO_ADDR
// hc_gallery := us ;
5498: LD_ADDR_OWVAR 33
5502: PUSH
5503: LD_STRING us
5505: ST_TO_ADDR
// hc_face_number := 2 ;
5506: LD_ADDR_OWVAR 34
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5514: LD_ADDR_OWVAR 31
5518: PUSH
5519: LD_VAR 0 5
5523: PPUSH
5524: LD_VAR 0 5
5528: PUSH
5529: LD_INT 2
5531: PLUS
5532: PPUSH
5533: CALL_OW 12
5537: PUSH
5538: LD_INT 6
5540: PUSH
5541: LD_INT 4
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: ST_TO_ADDR
// hc_sex := sex_female ;
5553: LD_ADDR_OWVAR 27
5557: PUSH
5558: LD_INT 2
5560: ST_TO_ADDR
// hc_class := 1 ;
5561: LD_ADDR_OWVAR 28
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// donald := CreateHuman ;
5569: LD_ADDR_EXP 13
5573: PUSH
5574: CALL_OW 44
5578: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5579: LD_ADDR_OWVAR 26
5583: PUSH
5584: LD_STRING Peter Van Houten
5586: ST_TO_ADDR
// hc_gallery := us ;
5587: LD_ADDR_OWVAR 33
5591: PUSH
5592: LD_STRING us
5594: ST_TO_ADDR
// hc_face_number := 16 ;
5595: LD_ADDR_OWVAR 34
5599: PUSH
5600: LD_INT 16
5602: ST_TO_ADDR
// hc_sex := sex_male ;
5603: LD_ADDR_OWVAR 27
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// van := CreateHuman ;
5611: LD_ADDR_EXP 14
5615: PUSH
5616: CALL_OW 44
5620: ST_TO_ADDR
// hc_importance := 0 ;
5621: LD_ADDR_OWVAR 32
5625: PUSH
5626: LD_INT 0
5628: ST_TO_ADDR
// case dif of 1 :
5629: LD_EXP 1
5633: PUSH
5634: LD_INT 1
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5642
5640: GO 5653
5642: POP
// lw = 1 ; 2 :
5643: LD_ADDR_VAR 0 8
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
5651: GO 5700
5653: LD_INT 2
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5661
5659: GO 5680
5661: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5662: LD_ADDR_VAR 0 8
5666: PUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: CALL_OW 12
5677: ST_TO_ADDR
5678: GO 5700
5680: LD_INT 3
5682: DOUBLE
5683: EQUAL
5684: IFTRUE 5688
5686: GO 5699
5688: POP
// lw = 2 ; end ;
5689: LD_ADDR_VAR 0 8
5693: PUSH
5694: LD_INT 2
5696: ST_TO_ADDR
5697: GO 5700
5699: POP
// case lw of 1 :
5700: LD_VAR 0 8
5704: PUSH
5705: LD_INT 1
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5728
5713: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5714: LD_EXP 13
5718: PPUSH
5719: LD_INT 25
5721: PPUSH
5722: CALL_OW 52
5726: GO 5752
5728: LD_INT 2
5730: DOUBLE
5731: EQUAL
5732: IFTRUE 5736
5734: GO 5751
5736: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5737: LD_EXP 14
5741: PPUSH
5742: LD_INT 25
5744: PPUSH
5745: CALL_OW 52
5749: GO 5752
5751: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5752: LD_ADDR_VAR 0 2
5756: PUSH
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 30
5769: PUSH
5770: LD_INT 32
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: PUSH
5786: FOR_IN
5787: IFFALSE 5841
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5789: LD_INT 1
5791: PPUSH
5792: LD_VAR 0 5
5796: PPUSH
5797: CALL 734 0 2
5801: PPUSH
5802: LD_VAR 0 2
5806: PPUSH
5807: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5811: LD_VAR 0 2
5815: PPUSH
5816: LD_VAR 0 6
5820: PUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 12
5833: ARRAY
5834: PPUSH
5835: CALL_OW 431
// end ;
5839: GO 5786
5841: POP
5842: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5843: LD_ADDR_VAR 0 7
5847: PUSH
5848: LD_INT 22
5850: PUSH
5851: LD_INT 1
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 2
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 1
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 5
5873: PUSH
5874: EMPTY
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 69
5890: ST_TO_ADDR
// for i = 1 to sol do
5891: LD_ADDR_VAR 0 2
5895: PUSH
5896: DOUBLE
5897: LD_INT 1
5899: DEC
5900: ST_TO_ADDR
5901: LD_VAR 0 7
5905: PUSH
5906: FOR_TO
5907: IFFALSE 5929
// SetTag ( sol [ i ] , 1 ) ;
5909: LD_VAR 0 7
5913: PUSH
5914: LD_VAR 0 2
5918: ARRAY
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: CALL_OW 109
5927: GO 5906
5929: POP
5930: POP
// for i = 1 to 3 do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: DOUBLE
5937: LD_INT 1
5939: DEC
5940: ST_TO_ADDR
5941: LD_INT 3
5943: PUSH
5944: FOR_TO
5945: IFFALSE 5969
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5947: LD_INT 3
5949: PPUSH
5950: LD_VAR 0 5
5954: PPUSH
5955: CALL 734 0 2
5959: PPUSH
5960: LD_INT 56
5962: PPUSH
5963: CALL_OW 52
5967: GO 5944
5969: POP
5970: POP
// for i = 1 to 6 do
5971: LD_ADDR_VAR 0 2
5975: PUSH
5976: DOUBLE
5977: LD_INT 1
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 6
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6009
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
5987: LD_INT 3
5989: PPUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: CALL 734 0 2
5999: PPUSH
6000: LD_INT 26
6002: PPUSH
6003: CALL_OW 52
6007: GO 5984
6009: POP
6010: POP
// for i = 1 to 5 do
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: DOUBLE
6017: LD_INT 1
6019: DEC
6020: ST_TO_ADDR
6021: LD_INT 5
6023: PUSH
6024: FOR_TO
6025: IFFALSE 6052
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_VAR 0 5
6034: PPUSH
6035: CALL 734 0 2
6039: PPUSH
6040: LD_INT 7
6042: PPUSH
6043: LD_INT 0
6045: PPUSH
6046: CALL_OW 49
6050: GO 6024
6052: POP
6053: POP
// for i = 1 to 3 do
6054: LD_ADDR_VAR 0 2
6058: PUSH
6059: DOUBLE
6060: LD_INT 1
6062: DEC
6063: ST_TO_ADDR
6064: LD_INT 3
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6092
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6070: LD_INT 4
6072: PPUSH
6073: LD_VAR 0 5
6077: PPUSH
6078: CALL 734 0 2
6082: PPUSH
6083: LD_INT 46
6085: PPUSH
6086: CALL_OW 52
6090: GO 6067
6092: POP
6093: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 30
6111: PUSH
6112: LD_INT 5
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PPUSH
6123: CALL_OW 69
6127: PUSH
6128: FOR_IN
6129: IFFALSE 6243
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6131: LD_INT 5
6133: PPUSH
6134: LD_VAR 0 5
6138: PPUSH
6139: CALL 734 0 2
6143: PPUSH
6144: LD_VAR 0 2
6148: PPUSH
6149: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6153: LD_INT 5
6155: PPUSH
6156: LD_VAR 0 5
6160: PPUSH
6161: CALL 734 0 2
6165: PPUSH
6166: LD_VAR 0 2
6170: PPUSH
6171: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6175: LD_INT 1
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: CALL 734 0 2
6187: PPUSH
6188: LD_VAR 0 2
6192: PPUSH
6193: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6197: LD_INT 1
6199: PPUSH
6200: LD_VAR 0 5
6204: PPUSH
6205: CALL 734 0 2
6209: PPUSH
6210: LD_VAR 0 2
6214: PPUSH
6215: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6219: LD_INT 1
6221: PPUSH
6222: LD_VAR 0 5
6226: PPUSH
6227: CALL 734 0 2
6231: PPUSH
6232: LD_VAR 0 2
6236: PPUSH
6237: CALL_OW 52
// end ;
6241: GO 6128
6243: POP
6244: POP
// if dif > 1 then
6245: LD_EXP 1
6249: PUSH
6250: LD_INT 1
6252: GREATER
6253: IFFALSE 6326
// for i = 1 to ( dif - 1 ) do
6255: LD_ADDR_VAR 0 2
6259: PUSH
6260: DOUBLE
6261: LD_INT 1
6263: DEC
6264: ST_TO_ADDR
6265: LD_EXP 1
6269: PUSH
6270: LD_INT 1
6272: MINUS
6273: PUSH
6274: FOR_TO
6275: IFFALSE 6324
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6277: LD_ADDR_EXP 17
6281: PUSH
6282: LD_EXP 17
6286: PUSH
6287: LD_INT 1
6289: PPUSH
6290: LD_VAR 0 5
6294: PPUSH
6295: CALL 734 0 2
6299: ADD
6300: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6301: LD_EXP 17
6305: PUSH
6306: LD_VAR 0 2
6310: ARRAY
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: LD_INT 0
6317: PPUSH
6318: CALL_OW 49
// end ;
6322: GO 6274
6324: POP
6325: POP
// game_started := true ;
6326: LD_ADDR_EXP 10
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6334: LD_INT 26
6336: PPUSH
6337: LD_INT 3
6339: PPUSH
6340: LD_INT 2
6342: PPUSH
6343: LD_INT 2
6345: PPUSH
6346: LD_INT 13
6348: PPUSH
6349: CALL_OW 125
// while ( contact_am = false ) do
6353: LD_EXP 16
6357: PUSH
6358: LD_INT 0
6360: EQUAL
6361: IFFALSE 6372
// begin Wait ( 0 0$01 ) ;
6363: LD_INT 35
6365: PPUSH
6366: CALL_OW 67
// end ;
6370: GO 6353
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6372: LD_INT 8400
6374: PUSH
6375: LD_INT 6300
6377: PUSH
6378: LD_INT 5250
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_EXP 1
6390: ARRAY
6391: PPUSH
6392: CALL_OW 67
// case dif of 1 :
6396: LD_EXP 1
6400: PUSH
6401: LD_INT 1
6403: DOUBLE
6404: EQUAL
6405: IFTRUE 6409
6407: GO 6584
6409: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6410: LD_INT 26
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 1
6418: PPUSH
6419: LD_INT 2
6421: PPUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: LD_INT 1
6442: PPUSH
6443: LD_INT 4
6445: PPUSH
6446: CALL_OW 12
6450: ARRAY
6451: PPUSH
6452: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6456: LD_INT 26
6458: PPUSH
6459: LD_INT 3
6461: PPUSH
6462: LD_INT 1
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: LD_INT 4
6470: PUSH
6471: LD_INT 5
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 1
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: CALL_OW 12
6492: ARRAY
6493: PPUSH
6494: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6498: LD_INT 26
6500: PPUSH
6501: LD_INT 3
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: LD_INT 4
6512: PUSH
6513: LD_INT 5
6515: PUSH
6516: LD_INT 5
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_INT 3
6529: PPUSH
6530: CALL_OW 12
6534: ARRAY
6535: PPUSH
6536: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6540: LD_INT 26
6542: PPUSH
6543: LD_INT 3
6545: PPUSH
6546: LD_INT 1
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: LD_INT 4
6554: PUSH
6555: LD_INT 3
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 3
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: PPUSH
6578: CALL_OW 185
// end ; 2 :
6582: GO 7111
6584: LD_INT 2
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6805
6592: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6593: LD_INT 26
6595: PPUSH
6596: LD_INT 3
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 2
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 5
6610: PUSH
6611: LD_INT 5
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6635: LD_INT 26
6637: PPUSH
6638: LD_INT 3
6640: PPUSH
6641: LD_INT 1
6643: PPUSH
6644: LD_INT 2
6646: PPUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 5
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_INT 3
6666: PPUSH
6667: CALL_OW 12
6671: ARRAY
6672: PPUSH
6673: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6677: LD_INT 26
6679: PPUSH
6680: LD_INT 3
6682: PPUSH
6683: LD_INT 1
6685: PPUSH
6686: LD_INT 2
6688: PPUSH
6689: LD_INT 4
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 1
6705: PPUSH
6706: LD_INT 3
6708: PPUSH
6709: CALL_OW 12
6713: ARRAY
6714: PPUSH
6715: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6719: LD_INT 26
6721: PPUSH
6722: LD_INT 4
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_INT 2
6730: PPUSH
6731: LD_INT 4
6733: PUSH
6734: LD_INT 5
6736: PUSH
6737: LD_INT 6
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 1
6747: PPUSH
6748: LD_INT 3
6750: PPUSH
6751: CALL_OW 12
6755: ARRAY
6756: PPUSH
6757: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6761: LD_INT 26
6763: PPUSH
6764: LD_INT 4
6766: PPUSH
6767: LD_INT 1
6769: PPUSH
6770: LD_INT 2
6772: PPUSH
6773: LD_INT 4
6775: PUSH
6776: LD_INT 5
6778: PUSH
6779: LD_INT 6
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 1
6789: PPUSH
6790: LD_INT 3
6792: PPUSH
6793: CALL_OW 12
6797: ARRAY
6798: PPUSH
6799: CALL_OW 185
// end ; 3 :
6803: GO 7111
6805: LD_INT 3
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 7110
6813: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6814: LD_INT 26
6816: PPUSH
6817: LD_INT 3
6819: PPUSH
6820: LD_INT 1
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: LD_INT 4
6828: PUSH
6829: LD_INT 5
6831: PUSH
6832: LD_INT 5
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 1
6842: PPUSH
6843: LD_INT 3
6845: PPUSH
6846: CALL_OW 12
6850: ARRAY
6851: PPUSH
6852: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6856: LD_INT 26
6858: PPUSH
6859: LD_INT 3
6861: PPUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_INT 2
6867: PPUSH
6868: LD_INT 4
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: LD_INT 5
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 1
6884: PPUSH
6885: LD_INT 3
6887: PPUSH
6888: CALL_OW 12
6892: ARRAY
6893: PPUSH
6894: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6898: LD_INT 26
6900: PPUSH
6901: LD_INT 3
6903: PPUSH
6904: LD_INT 1
6906: PPUSH
6907: LD_INT 2
6909: PPUSH
6910: LD_INT 4
6912: PUSH
6913: LD_INT 5
6915: PUSH
6916: LD_INT 5
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 1
6926: PPUSH
6927: LD_INT 3
6929: PPUSH
6930: CALL_OW 12
6934: ARRAY
6935: PPUSH
6936: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6940: LD_INT 26
6942: PPUSH
6943: LD_INT 3
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 2
6951: PPUSH
6952: LD_INT 4
6954: PUSH
6955: LD_INT 5
6957: PUSH
6958: LD_INT 5
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 1
6968: PPUSH
6969: LD_INT 3
6971: PPUSH
6972: CALL_OW 12
6976: ARRAY
6977: PPUSH
6978: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6982: LD_INT 26
6984: PPUSH
6985: LD_INT 4
6987: PPUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: LD_INT 4
6996: PUSH
6997: LD_INT 5
6999: PUSH
7000: LD_INT 6
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 1
7010: PPUSH
7011: LD_INT 3
7013: PPUSH
7014: CALL_OW 12
7018: ARRAY
7019: PPUSH
7020: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7024: LD_INT 26
7026: PPUSH
7027: LD_INT 4
7029: PPUSH
7030: LD_INT 1
7032: PPUSH
7033: LD_INT 2
7035: PPUSH
7036: LD_INT 4
7038: PUSH
7039: LD_INT 5
7041: PUSH
7042: LD_INT 6
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 1
7052: PPUSH
7053: LD_INT 3
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7066: LD_INT 26
7068: PPUSH
7069: LD_INT 4
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: LD_INT 4
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 1
7094: PPUSH
7095: LD_INT 3
7097: PPUSH
7098: CALL_OW 12
7102: ARRAY
7103: PPUSH
7104: CALL_OW 185
// end ; end ;
7108: GO 7111
7110: POP
// end ;
7111: LD_VAR 0 1
7115: RET
// every 0 0$01 do var i , filter ;
7116: GO 7118
7118: DISABLE
7119: LD_INT 0
7121: PPUSH
7122: PPUSH
// begin enable ;
7123: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7124: LD_INT 22
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 25
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PUSH
7153: LD_INT 0
7155: GREATER
7156: IFFALSE 7165
// RaiseSailEvent ( 3 ) ;
7158: LD_INT 3
7160: PPUSH
7161: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7165: LD_INT 22
7167: PUSH
7168: LD_INT 1
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 21
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 3
7187: PUSH
7188: LD_INT 24
7190: PUSH
7191: LD_INT 1000
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PPUSH
7207: CALL_OW 69
7211: PUSH
7212: LD_INT 0
7214: GREATER
7215: IFFALSE 7226
// RaiseSailEvent ( 1 ) else
7217: LD_INT 1
7219: PPUSH
7220: CALL_OW 427
7224: GO 7233
// RaiseSailEvent ( 2 ) ;
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7233: LD_INT 22
7235: PUSH
7236: LD_INT 1
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 30
7245: PUSH
7246: LD_INT 5
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: PUSH
7262: LD_INT 0
7264: GREATER
7265: IFFALSE 7274
// RaiseSailEvent ( 4 ) ;
7267: LD_INT 4
7269: PPUSH
7270: CALL_OW 427
// if gamma_towers > 0 then
7274: LD_EXP 18
7278: PUSH
7279: LD_INT 0
7281: GREATER
7282: IFFALSE 7291
// RaiseSailEvent ( 5 ) ;
7284: LD_INT 5
7286: PPUSH
7287: CALL_OW 427
// end ;
7291: PPOPN 2
7293: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7294: GO 7296
7296: DISABLE
7297: LD_INT 0
7299: PPUSH
7300: PPUSH
// begin enable ;
7301: ENABLE
// if new_veh > 0 then
7302: LD_EXP 19
7306: PUSH
7307: LD_INT 0
7309: GREATER
7310: IFFALSE 7497
// while ( new_veh > 0 ) do
7312: LD_EXP 19
7316: PUSH
7317: LD_INT 0
7319: GREATER
7320: IFFALSE 7497
// begin Wait ( 0 0$01 ) ;
7322: LD_INT 35
7324: PPUSH
7325: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7329: LD_INT 26
7331: PPUSH
7332: CALL_OW 461
7336: PUSH
7337: LD_INT 2
7339: EQUAL
7340: IFFALSE 7495
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7342: LD_ADDR_VAR 0 1
7346: PUSH
7347: LD_INT 2
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: LD_INT 4
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 4
7370: PPUSH
7371: CALL_OW 12
7375: ARRAY
7376: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7377: LD_VAR 0 1
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: IN
7392: IFFALSE 7427
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7394: LD_ADDR_VAR 0 2
7398: PUSH
7399: LD_INT 4
7401: PUSH
7402: LD_INT 5
7404: PUSH
7405: LD_INT 7
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 1
7415: PPUSH
7416: LD_INT 3
7418: PPUSH
7419: CALL_OW 12
7423: ARRAY
7424: ST_TO_ADDR
7425: GO 7458
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7427: LD_ADDR_VAR 0 2
7431: PUSH
7432: LD_INT 5
7434: PUSH
7435: LD_INT 7
7437: PUSH
7438: LD_INT 6
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_INT 3
7451: PPUSH
7452: CALL_OW 12
7456: ARRAY
7457: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7458: LD_INT 26
7460: PPUSH
7461: LD_VAR 0 1
7465: PPUSH
7466: LD_INT 1
7468: PPUSH
7469: LD_INT 2
7471: PPUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 125
// new_veh := new_veh - 1 ;
7481: LD_ADDR_EXP 19
7485: PUSH
7486: LD_EXP 19
7490: PUSH
7491: LD_INT 1
7493: MINUS
7494: ST_TO_ADDR
// end ; end ;
7495: GO 7312
// end ;
7497: PPOPN 2
7499: END
// every 0 0$01 do var v , filter , am_cmeh ;
7500: GO 7502
7502: DISABLE
7503: LD_INT 0
7505: PPUSH
7506: PPUSH
7507: PPUSH
// begin enable ;
7508: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7509: LD_ADDR_VAR 0 3
7513: PUSH
7514: LD_INT 56
7516: PPUSH
7517: CALL_OW 313
7521: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: LD_INT 22
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 33
7539: PUSH
7540: LD_INT 2
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 50
7549: PUSH
7550: EMPTY
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: ST_TO_ADDR
// if filter > 0 then
7566: LD_VAR 0 2
7570: PUSH
7571: LD_INT 0
7573: GREATER
7574: IFFALSE 7642
// begin for v in filter do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_VAR 0 2
7585: PUSH
7586: FOR_IN
7587: IFFALSE 7640
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7589: LD_VAR 0 1
7593: PPUSH
7594: CALL_OW 312
7598: NOT
7599: PUSH
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 302
7609: AND
7610: IFFALSE 7638
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_VAR 0 3
7621: PUSH
7622: LD_INT 1
7624: PPUSH
7625: LD_INT 3
7627: PPUSH
7628: CALL_OW 12
7632: ARRAY
7633: PPUSH
7634: CALL_OW 135
// end ;
7638: GO 7586
7640: POP
7641: POP
// end ; end ;
7642: PPOPN 3
7644: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7645: LD_INT 33
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 34
7660: PUSH
7661: LD_INT 13
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: PUSH
7681: LD_INT 4
7683: PUSH
7684: LD_INT 5
7686: PUSH
7687: LD_INT 7
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PUSH
7695: LD_EXP 1
7699: ARRAY
7700: EQUAL
7701: PUSH
7702: LD_INT 26
7704: PPUSH
7705: CALL_OW 461
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: AND
7714: IFFALSE 7925
7716: GO 7718
7718: DISABLE
7719: LD_INT 0
7721: PPUSH
7722: PPUSH
7723: PPUSH
// begin enable ;
7724: ENABLE
// if Sikorski_Ar then
7725: LD_EXP 12
7729: IFFALSE 7806
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7731: LD_ADDR_EXP 11
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: LD_INT 22
7741: PUSH
7742: LD_INT 4
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 22
7751: PUSH
7752: LD_INT 1
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: LD_INT 33
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 13
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: ST_TO_ADDR
7804: GO 7847
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7806: LD_ADDR_EXP 11
7810: PUSH
7811: LD_INT 33
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 34
7826: PUSH
7827: LD_INT 13
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 69
7846: ST_TO_ADDR
// repeat begin for un in SForce do
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_EXP 11
7856: PUSH
7857: FOR_IN
7858: IFFALSE 7913
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7860: LD_ADDR_VAR 0 3
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: LD_VAR 0 2
7894: PPUSH
7895: CALL_OW 74
7899: PPUSH
7900: CALL_OW 115
// Wait ( 0 0$01 ) ;
7904: LD_INT 35
7906: PPUSH
7907: CALL_OW 67
// end ;
7911: GO 7857
7913: POP
7914: POP
// end until SForce = 0 ;
7915: LD_EXP 11
7919: PUSH
7920: LD_INT 0
7922: EQUAL
7923: IFFALSE 7847
// end ;
7925: PPOPN 3
7927: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7928: LD_INT 0
7930: PPUSH
7931: PPUSH
7932: PPUSH
7933: PPUSH
7934: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 14
7942: PPUSH
7943: EMPTY
7944: PPUSH
7945: CALL_OW 70
7949: ST_TO_ADDR
// if tmp then
7950: LD_VAR 0 6
7954: IFFALSE 7988
// for i in tmp do
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_VAR 0 6
7965: PUSH
7966: FOR_IN
7967: IFFALSE 7986
// ComMoveXY ( i , 42 , 23 ) ;
7969: LD_VAR 0 3
7973: PPUSH
7974: LD_INT 42
7976: PPUSH
7977: LD_INT 23
7979: PPUSH
7980: CALL_OW 111
7984: GO 7966
7986: POP
7987: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
7988: LD_INT 14
7990: PPUSH
7991: LD_INT 1
7993: PPUSH
7994: CALL_OW 286
// uc_side := 4 ;
7998: LD_ADDR_OWVAR 20
8002: PUSH
8003: LD_INT 4
8005: ST_TO_ADDR
// uc_nation := 1 ;
8006: LD_ADDR_OWVAR 21
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8014: LD_ADDR_OWVAR 37
8018: PUSH
8019: LD_INT 4
8021: ST_TO_ADDR
// vc_control := control_manual ;
8022: LD_ADDR_OWVAR 38
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// vc_engine := engine_combustion ;
8030: LD_ADDR_OWVAR 39
8034: PUSH
8035: LD_INT 1
8037: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8038: LD_ADDR_OWVAR 40
8042: PUSH
8043: LD_INT 4
8045: PUSH
8046: LD_INT 5
8048: PUSH
8049: LD_INT 7
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_EXP 1
8061: ARRAY
8062: ST_TO_ADDR
// veh := CreateVehicle ;
8063: LD_ADDR_VAR 0 5
8067: PUSH
8068: CALL_OW 45
8072: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8073: LD_VAR 0 5
8077: PPUSH
8078: LD_INT 2
8080: PPUSH
8081: LD_INT 0
8083: PPUSH
8084: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8088: LD_EXP 9
8092: PPUSH
8093: LD_VAR 0 5
8097: PPUSH
8098: CALL_OW 52
// SetMark ( veh , 1 ) ;
8102: LD_VAR 0 5
8106: PPUSH
8107: LD_INT 1
8109: PPUSH
8110: CALL_OW 242
// while ( num > 0 ) do
8114: LD_VAR 0 1
8118: PUSH
8119: LD_INT 0
8121: GREATER
8122: IFFALSE 8289
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8124: LD_INT 3
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 3
8132: PUSH
8133: LD_INT 4
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: LD_EXP 1
8146: PPUSH
8147: LD_INT 4
8149: PPUSH
8150: CALL_OW 12
8154: ARRAY
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 4
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: LD_INT 5
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_EXP 1
8184: PUSH
8185: LD_INT 1
8187: PLUS
8188: PPUSH
8189: CALL_OW 12
8193: ARRAY
8194: PPUSH
8195: LD_INT 11
8197: PPUSH
8198: LD_INT 2
8200: PPUSH
8201: LD_INT 5
8203: PUSH
8204: LD_INT 6
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: LD_EXP 1
8219: ARRAY
8220: PPUSH
8221: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8225: LD_ADDR_VAR 0 4
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8245: LD_VAR 0 4
8249: PUSH
8250: LD_VAR 0 4
8254: ARRAY
8255: PPUSH
8256: LD_INT 36
8258: PPUSH
8259: LD_INT 18
8261: PPUSH
8262: CALL_OW 111
// Wait ( 0 0$02 ) ;
8266: LD_INT 70
8268: PPUSH
8269: CALL_OW 67
// num := num - 1 ;
8273: LD_ADDR_VAR 0 1
8277: PUSH
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: MINUS
8286: ST_TO_ADDR
// end ;
8287: GO 8114
// end ;
8289: LD_VAR 0 2
8293: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8294: LD_EXP 17
8298: PUSH
8299: LD_INT 0
8301: GREATER
8302: IFFALSE 8571
8304: GO 8306
8306: DISABLE
8307: LD_INT 0
8309: PPUSH
// begin enable ;
8310: ENABLE
// for i = 1 to patrol do
8311: LD_ADDR_VAR 0 1
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_EXP 17
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8569
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8329: LD_EXP 17
8333: PUSH
8334: LD_VAR 0 1
8338: ARRAY
8339: PUSH
8340: LD_EXP 17
8344: PUSH
8345: LD_VAR 0 1
8349: ARRAY
8350: PPUSH
8351: CALL_OW 300
8355: AND
8356: PUSH
8357: LD_EXP 17
8361: PUSH
8362: LD_VAR 0 1
8366: ARRAY
8367: PPUSH
8368: CALL_OW 314
8372: NOT
8373: AND
8374: IFFALSE 8524
// case i of 1 :
8376: LD_VAR 0 1
8380: PUSH
8381: LD_INT 1
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8452
8389: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8390: LD_EXP 17
8394: PUSH
8395: LD_VAR 0 1
8399: ARRAY
8400: PPUSH
8401: LD_INT 53
8403: PPUSH
8404: LD_INT 91
8406: PPUSH
8407: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8411: LD_EXP 17
8415: PUSH
8416: LD_VAR 0 1
8420: ARRAY
8421: PPUSH
8422: LD_INT 245
8424: PPUSH
8425: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8429: LD_EXP 17
8433: PUSH
8434: LD_VAR 0 1
8438: ARRAY
8439: PPUSH
8440: LD_INT 24
8442: PPUSH
8443: LD_INT 26
8445: PPUSH
8446: CALL_OW 171
// end ; 2 :
8450: GO 8524
8452: LD_INT 2
8454: DOUBLE
8455: EQUAL
8456: IFTRUE 8460
8458: GO 8523
8460: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8461: LD_EXP 17
8465: PUSH
8466: LD_VAR 0 1
8470: ARRAY
8471: PPUSH
8472: LD_INT 83
8474: PPUSH
8475: LD_INT 57
8477: PPUSH
8478: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8482: LD_EXP 17
8486: PUSH
8487: LD_VAR 0 1
8491: ARRAY
8492: PPUSH
8493: LD_INT 245
8495: PPUSH
8496: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8500: LD_EXP 17
8504: PUSH
8505: LD_VAR 0 1
8509: ARRAY
8510: PPUSH
8511: LD_INT 47
8513: PPUSH
8514: LD_INT 53
8516: PPUSH
8517: CALL_OW 171
// end ; end ;
8521: GO 8524
8523: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8524: LD_EXP 17
8528: PUSH
8529: LD_VAR 0 1
8533: ARRAY
8534: PPUSH
8535: CALL_OW 256
8539: PUSH
8540: LD_INT 1000
8542: LESS
8543: IFFALSE 8567
// patrol := patrol diff patrol [ i ] ;
8545: LD_ADDR_EXP 17
8549: PUSH
8550: LD_EXP 17
8554: PUSH
8555: LD_EXP 17
8559: PUSH
8560: LD_VAR 0 1
8564: ARRAY
8565: DIFF
8566: ST_TO_ADDR
// end ;
8567: GO 8326
8569: POP
8570: POP
// end ;
8571: PPOPN 1
8573: END
// every 0 0$10 do
8574: GO 8576
8576: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8577: LD_INT 42000
8579: PUSH
8580: LD_INT 37800
8582: PUSH
8583: LD_INT 33600
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: LD_EXP 1
8595: ARRAY
8596: PPUSH
8597: CALL_OW 67
// if not contact_am then
8601: LD_EXP 16
8605: NOT
8606: IFFALSE 8616
// contact_am := true ;
8608: LD_ADDR_EXP 16
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// end ; end_of_file
8616: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8617: LD_INT 0
8619: PPUSH
// comp_tested := false ;
8620: LD_ADDR_EXP 22
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sikorski_run := false ;
8628: LD_ADDR_EXP 23
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// InGameOn ;
8636: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8640: LD_INT 5
8642: PPUSH
8643: LD_INT 4
8645: PPUSH
8646: CALL_OW 86
// wait ( 0 0$2 ) ;
8650: LD_INT 70
8652: PPUSH
8653: CALL_OW 67
// CenterOnUnits ( commander ) ;
8657: LD_EXP 3
8661: PPUSH
8662: CALL_OW 85
// wait ( 0 0$01 ) ;
8666: LD_INT 35
8668: PPUSH
8669: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8673: LD_EXP 2
8677: PPUSH
8678: LD_STRING Dpop1
8680: PPUSH
8681: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8685: LD_EXP 3
8689: PPUSH
8690: LD_STRING Dcomm1
8692: PPUSH
8693: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8697: LD_EXP 2
8701: PPUSH
8702: LD_STRING Dpop2
8704: PPUSH
8705: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8709: LD_EXP 3
8713: PPUSH
8714: LD_STRING Dcomm2
8716: PPUSH
8717: CALL_OW 88
// InGameOff ;
8721: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8725: LD_STRING T1
8727: PPUSH
8728: CALL_OW 337
// end ;
8732: LD_VAR 0 1
8736: RET
// every 0 0$01 trigger timer > 2 2$01 do
8737: LD_EXP 24
8741: PUSH
8742: LD_INT 4235
8744: GREATER
8745: IFFALSE 8762
8747: GO 8749
8749: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8750: LD_EXP 5
8754: PPUSH
8755: LD_STRING DKap1
8757: PPUSH
8758: CALL_OW 94
// end ;
8762: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8763: LD_EXP 24
8767: PUSH
8768: LD_INT 46200
8770: PUSH
8771: LD_INT 52500
8773: PUSH
8774: LD_INT 63000
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: LD_EXP 1
8786: ARRAY
8787: GREATER
8788: IFFALSE 9155
8790: GO 8792
8792: DISABLE
8793: LD_INT 0
8795: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8796: LD_EXP 5
8800: PPUSH
8801: LD_STRING DKap2
8803: PPUSH
8804: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8808: LD_INT 10
8810: PPUSH
8811: CALL_OW 67
// Say ( commander , Dcommk ) ;
8815: LD_EXP 3
8819: PPUSH
8820: LD_STRING Dcommk
8822: PPUSH
8823: CALL_OW 88
// Wait ( 0 0$44 ) ;
8827: LD_INT 1540
8829: PPUSH
8830: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8834: LD_EXP 5
8838: PPUSH
8839: LD_INT 3
8841: PPUSH
8842: LD_INT 0
8844: PPUSH
8845: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8849: LD_EXP 5
8853: PPUSH
8854: CALL_OW 87
// Wait ( 0 0$10 ) ;
8858: LD_INT 350
8860: PPUSH
8861: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8865: LD_INT 6
8867: PUSH
8868: LD_INT 7
8870: PUSH
8871: LD_INT 8
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: LD_EXP 1
8883: ARRAY
8884: PPUSH
8885: CALL 7928 0 1
// Wait ( 2 2$00 ) ;
8889: LD_INT 4200
8891: PPUSH
8892: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8896: LD_INT 33
8898: PUSH
8899: LD_INT 2
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: LD_INT 34
8911: PUSH
8912: LD_INT 13
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 69
8931: PUSH
8932: LD_INT 3
8934: LESS
8935: IFFALSE 8946
// Wait ( 0 0$01 ) ;
8937: LD_INT 35
8939: PPUSH
8940: CALL_OW 67
8944: GO 8896
// uc_side := 4 ;
8946: LD_ADDR_OWVAR 20
8950: PUSH
8951: LD_INT 4
8953: ST_TO_ADDR
// uc_nation := 1 ;
8954: LD_ADDR_OWVAR 21
8958: PUSH
8959: LD_INT 1
8961: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8962: LD_ADDR_VAR 0 1
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_INT 4
8974: PUSH
8975: LD_INT 5
8977: PUSH
8978: LD_INT 6
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: LD_EXP 1
8990: ARRAY
8991: PUSH
8992: FOR_TO
8993: IFFALSE 9035
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
8995: LD_INT 1
8997: PPUSH
8998: LD_INT 5
9000: PUSH
9001: LD_INT 6
9003: PUSH
9004: LD_INT 7
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: PUSH
9012: LD_EXP 1
9016: ARRAY
9017: PPUSH
9018: CALL 734 0 2
9022: PPUSH
9023: LD_INT 4
9025: PPUSH
9026: LD_INT 0
9028: PPUSH
9029: CALL_OW 49
9033: GO 8992
9035: POP
9036: POP
// sikorski_ar := true ;
9037: LD_ADDR_EXP 12
9041: PUSH
9042: LD_INT 1
9044: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9045: LD_EXP 9
9049: PPUSH
9050: LD_STRING DSik1
9052: PPUSH
9053: CALL_OW 94
// Wait ( 0 0$30 ) ;
9057: LD_INT 1050
9059: PPUSH
9060: CALL_OW 67
// uc_side := 4 ;
9064: LD_ADDR_OWVAR 20
9068: PUSH
9069: LD_INT 4
9071: ST_TO_ADDR
// uc_nation := 1 ;
9072: LD_ADDR_OWVAR 21
9076: PUSH
9077: LD_INT 1
9079: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_INT 3
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: LD_INT 4
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_EXP 1
9108: ARRAY
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9153
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9113: LD_INT 1
9115: PPUSH
9116: LD_INT 5
9118: PUSH
9119: LD_INT 6
9121: PUSH
9122: LD_INT 7
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: PUSH
9130: LD_EXP 1
9134: ARRAY
9135: PPUSH
9136: CALL 734 0 2
9140: PPUSH
9141: LD_INT 13
9143: PPUSH
9144: LD_INT 0
9146: PPUSH
9147: CALL_OW 49
9151: GO 9110
9153: POP
9154: POP
// end ;
9155: PPOPN 1
9157: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9158: LD_EXP 9
9162: PPUSH
9163: CALL_OW 256
9167: PUSH
9168: LD_INT 650
9170: LESS
9171: IFFALSE 9253
9173: GO 9175
9175: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9176: LD_EXP 9
9180: PPUSH
9181: LD_STRING DSik2
9183: PPUSH
9184: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9188: LD_EXP 9
9192: PPUSH
9193: CALL_OW 300
9197: IFFALSE 9253
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9199: LD_EXP 9
9203: PPUSH
9204: LD_INT 2
9206: PPUSH
9207: CALL_OW 113
// Wait ( 0 0$01 ) ;
9211: LD_INT 35
9213: PPUSH
9214: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9218: LD_EXP 9
9222: PPUSH
9223: LD_INT 2
9225: PPUSH
9226: CALL_OW 308
9230: IFFALSE 9251
// begin RemoveUnit ( sikorski ) ;
9232: LD_EXP 9
9236: PPUSH
9237: CALL_OW 64
// break ;
9241: GO 9253
// sikorski_run := true ;
9243: LD_ADDR_EXP 23
9247: PUSH
9248: LD_INT 1
9250: ST_TO_ADDR
// end ; end ;
9251: GO 9188
// end ;
9253: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9254: LD_EXP 9
9258: PPUSH
9259: CALL_OW 256
9263: PUSH
9264: LD_INT 1000
9266: LESS
9267: IFFALSE 9284
9269: GO 9271
9271: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9272: LD_EXP 9
9276: PPUSH
9277: LD_STRING DSkik3
9279: PPUSH
9280: CALL_OW 88
9284: END
// every 1 1$45 + 0 0$15 do
9285: GO 9287
9287: DISABLE
// begin enable ;
9288: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9289: LD_INT 1
9291: PPUSH
9292: LD_INT 5
9294: PPUSH
9295: CALL_OW 12
9299: PPUSH
9300: LD_INT 8
9302: PPUSH
9303: LD_INT 1
9305: PPUSH
9306: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9310: LD_INT 350
9312: PPUSH
9313: LD_INT 1295
9315: PPUSH
9316: CALL_OW 12
9320: PPUSH
9321: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9325: LD_INT 1
9327: PPUSH
9328: LD_INT 5
9330: PPUSH
9331: CALL_OW 12
9335: PPUSH
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9343: LD_INT 350
9345: PPUSH
9346: LD_INT 1050
9348: PPUSH
9349: CALL_OW 12
9353: PPUSH
9354: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9358: LD_EXP 24
9362: PUSH
9363: LD_INT 25200
9365: PUSH
9366: LD_INT 23100
9368: PUSH
9369: LD_INT 21000
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PUSH
9377: LD_EXP 1
9381: ARRAY
9382: LESSEQUAL
9383: IFFALSE 9406
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9385: LD_INT 1
9387: PPUSH
9388: LD_INT 5
9390: PPUSH
9391: CALL_OW 12
9395: PPUSH
9396: LD_INT 8
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 55
// end ;
9406: END
// export timer ; every 1 do
9407: GO 9409
9409: DISABLE
// timer := 0 0$00 ;
9410: LD_ADDR_EXP 24
9414: PUSH
9415: LD_INT 0
9417: ST_TO_ADDR
9418: END
// every 0 0$01 do
9419: GO 9421
9421: DISABLE
// begin enable ;
9422: ENABLE
// Display_Strings := [ #tick , timer ] ;
9423: LD_ADDR_OWVAR 47
9427: PUSH
9428: LD_STRING #tick
9430: PUSH
9431: LD_EXP 24
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9440: LD_ADDR_EXP 24
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: LD_INT 35
9452: PLUS
9453: ST_TO_ADDR
// end ; end_of_file
9454: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
9455: LD_INT 0
9457: PPUSH
// ar_miner := 81 ;
9458: LD_ADDR_EXP 32
9462: PUSH
9463: LD_INT 81
9465: ST_TO_ADDR
// ar_crane := 88 ;
9466: LD_ADDR_EXP 31
9470: PUSH
9471: LD_INT 88
9473: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9474: LD_ADDR_EXP 26
9478: PUSH
9479: LD_INT 89
9481: ST_TO_ADDR
// us_hack := 99 ;
9482: LD_ADDR_EXP 27
9486: PUSH
9487: LD_INT 99
9489: ST_TO_ADDR
// us_artillery := 97 ;
9490: LD_ADDR_EXP 28
9494: PUSH
9495: LD_INT 97
9497: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9498: LD_ADDR_EXP 29
9502: PUSH
9503: LD_INT 91
9505: ST_TO_ADDR
// ar_mortar := 92 ;
9506: LD_ADDR_EXP 30
9510: PUSH
9511: LD_INT 92
9513: ST_TO_ADDR
// ru_radar := 98 ;
9514: LD_ADDR_EXP 25
9518: PUSH
9519: LD_INT 98
9521: ST_TO_ADDR
// tech_Artillery := 80 ;
9522: LD_ADDR_EXP 33
9526: PUSH
9527: LD_INT 80
9529: ST_TO_ADDR
// tech_RadMat := 81 ;
9530: LD_ADDR_EXP 34
9534: PUSH
9535: LD_INT 81
9537: ST_TO_ADDR
// tech_BasicTools := 82 ;
9538: LD_ADDR_EXP 35
9542: PUSH
9543: LD_INT 82
9545: ST_TO_ADDR
// tech_Cargo := 83 ;
9546: LD_ADDR_EXP 36
9550: PUSH
9551: LD_INT 83
9553: ST_TO_ADDR
// tech_Track := 84 ;
9554: LD_ADDR_EXP 37
9558: PUSH
9559: LD_INT 84
9561: ST_TO_ADDR
// tech_Crane := 85 ;
9562: LD_ADDR_EXP 38
9566: PUSH
9567: LD_INT 85
9569: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9570: LD_ADDR_EXP 39
9574: PUSH
9575: LD_INT 86
9577: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9578: LD_ADDR_EXP 40
9582: PUSH
9583: LD_INT 87
9585: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
9586: LD_ADDR_EXP 41
9590: PUSH
9591: LD_INT 88
9593: ST_TO_ADDR
// class_mastodont := 31 ;
9594: LD_ADDR_EXP 42
9598: PUSH
9599: LD_INT 31
9601: ST_TO_ADDR
// class_horse := 21 ;
9602: LD_ADDR_EXP 43
9606: PUSH
9607: LD_INT 21
9609: ST_TO_ADDR
// end ;
9610: LD_VAR 0 1
9614: RET
// every 1 do
9615: GO 9617
9617: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
9618: CALL 9455 0 0
9622: END
// every 0 0$1 do
9623: GO 9625
9625: DISABLE
// begin enable ;
9626: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9627: LD_STRING updateTimer(
9629: PUSH
9630: LD_OWVAR 1
9634: STR
9635: PUSH
9636: LD_STRING );
9638: STR
9639: PPUSH
9640: CALL_OW 559
// end ;
9644: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9645: LD_INT 0
9647: PPUSH
// if p2 = 100 then
9648: LD_VAR 0 2
9652: PUSH
9653: LD_INT 100
9655: EQUAL
9656: IFFALSE 10659
// begin if not StreamModeActive then
9658: LD_EXP 44
9662: NOT
9663: IFFALSE 9673
// StreamModeActive := true ;
9665: LD_ADDR_EXP 44
9669: PUSH
9670: LD_INT 1
9672: ST_TO_ADDR
// if p3 = 0 then
9673: LD_VAR 0 3
9677: PUSH
9678: LD_INT 0
9680: EQUAL
9681: IFFALSE 9687
// InitStreamMode ;
9683: CALL 10819 0 0
// if p3 = 1 then
9687: LD_VAR 0 3
9691: PUSH
9692: LD_INT 1
9694: EQUAL
9695: IFFALSE 9705
// sRocket := true ;
9697: LD_ADDR_EXP 49
9701: PUSH
9702: LD_INT 1
9704: ST_TO_ADDR
// if p3 = 2 then
9705: LD_VAR 0 3
9709: PUSH
9710: LD_INT 2
9712: EQUAL
9713: IFFALSE 9723
// sSpeed := true ;
9715: LD_ADDR_EXP 48
9719: PUSH
9720: LD_INT 1
9722: ST_TO_ADDR
// if p3 = 3 then
9723: LD_VAR 0 3
9727: PUSH
9728: LD_INT 3
9730: EQUAL
9731: IFFALSE 9741
// sEngine := true ;
9733: LD_ADDR_EXP 50
9737: PUSH
9738: LD_INT 1
9740: ST_TO_ADDR
// if p3 = 4 then
9741: LD_VAR 0 3
9745: PUSH
9746: LD_INT 4
9748: EQUAL
9749: IFFALSE 9759
// sSpec := true ;
9751: LD_ADDR_EXP 47
9755: PUSH
9756: LD_INT 1
9758: ST_TO_ADDR
// if p3 = 5 then
9759: LD_VAR 0 3
9763: PUSH
9764: LD_INT 5
9766: EQUAL
9767: IFFALSE 9777
// sLevel := true ;
9769: LD_ADDR_EXP 51
9773: PUSH
9774: LD_INT 1
9776: ST_TO_ADDR
// if p3 = 6 then
9777: LD_VAR 0 3
9781: PUSH
9782: LD_INT 6
9784: EQUAL
9785: IFFALSE 9795
// sArmoury := true ;
9787: LD_ADDR_EXP 52
9791: PUSH
9792: LD_INT 1
9794: ST_TO_ADDR
// if p3 = 7 then
9795: LD_VAR 0 3
9799: PUSH
9800: LD_INT 7
9802: EQUAL
9803: IFFALSE 9813
// sRadar := true ;
9805: LD_ADDR_EXP 53
9809: PUSH
9810: LD_INT 1
9812: ST_TO_ADDR
// if p3 = 8 then
9813: LD_VAR 0 3
9817: PUSH
9818: LD_INT 8
9820: EQUAL
9821: IFFALSE 9831
// sBunker := true ;
9823: LD_ADDR_EXP 54
9827: PUSH
9828: LD_INT 1
9830: ST_TO_ADDR
// if p3 = 9 then
9831: LD_VAR 0 3
9835: PUSH
9836: LD_INT 9
9838: EQUAL
9839: IFFALSE 9849
// sHack := true ;
9841: LD_ADDR_EXP 55
9845: PUSH
9846: LD_INT 1
9848: ST_TO_ADDR
// if p3 = 10 then
9849: LD_VAR 0 3
9853: PUSH
9854: LD_INT 10
9856: EQUAL
9857: IFFALSE 9867
// sFire := true ;
9859: LD_ADDR_EXP 56
9863: PUSH
9864: LD_INT 1
9866: ST_TO_ADDR
// if p3 = 11 then
9867: LD_VAR 0 3
9871: PUSH
9872: LD_INT 11
9874: EQUAL
9875: IFFALSE 9885
// sRefresh := true ;
9877: LD_ADDR_EXP 57
9881: PUSH
9882: LD_INT 1
9884: ST_TO_ADDR
// if p3 = 12 then
9885: LD_VAR 0 3
9889: PUSH
9890: LD_INT 12
9892: EQUAL
9893: IFFALSE 9903
// sExp := true ;
9895: LD_ADDR_EXP 58
9899: PUSH
9900: LD_INT 1
9902: ST_TO_ADDR
// if p3 = 13 then
9903: LD_VAR 0 3
9907: PUSH
9908: LD_INT 13
9910: EQUAL
9911: IFFALSE 9921
// sDepot := true ;
9913: LD_ADDR_EXP 59
9917: PUSH
9918: LD_INT 1
9920: ST_TO_ADDR
// if p3 = 14 then
9921: LD_VAR 0 3
9925: PUSH
9926: LD_INT 14
9928: EQUAL
9929: IFFALSE 9939
// sFlag := true ;
9931: LD_ADDR_EXP 60
9935: PUSH
9936: LD_INT 1
9938: ST_TO_ADDR
// if p3 = 15 then
9939: LD_VAR 0 3
9943: PUSH
9944: LD_INT 15
9946: EQUAL
9947: IFFALSE 9957
// sKamikadze := true ;
9949: LD_ADDR_EXP 68
9953: PUSH
9954: LD_INT 1
9956: ST_TO_ADDR
// if p3 = 16 then
9957: LD_VAR 0 3
9961: PUSH
9962: LD_INT 16
9964: EQUAL
9965: IFFALSE 9975
// sTroll := true ;
9967: LD_ADDR_EXP 69
9971: PUSH
9972: LD_INT 1
9974: ST_TO_ADDR
// if p3 = 17 then
9975: LD_VAR 0 3
9979: PUSH
9980: LD_INT 17
9982: EQUAL
9983: IFFALSE 9993
// sSlow := true ;
9985: LD_ADDR_EXP 70
9989: PUSH
9990: LD_INT 1
9992: ST_TO_ADDR
// if p3 = 18 then
9993: LD_VAR 0 3
9997: PUSH
9998: LD_INT 18
10000: EQUAL
10001: IFFALSE 10011
// sLack := true ;
10003: LD_ADDR_EXP 71
10007: PUSH
10008: LD_INT 1
10010: ST_TO_ADDR
// if p3 = 19 then
10011: LD_VAR 0 3
10015: PUSH
10016: LD_INT 19
10018: EQUAL
10019: IFFALSE 10029
// sTank := true ;
10021: LD_ADDR_EXP 73
10025: PUSH
10026: LD_INT 1
10028: ST_TO_ADDR
// if p3 = 20 then
10029: LD_VAR 0 3
10033: PUSH
10034: LD_INT 20
10036: EQUAL
10037: IFFALSE 10047
// sRemote := true ;
10039: LD_ADDR_EXP 74
10043: PUSH
10044: LD_INT 1
10046: ST_TO_ADDR
// if p3 = 21 then
10047: LD_VAR 0 3
10051: PUSH
10052: LD_INT 21
10054: EQUAL
10055: IFFALSE 10065
// sPowell := true ;
10057: LD_ADDR_EXP 75
10061: PUSH
10062: LD_INT 1
10064: ST_TO_ADDR
// if p3 = 22 then
10065: LD_VAR 0 3
10069: PUSH
10070: LD_INT 22
10072: EQUAL
10073: IFFALSE 10083
// sTeleport := true ;
10075: LD_ADDR_EXP 78
10079: PUSH
10080: LD_INT 1
10082: ST_TO_ADDR
// if p3 = 23 then
10083: LD_VAR 0 3
10087: PUSH
10088: LD_INT 23
10090: EQUAL
10091: IFFALSE 10101
// sOilTower := true ;
10093: LD_ADDR_EXP 80
10097: PUSH
10098: LD_INT 1
10100: ST_TO_ADDR
// if p3 = 24 then
10101: LD_VAR 0 3
10105: PUSH
10106: LD_INT 24
10108: EQUAL
10109: IFFALSE 10119
// sShovel := true ;
10111: LD_ADDR_EXP 81
10115: PUSH
10116: LD_INT 1
10118: ST_TO_ADDR
// if p3 = 25 then
10119: LD_VAR 0 3
10123: PUSH
10124: LD_INT 25
10126: EQUAL
10127: IFFALSE 10137
// sSheik := true ;
10129: LD_ADDR_EXP 82
10133: PUSH
10134: LD_INT 1
10136: ST_TO_ADDR
// if p3 = 26 then
10137: LD_VAR 0 3
10141: PUSH
10142: LD_INT 26
10144: EQUAL
10145: IFFALSE 10155
// sEarthquake := true ;
10147: LD_ADDR_EXP 84
10151: PUSH
10152: LD_INT 1
10154: ST_TO_ADDR
// if p3 = 27 then
10155: LD_VAR 0 3
10159: PUSH
10160: LD_INT 27
10162: EQUAL
10163: IFFALSE 10173
// sAI := true ;
10165: LD_ADDR_EXP 85
10169: PUSH
10170: LD_INT 1
10172: ST_TO_ADDR
// if p3 = 28 then
10173: LD_VAR 0 3
10177: PUSH
10178: LD_INT 28
10180: EQUAL
10181: IFFALSE 10191
// sCargo := true ;
10183: LD_ADDR_EXP 88
10187: PUSH
10188: LD_INT 1
10190: ST_TO_ADDR
// if p3 = 29 then
10191: LD_VAR 0 3
10195: PUSH
10196: LD_INT 29
10198: EQUAL
10199: IFFALSE 10209
// sDLaser := true ;
10201: LD_ADDR_EXP 89
10205: PUSH
10206: LD_INT 1
10208: ST_TO_ADDR
// if p3 = 30 then
10209: LD_VAR 0 3
10213: PUSH
10214: LD_INT 30
10216: EQUAL
10217: IFFALSE 10227
// sExchange := true ;
10219: LD_ADDR_EXP 90
10223: PUSH
10224: LD_INT 1
10226: ST_TO_ADDR
// if p3 = 31 then
10227: LD_VAR 0 3
10231: PUSH
10232: LD_INT 31
10234: EQUAL
10235: IFFALSE 10245
// sFac := true ;
10237: LD_ADDR_EXP 91
10241: PUSH
10242: LD_INT 1
10244: ST_TO_ADDR
// if p3 = 32 then
10245: LD_VAR 0 3
10249: PUSH
10250: LD_INT 32
10252: EQUAL
10253: IFFALSE 10263
// sPower := true ;
10255: LD_ADDR_EXP 92
10259: PUSH
10260: LD_INT 1
10262: ST_TO_ADDR
// if p3 = 33 then
10263: LD_VAR 0 3
10267: PUSH
10268: LD_INT 33
10270: EQUAL
10271: IFFALSE 10281
// sRandom := true ;
10273: LD_ADDR_EXP 93
10277: PUSH
10278: LD_INT 1
10280: ST_TO_ADDR
// if p3 = 34 then
10281: LD_VAR 0 3
10285: PUSH
10286: LD_INT 34
10288: EQUAL
10289: IFFALSE 10299
// sShield := true ;
10291: LD_ADDR_EXP 94
10295: PUSH
10296: LD_INT 1
10298: ST_TO_ADDR
// if p3 = 35 then
10299: LD_VAR 0 3
10303: PUSH
10304: LD_INT 35
10306: EQUAL
10307: IFFALSE 10317
// sTime := true ;
10309: LD_ADDR_EXP 95
10313: PUSH
10314: LD_INT 1
10316: ST_TO_ADDR
// if p3 = 36 then
10317: LD_VAR 0 3
10321: PUSH
10322: LD_INT 36
10324: EQUAL
10325: IFFALSE 10335
// sTools := true ;
10327: LD_ADDR_EXP 96
10331: PUSH
10332: LD_INT 1
10334: ST_TO_ADDR
// if p3 = 101 then
10335: LD_VAR 0 3
10339: PUSH
10340: LD_INT 101
10342: EQUAL
10343: IFFALSE 10353
// sSold := true ;
10345: LD_ADDR_EXP 61
10349: PUSH
10350: LD_INT 1
10352: ST_TO_ADDR
// if p3 = 102 then
10353: LD_VAR 0 3
10357: PUSH
10358: LD_INT 102
10360: EQUAL
10361: IFFALSE 10371
// sDiff := true ;
10363: LD_ADDR_EXP 62
10367: PUSH
10368: LD_INT 1
10370: ST_TO_ADDR
// if p3 = 103 then
10371: LD_VAR 0 3
10375: PUSH
10376: LD_INT 103
10378: EQUAL
10379: IFFALSE 10389
// sFog := true ;
10381: LD_ADDR_EXP 65
10385: PUSH
10386: LD_INT 1
10388: ST_TO_ADDR
// if p3 = 104 then
10389: LD_VAR 0 3
10393: PUSH
10394: LD_INT 104
10396: EQUAL
10397: IFFALSE 10407
// sReset := true ;
10399: LD_ADDR_EXP 66
10403: PUSH
10404: LD_INT 1
10406: ST_TO_ADDR
// if p3 = 105 then
10407: LD_VAR 0 3
10411: PUSH
10412: LD_INT 105
10414: EQUAL
10415: IFFALSE 10425
// sSun := true ;
10417: LD_ADDR_EXP 67
10421: PUSH
10422: LD_INT 1
10424: ST_TO_ADDR
// if p3 = 106 then
10425: LD_VAR 0 3
10429: PUSH
10430: LD_INT 106
10432: EQUAL
10433: IFFALSE 10443
// sTiger := true ;
10435: LD_ADDR_EXP 63
10439: PUSH
10440: LD_INT 1
10442: ST_TO_ADDR
// if p3 = 107 then
10443: LD_VAR 0 3
10447: PUSH
10448: LD_INT 107
10450: EQUAL
10451: IFFALSE 10461
// sBomb := true ;
10453: LD_ADDR_EXP 64
10457: PUSH
10458: LD_INT 1
10460: ST_TO_ADDR
// if p3 = 108 then
10461: LD_VAR 0 3
10465: PUSH
10466: LD_INT 108
10468: EQUAL
10469: IFFALSE 10479
// sWound := true ;
10471: LD_ADDR_EXP 72
10475: PUSH
10476: LD_INT 1
10478: ST_TO_ADDR
// if p3 = 109 then
10479: LD_VAR 0 3
10483: PUSH
10484: LD_INT 109
10486: EQUAL
10487: IFFALSE 10497
// sBetray := true ;
10489: LD_ADDR_EXP 76
10493: PUSH
10494: LD_INT 1
10496: ST_TO_ADDR
// if p3 = 110 then
10497: LD_VAR 0 3
10501: PUSH
10502: LD_INT 110
10504: EQUAL
10505: IFFALSE 10515
// sContamin := true ;
10507: LD_ADDR_EXP 77
10511: PUSH
10512: LD_INT 1
10514: ST_TO_ADDR
// if p3 = 111 then
10515: LD_VAR 0 3
10519: PUSH
10520: LD_INT 111
10522: EQUAL
10523: IFFALSE 10533
// sOil := true ;
10525: LD_ADDR_EXP 79
10529: PUSH
10530: LD_INT 1
10532: ST_TO_ADDR
// if p3 = 112 then
10533: LD_VAR 0 3
10537: PUSH
10538: LD_INT 112
10540: EQUAL
10541: IFFALSE 10551
// sStu := true ;
10543: LD_ADDR_EXP 83
10547: PUSH
10548: LD_INT 1
10550: ST_TO_ADDR
// if p3 = 113 then
10551: LD_VAR 0 3
10555: PUSH
10556: LD_INT 113
10558: EQUAL
10559: IFFALSE 10569
// sBazooka := true ;
10561: LD_ADDR_EXP 86
10565: PUSH
10566: LD_INT 1
10568: ST_TO_ADDR
// if p3 = 114 then
10569: LD_VAR 0 3
10573: PUSH
10574: LD_INT 114
10576: EQUAL
10577: IFFALSE 10587
// sMortar := true ;
10579: LD_ADDR_EXP 87
10583: PUSH
10584: LD_INT 1
10586: ST_TO_ADDR
// if p3 = 115 then
10587: LD_VAR 0 3
10591: PUSH
10592: LD_INT 115
10594: EQUAL
10595: IFFALSE 10605
// sRanger := true ;
10597: LD_ADDR_EXP 97
10601: PUSH
10602: LD_INT 1
10604: ST_TO_ADDR
// if p3 = 116 then
10605: LD_VAR 0 3
10609: PUSH
10610: LD_INT 116
10612: EQUAL
10613: IFFALSE 10623
// sComputer := true ;
10615: LD_ADDR_EXP 98
10619: PUSH
10620: LD_INT 1
10622: ST_TO_ADDR
// if p3 = 117 then
10623: LD_VAR 0 3
10627: PUSH
10628: LD_INT 117
10630: EQUAL
10631: IFFALSE 10641
// s30 := true ;
10633: LD_ADDR_EXP 99
10637: PUSH
10638: LD_INT 1
10640: ST_TO_ADDR
// if p3 = 118 then
10641: LD_VAR 0 3
10645: PUSH
10646: LD_INT 118
10648: EQUAL
10649: IFFALSE 10659
// s60 := true ;
10651: LD_ADDR_EXP 100
10655: PUSH
10656: LD_INT 1
10658: ST_TO_ADDR
// end ; if p2 = 101 then
10659: LD_VAR 0 2
10663: PUSH
10664: LD_INT 101
10666: EQUAL
10667: IFFALSE 10795
// begin case p3 of 1 :
10669: LD_VAR 0 3
10673: PUSH
10674: LD_INT 1
10676: DOUBLE
10677: EQUAL
10678: IFTRUE 10682
10680: GO 10689
10682: POP
// hHackUnlimitedResources ; 2 :
10683: CALL 22391 0 0
10687: GO 10795
10689: LD_INT 2
10691: DOUBLE
10692: EQUAL
10693: IFTRUE 10697
10695: GO 10704
10697: POP
// hHackSetLevel10 ; 3 :
10698: CALL 22524 0 0
10702: GO 10795
10704: LD_INT 3
10706: DOUBLE
10707: EQUAL
10708: IFTRUE 10712
10710: GO 10719
10712: POP
// hHackSetLevel10YourUnits ; 4 :
10713: CALL 22609 0 0
10717: GO 10795
10719: LD_INT 4
10721: DOUBLE
10722: EQUAL
10723: IFTRUE 10727
10725: GO 10734
10727: POP
// hHackInvincible ; 5 :
10728: CALL 23057 0 0
10732: GO 10795
10734: LD_INT 5
10736: DOUBLE
10737: EQUAL
10738: IFTRUE 10742
10740: GO 10749
10742: POP
// hHackInvisible ; 6 :
10743: CALL 23168 0 0
10747: GO 10795
10749: LD_INT 6
10751: DOUBLE
10752: EQUAL
10753: IFTRUE 10757
10755: GO 10764
10757: POP
// hHackChangeYourSide ; 7 :
10758: CALL 23225 0 0
10762: GO 10795
10764: LD_INT 7
10766: DOUBLE
10767: EQUAL
10768: IFTRUE 10772
10770: GO 10779
10772: POP
// hHackChangeUnitSide ; 8 :
10773: CALL 23267 0 0
10777: GO 10795
10779: LD_INT 8
10781: DOUBLE
10782: EQUAL
10783: IFTRUE 10787
10785: GO 10794
10787: POP
// hHackFog ; end ;
10788: CALL 23368 0 0
10792: GO 10795
10794: POP
// end ; end ;
10795: LD_VAR 0 7
10799: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
10800: GO 10802
10802: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10803: LD_STRING initStreamRollete();
10805: PPUSH
10806: CALL_OW 559
// InitStreamMode ;
10810: CALL 10819 0 0
// DefineStreamItems ( ) ;
10814: CALL 11283 0 0
// end ;
10818: END
// function InitStreamMode ; begin
10819: LD_INT 0
10821: PPUSH
// streamModeActive := false ;
10822: LD_ADDR_EXP 44
10826: PUSH
10827: LD_INT 0
10829: ST_TO_ADDR
// normalCounter := 36 ;
10830: LD_ADDR_EXP 45
10834: PUSH
10835: LD_INT 36
10837: ST_TO_ADDR
// hardcoreCounter := 16 ;
10838: LD_ADDR_EXP 46
10842: PUSH
10843: LD_INT 16
10845: ST_TO_ADDR
// sRocket := false ;
10846: LD_ADDR_EXP 49
10850: PUSH
10851: LD_INT 0
10853: ST_TO_ADDR
// sSpeed := false ;
10854: LD_ADDR_EXP 48
10858: PUSH
10859: LD_INT 0
10861: ST_TO_ADDR
// sEngine := false ;
10862: LD_ADDR_EXP 50
10866: PUSH
10867: LD_INT 0
10869: ST_TO_ADDR
// sSpec := false ;
10870: LD_ADDR_EXP 47
10874: PUSH
10875: LD_INT 0
10877: ST_TO_ADDR
// sLevel := false ;
10878: LD_ADDR_EXP 51
10882: PUSH
10883: LD_INT 0
10885: ST_TO_ADDR
// sArmoury := false ;
10886: LD_ADDR_EXP 52
10890: PUSH
10891: LD_INT 0
10893: ST_TO_ADDR
// sRadar := false ;
10894: LD_ADDR_EXP 53
10898: PUSH
10899: LD_INT 0
10901: ST_TO_ADDR
// sBunker := false ;
10902: LD_ADDR_EXP 54
10906: PUSH
10907: LD_INT 0
10909: ST_TO_ADDR
// sHack := false ;
10910: LD_ADDR_EXP 55
10914: PUSH
10915: LD_INT 0
10917: ST_TO_ADDR
// sFire := false ;
10918: LD_ADDR_EXP 56
10922: PUSH
10923: LD_INT 0
10925: ST_TO_ADDR
// sRefresh := false ;
10926: LD_ADDR_EXP 57
10930: PUSH
10931: LD_INT 0
10933: ST_TO_ADDR
// sExp := false ;
10934: LD_ADDR_EXP 58
10938: PUSH
10939: LD_INT 0
10941: ST_TO_ADDR
// sDepot := false ;
10942: LD_ADDR_EXP 59
10946: PUSH
10947: LD_INT 0
10949: ST_TO_ADDR
// sFlag := false ;
10950: LD_ADDR_EXP 60
10954: PUSH
10955: LD_INT 0
10957: ST_TO_ADDR
// sKamikadze := false ;
10958: LD_ADDR_EXP 68
10962: PUSH
10963: LD_INT 0
10965: ST_TO_ADDR
// sTroll := false ;
10966: LD_ADDR_EXP 69
10970: PUSH
10971: LD_INT 0
10973: ST_TO_ADDR
// sSlow := false ;
10974: LD_ADDR_EXP 70
10978: PUSH
10979: LD_INT 0
10981: ST_TO_ADDR
// sLack := false ;
10982: LD_ADDR_EXP 71
10986: PUSH
10987: LD_INT 0
10989: ST_TO_ADDR
// sTank := false ;
10990: LD_ADDR_EXP 73
10994: PUSH
10995: LD_INT 0
10997: ST_TO_ADDR
// sRemote := false ;
10998: LD_ADDR_EXP 74
11002: PUSH
11003: LD_INT 0
11005: ST_TO_ADDR
// sPowell := false ;
11006: LD_ADDR_EXP 75
11010: PUSH
11011: LD_INT 0
11013: ST_TO_ADDR
// sTeleport := false ;
11014: LD_ADDR_EXP 78
11018: PUSH
11019: LD_INT 0
11021: ST_TO_ADDR
// sOilTower := false ;
11022: LD_ADDR_EXP 80
11026: PUSH
11027: LD_INT 0
11029: ST_TO_ADDR
// sShovel := false ;
11030: LD_ADDR_EXP 81
11034: PUSH
11035: LD_INT 0
11037: ST_TO_ADDR
// sSheik := false ;
11038: LD_ADDR_EXP 82
11042: PUSH
11043: LD_INT 0
11045: ST_TO_ADDR
// sEarthquake := false ;
11046: LD_ADDR_EXP 84
11050: PUSH
11051: LD_INT 0
11053: ST_TO_ADDR
// sAI := false ;
11054: LD_ADDR_EXP 85
11058: PUSH
11059: LD_INT 0
11061: ST_TO_ADDR
// sCargo := false ;
11062: LD_ADDR_EXP 88
11066: PUSH
11067: LD_INT 0
11069: ST_TO_ADDR
// sDLaser := false ;
11070: LD_ADDR_EXP 89
11074: PUSH
11075: LD_INT 0
11077: ST_TO_ADDR
// sExchange := false ;
11078: LD_ADDR_EXP 90
11082: PUSH
11083: LD_INT 0
11085: ST_TO_ADDR
// sFac := false ;
11086: LD_ADDR_EXP 91
11090: PUSH
11091: LD_INT 0
11093: ST_TO_ADDR
// sPower := false ;
11094: LD_ADDR_EXP 92
11098: PUSH
11099: LD_INT 0
11101: ST_TO_ADDR
// sRandom := false ;
11102: LD_ADDR_EXP 93
11106: PUSH
11107: LD_INT 0
11109: ST_TO_ADDR
// sShield := false ;
11110: LD_ADDR_EXP 94
11114: PUSH
11115: LD_INT 0
11117: ST_TO_ADDR
// sTime := false ;
11118: LD_ADDR_EXP 95
11122: PUSH
11123: LD_INT 0
11125: ST_TO_ADDR
// sTools := false ;
11126: LD_ADDR_EXP 96
11130: PUSH
11131: LD_INT 0
11133: ST_TO_ADDR
// sSold := false ;
11134: LD_ADDR_EXP 61
11138: PUSH
11139: LD_INT 0
11141: ST_TO_ADDR
// sDiff := false ;
11142: LD_ADDR_EXP 62
11146: PUSH
11147: LD_INT 0
11149: ST_TO_ADDR
// sFog := false ;
11150: LD_ADDR_EXP 65
11154: PUSH
11155: LD_INT 0
11157: ST_TO_ADDR
// sReset := false ;
11158: LD_ADDR_EXP 66
11162: PUSH
11163: LD_INT 0
11165: ST_TO_ADDR
// sSun := false ;
11166: LD_ADDR_EXP 67
11170: PUSH
11171: LD_INT 0
11173: ST_TO_ADDR
// sTiger := false ;
11174: LD_ADDR_EXP 63
11178: PUSH
11179: LD_INT 0
11181: ST_TO_ADDR
// sBomb := false ;
11182: LD_ADDR_EXP 64
11186: PUSH
11187: LD_INT 0
11189: ST_TO_ADDR
// sWound := false ;
11190: LD_ADDR_EXP 72
11194: PUSH
11195: LD_INT 0
11197: ST_TO_ADDR
// sBetray := false ;
11198: LD_ADDR_EXP 76
11202: PUSH
11203: LD_INT 0
11205: ST_TO_ADDR
// sContamin := false ;
11206: LD_ADDR_EXP 77
11210: PUSH
11211: LD_INT 0
11213: ST_TO_ADDR
// sOil := false ;
11214: LD_ADDR_EXP 79
11218: PUSH
11219: LD_INT 0
11221: ST_TO_ADDR
// sStu := false ;
11222: LD_ADDR_EXP 83
11226: PUSH
11227: LD_INT 0
11229: ST_TO_ADDR
// sBazooka := false ;
11230: LD_ADDR_EXP 86
11234: PUSH
11235: LD_INT 0
11237: ST_TO_ADDR
// sMortar := false ;
11238: LD_ADDR_EXP 87
11242: PUSH
11243: LD_INT 0
11245: ST_TO_ADDR
// sRanger := false ;
11246: LD_ADDR_EXP 97
11250: PUSH
11251: LD_INT 0
11253: ST_TO_ADDR
// sComputer := false ;
11254: LD_ADDR_EXP 98
11258: PUSH
11259: LD_INT 0
11261: ST_TO_ADDR
// s30 := false ;
11262: LD_ADDR_EXP 99
11266: PUSH
11267: LD_INT 0
11269: ST_TO_ADDR
// s60 := false ;
11270: LD_ADDR_EXP 100
11274: PUSH
11275: LD_INT 0
11277: ST_TO_ADDR
// end ;
11278: LD_VAR 0 1
11282: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11283: LD_INT 0
11285: PPUSH
11286: PPUSH
11287: PPUSH
11288: PPUSH
11289: PPUSH
// result := [ ] ;
11290: LD_ADDR_VAR 0 1
11294: PUSH
11295: EMPTY
11296: ST_TO_ADDR
// if campaign_id = 1 then
11297: LD_OWVAR 69
11301: PUSH
11302: LD_INT 1
11304: EQUAL
11305: IFFALSE 14471
// begin case mission_number of 1 :
11307: LD_OWVAR 70
11311: PUSH
11312: LD_INT 1
11314: DOUBLE
11315: EQUAL
11316: IFTRUE 11320
11318: GO 11396
11320: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11321: LD_ADDR_VAR 0 1
11325: PUSH
11326: LD_INT 2
11328: PUSH
11329: LD_INT 4
11331: PUSH
11332: LD_INT 11
11334: PUSH
11335: LD_INT 12
11337: PUSH
11338: LD_INT 15
11340: PUSH
11341: LD_INT 16
11343: PUSH
11344: LD_INT 22
11346: PUSH
11347: LD_INT 23
11349: PUSH
11350: LD_INT 26
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: PUSH
11364: LD_INT 101
11366: PUSH
11367: LD_INT 102
11369: PUSH
11370: LD_INT 106
11372: PUSH
11373: LD_INT 116
11375: PUSH
11376: LD_INT 117
11378: PUSH
11379: LD_INT 118
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: ST_TO_ADDR
11394: GO 14469
11396: LD_INT 2
11398: DOUBLE
11399: EQUAL
11400: IFTRUE 11404
11402: GO 11488
11404: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11405: LD_ADDR_VAR 0 1
11409: PUSH
11410: LD_INT 2
11412: PUSH
11413: LD_INT 4
11415: PUSH
11416: LD_INT 11
11418: PUSH
11419: LD_INT 12
11421: PUSH
11422: LD_INT 15
11424: PUSH
11425: LD_INT 16
11427: PUSH
11428: LD_INT 22
11430: PUSH
11431: LD_INT 23
11433: PUSH
11434: LD_INT 26
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 101
11450: PUSH
11451: LD_INT 102
11453: PUSH
11454: LD_INT 105
11456: PUSH
11457: LD_INT 106
11459: PUSH
11460: LD_INT 108
11462: PUSH
11463: LD_INT 116
11465: PUSH
11466: LD_INT 117
11468: PUSH
11469: LD_INT 118
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: ST_TO_ADDR
11486: GO 14469
11488: LD_INT 3
11490: DOUBLE
11491: EQUAL
11492: IFTRUE 11496
11494: GO 11584
11496: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11497: LD_ADDR_VAR 0 1
11501: PUSH
11502: LD_INT 2
11504: PUSH
11505: LD_INT 4
11507: PUSH
11508: LD_INT 5
11510: PUSH
11511: LD_INT 11
11513: PUSH
11514: LD_INT 12
11516: PUSH
11517: LD_INT 15
11519: PUSH
11520: LD_INT 16
11522: PUSH
11523: LD_INT 22
11525: PUSH
11526: LD_INT 26
11528: PUSH
11529: LD_INT 36
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 101
11546: PUSH
11547: LD_INT 102
11549: PUSH
11550: LD_INT 105
11552: PUSH
11553: LD_INT 106
11555: PUSH
11556: LD_INT 108
11558: PUSH
11559: LD_INT 116
11561: PUSH
11562: LD_INT 117
11564: PUSH
11565: LD_INT 118
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: ST_TO_ADDR
11582: GO 14469
11584: LD_INT 4
11586: DOUBLE
11587: EQUAL
11588: IFTRUE 11592
11590: GO 11688
11592: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11593: LD_ADDR_VAR 0 1
11597: PUSH
11598: LD_INT 2
11600: PUSH
11601: LD_INT 4
11603: PUSH
11604: LD_INT 5
11606: PUSH
11607: LD_INT 8
11609: PUSH
11610: LD_INT 11
11612: PUSH
11613: LD_INT 12
11615: PUSH
11616: LD_INT 15
11618: PUSH
11619: LD_INT 16
11621: PUSH
11622: LD_INT 22
11624: PUSH
11625: LD_INT 23
11627: PUSH
11628: LD_INT 26
11630: PUSH
11631: LD_INT 36
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 101
11650: PUSH
11651: LD_INT 102
11653: PUSH
11654: LD_INT 105
11656: PUSH
11657: LD_INT 106
11659: PUSH
11660: LD_INT 108
11662: PUSH
11663: LD_INT 116
11665: PUSH
11666: LD_INT 117
11668: PUSH
11669: LD_INT 118
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: ST_TO_ADDR
11686: GO 14469
11688: LD_INT 5
11690: DOUBLE
11691: EQUAL
11692: IFTRUE 11696
11694: GO 11808
11696: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11697: LD_ADDR_VAR 0 1
11701: PUSH
11702: LD_INT 2
11704: PUSH
11705: LD_INT 4
11707: PUSH
11708: LD_INT 5
11710: PUSH
11711: LD_INT 6
11713: PUSH
11714: LD_INT 8
11716: PUSH
11717: LD_INT 11
11719: PUSH
11720: LD_INT 12
11722: PUSH
11723: LD_INT 15
11725: PUSH
11726: LD_INT 16
11728: PUSH
11729: LD_INT 22
11731: PUSH
11732: LD_INT 23
11734: PUSH
11735: LD_INT 25
11737: PUSH
11738: LD_INT 26
11740: PUSH
11741: LD_INT 36
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: PUSH
11760: LD_INT 101
11762: PUSH
11763: LD_INT 102
11765: PUSH
11766: LD_INT 105
11768: PUSH
11769: LD_INT 106
11771: PUSH
11772: LD_INT 108
11774: PUSH
11775: LD_INT 109
11777: PUSH
11778: LD_INT 112
11780: PUSH
11781: LD_INT 116
11783: PUSH
11784: LD_INT 117
11786: PUSH
11787: LD_INT 118
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: ST_TO_ADDR
11806: GO 14469
11808: LD_INT 6
11810: DOUBLE
11811: EQUAL
11812: IFTRUE 11816
11814: GO 11948
11816: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11817: LD_ADDR_VAR 0 1
11821: PUSH
11822: LD_INT 2
11824: PUSH
11825: LD_INT 4
11827: PUSH
11828: LD_INT 5
11830: PUSH
11831: LD_INT 6
11833: PUSH
11834: LD_INT 8
11836: PUSH
11837: LD_INT 11
11839: PUSH
11840: LD_INT 12
11842: PUSH
11843: LD_INT 15
11845: PUSH
11846: LD_INT 16
11848: PUSH
11849: LD_INT 20
11851: PUSH
11852: LD_INT 21
11854: PUSH
11855: LD_INT 22
11857: PUSH
11858: LD_INT 23
11860: PUSH
11861: LD_INT 25
11863: PUSH
11864: LD_INT 26
11866: PUSH
11867: LD_INT 30
11869: PUSH
11870: LD_INT 31
11872: PUSH
11873: LD_INT 32
11875: PUSH
11876: LD_INT 36
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 101
11902: PUSH
11903: LD_INT 102
11905: PUSH
11906: LD_INT 105
11908: PUSH
11909: LD_INT 106
11911: PUSH
11912: LD_INT 108
11914: PUSH
11915: LD_INT 109
11917: PUSH
11918: LD_INT 112
11920: PUSH
11921: LD_INT 116
11923: PUSH
11924: LD_INT 117
11926: PUSH
11927: LD_INT 118
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: ST_TO_ADDR
11946: GO 14469
11948: LD_INT 7
11950: DOUBLE
11951: EQUAL
11952: IFTRUE 11956
11954: GO 12068
11956: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11957: LD_ADDR_VAR 0 1
11961: PUSH
11962: LD_INT 2
11964: PUSH
11965: LD_INT 4
11967: PUSH
11968: LD_INT 5
11970: PUSH
11971: LD_INT 7
11973: PUSH
11974: LD_INT 11
11976: PUSH
11977: LD_INT 12
11979: PUSH
11980: LD_INT 15
11982: PUSH
11983: LD_INT 16
11985: PUSH
11986: LD_INT 20
11988: PUSH
11989: LD_INT 21
11991: PUSH
11992: LD_INT 22
11994: PUSH
11995: LD_INT 23
11997: PUSH
11998: LD_INT 25
12000: PUSH
12001: LD_INT 26
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 101
12022: PUSH
12023: LD_INT 102
12025: PUSH
12026: LD_INT 103
12028: PUSH
12029: LD_INT 105
12031: PUSH
12032: LD_INT 106
12034: PUSH
12035: LD_INT 108
12037: PUSH
12038: LD_INT 112
12040: PUSH
12041: LD_INT 116
12043: PUSH
12044: LD_INT 117
12046: PUSH
12047: LD_INT 118
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: ST_TO_ADDR
12066: GO 14469
12068: LD_INT 8
12070: DOUBLE
12071: EQUAL
12072: IFTRUE 12076
12074: GO 12216
12076: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12077: LD_ADDR_VAR 0 1
12081: PUSH
12082: LD_INT 2
12084: PUSH
12085: LD_INT 4
12087: PUSH
12088: LD_INT 5
12090: PUSH
12091: LD_INT 6
12093: PUSH
12094: LD_INT 7
12096: PUSH
12097: LD_INT 8
12099: PUSH
12100: LD_INT 11
12102: PUSH
12103: LD_INT 12
12105: PUSH
12106: LD_INT 15
12108: PUSH
12109: LD_INT 16
12111: PUSH
12112: LD_INT 20
12114: PUSH
12115: LD_INT 21
12117: PUSH
12118: LD_INT 22
12120: PUSH
12121: LD_INT 23
12123: PUSH
12124: LD_INT 25
12126: PUSH
12127: LD_INT 26
12129: PUSH
12130: LD_INT 30
12132: PUSH
12133: LD_INT 31
12135: PUSH
12136: LD_INT 32
12138: PUSH
12139: LD_INT 36
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: PUSH
12164: LD_INT 101
12166: PUSH
12167: LD_INT 102
12169: PUSH
12170: LD_INT 103
12172: PUSH
12173: LD_INT 105
12175: PUSH
12176: LD_INT 106
12178: PUSH
12179: LD_INT 108
12181: PUSH
12182: LD_INT 109
12184: PUSH
12185: LD_INT 112
12187: PUSH
12188: LD_INT 116
12190: PUSH
12191: LD_INT 117
12193: PUSH
12194: LD_INT 118
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: ST_TO_ADDR
12214: GO 14469
12216: LD_INT 9
12218: DOUBLE
12219: EQUAL
12220: IFTRUE 12224
12222: GO 12372
12224: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12225: LD_ADDR_VAR 0 1
12229: PUSH
12230: LD_INT 2
12232: PUSH
12233: LD_INT 4
12235: PUSH
12236: LD_INT 5
12238: PUSH
12239: LD_INT 6
12241: PUSH
12242: LD_INT 7
12244: PUSH
12245: LD_INT 8
12247: PUSH
12248: LD_INT 11
12250: PUSH
12251: LD_INT 12
12253: PUSH
12254: LD_INT 15
12256: PUSH
12257: LD_INT 16
12259: PUSH
12260: LD_INT 20
12262: PUSH
12263: LD_INT 21
12265: PUSH
12266: LD_INT 22
12268: PUSH
12269: LD_INT 23
12271: PUSH
12272: LD_INT 25
12274: PUSH
12275: LD_INT 26
12277: PUSH
12278: LD_INT 28
12280: PUSH
12281: LD_INT 30
12283: PUSH
12284: LD_INT 31
12286: PUSH
12287: LD_INT 32
12289: PUSH
12290: LD_INT 36
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: PUSH
12316: LD_INT 101
12318: PUSH
12319: LD_INT 102
12321: PUSH
12322: LD_INT 103
12324: PUSH
12325: LD_INT 105
12327: PUSH
12328: LD_INT 106
12330: PUSH
12331: LD_INT 108
12333: PUSH
12334: LD_INT 109
12336: PUSH
12337: LD_INT 112
12339: PUSH
12340: LD_INT 114
12342: PUSH
12343: LD_INT 116
12345: PUSH
12346: LD_INT 117
12348: PUSH
12349: LD_INT 118
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: ST_TO_ADDR
12370: GO 14469
12372: LD_INT 10
12374: DOUBLE
12375: EQUAL
12376: IFTRUE 12380
12378: GO 12576
12380: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12381: LD_ADDR_VAR 0 1
12385: PUSH
12386: LD_INT 2
12388: PUSH
12389: LD_INT 4
12391: PUSH
12392: LD_INT 5
12394: PUSH
12395: LD_INT 6
12397: PUSH
12398: LD_INT 7
12400: PUSH
12401: LD_INT 8
12403: PUSH
12404: LD_INT 9
12406: PUSH
12407: LD_INT 10
12409: PUSH
12410: LD_INT 11
12412: PUSH
12413: LD_INT 12
12415: PUSH
12416: LD_INT 13
12418: PUSH
12419: LD_INT 14
12421: PUSH
12422: LD_INT 15
12424: PUSH
12425: LD_INT 16
12427: PUSH
12428: LD_INT 17
12430: PUSH
12431: LD_INT 18
12433: PUSH
12434: LD_INT 19
12436: PUSH
12437: LD_INT 20
12439: PUSH
12440: LD_INT 21
12442: PUSH
12443: LD_INT 22
12445: PUSH
12446: LD_INT 23
12448: PUSH
12449: LD_INT 24
12451: PUSH
12452: LD_INT 25
12454: PUSH
12455: LD_INT 26
12457: PUSH
12458: LD_INT 28
12460: PUSH
12461: LD_INT 30
12463: PUSH
12464: LD_INT 31
12466: PUSH
12467: LD_INT 32
12469: PUSH
12470: LD_INT 36
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 101
12506: PUSH
12507: LD_INT 102
12509: PUSH
12510: LD_INT 103
12512: PUSH
12513: LD_INT 104
12515: PUSH
12516: LD_INT 105
12518: PUSH
12519: LD_INT 106
12521: PUSH
12522: LD_INT 107
12524: PUSH
12525: LD_INT 108
12527: PUSH
12528: LD_INT 109
12530: PUSH
12531: LD_INT 110
12533: PUSH
12534: LD_INT 111
12536: PUSH
12537: LD_INT 112
12539: PUSH
12540: LD_INT 114
12542: PUSH
12543: LD_INT 116
12545: PUSH
12546: LD_INT 117
12548: PUSH
12549: LD_INT 118
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: ST_TO_ADDR
12574: GO 14469
12576: LD_INT 11
12578: DOUBLE
12579: EQUAL
12580: IFTRUE 12584
12582: GO 12788
12584: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12585: LD_ADDR_VAR 0 1
12589: PUSH
12590: LD_INT 2
12592: PUSH
12593: LD_INT 3
12595: PUSH
12596: LD_INT 4
12598: PUSH
12599: LD_INT 5
12601: PUSH
12602: LD_INT 6
12604: PUSH
12605: LD_INT 7
12607: PUSH
12608: LD_INT 8
12610: PUSH
12611: LD_INT 9
12613: PUSH
12614: LD_INT 10
12616: PUSH
12617: LD_INT 11
12619: PUSH
12620: LD_INT 12
12622: PUSH
12623: LD_INT 13
12625: PUSH
12626: LD_INT 14
12628: PUSH
12629: LD_INT 15
12631: PUSH
12632: LD_INT 16
12634: PUSH
12635: LD_INT 17
12637: PUSH
12638: LD_INT 18
12640: PUSH
12641: LD_INT 19
12643: PUSH
12644: LD_INT 20
12646: PUSH
12647: LD_INT 21
12649: PUSH
12650: LD_INT 22
12652: PUSH
12653: LD_INT 23
12655: PUSH
12656: LD_INT 24
12658: PUSH
12659: LD_INT 25
12661: PUSH
12662: LD_INT 26
12664: PUSH
12665: LD_INT 28
12667: PUSH
12668: LD_INT 30
12670: PUSH
12671: LD_INT 31
12673: PUSH
12674: LD_INT 32
12676: PUSH
12677: LD_INT 34
12679: PUSH
12680: LD_INT 36
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: PUSH
12716: LD_INT 101
12718: PUSH
12719: LD_INT 102
12721: PUSH
12722: LD_INT 103
12724: PUSH
12725: LD_INT 104
12727: PUSH
12728: LD_INT 105
12730: PUSH
12731: LD_INT 106
12733: PUSH
12734: LD_INT 107
12736: PUSH
12737: LD_INT 108
12739: PUSH
12740: LD_INT 109
12742: PUSH
12743: LD_INT 110
12745: PUSH
12746: LD_INT 111
12748: PUSH
12749: LD_INT 112
12751: PUSH
12752: LD_INT 114
12754: PUSH
12755: LD_INT 116
12757: PUSH
12758: LD_INT 117
12760: PUSH
12761: LD_INT 118
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: ST_TO_ADDR
12786: GO 14469
12788: LD_INT 12
12790: DOUBLE
12791: EQUAL
12792: IFTRUE 12796
12794: GO 13016
12796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12797: LD_ADDR_VAR 0 1
12801: PUSH
12802: LD_INT 1
12804: PUSH
12805: LD_INT 2
12807: PUSH
12808: LD_INT 3
12810: PUSH
12811: LD_INT 4
12813: PUSH
12814: LD_INT 5
12816: PUSH
12817: LD_INT 6
12819: PUSH
12820: LD_INT 7
12822: PUSH
12823: LD_INT 8
12825: PUSH
12826: LD_INT 9
12828: PUSH
12829: LD_INT 10
12831: PUSH
12832: LD_INT 11
12834: PUSH
12835: LD_INT 12
12837: PUSH
12838: LD_INT 13
12840: PUSH
12841: LD_INT 14
12843: PUSH
12844: LD_INT 15
12846: PUSH
12847: LD_INT 16
12849: PUSH
12850: LD_INT 17
12852: PUSH
12853: LD_INT 18
12855: PUSH
12856: LD_INT 19
12858: PUSH
12859: LD_INT 20
12861: PUSH
12862: LD_INT 21
12864: PUSH
12865: LD_INT 22
12867: PUSH
12868: LD_INT 23
12870: PUSH
12871: LD_INT 24
12873: PUSH
12874: LD_INT 25
12876: PUSH
12877: LD_INT 26
12879: PUSH
12880: LD_INT 27
12882: PUSH
12883: LD_INT 28
12885: PUSH
12886: LD_INT 30
12888: PUSH
12889: LD_INT 31
12891: PUSH
12892: LD_INT 32
12894: PUSH
12895: LD_INT 33
12897: PUSH
12898: LD_INT 34
12900: PUSH
12901: LD_INT 36
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: PUSH
12940: LD_INT 101
12942: PUSH
12943: LD_INT 102
12945: PUSH
12946: LD_INT 103
12948: PUSH
12949: LD_INT 104
12951: PUSH
12952: LD_INT 105
12954: PUSH
12955: LD_INT 106
12957: PUSH
12958: LD_INT 107
12960: PUSH
12961: LD_INT 108
12963: PUSH
12964: LD_INT 109
12966: PUSH
12967: LD_INT 110
12969: PUSH
12970: LD_INT 111
12972: PUSH
12973: LD_INT 112
12975: PUSH
12976: LD_INT 113
12978: PUSH
12979: LD_INT 114
12981: PUSH
12982: LD_INT 116
12984: PUSH
12985: LD_INT 117
12987: PUSH
12988: LD_INT 118
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: ST_TO_ADDR
13014: GO 14469
13016: LD_INT 13
13018: DOUBLE
13019: EQUAL
13020: IFTRUE 13024
13022: GO 13232
13024: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13025: LD_ADDR_VAR 0 1
13029: PUSH
13030: LD_INT 1
13032: PUSH
13033: LD_INT 2
13035: PUSH
13036: LD_INT 3
13038: PUSH
13039: LD_INT 4
13041: PUSH
13042: LD_INT 5
13044: PUSH
13045: LD_INT 8
13047: PUSH
13048: LD_INT 9
13050: PUSH
13051: LD_INT 10
13053: PUSH
13054: LD_INT 11
13056: PUSH
13057: LD_INT 12
13059: PUSH
13060: LD_INT 14
13062: PUSH
13063: LD_INT 15
13065: PUSH
13066: LD_INT 16
13068: PUSH
13069: LD_INT 17
13071: PUSH
13072: LD_INT 18
13074: PUSH
13075: LD_INT 19
13077: PUSH
13078: LD_INT 20
13080: PUSH
13081: LD_INT 21
13083: PUSH
13084: LD_INT 22
13086: PUSH
13087: LD_INT 23
13089: PUSH
13090: LD_INT 24
13092: PUSH
13093: LD_INT 25
13095: PUSH
13096: LD_INT 26
13098: PUSH
13099: LD_INT 27
13101: PUSH
13102: LD_INT 28
13104: PUSH
13105: LD_INT 30
13107: PUSH
13108: LD_INT 31
13110: PUSH
13111: LD_INT 32
13113: PUSH
13114: LD_INT 33
13116: PUSH
13117: LD_INT 34
13119: PUSH
13120: LD_INT 36
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 101
13158: PUSH
13159: LD_INT 102
13161: PUSH
13162: LD_INT 103
13164: PUSH
13165: LD_INT 104
13167: PUSH
13168: LD_INT 105
13170: PUSH
13171: LD_INT 106
13173: PUSH
13174: LD_INT 107
13176: PUSH
13177: LD_INT 108
13179: PUSH
13180: LD_INT 109
13182: PUSH
13183: LD_INT 110
13185: PUSH
13186: LD_INT 111
13188: PUSH
13189: LD_INT 112
13191: PUSH
13192: LD_INT 113
13194: PUSH
13195: LD_INT 114
13197: PUSH
13198: LD_INT 116
13200: PUSH
13201: LD_INT 117
13203: PUSH
13204: LD_INT 118
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: ST_TO_ADDR
13230: GO 14469
13232: LD_INT 14
13234: DOUBLE
13235: EQUAL
13236: IFTRUE 13240
13238: GO 13464
13240: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13241: LD_ADDR_VAR 0 1
13245: PUSH
13246: LD_INT 1
13248: PUSH
13249: LD_INT 2
13251: PUSH
13252: LD_INT 3
13254: PUSH
13255: LD_INT 4
13257: PUSH
13258: LD_INT 5
13260: PUSH
13261: LD_INT 6
13263: PUSH
13264: LD_INT 7
13266: PUSH
13267: LD_INT 8
13269: PUSH
13270: LD_INT 9
13272: PUSH
13273: LD_INT 10
13275: PUSH
13276: LD_INT 11
13278: PUSH
13279: LD_INT 12
13281: PUSH
13282: LD_INT 13
13284: PUSH
13285: LD_INT 14
13287: PUSH
13288: LD_INT 15
13290: PUSH
13291: LD_INT 16
13293: PUSH
13294: LD_INT 17
13296: PUSH
13297: LD_INT 18
13299: PUSH
13300: LD_INT 19
13302: PUSH
13303: LD_INT 20
13305: PUSH
13306: LD_INT 21
13308: PUSH
13309: LD_INT 22
13311: PUSH
13312: LD_INT 23
13314: PUSH
13315: LD_INT 24
13317: PUSH
13318: LD_INT 25
13320: PUSH
13321: LD_INT 26
13323: PUSH
13324: LD_INT 27
13326: PUSH
13327: LD_INT 28
13329: PUSH
13330: LD_INT 29
13332: PUSH
13333: LD_INT 30
13335: PUSH
13336: LD_INT 31
13338: PUSH
13339: LD_INT 32
13341: PUSH
13342: LD_INT 33
13344: PUSH
13345: LD_INT 34
13347: PUSH
13348: LD_INT 36
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 101
13390: PUSH
13391: LD_INT 102
13393: PUSH
13394: LD_INT 103
13396: PUSH
13397: LD_INT 104
13399: PUSH
13400: LD_INT 105
13402: PUSH
13403: LD_INT 106
13405: PUSH
13406: LD_INT 107
13408: PUSH
13409: LD_INT 108
13411: PUSH
13412: LD_INT 109
13414: PUSH
13415: LD_INT 110
13417: PUSH
13418: LD_INT 111
13420: PUSH
13421: LD_INT 112
13423: PUSH
13424: LD_INT 113
13426: PUSH
13427: LD_INT 114
13429: PUSH
13430: LD_INT 116
13432: PUSH
13433: LD_INT 117
13435: PUSH
13436: LD_INT 118
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: ST_TO_ADDR
13462: GO 14469
13464: LD_INT 15
13466: DOUBLE
13467: EQUAL
13468: IFTRUE 13472
13470: GO 13696
13472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13473: LD_ADDR_VAR 0 1
13477: PUSH
13478: LD_INT 1
13480: PUSH
13481: LD_INT 2
13483: PUSH
13484: LD_INT 3
13486: PUSH
13487: LD_INT 4
13489: PUSH
13490: LD_INT 5
13492: PUSH
13493: LD_INT 6
13495: PUSH
13496: LD_INT 7
13498: PUSH
13499: LD_INT 8
13501: PUSH
13502: LD_INT 9
13504: PUSH
13505: LD_INT 10
13507: PUSH
13508: LD_INT 11
13510: PUSH
13511: LD_INT 12
13513: PUSH
13514: LD_INT 13
13516: PUSH
13517: LD_INT 14
13519: PUSH
13520: LD_INT 15
13522: PUSH
13523: LD_INT 16
13525: PUSH
13526: LD_INT 17
13528: PUSH
13529: LD_INT 18
13531: PUSH
13532: LD_INT 19
13534: PUSH
13535: LD_INT 20
13537: PUSH
13538: LD_INT 21
13540: PUSH
13541: LD_INT 22
13543: PUSH
13544: LD_INT 23
13546: PUSH
13547: LD_INT 24
13549: PUSH
13550: LD_INT 25
13552: PUSH
13553: LD_INT 26
13555: PUSH
13556: LD_INT 27
13558: PUSH
13559: LD_INT 28
13561: PUSH
13562: LD_INT 29
13564: PUSH
13565: LD_INT 30
13567: PUSH
13568: LD_INT 31
13570: PUSH
13571: LD_INT 32
13573: PUSH
13574: LD_INT 33
13576: PUSH
13577: LD_INT 34
13579: PUSH
13580: LD_INT 36
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 101
13622: PUSH
13623: LD_INT 102
13625: PUSH
13626: LD_INT 103
13628: PUSH
13629: LD_INT 104
13631: PUSH
13632: LD_INT 105
13634: PUSH
13635: LD_INT 106
13637: PUSH
13638: LD_INT 107
13640: PUSH
13641: LD_INT 108
13643: PUSH
13644: LD_INT 109
13646: PUSH
13647: LD_INT 110
13649: PUSH
13650: LD_INT 111
13652: PUSH
13653: LD_INT 112
13655: PUSH
13656: LD_INT 113
13658: PUSH
13659: LD_INT 114
13661: PUSH
13662: LD_INT 116
13664: PUSH
13665: LD_INT 117
13667: PUSH
13668: LD_INT 118
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: ST_TO_ADDR
13694: GO 14469
13696: LD_INT 16
13698: DOUBLE
13699: EQUAL
13700: IFTRUE 13704
13702: GO 13840
13704: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13705: LD_ADDR_VAR 0 1
13709: PUSH
13710: LD_INT 2
13712: PUSH
13713: LD_INT 4
13715: PUSH
13716: LD_INT 5
13718: PUSH
13719: LD_INT 7
13721: PUSH
13722: LD_INT 11
13724: PUSH
13725: LD_INT 12
13727: PUSH
13728: LD_INT 15
13730: PUSH
13731: LD_INT 16
13733: PUSH
13734: LD_INT 20
13736: PUSH
13737: LD_INT 21
13739: PUSH
13740: LD_INT 22
13742: PUSH
13743: LD_INT 23
13745: PUSH
13746: LD_INT 25
13748: PUSH
13749: LD_INT 26
13751: PUSH
13752: LD_INT 30
13754: PUSH
13755: LD_INT 31
13757: PUSH
13758: LD_INT 32
13760: PUSH
13761: LD_INT 33
13763: PUSH
13764: LD_INT 34
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 101
13790: PUSH
13791: LD_INT 102
13793: PUSH
13794: LD_INT 103
13796: PUSH
13797: LD_INT 106
13799: PUSH
13800: LD_INT 108
13802: PUSH
13803: LD_INT 112
13805: PUSH
13806: LD_INT 113
13808: PUSH
13809: LD_INT 114
13811: PUSH
13812: LD_INT 116
13814: PUSH
13815: LD_INT 117
13817: PUSH
13818: LD_INT 118
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: ST_TO_ADDR
13838: GO 14469
13840: LD_INT 17
13842: DOUBLE
13843: EQUAL
13844: IFTRUE 13848
13846: GO 14072
13848: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13849: LD_ADDR_VAR 0 1
13853: PUSH
13854: LD_INT 1
13856: PUSH
13857: LD_INT 2
13859: PUSH
13860: LD_INT 3
13862: PUSH
13863: LD_INT 4
13865: PUSH
13866: LD_INT 5
13868: PUSH
13869: LD_INT 6
13871: PUSH
13872: LD_INT 7
13874: PUSH
13875: LD_INT 8
13877: PUSH
13878: LD_INT 9
13880: PUSH
13881: LD_INT 10
13883: PUSH
13884: LD_INT 11
13886: PUSH
13887: LD_INT 12
13889: PUSH
13890: LD_INT 13
13892: PUSH
13893: LD_INT 14
13895: PUSH
13896: LD_INT 15
13898: PUSH
13899: LD_INT 16
13901: PUSH
13902: LD_INT 17
13904: PUSH
13905: LD_INT 18
13907: PUSH
13908: LD_INT 19
13910: PUSH
13911: LD_INT 20
13913: PUSH
13914: LD_INT 21
13916: PUSH
13917: LD_INT 22
13919: PUSH
13920: LD_INT 23
13922: PUSH
13923: LD_INT 24
13925: PUSH
13926: LD_INT 25
13928: PUSH
13929: LD_INT 26
13931: PUSH
13932: LD_INT 27
13934: PUSH
13935: LD_INT 28
13937: PUSH
13938: LD_INT 29
13940: PUSH
13941: LD_INT 30
13943: PUSH
13944: LD_INT 31
13946: PUSH
13947: LD_INT 32
13949: PUSH
13950: LD_INT 33
13952: PUSH
13953: LD_INT 34
13955: PUSH
13956: LD_INT 36
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 101
13998: PUSH
13999: LD_INT 102
14001: PUSH
14002: LD_INT 103
14004: PUSH
14005: LD_INT 104
14007: PUSH
14008: LD_INT 105
14010: PUSH
14011: LD_INT 106
14013: PUSH
14014: LD_INT 107
14016: PUSH
14017: LD_INT 108
14019: PUSH
14020: LD_INT 109
14022: PUSH
14023: LD_INT 110
14025: PUSH
14026: LD_INT 111
14028: PUSH
14029: LD_INT 112
14031: PUSH
14032: LD_INT 113
14034: PUSH
14035: LD_INT 114
14037: PUSH
14038: LD_INT 116
14040: PUSH
14041: LD_INT 117
14043: PUSH
14044: LD_INT 118
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: ST_TO_ADDR
14070: GO 14469
14072: LD_INT 18
14074: DOUBLE
14075: EQUAL
14076: IFTRUE 14080
14078: GO 14228
14080: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14081: LD_ADDR_VAR 0 1
14085: PUSH
14086: LD_INT 2
14088: PUSH
14089: LD_INT 4
14091: PUSH
14092: LD_INT 5
14094: PUSH
14095: LD_INT 7
14097: PUSH
14098: LD_INT 11
14100: PUSH
14101: LD_INT 12
14103: PUSH
14104: LD_INT 15
14106: PUSH
14107: LD_INT 16
14109: PUSH
14110: LD_INT 20
14112: PUSH
14113: LD_INT 21
14115: PUSH
14116: LD_INT 22
14118: PUSH
14119: LD_INT 23
14121: PUSH
14122: LD_INT 25
14124: PUSH
14125: LD_INT 26
14127: PUSH
14128: LD_INT 30
14130: PUSH
14131: LD_INT 31
14133: PUSH
14134: LD_INT 32
14136: PUSH
14137: LD_INT 33
14139: PUSH
14140: LD_INT 34
14142: PUSH
14143: LD_INT 35
14145: PUSH
14146: LD_INT 36
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 101
14174: PUSH
14175: LD_INT 102
14177: PUSH
14178: LD_INT 103
14180: PUSH
14181: LD_INT 106
14183: PUSH
14184: LD_INT 108
14186: PUSH
14187: LD_INT 112
14189: PUSH
14190: LD_INT 113
14192: PUSH
14193: LD_INT 114
14195: PUSH
14196: LD_INT 115
14198: PUSH
14199: LD_INT 116
14201: PUSH
14202: LD_INT 117
14204: PUSH
14205: LD_INT 118
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: ST_TO_ADDR
14226: GO 14469
14228: LD_INT 19
14230: DOUBLE
14231: EQUAL
14232: IFTRUE 14236
14234: GO 14468
14236: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14237: LD_ADDR_VAR 0 1
14241: PUSH
14242: LD_INT 1
14244: PUSH
14245: LD_INT 2
14247: PUSH
14248: LD_INT 3
14250: PUSH
14251: LD_INT 4
14253: PUSH
14254: LD_INT 5
14256: PUSH
14257: LD_INT 6
14259: PUSH
14260: LD_INT 7
14262: PUSH
14263: LD_INT 8
14265: PUSH
14266: LD_INT 9
14268: PUSH
14269: LD_INT 10
14271: PUSH
14272: LD_INT 11
14274: PUSH
14275: LD_INT 12
14277: PUSH
14278: LD_INT 13
14280: PUSH
14281: LD_INT 14
14283: PUSH
14284: LD_INT 15
14286: PUSH
14287: LD_INT 16
14289: PUSH
14290: LD_INT 17
14292: PUSH
14293: LD_INT 18
14295: PUSH
14296: LD_INT 19
14298: PUSH
14299: LD_INT 20
14301: PUSH
14302: LD_INT 21
14304: PUSH
14305: LD_INT 22
14307: PUSH
14308: LD_INT 23
14310: PUSH
14311: LD_INT 24
14313: PUSH
14314: LD_INT 25
14316: PUSH
14317: LD_INT 26
14319: PUSH
14320: LD_INT 27
14322: PUSH
14323: LD_INT 28
14325: PUSH
14326: LD_INT 29
14328: PUSH
14329: LD_INT 30
14331: PUSH
14332: LD_INT 31
14334: PUSH
14335: LD_INT 32
14337: PUSH
14338: LD_INT 33
14340: PUSH
14341: LD_INT 34
14343: PUSH
14344: LD_INT 35
14346: PUSH
14347: LD_INT 36
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: PUSH
14388: LD_INT 101
14390: PUSH
14391: LD_INT 102
14393: PUSH
14394: LD_INT 103
14396: PUSH
14397: LD_INT 104
14399: PUSH
14400: LD_INT 105
14402: PUSH
14403: LD_INT 106
14405: PUSH
14406: LD_INT 107
14408: PUSH
14409: LD_INT 108
14411: PUSH
14412: LD_INT 109
14414: PUSH
14415: LD_INT 110
14417: PUSH
14418: LD_INT 111
14420: PUSH
14421: LD_INT 112
14423: PUSH
14424: LD_INT 113
14426: PUSH
14427: LD_INT 114
14429: PUSH
14430: LD_INT 115
14432: PUSH
14433: LD_INT 116
14435: PUSH
14436: LD_INT 117
14438: PUSH
14439: LD_INT 118
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: ST_TO_ADDR
14466: GO 14469
14468: POP
// end else
14469: GO 14700
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14471: LD_ADDR_VAR 0 1
14475: PUSH
14476: LD_INT 1
14478: PUSH
14479: LD_INT 2
14481: PUSH
14482: LD_INT 3
14484: PUSH
14485: LD_INT 4
14487: PUSH
14488: LD_INT 5
14490: PUSH
14491: LD_INT 6
14493: PUSH
14494: LD_INT 7
14496: PUSH
14497: LD_INT 8
14499: PUSH
14500: LD_INT 9
14502: PUSH
14503: LD_INT 10
14505: PUSH
14506: LD_INT 11
14508: PUSH
14509: LD_INT 12
14511: PUSH
14512: LD_INT 13
14514: PUSH
14515: LD_INT 14
14517: PUSH
14518: LD_INT 15
14520: PUSH
14521: LD_INT 16
14523: PUSH
14524: LD_INT 17
14526: PUSH
14527: LD_INT 18
14529: PUSH
14530: LD_INT 19
14532: PUSH
14533: LD_INT 20
14535: PUSH
14536: LD_INT 21
14538: PUSH
14539: LD_INT 22
14541: PUSH
14542: LD_INT 23
14544: PUSH
14545: LD_INT 24
14547: PUSH
14548: LD_INT 25
14550: PUSH
14551: LD_INT 26
14553: PUSH
14554: LD_INT 27
14556: PUSH
14557: LD_INT 28
14559: PUSH
14560: LD_INT 29
14562: PUSH
14563: LD_INT 30
14565: PUSH
14566: LD_INT 31
14568: PUSH
14569: LD_INT 32
14571: PUSH
14572: LD_INT 33
14574: PUSH
14575: LD_INT 34
14577: PUSH
14578: LD_INT 35
14580: PUSH
14581: LD_INT 36
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 101
14624: PUSH
14625: LD_INT 102
14627: PUSH
14628: LD_INT 103
14630: PUSH
14631: LD_INT 104
14633: PUSH
14634: LD_INT 105
14636: PUSH
14637: LD_INT 106
14639: PUSH
14640: LD_INT 107
14642: PUSH
14643: LD_INT 108
14645: PUSH
14646: LD_INT 109
14648: PUSH
14649: LD_INT 110
14651: PUSH
14652: LD_INT 111
14654: PUSH
14655: LD_INT 112
14657: PUSH
14658: LD_INT 113
14660: PUSH
14661: LD_INT 114
14663: PUSH
14664: LD_INT 115
14666: PUSH
14667: LD_INT 116
14669: PUSH
14670: LD_INT 117
14672: PUSH
14673: LD_INT 118
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: ST_TO_ADDR
// if result then
14700: LD_VAR 0 1
14704: IFFALSE 14993
// begin normal :=  ;
14706: LD_ADDR_VAR 0 3
14710: PUSH
14711: LD_STRING 
14713: ST_TO_ADDR
// hardcore :=  ;
14714: LD_ADDR_VAR 0 4
14718: PUSH
14719: LD_STRING 
14721: ST_TO_ADDR
// for i = 1 to normalCounter do
14722: LD_ADDR_VAR 0 5
14726: PUSH
14727: DOUBLE
14728: LD_INT 1
14730: DEC
14731: ST_TO_ADDR
14732: LD_EXP 45
14736: PUSH
14737: FOR_TO
14738: IFFALSE 14839
// begin tmp := 0 ;
14740: LD_ADDR_VAR 0 2
14744: PUSH
14745: LD_STRING 0
14747: ST_TO_ADDR
// if result [ 1 ] then
14748: LD_VAR 0 1
14752: PUSH
14753: LD_INT 1
14755: ARRAY
14756: IFFALSE 14821
// if result [ 1 ] [ 1 ] = i then
14758: LD_VAR 0 1
14762: PUSH
14763: LD_INT 1
14765: ARRAY
14766: PUSH
14767: LD_INT 1
14769: ARRAY
14770: PUSH
14771: LD_VAR 0 5
14775: EQUAL
14776: IFFALSE 14821
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14778: LD_ADDR_VAR 0 1
14782: PUSH
14783: LD_VAR 0 1
14787: PPUSH
14788: LD_INT 1
14790: PPUSH
14791: LD_VAR 0 1
14795: PUSH
14796: LD_INT 1
14798: ARRAY
14799: PPUSH
14800: LD_INT 1
14802: PPUSH
14803: CALL_OW 3
14807: PPUSH
14808: CALL_OW 1
14812: ST_TO_ADDR
// tmp := 1 ;
14813: LD_ADDR_VAR 0 2
14817: PUSH
14818: LD_STRING 1
14820: ST_TO_ADDR
// end ; normal := normal & tmp ;
14821: LD_ADDR_VAR 0 3
14825: PUSH
14826: LD_VAR 0 3
14830: PUSH
14831: LD_VAR 0 2
14835: STR
14836: ST_TO_ADDR
// end ;
14837: GO 14737
14839: POP
14840: POP
// for i = 1 to hardcoreCounter do
14841: LD_ADDR_VAR 0 5
14845: PUSH
14846: DOUBLE
14847: LD_INT 1
14849: DEC
14850: ST_TO_ADDR
14851: LD_EXP 46
14855: PUSH
14856: FOR_TO
14857: IFFALSE 14962
// begin tmp := 0 ;
14859: LD_ADDR_VAR 0 2
14863: PUSH
14864: LD_STRING 0
14866: ST_TO_ADDR
// if result [ 2 ] then
14867: LD_VAR 0 1
14871: PUSH
14872: LD_INT 2
14874: ARRAY
14875: IFFALSE 14944
// if result [ 2 ] [ 1 ] = 100 + i then
14877: LD_VAR 0 1
14881: PUSH
14882: LD_INT 2
14884: ARRAY
14885: PUSH
14886: LD_INT 1
14888: ARRAY
14889: PUSH
14890: LD_INT 100
14892: PUSH
14893: LD_VAR 0 5
14897: PLUS
14898: EQUAL
14899: IFFALSE 14944
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14901: LD_ADDR_VAR 0 1
14905: PUSH
14906: LD_VAR 0 1
14910: PPUSH
14911: LD_INT 2
14913: PPUSH
14914: LD_VAR 0 1
14918: PUSH
14919: LD_INT 2
14921: ARRAY
14922: PPUSH
14923: LD_INT 1
14925: PPUSH
14926: CALL_OW 3
14930: PPUSH
14931: CALL_OW 1
14935: ST_TO_ADDR
// tmp := 1 ;
14936: LD_ADDR_VAR 0 2
14940: PUSH
14941: LD_STRING 1
14943: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14944: LD_ADDR_VAR 0 4
14948: PUSH
14949: LD_VAR 0 4
14953: PUSH
14954: LD_VAR 0 2
14958: STR
14959: ST_TO_ADDR
// end ;
14960: GO 14856
14962: POP
14963: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14964: LD_STRING getStreamItemsFromMission("
14966: PUSH
14967: LD_VAR 0 3
14971: STR
14972: PUSH
14973: LD_STRING ","
14975: STR
14976: PUSH
14977: LD_VAR 0 4
14981: STR
14982: PUSH
14983: LD_STRING ")
14985: STR
14986: PPUSH
14987: CALL_OW 559
// end else
14991: GO 15000
// ToLua ( getStreamItemsFromMission("","") ) ;
14993: LD_STRING getStreamItemsFromMission("","")
14995: PPUSH
14996: CALL_OW 559
// end ;
15000: LD_VAR 0 1
15004: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15005: LD_EXP 44
15009: PUSH
15010: LD_EXP 49
15014: AND
15015: IFFALSE 15139
15017: GO 15019
15019: DISABLE
15020: LD_INT 0
15022: PPUSH
15023: PPUSH
// begin enable ;
15024: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15025: LD_ADDR_VAR 0 2
15029: PUSH
15030: LD_INT 22
15032: PUSH
15033: LD_OWVAR 2
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: LD_INT 2
15044: PUSH
15045: LD_INT 34
15047: PUSH
15048: LD_INT 7
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 34
15057: PUSH
15058: LD_INT 45
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PUSH
15065: LD_INT 34
15067: PUSH
15068: LD_INT 28
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: LD_INT 34
15077: PUSH
15078: LD_INT 47
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PPUSH
15096: CALL_OW 69
15100: ST_TO_ADDR
// if not tmp then
15101: LD_VAR 0 2
15105: NOT
15106: IFFALSE 15110
// exit ;
15108: GO 15139
// for i in tmp do
15110: LD_ADDR_VAR 0 1
15114: PUSH
15115: LD_VAR 0 2
15119: PUSH
15120: FOR_IN
15121: IFFALSE 15137
// begin SetLives ( i , 0 ) ;
15123: LD_VAR 0 1
15127: PPUSH
15128: LD_INT 0
15130: PPUSH
15131: CALL_OW 234
// end ;
15135: GO 15120
15137: POP
15138: POP
// end ;
15139: PPOPN 2
15141: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15142: LD_EXP 44
15146: PUSH
15147: LD_EXP 50
15151: AND
15152: IFFALSE 15236
15154: GO 15156
15156: DISABLE
15157: LD_INT 0
15159: PPUSH
15160: PPUSH
// begin enable ;
15161: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15162: LD_ADDR_VAR 0 2
15166: PUSH
15167: LD_INT 22
15169: PUSH
15170: LD_OWVAR 2
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: LD_INT 32
15181: PUSH
15182: LD_INT 3
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PPUSH
15193: CALL_OW 69
15197: ST_TO_ADDR
// if not tmp then
15198: LD_VAR 0 2
15202: NOT
15203: IFFALSE 15207
// exit ;
15205: GO 15236
// for i in tmp do
15207: LD_ADDR_VAR 0 1
15211: PUSH
15212: LD_VAR 0 2
15216: PUSH
15217: FOR_IN
15218: IFFALSE 15234
// begin SetLives ( i , 0 ) ;
15220: LD_VAR 0 1
15224: PPUSH
15225: LD_INT 0
15227: PPUSH
15228: CALL_OW 234
// end ;
15232: GO 15217
15234: POP
15235: POP
// end ;
15236: PPOPN 2
15238: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15239: LD_EXP 44
15243: PUSH
15244: LD_EXP 47
15248: AND
15249: IFFALSE 15342
15251: GO 15253
15253: DISABLE
15254: LD_INT 0
15256: PPUSH
// begin enable ;
15257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15258: LD_ADDR_VAR 0 1
15262: PUSH
15263: LD_INT 22
15265: PUSH
15266: LD_OWVAR 2
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 2
15277: PUSH
15278: LD_INT 25
15280: PUSH
15281: LD_INT 5
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: LD_INT 25
15290: PUSH
15291: LD_INT 9
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 25
15300: PUSH
15301: LD_INT 8
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PPUSH
15318: CALL_OW 69
15322: PUSH
15323: FOR_IN
15324: IFFALSE 15340
// begin SetClass ( i , 1 ) ;
15326: LD_VAR 0 1
15330: PPUSH
15331: LD_INT 1
15333: PPUSH
15334: CALL_OW 336
// end ;
15338: GO 15323
15340: POP
15341: POP
// end ;
15342: PPOPN 1
15344: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15345: LD_EXP 44
15349: PUSH
15350: LD_EXP 48
15354: AND
15355: PUSH
15356: LD_OWVAR 65
15360: PUSH
15361: LD_INT 7
15363: LESS
15364: AND
15365: IFFALSE 15379
15367: GO 15369
15369: DISABLE
// begin enable ;
15370: ENABLE
// game_speed := 7 ;
15371: LD_ADDR_OWVAR 65
15375: PUSH
15376: LD_INT 7
15378: ST_TO_ADDR
// end ;
15379: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15380: LD_EXP 44
15384: PUSH
15385: LD_EXP 51
15389: AND
15390: IFFALSE 15592
15392: GO 15394
15394: DISABLE
15395: LD_INT 0
15397: PPUSH
15398: PPUSH
15399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15400: LD_ADDR_VAR 0 3
15404: PUSH
15405: LD_INT 81
15407: PUSH
15408: LD_OWVAR 2
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 21
15419: PUSH
15420: LD_INT 1
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PPUSH
15431: CALL_OW 69
15435: ST_TO_ADDR
// if not tmp then
15436: LD_VAR 0 3
15440: NOT
15441: IFFALSE 15445
// exit ;
15443: GO 15592
// if tmp > 5 then
15445: LD_VAR 0 3
15449: PUSH
15450: LD_INT 5
15452: GREATER
15453: IFFALSE 15465
// k := 5 else
15455: LD_ADDR_VAR 0 2
15459: PUSH
15460: LD_INT 5
15462: ST_TO_ADDR
15463: GO 15475
// k := tmp ;
15465: LD_ADDR_VAR 0 2
15469: PUSH
15470: LD_VAR 0 3
15474: ST_TO_ADDR
// for i := 1 to k do
15475: LD_ADDR_VAR 0 1
15479: PUSH
15480: DOUBLE
15481: LD_INT 1
15483: DEC
15484: ST_TO_ADDR
15485: LD_VAR 0 2
15489: PUSH
15490: FOR_TO
15491: IFFALSE 15590
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15493: LD_VAR 0 3
15497: PUSH
15498: LD_VAR 0 1
15502: ARRAY
15503: PPUSH
15504: LD_VAR 0 1
15508: PUSH
15509: LD_INT 4
15511: MOD
15512: PUSH
15513: LD_INT 1
15515: PLUS
15516: PPUSH
15517: CALL_OW 259
15521: PUSH
15522: LD_INT 10
15524: LESS
15525: IFFALSE 15588
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15527: LD_VAR 0 3
15531: PUSH
15532: LD_VAR 0 1
15536: ARRAY
15537: PPUSH
15538: LD_VAR 0 1
15542: PUSH
15543: LD_INT 4
15545: MOD
15546: PUSH
15547: LD_INT 1
15549: PLUS
15550: PPUSH
15551: LD_VAR 0 3
15555: PUSH
15556: LD_VAR 0 1
15560: ARRAY
15561: PPUSH
15562: LD_VAR 0 1
15566: PUSH
15567: LD_INT 4
15569: MOD
15570: PUSH
15571: LD_INT 1
15573: PLUS
15574: PPUSH
15575: CALL_OW 259
15579: PUSH
15580: LD_INT 1
15582: PLUS
15583: PPUSH
15584: CALL_OW 237
15588: GO 15490
15590: POP
15591: POP
// end ;
15592: PPOPN 3
15594: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15595: LD_EXP 44
15599: PUSH
15600: LD_EXP 52
15604: AND
15605: IFFALSE 15625
15607: GO 15609
15609: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15610: LD_INT 4
15612: PPUSH
15613: LD_OWVAR 2
15617: PPUSH
15618: LD_INT 0
15620: PPUSH
15621: CALL_OW 324
15625: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15626: LD_EXP 44
15630: PUSH
15631: LD_EXP 81
15635: AND
15636: IFFALSE 15656
15638: GO 15640
15640: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15641: LD_INT 19
15643: PPUSH
15644: LD_OWVAR 2
15648: PPUSH
15649: LD_INT 0
15651: PPUSH
15652: CALL_OW 324
15656: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15657: LD_EXP 44
15661: PUSH
15662: LD_EXP 53
15666: AND
15667: IFFALSE 15769
15669: GO 15671
15671: DISABLE
15672: LD_INT 0
15674: PPUSH
15675: PPUSH
// begin enable ;
15676: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15677: LD_ADDR_VAR 0 2
15681: PUSH
15682: LD_INT 22
15684: PUSH
15685: LD_OWVAR 2
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 2
15696: PUSH
15697: LD_INT 34
15699: PUSH
15700: LD_INT 11
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 34
15709: PUSH
15710: LD_INT 30
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: LIST
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PPUSH
15726: CALL_OW 69
15730: ST_TO_ADDR
// if not tmp then
15731: LD_VAR 0 2
15735: NOT
15736: IFFALSE 15740
// exit ;
15738: GO 15769
// for i in tmp do
15740: LD_ADDR_VAR 0 1
15744: PUSH
15745: LD_VAR 0 2
15749: PUSH
15750: FOR_IN
15751: IFFALSE 15767
// begin SetLives ( i , 0 ) ;
15753: LD_VAR 0 1
15757: PPUSH
15758: LD_INT 0
15760: PPUSH
15761: CALL_OW 234
// end ;
15765: GO 15750
15767: POP
15768: POP
// end ;
15769: PPOPN 2
15771: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15772: LD_EXP 44
15776: PUSH
15777: LD_EXP 54
15781: AND
15782: IFFALSE 15802
15784: GO 15786
15786: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15787: LD_INT 32
15789: PPUSH
15790: LD_OWVAR 2
15794: PPUSH
15795: LD_INT 0
15797: PPUSH
15798: CALL_OW 324
15802: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15803: LD_EXP 44
15807: PUSH
15808: LD_EXP 55
15812: AND
15813: IFFALSE 15994
15815: GO 15817
15817: DISABLE
15818: LD_INT 0
15820: PPUSH
15821: PPUSH
15822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15823: LD_ADDR_VAR 0 2
15827: PUSH
15828: LD_INT 22
15830: PUSH
15831: LD_OWVAR 2
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 33
15842: PUSH
15843: LD_INT 3
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PPUSH
15854: CALL_OW 69
15858: ST_TO_ADDR
// if not tmp then
15859: LD_VAR 0 2
15863: NOT
15864: IFFALSE 15868
// exit ;
15866: GO 15994
// side := 0 ;
15868: LD_ADDR_VAR 0 3
15872: PUSH
15873: LD_INT 0
15875: ST_TO_ADDR
// for i := 1 to 8 do
15876: LD_ADDR_VAR 0 1
15880: PUSH
15881: DOUBLE
15882: LD_INT 1
15884: DEC
15885: ST_TO_ADDR
15886: LD_INT 8
15888: PUSH
15889: FOR_TO
15890: IFFALSE 15938
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15892: LD_OWVAR 2
15896: PUSH
15897: LD_VAR 0 1
15901: NONEQUAL
15902: PUSH
15903: LD_OWVAR 2
15907: PPUSH
15908: LD_VAR 0 1
15912: PPUSH
15913: CALL_OW 81
15917: PUSH
15918: LD_INT 2
15920: EQUAL
15921: AND
15922: IFFALSE 15936
// begin side := i ;
15924: LD_ADDR_VAR 0 3
15928: PUSH
15929: LD_VAR 0 1
15933: ST_TO_ADDR
// break ;
15934: GO 15938
// end ;
15936: GO 15889
15938: POP
15939: POP
// if not side then
15940: LD_VAR 0 3
15944: NOT
15945: IFFALSE 15949
// exit ;
15947: GO 15994
// for i := 1 to tmp do
15949: LD_ADDR_VAR 0 1
15953: PUSH
15954: DOUBLE
15955: LD_INT 1
15957: DEC
15958: ST_TO_ADDR
15959: LD_VAR 0 2
15963: PUSH
15964: FOR_TO
15965: IFFALSE 15992
// if Prob ( 60 ) then
15967: LD_INT 60
15969: PPUSH
15970: CALL_OW 13
15974: IFFALSE 15990
// SetSide ( i , side ) ;
15976: LD_VAR 0 1
15980: PPUSH
15981: LD_VAR 0 3
15985: PPUSH
15986: CALL_OW 235
15990: GO 15964
15992: POP
15993: POP
// end ;
15994: PPOPN 3
15996: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15997: LD_EXP 44
16001: PUSH
16002: LD_EXP 57
16006: AND
16007: IFFALSE 16126
16009: GO 16011
16011: DISABLE
16012: LD_INT 0
16014: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16015: LD_ADDR_VAR 0 1
16019: PUSH
16020: LD_INT 22
16022: PUSH
16023: LD_OWVAR 2
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 21
16034: PUSH
16035: LD_INT 1
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 3
16044: PUSH
16045: LD_INT 23
16047: PUSH
16048: LD_INT 0
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 69
16068: PUSH
16069: FOR_IN
16070: IFFALSE 16124
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16072: LD_VAR 0 1
16076: PPUSH
16077: CALL_OW 257
16081: PUSH
16082: LD_INT 1
16084: PUSH
16085: LD_INT 2
16087: PUSH
16088: LD_INT 3
16090: PUSH
16091: LD_INT 4
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: IN
16100: IFFALSE 16122
// SetClass ( un , rand ( 1 , 4 ) ) ;
16102: LD_VAR 0 1
16106: PPUSH
16107: LD_INT 1
16109: PPUSH
16110: LD_INT 4
16112: PPUSH
16113: CALL_OW 12
16117: PPUSH
16118: CALL_OW 336
16122: GO 16069
16124: POP
16125: POP
// end ;
16126: PPOPN 1
16128: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16129: LD_EXP 44
16133: PUSH
16134: LD_EXP 56
16138: AND
16139: IFFALSE 16218
16141: GO 16143
16143: DISABLE
16144: LD_INT 0
16146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16147: LD_ADDR_VAR 0 1
16151: PUSH
16152: LD_INT 22
16154: PUSH
16155: LD_OWVAR 2
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 21
16166: PUSH
16167: LD_INT 3
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PPUSH
16178: CALL_OW 69
16182: ST_TO_ADDR
// if not tmp then
16183: LD_VAR 0 1
16187: NOT
16188: IFFALSE 16192
// exit ;
16190: GO 16218
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16192: LD_VAR 0 1
16196: PUSH
16197: LD_INT 1
16199: PPUSH
16200: LD_VAR 0 1
16204: PPUSH
16205: CALL_OW 12
16209: ARRAY
16210: PPUSH
16211: LD_INT 100
16213: PPUSH
16214: CALL_OW 234
// end ;
16218: PPOPN 1
16220: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16221: LD_EXP 44
16225: PUSH
16226: LD_EXP 58
16230: AND
16231: IFFALSE 16329
16233: GO 16235
16235: DISABLE
16236: LD_INT 0
16238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16239: LD_ADDR_VAR 0 1
16243: PUSH
16244: LD_INT 22
16246: PUSH
16247: LD_OWVAR 2
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 21
16258: PUSH
16259: LD_INT 1
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PPUSH
16270: CALL_OW 69
16274: ST_TO_ADDR
// if not tmp then
16275: LD_VAR 0 1
16279: NOT
16280: IFFALSE 16284
// exit ;
16282: GO 16329
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16284: LD_VAR 0 1
16288: PUSH
16289: LD_INT 1
16291: PPUSH
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 12
16301: ARRAY
16302: PPUSH
16303: LD_INT 1
16305: PPUSH
16306: LD_INT 4
16308: PPUSH
16309: CALL_OW 12
16313: PPUSH
16314: LD_INT 3000
16316: PPUSH
16317: LD_INT 9000
16319: PPUSH
16320: CALL_OW 12
16324: PPUSH
16325: CALL_OW 492
// end ;
16329: PPOPN 1
16331: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16332: LD_EXP 44
16336: PUSH
16337: LD_EXP 59
16341: AND
16342: IFFALSE 16362
16344: GO 16346
16346: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16347: LD_INT 1
16349: PPUSH
16350: LD_OWVAR 2
16354: PPUSH
16355: LD_INT 0
16357: PPUSH
16358: CALL_OW 324
16362: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16363: LD_EXP 44
16367: PUSH
16368: LD_EXP 60
16372: AND
16373: IFFALSE 16456
16375: GO 16377
16377: DISABLE
16378: LD_INT 0
16380: PPUSH
16381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16382: LD_ADDR_VAR 0 2
16386: PUSH
16387: LD_INT 22
16389: PUSH
16390: LD_OWVAR 2
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 21
16401: PUSH
16402: LD_INT 3
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PPUSH
16413: CALL_OW 69
16417: ST_TO_ADDR
// if not tmp then
16418: LD_VAR 0 2
16422: NOT
16423: IFFALSE 16427
// exit ;
16425: GO 16456
// for i in tmp do
16427: LD_ADDR_VAR 0 1
16431: PUSH
16432: LD_VAR 0 2
16436: PUSH
16437: FOR_IN
16438: IFFALSE 16454
// SetBLevel ( i , 10 ) ;
16440: LD_VAR 0 1
16444: PPUSH
16445: LD_INT 10
16447: PPUSH
16448: CALL_OW 241
16452: GO 16437
16454: POP
16455: POP
// end ;
16456: PPOPN 2
16458: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16459: LD_EXP 44
16463: PUSH
16464: LD_EXP 61
16468: AND
16469: IFFALSE 16580
16471: GO 16473
16473: DISABLE
16474: LD_INT 0
16476: PPUSH
16477: PPUSH
16478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16479: LD_ADDR_VAR 0 3
16483: PUSH
16484: LD_INT 22
16486: PUSH
16487: LD_OWVAR 2
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 25
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PPUSH
16510: CALL_OW 69
16514: ST_TO_ADDR
// if not tmp then
16515: LD_VAR 0 3
16519: NOT
16520: IFFALSE 16524
// exit ;
16522: GO 16580
// un := tmp [ rand ( 1 , tmp ) ] ;
16524: LD_ADDR_VAR 0 2
16528: PUSH
16529: LD_VAR 0 3
16533: PUSH
16534: LD_INT 1
16536: PPUSH
16537: LD_VAR 0 3
16541: PPUSH
16542: CALL_OW 12
16546: ARRAY
16547: ST_TO_ADDR
// if Crawls ( un ) then
16548: LD_VAR 0 2
16552: PPUSH
16553: CALL_OW 318
16557: IFFALSE 16568
// ComWalk ( un ) ;
16559: LD_VAR 0 2
16563: PPUSH
16564: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16568: LD_VAR 0 2
16572: PPUSH
16573: LD_INT 5
16575: PPUSH
16576: CALL_OW 336
// end ;
16580: PPOPN 3
16582: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16583: LD_EXP 44
16587: PUSH
16588: LD_EXP 62
16592: AND
16593: PUSH
16594: LD_OWVAR 67
16598: PUSH
16599: LD_INT 4
16601: LESS
16602: AND
16603: IFFALSE 16622
16605: GO 16607
16607: DISABLE
// begin Difficulty := Difficulty + 1 ;
16608: LD_ADDR_OWVAR 67
16612: PUSH
16613: LD_OWVAR 67
16617: PUSH
16618: LD_INT 1
16620: PLUS
16621: ST_TO_ADDR
// end ;
16622: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16623: LD_EXP 44
16627: PUSH
16628: LD_EXP 63
16632: AND
16633: IFFALSE 16736
16635: GO 16637
16637: DISABLE
16638: LD_INT 0
16640: PPUSH
// begin for i := 1 to 5 do
16641: LD_ADDR_VAR 0 1
16645: PUSH
16646: DOUBLE
16647: LD_INT 1
16649: DEC
16650: ST_TO_ADDR
16651: LD_INT 5
16653: PUSH
16654: FOR_TO
16655: IFFALSE 16734
// begin uc_nation := nation_nature ;
16657: LD_ADDR_OWVAR 21
16661: PUSH
16662: LD_INT 0
16664: ST_TO_ADDR
// uc_side := 0 ;
16665: LD_ADDR_OWVAR 20
16669: PUSH
16670: LD_INT 0
16672: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16673: LD_ADDR_OWVAR 29
16677: PUSH
16678: LD_INT 12
16680: PUSH
16681: LD_INT 12
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: ST_TO_ADDR
// hc_agressivity := 20 ;
16688: LD_ADDR_OWVAR 35
16692: PUSH
16693: LD_INT 20
16695: ST_TO_ADDR
// hc_class := class_tiger ;
16696: LD_ADDR_OWVAR 28
16700: PUSH
16701: LD_INT 14
16703: ST_TO_ADDR
// hc_gallery :=  ;
16704: LD_ADDR_OWVAR 33
16708: PUSH
16709: LD_STRING 
16711: ST_TO_ADDR
// hc_name :=  ;
16712: LD_ADDR_OWVAR 26
16716: PUSH
16717: LD_STRING 
16719: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16720: CALL_OW 44
16724: PPUSH
16725: LD_INT 0
16727: PPUSH
16728: CALL_OW 51
// end ;
16732: GO 16654
16734: POP
16735: POP
// end ;
16736: PPOPN 1
16738: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16739: LD_EXP 44
16743: PUSH
16744: LD_EXP 64
16748: AND
16749: IFFALSE 16758
16751: GO 16753
16753: DISABLE
// StreamSibBomb ;
16754: CALL 16759 0 0
16758: END
// export function StreamSibBomb ; var i , x , y ; begin
16759: LD_INT 0
16761: PPUSH
16762: PPUSH
16763: PPUSH
16764: PPUSH
// result := false ;
16765: LD_ADDR_VAR 0 1
16769: PUSH
16770: LD_INT 0
16772: ST_TO_ADDR
// for i := 1 to 16 do
16773: LD_ADDR_VAR 0 2
16777: PUSH
16778: DOUBLE
16779: LD_INT 1
16781: DEC
16782: ST_TO_ADDR
16783: LD_INT 16
16785: PUSH
16786: FOR_TO
16787: IFFALSE 16986
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16789: LD_ADDR_VAR 0 3
16793: PUSH
16794: LD_INT 10
16796: PUSH
16797: LD_INT 20
16799: PUSH
16800: LD_INT 30
16802: PUSH
16803: LD_INT 40
16805: PUSH
16806: LD_INT 50
16808: PUSH
16809: LD_INT 60
16811: PUSH
16812: LD_INT 70
16814: PUSH
16815: LD_INT 80
16817: PUSH
16818: LD_INT 90
16820: PUSH
16821: LD_INT 100
16823: PUSH
16824: LD_INT 110
16826: PUSH
16827: LD_INT 120
16829: PUSH
16830: LD_INT 130
16832: PUSH
16833: LD_INT 140
16835: PUSH
16836: LD_INT 150
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: PUSH
16856: LD_INT 1
16858: PPUSH
16859: LD_INT 15
16861: PPUSH
16862: CALL_OW 12
16866: ARRAY
16867: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16868: LD_ADDR_VAR 0 4
16872: PUSH
16873: LD_INT 10
16875: PUSH
16876: LD_INT 20
16878: PUSH
16879: LD_INT 30
16881: PUSH
16882: LD_INT 40
16884: PUSH
16885: LD_INT 50
16887: PUSH
16888: LD_INT 60
16890: PUSH
16891: LD_INT 70
16893: PUSH
16894: LD_INT 80
16896: PUSH
16897: LD_INT 90
16899: PUSH
16900: LD_INT 100
16902: PUSH
16903: LD_INT 110
16905: PUSH
16906: LD_INT 120
16908: PUSH
16909: LD_INT 130
16911: PUSH
16912: LD_INT 140
16914: PUSH
16915: LD_INT 150
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 1
16937: PPUSH
16938: LD_INT 15
16940: PPUSH
16941: CALL_OW 12
16945: ARRAY
16946: ST_TO_ADDR
// if ValidHex ( x , y ) then
16947: LD_VAR 0 3
16951: PPUSH
16952: LD_VAR 0 4
16956: PPUSH
16957: CALL_OW 488
16961: IFFALSE 16984
// begin result := [ x , y ] ;
16963: LD_ADDR_VAR 0 1
16967: PUSH
16968: LD_VAR 0 3
16972: PUSH
16973: LD_VAR 0 4
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: ST_TO_ADDR
// break ;
16982: GO 16986
// end ; end ;
16984: GO 16786
16986: POP
16987: POP
// if result then
16988: LD_VAR 0 1
16992: IFFALSE 17052
// begin ToLua ( playSibBomb() ) ;
16994: LD_STRING playSibBomb()
16996: PPUSH
16997: CALL_OW 559
// wait ( 0 0$14 ) ;
17001: LD_INT 490
17003: PPUSH
17004: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17008: LD_VAR 0 1
17012: PUSH
17013: LD_INT 1
17015: ARRAY
17016: PPUSH
17017: LD_VAR 0 1
17021: PUSH
17022: LD_INT 2
17024: ARRAY
17025: PPUSH
17026: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17030: LD_VAR 0 1
17034: PUSH
17035: LD_INT 1
17037: ARRAY
17038: PPUSH
17039: LD_VAR 0 1
17043: PUSH
17044: LD_INT 2
17046: ARRAY
17047: PPUSH
17048: CALL_OW 429
// end ; end ;
17052: LD_VAR 0 1
17056: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17057: LD_EXP 44
17061: PUSH
17062: LD_EXP 66
17066: AND
17067: IFFALSE 17079
17069: GO 17071
17071: DISABLE
// YouLost (  ) ;
17072: LD_STRING 
17074: PPUSH
17075: CALL_OW 104
17079: END
// every 0 0$1 trigger StreamModeActive and sFog do
17080: LD_EXP 44
17084: PUSH
17085: LD_EXP 65
17089: AND
17090: IFFALSE 17104
17092: GO 17094
17094: DISABLE
// FogOff ( your_side ) ;
17095: LD_OWVAR 2
17099: PPUSH
17100: CALL_OW 344
17104: END
// every 0 0$1 trigger StreamModeActive and sSun do
17105: LD_EXP 44
17109: PUSH
17110: LD_EXP 67
17114: AND
17115: IFFALSE 17143
17117: GO 17119
17119: DISABLE
// begin solar_recharge_percent := 0 ;
17120: LD_ADDR_OWVAR 79
17124: PUSH
17125: LD_INT 0
17127: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17128: LD_INT 10500
17130: PPUSH
17131: CALL_OW 67
// solar_recharge_percent := 100 ;
17135: LD_ADDR_OWVAR 79
17139: PUSH
17140: LD_INT 100
17142: ST_TO_ADDR
// end ;
17143: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17144: LD_EXP 44
17148: PUSH
17149: LD_EXP 68
17153: AND
17154: IFFALSE 17393
17156: GO 17158
17158: DISABLE
17159: LD_INT 0
17161: PPUSH
17162: PPUSH
17163: PPUSH
// begin tmp := [ ] ;
17164: LD_ADDR_VAR 0 3
17168: PUSH
17169: EMPTY
17170: ST_TO_ADDR
// for i := 1 to 6 do
17171: LD_ADDR_VAR 0 1
17175: PUSH
17176: DOUBLE
17177: LD_INT 1
17179: DEC
17180: ST_TO_ADDR
17181: LD_INT 6
17183: PUSH
17184: FOR_TO
17185: IFFALSE 17290
// begin uc_nation := nation_nature ;
17187: LD_ADDR_OWVAR 21
17191: PUSH
17192: LD_INT 0
17194: ST_TO_ADDR
// uc_side := 0 ;
17195: LD_ADDR_OWVAR 20
17199: PUSH
17200: LD_INT 0
17202: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17203: LD_ADDR_OWVAR 29
17207: PUSH
17208: LD_INT 12
17210: PUSH
17211: LD_INT 12
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: ST_TO_ADDR
// hc_agressivity := 20 ;
17218: LD_ADDR_OWVAR 35
17222: PUSH
17223: LD_INT 20
17225: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17226: LD_ADDR_OWVAR 28
17230: PUSH
17231: LD_INT 17
17233: ST_TO_ADDR
// hc_gallery :=  ;
17234: LD_ADDR_OWVAR 33
17238: PUSH
17239: LD_STRING 
17241: ST_TO_ADDR
// hc_name :=  ;
17242: LD_ADDR_OWVAR 26
17246: PUSH
17247: LD_STRING 
17249: ST_TO_ADDR
// un := CreateHuman ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: CALL_OW 44
17259: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17260: LD_VAR 0 2
17264: PPUSH
17265: LD_INT 1
17267: PPUSH
17268: CALL_OW 51
// tmp := tmp ^ un ;
17272: LD_ADDR_VAR 0 3
17276: PUSH
17277: LD_VAR 0 3
17281: PUSH
17282: LD_VAR 0 2
17286: ADD
17287: ST_TO_ADDR
// end ;
17288: GO 17184
17290: POP
17291: POP
// repeat wait ( 0 0$1 ) ;
17292: LD_INT 35
17294: PPUSH
17295: CALL_OW 67
// for un in tmp do
17299: LD_ADDR_VAR 0 2
17303: PUSH
17304: LD_VAR 0 3
17308: PUSH
17309: FOR_IN
17310: IFFALSE 17384
// begin if IsDead ( un ) then
17312: LD_VAR 0 2
17316: PPUSH
17317: CALL_OW 301
17321: IFFALSE 17341
// begin tmp := tmp diff un ;
17323: LD_ADDR_VAR 0 3
17327: PUSH
17328: LD_VAR 0 3
17332: PUSH
17333: LD_VAR 0 2
17337: DIFF
17338: ST_TO_ADDR
// continue ;
17339: GO 17309
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17341: LD_VAR 0 2
17345: PPUSH
17346: LD_INT 3
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_INT 0
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PPUSH
17363: CALL_OW 69
17367: PPUSH
17368: LD_VAR 0 2
17372: PPUSH
17373: CALL_OW 74
17377: PPUSH
17378: CALL_OW 115
// end ;
17382: GO 17309
17384: POP
17385: POP
// until not tmp ;
17386: LD_VAR 0 3
17390: NOT
17391: IFFALSE 17292
// end ;
17393: PPOPN 3
17395: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17396: LD_EXP 44
17400: PUSH
17401: LD_EXP 69
17405: AND
17406: IFFALSE 17460
17408: GO 17410
17410: DISABLE
// begin ToLua ( displayTroll(); ) ;
17411: LD_STRING displayTroll();
17413: PPUSH
17414: CALL_OW 559
// wait ( 3 3$00 ) ;
17418: LD_INT 6300
17420: PPUSH
17421: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17425: LD_STRING hideTroll();
17427: PPUSH
17428: CALL_OW 559
// wait ( 1 1$00 ) ;
17432: LD_INT 2100
17434: PPUSH
17435: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17439: LD_STRING displayTroll();
17441: PPUSH
17442: CALL_OW 559
// wait ( 1 1$00 ) ;
17446: LD_INT 2100
17448: PPUSH
17449: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17453: LD_STRING hideTroll();
17455: PPUSH
17456: CALL_OW 559
// end ;
17460: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17461: LD_EXP 44
17465: PUSH
17466: LD_EXP 70
17470: AND
17471: IFFALSE 17534
17473: GO 17475
17475: DISABLE
17476: LD_INT 0
17478: PPUSH
// begin p := 0 ;
17479: LD_ADDR_VAR 0 1
17483: PUSH
17484: LD_INT 0
17486: ST_TO_ADDR
// repeat game_speed := 1 ;
17487: LD_ADDR_OWVAR 65
17491: PUSH
17492: LD_INT 1
17494: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17495: LD_INT 35
17497: PPUSH
17498: CALL_OW 67
// p := p + 1 ;
17502: LD_ADDR_VAR 0 1
17506: PUSH
17507: LD_VAR 0 1
17511: PUSH
17512: LD_INT 1
17514: PLUS
17515: ST_TO_ADDR
// until p >= 60 ;
17516: LD_VAR 0 1
17520: PUSH
17521: LD_INT 60
17523: GREATEREQUAL
17524: IFFALSE 17487
// game_speed := 4 ;
17526: LD_ADDR_OWVAR 65
17530: PUSH
17531: LD_INT 4
17533: ST_TO_ADDR
// end ;
17534: PPOPN 1
17536: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17537: LD_EXP 44
17541: PUSH
17542: LD_EXP 71
17546: AND
17547: IFFALSE 17693
17549: GO 17551
17551: DISABLE
17552: LD_INT 0
17554: PPUSH
17555: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17556: LD_ADDR_VAR 0 1
17560: PUSH
17561: LD_INT 22
17563: PUSH
17564: LD_OWVAR 2
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 2
17575: PUSH
17576: LD_INT 30
17578: PUSH
17579: LD_INT 0
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 30
17588: PUSH
17589: LD_INT 1
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: LIST
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PPUSH
17605: CALL_OW 69
17609: ST_TO_ADDR
// if not depot then
17610: LD_VAR 0 1
17614: NOT
17615: IFFALSE 17619
// exit ;
17617: GO 17693
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17619: LD_ADDR_VAR 0 2
17623: PUSH
17624: LD_VAR 0 1
17628: PUSH
17629: LD_INT 1
17631: PPUSH
17632: LD_VAR 0 1
17636: PPUSH
17637: CALL_OW 12
17641: ARRAY
17642: PPUSH
17643: CALL_OW 274
17647: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17648: LD_VAR 0 2
17652: PPUSH
17653: LD_INT 1
17655: PPUSH
17656: LD_INT 0
17658: PPUSH
17659: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17663: LD_VAR 0 2
17667: PPUSH
17668: LD_INT 2
17670: PPUSH
17671: LD_INT 0
17673: PPUSH
17674: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17678: LD_VAR 0 2
17682: PPUSH
17683: LD_INT 3
17685: PPUSH
17686: LD_INT 0
17688: PPUSH
17689: CALL_OW 277
// end ;
17693: PPOPN 2
17695: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17696: LD_EXP 44
17700: PUSH
17701: LD_EXP 72
17705: AND
17706: IFFALSE 17803
17708: GO 17710
17710: DISABLE
17711: LD_INT 0
17713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17714: LD_ADDR_VAR 0 1
17718: PUSH
17719: LD_INT 22
17721: PUSH
17722: LD_OWVAR 2
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 21
17733: PUSH
17734: LD_INT 1
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 3
17743: PUSH
17744: LD_INT 23
17746: PUSH
17747: LD_INT 0
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: LIST
17762: PPUSH
17763: CALL_OW 69
17767: ST_TO_ADDR
// if not tmp then
17768: LD_VAR 0 1
17772: NOT
17773: IFFALSE 17777
// exit ;
17775: GO 17803
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17777: LD_VAR 0 1
17781: PUSH
17782: LD_INT 1
17784: PPUSH
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL_OW 12
17794: ARRAY
17795: PPUSH
17796: LD_INT 200
17798: PPUSH
17799: CALL_OW 234
// end ;
17803: PPOPN 1
17805: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17806: LD_EXP 44
17810: PUSH
17811: LD_EXP 73
17815: AND
17816: IFFALSE 17895
17818: GO 17820
17820: DISABLE
17821: LD_INT 0
17823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17824: LD_ADDR_VAR 0 1
17828: PUSH
17829: LD_INT 22
17831: PUSH
17832: LD_OWVAR 2
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 21
17843: PUSH
17844: LD_INT 2
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PPUSH
17855: CALL_OW 69
17859: ST_TO_ADDR
// if not tmp then
17860: LD_VAR 0 1
17864: NOT
17865: IFFALSE 17869
// exit ;
17867: GO 17895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17869: LD_VAR 0 1
17873: PUSH
17874: LD_INT 1
17876: PPUSH
17877: LD_VAR 0 1
17881: PPUSH
17882: CALL_OW 12
17886: ARRAY
17887: PPUSH
17888: LD_INT 60
17890: PPUSH
17891: CALL_OW 234
// end ;
17895: PPOPN 1
17897: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17898: LD_EXP 44
17902: PUSH
17903: LD_EXP 74
17907: AND
17908: IFFALSE 18007
17910: GO 17912
17912: DISABLE
17913: LD_INT 0
17915: PPUSH
17916: PPUSH
// begin enable ;
17917: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17918: LD_ADDR_VAR 0 1
17922: PUSH
17923: LD_INT 22
17925: PUSH
17926: LD_OWVAR 2
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 61
17937: PUSH
17938: EMPTY
17939: LIST
17940: PUSH
17941: LD_INT 33
17943: PUSH
17944: LD_INT 2
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: LIST
17955: PPUSH
17956: CALL_OW 69
17960: ST_TO_ADDR
// if not tmp then
17961: LD_VAR 0 1
17965: NOT
17966: IFFALSE 17970
// exit ;
17968: GO 18007
// for i in tmp do
17970: LD_ADDR_VAR 0 2
17974: PUSH
17975: LD_VAR 0 1
17979: PUSH
17980: FOR_IN
17981: IFFALSE 18005
// if IsControledBy ( i ) then
17983: LD_VAR 0 2
17987: PPUSH
17988: CALL_OW 312
17992: IFFALSE 18003
// ComUnlink ( i ) ;
17994: LD_VAR 0 2
17998: PPUSH
17999: CALL_OW 136
18003: GO 17980
18005: POP
18006: POP
// end ;
18007: PPOPN 2
18009: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18010: LD_EXP 44
18014: PUSH
18015: LD_EXP 75
18019: AND
18020: IFFALSE 18160
18022: GO 18024
18024: DISABLE
18025: LD_INT 0
18027: PPUSH
18028: PPUSH
// begin ToLua ( displayPowell(); ) ;
18029: LD_STRING displayPowell();
18031: PPUSH
18032: CALL_OW 559
// uc_side := 0 ;
18036: LD_ADDR_OWVAR 20
18040: PUSH
18041: LD_INT 0
18043: ST_TO_ADDR
// uc_nation := 2 ;
18044: LD_ADDR_OWVAR 21
18048: PUSH
18049: LD_INT 2
18051: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18052: LD_ADDR_OWVAR 37
18056: PUSH
18057: LD_INT 14
18059: ST_TO_ADDR
// vc_engine := engine_siberite ;
18060: LD_ADDR_OWVAR 39
18064: PUSH
18065: LD_INT 3
18067: ST_TO_ADDR
// vc_control := control_apeman ;
18068: LD_ADDR_OWVAR 38
18072: PUSH
18073: LD_INT 5
18075: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18076: LD_ADDR_OWVAR 40
18080: PUSH
18081: LD_INT 29
18083: ST_TO_ADDR
// un := CreateVehicle ;
18084: LD_ADDR_VAR 0 2
18088: PUSH
18089: CALL_OW 45
18093: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18094: LD_VAR 0 2
18098: PPUSH
18099: LD_INT 1
18101: PPUSH
18102: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18106: LD_INT 35
18108: PPUSH
18109: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18113: LD_VAR 0 2
18117: PPUSH
18118: LD_INT 22
18120: PUSH
18121: LD_OWVAR 2
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PPUSH
18130: CALL_OW 69
18134: PPUSH
18135: LD_VAR 0 2
18139: PPUSH
18140: CALL_OW 74
18144: PPUSH
18145: CALL_OW 115
// until IsDead ( un ) ;
18149: LD_VAR 0 2
18153: PPUSH
18154: CALL_OW 301
18158: IFFALSE 18106
// end ;
18160: PPOPN 2
18162: END
// every 0 0$1 trigger StreamModeActive and sStu do
18163: LD_EXP 44
18167: PUSH
18168: LD_EXP 83
18172: AND
18173: IFFALSE 18189
18175: GO 18177
18177: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18178: LD_STRING displayStucuk();
18180: PPUSH
18181: CALL_OW 559
// ResetFog ;
18185: CALL_OW 335
// end ;
18189: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18190: LD_EXP 44
18194: PUSH
18195: LD_EXP 76
18199: AND
18200: IFFALSE 18341
18202: GO 18204
18204: DISABLE
18205: LD_INT 0
18207: PPUSH
18208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18209: LD_ADDR_VAR 0 2
18213: PUSH
18214: LD_INT 22
18216: PUSH
18217: LD_OWVAR 2
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 21
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PPUSH
18240: CALL_OW 69
18244: ST_TO_ADDR
// if not tmp then
18245: LD_VAR 0 2
18249: NOT
18250: IFFALSE 18254
// exit ;
18252: GO 18341
// un := tmp [ rand ( 1 , tmp ) ] ;
18254: LD_ADDR_VAR 0 1
18258: PUSH
18259: LD_VAR 0 2
18263: PUSH
18264: LD_INT 1
18266: PPUSH
18267: LD_VAR 0 2
18271: PPUSH
18272: CALL_OW 12
18276: ARRAY
18277: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18278: LD_VAR 0 1
18282: PPUSH
18283: LD_INT 0
18285: PPUSH
18286: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18290: LD_VAR 0 1
18294: PPUSH
18295: LD_OWVAR 3
18299: PUSH
18300: LD_VAR 0 1
18304: DIFF
18305: PPUSH
18306: LD_VAR 0 1
18310: PPUSH
18311: CALL_OW 74
18315: PPUSH
18316: CALL_OW 115
// wait ( 0 0$20 ) ;
18320: LD_INT 700
18322: PPUSH
18323: CALL_OW 67
// SetSide ( un , your_side ) ;
18327: LD_VAR 0 1
18331: PPUSH
18332: LD_OWVAR 2
18336: PPUSH
18337: CALL_OW 235
// end ;
18341: PPOPN 2
18343: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18344: LD_EXP 44
18348: PUSH
18349: LD_EXP 77
18353: AND
18354: IFFALSE 18460
18356: GO 18358
18358: DISABLE
18359: LD_INT 0
18361: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18362: LD_ADDR_VAR 0 1
18366: PUSH
18367: LD_INT 22
18369: PUSH
18370: LD_OWVAR 2
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: LD_INT 30
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 30
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: LIST
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PPUSH
18411: CALL_OW 69
18415: ST_TO_ADDR
// if not depot then
18416: LD_VAR 0 1
18420: NOT
18421: IFFALSE 18425
// exit ;
18423: GO 18460
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18425: LD_VAR 0 1
18429: PUSH
18430: LD_INT 1
18432: ARRAY
18433: PPUSH
18434: CALL_OW 250
18438: PPUSH
18439: LD_VAR 0 1
18443: PUSH
18444: LD_INT 1
18446: ARRAY
18447: PPUSH
18448: CALL_OW 251
18452: PPUSH
18453: LD_INT 70
18455: PPUSH
18456: CALL_OW 495
// end ;
18460: PPOPN 1
18462: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18463: LD_EXP 44
18467: PUSH
18468: LD_EXP 78
18472: AND
18473: IFFALSE 18684
18475: GO 18477
18477: DISABLE
18478: LD_INT 0
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18485: LD_ADDR_VAR 0 5
18489: PUSH
18490: LD_INT 22
18492: PUSH
18493: LD_OWVAR 2
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 21
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PPUSH
18516: CALL_OW 69
18520: ST_TO_ADDR
// if not tmp then
18521: LD_VAR 0 5
18525: NOT
18526: IFFALSE 18530
// exit ;
18528: GO 18684
// for i in tmp do
18530: LD_ADDR_VAR 0 1
18534: PUSH
18535: LD_VAR 0 5
18539: PUSH
18540: FOR_IN
18541: IFFALSE 18682
// begin d := rand ( 0 , 5 ) ;
18543: LD_ADDR_VAR 0 4
18547: PUSH
18548: LD_INT 0
18550: PPUSH
18551: LD_INT 5
18553: PPUSH
18554: CALL_OW 12
18558: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18559: LD_ADDR_VAR 0 2
18563: PUSH
18564: LD_VAR 0 1
18568: PPUSH
18569: CALL_OW 250
18573: PPUSH
18574: LD_VAR 0 4
18578: PPUSH
18579: LD_INT 3
18581: PPUSH
18582: LD_INT 12
18584: PPUSH
18585: CALL_OW 12
18589: PPUSH
18590: CALL_OW 272
18594: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18595: LD_ADDR_VAR 0 3
18599: PUSH
18600: LD_VAR 0 1
18604: PPUSH
18605: CALL_OW 251
18609: PPUSH
18610: LD_VAR 0 4
18614: PPUSH
18615: LD_INT 3
18617: PPUSH
18618: LD_INT 12
18620: PPUSH
18621: CALL_OW 12
18625: PPUSH
18626: CALL_OW 273
18630: ST_TO_ADDR
// if ValidHex ( x , y ) then
18631: LD_VAR 0 2
18635: PPUSH
18636: LD_VAR 0 3
18640: PPUSH
18641: CALL_OW 488
18645: IFFALSE 18680
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18647: LD_VAR 0 1
18651: PPUSH
18652: LD_VAR 0 2
18656: PPUSH
18657: LD_VAR 0 3
18661: PPUSH
18662: LD_INT 3
18664: PPUSH
18665: LD_INT 6
18667: PPUSH
18668: CALL_OW 12
18672: PPUSH
18673: LD_INT 1
18675: PPUSH
18676: CALL_OW 483
// end ;
18680: GO 18540
18682: POP
18683: POP
// end ;
18684: PPOPN 5
18686: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18687: LD_EXP 44
18691: PUSH
18692: LD_EXP 79
18696: AND
18697: IFFALSE 18791
18699: GO 18701
18701: DISABLE
18702: LD_INT 0
18704: PPUSH
18705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18706: LD_ADDR_VAR 0 2
18710: PUSH
18711: LD_INT 22
18713: PUSH
18714: LD_OWVAR 2
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 32
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 21
18735: PUSH
18736: LD_INT 2
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: LIST
18747: PPUSH
18748: CALL_OW 69
18752: ST_TO_ADDR
// if not tmp then
18753: LD_VAR 0 2
18757: NOT
18758: IFFALSE 18762
// exit ;
18760: GO 18791
// for i in tmp do
18762: LD_ADDR_VAR 0 1
18766: PUSH
18767: LD_VAR 0 2
18771: PUSH
18772: FOR_IN
18773: IFFALSE 18789
// SetFuel ( i , 0 ) ;
18775: LD_VAR 0 1
18779: PPUSH
18780: LD_INT 0
18782: PPUSH
18783: CALL_OW 240
18787: GO 18772
18789: POP
18790: POP
// end ;
18791: PPOPN 2
18793: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18794: LD_EXP 44
18798: PUSH
18799: LD_EXP 80
18803: AND
18804: IFFALSE 18870
18806: GO 18808
18808: DISABLE
18809: LD_INT 0
18811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18812: LD_ADDR_VAR 0 1
18816: PUSH
18817: LD_INT 22
18819: PUSH
18820: LD_OWVAR 2
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 30
18831: PUSH
18832: LD_INT 29
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PPUSH
18843: CALL_OW 69
18847: ST_TO_ADDR
// if not tmp then
18848: LD_VAR 0 1
18852: NOT
18853: IFFALSE 18857
// exit ;
18855: GO 18870
// DestroyUnit ( tmp [ 1 ] ) ;
18857: LD_VAR 0 1
18861: PUSH
18862: LD_INT 1
18864: ARRAY
18865: PPUSH
18866: CALL_OW 65
// end ;
18870: PPOPN 1
18872: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18873: LD_EXP 44
18877: PUSH
18878: LD_EXP 82
18882: AND
18883: IFFALSE 19012
18885: GO 18887
18887: DISABLE
18888: LD_INT 0
18890: PPUSH
// begin uc_side := 0 ;
18891: LD_ADDR_OWVAR 20
18895: PUSH
18896: LD_INT 0
18898: ST_TO_ADDR
// uc_nation := nation_arabian ;
18899: LD_ADDR_OWVAR 21
18903: PUSH
18904: LD_INT 2
18906: ST_TO_ADDR
// hc_gallery :=  ;
18907: LD_ADDR_OWVAR 33
18911: PUSH
18912: LD_STRING 
18914: ST_TO_ADDR
// hc_name :=  ;
18915: LD_ADDR_OWVAR 26
18919: PUSH
18920: LD_STRING 
18922: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18923: LD_INT 1
18925: PPUSH
18926: LD_INT 11
18928: PPUSH
18929: LD_INT 10
18931: PPUSH
18932: CALL_OW 380
// un := CreateHuman ;
18936: LD_ADDR_VAR 0 1
18940: PUSH
18941: CALL_OW 44
18945: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18946: LD_VAR 0 1
18950: PPUSH
18951: LD_INT 1
18953: PPUSH
18954: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18958: LD_INT 35
18960: PPUSH
18961: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18965: LD_VAR 0 1
18969: PPUSH
18970: LD_INT 22
18972: PUSH
18973: LD_OWVAR 2
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PPUSH
18982: CALL_OW 69
18986: PPUSH
18987: LD_VAR 0 1
18991: PPUSH
18992: CALL_OW 74
18996: PPUSH
18997: CALL_OW 115
// until IsDead ( un ) ;
19001: LD_VAR 0 1
19005: PPUSH
19006: CALL_OW 301
19010: IFFALSE 18958
// end ;
19012: PPOPN 1
19014: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19015: LD_EXP 44
19019: PUSH
19020: LD_EXP 84
19024: AND
19025: IFFALSE 19037
19027: GO 19029
19029: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19030: LD_STRING earthquake(getX(game), 0, 32)
19032: PPUSH
19033: CALL_OW 559
19037: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19038: LD_EXP 44
19042: PUSH
19043: LD_EXP 85
19047: AND
19048: IFFALSE 19139
19050: GO 19052
19052: DISABLE
19053: LD_INT 0
19055: PPUSH
// begin enable ;
19056: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19057: LD_ADDR_VAR 0 1
19061: PUSH
19062: LD_INT 22
19064: PUSH
19065: LD_OWVAR 2
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 21
19076: PUSH
19077: LD_INT 2
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 33
19086: PUSH
19087: LD_INT 3
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: LIST
19098: PPUSH
19099: CALL_OW 69
19103: ST_TO_ADDR
// if not tmp then
19104: LD_VAR 0 1
19108: NOT
19109: IFFALSE 19113
// exit ;
19111: GO 19139
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19113: LD_VAR 0 1
19117: PUSH
19118: LD_INT 1
19120: PPUSH
19121: LD_VAR 0 1
19125: PPUSH
19126: CALL_OW 12
19130: ARRAY
19131: PPUSH
19132: LD_INT 1
19134: PPUSH
19135: CALL_OW 234
// end ;
19139: PPOPN 1
19141: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19142: LD_EXP 44
19146: PUSH
19147: LD_EXP 86
19151: AND
19152: IFFALSE 19293
19154: GO 19156
19156: DISABLE
19157: LD_INT 0
19159: PPUSH
19160: PPUSH
19161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19162: LD_ADDR_VAR 0 3
19166: PUSH
19167: LD_INT 22
19169: PUSH
19170: LD_OWVAR 2
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 25
19181: PUSH
19182: LD_INT 1
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PPUSH
19193: CALL_OW 69
19197: ST_TO_ADDR
// if not tmp then
19198: LD_VAR 0 3
19202: NOT
19203: IFFALSE 19207
// exit ;
19205: GO 19293
// un := tmp [ rand ( 1 , tmp ) ] ;
19207: LD_ADDR_VAR 0 2
19211: PUSH
19212: LD_VAR 0 3
19216: PUSH
19217: LD_INT 1
19219: PPUSH
19220: LD_VAR 0 3
19224: PPUSH
19225: CALL_OW 12
19229: ARRAY
19230: ST_TO_ADDR
// if Crawls ( un ) then
19231: LD_VAR 0 2
19235: PPUSH
19236: CALL_OW 318
19240: IFFALSE 19251
// ComWalk ( un ) ;
19242: LD_VAR 0 2
19246: PPUSH
19247: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19251: LD_VAR 0 2
19255: PPUSH
19256: LD_INT 9
19258: PPUSH
19259: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19263: LD_INT 28
19265: PPUSH
19266: LD_OWVAR 2
19270: PPUSH
19271: LD_INT 2
19273: PPUSH
19274: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19278: LD_INT 29
19280: PPUSH
19281: LD_OWVAR 2
19285: PPUSH
19286: LD_INT 2
19288: PPUSH
19289: CALL_OW 322
// end ;
19293: PPOPN 3
19295: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19296: LD_EXP 44
19300: PUSH
19301: LD_EXP 87
19305: AND
19306: IFFALSE 19417
19308: GO 19310
19310: DISABLE
19311: LD_INT 0
19313: PPUSH
19314: PPUSH
19315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19316: LD_ADDR_VAR 0 3
19320: PUSH
19321: LD_INT 22
19323: PUSH
19324: LD_OWVAR 2
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 25
19335: PUSH
19336: LD_INT 1
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PPUSH
19347: CALL_OW 69
19351: ST_TO_ADDR
// if not tmp then
19352: LD_VAR 0 3
19356: NOT
19357: IFFALSE 19361
// exit ;
19359: GO 19417
// un := tmp [ rand ( 1 , tmp ) ] ;
19361: LD_ADDR_VAR 0 2
19365: PUSH
19366: LD_VAR 0 3
19370: PUSH
19371: LD_INT 1
19373: PPUSH
19374: LD_VAR 0 3
19378: PPUSH
19379: CALL_OW 12
19383: ARRAY
19384: ST_TO_ADDR
// if Crawls ( un ) then
19385: LD_VAR 0 2
19389: PPUSH
19390: CALL_OW 318
19394: IFFALSE 19405
// ComWalk ( un ) ;
19396: LD_VAR 0 2
19400: PPUSH
19401: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19405: LD_VAR 0 2
19409: PPUSH
19410: LD_INT 8
19412: PPUSH
19413: CALL_OW 336
// end ;
19417: PPOPN 3
19419: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19420: LD_EXP 44
19424: PUSH
19425: LD_EXP 88
19429: AND
19430: IFFALSE 19574
19432: GO 19434
19434: DISABLE
19435: LD_INT 0
19437: PPUSH
19438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19439: LD_ADDR_VAR 0 2
19443: PUSH
19444: LD_INT 22
19446: PUSH
19447: LD_OWVAR 2
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 21
19458: PUSH
19459: LD_INT 2
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 2
19468: PUSH
19469: LD_INT 34
19471: PUSH
19472: LD_INT 12
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 34
19481: PUSH
19482: LD_INT 51
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 34
19491: PUSH
19492: LD_INT 32
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: LIST
19509: PPUSH
19510: CALL_OW 69
19514: ST_TO_ADDR
// if not tmp then
19515: LD_VAR 0 2
19519: NOT
19520: IFFALSE 19524
// exit ;
19522: GO 19574
// for i in tmp do
19524: LD_ADDR_VAR 0 1
19528: PUSH
19529: LD_VAR 0 2
19533: PUSH
19534: FOR_IN
19535: IFFALSE 19572
// if GetCargo ( i , mat_artifact ) = 0 then
19537: LD_VAR 0 1
19541: PPUSH
19542: LD_INT 4
19544: PPUSH
19545: CALL_OW 289
19549: PUSH
19550: LD_INT 0
19552: EQUAL
19553: IFFALSE 19570
// SetCargo ( i , mat_siberit , 100 ) ;
19555: LD_VAR 0 1
19559: PPUSH
19560: LD_INT 3
19562: PPUSH
19563: LD_INT 100
19565: PPUSH
19566: CALL_OW 290
19570: GO 19534
19572: POP
19573: POP
// end ;
19574: PPOPN 2
19576: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19577: LD_EXP 44
19581: PUSH
19582: LD_EXP 89
19586: AND
19587: IFFALSE 19770
19589: GO 19591
19591: DISABLE
19592: LD_INT 0
19594: PPUSH
19595: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19596: LD_ADDR_VAR 0 2
19600: PUSH
19601: LD_INT 22
19603: PUSH
19604: LD_OWVAR 2
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PPUSH
19613: CALL_OW 69
19617: ST_TO_ADDR
// if not tmp then
19618: LD_VAR 0 2
19622: NOT
19623: IFFALSE 19627
// exit ;
19625: GO 19770
// for i := 1 to 2 do
19627: LD_ADDR_VAR 0 1
19631: PUSH
19632: DOUBLE
19633: LD_INT 1
19635: DEC
19636: ST_TO_ADDR
19637: LD_INT 2
19639: PUSH
19640: FOR_TO
19641: IFFALSE 19768
// begin uc_side := your_side ;
19643: LD_ADDR_OWVAR 20
19647: PUSH
19648: LD_OWVAR 2
19652: ST_TO_ADDR
// uc_nation := nation_american ;
19653: LD_ADDR_OWVAR 21
19657: PUSH
19658: LD_INT 1
19660: ST_TO_ADDR
// vc_chassis := us_morphling ;
19661: LD_ADDR_OWVAR 37
19665: PUSH
19666: LD_INT 5
19668: ST_TO_ADDR
// vc_engine := engine_siberite ;
19669: LD_ADDR_OWVAR 39
19673: PUSH
19674: LD_INT 3
19676: ST_TO_ADDR
// vc_control := control_computer ;
19677: LD_ADDR_OWVAR 38
19681: PUSH
19682: LD_INT 3
19684: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19685: LD_ADDR_OWVAR 40
19689: PUSH
19690: LD_INT 10
19692: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19693: LD_VAR 0 2
19697: PUSH
19698: LD_INT 1
19700: ARRAY
19701: PPUSH
19702: CALL_OW 310
19706: NOT
19707: IFFALSE 19754
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19709: CALL_OW 45
19713: PPUSH
19714: LD_VAR 0 2
19718: PUSH
19719: LD_INT 1
19721: ARRAY
19722: PPUSH
19723: CALL_OW 250
19727: PPUSH
19728: LD_VAR 0 2
19732: PUSH
19733: LD_INT 1
19735: ARRAY
19736: PPUSH
19737: CALL_OW 251
19741: PPUSH
19742: LD_INT 12
19744: PPUSH
19745: LD_INT 1
19747: PPUSH
19748: CALL_OW 50
19752: GO 19766
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19754: CALL_OW 45
19758: PPUSH
19759: LD_INT 1
19761: PPUSH
19762: CALL_OW 51
// end ;
19766: GO 19640
19768: POP
19769: POP
// end ;
19770: PPOPN 2
19772: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19773: LD_EXP 44
19777: PUSH
19778: LD_EXP 90
19782: AND
19783: IFFALSE 20005
19785: GO 19787
19787: DISABLE
19788: LD_INT 0
19790: PPUSH
19791: PPUSH
19792: PPUSH
19793: PPUSH
19794: PPUSH
19795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19796: LD_ADDR_VAR 0 6
19800: PUSH
19801: LD_INT 22
19803: PUSH
19804: LD_OWVAR 2
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 21
19815: PUSH
19816: LD_INT 1
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 3
19825: PUSH
19826: LD_INT 23
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: LIST
19844: PPUSH
19845: CALL_OW 69
19849: ST_TO_ADDR
// if not tmp then
19850: LD_VAR 0 6
19854: NOT
19855: IFFALSE 19859
// exit ;
19857: GO 20005
// s1 := rand ( 1 , 4 ) ;
19859: LD_ADDR_VAR 0 2
19863: PUSH
19864: LD_INT 1
19866: PPUSH
19867: LD_INT 4
19869: PPUSH
19870: CALL_OW 12
19874: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19875: LD_ADDR_VAR 0 4
19879: PUSH
19880: LD_VAR 0 6
19884: PUSH
19885: LD_INT 1
19887: ARRAY
19888: PPUSH
19889: LD_VAR 0 2
19893: PPUSH
19894: CALL_OW 259
19898: ST_TO_ADDR
// if s1 = 1 then
19899: LD_VAR 0 2
19903: PUSH
19904: LD_INT 1
19906: EQUAL
19907: IFFALSE 19927
// s2 := rand ( 2 , 4 ) else
19909: LD_ADDR_VAR 0 3
19913: PUSH
19914: LD_INT 2
19916: PPUSH
19917: LD_INT 4
19919: PPUSH
19920: CALL_OW 12
19924: ST_TO_ADDR
19925: GO 19935
// s2 := 1 ;
19927: LD_ADDR_VAR 0 3
19931: PUSH
19932: LD_INT 1
19934: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19935: LD_ADDR_VAR 0 5
19939: PUSH
19940: LD_VAR 0 6
19944: PUSH
19945: LD_INT 1
19947: ARRAY
19948: PPUSH
19949: LD_VAR 0 3
19953: PPUSH
19954: CALL_OW 259
19958: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19959: LD_VAR 0 6
19963: PUSH
19964: LD_INT 1
19966: ARRAY
19967: PPUSH
19968: LD_VAR 0 2
19972: PPUSH
19973: LD_VAR 0 5
19977: PPUSH
19978: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19982: LD_VAR 0 6
19986: PUSH
19987: LD_INT 1
19989: ARRAY
19990: PPUSH
19991: LD_VAR 0 3
19995: PPUSH
19996: LD_VAR 0 4
20000: PPUSH
20001: CALL_OW 237
// end ;
20005: PPOPN 6
20007: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20008: LD_EXP 44
20012: PUSH
20013: LD_EXP 91
20017: AND
20018: IFFALSE 20097
20020: GO 20022
20022: DISABLE
20023: LD_INT 0
20025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20026: LD_ADDR_VAR 0 1
20030: PUSH
20031: LD_INT 22
20033: PUSH
20034: LD_OWVAR 2
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 30
20045: PUSH
20046: LD_INT 3
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PPUSH
20057: CALL_OW 69
20061: ST_TO_ADDR
// if not tmp then
20062: LD_VAR 0 1
20066: NOT
20067: IFFALSE 20071
// exit ;
20069: GO 20097
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20071: LD_VAR 0 1
20075: PUSH
20076: LD_INT 1
20078: PPUSH
20079: LD_VAR 0 1
20083: PPUSH
20084: CALL_OW 12
20088: ARRAY
20089: PPUSH
20090: LD_INT 1
20092: PPUSH
20093: CALL_OW 234
// end ;
20097: PPOPN 1
20099: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20100: LD_EXP 44
20104: PUSH
20105: LD_EXP 92
20109: AND
20110: IFFALSE 20222
20112: GO 20114
20114: DISABLE
20115: LD_INT 0
20117: PPUSH
20118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20119: LD_ADDR_VAR 0 2
20123: PUSH
20124: LD_INT 22
20126: PUSH
20127: LD_OWVAR 2
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: LD_INT 30
20141: PUSH
20142: LD_INT 27
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 30
20151: PUSH
20152: LD_INT 26
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 30
20161: PUSH
20162: LD_INT 28
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PPUSH
20179: CALL_OW 69
20183: ST_TO_ADDR
// if not tmp then
20184: LD_VAR 0 2
20188: NOT
20189: IFFALSE 20193
// exit ;
20191: GO 20222
// for i in tmp do
20193: LD_ADDR_VAR 0 1
20197: PUSH
20198: LD_VAR 0 2
20202: PUSH
20203: FOR_IN
20204: IFFALSE 20220
// SetLives ( i , 1 ) ;
20206: LD_VAR 0 1
20210: PPUSH
20211: LD_INT 1
20213: PPUSH
20214: CALL_OW 234
20218: GO 20203
20220: POP
20221: POP
// end ;
20222: PPOPN 2
20224: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20225: LD_EXP 44
20229: PUSH
20230: LD_EXP 93
20234: AND
20235: IFFALSE 20522
20237: GO 20239
20239: DISABLE
20240: LD_INT 0
20242: PPUSH
20243: PPUSH
20244: PPUSH
// begin i := rand ( 1 , 7 ) ;
20245: LD_ADDR_VAR 0 1
20249: PUSH
20250: LD_INT 1
20252: PPUSH
20253: LD_INT 7
20255: PPUSH
20256: CALL_OW 12
20260: ST_TO_ADDR
// case i of 1 :
20261: LD_VAR 0 1
20265: PUSH
20266: LD_INT 1
20268: DOUBLE
20269: EQUAL
20270: IFTRUE 20274
20272: GO 20284
20274: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20275: LD_STRING earthquake(getX(game), 0, 32)
20277: PPUSH
20278: CALL_OW 559
20282: GO 20522
20284: LD_INT 2
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20306
20292: POP
// begin ToLua ( displayStucuk(); ) ;
20293: LD_STRING displayStucuk();
20295: PPUSH
20296: CALL_OW 559
// ResetFog ;
20300: CALL_OW 335
// end ; 3 :
20304: GO 20522
20306: LD_INT 3
20308: DOUBLE
20309: EQUAL
20310: IFTRUE 20314
20312: GO 20418
20314: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20315: LD_ADDR_VAR 0 2
20319: PUSH
20320: LD_INT 22
20322: PUSH
20323: LD_OWVAR 2
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 25
20334: PUSH
20335: LD_INT 1
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PPUSH
20346: CALL_OW 69
20350: ST_TO_ADDR
// if not tmp then
20351: LD_VAR 0 2
20355: NOT
20356: IFFALSE 20360
// exit ;
20358: GO 20522
// un := tmp [ rand ( 1 , tmp ) ] ;
20360: LD_ADDR_VAR 0 3
20364: PUSH
20365: LD_VAR 0 2
20369: PUSH
20370: LD_INT 1
20372: PPUSH
20373: LD_VAR 0 2
20377: PPUSH
20378: CALL_OW 12
20382: ARRAY
20383: ST_TO_ADDR
// if Crawls ( un ) then
20384: LD_VAR 0 3
20388: PPUSH
20389: CALL_OW 318
20393: IFFALSE 20404
// ComWalk ( un ) ;
20395: LD_VAR 0 3
20399: PPUSH
20400: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20404: LD_VAR 0 3
20408: PPUSH
20409: LD_INT 8
20411: PPUSH
20412: CALL_OW 336
// end ; 4 :
20416: GO 20522
20418: LD_INT 4
20420: DOUBLE
20421: EQUAL
20422: IFTRUE 20426
20424: GO 20500
20426: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20427: LD_ADDR_VAR 0 2
20431: PUSH
20432: LD_INT 22
20434: PUSH
20435: LD_OWVAR 2
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 30
20446: PUSH
20447: LD_INT 29
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PPUSH
20458: CALL_OW 69
20462: ST_TO_ADDR
// if not tmp then
20463: LD_VAR 0 2
20467: NOT
20468: IFFALSE 20472
// exit ;
20470: GO 20522
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20472: LD_VAR 0 2
20476: PUSH
20477: LD_INT 1
20479: ARRAY
20480: PPUSH
20481: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20485: LD_VAR 0 2
20489: PUSH
20490: LD_INT 1
20492: ARRAY
20493: PPUSH
20494: CALL_OW 65
// end ; 5 .. 7 :
20498: GO 20522
20500: LD_INT 5
20502: DOUBLE
20503: GREATEREQUAL
20504: IFFALSE 20512
20506: LD_INT 7
20508: DOUBLE
20509: LESSEQUAL
20510: IFTRUE 20514
20512: GO 20521
20514: POP
// StreamSibBomb ; end ;
20515: CALL 16759 0 0
20519: GO 20522
20521: POP
// end ;
20522: PPOPN 3
20524: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20525: LD_EXP 44
20529: PUSH
20530: LD_EXP 94
20534: AND
20535: IFFALSE 20691
20537: GO 20539
20539: DISABLE
20540: LD_INT 0
20542: PPUSH
20543: PPUSH
20544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20545: LD_ADDR_VAR 0 2
20549: PUSH
20550: LD_INT 81
20552: PUSH
20553: LD_OWVAR 2
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 2
20564: PUSH
20565: LD_INT 21
20567: PUSH
20568: LD_INT 1
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 21
20577: PUSH
20578: LD_INT 2
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: LIST
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PPUSH
20594: CALL_OW 69
20598: ST_TO_ADDR
// if not tmp then
20599: LD_VAR 0 2
20603: NOT
20604: IFFALSE 20608
// exit ;
20606: GO 20691
// p := 0 ;
20608: LD_ADDR_VAR 0 3
20612: PUSH
20613: LD_INT 0
20615: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20616: LD_INT 35
20618: PPUSH
20619: CALL_OW 67
// p := p + 1 ;
20623: LD_ADDR_VAR 0 3
20627: PUSH
20628: LD_VAR 0 3
20632: PUSH
20633: LD_INT 1
20635: PLUS
20636: ST_TO_ADDR
// for i in tmp do
20637: LD_ADDR_VAR 0 1
20641: PUSH
20642: LD_VAR 0 2
20646: PUSH
20647: FOR_IN
20648: IFFALSE 20679
// if GetLives ( i ) < 1000 then
20650: LD_VAR 0 1
20654: PPUSH
20655: CALL_OW 256
20659: PUSH
20660: LD_INT 1000
20662: LESS
20663: IFFALSE 20677
// SetLives ( i , 1000 ) ;
20665: LD_VAR 0 1
20669: PPUSH
20670: LD_INT 1000
20672: PPUSH
20673: CALL_OW 234
20677: GO 20647
20679: POP
20680: POP
// until p > 20 ;
20681: LD_VAR 0 3
20685: PUSH
20686: LD_INT 20
20688: GREATER
20689: IFFALSE 20616
// end ;
20691: PPOPN 3
20693: END
// every 0 0$1 trigger StreamModeActive and sTime do
20694: LD_EXP 44
20698: PUSH
20699: LD_EXP 95
20703: AND
20704: IFFALSE 20739
20706: GO 20708
20708: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20709: LD_INT 28
20711: PPUSH
20712: LD_OWVAR 2
20716: PPUSH
20717: LD_INT 2
20719: PPUSH
20720: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20724: LD_INT 30
20726: PPUSH
20727: LD_OWVAR 2
20731: PPUSH
20732: LD_INT 2
20734: PPUSH
20735: CALL_OW 322
// end ;
20739: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20740: LD_EXP 44
20744: PUSH
20745: LD_EXP 96
20749: AND
20750: IFFALSE 20871
20752: GO 20754
20754: DISABLE
20755: LD_INT 0
20757: PPUSH
20758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20759: LD_ADDR_VAR 0 2
20763: PUSH
20764: LD_INT 22
20766: PUSH
20767: LD_OWVAR 2
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 21
20778: PUSH
20779: LD_INT 1
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 3
20788: PUSH
20789: LD_INT 23
20791: PUSH
20792: LD_INT 0
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: LIST
20807: PPUSH
20808: CALL_OW 69
20812: ST_TO_ADDR
// if not tmp then
20813: LD_VAR 0 2
20817: NOT
20818: IFFALSE 20822
// exit ;
20820: GO 20871
// for i in tmp do
20822: LD_ADDR_VAR 0 1
20826: PUSH
20827: LD_VAR 0 2
20831: PUSH
20832: FOR_IN
20833: IFFALSE 20869
// begin if Crawls ( i ) then
20835: LD_VAR 0 1
20839: PPUSH
20840: CALL_OW 318
20844: IFFALSE 20855
// ComWalk ( i ) ;
20846: LD_VAR 0 1
20850: PPUSH
20851: CALL_OW 138
// SetClass ( i , 2 ) ;
20855: LD_VAR 0 1
20859: PPUSH
20860: LD_INT 2
20862: PPUSH
20863: CALL_OW 336
// end ;
20867: GO 20832
20869: POP
20870: POP
// end ;
20871: PPOPN 2
20873: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20874: LD_EXP 44
20878: PUSH
20879: LD_EXP 97
20883: AND
20884: IFFALSE 21172
20886: GO 20888
20888: DISABLE
20889: LD_INT 0
20891: PPUSH
20892: PPUSH
20893: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20894: LD_OWVAR 2
20898: PPUSH
20899: LD_INT 9
20901: PPUSH
20902: LD_INT 1
20904: PPUSH
20905: LD_INT 1
20907: PPUSH
20908: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20912: LD_INT 9
20914: PPUSH
20915: LD_OWVAR 2
20919: PPUSH
20920: CALL_OW 343
// uc_side := 9 ;
20924: LD_ADDR_OWVAR 20
20928: PUSH
20929: LD_INT 9
20931: ST_TO_ADDR
// uc_nation := 2 ;
20932: LD_ADDR_OWVAR 21
20936: PUSH
20937: LD_INT 2
20939: ST_TO_ADDR
// hc_name := Dark Warrior ;
20940: LD_ADDR_OWVAR 26
20944: PUSH
20945: LD_STRING Dark Warrior
20947: ST_TO_ADDR
// hc_gallery :=  ;
20948: LD_ADDR_OWVAR 33
20952: PUSH
20953: LD_STRING 
20955: ST_TO_ADDR
// hc_noskilllimit := true ;
20956: LD_ADDR_OWVAR 76
20960: PUSH
20961: LD_INT 1
20963: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20964: LD_ADDR_OWVAR 31
20968: PUSH
20969: LD_INT 30
20971: PUSH
20972: LD_INT 30
20974: PUSH
20975: LD_INT 30
20977: PUSH
20978: LD_INT 30
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: ST_TO_ADDR
// un := CreateHuman ;
20987: LD_ADDR_VAR 0 3
20991: PUSH
20992: CALL_OW 44
20996: ST_TO_ADDR
// hc_noskilllimit := false ;
20997: LD_ADDR_OWVAR 76
21001: PUSH
21002: LD_INT 0
21004: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21005: LD_VAR 0 3
21009: PPUSH
21010: LD_INT 1
21012: PPUSH
21013: CALL_OW 51
// ToLua ( playRanger() ) ;
21017: LD_STRING playRanger()
21019: PPUSH
21020: CALL_OW 559
// p := 0 ;
21024: LD_ADDR_VAR 0 2
21028: PUSH
21029: LD_INT 0
21031: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21032: LD_INT 35
21034: PPUSH
21035: CALL_OW 67
// p := p + 1 ;
21039: LD_ADDR_VAR 0 2
21043: PUSH
21044: LD_VAR 0 2
21048: PUSH
21049: LD_INT 1
21051: PLUS
21052: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21053: LD_VAR 0 3
21057: PPUSH
21058: CALL_OW 256
21062: PUSH
21063: LD_INT 1000
21065: LESS
21066: IFFALSE 21080
// SetLives ( un , 1000 ) ;
21068: LD_VAR 0 3
21072: PPUSH
21073: LD_INT 1000
21075: PPUSH
21076: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21080: LD_VAR 0 3
21084: PPUSH
21085: LD_INT 81
21087: PUSH
21088: LD_OWVAR 2
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 91
21099: PUSH
21100: LD_VAR 0 3
21104: PUSH
21105: LD_INT 30
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: LIST
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PPUSH
21117: CALL_OW 69
21121: PPUSH
21122: LD_VAR 0 3
21126: PPUSH
21127: CALL_OW 74
21131: PPUSH
21132: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21136: LD_VAR 0 2
21140: PUSH
21141: LD_INT 80
21143: GREATER
21144: PUSH
21145: LD_VAR 0 3
21149: PPUSH
21150: CALL_OW 301
21154: OR
21155: IFFALSE 21032
// if un then
21157: LD_VAR 0 3
21161: IFFALSE 21172
// RemoveUnit ( un ) ;
21163: LD_VAR 0 3
21167: PPUSH
21168: CALL_OW 64
// end ;
21172: PPOPN 3
21174: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21175: LD_EXP 98
21179: IFFALSE 21295
21181: GO 21183
21183: DISABLE
21184: LD_INT 0
21186: PPUSH
21187: PPUSH
21188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21189: LD_ADDR_VAR 0 2
21193: PUSH
21194: LD_INT 81
21196: PUSH
21197: LD_OWVAR 2
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 21
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PPUSH
21220: CALL_OW 69
21224: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21225: LD_STRING playComputer()
21227: PPUSH
21228: CALL_OW 559
// if not tmp then
21232: LD_VAR 0 2
21236: NOT
21237: IFFALSE 21241
// exit ;
21239: GO 21295
// for i in tmp do
21241: LD_ADDR_VAR 0 1
21245: PUSH
21246: LD_VAR 0 2
21250: PUSH
21251: FOR_IN
21252: IFFALSE 21293
// for j := 1 to 4 do
21254: LD_ADDR_VAR 0 3
21258: PUSH
21259: DOUBLE
21260: LD_INT 1
21262: DEC
21263: ST_TO_ADDR
21264: LD_INT 4
21266: PUSH
21267: FOR_TO
21268: IFFALSE 21289
// SetSkill ( i , j , 10 ) ;
21270: LD_VAR 0 1
21274: PPUSH
21275: LD_VAR 0 3
21279: PPUSH
21280: LD_INT 10
21282: PPUSH
21283: CALL_OW 237
21287: GO 21267
21289: POP
21290: POP
21291: GO 21251
21293: POP
21294: POP
// end ;
21295: PPOPN 3
21297: END
// every 0 0$1 trigger s30 do var i , tmp ;
21298: LD_EXP 99
21302: IFFALSE 21371
21304: GO 21306
21306: DISABLE
21307: LD_INT 0
21309: PPUSH
21310: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21311: LD_ADDR_VAR 0 2
21315: PUSH
21316: LD_INT 22
21318: PUSH
21319: LD_OWVAR 2
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PPUSH
21328: CALL_OW 69
21332: ST_TO_ADDR
// if not tmp then
21333: LD_VAR 0 2
21337: NOT
21338: IFFALSE 21342
// exit ;
21340: GO 21371
// for i in tmp do
21342: LD_ADDR_VAR 0 1
21346: PUSH
21347: LD_VAR 0 2
21351: PUSH
21352: FOR_IN
21353: IFFALSE 21369
// SetLives ( i , 300 ) ;
21355: LD_VAR 0 1
21359: PPUSH
21360: LD_INT 300
21362: PPUSH
21363: CALL_OW 234
21367: GO 21352
21369: POP
21370: POP
// end ;
21371: PPOPN 2
21373: END
// every 0 0$1 trigger s60 do var i , tmp ;
21374: LD_EXP 100
21378: IFFALSE 21447
21380: GO 21382
21382: DISABLE
21383: LD_INT 0
21385: PPUSH
21386: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21387: LD_ADDR_VAR 0 2
21391: PUSH
21392: LD_INT 22
21394: PUSH
21395: LD_OWVAR 2
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PPUSH
21404: CALL_OW 69
21408: ST_TO_ADDR
// if not tmp then
21409: LD_VAR 0 2
21413: NOT
21414: IFFALSE 21418
// exit ;
21416: GO 21447
// for i in tmp do
21418: LD_ADDR_VAR 0 1
21422: PUSH
21423: LD_VAR 0 2
21427: PUSH
21428: FOR_IN
21429: IFFALSE 21445
// SetLives ( i , 600 ) ;
21431: LD_VAR 0 1
21435: PPUSH
21436: LD_INT 600
21438: PPUSH
21439: CALL_OW 234
21443: GO 21428
21445: POP
21446: POP
// end ;
21447: PPOPN 2
21449: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21450: LD_INT 0
21452: PPUSH
// case cmd of 301 :
21453: LD_VAR 0 1
21457: PUSH
21458: LD_INT 301
21460: DOUBLE
21461: EQUAL
21462: IFTRUE 21466
21464: GO 21498
21466: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21467: LD_VAR 0 6
21471: PPUSH
21472: LD_VAR 0 7
21476: PPUSH
21477: LD_VAR 0 8
21481: PPUSH
21482: LD_VAR 0 4
21486: PPUSH
21487: LD_VAR 0 5
21491: PPUSH
21492: CALL 22699 0 5
21496: GO 21619
21498: LD_INT 302
21500: DOUBLE
21501: EQUAL
21502: IFTRUE 21506
21504: GO 21543
21506: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21507: LD_VAR 0 6
21511: PPUSH
21512: LD_VAR 0 7
21516: PPUSH
21517: LD_VAR 0 8
21521: PPUSH
21522: LD_VAR 0 9
21526: PPUSH
21527: LD_VAR 0 4
21531: PPUSH
21532: LD_VAR 0 5
21536: PPUSH
21537: CALL 22790 0 6
21541: GO 21619
21543: LD_INT 303
21545: DOUBLE
21546: EQUAL
21547: IFTRUE 21551
21549: GO 21588
21551: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21552: LD_VAR 0 6
21556: PPUSH
21557: LD_VAR 0 7
21561: PPUSH
21562: LD_VAR 0 8
21566: PPUSH
21567: LD_VAR 0 9
21571: PPUSH
21572: LD_VAR 0 4
21576: PPUSH
21577: LD_VAR 0 5
21581: PPUSH
21582: CALL 21624 0 6
21586: GO 21619
21588: LD_INT 304
21590: DOUBLE
21591: EQUAL
21592: IFTRUE 21596
21594: GO 21618
21596: POP
// hHackTeleport ( unit , x , y ) ; end ;
21597: LD_VAR 0 2
21601: PPUSH
21602: LD_VAR 0 4
21606: PPUSH
21607: LD_VAR 0 5
21611: PPUSH
21612: CALL 23383 0 3
21616: GO 21619
21618: POP
// end ;
21619: LD_VAR 0 12
21623: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21624: LD_INT 0
21626: PPUSH
21627: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21628: LD_VAR 0 1
21632: PUSH
21633: LD_INT 1
21635: LESS
21636: PUSH
21637: LD_VAR 0 1
21641: PUSH
21642: LD_INT 3
21644: GREATER
21645: OR
21646: PUSH
21647: LD_VAR 0 5
21651: PPUSH
21652: LD_VAR 0 6
21656: PPUSH
21657: CALL_OW 428
21661: OR
21662: IFFALSE 21666
// exit ;
21664: GO 22386
// uc_side := your_side ;
21666: LD_ADDR_OWVAR 20
21670: PUSH
21671: LD_OWVAR 2
21675: ST_TO_ADDR
// uc_nation := nation ;
21676: LD_ADDR_OWVAR 21
21680: PUSH
21681: LD_VAR 0 1
21685: ST_TO_ADDR
// bc_level = 1 ;
21686: LD_ADDR_OWVAR 43
21690: PUSH
21691: LD_INT 1
21693: ST_TO_ADDR
// case btype of 1 :
21694: LD_VAR 0 2
21698: PUSH
21699: LD_INT 1
21701: DOUBLE
21702: EQUAL
21703: IFTRUE 21707
21705: GO 21718
21707: POP
// bc_type := b_depot ; 2 :
21708: LD_ADDR_OWVAR 42
21712: PUSH
21713: LD_INT 0
21715: ST_TO_ADDR
21716: GO 22330
21718: LD_INT 2
21720: DOUBLE
21721: EQUAL
21722: IFTRUE 21726
21724: GO 21737
21726: POP
// bc_type := b_warehouse ; 3 :
21727: LD_ADDR_OWVAR 42
21731: PUSH
21732: LD_INT 1
21734: ST_TO_ADDR
21735: GO 22330
21737: LD_INT 3
21739: DOUBLE
21740: EQUAL
21741: IFTRUE 21745
21743: GO 21756
21745: POP
// bc_type := b_lab ; 4 .. 9 :
21746: LD_ADDR_OWVAR 42
21750: PUSH
21751: LD_INT 6
21753: ST_TO_ADDR
21754: GO 22330
21756: LD_INT 4
21758: DOUBLE
21759: GREATEREQUAL
21760: IFFALSE 21768
21762: LD_INT 9
21764: DOUBLE
21765: LESSEQUAL
21766: IFTRUE 21770
21768: GO 21822
21770: POP
// begin bc_type := b_lab_half ;
21771: LD_ADDR_OWVAR 42
21775: PUSH
21776: LD_INT 7
21778: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21779: LD_ADDR_OWVAR 44
21783: PUSH
21784: LD_INT 10
21786: PUSH
21787: LD_INT 11
21789: PUSH
21790: LD_INT 12
21792: PUSH
21793: LD_INT 15
21795: PUSH
21796: LD_INT 14
21798: PUSH
21799: LD_INT 13
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: PUSH
21810: LD_VAR 0 2
21814: PUSH
21815: LD_INT 3
21817: MINUS
21818: ARRAY
21819: ST_TO_ADDR
// end ; 10 .. 13 :
21820: GO 22330
21822: LD_INT 10
21824: DOUBLE
21825: GREATEREQUAL
21826: IFFALSE 21834
21828: LD_INT 13
21830: DOUBLE
21831: LESSEQUAL
21832: IFTRUE 21836
21834: GO 21913
21836: POP
// begin bc_type := b_lab_full ;
21837: LD_ADDR_OWVAR 42
21841: PUSH
21842: LD_INT 8
21844: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21845: LD_ADDR_OWVAR 44
21849: PUSH
21850: LD_INT 10
21852: PUSH
21853: LD_INT 12
21855: PUSH
21856: LD_INT 14
21858: PUSH
21859: LD_INT 13
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: PUSH
21868: LD_VAR 0 2
21872: PUSH
21873: LD_INT 9
21875: MINUS
21876: ARRAY
21877: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21878: LD_ADDR_OWVAR 45
21882: PUSH
21883: LD_INT 11
21885: PUSH
21886: LD_INT 15
21888: PUSH
21889: LD_INT 12
21891: PUSH
21892: LD_INT 15
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: PUSH
21901: LD_VAR 0 2
21905: PUSH
21906: LD_INT 9
21908: MINUS
21909: ARRAY
21910: ST_TO_ADDR
// end ; 14 :
21911: GO 22330
21913: LD_INT 14
21915: DOUBLE
21916: EQUAL
21917: IFTRUE 21921
21919: GO 21932
21921: POP
// bc_type := b_workshop ; 15 :
21922: LD_ADDR_OWVAR 42
21926: PUSH
21927: LD_INT 2
21929: ST_TO_ADDR
21930: GO 22330
21932: LD_INT 15
21934: DOUBLE
21935: EQUAL
21936: IFTRUE 21940
21938: GO 21951
21940: POP
// bc_type := b_factory ; 16 :
21941: LD_ADDR_OWVAR 42
21945: PUSH
21946: LD_INT 3
21948: ST_TO_ADDR
21949: GO 22330
21951: LD_INT 16
21953: DOUBLE
21954: EQUAL
21955: IFTRUE 21959
21957: GO 21970
21959: POP
// bc_type := b_ext_gun ; 17 :
21960: LD_ADDR_OWVAR 42
21964: PUSH
21965: LD_INT 17
21967: ST_TO_ADDR
21968: GO 22330
21970: LD_INT 17
21972: DOUBLE
21973: EQUAL
21974: IFTRUE 21978
21976: GO 22006
21978: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21979: LD_ADDR_OWVAR 42
21983: PUSH
21984: LD_INT 19
21986: PUSH
21987: LD_INT 23
21989: PUSH
21990: LD_INT 19
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: LIST
21997: PUSH
21998: LD_VAR 0 1
22002: ARRAY
22003: ST_TO_ADDR
22004: GO 22330
22006: LD_INT 18
22008: DOUBLE
22009: EQUAL
22010: IFTRUE 22014
22012: GO 22025
22014: POP
// bc_type := b_ext_radar ; 19 :
22015: LD_ADDR_OWVAR 42
22019: PUSH
22020: LD_INT 20
22022: ST_TO_ADDR
22023: GO 22330
22025: LD_INT 19
22027: DOUBLE
22028: EQUAL
22029: IFTRUE 22033
22031: GO 22044
22033: POP
// bc_type := b_ext_radio ; 20 :
22034: LD_ADDR_OWVAR 42
22038: PUSH
22039: LD_INT 22
22041: ST_TO_ADDR
22042: GO 22330
22044: LD_INT 20
22046: DOUBLE
22047: EQUAL
22048: IFTRUE 22052
22050: GO 22063
22052: POP
// bc_type := b_ext_siberium ; 21 :
22053: LD_ADDR_OWVAR 42
22057: PUSH
22058: LD_INT 21
22060: ST_TO_ADDR
22061: GO 22330
22063: LD_INT 21
22065: DOUBLE
22066: EQUAL
22067: IFTRUE 22071
22069: GO 22082
22071: POP
// bc_type := b_ext_computer ; 22 :
22072: LD_ADDR_OWVAR 42
22076: PUSH
22077: LD_INT 24
22079: ST_TO_ADDR
22080: GO 22330
22082: LD_INT 22
22084: DOUBLE
22085: EQUAL
22086: IFTRUE 22090
22088: GO 22101
22090: POP
// bc_type := b_ext_track ; 23 :
22091: LD_ADDR_OWVAR 42
22095: PUSH
22096: LD_INT 16
22098: ST_TO_ADDR
22099: GO 22330
22101: LD_INT 23
22103: DOUBLE
22104: EQUAL
22105: IFTRUE 22109
22107: GO 22120
22109: POP
// bc_type := b_ext_laser ; 24 :
22110: LD_ADDR_OWVAR 42
22114: PUSH
22115: LD_INT 25
22117: ST_TO_ADDR
22118: GO 22330
22120: LD_INT 24
22122: DOUBLE
22123: EQUAL
22124: IFTRUE 22128
22126: GO 22139
22128: POP
// bc_type := b_control_tower ; 25 :
22129: LD_ADDR_OWVAR 42
22133: PUSH
22134: LD_INT 36
22136: ST_TO_ADDR
22137: GO 22330
22139: LD_INT 25
22141: DOUBLE
22142: EQUAL
22143: IFTRUE 22147
22145: GO 22158
22147: POP
// bc_type := b_breastwork ; 26 :
22148: LD_ADDR_OWVAR 42
22152: PUSH
22153: LD_INT 31
22155: ST_TO_ADDR
22156: GO 22330
22158: LD_INT 26
22160: DOUBLE
22161: EQUAL
22162: IFTRUE 22166
22164: GO 22177
22166: POP
// bc_type := b_bunker ; 27 :
22167: LD_ADDR_OWVAR 42
22171: PUSH
22172: LD_INT 32
22174: ST_TO_ADDR
22175: GO 22330
22177: LD_INT 27
22179: DOUBLE
22180: EQUAL
22181: IFTRUE 22185
22183: GO 22196
22185: POP
// bc_type := b_turret ; 28 :
22186: LD_ADDR_OWVAR 42
22190: PUSH
22191: LD_INT 33
22193: ST_TO_ADDR
22194: GO 22330
22196: LD_INT 28
22198: DOUBLE
22199: EQUAL
22200: IFTRUE 22204
22202: GO 22215
22204: POP
// bc_type := b_armoury ; 29 :
22205: LD_ADDR_OWVAR 42
22209: PUSH
22210: LD_INT 4
22212: ST_TO_ADDR
22213: GO 22330
22215: LD_INT 29
22217: DOUBLE
22218: EQUAL
22219: IFTRUE 22223
22221: GO 22234
22223: POP
// bc_type := b_barracks ; 30 :
22224: LD_ADDR_OWVAR 42
22228: PUSH
22229: LD_INT 5
22231: ST_TO_ADDR
22232: GO 22330
22234: LD_INT 30
22236: DOUBLE
22237: EQUAL
22238: IFTRUE 22242
22240: GO 22253
22242: POP
// bc_type := b_solar_power ; 31 :
22243: LD_ADDR_OWVAR 42
22247: PUSH
22248: LD_INT 27
22250: ST_TO_ADDR
22251: GO 22330
22253: LD_INT 31
22255: DOUBLE
22256: EQUAL
22257: IFTRUE 22261
22259: GO 22272
22261: POP
// bc_type := b_oil_power ; 32 :
22262: LD_ADDR_OWVAR 42
22266: PUSH
22267: LD_INT 26
22269: ST_TO_ADDR
22270: GO 22330
22272: LD_INT 32
22274: DOUBLE
22275: EQUAL
22276: IFTRUE 22280
22278: GO 22291
22280: POP
// bc_type := b_siberite_power ; 33 :
22281: LD_ADDR_OWVAR 42
22285: PUSH
22286: LD_INT 28
22288: ST_TO_ADDR
22289: GO 22330
22291: LD_INT 33
22293: DOUBLE
22294: EQUAL
22295: IFTRUE 22299
22297: GO 22310
22299: POP
// bc_type := b_oil_mine ; 34 :
22300: LD_ADDR_OWVAR 42
22304: PUSH
22305: LD_INT 29
22307: ST_TO_ADDR
22308: GO 22330
22310: LD_INT 34
22312: DOUBLE
22313: EQUAL
22314: IFTRUE 22318
22316: GO 22329
22318: POP
// bc_type := b_siberite_mine ; end ;
22319: LD_ADDR_OWVAR 42
22323: PUSH
22324: LD_INT 30
22326: ST_TO_ADDR
22327: GO 22330
22329: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22330: LD_ADDR_VAR 0 8
22334: PUSH
22335: LD_VAR 0 5
22339: PPUSH
22340: LD_VAR 0 6
22344: PPUSH
22345: LD_VAR 0 3
22349: PPUSH
22350: CALL_OW 47
22354: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22355: LD_OWVAR 42
22359: PUSH
22360: LD_INT 32
22362: PUSH
22363: LD_INT 33
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: IN
22370: IFFALSE 22386
// PlaceWeaponTurret ( b , weapon ) ;
22372: LD_VAR 0 8
22376: PPUSH
22377: LD_VAR 0 4
22381: PPUSH
22382: CALL_OW 431
// end ;
22386: LD_VAR 0 7
22390: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22391: LD_INT 0
22393: PPUSH
22394: PPUSH
22395: PPUSH
22396: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22397: LD_ADDR_VAR 0 4
22401: PUSH
22402: LD_INT 22
22404: PUSH
22405: LD_OWVAR 2
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 2
22416: PUSH
22417: LD_INT 30
22419: PUSH
22420: LD_INT 0
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 30
22429: PUSH
22430: LD_INT 1
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: LIST
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PPUSH
22446: CALL_OW 69
22450: ST_TO_ADDR
// if not tmp then
22451: LD_VAR 0 4
22455: NOT
22456: IFFALSE 22460
// exit ;
22458: GO 22519
// for i in tmp do
22460: LD_ADDR_VAR 0 2
22464: PUSH
22465: LD_VAR 0 4
22469: PUSH
22470: FOR_IN
22471: IFFALSE 22517
// for j = 1 to 3 do
22473: LD_ADDR_VAR 0 3
22477: PUSH
22478: DOUBLE
22479: LD_INT 1
22481: DEC
22482: ST_TO_ADDR
22483: LD_INT 3
22485: PUSH
22486: FOR_TO
22487: IFFALSE 22513
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22489: LD_VAR 0 2
22493: PPUSH
22494: CALL_OW 274
22498: PPUSH
22499: LD_VAR 0 3
22503: PPUSH
22504: LD_INT 99999
22506: PPUSH
22507: CALL_OW 277
22511: GO 22486
22513: POP
22514: POP
22515: GO 22470
22517: POP
22518: POP
// end ;
22519: LD_VAR 0 1
22523: RET
// export function hHackSetLevel10 ; var i , j ; begin
22524: LD_INT 0
22526: PPUSH
22527: PPUSH
22528: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22529: LD_ADDR_VAR 0 2
22533: PUSH
22534: LD_INT 21
22536: PUSH
22537: LD_INT 1
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PPUSH
22544: CALL_OW 69
22548: PUSH
22549: FOR_IN
22550: IFFALSE 22602
// if IsSelected ( i ) then
22552: LD_VAR 0 2
22556: PPUSH
22557: CALL_OW 306
22561: IFFALSE 22600
// begin for j := 1 to 4 do
22563: LD_ADDR_VAR 0 3
22567: PUSH
22568: DOUBLE
22569: LD_INT 1
22571: DEC
22572: ST_TO_ADDR
22573: LD_INT 4
22575: PUSH
22576: FOR_TO
22577: IFFALSE 22598
// SetSkill ( i , j , 10 ) ;
22579: LD_VAR 0 2
22583: PPUSH
22584: LD_VAR 0 3
22588: PPUSH
22589: LD_INT 10
22591: PPUSH
22592: CALL_OW 237
22596: GO 22576
22598: POP
22599: POP
// end ;
22600: GO 22549
22602: POP
22603: POP
// end ;
22604: LD_VAR 0 1
22608: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22609: LD_INT 0
22611: PPUSH
22612: PPUSH
22613: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22614: LD_ADDR_VAR 0 2
22618: PUSH
22619: LD_INT 22
22621: PUSH
22622: LD_OWVAR 2
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 21
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PPUSH
22645: CALL_OW 69
22649: PUSH
22650: FOR_IN
22651: IFFALSE 22692
// begin for j := 1 to 4 do
22653: LD_ADDR_VAR 0 3
22657: PUSH
22658: DOUBLE
22659: LD_INT 1
22661: DEC
22662: ST_TO_ADDR
22663: LD_INT 4
22665: PUSH
22666: FOR_TO
22667: IFFALSE 22688
// SetSkill ( i , j , 10 ) ;
22669: LD_VAR 0 2
22673: PPUSH
22674: LD_VAR 0 3
22678: PPUSH
22679: LD_INT 10
22681: PPUSH
22682: CALL_OW 237
22686: GO 22666
22688: POP
22689: POP
// end ;
22690: GO 22650
22692: POP
22693: POP
// end ;
22694: LD_VAR 0 1
22698: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22699: LD_INT 0
22701: PPUSH
// uc_side := your_side ;
22702: LD_ADDR_OWVAR 20
22706: PUSH
22707: LD_OWVAR 2
22711: ST_TO_ADDR
// uc_nation := nation ;
22712: LD_ADDR_OWVAR 21
22716: PUSH
22717: LD_VAR 0 1
22721: ST_TO_ADDR
// InitHc ;
22722: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22726: LD_INT 0
22728: PPUSH
22729: LD_VAR 0 2
22733: PPUSH
22734: LD_VAR 0 3
22738: PPUSH
22739: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22743: LD_VAR 0 4
22747: PPUSH
22748: LD_VAR 0 5
22752: PPUSH
22753: CALL_OW 428
22757: PUSH
22758: LD_INT 0
22760: EQUAL
22761: IFFALSE 22785
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22763: CALL_OW 44
22767: PPUSH
22768: LD_VAR 0 4
22772: PPUSH
22773: LD_VAR 0 5
22777: PPUSH
22778: LD_INT 1
22780: PPUSH
22781: CALL_OW 48
// end ;
22785: LD_VAR 0 6
22789: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22790: LD_INT 0
22792: PPUSH
22793: PPUSH
// uc_side := your_side ;
22794: LD_ADDR_OWVAR 20
22798: PUSH
22799: LD_OWVAR 2
22803: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22804: LD_VAR 0 1
22808: PUSH
22809: LD_INT 1
22811: PUSH
22812: LD_INT 2
22814: PUSH
22815: LD_INT 3
22817: PUSH
22818: LD_INT 4
22820: PUSH
22821: LD_INT 5
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: IN
22831: IFFALSE 22843
// uc_nation := nation_american else
22833: LD_ADDR_OWVAR 21
22837: PUSH
22838: LD_INT 1
22840: ST_TO_ADDR
22841: GO 22886
// if chassis in [ 11 , 12 , 13 , 14 ] then
22843: LD_VAR 0 1
22847: PUSH
22848: LD_INT 11
22850: PUSH
22851: LD_INT 12
22853: PUSH
22854: LD_INT 13
22856: PUSH
22857: LD_INT 14
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: IN
22866: IFFALSE 22878
// uc_nation := nation_arabian else
22868: LD_ADDR_OWVAR 21
22872: PUSH
22873: LD_INT 2
22875: ST_TO_ADDR
22876: GO 22886
// uc_nation := nation_russian ;
22878: LD_ADDR_OWVAR 21
22882: PUSH
22883: LD_INT 3
22885: ST_TO_ADDR
// vc_chassis := chassis ;
22886: LD_ADDR_OWVAR 37
22890: PUSH
22891: LD_VAR 0 1
22895: ST_TO_ADDR
// vc_engine := engine ;
22896: LD_ADDR_OWVAR 39
22900: PUSH
22901: LD_VAR 0 2
22905: ST_TO_ADDR
// vc_control := control ;
22906: LD_ADDR_OWVAR 38
22910: PUSH
22911: LD_VAR 0 3
22915: ST_TO_ADDR
// vc_weapon := weapon ;
22916: LD_ADDR_OWVAR 40
22920: PUSH
22921: LD_VAR 0 4
22925: ST_TO_ADDR
// un := CreateVehicle ;
22926: LD_ADDR_VAR 0 8
22930: PUSH
22931: CALL_OW 45
22935: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22936: LD_VAR 0 8
22940: PPUSH
22941: LD_INT 0
22943: PPUSH
22944: LD_INT 5
22946: PPUSH
22947: CALL_OW 12
22951: PPUSH
22952: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22956: LD_VAR 0 8
22960: PPUSH
22961: LD_VAR 0 5
22965: PPUSH
22966: LD_VAR 0 6
22970: PPUSH
22971: LD_INT 1
22973: PPUSH
22974: CALL_OW 48
// end ;
22978: LD_VAR 0 7
22982: RET
// export hInvincible ; every 1 do
22983: GO 22985
22985: DISABLE
// hInvincible := [ ] ;
22986: LD_ADDR_EXP 101
22990: PUSH
22991: EMPTY
22992: ST_TO_ADDR
22993: END
// every 10 do var i ;
22994: GO 22996
22996: DISABLE
22997: LD_INT 0
22999: PPUSH
// begin enable ;
23000: ENABLE
// if not hInvincible then
23001: LD_EXP 101
23005: NOT
23006: IFFALSE 23010
// exit ;
23008: GO 23054
// for i in hInvincible do
23010: LD_ADDR_VAR 0 1
23014: PUSH
23015: LD_EXP 101
23019: PUSH
23020: FOR_IN
23021: IFFALSE 23052
// if GetLives ( i ) < 1000 then
23023: LD_VAR 0 1
23027: PPUSH
23028: CALL_OW 256
23032: PUSH
23033: LD_INT 1000
23035: LESS
23036: IFFALSE 23050
// SetLives ( i , 1000 ) ;
23038: LD_VAR 0 1
23042: PPUSH
23043: LD_INT 1000
23045: PPUSH
23046: CALL_OW 234
23050: GO 23020
23052: POP
23053: POP
// end ;
23054: PPOPN 1
23056: END
// export function hHackInvincible ; var i ; begin
23057: LD_INT 0
23059: PPUSH
23060: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23061: LD_ADDR_VAR 0 2
23065: PUSH
23066: LD_INT 2
23068: PUSH
23069: LD_INT 21
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 21
23081: PUSH
23082: LD_INT 2
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: PPUSH
23094: CALL_OW 69
23098: PUSH
23099: FOR_IN
23100: IFFALSE 23161
// if IsSelected ( i ) then
23102: LD_VAR 0 2
23106: PPUSH
23107: CALL_OW 306
23111: IFFALSE 23159
// begin if i in hInvincible then
23113: LD_VAR 0 2
23117: PUSH
23118: LD_EXP 101
23122: IN
23123: IFFALSE 23143
// hInvincible := hInvincible diff i else
23125: LD_ADDR_EXP 101
23129: PUSH
23130: LD_EXP 101
23134: PUSH
23135: LD_VAR 0 2
23139: DIFF
23140: ST_TO_ADDR
23141: GO 23159
// hInvincible := hInvincible union i ;
23143: LD_ADDR_EXP 101
23147: PUSH
23148: LD_EXP 101
23152: PUSH
23153: LD_VAR 0 2
23157: UNION
23158: ST_TO_ADDR
// end ;
23159: GO 23099
23161: POP
23162: POP
// end ;
23163: LD_VAR 0 1
23167: RET
// export function hHackInvisible ; var i , j ; begin
23168: LD_INT 0
23170: PPUSH
23171: PPUSH
23172: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23173: LD_ADDR_VAR 0 2
23177: PUSH
23178: LD_INT 21
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PPUSH
23188: CALL_OW 69
23192: PUSH
23193: FOR_IN
23194: IFFALSE 23218
// if IsSelected ( i ) then
23196: LD_VAR 0 2
23200: PPUSH
23201: CALL_OW 306
23205: IFFALSE 23216
// ComForceInvisible ( i ) ;
23207: LD_VAR 0 2
23211: PPUSH
23212: CALL_OW 496
23216: GO 23193
23218: POP
23219: POP
// end ;
23220: LD_VAR 0 1
23224: RET
// export function hHackChangeYourSide ; begin
23225: LD_INT 0
23227: PPUSH
// if your_side = 8 then
23228: LD_OWVAR 2
23232: PUSH
23233: LD_INT 8
23235: EQUAL
23236: IFFALSE 23248
// your_side := 0 else
23238: LD_ADDR_OWVAR 2
23242: PUSH
23243: LD_INT 0
23245: ST_TO_ADDR
23246: GO 23262
// your_side := your_side + 1 ;
23248: LD_ADDR_OWVAR 2
23252: PUSH
23253: LD_OWVAR 2
23257: PUSH
23258: LD_INT 1
23260: PLUS
23261: ST_TO_ADDR
// end ;
23262: LD_VAR 0 1
23266: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23267: LD_INT 0
23269: PPUSH
23270: PPUSH
23271: PPUSH
// for i in all_units do
23272: LD_ADDR_VAR 0 2
23276: PUSH
23277: LD_OWVAR 3
23281: PUSH
23282: FOR_IN
23283: IFFALSE 23361
// if IsSelected ( i ) then
23285: LD_VAR 0 2
23289: PPUSH
23290: CALL_OW 306
23294: IFFALSE 23359
// begin j := GetSide ( i ) ;
23296: LD_ADDR_VAR 0 3
23300: PUSH
23301: LD_VAR 0 2
23305: PPUSH
23306: CALL_OW 255
23310: ST_TO_ADDR
// if j = 8 then
23311: LD_VAR 0 3
23315: PUSH
23316: LD_INT 8
23318: EQUAL
23319: IFFALSE 23331
// j := 0 else
23321: LD_ADDR_VAR 0 3
23325: PUSH
23326: LD_INT 0
23328: ST_TO_ADDR
23329: GO 23345
// j := j + 1 ;
23331: LD_ADDR_VAR 0 3
23335: PUSH
23336: LD_VAR 0 3
23340: PUSH
23341: LD_INT 1
23343: PLUS
23344: ST_TO_ADDR
// SetSide ( i , j ) ;
23345: LD_VAR 0 2
23349: PPUSH
23350: LD_VAR 0 3
23354: PPUSH
23355: CALL_OW 235
// end ;
23359: GO 23282
23361: POP
23362: POP
// end ;
23363: LD_VAR 0 1
23367: RET
// export function hHackFog ; begin
23368: LD_INT 0
23370: PPUSH
// FogOff ( true ) ;
23371: LD_INT 1
23373: PPUSH
23374: CALL_OW 344
// end ;
23378: LD_VAR 0 1
23382: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23383: LD_INT 0
23385: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23386: LD_VAR 0 1
23390: PPUSH
23391: LD_VAR 0 2
23395: PPUSH
23396: LD_VAR 0 3
23400: PPUSH
23401: LD_INT 1
23403: PPUSH
23404: LD_INT 1
23406: PPUSH
23407: CALL_OW 483
// CenterOnXY ( x , y ) ;
23411: LD_VAR 0 2
23415: PPUSH
23416: LD_VAR 0 3
23420: PPUSH
23421: CALL_OW 84
// end ; end_of_file
23425: LD_VAR 0 4
23429: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23430: LD_INT 0
23432: PPUSH
23433: PPUSH
23434: PPUSH
23435: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23436: LD_VAR 0 1
23440: PPUSH
23441: CALL_OW 264
23445: PUSH
23446: LD_EXP 29
23450: EQUAL
23451: IFFALSE 23523
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23453: LD_INT 68
23455: PPUSH
23456: LD_VAR 0 1
23460: PPUSH
23461: CALL_OW 255
23465: PPUSH
23466: CALL_OW 321
23470: PUSH
23471: LD_INT 2
23473: EQUAL
23474: IFFALSE 23486
// eff := 70 else
23476: LD_ADDR_VAR 0 4
23480: PUSH
23481: LD_INT 70
23483: ST_TO_ADDR
23484: GO 23494
// eff := 30 ;
23486: LD_ADDR_VAR 0 4
23490: PUSH
23491: LD_INT 30
23493: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23494: LD_VAR 0 1
23498: PPUSH
23499: CALL_OW 250
23503: PPUSH
23504: LD_VAR 0 1
23508: PPUSH
23509: CALL_OW 251
23513: PPUSH
23514: LD_VAR 0 4
23518: PPUSH
23519: CALL_OW 495
// end ; end ;
23523: LD_VAR 0 2
23527: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23528: LD_INT 0
23530: PPUSH
// end ;
23531: LD_VAR 0 4
23535: RET
// export function SOS_Command ( cmd ) ; begin
23536: LD_INT 0
23538: PPUSH
// end ;
23539: LD_VAR 0 2
23543: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23544: LD_INT 0
23546: PPUSH
// end ;
23547: LD_VAR 0 6
23551: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23552: LD_INT 0
23554: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23555: LD_VAR 0 1
23559: PUSH
23560: LD_INT 250
23562: EQUAL
23563: PUSH
23564: LD_VAR 0 2
23568: PPUSH
23569: CALL_OW 264
23573: PUSH
23574: LD_EXP 32
23578: EQUAL
23579: AND
23580: IFFALSE 23601
// MinerPlaceMine ( unit , x , y ) ;
23582: LD_VAR 0 2
23586: PPUSH
23587: LD_VAR 0 4
23591: PPUSH
23592: LD_VAR 0 5
23596: PPUSH
23597: CALL 25950 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23601: LD_VAR 0 1
23605: PUSH
23606: LD_INT 251
23608: EQUAL
23609: PUSH
23610: LD_VAR 0 2
23614: PPUSH
23615: CALL_OW 264
23619: PUSH
23620: LD_EXP 32
23624: EQUAL
23625: AND
23626: IFFALSE 23647
// MinerDetonateMine ( unit , x , y ) ;
23628: LD_VAR 0 2
23632: PPUSH
23633: LD_VAR 0 4
23637: PPUSH
23638: LD_VAR 0 5
23642: PPUSH
23643: CALL 26227 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23647: LD_VAR 0 1
23651: PUSH
23652: LD_INT 252
23654: EQUAL
23655: PUSH
23656: LD_VAR 0 2
23660: PPUSH
23661: CALL_OW 264
23665: PUSH
23666: LD_EXP 32
23670: EQUAL
23671: AND
23672: IFFALSE 23693
// MinerCreateMinefield ( unit , x , y ) ;
23674: LD_VAR 0 2
23678: PPUSH
23679: LD_VAR 0 4
23683: PPUSH
23684: LD_VAR 0 5
23688: PPUSH
23689: CALL 26644 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23693: LD_VAR 0 1
23697: PUSH
23698: LD_INT 253
23700: EQUAL
23701: PUSH
23702: LD_VAR 0 2
23706: PPUSH
23707: CALL_OW 257
23711: PUSH
23712: LD_INT 5
23714: EQUAL
23715: AND
23716: IFFALSE 23737
// ComBinocular ( unit , x , y ) ;
23718: LD_VAR 0 2
23722: PPUSH
23723: LD_VAR 0 4
23727: PPUSH
23728: LD_VAR 0 5
23732: PPUSH
23733: CALL 27015 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23737: LD_VAR 0 1
23741: PUSH
23742: LD_INT 254
23744: EQUAL
23745: PUSH
23746: LD_VAR 0 2
23750: PPUSH
23751: CALL_OW 264
23755: PUSH
23756: LD_EXP 27
23760: EQUAL
23761: AND
23762: PUSH
23763: LD_VAR 0 3
23767: PPUSH
23768: CALL_OW 263
23772: PUSH
23773: LD_INT 3
23775: EQUAL
23776: AND
23777: IFFALSE 23793
// HackDestroyVehicle ( unit , selectedUnit ) ;
23779: LD_VAR 0 2
23783: PPUSH
23784: LD_VAR 0 3
23788: PPUSH
23789: CALL 25310 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23793: LD_VAR 0 1
23797: PUSH
23798: LD_INT 255
23800: EQUAL
23801: PUSH
23802: LD_VAR 0 2
23806: PPUSH
23807: CALL_OW 264
23811: PUSH
23812: LD_INT 14
23814: PUSH
23815: LD_INT 53
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: IN
23822: AND
23823: PUSH
23824: LD_VAR 0 4
23828: PPUSH
23829: LD_VAR 0 5
23833: PPUSH
23834: CALL_OW 488
23838: AND
23839: IFFALSE 23863
// CutTreeXYR ( unit , x , y , 12 ) ;
23841: LD_VAR 0 2
23845: PPUSH
23846: LD_VAR 0 4
23850: PPUSH
23851: LD_VAR 0 5
23855: PPUSH
23856: LD_INT 12
23858: PPUSH
23859: CALL 23876 0 4
// end ;
23863: LD_VAR 0 6
23867: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23868: LD_INT 0
23870: PPUSH
// end ;
23871: LD_VAR 0 4
23875: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23876: LD_INT 0
23878: PPUSH
23879: PPUSH
23880: PPUSH
23881: PPUSH
23882: PPUSH
23883: PPUSH
23884: PPUSH
23885: PPUSH
23886: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23887: LD_VAR 0 1
23891: NOT
23892: PUSH
23893: LD_VAR 0 2
23897: PPUSH
23898: LD_VAR 0 3
23902: PPUSH
23903: CALL_OW 488
23907: NOT
23908: OR
23909: PUSH
23910: LD_VAR 0 4
23914: NOT
23915: OR
23916: IFFALSE 23920
// exit ;
23918: GO 24260
// list := [ ] ;
23920: LD_ADDR_VAR 0 13
23924: PUSH
23925: EMPTY
23926: ST_TO_ADDR
// if x - r < 0 then
23927: LD_VAR 0 2
23931: PUSH
23932: LD_VAR 0 4
23936: MINUS
23937: PUSH
23938: LD_INT 0
23940: LESS
23941: IFFALSE 23953
// min_x := 0 else
23943: LD_ADDR_VAR 0 7
23947: PUSH
23948: LD_INT 0
23950: ST_TO_ADDR
23951: GO 23969
// min_x := x - r ;
23953: LD_ADDR_VAR 0 7
23957: PUSH
23958: LD_VAR 0 2
23962: PUSH
23963: LD_VAR 0 4
23967: MINUS
23968: ST_TO_ADDR
// if y - r < 0 then
23969: LD_VAR 0 3
23973: PUSH
23974: LD_VAR 0 4
23978: MINUS
23979: PUSH
23980: LD_INT 0
23982: LESS
23983: IFFALSE 23995
// min_y := 0 else
23985: LD_ADDR_VAR 0 8
23989: PUSH
23990: LD_INT 0
23992: ST_TO_ADDR
23993: GO 24011
// min_y := y - r ;
23995: LD_ADDR_VAR 0 8
23999: PUSH
24000: LD_VAR 0 3
24004: PUSH
24005: LD_VAR 0 4
24009: MINUS
24010: ST_TO_ADDR
// max_x := x + r ;
24011: LD_ADDR_VAR 0 9
24015: PUSH
24016: LD_VAR 0 2
24020: PUSH
24021: LD_VAR 0 4
24025: PLUS
24026: ST_TO_ADDR
// max_y := y + r ;
24027: LD_ADDR_VAR 0 10
24031: PUSH
24032: LD_VAR 0 3
24036: PUSH
24037: LD_VAR 0 4
24041: PLUS
24042: ST_TO_ADDR
// for _x = min_x to max_x do
24043: LD_ADDR_VAR 0 11
24047: PUSH
24048: DOUBLE
24049: LD_VAR 0 7
24053: DEC
24054: ST_TO_ADDR
24055: LD_VAR 0 9
24059: PUSH
24060: FOR_TO
24061: IFFALSE 24178
// for _y = min_y to max_y do
24063: LD_ADDR_VAR 0 12
24067: PUSH
24068: DOUBLE
24069: LD_VAR 0 8
24073: DEC
24074: ST_TO_ADDR
24075: LD_VAR 0 10
24079: PUSH
24080: FOR_TO
24081: IFFALSE 24174
// begin if not ValidHex ( _x , _y ) then
24083: LD_VAR 0 11
24087: PPUSH
24088: LD_VAR 0 12
24092: PPUSH
24093: CALL_OW 488
24097: NOT
24098: IFFALSE 24102
// continue ;
24100: GO 24080
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24102: LD_VAR 0 11
24106: PPUSH
24107: LD_VAR 0 12
24111: PPUSH
24112: CALL_OW 351
24116: PUSH
24117: LD_VAR 0 11
24121: PPUSH
24122: LD_VAR 0 12
24126: PPUSH
24127: CALL_OW 554
24131: AND
24132: IFFALSE 24172
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24134: LD_ADDR_VAR 0 13
24138: PUSH
24139: LD_VAR 0 13
24143: PPUSH
24144: LD_VAR 0 13
24148: PUSH
24149: LD_INT 1
24151: PLUS
24152: PPUSH
24153: LD_VAR 0 11
24157: PUSH
24158: LD_VAR 0 12
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PPUSH
24167: CALL_OW 2
24171: ST_TO_ADDR
// end ;
24172: GO 24080
24174: POP
24175: POP
24176: GO 24060
24178: POP
24179: POP
// if not list then
24180: LD_VAR 0 13
24184: NOT
24185: IFFALSE 24189
// exit ;
24187: GO 24260
// for i in list do
24189: LD_ADDR_VAR 0 6
24193: PUSH
24194: LD_VAR 0 13
24198: PUSH
24199: FOR_IN
24200: IFFALSE 24258
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24202: LD_VAR 0 1
24206: PPUSH
24207: LD_STRING M
24209: PUSH
24210: LD_VAR 0 6
24214: PUSH
24215: LD_INT 1
24217: ARRAY
24218: PUSH
24219: LD_VAR 0 6
24223: PUSH
24224: LD_INT 2
24226: ARRAY
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: PUSH
24249: EMPTY
24250: LIST
24251: PPUSH
24252: CALL_OW 447
24256: GO 24199
24258: POP
24259: POP
// end ;
24260: LD_VAR 0 5
24264: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24265: LD_EXP 104
24269: NOT
24270: IFFALSE 24320
24272: GO 24274
24274: DISABLE
// begin initHack := true ;
24275: LD_ADDR_EXP 104
24279: PUSH
24280: LD_INT 1
24282: ST_TO_ADDR
// hackTanks := [ ] ;
24283: LD_ADDR_EXP 105
24287: PUSH
24288: EMPTY
24289: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24290: LD_ADDR_EXP 106
24294: PUSH
24295: EMPTY
24296: ST_TO_ADDR
// hackLimit := 3 ;
24297: LD_ADDR_EXP 107
24301: PUSH
24302: LD_INT 3
24304: ST_TO_ADDR
// hackDist := 12 ;
24305: LD_ADDR_EXP 108
24309: PUSH
24310: LD_INT 12
24312: ST_TO_ADDR
// hackCounter := [ ] ;
24313: LD_ADDR_EXP 109
24317: PUSH
24318: EMPTY
24319: ST_TO_ADDR
// end ;
24320: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24321: LD_EXP 104
24325: PUSH
24326: LD_INT 34
24328: PUSH
24329: LD_EXP 27
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PPUSH
24338: CALL_OW 69
24342: AND
24343: IFFALSE 24598
24345: GO 24347
24347: DISABLE
24348: LD_INT 0
24350: PPUSH
24351: PPUSH
// begin enable ;
24352: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24353: LD_ADDR_VAR 0 1
24357: PUSH
24358: LD_INT 34
24360: PUSH
24361: LD_EXP 27
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PPUSH
24370: CALL_OW 69
24374: PUSH
24375: FOR_IN
24376: IFFALSE 24596
// begin if not i in hackTanks then
24378: LD_VAR 0 1
24382: PUSH
24383: LD_EXP 105
24387: IN
24388: NOT
24389: IFFALSE 24472
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24391: LD_ADDR_EXP 105
24395: PUSH
24396: LD_EXP 105
24400: PPUSH
24401: LD_EXP 105
24405: PUSH
24406: LD_INT 1
24408: PLUS
24409: PPUSH
24410: LD_VAR 0 1
24414: PPUSH
24415: CALL_OW 1
24419: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24420: LD_ADDR_EXP 106
24424: PUSH
24425: LD_EXP 106
24429: PPUSH
24430: LD_EXP 106
24434: PUSH
24435: LD_INT 1
24437: PLUS
24438: PPUSH
24439: EMPTY
24440: PPUSH
24441: CALL_OW 1
24445: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24446: LD_ADDR_EXP 109
24450: PUSH
24451: LD_EXP 109
24455: PPUSH
24456: LD_EXP 109
24460: PUSH
24461: LD_INT 1
24463: PLUS
24464: PPUSH
24465: EMPTY
24466: PPUSH
24467: CALL_OW 1
24471: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24472: LD_VAR 0 1
24476: PPUSH
24477: CALL_OW 302
24481: NOT
24482: IFFALSE 24495
// begin HackUnlinkAll ( i ) ;
24484: LD_VAR 0 1
24488: PPUSH
24489: CALL 24601 0 1
// continue ;
24493: GO 24375
// end ; HackCheckCapturedStatus ( i ) ;
24495: LD_VAR 0 1
24499: PPUSH
24500: CALL 25044 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24504: LD_ADDR_VAR 0 2
24508: PUSH
24509: LD_INT 81
24511: PUSH
24512: LD_VAR 0 1
24516: PPUSH
24517: CALL_OW 255
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 33
24528: PUSH
24529: LD_INT 3
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 91
24538: PUSH
24539: LD_VAR 0 1
24543: PUSH
24544: LD_EXP 108
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 50
24556: PUSH
24557: EMPTY
24558: LIST
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: PPUSH
24566: CALL_OW 69
24570: ST_TO_ADDR
// if not tmp then
24571: LD_VAR 0 2
24575: NOT
24576: IFFALSE 24580
// continue ;
24578: GO 24375
// HackLink ( i , tmp ) ;
24580: LD_VAR 0 1
24584: PPUSH
24585: LD_VAR 0 2
24589: PPUSH
24590: CALL 24737 0 2
// end ;
24594: GO 24375
24596: POP
24597: POP
// end ;
24598: PPOPN 2
24600: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24601: LD_INT 0
24603: PPUSH
24604: PPUSH
24605: PPUSH
// if not hack in hackTanks then
24606: LD_VAR 0 1
24610: PUSH
24611: LD_EXP 105
24615: IN
24616: NOT
24617: IFFALSE 24621
// exit ;
24619: GO 24732
// index := GetElementIndex ( hackTanks , hack ) ;
24621: LD_ADDR_VAR 0 4
24625: PUSH
24626: LD_EXP 105
24630: PPUSH
24631: LD_VAR 0 1
24635: PPUSH
24636: CALL 32206 0 2
24640: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24641: LD_EXP 106
24645: PUSH
24646: LD_VAR 0 4
24650: ARRAY
24651: IFFALSE 24732
// begin for i in hackTanksCaptured [ index ] do
24653: LD_ADDR_VAR 0 3
24657: PUSH
24658: LD_EXP 106
24662: PUSH
24663: LD_VAR 0 4
24667: ARRAY
24668: PUSH
24669: FOR_IN
24670: IFFALSE 24696
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24672: LD_VAR 0 3
24676: PUSH
24677: LD_INT 1
24679: ARRAY
24680: PPUSH
24681: LD_VAR 0 3
24685: PUSH
24686: LD_INT 2
24688: ARRAY
24689: PPUSH
24690: CALL_OW 235
24694: GO 24669
24696: POP
24697: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24698: LD_ADDR_EXP 106
24702: PUSH
24703: LD_EXP 106
24707: PPUSH
24708: LD_VAR 0 4
24712: PPUSH
24713: EMPTY
24714: PPUSH
24715: CALL_OW 1
24719: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24720: LD_VAR 0 1
24724: PPUSH
24725: LD_INT 0
24727: PPUSH
24728: CALL_OW 505
// end ; end ;
24732: LD_VAR 0 2
24736: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24737: LD_INT 0
24739: PPUSH
24740: PPUSH
24741: PPUSH
// if not hack in hackTanks or not vehicles then
24742: LD_VAR 0 1
24746: PUSH
24747: LD_EXP 105
24751: IN
24752: NOT
24753: PUSH
24754: LD_VAR 0 2
24758: NOT
24759: OR
24760: IFFALSE 24764
// exit ;
24762: GO 25039
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24764: LD_ADDR_VAR 0 2
24768: PUSH
24769: LD_VAR 0 1
24773: PPUSH
24774: LD_VAR 0 2
24778: PPUSH
24779: LD_INT 1
24781: PPUSH
24782: LD_INT 1
24784: PPUSH
24785: CALL 32856 0 4
24789: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24790: LD_ADDR_VAR 0 5
24794: PUSH
24795: LD_EXP 105
24799: PPUSH
24800: LD_VAR 0 1
24804: PPUSH
24805: CALL 32206 0 2
24809: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24810: LD_EXP 106
24814: PUSH
24815: LD_VAR 0 5
24819: ARRAY
24820: PUSH
24821: LD_EXP 107
24825: LESS
24826: IFFALSE 25015
// begin for i := 1 to vehicles do
24828: LD_ADDR_VAR 0 4
24832: PUSH
24833: DOUBLE
24834: LD_INT 1
24836: DEC
24837: ST_TO_ADDR
24838: LD_VAR 0 2
24842: PUSH
24843: FOR_TO
24844: IFFALSE 25013
// begin if hackTanksCaptured [ index ] = hackLimit then
24846: LD_EXP 106
24850: PUSH
24851: LD_VAR 0 5
24855: ARRAY
24856: PUSH
24857: LD_EXP 107
24861: EQUAL
24862: IFFALSE 24866
// break ;
24864: GO 25013
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24866: LD_ADDR_EXP 109
24870: PUSH
24871: LD_EXP 109
24875: PPUSH
24876: LD_VAR 0 5
24880: PPUSH
24881: LD_EXP 109
24885: PUSH
24886: LD_VAR 0 5
24890: ARRAY
24891: PUSH
24892: LD_INT 1
24894: PLUS
24895: PPUSH
24896: CALL_OW 1
24900: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24901: LD_ADDR_EXP 106
24905: PUSH
24906: LD_EXP 106
24910: PPUSH
24911: LD_VAR 0 5
24915: PUSH
24916: LD_EXP 106
24920: PUSH
24921: LD_VAR 0 5
24925: ARRAY
24926: PUSH
24927: LD_INT 1
24929: PLUS
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PPUSH
24935: LD_VAR 0 2
24939: PUSH
24940: LD_VAR 0 4
24944: ARRAY
24945: PUSH
24946: LD_VAR 0 2
24950: PUSH
24951: LD_VAR 0 4
24955: ARRAY
24956: PPUSH
24957: CALL_OW 255
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PPUSH
24966: CALL 32421 0 3
24970: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24971: LD_VAR 0 2
24975: PUSH
24976: LD_VAR 0 4
24980: ARRAY
24981: PPUSH
24982: LD_VAR 0 1
24986: PPUSH
24987: CALL_OW 255
24991: PPUSH
24992: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24996: LD_VAR 0 2
25000: PUSH
25001: LD_VAR 0 4
25005: ARRAY
25006: PPUSH
25007: CALL_OW 141
// end ;
25011: GO 24843
25013: POP
25014: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25015: LD_VAR 0 1
25019: PPUSH
25020: LD_EXP 106
25024: PUSH
25025: LD_VAR 0 5
25029: ARRAY
25030: PUSH
25031: LD_INT 0
25033: PLUS
25034: PPUSH
25035: CALL_OW 505
// end ;
25039: LD_VAR 0 3
25043: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25044: LD_INT 0
25046: PPUSH
25047: PPUSH
25048: PPUSH
25049: PPUSH
// if not hack in hackTanks then
25050: LD_VAR 0 1
25054: PUSH
25055: LD_EXP 105
25059: IN
25060: NOT
25061: IFFALSE 25065
// exit ;
25063: GO 25305
// index := GetElementIndex ( hackTanks , hack ) ;
25065: LD_ADDR_VAR 0 4
25069: PUSH
25070: LD_EXP 105
25074: PPUSH
25075: LD_VAR 0 1
25079: PPUSH
25080: CALL 32206 0 2
25084: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25085: LD_ADDR_VAR 0 3
25089: PUSH
25090: DOUBLE
25091: LD_EXP 106
25095: PUSH
25096: LD_VAR 0 4
25100: ARRAY
25101: INC
25102: ST_TO_ADDR
25103: LD_INT 1
25105: PUSH
25106: FOR_DOWNTO
25107: IFFALSE 25279
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25109: LD_ADDR_VAR 0 5
25113: PUSH
25114: LD_EXP 106
25118: PUSH
25119: LD_VAR 0 4
25123: ARRAY
25124: PUSH
25125: LD_VAR 0 3
25129: ARRAY
25130: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25131: LD_VAR 0 5
25135: PUSH
25136: LD_INT 1
25138: ARRAY
25139: PPUSH
25140: CALL_OW 302
25144: NOT
25145: PUSH
25146: LD_VAR 0 5
25150: PUSH
25151: LD_INT 1
25153: ARRAY
25154: PPUSH
25155: CALL_OW 255
25159: PUSH
25160: LD_VAR 0 1
25164: PPUSH
25165: CALL_OW 255
25169: NONEQUAL
25170: OR
25171: IFFALSE 25277
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25173: LD_VAR 0 5
25177: PUSH
25178: LD_INT 1
25180: ARRAY
25181: PPUSH
25182: CALL_OW 305
25186: PUSH
25187: LD_VAR 0 5
25191: PUSH
25192: LD_INT 1
25194: ARRAY
25195: PPUSH
25196: CALL_OW 255
25200: PUSH
25201: LD_VAR 0 1
25205: PPUSH
25206: CALL_OW 255
25210: EQUAL
25211: AND
25212: IFFALSE 25236
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25214: LD_VAR 0 5
25218: PUSH
25219: LD_INT 1
25221: ARRAY
25222: PPUSH
25223: LD_VAR 0 5
25227: PUSH
25228: LD_INT 2
25230: ARRAY
25231: PPUSH
25232: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25236: LD_ADDR_EXP 106
25240: PUSH
25241: LD_EXP 106
25245: PPUSH
25246: LD_VAR 0 4
25250: PPUSH
25251: LD_EXP 106
25255: PUSH
25256: LD_VAR 0 4
25260: ARRAY
25261: PPUSH
25262: LD_VAR 0 3
25266: PPUSH
25267: CALL_OW 3
25271: PPUSH
25272: CALL_OW 1
25276: ST_TO_ADDR
// end ; end ;
25277: GO 25106
25279: POP
25280: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25281: LD_VAR 0 1
25285: PPUSH
25286: LD_EXP 106
25290: PUSH
25291: LD_VAR 0 4
25295: ARRAY
25296: PUSH
25297: LD_INT 0
25299: PLUS
25300: PPUSH
25301: CALL_OW 505
// end ;
25305: LD_VAR 0 2
25309: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25310: LD_INT 0
25312: PPUSH
25313: PPUSH
25314: PPUSH
25315: PPUSH
// if not hack in hackTanks then
25316: LD_VAR 0 1
25320: PUSH
25321: LD_EXP 105
25325: IN
25326: NOT
25327: IFFALSE 25331
// exit ;
25329: GO 25416
// index := GetElementIndex ( hackTanks , hack ) ;
25331: LD_ADDR_VAR 0 5
25335: PUSH
25336: LD_EXP 105
25340: PPUSH
25341: LD_VAR 0 1
25345: PPUSH
25346: CALL 32206 0 2
25350: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25351: LD_ADDR_VAR 0 4
25355: PUSH
25356: DOUBLE
25357: LD_INT 1
25359: DEC
25360: ST_TO_ADDR
25361: LD_EXP 106
25365: PUSH
25366: LD_VAR 0 5
25370: ARRAY
25371: PUSH
25372: FOR_TO
25373: IFFALSE 25414
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25375: LD_EXP 106
25379: PUSH
25380: LD_VAR 0 5
25384: ARRAY
25385: PUSH
25386: LD_VAR 0 4
25390: ARRAY
25391: PUSH
25392: LD_INT 1
25394: ARRAY
25395: PUSH
25396: LD_VAR 0 2
25400: EQUAL
25401: IFFALSE 25412
// KillUnit ( vehicle ) ;
25403: LD_VAR 0 2
25407: PPUSH
25408: CALL_OW 66
25412: GO 25372
25414: POP
25415: POP
// end ;
25416: LD_VAR 0 3
25420: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25421: LD_EXP 110
25425: NOT
25426: IFFALSE 25461
25428: GO 25430
25430: DISABLE
// begin initMiner := true ;
25431: LD_ADDR_EXP 110
25435: PUSH
25436: LD_INT 1
25438: ST_TO_ADDR
// minersList := [ ] ;
25439: LD_ADDR_EXP 111
25443: PUSH
25444: EMPTY
25445: ST_TO_ADDR
// minerMinesList := [ ] ;
25446: LD_ADDR_EXP 112
25450: PUSH
25451: EMPTY
25452: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25453: LD_ADDR_EXP 113
25457: PUSH
25458: LD_INT 5
25460: ST_TO_ADDR
// end ;
25461: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25462: LD_EXP 110
25466: PUSH
25467: LD_INT 34
25469: PUSH
25470: LD_EXP 32
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PPUSH
25479: CALL_OW 69
25483: AND
25484: IFFALSE 25947
25486: GO 25488
25488: DISABLE
25489: LD_INT 0
25491: PPUSH
25492: PPUSH
25493: PPUSH
25494: PPUSH
// begin enable ;
25495: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25496: LD_ADDR_VAR 0 1
25500: PUSH
25501: LD_INT 34
25503: PUSH
25504: LD_EXP 32
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PPUSH
25513: CALL_OW 69
25517: PUSH
25518: FOR_IN
25519: IFFALSE 25591
// begin if not i in minersList then
25521: LD_VAR 0 1
25525: PUSH
25526: LD_EXP 111
25530: IN
25531: NOT
25532: IFFALSE 25589
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25534: LD_ADDR_EXP 111
25538: PUSH
25539: LD_EXP 111
25543: PPUSH
25544: LD_EXP 111
25548: PUSH
25549: LD_INT 1
25551: PLUS
25552: PPUSH
25553: LD_VAR 0 1
25557: PPUSH
25558: CALL_OW 1
25562: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25563: LD_ADDR_EXP 112
25567: PUSH
25568: LD_EXP 112
25572: PPUSH
25573: LD_EXP 112
25577: PUSH
25578: LD_INT 1
25580: PLUS
25581: PPUSH
25582: EMPTY
25583: PPUSH
25584: CALL_OW 1
25588: ST_TO_ADDR
// end end ;
25589: GO 25518
25591: POP
25592: POP
// for i := minerMinesList downto 1 do
25593: LD_ADDR_VAR 0 1
25597: PUSH
25598: DOUBLE
25599: LD_EXP 112
25603: INC
25604: ST_TO_ADDR
25605: LD_INT 1
25607: PUSH
25608: FOR_DOWNTO
25609: IFFALSE 25945
// begin if IsLive ( minersList [ i ] ) then
25611: LD_EXP 111
25615: PUSH
25616: LD_VAR 0 1
25620: ARRAY
25621: PPUSH
25622: CALL_OW 300
25626: IFFALSE 25654
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25628: LD_EXP 111
25632: PUSH
25633: LD_VAR 0 1
25637: ARRAY
25638: PPUSH
25639: LD_EXP 112
25643: PUSH
25644: LD_VAR 0 1
25648: ARRAY
25649: PPUSH
25650: CALL_OW 505
// if not minerMinesList [ i ] then
25654: LD_EXP 112
25658: PUSH
25659: LD_VAR 0 1
25663: ARRAY
25664: NOT
25665: IFFALSE 25669
// continue ;
25667: GO 25608
// for j := minerMinesList [ i ] downto 1 do
25669: LD_ADDR_VAR 0 2
25673: PUSH
25674: DOUBLE
25675: LD_EXP 112
25679: PUSH
25680: LD_VAR 0 1
25684: ARRAY
25685: INC
25686: ST_TO_ADDR
25687: LD_INT 1
25689: PUSH
25690: FOR_DOWNTO
25691: IFFALSE 25941
// begin side := GetSide ( minersList [ i ] ) ;
25693: LD_ADDR_VAR 0 3
25697: PUSH
25698: LD_EXP 111
25702: PUSH
25703: LD_VAR 0 1
25707: ARRAY
25708: PPUSH
25709: CALL_OW 255
25713: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25714: LD_ADDR_VAR 0 4
25718: PUSH
25719: LD_EXP 112
25723: PUSH
25724: LD_VAR 0 1
25728: ARRAY
25729: PUSH
25730: LD_VAR 0 2
25734: ARRAY
25735: PUSH
25736: LD_INT 1
25738: ARRAY
25739: PPUSH
25740: LD_EXP 112
25744: PUSH
25745: LD_VAR 0 1
25749: ARRAY
25750: PUSH
25751: LD_VAR 0 2
25755: ARRAY
25756: PUSH
25757: LD_INT 2
25759: ARRAY
25760: PPUSH
25761: CALL_OW 428
25765: ST_TO_ADDR
// if not tmp then
25766: LD_VAR 0 4
25770: NOT
25771: IFFALSE 25775
// continue ;
25773: GO 25690
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25775: LD_VAR 0 4
25779: PUSH
25780: LD_INT 81
25782: PUSH
25783: LD_VAR 0 3
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PPUSH
25792: CALL_OW 69
25796: IN
25797: PUSH
25798: LD_EXP 112
25802: PUSH
25803: LD_VAR 0 1
25807: ARRAY
25808: PUSH
25809: LD_VAR 0 2
25813: ARRAY
25814: PUSH
25815: LD_INT 1
25817: ARRAY
25818: PPUSH
25819: LD_EXP 112
25823: PUSH
25824: LD_VAR 0 1
25828: ARRAY
25829: PUSH
25830: LD_VAR 0 2
25834: ARRAY
25835: PUSH
25836: LD_INT 2
25838: ARRAY
25839: PPUSH
25840: CALL_OW 458
25844: AND
25845: IFFALSE 25939
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25847: LD_EXP 112
25851: PUSH
25852: LD_VAR 0 1
25856: ARRAY
25857: PUSH
25858: LD_VAR 0 2
25862: ARRAY
25863: PUSH
25864: LD_INT 1
25866: ARRAY
25867: PPUSH
25868: LD_EXP 112
25872: PUSH
25873: LD_VAR 0 1
25877: ARRAY
25878: PUSH
25879: LD_VAR 0 2
25883: ARRAY
25884: PUSH
25885: LD_INT 2
25887: ARRAY
25888: PPUSH
25889: LD_VAR 0 3
25893: PPUSH
25894: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25898: LD_ADDR_EXP 112
25902: PUSH
25903: LD_EXP 112
25907: PPUSH
25908: LD_VAR 0 1
25912: PPUSH
25913: LD_EXP 112
25917: PUSH
25918: LD_VAR 0 1
25922: ARRAY
25923: PPUSH
25924: LD_VAR 0 2
25928: PPUSH
25929: CALL_OW 3
25933: PPUSH
25934: CALL_OW 1
25938: ST_TO_ADDR
// end ; end ;
25939: GO 25690
25941: POP
25942: POP
// end ;
25943: GO 25608
25945: POP
25946: POP
// end ;
25947: PPOPN 4
25949: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25950: LD_INT 0
25952: PPUSH
25953: PPUSH
// result := false ;
25954: LD_ADDR_VAR 0 4
25958: PUSH
25959: LD_INT 0
25961: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25962: LD_VAR 0 1
25966: PPUSH
25967: CALL_OW 264
25971: PUSH
25972: LD_EXP 32
25976: EQUAL
25977: NOT
25978: IFFALSE 25982
// exit ;
25980: GO 26222
// index := GetElementIndex ( minersList , unit ) ;
25982: LD_ADDR_VAR 0 5
25986: PUSH
25987: LD_EXP 111
25991: PPUSH
25992: LD_VAR 0 1
25996: PPUSH
25997: CALL 32206 0 2
26001: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26002: LD_EXP 112
26006: PUSH
26007: LD_VAR 0 5
26011: ARRAY
26012: PUSH
26013: LD_EXP 113
26017: GREATEREQUAL
26018: IFFALSE 26022
// exit ;
26020: GO 26222
// ComMoveXY ( unit , x , y ) ;
26022: LD_VAR 0 1
26026: PPUSH
26027: LD_VAR 0 2
26031: PPUSH
26032: LD_VAR 0 3
26036: PPUSH
26037: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26041: LD_INT 35
26043: PPUSH
26044: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26048: LD_VAR 0 1
26052: PPUSH
26053: LD_VAR 0 2
26057: PPUSH
26058: LD_VAR 0 3
26062: PPUSH
26063: CALL 62978 0 3
26067: NOT
26068: PUSH
26069: LD_VAR 0 1
26073: PPUSH
26074: CALL_OW 314
26078: AND
26079: IFFALSE 26083
// exit ;
26081: GO 26222
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26083: LD_VAR 0 2
26087: PPUSH
26088: LD_VAR 0 3
26092: PPUSH
26093: CALL_OW 428
26097: PUSH
26098: LD_VAR 0 1
26102: EQUAL
26103: PUSH
26104: LD_VAR 0 1
26108: PPUSH
26109: CALL_OW 314
26113: NOT
26114: AND
26115: IFFALSE 26041
// PlaySoundXY ( x , y , PlantMine ) ;
26117: LD_VAR 0 2
26121: PPUSH
26122: LD_VAR 0 3
26126: PPUSH
26127: LD_STRING PlantMine
26129: PPUSH
26130: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26134: LD_VAR 0 2
26138: PPUSH
26139: LD_VAR 0 3
26143: PPUSH
26144: LD_VAR 0 1
26148: PPUSH
26149: CALL_OW 255
26153: PPUSH
26154: LD_INT 0
26156: PPUSH
26157: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26161: LD_ADDR_EXP 112
26165: PUSH
26166: LD_EXP 112
26170: PPUSH
26171: LD_VAR 0 5
26175: PUSH
26176: LD_EXP 112
26180: PUSH
26181: LD_VAR 0 5
26185: ARRAY
26186: PUSH
26187: LD_INT 1
26189: PLUS
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PPUSH
26195: LD_VAR 0 2
26199: PUSH
26200: LD_VAR 0 3
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PPUSH
26209: CALL 32421 0 3
26213: ST_TO_ADDR
// result := true ;
26214: LD_ADDR_VAR 0 4
26218: PUSH
26219: LD_INT 1
26221: ST_TO_ADDR
// end ;
26222: LD_VAR 0 4
26226: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26227: LD_INT 0
26229: PPUSH
26230: PPUSH
26231: PPUSH
// if not unit in minersList then
26232: LD_VAR 0 1
26236: PUSH
26237: LD_EXP 111
26241: IN
26242: NOT
26243: IFFALSE 26247
// exit ;
26245: GO 26639
// index := GetElementIndex ( minersList , unit ) ;
26247: LD_ADDR_VAR 0 6
26251: PUSH
26252: LD_EXP 111
26256: PPUSH
26257: LD_VAR 0 1
26261: PPUSH
26262: CALL 32206 0 2
26266: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26267: LD_ADDR_VAR 0 5
26271: PUSH
26272: DOUBLE
26273: LD_EXP 112
26277: PUSH
26278: LD_VAR 0 6
26282: ARRAY
26283: INC
26284: ST_TO_ADDR
26285: LD_INT 1
26287: PUSH
26288: FOR_DOWNTO
26289: IFFALSE 26450
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26291: LD_EXP 112
26295: PUSH
26296: LD_VAR 0 6
26300: ARRAY
26301: PUSH
26302: LD_VAR 0 5
26306: ARRAY
26307: PUSH
26308: LD_INT 1
26310: ARRAY
26311: PUSH
26312: LD_VAR 0 2
26316: EQUAL
26317: PUSH
26318: LD_EXP 112
26322: PUSH
26323: LD_VAR 0 6
26327: ARRAY
26328: PUSH
26329: LD_VAR 0 5
26333: ARRAY
26334: PUSH
26335: LD_INT 2
26337: ARRAY
26338: PUSH
26339: LD_VAR 0 3
26343: EQUAL
26344: AND
26345: IFFALSE 26448
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26347: LD_EXP 112
26351: PUSH
26352: LD_VAR 0 6
26356: ARRAY
26357: PUSH
26358: LD_VAR 0 5
26362: ARRAY
26363: PUSH
26364: LD_INT 1
26366: ARRAY
26367: PPUSH
26368: LD_EXP 112
26372: PUSH
26373: LD_VAR 0 6
26377: ARRAY
26378: PUSH
26379: LD_VAR 0 5
26383: ARRAY
26384: PUSH
26385: LD_INT 2
26387: ARRAY
26388: PPUSH
26389: LD_VAR 0 1
26393: PPUSH
26394: CALL_OW 255
26398: PPUSH
26399: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26403: LD_ADDR_EXP 112
26407: PUSH
26408: LD_EXP 112
26412: PPUSH
26413: LD_VAR 0 6
26417: PPUSH
26418: LD_EXP 112
26422: PUSH
26423: LD_VAR 0 6
26427: ARRAY
26428: PPUSH
26429: LD_VAR 0 5
26433: PPUSH
26434: CALL_OW 3
26438: PPUSH
26439: CALL_OW 1
26443: ST_TO_ADDR
// exit ;
26444: POP
26445: POP
26446: GO 26639
// end ; end ;
26448: GO 26288
26450: POP
26451: POP
// for i := minerMinesList [ index ] downto 1 do
26452: LD_ADDR_VAR 0 5
26456: PUSH
26457: DOUBLE
26458: LD_EXP 112
26462: PUSH
26463: LD_VAR 0 6
26467: ARRAY
26468: INC
26469: ST_TO_ADDR
26470: LD_INT 1
26472: PUSH
26473: FOR_DOWNTO
26474: IFFALSE 26637
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26476: LD_EXP 112
26480: PUSH
26481: LD_VAR 0 6
26485: ARRAY
26486: PUSH
26487: LD_VAR 0 5
26491: ARRAY
26492: PUSH
26493: LD_INT 1
26495: ARRAY
26496: PPUSH
26497: LD_EXP 112
26501: PUSH
26502: LD_VAR 0 6
26506: ARRAY
26507: PUSH
26508: LD_VAR 0 5
26512: ARRAY
26513: PUSH
26514: LD_INT 2
26516: ARRAY
26517: PPUSH
26518: LD_VAR 0 2
26522: PPUSH
26523: LD_VAR 0 3
26527: PPUSH
26528: CALL_OW 298
26532: PUSH
26533: LD_INT 6
26535: LESS
26536: IFFALSE 26635
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26538: LD_EXP 112
26542: PUSH
26543: LD_VAR 0 6
26547: ARRAY
26548: PUSH
26549: LD_VAR 0 5
26553: ARRAY
26554: PUSH
26555: LD_INT 1
26557: ARRAY
26558: PPUSH
26559: LD_EXP 112
26563: PUSH
26564: LD_VAR 0 6
26568: ARRAY
26569: PUSH
26570: LD_VAR 0 5
26574: ARRAY
26575: PUSH
26576: LD_INT 2
26578: ARRAY
26579: PPUSH
26580: LD_VAR 0 1
26584: PPUSH
26585: CALL_OW 255
26589: PPUSH
26590: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26594: LD_ADDR_EXP 112
26598: PUSH
26599: LD_EXP 112
26603: PPUSH
26604: LD_VAR 0 6
26608: PPUSH
26609: LD_EXP 112
26613: PUSH
26614: LD_VAR 0 6
26618: ARRAY
26619: PPUSH
26620: LD_VAR 0 5
26624: PPUSH
26625: CALL_OW 3
26629: PPUSH
26630: CALL_OW 1
26634: ST_TO_ADDR
// end ; end ;
26635: GO 26473
26637: POP
26638: POP
// end ;
26639: LD_VAR 0 4
26643: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26644: LD_INT 0
26646: PPUSH
26647: PPUSH
26648: PPUSH
26649: PPUSH
26650: PPUSH
26651: PPUSH
26652: PPUSH
26653: PPUSH
26654: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26655: LD_VAR 0 1
26659: PPUSH
26660: CALL_OW 264
26664: PUSH
26665: LD_EXP 32
26669: EQUAL
26670: NOT
26671: PUSH
26672: LD_VAR 0 1
26676: PUSH
26677: LD_EXP 111
26681: IN
26682: NOT
26683: OR
26684: IFFALSE 26688
// exit ;
26686: GO 27010
// index := GetElementIndex ( minersList , unit ) ;
26688: LD_ADDR_VAR 0 6
26692: PUSH
26693: LD_EXP 111
26697: PPUSH
26698: LD_VAR 0 1
26702: PPUSH
26703: CALL 32206 0 2
26707: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26708: LD_ADDR_VAR 0 8
26712: PUSH
26713: LD_EXP 113
26717: PUSH
26718: LD_EXP 112
26722: PUSH
26723: LD_VAR 0 6
26727: ARRAY
26728: MINUS
26729: ST_TO_ADDR
// if not minesFreeAmount then
26730: LD_VAR 0 8
26734: NOT
26735: IFFALSE 26739
// exit ;
26737: GO 27010
// tmp := [ ] ;
26739: LD_ADDR_VAR 0 7
26743: PUSH
26744: EMPTY
26745: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26746: LD_ADDR_VAR 0 5
26750: PUSH
26751: DOUBLE
26752: LD_INT 1
26754: DEC
26755: ST_TO_ADDR
26756: LD_VAR 0 8
26760: PUSH
26761: FOR_TO
26762: IFFALSE 26957
// begin _d := rand ( 0 , 5 ) ;
26764: LD_ADDR_VAR 0 11
26768: PUSH
26769: LD_INT 0
26771: PPUSH
26772: LD_INT 5
26774: PPUSH
26775: CALL_OW 12
26779: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26780: LD_ADDR_VAR 0 12
26784: PUSH
26785: LD_INT 2
26787: PPUSH
26788: LD_INT 6
26790: PPUSH
26791: CALL_OW 12
26795: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26796: LD_ADDR_VAR 0 9
26800: PUSH
26801: LD_VAR 0 2
26805: PPUSH
26806: LD_VAR 0 11
26810: PPUSH
26811: LD_VAR 0 12
26815: PPUSH
26816: CALL_OW 272
26820: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26821: LD_ADDR_VAR 0 10
26825: PUSH
26826: LD_VAR 0 3
26830: PPUSH
26831: LD_VAR 0 11
26835: PPUSH
26836: LD_VAR 0 12
26840: PPUSH
26841: CALL_OW 273
26845: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26846: LD_VAR 0 9
26850: PPUSH
26851: LD_VAR 0 10
26855: PPUSH
26856: CALL_OW 488
26860: PUSH
26861: LD_VAR 0 9
26865: PUSH
26866: LD_VAR 0 10
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_VAR 0 7
26879: IN
26880: NOT
26881: AND
26882: PUSH
26883: LD_VAR 0 9
26887: PPUSH
26888: LD_VAR 0 10
26892: PPUSH
26893: CALL_OW 458
26897: NOT
26898: AND
26899: IFFALSE 26941
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26901: LD_ADDR_VAR 0 7
26905: PUSH
26906: LD_VAR 0 7
26910: PPUSH
26911: LD_VAR 0 7
26915: PUSH
26916: LD_INT 1
26918: PLUS
26919: PPUSH
26920: LD_VAR 0 9
26924: PUSH
26925: LD_VAR 0 10
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PPUSH
26934: CALL_OW 1
26938: ST_TO_ADDR
26939: GO 26955
// i := i - 1 ;
26941: LD_ADDR_VAR 0 5
26945: PUSH
26946: LD_VAR 0 5
26950: PUSH
26951: LD_INT 1
26953: MINUS
26954: ST_TO_ADDR
// end ;
26955: GO 26761
26957: POP
26958: POP
// for i in tmp do
26959: LD_ADDR_VAR 0 5
26963: PUSH
26964: LD_VAR 0 7
26968: PUSH
26969: FOR_IN
26970: IFFALSE 27008
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26972: LD_VAR 0 1
26976: PPUSH
26977: LD_VAR 0 5
26981: PUSH
26982: LD_INT 1
26984: ARRAY
26985: PPUSH
26986: LD_VAR 0 5
26990: PUSH
26991: LD_INT 2
26993: ARRAY
26994: PPUSH
26995: CALL 25950 0 3
26999: NOT
27000: IFFALSE 27006
// exit ;
27002: POP
27003: POP
27004: GO 27010
27006: GO 26969
27008: POP
27009: POP
// end ;
27010: LD_VAR 0 4
27014: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27015: LD_INT 0
27017: PPUSH
27018: PPUSH
27019: PPUSH
27020: PPUSH
27021: PPUSH
27022: PPUSH
27023: PPUSH
// if not GetClass ( unit ) = class_sniper then
27024: LD_VAR 0 1
27028: PPUSH
27029: CALL_OW 257
27033: PUSH
27034: LD_INT 5
27036: EQUAL
27037: NOT
27038: IFFALSE 27042
// exit ;
27040: GO 27430
// dist := 8 ;
27042: LD_ADDR_VAR 0 5
27046: PUSH
27047: LD_INT 8
27049: ST_TO_ADDR
// viewRange := 12 ;
27050: LD_ADDR_VAR 0 7
27054: PUSH
27055: LD_INT 12
27057: ST_TO_ADDR
// side := GetSide ( unit ) ;
27058: LD_ADDR_VAR 0 6
27062: PUSH
27063: LD_VAR 0 1
27067: PPUSH
27068: CALL_OW 255
27072: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27073: LD_INT 61
27075: PPUSH
27076: LD_VAR 0 6
27080: PPUSH
27081: CALL_OW 321
27085: PUSH
27086: LD_INT 2
27088: EQUAL
27089: IFFALSE 27099
// viewRange := 16 ;
27091: LD_ADDR_VAR 0 7
27095: PUSH
27096: LD_INT 16
27098: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27099: LD_VAR 0 1
27103: PPUSH
27104: LD_VAR 0 2
27108: PPUSH
27109: LD_VAR 0 3
27113: PPUSH
27114: CALL_OW 297
27118: PUSH
27119: LD_VAR 0 5
27123: GREATER
27124: IFFALSE 27203
// begin ComMoveXY ( unit , x , y ) ;
27126: LD_VAR 0 1
27130: PPUSH
27131: LD_VAR 0 2
27135: PPUSH
27136: LD_VAR 0 3
27140: PPUSH
27141: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27145: LD_INT 35
27147: PPUSH
27148: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27152: LD_VAR 0 1
27156: PPUSH
27157: LD_VAR 0 2
27161: PPUSH
27162: LD_VAR 0 3
27166: PPUSH
27167: CALL 62978 0 3
27171: NOT
27172: IFFALSE 27176
// exit ;
27174: GO 27430
// until GetDistUnitXY ( unit , x , y ) < dist ;
27176: LD_VAR 0 1
27180: PPUSH
27181: LD_VAR 0 2
27185: PPUSH
27186: LD_VAR 0 3
27190: PPUSH
27191: CALL_OW 297
27195: PUSH
27196: LD_VAR 0 5
27200: LESS
27201: IFFALSE 27145
// end ; ComTurnXY ( unit , x , y ) ;
27203: LD_VAR 0 1
27207: PPUSH
27208: LD_VAR 0 2
27212: PPUSH
27213: LD_VAR 0 3
27217: PPUSH
27218: CALL_OW 118
// wait ( 5 ) ;
27222: LD_INT 5
27224: PPUSH
27225: CALL_OW 67
// _d := GetDir ( unit ) ;
27229: LD_ADDR_VAR 0 10
27233: PUSH
27234: LD_VAR 0 1
27238: PPUSH
27239: CALL_OW 254
27243: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27244: LD_ADDR_VAR 0 8
27248: PUSH
27249: LD_VAR 0 1
27253: PPUSH
27254: CALL_OW 250
27258: PPUSH
27259: LD_VAR 0 10
27263: PPUSH
27264: LD_VAR 0 5
27268: PPUSH
27269: CALL_OW 272
27273: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27274: LD_ADDR_VAR 0 9
27278: PUSH
27279: LD_VAR 0 1
27283: PPUSH
27284: CALL_OW 251
27288: PPUSH
27289: LD_VAR 0 10
27293: PPUSH
27294: LD_VAR 0 5
27298: PPUSH
27299: CALL_OW 273
27303: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27304: LD_VAR 0 8
27308: PPUSH
27309: LD_VAR 0 9
27313: PPUSH
27314: CALL_OW 488
27318: NOT
27319: IFFALSE 27323
// exit ;
27321: GO 27430
// ComAnimCustom ( unit , 1 ) ;
27323: LD_VAR 0 1
27327: PPUSH
27328: LD_INT 1
27330: PPUSH
27331: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27335: LD_VAR 0 8
27339: PPUSH
27340: LD_VAR 0 9
27344: PPUSH
27345: LD_VAR 0 6
27349: PPUSH
27350: LD_VAR 0 7
27354: PPUSH
27355: CALL_OW 330
// repeat wait ( 1 ) ;
27359: LD_INT 1
27361: PPUSH
27362: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27366: LD_VAR 0 1
27370: PPUSH
27371: CALL_OW 316
27375: PUSH
27376: LD_VAR 0 1
27380: PPUSH
27381: CALL_OW 314
27385: OR
27386: PUSH
27387: LD_VAR 0 1
27391: PPUSH
27392: CALL_OW 302
27396: NOT
27397: OR
27398: PUSH
27399: LD_VAR 0 1
27403: PPUSH
27404: CALL_OW 301
27408: OR
27409: IFFALSE 27359
// RemoveSeeing ( _x , _y , side ) ;
27411: LD_VAR 0 8
27415: PPUSH
27416: LD_VAR 0 9
27420: PPUSH
27421: LD_VAR 0 6
27425: PPUSH
27426: CALL_OW 331
// end ; end_of_file
27430: LD_VAR 0 4
27434: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27435: LD_INT 0
27437: PPUSH
27438: PPUSH
// if exist_mode then
27439: LD_VAR 0 2
27443: IFFALSE 27468
// unit := CreateCharacter ( prefix & ident ) else
27445: LD_ADDR_VAR 0 5
27449: PUSH
27450: LD_VAR 0 3
27454: PUSH
27455: LD_VAR 0 1
27459: STR
27460: PPUSH
27461: CALL_OW 34
27465: ST_TO_ADDR
27466: GO 27483
// unit := NewCharacter ( ident ) ;
27468: LD_ADDR_VAR 0 5
27472: PUSH
27473: LD_VAR 0 1
27477: PPUSH
27478: CALL_OW 25
27482: ST_TO_ADDR
// result := unit ;
27483: LD_ADDR_VAR 0 4
27487: PUSH
27488: LD_VAR 0 5
27492: ST_TO_ADDR
// end ;
27493: LD_VAR 0 4
27497: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27498: LD_INT 0
27500: PPUSH
27501: PPUSH
// if not side or not nation then
27502: LD_VAR 0 1
27506: NOT
27507: PUSH
27508: LD_VAR 0 2
27512: NOT
27513: OR
27514: IFFALSE 27518
// exit ;
27516: GO 28286
// case nation of nation_american :
27518: LD_VAR 0 2
27522: PUSH
27523: LD_INT 1
27525: DOUBLE
27526: EQUAL
27527: IFTRUE 27531
27529: GO 27745
27531: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27532: LD_ADDR_VAR 0 4
27536: PUSH
27537: LD_INT 35
27539: PUSH
27540: LD_INT 45
27542: PUSH
27543: LD_INT 46
27545: PUSH
27546: LD_INT 47
27548: PUSH
27549: LD_INT 82
27551: PUSH
27552: LD_INT 83
27554: PUSH
27555: LD_INT 84
27557: PUSH
27558: LD_INT 85
27560: PUSH
27561: LD_INT 86
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: LD_INT 6
27572: PUSH
27573: LD_INT 15
27575: PUSH
27576: LD_INT 16
27578: PUSH
27579: LD_INT 7
27581: PUSH
27582: LD_INT 12
27584: PUSH
27585: LD_INT 13
27587: PUSH
27588: LD_INT 10
27590: PUSH
27591: LD_INT 14
27593: PUSH
27594: LD_INT 20
27596: PUSH
27597: LD_INT 21
27599: PUSH
27600: LD_INT 22
27602: PUSH
27603: LD_INT 25
27605: PUSH
27606: LD_INT 32
27608: PUSH
27609: LD_INT 27
27611: PUSH
27612: LD_INT 36
27614: PUSH
27615: LD_INT 69
27617: PUSH
27618: LD_INT 39
27620: PUSH
27621: LD_INT 34
27623: PUSH
27624: LD_INT 40
27626: PUSH
27627: LD_INT 48
27629: PUSH
27630: LD_INT 49
27632: PUSH
27633: LD_INT 50
27635: PUSH
27636: LD_INT 51
27638: PUSH
27639: LD_INT 52
27641: PUSH
27642: LD_INT 53
27644: PUSH
27645: LD_INT 54
27647: PUSH
27648: LD_INT 55
27650: PUSH
27651: LD_INT 56
27653: PUSH
27654: LD_INT 57
27656: PUSH
27657: LD_INT 58
27659: PUSH
27660: LD_INT 59
27662: PUSH
27663: LD_INT 60
27665: PUSH
27666: LD_INT 61
27668: PUSH
27669: LD_INT 62
27671: PUSH
27672: LD_INT 80
27674: PUSH
27675: LD_INT 82
27677: PUSH
27678: LD_INT 83
27680: PUSH
27681: LD_INT 84
27683: PUSH
27684: LD_INT 85
27686: PUSH
27687: LD_INT 86
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: ST_TO_ADDR
27743: GO 28210
27745: LD_INT 2
27747: DOUBLE
27748: EQUAL
27749: IFTRUE 27753
27751: GO 27979
27753: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27754: LD_ADDR_VAR 0 4
27758: PUSH
27759: LD_INT 35
27761: PUSH
27762: LD_INT 45
27764: PUSH
27765: LD_INT 46
27767: PUSH
27768: LD_INT 47
27770: PUSH
27771: LD_INT 82
27773: PUSH
27774: LD_INT 83
27776: PUSH
27777: LD_INT 84
27779: PUSH
27780: LD_INT 85
27782: PUSH
27783: LD_INT 87
27785: PUSH
27786: LD_INT 70
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: LD_INT 11
27794: PUSH
27795: LD_INT 3
27797: PUSH
27798: LD_INT 4
27800: PUSH
27801: LD_INT 5
27803: PUSH
27804: LD_INT 6
27806: PUSH
27807: LD_INT 15
27809: PUSH
27810: LD_INT 18
27812: PUSH
27813: LD_INT 7
27815: PUSH
27816: LD_INT 17
27818: PUSH
27819: LD_INT 8
27821: PUSH
27822: LD_INT 20
27824: PUSH
27825: LD_INT 21
27827: PUSH
27828: LD_INT 22
27830: PUSH
27831: LD_INT 72
27833: PUSH
27834: LD_INT 26
27836: PUSH
27837: LD_INT 69
27839: PUSH
27840: LD_INT 39
27842: PUSH
27843: LD_INT 40
27845: PUSH
27846: LD_INT 41
27848: PUSH
27849: LD_INT 42
27851: PUSH
27852: LD_INT 43
27854: PUSH
27855: LD_INT 48
27857: PUSH
27858: LD_INT 49
27860: PUSH
27861: LD_INT 50
27863: PUSH
27864: LD_INT 51
27866: PUSH
27867: LD_INT 52
27869: PUSH
27870: LD_INT 53
27872: PUSH
27873: LD_INT 54
27875: PUSH
27876: LD_INT 55
27878: PUSH
27879: LD_INT 56
27881: PUSH
27882: LD_INT 60
27884: PUSH
27885: LD_INT 61
27887: PUSH
27888: LD_INT 62
27890: PUSH
27891: LD_INT 66
27893: PUSH
27894: LD_INT 67
27896: PUSH
27897: LD_INT 68
27899: PUSH
27900: LD_INT 81
27902: PUSH
27903: LD_INT 82
27905: PUSH
27906: LD_INT 83
27908: PUSH
27909: LD_INT 84
27911: PUSH
27912: LD_INT 85
27914: PUSH
27915: LD_INT 87
27917: PUSH
27918: LD_INT 88
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: ST_TO_ADDR
27977: GO 28210
27979: LD_INT 3
27981: DOUBLE
27982: EQUAL
27983: IFTRUE 27987
27985: GO 28209
27987: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27988: LD_ADDR_VAR 0 4
27992: PUSH
27993: LD_INT 46
27995: PUSH
27996: LD_INT 47
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: LD_INT 82
28007: PUSH
28008: LD_INT 83
28010: PUSH
28011: LD_INT 84
28013: PUSH
28014: LD_INT 85
28016: PUSH
28017: LD_INT 86
28019: PUSH
28020: LD_INT 11
28022: PUSH
28023: LD_INT 9
28025: PUSH
28026: LD_INT 20
28028: PUSH
28029: LD_INT 19
28031: PUSH
28032: LD_INT 21
28034: PUSH
28035: LD_INT 24
28037: PUSH
28038: LD_INT 22
28040: PUSH
28041: LD_INT 25
28043: PUSH
28044: LD_INT 28
28046: PUSH
28047: LD_INT 29
28049: PUSH
28050: LD_INT 30
28052: PUSH
28053: LD_INT 31
28055: PUSH
28056: LD_INT 37
28058: PUSH
28059: LD_INT 38
28061: PUSH
28062: LD_INT 32
28064: PUSH
28065: LD_INT 27
28067: PUSH
28068: LD_INT 33
28070: PUSH
28071: LD_INT 69
28073: PUSH
28074: LD_INT 39
28076: PUSH
28077: LD_INT 34
28079: PUSH
28080: LD_INT 40
28082: PUSH
28083: LD_INT 71
28085: PUSH
28086: LD_INT 23
28088: PUSH
28089: LD_INT 44
28091: PUSH
28092: LD_INT 48
28094: PUSH
28095: LD_INT 49
28097: PUSH
28098: LD_INT 50
28100: PUSH
28101: LD_INT 51
28103: PUSH
28104: LD_INT 52
28106: PUSH
28107: LD_INT 53
28109: PUSH
28110: LD_INT 54
28112: PUSH
28113: LD_INT 55
28115: PUSH
28116: LD_INT 56
28118: PUSH
28119: LD_INT 57
28121: PUSH
28122: LD_INT 58
28124: PUSH
28125: LD_INT 59
28127: PUSH
28128: LD_INT 63
28130: PUSH
28131: LD_INT 64
28133: PUSH
28134: LD_INT 65
28136: PUSH
28137: LD_INT 82
28139: PUSH
28140: LD_INT 83
28142: PUSH
28143: LD_INT 84
28145: PUSH
28146: LD_INT 85
28148: PUSH
28149: LD_INT 86
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: ST_TO_ADDR
28207: GO 28210
28209: POP
// if state > - 1 and state < 3 then
28210: LD_VAR 0 3
28214: PUSH
28215: LD_INT 1
28217: NEG
28218: GREATER
28219: PUSH
28220: LD_VAR 0 3
28224: PUSH
28225: LD_INT 3
28227: LESS
28228: AND
28229: IFFALSE 28286
// for i in result do
28231: LD_ADDR_VAR 0 5
28235: PUSH
28236: LD_VAR 0 4
28240: PUSH
28241: FOR_IN
28242: IFFALSE 28284
// if GetTech ( i , side ) <> state then
28244: LD_VAR 0 5
28248: PPUSH
28249: LD_VAR 0 1
28253: PPUSH
28254: CALL_OW 321
28258: PUSH
28259: LD_VAR 0 3
28263: NONEQUAL
28264: IFFALSE 28282
// result := result diff i ;
28266: LD_ADDR_VAR 0 4
28270: PUSH
28271: LD_VAR 0 4
28275: PUSH
28276: LD_VAR 0 5
28280: DIFF
28281: ST_TO_ADDR
28282: GO 28241
28284: POP
28285: POP
// end ;
28286: LD_VAR 0 4
28290: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28291: LD_INT 0
28293: PPUSH
28294: PPUSH
28295: PPUSH
// result := true ;
28296: LD_ADDR_VAR 0 3
28300: PUSH
28301: LD_INT 1
28303: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28304: LD_ADDR_VAR 0 5
28308: PUSH
28309: LD_VAR 0 2
28313: PPUSH
28314: CALL_OW 480
28318: ST_TO_ADDR
// if not tmp then
28319: LD_VAR 0 5
28323: NOT
28324: IFFALSE 28328
// exit ;
28326: GO 28377
// for i in tmp do
28328: LD_ADDR_VAR 0 4
28332: PUSH
28333: LD_VAR 0 5
28337: PUSH
28338: FOR_IN
28339: IFFALSE 28375
// if GetTech ( i , side ) <> state_researched then
28341: LD_VAR 0 4
28345: PPUSH
28346: LD_VAR 0 1
28350: PPUSH
28351: CALL_OW 321
28355: PUSH
28356: LD_INT 2
28358: NONEQUAL
28359: IFFALSE 28373
// begin result := false ;
28361: LD_ADDR_VAR 0 3
28365: PUSH
28366: LD_INT 0
28368: ST_TO_ADDR
// exit ;
28369: POP
28370: POP
28371: GO 28377
// end ;
28373: GO 28338
28375: POP
28376: POP
// end ;
28377: LD_VAR 0 3
28381: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28382: LD_INT 0
28384: PPUSH
28385: PPUSH
28386: PPUSH
28387: PPUSH
28388: PPUSH
28389: PPUSH
28390: PPUSH
28391: PPUSH
28392: PPUSH
28393: PPUSH
28394: PPUSH
28395: PPUSH
28396: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28397: LD_VAR 0 1
28401: NOT
28402: PUSH
28403: LD_VAR 0 1
28407: PPUSH
28408: CALL_OW 257
28412: PUSH
28413: LD_INT 9
28415: NONEQUAL
28416: OR
28417: IFFALSE 28421
// exit ;
28419: GO 28994
// side := GetSide ( unit ) ;
28421: LD_ADDR_VAR 0 9
28425: PUSH
28426: LD_VAR 0 1
28430: PPUSH
28431: CALL_OW 255
28435: ST_TO_ADDR
// tech_space := tech_spacanom ;
28436: LD_ADDR_VAR 0 12
28440: PUSH
28441: LD_INT 29
28443: ST_TO_ADDR
// tech_time := tech_taurad ;
28444: LD_ADDR_VAR 0 13
28448: PUSH
28449: LD_INT 28
28451: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28452: LD_ADDR_VAR 0 11
28456: PUSH
28457: LD_VAR 0 1
28461: PPUSH
28462: CALL_OW 310
28466: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28467: LD_VAR 0 11
28471: PPUSH
28472: CALL_OW 247
28476: PUSH
28477: LD_INT 2
28479: EQUAL
28480: IFFALSE 28484
// exit ;
28482: GO 28994
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28484: LD_ADDR_VAR 0 8
28488: PUSH
28489: LD_INT 81
28491: PUSH
28492: LD_VAR 0 9
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 3
28503: PUSH
28504: LD_INT 21
28506: PUSH
28507: LD_INT 3
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PPUSH
28522: CALL_OW 69
28526: ST_TO_ADDR
// if not tmp then
28527: LD_VAR 0 8
28531: NOT
28532: IFFALSE 28536
// exit ;
28534: GO 28994
// if in_unit then
28536: LD_VAR 0 11
28540: IFFALSE 28564
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28542: LD_ADDR_VAR 0 10
28546: PUSH
28547: LD_VAR 0 8
28551: PPUSH
28552: LD_VAR 0 11
28556: PPUSH
28557: CALL_OW 74
28561: ST_TO_ADDR
28562: GO 28584
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28564: LD_ADDR_VAR 0 10
28568: PUSH
28569: LD_VAR 0 8
28573: PPUSH
28574: LD_VAR 0 1
28578: PPUSH
28579: CALL_OW 74
28583: ST_TO_ADDR
// if not enemy then
28584: LD_VAR 0 10
28588: NOT
28589: IFFALSE 28593
// exit ;
28591: GO 28994
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28593: LD_VAR 0 11
28597: PUSH
28598: LD_VAR 0 11
28602: PPUSH
28603: LD_VAR 0 10
28607: PPUSH
28608: CALL_OW 296
28612: PUSH
28613: LD_INT 13
28615: GREATER
28616: AND
28617: PUSH
28618: LD_VAR 0 1
28622: PPUSH
28623: LD_VAR 0 10
28627: PPUSH
28628: CALL_OW 296
28632: PUSH
28633: LD_INT 12
28635: GREATER
28636: OR
28637: IFFALSE 28641
// exit ;
28639: GO 28994
// missile := [ 1 ] ;
28641: LD_ADDR_VAR 0 14
28645: PUSH
28646: LD_INT 1
28648: PUSH
28649: EMPTY
28650: LIST
28651: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28652: LD_VAR 0 9
28656: PPUSH
28657: LD_VAR 0 12
28661: PPUSH
28662: CALL_OW 325
28666: IFFALSE 28695
// missile := Insert ( missile , missile + 1 , 2 ) ;
28668: LD_ADDR_VAR 0 14
28672: PUSH
28673: LD_VAR 0 14
28677: PPUSH
28678: LD_VAR 0 14
28682: PUSH
28683: LD_INT 1
28685: PLUS
28686: PPUSH
28687: LD_INT 2
28689: PPUSH
28690: CALL_OW 2
28694: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28695: LD_VAR 0 9
28699: PPUSH
28700: LD_VAR 0 13
28704: PPUSH
28705: CALL_OW 325
28709: PUSH
28710: LD_VAR 0 10
28714: PPUSH
28715: CALL_OW 255
28719: PPUSH
28720: LD_VAR 0 13
28724: PPUSH
28725: CALL_OW 325
28729: NOT
28730: AND
28731: IFFALSE 28760
// missile := Insert ( missile , missile + 1 , 3 ) ;
28733: LD_ADDR_VAR 0 14
28737: PUSH
28738: LD_VAR 0 14
28742: PPUSH
28743: LD_VAR 0 14
28747: PUSH
28748: LD_INT 1
28750: PLUS
28751: PPUSH
28752: LD_INT 3
28754: PPUSH
28755: CALL_OW 2
28759: ST_TO_ADDR
// if missile < 2 then
28760: LD_VAR 0 14
28764: PUSH
28765: LD_INT 2
28767: LESS
28768: IFFALSE 28772
// exit ;
28770: GO 28994
// x := GetX ( enemy ) ;
28772: LD_ADDR_VAR 0 4
28776: PUSH
28777: LD_VAR 0 10
28781: PPUSH
28782: CALL_OW 250
28786: ST_TO_ADDR
// y := GetY ( enemy ) ;
28787: LD_ADDR_VAR 0 5
28791: PUSH
28792: LD_VAR 0 10
28796: PPUSH
28797: CALL_OW 251
28801: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28802: LD_ADDR_VAR 0 6
28806: PUSH
28807: LD_VAR 0 4
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PPUSH
28816: LD_INT 1
28818: PPUSH
28819: CALL_OW 12
28823: PLUS
28824: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28825: LD_ADDR_VAR 0 7
28829: PUSH
28830: LD_VAR 0 5
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PPUSH
28839: LD_INT 1
28841: PPUSH
28842: CALL_OW 12
28846: PLUS
28847: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28848: LD_VAR 0 6
28852: PPUSH
28853: LD_VAR 0 7
28857: PPUSH
28858: CALL_OW 488
28862: NOT
28863: IFFALSE 28885
// begin _x := x ;
28865: LD_ADDR_VAR 0 6
28869: PUSH
28870: LD_VAR 0 4
28874: ST_TO_ADDR
// _y := y ;
28875: LD_ADDR_VAR 0 7
28879: PUSH
28880: LD_VAR 0 5
28884: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28885: LD_ADDR_VAR 0 3
28889: PUSH
28890: LD_INT 1
28892: PPUSH
28893: LD_VAR 0 14
28897: PPUSH
28898: CALL_OW 12
28902: ST_TO_ADDR
// case i of 1 :
28903: LD_VAR 0 3
28907: PUSH
28908: LD_INT 1
28910: DOUBLE
28911: EQUAL
28912: IFTRUE 28916
28914: GO 28933
28916: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28917: LD_VAR 0 1
28921: PPUSH
28922: LD_VAR 0 10
28926: PPUSH
28927: CALL_OW 115
28931: GO 28994
28933: LD_INT 2
28935: DOUBLE
28936: EQUAL
28937: IFTRUE 28941
28939: GO 28963
28941: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28942: LD_VAR 0 1
28946: PPUSH
28947: LD_VAR 0 6
28951: PPUSH
28952: LD_VAR 0 7
28956: PPUSH
28957: CALL_OW 153
28961: GO 28994
28963: LD_INT 3
28965: DOUBLE
28966: EQUAL
28967: IFTRUE 28971
28969: GO 28993
28971: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28972: LD_VAR 0 1
28976: PPUSH
28977: LD_VAR 0 6
28981: PPUSH
28982: LD_VAR 0 7
28986: PPUSH
28987: CALL_OW 154
28991: GO 28994
28993: POP
// end ;
28994: LD_VAR 0 2
28998: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28999: LD_INT 0
29001: PPUSH
29002: PPUSH
29003: PPUSH
29004: PPUSH
29005: PPUSH
29006: PPUSH
// if not unit or not building then
29007: LD_VAR 0 1
29011: NOT
29012: PUSH
29013: LD_VAR 0 2
29017: NOT
29018: OR
29019: IFFALSE 29023
// exit ;
29021: GO 29181
// x := GetX ( building ) ;
29023: LD_ADDR_VAR 0 5
29027: PUSH
29028: LD_VAR 0 2
29032: PPUSH
29033: CALL_OW 250
29037: ST_TO_ADDR
// y := GetY ( building ) ;
29038: LD_ADDR_VAR 0 6
29042: PUSH
29043: LD_VAR 0 2
29047: PPUSH
29048: CALL_OW 251
29052: ST_TO_ADDR
// for i = 0 to 5 do
29053: LD_ADDR_VAR 0 4
29057: PUSH
29058: DOUBLE
29059: LD_INT 0
29061: DEC
29062: ST_TO_ADDR
29063: LD_INT 5
29065: PUSH
29066: FOR_TO
29067: IFFALSE 29179
// begin _x := ShiftX ( x , i , 3 ) ;
29069: LD_ADDR_VAR 0 7
29073: PUSH
29074: LD_VAR 0 5
29078: PPUSH
29079: LD_VAR 0 4
29083: PPUSH
29084: LD_INT 3
29086: PPUSH
29087: CALL_OW 272
29091: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29092: LD_ADDR_VAR 0 8
29096: PUSH
29097: LD_VAR 0 6
29101: PPUSH
29102: LD_VAR 0 4
29106: PPUSH
29107: LD_INT 3
29109: PPUSH
29110: CALL_OW 273
29114: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29115: LD_VAR 0 7
29119: PPUSH
29120: LD_VAR 0 8
29124: PPUSH
29125: CALL_OW 488
29129: NOT
29130: IFFALSE 29134
// continue ;
29132: GO 29066
// if HexInfo ( _x , _y ) = 0 then
29134: LD_VAR 0 7
29138: PPUSH
29139: LD_VAR 0 8
29143: PPUSH
29144: CALL_OW 428
29148: PUSH
29149: LD_INT 0
29151: EQUAL
29152: IFFALSE 29177
// begin ComMoveXY ( unit , _x , _y ) ;
29154: LD_VAR 0 1
29158: PPUSH
29159: LD_VAR 0 7
29163: PPUSH
29164: LD_VAR 0 8
29168: PPUSH
29169: CALL_OW 111
// exit ;
29173: POP
29174: POP
29175: GO 29181
// end ; end ;
29177: GO 29066
29179: POP
29180: POP
// end ;
29181: LD_VAR 0 3
29185: RET
// export function ScanBase ( side , base_area ) ; begin
29186: LD_INT 0
29188: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29189: LD_ADDR_VAR 0 3
29193: PUSH
29194: LD_VAR 0 2
29198: PPUSH
29199: LD_INT 81
29201: PUSH
29202: LD_VAR 0 1
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PPUSH
29211: CALL_OW 70
29215: ST_TO_ADDR
// end ;
29216: LD_VAR 0 3
29220: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29221: LD_INT 0
29223: PPUSH
29224: PPUSH
29225: PPUSH
29226: PPUSH
// result := false ;
29227: LD_ADDR_VAR 0 2
29231: PUSH
29232: LD_INT 0
29234: ST_TO_ADDR
// side := GetSide ( unit ) ;
29235: LD_ADDR_VAR 0 3
29239: PUSH
29240: LD_VAR 0 1
29244: PPUSH
29245: CALL_OW 255
29249: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29250: LD_ADDR_VAR 0 4
29254: PUSH
29255: LD_VAR 0 1
29259: PPUSH
29260: CALL_OW 248
29264: ST_TO_ADDR
// case nat of 1 :
29265: LD_VAR 0 4
29269: PUSH
29270: LD_INT 1
29272: DOUBLE
29273: EQUAL
29274: IFTRUE 29278
29276: GO 29289
29278: POP
// tech := tech_lassight ; 2 :
29279: LD_ADDR_VAR 0 5
29283: PUSH
29284: LD_INT 12
29286: ST_TO_ADDR
29287: GO 29328
29289: LD_INT 2
29291: DOUBLE
29292: EQUAL
29293: IFTRUE 29297
29295: GO 29308
29297: POP
// tech := tech_mortar ; 3 :
29298: LD_ADDR_VAR 0 5
29302: PUSH
29303: LD_INT 41
29305: ST_TO_ADDR
29306: GO 29328
29308: LD_INT 3
29310: DOUBLE
29311: EQUAL
29312: IFTRUE 29316
29314: GO 29327
29316: POP
// tech := tech_bazooka ; end ;
29317: LD_ADDR_VAR 0 5
29321: PUSH
29322: LD_INT 44
29324: ST_TO_ADDR
29325: GO 29328
29327: POP
// if Researched ( side , tech ) then
29328: LD_VAR 0 3
29332: PPUSH
29333: LD_VAR 0 5
29337: PPUSH
29338: CALL_OW 325
29342: IFFALSE 29369
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29344: LD_ADDR_VAR 0 2
29348: PUSH
29349: LD_INT 5
29351: PUSH
29352: LD_INT 8
29354: PUSH
29355: LD_INT 9
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: LIST
29362: PUSH
29363: LD_VAR 0 4
29367: ARRAY
29368: ST_TO_ADDR
// end ;
29369: LD_VAR 0 2
29373: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29374: LD_INT 0
29376: PPUSH
29377: PPUSH
29378: PPUSH
// if not mines then
29379: LD_VAR 0 2
29383: NOT
29384: IFFALSE 29388
// exit ;
29386: GO 29532
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29388: LD_ADDR_VAR 0 5
29392: PUSH
29393: LD_INT 81
29395: PUSH
29396: LD_VAR 0 1
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 3
29407: PUSH
29408: LD_INT 21
29410: PUSH
29411: LD_INT 3
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PPUSH
29426: CALL_OW 69
29430: ST_TO_ADDR
// for i in mines do
29431: LD_ADDR_VAR 0 4
29435: PUSH
29436: LD_VAR 0 2
29440: PUSH
29441: FOR_IN
29442: IFFALSE 29530
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29444: LD_VAR 0 4
29448: PUSH
29449: LD_INT 1
29451: ARRAY
29452: PPUSH
29453: LD_VAR 0 4
29457: PUSH
29458: LD_INT 2
29460: ARRAY
29461: PPUSH
29462: CALL_OW 458
29466: NOT
29467: IFFALSE 29471
// continue ;
29469: GO 29441
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29471: LD_VAR 0 4
29475: PUSH
29476: LD_INT 1
29478: ARRAY
29479: PPUSH
29480: LD_VAR 0 4
29484: PUSH
29485: LD_INT 2
29487: ARRAY
29488: PPUSH
29489: CALL_OW 428
29493: PUSH
29494: LD_VAR 0 5
29498: IN
29499: IFFALSE 29528
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29501: LD_VAR 0 4
29505: PUSH
29506: LD_INT 1
29508: ARRAY
29509: PPUSH
29510: LD_VAR 0 4
29514: PUSH
29515: LD_INT 2
29517: ARRAY
29518: PPUSH
29519: LD_VAR 0 1
29523: PPUSH
29524: CALL_OW 456
// end ;
29528: GO 29441
29530: POP
29531: POP
// end ;
29532: LD_VAR 0 3
29536: RET
// export function Count ( array ) ; var i ; begin
29537: LD_INT 0
29539: PPUSH
29540: PPUSH
// result := 0 ;
29541: LD_ADDR_VAR 0 2
29545: PUSH
29546: LD_INT 0
29548: ST_TO_ADDR
// for i in array do
29549: LD_ADDR_VAR 0 3
29553: PUSH
29554: LD_VAR 0 1
29558: PUSH
29559: FOR_IN
29560: IFFALSE 29584
// if i then
29562: LD_VAR 0 3
29566: IFFALSE 29582
// result := result + 1 ;
29568: LD_ADDR_VAR 0 2
29572: PUSH
29573: LD_VAR 0 2
29577: PUSH
29578: LD_INT 1
29580: PLUS
29581: ST_TO_ADDR
29582: GO 29559
29584: POP
29585: POP
// end ;
29586: LD_VAR 0 2
29590: RET
// export function IsEmpty ( building ) ; begin
29591: LD_INT 0
29593: PPUSH
// if not building then
29594: LD_VAR 0 1
29598: NOT
29599: IFFALSE 29603
// exit ;
29601: GO 29646
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29603: LD_ADDR_VAR 0 2
29607: PUSH
29608: LD_VAR 0 1
29612: PUSH
29613: LD_INT 22
29615: PUSH
29616: LD_VAR 0 1
29620: PPUSH
29621: CALL_OW 255
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 58
29632: PUSH
29633: EMPTY
29634: LIST
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PPUSH
29640: CALL_OW 69
29644: IN
29645: ST_TO_ADDR
// end ;
29646: LD_VAR 0 2
29650: RET
// export function IsNotFull ( building ) ; begin
29651: LD_INT 0
29653: PPUSH
// if not building then
29654: LD_VAR 0 1
29658: NOT
29659: IFFALSE 29663
// exit ;
29661: GO 29682
// result := UnitsInside ( building ) < 6 ;
29663: LD_ADDR_VAR 0 2
29667: PUSH
29668: LD_VAR 0 1
29672: PPUSH
29673: CALL_OW 313
29677: PUSH
29678: LD_INT 6
29680: LESS
29681: ST_TO_ADDR
// end ;
29682: LD_VAR 0 2
29686: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29687: LD_INT 0
29689: PPUSH
29690: PPUSH
29691: PPUSH
29692: PPUSH
// tmp := [ ] ;
29693: LD_ADDR_VAR 0 3
29697: PUSH
29698: EMPTY
29699: ST_TO_ADDR
// list := [ ] ;
29700: LD_ADDR_VAR 0 5
29704: PUSH
29705: EMPTY
29706: ST_TO_ADDR
// for i = 16 to 25 do
29707: LD_ADDR_VAR 0 4
29711: PUSH
29712: DOUBLE
29713: LD_INT 16
29715: DEC
29716: ST_TO_ADDR
29717: LD_INT 25
29719: PUSH
29720: FOR_TO
29721: IFFALSE 29794
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29723: LD_ADDR_VAR 0 3
29727: PUSH
29728: LD_VAR 0 3
29732: PUSH
29733: LD_INT 22
29735: PUSH
29736: LD_VAR 0 1
29740: PPUSH
29741: CALL_OW 255
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 91
29752: PUSH
29753: LD_VAR 0 1
29757: PUSH
29758: LD_INT 6
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 30
29768: PUSH
29769: LD_VAR 0 4
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: LIST
29782: PUSH
29783: EMPTY
29784: LIST
29785: PPUSH
29786: CALL_OW 69
29790: ADD
29791: ST_TO_ADDR
29792: GO 29720
29794: POP
29795: POP
// for i = 1 to tmp do
29796: LD_ADDR_VAR 0 4
29800: PUSH
29801: DOUBLE
29802: LD_INT 1
29804: DEC
29805: ST_TO_ADDR
29806: LD_VAR 0 3
29810: PUSH
29811: FOR_TO
29812: IFFALSE 29900
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29814: LD_ADDR_VAR 0 5
29818: PUSH
29819: LD_VAR 0 5
29823: PUSH
29824: LD_VAR 0 3
29828: PUSH
29829: LD_VAR 0 4
29833: ARRAY
29834: PPUSH
29835: CALL_OW 266
29839: PUSH
29840: LD_VAR 0 3
29844: PUSH
29845: LD_VAR 0 4
29849: ARRAY
29850: PPUSH
29851: CALL_OW 250
29855: PUSH
29856: LD_VAR 0 3
29860: PUSH
29861: LD_VAR 0 4
29865: ARRAY
29866: PPUSH
29867: CALL_OW 251
29871: PUSH
29872: LD_VAR 0 3
29876: PUSH
29877: LD_VAR 0 4
29881: ARRAY
29882: PPUSH
29883: CALL_OW 254
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: PUSH
29894: EMPTY
29895: LIST
29896: ADD
29897: ST_TO_ADDR
29898: GO 29811
29900: POP
29901: POP
// result := list ;
29902: LD_ADDR_VAR 0 2
29906: PUSH
29907: LD_VAR 0 5
29911: ST_TO_ADDR
// end ;
29912: LD_VAR 0 2
29916: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29917: LD_INT 0
29919: PPUSH
29920: PPUSH
29921: PPUSH
29922: PPUSH
29923: PPUSH
29924: PPUSH
29925: PPUSH
// if not factory then
29926: LD_VAR 0 1
29930: NOT
29931: IFFALSE 29935
// exit ;
29933: GO 30528
// if control = control_apeman then
29935: LD_VAR 0 4
29939: PUSH
29940: LD_INT 5
29942: EQUAL
29943: IFFALSE 30052
// begin tmp := UnitsInside ( factory ) ;
29945: LD_ADDR_VAR 0 8
29949: PUSH
29950: LD_VAR 0 1
29954: PPUSH
29955: CALL_OW 313
29959: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29960: LD_VAR 0 8
29964: PPUSH
29965: LD_INT 25
29967: PUSH
29968: LD_INT 12
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PPUSH
29975: CALL_OW 72
29979: NOT
29980: IFFALSE 29990
// control := control_manual ;
29982: LD_ADDR_VAR 0 4
29986: PUSH
29987: LD_INT 1
29989: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29990: LD_ADDR_VAR 0 8
29994: PUSH
29995: LD_VAR 0 1
29999: PPUSH
30000: CALL 29687 0 1
30004: ST_TO_ADDR
// if tmp then
30005: LD_VAR 0 8
30009: IFFALSE 30052
// begin for i in tmp do
30011: LD_ADDR_VAR 0 7
30015: PUSH
30016: LD_VAR 0 8
30020: PUSH
30021: FOR_IN
30022: IFFALSE 30050
// if i [ 1 ] = b_ext_radio then
30024: LD_VAR 0 7
30028: PUSH
30029: LD_INT 1
30031: ARRAY
30032: PUSH
30033: LD_INT 22
30035: EQUAL
30036: IFFALSE 30048
// begin control := control_remote ;
30038: LD_ADDR_VAR 0 4
30042: PUSH
30043: LD_INT 2
30045: ST_TO_ADDR
// break ;
30046: GO 30050
// end ;
30048: GO 30021
30050: POP
30051: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30052: LD_VAR 0 1
30056: PPUSH
30057: LD_VAR 0 2
30061: PPUSH
30062: LD_VAR 0 3
30066: PPUSH
30067: LD_VAR 0 4
30071: PPUSH
30072: LD_VAR 0 5
30076: PPUSH
30077: CALL_OW 448
30081: IFFALSE 30116
// begin result := [ chassis , engine , control , weapon ] ;
30083: LD_ADDR_VAR 0 6
30087: PUSH
30088: LD_VAR 0 2
30092: PUSH
30093: LD_VAR 0 3
30097: PUSH
30098: LD_VAR 0 4
30102: PUSH
30103: LD_VAR 0 5
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: ST_TO_ADDR
// exit ;
30114: GO 30528
// end ; _chassis := AvailableChassisList ( factory ) ;
30116: LD_ADDR_VAR 0 9
30120: PUSH
30121: LD_VAR 0 1
30125: PPUSH
30126: CALL_OW 475
30130: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30131: LD_ADDR_VAR 0 11
30135: PUSH
30136: LD_VAR 0 1
30140: PPUSH
30141: CALL_OW 476
30145: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30146: LD_ADDR_VAR 0 12
30150: PUSH
30151: LD_VAR 0 1
30155: PPUSH
30156: CALL_OW 477
30160: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30161: LD_ADDR_VAR 0 10
30165: PUSH
30166: LD_VAR 0 1
30170: PPUSH
30171: CALL_OW 478
30175: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30176: LD_VAR 0 9
30180: NOT
30181: PUSH
30182: LD_VAR 0 11
30186: NOT
30187: OR
30188: PUSH
30189: LD_VAR 0 12
30193: NOT
30194: OR
30195: PUSH
30196: LD_VAR 0 10
30200: NOT
30201: OR
30202: IFFALSE 30237
// begin result := [ chassis , engine , control , weapon ] ;
30204: LD_ADDR_VAR 0 6
30208: PUSH
30209: LD_VAR 0 2
30213: PUSH
30214: LD_VAR 0 3
30218: PUSH
30219: LD_VAR 0 4
30223: PUSH
30224: LD_VAR 0 5
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: ST_TO_ADDR
// exit ;
30235: GO 30528
// end ; if not chassis in _chassis then
30237: LD_VAR 0 2
30241: PUSH
30242: LD_VAR 0 9
30246: IN
30247: NOT
30248: IFFALSE 30274
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30250: LD_ADDR_VAR 0 2
30254: PUSH
30255: LD_VAR 0 9
30259: PUSH
30260: LD_INT 1
30262: PPUSH
30263: LD_VAR 0 9
30267: PPUSH
30268: CALL_OW 12
30272: ARRAY
30273: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30274: LD_VAR 0 2
30278: PPUSH
30279: LD_VAR 0 3
30283: PPUSH
30284: CALL 30533 0 2
30288: NOT
30289: IFFALSE 30348
// repeat engine := _engine [ 1 ] ;
30291: LD_ADDR_VAR 0 3
30295: PUSH
30296: LD_VAR 0 11
30300: PUSH
30301: LD_INT 1
30303: ARRAY
30304: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30305: LD_ADDR_VAR 0 11
30309: PUSH
30310: LD_VAR 0 11
30314: PPUSH
30315: LD_INT 1
30317: PPUSH
30318: CALL_OW 3
30322: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30323: LD_VAR 0 2
30327: PPUSH
30328: LD_VAR 0 3
30332: PPUSH
30333: CALL 30533 0 2
30337: PUSH
30338: LD_VAR 0 11
30342: PUSH
30343: EMPTY
30344: EQUAL
30345: OR
30346: IFFALSE 30291
// if not control in _control then
30348: LD_VAR 0 4
30352: PUSH
30353: LD_VAR 0 12
30357: IN
30358: NOT
30359: IFFALSE 30385
// control := _control [ rand ( 1 , _control ) ] ;
30361: LD_ADDR_VAR 0 4
30365: PUSH
30366: LD_VAR 0 12
30370: PUSH
30371: LD_INT 1
30373: PPUSH
30374: LD_VAR 0 12
30378: PPUSH
30379: CALL_OW 12
30383: ARRAY
30384: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30385: LD_VAR 0 2
30389: PPUSH
30390: LD_VAR 0 5
30394: PPUSH
30395: CALL 30753 0 2
30399: NOT
30400: IFFALSE 30459
// repeat weapon := _weapon [ 1 ] ;
30402: LD_ADDR_VAR 0 5
30406: PUSH
30407: LD_VAR 0 10
30411: PUSH
30412: LD_INT 1
30414: ARRAY
30415: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30416: LD_ADDR_VAR 0 10
30420: PUSH
30421: LD_VAR 0 10
30425: PPUSH
30426: LD_INT 1
30428: PPUSH
30429: CALL_OW 3
30433: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30434: LD_VAR 0 2
30438: PPUSH
30439: LD_VAR 0 5
30443: PPUSH
30444: CALL 30753 0 2
30448: PUSH
30449: LD_VAR 0 10
30453: PUSH
30454: EMPTY
30455: EQUAL
30456: OR
30457: IFFALSE 30402
// result := [ ] ;
30459: LD_ADDR_VAR 0 6
30463: PUSH
30464: EMPTY
30465: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30466: LD_VAR 0 1
30470: PPUSH
30471: LD_VAR 0 2
30475: PPUSH
30476: LD_VAR 0 3
30480: PPUSH
30481: LD_VAR 0 4
30485: PPUSH
30486: LD_VAR 0 5
30490: PPUSH
30491: CALL_OW 448
30495: IFFALSE 30528
// result := [ chassis , engine , control , weapon ] ;
30497: LD_ADDR_VAR 0 6
30501: PUSH
30502: LD_VAR 0 2
30506: PUSH
30507: LD_VAR 0 3
30511: PUSH
30512: LD_VAR 0 4
30516: PUSH
30517: LD_VAR 0 5
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: ST_TO_ADDR
// end ;
30528: LD_VAR 0 6
30532: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30533: LD_INT 0
30535: PPUSH
// if not chassis or not engine then
30536: LD_VAR 0 1
30540: NOT
30541: PUSH
30542: LD_VAR 0 2
30546: NOT
30547: OR
30548: IFFALSE 30552
// exit ;
30550: GO 30748
// case engine of engine_solar :
30552: LD_VAR 0 2
30556: PUSH
30557: LD_INT 2
30559: DOUBLE
30560: EQUAL
30561: IFTRUE 30565
30563: GO 30603
30565: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30566: LD_ADDR_VAR 0 3
30570: PUSH
30571: LD_INT 11
30573: PUSH
30574: LD_INT 12
30576: PUSH
30577: LD_INT 13
30579: PUSH
30580: LD_INT 14
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: LD_INT 2
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: ST_TO_ADDR
30601: GO 30732
30603: LD_INT 1
30605: DOUBLE
30606: EQUAL
30607: IFTRUE 30611
30609: GO 30673
30611: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30612: LD_ADDR_VAR 0 3
30616: PUSH
30617: LD_INT 11
30619: PUSH
30620: LD_INT 12
30622: PUSH
30623: LD_INT 13
30625: PUSH
30626: LD_INT 14
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: LD_INT 2
30634: PUSH
30635: LD_INT 3
30637: PUSH
30638: LD_INT 4
30640: PUSH
30641: LD_INT 5
30643: PUSH
30644: LD_INT 21
30646: PUSH
30647: LD_INT 23
30649: PUSH
30650: LD_INT 22
30652: PUSH
30653: LD_INT 24
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: ST_TO_ADDR
30671: GO 30732
30673: LD_INT 3
30675: DOUBLE
30676: EQUAL
30677: IFTRUE 30681
30679: GO 30731
30681: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30682: LD_ADDR_VAR 0 3
30686: PUSH
30687: LD_INT 13
30689: PUSH
30690: LD_INT 14
30692: PUSH
30693: LD_INT 2
30695: PUSH
30696: LD_INT 3
30698: PUSH
30699: LD_INT 4
30701: PUSH
30702: LD_INT 5
30704: PUSH
30705: LD_INT 21
30707: PUSH
30708: LD_INT 22
30710: PUSH
30711: LD_INT 23
30713: PUSH
30714: LD_INT 24
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: ST_TO_ADDR
30729: GO 30732
30731: POP
// result := ( chassis in result ) ;
30732: LD_ADDR_VAR 0 3
30736: PUSH
30737: LD_VAR 0 1
30741: PUSH
30742: LD_VAR 0 3
30746: IN
30747: ST_TO_ADDR
// end ;
30748: LD_VAR 0 3
30752: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30753: LD_INT 0
30755: PPUSH
// if not chassis or not weapon then
30756: LD_VAR 0 1
30760: NOT
30761: PUSH
30762: LD_VAR 0 2
30766: NOT
30767: OR
30768: IFFALSE 30772
// exit ;
30770: GO 31834
// case weapon of us_machine_gun :
30772: LD_VAR 0 2
30776: PUSH
30777: LD_INT 2
30779: DOUBLE
30780: EQUAL
30781: IFTRUE 30785
30783: GO 30815
30785: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30786: LD_ADDR_VAR 0 3
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: LD_INT 2
30796: PUSH
30797: LD_INT 3
30799: PUSH
30800: LD_INT 4
30802: PUSH
30803: LD_INT 5
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: ST_TO_ADDR
30813: GO 31818
30815: LD_INT 3
30817: DOUBLE
30818: EQUAL
30819: IFTRUE 30823
30821: GO 30853
30823: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30824: LD_ADDR_VAR 0 3
30828: PUSH
30829: LD_INT 1
30831: PUSH
30832: LD_INT 2
30834: PUSH
30835: LD_INT 3
30837: PUSH
30838: LD_INT 4
30840: PUSH
30841: LD_INT 5
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: ST_TO_ADDR
30851: GO 31818
30853: LD_INT 11
30855: DOUBLE
30856: EQUAL
30857: IFTRUE 30861
30859: GO 30891
30861: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30862: LD_ADDR_VAR 0 3
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: LD_INT 2
30872: PUSH
30873: LD_INT 3
30875: PUSH
30876: LD_INT 4
30878: PUSH
30879: LD_INT 5
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: ST_TO_ADDR
30889: GO 31818
30891: LD_INT 4
30893: DOUBLE
30894: EQUAL
30895: IFTRUE 30899
30897: GO 30925
30899: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30900: LD_ADDR_VAR 0 3
30904: PUSH
30905: LD_INT 2
30907: PUSH
30908: LD_INT 3
30910: PUSH
30911: LD_INT 4
30913: PUSH
30914: LD_INT 5
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: ST_TO_ADDR
30923: GO 31818
30925: LD_INT 5
30927: DOUBLE
30928: EQUAL
30929: IFTRUE 30933
30931: GO 30959
30933: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30934: LD_ADDR_VAR 0 3
30938: PUSH
30939: LD_INT 2
30941: PUSH
30942: LD_INT 3
30944: PUSH
30945: LD_INT 4
30947: PUSH
30948: LD_INT 5
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: ST_TO_ADDR
30957: GO 31818
30959: LD_INT 9
30961: DOUBLE
30962: EQUAL
30963: IFTRUE 30967
30965: GO 30993
30967: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30968: LD_ADDR_VAR 0 3
30972: PUSH
30973: LD_INT 2
30975: PUSH
30976: LD_INT 3
30978: PUSH
30979: LD_INT 4
30981: PUSH
30982: LD_INT 5
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: ST_TO_ADDR
30991: GO 31818
30993: LD_INT 7
30995: DOUBLE
30996: EQUAL
30997: IFTRUE 31001
30999: GO 31027
31001: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31002: LD_ADDR_VAR 0 3
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: LD_INT 3
31012: PUSH
31013: LD_INT 4
31015: PUSH
31016: LD_INT 5
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: ST_TO_ADDR
31025: GO 31818
31027: LD_INT 12
31029: DOUBLE
31030: EQUAL
31031: IFTRUE 31035
31033: GO 31061
31035: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31036: LD_ADDR_VAR 0 3
31040: PUSH
31041: LD_INT 2
31043: PUSH
31044: LD_INT 3
31046: PUSH
31047: LD_INT 4
31049: PUSH
31050: LD_INT 5
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: ST_TO_ADDR
31059: GO 31818
31061: LD_INT 13
31063: DOUBLE
31064: EQUAL
31065: IFTRUE 31069
31067: GO 31095
31069: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31070: LD_ADDR_VAR 0 3
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: LD_INT 3
31080: PUSH
31081: LD_INT 4
31083: PUSH
31084: LD_INT 5
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: ST_TO_ADDR
31093: GO 31818
31095: LD_INT 14
31097: DOUBLE
31098: EQUAL
31099: IFTRUE 31103
31101: GO 31121
31103: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31104: LD_ADDR_VAR 0 3
31108: PUSH
31109: LD_INT 4
31111: PUSH
31112: LD_INT 5
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: ST_TO_ADDR
31119: GO 31818
31121: LD_INT 6
31123: DOUBLE
31124: EQUAL
31125: IFTRUE 31129
31127: GO 31147
31129: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31130: LD_ADDR_VAR 0 3
31134: PUSH
31135: LD_INT 4
31137: PUSH
31138: LD_INT 5
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: ST_TO_ADDR
31145: GO 31818
31147: LD_INT 10
31149: DOUBLE
31150: EQUAL
31151: IFTRUE 31155
31153: GO 31173
31155: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31156: LD_ADDR_VAR 0 3
31160: PUSH
31161: LD_INT 4
31163: PUSH
31164: LD_INT 5
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: ST_TO_ADDR
31171: GO 31818
31173: LD_INT 22
31175: DOUBLE
31176: EQUAL
31177: IFTRUE 31181
31179: GO 31207
31181: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31182: LD_ADDR_VAR 0 3
31186: PUSH
31187: LD_INT 11
31189: PUSH
31190: LD_INT 12
31192: PUSH
31193: LD_INT 13
31195: PUSH
31196: LD_INT 14
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: ST_TO_ADDR
31205: GO 31818
31207: LD_INT 23
31209: DOUBLE
31210: EQUAL
31211: IFTRUE 31215
31213: GO 31241
31215: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31216: LD_ADDR_VAR 0 3
31220: PUSH
31221: LD_INT 11
31223: PUSH
31224: LD_INT 12
31226: PUSH
31227: LD_INT 13
31229: PUSH
31230: LD_INT 14
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: ST_TO_ADDR
31239: GO 31818
31241: LD_INT 24
31243: DOUBLE
31244: EQUAL
31245: IFTRUE 31249
31247: GO 31275
31249: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31250: LD_ADDR_VAR 0 3
31254: PUSH
31255: LD_INT 11
31257: PUSH
31258: LD_INT 12
31260: PUSH
31261: LD_INT 13
31263: PUSH
31264: LD_INT 14
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: ST_TO_ADDR
31273: GO 31818
31275: LD_INT 30
31277: DOUBLE
31278: EQUAL
31279: IFTRUE 31283
31281: GO 31309
31283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31284: LD_ADDR_VAR 0 3
31288: PUSH
31289: LD_INT 11
31291: PUSH
31292: LD_INT 12
31294: PUSH
31295: LD_INT 13
31297: PUSH
31298: LD_INT 14
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: ST_TO_ADDR
31307: GO 31818
31309: LD_INT 25
31311: DOUBLE
31312: EQUAL
31313: IFTRUE 31317
31315: GO 31335
31317: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31318: LD_ADDR_VAR 0 3
31322: PUSH
31323: LD_INT 13
31325: PUSH
31326: LD_INT 14
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: ST_TO_ADDR
31333: GO 31818
31335: LD_INT 27
31337: DOUBLE
31338: EQUAL
31339: IFTRUE 31343
31341: GO 31361
31343: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31344: LD_ADDR_VAR 0 3
31348: PUSH
31349: LD_INT 13
31351: PUSH
31352: LD_INT 14
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: ST_TO_ADDR
31359: GO 31818
31361: LD_EXP 30
31365: DOUBLE
31366: EQUAL
31367: IFTRUE 31371
31369: GO 31397
31371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31372: LD_ADDR_VAR 0 3
31376: PUSH
31377: LD_INT 11
31379: PUSH
31380: LD_INT 12
31382: PUSH
31383: LD_INT 13
31385: PUSH
31386: LD_INT 14
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: ST_TO_ADDR
31395: GO 31818
31397: LD_INT 28
31399: DOUBLE
31400: EQUAL
31401: IFTRUE 31405
31403: GO 31423
31405: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31406: LD_ADDR_VAR 0 3
31410: PUSH
31411: LD_INT 13
31413: PUSH
31414: LD_INT 14
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: ST_TO_ADDR
31421: GO 31818
31423: LD_INT 29
31425: DOUBLE
31426: EQUAL
31427: IFTRUE 31431
31429: GO 31449
31431: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31432: LD_ADDR_VAR 0 3
31436: PUSH
31437: LD_INT 13
31439: PUSH
31440: LD_INT 14
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: ST_TO_ADDR
31447: GO 31818
31449: LD_INT 31
31451: DOUBLE
31452: EQUAL
31453: IFTRUE 31457
31455: GO 31475
31457: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31458: LD_ADDR_VAR 0 3
31462: PUSH
31463: LD_INT 13
31465: PUSH
31466: LD_INT 14
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: ST_TO_ADDR
31473: GO 31818
31475: LD_INT 26
31477: DOUBLE
31478: EQUAL
31479: IFTRUE 31483
31481: GO 31501
31483: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31484: LD_ADDR_VAR 0 3
31488: PUSH
31489: LD_INT 13
31491: PUSH
31492: LD_INT 14
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: ST_TO_ADDR
31499: GO 31818
31501: LD_INT 42
31503: DOUBLE
31504: EQUAL
31505: IFTRUE 31509
31507: GO 31535
31509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31510: LD_ADDR_VAR 0 3
31514: PUSH
31515: LD_INT 21
31517: PUSH
31518: LD_INT 22
31520: PUSH
31521: LD_INT 23
31523: PUSH
31524: LD_INT 24
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: ST_TO_ADDR
31533: GO 31818
31535: LD_INT 43
31537: DOUBLE
31538: EQUAL
31539: IFTRUE 31543
31541: GO 31569
31543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31544: LD_ADDR_VAR 0 3
31548: PUSH
31549: LD_INT 21
31551: PUSH
31552: LD_INT 22
31554: PUSH
31555: LD_INT 23
31557: PUSH
31558: LD_INT 24
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: ST_TO_ADDR
31567: GO 31818
31569: LD_INT 44
31571: DOUBLE
31572: EQUAL
31573: IFTRUE 31577
31575: GO 31603
31577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31578: LD_ADDR_VAR 0 3
31582: PUSH
31583: LD_INT 21
31585: PUSH
31586: LD_INT 22
31588: PUSH
31589: LD_INT 23
31591: PUSH
31592: LD_INT 24
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: ST_TO_ADDR
31601: GO 31818
31603: LD_INT 45
31605: DOUBLE
31606: EQUAL
31607: IFTRUE 31611
31609: GO 31637
31611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31612: LD_ADDR_VAR 0 3
31616: PUSH
31617: LD_INT 21
31619: PUSH
31620: LD_INT 22
31622: PUSH
31623: LD_INT 23
31625: PUSH
31626: LD_INT 24
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: ST_TO_ADDR
31635: GO 31818
31637: LD_INT 49
31639: DOUBLE
31640: EQUAL
31641: IFTRUE 31645
31643: GO 31671
31645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31646: LD_ADDR_VAR 0 3
31650: PUSH
31651: LD_INT 21
31653: PUSH
31654: LD_INT 22
31656: PUSH
31657: LD_INT 23
31659: PUSH
31660: LD_INT 24
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: ST_TO_ADDR
31669: GO 31818
31671: LD_INT 51
31673: DOUBLE
31674: EQUAL
31675: IFTRUE 31679
31677: GO 31705
31679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31680: LD_ADDR_VAR 0 3
31684: PUSH
31685: LD_INT 21
31687: PUSH
31688: LD_INT 22
31690: PUSH
31691: LD_INT 23
31693: PUSH
31694: LD_INT 24
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: ST_TO_ADDR
31703: GO 31818
31705: LD_INT 52
31707: DOUBLE
31708: EQUAL
31709: IFTRUE 31713
31711: GO 31739
31713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31714: LD_ADDR_VAR 0 3
31718: PUSH
31719: LD_INT 21
31721: PUSH
31722: LD_INT 22
31724: PUSH
31725: LD_INT 23
31727: PUSH
31728: LD_INT 24
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: ST_TO_ADDR
31737: GO 31818
31739: LD_INT 53
31741: DOUBLE
31742: EQUAL
31743: IFTRUE 31747
31745: GO 31765
31747: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31748: LD_ADDR_VAR 0 3
31752: PUSH
31753: LD_INT 23
31755: PUSH
31756: LD_INT 24
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: ST_TO_ADDR
31763: GO 31818
31765: LD_INT 46
31767: DOUBLE
31768: EQUAL
31769: IFTRUE 31773
31771: GO 31791
31773: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31774: LD_ADDR_VAR 0 3
31778: PUSH
31779: LD_INT 23
31781: PUSH
31782: LD_INT 24
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: ST_TO_ADDR
31789: GO 31818
31791: LD_INT 47
31793: DOUBLE
31794: EQUAL
31795: IFTRUE 31799
31797: GO 31817
31799: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31800: LD_ADDR_VAR 0 3
31804: PUSH
31805: LD_INT 23
31807: PUSH
31808: LD_INT 24
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: ST_TO_ADDR
31815: GO 31818
31817: POP
// result := ( chassis in result ) ;
31818: LD_ADDR_VAR 0 3
31822: PUSH
31823: LD_VAR 0 1
31827: PUSH
31828: LD_VAR 0 3
31832: IN
31833: ST_TO_ADDR
// end ;
31834: LD_VAR 0 3
31838: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31839: LD_INT 0
31841: PPUSH
31842: PPUSH
31843: PPUSH
31844: PPUSH
31845: PPUSH
31846: PPUSH
31847: PPUSH
// result := array ;
31848: LD_ADDR_VAR 0 5
31852: PUSH
31853: LD_VAR 0 1
31857: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31858: LD_VAR 0 1
31862: NOT
31863: PUSH
31864: LD_VAR 0 2
31868: NOT
31869: OR
31870: PUSH
31871: LD_VAR 0 3
31875: NOT
31876: OR
31877: PUSH
31878: LD_VAR 0 2
31882: PUSH
31883: LD_VAR 0 1
31887: GREATER
31888: OR
31889: PUSH
31890: LD_VAR 0 3
31894: PUSH
31895: LD_VAR 0 1
31899: GREATER
31900: OR
31901: IFFALSE 31905
// exit ;
31903: GO 32201
// if direction then
31905: LD_VAR 0 4
31909: IFFALSE 31973
// begin d := 1 ;
31911: LD_ADDR_VAR 0 9
31915: PUSH
31916: LD_INT 1
31918: ST_TO_ADDR
// if i_from > i_to then
31919: LD_VAR 0 2
31923: PUSH
31924: LD_VAR 0 3
31928: GREATER
31929: IFFALSE 31955
// length := ( array - i_from ) + i_to else
31931: LD_ADDR_VAR 0 11
31935: PUSH
31936: LD_VAR 0 1
31940: PUSH
31941: LD_VAR 0 2
31945: MINUS
31946: PUSH
31947: LD_VAR 0 3
31951: PLUS
31952: ST_TO_ADDR
31953: GO 31971
// length := i_to - i_from ;
31955: LD_ADDR_VAR 0 11
31959: PUSH
31960: LD_VAR 0 3
31964: PUSH
31965: LD_VAR 0 2
31969: MINUS
31970: ST_TO_ADDR
// end else
31971: GO 32034
// begin d := - 1 ;
31973: LD_ADDR_VAR 0 9
31977: PUSH
31978: LD_INT 1
31980: NEG
31981: ST_TO_ADDR
// if i_from > i_to then
31982: LD_VAR 0 2
31986: PUSH
31987: LD_VAR 0 3
31991: GREATER
31992: IFFALSE 32012
// length := i_from - i_to else
31994: LD_ADDR_VAR 0 11
31998: PUSH
31999: LD_VAR 0 2
32003: PUSH
32004: LD_VAR 0 3
32008: MINUS
32009: ST_TO_ADDR
32010: GO 32034
// length := ( array - i_to ) + i_from ;
32012: LD_ADDR_VAR 0 11
32016: PUSH
32017: LD_VAR 0 1
32021: PUSH
32022: LD_VAR 0 3
32026: MINUS
32027: PUSH
32028: LD_VAR 0 2
32032: PLUS
32033: ST_TO_ADDR
// end ; if not length then
32034: LD_VAR 0 11
32038: NOT
32039: IFFALSE 32043
// exit ;
32041: GO 32201
// tmp := array ;
32043: LD_ADDR_VAR 0 10
32047: PUSH
32048: LD_VAR 0 1
32052: ST_TO_ADDR
// for i = 1 to length do
32053: LD_ADDR_VAR 0 6
32057: PUSH
32058: DOUBLE
32059: LD_INT 1
32061: DEC
32062: ST_TO_ADDR
32063: LD_VAR 0 11
32067: PUSH
32068: FOR_TO
32069: IFFALSE 32189
// begin for j = 1 to array do
32071: LD_ADDR_VAR 0 7
32075: PUSH
32076: DOUBLE
32077: LD_INT 1
32079: DEC
32080: ST_TO_ADDR
32081: LD_VAR 0 1
32085: PUSH
32086: FOR_TO
32087: IFFALSE 32175
// begin k := j + d ;
32089: LD_ADDR_VAR 0 8
32093: PUSH
32094: LD_VAR 0 7
32098: PUSH
32099: LD_VAR 0 9
32103: PLUS
32104: ST_TO_ADDR
// if k > array then
32105: LD_VAR 0 8
32109: PUSH
32110: LD_VAR 0 1
32114: GREATER
32115: IFFALSE 32125
// k := 1 ;
32117: LD_ADDR_VAR 0 8
32121: PUSH
32122: LD_INT 1
32124: ST_TO_ADDR
// if not k then
32125: LD_VAR 0 8
32129: NOT
32130: IFFALSE 32142
// k := array ;
32132: LD_ADDR_VAR 0 8
32136: PUSH
32137: LD_VAR 0 1
32141: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32142: LD_ADDR_VAR 0 10
32146: PUSH
32147: LD_VAR 0 10
32151: PPUSH
32152: LD_VAR 0 8
32156: PPUSH
32157: LD_VAR 0 1
32161: PUSH
32162: LD_VAR 0 7
32166: ARRAY
32167: PPUSH
32168: CALL_OW 1
32172: ST_TO_ADDR
// end ;
32173: GO 32086
32175: POP
32176: POP
// array := tmp ;
32177: LD_ADDR_VAR 0 1
32181: PUSH
32182: LD_VAR 0 10
32186: ST_TO_ADDR
// end ;
32187: GO 32068
32189: POP
32190: POP
// result := array ;
32191: LD_ADDR_VAR 0 5
32195: PUSH
32196: LD_VAR 0 1
32200: ST_TO_ADDR
// end ;
32201: LD_VAR 0 5
32205: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32206: LD_INT 0
32208: PPUSH
32209: PPUSH
// result := 0 ;
32210: LD_ADDR_VAR 0 3
32214: PUSH
32215: LD_INT 0
32217: ST_TO_ADDR
// if not array or not value in array then
32218: LD_VAR 0 1
32222: NOT
32223: PUSH
32224: LD_VAR 0 2
32228: PUSH
32229: LD_VAR 0 1
32233: IN
32234: NOT
32235: OR
32236: IFFALSE 32240
// exit ;
32238: GO 32294
// for i = 1 to array do
32240: LD_ADDR_VAR 0 4
32244: PUSH
32245: DOUBLE
32246: LD_INT 1
32248: DEC
32249: ST_TO_ADDR
32250: LD_VAR 0 1
32254: PUSH
32255: FOR_TO
32256: IFFALSE 32292
// if value = array [ i ] then
32258: LD_VAR 0 2
32262: PUSH
32263: LD_VAR 0 1
32267: PUSH
32268: LD_VAR 0 4
32272: ARRAY
32273: EQUAL
32274: IFFALSE 32290
// begin result := i ;
32276: LD_ADDR_VAR 0 3
32280: PUSH
32281: LD_VAR 0 4
32285: ST_TO_ADDR
// exit ;
32286: POP
32287: POP
32288: GO 32294
// end ;
32290: GO 32255
32292: POP
32293: POP
// end ;
32294: LD_VAR 0 3
32298: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32299: LD_INT 0
32301: PPUSH
// vc_chassis := chassis ;
32302: LD_ADDR_OWVAR 37
32306: PUSH
32307: LD_VAR 0 1
32311: ST_TO_ADDR
// vc_engine := engine ;
32312: LD_ADDR_OWVAR 39
32316: PUSH
32317: LD_VAR 0 2
32321: ST_TO_ADDR
// vc_control := control ;
32322: LD_ADDR_OWVAR 38
32326: PUSH
32327: LD_VAR 0 3
32331: ST_TO_ADDR
// vc_weapon := weapon ;
32332: LD_ADDR_OWVAR 40
32336: PUSH
32337: LD_VAR 0 4
32341: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32342: LD_ADDR_OWVAR 41
32346: PUSH
32347: LD_VAR 0 5
32351: ST_TO_ADDR
// end ;
32352: LD_VAR 0 6
32356: RET
// export function WantPlant ( unit ) ; var task ; begin
32357: LD_INT 0
32359: PPUSH
32360: PPUSH
// result := false ;
32361: LD_ADDR_VAR 0 2
32365: PUSH
32366: LD_INT 0
32368: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32369: LD_ADDR_VAR 0 3
32373: PUSH
32374: LD_VAR 0 1
32378: PPUSH
32379: CALL_OW 437
32383: ST_TO_ADDR
// if task then
32384: LD_VAR 0 3
32388: IFFALSE 32416
// if task [ 1 ] [ 1 ] = p then
32390: LD_VAR 0 3
32394: PUSH
32395: LD_INT 1
32397: ARRAY
32398: PUSH
32399: LD_INT 1
32401: ARRAY
32402: PUSH
32403: LD_STRING p
32405: EQUAL
32406: IFFALSE 32416
// result := true ;
32408: LD_ADDR_VAR 0 2
32412: PUSH
32413: LD_INT 1
32415: ST_TO_ADDR
// end ;
32416: LD_VAR 0 2
32420: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32421: LD_INT 0
32423: PPUSH
32424: PPUSH
32425: PPUSH
32426: PPUSH
// if pos < 1 then
32427: LD_VAR 0 2
32431: PUSH
32432: LD_INT 1
32434: LESS
32435: IFFALSE 32439
// exit ;
32437: GO 32742
// if pos = 1 then
32439: LD_VAR 0 2
32443: PUSH
32444: LD_INT 1
32446: EQUAL
32447: IFFALSE 32480
// result := Replace ( arr , pos [ 1 ] , value ) else
32449: LD_ADDR_VAR 0 4
32453: PUSH
32454: LD_VAR 0 1
32458: PPUSH
32459: LD_VAR 0 2
32463: PUSH
32464: LD_INT 1
32466: ARRAY
32467: PPUSH
32468: LD_VAR 0 3
32472: PPUSH
32473: CALL_OW 1
32477: ST_TO_ADDR
32478: GO 32742
// begin tmp := arr ;
32480: LD_ADDR_VAR 0 6
32484: PUSH
32485: LD_VAR 0 1
32489: ST_TO_ADDR
// s_arr := [ tmp ] ;
32490: LD_ADDR_VAR 0 7
32494: PUSH
32495: LD_VAR 0 6
32499: PUSH
32500: EMPTY
32501: LIST
32502: ST_TO_ADDR
// for i = 1 to pos - 1 do
32503: LD_ADDR_VAR 0 5
32507: PUSH
32508: DOUBLE
32509: LD_INT 1
32511: DEC
32512: ST_TO_ADDR
32513: LD_VAR 0 2
32517: PUSH
32518: LD_INT 1
32520: MINUS
32521: PUSH
32522: FOR_TO
32523: IFFALSE 32568
// begin tmp := tmp [ pos [ i ] ] ;
32525: LD_ADDR_VAR 0 6
32529: PUSH
32530: LD_VAR 0 6
32534: PUSH
32535: LD_VAR 0 2
32539: PUSH
32540: LD_VAR 0 5
32544: ARRAY
32545: ARRAY
32546: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32547: LD_ADDR_VAR 0 7
32551: PUSH
32552: LD_VAR 0 7
32556: PUSH
32557: LD_VAR 0 6
32561: PUSH
32562: EMPTY
32563: LIST
32564: ADD
32565: ST_TO_ADDR
// end ;
32566: GO 32522
32568: POP
32569: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32570: LD_ADDR_VAR 0 6
32574: PUSH
32575: LD_VAR 0 6
32579: PPUSH
32580: LD_VAR 0 2
32584: PUSH
32585: LD_VAR 0 2
32589: ARRAY
32590: PPUSH
32591: LD_VAR 0 3
32595: PPUSH
32596: CALL_OW 1
32600: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32601: LD_ADDR_VAR 0 7
32605: PUSH
32606: LD_VAR 0 7
32610: PPUSH
32611: LD_VAR 0 7
32615: PPUSH
32616: LD_VAR 0 6
32620: PPUSH
32621: CALL_OW 1
32625: ST_TO_ADDR
// for i = s_arr downto 2 do
32626: LD_ADDR_VAR 0 5
32630: PUSH
32631: DOUBLE
32632: LD_VAR 0 7
32636: INC
32637: ST_TO_ADDR
32638: LD_INT 2
32640: PUSH
32641: FOR_DOWNTO
32642: IFFALSE 32726
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32644: LD_ADDR_VAR 0 6
32648: PUSH
32649: LD_VAR 0 7
32653: PUSH
32654: LD_VAR 0 5
32658: PUSH
32659: LD_INT 1
32661: MINUS
32662: ARRAY
32663: PPUSH
32664: LD_VAR 0 2
32668: PUSH
32669: LD_VAR 0 5
32673: PUSH
32674: LD_INT 1
32676: MINUS
32677: ARRAY
32678: PPUSH
32679: LD_VAR 0 7
32683: PUSH
32684: LD_VAR 0 5
32688: ARRAY
32689: PPUSH
32690: CALL_OW 1
32694: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32695: LD_ADDR_VAR 0 7
32699: PUSH
32700: LD_VAR 0 7
32704: PPUSH
32705: LD_VAR 0 5
32709: PUSH
32710: LD_INT 1
32712: MINUS
32713: PPUSH
32714: LD_VAR 0 6
32718: PPUSH
32719: CALL_OW 1
32723: ST_TO_ADDR
// end ;
32724: GO 32641
32726: POP
32727: POP
// result := s_arr [ 1 ] ;
32728: LD_ADDR_VAR 0 4
32732: PUSH
32733: LD_VAR 0 7
32737: PUSH
32738: LD_INT 1
32740: ARRAY
32741: ST_TO_ADDR
// end ; end ;
32742: LD_VAR 0 4
32746: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32747: LD_INT 0
32749: PPUSH
32750: PPUSH
// if not list then
32751: LD_VAR 0 1
32755: NOT
32756: IFFALSE 32760
// exit ;
32758: GO 32851
// i := list [ pos1 ] ;
32760: LD_ADDR_VAR 0 5
32764: PUSH
32765: LD_VAR 0 1
32769: PUSH
32770: LD_VAR 0 2
32774: ARRAY
32775: ST_TO_ADDR
// if not i then
32776: LD_VAR 0 5
32780: NOT
32781: IFFALSE 32785
// exit ;
32783: GO 32851
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32785: LD_ADDR_VAR 0 1
32789: PUSH
32790: LD_VAR 0 1
32794: PPUSH
32795: LD_VAR 0 2
32799: PPUSH
32800: LD_VAR 0 1
32804: PUSH
32805: LD_VAR 0 3
32809: ARRAY
32810: PPUSH
32811: CALL_OW 1
32815: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32816: LD_ADDR_VAR 0 1
32820: PUSH
32821: LD_VAR 0 1
32825: PPUSH
32826: LD_VAR 0 3
32830: PPUSH
32831: LD_VAR 0 5
32835: PPUSH
32836: CALL_OW 1
32840: ST_TO_ADDR
// result := list ;
32841: LD_ADDR_VAR 0 4
32845: PUSH
32846: LD_VAR 0 1
32850: ST_TO_ADDR
// end ;
32851: LD_VAR 0 4
32855: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32856: LD_INT 0
32858: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32859: LD_ADDR_VAR 0 5
32863: PUSH
32864: LD_VAR 0 1
32868: PPUSH
32869: CALL_OW 250
32873: PPUSH
32874: LD_VAR 0 1
32878: PPUSH
32879: CALL_OW 251
32883: PPUSH
32884: LD_VAR 0 2
32888: PPUSH
32889: LD_VAR 0 3
32893: PPUSH
32894: LD_VAR 0 4
32898: PPUSH
32899: CALL 32909 0 5
32903: ST_TO_ADDR
// end ;
32904: LD_VAR 0 5
32908: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32909: LD_INT 0
32911: PPUSH
32912: PPUSH
32913: PPUSH
32914: PPUSH
// if not list then
32915: LD_VAR 0 3
32919: NOT
32920: IFFALSE 32924
// exit ;
32922: GO 33312
// result := [ ] ;
32924: LD_ADDR_VAR 0 6
32928: PUSH
32929: EMPTY
32930: ST_TO_ADDR
// for i in list do
32931: LD_ADDR_VAR 0 7
32935: PUSH
32936: LD_VAR 0 3
32940: PUSH
32941: FOR_IN
32942: IFFALSE 33144
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32944: LD_ADDR_VAR 0 9
32948: PUSH
32949: LD_VAR 0 7
32953: PPUSH
32954: LD_VAR 0 1
32958: PPUSH
32959: LD_VAR 0 2
32963: PPUSH
32964: CALL_OW 297
32968: ST_TO_ADDR
// if not result then
32969: LD_VAR 0 6
32973: NOT
32974: IFFALSE 33000
// result := [ [ i , tmp ] ] else
32976: LD_ADDR_VAR 0 6
32980: PUSH
32981: LD_VAR 0 7
32985: PUSH
32986: LD_VAR 0 9
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: EMPTY
32996: LIST
32997: ST_TO_ADDR
32998: GO 33142
// begin if result [ result ] [ 2 ] < tmp then
33000: LD_VAR 0 6
33004: PUSH
33005: LD_VAR 0 6
33009: ARRAY
33010: PUSH
33011: LD_INT 2
33013: ARRAY
33014: PUSH
33015: LD_VAR 0 9
33019: LESS
33020: IFFALSE 33062
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33022: LD_ADDR_VAR 0 6
33026: PUSH
33027: LD_VAR 0 6
33031: PPUSH
33032: LD_VAR 0 6
33036: PUSH
33037: LD_INT 1
33039: PLUS
33040: PPUSH
33041: LD_VAR 0 7
33045: PUSH
33046: LD_VAR 0 9
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PPUSH
33055: CALL_OW 2
33059: ST_TO_ADDR
33060: GO 33142
// for j = 1 to result do
33062: LD_ADDR_VAR 0 8
33066: PUSH
33067: DOUBLE
33068: LD_INT 1
33070: DEC
33071: ST_TO_ADDR
33072: LD_VAR 0 6
33076: PUSH
33077: FOR_TO
33078: IFFALSE 33140
// begin if tmp < result [ j ] [ 2 ] then
33080: LD_VAR 0 9
33084: PUSH
33085: LD_VAR 0 6
33089: PUSH
33090: LD_VAR 0 8
33094: ARRAY
33095: PUSH
33096: LD_INT 2
33098: ARRAY
33099: LESS
33100: IFFALSE 33138
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33102: LD_ADDR_VAR 0 6
33106: PUSH
33107: LD_VAR 0 6
33111: PPUSH
33112: LD_VAR 0 8
33116: PPUSH
33117: LD_VAR 0 7
33121: PUSH
33122: LD_VAR 0 9
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PPUSH
33131: CALL_OW 2
33135: ST_TO_ADDR
// break ;
33136: GO 33140
// end ; end ;
33138: GO 33077
33140: POP
33141: POP
// end ; end ;
33142: GO 32941
33144: POP
33145: POP
// if result and not asc then
33146: LD_VAR 0 6
33150: PUSH
33151: LD_VAR 0 4
33155: NOT
33156: AND
33157: IFFALSE 33232
// begin tmp := result ;
33159: LD_ADDR_VAR 0 9
33163: PUSH
33164: LD_VAR 0 6
33168: ST_TO_ADDR
// for i = tmp downto 1 do
33169: LD_ADDR_VAR 0 7
33173: PUSH
33174: DOUBLE
33175: LD_VAR 0 9
33179: INC
33180: ST_TO_ADDR
33181: LD_INT 1
33183: PUSH
33184: FOR_DOWNTO
33185: IFFALSE 33230
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33187: LD_ADDR_VAR 0 6
33191: PUSH
33192: LD_VAR 0 6
33196: PPUSH
33197: LD_VAR 0 9
33201: PUSH
33202: LD_VAR 0 7
33206: MINUS
33207: PUSH
33208: LD_INT 1
33210: PLUS
33211: PPUSH
33212: LD_VAR 0 9
33216: PUSH
33217: LD_VAR 0 7
33221: ARRAY
33222: PPUSH
33223: CALL_OW 1
33227: ST_TO_ADDR
33228: GO 33184
33230: POP
33231: POP
// end ; tmp := [ ] ;
33232: LD_ADDR_VAR 0 9
33236: PUSH
33237: EMPTY
33238: ST_TO_ADDR
// if mode then
33239: LD_VAR 0 5
33243: IFFALSE 33312
// begin for i = 1 to result do
33245: LD_ADDR_VAR 0 7
33249: PUSH
33250: DOUBLE
33251: LD_INT 1
33253: DEC
33254: ST_TO_ADDR
33255: LD_VAR 0 6
33259: PUSH
33260: FOR_TO
33261: IFFALSE 33300
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33263: LD_ADDR_VAR 0 9
33267: PUSH
33268: LD_VAR 0 9
33272: PPUSH
33273: LD_VAR 0 7
33277: PPUSH
33278: LD_VAR 0 6
33282: PUSH
33283: LD_VAR 0 7
33287: ARRAY
33288: PUSH
33289: LD_INT 1
33291: ARRAY
33292: PPUSH
33293: CALL_OW 1
33297: ST_TO_ADDR
33298: GO 33260
33300: POP
33301: POP
// result := tmp ;
33302: LD_ADDR_VAR 0 6
33306: PUSH
33307: LD_VAR 0 9
33311: ST_TO_ADDR
// end ; end ;
33312: LD_VAR 0 6
33316: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33317: LD_INT 0
33319: PPUSH
33320: PPUSH
33321: PPUSH
33322: PPUSH
33323: PPUSH
33324: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33325: LD_ADDR_VAR 0 5
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: LD_INT 0
33338: PUSH
33339: EMPTY
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: ST_TO_ADDR
// if not x or not y then
33347: LD_VAR 0 2
33351: NOT
33352: PUSH
33353: LD_VAR 0 3
33357: NOT
33358: OR
33359: IFFALSE 33363
// exit ;
33361: GO 35015
// if not range then
33363: LD_VAR 0 4
33367: NOT
33368: IFFALSE 33378
// range := 10 ;
33370: LD_ADDR_VAR 0 4
33374: PUSH
33375: LD_INT 10
33377: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33378: LD_ADDR_VAR 0 8
33382: PUSH
33383: LD_INT 81
33385: PUSH
33386: LD_VAR 0 1
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 92
33397: PUSH
33398: LD_VAR 0 2
33402: PUSH
33403: LD_VAR 0 3
33407: PUSH
33408: LD_VAR 0 4
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 3
33421: PUSH
33422: LD_INT 21
33424: PUSH
33425: LD_INT 3
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: LIST
33440: PPUSH
33441: CALL_OW 69
33445: ST_TO_ADDR
// if not tmp then
33446: LD_VAR 0 8
33450: NOT
33451: IFFALSE 33455
// exit ;
33453: GO 35015
// for i in tmp do
33455: LD_ADDR_VAR 0 6
33459: PUSH
33460: LD_VAR 0 8
33464: PUSH
33465: FOR_IN
33466: IFFALSE 34990
// begin points := [ 0 , 0 , 0 ] ;
33468: LD_ADDR_VAR 0 9
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: LD_INT 0
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: LIST
33486: ST_TO_ADDR
// bpoints := 1 ;
33487: LD_ADDR_VAR 0 10
33491: PUSH
33492: LD_INT 1
33494: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33495: LD_VAR 0 6
33499: PPUSH
33500: CALL_OW 247
33504: PUSH
33505: LD_INT 1
33507: DOUBLE
33508: EQUAL
33509: IFTRUE 33513
33511: GO 34091
33513: POP
// begin if GetClass ( i ) = 1 then
33514: LD_VAR 0 6
33518: PPUSH
33519: CALL_OW 257
33523: PUSH
33524: LD_INT 1
33526: EQUAL
33527: IFFALSE 33548
// points := [ 10 , 5 , 3 ] ;
33529: LD_ADDR_VAR 0 9
33533: PUSH
33534: LD_INT 10
33536: PUSH
33537: LD_INT 5
33539: PUSH
33540: LD_INT 3
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33548: LD_VAR 0 6
33552: PPUSH
33553: CALL_OW 257
33557: PUSH
33558: LD_INT 2
33560: PUSH
33561: LD_INT 3
33563: PUSH
33564: LD_INT 4
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: LIST
33571: IN
33572: IFFALSE 33593
// points := [ 3 , 2 , 1 ] ;
33574: LD_ADDR_VAR 0 9
33578: PUSH
33579: LD_INT 3
33581: PUSH
33582: LD_INT 2
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33593: LD_VAR 0 6
33597: PPUSH
33598: CALL_OW 257
33602: PUSH
33603: LD_INT 5
33605: EQUAL
33606: IFFALSE 33627
// points := [ 130 , 5 , 2 ] ;
33608: LD_ADDR_VAR 0 9
33612: PUSH
33613: LD_INT 130
33615: PUSH
33616: LD_INT 5
33618: PUSH
33619: LD_INT 2
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: LIST
33626: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33627: LD_VAR 0 6
33631: PPUSH
33632: CALL_OW 257
33636: PUSH
33637: LD_INT 8
33639: EQUAL
33640: IFFALSE 33661
// points := [ 35 , 35 , 30 ] ;
33642: LD_ADDR_VAR 0 9
33646: PUSH
33647: LD_INT 35
33649: PUSH
33650: LD_INT 35
33652: PUSH
33653: LD_INT 30
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: LIST
33660: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33661: LD_VAR 0 6
33665: PPUSH
33666: CALL_OW 257
33670: PUSH
33671: LD_INT 9
33673: EQUAL
33674: IFFALSE 33695
// points := [ 20 , 55 , 40 ] ;
33676: LD_ADDR_VAR 0 9
33680: PUSH
33681: LD_INT 20
33683: PUSH
33684: LD_INT 55
33686: PUSH
33687: LD_INT 40
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: LIST
33694: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33695: LD_VAR 0 6
33699: PPUSH
33700: CALL_OW 257
33704: PUSH
33705: LD_INT 12
33707: PUSH
33708: LD_INT 16
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: IN
33715: IFFALSE 33736
// points := [ 5 , 3 , 2 ] ;
33717: LD_ADDR_VAR 0 9
33721: PUSH
33722: LD_INT 5
33724: PUSH
33725: LD_INT 3
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: LIST
33735: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33736: LD_VAR 0 6
33740: PPUSH
33741: CALL_OW 257
33745: PUSH
33746: LD_INT 17
33748: EQUAL
33749: IFFALSE 33770
// points := [ 100 , 50 , 75 ] ;
33751: LD_ADDR_VAR 0 9
33755: PUSH
33756: LD_INT 100
33758: PUSH
33759: LD_INT 50
33761: PUSH
33762: LD_INT 75
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: LIST
33769: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33770: LD_VAR 0 6
33774: PPUSH
33775: CALL_OW 257
33779: PUSH
33780: LD_INT 15
33782: EQUAL
33783: IFFALSE 33804
// points := [ 10 , 5 , 3 ] ;
33785: LD_ADDR_VAR 0 9
33789: PUSH
33790: LD_INT 10
33792: PUSH
33793: LD_INT 5
33795: PUSH
33796: LD_INT 3
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33804: LD_VAR 0 6
33808: PPUSH
33809: CALL_OW 257
33813: PUSH
33814: LD_INT 14
33816: EQUAL
33817: IFFALSE 33838
// points := [ 10 , 0 , 0 ] ;
33819: LD_ADDR_VAR 0 9
33823: PUSH
33824: LD_INT 10
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: LIST
33837: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33838: LD_VAR 0 6
33842: PPUSH
33843: CALL_OW 257
33847: PUSH
33848: LD_INT 11
33850: EQUAL
33851: IFFALSE 33872
// points := [ 30 , 10 , 5 ] ;
33853: LD_ADDR_VAR 0 9
33857: PUSH
33858: LD_INT 30
33860: PUSH
33861: LD_INT 10
33863: PUSH
33864: LD_INT 5
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: LIST
33871: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33872: LD_VAR 0 1
33876: PPUSH
33877: LD_INT 5
33879: PPUSH
33880: CALL_OW 321
33884: PUSH
33885: LD_INT 2
33887: EQUAL
33888: IFFALSE 33905
// bpoints := bpoints * 1.8 ;
33890: LD_ADDR_VAR 0 10
33894: PUSH
33895: LD_VAR 0 10
33899: PUSH
33900: LD_REAL  1.80000000000000E+0000
33903: MUL
33904: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33905: LD_VAR 0 6
33909: PPUSH
33910: CALL_OW 257
33914: PUSH
33915: LD_INT 1
33917: PUSH
33918: LD_INT 2
33920: PUSH
33921: LD_INT 3
33923: PUSH
33924: LD_INT 4
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: IN
33933: PUSH
33934: LD_VAR 0 1
33938: PPUSH
33939: LD_INT 51
33941: PPUSH
33942: CALL_OW 321
33946: PUSH
33947: LD_INT 2
33949: EQUAL
33950: AND
33951: IFFALSE 33968
// bpoints := bpoints * 1.2 ;
33953: LD_ADDR_VAR 0 10
33957: PUSH
33958: LD_VAR 0 10
33962: PUSH
33963: LD_REAL  1.20000000000000E+0000
33966: MUL
33967: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33968: LD_VAR 0 6
33972: PPUSH
33973: CALL_OW 257
33977: PUSH
33978: LD_INT 5
33980: PUSH
33981: LD_INT 7
33983: PUSH
33984: LD_INT 9
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: IN
33992: PUSH
33993: LD_VAR 0 1
33997: PPUSH
33998: LD_INT 52
34000: PPUSH
34001: CALL_OW 321
34005: PUSH
34006: LD_INT 2
34008: EQUAL
34009: AND
34010: IFFALSE 34027
// bpoints := bpoints * 1.5 ;
34012: LD_ADDR_VAR 0 10
34016: PUSH
34017: LD_VAR 0 10
34021: PUSH
34022: LD_REAL  1.50000000000000E+0000
34025: MUL
34026: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34027: LD_VAR 0 1
34031: PPUSH
34032: LD_INT 66
34034: PPUSH
34035: CALL_OW 321
34039: PUSH
34040: LD_INT 2
34042: EQUAL
34043: IFFALSE 34060
// bpoints := bpoints * 1.1 ;
34045: LD_ADDR_VAR 0 10
34049: PUSH
34050: LD_VAR 0 10
34054: PUSH
34055: LD_REAL  1.10000000000000E+0000
34058: MUL
34059: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34060: LD_ADDR_VAR 0 10
34064: PUSH
34065: LD_VAR 0 10
34069: PUSH
34070: LD_VAR 0 6
34074: PPUSH
34075: LD_INT 1
34077: PPUSH
34078: CALL_OW 259
34082: PUSH
34083: LD_REAL  1.15000000000000E+0000
34086: MUL
34087: MUL
34088: ST_TO_ADDR
// end ; unit_vehicle :
34089: GO 34919
34091: LD_INT 2
34093: DOUBLE
34094: EQUAL
34095: IFTRUE 34099
34097: GO 34907
34099: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34100: LD_VAR 0 6
34104: PPUSH
34105: CALL_OW 264
34109: PUSH
34110: LD_INT 2
34112: PUSH
34113: LD_INT 42
34115: PUSH
34116: LD_INT 24
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: LIST
34123: IN
34124: IFFALSE 34145
// points := [ 25 , 5 , 3 ] ;
34126: LD_ADDR_VAR 0 9
34130: PUSH
34131: LD_INT 25
34133: PUSH
34134: LD_INT 5
34136: PUSH
34137: LD_INT 3
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: LIST
34144: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34145: LD_VAR 0 6
34149: PPUSH
34150: CALL_OW 264
34154: PUSH
34155: LD_INT 4
34157: PUSH
34158: LD_INT 43
34160: PUSH
34161: LD_INT 25
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: LIST
34168: IN
34169: IFFALSE 34190
// points := [ 40 , 15 , 5 ] ;
34171: LD_ADDR_VAR 0 9
34175: PUSH
34176: LD_INT 40
34178: PUSH
34179: LD_INT 15
34181: PUSH
34182: LD_INT 5
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: LIST
34189: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34190: LD_VAR 0 6
34194: PPUSH
34195: CALL_OW 264
34199: PUSH
34200: LD_INT 3
34202: PUSH
34203: LD_INT 23
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: IN
34210: IFFALSE 34231
// points := [ 7 , 25 , 8 ] ;
34212: LD_ADDR_VAR 0 9
34216: PUSH
34217: LD_INT 7
34219: PUSH
34220: LD_INT 25
34222: PUSH
34223: LD_INT 8
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: LIST
34230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34231: LD_VAR 0 6
34235: PPUSH
34236: CALL_OW 264
34240: PUSH
34241: LD_INT 5
34243: PUSH
34244: LD_INT 27
34246: PUSH
34247: LD_INT 44
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: LIST
34254: IN
34255: IFFALSE 34276
// points := [ 14 , 50 , 16 ] ;
34257: LD_ADDR_VAR 0 9
34261: PUSH
34262: LD_INT 14
34264: PUSH
34265: LD_INT 50
34267: PUSH
34268: LD_INT 16
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: LIST
34275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34276: LD_VAR 0 6
34280: PPUSH
34281: CALL_OW 264
34285: PUSH
34286: LD_INT 6
34288: PUSH
34289: LD_INT 46
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: IN
34296: IFFALSE 34317
// points := [ 32 , 120 , 70 ] ;
34298: LD_ADDR_VAR 0 9
34302: PUSH
34303: LD_INT 32
34305: PUSH
34306: LD_INT 120
34308: PUSH
34309: LD_INT 70
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34317: LD_VAR 0 6
34321: PPUSH
34322: CALL_OW 264
34326: PUSH
34327: LD_INT 7
34329: PUSH
34330: LD_INT 28
34332: PUSH
34333: LD_INT 45
34335: PUSH
34336: LD_EXP 30
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: IN
34347: IFFALSE 34368
// points := [ 35 , 20 , 45 ] ;
34349: LD_ADDR_VAR 0 9
34353: PUSH
34354: LD_INT 35
34356: PUSH
34357: LD_INT 20
34359: PUSH
34360: LD_INT 45
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: LIST
34367: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34368: LD_VAR 0 6
34372: PPUSH
34373: CALL_OW 264
34377: PUSH
34378: LD_INT 47
34380: PUSH
34381: EMPTY
34382: LIST
34383: IN
34384: IFFALSE 34405
// points := [ 67 , 45 , 75 ] ;
34386: LD_ADDR_VAR 0 9
34390: PUSH
34391: LD_INT 67
34393: PUSH
34394: LD_INT 45
34396: PUSH
34397: LD_INT 75
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: LIST
34404: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34405: LD_VAR 0 6
34409: PPUSH
34410: CALL_OW 264
34414: PUSH
34415: LD_INT 26
34417: PUSH
34418: EMPTY
34419: LIST
34420: IN
34421: IFFALSE 34442
// points := [ 120 , 30 , 80 ] ;
34423: LD_ADDR_VAR 0 9
34427: PUSH
34428: LD_INT 120
34430: PUSH
34431: LD_INT 30
34433: PUSH
34434: LD_INT 80
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: LIST
34441: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34442: LD_VAR 0 6
34446: PPUSH
34447: CALL_OW 264
34451: PUSH
34452: LD_INT 22
34454: PUSH
34455: EMPTY
34456: LIST
34457: IN
34458: IFFALSE 34479
// points := [ 40 , 1 , 1 ] ;
34460: LD_ADDR_VAR 0 9
34464: PUSH
34465: LD_INT 40
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: LD_INT 1
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: LIST
34478: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34479: LD_VAR 0 6
34483: PPUSH
34484: CALL_OW 264
34488: PUSH
34489: LD_INT 29
34491: PUSH
34492: EMPTY
34493: LIST
34494: IN
34495: IFFALSE 34516
// points := [ 70 , 200 , 400 ] ;
34497: LD_ADDR_VAR 0 9
34501: PUSH
34502: LD_INT 70
34504: PUSH
34505: LD_INT 200
34507: PUSH
34508: LD_INT 400
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: LIST
34515: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34516: LD_VAR 0 6
34520: PPUSH
34521: CALL_OW 264
34525: PUSH
34526: LD_INT 14
34528: PUSH
34529: LD_INT 53
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: IN
34536: IFFALSE 34557
// points := [ 40 , 10 , 20 ] ;
34538: LD_ADDR_VAR 0 9
34542: PUSH
34543: LD_INT 40
34545: PUSH
34546: LD_INT 10
34548: PUSH
34549: LD_INT 20
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: LIST
34556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34557: LD_VAR 0 6
34561: PPUSH
34562: CALL_OW 264
34566: PUSH
34567: LD_INT 9
34569: PUSH
34570: EMPTY
34571: LIST
34572: IN
34573: IFFALSE 34594
// points := [ 5 , 70 , 20 ] ;
34575: LD_ADDR_VAR 0 9
34579: PUSH
34580: LD_INT 5
34582: PUSH
34583: LD_INT 70
34585: PUSH
34586: LD_INT 20
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: LIST
34593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34594: LD_VAR 0 6
34598: PPUSH
34599: CALL_OW 264
34603: PUSH
34604: LD_INT 10
34606: PUSH
34607: EMPTY
34608: LIST
34609: IN
34610: IFFALSE 34631
// points := [ 35 , 110 , 70 ] ;
34612: LD_ADDR_VAR 0 9
34616: PUSH
34617: LD_INT 35
34619: PUSH
34620: LD_INT 110
34622: PUSH
34623: LD_INT 70
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: LIST
34630: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34631: LD_VAR 0 6
34635: PPUSH
34636: CALL_OW 265
34640: PUSH
34641: LD_INT 25
34643: EQUAL
34644: IFFALSE 34665
// points := [ 80 , 65 , 100 ] ;
34646: LD_ADDR_VAR 0 9
34650: PUSH
34651: LD_INT 80
34653: PUSH
34654: LD_INT 65
34656: PUSH
34657: LD_INT 100
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: LIST
34664: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34665: LD_VAR 0 6
34669: PPUSH
34670: CALL_OW 263
34674: PUSH
34675: LD_INT 1
34677: EQUAL
34678: IFFALSE 34713
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34680: LD_ADDR_VAR 0 10
34684: PUSH
34685: LD_VAR 0 10
34689: PUSH
34690: LD_VAR 0 6
34694: PPUSH
34695: CALL_OW 311
34699: PPUSH
34700: LD_INT 3
34702: PPUSH
34703: CALL_OW 259
34707: PUSH
34708: LD_INT 4
34710: MUL
34711: MUL
34712: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34713: LD_VAR 0 6
34717: PPUSH
34718: CALL_OW 263
34722: PUSH
34723: LD_INT 2
34725: EQUAL
34726: IFFALSE 34777
// begin j := IsControledBy ( i ) ;
34728: LD_ADDR_VAR 0 7
34732: PUSH
34733: LD_VAR 0 6
34737: PPUSH
34738: CALL_OW 312
34742: ST_TO_ADDR
// if j then
34743: LD_VAR 0 7
34747: IFFALSE 34777
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34749: LD_ADDR_VAR 0 10
34753: PUSH
34754: LD_VAR 0 10
34758: PUSH
34759: LD_VAR 0 7
34763: PPUSH
34764: LD_INT 3
34766: PPUSH
34767: CALL_OW 259
34771: PUSH
34772: LD_INT 3
34774: MUL
34775: MUL
34776: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34777: LD_VAR 0 6
34781: PPUSH
34782: CALL_OW 264
34786: PUSH
34787: LD_INT 5
34789: PUSH
34790: LD_INT 6
34792: PUSH
34793: LD_INT 46
34795: PUSH
34796: LD_INT 44
34798: PUSH
34799: LD_INT 47
34801: PUSH
34802: LD_INT 45
34804: PUSH
34805: LD_INT 28
34807: PUSH
34808: LD_INT 7
34810: PUSH
34811: LD_INT 27
34813: PUSH
34814: LD_INT 29
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: IN
34829: PUSH
34830: LD_VAR 0 1
34834: PPUSH
34835: LD_INT 52
34837: PPUSH
34838: CALL_OW 321
34842: PUSH
34843: LD_INT 2
34845: EQUAL
34846: AND
34847: IFFALSE 34864
// bpoints := bpoints * 1.2 ;
34849: LD_ADDR_VAR 0 10
34853: PUSH
34854: LD_VAR 0 10
34858: PUSH
34859: LD_REAL  1.20000000000000E+0000
34862: MUL
34863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34864: LD_VAR 0 6
34868: PPUSH
34869: CALL_OW 264
34873: PUSH
34874: LD_INT 6
34876: PUSH
34877: LD_INT 46
34879: PUSH
34880: LD_INT 47
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: IN
34888: IFFALSE 34905
// bpoints := bpoints * 1.2 ;
34890: LD_ADDR_VAR 0 10
34894: PUSH
34895: LD_VAR 0 10
34899: PUSH
34900: LD_REAL  1.20000000000000E+0000
34903: MUL
34904: ST_TO_ADDR
// end ; unit_building :
34905: GO 34919
34907: LD_INT 3
34909: DOUBLE
34910: EQUAL
34911: IFTRUE 34915
34913: GO 34918
34915: POP
// ; end ;
34916: GO 34919
34918: POP
// for j = 1 to 3 do
34919: LD_ADDR_VAR 0 7
34923: PUSH
34924: DOUBLE
34925: LD_INT 1
34927: DEC
34928: ST_TO_ADDR
34929: LD_INT 3
34931: PUSH
34932: FOR_TO
34933: IFFALSE 34986
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34935: LD_ADDR_VAR 0 5
34939: PUSH
34940: LD_VAR 0 5
34944: PPUSH
34945: LD_VAR 0 7
34949: PPUSH
34950: LD_VAR 0 5
34954: PUSH
34955: LD_VAR 0 7
34959: ARRAY
34960: PUSH
34961: LD_VAR 0 9
34965: PUSH
34966: LD_VAR 0 7
34970: ARRAY
34971: PUSH
34972: LD_VAR 0 10
34976: MUL
34977: PLUS
34978: PPUSH
34979: CALL_OW 1
34983: ST_TO_ADDR
34984: GO 34932
34986: POP
34987: POP
// end ;
34988: GO 33465
34990: POP
34991: POP
// result := Replace ( result , 4 , tmp ) ;
34992: LD_ADDR_VAR 0 5
34996: PUSH
34997: LD_VAR 0 5
35001: PPUSH
35002: LD_INT 4
35004: PPUSH
35005: LD_VAR 0 8
35009: PPUSH
35010: CALL_OW 1
35014: ST_TO_ADDR
// end ;
35015: LD_VAR 0 5
35019: RET
// export function DangerAtRange ( unit , range ) ; begin
35020: LD_INT 0
35022: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35023: LD_ADDR_VAR 0 3
35027: PUSH
35028: LD_VAR 0 1
35032: PPUSH
35033: CALL_OW 255
35037: PPUSH
35038: LD_VAR 0 1
35042: PPUSH
35043: CALL_OW 250
35047: PPUSH
35048: LD_VAR 0 1
35052: PPUSH
35053: CALL_OW 251
35057: PPUSH
35058: LD_VAR 0 2
35062: PPUSH
35063: CALL 33317 0 4
35067: ST_TO_ADDR
// end ;
35068: LD_VAR 0 3
35072: RET
// export function DangerInArea ( side , area ) ; begin
35073: LD_INT 0
35075: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35076: LD_ADDR_VAR 0 3
35080: PUSH
35081: LD_VAR 0 2
35085: PPUSH
35086: LD_INT 81
35088: PUSH
35089: LD_VAR 0 1
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PPUSH
35098: CALL_OW 70
35102: ST_TO_ADDR
// end ;
35103: LD_VAR 0 3
35107: RET
// export function IsExtension ( b ) ; begin
35108: LD_INT 0
35110: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35111: LD_ADDR_VAR 0 2
35115: PUSH
35116: LD_VAR 0 1
35120: PUSH
35121: LD_INT 23
35123: PUSH
35124: LD_INT 20
35126: PUSH
35127: LD_INT 22
35129: PUSH
35130: LD_INT 17
35132: PUSH
35133: LD_INT 24
35135: PUSH
35136: LD_INT 21
35138: PUSH
35139: LD_INT 19
35141: PUSH
35142: LD_INT 16
35144: PUSH
35145: LD_INT 25
35147: PUSH
35148: LD_INT 18
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: IN
35163: ST_TO_ADDR
// end ;
35164: LD_VAR 0 2
35168: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35169: LD_INT 0
35171: PPUSH
35172: PPUSH
35173: PPUSH
// result := [ ] ;
35174: LD_ADDR_VAR 0 4
35178: PUSH
35179: EMPTY
35180: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35181: LD_ADDR_VAR 0 5
35185: PUSH
35186: LD_VAR 0 2
35190: PPUSH
35191: LD_INT 21
35193: PUSH
35194: LD_INT 3
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PPUSH
35201: CALL_OW 70
35205: ST_TO_ADDR
// if not tmp then
35206: LD_VAR 0 5
35210: NOT
35211: IFFALSE 35215
// exit ;
35213: GO 35279
// if checkLink then
35215: LD_VAR 0 3
35219: IFFALSE 35269
// begin for i in tmp do
35221: LD_ADDR_VAR 0 6
35225: PUSH
35226: LD_VAR 0 5
35230: PUSH
35231: FOR_IN
35232: IFFALSE 35267
// if GetBase ( i ) <> base then
35234: LD_VAR 0 6
35238: PPUSH
35239: CALL_OW 274
35243: PUSH
35244: LD_VAR 0 1
35248: NONEQUAL
35249: IFFALSE 35265
// ComLinkToBase ( base , i ) ;
35251: LD_VAR 0 1
35255: PPUSH
35256: LD_VAR 0 6
35260: PPUSH
35261: CALL_OW 169
35265: GO 35231
35267: POP
35268: POP
// end ; result := tmp ;
35269: LD_ADDR_VAR 0 4
35273: PUSH
35274: LD_VAR 0 5
35278: ST_TO_ADDR
// end ;
35279: LD_VAR 0 4
35283: RET
// export function ComComplete ( units , b ) ; var i ; begin
35284: LD_INT 0
35286: PPUSH
35287: PPUSH
// if not units then
35288: LD_VAR 0 1
35292: NOT
35293: IFFALSE 35297
// exit ;
35295: GO 35387
// for i in units do
35297: LD_ADDR_VAR 0 4
35301: PUSH
35302: LD_VAR 0 1
35306: PUSH
35307: FOR_IN
35308: IFFALSE 35385
// if BuildingStatus ( b ) = bs_build then
35310: LD_VAR 0 2
35314: PPUSH
35315: CALL_OW 461
35319: PUSH
35320: LD_INT 1
35322: EQUAL
35323: IFFALSE 35383
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35325: LD_VAR 0 4
35329: PPUSH
35330: LD_STRING h
35332: PUSH
35333: LD_VAR 0 2
35337: PPUSH
35338: CALL_OW 250
35342: PUSH
35343: LD_VAR 0 2
35347: PPUSH
35348: CALL_OW 251
35352: PUSH
35353: LD_VAR 0 2
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: PUSH
35376: EMPTY
35377: LIST
35378: PPUSH
35379: CALL_OW 446
35383: GO 35307
35385: POP
35386: POP
// end ;
35387: LD_VAR 0 3
35391: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35392: LD_INT 0
35394: PPUSH
35395: PPUSH
35396: PPUSH
35397: PPUSH
35398: PPUSH
35399: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35400: LD_VAR 0 1
35404: NOT
35405: PUSH
35406: LD_VAR 0 1
35410: PPUSH
35411: CALL_OW 263
35415: PUSH
35416: LD_INT 2
35418: NONEQUAL
35419: OR
35420: IFFALSE 35424
// exit ;
35422: GO 35740
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35424: LD_ADDR_VAR 0 6
35428: PUSH
35429: LD_INT 22
35431: PUSH
35432: LD_VAR 0 1
35436: PPUSH
35437: CALL_OW 255
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 2
35448: PUSH
35449: LD_INT 30
35451: PUSH
35452: LD_INT 36
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 34
35461: PUSH
35462: LD_INT 31
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: LIST
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PPUSH
35478: CALL_OW 69
35482: ST_TO_ADDR
// if not tmp then
35483: LD_VAR 0 6
35487: NOT
35488: IFFALSE 35492
// exit ;
35490: GO 35740
// result := [ ] ;
35492: LD_ADDR_VAR 0 2
35496: PUSH
35497: EMPTY
35498: ST_TO_ADDR
// for i in tmp do
35499: LD_ADDR_VAR 0 3
35503: PUSH
35504: LD_VAR 0 6
35508: PUSH
35509: FOR_IN
35510: IFFALSE 35581
// begin t := UnitsInside ( i ) ;
35512: LD_ADDR_VAR 0 4
35516: PUSH
35517: LD_VAR 0 3
35521: PPUSH
35522: CALL_OW 313
35526: ST_TO_ADDR
// if t then
35527: LD_VAR 0 4
35531: IFFALSE 35579
// for j in t do
35533: LD_ADDR_VAR 0 7
35537: PUSH
35538: LD_VAR 0 4
35542: PUSH
35543: FOR_IN
35544: IFFALSE 35577
// result := Replace ( result , result + 1 , j ) ;
35546: LD_ADDR_VAR 0 2
35550: PUSH
35551: LD_VAR 0 2
35555: PPUSH
35556: LD_VAR 0 2
35560: PUSH
35561: LD_INT 1
35563: PLUS
35564: PPUSH
35565: LD_VAR 0 7
35569: PPUSH
35570: CALL_OW 1
35574: ST_TO_ADDR
35575: GO 35543
35577: POP
35578: POP
// end ;
35579: GO 35509
35581: POP
35582: POP
// if not result then
35583: LD_VAR 0 2
35587: NOT
35588: IFFALSE 35592
// exit ;
35590: GO 35740
// mech := result [ 1 ] ;
35592: LD_ADDR_VAR 0 5
35596: PUSH
35597: LD_VAR 0 2
35601: PUSH
35602: LD_INT 1
35604: ARRAY
35605: ST_TO_ADDR
// if result > 1 then
35606: LD_VAR 0 2
35610: PUSH
35611: LD_INT 1
35613: GREATER
35614: IFFALSE 35726
// begin for i = 2 to result do
35616: LD_ADDR_VAR 0 3
35620: PUSH
35621: DOUBLE
35622: LD_INT 2
35624: DEC
35625: ST_TO_ADDR
35626: LD_VAR 0 2
35630: PUSH
35631: FOR_TO
35632: IFFALSE 35724
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35634: LD_ADDR_VAR 0 4
35638: PUSH
35639: LD_VAR 0 2
35643: PUSH
35644: LD_VAR 0 3
35648: ARRAY
35649: PPUSH
35650: LD_INT 3
35652: PPUSH
35653: CALL_OW 259
35657: PUSH
35658: LD_VAR 0 2
35662: PUSH
35663: LD_VAR 0 3
35667: ARRAY
35668: PPUSH
35669: CALL_OW 432
35673: MINUS
35674: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35675: LD_VAR 0 4
35679: PUSH
35680: LD_VAR 0 5
35684: PPUSH
35685: LD_INT 3
35687: PPUSH
35688: CALL_OW 259
35692: PUSH
35693: LD_VAR 0 5
35697: PPUSH
35698: CALL_OW 432
35702: MINUS
35703: GREATEREQUAL
35704: IFFALSE 35722
// mech := result [ i ] ;
35706: LD_ADDR_VAR 0 5
35710: PUSH
35711: LD_VAR 0 2
35715: PUSH
35716: LD_VAR 0 3
35720: ARRAY
35721: ST_TO_ADDR
// end ;
35722: GO 35631
35724: POP
35725: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35726: LD_VAR 0 1
35730: PPUSH
35731: LD_VAR 0 5
35735: PPUSH
35736: CALL_OW 135
// end ;
35740: LD_VAR 0 2
35744: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35745: LD_INT 0
35747: PPUSH
35748: PPUSH
35749: PPUSH
35750: PPUSH
35751: PPUSH
35752: PPUSH
35753: PPUSH
35754: PPUSH
35755: PPUSH
35756: PPUSH
35757: PPUSH
35758: PPUSH
35759: PPUSH
// result := [ ] ;
35760: LD_ADDR_VAR 0 7
35764: PUSH
35765: EMPTY
35766: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35767: LD_VAR 0 1
35771: PPUSH
35772: CALL_OW 266
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: IN
35787: NOT
35788: IFFALSE 35792
// exit ;
35790: GO 37426
// if name then
35792: LD_VAR 0 3
35796: IFFALSE 35812
// SetBName ( base_dep , name ) ;
35798: LD_VAR 0 1
35802: PPUSH
35803: LD_VAR 0 3
35807: PPUSH
35808: CALL_OW 500
// base := GetBase ( base_dep ) ;
35812: LD_ADDR_VAR 0 15
35816: PUSH
35817: LD_VAR 0 1
35821: PPUSH
35822: CALL_OW 274
35826: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35827: LD_ADDR_VAR 0 16
35831: PUSH
35832: LD_VAR 0 1
35836: PPUSH
35837: CALL_OW 255
35841: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35842: LD_ADDR_VAR 0 17
35846: PUSH
35847: LD_VAR 0 1
35851: PPUSH
35852: CALL_OW 248
35856: ST_TO_ADDR
// if sources then
35857: LD_VAR 0 5
35861: IFFALSE 35908
// for i = 1 to 3 do
35863: LD_ADDR_VAR 0 8
35867: PUSH
35868: DOUBLE
35869: LD_INT 1
35871: DEC
35872: ST_TO_ADDR
35873: LD_INT 3
35875: PUSH
35876: FOR_TO
35877: IFFALSE 35906
// AddResourceType ( base , i , sources [ i ] ) ;
35879: LD_VAR 0 15
35883: PPUSH
35884: LD_VAR 0 8
35888: PPUSH
35889: LD_VAR 0 5
35893: PUSH
35894: LD_VAR 0 8
35898: ARRAY
35899: PPUSH
35900: CALL_OW 276
35904: GO 35876
35906: POP
35907: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35908: LD_ADDR_VAR 0 18
35912: PUSH
35913: LD_VAR 0 15
35917: PPUSH
35918: LD_VAR 0 2
35922: PPUSH
35923: LD_INT 1
35925: PPUSH
35926: CALL 35169 0 3
35930: ST_TO_ADDR
// InitHc ;
35931: CALL_OW 19
// InitUc ;
35935: CALL_OW 18
// uc_side := side ;
35939: LD_ADDR_OWVAR 20
35943: PUSH
35944: LD_VAR 0 16
35948: ST_TO_ADDR
// uc_nation := nation ;
35949: LD_ADDR_OWVAR 21
35953: PUSH
35954: LD_VAR 0 17
35958: ST_TO_ADDR
// if buildings then
35959: LD_VAR 0 18
35963: IFFALSE 37285
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35965: LD_ADDR_VAR 0 19
35969: PUSH
35970: LD_VAR 0 18
35974: PPUSH
35975: LD_INT 2
35977: PUSH
35978: LD_INT 30
35980: PUSH
35981: LD_INT 29
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 30
35990: PUSH
35991: LD_INT 30
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: PPUSH
36003: CALL_OW 72
36007: ST_TO_ADDR
// if tmp then
36008: LD_VAR 0 19
36012: IFFALSE 36060
// for i in tmp do
36014: LD_ADDR_VAR 0 8
36018: PUSH
36019: LD_VAR 0 19
36023: PUSH
36024: FOR_IN
36025: IFFALSE 36058
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36027: LD_VAR 0 8
36031: PPUSH
36032: CALL_OW 250
36036: PPUSH
36037: LD_VAR 0 8
36041: PPUSH
36042: CALL_OW 251
36046: PPUSH
36047: LD_VAR 0 16
36051: PPUSH
36052: CALL_OW 441
36056: GO 36024
36058: POP
36059: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36060: LD_VAR 0 18
36064: PPUSH
36065: LD_INT 2
36067: PUSH
36068: LD_INT 30
36070: PUSH
36071: LD_INT 32
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 30
36080: PUSH
36081: LD_INT 33
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: PPUSH
36093: CALL_OW 72
36097: IFFALSE 36185
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36099: LD_ADDR_VAR 0 8
36103: PUSH
36104: LD_VAR 0 18
36108: PPUSH
36109: LD_INT 2
36111: PUSH
36112: LD_INT 30
36114: PUSH
36115: LD_INT 32
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 30
36124: PUSH
36125: LD_INT 33
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: LIST
36136: PPUSH
36137: CALL_OW 72
36141: PUSH
36142: FOR_IN
36143: IFFALSE 36183
// begin if not GetBWeapon ( i ) then
36145: LD_VAR 0 8
36149: PPUSH
36150: CALL_OW 269
36154: NOT
36155: IFFALSE 36181
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36157: LD_VAR 0 8
36161: PPUSH
36162: LD_VAR 0 8
36166: PPUSH
36167: LD_VAR 0 2
36171: PPUSH
36172: CALL 37431 0 2
36176: PPUSH
36177: CALL_OW 431
// end ;
36181: GO 36142
36183: POP
36184: POP
// end ; for i = 1 to personel do
36185: LD_ADDR_VAR 0 8
36189: PUSH
36190: DOUBLE
36191: LD_INT 1
36193: DEC
36194: ST_TO_ADDR
36195: LD_VAR 0 6
36199: PUSH
36200: FOR_TO
36201: IFFALSE 37265
// begin if i > 4 then
36203: LD_VAR 0 8
36207: PUSH
36208: LD_INT 4
36210: GREATER
36211: IFFALSE 36215
// break ;
36213: GO 37265
// case i of 1 :
36215: LD_VAR 0 8
36219: PUSH
36220: LD_INT 1
36222: DOUBLE
36223: EQUAL
36224: IFTRUE 36228
36226: GO 36308
36228: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36229: LD_ADDR_VAR 0 12
36233: PUSH
36234: LD_VAR 0 18
36238: PPUSH
36239: LD_INT 22
36241: PUSH
36242: LD_VAR 0 16
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 58
36253: PUSH
36254: EMPTY
36255: LIST
36256: PUSH
36257: LD_INT 2
36259: PUSH
36260: LD_INT 30
36262: PUSH
36263: LD_INT 32
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 30
36272: PUSH
36273: LD_INT 4
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 30
36282: PUSH
36283: LD_INT 5
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: PPUSH
36301: CALL_OW 72
36305: ST_TO_ADDR
36306: GO 36530
36308: LD_INT 2
36310: DOUBLE
36311: EQUAL
36312: IFTRUE 36316
36314: GO 36378
36316: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36317: LD_ADDR_VAR 0 12
36321: PUSH
36322: LD_VAR 0 18
36326: PPUSH
36327: LD_INT 22
36329: PUSH
36330: LD_VAR 0 16
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: LD_INT 30
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 30
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: LIST
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PPUSH
36371: CALL_OW 72
36375: ST_TO_ADDR
36376: GO 36530
36378: LD_INT 3
36380: DOUBLE
36381: EQUAL
36382: IFTRUE 36386
36384: GO 36448
36386: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36387: LD_ADDR_VAR 0 12
36391: PUSH
36392: LD_VAR 0 18
36396: PPUSH
36397: LD_INT 22
36399: PUSH
36400: LD_VAR 0 16
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 2
36411: PUSH
36412: LD_INT 30
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 30
36424: PUSH
36425: LD_INT 3
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PPUSH
36441: CALL_OW 72
36445: ST_TO_ADDR
36446: GO 36530
36448: LD_INT 4
36450: DOUBLE
36451: EQUAL
36452: IFTRUE 36456
36454: GO 36529
36456: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36457: LD_ADDR_VAR 0 12
36461: PUSH
36462: LD_VAR 0 18
36466: PPUSH
36467: LD_INT 22
36469: PUSH
36470: LD_VAR 0 16
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: LD_INT 30
36484: PUSH
36485: LD_INT 6
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 30
36494: PUSH
36495: LD_INT 7
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 30
36504: PUSH
36505: LD_INT 8
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PPUSH
36522: CALL_OW 72
36526: ST_TO_ADDR
36527: GO 36530
36529: POP
// if i = 1 then
36530: LD_VAR 0 8
36534: PUSH
36535: LD_INT 1
36537: EQUAL
36538: IFFALSE 36649
// begin tmp := [ ] ;
36540: LD_ADDR_VAR 0 19
36544: PUSH
36545: EMPTY
36546: ST_TO_ADDR
// for j in f do
36547: LD_ADDR_VAR 0 9
36551: PUSH
36552: LD_VAR 0 12
36556: PUSH
36557: FOR_IN
36558: IFFALSE 36631
// if GetBType ( j ) = b_bunker then
36560: LD_VAR 0 9
36564: PPUSH
36565: CALL_OW 266
36569: PUSH
36570: LD_INT 32
36572: EQUAL
36573: IFFALSE 36600
// tmp := Insert ( tmp , 1 , j ) else
36575: LD_ADDR_VAR 0 19
36579: PUSH
36580: LD_VAR 0 19
36584: PPUSH
36585: LD_INT 1
36587: PPUSH
36588: LD_VAR 0 9
36592: PPUSH
36593: CALL_OW 2
36597: ST_TO_ADDR
36598: GO 36629
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36600: LD_ADDR_VAR 0 19
36604: PUSH
36605: LD_VAR 0 19
36609: PPUSH
36610: LD_VAR 0 19
36614: PUSH
36615: LD_INT 1
36617: PLUS
36618: PPUSH
36619: LD_VAR 0 9
36623: PPUSH
36624: CALL_OW 2
36628: ST_TO_ADDR
36629: GO 36557
36631: POP
36632: POP
// if tmp then
36633: LD_VAR 0 19
36637: IFFALSE 36649
// f := tmp ;
36639: LD_ADDR_VAR 0 12
36643: PUSH
36644: LD_VAR 0 19
36648: ST_TO_ADDR
// end ; x := personel [ i ] ;
36649: LD_ADDR_VAR 0 13
36653: PUSH
36654: LD_VAR 0 6
36658: PUSH
36659: LD_VAR 0 8
36663: ARRAY
36664: ST_TO_ADDR
// if x = - 1 then
36665: LD_VAR 0 13
36669: PUSH
36670: LD_INT 1
36672: NEG
36673: EQUAL
36674: IFFALSE 36883
// begin for j in f do
36676: LD_ADDR_VAR 0 9
36680: PUSH
36681: LD_VAR 0 12
36685: PUSH
36686: FOR_IN
36687: IFFALSE 36879
// repeat InitHc ;
36689: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36693: LD_VAR 0 9
36697: PPUSH
36698: CALL_OW 266
36702: PUSH
36703: LD_INT 5
36705: EQUAL
36706: IFFALSE 36776
// begin if UnitsInside ( j ) < 3 then
36708: LD_VAR 0 9
36712: PPUSH
36713: CALL_OW 313
36717: PUSH
36718: LD_INT 3
36720: LESS
36721: IFFALSE 36757
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36723: LD_INT 0
36725: PPUSH
36726: LD_INT 5
36728: PUSH
36729: LD_INT 8
36731: PUSH
36732: LD_INT 9
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: PUSH
36740: LD_VAR 0 17
36744: ARRAY
36745: PPUSH
36746: LD_VAR 0 4
36750: PPUSH
36751: CALL_OW 380
36755: GO 36774
// PrepareHuman ( false , i , skill ) ;
36757: LD_INT 0
36759: PPUSH
36760: LD_VAR 0 8
36764: PPUSH
36765: LD_VAR 0 4
36769: PPUSH
36770: CALL_OW 380
// end else
36774: GO 36793
// PrepareHuman ( false , i , skill ) ;
36776: LD_INT 0
36778: PPUSH
36779: LD_VAR 0 8
36783: PPUSH
36784: LD_VAR 0 4
36788: PPUSH
36789: CALL_OW 380
// un := CreateHuman ;
36793: LD_ADDR_VAR 0 14
36797: PUSH
36798: CALL_OW 44
36802: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36803: LD_ADDR_VAR 0 7
36807: PUSH
36808: LD_VAR 0 7
36812: PPUSH
36813: LD_INT 1
36815: PPUSH
36816: LD_VAR 0 14
36820: PPUSH
36821: CALL_OW 2
36825: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36826: LD_VAR 0 14
36830: PPUSH
36831: LD_VAR 0 9
36835: PPUSH
36836: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36840: LD_VAR 0 9
36844: PPUSH
36845: CALL_OW 313
36849: PUSH
36850: LD_INT 6
36852: EQUAL
36853: PUSH
36854: LD_VAR 0 9
36858: PPUSH
36859: CALL_OW 266
36863: PUSH
36864: LD_INT 32
36866: PUSH
36867: LD_INT 31
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: IN
36874: OR
36875: IFFALSE 36689
36877: GO 36686
36879: POP
36880: POP
// end else
36881: GO 37263
// for j = 1 to x do
36883: LD_ADDR_VAR 0 9
36887: PUSH
36888: DOUBLE
36889: LD_INT 1
36891: DEC
36892: ST_TO_ADDR
36893: LD_VAR 0 13
36897: PUSH
36898: FOR_TO
36899: IFFALSE 37261
// begin InitHc ;
36901: CALL_OW 19
// if not f then
36905: LD_VAR 0 12
36909: NOT
36910: IFFALSE 36999
// begin PrepareHuman ( false , i , skill ) ;
36912: LD_INT 0
36914: PPUSH
36915: LD_VAR 0 8
36919: PPUSH
36920: LD_VAR 0 4
36924: PPUSH
36925: CALL_OW 380
// un := CreateHuman ;
36929: LD_ADDR_VAR 0 14
36933: PUSH
36934: CALL_OW 44
36938: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36939: LD_ADDR_VAR 0 7
36943: PUSH
36944: LD_VAR 0 7
36948: PPUSH
36949: LD_INT 1
36951: PPUSH
36952: LD_VAR 0 14
36956: PPUSH
36957: CALL_OW 2
36961: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36962: LD_VAR 0 14
36966: PPUSH
36967: LD_VAR 0 1
36971: PPUSH
36972: CALL_OW 250
36976: PPUSH
36977: LD_VAR 0 1
36981: PPUSH
36982: CALL_OW 251
36986: PPUSH
36987: LD_INT 10
36989: PPUSH
36990: LD_INT 0
36992: PPUSH
36993: CALL_OW 50
// continue ;
36997: GO 36898
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36999: LD_VAR 0 12
37003: PUSH
37004: LD_INT 1
37006: ARRAY
37007: PPUSH
37008: CALL_OW 313
37012: PUSH
37013: LD_VAR 0 12
37017: PUSH
37018: LD_INT 1
37020: ARRAY
37021: PPUSH
37022: CALL_OW 266
37026: PUSH
37027: LD_INT 32
37029: PUSH
37030: LD_INT 31
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: IN
37037: AND
37038: PUSH
37039: LD_VAR 0 12
37043: PUSH
37044: LD_INT 1
37046: ARRAY
37047: PPUSH
37048: CALL_OW 313
37052: PUSH
37053: LD_INT 6
37055: EQUAL
37056: OR
37057: IFFALSE 37077
// f := Delete ( f , 1 ) ;
37059: LD_ADDR_VAR 0 12
37063: PUSH
37064: LD_VAR 0 12
37068: PPUSH
37069: LD_INT 1
37071: PPUSH
37072: CALL_OW 3
37076: ST_TO_ADDR
// if not f then
37077: LD_VAR 0 12
37081: NOT
37082: IFFALSE 37100
// begin x := x + 2 ;
37084: LD_ADDR_VAR 0 13
37088: PUSH
37089: LD_VAR 0 13
37093: PUSH
37094: LD_INT 2
37096: PLUS
37097: ST_TO_ADDR
// continue ;
37098: GO 36898
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37100: LD_VAR 0 12
37104: PUSH
37105: LD_INT 1
37107: ARRAY
37108: PPUSH
37109: CALL_OW 266
37113: PUSH
37114: LD_INT 5
37116: EQUAL
37117: IFFALSE 37191
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37119: LD_VAR 0 12
37123: PUSH
37124: LD_INT 1
37126: ARRAY
37127: PPUSH
37128: CALL_OW 313
37132: PUSH
37133: LD_INT 3
37135: LESS
37136: IFFALSE 37172
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37138: LD_INT 0
37140: PPUSH
37141: LD_INT 5
37143: PUSH
37144: LD_INT 8
37146: PUSH
37147: LD_INT 9
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: PUSH
37155: LD_VAR 0 17
37159: ARRAY
37160: PPUSH
37161: LD_VAR 0 4
37165: PPUSH
37166: CALL_OW 380
37170: GO 37189
// PrepareHuman ( false , i , skill ) ;
37172: LD_INT 0
37174: PPUSH
37175: LD_VAR 0 8
37179: PPUSH
37180: LD_VAR 0 4
37184: PPUSH
37185: CALL_OW 380
// end else
37189: GO 37208
// PrepareHuman ( false , i , skill ) ;
37191: LD_INT 0
37193: PPUSH
37194: LD_VAR 0 8
37198: PPUSH
37199: LD_VAR 0 4
37203: PPUSH
37204: CALL_OW 380
// un := CreateHuman ;
37208: LD_ADDR_VAR 0 14
37212: PUSH
37213: CALL_OW 44
37217: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37218: LD_ADDR_VAR 0 7
37222: PUSH
37223: LD_VAR 0 7
37227: PPUSH
37228: LD_INT 1
37230: PPUSH
37231: LD_VAR 0 14
37235: PPUSH
37236: CALL_OW 2
37240: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37241: LD_VAR 0 14
37245: PPUSH
37246: LD_VAR 0 12
37250: PUSH
37251: LD_INT 1
37253: ARRAY
37254: PPUSH
37255: CALL_OW 52
// end ;
37259: GO 36898
37261: POP
37262: POP
// end ;
37263: GO 36200
37265: POP
37266: POP
// result := result ^ buildings ;
37267: LD_ADDR_VAR 0 7
37271: PUSH
37272: LD_VAR 0 7
37276: PUSH
37277: LD_VAR 0 18
37281: ADD
37282: ST_TO_ADDR
// end else
37283: GO 37426
// begin for i = 1 to personel do
37285: LD_ADDR_VAR 0 8
37289: PUSH
37290: DOUBLE
37291: LD_INT 1
37293: DEC
37294: ST_TO_ADDR
37295: LD_VAR 0 6
37299: PUSH
37300: FOR_TO
37301: IFFALSE 37424
// begin if i > 4 then
37303: LD_VAR 0 8
37307: PUSH
37308: LD_INT 4
37310: GREATER
37311: IFFALSE 37315
// break ;
37313: GO 37424
// x := personel [ i ] ;
37315: LD_ADDR_VAR 0 13
37319: PUSH
37320: LD_VAR 0 6
37324: PUSH
37325: LD_VAR 0 8
37329: ARRAY
37330: ST_TO_ADDR
// if x = - 1 then
37331: LD_VAR 0 13
37335: PUSH
37336: LD_INT 1
37338: NEG
37339: EQUAL
37340: IFFALSE 37344
// continue ;
37342: GO 37300
// PrepareHuman ( false , i , skill ) ;
37344: LD_INT 0
37346: PPUSH
37347: LD_VAR 0 8
37351: PPUSH
37352: LD_VAR 0 4
37356: PPUSH
37357: CALL_OW 380
// un := CreateHuman ;
37361: LD_ADDR_VAR 0 14
37365: PUSH
37366: CALL_OW 44
37370: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37371: LD_VAR 0 14
37375: PPUSH
37376: LD_VAR 0 1
37380: PPUSH
37381: CALL_OW 250
37385: PPUSH
37386: LD_VAR 0 1
37390: PPUSH
37391: CALL_OW 251
37395: PPUSH
37396: LD_INT 10
37398: PPUSH
37399: LD_INT 0
37401: PPUSH
37402: CALL_OW 50
// result := result ^ un ;
37406: LD_ADDR_VAR 0 7
37410: PUSH
37411: LD_VAR 0 7
37415: PUSH
37416: LD_VAR 0 14
37420: ADD
37421: ST_TO_ADDR
// end ;
37422: GO 37300
37424: POP
37425: POP
// end ; end ;
37426: LD_VAR 0 7
37430: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37431: LD_INT 0
37433: PPUSH
37434: PPUSH
37435: PPUSH
37436: PPUSH
37437: PPUSH
37438: PPUSH
37439: PPUSH
37440: PPUSH
37441: PPUSH
37442: PPUSH
37443: PPUSH
37444: PPUSH
37445: PPUSH
37446: PPUSH
37447: PPUSH
37448: PPUSH
// result := false ;
37449: LD_ADDR_VAR 0 3
37453: PUSH
37454: LD_INT 0
37456: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37457: LD_VAR 0 1
37461: NOT
37462: PUSH
37463: LD_VAR 0 1
37467: PPUSH
37468: CALL_OW 266
37472: PUSH
37473: LD_INT 32
37475: PUSH
37476: LD_INT 33
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: IN
37483: NOT
37484: OR
37485: IFFALSE 37489
// exit ;
37487: GO 38598
// nat := GetNation ( tower ) ;
37489: LD_ADDR_VAR 0 12
37493: PUSH
37494: LD_VAR 0 1
37498: PPUSH
37499: CALL_OW 248
37503: ST_TO_ADDR
// side := GetSide ( tower ) ;
37504: LD_ADDR_VAR 0 16
37508: PUSH
37509: LD_VAR 0 1
37513: PPUSH
37514: CALL_OW 255
37518: ST_TO_ADDR
// x := GetX ( tower ) ;
37519: LD_ADDR_VAR 0 10
37523: PUSH
37524: LD_VAR 0 1
37528: PPUSH
37529: CALL_OW 250
37533: ST_TO_ADDR
// y := GetY ( tower ) ;
37534: LD_ADDR_VAR 0 11
37538: PUSH
37539: LD_VAR 0 1
37543: PPUSH
37544: CALL_OW 251
37548: ST_TO_ADDR
// if not x or not y then
37549: LD_VAR 0 10
37553: NOT
37554: PUSH
37555: LD_VAR 0 11
37559: NOT
37560: OR
37561: IFFALSE 37565
// exit ;
37563: GO 38598
// weapon := 0 ;
37565: LD_ADDR_VAR 0 18
37569: PUSH
37570: LD_INT 0
37572: ST_TO_ADDR
// fac_list := [ ] ;
37573: LD_ADDR_VAR 0 17
37577: PUSH
37578: EMPTY
37579: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37580: LD_ADDR_VAR 0 6
37584: PUSH
37585: LD_VAR 0 1
37589: PPUSH
37590: CALL_OW 274
37594: PPUSH
37595: LD_VAR 0 2
37599: PPUSH
37600: LD_INT 0
37602: PPUSH
37603: CALL 35169 0 3
37607: PPUSH
37608: LD_INT 30
37610: PUSH
37611: LD_INT 3
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PPUSH
37618: CALL_OW 72
37622: ST_TO_ADDR
// if not factories then
37623: LD_VAR 0 6
37627: NOT
37628: IFFALSE 37632
// exit ;
37630: GO 38598
// for i in factories do
37632: LD_ADDR_VAR 0 8
37636: PUSH
37637: LD_VAR 0 6
37641: PUSH
37642: FOR_IN
37643: IFFALSE 37668
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37645: LD_ADDR_VAR 0 17
37649: PUSH
37650: LD_VAR 0 17
37654: PUSH
37655: LD_VAR 0 8
37659: PPUSH
37660: CALL_OW 478
37664: UNION
37665: ST_TO_ADDR
37666: GO 37642
37668: POP
37669: POP
// if not fac_list then
37670: LD_VAR 0 17
37674: NOT
37675: IFFALSE 37679
// exit ;
37677: GO 38598
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37679: LD_ADDR_VAR 0 5
37683: PUSH
37684: LD_INT 4
37686: PUSH
37687: LD_INT 5
37689: PUSH
37690: LD_INT 9
37692: PUSH
37693: LD_INT 10
37695: PUSH
37696: LD_INT 6
37698: PUSH
37699: LD_INT 7
37701: PUSH
37702: LD_INT 11
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 27
37716: PUSH
37717: LD_INT 28
37719: PUSH
37720: LD_INT 26
37722: PUSH
37723: LD_INT 30
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 43
37734: PUSH
37735: LD_INT 44
37737: PUSH
37738: LD_INT 46
37740: PUSH
37741: LD_INT 45
37743: PUSH
37744: LD_INT 47
37746: PUSH
37747: LD_INT 49
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: LIST
37762: PUSH
37763: LD_VAR 0 12
37767: ARRAY
37768: ST_TO_ADDR
// list := list isect fac_list ;
37769: LD_ADDR_VAR 0 5
37773: PUSH
37774: LD_VAR 0 5
37778: PUSH
37779: LD_VAR 0 17
37783: ISECT
37784: ST_TO_ADDR
// if not list then
37785: LD_VAR 0 5
37789: NOT
37790: IFFALSE 37794
// exit ;
37792: GO 38598
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37794: LD_VAR 0 12
37798: PUSH
37799: LD_INT 3
37801: EQUAL
37802: PUSH
37803: LD_INT 49
37805: PUSH
37806: LD_VAR 0 5
37810: IN
37811: AND
37812: PUSH
37813: LD_INT 31
37815: PPUSH
37816: LD_VAR 0 16
37820: PPUSH
37821: CALL_OW 321
37825: PUSH
37826: LD_INT 2
37828: EQUAL
37829: AND
37830: IFFALSE 37890
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37832: LD_INT 22
37834: PUSH
37835: LD_VAR 0 16
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 35
37846: PUSH
37847: LD_INT 49
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 91
37856: PUSH
37857: LD_VAR 0 1
37861: PUSH
37862: LD_INT 10
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: LIST
37874: PPUSH
37875: CALL_OW 69
37879: NOT
37880: IFFALSE 37890
// weapon := ru_time_lapser ;
37882: LD_ADDR_VAR 0 18
37886: PUSH
37887: LD_INT 49
37889: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37890: LD_VAR 0 12
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: IN
37905: PUSH
37906: LD_INT 11
37908: PUSH
37909: LD_VAR 0 5
37913: IN
37914: PUSH
37915: LD_INT 30
37917: PUSH
37918: LD_VAR 0 5
37922: IN
37923: OR
37924: AND
37925: PUSH
37926: LD_INT 6
37928: PPUSH
37929: LD_VAR 0 16
37933: PPUSH
37934: CALL_OW 321
37938: PUSH
37939: LD_INT 2
37941: EQUAL
37942: AND
37943: IFFALSE 38108
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37945: LD_INT 22
37947: PUSH
37948: LD_VAR 0 16
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 2
37959: PUSH
37960: LD_INT 35
37962: PUSH
37963: LD_INT 11
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 35
37972: PUSH
37973: LD_INT 30
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 91
37987: PUSH
37988: LD_VAR 0 1
37992: PUSH
37993: LD_INT 18
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: LIST
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: LIST
38005: PPUSH
38006: CALL_OW 69
38010: NOT
38011: PUSH
38012: LD_INT 22
38014: PUSH
38015: LD_VAR 0 16
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 2
38026: PUSH
38027: LD_INT 30
38029: PUSH
38030: LD_INT 32
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 30
38039: PUSH
38040: LD_INT 33
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 91
38054: PUSH
38055: LD_VAR 0 1
38059: PUSH
38060: LD_INT 12
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: LIST
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: LIST
38072: PUSH
38073: EMPTY
38074: LIST
38075: PPUSH
38076: CALL_OW 69
38080: PUSH
38081: LD_INT 2
38083: GREATER
38084: AND
38085: IFFALSE 38108
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38087: LD_ADDR_VAR 0 18
38091: PUSH
38092: LD_INT 11
38094: PUSH
38095: LD_INT 30
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_VAR 0 12
38106: ARRAY
38107: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38108: LD_VAR 0 18
38112: NOT
38113: PUSH
38114: LD_INT 40
38116: PPUSH
38117: LD_VAR 0 16
38121: PPUSH
38122: CALL_OW 321
38126: PUSH
38127: LD_INT 2
38129: EQUAL
38130: AND
38131: PUSH
38132: LD_INT 7
38134: PUSH
38135: LD_VAR 0 5
38139: IN
38140: PUSH
38141: LD_INT 28
38143: PUSH
38144: LD_VAR 0 5
38148: IN
38149: OR
38150: PUSH
38151: LD_INT 45
38153: PUSH
38154: LD_VAR 0 5
38158: IN
38159: OR
38160: AND
38161: IFFALSE 38415
// begin hex := GetHexInfo ( x , y ) ;
38163: LD_ADDR_VAR 0 4
38167: PUSH
38168: LD_VAR 0 10
38172: PPUSH
38173: LD_VAR 0 11
38177: PPUSH
38178: CALL_OW 546
38182: ST_TO_ADDR
// if hex [ 1 ] then
38183: LD_VAR 0 4
38187: PUSH
38188: LD_INT 1
38190: ARRAY
38191: IFFALSE 38195
// exit ;
38193: GO 38598
// height := hex [ 2 ] ;
38195: LD_ADDR_VAR 0 15
38199: PUSH
38200: LD_VAR 0 4
38204: PUSH
38205: LD_INT 2
38207: ARRAY
38208: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38209: LD_ADDR_VAR 0 14
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: LD_INT 2
38219: PUSH
38220: LD_INT 3
38222: PUSH
38223: LD_INT 5
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: ST_TO_ADDR
// for i in tmp do
38232: LD_ADDR_VAR 0 8
38236: PUSH
38237: LD_VAR 0 14
38241: PUSH
38242: FOR_IN
38243: IFFALSE 38413
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38245: LD_ADDR_VAR 0 9
38249: PUSH
38250: LD_VAR 0 10
38254: PPUSH
38255: LD_VAR 0 8
38259: PPUSH
38260: LD_INT 5
38262: PPUSH
38263: CALL_OW 272
38267: PUSH
38268: LD_VAR 0 11
38272: PPUSH
38273: LD_VAR 0 8
38277: PPUSH
38278: LD_INT 5
38280: PPUSH
38281: CALL_OW 273
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38290: LD_VAR 0 9
38294: PUSH
38295: LD_INT 1
38297: ARRAY
38298: PPUSH
38299: LD_VAR 0 9
38303: PUSH
38304: LD_INT 2
38306: ARRAY
38307: PPUSH
38308: CALL_OW 488
38312: IFFALSE 38411
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38314: LD_ADDR_VAR 0 4
38318: PUSH
38319: LD_VAR 0 9
38323: PUSH
38324: LD_INT 1
38326: ARRAY
38327: PPUSH
38328: LD_VAR 0 9
38332: PUSH
38333: LD_INT 2
38335: ARRAY
38336: PPUSH
38337: CALL_OW 546
38341: ST_TO_ADDR
// if hex [ 1 ] then
38342: LD_VAR 0 4
38346: PUSH
38347: LD_INT 1
38349: ARRAY
38350: IFFALSE 38354
// continue ;
38352: GO 38242
// h := hex [ 2 ] ;
38354: LD_ADDR_VAR 0 13
38358: PUSH
38359: LD_VAR 0 4
38363: PUSH
38364: LD_INT 2
38366: ARRAY
38367: ST_TO_ADDR
// if h + 7 < height then
38368: LD_VAR 0 13
38372: PUSH
38373: LD_INT 7
38375: PLUS
38376: PUSH
38377: LD_VAR 0 15
38381: LESS
38382: IFFALSE 38411
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38384: LD_ADDR_VAR 0 18
38388: PUSH
38389: LD_INT 7
38391: PUSH
38392: LD_INT 28
38394: PUSH
38395: LD_INT 45
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: LIST
38402: PUSH
38403: LD_VAR 0 12
38407: ARRAY
38408: ST_TO_ADDR
// break ;
38409: GO 38413
// end ; end ; end ;
38411: GO 38242
38413: POP
38414: POP
// end ; if not weapon then
38415: LD_VAR 0 18
38419: NOT
38420: IFFALSE 38480
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38422: LD_ADDR_VAR 0 5
38426: PUSH
38427: LD_VAR 0 5
38431: PUSH
38432: LD_INT 11
38434: PUSH
38435: LD_INT 30
38437: PUSH
38438: LD_INT 49
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: DIFF
38446: ST_TO_ADDR
// if not list then
38447: LD_VAR 0 5
38451: NOT
38452: IFFALSE 38456
// exit ;
38454: GO 38598
// weapon := list [ rand ( 1 , list ) ] ;
38456: LD_ADDR_VAR 0 18
38460: PUSH
38461: LD_VAR 0 5
38465: PUSH
38466: LD_INT 1
38468: PPUSH
38469: LD_VAR 0 5
38473: PPUSH
38474: CALL_OW 12
38478: ARRAY
38479: ST_TO_ADDR
// end ; if weapon then
38480: LD_VAR 0 18
38484: IFFALSE 38598
// begin tmp := CostOfWeapon ( weapon ) ;
38486: LD_ADDR_VAR 0 14
38490: PUSH
38491: LD_VAR 0 18
38495: PPUSH
38496: CALL_OW 451
38500: ST_TO_ADDR
// j := GetBase ( tower ) ;
38501: LD_ADDR_VAR 0 9
38505: PUSH
38506: LD_VAR 0 1
38510: PPUSH
38511: CALL_OW 274
38515: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38516: LD_VAR 0 9
38520: PPUSH
38521: LD_INT 1
38523: PPUSH
38524: CALL_OW 275
38528: PUSH
38529: LD_VAR 0 14
38533: PUSH
38534: LD_INT 1
38536: ARRAY
38537: GREATEREQUAL
38538: PUSH
38539: LD_VAR 0 9
38543: PPUSH
38544: LD_INT 2
38546: PPUSH
38547: CALL_OW 275
38551: PUSH
38552: LD_VAR 0 14
38556: PUSH
38557: LD_INT 2
38559: ARRAY
38560: GREATEREQUAL
38561: AND
38562: PUSH
38563: LD_VAR 0 9
38567: PPUSH
38568: LD_INT 3
38570: PPUSH
38571: CALL_OW 275
38575: PUSH
38576: LD_VAR 0 14
38580: PUSH
38581: LD_INT 3
38583: ARRAY
38584: GREATEREQUAL
38585: AND
38586: IFFALSE 38598
// result := weapon ;
38588: LD_ADDR_VAR 0 3
38592: PUSH
38593: LD_VAR 0 18
38597: ST_TO_ADDR
// end ; end ;
38598: LD_VAR 0 3
38602: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38603: LD_INT 0
38605: PPUSH
38606: PPUSH
// result := true ;
38607: LD_ADDR_VAR 0 3
38611: PUSH
38612: LD_INT 1
38614: ST_TO_ADDR
// if array1 = array2 then
38615: LD_VAR 0 1
38619: PUSH
38620: LD_VAR 0 2
38624: EQUAL
38625: IFFALSE 38685
// begin for i = 1 to array1 do
38627: LD_ADDR_VAR 0 4
38631: PUSH
38632: DOUBLE
38633: LD_INT 1
38635: DEC
38636: ST_TO_ADDR
38637: LD_VAR 0 1
38641: PUSH
38642: FOR_TO
38643: IFFALSE 38681
// if array1 [ i ] <> array2 [ i ] then
38645: LD_VAR 0 1
38649: PUSH
38650: LD_VAR 0 4
38654: ARRAY
38655: PUSH
38656: LD_VAR 0 2
38660: PUSH
38661: LD_VAR 0 4
38665: ARRAY
38666: NONEQUAL
38667: IFFALSE 38679
// begin result := false ;
38669: LD_ADDR_VAR 0 3
38673: PUSH
38674: LD_INT 0
38676: ST_TO_ADDR
// break ;
38677: GO 38681
// end ;
38679: GO 38642
38681: POP
38682: POP
// end else
38683: GO 38693
// result := false ;
38685: LD_ADDR_VAR 0 3
38689: PUSH
38690: LD_INT 0
38692: ST_TO_ADDR
// end ;
38693: LD_VAR 0 3
38697: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38698: LD_INT 0
38700: PPUSH
38701: PPUSH
// if not array1 or not array2 then
38702: LD_VAR 0 1
38706: NOT
38707: PUSH
38708: LD_VAR 0 2
38712: NOT
38713: OR
38714: IFFALSE 38718
// exit ;
38716: GO 38782
// result := true ;
38718: LD_ADDR_VAR 0 3
38722: PUSH
38723: LD_INT 1
38725: ST_TO_ADDR
// for i = 1 to array1 do
38726: LD_ADDR_VAR 0 4
38730: PUSH
38731: DOUBLE
38732: LD_INT 1
38734: DEC
38735: ST_TO_ADDR
38736: LD_VAR 0 1
38740: PUSH
38741: FOR_TO
38742: IFFALSE 38780
// if array1 [ i ] <> array2 [ i ] then
38744: LD_VAR 0 1
38748: PUSH
38749: LD_VAR 0 4
38753: ARRAY
38754: PUSH
38755: LD_VAR 0 2
38759: PUSH
38760: LD_VAR 0 4
38764: ARRAY
38765: NONEQUAL
38766: IFFALSE 38778
// begin result := false ;
38768: LD_ADDR_VAR 0 3
38772: PUSH
38773: LD_INT 0
38775: ST_TO_ADDR
// break ;
38776: GO 38780
// end ;
38778: GO 38741
38780: POP
38781: POP
// end ;
38782: LD_VAR 0 3
38786: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38787: LD_INT 0
38789: PPUSH
38790: PPUSH
38791: PPUSH
// pom := GetBase ( fac ) ;
38792: LD_ADDR_VAR 0 5
38796: PUSH
38797: LD_VAR 0 1
38801: PPUSH
38802: CALL_OW 274
38806: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38807: LD_ADDR_VAR 0 4
38811: PUSH
38812: LD_VAR 0 2
38816: PUSH
38817: LD_INT 1
38819: ARRAY
38820: PPUSH
38821: LD_VAR 0 2
38825: PUSH
38826: LD_INT 2
38828: ARRAY
38829: PPUSH
38830: LD_VAR 0 2
38834: PUSH
38835: LD_INT 3
38837: ARRAY
38838: PPUSH
38839: LD_VAR 0 2
38843: PUSH
38844: LD_INT 4
38846: ARRAY
38847: PPUSH
38848: CALL_OW 449
38852: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38853: LD_ADDR_VAR 0 3
38857: PUSH
38858: LD_VAR 0 5
38862: PPUSH
38863: LD_INT 1
38865: PPUSH
38866: CALL_OW 275
38870: PUSH
38871: LD_VAR 0 4
38875: PUSH
38876: LD_INT 1
38878: ARRAY
38879: GREATEREQUAL
38880: PUSH
38881: LD_VAR 0 5
38885: PPUSH
38886: LD_INT 2
38888: PPUSH
38889: CALL_OW 275
38893: PUSH
38894: LD_VAR 0 4
38898: PUSH
38899: LD_INT 2
38901: ARRAY
38902: GREATEREQUAL
38903: AND
38904: PUSH
38905: LD_VAR 0 5
38909: PPUSH
38910: LD_INT 3
38912: PPUSH
38913: CALL_OW 275
38917: PUSH
38918: LD_VAR 0 4
38922: PUSH
38923: LD_INT 3
38925: ARRAY
38926: GREATEREQUAL
38927: AND
38928: ST_TO_ADDR
// end ;
38929: LD_VAR 0 3
38933: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38934: LD_INT 0
38936: PPUSH
38937: PPUSH
38938: PPUSH
38939: PPUSH
// pom := GetBase ( building ) ;
38940: LD_ADDR_VAR 0 3
38944: PUSH
38945: LD_VAR 0 1
38949: PPUSH
38950: CALL_OW 274
38954: ST_TO_ADDR
// if not pom then
38955: LD_VAR 0 3
38959: NOT
38960: IFFALSE 38964
// exit ;
38962: GO 39134
// btype := GetBType ( building ) ;
38964: LD_ADDR_VAR 0 5
38968: PUSH
38969: LD_VAR 0 1
38973: PPUSH
38974: CALL_OW 266
38978: ST_TO_ADDR
// if btype = b_armoury then
38979: LD_VAR 0 5
38983: PUSH
38984: LD_INT 4
38986: EQUAL
38987: IFFALSE 38997
// btype := b_barracks ;
38989: LD_ADDR_VAR 0 5
38993: PUSH
38994: LD_INT 5
38996: ST_TO_ADDR
// if btype = b_depot then
38997: LD_VAR 0 5
39001: PUSH
39002: LD_INT 0
39004: EQUAL
39005: IFFALSE 39015
// btype := b_warehouse ;
39007: LD_ADDR_VAR 0 5
39011: PUSH
39012: LD_INT 1
39014: ST_TO_ADDR
// if btype = b_workshop then
39015: LD_VAR 0 5
39019: PUSH
39020: LD_INT 2
39022: EQUAL
39023: IFFALSE 39033
// btype := b_factory ;
39025: LD_ADDR_VAR 0 5
39029: PUSH
39030: LD_INT 3
39032: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39033: LD_ADDR_VAR 0 4
39037: PUSH
39038: LD_VAR 0 5
39042: PPUSH
39043: LD_VAR 0 1
39047: PPUSH
39048: CALL_OW 248
39052: PPUSH
39053: CALL_OW 450
39057: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39058: LD_ADDR_VAR 0 2
39062: PUSH
39063: LD_VAR 0 3
39067: PPUSH
39068: LD_INT 1
39070: PPUSH
39071: CALL_OW 275
39075: PUSH
39076: LD_VAR 0 4
39080: PUSH
39081: LD_INT 1
39083: ARRAY
39084: GREATEREQUAL
39085: PUSH
39086: LD_VAR 0 3
39090: PPUSH
39091: LD_INT 2
39093: PPUSH
39094: CALL_OW 275
39098: PUSH
39099: LD_VAR 0 4
39103: PUSH
39104: LD_INT 2
39106: ARRAY
39107: GREATEREQUAL
39108: AND
39109: PUSH
39110: LD_VAR 0 3
39114: PPUSH
39115: LD_INT 3
39117: PPUSH
39118: CALL_OW 275
39122: PUSH
39123: LD_VAR 0 4
39127: PUSH
39128: LD_INT 3
39130: ARRAY
39131: GREATEREQUAL
39132: AND
39133: ST_TO_ADDR
// end ;
39134: LD_VAR 0 2
39138: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39139: LD_INT 0
39141: PPUSH
39142: PPUSH
39143: PPUSH
// pom := GetBase ( building ) ;
39144: LD_ADDR_VAR 0 4
39148: PUSH
39149: LD_VAR 0 1
39153: PPUSH
39154: CALL_OW 274
39158: ST_TO_ADDR
// if not pom then
39159: LD_VAR 0 4
39163: NOT
39164: IFFALSE 39168
// exit ;
39166: GO 39269
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39168: LD_ADDR_VAR 0 5
39172: PUSH
39173: LD_VAR 0 2
39177: PPUSH
39178: LD_VAR 0 1
39182: PPUSH
39183: CALL_OW 248
39187: PPUSH
39188: CALL_OW 450
39192: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39193: LD_ADDR_VAR 0 3
39197: PUSH
39198: LD_VAR 0 4
39202: PPUSH
39203: LD_INT 1
39205: PPUSH
39206: CALL_OW 275
39210: PUSH
39211: LD_VAR 0 5
39215: PUSH
39216: LD_INT 1
39218: ARRAY
39219: GREATEREQUAL
39220: PUSH
39221: LD_VAR 0 4
39225: PPUSH
39226: LD_INT 2
39228: PPUSH
39229: CALL_OW 275
39233: PUSH
39234: LD_VAR 0 5
39238: PUSH
39239: LD_INT 2
39241: ARRAY
39242: GREATEREQUAL
39243: AND
39244: PUSH
39245: LD_VAR 0 4
39249: PPUSH
39250: LD_INT 3
39252: PPUSH
39253: CALL_OW 275
39257: PUSH
39258: LD_VAR 0 5
39262: PUSH
39263: LD_INT 3
39265: ARRAY
39266: GREATEREQUAL
39267: AND
39268: ST_TO_ADDR
// end ;
39269: LD_VAR 0 3
39273: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39274: LD_INT 0
39276: PPUSH
39277: PPUSH
39278: PPUSH
39279: PPUSH
39280: PPUSH
39281: PPUSH
39282: PPUSH
39283: PPUSH
39284: PPUSH
39285: PPUSH
39286: PPUSH
// result := false ;
39287: LD_ADDR_VAR 0 8
39291: PUSH
39292: LD_INT 0
39294: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39295: LD_VAR 0 5
39299: NOT
39300: PUSH
39301: LD_VAR 0 1
39305: NOT
39306: OR
39307: PUSH
39308: LD_VAR 0 2
39312: NOT
39313: OR
39314: PUSH
39315: LD_VAR 0 3
39319: NOT
39320: OR
39321: IFFALSE 39325
// exit ;
39323: GO 40139
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39325: LD_ADDR_VAR 0 14
39329: PUSH
39330: LD_VAR 0 1
39334: PPUSH
39335: LD_VAR 0 2
39339: PPUSH
39340: LD_VAR 0 3
39344: PPUSH
39345: LD_VAR 0 4
39349: PPUSH
39350: LD_VAR 0 5
39354: PUSH
39355: LD_INT 1
39357: ARRAY
39358: PPUSH
39359: CALL_OW 248
39363: PPUSH
39364: LD_INT 0
39366: PPUSH
39367: CALL 41376 0 6
39371: ST_TO_ADDR
// if not hexes then
39372: LD_VAR 0 14
39376: NOT
39377: IFFALSE 39381
// exit ;
39379: GO 40139
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39381: LD_ADDR_VAR 0 17
39385: PUSH
39386: LD_VAR 0 5
39390: PPUSH
39391: LD_INT 22
39393: PUSH
39394: LD_VAR 0 13
39398: PPUSH
39399: CALL_OW 255
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: LD_INT 30
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 30
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PPUSH
39440: CALL_OW 72
39444: ST_TO_ADDR
// for i = 1 to hexes do
39445: LD_ADDR_VAR 0 9
39449: PUSH
39450: DOUBLE
39451: LD_INT 1
39453: DEC
39454: ST_TO_ADDR
39455: LD_VAR 0 14
39459: PUSH
39460: FOR_TO
39461: IFFALSE 40137
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39463: LD_ADDR_VAR 0 13
39467: PUSH
39468: LD_VAR 0 14
39472: PUSH
39473: LD_VAR 0 9
39477: ARRAY
39478: PUSH
39479: LD_INT 1
39481: ARRAY
39482: PPUSH
39483: LD_VAR 0 14
39487: PUSH
39488: LD_VAR 0 9
39492: ARRAY
39493: PUSH
39494: LD_INT 2
39496: ARRAY
39497: PPUSH
39498: CALL_OW 428
39502: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39503: LD_VAR 0 14
39507: PUSH
39508: LD_VAR 0 9
39512: ARRAY
39513: PUSH
39514: LD_INT 1
39516: ARRAY
39517: PPUSH
39518: LD_VAR 0 14
39522: PUSH
39523: LD_VAR 0 9
39527: ARRAY
39528: PUSH
39529: LD_INT 2
39531: ARRAY
39532: PPUSH
39533: CALL_OW 351
39537: PUSH
39538: LD_VAR 0 14
39542: PUSH
39543: LD_VAR 0 9
39547: ARRAY
39548: PUSH
39549: LD_INT 1
39551: ARRAY
39552: PPUSH
39553: LD_VAR 0 14
39557: PUSH
39558: LD_VAR 0 9
39562: ARRAY
39563: PUSH
39564: LD_INT 2
39566: ARRAY
39567: PPUSH
39568: CALL_OW 488
39572: NOT
39573: OR
39574: PUSH
39575: LD_VAR 0 13
39579: PPUSH
39580: CALL_OW 247
39584: PUSH
39585: LD_INT 3
39587: EQUAL
39588: OR
39589: IFFALSE 39595
// exit ;
39591: POP
39592: POP
39593: GO 40139
// if not tmp then
39595: LD_VAR 0 13
39599: NOT
39600: IFFALSE 39604
// continue ;
39602: GO 39460
// result := true ;
39604: LD_ADDR_VAR 0 8
39608: PUSH
39609: LD_INT 1
39611: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39612: LD_VAR 0 6
39616: PUSH
39617: LD_VAR 0 13
39621: PPUSH
39622: CALL_OW 247
39626: PUSH
39627: LD_INT 2
39629: EQUAL
39630: AND
39631: PUSH
39632: LD_VAR 0 13
39636: PPUSH
39637: CALL_OW 263
39641: PUSH
39642: LD_INT 1
39644: EQUAL
39645: AND
39646: IFFALSE 39810
// begin if IsDrivenBy ( tmp ) then
39648: LD_VAR 0 13
39652: PPUSH
39653: CALL_OW 311
39657: IFFALSE 39661
// continue ;
39659: GO 39460
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39661: LD_VAR 0 6
39665: PPUSH
39666: LD_INT 3
39668: PUSH
39669: LD_INT 60
39671: PUSH
39672: EMPTY
39673: LIST
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: LD_INT 55
39684: PUSH
39685: EMPTY
39686: LIST
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PPUSH
39696: CALL_OW 72
39700: IFFALSE 39808
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39702: LD_ADDR_VAR 0 18
39706: PUSH
39707: LD_VAR 0 6
39711: PPUSH
39712: LD_INT 3
39714: PUSH
39715: LD_INT 60
39717: PUSH
39718: EMPTY
39719: LIST
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: LD_INT 55
39730: PUSH
39731: EMPTY
39732: LIST
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PPUSH
39742: CALL_OW 72
39746: PUSH
39747: LD_INT 1
39749: ARRAY
39750: ST_TO_ADDR
// if IsInUnit ( driver ) then
39751: LD_VAR 0 18
39755: PPUSH
39756: CALL_OW 310
39760: IFFALSE 39771
// ComExit ( driver ) ;
39762: LD_VAR 0 18
39766: PPUSH
39767: CALL 64560 0 1
// AddComEnterUnit ( driver , tmp ) ;
39771: LD_VAR 0 18
39775: PPUSH
39776: LD_VAR 0 13
39780: PPUSH
39781: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39785: LD_VAR 0 18
39789: PPUSH
39790: LD_VAR 0 7
39794: PPUSH
39795: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39799: LD_VAR 0 18
39803: PPUSH
39804: CALL_OW 181
// end ; continue ;
39808: GO 39460
// end ; if not cleaners or not tmp in cleaners then
39810: LD_VAR 0 6
39814: NOT
39815: PUSH
39816: LD_VAR 0 13
39820: PUSH
39821: LD_VAR 0 6
39825: IN
39826: NOT
39827: OR
39828: IFFALSE 40135
// begin if dep then
39830: LD_VAR 0 17
39834: IFFALSE 39970
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39836: LD_ADDR_VAR 0 16
39840: PUSH
39841: LD_VAR 0 17
39845: PUSH
39846: LD_INT 1
39848: ARRAY
39849: PPUSH
39850: CALL_OW 250
39854: PPUSH
39855: LD_VAR 0 17
39859: PUSH
39860: LD_INT 1
39862: ARRAY
39863: PPUSH
39864: CALL_OW 254
39868: PPUSH
39869: LD_INT 5
39871: PPUSH
39872: CALL_OW 272
39876: PUSH
39877: LD_VAR 0 17
39881: PUSH
39882: LD_INT 1
39884: ARRAY
39885: PPUSH
39886: CALL_OW 251
39890: PPUSH
39891: LD_VAR 0 17
39895: PUSH
39896: LD_INT 1
39898: ARRAY
39899: PPUSH
39900: CALL_OW 254
39904: PPUSH
39905: LD_INT 5
39907: PPUSH
39908: CALL_OW 273
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39917: LD_VAR 0 16
39921: PUSH
39922: LD_INT 1
39924: ARRAY
39925: PPUSH
39926: LD_VAR 0 16
39930: PUSH
39931: LD_INT 2
39933: ARRAY
39934: PPUSH
39935: CALL_OW 488
39939: IFFALSE 39970
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39941: LD_VAR 0 13
39945: PPUSH
39946: LD_VAR 0 16
39950: PUSH
39951: LD_INT 1
39953: ARRAY
39954: PPUSH
39955: LD_VAR 0 16
39959: PUSH
39960: LD_INT 2
39962: ARRAY
39963: PPUSH
39964: CALL_OW 111
// continue ;
39968: GO 39460
// end ; end ; r := GetDir ( tmp ) ;
39970: LD_ADDR_VAR 0 15
39974: PUSH
39975: LD_VAR 0 13
39979: PPUSH
39980: CALL_OW 254
39984: ST_TO_ADDR
// if r = 5 then
39985: LD_VAR 0 15
39989: PUSH
39990: LD_INT 5
39992: EQUAL
39993: IFFALSE 40003
// r := 0 ;
39995: LD_ADDR_VAR 0 15
39999: PUSH
40000: LD_INT 0
40002: ST_TO_ADDR
// for j = r to 5 do
40003: LD_ADDR_VAR 0 10
40007: PUSH
40008: DOUBLE
40009: LD_VAR 0 15
40013: DEC
40014: ST_TO_ADDR
40015: LD_INT 5
40017: PUSH
40018: FOR_TO
40019: IFFALSE 40133
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40021: LD_ADDR_VAR 0 11
40025: PUSH
40026: LD_VAR 0 13
40030: PPUSH
40031: CALL_OW 250
40035: PPUSH
40036: LD_VAR 0 10
40040: PPUSH
40041: LD_INT 2
40043: PPUSH
40044: CALL_OW 272
40048: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40049: LD_ADDR_VAR 0 12
40053: PUSH
40054: LD_VAR 0 13
40058: PPUSH
40059: CALL_OW 251
40063: PPUSH
40064: LD_VAR 0 10
40068: PPUSH
40069: LD_INT 2
40071: PPUSH
40072: CALL_OW 273
40076: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40077: LD_VAR 0 11
40081: PPUSH
40082: LD_VAR 0 12
40086: PPUSH
40087: CALL_OW 488
40091: PUSH
40092: LD_VAR 0 11
40096: PPUSH
40097: LD_VAR 0 12
40101: PPUSH
40102: CALL_OW 428
40106: NOT
40107: AND
40108: IFFALSE 40131
// begin ComMoveXY ( tmp , _x , _y ) ;
40110: LD_VAR 0 13
40114: PPUSH
40115: LD_VAR 0 11
40119: PPUSH
40120: LD_VAR 0 12
40124: PPUSH
40125: CALL_OW 111
// break ;
40129: GO 40133
// end ; end ;
40131: GO 40018
40133: POP
40134: POP
// end ; end ;
40135: GO 39460
40137: POP
40138: POP
// end ;
40139: LD_VAR 0 8
40143: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40144: LD_INT 0
40146: PPUSH
// result := true ;
40147: LD_ADDR_VAR 0 3
40151: PUSH
40152: LD_INT 1
40154: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40155: LD_VAR 0 2
40159: PUSH
40160: LD_INT 24
40162: DOUBLE
40163: EQUAL
40164: IFTRUE 40174
40166: LD_INT 33
40168: DOUBLE
40169: EQUAL
40170: IFTRUE 40174
40172: GO 40199
40174: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40175: LD_ADDR_VAR 0 3
40179: PUSH
40180: LD_INT 32
40182: PPUSH
40183: LD_VAR 0 1
40187: PPUSH
40188: CALL_OW 321
40192: PUSH
40193: LD_INT 2
40195: EQUAL
40196: ST_TO_ADDR
40197: GO 40519
40199: LD_INT 20
40201: DOUBLE
40202: EQUAL
40203: IFTRUE 40207
40205: GO 40232
40207: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40208: LD_ADDR_VAR 0 3
40212: PUSH
40213: LD_INT 6
40215: PPUSH
40216: LD_VAR 0 1
40220: PPUSH
40221: CALL_OW 321
40225: PUSH
40226: LD_INT 2
40228: EQUAL
40229: ST_TO_ADDR
40230: GO 40519
40232: LD_INT 22
40234: DOUBLE
40235: EQUAL
40236: IFTRUE 40246
40238: LD_INT 36
40240: DOUBLE
40241: EQUAL
40242: IFTRUE 40246
40244: GO 40271
40246: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40247: LD_ADDR_VAR 0 3
40251: PUSH
40252: LD_INT 15
40254: PPUSH
40255: LD_VAR 0 1
40259: PPUSH
40260: CALL_OW 321
40264: PUSH
40265: LD_INT 2
40267: EQUAL
40268: ST_TO_ADDR
40269: GO 40519
40271: LD_INT 30
40273: DOUBLE
40274: EQUAL
40275: IFTRUE 40279
40277: GO 40304
40279: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40280: LD_ADDR_VAR 0 3
40284: PUSH
40285: LD_INT 20
40287: PPUSH
40288: LD_VAR 0 1
40292: PPUSH
40293: CALL_OW 321
40297: PUSH
40298: LD_INT 2
40300: EQUAL
40301: ST_TO_ADDR
40302: GO 40519
40304: LD_INT 28
40306: DOUBLE
40307: EQUAL
40308: IFTRUE 40318
40310: LD_INT 21
40312: DOUBLE
40313: EQUAL
40314: IFTRUE 40318
40316: GO 40343
40318: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40319: LD_ADDR_VAR 0 3
40323: PUSH
40324: LD_INT 21
40326: PPUSH
40327: LD_VAR 0 1
40331: PPUSH
40332: CALL_OW 321
40336: PUSH
40337: LD_INT 2
40339: EQUAL
40340: ST_TO_ADDR
40341: GO 40519
40343: LD_INT 16
40345: DOUBLE
40346: EQUAL
40347: IFTRUE 40351
40349: GO 40378
40351: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40352: LD_ADDR_VAR 0 3
40356: PUSH
40357: LD_EXP 37
40361: PPUSH
40362: LD_VAR 0 1
40366: PPUSH
40367: CALL_OW 321
40371: PUSH
40372: LD_INT 2
40374: EQUAL
40375: ST_TO_ADDR
40376: GO 40519
40378: LD_INT 19
40380: DOUBLE
40381: EQUAL
40382: IFTRUE 40392
40384: LD_INT 23
40386: DOUBLE
40387: EQUAL
40388: IFTRUE 40392
40390: GO 40419
40392: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40393: LD_ADDR_VAR 0 3
40397: PUSH
40398: LD_EXP 36
40402: PPUSH
40403: LD_VAR 0 1
40407: PPUSH
40408: CALL_OW 321
40412: PUSH
40413: LD_INT 2
40415: EQUAL
40416: ST_TO_ADDR
40417: GO 40519
40419: LD_INT 17
40421: DOUBLE
40422: EQUAL
40423: IFTRUE 40427
40425: GO 40452
40427: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40428: LD_ADDR_VAR 0 3
40432: PUSH
40433: LD_INT 39
40435: PPUSH
40436: LD_VAR 0 1
40440: PPUSH
40441: CALL_OW 321
40445: PUSH
40446: LD_INT 2
40448: EQUAL
40449: ST_TO_ADDR
40450: GO 40519
40452: LD_INT 18
40454: DOUBLE
40455: EQUAL
40456: IFTRUE 40460
40458: GO 40485
40460: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40461: LD_ADDR_VAR 0 3
40465: PUSH
40466: LD_INT 40
40468: PPUSH
40469: LD_VAR 0 1
40473: PPUSH
40474: CALL_OW 321
40478: PUSH
40479: LD_INT 2
40481: EQUAL
40482: ST_TO_ADDR
40483: GO 40519
40485: LD_INT 27
40487: DOUBLE
40488: EQUAL
40489: IFTRUE 40493
40491: GO 40518
40493: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40494: LD_ADDR_VAR 0 3
40498: PUSH
40499: LD_INT 35
40501: PPUSH
40502: LD_VAR 0 1
40506: PPUSH
40507: CALL_OW 321
40511: PUSH
40512: LD_INT 2
40514: EQUAL
40515: ST_TO_ADDR
40516: GO 40519
40518: POP
// end ;
40519: LD_VAR 0 3
40523: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40524: LD_INT 0
40526: PPUSH
40527: PPUSH
40528: PPUSH
40529: PPUSH
40530: PPUSH
40531: PPUSH
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
// result := false ;
40537: LD_ADDR_VAR 0 6
40541: PUSH
40542: LD_INT 0
40544: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40545: LD_VAR 0 1
40549: NOT
40550: PUSH
40551: LD_VAR 0 1
40555: PPUSH
40556: CALL_OW 266
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: IN
40571: NOT
40572: OR
40573: PUSH
40574: LD_VAR 0 2
40578: NOT
40579: OR
40580: PUSH
40581: LD_VAR 0 5
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: LD_INT 3
40597: PUSH
40598: LD_INT 4
40600: PUSH
40601: LD_INT 5
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: IN
40612: NOT
40613: OR
40614: PUSH
40615: LD_VAR 0 3
40619: PPUSH
40620: LD_VAR 0 4
40624: PPUSH
40625: CALL_OW 488
40629: NOT
40630: OR
40631: IFFALSE 40635
// exit ;
40633: GO 41371
// side := GetSide ( depot ) ;
40635: LD_ADDR_VAR 0 9
40639: PUSH
40640: LD_VAR 0 1
40644: PPUSH
40645: CALL_OW 255
40649: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40650: LD_VAR 0 9
40654: PPUSH
40655: LD_VAR 0 2
40659: PPUSH
40660: CALL 40144 0 2
40664: NOT
40665: IFFALSE 40669
// exit ;
40667: GO 41371
// pom := GetBase ( depot ) ;
40669: LD_ADDR_VAR 0 10
40673: PUSH
40674: LD_VAR 0 1
40678: PPUSH
40679: CALL_OW 274
40683: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40684: LD_ADDR_VAR 0 11
40688: PUSH
40689: LD_VAR 0 2
40693: PPUSH
40694: LD_VAR 0 1
40698: PPUSH
40699: CALL_OW 248
40703: PPUSH
40704: CALL_OW 450
40708: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40709: LD_VAR 0 10
40713: PPUSH
40714: LD_INT 1
40716: PPUSH
40717: CALL_OW 275
40721: PUSH
40722: LD_VAR 0 11
40726: PUSH
40727: LD_INT 1
40729: ARRAY
40730: GREATEREQUAL
40731: PUSH
40732: LD_VAR 0 10
40736: PPUSH
40737: LD_INT 2
40739: PPUSH
40740: CALL_OW 275
40744: PUSH
40745: LD_VAR 0 11
40749: PUSH
40750: LD_INT 2
40752: ARRAY
40753: GREATEREQUAL
40754: AND
40755: PUSH
40756: LD_VAR 0 10
40760: PPUSH
40761: LD_INT 3
40763: PPUSH
40764: CALL_OW 275
40768: PUSH
40769: LD_VAR 0 11
40773: PUSH
40774: LD_INT 3
40776: ARRAY
40777: GREATEREQUAL
40778: AND
40779: NOT
40780: IFFALSE 40784
// exit ;
40782: GO 41371
// if GetBType ( depot ) = b_depot then
40784: LD_VAR 0 1
40788: PPUSH
40789: CALL_OW 266
40793: PUSH
40794: LD_INT 0
40796: EQUAL
40797: IFFALSE 40809
// dist := 28 else
40799: LD_ADDR_VAR 0 14
40803: PUSH
40804: LD_INT 28
40806: ST_TO_ADDR
40807: GO 40817
// dist := 36 ;
40809: LD_ADDR_VAR 0 14
40813: PUSH
40814: LD_INT 36
40816: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40817: LD_VAR 0 1
40821: PPUSH
40822: LD_VAR 0 3
40826: PPUSH
40827: LD_VAR 0 4
40831: PPUSH
40832: CALL_OW 297
40836: PUSH
40837: LD_VAR 0 14
40841: GREATER
40842: IFFALSE 40846
// exit ;
40844: GO 41371
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40846: LD_ADDR_VAR 0 12
40850: PUSH
40851: LD_VAR 0 2
40855: PPUSH
40856: LD_VAR 0 3
40860: PPUSH
40861: LD_VAR 0 4
40865: PPUSH
40866: LD_VAR 0 5
40870: PPUSH
40871: LD_VAR 0 1
40875: PPUSH
40876: CALL_OW 248
40880: PPUSH
40881: LD_INT 0
40883: PPUSH
40884: CALL 41376 0 6
40888: ST_TO_ADDR
// if not hexes then
40889: LD_VAR 0 12
40893: NOT
40894: IFFALSE 40898
// exit ;
40896: GO 41371
// hex := GetHexInfo ( x , y ) ;
40898: LD_ADDR_VAR 0 15
40902: PUSH
40903: LD_VAR 0 3
40907: PPUSH
40908: LD_VAR 0 4
40912: PPUSH
40913: CALL_OW 546
40917: ST_TO_ADDR
// if hex [ 1 ] then
40918: LD_VAR 0 15
40922: PUSH
40923: LD_INT 1
40925: ARRAY
40926: IFFALSE 40930
// exit ;
40928: GO 41371
// height := hex [ 2 ] ;
40930: LD_ADDR_VAR 0 13
40934: PUSH
40935: LD_VAR 0 15
40939: PUSH
40940: LD_INT 2
40942: ARRAY
40943: ST_TO_ADDR
// for i = 1 to hexes do
40944: LD_ADDR_VAR 0 7
40948: PUSH
40949: DOUBLE
40950: LD_INT 1
40952: DEC
40953: ST_TO_ADDR
40954: LD_VAR 0 12
40958: PUSH
40959: FOR_TO
40960: IFFALSE 41290
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40962: LD_VAR 0 12
40966: PUSH
40967: LD_VAR 0 7
40971: ARRAY
40972: PUSH
40973: LD_INT 1
40975: ARRAY
40976: PPUSH
40977: LD_VAR 0 12
40981: PUSH
40982: LD_VAR 0 7
40986: ARRAY
40987: PUSH
40988: LD_INT 2
40990: ARRAY
40991: PPUSH
40992: CALL_OW 488
40996: NOT
40997: PUSH
40998: LD_VAR 0 12
41002: PUSH
41003: LD_VAR 0 7
41007: ARRAY
41008: PUSH
41009: LD_INT 1
41011: ARRAY
41012: PPUSH
41013: LD_VAR 0 12
41017: PUSH
41018: LD_VAR 0 7
41022: ARRAY
41023: PUSH
41024: LD_INT 2
41026: ARRAY
41027: PPUSH
41028: CALL_OW 428
41032: PUSH
41033: LD_INT 0
41035: GREATER
41036: OR
41037: PUSH
41038: LD_VAR 0 12
41042: PUSH
41043: LD_VAR 0 7
41047: ARRAY
41048: PUSH
41049: LD_INT 1
41051: ARRAY
41052: PPUSH
41053: LD_VAR 0 12
41057: PUSH
41058: LD_VAR 0 7
41062: ARRAY
41063: PUSH
41064: LD_INT 2
41066: ARRAY
41067: PPUSH
41068: CALL_OW 351
41072: OR
41073: IFFALSE 41079
// exit ;
41075: POP
41076: POP
41077: GO 41371
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41079: LD_ADDR_VAR 0 8
41083: PUSH
41084: LD_VAR 0 12
41088: PUSH
41089: LD_VAR 0 7
41093: ARRAY
41094: PUSH
41095: LD_INT 1
41097: ARRAY
41098: PPUSH
41099: LD_VAR 0 12
41103: PUSH
41104: LD_VAR 0 7
41108: ARRAY
41109: PUSH
41110: LD_INT 2
41112: ARRAY
41113: PPUSH
41114: CALL_OW 546
41118: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41119: LD_VAR 0 8
41123: PUSH
41124: LD_INT 1
41126: ARRAY
41127: PUSH
41128: LD_VAR 0 8
41132: PUSH
41133: LD_INT 2
41135: ARRAY
41136: PUSH
41137: LD_VAR 0 13
41141: PUSH
41142: LD_INT 2
41144: PLUS
41145: GREATER
41146: OR
41147: PUSH
41148: LD_VAR 0 8
41152: PUSH
41153: LD_INT 2
41155: ARRAY
41156: PUSH
41157: LD_VAR 0 13
41161: PUSH
41162: LD_INT 2
41164: MINUS
41165: LESS
41166: OR
41167: PUSH
41168: LD_VAR 0 8
41172: PUSH
41173: LD_INT 3
41175: ARRAY
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: LD_INT 8
41182: PUSH
41183: LD_INT 9
41185: PUSH
41186: LD_INT 10
41188: PUSH
41189: LD_INT 11
41191: PUSH
41192: LD_INT 12
41194: PUSH
41195: LD_INT 13
41197: PUSH
41198: LD_INT 16
41200: PUSH
41201: LD_INT 17
41203: PUSH
41204: LD_INT 18
41206: PUSH
41207: LD_INT 19
41209: PUSH
41210: LD_INT 20
41212: PUSH
41213: LD_INT 21
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: IN
41231: NOT
41232: OR
41233: PUSH
41234: LD_VAR 0 8
41238: PUSH
41239: LD_INT 5
41241: ARRAY
41242: NOT
41243: OR
41244: PUSH
41245: LD_VAR 0 8
41249: PUSH
41250: LD_INT 6
41252: ARRAY
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: LD_INT 7
41262: PUSH
41263: LD_INT 9
41265: PUSH
41266: LD_INT 10
41268: PUSH
41269: LD_INT 11
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: IN
41280: NOT
41281: OR
41282: IFFALSE 41288
// exit ;
41284: POP
41285: POP
41286: GO 41371
// end ;
41288: GO 40959
41290: POP
41291: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41292: LD_VAR 0 9
41296: PPUSH
41297: LD_VAR 0 3
41301: PPUSH
41302: LD_VAR 0 4
41306: PPUSH
41307: LD_INT 20
41309: PPUSH
41310: CALL 33317 0 4
41314: PUSH
41315: LD_INT 4
41317: ARRAY
41318: IFFALSE 41322
// exit ;
41320: GO 41371
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41322: LD_VAR 0 2
41326: PUSH
41327: LD_INT 29
41329: PUSH
41330: LD_INT 30
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: IN
41337: PUSH
41338: LD_VAR 0 3
41342: PPUSH
41343: LD_VAR 0 4
41347: PPUSH
41348: LD_VAR 0 9
41352: PPUSH
41353: CALL_OW 440
41357: NOT
41358: AND
41359: IFFALSE 41363
// exit ;
41361: GO 41371
// result := true ;
41363: LD_ADDR_VAR 0 6
41367: PUSH
41368: LD_INT 1
41370: ST_TO_ADDR
// end ;
41371: LD_VAR 0 6
41375: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41376: LD_INT 0
41378: PPUSH
41379: PPUSH
41380: PPUSH
41381: PPUSH
41382: PPUSH
41383: PPUSH
41384: PPUSH
41385: PPUSH
41386: PPUSH
41387: PPUSH
41388: PPUSH
41389: PPUSH
41390: PPUSH
41391: PPUSH
41392: PPUSH
41393: PPUSH
41394: PPUSH
41395: PPUSH
41396: PPUSH
41397: PPUSH
41398: PPUSH
41399: PPUSH
41400: PPUSH
41401: PPUSH
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
41406: PPUSH
41407: PPUSH
41408: PPUSH
41409: PPUSH
41410: PPUSH
41411: PPUSH
41412: PPUSH
41413: PPUSH
41414: PPUSH
41415: PPUSH
41416: PPUSH
41417: PPUSH
41418: PPUSH
41419: PPUSH
41420: PPUSH
41421: PPUSH
41422: PPUSH
41423: PPUSH
41424: PPUSH
41425: PPUSH
41426: PPUSH
41427: PPUSH
41428: PPUSH
41429: PPUSH
41430: PPUSH
41431: PPUSH
41432: PPUSH
41433: PPUSH
41434: PPUSH
41435: PPUSH
// result = [ ] ;
41436: LD_ADDR_VAR 0 7
41440: PUSH
41441: EMPTY
41442: ST_TO_ADDR
// temp_list = [ ] ;
41443: LD_ADDR_VAR 0 9
41447: PUSH
41448: EMPTY
41449: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41450: LD_VAR 0 4
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: LD_INT 3
41466: PUSH
41467: LD_INT 4
41469: PUSH
41470: LD_INT 5
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: IN
41481: NOT
41482: PUSH
41483: LD_VAR 0 1
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: IN
41498: PUSH
41499: LD_VAR 0 5
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: LD_INT 3
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: IN
41518: NOT
41519: AND
41520: OR
41521: IFFALSE 41525
// exit ;
41523: GO 59916
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41525: LD_VAR 0 1
41529: PUSH
41530: LD_INT 6
41532: PUSH
41533: LD_INT 7
41535: PUSH
41536: LD_INT 8
41538: PUSH
41539: LD_INT 13
41541: PUSH
41542: LD_INT 12
41544: PUSH
41545: LD_INT 15
41547: PUSH
41548: LD_INT 11
41550: PUSH
41551: LD_INT 14
41553: PUSH
41554: LD_INT 10
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: IN
41568: IFFALSE 41578
// btype = b_lab ;
41570: LD_ADDR_VAR 0 1
41574: PUSH
41575: LD_INT 6
41577: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41578: LD_VAR 0 6
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: LD_INT 2
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: LIST
41596: IN
41597: NOT
41598: PUSH
41599: LD_VAR 0 1
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: LD_INT 3
41615: PUSH
41616: LD_INT 6
41618: PUSH
41619: LD_INT 36
41621: PUSH
41622: LD_INT 4
41624: PUSH
41625: LD_INT 5
41627: PUSH
41628: LD_INT 31
41630: PUSH
41631: LD_INT 32
41633: PUSH
41634: LD_INT 33
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: IN
41650: NOT
41651: PUSH
41652: LD_VAR 0 6
41656: PUSH
41657: LD_INT 1
41659: EQUAL
41660: AND
41661: OR
41662: PUSH
41663: LD_VAR 0 1
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: LD_INT 3
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: IN
41678: NOT
41679: PUSH
41680: LD_VAR 0 6
41684: PUSH
41685: LD_INT 2
41687: EQUAL
41688: AND
41689: OR
41690: IFFALSE 41700
// mode = 0 ;
41692: LD_ADDR_VAR 0 6
41696: PUSH
41697: LD_INT 0
41699: ST_TO_ADDR
// case mode of 0 :
41700: LD_VAR 0 6
41704: PUSH
41705: LD_INT 0
41707: DOUBLE
41708: EQUAL
41709: IFTRUE 41713
41711: GO 53166
41713: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41714: LD_ADDR_VAR 0 11
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: LD_INT 1
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: LD_INT 1
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: LD_INT 2
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: LD_INT 2
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 2
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: LD_INT 3
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: LD_INT 3
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41907: LD_ADDR_VAR 0 12
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 2
42030: NEG
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 3
42064: NEG
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 3
42075: NEG
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42103: LD_ADDR_VAR 0 13
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: NEG
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 2
42238: NEG
42239: PUSH
42240: LD_INT 2
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: LD_INT 3
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 3
42262: NEG
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: LD_INT 3
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42302: LD_ADDR_VAR 0 14
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 1
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: LD_INT 2
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 2
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: LD_INT 3
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_INT 3
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42498: LD_ADDR_VAR 0 15
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: NEG
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 2
42632: NEG
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 3
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42691: LD_ADDR_VAR 0 16
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: LD_INT 1
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: LD_INT 2
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: NEG
42827: PUSH
42828: LD_INT 2
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 3
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 3
42848: PUSH
42849: LD_INT 3
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 2
42858: PUSH
42859: LD_INT 3
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42884: LD_ADDR_VAR 0 17
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 2
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: NEG
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: NEG
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: NEG
43084: PUSH
43085: LD_INT 2
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43114: LD_ADDR_VAR 0 18
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 1
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 2
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 2
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 2
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: LD_INT 2
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: NEG
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: NEG
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43344: LD_ADDR_VAR 0 19
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: LD_INT 1
43364: NEG
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 2
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 2
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: LD_INT 2
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 2
43520: NEG
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 2
43531: NEG
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: NEG
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43574: LD_ADDR_VAR 0 20
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: LD_INT 2
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 2
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43804: LD_ADDR_VAR 0 21
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: LD_INT 2
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 2
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 2
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: NEG
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: LD_INT 2
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44034: LD_ADDR_VAR 0 22
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 2
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 2
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: LD_INT 2
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 2
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 2
44210: NEG
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44264: LD_ADDR_VAR 0 23
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 1
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 2
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: NEG
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: NEG
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: NEG
44464: PUSH
44465: LD_INT 2
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 2
44475: NEG
44476: PUSH
44477: LD_INT 3
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 3
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44544: LD_ADDR_VAR 0 24
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 2
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 3
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 3
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44820: LD_ADDR_VAR 0 25
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: LD_INT 2
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: LD_INT 2
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: LD_INT 2
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 3
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 3
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: PUSH
45052: LD_INT 3
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45094: LD_ADDR_VAR 0 26
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: LD_INT 2
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 2
45270: NEG
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 2
45293: NEG
45294: PUSH
45295: LD_INT 2
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: LD_INT 3
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 3
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45370: LD_ADDR_VAR 0 27
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 2
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 3
45603: NEG
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 3
45615: NEG
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45650: LD_ADDR_VAR 0 28
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: LD_INT 2
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 2
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: NEG
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: LD_INT 3
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: LD_INT 3
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 3
45885: NEG
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 3
45897: NEG
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45932: LD_ADDR_VAR 0 29
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: LD_INT 2
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 2
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: NEG
46111: PUSH
46112: LD_INT 2
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: LD_INT 3
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 3
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 3
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 3
46176: NEG
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46211: LD_ADDR_VAR 0 30
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: LD_INT 2
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 3
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 3
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: LD_INT 3
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 3
46454: NEG
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46489: LD_ADDR_VAR 0 31
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: LD_INT 2
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: LD_INT 3
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 3
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: LD_INT 3
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 3
46732: NEG
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46767: LD_ADDR_VAR 0 32
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 3
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: LD_INT 2
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 3
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: PUSH
46990: LD_INT 3
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 3
47010: NEG
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47045: LD_ADDR_VAR 0 33
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: LD_INT 3
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 3
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 3
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 3
47289: NEG
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47324: LD_ADDR_VAR 0 34
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: LD_INT 2
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: LD_INT 2
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 2
47491: NEG
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 3
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: LD_INT 3
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 3
47569: NEG
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47604: LD_ADDR_VAR 0 35
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47716: LD_ADDR_VAR 0 36
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 2
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 2
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47828: LD_ADDR_VAR 0 37
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: LD_INT 1
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47940: LD_ADDR_VAR 0 38
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48052: LD_ADDR_VAR 0 39
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48164: LD_ADDR_VAR 0 40
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48276: LD_ADDR_VAR 0 41
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: LD_INT 3
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 3
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: LD_INT 3
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: LD_INT 3
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 3
48550: NEG
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 3
48561: NEG
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 3
48573: NEG
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 3
48585: NEG
48586: PUSH
48587: LD_INT 3
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48626: LD_ADDR_VAR 0 42
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 3
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: LD_INT 3
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 3
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 3
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 3
48872: PUSH
48873: LD_INT 3
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: LD_INT 3
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: LD_INT 3
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 3
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 3
48923: NEG
48924: PUSH
48925: LD_INT 2
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: NEG
48936: PUSH
48937: LD_INT 3
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48976: LD_ADDR_VAR 0 43
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: LD_INT 3
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 3
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 2
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 3
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 3
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 3
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: LD_INT 3
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 3
49272: NEG
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 3
49283: NEG
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49324: LD_ADDR_VAR 0 44
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 2
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 2
49479: NEG
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: NEG
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: LD_INT 3
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 3
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 3
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 3
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 3
49567: PUSH
49568: LD_INT 3
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_INT 3
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: NEG
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 3
49598: NEG
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 3
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 3
49621: NEG
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 3
49633: NEG
49634: PUSH
49635: LD_INT 3
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49674: LD_ADDR_VAR 0 45
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 1
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: LD_INT 3
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 3
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 3
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 3
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: LD_INT 3
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 2
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 3
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 3
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: NEG
49972: PUSH
49973: LD_INT 2
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: LD_INT 3
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50024: LD_ADDR_VAR 0 46
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 3
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 3
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 3
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 3
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: LD_INT 3
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 3
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 3
50320: NEG
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 3
50331: NEG
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50372: LD_ADDR_VAR 0 47
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: LD_INT 2
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: NEG
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50523: LD_ADDR_VAR 0 48
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50670: LD_ADDR_VAR 0 49
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: LD_INT 2
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 2
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50814: LD_ADDR_VAR 0 50
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: LD_INT 2
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50958: LD_ADDR_VAR 0 51
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51105: LD_ADDR_VAR 0 52
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 2
51209: NEG
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51256: LD_ADDR_VAR 0 53
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 2
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: NEG
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51486: LD_ADDR_VAR 0 54
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: LD_INT 2
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 2
51673: NEG
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: NEG
51686: PUSH
51687: LD_INT 2
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51716: LD_ADDR_VAR 0 55
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 2
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 2
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 2
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51946: LD_ADDR_VAR 0 56
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 2
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: LD_INT 2
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 2
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 2
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 2
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 2
52133: NEG
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: LD_INT 2
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52176: LD_ADDR_VAR 0 57
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52406: LD_ADDR_VAR 0 58
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: LD_INT 2
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52636: LD_ADDR_VAR 0 59
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52724: LD_ADDR_VAR 0 60
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52812: LD_ADDR_VAR 0 61
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52900: LD_ADDR_VAR 0 62
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52988: LD_ADDR_VAR 0 63
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53076: LD_ADDR_VAR 0 64
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: ST_TO_ADDR
// end ; 1 :
53164: GO 59061
53166: LD_INT 1
53168: DOUBLE
53169: EQUAL
53170: IFTRUE 53174
53172: GO 55797
53174: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53175: LD_ADDR_VAR 0 11
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: LD_INT 3
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 3
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: LD_INT 2
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: LIST
53218: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53219: LD_ADDR_VAR 0 12
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 3
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: LIST
53259: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53260: LD_ADDR_VAR 0 13
53264: PUSH
53265: LD_INT 3
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 3
53277: PUSH
53278: LD_INT 3
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: LD_INT 3
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: LIST
53299: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53300: LD_ADDR_VAR 0 14
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: LD_INT 3
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 3
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: LIST
53340: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53341: LD_ADDR_VAR 0 15
53345: PUSH
53346: LD_INT 2
53348: NEG
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 3
53359: NEG
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 3
53370: NEG
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: LIST
53384: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53385: LD_ADDR_VAR 0 16
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: LD_INT 3
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 3
53404: NEG
53405: PUSH
53406: LD_INT 2
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 3
53416: NEG
53417: PUSH
53418: LD_INT 3
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: LIST
53430: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53431: LD_ADDR_VAR 0 17
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 3
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: LD_INT 3
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: LIST
53474: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53475: LD_ADDR_VAR 0 18
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 3
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: LIST
53515: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53516: LD_ADDR_VAR 0 19
53520: PUSH
53521: LD_INT 3
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 3
53533: PUSH
53534: LD_INT 3
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: LD_INT 3
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: LIST
53555: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53556: LD_ADDR_VAR 0 20
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 3
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 3
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: LIST
53596: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53597: LD_ADDR_VAR 0 21
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 3
53615: NEG
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: LIST
53640: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53641: LD_ADDR_VAR 0 22
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: LD_INT 3
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 3
53660: NEG
53661: PUSH
53662: LD_INT 2
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 3
53672: NEG
53673: PUSH
53674: LD_INT 3
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: LIST
53686: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53687: LD_ADDR_VAR 0 23
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 3
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: LD_INT 4
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 3
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: LIST
53730: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53731: LD_ADDR_VAR 0 24
53735: PUSH
53736: LD_INT 3
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 3
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 4
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: LIST
53771: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53772: LD_ADDR_VAR 0 25
53776: PUSH
53777: LD_INT 3
53779: PUSH
53780: LD_INT 3
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 4
53789: PUSH
53790: LD_INT 3
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 3
53799: PUSH
53800: LD_INT 4
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: LIST
53811: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53812: LD_ADDR_VAR 0 26
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: LD_INT 3
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 4
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: LIST
53852: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53853: LD_ADDR_VAR 0 27
53857: PUSH
53858: LD_INT 3
53860: NEG
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 3
53871: NEG
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 4
53882: NEG
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: LIST
53896: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53897: LD_ADDR_VAR 0 28
53901: PUSH
53902: LD_INT 3
53904: NEG
53905: PUSH
53906: LD_INT 3
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: LD_INT 4
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 4
53928: NEG
53929: PUSH
53930: LD_INT 3
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: LIST
53942: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53943: LD_ADDR_VAR 0 29
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: LD_INT 3
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 4
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: LD_INT 4
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 5
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 5
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 4
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: LD_INT 6
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 6
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: LD_INT 5
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54098: LD_ADDR_VAR 0 30
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 3
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 3
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 3
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 4
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 4
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 4
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 5
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 5
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 5
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 6
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 6
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54241: LD_ADDR_VAR 0 31
54245: PUSH
54246: LD_INT 3
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 3
54258: PUSH
54259: LD_INT 3
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 3
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 4
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 4
54288: PUSH
54289: LD_INT 4
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 3
54298: PUSH
54299: LD_INT 4
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 5
54308: PUSH
54309: LD_INT 4
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 5
54318: PUSH
54319: LD_INT 5
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 4
54328: PUSH
54329: LD_INT 5
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 6
54338: PUSH
54339: LD_INT 5
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 6
54348: PUSH
54349: LD_INT 6
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 5
54358: PUSH
54359: LD_INT 6
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54380: LD_ADDR_VAR 0 32
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 3
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 4
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 4
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 3
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 5
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 5
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 4
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: LD_INT 6
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: LD_INT 6
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: LD_INT 5
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54523: LD_ADDR_VAR 0 33
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: NEG
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 3
54564: NEG
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 4
54575: NEG
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 4
54586: NEG
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 4
54598: NEG
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 5
54609: NEG
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 5
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 5
54632: NEG
54633: PUSH
54634: LD_INT 1
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 6
54643: NEG
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 6
54654: NEG
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54678: LD_ADDR_VAR 0 34
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: LD_INT 3
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 3
54697: NEG
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 3
54709: NEG
54710: PUSH
54711: LD_INT 3
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 3
54721: NEG
54722: PUSH
54723: LD_INT 4
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 4
54733: NEG
54734: PUSH
54735: LD_INT 3
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 4
54745: NEG
54746: PUSH
54747: LD_INT 4
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 4
54757: NEG
54758: PUSH
54759: LD_INT 5
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 5
54769: NEG
54770: PUSH
54771: LD_INT 4
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 5
54781: NEG
54782: PUSH
54783: LD_INT 5
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 5
54793: NEG
54794: PUSH
54795: LD_INT 6
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 6
54805: NEG
54806: PUSH
54807: LD_INT 5
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 6
54817: NEG
54818: PUSH
54819: LD_INT 6
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54841: LD_ADDR_VAR 0 41
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: LD_INT 3
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: LD_INT 2
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: LIST
54884: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54885: LD_ADDR_VAR 0 42
54889: PUSH
54890: LD_INT 2
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 3
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: LIST
54925: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54926: LD_ADDR_VAR 0 43
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 3
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 2
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: LIST
54965: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54966: LD_ADDR_VAR 0 44
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 2
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: LIST
55006: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55007: LD_ADDR_VAR 0 45
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 3
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: LIST
55050: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55051: LD_ADDR_VAR 0 46
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: LD_INT 3
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 3
55082: NEG
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: LIST
55096: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55097: LD_ADDR_VAR 0 47
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: LD_INT 3
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: LD_INT 3
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55130: LD_ADDR_VAR 0 48
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 2
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55161: LD_ADDR_VAR 0 49
55165: PUSH
55166: LD_INT 3
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 3
55178: PUSH
55179: LD_INT 2
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55190: LD_ADDR_VAR 0 50
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: LD_INT 3
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 3
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55219: LD_ADDR_VAR 0 51
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55250: LD_ADDR_VAR 0 52
55254: PUSH
55255: LD_INT 3
55257: NEG
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 3
55269: NEG
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55283: LD_ADDR_VAR 0 53
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: LD_INT 3
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 3
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55327: LD_ADDR_VAR 0 54
55331: PUSH
55332: LD_INT 2
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 3
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55368: LD_ADDR_VAR 0 55
55372: PUSH
55373: LD_INT 3
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 3
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: PUSH
55396: LD_INT 3
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: LIST
55407: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55408: LD_ADDR_VAR 0 56
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: LD_INT 3
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 3
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: LIST
55448: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55449: LD_ADDR_VAR 0 57
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 3
55467: NEG
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: LIST
55492: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55493: LD_ADDR_VAR 0 58
55497: PUSH
55498: LD_INT 2
55500: NEG
55501: PUSH
55502: LD_INT 3
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 3
55512: NEG
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 3
55524: NEG
55525: PUSH
55526: LD_INT 3
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: LIST
55538: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55539: LD_ADDR_VAR 0 59
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: LD_INT 2
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55583: LD_ADDR_VAR 0 60
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: LIST
55623: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55624: LD_ADDR_VAR 0 61
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: LIST
55663: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55664: LD_ADDR_VAR 0 62
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: LIST
55704: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55705: LD_ADDR_VAR 0 63
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: LIST
55748: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55749: LD_ADDR_VAR 0 64
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: LD_INT 2
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: LIST
55794: ST_TO_ADDR
// end ; 2 :
55795: GO 59061
55797: LD_INT 2
55799: DOUBLE
55800: EQUAL
55801: IFTRUE 55805
55803: GO 59060
55805: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55806: LD_ADDR_VAR 0 29
55810: PUSH
55811: LD_INT 4
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 4
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 5
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 5
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 4
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 3
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 3
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 3
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 5
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 3
55906: PUSH
55907: LD_INT 3
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 3
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 4
55926: PUSH
55927: LD_INT 3
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 4
55936: PUSH
55937: LD_INT 4
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 3
55946: PUSH
55947: LD_INT 4
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: LD_INT 3
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 4
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: LD_INT 4
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: LD_INT 4
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 3
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 4
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 5
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 5
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 4
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: LD_INT 5
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 3
56089: NEG
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 3
56100: NEG
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 2
56112: NEG
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 3
56134: NEG
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 4
56145: NEG
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 4
56156: NEG
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 4
56168: NEG
56169: PUSH
56170: LD_INT 2
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 2
56180: NEG
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 4
56191: NEG
56192: PUSH
56193: LD_INT 4
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 4
56203: NEG
56204: PUSH
56205: LD_INT 5
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 3
56215: NEG
56216: PUSH
56217: LD_INT 4
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 3
56227: NEG
56228: PUSH
56229: LD_INT 3
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 4
56239: NEG
56240: PUSH
56241: LD_INT 3
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 5
56251: NEG
56252: PUSH
56253: LD_INT 4
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 5
56263: NEG
56264: PUSH
56265: LD_INT 5
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 3
56275: NEG
56276: PUSH
56277: LD_INT 5
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 5
56287: NEG
56288: PUSH
56289: LD_INT 3
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56344: LD_ADDR_VAR 0 30
56348: PUSH
56349: LD_INT 4
56351: PUSH
56352: LD_INT 4
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 4
56361: PUSH
56362: LD_INT 3
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 5
56371: PUSH
56372: LD_INT 4
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 5
56381: PUSH
56382: LD_INT 5
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 4
56391: PUSH
56392: LD_INT 5
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 3
56401: PUSH
56402: LD_INT 4
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 3
56411: PUSH
56412: LD_INT 3
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 5
56421: PUSH
56422: LD_INT 3
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 3
56431: PUSH
56432: LD_INT 5
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 3
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 2
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 4
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: LD_INT 4
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 3
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: LD_INT 4
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 4
56534: NEG
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 4
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 3
56557: NEG
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 3
56568: NEG
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 4
56579: NEG
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 5
56590: NEG
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 5
56601: NEG
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 5
56613: NEG
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 3
56625: NEG
56626: PUSH
56627: LD_INT 2
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 3
56636: NEG
56637: PUSH
56638: LD_INT 3
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 3
56648: NEG
56649: PUSH
56650: LD_INT 4
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: LD_INT 3
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 2
56672: NEG
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 3
56684: NEG
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 4
56696: NEG
56697: PUSH
56698: LD_INT 3
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 4
56708: NEG
56709: PUSH
56710: LD_INT 4
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: LD_INT 4
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 4
56732: NEG
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 4
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: LD_INT 5
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 4
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: LD_INT 3
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: LD_INT 3
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: LD_INT 4
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: LD_INT 5
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: LD_INT 5
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56891: LD_ADDR_VAR 0 31
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: LD_INT 4
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 3
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 4
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: LD_INT 5
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 5
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: LD_INT 4
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: LD_INT 3
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 5
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: LD_INT 3
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 3
57002: NEG
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 3
57036: NEG
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 4
57047: NEG
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 4
57058: NEG
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 4
57070: NEG
57071: PUSH
57072: LD_INT 2
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 2
57082: NEG
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 4
57093: NEG
57094: PUSH
57095: LD_INT 4
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 4
57105: NEG
57106: PUSH
57107: LD_INT 5
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 3
57117: NEG
57118: PUSH
57119: LD_INT 4
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 3
57129: NEG
57130: PUSH
57131: LD_INT 3
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 4
57141: NEG
57142: PUSH
57143: LD_INT 3
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 5
57153: NEG
57154: PUSH
57155: LD_INT 4
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 5
57165: NEG
57166: PUSH
57167: LD_INT 5
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 3
57177: NEG
57178: PUSH
57179: LD_INT 5
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 5
57189: NEG
57190: PUSH
57191: LD_INT 3
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 3
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: LD_INT 4
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: LD_INT 3
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: LD_INT 2
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: LD_INT 2
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: LD_INT 3
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: LD_INT 4
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: LD_INT 4
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 4
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 4
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 5
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 5
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 4
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 3
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 3
57375: PUSH
57376: LD_INT 2
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 5
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57441: LD_ADDR_VAR 0 32
57445: PUSH
57446: LD_INT 4
57448: NEG
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 4
57459: NEG
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 3
57471: NEG
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 3
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 4
57493: NEG
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 5
57504: NEG
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 5
57515: NEG
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 5
57527: NEG
57528: PUSH
57529: LD_INT 2
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: LD_INT 2
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 3
57550: NEG
57551: PUSH
57552: LD_INT 3
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 3
57562: NEG
57563: PUSH
57564: LD_INT 4
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: NEG
57575: PUSH
57576: LD_INT 3
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 3
57598: NEG
57599: PUSH
57600: LD_INT 2
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 4
57610: NEG
57611: PUSH
57612: LD_INT 3
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 4
57622: NEG
57623: PUSH
57624: LD_INT 4
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 4
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 4
57646: NEG
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 4
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 5
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 4
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 3
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 4
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 5
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: LD_INT 3
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: LD_INT 5
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 3
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 4
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 4
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 3
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 4
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 4
57853: PUSH
57854: LD_INT 4
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 4
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 5
57873: PUSH
57874: LD_INT 4
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 5
57883: PUSH
57884: LD_INT 5
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 4
57893: PUSH
57894: LD_INT 5
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 3
57903: PUSH
57904: LD_INT 4
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 3
57913: PUSH
57914: LD_INT 3
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 5
57923: PUSH
57924: LD_INT 3
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 3
57933: PUSH
57934: LD_INT 5
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57988: LD_ADDR_VAR 0 33
57992: PUSH
57993: LD_INT 4
57995: NEG
57996: PUSH
57997: LD_INT 4
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 4
58007: NEG
58008: PUSH
58009: LD_INT 5
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 3
58019: NEG
58020: PUSH
58021: LD_INT 4
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 3
58031: NEG
58032: PUSH
58033: LD_INT 3
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 4
58043: NEG
58044: PUSH
58045: LD_INT 3
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 5
58055: NEG
58056: PUSH
58057: LD_INT 4
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 5
58067: NEG
58068: PUSH
58069: LD_INT 5
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 3
58079: NEG
58080: PUSH
58081: LD_INT 5
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 5
58091: NEG
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 4
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: LD_INT 3
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: LD_INT 4
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: LD_INT 2
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: LD_INT 4
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 4
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 4
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 5
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 5
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 4
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 3
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 3
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 3
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 5
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 3
58308: PUSH
58309: LD_INT 2
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 4
58318: PUSH
58319: LD_INT 3
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 4
58328: PUSH
58329: LD_INT 4
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 3
58338: PUSH
58339: LD_INT 4
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 3
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: LD_INT 2
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 4
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: LD_INT 4
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: LD_INT 4
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: LD_INT 3
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: LD_INT 4
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: LD_INT 5
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: LD_INT 5
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: LD_INT 4
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: LD_INT 3
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: LD_INT 5
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58526: LD_ADDR_VAR 0 34
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: LD_INT 4
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: LD_INT 5
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: LD_INT 4
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 3
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: LD_INT 4
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: LD_INT 5
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: LD_INT 3
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: LD_INT 5
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 3
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: LD_INT 1
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 4
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 4
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 3
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 4
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 4
58728: PUSH
58729: LD_INT 4
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 4
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 5
58748: PUSH
58749: LD_INT 4
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 5
58758: PUSH
58759: LD_INT 5
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 4
58768: PUSH
58769: LD_INT 5
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: LD_INT 4
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 5
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 3
58808: PUSH
58809: LD_INT 5
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: LD_INT 3
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: PUSH
58839: LD_INT 3
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 4
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 4
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: LD_INT 3
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: LD_INT 2
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: LD_INT 4
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: NEG
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 4
58911: NEG
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 4
58922: NEG
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 3
58934: NEG
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 3
58945: NEG
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 4
58956: NEG
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 5
58967: NEG
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 5
58978: NEG
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 5
58990: NEG
58991: PUSH
58992: LD_INT 2
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: NEG
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: ST_TO_ADDR
// end ; end ;
59058: GO 59061
59060: POP
// case btype of b_depot , b_warehouse :
59061: LD_VAR 0 1
59065: PUSH
59066: LD_INT 0
59068: DOUBLE
59069: EQUAL
59070: IFTRUE 59080
59072: LD_INT 1
59074: DOUBLE
59075: EQUAL
59076: IFTRUE 59080
59078: GO 59281
59080: POP
// case nation of nation_american :
59081: LD_VAR 0 5
59085: PUSH
59086: LD_INT 1
59088: DOUBLE
59089: EQUAL
59090: IFTRUE 59094
59092: GO 59150
59094: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59095: LD_ADDR_VAR 0 9
59099: PUSH
59100: LD_VAR 0 11
59104: PUSH
59105: LD_VAR 0 12
59109: PUSH
59110: LD_VAR 0 13
59114: PUSH
59115: LD_VAR 0 14
59119: PUSH
59120: LD_VAR 0 15
59124: PUSH
59125: LD_VAR 0 16
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: PUSH
59138: LD_VAR 0 4
59142: PUSH
59143: LD_INT 1
59145: PLUS
59146: ARRAY
59147: ST_TO_ADDR
59148: GO 59279
59150: LD_INT 2
59152: DOUBLE
59153: EQUAL
59154: IFTRUE 59158
59156: GO 59214
59158: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59159: LD_ADDR_VAR 0 9
59163: PUSH
59164: LD_VAR 0 17
59168: PUSH
59169: LD_VAR 0 18
59173: PUSH
59174: LD_VAR 0 19
59178: PUSH
59179: LD_VAR 0 20
59183: PUSH
59184: LD_VAR 0 21
59188: PUSH
59189: LD_VAR 0 22
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: PUSH
59202: LD_VAR 0 4
59206: PUSH
59207: LD_INT 1
59209: PLUS
59210: ARRAY
59211: ST_TO_ADDR
59212: GO 59279
59214: LD_INT 3
59216: DOUBLE
59217: EQUAL
59218: IFTRUE 59222
59220: GO 59278
59222: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59223: LD_ADDR_VAR 0 9
59227: PUSH
59228: LD_VAR 0 23
59232: PUSH
59233: LD_VAR 0 24
59237: PUSH
59238: LD_VAR 0 25
59242: PUSH
59243: LD_VAR 0 26
59247: PUSH
59248: LD_VAR 0 27
59252: PUSH
59253: LD_VAR 0 28
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: PUSH
59266: LD_VAR 0 4
59270: PUSH
59271: LD_INT 1
59273: PLUS
59274: ARRAY
59275: ST_TO_ADDR
59276: GO 59279
59278: POP
59279: GO 59834
59281: LD_INT 2
59283: DOUBLE
59284: EQUAL
59285: IFTRUE 59295
59287: LD_INT 3
59289: DOUBLE
59290: EQUAL
59291: IFTRUE 59295
59293: GO 59351
59295: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59296: LD_ADDR_VAR 0 9
59300: PUSH
59301: LD_VAR 0 29
59305: PUSH
59306: LD_VAR 0 30
59310: PUSH
59311: LD_VAR 0 31
59315: PUSH
59316: LD_VAR 0 32
59320: PUSH
59321: LD_VAR 0 33
59325: PUSH
59326: LD_VAR 0 34
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: PUSH
59339: LD_VAR 0 4
59343: PUSH
59344: LD_INT 1
59346: PLUS
59347: ARRAY
59348: ST_TO_ADDR
59349: GO 59834
59351: LD_INT 16
59353: DOUBLE
59354: EQUAL
59355: IFTRUE 59413
59357: LD_INT 17
59359: DOUBLE
59360: EQUAL
59361: IFTRUE 59413
59363: LD_INT 18
59365: DOUBLE
59366: EQUAL
59367: IFTRUE 59413
59369: LD_INT 19
59371: DOUBLE
59372: EQUAL
59373: IFTRUE 59413
59375: LD_INT 22
59377: DOUBLE
59378: EQUAL
59379: IFTRUE 59413
59381: LD_INT 20
59383: DOUBLE
59384: EQUAL
59385: IFTRUE 59413
59387: LD_INT 21
59389: DOUBLE
59390: EQUAL
59391: IFTRUE 59413
59393: LD_INT 23
59395: DOUBLE
59396: EQUAL
59397: IFTRUE 59413
59399: LD_INT 24
59401: DOUBLE
59402: EQUAL
59403: IFTRUE 59413
59405: LD_INT 25
59407: DOUBLE
59408: EQUAL
59409: IFTRUE 59413
59411: GO 59469
59413: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59414: LD_ADDR_VAR 0 9
59418: PUSH
59419: LD_VAR 0 35
59423: PUSH
59424: LD_VAR 0 36
59428: PUSH
59429: LD_VAR 0 37
59433: PUSH
59434: LD_VAR 0 38
59438: PUSH
59439: LD_VAR 0 39
59443: PUSH
59444: LD_VAR 0 40
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: PUSH
59457: LD_VAR 0 4
59461: PUSH
59462: LD_INT 1
59464: PLUS
59465: ARRAY
59466: ST_TO_ADDR
59467: GO 59834
59469: LD_INT 6
59471: DOUBLE
59472: EQUAL
59473: IFTRUE 59525
59475: LD_INT 7
59477: DOUBLE
59478: EQUAL
59479: IFTRUE 59525
59481: LD_INT 8
59483: DOUBLE
59484: EQUAL
59485: IFTRUE 59525
59487: LD_INT 13
59489: DOUBLE
59490: EQUAL
59491: IFTRUE 59525
59493: LD_INT 12
59495: DOUBLE
59496: EQUAL
59497: IFTRUE 59525
59499: LD_INT 15
59501: DOUBLE
59502: EQUAL
59503: IFTRUE 59525
59505: LD_INT 11
59507: DOUBLE
59508: EQUAL
59509: IFTRUE 59525
59511: LD_INT 14
59513: DOUBLE
59514: EQUAL
59515: IFTRUE 59525
59517: LD_INT 10
59519: DOUBLE
59520: EQUAL
59521: IFTRUE 59525
59523: GO 59581
59525: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59526: LD_ADDR_VAR 0 9
59530: PUSH
59531: LD_VAR 0 41
59535: PUSH
59536: LD_VAR 0 42
59540: PUSH
59541: LD_VAR 0 43
59545: PUSH
59546: LD_VAR 0 44
59550: PUSH
59551: LD_VAR 0 45
59555: PUSH
59556: LD_VAR 0 46
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: PUSH
59569: LD_VAR 0 4
59573: PUSH
59574: LD_INT 1
59576: PLUS
59577: ARRAY
59578: ST_TO_ADDR
59579: GO 59834
59581: LD_INT 36
59583: DOUBLE
59584: EQUAL
59585: IFTRUE 59589
59587: GO 59645
59589: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59590: LD_ADDR_VAR 0 9
59594: PUSH
59595: LD_VAR 0 47
59599: PUSH
59600: LD_VAR 0 48
59604: PUSH
59605: LD_VAR 0 49
59609: PUSH
59610: LD_VAR 0 50
59614: PUSH
59615: LD_VAR 0 51
59619: PUSH
59620: LD_VAR 0 52
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: PUSH
59633: LD_VAR 0 4
59637: PUSH
59638: LD_INT 1
59640: PLUS
59641: ARRAY
59642: ST_TO_ADDR
59643: GO 59834
59645: LD_INT 4
59647: DOUBLE
59648: EQUAL
59649: IFTRUE 59671
59651: LD_INT 5
59653: DOUBLE
59654: EQUAL
59655: IFTRUE 59671
59657: LD_INT 34
59659: DOUBLE
59660: EQUAL
59661: IFTRUE 59671
59663: LD_INT 37
59665: DOUBLE
59666: EQUAL
59667: IFTRUE 59671
59669: GO 59727
59671: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59672: LD_ADDR_VAR 0 9
59676: PUSH
59677: LD_VAR 0 53
59681: PUSH
59682: LD_VAR 0 54
59686: PUSH
59687: LD_VAR 0 55
59691: PUSH
59692: LD_VAR 0 56
59696: PUSH
59697: LD_VAR 0 57
59701: PUSH
59702: LD_VAR 0 58
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: PUSH
59715: LD_VAR 0 4
59719: PUSH
59720: LD_INT 1
59722: PLUS
59723: ARRAY
59724: ST_TO_ADDR
59725: GO 59834
59727: LD_INT 31
59729: DOUBLE
59730: EQUAL
59731: IFTRUE 59777
59733: LD_INT 32
59735: DOUBLE
59736: EQUAL
59737: IFTRUE 59777
59739: LD_INT 33
59741: DOUBLE
59742: EQUAL
59743: IFTRUE 59777
59745: LD_INT 27
59747: DOUBLE
59748: EQUAL
59749: IFTRUE 59777
59751: LD_INT 26
59753: DOUBLE
59754: EQUAL
59755: IFTRUE 59777
59757: LD_INT 28
59759: DOUBLE
59760: EQUAL
59761: IFTRUE 59777
59763: LD_INT 29
59765: DOUBLE
59766: EQUAL
59767: IFTRUE 59777
59769: LD_INT 30
59771: DOUBLE
59772: EQUAL
59773: IFTRUE 59777
59775: GO 59833
59777: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59778: LD_ADDR_VAR 0 9
59782: PUSH
59783: LD_VAR 0 59
59787: PUSH
59788: LD_VAR 0 60
59792: PUSH
59793: LD_VAR 0 61
59797: PUSH
59798: LD_VAR 0 62
59802: PUSH
59803: LD_VAR 0 63
59807: PUSH
59808: LD_VAR 0 64
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: PUSH
59821: LD_VAR 0 4
59825: PUSH
59826: LD_INT 1
59828: PLUS
59829: ARRAY
59830: ST_TO_ADDR
59831: GO 59834
59833: POP
// temp_list2 = [ ] ;
59834: LD_ADDR_VAR 0 10
59838: PUSH
59839: EMPTY
59840: ST_TO_ADDR
// for i in temp_list do
59841: LD_ADDR_VAR 0 8
59845: PUSH
59846: LD_VAR 0 9
59850: PUSH
59851: FOR_IN
59852: IFFALSE 59904
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59854: LD_ADDR_VAR 0 10
59858: PUSH
59859: LD_VAR 0 10
59863: PUSH
59864: LD_VAR 0 8
59868: PUSH
59869: LD_INT 1
59871: ARRAY
59872: PUSH
59873: LD_VAR 0 2
59877: PLUS
59878: PUSH
59879: LD_VAR 0 8
59883: PUSH
59884: LD_INT 2
59886: ARRAY
59887: PUSH
59888: LD_VAR 0 3
59892: PLUS
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: EMPTY
59899: LIST
59900: ADD
59901: ST_TO_ADDR
59902: GO 59851
59904: POP
59905: POP
// result = temp_list2 ;
59906: LD_ADDR_VAR 0 7
59910: PUSH
59911: LD_VAR 0 10
59915: ST_TO_ADDR
// end ;
59916: LD_VAR 0 7
59920: RET
// export function EnemyInRange ( unit , dist ) ; begin
59921: LD_INT 0
59923: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59924: LD_ADDR_VAR 0 3
59928: PUSH
59929: LD_VAR 0 1
59933: PPUSH
59934: CALL_OW 255
59938: PPUSH
59939: LD_VAR 0 1
59943: PPUSH
59944: CALL_OW 250
59948: PPUSH
59949: LD_VAR 0 1
59953: PPUSH
59954: CALL_OW 251
59958: PPUSH
59959: LD_VAR 0 2
59963: PPUSH
59964: CALL 33317 0 4
59968: PUSH
59969: LD_INT 4
59971: ARRAY
59972: ST_TO_ADDR
// end ;
59973: LD_VAR 0 3
59977: RET
// export function PlayerSeeMe ( unit ) ; begin
59978: LD_INT 0
59980: PPUSH
// result := See ( your_side , unit ) ;
59981: LD_ADDR_VAR 0 2
59985: PUSH
59986: LD_OWVAR 2
59990: PPUSH
59991: LD_VAR 0 1
59995: PPUSH
59996: CALL_OW 292
60000: ST_TO_ADDR
// end ;
60001: LD_VAR 0 2
60005: RET
// export function ReverseDir ( unit ) ; begin
60006: LD_INT 0
60008: PPUSH
// if not unit then
60009: LD_VAR 0 1
60013: NOT
60014: IFFALSE 60018
// exit ;
60016: GO 60041
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60018: LD_ADDR_VAR 0 2
60022: PUSH
60023: LD_VAR 0 1
60027: PPUSH
60028: CALL_OW 254
60032: PUSH
60033: LD_INT 3
60035: PLUS
60036: PUSH
60037: LD_INT 6
60039: MOD
60040: ST_TO_ADDR
// end ;
60041: LD_VAR 0 2
60045: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60046: LD_INT 0
60048: PPUSH
60049: PPUSH
60050: PPUSH
60051: PPUSH
60052: PPUSH
// if not hexes then
60053: LD_VAR 0 2
60057: NOT
60058: IFFALSE 60062
// exit ;
60060: GO 60210
// dist := 9999 ;
60062: LD_ADDR_VAR 0 5
60066: PUSH
60067: LD_INT 9999
60069: ST_TO_ADDR
// for i = 1 to hexes do
60070: LD_ADDR_VAR 0 4
60074: PUSH
60075: DOUBLE
60076: LD_INT 1
60078: DEC
60079: ST_TO_ADDR
60080: LD_VAR 0 2
60084: PUSH
60085: FOR_TO
60086: IFFALSE 60198
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60088: LD_VAR 0 1
60092: PPUSH
60093: LD_VAR 0 2
60097: PUSH
60098: LD_VAR 0 4
60102: ARRAY
60103: PUSH
60104: LD_INT 1
60106: ARRAY
60107: PPUSH
60108: LD_VAR 0 2
60112: PUSH
60113: LD_VAR 0 4
60117: ARRAY
60118: PUSH
60119: LD_INT 2
60121: ARRAY
60122: PPUSH
60123: CALL_OW 297
60127: PUSH
60128: LD_VAR 0 5
60132: LESS
60133: IFFALSE 60196
// begin hex := hexes [ i ] ;
60135: LD_ADDR_VAR 0 7
60139: PUSH
60140: LD_VAR 0 2
60144: PUSH
60145: LD_VAR 0 4
60149: ARRAY
60150: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60151: LD_ADDR_VAR 0 5
60155: PUSH
60156: LD_VAR 0 1
60160: PPUSH
60161: LD_VAR 0 2
60165: PUSH
60166: LD_VAR 0 4
60170: ARRAY
60171: PUSH
60172: LD_INT 1
60174: ARRAY
60175: PPUSH
60176: LD_VAR 0 2
60180: PUSH
60181: LD_VAR 0 4
60185: ARRAY
60186: PUSH
60187: LD_INT 2
60189: ARRAY
60190: PPUSH
60191: CALL_OW 297
60195: ST_TO_ADDR
// end ; end ;
60196: GO 60085
60198: POP
60199: POP
// result := hex ;
60200: LD_ADDR_VAR 0 3
60204: PUSH
60205: LD_VAR 0 7
60209: ST_TO_ADDR
// end ;
60210: LD_VAR 0 3
60214: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60215: LD_INT 0
60217: PPUSH
60218: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60219: LD_VAR 0 1
60223: NOT
60224: PUSH
60225: LD_VAR 0 1
60229: PUSH
60230: LD_INT 21
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 23
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PPUSH
60254: CALL_OW 69
60258: IN
60259: NOT
60260: OR
60261: IFFALSE 60265
// exit ;
60263: GO 60312
// for i = 1 to 3 do
60265: LD_ADDR_VAR 0 3
60269: PUSH
60270: DOUBLE
60271: LD_INT 1
60273: DEC
60274: ST_TO_ADDR
60275: LD_INT 3
60277: PUSH
60278: FOR_TO
60279: IFFALSE 60310
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60281: LD_VAR 0 1
60285: PPUSH
60286: CALL_OW 250
60290: PPUSH
60291: LD_VAR 0 1
60295: PPUSH
60296: CALL_OW 251
60300: PPUSH
60301: LD_INT 1
60303: PPUSH
60304: CALL_OW 453
60308: GO 60278
60310: POP
60311: POP
// end ;
60312: LD_VAR 0 2
60316: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60317: LD_INT 0
60319: PPUSH
60320: PPUSH
60321: PPUSH
60322: PPUSH
60323: PPUSH
60324: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60325: LD_VAR 0 1
60329: NOT
60330: PUSH
60331: LD_VAR 0 2
60335: NOT
60336: OR
60337: PUSH
60338: LD_VAR 0 1
60342: PPUSH
60343: CALL_OW 314
60347: OR
60348: IFFALSE 60352
// exit ;
60350: GO 60793
// x := GetX ( enemy_unit ) ;
60352: LD_ADDR_VAR 0 7
60356: PUSH
60357: LD_VAR 0 2
60361: PPUSH
60362: CALL_OW 250
60366: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60367: LD_ADDR_VAR 0 8
60371: PUSH
60372: LD_VAR 0 2
60376: PPUSH
60377: CALL_OW 251
60381: ST_TO_ADDR
// if not x or not y then
60382: LD_VAR 0 7
60386: NOT
60387: PUSH
60388: LD_VAR 0 8
60392: NOT
60393: OR
60394: IFFALSE 60398
// exit ;
60396: GO 60793
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60398: LD_ADDR_VAR 0 6
60402: PUSH
60403: LD_VAR 0 7
60407: PPUSH
60408: LD_INT 0
60410: PPUSH
60411: LD_INT 4
60413: PPUSH
60414: CALL_OW 272
60418: PUSH
60419: LD_VAR 0 8
60423: PPUSH
60424: LD_INT 0
60426: PPUSH
60427: LD_INT 4
60429: PPUSH
60430: CALL_OW 273
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_VAR 0 7
60443: PPUSH
60444: LD_INT 1
60446: PPUSH
60447: LD_INT 4
60449: PPUSH
60450: CALL_OW 272
60454: PUSH
60455: LD_VAR 0 8
60459: PPUSH
60460: LD_INT 1
60462: PPUSH
60463: LD_INT 4
60465: PPUSH
60466: CALL_OW 273
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_VAR 0 7
60479: PPUSH
60480: LD_INT 2
60482: PPUSH
60483: LD_INT 4
60485: PPUSH
60486: CALL_OW 272
60490: PUSH
60491: LD_VAR 0 8
60495: PPUSH
60496: LD_INT 2
60498: PPUSH
60499: LD_INT 4
60501: PPUSH
60502: CALL_OW 273
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_VAR 0 7
60515: PPUSH
60516: LD_INT 3
60518: PPUSH
60519: LD_INT 4
60521: PPUSH
60522: CALL_OW 272
60526: PUSH
60527: LD_VAR 0 8
60531: PPUSH
60532: LD_INT 3
60534: PPUSH
60535: LD_INT 4
60537: PPUSH
60538: CALL_OW 273
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_VAR 0 7
60551: PPUSH
60552: LD_INT 4
60554: PPUSH
60555: LD_INT 4
60557: PPUSH
60558: CALL_OW 272
60562: PUSH
60563: LD_VAR 0 8
60567: PPUSH
60568: LD_INT 4
60570: PPUSH
60571: LD_INT 4
60573: PPUSH
60574: CALL_OW 273
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_VAR 0 7
60587: PPUSH
60588: LD_INT 5
60590: PPUSH
60591: LD_INT 4
60593: PPUSH
60594: CALL_OW 272
60598: PUSH
60599: LD_VAR 0 8
60603: PPUSH
60604: LD_INT 5
60606: PPUSH
60607: LD_INT 4
60609: PPUSH
60610: CALL_OW 273
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: ST_TO_ADDR
// for i = tmp downto 1 do
60627: LD_ADDR_VAR 0 4
60631: PUSH
60632: DOUBLE
60633: LD_VAR 0 6
60637: INC
60638: ST_TO_ADDR
60639: LD_INT 1
60641: PUSH
60642: FOR_DOWNTO
60643: IFFALSE 60744
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60645: LD_VAR 0 6
60649: PUSH
60650: LD_VAR 0 4
60654: ARRAY
60655: PUSH
60656: LD_INT 1
60658: ARRAY
60659: PPUSH
60660: LD_VAR 0 6
60664: PUSH
60665: LD_VAR 0 4
60669: ARRAY
60670: PUSH
60671: LD_INT 2
60673: ARRAY
60674: PPUSH
60675: CALL_OW 488
60679: NOT
60680: PUSH
60681: LD_VAR 0 6
60685: PUSH
60686: LD_VAR 0 4
60690: ARRAY
60691: PUSH
60692: LD_INT 1
60694: ARRAY
60695: PPUSH
60696: LD_VAR 0 6
60700: PUSH
60701: LD_VAR 0 4
60705: ARRAY
60706: PUSH
60707: LD_INT 2
60709: ARRAY
60710: PPUSH
60711: CALL_OW 428
60715: PUSH
60716: LD_INT 0
60718: NONEQUAL
60719: OR
60720: IFFALSE 60742
// tmp := Delete ( tmp , i ) ;
60722: LD_ADDR_VAR 0 6
60726: PUSH
60727: LD_VAR 0 6
60731: PPUSH
60732: LD_VAR 0 4
60736: PPUSH
60737: CALL_OW 3
60741: ST_TO_ADDR
60742: GO 60642
60744: POP
60745: POP
// j := GetClosestHex ( unit , tmp ) ;
60746: LD_ADDR_VAR 0 5
60750: PUSH
60751: LD_VAR 0 1
60755: PPUSH
60756: LD_VAR 0 6
60760: PPUSH
60761: CALL 60046 0 2
60765: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60766: LD_VAR 0 1
60770: PPUSH
60771: LD_VAR 0 5
60775: PUSH
60776: LD_INT 1
60778: ARRAY
60779: PPUSH
60780: LD_VAR 0 5
60784: PUSH
60785: LD_INT 2
60787: ARRAY
60788: PPUSH
60789: CALL_OW 111
// end ;
60793: LD_VAR 0 3
60797: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60798: LD_INT 0
60800: PPUSH
60801: PPUSH
60802: PPUSH
// uc_side = 0 ;
60803: LD_ADDR_OWVAR 20
60807: PUSH
60808: LD_INT 0
60810: ST_TO_ADDR
// uc_nation = 0 ;
60811: LD_ADDR_OWVAR 21
60815: PUSH
60816: LD_INT 0
60818: ST_TO_ADDR
// InitHc_All ( ) ;
60819: CALL_OW 584
// InitVc ;
60823: CALL_OW 20
// if mastodonts then
60827: LD_VAR 0 6
60831: IFFALSE 60898
// for i = 1 to mastodonts do
60833: LD_ADDR_VAR 0 11
60837: PUSH
60838: DOUBLE
60839: LD_INT 1
60841: DEC
60842: ST_TO_ADDR
60843: LD_VAR 0 6
60847: PUSH
60848: FOR_TO
60849: IFFALSE 60896
// begin vc_chassis := 31 ;
60851: LD_ADDR_OWVAR 37
60855: PUSH
60856: LD_INT 31
60858: ST_TO_ADDR
// vc_control := control_rider ;
60859: LD_ADDR_OWVAR 38
60863: PUSH
60864: LD_INT 4
60866: ST_TO_ADDR
// animal := CreateVehicle ;
60867: LD_ADDR_VAR 0 12
60871: PUSH
60872: CALL_OW 45
60876: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60877: LD_VAR 0 12
60881: PPUSH
60882: LD_VAR 0 8
60886: PPUSH
60887: LD_INT 0
60889: PPUSH
60890: CALL 63086 0 3
// end ;
60894: GO 60848
60896: POP
60897: POP
// if horses then
60898: LD_VAR 0 5
60902: IFFALSE 60969
// for i = 1 to horses do
60904: LD_ADDR_VAR 0 11
60908: PUSH
60909: DOUBLE
60910: LD_INT 1
60912: DEC
60913: ST_TO_ADDR
60914: LD_VAR 0 5
60918: PUSH
60919: FOR_TO
60920: IFFALSE 60967
// begin hc_class := 21 ;
60922: LD_ADDR_OWVAR 28
60926: PUSH
60927: LD_INT 21
60929: ST_TO_ADDR
// hc_gallery :=  ;
60930: LD_ADDR_OWVAR 33
60934: PUSH
60935: LD_STRING 
60937: ST_TO_ADDR
// animal := CreateHuman ;
60938: LD_ADDR_VAR 0 12
60942: PUSH
60943: CALL_OW 44
60947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60948: LD_VAR 0 12
60952: PPUSH
60953: LD_VAR 0 8
60957: PPUSH
60958: LD_INT 0
60960: PPUSH
60961: CALL 63086 0 3
// end ;
60965: GO 60919
60967: POP
60968: POP
// if birds then
60969: LD_VAR 0 1
60973: IFFALSE 61040
// for i = 1 to birds do
60975: LD_ADDR_VAR 0 11
60979: PUSH
60980: DOUBLE
60981: LD_INT 1
60983: DEC
60984: ST_TO_ADDR
60985: LD_VAR 0 1
60989: PUSH
60990: FOR_TO
60991: IFFALSE 61038
// begin hc_class = 18 ;
60993: LD_ADDR_OWVAR 28
60997: PUSH
60998: LD_INT 18
61000: ST_TO_ADDR
// hc_gallery =  ;
61001: LD_ADDR_OWVAR 33
61005: PUSH
61006: LD_STRING 
61008: ST_TO_ADDR
// animal := CreateHuman ;
61009: LD_ADDR_VAR 0 12
61013: PUSH
61014: CALL_OW 44
61018: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61019: LD_VAR 0 12
61023: PPUSH
61024: LD_VAR 0 8
61028: PPUSH
61029: LD_INT 0
61031: PPUSH
61032: CALL 63086 0 3
// end ;
61036: GO 60990
61038: POP
61039: POP
// if tigers then
61040: LD_VAR 0 2
61044: IFFALSE 61128
// for i = 1 to tigers do
61046: LD_ADDR_VAR 0 11
61050: PUSH
61051: DOUBLE
61052: LD_INT 1
61054: DEC
61055: ST_TO_ADDR
61056: LD_VAR 0 2
61060: PUSH
61061: FOR_TO
61062: IFFALSE 61126
// begin hc_class = class_tiger ;
61064: LD_ADDR_OWVAR 28
61068: PUSH
61069: LD_INT 14
61071: ST_TO_ADDR
// hc_gallery =  ;
61072: LD_ADDR_OWVAR 33
61076: PUSH
61077: LD_STRING 
61079: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61080: LD_ADDR_OWVAR 35
61084: PUSH
61085: LD_INT 7
61087: NEG
61088: PPUSH
61089: LD_INT 7
61091: PPUSH
61092: CALL_OW 12
61096: ST_TO_ADDR
// animal := CreateHuman ;
61097: LD_ADDR_VAR 0 12
61101: PUSH
61102: CALL_OW 44
61106: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61107: LD_VAR 0 12
61111: PPUSH
61112: LD_VAR 0 8
61116: PPUSH
61117: LD_INT 0
61119: PPUSH
61120: CALL 63086 0 3
// end ;
61124: GO 61061
61126: POP
61127: POP
// if apemans then
61128: LD_VAR 0 3
61132: IFFALSE 61255
// for i = 1 to apemans do
61134: LD_ADDR_VAR 0 11
61138: PUSH
61139: DOUBLE
61140: LD_INT 1
61142: DEC
61143: ST_TO_ADDR
61144: LD_VAR 0 3
61148: PUSH
61149: FOR_TO
61150: IFFALSE 61253
// begin hc_class = class_apeman ;
61152: LD_ADDR_OWVAR 28
61156: PUSH
61157: LD_INT 12
61159: ST_TO_ADDR
// hc_gallery =  ;
61160: LD_ADDR_OWVAR 33
61164: PUSH
61165: LD_STRING 
61167: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61168: LD_ADDR_OWVAR 35
61172: PUSH
61173: LD_INT 2
61175: NEG
61176: PPUSH
61177: LD_INT 2
61179: PPUSH
61180: CALL_OW 12
61184: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61185: LD_ADDR_OWVAR 31
61189: PUSH
61190: LD_INT 1
61192: PPUSH
61193: LD_INT 3
61195: PPUSH
61196: CALL_OW 12
61200: PUSH
61201: LD_INT 1
61203: PPUSH
61204: LD_INT 3
61206: PPUSH
61207: CALL_OW 12
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: ST_TO_ADDR
// animal := CreateHuman ;
61224: LD_ADDR_VAR 0 12
61228: PUSH
61229: CALL_OW 44
61233: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61234: LD_VAR 0 12
61238: PPUSH
61239: LD_VAR 0 8
61243: PPUSH
61244: LD_INT 0
61246: PPUSH
61247: CALL 63086 0 3
// end ;
61251: GO 61149
61253: POP
61254: POP
// if enchidnas then
61255: LD_VAR 0 4
61259: IFFALSE 61326
// for i = 1 to enchidnas do
61261: LD_ADDR_VAR 0 11
61265: PUSH
61266: DOUBLE
61267: LD_INT 1
61269: DEC
61270: ST_TO_ADDR
61271: LD_VAR 0 4
61275: PUSH
61276: FOR_TO
61277: IFFALSE 61324
// begin hc_class = 13 ;
61279: LD_ADDR_OWVAR 28
61283: PUSH
61284: LD_INT 13
61286: ST_TO_ADDR
// hc_gallery =  ;
61287: LD_ADDR_OWVAR 33
61291: PUSH
61292: LD_STRING 
61294: ST_TO_ADDR
// animal := CreateHuman ;
61295: LD_ADDR_VAR 0 12
61299: PUSH
61300: CALL_OW 44
61304: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61305: LD_VAR 0 12
61309: PPUSH
61310: LD_VAR 0 8
61314: PPUSH
61315: LD_INT 0
61317: PPUSH
61318: CALL 63086 0 3
// end ;
61322: GO 61276
61324: POP
61325: POP
// if fishes then
61326: LD_VAR 0 7
61330: IFFALSE 61397
// for i = 1 to fishes do
61332: LD_ADDR_VAR 0 11
61336: PUSH
61337: DOUBLE
61338: LD_INT 1
61340: DEC
61341: ST_TO_ADDR
61342: LD_VAR 0 7
61346: PUSH
61347: FOR_TO
61348: IFFALSE 61395
// begin hc_class = 20 ;
61350: LD_ADDR_OWVAR 28
61354: PUSH
61355: LD_INT 20
61357: ST_TO_ADDR
// hc_gallery =  ;
61358: LD_ADDR_OWVAR 33
61362: PUSH
61363: LD_STRING 
61365: ST_TO_ADDR
// animal := CreateHuman ;
61366: LD_ADDR_VAR 0 12
61370: PUSH
61371: CALL_OW 44
61375: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61376: LD_VAR 0 12
61380: PPUSH
61381: LD_VAR 0 9
61385: PPUSH
61386: LD_INT 0
61388: PPUSH
61389: CALL 63086 0 3
// end ;
61393: GO 61347
61395: POP
61396: POP
// end ;
61397: LD_VAR 0 10
61401: RET
// export function WantHeal ( sci , unit ) ; begin
61402: LD_INT 0
61404: PPUSH
// if GetTaskList ( sci ) > 0 then
61405: LD_VAR 0 1
61409: PPUSH
61410: CALL_OW 437
61414: PUSH
61415: LD_INT 0
61417: GREATER
61418: IFFALSE 61488
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61420: LD_VAR 0 1
61424: PPUSH
61425: CALL_OW 437
61429: PUSH
61430: LD_INT 1
61432: ARRAY
61433: PUSH
61434: LD_INT 1
61436: ARRAY
61437: PUSH
61438: LD_STRING l
61440: EQUAL
61441: PUSH
61442: LD_VAR 0 1
61446: PPUSH
61447: CALL_OW 437
61451: PUSH
61452: LD_INT 1
61454: ARRAY
61455: PUSH
61456: LD_INT 4
61458: ARRAY
61459: PUSH
61460: LD_VAR 0 2
61464: EQUAL
61465: AND
61466: IFFALSE 61478
// result := true else
61468: LD_ADDR_VAR 0 3
61472: PUSH
61473: LD_INT 1
61475: ST_TO_ADDR
61476: GO 61486
// result := false ;
61478: LD_ADDR_VAR 0 3
61482: PUSH
61483: LD_INT 0
61485: ST_TO_ADDR
// end else
61486: GO 61496
// result := false ;
61488: LD_ADDR_VAR 0 3
61492: PUSH
61493: LD_INT 0
61495: ST_TO_ADDR
// end ;
61496: LD_VAR 0 3
61500: RET
// export function HealTarget ( sci ) ; begin
61501: LD_INT 0
61503: PPUSH
// if not sci then
61504: LD_VAR 0 1
61508: NOT
61509: IFFALSE 61513
// exit ;
61511: GO 61578
// result := 0 ;
61513: LD_ADDR_VAR 0 2
61517: PUSH
61518: LD_INT 0
61520: ST_TO_ADDR
// if GetTaskList ( sci ) then
61521: LD_VAR 0 1
61525: PPUSH
61526: CALL_OW 437
61530: IFFALSE 61578
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61532: LD_VAR 0 1
61536: PPUSH
61537: CALL_OW 437
61541: PUSH
61542: LD_INT 1
61544: ARRAY
61545: PUSH
61546: LD_INT 1
61548: ARRAY
61549: PUSH
61550: LD_STRING l
61552: EQUAL
61553: IFFALSE 61578
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61555: LD_ADDR_VAR 0 2
61559: PUSH
61560: LD_VAR 0 1
61564: PPUSH
61565: CALL_OW 437
61569: PUSH
61570: LD_INT 1
61572: ARRAY
61573: PUSH
61574: LD_INT 4
61576: ARRAY
61577: ST_TO_ADDR
// end ;
61578: LD_VAR 0 2
61582: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61583: LD_INT 0
61585: PPUSH
61586: PPUSH
61587: PPUSH
61588: PPUSH
// if not base_units then
61589: LD_VAR 0 1
61593: NOT
61594: IFFALSE 61598
// exit ;
61596: GO 61685
// result := false ;
61598: LD_ADDR_VAR 0 2
61602: PUSH
61603: LD_INT 0
61605: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61606: LD_ADDR_VAR 0 5
61610: PUSH
61611: LD_VAR 0 1
61615: PPUSH
61616: LD_INT 21
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PPUSH
61626: CALL_OW 72
61630: ST_TO_ADDR
// if not tmp then
61631: LD_VAR 0 5
61635: NOT
61636: IFFALSE 61640
// exit ;
61638: GO 61685
// for i in tmp do
61640: LD_ADDR_VAR 0 3
61644: PUSH
61645: LD_VAR 0 5
61649: PUSH
61650: FOR_IN
61651: IFFALSE 61683
// begin result := EnemyInRange ( i , 22 ) ;
61653: LD_ADDR_VAR 0 2
61657: PUSH
61658: LD_VAR 0 3
61662: PPUSH
61663: LD_INT 22
61665: PPUSH
61666: CALL 59921 0 2
61670: ST_TO_ADDR
// if result then
61671: LD_VAR 0 2
61675: IFFALSE 61681
// exit ;
61677: POP
61678: POP
61679: GO 61685
// end ;
61681: GO 61650
61683: POP
61684: POP
// end ;
61685: LD_VAR 0 2
61689: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61690: LD_INT 0
61692: PPUSH
61693: PPUSH
// if not units then
61694: LD_VAR 0 1
61698: NOT
61699: IFFALSE 61703
// exit ;
61701: GO 61773
// result := [ ] ;
61703: LD_ADDR_VAR 0 3
61707: PUSH
61708: EMPTY
61709: ST_TO_ADDR
// for i in units do
61710: LD_ADDR_VAR 0 4
61714: PUSH
61715: LD_VAR 0 1
61719: PUSH
61720: FOR_IN
61721: IFFALSE 61771
// if GetTag ( i ) = tag then
61723: LD_VAR 0 4
61727: PPUSH
61728: CALL_OW 110
61732: PUSH
61733: LD_VAR 0 2
61737: EQUAL
61738: IFFALSE 61769
// result := Replace ( result , result + 1 , i ) ;
61740: LD_ADDR_VAR 0 3
61744: PUSH
61745: LD_VAR 0 3
61749: PPUSH
61750: LD_VAR 0 3
61754: PUSH
61755: LD_INT 1
61757: PLUS
61758: PPUSH
61759: LD_VAR 0 4
61763: PPUSH
61764: CALL_OW 1
61768: ST_TO_ADDR
61769: GO 61720
61771: POP
61772: POP
// end ;
61773: LD_VAR 0 3
61777: RET
// export function IsDriver ( un ) ; begin
61778: LD_INT 0
61780: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61781: LD_ADDR_VAR 0 2
61785: PUSH
61786: LD_VAR 0 1
61790: PUSH
61791: LD_INT 55
61793: PUSH
61794: EMPTY
61795: LIST
61796: PPUSH
61797: CALL_OW 69
61801: IN
61802: ST_TO_ADDR
// end ;
61803: LD_VAR 0 2
61807: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61808: LD_INT 0
61810: PPUSH
61811: PPUSH
// list := [ ] ;
61812: LD_ADDR_VAR 0 5
61816: PUSH
61817: EMPTY
61818: ST_TO_ADDR
// case d of 0 :
61819: LD_VAR 0 3
61823: PUSH
61824: LD_INT 0
61826: DOUBLE
61827: EQUAL
61828: IFTRUE 61832
61830: GO 61965
61832: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61833: LD_ADDR_VAR 0 5
61837: PUSH
61838: LD_VAR 0 1
61842: PUSH
61843: LD_INT 4
61845: MINUS
61846: PUSH
61847: LD_VAR 0 2
61851: PUSH
61852: LD_INT 4
61854: MINUS
61855: PUSH
61856: LD_INT 2
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: LIST
61863: PUSH
61864: LD_VAR 0 1
61868: PUSH
61869: LD_INT 3
61871: MINUS
61872: PUSH
61873: LD_VAR 0 2
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: LIST
61885: PUSH
61886: LD_VAR 0 1
61890: PUSH
61891: LD_INT 4
61893: PLUS
61894: PUSH
61895: LD_VAR 0 2
61899: PUSH
61900: LD_INT 4
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: PUSH
61908: LD_VAR 0 1
61912: PUSH
61913: LD_INT 3
61915: PLUS
61916: PUSH
61917: LD_VAR 0 2
61921: PUSH
61922: LD_INT 3
61924: PLUS
61925: PUSH
61926: LD_INT 5
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: LIST
61933: PUSH
61934: LD_VAR 0 1
61938: PUSH
61939: LD_VAR 0 2
61943: PUSH
61944: LD_INT 4
61946: PLUS
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: LIST
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: ST_TO_ADDR
// end ; 1 :
61963: GO 62663
61965: LD_INT 1
61967: DOUBLE
61968: EQUAL
61969: IFTRUE 61973
61971: GO 62106
61973: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61974: LD_ADDR_VAR 0 5
61978: PUSH
61979: LD_VAR 0 1
61983: PUSH
61984: LD_VAR 0 2
61988: PUSH
61989: LD_INT 4
61991: MINUS
61992: PUSH
61993: LD_INT 3
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: PUSH
62001: LD_VAR 0 1
62005: PUSH
62006: LD_INT 3
62008: MINUS
62009: PUSH
62010: LD_VAR 0 2
62014: PUSH
62015: LD_INT 3
62017: MINUS
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: LIST
62026: PUSH
62027: LD_VAR 0 1
62031: PUSH
62032: LD_INT 4
62034: MINUS
62035: PUSH
62036: LD_VAR 0 2
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: LIST
62048: PUSH
62049: LD_VAR 0 1
62053: PUSH
62054: LD_VAR 0 2
62058: PUSH
62059: LD_INT 3
62061: PLUS
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: LIST
62070: PUSH
62071: LD_VAR 0 1
62075: PUSH
62076: LD_INT 4
62078: PLUS
62079: PUSH
62080: LD_VAR 0 2
62084: PUSH
62085: LD_INT 4
62087: PLUS
62088: PUSH
62089: LD_INT 5
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: LIST
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: ST_TO_ADDR
// end ; 2 :
62104: GO 62663
62106: LD_INT 2
62108: DOUBLE
62109: EQUAL
62110: IFTRUE 62114
62112: GO 62243
62114: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62115: LD_ADDR_VAR 0 5
62119: PUSH
62120: LD_VAR 0 1
62124: PUSH
62125: LD_VAR 0 2
62129: PUSH
62130: LD_INT 3
62132: MINUS
62133: PUSH
62134: LD_INT 3
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: LIST
62141: PUSH
62142: LD_VAR 0 1
62146: PUSH
62147: LD_INT 4
62149: PLUS
62150: PUSH
62151: LD_VAR 0 2
62155: PUSH
62156: LD_INT 4
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: LIST
62163: PUSH
62164: LD_VAR 0 1
62168: PUSH
62169: LD_VAR 0 2
62173: PUSH
62174: LD_INT 4
62176: PLUS
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: LIST
62185: PUSH
62186: LD_VAR 0 1
62190: PUSH
62191: LD_INT 3
62193: MINUS
62194: PUSH
62195: LD_VAR 0 2
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: LIST
62207: PUSH
62208: LD_VAR 0 1
62212: PUSH
62213: LD_INT 4
62215: MINUS
62216: PUSH
62217: LD_VAR 0 2
62221: PUSH
62222: LD_INT 4
62224: MINUS
62225: PUSH
62226: LD_INT 2
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: ST_TO_ADDR
// end ; 3 :
62241: GO 62663
62243: LD_INT 3
62245: DOUBLE
62246: EQUAL
62247: IFTRUE 62251
62249: GO 62384
62251: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62252: LD_ADDR_VAR 0 5
62256: PUSH
62257: LD_VAR 0 1
62261: PUSH
62262: LD_INT 3
62264: PLUS
62265: PUSH
62266: LD_VAR 0 2
62270: PUSH
62271: LD_INT 4
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: LIST
62278: PUSH
62279: LD_VAR 0 1
62283: PUSH
62284: LD_INT 4
62286: PLUS
62287: PUSH
62288: LD_VAR 0 2
62292: PUSH
62293: LD_INT 4
62295: PLUS
62296: PUSH
62297: LD_INT 5
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: LIST
62304: PUSH
62305: LD_VAR 0 1
62309: PUSH
62310: LD_INT 4
62312: MINUS
62313: PUSH
62314: LD_VAR 0 2
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: LIST
62326: PUSH
62327: LD_VAR 0 1
62331: PUSH
62332: LD_VAR 0 2
62336: PUSH
62337: LD_INT 4
62339: MINUS
62340: PUSH
62341: LD_INT 3
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: LIST
62348: PUSH
62349: LD_VAR 0 1
62353: PUSH
62354: LD_INT 3
62356: MINUS
62357: PUSH
62358: LD_VAR 0 2
62362: PUSH
62363: LD_INT 3
62365: MINUS
62366: PUSH
62367: LD_INT 2
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: LIST
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: ST_TO_ADDR
// end ; 4 :
62382: GO 62663
62384: LD_INT 4
62386: DOUBLE
62387: EQUAL
62388: IFTRUE 62392
62390: GO 62525
62392: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62393: LD_ADDR_VAR 0 5
62397: PUSH
62398: LD_VAR 0 1
62402: PUSH
62403: LD_VAR 0 2
62407: PUSH
62408: LD_INT 4
62410: PLUS
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: LIST
62419: PUSH
62420: LD_VAR 0 1
62424: PUSH
62425: LD_INT 3
62427: PLUS
62428: PUSH
62429: LD_VAR 0 2
62433: PUSH
62434: LD_INT 3
62436: PLUS
62437: PUSH
62438: LD_INT 5
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: LIST
62445: PUSH
62446: LD_VAR 0 1
62450: PUSH
62451: LD_INT 4
62453: PLUS
62454: PUSH
62455: LD_VAR 0 2
62459: PUSH
62460: LD_INT 4
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: LIST
62467: PUSH
62468: LD_VAR 0 1
62472: PUSH
62473: LD_VAR 0 2
62477: PUSH
62478: LD_INT 3
62480: MINUS
62481: PUSH
62482: LD_INT 3
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: LIST
62489: PUSH
62490: LD_VAR 0 1
62494: PUSH
62495: LD_INT 4
62497: MINUS
62498: PUSH
62499: LD_VAR 0 2
62503: PUSH
62504: LD_INT 4
62506: MINUS
62507: PUSH
62508: LD_INT 2
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: LIST
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: ST_TO_ADDR
// end ; 5 :
62523: GO 62663
62525: LD_INT 5
62527: DOUBLE
62528: EQUAL
62529: IFTRUE 62533
62531: GO 62662
62533: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62534: LD_ADDR_VAR 0 5
62538: PUSH
62539: LD_VAR 0 1
62543: PUSH
62544: LD_INT 4
62546: MINUS
62547: PUSH
62548: LD_VAR 0 2
62552: PUSH
62553: LD_INT 1
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: LIST
62560: PUSH
62561: LD_VAR 0 1
62565: PUSH
62566: LD_VAR 0 2
62570: PUSH
62571: LD_INT 4
62573: MINUS
62574: PUSH
62575: LD_INT 3
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: LIST
62582: PUSH
62583: LD_VAR 0 1
62587: PUSH
62588: LD_INT 4
62590: PLUS
62591: PUSH
62592: LD_VAR 0 2
62596: PUSH
62597: LD_INT 4
62599: PLUS
62600: PUSH
62601: LD_INT 5
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: LIST
62608: PUSH
62609: LD_VAR 0 1
62613: PUSH
62614: LD_INT 3
62616: PLUS
62617: PUSH
62618: LD_VAR 0 2
62622: PUSH
62623: LD_INT 4
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: LIST
62630: PUSH
62631: LD_VAR 0 1
62635: PUSH
62636: LD_VAR 0 2
62640: PUSH
62641: LD_INT 3
62643: PLUS
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: LIST
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: ST_TO_ADDR
// end ; end ;
62660: GO 62663
62662: POP
// result := list ;
62663: LD_ADDR_VAR 0 4
62667: PUSH
62668: LD_VAR 0 5
62672: ST_TO_ADDR
// end ;
62673: LD_VAR 0 4
62677: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62678: LD_INT 0
62680: PPUSH
62681: PPUSH
62682: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62683: LD_VAR 0 1
62687: NOT
62688: PUSH
62689: LD_VAR 0 2
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: LD_INT 2
62699: PUSH
62700: LD_INT 3
62702: PUSH
62703: LD_INT 4
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: IN
62712: NOT
62713: OR
62714: IFFALSE 62718
// exit ;
62716: GO 62810
// tmp := [ ] ;
62718: LD_ADDR_VAR 0 5
62722: PUSH
62723: EMPTY
62724: ST_TO_ADDR
// for i in units do
62725: LD_ADDR_VAR 0 4
62729: PUSH
62730: LD_VAR 0 1
62734: PUSH
62735: FOR_IN
62736: IFFALSE 62779
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62738: LD_ADDR_VAR 0 5
62742: PUSH
62743: LD_VAR 0 5
62747: PPUSH
62748: LD_VAR 0 5
62752: PUSH
62753: LD_INT 1
62755: PLUS
62756: PPUSH
62757: LD_VAR 0 4
62761: PPUSH
62762: LD_VAR 0 2
62766: PPUSH
62767: CALL_OW 259
62771: PPUSH
62772: CALL_OW 2
62776: ST_TO_ADDR
62777: GO 62735
62779: POP
62780: POP
// if not tmp then
62781: LD_VAR 0 5
62785: NOT
62786: IFFALSE 62790
// exit ;
62788: GO 62810
// result := SortListByListDesc ( units , tmp ) ;
62790: LD_ADDR_VAR 0 3
62794: PUSH
62795: LD_VAR 0 1
62799: PPUSH
62800: LD_VAR 0 5
62804: PPUSH
62805: CALL_OW 77
62809: ST_TO_ADDR
// end ;
62810: LD_VAR 0 3
62814: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62815: LD_INT 0
62817: PPUSH
62818: PPUSH
62819: PPUSH
// result := false ;
62820: LD_ADDR_VAR 0 3
62824: PUSH
62825: LD_INT 0
62827: ST_TO_ADDR
// x := GetX ( building ) ;
62828: LD_ADDR_VAR 0 4
62832: PUSH
62833: LD_VAR 0 2
62837: PPUSH
62838: CALL_OW 250
62842: ST_TO_ADDR
// y := GetY ( building ) ;
62843: LD_ADDR_VAR 0 5
62847: PUSH
62848: LD_VAR 0 2
62852: PPUSH
62853: CALL_OW 251
62857: ST_TO_ADDR
// if not building or not x or not y then
62858: LD_VAR 0 2
62862: NOT
62863: PUSH
62864: LD_VAR 0 4
62868: NOT
62869: OR
62870: PUSH
62871: LD_VAR 0 5
62875: NOT
62876: OR
62877: IFFALSE 62881
// exit ;
62879: GO 62973
// if GetTaskList ( unit ) then
62881: LD_VAR 0 1
62885: PPUSH
62886: CALL_OW 437
62890: IFFALSE 62973
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62892: LD_STRING e
62894: PUSH
62895: LD_VAR 0 1
62899: PPUSH
62900: CALL_OW 437
62904: PUSH
62905: LD_INT 1
62907: ARRAY
62908: PUSH
62909: LD_INT 1
62911: ARRAY
62912: EQUAL
62913: PUSH
62914: LD_VAR 0 4
62918: PUSH
62919: LD_VAR 0 1
62923: PPUSH
62924: CALL_OW 437
62928: PUSH
62929: LD_INT 1
62931: ARRAY
62932: PUSH
62933: LD_INT 2
62935: ARRAY
62936: EQUAL
62937: AND
62938: PUSH
62939: LD_VAR 0 5
62943: PUSH
62944: LD_VAR 0 1
62948: PPUSH
62949: CALL_OW 437
62953: PUSH
62954: LD_INT 1
62956: ARRAY
62957: PUSH
62958: LD_INT 3
62960: ARRAY
62961: EQUAL
62962: AND
62963: IFFALSE 62973
// result := true end ;
62965: LD_ADDR_VAR 0 3
62969: PUSH
62970: LD_INT 1
62972: ST_TO_ADDR
// end ;
62973: LD_VAR 0 3
62977: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62978: LD_INT 0
62980: PPUSH
// result := false ;
62981: LD_ADDR_VAR 0 4
62985: PUSH
62986: LD_INT 0
62988: ST_TO_ADDR
// if GetTaskList ( unit ) then
62989: LD_VAR 0 1
62993: PPUSH
62994: CALL_OW 437
62998: IFFALSE 63081
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63000: LD_STRING M
63002: PUSH
63003: LD_VAR 0 1
63007: PPUSH
63008: CALL_OW 437
63012: PUSH
63013: LD_INT 1
63015: ARRAY
63016: PUSH
63017: LD_INT 1
63019: ARRAY
63020: EQUAL
63021: PUSH
63022: LD_VAR 0 2
63026: PUSH
63027: LD_VAR 0 1
63031: PPUSH
63032: CALL_OW 437
63036: PUSH
63037: LD_INT 1
63039: ARRAY
63040: PUSH
63041: LD_INT 2
63043: ARRAY
63044: EQUAL
63045: AND
63046: PUSH
63047: LD_VAR 0 3
63051: PUSH
63052: LD_VAR 0 1
63056: PPUSH
63057: CALL_OW 437
63061: PUSH
63062: LD_INT 1
63064: ARRAY
63065: PUSH
63066: LD_INT 3
63068: ARRAY
63069: EQUAL
63070: AND
63071: IFFALSE 63081
// result := true ;
63073: LD_ADDR_VAR 0 4
63077: PUSH
63078: LD_INT 1
63080: ST_TO_ADDR
// end ; end ;
63081: LD_VAR 0 4
63085: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63086: LD_INT 0
63088: PPUSH
63089: PPUSH
63090: PPUSH
63091: PPUSH
// if not unit or not area then
63092: LD_VAR 0 1
63096: NOT
63097: PUSH
63098: LD_VAR 0 2
63102: NOT
63103: OR
63104: IFFALSE 63108
// exit ;
63106: GO 63272
// tmp := AreaToList ( area , i ) ;
63108: LD_ADDR_VAR 0 6
63112: PUSH
63113: LD_VAR 0 2
63117: PPUSH
63118: LD_VAR 0 5
63122: PPUSH
63123: CALL_OW 517
63127: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63128: LD_ADDR_VAR 0 5
63132: PUSH
63133: DOUBLE
63134: LD_INT 1
63136: DEC
63137: ST_TO_ADDR
63138: LD_VAR 0 6
63142: PUSH
63143: LD_INT 1
63145: ARRAY
63146: PUSH
63147: FOR_TO
63148: IFFALSE 63270
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63150: LD_ADDR_VAR 0 7
63154: PUSH
63155: LD_VAR 0 6
63159: PUSH
63160: LD_INT 1
63162: ARRAY
63163: PUSH
63164: LD_VAR 0 5
63168: ARRAY
63169: PUSH
63170: LD_VAR 0 6
63174: PUSH
63175: LD_INT 2
63177: ARRAY
63178: PUSH
63179: LD_VAR 0 5
63183: ARRAY
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63189: LD_VAR 0 7
63193: PUSH
63194: LD_INT 1
63196: ARRAY
63197: PPUSH
63198: LD_VAR 0 7
63202: PUSH
63203: LD_INT 2
63205: ARRAY
63206: PPUSH
63207: CALL_OW 428
63211: PUSH
63212: LD_INT 0
63214: EQUAL
63215: IFFALSE 63268
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63217: LD_VAR 0 1
63221: PPUSH
63222: LD_VAR 0 7
63226: PUSH
63227: LD_INT 1
63229: ARRAY
63230: PPUSH
63231: LD_VAR 0 7
63235: PUSH
63236: LD_INT 2
63238: ARRAY
63239: PPUSH
63240: LD_VAR 0 3
63244: PPUSH
63245: CALL_OW 48
// result := IsPlaced ( unit ) ;
63249: LD_ADDR_VAR 0 4
63253: PUSH
63254: LD_VAR 0 1
63258: PPUSH
63259: CALL_OW 305
63263: ST_TO_ADDR
// exit ;
63264: POP
63265: POP
63266: GO 63272
// end ; end ;
63268: GO 63147
63270: POP
63271: POP
// end ;
63272: LD_VAR 0 4
63276: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63277: LD_INT 0
63279: PPUSH
63280: PPUSH
63281: PPUSH
// if not side or side > 8 then
63282: LD_VAR 0 1
63286: NOT
63287: PUSH
63288: LD_VAR 0 1
63292: PUSH
63293: LD_INT 8
63295: GREATER
63296: OR
63297: IFFALSE 63301
// exit ;
63299: GO 63488
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63301: LD_ADDR_VAR 0 4
63305: PUSH
63306: LD_INT 22
63308: PUSH
63309: LD_VAR 0 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 21
63320: PUSH
63321: LD_INT 3
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PPUSH
63332: CALL_OW 69
63336: ST_TO_ADDR
// if not tmp then
63337: LD_VAR 0 4
63341: NOT
63342: IFFALSE 63346
// exit ;
63344: GO 63488
// enable_addtolog := true ;
63346: LD_ADDR_OWVAR 81
63350: PUSH
63351: LD_INT 1
63353: ST_TO_ADDR
// AddToLog ( [ ) ;
63354: LD_STRING [
63356: PPUSH
63357: CALL_OW 561
// for i in tmp do
63361: LD_ADDR_VAR 0 3
63365: PUSH
63366: LD_VAR 0 4
63370: PUSH
63371: FOR_IN
63372: IFFALSE 63479
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63374: LD_STRING [
63376: PUSH
63377: LD_VAR 0 3
63381: PPUSH
63382: CALL_OW 266
63386: STR
63387: PUSH
63388: LD_STRING , 
63390: STR
63391: PUSH
63392: LD_VAR 0 3
63396: PPUSH
63397: CALL_OW 250
63401: STR
63402: PUSH
63403: LD_STRING , 
63405: STR
63406: PUSH
63407: LD_VAR 0 3
63411: PPUSH
63412: CALL_OW 251
63416: STR
63417: PUSH
63418: LD_STRING , 
63420: STR
63421: PUSH
63422: LD_VAR 0 3
63426: PPUSH
63427: CALL_OW 254
63431: STR
63432: PUSH
63433: LD_STRING , 
63435: STR
63436: PUSH
63437: LD_VAR 0 3
63441: PPUSH
63442: LD_INT 1
63444: PPUSH
63445: CALL_OW 268
63449: STR
63450: PUSH
63451: LD_STRING , 
63453: STR
63454: PUSH
63455: LD_VAR 0 3
63459: PPUSH
63460: LD_INT 2
63462: PPUSH
63463: CALL_OW 268
63467: STR
63468: PUSH
63469: LD_STRING ],
63471: STR
63472: PPUSH
63473: CALL_OW 561
// end ;
63477: GO 63371
63479: POP
63480: POP
// AddToLog ( ]; ) ;
63481: LD_STRING ];
63483: PPUSH
63484: CALL_OW 561
// end ;
63488: LD_VAR 0 2
63492: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63493: LD_INT 0
63495: PPUSH
63496: PPUSH
63497: PPUSH
63498: PPUSH
63499: PPUSH
// if not area or not rate or not max then
63500: LD_VAR 0 1
63504: NOT
63505: PUSH
63506: LD_VAR 0 2
63510: NOT
63511: OR
63512: PUSH
63513: LD_VAR 0 4
63517: NOT
63518: OR
63519: IFFALSE 63523
// exit ;
63521: GO 63715
// while 1 do
63523: LD_INT 1
63525: IFFALSE 63715
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63527: LD_ADDR_VAR 0 9
63531: PUSH
63532: LD_VAR 0 1
63536: PPUSH
63537: LD_INT 1
63539: PPUSH
63540: CALL_OW 287
63544: PUSH
63545: LD_INT 10
63547: MUL
63548: ST_TO_ADDR
// r := rate / 10 ;
63549: LD_ADDR_VAR 0 7
63553: PUSH
63554: LD_VAR 0 2
63558: PUSH
63559: LD_INT 10
63561: DIVREAL
63562: ST_TO_ADDR
// time := 1 1$00 ;
63563: LD_ADDR_VAR 0 8
63567: PUSH
63568: LD_INT 2100
63570: ST_TO_ADDR
// if amount < min then
63571: LD_VAR 0 9
63575: PUSH
63576: LD_VAR 0 3
63580: LESS
63581: IFFALSE 63599
// r := r * 2 else
63583: LD_ADDR_VAR 0 7
63587: PUSH
63588: LD_VAR 0 7
63592: PUSH
63593: LD_INT 2
63595: MUL
63596: ST_TO_ADDR
63597: GO 63625
// if amount > max then
63599: LD_VAR 0 9
63603: PUSH
63604: LD_VAR 0 4
63608: GREATER
63609: IFFALSE 63625
// r := r / 2 ;
63611: LD_ADDR_VAR 0 7
63615: PUSH
63616: LD_VAR 0 7
63620: PUSH
63621: LD_INT 2
63623: DIVREAL
63624: ST_TO_ADDR
// time := time / r ;
63625: LD_ADDR_VAR 0 8
63629: PUSH
63630: LD_VAR 0 8
63634: PUSH
63635: LD_VAR 0 7
63639: DIVREAL
63640: ST_TO_ADDR
// if time < 0 then
63641: LD_VAR 0 8
63645: PUSH
63646: LD_INT 0
63648: LESS
63649: IFFALSE 63666
// time := time * - 1 ;
63651: LD_ADDR_VAR 0 8
63655: PUSH
63656: LD_VAR 0 8
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: MUL
63665: ST_TO_ADDR
// wait ( time ) ;
63666: LD_VAR 0 8
63670: PPUSH
63671: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63675: LD_INT 35
63677: PPUSH
63678: LD_INT 875
63680: PPUSH
63681: CALL_OW 12
63685: PPUSH
63686: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63690: LD_INT 1
63692: PPUSH
63693: LD_INT 5
63695: PPUSH
63696: CALL_OW 12
63700: PPUSH
63701: LD_VAR 0 1
63705: PPUSH
63706: LD_INT 1
63708: PPUSH
63709: CALL_OW 55
// end ;
63713: GO 63523
// end ;
63715: LD_VAR 0 5
63719: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63720: LD_INT 0
63722: PPUSH
63723: PPUSH
63724: PPUSH
63725: PPUSH
63726: PPUSH
63727: PPUSH
63728: PPUSH
63729: PPUSH
// if not turrets or not factories then
63730: LD_VAR 0 1
63734: NOT
63735: PUSH
63736: LD_VAR 0 2
63740: NOT
63741: OR
63742: IFFALSE 63746
// exit ;
63744: GO 64053
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63746: LD_ADDR_VAR 0 10
63750: PUSH
63751: LD_INT 5
63753: PUSH
63754: LD_INT 6
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: LD_INT 4
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 3
63773: PUSH
63774: LD_INT 5
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 24
63788: PUSH
63789: LD_INT 25
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 23
63798: PUSH
63799: LD_INT 27
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 42
63812: PUSH
63813: LD_INT 43
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 44
63822: PUSH
63823: LD_INT 46
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 45
63832: PUSH
63833: LD_INT 47
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: LIST
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: LIST
63849: ST_TO_ADDR
// result := [ ] ;
63850: LD_ADDR_VAR 0 3
63854: PUSH
63855: EMPTY
63856: ST_TO_ADDR
// for i in turrets do
63857: LD_ADDR_VAR 0 4
63861: PUSH
63862: LD_VAR 0 1
63866: PUSH
63867: FOR_IN
63868: IFFALSE 64051
// begin nat := GetNation ( i ) ;
63870: LD_ADDR_VAR 0 7
63874: PUSH
63875: LD_VAR 0 4
63879: PPUSH
63880: CALL_OW 248
63884: ST_TO_ADDR
// weapon := 0 ;
63885: LD_ADDR_VAR 0 8
63889: PUSH
63890: LD_INT 0
63892: ST_TO_ADDR
// if not nat then
63893: LD_VAR 0 7
63897: NOT
63898: IFFALSE 63902
// continue ;
63900: GO 63867
// for j in list [ nat ] do
63902: LD_ADDR_VAR 0 5
63906: PUSH
63907: LD_VAR 0 10
63911: PUSH
63912: LD_VAR 0 7
63916: ARRAY
63917: PUSH
63918: FOR_IN
63919: IFFALSE 63960
// if GetBWeapon ( i ) = j [ 1 ] then
63921: LD_VAR 0 4
63925: PPUSH
63926: CALL_OW 269
63930: PUSH
63931: LD_VAR 0 5
63935: PUSH
63936: LD_INT 1
63938: ARRAY
63939: EQUAL
63940: IFFALSE 63958
// begin weapon := j [ 2 ] ;
63942: LD_ADDR_VAR 0 8
63946: PUSH
63947: LD_VAR 0 5
63951: PUSH
63952: LD_INT 2
63954: ARRAY
63955: ST_TO_ADDR
// break ;
63956: GO 63960
// end ;
63958: GO 63918
63960: POP
63961: POP
// if not weapon then
63962: LD_VAR 0 8
63966: NOT
63967: IFFALSE 63971
// continue ;
63969: GO 63867
// for k in factories do
63971: LD_ADDR_VAR 0 6
63975: PUSH
63976: LD_VAR 0 2
63980: PUSH
63981: FOR_IN
63982: IFFALSE 64047
// begin weapons := AvailableWeaponList ( k ) ;
63984: LD_ADDR_VAR 0 9
63988: PUSH
63989: LD_VAR 0 6
63993: PPUSH
63994: CALL_OW 478
63998: ST_TO_ADDR
// if not weapons then
63999: LD_VAR 0 9
64003: NOT
64004: IFFALSE 64008
// continue ;
64006: GO 63981
// if weapon in weapons then
64008: LD_VAR 0 8
64012: PUSH
64013: LD_VAR 0 9
64017: IN
64018: IFFALSE 64045
// begin result := [ i , weapon ] ;
64020: LD_ADDR_VAR 0 3
64024: PUSH
64025: LD_VAR 0 4
64029: PUSH
64030: LD_VAR 0 8
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: ST_TO_ADDR
// exit ;
64039: POP
64040: POP
64041: POP
64042: POP
64043: GO 64053
// end ; end ;
64045: GO 63981
64047: POP
64048: POP
// end ;
64049: GO 63867
64051: POP
64052: POP
// end ;
64053: LD_VAR 0 3
64057: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64058: LD_INT 0
64060: PPUSH
// if not side or side > 8 then
64061: LD_VAR 0 3
64065: NOT
64066: PUSH
64067: LD_VAR 0 3
64071: PUSH
64072: LD_INT 8
64074: GREATER
64075: OR
64076: IFFALSE 64080
// exit ;
64078: GO 64139
// if not range then
64080: LD_VAR 0 4
64084: NOT
64085: IFFALSE 64096
// range := - 12 ;
64087: LD_ADDR_VAR 0 4
64091: PUSH
64092: LD_INT 12
64094: NEG
64095: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64096: LD_VAR 0 1
64100: PPUSH
64101: LD_VAR 0 2
64105: PPUSH
64106: LD_VAR 0 3
64110: PPUSH
64111: LD_VAR 0 4
64115: PPUSH
64116: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64120: LD_VAR 0 1
64124: PPUSH
64125: LD_VAR 0 2
64129: PPUSH
64130: LD_VAR 0 3
64134: PPUSH
64135: CALL_OW 331
// end ;
64139: LD_VAR 0 5
64143: RET
// export function Video ( mode ) ; begin
64144: LD_INT 0
64146: PPUSH
// ingame_video = mode ;
64147: LD_ADDR_OWVAR 52
64151: PUSH
64152: LD_VAR 0 1
64156: ST_TO_ADDR
// interface_hidden = mode ;
64157: LD_ADDR_OWVAR 54
64161: PUSH
64162: LD_VAR 0 1
64166: ST_TO_ADDR
// end ;
64167: LD_VAR 0 2
64171: RET
// export function Join ( array , element ) ; begin
64172: LD_INT 0
64174: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64175: LD_ADDR_VAR 0 3
64179: PUSH
64180: LD_VAR 0 1
64184: PPUSH
64185: LD_VAR 0 1
64189: PUSH
64190: LD_INT 1
64192: PLUS
64193: PPUSH
64194: LD_VAR 0 2
64198: PPUSH
64199: CALL_OW 1
64203: ST_TO_ADDR
// end ;
64204: LD_VAR 0 3
64208: RET
// export function JoinUnion ( array , element ) ; begin
64209: LD_INT 0
64211: PPUSH
// result := array union element ;
64212: LD_ADDR_VAR 0 3
64216: PUSH
64217: LD_VAR 0 1
64221: PUSH
64222: LD_VAR 0 2
64226: UNION
64227: ST_TO_ADDR
// end ;
64228: LD_VAR 0 3
64232: RET
// export function GetBehemoths ( side ) ; begin
64233: LD_INT 0
64235: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64236: LD_ADDR_VAR 0 2
64240: PUSH
64241: LD_INT 22
64243: PUSH
64244: LD_VAR 0 1
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 31
64255: PUSH
64256: LD_INT 25
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PPUSH
64267: CALL_OW 69
64271: ST_TO_ADDR
// end ;
64272: LD_VAR 0 2
64276: RET
// export function Shuffle ( array ) ; var i , index ; begin
64277: LD_INT 0
64279: PPUSH
64280: PPUSH
64281: PPUSH
// result := [ ] ;
64282: LD_ADDR_VAR 0 2
64286: PUSH
64287: EMPTY
64288: ST_TO_ADDR
// if not array then
64289: LD_VAR 0 1
64293: NOT
64294: IFFALSE 64298
// exit ;
64296: GO 64397
// Randomize ;
64298: CALL_OW 10
// for i = array downto 1 do
64302: LD_ADDR_VAR 0 3
64306: PUSH
64307: DOUBLE
64308: LD_VAR 0 1
64312: INC
64313: ST_TO_ADDR
64314: LD_INT 1
64316: PUSH
64317: FOR_DOWNTO
64318: IFFALSE 64395
// begin index := rand ( 1 , array ) ;
64320: LD_ADDR_VAR 0 4
64324: PUSH
64325: LD_INT 1
64327: PPUSH
64328: LD_VAR 0 1
64332: PPUSH
64333: CALL_OW 12
64337: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64338: LD_ADDR_VAR 0 2
64342: PUSH
64343: LD_VAR 0 2
64347: PPUSH
64348: LD_VAR 0 2
64352: PUSH
64353: LD_INT 1
64355: PLUS
64356: PPUSH
64357: LD_VAR 0 1
64361: PUSH
64362: LD_VAR 0 4
64366: ARRAY
64367: PPUSH
64368: CALL_OW 2
64372: ST_TO_ADDR
// array := Delete ( array , index ) ;
64373: LD_ADDR_VAR 0 1
64377: PUSH
64378: LD_VAR 0 1
64382: PPUSH
64383: LD_VAR 0 4
64387: PPUSH
64388: CALL_OW 3
64392: ST_TO_ADDR
// end ;
64393: GO 64317
64395: POP
64396: POP
// end ;
64397: LD_VAR 0 2
64401: RET
// export function GetBaseMaterials ( base ) ; begin
64402: LD_INT 0
64404: PPUSH
// result := [ 0 , 0 , 0 ] ;
64405: LD_ADDR_VAR 0 2
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: LIST
64423: ST_TO_ADDR
// if not base then
64424: LD_VAR 0 1
64428: NOT
64429: IFFALSE 64433
// exit ;
64431: GO 64482
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64433: LD_ADDR_VAR 0 2
64437: PUSH
64438: LD_VAR 0 1
64442: PPUSH
64443: LD_INT 1
64445: PPUSH
64446: CALL_OW 275
64450: PUSH
64451: LD_VAR 0 1
64455: PPUSH
64456: LD_INT 2
64458: PPUSH
64459: CALL_OW 275
64463: PUSH
64464: LD_VAR 0 1
64468: PPUSH
64469: LD_INT 3
64471: PPUSH
64472: CALL_OW 275
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: LIST
64481: ST_TO_ADDR
// end ;
64482: LD_VAR 0 2
64486: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64487: LD_INT 0
64489: PPUSH
64490: PPUSH
// result := array ;
64491: LD_ADDR_VAR 0 3
64495: PUSH
64496: LD_VAR 0 1
64500: ST_TO_ADDR
// if size > 0 then
64501: LD_VAR 0 2
64505: PUSH
64506: LD_INT 0
64508: GREATER
64509: IFFALSE 64555
// for i := array downto size do
64511: LD_ADDR_VAR 0 4
64515: PUSH
64516: DOUBLE
64517: LD_VAR 0 1
64521: INC
64522: ST_TO_ADDR
64523: LD_VAR 0 2
64527: PUSH
64528: FOR_DOWNTO
64529: IFFALSE 64553
// result := Delete ( result , result ) ;
64531: LD_ADDR_VAR 0 3
64535: PUSH
64536: LD_VAR 0 3
64540: PPUSH
64541: LD_VAR 0 3
64545: PPUSH
64546: CALL_OW 3
64550: ST_TO_ADDR
64551: GO 64528
64553: POP
64554: POP
// end ;
64555: LD_VAR 0 3
64559: RET
// export function ComExit ( unit ) ; var tmp ; begin
64560: LD_INT 0
64562: PPUSH
64563: PPUSH
// if not IsInUnit ( unit ) then
64564: LD_VAR 0 1
64568: PPUSH
64569: CALL_OW 310
64573: NOT
64574: IFFALSE 64578
// exit ;
64576: GO 64638
// tmp := IsInUnit ( unit ) ;
64578: LD_ADDR_VAR 0 3
64582: PUSH
64583: LD_VAR 0 1
64587: PPUSH
64588: CALL_OW 310
64592: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64593: LD_VAR 0 3
64597: PPUSH
64598: CALL_OW 247
64602: PUSH
64603: LD_INT 2
64605: EQUAL
64606: IFFALSE 64619
// ComExitVehicle ( unit ) else
64608: LD_VAR 0 1
64612: PPUSH
64613: CALL_OW 121
64617: GO 64628
// ComExitBuilding ( unit ) ;
64619: LD_VAR 0 1
64623: PPUSH
64624: CALL_OW 122
// result := tmp ;
64628: LD_ADDR_VAR 0 2
64632: PUSH
64633: LD_VAR 0 3
64637: ST_TO_ADDR
// end ;
64638: LD_VAR 0 2
64642: RET
// export function ComExitAll ( units ) ; var i ; begin
64643: LD_INT 0
64645: PPUSH
64646: PPUSH
// if not units then
64647: LD_VAR 0 1
64651: NOT
64652: IFFALSE 64656
// exit ;
64654: GO 64682
// for i in units do
64656: LD_ADDR_VAR 0 3
64660: PUSH
64661: LD_VAR 0 1
64665: PUSH
64666: FOR_IN
64667: IFFALSE 64680
// ComExit ( i ) ;
64669: LD_VAR 0 3
64673: PPUSH
64674: CALL 64560 0 1
64678: GO 64666
64680: POP
64681: POP
// end ;
64682: LD_VAR 0 2
64686: RET
// export function ResetHc ; begin
64687: LD_INT 0
64689: PPUSH
// InitHc ;
64690: CALL_OW 19
// hc_importance := 0 ;
64694: LD_ADDR_OWVAR 32
64698: PUSH
64699: LD_INT 0
64701: ST_TO_ADDR
// end ;
64702: LD_VAR 0 1
64706: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64707: LD_INT 0
64709: PPUSH
64710: PPUSH
64711: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64712: LD_ADDR_VAR 0 6
64716: PUSH
64717: LD_VAR 0 1
64721: PUSH
64722: LD_VAR 0 3
64726: PLUS
64727: PUSH
64728: LD_INT 2
64730: DIV
64731: ST_TO_ADDR
// if _x < 0 then
64732: LD_VAR 0 6
64736: PUSH
64737: LD_INT 0
64739: LESS
64740: IFFALSE 64757
// _x := _x * - 1 ;
64742: LD_ADDR_VAR 0 6
64746: PUSH
64747: LD_VAR 0 6
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: MUL
64756: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64757: LD_ADDR_VAR 0 7
64761: PUSH
64762: LD_VAR 0 2
64766: PUSH
64767: LD_VAR 0 4
64771: PLUS
64772: PUSH
64773: LD_INT 2
64775: DIV
64776: ST_TO_ADDR
// if _y < 0 then
64777: LD_VAR 0 7
64781: PUSH
64782: LD_INT 0
64784: LESS
64785: IFFALSE 64802
// _y := _y * - 1 ;
64787: LD_ADDR_VAR 0 7
64791: PUSH
64792: LD_VAR 0 7
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: MUL
64801: ST_TO_ADDR
// result := [ _x , _y ] ;
64802: LD_ADDR_VAR 0 5
64806: PUSH
64807: LD_VAR 0 6
64811: PUSH
64812: LD_VAR 0 7
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: ST_TO_ADDR
// end ;
64821: LD_VAR 0 5
64825: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64826: LD_INT 0
64828: PPUSH
64829: PPUSH
64830: PPUSH
64831: PPUSH
// task := GetTaskList ( unit ) ;
64832: LD_ADDR_VAR 0 7
64836: PUSH
64837: LD_VAR 0 1
64841: PPUSH
64842: CALL_OW 437
64846: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64847: LD_VAR 0 7
64851: NOT
64852: PUSH
64853: LD_VAR 0 1
64857: PPUSH
64858: LD_VAR 0 2
64862: PPUSH
64863: CALL_OW 308
64867: NOT
64868: AND
64869: IFFALSE 64873
// exit ;
64871: GO 64991
// if IsInArea ( unit , area ) then
64873: LD_VAR 0 1
64877: PPUSH
64878: LD_VAR 0 2
64882: PPUSH
64883: CALL_OW 308
64887: IFFALSE 64905
// begin ComMoveToArea ( unit , goAway ) ;
64889: LD_VAR 0 1
64893: PPUSH
64894: LD_VAR 0 3
64898: PPUSH
64899: CALL_OW 113
// exit ;
64903: GO 64991
// end ; if task [ 1 ] [ 1 ] <> M then
64905: LD_VAR 0 7
64909: PUSH
64910: LD_INT 1
64912: ARRAY
64913: PUSH
64914: LD_INT 1
64916: ARRAY
64917: PUSH
64918: LD_STRING M
64920: NONEQUAL
64921: IFFALSE 64925
// exit ;
64923: GO 64991
// x := task [ 1 ] [ 2 ] ;
64925: LD_ADDR_VAR 0 5
64929: PUSH
64930: LD_VAR 0 7
64934: PUSH
64935: LD_INT 1
64937: ARRAY
64938: PUSH
64939: LD_INT 2
64941: ARRAY
64942: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64943: LD_ADDR_VAR 0 6
64947: PUSH
64948: LD_VAR 0 7
64952: PUSH
64953: LD_INT 1
64955: ARRAY
64956: PUSH
64957: LD_INT 3
64959: ARRAY
64960: ST_TO_ADDR
// if InArea ( x , y , area ) then
64961: LD_VAR 0 5
64965: PPUSH
64966: LD_VAR 0 6
64970: PPUSH
64971: LD_VAR 0 2
64975: PPUSH
64976: CALL_OW 309
64980: IFFALSE 64991
// ComStop ( unit ) ;
64982: LD_VAR 0 1
64986: PPUSH
64987: CALL_OW 141
// end ;
64991: LD_VAR 0 4
64995: RET
// export function Abs ( value ) ; begin
64996: LD_INT 0
64998: PPUSH
// result := value ;
64999: LD_ADDR_VAR 0 2
65003: PUSH
65004: LD_VAR 0 1
65008: ST_TO_ADDR
// if value < 0 then
65009: LD_VAR 0 1
65013: PUSH
65014: LD_INT 0
65016: LESS
65017: IFFALSE 65034
// result := value * - 1 ;
65019: LD_ADDR_VAR 0 2
65023: PUSH
65024: LD_VAR 0 1
65028: PUSH
65029: LD_INT 1
65031: NEG
65032: MUL
65033: ST_TO_ADDR
// end ;
65034: LD_VAR 0 2
65038: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65039: LD_INT 0
65041: PPUSH
65042: PPUSH
65043: PPUSH
65044: PPUSH
65045: PPUSH
65046: PPUSH
65047: PPUSH
65048: PPUSH
// if not unit or not building then
65049: LD_VAR 0 1
65053: NOT
65054: PUSH
65055: LD_VAR 0 2
65059: NOT
65060: OR
65061: IFFALSE 65065
// exit ;
65063: GO 65291
// x := GetX ( building ) ;
65065: LD_ADDR_VAR 0 4
65069: PUSH
65070: LD_VAR 0 2
65074: PPUSH
65075: CALL_OW 250
65079: ST_TO_ADDR
// y := GetY ( building ) ;
65080: LD_ADDR_VAR 0 6
65084: PUSH
65085: LD_VAR 0 2
65089: PPUSH
65090: CALL_OW 251
65094: ST_TO_ADDR
// d := GetDir ( building ) ;
65095: LD_ADDR_VAR 0 8
65099: PUSH
65100: LD_VAR 0 2
65104: PPUSH
65105: CALL_OW 254
65109: ST_TO_ADDR
// r := 4 ;
65110: LD_ADDR_VAR 0 9
65114: PUSH
65115: LD_INT 4
65117: ST_TO_ADDR
// for i := 1 to 5 do
65118: LD_ADDR_VAR 0 10
65122: PUSH
65123: DOUBLE
65124: LD_INT 1
65126: DEC
65127: ST_TO_ADDR
65128: LD_INT 5
65130: PUSH
65131: FOR_TO
65132: IFFALSE 65289
// begin _x := ShiftX ( x , d , r + i ) ;
65134: LD_ADDR_VAR 0 5
65138: PUSH
65139: LD_VAR 0 4
65143: PPUSH
65144: LD_VAR 0 8
65148: PPUSH
65149: LD_VAR 0 9
65153: PUSH
65154: LD_VAR 0 10
65158: PLUS
65159: PPUSH
65160: CALL_OW 272
65164: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65165: LD_ADDR_VAR 0 7
65169: PUSH
65170: LD_VAR 0 6
65174: PPUSH
65175: LD_VAR 0 8
65179: PPUSH
65180: LD_VAR 0 9
65184: PUSH
65185: LD_VAR 0 10
65189: PLUS
65190: PPUSH
65191: CALL_OW 273
65195: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65196: LD_VAR 0 5
65200: PPUSH
65201: LD_VAR 0 7
65205: PPUSH
65206: CALL_OW 488
65210: PUSH
65211: LD_VAR 0 5
65215: PPUSH
65216: LD_VAR 0 7
65220: PPUSH
65221: CALL_OW 428
65225: PPUSH
65226: CALL_OW 247
65230: PUSH
65231: LD_INT 3
65233: PUSH
65234: LD_INT 2
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: IN
65241: NOT
65242: AND
65243: IFFALSE 65287
// begin ComMoveXY ( unit , _x , _y ) ;
65245: LD_VAR 0 1
65249: PPUSH
65250: LD_VAR 0 5
65254: PPUSH
65255: LD_VAR 0 7
65259: PPUSH
65260: CALL_OW 111
// result := [ _x , _y ] ;
65264: LD_ADDR_VAR 0 3
65268: PUSH
65269: LD_VAR 0 5
65273: PUSH
65274: LD_VAR 0 7
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: ST_TO_ADDR
// exit ;
65283: POP
65284: POP
65285: GO 65291
// end ; end ;
65287: GO 65131
65289: POP
65290: POP
// end ;
65291: LD_VAR 0 3
65295: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65296: LD_INT 0
65298: PPUSH
65299: PPUSH
65300: PPUSH
// result := 0 ;
65301: LD_ADDR_VAR 0 3
65305: PUSH
65306: LD_INT 0
65308: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65309: LD_VAR 0 1
65313: PUSH
65314: LD_INT 0
65316: LESS
65317: PUSH
65318: LD_VAR 0 1
65322: PUSH
65323: LD_INT 8
65325: GREATER
65326: OR
65327: PUSH
65328: LD_VAR 0 2
65332: PUSH
65333: LD_INT 0
65335: LESS
65336: OR
65337: PUSH
65338: LD_VAR 0 2
65342: PUSH
65343: LD_INT 8
65345: GREATER
65346: OR
65347: IFFALSE 65351
// exit ;
65349: GO 65426
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65351: LD_ADDR_VAR 0 4
65355: PUSH
65356: LD_INT 22
65358: PUSH
65359: LD_VAR 0 2
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PPUSH
65368: CALL_OW 69
65372: PUSH
65373: FOR_IN
65374: IFFALSE 65424
// begin un := UnitShoot ( i ) ;
65376: LD_ADDR_VAR 0 5
65380: PUSH
65381: LD_VAR 0 4
65385: PPUSH
65386: CALL_OW 504
65390: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65391: LD_VAR 0 5
65395: PPUSH
65396: CALL_OW 255
65400: PUSH
65401: LD_VAR 0 1
65405: EQUAL
65406: IFFALSE 65422
// begin result := un ;
65408: LD_ADDR_VAR 0 3
65412: PUSH
65413: LD_VAR 0 5
65417: ST_TO_ADDR
// exit ;
65418: POP
65419: POP
65420: GO 65426
// end ; end ;
65422: GO 65373
65424: POP
65425: POP
// end ;
65426: LD_VAR 0 3
65430: RET
// export function GetCargoBay ( units ) ; begin
65431: LD_INT 0
65433: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65434: LD_ADDR_VAR 0 2
65438: PUSH
65439: LD_VAR 0 1
65443: PPUSH
65444: LD_INT 2
65446: PUSH
65447: LD_INT 34
65449: PUSH
65450: LD_INT 12
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 34
65459: PUSH
65460: LD_INT 51
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 34
65469: PUSH
65470: LD_INT 32
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 34
65479: PUSH
65480: LD_EXP 26
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: PPUSH
65496: CALL_OW 72
65500: ST_TO_ADDR
// end ;
65501: LD_VAR 0 2
65505: RET
// export function Negate ( value ) ; begin
65506: LD_INT 0
65508: PPUSH
// result := not value ;
65509: LD_ADDR_VAR 0 2
65513: PUSH
65514: LD_VAR 0 1
65518: NOT
65519: ST_TO_ADDR
// end ;
65520: LD_VAR 0 2
65524: RET
// export function Inc ( value ) ; begin
65525: LD_INT 0
65527: PPUSH
// result := value + 1 ;
65528: LD_ADDR_VAR 0 2
65532: PUSH
65533: LD_VAR 0 1
65537: PUSH
65538: LD_INT 1
65540: PLUS
65541: ST_TO_ADDR
// end ;
65542: LD_VAR 0 2
65546: RET
// export function Dec ( value ) ; begin
65547: LD_INT 0
65549: PPUSH
// result := value - 1 ;
65550: LD_ADDR_VAR 0 2
65554: PUSH
65555: LD_VAR 0 1
65559: PUSH
65560: LD_INT 1
65562: MINUS
65563: ST_TO_ADDR
// end ;
65564: LD_VAR 0 2
65568: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65569: LD_INT 0
65571: PPUSH
65572: PPUSH
65573: PPUSH
65574: PPUSH
65575: PPUSH
65576: PPUSH
65577: PPUSH
65578: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65579: LD_VAR 0 1
65583: PPUSH
65584: LD_VAR 0 2
65588: PPUSH
65589: CALL_OW 488
65593: NOT
65594: PUSH
65595: LD_VAR 0 3
65599: PPUSH
65600: LD_VAR 0 4
65604: PPUSH
65605: CALL_OW 488
65609: NOT
65610: OR
65611: IFFALSE 65624
// begin result := - 1 ;
65613: LD_ADDR_VAR 0 5
65617: PUSH
65618: LD_INT 1
65620: NEG
65621: ST_TO_ADDR
// exit ;
65622: GO 65859
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65624: LD_ADDR_VAR 0 12
65628: PUSH
65629: LD_VAR 0 1
65633: PPUSH
65634: LD_VAR 0 2
65638: PPUSH
65639: LD_VAR 0 3
65643: PPUSH
65644: LD_VAR 0 4
65648: PPUSH
65649: CALL 64707 0 4
65653: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65654: LD_ADDR_VAR 0 11
65658: PUSH
65659: LD_VAR 0 1
65663: PPUSH
65664: LD_VAR 0 2
65668: PPUSH
65669: LD_VAR 0 12
65673: PUSH
65674: LD_INT 1
65676: ARRAY
65677: PPUSH
65678: LD_VAR 0 12
65682: PUSH
65683: LD_INT 2
65685: ARRAY
65686: PPUSH
65687: CALL_OW 298
65691: ST_TO_ADDR
// distance := 9999 ;
65692: LD_ADDR_VAR 0 10
65696: PUSH
65697: LD_INT 9999
65699: ST_TO_ADDR
// for i := 0 to 5 do
65700: LD_ADDR_VAR 0 6
65704: PUSH
65705: DOUBLE
65706: LD_INT 0
65708: DEC
65709: ST_TO_ADDR
65710: LD_INT 5
65712: PUSH
65713: FOR_TO
65714: IFFALSE 65857
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65716: LD_ADDR_VAR 0 7
65720: PUSH
65721: LD_VAR 0 1
65725: PPUSH
65726: LD_VAR 0 6
65730: PPUSH
65731: LD_VAR 0 11
65735: PPUSH
65736: CALL_OW 272
65740: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65741: LD_ADDR_VAR 0 8
65745: PUSH
65746: LD_VAR 0 2
65750: PPUSH
65751: LD_VAR 0 6
65755: PPUSH
65756: LD_VAR 0 11
65760: PPUSH
65761: CALL_OW 273
65765: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65766: LD_VAR 0 7
65770: PPUSH
65771: LD_VAR 0 8
65775: PPUSH
65776: CALL_OW 488
65780: NOT
65781: IFFALSE 65785
// continue ;
65783: GO 65713
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65785: LD_ADDR_VAR 0 9
65789: PUSH
65790: LD_VAR 0 12
65794: PUSH
65795: LD_INT 1
65797: ARRAY
65798: PPUSH
65799: LD_VAR 0 12
65803: PUSH
65804: LD_INT 2
65806: ARRAY
65807: PPUSH
65808: LD_VAR 0 7
65812: PPUSH
65813: LD_VAR 0 8
65817: PPUSH
65818: CALL_OW 298
65822: ST_TO_ADDR
// if tmp < distance then
65823: LD_VAR 0 9
65827: PUSH
65828: LD_VAR 0 10
65832: LESS
65833: IFFALSE 65855
// begin result := i ;
65835: LD_ADDR_VAR 0 5
65839: PUSH
65840: LD_VAR 0 6
65844: ST_TO_ADDR
// distance := tmp ;
65845: LD_ADDR_VAR 0 10
65849: PUSH
65850: LD_VAR 0 9
65854: ST_TO_ADDR
// end ; end ;
65855: GO 65713
65857: POP
65858: POP
// end ;
65859: LD_VAR 0 5
65863: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65864: LD_INT 0
65866: PPUSH
65867: PPUSH
// if not driver or not IsInUnit ( driver ) then
65868: LD_VAR 0 1
65872: NOT
65873: PUSH
65874: LD_VAR 0 1
65878: PPUSH
65879: CALL_OW 310
65883: NOT
65884: OR
65885: IFFALSE 65889
// exit ;
65887: GO 65979
// vehicle := IsInUnit ( driver ) ;
65889: LD_ADDR_VAR 0 3
65893: PUSH
65894: LD_VAR 0 1
65898: PPUSH
65899: CALL_OW 310
65903: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65904: LD_VAR 0 1
65908: PPUSH
65909: LD_STRING \
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: LD_INT 0
65926: PUSH
65927: LD_INT 0
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: PUSH
65939: LD_STRING E
65941: PUSH
65942: LD_INT 0
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: LD_VAR 0 3
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: LD_INT 0
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PPUSH
65975: CALL_OW 446
// end ;
65979: LD_VAR 0 2
65983: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65984: LD_INT 0
65986: PPUSH
65987: PPUSH
// if not driver or not IsInUnit ( driver ) then
65988: LD_VAR 0 1
65992: NOT
65993: PUSH
65994: LD_VAR 0 1
65998: PPUSH
65999: CALL_OW 310
66003: NOT
66004: OR
66005: IFFALSE 66009
// exit ;
66007: GO 66099
// vehicle := IsInUnit ( driver ) ;
66009: LD_ADDR_VAR 0 3
66013: PUSH
66014: LD_VAR 0 1
66018: PPUSH
66019: CALL_OW 310
66023: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66024: LD_VAR 0 1
66028: PPUSH
66029: LD_STRING \
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: LD_INT 0
66043: PUSH
66044: LD_INT 0
66046: PUSH
66047: LD_INT 0
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: PUSH
66059: LD_STRING E
66061: PUSH
66062: LD_INT 0
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: LD_VAR 0 3
66072: PUSH
66073: LD_INT 0
66075: PUSH
66076: LD_INT 0
66078: PUSH
66079: LD_INT 0
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PPUSH
66095: CALL_OW 447
// end ;
66099: LD_VAR 0 2
66103: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66104: LD_INT 0
66106: PPUSH
66107: PPUSH
66108: PPUSH
// tmp := [ ] ;
66109: LD_ADDR_VAR 0 5
66113: PUSH
66114: EMPTY
66115: ST_TO_ADDR
// for i in units do
66116: LD_ADDR_VAR 0 4
66120: PUSH
66121: LD_VAR 0 1
66125: PUSH
66126: FOR_IN
66127: IFFALSE 66165
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66129: LD_ADDR_VAR 0 5
66133: PUSH
66134: LD_VAR 0 5
66138: PPUSH
66139: LD_VAR 0 5
66143: PUSH
66144: LD_INT 1
66146: PLUS
66147: PPUSH
66148: LD_VAR 0 4
66152: PPUSH
66153: CALL_OW 256
66157: PPUSH
66158: CALL_OW 2
66162: ST_TO_ADDR
66163: GO 66126
66165: POP
66166: POP
// if not tmp then
66167: LD_VAR 0 5
66171: NOT
66172: IFFALSE 66176
// exit ;
66174: GO 66224
// if asc then
66176: LD_VAR 0 2
66180: IFFALSE 66204
// result := SortListByListAsc ( units , tmp ) else
66182: LD_ADDR_VAR 0 3
66186: PUSH
66187: LD_VAR 0 1
66191: PPUSH
66192: LD_VAR 0 5
66196: PPUSH
66197: CALL_OW 76
66201: ST_TO_ADDR
66202: GO 66224
// result := SortListByListDesc ( units , tmp ) ;
66204: LD_ADDR_VAR 0 3
66208: PUSH
66209: LD_VAR 0 1
66213: PPUSH
66214: LD_VAR 0 5
66218: PPUSH
66219: CALL_OW 77
66223: ST_TO_ADDR
// end ;
66224: LD_VAR 0 3
66228: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66229: LD_INT 0
66231: PPUSH
66232: PPUSH
// task := GetTaskList ( mech ) ;
66233: LD_ADDR_VAR 0 4
66237: PUSH
66238: LD_VAR 0 1
66242: PPUSH
66243: CALL_OW 437
66247: ST_TO_ADDR
// if not task then
66248: LD_VAR 0 4
66252: NOT
66253: IFFALSE 66257
// exit ;
66255: GO 66299
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66257: LD_ADDR_VAR 0 3
66261: PUSH
66262: LD_VAR 0 4
66266: PUSH
66267: LD_INT 1
66269: ARRAY
66270: PUSH
66271: LD_INT 1
66273: ARRAY
66274: PUSH
66275: LD_STRING r
66277: EQUAL
66278: PUSH
66279: LD_VAR 0 4
66283: PUSH
66284: LD_INT 1
66286: ARRAY
66287: PUSH
66288: LD_INT 4
66290: ARRAY
66291: PUSH
66292: LD_VAR 0 2
66296: EQUAL
66297: AND
66298: ST_TO_ADDR
// end ;
66299: LD_VAR 0 3
66303: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66304: LD_INT 0
66306: PPUSH
// SetDir ( unit , d ) ;
66307: LD_VAR 0 1
66311: PPUSH
66312: LD_VAR 0 4
66316: PPUSH
66317: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66321: LD_VAR 0 1
66325: PPUSH
66326: LD_VAR 0 2
66330: PPUSH
66331: LD_VAR 0 3
66335: PPUSH
66336: LD_VAR 0 5
66340: PPUSH
66341: CALL_OW 48
// end ;
66345: LD_VAR 0 6
66349: RET
// export function ToNaturalNumber ( number ) ; begin
66350: LD_INT 0
66352: PPUSH
// result := number div 1 ;
66353: LD_ADDR_VAR 0 2
66357: PUSH
66358: LD_VAR 0 1
66362: PUSH
66363: LD_INT 1
66365: DIV
66366: ST_TO_ADDR
// if number < 0 then
66367: LD_VAR 0 1
66371: PUSH
66372: LD_INT 0
66374: LESS
66375: IFFALSE 66385
// result := 0 ;
66377: LD_ADDR_VAR 0 2
66381: PUSH
66382: LD_INT 0
66384: ST_TO_ADDR
// end ;
66385: LD_VAR 0 2
66389: RET
// export function SortByClass ( units , class ) ; var un ; begin
66390: LD_INT 0
66392: PPUSH
66393: PPUSH
// if not units or not class then
66394: LD_VAR 0 1
66398: NOT
66399: PUSH
66400: LD_VAR 0 2
66404: NOT
66405: OR
66406: IFFALSE 66410
// exit ;
66408: GO 66505
// result := [ ] ;
66410: LD_ADDR_VAR 0 3
66414: PUSH
66415: EMPTY
66416: ST_TO_ADDR
// for un in units do
66417: LD_ADDR_VAR 0 4
66421: PUSH
66422: LD_VAR 0 1
66426: PUSH
66427: FOR_IN
66428: IFFALSE 66503
// if GetClass ( un ) = class then
66430: LD_VAR 0 4
66434: PPUSH
66435: CALL_OW 257
66439: PUSH
66440: LD_VAR 0 2
66444: EQUAL
66445: IFFALSE 66472
// result := Insert ( result , 1 , un ) else
66447: LD_ADDR_VAR 0 3
66451: PUSH
66452: LD_VAR 0 3
66456: PPUSH
66457: LD_INT 1
66459: PPUSH
66460: LD_VAR 0 4
66464: PPUSH
66465: CALL_OW 2
66469: ST_TO_ADDR
66470: GO 66501
// result := Replace ( result , result + 1 , un ) ;
66472: LD_ADDR_VAR 0 3
66476: PUSH
66477: LD_VAR 0 3
66481: PPUSH
66482: LD_VAR 0 3
66486: PUSH
66487: LD_INT 1
66489: PLUS
66490: PPUSH
66491: LD_VAR 0 4
66495: PPUSH
66496: CALL_OW 1
66500: ST_TO_ADDR
66501: GO 66427
66503: POP
66504: POP
// end ;
66505: LD_VAR 0 3
66509: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66510: LD_INT 0
66512: PPUSH
66513: PPUSH
66514: PPUSH
66515: PPUSH
66516: PPUSH
66517: PPUSH
66518: PPUSH
// result := [ ] ;
66519: LD_ADDR_VAR 0 4
66523: PUSH
66524: EMPTY
66525: ST_TO_ADDR
// if x - r < 0 then
66526: LD_VAR 0 1
66530: PUSH
66531: LD_VAR 0 3
66535: MINUS
66536: PUSH
66537: LD_INT 0
66539: LESS
66540: IFFALSE 66552
// min_x := 0 else
66542: LD_ADDR_VAR 0 8
66546: PUSH
66547: LD_INT 0
66549: ST_TO_ADDR
66550: GO 66568
// min_x := x - r ;
66552: LD_ADDR_VAR 0 8
66556: PUSH
66557: LD_VAR 0 1
66561: PUSH
66562: LD_VAR 0 3
66566: MINUS
66567: ST_TO_ADDR
// if y - r < 0 then
66568: LD_VAR 0 2
66572: PUSH
66573: LD_VAR 0 3
66577: MINUS
66578: PUSH
66579: LD_INT 0
66581: LESS
66582: IFFALSE 66594
// min_y := 0 else
66584: LD_ADDR_VAR 0 7
66588: PUSH
66589: LD_INT 0
66591: ST_TO_ADDR
66592: GO 66610
// min_y := y - r ;
66594: LD_ADDR_VAR 0 7
66598: PUSH
66599: LD_VAR 0 2
66603: PUSH
66604: LD_VAR 0 3
66608: MINUS
66609: ST_TO_ADDR
// max_x := x + r ;
66610: LD_ADDR_VAR 0 9
66614: PUSH
66615: LD_VAR 0 1
66619: PUSH
66620: LD_VAR 0 3
66624: PLUS
66625: ST_TO_ADDR
// max_y := y + r ;
66626: LD_ADDR_VAR 0 10
66630: PUSH
66631: LD_VAR 0 2
66635: PUSH
66636: LD_VAR 0 3
66640: PLUS
66641: ST_TO_ADDR
// for _x = min_x to max_x do
66642: LD_ADDR_VAR 0 5
66646: PUSH
66647: DOUBLE
66648: LD_VAR 0 8
66652: DEC
66653: ST_TO_ADDR
66654: LD_VAR 0 9
66658: PUSH
66659: FOR_TO
66660: IFFALSE 66761
// for _y = min_y to max_y do
66662: LD_ADDR_VAR 0 6
66666: PUSH
66667: DOUBLE
66668: LD_VAR 0 7
66672: DEC
66673: ST_TO_ADDR
66674: LD_VAR 0 10
66678: PUSH
66679: FOR_TO
66680: IFFALSE 66757
// begin if not ValidHex ( _x , _y ) then
66682: LD_VAR 0 5
66686: PPUSH
66687: LD_VAR 0 6
66691: PPUSH
66692: CALL_OW 488
66696: NOT
66697: IFFALSE 66701
// continue ;
66699: GO 66679
// if GetResourceTypeXY ( _x , _y ) then
66701: LD_VAR 0 5
66705: PPUSH
66706: LD_VAR 0 6
66710: PPUSH
66711: CALL_OW 283
66715: IFFALSE 66755
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66717: LD_ADDR_VAR 0 4
66721: PUSH
66722: LD_VAR 0 4
66726: PPUSH
66727: LD_VAR 0 4
66731: PUSH
66732: LD_INT 1
66734: PLUS
66735: PPUSH
66736: LD_VAR 0 5
66740: PUSH
66741: LD_VAR 0 6
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PPUSH
66750: CALL_OW 1
66754: ST_TO_ADDR
// end ;
66755: GO 66679
66757: POP
66758: POP
66759: GO 66659
66761: POP
66762: POP
// end ;
66763: LD_VAR 0 4
66767: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66768: LD_INT 0
66770: PPUSH
66771: PPUSH
66772: PPUSH
66773: PPUSH
66774: PPUSH
66775: PPUSH
66776: PPUSH
66777: PPUSH
// if not units then
66778: LD_VAR 0 1
66782: NOT
66783: IFFALSE 66787
// exit ;
66785: GO 67212
// result := UnitFilter ( units , [ f_ok ] ) ;
66787: LD_ADDR_VAR 0 3
66791: PUSH
66792: LD_VAR 0 1
66796: PPUSH
66797: LD_INT 50
66799: PUSH
66800: EMPTY
66801: LIST
66802: PPUSH
66803: CALL_OW 72
66807: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66808: LD_ADDR_VAR 0 8
66812: PUSH
66813: LD_VAR 0 1
66817: PUSH
66818: LD_INT 1
66820: ARRAY
66821: PPUSH
66822: CALL_OW 255
66826: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
66827: LD_ADDR_VAR 0 10
66831: PUSH
66832: LD_INT 29
66834: PUSH
66835: LD_EXP 29
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: ST_TO_ADDR
// if not result then
66844: LD_VAR 0 3
66848: NOT
66849: IFFALSE 66853
// exit ;
66851: GO 67212
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66853: LD_ADDR_VAR 0 5
66857: PUSH
66858: LD_INT 81
66860: PUSH
66861: LD_VAR 0 8
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PPUSH
66870: CALL_OW 69
66874: ST_TO_ADDR
// for i in result do
66875: LD_ADDR_VAR 0 4
66879: PUSH
66880: LD_VAR 0 3
66884: PUSH
66885: FOR_IN
66886: IFFALSE 67210
// begin tag := GetTag ( i ) + 1 ;
66888: LD_ADDR_VAR 0 9
66892: PUSH
66893: LD_VAR 0 4
66897: PPUSH
66898: CALL_OW 110
66902: PUSH
66903: LD_INT 1
66905: PLUS
66906: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66907: LD_ADDR_VAR 0 7
66911: PUSH
66912: LD_VAR 0 4
66916: PPUSH
66917: CALL_OW 250
66921: PPUSH
66922: LD_VAR 0 4
66926: PPUSH
66927: CALL_OW 251
66931: PPUSH
66932: LD_INT 6
66934: PPUSH
66935: CALL 66510 0 3
66939: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66940: LD_VAR 0 7
66944: PUSH
66945: LD_VAR 0 4
66949: PPUSH
66950: CALL_OW 264
66954: PUSH
66955: LD_VAR 0 10
66959: IN
66960: NOT
66961: AND
66962: IFFALSE 67001
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66964: LD_VAR 0 4
66968: PPUSH
66969: LD_VAR 0 7
66973: PUSH
66974: LD_INT 1
66976: ARRAY
66977: PUSH
66978: LD_INT 1
66980: ARRAY
66981: PPUSH
66982: LD_VAR 0 7
66986: PUSH
66987: LD_INT 1
66989: ARRAY
66990: PUSH
66991: LD_INT 2
66993: ARRAY
66994: PPUSH
66995: CALL_OW 116
66999: GO 67208
// if path > tag then
67001: LD_VAR 0 2
67005: PUSH
67006: LD_VAR 0 9
67010: GREATER
67011: IFFALSE 67178
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
67013: LD_ADDR_VAR 0 6
67017: PUSH
67018: LD_VAR 0 5
67022: PPUSH
67023: LD_INT 91
67025: PUSH
67026: LD_VAR 0 4
67030: PUSH
67031: LD_INT 12
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: LIST
67038: PPUSH
67039: CALL_OW 72
67043: ST_TO_ADDR
// if nearEnemy then
67044: LD_VAR 0 6
67048: IFFALSE 67076
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67050: LD_VAR 0 4
67054: PPUSH
67055: LD_VAR 0 6
67059: PPUSH
67060: LD_VAR 0 4
67064: PPUSH
67065: CALL_OW 74
67069: PPUSH
67070: CALL_OW 115
67074: GO 67176
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67076: LD_VAR 0 4
67080: PPUSH
67081: LD_VAR 0 2
67085: PUSH
67086: LD_VAR 0 9
67090: ARRAY
67091: PUSH
67092: LD_INT 1
67094: ARRAY
67095: PPUSH
67096: LD_VAR 0 2
67100: PUSH
67101: LD_VAR 0 9
67105: ARRAY
67106: PUSH
67107: LD_INT 2
67109: ARRAY
67110: PPUSH
67111: CALL_OW 297
67115: PUSH
67116: LD_INT 6
67118: GREATER
67119: IFFALSE 67162
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67121: LD_VAR 0 4
67125: PPUSH
67126: LD_VAR 0 2
67130: PUSH
67131: LD_VAR 0 9
67135: ARRAY
67136: PUSH
67137: LD_INT 1
67139: ARRAY
67140: PPUSH
67141: LD_VAR 0 2
67145: PUSH
67146: LD_VAR 0 9
67150: ARRAY
67151: PUSH
67152: LD_INT 2
67154: ARRAY
67155: PPUSH
67156: CALL_OW 114
67160: GO 67176
// SetTag ( i , tag ) ;
67162: LD_VAR 0 4
67166: PPUSH
67167: LD_VAR 0 9
67171: PPUSH
67172: CALL_OW 109
// end else
67176: GO 67208
// if enemy then
67178: LD_VAR 0 5
67182: IFFALSE 67208
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67184: LD_VAR 0 4
67188: PPUSH
67189: LD_VAR 0 5
67193: PPUSH
67194: LD_VAR 0 4
67198: PPUSH
67199: CALL_OW 74
67203: PPUSH
67204: CALL_OW 115
// end ;
67208: GO 66885
67210: POP
67211: POP
// end ;
67212: LD_VAR 0 3
67216: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67217: LD_INT 0
67219: PPUSH
67220: PPUSH
67221: PPUSH
// if not unit or IsInUnit ( unit ) then
67222: LD_VAR 0 1
67226: NOT
67227: PUSH
67228: LD_VAR 0 1
67232: PPUSH
67233: CALL_OW 310
67237: OR
67238: IFFALSE 67242
// exit ;
67240: GO 67333
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67242: LD_ADDR_VAR 0 4
67246: PUSH
67247: LD_VAR 0 1
67251: PPUSH
67252: CALL_OW 250
67256: PPUSH
67257: LD_VAR 0 2
67261: PPUSH
67262: LD_INT 1
67264: PPUSH
67265: CALL_OW 272
67269: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67270: LD_ADDR_VAR 0 5
67274: PUSH
67275: LD_VAR 0 1
67279: PPUSH
67280: CALL_OW 251
67284: PPUSH
67285: LD_VAR 0 2
67289: PPUSH
67290: LD_INT 1
67292: PPUSH
67293: CALL_OW 273
67297: ST_TO_ADDR
// if ValidHex ( x , y ) then
67298: LD_VAR 0 4
67302: PPUSH
67303: LD_VAR 0 5
67307: PPUSH
67308: CALL_OW 488
67312: IFFALSE 67333
// ComTurnXY ( unit , x , y ) ;
67314: LD_VAR 0 1
67318: PPUSH
67319: LD_VAR 0 4
67323: PPUSH
67324: LD_VAR 0 5
67328: PPUSH
67329: CALL_OW 118
// end ;
67333: LD_VAR 0 3
67337: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67338: LD_INT 0
67340: PPUSH
67341: PPUSH
// result := false ;
67342: LD_ADDR_VAR 0 3
67346: PUSH
67347: LD_INT 0
67349: ST_TO_ADDR
// if not units then
67350: LD_VAR 0 2
67354: NOT
67355: IFFALSE 67359
// exit ;
67357: GO 67404
// for i in units do
67359: LD_ADDR_VAR 0 4
67363: PUSH
67364: LD_VAR 0 2
67368: PUSH
67369: FOR_IN
67370: IFFALSE 67402
// if See ( side , i ) then
67372: LD_VAR 0 1
67376: PPUSH
67377: LD_VAR 0 4
67381: PPUSH
67382: CALL_OW 292
67386: IFFALSE 67400
// begin result := true ;
67388: LD_ADDR_VAR 0 3
67392: PUSH
67393: LD_INT 1
67395: ST_TO_ADDR
// exit ;
67396: POP
67397: POP
67398: GO 67404
// end ;
67400: GO 67369
67402: POP
67403: POP
// end ;
67404: LD_VAR 0 3
67408: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67409: LD_INT 0
67411: PPUSH
67412: PPUSH
67413: PPUSH
67414: PPUSH
// if not unit or not points then
67415: LD_VAR 0 1
67419: NOT
67420: PUSH
67421: LD_VAR 0 2
67425: NOT
67426: OR
67427: IFFALSE 67431
// exit ;
67429: GO 67521
// dist := 99999 ;
67431: LD_ADDR_VAR 0 5
67435: PUSH
67436: LD_INT 99999
67438: ST_TO_ADDR
// for i in points do
67439: LD_ADDR_VAR 0 4
67443: PUSH
67444: LD_VAR 0 2
67448: PUSH
67449: FOR_IN
67450: IFFALSE 67519
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67452: LD_ADDR_VAR 0 6
67456: PUSH
67457: LD_VAR 0 1
67461: PPUSH
67462: LD_VAR 0 4
67466: PUSH
67467: LD_INT 1
67469: ARRAY
67470: PPUSH
67471: LD_VAR 0 4
67475: PUSH
67476: LD_INT 2
67478: ARRAY
67479: PPUSH
67480: CALL_OW 297
67484: ST_TO_ADDR
// if tmpDist < dist then
67485: LD_VAR 0 6
67489: PUSH
67490: LD_VAR 0 5
67494: LESS
67495: IFFALSE 67517
// begin result := i ;
67497: LD_ADDR_VAR 0 3
67501: PUSH
67502: LD_VAR 0 4
67506: ST_TO_ADDR
// dist := tmpDist ;
67507: LD_ADDR_VAR 0 5
67511: PUSH
67512: LD_VAR 0 6
67516: ST_TO_ADDR
// end ; end ;
67517: GO 67449
67519: POP
67520: POP
// end ; end_of_file
67521: LD_VAR 0 3
67525: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67526: LD_VAR 0 1
67530: PUSH
67531: LD_INT 200
67533: DOUBLE
67534: GREATEREQUAL
67535: IFFALSE 67543
67537: LD_INT 299
67539: DOUBLE
67540: LESSEQUAL
67541: IFTRUE 67545
67543: GO 67577
67545: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67546: LD_VAR 0 1
67550: PPUSH
67551: LD_VAR 0 2
67555: PPUSH
67556: LD_VAR 0 3
67560: PPUSH
67561: LD_VAR 0 4
67565: PPUSH
67566: LD_VAR 0 5
67570: PPUSH
67571: CALL 23552 0 5
67575: GO 67654
67577: LD_INT 300
67579: DOUBLE
67580: GREATEREQUAL
67581: IFFALSE 67589
67583: LD_INT 399
67585: DOUBLE
67586: LESSEQUAL
67587: IFTRUE 67591
67589: GO 67653
67591: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67592: LD_VAR 0 1
67596: PPUSH
67597: LD_VAR 0 2
67601: PPUSH
67602: LD_VAR 0 3
67606: PPUSH
67607: LD_VAR 0 4
67611: PPUSH
67612: LD_VAR 0 5
67616: PPUSH
67617: LD_VAR 0 6
67621: PPUSH
67622: LD_VAR 0 7
67626: PPUSH
67627: LD_VAR 0 8
67631: PPUSH
67632: LD_VAR 0 9
67636: PPUSH
67637: LD_VAR 0 10
67641: PPUSH
67642: LD_VAR 0 11
67646: PPUSH
67647: CALL 21450 0 11
67651: GO 67654
67653: POP
// end ;
67654: PPOPN 11
67656: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67657: LD_VAR 0 1
67661: PPUSH
67662: LD_VAR 0 2
67666: PPUSH
67667: LD_VAR 0 3
67671: PPUSH
67672: LD_VAR 0 4
67676: PPUSH
67677: LD_VAR 0 5
67681: PPUSH
67682: CALL 23544 0 5
// end ; end_of_file
67686: PPOPN 5
67688: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67689: LD_VAR 0 1
67693: PPUSH
67694: LD_VAR 0 2
67698: PPUSH
67699: LD_VAR 0 3
67703: PPUSH
67704: LD_VAR 0 4
67708: PPUSH
67709: LD_VAR 0 5
67713: PPUSH
67714: LD_VAR 0 6
67718: PPUSH
67719: CALL 9645 0 6
// end ;
67723: PPOPN 6
67725: END
