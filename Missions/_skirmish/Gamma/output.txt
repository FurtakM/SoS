// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8617 0 0
// PrepareAmerican ;
 100: CALL 5237 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2712: LD_VAR 0 1
2716: PPUSH
2717: CALL_OW 255
2721: PUSH
2722: LD_INT 3
2724: EQUAL
2725: PUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 263
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: AND
2740: IFFALSE 2750
// comp_tested := true ;
2742: LD_ADDR_EXP 22
2746: PUSH
2747: LD_INT 1
2749: ST_TO_ADDR
// end ;
2750: PPOPN 2
2752: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2753: LD_VAR 0 1
2757: PUSH
2758: LD_INT 22
2760: PUSH
2761: LD_INT 1
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: LD_INT 21
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PPUSH
2782: CALL_OW 69
2786: IN
2787: IFFALSE 2865
// if attacked = false and sikorski_ar = false then
2789: LD_EXP 15
2793: PUSH
2794: LD_INT 0
2796: EQUAL
2797: PUSH
2798: LD_EXP 12
2802: PUSH
2803: LD_INT 0
2805: EQUAL
2806: AND
2807: IFFALSE 2865
// begin attacked := true ;
2809: LD_ADDR_EXP 15
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// if IsInUnit ( donald ) then
2817: LD_EXP 13
2821: PPUSH
2822: CALL_OW 310
2826: IFFALSE 2842
// SayRadio ( donald , DGammaF ) else
2828: LD_EXP 13
2832: PPUSH
2833: LD_STRING DGammaF
2835: PPUSH
2836: CALL_OW 94
2840: GO 2865
// if IsInUnit ( van ) then
2842: LD_EXP 14
2846: PPUSH
2847: CALL_OW 310
2851: IFFALSE 2865
// SayRadio ( van , DGammaM ) ;
2853: LD_EXP 14
2857: PPUSH
2858: LD_STRING DGammaM
2860: PPUSH
2861: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2865: LD_VAR 0 1
2869: PUSH
2870: LD_INT 33
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: IN
2885: IFFALSE 2896
// ComUnlink ( un ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 136
// end ;
2896: PPOPN 1
2898: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2899: LD_VAR 0 2
2903: PPUSH
2904: CALL_OW 258
2908: PUSH
2909: LD_INT 1
2911: EQUAL
2912: IFFALSE 2926
// Say ( sci , Dsci3 ) ;
2914: LD_VAR 0 2
2918: PPUSH
2919: LD_STRING Dsci3
2921: PPUSH
2922: CALL_OW 88
// end ;
2926: PPOPN 2
2928: END
// on BuildingComplete ( b ) do var i ;
2929: LD_INT 0
2931: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2932: LD_VAR 0 1
2936: PPUSH
2937: CALL_OW 266
2941: PUSH
2942: LD_INT 0
2944: EQUAL
2945: PUSH
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 255
2955: PUSH
2956: LD_INT 3
2958: EQUAL
2959: AND
2960: PUSH
2961: LD_EXP 6
2965: PUSH
2966: LD_INT 0
2968: EQUAL
2969: AND
2970: IFFALSE 3034
// begin SetBName ( b , kalinin ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: LD_STRING kalinin
2979: PPUSH
2980: CALL_OW 500
// dep_x := GetX ( b ) ;
2984: LD_ADDR_EXP 7
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 250
2998: ST_TO_ADDR
// dep_y := GetY ( b ) ;
2999: LD_ADDR_EXP 8
3003: PUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 251
3013: ST_TO_ADDR
// depot_rdy := true ;
3014: LD_ADDR_EXP 6
3018: PUSH
3019: LD_INT 1
3021: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3022: LD_EXP 2
3026: PPUSH
3027: LD_STRING Dpop3
3029: PPUSH
3030: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3034: LD_VAR 0 1
3038: PPUSH
3039: CALL_OW 266
3043: PUSH
3044: LD_INT 6
3046: EQUAL
3047: PUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 255
3057: PUSH
3058: LD_INT 3
3060: EQUAL
3061: AND
3062: PUSH
3063: LD_EXP 21
3067: PUSH
3068: LD_INT 0
3070: EQUAL
3071: AND
3072: IFFALSE 3167
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3074: LD_INT 22
3076: PUSH
3077: LD_INT 3
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 25
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PPUSH
3098: CALL_OW 69
3102: PUSH
3103: LD_INT 0
3105: GREATER
3106: IFFALSE 3167
// begin event_comp := true ;
3108: LD_ADDR_EXP 21
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3116: LD_INT 22
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 25
3128: PUSH
3129: LD_INT 4
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 26
3138: PUSH
3139: LD_INT 1
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: PUSH
3156: LD_INT 1
3158: ARRAY
3159: PPUSH
3160: LD_STRING Dsci1
3162: PPUSH
3163: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3167: LD_VAR 0 1
3171: PPUSH
3172: CALL_OW 266
3176: PUSH
3177: LD_INT 32
3179: EQUAL
3180: PUSH
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 255
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: AND
3195: IFFALSE 3260
// begin RaiseSailEvent ( 6 ) ;
3197: LD_INT 6
3199: PPUSH
3200: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3204: LD_VAR 0 1
3208: PPUSH
3209: LD_EXP 18
3213: PUSH
3214: LD_INT 4
3216: ARRAY
3217: PPUSH
3218: CALL_OW 208
// for i = 1 to 4 do
3222: LD_ADDR_VAR 0 2
3226: PUSH
3227: DOUBLE
3228: LD_INT 1
3230: DEC
3231: ST_TO_ADDR
3232: LD_INT 4
3234: PUSH
3235: FOR_TO
3236: IFFALSE 3258
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3238: LD_ADDR_EXP 18
3242: PUSH
3243: LD_EXP 18
3247: PPUSH
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 3
3255: ST_TO_ADDR
3256: GO 3235
3258: POP
3259: POP
// end ; end ;
3260: PPOPN 2
3262: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL 22766 0 1
// if un in Patrol then
3272: LD_VAR 0 1
3276: PUSH
3277: LD_EXP 17
3281: IN
3282: IFFALSE 3300
// Patrol := Patrol diff un ;
3284: LD_ADDR_EXP 17
3288: PUSH
3289: LD_EXP 17
3293: PUSH
3294: LD_VAR 0 1
3298: DIFF
3299: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3300: LD_VAR 0 1
3304: PUSH
3305: LD_INT 22
3307: PUSH
3308: LD_INT 1
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 30
3317: PUSH
3318: LD_INT 32
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 69
3333: IN
3334: IFFALSE 3420
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3336: LD_ADDR_EXP 18
3340: PUSH
3341: LD_EXP 18
3345: PUSH
3346: LD_VAR 0 1
3350: PPUSH
3351: CALL_OW 250
3355: ADD
3356: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3357: LD_ADDR_EXP 18
3361: PUSH
3362: LD_EXP 18
3366: PUSH
3367: LD_VAR 0 1
3371: PPUSH
3372: CALL_OW 251
3376: ADD
3377: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3378: LD_ADDR_EXP 18
3382: PUSH
3383: LD_EXP 18
3387: PUSH
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 254
3397: ADD
3398: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3399: LD_ADDR_EXP 18
3403: PUSH
3404: LD_EXP 18
3408: PUSH
3409: LD_VAR 0 1
3413: PPUSH
3414: CALL_OW 269
3418: ADD
3419: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3420: LD_VAR 0 1
3424: PUSH
3425: LD_INT 33
3427: PUSH
3428: LD_INT 2
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 3
3437: PUSH
3438: LD_INT 34
3440: PUSH
3441: LD_INT 13
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PPUSH
3456: CALL_OW 69
3460: IN
3461: IFFALSE 3477
// new_veh := new_veh + 1 ;
3463: LD_ADDR_EXP 19
3467: PUSH
3468: LD_EXP 19
3472: PUSH
3473: LD_INT 1
3475: PLUS
3476: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3477: LD_VAR 0 1
3481: PUSH
3482: LD_INT 34
3484: PUSH
3485: LD_INT 13
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 69
3496: IN
3497: IFFALSE 3518
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3499: LD_INT 26
3501: PPUSH
3502: LD_INT 3
3504: PPUSH
3505: LD_INT 2
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: LD_INT 13
3513: PPUSH
3514: CALL_OW 185
// if un = am_dep then
3518: LD_VAR 0 1
3522: PUSH
3523: LD_INT 25
3525: EQUAL
3526: IFFALSE 3694
// begin SayRadio ( Platonov , DPlat ) ;
3528: LD_EXP 4
3532: PPUSH
3533: LD_STRING DPlat
3535: PPUSH
3536: CALL_OW 94
// if timer <= 30 30$00 then
3540: LD_EXP 24
3544: PUSH
3545: LD_INT 63000
3547: LESSEQUAL
3548: IFFALSE 3562
// AddMedal ( gamma_med3 , 1 ) else
3550: LD_STRING gamma_med3
3552: PPUSH
3553: LD_INT 1
3555: PPUSH
3556: CALL_OW 101
3560: GO 3612
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3562: LD_EXP 24
3566: PUSH
3567: LD_INT 105000
3569: PUSH
3570: LD_INT 88200
3572: PUSH
3573: LD_INT 73500
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_EXP 1
3585: ARRAY
3586: LESSEQUAL
3587: IFFALSE 3601
// AddMedal ( gamma_med3 , 2 ) else
3589: LD_STRING gamma_med3
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 101
3599: GO 3612
// AddMedal ( gamma_med3 , - 1 ) ;
3601: LD_STRING gamma_med3
3603: PPUSH
3604: LD_INT 1
3606: NEG
3607: PPUSH
3608: CALL_OW 101
// if not comp_tested then
3612: LD_EXP 22
3616: NOT
3617: IFFALSE 3632
// AddMedal ( gamma_med2 , - 1 ) else
3619: LD_STRING gamma_med2
3621: PPUSH
3622: LD_INT 1
3624: NEG
3625: PPUSH
3626: CALL_OW 101
3630: GO 3642
// AddMedal ( gamma_med2 , 1 ) ;
3632: LD_STRING gamma_med2
3634: PPUSH
3635: LD_INT 1
3637: PPUSH
3638: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3642: LD_EXP 9
3646: PPUSH
3647: CALL_OW 301
3651: PUSH
3652: LD_EXP 23
3656: NOT
3657: AND
3658: IFFALSE 3672
// AddMedal ( gamma_med1 , 1 ) else
3660: LD_STRING gamma_med1
3662: PPUSH
3663: LD_INT 1
3665: PPUSH
3666: CALL_OW 101
3670: GO 3683
// AddMedal ( gamma_med1 , - 1 ) ;
3672: LD_STRING gamma_med1
3674: PPUSH
3675: LD_INT 1
3677: NEG
3678: PPUSH
3679: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3683: LD_STRING GAMMA_MEDALS
3685: PPUSH
3686: CALL_OW 102
// YouWin ;
3690: CALL_OW 103
// end ; if un = commander then
3694: LD_VAR 0 1
3698: PUSH
3699: LD_EXP 3
3703: EQUAL
3704: IFFALSE 3713
// YouLost ( comml ) ;
3706: LD_STRING comml
3708: PPUSH
3709: CALL_OW 104
// if un = sikorski then
3713: LD_VAR 0 1
3717: PUSH
3718: LD_EXP 9
3722: EQUAL
3723: IFFALSE 3735
// AddMedal ( gamma_med1 , 1 ) ;
3725: LD_STRING gamma_med1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: CALL_OW 101
// end ;
3735: PPOPN 1
3737: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
// begin if event = 1 then
3749: LD_VAR 0 1
3753: PUSH
3754: LD_INT 1
3756: EQUAL
3757: IFFALSE 4054
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3759: LD_ADDR_VAR 0 4
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 1
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 21
3776: PUSH
3777: LD_INT 3
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 3
3786: PUSH
3787: LD_INT 24
3789: PUSH
3790: LD_INT 1000
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: PPUSH
3806: CALL_OW 69
3810: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3811: LD_ADDR_VAR 0 8
3815: PUSH
3816: LD_INT 22
3818: PUSH
3819: LD_INT 1
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 25
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 24
3838: PUSH
3839: LD_INT 1000
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: PPUSH
3854: CALL_OW 69
3858: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3859: LD_ADDR_VAR 0 9
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 1
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 13
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 69
3892: ST_TO_ADDR
// if engs > 0 then
3893: LD_VAR 0 8
3897: PUSH
3898: LD_INT 0
3900: GREATER
3901: IFFALSE 4006
// for i = 1 to engs do
3903: LD_ADDR_VAR 0 2
3907: PUSH
3908: DOUBLE
3909: LD_INT 1
3911: DEC
3912: ST_TO_ADDR
3913: LD_VAR 0 8
3917: PUSH
3918: FOR_TO
3919: IFFALSE 4004
// begin if IsInUnit ( engs [ i ] ) then
3921: LD_VAR 0 8
3925: PUSH
3926: LD_VAR 0 2
3930: ARRAY
3931: PPUSH
3932: CALL_OW 310
3936: IFFALSE 3953
// ComExitBuilding ( engs [ i ] ) ;
3938: LD_VAR 0 8
3942: PUSH
3943: LD_VAR 0 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3953: LD_INT 7
3955: PPUSH
3956: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3960: LD_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: ARRAY
3970: PPUSH
3971: CALL_OW 314
3975: NOT
3976: IFFALSE 4002
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3978: LD_VAR 0 8
3982: PUSH
3983: LD_VAR 0 2
3987: ARRAY
3988: PPUSH
3989: LD_VAR 0 4
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: CALL_OW 130
// end ;
4002: GO 3918
4004: POP
4005: POP
// if crane > 0 then
4006: LD_VAR 0 9
4010: PUSH
4011: LD_INT 0
4013: GREATER
4014: IFFALSE 4054
// if not HasTask ( crane [ 1 ] ) then
4016: LD_VAR 0 9
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: CALL_OW 314
4029: NOT
4030: IFFALSE 4054
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4032: LD_VAR 0 9
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: LD_VAR 0 4
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: PPUSH
4050: CALL_OW 130
// end ; if event = 2 then
4054: LD_VAR 0 1
4058: PUSH
4059: LD_INT 2
4061: EQUAL
4062: IFFALSE 4184
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4064: LD_ADDR_VAR 0 8
4068: PUSH
4069: LD_INT 22
4071: PUSH
4072: LD_INT 1
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 2
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 69
4097: ST_TO_ADDR
// if engs > 0 then
4098: LD_VAR 0 8
4102: PUSH
4103: LD_INT 0
4105: GREATER
4106: IFFALSE 4184
// for i = 1 to engs do
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: DOUBLE
4114: LD_INT 1
4116: DEC
4117: ST_TO_ADDR
4118: LD_VAR 0 8
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4182
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4126: LD_VAR 0 8
4130: PUSH
4131: LD_VAR 0 2
4135: ARRAY
4136: PPUSH
4137: CALL_OW 314
4141: NOT
4142: PUSH
4143: LD_VAR 0 8
4147: PUSH
4148: LD_VAR 0 2
4152: ARRAY
4153: PPUSH
4154: CALL_OW 310
4158: NOT
4159: AND
4160: IFFALSE 4180
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4162: LD_VAR 0 8
4166: PUSH
4167: LD_VAR 0 2
4171: ARRAY
4172: PPUSH
4173: LD_INT 25
4175: PPUSH
4176: CALL_OW 120
4180: GO 4123
4182: POP
4183: POP
// end ; if event = 3 then
4184: LD_VAR 0 1
4188: PUSH
4189: LD_INT 3
4191: EQUAL
4192: IFFALSE 4556
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4194: LD_ADDR_VAR 0 4
4198: PUSH
4199: LD_INT 22
4201: PUSH
4202: LD_INT 1
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 21
4211: PUSH
4212: LD_INT 1
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 3
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 4
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PUSH
4236: LD_INT 3
4238: PUSH
4239: LD_INT 24
4241: PUSH
4242: LD_INT 800
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: PPUSH
4262: CALL_OW 69
4266: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4267: LD_ADDR_VAR 0 5
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 25
4284: PUSH
4285: LD_INT 4
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 69
4300: ST_TO_ADDR
// if filter > 0 then
4301: LD_VAR 0 4
4305: PUSH
4306: LD_INT 0
4308: GREATER
4309: IFFALSE 4498
// begin for i = 1 to doc do
4311: LD_ADDR_VAR 0 2
4315: PUSH
4316: DOUBLE
4317: LD_INT 1
4319: DEC
4320: ST_TO_ADDR
4321: LD_VAR 0 5
4325: PUSH
4326: FOR_TO
4327: IFFALSE 4427
// begin if IsInUnit ( doc [ i ] ) then
4329: LD_VAR 0 5
4333: PUSH
4334: LD_VAR 0 2
4338: ARRAY
4339: PPUSH
4340: CALL_OW 310
4344: IFFALSE 4361
// ComExitBuilding ( doc [ i ] ) ;
4346: LD_VAR 0 5
4350: PUSH
4351: LD_VAR 0 2
4355: ARRAY
4356: PPUSH
4357: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4361: LD_VAR 0 4
4365: PUSH
4366: LD_INT 1
4368: ARRAY
4369: PPUSH
4370: LD_INT 46
4372: PPUSH
4373: CALL_OW 296
4377: PUSH
4378: LD_INT 10
4380: LESS
4381: PUSH
4382: LD_VAR 0 5
4386: PUSH
4387: LD_VAR 0 2
4391: ARRAY
4392: PPUSH
4393: CALL_OW 314
4397: NOT
4398: AND
4399: IFFALSE 4425
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4401: LD_VAR 0 5
4405: PUSH
4406: LD_VAR 0 2
4410: ARRAY
4411: PPUSH
4412: LD_VAR 0 4
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PPUSH
4421: CALL_OW 128
// end ;
4425: GO 4326
4427: POP
4428: POP
// for i = 1 to filter do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_VAR 0 4
4443: PUSH
4444: FOR_TO
4445: IFFALSE 4494
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4447: LD_VAR 0 4
4451: PUSH
4452: LD_VAR 0 2
4456: ARRAY
4457: PPUSH
4458: LD_INT 46
4460: PPUSH
4461: CALL_OW 296
4465: PUSH
4466: LD_INT 10
4468: GREATER
4469: IFFALSE 4492
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4471: LD_VAR 0 4
4475: PUSH
4476: LD_VAR 0 2
4480: ARRAY
4481: PPUSH
4482: LD_INT 47
4484: PPUSH
4485: LD_INT 12
4487: PPUSH
4488: CALL_OW 111
4492: GO 4444
4494: POP
4495: POP
// end else
4496: GO 4556
// for i = 1 to doc do
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: DOUBLE
4504: LD_INT 1
4506: DEC
4507: ST_TO_ADDR
4508: LD_VAR 0 5
4512: PUSH
4513: FOR_TO
4514: IFFALSE 4554
// if not IsInUnit ( doc [ i ] ) then
4516: LD_VAR 0 5
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: PPUSH
4527: CALL_OW 310
4531: NOT
4532: IFFALSE 4552
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4534: LD_VAR 0 5
4538: PUSH
4539: LD_VAR 0 2
4543: ARRAY
4544: PPUSH
4545: LD_INT 46
4547: PPUSH
4548: CALL_OW 120
4552: GO 4513
4554: POP
4555: POP
// end ; if event = 4 then
4556: LD_VAR 0 1
4560: PUSH
4561: LD_INT 4
4563: EQUAL
4564: IFFALSE 4815
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4566: LD_ADDR_VAR 0 6
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 5
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: ST_TO_ADDR
// for i = 1 to bac do
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: DOUBLE
4606: LD_INT 1
4608: DEC
4609: ST_TO_ADDR
4610: LD_VAR 0 6
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4657
// if UnitsInside ( bac [ i ] ) < 6 then
4618: LD_VAR 0 6
4622: PUSH
4623: LD_VAR 0 2
4627: ARRAY
4628: PPUSH
4629: CALL_OW 313
4633: PUSH
4634: LD_INT 6
4636: LESS
4637: IFFALSE 4655
// place := bac [ i ] ;
4639: LD_ADDR_VAR 0 7
4643: PUSH
4644: LD_VAR 0 6
4648: PUSH
4649: LD_VAR 0 2
4653: ARRAY
4654: ST_TO_ADDR
4655: GO 4615
4657: POP
4658: POP
// if place then
4659: LD_VAR 0 7
4663: IFFALSE 4815
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4665: LD_ADDR_VAR 0 4
4669: PUSH
4670: LD_INT 22
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 25
4695: PUSH
4696: LD_INT 5
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 24
4710: PUSH
4711: LD_INT 1000
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PUSH
4723: EMPTY
4724: LIST
4725: PPUSH
4726: CALL_OW 69
4730: PUSH
4731: LD_EXP 17
4735: DIFF
4736: ST_TO_ADDR
// for i = 1 to filter do
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: DOUBLE
4743: LD_INT 1
4745: DEC
4746: ST_TO_ADDR
4747: LD_VAR 0 4
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4813
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4755: LD_VAR 0 4
4759: PUSH
4760: LD_VAR 0 2
4764: ARRAY
4765: PPUSH
4766: CALL_OW 310
4770: NOT
4771: PUSH
4772: LD_VAR 0 4
4776: PUSH
4777: LD_VAR 0 2
4781: ARRAY
4782: PPUSH
4783: CALL_OW 314
4787: NOT
4788: AND
4789: IFFALSE 4811
// ComEnterUnit ( filter [ i ] , place ) ;
4791: LD_VAR 0 4
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_VAR 0 7
4806: PPUSH
4807: CALL_OW 120
4811: GO 4752
4813: POP
4814: POP
// end ; end ; if event = 5 then
4815: LD_VAR 0 1
4819: PUSH
4820: LD_INT 5
4822: EQUAL
4823: IFFALSE 4977
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4825: LD_INT 12
4827: PPUSH
4828: LD_INT 81
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 70
4842: PUSH
4843: LD_INT 0
4845: EQUAL
4846: IFFALSE 4977
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4848: LD_ADDR_VAR 0 8
4852: PUSH
4853: LD_INT 22
4855: PUSH
4856: LD_INT 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 25
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 69
4881: ST_TO_ADDR
// if engs > 0 then
4882: LD_VAR 0 8
4886: PUSH
4887: LD_INT 0
4889: GREATER
4890: IFFALSE 4977
// for i = 1 to engs do
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: DOUBLE
4898: LD_INT 1
4900: DEC
4901: ST_TO_ADDR
4902: LD_VAR 0 8
4906: PUSH
4907: FOR_TO
4908: IFFALSE 4975
// if not HasTask ( engs [ i ] ) then
4910: LD_VAR 0 8
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: CALL_OW 314
4925: NOT
4926: IFFALSE 4973
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4928: LD_VAR 0 8
4932: PUSH
4933: LD_VAR 0 2
4937: ARRAY
4938: PPUSH
4939: LD_INT 32
4941: PPUSH
4942: LD_EXP 18
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: LD_EXP 18
4955: PUSH
4956: LD_INT 2
4958: ARRAY
4959: PPUSH
4960: LD_EXP 18
4964: PUSH
4965: LD_INT 3
4967: ARRAY
4968: PPUSH
4969: CALL_OW 145
4973: GO 4907
4975: POP
4976: POP
// end ; end ; if event = 6 then
4977: LD_VAR 0 1
4981: PUSH
4982: LD_INT 6
4984: EQUAL
4985: IFFALSE 5169
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4987: LD_ADDR_VAR 0 6
4991: PUSH
4992: LD_INT 22
4994: PUSH
4995: LD_INT 1
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PPUSH
5016: CALL_OW 69
5020: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5021: LD_VAR 0 6
5025: PUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 30
5038: PUSH
5039: LD_INT 32
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 58
5048: PUSH
5049: EMPTY
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: PPUSH
5060: CALL_OW 69
5064: PUSH
5065: LD_INT 0
5067: GREATER
5068: AND
5069: IFFALSE 5169
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5071: LD_ADDR_VAR 0 10
5075: PUSH
5076: LD_INT 22
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 30
5088: PUSH
5089: LD_INT 32
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 58
5098: PUSH
5099: EMPTY
5100: LIST
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: PUSH
5115: LD_INT 1
5117: ARRAY
5118: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: LD_VAR 0 6
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: PPUSH
5133: CALL_OW 313
5137: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5151: LD_VAR 0 3
5155: PUSH
5156: LD_INT 1
5158: ARRAY
5159: PPUSH
5160: LD_VAR 0 10
5164: PPUSH
5165: CALL_OW 180
// end ; end ; end ;
5169: PPOPN 10
5171: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_INT 1
5179: EQUAL
5180: PUSH
5181: LD_VAR 0 2
5185: PUSH
5186: LD_INT 3
5188: EQUAL
5189: AND
5190: IFFALSE 5200
// contact_am := true ;
5192: LD_ADDR_EXP 16
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// end ;
5200: PPOPN 2
5202: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: LD_VAR 0 3
5217: PPUSH
5218: CALL 22864 0 3
// end ;
5222: PPOPN 3
5224: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL 22872 0 1
// end ; end_of_file
5234: PPOPN 1
5236: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
5241: PPUSH
5242: PPUSH
5243: PPUSH
5244: PPUSH
5245: PPUSH
5246: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5247: LD_ADDR_VAR 0 5
5251: PUSH
5252: LD_INT 5
5254: PUSH
5255: LD_INT 6
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: LD_EXP 1
5270: ARRAY
5271: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5272: LD_ADDR_VAR 0 6
5276: PUSH
5277: LD_INT 4
5279: PUSH
5280: LD_INT 4
5282: PUSH
5283: LD_INT 4
5285: PUSH
5286: LD_INT 5
5288: PUSH
5289: LD_INT 5
5291: PUSH
5292: LD_INT 5
5294: PUSH
5295: LD_INT 6
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// SForce := [ ] ;
5307: LD_ADDR_EXP 11
5311: PUSH
5312: EMPTY
5313: ST_TO_ADDR
// Sikorski_Ar := false ;
5314: LD_ADDR_EXP 12
5318: PUSH
5319: LD_INT 0
5321: ST_TO_ADDR
// attacked := false ;
5322: LD_ADDR_EXP 15
5326: PUSH
5327: LD_INT 0
5329: ST_TO_ADDR
// contact_am := false ;
5330: LD_ADDR_EXP 16
5334: PUSH
5335: LD_INT 0
5337: ST_TO_ADDR
// patrol := [ ] ;
5338: LD_ADDR_EXP 17
5342: PUSH
5343: EMPTY
5344: ST_TO_ADDR
// gamma_towers := [ ] ;
5345: LD_ADDR_EXP 18
5349: PUSH
5350: EMPTY
5351: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5352: LD_INT 25
5354: PPUSH
5355: LD_STRING gamma
5357: PPUSH
5358: CALL_OW 500
// uc_side := 1 ;
5362: LD_ADDR_OWVAR 20
5366: PUSH
5367: LD_INT 1
5369: ST_TO_ADDR
// uc_nation := 1 ;
5370: LD_ADDR_OWVAR 21
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// hc_importance := 0 ;
5378: LD_ADDR_OWVAR 32
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5386: LD_ADDR_OWVAR 26
5390: PUSH
5391: LD_STRING Jeremy Sikorski
5393: ST_TO_ADDR
// hc_gallery := us ;
5394: LD_ADDR_OWVAR 33
5398: PUSH
5399: LD_STRING us
5401: ST_TO_ADDR
// hc_face_number := 19 ;
5402: LD_ADDR_OWVAR 34
5406: PUSH
5407: LD_INT 19
5409: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5410: LD_ADDR_OWVAR 31
5414: PUSH
5415: LD_VAR 0 5
5419: PPUSH
5420: LD_VAR 0 5
5424: PUSH
5425: LD_INT 2
5427: PLUS
5428: PPUSH
5429: CALL_OW 12
5433: PUSH
5434: LD_INT 4
5436: PUSH
5437: LD_INT 6
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: ST_TO_ADDR
// hc_sex := sex_male ;
5449: LD_ADDR_OWVAR 27
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// hc_class := 1 ;
5457: LD_ADDR_OWVAR 28
5461: PUSH
5462: LD_INT 1
5464: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5465: LD_ADDR_OWVAR 29
5469: PUSH
5470: LD_INT 10
5472: PUSH
5473: LD_INT 11
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: ST_TO_ADDR
// sikorski := CreateHuman ;
5480: LD_ADDR_EXP 9
5484: PUSH
5485: CALL_OW 44
5489: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5490: LD_ADDR_OWVAR 26
5494: PUSH
5495: LD_STRING Lucy Donaldson
5497: ST_TO_ADDR
// hc_gallery := us ;
5498: LD_ADDR_OWVAR 33
5502: PUSH
5503: LD_STRING us
5505: ST_TO_ADDR
// hc_face_number := 2 ;
5506: LD_ADDR_OWVAR 34
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5514: LD_ADDR_OWVAR 31
5518: PUSH
5519: LD_VAR 0 5
5523: PPUSH
5524: LD_VAR 0 5
5528: PUSH
5529: LD_INT 2
5531: PLUS
5532: PPUSH
5533: CALL_OW 12
5537: PUSH
5538: LD_INT 6
5540: PUSH
5541: LD_INT 4
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: ST_TO_ADDR
// hc_sex := sex_female ;
5553: LD_ADDR_OWVAR 27
5557: PUSH
5558: LD_INT 2
5560: ST_TO_ADDR
// hc_class := 1 ;
5561: LD_ADDR_OWVAR 28
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// donald := CreateHuman ;
5569: LD_ADDR_EXP 13
5573: PUSH
5574: CALL_OW 44
5578: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5579: LD_ADDR_OWVAR 26
5583: PUSH
5584: LD_STRING Peter Van Houten
5586: ST_TO_ADDR
// hc_gallery := us ;
5587: LD_ADDR_OWVAR 33
5591: PUSH
5592: LD_STRING us
5594: ST_TO_ADDR
// hc_face_number := 16 ;
5595: LD_ADDR_OWVAR 34
5599: PUSH
5600: LD_INT 16
5602: ST_TO_ADDR
// hc_sex := sex_male ;
5603: LD_ADDR_OWVAR 27
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// van := CreateHuman ;
5611: LD_ADDR_EXP 14
5615: PUSH
5616: CALL_OW 44
5620: ST_TO_ADDR
// hc_importance := 0 ;
5621: LD_ADDR_OWVAR 32
5625: PUSH
5626: LD_INT 0
5628: ST_TO_ADDR
// case dif of 1 :
5629: LD_EXP 1
5633: PUSH
5634: LD_INT 1
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5642
5640: GO 5653
5642: POP
// lw = 1 ; 2 :
5643: LD_ADDR_VAR 0 8
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
5651: GO 5700
5653: LD_INT 2
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5661
5659: GO 5680
5661: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5662: LD_ADDR_VAR 0 8
5666: PUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: CALL_OW 12
5677: ST_TO_ADDR
5678: GO 5700
5680: LD_INT 3
5682: DOUBLE
5683: EQUAL
5684: IFTRUE 5688
5686: GO 5699
5688: POP
// lw = 2 ; end ;
5689: LD_ADDR_VAR 0 8
5693: PUSH
5694: LD_INT 2
5696: ST_TO_ADDR
5697: GO 5700
5699: POP
// case lw of 1 :
5700: LD_VAR 0 8
5704: PUSH
5705: LD_INT 1
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5728
5713: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5714: LD_EXP 13
5718: PPUSH
5719: LD_INT 25
5721: PPUSH
5722: CALL_OW 52
5726: GO 5752
5728: LD_INT 2
5730: DOUBLE
5731: EQUAL
5732: IFTRUE 5736
5734: GO 5751
5736: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5737: LD_EXP 14
5741: PPUSH
5742: LD_INT 25
5744: PPUSH
5745: CALL_OW 52
5749: GO 5752
5751: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5752: LD_ADDR_VAR 0 2
5756: PUSH
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 30
5769: PUSH
5770: LD_INT 32
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: PUSH
5786: FOR_IN
5787: IFFALSE 5841
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5789: LD_INT 1
5791: PPUSH
5792: LD_VAR 0 5
5796: PPUSH
5797: CALL 734 0 2
5801: PPUSH
5802: LD_VAR 0 2
5806: PPUSH
5807: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5811: LD_VAR 0 2
5815: PPUSH
5816: LD_VAR 0 6
5820: PUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 12
5833: ARRAY
5834: PPUSH
5835: CALL_OW 431
// end ;
5839: GO 5786
5841: POP
5842: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5843: LD_ADDR_VAR 0 7
5847: PUSH
5848: LD_INT 22
5850: PUSH
5851: LD_INT 1
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 2
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 1
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 5
5873: PUSH
5874: EMPTY
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 69
5890: ST_TO_ADDR
// for i = 1 to sol do
5891: LD_ADDR_VAR 0 2
5895: PUSH
5896: DOUBLE
5897: LD_INT 1
5899: DEC
5900: ST_TO_ADDR
5901: LD_VAR 0 7
5905: PUSH
5906: FOR_TO
5907: IFFALSE 5929
// SetTag ( sol [ i ] , 1 ) ;
5909: LD_VAR 0 7
5913: PUSH
5914: LD_VAR 0 2
5918: ARRAY
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: CALL_OW 109
5927: GO 5906
5929: POP
5930: POP
// for i = 1 to 3 do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: DOUBLE
5937: LD_INT 1
5939: DEC
5940: ST_TO_ADDR
5941: LD_INT 3
5943: PUSH
5944: FOR_TO
5945: IFFALSE 5969
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5947: LD_INT 3
5949: PPUSH
5950: LD_VAR 0 5
5954: PPUSH
5955: CALL 734 0 2
5959: PPUSH
5960: LD_INT 56
5962: PPUSH
5963: CALL_OW 52
5967: GO 5944
5969: POP
5970: POP
// for i = 1 to 6 do
5971: LD_ADDR_VAR 0 2
5975: PUSH
5976: DOUBLE
5977: LD_INT 1
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 6
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6009
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
5987: LD_INT 3
5989: PPUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: CALL 734 0 2
5999: PPUSH
6000: LD_INT 26
6002: PPUSH
6003: CALL_OW 52
6007: GO 5984
6009: POP
6010: POP
// for i = 1 to 5 do
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: DOUBLE
6017: LD_INT 1
6019: DEC
6020: ST_TO_ADDR
6021: LD_INT 5
6023: PUSH
6024: FOR_TO
6025: IFFALSE 6052
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_VAR 0 5
6034: PPUSH
6035: CALL 734 0 2
6039: PPUSH
6040: LD_INT 7
6042: PPUSH
6043: LD_INT 0
6045: PPUSH
6046: CALL_OW 49
6050: GO 6024
6052: POP
6053: POP
// for i = 1 to 3 do
6054: LD_ADDR_VAR 0 2
6058: PUSH
6059: DOUBLE
6060: LD_INT 1
6062: DEC
6063: ST_TO_ADDR
6064: LD_INT 3
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6092
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6070: LD_INT 4
6072: PPUSH
6073: LD_VAR 0 5
6077: PPUSH
6078: CALL 734 0 2
6082: PPUSH
6083: LD_INT 46
6085: PPUSH
6086: CALL_OW 52
6090: GO 6067
6092: POP
6093: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 30
6111: PUSH
6112: LD_INT 5
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PPUSH
6123: CALL_OW 69
6127: PUSH
6128: FOR_IN
6129: IFFALSE 6243
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6131: LD_INT 5
6133: PPUSH
6134: LD_VAR 0 5
6138: PPUSH
6139: CALL 734 0 2
6143: PPUSH
6144: LD_VAR 0 2
6148: PPUSH
6149: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6153: LD_INT 5
6155: PPUSH
6156: LD_VAR 0 5
6160: PPUSH
6161: CALL 734 0 2
6165: PPUSH
6166: LD_VAR 0 2
6170: PPUSH
6171: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6175: LD_INT 1
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: CALL 734 0 2
6187: PPUSH
6188: LD_VAR 0 2
6192: PPUSH
6193: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6197: LD_INT 1
6199: PPUSH
6200: LD_VAR 0 5
6204: PPUSH
6205: CALL 734 0 2
6209: PPUSH
6210: LD_VAR 0 2
6214: PPUSH
6215: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6219: LD_INT 1
6221: PPUSH
6222: LD_VAR 0 5
6226: PPUSH
6227: CALL 734 0 2
6231: PPUSH
6232: LD_VAR 0 2
6236: PPUSH
6237: CALL_OW 52
// end ;
6241: GO 6128
6243: POP
6244: POP
// if dif > 1 then
6245: LD_EXP 1
6249: PUSH
6250: LD_INT 1
6252: GREATER
6253: IFFALSE 6326
// for i = 1 to ( dif - 1 ) do
6255: LD_ADDR_VAR 0 2
6259: PUSH
6260: DOUBLE
6261: LD_INT 1
6263: DEC
6264: ST_TO_ADDR
6265: LD_EXP 1
6269: PUSH
6270: LD_INT 1
6272: MINUS
6273: PUSH
6274: FOR_TO
6275: IFFALSE 6324
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6277: LD_ADDR_EXP 17
6281: PUSH
6282: LD_EXP 17
6286: PUSH
6287: LD_INT 1
6289: PPUSH
6290: LD_VAR 0 5
6294: PPUSH
6295: CALL 734 0 2
6299: ADD
6300: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6301: LD_EXP 17
6305: PUSH
6306: LD_VAR 0 2
6310: ARRAY
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: LD_INT 0
6317: PPUSH
6318: CALL_OW 49
// end ;
6322: GO 6274
6324: POP
6325: POP
// game_started := true ;
6326: LD_ADDR_EXP 10
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6334: LD_INT 26
6336: PPUSH
6337: LD_INT 3
6339: PPUSH
6340: LD_INT 2
6342: PPUSH
6343: LD_INT 2
6345: PPUSH
6346: LD_INT 13
6348: PPUSH
6349: CALL_OW 125
// while ( contact_am = false ) do
6353: LD_EXP 16
6357: PUSH
6358: LD_INT 0
6360: EQUAL
6361: IFFALSE 6372
// begin Wait ( 0 0$01 ) ;
6363: LD_INT 35
6365: PPUSH
6366: CALL_OW 67
// end ;
6370: GO 6353
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6372: LD_INT 8400
6374: PUSH
6375: LD_INT 6300
6377: PUSH
6378: LD_INT 5250
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_EXP 1
6390: ARRAY
6391: PPUSH
6392: CALL_OW 67
// case dif of 1 :
6396: LD_EXP 1
6400: PUSH
6401: LD_INT 1
6403: DOUBLE
6404: EQUAL
6405: IFTRUE 6409
6407: GO 6584
6409: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6410: LD_INT 26
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 1
6418: PPUSH
6419: LD_INT 2
6421: PPUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: LD_INT 1
6442: PPUSH
6443: LD_INT 4
6445: PPUSH
6446: CALL_OW 12
6450: ARRAY
6451: PPUSH
6452: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6456: LD_INT 26
6458: PPUSH
6459: LD_INT 3
6461: PPUSH
6462: LD_INT 1
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: LD_INT 4
6470: PUSH
6471: LD_INT 5
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 1
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: CALL_OW 12
6492: ARRAY
6493: PPUSH
6494: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6498: LD_INT 26
6500: PPUSH
6501: LD_INT 3
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: LD_INT 4
6512: PUSH
6513: LD_INT 5
6515: PUSH
6516: LD_INT 5
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_INT 3
6529: PPUSH
6530: CALL_OW 12
6534: ARRAY
6535: PPUSH
6536: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6540: LD_INT 26
6542: PPUSH
6543: LD_INT 3
6545: PPUSH
6546: LD_INT 1
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: LD_INT 4
6554: PUSH
6555: LD_INT 3
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 3
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: PPUSH
6578: CALL_OW 185
// end ; 2 :
6582: GO 7111
6584: LD_INT 2
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6805
6592: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6593: LD_INT 26
6595: PPUSH
6596: LD_INT 3
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 2
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 5
6610: PUSH
6611: LD_INT 5
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6635: LD_INT 26
6637: PPUSH
6638: LD_INT 3
6640: PPUSH
6641: LD_INT 1
6643: PPUSH
6644: LD_INT 2
6646: PPUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 5
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_INT 3
6666: PPUSH
6667: CALL_OW 12
6671: ARRAY
6672: PPUSH
6673: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6677: LD_INT 26
6679: PPUSH
6680: LD_INT 3
6682: PPUSH
6683: LD_INT 1
6685: PPUSH
6686: LD_INT 2
6688: PPUSH
6689: LD_INT 4
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 1
6705: PPUSH
6706: LD_INT 3
6708: PPUSH
6709: CALL_OW 12
6713: ARRAY
6714: PPUSH
6715: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6719: LD_INT 26
6721: PPUSH
6722: LD_INT 4
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_INT 2
6730: PPUSH
6731: LD_INT 4
6733: PUSH
6734: LD_INT 5
6736: PUSH
6737: LD_INT 6
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 1
6747: PPUSH
6748: LD_INT 3
6750: PPUSH
6751: CALL_OW 12
6755: ARRAY
6756: PPUSH
6757: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6761: LD_INT 26
6763: PPUSH
6764: LD_INT 4
6766: PPUSH
6767: LD_INT 1
6769: PPUSH
6770: LD_INT 2
6772: PPUSH
6773: LD_INT 4
6775: PUSH
6776: LD_INT 5
6778: PUSH
6779: LD_INT 6
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 1
6789: PPUSH
6790: LD_INT 3
6792: PPUSH
6793: CALL_OW 12
6797: ARRAY
6798: PPUSH
6799: CALL_OW 185
// end ; 3 :
6803: GO 7111
6805: LD_INT 3
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 7110
6813: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6814: LD_INT 26
6816: PPUSH
6817: LD_INT 3
6819: PPUSH
6820: LD_INT 1
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: LD_INT 4
6828: PUSH
6829: LD_INT 5
6831: PUSH
6832: LD_INT 5
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 1
6842: PPUSH
6843: LD_INT 3
6845: PPUSH
6846: CALL_OW 12
6850: ARRAY
6851: PPUSH
6852: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6856: LD_INT 26
6858: PPUSH
6859: LD_INT 3
6861: PPUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_INT 2
6867: PPUSH
6868: LD_INT 4
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: LD_INT 5
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 1
6884: PPUSH
6885: LD_INT 3
6887: PPUSH
6888: CALL_OW 12
6892: ARRAY
6893: PPUSH
6894: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6898: LD_INT 26
6900: PPUSH
6901: LD_INT 3
6903: PPUSH
6904: LD_INT 1
6906: PPUSH
6907: LD_INT 2
6909: PPUSH
6910: LD_INT 4
6912: PUSH
6913: LD_INT 5
6915: PUSH
6916: LD_INT 5
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 1
6926: PPUSH
6927: LD_INT 3
6929: PPUSH
6930: CALL_OW 12
6934: ARRAY
6935: PPUSH
6936: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6940: LD_INT 26
6942: PPUSH
6943: LD_INT 3
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 2
6951: PPUSH
6952: LD_INT 4
6954: PUSH
6955: LD_INT 5
6957: PUSH
6958: LD_INT 5
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 1
6968: PPUSH
6969: LD_INT 3
6971: PPUSH
6972: CALL_OW 12
6976: ARRAY
6977: PPUSH
6978: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6982: LD_INT 26
6984: PPUSH
6985: LD_INT 4
6987: PPUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: LD_INT 4
6996: PUSH
6997: LD_INT 5
6999: PUSH
7000: LD_INT 6
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 1
7010: PPUSH
7011: LD_INT 3
7013: PPUSH
7014: CALL_OW 12
7018: ARRAY
7019: PPUSH
7020: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7024: LD_INT 26
7026: PPUSH
7027: LD_INT 4
7029: PPUSH
7030: LD_INT 1
7032: PPUSH
7033: LD_INT 2
7035: PPUSH
7036: LD_INT 4
7038: PUSH
7039: LD_INT 5
7041: PUSH
7042: LD_INT 6
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 1
7052: PPUSH
7053: LD_INT 3
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7066: LD_INT 26
7068: PPUSH
7069: LD_INT 4
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: LD_INT 4
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 1
7094: PPUSH
7095: LD_INT 3
7097: PPUSH
7098: CALL_OW 12
7102: ARRAY
7103: PPUSH
7104: CALL_OW 185
// end ; end ;
7108: GO 7111
7110: POP
// end ;
7111: LD_VAR 0 1
7115: RET
// every 0 0$01 do var i , filter ;
7116: GO 7118
7118: DISABLE
7119: LD_INT 0
7121: PPUSH
7122: PPUSH
// begin enable ;
7123: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7124: LD_INT 22
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 25
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PUSH
7153: LD_INT 0
7155: GREATER
7156: IFFALSE 7165
// RaiseSailEvent ( 3 ) ;
7158: LD_INT 3
7160: PPUSH
7161: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7165: LD_INT 22
7167: PUSH
7168: LD_INT 1
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 21
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 3
7187: PUSH
7188: LD_INT 24
7190: PUSH
7191: LD_INT 1000
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PPUSH
7207: CALL_OW 69
7211: PUSH
7212: LD_INT 0
7214: GREATER
7215: IFFALSE 7226
// RaiseSailEvent ( 1 ) else
7217: LD_INT 1
7219: PPUSH
7220: CALL_OW 427
7224: GO 7233
// RaiseSailEvent ( 2 ) ;
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7233: LD_INT 22
7235: PUSH
7236: LD_INT 1
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 30
7245: PUSH
7246: LD_INT 5
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: PUSH
7262: LD_INT 0
7264: GREATER
7265: IFFALSE 7274
// RaiseSailEvent ( 4 ) ;
7267: LD_INT 4
7269: PPUSH
7270: CALL_OW 427
// if gamma_towers > 0 then
7274: LD_EXP 18
7278: PUSH
7279: LD_INT 0
7281: GREATER
7282: IFFALSE 7291
// RaiseSailEvent ( 5 ) ;
7284: LD_INT 5
7286: PPUSH
7287: CALL_OW 427
// end ;
7291: PPOPN 2
7293: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7294: GO 7296
7296: DISABLE
7297: LD_INT 0
7299: PPUSH
7300: PPUSH
// begin enable ;
7301: ENABLE
// if new_veh > 0 then
7302: LD_EXP 19
7306: PUSH
7307: LD_INT 0
7309: GREATER
7310: IFFALSE 7497
// while ( new_veh > 0 ) do
7312: LD_EXP 19
7316: PUSH
7317: LD_INT 0
7319: GREATER
7320: IFFALSE 7497
// begin Wait ( 0 0$01 ) ;
7322: LD_INT 35
7324: PPUSH
7325: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7329: LD_INT 26
7331: PPUSH
7332: CALL_OW 461
7336: PUSH
7337: LD_INT 2
7339: EQUAL
7340: IFFALSE 7495
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7342: LD_ADDR_VAR 0 1
7346: PUSH
7347: LD_INT 2
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: LD_INT 4
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 4
7370: PPUSH
7371: CALL_OW 12
7375: ARRAY
7376: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7377: LD_VAR 0 1
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: IN
7392: IFFALSE 7427
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7394: LD_ADDR_VAR 0 2
7398: PUSH
7399: LD_INT 4
7401: PUSH
7402: LD_INT 5
7404: PUSH
7405: LD_INT 7
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 1
7415: PPUSH
7416: LD_INT 3
7418: PPUSH
7419: CALL_OW 12
7423: ARRAY
7424: ST_TO_ADDR
7425: GO 7458
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7427: LD_ADDR_VAR 0 2
7431: PUSH
7432: LD_INT 5
7434: PUSH
7435: LD_INT 7
7437: PUSH
7438: LD_INT 6
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_INT 3
7451: PPUSH
7452: CALL_OW 12
7456: ARRAY
7457: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7458: LD_INT 26
7460: PPUSH
7461: LD_VAR 0 1
7465: PPUSH
7466: LD_INT 1
7468: PPUSH
7469: LD_INT 2
7471: PPUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 125
// new_veh := new_veh - 1 ;
7481: LD_ADDR_EXP 19
7485: PUSH
7486: LD_EXP 19
7490: PUSH
7491: LD_INT 1
7493: MINUS
7494: ST_TO_ADDR
// end ; end ;
7495: GO 7312
// end ;
7497: PPOPN 2
7499: END
// every 0 0$01 do var v , filter , am_cmeh ;
7500: GO 7502
7502: DISABLE
7503: LD_INT 0
7505: PPUSH
7506: PPUSH
7507: PPUSH
// begin enable ;
7508: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7509: LD_ADDR_VAR 0 3
7513: PUSH
7514: LD_INT 56
7516: PPUSH
7517: CALL_OW 313
7521: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: LD_INT 22
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 33
7539: PUSH
7540: LD_INT 2
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 50
7549: PUSH
7550: EMPTY
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: ST_TO_ADDR
// if filter > 0 then
7566: LD_VAR 0 2
7570: PUSH
7571: LD_INT 0
7573: GREATER
7574: IFFALSE 7642
// begin for v in filter do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_VAR 0 2
7585: PUSH
7586: FOR_IN
7587: IFFALSE 7640
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7589: LD_VAR 0 1
7593: PPUSH
7594: CALL_OW 312
7598: NOT
7599: PUSH
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 302
7609: AND
7610: IFFALSE 7638
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_VAR 0 3
7621: PUSH
7622: LD_INT 1
7624: PPUSH
7625: LD_INT 3
7627: PPUSH
7628: CALL_OW 12
7632: ARRAY
7633: PPUSH
7634: CALL_OW 135
// end ;
7638: GO 7586
7640: POP
7641: POP
// end ; end ;
7642: PPOPN 3
7644: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7645: LD_INT 33
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 34
7660: PUSH
7661: LD_INT 13
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: PUSH
7681: LD_INT 4
7683: PUSH
7684: LD_INT 5
7686: PUSH
7687: LD_INT 7
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PUSH
7695: LD_EXP 1
7699: ARRAY
7700: EQUAL
7701: PUSH
7702: LD_INT 26
7704: PPUSH
7705: CALL_OW 461
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: AND
7714: IFFALSE 7925
7716: GO 7718
7718: DISABLE
7719: LD_INT 0
7721: PPUSH
7722: PPUSH
7723: PPUSH
// begin enable ;
7724: ENABLE
// if Sikorski_Ar then
7725: LD_EXP 12
7729: IFFALSE 7806
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7731: LD_ADDR_EXP 11
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: LD_INT 22
7741: PUSH
7742: LD_INT 4
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 22
7751: PUSH
7752: LD_INT 1
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: LD_INT 33
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 13
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: ST_TO_ADDR
7804: GO 7847
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7806: LD_ADDR_EXP 11
7810: PUSH
7811: LD_INT 33
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 34
7826: PUSH
7827: LD_INT 13
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 69
7846: ST_TO_ADDR
// repeat begin for un in SForce do
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_EXP 11
7856: PUSH
7857: FOR_IN
7858: IFFALSE 7913
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7860: LD_ADDR_VAR 0 3
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: LD_VAR 0 2
7894: PPUSH
7895: CALL_OW 74
7899: PPUSH
7900: CALL_OW 115
// Wait ( 0 0$01 ) ;
7904: LD_INT 35
7906: PPUSH
7907: CALL_OW 67
// end ;
7911: GO 7857
7913: POP
7914: POP
// end until SForce = 0 ;
7915: LD_EXP 11
7919: PUSH
7920: LD_INT 0
7922: EQUAL
7923: IFFALSE 7847
// end ;
7925: PPOPN 3
7927: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7928: LD_INT 0
7930: PPUSH
7931: PPUSH
7932: PPUSH
7933: PPUSH
7934: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 14
7942: PPUSH
7943: EMPTY
7944: PPUSH
7945: CALL_OW 70
7949: ST_TO_ADDR
// if tmp then
7950: LD_VAR 0 6
7954: IFFALSE 7988
// for i in tmp do
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_VAR 0 6
7965: PUSH
7966: FOR_IN
7967: IFFALSE 7986
// ComMoveXY ( i , 42 , 23 ) ;
7969: LD_VAR 0 3
7973: PPUSH
7974: LD_INT 42
7976: PPUSH
7977: LD_INT 23
7979: PPUSH
7980: CALL_OW 111
7984: GO 7966
7986: POP
7987: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
7988: LD_INT 14
7990: PPUSH
7991: LD_INT 1
7993: PPUSH
7994: CALL_OW 286
// uc_side := 4 ;
7998: LD_ADDR_OWVAR 20
8002: PUSH
8003: LD_INT 4
8005: ST_TO_ADDR
// uc_nation := 1 ;
8006: LD_ADDR_OWVAR 21
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8014: LD_ADDR_OWVAR 37
8018: PUSH
8019: LD_INT 4
8021: ST_TO_ADDR
// vc_control := control_manual ;
8022: LD_ADDR_OWVAR 38
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// vc_engine := engine_combustion ;
8030: LD_ADDR_OWVAR 39
8034: PUSH
8035: LD_INT 1
8037: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8038: LD_ADDR_OWVAR 40
8042: PUSH
8043: LD_INT 4
8045: PUSH
8046: LD_INT 5
8048: PUSH
8049: LD_INT 7
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_EXP 1
8061: ARRAY
8062: ST_TO_ADDR
// veh := CreateVehicle ;
8063: LD_ADDR_VAR 0 5
8067: PUSH
8068: CALL_OW 45
8072: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8073: LD_VAR 0 5
8077: PPUSH
8078: LD_INT 2
8080: PPUSH
8081: LD_INT 0
8083: PPUSH
8084: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8088: LD_EXP 9
8092: PPUSH
8093: LD_VAR 0 5
8097: PPUSH
8098: CALL_OW 52
// SetMark ( veh , 1 ) ;
8102: LD_VAR 0 5
8106: PPUSH
8107: LD_INT 1
8109: PPUSH
8110: CALL_OW 242
// while ( num > 0 ) do
8114: LD_VAR 0 1
8118: PUSH
8119: LD_INT 0
8121: GREATER
8122: IFFALSE 8289
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8124: LD_INT 3
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 3
8132: PUSH
8133: LD_INT 4
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: LD_EXP 1
8146: PPUSH
8147: LD_INT 4
8149: PPUSH
8150: CALL_OW 12
8154: ARRAY
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 4
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: LD_INT 5
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_EXP 1
8184: PUSH
8185: LD_INT 1
8187: PLUS
8188: PPUSH
8189: CALL_OW 12
8193: ARRAY
8194: PPUSH
8195: LD_INT 11
8197: PPUSH
8198: LD_INT 2
8200: PPUSH
8201: LD_INT 5
8203: PUSH
8204: LD_INT 6
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: LD_EXP 1
8219: ARRAY
8220: PPUSH
8221: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8225: LD_ADDR_VAR 0 4
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8245: LD_VAR 0 4
8249: PUSH
8250: LD_VAR 0 4
8254: ARRAY
8255: PPUSH
8256: LD_INT 36
8258: PPUSH
8259: LD_INT 18
8261: PPUSH
8262: CALL_OW 111
// Wait ( 0 0$02 ) ;
8266: LD_INT 70
8268: PPUSH
8269: CALL_OW 67
// num := num - 1 ;
8273: LD_ADDR_VAR 0 1
8277: PUSH
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: MINUS
8286: ST_TO_ADDR
// end ;
8287: GO 8114
// end ;
8289: LD_VAR 0 2
8293: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8294: LD_EXP 17
8298: PUSH
8299: LD_INT 0
8301: GREATER
8302: IFFALSE 8571
8304: GO 8306
8306: DISABLE
8307: LD_INT 0
8309: PPUSH
// begin enable ;
8310: ENABLE
// for i = 1 to patrol do
8311: LD_ADDR_VAR 0 1
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_EXP 17
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8569
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8329: LD_EXP 17
8333: PUSH
8334: LD_VAR 0 1
8338: ARRAY
8339: PUSH
8340: LD_EXP 17
8344: PUSH
8345: LD_VAR 0 1
8349: ARRAY
8350: PPUSH
8351: CALL_OW 300
8355: AND
8356: PUSH
8357: LD_EXP 17
8361: PUSH
8362: LD_VAR 0 1
8366: ARRAY
8367: PPUSH
8368: CALL_OW 314
8372: NOT
8373: AND
8374: IFFALSE 8524
// case i of 1 :
8376: LD_VAR 0 1
8380: PUSH
8381: LD_INT 1
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8452
8389: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8390: LD_EXP 17
8394: PUSH
8395: LD_VAR 0 1
8399: ARRAY
8400: PPUSH
8401: LD_INT 53
8403: PPUSH
8404: LD_INT 91
8406: PPUSH
8407: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8411: LD_EXP 17
8415: PUSH
8416: LD_VAR 0 1
8420: ARRAY
8421: PPUSH
8422: LD_INT 245
8424: PPUSH
8425: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8429: LD_EXP 17
8433: PUSH
8434: LD_VAR 0 1
8438: ARRAY
8439: PPUSH
8440: LD_INT 24
8442: PPUSH
8443: LD_INT 26
8445: PPUSH
8446: CALL_OW 171
// end ; 2 :
8450: GO 8524
8452: LD_INT 2
8454: DOUBLE
8455: EQUAL
8456: IFTRUE 8460
8458: GO 8523
8460: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8461: LD_EXP 17
8465: PUSH
8466: LD_VAR 0 1
8470: ARRAY
8471: PPUSH
8472: LD_INT 83
8474: PPUSH
8475: LD_INT 57
8477: PPUSH
8478: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8482: LD_EXP 17
8486: PUSH
8487: LD_VAR 0 1
8491: ARRAY
8492: PPUSH
8493: LD_INT 245
8495: PPUSH
8496: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8500: LD_EXP 17
8504: PUSH
8505: LD_VAR 0 1
8509: ARRAY
8510: PPUSH
8511: LD_INT 47
8513: PPUSH
8514: LD_INT 53
8516: PPUSH
8517: CALL_OW 171
// end ; end ;
8521: GO 8524
8523: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8524: LD_EXP 17
8528: PUSH
8529: LD_VAR 0 1
8533: ARRAY
8534: PPUSH
8535: CALL_OW 256
8539: PUSH
8540: LD_INT 1000
8542: LESS
8543: IFFALSE 8567
// patrol := patrol diff patrol [ i ] ;
8545: LD_ADDR_EXP 17
8549: PUSH
8550: LD_EXP 17
8554: PUSH
8555: LD_EXP 17
8559: PUSH
8560: LD_VAR 0 1
8564: ARRAY
8565: DIFF
8566: ST_TO_ADDR
// end ;
8567: GO 8326
8569: POP
8570: POP
// end ;
8571: PPOPN 1
8573: END
// every 0 0$10 do
8574: GO 8576
8576: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8577: LD_INT 42000
8579: PUSH
8580: LD_INT 37800
8582: PUSH
8583: LD_INT 33600
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: LD_EXP 1
8595: ARRAY
8596: PPUSH
8597: CALL_OW 67
// if not contact_am then
8601: LD_EXP 16
8605: NOT
8606: IFFALSE 8616
// contact_am := true ;
8608: LD_ADDR_EXP 16
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// end ; end_of_file
8616: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8617: LD_INT 0
8619: PPUSH
// comp_tested := false ;
8620: LD_ADDR_EXP 22
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sikorski_run := false ;
8628: LD_ADDR_EXP 23
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// InGameOn ;
8636: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8640: LD_INT 5
8642: PPUSH
8643: LD_INT 4
8645: PPUSH
8646: CALL_OW 86
// wait ( 0 0$2 ) ;
8650: LD_INT 70
8652: PPUSH
8653: CALL_OW 67
// CenterOnUnits ( commander ) ;
8657: LD_EXP 3
8661: PPUSH
8662: CALL_OW 85
// wait ( 0 0$01 ) ;
8666: LD_INT 35
8668: PPUSH
8669: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8673: LD_EXP 2
8677: PPUSH
8678: LD_STRING Dpop1
8680: PPUSH
8681: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8685: LD_EXP 3
8689: PPUSH
8690: LD_STRING Dcomm1
8692: PPUSH
8693: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8697: LD_EXP 2
8701: PPUSH
8702: LD_STRING Dpop2
8704: PPUSH
8705: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8709: LD_EXP 3
8713: PPUSH
8714: LD_STRING Dcomm2
8716: PPUSH
8717: CALL_OW 88
// InGameOff ;
8721: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8725: LD_STRING T1
8727: PPUSH
8728: CALL_OW 337
// end ;
8732: LD_VAR 0 1
8736: RET
// every 0 0$01 trigger timer > 2 2$01 do
8737: LD_EXP 24
8741: PUSH
8742: LD_INT 4235
8744: GREATER
8745: IFFALSE 8762
8747: GO 8749
8749: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8750: LD_EXP 5
8754: PPUSH
8755: LD_STRING DKap1
8757: PPUSH
8758: CALL_OW 94
// end ;
8762: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8763: LD_EXP 24
8767: PUSH
8768: LD_INT 46200
8770: PUSH
8771: LD_INT 52500
8773: PUSH
8774: LD_INT 63000
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: LD_EXP 1
8786: ARRAY
8787: GREATER
8788: IFFALSE 9155
8790: GO 8792
8792: DISABLE
8793: LD_INT 0
8795: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8796: LD_EXP 5
8800: PPUSH
8801: LD_STRING DKap2
8803: PPUSH
8804: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8808: LD_INT 10
8810: PPUSH
8811: CALL_OW 67
// Say ( commander , Dcommk ) ;
8815: LD_EXP 3
8819: PPUSH
8820: LD_STRING Dcommk
8822: PPUSH
8823: CALL_OW 88
// Wait ( 0 0$44 ) ;
8827: LD_INT 1540
8829: PPUSH
8830: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8834: LD_EXP 5
8838: PPUSH
8839: LD_INT 3
8841: PPUSH
8842: LD_INT 0
8844: PPUSH
8845: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8849: LD_EXP 5
8853: PPUSH
8854: CALL_OW 87
// Wait ( 0 0$10 ) ;
8858: LD_INT 350
8860: PPUSH
8861: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8865: LD_INT 6
8867: PUSH
8868: LD_INT 7
8870: PUSH
8871: LD_INT 8
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: LD_EXP 1
8883: ARRAY
8884: PPUSH
8885: CALL 7928 0 1
// Wait ( 2 2$00 ) ;
8889: LD_INT 4200
8891: PPUSH
8892: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8896: LD_INT 33
8898: PUSH
8899: LD_INT 2
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: LD_INT 34
8911: PUSH
8912: LD_INT 13
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 69
8931: PUSH
8932: LD_INT 3
8934: LESS
8935: IFFALSE 8946
// Wait ( 0 0$01 ) ;
8937: LD_INT 35
8939: PPUSH
8940: CALL_OW 67
8944: GO 8896
// uc_side := 4 ;
8946: LD_ADDR_OWVAR 20
8950: PUSH
8951: LD_INT 4
8953: ST_TO_ADDR
// uc_nation := 1 ;
8954: LD_ADDR_OWVAR 21
8958: PUSH
8959: LD_INT 1
8961: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8962: LD_ADDR_VAR 0 1
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_INT 4
8974: PUSH
8975: LD_INT 5
8977: PUSH
8978: LD_INT 6
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: LD_EXP 1
8990: ARRAY
8991: PUSH
8992: FOR_TO
8993: IFFALSE 9035
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
8995: LD_INT 1
8997: PPUSH
8998: LD_INT 5
9000: PUSH
9001: LD_INT 6
9003: PUSH
9004: LD_INT 7
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: PUSH
9012: LD_EXP 1
9016: ARRAY
9017: PPUSH
9018: CALL 734 0 2
9022: PPUSH
9023: LD_INT 4
9025: PPUSH
9026: LD_INT 0
9028: PPUSH
9029: CALL_OW 49
9033: GO 8992
9035: POP
9036: POP
// sikorski_ar := true ;
9037: LD_ADDR_EXP 12
9041: PUSH
9042: LD_INT 1
9044: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9045: LD_EXP 9
9049: PPUSH
9050: LD_STRING DSik1
9052: PPUSH
9053: CALL_OW 94
// Wait ( 0 0$30 ) ;
9057: LD_INT 1050
9059: PPUSH
9060: CALL_OW 67
// uc_side := 4 ;
9064: LD_ADDR_OWVAR 20
9068: PUSH
9069: LD_INT 4
9071: ST_TO_ADDR
// uc_nation := 1 ;
9072: LD_ADDR_OWVAR 21
9076: PUSH
9077: LD_INT 1
9079: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_INT 3
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: LD_INT 4
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_EXP 1
9108: ARRAY
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9153
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9113: LD_INT 1
9115: PPUSH
9116: LD_INT 5
9118: PUSH
9119: LD_INT 6
9121: PUSH
9122: LD_INT 7
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: PUSH
9130: LD_EXP 1
9134: ARRAY
9135: PPUSH
9136: CALL 734 0 2
9140: PPUSH
9141: LD_INT 13
9143: PPUSH
9144: LD_INT 0
9146: PPUSH
9147: CALL_OW 49
9151: GO 9110
9153: POP
9154: POP
// end ;
9155: PPOPN 1
9157: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9158: LD_EXP 9
9162: PPUSH
9163: CALL_OW 256
9167: PUSH
9168: LD_INT 650
9170: LESS
9171: IFFALSE 9253
9173: GO 9175
9175: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9176: LD_EXP 9
9180: PPUSH
9181: LD_STRING DSik2
9183: PPUSH
9184: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9188: LD_EXP 9
9192: PPUSH
9193: CALL_OW 300
9197: IFFALSE 9253
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9199: LD_EXP 9
9203: PPUSH
9204: LD_INT 2
9206: PPUSH
9207: CALL_OW 113
// Wait ( 0 0$01 ) ;
9211: LD_INT 35
9213: PPUSH
9214: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9218: LD_EXP 9
9222: PPUSH
9223: LD_INT 2
9225: PPUSH
9226: CALL_OW 308
9230: IFFALSE 9251
// begin RemoveUnit ( sikorski ) ;
9232: LD_EXP 9
9236: PPUSH
9237: CALL_OW 64
// break ;
9241: GO 9253
// sikorski_run := true ;
9243: LD_ADDR_EXP 23
9247: PUSH
9248: LD_INT 1
9250: ST_TO_ADDR
// end ; end ;
9251: GO 9188
// end ;
9253: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9254: LD_EXP 9
9258: PPUSH
9259: CALL_OW 256
9263: PUSH
9264: LD_INT 1000
9266: LESS
9267: IFFALSE 9284
9269: GO 9271
9271: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9272: LD_EXP 9
9276: PPUSH
9277: LD_STRING DSkik3
9279: PPUSH
9280: CALL_OW 88
9284: END
// every 1 1$45 + 0 0$15 do
9285: GO 9287
9287: DISABLE
// begin enable ;
9288: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9289: LD_INT 1
9291: PPUSH
9292: LD_INT 5
9294: PPUSH
9295: CALL_OW 12
9299: PPUSH
9300: LD_INT 8
9302: PPUSH
9303: LD_INT 1
9305: PPUSH
9306: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9310: LD_INT 350
9312: PPUSH
9313: LD_INT 1295
9315: PPUSH
9316: CALL_OW 12
9320: PPUSH
9321: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9325: LD_INT 1
9327: PPUSH
9328: LD_INT 5
9330: PPUSH
9331: CALL_OW 12
9335: PPUSH
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9343: LD_INT 350
9345: PPUSH
9346: LD_INT 1050
9348: PPUSH
9349: CALL_OW 12
9353: PPUSH
9354: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9358: LD_EXP 24
9362: PUSH
9363: LD_INT 25200
9365: PUSH
9366: LD_INT 23100
9368: PUSH
9369: LD_INT 21000
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PUSH
9377: LD_EXP 1
9381: ARRAY
9382: LESSEQUAL
9383: IFFALSE 9406
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9385: LD_INT 1
9387: PPUSH
9388: LD_INT 5
9390: PPUSH
9391: CALL_OW 12
9395: PPUSH
9396: LD_INT 8
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 55
// end ;
9406: END
// export timer ; every 1 do
9407: GO 9409
9409: DISABLE
// timer := 0 0$00 ;
9410: LD_ADDR_EXP 24
9414: PUSH
9415: LD_INT 0
9417: ST_TO_ADDR
9418: END
// every 0 0$01 do
9419: GO 9421
9421: DISABLE
// begin enable ;
9422: ENABLE
// Display_Strings := [ #tick , timer ] ;
9423: LD_ADDR_OWVAR 47
9427: PUSH
9428: LD_STRING #tick
9430: PUSH
9431: LD_EXP 24
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9440: LD_ADDR_EXP 24
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: LD_INT 35
9452: PLUS
9453: ST_TO_ADDR
// end ; end_of_file
9454: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
9455: LD_INT 0
9457: PPUSH
// ar_miner := 81 ;
9458: LD_ADDR_EXP 32
9462: PUSH
9463: LD_INT 81
9465: ST_TO_ADDR
// ar_crane := 88 ;
9466: LD_ADDR_EXP 31
9470: PUSH
9471: LD_INT 88
9473: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9474: LD_ADDR_EXP 26
9478: PUSH
9479: LD_INT 89
9481: ST_TO_ADDR
// us_hack := 99 ;
9482: LD_ADDR_EXP 27
9486: PUSH
9487: LD_INT 99
9489: ST_TO_ADDR
// us_artillery := 97 ;
9490: LD_ADDR_EXP 28
9494: PUSH
9495: LD_INT 97
9497: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9498: LD_ADDR_EXP 29
9502: PUSH
9503: LD_INT 91
9505: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
9506: LD_ADDR_EXP 30
9510: PUSH
9511: LD_INT 92
9513: ST_TO_ADDR
// ru_radar := 98 ;
9514: LD_ADDR_EXP 25
9518: PUSH
9519: LD_INT 98
9521: ST_TO_ADDR
// tech_Artillery := 80 ;
9522: LD_ADDR_EXP 33
9526: PUSH
9527: LD_INT 80
9529: ST_TO_ADDR
// tech_RadMat := 81 ;
9530: LD_ADDR_EXP 34
9534: PUSH
9535: LD_INT 81
9537: ST_TO_ADDR
// tech_BasicTools := 82 ;
9538: LD_ADDR_EXP 35
9542: PUSH
9543: LD_INT 82
9545: ST_TO_ADDR
// tech_Cargo := 83 ;
9546: LD_ADDR_EXP 36
9550: PUSH
9551: LD_INT 83
9553: ST_TO_ADDR
// tech_Track := 84 ;
9554: LD_ADDR_EXP 37
9558: PUSH
9559: LD_INT 84
9561: ST_TO_ADDR
// tech_Crane := 85 ;
9562: LD_ADDR_EXP 38
9566: PUSH
9567: LD_INT 85
9569: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9570: LD_ADDR_EXP 39
9574: PUSH
9575: LD_INT 86
9577: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9578: LD_ADDR_EXP 40
9582: PUSH
9583: LD_INT 87
9585: ST_TO_ADDR
// end ;
9586: LD_VAR 0 1
9590: RET
// every 1 do
9591: GO 9593
9593: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
9594: CALL 9455 0 0
9598: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
9599: LD_VAR 0 2
9603: PUSH
9604: LD_INT 100
9606: EQUAL
9607: IFFALSE 10556
// begin if not StreamModeActive then
9609: LD_EXP 41
9613: NOT
9614: IFFALSE 9624
// StreamModeActive := true ;
9616: LD_ADDR_EXP 41
9620: PUSH
9621: LD_INT 1
9623: ST_TO_ADDR
// if p3 = 0 then
9624: LD_VAR 0 3
9628: PUSH
9629: LD_INT 0
9631: EQUAL
9632: IFFALSE 9638
// InitStreamMode ;
9634: CALL 10714 0 0
// if p3 = 1 then
9638: LD_VAR 0 3
9642: PUSH
9643: LD_INT 1
9645: EQUAL
9646: IFFALSE 9656
// sRocket := true ;
9648: LD_ADDR_EXP 46
9652: PUSH
9653: LD_INT 1
9655: ST_TO_ADDR
// if p3 = 2 then
9656: LD_VAR 0 3
9660: PUSH
9661: LD_INT 2
9663: EQUAL
9664: IFFALSE 9674
// sSpeed := true ;
9666: LD_ADDR_EXP 45
9670: PUSH
9671: LD_INT 1
9673: ST_TO_ADDR
// if p3 = 3 then
9674: LD_VAR 0 3
9678: PUSH
9679: LD_INT 3
9681: EQUAL
9682: IFFALSE 9692
// sEngine := true ;
9684: LD_ADDR_EXP 47
9688: PUSH
9689: LD_INT 1
9691: ST_TO_ADDR
// if p3 = 4 then
9692: LD_VAR 0 3
9696: PUSH
9697: LD_INT 4
9699: EQUAL
9700: IFFALSE 9710
// sSpec := true ;
9702: LD_ADDR_EXP 44
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// if p3 = 5 then
9710: LD_VAR 0 3
9714: PUSH
9715: LD_INT 5
9717: EQUAL
9718: IFFALSE 9728
// sLevel := true ;
9720: LD_ADDR_EXP 48
9724: PUSH
9725: LD_INT 1
9727: ST_TO_ADDR
// if p3 = 6 then
9728: LD_VAR 0 3
9732: PUSH
9733: LD_INT 6
9735: EQUAL
9736: IFFALSE 9746
// sArmoury := true ;
9738: LD_ADDR_EXP 49
9742: PUSH
9743: LD_INT 1
9745: ST_TO_ADDR
// if p3 = 7 then
9746: LD_VAR 0 3
9750: PUSH
9751: LD_INT 7
9753: EQUAL
9754: IFFALSE 9764
// sRadar := true ;
9756: LD_ADDR_EXP 50
9760: PUSH
9761: LD_INT 1
9763: ST_TO_ADDR
// if p3 = 8 then
9764: LD_VAR 0 3
9768: PUSH
9769: LD_INT 8
9771: EQUAL
9772: IFFALSE 9782
// sBunker := true ;
9774: LD_ADDR_EXP 51
9778: PUSH
9779: LD_INT 1
9781: ST_TO_ADDR
// if p3 = 9 then
9782: LD_VAR 0 3
9786: PUSH
9787: LD_INT 9
9789: EQUAL
9790: IFFALSE 9800
// sHack := true ;
9792: LD_ADDR_EXP 52
9796: PUSH
9797: LD_INT 1
9799: ST_TO_ADDR
// if p3 = 10 then
9800: LD_VAR 0 3
9804: PUSH
9805: LD_INT 10
9807: EQUAL
9808: IFFALSE 9818
// sFire := true ;
9810: LD_ADDR_EXP 53
9814: PUSH
9815: LD_INT 1
9817: ST_TO_ADDR
// if p3 = 11 then
9818: LD_VAR 0 3
9822: PUSH
9823: LD_INT 11
9825: EQUAL
9826: IFFALSE 9836
// sRefresh := true ;
9828: LD_ADDR_EXP 54
9832: PUSH
9833: LD_INT 1
9835: ST_TO_ADDR
// if p3 = 12 then
9836: LD_VAR 0 3
9840: PUSH
9841: LD_INT 12
9843: EQUAL
9844: IFFALSE 9854
// sExp := true ;
9846: LD_ADDR_EXP 55
9850: PUSH
9851: LD_INT 1
9853: ST_TO_ADDR
// if p3 = 13 then
9854: LD_VAR 0 3
9858: PUSH
9859: LD_INT 13
9861: EQUAL
9862: IFFALSE 9872
// sDepot := true ;
9864: LD_ADDR_EXP 56
9868: PUSH
9869: LD_INT 1
9871: ST_TO_ADDR
// if p3 = 14 then
9872: LD_VAR 0 3
9876: PUSH
9877: LD_INT 14
9879: EQUAL
9880: IFFALSE 9890
// sFlag := true ;
9882: LD_ADDR_EXP 57
9886: PUSH
9887: LD_INT 1
9889: ST_TO_ADDR
// if p3 = 15 then
9890: LD_VAR 0 3
9894: PUSH
9895: LD_INT 15
9897: EQUAL
9898: IFFALSE 9908
// sKamikadze := true ;
9900: LD_ADDR_EXP 65
9904: PUSH
9905: LD_INT 1
9907: ST_TO_ADDR
// if p3 = 16 then
9908: LD_VAR 0 3
9912: PUSH
9913: LD_INT 16
9915: EQUAL
9916: IFFALSE 9926
// sTroll := true ;
9918: LD_ADDR_EXP 66
9922: PUSH
9923: LD_INT 1
9925: ST_TO_ADDR
// if p3 = 17 then
9926: LD_VAR 0 3
9930: PUSH
9931: LD_INT 17
9933: EQUAL
9934: IFFALSE 9944
// sSlow := true ;
9936: LD_ADDR_EXP 67
9940: PUSH
9941: LD_INT 1
9943: ST_TO_ADDR
// if p3 = 18 then
9944: LD_VAR 0 3
9948: PUSH
9949: LD_INT 18
9951: EQUAL
9952: IFFALSE 9962
// sLack := true ;
9954: LD_ADDR_EXP 68
9958: PUSH
9959: LD_INT 1
9961: ST_TO_ADDR
// if p3 = 19 then
9962: LD_VAR 0 3
9966: PUSH
9967: LD_INT 19
9969: EQUAL
9970: IFFALSE 9980
// sTank := true ;
9972: LD_ADDR_EXP 70
9976: PUSH
9977: LD_INT 1
9979: ST_TO_ADDR
// if p3 = 20 then
9980: LD_VAR 0 3
9984: PUSH
9985: LD_INT 20
9987: EQUAL
9988: IFFALSE 9998
// sRemote := true ;
9990: LD_ADDR_EXP 71
9994: PUSH
9995: LD_INT 1
9997: ST_TO_ADDR
// if p3 = 21 then
9998: LD_VAR 0 3
10002: PUSH
10003: LD_INT 21
10005: EQUAL
10006: IFFALSE 10016
// sPowell := true ;
10008: LD_ADDR_EXP 72
10012: PUSH
10013: LD_INT 1
10015: ST_TO_ADDR
// if p3 = 22 then
10016: LD_VAR 0 3
10020: PUSH
10021: LD_INT 22
10023: EQUAL
10024: IFFALSE 10034
// sTeleport := true ;
10026: LD_ADDR_EXP 75
10030: PUSH
10031: LD_INT 1
10033: ST_TO_ADDR
// if p3 = 23 then
10034: LD_VAR 0 3
10038: PUSH
10039: LD_INT 23
10041: EQUAL
10042: IFFALSE 10052
// sOilTower := true ;
10044: LD_ADDR_EXP 77
10048: PUSH
10049: LD_INT 1
10051: ST_TO_ADDR
// if p3 = 24 then
10052: LD_VAR 0 3
10056: PUSH
10057: LD_INT 24
10059: EQUAL
10060: IFFALSE 10070
// sShovel := true ;
10062: LD_ADDR_EXP 78
10066: PUSH
10067: LD_INT 1
10069: ST_TO_ADDR
// if p3 = 25 then
10070: LD_VAR 0 3
10074: PUSH
10075: LD_INT 25
10077: EQUAL
10078: IFFALSE 10088
// sSheik := true ;
10080: LD_ADDR_EXP 79
10084: PUSH
10085: LD_INT 1
10087: ST_TO_ADDR
// if p3 = 26 then
10088: LD_VAR 0 3
10092: PUSH
10093: LD_INT 26
10095: EQUAL
10096: IFFALSE 10106
// sEarthquake := true ;
10098: LD_ADDR_EXP 81
10102: PUSH
10103: LD_INT 1
10105: ST_TO_ADDR
// if p3 = 27 then
10106: LD_VAR 0 3
10110: PUSH
10111: LD_INT 27
10113: EQUAL
10114: IFFALSE 10124
// sAI := true ;
10116: LD_ADDR_EXP 82
10120: PUSH
10121: LD_INT 1
10123: ST_TO_ADDR
// if p3 = 28 then
10124: LD_VAR 0 3
10128: PUSH
10129: LD_INT 28
10131: EQUAL
10132: IFFALSE 10142
// sCargo := true ;
10134: LD_ADDR_EXP 85
10138: PUSH
10139: LD_INT 1
10141: ST_TO_ADDR
// if p3 = 29 then
10142: LD_VAR 0 3
10146: PUSH
10147: LD_INT 29
10149: EQUAL
10150: IFFALSE 10160
// sDLaser := true ;
10152: LD_ADDR_EXP 86
10156: PUSH
10157: LD_INT 1
10159: ST_TO_ADDR
// if p3 = 30 then
10160: LD_VAR 0 3
10164: PUSH
10165: LD_INT 30
10167: EQUAL
10168: IFFALSE 10178
// sExchange := true ;
10170: LD_ADDR_EXP 87
10174: PUSH
10175: LD_INT 1
10177: ST_TO_ADDR
// if p3 = 31 then
10178: LD_VAR 0 3
10182: PUSH
10183: LD_INT 31
10185: EQUAL
10186: IFFALSE 10196
// sFac := true ;
10188: LD_ADDR_EXP 88
10192: PUSH
10193: LD_INT 1
10195: ST_TO_ADDR
// if p3 = 32 then
10196: LD_VAR 0 3
10200: PUSH
10201: LD_INT 32
10203: EQUAL
10204: IFFALSE 10214
// sPower := true ;
10206: LD_ADDR_EXP 89
10210: PUSH
10211: LD_INT 1
10213: ST_TO_ADDR
// if p3 = 33 then
10214: LD_VAR 0 3
10218: PUSH
10219: LD_INT 33
10221: EQUAL
10222: IFFALSE 10232
// sRandom := true ;
10224: LD_ADDR_EXP 90
10228: PUSH
10229: LD_INT 1
10231: ST_TO_ADDR
// if p3 = 34 then
10232: LD_VAR 0 3
10236: PUSH
10237: LD_INT 34
10239: EQUAL
10240: IFFALSE 10250
// sShield := true ;
10242: LD_ADDR_EXP 91
10246: PUSH
10247: LD_INT 1
10249: ST_TO_ADDR
// if p3 = 35 then
10250: LD_VAR 0 3
10254: PUSH
10255: LD_INT 35
10257: EQUAL
10258: IFFALSE 10268
// sTime := true ;
10260: LD_ADDR_EXP 92
10264: PUSH
10265: LD_INT 1
10267: ST_TO_ADDR
// if p3 = 36 then
10268: LD_VAR 0 3
10272: PUSH
10273: LD_INT 36
10275: EQUAL
10276: IFFALSE 10286
// sTools := true ;
10278: LD_ADDR_EXP 93
10282: PUSH
10283: LD_INT 1
10285: ST_TO_ADDR
// if p3 = 101 then
10286: LD_VAR 0 3
10290: PUSH
10291: LD_INT 101
10293: EQUAL
10294: IFFALSE 10304
// sSold := true ;
10296: LD_ADDR_EXP 58
10300: PUSH
10301: LD_INT 1
10303: ST_TO_ADDR
// if p3 = 102 then
10304: LD_VAR 0 3
10308: PUSH
10309: LD_INT 102
10311: EQUAL
10312: IFFALSE 10322
// sDiff := true ;
10314: LD_ADDR_EXP 59
10318: PUSH
10319: LD_INT 1
10321: ST_TO_ADDR
// if p3 = 103 then
10322: LD_VAR 0 3
10326: PUSH
10327: LD_INT 103
10329: EQUAL
10330: IFFALSE 10340
// sFog := true ;
10332: LD_ADDR_EXP 62
10336: PUSH
10337: LD_INT 1
10339: ST_TO_ADDR
// if p3 = 104 then
10340: LD_VAR 0 3
10344: PUSH
10345: LD_INT 104
10347: EQUAL
10348: IFFALSE 10358
// sReset := true ;
10350: LD_ADDR_EXP 63
10354: PUSH
10355: LD_INT 1
10357: ST_TO_ADDR
// if p3 = 105 then
10358: LD_VAR 0 3
10362: PUSH
10363: LD_INT 105
10365: EQUAL
10366: IFFALSE 10376
// sSun := true ;
10368: LD_ADDR_EXP 64
10372: PUSH
10373: LD_INT 1
10375: ST_TO_ADDR
// if p3 = 106 then
10376: LD_VAR 0 3
10380: PUSH
10381: LD_INT 106
10383: EQUAL
10384: IFFALSE 10394
// sTiger := true ;
10386: LD_ADDR_EXP 60
10390: PUSH
10391: LD_INT 1
10393: ST_TO_ADDR
// if p3 = 107 then
10394: LD_VAR 0 3
10398: PUSH
10399: LD_INT 107
10401: EQUAL
10402: IFFALSE 10412
// sBomb := true ;
10404: LD_ADDR_EXP 61
10408: PUSH
10409: LD_INT 1
10411: ST_TO_ADDR
// if p3 = 108 then
10412: LD_VAR 0 3
10416: PUSH
10417: LD_INT 108
10419: EQUAL
10420: IFFALSE 10430
// sWound := true ;
10422: LD_ADDR_EXP 69
10426: PUSH
10427: LD_INT 1
10429: ST_TO_ADDR
// if p3 = 109 then
10430: LD_VAR 0 3
10434: PUSH
10435: LD_INT 109
10437: EQUAL
10438: IFFALSE 10448
// sBetray := true ;
10440: LD_ADDR_EXP 73
10444: PUSH
10445: LD_INT 1
10447: ST_TO_ADDR
// if p3 = 110 then
10448: LD_VAR 0 3
10452: PUSH
10453: LD_INT 110
10455: EQUAL
10456: IFFALSE 10466
// sContamin := true ;
10458: LD_ADDR_EXP 74
10462: PUSH
10463: LD_INT 1
10465: ST_TO_ADDR
// if p3 = 111 then
10466: LD_VAR 0 3
10470: PUSH
10471: LD_INT 111
10473: EQUAL
10474: IFFALSE 10484
// sOil := true ;
10476: LD_ADDR_EXP 76
10480: PUSH
10481: LD_INT 1
10483: ST_TO_ADDR
// if p3 = 112 then
10484: LD_VAR 0 3
10488: PUSH
10489: LD_INT 112
10491: EQUAL
10492: IFFALSE 10502
// sStu := true ;
10494: LD_ADDR_EXP 80
10498: PUSH
10499: LD_INT 1
10501: ST_TO_ADDR
// if p3 = 113 then
10502: LD_VAR 0 3
10506: PUSH
10507: LD_INT 113
10509: EQUAL
10510: IFFALSE 10520
// sBazooka := true ;
10512: LD_ADDR_EXP 83
10516: PUSH
10517: LD_INT 1
10519: ST_TO_ADDR
// if p3 = 114 then
10520: LD_VAR 0 3
10524: PUSH
10525: LD_INT 114
10527: EQUAL
10528: IFFALSE 10538
// sMortar := true ;
10530: LD_ADDR_EXP 84
10534: PUSH
10535: LD_INT 1
10537: ST_TO_ADDR
// if p3 = 115 then
10538: LD_VAR 0 3
10542: PUSH
10543: LD_INT 115
10545: EQUAL
10546: IFFALSE 10556
// sRanger := true ;
10548: LD_ADDR_EXP 94
10552: PUSH
10553: LD_INT 1
10555: ST_TO_ADDR
// end ; if p2 = 101 then
10556: LD_VAR 0 2
10560: PUSH
10561: LD_INT 101
10563: EQUAL
10564: IFFALSE 10692
// begin case p3 of 1 :
10566: LD_VAR 0 3
10570: PUSH
10571: LD_INT 1
10573: DOUBLE
10574: EQUAL
10575: IFTRUE 10579
10577: GO 10586
10579: POP
// hHackUnlimitedResources ; 2 :
10580: CALL 21727 0 0
10584: GO 10692
10586: LD_INT 2
10588: DOUBLE
10589: EQUAL
10590: IFTRUE 10594
10592: GO 10601
10594: POP
// hHackSetLevel10 ; 3 :
10595: CALL 21860 0 0
10599: GO 10692
10601: LD_INT 3
10603: DOUBLE
10604: EQUAL
10605: IFTRUE 10609
10607: GO 10616
10609: POP
// hHackSetLevel10YourUnits ; 4 :
10610: CALL 21945 0 0
10614: GO 10692
10616: LD_INT 4
10618: DOUBLE
10619: EQUAL
10620: IFTRUE 10624
10622: GO 10631
10624: POP
// hHackInvincible ; 5 :
10625: CALL 22393 0 0
10629: GO 10692
10631: LD_INT 5
10633: DOUBLE
10634: EQUAL
10635: IFTRUE 10639
10637: GO 10646
10639: POP
// hHackInvisible ; 6 :
10640: CALL 22504 0 0
10644: GO 10692
10646: LD_INT 6
10648: DOUBLE
10649: EQUAL
10650: IFTRUE 10654
10652: GO 10661
10654: POP
// hHackChangeYourSide ; 7 :
10655: CALL 22561 0 0
10659: GO 10692
10661: LD_INT 7
10663: DOUBLE
10664: EQUAL
10665: IFTRUE 10669
10667: GO 10676
10669: POP
// hHackChangeUnitSide ; 8 :
10670: CALL 22603 0 0
10674: GO 10692
10676: LD_INT 8
10678: DOUBLE
10679: EQUAL
10680: IFTRUE 10684
10682: GO 10691
10684: POP
// hHackFog ; end ;
10685: CALL 22704 0 0
10689: GO 10692
10691: POP
// end ; end ;
10692: PPOPN 6
10694: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10695: GO 10697
10697: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10698: LD_STRING initStreamRollete();
10700: PPUSH
10701: CALL_OW 559
// InitStreamMode ;
10705: CALL 10714 0 0
// DefineStreamItems ( ) ;
10709: CALL 11154 0 0
// end ;
10713: END
// function InitStreamMode ; begin
10714: LD_INT 0
10716: PPUSH
// streamModeActive := false ;
10717: LD_ADDR_EXP 41
10721: PUSH
10722: LD_INT 0
10724: ST_TO_ADDR
// normalCounter := 36 ;
10725: LD_ADDR_EXP 42
10729: PUSH
10730: LD_INT 36
10732: ST_TO_ADDR
// hardcoreCounter := 16 ;
10733: LD_ADDR_EXP 43
10737: PUSH
10738: LD_INT 16
10740: ST_TO_ADDR
// sRocket := false ;
10741: LD_ADDR_EXP 46
10745: PUSH
10746: LD_INT 0
10748: ST_TO_ADDR
// sSpeed := false ;
10749: LD_ADDR_EXP 45
10753: PUSH
10754: LD_INT 0
10756: ST_TO_ADDR
// sEngine := false ;
10757: LD_ADDR_EXP 47
10761: PUSH
10762: LD_INT 0
10764: ST_TO_ADDR
// sSpec := false ;
10765: LD_ADDR_EXP 44
10769: PUSH
10770: LD_INT 0
10772: ST_TO_ADDR
// sLevel := false ;
10773: LD_ADDR_EXP 48
10777: PUSH
10778: LD_INT 0
10780: ST_TO_ADDR
// sArmoury := false ;
10781: LD_ADDR_EXP 49
10785: PUSH
10786: LD_INT 0
10788: ST_TO_ADDR
// sRadar := false ;
10789: LD_ADDR_EXP 50
10793: PUSH
10794: LD_INT 0
10796: ST_TO_ADDR
// sBunker := false ;
10797: LD_ADDR_EXP 51
10801: PUSH
10802: LD_INT 0
10804: ST_TO_ADDR
// sHack := false ;
10805: LD_ADDR_EXP 52
10809: PUSH
10810: LD_INT 0
10812: ST_TO_ADDR
// sFire := false ;
10813: LD_ADDR_EXP 53
10817: PUSH
10818: LD_INT 0
10820: ST_TO_ADDR
// sRefresh := false ;
10821: LD_ADDR_EXP 54
10825: PUSH
10826: LD_INT 0
10828: ST_TO_ADDR
// sExp := false ;
10829: LD_ADDR_EXP 55
10833: PUSH
10834: LD_INT 0
10836: ST_TO_ADDR
// sDepot := false ;
10837: LD_ADDR_EXP 56
10841: PUSH
10842: LD_INT 0
10844: ST_TO_ADDR
// sFlag := false ;
10845: LD_ADDR_EXP 57
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// sKamikadze := false ;
10853: LD_ADDR_EXP 65
10857: PUSH
10858: LD_INT 0
10860: ST_TO_ADDR
// sTroll := false ;
10861: LD_ADDR_EXP 66
10865: PUSH
10866: LD_INT 0
10868: ST_TO_ADDR
// sSlow := false ;
10869: LD_ADDR_EXP 67
10873: PUSH
10874: LD_INT 0
10876: ST_TO_ADDR
// sLack := false ;
10877: LD_ADDR_EXP 68
10881: PUSH
10882: LD_INT 0
10884: ST_TO_ADDR
// sTank := false ;
10885: LD_ADDR_EXP 70
10889: PUSH
10890: LD_INT 0
10892: ST_TO_ADDR
// sRemote := false ;
10893: LD_ADDR_EXP 71
10897: PUSH
10898: LD_INT 0
10900: ST_TO_ADDR
// sPowell := false ;
10901: LD_ADDR_EXP 72
10905: PUSH
10906: LD_INT 0
10908: ST_TO_ADDR
// sTeleport := false ;
10909: LD_ADDR_EXP 75
10913: PUSH
10914: LD_INT 0
10916: ST_TO_ADDR
// sOilTower := false ;
10917: LD_ADDR_EXP 77
10921: PUSH
10922: LD_INT 0
10924: ST_TO_ADDR
// sShovel := false ;
10925: LD_ADDR_EXP 78
10929: PUSH
10930: LD_INT 0
10932: ST_TO_ADDR
// sSheik := false ;
10933: LD_ADDR_EXP 79
10937: PUSH
10938: LD_INT 0
10940: ST_TO_ADDR
// sEarthquake := false ;
10941: LD_ADDR_EXP 81
10945: PUSH
10946: LD_INT 0
10948: ST_TO_ADDR
// sAI := false ;
10949: LD_ADDR_EXP 82
10953: PUSH
10954: LD_INT 0
10956: ST_TO_ADDR
// sCargo := false ;
10957: LD_ADDR_EXP 85
10961: PUSH
10962: LD_INT 0
10964: ST_TO_ADDR
// sDLaser := false ;
10965: LD_ADDR_EXP 86
10969: PUSH
10970: LD_INT 0
10972: ST_TO_ADDR
// sExchange := false ;
10973: LD_ADDR_EXP 87
10977: PUSH
10978: LD_INT 0
10980: ST_TO_ADDR
// sFac := false ;
10981: LD_ADDR_EXP 88
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// sPower := false ;
10989: LD_ADDR_EXP 89
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// sRandom := false ;
10997: LD_ADDR_EXP 90
11001: PUSH
11002: LD_INT 0
11004: ST_TO_ADDR
// sShield := false ;
11005: LD_ADDR_EXP 91
11009: PUSH
11010: LD_INT 0
11012: ST_TO_ADDR
// sTime := false ;
11013: LD_ADDR_EXP 92
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// sTools := false ;
11021: LD_ADDR_EXP 93
11025: PUSH
11026: LD_INT 0
11028: ST_TO_ADDR
// sSold := false ;
11029: LD_ADDR_EXP 58
11033: PUSH
11034: LD_INT 0
11036: ST_TO_ADDR
// sDiff := false ;
11037: LD_ADDR_EXP 59
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// sFog := false ;
11045: LD_ADDR_EXP 62
11049: PUSH
11050: LD_INT 0
11052: ST_TO_ADDR
// sReset := false ;
11053: LD_ADDR_EXP 63
11057: PUSH
11058: LD_INT 0
11060: ST_TO_ADDR
// sSun := false ;
11061: LD_ADDR_EXP 64
11065: PUSH
11066: LD_INT 0
11068: ST_TO_ADDR
// sTiger := false ;
11069: LD_ADDR_EXP 60
11073: PUSH
11074: LD_INT 0
11076: ST_TO_ADDR
// sBomb := false ;
11077: LD_ADDR_EXP 61
11081: PUSH
11082: LD_INT 0
11084: ST_TO_ADDR
// sWound := false ;
11085: LD_ADDR_EXP 69
11089: PUSH
11090: LD_INT 0
11092: ST_TO_ADDR
// sBetray := false ;
11093: LD_ADDR_EXP 73
11097: PUSH
11098: LD_INT 0
11100: ST_TO_ADDR
// sContamin := false ;
11101: LD_ADDR_EXP 74
11105: PUSH
11106: LD_INT 0
11108: ST_TO_ADDR
// sOil := false ;
11109: LD_ADDR_EXP 76
11113: PUSH
11114: LD_INT 0
11116: ST_TO_ADDR
// sStu := false ;
11117: LD_ADDR_EXP 80
11121: PUSH
11122: LD_INT 0
11124: ST_TO_ADDR
// sBazooka := false ;
11125: LD_ADDR_EXP 83
11129: PUSH
11130: LD_INT 0
11132: ST_TO_ADDR
// sMortar := false ;
11133: LD_ADDR_EXP 84
11137: PUSH
11138: LD_INT 0
11140: ST_TO_ADDR
// sRanger := false ;
11141: LD_ADDR_EXP 94
11145: PUSH
11146: LD_INT 0
11148: ST_TO_ADDR
// end ;
11149: LD_VAR 0 1
11153: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11154: LD_INT 0
11156: PPUSH
11157: PPUSH
11158: PPUSH
11159: PPUSH
11160: PPUSH
// result := [ ] ;
11161: LD_ADDR_VAR 0 1
11165: PUSH
11166: EMPTY
11167: ST_TO_ADDR
// if campaign_id = 1 then
11168: LD_OWVAR 69
11172: PUSH
11173: LD_INT 1
11175: EQUAL
11176: IFFALSE 14114
// begin case mission_number of 1 :
11178: LD_OWVAR 70
11182: PUSH
11183: LD_INT 1
11185: DOUBLE
11186: EQUAL
11187: IFTRUE 11191
11189: GO 11255
11191: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11192: LD_ADDR_VAR 0 1
11196: PUSH
11197: LD_INT 2
11199: PUSH
11200: LD_INT 4
11202: PUSH
11203: LD_INT 11
11205: PUSH
11206: LD_INT 12
11208: PUSH
11209: LD_INT 15
11211: PUSH
11212: LD_INT 16
11214: PUSH
11215: LD_INT 22
11217: PUSH
11218: LD_INT 23
11220: PUSH
11221: LD_INT 26
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 101
11237: PUSH
11238: LD_INT 102
11240: PUSH
11241: LD_INT 106
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: LIST
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: ST_TO_ADDR
11253: GO 14112
11255: LD_INT 2
11257: DOUBLE
11258: EQUAL
11259: IFTRUE 11263
11261: GO 11335
11263: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11264: LD_ADDR_VAR 0 1
11268: PUSH
11269: LD_INT 2
11271: PUSH
11272: LD_INT 4
11274: PUSH
11275: LD_INT 11
11277: PUSH
11278: LD_INT 12
11280: PUSH
11281: LD_INT 15
11283: PUSH
11284: LD_INT 16
11286: PUSH
11287: LD_INT 22
11289: PUSH
11290: LD_INT 23
11292: PUSH
11293: LD_INT 26
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 101
11309: PUSH
11310: LD_INT 102
11312: PUSH
11313: LD_INT 105
11315: PUSH
11316: LD_INT 106
11318: PUSH
11319: LD_INT 108
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: ST_TO_ADDR
11333: GO 14112
11335: LD_INT 3
11337: DOUBLE
11338: EQUAL
11339: IFTRUE 11343
11341: GO 11419
11343: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11344: LD_ADDR_VAR 0 1
11348: PUSH
11349: LD_INT 2
11351: PUSH
11352: LD_INT 4
11354: PUSH
11355: LD_INT 5
11357: PUSH
11358: LD_INT 11
11360: PUSH
11361: LD_INT 12
11363: PUSH
11364: LD_INT 15
11366: PUSH
11367: LD_INT 16
11369: PUSH
11370: LD_INT 22
11372: PUSH
11373: LD_INT 26
11375: PUSH
11376: LD_INT 36
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: PUSH
11391: LD_INT 101
11393: PUSH
11394: LD_INT 102
11396: PUSH
11397: LD_INT 105
11399: PUSH
11400: LD_INT 106
11402: PUSH
11403: LD_INT 108
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: ST_TO_ADDR
11417: GO 14112
11419: LD_INT 4
11421: DOUBLE
11422: EQUAL
11423: IFTRUE 11427
11425: GO 11511
11427: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11428: LD_ADDR_VAR 0 1
11432: PUSH
11433: LD_INT 2
11435: PUSH
11436: LD_INT 4
11438: PUSH
11439: LD_INT 5
11441: PUSH
11442: LD_INT 8
11444: PUSH
11445: LD_INT 11
11447: PUSH
11448: LD_INT 12
11450: PUSH
11451: LD_INT 15
11453: PUSH
11454: LD_INT 16
11456: PUSH
11457: LD_INT 22
11459: PUSH
11460: LD_INT 23
11462: PUSH
11463: LD_INT 26
11465: PUSH
11466: LD_INT 36
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 101
11485: PUSH
11486: LD_INT 102
11488: PUSH
11489: LD_INT 105
11491: PUSH
11492: LD_INT 106
11494: PUSH
11495: LD_INT 108
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: ST_TO_ADDR
11509: GO 14112
11511: LD_INT 5
11513: DOUBLE
11514: EQUAL
11515: IFTRUE 11519
11517: GO 11619
11519: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11520: LD_ADDR_VAR 0 1
11524: PUSH
11525: LD_INT 2
11527: PUSH
11528: LD_INT 4
11530: PUSH
11531: LD_INT 5
11533: PUSH
11534: LD_INT 6
11536: PUSH
11537: LD_INT 8
11539: PUSH
11540: LD_INT 11
11542: PUSH
11543: LD_INT 12
11545: PUSH
11546: LD_INT 15
11548: PUSH
11549: LD_INT 16
11551: PUSH
11552: LD_INT 22
11554: PUSH
11555: LD_INT 23
11557: PUSH
11558: LD_INT 25
11560: PUSH
11561: LD_INT 26
11563: PUSH
11564: LD_INT 36
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 101
11585: PUSH
11586: LD_INT 102
11588: PUSH
11589: LD_INT 105
11591: PUSH
11592: LD_INT 106
11594: PUSH
11595: LD_INT 108
11597: PUSH
11598: LD_INT 109
11600: PUSH
11601: LD_INT 112
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: ST_TO_ADDR
11617: GO 14112
11619: LD_INT 6
11621: DOUBLE
11622: EQUAL
11623: IFTRUE 11627
11625: GO 11747
11627: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11628: LD_ADDR_VAR 0 1
11632: PUSH
11633: LD_INT 2
11635: PUSH
11636: LD_INT 4
11638: PUSH
11639: LD_INT 5
11641: PUSH
11642: LD_INT 6
11644: PUSH
11645: LD_INT 8
11647: PUSH
11648: LD_INT 11
11650: PUSH
11651: LD_INT 12
11653: PUSH
11654: LD_INT 15
11656: PUSH
11657: LD_INT 16
11659: PUSH
11660: LD_INT 20
11662: PUSH
11663: LD_INT 21
11665: PUSH
11666: LD_INT 22
11668: PUSH
11669: LD_INT 23
11671: PUSH
11672: LD_INT 25
11674: PUSH
11675: LD_INT 26
11677: PUSH
11678: LD_INT 30
11680: PUSH
11681: LD_INT 31
11683: PUSH
11684: LD_INT 32
11686: PUSH
11687: LD_INT 36
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 101
11713: PUSH
11714: LD_INT 102
11716: PUSH
11717: LD_INT 105
11719: PUSH
11720: LD_INT 106
11722: PUSH
11723: LD_INT 108
11725: PUSH
11726: LD_INT 109
11728: PUSH
11729: LD_INT 112
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: ST_TO_ADDR
11745: GO 14112
11747: LD_INT 7
11749: DOUBLE
11750: EQUAL
11751: IFTRUE 11755
11753: GO 11855
11755: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11756: LD_ADDR_VAR 0 1
11760: PUSH
11761: LD_INT 2
11763: PUSH
11764: LD_INT 4
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: LD_INT 7
11772: PUSH
11773: LD_INT 11
11775: PUSH
11776: LD_INT 12
11778: PUSH
11779: LD_INT 15
11781: PUSH
11782: LD_INT 16
11784: PUSH
11785: LD_INT 20
11787: PUSH
11788: LD_INT 21
11790: PUSH
11791: LD_INT 22
11793: PUSH
11794: LD_INT 23
11796: PUSH
11797: LD_INT 25
11799: PUSH
11800: LD_INT 26
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 101
11821: PUSH
11822: LD_INT 102
11824: PUSH
11825: LD_INT 103
11827: PUSH
11828: LD_INT 105
11830: PUSH
11831: LD_INT 106
11833: PUSH
11834: LD_INT 108
11836: PUSH
11837: LD_INT 112
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: ST_TO_ADDR
11853: GO 14112
11855: LD_INT 8
11857: DOUBLE
11858: EQUAL
11859: IFTRUE 11863
11861: GO 11991
11863: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11864: LD_ADDR_VAR 0 1
11868: PUSH
11869: LD_INT 2
11871: PUSH
11872: LD_INT 4
11874: PUSH
11875: LD_INT 5
11877: PUSH
11878: LD_INT 6
11880: PUSH
11881: LD_INT 7
11883: PUSH
11884: LD_INT 8
11886: PUSH
11887: LD_INT 11
11889: PUSH
11890: LD_INT 12
11892: PUSH
11893: LD_INT 15
11895: PUSH
11896: LD_INT 16
11898: PUSH
11899: LD_INT 20
11901: PUSH
11902: LD_INT 21
11904: PUSH
11905: LD_INT 22
11907: PUSH
11908: LD_INT 23
11910: PUSH
11911: LD_INT 25
11913: PUSH
11914: LD_INT 26
11916: PUSH
11917: LD_INT 30
11919: PUSH
11920: LD_INT 31
11922: PUSH
11923: LD_INT 32
11925: PUSH
11926: LD_INT 36
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 101
11953: PUSH
11954: LD_INT 102
11956: PUSH
11957: LD_INT 103
11959: PUSH
11960: LD_INT 105
11962: PUSH
11963: LD_INT 106
11965: PUSH
11966: LD_INT 108
11968: PUSH
11969: LD_INT 109
11971: PUSH
11972: LD_INT 112
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: ST_TO_ADDR
11989: GO 14112
11991: LD_INT 9
11993: DOUBLE
11994: EQUAL
11995: IFTRUE 11999
11997: GO 12135
11999: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12000: LD_ADDR_VAR 0 1
12004: PUSH
12005: LD_INT 2
12007: PUSH
12008: LD_INT 4
12010: PUSH
12011: LD_INT 5
12013: PUSH
12014: LD_INT 6
12016: PUSH
12017: LD_INT 7
12019: PUSH
12020: LD_INT 8
12022: PUSH
12023: LD_INT 11
12025: PUSH
12026: LD_INT 12
12028: PUSH
12029: LD_INT 15
12031: PUSH
12032: LD_INT 16
12034: PUSH
12035: LD_INT 20
12037: PUSH
12038: LD_INT 21
12040: PUSH
12041: LD_INT 22
12043: PUSH
12044: LD_INT 23
12046: PUSH
12047: LD_INT 25
12049: PUSH
12050: LD_INT 26
12052: PUSH
12053: LD_INT 28
12055: PUSH
12056: LD_INT 30
12058: PUSH
12059: LD_INT 31
12061: PUSH
12062: LD_INT 32
12064: PUSH
12065: LD_INT 36
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: LD_INT 101
12093: PUSH
12094: LD_INT 102
12096: PUSH
12097: LD_INT 103
12099: PUSH
12100: LD_INT 105
12102: PUSH
12103: LD_INT 106
12105: PUSH
12106: LD_INT 108
12108: PUSH
12109: LD_INT 109
12111: PUSH
12112: LD_INT 112
12114: PUSH
12115: LD_INT 114
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: ST_TO_ADDR
12133: GO 14112
12135: LD_INT 10
12137: DOUBLE
12138: EQUAL
12139: IFTRUE 12143
12141: GO 12327
12143: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12144: LD_ADDR_VAR 0 1
12148: PUSH
12149: LD_INT 2
12151: PUSH
12152: LD_INT 4
12154: PUSH
12155: LD_INT 5
12157: PUSH
12158: LD_INT 6
12160: PUSH
12161: LD_INT 7
12163: PUSH
12164: LD_INT 8
12166: PUSH
12167: LD_INT 9
12169: PUSH
12170: LD_INT 10
12172: PUSH
12173: LD_INT 11
12175: PUSH
12176: LD_INT 12
12178: PUSH
12179: LD_INT 13
12181: PUSH
12182: LD_INT 14
12184: PUSH
12185: LD_INT 15
12187: PUSH
12188: LD_INT 16
12190: PUSH
12191: LD_INT 17
12193: PUSH
12194: LD_INT 18
12196: PUSH
12197: LD_INT 19
12199: PUSH
12200: LD_INT 20
12202: PUSH
12203: LD_INT 21
12205: PUSH
12206: LD_INT 22
12208: PUSH
12209: LD_INT 23
12211: PUSH
12212: LD_INT 24
12214: PUSH
12215: LD_INT 25
12217: PUSH
12218: LD_INT 26
12220: PUSH
12221: LD_INT 28
12223: PUSH
12224: LD_INT 30
12226: PUSH
12227: LD_INT 31
12229: PUSH
12230: LD_INT 32
12232: PUSH
12233: LD_INT 36
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 101
12269: PUSH
12270: LD_INT 102
12272: PUSH
12273: LD_INT 103
12275: PUSH
12276: LD_INT 104
12278: PUSH
12279: LD_INT 105
12281: PUSH
12282: LD_INT 106
12284: PUSH
12285: LD_INT 107
12287: PUSH
12288: LD_INT 108
12290: PUSH
12291: LD_INT 109
12293: PUSH
12294: LD_INT 110
12296: PUSH
12297: LD_INT 111
12299: PUSH
12300: LD_INT 112
12302: PUSH
12303: LD_INT 114
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: ST_TO_ADDR
12325: GO 14112
12327: LD_INT 11
12329: DOUBLE
12330: EQUAL
12331: IFTRUE 12335
12333: GO 12527
12335: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12336: LD_ADDR_VAR 0 1
12340: PUSH
12341: LD_INT 2
12343: PUSH
12344: LD_INT 3
12346: PUSH
12347: LD_INT 4
12349: PUSH
12350: LD_INT 5
12352: PUSH
12353: LD_INT 6
12355: PUSH
12356: LD_INT 7
12358: PUSH
12359: LD_INT 8
12361: PUSH
12362: LD_INT 9
12364: PUSH
12365: LD_INT 10
12367: PUSH
12368: LD_INT 11
12370: PUSH
12371: LD_INT 12
12373: PUSH
12374: LD_INT 13
12376: PUSH
12377: LD_INT 14
12379: PUSH
12380: LD_INT 15
12382: PUSH
12383: LD_INT 16
12385: PUSH
12386: LD_INT 17
12388: PUSH
12389: LD_INT 18
12391: PUSH
12392: LD_INT 19
12394: PUSH
12395: LD_INT 20
12397: PUSH
12398: LD_INT 21
12400: PUSH
12401: LD_INT 22
12403: PUSH
12404: LD_INT 23
12406: PUSH
12407: LD_INT 24
12409: PUSH
12410: LD_INT 25
12412: PUSH
12413: LD_INT 26
12415: PUSH
12416: LD_INT 28
12418: PUSH
12419: LD_INT 30
12421: PUSH
12422: LD_INT 31
12424: PUSH
12425: LD_INT 32
12427: PUSH
12428: LD_INT 34
12430: PUSH
12431: LD_INT 36
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 101
12469: PUSH
12470: LD_INT 102
12472: PUSH
12473: LD_INT 103
12475: PUSH
12476: LD_INT 104
12478: PUSH
12479: LD_INT 105
12481: PUSH
12482: LD_INT 106
12484: PUSH
12485: LD_INT 107
12487: PUSH
12488: LD_INT 108
12490: PUSH
12491: LD_INT 109
12493: PUSH
12494: LD_INT 110
12496: PUSH
12497: LD_INT 111
12499: PUSH
12500: LD_INT 112
12502: PUSH
12503: LD_INT 114
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: ST_TO_ADDR
12525: GO 14112
12527: LD_INT 12
12529: DOUBLE
12530: EQUAL
12531: IFTRUE 12535
12533: GO 12743
12535: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12536: LD_ADDR_VAR 0 1
12540: PUSH
12541: LD_INT 1
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: LD_INT 3
12549: PUSH
12550: LD_INT 4
12552: PUSH
12553: LD_INT 5
12555: PUSH
12556: LD_INT 6
12558: PUSH
12559: LD_INT 7
12561: PUSH
12562: LD_INT 8
12564: PUSH
12565: LD_INT 9
12567: PUSH
12568: LD_INT 10
12570: PUSH
12571: LD_INT 11
12573: PUSH
12574: LD_INT 12
12576: PUSH
12577: LD_INT 13
12579: PUSH
12580: LD_INT 14
12582: PUSH
12583: LD_INT 15
12585: PUSH
12586: LD_INT 16
12588: PUSH
12589: LD_INT 17
12591: PUSH
12592: LD_INT 18
12594: PUSH
12595: LD_INT 19
12597: PUSH
12598: LD_INT 20
12600: PUSH
12601: LD_INT 21
12603: PUSH
12604: LD_INT 22
12606: PUSH
12607: LD_INT 23
12609: PUSH
12610: LD_INT 24
12612: PUSH
12613: LD_INT 25
12615: PUSH
12616: LD_INT 26
12618: PUSH
12619: LD_INT 27
12621: PUSH
12622: LD_INT 28
12624: PUSH
12625: LD_INT 30
12627: PUSH
12628: LD_INT 31
12630: PUSH
12631: LD_INT 32
12633: PUSH
12634: LD_INT 33
12636: PUSH
12637: LD_INT 34
12639: PUSH
12640: LD_INT 36
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 101
12681: PUSH
12682: LD_INT 102
12684: PUSH
12685: LD_INT 103
12687: PUSH
12688: LD_INT 104
12690: PUSH
12691: LD_INT 105
12693: PUSH
12694: LD_INT 106
12696: PUSH
12697: LD_INT 107
12699: PUSH
12700: LD_INT 108
12702: PUSH
12703: LD_INT 109
12705: PUSH
12706: LD_INT 110
12708: PUSH
12709: LD_INT 111
12711: PUSH
12712: LD_INT 112
12714: PUSH
12715: LD_INT 113
12717: PUSH
12718: LD_INT 114
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: ST_TO_ADDR
12741: GO 14112
12743: LD_INT 13
12745: DOUBLE
12746: EQUAL
12747: IFTRUE 12751
12749: GO 12947
12751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12752: LD_ADDR_VAR 0 1
12756: PUSH
12757: LD_INT 1
12759: PUSH
12760: LD_INT 2
12762: PUSH
12763: LD_INT 3
12765: PUSH
12766: LD_INT 4
12768: PUSH
12769: LD_INT 5
12771: PUSH
12772: LD_INT 8
12774: PUSH
12775: LD_INT 9
12777: PUSH
12778: LD_INT 10
12780: PUSH
12781: LD_INT 11
12783: PUSH
12784: LD_INT 12
12786: PUSH
12787: LD_INT 14
12789: PUSH
12790: LD_INT 15
12792: PUSH
12793: LD_INT 16
12795: PUSH
12796: LD_INT 17
12798: PUSH
12799: LD_INT 18
12801: PUSH
12802: LD_INT 19
12804: PUSH
12805: LD_INT 20
12807: PUSH
12808: LD_INT 21
12810: PUSH
12811: LD_INT 22
12813: PUSH
12814: LD_INT 23
12816: PUSH
12817: LD_INT 24
12819: PUSH
12820: LD_INT 25
12822: PUSH
12823: LD_INT 26
12825: PUSH
12826: LD_INT 27
12828: PUSH
12829: LD_INT 28
12831: PUSH
12832: LD_INT 30
12834: PUSH
12835: LD_INT 31
12837: PUSH
12838: LD_INT 32
12840: PUSH
12841: LD_INT 33
12843: PUSH
12844: LD_INT 34
12846: PUSH
12847: LD_INT 36
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: LD_INT 101
12885: PUSH
12886: LD_INT 102
12888: PUSH
12889: LD_INT 103
12891: PUSH
12892: LD_INT 104
12894: PUSH
12895: LD_INT 105
12897: PUSH
12898: LD_INT 106
12900: PUSH
12901: LD_INT 107
12903: PUSH
12904: LD_INT 108
12906: PUSH
12907: LD_INT 109
12909: PUSH
12910: LD_INT 110
12912: PUSH
12913: LD_INT 111
12915: PUSH
12916: LD_INT 112
12918: PUSH
12919: LD_INT 113
12921: PUSH
12922: LD_INT 114
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: ST_TO_ADDR
12945: GO 14112
12947: LD_INT 14
12949: DOUBLE
12950: EQUAL
12951: IFTRUE 12955
12953: GO 13167
12955: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
12956: LD_ADDR_VAR 0 1
12960: PUSH
12961: LD_INT 1
12963: PUSH
12964: LD_INT 2
12966: PUSH
12967: LD_INT 3
12969: PUSH
12970: LD_INT 4
12972: PUSH
12973: LD_INT 5
12975: PUSH
12976: LD_INT 6
12978: PUSH
12979: LD_INT 7
12981: PUSH
12982: LD_INT 8
12984: PUSH
12985: LD_INT 9
12987: PUSH
12988: LD_INT 10
12990: PUSH
12991: LD_INT 11
12993: PUSH
12994: LD_INT 12
12996: PUSH
12997: LD_INT 13
12999: PUSH
13000: LD_INT 14
13002: PUSH
13003: LD_INT 15
13005: PUSH
13006: LD_INT 16
13008: PUSH
13009: LD_INT 17
13011: PUSH
13012: LD_INT 18
13014: PUSH
13015: LD_INT 19
13017: PUSH
13018: LD_INT 20
13020: PUSH
13021: LD_INT 21
13023: PUSH
13024: LD_INT 22
13026: PUSH
13027: LD_INT 23
13029: PUSH
13030: LD_INT 24
13032: PUSH
13033: LD_INT 25
13035: PUSH
13036: LD_INT 26
13038: PUSH
13039: LD_INT 27
13041: PUSH
13042: LD_INT 28
13044: PUSH
13045: LD_INT 29
13047: PUSH
13048: LD_INT 30
13050: PUSH
13051: LD_INT 31
13053: PUSH
13054: LD_INT 32
13056: PUSH
13057: LD_INT 33
13059: PUSH
13060: LD_INT 34
13062: PUSH
13063: LD_INT 36
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 101
13105: PUSH
13106: LD_INT 102
13108: PUSH
13109: LD_INT 103
13111: PUSH
13112: LD_INT 104
13114: PUSH
13115: LD_INT 105
13117: PUSH
13118: LD_INT 106
13120: PUSH
13121: LD_INT 107
13123: PUSH
13124: LD_INT 108
13126: PUSH
13127: LD_INT 109
13129: PUSH
13130: LD_INT 110
13132: PUSH
13133: LD_INT 111
13135: PUSH
13136: LD_INT 112
13138: PUSH
13139: LD_INT 113
13141: PUSH
13142: LD_INT 114
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: ST_TO_ADDR
13165: GO 14112
13167: LD_INT 15
13169: DOUBLE
13170: EQUAL
13171: IFTRUE 13175
13173: GO 13387
13175: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13176: LD_ADDR_VAR 0 1
13180: PUSH
13181: LD_INT 1
13183: PUSH
13184: LD_INT 2
13186: PUSH
13187: LD_INT 3
13189: PUSH
13190: LD_INT 4
13192: PUSH
13193: LD_INT 5
13195: PUSH
13196: LD_INT 6
13198: PUSH
13199: LD_INT 7
13201: PUSH
13202: LD_INT 8
13204: PUSH
13205: LD_INT 9
13207: PUSH
13208: LD_INT 10
13210: PUSH
13211: LD_INT 11
13213: PUSH
13214: LD_INT 12
13216: PUSH
13217: LD_INT 13
13219: PUSH
13220: LD_INT 14
13222: PUSH
13223: LD_INT 15
13225: PUSH
13226: LD_INT 16
13228: PUSH
13229: LD_INT 17
13231: PUSH
13232: LD_INT 18
13234: PUSH
13235: LD_INT 19
13237: PUSH
13238: LD_INT 20
13240: PUSH
13241: LD_INT 21
13243: PUSH
13244: LD_INT 22
13246: PUSH
13247: LD_INT 23
13249: PUSH
13250: LD_INT 24
13252: PUSH
13253: LD_INT 25
13255: PUSH
13256: LD_INT 26
13258: PUSH
13259: LD_INT 27
13261: PUSH
13262: LD_INT 28
13264: PUSH
13265: LD_INT 29
13267: PUSH
13268: LD_INT 30
13270: PUSH
13271: LD_INT 31
13273: PUSH
13274: LD_INT 32
13276: PUSH
13277: LD_INT 33
13279: PUSH
13280: LD_INT 34
13282: PUSH
13283: LD_INT 36
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 101
13325: PUSH
13326: LD_INT 102
13328: PUSH
13329: LD_INT 103
13331: PUSH
13332: LD_INT 104
13334: PUSH
13335: LD_INT 105
13337: PUSH
13338: LD_INT 106
13340: PUSH
13341: LD_INT 107
13343: PUSH
13344: LD_INT 108
13346: PUSH
13347: LD_INT 109
13349: PUSH
13350: LD_INT 110
13352: PUSH
13353: LD_INT 111
13355: PUSH
13356: LD_INT 112
13358: PUSH
13359: LD_INT 113
13361: PUSH
13362: LD_INT 114
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: ST_TO_ADDR
13385: GO 14112
13387: LD_INT 16
13389: DOUBLE
13390: EQUAL
13391: IFTRUE 13395
13393: GO 13519
13395: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13396: LD_ADDR_VAR 0 1
13400: PUSH
13401: LD_INT 2
13403: PUSH
13404: LD_INT 4
13406: PUSH
13407: LD_INT 5
13409: PUSH
13410: LD_INT 7
13412: PUSH
13413: LD_INT 11
13415: PUSH
13416: LD_INT 12
13418: PUSH
13419: LD_INT 15
13421: PUSH
13422: LD_INT 16
13424: PUSH
13425: LD_INT 20
13427: PUSH
13428: LD_INT 21
13430: PUSH
13431: LD_INT 22
13433: PUSH
13434: LD_INT 23
13436: PUSH
13437: LD_INT 25
13439: PUSH
13440: LD_INT 26
13442: PUSH
13443: LD_INT 30
13445: PUSH
13446: LD_INT 31
13448: PUSH
13449: LD_INT 32
13451: PUSH
13452: LD_INT 33
13454: PUSH
13455: LD_INT 34
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: PUSH
13479: LD_INT 101
13481: PUSH
13482: LD_INT 102
13484: PUSH
13485: LD_INT 103
13487: PUSH
13488: LD_INT 106
13490: PUSH
13491: LD_INT 108
13493: PUSH
13494: LD_INT 112
13496: PUSH
13497: LD_INT 113
13499: PUSH
13500: LD_INT 114
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: ST_TO_ADDR
13517: GO 14112
13519: LD_INT 17
13521: DOUBLE
13522: EQUAL
13523: IFTRUE 13527
13525: GO 13739
13527: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13528: LD_ADDR_VAR 0 1
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: LD_INT 2
13538: PUSH
13539: LD_INT 3
13541: PUSH
13542: LD_INT 4
13544: PUSH
13545: LD_INT 5
13547: PUSH
13548: LD_INT 6
13550: PUSH
13551: LD_INT 7
13553: PUSH
13554: LD_INT 8
13556: PUSH
13557: LD_INT 9
13559: PUSH
13560: LD_INT 10
13562: PUSH
13563: LD_INT 11
13565: PUSH
13566: LD_INT 12
13568: PUSH
13569: LD_INT 13
13571: PUSH
13572: LD_INT 14
13574: PUSH
13575: LD_INT 15
13577: PUSH
13578: LD_INT 16
13580: PUSH
13581: LD_INT 17
13583: PUSH
13584: LD_INT 18
13586: PUSH
13587: LD_INT 19
13589: PUSH
13590: LD_INT 20
13592: PUSH
13593: LD_INT 21
13595: PUSH
13596: LD_INT 22
13598: PUSH
13599: LD_INT 23
13601: PUSH
13602: LD_INT 24
13604: PUSH
13605: LD_INT 25
13607: PUSH
13608: LD_INT 26
13610: PUSH
13611: LD_INT 27
13613: PUSH
13614: LD_INT 28
13616: PUSH
13617: LD_INT 29
13619: PUSH
13620: LD_INT 30
13622: PUSH
13623: LD_INT 31
13625: PUSH
13626: LD_INT 32
13628: PUSH
13629: LD_INT 33
13631: PUSH
13632: LD_INT 34
13634: PUSH
13635: LD_INT 36
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 101
13677: PUSH
13678: LD_INT 102
13680: PUSH
13681: LD_INT 103
13683: PUSH
13684: LD_INT 104
13686: PUSH
13687: LD_INT 105
13689: PUSH
13690: LD_INT 106
13692: PUSH
13693: LD_INT 107
13695: PUSH
13696: LD_INT 108
13698: PUSH
13699: LD_INT 109
13701: PUSH
13702: LD_INT 110
13704: PUSH
13705: LD_INT 111
13707: PUSH
13708: LD_INT 112
13710: PUSH
13711: LD_INT 113
13713: PUSH
13714: LD_INT 114
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: ST_TO_ADDR
13737: GO 14112
13739: LD_INT 18
13741: DOUBLE
13742: EQUAL
13743: IFTRUE 13747
13745: GO 13883
13747: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13748: LD_ADDR_VAR 0 1
13752: PUSH
13753: LD_INT 2
13755: PUSH
13756: LD_INT 4
13758: PUSH
13759: LD_INT 5
13761: PUSH
13762: LD_INT 7
13764: PUSH
13765: LD_INT 11
13767: PUSH
13768: LD_INT 12
13770: PUSH
13771: LD_INT 15
13773: PUSH
13774: LD_INT 16
13776: PUSH
13777: LD_INT 20
13779: PUSH
13780: LD_INT 21
13782: PUSH
13783: LD_INT 22
13785: PUSH
13786: LD_INT 23
13788: PUSH
13789: LD_INT 25
13791: PUSH
13792: LD_INT 26
13794: PUSH
13795: LD_INT 30
13797: PUSH
13798: LD_INT 31
13800: PUSH
13801: LD_INT 32
13803: PUSH
13804: LD_INT 33
13806: PUSH
13807: LD_INT 34
13809: PUSH
13810: LD_INT 35
13812: PUSH
13813: LD_INT 36
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 101
13841: PUSH
13842: LD_INT 102
13844: PUSH
13845: LD_INT 103
13847: PUSH
13848: LD_INT 106
13850: PUSH
13851: LD_INT 108
13853: PUSH
13854: LD_INT 112
13856: PUSH
13857: LD_INT 113
13859: PUSH
13860: LD_INT 114
13862: PUSH
13863: LD_INT 115
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: ST_TO_ADDR
13881: GO 14112
13883: LD_INT 19
13885: DOUBLE
13886: EQUAL
13887: IFTRUE 13891
13889: GO 14111
13891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13892: LD_ADDR_VAR 0 1
13896: PUSH
13897: LD_INT 1
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: LD_INT 3
13905: PUSH
13906: LD_INT 4
13908: PUSH
13909: LD_INT 5
13911: PUSH
13912: LD_INT 6
13914: PUSH
13915: LD_INT 7
13917: PUSH
13918: LD_INT 8
13920: PUSH
13921: LD_INT 9
13923: PUSH
13924: LD_INT 10
13926: PUSH
13927: LD_INT 11
13929: PUSH
13930: LD_INT 12
13932: PUSH
13933: LD_INT 13
13935: PUSH
13936: LD_INT 14
13938: PUSH
13939: LD_INT 15
13941: PUSH
13942: LD_INT 16
13944: PUSH
13945: LD_INT 17
13947: PUSH
13948: LD_INT 18
13950: PUSH
13951: LD_INT 19
13953: PUSH
13954: LD_INT 20
13956: PUSH
13957: LD_INT 21
13959: PUSH
13960: LD_INT 22
13962: PUSH
13963: LD_INT 23
13965: PUSH
13966: LD_INT 24
13968: PUSH
13969: LD_INT 25
13971: PUSH
13972: LD_INT 26
13974: PUSH
13975: LD_INT 27
13977: PUSH
13978: LD_INT 28
13980: PUSH
13981: LD_INT 29
13983: PUSH
13984: LD_INT 30
13986: PUSH
13987: LD_INT 31
13989: PUSH
13990: LD_INT 32
13992: PUSH
13993: LD_INT 33
13995: PUSH
13996: LD_INT 34
13998: PUSH
13999: LD_INT 35
14001: PUSH
14002: LD_INT 36
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 101
14045: PUSH
14046: LD_INT 102
14048: PUSH
14049: LD_INT 103
14051: PUSH
14052: LD_INT 104
14054: PUSH
14055: LD_INT 105
14057: PUSH
14058: LD_INT 106
14060: PUSH
14061: LD_INT 107
14063: PUSH
14064: LD_INT 108
14066: PUSH
14067: LD_INT 109
14069: PUSH
14070: LD_INT 110
14072: PUSH
14073: LD_INT 111
14075: PUSH
14076: LD_INT 112
14078: PUSH
14079: LD_INT 113
14081: PUSH
14082: LD_INT 114
14084: PUSH
14085: LD_INT 115
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: ST_TO_ADDR
14109: GO 14112
14111: POP
// end else
14112: GO 14331
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14114: LD_ADDR_VAR 0 1
14118: PUSH
14119: LD_INT 1
14121: PUSH
14122: LD_INT 2
14124: PUSH
14125: LD_INT 3
14127: PUSH
14128: LD_INT 4
14130: PUSH
14131: LD_INT 5
14133: PUSH
14134: LD_INT 6
14136: PUSH
14137: LD_INT 7
14139: PUSH
14140: LD_INT 8
14142: PUSH
14143: LD_INT 9
14145: PUSH
14146: LD_INT 10
14148: PUSH
14149: LD_INT 11
14151: PUSH
14152: LD_INT 12
14154: PUSH
14155: LD_INT 13
14157: PUSH
14158: LD_INT 14
14160: PUSH
14161: LD_INT 15
14163: PUSH
14164: LD_INT 16
14166: PUSH
14167: LD_INT 17
14169: PUSH
14170: LD_INT 18
14172: PUSH
14173: LD_INT 19
14175: PUSH
14176: LD_INT 20
14178: PUSH
14179: LD_INT 21
14181: PUSH
14182: LD_INT 22
14184: PUSH
14185: LD_INT 23
14187: PUSH
14188: LD_INT 24
14190: PUSH
14191: LD_INT 25
14193: PUSH
14194: LD_INT 26
14196: PUSH
14197: LD_INT 27
14199: PUSH
14200: LD_INT 28
14202: PUSH
14203: LD_INT 29
14205: PUSH
14206: LD_INT 30
14208: PUSH
14209: LD_INT 31
14211: PUSH
14212: LD_INT 32
14214: PUSH
14215: LD_INT 33
14217: PUSH
14218: LD_INT 34
14220: PUSH
14221: LD_INT 35
14223: PUSH
14224: LD_INT 36
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 101
14267: PUSH
14268: LD_INT 102
14270: PUSH
14271: LD_INT 103
14273: PUSH
14274: LD_INT 104
14276: PUSH
14277: LD_INT 105
14279: PUSH
14280: LD_INT 106
14282: PUSH
14283: LD_INT 107
14285: PUSH
14286: LD_INT 108
14288: PUSH
14289: LD_INT 109
14291: PUSH
14292: LD_INT 110
14294: PUSH
14295: LD_INT 111
14297: PUSH
14298: LD_INT 112
14300: PUSH
14301: LD_INT 113
14303: PUSH
14304: LD_INT 114
14306: PUSH
14307: LD_INT 115
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: ST_TO_ADDR
// if result then
14331: LD_VAR 0 1
14335: IFFALSE 14624
// begin normal :=  ;
14337: LD_ADDR_VAR 0 3
14341: PUSH
14342: LD_STRING 
14344: ST_TO_ADDR
// hardcore :=  ;
14345: LD_ADDR_VAR 0 4
14349: PUSH
14350: LD_STRING 
14352: ST_TO_ADDR
// for i = 1 to normalCounter do
14353: LD_ADDR_VAR 0 5
14357: PUSH
14358: DOUBLE
14359: LD_INT 1
14361: DEC
14362: ST_TO_ADDR
14363: LD_EXP 42
14367: PUSH
14368: FOR_TO
14369: IFFALSE 14470
// begin tmp := 0 ;
14371: LD_ADDR_VAR 0 2
14375: PUSH
14376: LD_STRING 0
14378: ST_TO_ADDR
// if result [ 1 ] then
14379: LD_VAR 0 1
14383: PUSH
14384: LD_INT 1
14386: ARRAY
14387: IFFALSE 14452
// if result [ 1 ] [ 1 ] = i then
14389: LD_VAR 0 1
14393: PUSH
14394: LD_INT 1
14396: ARRAY
14397: PUSH
14398: LD_INT 1
14400: ARRAY
14401: PUSH
14402: LD_VAR 0 5
14406: EQUAL
14407: IFFALSE 14452
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14409: LD_ADDR_VAR 0 1
14413: PUSH
14414: LD_VAR 0 1
14418: PPUSH
14419: LD_INT 1
14421: PPUSH
14422: LD_VAR 0 1
14426: PUSH
14427: LD_INT 1
14429: ARRAY
14430: PPUSH
14431: LD_INT 1
14433: PPUSH
14434: CALL_OW 3
14438: PPUSH
14439: CALL_OW 1
14443: ST_TO_ADDR
// tmp := 1 ;
14444: LD_ADDR_VAR 0 2
14448: PUSH
14449: LD_STRING 1
14451: ST_TO_ADDR
// end ; normal := normal & tmp ;
14452: LD_ADDR_VAR 0 3
14456: PUSH
14457: LD_VAR 0 3
14461: PUSH
14462: LD_VAR 0 2
14466: STR
14467: ST_TO_ADDR
// end ;
14468: GO 14368
14470: POP
14471: POP
// for i = 1 to hardcoreCounter do
14472: LD_ADDR_VAR 0 5
14476: PUSH
14477: DOUBLE
14478: LD_INT 1
14480: DEC
14481: ST_TO_ADDR
14482: LD_EXP 43
14486: PUSH
14487: FOR_TO
14488: IFFALSE 14593
// begin tmp := 0 ;
14490: LD_ADDR_VAR 0 2
14494: PUSH
14495: LD_STRING 0
14497: ST_TO_ADDR
// if result [ 2 ] then
14498: LD_VAR 0 1
14502: PUSH
14503: LD_INT 2
14505: ARRAY
14506: IFFALSE 14575
// if result [ 2 ] [ 1 ] = 100 + i then
14508: LD_VAR 0 1
14512: PUSH
14513: LD_INT 2
14515: ARRAY
14516: PUSH
14517: LD_INT 1
14519: ARRAY
14520: PUSH
14521: LD_INT 100
14523: PUSH
14524: LD_VAR 0 5
14528: PLUS
14529: EQUAL
14530: IFFALSE 14575
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14532: LD_ADDR_VAR 0 1
14536: PUSH
14537: LD_VAR 0 1
14541: PPUSH
14542: LD_INT 2
14544: PPUSH
14545: LD_VAR 0 1
14549: PUSH
14550: LD_INT 2
14552: ARRAY
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: CALL_OW 3
14561: PPUSH
14562: CALL_OW 1
14566: ST_TO_ADDR
// tmp := 1 ;
14567: LD_ADDR_VAR 0 2
14571: PUSH
14572: LD_STRING 1
14574: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14575: LD_ADDR_VAR 0 4
14579: PUSH
14580: LD_VAR 0 4
14584: PUSH
14585: LD_VAR 0 2
14589: STR
14590: ST_TO_ADDR
// end ;
14591: GO 14487
14593: POP
14594: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14595: LD_STRING getStreamItemsFromMission("
14597: PUSH
14598: LD_VAR 0 3
14602: STR
14603: PUSH
14604: LD_STRING ","
14606: STR
14607: PUSH
14608: LD_VAR 0 4
14612: STR
14613: PUSH
14614: LD_STRING ")
14616: STR
14617: PPUSH
14618: CALL_OW 559
// end else
14622: GO 14631
// ToLua ( getStreamItemsFromMission("","") ) ;
14624: LD_STRING getStreamItemsFromMission("","")
14626: PPUSH
14627: CALL_OW 559
// end ;
14631: LD_VAR 0 1
14635: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14636: LD_EXP 41
14640: PUSH
14641: LD_EXP 46
14645: AND
14646: IFFALSE 14770
14648: GO 14650
14650: DISABLE
14651: LD_INT 0
14653: PPUSH
14654: PPUSH
// begin enable ;
14655: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14656: LD_ADDR_VAR 0 2
14660: PUSH
14661: LD_INT 22
14663: PUSH
14664: LD_OWVAR 2
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 2
14675: PUSH
14676: LD_INT 34
14678: PUSH
14679: LD_INT 7
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 34
14688: PUSH
14689: LD_INT 45
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 34
14698: PUSH
14699: LD_INT 28
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 34
14708: PUSH
14709: LD_INT 47
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PPUSH
14727: CALL_OW 69
14731: ST_TO_ADDR
// if not tmp then
14732: LD_VAR 0 2
14736: NOT
14737: IFFALSE 14741
// exit ;
14739: GO 14770
// for i in tmp do
14741: LD_ADDR_VAR 0 1
14745: PUSH
14746: LD_VAR 0 2
14750: PUSH
14751: FOR_IN
14752: IFFALSE 14768
// begin SetLives ( i , 0 ) ;
14754: LD_VAR 0 1
14758: PPUSH
14759: LD_INT 0
14761: PPUSH
14762: CALL_OW 234
// end ;
14766: GO 14751
14768: POP
14769: POP
// end ;
14770: PPOPN 2
14772: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14773: LD_EXP 41
14777: PUSH
14778: LD_EXP 47
14782: AND
14783: IFFALSE 14867
14785: GO 14787
14787: DISABLE
14788: LD_INT 0
14790: PPUSH
14791: PPUSH
// begin enable ;
14792: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14793: LD_ADDR_VAR 0 2
14797: PUSH
14798: LD_INT 22
14800: PUSH
14801: LD_OWVAR 2
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 32
14812: PUSH
14813: LD_INT 3
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PPUSH
14824: CALL_OW 69
14828: ST_TO_ADDR
// if not tmp then
14829: LD_VAR 0 2
14833: NOT
14834: IFFALSE 14838
// exit ;
14836: GO 14867
// for i in tmp do
14838: LD_ADDR_VAR 0 1
14842: PUSH
14843: LD_VAR 0 2
14847: PUSH
14848: FOR_IN
14849: IFFALSE 14865
// begin SetLives ( i , 0 ) ;
14851: LD_VAR 0 1
14855: PPUSH
14856: LD_INT 0
14858: PPUSH
14859: CALL_OW 234
// end ;
14863: GO 14848
14865: POP
14866: POP
// end ;
14867: PPOPN 2
14869: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14870: LD_EXP 41
14874: PUSH
14875: LD_EXP 44
14879: AND
14880: IFFALSE 14973
14882: GO 14884
14884: DISABLE
14885: LD_INT 0
14887: PPUSH
// begin enable ;
14888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14889: LD_ADDR_VAR 0 1
14893: PUSH
14894: LD_INT 22
14896: PUSH
14897: LD_OWVAR 2
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 2
14908: PUSH
14909: LD_INT 25
14911: PUSH
14912: LD_INT 5
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 25
14921: PUSH
14922: LD_INT 9
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 25
14931: PUSH
14932: LD_INT 8
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PPUSH
14949: CALL_OW 69
14953: PUSH
14954: FOR_IN
14955: IFFALSE 14971
// begin SetClass ( i , 1 ) ;
14957: LD_VAR 0 1
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: CALL_OW 336
// end ;
14969: GO 14954
14971: POP
14972: POP
// end ;
14973: PPOPN 1
14975: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14976: LD_EXP 41
14980: PUSH
14981: LD_EXP 45
14985: AND
14986: PUSH
14987: LD_OWVAR 65
14991: PUSH
14992: LD_INT 7
14994: LESS
14995: AND
14996: IFFALSE 15010
14998: GO 15000
15000: DISABLE
// begin enable ;
15001: ENABLE
// game_speed := 7 ;
15002: LD_ADDR_OWVAR 65
15006: PUSH
15007: LD_INT 7
15009: ST_TO_ADDR
// end ;
15010: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15011: LD_EXP 41
15015: PUSH
15016: LD_EXP 48
15020: AND
15021: IFFALSE 15223
15023: GO 15025
15025: DISABLE
15026: LD_INT 0
15028: PPUSH
15029: PPUSH
15030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15031: LD_ADDR_VAR 0 3
15035: PUSH
15036: LD_INT 81
15038: PUSH
15039: LD_OWVAR 2
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 21
15050: PUSH
15051: LD_INT 1
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PPUSH
15062: CALL_OW 69
15066: ST_TO_ADDR
// if not tmp then
15067: LD_VAR 0 3
15071: NOT
15072: IFFALSE 15076
// exit ;
15074: GO 15223
// if tmp > 5 then
15076: LD_VAR 0 3
15080: PUSH
15081: LD_INT 5
15083: GREATER
15084: IFFALSE 15096
// k := 5 else
15086: LD_ADDR_VAR 0 2
15090: PUSH
15091: LD_INT 5
15093: ST_TO_ADDR
15094: GO 15106
// k := tmp ;
15096: LD_ADDR_VAR 0 2
15100: PUSH
15101: LD_VAR 0 3
15105: ST_TO_ADDR
// for i := 1 to k do
15106: LD_ADDR_VAR 0 1
15110: PUSH
15111: DOUBLE
15112: LD_INT 1
15114: DEC
15115: ST_TO_ADDR
15116: LD_VAR 0 2
15120: PUSH
15121: FOR_TO
15122: IFFALSE 15221
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15124: LD_VAR 0 3
15128: PUSH
15129: LD_VAR 0 1
15133: ARRAY
15134: PPUSH
15135: LD_VAR 0 1
15139: PUSH
15140: LD_INT 4
15142: MOD
15143: PUSH
15144: LD_INT 1
15146: PLUS
15147: PPUSH
15148: CALL_OW 259
15152: PUSH
15153: LD_INT 10
15155: LESS
15156: IFFALSE 15219
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15158: LD_VAR 0 3
15162: PUSH
15163: LD_VAR 0 1
15167: ARRAY
15168: PPUSH
15169: LD_VAR 0 1
15173: PUSH
15174: LD_INT 4
15176: MOD
15177: PUSH
15178: LD_INT 1
15180: PLUS
15181: PPUSH
15182: LD_VAR 0 3
15186: PUSH
15187: LD_VAR 0 1
15191: ARRAY
15192: PPUSH
15193: LD_VAR 0 1
15197: PUSH
15198: LD_INT 4
15200: MOD
15201: PUSH
15202: LD_INT 1
15204: PLUS
15205: PPUSH
15206: CALL_OW 259
15210: PUSH
15211: LD_INT 1
15213: PLUS
15214: PPUSH
15215: CALL_OW 237
15219: GO 15121
15221: POP
15222: POP
// end ;
15223: PPOPN 3
15225: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15226: LD_EXP 41
15230: PUSH
15231: LD_EXP 49
15235: AND
15236: IFFALSE 15256
15238: GO 15240
15240: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15241: LD_INT 4
15243: PPUSH
15244: LD_OWVAR 2
15248: PPUSH
15249: LD_INT 0
15251: PPUSH
15252: CALL_OW 324
15256: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15257: LD_EXP 41
15261: PUSH
15262: LD_EXP 78
15266: AND
15267: IFFALSE 15287
15269: GO 15271
15271: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15272: LD_INT 19
15274: PPUSH
15275: LD_OWVAR 2
15279: PPUSH
15280: LD_INT 0
15282: PPUSH
15283: CALL_OW 324
15287: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15288: LD_EXP 41
15292: PUSH
15293: LD_EXP 50
15297: AND
15298: IFFALSE 15400
15300: GO 15302
15302: DISABLE
15303: LD_INT 0
15305: PPUSH
15306: PPUSH
// begin enable ;
15307: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15308: LD_ADDR_VAR 0 2
15312: PUSH
15313: LD_INT 22
15315: PUSH
15316: LD_OWVAR 2
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 2
15327: PUSH
15328: LD_INT 34
15330: PUSH
15331: LD_INT 11
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 34
15340: PUSH
15341: LD_INT 30
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PPUSH
15357: CALL_OW 69
15361: ST_TO_ADDR
// if not tmp then
15362: LD_VAR 0 2
15366: NOT
15367: IFFALSE 15371
// exit ;
15369: GO 15400
// for i in tmp do
15371: LD_ADDR_VAR 0 1
15375: PUSH
15376: LD_VAR 0 2
15380: PUSH
15381: FOR_IN
15382: IFFALSE 15398
// begin SetLives ( i , 0 ) ;
15384: LD_VAR 0 1
15388: PPUSH
15389: LD_INT 0
15391: PPUSH
15392: CALL_OW 234
// end ;
15396: GO 15381
15398: POP
15399: POP
// end ;
15400: PPOPN 2
15402: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15403: LD_EXP 41
15407: PUSH
15408: LD_EXP 51
15412: AND
15413: IFFALSE 15433
15415: GO 15417
15417: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15418: LD_INT 32
15420: PPUSH
15421: LD_OWVAR 2
15425: PPUSH
15426: LD_INT 0
15428: PPUSH
15429: CALL_OW 324
15433: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15434: LD_EXP 41
15438: PUSH
15439: LD_EXP 52
15443: AND
15444: IFFALSE 15625
15446: GO 15448
15448: DISABLE
15449: LD_INT 0
15451: PPUSH
15452: PPUSH
15453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15454: LD_ADDR_VAR 0 2
15458: PUSH
15459: LD_INT 22
15461: PUSH
15462: LD_OWVAR 2
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 33
15473: PUSH
15474: LD_INT 3
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PPUSH
15485: CALL_OW 69
15489: ST_TO_ADDR
// if not tmp then
15490: LD_VAR 0 2
15494: NOT
15495: IFFALSE 15499
// exit ;
15497: GO 15625
// side := 0 ;
15499: LD_ADDR_VAR 0 3
15503: PUSH
15504: LD_INT 0
15506: ST_TO_ADDR
// for i := 1 to 8 do
15507: LD_ADDR_VAR 0 1
15511: PUSH
15512: DOUBLE
15513: LD_INT 1
15515: DEC
15516: ST_TO_ADDR
15517: LD_INT 8
15519: PUSH
15520: FOR_TO
15521: IFFALSE 15569
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15523: LD_OWVAR 2
15527: PUSH
15528: LD_VAR 0 1
15532: NONEQUAL
15533: PUSH
15534: LD_OWVAR 2
15538: PPUSH
15539: LD_VAR 0 1
15543: PPUSH
15544: CALL_OW 81
15548: PUSH
15549: LD_INT 2
15551: EQUAL
15552: AND
15553: IFFALSE 15567
// begin side := i ;
15555: LD_ADDR_VAR 0 3
15559: PUSH
15560: LD_VAR 0 1
15564: ST_TO_ADDR
// break ;
15565: GO 15569
// end ;
15567: GO 15520
15569: POP
15570: POP
// if not side then
15571: LD_VAR 0 3
15575: NOT
15576: IFFALSE 15580
// exit ;
15578: GO 15625
// for i := 1 to tmp do
15580: LD_ADDR_VAR 0 1
15584: PUSH
15585: DOUBLE
15586: LD_INT 1
15588: DEC
15589: ST_TO_ADDR
15590: LD_VAR 0 2
15594: PUSH
15595: FOR_TO
15596: IFFALSE 15623
// if Prob ( 60 ) then
15598: LD_INT 60
15600: PPUSH
15601: CALL_OW 13
15605: IFFALSE 15621
// SetSide ( i , side ) ;
15607: LD_VAR 0 1
15611: PPUSH
15612: LD_VAR 0 3
15616: PPUSH
15617: CALL_OW 235
15621: GO 15595
15623: POP
15624: POP
// end ;
15625: PPOPN 3
15627: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15628: LD_EXP 41
15632: PUSH
15633: LD_EXP 54
15637: AND
15638: IFFALSE 15757
15640: GO 15642
15642: DISABLE
15643: LD_INT 0
15645: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15646: LD_ADDR_VAR 0 1
15650: PUSH
15651: LD_INT 22
15653: PUSH
15654: LD_OWVAR 2
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 21
15665: PUSH
15666: LD_INT 1
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 3
15675: PUSH
15676: LD_INT 23
15678: PUSH
15679: LD_INT 0
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: PPUSH
15695: CALL_OW 69
15699: PUSH
15700: FOR_IN
15701: IFFALSE 15755
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL_OW 257
15712: PUSH
15713: LD_INT 1
15715: PUSH
15716: LD_INT 2
15718: PUSH
15719: LD_INT 3
15721: PUSH
15722: LD_INT 4
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: IN
15731: IFFALSE 15753
// SetClass ( un , rand ( 1 , 4 ) ) ;
15733: LD_VAR 0 1
15737: PPUSH
15738: LD_INT 1
15740: PPUSH
15741: LD_INT 4
15743: PPUSH
15744: CALL_OW 12
15748: PPUSH
15749: CALL_OW 336
15753: GO 15700
15755: POP
15756: POP
// end ;
15757: PPOPN 1
15759: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15760: LD_EXP 41
15764: PUSH
15765: LD_EXP 53
15769: AND
15770: IFFALSE 15849
15772: GO 15774
15774: DISABLE
15775: LD_INT 0
15777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15778: LD_ADDR_VAR 0 1
15782: PUSH
15783: LD_INT 22
15785: PUSH
15786: LD_OWVAR 2
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 21
15797: PUSH
15798: LD_INT 3
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PPUSH
15809: CALL_OW 69
15813: ST_TO_ADDR
// if not tmp then
15814: LD_VAR 0 1
15818: NOT
15819: IFFALSE 15823
// exit ;
15821: GO 15849
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15823: LD_VAR 0 1
15827: PUSH
15828: LD_INT 1
15830: PPUSH
15831: LD_VAR 0 1
15835: PPUSH
15836: CALL_OW 12
15840: ARRAY
15841: PPUSH
15842: LD_INT 100
15844: PPUSH
15845: CALL_OW 234
// end ;
15849: PPOPN 1
15851: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15852: LD_EXP 41
15856: PUSH
15857: LD_EXP 55
15861: AND
15862: IFFALSE 15960
15864: GO 15866
15866: DISABLE
15867: LD_INT 0
15869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15870: LD_ADDR_VAR 0 1
15874: PUSH
15875: LD_INT 22
15877: PUSH
15878: LD_OWVAR 2
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: LD_INT 21
15889: PUSH
15890: LD_INT 1
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PPUSH
15901: CALL_OW 69
15905: ST_TO_ADDR
// if not tmp then
15906: LD_VAR 0 1
15910: NOT
15911: IFFALSE 15915
// exit ;
15913: GO 15960
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15915: LD_VAR 0 1
15919: PUSH
15920: LD_INT 1
15922: PPUSH
15923: LD_VAR 0 1
15927: PPUSH
15928: CALL_OW 12
15932: ARRAY
15933: PPUSH
15934: LD_INT 1
15936: PPUSH
15937: LD_INT 4
15939: PPUSH
15940: CALL_OW 12
15944: PPUSH
15945: LD_INT 3000
15947: PPUSH
15948: LD_INT 9000
15950: PPUSH
15951: CALL_OW 12
15955: PPUSH
15956: CALL_OW 492
// end ;
15960: PPOPN 1
15962: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15963: LD_EXP 41
15967: PUSH
15968: LD_EXP 56
15972: AND
15973: IFFALSE 15993
15975: GO 15977
15977: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15978: LD_INT 1
15980: PPUSH
15981: LD_OWVAR 2
15985: PPUSH
15986: LD_INT 0
15988: PPUSH
15989: CALL_OW 324
15993: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15994: LD_EXP 41
15998: PUSH
15999: LD_EXP 57
16003: AND
16004: IFFALSE 16087
16006: GO 16008
16008: DISABLE
16009: LD_INT 0
16011: PPUSH
16012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16013: LD_ADDR_VAR 0 2
16017: PUSH
16018: LD_INT 22
16020: PUSH
16021: LD_OWVAR 2
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: LD_INT 21
16032: PUSH
16033: LD_INT 3
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PPUSH
16044: CALL_OW 69
16048: ST_TO_ADDR
// if not tmp then
16049: LD_VAR 0 2
16053: NOT
16054: IFFALSE 16058
// exit ;
16056: GO 16087
// for i in tmp do
16058: LD_ADDR_VAR 0 1
16062: PUSH
16063: LD_VAR 0 2
16067: PUSH
16068: FOR_IN
16069: IFFALSE 16085
// SetBLevel ( i , 10 ) ;
16071: LD_VAR 0 1
16075: PPUSH
16076: LD_INT 10
16078: PPUSH
16079: CALL_OW 241
16083: GO 16068
16085: POP
16086: POP
// end ;
16087: PPOPN 2
16089: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16090: LD_EXP 41
16094: PUSH
16095: LD_EXP 58
16099: AND
16100: IFFALSE 16211
16102: GO 16104
16104: DISABLE
16105: LD_INT 0
16107: PPUSH
16108: PPUSH
16109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16110: LD_ADDR_VAR 0 3
16114: PUSH
16115: LD_INT 22
16117: PUSH
16118: LD_OWVAR 2
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: LD_INT 25
16129: PUSH
16130: LD_INT 1
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PPUSH
16141: CALL_OW 69
16145: ST_TO_ADDR
// if not tmp then
16146: LD_VAR 0 3
16150: NOT
16151: IFFALSE 16155
// exit ;
16153: GO 16211
// un := tmp [ rand ( 1 , tmp ) ] ;
16155: LD_ADDR_VAR 0 2
16159: PUSH
16160: LD_VAR 0 3
16164: PUSH
16165: LD_INT 1
16167: PPUSH
16168: LD_VAR 0 3
16172: PPUSH
16173: CALL_OW 12
16177: ARRAY
16178: ST_TO_ADDR
// if Crawls ( un ) then
16179: LD_VAR 0 2
16183: PPUSH
16184: CALL_OW 318
16188: IFFALSE 16199
// ComWalk ( un ) ;
16190: LD_VAR 0 2
16194: PPUSH
16195: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16199: LD_VAR 0 2
16203: PPUSH
16204: LD_INT 5
16206: PPUSH
16207: CALL_OW 336
// end ;
16211: PPOPN 3
16213: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16214: LD_EXP 41
16218: PUSH
16219: LD_EXP 59
16223: AND
16224: PUSH
16225: LD_OWVAR 67
16229: PUSH
16230: LD_INT 3
16232: LESS
16233: AND
16234: IFFALSE 16253
16236: GO 16238
16238: DISABLE
// Difficulty := Difficulty + 1 ;
16239: LD_ADDR_OWVAR 67
16243: PUSH
16244: LD_OWVAR 67
16248: PUSH
16249: LD_INT 1
16251: PLUS
16252: ST_TO_ADDR
16253: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16254: LD_EXP 41
16258: PUSH
16259: LD_EXP 60
16263: AND
16264: IFFALSE 16367
16266: GO 16268
16268: DISABLE
16269: LD_INT 0
16271: PPUSH
// begin for i := 1 to 5 do
16272: LD_ADDR_VAR 0 1
16276: PUSH
16277: DOUBLE
16278: LD_INT 1
16280: DEC
16281: ST_TO_ADDR
16282: LD_INT 5
16284: PUSH
16285: FOR_TO
16286: IFFALSE 16365
// begin uc_nation := nation_nature ;
16288: LD_ADDR_OWVAR 21
16292: PUSH
16293: LD_INT 0
16295: ST_TO_ADDR
// uc_side := 0 ;
16296: LD_ADDR_OWVAR 20
16300: PUSH
16301: LD_INT 0
16303: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16304: LD_ADDR_OWVAR 29
16308: PUSH
16309: LD_INT 12
16311: PUSH
16312: LD_INT 12
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: ST_TO_ADDR
// hc_agressivity := 20 ;
16319: LD_ADDR_OWVAR 35
16323: PUSH
16324: LD_INT 20
16326: ST_TO_ADDR
// hc_class := class_tiger ;
16327: LD_ADDR_OWVAR 28
16331: PUSH
16332: LD_INT 14
16334: ST_TO_ADDR
// hc_gallery :=  ;
16335: LD_ADDR_OWVAR 33
16339: PUSH
16340: LD_STRING 
16342: ST_TO_ADDR
// hc_name :=  ;
16343: LD_ADDR_OWVAR 26
16347: PUSH
16348: LD_STRING 
16350: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16351: CALL_OW 44
16355: PPUSH
16356: LD_INT 0
16358: PPUSH
16359: CALL_OW 51
// end ;
16363: GO 16285
16365: POP
16366: POP
// end ;
16367: PPOPN 1
16369: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16370: LD_EXP 41
16374: PUSH
16375: LD_EXP 61
16379: AND
16380: IFFALSE 16389
16382: GO 16384
16384: DISABLE
// StreamSibBomb ;
16385: CALL 16390 0 0
16389: END
// export function StreamSibBomb ; var i , x , y ; begin
16390: LD_INT 0
16392: PPUSH
16393: PPUSH
16394: PPUSH
16395: PPUSH
// result := false ;
16396: LD_ADDR_VAR 0 1
16400: PUSH
16401: LD_INT 0
16403: ST_TO_ADDR
// for i := 1 to 16 do
16404: LD_ADDR_VAR 0 2
16408: PUSH
16409: DOUBLE
16410: LD_INT 1
16412: DEC
16413: ST_TO_ADDR
16414: LD_INT 16
16416: PUSH
16417: FOR_TO
16418: IFFALSE 16617
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16420: LD_ADDR_VAR 0 3
16424: PUSH
16425: LD_INT 10
16427: PUSH
16428: LD_INT 20
16430: PUSH
16431: LD_INT 30
16433: PUSH
16434: LD_INT 40
16436: PUSH
16437: LD_INT 50
16439: PUSH
16440: LD_INT 60
16442: PUSH
16443: LD_INT 70
16445: PUSH
16446: LD_INT 80
16448: PUSH
16449: LD_INT 90
16451: PUSH
16452: LD_INT 100
16454: PUSH
16455: LD_INT 110
16457: PUSH
16458: LD_INT 120
16460: PUSH
16461: LD_INT 130
16463: PUSH
16464: LD_INT 140
16466: PUSH
16467: LD_INT 150
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 1
16489: PPUSH
16490: LD_INT 15
16492: PPUSH
16493: CALL_OW 12
16497: ARRAY
16498: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16499: LD_ADDR_VAR 0 4
16503: PUSH
16504: LD_INT 10
16506: PUSH
16507: LD_INT 20
16509: PUSH
16510: LD_INT 30
16512: PUSH
16513: LD_INT 40
16515: PUSH
16516: LD_INT 50
16518: PUSH
16519: LD_INT 60
16521: PUSH
16522: LD_INT 70
16524: PUSH
16525: LD_INT 80
16527: PUSH
16528: LD_INT 90
16530: PUSH
16531: LD_INT 100
16533: PUSH
16534: LD_INT 110
16536: PUSH
16537: LD_INT 120
16539: PUSH
16540: LD_INT 130
16542: PUSH
16543: LD_INT 140
16545: PUSH
16546: LD_INT 150
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 1
16568: PPUSH
16569: LD_INT 15
16571: PPUSH
16572: CALL_OW 12
16576: ARRAY
16577: ST_TO_ADDR
// if ValidHex ( x , y ) then
16578: LD_VAR 0 3
16582: PPUSH
16583: LD_VAR 0 4
16587: PPUSH
16588: CALL_OW 488
16592: IFFALSE 16615
// begin result := [ x , y ] ;
16594: LD_ADDR_VAR 0 1
16598: PUSH
16599: LD_VAR 0 3
16603: PUSH
16604: LD_VAR 0 4
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: ST_TO_ADDR
// break ;
16613: GO 16617
// end ; end ;
16615: GO 16417
16617: POP
16618: POP
// if result then
16619: LD_VAR 0 1
16623: IFFALSE 16683
// begin ToLua ( playSibBomb() ) ;
16625: LD_STRING playSibBomb()
16627: PPUSH
16628: CALL_OW 559
// wait ( 0 0$14 ) ;
16632: LD_INT 490
16634: PPUSH
16635: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16639: LD_VAR 0 1
16643: PUSH
16644: LD_INT 1
16646: ARRAY
16647: PPUSH
16648: LD_VAR 0 1
16652: PUSH
16653: LD_INT 2
16655: ARRAY
16656: PPUSH
16657: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16661: LD_VAR 0 1
16665: PUSH
16666: LD_INT 1
16668: ARRAY
16669: PPUSH
16670: LD_VAR 0 1
16674: PUSH
16675: LD_INT 2
16677: ARRAY
16678: PPUSH
16679: CALL_OW 429
// end ; end ;
16683: LD_VAR 0 1
16687: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16688: LD_EXP 41
16692: PUSH
16693: LD_EXP 63
16697: AND
16698: IFFALSE 16710
16700: GO 16702
16702: DISABLE
// YouLost (  ) ;
16703: LD_STRING 
16705: PPUSH
16706: CALL_OW 104
16710: END
// every 0 0$1 trigger StreamModeActive and sFog do
16711: LD_EXP 41
16715: PUSH
16716: LD_EXP 62
16720: AND
16721: IFFALSE 16735
16723: GO 16725
16725: DISABLE
// FogOff ( your_side ) ;
16726: LD_OWVAR 2
16730: PPUSH
16731: CALL_OW 344
16735: END
// every 0 0$1 trigger StreamModeActive and sSun do
16736: LD_EXP 41
16740: PUSH
16741: LD_EXP 64
16745: AND
16746: IFFALSE 16774
16748: GO 16750
16750: DISABLE
// begin solar_recharge_percent := 0 ;
16751: LD_ADDR_OWVAR 79
16755: PUSH
16756: LD_INT 0
16758: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16759: LD_INT 10500
16761: PPUSH
16762: CALL_OW 67
// solar_recharge_percent := 100 ;
16766: LD_ADDR_OWVAR 79
16770: PUSH
16771: LD_INT 100
16773: ST_TO_ADDR
// end ;
16774: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16775: LD_EXP 41
16779: PUSH
16780: LD_EXP 65
16784: AND
16785: IFFALSE 17024
16787: GO 16789
16789: DISABLE
16790: LD_INT 0
16792: PPUSH
16793: PPUSH
16794: PPUSH
// begin tmp := [ ] ;
16795: LD_ADDR_VAR 0 3
16799: PUSH
16800: EMPTY
16801: ST_TO_ADDR
// for i := 1 to 6 do
16802: LD_ADDR_VAR 0 1
16806: PUSH
16807: DOUBLE
16808: LD_INT 1
16810: DEC
16811: ST_TO_ADDR
16812: LD_INT 6
16814: PUSH
16815: FOR_TO
16816: IFFALSE 16921
// begin uc_nation := nation_nature ;
16818: LD_ADDR_OWVAR 21
16822: PUSH
16823: LD_INT 0
16825: ST_TO_ADDR
// uc_side := 0 ;
16826: LD_ADDR_OWVAR 20
16830: PUSH
16831: LD_INT 0
16833: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16834: LD_ADDR_OWVAR 29
16838: PUSH
16839: LD_INT 12
16841: PUSH
16842: LD_INT 12
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: ST_TO_ADDR
// hc_agressivity := 20 ;
16849: LD_ADDR_OWVAR 35
16853: PUSH
16854: LD_INT 20
16856: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16857: LD_ADDR_OWVAR 28
16861: PUSH
16862: LD_INT 17
16864: ST_TO_ADDR
// hc_gallery :=  ;
16865: LD_ADDR_OWVAR 33
16869: PUSH
16870: LD_STRING 
16872: ST_TO_ADDR
// hc_name :=  ;
16873: LD_ADDR_OWVAR 26
16877: PUSH
16878: LD_STRING 
16880: ST_TO_ADDR
// un := CreateHuman ;
16881: LD_ADDR_VAR 0 2
16885: PUSH
16886: CALL_OW 44
16890: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16891: LD_VAR 0 2
16895: PPUSH
16896: LD_INT 1
16898: PPUSH
16899: CALL_OW 51
// tmp := tmp ^ un ;
16903: LD_ADDR_VAR 0 3
16907: PUSH
16908: LD_VAR 0 3
16912: PUSH
16913: LD_VAR 0 2
16917: ADD
16918: ST_TO_ADDR
// end ;
16919: GO 16815
16921: POP
16922: POP
// repeat wait ( 0 0$1 ) ;
16923: LD_INT 35
16925: PPUSH
16926: CALL_OW 67
// for un in tmp do
16930: LD_ADDR_VAR 0 2
16934: PUSH
16935: LD_VAR 0 3
16939: PUSH
16940: FOR_IN
16941: IFFALSE 17015
// begin if IsDead ( un ) then
16943: LD_VAR 0 2
16947: PPUSH
16948: CALL_OW 301
16952: IFFALSE 16972
// begin tmp := tmp diff un ;
16954: LD_ADDR_VAR 0 3
16958: PUSH
16959: LD_VAR 0 3
16963: PUSH
16964: LD_VAR 0 2
16968: DIFF
16969: ST_TO_ADDR
// continue ;
16970: GO 16940
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16972: LD_VAR 0 2
16976: PPUSH
16977: LD_INT 3
16979: PUSH
16980: LD_INT 22
16982: PUSH
16983: LD_INT 0
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PPUSH
16994: CALL_OW 69
16998: PPUSH
16999: LD_VAR 0 2
17003: PPUSH
17004: CALL_OW 74
17008: PPUSH
17009: CALL_OW 115
// end ;
17013: GO 16940
17015: POP
17016: POP
// until not tmp ;
17017: LD_VAR 0 3
17021: NOT
17022: IFFALSE 16923
// end ;
17024: PPOPN 3
17026: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17027: LD_EXP 41
17031: PUSH
17032: LD_EXP 66
17036: AND
17037: IFFALSE 17091
17039: GO 17041
17041: DISABLE
// begin ToLua ( displayTroll(); ) ;
17042: LD_STRING displayTroll();
17044: PPUSH
17045: CALL_OW 559
// wait ( 3 3$00 ) ;
17049: LD_INT 6300
17051: PPUSH
17052: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17056: LD_STRING hideTroll();
17058: PPUSH
17059: CALL_OW 559
// wait ( 1 1$00 ) ;
17063: LD_INT 2100
17065: PPUSH
17066: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17070: LD_STRING displayTroll();
17072: PPUSH
17073: CALL_OW 559
// wait ( 1 1$00 ) ;
17077: LD_INT 2100
17079: PPUSH
17080: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17084: LD_STRING hideTroll();
17086: PPUSH
17087: CALL_OW 559
// end ;
17091: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17092: LD_EXP 41
17096: PUSH
17097: LD_EXP 67
17101: AND
17102: IFFALSE 17165
17104: GO 17106
17106: DISABLE
17107: LD_INT 0
17109: PPUSH
// begin p := 0 ;
17110: LD_ADDR_VAR 0 1
17114: PUSH
17115: LD_INT 0
17117: ST_TO_ADDR
// repeat game_speed := 1 ;
17118: LD_ADDR_OWVAR 65
17122: PUSH
17123: LD_INT 1
17125: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17126: LD_INT 35
17128: PPUSH
17129: CALL_OW 67
// p := p + 1 ;
17133: LD_ADDR_VAR 0 1
17137: PUSH
17138: LD_VAR 0 1
17142: PUSH
17143: LD_INT 1
17145: PLUS
17146: ST_TO_ADDR
// until p >= 60 ;
17147: LD_VAR 0 1
17151: PUSH
17152: LD_INT 60
17154: GREATEREQUAL
17155: IFFALSE 17118
// game_speed := 4 ;
17157: LD_ADDR_OWVAR 65
17161: PUSH
17162: LD_INT 4
17164: ST_TO_ADDR
// end ;
17165: PPOPN 1
17167: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17168: LD_EXP 41
17172: PUSH
17173: LD_EXP 68
17177: AND
17178: IFFALSE 17324
17180: GO 17182
17182: DISABLE
17183: LD_INT 0
17185: PPUSH
17186: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17187: LD_ADDR_VAR 0 1
17191: PUSH
17192: LD_INT 22
17194: PUSH
17195: LD_OWVAR 2
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 2
17206: PUSH
17207: LD_INT 30
17209: PUSH
17210: LD_INT 0
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 30
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: LIST
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 69
17240: ST_TO_ADDR
// if not depot then
17241: LD_VAR 0 1
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 17324
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_VAR 0 1
17259: PUSH
17260: LD_INT 1
17262: PPUSH
17263: LD_VAR 0 1
17267: PPUSH
17268: CALL_OW 12
17272: ARRAY
17273: PPUSH
17274: CALL_OW 274
17278: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17279: LD_VAR 0 2
17283: PPUSH
17284: LD_INT 1
17286: PPUSH
17287: LD_INT 0
17289: PPUSH
17290: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17294: LD_VAR 0 2
17298: PPUSH
17299: LD_INT 2
17301: PPUSH
17302: LD_INT 0
17304: PPUSH
17305: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17309: LD_VAR 0 2
17313: PPUSH
17314: LD_INT 3
17316: PPUSH
17317: LD_INT 0
17319: PPUSH
17320: CALL_OW 277
// end ;
17324: PPOPN 2
17326: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17327: LD_EXP 41
17331: PUSH
17332: LD_EXP 69
17336: AND
17337: IFFALSE 17434
17339: GO 17341
17341: DISABLE
17342: LD_INT 0
17344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17345: LD_ADDR_VAR 0 1
17349: PUSH
17350: LD_INT 22
17352: PUSH
17353: LD_OWVAR 2
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 21
17364: PUSH
17365: LD_INT 1
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 3
17374: PUSH
17375: LD_INT 23
17377: PUSH
17378: LD_INT 0
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: LIST
17393: PPUSH
17394: CALL_OW 69
17398: ST_TO_ADDR
// if not tmp then
17399: LD_VAR 0 1
17403: NOT
17404: IFFALSE 17408
// exit ;
17406: GO 17434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17408: LD_VAR 0 1
17412: PUSH
17413: LD_INT 1
17415: PPUSH
17416: LD_VAR 0 1
17420: PPUSH
17421: CALL_OW 12
17425: ARRAY
17426: PPUSH
17427: LD_INT 200
17429: PPUSH
17430: CALL_OW 234
// end ;
17434: PPOPN 1
17436: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17437: LD_EXP 41
17441: PUSH
17442: LD_EXP 70
17446: AND
17447: IFFALSE 17526
17449: GO 17451
17451: DISABLE
17452: LD_INT 0
17454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17455: LD_ADDR_VAR 0 1
17459: PUSH
17460: LD_INT 22
17462: PUSH
17463: LD_OWVAR 2
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 21
17474: PUSH
17475: LD_INT 2
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PPUSH
17486: CALL_OW 69
17490: ST_TO_ADDR
// if not tmp then
17491: LD_VAR 0 1
17495: NOT
17496: IFFALSE 17500
// exit ;
17498: GO 17526
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17500: LD_VAR 0 1
17504: PUSH
17505: LD_INT 1
17507: PPUSH
17508: LD_VAR 0 1
17512: PPUSH
17513: CALL_OW 12
17517: ARRAY
17518: PPUSH
17519: LD_INT 60
17521: PPUSH
17522: CALL_OW 234
// end ;
17526: PPOPN 1
17528: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17529: LD_EXP 41
17533: PUSH
17534: LD_EXP 71
17538: AND
17539: IFFALSE 17638
17541: GO 17543
17543: DISABLE
17544: LD_INT 0
17546: PPUSH
17547: PPUSH
// begin enable ;
17548: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17549: LD_ADDR_VAR 0 1
17553: PUSH
17554: LD_INT 22
17556: PUSH
17557: LD_OWVAR 2
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 61
17568: PUSH
17569: EMPTY
17570: LIST
17571: PUSH
17572: LD_INT 33
17574: PUSH
17575: LD_INT 2
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: PPUSH
17587: CALL_OW 69
17591: ST_TO_ADDR
// if not tmp then
17592: LD_VAR 0 1
17596: NOT
17597: IFFALSE 17601
// exit ;
17599: GO 17638
// for i in tmp do
17601: LD_ADDR_VAR 0 2
17605: PUSH
17606: LD_VAR 0 1
17610: PUSH
17611: FOR_IN
17612: IFFALSE 17636
// if IsControledBy ( i ) then
17614: LD_VAR 0 2
17618: PPUSH
17619: CALL_OW 312
17623: IFFALSE 17634
// ComUnlink ( i ) ;
17625: LD_VAR 0 2
17629: PPUSH
17630: CALL_OW 136
17634: GO 17611
17636: POP
17637: POP
// end ;
17638: PPOPN 2
17640: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17641: LD_EXP 41
17645: PUSH
17646: LD_EXP 72
17650: AND
17651: IFFALSE 17791
17653: GO 17655
17655: DISABLE
17656: LD_INT 0
17658: PPUSH
17659: PPUSH
// begin ToLua ( displayPowell(); ) ;
17660: LD_STRING displayPowell();
17662: PPUSH
17663: CALL_OW 559
// uc_side := 0 ;
17667: LD_ADDR_OWVAR 20
17671: PUSH
17672: LD_INT 0
17674: ST_TO_ADDR
// uc_nation := 2 ;
17675: LD_ADDR_OWVAR 21
17679: PUSH
17680: LD_INT 2
17682: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17683: LD_ADDR_OWVAR 37
17687: PUSH
17688: LD_INT 14
17690: ST_TO_ADDR
// vc_engine := engine_siberite ;
17691: LD_ADDR_OWVAR 39
17695: PUSH
17696: LD_INT 3
17698: ST_TO_ADDR
// vc_control := control_apeman ;
17699: LD_ADDR_OWVAR 38
17703: PUSH
17704: LD_INT 5
17706: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17707: LD_ADDR_OWVAR 40
17711: PUSH
17712: LD_INT 29
17714: ST_TO_ADDR
// un := CreateVehicle ;
17715: LD_ADDR_VAR 0 2
17719: PUSH
17720: CALL_OW 45
17724: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17725: LD_VAR 0 2
17729: PPUSH
17730: LD_INT 1
17732: PPUSH
17733: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17737: LD_INT 35
17739: PPUSH
17740: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17744: LD_VAR 0 2
17748: PPUSH
17749: LD_INT 22
17751: PUSH
17752: LD_OWVAR 2
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PPUSH
17761: CALL_OW 69
17765: PPUSH
17766: LD_VAR 0 2
17770: PPUSH
17771: CALL_OW 74
17775: PPUSH
17776: CALL_OW 115
// until IsDead ( un ) ;
17780: LD_VAR 0 2
17784: PPUSH
17785: CALL_OW 301
17789: IFFALSE 17737
// end ;
17791: PPOPN 2
17793: END
// every 0 0$1 trigger StreamModeActive and sStu do
17794: LD_EXP 41
17798: PUSH
17799: LD_EXP 80
17803: AND
17804: IFFALSE 17820
17806: GO 17808
17808: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17809: LD_STRING displayStucuk();
17811: PPUSH
17812: CALL_OW 559
// ResetFog ;
17816: CALL_OW 335
// end ;
17820: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17821: LD_EXP 41
17825: PUSH
17826: LD_EXP 73
17830: AND
17831: IFFALSE 17972
17833: GO 17835
17835: DISABLE
17836: LD_INT 0
17838: PPUSH
17839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17840: LD_ADDR_VAR 0 2
17844: PUSH
17845: LD_INT 22
17847: PUSH
17848: LD_OWVAR 2
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 21
17859: PUSH
17860: LD_INT 1
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PPUSH
17871: CALL_OW 69
17875: ST_TO_ADDR
// if not tmp then
17876: LD_VAR 0 2
17880: NOT
17881: IFFALSE 17885
// exit ;
17883: GO 17972
// un := tmp [ rand ( 1 , tmp ) ] ;
17885: LD_ADDR_VAR 0 1
17889: PUSH
17890: LD_VAR 0 2
17894: PUSH
17895: LD_INT 1
17897: PPUSH
17898: LD_VAR 0 2
17902: PPUSH
17903: CALL_OW 12
17907: ARRAY
17908: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17909: LD_VAR 0 1
17913: PPUSH
17914: LD_INT 0
17916: PPUSH
17917: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17921: LD_VAR 0 1
17925: PPUSH
17926: LD_OWVAR 3
17930: PUSH
17931: LD_VAR 0 1
17935: DIFF
17936: PPUSH
17937: LD_VAR 0 1
17941: PPUSH
17942: CALL_OW 74
17946: PPUSH
17947: CALL_OW 115
// wait ( 0 0$20 ) ;
17951: LD_INT 700
17953: PPUSH
17954: CALL_OW 67
// SetSide ( un , your_side ) ;
17958: LD_VAR 0 1
17962: PPUSH
17963: LD_OWVAR 2
17967: PPUSH
17968: CALL_OW 235
// end ;
17972: PPOPN 2
17974: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17975: LD_EXP 41
17979: PUSH
17980: LD_EXP 74
17984: AND
17985: IFFALSE 18091
17987: GO 17989
17989: DISABLE
17990: LD_INT 0
17992: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17993: LD_ADDR_VAR 0 1
17997: PUSH
17998: LD_INT 22
18000: PUSH
18001: LD_OWVAR 2
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 2
18012: PUSH
18013: LD_INT 30
18015: PUSH
18016: LD_INT 0
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 30
18025: PUSH
18026: LD_INT 1
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: LIST
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PPUSH
18042: CALL_OW 69
18046: ST_TO_ADDR
// if not depot then
18047: LD_VAR 0 1
18051: NOT
18052: IFFALSE 18056
// exit ;
18054: GO 18091
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18056: LD_VAR 0 1
18060: PUSH
18061: LD_INT 1
18063: ARRAY
18064: PPUSH
18065: CALL_OW 250
18069: PPUSH
18070: LD_VAR 0 1
18074: PUSH
18075: LD_INT 1
18077: ARRAY
18078: PPUSH
18079: CALL_OW 251
18083: PPUSH
18084: LD_INT 70
18086: PPUSH
18087: CALL_OW 495
// end ;
18091: PPOPN 1
18093: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18094: LD_EXP 41
18098: PUSH
18099: LD_EXP 75
18103: AND
18104: IFFALSE 18315
18106: GO 18108
18108: DISABLE
18109: LD_INT 0
18111: PPUSH
18112: PPUSH
18113: PPUSH
18114: PPUSH
18115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18116: LD_ADDR_VAR 0 5
18120: PUSH
18121: LD_INT 22
18123: PUSH
18124: LD_OWVAR 2
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 21
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PPUSH
18147: CALL_OW 69
18151: ST_TO_ADDR
// if not tmp then
18152: LD_VAR 0 5
18156: NOT
18157: IFFALSE 18161
// exit ;
18159: GO 18315
// for i in tmp do
18161: LD_ADDR_VAR 0 1
18165: PUSH
18166: LD_VAR 0 5
18170: PUSH
18171: FOR_IN
18172: IFFALSE 18313
// begin d := rand ( 0 , 5 ) ;
18174: LD_ADDR_VAR 0 4
18178: PUSH
18179: LD_INT 0
18181: PPUSH
18182: LD_INT 5
18184: PPUSH
18185: CALL_OW 12
18189: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18190: LD_ADDR_VAR 0 2
18194: PUSH
18195: LD_VAR 0 1
18199: PPUSH
18200: CALL_OW 250
18204: PPUSH
18205: LD_VAR 0 4
18209: PPUSH
18210: LD_INT 3
18212: PPUSH
18213: LD_INT 12
18215: PPUSH
18216: CALL_OW 12
18220: PPUSH
18221: CALL_OW 272
18225: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18226: LD_ADDR_VAR 0 3
18230: PUSH
18231: LD_VAR 0 1
18235: PPUSH
18236: CALL_OW 251
18240: PPUSH
18241: LD_VAR 0 4
18245: PPUSH
18246: LD_INT 3
18248: PPUSH
18249: LD_INT 12
18251: PPUSH
18252: CALL_OW 12
18256: PPUSH
18257: CALL_OW 273
18261: ST_TO_ADDR
// if ValidHex ( x , y ) then
18262: LD_VAR 0 2
18266: PPUSH
18267: LD_VAR 0 3
18271: PPUSH
18272: CALL_OW 488
18276: IFFALSE 18311
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18278: LD_VAR 0 1
18282: PPUSH
18283: LD_VAR 0 2
18287: PPUSH
18288: LD_VAR 0 3
18292: PPUSH
18293: LD_INT 3
18295: PPUSH
18296: LD_INT 6
18298: PPUSH
18299: CALL_OW 12
18303: PPUSH
18304: LD_INT 1
18306: PPUSH
18307: CALL_OW 483
// end ;
18311: GO 18171
18313: POP
18314: POP
// end ;
18315: PPOPN 5
18317: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18318: LD_EXP 41
18322: PUSH
18323: LD_EXP 76
18327: AND
18328: IFFALSE 18422
18330: GO 18332
18332: DISABLE
18333: LD_INT 0
18335: PPUSH
18336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18337: LD_ADDR_VAR 0 2
18341: PUSH
18342: LD_INT 22
18344: PUSH
18345: LD_OWVAR 2
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 32
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 21
18366: PUSH
18367: LD_INT 2
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: PPUSH
18379: CALL_OW 69
18383: ST_TO_ADDR
// if not tmp then
18384: LD_VAR 0 2
18388: NOT
18389: IFFALSE 18393
// exit ;
18391: GO 18422
// for i in tmp do
18393: LD_ADDR_VAR 0 1
18397: PUSH
18398: LD_VAR 0 2
18402: PUSH
18403: FOR_IN
18404: IFFALSE 18420
// SetFuel ( i , 0 ) ;
18406: LD_VAR 0 1
18410: PPUSH
18411: LD_INT 0
18413: PPUSH
18414: CALL_OW 240
18418: GO 18403
18420: POP
18421: POP
// end ;
18422: PPOPN 2
18424: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18425: LD_EXP 41
18429: PUSH
18430: LD_EXP 77
18434: AND
18435: IFFALSE 18501
18437: GO 18439
18439: DISABLE
18440: LD_INT 0
18442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18443: LD_ADDR_VAR 0 1
18447: PUSH
18448: LD_INT 22
18450: PUSH
18451: LD_OWVAR 2
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 30
18462: PUSH
18463: LD_INT 29
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PPUSH
18474: CALL_OW 69
18478: ST_TO_ADDR
// if not tmp then
18479: LD_VAR 0 1
18483: NOT
18484: IFFALSE 18488
// exit ;
18486: GO 18501
// DestroyUnit ( tmp [ 1 ] ) ;
18488: LD_VAR 0 1
18492: PUSH
18493: LD_INT 1
18495: ARRAY
18496: PPUSH
18497: CALL_OW 65
// end ;
18501: PPOPN 1
18503: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18504: LD_EXP 41
18508: PUSH
18509: LD_EXP 79
18513: AND
18514: IFFALSE 18643
18516: GO 18518
18518: DISABLE
18519: LD_INT 0
18521: PPUSH
// begin uc_side := 0 ;
18522: LD_ADDR_OWVAR 20
18526: PUSH
18527: LD_INT 0
18529: ST_TO_ADDR
// uc_nation := nation_arabian ;
18530: LD_ADDR_OWVAR 21
18534: PUSH
18535: LD_INT 2
18537: ST_TO_ADDR
// hc_gallery :=  ;
18538: LD_ADDR_OWVAR 33
18542: PUSH
18543: LD_STRING 
18545: ST_TO_ADDR
// hc_name :=  ;
18546: LD_ADDR_OWVAR 26
18550: PUSH
18551: LD_STRING 
18553: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18554: LD_INT 1
18556: PPUSH
18557: LD_INT 11
18559: PPUSH
18560: LD_INT 10
18562: PPUSH
18563: CALL_OW 380
// un := CreateHuman ;
18567: LD_ADDR_VAR 0 1
18571: PUSH
18572: CALL_OW 44
18576: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18577: LD_VAR 0 1
18581: PPUSH
18582: LD_INT 1
18584: PPUSH
18585: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18589: LD_INT 35
18591: PPUSH
18592: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18596: LD_VAR 0 1
18600: PPUSH
18601: LD_INT 22
18603: PUSH
18604: LD_OWVAR 2
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PPUSH
18613: CALL_OW 69
18617: PPUSH
18618: LD_VAR 0 1
18622: PPUSH
18623: CALL_OW 74
18627: PPUSH
18628: CALL_OW 115
// until IsDead ( un ) ;
18632: LD_VAR 0 1
18636: PPUSH
18637: CALL_OW 301
18641: IFFALSE 18589
// end ;
18643: PPOPN 1
18645: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18646: LD_EXP 41
18650: PUSH
18651: LD_EXP 81
18655: AND
18656: IFFALSE 18668
18658: GO 18660
18660: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18661: LD_STRING earthquake(getX(game), 0, 32)
18663: PPUSH
18664: CALL_OW 559
18668: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18669: LD_EXP 41
18673: PUSH
18674: LD_EXP 82
18678: AND
18679: IFFALSE 18770
18681: GO 18683
18683: DISABLE
18684: LD_INT 0
18686: PPUSH
// begin enable ;
18687: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18688: LD_ADDR_VAR 0 1
18692: PUSH
18693: LD_INT 22
18695: PUSH
18696: LD_OWVAR 2
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 21
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 33
18717: PUSH
18718: LD_INT 3
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: LIST
18729: PPUSH
18730: CALL_OW 69
18734: ST_TO_ADDR
// if not tmp then
18735: LD_VAR 0 1
18739: NOT
18740: IFFALSE 18744
// exit ;
18742: GO 18770
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18744: LD_VAR 0 1
18748: PUSH
18749: LD_INT 1
18751: PPUSH
18752: LD_VAR 0 1
18756: PPUSH
18757: CALL_OW 12
18761: ARRAY
18762: PPUSH
18763: LD_INT 1
18765: PPUSH
18766: CALL_OW 234
// end ;
18770: PPOPN 1
18772: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18773: LD_EXP 41
18777: PUSH
18778: LD_EXP 83
18782: AND
18783: IFFALSE 18924
18785: GO 18787
18787: DISABLE
18788: LD_INT 0
18790: PPUSH
18791: PPUSH
18792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18793: LD_ADDR_VAR 0 3
18797: PUSH
18798: LD_INT 22
18800: PUSH
18801: LD_OWVAR 2
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 25
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PPUSH
18824: CALL_OW 69
18828: ST_TO_ADDR
// if not tmp then
18829: LD_VAR 0 3
18833: NOT
18834: IFFALSE 18838
// exit ;
18836: GO 18924
// un := tmp [ rand ( 1 , tmp ) ] ;
18838: LD_ADDR_VAR 0 2
18842: PUSH
18843: LD_VAR 0 3
18847: PUSH
18848: LD_INT 1
18850: PPUSH
18851: LD_VAR 0 3
18855: PPUSH
18856: CALL_OW 12
18860: ARRAY
18861: ST_TO_ADDR
// if Crawls ( un ) then
18862: LD_VAR 0 2
18866: PPUSH
18867: CALL_OW 318
18871: IFFALSE 18882
// ComWalk ( un ) ;
18873: LD_VAR 0 2
18877: PPUSH
18878: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18882: LD_VAR 0 2
18886: PPUSH
18887: LD_INT 9
18889: PPUSH
18890: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18894: LD_INT 28
18896: PPUSH
18897: LD_OWVAR 2
18901: PPUSH
18902: LD_INT 2
18904: PPUSH
18905: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18909: LD_INT 29
18911: PPUSH
18912: LD_OWVAR 2
18916: PPUSH
18917: LD_INT 2
18919: PPUSH
18920: CALL_OW 322
// end ;
18924: PPOPN 3
18926: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18927: LD_EXP 41
18931: PUSH
18932: LD_EXP 84
18936: AND
18937: IFFALSE 19048
18939: GO 18941
18941: DISABLE
18942: LD_INT 0
18944: PPUSH
18945: PPUSH
18946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18947: LD_ADDR_VAR 0 3
18951: PUSH
18952: LD_INT 22
18954: PUSH
18955: LD_OWVAR 2
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 25
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PPUSH
18978: CALL_OW 69
18982: ST_TO_ADDR
// if not tmp then
18983: LD_VAR 0 3
18987: NOT
18988: IFFALSE 18992
// exit ;
18990: GO 19048
// un := tmp [ rand ( 1 , tmp ) ] ;
18992: LD_ADDR_VAR 0 2
18996: PUSH
18997: LD_VAR 0 3
19001: PUSH
19002: LD_INT 1
19004: PPUSH
19005: LD_VAR 0 3
19009: PPUSH
19010: CALL_OW 12
19014: ARRAY
19015: ST_TO_ADDR
// if Crawls ( un ) then
19016: LD_VAR 0 2
19020: PPUSH
19021: CALL_OW 318
19025: IFFALSE 19036
// ComWalk ( un ) ;
19027: LD_VAR 0 2
19031: PPUSH
19032: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19036: LD_VAR 0 2
19040: PPUSH
19041: LD_INT 8
19043: PPUSH
19044: CALL_OW 336
// end ;
19048: PPOPN 3
19050: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19051: LD_EXP 41
19055: PUSH
19056: LD_EXP 85
19060: AND
19061: IFFALSE 19205
19063: GO 19065
19065: DISABLE
19066: LD_INT 0
19068: PPUSH
19069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19070: LD_ADDR_VAR 0 2
19074: PUSH
19075: LD_INT 22
19077: PUSH
19078: LD_OWVAR 2
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 21
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 2
19099: PUSH
19100: LD_INT 34
19102: PUSH
19103: LD_INT 12
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 34
19112: PUSH
19113: LD_INT 51
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 34
19122: PUSH
19123: LD_INT 32
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: LIST
19140: PPUSH
19141: CALL_OW 69
19145: ST_TO_ADDR
// if not tmp then
19146: LD_VAR 0 2
19150: NOT
19151: IFFALSE 19155
// exit ;
19153: GO 19205
// for i in tmp do
19155: LD_ADDR_VAR 0 1
19159: PUSH
19160: LD_VAR 0 2
19164: PUSH
19165: FOR_IN
19166: IFFALSE 19203
// if GetCargo ( i , mat_artifact ) = 0 then
19168: LD_VAR 0 1
19172: PPUSH
19173: LD_INT 4
19175: PPUSH
19176: CALL_OW 289
19180: PUSH
19181: LD_INT 0
19183: EQUAL
19184: IFFALSE 19201
// SetCargo ( i , mat_siberit , 100 ) ;
19186: LD_VAR 0 1
19190: PPUSH
19191: LD_INT 3
19193: PPUSH
19194: LD_INT 100
19196: PPUSH
19197: CALL_OW 290
19201: GO 19165
19203: POP
19204: POP
// end ;
19205: PPOPN 2
19207: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19208: LD_EXP 41
19212: PUSH
19213: LD_EXP 86
19217: AND
19218: IFFALSE 19401
19220: GO 19222
19222: DISABLE
19223: LD_INT 0
19225: PPUSH
19226: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19227: LD_ADDR_VAR 0 2
19231: PUSH
19232: LD_INT 22
19234: PUSH
19235: LD_OWVAR 2
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PPUSH
19244: CALL_OW 69
19248: ST_TO_ADDR
// if not tmp then
19249: LD_VAR 0 2
19253: NOT
19254: IFFALSE 19258
// exit ;
19256: GO 19401
// for i := 1 to 2 do
19258: LD_ADDR_VAR 0 1
19262: PUSH
19263: DOUBLE
19264: LD_INT 1
19266: DEC
19267: ST_TO_ADDR
19268: LD_INT 2
19270: PUSH
19271: FOR_TO
19272: IFFALSE 19399
// begin uc_side := your_side ;
19274: LD_ADDR_OWVAR 20
19278: PUSH
19279: LD_OWVAR 2
19283: ST_TO_ADDR
// uc_nation := nation_american ;
19284: LD_ADDR_OWVAR 21
19288: PUSH
19289: LD_INT 1
19291: ST_TO_ADDR
// vc_chassis := us_morphling ;
19292: LD_ADDR_OWVAR 37
19296: PUSH
19297: LD_INT 5
19299: ST_TO_ADDR
// vc_engine := engine_siberite ;
19300: LD_ADDR_OWVAR 39
19304: PUSH
19305: LD_INT 3
19307: ST_TO_ADDR
// vc_control := control_computer ;
19308: LD_ADDR_OWVAR 38
19312: PUSH
19313: LD_INT 3
19315: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19316: LD_ADDR_OWVAR 40
19320: PUSH
19321: LD_INT 10
19323: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19324: LD_VAR 0 2
19328: PUSH
19329: LD_INT 1
19331: ARRAY
19332: PPUSH
19333: CALL_OW 310
19337: NOT
19338: IFFALSE 19385
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19340: CALL_OW 45
19344: PPUSH
19345: LD_VAR 0 2
19349: PUSH
19350: LD_INT 1
19352: ARRAY
19353: PPUSH
19354: CALL_OW 250
19358: PPUSH
19359: LD_VAR 0 2
19363: PUSH
19364: LD_INT 1
19366: ARRAY
19367: PPUSH
19368: CALL_OW 251
19372: PPUSH
19373: LD_INT 12
19375: PPUSH
19376: LD_INT 1
19378: PPUSH
19379: CALL_OW 50
19383: GO 19397
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19385: CALL_OW 45
19389: PPUSH
19390: LD_INT 1
19392: PPUSH
19393: CALL_OW 51
// end ;
19397: GO 19271
19399: POP
19400: POP
// end ;
19401: PPOPN 2
19403: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19404: LD_EXP 41
19408: PUSH
19409: LD_EXP 87
19413: AND
19414: IFFALSE 19636
19416: GO 19418
19418: DISABLE
19419: LD_INT 0
19421: PPUSH
19422: PPUSH
19423: PPUSH
19424: PPUSH
19425: PPUSH
19426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19427: LD_ADDR_VAR 0 6
19431: PUSH
19432: LD_INT 22
19434: PUSH
19435: LD_OWVAR 2
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 21
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 3
19456: PUSH
19457: LD_INT 23
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: LIST
19475: PPUSH
19476: CALL_OW 69
19480: ST_TO_ADDR
// if not tmp then
19481: LD_VAR 0 6
19485: NOT
19486: IFFALSE 19490
// exit ;
19488: GO 19636
// s1 := rand ( 1 , 4 ) ;
19490: LD_ADDR_VAR 0 2
19494: PUSH
19495: LD_INT 1
19497: PPUSH
19498: LD_INT 4
19500: PPUSH
19501: CALL_OW 12
19505: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19506: LD_ADDR_VAR 0 4
19510: PUSH
19511: LD_VAR 0 6
19515: PUSH
19516: LD_INT 1
19518: ARRAY
19519: PPUSH
19520: LD_VAR 0 2
19524: PPUSH
19525: CALL_OW 259
19529: ST_TO_ADDR
// if s1 = 1 then
19530: LD_VAR 0 2
19534: PUSH
19535: LD_INT 1
19537: EQUAL
19538: IFFALSE 19558
// s2 := rand ( 2 , 4 ) else
19540: LD_ADDR_VAR 0 3
19544: PUSH
19545: LD_INT 2
19547: PPUSH
19548: LD_INT 4
19550: PPUSH
19551: CALL_OW 12
19555: ST_TO_ADDR
19556: GO 19566
// s2 := 1 ;
19558: LD_ADDR_VAR 0 3
19562: PUSH
19563: LD_INT 1
19565: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19566: LD_ADDR_VAR 0 5
19570: PUSH
19571: LD_VAR 0 6
19575: PUSH
19576: LD_INT 1
19578: ARRAY
19579: PPUSH
19580: LD_VAR 0 3
19584: PPUSH
19585: CALL_OW 259
19589: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19590: LD_VAR 0 6
19594: PUSH
19595: LD_INT 1
19597: ARRAY
19598: PPUSH
19599: LD_VAR 0 2
19603: PPUSH
19604: LD_VAR 0 5
19608: PPUSH
19609: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19613: LD_VAR 0 6
19617: PUSH
19618: LD_INT 1
19620: ARRAY
19621: PPUSH
19622: LD_VAR 0 3
19626: PPUSH
19627: LD_VAR 0 4
19631: PPUSH
19632: CALL_OW 237
// end ;
19636: PPOPN 6
19638: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19639: LD_EXP 41
19643: PUSH
19644: LD_EXP 88
19648: AND
19649: IFFALSE 19728
19651: GO 19653
19653: DISABLE
19654: LD_INT 0
19656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19657: LD_ADDR_VAR 0 1
19661: PUSH
19662: LD_INT 22
19664: PUSH
19665: LD_OWVAR 2
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 30
19676: PUSH
19677: LD_INT 3
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PPUSH
19688: CALL_OW 69
19692: ST_TO_ADDR
// if not tmp then
19693: LD_VAR 0 1
19697: NOT
19698: IFFALSE 19702
// exit ;
19700: GO 19728
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19702: LD_VAR 0 1
19706: PUSH
19707: LD_INT 1
19709: PPUSH
19710: LD_VAR 0 1
19714: PPUSH
19715: CALL_OW 12
19719: ARRAY
19720: PPUSH
19721: LD_INT 1
19723: PPUSH
19724: CALL_OW 234
// end ;
19728: PPOPN 1
19730: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19731: LD_EXP 41
19735: PUSH
19736: LD_EXP 89
19740: AND
19741: IFFALSE 19853
19743: GO 19745
19745: DISABLE
19746: LD_INT 0
19748: PPUSH
19749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19750: LD_ADDR_VAR 0 2
19754: PUSH
19755: LD_INT 22
19757: PUSH
19758: LD_OWVAR 2
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 2
19769: PUSH
19770: LD_INT 30
19772: PUSH
19773: LD_INT 27
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 30
19782: PUSH
19783: LD_INT 26
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 30
19792: PUSH
19793: LD_INT 28
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PPUSH
19810: CALL_OW 69
19814: ST_TO_ADDR
// if not tmp then
19815: LD_VAR 0 2
19819: NOT
19820: IFFALSE 19824
// exit ;
19822: GO 19853
// for i in tmp do
19824: LD_ADDR_VAR 0 1
19828: PUSH
19829: LD_VAR 0 2
19833: PUSH
19834: FOR_IN
19835: IFFALSE 19851
// SetLives ( i , 1 ) ;
19837: LD_VAR 0 1
19841: PPUSH
19842: LD_INT 1
19844: PPUSH
19845: CALL_OW 234
19849: GO 19834
19851: POP
19852: POP
// end ;
19853: PPOPN 2
19855: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19856: LD_EXP 41
19860: PUSH
19861: LD_EXP 90
19865: AND
19866: IFFALSE 20140
19868: GO 19870
19870: DISABLE
19871: LD_INT 0
19873: PPUSH
19874: PPUSH
19875: PPUSH
// begin i := rand ( 1 , 7 ) ;
19876: LD_ADDR_VAR 0 1
19880: PUSH
19881: LD_INT 1
19883: PPUSH
19884: LD_INT 7
19886: PPUSH
19887: CALL_OW 12
19891: ST_TO_ADDR
// case i of 1 :
19892: LD_VAR 0 1
19896: PUSH
19897: LD_INT 1
19899: DOUBLE
19900: EQUAL
19901: IFTRUE 19905
19903: GO 19915
19905: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19906: LD_STRING earthquake(getX(game), 0, 32)
19908: PPUSH
19909: CALL_OW 559
19913: GO 20140
19915: LD_INT 2
19917: DOUBLE
19918: EQUAL
19919: IFTRUE 19923
19921: GO 19937
19923: POP
// begin ToLua ( displayStucuk(); ) ;
19924: LD_STRING displayStucuk();
19926: PPUSH
19927: CALL_OW 559
// ResetFog ;
19931: CALL_OW 335
// end ; 3 :
19935: GO 20140
19937: LD_INT 3
19939: DOUBLE
19940: EQUAL
19941: IFTRUE 19945
19943: GO 20049
19945: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19946: LD_ADDR_VAR 0 2
19950: PUSH
19951: LD_INT 22
19953: PUSH
19954: LD_OWVAR 2
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 25
19965: PUSH
19966: LD_INT 1
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PPUSH
19977: CALL_OW 69
19981: ST_TO_ADDR
// if not tmp then
19982: LD_VAR 0 2
19986: NOT
19987: IFFALSE 19991
// exit ;
19989: GO 20140
// un := tmp [ rand ( 1 , tmp ) ] ;
19991: LD_ADDR_VAR 0 3
19995: PUSH
19996: LD_VAR 0 2
20000: PUSH
20001: LD_INT 1
20003: PPUSH
20004: LD_VAR 0 2
20008: PPUSH
20009: CALL_OW 12
20013: ARRAY
20014: ST_TO_ADDR
// if Crawls ( un ) then
20015: LD_VAR 0 3
20019: PPUSH
20020: CALL_OW 318
20024: IFFALSE 20035
// ComWalk ( un ) ;
20026: LD_VAR 0 3
20030: PPUSH
20031: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20035: LD_VAR 0 3
20039: PPUSH
20040: LD_INT 8
20042: PPUSH
20043: CALL_OW 336
// end ; 4 :
20047: GO 20140
20049: LD_INT 4
20051: DOUBLE
20052: EQUAL
20053: IFTRUE 20057
20055: GO 20118
20057: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20058: LD_ADDR_VAR 0 2
20062: PUSH
20063: LD_INT 22
20065: PUSH
20066: LD_OWVAR 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 30
20077: PUSH
20078: LD_INT 29
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PPUSH
20089: CALL_OW 69
20093: ST_TO_ADDR
// if not tmp then
20094: LD_VAR 0 2
20098: NOT
20099: IFFALSE 20103
// exit ;
20101: GO 20140
// DestroyUnit ( tmp [ 1 ] ) ;
20103: LD_VAR 0 2
20107: PUSH
20108: LD_INT 1
20110: ARRAY
20111: PPUSH
20112: CALL_OW 65
// end ; 5 .. 7 :
20116: GO 20140
20118: LD_INT 5
20120: DOUBLE
20121: GREATEREQUAL
20122: IFFALSE 20130
20124: LD_INT 7
20126: DOUBLE
20127: LESSEQUAL
20128: IFTRUE 20132
20130: GO 20139
20132: POP
// StreamSibBomb ; end ;
20133: CALL 16390 0 0
20137: GO 20140
20139: POP
// end ;
20140: PPOPN 3
20142: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20143: LD_EXP 41
20147: PUSH
20148: LD_EXP 91
20152: AND
20153: IFFALSE 20309
20155: GO 20157
20157: DISABLE
20158: LD_INT 0
20160: PPUSH
20161: PPUSH
20162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20163: LD_ADDR_VAR 0 2
20167: PUSH
20168: LD_INT 81
20170: PUSH
20171: LD_OWVAR 2
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: LD_INT 21
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 21
20195: PUSH
20196: LD_INT 2
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: LIST
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PPUSH
20212: CALL_OW 69
20216: ST_TO_ADDR
// if not tmp then
20217: LD_VAR 0 2
20221: NOT
20222: IFFALSE 20226
// exit ;
20224: GO 20309
// p := 0 ;
20226: LD_ADDR_VAR 0 3
20230: PUSH
20231: LD_INT 0
20233: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20234: LD_INT 35
20236: PPUSH
20237: CALL_OW 67
// p := p + 1 ;
20241: LD_ADDR_VAR 0 3
20245: PUSH
20246: LD_VAR 0 3
20250: PUSH
20251: LD_INT 1
20253: PLUS
20254: ST_TO_ADDR
// for i in tmp do
20255: LD_ADDR_VAR 0 1
20259: PUSH
20260: LD_VAR 0 2
20264: PUSH
20265: FOR_IN
20266: IFFALSE 20297
// if GetLives ( i ) < 1000 then
20268: LD_VAR 0 1
20272: PPUSH
20273: CALL_OW 256
20277: PUSH
20278: LD_INT 1000
20280: LESS
20281: IFFALSE 20295
// SetLives ( i , 1000 ) ;
20283: LD_VAR 0 1
20287: PPUSH
20288: LD_INT 1000
20290: PPUSH
20291: CALL_OW 234
20295: GO 20265
20297: POP
20298: POP
// until p > 20 ;
20299: LD_VAR 0 3
20303: PUSH
20304: LD_INT 20
20306: GREATER
20307: IFFALSE 20234
// end ;
20309: PPOPN 3
20311: END
// every 0 0$1 trigger StreamModeActive and sTime do
20312: LD_EXP 41
20316: PUSH
20317: LD_EXP 92
20321: AND
20322: IFFALSE 20357
20324: GO 20326
20326: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20327: LD_INT 28
20329: PPUSH
20330: LD_OWVAR 2
20334: PPUSH
20335: LD_INT 2
20337: PPUSH
20338: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20342: LD_INT 30
20344: PPUSH
20345: LD_OWVAR 2
20349: PPUSH
20350: LD_INT 2
20352: PPUSH
20353: CALL_OW 322
// end ;
20357: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20358: LD_EXP 41
20362: PUSH
20363: LD_EXP 93
20367: AND
20368: IFFALSE 20489
20370: GO 20372
20372: DISABLE
20373: LD_INT 0
20375: PPUSH
20376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20377: LD_ADDR_VAR 0 2
20381: PUSH
20382: LD_INT 22
20384: PUSH
20385: LD_OWVAR 2
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 21
20396: PUSH
20397: LD_INT 1
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 3
20406: PUSH
20407: LD_INT 23
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: PPUSH
20426: CALL_OW 69
20430: ST_TO_ADDR
// if not tmp then
20431: LD_VAR 0 2
20435: NOT
20436: IFFALSE 20440
// exit ;
20438: GO 20489
// for i in tmp do
20440: LD_ADDR_VAR 0 1
20444: PUSH
20445: LD_VAR 0 2
20449: PUSH
20450: FOR_IN
20451: IFFALSE 20487
// begin if Crawls ( i ) then
20453: LD_VAR 0 1
20457: PPUSH
20458: CALL_OW 318
20462: IFFALSE 20473
// ComWalk ( i ) ;
20464: LD_VAR 0 1
20468: PPUSH
20469: CALL_OW 138
// SetClass ( i , 2 ) ;
20473: LD_VAR 0 1
20477: PPUSH
20478: LD_INT 2
20480: PPUSH
20481: CALL_OW 336
// end ;
20485: GO 20450
20487: POP
20488: POP
// end ;
20489: PPOPN 2
20491: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20492: LD_EXP 41
20496: PUSH
20497: LD_EXP 94
20501: AND
20502: IFFALSE 20783
20504: GO 20506
20506: DISABLE
20507: LD_INT 0
20509: PPUSH
20510: PPUSH
20511: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20512: LD_OWVAR 2
20516: PPUSH
20517: LD_INT 9
20519: PPUSH
20520: LD_INT 1
20522: PPUSH
20523: LD_INT 1
20525: PPUSH
20526: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20530: LD_INT 9
20532: PPUSH
20533: LD_OWVAR 2
20537: PPUSH
20538: CALL_OW 343
// uc_side := 9 ;
20542: LD_ADDR_OWVAR 20
20546: PUSH
20547: LD_INT 9
20549: ST_TO_ADDR
// uc_nation := 2 ;
20550: LD_ADDR_OWVAR 21
20554: PUSH
20555: LD_INT 2
20557: ST_TO_ADDR
// hc_name := Dark Warrior ;
20558: LD_ADDR_OWVAR 26
20562: PUSH
20563: LD_STRING Dark Warrior
20565: ST_TO_ADDR
// hc_gallery :=  ;
20566: LD_ADDR_OWVAR 33
20570: PUSH
20571: LD_STRING 
20573: ST_TO_ADDR
// hc_noskilllimit := true ;
20574: LD_ADDR_OWVAR 76
20578: PUSH
20579: LD_INT 1
20581: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20582: LD_ADDR_OWVAR 31
20586: PUSH
20587: LD_INT 30
20589: PUSH
20590: LD_INT 30
20592: PUSH
20593: LD_INT 30
20595: PUSH
20596: LD_INT 30
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: ST_TO_ADDR
// un := CreateHuman ;
20605: LD_ADDR_VAR 0 3
20609: PUSH
20610: CALL_OW 44
20614: ST_TO_ADDR
// hc_noskilllimit := false ;
20615: LD_ADDR_OWVAR 76
20619: PUSH
20620: LD_INT 0
20622: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20623: LD_VAR 0 3
20627: PPUSH
20628: LD_INT 1
20630: PPUSH
20631: CALL_OW 51
// p := 0 ;
20635: LD_ADDR_VAR 0 2
20639: PUSH
20640: LD_INT 0
20642: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20643: LD_INT 35
20645: PPUSH
20646: CALL_OW 67
// p := p + 1 ;
20650: LD_ADDR_VAR 0 2
20654: PUSH
20655: LD_VAR 0 2
20659: PUSH
20660: LD_INT 1
20662: PLUS
20663: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20664: LD_VAR 0 3
20668: PPUSH
20669: CALL_OW 256
20673: PUSH
20674: LD_INT 1000
20676: LESS
20677: IFFALSE 20691
// SetLives ( un , 1000 ) ;
20679: LD_VAR 0 3
20683: PPUSH
20684: LD_INT 1000
20686: PPUSH
20687: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20691: LD_VAR 0 3
20695: PPUSH
20696: LD_INT 81
20698: PUSH
20699: LD_OWVAR 2
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 91
20710: PUSH
20711: LD_VAR 0 3
20715: PUSH
20716: LD_INT 30
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: LIST
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PPUSH
20728: CALL_OW 69
20732: PPUSH
20733: LD_VAR 0 3
20737: PPUSH
20738: CALL_OW 74
20742: PPUSH
20743: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20747: LD_VAR 0 2
20751: PUSH
20752: LD_INT 60
20754: GREATER
20755: PUSH
20756: LD_VAR 0 3
20760: PPUSH
20761: CALL_OW 301
20765: OR
20766: IFFALSE 20643
// if un then
20768: LD_VAR 0 3
20772: IFFALSE 20783
// RemoveUnit ( un ) ;
20774: LD_VAR 0 3
20778: PPUSH
20779: CALL_OW 64
// end ;
20783: PPOPN 3
20785: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20786: LD_INT 0
20788: PPUSH
// case cmd of 301 :
20789: LD_VAR 0 1
20793: PUSH
20794: LD_INT 301
20796: DOUBLE
20797: EQUAL
20798: IFTRUE 20802
20800: GO 20834
20802: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20803: LD_VAR 0 6
20807: PPUSH
20808: LD_VAR 0 7
20812: PPUSH
20813: LD_VAR 0 8
20817: PPUSH
20818: LD_VAR 0 4
20822: PPUSH
20823: LD_VAR 0 5
20827: PPUSH
20828: CALL 22035 0 5
20832: GO 20955
20834: LD_INT 302
20836: DOUBLE
20837: EQUAL
20838: IFTRUE 20842
20840: GO 20879
20842: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20843: LD_VAR 0 6
20847: PPUSH
20848: LD_VAR 0 7
20852: PPUSH
20853: LD_VAR 0 8
20857: PPUSH
20858: LD_VAR 0 9
20862: PPUSH
20863: LD_VAR 0 4
20867: PPUSH
20868: LD_VAR 0 5
20872: PPUSH
20873: CALL 22126 0 6
20877: GO 20955
20879: LD_INT 303
20881: DOUBLE
20882: EQUAL
20883: IFTRUE 20887
20885: GO 20924
20887: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20888: LD_VAR 0 6
20892: PPUSH
20893: LD_VAR 0 7
20897: PPUSH
20898: LD_VAR 0 8
20902: PPUSH
20903: LD_VAR 0 9
20907: PPUSH
20908: LD_VAR 0 4
20912: PPUSH
20913: LD_VAR 0 5
20917: PPUSH
20918: CALL 20960 0 6
20922: GO 20955
20924: LD_INT 304
20926: DOUBLE
20927: EQUAL
20928: IFTRUE 20932
20930: GO 20954
20932: POP
// hHackTeleport ( unit , x , y ) ; end ;
20933: LD_VAR 0 2
20937: PPUSH
20938: LD_VAR 0 4
20942: PPUSH
20943: LD_VAR 0 5
20947: PPUSH
20948: CALL 22719 0 3
20952: GO 20955
20954: POP
// end ;
20955: LD_VAR 0 12
20959: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20960: LD_INT 0
20962: PPUSH
20963: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20964: LD_VAR 0 1
20968: PUSH
20969: LD_INT 1
20971: LESS
20972: PUSH
20973: LD_VAR 0 1
20977: PUSH
20978: LD_INT 3
20980: GREATER
20981: OR
20982: PUSH
20983: LD_VAR 0 5
20987: PPUSH
20988: LD_VAR 0 6
20992: PPUSH
20993: CALL_OW 428
20997: OR
20998: IFFALSE 21002
// exit ;
21000: GO 21722
// uc_side := your_side ;
21002: LD_ADDR_OWVAR 20
21006: PUSH
21007: LD_OWVAR 2
21011: ST_TO_ADDR
// uc_nation := nation ;
21012: LD_ADDR_OWVAR 21
21016: PUSH
21017: LD_VAR 0 1
21021: ST_TO_ADDR
// bc_level = 1 ;
21022: LD_ADDR_OWVAR 43
21026: PUSH
21027: LD_INT 1
21029: ST_TO_ADDR
// case btype of 1 :
21030: LD_VAR 0 2
21034: PUSH
21035: LD_INT 1
21037: DOUBLE
21038: EQUAL
21039: IFTRUE 21043
21041: GO 21054
21043: POP
// bc_type := b_depot ; 2 :
21044: LD_ADDR_OWVAR 42
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
21052: GO 21666
21054: LD_INT 2
21056: DOUBLE
21057: EQUAL
21058: IFTRUE 21062
21060: GO 21073
21062: POP
// bc_type := b_warehouse ; 3 :
21063: LD_ADDR_OWVAR 42
21067: PUSH
21068: LD_INT 1
21070: ST_TO_ADDR
21071: GO 21666
21073: LD_INT 3
21075: DOUBLE
21076: EQUAL
21077: IFTRUE 21081
21079: GO 21092
21081: POP
// bc_type := b_lab ; 4 .. 9 :
21082: LD_ADDR_OWVAR 42
21086: PUSH
21087: LD_INT 6
21089: ST_TO_ADDR
21090: GO 21666
21092: LD_INT 4
21094: DOUBLE
21095: GREATEREQUAL
21096: IFFALSE 21104
21098: LD_INT 9
21100: DOUBLE
21101: LESSEQUAL
21102: IFTRUE 21106
21104: GO 21158
21106: POP
// begin bc_type := b_lab_half ;
21107: LD_ADDR_OWVAR 42
21111: PUSH
21112: LD_INT 7
21114: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21115: LD_ADDR_OWVAR 44
21119: PUSH
21120: LD_INT 10
21122: PUSH
21123: LD_INT 11
21125: PUSH
21126: LD_INT 12
21128: PUSH
21129: LD_INT 15
21131: PUSH
21132: LD_INT 14
21134: PUSH
21135: LD_INT 13
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: PUSH
21146: LD_VAR 0 2
21150: PUSH
21151: LD_INT 3
21153: MINUS
21154: ARRAY
21155: ST_TO_ADDR
// end ; 10 .. 13 :
21156: GO 21666
21158: LD_INT 10
21160: DOUBLE
21161: GREATEREQUAL
21162: IFFALSE 21170
21164: LD_INT 13
21166: DOUBLE
21167: LESSEQUAL
21168: IFTRUE 21172
21170: GO 21249
21172: POP
// begin bc_type := b_lab_full ;
21173: LD_ADDR_OWVAR 42
21177: PUSH
21178: LD_INT 8
21180: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21181: LD_ADDR_OWVAR 44
21185: PUSH
21186: LD_INT 10
21188: PUSH
21189: LD_INT 12
21191: PUSH
21192: LD_INT 14
21194: PUSH
21195: LD_INT 13
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: PUSH
21204: LD_VAR 0 2
21208: PUSH
21209: LD_INT 9
21211: MINUS
21212: ARRAY
21213: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21214: LD_ADDR_OWVAR 45
21218: PUSH
21219: LD_INT 11
21221: PUSH
21222: LD_INT 15
21224: PUSH
21225: LD_INT 12
21227: PUSH
21228: LD_INT 15
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: PUSH
21237: LD_VAR 0 2
21241: PUSH
21242: LD_INT 9
21244: MINUS
21245: ARRAY
21246: ST_TO_ADDR
// end ; 14 :
21247: GO 21666
21249: LD_INT 14
21251: DOUBLE
21252: EQUAL
21253: IFTRUE 21257
21255: GO 21268
21257: POP
// bc_type := b_workshop ; 15 :
21258: LD_ADDR_OWVAR 42
21262: PUSH
21263: LD_INT 2
21265: ST_TO_ADDR
21266: GO 21666
21268: LD_INT 15
21270: DOUBLE
21271: EQUAL
21272: IFTRUE 21276
21274: GO 21287
21276: POP
// bc_type := b_factory ; 16 :
21277: LD_ADDR_OWVAR 42
21281: PUSH
21282: LD_INT 3
21284: ST_TO_ADDR
21285: GO 21666
21287: LD_INT 16
21289: DOUBLE
21290: EQUAL
21291: IFTRUE 21295
21293: GO 21306
21295: POP
// bc_type := b_ext_gun ; 17 :
21296: LD_ADDR_OWVAR 42
21300: PUSH
21301: LD_INT 17
21303: ST_TO_ADDR
21304: GO 21666
21306: LD_INT 17
21308: DOUBLE
21309: EQUAL
21310: IFTRUE 21314
21312: GO 21342
21314: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21315: LD_ADDR_OWVAR 42
21319: PUSH
21320: LD_INT 19
21322: PUSH
21323: LD_INT 23
21325: PUSH
21326: LD_INT 19
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: PUSH
21334: LD_VAR 0 1
21338: ARRAY
21339: ST_TO_ADDR
21340: GO 21666
21342: LD_INT 18
21344: DOUBLE
21345: EQUAL
21346: IFTRUE 21350
21348: GO 21361
21350: POP
// bc_type := b_ext_radar ; 19 :
21351: LD_ADDR_OWVAR 42
21355: PUSH
21356: LD_INT 20
21358: ST_TO_ADDR
21359: GO 21666
21361: LD_INT 19
21363: DOUBLE
21364: EQUAL
21365: IFTRUE 21369
21367: GO 21380
21369: POP
// bc_type := b_ext_radio ; 20 :
21370: LD_ADDR_OWVAR 42
21374: PUSH
21375: LD_INT 22
21377: ST_TO_ADDR
21378: GO 21666
21380: LD_INT 20
21382: DOUBLE
21383: EQUAL
21384: IFTRUE 21388
21386: GO 21399
21388: POP
// bc_type := b_ext_siberium ; 21 :
21389: LD_ADDR_OWVAR 42
21393: PUSH
21394: LD_INT 21
21396: ST_TO_ADDR
21397: GO 21666
21399: LD_INT 21
21401: DOUBLE
21402: EQUAL
21403: IFTRUE 21407
21405: GO 21418
21407: POP
// bc_type := b_ext_computer ; 22 :
21408: LD_ADDR_OWVAR 42
21412: PUSH
21413: LD_INT 24
21415: ST_TO_ADDR
21416: GO 21666
21418: LD_INT 22
21420: DOUBLE
21421: EQUAL
21422: IFTRUE 21426
21424: GO 21437
21426: POP
// bc_type := b_ext_track ; 23 :
21427: LD_ADDR_OWVAR 42
21431: PUSH
21432: LD_INT 16
21434: ST_TO_ADDR
21435: GO 21666
21437: LD_INT 23
21439: DOUBLE
21440: EQUAL
21441: IFTRUE 21445
21443: GO 21456
21445: POP
// bc_type := b_ext_laser ; 24 :
21446: LD_ADDR_OWVAR 42
21450: PUSH
21451: LD_INT 25
21453: ST_TO_ADDR
21454: GO 21666
21456: LD_INT 24
21458: DOUBLE
21459: EQUAL
21460: IFTRUE 21464
21462: GO 21475
21464: POP
// bc_type := b_control_tower ; 25 :
21465: LD_ADDR_OWVAR 42
21469: PUSH
21470: LD_INT 36
21472: ST_TO_ADDR
21473: GO 21666
21475: LD_INT 25
21477: DOUBLE
21478: EQUAL
21479: IFTRUE 21483
21481: GO 21494
21483: POP
// bc_type := b_breastwork ; 26 :
21484: LD_ADDR_OWVAR 42
21488: PUSH
21489: LD_INT 31
21491: ST_TO_ADDR
21492: GO 21666
21494: LD_INT 26
21496: DOUBLE
21497: EQUAL
21498: IFTRUE 21502
21500: GO 21513
21502: POP
// bc_type := b_bunker ; 27 :
21503: LD_ADDR_OWVAR 42
21507: PUSH
21508: LD_INT 32
21510: ST_TO_ADDR
21511: GO 21666
21513: LD_INT 27
21515: DOUBLE
21516: EQUAL
21517: IFTRUE 21521
21519: GO 21532
21521: POP
// bc_type := b_turret ; 28 :
21522: LD_ADDR_OWVAR 42
21526: PUSH
21527: LD_INT 33
21529: ST_TO_ADDR
21530: GO 21666
21532: LD_INT 28
21534: DOUBLE
21535: EQUAL
21536: IFTRUE 21540
21538: GO 21551
21540: POP
// bc_type := b_armoury ; 29 :
21541: LD_ADDR_OWVAR 42
21545: PUSH
21546: LD_INT 4
21548: ST_TO_ADDR
21549: GO 21666
21551: LD_INT 29
21553: DOUBLE
21554: EQUAL
21555: IFTRUE 21559
21557: GO 21570
21559: POP
// bc_type := b_barracks ; 30 :
21560: LD_ADDR_OWVAR 42
21564: PUSH
21565: LD_INT 5
21567: ST_TO_ADDR
21568: GO 21666
21570: LD_INT 30
21572: DOUBLE
21573: EQUAL
21574: IFTRUE 21578
21576: GO 21589
21578: POP
// bc_type := b_solar_power ; 31 :
21579: LD_ADDR_OWVAR 42
21583: PUSH
21584: LD_INT 27
21586: ST_TO_ADDR
21587: GO 21666
21589: LD_INT 31
21591: DOUBLE
21592: EQUAL
21593: IFTRUE 21597
21595: GO 21608
21597: POP
// bc_type := b_oil_power ; 32 :
21598: LD_ADDR_OWVAR 42
21602: PUSH
21603: LD_INT 26
21605: ST_TO_ADDR
21606: GO 21666
21608: LD_INT 32
21610: DOUBLE
21611: EQUAL
21612: IFTRUE 21616
21614: GO 21627
21616: POP
// bc_type := b_siberite_power ; 33 :
21617: LD_ADDR_OWVAR 42
21621: PUSH
21622: LD_INT 28
21624: ST_TO_ADDR
21625: GO 21666
21627: LD_INT 33
21629: DOUBLE
21630: EQUAL
21631: IFTRUE 21635
21633: GO 21646
21635: POP
// bc_type := b_oil_mine ; 34 :
21636: LD_ADDR_OWVAR 42
21640: PUSH
21641: LD_INT 29
21643: ST_TO_ADDR
21644: GO 21666
21646: LD_INT 34
21648: DOUBLE
21649: EQUAL
21650: IFTRUE 21654
21652: GO 21665
21654: POP
// bc_type := b_siberite_mine ; end ;
21655: LD_ADDR_OWVAR 42
21659: PUSH
21660: LD_INT 30
21662: ST_TO_ADDR
21663: GO 21666
21665: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21666: LD_ADDR_VAR 0 8
21670: PUSH
21671: LD_VAR 0 5
21675: PPUSH
21676: LD_VAR 0 6
21680: PPUSH
21681: LD_VAR 0 3
21685: PPUSH
21686: CALL_OW 47
21690: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21691: LD_OWVAR 42
21695: PUSH
21696: LD_INT 32
21698: PUSH
21699: LD_INT 33
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: IN
21706: IFFALSE 21722
// PlaceWeaponTurret ( b , weapon ) ;
21708: LD_VAR 0 8
21712: PPUSH
21713: LD_VAR 0 4
21717: PPUSH
21718: CALL_OW 431
// end ;
21722: LD_VAR 0 7
21726: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21727: LD_INT 0
21729: PPUSH
21730: PPUSH
21731: PPUSH
21732: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21733: LD_ADDR_VAR 0 4
21737: PUSH
21738: LD_INT 22
21740: PUSH
21741: LD_OWVAR 2
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 2
21752: PUSH
21753: LD_INT 30
21755: PUSH
21756: LD_INT 0
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 30
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: LIST
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PPUSH
21782: CALL_OW 69
21786: ST_TO_ADDR
// if not tmp then
21787: LD_VAR 0 4
21791: NOT
21792: IFFALSE 21796
// exit ;
21794: GO 21855
// for i in tmp do
21796: LD_ADDR_VAR 0 2
21800: PUSH
21801: LD_VAR 0 4
21805: PUSH
21806: FOR_IN
21807: IFFALSE 21853
// for j = 1 to 3 do
21809: LD_ADDR_VAR 0 3
21813: PUSH
21814: DOUBLE
21815: LD_INT 1
21817: DEC
21818: ST_TO_ADDR
21819: LD_INT 3
21821: PUSH
21822: FOR_TO
21823: IFFALSE 21849
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21825: LD_VAR 0 2
21829: PPUSH
21830: CALL_OW 274
21834: PPUSH
21835: LD_VAR 0 3
21839: PPUSH
21840: LD_INT 99999
21842: PPUSH
21843: CALL_OW 277
21847: GO 21822
21849: POP
21850: POP
21851: GO 21806
21853: POP
21854: POP
// end ;
21855: LD_VAR 0 1
21859: RET
// export function hHackSetLevel10 ; var i , j ; begin
21860: LD_INT 0
21862: PPUSH
21863: PPUSH
21864: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21865: LD_ADDR_VAR 0 2
21869: PUSH
21870: LD_INT 21
21872: PUSH
21873: LD_INT 1
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PPUSH
21880: CALL_OW 69
21884: PUSH
21885: FOR_IN
21886: IFFALSE 21938
// if IsSelected ( i ) then
21888: LD_VAR 0 2
21892: PPUSH
21893: CALL_OW 306
21897: IFFALSE 21936
// begin for j := 1 to 4 do
21899: LD_ADDR_VAR 0 3
21903: PUSH
21904: DOUBLE
21905: LD_INT 1
21907: DEC
21908: ST_TO_ADDR
21909: LD_INT 4
21911: PUSH
21912: FOR_TO
21913: IFFALSE 21934
// SetSkill ( i , j , 10 ) ;
21915: LD_VAR 0 2
21919: PPUSH
21920: LD_VAR 0 3
21924: PPUSH
21925: LD_INT 10
21927: PPUSH
21928: CALL_OW 237
21932: GO 21912
21934: POP
21935: POP
// end ;
21936: GO 21885
21938: POP
21939: POP
// end ;
21940: LD_VAR 0 1
21944: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21945: LD_INT 0
21947: PPUSH
21948: PPUSH
21949: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21950: LD_ADDR_VAR 0 2
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_OWVAR 2
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 21
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PPUSH
21981: CALL_OW 69
21985: PUSH
21986: FOR_IN
21987: IFFALSE 22028
// begin for j := 1 to 4 do
21989: LD_ADDR_VAR 0 3
21993: PUSH
21994: DOUBLE
21995: LD_INT 1
21997: DEC
21998: ST_TO_ADDR
21999: LD_INT 4
22001: PUSH
22002: FOR_TO
22003: IFFALSE 22024
// SetSkill ( i , j , 10 ) ;
22005: LD_VAR 0 2
22009: PPUSH
22010: LD_VAR 0 3
22014: PPUSH
22015: LD_INT 10
22017: PPUSH
22018: CALL_OW 237
22022: GO 22002
22024: POP
22025: POP
// end ;
22026: GO 21986
22028: POP
22029: POP
// end ;
22030: LD_VAR 0 1
22034: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22035: LD_INT 0
22037: PPUSH
// uc_side := your_side ;
22038: LD_ADDR_OWVAR 20
22042: PUSH
22043: LD_OWVAR 2
22047: ST_TO_ADDR
// uc_nation := nation ;
22048: LD_ADDR_OWVAR 21
22052: PUSH
22053: LD_VAR 0 1
22057: ST_TO_ADDR
// InitHc ;
22058: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22062: LD_INT 0
22064: PPUSH
22065: LD_VAR 0 2
22069: PPUSH
22070: LD_VAR 0 3
22074: PPUSH
22075: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22079: LD_VAR 0 4
22083: PPUSH
22084: LD_VAR 0 5
22088: PPUSH
22089: CALL_OW 428
22093: PUSH
22094: LD_INT 0
22096: EQUAL
22097: IFFALSE 22121
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22099: CALL_OW 44
22103: PPUSH
22104: LD_VAR 0 4
22108: PPUSH
22109: LD_VAR 0 5
22113: PPUSH
22114: LD_INT 1
22116: PPUSH
22117: CALL_OW 48
// end ;
22121: LD_VAR 0 6
22125: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22126: LD_INT 0
22128: PPUSH
22129: PPUSH
// uc_side := your_side ;
22130: LD_ADDR_OWVAR 20
22134: PUSH
22135: LD_OWVAR 2
22139: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22140: LD_VAR 0 1
22144: PUSH
22145: LD_INT 1
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: LD_INT 3
22153: PUSH
22154: LD_INT 4
22156: PUSH
22157: LD_INT 5
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: IN
22167: IFFALSE 22179
// uc_nation := nation_american else
22169: LD_ADDR_OWVAR 21
22173: PUSH
22174: LD_INT 1
22176: ST_TO_ADDR
22177: GO 22222
// if chassis in [ 11 , 12 , 13 , 14 ] then
22179: LD_VAR 0 1
22183: PUSH
22184: LD_INT 11
22186: PUSH
22187: LD_INT 12
22189: PUSH
22190: LD_INT 13
22192: PUSH
22193: LD_INT 14
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: IN
22202: IFFALSE 22214
// uc_nation := nation_arabian else
22204: LD_ADDR_OWVAR 21
22208: PUSH
22209: LD_INT 2
22211: ST_TO_ADDR
22212: GO 22222
// uc_nation := nation_russian ;
22214: LD_ADDR_OWVAR 21
22218: PUSH
22219: LD_INT 3
22221: ST_TO_ADDR
// vc_chassis := chassis ;
22222: LD_ADDR_OWVAR 37
22226: PUSH
22227: LD_VAR 0 1
22231: ST_TO_ADDR
// vc_engine := engine ;
22232: LD_ADDR_OWVAR 39
22236: PUSH
22237: LD_VAR 0 2
22241: ST_TO_ADDR
// vc_control := control ;
22242: LD_ADDR_OWVAR 38
22246: PUSH
22247: LD_VAR 0 3
22251: ST_TO_ADDR
// vc_weapon := weapon ;
22252: LD_ADDR_OWVAR 40
22256: PUSH
22257: LD_VAR 0 4
22261: ST_TO_ADDR
// un := CreateVehicle ;
22262: LD_ADDR_VAR 0 8
22266: PUSH
22267: CALL_OW 45
22271: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22272: LD_VAR 0 8
22276: PPUSH
22277: LD_INT 0
22279: PPUSH
22280: LD_INT 5
22282: PPUSH
22283: CALL_OW 12
22287: PPUSH
22288: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22292: LD_VAR 0 8
22296: PPUSH
22297: LD_VAR 0 5
22301: PPUSH
22302: LD_VAR 0 6
22306: PPUSH
22307: LD_INT 1
22309: PPUSH
22310: CALL_OW 48
// end ;
22314: LD_VAR 0 7
22318: RET
// export hInvincible ; every 1 do
22319: GO 22321
22321: DISABLE
// hInvincible := [ ] ;
22322: LD_ADDR_EXP 95
22326: PUSH
22327: EMPTY
22328: ST_TO_ADDR
22329: END
// every 10 do var i ;
22330: GO 22332
22332: DISABLE
22333: LD_INT 0
22335: PPUSH
// begin enable ;
22336: ENABLE
// if not hInvincible then
22337: LD_EXP 95
22341: NOT
22342: IFFALSE 22346
// exit ;
22344: GO 22390
// for i in hInvincible do
22346: LD_ADDR_VAR 0 1
22350: PUSH
22351: LD_EXP 95
22355: PUSH
22356: FOR_IN
22357: IFFALSE 22388
// if GetLives ( i ) < 1000 then
22359: LD_VAR 0 1
22363: PPUSH
22364: CALL_OW 256
22368: PUSH
22369: LD_INT 1000
22371: LESS
22372: IFFALSE 22386
// SetLives ( i , 1000 ) ;
22374: LD_VAR 0 1
22378: PPUSH
22379: LD_INT 1000
22381: PPUSH
22382: CALL_OW 234
22386: GO 22356
22388: POP
22389: POP
// end ;
22390: PPOPN 1
22392: END
// export function hHackInvincible ; var i ; begin
22393: LD_INT 0
22395: PPUSH
22396: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22397: LD_ADDR_VAR 0 2
22401: PUSH
22402: LD_INT 2
22404: PUSH
22405: LD_INT 21
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 21
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: LIST
22429: PPUSH
22430: CALL_OW 69
22434: PUSH
22435: FOR_IN
22436: IFFALSE 22497
// if IsSelected ( i ) then
22438: LD_VAR 0 2
22442: PPUSH
22443: CALL_OW 306
22447: IFFALSE 22495
// begin if i in hInvincible then
22449: LD_VAR 0 2
22453: PUSH
22454: LD_EXP 95
22458: IN
22459: IFFALSE 22479
// hInvincible := hInvincible diff i else
22461: LD_ADDR_EXP 95
22465: PUSH
22466: LD_EXP 95
22470: PUSH
22471: LD_VAR 0 2
22475: DIFF
22476: ST_TO_ADDR
22477: GO 22495
// hInvincible := hInvincible union i ;
22479: LD_ADDR_EXP 95
22483: PUSH
22484: LD_EXP 95
22488: PUSH
22489: LD_VAR 0 2
22493: UNION
22494: ST_TO_ADDR
// end ;
22495: GO 22435
22497: POP
22498: POP
// end ;
22499: LD_VAR 0 1
22503: RET
// export function hHackInvisible ; var i , j ; begin
22504: LD_INT 0
22506: PPUSH
22507: PPUSH
22508: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22509: LD_ADDR_VAR 0 2
22513: PUSH
22514: LD_INT 21
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PPUSH
22524: CALL_OW 69
22528: PUSH
22529: FOR_IN
22530: IFFALSE 22554
// if IsSelected ( i ) then
22532: LD_VAR 0 2
22536: PPUSH
22537: CALL_OW 306
22541: IFFALSE 22552
// ComForceInvisible ( i ) ;
22543: LD_VAR 0 2
22547: PPUSH
22548: CALL_OW 496
22552: GO 22529
22554: POP
22555: POP
// end ;
22556: LD_VAR 0 1
22560: RET
// export function hHackChangeYourSide ; begin
22561: LD_INT 0
22563: PPUSH
// if your_side = 8 then
22564: LD_OWVAR 2
22568: PUSH
22569: LD_INT 8
22571: EQUAL
22572: IFFALSE 22584
// your_side := 0 else
22574: LD_ADDR_OWVAR 2
22578: PUSH
22579: LD_INT 0
22581: ST_TO_ADDR
22582: GO 22598
// your_side := your_side + 1 ;
22584: LD_ADDR_OWVAR 2
22588: PUSH
22589: LD_OWVAR 2
22593: PUSH
22594: LD_INT 1
22596: PLUS
22597: ST_TO_ADDR
// end ;
22598: LD_VAR 0 1
22602: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22603: LD_INT 0
22605: PPUSH
22606: PPUSH
22607: PPUSH
// for i in all_units do
22608: LD_ADDR_VAR 0 2
22612: PUSH
22613: LD_OWVAR 3
22617: PUSH
22618: FOR_IN
22619: IFFALSE 22697
// if IsSelected ( i ) then
22621: LD_VAR 0 2
22625: PPUSH
22626: CALL_OW 306
22630: IFFALSE 22695
// begin j := GetSide ( i ) ;
22632: LD_ADDR_VAR 0 3
22636: PUSH
22637: LD_VAR 0 2
22641: PPUSH
22642: CALL_OW 255
22646: ST_TO_ADDR
// if j = 8 then
22647: LD_VAR 0 3
22651: PUSH
22652: LD_INT 8
22654: EQUAL
22655: IFFALSE 22667
// j := 0 else
22657: LD_ADDR_VAR 0 3
22661: PUSH
22662: LD_INT 0
22664: ST_TO_ADDR
22665: GO 22681
// j := j + 1 ;
22667: LD_ADDR_VAR 0 3
22671: PUSH
22672: LD_VAR 0 3
22676: PUSH
22677: LD_INT 1
22679: PLUS
22680: ST_TO_ADDR
// SetSide ( i , j ) ;
22681: LD_VAR 0 2
22685: PPUSH
22686: LD_VAR 0 3
22690: PPUSH
22691: CALL_OW 235
// end ;
22695: GO 22618
22697: POP
22698: POP
// end ;
22699: LD_VAR 0 1
22703: RET
// export function hHackFog ; begin
22704: LD_INT 0
22706: PPUSH
// FogOff ( true ) ;
22707: LD_INT 1
22709: PPUSH
22710: CALL_OW 344
// end ;
22714: LD_VAR 0 1
22718: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22719: LD_INT 0
22721: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22722: LD_VAR 0 1
22726: PPUSH
22727: LD_VAR 0 2
22731: PPUSH
22732: LD_VAR 0 3
22736: PPUSH
22737: LD_INT 1
22739: PPUSH
22740: LD_INT 1
22742: PPUSH
22743: CALL_OW 483
// CenterOnXY ( x , y ) ;
22747: LD_VAR 0 2
22751: PPUSH
22752: LD_VAR 0 3
22756: PPUSH
22757: CALL_OW 84
// end ; end_of_file
22761: LD_VAR 0 4
22765: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22766: LD_INT 0
22768: PPUSH
22769: PPUSH
22770: PPUSH
22771: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22772: LD_VAR 0 1
22776: PPUSH
22777: CALL_OW 264
22781: PUSH
22782: LD_EXP 29
22786: EQUAL
22787: IFFALSE 22859
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22789: LD_INT 68
22791: PPUSH
22792: LD_VAR 0 1
22796: PPUSH
22797: CALL_OW 255
22801: PPUSH
22802: CALL_OW 321
22806: PUSH
22807: LD_INT 2
22809: EQUAL
22810: IFFALSE 22822
// eff := 70 else
22812: LD_ADDR_VAR 0 4
22816: PUSH
22817: LD_INT 70
22819: ST_TO_ADDR
22820: GO 22830
// eff := 30 ;
22822: LD_ADDR_VAR 0 4
22826: PUSH
22827: LD_INT 30
22829: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22830: LD_VAR 0 1
22834: PPUSH
22835: CALL_OW 250
22839: PPUSH
22840: LD_VAR 0 1
22844: PPUSH
22845: CALL_OW 251
22849: PPUSH
22850: LD_VAR 0 4
22854: PPUSH
22855: CALL_OW 495
// end ; end ;
22859: LD_VAR 0 2
22863: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22864: LD_INT 0
22866: PPUSH
// end ;
22867: LD_VAR 0 4
22871: RET
// export function SOS_Command ( cmd ) ; begin
22872: LD_INT 0
22874: PPUSH
// end ;
22875: LD_VAR 0 2
22879: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22880: LD_INT 0
22882: PPUSH
// if cmd = 121 then
22883: LD_VAR 0 1
22887: PUSH
22888: LD_INT 121
22890: EQUAL
22891: IFFALSE 22893
// end ;
22893: LD_VAR 0 6
22897: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22898: LD_INT 0
22900: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22901: LD_VAR 0 1
22905: PUSH
22906: LD_INT 250
22908: EQUAL
22909: PUSH
22910: LD_VAR 0 2
22914: PPUSH
22915: CALL_OW 264
22919: PUSH
22920: LD_EXP 32
22924: EQUAL
22925: AND
22926: IFFALSE 22947
// MinerPlaceMine ( unit , x , y ) ;
22928: LD_VAR 0 2
22932: PPUSH
22933: LD_VAR 0 4
22937: PPUSH
22938: LD_VAR 0 5
22942: PPUSH
22943: CALL 25296 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22947: LD_VAR 0 1
22951: PUSH
22952: LD_INT 251
22954: EQUAL
22955: PUSH
22956: LD_VAR 0 2
22960: PPUSH
22961: CALL_OW 264
22965: PUSH
22966: LD_EXP 32
22970: EQUAL
22971: AND
22972: IFFALSE 22993
// MinerDetonateMine ( unit , x , y ) ;
22974: LD_VAR 0 2
22978: PPUSH
22979: LD_VAR 0 4
22983: PPUSH
22984: LD_VAR 0 5
22988: PPUSH
22989: CALL 25573 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22993: LD_VAR 0 1
22997: PUSH
22998: LD_INT 252
23000: EQUAL
23001: PUSH
23002: LD_VAR 0 2
23006: PPUSH
23007: CALL_OW 264
23011: PUSH
23012: LD_EXP 32
23016: EQUAL
23017: AND
23018: IFFALSE 23039
// MinerCreateMinefield ( unit , x , y ) ;
23020: LD_VAR 0 2
23024: PPUSH
23025: LD_VAR 0 4
23029: PPUSH
23030: LD_VAR 0 5
23034: PPUSH
23035: CALL 25990 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23039: LD_VAR 0 1
23043: PUSH
23044: LD_INT 253
23046: EQUAL
23047: PUSH
23048: LD_VAR 0 2
23052: PPUSH
23053: CALL_OW 257
23057: PUSH
23058: LD_INT 5
23060: EQUAL
23061: AND
23062: IFFALSE 23083
// ComBinocular ( unit , x , y ) ;
23064: LD_VAR 0 2
23068: PPUSH
23069: LD_VAR 0 4
23073: PPUSH
23074: LD_VAR 0 5
23078: PPUSH
23079: CALL 26361 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23083: LD_VAR 0 1
23087: PUSH
23088: LD_INT 254
23090: EQUAL
23091: PUSH
23092: LD_VAR 0 2
23096: PPUSH
23097: CALL_OW 264
23101: PUSH
23102: LD_EXP 27
23106: EQUAL
23107: AND
23108: PUSH
23109: LD_VAR 0 3
23113: PPUSH
23114: CALL_OW 263
23118: PUSH
23119: LD_INT 3
23121: EQUAL
23122: AND
23123: IFFALSE 23139
// HackDestroyVehicle ( unit , selectedUnit ) ;
23125: LD_VAR 0 2
23129: PPUSH
23130: LD_VAR 0 3
23134: PPUSH
23135: CALL 24656 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23139: LD_VAR 0 1
23143: PUSH
23144: LD_INT 255
23146: EQUAL
23147: PUSH
23148: LD_VAR 0 2
23152: PPUSH
23153: CALL_OW 264
23157: PUSH
23158: LD_INT 14
23160: PUSH
23161: LD_INT 53
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: IN
23168: AND
23169: PUSH
23170: LD_VAR 0 4
23174: PPUSH
23175: LD_VAR 0 5
23179: PPUSH
23180: CALL_OW 488
23184: AND
23185: IFFALSE 23209
// CutTreeXYR ( unit , x , y , 12 ) ;
23187: LD_VAR 0 2
23191: PPUSH
23192: LD_VAR 0 4
23196: PPUSH
23197: LD_VAR 0 5
23201: PPUSH
23202: LD_INT 12
23204: PPUSH
23205: CALL 23222 0 4
// end ;
23209: LD_VAR 0 6
23213: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23214: LD_INT 0
23216: PPUSH
// end ;
23217: LD_VAR 0 4
23221: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23222: LD_INT 0
23224: PPUSH
23225: PPUSH
23226: PPUSH
23227: PPUSH
23228: PPUSH
23229: PPUSH
23230: PPUSH
23231: PPUSH
23232: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23233: LD_VAR 0 1
23237: NOT
23238: PUSH
23239: LD_VAR 0 2
23243: PPUSH
23244: LD_VAR 0 3
23248: PPUSH
23249: CALL_OW 488
23253: NOT
23254: OR
23255: PUSH
23256: LD_VAR 0 4
23260: NOT
23261: OR
23262: IFFALSE 23266
// exit ;
23264: GO 23606
// list := [ ] ;
23266: LD_ADDR_VAR 0 13
23270: PUSH
23271: EMPTY
23272: ST_TO_ADDR
// if x - r < 0 then
23273: LD_VAR 0 2
23277: PUSH
23278: LD_VAR 0 4
23282: MINUS
23283: PUSH
23284: LD_INT 0
23286: LESS
23287: IFFALSE 23299
// min_x := 0 else
23289: LD_ADDR_VAR 0 7
23293: PUSH
23294: LD_INT 0
23296: ST_TO_ADDR
23297: GO 23315
// min_x := x - r ;
23299: LD_ADDR_VAR 0 7
23303: PUSH
23304: LD_VAR 0 2
23308: PUSH
23309: LD_VAR 0 4
23313: MINUS
23314: ST_TO_ADDR
// if y - r < 0 then
23315: LD_VAR 0 3
23319: PUSH
23320: LD_VAR 0 4
23324: MINUS
23325: PUSH
23326: LD_INT 0
23328: LESS
23329: IFFALSE 23341
// min_y := 0 else
23331: LD_ADDR_VAR 0 8
23335: PUSH
23336: LD_INT 0
23338: ST_TO_ADDR
23339: GO 23357
// min_y := y - r ;
23341: LD_ADDR_VAR 0 8
23345: PUSH
23346: LD_VAR 0 3
23350: PUSH
23351: LD_VAR 0 4
23355: MINUS
23356: ST_TO_ADDR
// max_x := x + r ;
23357: LD_ADDR_VAR 0 9
23361: PUSH
23362: LD_VAR 0 2
23366: PUSH
23367: LD_VAR 0 4
23371: PLUS
23372: ST_TO_ADDR
// max_y := y + r ;
23373: LD_ADDR_VAR 0 10
23377: PUSH
23378: LD_VAR 0 3
23382: PUSH
23383: LD_VAR 0 4
23387: PLUS
23388: ST_TO_ADDR
// for _x = min_x to max_x do
23389: LD_ADDR_VAR 0 11
23393: PUSH
23394: DOUBLE
23395: LD_VAR 0 7
23399: DEC
23400: ST_TO_ADDR
23401: LD_VAR 0 9
23405: PUSH
23406: FOR_TO
23407: IFFALSE 23524
// for _y = min_y to max_y do
23409: LD_ADDR_VAR 0 12
23413: PUSH
23414: DOUBLE
23415: LD_VAR 0 8
23419: DEC
23420: ST_TO_ADDR
23421: LD_VAR 0 10
23425: PUSH
23426: FOR_TO
23427: IFFALSE 23520
// begin if not ValidHex ( _x , _y ) then
23429: LD_VAR 0 11
23433: PPUSH
23434: LD_VAR 0 12
23438: PPUSH
23439: CALL_OW 488
23443: NOT
23444: IFFALSE 23448
// continue ;
23446: GO 23426
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23448: LD_VAR 0 11
23452: PPUSH
23453: LD_VAR 0 12
23457: PPUSH
23458: CALL_OW 351
23462: PUSH
23463: LD_VAR 0 11
23467: PPUSH
23468: LD_VAR 0 12
23472: PPUSH
23473: CALL_OW 554
23477: AND
23478: IFFALSE 23518
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23480: LD_ADDR_VAR 0 13
23484: PUSH
23485: LD_VAR 0 13
23489: PPUSH
23490: LD_VAR 0 13
23494: PUSH
23495: LD_INT 1
23497: PLUS
23498: PPUSH
23499: LD_VAR 0 11
23503: PUSH
23504: LD_VAR 0 12
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PPUSH
23513: CALL_OW 2
23517: ST_TO_ADDR
// end ;
23518: GO 23426
23520: POP
23521: POP
23522: GO 23406
23524: POP
23525: POP
// if not list then
23526: LD_VAR 0 13
23530: NOT
23531: IFFALSE 23535
// exit ;
23533: GO 23606
// for i in list do
23535: LD_ADDR_VAR 0 6
23539: PUSH
23540: LD_VAR 0 13
23544: PUSH
23545: FOR_IN
23546: IFFALSE 23604
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23548: LD_VAR 0 1
23552: PPUSH
23553: LD_STRING M
23555: PUSH
23556: LD_VAR 0 6
23560: PUSH
23561: LD_INT 1
23563: ARRAY
23564: PUSH
23565: LD_VAR 0 6
23569: PUSH
23570: LD_INT 2
23572: ARRAY
23573: PUSH
23574: LD_INT 0
23576: PUSH
23577: LD_INT 0
23579: PUSH
23580: LD_INT 0
23582: PUSH
23583: LD_INT 0
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: PUSH
23595: EMPTY
23596: LIST
23597: PPUSH
23598: CALL_OW 447
23602: GO 23545
23604: POP
23605: POP
// end ;
23606: LD_VAR 0 5
23610: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23611: LD_EXP 98
23615: NOT
23616: IFFALSE 23666
23618: GO 23620
23620: DISABLE
// begin initHack := true ;
23621: LD_ADDR_EXP 98
23625: PUSH
23626: LD_INT 1
23628: ST_TO_ADDR
// hackTanks := [ ] ;
23629: LD_ADDR_EXP 99
23633: PUSH
23634: EMPTY
23635: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23636: LD_ADDR_EXP 100
23640: PUSH
23641: EMPTY
23642: ST_TO_ADDR
// hackLimit := 3 ;
23643: LD_ADDR_EXP 101
23647: PUSH
23648: LD_INT 3
23650: ST_TO_ADDR
// hackDist := 12 ;
23651: LD_ADDR_EXP 102
23655: PUSH
23656: LD_INT 12
23658: ST_TO_ADDR
// hackCounter := [ ] ;
23659: LD_ADDR_EXP 103
23663: PUSH
23664: EMPTY
23665: ST_TO_ADDR
// end ;
23666: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23667: LD_EXP 98
23671: PUSH
23672: LD_INT 34
23674: PUSH
23675: LD_EXP 27
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PPUSH
23684: CALL_OW 69
23688: AND
23689: IFFALSE 23944
23691: GO 23693
23693: DISABLE
23694: LD_INT 0
23696: PPUSH
23697: PPUSH
// begin enable ;
23698: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23699: LD_ADDR_VAR 0 1
23703: PUSH
23704: LD_INT 34
23706: PUSH
23707: LD_EXP 27
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PPUSH
23716: CALL_OW 69
23720: PUSH
23721: FOR_IN
23722: IFFALSE 23942
// begin if not i in hackTanks then
23724: LD_VAR 0 1
23728: PUSH
23729: LD_EXP 99
23733: IN
23734: NOT
23735: IFFALSE 23818
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23737: LD_ADDR_EXP 99
23741: PUSH
23742: LD_EXP 99
23746: PPUSH
23747: LD_EXP 99
23751: PUSH
23752: LD_INT 1
23754: PLUS
23755: PPUSH
23756: LD_VAR 0 1
23760: PPUSH
23761: CALL_OW 1
23765: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23766: LD_ADDR_EXP 100
23770: PUSH
23771: LD_EXP 100
23775: PPUSH
23776: LD_EXP 100
23780: PUSH
23781: LD_INT 1
23783: PLUS
23784: PPUSH
23785: EMPTY
23786: PPUSH
23787: CALL_OW 1
23791: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23792: LD_ADDR_EXP 103
23796: PUSH
23797: LD_EXP 103
23801: PPUSH
23802: LD_EXP 103
23806: PUSH
23807: LD_INT 1
23809: PLUS
23810: PPUSH
23811: EMPTY
23812: PPUSH
23813: CALL_OW 1
23817: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23818: LD_VAR 0 1
23822: PPUSH
23823: CALL_OW 302
23827: NOT
23828: IFFALSE 23841
// begin HackUnlinkAll ( i ) ;
23830: LD_VAR 0 1
23834: PPUSH
23835: CALL 23947 0 1
// continue ;
23839: GO 23721
// end ; HackCheckCapturedStatus ( i ) ;
23841: LD_VAR 0 1
23845: PPUSH
23846: CALL 24390 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23850: LD_ADDR_VAR 0 2
23854: PUSH
23855: LD_INT 81
23857: PUSH
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL_OW 255
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 33
23874: PUSH
23875: LD_INT 3
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 91
23884: PUSH
23885: LD_VAR 0 1
23889: PUSH
23890: LD_EXP 102
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 50
23902: PUSH
23903: EMPTY
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: PPUSH
23912: CALL_OW 69
23916: ST_TO_ADDR
// if not tmp then
23917: LD_VAR 0 2
23921: NOT
23922: IFFALSE 23926
// continue ;
23924: GO 23721
// HackLink ( i , tmp ) ;
23926: LD_VAR 0 1
23930: PPUSH
23931: LD_VAR 0 2
23935: PPUSH
23936: CALL 24083 0 2
// end ;
23940: GO 23721
23942: POP
23943: POP
// end ;
23944: PPOPN 2
23946: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23947: LD_INT 0
23949: PPUSH
23950: PPUSH
23951: PPUSH
// if not hack in hackTanks then
23952: LD_VAR 0 1
23956: PUSH
23957: LD_EXP 99
23961: IN
23962: NOT
23963: IFFALSE 23967
// exit ;
23965: GO 24078
// index := GetElementIndex ( hackTanks , hack ) ;
23967: LD_ADDR_VAR 0 4
23971: PUSH
23972: LD_EXP 99
23976: PPUSH
23977: LD_VAR 0 1
23981: PPUSH
23982: CALL 31512 0 2
23986: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23987: LD_EXP 100
23991: PUSH
23992: LD_VAR 0 4
23996: ARRAY
23997: IFFALSE 24078
// begin for i in hackTanksCaptured [ index ] do
23999: LD_ADDR_VAR 0 3
24003: PUSH
24004: LD_EXP 100
24008: PUSH
24009: LD_VAR 0 4
24013: ARRAY
24014: PUSH
24015: FOR_IN
24016: IFFALSE 24042
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24018: LD_VAR 0 3
24022: PUSH
24023: LD_INT 1
24025: ARRAY
24026: PPUSH
24027: LD_VAR 0 3
24031: PUSH
24032: LD_INT 2
24034: ARRAY
24035: PPUSH
24036: CALL_OW 235
24040: GO 24015
24042: POP
24043: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24044: LD_ADDR_EXP 100
24048: PUSH
24049: LD_EXP 100
24053: PPUSH
24054: LD_VAR 0 4
24058: PPUSH
24059: EMPTY
24060: PPUSH
24061: CALL_OW 1
24065: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24066: LD_VAR 0 1
24070: PPUSH
24071: LD_INT 0
24073: PPUSH
24074: CALL_OW 505
// end ; end ;
24078: LD_VAR 0 2
24082: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24083: LD_INT 0
24085: PPUSH
24086: PPUSH
24087: PPUSH
// if not hack in hackTanks or not vehicles then
24088: LD_VAR 0 1
24092: PUSH
24093: LD_EXP 99
24097: IN
24098: NOT
24099: PUSH
24100: LD_VAR 0 2
24104: NOT
24105: OR
24106: IFFALSE 24110
// exit ;
24108: GO 24385
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24110: LD_ADDR_VAR 0 2
24114: PUSH
24115: LD_VAR 0 1
24119: PPUSH
24120: LD_VAR 0 2
24124: PPUSH
24125: LD_INT 1
24127: PPUSH
24128: LD_INT 1
24130: PPUSH
24131: CALL 32162 0 4
24135: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24136: LD_ADDR_VAR 0 5
24140: PUSH
24141: LD_EXP 99
24145: PPUSH
24146: LD_VAR 0 1
24150: PPUSH
24151: CALL 31512 0 2
24155: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24156: LD_EXP 100
24160: PUSH
24161: LD_VAR 0 5
24165: ARRAY
24166: PUSH
24167: LD_EXP 101
24171: LESS
24172: IFFALSE 24361
// begin for i := 1 to vehicles do
24174: LD_ADDR_VAR 0 4
24178: PUSH
24179: DOUBLE
24180: LD_INT 1
24182: DEC
24183: ST_TO_ADDR
24184: LD_VAR 0 2
24188: PUSH
24189: FOR_TO
24190: IFFALSE 24359
// begin if hackTanksCaptured [ index ] = hackLimit then
24192: LD_EXP 100
24196: PUSH
24197: LD_VAR 0 5
24201: ARRAY
24202: PUSH
24203: LD_EXP 101
24207: EQUAL
24208: IFFALSE 24212
// break ;
24210: GO 24359
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24212: LD_ADDR_EXP 103
24216: PUSH
24217: LD_EXP 103
24221: PPUSH
24222: LD_VAR 0 5
24226: PPUSH
24227: LD_EXP 103
24231: PUSH
24232: LD_VAR 0 5
24236: ARRAY
24237: PUSH
24238: LD_INT 1
24240: PLUS
24241: PPUSH
24242: CALL_OW 1
24246: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24247: LD_ADDR_EXP 100
24251: PUSH
24252: LD_EXP 100
24256: PPUSH
24257: LD_VAR 0 5
24261: PUSH
24262: LD_EXP 100
24266: PUSH
24267: LD_VAR 0 5
24271: ARRAY
24272: PUSH
24273: LD_INT 1
24275: PLUS
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PPUSH
24281: LD_VAR 0 2
24285: PUSH
24286: LD_VAR 0 4
24290: ARRAY
24291: PUSH
24292: LD_VAR 0 2
24296: PUSH
24297: LD_VAR 0 4
24301: ARRAY
24302: PPUSH
24303: CALL_OW 255
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PPUSH
24312: CALL 31727 0 3
24316: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24317: LD_VAR 0 2
24321: PUSH
24322: LD_VAR 0 4
24326: ARRAY
24327: PPUSH
24328: LD_VAR 0 1
24332: PPUSH
24333: CALL_OW 255
24337: PPUSH
24338: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24342: LD_VAR 0 2
24346: PUSH
24347: LD_VAR 0 4
24351: ARRAY
24352: PPUSH
24353: CALL_OW 141
// end ;
24357: GO 24189
24359: POP
24360: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24361: LD_VAR 0 1
24365: PPUSH
24366: LD_EXP 100
24370: PUSH
24371: LD_VAR 0 5
24375: ARRAY
24376: PUSH
24377: LD_INT 0
24379: PLUS
24380: PPUSH
24381: CALL_OW 505
// end ;
24385: LD_VAR 0 3
24389: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24390: LD_INT 0
24392: PPUSH
24393: PPUSH
24394: PPUSH
24395: PPUSH
// if not hack in hackTanks then
24396: LD_VAR 0 1
24400: PUSH
24401: LD_EXP 99
24405: IN
24406: NOT
24407: IFFALSE 24411
// exit ;
24409: GO 24651
// index := GetElementIndex ( hackTanks , hack ) ;
24411: LD_ADDR_VAR 0 4
24415: PUSH
24416: LD_EXP 99
24420: PPUSH
24421: LD_VAR 0 1
24425: PPUSH
24426: CALL 31512 0 2
24430: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24431: LD_ADDR_VAR 0 3
24435: PUSH
24436: DOUBLE
24437: LD_EXP 100
24441: PUSH
24442: LD_VAR 0 4
24446: ARRAY
24447: INC
24448: ST_TO_ADDR
24449: LD_INT 1
24451: PUSH
24452: FOR_DOWNTO
24453: IFFALSE 24625
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24455: LD_ADDR_VAR 0 5
24459: PUSH
24460: LD_EXP 100
24464: PUSH
24465: LD_VAR 0 4
24469: ARRAY
24470: PUSH
24471: LD_VAR 0 3
24475: ARRAY
24476: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24477: LD_VAR 0 5
24481: PUSH
24482: LD_INT 1
24484: ARRAY
24485: PPUSH
24486: CALL_OW 302
24490: NOT
24491: PUSH
24492: LD_VAR 0 5
24496: PUSH
24497: LD_INT 1
24499: ARRAY
24500: PPUSH
24501: CALL_OW 255
24505: PUSH
24506: LD_VAR 0 1
24510: PPUSH
24511: CALL_OW 255
24515: NONEQUAL
24516: OR
24517: IFFALSE 24623
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24519: LD_VAR 0 5
24523: PUSH
24524: LD_INT 1
24526: ARRAY
24527: PPUSH
24528: CALL_OW 305
24532: PUSH
24533: LD_VAR 0 5
24537: PUSH
24538: LD_INT 1
24540: ARRAY
24541: PPUSH
24542: CALL_OW 255
24546: PUSH
24547: LD_VAR 0 1
24551: PPUSH
24552: CALL_OW 255
24556: EQUAL
24557: AND
24558: IFFALSE 24582
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24560: LD_VAR 0 5
24564: PUSH
24565: LD_INT 1
24567: ARRAY
24568: PPUSH
24569: LD_VAR 0 5
24573: PUSH
24574: LD_INT 2
24576: ARRAY
24577: PPUSH
24578: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24582: LD_ADDR_EXP 100
24586: PUSH
24587: LD_EXP 100
24591: PPUSH
24592: LD_VAR 0 4
24596: PPUSH
24597: LD_EXP 100
24601: PUSH
24602: LD_VAR 0 4
24606: ARRAY
24607: PPUSH
24608: LD_VAR 0 3
24612: PPUSH
24613: CALL_OW 3
24617: PPUSH
24618: CALL_OW 1
24622: ST_TO_ADDR
// end ; end ;
24623: GO 24452
24625: POP
24626: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24627: LD_VAR 0 1
24631: PPUSH
24632: LD_EXP 100
24636: PUSH
24637: LD_VAR 0 4
24641: ARRAY
24642: PUSH
24643: LD_INT 0
24645: PLUS
24646: PPUSH
24647: CALL_OW 505
// end ;
24651: LD_VAR 0 2
24655: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24656: LD_INT 0
24658: PPUSH
24659: PPUSH
24660: PPUSH
24661: PPUSH
// if not hack in hackTanks then
24662: LD_VAR 0 1
24666: PUSH
24667: LD_EXP 99
24671: IN
24672: NOT
24673: IFFALSE 24677
// exit ;
24675: GO 24762
// index := GetElementIndex ( hackTanks , hack ) ;
24677: LD_ADDR_VAR 0 5
24681: PUSH
24682: LD_EXP 99
24686: PPUSH
24687: LD_VAR 0 1
24691: PPUSH
24692: CALL 31512 0 2
24696: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24697: LD_ADDR_VAR 0 4
24701: PUSH
24702: DOUBLE
24703: LD_INT 1
24705: DEC
24706: ST_TO_ADDR
24707: LD_EXP 100
24711: PUSH
24712: LD_VAR 0 5
24716: ARRAY
24717: PUSH
24718: FOR_TO
24719: IFFALSE 24760
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24721: LD_EXP 100
24725: PUSH
24726: LD_VAR 0 5
24730: ARRAY
24731: PUSH
24732: LD_VAR 0 4
24736: ARRAY
24737: PUSH
24738: LD_INT 1
24740: ARRAY
24741: PUSH
24742: LD_VAR 0 2
24746: EQUAL
24747: IFFALSE 24758
// KillUnit ( vehicle ) ;
24749: LD_VAR 0 2
24753: PPUSH
24754: CALL_OW 66
24758: GO 24718
24760: POP
24761: POP
// end ;
24762: LD_VAR 0 3
24766: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24767: LD_EXP 104
24771: NOT
24772: IFFALSE 24807
24774: GO 24776
24776: DISABLE
// begin initMiner := true ;
24777: LD_ADDR_EXP 104
24781: PUSH
24782: LD_INT 1
24784: ST_TO_ADDR
// minersList := [ ] ;
24785: LD_ADDR_EXP 105
24789: PUSH
24790: EMPTY
24791: ST_TO_ADDR
// minerMinesList := [ ] ;
24792: LD_ADDR_EXP 106
24796: PUSH
24797: EMPTY
24798: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24799: LD_ADDR_EXP 107
24803: PUSH
24804: LD_INT 5
24806: ST_TO_ADDR
// end ;
24807: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24808: LD_EXP 104
24812: PUSH
24813: LD_INT 34
24815: PUSH
24816: LD_EXP 32
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PPUSH
24825: CALL_OW 69
24829: AND
24830: IFFALSE 25293
24832: GO 24834
24834: DISABLE
24835: LD_INT 0
24837: PPUSH
24838: PPUSH
24839: PPUSH
24840: PPUSH
// begin enable ;
24841: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24842: LD_ADDR_VAR 0 1
24846: PUSH
24847: LD_INT 34
24849: PUSH
24850: LD_EXP 32
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PPUSH
24859: CALL_OW 69
24863: PUSH
24864: FOR_IN
24865: IFFALSE 24937
// begin if not i in minersList then
24867: LD_VAR 0 1
24871: PUSH
24872: LD_EXP 105
24876: IN
24877: NOT
24878: IFFALSE 24935
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24880: LD_ADDR_EXP 105
24884: PUSH
24885: LD_EXP 105
24889: PPUSH
24890: LD_EXP 105
24894: PUSH
24895: LD_INT 1
24897: PLUS
24898: PPUSH
24899: LD_VAR 0 1
24903: PPUSH
24904: CALL_OW 1
24908: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24909: LD_ADDR_EXP 106
24913: PUSH
24914: LD_EXP 106
24918: PPUSH
24919: LD_EXP 106
24923: PUSH
24924: LD_INT 1
24926: PLUS
24927: PPUSH
24928: EMPTY
24929: PPUSH
24930: CALL_OW 1
24934: ST_TO_ADDR
// end end ;
24935: GO 24864
24937: POP
24938: POP
// for i := minerMinesList downto 1 do
24939: LD_ADDR_VAR 0 1
24943: PUSH
24944: DOUBLE
24945: LD_EXP 106
24949: INC
24950: ST_TO_ADDR
24951: LD_INT 1
24953: PUSH
24954: FOR_DOWNTO
24955: IFFALSE 25291
// begin if IsLive ( minersList [ i ] ) then
24957: LD_EXP 105
24961: PUSH
24962: LD_VAR 0 1
24966: ARRAY
24967: PPUSH
24968: CALL_OW 300
24972: IFFALSE 25000
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24974: LD_EXP 105
24978: PUSH
24979: LD_VAR 0 1
24983: ARRAY
24984: PPUSH
24985: LD_EXP 106
24989: PUSH
24990: LD_VAR 0 1
24994: ARRAY
24995: PPUSH
24996: CALL_OW 505
// if not minerMinesList [ i ] then
25000: LD_EXP 106
25004: PUSH
25005: LD_VAR 0 1
25009: ARRAY
25010: NOT
25011: IFFALSE 25015
// continue ;
25013: GO 24954
// for j := minerMinesList [ i ] downto 1 do
25015: LD_ADDR_VAR 0 2
25019: PUSH
25020: DOUBLE
25021: LD_EXP 106
25025: PUSH
25026: LD_VAR 0 1
25030: ARRAY
25031: INC
25032: ST_TO_ADDR
25033: LD_INT 1
25035: PUSH
25036: FOR_DOWNTO
25037: IFFALSE 25287
// begin side := GetSide ( minersList [ i ] ) ;
25039: LD_ADDR_VAR 0 3
25043: PUSH
25044: LD_EXP 105
25048: PUSH
25049: LD_VAR 0 1
25053: ARRAY
25054: PPUSH
25055: CALL_OW 255
25059: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25060: LD_ADDR_VAR 0 4
25064: PUSH
25065: LD_EXP 106
25069: PUSH
25070: LD_VAR 0 1
25074: ARRAY
25075: PUSH
25076: LD_VAR 0 2
25080: ARRAY
25081: PUSH
25082: LD_INT 1
25084: ARRAY
25085: PPUSH
25086: LD_EXP 106
25090: PUSH
25091: LD_VAR 0 1
25095: ARRAY
25096: PUSH
25097: LD_VAR 0 2
25101: ARRAY
25102: PUSH
25103: LD_INT 2
25105: ARRAY
25106: PPUSH
25107: CALL_OW 428
25111: ST_TO_ADDR
// if not tmp then
25112: LD_VAR 0 4
25116: NOT
25117: IFFALSE 25121
// continue ;
25119: GO 25036
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25121: LD_VAR 0 4
25125: PUSH
25126: LD_INT 81
25128: PUSH
25129: LD_VAR 0 3
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PPUSH
25138: CALL_OW 69
25142: IN
25143: PUSH
25144: LD_EXP 106
25148: PUSH
25149: LD_VAR 0 1
25153: ARRAY
25154: PUSH
25155: LD_VAR 0 2
25159: ARRAY
25160: PUSH
25161: LD_INT 1
25163: ARRAY
25164: PPUSH
25165: LD_EXP 106
25169: PUSH
25170: LD_VAR 0 1
25174: ARRAY
25175: PUSH
25176: LD_VAR 0 2
25180: ARRAY
25181: PUSH
25182: LD_INT 2
25184: ARRAY
25185: PPUSH
25186: CALL_OW 458
25190: AND
25191: IFFALSE 25285
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25193: LD_EXP 106
25197: PUSH
25198: LD_VAR 0 1
25202: ARRAY
25203: PUSH
25204: LD_VAR 0 2
25208: ARRAY
25209: PUSH
25210: LD_INT 1
25212: ARRAY
25213: PPUSH
25214: LD_EXP 106
25218: PUSH
25219: LD_VAR 0 1
25223: ARRAY
25224: PUSH
25225: LD_VAR 0 2
25229: ARRAY
25230: PUSH
25231: LD_INT 2
25233: ARRAY
25234: PPUSH
25235: LD_VAR 0 3
25239: PPUSH
25240: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25244: LD_ADDR_EXP 106
25248: PUSH
25249: LD_EXP 106
25253: PPUSH
25254: LD_VAR 0 1
25258: PPUSH
25259: LD_EXP 106
25263: PUSH
25264: LD_VAR 0 1
25268: ARRAY
25269: PPUSH
25270: LD_VAR 0 2
25274: PPUSH
25275: CALL_OW 3
25279: PPUSH
25280: CALL_OW 1
25284: ST_TO_ADDR
// end ; end ;
25285: GO 25036
25287: POP
25288: POP
// end ;
25289: GO 24954
25291: POP
25292: POP
// end ;
25293: PPOPN 4
25295: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25296: LD_INT 0
25298: PPUSH
25299: PPUSH
// result := false ;
25300: LD_ADDR_VAR 0 4
25304: PUSH
25305: LD_INT 0
25307: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25308: LD_VAR 0 1
25312: PPUSH
25313: CALL_OW 264
25317: PUSH
25318: LD_EXP 32
25322: EQUAL
25323: NOT
25324: IFFALSE 25328
// exit ;
25326: GO 25568
// index := GetElementIndex ( minersList , unit ) ;
25328: LD_ADDR_VAR 0 5
25332: PUSH
25333: LD_EXP 105
25337: PPUSH
25338: LD_VAR 0 1
25342: PPUSH
25343: CALL 31512 0 2
25347: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25348: LD_EXP 106
25352: PUSH
25353: LD_VAR 0 5
25357: ARRAY
25358: PUSH
25359: LD_EXP 107
25363: GREATEREQUAL
25364: IFFALSE 25368
// exit ;
25366: GO 25568
// ComMoveXY ( unit , x , y ) ;
25368: LD_VAR 0 1
25372: PPUSH
25373: LD_VAR 0 2
25377: PPUSH
25378: LD_VAR 0 3
25382: PPUSH
25383: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25387: LD_INT 35
25389: PPUSH
25390: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25394: LD_VAR 0 1
25398: PPUSH
25399: LD_VAR 0 2
25403: PPUSH
25404: LD_VAR 0 3
25408: PPUSH
25409: CALL 61909 0 3
25413: NOT
25414: PUSH
25415: LD_VAR 0 1
25419: PPUSH
25420: CALL_OW 314
25424: AND
25425: IFFALSE 25429
// exit ;
25427: GO 25568
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25429: LD_VAR 0 2
25433: PPUSH
25434: LD_VAR 0 3
25438: PPUSH
25439: CALL_OW 428
25443: PUSH
25444: LD_VAR 0 1
25448: EQUAL
25449: PUSH
25450: LD_VAR 0 1
25454: PPUSH
25455: CALL_OW 314
25459: NOT
25460: AND
25461: IFFALSE 25387
// PlaySoundXY ( x , y , PlantMine ) ;
25463: LD_VAR 0 2
25467: PPUSH
25468: LD_VAR 0 3
25472: PPUSH
25473: LD_STRING PlantMine
25475: PPUSH
25476: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25480: LD_VAR 0 2
25484: PPUSH
25485: LD_VAR 0 3
25489: PPUSH
25490: LD_VAR 0 1
25494: PPUSH
25495: CALL_OW 255
25499: PPUSH
25500: LD_INT 0
25502: PPUSH
25503: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25507: LD_ADDR_EXP 106
25511: PUSH
25512: LD_EXP 106
25516: PPUSH
25517: LD_VAR 0 5
25521: PUSH
25522: LD_EXP 106
25526: PUSH
25527: LD_VAR 0 5
25531: ARRAY
25532: PUSH
25533: LD_INT 1
25535: PLUS
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PPUSH
25541: LD_VAR 0 2
25545: PUSH
25546: LD_VAR 0 3
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PPUSH
25555: CALL 31727 0 3
25559: ST_TO_ADDR
// result := true ;
25560: LD_ADDR_VAR 0 4
25564: PUSH
25565: LD_INT 1
25567: ST_TO_ADDR
// end ;
25568: LD_VAR 0 4
25572: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25573: LD_INT 0
25575: PPUSH
25576: PPUSH
25577: PPUSH
// if not unit in minersList then
25578: LD_VAR 0 1
25582: PUSH
25583: LD_EXP 105
25587: IN
25588: NOT
25589: IFFALSE 25593
// exit ;
25591: GO 25985
// index := GetElementIndex ( minersList , unit ) ;
25593: LD_ADDR_VAR 0 6
25597: PUSH
25598: LD_EXP 105
25602: PPUSH
25603: LD_VAR 0 1
25607: PPUSH
25608: CALL 31512 0 2
25612: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25613: LD_ADDR_VAR 0 5
25617: PUSH
25618: DOUBLE
25619: LD_EXP 106
25623: PUSH
25624: LD_VAR 0 6
25628: ARRAY
25629: INC
25630: ST_TO_ADDR
25631: LD_INT 1
25633: PUSH
25634: FOR_DOWNTO
25635: IFFALSE 25796
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25637: LD_EXP 106
25641: PUSH
25642: LD_VAR 0 6
25646: ARRAY
25647: PUSH
25648: LD_VAR 0 5
25652: ARRAY
25653: PUSH
25654: LD_INT 1
25656: ARRAY
25657: PUSH
25658: LD_VAR 0 2
25662: EQUAL
25663: PUSH
25664: LD_EXP 106
25668: PUSH
25669: LD_VAR 0 6
25673: ARRAY
25674: PUSH
25675: LD_VAR 0 5
25679: ARRAY
25680: PUSH
25681: LD_INT 2
25683: ARRAY
25684: PUSH
25685: LD_VAR 0 3
25689: EQUAL
25690: AND
25691: IFFALSE 25794
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25693: LD_EXP 106
25697: PUSH
25698: LD_VAR 0 6
25702: ARRAY
25703: PUSH
25704: LD_VAR 0 5
25708: ARRAY
25709: PUSH
25710: LD_INT 1
25712: ARRAY
25713: PPUSH
25714: LD_EXP 106
25718: PUSH
25719: LD_VAR 0 6
25723: ARRAY
25724: PUSH
25725: LD_VAR 0 5
25729: ARRAY
25730: PUSH
25731: LD_INT 2
25733: ARRAY
25734: PPUSH
25735: LD_VAR 0 1
25739: PPUSH
25740: CALL_OW 255
25744: PPUSH
25745: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25749: LD_ADDR_EXP 106
25753: PUSH
25754: LD_EXP 106
25758: PPUSH
25759: LD_VAR 0 6
25763: PPUSH
25764: LD_EXP 106
25768: PUSH
25769: LD_VAR 0 6
25773: ARRAY
25774: PPUSH
25775: LD_VAR 0 5
25779: PPUSH
25780: CALL_OW 3
25784: PPUSH
25785: CALL_OW 1
25789: ST_TO_ADDR
// exit ;
25790: POP
25791: POP
25792: GO 25985
// end ; end ;
25794: GO 25634
25796: POP
25797: POP
// for i := minerMinesList [ index ] downto 1 do
25798: LD_ADDR_VAR 0 5
25802: PUSH
25803: DOUBLE
25804: LD_EXP 106
25808: PUSH
25809: LD_VAR 0 6
25813: ARRAY
25814: INC
25815: ST_TO_ADDR
25816: LD_INT 1
25818: PUSH
25819: FOR_DOWNTO
25820: IFFALSE 25983
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25822: LD_EXP 106
25826: PUSH
25827: LD_VAR 0 6
25831: ARRAY
25832: PUSH
25833: LD_VAR 0 5
25837: ARRAY
25838: PUSH
25839: LD_INT 1
25841: ARRAY
25842: PPUSH
25843: LD_EXP 106
25847: PUSH
25848: LD_VAR 0 6
25852: ARRAY
25853: PUSH
25854: LD_VAR 0 5
25858: ARRAY
25859: PUSH
25860: LD_INT 2
25862: ARRAY
25863: PPUSH
25864: LD_VAR 0 2
25868: PPUSH
25869: LD_VAR 0 3
25873: PPUSH
25874: CALL_OW 298
25878: PUSH
25879: LD_INT 6
25881: LESS
25882: IFFALSE 25981
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25884: LD_EXP 106
25888: PUSH
25889: LD_VAR 0 6
25893: ARRAY
25894: PUSH
25895: LD_VAR 0 5
25899: ARRAY
25900: PUSH
25901: LD_INT 1
25903: ARRAY
25904: PPUSH
25905: LD_EXP 106
25909: PUSH
25910: LD_VAR 0 6
25914: ARRAY
25915: PUSH
25916: LD_VAR 0 5
25920: ARRAY
25921: PUSH
25922: LD_INT 2
25924: ARRAY
25925: PPUSH
25926: LD_VAR 0 1
25930: PPUSH
25931: CALL_OW 255
25935: PPUSH
25936: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25940: LD_ADDR_EXP 106
25944: PUSH
25945: LD_EXP 106
25949: PPUSH
25950: LD_VAR 0 6
25954: PPUSH
25955: LD_EXP 106
25959: PUSH
25960: LD_VAR 0 6
25964: ARRAY
25965: PPUSH
25966: LD_VAR 0 5
25970: PPUSH
25971: CALL_OW 3
25975: PPUSH
25976: CALL_OW 1
25980: ST_TO_ADDR
// end ; end ;
25981: GO 25819
25983: POP
25984: POP
// end ;
25985: LD_VAR 0 4
25989: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25990: LD_INT 0
25992: PPUSH
25993: PPUSH
25994: PPUSH
25995: PPUSH
25996: PPUSH
25997: PPUSH
25998: PPUSH
25999: PPUSH
26000: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26001: LD_VAR 0 1
26005: PPUSH
26006: CALL_OW 264
26010: PUSH
26011: LD_EXP 32
26015: EQUAL
26016: NOT
26017: PUSH
26018: LD_VAR 0 1
26022: PUSH
26023: LD_EXP 105
26027: IN
26028: NOT
26029: OR
26030: IFFALSE 26034
// exit ;
26032: GO 26356
// index := GetElementIndex ( minersList , unit ) ;
26034: LD_ADDR_VAR 0 6
26038: PUSH
26039: LD_EXP 105
26043: PPUSH
26044: LD_VAR 0 1
26048: PPUSH
26049: CALL 31512 0 2
26053: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26054: LD_ADDR_VAR 0 8
26058: PUSH
26059: LD_EXP 107
26063: PUSH
26064: LD_EXP 106
26068: PUSH
26069: LD_VAR 0 6
26073: ARRAY
26074: MINUS
26075: ST_TO_ADDR
// if not minesFreeAmount then
26076: LD_VAR 0 8
26080: NOT
26081: IFFALSE 26085
// exit ;
26083: GO 26356
// tmp := [ ] ;
26085: LD_ADDR_VAR 0 7
26089: PUSH
26090: EMPTY
26091: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26092: LD_ADDR_VAR 0 5
26096: PUSH
26097: DOUBLE
26098: LD_INT 1
26100: DEC
26101: ST_TO_ADDR
26102: LD_VAR 0 8
26106: PUSH
26107: FOR_TO
26108: IFFALSE 26303
// begin _d := rand ( 0 , 5 ) ;
26110: LD_ADDR_VAR 0 11
26114: PUSH
26115: LD_INT 0
26117: PPUSH
26118: LD_INT 5
26120: PPUSH
26121: CALL_OW 12
26125: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26126: LD_ADDR_VAR 0 12
26130: PUSH
26131: LD_INT 2
26133: PPUSH
26134: LD_INT 6
26136: PPUSH
26137: CALL_OW 12
26141: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26142: LD_ADDR_VAR 0 9
26146: PUSH
26147: LD_VAR 0 2
26151: PPUSH
26152: LD_VAR 0 11
26156: PPUSH
26157: LD_VAR 0 12
26161: PPUSH
26162: CALL_OW 272
26166: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26167: LD_ADDR_VAR 0 10
26171: PUSH
26172: LD_VAR 0 3
26176: PPUSH
26177: LD_VAR 0 11
26181: PPUSH
26182: LD_VAR 0 12
26186: PPUSH
26187: CALL_OW 273
26191: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26192: LD_VAR 0 9
26196: PPUSH
26197: LD_VAR 0 10
26201: PPUSH
26202: CALL_OW 488
26206: PUSH
26207: LD_VAR 0 9
26211: PUSH
26212: LD_VAR 0 10
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_VAR 0 7
26225: IN
26226: NOT
26227: AND
26228: PUSH
26229: LD_VAR 0 9
26233: PPUSH
26234: LD_VAR 0 10
26238: PPUSH
26239: CALL_OW 458
26243: NOT
26244: AND
26245: IFFALSE 26287
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26247: LD_ADDR_VAR 0 7
26251: PUSH
26252: LD_VAR 0 7
26256: PPUSH
26257: LD_VAR 0 7
26261: PUSH
26262: LD_INT 1
26264: PLUS
26265: PPUSH
26266: LD_VAR 0 9
26270: PUSH
26271: LD_VAR 0 10
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PPUSH
26280: CALL_OW 1
26284: ST_TO_ADDR
26285: GO 26301
// i := i - 1 ;
26287: LD_ADDR_VAR 0 5
26291: PUSH
26292: LD_VAR 0 5
26296: PUSH
26297: LD_INT 1
26299: MINUS
26300: ST_TO_ADDR
// end ;
26301: GO 26107
26303: POP
26304: POP
// for i in tmp do
26305: LD_ADDR_VAR 0 5
26309: PUSH
26310: LD_VAR 0 7
26314: PUSH
26315: FOR_IN
26316: IFFALSE 26354
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26318: LD_VAR 0 1
26322: PPUSH
26323: LD_VAR 0 5
26327: PUSH
26328: LD_INT 1
26330: ARRAY
26331: PPUSH
26332: LD_VAR 0 5
26336: PUSH
26337: LD_INT 2
26339: ARRAY
26340: PPUSH
26341: CALL 25296 0 3
26345: NOT
26346: IFFALSE 26352
// exit ;
26348: POP
26349: POP
26350: GO 26356
26352: GO 26315
26354: POP
26355: POP
// end ;
26356: LD_VAR 0 4
26360: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26361: LD_INT 0
26363: PPUSH
26364: PPUSH
26365: PPUSH
26366: PPUSH
26367: PPUSH
26368: PPUSH
26369: PPUSH
// if not GetClass ( unit ) = class_sniper then
26370: LD_VAR 0 1
26374: PPUSH
26375: CALL_OW 257
26379: PUSH
26380: LD_INT 5
26382: EQUAL
26383: NOT
26384: IFFALSE 26388
// exit ;
26386: GO 26776
// dist := 8 ;
26388: LD_ADDR_VAR 0 5
26392: PUSH
26393: LD_INT 8
26395: ST_TO_ADDR
// viewRange := 12 ;
26396: LD_ADDR_VAR 0 7
26400: PUSH
26401: LD_INT 12
26403: ST_TO_ADDR
// side := GetSide ( unit ) ;
26404: LD_ADDR_VAR 0 6
26408: PUSH
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 255
26418: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26419: LD_INT 61
26421: PPUSH
26422: LD_VAR 0 6
26426: PPUSH
26427: CALL_OW 321
26431: PUSH
26432: LD_INT 2
26434: EQUAL
26435: IFFALSE 26445
// viewRange := 16 ;
26437: LD_ADDR_VAR 0 7
26441: PUSH
26442: LD_INT 16
26444: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26445: LD_VAR 0 1
26449: PPUSH
26450: LD_VAR 0 2
26454: PPUSH
26455: LD_VAR 0 3
26459: PPUSH
26460: CALL_OW 297
26464: PUSH
26465: LD_VAR 0 5
26469: GREATER
26470: IFFALSE 26549
// begin ComMoveXY ( unit , x , y ) ;
26472: LD_VAR 0 1
26476: PPUSH
26477: LD_VAR 0 2
26481: PPUSH
26482: LD_VAR 0 3
26486: PPUSH
26487: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26491: LD_INT 35
26493: PPUSH
26494: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26498: LD_VAR 0 1
26502: PPUSH
26503: LD_VAR 0 2
26507: PPUSH
26508: LD_VAR 0 3
26512: PPUSH
26513: CALL 61909 0 3
26517: NOT
26518: IFFALSE 26522
// exit ;
26520: GO 26776
// until GetDistUnitXY ( unit , x , y ) < dist ;
26522: LD_VAR 0 1
26526: PPUSH
26527: LD_VAR 0 2
26531: PPUSH
26532: LD_VAR 0 3
26536: PPUSH
26537: CALL_OW 297
26541: PUSH
26542: LD_VAR 0 5
26546: LESS
26547: IFFALSE 26491
// end ; ComTurnXY ( unit , x , y ) ;
26549: LD_VAR 0 1
26553: PPUSH
26554: LD_VAR 0 2
26558: PPUSH
26559: LD_VAR 0 3
26563: PPUSH
26564: CALL_OW 118
// wait ( 5 ) ;
26568: LD_INT 5
26570: PPUSH
26571: CALL_OW 67
// _d := GetDir ( unit ) ;
26575: LD_ADDR_VAR 0 10
26579: PUSH
26580: LD_VAR 0 1
26584: PPUSH
26585: CALL_OW 254
26589: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26590: LD_ADDR_VAR 0 8
26594: PUSH
26595: LD_VAR 0 1
26599: PPUSH
26600: CALL_OW 250
26604: PPUSH
26605: LD_VAR 0 10
26609: PPUSH
26610: LD_VAR 0 5
26614: PPUSH
26615: CALL_OW 272
26619: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26620: LD_ADDR_VAR 0 9
26624: PUSH
26625: LD_VAR 0 1
26629: PPUSH
26630: CALL_OW 251
26634: PPUSH
26635: LD_VAR 0 10
26639: PPUSH
26640: LD_VAR 0 5
26644: PPUSH
26645: CALL_OW 273
26649: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26650: LD_VAR 0 8
26654: PPUSH
26655: LD_VAR 0 9
26659: PPUSH
26660: CALL_OW 488
26664: NOT
26665: IFFALSE 26669
// exit ;
26667: GO 26776
// ComAnimCustom ( unit , 1 ) ;
26669: LD_VAR 0 1
26673: PPUSH
26674: LD_INT 1
26676: PPUSH
26677: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26681: LD_VAR 0 8
26685: PPUSH
26686: LD_VAR 0 9
26690: PPUSH
26691: LD_VAR 0 6
26695: PPUSH
26696: LD_VAR 0 7
26700: PPUSH
26701: CALL_OW 330
// repeat wait ( 1 ) ;
26705: LD_INT 1
26707: PPUSH
26708: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26712: LD_VAR 0 1
26716: PPUSH
26717: CALL_OW 316
26721: PUSH
26722: LD_VAR 0 1
26726: PPUSH
26727: CALL_OW 314
26731: OR
26732: PUSH
26733: LD_VAR 0 1
26737: PPUSH
26738: CALL_OW 302
26742: NOT
26743: OR
26744: PUSH
26745: LD_VAR 0 1
26749: PPUSH
26750: CALL_OW 301
26754: OR
26755: IFFALSE 26705
// RemoveSeeing ( _x , _y , side ) ;
26757: LD_VAR 0 8
26761: PPUSH
26762: LD_VAR 0 9
26766: PPUSH
26767: LD_VAR 0 6
26771: PPUSH
26772: CALL_OW 331
// end ; end_of_file
26776: LD_VAR 0 4
26780: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26781: LD_INT 0
26783: PPUSH
26784: PPUSH
// if exist_mode then
26785: LD_VAR 0 2
26789: IFFALSE 26814
// unit := CreateCharacter ( prefix & ident ) else
26791: LD_ADDR_VAR 0 5
26795: PUSH
26796: LD_VAR 0 3
26800: PUSH
26801: LD_VAR 0 1
26805: STR
26806: PPUSH
26807: CALL_OW 34
26811: ST_TO_ADDR
26812: GO 26829
// unit := NewCharacter ( ident ) ;
26814: LD_ADDR_VAR 0 5
26818: PUSH
26819: LD_VAR 0 1
26823: PPUSH
26824: CALL_OW 25
26828: ST_TO_ADDR
// result := unit ;
26829: LD_ADDR_VAR 0 4
26833: PUSH
26834: LD_VAR 0 5
26838: ST_TO_ADDR
// end ;
26839: LD_VAR 0 4
26843: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26844: LD_INT 0
26846: PPUSH
26847: PPUSH
// if not side or not nation then
26848: LD_VAR 0 1
26852: NOT
26853: PUSH
26854: LD_VAR 0 2
26858: NOT
26859: OR
26860: IFFALSE 26864
// exit ;
26862: GO 27628
// case nation of nation_american :
26864: LD_VAR 0 2
26868: PUSH
26869: LD_INT 1
26871: DOUBLE
26872: EQUAL
26873: IFTRUE 26877
26875: GO 27091
26877: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26878: LD_ADDR_VAR 0 4
26882: PUSH
26883: LD_INT 35
26885: PUSH
26886: LD_INT 45
26888: PUSH
26889: LD_INT 46
26891: PUSH
26892: LD_INT 47
26894: PUSH
26895: LD_INT 82
26897: PUSH
26898: LD_INT 83
26900: PUSH
26901: LD_INT 84
26903: PUSH
26904: LD_INT 85
26906: PUSH
26907: LD_INT 86
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 6
26918: PUSH
26919: LD_INT 15
26921: PUSH
26922: LD_INT 16
26924: PUSH
26925: LD_INT 7
26927: PUSH
26928: LD_INT 12
26930: PUSH
26931: LD_INT 13
26933: PUSH
26934: LD_INT 10
26936: PUSH
26937: LD_INT 14
26939: PUSH
26940: LD_INT 20
26942: PUSH
26943: LD_INT 21
26945: PUSH
26946: LD_INT 22
26948: PUSH
26949: LD_INT 25
26951: PUSH
26952: LD_INT 32
26954: PUSH
26955: LD_INT 27
26957: PUSH
26958: LD_INT 36
26960: PUSH
26961: LD_INT 69
26963: PUSH
26964: LD_INT 39
26966: PUSH
26967: LD_INT 34
26969: PUSH
26970: LD_INT 40
26972: PUSH
26973: LD_INT 48
26975: PUSH
26976: LD_INT 49
26978: PUSH
26979: LD_INT 50
26981: PUSH
26982: LD_INT 51
26984: PUSH
26985: LD_INT 52
26987: PUSH
26988: LD_INT 53
26990: PUSH
26991: LD_INT 54
26993: PUSH
26994: LD_INT 55
26996: PUSH
26997: LD_INT 56
26999: PUSH
27000: LD_INT 57
27002: PUSH
27003: LD_INT 58
27005: PUSH
27006: LD_INT 59
27008: PUSH
27009: LD_INT 60
27011: PUSH
27012: LD_INT 61
27014: PUSH
27015: LD_INT 62
27017: PUSH
27018: LD_INT 80
27020: PUSH
27021: LD_INT 82
27023: PUSH
27024: LD_INT 83
27026: PUSH
27027: LD_INT 84
27029: PUSH
27030: LD_INT 85
27032: PUSH
27033: LD_INT 86
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: ST_TO_ADDR
27089: GO 27552
27091: LD_INT 2
27093: DOUBLE
27094: EQUAL
27095: IFTRUE 27099
27097: GO 27321
27099: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27100: LD_ADDR_VAR 0 4
27104: PUSH
27105: LD_INT 35
27107: PUSH
27108: LD_INT 45
27110: PUSH
27111: LD_INT 46
27113: PUSH
27114: LD_INT 47
27116: PUSH
27117: LD_INT 82
27119: PUSH
27120: LD_INT 83
27122: PUSH
27123: LD_INT 84
27125: PUSH
27126: LD_INT 85
27128: PUSH
27129: LD_INT 87
27131: PUSH
27132: LD_INT 70
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: LD_INT 11
27140: PUSH
27141: LD_INT 3
27143: PUSH
27144: LD_INT 4
27146: PUSH
27147: LD_INT 5
27149: PUSH
27150: LD_INT 6
27152: PUSH
27153: LD_INT 15
27155: PUSH
27156: LD_INT 18
27158: PUSH
27159: LD_INT 7
27161: PUSH
27162: LD_INT 17
27164: PUSH
27165: LD_INT 8
27167: PUSH
27168: LD_INT 20
27170: PUSH
27171: LD_INT 21
27173: PUSH
27174: LD_INT 22
27176: PUSH
27177: LD_INT 72
27179: PUSH
27180: LD_INT 26
27182: PUSH
27183: LD_INT 69
27185: PUSH
27186: LD_INT 39
27188: PUSH
27189: LD_INT 40
27191: PUSH
27192: LD_INT 41
27194: PUSH
27195: LD_INT 42
27197: PUSH
27198: LD_INT 43
27200: PUSH
27201: LD_INT 48
27203: PUSH
27204: LD_INT 49
27206: PUSH
27207: LD_INT 50
27209: PUSH
27210: LD_INT 51
27212: PUSH
27213: LD_INT 52
27215: PUSH
27216: LD_INT 53
27218: PUSH
27219: LD_INT 54
27221: PUSH
27222: LD_INT 55
27224: PUSH
27225: LD_INT 56
27227: PUSH
27228: LD_INT 60
27230: PUSH
27231: LD_INT 61
27233: PUSH
27234: LD_INT 62
27236: PUSH
27237: LD_INT 66
27239: PUSH
27240: LD_INT 67
27242: PUSH
27243: LD_INT 68
27245: PUSH
27246: LD_INT 81
27248: PUSH
27249: LD_INT 82
27251: PUSH
27252: LD_INT 83
27254: PUSH
27255: LD_INT 84
27257: PUSH
27258: LD_INT 85
27260: PUSH
27261: LD_INT 87
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: ST_TO_ADDR
27319: GO 27552
27321: LD_INT 3
27323: DOUBLE
27324: EQUAL
27325: IFTRUE 27329
27327: GO 27551
27329: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27330: LD_ADDR_VAR 0 4
27334: PUSH
27335: LD_INT 46
27337: PUSH
27338: LD_INT 47
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: LD_INT 82
27349: PUSH
27350: LD_INT 83
27352: PUSH
27353: LD_INT 84
27355: PUSH
27356: LD_INT 85
27358: PUSH
27359: LD_INT 86
27361: PUSH
27362: LD_INT 11
27364: PUSH
27365: LD_INT 9
27367: PUSH
27368: LD_INT 20
27370: PUSH
27371: LD_INT 19
27373: PUSH
27374: LD_INT 21
27376: PUSH
27377: LD_INT 24
27379: PUSH
27380: LD_INT 22
27382: PUSH
27383: LD_INT 25
27385: PUSH
27386: LD_INT 28
27388: PUSH
27389: LD_INT 29
27391: PUSH
27392: LD_INT 30
27394: PUSH
27395: LD_INT 31
27397: PUSH
27398: LD_INT 37
27400: PUSH
27401: LD_INT 38
27403: PUSH
27404: LD_INT 32
27406: PUSH
27407: LD_INT 27
27409: PUSH
27410: LD_INT 33
27412: PUSH
27413: LD_INT 69
27415: PUSH
27416: LD_INT 39
27418: PUSH
27419: LD_INT 34
27421: PUSH
27422: LD_INT 40
27424: PUSH
27425: LD_INT 71
27427: PUSH
27428: LD_INT 23
27430: PUSH
27431: LD_INT 44
27433: PUSH
27434: LD_INT 48
27436: PUSH
27437: LD_INT 49
27439: PUSH
27440: LD_INT 50
27442: PUSH
27443: LD_INT 51
27445: PUSH
27446: LD_INT 52
27448: PUSH
27449: LD_INT 53
27451: PUSH
27452: LD_INT 54
27454: PUSH
27455: LD_INT 55
27457: PUSH
27458: LD_INT 56
27460: PUSH
27461: LD_INT 57
27463: PUSH
27464: LD_INT 58
27466: PUSH
27467: LD_INT 59
27469: PUSH
27470: LD_INT 63
27472: PUSH
27473: LD_INT 64
27475: PUSH
27476: LD_INT 65
27478: PUSH
27479: LD_INT 82
27481: PUSH
27482: LD_INT 83
27484: PUSH
27485: LD_INT 84
27487: PUSH
27488: LD_INT 85
27490: PUSH
27491: LD_INT 86
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: ST_TO_ADDR
27549: GO 27552
27551: POP
// if state > - 1 and state < 3 then
27552: LD_VAR 0 3
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: GREATER
27561: PUSH
27562: LD_VAR 0 3
27566: PUSH
27567: LD_INT 3
27569: LESS
27570: AND
27571: IFFALSE 27628
// for i in result do
27573: LD_ADDR_VAR 0 5
27577: PUSH
27578: LD_VAR 0 4
27582: PUSH
27583: FOR_IN
27584: IFFALSE 27626
// if GetTech ( i , side ) <> state then
27586: LD_VAR 0 5
27590: PPUSH
27591: LD_VAR 0 1
27595: PPUSH
27596: CALL_OW 321
27600: PUSH
27601: LD_VAR 0 3
27605: NONEQUAL
27606: IFFALSE 27624
// result := result diff i ;
27608: LD_ADDR_VAR 0 4
27612: PUSH
27613: LD_VAR 0 4
27617: PUSH
27618: LD_VAR 0 5
27622: DIFF
27623: ST_TO_ADDR
27624: GO 27583
27626: POP
27627: POP
// end ;
27628: LD_VAR 0 4
27632: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27633: LD_INT 0
27635: PPUSH
27636: PPUSH
27637: PPUSH
// result := true ;
27638: LD_ADDR_VAR 0 3
27642: PUSH
27643: LD_INT 1
27645: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27646: LD_ADDR_VAR 0 5
27650: PUSH
27651: LD_VAR 0 2
27655: PPUSH
27656: CALL_OW 480
27660: ST_TO_ADDR
// if not tmp then
27661: LD_VAR 0 5
27665: NOT
27666: IFFALSE 27670
// exit ;
27668: GO 27719
// for i in tmp do
27670: LD_ADDR_VAR 0 4
27674: PUSH
27675: LD_VAR 0 5
27679: PUSH
27680: FOR_IN
27681: IFFALSE 27717
// if GetTech ( i , side ) <> state_researched then
27683: LD_VAR 0 4
27687: PPUSH
27688: LD_VAR 0 1
27692: PPUSH
27693: CALL_OW 321
27697: PUSH
27698: LD_INT 2
27700: NONEQUAL
27701: IFFALSE 27715
// begin result := false ;
27703: LD_ADDR_VAR 0 3
27707: PUSH
27708: LD_INT 0
27710: ST_TO_ADDR
// exit ;
27711: POP
27712: POP
27713: GO 27719
// end ;
27715: GO 27680
27717: POP
27718: POP
// end ;
27719: LD_VAR 0 3
27723: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27724: LD_INT 0
27726: PPUSH
27727: PPUSH
27728: PPUSH
27729: PPUSH
27730: PPUSH
27731: PPUSH
27732: PPUSH
27733: PPUSH
27734: PPUSH
27735: PPUSH
27736: PPUSH
27737: PPUSH
27738: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27739: LD_VAR 0 1
27743: NOT
27744: PUSH
27745: LD_VAR 0 1
27749: PPUSH
27750: CALL_OW 257
27754: PUSH
27755: LD_INT 9
27757: NONEQUAL
27758: OR
27759: IFFALSE 27763
// exit ;
27761: GO 28336
// side := GetSide ( unit ) ;
27763: LD_ADDR_VAR 0 9
27767: PUSH
27768: LD_VAR 0 1
27772: PPUSH
27773: CALL_OW 255
27777: ST_TO_ADDR
// tech_space := tech_spacanom ;
27778: LD_ADDR_VAR 0 12
27782: PUSH
27783: LD_INT 29
27785: ST_TO_ADDR
// tech_time := tech_taurad ;
27786: LD_ADDR_VAR 0 13
27790: PUSH
27791: LD_INT 28
27793: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27794: LD_ADDR_VAR 0 11
27798: PUSH
27799: LD_VAR 0 1
27803: PPUSH
27804: CALL_OW 310
27808: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27809: LD_VAR 0 11
27813: PPUSH
27814: CALL_OW 247
27818: PUSH
27819: LD_INT 2
27821: EQUAL
27822: IFFALSE 27826
// exit ;
27824: GO 28336
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27826: LD_ADDR_VAR 0 8
27830: PUSH
27831: LD_INT 81
27833: PUSH
27834: LD_VAR 0 9
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 3
27845: PUSH
27846: LD_INT 21
27848: PUSH
27849: LD_INT 3
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PPUSH
27864: CALL_OW 69
27868: ST_TO_ADDR
// if not tmp then
27869: LD_VAR 0 8
27873: NOT
27874: IFFALSE 27878
// exit ;
27876: GO 28336
// if in_unit then
27878: LD_VAR 0 11
27882: IFFALSE 27906
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27884: LD_ADDR_VAR 0 10
27888: PUSH
27889: LD_VAR 0 8
27893: PPUSH
27894: LD_VAR 0 11
27898: PPUSH
27899: CALL_OW 74
27903: ST_TO_ADDR
27904: GO 27926
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27906: LD_ADDR_VAR 0 10
27910: PUSH
27911: LD_VAR 0 8
27915: PPUSH
27916: LD_VAR 0 1
27920: PPUSH
27921: CALL_OW 74
27925: ST_TO_ADDR
// if not enemy then
27926: LD_VAR 0 10
27930: NOT
27931: IFFALSE 27935
// exit ;
27933: GO 28336
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27935: LD_VAR 0 11
27939: PUSH
27940: LD_VAR 0 11
27944: PPUSH
27945: LD_VAR 0 10
27949: PPUSH
27950: CALL_OW 296
27954: PUSH
27955: LD_INT 13
27957: GREATER
27958: AND
27959: PUSH
27960: LD_VAR 0 1
27964: PPUSH
27965: LD_VAR 0 10
27969: PPUSH
27970: CALL_OW 296
27974: PUSH
27975: LD_INT 12
27977: GREATER
27978: OR
27979: IFFALSE 27983
// exit ;
27981: GO 28336
// missile := [ 1 ] ;
27983: LD_ADDR_VAR 0 14
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: EMPTY
27992: LIST
27993: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27994: LD_VAR 0 9
27998: PPUSH
27999: LD_VAR 0 12
28003: PPUSH
28004: CALL_OW 325
28008: IFFALSE 28037
// missile := Insert ( missile , missile + 1 , 2 ) ;
28010: LD_ADDR_VAR 0 14
28014: PUSH
28015: LD_VAR 0 14
28019: PPUSH
28020: LD_VAR 0 14
28024: PUSH
28025: LD_INT 1
28027: PLUS
28028: PPUSH
28029: LD_INT 2
28031: PPUSH
28032: CALL_OW 2
28036: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28037: LD_VAR 0 9
28041: PPUSH
28042: LD_VAR 0 13
28046: PPUSH
28047: CALL_OW 325
28051: PUSH
28052: LD_VAR 0 10
28056: PPUSH
28057: CALL_OW 255
28061: PPUSH
28062: LD_VAR 0 13
28066: PPUSH
28067: CALL_OW 325
28071: NOT
28072: AND
28073: IFFALSE 28102
// missile := Insert ( missile , missile + 1 , 3 ) ;
28075: LD_ADDR_VAR 0 14
28079: PUSH
28080: LD_VAR 0 14
28084: PPUSH
28085: LD_VAR 0 14
28089: PUSH
28090: LD_INT 1
28092: PLUS
28093: PPUSH
28094: LD_INT 3
28096: PPUSH
28097: CALL_OW 2
28101: ST_TO_ADDR
// if missile < 2 then
28102: LD_VAR 0 14
28106: PUSH
28107: LD_INT 2
28109: LESS
28110: IFFALSE 28114
// exit ;
28112: GO 28336
// x := GetX ( enemy ) ;
28114: LD_ADDR_VAR 0 4
28118: PUSH
28119: LD_VAR 0 10
28123: PPUSH
28124: CALL_OW 250
28128: ST_TO_ADDR
// y := GetY ( enemy ) ;
28129: LD_ADDR_VAR 0 5
28133: PUSH
28134: LD_VAR 0 10
28138: PPUSH
28139: CALL_OW 251
28143: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28144: LD_ADDR_VAR 0 6
28148: PUSH
28149: LD_VAR 0 4
28153: PUSH
28154: LD_INT 1
28156: NEG
28157: PPUSH
28158: LD_INT 1
28160: PPUSH
28161: CALL_OW 12
28165: PLUS
28166: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28167: LD_ADDR_VAR 0 7
28171: PUSH
28172: LD_VAR 0 5
28176: PUSH
28177: LD_INT 1
28179: NEG
28180: PPUSH
28181: LD_INT 1
28183: PPUSH
28184: CALL_OW 12
28188: PLUS
28189: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28190: LD_VAR 0 6
28194: PPUSH
28195: LD_VAR 0 7
28199: PPUSH
28200: CALL_OW 488
28204: NOT
28205: IFFALSE 28227
// begin _x := x ;
28207: LD_ADDR_VAR 0 6
28211: PUSH
28212: LD_VAR 0 4
28216: ST_TO_ADDR
// _y := y ;
28217: LD_ADDR_VAR 0 7
28221: PUSH
28222: LD_VAR 0 5
28226: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28227: LD_ADDR_VAR 0 3
28231: PUSH
28232: LD_INT 1
28234: PPUSH
28235: LD_VAR 0 14
28239: PPUSH
28240: CALL_OW 12
28244: ST_TO_ADDR
// case i of 1 :
28245: LD_VAR 0 3
28249: PUSH
28250: LD_INT 1
28252: DOUBLE
28253: EQUAL
28254: IFTRUE 28258
28256: GO 28275
28258: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28259: LD_VAR 0 1
28263: PPUSH
28264: LD_VAR 0 10
28268: PPUSH
28269: CALL_OW 115
28273: GO 28336
28275: LD_INT 2
28277: DOUBLE
28278: EQUAL
28279: IFTRUE 28283
28281: GO 28305
28283: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28284: LD_VAR 0 1
28288: PPUSH
28289: LD_VAR 0 6
28293: PPUSH
28294: LD_VAR 0 7
28298: PPUSH
28299: CALL_OW 153
28303: GO 28336
28305: LD_INT 3
28307: DOUBLE
28308: EQUAL
28309: IFTRUE 28313
28311: GO 28335
28313: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28314: LD_VAR 0 1
28318: PPUSH
28319: LD_VAR 0 6
28323: PPUSH
28324: LD_VAR 0 7
28328: PPUSH
28329: CALL_OW 154
28333: GO 28336
28335: POP
// end ;
28336: LD_VAR 0 2
28340: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28341: LD_INT 0
28343: PPUSH
28344: PPUSH
28345: PPUSH
28346: PPUSH
28347: PPUSH
28348: PPUSH
// if not unit or not building then
28349: LD_VAR 0 1
28353: NOT
28354: PUSH
28355: LD_VAR 0 2
28359: NOT
28360: OR
28361: IFFALSE 28365
// exit ;
28363: GO 28523
// x := GetX ( building ) ;
28365: LD_ADDR_VAR 0 5
28369: PUSH
28370: LD_VAR 0 2
28374: PPUSH
28375: CALL_OW 250
28379: ST_TO_ADDR
// y := GetY ( building ) ;
28380: LD_ADDR_VAR 0 6
28384: PUSH
28385: LD_VAR 0 2
28389: PPUSH
28390: CALL_OW 251
28394: ST_TO_ADDR
// for i = 0 to 5 do
28395: LD_ADDR_VAR 0 4
28399: PUSH
28400: DOUBLE
28401: LD_INT 0
28403: DEC
28404: ST_TO_ADDR
28405: LD_INT 5
28407: PUSH
28408: FOR_TO
28409: IFFALSE 28521
// begin _x := ShiftX ( x , i , 3 ) ;
28411: LD_ADDR_VAR 0 7
28415: PUSH
28416: LD_VAR 0 5
28420: PPUSH
28421: LD_VAR 0 4
28425: PPUSH
28426: LD_INT 3
28428: PPUSH
28429: CALL_OW 272
28433: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28434: LD_ADDR_VAR 0 8
28438: PUSH
28439: LD_VAR 0 6
28443: PPUSH
28444: LD_VAR 0 4
28448: PPUSH
28449: LD_INT 3
28451: PPUSH
28452: CALL_OW 273
28456: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28457: LD_VAR 0 7
28461: PPUSH
28462: LD_VAR 0 8
28466: PPUSH
28467: CALL_OW 488
28471: NOT
28472: IFFALSE 28476
// continue ;
28474: GO 28408
// if HexInfo ( _x , _y ) = 0 then
28476: LD_VAR 0 7
28480: PPUSH
28481: LD_VAR 0 8
28485: PPUSH
28486: CALL_OW 428
28490: PUSH
28491: LD_INT 0
28493: EQUAL
28494: IFFALSE 28519
// begin ComMoveXY ( unit , _x , _y ) ;
28496: LD_VAR 0 1
28500: PPUSH
28501: LD_VAR 0 7
28505: PPUSH
28506: LD_VAR 0 8
28510: PPUSH
28511: CALL_OW 111
// exit ;
28515: POP
28516: POP
28517: GO 28523
// end ; end ;
28519: GO 28408
28521: POP
28522: POP
// end ;
28523: LD_VAR 0 3
28527: RET
// export function ScanBase ( side , base_area ) ; begin
28528: LD_INT 0
28530: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28531: LD_ADDR_VAR 0 3
28535: PUSH
28536: LD_VAR 0 2
28540: PPUSH
28541: LD_INT 81
28543: PUSH
28544: LD_VAR 0 1
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PPUSH
28553: CALL_OW 70
28557: ST_TO_ADDR
// end ;
28558: LD_VAR 0 3
28562: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28563: LD_INT 0
28565: PPUSH
28566: PPUSH
28567: PPUSH
28568: PPUSH
// result := false ;
28569: LD_ADDR_VAR 0 2
28573: PUSH
28574: LD_INT 0
28576: ST_TO_ADDR
// side := GetSide ( unit ) ;
28577: LD_ADDR_VAR 0 3
28581: PUSH
28582: LD_VAR 0 1
28586: PPUSH
28587: CALL_OW 255
28591: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28592: LD_ADDR_VAR 0 4
28596: PUSH
28597: LD_VAR 0 1
28601: PPUSH
28602: CALL_OW 248
28606: ST_TO_ADDR
// case nat of 1 :
28607: LD_VAR 0 4
28611: PUSH
28612: LD_INT 1
28614: DOUBLE
28615: EQUAL
28616: IFTRUE 28620
28618: GO 28631
28620: POP
// tech := tech_lassight ; 2 :
28621: LD_ADDR_VAR 0 5
28625: PUSH
28626: LD_INT 12
28628: ST_TO_ADDR
28629: GO 28670
28631: LD_INT 2
28633: DOUBLE
28634: EQUAL
28635: IFTRUE 28639
28637: GO 28650
28639: POP
// tech := tech_mortar ; 3 :
28640: LD_ADDR_VAR 0 5
28644: PUSH
28645: LD_INT 41
28647: ST_TO_ADDR
28648: GO 28670
28650: LD_INT 3
28652: DOUBLE
28653: EQUAL
28654: IFTRUE 28658
28656: GO 28669
28658: POP
// tech := tech_bazooka ; end ;
28659: LD_ADDR_VAR 0 5
28663: PUSH
28664: LD_INT 44
28666: ST_TO_ADDR
28667: GO 28670
28669: POP
// if Researched ( side , tech ) then
28670: LD_VAR 0 3
28674: PPUSH
28675: LD_VAR 0 5
28679: PPUSH
28680: CALL_OW 325
28684: IFFALSE 28711
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28686: LD_ADDR_VAR 0 2
28690: PUSH
28691: LD_INT 5
28693: PUSH
28694: LD_INT 8
28696: PUSH
28697: LD_INT 9
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: LIST
28704: PUSH
28705: LD_VAR 0 4
28709: ARRAY
28710: ST_TO_ADDR
// end ;
28711: LD_VAR 0 2
28715: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28716: LD_INT 0
28718: PPUSH
28719: PPUSH
28720: PPUSH
// if not mines then
28721: LD_VAR 0 2
28725: NOT
28726: IFFALSE 28730
// exit ;
28728: GO 28874
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28730: LD_ADDR_VAR 0 5
28734: PUSH
28735: LD_INT 81
28737: PUSH
28738: LD_VAR 0 1
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 3
28749: PUSH
28750: LD_INT 21
28752: PUSH
28753: LD_INT 3
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PPUSH
28768: CALL_OW 69
28772: ST_TO_ADDR
// for i in mines do
28773: LD_ADDR_VAR 0 4
28777: PUSH
28778: LD_VAR 0 2
28782: PUSH
28783: FOR_IN
28784: IFFALSE 28872
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28786: LD_VAR 0 4
28790: PUSH
28791: LD_INT 1
28793: ARRAY
28794: PPUSH
28795: LD_VAR 0 4
28799: PUSH
28800: LD_INT 2
28802: ARRAY
28803: PPUSH
28804: CALL_OW 458
28808: NOT
28809: IFFALSE 28813
// continue ;
28811: GO 28783
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28813: LD_VAR 0 4
28817: PUSH
28818: LD_INT 1
28820: ARRAY
28821: PPUSH
28822: LD_VAR 0 4
28826: PUSH
28827: LD_INT 2
28829: ARRAY
28830: PPUSH
28831: CALL_OW 428
28835: PUSH
28836: LD_VAR 0 5
28840: IN
28841: IFFALSE 28870
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28843: LD_VAR 0 4
28847: PUSH
28848: LD_INT 1
28850: ARRAY
28851: PPUSH
28852: LD_VAR 0 4
28856: PUSH
28857: LD_INT 2
28859: ARRAY
28860: PPUSH
28861: LD_VAR 0 1
28865: PPUSH
28866: CALL_OW 456
// end ;
28870: GO 28783
28872: POP
28873: POP
// end ;
28874: LD_VAR 0 3
28878: RET
// export function Count ( array ) ; var i ; begin
28879: LD_INT 0
28881: PPUSH
28882: PPUSH
// result := 0 ;
28883: LD_ADDR_VAR 0 2
28887: PUSH
28888: LD_INT 0
28890: ST_TO_ADDR
// for i in array do
28891: LD_ADDR_VAR 0 3
28895: PUSH
28896: LD_VAR 0 1
28900: PUSH
28901: FOR_IN
28902: IFFALSE 28926
// if i then
28904: LD_VAR 0 3
28908: IFFALSE 28924
// result := result + 1 ;
28910: LD_ADDR_VAR 0 2
28914: PUSH
28915: LD_VAR 0 2
28919: PUSH
28920: LD_INT 1
28922: PLUS
28923: ST_TO_ADDR
28924: GO 28901
28926: POP
28927: POP
// end ;
28928: LD_VAR 0 2
28932: RET
// export function IsEmpty ( building ) ; begin
28933: LD_INT 0
28935: PPUSH
// if not building then
28936: LD_VAR 0 1
28940: NOT
28941: IFFALSE 28945
// exit ;
28943: GO 28988
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28945: LD_ADDR_VAR 0 2
28949: PUSH
28950: LD_VAR 0 1
28954: PUSH
28955: LD_INT 22
28957: PUSH
28958: LD_VAR 0 1
28962: PPUSH
28963: CALL_OW 255
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 58
28974: PUSH
28975: EMPTY
28976: LIST
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PPUSH
28982: CALL_OW 69
28986: IN
28987: ST_TO_ADDR
// end ;
28988: LD_VAR 0 2
28992: RET
// export function IsNotFull ( building ) ; begin
28993: LD_INT 0
28995: PPUSH
// if not building then
28996: LD_VAR 0 1
29000: NOT
29001: IFFALSE 29005
// exit ;
29003: GO 29024
// result := UnitsInside ( building ) < 6 ;
29005: LD_ADDR_VAR 0 2
29009: PUSH
29010: LD_VAR 0 1
29014: PPUSH
29015: CALL_OW 313
29019: PUSH
29020: LD_INT 6
29022: LESS
29023: ST_TO_ADDR
// end ;
29024: LD_VAR 0 2
29028: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29029: LD_INT 0
29031: PPUSH
29032: PPUSH
29033: PPUSH
29034: PPUSH
// tmp := [ ] ;
29035: LD_ADDR_VAR 0 3
29039: PUSH
29040: EMPTY
29041: ST_TO_ADDR
// list := [ ] ;
29042: LD_ADDR_VAR 0 5
29046: PUSH
29047: EMPTY
29048: ST_TO_ADDR
// for i = 16 to 25 do
29049: LD_ADDR_VAR 0 4
29053: PUSH
29054: DOUBLE
29055: LD_INT 16
29057: DEC
29058: ST_TO_ADDR
29059: LD_INT 25
29061: PUSH
29062: FOR_TO
29063: IFFALSE 29136
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29065: LD_ADDR_VAR 0 3
29069: PUSH
29070: LD_VAR 0 3
29074: PUSH
29075: LD_INT 22
29077: PUSH
29078: LD_VAR 0 1
29082: PPUSH
29083: CALL_OW 255
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 91
29094: PUSH
29095: LD_VAR 0 1
29099: PUSH
29100: LD_INT 6
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 30
29110: PUSH
29111: LD_VAR 0 4
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: LIST
29124: PUSH
29125: EMPTY
29126: LIST
29127: PPUSH
29128: CALL_OW 69
29132: ADD
29133: ST_TO_ADDR
29134: GO 29062
29136: POP
29137: POP
// for i = 1 to tmp do
29138: LD_ADDR_VAR 0 4
29142: PUSH
29143: DOUBLE
29144: LD_INT 1
29146: DEC
29147: ST_TO_ADDR
29148: LD_VAR 0 3
29152: PUSH
29153: FOR_TO
29154: IFFALSE 29242
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29156: LD_ADDR_VAR 0 5
29160: PUSH
29161: LD_VAR 0 5
29165: PUSH
29166: LD_VAR 0 3
29170: PUSH
29171: LD_VAR 0 4
29175: ARRAY
29176: PPUSH
29177: CALL_OW 266
29181: PUSH
29182: LD_VAR 0 3
29186: PUSH
29187: LD_VAR 0 4
29191: ARRAY
29192: PPUSH
29193: CALL_OW 250
29197: PUSH
29198: LD_VAR 0 3
29202: PUSH
29203: LD_VAR 0 4
29207: ARRAY
29208: PPUSH
29209: CALL_OW 251
29213: PUSH
29214: LD_VAR 0 3
29218: PUSH
29219: LD_VAR 0 4
29223: ARRAY
29224: PPUSH
29225: CALL_OW 254
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: PUSH
29236: EMPTY
29237: LIST
29238: ADD
29239: ST_TO_ADDR
29240: GO 29153
29242: POP
29243: POP
// result := list ;
29244: LD_ADDR_VAR 0 2
29248: PUSH
29249: LD_VAR 0 5
29253: ST_TO_ADDR
// end ;
29254: LD_VAR 0 2
29258: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29259: LD_INT 0
29261: PPUSH
29262: PPUSH
29263: PPUSH
29264: PPUSH
29265: PPUSH
29266: PPUSH
29267: PPUSH
// if not factory then
29268: LD_VAR 0 1
29272: NOT
29273: IFFALSE 29277
// exit ;
29275: GO 29870
// if control = control_apeman then
29277: LD_VAR 0 4
29281: PUSH
29282: LD_INT 5
29284: EQUAL
29285: IFFALSE 29394
// begin tmp := UnitsInside ( factory ) ;
29287: LD_ADDR_VAR 0 8
29291: PUSH
29292: LD_VAR 0 1
29296: PPUSH
29297: CALL_OW 313
29301: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29302: LD_VAR 0 8
29306: PPUSH
29307: LD_INT 25
29309: PUSH
29310: LD_INT 12
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PPUSH
29317: CALL_OW 72
29321: NOT
29322: IFFALSE 29332
// control := control_manual ;
29324: LD_ADDR_VAR 0 4
29328: PUSH
29329: LD_INT 1
29331: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29332: LD_ADDR_VAR 0 8
29336: PUSH
29337: LD_VAR 0 1
29341: PPUSH
29342: CALL 29029 0 1
29346: ST_TO_ADDR
// if tmp then
29347: LD_VAR 0 8
29351: IFFALSE 29394
// begin for i in tmp do
29353: LD_ADDR_VAR 0 7
29357: PUSH
29358: LD_VAR 0 8
29362: PUSH
29363: FOR_IN
29364: IFFALSE 29392
// if i [ 1 ] = b_ext_radio then
29366: LD_VAR 0 7
29370: PUSH
29371: LD_INT 1
29373: ARRAY
29374: PUSH
29375: LD_INT 22
29377: EQUAL
29378: IFFALSE 29390
// begin control := control_remote ;
29380: LD_ADDR_VAR 0 4
29384: PUSH
29385: LD_INT 2
29387: ST_TO_ADDR
// break ;
29388: GO 29392
// end ;
29390: GO 29363
29392: POP
29393: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29394: LD_VAR 0 1
29398: PPUSH
29399: LD_VAR 0 2
29403: PPUSH
29404: LD_VAR 0 3
29408: PPUSH
29409: LD_VAR 0 4
29413: PPUSH
29414: LD_VAR 0 5
29418: PPUSH
29419: CALL_OW 448
29423: IFFALSE 29458
// begin result := [ chassis , engine , control , weapon ] ;
29425: LD_ADDR_VAR 0 6
29429: PUSH
29430: LD_VAR 0 2
29434: PUSH
29435: LD_VAR 0 3
29439: PUSH
29440: LD_VAR 0 4
29444: PUSH
29445: LD_VAR 0 5
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: ST_TO_ADDR
// exit ;
29456: GO 29870
// end ; _chassis := AvailableChassisList ( factory ) ;
29458: LD_ADDR_VAR 0 9
29462: PUSH
29463: LD_VAR 0 1
29467: PPUSH
29468: CALL_OW 475
29472: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29473: LD_ADDR_VAR 0 11
29477: PUSH
29478: LD_VAR 0 1
29482: PPUSH
29483: CALL_OW 476
29487: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29488: LD_ADDR_VAR 0 12
29492: PUSH
29493: LD_VAR 0 1
29497: PPUSH
29498: CALL_OW 477
29502: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29503: LD_ADDR_VAR 0 10
29507: PUSH
29508: LD_VAR 0 1
29512: PPUSH
29513: CALL_OW 478
29517: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29518: LD_VAR 0 9
29522: NOT
29523: PUSH
29524: LD_VAR 0 11
29528: NOT
29529: OR
29530: PUSH
29531: LD_VAR 0 12
29535: NOT
29536: OR
29537: PUSH
29538: LD_VAR 0 10
29542: NOT
29543: OR
29544: IFFALSE 29579
// begin result := [ chassis , engine , control , weapon ] ;
29546: LD_ADDR_VAR 0 6
29550: PUSH
29551: LD_VAR 0 2
29555: PUSH
29556: LD_VAR 0 3
29560: PUSH
29561: LD_VAR 0 4
29565: PUSH
29566: LD_VAR 0 5
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: ST_TO_ADDR
// exit ;
29577: GO 29870
// end ; if not chassis in _chassis then
29579: LD_VAR 0 2
29583: PUSH
29584: LD_VAR 0 9
29588: IN
29589: NOT
29590: IFFALSE 29616
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29592: LD_ADDR_VAR 0 2
29596: PUSH
29597: LD_VAR 0 9
29601: PUSH
29602: LD_INT 1
29604: PPUSH
29605: LD_VAR 0 9
29609: PPUSH
29610: CALL_OW 12
29614: ARRAY
29615: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29616: LD_VAR 0 2
29620: PPUSH
29621: LD_VAR 0 3
29625: PPUSH
29626: CALL 29875 0 2
29630: NOT
29631: IFFALSE 29690
// repeat engine := _engine [ 1 ] ;
29633: LD_ADDR_VAR 0 3
29637: PUSH
29638: LD_VAR 0 11
29642: PUSH
29643: LD_INT 1
29645: ARRAY
29646: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29647: LD_ADDR_VAR 0 11
29651: PUSH
29652: LD_VAR 0 11
29656: PPUSH
29657: LD_INT 1
29659: PPUSH
29660: CALL_OW 3
29664: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29665: LD_VAR 0 2
29669: PPUSH
29670: LD_VAR 0 3
29674: PPUSH
29675: CALL 29875 0 2
29679: PUSH
29680: LD_VAR 0 11
29684: PUSH
29685: EMPTY
29686: EQUAL
29687: OR
29688: IFFALSE 29633
// if not control in _control then
29690: LD_VAR 0 4
29694: PUSH
29695: LD_VAR 0 12
29699: IN
29700: NOT
29701: IFFALSE 29727
// control := _control [ rand ( 1 , _control ) ] ;
29703: LD_ADDR_VAR 0 4
29707: PUSH
29708: LD_VAR 0 12
29712: PUSH
29713: LD_INT 1
29715: PPUSH
29716: LD_VAR 0 12
29720: PPUSH
29721: CALL_OW 12
29725: ARRAY
29726: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29727: LD_VAR 0 2
29731: PPUSH
29732: LD_VAR 0 5
29736: PPUSH
29737: CALL 30095 0 2
29741: NOT
29742: IFFALSE 29801
// repeat weapon := _weapon [ 1 ] ;
29744: LD_ADDR_VAR 0 5
29748: PUSH
29749: LD_VAR 0 10
29753: PUSH
29754: LD_INT 1
29756: ARRAY
29757: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29758: LD_ADDR_VAR 0 10
29762: PUSH
29763: LD_VAR 0 10
29767: PPUSH
29768: LD_INT 1
29770: PPUSH
29771: CALL_OW 3
29775: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29776: LD_VAR 0 2
29780: PPUSH
29781: LD_VAR 0 5
29785: PPUSH
29786: CALL 30095 0 2
29790: PUSH
29791: LD_VAR 0 10
29795: PUSH
29796: EMPTY
29797: EQUAL
29798: OR
29799: IFFALSE 29744
// result := [ ] ;
29801: LD_ADDR_VAR 0 6
29805: PUSH
29806: EMPTY
29807: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29808: LD_VAR 0 1
29812: PPUSH
29813: LD_VAR 0 2
29817: PPUSH
29818: LD_VAR 0 3
29822: PPUSH
29823: LD_VAR 0 4
29827: PPUSH
29828: LD_VAR 0 5
29832: PPUSH
29833: CALL_OW 448
29837: IFFALSE 29870
// result := [ chassis , engine , control , weapon ] ;
29839: LD_ADDR_VAR 0 6
29843: PUSH
29844: LD_VAR 0 2
29848: PUSH
29849: LD_VAR 0 3
29853: PUSH
29854: LD_VAR 0 4
29858: PUSH
29859: LD_VAR 0 5
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: ST_TO_ADDR
// end ;
29870: LD_VAR 0 6
29874: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29875: LD_INT 0
29877: PPUSH
// if not chassis or not engine then
29878: LD_VAR 0 1
29882: NOT
29883: PUSH
29884: LD_VAR 0 2
29888: NOT
29889: OR
29890: IFFALSE 29894
// exit ;
29892: GO 30090
// case engine of engine_solar :
29894: LD_VAR 0 2
29898: PUSH
29899: LD_INT 2
29901: DOUBLE
29902: EQUAL
29903: IFTRUE 29907
29905: GO 29945
29907: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29908: LD_ADDR_VAR 0 3
29912: PUSH
29913: LD_INT 11
29915: PUSH
29916: LD_INT 12
29918: PUSH
29919: LD_INT 13
29921: PUSH
29922: LD_INT 14
29924: PUSH
29925: LD_INT 1
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: LD_INT 3
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: ST_TO_ADDR
29943: GO 30074
29945: LD_INT 1
29947: DOUBLE
29948: EQUAL
29949: IFTRUE 29953
29951: GO 30015
29953: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29954: LD_ADDR_VAR 0 3
29958: PUSH
29959: LD_INT 11
29961: PUSH
29962: LD_INT 12
29964: PUSH
29965: LD_INT 13
29967: PUSH
29968: LD_INT 14
29970: PUSH
29971: LD_INT 1
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: LD_INT 3
29979: PUSH
29980: LD_INT 4
29982: PUSH
29983: LD_INT 5
29985: PUSH
29986: LD_INT 21
29988: PUSH
29989: LD_INT 23
29991: PUSH
29992: LD_INT 22
29994: PUSH
29995: LD_INT 24
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: ST_TO_ADDR
30013: GO 30074
30015: LD_INT 3
30017: DOUBLE
30018: EQUAL
30019: IFTRUE 30023
30021: GO 30073
30023: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30024: LD_ADDR_VAR 0 3
30028: PUSH
30029: LD_INT 13
30031: PUSH
30032: LD_INT 14
30034: PUSH
30035: LD_INT 2
30037: PUSH
30038: LD_INT 3
30040: PUSH
30041: LD_INT 4
30043: PUSH
30044: LD_INT 5
30046: PUSH
30047: LD_INT 21
30049: PUSH
30050: LD_INT 22
30052: PUSH
30053: LD_INT 23
30055: PUSH
30056: LD_INT 24
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: ST_TO_ADDR
30071: GO 30074
30073: POP
// result := ( chassis in result ) ;
30074: LD_ADDR_VAR 0 3
30078: PUSH
30079: LD_VAR 0 1
30083: PUSH
30084: LD_VAR 0 3
30088: IN
30089: ST_TO_ADDR
// end ;
30090: LD_VAR 0 3
30094: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30095: LD_INT 0
30097: PPUSH
// if not chassis or not weapon then
30098: LD_VAR 0 1
30102: NOT
30103: PUSH
30104: LD_VAR 0 2
30108: NOT
30109: OR
30110: IFFALSE 30114
// exit ;
30112: GO 31140
// case weapon of us_machine_gun :
30114: LD_VAR 0 2
30118: PUSH
30119: LD_INT 2
30121: DOUBLE
30122: EQUAL
30123: IFTRUE 30127
30125: GO 30157
30127: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30128: LD_ADDR_VAR 0 3
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: LD_INT 2
30138: PUSH
30139: LD_INT 3
30141: PUSH
30142: LD_INT 4
30144: PUSH
30145: LD_INT 5
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: ST_TO_ADDR
30155: GO 31124
30157: LD_INT 3
30159: DOUBLE
30160: EQUAL
30161: IFTRUE 30165
30163: GO 30195
30165: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30166: LD_ADDR_VAR 0 3
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: LD_INT 2
30176: PUSH
30177: LD_INT 3
30179: PUSH
30180: LD_INT 4
30182: PUSH
30183: LD_INT 5
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: ST_TO_ADDR
30193: GO 31124
30195: LD_INT 11
30197: DOUBLE
30198: EQUAL
30199: IFTRUE 30203
30201: GO 30233
30203: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30204: LD_ADDR_VAR 0 3
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: LD_INT 2
30214: PUSH
30215: LD_INT 3
30217: PUSH
30218: LD_INT 4
30220: PUSH
30221: LD_INT 5
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: ST_TO_ADDR
30231: GO 31124
30233: LD_INT 4
30235: DOUBLE
30236: EQUAL
30237: IFTRUE 30241
30239: GO 30267
30241: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30242: LD_ADDR_VAR 0 3
30246: PUSH
30247: LD_INT 2
30249: PUSH
30250: LD_INT 3
30252: PUSH
30253: LD_INT 4
30255: PUSH
30256: LD_INT 5
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: ST_TO_ADDR
30265: GO 31124
30267: LD_INT 5
30269: DOUBLE
30270: EQUAL
30271: IFTRUE 30275
30273: GO 30301
30275: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30276: LD_ADDR_VAR 0 3
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: LD_INT 3
30286: PUSH
30287: LD_INT 4
30289: PUSH
30290: LD_INT 5
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: ST_TO_ADDR
30299: GO 31124
30301: LD_INT 9
30303: DOUBLE
30304: EQUAL
30305: IFTRUE 30309
30307: GO 30335
30309: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30310: LD_ADDR_VAR 0 3
30314: PUSH
30315: LD_INT 2
30317: PUSH
30318: LD_INT 3
30320: PUSH
30321: LD_INT 4
30323: PUSH
30324: LD_INT 5
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: ST_TO_ADDR
30333: GO 31124
30335: LD_INT 7
30337: DOUBLE
30338: EQUAL
30339: IFTRUE 30343
30341: GO 30369
30343: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30344: LD_ADDR_VAR 0 3
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: LD_INT 3
30354: PUSH
30355: LD_INT 4
30357: PUSH
30358: LD_INT 5
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: ST_TO_ADDR
30367: GO 31124
30369: LD_INT 12
30371: DOUBLE
30372: EQUAL
30373: IFTRUE 30377
30375: GO 30403
30377: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30378: LD_ADDR_VAR 0 3
30382: PUSH
30383: LD_INT 2
30385: PUSH
30386: LD_INT 3
30388: PUSH
30389: LD_INT 4
30391: PUSH
30392: LD_INT 5
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: ST_TO_ADDR
30401: GO 31124
30403: LD_INT 13
30405: DOUBLE
30406: EQUAL
30407: IFTRUE 30411
30409: GO 30437
30411: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30412: LD_ADDR_VAR 0 3
30416: PUSH
30417: LD_INT 2
30419: PUSH
30420: LD_INT 3
30422: PUSH
30423: LD_INT 4
30425: PUSH
30426: LD_INT 5
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: ST_TO_ADDR
30435: GO 31124
30437: LD_INT 14
30439: DOUBLE
30440: EQUAL
30441: IFTRUE 30445
30443: GO 30463
30445: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30446: LD_ADDR_VAR 0 3
30450: PUSH
30451: LD_INT 4
30453: PUSH
30454: LD_INT 5
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: ST_TO_ADDR
30461: GO 31124
30463: LD_INT 6
30465: DOUBLE
30466: EQUAL
30467: IFTRUE 30471
30469: GO 30489
30471: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30472: LD_ADDR_VAR 0 3
30476: PUSH
30477: LD_INT 4
30479: PUSH
30480: LD_INT 5
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: ST_TO_ADDR
30487: GO 31124
30489: LD_INT 10
30491: DOUBLE
30492: EQUAL
30493: IFTRUE 30497
30495: GO 30515
30497: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30498: LD_ADDR_VAR 0 3
30502: PUSH
30503: LD_INT 4
30505: PUSH
30506: LD_INT 5
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: ST_TO_ADDR
30513: GO 31124
30515: LD_INT 22
30517: DOUBLE
30518: EQUAL
30519: IFTRUE 30523
30521: GO 30549
30523: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30524: LD_ADDR_VAR 0 3
30528: PUSH
30529: LD_INT 11
30531: PUSH
30532: LD_INT 12
30534: PUSH
30535: LD_INT 13
30537: PUSH
30538: LD_INT 14
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: ST_TO_ADDR
30547: GO 31124
30549: LD_INT 23
30551: DOUBLE
30552: EQUAL
30553: IFTRUE 30557
30555: GO 30583
30557: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30558: LD_ADDR_VAR 0 3
30562: PUSH
30563: LD_INT 11
30565: PUSH
30566: LD_INT 12
30568: PUSH
30569: LD_INT 13
30571: PUSH
30572: LD_INT 14
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: ST_TO_ADDR
30581: GO 31124
30583: LD_INT 24
30585: DOUBLE
30586: EQUAL
30587: IFTRUE 30591
30589: GO 30617
30591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30592: LD_ADDR_VAR 0 3
30596: PUSH
30597: LD_INT 11
30599: PUSH
30600: LD_INT 12
30602: PUSH
30603: LD_INT 13
30605: PUSH
30606: LD_INT 14
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: ST_TO_ADDR
30615: GO 31124
30617: LD_INT 30
30619: DOUBLE
30620: EQUAL
30621: IFTRUE 30625
30623: GO 30651
30625: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30626: LD_ADDR_VAR 0 3
30630: PUSH
30631: LD_INT 11
30633: PUSH
30634: LD_INT 12
30636: PUSH
30637: LD_INT 13
30639: PUSH
30640: LD_INT 14
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: ST_TO_ADDR
30649: GO 31124
30651: LD_INT 25
30653: DOUBLE
30654: EQUAL
30655: IFTRUE 30659
30657: GO 30677
30659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30660: LD_ADDR_VAR 0 3
30664: PUSH
30665: LD_INT 13
30667: PUSH
30668: LD_INT 14
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: ST_TO_ADDR
30675: GO 31124
30677: LD_INT 27
30679: DOUBLE
30680: EQUAL
30681: IFTRUE 30685
30683: GO 30703
30685: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30686: LD_ADDR_VAR 0 3
30690: PUSH
30691: LD_INT 13
30693: PUSH
30694: LD_INT 14
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: ST_TO_ADDR
30701: GO 31124
30703: LD_INT 28
30705: DOUBLE
30706: EQUAL
30707: IFTRUE 30711
30709: GO 30729
30711: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30712: LD_ADDR_VAR 0 3
30716: PUSH
30717: LD_INT 13
30719: PUSH
30720: LD_INT 14
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: ST_TO_ADDR
30727: GO 31124
30729: LD_INT 29
30731: DOUBLE
30732: EQUAL
30733: IFTRUE 30737
30735: GO 30755
30737: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30738: LD_ADDR_VAR 0 3
30742: PUSH
30743: LD_INT 13
30745: PUSH
30746: LD_INT 14
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: ST_TO_ADDR
30753: GO 31124
30755: LD_INT 31
30757: DOUBLE
30758: EQUAL
30759: IFTRUE 30763
30761: GO 30781
30763: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30764: LD_ADDR_VAR 0 3
30768: PUSH
30769: LD_INT 13
30771: PUSH
30772: LD_INT 14
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: ST_TO_ADDR
30779: GO 31124
30781: LD_INT 26
30783: DOUBLE
30784: EQUAL
30785: IFTRUE 30789
30787: GO 30807
30789: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30790: LD_ADDR_VAR 0 3
30794: PUSH
30795: LD_INT 13
30797: PUSH
30798: LD_INT 14
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: ST_TO_ADDR
30805: GO 31124
30807: LD_INT 42
30809: DOUBLE
30810: EQUAL
30811: IFTRUE 30815
30813: GO 30841
30815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30816: LD_ADDR_VAR 0 3
30820: PUSH
30821: LD_INT 21
30823: PUSH
30824: LD_INT 22
30826: PUSH
30827: LD_INT 23
30829: PUSH
30830: LD_INT 24
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: ST_TO_ADDR
30839: GO 31124
30841: LD_INT 43
30843: DOUBLE
30844: EQUAL
30845: IFTRUE 30849
30847: GO 30875
30849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30850: LD_ADDR_VAR 0 3
30854: PUSH
30855: LD_INT 21
30857: PUSH
30858: LD_INT 22
30860: PUSH
30861: LD_INT 23
30863: PUSH
30864: LD_INT 24
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: ST_TO_ADDR
30873: GO 31124
30875: LD_INT 44
30877: DOUBLE
30878: EQUAL
30879: IFTRUE 30883
30881: GO 30909
30883: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30884: LD_ADDR_VAR 0 3
30888: PUSH
30889: LD_INT 21
30891: PUSH
30892: LD_INT 22
30894: PUSH
30895: LD_INT 23
30897: PUSH
30898: LD_INT 24
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: ST_TO_ADDR
30907: GO 31124
30909: LD_INT 45
30911: DOUBLE
30912: EQUAL
30913: IFTRUE 30917
30915: GO 30943
30917: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30918: LD_ADDR_VAR 0 3
30922: PUSH
30923: LD_INT 21
30925: PUSH
30926: LD_INT 22
30928: PUSH
30929: LD_INT 23
30931: PUSH
30932: LD_INT 24
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: ST_TO_ADDR
30941: GO 31124
30943: LD_INT 49
30945: DOUBLE
30946: EQUAL
30947: IFTRUE 30951
30949: GO 30977
30951: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30952: LD_ADDR_VAR 0 3
30956: PUSH
30957: LD_INT 21
30959: PUSH
30960: LD_INT 22
30962: PUSH
30963: LD_INT 23
30965: PUSH
30966: LD_INT 24
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: ST_TO_ADDR
30975: GO 31124
30977: LD_INT 51
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 31011
30985: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30986: LD_ADDR_VAR 0 3
30990: PUSH
30991: LD_INT 21
30993: PUSH
30994: LD_INT 22
30996: PUSH
30997: LD_INT 23
30999: PUSH
31000: LD_INT 24
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: ST_TO_ADDR
31009: GO 31124
31011: LD_INT 52
31013: DOUBLE
31014: EQUAL
31015: IFTRUE 31019
31017: GO 31045
31019: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31020: LD_ADDR_VAR 0 3
31024: PUSH
31025: LD_INT 21
31027: PUSH
31028: LD_INT 22
31030: PUSH
31031: LD_INT 23
31033: PUSH
31034: LD_INT 24
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: ST_TO_ADDR
31043: GO 31124
31045: LD_INT 53
31047: DOUBLE
31048: EQUAL
31049: IFTRUE 31053
31051: GO 31071
31053: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31054: LD_ADDR_VAR 0 3
31058: PUSH
31059: LD_INT 23
31061: PUSH
31062: LD_INT 24
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: ST_TO_ADDR
31069: GO 31124
31071: LD_INT 46
31073: DOUBLE
31074: EQUAL
31075: IFTRUE 31079
31077: GO 31097
31079: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31080: LD_ADDR_VAR 0 3
31084: PUSH
31085: LD_INT 23
31087: PUSH
31088: LD_INT 24
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: ST_TO_ADDR
31095: GO 31124
31097: LD_INT 47
31099: DOUBLE
31100: EQUAL
31101: IFTRUE 31105
31103: GO 31123
31105: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31106: LD_ADDR_VAR 0 3
31110: PUSH
31111: LD_INT 23
31113: PUSH
31114: LD_INT 24
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: ST_TO_ADDR
31121: GO 31124
31123: POP
// result := ( chassis in result ) ;
31124: LD_ADDR_VAR 0 3
31128: PUSH
31129: LD_VAR 0 1
31133: PUSH
31134: LD_VAR 0 3
31138: IN
31139: ST_TO_ADDR
// end ;
31140: LD_VAR 0 3
31144: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31145: LD_INT 0
31147: PPUSH
31148: PPUSH
31149: PPUSH
31150: PPUSH
31151: PPUSH
31152: PPUSH
31153: PPUSH
// result := array ;
31154: LD_ADDR_VAR 0 5
31158: PUSH
31159: LD_VAR 0 1
31163: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31164: LD_VAR 0 1
31168: NOT
31169: PUSH
31170: LD_VAR 0 2
31174: NOT
31175: OR
31176: PUSH
31177: LD_VAR 0 3
31181: NOT
31182: OR
31183: PUSH
31184: LD_VAR 0 2
31188: PUSH
31189: LD_VAR 0 1
31193: GREATER
31194: OR
31195: PUSH
31196: LD_VAR 0 3
31200: PUSH
31201: LD_VAR 0 1
31205: GREATER
31206: OR
31207: IFFALSE 31211
// exit ;
31209: GO 31507
// if direction then
31211: LD_VAR 0 4
31215: IFFALSE 31279
// begin d := 1 ;
31217: LD_ADDR_VAR 0 9
31221: PUSH
31222: LD_INT 1
31224: ST_TO_ADDR
// if i_from > i_to then
31225: LD_VAR 0 2
31229: PUSH
31230: LD_VAR 0 3
31234: GREATER
31235: IFFALSE 31261
// length := ( array - i_from ) + i_to else
31237: LD_ADDR_VAR 0 11
31241: PUSH
31242: LD_VAR 0 1
31246: PUSH
31247: LD_VAR 0 2
31251: MINUS
31252: PUSH
31253: LD_VAR 0 3
31257: PLUS
31258: ST_TO_ADDR
31259: GO 31277
// length := i_to - i_from ;
31261: LD_ADDR_VAR 0 11
31265: PUSH
31266: LD_VAR 0 3
31270: PUSH
31271: LD_VAR 0 2
31275: MINUS
31276: ST_TO_ADDR
// end else
31277: GO 31340
// begin d := - 1 ;
31279: LD_ADDR_VAR 0 9
31283: PUSH
31284: LD_INT 1
31286: NEG
31287: ST_TO_ADDR
// if i_from > i_to then
31288: LD_VAR 0 2
31292: PUSH
31293: LD_VAR 0 3
31297: GREATER
31298: IFFALSE 31318
// length := i_from - i_to else
31300: LD_ADDR_VAR 0 11
31304: PUSH
31305: LD_VAR 0 2
31309: PUSH
31310: LD_VAR 0 3
31314: MINUS
31315: ST_TO_ADDR
31316: GO 31340
// length := ( array - i_to ) + i_from ;
31318: LD_ADDR_VAR 0 11
31322: PUSH
31323: LD_VAR 0 1
31327: PUSH
31328: LD_VAR 0 3
31332: MINUS
31333: PUSH
31334: LD_VAR 0 2
31338: PLUS
31339: ST_TO_ADDR
// end ; if not length then
31340: LD_VAR 0 11
31344: NOT
31345: IFFALSE 31349
// exit ;
31347: GO 31507
// tmp := array ;
31349: LD_ADDR_VAR 0 10
31353: PUSH
31354: LD_VAR 0 1
31358: ST_TO_ADDR
// for i = 1 to length do
31359: LD_ADDR_VAR 0 6
31363: PUSH
31364: DOUBLE
31365: LD_INT 1
31367: DEC
31368: ST_TO_ADDR
31369: LD_VAR 0 11
31373: PUSH
31374: FOR_TO
31375: IFFALSE 31495
// begin for j = 1 to array do
31377: LD_ADDR_VAR 0 7
31381: PUSH
31382: DOUBLE
31383: LD_INT 1
31385: DEC
31386: ST_TO_ADDR
31387: LD_VAR 0 1
31391: PUSH
31392: FOR_TO
31393: IFFALSE 31481
// begin k := j + d ;
31395: LD_ADDR_VAR 0 8
31399: PUSH
31400: LD_VAR 0 7
31404: PUSH
31405: LD_VAR 0 9
31409: PLUS
31410: ST_TO_ADDR
// if k > array then
31411: LD_VAR 0 8
31415: PUSH
31416: LD_VAR 0 1
31420: GREATER
31421: IFFALSE 31431
// k := 1 ;
31423: LD_ADDR_VAR 0 8
31427: PUSH
31428: LD_INT 1
31430: ST_TO_ADDR
// if not k then
31431: LD_VAR 0 8
31435: NOT
31436: IFFALSE 31448
// k := array ;
31438: LD_ADDR_VAR 0 8
31442: PUSH
31443: LD_VAR 0 1
31447: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31448: LD_ADDR_VAR 0 10
31452: PUSH
31453: LD_VAR 0 10
31457: PPUSH
31458: LD_VAR 0 8
31462: PPUSH
31463: LD_VAR 0 1
31467: PUSH
31468: LD_VAR 0 7
31472: ARRAY
31473: PPUSH
31474: CALL_OW 1
31478: ST_TO_ADDR
// end ;
31479: GO 31392
31481: POP
31482: POP
// array := tmp ;
31483: LD_ADDR_VAR 0 1
31487: PUSH
31488: LD_VAR 0 10
31492: ST_TO_ADDR
// end ;
31493: GO 31374
31495: POP
31496: POP
// result := array ;
31497: LD_ADDR_VAR 0 5
31501: PUSH
31502: LD_VAR 0 1
31506: ST_TO_ADDR
// end ;
31507: LD_VAR 0 5
31511: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31512: LD_INT 0
31514: PPUSH
31515: PPUSH
// result := 0 ;
31516: LD_ADDR_VAR 0 3
31520: PUSH
31521: LD_INT 0
31523: ST_TO_ADDR
// if not array or not value in array then
31524: LD_VAR 0 1
31528: NOT
31529: PUSH
31530: LD_VAR 0 2
31534: PUSH
31535: LD_VAR 0 1
31539: IN
31540: NOT
31541: OR
31542: IFFALSE 31546
// exit ;
31544: GO 31600
// for i = 1 to array do
31546: LD_ADDR_VAR 0 4
31550: PUSH
31551: DOUBLE
31552: LD_INT 1
31554: DEC
31555: ST_TO_ADDR
31556: LD_VAR 0 1
31560: PUSH
31561: FOR_TO
31562: IFFALSE 31598
// if value = array [ i ] then
31564: LD_VAR 0 2
31568: PUSH
31569: LD_VAR 0 1
31573: PUSH
31574: LD_VAR 0 4
31578: ARRAY
31579: EQUAL
31580: IFFALSE 31596
// begin result := i ;
31582: LD_ADDR_VAR 0 3
31586: PUSH
31587: LD_VAR 0 4
31591: ST_TO_ADDR
// exit ;
31592: POP
31593: POP
31594: GO 31600
// end ;
31596: GO 31561
31598: POP
31599: POP
// end ;
31600: LD_VAR 0 3
31604: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31605: LD_INT 0
31607: PPUSH
// vc_chassis := chassis ;
31608: LD_ADDR_OWVAR 37
31612: PUSH
31613: LD_VAR 0 1
31617: ST_TO_ADDR
// vc_engine := engine ;
31618: LD_ADDR_OWVAR 39
31622: PUSH
31623: LD_VAR 0 2
31627: ST_TO_ADDR
// vc_control := control ;
31628: LD_ADDR_OWVAR 38
31632: PUSH
31633: LD_VAR 0 3
31637: ST_TO_ADDR
// vc_weapon := weapon ;
31638: LD_ADDR_OWVAR 40
31642: PUSH
31643: LD_VAR 0 4
31647: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31648: LD_ADDR_OWVAR 41
31652: PUSH
31653: LD_VAR 0 5
31657: ST_TO_ADDR
// end ;
31658: LD_VAR 0 6
31662: RET
// export function WantPlant ( unit ) ; var task ; begin
31663: LD_INT 0
31665: PPUSH
31666: PPUSH
// result := false ;
31667: LD_ADDR_VAR 0 2
31671: PUSH
31672: LD_INT 0
31674: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31675: LD_ADDR_VAR 0 3
31679: PUSH
31680: LD_VAR 0 1
31684: PPUSH
31685: CALL_OW 437
31689: ST_TO_ADDR
// if task then
31690: LD_VAR 0 3
31694: IFFALSE 31722
// if task [ 1 ] [ 1 ] = p then
31696: LD_VAR 0 3
31700: PUSH
31701: LD_INT 1
31703: ARRAY
31704: PUSH
31705: LD_INT 1
31707: ARRAY
31708: PUSH
31709: LD_STRING p
31711: EQUAL
31712: IFFALSE 31722
// result := true ;
31714: LD_ADDR_VAR 0 2
31718: PUSH
31719: LD_INT 1
31721: ST_TO_ADDR
// end ;
31722: LD_VAR 0 2
31726: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31727: LD_INT 0
31729: PPUSH
31730: PPUSH
31731: PPUSH
31732: PPUSH
// if pos < 1 then
31733: LD_VAR 0 2
31737: PUSH
31738: LD_INT 1
31740: LESS
31741: IFFALSE 31745
// exit ;
31743: GO 32048
// if pos = 1 then
31745: LD_VAR 0 2
31749: PUSH
31750: LD_INT 1
31752: EQUAL
31753: IFFALSE 31786
// result := Replace ( arr , pos [ 1 ] , value ) else
31755: LD_ADDR_VAR 0 4
31759: PUSH
31760: LD_VAR 0 1
31764: PPUSH
31765: LD_VAR 0 2
31769: PUSH
31770: LD_INT 1
31772: ARRAY
31773: PPUSH
31774: LD_VAR 0 3
31778: PPUSH
31779: CALL_OW 1
31783: ST_TO_ADDR
31784: GO 32048
// begin tmp := arr ;
31786: LD_ADDR_VAR 0 6
31790: PUSH
31791: LD_VAR 0 1
31795: ST_TO_ADDR
// s_arr := [ tmp ] ;
31796: LD_ADDR_VAR 0 7
31800: PUSH
31801: LD_VAR 0 6
31805: PUSH
31806: EMPTY
31807: LIST
31808: ST_TO_ADDR
// for i = 1 to pos - 1 do
31809: LD_ADDR_VAR 0 5
31813: PUSH
31814: DOUBLE
31815: LD_INT 1
31817: DEC
31818: ST_TO_ADDR
31819: LD_VAR 0 2
31823: PUSH
31824: LD_INT 1
31826: MINUS
31827: PUSH
31828: FOR_TO
31829: IFFALSE 31874
// begin tmp := tmp [ pos [ i ] ] ;
31831: LD_ADDR_VAR 0 6
31835: PUSH
31836: LD_VAR 0 6
31840: PUSH
31841: LD_VAR 0 2
31845: PUSH
31846: LD_VAR 0 5
31850: ARRAY
31851: ARRAY
31852: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31853: LD_ADDR_VAR 0 7
31857: PUSH
31858: LD_VAR 0 7
31862: PUSH
31863: LD_VAR 0 6
31867: PUSH
31868: EMPTY
31869: LIST
31870: ADD
31871: ST_TO_ADDR
// end ;
31872: GO 31828
31874: POP
31875: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31876: LD_ADDR_VAR 0 6
31880: PUSH
31881: LD_VAR 0 6
31885: PPUSH
31886: LD_VAR 0 2
31890: PUSH
31891: LD_VAR 0 2
31895: ARRAY
31896: PPUSH
31897: LD_VAR 0 3
31901: PPUSH
31902: CALL_OW 1
31906: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31907: LD_ADDR_VAR 0 7
31911: PUSH
31912: LD_VAR 0 7
31916: PPUSH
31917: LD_VAR 0 7
31921: PPUSH
31922: LD_VAR 0 6
31926: PPUSH
31927: CALL_OW 1
31931: ST_TO_ADDR
// for i = s_arr downto 2 do
31932: LD_ADDR_VAR 0 5
31936: PUSH
31937: DOUBLE
31938: LD_VAR 0 7
31942: INC
31943: ST_TO_ADDR
31944: LD_INT 2
31946: PUSH
31947: FOR_DOWNTO
31948: IFFALSE 32032
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31950: LD_ADDR_VAR 0 6
31954: PUSH
31955: LD_VAR 0 7
31959: PUSH
31960: LD_VAR 0 5
31964: PUSH
31965: LD_INT 1
31967: MINUS
31968: ARRAY
31969: PPUSH
31970: LD_VAR 0 2
31974: PUSH
31975: LD_VAR 0 5
31979: PUSH
31980: LD_INT 1
31982: MINUS
31983: ARRAY
31984: PPUSH
31985: LD_VAR 0 7
31989: PUSH
31990: LD_VAR 0 5
31994: ARRAY
31995: PPUSH
31996: CALL_OW 1
32000: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32001: LD_ADDR_VAR 0 7
32005: PUSH
32006: LD_VAR 0 7
32010: PPUSH
32011: LD_VAR 0 5
32015: PUSH
32016: LD_INT 1
32018: MINUS
32019: PPUSH
32020: LD_VAR 0 6
32024: PPUSH
32025: CALL_OW 1
32029: ST_TO_ADDR
// end ;
32030: GO 31947
32032: POP
32033: POP
// result := s_arr [ 1 ] ;
32034: LD_ADDR_VAR 0 4
32038: PUSH
32039: LD_VAR 0 7
32043: PUSH
32044: LD_INT 1
32046: ARRAY
32047: ST_TO_ADDR
// end ; end ;
32048: LD_VAR 0 4
32052: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32053: LD_INT 0
32055: PPUSH
32056: PPUSH
// if not list then
32057: LD_VAR 0 1
32061: NOT
32062: IFFALSE 32066
// exit ;
32064: GO 32157
// i := list [ pos1 ] ;
32066: LD_ADDR_VAR 0 5
32070: PUSH
32071: LD_VAR 0 1
32075: PUSH
32076: LD_VAR 0 2
32080: ARRAY
32081: ST_TO_ADDR
// if not i then
32082: LD_VAR 0 5
32086: NOT
32087: IFFALSE 32091
// exit ;
32089: GO 32157
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32091: LD_ADDR_VAR 0 1
32095: PUSH
32096: LD_VAR 0 1
32100: PPUSH
32101: LD_VAR 0 2
32105: PPUSH
32106: LD_VAR 0 1
32110: PUSH
32111: LD_VAR 0 3
32115: ARRAY
32116: PPUSH
32117: CALL_OW 1
32121: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32122: LD_ADDR_VAR 0 1
32126: PUSH
32127: LD_VAR 0 1
32131: PPUSH
32132: LD_VAR 0 3
32136: PPUSH
32137: LD_VAR 0 5
32141: PPUSH
32142: CALL_OW 1
32146: ST_TO_ADDR
// result := list ;
32147: LD_ADDR_VAR 0 4
32151: PUSH
32152: LD_VAR 0 1
32156: ST_TO_ADDR
// end ;
32157: LD_VAR 0 4
32161: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32162: LD_INT 0
32164: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32165: LD_ADDR_VAR 0 5
32169: PUSH
32170: LD_VAR 0 1
32174: PPUSH
32175: CALL_OW 250
32179: PPUSH
32180: LD_VAR 0 1
32184: PPUSH
32185: CALL_OW 251
32189: PPUSH
32190: LD_VAR 0 2
32194: PPUSH
32195: LD_VAR 0 3
32199: PPUSH
32200: LD_VAR 0 4
32204: PPUSH
32205: CALL 32215 0 5
32209: ST_TO_ADDR
// end ;
32210: LD_VAR 0 5
32214: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32215: LD_INT 0
32217: PPUSH
32218: PPUSH
32219: PPUSH
32220: PPUSH
// if not list then
32221: LD_VAR 0 3
32225: NOT
32226: IFFALSE 32230
// exit ;
32228: GO 32618
// result := [ ] ;
32230: LD_ADDR_VAR 0 6
32234: PUSH
32235: EMPTY
32236: ST_TO_ADDR
// for i in list do
32237: LD_ADDR_VAR 0 7
32241: PUSH
32242: LD_VAR 0 3
32246: PUSH
32247: FOR_IN
32248: IFFALSE 32450
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32250: LD_ADDR_VAR 0 9
32254: PUSH
32255: LD_VAR 0 7
32259: PPUSH
32260: LD_VAR 0 1
32264: PPUSH
32265: LD_VAR 0 2
32269: PPUSH
32270: CALL_OW 297
32274: ST_TO_ADDR
// if not result then
32275: LD_VAR 0 6
32279: NOT
32280: IFFALSE 32306
// result := [ [ i , tmp ] ] else
32282: LD_ADDR_VAR 0 6
32286: PUSH
32287: LD_VAR 0 7
32291: PUSH
32292: LD_VAR 0 9
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: EMPTY
32302: LIST
32303: ST_TO_ADDR
32304: GO 32448
// begin if result [ result ] [ 2 ] < tmp then
32306: LD_VAR 0 6
32310: PUSH
32311: LD_VAR 0 6
32315: ARRAY
32316: PUSH
32317: LD_INT 2
32319: ARRAY
32320: PUSH
32321: LD_VAR 0 9
32325: LESS
32326: IFFALSE 32368
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32328: LD_ADDR_VAR 0 6
32332: PUSH
32333: LD_VAR 0 6
32337: PPUSH
32338: LD_VAR 0 6
32342: PUSH
32343: LD_INT 1
32345: PLUS
32346: PPUSH
32347: LD_VAR 0 7
32351: PUSH
32352: LD_VAR 0 9
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PPUSH
32361: CALL_OW 2
32365: ST_TO_ADDR
32366: GO 32448
// for j = 1 to result do
32368: LD_ADDR_VAR 0 8
32372: PUSH
32373: DOUBLE
32374: LD_INT 1
32376: DEC
32377: ST_TO_ADDR
32378: LD_VAR 0 6
32382: PUSH
32383: FOR_TO
32384: IFFALSE 32446
// begin if tmp < result [ j ] [ 2 ] then
32386: LD_VAR 0 9
32390: PUSH
32391: LD_VAR 0 6
32395: PUSH
32396: LD_VAR 0 8
32400: ARRAY
32401: PUSH
32402: LD_INT 2
32404: ARRAY
32405: LESS
32406: IFFALSE 32444
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32408: LD_ADDR_VAR 0 6
32412: PUSH
32413: LD_VAR 0 6
32417: PPUSH
32418: LD_VAR 0 8
32422: PPUSH
32423: LD_VAR 0 7
32427: PUSH
32428: LD_VAR 0 9
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PPUSH
32437: CALL_OW 2
32441: ST_TO_ADDR
// break ;
32442: GO 32446
// end ; end ;
32444: GO 32383
32446: POP
32447: POP
// end ; end ;
32448: GO 32247
32450: POP
32451: POP
// if result and not asc then
32452: LD_VAR 0 6
32456: PUSH
32457: LD_VAR 0 4
32461: NOT
32462: AND
32463: IFFALSE 32538
// begin tmp := result ;
32465: LD_ADDR_VAR 0 9
32469: PUSH
32470: LD_VAR 0 6
32474: ST_TO_ADDR
// for i = tmp downto 1 do
32475: LD_ADDR_VAR 0 7
32479: PUSH
32480: DOUBLE
32481: LD_VAR 0 9
32485: INC
32486: ST_TO_ADDR
32487: LD_INT 1
32489: PUSH
32490: FOR_DOWNTO
32491: IFFALSE 32536
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32493: LD_ADDR_VAR 0 6
32497: PUSH
32498: LD_VAR 0 6
32502: PPUSH
32503: LD_VAR 0 9
32507: PUSH
32508: LD_VAR 0 7
32512: MINUS
32513: PUSH
32514: LD_INT 1
32516: PLUS
32517: PPUSH
32518: LD_VAR 0 9
32522: PUSH
32523: LD_VAR 0 7
32527: ARRAY
32528: PPUSH
32529: CALL_OW 1
32533: ST_TO_ADDR
32534: GO 32490
32536: POP
32537: POP
// end ; tmp := [ ] ;
32538: LD_ADDR_VAR 0 9
32542: PUSH
32543: EMPTY
32544: ST_TO_ADDR
// if mode then
32545: LD_VAR 0 5
32549: IFFALSE 32618
// begin for i = 1 to result do
32551: LD_ADDR_VAR 0 7
32555: PUSH
32556: DOUBLE
32557: LD_INT 1
32559: DEC
32560: ST_TO_ADDR
32561: LD_VAR 0 6
32565: PUSH
32566: FOR_TO
32567: IFFALSE 32606
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32569: LD_ADDR_VAR 0 9
32573: PUSH
32574: LD_VAR 0 9
32578: PPUSH
32579: LD_VAR 0 7
32583: PPUSH
32584: LD_VAR 0 6
32588: PUSH
32589: LD_VAR 0 7
32593: ARRAY
32594: PUSH
32595: LD_INT 1
32597: ARRAY
32598: PPUSH
32599: CALL_OW 1
32603: ST_TO_ADDR
32604: GO 32566
32606: POP
32607: POP
// result := tmp ;
32608: LD_ADDR_VAR 0 6
32612: PUSH
32613: LD_VAR 0 9
32617: ST_TO_ADDR
// end ; end ;
32618: LD_VAR 0 6
32622: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32623: LD_INT 0
32625: PPUSH
32626: PPUSH
32627: PPUSH
32628: PPUSH
32629: PPUSH
32630: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32631: LD_ADDR_VAR 0 5
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: LD_INT 0
32641: PUSH
32642: LD_INT 0
32644: PUSH
32645: EMPTY
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: ST_TO_ADDR
// if not x or not y then
32653: LD_VAR 0 2
32657: NOT
32658: PUSH
32659: LD_VAR 0 3
32663: NOT
32664: OR
32665: IFFALSE 32669
// exit ;
32667: GO 34315
// if not range then
32669: LD_VAR 0 4
32673: NOT
32674: IFFALSE 32684
// range := 10 ;
32676: LD_ADDR_VAR 0 4
32680: PUSH
32681: LD_INT 10
32683: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32684: LD_ADDR_VAR 0 8
32688: PUSH
32689: LD_INT 81
32691: PUSH
32692: LD_VAR 0 1
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 92
32703: PUSH
32704: LD_VAR 0 2
32708: PUSH
32709: LD_VAR 0 3
32713: PUSH
32714: LD_VAR 0 4
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 3
32727: PUSH
32728: LD_INT 21
32730: PUSH
32731: LD_INT 3
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: PPUSH
32747: CALL_OW 69
32751: ST_TO_ADDR
// if not tmp then
32752: LD_VAR 0 8
32756: NOT
32757: IFFALSE 32761
// exit ;
32759: GO 34315
// for i in tmp do
32761: LD_ADDR_VAR 0 6
32765: PUSH
32766: LD_VAR 0 8
32770: PUSH
32771: FOR_IN
32772: IFFALSE 34290
// begin points := [ 0 , 0 , 0 ] ;
32774: LD_ADDR_VAR 0 9
32778: PUSH
32779: LD_INT 0
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: LIST
32792: ST_TO_ADDR
// bpoints := 1 ;
32793: LD_ADDR_VAR 0 10
32797: PUSH
32798: LD_INT 1
32800: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32801: LD_VAR 0 6
32805: PPUSH
32806: CALL_OW 247
32810: PUSH
32811: LD_INT 1
32813: DOUBLE
32814: EQUAL
32815: IFTRUE 32819
32817: GO 33397
32819: POP
// begin if GetClass ( i ) = 1 then
32820: LD_VAR 0 6
32824: PPUSH
32825: CALL_OW 257
32829: PUSH
32830: LD_INT 1
32832: EQUAL
32833: IFFALSE 32854
// points := [ 10 , 5 , 3 ] ;
32835: LD_ADDR_VAR 0 9
32839: PUSH
32840: LD_INT 10
32842: PUSH
32843: LD_INT 5
32845: PUSH
32846: LD_INT 3
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32854: LD_VAR 0 6
32858: PPUSH
32859: CALL_OW 257
32863: PUSH
32864: LD_INT 2
32866: PUSH
32867: LD_INT 3
32869: PUSH
32870: LD_INT 4
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: LIST
32877: IN
32878: IFFALSE 32899
// points := [ 3 , 2 , 1 ] ;
32880: LD_ADDR_VAR 0 9
32884: PUSH
32885: LD_INT 3
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: LIST
32898: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32899: LD_VAR 0 6
32903: PPUSH
32904: CALL_OW 257
32908: PUSH
32909: LD_INT 5
32911: EQUAL
32912: IFFALSE 32933
// points := [ 130 , 5 , 2 ] ;
32914: LD_ADDR_VAR 0 9
32918: PUSH
32919: LD_INT 130
32921: PUSH
32922: LD_INT 5
32924: PUSH
32925: LD_INT 2
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: LIST
32932: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32933: LD_VAR 0 6
32937: PPUSH
32938: CALL_OW 257
32942: PUSH
32943: LD_INT 8
32945: EQUAL
32946: IFFALSE 32967
// points := [ 35 , 35 , 30 ] ;
32948: LD_ADDR_VAR 0 9
32952: PUSH
32953: LD_INT 35
32955: PUSH
32956: LD_INT 35
32958: PUSH
32959: LD_INT 30
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: LIST
32966: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32967: LD_VAR 0 6
32971: PPUSH
32972: CALL_OW 257
32976: PUSH
32977: LD_INT 9
32979: EQUAL
32980: IFFALSE 33001
// points := [ 20 , 55 , 40 ] ;
32982: LD_ADDR_VAR 0 9
32986: PUSH
32987: LD_INT 20
32989: PUSH
32990: LD_INT 55
32992: PUSH
32993: LD_INT 40
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: LIST
33000: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33001: LD_VAR 0 6
33005: PPUSH
33006: CALL_OW 257
33010: PUSH
33011: LD_INT 12
33013: PUSH
33014: LD_INT 16
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: IN
33021: IFFALSE 33042
// points := [ 5 , 3 , 2 ] ;
33023: LD_ADDR_VAR 0 9
33027: PUSH
33028: LD_INT 5
33030: PUSH
33031: LD_INT 3
33033: PUSH
33034: LD_INT 2
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: LIST
33041: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33042: LD_VAR 0 6
33046: PPUSH
33047: CALL_OW 257
33051: PUSH
33052: LD_INT 17
33054: EQUAL
33055: IFFALSE 33076
// points := [ 100 , 50 , 75 ] ;
33057: LD_ADDR_VAR 0 9
33061: PUSH
33062: LD_INT 100
33064: PUSH
33065: LD_INT 50
33067: PUSH
33068: LD_INT 75
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: LIST
33075: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33076: LD_VAR 0 6
33080: PPUSH
33081: CALL_OW 257
33085: PUSH
33086: LD_INT 15
33088: EQUAL
33089: IFFALSE 33110
// points := [ 10 , 5 , 3 ] ;
33091: LD_ADDR_VAR 0 9
33095: PUSH
33096: LD_INT 10
33098: PUSH
33099: LD_INT 5
33101: PUSH
33102: LD_INT 3
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: LIST
33109: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33110: LD_VAR 0 6
33114: PPUSH
33115: CALL_OW 257
33119: PUSH
33120: LD_INT 14
33122: EQUAL
33123: IFFALSE 33144
// points := [ 10 , 0 , 0 ] ;
33125: LD_ADDR_VAR 0 9
33129: PUSH
33130: LD_INT 10
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33144: LD_VAR 0 6
33148: PPUSH
33149: CALL_OW 257
33153: PUSH
33154: LD_INT 11
33156: EQUAL
33157: IFFALSE 33178
// points := [ 30 , 10 , 5 ] ;
33159: LD_ADDR_VAR 0 9
33163: PUSH
33164: LD_INT 30
33166: PUSH
33167: LD_INT 10
33169: PUSH
33170: LD_INT 5
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: LIST
33177: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33178: LD_VAR 0 1
33182: PPUSH
33183: LD_INT 5
33185: PPUSH
33186: CALL_OW 321
33190: PUSH
33191: LD_INT 2
33193: EQUAL
33194: IFFALSE 33211
// bpoints := bpoints * 1.8 ;
33196: LD_ADDR_VAR 0 10
33200: PUSH
33201: LD_VAR 0 10
33205: PUSH
33206: LD_REAL  1.80000000000000E+0000
33209: MUL
33210: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33211: LD_VAR 0 6
33215: PPUSH
33216: CALL_OW 257
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: LD_INT 3
33229: PUSH
33230: LD_INT 4
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: IN
33239: PUSH
33240: LD_VAR 0 1
33244: PPUSH
33245: LD_INT 51
33247: PPUSH
33248: CALL_OW 321
33252: PUSH
33253: LD_INT 2
33255: EQUAL
33256: AND
33257: IFFALSE 33274
// bpoints := bpoints * 1.2 ;
33259: LD_ADDR_VAR 0 10
33263: PUSH
33264: LD_VAR 0 10
33268: PUSH
33269: LD_REAL  1.20000000000000E+0000
33272: MUL
33273: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33274: LD_VAR 0 6
33278: PPUSH
33279: CALL_OW 257
33283: PUSH
33284: LD_INT 5
33286: PUSH
33287: LD_INT 7
33289: PUSH
33290: LD_INT 9
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: IN
33298: PUSH
33299: LD_VAR 0 1
33303: PPUSH
33304: LD_INT 52
33306: PPUSH
33307: CALL_OW 321
33311: PUSH
33312: LD_INT 2
33314: EQUAL
33315: AND
33316: IFFALSE 33333
// bpoints := bpoints * 1.5 ;
33318: LD_ADDR_VAR 0 10
33322: PUSH
33323: LD_VAR 0 10
33327: PUSH
33328: LD_REAL  1.50000000000000E+0000
33331: MUL
33332: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33333: LD_VAR 0 1
33337: PPUSH
33338: LD_INT 66
33340: PPUSH
33341: CALL_OW 321
33345: PUSH
33346: LD_INT 2
33348: EQUAL
33349: IFFALSE 33366
// bpoints := bpoints * 1.1 ;
33351: LD_ADDR_VAR 0 10
33355: PUSH
33356: LD_VAR 0 10
33360: PUSH
33361: LD_REAL  1.10000000000000E+0000
33364: MUL
33365: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33366: LD_ADDR_VAR 0 10
33370: PUSH
33371: LD_VAR 0 10
33375: PUSH
33376: LD_VAR 0 6
33380: PPUSH
33381: LD_INT 1
33383: PPUSH
33384: CALL_OW 259
33388: PUSH
33389: LD_REAL  1.15000000000000E+0000
33392: MUL
33393: MUL
33394: ST_TO_ADDR
// end ; unit_vehicle :
33395: GO 34219
33397: LD_INT 2
33399: DOUBLE
33400: EQUAL
33401: IFTRUE 33405
33403: GO 34207
33405: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33406: LD_VAR 0 6
33410: PPUSH
33411: CALL_OW 264
33415: PUSH
33416: LD_INT 2
33418: PUSH
33419: LD_INT 42
33421: PUSH
33422: LD_INT 24
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: LIST
33429: IN
33430: IFFALSE 33451
// points := [ 25 , 5 , 3 ] ;
33432: LD_ADDR_VAR 0 9
33436: PUSH
33437: LD_INT 25
33439: PUSH
33440: LD_INT 5
33442: PUSH
33443: LD_INT 3
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: LIST
33450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33451: LD_VAR 0 6
33455: PPUSH
33456: CALL_OW 264
33460: PUSH
33461: LD_INT 4
33463: PUSH
33464: LD_INT 43
33466: PUSH
33467: LD_INT 25
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: IN
33475: IFFALSE 33496
// points := [ 40 , 15 , 5 ] ;
33477: LD_ADDR_VAR 0 9
33481: PUSH
33482: LD_INT 40
33484: PUSH
33485: LD_INT 15
33487: PUSH
33488: LD_INT 5
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: LIST
33495: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33496: LD_VAR 0 6
33500: PPUSH
33501: CALL_OW 264
33505: PUSH
33506: LD_INT 3
33508: PUSH
33509: LD_INT 23
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: IN
33516: IFFALSE 33537
// points := [ 7 , 25 , 8 ] ;
33518: LD_ADDR_VAR 0 9
33522: PUSH
33523: LD_INT 7
33525: PUSH
33526: LD_INT 25
33528: PUSH
33529: LD_INT 8
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: LIST
33536: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33537: LD_VAR 0 6
33541: PPUSH
33542: CALL_OW 264
33546: PUSH
33547: LD_INT 5
33549: PUSH
33550: LD_INT 27
33552: PUSH
33553: LD_INT 44
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: LIST
33560: IN
33561: IFFALSE 33582
// points := [ 14 , 50 , 16 ] ;
33563: LD_ADDR_VAR 0 9
33567: PUSH
33568: LD_INT 14
33570: PUSH
33571: LD_INT 50
33573: PUSH
33574: LD_INT 16
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: LIST
33581: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33582: LD_VAR 0 6
33586: PPUSH
33587: CALL_OW 264
33591: PUSH
33592: LD_INT 6
33594: PUSH
33595: LD_INT 46
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: IN
33602: IFFALSE 33623
// points := [ 32 , 120 , 70 ] ;
33604: LD_ADDR_VAR 0 9
33608: PUSH
33609: LD_INT 32
33611: PUSH
33612: LD_INT 120
33614: PUSH
33615: LD_INT 70
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: LIST
33622: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
33623: LD_VAR 0 6
33627: PPUSH
33628: CALL_OW 264
33632: PUSH
33633: LD_INT 7
33635: PUSH
33636: LD_INT 28
33638: PUSH
33639: LD_INT 45
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: IN
33647: IFFALSE 33668
// points := [ 35 , 20 , 45 ] ;
33649: LD_ADDR_VAR 0 9
33653: PUSH
33654: LD_INT 35
33656: PUSH
33657: LD_INT 20
33659: PUSH
33660: LD_INT 45
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: LIST
33667: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33668: LD_VAR 0 6
33672: PPUSH
33673: CALL_OW 264
33677: PUSH
33678: LD_INT 47
33680: PUSH
33681: EMPTY
33682: LIST
33683: IN
33684: IFFALSE 33705
// points := [ 67 , 45 , 75 ] ;
33686: LD_ADDR_VAR 0 9
33690: PUSH
33691: LD_INT 67
33693: PUSH
33694: LD_INT 45
33696: PUSH
33697: LD_INT 75
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33705: LD_VAR 0 6
33709: PPUSH
33710: CALL_OW 264
33714: PUSH
33715: LD_INT 26
33717: PUSH
33718: EMPTY
33719: LIST
33720: IN
33721: IFFALSE 33742
// points := [ 120 , 30 , 80 ] ;
33723: LD_ADDR_VAR 0 9
33727: PUSH
33728: LD_INT 120
33730: PUSH
33731: LD_INT 30
33733: PUSH
33734: LD_INT 80
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: LIST
33741: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33742: LD_VAR 0 6
33746: PPUSH
33747: CALL_OW 264
33751: PUSH
33752: LD_INT 22
33754: PUSH
33755: EMPTY
33756: LIST
33757: IN
33758: IFFALSE 33779
// points := [ 40 , 1 , 1 ] ;
33760: LD_ADDR_VAR 0 9
33764: PUSH
33765: LD_INT 40
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: LD_INT 1
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: LIST
33778: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33779: LD_VAR 0 6
33783: PPUSH
33784: CALL_OW 264
33788: PUSH
33789: LD_INT 29
33791: PUSH
33792: EMPTY
33793: LIST
33794: IN
33795: IFFALSE 33816
// points := [ 70 , 200 , 400 ] ;
33797: LD_ADDR_VAR 0 9
33801: PUSH
33802: LD_INT 70
33804: PUSH
33805: LD_INT 200
33807: PUSH
33808: LD_INT 400
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: LIST
33815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33816: LD_VAR 0 6
33820: PPUSH
33821: CALL_OW 264
33825: PUSH
33826: LD_INT 14
33828: PUSH
33829: LD_INT 53
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: IN
33836: IFFALSE 33857
// points := [ 40 , 10 , 20 ] ;
33838: LD_ADDR_VAR 0 9
33842: PUSH
33843: LD_INT 40
33845: PUSH
33846: LD_INT 10
33848: PUSH
33849: LD_INT 20
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: LIST
33856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33857: LD_VAR 0 6
33861: PPUSH
33862: CALL_OW 264
33866: PUSH
33867: LD_INT 9
33869: PUSH
33870: EMPTY
33871: LIST
33872: IN
33873: IFFALSE 33894
// points := [ 5 , 70 , 20 ] ;
33875: LD_ADDR_VAR 0 9
33879: PUSH
33880: LD_INT 5
33882: PUSH
33883: LD_INT 70
33885: PUSH
33886: LD_INT 20
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33894: LD_VAR 0 6
33898: PPUSH
33899: CALL_OW 264
33903: PUSH
33904: LD_INT 10
33906: PUSH
33907: EMPTY
33908: LIST
33909: IN
33910: IFFALSE 33931
// points := [ 35 , 110 , 70 ] ;
33912: LD_ADDR_VAR 0 9
33916: PUSH
33917: LD_INT 35
33919: PUSH
33920: LD_INT 110
33922: PUSH
33923: LD_INT 70
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: LIST
33930: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33931: LD_VAR 0 6
33935: PPUSH
33936: CALL_OW 265
33940: PUSH
33941: LD_INT 25
33943: EQUAL
33944: IFFALSE 33965
// points := [ 80 , 65 , 100 ] ;
33946: LD_ADDR_VAR 0 9
33950: PUSH
33951: LD_INT 80
33953: PUSH
33954: LD_INT 65
33956: PUSH
33957: LD_INT 100
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: LIST
33964: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33965: LD_VAR 0 6
33969: PPUSH
33970: CALL_OW 263
33974: PUSH
33975: LD_INT 1
33977: EQUAL
33978: IFFALSE 34013
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33980: LD_ADDR_VAR 0 10
33984: PUSH
33985: LD_VAR 0 10
33989: PUSH
33990: LD_VAR 0 6
33994: PPUSH
33995: CALL_OW 311
33999: PPUSH
34000: LD_INT 3
34002: PPUSH
34003: CALL_OW 259
34007: PUSH
34008: LD_INT 4
34010: MUL
34011: MUL
34012: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34013: LD_VAR 0 6
34017: PPUSH
34018: CALL_OW 263
34022: PUSH
34023: LD_INT 2
34025: EQUAL
34026: IFFALSE 34077
// begin j := IsControledBy ( i ) ;
34028: LD_ADDR_VAR 0 7
34032: PUSH
34033: LD_VAR 0 6
34037: PPUSH
34038: CALL_OW 312
34042: ST_TO_ADDR
// if j then
34043: LD_VAR 0 7
34047: IFFALSE 34077
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34049: LD_ADDR_VAR 0 10
34053: PUSH
34054: LD_VAR 0 10
34058: PUSH
34059: LD_VAR 0 7
34063: PPUSH
34064: LD_INT 3
34066: PPUSH
34067: CALL_OW 259
34071: PUSH
34072: LD_INT 3
34074: MUL
34075: MUL
34076: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34077: LD_VAR 0 6
34081: PPUSH
34082: CALL_OW 264
34086: PUSH
34087: LD_INT 5
34089: PUSH
34090: LD_INT 6
34092: PUSH
34093: LD_INT 46
34095: PUSH
34096: LD_INT 44
34098: PUSH
34099: LD_INT 47
34101: PUSH
34102: LD_INT 45
34104: PUSH
34105: LD_INT 28
34107: PUSH
34108: LD_INT 7
34110: PUSH
34111: LD_INT 27
34113: PUSH
34114: LD_INT 29
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: IN
34129: PUSH
34130: LD_VAR 0 1
34134: PPUSH
34135: LD_INT 52
34137: PPUSH
34138: CALL_OW 321
34142: PUSH
34143: LD_INT 2
34145: EQUAL
34146: AND
34147: IFFALSE 34164
// bpoints := bpoints * 1.2 ;
34149: LD_ADDR_VAR 0 10
34153: PUSH
34154: LD_VAR 0 10
34158: PUSH
34159: LD_REAL  1.20000000000000E+0000
34162: MUL
34163: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34164: LD_VAR 0 6
34168: PPUSH
34169: CALL_OW 264
34173: PUSH
34174: LD_INT 6
34176: PUSH
34177: LD_INT 46
34179: PUSH
34180: LD_INT 47
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: LIST
34187: IN
34188: IFFALSE 34205
// bpoints := bpoints * 1.2 ;
34190: LD_ADDR_VAR 0 10
34194: PUSH
34195: LD_VAR 0 10
34199: PUSH
34200: LD_REAL  1.20000000000000E+0000
34203: MUL
34204: ST_TO_ADDR
// end ; unit_building :
34205: GO 34219
34207: LD_INT 3
34209: DOUBLE
34210: EQUAL
34211: IFTRUE 34215
34213: GO 34218
34215: POP
// ; end ;
34216: GO 34219
34218: POP
// for j = 1 to 3 do
34219: LD_ADDR_VAR 0 7
34223: PUSH
34224: DOUBLE
34225: LD_INT 1
34227: DEC
34228: ST_TO_ADDR
34229: LD_INT 3
34231: PUSH
34232: FOR_TO
34233: IFFALSE 34286
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34235: LD_ADDR_VAR 0 5
34239: PUSH
34240: LD_VAR 0 5
34244: PPUSH
34245: LD_VAR 0 7
34249: PPUSH
34250: LD_VAR 0 5
34254: PUSH
34255: LD_VAR 0 7
34259: ARRAY
34260: PUSH
34261: LD_VAR 0 9
34265: PUSH
34266: LD_VAR 0 7
34270: ARRAY
34271: PUSH
34272: LD_VAR 0 10
34276: MUL
34277: PLUS
34278: PPUSH
34279: CALL_OW 1
34283: ST_TO_ADDR
34284: GO 34232
34286: POP
34287: POP
// end ;
34288: GO 32771
34290: POP
34291: POP
// result := Replace ( result , 4 , tmp ) ;
34292: LD_ADDR_VAR 0 5
34296: PUSH
34297: LD_VAR 0 5
34301: PPUSH
34302: LD_INT 4
34304: PPUSH
34305: LD_VAR 0 8
34309: PPUSH
34310: CALL_OW 1
34314: ST_TO_ADDR
// end ;
34315: LD_VAR 0 5
34319: RET
// export function DangerAtRange ( unit , range ) ; begin
34320: LD_INT 0
34322: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34323: LD_ADDR_VAR 0 3
34327: PUSH
34328: LD_VAR 0 1
34332: PPUSH
34333: CALL_OW 255
34337: PPUSH
34338: LD_VAR 0 1
34342: PPUSH
34343: CALL_OW 250
34347: PPUSH
34348: LD_VAR 0 1
34352: PPUSH
34353: CALL_OW 251
34357: PPUSH
34358: LD_VAR 0 2
34362: PPUSH
34363: CALL 32623 0 4
34367: ST_TO_ADDR
// end ;
34368: LD_VAR 0 3
34372: RET
// export function DangerInArea ( side , area ) ; begin
34373: LD_INT 0
34375: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34376: LD_ADDR_VAR 0 3
34380: PUSH
34381: LD_VAR 0 2
34385: PPUSH
34386: LD_INT 81
34388: PUSH
34389: LD_VAR 0 1
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PPUSH
34398: CALL_OW 70
34402: ST_TO_ADDR
// end ;
34403: LD_VAR 0 3
34407: RET
// export function IsExtension ( b ) ; begin
34408: LD_INT 0
34410: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34411: LD_ADDR_VAR 0 2
34415: PUSH
34416: LD_VAR 0 1
34420: PUSH
34421: LD_INT 23
34423: PUSH
34424: LD_INT 20
34426: PUSH
34427: LD_INT 22
34429: PUSH
34430: LD_INT 17
34432: PUSH
34433: LD_INT 24
34435: PUSH
34436: LD_INT 21
34438: PUSH
34439: LD_INT 19
34441: PUSH
34442: LD_INT 16
34444: PUSH
34445: LD_INT 25
34447: PUSH
34448: LD_INT 18
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: IN
34463: ST_TO_ADDR
// end ;
34464: LD_VAR 0 2
34468: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34469: LD_INT 0
34471: PPUSH
34472: PPUSH
34473: PPUSH
// result := [ ] ;
34474: LD_ADDR_VAR 0 4
34478: PUSH
34479: EMPTY
34480: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34481: LD_ADDR_VAR 0 5
34485: PUSH
34486: LD_VAR 0 2
34490: PPUSH
34491: LD_INT 21
34493: PUSH
34494: LD_INT 3
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PPUSH
34501: CALL_OW 70
34505: ST_TO_ADDR
// if not tmp then
34506: LD_VAR 0 5
34510: NOT
34511: IFFALSE 34515
// exit ;
34513: GO 34579
// if checkLink then
34515: LD_VAR 0 3
34519: IFFALSE 34569
// begin for i in tmp do
34521: LD_ADDR_VAR 0 6
34525: PUSH
34526: LD_VAR 0 5
34530: PUSH
34531: FOR_IN
34532: IFFALSE 34567
// if GetBase ( i ) <> base then
34534: LD_VAR 0 6
34538: PPUSH
34539: CALL_OW 274
34543: PUSH
34544: LD_VAR 0 1
34548: NONEQUAL
34549: IFFALSE 34565
// ComLinkToBase ( base , i ) ;
34551: LD_VAR 0 1
34555: PPUSH
34556: LD_VAR 0 6
34560: PPUSH
34561: CALL_OW 169
34565: GO 34531
34567: POP
34568: POP
// end ; result := tmp ;
34569: LD_ADDR_VAR 0 4
34573: PUSH
34574: LD_VAR 0 5
34578: ST_TO_ADDR
// end ;
34579: LD_VAR 0 4
34583: RET
// export function ComComplete ( units , b ) ; var i ; begin
34584: LD_INT 0
34586: PPUSH
34587: PPUSH
// if not units then
34588: LD_VAR 0 1
34592: NOT
34593: IFFALSE 34597
// exit ;
34595: GO 34687
// for i in units do
34597: LD_ADDR_VAR 0 4
34601: PUSH
34602: LD_VAR 0 1
34606: PUSH
34607: FOR_IN
34608: IFFALSE 34685
// if BuildingStatus ( b ) = bs_build then
34610: LD_VAR 0 2
34614: PPUSH
34615: CALL_OW 461
34619: PUSH
34620: LD_INT 1
34622: EQUAL
34623: IFFALSE 34683
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34625: LD_VAR 0 4
34629: PPUSH
34630: LD_STRING h
34632: PUSH
34633: LD_VAR 0 2
34637: PPUSH
34638: CALL_OW 250
34642: PUSH
34643: LD_VAR 0 2
34647: PPUSH
34648: CALL_OW 251
34652: PUSH
34653: LD_VAR 0 2
34657: PUSH
34658: LD_INT 0
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: PUSH
34676: EMPTY
34677: LIST
34678: PPUSH
34679: CALL_OW 446
34683: GO 34607
34685: POP
34686: POP
// end ;
34687: LD_VAR 0 3
34691: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34692: LD_INT 0
34694: PPUSH
34695: PPUSH
34696: PPUSH
34697: PPUSH
34698: PPUSH
34699: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
34700: LD_VAR 0 1
34704: NOT
34705: PUSH
34706: LD_VAR 0 1
34710: PPUSH
34711: CALL_OW 263
34715: PUSH
34716: LD_INT 2
34718: EQUAL
34719: NOT
34720: OR
34721: IFFALSE 34725
// exit ;
34723: GO 35041
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34725: LD_ADDR_VAR 0 6
34729: PUSH
34730: LD_INT 22
34732: PUSH
34733: LD_VAR 0 1
34737: PPUSH
34738: CALL_OW 255
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: PUSH
34750: LD_INT 30
34752: PUSH
34753: LD_INT 36
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 34
34762: PUSH
34763: LD_INT 31
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PPUSH
34779: CALL_OW 69
34783: ST_TO_ADDR
// if not tmp then
34784: LD_VAR 0 6
34788: NOT
34789: IFFALSE 34793
// exit ;
34791: GO 35041
// result := [ ] ;
34793: LD_ADDR_VAR 0 2
34797: PUSH
34798: EMPTY
34799: ST_TO_ADDR
// for i in tmp do
34800: LD_ADDR_VAR 0 3
34804: PUSH
34805: LD_VAR 0 6
34809: PUSH
34810: FOR_IN
34811: IFFALSE 34882
// begin t := UnitsInside ( i ) ;
34813: LD_ADDR_VAR 0 4
34817: PUSH
34818: LD_VAR 0 3
34822: PPUSH
34823: CALL_OW 313
34827: ST_TO_ADDR
// if t then
34828: LD_VAR 0 4
34832: IFFALSE 34880
// for j in t do
34834: LD_ADDR_VAR 0 7
34838: PUSH
34839: LD_VAR 0 4
34843: PUSH
34844: FOR_IN
34845: IFFALSE 34878
// result := Insert ( result , result + 1 , j ) ;
34847: LD_ADDR_VAR 0 2
34851: PUSH
34852: LD_VAR 0 2
34856: PPUSH
34857: LD_VAR 0 2
34861: PUSH
34862: LD_INT 1
34864: PLUS
34865: PPUSH
34866: LD_VAR 0 7
34870: PPUSH
34871: CALL_OW 2
34875: ST_TO_ADDR
34876: GO 34844
34878: POP
34879: POP
// end ;
34880: GO 34810
34882: POP
34883: POP
// if not result then
34884: LD_VAR 0 2
34888: NOT
34889: IFFALSE 34893
// exit ;
34891: GO 35041
// mech := result [ 1 ] ;
34893: LD_ADDR_VAR 0 5
34897: PUSH
34898: LD_VAR 0 2
34902: PUSH
34903: LD_INT 1
34905: ARRAY
34906: ST_TO_ADDR
// if result > 1 then
34907: LD_VAR 0 2
34911: PUSH
34912: LD_INT 1
34914: GREATER
34915: IFFALSE 35027
// for i = 2 to result do
34917: LD_ADDR_VAR 0 3
34921: PUSH
34922: DOUBLE
34923: LD_INT 2
34925: DEC
34926: ST_TO_ADDR
34927: LD_VAR 0 2
34931: PUSH
34932: FOR_TO
34933: IFFALSE 35025
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34935: LD_ADDR_VAR 0 4
34939: PUSH
34940: LD_VAR 0 2
34944: PUSH
34945: LD_VAR 0 3
34949: ARRAY
34950: PPUSH
34951: LD_INT 3
34953: PPUSH
34954: CALL_OW 259
34958: PUSH
34959: LD_VAR 0 2
34963: PUSH
34964: LD_VAR 0 3
34968: ARRAY
34969: PPUSH
34970: CALL_OW 432
34974: MINUS
34975: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34976: LD_VAR 0 4
34980: PUSH
34981: LD_VAR 0 5
34985: PPUSH
34986: LD_INT 3
34988: PPUSH
34989: CALL_OW 259
34993: PUSH
34994: LD_VAR 0 5
34998: PPUSH
34999: CALL_OW 432
35003: MINUS
35004: GREATEREQUAL
35005: IFFALSE 35023
// mech := result [ i ] ;
35007: LD_ADDR_VAR 0 5
35011: PUSH
35012: LD_VAR 0 2
35016: PUSH
35017: LD_VAR 0 3
35021: ARRAY
35022: ST_TO_ADDR
// end ;
35023: GO 34932
35025: POP
35026: POP
// ComLinkTo ( vehicle , mech ) ;
35027: LD_VAR 0 1
35031: PPUSH
35032: LD_VAR 0 5
35036: PPUSH
35037: CALL_OW 135
// end ;
35041: LD_VAR 0 2
35045: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35046: LD_INT 0
35048: PPUSH
35049: PPUSH
35050: PPUSH
35051: PPUSH
35052: PPUSH
35053: PPUSH
35054: PPUSH
35055: PPUSH
35056: PPUSH
35057: PPUSH
35058: PPUSH
35059: PPUSH
35060: PPUSH
// result := [ ] ;
35061: LD_ADDR_VAR 0 7
35065: PUSH
35066: EMPTY
35067: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35068: LD_VAR 0 1
35072: PPUSH
35073: CALL_OW 266
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: IN
35088: NOT
35089: IFFALSE 35093
// exit ;
35091: GO 36727
// if name then
35093: LD_VAR 0 3
35097: IFFALSE 35113
// SetBName ( base_dep , name ) ;
35099: LD_VAR 0 1
35103: PPUSH
35104: LD_VAR 0 3
35108: PPUSH
35109: CALL_OW 500
// base := GetBase ( base_dep ) ;
35113: LD_ADDR_VAR 0 15
35117: PUSH
35118: LD_VAR 0 1
35122: PPUSH
35123: CALL_OW 274
35127: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35128: LD_ADDR_VAR 0 16
35132: PUSH
35133: LD_VAR 0 1
35137: PPUSH
35138: CALL_OW 255
35142: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35143: LD_ADDR_VAR 0 17
35147: PUSH
35148: LD_VAR 0 1
35152: PPUSH
35153: CALL_OW 248
35157: ST_TO_ADDR
// if sources then
35158: LD_VAR 0 5
35162: IFFALSE 35209
// for i = 1 to 3 do
35164: LD_ADDR_VAR 0 8
35168: PUSH
35169: DOUBLE
35170: LD_INT 1
35172: DEC
35173: ST_TO_ADDR
35174: LD_INT 3
35176: PUSH
35177: FOR_TO
35178: IFFALSE 35207
// AddResourceType ( base , i , sources [ i ] ) ;
35180: LD_VAR 0 15
35184: PPUSH
35185: LD_VAR 0 8
35189: PPUSH
35190: LD_VAR 0 5
35194: PUSH
35195: LD_VAR 0 8
35199: ARRAY
35200: PPUSH
35201: CALL_OW 276
35205: GO 35177
35207: POP
35208: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35209: LD_ADDR_VAR 0 18
35213: PUSH
35214: LD_VAR 0 15
35218: PPUSH
35219: LD_VAR 0 2
35223: PPUSH
35224: LD_INT 1
35226: PPUSH
35227: CALL 34469 0 3
35231: ST_TO_ADDR
// InitHc ;
35232: CALL_OW 19
// InitUc ;
35236: CALL_OW 18
// uc_side := side ;
35240: LD_ADDR_OWVAR 20
35244: PUSH
35245: LD_VAR 0 16
35249: ST_TO_ADDR
// uc_nation := nation ;
35250: LD_ADDR_OWVAR 21
35254: PUSH
35255: LD_VAR 0 17
35259: ST_TO_ADDR
// if buildings then
35260: LD_VAR 0 18
35264: IFFALSE 36586
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35266: LD_ADDR_VAR 0 19
35270: PUSH
35271: LD_VAR 0 18
35275: PPUSH
35276: LD_INT 2
35278: PUSH
35279: LD_INT 30
35281: PUSH
35282: LD_INT 29
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 30
35291: PUSH
35292: LD_INT 30
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: LIST
35303: PPUSH
35304: CALL_OW 72
35308: ST_TO_ADDR
// if tmp then
35309: LD_VAR 0 19
35313: IFFALSE 35361
// for i in tmp do
35315: LD_ADDR_VAR 0 8
35319: PUSH
35320: LD_VAR 0 19
35324: PUSH
35325: FOR_IN
35326: IFFALSE 35359
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35328: LD_VAR 0 8
35332: PPUSH
35333: CALL_OW 250
35337: PPUSH
35338: LD_VAR 0 8
35342: PPUSH
35343: CALL_OW 251
35347: PPUSH
35348: LD_VAR 0 16
35352: PPUSH
35353: CALL_OW 441
35357: GO 35325
35359: POP
35360: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35361: LD_VAR 0 18
35365: PPUSH
35366: LD_INT 2
35368: PUSH
35369: LD_INT 30
35371: PUSH
35372: LD_INT 32
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 30
35381: PUSH
35382: LD_INT 33
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: PPUSH
35394: CALL_OW 72
35398: IFFALSE 35486
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35400: LD_ADDR_VAR 0 8
35404: PUSH
35405: LD_VAR 0 18
35409: PPUSH
35410: LD_INT 2
35412: PUSH
35413: LD_INT 30
35415: PUSH
35416: LD_INT 32
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 30
35425: PUSH
35426: LD_INT 33
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: LIST
35437: PPUSH
35438: CALL_OW 72
35442: PUSH
35443: FOR_IN
35444: IFFALSE 35484
// begin if not GetBWeapon ( i ) then
35446: LD_VAR 0 8
35450: PPUSH
35451: CALL_OW 269
35455: NOT
35456: IFFALSE 35482
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35458: LD_VAR 0 8
35462: PPUSH
35463: LD_VAR 0 8
35467: PPUSH
35468: LD_VAR 0 2
35472: PPUSH
35473: CALL 36732 0 2
35477: PPUSH
35478: CALL_OW 431
// end ;
35482: GO 35443
35484: POP
35485: POP
// end ; for i = 1 to personel do
35486: LD_ADDR_VAR 0 8
35490: PUSH
35491: DOUBLE
35492: LD_INT 1
35494: DEC
35495: ST_TO_ADDR
35496: LD_VAR 0 6
35500: PUSH
35501: FOR_TO
35502: IFFALSE 36566
// begin if i > 4 then
35504: LD_VAR 0 8
35508: PUSH
35509: LD_INT 4
35511: GREATER
35512: IFFALSE 35516
// break ;
35514: GO 36566
// case i of 1 :
35516: LD_VAR 0 8
35520: PUSH
35521: LD_INT 1
35523: DOUBLE
35524: EQUAL
35525: IFTRUE 35529
35527: GO 35609
35529: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35530: LD_ADDR_VAR 0 12
35534: PUSH
35535: LD_VAR 0 18
35539: PPUSH
35540: LD_INT 22
35542: PUSH
35543: LD_VAR 0 16
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 58
35554: PUSH
35555: EMPTY
35556: LIST
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: LD_INT 30
35563: PUSH
35564: LD_INT 32
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 30
35573: PUSH
35574: LD_INT 4
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 30
35583: PUSH
35584: LD_INT 5
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: LIST
35601: PPUSH
35602: CALL_OW 72
35606: ST_TO_ADDR
35607: GO 35831
35609: LD_INT 2
35611: DOUBLE
35612: EQUAL
35613: IFTRUE 35617
35615: GO 35679
35617: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35618: LD_ADDR_VAR 0 12
35622: PUSH
35623: LD_VAR 0 18
35627: PPUSH
35628: LD_INT 22
35630: PUSH
35631: LD_VAR 0 16
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 2
35642: PUSH
35643: LD_INT 30
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 30
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: LIST
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PPUSH
35672: CALL_OW 72
35676: ST_TO_ADDR
35677: GO 35831
35679: LD_INT 3
35681: DOUBLE
35682: EQUAL
35683: IFTRUE 35687
35685: GO 35749
35687: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35688: LD_ADDR_VAR 0 12
35692: PUSH
35693: LD_VAR 0 18
35697: PPUSH
35698: LD_INT 22
35700: PUSH
35701: LD_VAR 0 16
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: LD_INT 30
35715: PUSH
35716: LD_INT 2
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 30
35725: PUSH
35726: LD_INT 3
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: LIST
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PPUSH
35742: CALL_OW 72
35746: ST_TO_ADDR
35747: GO 35831
35749: LD_INT 4
35751: DOUBLE
35752: EQUAL
35753: IFTRUE 35757
35755: GO 35830
35757: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35758: LD_ADDR_VAR 0 12
35762: PUSH
35763: LD_VAR 0 18
35767: PPUSH
35768: LD_INT 22
35770: PUSH
35771: LD_VAR 0 16
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 2
35782: PUSH
35783: LD_INT 30
35785: PUSH
35786: LD_INT 6
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 30
35795: PUSH
35796: LD_INT 7
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 30
35805: PUSH
35806: LD_INT 8
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PPUSH
35823: CALL_OW 72
35827: ST_TO_ADDR
35828: GO 35831
35830: POP
// if i = 1 then
35831: LD_VAR 0 8
35835: PUSH
35836: LD_INT 1
35838: EQUAL
35839: IFFALSE 35950
// begin tmp := [ ] ;
35841: LD_ADDR_VAR 0 19
35845: PUSH
35846: EMPTY
35847: ST_TO_ADDR
// for j in f do
35848: LD_ADDR_VAR 0 9
35852: PUSH
35853: LD_VAR 0 12
35857: PUSH
35858: FOR_IN
35859: IFFALSE 35932
// if GetBType ( j ) = b_bunker then
35861: LD_VAR 0 9
35865: PPUSH
35866: CALL_OW 266
35870: PUSH
35871: LD_INT 32
35873: EQUAL
35874: IFFALSE 35901
// tmp := Insert ( tmp , 1 , j ) else
35876: LD_ADDR_VAR 0 19
35880: PUSH
35881: LD_VAR 0 19
35885: PPUSH
35886: LD_INT 1
35888: PPUSH
35889: LD_VAR 0 9
35893: PPUSH
35894: CALL_OW 2
35898: ST_TO_ADDR
35899: GO 35930
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35901: LD_ADDR_VAR 0 19
35905: PUSH
35906: LD_VAR 0 19
35910: PPUSH
35911: LD_VAR 0 19
35915: PUSH
35916: LD_INT 1
35918: PLUS
35919: PPUSH
35920: LD_VAR 0 9
35924: PPUSH
35925: CALL_OW 2
35929: ST_TO_ADDR
35930: GO 35858
35932: POP
35933: POP
// if tmp then
35934: LD_VAR 0 19
35938: IFFALSE 35950
// f := tmp ;
35940: LD_ADDR_VAR 0 12
35944: PUSH
35945: LD_VAR 0 19
35949: ST_TO_ADDR
// end ; x := personel [ i ] ;
35950: LD_ADDR_VAR 0 13
35954: PUSH
35955: LD_VAR 0 6
35959: PUSH
35960: LD_VAR 0 8
35964: ARRAY
35965: ST_TO_ADDR
// if x = - 1 then
35966: LD_VAR 0 13
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: EQUAL
35975: IFFALSE 36184
// begin for j in f do
35977: LD_ADDR_VAR 0 9
35981: PUSH
35982: LD_VAR 0 12
35986: PUSH
35987: FOR_IN
35988: IFFALSE 36180
// repeat InitHc ;
35990: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35994: LD_VAR 0 9
35998: PPUSH
35999: CALL_OW 266
36003: PUSH
36004: LD_INT 5
36006: EQUAL
36007: IFFALSE 36077
// begin if UnitsInside ( j ) < 3 then
36009: LD_VAR 0 9
36013: PPUSH
36014: CALL_OW 313
36018: PUSH
36019: LD_INT 3
36021: LESS
36022: IFFALSE 36058
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36024: LD_INT 0
36026: PPUSH
36027: LD_INT 5
36029: PUSH
36030: LD_INT 8
36032: PUSH
36033: LD_INT 9
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: LIST
36040: PUSH
36041: LD_VAR 0 17
36045: ARRAY
36046: PPUSH
36047: LD_VAR 0 4
36051: PPUSH
36052: CALL_OW 380
36056: GO 36075
// PrepareHuman ( false , i , skill ) ;
36058: LD_INT 0
36060: PPUSH
36061: LD_VAR 0 8
36065: PPUSH
36066: LD_VAR 0 4
36070: PPUSH
36071: CALL_OW 380
// end else
36075: GO 36094
// PrepareHuman ( false , i , skill ) ;
36077: LD_INT 0
36079: PPUSH
36080: LD_VAR 0 8
36084: PPUSH
36085: LD_VAR 0 4
36089: PPUSH
36090: CALL_OW 380
// un := CreateHuman ;
36094: LD_ADDR_VAR 0 14
36098: PUSH
36099: CALL_OW 44
36103: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36104: LD_ADDR_VAR 0 7
36108: PUSH
36109: LD_VAR 0 7
36113: PPUSH
36114: LD_INT 1
36116: PPUSH
36117: LD_VAR 0 14
36121: PPUSH
36122: CALL_OW 2
36126: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36127: LD_VAR 0 14
36131: PPUSH
36132: LD_VAR 0 9
36136: PPUSH
36137: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36141: LD_VAR 0 9
36145: PPUSH
36146: CALL_OW 313
36150: PUSH
36151: LD_INT 6
36153: EQUAL
36154: PUSH
36155: LD_VAR 0 9
36159: PPUSH
36160: CALL_OW 266
36164: PUSH
36165: LD_INT 32
36167: PUSH
36168: LD_INT 31
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: IN
36175: OR
36176: IFFALSE 35990
36178: GO 35987
36180: POP
36181: POP
// end else
36182: GO 36564
// for j = 1 to x do
36184: LD_ADDR_VAR 0 9
36188: PUSH
36189: DOUBLE
36190: LD_INT 1
36192: DEC
36193: ST_TO_ADDR
36194: LD_VAR 0 13
36198: PUSH
36199: FOR_TO
36200: IFFALSE 36562
// begin InitHc ;
36202: CALL_OW 19
// if not f then
36206: LD_VAR 0 12
36210: NOT
36211: IFFALSE 36300
// begin PrepareHuman ( false , i , skill ) ;
36213: LD_INT 0
36215: PPUSH
36216: LD_VAR 0 8
36220: PPUSH
36221: LD_VAR 0 4
36225: PPUSH
36226: CALL_OW 380
// un := CreateHuman ;
36230: LD_ADDR_VAR 0 14
36234: PUSH
36235: CALL_OW 44
36239: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36240: LD_ADDR_VAR 0 7
36244: PUSH
36245: LD_VAR 0 7
36249: PPUSH
36250: LD_INT 1
36252: PPUSH
36253: LD_VAR 0 14
36257: PPUSH
36258: CALL_OW 2
36262: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36263: LD_VAR 0 14
36267: PPUSH
36268: LD_VAR 0 1
36272: PPUSH
36273: CALL_OW 250
36277: PPUSH
36278: LD_VAR 0 1
36282: PPUSH
36283: CALL_OW 251
36287: PPUSH
36288: LD_INT 10
36290: PPUSH
36291: LD_INT 0
36293: PPUSH
36294: CALL_OW 50
// continue ;
36298: GO 36199
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36300: LD_VAR 0 12
36304: PUSH
36305: LD_INT 1
36307: ARRAY
36308: PPUSH
36309: CALL_OW 313
36313: PUSH
36314: LD_VAR 0 12
36318: PUSH
36319: LD_INT 1
36321: ARRAY
36322: PPUSH
36323: CALL_OW 266
36327: PUSH
36328: LD_INT 32
36330: PUSH
36331: LD_INT 31
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: IN
36338: AND
36339: PUSH
36340: LD_VAR 0 12
36344: PUSH
36345: LD_INT 1
36347: ARRAY
36348: PPUSH
36349: CALL_OW 313
36353: PUSH
36354: LD_INT 6
36356: EQUAL
36357: OR
36358: IFFALSE 36378
// f := Delete ( f , 1 ) ;
36360: LD_ADDR_VAR 0 12
36364: PUSH
36365: LD_VAR 0 12
36369: PPUSH
36370: LD_INT 1
36372: PPUSH
36373: CALL_OW 3
36377: ST_TO_ADDR
// if not f then
36378: LD_VAR 0 12
36382: NOT
36383: IFFALSE 36401
// begin x := x + 2 ;
36385: LD_ADDR_VAR 0 13
36389: PUSH
36390: LD_VAR 0 13
36394: PUSH
36395: LD_INT 2
36397: PLUS
36398: ST_TO_ADDR
// continue ;
36399: GO 36199
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36401: LD_VAR 0 12
36405: PUSH
36406: LD_INT 1
36408: ARRAY
36409: PPUSH
36410: CALL_OW 266
36414: PUSH
36415: LD_INT 5
36417: EQUAL
36418: IFFALSE 36492
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36420: LD_VAR 0 12
36424: PUSH
36425: LD_INT 1
36427: ARRAY
36428: PPUSH
36429: CALL_OW 313
36433: PUSH
36434: LD_INT 3
36436: LESS
36437: IFFALSE 36473
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36439: LD_INT 0
36441: PPUSH
36442: LD_INT 5
36444: PUSH
36445: LD_INT 8
36447: PUSH
36448: LD_INT 9
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: PUSH
36456: LD_VAR 0 17
36460: ARRAY
36461: PPUSH
36462: LD_VAR 0 4
36466: PPUSH
36467: CALL_OW 380
36471: GO 36490
// PrepareHuman ( false , i , skill ) ;
36473: LD_INT 0
36475: PPUSH
36476: LD_VAR 0 8
36480: PPUSH
36481: LD_VAR 0 4
36485: PPUSH
36486: CALL_OW 380
// end else
36490: GO 36509
// PrepareHuman ( false , i , skill ) ;
36492: LD_INT 0
36494: PPUSH
36495: LD_VAR 0 8
36499: PPUSH
36500: LD_VAR 0 4
36504: PPUSH
36505: CALL_OW 380
// un := CreateHuman ;
36509: LD_ADDR_VAR 0 14
36513: PUSH
36514: CALL_OW 44
36518: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36519: LD_ADDR_VAR 0 7
36523: PUSH
36524: LD_VAR 0 7
36528: PPUSH
36529: LD_INT 1
36531: PPUSH
36532: LD_VAR 0 14
36536: PPUSH
36537: CALL_OW 2
36541: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36542: LD_VAR 0 14
36546: PPUSH
36547: LD_VAR 0 12
36551: PUSH
36552: LD_INT 1
36554: ARRAY
36555: PPUSH
36556: CALL_OW 52
// end ;
36560: GO 36199
36562: POP
36563: POP
// end ;
36564: GO 35501
36566: POP
36567: POP
// result := result ^ buildings ;
36568: LD_ADDR_VAR 0 7
36572: PUSH
36573: LD_VAR 0 7
36577: PUSH
36578: LD_VAR 0 18
36582: ADD
36583: ST_TO_ADDR
// end else
36584: GO 36727
// begin for i = 1 to personel do
36586: LD_ADDR_VAR 0 8
36590: PUSH
36591: DOUBLE
36592: LD_INT 1
36594: DEC
36595: ST_TO_ADDR
36596: LD_VAR 0 6
36600: PUSH
36601: FOR_TO
36602: IFFALSE 36725
// begin if i > 4 then
36604: LD_VAR 0 8
36608: PUSH
36609: LD_INT 4
36611: GREATER
36612: IFFALSE 36616
// break ;
36614: GO 36725
// x := personel [ i ] ;
36616: LD_ADDR_VAR 0 13
36620: PUSH
36621: LD_VAR 0 6
36625: PUSH
36626: LD_VAR 0 8
36630: ARRAY
36631: ST_TO_ADDR
// if x = - 1 then
36632: LD_VAR 0 13
36636: PUSH
36637: LD_INT 1
36639: NEG
36640: EQUAL
36641: IFFALSE 36645
// continue ;
36643: GO 36601
// PrepareHuman ( false , i , skill ) ;
36645: LD_INT 0
36647: PPUSH
36648: LD_VAR 0 8
36652: PPUSH
36653: LD_VAR 0 4
36657: PPUSH
36658: CALL_OW 380
// un := CreateHuman ;
36662: LD_ADDR_VAR 0 14
36666: PUSH
36667: CALL_OW 44
36671: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36672: LD_VAR 0 14
36676: PPUSH
36677: LD_VAR 0 1
36681: PPUSH
36682: CALL_OW 250
36686: PPUSH
36687: LD_VAR 0 1
36691: PPUSH
36692: CALL_OW 251
36696: PPUSH
36697: LD_INT 10
36699: PPUSH
36700: LD_INT 0
36702: PPUSH
36703: CALL_OW 50
// result := result ^ un ;
36707: LD_ADDR_VAR 0 7
36711: PUSH
36712: LD_VAR 0 7
36716: PUSH
36717: LD_VAR 0 14
36721: ADD
36722: ST_TO_ADDR
// end ;
36723: GO 36601
36725: POP
36726: POP
// end ; end ;
36727: LD_VAR 0 7
36731: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36732: LD_INT 0
36734: PPUSH
36735: PPUSH
36736: PPUSH
36737: PPUSH
36738: PPUSH
36739: PPUSH
36740: PPUSH
36741: PPUSH
36742: PPUSH
36743: PPUSH
36744: PPUSH
36745: PPUSH
36746: PPUSH
36747: PPUSH
36748: PPUSH
36749: PPUSH
// result := false ;
36750: LD_ADDR_VAR 0 3
36754: PUSH
36755: LD_INT 0
36757: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36758: LD_VAR 0 1
36762: NOT
36763: PUSH
36764: LD_VAR 0 1
36768: PPUSH
36769: CALL_OW 266
36773: PUSH
36774: LD_INT 32
36776: PUSH
36777: LD_INT 33
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: IN
36784: NOT
36785: OR
36786: IFFALSE 36790
// exit ;
36788: GO 37929
// nat := GetNation ( tower ) ;
36790: LD_ADDR_VAR 0 12
36794: PUSH
36795: LD_VAR 0 1
36799: PPUSH
36800: CALL_OW 248
36804: ST_TO_ADDR
// side := GetSide ( tower ) ;
36805: LD_ADDR_VAR 0 16
36809: PUSH
36810: LD_VAR 0 1
36814: PPUSH
36815: CALL_OW 255
36819: ST_TO_ADDR
// x := GetX ( tower ) ;
36820: LD_ADDR_VAR 0 10
36824: PUSH
36825: LD_VAR 0 1
36829: PPUSH
36830: CALL_OW 250
36834: ST_TO_ADDR
// y := GetY ( tower ) ;
36835: LD_ADDR_VAR 0 11
36839: PUSH
36840: LD_VAR 0 1
36844: PPUSH
36845: CALL_OW 251
36849: ST_TO_ADDR
// if not x or not y then
36850: LD_VAR 0 10
36854: NOT
36855: PUSH
36856: LD_VAR 0 11
36860: NOT
36861: OR
36862: IFFALSE 36866
// exit ;
36864: GO 37929
// weapon := 0 ;
36866: LD_ADDR_VAR 0 18
36870: PUSH
36871: LD_INT 0
36873: ST_TO_ADDR
// fac_list := [ ] ;
36874: LD_ADDR_VAR 0 17
36878: PUSH
36879: EMPTY
36880: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36881: LD_ADDR_VAR 0 6
36885: PUSH
36886: LD_VAR 0 1
36890: PPUSH
36891: CALL_OW 274
36895: PPUSH
36896: LD_VAR 0 2
36900: PPUSH
36901: LD_INT 0
36903: PPUSH
36904: CALL 34469 0 3
36908: PPUSH
36909: LD_INT 30
36911: PUSH
36912: LD_INT 3
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PPUSH
36919: CALL_OW 72
36923: ST_TO_ADDR
// if not factories then
36924: LD_VAR 0 6
36928: NOT
36929: IFFALSE 36933
// exit ;
36931: GO 37929
// for i in factories do
36933: LD_ADDR_VAR 0 8
36937: PUSH
36938: LD_VAR 0 6
36942: PUSH
36943: FOR_IN
36944: IFFALSE 36969
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36946: LD_ADDR_VAR 0 17
36950: PUSH
36951: LD_VAR 0 17
36955: PUSH
36956: LD_VAR 0 8
36960: PPUSH
36961: CALL_OW 478
36965: UNION
36966: ST_TO_ADDR
36967: GO 36943
36969: POP
36970: POP
// if not fac_list then
36971: LD_VAR 0 17
36975: NOT
36976: IFFALSE 36980
// exit ;
36978: GO 37929
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36980: LD_ADDR_VAR 0 5
36984: PUSH
36985: LD_INT 4
36987: PUSH
36988: LD_INT 5
36990: PUSH
36991: LD_INT 9
36993: PUSH
36994: LD_INT 10
36996: PUSH
36997: LD_INT 6
36999: PUSH
37000: LD_INT 7
37002: PUSH
37003: LD_INT 11
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 27
37017: PUSH
37018: LD_INT 28
37020: PUSH
37021: LD_INT 26
37023: PUSH
37024: LD_INT 30
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 43
37035: PUSH
37036: LD_INT 44
37038: PUSH
37039: LD_INT 46
37041: PUSH
37042: LD_INT 45
37044: PUSH
37045: LD_INT 47
37047: PUSH
37048: LD_INT 49
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: LIST
37063: PUSH
37064: LD_VAR 0 12
37068: ARRAY
37069: ST_TO_ADDR
// for i in list do
37070: LD_ADDR_VAR 0 8
37074: PUSH
37075: LD_VAR 0 5
37079: PUSH
37080: FOR_IN
37081: IFFALSE 37114
// if not i in fac_list then
37083: LD_VAR 0 8
37087: PUSH
37088: LD_VAR 0 17
37092: IN
37093: NOT
37094: IFFALSE 37112
// list := list diff i ;
37096: LD_ADDR_VAR 0 5
37100: PUSH
37101: LD_VAR 0 5
37105: PUSH
37106: LD_VAR 0 8
37110: DIFF
37111: ST_TO_ADDR
37112: GO 37080
37114: POP
37115: POP
// if not list then
37116: LD_VAR 0 5
37120: NOT
37121: IFFALSE 37125
// exit ;
37123: GO 37929
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37125: LD_VAR 0 12
37129: PUSH
37130: LD_INT 3
37132: EQUAL
37133: PUSH
37134: LD_INT 49
37136: PUSH
37137: LD_VAR 0 5
37141: IN
37142: AND
37143: PUSH
37144: LD_INT 31
37146: PPUSH
37147: LD_VAR 0 16
37151: PPUSH
37152: CALL_OW 321
37156: PUSH
37157: LD_INT 2
37159: EQUAL
37160: AND
37161: IFFALSE 37221
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37163: LD_INT 22
37165: PUSH
37166: LD_VAR 0 16
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 35
37177: PUSH
37178: LD_INT 49
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 91
37187: PUSH
37188: LD_VAR 0 1
37192: PUSH
37193: LD_INT 10
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: LIST
37205: PPUSH
37206: CALL_OW 69
37210: NOT
37211: IFFALSE 37221
// weapon := ru_time_lapser ;
37213: LD_ADDR_VAR 0 18
37217: PUSH
37218: LD_INT 49
37220: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37221: LD_VAR 0 12
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: IN
37236: PUSH
37237: LD_INT 11
37239: PUSH
37240: LD_VAR 0 5
37244: IN
37245: PUSH
37246: LD_INT 30
37248: PUSH
37249: LD_VAR 0 5
37253: IN
37254: OR
37255: AND
37256: PUSH
37257: LD_INT 6
37259: PPUSH
37260: LD_VAR 0 16
37264: PPUSH
37265: CALL_OW 321
37269: PUSH
37270: LD_INT 2
37272: EQUAL
37273: AND
37274: IFFALSE 37439
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37276: LD_INT 22
37278: PUSH
37279: LD_VAR 0 16
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 2
37290: PUSH
37291: LD_INT 35
37293: PUSH
37294: LD_INT 11
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 35
37303: PUSH
37304: LD_INT 30
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 91
37318: PUSH
37319: LD_VAR 0 1
37323: PUSH
37324: LD_INT 18
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: PPUSH
37337: CALL_OW 69
37341: NOT
37342: PUSH
37343: LD_INT 22
37345: PUSH
37346: LD_VAR 0 16
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: LD_INT 30
37360: PUSH
37361: LD_INT 32
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 30
37370: PUSH
37371: LD_INT 33
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 91
37385: PUSH
37386: LD_VAR 0 1
37390: PUSH
37391: LD_INT 12
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: LIST
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: LIST
37403: PUSH
37404: EMPTY
37405: LIST
37406: PPUSH
37407: CALL_OW 69
37411: PUSH
37412: LD_INT 2
37414: GREATER
37415: AND
37416: IFFALSE 37439
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37418: LD_ADDR_VAR 0 18
37422: PUSH
37423: LD_INT 11
37425: PUSH
37426: LD_INT 30
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_VAR 0 12
37437: ARRAY
37438: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37439: LD_VAR 0 18
37443: NOT
37444: PUSH
37445: LD_INT 40
37447: PPUSH
37448: LD_VAR 0 16
37452: PPUSH
37453: CALL_OW 321
37457: PUSH
37458: LD_INT 2
37460: EQUAL
37461: AND
37462: PUSH
37463: LD_INT 7
37465: PUSH
37466: LD_VAR 0 5
37470: IN
37471: PUSH
37472: LD_INT 28
37474: PUSH
37475: LD_VAR 0 5
37479: IN
37480: OR
37481: PUSH
37482: LD_INT 45
37484: PUSH
37485: LD_VAR 0 5
37489: IN
37490: OR
37491: AND
37492: IFFALSE 37746
// begin hex := GetHexInfo ( x , y ) ;
37494: LD_ADDR_VAR 0 4
37498: PUSH
37499: LD_VAR 0 10
37503: PPUSH
37504: LD_VAR 0 11
37508: PPUSH
37509: CALL_OW 546
37513: ST_TO_ADDR
// if hex [ 1 ] then
37514: LD_VAR 0 4
37518: PUSH
37519: LD_INT 1
37521: ARRAY
37522: IFFALSE 37526
// exit ;
37524: GO 37929
// height := hex [ 2 ] ;
37526: LD_ADDR_VAR 0 15
37530: PUSH
37531: LD_VAR 0 4
37535: PUSH
37536: LD_INT 2
37538: ARRAY
37539: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37540: LD_ADDR_VAR 0 14
37544: PUSH
37545: LD_INT 0
37547: PUSH
37548: LD_INT 2
37550: PUSH
37551: LD_INT 3
37553: PUSH
37554: LD_INT 5
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: ST_TO_ADDR
// for i in tmp do
37563: LD_ADDR_VAR 0 8
37567: PUSH
37568: LD_VAR 0 14
37572: PUSH
37573: FOR_IN
37574: IFFALSE 37744
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37576: LD_ADDR_VAR 0 9
37580: PUSH
37581: LD_VAR 0 10
37585: PPUSH
37586: LD_VAR 0 8
37590: PPUSH
37591: LD_INT 5
37593: PPUSH
37594: CALL_OW 272
37598: PUSH
37599: LD_VAR 0 11
37603: PPUSH
37604: LD_VAR 0 8
37608: PPUSH
37609: LD_INT 5
37611: PPUSH
37612: CALL_OW 273
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37621: LD_VAR 0 9
37625: PUSH
37626: LD_INT 1
37628: ARRAY
37629: PPUSH
37630: LD_VAR 0 9
37634: PUSH
37635: LD_INT 2
37637: ARRAY
37638: PPUSH
37639: CALL_OW 488
37643: IFFALSE 37742
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37645: LD_ADDR_VAR 0 4
37649: PUSH
37650: LD_VAR 0 9
37654: PUSH
37655: LD_INT 1
37657: ARRAY
37658: PPUSH
37659: LD_VAR 0 9
37663: PUSH
37664: LD_INT 2
37666: ARRAY
37667: PPUSH
37668: CALL_OW 546
37672: ST_TO_ADDR
// if hex [ 1 ] then
37673: LD_VAR 0 4
37677: PUSH
37678: LD_INT 1
37680: ARRAY
37681: IFFALSE 37685
// continue ;
37683: GO 37573
// h := hex [ 2 ] ;
37685: LD_ADDR_VAR 0 13
37689: PUSH
37690: LD_VAR 0 4
37694: PUSH
37695: LD_INT 2
37697: ARRAY
37698: ST_TO_ADDR
// if h + 7 < height then
37699: LD_VAR 0 13
37703: PUSH
37704: LD_INT 7
37706: PLUS
37707: PUSH
37708: LD_VAR 0 15
37712: LESS
37713: IFFALSE 37742
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37715: LD_ADDR_VAR 0 18
37719: PUSH
37720: LD_INT 7
37722: PUSH
37723: LD_INT 28
37725: PUSH
37726: LD_INT 45
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: LIST
37733: PUSH
37734: LD_VAR 0 12
37738: ARRAY
37739: ST_TO_ADDR
// break ;
37740: GO 37744
// end ; end ; end ;
37742: GO 37573
37744: POP
37745: POP
// end ; if not weapon then
37746: LD_VAR 0 18
37750: NOT
37751: IFFALSE 37811
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37753: LD_ADDR_VAR 0 5
37757: PUSH
37758: LD_VAR 0 5
37762: PUSH
37763: LD_INT 11
37765: PUSH
37766: LD_INT 30
37768: PUSH
37769: LD_INT 49
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: LIST
37776: DIFF
37777: ST_TO_ADDR
// if not list then
37778: LD_VAR 0 5
37782: NOT
37783: IFFALSE 37787
// exit ;
37785: GO 37929
// weapon := list [ rand ( 1 , list ) ] ;
37787: LD_ADDR_VAR 0 18
37791: PUSH
37792: LD_VAR 0 5
37796: PUSH
37797: LD_INT 1
37799: PPUSH
37800: LD_VAR 0 5
37804: PPUSH
37805: CALL_OW 12
37809: ARRAY
37810: ST_TO_ADDR
// end ; if weapon then
37811: LD_VAR 0 18
37815: IFFALSE 37929
// begin tmp := CostOfWeapon ( weapon ) ;
37817: LD_ADDR_VAR 0 14
37821: PUSH
37822: LD_VAR 0 18
37826: PPUSH
37827: CALL_OW 451
37831: ST_TO_ADDR
// j := GetBase ( tower ) ;
37832: LD_ADDR_VAR 0 9
37836: PUSH
37837: LD_VAR 0 1
37841: PPUSH
37842: CALL_OW 274
37846: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37847: LD_VAR 0 9
37851: PPUSH
37852: LD_INT 1
37854: PPUSH
37855: CALL_OW 275
37859: PUSH
37860: LD_VAR 0 14
37864: PUSH
37865: LD_INT 1
37867: ARRAY
37868: GREATEREQUAL
37869: PUSH
37870: LD_VAR 0 9
37874: PPUSH
37875: LD_INT 2
37877: PPUSH
37878: CALL_OW 275
37882: PUSH
37883: LD_VAR 0 14
37887: PUSH
37888: LD_INT 2
37890: ARRAY
37891: GREATEREQUAL
37892: AND
37893: PUSH
37894: LD_VAR 0 9
37898: PPUSH
37899: LD_INT 3
37901: PPUSH
37902: CALL_OW 275
37906: PUSH
37907: LD_VAR 0 14
37911: PUSH
37912: LD_INT 3
37914: ARRAY
37915: GREATEREQUAL
37916: AND
37917: IFFALSE 37929
// result := weapon ;
37919: LD_ADDR_VAR 0 3
37923: PUSH
37924: LD_VAR 0 18
37928: ST_TO_ADDR
// end ; end ;
37929: LD_VAR 0 3
37933: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37934: LD_INT 0
37936: PPUSH
37937: PPUSH
// result := true ;
37938: LD_ADDR_VAR 0 3
37942: PUSH
37943: LD_INT 1
37945: ST_TO_ADDR
// if array1 = array2 then
37946: LD_VAR 0 1
37950: PUSH
37951: LD_VAR 0 2
37955: EQUAL
37956: IFFALSE 38016
// begin for i = 1 to array1 do
37958: LD_ADDR_VAR 0 4
37962: PUSH
37963: DOUBLE
37964: LD_INT 1
37966: DEC
37967: ST_TO_ADDR
37968: LD_VAR 0 1
37972: PUSH
37973: FOR_TO
37974: IFFALSE 38012
// if array1 [ i ] <> array2 [ i ] then
37976: LD_VAR 0 1
37980: PUSH
37981: LD_VAR 0 4
37985: ARRAY
37986: PUSH
37987: LD_VAR 0 2
37991: PUSH
37992: LD_VAR 0 4
37996: ARRAY
37997: NONEQUAL
37998: IFFALSE 38010
// begin result := false ;
38000: LD_ADDR_VAR 0 3
38004: PUSH
38005: LD_INT 0
38007: ST_TO_ADDR
// break ;
38008: GO 38012
// end ;
38010: GO 37973
38012: POP
38013: POP
// end else
38014: GO 38024
// result := false ;
38016: LD_ADDR_VAR 0 3
38020: PUSH
38021: LD_INT 0
38023: ST_TO_ADDR
// end ;
38024: LD_VAR 0 3
38028: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38029: LD_INT 0
38031: PPUSH
38032: PPUSH
// if not array1 or not array2 then
38033: LD_VAR 0 1
38037: NOT
38038: PUSH
38039: LD_VAR 0 2
38043: NOT
38044: OR
38045: IFFALSE 38049
// exit ;
38047: GO 38113
// result := true ;
38049: LD_ADDR_VAR 0 3
38053: PUSH
38054: LD_INT 1
38056: ST_TO_ADDR
// for i = 1 to array1 do
38057: LD_ADDR_VAR 0 4
38061: PUSH
38062: DOUBLE
38063: LD_INT 1
38065: DEC
38066: ST_TO_ADDR
38067: LD_VAR 0 1
38071: PUSH
38072: FOR_TO
38073: IFFALSE 38111
// if array1 [ i ] <> array2 [ i ] then
38075: LD_VAR 0 1
38079: PUSH
38080: LD_VAR 0 4
38084: ARRAY
38085: PUSH
38086: LD_VAR 0 2
38090: PUSH
38091: LD_VAR 0 4
38095: ARRAY
38096: NONEQUAL
38097: IFFALSE 38109
// begin result := false ;
38099: LD_ADDR_VAR 0 3
38103: PUSH
38104: LD_INT 0
38106: ST_TO_ADDR
// break ;
38107: GO 38111
// end ;
38109: GO 38072
38111: POP
38112: POP
// end ;
38113: LD_VAR 0 3
38117: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38118: LD_INT 0
38120: PPUSH
38121: PPUSH
38122: PPUSH
// pom := GetBase ( fac ) ;
38123: LD_ADDR_VAR 0 5
38127: PUSH
38128: LD_VAR 0 1
38132: PPUSH
38133: CALL_OW 274
38137: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38138: LD_ADDR_VAR 0 4
38142: PUSH
38143: LD_VAR 0 2
38147: PUSH
38148: LD_INT 1
38150: ARRAY
38151: PPUSH
38152: LD_VAR 0 2
38156: PUSH
38157: LD_INT 2
38159: ARRAY
38160: PPUSH
38161: LD_VAR 0 2
38165: PUSH
38166: LD_INT 3
38168: ARRAY
38169: PPUSH
38170: LD_VAR 0 2
38174: PUSH
38175: LD_INT 4
38177: ARRAY
38178: PPUSH
38179: CALL_OW 449
38183: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38184: LD_ADDR_VAR 0 3
38188: PUSH
38189: LD_VAR 0 5
38193: PPUSH
38194: LD_INT 1
38196: PPUSH
38197: CALL_OW 275
38201: PUSH
38202: LD_VAR 0 4
38206: PUSH
38207: LD_INT 1
38209: ARRAY
38210: GREATEREQUAL
38211: PUSH
38212: LD_VAR 0 5
38216: PPUSH
38217: LD_INT 2
38219: PPUSH
38220: CALL_OW 275
38224: PUSH
38225: LD_VAR 0 4
38229: PUSH
38230: LD_INT 2
38232: ARRAY
38233: GREATEREQUAL
38234: AND
38235: PUSH
38236: LD_VAR 0 5
38240: PPUSH
38241: LD_INT 3
38243: PPUSH
38244: CALL_OW 275
38248: PUSH
38249: LD_VAR 0 4
38253: PUSH
38254: LD_INT 3
38256: ARRAY
38257: GREATEREQUAL
38258: AND
38259: ST_TO_ADDR
// end ;
38260: LD_VAR 0 3
38264: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38265: LD_INT 0
38267: PPUSH
38268: PPUSH
38269: PPUSH
38270: PPUSH
// pom := GetBase ( building ) ;
38271: LD_ADDR_VAR 0 3
38275: PUSH
38276: LD_VAR 0 1
38280: PPUSH
38281: CALL_OW 274
38285: ST_TO_ADDR
// if not pom then
38286: LD_VAR 0 3
38290: NOT
38291: IFFALSE 38295
// exit ;
38293: GO 38465
// btype := GetBType ( building ) ;
38295: LD_ADDR_VAR 0 5
38299: PUSH
38300: LD_VAR 0 1
38304: PPUSH
38305: CALL_OW 266
38309: ST_TO_ADDR
// if btype = b_armoury then
38310: LD_VAR 0 5
38314: PUSH
38315: LD_INT 4
38317: EQUAL
38318: IFFALSE 38328
// btype := b_barracks ;
38320: LD_ADDR_VAR 0 5
38324: PUSH
38325: LD_INT 5
38327: ST_TO_ADDR
// if btype = b_depot then
38328: LD_VAR 0 5
38332: PUSH
38333: LD_INT 0
38335: EQUAL
38336: IFFALSE 38346
// btype := b_warehouse ;
38338: LD_ADDR_VAR 0 5
38342: PUSH
38343: LD_INT 1
38345: ST_TO_ADDR
// if btype = b_workshop then
38346: LD_VAR 0 5
38350: PUSH
38351: LD_INT 2
38353: EQUAL
38354: IFFALSE 38364
// btype := b_factory ;
38356: LD_ADDR_VAR 0 5
38360: PUSH
38361: LD_INT 3
38363: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38364: LD_ADDR_VAR 0 4
38368: PUSH
38369: LD_VAR 0 5
38373: PPUSH
38374: LD_VAR 0 1
38378: PPUSH
38379: CALL_OW 248
38383: PPUSH
38384: CALL_OW 450
38388: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38389: LD_ADDR_VAR 0 2
38393: PUSH
38394: LD_VAR 0 3
38398: PPUSH
38399: LD_INT 1
38401: PPUSH
38402: CALL_OW 275
38406: PUSH
38407: LD_VAR 0 4
38411: PUSH
38412: LD_INT 1
38414: ARRAY
38415: GREATEREQUAL
38416: PUSH
38417: LD_VAR 0 3
38421: PPUSH
38422: LD_INT 2
38424: PPUSH
38425: CALL_OW 275
38429: PUSH
38430: LD_VAR 0 4
38434: PUSH
38435: LD_INT 2
38437: ARRAY
38438: GREATEREQUAL
38439: AND
38440: PUSH
38441: LD_VAR 0 3
38445: PPUSH
38446: LD_INT 3
38448: PPUSH
38449: CALL_OW 275
38453: PUSH
38454: LD_VAR 0 4
38458: PUSH
38459: LD_INT 3
38461: ARRAY
38462: GREATEREQUAL
38463: AND
38464: ST_TO_ADDR
// end ;
38465: LD_VAR 0 2
38469: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38470: LD_INT 0
38472: PPUSH
38473: PPUSH
38474: PPUSH
// pom := GetBase ( building ) ;
38475: LD_ADDR_VAR 0 4
38479: PUSH
38480: LD_VAR 0 1
38484: PPUSH
38485: CALL_OW 274
38489: ST_TO_ADDR
// if not pom then
38490: LD_VAR 0 4
38494: NOT
38495: IFFALSE 38499
// exit ;
38497: GO 38600
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38499: LD_ADDR_VAR 0 5
38503: PUSH
38504: LD_VAR 0 2
38508: PPUSH
38509: LD_VAR 0 1
38513: PPUSH
38514: CALL_OW 248
38518: PPUSH
38519: CALL_OW 450
38523: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38524: LD_ADDR_VAR 0 3
38528: PUSH
38529: LD_VAR 0 4
38533: PPUSH
38534: LD_INT 1
38536: PPUSH
38537: CALL_OW 275
38541: PUSH
38542: LD_VAR 0 5
38546: PUSH
38547: LD_INT 1
38549: ARRAY
38550: GREATEREQUAL
38551: PUSH
38552: LD_VAR 0 4
38556: PPUSH
38557: LD_INT 2
38559: PPUSH
38560: CALL_OW 275
38564: PUSH
38565: LD_VAR 0 5
38569: PUSH
38570: LD_INT 2
38572: ARRAY
38573: GREATEREQUAL
38574: AND
38575: PUSH
38576: LD_VAR 0 4
38580: PPUSH
38581: LD_INT 3
38583: PPUSH
38584: CALL_OW 275
38588: PUSH
38589: LD_VAR 0 5
38593: PUSH
38594: LD_INT 3
38596: ARRAY
38597: GREATEREQUAL
38598: AND
38599: ST_TO_ADDR
// end ;
38600: LD_VAR 0 3
38604: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38605: LD_INT 0
38607: PPUSH
38608: PPUSH
38609: PPUSH
38610: PPUSH
38611: PPUSH
38612: PPUSH
38613: PPUSH
38614: PPUSH
38615: PPUSH
38616: PPUSH
38617: PPUSH
// result := false ;
38618: LD_ADDR_VAR 0 8
38622: PUSH
38623: LD_INT 0
38625: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38626: LD_VAR 0 5
38630: NOT
38631: PUSH
38632: LD_VAR 0 1
38636: NOT
38637: OR
38638: PUSH
38639: LD_VAR 0 2
38643: NOT
38644: OR
38645: PUSH
38646: LD_VAR 0 3
38650: NOT
38651: OR
38652: IFFALSE 38656
// exit ;
38654: GO 39470
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38656: LD_ADDR_VAR 0 14
38660: PUSH
38661: LD_VAR 0 1
38665: PPUSH
38666: LD_VAR 0 2
38670: PPUSH
38671: LD_VAR 0 3
38675: PPUSH
38676: LD_VAR 0 4
38680: PPUSH
38681: LD_VAR 0 5
38685: PUSH
38686: LD_INT 1
38688: ARRAY
38689: PPUSH
38690: CALL_OW 248
38694: PPUSH
38695: LD_INT 0
38697: PPUSH
38698: CALL 40307 0 6
38702: ST_TO_ADDR
// if not hexes then
38703: LD_VAR 0 14
38707: NOT
38708: IFFALSE 38712
// exit ;
38710: GO 39470
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38712: LD_ADDR_VAR 0 17
38716: PUSH
38717: LD_VAR 0 5
38721: PPUSH
38722: LD_INT 22
38724: PUSH
38725: LD_VAR 0 13
38729: PPUSH
38730: CALL_OW 255
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: LD_INT 30
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 30
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: LIST
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PPUSH
38771: CALL_OW 72
38775: ST_TO_ADDR
// for i = 1 to hexes do
38776: LD_ADDR_VAR 0 9
38780: PUSH
38781: DOUBLE
38782: LD_INT 1
38784: DEC
38785: ST_TO_ADDR
38786: LD_VAR 0 14
38790: PUSH
38791: FOR_TO
38792: IFFALSE 39468
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38794: LD_ADDR_VAR 0 13
38798: PUSH
38799: LD_VAR 0 14
38803: PUSH
38804: LD_VAR 0 9
38808: ARRAY
38809: PUSH
38810: LD_INT 1
38812: ARRAY
38813: PPUSH
38814: LD_VAR 0 14
38818: PUSH
38819: LD_VAR 0 9
38823: ARRAY
38824: PUSH
38825: LD_INT 2
38827: ARRAY
38828: PPUSH
38829: CALL_OW 428
38833: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38834: LD_VAR 0 14
38838: PUSH
38839: LD_VAR 0 9
38843: ARRAY
38844: PUSH
38845: LD_INT 1
38847: ARRAY
38848: PPUSH
38849: LD_VAR 0 14
38853: PUSH
38854: LD_VAR 0 9
38858: ARRAY
38859: PUSH
38860: LD_INT 2
38862: ARRAY
38863: PPUSH
38864: CALL_OW 351
38868: PUSH
38869: LD_VAR 0 14
38873: PUSH
38874: LD_VAR 0 9
38878: ARRAY
38879: PUSH
38880: LD_INT 1
38882: ARRAY
38883: PPUSH
38884: LD_VAR 0 14
38888: PUSH
38889: LD_VAR 0 9
38893: ARRAY
38894: PUSH
38895: LD_INT 2
38897: ARRAY
38898: PPUSH
38899: CALL_OW 488
38903: NOT
38904: OR
38905: PUSH
38906: LD_VAR 0 13
38910: PPUSH
38911: CALL_OW 247
38915: PUSH
38916: LD_INT 3
38918: EQUAL
38919: OR
38920: IFFALSE 38926
// exit ;
38922: POP
38923: POP
38924: GO 39470
// if not tmp then
38926: LD_VAR 0 13
38930: NOT
38931: IFFALSE 38935
// continue ;
38933: GO 38791
// result := true ;
38935: LD_ADDR_VAR 0 8
38939: PUSH
38940: LD_INT 1
38942: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38943: LD_VAR 0 6
38947: PUSH
38948: LD_VAR 0 13
38952: PPUSH
38953: CALL_OW 247
38957: PUSH
38958: LD_INT 2
38960: EQUAL
38961: AND
38962: PUSH
38963: LD_VAR 0 13
38967: PPUSH
38968: CALL_OW 263
38972: PUSH
38973: LD_INT 1
38975: EQUAL
38976: AND
38977: IFFALSE 39141
// begin if IsDrivenBy ( tmp ) then
38979: LD_VAR 0 13
38983: PPUSH
38984: CALL_OW 311
38988: IFFALSE 38992
// continue ;
38990: GO 38791
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38992: LD_VAR 0 6
38996: PPUSH
38997: LD_INT 3
38999: PUSH
39000: LD_INT 60
39002: PUSH
39003: EMPTY
39004: LIST
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 3
39012: PUSH
39013: LD_INT 55
39015: PUSH
39016: EMPTY
39017: LIST
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PPUSH
39027: CALL_OW 72
39031: IFFALSE 39139
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39033: LD_ADDR_VAR 0 18
39037: PUSH
39038: LD_VAR 0 6
39042: PPUSH
39043: LD_INT 3
39045: PUSH
39046: LD_INT 60
39048: PUSH
39049: EMPTY
39050: LIST
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 3
39058: PUSH
39059: LD_INT 55
39061: PUSH
39062: EMPTY
39063: LIST
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PPUSH
39073: CALL_OW 72
39077: PUSH
39078: LD_INT 1
39080: ARRAY
39081: ST_TO_ADDR
// if IsInUnit ( driver ) then
39082: LD_VAR 0 18
39086: PPUSH
39087: CALL_OW 310
39091: IFFALSE 39102
// ComExit ( driver ) ;
39093: LD_VAR 0 18
39097: PPUSH
39098: CALL 63491 0 1
// AddComEnterUnit ( driver , tmp ) ;
39102: LD_VAR 0 18
39106: PPUSH
39107: LD_VAR 0 13
39111: PPUSH
39112: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39116: LD_VAR 0 18
39120: PPUSH
39121: LD_VAR 0 7
39125: PPUSH
39126: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39130: LD_VAR 0 18
39134: PPUSH
39135: CALL_OW 181
// end ; continue ;
39139: GO 38791
// end ; if not cleaners or not tmp in cleaners then
39141: LD_VAR 0 6
39145: NOT
39146: PUSH
39147: LD_VAR 0 13
39151: PUSH
39152: LD_VAR 0 6
39156: IN
39157: NOT
39158: OR
39159: IFFALSE 39466
// begin if dep then
39161: LD_VAR 0 17
39165: IFFALSE 39301
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39167: LD_ADDR_VAR 0 16
39171: PUSH
39172: LD_VAR 0 17
39176: PUSH
39177: LD_INT 1
39179: ARRAY
39180: PPUSH
39181: CALL_OW 250
39185: PPUSH
39186: LD_VAR 0 17
39190: PUSH
39191: LD_INT 1
39193: ARRAY
39194: PPUSH
39195: CALL_OW 254
39199: PPUSH
39200: LD_INT 5
39202: PPUSH
39203: CALL_OW 272
39207: PUSH
39208: LD_VAR 0 17
39212: PUSH
39213: LD_INT 1
39215: ARRAY
39216: PPUSH
39217: CALL_OW 251
39221: PPUSH
39222: LD_VAR 0 17
39226: PUSH
39227: LD_INT 1
39229: ARRAY
39230: PPUSH
39231: CALL_OW 254
39235: PPUSH
39236: LD_INT 5
39238: PPUSH
39239: CALL_OW 273
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39248: LD_VAR 0 16
39252: PUSH
39253: LD_INT 1
39255: ARRAY
39256: PPUSH
39257: LD_VAR 0 16
39261: PUSH
39262: LD_INT 2
39264: ARRAY
39265: PPUSH
39266: CALL_OW 488
39270: IFFALSE 39301
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39272: LD_VAR 0 13
39276: PPUSH
39277: LD_VAR 0 16
39281: PUSH
39282: LD_INT 1
39284: ARRAY
39285: PPUSH
39286: LD_VAR 0 16
39290: PUSH
39291: LD_INT 2
39293: ARRAY
39294: PPUSH
39295: CALL_OW 111
// continue ;
39299: GO 38791
// end ; end ; r := GetDir ( tmp ) ;
39301: LD_ADDR_VAR 0 15
39305: PUSH
39306: LD_VAR 0 13
39310: PPUSH
39311: CALL_OW 254
39315: ST_TO_ADDR
// if r = 5 then
39316: LD_VAR 0 15
39320: PUSH
39321: LD_INT 5
39323: EQUAL
39324: IFFALSE 39334
// r := 0 ;
39326: LD_ADDR_VAR 0 15
39330: PUSH
39331: LD_INT 0
39333: ST_TO_ADDR
// for j = r to 5 do
39334: LD_ADDR_VAR 0 10
39338: PUSH
39339: DOUBLE
39340: LD_VAR 0 15
39344: DEC
39345: ST_TO_ADDR
39346: LD_INT 5
39348: PUSH
39349: FOR_TO
39350: IFFALSE 39464
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39352: LD_ADDR_VAR 0 11
39356: PUSH
39357: LD_VAR 0 13
39361: PPUSH
39362: CALL_OW 250
39366: PPUSH
39367: LD_VAR 0 10
39371: PPUSH
39372: LD_INT 2
39374: PPUSH
39375: CALL_OW 272
39379: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39380: LD_ADDR_VAR 0 12
39384: PUSH
39385: LD_VAR 0 13
39389: PPUSH
39390: CALL_OW 251
39394: PPUSH
39395: LD_VAR 0 10
39399: PPUSH
39400: LD_INT 2
39402: PPUSH
39403: CALL_OW 273
39407: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39408: LD_VAR 0 11
39412: PPUSH
39413: LD_VAR 0 12
39417: PPUSH
39418: CALL_OW 488
39422: PUSH
39423: LD_VAR 0 11
39427: PPUSH
39428: LD_VAR 0 12
39432: PPUSH
39433: CALL_OW 428
39437: NOT
39438: AND
39439: IFFALSE 39462
// begin ComMoveXY ( tmp , _x , _y ) ;
39441: LD_VAR 0 13
39445: PPUSH
39446: LD_VAR 0 11
39450: PPUSH
39451: LD_VAR 0 12
39455: PPUSH
39456: CALL_OW 111
// break ;
39460: GO 39464
// end ; end ;
39462: GO 39349
39464: POP
39465: POP
// end ; end ;
39466: GO 38791
39468: POP
39469: POP
// end ;
39470: LD_VAR 0 8
39474: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39475: LD_INT 0
39477: PPUSH
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
39484: PPUSH
39485: PPUSH
39486: PPUSH
// result := false ;
39487: LD_ADDR_VAR 0 6
39491: PUSH
39492: LD_INT 0
39494: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39495: LD_VAR 0 1
39499: NOT
39500: PUSH
39501: LD_VAR 0 1
39505: PPUSH
39506: CALL_OW 266
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: IN
39521: NOT
39522: OR
39523: PUSH
39524: LD_VAR 0 2
39528: NOT
39529: OR
39530: PUSH
39531: LD_VAR 0 5
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: LD_INT 2
39544: PUSH
39545: LD_INT 3
39547: PUSH
39548: LD_INT 4
39550: PUSH
39551: LD_INT 5
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: IN
39562: NOT
39563: OR
39564: PUSH
39565: LD_VAR 0 3
39569: PPUSH
39570: LD_VAR 0 4
39574: PPUSH
39575: CALL_OW 488
39579: NOT
39580: OR
39581: IFFALSE 39585
// exit ;
39583: GO 40302
// pom := GetBase ( depot ) ;
39585: LD_ADDR_VAR 0 10
39589: PUSH
39590: LD_VAR 0 1
39594: PPUSH
39595: CALL_OW 274
39599: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39600: LD_ADDR_VAR 0 11
39604: PUSH
39605: LD_VAR 0 2
39609: PPUSH
39610: LD_VAR 0 1
39614: PPUSH
39615: CALL_OW 248
39619: PPUSH
39620: CALL_OW 450
39624: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39625: LD_VAR 0 10
39629: PPUSH
39630: LD_INT 1
39632: PPUSH
39633: CALL_OW 275
39637: PUSH
39638: LD_VAR 0 11
39642: PUSH
39643: LD_INT 1
39645: ARRAY
39646: GREATEREQUAL
39647: PUSH
39648: LD_VAR 0 10
39652: PPUSH
39653: LD_INT 2
39655: PPUSH
39656: CALL_OW 275
39660: PUSH
39661: LD_VAR 0 11
39665: PUSH
39666: LD_INT 2
39668: ARRAY
39669: GREATEREQUAL
39670: AND
39671: PUSH
39672: LD_VAR 0 10
39676: PPUSH
39677: LD_INT 3
39679: PPUSH
39680: CALL_OW 275
39684: PUSH
39685: LD_VAR 0 11
39689: PUSH
39690: LD_INT 3
39692: ARRAY
39693: GREATEREQUAL
39694: AND
39695: NOT
39696: IFFALSE 39700
// exit ;
39698: GO 40302
// if GetBType ( depot ) = b_depot then
39700: LD_VAR 0 1
39704: PPUSH
39705: CALL_OW 266
39709: PUSH
39710: LD_INT 0
39712: EQUAL
39713: IFFALSE 39725
// dist := 28 else
39715: LD_ADDR_VAR 0 14
39719: PUSH
39720: LD_INT 28
39722: ST_TO_ADDR
39723: GO 39733
// dist := 36 ;
39725: LD_ADDR_VAR 0 14
39729: PUSH
39730: LD_INT 36
39732: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39733: LD_VAR 0 1
39737: PPUSH
39738: LD_VAR 0 3
39742: PPUSH
39743: LD_VAR 0 4
39747: PPUSH
39748: CALL_OW 297
39752: PUSH
39753: LD_VAR 0 14
39757: GREATER
39758: IFFALSE 39762
// exit ;
39760: GO 40302
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39762: LD_ADDR_VAR 0 12
39766: PUSH
39767: LD_VAR 0 2
39771: PPUSH
39772: LD_VAR 0 3
39776: PPUSH
39777: LD_VAR 0 4
39781: PPUSH
39782: LD_VAR 0 5
39786: PPUSH
39787: LD_VAR 0 1
39791: PPUSH
39792: CALL_OW 248
39796: PPUSH
39797: LD_INT 0
39799: PPUSH
39800: CALL 40307 0 6
39804: ST_TO_ADDR
// if not hexes then
39805: LD_VAR 0 12
39809: NOT
39810: IFFALSE 39814
// exit ;
39812: GO 40302
// hex := GetHexInfo ( x , y ) ;
39814: LD_ADDR_VAR 0 15
39818: PUSH
39819: LD_VAR 0 3
39823: PPUSH
39824: LD_VAR 0 4
39828: PPUSH
39829: CALL_OW 546
39833: ST_TO_ADDR
// if hex [ 1 ] then
39834: LD_VAR 0 15
39838: PUSH
39839: LD_INT 1
39841: ARRAY
39842: IFFALSE 39846
// exit ;
39844: GO 40302
// height := hex [ 2 ] ;
39846: LD_ADDR_VAR 0 13
39850: PUSH
39851: LD_VAR 0 15
39855: PUSH
39856: LD_INT 2
39858: ARRAY
39859: ST_TO_ADDR
// for i = 1 to hexes do
39860: LD_ADDR_VAR 0 7
39864: PUSH
39865: DOUBLE
39866: LD_INT 1
39868: DEC
39869: ST_TO_ADDR
39870: LD_VAR 0 12
39874: PUSH
39875: FOR_TO
39876: IFFALSE 40206
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39878: LD_VAR 0 12
39882: PUSH
39883: LD_VAR 0 7
39887: ARRAY
39888: PUSH
39889: LD_INT 1
39891: ARRAY
39892: PPUSH
39893: LD_VAR 0 12
39897: PUSH
39898: LD_VAR 0 7
39902: ARRAY
39903: PUSH
39904: LD_INT 2
39906: ARRAY
39907: PPUSH
39908: CALL_OW 488
39912: NOT
39913: PUSH
39914: LD_VAR 0 12
39918: PUSH
39919: LD_VAR 0 7
39923: ARRAY
39924: PUSH
39925: LD_INT 1
39927: ARRAY
39928: PPUSH
39929: LD_VAR 0 12
39933: PUSH
39934: LD_VAR 0 7
39938: ARRAY
39939: PUSH
39940: LD_INT 2
39942: ARRAY
39943: PPUSH
39944: CALL_OW 428
39948: PUSH
39949: LD_INT 0
39951: GREATER
39952: OR
39953: PUSH
39954: LD_VAR 0 12
39958: PUSH
39959: LD_VAR 0 7
39963: ARRAY
39964: PUSH
39965: LD_INT 1
39967: ARRAY
39968: PPUSH
39969: LD_VAR 0 12
39973: PUSH
39974: LD_VAR 0 7
39978: ARRAY
39979: PUSH
39980: LD_INT 2
39982: ARRAY
39983: PPUSH
39984: CALL_OW 351
39988: OR
39989: IFFALSE 39995
// exit ;
39991: POP
39992: POP
39993: GO 40302
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39995: LD_ADDR_VAR 0 8
39999: PUSH
40000: LD_VAR 0 12
40004: PUSH
40005: LD_VAR 0 7
40009: ARRAY
40010: PUSH
40011: LD_INT 1
40013: ARRAY
40014: PPUSH
40015: LD_VAR 0 12
40019: PUSH
40020: LD_VAR 0 7
40024: ARRAY
40025: PUSH
40026: LD_INT 2
40028: ARRAY
40029: PPUSH
40030: CALL_OW 546
40034: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40035: LD_VAR 0 8
40039: PUSH
40040: LD_INT 1
40042: ARRAY
40043: PUSH
40044: LD_VAR 0 8
40048: PUSH
40049: LD_INT 2
40051: ARRAY
40052: PUSH
40053: LD_VAR 0 13
40057: PUSH
40058: LD_INT 2
40060: PLUS
40061: GREATER
40062: OR
40063: PUSH
40064: LD_VAR 0 8
40068: PUSH
40069: LD_INT 2
40071: ARRAY
40072: PUSH
40073: LD_VAR 0 13
40077: PUSH
40078: LD_INT 2
40080: MINUS
40081: LESS
40082: OR
40083: PUSH
40084: LD_VAR 0 8
40088: PUSH
40089: LD_INT 3
40091: ARRAY
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: LD_INT 8
40098: PUSH
40099: LD_INT 9
40101: PUSH
40102: LD_INT 10
40104: PUSH
40105: LD_INT 11
40107: PUSH
40108: LD_INT 12
40110: PUSH
40111: LD_INT 13
40113: PUSH
40114: LD_INT 16
40116: PUSH
40117: LD_INT 17
40119: PUSH
40120: LD_INT 18
40122: PUSH
40123: LD_INT 19
40125: PUSH
40126: LD_INT 20
40128: PUSH
40129: LD_INT 21
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: IN
40147: NOT
40148: OR
40149: PUSH
40150: LD_VAR 0 8
40154: PUSH
40155: LD_INT 5
40157: ARRAY
40158: NOT
40159: OR
40160: PUSH
40161: LD_VAR 0 8
40165: PUSH
40166: LD_INT 6
40168: ARRAY
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: LD_INT 7
40178: PUSH
40179: LD_INT 9
40181: PUSH
40182: LD_INT 10
40184: PUSH
40185: LD_INT 11
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: IN
40196: NOT
40197: OR
40198: IFFALSE 40204
// exit ;
40200: POP
40201: POP
40202: GO 40302
// end ;
40204: GO 39875
40206: POP
40207: POP
// side := GetSide ( depot ) ;
40208: LD_ADDR_VAR 0 9
40212: PUSH
40213: LD_VAR 0 1
40217: PPUSH
40218: CALL_OW 255
40222: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40223: LD_VAR 0 9
40227: PPUSH
40228: LD_VAR 0 3
40232: PPUSH
40233: LD_VAR 0 4
40237: PPUSH
40238: LD_INT 20
40240: PPUSH
40241: CALL 32623 0 4
40245: PUSH
40246: LD_INT 4
40248: ARRAY
40249: IFFALSE 40253
// exit ;
40251: GO 40302
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40253: LD_VAR 0 2
40257: PUSH
40258: LD_INT 29
40260: PUSH
40261: LD_INT 30
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: IN
40268: PUSH
40269: LD_VAR 0 3
40273: PPUSH
40274: LD_VAR 0 4
40278: PPUSH
40279: LD_VAR 0 9
40283: PPUSH
40284: CALL_OW 440
40288: NOT
40289: AND
40290: IFFALSE 40294
// exit ;
40292: GO 40302
// result := true ;
40294: LD_ADDR_VAR 0 6
40298: PUSH
40299: LD_INT 1
40301: ST_TO_ADDR
// end ;
40302: LD_VAR 0 6
40306: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40307: LD_INT 0
40309: PPUSH
40310: PPUSH
40311: PPUSH
40312: PPUSH
40313: PPUSH
40314: PPUSH
40315: PPUSH
40316: PPUSH
40317: PPUSH
40318: PPUSH
40319: PPUSH
40320: PPUSH
40321: PPUSH
40322: PPUSH
40323: PPUSH
40324: PPUSH
40325: PPUSH
40326: PPUSH
40327: PPUSH
40328: PPUSH
40329: PPUSH
40330: PPUSH
40331: PPUSH
40332: PPUSH
40333: PPUSH
40334: PPUSH
40335: PPUSH
40336: PPUSH
40337: PPUSH
40338: PPUSH
40339: PPUSH
40340: PPUSH
40341: PPUSH
40342: PPUSH
40343: PPUSH
40344: PPUSH
40345: PPUSH
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
40351: PPUSH
40352: PPUSH
40353: PPUSH
40354: PPUSH
40355: PPUSH
40356: PPUSH
40357: PPUSH
40358: PPUSH
40359: PPUSH
40360: PPUSH
40361: PPUSH
40362: PPUSH
40363: PPUSH
40364: PPUSH
40365: PPUSH
40366: PPUSH
// result = [ ] ;
40367: LD_ADDR_VAR 0 7
40371: PUSH
40372: EMPTY
40373: ST_TO_ADDR
// temp_list = [ ] ;
40374: LD_ADDR_VAR 0 9
40378: PUSH
40379: EMPTY
40380: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40381: LD_VAR 0 4
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: LD_INT 2
40394: PUSH
40395: LD_INT 3
40397: PUSH
40398: LD_INT 4
40400: PUSH
40401: LD_INT 5
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: IN
40412: NOT
40413: PUSH
40414: LD_VAR 0 1
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: IN
40429: PUSH
40430: LD_VAR 0 5
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: LD_INT 2
40440: PUSH
40441: LD_INT 3
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: LIST
40448: IN
40449: NOT
40450: AND
40451: OR
40452: IFFALSE 40456
// exit ;
40454: GO 58847
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40456: LD_VAR 0 1
40460: PUSH
40461: LD_INT 6
40463: PUSH
40464: LD_INT 7
40466: PUSH
40467: LD_INT 8
40469: PUSH
40470: LD_INT 13
40472: PUSH
40473: LD_INT 12
40475: PUSH
40476: LD_INT 15
40478: PUSH
40479: LD_INT 11
40481: PUSH
40482: LD_INT 14
40484: PUSH
40485: LD_INT 10
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: IN
40499: IFFALSE 40509
// btype = b_lab ;
40501: LD_ADDR_VAR 0 1
40505: PUSH
40506: LD_INT 6
40508: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40509: LD_VAR 0 6
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: LIST
40527: IN
40528: NOT
40529: PUSH
40530: LD_VAR 0 1
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: LD_INT 2
40543: PUSH
40544: LD_INT 3
40546: PUSH
40547: LD_INT 6
40549: PUSH
40550: LD_INT 36
40552: PUSH
40553: LD_INT 4
40555: PUSH
40556: LD_INT 5
40558: PUSH
40559: LD_INT 31
40561: PUSH
40562: LD_INT 32
40564: PUSH
40565: LD_INT 33
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: IN
40581: NOT
40582: PUSH
40583: LD_VAR 0 6
40587: PUSH
40588: LD_INT 1
40590: EQUAL
40591: AND
40592: OR
40593: PUSH
40594: LD_VAR 0 1
40598: PUSH
40599: LD_INT 2
40601: PUSH
40602: LD_INT 3
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: IN
40609: NOT
40610: PUSH
40611: LD_VAR 0 6
40615: PUSH
40616: LD_INT 2
40618: EQUAL
40619: AND
40620: OR
40621: IFFALSE 40631
// mode = 0 ;
40623: LD_ADDR_VAR 0 6
40627: PUSH
40628: LD_INT 0
40630: ST_TO_ADDR
// case mode of 0 :
40631: LD_VAR 0 6
40635: PUSH
40636: LD_INT 0
40638: DOUBLE
40639: EQUAL
40640: IFTRUE 40644
40642: GO 52097
40644: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40645: LD_ADDR_VAR 0 11
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: LD_INT 2
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 2
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: LD_INT 2
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: LD_INT 3
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: LD_INT 3
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: LD_INT 2
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40838: LD_ADDR_VAR 0 12
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: LD_INT 1
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: NEG
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 2
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 2
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: NEG
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 3
40995: NEG
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 3
41006: NEG
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41034: LD_ADDR_VAR 0 13
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: LD_INT 2
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 2
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 2
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 2
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 2
41157: NEG
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: LD_INT 3
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 3
41193: NEG
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 3
41205: NEG
41206: PUSH
41207: LD_INT 3
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41233: LD_ADDR_VAR 0 14
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: LD_INT 2
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: LD_INT 2
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: LD_INT 2
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 2
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: NEG
41380: PUSH
41381: LD_INT 3
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: LD_INT 3
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: LD_INT 2
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41429: LD_ADDR_VAR 0 15
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 2
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 2
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 3
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 3
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41622: LD_ADDR_VAR 0 16
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: LD_INT 2
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 1
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 2
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: LD_INT 2
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 2
41745: NEG
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 2
41757: NEG
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 3
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 3
41779: PUSH
41780: LD_INT 3
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 2
41789: PUSH
41790: LD_INT 3
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41815: LD_ADDR_VAR 0 17
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: LD_INT 2
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 2
41991: NEG
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: NEG
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: NEG
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42045: LD_ADDR_VAR 0 18
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 2
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: LD_INT 2
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 2
42221: NEG
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 2
42232: NEG
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: LD_INT 2
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42275: LD_ADDR_VAR 0 19
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: LD_INT 1
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: LD_INT 2
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: LD_INT 2
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 2
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 2
42410: PUSH
42411: LD_INT 2
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: LD_INT 2
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 2
42451: NEG
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: NEG
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: LD_INT 2
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42505: LD_ADDR_VAR 0 20
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 2
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: LD_INT 2
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 2
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: LD_INT 2
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: LD_INT 2
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42735: LD_ADDR_VAR 0 21
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: LD_INT 2
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: LD_INT 2
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: LD_INT 2
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: LD_INT 2
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: NEG
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42965: LD_ADDR_VAR 0 22
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: LD_INT 2
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 2
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 2
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 2
43100: PUSH
43101: LD_INT 2
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: LD_INT 2
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 2
43141: NEG
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 2
43164: NEG
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43195: LD_ADDR_VAR 0 23
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 1
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 2
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 2
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 2
43371: NEG
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: NEG
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 2
43394: NEG
43395: PUSH
43396: LD_INT 2
43398: NEG
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 2
43406: NEG
43407: PUSH
43408: LD_INT 3
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: LD_INT 3
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 2
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43475: LD_ADDR_VAR 0 24
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: LD_INT 2
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 2
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: LD_INT 2
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 2
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 3
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 3
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43751: LD_ADDR_VAR 0 25
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: LD_INT 2
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 2
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 2
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 2
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 2
43927: NEG
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: LD_INT 2
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 3
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 3
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: PUSH
43983: LD_INT 3
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 3
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44025: LD_ADDR_VAR 0 26
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: LD_INT 2
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 2
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: NEG
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: LD_INT 2
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 3
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: LD_INT 3
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44301: LD_ADDR_VAR 0 27
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: LD_INT 2
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 2
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 2
44436: PUSH
44437: LD_INT 2
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 3
44534: NEG
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 3
44546: NEG
44547: PUSH
44548: LD_INT 2
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44581: LD_ADDR_VAR 0 28
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: LD_INT 2
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 2
44757: NEG
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 2
44768: NEG
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: LD_INT 2
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: LD_INT 3
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: LD_INT 3
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 3
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 3
44828: NEG
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44863: LD_ADDR_VAR 0 29
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 2
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 2
45053: NEG
45054: PUSH
45055: LD_INT 3
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 3
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 3
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 3
45107: NEG
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45142: LD_ADDR_VAR 0 30
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: LD_INT 2
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: LD_INT 3
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 3
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: LD_INT 3
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 3
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45420: LD_ADDR_VAR 0 31
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 2
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 3
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 3
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 3
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 3
45663: NEG
45664: PUSH
45665: LD_INT 2
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45698: LD_ADDR_VAR 0 32
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 2
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: LD_INT 3
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: LD_INT 2
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 3
45910: PUSH
45911: LD_INT 2
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: LD_INT 3
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45976: LD_ADDR_VAR 0 33
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 2
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: NEG
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 2
46142: NEG
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: LD_INT 3
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 3
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 3
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 3
46220: NEG
46221: PUSH
46222: LD_INT 2
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46255: LD_ADDR_VAR 0 34
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: LD_INT 2
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 2
46434: NEG
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: LD_INT 3
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 3
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: LD_INT 3
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 3
46500: NEG
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46535: LD_ADDR_VAR 0 35
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46647: LD_ADDR_VAR 0 36
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46759: LD_ADDR_VAR 0 37
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46871: LD_ADDR_VAR 0 38
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 2
46962: NEG
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46983: LD_ADDR_VAR 0 39
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47095: LD_ADDR_VAR 0 40
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47207: LD_ADDR_VAR 0 41
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: LD_INT 2
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: LD_INT 3
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 3
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 3
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 3
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 3
47450: PUSH
47451: LD_INT 3
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: LD_INT 3
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 3
47481: NEG
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 3
47492: NEG
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 3
47504: NEG
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 3
47516: NEG
47517: PUSH
47518: LD_INT 3
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47557: LD_ADDR_VAR 0 42
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: LD_INT 2
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: LD_INT 3
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: LD_INT 3
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 3
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 3
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 3
47803: PUSH
47804: LD_INT 3
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: LD_INT 3
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 3
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 3
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 3
47854: NEG
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 3
47866: NEG
47867: PUSH
47868: LD_INT 3
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47907: LD_ADDR_VAR 0 43
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: NEG
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 3
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 3
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 2
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 3
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 3
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: LD_INT 3
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: NEG
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 3
48203: NEG
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 3
48214: NEG
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48255: LD_ADDR_VAR 0 44
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: LD_INT 3
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 3
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 3
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 3
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 3
48498: PUSH
48499: LD_INT 3
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 2
48508: PUSH
48509: LD_INT 3
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 3
48529: NEG
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 3
48552: NEG
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 3
48564: NEG
48565: PUSH
48566: LD_INT 3
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48605: LD_ADDR_VAR 0 45
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: LD_INT 3
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 3
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: LD_INT 3
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: LD_INT 2
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 3
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 3
48851: PUSH
48852: LD_INT 3
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: LD_INT 3
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 3
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 3
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: LD_INT 2
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 3
48902: NEG
48903: PUSH
48904: LD_INT 2
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 3
48914: NEG
48915: PUSH
48916: LD_INT 3
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48955: LD_ADDR_VAR 0 46
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 2
49121: NEG
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: NEG
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: LD_INT 3
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 3
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 3
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 3
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: LD_INT 3
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 3
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 3
49251: NEG
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 3
49262: NEG
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49303: LD_ADDR_VAR 0 47
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: LD_INT 2
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: LD_INT 2
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 2
49418: NEG
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49454: LD_ADDR_VAR 0 48
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49601: LD_ADDR_VAR 0 49
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49745: LD_ADDR_VAR 0 50
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: LD_INT 2
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49889: LD_ADDR_VAR 0 51
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: LD_INT 2
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50036: LD_ADDR_VAR 0 52
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50187: LD_ADDR_VAR 0 53
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 2
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 2
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50417: LD_ADDR_VAR 0 54
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 2
50604: NEG
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: NEG
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50647: LD_ADDR_VAR 0 55
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: LD_INT 2
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: LD_INT 2
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 2
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: NEG
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 2
50846: NEG
50847: PUSH
50848: LD_INT 2
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50877: LD_ADDR_VAR 0 56
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 2
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: LD_INT 2
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 2
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: NEG
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 2
51076: NEG
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51107: LD_ADDR_VAR 0 57
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51337: LD_ADDR_VAR 0 58
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: PUSH
51473: LD_INT 2
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51567: LD_ADDR_VAR 0 59
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51655: LD_ADDR_VAR 0 60
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51743: LD_ADDR_VAR 0 61
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51831: LD_ADDR_VAR 0 62
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51919: LD_ADDR_VAR 0 63
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52007: LD_ADDR_VAR 0 64
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: ST_TO_ADDR
// end ; 1 :
52095: GO 57992
52097: LD_INT 1
52099: DOUBLE
52100: EQUAL
52101: IFTRUE 52105
52103: GO 54728
52105: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52106: LD_ADDR_VAR 0 11
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: LD_INT 3
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 3
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: LIST
52149: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52150: LD_ADDR_VAR 0 12
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 3
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: LIST
52190: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52191: LD_ADDR_VAR 0 13
52195: PUSH
52196: LD_INT 3
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 3
52208: PUSH
52209: LD_INT 3
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: LD_INT 3
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: LIST
52230: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52231: LD_ADDR_VAR 0 14
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: LIST
52271: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52272: LD_ADDR_VAR 0 15
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 3
52290: NEG
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 3
52301: NEG
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: LIST
52315: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52316: LD_ADDR_VAR 0 16
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: LD_INT 3
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 3
52335: NEG
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 3
52347: NEG
52348: PUSH
52349: LD_INT 3
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: LIST
52361: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52362: LD_ADDR_VAR 0 17
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: LD_INT 3
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 3
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 2
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52406: LD_ADDR_VAR 0 18
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 3
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52447: LD_ADDR_VAR 0 19
52451: PUSH
52452: LD_INT 3
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 3
52464: PUSH
52465: LD_INT 3
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: LD_INT 3
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: LIST
52486: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52487: LD_ADDR_VAR 0 20
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 3
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 3
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: LIST
52527: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52528: LD_ADDR_VAR 0 21
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 3
52546: NEG
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 3
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: LIST
52571: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52572: LD_ADDR_VAR 0 22
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: LD_INT 3
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: NEG
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 3
52603: NEG
52604: PUSH
52605: LD_INT 3
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: LIST
52617: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52618: LD_ADDR_VAR 0 23
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 3
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 4
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 3
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: LIST
52661: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52662: LD_ADDR_VAR 0 24
52666: PUSH
52667: LD_INT 3
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 4
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: LIST
52702: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52703: LD_ADDR_VAR 0 25
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: LD_INT 3
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 4
52720: PUSH
52721: LD_INT 3
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: LD_INT 4
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52743: LD_ADDR_VAR 0 26
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: LD_INT 3
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: LD_INT 4
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: LD_INT 3
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: LIST
52783: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52784: LD_ADDR_VAR 0 27
52788: PUSH
52789: LD_INT 3
52791: NEG
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 3
52802: NEG
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 4
52813: NEG
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: LIST
52827: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52828: LD_ADDR_VAR 0 28
52832: PUSH
52833: LD_INT 3
52835: NEG
52836: PUSH
52837: LD_INT 3
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 3
52847: NEG
52848: PUSH
52849: LD_INT 4
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 4
52859: NEG
52860: PUSH
52861: LD_INT 3
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: LIST
52873: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52874: LD_ADDR_VAR 0 29
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 3
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 3
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 4
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 4
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 3
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: LD_INT 5
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: LD_INT 5
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: LD_INT 4
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 6
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 6
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 5
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53029: LD_ADDR_VAR 0 30
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 3
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 4
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 4
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 4
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 5
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 5
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 5
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 6
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 6
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53172: LD_ADDR_VAR 0 31
53176: PUSH
53177: LD_INT 3
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: LD_INT 3
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 4
53209: PUSH
53210: LD_INT 3
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 4
53219: PUSH
53220: LD_INT 4
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: LD_INT 4
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 5
53239: PUSH
53240: LD_INT 4
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 5
53249: PUSH
53250: LD_INT 5
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 4
53259: PUSH
53260: LD_INT 5
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 6
53269: PUSH
53270: LD_INT 5
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 6
53279: PUSH
53280: LD_INT 6
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 5
53289: PUSH
53290: LD_INT 6
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53311: LD_ADDR_VAR 0 32
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: LD_INT 3
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 3
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: LD_INT 4
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: LD_INT 4
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 3
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 5
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 5
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 4
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 6
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 6
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 5
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53454: LD_ADDR_VAR 0 33
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 3
53472: NEG
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 3
53483: NEG
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 3
53495: NEG
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 4
53506: NEG
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 4
53517: NEG
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 4
53529: NEG
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 5
53540: NEG
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 5
53551: NEG
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 5
53563: NEG
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 6
53574: NEG
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 6
53585: NEG
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53609: LD_ADDR_VAR 0 34
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: LD_INT 3
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 3
53628: NEG
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 3
53640: NEG
53641: PUSH
53642: LD_INT 3
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 3
53652: NEG
53653: PUSH
53654: LD_INT 4
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 4
53664: NEG
53665: PUSH
53666: LD_INT 3
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 4
53676: NEG
53677: PUSH
53678: LD_INT 4
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 4
53688: NEG
53689: PUSH
53690: LD_INT 5
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 5
53700: NEG
53701: PUSH
53702: LD_INT 4
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 5
53712: NEG
53713: PUSH
53714: LD_INT 5
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 5
53724: NEG
53725: PUSH
53726: LD_INT 6
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 6
53736: NEG
53737: PUSH
53738: LD_INT 5
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 6
53748: NEG
53749: PUSH
53750: LD_INT 6
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53772: LD_ADDR_VAR 0 41
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 2
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: LD_INT 3
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: LIST
53815: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53816: LD_ADDR_VAR 0 42
53820: PUSH
53821: LD_INT 2
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 2
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 3
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: LIST
53856: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53857: LD_ADDR_VAR 0 43
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: LD_INT 2
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 3
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: LD_INT 3
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: LIST
53896: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53897: LD_ADDR_VAR 0 44
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 3
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: LIST
53937: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53938: LD_ADDR_VAR 0 45
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 3
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: LIST
53981: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53982: LD_ADDR_VAR 0 46
53986: PUSH
53987: LD_INT 2
53989: NEG
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: NEG
54002: PUSH
54003: LD_INT 3
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: LD_INT 2
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: LIST
54027: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54028: LD_ADDR_VAR 0 47
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: LD_INT 3
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: LD_INT 3
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54061: LD_ADDR_VAR 0 48
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54092: LD_ADDR_VAR 0 49
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 3
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54121: LD_ADDR_VAR 0 50
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: LD_INT 3
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: LD_INT 3
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54150: LD_ADDR_VAR 0 51
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 2
54168: NEG
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54181: LD_ADDR_VAR 0 52
54185: PUSH
54186: LD_INT 3
54188: NEG
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 3
54200: NEG
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54214: LD_ADDR_VAR 0 53
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: LD_INT 3
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 3
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: LIST
54257: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54258: LD_ADDR_VAR 0 54
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 3
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 3
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: LIST
54298: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54299: LD_ADDR_VAR 0 55
54303: PUSH
54304: LD_INT 3
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 3
54316: PUSH
54317: LD_INT 3
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: PUSH
54327: LD_INT 3
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: LIST
54338: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54339: LD_ADDR_VAR 0 56
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: LD_INT 3
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 3
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: LIST
54379: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54380: LD_ADDR_VAR 0 57
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 3
54398: NEG
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 3
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: LIST
54423: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54424: LD_ADDR_VAR 0 58
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: LD_INT 3
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 3
54455: NEG
54456: PUSH
54457: LD_INT 3
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: LIST
54469: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54470: LD_ADDR_VAR 0 59
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: LIST
54513: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54514: LD_ADDR_VAR 0 60
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: LIST
54554: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54555: LD_ADDR_VAR 0 61
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54595: LD_ADDR_VAR 0 62
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: LIST
54635: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54636: LD_ADDR_VAR 0 63
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: LIST
54679: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54680: LD_ADDR_VAR 0 64
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: LD_INT 2
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: NEG
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: LIST
54725: ST_TO_ADDR
// end ; 2 :
54726: GO 57992
54728: LD_INT 2
54730: DOUBLE
54731: EQUAL
54732: IFTRUE 54736
54734: GO 57991
54736: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54737: LD_ADDR_VAR 0 29
54741: PUSH
54742: LD_INT 4
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 4
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 5
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 5
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 4
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 3
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 5
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 3
54837: PUSH
54838: LD_INT 3
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 3
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 4
54857: PUSH
54858: LD_INT 3
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 4
54867: PUSH
54868: LD_INT 4
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 3
54877: PUSH
54878: LD_INT 4
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 2
54887: PUSH
54888: LD_INT 3
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 4
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: LD_INT 4
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 4
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: LD_INT 3
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: LD_INT 4
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 5
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 5
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: LD_INT 4
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: LD_INT 3
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: LD_INT 5
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 3
55020: NEG
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 3
55031: NEG
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: NEG
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 3
55065: NEG
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 4
55076: NEG
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 4
55087: NEG
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 4
55099: NEG
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 4
55122: NEG
55123: PUSH
55124: LD_INT 4
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 4
55134: NEG
55135: PUSH
55136: LD_INT 5
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 3
55146: NEG
55147: PUSH
55148: LD_INT 4
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: LD_INT 3
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 4
55170: NEG
55171: PUSH
55172: LD_INT 3
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 5
55182: NEG
55183: PUSH
55184: LD_INT 4
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 5
55194: NEG
55195: PUSH
55196: LD_INT 5
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 3
55206: NEG
55207: PUSH
55208: LD_INT 5
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 5
55218: NEG
55219: PUSH
55220: LD_INT 3
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55275: LD_ADDR_VAR 0 30
55279: PUSH
55280: LD_INT 4
55282: PUSH
55283: LD_INT 4
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 4
55292: PUSH
55293: LD_INT 3
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 5
55302: PUSH
55303: LD_INT 4
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 5
55312: PUSH
55313: LD_INT 5
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 4
55322: PUSH
55323: LD_INT 5
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 3
55332: PUSH
55333: LD_INT 4
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 3
55342: PUSH
55343: LD_INT 3
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 5
55352: PUSH
55353: LD_INT 3
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: LD_INT 5
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 3
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: LD_INT 3
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: LD_INT 4
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 4
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 3
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: LD_INT 2
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: LD_INT 4
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 4
55465: NEG
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 4
55476: NEG
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 3
55488: NEG
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 3
55499: NEG
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 4
55510: NEG
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 5
55521: NEG
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 5
55532: NEG
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 5
55544: NEG
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 3
55556: NEG
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 3
55567: NEG
55568: PUSH
55569: LD_INT 3
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: LD_INT 4
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: LD_INT 3
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 3
55615: NEG
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 4
55627: NEG
55628: PUSH
55629: LD_INT 3
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 4
55639: NEG
55640: PUSH
55641: LD_INT 4
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: LD_INT 4
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 4
55663: NEG
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 4
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: LD_INT 5
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: LD_INT 4
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: LD_INT 3
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 3
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: LD_INT 4
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: LD_INT 5
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: LD_INT 3
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: LD_INT 5
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55822: LD_ADDR_VAR 0 31
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: LD_INT 4
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: LD_INT 4
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 5
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 5
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 4
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: LD_INT 3
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: LD_INT 5
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 3
55933: NEG
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 3
55967: NEG
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 4
55978: NEG
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 4
55989: NEG
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 4
56001: NEG
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 4
56024: NEG
56025: PUSH
56026: LD_INT 4
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 4
56036: NEG
56037: PUSH
56038: LD_INT 5
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 3
56048: NEG
56049: PUSH
56050: LD_INT 4
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: NEG
56061: PUSH
56062: LD_INT 3
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 4
56072: NEG
56073: PUSH
56074: LD_INT 3
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 5
56084: NEG
56085: PUSH
56086: LD_INT 4
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 5
56096: NEG
56097: PUSH
56098: LD_INT 5
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 3
56108: NEG
56109: PUSH
56110: LD_INT 5
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 5
56120: NEG
56121: PUSH
56122: LD_INT 3
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 3
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 4
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 3
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 3
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: LD_INT 4
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: LD_INT 4
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 4
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 4
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 5
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 5
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 4
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 3
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 3
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 3
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 5
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56372: LD_ADDR_VAR 0 32
56376: PUSH
56377: LD_INT 4
56379: NEG
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 4
56390: NEG
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 3
56402: NEG
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 3
56413: NEG
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 4
56424: NEG
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 5
56435: NEG
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 5
56446: NEG
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 5
56458: NEG
56459: PUSH
56460: LD_INT 2
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: LD_INT 3
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 3
56493: NEG
56494: PUSH
56495: LD_INT 4
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: LD_INT 3
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 3
56529: NEG
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 4
56541: NEG
56542: PUSH
56543: LD_INT 3
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 4
56553: NEG
56554: PUSH
56555: LD_INT 4
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: LD_INT 4
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 4
56577: NEG
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 4
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 5
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: LD_INT 4
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 3
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 3
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: LD_INT 4
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: LD_INT 5
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: LD_INT 5
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 3
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 4
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 4
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 3
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 4
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 4
56784: PUSH
56785: LD_INT 4
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 4
56794: PUSH
56795: LD_INT 3
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 5
56804: PUSH
56805: LD_INT 4
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 5
56814: PUSH
56815: LD_INT 5
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 4
56824: PUSH
56825: LD_INT 5
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 3
56834: PUSH
56835: LD_INT 4
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 3
56844: PUSH
56845: LD_INT 3
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 5
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 3
56864: PUSH
56865: LD_INT 5
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56919: LD_ADDR_VAR 0 33
56923: PUSH
56924: LD_INT 4
56926: NEG
56927: PUSH
56928: LD_INT 4
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 4
56938: NEG
56939: PUSH
56940: LD_INT 5
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 3
56950: NEG
56951: PUSH
56952: LD_INT 4
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 3
56962: NEG
56963: PUSH
56964: LD_INT 3
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 4
56974: NEG
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 5
56986: NEG
56987: PUSH
56988: LD_INT 4
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 5
56998: NEG
56999: PUSH
57000: LD_INT 5
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 3
57010: NEG
57011: PUSH
57012: LD_INT 5
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 5
57022: NEG
57023: PUSH
57024: LD_INT 3
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_INT 3
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 4
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 3
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 3
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: LD_INT 4
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: LD_INT 4
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 4
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 4
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 5
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 5
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 4
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 3
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 3
57208: PUSH
57209: LD_INT 2
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 5
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 3
57229: PUSH
57230: LD_INT 3
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 4
57249: PUSH
57250: LD_INT 3
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 4
57259: PUSH
57260: LD_INT 4
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: LD_INT 4
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 2
57279: PUSH
57280: LD_INT 3
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 2
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 4
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: LD_INT 4
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: LD_INT 4
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: LD_INT 3
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 4
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: LD_INT 5
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: LD_INT 5
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: LD_INT 4
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: LD_INT 3
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: PUSH
57392: LD_INT 5
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: LD_INT 3
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57457: LD_ADDR_VAR 0 34
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 4
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 5
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 4
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: LD_INT 3
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 3
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 4
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: LD_INT 5
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 2
57543: PUSH
57544: LD_INT 3
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: NEG
57555: PUSH
57556: LD_INT 5
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 3
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 3
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 4
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 4
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 3
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: LD_INT 2
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 4
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 4
57659: PUSH
57660: LD_INT 4
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 4
57669: PUSH
57670: LD_INT 3
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 5
57679: PUSH
57680: LD_INT 4
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 5
57689: PUSH
57690: LD_INT 5
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 4
57699: PUSH
57700: LD_INT 5
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 3
57709: PUSH
57710: LD_INT 4
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 3
57719: PUSH
57720: LD_INT 3
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 5
57729: PUSH
57730: LD_INT 3
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: LD_INT 5
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: LD_INT 3
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: LD_INT 3
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: LD_INT 4
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 4
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: LD_INT 3
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: LD_INT 4
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 4
57842: NEG
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 4
57853: NEG
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: NEG
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 3
57876: NEG
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 4
57887: NEG
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 5
57898: NEG
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 5
57909: NEG
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 5
57921: NEG
57922: PUSH
57923: LD_INT 2
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 3
57933: NEG
57934: PUSH
57935: LD_INT 2
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: ST_TO_ADDR
// end ; end ;
57989: GO 57992
57991: POP
// case btype of b_depot , b_warehouse :
57992: LD_VAR 0 1
57996: PUSH
57997: LD_INT 0
57999: DOUBLE
58000: EQUAL
58001: IFTRUE 58011
58003: LD_INT 1
58005: DOUBLE
58006: EQUAL
58007: IFTRUE 58011
58009: GO 58212
58011: POP
// case nation of nation_american :
58012: LD_VAR 0 5
58016: PUSH
58017: LD_INT 1
58019: DOUBLE
58020: EQUAL
58021: IFTRUE 58025
58023: GO 58081
58025: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58026: LD_ADDR_VAR 0 9
58030: PUSH
58031: LD_VAR 0 11
58035: PUSH
58036: LD_VAR 0 12
58040: PUSH
58041: LD_VAR 0 13
58045: PUSH
58046: LD_VAR 0 14
58050: PUSH
58051: LD_VAR 0 15
58055: PUSH
58056: LD_VAR 0 16
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: PUSH
58069: LD_VAR 0 4
58073: PUSH
58074: LD_INT 1
58076: PLUS
58077: ARRAY
58078: ST_TO_ADDR
58079: GO 58210
58081: LD_INT 2
58083: DOUBLE
58084: EQUAL
58085: IFTRUE 58089
58087: GO 58145
58089: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58090: LD_ADDR_VAR 0 9
58094: PUSH
58095: LD_VAR 0 17
58099: PUSH
58100: LD_VAR 0 18
58104: PUSH
58105: LD_VAR 0 19
58109: PUSH
58110: LD_VAR 0 20
58114: PUSH
58115: LD_VAR 0 21
58119: PUSH
58120: LD_VAR 0 22
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: PUSH
58133: LD_VAR 0 4
58137: PUSH
58138: LD_INT 1
58140: PLUS
58141: ARRAY
58142: ST_TO_ADDR
58143: GO 58210
58145: LD_INT 3
58147: DOUBLE
58148: EQUAL
58149: IFTRUE 58153
58151: GO 58209
58153: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58154: LD_ADDR_VAR 0 9
58158: PUSH
58159: LD_VAR 0 23
58163: PUSH
58164: LD_VAR 0 24
58168: PUSH
58169: LD_VAR 0 25
58173: PUSH
58174: LD_VAR 0 26
58178: PUSH
58179: LD_VAR 0 27
58183: PUSH
58184: LD_VAR 0 28
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: PUSH
58197: LD_VAR 0 4
58201: PUSH
58202: LD_INT 1
58204: PLUS
58205: ARRAY
58206: ST_TO_ADDR
58207: GO 58210
58209: POP
58210: GO 58765
58212: LD_INT 2
58214: DOUBLE
58215: EQUAL
58216: IFTRUE 58226
58218: LD_INT 3
58220: DOUBLE
58221: EQUAL
58222: IFTRUE 58226
58224: GO 58282
58226: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58227: LD_ADDR_VAR 0 9
58231: PUSH
58232: LD_VAR 0 29
58236: PUSH
58237: LD_VAR 0 30
58241: PUSH
58242: LD_VAR 0 31
58246: PUSH
58247: LD_VAR 0 32
58251: PUSH
58252: LD_VAR 0 33
58256: PUSH
58257: LD_VAR 0 34
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: PUSH
58270: LD_VAR 0 4
58274: PUSH
58275: LD_INT 1
58277: PLUS
58278: ARRAY
58279: ST_TO_ADDR
58280: GO 58765
58282: LD_INT 16
58284: DOUBLE
58285: EQUAL
58286: IFTRUE 58344
58288: LD_INT 17
58290: DOUBLE
58291: EQUAL
58292: IFTRUE 58344
58294: LD_INT 18
58296: DOUBLE
58297: EQUAL
58298: IFTRUE 58344
58300: LD_INT 19
58302: DOUBLE
58303: EQUAL
58304: IFTRUE 58344
58306: LD_INT 22
58308: DOUBLE
58309: EQUAL
58310: IFTRUE 58344
58312: LD_INT 20
58314: DOUBLE
58315: EQUAL
58316: IFTRUE 58344
58318: LD_INT 21
58320: DOUBLE
58321: EQUAL
58322: IFTRUE 58344
58324: LD_INT 23
58326: DOUBLE
58327: EQUAL
58328: IFTRUE 58344
58330: LD_INT 24
58332: DOUBLE
58333: EQUAL
58334: IFTRUE 58344
58336: LD_INT 25
58338: DOUBLE
58339: EQUAL
58340: IFTRUE 58344
58342: GO 58400
58344: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58345: LD_ADDR_VAR 0 9
58349: PUSH
58350: LD_VAR 0 35
58354: PUSH
58355: LD_VAR 0 36
58359: PUSH
58360: LD_VAR 0 37
58364: PUSH
58365: LD_VAR 0 38
58369: PUSH
58370: LD_VAR 0 39
58374: PUSH
58375: LD_VAR 0 40
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: PUSH
58388: LD_VAR 0 4
58392: PUSH
58393: LD_INT 1
58395: PLUS
58396: ARRAY
58397: ST_TO_ADDR
58398: GO 58765
58400: LD_INT 6
58402: DOUBLE
58403: EQUAL
58404: IFTRUE 58456
58406: LD_INT 7
58408: DOUBLE
58409: EQUAL
58410: IFTRUE 58456
58412: LD_INT 8
58414: DOUBLE
58415: EQUAL
58416: IFTRUE 58456
58418: LD_INT 13
58420: DOUBLE
58421: EQUAL
58422: IFTRUE 58456
58424: LD_INT 12
58426: DOUBLE
58427: EQUAL
58428: IFTRUE 58456
58430: LD_INT 15
58432: DOUBLE
58433: EQUAL
58434: IFTRUE 58456
58436: LD_INT 11
58438: DOUBLE
58439: EQUAL
58440: IFTRUE 58456
58442: LD_INT 14
58444: DOUBLE
58445: EQUAL
58446: IFTRUE 58456
58448: LD_INT 10
58450: DOUBLE
58451: EQUAL
58452: IFTRUE 58456
58454: GO 58512
58456: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58457: LD_ADDR_VAR 0 9
58461: PUSH
58462: LD_VAR 0 41
58466: PUSH
58467: LD_VAR 0 42
58471: PUSH
58472: LD_VAR 0 43
58476: PUSH
58477: LD_VAR 0 44
58481: PUSH
58482: LD_VAR 0 45
58486: PUSH
58487: LD_VAR 0 46
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: PUSH
58500: LD_VAR 0 4
58504: PUSH
58505: LD_INT 1
58507: PLUS
58508: ARRAY
58509: ST_TO_ADDR
58510: GO 58765
58512: LD_INT 36
58514: DOUBLE
58515: EQUAL
58516: IFTRUE 58520
58518: GO 58576
58520: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58521: LD_ADDR_VAR 0 9
58525: PUSH
58526: LD_VAR 0 47
58530: PUSH
58531: LD_VAR 0 48
58535: PUSH
58536: LD_VAR 0 49
58540: PUSH
58541: LD_VAR 0 50
58545: PUSH
58546: LD_VAR 0 51
58550: PUSH
58551: LD_VAR 0 52
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: PUSH
58564: LD_VAR 0 4
58568: PUSH
58569: LD_INT 1
58571: PLUS
58572: ARRAY
58573: ST_TO_ADDR
58574: GO 58765
58576: LD_INT 4
58578: DOUBLE
58579: EQUAL
58580: IFTRUE 58602
58582: LD_INT 5
58584: DOUBLE
58585: EQUAL
58586: IFTRUE 58602
58588: LD_INT 34
58590: DOUBLE
58591: EQUAL
58592: IFTRUE 58602
58594: LD_INT 37
58596: DOUBLE
58597: EQUAL
58598: IFTRUE 58602
58600: GO 58658
58602: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58603: LD_ADDR_VAR 0 9
58607: PUSH
58608: LD_VAR 0 53
58612: PUSH
58613: LD_VAR 0 54
58617: PUSH
58618: LD_VAR 0 55
58622: PUSH
58623: LD_VAR 0 56
58627: PUSH
58628: LD_VAR 0 57
58632: PUSH
58633: LD_VAR 0 58
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: PUSH
58646: LD_VAR 0 4
58650: PUSH
58651: LD_INT 1
58653: PLUS
58654: ARRAY
58655: ST_TO_ADDR
58656: GO 58765
58658: LD_INT 31
58660: DOUBLE
58661: EQUAL
58662: IFTRUE 58708
58664: LD_INT 32
58666: DOUBLE
58667: EQUAL
58668: IFTRUE 58708
58670: LD_INT 33
58672: DOUBLE
58673: EQUAL
58674: IFTRUE 58708
58676: LD_INT 27
58678: DOUBLE
58679: EQUAL
58680: IFTRUE 58708
58682: LD_INT 26
58684: DOUBLE
58685: EQUAL
58686: IFTRUE 58708
58688: LD_INT 28
58690: DOUBLE
58691: EQUAL
58692: IFTRUE 58708
58694: LD_INT 29
58696: DOUBLE
58697: EQUAL
58698: IFTRUE 58708
58700: LD_INT 30
58702: DOUBLE
58703: EQUAL
58704: IFTRUE 58708
58706: GO 58764
58708: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58709: LD_ADDR_VAR 0 9
58713: PUSH
58714: LD_VAR 0 59
58718: PUSH
58719: LD_VAR 0 60
58723: PUSH
58724: LD_VAR 0 61
58728: PUSH
58729: LD_VAR 0 62
58733: PUSH
58734: LD_VAR 0 63
58738: PUSH
58739: LD_VAR 0 64
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: PUSH
58752: LD_VAR 0 4
58756: PUSH
58757: LD_INT 1
58759: PLUS
58760: ARRAY
58761: ST_TO_ADDR
58762: GO 58765
58764: POP
// temp_list2 = [ ] ;
58765: LD_ADDR_VAR 0 10
58769: PUSH
58770: EMPTY
58771: ST_TO_ADDR
// for i in temp_list do
58772: LD_ADDR_VAR 0 8
58776: PUSH
58777: LD_VAR 0 9
58781: PUSH
58782: FOR_IN
58783: IFFALSE 58835
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58785: LD_ADDR_VAR 0 10
58789: PUSH
58790: LD_VAR 0 10
58794: PUSH
58795: LD_VAR 0 8
58799: PUSH
58800: LD_INT 1
58802: ARRAY
58803: PUSH
58804: LD_VAR 0 2
58808: PLUS
58809: PUSH
58810: LD_VAR 0 8
58814: PUSH
58815: LD_INT 2
58817: ARRAY
58818: PUSH
58819: LD_VAR 0 3
58823: PLUS
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: EMPTY
58830: LIST
58831: ADD
58832: ST_TO_ADDR
58833: GO 58782
58835: POP
58836: POP
// result = temp_list2 ;
58837: LD_ADDR_VAR 0 7
58841: PUSH
58842: LD_VAR 0 10
58846: ST_TO_ADDR
// end ;
58847: LD_VAR 0 7
58851: RET
// export function EnemyInRange ( unit , dist ) ; begin
58852: LD_INT 0
58854: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58855: LD_ADDR_VAR 0 3
58859: PUSH
58860: LD_VAR 0 1
58864: PPUSH
58865: CALL_OW 255
58869: PPUSH
58870: LD_VAR 0 1
58874: PPUSH
58875: CALL_OW 250
58879: PPUSH
58880: LD_VAR 0 1
58884: PPUSH
58885: CALL_OW 251
58889: PPUSH
58890: LD_VAR 0 2
58894: PPUSH
58895: CALL 32623 0 4
58899: PUSH
58900: LD_INT 4
58902: ARRAY
58903: ST_TO_ADDR
// end ;
58904: LD_VAR 0 3
58908: RET
// export function PlayerSeeMe ( unit ) ; begin
58909: LD_INT 0
58911: PPUSH
// result := See ( your_side , unit ) ;
58912: LD_ADDR_VAR 0 2
58916: PUSH
58917: LD_OWVAR 2
58921: PPUSH
58922: LD_VAR 0 1
58926: PPUSH
58927: CALL_OW 292
58931: ST_TO_ADDR
// end ;
58932: LD_VAR 0 2
58936: RET
// export function ReverseDir ( unit ) ; begin
58937: LD_INT 0
58939: PPUSH
// if not unit then
58940: LD_VAR 0 1
58944: NOT
58945: IFFALSE 58949
// exit ;
58947: GO 58972
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58949: LD_ADDR_VAR 0 2
58953: PUSH
58954: LD_VAR 0 1
58958: PPUSH
58959: CALL_OW 254
58963: PUSH
58964: LD_INT 3
58966: PLUS
58967: PUSH
58968: LD_INT 6
58970: MOD
58971: ST_TO_ADDR
// end ;
58972: LD_VAR 0 2
58976: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58977: LD_INT 0
58979: PPUSH
58980: PPUSH
58981: PPUSH
58982: PPUSH
58983: PPUSH
// if not hexes then
58984: LD_VAR 0 2
58988: NOT
58989: IFFALSE 58993
// exit ;
58991: GO 59141
// dist := 9999 ;
58993: LD_ADDR_VAR 0 5
58997: PUSH
58998: LD_INT 9999
59000: ST_TO_ADDR
// for i = 1 to hexes do
59001: LD_ADDR_VAR 0 4
59005: PUSH
59006: DOUBLE
59007: LD_INT 1
59009: DEC
59010: ST_TO_ADDR
59011: LD_VAR 0 2
59015: PUSH
59016: FOR_TO
59017: IFFALSE 59129
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59019: LD_VAR 0 1
59023: PPUSH
59024: LD_VAR 0 2
59028: PUSH
59029: LD_VAR 0 4
59033: ARRAY
59034: PUSH
59035: LD_INT 1
59037: ARRAY
59038: PPUSH
59039: LD_VAR 0 2
59043: PUSH
59044: LD_VAR 0 4
59048: ARRAY
59049: PUSH
59050: LD_INT 2
59052: ARRAY
59053: PPUSH
59054: CALL_OW 297
59058: PUSH
59059: LD_VAR 0 5
59063: LESS
59064: IFFALSE 59127
// begin hex := hexes [ i ] ;
59066: LD_ADDR_VAR 0 7
59070: PUSH
59071: LD_VAR 0 2
59075: PUSH
59076: LD_VAR 0 4
59080: ARRAY
59081: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59082: LD_ADDR_VAR 0 5
59086: PUSH
59087: LD_VAR 0 1
59091: PPUSH
59092: LD_VAR 0 2
59096: PUSH
59097: LD_VAR 0 4
59101: ARRAY
59102: PUSH
59103: LD_INT 1
59105: ARRAY
59106: PPUSH
59107: LD_VAR 0 2
59111: PUSH
59112: LD_VAR 0 4
59116: ARRAY
59117: PUSH
59118: LD_INT 2
59120: ARRAY
59121: PPUSH
59122: CALL_OW 297
59126: ST_TO_ADDR
// end ; end ;
59127: GO 59016
59129: POP
59130: POP
// result := hex ;
59131: LD_ADDR_VAR 0 3
59135: PUSH
59136: LD_VAR 0 7
59140: ST_TO_ADDR
// end ;
59141: LD_VAR 0 3
59145: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59146: LD_INT 0
59148: PPUSH
59149: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59150: LD_VAR 0 1
59154: NOT
59155: PUSH
59156: LD_VAR 0 1
59160: PUSH
59161: LD_INT 21
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 23
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PPUSH
59185: CALL_OW 69
59189: IN
59190: NOT
59191: OR
59192: IFFALSE 59196
// exit ;
59194: GO 59243
// for i = 1 to 3 do
59196: LD_ADDR_VAR 0 3
59200: PUSH
59201: DOUBLE
59202: LD_INT 1
59204: DEC
59205: ST_TO_ADDR
59206: LD_INT 3
59208: PUSH
59209: FOR_TO
59210: IFFALSE 59241
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59212: LD_VAR 0 1
59216: PPUSH
59217: CALL_OW 250
59221: PPUSH
59222: LD_VAR 0 1
59226: PPUSH
59227: CALL_OW 251
59231: PPUSH
59232: LD_INT 1
59234: PPUSH
59235: CALL_OW 453
59239: GO 59209
59241: POP
59242: POP
// end ;
59243: LD_VAR 0 2
59247: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59248: LD_INT 0
59250: PPUSH
59251: PPUSH
59252: PPUSH
59253: PPUSH
59254: PPUSH
59255: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59256: LD_VAR 0 1
59260: NOT
59261: PUSH
59262: LD_VAR 0 2
59266: NOT
59267: OR
59268: PUSH
59269: LD_VAR 0 1
59273: PPUSH
59274: CALL_OW 314
59278: OR
59279: IFFALSE 59283
// exit ;
59281: GO 59724
// x := GetX ( enemy_unit ) ;
59283: LD_ADDR_VAR 0 7
59287: PUSH
59288: LD_VAR 0 2
59292: PPUSH
59293: CALL_OW 250
59297: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59298: LD_ADDR_VAR 0 8
59302: PUSH
59303: LD_VAR 0 2
59307: PPUSH
59308: CALL_OW 251
59312: ST_TO_ADDR
// if not x or not y then
59313: LD_VAR 0 7
59317: NOT
59318: PUSH
59319: LD_VAR 0 8
59323: NOT
59324: OR
59325: IFFALSE 59329
// exit ;
59327: GO 59724
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59329: LD_ADDR_VAR 0 6
59333: PUSH
59334: LD_VAR 0 7
59338: PPUSH
59339: LD_INT 0
59341: PPUSH
59342: LD_INT 4
59344: PPUSH
59345: CALL_OW 272
59349: PUSH
59350: LD_VAR 0 8
59354: PPUSH
59355: LD_INT 0
59357: PPUSH
59358: LD_INT 4
59360: PPUSH
59361: CALL_OW 273
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_VAR 0 7
59374: PPUSH
59375: LD_INT 1
59377: PPUSH
59378: LD_INT 4
59380: PPUSH
59381: CALL_OW 272
59385: PUSH
59386: LD_VAR 0 8
59390: PPUSH
59391: LD_INT 1
59393: PPUSH
59394: LD_INT 4
59396: PPUSH
59397: CALL_OW 273
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_VAR 0 7
59410: PPUSH
59411: LD_INT 2
59413: PPUSH
59414: LD_INT 4
59416: PPUSH
59417: CALL_OW 272
59421: PUSH
59422: LD_VAR 0 8
59426: PPUSH
59427: LD_INT 2
59429: PPUSH
59430: LD_INT 4
59432: PPUSH
59433: CALL_OW 273
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_VAR 0 7
59446: PPUSH
59447: LD_INT 3
59449: PPUSH
59450: LD_INT 4
59452: PPUSH
59453: CALL_OW 272
59457: PUSH
59458: LD_VAR 0 8
59462: PPUSH
59463: LD_INT 3
59465: PPUSH
59466: LD_INT 4
59468: PPUSH
59469: CALL_OW 273
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_VAR 0 7
59482: PPUSH
59483: LD_INT 4
59485: PPUSH
59486: LD_INT 4
59488: PPUSH
59489: CALL_OW 272
59493: PUSH
59494: LD_VAR 0 8
59498: PPUSH
59499: LD_INT 4
59501: PPUSH
59502: LD_INT 4
59504: PPUSH
59505: CALL_OW 273
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_VAR 0 7
59518: PPUSH
59519: LD_INT 5
59521: PPUSH
59522: LD_INT 4
59524: PPUSH
59525: CALL_OW 272
59529: PUSH
59530: LD_VAR 0 8
59534: PPUSH
59535: LD_INT 5
59537: PPUSH
59538: LD_INT 4
59540: PPUSH
59541: CALL_OW 273
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: ST_TO_ADDR
// for i = tmp downto 1 do
59558: LD_ADDR_VAR 0 4
59562: PUSH
59563: DOUBLE
59564: LD_VAR 0 6
59568: INC
59569: ST_TO_ADDR
59570: LD_INT 1
59572: PUSH
59573: FOR_DOWNTO
59574: IFFALSE 59675
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59576: LD_VAR 0 6
59580: PUSH
59581: LD_VAR 0 4
59585: ARRAY
59586: PUSH
59587: LD_INT 1
59589: ARRAY
59590: PPUSH
59591: LD_VAR 0 6
59595: PUSH
59596: LD_VAR 0 4
59600: ARRAY
59601: PUSH
59602: LD_INT 2
59604: ARRAY
59605: PPUSH
59606: CALL_OW 488
59610: NOT
59611: PUSH
59612: LD_VAR 0 6
59616: PUSH
59617: LD_VAR 0 4
59621: ARRAY
59622: PUSH
59623: LD_INT 1
59625: ARRAY
59626: PPUSH
59627: LD_VAR 0 6
59631: PUSH
59632: LD_VAR 0 4
59636: ARRAY
59637: PUSH
59638: LD_INT 2
59640: ARRAY
59641: PPUSH
59642: CALL_OW 428
59646: PUSH
59647: LD_INT 0
59649: NONEQUAL
59650: OR
59651: IFFALSE 59673
// tmp := Delete ( tmp , i ) ;
59653: LD_ADDR_VAR 0 6
59657: PUSH
59658: LD_VAR 0 6
59662: PPUSH
59663: LD_VAR 0 4
59667: PPUSH
59668: CALL_OW 3
59672: ST_TO_ADDR
59673: GO 59573
59675: POP
59676: POP
// j := GetClosestHex ( unit , tmp ) ;
59677: LD_ADDR_VAR 0 5
59681: PUSH
59682: LD_VAR 0 1
59686: PPUSH
59687: LD_VAR 0 6
59691: PPUSH
59692: CALL 58977 0 2
59696: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59697: LD_VAR 0 1
59701: PPUSH
59702: LD_VAR 0 5
59706: PUSH
59707: LD_INT 1
59709: ARRAY
59710: PPUSH
59711: LD_VAR 0 5
59715: PUSH
59716: LD_INT 2
59718: ARRAY
59719: PPUSH
59720: CALL_OW 111
// end ;
59724: LD_VAR 0 3
59728: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59729: LD_INT 0
59731: PPUSH
59732: PPUSH
59733: PPUSH
// uc_side = 0 ;
59734: LD_ADDR_OWVAR 20
59738: PUSH
59739: LD_INT 0
59741: ST_TO_ADDR
// uc_nation = 0 ;
59742: LD_ADDR_OWVAR 21
59746: PUSH
59747: LD_INT 0
59749: ST_TO_ADDR
// InitHc_All ( ) ;
59750: CALL_OW 584
// InitVc ;
59754: CALL_OW 20
// if mastodonts then
59758: LD_VAR 0 6
59762: IFFALSE 59829
// for i = 1 to mastodonts do
59764: LD_ADDR_VAR 0 11
59768: PUSH
59769: DOUBLE
59770: LD_INT 1
59772: DEC
59773: ST_TO_ADDR
59774: LD_VAR 0 6
59778: PUSH
59779: FOR_TO
59780: IFFALSE 59827
// begin vc_chassis := 31 ;
59782: LD_ADDR_OWVAR 37
59786: PUSH
59787: LD_INT 31
59789: ST_TO_ADDR
// vc_control := control_rider ;
59790: LD_ADDR_OWVAR 38
59794: PUSH
59795: LD_INT 4
59797: ST_TO_ADDR
// animal := CreateVehicle ;
59798: LD_ADDR_VAR 0 12
59802: PUSH
59803: CALL_OW 45
59807: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59808: LD_VAR 0 12
59812: PPUSH
59813: LD_VAR 0 8
59817: PPUSH
59818: LD_INT 0
59820: PPUSH
59821: CALL 62017 0 3
// end ;
59825: GO 59779
59827: POP
59828: POP
// if horses then
59829: LD_VAR 0 5
59833: IFFALSE 59900
// for i = 1 to horses do
59835: LD_ADDR_VAR 0 11
59839: PUSH
59840: DOUBLE
59841: LD_INT 1
59843: DEC
59844: ST_TO_ADDR
59845: LD_VAR 0 5
59849: PUSH
59850: FOR_TO
59851: IFFALSE 59898
// begin hc_class := 21 ;
59853: LD_ADDR_OWVAR 28
59857: PUSH
59858: LD_INT 21
59860: ST_TO_ADDR
// hc_gallery :=  ;
59861: LD_ADDR_OWVAR 33
59865: PUSH
59866: LD_STRING 
59868: ST_TO_ADDR
// animal := CreateHuman ;
59869: LD_ADDR_VAR 0 12
59873: PUSH
59874: CALL_OW 44
59878: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59879: LD_VAR 0 12
59883: PPUSH
59884: LD_VAR 0 8
59888: PPUSH
59889: LD_INT 0
59891: PPUSH
59892: CALL 62017 0 3
// end ;
59896: GO 59850
59898: POP
59899: POP
// if birds then
59900: LD_VAR 0 1
59904: IFFALSE 59971
// for i = 1 to birds do
59906: LD_ADDR_VAR 0 11
59910: PUSH
59911: DOUBLE
59912: LD_INT 1
59914: DEC
59915: ST_TO_ADDR
59916: LD_VAR 0 1
59920: PUSH
59921: FOR_TO
59922: IFFALSE 59969
// begin hc_class = 18 ;
59924: LD_ADDR_OWVAR 28
59928: PUSH
59929: LD_INT 18
59931: ST_TO_ADDR
// hc_gallery =  ;
59932: LD_ADDR_OWVAR 33
59936: PUSH
59937: LD_STRING 
59939: ST_TO_ADDR
// animal := CreateHuman ;
59940: LD_ADDR_VAR 0 12
59944: PUSH
59945: CALL_OW 44
59949: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59950: LD_VAR 0 12
59954: PPUSH
59955: LD_VAR 0 8
59959: PPUSH
59960: LD_INT 0
59962: PPUSH
59963: CALL 62017 0 3
// end ;
59967: GO 59921
59969: POP
59970: POP
// if tigers then
59971: LD_VAR 0 2
59975: IFFALSE 60059
// for i = 1 to tigers do
59977: LD_ADDR_VAR 0 11
59981: PUSH
59982: DOUBLE
59983: LD_INT 1
59985: DEC
59986: ST_TO_ADDR
59987: LD_VAR 0 2
59991: PUSH
59992: FOR_TO
59993: IFFALSE 60057
// begin hc_class = class_tiger ;
59995: LD_ADDR_OWVAR 28
59999: PUSH
60000: LD_INT 14
60002: ST_TO_ADDR
// hc_gallery =  ;
60003: LD_ADDR_OWVAR 33
60007: PUSH
60008: LD_STRING 
60010: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60011: LD_ADDR_OWVAR 35
60015: PUSH
60016: LD_INT 7
60018: NEG
60019: PPUSH
60020: LD_INT 7
60022: PPUSH
60023: CALL_OW 12
60027: ST_TO_ADDR
// animal := CreateHuman ;
60028: LD_ADDR_VAR 0 12
60032: PUSH
60033: CALL_OW 44
60037: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60038: LD_VAR 0 12
60042: PPUSH
60043: LD_VAR 0 8
60047: PPUSH
60048: LD_INT 0
60050: PPUSH
60051: CALL 62017 0 3
// end ;
60055: GO 59992
60057: POP
60058: POP
// if apemans then
60059: LD_VAR 0 3
60063: IFFALSE 60186
// for i = 1 to apemans do
60065: LD_ADDR_VAR 0 11
60069: PUSH
60070: DOUBLE
60071: LD_INT 1
60073: DEC
60074: ST_TO_ADDR
60075: LD_VAR 0 3
60079: PUSH
60080: FOR_TO
60081: IFFALSE 60184
// begin hc_class = class_apeman ;
60083: LD_ADDR_OWVAR 28
60087: PUSH
60088: LD_INT 12
60090: ST_TO_ADDR
// hc_gallery =  ;
60091: LD_ADDR_OWVAR 33
60095: PUSH
60096: LD_STRING 
60098: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
60099: LD_ADDR_OWVAR 35
60103: PUSH
60104: LD_INT 5
60106: NEG
60107: PPUSH
60108: LD_INT 5
60110: PPUSH
60111: CALL_OW 12
60115: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60116: LD_ADDR_OWVAR 31
60120: PUSH
60121: LD_INT 1
60123: PPUSH
60124: LD_INT 3
60126: PPUSH
60127: CALL_OW 12
60131: PUSH
60132: LD_INT 1
60134: PPUSH
60135: LD_INT 3
60137: PPUSH
60138: CALL_OW 12
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: ST_TO_ADDR
// animal := CreateHuman ;
60155: LD_ADDR_VAR 0 12
60159: PUSH
60160: CALL_OW 44
60164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60165: LD_VAR 0 12
60169: PPUSH
60170: LD_VAR 0 8
60174: PPUSH
60175: LD_INT 0
60177: PPUSH
60178: CALL 62017 0 3
// end ;
60182: GO 60080
60184: POP
60185: POP
// if enchidnas then
60186: LD_VAR 0 4
60190: IFFALSE 60257
// for i = 1 to enchidnas do
60192: LD_ADDR_VAR 0 11
60196: PUSH
60197: DOUBLE
60198: LD_INT 1
60200: DEC
60201: ST_TO_ADDR
60202: LD_VAR 0 4
60206: PUSH
60207: FOR_TO
60208: IFFALSE 60255
// begin hc_class = 13 ;
60210: LD_ADDR_OWVAR 28
60214: PUSH
60215: LD_INT 13
60217: ST_TO_ADDR
// hc_gallery =  ;
60218: LD_ADDR_OWVAR 33
60222: PUSH
60223: LD_STRING 
60225: ST_TO_ADDR
// animal := CreateHuman ;
60226: LD_ADDR_VAR 0 12
60230: PUSH
60231: CALL_OW 44
60235: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60236: LD_VAR 0 12
60240: PPUSH
60241: LD_VAR 0 8
60245: PPUSH
60246: LD_INT 0
60248: PPUSH
60249: CALL 62017 0 3
// end ;
60253: GO 60207
60255: POP
60256: POP
// if fishes then
60257: LD_VAR 0 7
60261: IFFALSE 60328
// for i = 1 to fishes do
60263: LD_ADDR_VAR 0 11
60267: PUSH
60268: DOUBLE
60269: LD_INT 1
60271: DEC
60272: ST_TO_ADDR
60273: LD_VAR 0 7
60277: PUSH
60278: FOR_TO
60279: IFFALSE 60326
// begin hc_class = 20 ;
60281: LD_ADDR_OWVAR 28
60285: PUSH
60286: LD_INT 20
60288: ST_TO_ADDR
// hc_gallery =  ;
60289: LD_ADDR_OWVAR 33
60293: PUSH
60294: LD_STRING 
60296: ST_TO_ADDR
// animal := CreateHuman ;
60297: LD_ADDR_VAR 0 12
60301: PUSH
60302: CALL_OW 44
60306: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60307: LD_VAR 0 12
60311: PPUSH
60312: LD_VAR 0 9
60316: PPUSH
60317: LD_INT 0
60319: PPUSH
60320: CALL 62017 0 3
// end ;
60324: GO 60278
60326: POP
60327: POP
// end ;
60328: LD_VAR 0 10
60332: RET
// export function WantHeal ( sci , unit ) ; begin
60333: LD_INT 0
60335: PPUSH
// if GetTaskList ( sci ) > 0 then
60336: LD_VAR 0 1
60340: PPUSH
60341: CALL_OW 437
60345: PUSH
60346: LD_INT 0
60348: GREATER
60349: IFFALSE 60419
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60351: LD_VAR 0 1
60355: PPUSH
60356: CALL_OW 437
60360: PUSH
60361: LD_INT 1
60363: ARRAY
60364: PUSH
60365: LD_INT 1
60367: ARRAY
60368: PUSH
60369: LD_STRING l
60371: EQUAL
60372: PUSH
60373: LD_VAR 0 1
60377: PPUSH
60378: CALL_OW 437
60382: PUSH
60383: LD_INT 1
60385: ARRAY
60386: PUSH
60387: LD_INT 4
60389: ARRAY
60390: PUSH
60391: LD_VAR 0 2
60395: EQUAL
60396: AND
60397: IFFALSE 60409
// result := true else
60399: LD_ADDR_VAR 0 3
60403: PUSH
60404: LD_INT 1
60406: ST_TO_ADDR
60407: GO 60417
// result := false ;
60409: LD_ADDR_VAR 0 3
60413: PUSH
60414: LD_INT 0
60416: ST_TO_ADDR
// end else
60417: GO 60427
// result := false ;
60419: LD_ADDR_VAR 0 3
60423: PUSH
60424: LD_INT 0
60426: ST_TO_ADDR
// end ;
60427: LD_VAR 0 3
60431: RET
// export function HealTarget ( sci ) ; begin
60432: LD_INT 0
60434: PPUSH
// if not sci then
60435: LD_VAR 0 1
60439: NOT
60440: IFFALSE 60444
// exit ;
60442: GO 60509
// result := 0 ;
60444: LD_ADDR_VAR 0 2
60448: PUSH
60449: LD_INT 0
60451: ST_TO_ADDR
// if GetTaskList ( sci ) then
60452: LD_VAR 0 1
60456: PPUSH
60457: CALL_OW 437
60461: IFFALSE 60509
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60463: LD_VAR 0 1
60467: PPUSH
60468: CALL_OW 437
60472: PUSH
60473: LD_INT 1
60475: ARRAY
60476: PUSH
60477: LD_INT 1
60479: ARRAY
60480: PUSH
60481: LD_STRING l
60483: EQUAL
60484: IFFALSE 60509
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60486: LD_ADDR_VAR 0 2
60490: PUSH
60491: LD_VAR 0 1
60495: PPUSH
60496: CALL_OW 437
60500: PUSH
60501: LD_INT 1
60503: ARRAY
60504: PUSH
60505: LD_INT 4
60507: ARRAY
60508: ST_TO_ADDR
// end ;
60509: LD_VAR 0 2
60513: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60514: LD_INT 0
60516: PPUSH
60517: PPUSH
60518: PPUSH
60519: PPUSH
// if not base_units then
60520: LD_VAR 0 1
60524: NOT
60525: IFFALSE 60529
// exit ;
60527: GO 60616
// result := false ;
60529: LD_ADDR_VAR 0 2
60533: PUSH
60534: LD_INT 0
60536: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60537: LD_ADDR_VAR 0 5
60541: PUSH
60542: LD_VAR 0 1
60546: PPUSH
60547: LD_INT 21
60549: PUSH
60550: LD_INT 3
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PPUSH
60557: CALL_OW 72
60561: ST_TO_ADDR
// if not tmp then
60562: LD_VAR 0 5
60566: NOT
60567: IFFALSE 60571
// exit ;
60569: GO 60616
// for i in tmp do
60571: LD_ADDR_VAR 0 3
60575: PUSH
60576: LD_VAR 0 5
60580: PUSH
60581: FOR_IN
60582: IFFALSE 60614
// begin result := EnemyInRange ( i , 22 ) ;
60584: LD_ADDR_VAR 0 2
60588: PUSH
60589: LD_VAR 0 3
60593: PPUSH
60594: LD_INT 22
60596: PPUSH
60597: CALL 58852 0 2
60601: ST_TO_ADDR
// if result then
60602: LD_VAR 0 2
60606: IFFALSE 60612
// exit ;
60608: POP
60609: POP
60610: GO 60616
// end ;
60612: GO 60581
60614: POP
60615: POP
// end ;
60616: LD_VAR 0 2
60620: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60621: LD_INT 0
60623: PPUSH
60624: PPUSH
// if not units then
60625: LD_VAR 0 1
60629: NOT
60630: IFFALSE 60634
// exit ;
60632: GO 60704
// result := [ ] ;
60634: LD_ADDR_VAR 0 3
60638: PUSH
60639: EMPTY
60640: ST_TO_ADDR
// for i in units do
60641: LD_ADDR_VAR 0 4
60645: PUSH
60646: LD_VAR 0 1
60650: PUSH
60651: FOR_IN
60652: IFFALSE 60702
// if GetTag ( i ) = tag then
60654: LD_VAR 0 4
60658: PPUSH
60659: CALL_OW 110
60663: PUSH
60664: LD_VAR 0 2
60668: EQUAL
60669: IFFALSE 60700
// result := Insert ( result , result + 1 , i ) ;
60671: LD_ADDR_VAR 0 3
60675: PUSH
60676: LD_VAR 0 3
60680: PPUSH
60681: LD_VAR 0 3
60685: PUSH
60686: LD_INT 1
60688: PLUS
60689: PPUSH
60690: LD_VAR 0 4
60694: PPUSH
60695: CALL_OW 2
60699: ST_TO_ADDR
60700: GO 60651
60702: POP
60703: POP
// end ;
60704: LD_VAR 0 3
60708: RET
// export function IsDriver ( un ) ; begin
60709: LD_INT 0
60711: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60712: LD_ADDR_VAR 0 2
60716: PUSH
60717: LD_VAR 0 1
60721: PUSH
60722: LD_INT 55
60724: PUSH
60725: EMPTY
60726: LIST
60727: PPUSH
60728: CALL_OW 69
60732: IN
60733: ST_TO_ADDR
// end ;
60734: LD_VAR 0 2
60738: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60739: LD_INT 0
60741: PPUSH
60742: PPUSH
// list := [ ] ;
60743: LD_ADDR_VAR 0 5
60747: PUSH
60748: EMPTY
60749: ST_TO_ADDR
// case d of 0 :
60750: LD_VAR 0 3
60754: PUSH
60755: LD_INT 0
60757: DOUBLE
60758: EQUAL
60759: IFTRUE 60763
60761: GO 60896
60763: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60764: LD_ADDR_VAR 0 5
60768: PUSH
60769: LD_VAR 0 1
60773: PUSH
60774: LD_INT 4
60776: MINUS
60777: PUSH
60778: LD_VAR 0 2
60782: PUSH
60783: LD_INT 4
60785: MINUS
60786: PUSH
60787: LD_INT 2
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: LIST
60794: PUSH
60795: LD_VAR 0 1
60799: PUSH
60800: LD_INT 3
60802: MINUS
60803: PUSH
60804: LD_VAR 0 2
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: LIST
60816: PUSH
60817: LD_VAR 0 1
60821: PUSH
60822: LD_INT 4
60824: PLUS
60825: PUSH
60826: LD_VAR 0 2
60830: PUSH
60831: LD_INT 4
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: LIST
60838: PUSH
60839: LD_VAR 0 1
60843: PUSH
60844: LD_INT 3
60846: PLUS
60847: PUSH
60848: LD_VAR 0 2
60852: PUSH
60853: LD_INT 3
60855: PLUS
60856: PUSH
60857: LD_INT 5
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: PUSH
60865: LD_VAR 0 1
60869: PUSH
60870: LD_VAR 0 2
60874: PUSH
60875: LD_INT 4
60877: PLUS
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: LIST
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: ST_TO_ADDR
// end ; 1 :
60894: GO 61594
60896: LD_INT 1
60898: DOUBLE
60899: EQUAL
60900: IFTRUE 60904
60902: GO 61037
60904: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60905: LD_ADDR_VAR 0 5
60909: PUSH
60910: LD_VAR 0 1
60914: PUSH
60915: LD_VAR 0 2
60919: PUSH
60920: LD_INT 4
60922: MINUS
60923: PUSH
60924: LD_INT 3
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: LIST
60931: PUSH
60932: LD_VAR 0 1
60936: PUSH
60937: LD_INT 3
60939: MINUS
60940: PUSH
60941: LD_VAR 0 2
60945: PUSH
60946: LD_INT 3
60948: MINUS
60949: PUSH
60950: LD_INT 2
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: LIST
60957: PUSH
60958: LD_VAR 0 1
60962: PUSH
60963: LD_INT 4
60965: MINUS
60966: PUSH
60967: LD_VAR 0 2
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: LIST
60979: PUSH
60980: LD_VAR 0 1
60984: PUSH
60985: LD_VAR 0 2
60989: PUSH
60990: LD_INT 3
60992: PLUS
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: LIST
61001: PUSH
61002: LD_VAR 0 1
61006: PUSH
61007: LD_INT 4
61009: PLUS
61010: PUSH
61011: LD_VAR 0 2
61015: PUSH
61016: LD_INT 4
61018: PLUS
61019: PUSH
61020: LD_INT 5
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: LIST
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: ST_TO_ADDR
// end ; 2 :
61035: GO 61594
61037: LD_INT 2
61039: DOUBLE
61040: EQUAL
61041: IFTRUE 61045
61043: GO 61174
61045: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61046: LD_ADDR_VAR 0 5
61050: PUSH
61051: LD_VAR 0 1
61055: PUSH
61056: LD_VAR 0 2
61060: PUSH
61061: LD_INT 3
61063: MINUS
61064: PUSH
61065: LD_INT 3
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: LIST
61072: PUSH
61073: LD_VAR 0 1
61077: PUSH
61078: LD_INT 4
61080: PLUS
61081: PUSH
61082: LD_VAR 0 2
61086: PUSH
61087: LD_INT 4
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: LIST
61094: PUSH
61095: LD_VAR 0 1
61099: PUSH
61100: LD_VAR 0 2
61104: PUSH
61105: LD_INT 4
61107: PLUS
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: LIST
61116: PUSH
61117: LD_VAR 0 1
61121: PUSH
61122: LD_INT 3
61124: MINUS
61125: PUSH
61126: LD_VAR 0 2
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: LIST
61138: PUSH
61139: LD_VAR 0 1
61143: PUSH
61144: LD_INT 4
61146: MINUS
61147: PUSH
61148: LD_VAR 0 2
61152: PUSH
61153: LD_INT 4
61155: MINUS
61156: PUSH
61157: LD_INT 2
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: LIST
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: ST_TO_ADDR
// end ; 3 :
61172: GO 61594
61174: LD_INT 3
61176: DOUBLE
61177: EQUAL
61178: IFTRUE 61182
61180: GO 61315
61182: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61183: LD_ADDR_VAR 0 5
61187: PUSH
61188: LD_VAR 0 1
61192: PUSH
61193: LD_INT 3
61195: PLUS
61196: PUSH
61197: LD_VAR 0 2
61201: PUSH
61202: LD_INT 4
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: LIST
61209: PUSH
61210: LD_VAR 0 1
61214: PUSH
61215: LD_INT 4
61217: PLUS
61218: PUSH
61219: LD_VAR 0 2
61223: PUSH
61224: LD_INT 4
61226: PLUS
61227: PUSH
61228: LD_INT 5
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: LIST
61235: PUSH
61236: LD_VAR 0 1
61240: PUSH
61241: LD_INT 4
61243: MINUS
61244: PUSH
61245: LD_VAR 0 2
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: LIST
61257: PUSH
61258: LD_VAR 0 1
61262: PUSH
61263: LD_VAR 0 2
61267: PUSH
61268: LD_INT 4
61270: MINUS
61271: PUSH
61272: LD_INT 3
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: PUSH
61280: LD_VAR 0 1
61284: PUSH
61285: LD_INT 3
61287: MINUS
61288: PUSH
61289: LD_VAR 0 2
61293: PUSH
61294: LD_INT 3
61296: MINUS
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: LIST
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: ST_TO_ADDR
// end ; 4 :
61313: GO 61594
61315: LD_INT 4
61317: DOUBLE
61318: EQUAL
61319: IFTRUE 61323
61321: GO 61456
61323: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61324: LD_ADDR_VAR 0 5
61328: PUSH
61329: LD_VAR 0 1
61333: PUSH
61334: LD_VAR 0 2
61338: PUSH
61339: LD_INT 4
61341: PLUS
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: LIST
61350: PUSH
61351: LD_VAR 0 1
61355: PUSH
61356: LD_INT 3
61358: PLUS
61359: PUSH
61360: LD_VAR 0 2
61364: PUSH
61365: LD_INT 3
61367: PLUS
61368: PUSH
61369: LD_INT 5
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: LIST
61376: PUSH
61377: LD_VAR 0 1
61381: PUSH
61382: LD_INT 4
61384: PLUS
61385: PUSH
61386: LD_VAR 0 2
61390: PUSH
61391: LD_INT 4
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: LIST
61398: PUSH
61399: LD_VAR 0 1
61403: PUSH
61404: LD_VAR 0 2
61408: PUSH
61409: LD_INT 3
61411: MINUS
61412: PUSH
61413: LD_INT 3
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: PUSH
61421: LD_VAR 0 1
61425: PUSH
61426: LD_INT 4
61428: MINUS
61429: PUSH
61430: LD_VAR 0 2
61434: PUSH
61435: LD_INT 4
61437: MINUS
61438: PUSH
61439: LD_INT 2
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: LIST
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: ST_TO_ADDR
// end ; 5 :
61454: GO 61594
61456: LD_INT 5
61458: DOUBLE
61459: EQUAL
61460: IFTRUE 61464
61462: GO 61593
61464: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61465: LD_ADDR_VAR 0 5
61469: PUSH
61470: LD_VAR 0 1
61474: PUSH
61475: LD_INT 4
61477: MINUS
61478: PUSH
61479: LD_VAR 0 2
61483: PUSH
61484: LD_INT 1
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: LIST
61491: PUSH
61492: LD_VAR 0 1
61496: PUSH
61497: LD_VAR 0 2
61501: PUSH
61502: LD_INT 4
61504: MINUS
61505: PUSH
61506: LD_INT 3
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: PUSH
61514: LD_VAR 0 1
61518: PUSH
61519: LD_INT 4
61521: PLUS
61522: PUSH
61523: LD_VAR 0 2
61527: PUSH
61528: LD_INT 4
61530: PLUS
61531: PUSH
61532: LD_INT 5
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: LIST
61539: PUSH
61540: LD_VAR 0 1
61544: PUSH
61545: LD_INT 3
61547: PLUS
61548: PUSH
61549: LD_VAR 0 2
61553: PUSH
61554: LD_INT 4
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: LIST
61561: PUSH
61562: LD_VAR 0 1
61566: PUSH
61567: LD_VAR 0 2
61571: PUSH
61572: LD_INT 3
61574: PLUS
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: LIST
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: ST_TO_ADDR
// end ; end ;
61591: GO 61594
61593: POP
// result := list ;
61594: LD_ADDR_VAR 0 4
61598: PUSH
61599: LD_VAR 0 5
61603: ST_TO_ADDR
// end ;
61604: LD_VAR 0 4
61608: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61609: LD_INT 0
61611: PPUSH
61612: PPUSH
61613: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61614: LD_VAR 0 1
61618: NOT
61619: PUSH
61620: LD_VAR 0 2
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: LD_INT 3
61633: PUSH
61634: LD_INT 4
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: IN
61643: NOT
61644: OR
61645: IFFALSE 61649
// exit ;
61647: GO 61741
// tmp := [ ] ;
61649: LD_ADDR_VAR 0 5
61653: PUSH
61654: EMPTY
61655: ST_TO_ADDR
// for i in units do
61656: LD_ADDR_VAR 0 4
61660: PUSH
61661: LD_VAR 0 1
61665: PUSH
61666: FOR_IN
61667: IFFALSE 61710
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61669: LD_ADDR_VAR 0 5
61673: PUSH
61674: LD_VAR 0 5
61678: PPUSH
61679: LD_VAR 0 5
61683: PUSH
61684: LD_INT 1
61686: PLUS
61687: PPUSH
61688: LD_VAR 0 4
61692: PPUSH
61693: LD_VAR 0 2
61697: PPUSH
61698: CALL_OW 259
61702: PPUSH
61703: CALL_OW 2
61707: ST_TO_ADDR
61708: GO 61666
61710: POP
61711: POP
// if not tmp then
61712: LD_VAR 0 5
61716: NOT
61717: IFFALSE 61721
// exit ;
61719: GO 61741
// result := SortListByListDesc ( units , tmp ) ;
61721: LD_ADDR_VAR 0 3
61725: PUSH
61726: LD_VAR 0 1
61730: PPUSH
61731: LD_VAR 0 5
61735: PPUSH
61736: CALL_OW 77
61740: ST_TO_ADDR
// end ;
61741: LD_VAR 0 3
61745: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61746: LD_INT 0
61748: PPUSH
61749: PPUSH
61750: PPUSH
// result := false ;
61751: LD_ADDR_VAR 0 3
61755: PUSH
61756: LD_INT 0
61758: ST_TO_ADDR
// x := GetX ( building ) ;
61759: LD_ADDR_VAR 0 4
61763: PUSH
61764: LD_VAR 0 2
61768: PPUSH
61769: CALL_OW 250
61773: ST_TO_ADDR
// y := GetY ( building ) ;
61774: LD_ADDR_VAR 0 5
61778: PUSH
61779: LD_VAR 0 2
61783: PPUSH
61784: CALL_OW 251
61788: ST_TO_ADDR
// if not building or not x or not y then
61789: LD_VAR 0 2
61793: NOT
61794: PUSH
61795: LD_VAR 0 4
61799: NOT
61800: OR
61801: PUSH
61802: LD_VAR 0 5
61806: NOT
61807: OR
61808: IFFALSE 61812
// exit ;
61810: GO 61904
// if GetTaskList ( unit ) then
61812: LD_VAR 0 1
61816: PPUSH
61817: CALL_OW 437
61821: IFFALSE 61904
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61823: LD_STRING e
61825: PUSH
61826: LD_VAR 0 1
61830: PPUSH
61831: CALL_OW 437
61835: PUSH
61836: LD_INT 1
61838: ARRAY
61839: PUSH
61840: LD_INT 1
61842: ARRAY
61843: EQUAL
61844: PUSH
61845: LD_VAR 0 4
61849: PUSH
61850: LD_VAR 0 1
61854: PPUSH
61855: CALL_OW 437
61859: PUSH
61860: LD_INT 1
61862: ARRAY
61863: PUSH
61864: LD_INT 2
61866: ARRAY
61867: EQUAL
61868: AND
61869: PUSH
61870: LD_VAR 0 5
61874: PUSH
61875: LD_VAR 0 1
61879: PPUSH
61880: CALL_OW 437
61884: PUSH
61885: LD_INT 1
61887: ARRAY
61888: PUSH
61889: LD_INT 3
61891: ARRAY
61892: EQUAL
61893: AND
61894: IFFALSE 61904
// result := true end ;
61896: LD_ADDR_VAR 0 3
61900: PUSH
61901: LD_INT 1
61903: ST_TO_ADDR
// end ;
61904: LD_VAR 0 3
61908: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61909: LD_INT 0
61911: PPUSH
// result := false ;
61912: LD_ADDR_VAR 0 4
61916: PUSH
61917: LD_INT 0
61919: ST_TO_ADDR
// if GetTaskList ( unit ) then
61920: LD_VAR 0 1
61924: PPUSH
61925: CALL_OW 437
61929: IFFALSE 62012
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61931: LD_STRING M
61933: PUSH
61934: LD_VAR 0 1
61938: PPUSH
61939: CALL_OW 437
61943: PUSH
61944: LD_INT 1
61946: ARRAY
61947: PUSH
61948: LD_INT 1
61950: ARRAY
61951: EQUAL
61952: PUSH
61953: LD_VAR 0 2
61957: PUSH
61958: LD_VAR 0 1
61962: PPUSH
61963: CALL_OW 437
61967: PUSH
61968: LD_INT 1
61970: ARRAY
61971: PUSH
61972: LD_INT 2
61974: ARRAY
61975: EQUAL
61976: AND
61977: PUSH
61978: LD_VAR 0 3
61982: PUSH
61983: LD_VAR 0 1
61987: PPUSH
61988: CALL_OW 437
61992: PUSH
61993: LD_INT 1
61995: ARRAY
61996: PUSH
61997: LD_INT 3
61999: ARRAY
62000: EQUAL
62001: AND
62002: IFFALSE 62012
// result := true ;
62004: LD_ADDR_VAR 0 4
62008: PUSH
62009: LD_INT 1
62011: ST_TO_ADDR
// end ; end ;
62012: LD_VAR 0 4
62016: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62017: LD_INT 0
62019: PPUSH
62020: PPUSH
62021: PPUSH
62022: PPUSH
// if not unit or not area then
62023: LD_VAR 0 1
62027: NOT
62028: PUSH
62029: LD_VAR 0 2
62033: NOT
62034: OR
62035: IFFALSE 62039
// exit ;
62037: GO 62203
// tmp := AreaToList ( area , i ) ;
62039: LD_ADDR_VAR 0 6
62043: PUSH
62044: LD_VAR 0 2
62048: PPUSH
62049: LD_VAR 0 5
62053: PPUSH
62054: CALL_OW 517
62058: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62059: LD_ADDR_VAR 0 5
62063: PUSH
62064: DOUBLE
62065: LD_INT 1
62067: DEC
62068: ST_TO_ADDR
62069: LD_VAR 0 6
62073: PUSH
62074: LD_INT 1
62076: ARRAY
62077: PUSH
62078: FOR_TO
62079: IFFALSE 62201
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62081: LD_ADDR_VAR 0 7
62085: PUSH
62086: LD_VAR 0 6
62090: PUSH
62091: LD_INT 1
62093: ARRAY
62094: PUSH
62095: LD_VAR 0 5
62099: ARRAY
62100: PUSH
62101: LD_VAR 0 6
62105: PUSH
62106: LD_INT 2
62108: ARRAY
62109: PUSH
62110: LD_VAR 0 5
62114: ARRAY
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62120: LD_VAR 0 7
62124: PUSH
62125: LD_INT 1
62127: ARRAY
62128: PPUSH
62129: LD_VAR 0 7
62133: PUSH
62134: LD_INT 2
62136: ARRAY
62137: PPUSH
62138: CALL_OW 428
62142: PUSH
62143: LD_INT 0
62145: EQUAL
62146: IFFALSE 62199
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62148: LD_VAR 0 1
62152: PPUSH
62153: LD_VAR 0 7
62157: PUSH
62158: LD_INT 1
62160: ARRAY
62161: PPUSH
62162: LD_VAR 0 7
62166: PUSH
62167: LD_INT 2
62169: ARRAY
62170: PPUSH
62171: LD_VAR 0 3
62175: PPUSH
62176: CALL_OW 48
// result := IsPlaced ( unit ) ;
62180: LD_ADDR_VAR 0 4
62184: PUSH
62185: LD_VAR 0 1
62189: PPUSH
62190: CALL_OW 305
62194: ST_TO_ADDR
// exit ;
62195: POP
62196: POP
62197: GO 62203
// end ; end ;
62199: GO 62078
62201: POP
62202: POP
// end ;
62203: LD_VAR 0 4
62207: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62208: LD_INT 0
62210: PPUSH
62211: PPUSH
62212: PPUSH
// if not side or side > 8 then
62213: LD_VAR 0 1
62217: NOT
62218: PUSH
62219: LD_VAR 0 1
62223: PUSH
62224: LD_INT 8
62226: GREATER
62227: OR
62228: IFFALSE 62232
// exit ;
62230: GO 62419
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62232: LD_ADDR_VAR 0 4
62236: PUSH
62237: LD_INT 22
62239: PUSH
62240: LD_VAR 0 1
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 21
62251: PUSH
62252: LD_INT 3
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PPUSH
62263: CALL_OW 69
62267: ST_TO_ADDR
// if not tmp then
62268: LD_VAR 0 4
62272: NOT
62273: IFFALSE 62277
// exit ;
62275: GO 62419
// enable_addtolog := true ;
62277: LD_ADDR_OWVAR 81
62281: PUSH
62282: LD_INT 1
62284: ST_TO_ADDR
// AddToLog ( [ ) ;
62285: LD_STRING [
62287: PPUSH
62288: CALL_OW 561
// for i in tmp do
62292: LD_ADDR_VAR 0 3
62296: PUSH
62297: LD_VAR 0 4
62301: PUSH
62302: FOR_IN
62303: IFFALSE 62410
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62305: LD_STRING [
62307: PUSH
62308: LD_VAR 0 3
62312: PPUSH
62313: CALL_OW 266
62317: STR
62318: PUSH
62319: LD_STRING , 
62321: STR
62322: PUSH
62323: LD_VAR 0 3
62327: PPUSH
62328: CALL_OW 250
62332: STR
62333: PUSH
62334: LD_STRING , 
62336: STR
62337: PUSH
62338: LD_VAR 0 3
62342: PPUSH
62343: CALL_OW 251
62347: STR
62348: PUSH
62349: LD_STRING , 
62351: STR
62352: PUSH
62353: LD_VAR 0 3
62357: PPUSH
62358: CALL_OW 254
62362: STR
62363: PUSH
62364: LD_STRING , 
62366: STR
62367: PUSH
62368: LD_VAR 0 3
62372: PPUSH
62373: LD_INT 1
62375: PPUSH
62376: CALL_OW 268
62380: STR
62381: PUSH
62382: LD_STRING , 
62384: STR
62385: PUSH
62386: LD_VAR 0 3
62390: PPUSH
62391: LD_INT 2
62393: PPUSH
62394: CALL_OW 268
62398: STR
62399: PUSH
62400: LD_STRING ],
62402: STR
62403: PPUSH
62404: CALL_OW 561
// end ;
62408: GO 62302
62410: POP
62411: POP
// AddToLog ( ]; ) ;
62412: LD_STRING ];
62414: PPUSH
62415: CALL_OW 561
// end ;
62419: LD_VAR 0 2
62423: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62424: LD_INT 0
62426: PPUSH
62427: PPUSH
62428: PPUSH
62429: PPUSH
62430: PPUSH
// if not area or not rate or not max then
62431: LD_VAR 0 1
62435: NOT
62436: PUSH
62437: LD_VAR 0 2
62441: NOT
62442: OR
62443: PUSH
62444: LD_VAR 0 4
62448: NOT
62449: OR
62450: IFFALSE 62454
// exit ;
62452: GO 62646
// while 1 do
62454: LD_INT 1
62456: IFFALSE 62646
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62458: LD_ADDR_VAR 0 9
62462: PUSH
62463: LD_VAR 0 1
62467: PPUSH
62468: LD_INT 1
62470: PPUSH
62471: CALL_OW 287
62475: PUSH
62476: LD_INT 10
62478: MUL
62479: ST_TO_ADDR
// r := rate / 10 ;
62480: LD_ADDR_VAR 0 7
62484: PUSH
62485: LD_VAR 0 2
62489: PUSH
62490: LD_INT 10
62492: DIVREAL
62493: ST_TO_ADDR
// time := 1 1$00 ;
62494: LD_ADDR_VAR 0 8
62498: PUSH
62499: LD_INT 2100
62501: ST_TO_ADDR
// if amount < min then
62502: LD_VAR 0 9
62506: PUSH
62507: LD_VAR 0 3
62511: LESS
62512: IFFALSE 62530
// r := r * 2 else
62514: LD_ADDR_VAR 0 7
62518: PUSH
62519: LD_VAR 0 7
62523: PUSH
62524: LD_INT 2
62526: MUL
62527: ST_TO_ADDR
62528: GO 62556
// if amount > max then
62530: LD_VAR 0 9
62534: PUSH
62535: LD_VAR 0 4
62539: GREATER
62540: IFFALSE 62556
// r := r / 2 ;
62542: LD_ADDR_VAR 0 7
62546: PUSH
62547: LD_VAR 0 7
62551: PUSH
62552: LD_INT 2
62554: DIVREAL
62555: ST_TO_ADDR
// time := time / r ;
62556: LD_ADDR_VAR 0 8
62560: PUSH
62561: LD_VAR 0 8
62565: PUSH
62566: LD_VAR 0 7
62570: DIVREAL
62571: ST_TO_ADDR
// if time < 0 then
62572: LD_VAR 0 8
62576: PUSH
62577: LD_INT 0
62579: LESS
62580: IFFALSE 62597
// time := time * - 1 ;
62582: LD_ADDR_VAR 0 8
62586: PUSH
62587: LD_VAR 0 8
62591: PUSH
62592: LD_INT 1
62594: NEG
62595: MUL
62596: ST_TO_ADDR
// wait ( time ) ;
62597: LD_VAR 0 8
62601: PPUSH
62602: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62606: LD_INT 35
62608: PPUSH
62609: LD_INT 875
62611: PPUSH
62612: CALL_OW 12
62616: PPUSH
62617: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62621: LD_INT 1
62623: PPUSH
62624: LD_INT 5
62626: PPUSH
62627: CALL_OW 12
62631: PPUSH
62632: LD_VAR 0 1
62636: PPUSH
62637: LD_INT 1
62639: PPUSH
62640: CALL_OW 55
// end ;
62644: GO 62454
// end ;
62646: LD_VAR 0 5
62650: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62651: LD_INT 0
62653: PPUSH
62654: PPUSH
62655: PPUSH
62656: PPUSH
62657: PPUSH
62658: PPUSH
62659: PPUSH
62660: PPUSH
// if not turrets or not factories then
62661: LD_VAR 0 1
62665: NOT
62666: PUSH
62667: LD_VAR 0 2
62671: NOT
62672: OR
62673: IFFALSE 62677
// exit ;
62675: GO 62984
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62677: LD_ADDR_VAR 0 10
62681: PUSH
62682: LD_INT 5
62684: PUSH
62685: LD_INT 6
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 2
62694: PUSH
62695: LD_INT 4
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 3
62704: PUSH
62705: LD_INT 5
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 24
62719: PUSH
62720: LD_INT 25
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 23
62729: PUSH
62730: LD_INT 27
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 42
62743: PUSH
62744: LD_INT 43
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 44
62753: PUSH
62754: LD_INT 46
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 45
62763: PUSH
62764: LD_INT 47
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: LIST
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: LIST
62780: ST_TO_ADDR
// result := [ ] ;
62781: LD_ADDR_VAR 0 3
62785: PUSH
62786: EMPTY
62787: ST_TO_ADDR
// for i in turrets do
62788: LD_ADDR_VAR 0 4
62792: PUSH
62793: LD_VAR 0 1
62797: PUSH
62798: FOR_IN
62799: IFFALSE 62982
// begin nat := GetNation ( i ) ;
62801: LD_ADDR_VAR 0 7
62805: PUSH
62806: LD_VAR 0 4
62810: PPUSH
62811: CALL_OW 248
62815: ST_TO_ADDR
// weapon := 0 ;
62816: LD_ADDR_VAR 0 8
62820: PUSH
62821: LD_INT 0
62823: ST_TO_ADDR
// if not nat then
62824: LD_VAR 0 7
62828: NOT
62829: IFFALSE 62833
// continue ;
62831: GO 62798
// for j in list [ nat ] do
62833: LD_ADDR_VAR 0 5
62837: PUSH
62838: LD_VAR 0 10
62842: PUSH
62843: LD_VAR 0 7
62847: ARRAY
62848: PUSH
62849: FOR_IN
62850: IFFALSE 62891
// if GetBWeapon ( i ) = j [ 1 ] then
62852: LD_VAR 0 4
62856: PPUSH
62857: CALL_OW 269
62861: PUSH
62862: LD_VAR 0 5
62866: PUSH
62867: LD_INT 1
62869: ARRAY
62870: EQUAL
62871: IFFALSE 62889
// begin weapon := j [ 2 ] ;
62873: LD_ADDR_VAR 0 8
62877: PUSH
62878: LD_VAR 0 5
62882: PUSH
62883: LD_INT 2
62885: ARRAY
62886: ST_TO_ADDR
// break ;
62887: GO 62891
// end ;
62889: GO 62849
62891: POP
62892: POP
// if not weapon then
62893: LD_VAR 0 8
62897: NOT
62898: IFFALSE 62902
// continue ;
62900: GO 62798
// for k in factories do
62902: LD_ADDR_VAR 0 6
62906: PUSH
62907: LD_VAR 0 2
62911: PUSH
62912: FOR_IN
62913: IFFALSE 62978
// begin weapons := AvailableWeaponList ( k ) ;
62915: LD_ADDR_VAR 0 9
62919: PUSH
62920: LD_VAR 0 6
62924: PPUSH
62925: CALL_OW 478
62929: ST_TO_ADDR
// if not weapons then
62930: LD_VAR 0 9
62934: NOT
62935: IFFALSE 62939
// continue ;
62937: GO 62912
// if weapon in weapons then
62939: LD_VAR 0 8
62943: PUSH
62944: LD_VAR 0 9
62948: IN
62949: IFFALSE 62976
// begin result := [ i , weapon ] ;
62951: LD_ADDR_VAR 0 3
62955: PUSH
62956: LD_VAR 0 4
62960: PUSH
62961: LD_VAR 0 8
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: ST_TO_ADDR
// exit ;
62970: POP
62971: POP
62972: POP
62973: POP
62974: GO 62984
// end ; end ;
62976: GO 62912
62978: POP
62979: POP
// end ;
62980: GO 62798
62982: POP
62983: POP
// end ;
62984: LD_VAR 0 3
62988: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62989: LD_INT 0
62991: PPUSH
// if not side or side > 8 then
62992: LD_VAR 0 3
62996: NOT
62997: PUSH
62998: LD_VAR 0 3
63002: PUSH
63003: LD_INT 8
63005: GREATER
63006: OR
63007: IFFALSE 63011
// exit ;
63009: GO 63070
// if not range then
63011: LD_VAR 0 4
63015: NOT
63016: IFFALSE 63027
// range := - 12 ;
63018: LD_ADDR_VAR 0 4
63022: PUSH
63023: LD_INT 12
63025: NEG
63026: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63027: LD_VAR 0 1
63031: PPUSH
63032: LD_VAR 0 2
63036: PPUSH
63037: LD_VAR 0 3
63041: PPUSH
63042: LD_VAR 0 4
63046: PPUSH
63047: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63051: LD_VAR 0 1
63055: PPUSH
63056: LD_VAR 0 2
63060: PPUSH
63061: LD_VAR 0 3
63065: PPUSH
63066: CALL_OW 331
// end ;
63070: LD_VAR 0 5
63074: RET
// export function Video ( mode ) ; begin
63075: LD_INT 0
63077: PPUSH
// ingame_video = mode ;
63078: LD_ADDR_OWVAR 52
63082: PUSH
63083: LD_VAR 0 1
63087: ST_TO_ADDR
// interface_hidden = mode ;
63088: LD_ADDR_OWVAR 54
63092: PUSH
63093: LD_VAR 0 1
63097: ST_TO_ADDR
// end ;
63098: LD_VAR 0 2
63102: RET
// export function Join ( array , element ) ; begin
63103: LD_INT 0
63105: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63106: LD_ADDR_VAR 0 3
63110: PUSH
63111: LD_VAR 0 1
63115: PPUSH
63116: LD_VAR 0 1
63120: PUSH
63121: LD_INT 1
63123: PLUS
63124: PPUSH
63125: LD_VAR 0 2
63129: PPUSH
63130: CALL_OW 1
63134: ST_TO_ADDR
// end ;
63135: LD_VAR 0 3
63139: RET
// export function JoinUnion ( array , element ) ; begin
63140: LD_INT 0
63142: PPUSH
// result := array union element ;
63143: LD_ADDR_VAR 0 3
63147: PUSH
63148: LD_VAR 0 1
63152: PUSH
63153: LD_VAR 0 2
63157: UNION
63158: ST_TO_ADDR
// end ;
63159: LD_VAR 0 3
63163: RET
// export function GetBehemoths ( side ) ; begin
63164: LD_INT 0
63166: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63167: LD_ADDR_VAR 0 2
63171: PUSH
63172: LD_INT 22
63174: PUSH
63175: LD_VAR 0 1
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 31
63186: PUSH
63187: LD_INT 25
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PPUSH
63198: CALL_OW 69
63202: ST_TO_ADDR
// end ;
63203: LD_VAR 0 2
63207: RET
// export function Shuffle ( array ) ; var i , index ; begin
63208: LD_INT 0
63210: PPUSH
63211: PPUSH
63212: PPUSH
// result := [ ] ;
63213: LD_ADDR_VAR 0 2
63217: PUSH
63218: EMPTY
63219: ST_TO_ADDR
// if not array then
63220: LD_VAR 0 1
63224: NOT
63225: IFFALSE 63229
// exit ;
63227: GO 63328
// Randomize ;
63229: CALL_OW 10
// for i = array downto 1 do
63233: LD_ADDR_VAR 0 3
63237: PUSH
63238: DOUBLE
63239: LD_VAR 0 1
63243: INC
63244: ST_TO_ADDR
63245: LD_INT 1
63247: PUSH
63248: FOR_DOWNTO
63249: IFFALSE 63326
// begin index := rand ( 1 , array ) ;
63251: LD_ADDR_VAR 0 4
63255: PUSH
63256: LD_INT 1
63258: PPUSH
63259: LD_VAR 0 1
63263: PPUSH
63264: CALL_OW 12
63268: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63269: LD_ADDR_VAR 0 2
63273: PUSH
63274: LD_VAR 0 2
63278: PPUSH
63279: LD_VAR 0 2
63283: PUSH
63284: LD_INT 1
63286: PLUS
63287: PPUSH
63288: LD_VAR 0 1
63292: PUSH
63293: LD_VAR 0 4
63297: ARRAY
63298: PPUSH
63299: CALL_OW 2
63303: ST_TO_ADDR
// array := Delete ( array , index ) ;
63304: LD_ADDR_VAR 0 1
63308: PUSH
63309: LD_VAR 0 1
63313: PPUSH
63314: LD_VAR 0 4
63318: PPUSH
63319: CALL_OW 3
63323: ST_TO_ADDR
// end ;
63324: GO 63248
63326: POP
63327: POP
// end ;
63328: LD_VAR 0 2
63332: RET
// export function GetBaseMaterials ( base ) ; begin
63333: LD_INT 0
63335: PPUSH
// result := [ 0 , 0 , 0 ] ;
63336: LD_ADDR_VAR 0 2
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: LIST
63354: ST_TO_ADDR
// if not base then
63355: LD_VAR 0 1
63359: NOT
63360: IFFALSE 63364
// exit ;
63362: GO 63413
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63364: LD_ADDR_VAR 0 2
63368: PUSH
63369: LD_VAR 0 1
63373: PPUSH
63374: LD_INT 1
63376: PPUSH
63377: CALL_OW 275
63381: PUSH
63382: LD_VAR 0 1
63386: PPUSH
63387: LD_INT 2
63389: PPUSH
63390: CALL_OW 275
63394: PUSH
63395: LD_VAR 0 1
63399: PPUSH
63400: LD_INT 3
63402: PPUSH
63403: CALL_OW 275
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: LIST
63412: ST_TO_ADDR
// end ;
63413: LD_VAR 0 2
63417: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63418: LD_INT 0
63420: PPUSH
63421: PPUSH
// result := array ;
63422: LD_ADDR_VAR 0 3
63426: PUSH
63427: LD_VAR 0 1
63431: ST_TO_ADDR
// if size > 0 then
63432: LD_VAR 0 2
63436: PUSH
63437: LD_INT 0
63439: GREATER
63440: IFFALSE 63486
// for i := array downto size do
63442: LD_ADDR_VAR 0 4
63446: PUSH
63447: DOUBLE
63448: LD_VAR 0 1
63452: INC
63453: ST_TO_ADDR
63454: LD_VAR 0 2
63458: PUSH
63459: FOR_DOWNTO
63460: IFFALSE 63484
// result := Delete ( result , result ) ;
63462: LD_ADDR_VAR 0 3
63466: PUSH
63467: LD_VAR 0 3
63471: PPUSH
63472: LD_VAR 0 3
63476: PPUSH
63477: CALL_OW 3
63481: ST_TO_ADDR
63482: GO 63459
63484: POP
63485: POP
// end ;
63486: LD_VAR 0 3
63490: RET
// export function ComExit ( unit ) ; var tmp ; begin
63491: LD_INT 0
63493: PPUSH
63494: PPUSH
// if not IsInUnit ( unit ) then
63495: LD_VAR 0 1
63499: PPUSH
63500: CALL_OW 310
63504: NOT
63505: IFFALSE 63509
// exit ;
63507: GO 63569
// tmp := IsInUnit ( unit ) ;
63509: LD_ADDR_VAR 0 3
63513: PUSH
63514: LD_VAR 0 1
63518: PPUSH
63519: CALL_OW 310
63523: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63524: LD_VAR 0 3
63528: PPUSH
63529: CALL_OW 247
63533: PUSH
63534: LD_INT 2
63536: EQUAL
63537: IFFALSE 63550
// ComExitVehicle ( unit ) else
63539: LD_VAR 0 1
63543: PPUSH
63544: CALL_OW 121
63548: GO 63559
// ComExitBuilding ( unit ) ;
63550: LD_VAR 0 1
63554: PPUSH
63555: CALL_OW 122
// result := tmp ;
63559: LD_ADDR_VAR 0 2
63563: PUSH
63564: LD_VAR 0 3
63568: ST_TO_ADDR
// end ;
63569: LD_VAR 0 2
63573: RET
// export function ComExitAll ( units ) ; var i ; begin
63574: LD_INT 0
63576: PPUSH
63577: PPUSH
// if not units then
63578: LD_VAR 0 1
63582: NOT
63583: IFFALSE 63587
// exit ;
63585: GO 63613
// for i in units do
63587: LD_ADDR_VAR 0 3
63591: PUSH
63592: LD_VAR 0 1
63596: PUSH
63597: FOR_IN
63598: IFFALSE 63611
// ComExit ( i ) ;
63600: LD_VAR 0 3
63604: PPUSH
63605: CALL 63491 0 1
63609: GO 63597
63611: POP
63612: POP
// end ;
63613: LD_VAR 0 2
63617: RET
// export function ResetHc ; begin
63618: LD_INT 0
63620: PPUSH
// InitHc ;
63621: CALL_OW 19
// hc_importance := 0 ;
63625: LD_ADDR_OWVAR 32
63629: PUSH
63630: LD_INT 0
63632: ST_TO_ADDR
// end ;
63633: LD_VAR 0 1
63637: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63638: LD_INT 0
63640: PPUSH
63641: PPUSH
63642: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63643: LD_ADDR_VAR 0 6
63647: PUSH
63648: LD_VAR 0 1
63652: PUSH
63653: LD_VAR 0 3
63657: PLUS
63658: PUSH
63659: LD_INT 2
63661: DIV
63662: ST_TO_ADDR
// if _x < 0 then
63663: LD_VAR 0 6
63667: PUSH
63668: LD_INT 0
63670: LESS
63671: IFFALSE 63688
// _x := _x * - 1 ;
63673: LD_ADDR_VAR 0 6
63677: PUSH
63678: LD_VAR 0 6
63682: PUSH
63683: LD_INT 1
63685: NEG
63686: MUL
63687: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63688: LD_ADDR_VAR 0 7
63692: PUSH
63693: LD_VAR 0 2
63697: PUSH
63698: LD_VAR 0 4
63702: PLUS
63703: PUSH
63704: LD_INT 2
63706: DIV
63707: ST_TO_ADDR
// if _y < 0 then
63708: LD_VAR 0 7
63712: PUSH
63713: LD_INT 0
63715: LESS
63716: IFFALSE 63733
// _y := _y * - 1 ;
63718: LD_ADDR_VAR 0 7
63722: PUSH
63723: LD_VAR 0 7
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: MUL
63732: ST_TO_ADDR
// result := [ _x , _y ] ;
63733: LD_ADDR_VAR 0 5
63737: PUSH
63738: LD_VAR 0 6
63742: PUSH
63743: LD_VAR 0 7
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: ST_TO_ADDR
// end ;
63752: LD_VAR 0 5
63756: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63757: LD_INT 0
63759: PPUSH
63760: PPUSH
63761: PPUSH
63762: PPUSH
// task := GetTaskList ( unit ) ;
63763: LD_ADDR_VAR 0 7
63767: PUSH
63768: LD_VAR 0 1
63772: PPUSH
63773: CALL_OW 437
63777: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63778: LD_VAR 0 7
63782: NOT
63783: PUSH
63784: LD_VAR 0 1
63788: PPUSH
63789: LD_VAR 0 2
63793: PPUSH
63794: CALL_OW 308
63798: NOT
63799: AND
63800: IFFALSE 63804
// exit ;
63802: GO 63922
// if IsInArea ( unit , area ) then
63804: LD_VAR 0 1
63808: PPUSH
63809: LD_VAR 0 2
63813: PPUSH
63814: CALL_OW 308
63818: IFFALSE 63836
// begin ComMoveToArea ( unit , goAway ) ;
63820: LD_VAR 0 1
63824: PPUSH
63825: LD_VAR 0 3
63829: PPUSH
63830: CALL_OW 113
// exit ;
63834: GO 63922
// end ; if task [ 1 ] [ 1 ] <> M then
63836: LD_VAR 0 7
63840: PUSH
63841: LD_INT 1
63843: ARRAY
63844: PUSH
63845: LD_INT 1
63847: ARRAY
63848: PUSH
63849: LD_STRING M
63851: NONEQUAL
63852: IFFALSE 63856
// exit ;
63854: GO 63922
// x := task [ 1 ] [ 2 ] ;
63856: LD_ADDR_VAR 0 5
63860: PUSH
63861: LD_VAR 0 7
63865: PUSH
63866: LD_INT 1
63868: ARRAY
63869: PUSH
63870: LD_INT 2
63872: ARRAY
63873: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63874: LD_ADDR_VAR 0 6
63878: PUSH
63879: LD_VAR 0 7
63883: PUSH
63884: LD_INT 1
63886: ARRAY
63887: PUSH
63888: LD_INT 3
63890: ARRAY
63891: ST_TO_ADDR
// if InArea ( x , y , area ) then
63892: LD_VAR 0 5
63896: PPUSH
63897: LD_VAR 0 6
63901: PPUSH
63902: LD_VAR 0 2
63906: PPUSH
63907: CALL_OW 309
63911: IFFALSE 63922
// ComStop ( unit ) ;
63913: LD_VAR 0 1
63917: PPUSH
63918: CALL_OW 141
// end ;
63922: LD_VAR 0 4
63926: RET
// export function Abs ( value ) ; begin
63927: LD_INT 0
63929: PPUSH
// result := value ;
63930: LD_ADDR_VAR 0 2
63934: PUSH
63935: LD_VAR 0 1
63939: ST_TO_ADDR
// if value < 0 then
63940: LD_VAR 0 1
63944: PUSH
63945: LD_INT 0
63947: LESS
63948: IFFALSE 63965
// result := value * - 1 ;
63950: LD_ADDR_VAR 0 2
63954: PUSH
63955: LD_VAR 0 1
63959: PUSH
63960: LD_INT 1
63962: NEG
63963: MUL
63964: ST_TO_ADDR
// end ;
63965: LD_VAR 0 2
63969: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63970: LD_INT 0
63972: PPUSH
63973: PPUSH
63974: PPUSH
63975: PPUSH
63976: PPUSH
63977: PPUSH
63978: PPUSH
63979: PPUSH
// if not unit or not building then
63980: LD_VAR 0 1
63984: NOT
63985: PUSH
63986: LD_VAR 0 2
63990: NOT
63991: OR
63992: IFFALSE 63996
// exit ;
63994: GO 64222
// x := GetX ( building ) ;
63996: LD_ADDR_VAR 0 4
64000: PUSH
64001: LD_VAR 0 2
64005: PPUSH
64006: CALL_OW 250
64010: ST_TO_ADDR
// y := GetY ( building ) ;
64011: LD_ADDR_VAR 0 6
64015: PUSH
64016: LD_VAR 0 2
64020: PPUSH
64021: CALL_OW 251
64025: ST_TO_ADDR
// d := GetDir ( building ) ;
64026: LD_ADDR_VAR 0 8
64030: PUSH
64031: LD_VAR 0 2
64035: PPUSH
64036: CALL_OW 254
64040: ST_TO_ADDR
// r := 4 ;
64041: LD_ADDR_VAR 0 9
64045: PUSH
64046: LD_INT 4
64048: ST_TO_ADDR
// for i := 1 to 5 do
64049: LD_ADDR_VAR 0 10
64053: PUSH
64054: DOUBLE
64055: LD_INT 1
64057: DEC
64058: ST_TO_ADDR
64059: LD_INT 5
64061: PUSH
64062: FOR_TO
64063: IFFALSE 64220
// begin _x := ShiftX ( x , d , r + i ) ;
64065: LD_ADDR_VAR 0 5
64069: PUSH
64070: LD_VAR 0 4
64074: PPUSH
64075: LD_VAR 0 8
64079: PPUSH
64080: LD_VAR 0 9
64084: PUSH
64085: LD_VAR 0 10
64089: PLUS
64090: PPUSH
64091: CALL_OW 272
64095: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64096: LD_ADDR_VAR 0 7
64100: PUSH
64101: LD_VAR 0 6
64105: PPUSH
64106: LD_VAR 0 8
64110: PPUSH
64111: LD_VAR 0 9
64115: PUSH
64116: LD_VAR 0 10
64120: PLUS
64121: PPUSH
64122: CALL_OW 273
64126: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64127: LD_VAR 0 5
64131: PPUSH
64132: LD_VAR 0 7
64136: PPUSH
64137: CALL_OW 488
64141: PUSH
64142: LD_VAR 0 5
64146: PPUSH
64147: LD_VAR 0 7
64151: PPUSH
64152: CALL_OW 428
64156: PPUSH
64157: CALL_OW 247
64161: PUSH
64162: LD_INT 3
64164: PUSH
64165: LD_INT 2
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: IN
64172: NOT
64173: AND
64174: IFFALSE 64218
// begin ComMoveXY ( unit , _x , _y ) ;
64176: LD_VAR 0 1
64180: PPUSH
64181: LD_VAR 0 5
64185: PPUSH
64186: LD_VAR 0 7
64190: PPUSH
64191: CALL_OW 111
// result := [ _x , _y ] ;
64195: LD_ADDR_VAR 0 3
64199: PUSH
64200: LD_VAR 0 5
64204: PUSH
64205: LD_VAR 0 7
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: ST_TO_ADDR
// exit ;
64214: POP
64215: POP
64216: GO 64222
// end ; end ;
64218: GO 64062
64220: POP
64221: POP
// end ;
64222: LD_VAR 0 3
64226: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64227: LD_INT 0
64229: PPUSH
64230: PPUSH
64231: PPUSH
// result := 0 ;
64232: LD_ADDR_VAR 0 3
64236: PUSH
64237: LD_INT 0
64239: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64240: LD_VAR 0 1
64244: PUSH
64245: LD_INT 0
64247: LESS
64248: PUSH
64249: LD_VAR 0 1
64253: PUSH
64254: LD_INT 8
64256: GREATER
64257: OR
64258: PUSH
64259: LD_VAR 0 2
64263: PUSH
64264: LD_INT 0
64266: LESS
64267: OR
64268: PUSH
64269: LD_VAR 0 2
64273: PUSH
64274: LD_INT 8
64276: GREATER
64277: OR
64278: IFFALSE 64282
// exit ;
64280: GO 64357
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64282: LD_ADDR_VAR 0 4
64286: PUSH
64287: LD_INT 22
64289: PUSH
64290: LD_VAR 0 2
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PPUSH
64299: CALL_OW 69
64303: PUSH
64304: FOR_IN
64305: IFFALSE 64355
// begin un := UnitShoot ( i ) ;
64307: LD_ADDR_VAR 0 5
64311: PUSH
64312: LD_VAR 0 4
64316: PPUSH
64317: CALL_OW 504
64321: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64322: LD_VAR 0 5
64326: PPUSH
64327: CALL_OW 255
64331: PUSH
64332: LD_VAR 0 1
64336: EQUAL
64337: IFFALSE 64353
// begin result := un ;
64339: LD_ADDR_VAR 0 3
64343: PUSH
64344: LD_VAR 0 5
64348: ST_TO_ADDR
// exit ;
64349: POP
64350: POP
64351: GO 64357
// end ; end ;
64353: GO 64304
64355: POP
64356: POP
// end ;
64357: LD_VAR 0 3
64361: RET
// export function GetCargoBay ( units ) ; begin
64362: LD_INT 0
64364: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64365: LD_ADDR_VAR 0 2
64369: PUSH
64370: LD_VAR 0 1
64374: PPUSH
64375: LD_INT 2
64377: PUSH
64378: LD_INT 34
64380: PUSH
64381: LD_INT 12
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 34
64390: PUSH
64391: LD_INT 51
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 34
64400: PUSH
64401: LD_INT 32
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 34
64410: PUSH
64411: LD_EXP 26
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: PPUSH
64427: CALL_OW 72
64431: ST_TO_ADDR
// end ;
64432: LD_VAR 0 2
64436: RET
