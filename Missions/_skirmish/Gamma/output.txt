// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8631 0 0
// PrepareAmerican ;
 100: CALL 5251 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 25402 0 2
// if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 255
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: PUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL_OW 263
2749: PUSH
2750: LD_INT 3
2752: EQUAL
2753: AND
2754: IFFALSE 2764
// comp_tested := true ;
2756: LD_ADDR_EXP 22
2760: PUSH
2761: LD_INT 1
2763: ST_TO_ADDR
// end ;
2764: PPOPN 2
2766: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2767: LD_VAR 0 1
2771: PUSH
2772: LD_INT 22
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 21
2784: PUSH
2785: LD_INT 3
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IN
2801: IFFALSE 2879
// if attacked = false and sikorski_ar = false then
2803: LD_EXP 15
2807: PUSH
2808: LD_INT 0
2810: EQUAL
2811: PUSH
2812: LD_EXP 12
2816: PUSH
2817: LD_INT 0
2819: EQUAL
2820: AND
2821: IFFALSE 2879
// begin attacked := true ;
2823: LD_ADDR_EXP 15
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// if IsInUnit ( donald ) then
2831: LD_EXP 13
2835: PPUSH
2836: CALL_OW 310
2840: IFFALSE 2856
// SayRadio ( donald , DGammaF ) else
2842: LD_EXP 13
2846: PPUSH
2847: LD_STRING DGammaF
2849: PPUSH
2850: CALL_OW 94
2854: GO 2879
// if IsInUnit ( van ) then
2856: LD_EXP 14
2860: PPUSH
2861: CALL_OW 310
2865: IFFALSE 2879
// SayRadio ( van , DGammaM ) ;
2867: LD_EXP 14
2871: PPUSH
2872: LD_STRING DGammaM
2874: PPUSH
2875: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2879: LD_VAR 0 1
2883: PUSH
2884: LD_INT 33
2886: PUSH
2887: LD_INT 2
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 69
2898: IN
2899: IFFALSE 2910
// ComUnlink ( un ) ;
2901: LD_VAR 0 1
2905: PPUSH
2906: CALL_OW 136
// end ;
2910: PPOPN 1
2912: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2913: LD_VAR 0 2
2917: PPUSH
2918: CALL_OW 258
2922: PUSH
2923: LD_INT 1
2925: EQUAL
2926: IFFALSE 2940
// Say ( sci , Dsci3 ) ;
2928: LD_VAR 0 2
2932: PPUSH
2933: LD_STRING Dsci3
2935: PPUSH
2936: CALL_OW 88
// end ;
2940: PPOPN 2
2942: END
// on BuildingComplete ( b ) do var i ;
2943: LD_INT 0
2945: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 266
2955: PUSH
2956: LD_INT 0
2958: EQUAL
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 255
2969: PUSH
2970: LD_INT 3
2972: EQUAL
2973: AND
2974: PUSH
2975: LD_EXP 6
2979: PUSH
2980: LD_INT 0
2982: EQUAL
2983: AND
2984: IFFALSE 3048
// begin SetBName ( b , kalinin ) ;
2986: LD_VAR 0 1
2990: PPUSH
2991: LD_STRING kalinin
2993: PPUSH
2994: CALL_OW 500
// dep_x := GetX ( b ) ;
2998: LD_ADDR_EXP 7
3002: PUSH
3003: LD_VAR 0 1
3007: PPUSH
3008: CALL_OW 250
3012: ST_TO_ADDR
// dep_y := GetY ( b ) ;
3013: LD_ADDR_EXP 8
3017: PUSH
3018: LD_VAR 0 1
3022: PPUSH
3023: CALL_OW 251
3027: ST_TO_ADDR
// depot_rdy := true ;
3028: LD_ADDR_EXP 6
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3036: LD_EXP 2
3040: PPUSH
3041: LD_STRING Dpop3
3043: PPUSH
3044: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 266
3057: PUSH
3058: LD_INT 6
3060: EQUAL
3061: PUSH
3062: LD_VAR 0 1
3066: PPUSH
3067: CALL_OW 255
3071: PUSH
3072: LD_INT 3
3074: EQUAL
3075: AND
3076: PUSH
3077: LD_EXP 21
3081: PUSH
3082: LD_INT 0
3084: EQUAL
3085: AND
3086: IFFALSE 3181
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3088: LD_INT 22
3090: PUSH
3091: LD_INT 3
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 25
3100: PUSH
3101: LD_INT 4
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_INT 0
3119: GREATER
3120: IFFALSE 3181
// begin event_comp := true ;
3122: LD_ADDR_EXP 21
3126: PUSH
3127: LD_INT 1
3129: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3130: LD_INT 22
3132: PUSH
3133: LD_INT 3
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 25
3142: PUSH
3143: LD_INT 4
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 26
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_STRING Dsci1
3176: PPUSH
3177: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 266
3190: PUSH
3191: LD_INT 32
3193: EQUAL
3194: PUSH
3195: LD_VAR 0 1
3199: PPUSH
3200: CALL_OW 255
3204: PUSH
3205: LD_INT 1
3207: EQUAL
3208: AND
3209: IFFALSE 3274
// begin RaiseSailEvent ( 6 ) ;
3211: LD_INT 6
3213: PPUSH
3214: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3218: LD_VAR 0 1
3222: PPUSH
3223: LD_EXP 18
3227: PUSH
3228: LD_INT 4
3230: ARRAY
3231: PPUSH
3232: CALL_OW 208
// for i = 1 to 4 do
3236: LD_ADDR_VAR 0 2
3240: PUSH
3241: DOUBLE
3242: LD_INT 1
3244: DEC
3245: ST_TO_ADDR
3246: LD_INT 4
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3272
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3252: LD_ADDR_EXP 18
3256: PUSH
3257: LD_EXP 18
3261: PPUSH
3262: LD_INT 1
3264: PPUSH
3265: CALL_OW 3
3269: ST_TO_ADDR
3270: GO 3249
3272: POP
3273: POP
// end ; end ;
3274: PPOPN 2
3276: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3277: LD_VAR 0 1
3281: PPUSH
3282: CALL 25280 0 1
// if un in Patrol then
3286: LD_VAR 0 1
3290: PUSH
3291: LD_EXP 17
3295: IN
3296: IFFALSE 3314
// Patrol := Patrol diff un ;
3298: LD_ADDR_EXP 17
3302: PUSH
3303: LD_EXP 17
3307: PUSH
3308: LD_VAR 0 1
3312: DIFF
3313: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3314: LD_VAR 0 1
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: IN
3348: IFFALSE 3434
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3350: LD_ADDR_EXP 18
3354: PUSH
3355: LD_EXP 18
3359: PUSH
3360: LD_VAR 0 1
3364: PPUSH
3365: CALL_OW 250
3369: ADD
3370: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3371: LD_ADDR_EXP 18
3375: PUSH
3376: LD_EXP 18
3380: PUSH
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 251
3390: ADD
3391: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3392: LD_ADDR_EXP 18
3396: PUSH
3397: LD_EXP 18
3401: PUSH
3402: LD_VAR 0 1
3406: PPUSH
3407: CALL_OW 254
3411: ADD
3412: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3413: LD_ADDR_EXP 18
3417: PUSH
3418: LD_EXP 18
3422: PUSH
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 269
3432: ADD
3433: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3434: LD_VAR 0 1
3438: PUSH
3439: LD_INT 33
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: LD_INT 34
3454: PUSH
3455: LD_INT 13
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 69
3474: IN
3475: IFFALSE 3491
// new_veh := new_veh + 1 ;
3477: LD_ADDR_EXP 19
3481: PUSH
3482: LD_EXP 19
3486: PUSH
3487: LD_INT 1
3489: PLUS
3490: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3491: LD_VAR 0 1
3495: PUSH
3496: LD_INT 34
3498: PUSH
3499: LD_INT 13
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: IN
3511: IFFALSE 3532
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3513: LD_INT 26
3515: PPUSH
3516: LD_INT 3
3518: PPUSH
3519: LD_INT 2
3521: PPUSH
3522: LD_INT 2
3524: PPUSH
3525: LD_INT 13
3527: PPUSH
3528: CALL_OW 185
// if un = am_dep then
3532: LD_VAR 0 1
3536: PUSH
3537: LD_INT 25
3539: EQUAL
3540: IFFALSE 3708
// begin SayRadio ( Platonov , DPlat ) ;
3542: LD_EXP 4
3546: PPUSH
3547: LD_STRING DPlat
3549: PPUSH
3550: CALL_OW 94
// if timer <= 30 30$00 then
3554: LD_EXP 24
3558: PUSH
3559: LD_INT 63000
3561: LESSEQUAL
3562: IFFALSE 3576
// AddMedal ( gamma_med3 , 1 ) else
3564: LD_STRING gamma_med3
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 101
3574: GO 3626
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3576: LD_EXP 24
3580: PUSH
3581: LD_INT 105000
3583: PUSH
3584: LD_INT 88200
3586: PUSH
3587: LD_INT 73500
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: LD_EXP 1
3599: ARRAY
3600: LESSEQUAL
3601: IFFALSE 3615
// AddMedal ( gamma_med3 , 2 ) else
3603: LD_STRING gamma_med3
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 101
3613: GO 3626
// AddMedal ( gamma_med3 , - 1 ) ;
3615: LD_STRING gamma_med3
3617: PPUSH
3618: LD_INT 1
3620: NEG
3621: PPUSH
3622: CALL_OW 101
// if not comp_tested then
3626: LD_EXP 22
3630: NOT
3631: IFFALSE 3646
// AddMedal ( gamma_med2 , - 1 ) else
3633: LD_STRING gamma_med2
3635: PPUSH
3636: LD_INT 1
3638: NEG
3639: PPUSH
3640: CALL_OW 101
3644: GO 3656
// AddMedal ( gamma_med2 , 1 ) ;
3646: LD_STRING gamma_med2
3648: PPUSH
3649: LD_INT 1
3651: PPUSH
3652: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3656: LD_EXP 9
3660: PPUSH
3661: CALL_OW 301
3665: PUSH
3666: LD_EXP 23
3670: NOT
3671: AND
3672: IFFALSE 3686
// AddMedal ( gamma_med1 , 1 ) else
3674: LD_STRING gamma_med1
3676: PPUSH
3677: LD_INT 1
3679: PPUSH
3680: CALL_OW 101
3684: GO 3697
// AddMedal ( gamma_med1 , - 1 ) ;
3686: LD_STRING gamma_med1
3688: PPUSH
3689: LD_INT 1
3691: NEG
3692: PPUSH
3693: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3697: LD_STRING GAMMA_MEDALS
3699: PPUSH
3700: CALL_OW 102
// YouWin ;
3704: CALL_OW 103
// end ; if un = commander then
3708: LD_VAR 0 1
3712: PUSH
3713: LD_EXP 3
3717: EQUAL
3718: IFFALSE 3727
// YouLost ( comml ) ;
3720: LD_STRING comml
3722: PPUSH
3723: CALL_OW 104
// if un = sikorski then
3727: LD_VAR 0 1
3731: PUSH
3732: LD_EXP 9
3736: EQUAL
3737: IFFALSE 3749
// AddMedal ( gamma_med1 , 1 ) ;
3739: LD_STRING gamma_med1
3741: PPUSH
3742: LD_INT 1
3744: PPUSH
3745: CALL_OW 101
// end ;
3749: PPOPN 1
3751: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3752: LD_INT 0
3754: PPUSH
3755: PPUSH
3756: PPUSH
3757: PPUSH
3758: PPUSH
3759: PPUSH
3760: PPUSH
3761: PPUSH
3762: PPUSH
// begin if event = 1 then
3763: LD_VAR 0 1
3767: PUSH
3768: LD_INT 1
3770: EQUAL
3771: IFFALSE 4068
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3773: LD_ADDR_VAR 0 4
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 1
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 21
3790: PUSH
3791: LD_INT 3
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 3
3800: PUSH
3801: LD_INT 24
3803: PUSH
3804: LD_INT 1000
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3825: LD_ADDR_VAR 0 8
3829: PUSH
3830: LD_INT 22
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 25
3842: PUSH
3843: LD_INT 2
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_INT 24
3852: PUSH
3853: LD_INT 1000
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3873: LD_ADDR_VAR 0 9
3877: PUSH
3878: LD_INT 22
3880: PUSH
3881: LD_INT 1
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: LD_INT 34
3890: PUSH
3891: LD_INT 13
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: CALL_OW 69
3906: ST_TO_ADDR
// if engs > 0 then
3907: LD_VAR 0 8
3911: PUSH
3912: LD_INT 0
3914: GREATER
3915: IFFALSE 4020
// for i = 1 to engs do
3917: LD_ADDR_VAR 0 2
3921: PUSH
3922: DOUBLE
3923: LD_INT 1
3925: DEC
3926: ST_TO_ADDR
3927: LD_VAR 0 8
3931: PUSH
3932: FOR_TO
3933: IFFALSE 4018
// begin if IsInUnit ( engs [ i ] ) then
3935: LD_VAR 0 8
3939: PUSH
3940: LD_VAR 0 2
3944: ARRAY
3945: PPUSH
3946: CALL_OW 310
3950: IFFALSE 3967
// ComExitBuilding ( engs [ i ] ) ;
3952: LD_VAR 0 8
3956: PUSH
3957: LD_VAR 0 2
3961: ARRAY
3962: PPUSH
3963: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3967: LD_INT 7
3969: PPUSH
3970: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3974: LD_VAR 0 8
3978: PUSH
3979: LD_VAR 0 2
3983: ARRAY
3984: PPUSH
3985: CALL_OW 314
3989: NOT
3990: IFFALSE 4016
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3992: LD_VAR 0 8
3996: PUSH
3997: LD_VAR 0 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 4
4007: PUSH
4008: LD_INT 1
4010: ARRAY
4011: PPUSH
4012: CALL_OW 130
// end ;
4016: GO 3932
4018: POP
4019: POP
// if crane > 0 then
4020: LD_VAR 0 9
4024: PUSH
4025: LD_INT 0
4027: GREATER
4028: IFFALSE 4068
// if not HasTask ( crane [ 1 ] ) then
4030: LD_VAR 0 9
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: PPUSH
4039: CALL_OW 314
4043: NOT
4044: IFFALSE 4068
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4046: LD_VAR 0 9
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: LD_VAR 0 4
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: CALL_OW 130
// end ; if event = 2 then
4068: LD_VAR 0 1
4072: PUSH
4073: LD_INT 2
4075: EQUAL
4076: IFFALSE 4198
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4078: LD_ADDR_VAR 0 8
4082: PUSH
4083: LD_INT 22
4085: PUSH
4086: LD_INT 1
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 25
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PPUSH
4107: CALL_OW 69
4111: ST_TO_ADDR
// if engs > 0 then
4112: LD_VAR 0 8
4116: PUSH
4117: LD_INT 0
4119: GREATER
4120: IFFALSE 4198
// for i = 1 to engs do
4122: LD_ADDR_VAR 0 2
4126: PUSH
4127: DOUBLE
4128: LD_INT 1
4130: DEC
4131: ST_TO_ADDR
4132: LD_VAR 0 8
4136: PUSH
4137: FOR_TO
4138: IFFALSE 4196
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4140: LD_VAR 0 8
4144: PUSH
4145: LD_VAR 0 2
4149: ARRAY
4150: PPUSH
4151: CALL_OW 314
4155: NOT
4156: PUSH
4157: LD_VAR 0 8
4161: PUSH
4162: LD_VAR 0 2
4166: ARRAY
4167: PPUSH
4168: CALL_OW 310
4172: NOT
4173: AND
4174: IFFALSE 4194
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4176: LD_VAR 0 8
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PPUSH
4187: LD_INT 25
4189: PPUSH
4190: CALL_OW 120
4194: GO 4137
4196: POP
4197: POP
// end ; if event = 3 then
4198: LD_VAR 0 1
4202: PUSH
4203: LD_INT 3
4205: EQUAL
4206: IFFALSE 4570
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4208: LD_ADDR_VAR 0 4
4212: PUSH
4213: LD_INT 22
4215: PUSH
4216: LD_INT 1
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 21
4225: PUSH
4226: LD_INT 1
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: LD_INT 25
4238: PUSH
4239: LD_INT 4
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: LD_INT 24
4255: PUSH
4256: LD_INT 800
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: PPUSH
4276: CALL_OW 69
4280: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4281: LD_ADDR_VAR 0 5
4285: PUSH
4286: LD_INT 22
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 25
4298: PUSH
4299: LD_INT 4
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: ST_TO_ADDR
// if filter > 0 then
4315: LD_VAR 0 4
4319: PUSH
4320: LD_INT 0
4322: GREATER
4323: IFFALSE 4512
// begin for i = 1 to doc do
4325: LD_ADDR_VAR 0 2
4329: PUSH
4330: DOUBLE
4331: LD_INT 1
4333: DEC
4334: ST_TO_ADDR
4335: LD_VAR 0 5
4339: PUSH
4340: FOR_TO
4341: IFFALSE 4441
// begin if IsInUnit ( doc [ i ] ) then
4343: LD_VAR 0 5
4347: PUSH
4348: LD_VAR 0 2
4352: ARRAY
4353: PPUSH
4354: CALL_OW 310
4358: IFFALSE 4375
// ComExitBuilding ( doc [ i ] ) ;
4360: LD_VAR 0 5
4364: PUSH
4365: LD_VAR 0 2
4369: ARRAY
4370: PPUSH
4371: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4375: LD_VAR 0 4
4379: PUSH
4380: LD_INT 1
4382: ARRAY
4383: PPUSH
4384: LD_INT 46
4386: PPUSH
4387: CALL_OW 296
4391: PUSH
4392: LD_INT 10
4394: LESS
4395: PUSH
4396: LD_VAR 0 5
4400: PUSH
4401: LD_VAR 0 2
4405: ARRAY
4406: PPUSH
4407: CALL_OW 314
4411: NOT
4412: AND
4413: IFFALSE 4439
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4415: LD_VAR 0 5
4419: PUSH
4420: LD_VAR 0 2
4424: ARRAY
4425: PPUSH
4426: LD_VAR 0 4
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: PPUSH
4435: CALL_OW 128
// end ;
4439: GO 4340
4441: POP
4442: POP
// for i = 1 to filter do
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: DOUBLE
4449: LD_INT 1
4451: DEC
4452: ST_TO_ADDR
4453: LD_VAR 0 4
4457: PUSH
4458: FOR_TO
4459: IFFALSE 4508
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4461: LD_VAR 0 4
4465: PUSH
4466: LD_VAR 0 2
4470: ARRAY
4471: PPUSH
4472: LD_INT 46
4474: PPUSH
4475: CALL_OW 296
4479: PUSH
4480: LD_INT 10
4482: GREATER
4483: IFFALSE 4506
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4485: LD_VAR 0 4
4489: PUSH
4490: LD_VAR 0 2
4494: ARRAY
4495: PPUSH
4496: LD_INT 47
4498: PPUSH
4499: LD_INT 12
4501: PPUSH
4502: CALL_OW 111
4506: GO 4458
4508: POP
4509: POP
// end else
4510: GO 4570
// for i = 1 to doc do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: DOUBLE
4518: LD_INT 1
4520: DEC
4521: ST_TO_ADDR
4522: LD_VAR 0 5
4526: PUSH
4527: FOR_TO
4528: IFFALSE 4568
// if not IsInUnit ( doc [ i ] ) then
4530: LD_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: ARRAY
4540: PPUSH
4541: CALL_OW 310
4545: NOT
4546: IFFALSE 4566
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4548: LD_VAR 0 5
4552: PUSH
4553: LD_VAR 0 2
4557: ARRAY
4558: PPUSH
4559: LD_INT 46
4561: PPUSH
4562: CALL_OW 120
4566: GO 4527
4568: POP
4569: POP
// end ; if event = 4 then
4570: LD_VAR 0 1
4574: PUSH
4575: LD_INT 4
4577: EQUAL
4578: IFFALSE 4829
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4580: LD_ADDR_VAR 0 6
4584: PUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 30
4597: PUSH
4598: LD_INT 5
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: ST_TO_ADDR
// for i = 1 to bac do
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_VAR 0 6
4628: PUSH
4629: FOR_TO
4630: IFFALSE 4671
// if UnitsInside ( bac [ i ] ) < 6 then
4632: LD_VAR 0 6
4636: PUSH
4637: LD_VAR 0 2
4641: ARRAY
4642: PPUSH
4643: CALL_OW 313
4647: PUSH
4648: LD_INT 6
4650: LESS
4651: IFFALSE 4669
// place := bac [ i ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: LD_VAR 0 6
4662: PUSH
4663: LD_VAR 0 2
4667: ARRAY
4668: ST_TO_ADDR
4669: GO 4629
4671: POP
4672: POP
// if place then
4673: LD_VAR 0 7
4677: IFFALSE 4829
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4679: LD_ADDR_VAR 0 4
4683: PUSH
4684: LD_INT 22
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 25
4699: PUSH
4700: LD_INT 1
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 25
4709: PUSH
4710: LD_INT 5
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 24
4724: PUSH
4725: LD_INT 1000
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: EMPTY
4738: LIST
4739: PPUSH
4740: CALL_OW 69
4744: PUSH
4745: LD_EXP 17
4749: DIFF
4750: ST_TO_ADDR
// for i = 1 to filter do
4751: LD_ADDR_VAR 0 2
4755: PUSH
4756: DOUBLE
4757: LD_INT 1
4759: DEC
4760: ST_TO_ADDR
4761: LD_VAR 0 4
4765: PUSH
4766: FOR_TO
4767: IFFALSE 4827
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4769: LD_VAR 0 4
4773: PUSH
4774: LD_VAR 0 2
4778: ARRAY
4779: PPUSH
4780: CALL_OW 310
4784: NOT
4785: PUSH
4786: LD_VAR 0 4
4790: PUSH
4791: LD_VAR 0 2
4795: ARRAY
4796: PPUSH
4797: CALL_OW 314
4801: NOT
4802: AND
4803: IFFALSE 4825
// ComEnterUnit ( filter [ i ] , place ) ;
4805: LD_VAR 0 4
4809: PUSH
4810: LD_VAR 0 2
4814: ARRAY
4815: PPUSH
4816: LD_VAR 0 7
4820: PPUSH
4821: CALL_OW 120
4825: GO 4766
4827: POP
4828: POP
// end ; end ; if event = 5 then
4829: LD_VAR 0 1
4833: PUSH
4834: LD_INT 5
4836: EQUAL
4837: IFFALSE 4991
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4839: LD_INT 12
4841: PPUSH
4842: LD_INT 81
4844: PUSH
4845: LD_INT 1
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 70
4856: PUSH
4857: LD_INT 0
4859: EQUAL
4860: IFFALSE 4991
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4862: LD_ADDR_VAR 0 8
4866: PUSH
4867: LD_INT 22
4869: PUSH
4870: LD_INT 1
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PPUSH
4891: CALL_OW 69
4895: ST_TO_ADDR
// if engs > 0 then
4896: LD_VAR 0 8
4900: PUSH
4901: LD_INT 0
4903: GREATER
4904: IFFALSE 4991
// for i = 1 to engs do
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: DOUBLE
4912: LD_INT 1
4914: DEC
4915: ST_TO_ADDR
4916: LD_VAR 0 8
4920: PUSH
4921: FOR_TO
4922: IFFALSE 4989
// if not HasTask ( engs [ i ] ) then
4924: LD_VAR 0 8
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PPUSH
4935: CALL_OW 314
4939: NOT
4940: IFFALSE 4987
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4942: LD_VAR 0 8
4946: PUSH
4947: LD_VAR 0 2
4951: ARRAY
4952: PPUSH
4953: LD_INT 32
4955: PPUSH
4956: LD_EXP 18
4960: PUSH
4961: LD_INT 1
4963: ARRAY
4964: PPUSH
4965: LD_EXP 18
4969: PUSH
4970: LD_INT 2
4972: ARRAY
4973: PPUSH
4974: LD_EXP 18
4978: PUSH
4979: LD_INT 3
4981: ARRAY
4982: PPUSH
4983: CALL_OW 145
4987: GO 4921
4989: POP
4990: POP
// end ; end ; if event = 6 then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 6
4998: EQUAL
4999: IFFALSE 5183
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
5001: LD_ADDR_VAR 0 6
5005: PUSH
5006: LD_INT 22
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 30
5018: PUSH
5019: LD_INT 5
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 69
5034: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5035: LD_VAR 0 6
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 30
5052: PUSH
5053: LD_INT 32
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 58
5062: PUSH
5063: EMPTY
5064: LIST
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: PPUSH
5074: CALL_OW 69
5078: PUSH
5079: LD_INT 0
5081: GREATER
5082: AND
5083: IFFALSE 5183
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5085: LD_ADDR_VAR 0 10
5089: PUSH
5090: LD_INT 22
5092: PUSH
5093: LD_INT 1
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: LD_INT 30
5102: PUSH
5103: LD_INT 32
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 58
5112: PUSH
5113: EMPTY
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: PUSH
5121: EMPTY
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5133: LD_ADDR_VAR 0 3
5137: PUSH
5138: LD_VAR 0 6
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 313
5151: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 1
5159: ARRAY
5160: PPUSH
5161: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 1
5172: ARRAY
5173: PPUSH
5174: LD_VAR 0 10
5178: PPUSH
5179: CALL_OW 180
// end ; end ; end ;
5183: PPOPN 10
5185: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5186: LD_VAR 0 1
5190: PUSH
5191: LD_INT 1
5193: EQUAL
5194: PUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_INT 3
5202: EQUAL
5203: AND
5204: IFFALSE 5214
// contact_am := true ;
5206: LD_ADDR_EXP 16
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ;
5214: PPOPN 2
5216: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5217: LD_VAR 0 1
5221: PPUSH
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_VAR 0 3
5231: PPUSH
5232: CALL 25378 0 3
// end ;
5236: PPOPN 3
5238: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5239: LD_VAR 0 1
5243: PPUSH
5244: CALL 25386 0 1
// end ; end_of_file
5248: PPOPN 1
5250: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5251: LD_INT 0
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5261: LD_ADDR_VAR 0 5
5265: PUSH
5266: LD_INT 5
5268: PUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: PUSH
5280: LD_EXP 1
5284: ARRAY
5285: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5286: LD_ADDR_VAR 0 6
5290: PUSH
5291: LD_INT 4
5293: PUSH
5294: LD_INT 4
5296: PUSH
5297: LD_INT 4
5299: PUSH
5300: LD_INT 5
5302: PUSH
5303: LD_INT 5
5305: PUSH
5306: LD_INT 5
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: ST_TO_ADDR
// SForce := [ ] ;
5321: LD_ADDR_EXP 11
5325: PUSH
5326: EMPTY
5327: ST_TO_ADDR
// Sikorski_Ar := false ;
5328: LD_ADDR_EXP 12
5332: PUSH
5333: LD_INT 0
5335: ST_TO_ADDR
// attacked := false ;
5336: LD_ADDR_EXP 15
5340: PUSH
5341: LD_INT 0
5343: ST_TO_ADDR
// contact_am := false ;
5344: LD_ADDR_EXP 16
5348: PUSH
5349: LD_INT 0
5351: ST_TO_ADDR
// patrol := [ ] ;
5352: LD_ADDR_EXP 17
5356: PUSH
5357: EMPTY
5358: ST_TO_ADDR
// gamma_towers := [ ] ;
5359: LD_ADDR_EXP 18
5363: PUSH
5364: EMPTY
5365: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5366: LD_INT 25
5368: PPUSH
5369: LD_STRING gamma
5371: PPUSH
5372: CALL_OW 500
// uc_side := 1 ;
5376: LD_ADDR_OWVAR 20
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// uc_nation := 1 ;
5384: LD_ADDR_OWVAR 21
5388: PUSH
5389: LD_INT 1
5391: ST_TO_ADDR
// hc_importance := 0 ;
5392: LD_ADDR_OWVAR 32
5396: PUSH
5397: LD_INT 0
5399: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5400: LD_ADDR_OWVAR 26
5404: PUSH
5405: LD_STRING Jeremy Sikorski
5407: ST_TO_ADDR
// hc_gallery := us ;
5408: LD_ADDR_OWVAR 33
5412: PUSH
5413: LD_STRING us
5415: ST_TO_ADDR
// hc_face_number := 19 ;
5416: LD_ADDR_OWVAR 34
5420: PUSH
5421: LD_INT 19
5423: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5424: LD_ADDR_OWVAR 31
5428: PUSH
5429: LD_VAR 0 5
5433: PPUSH
5434: LD_VAR 0 5
5438: PUSH
5439: LD_INT 2
5441: PLUS
5442: PPUSH
5443: CALL_OW 12
5447: PUSH
5448: LD_INT 4
5450: PUSH
5451: LD_INT 6
5453: PUSH
5454: LD_INT 3
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: ST_TO_ADDR
// hc_sex := sex_male ;
5463: LD_ADDR_OWVAR 27
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// hc_class := 1 ;
5471: LD_ADDR_OWVAR 28
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5479: LD_ADDR_OWVAR 29
5483: PUSH
5484: LD_INT 10
5486: PUSH
5487: LD_INT 11
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: ST_TO_ADDR
// sikorski := CreateHuman ;
5494: LD_ADDR_EXP 9
5498: PUSH
5499: CALL_OW 44
5503: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5504: LD_ADDR_OWVAR 26
5508: PUSH
5509: LD_STRING Lucy Donaldson
5511: ST_TO_ADDR
// hc_gallery := us ;
5512: LD_ADDR_OWVAR 33
5516: PUSH
5517: LD_STRING us
5519: ST_TO_ADDR
// hc_face_number := 2 ;
5520: LD_ADDR_OWVAR 34
5524: PUSH
5525: LD_INT 2
5527: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5528: LD_ADDR_OWVAR 31
5532: PUSH
5533: LD_VAR 0 5
5537: PPUSH
5538: LD_VAR 0 5
5542: PUSH
5543: LD_INT 2
5545: PLUS
5546: PPUSH
5547: CALL_OW 12
5551: PUSH
5552: LD_INT 6
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: ST_TO_ADDR
// hc_sex := sex_female ;
5567: LD_ADDR_OWVAR 27
5571: PUSH
5572: LD_INT 2
5574: ST_TO_ADDR
// hc_class := 1 ;
5575: LD_ADDR_OWVAR 28
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// donald := CreateHuman ;
5583: LD_ADDR_EXP 13
5587: PUSH
5588: CALL_OW 44
5592: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5593: LD_ADDR_OWVAR 26
5597: PUSH
5598: LD_STRING Peter Van Houten
5600: ST_TO_ADDR
// hc_gallery := us ;
5601: LD_ADDR_OWVAR 33
5605: PUSH
5606: LD_STRING us
5608: ST_TO_ADDR
// hc_face_number := 16 ;
5609: LD_ADDR_OWVAR 34
5613: PUSH
5614: LD_INT 16
5616: ST_TO_ADDR
// hc_sex := sex_male ;
5617: LD_ADDR_OWVAR 27
5621: PUSH
5622: LD_INT 1
5624: ST_TO_ADDR
// van := CreateHuman ;
5625: LD_ADDR_EXP 14
5629: PUSH
5630: CALL_OW 44
5634: ST_TO_ADDR
// hc_importance := 0 ;
5635: LD_ADDR_OWVAR 32
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// case dif of 1 :
5643: LD_EXP 1
5647: PUSH
5648: LD_INT 1
5650: DOUBLE
5651: EQUAL
5652: IFTRUE 5656
5654: GO 5667
5656: POP
// lw = 1 ; 2 :
5657: LD_ADDR_VAR 0 8
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
5665: GO 5714
5667: LD_INT 2
5669: DOUBLE
5670: EQUAL
5671: IFTRUE 5675
5673: GO 5694
5675: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5676: LD_ADDR_VAR 0 8
5680: PUSH
5681: LD_INT 1
5683: PPUSH
5684: LD_INT 2
5686: PPUSH
5687: CALL_OW 12
5691: ST_TO_ADDR
5692: GO 5714
5694: LD_INT 3
5696: DOUBLE
5697: EQUAL
5698: IFTRUE 5702
5700: GO 5713
5702: POP
// lw = 2 ; end ;
5703: LD_ADDR_VAR 0 8
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
5711: GO 5714
5713: POP
// case lw of 1 :
5714: LD_VAR 0 8
5718: PUSH
5719: LD_INT 1
5721: DOUBLE
5722: EQUAL
5723: IFTRUE 5727
5725: GO 5742
5727: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5728: LD_EXP 13
5732: PPUSH
5733: LD_INT 25
5735: PPUSH
5736: CALL_OW 52
5740: GO 5766
5742: LD_INT 2
5744: DOUBLE
5745: EQUAL
5746: IFTRUE 5750
5748: GO 5765
5750: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5751: LD_EXP 14
5755: PPUSH
5756: LD_INT 25
5758: PPUSH
5759: CALL_OW 52
5763: GO 5766
5765: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 30
5783: PUSH
5784: LD_INT 32
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PPUSH
5795: CALL_OW 69
5799: PUSH
5800: FOR_IN
5801: IFFALSE 5855
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5803: LD_INT 1
5805: PPUSH
5806: LD_VAR 0 5
5810: PPUSH
5811: CALL 734 0 2
5815: PPUSH
5816: LD_VAR 0 2
5820: PPUSH
5821: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5825: LD_VAR 0 2
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_INT 1
5837: PPUSH
5838: LD_VAR 0 6
5842: PPUSH
5843: CALL_OW 12
5847: ARRAY
5848: PPUSH
5849: CALL_OW 431
// end ;
5853: GO 5800
5855: POP
5856: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5857: LD_ADDR_VAR 0 7
5861: PUSH
5862: LD_INT 22
5864: PUSH
5865: LD_INT 1
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PUSH
5872: LD_INT 2
5874: PUSH
5875: LD_INT 25
5877: PUSH
5878: LD_INT 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 5
5887: PUSH
5888: EMPTY
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PPUSH
5900: CALL_OW 69
5904: ST_TO_ADDR
// for i = 1 to sol do
5905: LD_ADDR_VAR 0 2
5909: PUSH
5910: DOUBLE
5911: LD_INT 1
5913: DEC
5914: ST_TO_ADDR
5915: LD_VAR 0 7
5919: PUSH
5920: FOR_TO
5921: IFFALSE 5943
// SetTag ( sol [ i ] , 1 ) ;
5923: LD_VAR 0 7
5927: PUSH
5928: LD_VAR 0 2
5932: ARRAY
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL_OW 109
5941: GO 5920
5943: POP
5944: POP
// for i = 1 to 3 do
5945: LD_ADDR_VAR 0 2
5949: PUSH
5950: DOUBLE
5951: LD_INT 1
5953: DEC
5954: ST_TO_ADDR
5955: LD_INT 3
5957: PUSH
5958: FOR_TO
5959: IFFALSE 5983
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5961: LD_INT 3
5963: PPUSH
5964: LD_VAR 0 5
5968: PPUSH
5969: CALL 734 0 2
5973: PPUSH
5974: LD_INT 56
5976: PPUSH
5977: CALL_OW 52
5981: GO 5958
5983: POP
5984: POP
// for i = 1 to 6 do
5985: LD_ADDR_VAR 0 2
5989: PUSH
5990: DOUBLE
5991: LD_INT 1
5993: DEC
5994: ST_TO_ADDR
5995: LD_INT 6
5997: PUSH
5998: FOR_TO
5999: IFFALSE 6023
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
6001: LD_INT 3
6003: PPUSH
6004: LD_VAR 0 5
6008: PPUSH
6009: CALL 734 0 2
6013: PPUSH
6014: LD_INT 26
6016: PPUSH
6017: CALL_OW 52
6021: GO 5998
6023: POP
6024: POP
// for i = 1 to 5 do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: DOUBLE
6031: LD_INT 1
6033: DEC
6034: ST_TO_ADDR
6035: LD_INT 5
6037: PUSH
6038: FOR_TO
6039: IFFALSE 6066
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6041: LD_INT 2
6043: PPUSH
6044: LD_VAR 0 5
6048: PPUSH
6049: CALL 734 0 2
6053: PPUSH
6054: LD_INT 7
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 49
6064: GO 6038
6066: POP
6067: POP
// for i = 1 to 3 do
6068: LD_ADDR_VAR 0 2
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 3
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6106
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6084: LD_INT 4
6086: PPUSH
6087: LD_VAR 0 5
6091: PPUSH
6092: CALL 734 0 2
6096: PPUSH
6097: LD_INT 46
6099: PPUSH
6100: CALL_OW 52
6104: GO 6081
6106: POP
6107: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_INT 22
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 30
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 69
6141: PUSH
6142: FOR_IN
6143: IFFALSE 6257
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6145: LD_INT 5
6147: PPUSH
6148: LD_VAR 0 5
6152: PPUSH
6153: CALL 734 0 2
6157: PPUSH
6158: LD_VAR 0 2
6162: PPUSH
6163: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6167: LD_INT 5
6169: PPUSH
6170: LD_VAR 0 5
6174: PPUSH
6175: CALL 734 0 2
6179: PPUSH
6180: LD_VAR 0 2
6184: PPUSH
6185: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6189: LD_INT 1
6191: PPUSH
6192: LD_VAR 0 5
6196: PPUSH
6197: CALL 734 0 2
6201: PPUSH
6202: LD_VAR 0 2
6206: PPUSH
6207: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6211: LD_INT 1
6213: PPUSH
6214: LD_VAR 0 5
6218: PPUSH
6219: CALL 734 0 2
6223: PPUSH
6224: LD_VAR 0 2
6228: PPUSH
6229: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6233: LD_INT 1
6235: PPUSH
6236: LD_VAR 0 5
6240: PPUSH
6241: CALL 734 0 2
6245: PPUSH
6246: LD_VAR 0 2
6250: PPUSH
6251: CALL_OW 52
// end ;
6255: GO 6142
6257: POP
6258: POP
// if dif > 1 then
6259: LD_EXP 1
6263: PUSH
6264: LD_INT 1
6266: GREATER
6267: IFFALSE 6340
// for i = 1 to ( dif - 1 ) do
6269: LD_ADDR_VAR 0 2
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_EXP 1
6283: PUSH
6284: LD_INT 1
6286: MINUS
6287: PUSH
6288: FOR_TO
6289: IFFALSE 6338
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6291: LD_ADDR_EXP 17
6295: PUSH
6296: LD_EXP 17
6300: PUSH
6301: LD_INT 1
6303: PPUSH
6304: LD_VAR 0 5
6308: PPUSH
6309: CALL 734 0 2
6313: ADD
6314: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6315: LD_EXP 17
6319: PUSH
6320: LD_VAR 0 2
6324: ARRAY
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 49
// end ;
6336: GO 6288
6338: POP
6339: POP
// game_started := true ;
6340: LD_ADDR_EXP 10
6344: PUSH
6345: LD_INT 1
6347: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6348: LD_INT 26
6350: PPUSH
6351: LD_INT 3
6353: PPUSH
6354: LD_INT 2
6356: PPUSH
6357: LD_INT 2
6359: PPUSH
6360: LD_INT 13
6362: PPUSH
6363: CALL_OW 125
// while ( contact_am = false ) do
6367: LD_EXP 16
6371: PUSH
6372: LD_INT 0
6374: EQUAL
6375: IFFALSE 6386
// begin Wait ( 0 0$01 ) ;
6377: LD_INT 35
6379: PPUSH
6380: CALL_OW 67
// end ;
6384: GO 6367
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6386: LD_INT 8400
6388: PUSH
6389: LD_INT 6300
6391: PUSH
6392: LD_INT 5250
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: LD_EXP 1
6404: ARRAY
6405: PPUSH
6406: CALL_OW 67
// case dif of 1 :
6410: LD_EXP 1
6414: PUSH
6415: LD_INT 1
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6423
6421: GO 6598
6423: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6424: LD_INT 26
6426: PPUSH
6427: LD_INT 3
6429: PPUSH
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 2
6435: PPUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 4
6441: PUSH
6442: LD_INT 5
6444: PUSH
6445: LD_INT 5
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 1
6456: PPUSH
6457: LD_INT 4
6459: PPUSH
6460: CALL_OW 12
6464: ARRAY
6465: PPUSH
6466: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6470: LD_INT 26
6472: PPUSH
6473: LD_INT 3
6475: PPUSH
6476: LD_INT 1
6478: PPUSH
6479: LD_INT 2
6481: PPUSH
6482: LD_INT 4
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: LD_INT 5
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 1
6498: PPUSH
6499: LD_INT 3
6501: PPUSH
6502: CALL_OW 12
6506: ARRAY
6507: PPUSH
6508: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6512: LD_INT 26
6514: PPUSH
6515: LD_INT 3
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 5
6529: PUSH
6530: LD_INT 5
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 1
6540: PPUSH
6541: LD_INT 3
6543: PPUSH
6544: CALL_OW 12
6548: ARRAY
6549: PPUSH
6550: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6554: LD_INT 26
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_INT 2
6565: PPUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 1
6582: PPUSH
6583: LD_INT 3
6585: PPUSH
6586: CALL_OW 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 185
// end ; 2 :
6596: GO 7125
6598: LD_INT 2
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6819
6606: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6607: LD_INT 26
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 1
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: LD_INT 4
6621: PUSH
6622: LD_INT 5
6624: PUSH
6625: LD_INT 5
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 1
6635: PPUSH
6636: LD_INT 3
6638: PPUSH
6639: CALL_OW 12
6643: ARRAY
6644: PPUSH
6645: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6649: LD_INT 26
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_INT 1
6657: PPUSH
6658: LD_INT 2
6660: PPUSH
6661: LD_INT 4
6663: PUSH
6664: LD_INT 5
6666: PUSH
6667: LD_INT 5
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: PUSH
6675: LD_INT 1
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 12
6685: ARRAY
6686: PPUSH
6687: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6691: LD_INT 26
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 1
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: LD_INT 4
6705: PUSH
6706: LD_INT 3
6708: PUSH
6709: LD_INT 5
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 1
6719: PPUSH
6720: LD_INT 3
6722: PPUSH
6723: CALL_OW 12
6727: ARRAY
6728: PPUSH
6729: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6733: LD_INT 26
6735: PPUSH
6736: LD_INT 4
6738: PPUSH
6739: LD_INT 1
6741: PPUSH
6742: LD_INT 2
6744: PPUSH
6745: LD_INT 4
6747: PUSH
6748: LD_INT 5
6750: PUSH
6751: LD_INT 6
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: CALL_OW 12
6769: ARRAY
6770: PPUSH
6771: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6775: LD_INT 26
6777: PPUSH
6778: LD_INT 4
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: LD_INT 2
6786: PPUSH
6787: LD_INT 4
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: LD_INT 6
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 3
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: PPUSH
6813: CALL_OW 185
// end ; 3 :
6817: GO 7125
6819: LD_INT 3
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 7124
6827: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6828: LD_INT 26
6830: PPUSH
6831: LD_INT 3
6833: PPUSH
6834: LD_INT 1
6836: PPUSH
6837: LD_INT 2
6839: PPUSH
6840: LD_INT 4
6842: PUSH
6843: LD_INT 5
6845: PUSH
6846: LD_INT 5
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 1
6856: PPUSH
6857: LD_INT 3
6859: PPUSH
6860: CALL_OW 12
6864: ARRAY
6865: PPUSH
6866: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6870: LD_INT 26
6872: PPUSH
6873: LD_INT 3
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: LD_INT 2
6881: PPUSH
6882: LD_INT 4
6884: PUSH
6885: LD_INT 5
6887: PUSH
6888: LD_INT 5
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 1
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: CALL_OW 12
6906: ARRAY
6907: PPUSH
6908: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6912: LD_INT 26
6914: PPUSH
6915: LD_INT 3
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_INT 2
6923: PPUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 5
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 1
6940: PPUSH
6941: LD_INT 3
6943: PPUSH
6944: CALL_OW 12
6948: ARRAY
6949: PPUSH
6950: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6954: LD_INT 26
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_INT 2
6965: PPUSH
6966: LD_INT 4
6968: PUSH
6969: LD_INT 5
6971: PUSH
6972: LD_INT 5
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 1
6982: PPUSH
6983: LD_INT 3
6985: PPUSH
6986: CALL_OW 12
6990: ARRAY
6991: PPUSH
6992: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6996: LD_INT 26
6998: PPUSH
6999: LD_INT 4
7001: PPUSH
7002: LD_INT 1
7004: PPUSH
7005: LD_INT 2
7007: PPUSH
7008: LD_INT 4
7010: PUSH
7011: LD_INT 5
7013: PUSH
7014: LD_INT 6
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_INT 3
7027: PPUSH
7028: CALL_OW 12
7032: ARRAY
7033: PPUSH
7034: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7038: LD_INT 26
7040: PPUSH
7041: LD_INT 4
7043: PPUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_INT 2
7049: PPUSH
7050: LD_INT 4
7052: PUSH
7053: LD_INT 5
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 3
7069: PPUSH
7070: CALL_OW 12
7074: ARRAY
7075: PPUSH
7076: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7080: LD_INT 26
7082: PPUSH
7083: LD_INT 4
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 2
7091: PPUSH
7092: LD_INT 4
7094: PUSH
7095: LD_INT 5
7097: PUSH
7098: LD_INT 6
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 12
7116: ARRAY
7117: PPUSH
7118: CALL_OW 185
// end ; end ;
7122: GO 7125
7124: POP
// end ;
7125: LD_VAR 0 1
7129: RET
// every 0 0$01 do var i , filter ;
7130: GO 7132
7132: DISABLE
7133: LD_INT 0
7135: PPUSH
7136: PPUSH
// begin enable ;
7137: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7138: LD_INT 22
7140: PUSH
7141: LD_INT 1
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: PUSH
7167: LD_INT 0
7169: GREATER
7170: IFFALSE 7179
// RaiseSailEvent ( 3 ) ;
7172: LD_INT 3
7174: PPUSH
7175: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7179: LD_INT 22
7181: PUSH
7182: LD_INT 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 21
7191: PUSH
7192: LD_INT 3
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 3
7201: PUSH
7202: LD_INT 24
7204: PUSH
7205: LD_INT 1000
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: PPUSH
7221: CALL_OW 69
7225: PUSH
7226: LD_INT 0
7228: GREATER
7229: IFFALSE 7240
// RaiseSailEvent ( 1 ) else
7231: LD_INT 1
7233: PPUSH
7234: CALL_OW 427
7238: GO 7247
// RaiseSailEvent ( 2 ) ;
7240: LD_INT 2
7242: PPUSH
7243: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7247: LD_INT 22
7249: PUSH
7250: LD_INT 1
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 30
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 69
7275: PUSH
7276: LD_INT 0
7278: GREATER
7279: IFFALSE 7288
// RaiseSailEvent ( 4 ) ;
7281: LD_INT 4
7283: PPUSH
7284: CALL_OW 427
// if gamma_towers > 0 then
7288: LD_EXP 18
7292: PUSH
7293: LD_INT 0
7295: GREATER
7296: IFFALSE 7305
// RaiseSailEvent ( 5 ) ;
7298: LD_INT 5
7300: PPUSH
7301: CALL_OW 427
// end ;
7305: PPOPN 2
7307: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7308: GO 7310
7310: DISABLE
7311: LD_INT 0
7313: PPUSH
7314: PPUSH
// begin enable ;
7315: ENABLE
// if new_veh > 0 then
7316: LD_EXP 19
7320: PUSH
7321: LD_INT 0
7323: GREATER
7324: IFFALSE 7511
// while ( new_veh > 0 ) do
7326: LD_EXP 19
7330: PUSH
7331: LD_INT 0
7333: GREATER
7334: IFFALSE 7511
// begin Wait ( 0 0$01 ) ;
7336: LD_INT 35
7338: PPUSH
7339: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7343: LD_INT 26
7345: PPUSH
7346: CALL_OW 461
7350: PUSH
7351: LD_INT 2
7353: EQUAL
7354: IFFALSE 7509
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7356: LD_ADDR_VAR 0 1
7360: PUSH
7361: LD_INT 2
7363: PUSH
7364: LD_INT 3
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_INT 4
7384: PPUSH
7385: CALL_OW 12
7389: ARRAY
7390: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: IN
7406: IFFALSE 7441
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_INT 4
7415: PUSH
7416: LD_INT 5
7418: PUSH
7419: LD_INT 7
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 1
7429: PPUSH
7430: LD_INT 3
7432: PPUSH
7433: CALL_OW 12
7437: ARRAY
7438: ST_TO_ADDR
7439: GO 7472
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7441: LD_ADDR_VAR 0 2
7445: PUSH
7446: LD_INT 5
7448: PUSH
7449: LD_INT 7
7451: PUSH
7452: LD_INT 6
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 1
7462: PPUSH
7463: LD_INT 3
7465: PPUSH
7466: CALL_OW 12
7470: ARRAY
7471: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7472: LD_INT 26
7474: PPUSH
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: LD_INT 2
7485: PPUSH
7486: LD_VAR 0 2
7490: PPUSH
7491: CALL_OW 125
// new_veh := new_veh - 1 ;
7495: LD_ADDR_EXP 19
7499: PUSH
7500: LD_EXP 19
7504: PUSH
7505: LD_INT 1
7507: MINUS
7508: ST_TO_ADDR
// end ; end ;
7509: GO 7326
// end ;
7511: PPOPN 2
7513: END
// every 0 0$01 do var v , filter , am_cmeh ;
7514: GO 7516
7516: DISABLE
7517: LD_INT 0
7519: PPUSH
7520: PPUSH
7521: PPUSH
// begin enable ;
7522: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7523: LD_ADDR_VAR 0 3
7527: PUSH
7528: LD_INT 56
7530: PPUSH
7531: CALL_OW 313
7535: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7536: LD_ADDR_VAR 0 2
7540: PUSH
7541: LD_INT 22
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 33
7553: PUSH
7554: LD_INT 2
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 50
7563: PUSH
7564: EMPTY
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: ST_TO_ADDR
// if filter > 0 then
7580: LD_VAR 0 2
7584: PUSH
7585: LD_INT 0
7587: GREATER
7588: IFFALSE 7656
// begin for v in filter do
7590: LD_ADDR_VAR 0 1
7594: PUSH
7595: LD_VAR 0 2
7599: PUSH
7600: FOR_IN
7601: IFFALSE 7654
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 312
7612: NOT
7613: PUSH
7614: LD_VAR 0 1
7618: PPUSH
7619: CALL_OW 302
7623: AND
7624: IFFALSE 7652
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_VAR 0 3
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_INT 3
7641: PPUSH
7642: CALL_OW 12
7646: ARRAY
7647: PPUSH
7648: CALL_OW 135
// end ;
7652: GO 7600
7654: POP
7655: POP
// end ; end ;
7656: PPOPN 3
7658: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7659: LD_INT 33
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_INT 3
7671: PUSH
7672: LD_INT 34
7674: PUSH
7675: LD_INT 13
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 69
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: LD_INT 5
7700: PUSH
7701: LD_INT 7
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_EXP 1
7713: ARRAY
7714: EQUAL
7715: PUSH
7716: LD_INT 26
7718: PPUSH
7719: CALL_OW 461
7723: PUSH
7724: LD_INT 2
7726: EQUAL
7727: AND
7728: IFFALSE 7939
7730: GO 7732
7732: DISABLE
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
// begin enable ;
7738: ENABLE
// if Sikorski_Ar then
7739: LD_EXP 12
7743: IFFALSE 7820
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7745: LD_ADDR_EXP 11
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: LD_INT 22
7755: PUSH
7756: LD_INT 4
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_INT 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 33
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: LD_INT 34
7788: PUSH
7789: LD_INT 13
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: PPUSH
7813: CALL_OW 69
7817: ST_TO_ADDR
7818: GO 7861
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7820: LD_ADDR_EXP 11
7824: PUSH
7825: LD_INT 33
7827: PUSH
7828: LD_INT 2
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 3
7837: PUSH
7838: LD_INT 34
7840: PUSH
7841: LD_INT 13
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 69
7860: ST_TO_ADDR
// repeat begin for un in SForce do
7861: LD_ADDR_VAR 0 2
7865: PUSH
7866: LD_EXP 11
7870: PUSH
7871: FOR_IN
7872: IFFALSE 7927
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7874: LD_ADDR_VAR 0 3
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PPUSH
7889: CALL_OW 69
7893: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7894: LD_VAR 0 2
7898: PPUSH
7899: LD_VAR 0 3
7903: PPUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: CALL_OW 74
7913: PPUSH
7914: CALL_OW 115
// Wait ( 0 0$01 ) ;
7918: LD_INT 35
7920: PPUSH
7921: CALL_OW 67
// end ;
7925: GO 7871
7927: POP
7928: POP
// end until SForce = 0 ;
7929: LD_EXP 11
7933: PUSH
7934: LD_INT 0
7936: EQUAL
7937: IFFALSE 7861
// end ;
7939: PPOPN 3
7941: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7949: LD_ADDR_VAR 0 6
7953: PUSH
7954: LD_INT 14
7956: PPUSH
7957: EMPTY
7958: PPUSH
7959: CALL_OW 70
7963: ST_TO_ADDR
// if tmp then
7964: LD_VAR 0 6
7968: IFFALSE 8002
// for i in tmp do
7970: LD_ADDR_VAR 0 3
7974: PUSH
7975: LD_VAR 0 6
7979: PUSH
7980: FOR_IN
7981: IFFALSE 8000
// ComMoveXY ( i , 42 , 23 ) ;
7983: LD_VAR 0 3
7987: PPUSH
7988: LD_INT 42
7990: PPUSH
7991: LD_INT 23
7993: PPUSH
7994: CALL_OW 111
7998: GO 7980
8000: POP
8001: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
8002: LD_INT 14
8004: PPUSH
8005: LD_INT 1
8007: PPUSH
8008: CALL_OW 286
// uc_side := 4 ;
8012: LD_ADDR_OWVAR 20
8016: PUSH
8017: LD_INT 4
8019: ST_TO_ADDR
// uc_nation := 1 ;
8020: LD_ADDR_OWVAR 21
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8028: LD_ADDR_OWVAR 37
8032: PUSH
8033: LD_INT 4
8035: ST_TO_ADDR
// vc_control := control_manual ;
8036: LD_ADDR_OWVAR 38
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// vc_engine := engine_combustion ;
8044: LD_ADDR_OWVAR 39
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8052: LD_ADDR_OWVAR 40
8056: PUSH
8057: LD_INT 4
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: LD_INT 7
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: PUSH
8071: LD_EXP 1
8075: ARRAY
8076: ST_TO_ADDR
// veh := CreateVehicle ;
8077: LD_ADDR_VAR 0 5
8081: PUSH
8082: CALL_OW 45
8086: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8087: LD_VAR 0 5
8091: PPUSH
8092: LD_INT 2
8094: PPUSH
8095: LD_INT 0
8097: PPUSH
8098: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8102: LD_EXP 9
8106: PPUSH
8107: LD_VAR 0 5
8111: PPUSH
8112: CALL_OW 52
// SetMark ( veh , 1 ) ;
8116: LD_VAR 0 5
8120: PPUSH
8121: LD_INT 1
8123: PPUSH
8124: CALL_OW 242
// while ( num > 0 ) do
8128: LD_VAR 0 1
8132: PUSH
8133: LD_INT 0
8135: GREATER
8136: IFFALSE 8303
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8138: LD_INT 3
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 4
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: PUSH
8156: LD_EXP 1
8160: PPUSH
8161: LD_INT 4
8163: PPUSH
8164: CALL_OW 12
8168: ARRAY
8169: PPUSH
8170: LD_INT 1
8172: PPUSH
8173: LD_INT 4
8175: PUSH
8176: LD_INT 5
8178: PUSH
8179: LD_INT 5
8181: PUSH
8182: LD_INT 7
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: LD_EXP 1
8198: PUSH
8199: LD_INT 1
8201: PLUS
8202: PPUSH
8203: CALL_OW 12
8207: ARRAY
8208: PPUSH
8209: LD_INT 11
8211: PPUSH
8212: LD_INT 2
8214: PPUSH
8215: LD_INT 5
8217: PUSH
8218: LD_INT 6
8220: PUSH
8221: LD_INT 7
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: PUSH
8229: LD_EXP 1
8233: ARRAY
8234: PPUSH
8235: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8239: LD_ADDR_VAR 0 4
8243: PUSH
8244: LD_INT 22
8246: PUSH
8247: LD_INT 4
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 69
8258: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8259: LD_VAR 0 4
8263: PUSH
8264: LD_VAR 0 4
8268: ARRAY
8269: PPUSH
8270: LD_INT 36
8272: PPUSH
8273: LD_INT 18
8275: PPUSH
8276: CALL_OW 111
// Wait ( 0 0$02 ) ;
8280: LD_INT 70
8282: PPUSH
8283: CALL_OW 67
// num := num - 1 ;
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_VAR 0 1
8296: PUSH
8297: LD_INT 1
8299: MINUS
8300: ST_TO_ADDR
// end ;
8301: GO 8128
// end ;
8303: LD_VAR 0 2
8307: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8308: LD_EXP 17
8312: PUSH
8313: LD_INT 0
8315: GREATER
8316: IFFALSE 8585
8318: GO 8320
8320: DISABLE
8321: LD_INT 0
8323: PPUSH
// begin enable ;
8324: ENABLE
// for i = 1 to patrol do
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: DOUBLE
8331: LD_INT 1
8333: DEC
8334: ST_TO_ADDR
8335: LD_EXP 17
8339: PUSH
8340: FOR_TO
8341: IFFALSE 8583
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8343: LD_EXP 17
8347: PUSH
8348: LD_VAR 0 1
8352: ARRAY
8353: PUSH
8354: LD_EXP 17
8358: PUSH
8359: LD_VAR 0 1
8363: ARRAY
8364: PPUSH
8365: CALL_OW 300
8369: AND
8370: PUSH
8371: LD_EXP 17
8375: PUSH
8376: LD_VAR 0 1
8380: ARRAY
8381: PPUSH
8382: CALL_OW 314
8386: NOT
8387: AND
8388: IFFALSE 8538
// case i of 1 :
8390: LD_VAR 0 1
8394: PUSH
8395: LD_INT 1
8397: DOUBLE
8398: EQUAL
8399: IFTRUE 8403
8401: GO 8466
8403: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8404: LD_EXP 17
8408: PUSH
8409: LD_VAR 0 1
8413: ARRAY
8414: PPUSH
8415: LD_INT 53
8417: PPUSH
8418: LD_INT 91
8420: PPUSH
8421: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8425: LD_EXP 17
8429: PUSH
8430: LD_VAR 0 1
8434: ARRAY
8435: PPUSH
8436: LD_INT 245
8438: PPUSH
8439: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8443: LD_EXP 17
8447: PUSH
8448: LD_VAR 0 1
8452: ARRAY
8453: PPUSH
8454: LD_INT 24
8456: PPUSH
8457: LD_INT 26
8459: PPUSH
8460: CALL_OW 171
// end ; 2 :
8464: GO 8538
8466: LD_INT 2
8468: DOUBLE
8469: EQUAL
8470: IFTRUE 8474
8472: GO 8537
8474: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8475: LD_EXP 17
8479: PUSH
8480: LD_VAR 0 1
8484: ARRAY
8485: PPUSH
8486: LD_INT 83
8488: PPUSH
8489: LD_INT 57
8491: PPUSH
8492: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8496: LD_EXP 17
8500: PUSH
8501: LD_VAR 0 1
8505: ARRAY
8506: PPUSH
8507: LD_INT 245
8509: PPUSH
8510: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8514: LD_EXP 17
8518: PUSH
8519: LD_VAR 0 1
8523: ARRAY
8524: PPUSH
8525: LD_INT 47
8527: PPUSH
8528: LD_INT 53
8530: PPUSH
8531: CALL_OW 171
// end ; end ;
8535: GO 8538
8537: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8538: LD_EXP 17
8542: PUSH
8543: LD_VAR 0 1
8547: ARRAY
8548: PPUSH
8549: CALL_OW 256
8553: PUSH
8554: LD_INT 1000
8556: LESS
8557: IFFALSE 8581
// patrol := patrol diff patrol [ i ] ;
8559: LD_ADDR_EXP 17
8563: PUSH
8564: LD_EXP 17
8568: PUSH
8569: LD_EXP 17
8573: PUSH
8574: LD_VAR 0 1
8578: ARRAY
8579: DIFF
8580: ST_TO_ADDR
// end ;
8581: GO 8340
8583: POP
8584: POP
// end ;
8585: PPOPN 1
8587: END
// every 0 0$10 do
8588: GO 8590
8590: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8591: LD_INT 42000
8593: PUSH
8594: LD_INT 37800
8596: PUSH
8597: LD_INT 33600
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: PUSH
8605: LD_EXP 1
8609: ARRAY
8610: PPUSH
8611: CALL_OW 67
// if not contact_am then
8615: LD_EXP 16
8619: NOT
8620: IFFALSE 8630
// contact_am := true ;
8622: LD_ADDR_EXP 16
8626: PUSH
8627: LD_INT 1
8629: ST_TO_ADDR
// end ; end_of_file
8630: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8631: LD_INT 0
8633: PPUSH
// comp_tested := false ;
8634: LD_ADDR_EXP 22
8638: PUSH
8639: LD_INT 0
8641: ST_TO_ADDR
// sikorski_run := false ;
8642: LD_ADDR_EXP 23
8646: PUSH
8647: LD_INT 0
8649: ST_TO_ADDR
// InGameOn ;
8650: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8654: LD_INT 5
8656: PPUSH
8657: LD_INT 4
8659: PPUSH
8660: CALL_OW 86
// wait ( 0 0$2 ) ;
8664: LD_INT 70
8666: PPUSH
8667: CALL_OW 67
// CenterOnUnits ( commander ) ;
8671: LD_EXP 3
8675: PPUSH
8676: CALL_OW 85
// wait ( 0 0$01 ) ;
8680: LD_INT 35
8682: PPUSH
8683: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8687: LD_EXP 2
8691: PPUSH
8692: LD_STRING Dpop1
8694: PPUSH
8695: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8699: LD_EXP 3
8703: PPUSH
8704: LD_STRING Dcomm1
8706: PPUSH
8707: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8711: LD_EXP 2
8715: PPUSH
8716: LD_STRING Dpop2
8718: PPUSH
8719: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8723: LD_EXP 3
8727: PPUSH
8728: LD_STRING Dcomm2
8730: PPUSH
8731: CALL_OW 88
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8739: LD_STRING T1
8741: PPUSH
8742: CALL_OW 337
// end ;
8746: LD_VAR 0 1
8750: RET
// every 0 0$01 trigger timer > 2 2$01 do
8751: LD_EXP 24
8755: PUSH
8756: LD_INT 4235
8758: GREATER
8759: IFFALSE 8776
8761: GO 8763
8763: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8764: LD_EXP 5
8768: PPUSH
8769: LD_STRING DKap1
8771: PPUSH
8772: CALL_OW 94
// end ;
8776: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8777: LD_EXP 24
8781: PUSH
8782: LD_INT 46200
8784: PUSH
8785: LD_INT 52500
8787: PUSH
8788: LD_INT 63000
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: PUSH
8796: LD_EXP 1
8800: ARRAY
8801: GREATER
8802: IFFALSE 9169
8804: GO 8806
8806: DISABLE
8807: LD_INT 0
8809: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8810: LD_EXP 5
8814: PPUSH
8815: LD_STRING DKap2
8817: PPUSH
8818: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8822: LD_INT 10
8824: PPUSH
8825: CALL_OW 67
// Say ( commander , Dcommk ) ;
8829: LD_EXP 3
8833: PPUSH
8834: LD_STRING Dcommk
8836: PPUSH
8837: CALL_OW 88
// Wait ( 0 0$44 ) ;
8841: LD_INT 1540
8843: PPUSH
8844: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8848: LD_EXP 5
8852: PPUSH
8853: LD_INT 3
8855: PPUSH
8856: LD_INT 0
8858: PPUSH
8859: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8863: LD_EXP 5
8867: PPUSH
8868: CALL_OW 87
// Wait ( 0 0$10 ) ;
8872: LD_INT 350
8874: PPUSH
8875: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8879: LD_INT 6
8881: PUSH
8882: LD_INT 7
8884: PUSH
8885: LD_INT 8
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: PUSH
8893: LD_EXP 1
8897: ARRAY
8898: PPUSH
8899: CALL 7942 0 1
// Wait ( 2 2$00 ) ;
8903: LD_INT 4200
8905: PPUSH
8906: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8910: LD_INT 33
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: LD_INT 34
8925: PUSH
8926: LD_INT 13
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 69
8945: PUSH
8946: LD_INT 3
8948: LESS
8949: IFFALSE 8960
// Wait ( 0 0$01 ) ;
8951: LD_INT 35
8953: PPUSH
8954: CALL_OW 67
8958: GO 8910
// uc_side := 4 ;
8960: LD_ADDR_OWVAR 20
8964: PUSH
8965: LD_INT 4
8967: ST_TO_ADDR
// uc_nation := 1 ;
8968: LD_ADDR_OWVAR 21
8972: PUSH
8973: LD_INT 1
8975: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: DOUBLE
8982: LD_INT 1
8984: DEC
8985: ST_TO_ADDR
8986: LD_INT 4
8988: PUSH
8989: LD_INT 5
8991: PUSH
8992: LD_INT 6
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: LD_EXP 1
9004: ARRAY
9005: PUSH
9006: FOR_TO
9007: IFFALSE 9049
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
9009: LD_INT 1
9011: PPUSH
9012: LD_INT 5
9014: PUSH
9015: LD_INT 6
9017: PUSH
9018: LD_INT 7
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: PUSH
9026: LD_EXP 1
9030: ARRAY
9031: PPUSH
9032: CALL 734 0 2
9036: PPUSH
9037: LD_INT 4
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL_OW 49
9047: GO 9006
9049: POP
9050: POP
// sikorski_ar := true ;
9051: LD_ADDR_EXP 12
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9059: LD_EXP 9
9063: PPUSH
9064: LD_STRING DSik1
9066: PPUSH
9067: CALL_OW 94
// Wait ( 0 0$30 ) ;
9071: LD_INT 1050
9073: PPUSH
9074: CALL_OW 67
// uc_side := 4 ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_INT 4
9085: ST_TO_ADDR
// uc_nation := 1 ;
9086: LD_ADDR_OWVAR 21
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9094: LD_ADDR_VAR 0 1
9098: PUSH
9099: DOUBLE
9100: LD_INT 1
9102: DEC
9103: ST_TO_ADDR
9104: LD_INT 3
9106: PUSH
9107: LD_INT 4
9109: PUSH
9110: LD_INT 4
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: LD_EXP 1
9122: ARRAY
9123: PUSH
9124: FOR_TO
9125: IFFALSE 9167
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9127: LD_INT 1
9129: PPUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: LD_EXP 1
9148: ARRAY
9149: PPUSH
9150: CALL 734 0 2
9154: PPUSH
9155: LD_INT 13
9157: PPUSH
9158: LD_INT 0
9160: PPUSH
9161: CALL_OW 49
9165: GO 9124
9167: POP
9168: POP
// end ;
9169: PPOPN 1
9171: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9172: LD_EXP 9
9176: PPUSH
9177: CALL_OW 256
9181: PUSH
9182: LD_INT 650
9184: LESS
9185: IFFALSE 9267
9187: GO 9189
9189: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9190: LD_EXP 9
9194: PPUSH
9195: LD_STRING DSik2
9197: PPUSH
9198: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9202: LD_EXP 9
9206: PPUSH
9207: CALL_OW 300
9211: IFFALSE 9267
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9213: LD_EXP 9
9217: PPUSH
9218: LD_INT 2
9220: PPUSH
9221: CALL_OW 113
// Wait ( 0 0$01 ) ;
9225: LD_INT 35
9227: PPUSH
9228: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9232: LD_EXP 9
9236: PPUSH
9237: LD_INT 2
9239: PPUSH
9240: CALL_OW 308
9244: IFFALSE 9265
// begin RemoveUnit ( sikorski ) ;
9246: LD_EXP 9
9250: PPUSH
9251: CALL_OW 64
// break ;
9255: GO 9267
// sikorski_run := true ;
9257: LD_ADDR_EXP 23
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// end ; end ;
9265: GO 9202
// end ;
9267: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9268: LD_EXP 9
9272: PPUSH
9273: CALL_OW 256
9277: PUSH
9278: LD_INT 1000
9280: LESS
9281: IFFALSE 9298
9283: GO 9285
9285: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9286: LD_EXP 9
9290: PPUSH
9291: LD_STRING DSkik3
9293: PPUSH
9294: CALL_OW 88
9298: END
// every 1 1$45 + 0 0$15 do
9299: GO 9301
9301: DISABLE
// begin enable ;
9302: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9303: LD_INT 1
9305: PPUSH
9306: LD_INT 5
9308: PPUSH
9309: CALL_OW 12
9313: PPUSH
9314: LD_INT 8
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9324: LD_INT 350
9326: PPUSH
9327: LD_INT 1295
9329: PPUSH
9330: CALL_OW 12
9334: PPUSH
9335: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9339: LD_INT 1
9341: PPUSH
9342: LD_INT 5
9344: PPUSH
9345: CALL_OW 12
9349: PPUSH
9350: LD_INT 1
9352: PPUSH
9353: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9357: LD_INT 350
9359: PPUSH
9360: LD_INT 1050
9362: PPUSH
9363: CALL_OW 12
9367: PPUSH
9368: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9372: LD_EXP 24
9376: PUSH
9377: LD_INT 25200
9379: PUSH
9380: LD_INT 23100
9382: PUSH
9383: LD_INT 21000
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_EXP 1
9395: ARRAY
9396: LESSEQUAL
9397: IFFALSE 9420
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9399: LD_INT 1
9401: PPUSH
9402: LD_INT 5
9404: PPUSH
9405: CALL_OW 12
9409: PPUSH
9410: LD_INT 8
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: CALL_OW 55
// end ;
9420: END
// export timer ; every 1 do
9421: GO 9423
9423: DISABLE
// timer := 0 0$00 ;
9424: LD_ADDR_EXP 24
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
9432: END
// every 0 0$01 do
9433: GO 9435
9435: DISABLE
// begin enable ;
9436: ENABLE
// Display_Strings := [ #tick , timer ] ;
9437: LD_ADDR_OWVAR 47
9441: PUSH
9442: LD_STRING #tick
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9454: LD_ADDR_EXP 24
9458: PUSH
9459: LD_EXP 24
9463: PUSH
9464: LD_INT 35
9466: PLUS
9467: ST_TO_ADDR
// end ; end_of_file
9468: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
9469: LD_INT 0
9471: PPUSH
// ar_miner := 81 ;
9472: LD_ADDR_EXP 32
9476: PUSH
9477: LD_INT 81
9479: ST_TO_ADDR
// ar_crane := 88 ;
9480: LD_ADDR_EXP 31
9484: PUSH
9485: LD_INT 88
9487: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9488: LD_ADDR_EXP 26
9492: PUSH
9493: LD_INT 89
9495: ST_TO_ADDR
// us_hack := 99 ;
9496: LD_ADDR_EXP 27
9500: PUSH
9501: LD_INT 99
9503: ST_TO_ADDR
// us_artillery := 97 ;
9504: LD_ADDR_EXP 28
9508: PUSH
9509: LD_INT 97
9511: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9512: LD_ADDR_EXP 29
9516: PUSH
9517: LD_INT 91
9519: ST_TO_ADDR
// ar_mortar := 92 ;
9520: LD_ADDR_EXP 30
9524: PUSH
9525: LD_INT 92
9527: ST_TO_ADDR
// ru_flamethrower := 93 ;
9528: LD_ADDR_EXP 33
9532: PUSH
9533: LD_INT 93
9535: ST_TO_ADDR
// ru_radar := 98 ;
9536: LD_ADDR_EXP 25
9540: PUSH
9541: LD_INT 98
9543: ST_TO_ADDR
// tech_Artillery := 80 ;
9544: LD_ADDR_EXP 34
9548: PUSH
9549: LD_INT 80
9551: ST_TO_ADDR
// tech_RadMat := 81 ;
9552: LD_ADDR_EXP 35
9556: PUSH
9557: LD_INT 81
9559: ST_TO_ADDR
// tech_BasicTools := 82 ;
9560: LD_ADDR_EXP 36
9564: PUSH
9565: LD_INT 82
9567: ST_TO_ADDR
// tech_Cargo := 83 ;
9568: LD_ADDR_EXP 37
9572: PUSH
9573: LD_INT 83
9575: ST_TO_ADDR
// tech_Track := 84 ;
9576: LD_ADDR_EXP 38
9580: PUSH
9581: LD_INT 84
9583: ST_TO_ADDR
// tech_Crane := 85 ;
9584: LD_ADDR_EXP 39
9588: PUSH
9589: LD_INT 85
9591: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9592: LD_ADDR_EXP 40
9596: PUSH
9597: LD_INT 86
9599: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9600: LD_ADDR_EXP 41
9604: PUSH
9605: LD_INT 87
9607: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
9608: LD_ADDR_EXP 42
9612: PUSH
9613: LD_INT 88
9615: ST_TO_ADDR
// end ;
9616: LD_VAR 0 1
9620: RET
// every 1 do
9621: GO 9623
9623: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
9624: CALL 9469 0 0
9628: END
// every 0 0$1 do
9629: GO 9631
9631: DISABLE
// begin enable ;
9632: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9633: LD_STRING updateTimer(
9635: PUSH
9636: LD_OWVAR 1
9640: STR
9641: PUSH
9642: LD_STRING );
9644: STR
9645: PPUSH
9646: CALL_OW 559
// end ;
9650: END
// export function SOS_MapStart ( ) ; begin
9651: LD_INT 0
9653: PPUSH
// if streamModeActive then
9654: LD_EXP 43
9658: IFFALSE 9667
// DefineStreamItems ( true ) ;
9660: LD_INT 1
9662: PPUSH
9663: CALL 11321 0 1
// UpdateFactoryWaypoints ( ) ;
9667: CALL 24182 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9671: CALL 24439 0 0
// end ;
9675: LD_VAR 0 1
9679: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9680: LD_INT 0
9682: PPUSH
// if p2 = 100 then
9683: LD_VAR 0 2
9687: PUSH
9688: LD_INT 100
9690: EQUAL
9691: IFFALSE 10694
// begin if not StreamModeActive then
9693: LD_EXP 43
9697: NOT
9698: IFFALSE 9708
// StreamModeActive := true ;
9700: LD_ADDR_EXP 43
9704: PUSH
9705: LD_INT 1
9707: ST_TO_ADDR
// if p3 = 0 then
9708: LD_VAR 0 3
9712: PUSH
9713: LD_INT 0
9715: EQUAL
9716: IFFALSE 9722
// InitStreamMode ;
9718: CALL 10857 0 0
// if p3 = 1 then
9722: LD_VAR 0 3
9726: PUSH
9727: LD_INT 1
9729: EQUAL
9730: IFFALSE 9740
// sRocket := true ;
9732: LD_ADDR_EXP 48
9736: PUSH
9737: LD_INT 1
9739: ST_TO_ADDR
// if p3 = 2 then
9740: LD_VAR 0 3
9744: PUSH
9745: LD_INT 2
9747: EQUAL
9748: IFFALSE 9758
// sSpeed := true ;
9750: LD_ADDR_EXP 47
9754: PUSH
9755: LD_INT 1
9757: ST_TO_ADDR
// if p3 = 3 then
9758: LD_VAR 0 3
9762: PUSH
9763: LD_INT 3
9765: EQUAL
9766: IFFALSE 9776
// sEngine := true ;
9768: LD_ADDR_EXP 49
9772: PUSH
9773: LD_INT 1
9775: ST_TO_ADDR
// if p3 = 4 then
9776: LD_VAR 0 3
9780: PUSH
9781: LD_INT 4
9783: EQUAL
9784: IFFALSE 9794
// sSpec := true ;
9786: LD_ADDR_EXP 46
9790: PUSH
9791: LD_INT 1
9793: ST_TO_ADDR
// if p3 = 5 then
9794: LD_VAR 0 3
9798: PUSH
9799: LD_INT 5
9801: EQUAL
9802: IFFALSE 9812
// sLevel := true ;
9804: LD_ADDR_EXP 50
9808: PUSH
9809: LD_INT 1
9811: ST_TO_ADDR
// if p3 = 6 then
9812: LD_VAR 0 3
9816: PUSH
9817: LD_INT 6
9819: EQUAL
9820: IFFALSE 9830
// sArmoury := true ;
9822: LD_ADDR_EXP 51
9826: PUSH
9827: LD_INT 1
9829: ST_TO_ADDR
// if p3 = 7 then
9830: LD_VAR 0 3
9834: PUSH
9835: LD_INT 7
9837: EQUAL
9838: IFFALSE 9848
// sRadar := true ;
9840: LD_ADDR_EXP 52
9844: PUSH
9845: LD_INT 1
9847: ST_TO_ADDR
// if p3 = 8 then
9848: LD_VAR 0 3
9852: PUSH
9853: LD_INT 8
9855: EQUAL
9856: IFFALSE 9866
// sBunker := true ;
9858: LD_ADDR_EXP 53
9862: PUSH
9863: LD_INT 1
9865: ST_TO_ADDR
// if p3 = 9 then
9866: LD_VAR 0 3
9870: PUSH
9871: LD_INT 9
9873: EQUAL
9874: IFFALSE 9884
// sHack := true ;
9876: LD_ADDR_EXP 54
9880: PUSH
9881: LD_INT 1
9883: ST_TO_ADDR
// if p3 = 10 then
9884: LD_VAR 0 3
9888: PUSH
9889: LD_INT 10
9891: EQUAL
9892: IFFALSE 9902
// sFire := true ;
9894: LD_ADDR_EXP 55
9898: PUSH
9899: LD_INT 1
9901: ST_TO_ADDR
// if p3 = 11 then
9902: LD_VAR 0 3
9906: PUSH
9907: LD_INT 11
9909: EQUAL
9910: IFFALSE 9920
// sRefresh := true ;
9912: LD_ADDR_EXP 56
9916: PUSH
9917: LD_INT 1
9919: ST_TO_ADDR
// if p3 = 12 then
9920: LD_VAR 0 3
9924: PUSH
9925: LD_INT 12
9927: EQUAL
9928: IFFALSE 9938
// sExp := true ;
9930: LD_ADDR_EXP 57
9934: PUSH
9935: LD_INT 1
9937: ST_TO_ADDR
// if p3 = 13 then
9938: LD_VAR 0 3
9942: PUSH
9943: LD_INT 13
9945: EQUAL
9946: IFFALSE 9956
// sDepot := true ;
9948: LD_ADDR_EXP 58
9952: PUSH
9953: LD_INT 1
9955: ST_TO_ADDR
// if p3 = 14 then
9956: LD_VAR 0 3
9960: PUSH
9961: LD_INT 14
9963: EQUAL
9964: IFFALSE 9974
// sFlag := true ;
9966: LD_ADDR_EXP 59
9970: PUSH
9971: LD_INT 1
9973: ST_TO_ADDR
// if p3 = 15 then
9974: LD_VAR 0 3
9978: PUSH
9979: LD_INT 15
9981: EQUAL
9982: IFFALSE 9992
// sKamikadze := true ;
9984: LD_ADDR_EXP 67
9988: PUSH
9989: LD_INT 1
9991: ST_TO_ADDR
// if p3 = 16 then
9992: LD_VAR 0 3
9996: PUSH
9997: LD_INT 16
9999: EQUAL
10000: IFFALSE 10010
// sTroll := true ;
10002: LD_ADDR_EXP 68
10006: PUSH
10007: LD_INT 1
10009: ST_TO_ADDR
// if p3 = 17 then
10010: LD_VAR 0 3
10014: PUSH
10015: LD_INT 17
10017: EQUAL
10018: IFFALSE 10028
// sSlow := true ;
10020: LD_ADDR_EXP 69
10024: PUSH
10025: LD_INT 1
10027: ST_TO_ADDR
// if p3 = 18 then
10028: LD_VAR 0 3
10032: PUSH
10033: LD_INT 18
10035: EQUAL
10036: IFFALSE 10046
// sLack := true ;
10038: LD_ADDR_EXP 70
10042: PUSH
10043: LD_INT 1
10045: ST_TO_ADDR
// if p3 = 19 then
10046: LD_VAR 0 3
10050: PUSH
10051: LD_INT 19
10053: EQUAL
10054: IFFALSE 10064
// sTank := true ;
10056: LD_ADDR_EXP 72
10060: PUSH
10061: LD_INT 1
10063: ST_TO_ADDR
// if p3 = 20 then
10064: LD_VAR 0 3
10068: PUSH
10069: LD_INT 20
10071: EQUAL
10072: IFFALSE 10082
// sRemote := true ;
10074: LD_ADDR_EXP 73
10078: PUSH
10079: LD_INT 1
10081: ST_TO_ADDR
// if p3 = 21 then
10082: LD_VAR 0 3
10086: PUSH
10087: LD_INT 21
10089: EQUAL
10090: IFFALSE 10100
// sPowell := true ;
10092: LD_ADDR_EXP 74
10096: PUSH
10097: LD_INT 1
10099: ST_TO_ADDR
// if p3 = 22 then
10100: LD_VAR 0 3
10104: PUSH
10105: LD_INT 22
10107: EQUAL
10108: IFFALSE 10118
// sTeleport := true ;
10110: LD_ADDR_EXP 77
10114: PUSH
10115: LD_INT 1
10117: ST_TO_ADDR
// if p3 = 23 then
10118: LD_VAR 0 3
10122: PUSH
10123: LD_INT 23
10125: EQUAL
10126: IFFALSE 10136
// sOilTower := true ;
10128: LD_ADDR_EXP 79
10132: PUSH
10133: LD_INT 1
10135: ST_TO_ADDR
// if p3 = 24 then
10136: LD_VAR 0 3
10140: PUSH
10141: LD_INT 24
10143: EQUAL
10144: IFFALSE 10154
// sShovel := true ;
10146: LD_ADDR_EXP 80
10150: PUSH
10151: LD_INT 1
10153: ST_TO_ADDR
// if p3 = 25 then
10154: LD_VAR 0 3
10158: PUSH
10159: LD_INT 25
10161: EQUAL
10162: IFFALSE 10172
// sSheik := true ;
10164: LD_ADDR_EXP 81
10168: PUSH
10169: LD_INT 1
10171: ST_TO_ADDR
// if p3 = 26 then
10172: LD_VAR 0 3
10176: PUSH
10177: LD_INT 26
10179: EQUAL
10180: IFFALSE 10190
// sEarthquake := true ;
10182: LD_ADDR_EXP 83
10186: PUSH
10187: LD_INT 1
10189: ST_TO_ADDR
// if p3 = 27 then
10190: LD_VAR 0 3
10194: PUSH
10195: LD_INT 27
10197: EQUAL
10198: IFFALSE 10208
// sAI := true ;
10200: LD_ADDR_EXP 84
10204: PUSH
10205: LD_INT 1
10207: ST_TO_ADDR
// if p3 = 28 then
10208: LD_VAR 0 3
10212: PUSH
10213: LD_INT 28
10215: EQUAL
10216: IFFALSE 10226
// sCargo := true ;
10218: LD_ADDR_EXP 87
10222: PUSH
10223: LD_INT 1
10225: ST_TO_ADDR
// if p3 = 29 then
10226: LD_VAR 0 3
10230: PUSH
10231: LD_INT 29
10233: EQUAL
10234: IFFALSE 10244
// sDLaser := true ;
10236: LD_ADDR_EXP 88
10240: PUSH
10241: LD_INT 1
10243: ST_TO_ADDR
// if p3 = 30 then
10244: LD_VAR 0 3
10248: PUSH
10249: LD_INT 30
10251: EQUAL
10252: IFFALSE 10262
// sExchange := true ;
10254: LD_ADDR_EXP 89
10258: PUSH
10259: LD_INT 1
10261: ST_TO_ADDR
// if p3 = 31 then
10262: LD_VAR 0 3
10266: PUSH
10267: LD_INT 31
10269: EQUAL
10270: IFFALSE 10280
// sFac := true ;
10272: LD_ADDR_EXP 90
10276: PUSH
10277: LD_INT 1
10279: ST_TO_ADDR
// if p3 = 32 then
10280: LD_VAR 0 3
10284: PUSH
10285: LD_INT 32
10287: EQUAL
10288: IFFALSE 10298
// sPower := true ;
10290: LD_ADDR_EXP 91
10294: PUSH
10295: LD_INT 1
10297: ST_TO_ADDR
// if p3 = 33 then
10298: LD_VAR 0 3
10302: PUSH
10303: LD_INT 33
10305: EQUAL
10306: IFFALSE 10316
// sRandom := true ;
10308: LD_ADDR_EXP 92
10312: PUSH
10313: LD_INT 1
10315: ST_TO_ADDR
// if p3 = 34 then
10316: LD_VAR 0 3
10320: PUSH
10321: LD_INT 34
10323: EQUAL
10324: IFFALSE 10334
// sShield := true ;
10326: LD_ADDR_EXP 93
10330: PUSH
10331: LD_INT 1
10333: ST_TO_ADDR
// if p3 = 35 then
10334: LD_VAR 0 3
10338: PUSH
10339: LD_INT 35
10341: EQUAL
10342: IFFALSE 10352
// sTime := true ;
10344: LD_ADDR_EXP 94
10348: PUSH
10349: LD_INT 1
10351: ST_TO_ADDR
// if p3 = 36 then
10352: LD_VAR 0 3
10356: PUSH
10357: LD_INT 36
10359: EQUAL
10360: IFFALSE 10370
// sTools := true ;
10362: LD_ADDR_EXP 95
10366: PUSH
10367: LD_INT 1
10369: ST_TO_ADDR
// if p3 = 101 then
10370: LD_VAR 0 3
10374: PUSH
10375: LD_INT 101
10377: EQUAL
10378: IFFALSE 10388
// sSold := true ;
10380: LD_ADDR_EXP 60
10384: PUSH
10385: LD_INT 1
10387: ST_TO_ADDR
// if p3 = 102 then
10388: LD_VAR 0 3
10392: PUSH
10393: LD_INT 102
10395: EQUAL
10396: IFFALSE 10406
// sDiff := true ;
10398: LD_ADDR_EXP 61
10402: PUSH
10403: LD_INT 1
10405: ST_TO_ADDR
// if p3 = 103 then
10406: LD_VAR 0 3
10410: PUSH
10411: LD_INT 103
10413: EQUAL
10414: IFFALSE 10424
// sFog := true ;
10416: LD_ADDR_EXP 64
10420: PUSH
10421: LD_INT 1
10423: ST_TO_ADDR
// if p3 = 104 then
10424: LD_VAR 0 3
10428: PUSH
10429: LD_INT 104
10431: EQUAL
10432: IFFALSE 10442
// sReset := true ;
10434: LD_ADDR_EXP 65
10438: PUSH
10439: LD_INT 1
10441: ST_TO_ADDR
// if p3 = 105 then
10442: LD_VAR 0 3
10446: PUSH
10447: LD_INT 105
10449: EQUAL
10450: IFFALSE 10460
// sSun := true ;
10452: LD_ADDR_EXP 66
10456: PUSH
10457: LD_INT 1
10459: ST_TO_ADDR
// if p3 = 106 then
10460: LD_VAR 0 3
10464: PUSH
10465: LD_INT 106
10467: EQUAL
10468: IFFALSE 10478
// sTiger := true ;
10470: LD_ADDR_EXP 62
10474: PUSH
10475: LD_INT 1
10477: ST_TO_ADDR
// if p3 = 107 then
10478: LD_VAR 0 3
10482: PUSH
10483: LD_INT 107
10485: EQUAL
10486: IFFALSE 10496
// sBomb := true ;
10488: LD_ADDR_EXP 63
10492: PUSH
10493: LD_INT 1
10495: ST_TO_ADDR
// if p3 = 108 then
10496: LD_VAR 0 3
10500: PUSH
10501: LD_INT 108
10503: EQUAL
10504: IFFALSE 10514
// sWound := true ;
10506: LD_ADDR_EXP 71
10510: PUSH
10511: LD_INT 1
10513: ST_TO_ADDR
// if p3 = 109 then
10514: LD_VAR 0 3
10518: PUSH
10519: LD_INT 109
10521: EQUAL
10522: IFFALSE 10532
// sBetray := true ;
10524: LD_ADDR_EXP 75
10528: PUSH
10529: LD_INT 1
10531: ST_TO_ADDR
// if p3 = 110 then
10532: LD_VAR 0 3
10536: PUSH
10537: LD_INT 110
10539: EQUAL
10540: IFFALSE 10550
// sContamin := true ;
10542: LD_ADDR_EXP 76
10546: PUSH
10547: LD_INT 1
10549: ST_TO_ADDR
// if p3 = 111 then
10550: LD_VAR 0 3
10554: PUSH
10555: LD_INT 111
10557: EQUAL
10558: IFFALSE 10568
// sOil := true ;
10560: LD_ADDR_EXP 78
10564: PUSH
10565: LD_INT 1
10567: ST_TO_ADDR
// if p3 = 112 then
10568: LD_VAR 0 3
10572: PUSH
10573: LD_INT 112
10575: EQUAL
10576: IFFALSE 10586
// sStu := true ;
10578: LD_ADDR_EXP 82
10582: PUSH
10583: LD_INT 1
10585: ST_TO_ADDR
// if p3 = 113 then
10586: LD_VAR 0 3
10590: PUSH
10591: LD_INT 113
10593: EQUAL
10594: IFFALSE 10604
// sBazooka := true ;
10596: LD_ADDR_EXP 85
10600: PUSH
10601: LD_INT 1
10603: ST_TO_ADDR
// if p3 = 114 then
10604: LD_VAR 0 3
10608: PUSH
10609: LD_INT 114
10611: EQUAL
10612: IFFALSE 10622
// sMortar := true ;
10614: LD_ADDR_EXP 86
10618: PUSH
10619: LD_INT 1
10621: ST_TO_ADDR
// if p3 = 115 then
10622: LD_VAR 0 3
10626: PUSH
10627: LD_INT 115
10629: EQUAL
10630: IFFALSE 10640
// sRanger := true ;
10632: LD_ADDR_EXP 96
10636: PUSH
10637: LD_INT 1
10639: ST_TO_ADDR
// if p3 = 116 then
10640: LD_VAR 0 3
10644: PUSH
10645: LD_INT 116
10647: EQUAL
10648: IFFALSE 10658
// sComputer := true ;
10650: LD_ADDR_EXP 97
10654: PUSH
10655: LD_INT 1
10657: ST_TO_ADDR
// if p3 = 117 then
10658: LD_VAR 0 3
10662: PUSH
10663: LD_INT 117
10665: EQUAL
10666: IFFALSE 10676
// s30 := true ;
10668: LD_ADDR_EXP 98
10672: PUSH
10673: LD_INT 1
10675: ST_TO_ADDR
// if p3 = 118 then
10676: LD_VAR 0 3
10680: PUSH
10681: LD_INT 118
10683: EQUAL
10684: IFFALSE 10694
// s60 := true ;
10686: LD_ADDR_EXP 99
10690: PUSH
10691: LD_INT 1
10693: ST_TO_ADDR
// end ; if p2 = 101 then
10694: LD_VAR 0 2
10698: PUSH
10699: LD_INT 101
10701: EQUAL
10702: IFFALSE 10830
// begin case p3 of 1 :
10704: LD_VAR 0 3
10708: PUSH
10709: LD_INT 1
10711: DOUBLE
10712: EQUAL
10713: IFTRUE 10717
10715: GO 10724
10717: POP
// hHackUnlimitedResources ; 2 :
10718: CALL 22928 0 0
10722: GO 10830
10724: LD_INT 2
10726: DOUBLE
10727: EQUAL
10728: IFTRUE 10732
10730: GO 10739
10732: POP
// hHackSetLevel10 ; 3 :
10733: CALL 23061 0 0
10737: GO 10830
10739: LD_INT 3
10741: DOUBLE
10742: EQUAL
10743: IFTRUE 10747
10745: GO 10754
10747: POP
// hHackSetLevel10YourUnits ; 4 :
10748: CALL 23146 0 0
10752: GO 10830
10754: LD_INT 4
10756: DOUBLE
10757: EQUAL
10758: IFTRUE 10762
10760: GO 10769
10762: POP
// hHackInvincible ; 5 :
10763: CALL 23594 0 0
10767: GO 10830
10769: LD_INT 5
10771: DOUBLE
10772: EQUAL
10773: IFTRUE 10777
10775: GO 10784
10777: POP
// hHackInvisible ; 6 :
10778: CALL 23705 0 0
10782: GO 10830
10784: LD_INT 6
10786: DOUBLE
10787: EQUAL
10788: IFTRUE 10792
10790: GO 10799
10792: POP
// hHackChangeYourSide ; 7 :
10793: CALL 23762 0 0
10797: GO 10830
10799: LD_INT 7
10801: DOUBLE
10802: EQUAL
10803: IFTRUE 10807
10805: GO 10814
10807: POP
// hHackChangeUnitSide ; 8 :
10808: CALL 23804 0 0
10812: GO 10830
10814: LD_INT 8
10816: DOUBLE
10817: EQUAL
10818: IFTRUE 10822
10820: GO 10829
10822: POP
// hHackFog ; end ;
10823: CALL 23905 0 0
10827: GO 10830
10829: POP
// end ; end ;
10830: LD_VAR 0 7
10834: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
10835: GO 10837
10837: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10838: LD_STRING initStreamRollete();
10840: PPUSH
10841: CALL_OW 559
// InitStreamMode ;
10845: CALL 10857 0 0
// DefineStreamItems ( false ) ;
10849: LD_INT 0
10851: PPUSH
10852: CALL 11321 0 1
// end ;
10856: END
// function InitStreamMode ; begin
10857: LD_INT 0
10859: PPUSH
// streamModeActive := false ;
10860: LD_ADDR_EXP 43
10864: PUSH
10865: LD_INT 0
10867: ST_TO_ADDR
// normalCounter := 36 ;
10868: LD_ADDR_EXP 44
10872: PUSH
10873: LD_INT 36
10875: ST_TO_ADDR
// hardcoreCounter := 18 ;
10876: LD_ADDR_EXP 45
10880: PUSH
10881: LD_INT 18
10883: ST_TO_ADDR
// sRocket := false ;
10884: LD_ADDR_EXP 48
10888: PUSH
10889: LD_INT 0
10891: ST_TO_ADDR
// sSpeed := false ;
10892: LD_ADDR_EXP 47
10896: PUSH
10897: LD_INT 0
10899: ST_TO_ADDR
// sEngine := false ;
10900: LD_ADDR_EXP 49
10904: PUSH
10905: LD_INT 0
10907: ST_TO_ADDR
// sSpec := false ;
10908: LD_ADDR_EXP 46
10912: PUSH
10913: LD_INT 0
10915: ST_TO_ADDR
// sLevel := false ;
10916: LD_ADDR_EXP 50
10920: PUSH
10921: LD_INT 0
10923: ST_TO_ADDR
// sArmoury := false ;
10924: LD_ADDR_EXP 51
10928: PUSH
10929: LD_INT 0
10931: ST_TO_ADDR
// sRadar := false ;
10932: LD_ADDR_EXP 52
10936: PUSH
10937: LD_INT 0
10939: ST_TO_ADDR
// sBunker := false ;
10940: LD_ADDR_EXP 53
10944: PUSH
10945: LD_INT 0
10947: ST_TO_ADDR
// sHack := false ;
10948: LD_ADDR_EXP 54
10952: PUSH
10953: LD_INT 0
10955: ST_TO_ADDR
// sFire := false ;
10956: LD_ADDR_EXP 55
10960: PUSH
10961: LD_INT 0
10963: ST_TO_ADDR
// sRefresh := false ;
10964: LD_ADDR_EXP 56
10968: PUSH
10969: LD_INT 0
10971: ST_TO_ADDR
// sExp := false ;
10972: LD_ADDR_EXP 57
10976: PUSH
10977: LD_INT 0
10979: ST_TO_ADDR
// sDepot := false ;
10980: LD_ADDR_EXP 58
10984: PUSH
10985: LD_INT 0
10987: ST_TO_ADDR
// sFlag := false ;
10988: LD_ADDR_EXP 59
10992: PUSH
10993: LD_INT 0
10995: ST_TO_ADDR
// sKamikadze := false ;
10996: LD_ADDR_EXP 67
11000: PUSH
11001: LD_INT 0
11003: ST_TO_ADDR
// sTroll := false ;
11004: LD_ADDR_EXP 68
11008: PUSH
11009: LD_INT 0
11011: ST_TO_ADDR
// sSlow := false ;
11012: LD_ADDR_EXP 69
11016: PUSH
11017: LD_INT 0
11019: ST_TO_ADDR
// sLack := false ;
11020: LD_ADDR_EXP 70
11024: PUSH
11025: LD_INT 0
11027: ST_TO_ADDR
// sTank := false ;
11028: LD_ADDR_EXP 72
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// sRemote := false ;
11036: LD_ADDR_EXP 73
11040: PUSH
11041: LD_INT 0
11043: ST_TO_ADDR
// sPowell := false ;
11044: LD_ADDR_EXP 74
11048: PUSH
11049: LD_INT 0
11051: ST_TO_ADDR
// sTeleport := false ;
11052: LD_ADDR_EXP 77
11056: PUSH
11057: LD_INT 0
11059: ST_TO_ADDR
// sOilTower := false ;
11060: LD_ADDR_EXP 79
11064: PUSH
11065: LD_INT 0
11067: ST_TO_ADDR
// sShovel := false ;
11068: LD_ADDR_EXP 80
11072: PUSH
11073: LD_INT 0
11075: ST_TO_ADDR
// sSheik := false ;
11076: LD_ADDR_EXP 81
11080: PUSH
11081: LD_INT 0
11083: ST_TO_ADDR
// sEarthquake := false ;
11084: LD_ADDR_EXP 83
11088: PUSH
11089: LD_INT 0
11091: ST_TO_ADDR
// sAI := false ;
11092: LD_ADDR_EXP 84
11096: PUSH
11097: LD_INT 0
11099: ST_TO_ADDR
// sCargo := false ;
11100: LD_ADDR_EXP 87
11104: PUSH
11105: LD_INT 0
11107: ST_TO_ADDR
// sDLaser := false ;
11108: LD_ADDR_EXP 88
11112: PUSH
11113: LD_INT 0
11115: ST_TO_ADDR
// sExchange := false ;
11116: LD_ADDR_EXP 89
11120: PUSH
11121: LD_INT 0
11123: ST_TO_ADDR
// sFac := false ;
11124: LD_ADDR_EXP 90
11128: PUSH
11129: LD_INT 0
11131: ST_TO_ADDR
// sPower := false ;
11132: LD_ADDR_EXP 91
11136: PUSH
11137: LD_INT 0
11139: ST_TO_ADDR
// sRandom := false ;
11140: LD_ADDR_EXP 92
11144: PUSH
11145: LD_INT 0
11147: ST_TO_ADDR
// sShield := false ;
11148: LD_ADDR_EXP 93
11152: PUSH
11153: LD_INT 0
11155: ST_TO_ADDR
// sTime := false ;
11156: LD_ADDR_EXP 94
11160: PUSH
11161: LD_INT 0
11163: ST_TO_ADDR
// sTools := false ;
11164: LD_ADDR_EXP 95
11168: PUSH
11169: LD_INT 0
11171: ST_TO_ADDR
// sSold := false ;
11172: LD_ADDR_EXP 60
11176: PUSH
11177: LD_INT 0
11179: ST_TO_ADDR
// sDiff := false ;
11180: LD_ADDR_EXP 61
11184: PUSH
11185: LD_INT 0
11187: ST_TO_ADDR
// sFog := false ;
11188: LD_ADDR_EXP 64
11192: PUSH
11193: LD_INT 0
11195: ST_TO_ADDR
// sReset := false ;
11196: LD_ADDR_EXP 65
11200: PUSH
11201: LD_INT 0
11203: ST_TO_ADDR
// sSun := false ;
11204: LD_ADDR_EXP 66
11208: PUSH
11209: LD_INT 0
11211: ST_TO_ADDR
// sTiger := false ;
11212: LD_ADDR_EXP 62
11216: PUSH
11217: LD_INT 0
11219: ST_TO_ADDR
// sBomb := false ;
11220: LD_ADDR_EXP 63
11224: PUSH
11225: LD_INT 0
11227: ST_TO_ADDR
// sWound := false ;
11228: LD_ADDR_EXP 71
11232: PUSH
11233: LD_INT 0
11235: ST_TO_ADDR
// sBetray := false ;
11236: LD_ADDR_EXP 75
11240: PUSH
11241: LD_INT 0
11243: ST_TO_ADDR
// sContamin := false ;
11244: LD_ADDR_EXP 76
11248: PUSH
11249: LD_INT 0
11251: ST_TO_ADDR
// sOil := false ;
11252: LD_ADDR_EXP 78
11256: PUSH
11257: LD_INT 0
11259: ST_TO_ADDR
// sStu := false ;
11260: LD_ADDR_EXP 82
11264: PUSH
11265: LD_INT 0
11267: ST_TO_ADDR
// sBazooka := false ;
11268: LD_ADDR_EXP 85
11272: PUSH
11273: LD_INT 0
11275: ST_TO_ADDR
// sMortar := false ;
11276: LD_ADDR_EXP 86
11280: PUSH
11281: LD_INT 0
11283: ST_TO_ADDR
// sRanger := false ;
11284: LD_ADDR_EXP 96
11288: PUSH
11289: LD_INT 0
11291: ST_TO_ADDR
// sComputer := false ;
11292: LD_ADDR_EXP 97
11296: PUSH
11297: LD_INT 0
11299: ST_TO_ADDR
// s30 := false ;
11300: LD_ADDR_EXP 98
11304: PUSH
11305: LD_INT 0
11307: ST_TO_ADDR
// s60 := false ;
11308: LD_ADDR_EXP 99
11312: PUSH
11313: LD_INT 0
11315: ST_TO_ADDR
// end ;
11316: LD_VAR 0 1
11320: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11321: LD_INT 0
11323: PPUSH
11324: PPUSH
11325: PPUSH
11326: PPUSH
11327: PPUSH
11328: PPUSH
11329: PPUSH
// result := [ ] ;
11330: LD_ADDR_VAR 0 2
11334: PUSH
11335: EMPTY
11336: ST_TO_ADDR
// if campaign_id = 1 then
11337: LD_OWVAR 69
11341: PUSH
11342: LD_INT 1
11344: EQUAL
11345: IFFALSE 14511
// begin case mission_number of 1 :
11347: LD_OWVAR 70
11351: PUSH
11352: LD_INT 1
11354: DOUBLE
11355: EQUAL
11356: IFTRUE 11360
11358: GO 11436
11360: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11361: LD_ADDR_VAR 0 2
11365: PUSH
11366: LD_INT 2
11368: PUSH
11369: LD_INT 4
11371: PUSH
11372: LD_INT 11
11374: PUSH
11375: LD_INT 12
11377: PUSH
11378: LD_INT 15
11380: PUSH
11381: LD_INT 16
11383: PUSH
11384: LD_INT 22
11386: PUSH
11387: LD_INT 23
11389: PUSH
11390: LD_INT 26
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: PUSH
11404: LD_INT 101
11406: PUSH
11407: LD_INT 102
11409: PUSH
11410: LD_INT 106
11412: PUSH
11413: LD_INT 116
11415: PUSH
11416: LD_INT 117
11418: PUSH
11419: LD_INT 118
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: ST_TO_ADDR
11434: GO 14509
11436: LD_INT 2
11438: DOUBLE
11439: EQUAL
11440: IFTRUE 11444
11442: GO 11528
11444: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11445: LD_ADDR_VAR 0 2
11449: PUSH
11450: LD_INT 2
11452: PUSH
11453: LD_INT 4
11455: PUSH
11456: LD_INT 11
11458: PUSH
11459: LD_INT 12
11461: PUSH
11462: LD_INT 15
11464: PUSH
11465: LD_INT 16
11467: PUSH
11468: LD_INT 22
11470: PUSH
11471: LD_INT 23
11473: PUSH
11474: LD_INT 26
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: PUSH
11488: LD_INT 101
11490: PUSH
11491: LD_INT 102
11493: PUSH
11494: LD_INT 105
11496: PUSH
11497: LD_INT 106
11499: PUSH
11500: LD_INT 108
11502: PUSH
11503: LD_INT 116
11505: PUSH
11506: LD_INT 117
11508: PUSH
11509: LD_INT 118
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: ST_TO_ADDR
11526: GO 14509
11528: LD_INT 3
11530: DOUBLE
11531: EQUAL
11532: IFTRUE 11536
11534: GO 11624
11536: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11537: LD_ADDR_VAR 0 2
11541: PUSH
11542: LD_INT 2
11544: PUSH
11545: LD_INT 4
11547: PUSH
11548: LD_INT 5
11550: PUSH
11551: LD_INT 11
11553: PUSH
11554: LD_INT 12
11556: PUSH
11557: LD_INT 15
11559: PUSH
11560: LD_INT 16
11562: PUSH
11563: LD_INT 22
11565: PUSH
11566: LD_INT 26
11568: PUSH
11569: LD_INT 36
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: PUSH
11584: LD_INT 101
11586: PUSH
11587: LD_INT 102
11589: PUSH
11590: LD_INT 105
11592: PUSH
11593: LD_INT 106
11595: PUSH
11596: LD_INT 108
11598: PUSH
11599: LD_INT 116
11601: PUSH
11602: LD_INT 117
11604: PUSH
11605: LD_INT 118
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: ST_TO_ADDR
11622: GO 14509
11624: LD_INT 4
11626: DOUBLE
11627: EQUAL
11628: IFTRUE 11632
11630: GO 11728
11632: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11633: LD_ADDR_VAR 0 2
11637: PUSH
11638: LD_INT 2
11640: PUSH
11641: LD_INT 4
11643: PUSH
11644: LD_INT 5
11646: PUSH
11647: LD_INT 8
11649: PUSH
11650: LD_INT 11
11652: PUSH
11653: LD_INT 12
11655: PUSH
11656: LD_INT 15
11658: PUSH
11659: LD_INT 16
11661: PUSH
11662: LD_INT 22
11664: PUSH
11665: LD_INT 23
11667: PUSH
11668: LD_INT 26
11670: PUSH
11671: LD_INT 36
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 101
11690: PUSH
11691: LD_INT 102
11693: PUSH
11694: LD_INT 105
11696: PUSH
11697: LD_INT 106
11699: PUSH
11700: LD_INT 108
11702: PUSH
11703: LD_INT 116
11705: PUSH
11706: LD_INT 117
11708: PUSH
11709: LD_INT 118
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: ST_TO_ADDR
11726: GO 14509
11728: LD_INT 5
11730: DOUBLE
11731: EQUAL
11732: IFTRUE 11736
11734: GO 11848
11736: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11737: LD_ADDR_VAR 0 2
11741: PUSH
11742: LD_INT 2
11744: PUSH
11745: LD_INT 4
11747: PUSH
11748: LD_INT 5
11750: PUSH
11751: LD_INT 6
11753: PUSH
11754: LD_INT 8
11756: PUSH
11757: LD_INT 11
11759: PUSH
11760: LD_INT 12
11762: PUSH
11763: LD_INT 15
11765: PUSH
11766: LD_INT 16
11768: PUSH
11769: LD_INT 22
11771: PUSH
11772: LD_INT 23
11774: PUSH
11775: LD_INT 25
11777: PUSH
11778: LD_INT 26
11780: PUSH
11781: LD_INT 36
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: PUSH
11800: LD_INT 101
11802: PUSH
11803: LD_INT 102
11805: PUSH
11806: LD_INT 105
11808: PUSH
11809: LD_INT 106
11811: PUSH
11812: LD_INT 108
11814: PUSH
11815: LD_INT 109
11817: PUSH
11818: LD_INT 112
11820: PUSH
11821: LD_INT 116
11823: PUSH
11824: LD_INT 117
11826: PUSH
11827: LD_INT 118
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: ST_TO_ADDR
11846: GO 14509
11848: LD_INT 6
11850: DOUBLE
11851: EQUAL
11852: IFTRUE 11856
11854: GO 11988
11856: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11857: LD_ADDR_VAR 0 2
11861: PUSH
11862: LD_INT 2
11864: PUSH
11865: LD_INT 4
11867: PUSH
11868: LD_INT 5
11870: PUSH
11871: LD_INT 6
11873: PUSH
11874: LD_INT 8
11876: PUSH
11877: LD_INT 11
11879: PUSH
11880: LD_INT 12
11882: PUSH
11883: LD_INT 15
11885: PUSH
11886: LD_INT 16
11888: PUSH
11889: LD_INT 20
11891: PUSH
11892: LD_INT 21
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_INT 23
11900: PUSH
11901: LD_INT 25
11903: PUSH
11904: LD_INT 26
11906: PUSH
11907: LD_INT 30
11909: PUSH
11910: LD_INT 31
11912: PUSH
11913: LD_INT 32
11915: PUSH
11916: LD_INT 36
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 101
11942: PUSH
11943: LD_INT 102
11945: PUSH
11946: LD_INT 105
11948: PUSH
11949: LD_INT 106
11951: PUSH
11952: LD_INT 108
11954: PUSH
11955: LD_INT 109
11957: PUSH
11958: LD_INT 112
11960: PUSH
11961: LD_INT 116
11963: PUSH
11964: LD_INT 117
11966: PUSH
11967: LD_INT 118
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: ST_TO_ADDR
11986: GO 14509
11988: LD_INT 7
11990: DOUBLE
11991: EQUAL
11992: IFTRUE 11996
11994: GO 12108
11996: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11997: LD_ADDR_VAR 0 2
12001: PUSH
12002: LD_INT 2
12004: PUSH
12005: LD_INT 4
12007: PUSH
12008: LD_INT 5
12010: PUSH
12011: LD_INT 7
12013: PUSH
12014: LD_INT 11
12016: PUSH
12017: LD_INT 12
12019: PUSH
12020: LD_INT 15
12022: PUSH
12023: LD_INT 16
12025: PUSH
12026: LD_INT 20
12028: PUSH
12029: LD_INT 21
12031: PUSH
12032: LD_INT 22
12034: PUSH
12035: LD_INT 23
12037: PUSH
12038: LD_INT 25
12040: PUSH
12041: LD_INT 26
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 101
12062: PUSH
12063: LD_INT 102
12065: PUSH
12066: LD_INT 103
12068: PUSH
12069: LD_INT 105
12071: PUSH
12072: LD_INT 106
12074: PUSH
12075: LD_INT 108
12077: PUSH
12078: LD_INT 112
12080: PUSH
12081: LD_INT 116
12083: PUSH
12084: LD_INT 117
12086: PUSH
12087: LD_INT 118
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: ST_TO_ADDR
12106: GO 14509
12108: LD_INT 8
12110: DOUBLE
12111: EQUAL
12112: IFTRUE 12116
12114: GO 12256
12116: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12117: LD_ADDR_VAR 0 2
12121: PUSH
12122: LD_INT 2
12124: PUSH
12125: LD_INT 4
12127: PUSH
12128: LD_INT 5
12130: PUSH
12131: LD_INT 6
12133: PUSH
12134: LD_INT 7
12136: PUSH
12137: LD_INT 8
12139: PUSH
12140: LD_INT 11
12142: PUSH
12143: LD_INT 12
12145: PUSH
12146: LD_INT 15
12148: PUSH
12149: LD_INT 16
12151: PUSH
12152: LD_INT 20
12154: PUSH
12155: LD_INT 21
12157: PUSH
12158: LD_INT 22
12160: PUSH
12161: LD_INT 23
12163: PUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 26
12169: PUSH
12170: LD_INT 30
12172: PUSH
12173: LD_INT 31
12175: PUSH
12176: LD_INT 32
12178: PUSH
12179: LD_INT 36
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 101
12206: PUSH
12207: LD_INT 102
12209: PUSH
12210: LD_INT 103
12212: PUSH
12213: LD_INT 105
12215: PUSH
12216: LD_INT 106
12218: PUSH
12219: LD_INT 108
12221: PUSH
12222: LD_INT 109
12224: PUSH
12225: LD_INT 112
12227: PUSH
12228: LD_INT 116
12230: PUSH
12231: LD_INT 117
12233: PUSH
12234: LD_INT 118
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: ST_TO_ADDR
12254: GO 14509
12256: LD_INT 9
12258: DOUBLE
12259: EQUAL
12260: IFTRUE 12264
12262: GO 12412
12264: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12265: LD_ADDR_VAR 0 2
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: LD_INT 4
12275: PUSH
12276: LD_INT 5
12278: PUSH
12279: LD_INT 6
12281: PUSH
12282: LD_INT 7
12284: PUSH
12285: LD_INT 8
12287: PUSH
12288: LD_INT 11
12290: PUSH
12291: LD_INT 12
12293: PUSH
12294: LD_INT 15
12296: PUSH
12297: LD_INT 16
12299: PUSH
12300: LD_INT 20
12302: PUSH
12303: LD_INT 21
12305: PUSH
12306: LD_INT 22
12308: PUSH
12309: LD_INT 23
12311: PUSH
12312: LD_INT 25
12314: PUSH
12315: LD_INT 26
12317: PUSH
12318: LD_INT 28
12320: PUSH
12321: LD_INT 30
12323: PUSH
12324: LD_INT 31
12326: PUSH
12327: LD_INT 32
12329: PUSH
12330: LD_INT 36
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 101
12358: PUSH
12359: LD_INT 102
12361: PUSH
12362: LD_INT 103
12364: PUSH
12365: LD_INT 105
12367: PUSH
12368: LD_INT 106
12370: PUSH
12371: LD_INT 108
12373: PUSH
12374: LD_INT 109
12376: PUSH
12377: LD_INT 112
12379: PUSH
12380: LD_INT 114
12382: PUSH
12383: LD_INT 116
12385: PUSH
12386: LD_INT 117
12388: PUSH
12389: LD_INT 118
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: ST_TO_ADDR
12410: GO 14509
12412: LD_INT 10
12414: DOUBLE
12415: EQUAL
12416: IFTRUE 12420
12418: GO 12616
12420: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12421: LD_ADDR_VAR 0 2
12425: PUSH
12426: LD_INT 2
12428: PUSH
12429: LD_INT 4
12431: PUSH
12432: LD_INT 5
12434: PUSH
12435: LD_INT 6
12437: PUSH
12438: LD_INT 7
12440: PUSH
12441: LD_INT 8
12443: PUSH
12444: LD_INT 9
12446: PUSH
12447: LD_INT 10
12449: PUSH
12450: LD_INT 11
12452: PUSH
12453: LD_INT 12
12455: PUSH
12456: LD_INT 13
12458: PUSH
12459: LD_INT 14
12461: PUSH
12462: LD_INT 15
12464: PUSH
12465: LD_INT 16
12467: PUSH
12468: LD_INT 17
12470: PUSH
12471: LD_INT 18
12473: PUSH
12474: LD_INT 19
12476: PUSH
12477: LD_INT 20
12479: PUSH
12480: LD_INT 21
12482: PUSH
12483: LD_INT 22
12485: PUSH
12486: LD_INT 23
12488: PUSH
12489: LD_INT 24
12491: PUSH
12492: LD_INT 25
12494: PUSH
12495: LD_INT 26
12497: PUSH
12498: LD_INT 28
12500: PUSH
12501: LD_INT 30
12503: PUSH
12504: LD_INT 31
12506: PUSH
12507: LD_INT 32
12509: PUSH
12510: LD_INT 36
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 101
12546: PUSH
12547: LD_INT 102
12549: PUSH
12550: LD_INT 103
12552: PUSH
12553: LD_INT 104
12555: PUSH
12556: LD_INT 105
12558: PUSH
12559: LD_INT 106
12561: PUSH
12562: LD_INT 107
12564: PUSH
12565: LD_INT 108
12567: PUSH
12568: LD_INT 109
12570: PUSH
12571: LD_INT 110
12573: PUSH
12574: LD_INT 111
12576: PUSH
12577: LD_INT 112
12579: PUSH
12580: LD_INT 114
12582: PUSH
12583: LD_INT 116
12585: PUSH
12586: LD_INT 117
12588: PUSH
12589: LD_INT 118
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: ST_TO_ADDR
12614: GO 14509
12616: LD_INT 11
12618: DOUBLE
12619: EQUAL
12620: IFTRUE 12624
12622: GO 12828
12624: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12625: LD_ADDR_VAR 0 2
12629: PUSH
12630: LD_INT 2
12632: PUSH
12633: LD_INT 3
12635: PUSH
12636: LD_INT 4
12638: PUSH
12639: LD_INT 5
12641: PUSH
12642: LD_INT 6
12644: PUSH
12645: LD_INT 7
12647: PUSH
12648: LD_INT 8
12650: PUSH
12651: LD_INT 9
12653: PUSH
12654: LD_INT 10
12656: PUSH
12657: LD_INT 11
12659: PUSH
12660: LD_INT 12
12662: PUSH
12663: LD_INT 13
12665: PUSH
12666: LD_INT 14
12668: PUSH
12669: LD_INT 15
12671: PUSH
12672: LD_INT 16
12674: PUSH
12675: LD_INT 17
12677: PUSH
12678: LD_INT 18
12680: PUSH
12681: LD_INT 19
12683: PUSH
12684: LD_INT 20
12686: PUSH
12687: LD_INT 21
12689: PUSH
12690: LD_INT 22
12692: PUSH
12693: LD_INT 23
12695: PUSH
12696: LD_INT 24
12698: PUSH
12699: LD_INT 25
12701: PUSH
12702: LD_INT 26
12704: PUSH
12705: LD_INT 28
12707: PUSH
12708: LD_INT 30
12710: PUSH
12711: LD_INT 31
12713: PUSH
12714: LD_INT 32
12716: PUSH
12717: LD_INT 34
12719: PUSH
12720: LD_INT 36
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 101
12758: PUSH
12759: LD_INT 102
12761: PUSH
12762: LD_INT 103
12764: PUSH
12765: LD_INT 104
12767: PUSH
12768: LD_INT 105
12770: PUSH
12771: LD_INT 106
12773: PUSH
12774: LD_INT 107
12776: PUSH
12777: LD_INT 108
12779: PUSH
12780: LD_INT 109
12782: PUSH
12783: LD_INT 110
12785: PUSH
12786: LD_INT 111
12788: PUSH
12789: LD_INT 112
12791: PUSH
12792: LD_INT 114
12794: PUSH
12795: LD_INT 116
12797: PUSH
12798: LD_INT 117
12800: PUSH
12801: LD_INT 118
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: ST_TO_ADDR
12826: GO 14509
12828: LD_INT 12
12830: DOUBLE
12831: EQUAL
12832: IFTRUE 12836
12834: GO 13056
12836: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12837: LD_ADDR_VAR 0 2
12841: PUSH
12842: LD_INT 1
12844: PUSH
12845: LD_INT 2
12847: PUSH
12848: LD_INT 3
12850: PUSH
12851: LD_INT 4
12853: PUSH
12854: LD_INT 5
12856: PUSH
12857: LD_INT 6
12859: PUSH
12860: LD_INT 7
12862: PUSH
12863: LD_INT 8
12865: PUSH
12866: LD_INT 9
12868: PUSH
12869: LD_INT 10
12871: PUSH
12872: LD_INT 11
12874: PUSH
12875: LD_INT 12
12877: PUSH
12878: LD_INT 13
12880: PUSH
12881: LD_INT 14
12883: PUSH
12884: LD_INT 15
12886: PUSH
12887: LD_INT 16
12889: PUSH
12890: LD_INT 17
12892: PUSH
12893: LD_INT 18
12895: PUSH
12896: LD_INT 19
12898: PUSH
12899: LD_INT 20
12901: PUSH
12902: LD_INT 21
12904: PUSH
12905: LD_INT 22
12907: PUSH
12908: LD_INT 23
12910: PUSH
12911: LD_INT 24
12913: PUSH
12914: LD_INT 25
12916: PUSH
12917: LD_INT 26
12919: PUSH
12920: LD_INT 27
12922: PUSH
12923: LD_INT 28
12925: PUSH
12926: LD_INT 30
12928: PUSH
12929: LD_INT 31
12931: PUSH
12932: LD_INT 32
12934: PUSH
12935: LD_INT 33
12937: PUSH
12938: LD_INT 34
12940: PUSH
12941: LD_INT 36
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 101
12982: PUSH
12983: LD_INT 102
12985: PUSH
12986: LD_INT 103
12988: PUSH
12989: LD_INT 104
12991: PUSH
12992: LD_INT 105
12994: PUSH
12995: LD_INT 106
12997: PUSH
12998: LD_INT 107
13000: PUSH
13001: LD_INT 108
13003: PUSH
13004: LD_INT 109
13006: PUSH
13007: LD_INT 110
13009: PUSH
13010: LD_INT 111
13012: PUSH
13013: LD_INT 112
13015: PUSH
13016: LD_INT 113
13018: PUSH
13019: LD_INT 114
13021: PUSH
13022: LD_INT 116
13024: PUSH
13025: LD_INT 117
13027: PUSH
13028: LD_INT 118
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: ST_TO_ADDR
13054: GO 14509
13056: LD_INT 13
13058: DOUBLE
13059: EQUAL
13060: IFTRUE 13064
13062: GO 13272
13064: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13065: LD_ADDR_VAR 0 2
13069: PUSH
13070: LD_INT 1
13072: PUSH
13073: LD_INT 2
13075: PUSH
13076: LD_INT 3
13078: PUSH
13079: LD_INT 4
13081: PUSH
13082: LD_INT 5
13084: PUSH
13085: LD_INT 8
13087: PUSH
13088: LD_INT 9
13090: PUSH
13091: LD_INT 10
13093: PUSH
13094: LD_INT 11
13096: PUSH
13097: LD_INT 12
13099: PUSH
13100: LD_INT 14
13102: PUSH
13103: LD_INT 15
13105: PUSH
13106: LD_INT 16
13108: PUSH
13109: LD_INT 17
13111: PUSH
13112: LD_INT 18
13114: PUSH
13115: LD_INT 19
13117: PUSH
13118: LD_INT 20
13120: PUSH
13121: LD_INT 21
13123: PUSH
13124: LD_INT 22
13126: PUSH
13127: LD_INT 23
13129: PUSH
13130: LD_INT 24
13132: PUSH
13133: LD_INT 25
13135: PUSH
13136: LD_INT 26
13138: PUSH
13139: LD_INT 27
13141: PUSH
13142: LD_INT 28
13144: PUSH
13145: LD_INT 30
13147: PUSH
13148: LD_INT 31
13150: PUSH
13151: LD_INT 32
13153: PUSH
13154: LD_INT 33
13156: PUSH
13157: LD_INT 34
13159: PUSH
13160: LD_INT 36
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 101
13198: PUSH
13199: LD_INT 102
13201: PUSH
13202: LD_INT 103
13204: PUSH
13205: LD_INT 104
13207: PUSH
13208: LD_INT 105
13210: PUSH
13211: LD_INT 106
13213: PUSH
13214: LD_INT 107
13216: PUSH
13217: LD_INT 108
13219: PUSH
13220: LD_INT 109
13222: PUSH
13223: LD_INT 110
13225: PUSH
13226: LD_INT 111
13228: PUSH
13229: LD_INT 112
13231: PUSH
13232: LD_INT 113
13234: PUSH
13235: LD_INT 114
13237: PUSH
13238: LD_INT 116
13240: PUSH
13241: LD_INT 117
13243: PUSH
13244: LD_INT 118
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: ST_TO_ADDR
13270: GO 14509
13272: LD_INT 14
13274: DOUBLE
13275: EQUAL
13276: IFTRUE 13280
13278: GO 13504
13280: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13281: LD_ADDR_VAR 0 2
13285: PUSH
13286: LD_INT 1
13288: PUSH
13289: LD_INT 2
13291: PUSH
13292: LD_INT 3
13294: PUSH
13295: LD_INT 4
13297: PUSH
13298: LD_INT 5
13300: PUSH
13301: LD_INT 6
13303: PUSH
13304: LD_INT 7
13306: PUSH
13307: LD_INT 8
13309: PUSH
13310: LD_INT 9
13312: PUSH
13313: LD_INT 10
13315: PUSH
13316: LD_INT 11
13318: PUSH
13319: LD_INT 12
13321: PUSH
13322: LD_INT 13
13324: PUSH
13325: LD_INT 14
13327: PUSH
13328: LD_INT 15
13330: PUSH
13331: LD_INT 16
13333: PUSH
13334: LD_INT 17
13336: PUSH
13337: LD_INT 18
13339: PUSH
13340: LD_INT 19
13342: PUSH
13343: LD_INT 20
13345: PUSH
13346: LD_INT 21
13348: PUSH
13349: LD_INT 22
13351: PUSH
13352: LD_INT 23
13354: PUSH
13355: LD_INT 24
13357: PUSH
13358: LD_INT 25
13360: PUSH
13361: LD_INT 26
13363: PUSH
13364: LD_INT 27
13366: PUSH
13367: LD_INT 28
13369: PUSH
13370: LD_INT 29
13372: PUSH
13373: LD_INT 30
13375: PUSH
13376: LD_INT 31
13378: PUSH
13379: LD_INT 32
13381: PUSH
13382: LD_INT 33
13384: PUSH
13385: LD_INT 34
13387: PUSH
13388: LD_INT 36
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 101
13430: PUSH
13431: LD_INT 102
13433: PUSH
13434: LD_INT 103
13436: PUSH
13437: LD_INT 104
13439: PUSH
13440: LD_INT 105
13442: PUSH
13443: LD_INT 106
13445: PUSH
13446: LD_INT 107
13448: PUSH
13449: LD_INT 108
13451: PUSH
13452: LD_INT 109
13454: PUSH
13455: LD_INT 110
13457: PUSH
13458: LD_INT 111
13460: PUSH
13461: LD_INT 112
13463: PUSH
13464: LD_INT 113
13466: PUSH
13467: LD_INT 114
13469: PUSH
13470: LD_INT 116
13472: PUSH
13473: LD_INT 117
13475: PUSH
13476: LD_INT 118
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: ST_TO_ADDR
13502: GO 14509
13504: LD_INT 15
13506: DOUBLE
13507: EQUAL
13508: IFTRUE 13512
13510: GO 13736
13512: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13513: LD_ADDR_VAR 0 2
13517: PUSH
13518: LD_INT 1
13520: PUSH
13521: LD_INT 2
13523: PUSH
13524: LD_INT 3
13526: PUSH
13527: LD_INT 4
13529: PUSH
13530: LD_INT 5
13532: PUSH
13533: LD_INT 6
13535: PUSH
13536: LD_INT 7
13538: PUSH
13539: LD_INT 8
13541: PUSH
13542: LD_INT 9
13544: PUSH
13545: LD_INT 10
13547: PUSH
13548: LD_INT 11
13550: PUSH
13551: LD_INT 12
13553: PUSH
13554: LD_INT 13
13556: PUSH
13557: LD_INT 14
13559: PUSH
13560: LD_INT 15
13562: PUSH
13563: LD_INT 16
13565: PUSH
13566: LD_INT 17
13568: PUSH
13569: LD_INT 18
13571: PUSH
13572: LD_INT 19
13574: PUSH
13575: LD_INT 20
13577: PUSH
13578: LD_INT 21
13580: PUSH
13581: LD_INT 22
13583: PUSH
13584: LD_INT 23
13586: PUSH
13587: LD_INT 24
13589: PUSH
13590: LD_INT 25
13592: PUSH
13593: LD_INT 26
13595: PUSH
13596: LD_INT 27
13598: PUSH
13599: LD_INT 28
13601: PUSH
13602: LD_INT 29
13604: PUSH
13605: LD_INT 30
13607: PUSH
13608: LD_INT 31
13610: PUSH
13611: LD_INT 32
13613: PUSH
13614: LD_INT 33
13616: PUSH
13617: LD_INT 34
13619: PUSH
13620: LD_INT 36
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 101
13662: PUSH
13663: LD_INT 102
13665: PUSH
13666: LD_INT 103
13668: PUSH
13669: LD_INT 104
13671: PUSH
13672: LD_INT 105
13674: PUSH
13675: LD_INT 106
13677: PUSH
13678: LD_INT 107
13680: PUSH
13681: LD_INT 108
13683: PUSH
13684: LD_INT 109
13686: PUSH
13687: LD_INT 110
13689: PUSH
13690: LD_INT 111
13692: PUSH
13693: LD_INT 112
13695: PUSH
13696: LD_INT 113
13698: PUSH
13699: LD_INT 114
13701: PUSH
13702: LD_INT 116
13704: PUSH
13705: LD_INT 117
13707: PUSH
13708: LD_INT 118
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: ST_TO_ADDR
13734: GO 14509
13736: LD_INT 16
13738: DOUBLE
13739: EQUAL
13740: IFTRUE 13744
13742: GO 13880
13744: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13745: LD_ADDR_VAR 0 2
13749: PUSH
13750: LD_INT 2
13752: PUSH
13753: LD_INT 4
13755: PUSH
13756: LD_INT 5
13758: PUSH
13759: LD_INT 7
13761: PUSH
13762: LD_INT 11
13764: PUSH
13765: LD_INT 12
13767: PUSH
13768: LD_INT 15
13770: PUSH
13771: LD_INT 16
13773: PUSH
13774: LD_INT 20
13776: PUSH
13777: LD_INT 21
13779: PUSH
13780: LD_INT 22
13782: PUSH
13783: LD_INT 23
13785: PUSH
13786: LD_INT 25
13788: PUSH
13789: LD_INT 26
13791: PUSH
13792: LD_INT 30
13794: PUSH
13795: LD_INT 31
13797: PUSH
13798: LD_INT 32
13800: PUSH
13801: LD_INT 33
13803: PUSH
13804: LD_INT 34
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: PUSH
13828: LD_INT 101
13830: PUSH
13831: LD_INT 102
13833: PUSH
13834: LD_INT 103
13836: PUSH
13837: LD_INT 106
13839: PUSH
13840: LD_INT 108
13842: PUSH
13843: LD_INT 112
13845: PUSH
13846: LD_INT 113
13848: PUSH
13849: LD_INT 114
13851: PUSH
13852: LD_INT 116
13854: PUSH
13855: LD_INT 117
13857: PUSH
13858: LD_INT 118
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: ST_TO_ADDR
13878: GO 14509
13880: LD_INT 17
13882: DOUBLE
13883: EQUAL
13884: IFTRUE 13888
13886: GO 14112
13888: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13889: LD_ADDR_VAR 0 2
13893: PUSH
13894: LD_INT 1
13896: PUSH
13897: LD_INT 2
13899: PUSH
13900: LD_INT 3
13902: PUSH
13903: LD_INT 4
13905: PUSH
13906: LD_INT 5
13908: PUSH
13909: LD_INT 6
13911: PUSH
13912: LD_INT 7
13914: PUSH
13915: LD_INT 8
13917: PUSH
13918: LD_INT 9
13920: PUSH
13921: LD_INT 10
13923: PUSH
13924: LD_INT 11
13926: PUSH
13927: LD_INT 12
13929: PUSH
13930: LD_INT 13
13932: PUSH
13933: LD_INT 14
13935: PUSH
13936: LD_INT 15
13938: PUSH
13939: LD_INT 16
13941: PUSH
13942: LD_INT 17
13944: PUSH
13945: LD_INT 18
13947: PUSH
13948: LD_INT 19
13950: PUSH
13951: LD_INT 20
13953: PUSH
13954: LD_INT 21
13956: PUSH
13957: LD_INT 22
13959: PUSH
13960: LD_INT 23
13962: PUSH
13963: LD_INT 24
13965: PUSH
13966: LD_INT 25
13968: PUSH
13969: LD_INT 26
13971: PUSH
13972: LD_INT 27
13974: PUSH
13975: LD_INT 28
13977: PUSH
13978: LD_INT 29
13980: PUSH
13981: LD_INT 30
13983: PUSH
13984: LD_INT 31
13986: PUSH
13987: LD_INT 32
13989: PUSH
13990: LD_INT 33
13992: PUSH
13993: LD_INT 34
13995: PUSH
13996: LD_INT 36
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: PUSH
14036: LD_INT 101
14038: PUSH
14039: LD_INT 102
14041: PUSH
14042: LD_INT 103
14044: PUSH
14045: LD_INT 104
14047: PUSH
14048: LD_INT 105
14050: PUSH
14051: LD_INT 106
14053: PUSH
14054: LD_INT 107
14056: PUSH
14057: LD_INT 108
14059: PUSH
14060: LD_INT 109
14062: PUSH
14063: LD_INT 110
14065: PUSH
14066: LD_INT 111
14068: PUSH
14069: LD_INT 112
14071: PUSH
14072: LD_INT 113
14074: PUSH
14075: LD_INT 114
14077: PUSH
14078: LD_INT 116
14080: PUSH
14081: LD_INT 117
14083: PUSH
14084: LD_INT 118
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: ST_TO_ADDR
14110: GO 14509
14112: LD_INT 18
14114: DOUBLE
14115: EQUAL
14116: IFTRUE 14120
14118: GO 14268
14120: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14121: LD_ADDR_VAR 0 2
14125: PUSH
14126: LD_INT 2
14128: PUSH
14129: LD_INT 4
14131: PUSH
14132: LD_INT 5
14134: PUSH
14135: LD_INT 7
14137: PUSH
14138: LD_INT 11
14140: PUSH
14141: LD_INT 12
14143: PUSH
14144: LD_INT 15
14146: PUSH
14147: LD_INT 16
14149: PUSH
14150: LD_INT 20
14152: PUSH
14153: LD_INT 21
14155: PUSH
14156: LD_INT 22
14158: PUSH
14159: LD_INT 23
14161: PUSH
14162: LD_INT 25
14164: PUSH
14165: LD_INT 26
14167: PUSH
14168: LD_INT 30
14170: PUSH
14171: LD_INT 31
14173: PUSH
14174: LD_INT 32
14176: PUSH
14177: LD_INT 33
14179: PUSH
14180: LD_INT 34
14182: PUSH
14183: LD_INT 35
14185: PUSH
14186: LD_INT 36
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: PUSH
14212: LD_INT 101
14214: PUSH
14215: LD_INT 102
14217: PUSH
14218: LD_INT 103
14220: PUSH
14221: LD_INT 106
14223: PUSH
14224: LD_INT 108
14226: PUSH
14227: LD_INT 112
14229: PUSH
14230: LD_INT 113
14232: PUSH
14233: LD_INT 114
14235: PUSH
14236: LD_INT 115
14238: PUSH
14239: LD_INT 116
14241: PUSH
14242: LD_INT 117
14244: PUSH
14245: LD_INT 118
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: ST_TO_ADDR
14266: GO 14509
14268: LD_INT 19
14270: DOUBLE
14271: EQUAL
14272: IFTRUE 14276
14274: GO 14508
14276: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14277: LD_ADDR_VAR 0 2
14281: PUSH
14282: LD_INT 1
14284: PUSH
14285: LD_INT 2
14287: PUSH
14288: LD_INT 3
14290: PUSH
14291: LD_INT 4
14293: PUSH
14294: LD_INT 5
14296: PUSH
14297: LD_INT 6
14299: PUSH
14300: LD_INT 7
14302: PUSH
14303: LD_INT 8
14305: PUSH
14306: LD_INT 9
14308: PUSH
14309: LD_INT 10
14311: PUSH
14312: LD_INT 11
14314: PUSH
14315: LD_INT 12
14317: PUSH
14318: LD_INT 13
14320: PUSH
14321: LD_INT 14
14323: PUSH
14324: LD_INT 15
14326: PUSH
14327: LD_INT 16
14329: PUSH
14330: LD_INT 17
14332: PUSH
14333: LD_INT 18
14335: PUSH
14336: LD_INT 19
14338: PUSH
14339: LD_INT 20
14341: PUSH
14342: LD_INT 21
14344: PUSH
14345: LD_INT 22
14347: PUSH
14348: LD_INT 23
14350: PUSH
14351: LD_INT 24
14353: PUSH
14354: LD_INT 25
14356: PUSH
14357: LD_INT 26
14359: PUSH
14360: LD_INT 27
14362: PUSH
14363: LD_INT 28
14365: PUSH
14366: LD_INT 29
14368: PUSH
14369: LD_INT 30
14371: PUSH
14372: LD_INT 31
14374: PUSH
14375: LD_INT 32
14377: PUSH
14378: LD_INT 33
14380: PUSH
14381: LD_INT 34
14383: PUSH
14384: LD_INT 35
14386: PUSH
14387: LD_INT 36
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: PUSH
14428: LD_INT 101
14430: PUSH
14431: LD_INT 102
14433: PUSH
14434: LD_INT 103
14436: PUSH
14437: LD_INT 104
14439: PUSH
14440: LD_INT 105
14442: PUSH
14443: LD_INT 106
14445: PUSH
14446: LD_INT 107
14448: PUSH
14449: LD_INT 108
14451: PUSH
14452: LD_INT 109
14454: PUSH
14455: LD_INT 110
14457: PUSH
14458: LD_INT 111
14460: PUSH
14461: LD_INT 112
14463: PUSH
14464: LD_INT 113
14466: PUSH
14467: LD_INT 114
14469: PUSH
14470: LD_INT 115
14472: PUSH
14473: LD_INT 116
14475: PUSH
14476: LD_INT 117
14478: PUSH
14479: LD_INT 118
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: ST_TO_ADDR
14506: GO 14509
14508: POP
// end else
14509: GO 14740
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14511: LD_ADDR_VAR 0 2
14515: PUSH
14516: LD_INT 1
14518: PUSH
14519: LD_INT 2
14521: PUSH
14522: LD_INT 3
14524: PUSH
14525: LD_INT 4
14527: PUSH
14528: LD_INT 5
14530: PUSH
14531: LD_INT 6
14533: PUSH
14534: LD_INT 7
14536: PUSH
14537: LD_INT 8
14539: PUSH
14540: LD_INT 9
14542: PUSH
14543: LD_INT 10
14545: PUSH
14546: LD_INT 11
14548: PUSH
14549: LD_INT 12
14551: PUSH
14552: LD_INT 13
14554: PUSH
14555: LD_INT 14
14557: PUSH
14558: LD_INT 15
14560: PUSH
14561: LD_INT 16
14563: PUSH
14564: LD_INT 17
14566: PUSH
14567: LD_INT 18
14569: PUSH
14570: LD_INT 19
14572: PUSH
14573: LD_INT 20
14575: PUSH
14576: LD_INT 21
14578: PUSH
14579: LD_INT 22
14581: PUSH
14582: LD_INT 23
14584: PUSH
14585: LD_INT 24
14587: PUSH
14588: LD_INT 25
14590: PUSH
14591: LD_INT 26
14593: PUSH
14594: LD_INT 27
14596: PUSH
14597: LD_INT 28
14599: PUSH
14600: LD_INT 29
14602: PUSH
14603: LD_INT 30
14605: PUSH
14606: LD_INT 31
14608: PUSH
14609: LD_INT 32
14611: PUSH
14612: LD_INT 33
14614: PUSH
14615: LD_INT 34
14617: PUSH
14618: LD_INT 35
14620: PUSH
14621: LD_INT 36
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: PUSH
14662: LD_INT 101
14664: PUSH
14665: LD_INT 102
14667: PUSH
14668: LD_INT 103
14670: PUSH
14671: LD_INT 104
14673: PUSH
14674: LD_INT 105
14676: PUSH
14677: LD_INT 106
14679: PUSH
14680: LD_INT 107
14682: PUSH
14683: LD_INT 108
14685: PUSH
14686: LD_INT 109
14688: PUSH
14689: LD_INT 110
14691: PUSH
14692: LD_INT 111
14694: PUSH
14695: LD_INT 112
14697: PUSH
14698: LD_INT 113
14700: PUSH
14701: LD_INT 114
14703: PUSH
14704: LD_INT 115
14706: PUSH
14707: LD_INT 116
14709: PUSH
14710: LD_INT 117
14712: PUSH
14713: LD_INT 118
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: ST_TO_ADDR
// if result then
14740: LD_VAR 0 2
14744: IFFALSE 15530
// begin normal :=  ;
14746: LD_ADDR_VAR 0 5
14750: PUSH
14751: LD_STRING 
14753: ST_TO_ADDR
// hardcore :=  ;
14754: LD_ADDR_VAR 0 6
14758: PUSH
14759: LD_STRING 
14761: ST_TO_ADDR
// active :=  ;
14762: LD_ADDR_VAR 0 7
14766: PUSH
14767: LD_STRING 
14769: ST_TO_ADDR
// for i = 1 to normalCounter do
14770: LD_ADDR_VAR 0 8
14774: PUSH
14775: DOUBLE
14776: LD_INT 1
14778: DEC
14779: ST_TO_ADDR
14780: LD_EXP 44
14784: PUSH
14785: FOR_TO
14786: IFFALSE 14887
// begin tmp := 0 ;
14788: LD_ADDR_VAR 0 3
14792: PUSH
14793: LD_STRING 0
14795: ST_TO_ADDR
// if result [ 1 ] then
14796: LD_VAR 0 2
14800: PUSH
14801: LD_INT 1
14803: ARRAY
14804: IFFALSE 14869
// if result [ 1 ] [ 1 ] = i then
14806: LD_VAR 0 2
14810: PUSH
14811: LD_INT 1
14813: ARRAY
14814: PUSH
14815: LD_INT 1
14817: ARRAY
14818: PUSH
14819: LD_VAR 0 8
14823: EQUAL
14824: IFFALSE 14869
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14826: LD_ADDR_VAR 0 2
14830: PUSH
14831: LD_VAR 0 2
14835: PPUSH
14836: LD_INT 1
14838: PPUSH
14839: LD_VAR 0 2
14843: PUSH
14844: LD_INT 1
14846: ARRAY
14847: PPUSH
14848: LD_INT 1
14850: PPUSH
14851: CALL_OW 3
14855: PPUSH
14856: CALL_OW 1
14860: ST_TO_ADDR
// tmp := 1 ;
14861: LD_ADDR_VAR 0 3
14865: PUSH
14866: LD_STRING 1
14868: ST_TO_ADDR
// end ; normal := normal & tmp ;
14869: LD_ADDR_VAR 0 5
14873: PUSH
14874: LD_VAR 0 5
14878: PUSH
14879: LD_VAR 0 3
14883: STR
14884: ST_TO_ADDR
// end ;
14885: GO 14785
14887: POP
14888: POP
// for i = 1 to hardcoreCounter do
14889: LD_ADDR_VAR 0 8
14893: PUSH
14894: DOUBLE
14895: LD_INT 1
14897: DEC
14898: ST_TO_ADDR
14899: LD_EXP 45
14903: PUSH
14904: FOR_TO
14905: IFFALSE 15010
// begin tmp := 0 ;
14907: LD_ADDR_VAR 0 3
14911: PUSH
14912: LD_STRING 0
14914: ST_TO_ADDR
// if result [ 2 ] then
14915: LD_VAR 0 2
14919: PUSH
14920: LD_INT 2
14922: ARRAY
14923: IFFALSE 14992
// if result [ 2 ] [ 1 ] = 100 + i then
14925: LD_VAR 0 2
14929: PUSH
14930: LD_INT 2
14932: ARRAY
14933: PUSH
14934: LD_INT 1
14936: ARRAY
14937: PUSH
14938: LD_INT 100
14940: PUSH
14941: LD_VAR 0 8
14945: PLUS
14946: EQUAL
14947: IFFALSE 14992
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14949: LD_ADDR_VAR 0 2
14953: PUSH
14954: LD_VAR 0 2
14958: PPUSH
14959: LD_INT 2
14961: PPUSH
14962: LD_VAR 0 2
14966: PUSH
14967: LD_INT 2
14969: ARRAY
14970: PPUSH
14971: LD_INT 1
14973: PPUSH
14974: CALL_OW 3
14978: PPUSH
14979: CALL_OW 1
14983: ST_TO_ADDR
// tmp := 1 ;
14984: LD_ADDR_VAR 0 3
14988: PUSH
14989: LD_STRING 1
14991: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14992: LD_ADDR_VAR 0 6
14996: PUSH
14997: LD_VAR 0 6
15001: PUSH
15002: LD_VAR 0 3
15006: STR
15007: ST_TO_ADDR
// end ;
15008: GO 14904
15010: POP
15011: POP
// if isGameLoad then
15012: LD_VAR 0 1
15016: IFFALSE 15491
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15018: LD_ADDR_VAR 0 4
15022: PUSH
15023: LD_EXP 48
15027: PUSH
15028: LD_EXP 47
15032: PUSH
15033: LD_EXP 49
15037: PUSH
15038: LD_EXP 46
15042: PUSH
15043: LD_EXP 50
15047: PUSH
15048: LD_EXP 51
15052: PUSH
15053: LD_EXP 52
15057: PUSH
15058: LD_EXP 53
15062: PUSH
15063: LD_EXP 54
15067: PUSH
15068: LD_EXP 55
15072: PUSH
15073: LD_EXP 56
15077: PUSH
15078: LD_EXP 57
15082: PUSH
15083: LD_EXP 58
15087: PUSH
15088: LD_EXP 59
15092: PUSH
15093: LD_EXP 67
15097: PUSH
15098: LD_EXP 68
15102: PUSH
15103: LD_EXP 69
15107: PUSH
15108: LD_EXP 70
15112: PUSH
15113: LD_EXP 72
15117: PUSH
15118: LD_EXP 73
15122: PUSH
15123: LD_EXP 74
15127: PUSH
15128: LD_EXP 77
15132: PUSH
15133: LD_EXP 79
15137: PUSH
15138: LD_EXP 80
15142: PUSH
15143: LD_EXP 81
15147: PUSH
15148: LD_EXP 83
15152: PUSH
15153: LD_EXP 84
15157: PUSH
15158: LD_EXP 87
15162: PUSH
15163: LD_EXP 88
15167: PUSH
15168: LD_EXP 89
15172: PUSH
15173: LD_EXP 90
15177: PUSH
15178: LD_EXP 91
15182: PUSH
15183: LD_EXP 92
15187: PUSH
15188: LD_EXP 93
15192: PUSH
15193: LD_EXP 94
15197: PUSH
15198: LD_EXP 95
15202: PUSH
15203: LD_EXP 60
15207: PUSH
15208: LD_EXP 61
15212: PUSH
15213: LD_EXP 64
15217: PUSH
15218: LD_EXP 65
15222: PUSH
15223: LD_EXP 66
15227: PUSH
15228: LD_EXP 62
15232: PUSH
15233: LD_EXP 63
15237: PUSH
15238: LD_EXP 71
15242: PUSH
15243: LD_EXP 75
15247: PUSH
15248: LD_EXP 76
15252: PUSH
15253: LD_EXP 78
15257: PUSH
15258: LD_EXP 82
15262: PUSH
15263: LD_EXP 85
15267: PUSH
15268: LD_EXP 86
15272: PUSH
15273: LD_EXP 96
15277: PUSH
15278: LD_EXP 97
15282: PUSH
15283: LD_EXP 98
15287: PUSH
15288: LD_EXP 99
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: ST_TO_ADDR
// tmp :=  ;
15349: LD_ADDR_VAR 0 3
15353: PUSH
15354: LD_STRING 
15356: ST_TO_ADDR
// for i = 1 to normalCounter do
15357: LD_ADDR_VAR 0 8
15361: PUSH
15362: DOUBLE
15363: LD_INT 1
15365: DEC
15366: ST_TO_ADDR
15367: LD_EXP 44
15371: PUSH
15372: FOR_TO
15373: IFFALSE 15409
// begin if flags [ i ] then
15375: LD_VAR 0 4
15379: PUSH
15380: LD_VAR 0 8
15384: ARRAY
15385: IFFALSE 15407
// tmp := tmp & i & ; ;
15387: LD_ADDR_VAR 0 3
15391: PUSH
15392: LD_VAR 0 3
15396: PUSH
15397: LD_VAR 0 8
15401: STR
15402: PUSH
15403: LD_STRING ;
15405: STR
15406: ST_TO_ADDR
// end ;
15407: GO 15372
15409: POP
15410: POP
// for i = 1 to hardcoreCounter do
15411: LD_ADDR_VAR 0 8
15415: PUSH
15416: DOUBLE
15417: LD_INT 1
15419: DEC
15420: ST_TO_ADDR
15421: LD_EXP 45
15425: PUSH
15426: FOR_TO
15427: IFFALSE 15473
// begin if flags [ normalCounter + i ] then
15429: LD_VAR 0 4
15433: PUSH
15434: LD_EXP 44
15438: PUSH
15439: LD_VAR 0 8
15443: PLUS
15444: ARRAY
15445: IFFALSE 15471
// tmp := tmp & ( 100 + i ) & ; ;
15447: LD_ADDR_VAR 0 3
15451: PUSH
15452: LD_VAR 0 3
15456: PUSH
15457: LD_INT 100
15459: PUSH
15460: LD_VAR 0 8
15464: PLUS
15465: STR
15466: PUSH
15467: LD_STRING ;
15469: STR
15470: ST_TO_ADDR
// end ;
15471: GO 15426
15473: POP
15474: POP
// if tmp then
15475: LD_VAR 0 3
15479: IFFALSE 15491
// active := tmp ;
15481: LD_ADDR_VAR 0 7
15485: PUSH
15486: LD_VAR 0 3
15490: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15491: LD_STRING getStreamItemsFromMission("
15493: PUSH
15494: LD_VAR 0 5
15498: STR
15499: PUSH
15500: LD_STRING ","
15502: STR
15503: PUSH
15504: LD_VAR 0 6
15508: STR
15509: PUSH
15510: LD_STRING ","
15512: STR
15513: PUSH
15514: LD_VAR 0 7
15518: STR
15519: PUSH
15520: LD_STRING ")
15522: STR
15523: PPUSH
15524: CALL_OW 559
// end else
15528: GO 15537
// ToLua ( getStreamItemsFromMission("","","") ) ;
15530: LD_STRING getStreamItemsFromMission("","","")
15532: PPUSH
15533: CALL_OW 559
// end ;
15537: LD_VAR 0 2
15541: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15542: LD_EXP 43
15546: PUSH
15547: LD_EXP 48
15551: AND
15552: IFFALSE 15676
15554: GO 15556
15556: DISABLE
15557: LD_INT 0
15559: PPUSH
15560: PPUSH
// begin enable ;
15561: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15562: LD_ADDR_VAR 0 2
15566: PUSH
15567: LD_INT 22
15569: PUSH
15570: LD_OWVAR 2
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 2
15581: PUSH
15582: LD_INT 34
15584: PUSH
15585: LD_INT 7
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 34
15594: PUSH
15595: LD_INT 45
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 34
15604: PUSH
15605: LD_INT 28
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 34
15614: PUSH
15615: LD_INT 47
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PPUSH
15633: CALL_OW 69
15637: ST_TO_ADDR
// if not tmp then
15638: LD_VAR 0 2
15642: NOT
15643: IFFALSE 15647
// exit ;
15645: GO 15676
// for i in tmp do
15647: LD_ADDR_VAR 0 1
15651: PUSH
15652: LD_VAR 0 2
15656: PUSH
15657: FOR_IN
15658: IFFALSE 15674
// begin SetLives ( i , 0 ) ;
15660: LD_VAR 0 1
15664: PPUSH
15665: LD_INT 0
15667: PPUSH
15668: CALL_OW 234
// end ;
15672: GO 15657
15674: POP
15675: POP
// end ;
15676: PPOPN 2
15678: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15679: LD_EXP 43
15683: PUSH
15684: LD_EXP 49
15688: AND
15689: IFFALSE 15773
15691: GO 15693
15693: DISABLE
15694: LD_INT 0
15696: PPUSH
15697: PPUSH
// begin enable ;
15698: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15699: LD_ADDR_VAR 0 2
15703: PUSH
15704: LD_INT 22
15706: PUSH
15707: LD_OWVAR 2
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 32
15718: PUSH
15719: LD_INT 3
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PPUSH
15730: CALL_OW 69
15734: ST_TO_ADDR
// if not tmp then
15735: LD_VAR 0 2
15739: NOT
15740: IFFALSE 15744
// exit ;
15742: GO 15773
// for i in tmp do
15744: LD_ADDR_VAR 0 1
15748: PUSH
15749: LD_VAR 0 2
15753: PUSH
15754: FOR_IN
15755: IFFALSE 15771
// begin SetLives ( i , 0 ) ;
15757: LD_VAR 0 1
15761: PPUSH
15762: LD_INT 0
15764: PPUSH
15765: CALL_OW 234
// end ;
15769: GO 15754
15771: POP
15772: POP
// end ;
15773: PPOPN 2
15775: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15776: LD_EXP 43
15780: PUSH
15781: LD_EXP 46
15785: AND
15786: IFFALSE 15879
15788: GO 15790
15790: DISABLE
15791: LD_INT 0
15793: PPUSH
// begin enable ;
15794: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15795: LD_ADDR_VAR 0 1
15799: PUSH
15800: LD_INT 22
15802: PUSH
15803: LD_OWVAR 2
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 2
15814: PUSH
15815: LD_INT 25
15817: PUSH
15818: LD_INT 5
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: LD_INT 25
15827: PUSH
15828: LD_INT 9
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 25
15837: PUSH
15838: LD_INT 8
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 69
15859: PUSH
15860: FOR_IN
15861: IFFALSE 15877
// begin SetClass ( i , 1 ) ;
15863: LD_VAR 0 1
15867: PPUSH
15868: LD_INT 1
15870: PPUSH
15871: CALL_OW 336
// end ;
15875: GO 15860
15877: POP
15878: POP
// end ;
15879: PPOPN 1
15881: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15882: LD_EXP 43
15886: PUSH
15887: LD_EXP 47
15891: AND
15892: PUSH
15893: LD_OWVAR 65
15897: PUSH
15898: LD_INT 7
15900: LESS
15901: AND
15902: IFFALSE 15916
15904: GO 15906
15906: DISABLE
// begin enable ;
15907: ENABLE
// game_speed := 7 ;
15908: LD_ADDR_OWVAR 65
15912: PUSH
15913: LD_INT 7
15915: ST_TO_ADDR
// end ;
15916: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15917: LD_EXP 43
15921: PUSH
15922: LD_EXP 50
15926: AND
15927: IFFALSE 16129
15929: GO 15931
15931: DISABLE
15932: LD_INT 0
15934: PPUSH
15935: PPUSH
15936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15937: LD_ADDR_VAR 0 3
15941: PUSH
15942: LD_INT 81
15944: PUSH
15945: LD_OWVAR 2
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 21
15956: PUSH
15957: LD_INT 1
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PPUSH
15968: CALL_OW 69
15972: ST_TO_ADDR
// if not tmp then
15973: LD_VAR 0 3
15977: NOT
15978: IFFALSE 15982
// exit ;
15980: GO 16129
// if tmp > 5 then
15982: LD_VAR 0 3
15986: PUSH
15987: LD_INT 5
15989: GREATER
15990: IFFALSE 16002
// k := 5 else
15992: LD_ADDR_VAR 0 2
15996: PUSH
15997: LD_INT 5
15999: ST_TO_ADDR
16000: GO 16012
// k := tmp ;
16002: LD_ADDR_VAR 0 2
16006: PUSH
16007: LD_VAR 0 3
16011: ST_TO_ADDR
// for i := 1 to k do
16012: LD_ADDR_VAR 0 1
16016: PUSH
16017: DOUBLE
16018: LD_INT 1
16020: DEC
16021: ST_TO_ADDR
16022: LD_VAR 0 2
16026: PUSH
16027: FOR_TO
16028: IFFALSE 16127
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16030: LD_VAR 0 3
16034: PUSH
16035: LD_VAR 0 1
16039: ARRAY
16040: PPUSH
16041: LD_VAR 0 1
16045: PUSH
16046: LD_INT 4
16048: MOD
16049: PUSH
16050: LD_INT 1
16052: PLUS
16053: PPUSH
16054: CALL_OW 259
16058: PUSH
16059: LD_INT 10
16061: LESS
16062: IFFALSE 16125
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16064: LD_VAR 0 3
16068: PUSH
16069: LD_VAR 0 1
16073: ARRAY
16074: PPUSH
16075: LD_VAR 0 1
16079: PUSH
16080: LD_INT 4
16082: MOD
16083: PUSH
16084: LD_INT 1
16086: PLUS
16087: PPUSH
16088: LD_VAR 0 3
16092: PUSH
16093: LD_VAR 0 1
16097: ARRAY
16098: PPUSH
16099: LD_VAR 0 1
16103: PUSH
16104: LD_INT 4
16106: MOD
16107: PUSH
16108: LD_INT 1
16110: PLUS
16111: PPUSH
16112: CALL_OW 259
16116: PUSH
16117: LD_INT 1
16119: PLUS
16120: PPUSH
16121: CALL_OW 237
16125: GO 16027
16127: POP
16128: POP
// end ;
16129: PPOPN 3
16131: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16132: LD_EXP 43
16136: PUSH
16137: LD_EXP 51
16141: AND
16142: IFFALSE 16162
16144: GO 16146
16146: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16147: LD_INT 4
16149: PPUSH
16150: LD_OWVAR 2
16154: PPUSH
16155: LD_INT 0
16157: PPUSH
16158: CALL_OW 324
16162: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16163: LD_EXP 43
16167: PUSH
16168: LD_EXP 80
16172: AND
16173: IFFALSE 16193
16175: GO 16177
16177: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16178: LD_INT 19
16180: PPUSH
16181: LD_OWVAR 2
16185: PPUSH
16186: LD_INT 0
16188: PPUSH
16189: CALL_OW 324
16193: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16194: LD_EXP 43
16198: PUSH
16199: LD_EXP 52
16203: AND
16204: IFFALSE 16306
16206: GO 16208
16208: DISABLE
16209: LD_INT 0
16211: PPUSH
16212: PPUSH
// begin enable ;
16213: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16214: LD_ADDR_VAR 0 2
16218: PUSH
16219: LD_INT 22
16221: PUSH
16222: LD_OWVAR 2
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 2
16233: PUSH
16234: LD_INT 34
16236: PUSH
16237: LD_INT 11
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 34
16246: PUSH
16247: LD_INT 30
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: LIST
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PPUSH
16263: CALL_OW 69
16267: ST_TO_ADDR
// if not tmp then
16268: LD_VAR 0 2
16272: NOT
16273: IFFALSE 16277
// exit ;
16275: GO 16306
// for i in tmp do
16277: LD_ADDR_VAR 0 1
16281: PUSH
16282: LD_VAR 0 2
16286: PUSH
16287: FOR_IN
16288: IFFALSE 16304
// begin SetLives ( i , 0 ) ;
16290: LD_VAR 0 1
16294: PPUSH
16295: LD_INT 0
16297: PPUSH
16298: CALL_OW 234
// end ;
16302: GO 16287
16304: POP
16305: POP
// end ;
16306: PPOPN 2
16308: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16309: LD_EXP 43
16313: PUSH
16314: LD_EXP 53
16318: AND
16319: IFFALSE 16339
16321: GO 16323
16323: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16324: LD_INT 32
16326: PPUSH
16327: LD_OWVAR 2
16331: PPUSH
16332: LD_INT 0
16334: PPUSH
16335: CALL_OW 324
16339: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16340: LD_EXP 43
16344: PUSH
16345: LD_EXP 54
16349: AND
16350: IFFALSE 16531
16352: GO 16354
16354: DISABLE
16355: LD_INT 0
16357: PPUSH
16358: PPUSH
16359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16360: LD_ADDR_VAR 0 2
16364: PUSH
16365: LD_INT 22
16367: PUSH
16368: LD_OWVAR 2
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 33
16379: PUSH
16380: LD_INT 3
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PPUSH
16391: CALL_OW 69
16395: ST_TO_ADDR
// if not tmp then
16396: LD_VAR 0 2
16400: NOT
16401: IFFALSE 16405
// exit ;
16403: GO 16531
// side := 0 ;
16405: LD_ADDR_VAR 0 3
16409: PUSH
16410: LD_INT 0
16412: ST_TO_ADDR
// for i := 1 to 8 do
16413: LD_ADDR_VAR 0 1
16417: PUSH
16418: DOUBLE
16419: LD_INT 1
16421: DEC
16422: ST_TO_ADDR
16423: LD_INT 8
16425: PUSH
16426: FOR_TO
16427: IFFALSE 16475
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16429: LD_OWVAR 2
16433: PUSH
16434: LD_VAR 0 1
16438: NONEQUAL
16439: PUSH
16440: LD_OWVAR 2
16444: PPUSH
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 81
16454: PUSH
16455: LD_INT 2
16457: EQUAL
16458: AND
16459: IFFALSE 16473
// begin side := i ;
16461: LD_ADDR_VAR 0 3
16465: PUSH
16466: LD_VAR 0 1
16470: ST_TO_ADDR
// break ;
16471: GO 16475
// end ;
16473: GO 16426
16475: POP
16476: POP
// if not side then
16477: LD_VAR 0 3
16481: NOT
16482: IFFALSE 16486
// exit ;
16484: GO 16531
// for i := 1 to tmp do
16486: LD_ADDR_VAR 0 1
16490: PUSH
16491: DOUBLE
16492: LD_INT 1
16494: DEC
16495: ST_TO_ADDR
16496: LD_VAR 0 2
16500: PUSH
16501: FOR_TO
16502: IFFALSE 16529
// if Prob ( 60 ) then
16504: LD_INT 60
16506: PPUSH
16507: CALL_OW 13
16511: IFFALSE 16527
// SetSide ( i , side ) ;
16513: LD_VAR 0 1
16517: PPUSH
16518: LD_VAR 0 3
16522: PPUSH
16523: CALL_OW 235
16527: GO 16501
16529: POP
16530: POP
// end ;
16531: PPOPN 3
16533: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16534: LD_EXP 43
16538: PUSH
16539: LD_EXP 56
16543: AND
16544: IFFALSE 16663
16546: GO 16548
16548: DISABLE
16549: LD_INT 0
16551: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16552: LD_ADDR_VAR 0 1
16556: PUSH
16557: LD_INT 22
16559: PUSH
16560: LD_OWVAR 2
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: LD_INT 21
16571: PUSH
16572: LD_INT 1
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 3
16581: PUSH
16582: LD_INT 23
16584: PUSH
16585: LD_INT 0
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: LIST
16600: PPUSH
16601: CALL_OW 69
16605: PUSH
16606: FOR_IN
16607: IFFALSE 16661
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16609: LD_VAR 0 1
16613: PPUSH
16614: CALL_OW 257
16618: PUSH
16619: LD_INT 1
16621: PUSH
16622: LD_INT 2
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: LD_INT 4
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: IN
16637: IFFALSE 16659
// SetClass ( un , rand ( 1 , 4 ) ) ;
16639: LD_VAR 0 1
16643: PPUSH
16644: LD_INT 1
16646: PPUSH
16647: LD_INT 4
16649: PPUSH
16650: CALL_OW 12
16654: PPUSH
16655: CALL_OW 336
16659: GO 16606
16661: POP
16662: POP
// end ;
16663: PPOPN 1
16665: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16666: LD_EXP 43
16670: PUSH
16671: LD_EXP 55
16675: AND
16676: IFFALSE 16755
16678: GO 16680
16680: DISABLE
16681: LD_INT 0
16683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16684: LD_ADDR_VAR 0 1
16688: PUSH
16689: LD_INT 22
16691: PUSH
16692: LD_OWVAR 2
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 21
16703: PUSH
16704: LD_INT 3
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PPUSH
16715: CALL_OW 69
16719: ST_TO_ADDR
// if not tmp then
16720: LD_VAR 0 1
16724: NOT
16725: IFFALSE 16729
// exit ;
16727: GO 16755
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16729: LD_VAR 0 1
16733: PUSH
16734: LD_INT 1
16736: PPUSH
16737: LD_VAR 0 1
16741: PPUSH
16742: CALL_OW 12
16746: ARRAY
16747: PPUSH
16748: LD_INT 100
16750: PPUSH
16751: CALL_OW 234
// end ;
16755: PPOPN 1
16757: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16758: LD_EXP 43
16762: PUSH
16763: LD_EXP 57
16767: AND
16768: IFFALSE 16866
16770: GO 16772
16772: DISABLE
16773: LD_INT 0
16775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16776: LD_ADDR_VAR 0 1
16780: PUSH
16781: LD_INT 22
16783: PUSH
16784: LD_OWVAR 2
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 21
16795: PUSH
16796: LD_INT 1
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PPUSH
16807: CALL_OW 69
16811: ST_TO_ADDR
// if not tmp then
16812: LD_VAR 0 1
16816: NOT
16817: IFFALSE 16821
// exit ;
16819: GO 16866
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16821: LD_VAR 0 1
16825: PUSH
16826: LD_INT 1
16828: PPUSH
16829: LD_VAR 0 1
16833: PPUSH
16834: CALL_OW 12
16838: ARRAY
16839: PPUSH
16840: LD_INT 1
16842: PPUSH
16843: LD_INT 4
16845: PPUSH
16846: CALL_OW 12
16850: PPUSH
16851: LD_INT 3000
16853: PPUSH
16854: LD_INT 9000
16856: PPUSH
16857: CALL_OW 12
16861: PPUSH
16862: CALL_OW 492
// end ;
16866: PPOPN 1
16868: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16869: LD_EXP 43
16873: PUSH
16874: LD_EXP 58
16878: AND
16879: IFFALSE 16899
16881: GO 16883
16883: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16884: LD_INT 1
16886: PPUSH
16887: LD_OWVAR 2
16891: PPUSH
16892: LD_INT 0
16894: PPUSH
16895: CALL_OW 324
16899: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16900: LD_EXP 43
16904: PUSH
16905: LD_EXP 59
16909: AND
16910: IFFALSE 16993
16912: GO 16914
16914: DISABLE
16915: LD_INT 0
16917: PPUSH
16918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16919: LD_ADDR_VAR 0 2
16923: PUSH
16924: LD_INT 22
16926: PUSH
16927: LD_OWVAR 2
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: LD_INT 21
16938: PUSH
16939: LD_INT 3
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PPUSH
16950: CALL_OW 69
16954: ST_TO_ADDR
// if not tmp then
16955: LD_VAR 0 2
16959: NOT
16960: IFFALSE 16964
// exit ;
16962: GO 16993
// for i in tmp do
16964: LD_ADDR_VAR 0 1
16968: PUSH
16969: LD_VAR 0 2
16973: PUSH
16974: FOR_IN
16975: IFFALSE 16991
// SetBLevel ( i , 10 ) ;
16977: LD_VAR 0 1
16981: PPUSH
16982: LD_INT 10
16984: PPUSH
16985: CALL_OW 241
16989: GO 16974
16991: POP
16992: POP
// end ;
16993: PPOPN 2
16995: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16996: LD_EXP 43
17000: PUSH
17001: LD_EXP 60
17005: AND
17006: IFFALSE 17117
17008: GO 17010
17010: DISABLE
17011: LD_INT 0
17013: PPUSH
17014: PPUSH
17015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17016: LD_ADDR_VAR 0 3
17020: PUSH
17021: LD_INT 22
17023: PUSH
17024: LD_OWVAR 2
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 25
17035: PUSH
17036: LD_INT 1
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PPUSH
17047: CALL_OW 69
17051: ST_TO_ADDR
// if not tmp then
17052: LD_VAR 0 3
17056: NOT
17057: IFFALSE 17061
// exit ;
17059: GO 17117
// un := tmp [ rand ( 1 , tmp ) ] ;
17061: LD_ADDR_VAR 0 2
17065: PUSH
17066: LD_VAR 0 3
17070: PUSH
17071: LD_INT 1
17073: PPUSH
17074: LD_VAR 0 3
17078: PPUSH
17079: CALL_OW 12
17083: ARRAY
17084: ST_TO_ADDR
// if Crawls ( un ) then
17085: LD_VAR 0 2
17089: PPUSH
17090: CALL_OW 318
17094: IFFALSE 17105
// ComWalk ( un ) ;
17096: LD_VAR 0 2
17100: PPUSH
17101: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17105: LD_VAR 0 2
17109: PPUSH
17110: LD_INT 5
17112: PPUSH
17113: CALL_OW 336
// end ;
17117: PPOPN 3
17119: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17120: LD_EXP 43
17124: PUSH
17125: LD_EXP 61
17129: AND
17130: PUSH
17131: LD_OWVAR 67
17135: PUSH
17136: LD_INT 4
17138: LESS
17139: AND
17140: IFFALSE 17159
17142: GO 17144
17144: DISABLE
// begin Difficulty := Difficulty + 1 ;
17145: LD_ADDR_OWVAR 67
17149: PUSH
17150: LD_OWVAR 67
17154: PUSH
17155: LD_INT 1
17157: PLUS
17158: ST_TO_ADDR
// end ;
17159: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17160: LD_EXP 43
17164: PUSH
17165: LD_EXP 62
17169: AND
17170: IFFALSE 17273
17172: GO 17174
17174: DISABLE
17175: LD_INT 0
17177: PPUSH
// begin for i := 1 to 5 do
17178: LD_ADDR_VAR 0 1
17182: PUSH
17183: DOUBLE
17184: LD_INT 1
17186: DEC
17187: ST_TO_ADDR
17188: LD_INT 5
17190: PUSH
17191: FOR_TO
17192: IFFALSE 17271
// begin uc_nation := nation_nature ;
17194: LD_ADDR_OWVAR 21
17198: PUSH
17199: LD_INT 0
17201: ST_TO_ADDR
// uc_side := 0 ;
17202: LD_ADDR_OWVAR 20
17206: PUSH
17207: LD_INT 0
17209: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17210: LD_ADDR_OWVAR 29
17214: PUSH
17215: LD_INT 12
17217: PUSH
17218: LD_INT 12
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: ST_TO_ADDR
// hc_agressivity := 20 ;
17225: LD_ADDR_OWVAR 35
17229: PUSH
17230: LD_INT 20
17232: ST_TO_ADDR
// hc_class := class_tiger ;
17233: LD_ADDR_OWVAR 28
17237: PUSH
17238: LD_INT 14
17240: ST_TO_ADDR
// hc_gallery :=  ;
17241: LD_ADDR_OWVAR 33
17245: PUSH
17246: LD_STRING 
17248: ST_TO_ADDR
// hc_name :=  ;
17249: LD_ADDR_OWVAR 26
17253: PUSH
17254: LD_STRING 
17256: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17257: CALL_OW 44
17261: PPUSH
17262: LD_INT 0
17264: PPUSH
17265: CALL_OW 51
// end ;
17269: GO 17191
17271: POP
17272: POP
// end ;
17273: PPOPN 1
17275: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17276: LD_EXP 43
17280: PUSH
17281: LD_EXP 63
17285: AND
17286: IFFALSE 17295
17288: GO 17290
17290: DISABLE
// StreamSibBomb ;
17291: CALL 17296 0 0
17295: END
// export function StreamSibBomb ; var i , x , y ; begin
17296: LD_INT 0
17298: PPUSH
17299: PPUSH
17300: PPUSH
17301: PPUSH
// result := false ;
17302: LD_ADDR_VAR 0 1
17306: PUSH
17307: LD_INT 0
17309: ST_TO_ADDR
// for i := 1 to 16 do
17310: LD_ADDR_VAR 0 2
17314: PUSH
17315: DOUBLE
17316: LD_INT 1
17318: DEC
17319: ST_TO_ADDR
17320: LD_INT 16
17322: PUSH
17323: FOR_TO
17324: IFFALSE 17523
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17326: LD_ADDR_VAR 0 3
17330: PUSH
17331: LD_INT 10
17333: PUSH
17334: LD_INT 20
17336: PUSH
17337: LD_INT 30
17339: PUSH
17340: LD_INT 40
17342: PUSH
17343: LD_INT 50
17345: PUSH
17346: LD_INT 60
17348: PUSH
17349: LD_INT 70
17351: PUSH
17352: LD_INT 80
17354: PUSH
17355: LD_INT 90
17357: PUSH
17358: LD_INT 100
17360: PUSH
17361: LD_INT 110
17363: PUSH
17364: LD_INT 120
17366: PUSH
17367: LD_INT 130
17369: PUSH
17370: LD_INT 140
17372: PUSH
17373: LD_INT 150
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 1
17395: PPUSH
17396: LD_INT 15
17398: PPUSH
17399: CALL_OW 12
17403: ARRAY
17404: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17405: LD_ADDR_VAR 0 4
17409: PUSH
17410: LD_INT 10
17412: PUSH
17413: LD_INT 20
17415: PUSH
17416: LD_INT 30
17418: PUSH
17419: LD_INT 40
17421: PUSH
17422: LD_INT 50
17424: PUSH
17425: LD_INT 60
17427: PUSH
17428: LD_INT 70
17430: PUSH
17431: LD_INT 80
17433: PUSH
17434: LD_INT 90
17436: PUSH
17437: LD_INT 100
17439: PUSH
17440: LD_INT 110
17442: PUSH
17443: LD_INT 120
17445: PUSH
17446: LD_INT 130
17448: PUSH
17449: LD_INT 140
17451: PUSH
17452: LD_INT 150
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 1
17474: PPUSH
17475: LD_INT 15
17477: PPUSH
17478: CALL_OW 12
17482: ARRAY
17483: ST_TO_ADDR
// if ValidHex ( x , y ) then
17484: LD_VAR 0 3
17488: PPUSH
17489: LD_VAR 0 4
17493: PPUSH
17494: CALL_OW 488
17498: IFFALSE 17521
// begin result := [ x , y ] ;
17500: LD_ADDR_VAR 0 1
17504: PUSH
17505: LD_VAR 0 3
17509: PUSH
17510: LD_VAR 0 4
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: ST_TO_ADDR
// break ;
17519: GO 17523
// end ; end ;
17521: GO 17323
17523: POP
17524: POP
// if result then
17525: LD_VAR 0 1
17529: IFFALSE 17589
// begin ToLua ( playSibBomb() ) ;
17531: LD_STRING playSibBomb()
17533: PPUSH
17534: CALL_OW 559
// wait ( 0 0$14 ) ;
17538: LD_INT 490
17540: PPUSH
17541: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17545: LD_VAR 0 1
17549: PUSH
17550: LD_INT 1
17552: ARRAY
17553: PPUSH
17554: LD_VAR 0 1
17558: PUSH
17559: LD_INT 2
17561: ARRAY
17562: PPUSH
17563: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17567: LD_VAR 0 1
17571: PUSH
17572: LD_INT 1
17574: ARRAY
17575: PPUSH
17576: LD_VAR 0 1
17580: PUSH
17581: LD_INT 2
17583: ARRAY
17584: PPUSH
17585: CALL_OW 429
// end ; end ;
17589: LD_VAR 0 1
17593: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17594: LD_EXP 43
17598: PUSH
17599: LD_EXP 65
17603: AND
17604: IFFALSE 17616
17606: GO 17608
17608: DISABLE
// YouLost (  ) ;
17609: LD_STRING 
17611: PPUSH
17612: CALL_OW 104
17616: END
// every 0 0$1 trigger StreamModeActive and sFog do
17617: LD_EXP 43
17621: PUSH
17622: LD_EXP 64
17626: AND
17627: IFFALSE 17641
17629: GO 17631
17631: DISABLE
// FogOff ( your_side ) ;
17632: LD_OWVAR 2
17636: PPUSH
17637: CALL_OW 344
17641: END
// every 0 0$1 trigger StreamModeActive and sSun do
17642: LD_EXP 43
17646: PUSH
17647: LD_EXP 66
17651: AND
17652: IFFALSE 17680
17654: GO 17656
17656: DISABLE
// begin solar_recharge_percent := 0 ;
17657: LD_ADDR_OWVAR 79
17661: PUSH
17662: LD_INT 0
17664: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17665: LD_INT 10500
17667: PPUSH
17668: CALL_OW 67
// solar_recharge_percent := 100 ;
17672: LD_ADDR_OWVAR 79
17676: PUSH
17677: LD_INT 100
17679: ST_TO_ADDR
// end ;
17680: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17681: LD_EXP 43
17685: PUSH
17686: LD_EXP 67
17690: AND
17691: IFFALSE 17930
17693: GO 17695
17695: DISABLE
17696: LD_INT 0
17698: PPUSH
17699: PPUSH
17700: PPUSH
// begin tmp := [ ] ;
17701: LD_ADDR_VAR 0 3
17705: PUSH
17706: EMPTY
17707: ST_TO_ADDR
// for i := 1 to 6 do
17708: LD_ADDR_VAR 0 1
17712: PUSH
17713: DOUBLE
17714: LD_INT 1
17716: DEC
17717: ST_TO_ADDR
17718: LD_INT 6
17720: PUSH
17721: FOR_TO
17722: IFFALSE 17827
// begin uc_nation := nation_nature ;
17724: LD_ADDR_OWVAR 21
17728: PUSH
17729: LD_INT 0
17731: ST_TO_ADDR
// uc_side := 0 ;
17732: LD_ADDR_OWVAR 20
17736: PUSH
17737: LD_INT 0
17739: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17740: LD_ADDR_OWVAR 29
17744: PUSH
17745: LD_INT 12
17747: PUSH
17748: LD_INT 12
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: ST_TO_ADDR
// hc_agressivity := 20 ;
17755: LD_ADDR_OWVAR 35
17759: PUSH
17760: LD_INT 20
17762: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17763: LD_ADDR_OWVAR 28
17767: PUSH
17768: LD_INT 17
17770: ST_TO_ADDR
// hc_gallery :=  ;
17771: LD_ADDR_OWVAR 33
17775: PUSH
17776: LD_STRING 
17778: ST_TO_ADDR
// hc_name :=  ;
17779: LD_ADDR_OWVAR 26
17783: PUSH
17784: LD_STRING 
17786: ST_TO_ADDR
// un := CreateHuman ;
17787: LD_ADDR_VAR 0 2
17791: PUSH
17792: CALL_OW 44
17796: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17797: LD_VAR 0 2
17801: PPUSH
17802: LD_INT 1
17804: PPUSH
17805: CALL_OW 51
// tmp := tmp ^ un ;
17809: LD_ADDR_VAR 0 3
17813: PUSH
17814: LD_VAR 0 3
17818: PUSH
17819: LD_VAR 0 2
17823: ADD
17824: ST_TO_ADDR
// end ;
17825: GO 17721
17827: POP
17828: POP
// repeat wait ( 0 0$1 ) ;
17829: LD_INT 35
17831: PPUSH
17832: CALL_OW 67
// for un in tmp do
17836: LD_ADDR_VAR 0 2
17840: PUSH
17841: LD_VAR 0 3
17845: PUSH
17846: FOR_IN
17847: IFFALSE 17921
// begin if IsDead ( un ) then
17849: LD_VAR 0 2
17853: PPUSH
17854: CALL_OW 301
17858: IFFALSE 17878
// begin tmp := tmp diff un ;
17860: LD_ADDR_VAR 0 3
17864: PUSH
17865: LD_VAR 0 3
17869: PUSH
17870: LD_VAR 0 2
17874: DIFF
17875: ST_TO_ADDR
// continue ;
17876: GO 17846
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17878: LD_VAR 0 2
17882: PPUSH
17883: LD_INT 3
17885: PUSH
17886: LD_INT 22
17888: PUSH
17889: LD_INT 0
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PPUSH
17900: CALL_OW 69
17904: PPUSH
17905: LD_VAR 0 2
17909: PPUSH
17910: CALL_OW 74
17914: PPUSH
17915: CALL_OW 115
// end ;
17919: GO 17846
17921: POP
17922: POP
// until not tmp ;
17923: LD_VAR 0 3
17927: NOT
17928: IFFALSE 17829
// end ;
17930: PPOPN 3
17932: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17933: LD_EXP 43
17937: PUSH
17938: LD_EXP 68
17942: AND
17943: IFFALSE 17997
17945: GO 17947
17947: DISABLE
// begin ToLua ( displayTroll(); ) ;
17948: LD_STRING displayTroll();
17950: PPUSH
17951: CALL_OW 559
// wait ( 3 3$00 ) ;
17955: LD_INT 6300
17957: PPUSH
17958: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17962: LD_STRING hideTroll();
17964: PPUSH
17965: CALL_OW 559
// wait ( 1 1$00 ) ;
17969: LD_INT 2100
17971: PPUSH
17972: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17976: LD_STRING displayTroll();
17978: PPUSH
17979: CALL_OW 559
// wait ( 1 1$00 ) ;
17983: LD_INT 2100
17985: PPUSH
17986: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17990: LD_STRING hideTroll();
17992: PPUSH
17993: CALL_OW 559
// end ;
17997: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17998: LD_EXP 43
18002: PUSH
18003: LD_EXP 69
18007: AND
18008: IFFALSE 18071
18010: GO 18012
18012: DISABLE
18013: LD_INT 0
18015: PPUSH
// begin p := 0 ;
18016: LD_ADDR_VAR 0 1
18020: PUSH
18021: LD_INT 0
18023: ST_TO_ADDR
// repeat game_speed := 1 ;
18024: LD_ADDR_OWVAR 65
18028: PUSH
18029: LD_INT 1
18031: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18032: LD_INT 35
18034: PPUSH
18035: CALL_OW 67
// p := p + 1 ;
18039: LD_ADDR_VAR 0 1
18043: PUSH
18044: LD_VAR 0 1
18048: PUSH
18049: LD_INT 1
18051: PLUS
18052: ST_TO_ADDR
// until p >= 60 ;
18053: LD_VAR 0 1
18057: PUSH
18058: LD_INT 60
18060: GREATEREQUAL
18061: IFFALSE 18024
// game_speed := 4 ;
18063: LD_ADDR_OWVAR 65
18067: PUSH
18068: LD_INT 4
18070: ST_TO_ADDR
// end ;
18071: PPOPN 1
18073: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18074: LD_EXP 43
18078: PUSH
18079: LD_EXP 70
18083: AND
18084: IFFALSE 18230
18086: GO 18088
18088: DISABLE
18089: LD_INT 0
18091: PPUSH
18092: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18093: LD_ADDR_VAR 0 1
18097: PUSH
18098: LD_INT 22
18100: PUSH
18101: LD_OWVAR 2
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 2
18112: PUSH
18113: LD_INT 30
18115: PUSH
18116: LD_INT 0
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 30
18125: PUSH
18126: LD_INT 1
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: LIST
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PPUSH
18142: CALL_OW 69
18146: ST_TO_ADDR
// if not depot then
18147: LD_VAR 0 1
18151: NOT
18152: IFFALSE 18156
// exit ;
18154: GO 18230
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18156: LD_ADDR_VAR 0 2
18160: PUSH
18161: LD_VAR 0 1
18165: PUSH
18166: LD_INT 1
18168: PPUSH
18169: LD_VAR 0 1
18173: PPUSH
18174: CALL_OW 12
18178: ARRAY
18179: PPUSH
18180: CALL_OW 274
18184: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18185: LD_VAR 0 2
18189: PPUSH
18190: LD_INT 1
18192: PPUSH
18193: LD_INT 0
18195: PPUSH
18196: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18200: LD_VAR 0 2
18204: PPUSH
18205: LD_INT 2
18207: PPUSH
18208: LD_INT 0
18210: PPUSH
18211: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18215: LD_VAR 0 2
18219: PPUSH
18220: LD_INT 3
18222: PPUSH
18223: LD_INT 0
18225: PPUSH
18226: CALL_OW 277
// end ;
18230: PPOPN 2
18232: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18233: LD_EXP 43
18237: PUSH
18238: LD_EXP 71
18242: AND
18243: IFFALSE 18340
18245: GO 18247
18247: DISABLE
18248: LD_INT 0
18250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18251: LD_ADDR_VAR 0 1
18255: PUSH
18256: LD_INT 22
18258: PUSH
18259: LD_OWVAR 2
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 21
18270: PUSH
18271: LD_INT 1
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 3
18280: PUSH
18281: LD_INT 23
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: LIST
18299: PPUSH
18300: CALL_OW 69
18304: ST_TO_ADDR
// if not tmp then
18305: LD_VAR 0 1
18309: NOT
18310: IFFALSE 18314
// exit ;
18312: GO 18340
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18314: LD_VAR 0 1
18318: PUSH
18319: LD_INT 1
18321: PPUSH
18322: LD_VAR 0 1
18326: PPUSH
18327: CALL_OW 12
18331: ARRAY
18332: PPUSH
18333: LD_INT 200
18335: PPUSH
18336: CALL_OW 234
// end ;
18340: PPOPN 1
18342: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18343: LD_EXP 43
18347: PUSH
18348: LD_EXP 72
18352: AND
18353: IFFALSE 18432
18355: GO 18357
18357: DISABLE
18358: LD_INT 0
18360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18361: LD_ADDR_VAR 0 1
18365: PUSH
18366: LD_INT 22
18368: PUSH
18369: LD_OWVAR 2
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 21
18380: PUSH
18381: LD_INT 2
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PPUSH
18392: CALL_OW 69
18396: ST_TO_ADDR
// if not tmp then
18397: LD_VAR 0 1
18401: NOT
18402: IFFALSE 18406
// exit ;
18404: GO 18432
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18406: LD_VAR 0 1
18410: PUSH
18411: LD_INT 1
18413: PPUSH
18414: LD_VAR 0 1
18418: PPUSH
18419: CALL_OW 12
18423: ARRAY
18424: PPUSH
18425: LD_INT 60
18427: PPUSH
18428: CALL_OW 234
// end ;
18432: PPOPN 1
18434: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18435: LD_EXP 43
18439: PUSH
18440: LD_EXP 73
18444: AND
18445: IFFALSE 18544
18447: GO 18449
18449: DISABLE
18450: LD_INT 0
18452: PPUSH
18453: PPUSH
// begin enable ;
18454: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18455: LD_ADDR_VAR 0 1
18459: PUSH
18460: LD_INT 22
18462: PUSH
18463: LD_OWVAR 2
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 61
18474: PUSH
18475: EMPTY
18476: LIST
18477: PUSH
18478: LD_INT 33
18480: PUSH
18481: LD_INT 2
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: LIST
18492: PPUSH
18493: CALL_OW 69
18497: ST_TO_ADDR
// if not tmp then
18498: LD_VAR 0 1
18502: NOT
18503: IFFALSE 18507
// exit ;
18505: GO 18544
// for i in tmp do
18507: LD_ADDR_VAR 0 2
18511: PUSH
18512: LD_VAR 0 1
18516: PUSH
18517: FOR_IN
18518: IFFALSE 18542
// if IsControledBy ( i ) then
18520: LD_VAR 0 2
18524: PPUSH
18525: CALL_OW 312
18529: IFFALSE 18540
// ComUnlink ( i ) ;
18531: LD_VAR 0 2
18535: PPUSH
18536: CALL_OW 136
18540: GO 18517
18542: POP
18543: POP
// end ;
18544: PPOPN 2
18546: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18547: LD_EXP 43
18551: PUSH
18552: LD_EXP 74
18556: AND
18557: IFFALSE 18697
18559: GO 18561
18561: DISABLE
18562: LD_INT 0
18564: PPUSH
18565: PPUSH
// begin ToLua ( displayPowell(); ) ;
18566: LD_STRING displayPowell();
18568: PPUSH
18569: CALL_OW 559
// uc_side := 0 ;
18573: LD_ADDR_OWVAR 20
18577: PUSH
18578: LD_INT 0
18580: ST_TO_ADDR
// uc_nation := 2 ;
18581: LD_ADDR_OWVAR 21
18585: PUSH
18586: LD_INT 2
18588: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18589: LD_ADDR_OWVAR 37
18593: PUSH
18594: LD_INT 14
18596: ST_TO_ADDR
// vc_engine := engine_siberite ;
18597: LD_ADDR_OWVAR 39
18601: PUSH
18602: LD_INT 3
18604: ST_TO_ADDR
// vc_control := control_apeman ;
18605: LD_ADDR_OWVAR 38
18609: PUSH
18610: LD_INT 5
18612: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18613: LD_ADDR_OWVAR 40
18617: PUSH
18618: LD_INT 29
18620: ST_TO_ADDR
// un := CreateVehicle ;
18621: LD_ADDR_VAR 0 2
18625: PUSH
18626: CALL_OW 45
18630: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18631: LD_VAR 0 2
18635: PPUSH
18636: LD_INT 1
18638: PPUSH
18639: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18643: LD_INT 35
18645: PPUSH
18646: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18650: LD_VAR 0 2
18654: PPUSH
18655: LD_INT 22
18657: PUSH
18658: LD_OWVAR 2
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PPUSH
18667: CALL_OW 69
18671: PPUSH
18672: LD_VAR 0 2
18676: PPUSH
18677: CALL_OW 74
18681: PPUSH
18682: CALL_OW 115
// until IsDead ( un ) ;
18686: LD_VAR 0 2
18690: PPUSH
18691: CALL_OW 301
18695: IFFALSE 18643
// end ;
18697: PPOPN 2
18699: END
// every 0 0$1 trigger StreamModeActive and sStu do
18700: LD_EXP 43
18704: PUSH
18705: LD_EXP 82
18709: AND
18710: IFFALSE 18726
18712: GO 18714
18714: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18715: LD_STRING displayStucuk();
18717: PPUSH
18718: CALL_OW 559
// ResetFog ;
18722: CALL_OW 335
// end ;
18726: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18727: LD_EXP 43
18731: PUSH
18732: LD_EXP 75
18736: AND
18737: IFFALSE 18878
18739: GO 18741
18741: DISABLE
18742: LD_INT 0
18744: PPUSH
18745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18746: LD_ADDR_VAR 0 2
18750: PUSH
18751: LD_INT 22
18753: PUSH
18754: LD_OWVAR 2
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 21
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PPUSH
18777: CALL_OW 69
18781: ST_TO_ADDR
// if not tmp then
18782: LD_VAR 0 2
18786: NOT
18787: IFFALSE 18791
// exit ;
18789: GO 18878
// un := tmp [ rand ( 1 , tmp ) ] ;
18791: LD_ADDR_VAR 0 1
18795: PUSH
18796: LD_VAR 0 2
18800: PUSH
18801: LD_INT 1
18803: PPUSH
18804: LD_VAR 0 2
18808: PPUSH
18809: CALL_OW 12
18813: ARRAY
18814: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18815: LD_VAR 0 1
18819: PPUSH
18820: LD_INT 0
18822: PPUSH
18823: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18827: LD_VAR 0 1
18831: PPUSH
18832: LD_OWVAR 3
18836: PUSH
18837: LD_VAR 0 1
18841: DIFF
18842: PPUSH
18843: LD_VAR 0 1
18847: PPUSH
18848: CALL_OW 74
18852: PPUSH
18853: CALL_OW 115
// wait ( 0 0$20 ) ;
18857: LD_INT 700
18859: PPUSH
18860: CALL_OW 67
// SetSide ( un , your_side ) ;
18864: LD_VAR 0 1
18868: PPUSH
18869: LD_OWVAR 2
18873: PPUSH
18874: CALL_OW 235
// end ;
18878: PPOPN 2
18880: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18881: LD_EXP 43
18885: PUSH
18886: LD_EXP 76
18890: AND
18891: IFFALSE 18997
18893: GO 18895
18895: DISABLE
18896: LD_INT 0
18898: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18899: LD_ADDR_VAR 0 1
18903: PUSH
18904: LD_INT 22
18906: PUSH
18907: LD_OWVAR 2
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 2
18918: PUSH
18919: LD_INT 30
18921: PUSH
18922: LD_INT 0
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 30
18931: PUSH
18932: LD_INT 1
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: LIST
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PPUSH
18948: CALL_OW 69
18952: ST_TO_ADDR
// if not depot then
18953: LD_VAR 0 1
18957: NOT
18958: IFFALSE 18962
// exit ;
18960: GO 18997
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18962: LD_VAR 0 1
18966: PUSH
18967: LD_INT 1
18969: ARRAY
18970: PPUSH
18971: CALL_OW 250
18975: PPUSH
18976: LD_VAR 0 1
18980: PUSH
18981: LD_INT 1
18983: ARRAY
18984: PPUSH
18985: CALL_OW 251
18989: PPUSH
18990: LD_INT 70
18992: PPUSH
18993: CALL_OW 495
// end ;
18997: PPOPN 1
18999: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19000: LD_EXP 43
19004: PUSH
19005: LD_EXP 77
19009: AND
19010: IFFALSE 19221
19012: GO 19014
19014: DISABLE
19015: LD_INT 0
19017: PPUSH
19018: PPUSH
19019: PPUSH
19020: PPUSH
19021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19022: LD_ADDR_VAR 0 5
19026: PUSH
19027: LD_INT 22
19029: PUSH
19030: LD_OWVAR 2
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 21
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PPUSH
19053: CALL_OW 69
19057: ST_TO_ADDR
// if not tmp then
19058: LD_VAR 0 5
19062: NOT
19063: IFFALSE 19067
// exit ;
19065: GO 19221
// for i in tmp do
19067: LD_ADDR_VAR 0 1
19071: PUSH
19072: LD_VAR 0 5
19076: PUSH
19077: FOR_IN
19078: IFFALSE 19219
// begin d := rand ( 0 , 5 ) ;
19080: LD_ADDR_VAR 0 4
19084: PUSH
19085: LD_INT 0
19087: PPUSH
19088: LD_INT 5
19090: PPUSH
19091: CALL_OW 12
19095: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19096: LD_ADDR_VAR 0 2
19100: PUSH
19101: LD_VAR 0 1
19105: PPUSH
19106: CALL_OW 250
19110: PPUSH
19111: LD_VAR 0 4
19115: PPUSH
19116: LD_INT 3
19118: PPUSH
19119: LD_INT 12
19121: PPUSH
19122: CALL_OW 12
19126: PPUSH
19127: CALL_OW 272
19131: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19132: LD_ADDR_VAR 0 3
19136: PUSH
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 251
19146: PPUSH
19147: LD_VAR 0 4
19151: PPUSH
19152: LD_INT 3
19154: PPUSH
19155: LD_INT 12
19157: PPUSH
19158: CALL_OW 12
19162: PPUSH
19163: CALL_OW 273
19167: ST_TO_ADDR
// if ValidHex ( x , y ) then
19168: LD_VAR 0 2
19172: PPUSH
19173: LD_VAR 0 3
19177: PPUSH
19178: CALL_OW 488
19182: IFFALSE 19217
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19184: LD_VAR 0 1
19188: PPUSH
19189: LD_VAR 0 2
19193: PPUSH
19194: LD_VAR 0 3
19198: PPUSH
19199: LD_INT 3
19201: PPUSH
19202: LD_INT 6
19204: PPUSH
19205: CALL_OW 12
19209: PPUSH
19210: LD_INT 1
19212: PPUSH
19213: CALL_OW 483
// end ;
19217: GO 19077
19219: POP
19220: POP
// end ;
19221: PPOPN 5
19223: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19224: LD_EXP 43
19228: PUSH
19229: LD_EXP 78
19233: AND
19234: IFFALSE 19328
19236: GO 19238
19238: DISABLE
19239: LD_INT 0
19241: PPUSH
19242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19243: LD_ADDR_VAR 0 2
19247: PUSH
19248: LD_INT 22
19250: PUSH
19251: LD_OWVAR 2
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 32
19262: PUSH
19263: LD_INT 1
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 21
19272: PUSH
19273: LD_INT 2
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: LIST
19284: PPUSH
19285: CALL_OW 69
19289: ST_TO_ADDR
// if not tmp then
19290: LD_VAR 0 2
19294: NOT
19295: IFFALSE 19299
// exit ;
19297: GO 19328
// for i in tmp do
19299: LD_ADDR_VAR 0 1
19303: PUSH
19304: LD_VAR 0 2
19308: PUSH
19309: FOR_IN
19310: IFFALSE 19326
// SetFuel ( i , 0 ) ;
19312: LD_VAR 0 1
19316: PPUSH
19317: LD_INT 0
19319: PPUSH
19320: CALL_OW 240
19324: GO 19309
19326: POP
19327: POP
// end ;
19328: PPOPN 2
19330: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19331: LD_EXP 43
19335: PUSH
19336: LD_EXP 79
19340: AND
19341: IFFALSE 19407
19343: GO 19345
19345: DISABLE
19346: LD_INT 0
19348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19349: LD_ADDR_VAR 0 1
19353: PUSH
19354: LD_INT 22
19356: PUSH
19357: LD_OWVAR 2
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 30
19368: PUSH
19369: LD_INT 29
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PPUSH
19380: CALL_OW 69
19384: ST_TO_ADDR
// if not tmp then
19385: LD_VAR 0 1
19389: NOT
19390: IFFALSE 19394
// exit ;
19392: GO 19407
// DestroyUnit ( tmp [ 1 ] ) ;
19394: LD_VAR 0 1
19398: PUSH
19399: LD_INT 1
19401: ARRAY
19402: PPUSH
19403: CALL_OW 65
// end ;
19407: PPOPN 1
19409: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19410: LD_EXP 43
19414: PUSH
19415: LD_EXP 81
19419: AND
19420: IFFALSE 19549
19422: GO 19424
19424: DISABLE
19425: LD_INT 0
19427: PPUSH
// begin uc_side := 0 ;
19428: LD_ADDR_OWVAR 20
19432: PUSH
19433: LD_INT 0
19435: ST_TO_ADDR
// uc_nation := nation_arabian ;
19436: LD_ADDR_OWVAR 21
19440: PUSH
19441: LD_INT 2
19443: ST_TO_ADDR
// hc_gallery :=  ;
19444: LD_ADDR_OWVAR 33
19448: PUSH
19449: LD_STRING 
19451: ST_TO_ADDR
// hc_name :=  ;
19452: LD_ADDR_OWVAR 26
19456: PUSH
19457: LD_STRING 
19459: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19460: LD_INT 1
19462: PPUSH
19463: LD_INT 11
19465: PPUSH
19466: LD_INT 10
19468: PPUSH
19469: CALL_OW 380
// un := CreateHuman ;
19473: LD_ADDR_VAR 0 1
19477: PUSH
19478: CALL_OW 44
19482: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19483: LD_VAR 0 1
19487: PPUSH
19488: LD_INT 1
19490: PPUSH
19491: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19495: LD_INT 35
19497: PPUSH
19498: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19502: LD_VAR 0 1
19506: PPUSH
19507: LD_INT 22
19509: PUSH
19510: LD_OWVAR 2
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PPUSH
19519: CALL_OW 69
19523: PPUSH
19524: LD_VAR 0 1
19528: PPUSH
19529: CALL_OW 74
19533: PPUSH
19534: CALL_OW 115
// until IsDead ( un ) ;
19538: LD_VAR 0 1
19542: PPUSH
19543: CALL_OW 301
19547: IFFALSE 19495
// end ;
19549: PPOPN 1
19551: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19552: LD_EXP 43
19556: PUSH
19557: LD_EXP 83
19561: AND
19562: IFFALSE 19574
19564: GO 19566
19566: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19567: LD_STRING earthquake(getX(game), 0, 32)
19569: PPUSH
19570: CALL_OW 559
19574: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19575: LD_EXP 43
19579: PUSH
19580: LD_EXP 84
19584: AND
19585: IFFALSE 19676
19587: GO 19589
19589: DISABLE
19590: LD_INT 0
19592: PPUSH
// begin enable ;
19593: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19594: LD_ADDR_VAR 0 1
19598: PUSH
19599: LD_INT 22
19601: PUSH
19602: LD_OWVAR 2
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 21
19613: PUSH
19614: LD_INT 2
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 33
19623: PUSH
19624: LD_INT 3
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: LIST
19635: PPUSH
19636: CALL_OW 69
19640: ST_TO_ADDR
// if not tmp then
19641: LD_VAR 0 1
19645: NOT
19646: IFFALSE 19650
// exit ;
19648: GO 19676
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19650: LD_VAR 0 1
19654: PUSH
19655: LD_INT 1
19657: PPUSH
19658: LD_VAR 0 1
19662: PPUSH
19663: CALL_OW 12
19667: ARRAY
19668: PPUSH
19669: LD_INT 1
19671: PPUSH
19672: CALL_OW 234
// end ;
19676: PPOPN 1
19678: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19679: LD_EXP 43
19683: PUSH
19684: LD_EXP 85
19688: AND
19689: IFFALSE 19830
19691: GO 19693
19693: DISABLE
19694: LD_INT 0
19696: PPUSH
19697: PPUSH
19698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19699: LD_ADDR_VAR 0 3
19703: PUSH
19704: LD_INT 22
19706: PUSH
19707: LD_OWVAR 2
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 25
19718: PUSH
19719: LD_INT 1
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PPUSH
19730: CALL_OW 69
19734: ST_TO_ADDR
// if not tmp then
19735: LD_VAR 0 3
19739: NOT
19740: IFFALSE 19744
// exit ;
19742: GO 19830
// un := tmp [ rand ( 1 , tmp ) ] ;
19744: LD_ADDR_VAR 0 2
19748: PUSH
19749: LD_VAR 0 3
19753: PUSH
19754: LD_INT 1
19756: PPUSH
19757: LD_VAR 0 3
19761: PPUSH
19762: CALL_OW 12
19766: ARRAY
19767: ST_TO_ADDR
// if Crawls ( un ) then
19768: LD_VAR 0 2
19772: PPUSH
19773: CALL_OW 318
19777: IFFALSE 19788
// ComWalk ( un ) ;
19779: LD_VAR 0 2
19783: PPUSH
19784: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19788: LD_VAR 0 2
19792: PPUSH
19793: LD_INT 9
19795: PPUSH
19796: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19800: LD_INT 28
19802: PPUSH
19803: LD_OWVAR 2
19807: PPUSH
19808: LD_INT 2
19810: PPUSH
19811: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19815: LD_INT 29
19817: PPUSH
19818: LD_OWVAR 2
19822: PPUSH
19823: LD_INT 2
19825: PPUSH
19826: CALL_OW 322
// end ;
19830: PPOPN 3
19832: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19833: LD_EXP 43
19837: PUSH
19838: LD_EXP 86
19842: AND
19843: IFFALSE 19954
19845: GO 19847
19847: DISABLE
19848: LD_INT 0
19850: PPUSH
19851: PPUSH
19852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19853: LD_ADDR_VAR 0 3
19857: PUSH
19858: LD_INT 22
19860: PUSH
19861: LD_OWVAR 2
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 25
19872: PUSH
19873: LD_INT 1
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PPUSH
19884: CALL_OW 69
19888: ST_TO_ADDR
// if not tmp then
19889: LD_VAR 0 3
19893: NOT
19894: IFFALSE 19898
// exit ;
19896: GO 19954
// un := tmp [ rand ( 1 , tmp ) ] ;
19898: LD_ADDR_VAR 0 2
19902: PUSH
19903: LD_VAR 0 3
19907: PUSH
19908: LD_INT 1
19910: PPUSH
19911: LD_VAR 0 3
19915: PPUSH
19916: CALL_OW 12
19920: ARRAY
19921: ST_TO_ADDR
// if Crawls ( un ) then
19922: LD_VAR 0 2
19926: PPUSH
19927: CALL_OW 318
19931: IFFALSE 19942
// ComWalk ( un ) ;
19933: LD_VAR 0 2
19937: PPUSH
19938: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19942: LD_VAR 0 2
19946: PPUSH
19947: LD_INT 8
19949: PPUSH
19950: CALL_OW 336
// end ;
19954: PPOPN 3
19956: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19957: LD_EXP 43
19961: PUSH
19962: LD_EXP 87
19966: AND
19967: IFFALSE 20111
19969: GO 19971
19971: DISABLE
19972: LD_INT 0
19974: PPUSH
19975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19976: LD_ADDR_VAR 0 2
19980: PUSH
19981: LD_INT 22
19983: PUSH
19984: LD_OWVAR 2
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 21
19995: PUSH
19996: LD_INT 2
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 2
20005: PUSH
20006: LD_INT 34
20008: PUSH
20009: LD_INT 12
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 34
20018: PUSH
20019: LD_INT 51
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 34
20028: PUSH
20029: LD_INT 32
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: LIST
20046: PPUSH
20047: CALL_OW 69
20051: ST_TO_ADDR
// if not tmp then
20052: LD_VAR 0 2
20056: NOT
20057: IFFALSE 20061
// exit ;
20059: GO 20111
// for i in tmp do
20061: LD_ADDR_VAR 0 1
20065: PUSH
20066: LD_VAR 0 2
20070: PUSH
20071: FOR_IN
20072: IFFALSE 20109
// if GetCargo ( i , mat_artifact ) = 0 then
20074: LD_VAR 0 1
20078: PPUSH
20079: LD_INT 4
20081: PPUSH
20082: CALL_OW 289
20086: PUSH
20087: LD_INT 0
20089: EQUAL
20090: IFFALSE 20107
// SetCargo ( i , mat_siberit , 100 ) ;
20092: LD_VAR 0 1
20096: PPUSH
20097: LD_INT 3
20099: PPUSH
20100: LD_INT 100
20102: PPUSH
20103: CALL_OW 290
20107: GO 20071
20109: POP
20110: POP
// end ;
20111: PPOPN 2
20113: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20114: LD_EXP 43
20118: PUSH
20119: LD_EXP 88
20123: AND
20124: IFFALSE 20307
20126: GO 20128
20128: DISABLE
20129: LD_INT 0
20131: PPUSH
20132: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20133: LD_ADDR_VAR 0 2
20137: PUSH
20138: LD_INT 22
20140: PUSH
20141: LD_OWVAR 2
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PPUSH
20150: CALL_OW 69
20154: ST_TO_ADDR
// if not tmp then
20155: LD_VAR 0 2
20159: NOT
20160: IFFALSE 20164
// exit ;
20162: GO 20307
// for i := 1 to 2 do
20164: LD_ADDR_VAR 0 1
20168: PUSH
20169: DOUBLE
20170: LD_INT 1
20172: DEC
20173: ST_TO_ADDR
20174: LD_INT 2
20176: PUSH
20177: FOR_TO
20178: IFFALSE 20305
// begin uc_side := your_side ;
20180: LD_ADDR_OWVAR 20
20184: PUSH
20185: LD_OWVAR 2
20189: ST_TO_ADDR
// uc_nation := nation_american ;
20190: LD_ADDR_OWVAR 21
20194: PUSH
20195: LD_INT 1
20197: ST_TO_ADDR
// vc_chassis := us_morphling ;
20198: LD_ADDR_OWVAR 37
20202: PUSH
20203: LD_INT 5
20205: ST_TO_ADDR
// vc_engine := engine_siberite ;
20206: LD_ADDR_OWVAR 39
20210: PUSH
20211: LD_INT 3
20213: ST_TO_ADDR
// vc_control := control_computer ;
20214: LD_ADDR_OWVAR 38
20218: PUSH
20219: LD_INT 3
20221: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20222: LD_ADDR_OWVAR 40
20226: PUSH
20227: LD_INT 10
20229: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20230: LD_VAR 0 2
20234: PUSH
20235: LD_INT 1
20237: ARRAY
20238: PPUSH
20239: CALL_OW 310
20243: NOT
20244: IFFALSE 20291
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20246: CALL_OW 45
20250: PPUSH
20251: LD_VAR 0 2
20255: PUSH
20256: LD_INT 1
20258: ARRAY
20259: PPUSH
20260: CALL_OW 250
20264: PPUSH
20265: LD_VAR 0 2
20269: PUSH
20270: LD_INT 1
20272: ARRAY
20273: PPUSH
20274: CALL_OW 251
20278: PPUSH
20279: LD_INT 12
20281: PPUSH
20282: LD_INT 1
20284: PPUSH
20285: CALL_OW 50
20289: GO 20303
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20291: CALL_OW 45
20295: PPUSH
20296: LD_INT 1
20298: PPUSH
20299: CALL_OW 51
// end ;
20303: GO 20177
20305: POP
20306: POP
// end ;
20307: PPOPN 2
20309: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20310: LD_EXP 43
20314: PUSH
20315: LD_EXP 89
20319: AND
20320: IFFALSE 20542
20322: GO 20324
20324: DISABLE
20325: LD_INT 0
20327: PPUSH
20328: PPUSH
20329: PPUSH
20330: PPUSH
20331: PPUSH
20332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20333: LD_ADDR_VAR 0 6
20337: PUSH
20338: LD_INT 22
20340: PUSH
20341: LD_OWVAR 2
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 21
20352: PUSH
20353: LD_INT 1
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 3
20362: PUSH
20363: LD_INT 23
20365: PUSH
20366: LD_INT 0
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: LIST
20381: PPUSH
20382: CALL_OW 69
20386: ST_TO_ADDR
// if not tmp then
20387: LD_VAR 0 6
20391: NOT
20392: IFFALSE 20396
// exit ;
20394: GO 20542
// s1 := rand ( 1 , 4 ) ;
20396: LD_ADDR_VAR 0 2
20400: PUSH
20401: LD_INT 1
20403: PPUSH
20404: LD_INT 4
20406: PPUSH
20407: CALL_OW 12
20411: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20412: LD_ADDR_VAR 0 4
20416: PUSH
20417: LD_VAR 0 6
20421: PUSH
20422: LD_INT 1
20424: ARRAY
20425: PPUSH
20426: LD_VAR 0 2
20430: PPUSH
20431: CALL_OW 259
20435: ST_TO_ADDR
// if s1 = 1 then
20436: LD_VAR 0 2
20440: PUSH
20441: LD_INT 1
20443: EQUAL
20444: IFFALSE 20464
// s2 := rand ( 2 , 4 ) else
20446: LD_ADDR_VAR 0 3
20450: PUSH
20451: LD_INT 2
20453: PPUSH
20454: LD_INT 4
20456: PPUSH
20457: CALL_OW 12
20461: ST_TO_ADDR
20462: GO 20472
// s2 := 1 ;
20464: LD_ADDR_VAR 0 3
20468: PUSH
20469: LD_INT 1
20471: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20472: LD_ADDR_VAR 0 5
20476: PUSH
20477: LD_VAR 0 6
20481: PUSH
20482: LD_INT 1
20484: ARRAY
20485: PPUSH
20486: LD_VAR 0 3
20490: PPUSH
20491: CALL_OW 259
20495: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20496: LD_VAR 0 6
20500: PUSH
20501: LD_INT 1
20503: ARRAY
20504: PPUSH
20505: LD_VAR 0 2
20509: PPUSH
20510: LD_VAR 0 5
20514: PPUSH
20515: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20519: LD_VAR 0 6
20523: PUSH
20524: LD_INT 1
20526: ARRAY
20527: PPUSH
20528: LD_VAR 0 3
20532: PPUSH
20533: LD_VAR 0 4
20537: PPUSH
20538: CALL_OW 237
// end ;
20542: PPOPN 6
20544: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20545: LD_EXP 43
20549: PUSH
20550: LD_EXP 90
20554: AND
20555: IFFALSE 20634
20557: GO 20559
20559: DISABLE
20560: LD_INT 0
20562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20563: LD_ADDR_VAR 0 1
20567: PUSH
20568: LD_INT 22
20570: PUSH
20571: LD_OWVAR 2
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 30
20582: PUSH
20583: LD_INT 3
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PPUSH
20594: CALL_OW 69
20598: ST_TO_ADDR
// if not tmp then
20599: LD_VAR 0 1
20603: NOT
20604: IFFALSE 20608
// exit ;
20606: GO 20634
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20608: LD_VAR 0 1
20612: PUSH
20613: LD_INT 1
20615: PPUSH
20616: LD_VAR 0 1
20620: PPUSH
20621: CALL_OW 12
20625: ARRAY
20626: PPUSH
20627: LD_INT 1
20629: PPUSH
20630: CALL_OW 234
// end ;
20634: PPOPN 1
20636: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20637: LD_EXP 43
20641: PUSH
20642: LD_EXP 91
20646: AND
20647: IFFALSE 20759
20649: GO 20651
20651: DISABLE
20652: LD_INT 0
20654: PPUSH
20655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20656: LD_ADDR_VAR 0 2
20660: PUSH
20661: LD_INT 22
20663: PUSH
20664: LD_OWVAR 2
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 2
20675: PUSH
20676: LD_INT 30
20678: PUSH
20679: LD_INT 27
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 30
20688: PUSH
20689: LD_INT 26
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 30
20698: PUSH
20699: LD_INT 28
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PPUSH
20716: CALL_OW 69
20720: ST_TO_ADDR
// if not tmp then
20721: LD_VAR 0 2
20725: NOT
20726: IFFALSE 20730
// exit ;
20728: GO 20759
// for i in tmp do
20730: LD_ADDR_VAR 0 1
20734: PUSH
20735: LD_VAR 0 2
20739: PUSH
20740: FOR_IN
20741: IFFALSE 20757
// SetLives ( i , 1 ) ;
20743: LD_VAR 0 1
20747: PPUSH
20748: LD_INT 1
20750: PPUSH
20751: CALL_OW 234
20755: GO 20740
20757: POP
20758: POP
// end ;
20759: PPOPN 2
20761: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20762: LD_EXP 43
20766: PUSH
20767: LD_EXP 92
20771: AND
20772: IFFALSE 21059
20774: GO 20776
20776: DISABLE
20777: LD_INT 0
20779: PPUSH
20780: PPUSH
20781: PPUSH
// begin i := rand ( 1 , 7 ) ;
20782: LD_ADDR_VAR 0 1
20786: PUSH
20787: LD_INT 1
20789: PPUSH
20790: LD_INT 7
20792: PPUSH
20793: CALL_OW 12
20797: ST_TO_ADDR
// case i of 1 :
20798: LD_VAR 0 1
20802: PUSH
20803: LD_INT 1
20805: DOUBLE
20806: EQUAL
20807: IFTRUE 20811
20809: GO 20821
20811: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20812: LD_STRING earthquake(getX(game), 0, 32)
20814: PPUSH
20815: CALL_OW 559
20819: GO 21059
20821: LD_INT 2
20823: DOUBLE
20824: EQUAL
20825: IFTRUE 20829
20827: GO 20843
20829: POP
// begin ToLua ( displayStucuk(); ) ;
20830: LD_STRING displayStucuk();
20832: PPUSH
20833: CALL_OW 559
// ResetFog ;
20837: CALL_OW 335
// end ; 3 :
20841: GO 21059
20843: LD_INT 3
20845: DOUBLE
20846: EQUAL
20847: IFTRUE 20851
20849: GO 20955
20851: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20852: LD_ADDR_VAR 0 2
20856: PUSH
20857: LD_INT 22
20859: PUSH
20860: LD_OWVAR 2
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 25
20871: PUSH
20872: LD_INT 1
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PPUSH
20883: CALL_OW 69
20887: ST_TO_ADDR
// if not tmp then
20888: LD_VAR 0 2
20892: NOT
20893: IFFALSE 20897
// exit ;
20895: GO 21059
// un := tmp [ rand ( 1 , tmp ) ] ;
20897: LD_ADDR_VAR 0 3
20901: PUSH
20902: LD_VAR 0 2
20906: PUSH
20907: LD_INT 1
20909: PPUSH
20910: LD_VAR 0 2
20914: PPUSH
20915: CALL_OW 12
20919: ARRAY
20920: ST_TO_ADDR
// if Crawls ( un ) then
20921: LD_VAR 0 3
20925: PPUSH
20926: CALL_OW 318
20930: IFFALSE 20941
// ComWalk ( un ) ;
20932: LD_VAR 0 3
20936: PPUSH
20937: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20941: LD_VAR 0 3
20945: PPUSH
20946: LD_INT 8
20948: PPUSH
20949: CALL_OW 336
// end ; 4 :
20953: GO 21059
20955: LD_INT 4
20957: DOUBLE
20958: EQUAL
20959: IFTRUE 20963
20961: GO 21037
20963: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20964: LD_ADDR_VAR 0 2
20968: PUSH
20969: LD_INT 22
20971: PUSH
20972: LD_OWVAR 2
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 30
20983: PUSH
20984: LD_INT 29
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PPUSH
20995: CALL_OW 69
20999: ST_TO_ADDR
// if not tmp then
21000: LD_VAR 0 2
21004: NOT
21005: IFFALSE 21009
// exit ;
21007: GO 21059
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21009: LD_VAR 0 2
21013: PUSH
21014: LD_INT 1
21016: ARRAY
21017: PPUSH
21018: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21022: LD_VAR 0 2
21026: PUSH
21027: LD_INT 1
21029: ARRAY
21030: PPUSH
21031: CALL_OW 65
// end ; 5 .. 7 :
21035: GO 21059
21037: LD_INT 5
21039: DOUBLE
21040: GREATEREQUAL
21041: IFFALSE 21049
21043: LD_INT 7
21045: DOUBLE
21046: LESSEQUAL
21047: IFTRUE 21051
21049: GO 21058
21051: POP
// StreamSibBomb ; end ;
21052: CALL 17296 0 0
21056: GO 21059
21058: POP
// end ;
21059: PPOPN 3
21061: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21062: LD_EXP 43
21066: PUSH
21067: LD_EXP 93
21071: AND
21072: IFFALSE 21228
21074: GO 21076
21076: DISABLE
21077: LD_INT 0
21079: PPUSH
21080: PPUSH
21081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21082: LD_ADDR_VAR 0 2
21086: PUSH
21087: LD_INT 81
21089: PUSH
21090: LD_OWVAR 2
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 2
21101: PUSH
21102: LD_INT 21
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 21
21114: PUSH
21115: LD_INT 2
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: LIST
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PPUSH
21131: CALL_OW 69
21135: ST_TO_ADDR
// if not tmp then
21136: LD_VAR 0 2
21140: NOT
21141: IFFALSE 21145
// exit ;
21143: GO 21228
// p := 0 ;
21145: LD_ADDR_VAR 0 3
21149: PUSH
21150: LD_INT 0
21152: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21153: LD_INT 35
21155: PPUSH
21156: CALL_OW 67
// p := p + 1 ;
21160: LD_ADDR_VAR 0 3
21164: PUSH
21165: LD_VAR 0 3
21169: PUSH
21170: LD_INT 1
21172: PLUS
21173: ST_TO_ADDR
// for i in tmp do
21174: LD_ADDR_VAR 0 1
21178: PUSH
21179: LD_VAR 0 2
21183: PUSH
21184: FOR_IN
21185: IFFALSE 21216
// if GetLives ( i ) < 1000 then
21187: LD_VAR 0 1
21191: PPUSH
21192: CALL_OW 256
21196: PUSH
21197: LD_INT 1000
21199: LESS
21200: IFFALSE 21214
// SetLives ( i , 1000 ) ;
21202: LD_VAR 0 1
21206: PPUSH
21207: LD_INT 1000
21209: PPUSH
21210: CALL_OW 234
21214: GO 21184
21216: POP
21217: POP
// until p > 20 ;
21218: LD_VAR 0 3
21222: PUSH
21223: LD_INT 20
21225: GREATER
21226: IFFALSE 21153
// end ;
21228: PPOPN 3
21230: END
// every 0 0$1 trigger StreamModeActive and sTime do
21231: LD_EXP 43
21235: PUSH
21236: LD_EXP 94
21240: AND
21241: IFFALSE 21276
21243: GO 21245
21245: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21246: LD_INT 28
21248: PPUSH
21249: LD_OWVAR 2
21253: PPUSH
21254: LD_INT 2
21256: PPUSH
21257: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21261: LD_INT 30
21263: PPUSH
21264: LD_OWVAR 2
21268: PPUSH
21269: LD_INT 2
21271: PPUSH
21272: CALL_OW 322
// end ;
21276: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21277: LD_EXP 43
21281: PUSH
21282: LD_EXP 95
21286: AND
21287: IFFALSE 21408
21289: GO 21291
21291: DISABLE
21292: LD_INT 0
21294: PPUSH
21295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21296: LD_ADDR_VAR 0 2
21300: PUSH
21301: LD_INT 22
21303: PUSH
21304: LD_OWVAR 2
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 21
21315: PUSH
21316: LD_INT 1
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 3
21325: PUSH
21326: LD_INT 23
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: LIST
21344: PPUSH
21345: CALL_OW 69
21349: ST_TO_ADDR
// if not tmp then
21350: LD_VAR 0 2
21354: NOT
21355: IFFALSE 21359
// exit ;
21357: GO 21408
// for i in tmp do
21359: LD_ADDR_VAR 0 1
21363: PUSH
21364: LD_VAR 0 2
21368: PUSH
21369: FOR_IN
21370: IFFALSE 21406
// begin if Crawls ( i ) then
21372: LD_VAR 0 1
21376: PPUSH
21377: CALL_OW 318
21381: IFFALSE 21392
// ComWalk ( i ) ;
21383: LD_VAR 0 1
21387: PPUSH
21388: CALL_OW 138
// SetClass ( i , 2 ) ;
21392: LD_VAR 0 1
21396: PPUSH
21397: LD_INT 2
21399: PPUSH
21400: CALL_OW 336
// end ;
21404: GO 21369
21406: POP
21407: POP
// end ;
21408: PPOPN 2
21410: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21411: LD_EXP 43
21415: PUSH
21416: LD_EXP 96
21420: AND
21421: IFFALSE 21709
21423: GO 21425
21425: DISABLE
21426: LD_INT 0
21428: PPUSH
21429: PPUSH
21430: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21431: LD_OWVAR 2
21435: PPUSH
21436: LD_INT 9
21438: PPUSH
21439: LD_INT 1
21441: PPUSH
21442: LD_INT 1
21444: PPUSH
21445: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21449: LD_INT 9
21451: PPUSH
21452: LD_OWVAR 2
21456: PPUSH
21457: CALL_OW 343
// uc_side := 9 ;
21461: LD_ADDR_OWVAR 20
21465: PUSH
21466: LD_INT 9
21468: ST_TO_ADDR
// uc_nation := 2 ;
21469: LD_ADDR_OWVAR 21
21473: PUSH
21474: LD_INT 2
21476: ST_TO_ADDR
// hc_name := Dark Warrior ;
21477: LD_ADDR_OWVAR 26
21481: PUSH
21482: LD_STRING Dark Warrior
21484: ST_TO_ADDR
// hc_gallery :=  ;
21485: LD_ADDR_OWVAR 33
21489: PUSH
21490: LD_STRING 
21492: ST_TO_ADDR
// hc_noskilllimit := true ;
21493: LD_ADDR_OWVAR 76
21497: PUSH
21498: LD_INT 1
21500: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21501: LD_ADDR_OWVAR 31
21505: PUSH
21506: LD_INT 30
21508: PUSH
21509: LD_INT 30
21511: PUSH
21512: LD_INT 30
21514: PUSH
21515: LD_INT 30
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: ST_TO_ADDR
// un := CreateHuman ;
21524: LD_ADDR_VAR 0 3
21528: PUSH
21529: CALL_OW 44
21533: ST_TO_ADDR
// hc_noskilllimit := false ;
21534: LD_ADDR_OWVAR 76
21538: PUSH
21539: LD_INT 0
21541: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21542: LD_VAR 0 3
21546: PPUSH
21547: LD_INT 1
21549: PPUSH
21550: CALL_OW 51
// ToLua ( playRanger() ) ;
21554: LD_STRING playRanger()
21556: PPUSH
21557: CALL_OW 559
// p := 0 ;
21561: LD_ADDR_VAR 0 2
21565: PUSH
21566: LD_INT 0
21568: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21569: LD_INT 35
21571: PPUSH
21572: CALL_OW 67
// p := p + 1 ;
21576: LD_ADDR_VAR 0 2
21580: PUSH
21581: LD_VAR 0 2
21585: PUSH
21586: LD_INT 1
21588: PLUS
21589: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21590: LD_VAR 0 3
21594: PPUSH
21595: CALL_OW 256
21599: PUSH
21600: LD_INT 1000
21602: LESS
21603: IFFALSE 21617
// SetLives ( un , 1000 ) ;
21605: LD_VAR 0 3
21609: PPUSH
21610: LD_INT 1000
21612: PPUSH
21613: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21617: LD_VAR 0 3
21621: PPUSH
21622: LD_INT 81
21624: PUSH
21625: LD_OWVAR 2
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 91
21636: PUSH
21637: LD_VAR 0 3
21641: PUSH
21642: LD_INT 30
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PPUSH
21654: CALL_OW 69
21658: PPUSH
21659: LD_VAR 0 3
21663: PPUSH
21664: CALL_OW 74
21668: PPUSH
21669: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21673: LD_VAR 0 2
21677: PUSH
21678: LD_INT 80
21680: GREATER
21681: PUSH
21682: LD_VAR 0 3
21686: PPUSH
21687: CALL_OW 301
21691: OR
21692: IFFALSE 21569
// if un then
21694: LD_VAR 0 3
21698: IFFALSE 21709
// RemoveUnit ( un ) ;
21700: LD_VAR 0 3
21704: PPUSH
21705: CALL_OW 64
// end ;
21709: PPOPN 3
21711: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21712: LD_EXP 97
21716: IFFALSE 21832
21718: GO 21720
21720: DISABLE
21721: LD_INT 0
21723: PPUSH
21724: PPUSH
21725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21726: LD_ADDR_VAR 0 2
21730: PUSH
21731: LD_INT 81
21733: PUSH
21734: LD_OWVAR 2
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 21
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PPUSH
21757: CALL_OW 69
21761: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21762: LD_STRING playComputer()
21764: PPUSH
21765: CALL_OW 559
// if not tmp then
21769: LD_VAR 0 2
21773: NOT
21774: IFFALSE 21778
// exit ;
21776: GO 21832
// for i in tmp do
21778: LD_ADDR_VAR 0 1
21782: PUSH
21783: LD_VAR 0 2
21787: PUSH
21788: FOR_IN
21789: IFFALSE 21830
// for j := 1 to 4 do
21791: LD_ADDR_VAR 0 3
21795: PUSH
21796: DOUBLE
21797: LD_INT 1
21799: DEC
21800: ST_TO_ADDR
21801: LD_INT 4
21803: PUSH
21804: FOR_TO
21805: IFFALSE 21826
// SetSkill ( i , j , 10 ) ;
21807: LD_VAR 0 1
21811: PPUSH
21812: LD_VAR 0 3
21816: PPUSH
21817: LD_INT 10
21819: PPUSH
21820: CALL_OW 237
21824: GO 21804
21826: POP
21827: POP
21828: GO 21788
21830: POP
21831: POP
// end ;
21832: PPOPN 3
21834: END
// every 0 0$1 trigger s30 do var i , tmp ;
21835: LD_EXP 98
21839: IFFALSE 21908
21841: GO 21843
21843: DISABLE
21844: LD_INT 0
21846: PPUSH
21847: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21848: LD_ADDR_VAR 0 2
21852: PUSH
21853: LD_INT 22
21855: PUSH
21856: LD_OWVAR 2
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PPUSH
21865: CALL_OW 69
21869: ST_TO_ADDR
// if not tmp then
21870: LD_VAR 0 2
21874: NOT
21875: IFFALSE 21879
// exit ;
21877: GO 21908
// for i in tmp do
21879: LD_ADDR_VAR 0 1
21883: PUSH
21884: LD_VAR 0 2
21888: PUSH
21889: FOR_IN
21890: IFFALSE 21906
// SetLives ( i , 300 ) ;
21892: LD_VAR 0 1
21896: PPUSH
21897: LD_INT 300
21899: PPUSH
21900: CALL_OW 234
21904: GO 21889
21906: POP
21907: POP
// end ;
21908: PPOPN 2
21910: END
// every 0 0$1 trigger s60 do var i , tmp ;
21911: LD_EXP 99
21915: IFFALSE 21984
21917: GO 21919
21919: DISABLE
21920: LD_INT 0
21922: PPUSH
21923: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21924: LD_ADDR_VAR 0 2
21928: PUSH
21929: LD_INT 22
21931: PUSH
21932: LD_OWVAR 2
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PPUSH
21941: CALL_OW 69
21945: ST_TO_ADDR
// if not tmp then
21946: LD_VAR 0 2
21950: NOT
21951: IFFALSE 21955
// exit ;
21953: GO 21984
// for i in tmp do
21955: LD_ADDR_VAR 0 1
21959: PUSH
21960: LD_VAR 0 2
21964: PUSH
21965: FOR_IN
21966: IFFALSE 21982
// SetLives ( i , 600 ) ;
21968: LD_VAR 0 1
21972: PPUSH
21973: LD_INT 600
21975: PPUSH
21976: CALL_OW 234
21980: GO 21965
21982: POP
21983: POP
// end ;
21984: PPOPN 2
21986: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21987: LD_INT 0
21989: PPUSH
// case cmd of 301 :
21990: LD_VAR 0 1
21994: PUSH
21995: LD_INT 301
21997: DOUBLE
21998: EQUAL
21999: IFTRUE 22003
22001: GO 22035
22003: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22004: LD_VAR 0 6
22008: PPUSH
22009: LD_VAR 0 7
22013: PPUSH
22014: LD_VAR 0 8
22018: PPUSH
22019: LD_VAR 0 4
22023: PPUSH
22024: LD_VAR 0 5
22028: PPUSH
22029: CALL 23236 0 5
22033: GO 22156
22035: LD_INT 302
22037: DOUBLE
22038: EQUAL
22039: IFTRUE 22043
22041: GO 22080
22043: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22044: LD_VAR 0 6
22048: PPUSH
22049: LD_VAR 0 7
22053: PPUSH
22054: LD_VAR 0 8
22058: PPUSH
22059: LD_VAR 0 9
22063: PPUSH
22064: LD_VAR 0 4
22068: PPUSH
22069: LD_VAR 0 5
22073: PPUSH
22074: CALL 23327 0 6
22078: GO 22156
22080: LD_INT 303
22082: DOUBLE
22083: EQUAL
22084: IFTRUE 22088
22086: GO 22125
22088: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22089: LD_VAR 0 6
22093: PPUSH
22094: LD_VAR 0 7
22098: PPUSH
22099: LD_VAR 0 8
22103: PPUSH
22104: LD_VAR 0 9
22108: PPUSH
22109: LD_VAR 0 4
22113: PPUSH
22114: LD_VAR 0 5
22118: PPUSH
22119: CALL 22161 0 6
22123: GO 22156
22125: LD_INT 304
22127: DOUBLE
22128: EQUAL
22129: IFTRUE 22133
22131: GO 22155
22133: POP
// hHackTeleport ( unit , x , y ) ; end ;
22134: LD_VAR 0 2
22138: PPUSH
22139: LD_VAR 0 4
22143: PPUSH
22144: LD_VAR 0 5
22148: PPUSH
22149: CALL 23920 0 3
22153: GO 22156
22155: POP
// end ;
22156: LD_VAR 0 12
22160: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22161: LD_INT 0
22163: PPUSH
22164: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22165: LD_VAR 0 1
22169: PUSH
22170: LD_INT 1
22172: LESS
22173: PUSH
22174: LD_VAR 0 1
22178: PUSH
22179: LD_INT 3
22181: GREATER
22182: OR
22183: PUSH
22184: LD_VAR 0 5
22188: PPUSH
22189: LD_VAR 0 6
22193: PPUSH
22194: CALL_OW 428
22198: OR
22199: IFFALSE 22203
// exit ;
22201: GO 22923
// uc_side := your_side ;
22203: LD_ADDR_OWVAR 20
22207: PUSH
22208: LD_OWVAR 2
22212: ST_TO_ADDR
// uc_nation := nation ;
22213: LD_ADDR_OWVAR 21
22217: PUSH
22218: LD_VAR 0 1
22222: ST_TO_ADDR
// bc_level = 1 ;
22223: LD_ADDR_OWVAR 43
22227: PUSH
22228: LD_INT 1
22230: ST_TO_ADDR
// case btype of 1 :
22231: LD_VAR 0 2
22235: PUSH
22236: LD_INT 1
22238: DOUBLE
22239: EQUAL
22240: IFTRUE 22244
22242: GO 22255
22244: POP
// bc_type := b_depot ; 2 :
22245: LD_ADDR_OWVAR 42
22249: PUSH
22250: LD_INT 0
22252: ST_TO_ADDR
22253: GO 22867
22255: LD_INT 2
22257: DOUBLE
22258: EQUAL
22259: IFTRUE 22263
22261: GO 22274
22263: POP
// bc_type := b_warehouse ; 3 :
22264: LD_ADDR_OWVAR 42
22268: PUSH
22269: LD_INT 1
22271: ST_TO_ADDR
22272: GO 22867
22274: LD_INT 3
22276: DOUBLE
22277: EQUAL
22278: IFTRUE 22282
22280: GO 22293
22282: POP
// bc_type := b_lab ; 4 .. 9 :
22283: LD_ADDR_OWVAR 42
22287: PUSH
22288: LD_INT 6
22290: ST_TO_ADDR
22291: GO 22867
22293: LD_INT 4
22295: DOUBLE
22296: GREATEREQUAL
22297: IFFALSE 22305
22299: LD_INT 9
22301: DOUBLE
22302: LESSEQUAL
22303: IFTRUE 22307
22305: GO 22359
22307: POP
// begin bc_type := b_lab_half ;
22308: LD_ADDR_OWVAR 42
22312: PUSH
22313: LD_INT 7
22315: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22316: LD_ADDR_OWVAR 44
22320: PUSH
22321: LD_INT 10
22323: PUSH
22324: LD_INT 11
22326: PUSH
22327: LD_INT 12
22329: PUSH
22330: LD_INT 15
22332: PUSH
22333: LD_INT 14
22335: PUSH
22336: LD_INT 13
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: PUSH
22347: LD_VAR 0 2
22351: PUSH
22352: LD_INT 3
22354: MINUS
22355: ARRAY
22356: ST_TO_ADDR
// end ; 10 .. 13 :
22357: GO 22867
22359: LD_INT 10
22361: DOUBLE
22362: GREATEREQUAL
22363: IFFALSE 22371
22365: LD_INT 13
22367: DOUBLE
22368: LESSEQUAL
22369: IFTRUE 22373
22371: GO 22450
22373: POP
// begin bc_type := b_lab_full ;
22374: LD_ADDR_OWVAR 42
22378: PUSH
22379: LD_INT 8
22381: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22382: LD_ADDR_OWVAR 44
22386: PUSH
22387: LD_INT 10
22389: PUSH
22390: LD_INT 12
22392: PUSH
22393: LD_INT 14
22395: PUSH
22396: LD_INT 13
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: PUSH
22405: LD_VAR 0 2
22409: PUSH
22410: LD_INT 9
22412: MINUS
22413: ARRAY
22414: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22415: LD_ADDR_OWVAR 45
22419: PUSH
22420: LD_INT 11
22422: PUSH
22423: LD_INT 15
22425: PUSH
22426: LD_INT 12
22428: PUSH
22429: LD_INT 15
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: PUSH
22438: LD_VAR 0 2
22442: PUSH
22443: LD_INT 9
22445: MINUS
22446: ARRAY
22447: ST_TO_ADDR
// end ; 14 :
22448: GO 22867
22450: LD_INT 14
22452: DOUBLE
22453: EQUAL
22454: IFTRUE 22458
22456: GO 22469
22458: POP
// bc_type := b_workshop ; 15 :
22459: LD_ADDR_OWVAR 42
22463: PUSH
22464: LD_INT 2
22466: ST_TO_ADDR
22467: GO 22867
22469: LD_INT 15
22471: DOUBLE
22472: EQUAL
22473: IFTRUE 22477
22475: GO 22488
22477: POP
// bc_type := b_factory ; 16 :
22478: LD_ADDR_OWVAR 42
22482: PUSH
22483: LD_INT 3
22485: ST_TO_ADDR
22486: GO 22867
22488: LD_INT 16
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 22507
22496: POP
// bc_type := b_ext_gun ; 17 :
22497: LD_ADDR_OWVAR 42
22501: PUSH
22502: LD_INT 17
22504: ST_TO_ADDR
22505: GO 22867
22507: LD_INT 17
22509: DOUBLE
22510: EQUAL
22511: IFTRUE 22515
22513: GO 22543
22515: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22516: LD_ADDR_OWVAR 42
22520: PUSH
22521: LD_INT 19
22523: PUSH
22524: LD_INT 23
22526: PUSH
22527: LD_INT 19
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: LIST
22534: PUSH
22535: LD_VAR 0 1
22539: ARRAY
22540: ST_TO_ADDR
22541: GO 22867
22543: LD_INT 18
22545: DOUBLE
22546: EQUAL
22547: IFTRUE 22551
22549: GO 22562
22551: POP
// bc_type := b_ext_radar ; 19 :
22552: LD_ADDR_OWVAR 42
22556: PUSH
22557: LD_INT 20
22559: ST_TO_ADDR
22560: GO 22867
22562: LD_INT 19
22564: DOUBLE
22565: EQUAL
22566: IFTRUE 22570
22568: GO 22581
22570: POP
// bc_type := b_ext_radio ; 20 :
22571: LD_ADDR_OWVAR 42
22575: PUSH
22576: LD_INT 22
22578: ST_TO_ADDR
22579: GO 22867
22581: LD_INT 20
22583: DOUBLE
22584: EQUAL
22585: IFTRUE 22589
22587: GO 22600
22589: POP
// bc_type := b_ext_siberium ; 21 :
22590: LD_ADDR_OWVAR 42
22594: PUSH
22595: LD_INT 21
22597: ST_TO_ADDR
22598: GO 22867
22600: LD_INT 21
22602: DOUBLE
22603: EQUAL
22604: IFTRUE 22608
22606: GO 22619
22608: POP
// bc_type := b_ext_computer ; 22 :
22609: LD_ADDR_OWVAR 42
22613: PUSH
22614: LD_INT 24
22616: ST_TO_ADDR
22617: GO 22867
22619: LD_INT 22
22621: DOUBLE
22622: EQUAL
22623: IFTRUE 22627
22625: GO 22638
22627: POP
// bc_type := b_ext_track ; 23 :
22628: LD_ADDR_OWVAR 42
22632: PUSH
22633: LD_INT 16
22635: ST_TO_ADDR
22636: GO 22867
22638: LD_INT 23
22640: DOUBLE
22641: EQUAL
22642: IFTRUE 22646
22644: GO 22657
22646: POP
// bc_type := b_ext_laser ; 24 :
22647: LD_ADDR_OWVAR 42
22651: PUSH
22652: LD_INT 25
22654: ST_TO_ADDR
22655: GO 22867
22657: LD_INT 24
22659: DOUBLE
22660: EQUAL
22661: IFTRUE 22665
22663: GO 22676
22665: POP
// bc_type := b_control_tower ; 25 :
22666: LD_ADDR_OWVAR 42
22670: PUSH
22671: LD_INT 36
22673: ST_TO_ADDR
22674: GO 22867
22676: LD_INT 25
22678: DOUBLE
22679: EQUAL
22680: IFTRUE 22684
22682: GO 22695
22684: POP
// bc_type := b_breastwork ; 26 :
22685: LD_ADDR_OWVAR 42
22689: PUSH
22690: LD_INT 31
22692: ST_TO_ADDR
22693: GO 22867
22695: LD_INT 26
22697: DOUBLE
22698: EQUAL
22699: IFTRUE 22703
22701: GO 22714
22703: POP
// bc_type := b_bunker ; 27 :
22704: LD_ADDR_OWVAR 42
22708: PUSH
22709: LD_INT 32
22711: ST_TO_ADDR
22712: GO 22867
22714: LD_INT 27
22716: DOUBLE
22717: EQUAL
22718: IFTRUE 22722
22720: GO 22733
22722: POP
// bc_type := b_turret ; 28 :
22723: LD_ADDR_OWVAR 42
22727: PUSH
22728: LD_INT 33
22730: ST_TO_ADDR
22731: GO 22867
22733: LD_INT 28
22735: DOUBLE
22736: EQUAL
22737: IFTRUE 22741
22739: GO 22752
22741: POP
// bc_type := b_armoury ; 29 :
22742: LD_ADDR_OWVAR 42
22746: PUSH
22747: LD_INT 4
22749: ST_TO_ADDR
22750: GO 22867
22752: LD_INT 29
22754: DOUBLE
22755: EQUAL
22756: IFTRUE 22760
22758: GO 22771
22760: POP
// bc_type := b_barracks ; 30 :
22761: LD_ADDR_OWVAR 42
22765: PUSH
22766: LD_INT 5
22768: ST_TO_ADDR
22769: GO 22867
22771: LD_INT 30
22773: DOUBLE
22774: EQUAL
22775: IFTRUE 22779
22777: GO 22790
22779: POP
// bc_type := b_solar_power ; 31 :
22780: LD_ADDR_OWVAR 42
22784: PUSH
22785: LD_INT 27
22787: ST_TO_ADDR
22788: GO 22867
22790: LD_INT 31
22792: DOUBLE
22793: EQUAL
22794: IFTRUE 22798
22796: GO 22809
22798: POP
// bc_type := b_oil_power ; 32 :
22799: LD_ADDR_OWVAR 42
22803: PUSH
22804: LD_INT 26
22806: ST_TO_ADDR
22807: GO 22867
22809: LD_INT 32
22811: DOUBLE
22812: EQUAL
22813: IFTRUE 22817
22815: GO 22828
22817: POP
// bc_type := b_siberite_power ; 33 :
22818: LD_ADDR_OWVAR 42
22822: PUSH
22823: LD_INT 28
22825: ST_TO_ADDR
22826: GO 22867
22828: LD_INT 33
22830: DOUBLE
22831: EQUAL
22832: IFTRUE 22836
22834: GO 22847
22836: POP
// bc_type := b_oil_mine ; 34 :
22837: LD_ADDR_OWVAR 42
22841: PUSH
22842: LD_INT 29
22844: ST_TO_ADDR
22845: GO 22867
22847: LD_INT 34
22849: DOUBLE
22850: EQUAL
22851: IFTRUE 22855
22853: GO 22866
22855: POP
// bc_type := b_siberite_mine ; end ;
22856: LD_ADDR_OWVAR 42
22860: PUSH
22861: LD_INT 30
22863: ST_TO_ADDR
22864: GO 22867
22866: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22867: LD_ADDR_VAR 0 8
22871: PUSH
22872: LD_VAR 0 5
22876: PPUSH
22877: LD_VAR 0 6
22881: PPUSH
22882: LD_VAR 0 3
22886: PPUSH
22887: CALL_OW 47
22891: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22892: LD_OWVAR 42
22896: PUSH
22897: LD_INT 32
22899: PUSH
22900: LD_INT 33
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: IN
22907: IFFALSE 22923
// PlaceWeaponTurret ( b , weapon ) ;
22909: LD_VAR 0 8
22913: PPUSH
22914: LD_VAR 0 4
22918: PPUSH
22919: CALL_OW 431
// end ;
22923: LD_VAR 0 7
22927: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22928: LD_INT 0
22930: PPUSH
22931: PPUSH
22932: PPUSH
22933: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22934: LD_ADDR_VAR 0 4
22938: PUSH
22939: LD_INT 22
22941: PUSH
22942: LD_OWVAR 2
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: LD_INT 30
22956: PUSH
22957: LD_INT 0
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 30
22966: PUSH
22967: LD_INT 1
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PPUSH
22983: CALL_OW 69
22987: ST_TO_ADDR
// if not tmp then
22988: LD_VAR 0 4
22992: NOT
22993: IFFALSE 22997
// exit ;
22995: GO 23056
// for i in tmp do
22997: LD_ADDR_VAR 0 2
23001: PUSH
23002: LD_VAR 0 4
23006: PUSH
23007: FOR_IN
23008: IFFALSE 23054
// for j = 1 to 3 do
23010: LD_ADDR_VAR 0 3
23014: PUSH
23015: DOUBLE
23016: LD_INT 1
23018: DEC
23019: ST_TO_ADDR
23020: LD_INT 3
23022: PUSH
23023: FOR_TO
23024: IFFALSE 23050
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23026: LD_VAR 0 2
23030: PPUSH
23031: CALL_OW 274
23035: PPUSH
23036: LD_VAR 0 3
23040: PPUSH
23041: LD_INT 99999
23043: PPUSH
23044: CALL_OW 277
23048: GO 23023
23050: POP
23051: POP
23052: GO 23007
23054: POP
23055: POP
// end ;
23056: LD_VAR 0 1
23060: RET
// export function hHackSetLevel10 ; var i , j ; begin
23061: LD_INT 0
23063: PPUSH
23064: PPUSH
23065: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23066: LD_ADDR_VAR 0 2
23070: PUSH
23071: LD_INT 21
23073: PUSH
23074: LD_INT 1
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PPUSH
23081: CALL_OW 69
23085: PUSH
23086: FOR_IN
23087: IFFALSE 23139
// if IsSelected ( i ) then
23089: LD_VAR 0 2
23093: PPUSH
23094: CALL_OW 306
23098: IFFALSE 23137
// begin for j := 1 to 4 do
23100: LD_ADDR_VAR 0 3
23104: PUSH
23105: DOUBLE
23106: LD_INT 1
23108: DEC
23109: ST_TO_ADDR
23110: LD_INT 4
23112: PUSH
23113: FOR_TO
23114: IFFALSE 23135
// SetSkill ( i , j , 10 ) ;
23116: LD_VAR 0 2
23120: PPUSH
23121: LD_VAR 0 3
23125: PPUSH
23126: LD_INT 10
23128: PPUSH
23129: CALL_OW 237
23133: GO 23113
23135: POP
23136: POP
// end ;
23137: GO 23086
23139: POP
23140: POP
// end ;
23141: LD_VAR 0 1
23145: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23146: LD_INT 0
23148: PPUSH
23149: PPUSH
23150: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23151: LD_ADDR_VAR 0 2
23155: PUSH
23156: LD_INT 22
23158: PUSH
23159: LD_OWVAR 2
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 21
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PPUSH
23182: CALL_OW 69
23186: PUSH
23187: FOR_IN
23188: IFFALSE 23229
// begin for j := 1 to 4 do
23190: LD_ADDR_VAR 0 3
23194: PUSH
23195: DOUBLE
23196: LD_INT 1
23198: DEC
23199: ST_TO_ADDR
23200: LD_INT 4
23202: PUSH
23203: FOR_TO
23204: IFFALSE 23225
// SetSkill ( i , j , 10 ) ;
23206: LD_VAR 0 2
23210: PPUSH
23211: LD_VAR 0 3
23215: PPUSH
23216: LD_INT 10
23218: PPUSH
23219: CALL_OW 237
23223: GO 23203
23225: POP
23226: POP
// end ;
23227: GO 23187
23229: POP
23230: POP
// end ;
23231: LD_VAR 0 1
23235: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23236: LD_INT 0
23238: PPUSH
// uc_side := your_side ;
23239: LD_ADDR_OWVAR 20
23243: PUSH
23244: LD_OWVAR 2
23248: ST_TO_ADDR
// uc_nation := nation ;
23249: LD_ADDR_OWVAR 21
23253: PUSH
23254: LD_VAR 0 1
23258: ST_TO_ADDR
// InitHc ;
23259: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23263: LD_INT 0
23265: PPUSH
23266: LD_VAR 0 2
23270: PPUSH
23271: LD_VAR 0 3
23275: PPUSH
23276: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23280: LD_VAR 0 4
23284: PPUSH
23285: LD_VAR 0 5
23289: PPUSH
23290: CALL_OW 428
23294: PUSH
23295: LD_INT 0
23297: EQUAL
23298: IFFALSE 23322
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23300: CALL_OW 44
23304: PPUSH
23305: LD_VAR 0 4
23309: PPUSH
23310: LD_VAR 0 5
23314: PPUSH
23315: LD_INT 1
23317: PPUSH
23318: CALL_OW 48
// end ;
23322: LD_VAR 0 6
23326: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23327: LD_INT 0
23329: PPUSH
23330: PPUSH
// uc_side := your_side ;
23331: LD_ADDR_OWVAR 20
23335: PUSH
23336: LD_OWVAR 2
23340: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23341: LD_VAR 0 1
23345: PUSH
23346: LD_INT 1
23348: PUSH
23349: LD_INT 2
23351: PUSH
23352: LD_INT 3
23354: PUSH
23355: LD_INT 4
23357: PUSH
23358: LD_INT 5
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: IN
23368: IFFALSE 23380
// uc_nation := nation_american else
23370: LD_ADDR_OWVAR 21
23374: PUSH
23375: LD_INT 1
23377: ST_TO_ADDR
23378: GO 23423
// if chassis in [ 11 , 12 , 13 , 14 ] then
23380: LD_VAR 0 1
23384: PUSH
23385: LD_INT 11
23387: PUSH
23388: LD_INT 12
23390: PUSH
23391: LD_INT 13
23393: PUSH
23394: LD_INT 14
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: IN
23403: IFFALSE 23415
// uc_nation := nation_arabian else
23405: LD_ADDR_OWVAR 21
23409: PUSH
23410: LD_INT 2
23412: ST_TO_ADDR
23413: GO 23423
// uc_nation := nation_russian ;
23415: LD_ADDR_OWVAR 21
23419: PUSH
23420: LD_INT 3
23422: ST_TO_ADDR
// vc_chassis := chassis ;
23423: LD_ADDR_OWVAR 37
23427: PUSH
23428: LD_VAR 0 1
23432: ST_TO_ADDR
// vc_engine := engine ;
23433: LD_ADDR_OWVAR 39
23437: PUSH
23438: LD_VAR 0 2
23442: ST_TO_ADDR
// vc_control := control ;
23443: LD_ADDR_OWVAR 38
23447: PUSH
23448: LD_VAR 0 3
23452: ST_TO_ADDR
// vc_weapon := weapon ;
23453: LD_ADDR_OWVAR 40
23457: PUSH
23458: LD_VAR 0 4
23462: ST_TO_ADDR
// un := CreateVehicle ;
23463: LD_ADDR_VAR 0 8
23467: PUSH
23468: CALL_OW 45
23472: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23473: LD_VAR 0 8
23477: PPUSH
23478: LD_INT 0
23480: PPUSH
23481: LD_INT 5
23483: PPUSH
23484: CALL_OW 12
23488: PPUSH
23489: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23493: LD_VAR 0 8
23497: PPUSH
23498: LD_VAR 0 5
23502: PPUSH
23503: LD_VAR 0 6
23507: PPUSH
23508: LD_INT 1
23510: PPUSH
23511: CALL_OW 48
// end ;
23515: LD_VAR 0 7
23519: RET
// export hInvincible ; every 1 do
23520: GO 23522
23522: DISABLE
// hInvincible := [ ] ;
23523: LD_ADDR_EXP 100
23527: PUSH
23528: EMPTY
23529: ST_TO_ADDR
23530: END
// every 10 do var i ;
23531: GO 23533
23533: DISABLE
23534: LD_INT 0
23536: PPUSH
// begin enable ;
23537: ENABLE
// if not hInvincible then
23538: LD_EXP 100
23542: NOT
23543: IFFALSE 23547
// exit ;
23545: GO 23591
// for i in hInvincible do
23547: LD_ADDR_VAR 0 1
23551: PUSH
23552: LD_EXP 100
23556: PUSH
23557: FOR_IN
23558: IFFALSE 23589
// if GetLives ( i ) < 1000 then
23560: LD_VAR 0 1
23564: PPUSH
23565: CALL_OW 256
23569: PUSH
23570: LD_INT 1000
23572: LESS
23573: IFFALSE 23587
// SetLives ( i , 1000 ) ;
23575: LD_VAR 0 1
23579: PPUSH
23580: LD_INT 1000
23582: PPUSH
23583: CALL_OW 234
23587: GO 23557
23589: POP
23590: POP
// end ;
23591: PPOPN 1
23593: END
// export function hHackInvincible ; var i ; begin
23594: LD_INT 0
23596: PPUSH
23597: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23598: LD_ADDR_VAR 0 2
23602: PUSH
23603: LD_INT 2
23605: PUSH
23606: LD_INT 21
23608: PUSH
23609: LD_INT 1
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 21
23618: PUSH
23619: LD_INT 2
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: LIST
23630: PPUSH
23631: CALL_OW 69
23635: PUSH
23636: FOR_IN
23637: IFFALSE 23698
// if IsSelected ( i ) then
23639: LD_VAR 0 2
23643: PPUSH
23644: CALL_OW 306
23648: IFFALSE 23696
// begin if i in hInvincible then
23650: LD_VAR 0 2
23654: PUSH
23655: LD_EXP 100
23659: IN
23660: IFFALSE 23680
// hInvincible := hInvincible diff i else
23662: LD_ADDR_EXP 100
23666: PUSH
23667: LD_EXP 100
23671: PUSH
23672: LD_VAR 0 2
23676: DIFF
23677: ST_TO_ADDR
23678: GO 23696
// hInvincible := hInvincible union i ;
23680: LD_ADDR_EXP 100
23684: PUSH
23685: LD_EXP 100
23689: PUSH
23690: LD_VAR 0 2
23694: UNION
23695: ST_TO_ADDR
// end ;
23696: GO 23636
23698: POP
23699: POP
// end ;
23700: LD_VAR 0 1
23704: RET
// export function hHackInvisible ; var i , j ; begin
23705: LD_INT 0
23707: PPUSH
23708: PPUSH
23709: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23710: LD_ADDR_VAR 0 2
23714: PUSH
23715: LD_INT 21
23717: PUSH
23718: LD_INT 1
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PPUSH
23725: CALL_OW 69
23729: PUSH
23730: FOR_IN
23731: IFFALSE 23755
// if IsSelected ( i ) then
23733: LD_VAR 0 2
23737: PPUSH
23738: CALL_OW 306
23742: IFFALSE 23753
// ComForceInvisible ( i ) ;
23744: LD_VAR 0 2
23748: PPUSH
23749: CALL_OW 496
23753: GO 23730
23755: POP
23756: POP
// end ;
23757: LD_VAR 0 1
23761: RET
// export function hHackChangeYourSide ; begin
23762: LD_INT 0
23764: PPUSH
// if your_side = 8 then
23765: LD_OWVAR 2
23769: PUSH
23770: LD_INT 8
23772: EQUAL
23773: IFFALSE 23785
// your_side := 0 else
23775: LD_ADDR_OWVAR 2
23779: PUSH
23780: LD_INT 0
23782: ST_TO_ADDR
23783: GO 23799
// your_side := your_side + 1 ;
23785: LD_ADDR_OWVAR 2
23789: PUSH
23790: LD_OWVAR 2
23794: PUSH
23795: LD_INT 1
23797: PLUS
23798: ST_TO_ADDR
// end ;
23799: LD_VAR 0 1
23803: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23804: LD_INT 0
23806: PPUSH
23807: PPUSH
23808: PPUSH
// for i in all_units do
23809: LD_ADDR_VAR 0 2
23813: PUSH
23814: LD_OWVAR 3
23818: PUSH
23819: FOR_IN
23820: IFFALSE 23898
// if IsSelected ( i ) then
23822: LD_VAR 0 2
23826: PPUSH
23827: CALL_OW 306
23831: IFFALSE 23896
// begin j := GetSide ( i ) ;
23833: LD_ADDR_VAR 0 3
23837: PUSH
23838: LD_VAR 0 2
23842: PPUSH
23843: CALL_OW 255
23847: ST_TO_ADDR
// if j = 8 then
23848: LD_VAR 0 3
23852: PUSH
23853: LD_INT 8
23855: EQUAL
23856: IFFALSE 23868
// j := 0 else
23858: LD_ADDR_VAR 0 3
23862: PUSH
23863: LD_INT 0
23865: ST_TO_ADDR
23866: GO 23882
// j := j + 1 ;
23868: LD_ADDR_VAR 0 3
23872: PUSH
23873: LD_VAR 0 3
23877: PUSH
23878: LD_INT 1
23880: PLUS
23881: ST_TO_ADDR
// SetSide ( i , j ) ;
23882: LD_VAR 0 2
23886: PPUSH
23887: LD_VAR 0 3
23891: PPUSH
23892: CALL_OW 235
// end ;
23896: GO 23819
23898: POP
23899: POP
// end ;
23900: LD_VAR 0 1
23904: RET
// export function hHackFog ; begin
23905: LD_INT 0
23907: PPUSH
// FogOff ( true ) ;
23908: LD_INT 1
23910: PPUSH
23911: CALL_OW 344
// end ;
23915: LD_VAR 0 1
23919: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23920: LD_INT 0
23922: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23923: LD_VAR 0 1
23927: PPUSH
23928: LD_VAR 0 2
23932: PPUSH
23933: LD_VAR 0 3
23937: PPUSH
23938: LD_INT 1
23940: PPUSH
23941: LD_INT 1
23943: PPUSH
23944: CALL_OW 483
// CenterOnXY ( x , y ) ;
23948: LD_VAR 0 2
23952: PPUSH
23953: LD_VAR 0 3
23957: PPUSH
23958: CALL_OW 84
// end ;
23962: LD_VAR 0 4
23966: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23967: LD_INT 0
23969: PPUSH
23970: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23971: LD_VAR 0 1
23975: NOT
23976: PUSH
23977: LD_VAR 0 2
23981: PPUSH
23982: LD_VAR 0 3
23986: PPUSH
23987: CALL_OW 488
23991: NOT
23992: OR
23993: PUSH
23994: LD_VAR 0 1
23998: PPUSH
23999: CALL_OW 266
24003: PUSH
24004: LD_INT 3
24006: NONEQUAL
24007: PUSH
24008: LD_VAR 0 1
24012: PPUSH
24013: CALL_OW 247
24017: PUSH
24018: LD_INT 1
24020: EQUAL
24021: NOT
24022: AND
24023: OR
24024: IFFALSE 24028
// exit ;
24026: GO 24177
// if GetType ( factory ) = unit_human then
24028: LD_VAR 0 1
24032: PPUSH
24033: CALL_OW 247
24037: PUSH
24038: LD_INT 1
24040: EQUAL
24041: IFFALSE 24058
// factory := IsInUnit ( factory ) ;
24043: LD_ADDR_VAR 0 1
24047: PUSH
24048: LD_VAR 0 1
24052: PPUSH
24053: CALL_OW 310
24057: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24058: LD_VAR 0 1
24062: PPUSH
24063: CALL_OW 266
24067: PUSH
24068: LD_INT 3
24070: NONEQUAL
24071: IFFALSE 24075
// exit ;
24073: GO 24177
// if HexInfo ( x , y ) = factory then
24075: LD_VAR 0 2
24079: PPUSH
24080: LD_VAR 0 3
24084: PPUSH
24085: CALL_OW 428
24089: PUSH
24090: LD_VAR 0 1
24094: EQUAL
24095: IFFALSE 24122
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24097: LD_ADDR_EXP 101
24101: PUSH
24102: LD_EXP 101
24106: PPUSH
24107: LD_VAR 0 1
24111: PPUSH
24112: LD_INT 0
24114: PPUSH
24115: CALL_OW 1
24119: ST_TO_ADDR
24120: GO 24173
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24122: LD_ADDR_EXP 101
24126: PUSH
24127: LD_EXP 101
24131: PPUSH
24132: LD_VAR 0 1
24136: PPUSH
24137: LD_VAR 0 1
24141: PPUSH
24142: CALL_OW 255
24146: PUSH
24147: LD_VAR 0 1
24151: PUSH
24152: LD_VAR 0 2
24156: PUSH
24157: LD_VAR 0 3
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: PPUSH
24168: CALL_OW 1
24172: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24173: CALL 24182 0 0
// end ;
24177: LD_VAR 0 4
24181: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24182: LD_INT 0
24184: PPUSH
24185: PPUSH
24186: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24187: LD_STRING resetFactoryWaypoint();
24189: PPUSH
24190: CALL_OW 559
// if factoryWaypoints then
24194: LD_EXP 101
24198: IFFALSE 24324
// begin list := PrepareArray ( factoryWaypoints ) ;
24200: LD_ADDR_VAR 0 3
24204: PUSH
24205: LD_EXP 101
24209: PPUSH
24210: CALL 70756 0 1
24214: ST_TO_ADDR
// for i := 1 to list do
24215: LD_ADDR_VAR 0 2
24219: PUSH
24220: DOUBLE
24221: LD_INT 1
24223: DEC
24224: ST_TO_ADDR
24225: LD_VAR 0 3
24229: PUSH
24230: FOR_TO
24231: IFFALSE 24322
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24233: LD_STRING setFactoryWaypointXY(
24235: PUSH
24236: LD_VAR 0 3
24240: PUSH
24241: LD_VAR 0 2
24245: ARRAY
24246: PUSH
24247: LD_INT 1
24249: ARRAY
24250: STR
24251: PUSH
24252: LD_STRING ,
24254: STR
24255: PUSH
24256: LD_VAR 0 3
24260: PUSH
24261: LD_VAR 0 2
24265: ARRAY
24266: PUSH
24267: LD_INT 2
24269: ARRAY
24270: STR
24271: PUSH
24272: LD_STRING ,
24274: STR
24275: PUSH
24276: LD_VAR 0 3
24280: PUSH
24281: LD_VAR 0 2
24285: ARRAY
24286: PUSH
24287: LD_INT 3
24289: ARRAY
24290: STR
24291: PUSH
24292: LD_STRING ,
24294: STR
24295: PUSH
24296: LD_VAR 0 3
24300: PUSH
24301: LD_VAR 0 2
24305: ARRAY
24306: PUSH
24307: LD_INT 4
24309: ARRAY
24310: STR
24311: PUSH
24312: LD_STRING )
24314: STR
24315: PPUSH
24316: CALL_OW 559
24320: GO 24230
24322: POP
24323: POP
// end ; end ;
24324: LD_VAR 0 1
24328: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24329: LD_INT 0
24331: PPUSH
// if HexInfo ( x , y ) = warehouse then
24332: LD_VAR 0 2
24336: PPUSH
24337: LD_VAR 0 3
24341: PPUSH
24342: CALL_OW 428
24346: PUSH
24347: LD_VAR 0 1
24351: EQUAL
24352: IFFALSE 24379
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24354: LD_ADDR_EXP 102
24358: PUSH
24359: LD_EXP 102
24363: PPUSH
24364: LD_VAR 0 1
24368: PPUSH
24369: LD_INT 0
24371: PPUSH
24372: CALL_OW 1
24376: ST_TO_ADDR
24377: GO 24430
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24379: LD_ADDR_EXP 102
24383: PUSH
24384: LD_EXP 102
24388: PPUSH
24389: LD_VAR 0 1
24393: PPUSH
24394: LD_VAR 0 1
24398: PPUSH
24399: CALL_OW 255
24403: PUSH
24404: LD_VAR 0 1
24408: PUSH
24409: LD_VAR 0 2
24413: PUSH
24414: LD_VAR 0 3
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: PPUSH
24425: CALL_OW 1
24429: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24430: CALL 24439 0 0
// end ;
24434: LD_VAR 0 4
24438: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24439: LD_INT 0
24441: PPUSH
24442: PPUSH
24443: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24444: LD_STRING resetWarehouseGatheringPoints();
24446: PPUSH
24447: CALL_OW 559
// if warehouseGatheringPoints then
24451: LD_EXP 102
24455: IFFALSE 24581
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24457: LD_ADDR_VAR 0 3
24461: PUSH
24462: LD_EXP 102
24466: PPUSH
24467: CALL 70756 0 1
24471: ST_TO_ADDR
// for i := 1 to list do
24472: LD_ADDR_VAR 0 2
24476: PUSH
24477: DOUBLE
24478: LD_INT 1
24480: DEC
24481: ST_TO_ADDR
24482: LD_VAR 0 3
24486: PUSH
24487: FOR_TO
24488: IFFALSE 24579
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24490: LD_STRING setWarehouseGatheringPointXY(
24492: PUSH
24493: LD_VAR 0 3
24497: PUSH
24498: LD_VAR 0 2
24502: ARRAY
24503: PUSH
24504: LD_INT 1
24506: ARRAY
24507: STR
24508: PUSH
24509: LD_STRING ,
24511: STR
24512: PUSH
24513: LD_VAR 0 3
24517: PUSH
24518: LD_VAR 0 2
24522: ARRAY
24523: PUSH
24524: LD_INT 2
24526: ARRAY
24527: STR
24528: PUSH
24529: LD_STRING ,
24531: STR
24532: PUSH
24533: LD_VAR 0 3
24537: PUSH
24538: LD_VAR 0 2
24542: ARRAY
24543: PUSH
24544: LD_INT 3
24546: ARRAY
24547: STR
24548: PUSH
24549: LD_STRING ,
24551: STR
24552: PUSH
24553: LD_VAR 0 3
24557: PUSH
24558: LD_VAR 0 2
24562: ARRAY
24563: PUSH
24564: LD_INT 4
24566: ARRAY
24567: STR
24568: PUSH
24569: LD_STRING )
24571: STR
24572: PPUSH
24573: CALL_OW 559
24577: GO 24487
24579: POP
24580: POP
// end ; end ;
24581: LD_VAR 0 1
24585: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24586: LD_EXP 102
24590: IFFALSE 25277
24592: GO 24594
24594: DISABLE
24595: LD_INT 0
24597: PPUSH
24598: PPUSH
24599: PPUSH
24600: PPUSH
24601: PPUSH
24602: PPUSH
24603: PPUSH
24604: PPUSH
24605: PPUSH
// begin enable ;
24606: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24607: LD_ADDR_VAR 0 3
24611: PUSH
24612: LD_EXP 102
24616: PPUSH
24617: CALL 70756 0 1
24621: ST_TO_ADDR
// if not list then
24622: LD_VAR 0 3
24626: NOT
24627: IFFALSE 24631
// exit ;
24629: GO 25277
// for i := 1 to list do
24631: LD_ADDR_VAR 0 1
24635: PUSH
24636: DOUBLE
24637: LD_INT 1
24639: DEC
24640: ST_TO_ADDR
24641: LD_VAR 0 3
24645: PUSH
24646: FOR_TO
24647: IFFALSE 25275
// begin depot := list [ i ] [ 2 ] ;
24649: LD_ADDR_VAR 0 8
24653: PUSH
24654: LD_VAR 0 3
24658: PUSH
24659: LD_VAR 0 1
24663: ARRAY
24664: PUSH
24665: LD_INT 2
24667: ARRAY
24668: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24669: LD_ADDR_VAR 0 5
24673: PUSH
24674: LD_VAR 0 3
24678: PUSH
24679: LD_VAR 0 1
24683: ARRAY
24684: PUSH
24685: LD_INT 1
24687: ARRAY
24688: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24689: LD_VAR 0 8
24693: PPUSH
24694: CALL_OW 301
24698: PUSH
24699: LD_VAR 0 5
24703: PUSH
24704: LD_VAR 0 8
24708: PPUSH
24709: CALL_OW 255
24713: NONEQUAL
24714: OR
24715: IFFALSE 24744
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24717: LD_ADDR_EXP 102
24721: PUSH
24722: LD_EXP 102
24726: PPUSH
24727: LD_VAR 0 8
24731: PPUSH
24732: LD_INT 0
24734: PPUSH
24735: CALL_OW 1
24739: ST_TO_ADDR
// exit ;
24740: POP
24741: POP
24742: GO 25277
// end ; x := list [ i ] [ 3 ] ;
24744: LD_ADDR_VAR 0 6
24748: PUSH
24749: LD_VAR 0 3
24753: PUSH
24754: LD_VAR 0 1
24758: ARRAY
24759: PUSH
24760: LD_INT 3
24762: ARRAY
24763: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24764: LD_ADDR_VAR 0 7
24768: PUSH
24769: LD_VAR 0 3
24773: PUSH
24774: LD_VAR 0 1
24778: ARRAY
24779: PUSH
24780: LD_INT 4
24782: ARRAY
24783: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24784: LD_ADDR_VAR 0 9
24788: PUSH
24789: LD_VAR 0 6
24793: PPUSH
24794: LD_VAR 0 7
24798: PPUSH
24799: LD_INT 16
24801: PPUSH
24802: CALL 69340 0 3
24806: ST_TO_ADDR
// if not cratesNearbyPoint then
24807: LD_VAR 0 9
24811: NOT
24812: IFFALSE 24818
// exit ;
24814: POP
24815: POP
24816: GO 25277
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24818: LD_ADDR_VAR 0 4
24822: PUSH
24823: LD_INT 22
24825: PUSH
24826: LD_VAR 0 5
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 3
24837: PUSH
24838: LD_INT 60
24840: PUSH
24841: EMPTY
24842: LIST
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 91
24850: PUSH
24851: LD_VAR 0 8
24855: PUSH
24856: LD_INT 6
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 2
24866: PUSH
24867: LD_INT 25
24869: PUSH
24870: LD_INT 2
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 25
24879: PUSH
24880: LD_INT 16
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: LIST
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: PPUSH
24898: CALL_OW 69
24902: PUSH
24903: LD_VAR 0 8
24907: PPUSH
24908: CALL_OW 313
24912: PPUSH
24913: LD_INT 3
24915: PUSH
24916: LD_INT 60
24918: PUSH
24919: EMPTY
24920: LIST
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: LD_INT 25
24931: PUSH
24932: LD_INT 2
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 25
24941: PUSH
24942: LD_INT 16
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: LIST
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PPUSH
24958: CALL_OW 72
24962: UNION
24963: ST_TO_ADDR
// if tmp then
24964: LD_VAR 0 4
24968: IFFALSE 25048
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24970: LD_ADDR_VAR 0 4
24974: PUSH
24975: LD_VAR 0 4
24979: PPUSH
24980: LD_INT 3
24982: PPUSH
24983: CALL 67307 0 2
24987: ST_TO_ADDR
// for j in tmp do
24988: LD_ADDR_VAR 0 2
24992: PUSH
24993: LD_VAR 0 4
24997: PUSH
24998: FOR_IN
24999: IFFALSE 25042
// begin if IsInUnit ( j ) then
25001: LD_VAR 0 2
25005: PPUSH
25006: CALL_OW 310
25010: IFFALSE 25021
// ComExit ( j ) ;
25012: LD_VAR 0 2
25016: PPUSH
25017: CALL 67390 0 1
// AddComCollect ( j , x , y ) ;
25021: LD_VAR 0 2
25025: PPUSH
25026: LD_VAR 0 6
25030: PPUSH
25031: LD_VAR 0 7
25035: PPUSH
25036: CALL_OW 177
// end ;
25040: GO 24998
25042: POP
25043: POP
// exit ;
25044: POP
25045: POP
25046: GO 25277
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25048: LD_ADDR_VAR 0 4
25052: PUSH
25053: LD_INT 22
25055: PUSH
25056: LD_VAR 0 5
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 91
25067: PUSH
25068: LD_VAR 0 8
25072: PUSH
25073: LD_INT 8
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 2
25083: PUSH
25084: LD_INT 34
25086: PUSH
25087: LD_INT 12
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 34
25096: PUSH
25097: LD_INT 51
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 34
25106: PUSH
25107: LD_INT 32
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 34
25116: PUSH
25117: LD_EXP 26
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: LIST
25137: PPUSH
25138: CALL_OW 69
25142: ST_TO_ADDR
// if tmp then
25143: LD_VAR 0 4
25147: IFFALSE 25273
// begin for j in tmp do
25149: LD_ADDR_VAR 0 2
25153: PUSH
25154: LD_VAR 0 4
25158: PUSH
25159: FOR_IN
25160: IFFALSE 25271
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25162: LD_VAR 0 2
25166: PPUSH
25167: CALL_OW 262
25171: PUSH
25172: LD_INT 3
25174: EQUAL
25175: PUSH
25176: LD_VAR 0 2
25180: PPUSH
25181: CALL_OW 261
25185: PUSH
25186: LD_INT 20
25188: GREATER
25189: OR
25190: PUSH
25191: LD_VAR 0 2
25195: PPUSH
25196: CALL_OW 314
25200: NOT
25201: AND
25202: PUSH
25203: LD_VAR 0 2
25207: PPUSH
25208: CALL_OW 263
25212: PUSH
25213: LD_INT 1
25215: NONEQUAL
25216: PUSH
25217: LD_VAR 0 2
25221: PPUSH
25222: CALL_OW 311
25226: OR
25227: AND
25228: IFFALSE 25269
// begin ComCollect ( j , x , y ) ;
25230: LD_VAR 0 2
25234: PPUSH
25235: LD_VAR 0 6
25239: PPUSH
25240: LD_VAR 0 7
25244: PPUSH
25245: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25249: LD_VAR 0 2
25253: PPUSH
25254: LD_VAR 0 8
25258: PPUSH
25259: CALL_OW 172
// exit ;
25263: POP
25264: POP
25265: POP
25266: POP
25267: GO 25277
// end ;
25269: GO 25159
25271: POP
25272: POP
// end ; end ;
25273: GO 24646
25275: POP
25276: POP
// end ; end_of_file
25277: PPOPN 9
25279: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25280: LD_INT 0
25282: PPUSH
25283: PPUSH
25284: PPUSH
25285: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25286: LD_VAR 0 1
25290: PPUSH
25291: CALL_OW 264
25295: PUSH
25296: LD_EXP 29
25300: EQUAL
25301: IFFALSE 25373
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25303: LD_INT 68
25305: PPUSH
25306: LD_VAR 0 1
25310: PPUSH
25311: CALL_OW 255
25315: PPUSH
25316: CALL_OW 321
25320: PUSH
25321: LD_INT 2
25323: EQUAL
25324: IFFALSE 25336
// eff := 70 else
25326: LD_ADDR_VAR 0 4
25330: PUSH
25331: LD_INT 70
25333: ST_TO_ADDR
25334: GO 25344
// eff := 30 ;
25336: LD_ADDR_VAR 0 4
25340: PUSH
25341: LD_INT 30
25343: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25344: LD_VAR 0 1
25348: PPUSH
25349: CALL_OW 250
25353: PPUSH
25354: LD_VAR 0 1
25358: PPUSH
25359: CALL_OW 251
25363: PPUSH
25364: LD_VAR 0 4
25368: PPUSH
25369: CALL_OW 495
// end ; end ;
25373: LD_VAR 0 2
25377: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25378: LD_INT 0
25380: PPUSH
// end ;
25381: LD_VAR 0 4
25385: RET
// export function SOS_Command ( cmd ) ; begin
25386: LD_INT 0
25388: PPUSH
// end ;
25389: LD_VAR 0 2
25393: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25394: LD_INT 0
25396: PPUSH
// end ;
25397: LD_VAR 0 6
25401: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25402: LD_INT 0
25404: PPUSH
25405: PPUSH
// if not vehicle or not factory then
25406: LD_VAR 0 1
25410: NOT
25411: PUSH
25412: LD_VAR 0 2
25416: NOT
25417: OR
25418: IFFALSE 25422
// exit ;
25420: GO 25653
// if factoryWaypoints >= factory then
25422: LD_EXP 101
25426: PUSH
25427: LD_VAR 0 2
25431: GREATEREQUAL
25432: IFFALSE 25653
// if factoryWaypoints [ factory ] then
25434: LD_EXP 101
25438: PUSH
25439: LD_VAR 0 2
25443: ARRAY
25444: IFFALSE 25653
// begin if GetControl ( vehicle ) = control_manual then
25446: LD_VAR 0 1
25450: PPUSH
25451: CALL_OW 263
25455: PUSH
25456: LD_INT 1
25458: EQUAL
25459: IFFALSE 25540
// begin driver := IsDrivenBy ( vehicle ) ;
25461: LD_ADDR_VAR 0 4
25465: PUSH
25466: LD_VAR 0 1
25470: PPUSH
25471: CALL_OW 311
25475: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25476: LD_VAR 0 4
25480: PPUSH
25481: LD_EXP 101
25485: PUSH
25486: LD_VAR 0 2
25490: ARRAY
25491: PUSH
25492: LD_INT 3
25494: ARRAY
25495: PPUSH
25496: LD_EXP 101
25500: PUSH
25501: LD_VAR 0 2
25505: ARRAY
25506: PUSH
25507: LD_INT 4
25509: ARRAY
25510: PPUSH
25511: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25515: LD_VAR 0 4
25519: PPUSH
25520: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25524: LD_VAR 0 4
25528: PPUSH
25529: LD_VAR 0 2
25533: PPUSH
25534: CALL_OW 180
// end else
25538: GO 25653
// if GetControl ( vehicle ) = control_remote then
25540: LD_VAR 0 1
25544: PPUSH
25545: CALL_OW 263
25549: PUSH
25550: LD_INT 2
25552: EQUAL
25553: IFFALSE 25614
// begin wait ( 0 0$2 ) ;
25555: LD_INT 70
25557: PPUSH
25558: CALL_OW 67
// if Connect ( vehicle ) then
25562: LD_VAR 0 1
25566: PPUSH
25567: CALL 37701 0 1
25571: IFFALSE 25612
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25573: LD_VAR 0 1
25577: PPUSH
25578: LD_EXP 101
25582: PUSH
25583: LD_VAR 0 2
25587: ARRAY
25588: PUSH
25589: LD_INT 3
25591: ARRAY
25592: PPUSH
25593: LD_EXP 101
25597: PUSH
25598: LD_VAR 0 2
25602: ARRAY
25603: PUSH
25604: LD_INT 4
25606: ARRAY
25607: PPUSH
25608: CALL_OW 171
// end else
25612: GO 25653
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25614: LD_VAR 0 1
25618: PPUSH
25619: LD_EXP 101
25623: PUSH
25624: LD_VAR 0 2
25628: ARRAY
25629: PUSH
25630: LD_INT 3
25632: ARRAY
25633: PPUSH
25634: LD_EXP 101
25638: PUSH
25639: LD_VAR 0 2
25643: ARRAY
25644: PUSH
25645: LD_INT 4
25647: ARRAY
25648: PPUSH
25649: CALL_OW 171
// end ; end ;
25653: LD_VAR 0 3
25657: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25658: LD_INT 0
25660: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25661: LD_VAR 0 1
25665: PUSH
25666: LD_INT 250
25668: EQUAL
25669: PUSH
25670: LD_VAR 0 2
25674: PPUSH
25675: CALL_OW 264
25679: PUSH
25680: LD_EXP 32
25684: EQUAL
25685: AND
25686: IFFALSE 25707
// MinerPlaceMine ( unit , x , y ) ;
25688: LD_VAR 0 2
25692: PPUSH
25693: LD_VAR 0 4
25697: PPUSH
25698: LD_VAR 0 5
25702: PPUSH
25703: CALL 28106 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25707: LD_VAR 0 1
25711: PUSH
25712: LD_INT 251
25714: EQUAL
25715: PUSH
25716: LD_VAR 0 2
25720: PPUSH
25721: CALL_OW 264
25725: PUSH
25726: LD_EXP 32
25730: EQUAL
25731: AND
25732: IFFALSE 25753
// MinerDetonateMine ( unit , x , y ) ;
25734: LD_VAR 0 2
25738: PPUSH
25739: LD_VAR 0 4
25743: PPUSH
25744: LD_VAR 0 5
25748: PPUSH
25749: CALL 28383 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25753: LD_VAR 0 1
25757: PUSH
25758: LD_INT 252
25760: EQUAL
25761: PUSH
25762: LD_VAR 0 2
25766: PPUSH
25767: CALL_OW 264
25771: PUSH
25772: LD_EXP 32
25776: EQUAL
25777: AND
25778: IFFALSE 25799
// MinerCreateMinefield ( unit , x , y ) ;
25780: LD_VAR 0 2
25784: PPUSH
25785: LD_VAR 0 4
25789: PPUSH
25790: LD_VAR 0 5
25794: PPUSH
25795: CALL 28800 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25799: LD_VAR 0 1
25803: PUSH
25804: LD_INT 253
25806: EQUAL
25807: PUSH
25808: LD_VAR 0 2
25812: PPUSH
25813: CALL_OW 257
25817: PUSH
25818: LD_INT 5
25820: EQUAL
25821: AND
25822: IFFALSE 25843
// ComBinocular ( unit , x , y ) ;
25824: LD_VAR 0 2
25828: PPUSH
25829: LD_VAR 0 4
25833: PPUSH
25834: LD_VAR 0 5
25838: PPUSH
25839: CALL 29171 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25843: LD_VAR 0 1
25847: PUSH
25848: LD_INT 254
25850: EQUAL
25851: PUSH
25852: LD_VAR 0 2
25856: PPUSH
25857: CALL_OW 264
25861: PUSH
25862: LD_EXP 27
25866: EQUAL
25867: AND
25868: PUSH
25869: LD_VAR 0 3
25873: PPUSH
25874: CALL_OW 263
25878: PUSH
25879: LD_INT 3
25881: EQUAL
25882: AND
25883: IFFALSE 25899
// HackDestroyVehicle ( unit , selectedUnit ) ;
25885: LD_VAR 0 2
25889: PPUSH
25890: LD_VAR 0 3
25894: PPUSH
25895: CALL 27466 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25899: LD_VAR 0 1
25903: PUSH
25904: LD_INT 255
25906: EQUAL
25907: PUSH
25908: LD_VAR 0 2
25912: PPUSH
25913: CALL_OW 264
25917: PUSH
25918: LD_INT 14
25920: PUSH
25921: LD_INT 53
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: IN
25928: AND
25929: PUSH
25930: LD_VAR 0 4
25934: PPUSH
25935: LD_VAR 0 5
25939: PPUSH
25940: CALL_OW 488
25944: AND
25945: IFFALSE 25969
// CutTreeXYR ( unit , x , y , 12 ) ;
25947: LD_VAR 0 2
25951: PPUSH
25952: LD_VAR 0 4
25956: PPUSH
25957: LD_VAR 0 5
25961: PPUSH
25962: LD_INT 12
25964: PPUSH
25965: CALL 26032 0 4
// if cmd = 256 then
25969: LD_VAR 0 1
25973: PUSH
25974: LD_INT 256
25976: EQUAL
25977: IFFALSE 25998
// SetFactoryWaypoint ( unit , x , y ) ;
25979: LD_VAR 0 2
25983: PPUSH
25984: LD_VAR 0 4
25988: PPUSH
25989: LD_VAR 0 5
25993: PPUSH
25994: CALL 23967 0 3
// if cmd = 257 then
25998: LD_VAR 0 1
26002: PUSH
26003: LD_INT 257
26005: EQUAL
26006: IFFALSE 26027
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26008: LD_VAR 0 2
26012: PPUSH
26013: LD_VAR 0 4
26017: PPUSH
26018: LD_VAR 0 5
26022: PPUSH
26023: CALL 24329 0 3
// end ;
26027: LD_VAR 0 6
26031: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26032: LD_INT 0
26034: PPUSH
26035: PPUSH
26036: PPUSH
26037: PPUSH
26038: PPUSH
26039: PPUSH
26040: PPUSH
26041: PPUSH
26042: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26043: LD_VAR 0 1
26047: NOT
26048: PUSH
26049: LD_VAR 0 2
26053: PPUSH
26054: LD_VAR 0 3
26058: PPUSH
26059: CALL_OW 488
26063: NOT
26064: OR
26065: PUSH
26066: LD_VAR 0 4
26070: NOT
26071: OR
26072: IFFALSE 26076
// exit ;
26074: GO 26416
// list := [ ] ;
26076: LD_ADDR_VAR 0 13
26080: PUSH
26081: EMPTY
26082: ST_TO_ADDR
// if x - r < 0 then
26083: LD_VAR 0 2
26087: PUSH
26088: LD_VAR 0 4
26092: MINUS
26093: PUSH
26094: LD_INT 0
26096: LESS
26097: IFFALSE 26109
// min_x := 0 else
26099: LD_ADDR_VAR 0 7
26103: PUSH
26104: LD_INT 0
26106: ST_TO_ADDR
26107: GO 26125
// min_x := x - r ;
26109: LD_ADDR_VAR 0 7
26113: PUSH
26114: LD_VAR 0 2
26118: PUSH
26119: LD_VAR 0 4
26123: MINUS
26124: ST_TO_ADDR
// if y - r < 0 then
26125: LD_VAR 0 3
26129: PUSH
26130: LD_VAR 0 4
26134: MINUS
26135: PUSH
26136: LD_INT 0
26138: LESS
26139: IFFALSE 26151
// min_y := 0 else
26141: LD_ADDR_VAR 0 8
26145: PUSH
26146: LD_INT 0
26148: ST_TO_ADDR
26149: GO 26167
// min_y := y - r ;
26151: LD_ADDR_VAR 0 8
26155: PUSH
26156: LD_VAR 0 3
26160: PUSH
26161: LD_VAR 0 4
26165: MINUS
26166: ST_TO_ADDR
// max_x := x + r ;
26167: LD_ADDR_VAR 0 9
26171: PUSH
26172: LD_VAR 0 2
26176: PUSH
26177: LD_VAR 0 4
26181: PLUS
26182: ST_TO_ADDR
// max_y := y + r ;
26183: LD_ADDR_VAR 0 10
26187: PUSH
26188: LD_VAR 0 3
26192: PUSH
26193: LD_VAR 0 4
26197: PLUS
26198: ST_TO_ADDR
// for _x = min_x to max_x do
26199: LD_ADDR_VAR 0 11
26203: PUSH
26204: DOUBLE
26205: LD_VAR 0 7
26209: DEC
26210: ST_TO_ADDR
26211: LD_VAR 0 9
26215: PUSH
26216: FOR_TO
26217: IFFALSE 26334
// for _y = min_y to max_y do
26219: LD_ADDR_VAR 0 12
26223: PUSH
26224: DOUBLE
26225: LD_VAR 0 8
26229: DEC
26230: ST_TO_ADDR
26231: LD_VAR 0 10
26235: PUSH
26236: FOR_TO
26237: IFFALSE 26330
// begin if not ValidHex ( _x , _y ) then
26239: LD_VAR 0 11
26243: PPUSH
26244: LD_VAR 0 12
26248: PPUSH
26249: CALL_OW 488
26253: NOT
26254: IFFALSE 26258
// continue ;
26256: GO 26236
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26258: LD_VAR 0 11
26262: PPUSH
26263: LD_VAR 0 12
26267: PPUSH
26268: CALL_OW 351
26272: PUSH
26273: LD_VAR 0 11
26277: PPUSH
26278: LD_VAR 0 12
26282: PPUSH
26283: CALL_OW 554
26287: AND
26288: IFFALSE 26328
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26290: LD_ADDR_VAR 0 13
26294: PUSH
26295: LD_VAR 0 13
26299: PPUSH
26300: LD_VAR 0 13
26304: PUSH
26305: LD_INT 1
26307: PLUS
26308: PPUSH
26309: LD_VAR 0 11
26313: PUSH
26314: LD_VAR 0 12
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PPUSH
26323: CALL_OW 2
26327: ST_TO_ADDR
// end ;
26328: GO 26236
26330: POP
26331: POP
26332: GO 26216
26334: POP
26335: POP
// if not list then
26336: LD_VAR 0 13
26340: NOT
26341: IFFALSE 26345
// exit ;
26343: GO 26416
// for i in list do
26345: LD_ADDR_VAR 0 6
26349: PUSH
26350: LD_VAR 0 13
26354: PUSH
26355: FOR_IN
26356: IFFALSE 26414
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26358: LD_VAR 0 1
26362: PPUSH
26363: LD_STRING M
26365: PUSH
26366: LD_VAR 0 6
26370: PUSH
26371: LD_INT 1
26373: ARRAY
26374: PUSH
26375: LD_VAR 0 6
26379: PUSH
26380: LD_INT 2
26382: ARRAY
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: LD_INT 0
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: PUSH
26405: EMPTY
26406: LIST
26407: PPUSH
26408: CALL_OW 447
26412: GO 26355
26414: POP
26415: POP
// end ;
26416: LD_VAR 0 5
26420: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26421: LD_EXP 104
26425: NOT
26426: IFFALSE 26476
26428: GO 26430
26430: DISABLE
// begin initHack := true ;
26431: LD_ADDR_EXP 104
26435: PUSH
26436: LD_INT 1
26438: ST_TO_ADDR
// hackTanks := [ ] ;
26439: LD_ADDR_EXP 105
26443: PUSH
26444: EMPTY
26445: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26446: LD_ADDR_EXP 106
26450: PUSH
26451: EMPTY
26452: ST_TO_ADDR
// hackLimit := 3 ;
26453: LD_ADDR_EXP 107
26457: PUSH
26458: LD_INT 3
26460: ST_TO_ADDR
// hackDist := 12 ;
26461: LD_ADDR_EXP 108
26465: PUSH
26466: LD_INT 12
26468: ST_TO_ADDR
// hackCounter := [ ] ;
26469: LD_ADDR_EXP 109
26473: PUSH
26474: EMPTY
26475: ST_TO_ADDR
// end ;
26476: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26477: LD_EXP 104
26481: PUSH
26482: LD_INT 34
26484: PUSH
26485: LD_EXP 27
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PPUSH
26494: CALL_OW 69
26498: AND
26499: IFFALSE 26754
26501: GO 26503
26503: DISABLE
26504: LD_INT 0
26506: PPUSH
26507: PPUSH
// begin enable ;
26508: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26509: LD_ADDR_VAR 0 1
26513: PUSH
26514: LD_INT 34
26516: PUSH
26517: LD_EXP 27
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PPUSH
26526: CALL_OW 69
26530: PUSH
26531: FOR_IN
26532: IFFALSE 26752
// begin if not i in hackTanks then
26534: LD_VAR 0 1
26538: PUSH
26539: LD_EXP 105
26543: IN
26544: NOT
26545: IFFALSE 26628
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26547: LD_ADDR_EXP 105
26551: PUSH
26552: LD_EXP 105
26556: PPUSH
26557: LD_EXP 105
26561: PUSH
26562: LD_INT 1
26564: PLUS
26565: PPUSH
26566: LD_VAR 0 1
26570: PPUSH
26571: CALL_OW 1
26575: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26576: LD_ADDR_EXP 106
26580: PUSH
26581: LD_EXP 106
26585: PPUSH
26586: LD_EXP 106
26590: PUSH
26591: LD_INT 1
26593: PLUS
26594: PPUSH
26595: EMPTY
26596: PPUSH
26597: CALL_OW 1
26601: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26602: LD_ADDR_EXP 109
26606: PUSH
26607: LD_EXP 109
26611: PPUSH
26612: LD_EXP 109
26616: PUSH
26617: LD_INT 1
26619: PLUS
26620: PPUSH
26621: EMPTY
26622: PPUSH
26623: CALL_OW 1
26627: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26628: LD_VAR 0 1
26632: PPUSH
26633: CALL_OW 302
26637: NOT
26638: IFFALSE 26651
// begin HackUnlinkAll ( i ) ;
26640: LD_VAR 0 1
26644: PPUSH
26645: CALL 26757 0 1
// continue ;
26649: GO 26531
// end ; HackCheckCapturedStatus ( i ) ;
26651: LD_VAR 0 1
26655: PPUSH
26656: CALL 27200 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26660: LD_ADDR_VAR 0 2
26664: PUSH
26665: LD_INT 81
26667: PUSH
26668: LD_VAR 0 1
26672: PPUSH
26673: CALL_OW 255
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 33
26684: PUSH
26685: LD_INT 3
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 91
26694: PUSH
26695: LD_VAR 0 1
26699: PUSH
26700: LD_EXP 108
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 50
26712: PUSH
26713: EMPTY
26714: LIST
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: PPUSH
26722: CALL_OW 69
26726: ST_TO_ADDR
// if not tmp then
26727: LD_VAR 0 2
26731: NOT
26732: IFFALSE 26736
// continue ;
26734: GO 26531
// HackLink ( i , tmp ) ;
26736: LD_VAR 0 1
26740: PPUSH
26741: LD_VAR 0 2
26745: PPUSH
26746: CALL 26893 0 2
// end ;
26750: GO 26531
26752: POP
26753: POP
// end ;
26754: PPOPN 2
26756: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26757: LD_INT 0
26759: PPUSH
26760: PPUSH
26761: PPUSH
// if not hack in hackTanks then
26762: LD_VAR 0 1
26766: PUSH
26767: LD_EXP 105
26771: IN
26772: NOT
26773: IFFALSE 26777
// exit ;
26775: GO 26888
// index := GetElementIndex ( hackTanks , hack ) ;
26777: LD_ADDR_VAR 0 4
26781: PUSH
26782: LD_EXP 105
26786: PPUSH
26787: LD_VAR 0 1
26791: PPUSH
26792: CALL 34515 0 2
26796: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26797: LD_EXP 106
26801: PUSH
26802: LD_VAR 0 4
26806: ARRAY
26807: IFFALSE 26888
// begin for i in hackTanksCaptured [ index ] do
26809: LD_ADDR_VAR 0 3
26813: PUSH
26814: LD_EXP 106
26818: PUSH
26819: LD_VAR 0 4
26823: ARRAY
26824: PUSH
26825: FOR_IN
26826: IFFALSE 26852
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26828: LD_VAR 0 3
26832: PUSH
26833: LD_INT 1
26835: ARRAY
26836: PPUSH
26837: LD_VAR 0 3
26841: PUSH
26842: LD_INT 2
26844: ARRAY
26845: PPUSH
26846: CALL_OW 235
26850: GO 26825
26852: POP
26853: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26854: LD_ADDR_EXP 106
26858: PUSH
26859: LD_EXP 106
26863: PPUSH
26864: LD_VAR 0 4
26868: PPUSH
26869: EMPTY
26870: PPUSH
26871: CALL_OW 1
26875: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26876: LD_VAR 0 1
26880: PPUSH
26881: LD_INT 0
26883: PPUSH
26884: CALL_OW 505
// end ; end ;
26888: LD_VAR 0 2
26892: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26893: LD_INT 0
26895: PPUSH
26896: PPUSH
26897: PPUSH
// if not hack in hackTanks or not vehicles then
26898: LD_VAR 0 1
26902: PUSH
26903: LD_EXP 105
26907: IN
26908: NOT
26909: PUSH
26910: LD_VAR 0 2
26914: NOT
26915: OR
26916: IFFALSE 26920
// exit ;
26918: GO 27195
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26920: LD_ADDR_VAR 0 2
26924: PUSH
26925: LD_VAR 0 1
26929: PPUSH
26930: LD_VAR 0 2
26934: PPUSH
26935: LD_INT 1
26937: PPUSH
26938: LD_INT 1
26940: PPUSH
26941: CALL 35165 0 4
26945: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26946: LD_ADDR_VAR 0 5
26950: PUSH
26951: LD_EXP 105
26955: PPUSH
26956: LD_VAR 0 1
26960: PPUSH
26961: CALL 34515 0 2
26965: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26966: LD_EXP 106
26970: PUSH
26971: LD_VAR 0 5
26975: ARRAY
26976: PUSH
26977: LD_EXP 107
26981: LESS
26982: IFFALSE 27171
// begin for i := 1 to vehicles do
26984: LD_ADDR_VAR 0 4
26988: PUSH
26989: DOUBLE
26990: LD_INT 1
26992: DEC
26993: ST_TO_ADDR
26994: LD_VAR 0 2
26998: PUSH
26999: FOR_TO
27000: IFFALSE 27169
// begin if hackTanksCaptured [ index ] = hackLimit then
27002: LD_EXP 106
27006: PUSH
27007: LD_VAR 0 5
27011: ARRAY
27012: PUSH
27013: LD_EXP 107
27017: EQUAL
27018: IFFALSE 27022
// break ;
27020: GO 27169
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27022: LD_ADDR_EXP 109
27026: PUSH
27027: LD_EXP 109
27031: PPUSH
27032: LD_VAR 0 5
27036: PPUSH
27037: LD_EXP 109
27041: PUSH
27042: LD_VAR 0 5
27046: ARRAY
27047: PUSH
27048: LD_INT 1
27050: PLUS
27051: PPUSH
27052: CALL_OW 1
27056: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27057: LD_ADDR_EXP 106
27061: PUSH
27062: LD_EXP 106
27066: PPUSH
27067: LD_VAR 0 5
27071: PUSH
27072: LD_EXP 106
27076: PUSH
27077: LD_VAR 0 5
27081: ARRAY
27082: PUSH
27083: LD_INT 1
27085: PLUS
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PPUSH
27091: LD_VAR 0 2
27095: PUSH
27096: LD_VAR 0 4
27100: ARRAY
27101: PUSH
27102: LD_VAR 0 2
27106: PUSH
27107: LD_VAR 0 4
27111: ARRAY
27112: PPUSH
27113: CALL_OW 255
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PPUSH
27122: CALL 34730 0 3
27126: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27127: LD_VAR 0 2
27131: PUSH
27132: LD_VAR 0 4
27136: ARRAY
27137: PPUSH
27138: LD_VAR 0 1
27142: PPUSH
27143: CALL_OW 255
27147: PPUSH
27148: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27152: LD_VAR 0 2
27156: PUSH
27157: LD_VAR 0 4
27161: ARRAY
27162: PPUSH
27163: CALL_OW 141
// end ;
27167: GO 26999
27169: POP
27170: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27171: LD_VAR 0 1
27175: PPUSH
27176: LD_EXP 106
27180: PUSH
27181: LD_VAR 0 5
27185: ARRAY
27186: PUSH
27187: LD_INT 0
27189: PLUS
27190: PPUSH
27191: CALL_OW 505
// end ;
27195: LD_VAR 0 3
27199: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27200: LD_INT 0
27202: PPUSH
27203: PPUSH
27204: PPUSH
27205: PPUSH
// if not hack in hackTanks then
27206: LD_VAR 0 1
27210: PUSH
27211: LD_EXP 105
27215: IN
27216: NOT
27217: IFFALSE 27221
// exit ;
27219: GO 27461
// index := GetElementIndex ( hackTanks , hack ) ;
27221: LD_ADDR_VAR 0 4
27225: PUSH
27226: LD_EXP 105
27230: PPUSH
27231: LD_VAR 0 1
27235: PPUSH
27236: CALL 34515 0 2
27240: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27241: LD_ADDR_VAR 0 3
27245: PUSH
27246: DOUBLE
27247: LD_EXP 106
27251: PUSH
27252: LD_VAR 0 4
27256: ARRAY
27257: INC
27258: ST_TO_ADDR
27259: LD_INT 1
27261: PUSH
27262: FOR_DOWNTO
27263: IFFALSE 27435
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27265: LD_ADDR_VAR 0 5
27269: PUSH
27270: LD_EXP 106
27274: PUSH
27275: LD_VAR 0 4
27279: ARRAY
27280: PUSH
27281: LD_VAR 0 3
27285: ARRAY
27286: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27287: LD_VAR 0 5
27291: PUSH
27292: LD_INT 1
27294: ARRAY
27295: PPUSH
27296: CALL_OW 302
27300: NOT
27301: PUSH
27302: LD_VAR 0 5
27306: PUSH
27307: LD_INT 1
27309: ARRAY
27310: PPUSH
27311: CALL_OW 255
27315: PUSH
27316: LD_VAR 0 1
27320: PPUSH
27321: CALL_OW 255
27325: NONEQUAL
27326: OR
27327: IFFALSE 27433
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27329: LD_VAR 0 5
27333: PUSH
27334: LD_INT 1
27336: ARRAY
27337: PPUSH
27338: CALL_OW 305
27342: PUSH
27343: LD_VAR 0 5
27347: PUSH
27348: LD_INT 1
27350: ARRAY
27351: PPUSH
27352: CALL_OW 255
27356: PUSH
27357: LD_VAR 0 1
27361: PPUSH
27362: CALL_OW 255
27366: EQUAL
27367: AND
27368: IFFALSE 27392
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27370: LD_VAR 0 5
27374: PUSH
27375: LD_INT 1
27377: ARRAY
27378: PPUSH
27379: LD_VAR 0 5
27383: PUSH
27384: LD_INT 2
27386: ARRAY
27387: PPUSH
27388: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27392: LD_ADDR_EXP 106
27396: PUSH
27397: LD_EXP 106
27401: PPUSH
27402: LD_VAR 0 4
27406: PPUSH
27407: LD_EXP 106
27411: PUSH
27412: LD_VAR 0 4
27416: ARRAY
27417: PPUSH
27418: LD_VAR 0 3
27422: PPUSH
27423: CALL_OW 3
27427: PPUSH
27428: CALL_OW 1
27432: ST_TO_ADDR
// end ; end ;
27433: GO 27262
27435: POP
27436: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27437: LD_VAR 0 1
27441: PPUSH
27442: LD_EXP 106
27446: PUSH
27447: LD_VAR 0 4
27451: ARRAY
27452: PUSH
27453: LD_INT 0
27455: PLUS
27456: PPUSH
27457: CALL_OW 505
// end ;
27461: LD_VAR 0 2
27465: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27466: LD_INT 0
27468: PPUSH
27469: PPUSH
27470: PPUSH
27471: PPUSH
// if not hack in hackTanks then
27472: LD_VAR 0 1
27476: PUSH
27477: LD_EXP 105
27481: IN
27482: NOT
27483: IFFALSE 27487
// exit ;
27485: GO 27572
// index := GetElementIndex ( hackTanks , hack ) ;
27487: LD_ADDR_VAR 0 5
27491: PUSH
27492: LD_EXP 105
27496: PPUSH
27497: LD_VAR 0 1
27501: PPUSH
27502: CALL 34515 0 2
27506: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27507: LD_ADDR_VAR 0 4
27511: PUSH
27512: DOUBLE
27513: LD_INT 1
27515: DEC
27516: ST_TO_ADDR
27517: LD_EXP 106
27521: PUSH
27522: LD_VAR 0 5
27526: ARRAY
27527: PUSH
27528: FOR_TO
27529: IFFALSE 27570
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27531: LD_EXP 106
27535: PUSH
27536: LD_VAR 0 5
27540: ARRAY
27541: PUSH
27542: LD_VAR 0 4
27546: ARRAY
27547: PUSH
27548: LD_INT 1
27550: ARRAY
27551: PUSH
27552: LD_VAR 0 2
27556: EQUAL
27557: IFFALSE 27568
// KillUnit ( vehicle ) ;
27559: LD_VAR 0 2
27563: PPUSH
27564: CALL_OW 66
27568: GO 27528
27570: POP
27571: POP
// end ;
27572: LD_VAR 0 3
27576: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27577: LD_EXP 110
27581: NOT
27582: IFFALSE 27617
27584: GO 27586
27586: DISABLE
// begin initMiner := true ;
27587: LD_ADDR_EXP 110
27591: PUSH
27592: LD_INT 1
27594: ST_TO_ADDR
// minersList := [ ] ;
27595: LD_ADDR_EXP 111
27599: PUSH
27600: EMPTY
27601: ST_TO_ADDR
// minerMinesList := [ ] ;
27602: LD_ADDR_EXP 112
27606: PUSH
27607: EMPTY
27608: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27609: LD_ADDR_EXP 113
27613: PUSH
27614: LD_INT 5
27616: ST_TO_ADDR
// end ;
27617: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27618: LD_EXP 110
27622: PUSH
27623: LD_INT 34
27625: PUSH
27626: LD_EXP 32
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PPUSH
27635: CALL_OW 69
27639: AND
27640: IFFALSE 28103
27642: GO 27644
27644: DISABLE
27645: LD_INT 0
27647: PPUSH
27648: PPUSH
27649: PPUSH
27650: PPUSH
// begin enable ;
27651: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27652: LD_ADDR_VAR 0 1
27656: PUSH
27657: LD_INT 34
27659: PUSH
27660: LD_EXP 32
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PPUSH
27669: CALL_OW 69
27673: PUSH
27674: FOR_IN
27675: IFFALSE 27747
// begin if not i in minersList then
27677: LD_VAR 0 1
27681: PUSH
27682: LD_EXP 111
27686: IN
27687: NOT
27688: IFFALSE 27745
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27690: LD_ADDR_EXP 111
27694: PUSH
27695: LD_EXP 111
27699: PPUSH
27700: LD_EXP 111
27704: PUSH
27705: LD_INT 1
27707: PLUS
27708: PPUSH
27709: LD_VAR 0 1
27713: PPUSH
27714: CALL_OW 1
27718: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27719: LD_ADDR_EXP 112
27723: PUSH
27724: LD_EXP 112
27728: PPUSH
27729: LD_EXP 112
27733: PUSH
27734: LD_INT 1
27736: PLUS
27737: PPUSH
27738: EMPTY
27739: PPUSH
27740: CALL_OW 1
27744: ST_TO_ADDR
// end end ;
27745: GO 27674
27747: POP
27748: POP
// for i := minerMinesList downto 1 do
27749: LD_ADDR_VAR 0 1
27753: PUSH
27754: DOUBLE
27755: LD_EXP 112
27759: INC
27760: ST_TO_ADDR
27761: LD_INT 1
27763: PUSH
27764: FOR_DOWNTO
27765: IFFALSE 28101
// begin if IsLive ( minersList [ i ] ) then
27767: LD_EXP 111
27771: PUSH
27772: LD_VAR 0 1
27776: ARRAY
27777: PPUSH
27778: CALL_OW 300
27782: IFFALSE 27810
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27784: LD_EXP 111
27788: PUSH
27789: LD_VAR 0 1
27793: ARRAY
27794: PPUSH
27795: LD_EXP 112
27799: PUSH
27800: LD_VAR 0 1
27804: ARRAY
27805: PPUSH
27806: CALL_OW 505
// if not minerMinesList [ i ] then
27810: LD_EXP 112
27814: PUSH
27815: LD_VAR 0 1
27819: ARRAY
27820: NOT
27821: IFFALSE 27825
// continue ;
27823: GO 27764
// for j := minerMinesList [ i ] downto 1 do
27825: LD_ADDR_VAR 0 2
27829: PUSH
27830: DOUBLE
27831: LD_EXP 112
27835: PUSH
27836: LD_VAR 0 1
27840: ARRAY
27841: INC
27842: ST_TO_ADDR
27843: LD_INT 1
27845: PUSH
27846: FOR_DOWNTO
27847: IFFALSE 28097
// begin side := GetSide ( minersList [ i ] ) ;
27849: LD_ADDR_VAR 0 3
27853: PUSH
27854: LD_EXP 111
27858: PUSH
27859: LD_VAR 0 1
27863: ARRAY
27864: PPUSH
27865: CALL_OW 255
27869: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27870: LD_ADDR_VAR 0 4
27874: PUSH
27875: LD_EXP 112
27879: PUSH
27880: LD_VAR 0 1
27884: ARRAY
27885: PUSH
27886: LD_VAR 0 2
27890: ARRAY
27891: PUSH
27892: LD_INT 1
27894: ARRAY
27895: PPUSH
27896: LD_EXP 112
27900: PUSH
27901: LD_VAR 0 1
27905: ARRAY
27906: PUSH
27907: LD_VAR 0 2
27911: ARRAY
27912: PUSH
27913: LD_INT 2
27915: ARRAY
27916: PPUSH
27917: CALL_OW 428
27921: ST_TO_ADDR
// if not tmp then
27922: LD_VAR 0 4
27926: NOT
27927: IFFALSE 27931
// continue ;
27929: GO 27846
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27931: LD_VAR 0 4
27935: PUSH
27936: LD_INT 81
27938: PUSH
27939: LD_VAR 0 3
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PPUSH
27948: CALL_OW 69
27952: IN
27953: PUSH
27954: LD_EXP 112
27958: PUSH
27959: LD_VAR 0 1
27963: ARRAY
27964: PUSH
27965: LD_VAR 0 2
27969: ARRAY
27970: PUSH
27971: LD_INT 1
27973: ARRAY
27974: PPUSH
27975: LD_EXP 112
27979: PUSH
27980: LD_VAR 0 1
27984: ARRAY
27985: PUSH
27986: LD_VAR 0 2
27990: ARRAY
27991: PUSH
27992: LD_INT 2
27994: ARRAY
27995: PPUSH
27996: CALL_OW 458
28000: AND
28001: IFFALSE 28095
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28003: LD_EXP 112
28007: PUSH
28008: LD_VAR 0 1
28012: ARRAY
28013: PUSH
28014: LD_VAR 0 2
28018: ARRAY
28019: PUSH
28020: LD_INT 1
28022: ARRAY
28023: PPUSH
28024: LD_EXP 112
28028: PUSH
28029: LD_VAR 0 1
28033: ARRAY
28034: PUSH
28035: LD_VAR 0 2
28039: ARRAY
28040: PUSH
28041: LD_INT 2
28043: ARRAY
28044: PPUSH
28045: LD_VAR 0 3
28049: PPUSH
28050: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28054: LD_ADDR_EXP 112
28058: PUSH
28059: LD_EXP 112
28063: PPUSH
28064: LD_VAR 0 1
28068: PPUSH
28069: LD_EXP 112
28073: PUSH
28074: LD_VAR 0 1
28078: ARRAY
28079: PPUSH
28080: LD_VAR 0 2
28084: PPUSH
28085: CALL_OW 3
28089: PPUSH
28090: CALL_OW 1
28094: ST_TO_ADDR
// end ; end ;
28095: GO 27846
28097: POP
28098: POP
// end ;
28099: GO 27764
28101: POP
28102: POP
// end ;
28103: PPOPN 4
28105: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28106: LD_INT 0
28108: PPUSH
28109: PPUSH
// result := false ;
28110: LD_ADDR_VAR 0 4
28114: PUSH
28115: LD_INT 0
28117: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28118: LD_VAR 0 1
28122: PPUSH
28123: CALL_OW 264
28127: PUSH
28128: LD_EXP 32
28132: EQUAL
28133: NOT
28134: IFFALSE 28138
// exit ;
28136: GO 28378
// index := GetElementIndex ( minersList , unit ) ;
28138: LD_ADDR_VAR 0 5
28142: PUSH
28143: LD_EXP 111
28147: PPUSH
28148: LD_VAR 0 1
28152: PPUSH
28153: CALL 34515 0 2
28157: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28158: LD_EXP 112
28162: PUSH
28163: LD_VAR 0 5
28167: ARRAY
28168: PUSH
28169: LD_EXP 113
28173: GREATEREQUAL
28174: IFFALSE 28178
// exit ;
28176: GO 28378
// ComMoveXY ( unit , x , y ) ;
28178: LD_VAR 0 1
28182: PPUSH
28183: LD_VAR 0 2
28187: PPUSH
28188: LD_VAR 0 3
28192: PPUSH
28193: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28197: LD_INT 35
28199: PPUSH
28200: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28204: LD_VAR 0 1
28208: PPUSH
28209: LD_VAR 0 2
28213: PPUSH
28214: LD_VAR 0 3
28218: PPUSH
28219: CALL 65801 0 3
28223: NOT
28224: PUSH
28225: LD_VAR 0 1
28229: PPUSH
28230: CALL_OW 314
28234: AND
28235: IFFALSE 28239
// exit ;
28237: GO 28378
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28239: LD_VAR 0 2
28243: PPUSH
28244: LD_VAR 0 3
28248: PPUSH
28249: CALL_OW 428
28253: PUSH
28254: LD_VAR 0 1
28258: EQUAL
28259: PUSH
28260: LD_VAR 0 1
28264: PPUSH
28265: CALL_OW 314
28269: NOT
28270: AND
28271: IFFALSE 28197
// PlaySoundXY ( x , y , PlantMine ) ;
28273: LD_VAR 0 2
28277: PPUSH
28278: LD_VAR 0 3
28282: PPUSH
28283: LD_STRING PlantMine
28285: PPUSH
28286: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28290: LD_VAR 0 2
28294: PPUSH
28295: LD_VAR 0 3
28299: PPUSH
28300: LD_VAR 0 1
28304: PPUSH
28305: CALL_OW 255
28309: PPUSH
28310: LD_INT 0
28312: PPUSH
28313: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28317: LD_ADDR_EXP 112
28321: PUSH
28322: LD_EXP 112
28326: PPUSH
28327: LD_VAR 0 5
28331: PUSH
28332: LD_EXP 112
28336: PUSH
28337: LD_VAR 0 5
28341: ARRAY
28342: PUSH
28343: LD_INT 1
28345: PLUS
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PPUSH
28351: LD_VAR 0 2
28355: PUSH
28356: LD_VAR 0 3
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PPUSH
28365: CALL 34730 0 3
28369: ST_TO_ADDR
// result := true ;
28370: LD_ADDR_VAR 0 4
28374: PUSH
28375: LD_INT 1
28377: ST_TO_ADDR
// end ;
28378: LD_VAR 0 4
28382: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28383: LD_INT 0
28385: PPUSH
28386: PPUSH
28387: PPUSH
// if not unit in minersList then
28388: LD_VAR 0 1
28392: PUSH
28393: LD_EXP 111
28397: IN
28398: NOT
28399: IFFALSE 28403
// exit ;
28401: GO 28795
// index := GetElementIndex ( minersList , unit ) ;
28403: LD_ADDR_VAR 0 6
28407: PUSH
28408: LD_EXP 111
28412: PPUSH
28413: LD_VAR 0 1
28417: PPUSH
28418: CALL 34515 0 2
28422: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28423: LD_ADDR_VAR 0 5
28427: PUSH
28428: DOUBLE
28429: LD_EXP 112
28433: PUSH
28434: LD_VAR 0 6
28438: ARRAY
28439: INC
28440: ST_TO_ADDR
28441: LD_INT 1
28443: PUSH
28444: FOR_DOWNTO
28445: IFFALSE 28606
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28447: LD_EXP 112
28451: PUSH
28452: LD_VAR 0 6
28456: ARRAY
28457: PUSH
28458: LD_VAR 0 5
28462: ARRAY
28463: PUSH
28464: LD_INT 1
28466: ARRAY
28467: PUSH
28468: LD_VAR 0 2
28472: EQUAL
28473: PUSH
28474: LD_EXP 112
28478: PUSH
28479: LD_VAR 0 6
28483: ARRAY
28484: PUSH
28485: LD_VAR 0 5
28489: ARRAY
28490: PUSH
28491: LD_INT 2
28493: ARRAY
28494: PUSH
28495: LD_VAR 0 3
28499: EQUAL
28500: AND
28501: IFFALSE 28604
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28503: LD_EXP 112
28507: PUSH
28508: LD_VAR 0 6
28512: ARRAY
28513: PUSH
28514: LD_VAR 0 5
28518: ARRAY
28519: PUSH
28520: LD_INT 1
28522: ARRAY
28523: PPUSH
28524: LD_EXP 112
28528: PUSH
28529: LD_VAR 0 6
28533: ARRAY
28534: PUSH
28535: LD_VAR 0 5
28539: ARRAY
28540: PUSH
28541: LD_INT 2
28543: ARRAY
28544: PPUSH
28545: LD_VAR 0 1
28549: PPUSH
28550: CALL_OW 255
28554: PPUSH
28555: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28559: LD_ADDR_EXP 112
28563: PUSH
28564: LD_EXP 112
28568: PPUSH
28569: LD_VAR 0 6
28573: PPUSH
28574: LD_EXP 112
28578: PUSH
28579: LD_VAR 0 6
28583: ARRAY
28584: PPUSH
28585: LD_VAR 0 5
28589: PPUSH
28590: CALL_OW 3
28594: PPUSH
28595: CALL_OW 1
28599: ST_TO_ADDR
// exit ;
28600: POP
28601: POP
28602: GO 28795
// end ; end ;
28604: GO 28444
28606: POP
28607: POP
// for i := minerMinesList [ index ] downto 1 do
28608: LD_ADDR_VAR 0 5
28612: PUSH
28613: DOUBLE
28614: LD_EXP 112
28618: PUSH
28619: LD_VAR 0 6
28623: ARRAY
28624: INC
28625: ST_TO_ADDR
28626: LD_INT 1
28628: PUSH
28629: FOR_DOWNTO
28630: IFFALSE 28793
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28632: LD_EXP 112
28636: PUSH
28637: LD_VAR 0 6
28641: ARRAY
28642: PUSH
28643: LD_VAR 0 5
28647: ARRAY
28648: PUSH
28649: LD_INT 1
28651: ARRAY
28652: PPUSH
28653: LD_EXP 112
28657: PUSH
28658: LD_VAR 0 6
28662: ARRAY
28663: PUSH
28664: LD_VAR 0 5
28668: ARRAY
28669: PUSH
28670: LD_INT 2
28672: ARRAY
28673: PPUSH
28674: LD_VAR 0 2
28678: PPUSH
28679: LD_VAR 0 3
28683: PPUSH
28684: CALL_OW 298
28688: PUSH
28689: LD_INT 6
28691: LESS
28692: IFFALSE 28791
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28694: LD_EXP 112
28698: PUSH
28699: LD_VAR 0 6
28703: ARRAY
28704: PUSH
28705: LD_VAR 0 5
28709: ARRAY
28710: PUSH
28711: LD_INT 1
28713: ARRAY
28714: PPUSH
28715: LD_EXP 112
28719: PUSH
28720: LD_VAR 0 6
28724: ARRAY
28725: PUSH
28726: LD_VAR 0 5
28730: ARRAY
28731: PUSH
28732: LD_INT 2
28734: ARRAY
28735: PPUSH
28736: LD_VAR 0 1
28740: PPUSH
28741: CALL_OW 255
28745: PPUSH
28746: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28750: LD_ADDR_EXP 112
28754: PUSH
28755: LD_EXP 112
28759: PPUSH
28760: LD_VAR 0 6
28764: PPUSH
28765: LD_EXP 112
28769: PUSH
28770: LD_VAR 0 6
28774: ARRAY
28775: PPUSH
28776: LD_VAR 0 5
28780: PPUSH
28781: CALL_OW 3
28785: PPUSH
28786: CALL_OW 1
28790: ST_TO_ADDR
// end ; end ;
28791: GO 28629
28793: POP
28794: POP
// end ;
28795: LD_VAR 0 4
28799: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28800: LD_INT 0
28802: PPUSH
28803: PPUSH
28804: PPUSH
28805: PPUSH
28806: PPUSH
28807: PPUSH
28808: PPUSH
28809: PPUSH
28810: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28811: LD_VAR 0 1
28815: PPUSH
28816: CALL_OW 264
28820: PUSH
28821: LD_EXP 32
28825: EQUAL
28826: NOT
28827: PUSH
28828: LD_VAR 0 1
28832: PUSH
28833: LD_EXP 111
28837: IN
28838: NOT
28839: OR
28840: IFFALSE 28844
// exit ;
28842: GO 29166
// index := GetElementIndex ( minersList , unit ) ;
28844: LD_ADDR_VAR 0 6
28848: PUSH
28849: LD_EXP 111
28853: PPUSH
28854: LD_VAR 0 1
28858: PPUSH
28859: CALL 34515 0 2
28863: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28864: LD_ADDR_VAR 0 8
28868: PUSH
28869: LD_EXP 113
28873: PUSH
28874: LD_EXP 112
28878: PUSH
28879: LD_VAR 0 6
28883: ARRAY
28884: MINUS
28885: ST_TO_ADDR
// if not minesFreeAmount then
28886: LD_VAR 0 8
28890: NOT
28891: IFFALSE 28895
// exit ;
28893: GO 29166
// tmp := [ ] ;
28895: LD_ADDR_VAR 0 7
28899: PUSH
28900: EMPTY
28901: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28902: LD_ADDR_VAR 0 5
28906: PUSH
28907: DOUBLE
28908: LD_INT 1
28910: DEC
28911: ST_TO_ADDR
28912: LD_VAR 0 8
28916: PUSH
28917: FOR_TO
28918: IFFALSE 29113
// begin _d := rand ( 0 , 5 ) ;
28920: LD_ADDR_VAR 0 11
28924: PUSH
28925: LD_INT 0
28927: PPUSH
28928: LD_INT 5
28930: PPUSH
28931: CALL_OW 12
28935: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28936: LD_ADDR_VAR 0 12
28940: PUSH
28941: LD_INT 2
28943: PPUSH
28944: LD_INT 6
28946: PPUSH
28947: CALL_OW 12
28951: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28952: LD_ADDR_VAR 0 9
28956: PUSH
28957: LD_VAR 0 2
28961: PPUSH
28962: LD_VAR 0 11
28966: PPUSH
28967: LD_VAR 0 12
28971: PPUSH
28972: CALL_OW 272
28976: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28977: LD_ADDR_VAR 0 10
28981: PUSH
28982: LD_VAR 0 3
28986: PPUSH
28987: LD_VAR 0 11
28991: PPUSH
28992: LD_VAR 0 12
28996: PPUSH
28997: CALL_OW 273
29001: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29002: LD_VAR 0 9
29006: PPUSH
29007: LD_VAR 0 10
29011: PPUSH
29012: CALL_OW 488
29016: PUSH
29017: LD_VAR 0 9
29021: PUSH
29022: LD_VAR 0 10
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_VAR 0 7
29035: IN
29036: NOT
29037: AND
29038: PUSH
29039: LD_VAR 0 9
29043: PPUSH
29044: LD_VAR 0 10
29048: PPUSH
29049: CALL_OW 458
29053: NOT
29054: AND
29055: IFFALSE 29097
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29057: LD_ADDR_VAR 0 7
29061: PUSH
29062: LD_VAR 0 7
29066: PPUSH
29067: LD_VAR 0 7
29071: PUSH
29072: LD_INT 1
29074: PLUS
29075: PPUSH
29076: LD_VAR 0 9
29080: PUSH
29081: LD_VAR 0 10
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PPUSH
29090: CALL_OW 1
29094: ST_TO_ADDR
29095: GO 29111
// i := i - 1 ;
29097: LD_ADDR_VAR 0 5
29101: PUSH
29102: LD_VAR 0 5
29106: PUSH
29107: LD_INT 1
29109: MINUS
29110: ST_TO_ADDR
// end ;
29111: GO 28917
29113: POP
29114: POP
// for i in tmp do
29115: LD_ADDR_VAR 0 5
29119: PUSH
29120: LD_VAR 0 7
29124: PUSH
29125: FOR_IN
29126: IFFALSE 29164
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29128: LD_VAR 0 1
29132: PPUSH
29133: LD_VAR 0 5
29137: PUSH
29138: LD_INT 1
29140: ARRAY
29141: PPUSH
29142: LD_VAR 0 5
29146: PUSH
29147: LD_INT 2
29149: ARRAY
29150: PPUSH
29151: CALL 28106 0 3
29155: NOT
29156: IFFALSE 29162
// exit ;
29158: POP
29159: POP
29160: GO 29166
29162: GO 29125
29164: POP
29165: POP
// end ;
29166: LD_VAR 0 4
29170: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29171: LD_INT 0
29173: PPUSH
29174: PPUSH
29175: PPUSH
29176: PPUSH
29177: PPUSH
29178: PPUSH
29179: PPUSH
// if not GetClass ( unit ) = class_sniper then
29180: LD_VAR 0 1
29184: PPUSH
29185: CALL_OW 257
29189: PUSH
29190: LD_INT 5
29192: EQUAL
29193: NOT
29194: IFFALSE 29198
// exit ;
29196: GO 29586
// dist := 8 ;
29198: LD_ADDR_VAR 0 5
29202: PUSH
29203: LD_INT 8
29205: ST_TO_ADDR
// viewRange := 12 ;
29206: LD_ADDR_VAR 0 7
29210: PUSH
29211: LD_INT 12
29213: ST_TO_ADDR
// side := GetSide ( unit ) ;
29214: LD_ADDR_VAR 0 6
29218: PUSH
29219: LD_VAR 0 1
29223: PPUSH
29224: CALL_OW 255
29228: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29229: LD_INT 61
29231: PPUSH
29232: LD_VAR 0 6
29236: PPUSH
29237: CALL_OW 321
29241: PUSH
29242: LD_INT 2
29244: EQUAL
29245: IFFALSE 29255
// viewRange := 16 ;
29247: LD_ADDR_VAR 0 7
29251: PUSH
29252: LD_INT 16
29254: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29255: LD_VAR 0 1
29259: PPUSH
29260: LD_VAR 0 2
29264: PPUSH
29265: LD_VAR 0 3
29269: PPUSH
29270: CALL_OW 297
29274: PUSH
29275: LD_VAR 0 5
29279: GREATER
29280: IFFALSE 29359
// begin ComMoveXY ( unit , x , y ) ;
29282: LD_VAR 0 1
29286: PPUSH
29287: LD_VAR 0 2
29291: PPUSH
29292: LD_VAR 0 3
29296: PPUSH
29297: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29301: LD_INT 35
29303: PPUSH
29304: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29308: LD_VAR 0 1
29312: PPUSH
29313: LD_VAR 0 2
29317: PPUSH
29318: LD_VAR 0 3
29322: PPUSH
29323: CALL 65801 0 3
29327: NOT
29328: IFFALSE 29332
// exit ;
29330: GO 29586
// until GetDistUnitXY ( unit , x , y ) < dist ;
29332: LD_VAR 0 1
29336: PPUSH
29337: LD_VAR 0 2
29341: PPUSH
29342: LD_VAR 0 3
29346: PPUSH
29347: CALL_OW 297
29351: PUSH
29352: LD_VAR 0 5
29356: LESS
29357: IFFALSE 29301
// end ; ComTurnXY ( unit , x , y ) ;
29359: LD_VAR 0 1
29363: PPUSH
29364: LD_VAR 0 2
29368: PPUSH
29369: LD_VAR 0 3
29373: PPUSH
29374: CALL_OW 118
// wait ( 5 ) ;
29378: LD_INT 5
29380: PPUSH
29381: CALL_OW 67
// _d := GetDir ( unit ) ;
29385: LD_ADDR_VAR 0 10
29389: PUSH
29390: LD_VAR 0 1
29394: PPUSH
29395: CALL_OW 254
29399: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29400: LD_ADDR_VAR 0 8
29404: PUSH
29405: LD_VAR 0 1
29409: PPUSH
29410: CALL_OW 250
29414: PPUSH
29415: LD_VAR 0 10
29419: PPUSH
29420: LD_VAR 0 5
29424: PPUSH
29425: CALL_OW 272
29429: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29430: LD_ADDR_VAR 0 9
29434: PUSH
29435: LD_VAR 0 1
29439: PPUSH
29440: CALL_OW 251
29444: PPUSH
29445: LD_VAR 0 10
29449: PPUSH
29450: LD_VAR 0 5
29454: PPUSH
29455: CALL_OW 273
29459: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29460: LD_VAR 0 8
29464: PPUSH
29465: LD_VAR 0 9
29469: PPUSH
29470: CALL_OW 488
29474: NOT
29475: IFFALSE 29479
// exit ;
29477: GO 29586
// ComAnimCustom ( unit , 1 ) ;
29479: LD_VAR 0 1
29483: PPUSH
29484: LD_INT 1
29486: PPUSH
29487: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29491: LD_VAR 0 8
29495: PPUSH
29496: LD_VAR 0 9
29500: PPUSH
29501: LD_VAR 0 6
29505: PPUSH
29506: LD_VAR 0 7
29510: PPUSH
29511: CALL_OW 330
// repeat wait ( 1 ) ;
29515: LD_INT 1
29517: PPUSH
29518: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29522: LD_VAR 0 1
29526: PPUSH
29527: CALL_OW 316
29531: PUSH
29532: LD_VAR 0 1
29536: PPUSH
29537: CALL_OW 314
29541: OR
29542: PUSH
29543: LD_VAR 0 1
29547: PPUSH
29548: CALL_OW 302
29552: NOT
29553: OR
29554: PUSH
29555: LD_VAR 0 1
29559: PPUSH
29560: CALL_OW 301
29564: OR
29565: IFFALSE 29515
// RemoveSeeing ( _x , _y , side ) ;
29567: LD_VAR 0 8
29571: PPUSH
29572: LD_VAR 0 9
29576: PPUSH
29577: LD_VAR 0 6
29581: PPUSH
29582: CALL_OW 331
// end ; end_of_file
29586: LD_VAR 0 4
29590: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29591: LD_INT 0
29593: PPUSH
29594: PPUSH
// if exist_mode then
29595: LD_VAR 0 2
29599: IFFALSE 29624
// unit := CreateCharacter ( prefix & ident ) else
29601: LD_ADDR_VAR 0 5
29605: PUSH
29606: LD_VAR 0 3
29610: PUSH
29611: LD_VAR 0 1
29615: STR
29616: PPUSH
29617: CALL_OW 34
29621: ST_TO_ADDR
29622: GO 29639
// unit := NewCharacter ( ident ) ;
29624: LD_ADDR_VAR 0 5
29628: PUSH
29629: LD_VAR 0 1
29633: PPUSH
29634: CALL_OW 25
29638: ST_TO_ADDR
// result := unit ;
29639: LD_ADDR_VAR 0 4
29643: PUSH
29644: LD_VAR 0 5
29648: ST_TO_ADDR
// end ;
29649: LD_VAR 0 4
29653: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29654: LD_INT 0
29656: PPUSH
29657: PPUSH
// if not side or not nation then
29658: LD_VAR 0 1
29662: NOT
29663: PUSH
29664: LD_VAR 0 2
29668: NOT
29669: OR
29670: IFFALSE 29674
// exit ;
29672: GO 30442
// case nation of nation_american :
29674: LD_VAR 0 2
29678: PUSH
29679: LD_INT 1
29681: DOUBLE
29682: EQUAL
29683: IFTRUE 29687
29685: GO 29901
29687: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29688: LD_ADDR_VAR 0 4
29692: PUSH
29693: LD_INT 35
29695: PUSH
29696: LD_INT 45
29698: PUSH
29699: LD_INT 46
29701: PUSH
29702: LD_INT 47
29704: PUSH
29705: LD_INT 82
29707: PUSH
29708: LD_INT 83
29710: PUSH
29711: LD_INT 84
29713: PUSH
29714: LD_INT 85
29716: PUSH
29717: LD_INT 86
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: LD_INT 2
29725: PUSH
29726: LD_INT 6
29728: PUSH
29729: LD_INT 15
29731: PUSH
29732: LD_INT 16
29734: PUSH
29735: LD_INT 7
29737: PUSH
29738: LD_INT 12
29740: PUSH
29741: LD_INT 13
29743: PUSH
29744: LD_INT 10
29746: PUSH
29747: LD_INT 14
29749: PUSH
29750: LD_INT 20
29752: PUSH
29753: LD_INT 21
29755: PUSH
29756: LD_INT 22
29758: PUSH
29759: LD_INT 25
29761: PUSH
29762: LD_INT 32
29764: PUSH
29765: LD_INT 27
29767: PUSH
29768: LD_INT 36
29770: PUSH
29771: LD_INT 69
29773: PUSH
29774: LD_INT 39
29776: PUSH
29777: LD_INT 34
29779: PUSH
29780: LD_INT 40
29782: PUSH
29783: LD_INT 48
29785: PUSH
29786: LD_INT 49
29788: PUSH
29789: LD_INT 50
29791: PUSH
29792: LD_INT 51
29794: PUSH
29795: LD_INT 52
29797: PUSH
29798: LD_INT 53
29800: PUSH
29801: LD_INT 54
29803: PUSH
29804: LD_INT 55
29806: PUSH
29807: LD_INT 56
29809: PUSH
29810: LD_INT 57
29812: PUSH
29813: LD_INT 58
29815: PUSH
29816: LD_INT 59
29818: PUSH
29819: LD_INT 60
29821: PUSH
29822: LD_INT 61
29824: PUSH
29825: LD_INT 62
29827: PUSH
29828: LD_INT 80
29830: PUSH
29831: LD_INT 82
29833: PUSH
29834: LD_INT 83
29836: PUSH
29837: LD_INT 84
29839: PUSH
29840: LD_INT 85
29842: PUSH
29843: LD_INT 86
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: ST_TO_ADDR
29899: GO 30366
29901: LD_INT 2
29903: DOUBLE
29904: EQUAL
29905: IFTRUE 29909
29907: GO 30135
29909: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29910: LD_ADDR_VAR 0 4
29914: PUSH
29915: LD_INT 35
29917: PUSH
29918: LD_INT 45
29920: PUSH
29921: LD_INT 46
29923: PUSH
29924: LD_INT 47
29926: PUSH
29927: LD_INT 82
29929: PUSH
29930: LD_INT 83
29932: PUSH
29933: LD_INT 84
29935: PUSH
29936: LD_INT 85
29938: PUSH
29939: LD_INT 87
29941: PUSH
29942: LD_INT 70
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: LD_INT 11
29950: PUSH
29951: LD_INT 3
29953: PUSH
29954: LD_INT 4
29956: PUSH
29957: LD_INT 5
29959: PUSH
29960: LD_INT 6
29962: PUSH
29963: LD_INT 15
29965: PUSH
29966: LD_INT 18
29968: PUSH
29969: LD_INT 7
29971: PUSH
29972: LD_INT 17
29974: PUSH
29975: LD_INT 8
29977: PUSH
29978: LD_INT 20
29980: PUSH
29981: LD_INT 21
29983: PUSH
29984: LD_INT 22
29986: PUSH
29987: LD_INT 72
29989: PUSH
29990: LD_INT 26
29992: PUSH
29993: LD_INT 69
29995: PUSH
29996: LD_INT 39
29998: PUSH
29999: LD_INT 40
30001: PUSH
30002: LD_INT 41
30004: PUSH
30005: LD_INT 42
30007: PUSH
30008: LD_INT 43
30010: PUSH
30011: LD_INT 48
30013: PUSH
30014: LD_INT 49
30016: PUSH
30017: LD_INT 50
30019: PUSH
30020: LD_INT 51
30022: PUSH
30023: LD_INT 52
30025: PUSH
30026: LD_INT 53
30028: PUSH
30029: LD_INT 54
30031: PUSH
30032: LD_INT 55
30034: PUSH
30035: LD_INT 56
30037: PUSH
30038: LD_INT 60
30040: PUSH
30041: LD_INT 61
30043: PUSH
30044: LD_INT 62
30046: PUSH
30047: LD_INT 66
30049: PUSH
30050: LD_INT 67
30052: PUSH
30053: LD_INT 68
30055: PUSH
30056: LD_INT 81
30058: PUSH
30059: LD_INT 82
30061: PUSH
30062: LD_INT 83
30064: PUSH
30065: LD_INT 84
30067: PUSH
30068: LD_INT 85
30070: PUSH
30071: LD_INT 87
30073: PUSH
30074: LD_INT 88
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: ST_TO_ADDR
30133: GO 30366
30135: LD_INT 3
30137: DOUBLE
30138: EQUAL
30139: IFTRUE 30143
30141: GO 30365
30143: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30144: LD_ADDR_VAR 0 4
30148: PUSH
30149: LD_INT 46
30151: PUSH
30152: LD_INT 47
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: LD_INT 2
30160: PUSH
30161: LD_INT 82
30163: PUSH
30164: LD_INT 83
30166: PUSH
30167: LD_INT 84
30169: PUSH
30170: LD_INT 85
30172: PUSH
30173: LD_INT 86
30175: PUSH
30176: LD_INT 11
30178: PUSH
30179: LD_INT 9
30181: PUSH
30182: LD_INT 20
30184: PUSH
30185: LD_INT 19
30187: PUSH
30188: LD_INT 21
30190: PUSH
30191: LD_INT 24
30193: PUSH
30194: LD_INT 22
30196: PUSH
30197: LD_INT 25
30199: PUSH
30200: LD_INT 28
30202: PUSH
30203: LD_INT 29
30205: PUSH
30206: LD_INT 30
30208: PUSH
30209: LD_INT 31
30211: PUSH
30212: LD_INT 37
30214: PUSH
30215: LD_INT 38
30217: PUSH
30218: LD_INT 32
30220: PUSH
30221: LD_INT 27
30223: PUSH
30224: LD_INT 33
30226: PUSH
30227: LD_INT 69
30229: PUSH
30230: LD_INT 39
30232: PUSH
30233: LD_INT 34
30235: PUSH
30236: LD_INT 40
30238: PUSH
30239: LD_INT 71
30241: PUSH
30242: LD_INT 23
30244: PUSH
30245: LD_INT 44
30247: PUSH
30248: LD_INT 48
30250: PUSH
30251: LD_INT 49
30253: PUSH
30254: LD_INT 50
30256: PUSH
30257: LD_INT 51
30259: PUSH
30260: LD_INT 52
30262: PUSH
30263: LD_INT 53
30265: PUSH
30266: LD_INT 54
30268: PUSH
30269: LD_INT 55
30271: PUSH
30272: LD_INT 56
30274: PUSH
30275: LD_INT 57
30277: PUSH
30278: LD_INT 58
30280: PUSH
30281: LD_INT 59
30283: PUSH
30284: LD_INT 63
30286: PUSH
30287: LD_INT 64
30289: PUSH
30290: LD_INT 65
30292: PUSH
30293: LD_INT 82
30295: PUSH
30296: LD_INT 83
30298: PUSH
30299: LD_INT 84
30301: PUSH
30302: LD_INT 85
30304: PUSH
30305: LD_INT 86
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: ST_TO_ADDR
30363: GO 30366
30365: POP
// if state > - 1 and state < 3 then
30366: LD_VAR 0 3
30370: PUSH
30371: LD_INT 1
30373: NEG
30374: GREATER
30375: PUSH
30376: LD_VAR 0 3
30380: PUSH
30381: LD_INT 3
30383: LESS
30384: AND
30385: IFFALSE 30442
// for i in result do
30387: LD_ADDR_VAR 0 5
30391: PUSH
30392: LD_VAR 0 4
30396: PUSH
30397: FOR_IN
30398: IFFALSE 30440
// if GetTech ( i , side ) <> state then
30400: LD_VAR 0 5
30404: PPUSH
30405: LD_VAR 0 1
30409: PPUSH
30410: CALL_OW 321
30414: PUSH
30415: LD_VAR 0 3
30419: NONEQUAL
30420: IFFALSE 30438
// result := result diff i ;
30422: LD_ADDR_VAR 0 4
30426: PUSH
30427: LD_VAR 0 4
30431: PUSH
30432: LD_VAR 0 5
30436: DIFF
30437: ST_TO_ADDR
30438: GO 30397
30440: POP
30441: POP
// end ;
30442: LD_VAR 0 4
30446: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30447: LD_INT 0
30449: PPUSH
30450: PPUSH
30451: PPUSH
// result := true ;
30452: LD_ADDR_VAR 0 3
30456: PUSH
30457: LD_INT 1
30459: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30460: LD_ADDR_VAR 0 5
30464: PUSH
30465: LD_VAR 0 2
30469: PPUSH
30470: CALL_OW 480
30474: ST_TO_ADDR
// if not tmp then
30475: LD_VAR 0 5
30479: NOT
30480: IFFALSE 30484
// exit ;
30482: GO 30533
// for i in tmp do
30484: LD_ADDR_VAR 0 4
30488: PUSH
30489: LD_VAR 0 5
30493: PUSH
30494: FOR_IN
30495: IFFALSE 30531
// if GetTech ( i , side ) <> state_researched then
30497: LD_VAR 0 4
30501: PPUSH
30502: LD_VAR 0 1
30506: PPUSH
30507: CALL_OW 321
30511: PUSH
30512: LD_INT 2
30514: NONEQUAL
30515: IFFALSE 30529
// begin result := false ;
30517: LD_ADDR_VAR 0 3
30521: PUSH
30522: LD_INT 0
30524: ST_TO_ADDR
// exit ;
30525: POP
30526: POP
30527: GO 30533
// end ;
30529: GO 30494
30531: POP
30532: POP
// end ;
30533: LD_VAR 0 3
30537: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30538: LD_INT 0
30540: PPUSH
30541: PPUSH
30542: PPUSH
30543: PPUSH
30544: PPUSH
30545: PPUSH
30546: PPUSH
30547: PPUSH
30548: PPUSH
30549: PPUSH
30550: PPUSH
30551: PPUSH
30552: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30553: LD_VAR 0 1
30557: NOT
30558: PUSH
30559: LD_VAR 0 1
30563: PPUSH
30564: CALL_OW 257
30568: PUSH
30569: LD_INT 9
30571: NONEQUAL
30572: OR
30573: IFFALSE 30577
// exit ;
30575: GO 31150
// side := GetSide ( unit ) ;
30577: LD_ADDR_VAR 0 9
30581: PUSH
30582: LD_VAR 0 1
30586: PPUSH
30587: CALL_OW 255
30591: ST_TO_ADDR
// tech_space := tech_spacanom ;
30592: LD_ADDR_VAR 0 12
30596: PUSH
30597: LD_INT 29
30599: ST_TO_ADDR
// tech_time := tech_taurad ;
30600: LD_ADDR_VAR 0 13
30604: PUSH
30605: LD_INT 28
30607: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30608: LD_ADDR_VAR 0 11
30612: PUSH
30613: LD_VAR 0 1
30617: PPUSH
30618: CALL_OW 310
30622: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30623: LD_VAR 0 11
30627: PPUSH
30628: CALL_OW 247
30632: PUSH
30633: LD_INT 2
30635: EQUAL
30636: IFFALSE 30640
// exit ;
30638: GO 31150
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30640: LD_ADDR_VAR 0 8
30644: PUSH
30645: LD_INT 81
30647: PUSH
30648: LD_VAR 0 9
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 3
30659: PUSH
30660: LD_INT 21
30662: PUSH
30663: LD_INT 3
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PPUSH
30678: CALL_OW 69
30682: ST_TO_ADDR
// if not tmp then
30683: LD_VAR 0 8
30687: NOT
30688: IFFALSE 30692
// exit ;
30690: GO 31150
// if in_unit then
30692: LD_VAR 0 11
30696: IFFALSE 30720
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30698: LD_ADDR_VAR 0 10
30702: PUSH
30703: LD_VAR 0 8
30707: PPUSH
30708: LD_VAR 0 11
30712: PPUSH
30713: CALL_OW 74
30717: ST_TO_ADDR
30718: GO 30740
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30720: LD_ADDR_VAR 0 10
30724: PUSH
30725: LD_VAR 0 8
30729: PPUSH
30730: LD_VAR 0 1
30734: PPUSH
30735: CALL_OW 74
30739: ST_TO_ADDR
// if not enemy then
30740: LD_VAR 0 10
30744: NOT
30745: IFFALSE 30749
// exit ;
30747: GO 31150
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30749: LD_VAR 0 11
30753: PUSH
30754: LD_VAR 0 11
30758: PPUSH
30759: LD_VAR 0 10
30763: PPUSH
30764: CALL_OW 296
30768: PUSH
30769: LD_INT 13
30771: GREATER
30772: AND
30773: PUSH
30774: LD_VAR 0 1
30778: PPUSH
30779: LD_VAR 0 10
30783: PPUSH
30784: CALL_OW 296
30788: PUSH
30789: LD_INT 12
30791: GREATER
30792: OR
30793: IFFALSE 30797
// exit ;
30795: GO 31150
// missile := [ 1 ] ;
30797: LD_ADDR_VAR 0 14
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: EMPTY
30806: LIST
30807: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30808: LD_VAR 0 9
30812: PPUSH
30813: LD_VAR 0 12
30817: PPUSH
30818: CALL_OW 325
30822: IFFALSE 30851
// missile := Replace ( missile , missile + 1 , 2 ) ;
30824: LD_ADDR_VAR 0 14
30828: PUSH
30829: LD_VAR 0 14
30833: PPUSH
30834: LD_VAR 0 14
30838: PUSH
30839: LD_INT 1
30841: PLUS
30842: PPUSH
30843: LD_INT 2
30845: PPUSH
30846: CALL_OW 1
30850: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30851: LD_VAR 0 9
30855: PPUSH
30856: LD_VAR 0 13
30860: PPUSH
30861: CALL_OW 325
30865: PUSH
30866: LD_VAR 0 10
30870: PPUSH
30871: CALL_OW 255
30875: PPUSH
30876: LD_VAR 0 13
30880: PPUSH
30881: CALL_OW 325
30885: NOT
30886: AND
30887: IFFALSE 30916
// missile := Replace ( missile , missile + 1 , 3 ) ;
30889: LD_ADDR_VAR 0 14
30893: PUSH
30894: LD_VAR 0 14
30898: PPUSH
30899: LD_VAR 0 14
30903: PUSH
30904: LD_INT 1
30906: PLUS
30907: PPUSH
30908: LD_INT 3
30910: PPUSH
30911: CALL_OW 1
30915: ST_TO_ADDR
// if missile < 2 then
30916: LD_VAR 0 14
30920: PUSH
30921: LD_INT 2
30923: LESS
30924: IFFALSE 30928
// exit ;
30926: GO 31150
// x := GetX ( enemy ) ;
30928: LD_ADDR_VAR 0 4
30932: PUSH
30933: LD_VAR 0 10
30937: PPUSH
30938: CALL_OW 250
30942: ST_TO_ADDR
// y := GetY ( enemy ) ;
30943: LD_ADDR_VAR 0 5
30947: PUSH
30948: LD_VAR 0 10
30952: PPUSH
30953: CALL_OW 251
30957: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30958: LD_ADDR_VAR 0 6
30962: PUSH
30963: LD_VAR 0 4
30967: PUSH
30968: LD_INT 1
30970: NEG
30971: PPUSH
30972: LD_INT 1
30974: PPUSH
30975: CALL_OW 12
30979: PLUS
30980: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30981: LD_ADDR_VAR 0 7
30985: PUSH
30986: LD_VAR 0 5
30990: PUSH
30991: LD_INT 1
30993: NEG
30994: PPUSH
30995: LD_INT 1
30997: PPUSH
30998: CALL_OW 12
31002: PLUS
31003: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31004: LD_VAR 0 6
31008: PPUSH
31009: LD_VAR 0 7
31013: PPUSH
31014: CALL_OW 488
31018: NOT
31019: IFFALSE 31041
// begin _x := x ;
31021: LD_ADDR_VAR 0 6
31025: PUSH
31026: LD_VAR 0 4
31030: ST_TO_ADDR
// _y := y ;
31031: LD_ADDR_VAR 0 7
31035: PUSH
31036: LD_VAR 0 5
31040: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31041: LD_ADDR_VAR 0 3
31045: PUSH
31046: LD_INT 1
31048: PPUSH
31049: LD_VAR 0 14
31053: PPUSH
31054: CALL_OW 12
31058: ST_TO_ADDR
// case i of 1 :
31059: LD_VAR 0 3
31063: PUSH
31064: LD_INT 1
31066: DOUBLE
31067: EQUAL
31068: IFTRUE 31072
31070: GO 31089
31072: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31073: LD_VAR 0 1
31077: PPUSH
31078: LD_VAR 0 10
31082: PPUSH
31083: CALL_OW 115
31087: GO 31150
31089: LD_INT 2
31091: DOUBLE
31092: EQUAL
31093: IFTRUE 31097
31095: GO 31119
31097: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31098: LD_VAR 0 1
31102: PPUSH
31103: LD_VAR 0 6
31107: PPUSH
31108: LD_VAR 0 7
31112: PPUSH
31113: CALL_OW 153
31117: GO 31150
31119: LD_INT 3
31121: DOUBLE
31122: EQUAL
31123: IFTRUE 31127
31125: GO 31149
31127: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31128: LD_VAR 0 1
31132: PPUSH
31133: LD_VAR 0 6
31137: PPUSH
31138: LD_VAR 0 7
31142: PPUSH
31143: CALL_OW 154
31147: GO 31150
31149: POP
// end ;
31150: LD_VAR 0 2
31154: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31155: LD_INT 0
31157: PPUSH
31158: PPUSH
31159: PPUSH
31160: PPUSH
31161: PPUSH
31162: PPUSH
// if not unit or not building then
31163: LD_VAR 0 1
31167: NOT
31168: PUSH
31169: LD_VAR 0 2
31173: NOT
31174: OR
31175: IFFALSE 31179
// exit ;
31177: GO 31337
// x := GetX ( building ) ;
31179: LD_ADDR_VAR 0 5
31183: PUSH
31184: LD_VAR 0 2
31188: PPUSH
31189: CALL_OW 250
31193: ST_TO_ADDR
// y := GetY ( building ) ;
31194: LD_ADDR_VAR 0 6
31198: PUSH
31199: LD_VAR 0 2
31203: PPUSH
31204: CALL_OW 251
31208: ST_TO_ADDR
// for i = 0 to 5 do
31209: LD_ADDR_VAR 0 4
31213: PUSH
31214: DOUBLE
31215: LD_INT 0
31217: DEC
31218: ST_TO_ADDR
31219: LD_INT 5
31221: PUSH
31222: FOR_TO
31223: IFFALSE 31335
// begin _x := ShiftX ( x , i , 3 ) ;
31225: LD_ADDR_VAR 0 7
31229: PUSH
31230: LD_VAR 0 5
31234: PPUSH
31235: LD_VAR 0 4
31239: PPUSH
31240: LD_INT 3
31242: PPUSH
31243: CALL_OW 272
31247: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31248: LD_ADDR_VAR 0 8
31252: PUSH
31253: LD_VAR 0 6
31257: PPUSH
31258: LD_VAR 0 4
31262: PPUSH
31263: LD_INT 3
31265: PPUSH
31266: CALL_OW 273
31270: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31271: LD_VAR 0 7
31275: PPUSH
31276: LD_VAR 0 8
31280: PPUSH
31281: CALL_OW 488
31285: NOT
31286: IFFALSE 31290
// continue ;
31288: GO 31222
// if HexInfo ( _x , _y ) = 0 then
31290: LD_VAR 0 7
31294: PPUSH
31295: LD_VAR 0 8
31299: PPUSH
31300: CALL_OW 428
31304: PUSH
31305: LD_INT 0
31307: EQUAL
31308: IFFALSE 31333
// begin ComMoveXY ( unit , _x , _y ) ;
31310: LD_VAR 0 1
31314: PPUSH
31315: LD_VAR 0 7
31319: PPUSH
31320: LD_VAR 0 8
31324: PPUSH
31325: CALL_OW 111
// exit ;
31329: POP
31330: POP
31331: GO 31337
// end ; end ;
31333: GO 31222
31335: POP
31336: POP
// end ;
31337: LD_VAR 0 3
31341: RET
// export function ScanBase ( side , base_area ) ; begin
31342: LD_INT 0
31344: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31345: LD_ADDR_VAR 0 3
31349: PUSH
31350: LD_VAR 0 2
31354: PPUSH
31355: LD_INT 81
31357: PUSH
31358: LD_VAR 0 1
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PPUSH
31367: CALL_OW 70
31371: ST_TO_ADDR
// end ;
31372: LD_VAR 0 3
31376: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31377: LD_INT 0
31379: PPUSH
31380: PPUSH
31381: PPUSH
31382: PPUSH
// result := false ;
31383: LD_ADDR_VAR 0 2
31387: PUSH
31388: LD_INT 0
31390: ST_TO_ADDR
// side := GetSide ( unit ) ;
31391: LD_ADDR_VAR 0 3
31395: PUSH
31396: LD_VAR 0 1
31400: PPUSH
31401: CALL_OW 255
31405: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31406: LD_ADDR_VAR 0 4
31410: PUSH
31411: LD_VAR 0 1
31415: PPUSH
31416: CALL_OW 248
31420: ST_TO_ADDR
// case nat of 1 :
31421: LD_VAR 0 4
31425: PUSH
31426: LD_INT 1
31428: DOUBLE
31429: EQUAL
31430: IFTRUE 31434
31432: GO 31445
31434: POP
// tech := tech_lassight ; 2 :
31435: LD_ADDR_VAR 0 5
31439: PUSH
31440: LD_INT 12
31442: ST_TO_ADDR
31443: GO 31484
31445: LD_INT 2
31447: DOUBLE
31448: EQUAL
31449: IFTRUE 31453
31451: GO 31464
31453: POP
// tech := tech_mortar ; 3 :
31454: LD_ADDR_VAR 0 5
31458: PUSH
31459: LD_INT 41
31461: ST_TO_ADDR
31462: GO 31484
31464: LD_INT 3
31466: DOUBLE
31467: EQUAL
31468: IFTRUE 31472
31470: GO 31483
31472: POP
// tech := tech_bazooka ; end ;
31473: LD_ADDR_VAR 0 5
31477: PUSH
31478: LD_INT 44
31480: ST_TO_ADDR
31481: GO 31484
31483: POP
// if Researched ( side , tech ) then
31484: LD_VAR 0 3
31488: PPUSH
31489: LD_VAR 0 5
31493: PPUSH
31494: CALL_OW 325
31498: IFFALSE 31525
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31500: LD_ADDR_VAR 0 2
31504: PUSH
31505: LD_INT 5
31507: PUSH
31508: LD_INT 8
31510: PUSH
31511: LD_INT 9
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: PUSH
31519: LD_VAR 0 4
31523: ARRAY
31524: ST_TO_ADDR
// end ;
31525: LD_VAR 0 2
31529: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31530: LD_INT 0
31532: PPUSH
31533: PPUSH
31534: PPUSH
// if not mines then
31535: LD_VAR 0 2
31539: NOT
31540: IFFALSE 31544
// exit ;
31542: GO 31688
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31544: LD_ADDR_VAR 0 5
31548: PUSH
31549: LD_INT 81
31551: PUSH
31552: LD_VAR 0 1
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 3
31563: PUSH
31564: LD_INT 21
31566: PUSH
31567: LD_INT 3
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PPUSH
31582: CALL_OW 69
31586: ST_TO_ADDR
// for i in mines do
31587: LD_ADDR_VAR 0 4
31591: PUSH
31592: LD_VAR 0 2
31596: PUSH
31597: FOR_IN
31598: IFFALSE 31686
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31600: LD_VAR 0 4
31604: PUSH
31605: LD_INT 1
31607: ARRAY
31608: PPUSH
31609: LD_VAR 0 4
31613: PUSH
31614: LD_INT 2
31616: ARRAY
31617: PPUSH
31618: CALL_OW 458
31622: NOT
31623: IFFALSE 31627
// continue ;
31625: GO 31597
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31627: LD_VAR 0 4
31631: PUSH
31632: LD_INT 1
31634: ARRAY
31635: PPUSH
31636: LD_VAR 0 4
31640: PUSH
31641: LD_INT 2
31643: ARRAY
31644: PPUSH
31645: CALL_OW 428
31649: PUSH
31650: LD_VAR 0 5
31654: IN
31655: IFFALSE 31684
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31657: LD_VAR 0 4
31661: PUSH
31662: LD_INT 1
31664: ARRAY
31665: PPUSH
31666: LD_VAR 0 4
31670: PUSH
31671: LD_INT 2
31673: ARRAY
31674: PPUSH
31675: LD_VAR 0 1
31679: PPUSH
31680: CALL_OW 456
// end ;
31684: GO 31597
31686: POP
31687: POP
// end ;
31688: LD_VAR 0 3
31692: RET
// export function Count ( array ) ; var i ; begin
31693: LD_INT 0
31695: PPUSH
31696: PPUSH
// result := 0 ;
31697: LD_ADDR_VAR 0 2
31701: PUSH
31702: LD_INT 0
31704: ST_TO_ADDR
// for i in array do
31705: LD_ADDR_VAR 0 3
31709: PUSH
31710: LD_VAR 0 1
31714: PUSH
31715: FOR_IN
31716: IFFALSE 31740
// if i then
31718: LD_VAR 0 3
31722: IFFALSE 31738
// result := result + 1 ;
31724: LD_ADDR_VAR 0 2
31728: PUSH
31729: LD_VAR 0 2
31733: PUSH
31734: LD_INT 1
31736: PLUS
31737: ST_TO_ADDR
31738: GO 31715
31740: POP
31741: POP
// end ;
31742: LD_VAR 0 2
31746: RET
// export function IsEmpty ( building ) ; begin
31747: LD_INT 0
31749: PPUSH
// if not building then
31750: LD_VAR 0 1
31754: NOT
31755: IFFALSE 31759
// exit ;
31757: GO 31802
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31759: LD_ADDR_VAR 0 2
31763: PUSH
31764: LD_VAR 0 1
31768: PUSH
31769: LD_INT 22
31771: PUSH
31772: LD_VAR 0 1
31776: PPUSH
31777: CALL_OW 255
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 58
31788: PUSH
31789: EMPTY
31790: LIST
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PPUSH
31796: CALL_OW 69
31800: IN
31801: ST_TO_ADDR
// end ;
31802: LD_VAR 0 2
31806: RET
// export function IsNotFull ( building ) ; var places ; begin
31807: LD_INT 0
31809: PPUSH
31810: PPUSH
// if not building then
31811: LD_VAR 0 1
31815: NOT
31816: IFFALSE 31820
// exit ;
31818: GO 31991
// result := false ;
31820: LD_ADDR_VAR 0 2
31824: PUSH
31825: LD_INT 0
31827: ST_TO_ADDR
// places := 0 ;
31828: LD_ADDR_VAR 0 3
31832: PUSH
31833: LD_INT 0
31835: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
31836: LD_VAR 0 1
31840: PPUSH
31841: CALL_OW 266
31845: PUSH
31846: LD_INT 0
31848: DOUBLE
31849: EQUAL
31850: IFTRUE 31908
31852: LD_INT 1
31854: DOUBLE
31855: EQUAL
31856: IFTRUE 31908
31858: LD_INT 6
31860: DOUBLE
31861: EQUAL
31862: IFTRUE 31908
31864: LD_INT 7
31866: DOUBLE
31867: EQUAL
31868: IFTRUE 31908
31870: LD_INT 8
31872: DOUBLE
31873: EQUAL
31874: IFTRUE 31908
31876: LD_INT 4
31878: DOUBLE
31879: EQUAL
31880: IFTRUE 31908
31882: LD_INT 5
31884: DOUBLE
31885: EQUAL
31886: IFTRUE 31908
31888: LD_INT 2
31890: DOUBLE
31891: EQUAL
31892: IFTRUE 31908
31894: LD_INT 3
31896: DOUBLE
31897: EQUAL
31898: IFTRUE 31908
31900: LD_INT 35
31902: DOUBLE
31903: EQUAL
31904: IFTRUE 31908
31906: GO 31919
31908: POP
// places := 6 ; b_bunker , b_breastwork :
31909: LD_ADDR_VAR 0 3
31913: PUSH
31914: LD_INT 6
31916: ST_TO_ADDR
31917: GO 31964
31919: LD_INT 32
31921: DOUBLE
31922: EQUAL
31923: IFTRUE 31933
31925: LD_INT 31
31927: DOUBLE
31928: EQUAL
31929: IFTRUE 31933
31931: GO 31944
31933: POP
// places := 1 ; b_control_tower :
31934: LD_ADDR_VAR 0 3
31938: PUSH
31939: LD_INT 1
31941: ST_TO_ADDR
31942: GO 31964
31944: LD_INT 36
31946: DOUBLE
31947: EQUAL
31948: IFTRUE 31952
31950: GO 31963
31952: POP
// places := 3 ; end ;
31953: LD_ADDR_VAR 0 3
31957: PUSH
31958: LD_INT 3
31960: ST_TO_ADDR
31961: GO 31964
31963: POP
// if places then
31964: LD_VAR 0 3
31968: IFFALSE 31991
// result := UnitsInside ( building ) < places ;
31970: LD_ADDR_VAR 0 2
31974: PUSH
31975: LD_VAR 0 1
31979: PPUSH
31980: CALL_OW 313
31984: PUSH
31985: LD_VAR 0 3
31989: LESS
31990: ST_TO_ADDR
// end ;
31991: LD_VAR 0 2
31995: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31996: LD_INT 0
31998: PPUSH
31999: PPUSH
32000: PPUSH
32001: PPUSH
// tmp := [ ] ;
32002: LD_ADDR_VAR 0 3
32006: PUSH
32007: EMPTY
32008: ST_TO_ADDR
// list := [ ] ;
32009: LD_ADDR_VAR 0 5
32013: PUSH
32014: EMPTY
32015: ST_TO_ADDR
// for i = 16 to 25 do
32016: LD_ADDR_VAR 0 4
32020: PUSH
32021: DOUBLE
32022: LD_INT 16
32024: DEC
32025: ST_TO_ADDR
32026: LD_INT 25
32028: PUSH
32029: FOR_TO
32030: IFFALSE 32103
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32032: LD_ADDR_VAR 0 3
32036: PUSH
32037: LD_VAR 0 3
32041: PUSH
32042: LD_INT 22
32044: PUSH
32045: LD_VAR 0 1
32049: PPUSH
32050: CALL_OW 255
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 91
32061: PUSH
32062: LD_VAR 0 1
32066: PUSH
32067: LD_INT 6
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 30
32077: PUSH
32078: LD_VAR 0 4
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: LIST
32091: PUSH
32092: EMPTY
32093: LIST
32094: PPUSH
32095: CALL_OW 69
32099: ADD
32100: ST_TO_ADDR
32101: GO 32029
32103: POP
32104: POP
// for i = 1 to tmp do
32105: LD_ADDR_VAR 0 4
32109: PUSH
32110: DOUBLE
32111: LD_INT 1
32113: DEC
32114: ST_TO_ADDR
32115: LD_VAR 0 3
32119: PUSH
32120: FOR_TO
32121: IFFALSE 32209
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32123: LD_ADDR_VAR 0 5
32127: PUSH
32128: LD_VAR 0 5
32132: PUSH
32133: LD_VAR 0 3
32137: PUSH
32138: LD_VAR 0 4
32142: ARRAY
32143: PPUSH
32144: CALL_OW 266
32148: PUSH
32149: LD_VAR 0 3
32153: PUSH
32154: LD_VAR 0 4
32158: ARRAY
32159: PPUSH
32160: CALL_OW 250
32164: PUSH
32165: LD_VAR 0 3
32169: PUSH
32170: LD_VAR 0 4
32174: ARRAY
32175: PPUSH
32176: CALL_OW 251
32180: PUSH
32181: LD_VAR 0 3
32185: PUSH
32186: LD_VAR 0 4
32190: ARRAY
32191: PPUSH
32192: CALL_OW 254
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: PUSH
32203: EMPTY
32204: LIST
32205: ADD
32206: ST_TO_ADDR
32207: GO 32120
32209: POP
32210: POP
// result := list ;
32211: LD_ADDR_VAR 0 2
32215: PUSH
32216: LD_VAR 0 5
32220: ST_TO_ADDR
// end ;
32221: LD_VAR 0 2
32225: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32226: LD_INT 0
32228: PPUSH
32229: PPUSH
32230: PPUSH
32231: PPUSH
32232: PPUSH
32233: PPUSH
32234: PPUSH
// if not factory then
32235: LD_VAR 0 1
32239: NOT
32240: IFFALSE 32244
// exit ;
32242: GO 32837
// if control = control_apeman then
32244: LD_VAR 0 4
32248: PUSH
32249: LD_INT 5
32251: EQUAL
32252: IFFALSE 32361
// begin tmp := UnitsInside ( factory ) ;
32254: LD_ADDR_VAR 0 8
32258: PUSH
32259: LD_VAR 0 1
32263: PPUSH
32264: CALL_OW 313
32268: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32269: LD_VAR 0 8
32273: PPUSH
32274: LD_INT 25
32276: PUSH
32277: LD_INT 12
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PPUSH
32284: CALL_OW 72
32288: NOT
32289: IFFALSE 32299
// control := control_manual ;
32291: LD_ADDR_VAR 0 4
32295: PUSH
32296: LD_INT 1
32298: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32299: LD_ADDR_VAR 0 8
32303: PUSH
32304: LD_VAR 0 1
32308: PPUSH
32309: CALL 31996 0 1
32313: ST_TO_ADDR
// if tmp then
32314: LD_VAR 0 8
32318: IFFALSE 32361
// begin for i in tmp do
32320: LD_ADDR_VAR 0 7
32324: PUSH
32325: LD_VAR 0 8
32329: PUSH
32330: FOR_IN
32331: IFFALSE 32359
// if i [ 1 ] = b_ext_radio then
32333: LD_VAR 0 7
32337: PUSH
32338: LD_INT 1
32340: ARRAY
32341: PUSH
32342: LD_INT 22
32344: EQUAL
32345: IFFALSE 32357
// begin control := control_remote ;
32347: LD_ADDR_VAR 0 4
32351: PUSH
32352: LD_INT 2
32354: ST_TO_ADDR
// break ;
32355: GO 32359
// end ;
32357: GO 32330
32359: POP
32360: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32361: LD_VAR 0 1
32365: PPUSH
32366: LD_VAR 0 2
32370: PPUSH
32371: LD_VAR 0 3
32375: PPUSH
32376: LD_VAR 0 4
32380: PPUSH
32381: LD_VAR 0 5
32385: PPUSH
32386: CALL_OW 448
32390: IFFALSE 32425
// begin result := [ chassis , engine , control , weapon ] ;
32392: LD_ADDR_VAR 0 6
32396: PUSH
32397: LD_VAR 0 2
32401: PUSH
32402: LD_VAR 0 3
32406: PUSH
32407: LD_VAR 0 4
32411: PUSH
32412: LD_VAR 0 5
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: ST_TO_ADDR
// exit ;
32423: GO 32837
// end ; _chassis := AvailableChassisList ( factory ) ;
32425: LD_ADDR_VAR 0 9
32429: PUSH
32430: LD_VAR 0 1
32434: PPUSH
32435: CALL_OW 475
32439: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32440: LD_ADDR_VAR 0 11
32444: PUSH
32445: LD_VAR 0 1
32449: PPUSH
32450: CALL_OW 476
32454: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32455: LD_ADDR_VAR 0 12
32459: PUSH
32460: LD_VAR 0 1
32464: PPUSH
32465: CALL_OW 477
32469: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32470: LD_ADDR_VAR 0 10
32474: PUSH
32475: LD_VAR 0 1
32479: PPUSH
32480: CALL_OW 478
32484: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32485: LD_VAR 0 9
32489: NOT
32490: PUSH
32491: LD_VAR 0 11
32495: NOT
32496: OR
32497: PUSH
32498: LD_VAR 0 12
32502: NOT
32503: OR
32504: PUSH
32505: LD_VAR 0 10
32509: NOT
32510: OR
32511: IFFALSE 32546
// begin result := [ chassis , engine , control , weapon ] ;
32513: LD_ADDR_VAR 0 6
32517: PUSH
32518: LD_VAR 0 2
32522: PUSH
32523: LD_VAR 0 3
32527: PUSH
32528: LD_VAR 0 4
32532: PUSH
32533: LD_VAR 0 5
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: ST_TO_ADDR
// exit ;
32544: GO 32837
// end ; if not chassis in _chassis then
32546: LD_VAR 0 2
32550: PUSH
32551: LD_VAR 0 9
32555: IN
32556: NOT
32557: IFFALSE 32583
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32559: LD_ADDR_VAR 0 2
32563: PUSH
32564: LD_VAR 0 9
32568: PUSH
32569: LD_INT 1
32571: PPUSH
32572: LD_VAR 0 9
32576: PPUSH
32577: CALL_OW 12
32581: ARRAY
32582: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32583: LD_VAR 0 2
32587: PPUSH
32588: LD_VAR 0 3
32592: PPUSH
32593: CALL 32842 0 2
32597: NOT
32598: IFFALSE 32657
// repeat engine := _engine [ 1 ] ;
32600: LD_ADDR_VAR 0 3
32604: PUSH
32605: LD_VAR 0 11
32609: PUSH
32610: LD_INT 1
32612: ARRAY
32613: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32614: LD_ADDR_VAR 0 11
32618: PUSH
32619: LD_VAR 0 11
32623: PPUSH
32624: LD_INT 1
32626: PPUSH
32627: CALL_OW 3
32631: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32632: LD_VAR 0 2
32636: PPUSH
32637: LD_VAR 0 3
32641: PPUSH
32642: CALL 32842 0 2
32646: PUSH
32647: LD_VAR 0 11
32651: PUSH
32652: EMPTY
32653: EQUAL
32654: OR
32655: IFFALSE 32600
// if not control in _control then
32657: LD_VAR 0 4
32661: PUSH
32662: LD_VAR 0 12
32666: IN
32667: NOT
32668: IFFALSE 32694
// control := _control [ rand ( 1 , _control ) ] ;
32670: LD_ADDR_VAR 0 4
32674: PUSH
32675: LD_VAR 0 12
32679: PUSH
32680: LD_INT 1
32682: PPUSH
32683: LD_VAR 0 12
32687: PPUSH
32688: CALL_OW 12
32692: ARRAY
32693: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32694: LD_VAR 0 2
32698: PPUSH
32699: LD_VAR 0 5
32703: PPUSH
32704: CALL 33062 0 2
32708: NOT
32709: IFFALSE 32768
// repeat weapon := _weapon [ 1 ] ;
32711: LD_ADDR_VAR 0 5
32715: PUSH
32716: LD_VAR 0 10
32720: PUSH
32721: LD_INT 1
32723: ARRAY
32724: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32725: LD_ADDR_VAR 0 10
32729: PUSH
32730: LD_VAR 0 10
32734: PPUSH
32735: LD_INT 1
32737: PPUSH
32738: CALL_OW 3
32742: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32743: LD_VAR 0 2
32747: PPUSH
32748: LD_VAR 0 5
32752: PPUSH
32753: CALL 33062 0 2
32757: PUSH
32758: LD_VAR 0 10
32762: PUSH
32763: EMPTY
32764: EQUAL
32765: OR
32766: IFFALSE 32711
// result := [ ] ;
32768: LD_ADDR_VAR 0 6
32772: PUSH
32773: EMPTY
32774: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32775: LD_VAR 0 1
32779: PPUSH
32780: LD_VAR 0 2
32784: PPUSH
32785: LD_VAR 0 3
32789: PPUSH
32790: LD_VAR 0 4
32794: PPUSH
32795: LD_VAR 0 5
32799: PPUSH
32800: CALL_OW 448
32804: IFFALSE 32837
// result := [ chassis , engine , control , weapon ] ;
32806: LD_ADDR_VAR 0 6
32810: PUSH
32811: LD_VAR 0 2
32815: PUSH
32816: LD_VAR 0 3
32820: PUSH
32821: LD_VAR 0 4
32825: PUSH
32826: LD_VAR 0 5
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: ST_TO_ADDR
// end ;
32837: LD_VAR 0 6
32841: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32842: LD_INT 0
32844: PPUSH
// if not chassis or not engine then
32845: LD_VAR 0 1
32849: NOT
32850: PUSH
32851: LD_VAR 0 2
32855: NOT
32856: OR
32857: IFFALSE 32861
// exit ;
32859: GO 33057
// case engine of engine_solar :
32861: LD_VAR 0 2
32865: PUSH
32866: LD_INT 2
32868: DOUBLE
32869: EQUAL
32870: IFTRUE 32874
32872: GO 32912
32874: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32875: LD_ADDR_VAR 0 3
32879: PUSH
32880: LD_INT 11
32882: PUSH
32883: LD_INT 12
32885: PUSH
32886: LD_INT 13
32888: PUSH
32889: LD_INT 14
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: LD_INT 2
32897: PUSH
32898: LD_INT 3
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: ST_TO_ADDR
32910: GO 33041
32912: LD_INT 1
32914: DOUBLE
32915: EQUAL
32916: IFTRUE 32920
32918: GO 32982
32920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32921: LD_ADDR_VAR 0 3
32925: PUSH
32926: LD_INT 11
32928: PUSH
32929: LD_INT 12
32931: PUSH
32932: LD_INT 13
32934: PUSH
32935: LD_INT 14
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: LD_INT 2
32943: PUSH
32944: LD_INT 3
32946: PUSH
32947: LD_INT 4
32949: PUSH
32950: LD_INT 5
32952: PUSH
32953: LD_INT 21
32955: PUSH
32956: LD_INT 23
32958: PUSH
32959: LD_INT 22
32961: PUSH
32962: LD_INT 24
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: ST_TO_ADDR
32980: GO 33041
32982: LD_INT 3
32984: DOUBLE
32985: EQUAL
32986: IFTRUE 32990
32988: GO 33040
32990: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32991: LD_ADDR_VAR 0 3
32995: PUSH
32996: LD_INT 13
32998: PUSH
32999: LD_INT 14
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: LD_INT 3
33007: PUSH
33008: LD_INT 4
33010: PUSH
33011: LD_INT 5
33013: PUSH
33014: LD_INT 21
33016: PUSH
33017: LD_INT 22
33019: PUSH
33020: LD_INT 23
33022: PUSH
33023: LD_INT 24
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: ST_TO_ADDR
33038: GO 33041
33040: POP
// result := ( chassis in result ) ;
33041: LD_ADDR_VAR 0 3
33045: PUSH
33046: LD_VAR 0 1
33050: PUSH
33051: LD_VAR 0 3
33055: IN
33056: ST_TO_ADDR
// end ;
33057: LD_VAR 0 3
33061: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33062: LD_INT 0
33064: PPUSH
// if not chassis or not weapon then
33065: LD_VAR 0 1
33069: NOT
33070: PUSH
33071: LD_VAR 0 2
33075: NOT
33076: OR
33077: IFFALSE 33081
// exit ;
33079: GO 34143
// case weapon of us_machine_gun :
33081: LD_VAR 0 2
33085: PUSH
33086: LD_INT 2
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33094
33092: GO 33124
33094: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33095: LD_ADDR_VAR 0 3
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: LD_INT 2
33105: PUSH
33106: LD_INT 3
33108: PUSH
33109: LD_INT 4
33111: PUSH
33112: LD_INT 5
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: ST_TO_ADDR
33122: GO 34127
33124: LD_INT 3
33126: DOUBLE
33127: EQUAL
33128: IFTRUE 33132
33130: GO 33162
33132: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33133: LD_ADDR_VAR 0 3
33137: PUSH
33138: LD_INT 1
33140: PUSH
33141: LD_INT 2
33143: PUSH
33144: LD_INT 3
33146: PUSH
33147: LD_INT 4
33149: PUSH
33150: LD_INT 5
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: ST_TO_ADDR
33160: GO 34127
33162: LD_INT 11
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33170
33168: GO 33200
33170: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33171: LD_ADDR_VAR 0 3
33175: PUSH
33176: LD_INT 1
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 3
33184: PUSH
33185: LD_INT 4
33187: PUSH
33188: LD_INT 5
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: ST_TO_ADDR
33198: GO 34127
33200: LD_INT 4
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33234
33208: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33209: LD_ADDR_VAR 0 3
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: LD_INT 3
33219: PUSH
33220: LD_INT 4
33222: PUSH
33223: LD_INT 5
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: ST_TO_ADDR
33232: GO 34127
33234: LD_INT 5
33236: DOUBLE
33237: EQUAL
33238: IFTRUE 33242
33240: GO 33268
33242: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33243: LD_ADDR_VAR 0 3
33247: PUSH
33248: LD_INT 2
33250: PUSH
33251: LD_INT 3
33253: PUSH
33254: LD_INT 4
33256: PUSH
33257: LD_INT 5
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: ST_TO_ADDR
33266: GO 34127
33268: LD_INT 9
33270: DOUBLE
33271: EQUAL
33272: IFTRUE 33276
33274: GO 33302
33276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33277: LD_ADDR_VAR 0 3
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: LD_INT 3
33287: PUSH
33288: LD_INT 4
33290: PUSH
33291: LD_INT 5
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: ST_TO_ADDR
33300: GO 34127
33302: LD_INT 7
33304: DOUBLE
33305: EQUAL
33306: IFTRUE 33310
33308: GO 33336
33310: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33311: LD_ADDR_VAR 0 3
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: LD_INT 4
33324: PUSH
33325: LD_INT 5
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: ST_TO_ADDR
33334: GO 34127
33336: LD_INT 12
33338: DOUBLE
33339: EQUAL
33340: IFTRUE 33344
33342: GO 33370
33344: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33345: LD_ADDR_VAR 0 3
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: LD_INT 3
33355: PUSH
33356: LD_INT 4
33358: PUSH
33359: LD_INT 5
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: ST_TO_ADDR
33368: GO 34127
33370: LD_INT 13
33372: DOUBLE
33373: EQUAL
33374: IFTRUE 33378
33376: GO 33404
33378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33379: LD_ADDR_VAR 0 3
33383: PUSH
33384: LD_INT 2
33386: PUSH
33387: LD_INT 3
33389: PUSH
33390: LD_INT 4
33392: PUSH
33393: LD_INT 5
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: ST_TO_ADDR
33402: GO 34127
33404: LD_INT 14
33406: DOUBLE
33407: EQUAL
33408: IFTRUE 33412
33410: GO 33430
33412: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33413: LD_ADDR_VAR 0 3
33417: PUSH
33418: LD_INT 4
33420: PUSH
33421: LD_INT 5
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: ST_TO_ADDR
33428: GO 34127
33430: LD_INT 6
33432: DOUBLE
33433: EQUAL
33434: IFTRUE 33438
33436: GO 33456
33438: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33439: LD_ADDR_VAR 0 3
33443: PUSH
33444: LD_INT 4
33446: PUSH
33447: LD_INT 5
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: ST_TO_ADDR
33454: GO 34127
33456: LD_INT 10
33458: DOUBLE
33459: EQUAL
33460: IFTRUE 33464
33462: GO 33482
33464: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33465: LD_ADDR_VAR 0 3
33469: PUSH
33470: LD_INT 4
33472: PUSH
33473: LD_INT 5
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: ST_TO_ADDR
33480: GO 34127
33482: LD_INT 22
33484: DOUBLE
33485: EQUAL
33486: IFTRUE 33490
33488: GO 33516
33490: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33491: LD_ADDR_VAR 0 3
33495: PUSH
33496: LD_INT 11
33498: PUSH
33499: LD_INT 12
33501: PUSH
33502: LD_INT 13
33504: PUSH
33505: LD_INT 14
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: ST_TO_ADDR
33514: GO 34127
33516: LD_INT 23
33518: DOUBLE
33519: EQUAL
33520: IFTRUE 33524
33522: GO 33550
33524: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33525: LD_ADDR_VAR 0 3
33529: PUSH
33530: LD_INT 11
33532: PUSH
33533: LD_INT 12
33535: PUSH
33536: LD_INT 13
33538: PUSH
33539: LD_INT 14
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: ST_TO_ADDR
33548: GO 34127
33550: LD_INT 24
33552: DOUBLE
33553: EQUAL
33554: IFTRUE 33558
33556: GO 33584
33558: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33559: LD_ADDR_VAR 0 3
33563: PUSH
33564: LD_INT 11
33566: PUSH
33567: LD_INT 12
33569: PUSH
33570: LD_INT 13
33572: PUSH
33573: LD_INT 14
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: ST_TO_ADDR
33582: GO 34127
33584: LD_INT 30
33586: DOUBLE
33587: EQUAL
33588: IFTRUE 33592
33590: GO 33618
33592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33593: LD_ADDR_VAR 0 3
33597: PUSH
33598: LD_INT 11
33600: PUSH
33601: LD_INT 12
33603: PUSH
33604: LD_INT 13
33606: PUSH
33607: LD_INT 14
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: ST_TO_ADDR
33616: GO 34127
33618: LD_INT 25
33620: DOUBLE
33621: EQUAL
33622: IFTRUE 33626
33624: GO 33644
33626: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33627: LD_ADDR_VAR 0 3
33631: PUSH
33632: LD_INT 13
33634: PUSH
33635: LD_INT 14
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: ST_TO_ADDR
33642: GO 34127
33644: LD_INT 27
33646: DOUBLE
33647: EQUAL
33648: IFTRUE 33652
33650: GO 33670
33652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33653: LD_ADDR_VAR 0 3
33657: PUSH
33658: LD_INT 13
33660: PUSH
33661: LD_INT 14
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: ST_TO_ADDR
33668: GO 34127
33670: LD_EXP 30
33674: DOUBLE
33675: EQUAL
33676: IFTRUE 33680
33678: GO 33706
33680: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33681: LD_ADDR_VAR 0 3
33685: PUSH
33686: LD_INT 11
33688: PUSH
33689: LD_INT 12
33691: PUSH
33692: LD_INT 13
33694: PUSH
33695: LD_INT 14
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: ST_TO_ADDR
33704: GO 34127
33706: LD_INT 28
33708: DOUBLE
33709: EQUAL
33710: IFTRUE 33714
33712: GO 33732
33714: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33715: LD_ADDR_VAR 0 3
33719: PUSH
33720: LD_INT 13
33722: PUSH
33723: LD_INT 14
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: ST_TO_ADDR
33730: GO 34127
33732: LD_INT 29
33734: DOUBLE
33735: EQUAL
33736: IFTRUE 33740
33738: GO 33758
33740: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33741: LD_ADDR_VAR 0 3
33745: PUSH
33746: LD_INT 13
33748: PUSH
33749: LD_INT 14
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: ST_TO_ADDR
33756: GO 34127
33758: LD_INT 31
33760: DOUBLE
33761: EQUAL
33762: IFTRUE 33766
33764: GO 33784
33766: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33767: LD_ADDR_VAR 0 3
33771: PUSH
33772: LD_INT 13
33774: PUSH
33775: LD_INT 14
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: ST_TO_ADDR
33782: GO 34127
33784: LD_INT 26
33786: DOUBLE
33787: EQUAL
33788: IFTRUE 33792
33790: GO 33810
33792: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33793: LD_ADDR_VAR 0 3
33797: PUSH
33798: LD_INT 13
33800: PUSH
33801: LD_INT 14
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: ST_TO_ADDR
33808: GO 34127
33810: LD_INT 42
33812: DOUBLE
33813: EQUAL
33814: IFTRUE 33818
33816: GO 33844
33818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33819: LD_ADDR_VAR 0 3
33823: PUSH
33824: LD_INT 21
33826: PUSH
33827: LD_INT 22
33829: PUSH
33830: LD_INT 23
33832: PUSH
33833: LD_INT 24
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: ST_TO_ADDR
33842: GO 34127
33844: LD_INT 43
33846: DOUBLE
33847: EQUAL
33848: IFTRUE 33852
33850: GO 33878
33852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33853: LD_ADDR_VAR 0 3
33857: PUSH
33858: LD_INT 21
33860: PUSH
33861: LD_INT 22
33863: PUSH
33864: LD_INT 23
33866: PUSH
33867: LD_INT 24
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: ST_TO_ADDR
33876: GO 34127
33878: LD_INT 44
33880: DOUBLE
33881: EQUAL
33882: IFTRUE 33886
33884: GO 33912
33886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33887: LD_ADDR_VAR 0 3
33891: PUSH
33892: LD_INT 21
33894: PUSH
33895: LD_INT 22
33897: PUSH
33898: LD_INT 23
33900: PUSH
33901: LD_INT 24
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: ST_TO_ADDR
33910: GO 34127
33912: LD_INT 45
33914: DOUBLE
33915: EQUAL
33916: IFTRUE 33920
33918: GO 33946
33920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33921: LD_ADDR_VAR 0 3
33925: PUSH
33926: LD_INT 21
33928: PUSH
33929: LD_INT 22
33931: PUSH
33932: LD_INT 23
33934: PUSH
33935: LD_INT 24
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: ST_TO_ADDR
33944: GO 34127
33946: LD_INT 49
33948: DOUBLE
33949: EQUAL
33950: IFTRUE 33954
33952: GO 33980
33954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33955: LD_ADDR_VAR 0 3
33959: PUSH
33960: LD_INT 21
33962: PUSH
33963: LD_INT 22
33965: PUSH
33966: LD_INT 23
33968: PUSH
33969: LD_INT 24
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: ST_TO_ADDR
33978: GO 34127
33980: LD_INT 51
33982: DOUBLE
33983: EQUAL
33984: IFTRUE 33988
33986: GO 34014
33988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33989: LD_ADDR_VAR 0 3
33993: PUSH
33994: LD_INT 21
33996: PUSH
33997: LD_INT 22
33999: PUSH
34000: LD_INT 23
34002: PUSH
34003: LD_INT 24
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: ST_TO_ADDR
34012: GO 34127
34014: LD_INT 52
34016: DOUBLE
34017: EQUAL
34018: IFTRUE 34022
34020: GO 34048
34022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34023: LD_ADDR_VAR 0 3
34027: PUSH
34028: LD_INT 21
34030: PUSH
34031: LD_INT 22
34033: PUSH
34034: LD_INT 23
34036: PUSH
34037: LD_INT 24
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: ST_TO_ADDR
34046: GO 34127
34048: LD_INT 53
34050: DOUBLE
34051: EQUAL
34052: IFTRUE 34056
34054: GO 34074
34056: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34057: LD_ADDR_VAR 0 3
34061: PUSH
34062: LD_INT 23
34064: PUSH
34065: LD_INT 24
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: ST_TO_ADDR
34072: GO 34127
34074: LD_INT 46
34076: DOUBLE
34077: EQUAL
34078: IFTRUE 34082
34080: GO 34100
34082: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34083: LD_ADDR_VAR 0 3
34087: PUSH
34088: LD_INT 23
34090: PUSH
34091: LD_INT 24
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: ST_TO_ADDR
34098: GO 34127
34100: LD_INT 47
34102: DOUBLE
34103: EQUAL
34104: IFTRUE 34108
34106: GO 34126
34108: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34109: LD_ADDR_VAR 0 3
34113: PUSH
34114: LD_INT 23
34116: PUSH
34117: LD_INT 24
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: ST_TO_ADDR
34124: GO 34127
34126: POP
// result := ( chassis in result ) ;
34127: LD_ADDR_VAR 0 3
34131: PUSH
34132: LD_VAR 0 1
34136: PUSH
34137: LD_VAR 0 3
34141: IN
34142: ST_TO_ADDR
// end ;
34143: LD_VAR 0 3
34147: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34148: LD_INT 0
34150: PPUSH
34151: PPUSH
34152: PPUSH
34153: PPUSH
34154: PPUSH
34155: PPUSH
34156: PPUSH
// result := array ;
34157: LD_ADDR_VAR 0 5
34161: PUSH
34162: LD_VAR 0 1
34166: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34167: LD_VAR 0 1
34171: NOT
34172: PUSH
34173: LD_VAR 0 2
34177: NOT
34178: OR
34179: PUSH
34180: LD_VAR 0 3
34184: NOT
34185: OR
34186: PUSH
34187: LD_VAR 0 2
34191: PUSH
34192: LD_VAR 0 1
34196: GREATER
34197: OR
34198: PUSH
34199: LD_VAR 0 3
34203: PUSH
34204: LD_VAR 0 1
34208: GREATER
34209: OR
34210: IFFALSE 34214
// exit ;
34212: GO 34510
// if direction then
34214: LD_VAR 0 4
34218: IFFALSE 34282
// begin d := 1 ;
34220: LD_ADDR_VAR 0 9
34224: PUSH
34225: LD_INT 1
34227: ST_TO_ADDR
// if i_from > i_to then
34228: LD_VAR 0 2
34232: PUSH
34233: LD_VAR 0 3
34237: GREATER
34238: IFFALSE 34264
// length := ( array - i_from ) + i_to else
34240: LD_ADDR_VAR 0 11
34244: PUSH
34245: LD_VAR 0 1
34249: PUSH
34250: LD_VAR 0 2
34254: MINUS
34255: PUSH
34256: LD_VAR 0 3
34260: PLUS
34261: ST_TO_ADDR
34262: GO 34280
// length := i_to - i_from ;
34264: LD_ADDR_VAR 0 11
34268: PUSH
34269: LD_VAR 0 3
34273: PUSH
34274: LD_VAR 0 2
34278: MINUS
34279: ST_TO_ADDR
// end else
34280: GO 34343
// begin d := - 1 ;
34282: LD_ADDR_VAR 0 9
34286: PUSH
34287: LD_INT 1
34289: NEG
34290: ST_TO_ADDR
// if i_from > i_to then
34291: LD_VAR 0 2
34295: PUSH
34296: LD_VAR 0 3
34300: GREATER
34301: IFFALSE 34321
// length := i_from - i_to else
34303: LD_ADDR_VAR 0 11
34307: PUSH
34308: LD_VAR 0 2
34312: PUSH
34313: LD_VAR 0 3
34317: MINUS
34318: ST_TO_ADDR
34319: GO 34343
// length := ( array - i_to ) + i_from ;
34321: LD_ADDR_VAR 0 11
34325: PUSH
34326: LD_VAR 0 1
34330: PUSH
34331: LD_VAR 0 3
34335: MINUS
34336: PUSH
34337: LD_VAR 0 2
34341: PLUS
34342: ST_TO_ADDR
// end ; if not length then
34343: LD_VAR 0 11
34347: NOT
34348: IFFALSE 34352
// exit ;
34350: GO 34510
// tmp := array ;
34352: LD_ADDR_VAR 0 10
34356: PUSH
34357: LD_VAR 0 1
34361: ST_TO_ADDR
// for i = 1 to length do
34362: LD_ADDR_VAR 0 6
34366: PUSH
34367: DOUBLE
34368: LD_INT 1
34370: DEC
34371: ST_TO_ADDR
34372: LD_VAR 0 11
34376: PUSH
34377: FOR_TO
34378: IFFALSE 34498
// begin for j = 1 to array do
34380: LD_ADDR_VAR 0 7
34384: PUSH
34385: DOUBLE
34386: LD_INT 1
34388: DEC
34389: ST_TO_ADDR
34390: LD_VAR 0 1
34394: PUSH
34395: FOR_TO
34396: IFFALSE 34484
// begin k := j + d ;
34398: LD_ADDR_VAR 0 8
34402: PUSH
34403: LD_VAR 0 7
34407: PUSH
34408: LD_VAR 0 9
34412: PLUS
34413: ST_TO_ADDR
// if k > array then
34414: LD_VAR 0 8
34418: PUSH
34419: LD_VAR 0 1
34423: GREATER
34424: IFFALSE 34434
// k := 1 ;
34426: LD_ADDR_VAR 0 8
34430: PUSH
34431: LD_INT 1
34433: ST_TO_ADDR
// if not k then
34434: LD_VAR 0 8
34438: NOT
34439: IFFALSE 34451
// k := array ;
34441: LD_ADDR_VAR 0 8
34445: PUSH
34446: LD_VAR 0 1
34450: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34451: LD_ADDR_VAR 0 10
34455: PUSH
34456: LD_VAR 0 10
34460: PPUSH
34461: LD_VAR 0 8
34465: PPUSH
34466: LD_VAR 0 1
34470: PUSH
34471: LD_VAR 0 7
34475: ARRAY
34476: PPUSH
34477: CALL_OW 1
34481: ST_TO_ADDR
// end ;
34482: GO 34395
34484: POP
34485: POP
// array := tmp ;
34486: LD_ADDR_VAR 0 1
34490: PUSH
34491: LD_VAR 0 10
34495: ST_TO_ADDR
// end ;
34496: GO 34377
34498: POP
34499: POP
// result := array ;
34500: LD_ADDR_VAR 0 5
34504: PUSH
34505: LD_VAR 0 1
34509: ST_TO_ADDR
// end ;
34510: LD_VAR 0 5
34514: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34515: LD_INT 0
34517: PPUSH
34518: PPUSH
// result := 0 ;
34519: LD_ADDR_VAR 0 3
34523: PUSH
34524: LD_INT 0
34526: ST_TO_ADDR
// if not array or not value in array then
34527: LD_VAR 0 1
34531: NOT
34532: PUSH
34533: LD_VAR 0 2
34537: PUSH
34538: LD_VAR 0 1
34542: IN
34543: NOT
34544: OR
34545: IFFALSE 34549
// exit ;
34547: GO 34603
// for i = 1 to array do
34549: LD_ADDR_VAR 0 4
34553: PUSH
34554: DOUBLE
34555: LD_INT 1
34557: DEC
34558: ST_TO_ADDR
34559: LD_VAR 0 1
34563: PUSH
34564: FOR_TO
34565: IFFALSE 34601
// if value = array [ i ] then
34567: LD_VAR 0 2
34571: PUSH
34572: LD_VAR 0 1
34576: PUSH
34577: LD_VAR 0 4
34581: ARRAY
34582: EQUAL
34583: IFFALSE 34599
// begin result := i ;
34585: LD_ADDR_VAR 0 3
34589: PUSH
34590: LD_VAR 0 4
34594: ST_TO_ADDR
// exit ;
34595: POP
34596: POP
34597: GO 34603
// end ;
34599: GO 34564
34601: POP
34602: POP
// end ;
34603: LD_VAR 0 3
34607: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34608: LD_INT 0
34610: PPUSH
// vc_chassis := chassis ;
34611: LD_ADDR_OWVAR 37
34615: PUSH
34616: LD_VAR 0 1
34620: ST_TO_ADDR
// vc_engine := engine ;
34621: LD_ADDR_OWVAR 39
34625: PUSH
34626: LD_VAR 0 2
34630: ST_TO_ADDR
// vc_control := control ;
34631: LD_ADDR_OWVAR 38
34635: PUSH
34636: LD_VAR 0 3
34640: ST_TO_ADDR
// vc_weapon := weapon ;
34641: LD_ADDR_OWVAR 40
34645: PUSH
34646: LD_VAR 0 4
34650: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34651: LD_ADDR_OWVAR 41
34655: PUSH
34656: LD_VAR 0 5
34660: ST_TO_ADDR
// end ;
34661: LD_VAR 0 6
34665: RET
// export function WantPlant ( unit ) ; var task ; begin
34666: LD_INT 0
34668: PPUSH
34669: PPUSH
// result := false ;
34670: LD_ADDR_VAR 0 2
34674: PUSH
34675: LD_INT 0
34677: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34678: LD_ADDR_VAR 0 3
34682: PUSH
34683: LD_VAR 0 1
34687: PPUSH
34688: CALL_OW 437
34692: ST_TO_ADDR
// if task then
34693: LD_VAR 0 3
34697: IFFALSE 34725
// if task [ 1 ] [ 1 ] = p then
34699: LD_VAR 0 3
34703: PUSH
34704: LD_INT 1
34706: ARRAY
34707: PUSH
34708: LD_INT 1
34710: ARRAY
34711: PUSH
34712: LD_STRING p
34714: EQUAL
34715: IFFALSE 34725
// result := true ;
34717: LD_ADDR_VAR 0 2
34721: PUSH
34722: LD_INT 1
34724: ST_TO_ADDR
// end ;
34725: LD_VAR 0 2
34729: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34730: LD_INT 0
34732: PPUSH
34733: PPUSH
34734: PPUSH
34735: PPUSH
// if pos < 1 then
34736: LD_VAR 0 2
34740: PUSH
34741: LD_INT 1
34743: LESS
34744: IFFALSE 34748
// exit ;
34746: GO 35051
// if pos = 1 then
34748: LD_VAR 0 2
34752: PUSH
34753: LD_INT 1
34755: EQUAL
34756: IFFALSE 34789
// result := Replace ( arr , pos [ 1 ] , value ) else
34758: LD_ADDR_VAR 0 4
34762: PUSH
34763: LD_VAR 0 1
34767: PPUSH
34768: LD_VAR 0 2
34772: PUSH
34773: LD_INT 1
34775: ARRAY
34776: PPUSH
34777: LD_VAR 0 3
34781: PPUSH
34782: CALL_OW 1
34786: ST_TO_ADDR
34787: GO 35051
// begin tmp := arr ;
34789: LD_ADDR_VAR 0 6
34793: PUSH
34794: LD_VAR 0 1
34798: ST_TO_ADDR
// s_arr := [ tmp ] ;
34799: LD_ADDR_VAR 0 7
34803: PUSH
34804: LD_VAR 0 6
34808: PUSH
34809: EMPTY
34810: LIST
34811: ST_TO_ADDR
// for i = 1 to pos - 1 do
34812: LD_ADDR_VAR 0 5
34816: PUSH
34817: DOUBLE
34818: LD_INT 1
34820: DEC
34821: ST_TO_ADDR
34822: LD_VAR 0 2
34826: PUSH
34827: LD_INT 1
34829: MINUS
34830: PUSH
34831: FOR_TO
34832: IFFALSE 34877
// begin tmp := tmp [ pos [ i ] ] ;
34834: LD_ADDR_VAR 0 6
34838: PUSH
34839: LD_VAR 0 6
34843: PUSH
34844: LD_VAR 0 2
34848: PUSH
34849: LD_VAR 0 5
34853: ARRAY
34854: ARRAY
34855: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34856: LD_ADDR_VAR 0 7
34860: PUSH
34861: LD_VAR 0 7
34865: PUSH
34866: LD_VAR 0 6
34870: PUSH
34871: EMPTY
34872: LIST
34873: ADD
34874: ST_TO_ADDR
// end ;
34875: GO 34831
34877: POP
34878: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34879: LD_ADDR_VAR 0 6
34883: PUSH
34884: LD_VAR 0 6
34888: PPUSH
34889: LD_VAR 0 2
34893: PUSH
34894: LD_VAR 0 2
34898: ARRAY
34899: PPUSH
34900: LD_VAR 0 3
34904: PPUSH
34905: CALL_OW 1
34909: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34910: LD_ADDR_VAR 0 7
34914: PUSH
34915: LD_VAR 0 7
34919: PPUSH
34920: LD_VAR 0 7
34924: PPUSH
34925: LD_VAR 0 6
34929: PPUSH
34930: CALL_OW 1
34934: ST_TO_ADDR
// for i = s_arr downto 2 do
34935: LD_ADDR_VAR 0 5
34939: PUSH
34940: DOUBLE
34941: LD_VAR 0 7
34945: INC
34946: ST_TO_ADDR
34947: LD_INT 2
34949: PUSH
34950: FOR_DOWNTO
34951: IFFALSE 35035
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34953: LD_ADDR_VAR 0 6
34957: PUSH
34958: LD_VAR 0 7
34962: PUSH
34963: LD_VAR 0 5
34967: PUSH
34968: LD_INT 1
34970: MINUS
34971: ARRAY
34972: PPUSH
34973: LD_VAR 0 2
34977: PUSH
34978: LD_VAR 0 5
34982: PUSH
34983: LD_INT 1
34985: MINUS
34986: ARRAY
34987: PPUSH
34988: LD_VAR 0 7
34992: PUSH
34993: LD_VAR 0 5
34997: ARRAY
34998: PPUSH
34999: CALL_OW 1
35003: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35004: LD_ADDR_VAR 0 7
35008: PUSH
35009: LD_VAR 0 7
35013: PPUSH
35014: LD_VAR 0 5
35018: PUSH
35019: LD_INT 1
35021: MINUS
35022: PPUSH
35023: LD_VAR 0 6
35027: PPUSH
35028: CALL_OW 1
35032: ST_TO_ADDR
// end ;
35033: GO 34950
35035: POP
35036: POP
// result := s_arr [ 1 ] ;
35037: LD_ADDR_VAR 0 4
35041: PUSH
35042: LD_VAR 0 7
35046: PUSH
35047: LD_INT 1
35049: ARRAY
35050: ST_TO_ADDR
// end ; end ;
35051: LD_VAR 0 4
35055: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35056: LD_INT 0
35058: PPUSH
35059: PPUSH
// if not list then
35060: LD_VAR 0 1
35064: NOT
35065: IFFALSE 35069
// exit ;
35067: GO 35160
// i := list [ pos1 ] ;
35069: LD_ADDR_VAR 0 5
35073: PUSH
35074: LD_VAR 0 1
35078: PUSH
35079: LD_VAR 0 2
35083: ARRAY
35084: ST_TO_ADDR
// if not i then
35085: LD_VAR 0 5
35089: NOT
35090: IFFALSE 35094
// exit ;
35092: GO 35160
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35094: LD_ADDR_VAR 0 1
35098: PUSH
35099: LD_VAR 0 1
35103: PPUSH
35104: LD_VAR 0 2
35108: PPUSH
35109: LD_VAR 0 1
35113: PUSH
35114: LD_VAR 0 3
35118: ARRAY
35119: PPUSH
35120: CALL_OW 1
35124: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35125: LD_ADDR_VAR 0 1
35129: PUSH
35130: LD_VAR 0 1
35134: PPUSH
35135: LD_VAR 0 3
35139: PPUSH
35140: LD_VAR 0 5
35144: PPUSH
35145: CALL_OW 1
35149: ST_TO_ADDR
// result := list ;
35150: LD_ADDR_VAR 0 4
35154: PUSH
35155: LD_VAR 0 1
35159: ST_TO_ADDR
// end ;
35160: LD_VAR 0 4
35164: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35165: LD_INT 0
35167: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35168: LD_ADDR_VAR 0 5
35172: PUSH
35173: LD_VAR 0 1
35177: PPUSH
35178: CALL_OW 250
35182: PPUSH
35183: LD_VAR 0 1
35187: PPUSH
35188: CALL_OW 251
35192: PPUSH
35193: LD_VAR 0 2
35197: PPUSH
35198: LD_VAR 0 3
35202: PPUSH
35203: LD_VAR 0 4
35207: PPUSH
35208: CALL 35218 0 5
35212: ST_TO_ADDR
// end ;
35213: LD_VAR 0 5
35217: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35218: LD_INT 0
35220: PPUSH
35221: PPUSH
35222: PPUSH
35223: PPUSH
// if not list then
35224: LD_VAR 0 3
35228: NOT
35229: IFFALSE 35233
// exit ;
35231: GO 35621
// result := [ ] ;
35233: LD_ADDR_VAR 0 6
35237: PUSH
35238: EMPTY
35239: ST_TO_ADDR
// for i in list do
35240: LD_ADDR_VAR 0 7
35244: PUSH
35245: LD_VAR 0 3
35249: PUSH
35250: FOR_IN
35251: IFFALSE 35453
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35253: LD_ADDR_VAR 0 9
35257: PUSH
35258: LD_VAR 0 7
35262: PPUSH
35263: LD_VAR 0 1
35267: PPUSH
35268: LD_VAR 0 2
35272: PPUSH
35273: CALL_OW 297
35277: ST_TO_ADDR
// if not result then
35278: LD_VAR 0 6
35282: NOT
35283: IFFALSE 35309
// result := [ [ i , tmp ] ] else
35285: LD_ADDR_VAR 0 6
35289: PUSH
35290: LD_VAR 0 7
35294: PUSH
35295: LD_VAR 0 9
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: EMPTY
35305: LIST
35306: ST_TO_ADDR
35307: GO 35451
// begin if result [ result ] [ 2 ] < tmp then
35309: LD_VAR 0 6
35313: PUSH
35314: LD_VAR 0 6
35318: ARRAY
35319: PUSH
35320: LD_INT 2
35322: ARRAY
35323: PUSH
35324: LD_VAR 0 9
35328: LESS
35329: IFFALSE 35371
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35331: LD_ADDR_VAR 0 6
35335: PUSH
35336: LD_VAR 0 6
35340: PPUSH
35341: LD_VAR 0 6
35345: PUSH
35346: LD_INT 1
35348: PLUS
35349: PPUSH
35350: LD_VAR 0 7
35354: PUSH
35355: LD_VAR 0 9
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PPUSH
35364: CALL_OW 2
35368: ST_TO_ADDR
35369: GO 35451
// for j = 1 to result do
35371: LD_ADDR_VAR 0 8
35375: PUSH
35376: DOUBLE
35377: LD_INT 1
35379: DEC
35380: ST_TO_ADDR
35381: LD_VAR 0 6
35385: PUSH
35386: FOR_TO
35387: IFFALSE 35449
// begin if tmp < result [ j ] [ 2 ] then
35389: LD_VAR 0 9
35393: PUSH
35394: LD_VAR 0 6
35398: PUSH
35399: LD_VAR 0 8
35403: ARRAY
35404: PUSH
35405: LD_INT 2
35407: ARRAY
35408: LESS
35409: IFFALSE 35447
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35411: LD_ADDR_VAR 0 6
35415: PUSH
35416: LD_VAR 0 6
35420: PPUSH
35421: LD_VAR 0 8
35425: PPUSH
35426: LD_VAR 0 7
35430: PUSH
35431: LD_VAR 0 9
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PPUSH
35440: CALL_OW 2
35444: ST_TO_ADDR
// break ;
35445: GO 35449
// end ; end ;
35447: GO 35386
35449: POP
35450: POP
// end ; end ;
35451: GO 35250
35453: POP
35454: POP
// if result and not asc then
35455: LD_VAR 0 6
35459: PUSH
35460: LD_VAR 0 4
35464: NOT
35465: AND
35466: IFFALSE 35541
// begin tmp := result ;
35468: LD_ADDR_VAR 0 9
35472: PUSH
35473: LD_VAR 0 6
35477: ST_TO_ADDR
// for i = tmp downto 1 do
35478: LD_ADDR_VAR 0 7
35482: PUSH
35483: DOUBLE
35484: LD_VAR 0 9
35488: INC
35489: ST_TO_ADDR
35490: LD_INT 1
35492: PUSH
35493: FOR_DOWNTO
35494: IFFALSE 35539
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35496: LD_ADDR_VAR 0 6
35500: PUSH
35501: LD_VAR 0 6
35505: PPUSH
35506: LD_VAR 0 9
35510: PUSH
35511: LD_VAR 0 7
35515: MINUS
35516: PUSH
35517: LD_INT 1
35519: PLUS
35520: PPUSH
35521: LD_VAR 0 9
35525: PUSH
35526: LD_VAR 0 7
35530: ARRAY
35531: PPUSH
35532: CALL_OW 1
35536: ST_TO_ADDR
35537: GO 35493
35539: POP
35540: POP
// end ; tmp := [ ] ;
35541: LD_ADDR_VAR 0 9
35545: PUSH
35546: EMPTY
35547: ST_TO_ADDR
// if mode then
35548: LD_VAR 0 5
35552: IFFALSE 35621
// begin for i = 1 to result do
35554: LD_ADDR_VAR 0 7
35558: PUSH
35559: DOUBLE
35560: LD_INT 1
35562: DEC
35563: ST_TO_ADDR
35564: LD_VAR 0 6
35568: PUSH
35569: FOR_TO
35570: IFFALSE 35609
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35572: LD_ADDR_VAR 0 9
35576: PUSH
35577: LD_VAR 0 9
35581: PPUSH
35582: LD_VAR 0 7
35586: PPUSH
35587: LD_VAR 0 6
35591: PUSH
35592: LD_VAR 0 7
35596: ARRAY
35597: PUSH
35598: LD_INT 1
35600: ARRAY
35601: PPUSH
35602: CALL_OW 1
35606: ST_TO_ADDR
35607: GO 35569
35609: POP
35610: POP
// result := tmp ;
35611: LD_ADDR_VAR 0 6
35615: PUSH
35616: LD_VAR 0 9
35620: ST_TO_ADDR
// end ; end ;
35621: LD_VAR 0 6
35625: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35626: LD_INT 0
35628: PPUSH
35629: PPUSH
35630: PPUSH
35631: PPUSH
35632: PPUSH
35633: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35634: LD_ADDR_VAR 0 5
35638: PUSH
35639: LD_INT 0
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: EMPTY
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: ST_TO_ADDR
// if not x or not y then
35656: LD_VAR 0 2
35660: NOT
35661: PUSH
35662: LD_VAR 0 3
35666: NOT
35667: OR
35668: IFFALSE 35672
// exit ;
35670: GO 37324
// if not range then
35672: LD_VAR 0 4
35676: NOT
35677: IFFALSE 35687
// range := 10 ;
35679: LD_ADDR_VAR 0 4
35683: PUSH
35684: LD_INT 10
35686: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35687: LD_ADDR_VAR 0 8
35691: PUSH
35692: LD_INT 81
35694: PUSH
35695: LD_VAR 0 1
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 92
35706: PUSH
35707: LD_VAR 0 2
35711: PUSH
35712: LD_VAR 0 3
35716: PUSH
35717: LD_VAR 0 4
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 3
35730: PUSH
35731: LD_INT 21
35733: PUSH
35734: LD_INT 3
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: LIST
35749: PPUSH
35750: CALL_OW 69
35754: ST_TO_ADDR
// if not tmp then
35755: LD_VAR 0 8
35759: NOT
35760: IFFALSE 35764
// exit ;
35762: GO 37324
// for i in tmp do
35764: LD_ADDR_VAR 0 6
35768: PUSH
35769: LD_VAR 0 8
35773: PUSH
35774: FOR_IN
35775: IFFALSE 37299
// begin points := [ 0 , 0 , 0 ] ;
35777: LD_ADDR_VAR 0 9
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: LIST
35795: ST_TO_ADDR
// bpoints := 1 ;
35796: LD_ADDR_VAR 0 10
35800: PUSH
35801: LD_INT 1
35803: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35804: LD_VAR 0 6
35808: PPUSH
35809: CALL_OW 247
35813: PUSH
35814: LD_INT 1
35816: DOUBLE
35817: EQUAL
35818: IFTRUE 35822
35820: GO 36400
35822: POP
// begin if GetClass ( i ) = 1 then
35823: LD_VAR 0 6
35827: PPUSH
35828: CALL_OW 257
35832: PUSH
35833: LD_INT 1
35835: EQUAL
35836: IFFALSE 35857
// points := [ 10 , 5 , 3 ] ;
35838: LD_ADDR_VAR 0 9
35842: PUSH
35843: LD_INT 10
35845: PUSH
35846: LD_INT 5
35848: PUSH
35849: LD_INT 3
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: LIST
35856: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35857: LD_VAR 0 6
35861: PPUSH
35862: CALL_OW 257
35866: PUSH
35867: LD_INT 2
35869: PUSH
35870: LD_INT 3
35872: PUSH
35873: LD_INT 4
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: LIST
35880: IN
35881: IFFALSE 35902
// points := [ 3 , 2 , 1 ] ;
35883: LD_ADDR_VAR 0 9
35887: PUSH
35888: LD_INT 3
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35902: LD_VAR 0 6
35906: PPUSH
35907: CALL_OW 257
35911: PUSH
35912: LD_INT 5
35914: EQUAL
35915: IFFALSE 35936
// points := [ 130 , 5 , 2 ] ;
35917: LD_ADDR_VAR 0 9
35921: PUSH
35922: LD_INT 130
35924: PUSH
35925: LD_INT 5
35927: PUSH
35928: LD_INT 2
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: LIST
35935: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35936: LD_VAR 0 6
35940: PPUSH
35941: CALL_OW 257
35945: PUSH
35946: LD_INT 8
35948: EQUAL
35949: IFFALSE 35970
// points := [ 35 , 35 , 30 ] ;
35951: LD_ADDR_VAR 0 9
35955: PUSH
35956: LD_INT 35
35958: PUSH
35959: LD_INT 35
35961: PUSH
35962: LD_INT 30
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: LIST
35969: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35970: LD_VAR 0 6
35974: PPUSH
35975: CALL_OW 257
35979: PUSH
35980: LD_INT 9
35982: EQUAL
35983: IFFALSE 36004
// points := [ 20 , 55 , 40 ] ;
35985: LD_ADDR_VAR 0 9
35989: PUSH
35990: LD_INT 20
35992: PUSH
35993: LD_INT 55
35995: PUSH
35996: LD_INT 40
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36004: LD_VAR 0 6
36008: PPUSH
36009: CALL_OW 257
36013: PUSH
36014: LD_INT 12
36016: PUSH
36017: LD_INT 16
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: IN
36024: IFFALSE 36045
// points := [ 5 , 3 , 2 ] ;
36026: LD_ADDR_VAR 0 9
36030: PUSH
36031: LD_INT 5
36033: PUSH
36034: LD_INT 3
36036: PUSH
36037: LD_INT 2
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: LIST
36044: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36045: LD_VAR 0 6
36049: PPUSH
36050: CALL_OW 257
36054: PUSH
36055: LD_INT 17
36057: EQUAL
36058: IFFALSE 36079
// points := [ 100 , 50 , 75 ] ;
36060: LD_ADDR_VAR 0 9
36064: PUSH
36065: LD_INT 100
36067: PUSH
36068: LD_INT 50
36070: PUSH
36071: LD_INT 75
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: LIST
36078: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36079: LD_VAR 0 6
36083: PPUSH
36084: CALL_OW 257
36088: PUSH
36089: LD_INT 15
36091: EQUAL
36092: IFFALSE 36113
// points := [ 10 , 5 , 3 ] ;
36094: LD_ADDR_VAR 0 9
36098: PUSH
36099: LD_INT 10
36101: PUSH
36102: LD_INT 5
36104: PUSH
36105: LD_INT 3
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36113: LD_VAR 0 6
36117: PPUSH
36118: CALL_OW 257
36122: PUSH
36123: LD_INT 14
36125: EQUAL
36126: IFFALSE 36147
// points := [ 10 , 0 , 0 ] ;
36128: LD_ADDR_VAR 0 9
36132: PUSH
36133: LD_INT 10
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: LIST
36146: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36147: LD_VAR 0 6
36151: PPUSH
36152: CALL_OW 257
36156: PUSH
36157: LD_INT 11
36159: EQUAL
36160: IFFALSE 36181
// points := [ 30 , 10 , 5 ] ;
36162: LD_ADDR_VAR 0 9
36166: PUSH
36167: LD_INT 30
36169: PUSH
36170: LD_INT 10
36172: PUSH
36173: LD_INT 5
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: LIST
36180: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36181: LD_VAR 0 1
36185: PPUSH
36186: LD_INT 5
36188: PPUSH
36189: CALL_OW 321
36193: PUSH
36194: LD_INT 2
36196: EQUAL
36197: IFFALSE 36214
// bpoints := bpoints * 1.8 ;
36199: LD_ADDR_VAR 0 10
36203: PUSH
36204: LD_VAR 0 10
36208: PUSH
36209: LD_REAL  1.80000000000000E+0000
36212: MUL
36213: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36214: LD_VAR 0 6
36218: PPUSH
36219: CALL_OW 257
36223: PUSH
36224: LD_INT 1
36226: PUSH
36227: LD_INT 2
36229: PUSH
36230: LD_INT 3
36232: PUSH
36233: LD_INT 4
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: IN
36242: PUSH
36243: LD_VAR 0 1
36247: PPUSH
36248: LD_INT 51
36250: PPUSH
36251: CALL_OW 321
36255: PUSH
36256: LD_INT 2
36258: EQUAL
36259: AND
36260: IFFALSE 36277
// bpoints := bpoints * 1.2 ;
36262: LD_ADDR_VAR 0 10
36266: PUSH
36267: LD_VAR 0 10
36271: PUSH
36272: LD_REAL  1.20000000000000E+0000
36275: MUL
36276: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36277: LD_VAR 0 6
36281: PPUSH
36282: CALL_OW 257
36286: PUSH
36287: LD_INT 5
36289: PUSH
36290: LD_INT 7
36292: PUSH
36293: LD_INT 9
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: IN
36301: PUSH
36302: LD_VAR 0 1
36306: PPUSH
36307: LD_INT 52
36309: PPUSH
36310: CALL_OW 321
36314: PUSH
36315: LD_INT 2
36317: EQUAL
36318: AND
36319: IFFALSE 36336
// bpoints := bpoints * 1.5 ;
36321: LD_ADDR_VAR 0 10
36325: PUSH
36326: LD_VAR 0 10
36330: PUSH
36331: LD_REAL  1.50000000000000E+0000
36334: MUL
36335: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36336: LD_VAR 0 1
36340: PPUSH
36341: LD_INT 66
36343: PPUSH
36344: CALL_OW 321
36348: PUSH
36349: LD_INT 2
36351: EQUAL
36352: IFFALSE 36369
// bpoints := bpoints * 1.1 ;
36354: LD_ADDR_VAR 0 10
36358: PUSH
36359: LD_VAR 0 10
36363: PUSH
36364: LD_REAL  1.10000000000000E+0000
36367: MUL
36368: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36369: LD_ADDR_VAR 0 10
36373: PUSH
36374: LD_VAR 0 10
36378: PUSH
36379: LD_VAR 0 6
36383: PPUSH
36384: LD_INT 1
36386: PPUSH
36387: CALL_OW 259
36391: PUSH
36392: LD_REAL  1.15000000000000E+0000
36395: MUL
36396: MUL
36397: ST_TO_ADDR
// end ; unit_vehicle :
36398: GO 37228
36400: LD_INT 2
36402: DOUBLE
36403: EQUAL
36404: IFTRUE 36408
36406: GO 37216
36408: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36409: LD_VAR 0 6
36413: PPUSH
36414: CALL_OW 264
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: LD_INT 42
36424: PUSH
36425: LD_INT 24
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: LIST
36432: IN
36433: IFFALSE 36454
// points := [ 25 , 5 , 3 ] ;
36435: LD_ADDR_VAR 0 9
36439: PUSH
36440: LD_INT 25
36442: PUSH
36443: LD_INT 5
36445: PUSH
36446: LD_INT 3
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36454: LD_VAR 0 6
36458: PPUSH
36459: CALL_OW 264
36463: PUSH
36464: LD_INT 4
36466: PUSH
36467: LD_INT 43
36469: PUSH
36470: LD_INT 25
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: LIST
36477: IN
36478: IFFALSE 36499
// points := [ 40 , 15 , 5 ] ;
36480: LD_ADDR_VAR 0 9
36484: PUSH
36485: LD_INT 40
36487: PUSH
36488: LD_INT 15
36490: PUSH
36491: LD_INT 5
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: LIST
36498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36499: LD_VAR 0 6
36503: PPUSH
36504: CALL_OW 264
36508: PUSH
36509: LD_INT 3
36511: PUSH
36512: LD_INT 23
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: IN
36519: IFFALSE 36540
// points := [ 7 , 25 , 8 ] ;
36521: LD_ADDR_VAR 0 9
36525: PUSH
36526: LD_INT 7
36528: PUSH
36529: LD_INT 25
36531: PUSH
36532: LD_INT 8
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: LIST
36539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36540: LD_VAR 0 6
36544: PPUSH
36545: CALL_OW 264
36549: PUSH
36550: LD_INT 5
36552: PUSH
36553: LD_INT 27
36555: PUSH
36556: LD_INT 44
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: LIST
36563: IN
36564: IFFALSE 36585
// points := [ 14 , 50 , 16 ] ;
36566: LD_ADDR_VAR 0 9
36570: PUSH
36571: LD_INT 14
36573: PUSH
36574: LD_INT 50
36576: PUSH
36577: LD_INT 16
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36585: LD_VAR 0 6
36589: PPUSH
36590: CALL_OW 264
36594: PUSH
36595: LD_INT 6
36597: PUSH
36598: LD_INT 46
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: IN
36605: IFFALSE 36626
// points := [ 32 , 120 , 70 ] ;
36607: LD_ADDR_VAR 0 9
36611: PUSH
36612: LD_INT 32
36614: PUSH
36615: LD_INT 120
36617: PUSH
36618: LD_INT 70
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36626: LD_VAR 0 6
36630: PPUSH
36631: CALL_OW 264
36635: PUSH
36636: LD_INT 7
36638: PUSH
36639: LD_INT 28
36641: PUSH
36642: LD_INT 45
36644: PUSH
36645: LD_EXP 30
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: IN
36656: IFFALSE 36677
// points := [ 35 , 20 , 45 ] ;
36658: LD_ADDR_VAR 0 9
36662: PUSH
36663: LD_INT 35
36665: PUSH
36666: LD_INT 20
36668: PUSH
36669: LD_INT 45
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36677: LD_VAR 0 6
36681: PPUSH
36682: CALL_OW 264
36686: PUSH
36687: LD_INT 47
36689: PUSH
36690: EMPTY
36691: LIST
36692: IN
36693: IFFALSE 36714
// points := [ 67 , 45 , 75 ] ;
36695: LD_ADDR_VAR 0 9
36699: PUSH
36700: LD_INT 67
36702: PUSH
36703: LD_INT 45
36705: PUSH
36706: LD_INT 75
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: LIST
36713: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36714: LD_VAR 0 6
36718: PPUSH
36719: CALL_OW 264
36723: PUSH
36724: LD_INT 26
36726: PUSH
36727: EMPTY
36728: LIST
36729: IN
36730: IFFALSE 36751
// points := [ 120 , 30 , 80 ] ;
36732: LD_ADDR_VAR 0 9
36736: PUSH
36737: LD_INT 120
36739: PUSH
36740: LD_INT 30
36742: PUSH
36743: LD_INT 80
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36751: LD_VAR 0 6
36755: PPUSH
36756: CALL_OW 264
36760: PUSH
36761: LD_INT 22
36763: PUSH
36764: EMPTY
36765: LIST
36766: IN
36767: IFFALSE 36788
// points := [ 40 , 1 , 1 ] ;
36769: LD_ADDR_VAR 0 9
36773: PUSH
36774: LD_INT 40
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: LIST
36787: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36788: LD_VAR 0 6
36792: PPUSH
36793: CALL_OW 264
36797: PUSH
36798: LD_INT 29
36800: PUSH
36801: EMPTY
36802: LIST
36803: IN
36804: IFFALSE 36825
// points := [ 70 , 200 , 400 ] ;
36806: LD_ADDR_VAR 0 9
36810: PUSH
36811: LD_INT 70
36813: PUSH
36814: LD_INT 200
36816: PUSH
36817: LD_INT 400
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: LIST
36824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36825: LD_VAR 0 6
36829: PPUSH
36830: CALL_OW 264
36834: PUSH
36835: LD_INT 14
36837: PUSH
36838: LD_INT 53
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: IN
36845: IFFALSE 36866
// points := [ 40 , 10 , 20 ] ;
36847: LD_ADDR_VAR 0 9
36851: PUSH
36852: LD_INT 40
36854: PUSH
36855: LD_INT 10
36857: PUSH
36858: LD_INT 20
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36866: LD_VAR 0 6
36870: PPUSH
36871: CALL_OW 264
36875: PUSH
36876: LD_INT 9
36878: PUSH
36879: EMPTY
36880: LIST
36881: IN
36882: IFFALSE 36903
// points := [ 5 , 70 , 20 ] ;
36884: LD_ADDR_VAR 0 9
36888: PUSH
36889: LD_INT 5
36891: PUSH
36892: LD_INT 70
36894: PUSH
36895: LD_INT 20
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: LIST
36902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36903: LD_VAR 0 6
36907: PPUSH
36908: CALL_OW 264
36912: PUSH
36913: LD_INT 10
36915: PUSH
36916: EMPTY
36917: LIST
36918: IN
36919: IFFALSE 36940
// points := [ 35 , 110 , 70 ] ;
36921: LD_ADDR_VAR 0 9
36925: PUSH
36926: LD_INT 35
36928: PUSH
36929: LD_INT 110
36931: PUSH
36932: LD_INT 70
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36940: LD_VAR 0 6
36944: PPUSH
36945: CALL_OW 265
36949: PUSH
36950: LD_INT 25
36952: EQUAL
36953: IFFALSE 36974
// points := [ 80 , 65 , 100 ] ;
36955: LD_ADDR_VAR 0 9
36959: PUSH
36960: LD_INT 80
36962: PUSH
36963: LD_INT 65
36965: PUSH
36966: LD_INT 100
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: LIST
36973: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36974: LD_VAR 0 6
36978: PPUSH
36979: CALL_OW 263
36983: PUSH
36984: LD_INT 1
36986: EQUAL
36987: IFFALSE 37022
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36989: LD_ADDR_VAR 0 10
36993: PUSH
36994: LD_VAR 0 10
36998: PUSH
36999: LD_VAR 0 6
37003: PPUSH
37004: CALL_OW 311
37008: PPUSH
37009: LD_INT 3
37011: PPUSH
37012: CALL_OW 259
37016: PUSH
37017: LD_INT 4
37019: MUL
37020: MUL
37021: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37022: LD_VAR 0 6
37026: PPUSH
37027: CALL_OW 263
37031: PUSH
37032: LD_INT 2
37034: EQUAL
37035: IFFALSE 37086
// begin j := IsControledBy ( i ) ;
37037: LD_ADDR_VAR 0 7
37041: PUSH
37042: LD_VAR 0 6
37046: PPUSH
37047: CALL_OW 312
37051: ST_TO_ADDR
// if j then
37052: LD_VAR 0 7
37056: IFFALSE 37086
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37058: LD_ADDR_VAR 0 10
37062: PUSH
37063: LD_VAR 0 10
37067: PUSH
37068: LD_VAR 0 7
37072: PPUSH
37073: LD_INT 3
37075: PPUSH
37076: CALL_OW 259
37080: PUSH
37081: LD_INT 3
37083: MUL
37084: MUL
37085: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37086: LD_VAR 0 6
37090: PPUSH
37091: CALL_OW 264
37095: PUSH
37096: LD_INT 5
37098: PUSH
37099: LD_INT 6
37101: PUSH
37102: LD_INT 46
37104: PUSH
37105: LD_INT 44
37107: PUSH
37108: LD_INT 47
37110: PUSH
37111: LD_INT 45
37113: PUSH
37114: LD_INT 28
37116: PUSH
37117: LD_INT 7
37119: PUSH
37120: LD_INT 27
37122: PUSH
37123: LD_INT 29
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: IN
37138: PUSH
37139: LD_VAR 0 1
37143: PPUSH
37144: LD_INT 52
37146: PPUSH
37147: CALL_OW 321
37151: PUSH
37152: LD_INT 2
37154: EQUAL
37155: AND
37156: IFFALSE 37173
// bpoints := bpoints * 1.2 ;
37158: LD_ADDR_VAR 0 10
37162: PUSH
37163: LD_VAR 0 10
37167: PUSH
37168: LD_REAL  1.20000000000000E+0000
37171: MUL
37172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37173: LD_VAR 0 6
37177: PPUSH
37178: CALL_OW 264
37182: PUSH
37183: LD_INT 6
37185: PUSH
37186: LD_INT 46
37188: PUSH
37189: LD_INT 47
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: LIST
37196: IN
37197: IFFALSE 37214
// bpoints := bpoints * 1.2 ;
37199: LD_ADDR_VAR 0 10
37203: PUSH
37204: LD_VAR 0 10
37208: PUSH
37209: LD_REAL  1.20000000000000E+0000
37212: MUL
37213: ST_TO_ADDR
// end ; unit_building :
37214: GO 37228
37216: LD_INT 3
37218: DOUBLE
37219: EQUAL
37220: IFTRUE 37224
37222: GO 37227
37224: POP
// ; end ;
37225: GO 37228
37227: POP
// for j = 1 to 3 do
37228: LD_ADDR_VAR 0 7
37232: PUSH
37233: DOUBLE
37234: LD_INT 1
37236: DEC
37237: ST_TO_ADDR
37238: LD_INT 3
37240: PUSH
37241: FOR_TO
37242: IFFALSE 37295
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37244: LD_ADDR_VAR 0 5
37248: PUSH
37249: LD_VAR 0 5
37253: PPUSH
37254: LD_VAR 0 7
37258: PPUSH
37259: LD_VAR 0 5
37263: PUSH
37264: LD_VAR 0 7
37268: ARRAY
37269: PUSH
37270: LD_VAR 0 9
37274: PUSH
37275: LD_VAR 0 7
37279: ARRAY
37280: PUSH
37281: LD_VAR 0 10
37285: MUL
37286: PLUS
37287: PPUSH
37288: CALL_OW 1
37292: ST_TO_ADDR
37293: GO 37241
37295: POP
37296: POP
// end ;
37297: GO 35774
37299: POP
37300: POP
// result := Replace ( result , 4 , tmp ) ;
37301: LD_ADDR_VAR 0 5
37305: PUSH
37306: LD_VAR 0 5
37310: PPUSH
37311: LD_INT 4
37313: PPUSH
37314: LD_VAR 0 8
37318: PPUSH
37319: CALL_OW 1
37323: ST_TO_ADDR
// end ;
37324: LD_VAR 0 5
37328: RET
// export function DangerAtRange ( unit , range ) ; begin
37329: LD_INT 0
37331: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37332: LD_ADDR_VAR 0 3
37336: PUSH
37337: LD_VAR 0 1
37341: PPUSH
37342: CALL_OW 255
37346: PPUSH
37347: LD_VAR 0 1
37351: PPUSH
37352: CALL_OW 250
37356: PPUSH
37357: LD_VAR 0 1
37361: PPUSH
37362: CALL_OW 251
37366: PPUSH
37367: LD_VAR 0 2
37371: PPUSH
37372: CALL 35626 0 4
37376: ST_TO_ADDR
// end ;
37377: LD_VAR 0 3
37381: RET
// export function DangerInArea ( side , area ) ; begin
37382: LD_INT 0
37384: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37385: LD_ADDR_VAR 0 3
37389: PUSH
37390: LD_VAR 0 2
37394: PPUSH
37395: LD_INT 81
37397: PUSH
37398: LD_VAR 0 1
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PPUSH
37407: CALL_OW 70
37411: ST_TO_ADDR
// end ;
37412: LD_VAR 0 3
37416: RET
// export function IsExtension ( b ) ; begin
37417: LD_INT 0
37419: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37420: LD_ADDR_VAR 0 2
37424: PUSH
37425: LD_VAR 0 1
37429: PUSH
37430: LD_INT 23
37432: PUSH
37433: LD_INT 20
37435: PUSH
37436: LD_INT 22
37438: PUSH
37439: LD_INT 17
37441: PUSH
37442: LD_INT 24
37444: PUSH
37445: LD_INT 21
37447: PUSH
37448: LD_INT 19
37450: PUSH
37451: LD_INT 16
37453: PUSH
37454: LD_INT 25
37456: PUSH
37457: LD_INT 18
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: IN
37472: ST_TO_ADDR
// end ;
37473: LD_VAR 0 2
37477: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37478: LD_INT 0
37480: PPUSH
37481: PPUSH
37482: PPUSH
// result := [ ] ;
37483: LD_ADDR_VAR 0 4
37487: PUSH
37488: EMPTY
37489: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37490: LD_ADDR_VAR 0 5
37494: PUSH
37495: LD_VAR 0 2
37499: PPUSH
37500: LD_INT 21
37502: PUSH
37503: LD_INT 3
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PPUSH
37510: CALL_OW 70
37514: ST_TO_ADDR
// if not tmp then
37515: LD_VAR 0 5
37519: NOT
37520: IFFALSE 37524
// exit ;
37522: GO 37588
// if checkLink then
37524: LD_VAR 0 3
37528: IFFALSE 37578
// begin for i in tmp do
37530: LD_ADDR_VAR 0 6
37534: PUSH
37535: LD_VAR 0 5
37539: PUSH
37540: FOR_IN
37541: IFFALSE 37576
// if GetBase ( i ) <> base then
37543: LD_VAR 0 6
37547: PPUSH
37548: CALL_OW 274
37552: PUSH
37553: LD_VAR 0 1
37557: NONEQUAL
37558: IFFALSE 37574
// ComLinkToBase ( base , i ) ;
37560: LD_VAR 0 1
37564: PPUSH
37565: LD_VAR 0 6
37569: PPUSH
37570: CALL_OW 169
37574: GO 37540
37576: POP
37577: POP
// end ; result := tmp ;
37578: LD_ADDR_VAR 0 4
37582: PUSH
37583: LD_VAR 0 5
37587: ST_TO_ADDR
// end ;
37588: LD_VAR 0 4
37592: RET
// export function ComComplete ( units , b ) ; var i ; begin
37593: LD_INT 0
37595: PPUSH
37596: PPUSH
// if not units then
37597: LD_VAR 0 1
37601: NOT
37602: IFFALSE 37606
// exit ;
37604: GO 37696
// for i in units do
37606: LD_ADDR_VAR 0 4
37610: PUSH
37611: LD_VAR 0 1
37615: PUSH
37616: FOR_IN
37617: IFFALSE 37694
// if BuildingStatus ( b ) = bs_build then
37619: LD_VAR 0 2
37623: PPUSH
37624: CALL_OW 461
37628: PUSH
37629: LD_INT 1
37631: EQUAL
37632: IFFALSE 37692
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37634: LD_VAR 0 4
37638: PPUSH
37639: LD_STRING h
37641: PUSH
37642: LD_VAR 0 2
37646: PPUSH
37647: CALL_OW 250
37651: PUSH
37652: LD_VAR 0 2
37656: PPUSH
37657: CALL_OW 251
37661: PUSH
37662: LD_VAR 0 2
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: PUSH
37685: EMPTY
37686: LIST
37687: PPUSH
37688: CALL_OW 446
37692: GO 37616
37694: POP
37695: POP
// end ;
37696: LD_VAR 0 3
37700: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37701: LD_INT 0
37703: PPUSH
37704: PPUSH
37705: PPUSH
37706: PPUSH
37707: PPUSH
37708: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37709: LD_VAR 0 1
37713: NOT
37714: PUSH
37715: LD_VAR 0 1
37719: PPUSH
37720: CALL_OW 263
37724: PUSH
37725: LD_INT 2
37727: NONEQUAL
37728: OR
37729: IFFALSE 37733
// exit ;
37731: GO 38049
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37733: LD_ADDR_VAR 0 6
37737: PUSH
37738: LD_INT 22
37740: PUSH
37741: LD_VAR 0 1
37745: PPUSH
37746: CALL_OW 255
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 2
37757: PUSH
37758: LD_INT 30
37760: PUSH
37761: LD_INT 36
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 34
37770: PUSH
37771: LD_INT 31
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: LIST
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PPUSH
37787: CALL_OW 69
37791: ST_TO_ADDR
// if not tmp then
37792: LD_VAR 0 6
37796: NOT
37797: IFFALSE 37801
// exit ;
37799: GO 38049
// result := [ ] ;
37801: LD_ADDR_VAR 0 2
37805: PUSH
37806: EMPTY
37807: ST_TO_ADDR
// for i in tmp do
37808: LD_ADDR_VAR 0 3
37812: PUSH
37813: LD_VAR 0 6
37817: PUSH
37818: FOR_IN
37819: IFFALSE 37890
// begin t := UnitsInside ( i ) ;
37821: LD_ADDR_VAR 0 4
37825: PUSH
37826: LD_VAR 0 3
37830: PPUSH
37831: CALL_OW 313
37835: ST_TO_ADDR
// if t then
37836: LD_VAR 0 4
37840: IFFALSE 37888
// for j in t do
37842: LD_ADDR_VAR 0 7
37846: PUSH
37847: LD_VAR 0 4
37851: PUSH
37852: FOR_IN
37853: IFFALSE 37886
// result := Replace ( result , result + 1 , j ) ;
37855: LD_ADDR_VAR 0 2
37859: PUSH
37860: LD_VAR 0 2
37864: PPUSH
37865: LD_VAR 0 2
37869: PUSH
37870: LD_INT 1
37872: PLUS
37873: PPUSH
37874: LD_VAR 0 7
37878: PPUSH
37879: CALL_OW 1
37883: ST_TO_ADDR
37884: GO 37852
37886: POP
37887: POP
// end ;
37888: GO 37818
37890: POP
37891: POP
// if not result then
37892: LD_VAR 0 2
37896: NOT
37897: IFFALSE 37901
// exit ;
37899: GO 38049
// mech := result [ 1 ] ;
37901: LD_ADDR_VAR 0 5
37905: PUSH
37906: LD_VAR 0 2
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: ST_TO_ADDR
// if result > 1 then
37915: LD_VAR 0 2
37919: PUSH
37920: LD_INT 1
37922: GREATER
37923: IFFALSE 38035
// begin for i = 2 to result do
37925: LD_ADDR_VAR 0 3
37929: PUSH
37930: DOUBLE
37931: LD_INT 2
37933: DEC
37934: ST_TO_ADDR
37935: LD_VAR 0 2
37939: PUSH
37940: FOR_TO
37941: IFFALSE 38033
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37943: LD_ADDR_VAR 0 4
37947: PUSH
37948: LD_VAR 0 2
37952: PUSH
37953: LD_VAR 0 3
37957: ARRAY
37958: PPUSH
37959: LD_INT 3
37961: PPUSH
37962: CALL_OW 259
37966: PUSH
37967: LD_VAR 0 2
37971: PUSH
37972: LD_VAR 0 3
37976: ARRAY
37977: PPUSH
37978: CALL_OW 432
37982: MINUS
37983: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37984: LD_VAR 0 4
37988: PUSH
37989: LD_VAR 0 5
37993: PPUSH
37994: LD_INT 3
37996: PPUSH
37997: CALL_OW 259
38001: PUSH
38002: LD_VAR 0 5
38006: PPUSH
38007: CALL_OW 432
38011: MINUS
38012: GREATEREQUAL
38013: IFFALSE 38031
// mech := result [ i ] ;
38015: LD_ADDR_VAR 0 5
38019: PUSH
38020: LD_VAR 0 2
38024: PUSH
38025: LD_VAR 0 3
38029: ARRAY
38030: ST_TO_ADDR
// end ;
38031: GO 37940
38033: POP
38034: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38035: LD_VAR 0 1
38039: PPUSH
38040: LD_VAR 0 5
38044: PPUSH
38045: CALL_OW 135
// end ;
38049: LD_VAR 0 2
38053: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38054: LD_INT 0
38056: PPUSH
38057: PPUSH
38058: PPUSH
38059: PPUSH
38060: PPUSH
38061: PPUSH
38062: PPUSH
38063: PPUSH
38064: PPUSH
38065: PPUSH
38066: PPUSH
38067: PPUSH
38068: PPUSH
// result := [ ] ;
38069: LD_ADDR_VAR 0 7
38073: PUSH
38074: EMPTY
38075: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38076: LD_VAR 0 1
38080: PPUSH
38081: CALL_OW 266
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: IN
38096: NOT
38097: IFFALSE 38101
// exit ;
38099: GO 39735
// if name then
38101: LD_VAR 0 3
38105: IFFALSE 38121
// SetBName ( base_dep , name ) ;
38107: LD_VAR 0 1
38111: PPUSH
38112: LD_VAR 0 3
38116: PPUSH
38117: CALL_OW 500
// base := GetBase ( base_dep ) ;
38121: LD_ADDR_VAR 0 15
38125: PUSH
38126: LD_VAR 0 1
38130: PPUSH
38131: CALL_OW 274
38135: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38136: LD_ADDR_VAR 0 16
38140: PUSH
38141: LD_VAR 0 1
38145: PPUSH
38146: CALL_OW 255
38150: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38151: LD_ADDR_VAR 0 17
38155: PUSH
38156: LD_VAR 0 1
38160: PPUSH
38161: CALL_OW 248
38165: ST_TO_ADDR
// if sources then
38166: LD_VAR 0 5
38170: IFFALSE 38217
// for i = 1 to 3 do
38172: LD_ADDR_VAR 0 8
38176: PUSH
38177: DOUBLE
38178: LD_INT 1
38180: DEC
38181: ST_TO_ADDR
38182: LD_INT 3
38184: PUSH
38185: FOR_TO
38186: IFFALSE 38215
// AddResourceType ( base , i , sources [ i ] ) ;
38188: LD_VAR 0 15
38192: PPUSH
38193: LD_VAR 0 8
38197: PPUSH
38198: LD_VAR 0 5
38202: PUSH
38203: LD_VAR 0 8
38207: ARRAY
38208: PPUSH
38209: CALL_OW 276
38213: GO 38185
38215: POP
38216: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38217: LD_ADDR_VAR 0 18
38221: PUSH
38222: LD_VAR 0 15
38226: PPUSH
38227: LD_VAR 0 2
38231: PPUSH
38232: LD_INT 1
38234: PPUSH
38235: CALL 37478 0 3
38239: ST_TO_ADDR
// InitHc ;
38240: CALL_OW 19
// InitUc ;
38244: CALL_OW 18
// uc_side := side ;
38248: LD_ADDR_OWVAR 20
38252: PUSH
38253: LD_VAR 0 16
38257: ST_TO_ADDR
// uc_nation := nation ;
38258: LD_ADDR_OWVAR 21
38262: PUSH
38263: LD_VAR 0 17
38267: ST_TO_ADDR
// if buildings then
38268: LD_VAR 0 18
38272: IFFALSE 39594
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38274: LD_ADDR_VAR 0 19
38278: PUSH
38279: LD_VAR 0 18
38283: PPUSH
38284: LD_INT 2
38286: PUSH
38287: LD_INT 30
38289: PUSH
38290: LD_INT 29
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 30
38299: PUSH
38300: LD_INT 30
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: LIST
38311: PPUSH
38312: CALL_OW 72
38316: ST_TO_ADDR
// if tmp then
38317: LD_VAR 0 19
38321: IFFALSE 38369
// for i in tmp do
38323: LD_ADDR_VAR 0 8
38327: PUSH
38328: LD_VAR 0 19
38332: PUSH
38333: FOR_IN
38334: IFFALSE 38367
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38336: LD_VAR 0 8
38340: PPUSH
38341: CALL_OW 250
38345: PPUSH
38346: LD_VAR 0 8
38350: PPUSH
38351: CALL_OW 251
38355: PPUSH
38356: LD_VAR 0 16
38360: PPUSH
38361: CALL_OW 441
38365: GO 38333
38367: POP
38368: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38369: LD_VAR 0 18
38373: PPUSH
38374: LD_INT 2
38376: PUSH
38377: LD_INT 30
38379: PUSH
38380: LD_INT 32
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 30
38389: PUSH
38390: LD_INT 33
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: PPUSH
38402: CALL_OW 72
38406: IFFALSE 38494
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38408: LD_ADDR_VAR 0 8
38412: PUSH
38413: LD_VAR 0 18
38417: PPUSH
38418: LD_INT 2
38420: PUSH
38421: LD_INT 30
38423: PUSH
38424: LD_INT 32
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 30
38433: PUSH
38434: LD_INT 33
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: PPUSH
38446: CALL_OW 72
38450: PUSH
38451: FOR_IN
38452: IFFALSE 38492
// begin if not GetBWeapon ( i ) then
38454: LD_VAR 0 8
38458: PPUSH
38459: CALL_OW 269
38463: NOT
38464: IFFALSE 38490
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38466: LD_VAR 0 8
38470: PPUSH
38471: LD_VAR 0 8
38475: PPUSH
38476: LD_VAR 0 2
38480: PPUSH
38481: CALL 39740 0 2
38485: PPUSH
38486: CALL_OW 431
// end ;
38490: GO 38451
38492: POP
38493: POP
// end ; for i = 1 to personel do
38494: LD_ADDR_VAR 0 8
38498: PUSH
38499: DOUBLE
38500: LD_INT 1
38502: DEC
38503: ST_TO_ADDR
38504: LD_VAR 0 6
38508: PUSH
38509: FOR_TO
38510: IFFALSE 39574
// begin if i > 4 then
38512: LD_VAR 0 8
38516: PUSH
38517: LD_INT 4
38519: GREATER
38520: IFFALSE 38524
// break ;
38522: GO 39574
// case i of 1 :
38524: LD_VAR 0 8
38528: PUSH
38529: LD_INT 1
38531: DOUBLE
38532: EQUAL
38533: IFTRUE 38537
38535: GO 38617
38537: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38538: LD_ADDR_VAR 0 12
38542: PUSH
38543: LD_VAR 0 18
38547: PPUSH
38548: LD_INT 22
38550: PUSH
38551: LD_VAR 0 16
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 58
38562: PUSH
38563: EMPTY
38564: LIST
38565: PUSH
38566: LD_INT 2
38568: PUSH
38569: LD_INT 30
38571: PUSH
38572: LD_INT 32
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 30
38581: PUSH
38582: LD_INT 4
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 30
38591: PUSH
38592: LD_INT 5
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: LIST
38609: PPUSH
38610: CALL_OW 72
38614: ST_TO_ADDR
38615: GO 38839
38617: LD_INT 2
38619: DOUBLE
38620: EQUAL
38621: IFTRUE 38625
38623: GO 38687
38625: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38626: LD_ADDR_VAR 0 12
38630: PUSH
38631: LD_VAR 0 18
38635: PPUSH
38636: LD_INT 22
38638: PUSH
38639: LD_VAR 0 16
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 2
38650: PUSH
38651: LD_INT 30
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 30
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: LIST
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PPUSH
38680: CALL_OW 72
38684: ST_TO_ADDR
38685: GO 38839
38687: LD_INT 3
38689: DOUBLE
38690: EQUAL
38691: IFTRUE 38695
38693: GO 38757
38695: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38696: LD_ADDR_VAR 0 12
38700: PUSH
38701: LD_VAR 0 18
38705: PPUSH
38706: LD_INT 22
38708: PUSH
38709: LD_VAR 0 16
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: LD_INT 30
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 30
38733: PUSH
38734: LD_INT 3
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PPUSH
38750: CALL_OW 72
38754: ST_TO_ADDR
38755: GO 38839
38757: LD_INT 4
38759: DOUBLE
38760: EQUAL
38761: IFTRUE 38765
38763: GO 38838
38765: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38766: LD_ADDR_VAR 0 12
38770: PUSH
38771: LD_VAR 0 18
38775: PPUSH
38776: LD_INT 22
38778: PUSH
38779: LD_VAR 0 16
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: LD_INT 30
38793: PUSH
38794: LD_INT 6
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 30
38803: PUSH
38804: LD_INT 7
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 30
38813: PUSH
38814: LD_INT 8
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PPUSH
38831: CALL_OW 72
38835: ST_TO_ADDR
38836: GO 38839
38838: POP
// if i = 1 then
38839: LD_VAR 0 8
38843: PUSH
38844: LD_INT 1
38846: EQUAL
38847: IFFALSE 38958
// begin tmp := [ ] ;
38849: LD_ADDR_VAR 0 19
38853: PUSH
38854: EMPTY
38855: ST_TO_ADDR
// for j in f do
38856: LD_ADDR_VAR 0 9
38860: PUSH
38861: LD_VAR 0 12
38865: PUSH
38866: FOR_IN
38867: IFFALSE 38940
// if GetBType ( j ) = b_bunker then
38869: LD_VAR 0 9
38873: PPUSH
38874: CALL_OW 266
38878: PUSH
38879: LD_INT 32
38881: EQUAL
38882: IFFALSE 38909
// tmp := Insert ( tmp , 1 , j ) else
38884: LD_ADDR_VAR 0 19
38888: PUSH
38889: LD_VAR 0 19
38893: PPUSH
38894: LD_INT 1
38896: PPUSH
38897: LD_VAR 0 9
38901: PPUSH
38902: CALL_OW 2
38906: ST_TO_ADDR
38907: GO 38938
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38909: LD_ADDR_VAR 0 19
38913: PUSH
38914: LD_VAR 0 19
38918: PPUSH
38919: LD_VAR 0 19
38923: PUSH
38924: LD_INT 1
38926: PLUS
38927: PPUSH
38928: LD_VAR 0 9
38932: PPUSH
38933: CALL_OW 2
38937: ST_TO_ADDR
38938: GO 38866
38940: POP
38941: POP
// if tmp then
38942: LD_VAR 0 19
38946: IFFALSE 38958
// f := tmp ;
38948: LD_ADDR_VAR 0 12
38952: PUSH
38953: LD_VAR 0 19
38957: ST_TO_ADDR
// end ; x := personel [ i ] ;
38958: LD_ADDR_VAR 0 13
38962: PUSH
38963: LD_VAR 0 6
38967: PUSH
38968: LD_VAR 0 8
38972: ARRAY
38973: ST_TO_ADDR
// if x = - 1 then
38974: LD_VAR 0 13
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: EQUAL
38983: IFFALSE 39192
// begin for j in f do
38985: LD_ADDR_VAR 0 9
38989: PUSH
38990: LD_VAR 0 12
38994: PUSH
38995: FOR_IN
38996: IFFALSE 39188
// repeat InitHc ;
38998: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39002: LD_VAR 0 9
39006: PPUSH
39007: CALL_OW 266
39011: PUSH
39012: LD_INT 5
39014: EQUAL
39015: IFFALSE 39085
// begin if UnitsInside ( j ) < 3 then
39017: LD_VAR 0 9
39021: PPUSH
39022: CALL_OW 313
39026: PUSH
39027: LD_INT 3
39029: LESS
39030: IFFALSE 39066
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39032: LD_INT 0
39034: PPUSH
39035: LD_INT 5
39037: PUSH
39038: LD_INT 8
39040: PUSH
39041: LD_INT 9
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: LIST
39048: PUSH
39049: LD_VAR 0 17
39053: ARRAY
39054: PPUSH
39055: LD_VAR 0 4
39059: PPUSH
39060: CALL_OW 380
39064: GO 39083
// PrepareHuman ( false , i , skill ) ;
39066: LD_INT 0
39068: PPUSH
39069: LD_VAR 0 8
39073: PPUSH
39074: LD_VAR 0 4
39078: PPUSH
39079: CALL_OW 380
// end else
39083: GO 39102
// PrepareHuman ( false , i , skill ) ;
39085: LD_INT 0
39087: PPUSH
39088: LD_VAR 0 8
39092: PPUSH
39093: LD_VAR 0 4
39097: PPUSH
39098: CALL_OW 380
// un := CreateHuman ;
39102: LD_ADDR_VAR 0 14
39106: PUSH
39107: CALL_OW 44
39111: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39112: LD_ADDR_VAR 0 7
39116: PUSH
39117: LD_VAR 0 7
39121: PPUSH
39122: LD_INT 1
39124: PPUSH
39125: LD_VAR 0 14
39129: PPUSH
39130: CALL_OW 2
39134: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39135: LD_VAR 0 14
39139: PPUSH
39140: LD_VAR 0 9
39144: PPUSH
39145: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39149: LD_VAR 0 9
39153: PPUSH
39154: CALL_OW 313
39158: PUSH
39159: LD_INT 6
39161: EQUAL
39162: PUSH
39163: LD_VAR 0 9
39167: PPUSH
39168: CALL_OW 266
39172: PUSH
39173: LD_INT 32
39175: PUSH
39176: LD_INT 31
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: IN
39183: OR
39184: IFFALSE 38998
39186: GO 38995
39188: POP
39189: POP
// end else
39190: GO 39572
// for j = 1 to x do
39192: LD_ADDR_VAR 0 9
39196: PUSH
39197: DOUBLE
39198: LD_INT 1
39200: DEC
39201: ST_TO_ADDR
39202: LD_VAR 0 13
39206: PUSH
39207: FOR_TO
39208: IFFALSE 39570
// begin InitHc ;
39210: CALL_OW 19
// if not f then
39214: LD_VAR 0 12
39218: NOT
39219: IFFALSE 39308
// begin PrepareHuman ( false , i , skill ) ;
39221: LD_INT 0
39223: PPUSH
39224: LD_VAR 0 8
39228: PPUSH
39229: LD_VAR 0 4
39233: PPUSH
39234: CALL_OW 380
// un := CreateHuman ;
39238: LD_ADDR_VAR 0 14
39242: PUSH
39243: CALL_OW 44
39247: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39248: LD_ADDR_VAR 0 7
39252: PUSH
39253: LD_VAR 0 7
39257: PPUSH
39258: LD_INT 1
39260: PPUSH
39261: LD_VAR 0 14
39265: PPUSH
39266: CALL_OW 2
39270: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39271: LD_VAR 0 14
39275: PPUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: CALL_OW 250
39285: PPUSH
39286: LD_VAR 0 1
39290: PPUSH
39291: CALL_OW 251
39295: PPUSH
39296: LD_INT 10
39298: PPUSH
39299: LD_INT 0
39301: PPUSH
39302: CALL_OW 50
// continue ;
39306: GO 39207
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39308: LD_VAR 0 12
39312: PUSH
39313: LD_INT 1
39315: ARRAY
39316: PPUSH
39317: CALL_OW 313
39321: PUSH
39322: LD_VAR 0 12
39326: PUSH
39327: LD_INT 1
39329: ARRAY
39330: PPUSH
39331: CALL_OW 266
39335: PUSH
39336: LD_INT 32
39338: PUSH
39339: LD_INT 31
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: IN
39346: AND
39347: PUSH
39348: LD_VAR 0 12
39352: PUSH
39353: LD_INT 1
39355: ARRAY
39356: PPUSH
39357: CALL_OW 313
39361: PUSH
39362: LD_INT 6
39364: EQUAL
39365: OR
39366: IFFALSE 39386
// f := Delete ( f , 1 ) ;
39368: LD_ADDR_VAR 0 12
39372: PUSH
39373: LD_VAR 0 12
39377: PPUSH
39378: LD_INT 1
39380: PPUSH
39381: CALL_OW 3
39385: ST_TO_ADDR
// if not f then
39386: LD_VAR 0 12
39390: NOT
39391: IFFALSE 39409
// begin x := x + 2 ;
39393: LD_ADDR_VAR 0 13
39397: PUSH
39398: LD_VAR 0 13
39402: PUSH
39403: LD_INT 2
39405: PLUS
39406: ST_TO_ADDR
// continue ;
39407: GO 39207
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39409: LD_VAR 0 12
39413: PUSH
39414: LD_INT 1
39416: ARRAY
39417: PPUSH
39418: CALL_OW 266
39422: PUSH
39423: LD_INT 5
39425: EQUAL
39426: IFFALSE 39500
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39428: LD_VAR 0 12
39432: PUSH
39433: LD_INT 1
39435: ARRAY
39436: PPUSH
39437: CALL_OW 313
39441: PUSH
39442: LD_INT 3
39444: LESS
39445: IFFALSE 39481
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39447: LD_INT 0
39449: PPUSH
39450: LD_INT 5
39452: PUSH
39453: LD_INT 8
39455: PUSH
39456: LD_INT 9
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: LIST
39463: PUSH
39464: LD_VAR 0 17
39468: ARRAY
39469: PPUSH
39470: LD_VAR 0 4
39474: PPUSH
39475: CALL_OW 380
39479: GO 39498
// PrepareHuman ( false , i , skill ) ;
39481: LD_INT 0
39483: PPUSH
39484: LD_VAR 0 8
39488: PPUSH
39489: LD_VAR 0 4
39493: PPUSH
39494: CALL_OW 380
// end else
39498: GO 39517
// PrepareHuman ( false , i , skill ) ;
39500: LD_INT 0
39502: PPUSH
39503: LD_VAR 0 8
39507: PPUSH
39508: LD_VAR 0 4
39512: PPUSH
39513: CALL_OW 380
// un := CreateHuman ;
39517: LD_ADDR_VAR 0 14
39521: PUSH
39522: CALL_OW 44
39526: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39527: LD_ADDR_VAR 0 7
39531: PUSH
39532: LD_VAR 0 7
39536: PPUSH
39537: LD_INT 1
39539: PPUSH
39540: LD_VAR 0 14
39544: PPUSH
39545: CALL_OW 2
39549: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39550: LD_VAR 0 14
39554: PPUSH
39555: LD_VAR 0 12
39559: PUSH
39560: LD_INT 1
39562: ARRAY
39563: PPUSH
39564: CALL_OW 52
// end ;
39568: GO 39207
39570: POP
39571: POP
// end ;
39572: GO 38509
39574: POP
39575: POP
// result := result ^ buildings ;
39576: LD_ADDR_VAR 0 7
39580: PUSH
39581: LD_VAR 0 7
39585: PUSH
39586: LD_VAR 0 18
39590: ADD
39591: ST_TO_ADDR
// end else
39592: GO 39735
// begin for i = 1 to personel do
39594: LD_ADDR_VAR 0 8
39598: PUSH
39599: DOUBLE
39600: LD_INT 1
39602: DEC
39603: ST_TO_ADDR
39604: LD_VAR 0 6
39608: PUSH
39609: FOR_TO
39610: IFFALSE 39733
// begin if i > 4 then
39612: LD_VAR 0 8
39616: PUSH
39617: LD_INT 4
39619: GREATER
39620: IFFALSE 39624
// break ;
39622: GO 39733
// x := personel [ i ] ;
39624: LD_ADDR_VAR 0 13
39628: PUSH
39629: LD_VAR 0 6
39633: PUSH
39634: LD_VAR 0 8
39638: ARRAY
39639: ST_TO_ADDR
// if x = - 1 then
39640: LD_VAR 0 13
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: EQUAL
39649: IFFALSE 39653
// continue ;
39651: GO 39609
// PrepareHuman ( false , i , skill ) ;
39653: LD_INT 0
39655: PPUSH
39656: LD_VAR 0 8
39660: PPUSH
39661: LD_VAR 0 4
39665: PPUSH
39666: CALL_OW 380
// un := CreateHuman ;
39670: LD_ADDR_VAR 0 14
39674: PUSH
39675: CALL_OW 44
39679: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39680: LD_VAR 0 14
39684: PPUSH
39685: LD_VAR 0 1
39689: PPUSH
39690: CALL_OW 250
39694: PPUSH
39695: LD_VAR 0 1
39699: PPUSH
39700: CALL_OW 251
39704: PPUSH
39705: LD_INT 10
39707: PPUSH
39708: LD_INT 0
39710: PPUSH
39711: CALL_OW 50
// result := result ^ un ;
39715: LD_ADDR_VAR 0 7
39719: PUSH
39720: LD_VAR 0 7
39724: PUSH
39725: LD_VAR 0 14
39729: ADD
39730: ST_TO_ADDR
// end ;
39731: GO 39609
39733: POP
39734: POP
// end ; end ;
39735: LD_VAR 0 7
39739: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39740: LD_INT 0
39742: PPUSH
39743: PPUSH
39744: PPUSH
39745: PPUSH
39746: PPUSH
39747: PPUSH
39748: PPUSH
39749: PPUSH
39750: PPUSH
39751: PPUSH
39752: PPUSH
39753: PPUSH
39754: PPUSH
39755: PPUSH
39756: PPUSH
39757: PPUSH
// result := false ;
39758: LD_ADDR_VAR 0 3
39762: PUSH
39763: LD_INT 0
39765: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39766: LD_VAR 0 1
39770: NOT
39771: PUSH
39772: LD_VAR 0 1
39776: PPUSH
39777: CALL_OW 266
39781: PUSH
39782: LD_INT 32
39784: PUSH
39785: LD_INT 33
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: IN
39792: NOT
39793: OR
39794: IFFALSE 39798
// exit ;
39796: GO 40907
// nat := GetNation ( tower ) ;
39798: LD_ADDR_VAR 0 12
39802: PUSH
39803: LD_VAR 0 1
39807: PPUSH
39808: CALL_OW 248
39812: ST_TO_ADDR
// side := GetSide ( tower ) ;
39813: LD_ADDR_VAR 0 16
39817: PUSH
39818: LD_VAR 0 1
39822: PPUSH
39823: CALL_OW 255
39827: ST_TO_ADDR
// x := GetX ( tower ) ;
39828: LD_ADDR_VAR 0 10
39832: PUSH
39833: LD_VAR 0 1
39837: PPUSH
39838: CALL_OW 250
39842: ST_TO_ADDR
// y := GetY ( tower ) ;
39843: LD_ADDR_VAR 0 11
39847: PUSH
39848: LD_VAR 0 1
39852: PPUSH
39853: CALL_OW 251
39857: ST_TO_ADDR
// if not x or not y then
39858: LD_VAR 0 10
39862: NOT
39863: PUSH
39864: LD_VAR 0 11
39868: NOT
39869: OR
39870: IFFALSE 39874
// exit ;
39872: GO 40907
// weapon := 0 ;
39874: LD_ADDR_VAR 0 18
39878: PUSH
39879: LD_INT 0
39881: ST_TO_ADDR
// fac_list := [ ] ;
39882: LD_ADDR_VAR 0 17
39886: PUSH
39887: EMPTY
39888: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39889: LD_ADDR_VAR 0 6
39893: PUSH
39894: LD_VAR 0 1
39898: PPUSH
39899: CALL_OW 274
39903: PPUSH
39904: LD_VAR 0 2
39908: PPUSH
39909: LD_INT 0
39911: PPUSH
39912: CALL 37478 0 3
39916: PPUSH
39917: LD_INT 30
39919: PUSH
39920: LD_INT 3
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PPUSH
39927: CALL_OW 72
39931: ST_TO_ADDR
// if not factories then
39932: LD_VAR 0 6
39936: NOT
39937: IFFALSE 39941
// exit ;
39939: GO 40907
// for i in factories do
39941: LD_ADDR_VAR 0 8
39945: PUSH
39946: LD_VAR 0 6
39950: PUSH
39951: FOR_IN
39952: IFFALSE 39977
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39954: LD_ADDR_VAR 0 17
39958: PUSH
39959: LD_VAR 0 17
39963: PUSH
39964: LD_VAR 0 8
39968: PPUSH
39969: CALL_OW 478
39973: UNION
39974: ST_TO_ADDR
39975: GO 39951
39977: POP
39978: POP
// if not fac_list then
39979: LD_VAR 0 17
39983: NOT
39984: IFFALSE 39988
// exit ;
39986: GO 40907
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39988: LD_ADDR_VAR 0 5
39992: PUSH
39993: LD_INT 4
39995: PUSH
39996: LD_INT 5
39998: PUSH
39999: LD_INT 9
40001: PUSH
40002: LD_INT 10
40004: PUSH
40005: LD_INT 6
40007: PUSH
40008: LD_INT 7
40010: PUSH
40011: LD_INT 11
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 27
40025: PUSH
40026: LD_INT 28
40028: PUSH
40029: LD_INT 26
40031: PUSH
40032: LD_INT 30
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 43
40043: PUSH
40044: LD_INT 44
40046: PUSH
40047: LD_INT 46
40049: PUSH
40050: LD_INT 45
40052: PUSH
40053: LD_INT 47
40055: PUSH
40056: LD_INT 49
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: LIST
40071: PUSH
40072: LD_VAR 0 12
40076: ARRAY
40077: ST_TO_ADDR
// list := list isect fac_list ;
40078: LD_ADDR_VAR 0 5
40082: PUSH
40083: LD_VAR 0 5
40087: PUSH
40088: LD_VAR 0 17
40092: ISECT
40093: ST_TO_ADDR
// if not list then
40094: LD_VAR 0 5
40098: NOT
40099: IFFALSE 40103
// exit ;
40101: GO 40907
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40103: LD_VAR 0 12
40107: PUSH
40108: LD_INT 3
40110: EQUAL
40111: PUSH
40112: LD_INT 49
40114: PUSH
40115: LD_VAR 0 5
40119: IN
40120: AND
40121: PUSH
40122: LD_INT 31
40124: PPUSH
40125: LD_VAR 0 16
40129: PPUSH
40130: CALL_OW 321
40134: PUSH
40135: LD_INT 2
40137: EQUAL
40138: AND
40139: IFFALSE 40199
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40141: LD_INT 22
40143: PUSH
40144: LD_VAR 0 16
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 35
40155: PUSH
40156: LD_INT 49
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 91
40165: PUSH
40166: LD_VAR 0 1
40170: PUSH
40171: LD_INT 10
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: LIST
40183: PPUSH
40184: CALL_OW 69
40188: NOT
40189: IFFALSE 40199
// weapon := ru_time_lapser ;
40191: LD_ADDR_VAR 0 18
40195: PUSH
40196: LD_INT 49
40198: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40199: LD_VAR 0 12
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: IN
40214: PUSH
40215: LD_INT 11
40217: PUSH
40218: LD_VAR 0 5
40222: IN
40223: PUSH
40224: LD_INT 30
40226: PUSH
40227: LD_VAR 0 5
40231: IN
40232: OR
40233: AND
40234: PUSH
40235: LD_INT 6
40237: PPUSH
40238: LD_VAR 0 16
40242: PPUSH
40243: CALL_OW 321
40247: PUSH
40248: LD_INT 2
40250: EQUAL
40251: AND
40252: IFFALSE 40417
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40254: LD_INT 22
40256: PUSH
40257: LD_VAR 0 16
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 35
40271: PUSH
40272: LD_INT 11
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 35
40281: PUSH
40282: LD_INT 30
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 91
40296: PUSH
40297: LD_VAR 0 1
40301: PUSH
40302: LD_INT 18
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: LIST
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: LIST
40314: PPUSH
40315: CALL_OW 69
40319: NOT
40320: PUSH
40321: LD_INT 22
40323: PUSH
40324: LD_VAR 0 16
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 2
40335: PUSH
40336: LD_INT 30
40338: PUSH
40339: LD_INT 32
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 30
40348: PUSH
40349: LD_INT 33
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 91
40363: PUSH
40364: LD_VAR 0 1
40368: PUSH
40369: LD_INT 12
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: LIST
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: PUSH
40382: EMPTY
40383: LIST
40384: PPUSH
40385: CALL_OW 69
40389: PUSH
40390: LD_INT 2
40392: GREATER
40393: AND
40394: IFFALSE 40417
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40396: LD_ADDR_VAR 0 18
40400: PUSH
40401: LD_INT 11
40403: PUSH
40404: LD_INT 30
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_VAR 0 12
40415: ARRAY
40416: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40417: LD_VAR 0 18
40421: NOT
40422: PUSH
40423: LD_INT 40
40425: PPUSH
40426: LD_VAR 0 16
40430: PPUSH
40431: CALL_OW 321
40435: PUSH
40436: LD_INT 2
40438: EQUAL
40439: AND
40440: PUSH
40441: LD_INT 7
40443: PUSH
40444: LD_VAR 0 5
40448: IN
40449: PUSH
40450: LD_INT 28
40452: PUSH
40453: LD_VAR 0 5
40457: IN
40458: OR
40459: PUSH
40460: LD_INT 45
40462: PUSH
40463: LD_VAR 0 5
40467: IN
40468: OR
40469: AND
40470: IFFALSE 40724
// begin hex := GetHexInfo ( x , y ) ;
40472: LD_ADDR_VAR 0 4
40476: PUSH
40477: LD_VAR 0 10
40481: PPUSH
40482: LD_VAR 0 11
40486: PPUSH
40487: CALL_OW 546
40491: ST_TO_ADDR
// if hex [ 1 ] then
40492: LD_VAR 0 4
40496: PUSH
40497: LD_INT 1
40499: ARRAY
40500: IFFALSE 40504
// exit ;
40502: GO 40907
// height := hex [ 2 ] ;
40504: LD_ADDR_VAR 0 15
40508: PUSH
40509: LD_VAR 0 4
40513: PUSH
40514: LD_INT 2
40516: ARRAY
40517: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40518: LD_ADDR_VAR 0 14
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: LD_INT 2
40528: PUSH
40529: LD_INT 3
40531: PUSH
40532: LD_INT 5
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: ST_TO_ADDR
// for i in tmp do
40541: LD_ADDR_VAR 0 8
40545: PUSH
40546: LD_VAR 0 14
40550: PUSH
40551: FOR_IN
40552: IFFALSE 40722
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40554: LD_ADDR_VAR 0 9
40558: PUSH
40559: LD_VAR 0 10
40563: PPUSH
40564: LD_VAR 0 8
40568: PPUSH
40569: LD_INT 5
40571: PPUSH
40572: CALL_OW 272
40576: PUSH
40577: LD_VAR 0 11
40581: PPUSH
40582: LD_VAR 0 8
40586: PPUSH
40587: LD_INT 5
40589: PPUSH
40590: CALL_OW 273
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40599: LD_VAR 0 9
40603: PUSH
40604: LD_INT 1
40606: ARRAY
40607: PPUSH
40608: LD_VAR 0 9
40612: PUSH
40613: LD_INT 2
40615: ARRAY
40616: PPUSH
40617: CALL_OW 488
40621: IFFALSE 40720
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40623: LD_ADDR_VAR 0 4
40627: PUSH
40628: LD_VAR 0 9
40632: PUSH
40633: LD_INT 1
40635: ARRAY
40636: PPUSH
40637: LD_VAR 0 9
40641: PUSH
40642: LD_INT 2
40644: ARRAY
40645: PPUSH
40646: CALL_OW 546
40650: ST_TO_ADDR
// if hex [ 1 ] then
40651: LD_VAR 0 4
40655: PUSH
40656: LD_INT 1
40658: ARRAY
40659: IFFALSE 40663
// continue ;
40661: GO 40551
// h := hex [ 2 ] ;
40663: LD_ADDR_VAR 0 13
40667: PUSH
40668: LD_VAR 0 4
40672: PUSH
40673: LD_INT 2
40675: ARRAY
40676: ST_TO_ADDR
// if h + 7 < height then
40677: LD_VAR 0 13
40681: PUSH
40682: LD_INT 7
40684: PLUS
40685: PUSH
40686: LD_VAR 0 15
40690: LESS
40691: IFFALSE 40720
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40693: LD_ADDR_VAR 0 18
40697: PUSH
40698: LD_INT 7
40700: PUSH
40701: LD_INT 28
40703: PUSH
40704: LD_INT 45
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: LIST
40711: PUSH
40712: LD_VAR 0 12
40716: ARRAY
40717: ST_TO_ADDR
// break ;
40718: GO 40722
// end ; end ; end ;
40720: GO 40551
40722: POP
40723: POP
// end ; if not weapon then
40724: LD_VAR 0 18
40728: NOT
40729: IFFALSE 40789
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40731: LD_ADDR_VAR 0 5
40735: PUSH
40736: LD_VAR 0 5
40740: PUSH
40741: LD_INT 11
40743: PUSH
40744: LD_INT 30
40746: PUSH
40747: LD_INT 49
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: LIST
40754: DIFF
40755: ST_TO_ADDR
// if not list then
40756: LD_VAR 0 5
40760: NOT
40761: IFFALSE 40765
// exit ;
40763: GO 40907
// weapon := list [ rand ( 1 , list ) ] ;
40765: LD_ADDR_VAR 0 18
40769: PUSH
40770: LD_VAR 0 5
40774: PUSH
40775: LD_INT 1
40777: PPUSH
40778: LD_VAR 0 5
40782: PPUSH
40783: CALL_OW 12
40787: ARRAY
40788: ST_TO_ADDR
// end ; if weapon then
40789: LD_VAR 0 18
40793: IFFALSE 40907
// begin tmp := CostOfWeapon ( weapon ) ;
40795: LD_ADDR_VAR 0 14
40799: PUSH
40800: LD_VAR 0 18
40804: PPUSH
40805: CALL_OW 451
40809: ST_TO_ADDR
// j := GetBase ( tower ) ;
40810: LD_ADDR_VAR 0 9
40814: PUSH
40815: LD_VAR 0 1
40819: PPUSH
40820: CALL_OW 274
40824: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40825: LD_VAR 0 9
40829: PPUSH
40830: LD_INT 1
40832: PPUSH
40833: CALL_OW 275
40837: PUSH
40838: LD_VAR 0 14
40842: PUSH
40843: LD_INT 1
40845: ARRAY
40846: GREATEREQUAL
40847: PUSH
40848: LD_VAR 0 9
40852: PPUSH
40853: LD_INT 2
40855: PPUSH
40856: CALL_OW 275
40860: PUSH
40861: LD_VAR 0 14
40865: PUSH
40866: LD_INT 2
40868: ARRAY
40869: GREATEREQUAL
40870: AND
40871: PUSH
40872: LD_VAR 0 9
40876: PPUSH
40877: LD_INT 3
40879: PPUSH
40880: CALL_OW 275
40884: PUSH
40885: LD_VAR 0 14
40889: PUSH
40890: LD_INT 3
40892: ARRAY
40893: GREATEREQUAL
40894: AND
40895: IFFALSE 40907
// result := weapon ;
40897: LD_ADDR_VAR 0 3
40901: PUSH
40902: LD_VAR 0 18
40906: ST_TO_ADDR
// end ; end ;
40907: LD_VAR 0 3
40911: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40912: LD_INT 0
40914: PPUSH
40915: PPUSH
// result := true ;
40916: LD_ADDR_VAR 0 3
40920: PUSH
40921: LD_INT 1
40923: ST_TO_ADDR
// if array1 = array2 then
40924: LD_VAR 0 1
40928: PUSH
40929: LD_VAR 0 2
40933: EQUAL
40934: IFFALSE 40994
// begin for i = 1 to array1 do
40936: LD_ADDR_VAR 0 4
40940: PUSH
40941: DOUBLE
40942: LD_INT 1
40944: DEC
40945: ST_TO_ADDR
40946: LD_VAR 0 1
40950: PUSH
40951: FOR_TO
40952: IFFALSE 40990
// if array1 [ i ] <> array2 [ i ] then
40954: LD_VAR 0 1
40958: PUSH
40959: LD_VAR 0 4
40963: ARRAY
40964: PUSH
40965: LD_VAR 0 2
40969: PUSH
40970: LD_VAR 0 4
40974: ARRAY
40975: NONEQUAL
40976: IFFALSE 40988
// begin result := false ;
40978: LD_ADDR_VAR 0 3
40982: PUSH
40983: LD_INT 0
40985: ST_TO_ADDR
// break ;
40986: GO 40990
// end ;
40988: GO 40951
40990: POP
40991: POP
// end else
40992: GO 41002
// result := false ;
40994: LD_ADDR_VAR 0 3
40998: PUSH
40999: LD_INT 0
41001: ST_TO_ADDR
// end ;
41002: LD_VAR 0 3
41006: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41007: LD_INT 0
41009: PPUSH
41010: PPUSH
// if not array1 or not array2 then
41011: LD_VAR 0 1
41015: NOT
41016: PUSH
41017: LD_VAR 0 2
41021: NOT
41022: OR
41023: IFFALSE 41027
// exit ;
41025: GO 41091
// result := true ;
41027: LD_ADDR_VAR 0 3
41031: PUSH
41032: LD_INT 1
41034: ST_TO_ADDR
// for i = 1 to array1 do
41035: LD_ADDR_VAR 0 4
41039: PUSH
41040: DOUBLE
41041: LD_INT 1
41043: DEC
41044: ST_TO_ADDR
41045: LD_VAR 0 1
41049: PUSH
41050: FOR_TO
41051: IFFALSE 41089
// if array1 [ i ] <> array2 [ i ] then
41053: LD_VAR 0 1
41057: PUSH
41058: LD_VAR 0 4
41062: ARRAY
41063: PUSH
41064: LD_VAR 0 2
41068: PUSH
41069: LD_VAR 0 4
41073: ARRAY
41074: NONEQUAL
41075: IFFALSE 41087
// begin result := false ;
41077: LD_ADDR_VAR 0 3
41081: PUSH
41082: LD_INT 0
41084: ST_TO_ADDR
// break ;
41085: GO 41089
// end ;
41087: GO 41050
41089: POP
41090: POP
// end ;
41091: LD_VAR 0 3
41095: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41096: LD_INT 0
41098: PPUSH
41099: PPUSH
41100: PPUSH
// pom := GetBase ( fac ) ;
41101: LD_ADDR_VAR 0 5
41105: PUSH
41106: LD_VAR 0 1
41110: PPUSH
41111: CALL_OW 274
41115: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41116: LD_ADDR_VAR 0 4
41120: PUSH
41121: LD_VAR 0 2
41125: PUSH
41126: LD_INT 1
41128: ARRAY
41129: PPUSH
41130: LD_VAR 0 2
41134: PUSH
41135: LD_INT 2
41137: ARRAY
41138: PPUSH
41139: LD_VAR 0 2
41143: PUSH
41144: LD_INT 3
41146: ARRAY
41147: PPUSH
41148: LD_VAR 0 2
41152: PUSH
41153: LD_INT 4
41155: ARRAY
41156: PPUSH
41157: CALL_OW 449
41161: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41162: LD_ADDR_VAR 0 3
41166: PUSH
41167: LD_VAR 0 5
41171: PPUSH
41172: LD_INT 1
41174: PPUSH
41175: CALL_OW 275
41179: PUSH
41180: LD_VAR 0 4
41184: PUSH
41185: LD_INT 1
41187: ARRAY
41188: GREATEREQUAL
41189: PUSH
41190: LD_VAR 0 5
41194: PPUSH
41195: LD_INT 2
41197: PPUSH
41198: CALL_OW 275
41202: PUSH
41203: LD_VAR 0 4
41207: PUSH
41208: LD_INT 2
41210: ARRAY
41211: GREATEREQUAL
41212: AND
41213: PUSH
41214: LD_VAR 0 5
41218: PPUSH
41219: LD_INT 3
41221: PPUSH
41222: CALL_OW 275
41226: PUSH
41227: LD_VAR 0 4
41231: PUSH
41232: LD_INT 3
41234: ARRAY
41235: GREATEREQUAL
41236: AND
41237: ST_TO_ADDR
// end ;
41238: LD_VAR 0 3
41242: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41243: LD_INT 0
41245: PPUSH
41246: PPUSH
41247: PPUSH
41248: PPUSH
// pom := GetBase ( building ) ;
41249: LD_ADDR_VAR 0 3
41253: PUSH
41254: LD_VAR 0 1
41258: PPUSH
41259: CALL_OW 274
41263: ST_TO_ADDR
// if not pom then
41264: LD_VAR 0 3
41268: NOT
41269: IFFALSE 41273
// exit ;
41271: GO 41443
// btype := GetBType ( building ) ;
41273: LD_ADDR_VAR 0 5
41277: PUSH
41278: LD_VAR 0 1
41282: PPUSH
41283: CALL_OW 266
41287: ST_TO_ADDR
// if btype = b_armoury then
41288: LD_VAR 0 5
41292: PUSH
41293: LD_INT 4
41295: EQUAL
41296: IFFALSE 41306
// btype := b_barracks ;
41298: LD_ADDR_VAR 0 5
41302: PUSH
41303: LD_INT 5
41305: ST_TO_ADDR
// if btype = b_depot then
41306: LD_VAR 0 5
41310: PUSH
41311: LD_INT 0
41313: EQUAL
41314: IFFALSE 41324
// btype := b_warehouse ;
41316: LD_ADDR_VAR 0 5
41320: PUSH
41321: LD_INT 1
41323: ST_TO_ADDR
// if btype = b_workshop then
41324: LD_VAR 0 5
41328: PUSH
41329: LD_INT 2
41331: EQUAL
41332: IFFALSE 41342
// btype := b_factory ;
41334: LD_ADDR_VAR 0 5
41338: PUSH
41339: LD_INT 3
41341: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41342: LD_ADDR_VAR 0 4
41346: PUSH
41347: LD_VAR 0 5
41351: PPUSH
41352: LD_VAR 0 1
41356: PPUSH
41357: CALL_OW 248
41361: PPUSH
41362: CALL_OW 450
41366: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41367: LD_ADDR_VAR 0 2
41371: PUSH
41372: LD_VAR 0 3
41376: PPUSH
41377: LD_INT 1
41379: PPUSH
41380: CALL_OW 275
41384: PUSH
41385: LD_VAR 0 4
41389: PUSH
41390: LD_INT 1
41392: ARRAY
41393: GREATEREQUAL
41394: PUSH
41395: LD_VAR 0 3
41399: PPUSH
41400: LD_INT 2
41402: PPUSH
41403: CALL_OW 275
41407: PUSH
41408: LD_VAR 0 4
41412: PUSH
41413: LD_INT 2
41415: ARRAY
41416: GREATEREQUAL
41417: AND
41418: PUSH
41419: LD_VAR 0 3
41423: PPUSH
41424: LD_INT 3
41426: PPUSH
41427: CALL_OW 275
41431: PUSH
41432: LD_VAR 0 4
41436: PUSH
41437: LD_INT 3
41439: ARRAY
41440: GREATEREQUAL
41441: AND
41442: ST_TO_ADDR
// end ;
41443: LD_VAR 0 2
41447: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41448: LD_INT 0
41450: PPUSH
41451: PPUSH
41452: PPUSH
// pom := GetBase ( building ) ;
41453: LD_ADDR_VAR 0 4
41457: PUSH
41458: LD_VAR 0 1
41462: PPUSH
41463: CALL_OW 274
41467: ST_TO_ADDR
// if not pom then
41468: LD_VAR 0 4
41472: NOT
41473: IFFALSE 41477
// exit ;
41475: GO 41578
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41477: LD_ADDR_VAR 0 5
41481: PUSH
41482: LD_VAR 0 2
41486: PPUSH
41487: LD_VAR 0 1
41491: PPUSH
41492: CALL_OW 248
41496: PPUSH
41497: CALL_OW 450
41501: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41502: LD_ADDR_VAR 0 3
41506: PUSH
41507: LD_VAR 0 4
41511: PPUSH
41512: LD_INT 1
41514: PPUSH
41515: CALL_OW 275
41519: PUSH
41520: LD_VAR 0 5
41524: PUSH
41525: LD_INT 1
41527: ARRAY
41528: GREATEREQUAL
41529: PUSH
41530: LD_VAR 0 4
41534: PPUSH
41535: LD_INT 2
41537: PPUSH
41538: CALL_OW 275
41542: PUSH
41543: LD_VAR 0 5
41547: PUSH
41548: LD_INT 2
41550: ARRAY
41551: GREATEREQUAL
41552: AND
41553: PUSH
41554: LD_VAR 0 4
41558: PPUSH
41559: LD_INT 3
41561: PPUSH
41562: CALL_OW 275
41566: PUSH
41567: LD_VAR 0 5
41571: PUSH
41572: LD_INT 3
41574: ARRAY
41575: GREATEREQUAL
41576: AND
41577: ST_TO_ADDR
// end ;
41578: LD_VAR 0 3
41582: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41583: LD_INT 0
41585: PPUSH
41586: PPUSH
41587: PPUSH
41588: PPUSH
41589: PPUSH
41590: PPUSH
41591: PPUSH
41592: PPUSH
41593: PPUSH
41594: PPUSH
41595: PPUSH
// result := false ;
41596: LD_ADDR_VAR 0 8
41600: PUSH
41601: LD_INT 0
41603: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41604: LD_VAR 0 5
41608: NOT
41609: PUSH
41610: LD_VAR 0 1
41614: NOT
41615: OR
41616: PUSH
41617: LD_VAR 0 2
41621: NOT
41622: OR
41623: PUSH
41624: LD_VAR 0 3
41628: NOT
41629: OR
41630: IFFALSE 41634
// exit ;
41632: GO 42448
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41634: LD_ADDR_VAR 0 14
41638: PUSH
41639: LD_VAR 0 1
41643: PPUSH
41644: LD_VAR 0 2
41648: PPUSH
41649: LD_VAR 0 3
41653: PPUSH
41654: LD_VAR 0 4
41658: PPUSH
41659: LD_VAR 0 5
41663: PUSH
41664: LD_INT 1
41666: ARRAY
41667: PPUSH
41668: CALL_OW 248
41672: PPUSH
41673: LD_INT 0
41675: PPUSH
41676: CALL 43685 0 6
41680: ST_TO_ADDR
// if not hexes then
41681: LD_VAR 0 14
41685: NOT
41686: IFFALSE 41690
// exit ;
41688: GO 42448
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41690: LD_ADDR_VAR 0 17
41694: PUSH
41695: LD_VAR 0 5
41699: PPUSH
41700: LD_INT 22
41702: PUSH
41703: LD_VAR 0 13
41707: PPUSH
41708: CALL_OW 255
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: LD_INT 30
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 30
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: LIST
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PPUSH
41749: CALL_OW 72
41753: ST_TO_ADDR
// for i = 1 to hexes do
41754: LD_ADDR_VAR 0 9
41758: PUSH
41759: DOUBLE
41760: LD_INT 1
41762: DEC
41763: ST_TO_ADDR
41764: LD_VAR 0 14
41768: PUSH
41769: FOR_TO
41770: IFFALSE 42446
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41772: LD_ADDR_VAR 0 13
41776: PUSH
41777: LD_VAR 0 14
41781: PUSH
41782: LD_VAR 0 9
41786: ARRAY
41787: PUSH
41788: LD_INT 1
41790: ARRAY
41791: PPUSH
41792: LD_VAR 0 14
41796: PUSH
41797: LD_VAR 0 9
41801: ARRAY
41802: PUSH
41803: LD_INT 2
41805: ARRAY
41806: PPUSH
41807: CALL_OW 428
41811: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41812: LD_VAR 0 14
41816: PUSH
41817: LD_VAR 0 9
41821: ARRAY
41822: PUSH
41823: LD_INT 1
41825: ARRAY
41826: PPUSH
41827: LD_VAR 0 14
41831: PUSH
41832: LD_VAR 0 9
41836: ARRAY
41837: PUSH
41838: LD_INT 2
41840: ARRAY
41841: PPUSH
41842: CALL_OW 351
41846: PUSH
41847: LD_VAR 0 14
41851: PUSH
41852: LD_VAR 0 9
41856: ARRAY
41857: PUSH
41858: LD_INT 1
41860: ARRAY
41861: PPUSH
41862: LD_VAR 0 14
41866: PUSH
41867: LD_VAR 0 9
41871: ARRAY
41872: PUSH
41873: LD_INT 2
41875: ARRAY
41876: PPUSH
41877: CALL_OW 488
41881: NOT
41882: OR
41883: PUSH
41884: LD_VAR 0 13
41888: PPUSH
41889: CALL_OW 247
41893: PUSH
41894: LD_INT 3
41896: EQUAL
41897: OR
41898: IFFALSE 41904
// exit ;
41900: POP
41901: POP
41902: GO 42448
// if not tmp then
41904: LD_VAR 0 13
41908: NOT
41909: IFFALSE 41913
// continue ;
41911: GO 41769
// result := true ;
41913: LD_ADDR_VAR 0 8
41917: PUSH
41918: LD_INT 1
41920: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41921: LD_VAR 0 6
41925: PUSH
41926: LD_VAR 0 13
41930: PPUSH
41931: CALL_OW 247
41935: PUSH
41936: LD_INT 2
41938: EQUAL
41939: AND
41940: PUSH
41941: LD_VAR 0 13
41945: PPUSH
41946: CALL_OW 263
41950: PUSH
41951: LD_INT 1
41953: EQUAL
41954: AND
41955: IFFALSE 42119
// begin if IsDrivenBy ( tmp ) then
41957: LD_VAR 0 13
41961: PPUSH
41962: CALL_OW 311
41966: IFFALSE 41970
// continue ;
41968: GO 41769
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41970: LD_VAR 0 6
41974: PPUSH
41975: LD_INT 3
41977: PUSH
41978: LD_INT 60
41980: PUSH
41981: EMPTY
41982: LIST
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 3
41990: PUSH
41991: LD_INT 55
41993: PUSH
41994: EMPTY
41995: LIST
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PPUSH
42005: CALL_OW 72
42009: IFFALSE 42117
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42011: LD_ADDR_VAR 0 18
42015: PUSH
42016: LD_VAR 0 6
42020: PPUSH
42021: LD_INT 3
42023: PUSH
42024: LD_INT 60
42026: PUSH
42027: EMPTY
42028: LIST
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 3
42036: PUSH
42037: LD_INT 55
42039: PUSH
42040: EMPTY
42041: LIST
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PPUSH
42051: CALL_OW 72
42055: PUSH
42056: LD_INT 1
42058: ARRAY
42059: ST_TO_ADDR
// if IsInUnit ( driver ) then
42060: LD_VAR 0 18
42064: PPUSH
42065: CALL_OW 310
42069: IFFALSE 42080
// ComExit ( driver ) ;
42071: LD_VAR 0 18
42075: PPUSH
42076: CALL 67390 0 1
// AddComEnterUnit ( driver , tmp ) ;
42080: LD_VAR 0 18
42084: PPUSH
42085: LD_VAR 0 13
42089: PPUSH
42090: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42094: LD_VAR 0 18
42098: PPUSH
42099: LD_VAR 0 7
42103: PPUSH
42104: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42108: LD_VAR 0 18
42112: PPUSH
42113: CALL_OW 181
// end ; continue ;
42117: GO 41769
// end ; if not cleaners or not tmp in cleaners then
42119: LD_VAR 0 6
42123: NOT
42124: PUSH
42125: LD_VAR 0 13
42129: PUSH
42130: LD_VAR 0 6
42134: IN
42135: NOT
42136: OR
42137: IFFALSE 42444
// begin if dep then
42139: LD_VAR 0 17
42143: IFFALSE 42279
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42145: LD_ADDR_VAR 0 16
42149: PUSH
42150: LD_VAR 0 17
42154: PUSH
42155: LD_INT 1
42157: ARRAY
42158: PPUSH
42159: CALL_OW 250
42163: PPUSH
42164: LD_VAR 0 17
42168: PUSH
42169: LD_INT 1
42171: ARRAY
42172: PPUSH
42173: CALL_OW 254
42177: PPUSH
42178: LD_INT 5
42180: PPUSH
42181: CALL_OW 272
42185: PUSH
42186: LD_VAR 0 17
42190: PUSH
42191: LD_INT 1
42193: ARRAY
42194: PPUSH
42195: CALL_OW 251
42199: PPUSH
42200: LD_VAR 0 17
42204: PUSH
42205: LD_INT 1
42207: ARRAY
42208: PPUSH
42209: CALL_OW 254
42213: PPUSH
42214: LD_INT 5
42216: PPUSH
42217: CALL_OW 273
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42226: LD_VAR 0 16
42230: PUSH
42231: LD_INT 1
42233: ARRAY
42234: PPUSH
42235: LD_VAR 0 16
42239: PUSH
42240: LD_INT 2
42242: ARRAY
42243: PPUSH
42244: CALL_OW 488
42248: IFFALSE 42279
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42250: LD_VAR 0 13
42254: PPUSH
42255: LD_VAR 0 16
42259: PUSH
42260: LD_INT 1
42262: ARRAY
42263: PPUSH
42264: LD_VAR 0 16
42268: PUSH
42269: LD_INT 2
42271: ARRAY
42272: PPUSH
42273: CALL_OW 111
// continue ;
42277: GO 41769
// end ; end ; r := GetDir ( tmp ) ;
42279: LD_ADDR_VAR 0 15
42283: PUSH
42284: LD_VAR 0 13
42288: PPUSH
42289: CALL_OW 254
42293: ST_TO_ADDR
// if r = 5 then
42294: LD_VAR 0 15
42298: PUSH
42299: LD_INT 5
42301: EQUAL
42302: IFFALSE 42312
// r := 0 ;
42304: LD_ADDR_VAR 0 15
42308: PUSH
42309: LD_INT 0
42311: ST_TO_ADDR
// for j = r to 5 do
42312: LD_ADDR_VAR 0 10
42316: PUSH
42317: DOUBLE
42318: LD_VAR 0 15
42322: DEC
42323: ST_TO_ADDR
42324: LD_INT 5
42326: PUSH
42327: FOR_TO
42328: IFFALSE 42442
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42330: LD_ADDR_VAR 0 11
42334: PUSH
42335: LD_VAR 0 13
42339: PPUSH
42340: CALL_OW 250
42344: PPUSH
42345: LD_VAR 0 10
42349: PPUSH
42350: LD_INT 2
42352: PPUSH
42353: CALL_OW 272
42357: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42358: LD_ADDR_VAR 0 12
42362: PUSH
42363: LD_VAR 0 13
42367: PPUSH
42368: CALL_OW 251
42372: PPUSH
42373: LD_VAR 0 10
42377: PPUSH
42378: LD_INT 2
42380: PPUSH
42381: CALL_OW 273
42385: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42386: LD_VAR 0 11
42390: PPUSH
42391: LD_VAR 0 12
42395: PPUSH
42396: CALL_OW 488
42400: PUSH
42401: LD_VAR 0 11
42405: PPUSH
42406: LD_VAR 0 12
42410: PPUSH
42411: CALL_OW 428
42415: NOT
42416: AND
42417: IFFALSE 42440
// begin ComMoveXY ( tmp , _x , _y ) ;
42419: LD_VAR 0 13
42423: PPUSH
42424: LD_VAR 0 11
42428: PPUSH
42429: LD_VAR 0 12
42433: PPUSH
42434: CALL_OW 111
// break ;
42438: GO 42442
// end ; end ;
42440: GO 42327
42442: POP
42443: POP
// end ; end ;
42444: GO 41769
42446: POP
42447: POP
// end ;
42448: LD_VAR 0 8
42452: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42453: LD_INT 0
42455: PPUSH
// result := true ;
42456: LD_ADDR_VAR 0 3
42460: PUSH
42461: LD_INT 1
42463: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42464: LD_VAR 0 2
42468: PUSH
42469: LD_INT 24
42471: DOUBLE
42472: EQUAL
42473: IFTRUE 42483
42475: LD_INT 33
42477: DOUBLE
42478: EQUAL
42479: IFTRUE 42483
42481: GO 42508
42483: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42484: LD_ADDR_VAR 0 3
42488: PUSH
42489: LD_INT 32
42491: PPUSH
42492: LD_VAR 0 1
42496: PPUSH
42497: CALL_OW 321
42501: PUSH
42502: LD_INT 2
42504: EQUAL
42505: ST_TO_ADDR
42506: GO 42828
42508: LD_INT 20
42510: DOUBLE
42511: EQUAL
42512: IFTRUE 42516
42514: GO 42541
42516: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42517: LD_ADDR_VAR 0 3
42521: PUSH
42522: LD_INT 6
42524: PPUSH
42525: LD_VAR 0 1
42529: PPUSH
42530: CALL_OW 321
42534: PUSH
42535: LD_INT 2
42537: EQUAL
42538: ST_TO_ADDR
42539: GO 42828
42541: LD_INT 22
42543: DOUBLE
42544: EQUAL
42545: IFTRUE 42555
42547: LD_INT 36
42549: DOUBLE
42550: EQUAL
42551: IFTRUE 42555
42553: GO 42580
42555: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42556: LD_ADDR_VAR 0 3
42560: PUSH
42561: LD_INT 15
42563: PPUSH
42564: LD_VAR 0 1
42568: PPUSH
42569: CALL_OW 321
42573: PUSH
42574: LD_INT 2
42576: EQUAL
42577: ST_TO_ADDR
42578: GO 42828
42580: LD_INT 30
42582: DOUBLE
42583: EQUAL
42584: IFTRUE 42588
42586: GO 42613
42588: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42589: LD_ADDR_VAR 0 3
42593: PUSH
42594: LD_INT 20
42596: PPUSH
42597: LD_VAR 0 1
42601: PPUSH
42602: CALL_OW 321
42606: PUSH
42607: LD_INT 2
42609: EQUAL
42610: ST_TO_ADDR
42611: GO 42828
42613: LD_INT 28
42615: DOUBLE
42616: EQUAL
42617: IFTRUE 42627
42619: LD_INT 21
42621: DOUBLE
42622: EQUAL
42623: IFTRUE 42627
42625: GO 42652
42627: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42628: LD_ADDR_VAR 0 3
42632: PUSH
42633: LD_INT 21
42635: PPUSH
42636: LD_VAR 0 1
42640: PPUSH
42641: CALL_OW 321
42645: PUSH
42646: LD_INT 2
42648: EQUAL
42649: ST_TO_ADDR
42650: GO 42828
42652: LD_INT 16
42654: DOUBLE
42655: EQUAL
42656: IFTRUE 42660
42658: GO 42687
42660: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42661: LD_ADDR_VAR 0 3
42665: PUSH
42666: LD_EXP 38
42670: PPUSH
42671: LD_VAR 0 1
42675: PPUSH
42676: CALL_OW 321
42680: PUSH
42681: LD_INT 2
42683: EQUAL
42684: ST_TO_ADDR
42685: GO 42828
42687: LD_INT 19
42689: DOUBLE
42690: EQUAL
42691: IFTRUE 42701
42693: LD_INT 23
42695: DOUBLE
42696: EQUAL
42697: IFTRUE 42701
42699: GO 42728
42701: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42702: LD_ADDR_VAR 0 3
42706: PUSH
42707: LD_EXP 37
42711: PPUSH
42712: LD_VAR 0 1
42716: PPUSH
42717: CALL_OW 321
42721: PUSH
42722: LD_INT 2
42724: EQUAL
42725: ST_TO_ADDR
42726: GO 42828
42728: LD_INT 17
42730: DOUBLE
42731: EQUAL
42732: IFTRUE 42736
42734: GO 42761
42736: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42737: LD_ADDR_VAR 0 3
42741: PUSH
42742: LD_INT 39
42744: PPUSH
42745: LD_VAR 0 1
42749: PPUSH
42750: CALL_OW 321
42754: PUSH
42755: LD_INT 2
42757: EQUAL
42758: ST_TO_ADDR
42759: GO 42828
42761: LD_INT 18
42763: DOUBLE
42764: EQUAL
42765: IFTRUE 42769
42767: GO 42794
42769: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42770: LD_ADDR_VAR 0 3
42774: PUSH
42775: LD_INT 40
42777: PPUSH
42778: LD_VAR 0 1
42782: PPUSH
42783: CALL_OW 321
42787: PUSH
42788: LD_INT 2
42790: EQUAL
42791: ST_TO_ADDR
42792: GO 42828
42794: LD_INT 27
42796: DOUBLE
42797: EQUAL
42798: IFTRUE 42802
42800: GO 42827
42802: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42803: LD_ADDR_VAR 0 3
42807: PUSH
42808: LD_INT 35
42810: PPUSH
42811: LD_VAR 0 1
42815: PPUSH
42816: CALL_OW 321
42820: PUSH
42821: LD_INT 2
42823: EQUAL
42824: ST_TO_ADDR
42825: GO 42828
42827: POP
// end ;
42828: LD_VAR 0 3
42832: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42833: LD_INT 0
42835: PPUSH
42836: PPUSH
42837: PPUSH
42838: PPUSH
42839: PPUSH
42840: PPUSH
42841: PPUSH
42842: PPUSH
42843: PPUSH
42844: PPUSH
42845: PPUSH
// result := false ;
42846: LD_ADDR_VAR 0 6
42850: PUSH
42851: LD_INT 0
42853: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42854: LD_VAR 0 1
42858: NOT
42859: PUSH
42860: LD_VAR 0 1
42864: PPUSH
42865: CALL_OW 266
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: IN
42880: NOT
42881: OR
42882: PUSH
42883: LD_VAR 0 2
42887: NOT
42888: OR
42889: PUSH
42890: LD_VAR 0 5
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: LD_INT 3
42906: PUSH
42907: LD_INT 4
42909: PUSH
42910: LD_INT 5
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: IN
42921: NOT
42922: OR
42923: PUSH
42924: LD_VAR 0 3
42928: PPUSH
42929: LD_VAR 0 4
42933: PPUSH
42934: CALL_OW 488
42938: NOT
42939: OR
42940: IFFALSE 42944
// exit ;
42942: GO 43680
// side := GetSide ( depot ) ;
42944: LD_ADDR_VAR 0 9
42948: PUSH
42949: LD_VAR 0 1
42953: PPUSH
42954: CALL_OW 255
42958: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42959: LD_VAR 0 9
42963: PPUSH
42964: LD_VAR 0 2
42968: PPUSH
42969: CALL 42453 0 2
42973: NOT
42974: IFFALSE 42978
// exit ;
42976: GO 43680
// pom := GetBase ( depot ) ;
42978: LD_ADDR_VAR 0 10
42982: PUSH
42983: LD_VAR 0 1
42987: PPUSH
42988: CALL_OW 274
42992: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42993: LD_ADDR_VAR 0 11
42997: PUSH
42998: LD_VAR 0 2
43002: PPUSH
43003: LD_VAR 0 1
43007: PPUSH
43008: CALL_OW 248
43012: PPUSH
43013: CALL_OW 450
43017: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43018: LD_VAR 0 10
43022: PPUSH
43023: LD_INT 1
43025: PPUSH
43026: CALL_OW 275
43030: PUSH
43031: LD_VAR 0 11
43035: PUSH
43036: LD_INT 1
43038: ARRAY
43039: GREATEREQUAL
43040: PUSH
43041: LD_VAR 0 10
43045: PPUSH
43046: LD_INT 2
43048: PPUSH
43049: CALL_OW 275
43053: PUSH
43054: LD_VAR 0 11
43058: PUSH
43059: LD_INT 2
43061: ARRAY
43062: GREATEREQUAL
43063: AND
43064: PUSH
43065: LD_VAR 0 10
43069: PPUSH
43070: LD_INT 3
43072: PPUSH
43073: CALL_OW 275
43077: PUSH
43078: LD_VAR 0 11
43082: PUSH
43083: LD_INT 3
43085: ARRAY
43086: GREATEREQUAL
43087: AND
43088: NOT
43089: IFFALSE 43093
// exit ;
43091: GO 43680
// if GetBType ( depot ) = b_depot then
43093: LD_VAR 0 1
43097: PPUSH
43098: CALL_OW 266
43102: PUSH
43103: LD_INT 0
43105: EQUAL
43106: IFFALSE 43118
// dist := 28 else
43108: LD_ADDR_VAR 0 14
43112: PUSH
43113: LD_INT 28
43115: ST_TO_ADDR
43116: GO 43126
// dist := 36 ;
43118: LD_ADDR_VAR 0 14
43122: PUSH
43123: LD_INT 36
43125: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43126: LD_VAR 0 1
43130: PPUSH
43131: LD_VAR 0 3
43135: PPUSH
43136: LD_VAR 0 4
43140: PPUSH
43141: CALL_OW 297
43145: PUSH
43146: LD_VAR 0 14
43150: GREATER
43151: IFFALSE 43155
// exit ;
43153: GO 43680
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43155: LD_ADDR_VAR 0 12
43159: PUSH
43160: LD_VAR 0 2
43164: PPUSH
43165: LD_VAR 0 3
43169: PPUSH
43170: LD_VAR 0 4
43174: PPUSH
43175: LD_VAR 0 5
43179: PPUSH
43180: LD_VAR 0 1
43184: PPUSH
43185: CALL_OW 248
43189: PPUSH
43190: LD_INT 0
43192: PPUSH
43193: CALL 43685 0 6
43197: ST_TO_ADDR
// if not hexes then
43198: LD_VAR 0 12
43202: NOT
43203: IFFALSE 43207
// exit ;
43205: GO 43680
// hex := GetHexInfo ( x , y ) ;
43207: LD_ADDR_VAR 0 15
43211: PUSH
43212: LD_VAR 0 3
43216: PPUSH
43217: LD_VAR 0 4
43221: PPUSH
43222: CALL_OW 546
43226: ST_TO_ADDR
// if hex [ 1 ] then
43227: LD_VAR 0 15
43231: PUSH
43232: LD_INT 1
43234: ARRAY
43235: IFFALSE 43239
// exit ;
43237: GO 43680
// height := hex [ 2 ] ;
43239: LD_ADDR_VAR 0 13
43243: PUSH
43244: LD_VAR 0 15
43248: PUSH
43249: LD_INT 2
43251: ARRAY
43252: ST_TO_ADDR
// for i = 1 to hexes do
43253: LD_ADDR_VAR 0 7
43257: PUSH
43258: DOUBLE
43259: LD_INT 1
43261: DEC
43262: ST_TO_ADDR
43263: LD_VAR 0 12
43267: PUSH
43268: FOR_TO
43269: IFFALSE 43599
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43271: LD_VAR 0 12
43275: PUSH
43276: LD_VAR 0 7
43280: ARRAY
43281: PUSH
43282: LD_INT 1
43284: ARRAY
43285: PPUSH
43286: LD_VAR 0 12
43290: PUSH
43291: LD_VAR 0 7
43295: ARRAY
43296: PUSH
43297: LD_INT 2
43299: ARRAY
43300: PPUSH
43301: CALL_OW 488
43305: NOT
43306: PUSH
43307: LD_VAR 0 12
43311: PUSH
43312: LD_VAR 0 7
43316: ARRAY
43317: PUSH
43318: LD_INT 1
43320: ARRAY
43321: PPUSH
43322: LD_VAR 0 12
43326: PUSH
43327: LD_VAR 0 7
43331: ARRAY
43332: PUSH
43333: LD_INT 2
43335: ARRAY
43336: PPUSH
43337: CALL_OW 428
43341: PUSH
43342: LD_INT 0
43344: GREATER
43345: OR
43346: PUSH
43347: LD_VAR 0 12
43351: PUSH
43352: LD_VAR 0 7
43356: ARRAY
43357: PUSH
43358: LD_INT 1
43360: ARRAY
43361: PPUSH
43362: LD_VAR 0 12
43366: PUSH
43367: LD_VAR 0 7
43371: ARRAY
43372: PUSH
43373: LD_INT 2
43375: ARRAY
43376: PPUSH
43377: CALL_OW 351
43381: OR
43382: IFFALSE 43388
// exit ;
43384: POP
43385: POP
43386: GO 43680
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43388: LD_ADDR_VAR 0 8
43392: PUSH
43393: LD_VAR 0 12
43397: PUSH
43398: LD_VAR 0 7
43402: ARRAY
43403: PUSH
43404: LD_INT 1
43406: ARRAY
43407: PPUSH
43408: LD_VAR 0 12
43412: PUSH
43413: LD_VAR 0 7
43417: ARRAY
43418: PUSH
43419: LD_INT 2
43421: ARRAY
43422: PPUSH
43423: CALL_OW 546
43427: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43428: LD_VAR 0 8
43432: PUSH
43433: LD_INT 1
43435: ARRAY
43436: PUSH
43437: LD_VAR 0 8
43441: PUSH
43442: LD_INT 2
43444: ARRAY
43445: PUSH
43446: LD_VAR 0 13
43450: PUSH
43451: LD_INT 2
43453: PLUS
43454: GREATER
43455: OR
43456: PUSH
43457: LD_VAR 0 8
43461: PUSH
43462: LD_INT 2
43464: ARRAY
43465: PUSH
43466: LD_VAR 0 13
43470: PUSH
43471: LD_INT 2
43473: MINUS
43474: LESS
43475: OR
43476: PUSH
43477: LD_VAR 0 8
43481: PUSH
43482: LD_INT 3
43484: ARRAY
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: LD_INT 8
43491: PUSH
43492: LD_INT 9
43494: PUSH
43495: LD_INT 10
43497: PUSH
43498: LD_INT 11
43500: PUSH
43501: LD_INT 12
43503: PUSH
43504: LD_INT 13
43506: PUSH
43507: LD_INT 16
43509: PUSH
43510: LD_INT 17
43512: PUSH
43513: LD_INT 18
43515: PUSH
43516: LD_INT 19
43518: PUSH
43519: LD_INT 20
43521: PUSH
43522: LD_INT 21
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: IN
43540: NOT
43541: OR
43542: PUSH
43543: LD_VAR 0 8
43547: PUSH
43548: LD_INT 5
43550: ARRAY
43551: NOT
43552: OR
43553: PUSH
43554: LD_VAR 0 8
43558: PUSH
43559: LD_INT 6
43561: ARRAY
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: LD_INT 7
43571: PUSH
43572: LD_INT 9
43574: PUSH
43575: LD_INT 10
43577: PUSH
43578: LD_INT 11
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: IN
43589: NOT
43590: OR
43591: IFFALSE 43597
// exit ;
43593: POP
43594: POP
43595: GO 43680
// end ;
43597: GO 43268
43599: POP
43600: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43601: LD_VAR 0 9
43605: PPUSH
43606: LD_VAR 0 3
43610: PPUSH
43611: LD_VAR 0 4
43615: PPUSH
43616: LD_INT 20
43618: PPUSH
43619: CALL 35626 0 4
43623: PUSH
43624: LD_INT 4
43626: ARRAY
43627: IFFALSE 43631
// exit ;
43629: GO 43680
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43631: LD_VAR 0 2
43635: PUSH
43636: LD_INT 29
43638: PUSH
43639: LD_INT 30
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: IN
43646: PUSH
43647: LD_VAR 0 3
43651: PPUSH
43652: LD_VAR 0 4
43656: PPUSH
43657: LD_VAR 0 9
43661: PPUSH
43662: CALL_OW 440
43666: NOT
43667: AND
43668: IFFALSE 43672
// exit ;
43670: GO 43680
// result := true ;
43672: LD_ADDR_VAR 0 6
43676: PUSH
43677: LD_INT 1
43679: ST_TO_ADDR
// end ;
43680: LD_VAR 0 6
43684: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43685: LD_INT 0
43687: PPUSH
43688: PPUSH
43689: PPUSH
43690: PPUSH
43691: PPUSH
43692: PPUSH
43693: PPUSH
43694: PPUSH
43695: PPUSH
43696: PPUSH
43697: PPUSH
43698: PPUSH
43699: PPUSH
43700: PPUSH
43701: PPUSH
43702: PPUSH
43703: PPUSH
43704: PPUSH
43705: PPUSH
43706: PPUSH
43707: PPUSH
43708: PPUSH
43709: PPUSH
43710: PPUSH
43711: PPUSH
43712: PPUSH
43713: PPUSH
43714: PPUSH
43715: PPUSH
43716: PPUSH
43717: PPUSH
43718: PPUSH
43719: PPUSH
43720: PPUSH
43721: PPUSH
43722: PPUSH
43723: PPUSH
43724: PPUSH
43725: PPUSH
43726: PPUSH
43727: PPUSH
43728: PPUSH
43729: PPUSH
43730: PPUSH
43731: PPUSH
43732: PPUSH
43733: PPUSH
43734: PPUSH
43735: PPUSH
43736: PPUSH
43737: PPUSH
43738: PPUSH
43739: PPUSH
43740: PPUSH
43741: PPUSH
43742: PPUSH
43743: PPUSH
43744: PPUSH
// result = [ ] ;
43745: LD_ADDR_VAR 0 7
43749: PUSH
43750: EMPTY
43751: ST_TO_ADDR
// temp_list = [ ] ;
43752: LD_ADDR_VAR 0 9
43756: PUSH
43757: EMPTY
43758: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43759: LD_VAR 0 4
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: LD_INT 3
43775: PUSH
43776: LD_INT 4
43778: PUSH
43779: LD_INT 5
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: IN
43790: NOT
43791: PUSH
43792: LD_VAR 0 1
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: IN
43807: PUSH
43808: LD_VAR 0 5
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: LD_INT 3
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: LIST
43826: IN
43827: NOT
43828: AND
43829: OR
43830: IFFALSE 43834
// exit ;
43832: GO 62225
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43834: LD_VAR 0 1
43838: PUSH
43839: LD_INT 6
43841: PUSH
43842: LD_INT 7
43844: PUSH
43845: LD_INT 8
43847: PUSH
43848: LD_INT 13
43850: PUSH
43851: LD_INT 12
43853: PUSH
43854: LD_INT 15
43856: PUSH
43857: LD_INT 11
43859: PUSH
43860: LD_INT 14
43862: PUSH
43863: LD_INT 10
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: IN
43877: IFFALSE 43887
// btype = b_lab ;
43879: LD_ADDR_VAR 0 1
43883: PUSH
43884: LD_INT 6
43886: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43887: LD_VAR 0 6
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: LIST
43905: IN
43906: NOT
43907: PUSH
43908: LD_VAR 0 1
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 2
43921: PUSH
43922: LD_INT 3
43924: PUSH
43925: LD_INT 6
43927: PUSH
43928: LD_INT 36
43930: PUSH
43931: LD_INT 4
43933: PUSH
43934: LD_INT 5
43936: PUSH
43937: LD_INT 31
43939: PUSH
43940: LD_INT 32
43942: PUSH
43943: LD_INT 33
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: IN
43959: NOT
43960: PUSH
43961: LD_VAR 0 6
43965: PUSH
43966: LD_INT 1
43968: EQUAL
43969: AND
43970: OR
43971: PUSH
43972: LD_VAR 0 1
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 3
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: IN
43987: NOT
43988: PUSH
43989: LD_VAR 0 6
43993: PUSH
43994: LD_INT 2
43996: EQUAL
43997: AND
43998: OR
43999: IFFALSE 44009
// mode = 0 ;
44001: LD_ADDR_VAR 0 6
44005: PUSH
44006: LD_INT 0
44008: ST_TO_ADDR
// case mode of 0 :
44009: LD_VAR 0 6
44013: PUSH
44014: LD_INT 0
44016: DOUBLE
44017: EQUAL
44018: IFTRUE 44022
44020: GO 55475
44022: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44023: LD_ADDR_VAR 0 11
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: LD_INT 2
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 2
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 3
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: LD_INT 3
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44216: LD_ADDR_VAR 0 12
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 2
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: NEG
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: NEG
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 3
44373: NEG
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 3
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44412: LD_ADDR_VAR 0 13
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: LD_INT 2
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 2
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 2
44547: NEG
44548: PUSH
44549: LD_INT 2
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 2
44559: NEG
44560: PUSH
44561: LD_INT 3
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 3
44571: NEG
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 3
44583: NEG
44584: PUSH
44585: LD_INT 3
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44611: LD_ADDR_VAR 0 14
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: LD_INT 2
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: LD_INT 3
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: LD_INT 3
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 2
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44807: LD_ADDR_VAR 0 15
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: NEG
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: NEG
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 2
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 3
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45000: LD_ADDR_VAR 0 16
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 2
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 2
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 2
45135: NEG
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 3
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 3
45157: PUSH
45158: LD_INT 3
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: LD_INT 3
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45193: LD_ADDR_VAR 0 17
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 2
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: NEG
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45423: LD_ADDR_VAR 0 18
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 2
45622: NEG
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45653: LD_ADDR_VAR 0 19
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: NEG
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45883: LD_ADDR_VAR 0 20
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46113: LD_ADDR_VAR 0 21
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46343: LD_ADDR_VAR 0 22
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46573: LD_ADDR_VAR 0 23
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: LD_INT 2
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: LD_INT 3
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: LD_INT 3
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46853: LD_ADDR_VAR 0 24
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 3
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 3
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47129: LD_ADDR_VAR 0 25
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 2
47328: NEG
47329: PUSH
47330: LD_INT 2
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 3
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: LD_INT 3
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 3
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47403: LD_ADDR_VAR 0 26
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: LD_INT 2
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: LD_INT 3
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 3
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 2
47645: NEG
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47679: LD_ADDR_VAR 0 27
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 2
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: NEG
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 3
47912: NEG
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 3
47924: NEG
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47959: LD_ADDR_VAR 0 28
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 2
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: NEG
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 2
48170: NEG
48171: PUSH
48172: LD_INT 3
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 3
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 3
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 3
48206: NEG
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48241: LD_ADDR_VAR 0 29
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 2
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: LD_INT 3
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 3
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 3
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 3
48485: NEG
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48520: LD_ADDR_VAR 0 30
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: LD_INT 2
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: LD_INT 2
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 3
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 3
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: LD_INT 3
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 3
48763: NEG
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48798: LD_ADDR_VAR 0 31
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 2
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 2
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: LD_INT 2
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: NEG
48988: PUSH
48989: LD_INT 3
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 2
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 3
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 3
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 3
49041: NEG
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49076: LD_ADDR_VAR 0 32
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: NEG
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: LD_INT 3
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: LD_INT 2
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 3
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: LD_INT 3
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 3
49319: NEG
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49354: LD_ADDR_VAR 0 33
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: LD_INT 2
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 2
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 2
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: LD_INT 3
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 3
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: LD_INT 3
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 3
49598: NEG
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49633: LD_ADDR_VAR 0 34
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 2
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 2
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 2
49789: NEG
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: NEG
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: LD_INT 3
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: LD_INT 2
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 3
49847: PUSH
49848: LD_INT 2
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: LD_INT 3
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 3
49878: NEG
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49913: LD_ADDR_VAR 0 35
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50025: LD_ADDR_VAR 0 36
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50137: LD_ADDR_VAR 0 37
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50249: LD_ADDR_VAR 0 38
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50361: LD_ADDR_VAR 0 39
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50473: LD_ADDR_VAR 0 40
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50585: LD_ADDR_VAR 0 41
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: LD_INT 2
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: NEG
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 2
50751: NEG
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 2
50763: NEG
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: LD_INT 3
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 3
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 3
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 3
50828: PUSH
50829: LD_INT 3
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: LD_INT 3
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 3
50859: NEG
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 3
50870: NEG
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 3
50882: NEG
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 3
50894: NEG
50895: PUSH
50896: LD_INT 3
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50935: LD_ADDR_VAR 0 42
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: LD_INT 2
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 2
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: NEG
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 2
51113: NEG
51114: PUSH
51115: LD_INT 2
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: LD_INT 3
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 3
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: LD_INT 3
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 3
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 3
51181: PUSH
51182: LD_INT 3
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: LD_INT 3
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: LD_INT 3
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: LD_INT 3
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 3
51232: NEG
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 3
51244: NEG
51245: PUSH
51246: LD_INT 3
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51285: LD_ADDR_VAR 0 43
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 2
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 3
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 3
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 3
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: LD_INT 3
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: LD_INT 3
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: LD_INT 2
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 2
51570: NEG
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 3
51581: NEG
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 3
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51633: LD_ADDR_VAR 0 44
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 2
51811: NEG
51812: PUSH
51813: LD_INT 2
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 2
51823: NEG
51824: PUSH
51825: LD_INT 3
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 3
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 3
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 3
51876: PUSH
51877: LD_INT 3
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: LD_INT 3
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 3
51907: NEG
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: NEG
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 3
51930: NEG
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 3
51942: NEG
51943: PUSH
51944: LD_INT 3
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51983: LD_ADDR_VAR 0 45
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: LD_INT 2
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 2
52149: NEG
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: LD_INT 3
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 3
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 3
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: LD_INT 2
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 3
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 3
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: LD_INT 3
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 3
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 3
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 3
52280: NEG
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 3
52292: NEG
52293: PUSH
52294: LD_INT 3
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52333: LD_ADDR_VAR 0 46
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 3
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 3
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 3
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 3
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 3
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: LD_INT 3
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 3
52629: NEG
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 3
52640: NEG
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52681: LD_ADDR_VAR 0 47
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52832: LD_ADDR_VAR 0 48
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52979: LD_ADDR_VAR 0 49
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: NEG
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53123: LD_ADDR_VAR 0 50
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 2
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53267: LD_ADDR_VAR 0 51
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53414: LD_ADDR_VAR 0 52
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 2
53529: NEG
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53565: LD_ADDR_VAR 0 53
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 2
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 2
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53795: LD_ADDR_VAR 0 54
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 2
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 2
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 2
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: LD_INT 2
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54025: LD_ADDR_VAR 0 55
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: LD_INT 2
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: LD_INT 2
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54255: LD_ADDR_VAR 0 56
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: NEG
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54485: LD_ADDR_VAR 0 57
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 2
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 2
54661: NEG
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54715: LD_ADDR_VAR 0 58
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: LD_INT 2
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: LD_INT 2
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54945: LD_ADDR_VAR 0 59
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55033: LD_ADDR_VAR 0 60
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55121: LD_ADDR_VAR 0 61
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55209: LD_ADDR_VAR 0 62
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55297: LD_ADDR_VAR 0 63
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55385: LD_ADDR_VAR 0 64
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: ST_TO_ADDR
// end ; 1 :
55473: GO 61370
55475: LD_INT 1
55477: DOUBLE
55478: EQUAL
55479: IFTRUE 55483
55481: GO 58106
55483: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55484: LD_ADDR_VAR 0 11
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: LD_INT 3
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 3
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: LIST
55527: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55528: LD_ADDR_VAR 0 12
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 3
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 3
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: LIST
55568: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55569: LD_ADDR_VAR 0 13
55573: PUSH
55574: LD_INT 3
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 3
55586: PUSH
55587: LD_INT 3
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: LD_INT 3
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: LIST
55608: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55609: LD_ADDR_VAR 0 14
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 3
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 3
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: LIST
55649: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55650: LD_ADDR_VAR 0 15
55654: PUSH
55655: LD_INT 2
55657: NEG
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 3
55668: NEG
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 3
55679: NEG
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: LIST
55693: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55694: LD_ADDR_VAR 0 16
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: LD_INT 3
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 3
55713: NEG
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 3
55725: NEG
55726: PUSH
55727: LD_INT 3
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: LIST
55739: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55740: LD_ADDR_VAR 0 17
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 3
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 3
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: LD_INT 2
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: LIST
55783: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55784: LD_ADDR_VAR 0 18
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: LIST
55824: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55825: LD_ADDR_VAR 0 19
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: LD_INT 2
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: LD_INT 3
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: LD_INT 3
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: LIST
55864: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55865: LD_ADDR_VAR 0 20
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: LD_INT 3
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 3
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: LIST
55905: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55906: LD_ADDR_VAR 0 21
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 3
55924: NEG
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: LIST
55949: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55950: LD_ADDR_VAR 0 22
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: LD_INT 3
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 3
55969: NEG
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 3
55981: NEG
55982: PUSH
55983: LD_INT 3
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: LIST
55995: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55996: LD_ADDR_VAR 0 23
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 3
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 4
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 3
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: LIST
56039: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56040: LD_ADDR_VAR 0 24
56044: PUSH
56045: LD_INT 3
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 3
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 4
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: LIST
56080: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56081: LD_ADDR_VAR 0 25
56085: PUSH
56086: LD_INT 3
56088: PUSH
56089: LD_INT 3
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 4
56098: PUSH
56099: LD_INT 3
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 3
56108: PUSH
56109: LD_INT 4
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: LIST
56120: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56121: LD_ADDR_VAR 0 26
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: LD_INT 3
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: LD_INT 4
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 3
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: LIST
56161: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56162: LD_ADDR_VAR 0 27
56166: PUSH
56167: LD_INT 3
56169: NEG
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 3
56180: NEG
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 4
56191: NEG
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56206: LD_ADDR_VAR 0 28
56210: PUSH
56211: LD_INT 3
56213: NEG
56214: PUSH
56215: LD_INT 3
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 3
56225: NEG
56226: PUSH
56227: LD_INT 4
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 4
56237: NEG
56238: PUSH
56239: LD_INT 3
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: LIST
56251: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56252: LD_ADDR_VAR 0 29
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 3
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 3
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 2
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: LD_INT 4
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 4
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: LD_INT 3
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 5
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 5
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: LD_INT 4
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: LD_INT 6
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 6
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 5
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56407: LD_ADDR_VAR 0 30
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 3
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 3
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 3
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 4
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 4
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 4
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 5
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 5
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 5
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 6
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 6
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56550: LD_ADDR_VAR 0 31
56554: PUSH
56555: LD_INT 3
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 3
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: LD_INT 3
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 4
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 4
56597: PUSH
56598: LD_INT 4
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 3
56607: PUSH
56608: LD_INT 4
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 5
56617: PUSH
56618: LD_INT 4
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 5
56627: PUSH
56628: LD_INT 5
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 4
56637: PUSH
56638: LD_INT 5
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 6
56647: PUSH
56648: LD_INT 5
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 6
56657: PUSH
56658: LD_INT 6
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 5
56667: PUSH
56668: LD_INT 6
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56689: LD_ADDR_VAR 0 32
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: LD_INT 3
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 4
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 4
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: LD_INT 5
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: LD_INT 5
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: LD_INT 4
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: LD_INT 6
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 6
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: LD_INT 5
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56832: LD_ADDR_VAR 0 33
56836: PUSH
56837: LD_INT 2
56839: NEG
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 3
56850: NEG
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 3
56861: NEG
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 4
56884: NEG
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 4
56895: NEG
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 4
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 5
56918: NEG
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 5
56929: NEG
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 5
56941: NEG
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 6
56952: NEG
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 6
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56987: LD_ADDR_VAR 0 34
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 3
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 3
57006: NEG
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 3
57018: NEG
57019: PUSH
57020: LD_INT 3
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 3
57030: NEG
57031: PUSH
57032: LD_INT 4
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 4
57042: NEG
57043: PUSH
57044: LD_INT 3
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 4
57054: NEG
57055: PUSH
57056: LD_INT 4
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 4
57066: NEG
57067: PUSH
57068: LD_INT 5
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 5
57078: NEG
57079: PUSH
57080: LD_INT 4
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 5
57090: NEG
57091: PUSH
57092: LD_INT 5
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 5
57102: NEG
57103: PUSH
57104: LD_INT 6
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 6
57114: NEG
57115: PUSH
57116: LD_INT 5
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 6
57126: NEG
57127: PUSH
57128: LD_INT 6
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57150: LD_ADDR_VAR 0 41
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: LD_INT 3
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: LD_INT 2
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: LIST
57193: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57194: LD_ADDR_VAR 0 42
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 3
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: LIST
57234: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57235: LD_ADDR_VAR 0 43
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 3
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: PUSH
57263: LD_INT 3
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: LIST
57274: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57275: LD_ADDR_VAR 0 44
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 3
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: LIST
57315: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57316: LD_ADDR_VAR 0 45
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 3
57345: NEG
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: LIST
57359: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57360: LD_ADDR_VAR 0 46
57364: PUSH
57365: LD_INT 2
57367: NEG
57368: PUSH
57369: LD_INT 2
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 2
57379: NEG
57380: PUSH
57381: LD_INT 3
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 3
57391: NEG
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: LIST
57405: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57406: LD_ADDR_VAR 0 47
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: LD_INT 3
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: NEG
57426: PUSH
57427: LD_INT 3
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57439: LD_ADDR_VAR 0 48
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57470: LD_ADDR_VAR 0 49
57474: PUSH
57475: LD_INT 3
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 3
57487: PUSH
57488: LD_INT 2
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57499: LD_ADDR_VAR 0 50
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: LD_INT 3
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 3
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57528: LD_ADDR_VAR 0 51
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: LD_INT 2
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57559: LD_ADDR_VAR 0 52
57563: PUSH
57564: LD_INT 3
57566: NEG
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 3
57578: NEG
57579: PUSH
57580: LD_INT 2
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57592: LD_ADDR_VAR 0 53
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 3
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: LD_INT 3
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57636: LD_ADDR_VAR 0 54
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57677: LD_ADDR_VAR 0 55
57681: PUSH
57682: LD_INT 3
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 3
57694: PUSH
57695: LD_INT 3
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: LD_INT 3
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: LIST
57716: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57717: LD_ADDR_VAR 0 56
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: LD_INT 3
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: LD_INT 3
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: LIST
57757: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57758: LD_ADDR_VAR 0 57
57762: PUSH
57763: LD_INT 2
57765: NEG
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 3
57776: NEG
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 3
57787: NEG
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: LIST
57801: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57802: LD_ADDR_VAR 0 58
57806: PUSH
57807: LD_INT 2
57809: NEG
57810: PUSH
57811: LD_INT 3
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 3
57821: NEG
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 3
57833: NEG
57834: PUSH
57835: LD_INT 3
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: LIST
57847: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57848: LD_ADDR_VAR 0 59
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: LD_INT 2
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: LIST
57891: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57892: LD_ADDR_VAR 0 60
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57933: LD_ADDR_VAR 0 61
57937: PUSH
57938: LD_INT 2
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 2
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: LIST
57972: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57973: LD_ADDR_VAR 0 62
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 2
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 2
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: LIST
58013: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58014: LD_ADDR_VAR 0 63
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: NEG
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: LIST
58057: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58058: LD_ADDR_VAR 0 64
58062: PUSH
58063: LD_INT 1
58065: NEG
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 2
58077: NEG
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: LD_INT 2
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: LIST
58103: ST_TO_ADDR
// end ; 2 :
58104: GO 61370
58106: LD_INT 2
58108: DOUBLE
58109: EQUAL
58110: IFTRUE 58114
58112: GO 61369
58114: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58115: LD_ADDR_VAR 0 29
58119: PUSH
58120: LD_INT 4
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 4
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 5
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 5
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 4
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 3
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 3
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 3
58194: PUSH
58195: LD_INT 2
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 5
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 3
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 3
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 4
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 4
58245: PUSH
58246: LD_INT 4
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 3
58255: PUSH
58256: LD_INT 4
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 2
58265: PUSH
58266: LD_INT 3
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 4
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: LD_INT 4
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: LD_INT 4
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: LD_INT 4
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: LD_INT 5
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 5
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: LD_INT 4
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: PUSH
58378: LD_INT 5
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: LD_INT 3
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 3
58398: NEG
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 3
58409: NEG
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 3
58443: NEG
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 4
58454: NEG
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 4
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 4
58477: NEG
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 4
58500: NEG
58501: PUSH
58502: LD_INT 4
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 4
58512: NEG
58513: PUSH
58514: LD_INT 5
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: LD_INT 4
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: NEG
58537: PUSH
58538: LD_INT 3
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 4
58548: NEG
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 5
58560: NEG
58561: PUSH
58562: LD_INT 4
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 5
58572: NEG
58573: PUSH
58574: LD_INT 5
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: NEG
58585: PUSH
58586: LD_INT 5
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 5
58596: NEG
58597: PUSH
58598: LD_INT 3
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58653: LD_ADDR_VAR 0 30
58657: PUSH
58658: LD_INT 4
58660: PUSH
58661: LD_INT 4
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 4
58670: PUSH
58671: LD_INT 3
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 5
58680: PUSH
58681: LD_INT 4
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 5
58690: PUSH
58691: LD_INT 5
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 4
58700: PUSH
58701: LD_INT 5
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 3
58710: PUSH
58711: LD_INT 4
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 3
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 5
58730: PUSH
58731: LD_INT 3
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 3
58740: PUSH
58741: LD_INT 5
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 3
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: LD_INT 3
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 4
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: LD_INT 4
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: LD_INT 3
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 2
58822: PUSH
58823: LD_INT 4
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: LD_INT 2
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 4
58843: NEG
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 4
58854: NEG
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 3
58877: NEG
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 4
58888: NEG
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 5
58899: NEG
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 5
58910: NEG
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 5
58922: NEG
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 3
58934: NEG
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 3
58945: NEG
58946: PUSH
58947: LD_INT 3
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 3
58957: NEG
58958: PUSH
58959: LD_INT 4
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 2
58969: NEG
58970: PUSH
58971: LD_INT 3
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 3
58993: NEG
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 4
59005: NEG
59006: PUSH
59007: LD_INT 3
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 4
59017: NEG
59018: PUSH
59019: LD_INT 4
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: NEG
59030: PUSH
59031: LD_INT 4
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 4
59041: NEG
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 4
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: LD_INT 5
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: LD_INT 4
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: LD_INT 3
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: LD_INT 3
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: LD_INT 4
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: LD_INT 5
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: LD_INT 3
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: LD_INT 5
59147: NEG
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59200: LD_ADDR_VAR 0 31
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: LD_INT 4
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: LD_INT 3
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: LD_INT 4
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: LD_INT 5
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: LD_INT 5
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: LD_INT 4
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: LD_INT 5
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: LD_INT 3
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 3
59300: NEG
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: NEG
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 3
59345: NEG
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 4
59356: NEG
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 4
59367: NEG
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 4
59379: NEG
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 2
59391: NEG
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 4
59402: NEG
59403: PUSH
59404: LD_INT 4
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 4
59414: NEG
59415: PUSH
59416: LD_INT 5
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 3
59426: NEG
59427: PUSH
59428: LD_INT 4
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 3
59438: NEG
59439: PUSH
59440: LD_INT 3
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 4
59450: NEG
59451: PUSH
59452: LD_INT 3
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 5
59462: NEG
59463: PUSH
59464: LD_INT 4
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 5
59474: NEG
59475: PUSH
59476: LD_INT 5
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 3
59486: NEG
59487: PUSH
59488: LD_INT 5
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 5
59498: NEG
59499: PUSH
59500: LD_INT 3
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 3
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 4
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 2
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: LD_INT 3
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: LD_INT 4
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: PUSH
59590: LD_INT 2
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: NEG
59601: PUSH
59602: LD_INT 4
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 4
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 4
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 5
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 5
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 4
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 3
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 3
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 3
59684: PUSH
59685: LD_INT 2
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 5
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59750: LD_ADDR_VAR 0 32
59754: PUSH
59755: LD_INT 4
59757: NEG
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 4
59768: NEG
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 3
59780: NEG
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 3
59791: NEG
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 4
59802: NEG
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 5
59813: NEG
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 5
59824: NEG
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 5
59836: NEG
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 3
59848: NEG
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 3
59859: NEG
59860: PUSH
59861: LD_INT 3
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 3
59871: NEG
59872: PUSH
59873: LD_INT 4
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: NEG
59884: PUSH
59885: LD_INT 3
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 3
59907: NEG
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 4
59919: NEG
59920: PUSH
59921: LD_INT 3
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 4
59931: NEG
59932: PUSH
59933: LD_INT 4
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: LD_INT 4
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 4
59955: NEG
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: LD_INT 4
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: LD_INT 5
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: LD_INT 4
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 3
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: LD_INT 3
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: LD_INT 4
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: LD_INT 5
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: LD_INT 3
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: NEG
60058: PUSH
60059: LD_INT 5
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 3
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 3
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 4
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 4
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 2
60141: PUSH
60142: LD_INT 2
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 4
60152: PUSH
60153: LD_INT 2
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 4
60162: PUSH
60163: LD_INT 4
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 4
60172: PUSH
60173: LD_INT 3
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 5
60182: PUSH
60183: LD_INT 4
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 5
60192: PUSH
60193: LD_INT 5
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 4
60202: PUSH
60203: LD_INT 5
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 3
60212: PUSH
60213: LD_INT 4
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 3
60222: PUSH
60223: LD_INT 3
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 5
60232: PUSH
60233: LD_INT 3
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 3
60242: PUSH
60243: LD_INT 5
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60297: LD_ADDR_VAR 0 33
60301: PUSH
60302: LD_INT 4
60304: NEG
60305: PUSH
60306: LD_INT 4
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 4
60316: NEG
60317: PUSH
60318: LD_INT 5
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 3
60328: NEG
60329: PUSH
60330: LD_INT 4
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 3
60340: NEG
60341: PUSH
60342: LD_INT 3
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 4
60352: NEG
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 5
60364: NEG
60365: PUSH
60366: LD_INT 4
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 5
60376: NEG
60377: PUSH
60378: LD_INT 5
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 3
60388: NEG
60389: PUSH
60390: LD_INT 5
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 5
60400: NEG
60401: PUSH
60402: LD_INT 3
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: LD_INT 3
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: LD_INT 4
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: LD_INT 3
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 2
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: LD_INT 3
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: LD_INT 4
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 2
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: NEG
60503: PUSH
60504: LD_INT 4
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 4
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 4
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 5
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 5
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 4
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 3
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 3
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 3
60586: PUSH
60587: LD_INT 2
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 5
60597: PUSH
60598: LD_INT 2
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 3
60607: PUSH
60608: LD_INT 3
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 3
60617: PUSH
60618: LD_INT 2
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 4
60627: PUSH
60628: LD_INT 3
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 4
60637: PUSH
60638: LD_INT 4
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: LD_INT 4
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: LD_INT 3
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 2
60667: PUSH
60668: LD_INT 2
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 4
60677: PUSH
60678: LD_INT 2
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 2
60687: PUSH
60688: LD_INT 4
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 4
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 3
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: LD_INT 4
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: LD_INT 5
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 5
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: LD_INT 4
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: LD_INT 3
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: LD_INT 5
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 2
60779: NEG
60780: PUSH
60781: LD_INT 3
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60835: LD_ADDR_VAR 0 34
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: LD_INT 4
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: LD_INT 5
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: LD_INT 4
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: LD_INT 3
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 3
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: LD_INT 4
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: LD_INT 5
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: LD_INT 3
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 2
60932: NEG
60933: PUSH
60934: LD_INT 5
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 3
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 3
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 4
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 4
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 3
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 2
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 4
61027: PUSH
61028: LD_INT 2
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 4
61037: PUSH
61038: LD_INT 4
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 4
61047: PUSH
61048: LD_INT 3
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 5
61057: PUSH
61058: LD_INT 4
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 5
61067: PUSH
61068: LD_INT 5
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 4
61077: PUSH
61078: LD_INT 5
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 3
61087: PUSH
61088: LD_INT 4
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 3
61097: PUSH
61098: LD_INT 3
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 5
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 3
61117: PUSH
61118: LD_INT 5
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: LD_INT 3
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: LD_INT 2
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: LD_INT 3
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: LD_INT 4
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: LD_INT 4
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: LD_INT 3
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: LD_INT 2
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 2
61199: PUSH
61200: LD_INT 4
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 2
61209: NEG
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 4
61220: NEG
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 4
61231: NEG
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 3
61243: NEG
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 3
61254: NEG
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 4
61265: NEG
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 5
61276: NEG
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 5
61287: NEG
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 5
61299: NEG
61300: PUSH
61301: LD_INT 2
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 3
61311: NEG
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: ST_TO_ADDR
// end ; end ;
61367: GO 61370
61369: POP
// case btype of b_depot , b_warehouse :
61370: LD_VAR 0 1
61374: PUSH
61375: LD_INT 0
61377: DOUBLE
61378: EQUAL
61379: IFTRUE 61389
61381: LD_INT 1
61383: DOUBLE
61384: EQUAL
61385: IFTRUE 61389
61387: GO 61590
61389: POP
// case nation of nation_american :
61390: LD_VAR 0 5
61394: PUSH
61395: LD_INT 1
61397: DOUBLE
61398: EQUAL
61399: IFTRUE 61403
61401: GO 61459
61403: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61404: LD_ADDR_VAR 0 9
61408: PUSH
61409: LD_VAR 0 11
61413: PUSH
61414: LD_VAR 0 12
61418: PUSH
61419: LD_VAR 0 13
61423: PUSH
61424: LD_VAR 0 14
61428: PUSH
61429: LD_VAR 0 15
61433: PUSH
61434: LD_VAR 0 16
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: PUSH
61447: LD_VAR 0 4
61451: PUSH
61452: LD_INT 1
61454: PLUS
61455: ARRAY
61456: ST_TO_ADDR
61457: GO 61588
61459: LD_INT 2
61461: DOUBLE
61462: EQUAL
61463: IFTRUE 61467
61465: GO 61523
61467: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61468: LD_ADDR_VAR 0 9
61472: PUSH
61473: LD_VAR 0 17
61477: PUSH
61478: LD_VAR 0 18
61482: PUSH
61483: LD_VAR 0 19
61487: PUSH
61488: LD_VAR 0 20
61492: PUSH
61493: LD_VAR 0 21
61497: PUSH
61498: LD_VAR 0 22
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: PUSH
61511: LD_VAR 0 4
61515: PUSH
61516: LD_INT 1
61518: PLUS
61519: ARRAY
61520: ST_TO_ADDR
61521: GO 61588
61523: LD_INT 3
61525: DOUBLE
61526: EQUAL
61527: IFTRUE 61531
61529: GO 61587
61531: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61532: LD_ADDR_VAR 0 9
61536: PUSH
61537: LD_VAR 0 23
61541: PUSH
61542: LD_VAR 0 24
61546: PUSH
61547: LD_VAR 0 25
61551: PUSH
61552: LD_VAR 0 26
61556: PUSH
61557: LD_VAR 0 27
61561: PUSH
61562: LD_VAR 0 28
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: PUSH
61575: LD_VAR 0 4
61579: PUSH
61580: LD_INT 1
61582: PLUS
61583: ARRAY
61584: ST_TO_ADDR
61585: GO 61588
61587: POP
61588: GO 62143
61590: LD_INT 2
61592: DOUBLE
61593: EQUAL
61594: IFTRUE 61604
61596: LD_INT 3
61598: DOUBLE
61599: EQUAL
61600: IFTRUE 61604
61602: GO 61660
61604: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61605: LD_ADDR_VAR 0 9
61609: PUSH
61610: LD_VAR 0 29
61614: PUSH
61615: LD_VAR 0 30
61619: PUSH
61620: LD_VAR 0 31
61624: PUSH
61625: LD_VAR 0 32
61629: PUSH
61630: LD_VAR 0 33
61634: PUSH
61635: LD_VAR 0 34
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: PUSH
61648: LD_VAR 0 4
61652: PUSH
61653: LD_INT 1
61655: PLUS
61656: ARRAY
61657: ST_TO_ADDR
61658: GO 62143
61660: LD_INT 16
61662: DOUBLE
61663: EQUAL
61664: IFTRUE 61722
61666: LD_INT 17
61668: DOUBLE
61669: EQUAL
61670: IFTRUE 61722
61672: LD_INT 18
61674: DOUBLE
61675: EQUAL
61676: IFTRUE 61722
61678: LD_INT 19
61680: DOUBLE
61681: EQUAL
61682: IFTRUE 61722
61684: LD_INT 22
61686: DOUBLE
61687: EQUAL
61688: IFTRUE 61722
61690: LD_INT 20
61692: DOUBLE
61693: EQUAL
61694: IFTRUE 61722
61696: LD_INT 21
61698: DOUBLE
61699: EQUAL
61700: IFTRUE 61722
61702: LD_INT 23
61704: DOUBLE
61705: EQUAL
61706: IFTRUE 61722
61708: LD_INT 24
61710: DOUBLE
61711: EQUAL
61712: IFTRUE 61722
61714: LD_INT 25
61716: DOUBLE
61717: EQUAL
61718: IFTRUE 61722
61720: GO 61778
61722: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61723: LD_ADDR_VAR 0 9
61727: PUSH
61728: LD_VAR 0 35
61732: PUSH
61733: LD_VAR 0 36
61737: PUSH
61738: LD_VAR 0 37
61742: PUSH
61743: LD_VAR 0 38
61747: PUSH
61748: LD_VAR 0 39
61752: PUSH
61753: LD_VAR 0 40
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: PUSH
61766: LD_VAR 0 4
61770: PUSH
61771: LD_INT 1
61773: PLUS
61774: ARRAY
61775: ST_TO_ADDR
61776: GO 62143
61778: LD_INT 6
61780: DOUBLE
61781: EQUAL
61782: IFTRUE 61834
61784: LD_INT 7
61786: DOUBLE
61787: EQUAL
61788: IFTRUE 61834
61790: LD_INT 8
61792: DOUBLE
61793: EQUAL
61794: IFTRUE 61834
61796: LD_INT 13
61798: DOUBLE
61799: EQUAL
61800: IFTRUE 61834
61802: LD_INT 12
61804: DOUBLE
61805: EQUAL
61806: IFTRUE 61834
61808: LD_INT 15
61810: DOUBLE
61811: EQUAL
61812: IFTRUE 61834
61814: LD_INT 11
61816: DOUBLE
61817: EQUAL
61818: IFTRUE 61834
61820: LD_INT 14
61822: DOUBLE
61823: EQUAL
61824: IFTRUE 61834
61826: LD_INT 10
61828: DOUBLE
61829: EQUAL
61830: IFTRUE 61834
61832: GO 61890
61834: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61835: LD_ADDR_VAR 0 9
61839: PUSH
61840: LD_VAR 0 41
61844: PUSH
61845: LD_VAR 0 42
61849: PUSH
61850: LD_VAR 0 43
61854: PUSH
61855: LD_VAR 0 44
61859: PUSH
61860: LD_VAR 0 45
61864: PUSH
61865: LD_VAR 0 46
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: PUSH
61878: LD_VAR 0 4
61882: PUSH
61883: LD_INT 1
61885: PLUS
61886: ARRAY
61887: ST_TO_ADDR
61888: GO 62143
61890: LD_INT 36
61892: DOUBLE
61893: EQUAL
61894: IFTRUE 61898
61896: GO 61954
61898: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61899: LD_ADDR_VAR 0 9
61903: PUSH
61904: LD_VAR 0 47
61908: PUSH
61909: LD_VAR 0 48
61913: PUSH
61914: LD_VAR 0 49
61918: PUSH
61919: LD_VAR 0 50
61923: PUSH
61924: LD_VAR 0 51
61928: PUSH
61929: LD_VAR 0 52
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: PUSH
61942: LD_VAR 0 4
61946: PUSH
61947: LD_INT 1
61949: PLUS
61950: ARRAY
61951: ST_TO_ADDR
61952: GO 62143
61954: LD_INT 4
61956: DOUBLE
61957: EQUAL
61958: IFTRUE 61980
61960: LD_INT 5
61962: DOUBLE
61963: EQUAL
61964: IFTRUE 61980
61966: LD_INT 34
61968: DOUBLE
61969: EQUAL
61970: IFTRUE 61980
61972: LD_INT 37
61974: DOUBLE
61975: EQUAL
61976: IFTRUE 61980
61978: GO 62036
61980: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61981: LD_ADDR_VAR 0 9
61985: PUSH
61986: LD_VAR 0 53
61990: PUSH
61991: LD_VAR 0 54
61995: PUSH
61996: LD_VAR 0 55
62000: PUSH
62001: LD_VAR 0 56
62005: PUSH
62006: LD_VAR 0 57
62010: PUSH
62011: LD_VAR 0 58
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: PUSH
62024: LD_VAR 0 4
62028: PUSH
62029: LD_INT 1
62031: PLUS
62032: ARRAY
62033: ST_TO_ADDR
62034: GO 62143
62036: LD_INT 31
62038: DOUBLE
62039: EQUAL
62040: IFTRUE 62086
62042: LD_INT 32
62044: DOUBLE
62045: EQUAL
62046: IFTRUE 62086
62048: LD_INT 33
62050: DOUBLE
62051: EQUAL
62052: IFTRUE 62086
62054: LD_INT 27
62056: DOUBLE
62057: EQUAL
62058: IFTRUE 62086
62060: LD_INT 26
62062: DOUBLE
62063: EQUAL
62064: IFTRUE 62086
62066: LD_INT 28
62068: DOUBLE
62069: EQUAL
62070: IFTRUE 62086
62072: LD_INT 29
62074: DOUBLE
62075: EQUAL
62076: IFTRUE 62086
62078: LD_INT 30
62080: DOUBLE
62081: EQUAL
62082: IFTRUE 62086
62084: GO 62142
62086: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62087: LD_ADDR_VAR 0 9
62091: PUSH
62092: LD_VAR 0 59
62096: PUSH
62097: LD_VAR 0 60
62101: PUSH
62102: LD_VAR 0 61
62106: PUSH
62107: LD_VAR 0 62
62111: PUSH
62112: LD_VAR 0 63
62116: PUSH
62117: LD_VAR 0 64
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: PUSH
62130: LD_VAR 0 4
62134: PUSH
62135: LD_INT 1
62137: PLUS
62138: ARRAY
62139: ST_TO_ADDR
62140: GO 62143
62142: POP
// temp_list2 = [ ] ;
62143: LD_ADDR_VAR 0 10
62147: PUSH
62148: EMPTY
62149: ST_TO_ADDR
// for i in temp_list do
62150: LD_ADDR_VAR 0 8
62154: PUSH
62155: LD_VAR 0 9
62159: PUSH
62160: FOR_IN
62161: IFFALSE 62213
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62163: LD_ADDR_VAR 0 10
62167: PUSH
62168: LD_VAR 0 10
62172: PUSH
62173: LD_VAR 0 8
62177: PUSH
62178: LD_INT 1
62180: ARRAY
62181: PUSH
62182: LD_VAR 0 2
62186: PLUS
62187: PUSH
62188: LD_VAR 0 8
62192: PUSH
62193: LD_INT 2
62195: ARRAY
62196: PUSH
62197: LD_VAR 0 3
62201: PLUS
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: EMPTY
62208: LIST
62209: ADD
62210: ST_TO_ADDR
62211: GO 62160
62213: POP
62214: POP
// result = temp_list2 ;
62215: LD_ADDR_VAR 0 7
62219: PUSH
62220: LD_VAR 0 10
62224: ST_TO_ADDR
// end ;
62225: LD_VAR 0 7
62229: RET
// export function EnemyInRange ( unit , dist ) ; begin
62230: LD_INT 0
62232: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62233: LD_ADDR_VAR 0 3
62237: PUSH
62238: LD_VAR 0 1
62242: PPUSH
62243: CALL_OW 255
62247: PPUSH
62248: LD_VAR 0 1
62252: PPUSH
62253: CALL_OW 250
62257: PPUSH
62258: LD_VAR 0 1
62262: PPUSH
62263: CALL_OW 251
62267: PPUSH
62268: LD_VAR 0 2
62272: PPUSH
62273: CALL 35626 0 4
62277: PUSH
62278: LD_INT 4
62280: ARRAY
62281: ST_TO_ADDR
// end ;
62282: LD_VAR 0 3
62286: RET
// export function PlayerSeeMe ( unit ) ; begin
62287: LD_INT 0
62289: PPUSH
// result := See ( your_side , unit ) ;
62290: LD_ADDR_VAR 0 2
62294: PUSH
62295: LD_OWVAR 2
62299: PPUSH
62300: LD_VAR 0 1
62304: PPUSH
62305: CALL_OW 292
62309: ST_TO_ADDR
// end ;
62310: LD_VAR 0 2
62314: RET
// export function ReverseDir ( unit ) ; begin
62315: LD_INT 0
62317: PPUSH
// if not unit then
62318: LD_VAR 0 1
62322: NOT
62323: IFFALSE 62327
// exit ;
62325: GO 62350
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62327: LD_ADDR_VAR 0 2
62331: PUSH
62332: LD_VAR 0 1
62336: PPUSH
62337: CALL_OW 254
62341: PUSH
62342: LD_INT 3
62344: PLUS
62345: PUSH
62346: LD_INT 6
62348: MOD
62349: ST_TO_ADDR
// end ;
62350: LD_VAR 0 2
62354: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62355: LD_INT 0
62357: PPUSH
62358: PPUSH
62359: PPUSH
62360: PPUSH
62361: PPUSH
// if not hexes then
62362: LD_VAR 0 2
62366: NOT
62367: IFFALSE 62371
// exit ;
62369: GO 62519
// dist := 9999 ;
62371: LD_ADDR_VAR 0 5
62375: PUSH
62376: LD_INT 9999
62378: ST_TO_ADDR
// for i = 1 to hexes do
62379: LD_ADDR_VAR 0 4
62383: PUSH
62384: DOUBLE
62385: LD_INT 1
62387: DEC
62388: ST_TO_ADDR
62389: LD_VAR 0 2
62393: PUSH
62394: FOR_TO
62395: IFFALSE 62507
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62397: LD_VAR 0 1
62401: PPUSH
62402: LD_VAR 0 2
62406: PUSH
62407: LD_VAR 0 4
62411: ARRAY
62412: PUSH
62413: LD_INT 1
62415: ARRAY
62416: PPUSH
62417: LD_VAR 0 2
62421: PUSH
62422: LD_VAR 0 4
62426: ARRAY
62427: PUSH
62428: LD_INT 2
62430: ARRAY
62431: PPUSH
62432: CALL_OW 297
62436: PUSH
62437: LD_VAR 0 5
62441: LESS
62442: IFFALSE 62505
// begin hex := hexes [ i ] ;
62444: LD_ADDR_VAR 0 7
62448: PUSH
62449: LD_VAR 0 2
62453: PUSH
62454: LD_VAR 0 4
62458: ARRAY
62459: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62460: LD_ADDR_VAR 0 5
62464: PUSH
62465: LD_VAR 0 1
62469: PPUSH
62470: LD_VAR 0 2
62474: PUSH
62475: LD_VAR 0 4
62479: ARRAY
62480: PUSH
62481: LD_INT 1
62483: ARRAY
62484: PPUSH
62485: LD_VAR 0 2
62489: PUSH
62490: LD_VAR 0 4
62494: ARRAY
62495: PUSH
62496: LD_INT 2
62498: ARRAY
62499: PPUSH
62500: CALL_OW 297
62504: ST_TO_ADDR
// end ; end ;
62505: GO 62394
62507: POP
62508: POP
// result := hex ;
62509: LD_ADDR_VAR 0 3
62513: PUSH
62514: LD_VAR 0 7
62518: ST_TO_ADDR
// end ;
62519: LD_VAR 0 3
62523: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62524: LD_INT 0
62526: PPUSH
62527: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62528: LD_VAR 0 1
62532: NOT
62533: PUSH
62534: LD_VAR 0 1
62538: PUSH
62539: LD_INT 21
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 23
62551: PUSH
62552: LD_INT 2
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PPUSH
62563: CALL_OW 69
62567: IN
62568: NOT
62569: OR
62570: IFFALSE 62574
// exit ;
62572: GO 62621
// for i = 1 to 3 do
62574: LD_ADDR_VAR 0 3
62578: PUSH
62579: DOUBLE
62580: LD_INT 1
62582: DEC
62583: ST_TO_ADDR
62584: LD_INT 3
62586: PUSH
62587: FOR_TO
62588: IFFALSE 62619
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62590: LD_VAR 0 1
62594: PPUSH
62595: CALL_OW 250
62599: PPUSH
62600: LD_VAR 0 1
62604: PPUSH
62605: CALL_OW 251
62609: PPUSH
62610: LD_INT 1
62612: PPUSH
62613: CALL_OW 453
62617: GO 62587
62619: POP
62620: POP
// end ;
62621: LD_VAR 0 2
62625: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62626: LD_INT 0
62628: PPUSH
62629: PPUSH
62630: PPUSH
62631: PPUSH
62632: PPUSH
62633: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62634: LD_VAR 0 1
62638: NOT
62639: PUSH
62640: LD_VAR 0 2
62644: NOT
62645: OR
62646: PUSH
62647: LD_VAR 0 1
62651: PPUSH
62652: CALL_OW 314
62656: OR
62657: IFFALSE 62661
// exit ;
62659: GO 63102
// x := GetX ( enemy_unit ) ;
62661: LD_ADDR_VAR 0 7
62665: PUSH
62666: LD_VAR 0 2
62670: PPUSH
62671: CALL_OW 250
62675: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62676: LD_ADDR_VAR 0 8
62680: PUSH
62681: LD_VAR 0 2
62685: PPUSH
62686: CALL_OW 251
62690: ST_TO_ADDR
// if not x or not y then
62691: LD_VAR 0 7
62695: NOT
62696: PUSH
62697: LD_VAR 0 8
62701: NOT
62702: OR
62703: IFFALSE 62707
// exit ;
62705: GO 63102
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62707: LD_ADDR_VAR 0 6
62711: PUSH
62712: LD_VAR 0 7
62716: PPUSH
62717: LD_INT 0
62719: PPUSH
62720: LD_INT 4
62722: PPUSH
62723: CALL_OW 272
62727: PUSH
62728: LD_VAR 0 8
62732: PPUSH
62733: LD_INT 0
62735: PPUSH
62736: LD_INT 4
62738: PPUSH
62739: CALL_OW 273
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_VAR 0 7
62752: PPUSH
62753: LD_INT 1
62755: PPUSH
62756: LD_INT 4
62758: PPUSH
62759: CALL_OW 272
62763: PUSH
62764: LD_VAR 0 8
62768: PPUSH
62769: LD_INT 1
62771: PPUSH
62772: LD_INT 4
62774: PPUSH
62775: CALL_OW 273
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_VAR 0 7
62788: PPUSH
62789: LD_INT 2
62791: PPUSH
62792: LD_INT 4
62794: PPUSH
62795: CALL_OW 272
62799: PUSH
62800: LD_VAR 0 8
62804: PPUSH
62805: LD_INT 2
62807: PPUSH
62808: LD_INT 4
62810: PPUSH
62811: CALL_OW 273
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_VAR 0 7
62824: PPUSH
62825: LD_INT 3
62827: PPUSH
62828: LD_INT 4
62830: PPUSH
62831: CALL_OW 272
62835: PUSH
62836: LD_VAR 0 8
62840: PPUSH
62841: LD_INT 3
62843: PPUSH
62844: LD_INT 4
62846: PPUSH
62847: CALL_OW 273
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_VAR 0 7
62860: PPUSH
62861: LD_INT 4
62863: PPUSH
62864: LD_INT 4
62866: PPUSH
62867: CALL_OW 272
62871: PUSH
62872: LD_VAR 0 8
62876: PPUSH
62877: LD_INT 4
62879: PPUSH
62880: LD_INT 4
62882: PPUSH
62883: CALL_OW 273
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_VAR 0 7
62896: PPUSH
62897: LD_INT 5
62899: PPUSH
62900: LD_INT 4
62902: PPUSH
62903: CALL_OW 272
62907: PUSH
62908: LD_VAR 0 8
62912: PPUSH
62913: LD_INT 5
62915: PPUSH
62916: LD_INT 4
62918: PPUSH
62919: CALL_OW 273
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: ST_TO_ADDR
// for i = tmp downto 1 do
62936: LD_ADDR_VAR 0 4
62940: PUSH
62941: DOUBLE
62942: LD_VAR 0 6
62946: INC
62947: ST_TO_ADDR
62948: LD_INT 1
62950: PUSH
62951: FOR_DOWNTO
62952: IFFALSE 63053
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62954: LD_VAR 0 6
62958: PUSH
62959: LD_VAR 0 4
62963: ARRAY
62964: PUSH
62965: LD_INT 1
62967: ARRAY
62968: PPUSH
62969: LD_VAR 0 6
62973: PUSH
62974: LD_VAR 0 4
62978: ARRAY
62979: PUSH
62980: LD_INT 2
62982: ARRAY
62983: PPUSH
62984: CALL_OW 488
62988: NOT
62989: PUSH
62990: LD_VAR 0 6
62994: PUSH
62995: LD_VAR 0 4
62999: ARRAY
63000: PUSH
63001: LD_INT 1
63003: ARRAY
63004: PPUSH
63005: LD_VAR 0 6
63009: PUSH
63010: LD_VAR 0 4
63014: ARRAY
63015: PUSH
63016: LD_INT 2
63018: ARRAY
63019: PPUSH
63020: CALL_OW 428
63024: PUSH
63025: LD_INT 0
63027: NONEQUAL
63028: OR
63029: IFFALSE 63051
// tmp := Delete ( tmp , i ) ;
63031: LD_ADDR_VAR 0 6
63035: PUSH
63036: LD_VAR 0 6
63040: PPUSH
63041: LD_VAR 0 4
63045: PPUSH
63046: CALL_OW 3
63050: ST_TO_ADDR
63051: GO 62951
63053: POP
63054: POP
// j := GetClosestHex ( unit , tmp ) ;
63055: LD_ADDR_VAR 0 5
63059: PUSH
63060: LD_VAR 0 1
63064: PPUSH
63065: LD_VAR 0 6
63069: PPUSH
63070: CALL 62355 0 2
63074: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63075: LD_VAR 0 1
63079: PPUSH
63080: LD_VAR 0 5
63084: PUSH
63085: LD_INT 1
63087: ARRAY
63088: PPUSH
63089: LD_VAR 0 5
63093: PUSH
63094: LD_INT 2
63096: ARRAY
63097: PPUSH
63098: CALL_OW 111
// end ;
63102: LD_VAR 0 3
63106: RET
// export function PrepareApemanSoldier ( ) ; begin
63107: LD_INT 0
63109: PPUSH
// uc_nation := 0 ;
63110: LD_ADDR_OWVAR 21
63114: PUSH
63115: LD_INT 0
63117: ST_TO_ADDR
// hc_sex := sex_male ;
63118: LD_ADDR_OWVAR 27
63122: PUSH
63123: LD_INT 1
63125: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63126: LD_ADDR_OWVAR 28
63130: PUSH
63131: LD_INT 15
63133: ST_TO_ADDR
// hc_gallery :=  ;
63134: LD_ADDR_OWVAR 33
63138: PUSH
63139: LD_STRING 
63141: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63142: LD_ADDR_OWVAR 31
63146: PUSH
63147: LD_INT 0
63149: PPUSH
63150: LD_INT 3
63152: PPUSH
63153: CALL_OW 12
63157: PUSH
63158: LD_INT 0
63160: PPUSH
63161: LD_INT 3
63163: PPUSH
63164: CALL_OW 12
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: ST_TO_ADDR
// end ;
63181: LD_VAR 0 1
63185: RET
// export function PrepareApemanEngineer ( ) ; begin
63186: LD_INT 0
63188: PPUSH
// uc_nation := 0 ;
63189: LD_ADDR_OWVAR 21
63193: PUSH
63194: LD_INT 0
63196: ST_TO_ADDR
// hc_sex := sex_male ;
63197: LD_ADDR_OWVAR 27
63201: PUSH
63202: LD_INT 1
63204: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63205: LD_ADDR_OWVAR 28
63209: PUSH
63210: LD_INT 16
63212: ST_TO_ADDR
// hc_gallery :=  ;
63213: LD_ADDR_OWVAR 33
63217: PUSH
63218: LD_STRING 
63220: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63221: LD_ADDR_OWVAR 31
63225: PUSH
63226: LD_INT 0
63228: PPUSH
63229: LD_INT 3
63231: PPUSH
63232: CALL_OW 12
63236: PUSH
63237: LD_INT 0
63239: PPUSH
63240: LD_INT 3
63242: PPUSH
63243: CALL_OW 12
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: ST_TO_ADDR
// end ;
63260: LD_VAR 0 1
63264: RET
// export function PrepareApeman ( agressivity ) ; begin
63265: LD_INT 0
63267: PPUSH
// uc_side := 0 ;
63268: LD_ADDR_OWVAR 20
63272: PUSH
63273: LD_INT 0
63275: ST_TO_ADDR
// uc_nation := 0 ;
63276: LD_ADDR_OWVAR 21
63280: PUSH
63281: LD_INT 0
63283: ST_TO_ADDR
// hc_sex := sex_male ;
63284: LD_ADDR_OWVAR 27
63288: PUSH
63289: LD_INT 1
63291: ST_TO_ADDR
// hc_class := class_apeman ;
63292: LD_ADDR_OWVAR 28
63296: PUSH
63297: LD_INT 12
63299: ST_TO_ADDR
// hc_gallery :=  ;
63300: LD_ADDR_OWVAR 33
63304: PUSH
63305: LD_STRING 
63307: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63308: LD_ADDR_OWVAR 35
63312: PUSH
63313: LD_VAR 0 1
63317: NEG
63318: PPUSH
63319: LD_VAR 0 1
63323: PPUSH
63324: CALL_OW 12
63328: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63329: LD_ADDR_OWVAR 31
63333: PUSH
63334: LD_INT 0
63336: PPUSH
63337: LD_INT 3
63339: PPUSH
63340: CALL_OW 12
63344: PUSH
63345: LD_INT 0
63347: PPUSH
63348: LD_INT 3
63350: PPUSH
63351: CALL_OW 12
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: ST_TO_ADDR
// end ;
63368: LD_VAR 0 2
63372: RET
// export function PrepareTiger ( agressivity ) ; begin
63373: LD_INT 0
63375: PPUSH
// uc_side := 0 ;
63376: LD_ADDR_OWVAR 20
63380: PUSH
63381: LD_INT 0
63383: ST_TO_ADDR
// uc_nation := 0 ;
63384: LD_ADDR_OWVAR 21
63388: PUSH
63389: LD_INT 0
63391: ST_TO_ADDR
// hc_class := class_tiger ;
63392: LD_ADDR_OWVAR 28
63396: PUSH
63397: LD_INT 14
63399: ST_TO_ADDR
// hc_gallery :=  ;
63400: LD_ADDR_OWVAR 33
63404: PUSH
63405: LD_STRING 
63407: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63408: LD_ADDR_OWVAR 35
63412: PUSH
63413: LD_VAR 0 1
63417: NEG
63418: PPUSH
63419: LD_VAR 0 1
63423: PPUSH
63424: CALL_OW 12
63428: ST_TO_ADDR
// end ;
63429: LD_VAR 0 2
63433: RET
// export function PrepareEnchidna ( ) ; begin
63434: LD_INT 0
63436: PPUSH
// uc_side := 0 ;
63437: LD_ADDR_OWVAR 20
63441: PUSH
63442: LD_INT 0
63444: ST_TO_ADDR
// uc_nation := 0 ;
63445: LD_ADDR_OWVAR 21
63449: PUSH
63450: LD_INT 0
63452: ST_TO_ADDR
// hc_class := class_baggie ;
63453: LD_ADDR_OWVAR 28
63457: PUSH
63458: LD_INT 13
63460: ST_TO_ADDR
// hc_gallery :=  ;
63461: LD_ADDR_OWVAR 33
63465: PUSH
63466: LD_STRING 
63468: ST_TO_ADDR
// end ;
63469: LD_VAR 0 1
63473: RET
// export function PrepareFrog ( ) ; begin
63474: LD_INT 0
63476: PPUSH
// uc_side := 0 ;
63477: LD_ADDR_OWVAR 20
63481: PUSH
63482: LD_INT 0
63484: ST_TO_ADDR
// uc_nation := 0 ;
63485: LD_ADDR_OWVAR 21
63489: PUSH
63490: LD_INT 0
63492: ST_TO_ADDR
// hc_class := class_frog ;
63493: LD_ADDR_OWVAR 28
63497: PUSH
63498: LD_INT 19
63500: ST_TO_ADDR
// hc_gallery :=  ;
63501: LD_ADDR_OWVAR 33
63505: PUSH
63506: LD_STRING 
63508: ST_TO_ADDR
// end ;
63509: LD_VAR 0 1
63513: RET
// export function PrepareFish ( ) ; begin
63514: LD_INT 0
63516: PPUSH
// uc_side := 0 ;
63517: LD_ADDR_OWVAR 20
63521: PUSH
63522: LD_INT 0
63524: ST_TO_ADDR
// uc_nation := 0 ;
63525: LD_ADDR_OWVAR 21
63529: PUSH
63530: LD_INT 0
63532: ST_TO_ADDR
// hc_class := class_fish ;
63533: LD_ADDR_OWVAR 28
63537: PUSH
63538: LD_INT 20
63540: ST_TO_ADDR
// hc_gallery :=  ;
63541: LD_ADDR_OWVAR 33
63545: PUSH
63546: LD_STRING 
63548: ST_TO_ADDR
// end ;
63549: LD_VAR 0 1
63553: RET
// export function PrepareBird ( ) ; begin
63554: LD_INT 0
63556: PPUSH
// uc_side := 0 ;
63557: LD_ADDR_OWVAR 20
63561: PUSH
63562: LD_INT 0
63564: ST_TO_ADDR
// uc_nation := 0 ;
63565: LD_ADDR_OWVAR 21
63569: PUSH
63570: LD_INT 0
63572: ST_TO_ADDR
// hc_class := class_phororhacos ;
63573: LD_ADDR_OWVAR 28
63577: PUSH
63578: LD_INT 18
63580: ST_TO_ADDR
// hc_gallery :=  ;
63581: LD_ADDR_OWVAR 33
63585: PUSH
63586: LD_STRING 
63588: ST_TO_ADDR
// end ;
63589: LD_VAR 0 1
63593: RET
// export function PrepareHorse ( ) ; begin
63594: LD_INT 0
63596: PPUSH
// uc_side := 0 ;
63597: LD_ADDR_OWVAR 20
63601: PUSH
63602: LD_INT 0
63604: ST_TO_ADDR
// uc_nation := 0 ;
63605: LD_ADDR_OWVAR 21
63609: PUSH
63610: LD_INT 0
63612: ST_TO_ADDR
// hc_class := class_horse ;
63613: LD_ADDR_OWVAR 28
63617: PUSH
63618: LD_INT 21
63620: ST_TO_ADDR
// hc_gallery :=  ;
63621: LD_ADDR_OWVAR 33
63625: PUSH
63626: LD_STRING 
63628: ST_TO_ADDR
// end ;
63629: LD_VAR 0 1
63633: RET
// export function PrepareMastodont ( ) ; begin
63634: LD_INT 0
63636: PPUSH
// uc_side := 0 ;
63637: LD_ADDR_OWVAR 20
63641: PUSH
63642: LD_INT 0
63644: ST_TO_ADDR
// uc_nation := 0 ;
63645: LD_ADDR_OWVAR 21
63649: PUSH
63650: LD_INT 0
63652: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63653: LD_ADDR_OWVAR 37
63657: PUSH
63658: LD_INT 31
63660: ST_TO_ADDR
// vc_control := control_rider ;
63661: LD_ADDR_OWVAR 38
63665: PUSH
63666: LD_INT 4
63668: ST_TO_ADDR
// end ;
63669: LD_VAR 0 1
63673: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63674: LD_INT 0
63676: PPUSH
63677: PPUSH
63678: PPUSH
// uc_side = 0 ;
63679: LD_ADDR_OWVAR 20
63683: PUSH
63684: LD_INT 0
63686: ST_TO_ADDR
// uc_nation = 0 ;
63687: LD_ADDR_OWVAR 21
63691: PUSH
63692: LD_INT 0
63694: ST_TO_ADDR
// InitHc_All ( ) ;
63695: CALL_OW 584
// InitVc ;
63699: CALL_OW 20
// if mastodonts then
63703: LD_VAR 0 6
63707: IFFALSE 63774
// for i = 1 to mastodonts do
63709: LD_ADDR_VAR 0 11
63713: PUSH
63714: DOUBLE
63715: LD_INT 1
63717: DEC
63718: ST_TO_ADDR
63719: LD_VAR 0 6
63723: PUSH
63724: FOR_TO
63725: IFFALSE 63772
// begin vc_chassis := 31 ;
63727: LD_ADDR_OWVAR 37
63731: PUSH
63732: LD_INT 31
63734: ST_TO_ADDR
// vc_control := control_rider ;
63735: LD_ADDR_OWVAR 38
63739: PUSH
63740: LD_INT 4
63742: ST_TO_ADDR
// animal := CreateVehicle ;
63743: LD_ADDR_VAR 0 12
63747: PUSH
63748: CALL_OW 45
63752: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63753: LD_VAR 0 12
63757: PPUSH
63758: LD_VAR 0 8
63762: PPUSH
63763: LD_INT 0
63765: PPUSH
63766: CALL 65909 0 3
// end ;
63770: GO 63724
63772: POP
63773: POP
// if horses then
63774: LD_VAR 0 5
63778: IFFALSE 63845
// for i = 1 to horses do
63780: LD_ADDR_VAR 0 11
63784: PUSH
63785: DOUBLE
63786: LD_INT 1
63788: DEC
63789: ST_TO_ADDR
63790: LD_VAR 0 5
63794: PUSH
63795: FOR_TO
63796: IFFALSE 63843
// begin hc_class := 21 ;
63798: LD_ADDR_OWVAR 28
63802: PUSH
63803: LD_INT 21
63805: ST_TO_ADDR
// hc_gallery :=  ;
63806: LD_ADDR_OWVAR 33
63810: PUSH
63811: LD_STRING 
63813: ST_TO_ADDR
// animal := CreateHuman ;
63814: LD_ADDR_VAR 0 12
63818: PUSH
63819: CALL_OW 44
63823: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63824: LD_VAR 0 12
63828: PPUSH
63829: LD_VAR 0 8
63833: PPUSH
63834: LD_INT 0
63836: PPUSH
63837: CALL 65909 0 3
// end ;
63841: GO 63795
63843: POP
63844: POP
// if birds then
63845: LD_VAR 0 1
63849: IFFALSE 63916
// for i = 1 to birds do
63851: LD_ADDR_VAR 0 11
63855: PUSH
63856: DOUBLE
63857: LD_INT 1
63859: DEC
63860: ST_TO_ADDR
63861: LD_VAR 0 1
63865: PUSH
63866: FOR_TO
63867: IFFALSE 63914
// begin hc_class = 18 ;
63869: LD_ADDR_OWVAR 28
63873: PUSH
63874: LD_INT 18
63876: ST_TO_ADDR
// hc_gallery =  ;
63877: LD_ADDR_OWVAR 33
63881: PUSH
63882: LD_STRING 
63884: ST_TO_ADDR
// animal := CreateHuman ;
63885: LD_ADDR_VAR 0 12
63889: PUSH
63890: CALL_OW 44
63894: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63895: LD_VAR 0 12
63899: PPUSH
63900: LD_VAR 0 8
63904: PPUSH
63905: LD_INT 0
63907: PPUSH
63908: CALL 65909 0 3
// end ;
63912: GO 63866
63914: POP
63915: POP
// if tigers then
63916: LD_VAR 0 2
63920: IFFALSE 64004
// for i = 1 to tigers do
63922: LD_ADDR_VAR 0 11
63926: PUSH
63927: DOUBLE
63928: LD_INT 1
63930: DEC
63931: ST_TO_ADDR
63932: LD_VAR 0 2
63936: PUSH
63937: FOR_TO
63938: IFFALSE 64002
// begin hc_class = class_tiger ;
63940: LD_ADDR_OWVAR 28
63944: PUSH
63945: LD_INT 14
63947: ST_TO_ADDR
// hc_gallery =  ;
63948: LD_ADDR_OWVAR 33
63952: PUSH
63953: LD_STRING 
63955: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63956: LD_ADDR_OWVAR 35
63960: PUSH
63961: LD_INT 7
63963: NEG
63964: PPUSH
63965: LD_INT 7
63967: PPUSH
63968: CALL_OW 12
63972: ST_TO_ADDR
// animal := CreateHuman ;
63973: LD_ADDR_VAR 0 12
63977: PUSH
63978: CALL_OW 44
63982: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63983: LD_VAR 0 12
63987: PPUSH
63988: LD_VAR 0 8
63992: PPUSH
63993: LD_INT 0
63995: PPUSH
63996: CALL 65909 0 3
// end ;
64000: GO 63937
64002: POP
64003: POP
// if apemans then
64004: LD_VAR 0 3
64008: IFFALSE 64131
// for i = 1 to apemans do
64010: LD_ADDR_VAR 0 11
64014: PUSH
64015: DOUBLE
64016: LD_INT 1
64018: DEC
64019: ST_TO_ADDR
64020: LD_VAR 0 3
64024: PUSH
64025: FOR_TO
64026: IFFALSE 64129
// begin hc_class = class_apeman ;
64028: LD_ADDR_OWVAR 28
64032: PUSH
64033: LD_INT 12
64035: ST_TO_ADDR
// hc_gallery =  ;
64036: LD_ADDR_OWVAR 33
64040: PUSH
64041: LD_STRING 
64043: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64044: LD_ADDR_OWVAR 35
64048: PUSH
64049: LD_INT 2
64051: NEG
64052: PPUSH
64053: LD_INT 2
64055: PPUSH
64056: CALL_OW 12
64060: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64061: LD_ADDR_OWVAR 31
64065: PUSH
64066: LD_INT 1
64068: PPUSH
64069: LD_INT 3
64071: PPUSH
64072: CALL_OW 12
64076: PUSH
64077: LD_INT 1
64079: PPUSH
64080: LD_INT 3
64082: PPUSH
64083: CALL_OW 12
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: LD_INT 0
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: ST_TO_ADDR
// animal := CreateHuman ;
64100: LD_ADDR_VAR 0 12
64104: PUSH
64105: CALL_OW 44
64109: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64110: LD_VAR 0 12
64114: PPUSH
64115: LD_VAR 0 8
64119: PPUSH
64120: LD_INT 0
64122: PPUSH
64123: CALL 65909 0 3
// end ;
64127: GO 64025
64129: POP
64130: POP
// if enchidnas then
64131: LD_VAR 0 4
64135: IFFALSE 64202
// for i = 1 to enchidnas do
64137: LD_ADDR_VAR 0 11
64141: PUSH
64142: DOUBLE
64143: LD_INT 1
64145: DEC
64146: ST_TO_ADDR
64147: LD_VAR 0 4
64151: PUSH
64152: FOR_TO
64153: IFFALSE 64200
// begin hc_class = 13 ;
64155: LD_ADDR_OWVAR 28
64159: PUSH
64160: LD_INT 13
64162: ST_TO_ADDR
// hc_gallery =  ;
64163: LD_ADDR_OWVAR 33
64167: PUSH
64168: LD_STRING 
64170: ST_TO_ADDR
// animal := CreateHuman ;
64171: LD_ADDR_VAR 0 12
64175: PUSH
64176: CALL_OW 44
64180: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64181: LD_VAR 0 12
64185: PPUSH
64186: LD_VAR 0 8
64190: PPUSH
64191: LD_INT 0
64193: PPUSH
64194: CALL 65909 0 3
// end ;
64198: GO 64152
64200: POP
64201: POP
// if fishes then
64202: LD_VAR 0 7
64206: IFFALSE 64273
// for i = 1 to fishes do
64208: LD_ADDR_VAR 0 11
64212: PUSH
64213: DOUBLE
64214: LD_INT 1
64216: DEC
64217: ST_TO_ADDR
64218: LD_VAR 0 7
64222: PUSH
64223: FOR_TO
64224: IFFALSE 64271
// begin hc_class = 20 ;
64226: LD_ADDR_OWVAR 28
64230: PUSH
64231: LD_INT 20
64233: ST_TO_ADDR
// hc_gallery =  ;
64234: LD_ADDR_OWVAR 33
64238: PUSH
64239: LD_STRING 
64241: ST_TO_ADDR
// animal := CreateHuman ;
64242: LD_ADDR_VAR 0 12
64246: PUSH
64247: CALL_OW 44
64251: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64252: LD_VAR 0 12
64256: PPUSH
64257: LD_VAR 0 9
64261: PPUSH
64262: LD_INT 0
64264: PPUSH
64265: CALL 65909 0 3
// end ;
64269: GO 64223
64271: POP
64272: POP
// end ;
64273: LD_VAR 0 10
64277: RET
// export function WantHeal ( sci , unit ) ; begin
64278: LD_INT 0
64280: PPUSH
// if GetTaskList ( sci ) > 0 then
64281: LD_VAR 0 1
64285: PPUSH
64286: CALL_OW 437
64290: PUSH
64291: LD_INT 0
64293: GREATER
64294: IFFALSE 64364
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64296: LD_VAR 0 1
64300: PPUSH
64301: CALL_OW 437
64305: PUSH
64306: LD_INT 1
64308: ARRAY
64309: PUSH
64310: LD_INT 1
64312: ARRAY
64313: PUSH
64314: LD_STRING l
64316: EQUAL
64317: PUSH
64318: LD_VAR 0 1
64322: PPUSH
64323: CALL_OW 437
64327: PUSH
64328: LD_INT 1
64330: ARRAY
64331: PUSH
64332: LD_INT 4
64334: ARRAY
64335: PUSH
64336: LD_VAR 0 2
64340: EQUAL
64341: AND
64342: IFFALSE 64354
// result := true else
64344: LD_ADDR_VAR 0 3
64348: PUSH
64349: LD_INT 1
64351: ST_TO_ADDR
64352: GO 64362
// result := false ;
64354: LD_ADDR_VAR 0 3
64358: PUSH
64359: LD_INT 0
64361: ST_TO_ADDR
// end else
64362: GO 64372
// result := false ;
64364: LD_ADDR_VAR 0 3
64368: PUSH
64369: LD_INT 0
64371: ST_TO_ADDR
// end ;
64372: LD_VAR 0 3
64376: RET
// export function HealTarget ( sci ) ; begin
64377: LD_INT 0
64379: PPUSH
// if not sci then
64380: LD_VAR 0 1
64384: NOT
64385: IFFALSE 64389
// exit ;
64387: GO 64454
// result := 0 ;
64389: LD_ADDR_VAR 0 2
64393: PUSH
64394: LD_INT 0
64396: ST_TO_ADDR
// if GetTaskList ( sci ) then
64397: LD_VAR 0 1
64401: PPUSH
64402: CALL_OW 437
64406: IFFALSE 64454
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64408: LD_VAR 0 1
64412: PPUSH
64413: CALL_OW 437
64417: PUSH
64418: LD_INT 1
64420: ARRAY
64421: PUSH
64422: LD_INT 1
64424: ARRAY
64425: PUSH
64426: LD_STRING l
64428: EQUAL
64429: IFFALSE 64454
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64431: LD_ADDR_VAR 0 2
64435: PUSH
64436: LD_VAR 0 1
64440: PPUSH
64441: CALL_OW 437
64445: PUSH
64446: LD_INT 1
64448: ARRAY
64449: PUSH
64450: LD_INT 4
64452: ARRAY
64453: ST_TO_ADDR
// end ;
64454: LD_VAR 0 2
64458: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64459: LD_INT 0
64461: PPUSH
64462: PPUSH
64463: PPUSH
64464: PPUSH
// if not base_units then
64465: LD_VAR 0 1
64469: NOT
64470: IFFALSE 64474
// exit ;
64472: GO 64561
// result := false ;
64474: LD_ADDR_VAR 0 2
64478: PUSH
64479: LD_INT 0
64481: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64482: LD_ADDR_VAR 0 5
64486: PUSH
64487: LD_VAR 0 1
64491: PPUSH
64492: LD_INT 21
64494: PUSH
64495: LD_INT 3
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PPUSH
64502: CALL_OW 72
64506: ST_TO_ADDR
// if not tmp then
64507: LD_VAR 0 5
64511: NOT
64512: IFFALSE 64516
// exit ;
64514: GO 64561
// for i in tmp do
64516: LD_ADDR_VAR 0 3
64520: PUSH
64521: LD_VAR 0 5
64525: PUSH
64526: FOR_IN
64527: IFFALSE 64559
// begin result := EnemyInRange ( i , 22 ) ;
64529: LD_ADDR_VAR 0 2
64533: PUSH
64534: LD_VAR 0 3
64538: PPUSH
64539: LD_INT 22
64541: PPUSH
64542: CALL 62230 0 2
64546: ST_TO_ADDR
// if result then
64547: LD_VAR 0 2
64551: IFFALSE 64557
// exit ;
64553: POP
64554: POP
64555: GO 64561
// end ;
64557: GO 64526
64559: POP
64560: POP
// end ;
64561: LD_VAR 0 2
64565: RET
// export function FilterByTag ( units , tag ) ; begin
64566: LD_INT 0
64568: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64569: LD_ADDR_VAR 0 3
64573: PUSH
64574: LD_VAR 0 1
64578: PPUSH
64579: LD_INT 120
64581: PUSH
64582: LD_VAR 0 2
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PPUSH
64591: CALL_OW 72
64595: ST_TO_ADDR
// end ;
64596: LD_VAR 0 3
64600: RET
// export function IsDriver ( un ) ; begin
64601: LD_INT 0
64603: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64604: LD_ADDR_VAR 0 2
64608: PUSH
64609: LD_VAR 0 1
64613: PUSH
64614: LD_INT 55
64616: PUSH
64617: EMPTY
64618: LIST
64619: PPUSH
64620: CALL_OW 69
64624: IN
64625: ST_TO_ADDR
// end ;
64626: LD_VAR 0 2
64630: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64631: LD_INT 0
64633: PPUSH
64634: PPUSH
// list := [ ] ;
64635: LD_ADDR_VAR 0 5
64639: PUSH
64640: EMPTY
64641: ST_TO_ADDR
// case d of 0 :
64642: LD_VAR 0 3
64646: PUSH
64647: LD_INT 0
64649: DOUBLE
64650: EQUAL
64651: IFTRUE 64655
64653: GO 64788
64655: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64656: LD_ADDR_VAR 0 5
64660: PUSH
64661: LD_VAR 0 1
64665: PUSH
64666: LD_INT 4
64668: MINUS
64669: PUSH
64670: LD_VAR 0 2
64674: PUSH
64675: LD_INT 4
64677: MINUS
64678: PUSH
64679: LD_INT 2
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: PUSH
64687: LD_VAR 0 1
64691: PUSH
64692: LD_INT 3
64694: MINUS
64695: PUSH
64696: LD_VAR 0 2
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: LIST
64708: PUSH
64709: LD_VAR 0 1
64713: PUSH
64714: LD_INT 4
64716: PLUS
64717: PUSH
64718: LD_VAR 0 2
64722: PUSH
64723: LD_INT 4
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: LIST
64730: PUSH
64731: LD_VAR 0 1
64735: PUSH
64736: LD_INT 3
64738: PLUS
64739: PUSH
64740: LD_VAR 0 2
64744: PUSH
64745: LD_INT 3
64747: PLUS
64748: PUSH
64749: LD_INT 5
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: LIST
64756: PUSH
64757: LD_VAR 0 1
64761: PUSH
64762: LD_VAR 0 2
64766: PUSH
64767: LD_INT 4
64769: PLUS
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: LIST
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: ST_TO_ADDR
// end ; 1 :
64786: GO 65486
64788: LD_INT 1
64790: DOUBLE
64791: EQUAL
64792: IFTRUE 64796
64794: GO 64929
64796: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64797: LD_ADDR_VAR 0 5
64801: PUSH
64802: LD_VAR 0 1
64806: PUSH
64807: LD_VAR 0 2
64811: PUSH
64812: LD_INT 4
64814: MINUS
64815: PUSH
64816: LD_INT 3
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: LIST
64823: PUSH
64824: LD_VAR 0 1
64828: PUSH
64829: LD_INT 3
64831: MINUS
64832: PUSH
64833: LD_VAR 0 2
64837: PUSH
64838: LD_INT 3
64840: MINUS
64841: PUSH
64842: LD_INT 2
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: PUSH
64850: LD_VAR 0 1
64854: PUSH
64855: LD_INT 4
64857: MINUS
64858: PUSH
64859: LD_VAR 0 2
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: LIST
64871: PUSH
64872: LD_VAR 0 1
64876: PUSH
64877: LD_VAR 0 2
64881: PUSH
64882: LD_INT 3
64884: PLUS
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: LIST
64893: PUSH
64894: LD_VAR 0 1
64898: PUSH
64899: LD_INT 4
64901: PLUS
64902: PUSH
64903: LD_VAR 0 2
64907: PUSH
64908: LD_INT 4
64910: PLUS
64911: PUSH
64912: LD_INT 5
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: LIST
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: ST_TO_ADDR
// end ; 2 :
64927: GO 65486
64929: LD_INT 2
64931: DOUBLE
64932: EQUAL
64933: IFTRUE 64937
64935: GO 65066
64937: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64938: LD_ADDR_VAR 0 5
64942: PUSH
64943: LD_VAR 0 1
64947: PUSH
64948: LD_VAR 0 2
64952: PUSH
64953: LD_INT 3
64955: MINUS
64956: PUSH
64957: LD_INT 3
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: PUSH
64965: LD_VAR 0 1
64969: PUSH
64970: LD_INT 4
64972: PLUS
64973: PUSH
64974: LD_VAR 0 2
64978: PUSH
64979: LD_INT 4
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: LIST
64986: PUSH
64987: LD_VAR 0 1
64991: PUSH
64992: LD_VAR 0 2
64996: PUSH
64997: LD_INT 4
64999: PLUS
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: LIST
65008: PUSH
65009: LD_VAR 0 1
65013: PUSH
65014: LD_INT 3
65016: MINUS
65017: PUSH
65018: LD_VAR 0 2
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: LIST
65030: PUSH
65031: LD_VAR 0 1
65035: PUSH
65036: LD_INT 4
65038: MINUS
65039: PUSH
65040: LD_VAR 0 2
65044: PUSH
65045: LD_INT 4
65047: MINUS
65048: PUSH
65049: LD_INT 2
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: LIST
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: ST_TO_ADDR
// end ; 3 :
65064: GO 65486
65066: LD_INT 3
65068: DOUBLE
65069: EQUAL
65070: IFTRUE 65074
65072: GO 65207
65074: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65075: LD_ADDR_VAR 0 5
65079: PUSH
65080: LD_VAR 0 1
65084: PUSH
65085: LD_INT 3
65087: PLUS
65088: PUSH
65089: LD_VAR 0 2
65093: PUSH
65094: LD_INT 4
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: LIST
65101: PUSH
65102: LD_VAR 0 1
65106: PUSH
65107: LD_INT 4
65109: PLUS
65110: PUSH
65111: LD_VAR 0 2
65115: PUSH
65116: LD_INT 4
65118: PLUS
65119: PUSH
65120: LD_INT 5
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: LIST
65127: PUSH
65128: LD_VAR 0 1
65132: PUSH
65133: LD_INT 4
65135: MINUS
65136: PUSH
65137: LD_VAR 0 2
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: LIST
65149: PUSH
65150: LD_VAR 0 1
65154: PUSH
65155: LD_VAR 0 2
65159: PUSH
65160: LD_INT 4
65162: MINUS
65163: PUSH
65164: LD_INT 3
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: LIST
65171: PUSH
65172: LD_VAR 0 1
65176: PUSH
65177: LD_INT 3
65179: MINUS
65180: PUSH
65181: LD_VAR 0 2
65185: PUSH
65186: LD_INT 3
65188: MINUS
65189: PUSH
65190: LD_INT 2
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: LIST
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: ST_TO_ADDR
// end ; 4 :
65205: GO 65486
65207: LD_INT 4
65209: DOUBLE
65210: EQUAL
65211: IFTRUE 65215
65213: GO 65348
65215: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65216: LD_ADDR_VAR 0 5
65220: PUSH
65221: LD_VAR 0 1
65225: PUSH
65226: LD_VAR 0 2
65230: PUSH
65231: LD_INT 4
65233: PLUS
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: LIST
65242: PUSH
65243: LD_VAR 0 1
65247: PUSH
65248: LD_INT 3
65250: PLUS
65251: PUSH
65252: LD_VAR 0 2
65256: PUSH
65257: LD_INT 3
65259: PLUS
65260: PUSH
65261: LD_INT 5
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: LIST
65268: PUSH
65269: LD_VAR 0 1
65273: PUSH
65274: LD_INT 4
65276: PLUS
65277: PUSH
65278: LD_VAR 0 2
65282: PUSH
65283: LD_INT 4
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: LIST
65290: PUSH
65291: LD_VAR 0 1
65295: PUSH
65296: LD_VAR 0 2
65300: PUSH
65301: LD_INT 3
65303: MINUS
65304: PUSH
65305: LD_INT 3
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: PUSH
65313: LD_VAR 0 1
65317: PUSH
65318: LD_INT 4
65320: MINUS
65321: PUSH
65322: LD_VAR 0 2
65326: PUSH
65327: LD_INT 4
65329: MINUS
65330: PUSH
65331: LD_INT 2
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: LIST
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: ST_TO_ADDR
// end ; 5 :
65346: GO 65486
65348: LD_INT 5
65350: DOUBLE
65351: EQUAL
65352: IFTRUE 65356
65354: GO 65485
65356: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65357: LD_ADDR_VAR 0 5
65361: PUSH
65362: LD_VAR 0 1
65366: PUSH
65367: LD_INT 4
65369: MINUS
65370: PUSH
65371: LD_VAR 0 2
65375: PUSH
65376: LD_INT 1
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: LIST
65383: PUSH
65384: LD_VAR 0 1
65388: PUSH
65389: LD_VAR 0 2
65393: PUSH
65394: LD_INT 4
65396: MINUS
65397: PUSH
65398: LD_INT 3
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: LIST
65405: PUSH
65406: LD_VAR 0 1
65410: PUSH
65411: LD_INT 4
65413: PLUS
65414: PUSH
65415: LD_VAR 0 2
65419: PUSH
65420: LD_INT 4
65422: PLUS
65423: PUSH
65424: LD_INT 5
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: LIST
65431: PUSH
65432: LD_VAR 0 1
65436: PUSH
65437: LD_INT 3
65439: PLUS
65440: PUSH
65441: LD_VAR 0 2
65445: PUSH
65446: LD_INT 4
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: LIST
65453: PUSH
65454: LD_VAR 0 1
65458: PUSH
65459: LD_VAR 0 2
65463: PUSH
65464: LD_INT 3
65466: PLUS
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: LIST
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: ST_TO_ADDR
// end ; end ;
65483: GO 65486
65485: POP
// result := list ;
65486: LD_ADDR_VAR 0 4
65490: PUSH
65491: LD_VAR 0 5
65495: ST_TO_ADDR
// end ;
65496: LD_VAR 0 4
65500: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65501: LD_INT 0
65503: PPUSH
65504: PPUSH
65505: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65506: LD_VAR 0 1
65510: NOT
65511: PUSH
65512: LD_VAR 0 2
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: LD_INT 2
65522: PUSH
65523: LD_INT 3
65525: PUSH
65526: LD_INT 4
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: IN
65535: NOT
65536: OR
65537: IFFALSE 65541
// exit ;
65539: GO 65633
// tmp := [ ] ;
65541: LD_ADDR_VAR 0 5
65545: PUSH
65546: EMPTY
65547: ST_TO_ADDR
// for i in units do
65548: LD_ADDR_VAR 0 4
65552: PUSH
65553: LD_VAR 0 1
65557: PUSH
65558: FOR_IN
65559: IFFALSE 65602
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65561: LD_ADDR_VAR 0 5
65565: PUSH
65566: LD_VAR 0 5
65570: PPUSH
65571: LD_VAR 0 5
65575: PUSH
65576: LD_INT 1
65578: PLUS
65579: PPUSH
65580: LD_VAR 0 4
65584: PPUSH
65585: LD_VAR 0 2
65589: PPUSH
65590: CALL_OW 259
65594: PPUSH
65595: CALL_OW 2
65599: ST_TO_ADDR
65600: GO 65558
65602: POP
65603: POP
// if not tmp then
65604: LD_VAR 0 5
65608: NOT
65609: IFFALSE 65613
// exit ;
65611: GO 65633
// result := SortListByListDesc ( units , tmp ) ;
65613: LD_ADDR_VAR 0 3
65617: PUSH
65618: LD_VAR 0 1
65622: PPUSH
65623: LD_VAR 0 5
65627: PPUSH
65628: CALL_OW 77
65632: ST_TO_ADDR
// end ;
65633: LD_VAR 0 3
65637: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65638: LD_INT 0
65640: PPUSH
65641: PPUSH
65642: PPUSH
// result := false ;
65643: LD_ADDR_VAR 0 3
65647: PUSH
65648: LD_INT 0
65650: ST_TO_ADDR
// x := GetX ( building ) ;
65651: LD_ADDR_VAR 0 4
65655: PUSH
65656: LD_VAR 0 2
65660: PPUSH
65661: CALL_OW 250
65665: ST_TO_ADDR
// y := GetY ( building ) ;
65666: LD_ADDR_VAR 0 5
65670: PUSH
65671: LD_VAR 0 2
65675: PPUSH
65676: CALL_OW 251
65680: ST_TO_ADDR
// if not building or not x or not y then
65681: LD_VAR 0 2
65685: NOT
65686: PUSH
65687: LD_VAR 0 4
65691: NOT
65692: OR
65693: PUSH
65694: LD_VAR 0 5
65698: NOT
65699: OR
65700: IFFALSE 65704
// exit ;
65702: GO 65796
// if GetTaskList ( unit ) then
65704: LD_VAR 0 1
65708: PPUSH
65709: CALL_OW 437
65713: IFFALSE 65796
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65715: LD_STRING e
65717: PUSH
65718: LD_VAR 0 1
65722: PPUSH
65723: CALL_OW 437
65727: PUSH
65728: LD_INT 1
65730: ARRAY
65731: PUSH
65732: LD_INT 1
65734: ARRAY
65735: EQUAL
65736: PUSH
65737: LD_VAR 0 4
65741: PUSH
65742: LD_VAR 0 1
65746: PPUSH
65747: CALL_OW 437
65751: PUSH
65752: LD_INT 1
65754: ARRAY
65755: PUSH
65756: LD_INT 2
65758: ARRAY
65759: EQUAL
65760: AND
65761: PUSH
65762: LD_VAR 0 5
65766: PUSH
65767: LD_VAR 0 1
65771: PPUSH
65772: CALL_OW 437
65776: PUSH
65777: LD_INT 1
65779: ARRAY
65780: PUSH
65781: LD_INT 3
65783: ARRAY
65784: EQUAL
65785: AND
65786: IFFALSE 65796
// result := true end ;
65788: LD_ADDR_VAR 0 3
65792: PUSH
65793: LD_INT 1
65795: ST_TO_ADDR
// end ;
65796: LD_VAR 0 3
65800: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65801: LD_INT 0
65803: PPUSH
// result := false ;
65804: LD_ADDR_VAR 0 4
65808: PUSH
65809: LD_INT 0
65811: ST_TO_ADDR
// if GetTaskList ( unit ) then
65812: LD_VAR 0 1
65816: PPUSH
65817: CALL_OW 437
65821: IFFALSE 65904
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65823: LD_STRING M
65825: PUSH
65826: LD_VAR 0 1
65830: PPUSH
65831: CALL_OW 437
65835: PUSH
65836: LD_INT 1
65838: ARRAY
65839: PUSH
65840: LD_INT 1
65842: ARRAY
65843: EQUAL
65844: PUSH
65845: LD_VAR 0 2
65849: PUSH
65850: LD_VAR 0 1
65854: PPUSH
65855: CALL_OW 437
65859: PUSH
65860: LD_INT 1
65862: ARRAY
65863: PUSH
65864: LD_INT 2
65866: ARRAY
65867: EQUAL
65868: AND
65869: PUSH
65870: LD_VAR 0 3
65874: PUSH
65875: LD_VAR 0 1
65879: PPUSH
65880: CALL_OW 437
65884: PUSH
65885: LD_INT 1
65887: ARRAY
65888: PUSH
65889: LD_INT 3
65891: ARRAY
65892: EQUAL
65893: AND
65894: IFFALSE 65904
// result := true ;
65896: LD_ADDR_VAR 0 4
65900: PUSH
65901: LD_INT 1
65903: ST_TO_ADDR
// end ; end ;
65904: LD_VAR 0 4
65908: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65909: LD_INT 0
65911: PPUSH
65912: PPUSH
65913: PPUSH
65914: PPUSH
// if not unit or not area then
65915: LD_VAR 0 1
65919: NOT
65920: PUSH
65921: LD_VAR 0 2
65925: NOT
65926: OR
65927: IFFALSE 65931
// exit ;
65929: GO 66095
// tmp := AreaToList ( area , i ) ;
65931: LD_ADDR_VAR 0 6
65935: PUSH
65936: LD_VAR 0 2
65940: PPUSH
65941: LD_VAR 0 5
65945: PPUSH
65946: CALL_OW 517
65950: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65951: LD_ADDR_VAR 0 5
65955: PUSH
65956: DOUBLE
65957: LD_INT 1
65959: DEC
65960: ST_TO_ADDR
65961: LD_VAR 0 6
65965: PUSH
65966: LD_INT 1
65968: ARRAY
65969: PUSH
65970: FOR_TO
65971: IFFALSE 66093
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65973: LD_ADDR_VAR 0 7
65977: PUSH
65978: LD_VAR 0 6
65982: PUSH
65983: LD_INT 1
65985: ARRAY
65986: PUSH
65987: LD_VAR 0 5
65991: ARRAY
65992: PUSH
65993: LD_VAR 0 6
65997: PUSH
65998: LD_INT 2
66000: ARRAY
66001: PUSH
66002: LD_VAR 0 5
66006: ARRAY
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66012: LD_VAR 0 7
66016: PUSH
66017: LD_INT 1
66019: ARRAY
66020: PPUSH
66021: LD_VAR 0 7
66025: PUSH
66026: LD_INT 2
66028: ARRAY
66029: PPUSH
66030: CALL_OW 428
66034: PUSH
66035: LD_INT 0
66037: EQUAL
66038: IFFALSE 66091
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66040: LD_VAR 0 1
66044: PPUSH
66045: LD_VAR 0 7
66049: PUSH
66050: LD_INT 1
66052: ARRAY
66053: PPUSH
66054: LD_VAR 0 7
66058: PUSH
66059: LD_INT 2
66061: ARRAY
66062: PPUSH
66063: LD_VAR 0 3
66067: PPUSH
66068: CALL_OW 48
// result := IsPlaced ( unit ) ;
66072: LD_ADDR_VAR 0 4
66076: PUSH
66077: LD_VAR 0 1
66081: PPUSH
66082: CALL_OW 305
66086: ST_TO_ADDR
// exit ;
66087: POP
66088: POP
66089: GO 66095
// end ; end ;
66091: GO 65970
66093: POP
66094: POP
// end ;
66095: LD_VAR 0 4
66099: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66100: LD_INT 0
66102: PPUSH
66103: PPUSH
66104: PPUSH
// if not side or side > 8 then
66105: LD_VAR 0 1
66109: NOT
66110: PUSH
66111: LD_VAR 0 1
66115: PUSH
66116: LD_INT 8
66118: GREATER
66119: OR
66120: IFFALSE 66124
// exit ;
66122: GO 66311
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66124: LD_ADDR_VAR 0 4
66128: PUSH
66129: LD_INT 22
66131: PUSH
66132: LD_VAR 0 1
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 21
66143: PUSH
66144: LD_INT 3
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PPUSH
66155: CALL_OW 69
66159: ST_TO_ADDR
// if not tmp then
66160: LD_VAR 0 4
66164: NOT
66165: IFFALSE 66169
// exit ;
66167: GO 66311
// enable_addtolog := true ;
66169: LD_ADDR_OWVAR 81
66173: PUSH
66174: LD_INT 1
66176: ST_TO_ADDR
// AddToLog ( [ ) ;
66177: LD_STRING [
66179: PPUSH
66180: CALL_OW 561
// for i in tmp do
66184: LD_ADDR_VAR 0 3
66188: PUSH
66189: LD_VAR 0 4
66193: PUSH
66194: FOR_IN
66195: IFFALSE 66302
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66197: LD_STRING [
66199: PUSH
66200: LD_VAR 0 3
66204: PPUSH
66205: CALL_OW 266
66209: STR
66210: PUSH
66211: LD_STRING , 
66213: STR
66214: PUSH
66215: LD_VAR 0 3
66219: PPUSH
66220: CALL_OW 250
66224: STR
66225: PUSH
66226: LD_STRING , 
66228: STR
66229: PUSH
66230: LD_VAR 0 3
66234: PPUSH
66235: CALL_OW 251
66239: STR
66240: PUSH
66241: LD_STRING , 
66243: STR
66244: PUSH
66245: LD_VAR 0 3
66249: PPUSH
66250: CALL_OW 254
66254: STR
66255: PUSH
66256: LD_STRING , 
66258: STR
66259: PUSH
66260: LD_VAR 0 3
66264: PPUSH
66265: LD_INT 1
66267: PPUSH
66268: CALL_OW 268
66272: STR
66273: PUSH
66274: LD_STRING , 
66276: STR
66277: PUSH
66278: LD_VAR 0 3
66282: PPUSH
66283: LD_INT 2
66285: PPUSH
66286: CALL_OW 268
66290: STR
66291: PUSH
66292: LD_STRING ],
66294: STR
66295: PPUSH
66296: CALL_OW 561
// end ;
66300: GO 66194
66302: POP
66303: POP
// AddToLog ( ]; ) ;
66304: LD_STRING ];
66306: PPUSH
66307: CALL_OW 561
// end ;
66311: LD_VAR 0 2
66315: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66316: LD_INT 0
66318: PPUSH
66319: PPUSH
66320: PPUSH
66321: PPUSH
66322: PPUSH
// if not area or not rate or not max then
66323: LD_VAR 0 1
66327: NOT
66328: PUSH
66329: LD_VAR 0 2
66333: NOT
66334: OR
66335: PUSH
66336: LD_VAR 0 4
66340: NOT
66341: OR
66342: IFFALSE 66346
// exit ;
66344: GO 66535
// while 1 do
66346: LD_INT 1
66348: IFFALSE 66535
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66350: LD_ADDR_VAR 0 9
66354: PUSH
66355: LD_VAR 0 1
66359: PPUSH
66360: LD_INT 1
66362: PPUSH
66363: CALL_OW 287
66367: PUSH
66368: LD_INT 10
66370: MUL
66371: ST_TO_ADDR
// r := rate / 10 ;
66372: LD_ADDR_VAR 0 7
66376: PUSH
66377: LD_VAR 0 2
66381: PUSH
66382: LD_INT 10
66384: DIVREAL
66385: ST_TO_ADDR
// time := 1 1$00 ;
66386: LD_ADDR_VAR 0 8
66390: PUSH
66391: LD_INT 2100
66393: ST_TO_ADDR
// if amount < min then
66394: LD_VAR 0 9
66398: PUSH
66399: LD_VAR 0 3
66403: LESS
66404: IFFALSE 66422
// r := r * 2 else
66406: LD_ADDR_VAR 0 7
66410: PUSH
66411: LD_VAR 0 7
66415: PUSH
66416: LD_INT 2
66418: MUL
66419: ST_TO_ADDR
66420: GO 66448
// if amount > max then
66422: LD_VAR 0 9
66426: PUSH
66427: LD_VAR 0 4
66431: GREATER
66432: IFFALSE 66448
// r := r / 2 ;
66434: LD_ADDR_VAR 0 7
66438: PUSH
66439: LD_VAR 0 7
66443: PUSH
66444: LD_INT 2
66446: DIVREAL
66447: ST_TO_ADDR
// time := time / r ;
66448: LD_ADDR_VAR 0 8
66452: PUSH
66453: LD_VAR 0 8
66457: PUSH
66458: LD_VAR 0 7
66462: DIVREAL
66463: ST_TO_ADDR
// if time < 0 then
66464: LD_VAR 0 8
66468: PUSH
66469: LD_INT 0
66471: LESS
66472: IFFALSE 66489
// time := time * - 1 ;
66474: LD_ADDR_VAR 0 8
66478: PUSH
66479: LD_VAR 0 8
66483: PUSH
66484: LD_INT 1
66486: NEG
66487: MUL
66488: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66489: LD_VAR 0 8
66493: PUSH
66494: LD_INT 35
66496: PPUSH
66497: LD_INT 875
66499: PPUSH
66500: CALL_OW 12
66504: PLUS
66505: PPUSH
66506: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66510: LD_INT 1
66512: PPUSH
66513: LD_INT 5
66515: PPUSH
66516: CALL_OW 12
66520: PPUSH
66521: LD_VAR 0 1
66525: PPUSH
66526: LD_INT 1
66528: PPUSH
66529: CALL_OW 55
// end ;
66533: GO 66346
// end ;
66535: LD_VAR 0 5
66539: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66540: LD_INT 0
66542: PPUSH
66543: PPUSH
66544: PPUSH
66545: PPUSH
66546: PPUSH
66547: PPUSH
66548: PPUSH
66549: PPUSH
// if not turrets or not factories then
66550: LD_VAR 0 1
66554: NOT
66555: PUSH
66556: LD_VAR 0 2
66560: NOT
66561: OR
66562: IFFALSE 66566
// exit ;
66564: GO 66873
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66566: LD_ADDR_VAR 0 10
66570: PUSH
66571: LD_INT 5
66573: PUSH
66574: LD_INT 6
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 2
66583: PUSH
66584: LD_INT 4
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 3
66593: PUSH
66594: LD_INT 5
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 24
66608: PUSH
66609: LD_INT 25
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 23
66618: PUSH
66619: LD_INT 27
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 42
66632: PUSH
66633: LD_INT 43
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 44
66642: PUSH
66643: LD_INT 46
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 45
66652: PUSH
66653: LD_INT 47
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: LIST
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: LIST
66669: ST_TO_ADDR
// result := [ ] ;
66670: LD_ADDR_VAR 0 3
66674: PUSH
66675: EMPTY
66676: ST_TO_ADDR
// for i in turrets do
66677: LD_ADDR_VAR 0 4
66681: PUSH
66682: LD_VAR 0 1
66686: PUSH
66687: FOR_IN
66688: IFFALSE 66871
// begin nat := GetNation ( i ) ;
66690: LD_ADDR_VAR 0 7
66694: PUSH
66695: LD_VAR 0 4
66699: PPUSH
66700: CALL_OW 248
66704: ST_TO_ADDR
// weapon := 0 ;
66705: LD_ADDR_VAR 0 8
66709: PUSH
66710: LD_INT 0
66712: ST_TO_ADDR
// if not nat then
66713: LD_VAR 0 7
66717: NOT
66718: IFFALSE 66722
// continue ;
66720: GO 66687
// for j in list [ nat ] do
66722: LD_ADDR_VAR 0 5
66726: PUSH
66727: LD_VAR 0 10
66731: PUSH
66732: LD_VAR 0 7
66736: ARRAY
66737: PUSH
66738: FOR_IN
66739: IFFALSE 66780
// if GetBWeapon ( i ) = j [ 1 ] then
66741: LD_VAR 0 4
66745: PPUSH
66746: CALL_OW 269
66750: PUSH
66751: LD_VAR 0 5
66755: PUSH
66756: LD_INT 1
66758: ARRAY
66759: EQUAL
66760: IFFALSE 66778
// begin weapon := j [ 2 ] ;
66762: LD_ADDR_VAR 0 8
66766: PUSH
66767: LD_VAR 0 5
66771: PUSH
66772: LD_INT 2
66774: ARRAY
66775: ST_TO_ADDR
// break ;
66776: GO 66780
// end ;
66778: GO 66738
66780: POP
66781: POP
// if not weapon then
66782: LD_VAR 0 8
66786: NOT
66787: IFFALSE 66791
// continue ;
66789: GO 66687
// for k in factories do
66791: LD_ADDR_VAR 0 6
66795: PUSH
66796: LD_VAR 0 2
66800: PUSH
66801: FOR_IN
66802: IFFALSE 66867
// begin weapons := AvailableWeaponList ( k ) ;
66804: LD_ADDR_VAR 0 9
66808: PUSH
66809: LD_VAR 0 6
66813: PPUSH
66814: CALL_OW 478
66818: ST_TO_ADDR
// if not weapons then
66819: LD_VAR 0 9
66823: NOT
66824: IFFALSE 66828
// continue ;
66826: GO 66801
// if weapon in weapons then
66828: LD_VAR 0 8
66832: PUSH
66833: LD_VAR 0 9
66837: IN
66838: IFFALSE 66865
// begin result := [ i , weapon ] ;
66840: LD_ADDR_VAR 0 3
66844: PUSH
66845: LD_VAR 0 4
66849: PUSH
66850: LD_VAR 0 8
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: ST_TO_ADDR
// exit ;
66859: POP
66860: POP
66861: POP
66862: POP
66863: GO 66873
// end ; end ;
66865: GO 66801
66867: POP
66868: POP
// end ;
66869: GO 66687
66871: POP
66872: POP
// end ;
66873: LD_VAR 0 3
66877: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66878: LD_INT 0
66880: PPUSH
// if not side or side > 8 then
66881: LD_VAR 0 3
66885: NOT
66886: PUSH
66887: LD_VAR 0 3
66891: PUSH
66892: LD_INT 8
66894: GREATER
66895: OR
66896: IFFALSE 66900
// exit ;
66898: GO 66959
// if not range then
66900: LD_VAR 0 4
66904: NOT
66905: IFFALSE 66916
// range := - 12 ;
66907: LD_ADDR_VAR 0 4
66911: PUSH
66912: LD_INT 12
66914: NEG
66915: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66916: LD_VAR 0 1
66920: PPUSH
66921: LD_VAR 0 2
66925: PPUSH
66926: LD_VAR 0 3
66930: PPUSH
66931: LD_VAR 0 4
66935: PPUSH
66936: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66940: LD_VAR 0 1
66944: PPUSH
66945: LD_VAR 0 2
66949: PPUSH
66950: LD_VAR 0 3
66954: PPUSH
66955: CALL_OW 331
// end ;
66959: LD_VAR 0 5
66963: RET
// export function Video ( mode ) ; begin
66964: LD_INT 0
66966: PPUSH
// ingame_video = mode ;
66967: LD_ADDR_OWVAR 52
66971: PUSH
66972: LD_VAR 0 1
66976: ST_TO_ADDR
// interface_hidden = mode ;
66977: LD_ADDR_OWVAR 54
66981: PUSH
66982: LD_VAR 0 1
66986: ST_TO_ADDR
// end ;
66987: LD_VAR 0 2
66991: RET
// export function Join ( array , element ) ; begin
66992: LD_INT 0
66994: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66995: LD_ADDR_VAR 0 3
66999: PUSH
67000: LD_VAR 0 1
67004: PPUSH
67005: LD_VAR 0 1
67009: PUSH
67010: LD_INT 1
67012: PLUS
67013: PPUSH
67014: LD_VAR 0 2
67018: PPUSH
67019: CALL_OW 1
67023: ST_TO_ADDR
// end ;
67024: LD_VAR 0 3
67028: RET
// export function JoinUnion ( array , element ) ; begin
67029: LD_INT 0
67031: PPUSH
// result := array union element ;
67032: LD_ADDR_VAR 0 3
67036: PUSH
67037: LD_VAR 0 1
67041: PUSH
67042: LD_VAR 0 2
67046: UNION
67047: ST_TO_ADDR
// end ;
67048: LD_VAR 0 3
67052: RET
// export function GetBehemoths ( side ) ; begin
67053: LD_INT 0
67055: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67056: LD_ADDR_VAR 0 2
67060: PUSH
67061: LD_INT 22
67063: PUSH
67064: LD_VAR 0 1
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 31
67075: PUSH
67076: LD_INT 25
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PPUSH
67087: CALL_OW 69
67091: ST_TO_ADDR
// end ;
67092: LD_VAR 0 2
67096: RET
// export function Shuffle ( array ) ; var i , index ; begin
67097: LD_INT 0
67099: PPUSH
67100: PPUSH
67101: PPUSH
// result := [ ] ;
67102: LD_ADDR_VAR 0 2
67106: PUSH
67107: EMPTY
67108: ST_TO_ADDR
// if not array then
67109: LD_VAR 0 1
67113: NOT
67114: IFFALSE 67118
// exit ;
67116: GO 67217
// Randomize ;
67118: CALL_OW 10
// for i = array downto 1 do
67122: LD_ADDR_VAR 0 3
67126: PUSH
67127: DOUBLE
67128: LD_VAR 0 1
67132: INC
67133: ST_TO_ADDR
67134: LD_INT 1
67136: PUSH
67137: FOR_DOWNTO
67138: IFFALSE 67215
// begin index := rand ( 1 , array ) ;
67140: LD_ADDR_VAR 0 4
67144: PUSH
67145: LD_INT 1
67147: PPUSH
67148: LD_VAR 0 1
67152: PPUSH
67153: CALL_OW 12
67157: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67158: LD_ADDR_VAR 0 2
67162: PUSH
67163: LD_VAR 0 2
67167: PPUSH
67168: LD_VAR 0 2
67172: PUSH
67173: LD_INT 1
67175: PLUS
67176: PPUSH
67177: LD_VAR 0 1
67181: PUSH
67182: LD_VAR 0 4
67186: ARRAY
67187: PPUSH
67188: CALL_OW 2
67192: ST_TO_ADDR
// array := Delete ( array , index ) ;
67193: LD_ADDR_VAR 0 1
67197: PUSH
67198: LD_VAR 0 1
67202: PPUSH
67203: LD_VAR 0 4
67207: PPUSH
67208: CALL_OW 3
67212: ST_TO_ADDR
// end ;
67213: GO 67137
67215: POP
67216: POP
// end ;
67217: LD_VAR 0 2
67221: RET
// export function GetBaseMaterials ( base ) ; begin
67222: LD_INT 0
67224: PPUSH
// result := [ 0 , 0 , 0 ] ;
67225: LD_ADDR_VAR 0 2
67229: PUSH
67230: LD_INT 0
67232: PUSH
67233: LD_INT 0
67235: PUSH
67236: LD_INT 0
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: LIST
67243: ST_TO_ADDR
// if not base then
67244: LD_VAR 0 1
67248: NOT
67249: IFFALSE 67253
// exit ;
67251: GO 67302
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67253: LD_ADDR_VAR 0 2
67257: PUSH
67258: LD_VAR 0 1
67262: PPUSH
67263: LD_INT 1
67265: PPUSH
67266: CALL_OW 275
67270: PUSH
67271: LD_VAR 0 1
67275: PPUSH
67276: LD_INT 2
67278: PPUSH
67279: CALL_OW 275
67283: PUSH
67284: LD_VAR 0 1
67288: PPUSH
67289: LD_INT 3
67291: PPUSH
67292: CALL_OW 275
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: LIST
67301: ST_TO_ADDR
// end ;
67302: LD_VAR 0 2
67306: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67307: LD_INT 0
67309: PPUSH
67310: PPUSH
// result := array ;
67311: LD_ADDR_VAR 0 3
67315: PUSH
67316: LD_VAR 0 1
67320: ST_TO_ADDR
// if size >= result then
67321: LD_VAR 0 2
67325: PUSH
67326: LD_VAR 0 3
67330: GREATEREQUAL
67331: IFFALSE 67335
// exit ;
67333: GO 67385
// if size then
67335: LD_VAR 0 2
67339: IFFALSE 67385
// for i := array downto size do
67341: LD_ADDR_VAR 0 4
67345: PUSH
67346: DOUBLE
67347: LD_VAR 0 1
67351: INC
67352: ST_TO_ADDR
67353: LD_VAR 0 2
67357: PUSH
67358: FOR_DOWNTO
67359: IFFALSE 67383
// result := Delete ( result , result ) ;
67361: LD_ADDR_VAR 0 3
67365: PUSH
67366: LD_VAR 0 3
67370: PPUSH
67371: LD_VAR 0 3
67375: PPUSH
67376: CALL_OW 3
67380: ST_TO_ADDR
67381: GO 67358
67383: POP
67384: POP
// end ;
67385: LD_VAR 0 3
67389: RET
// export function ComExit ( unit ) ; var tmp ; begin
67390: LD_INT 0
67392: PPUSH
67393: PPUSH
// if not IsInUnit ( unit ) then
67394: LD_VAR 0 1
67398: PPUSH
67399: CALL_OW 310
67403: NOT
67404: IFFALSE 67408
// exit ;
67406: GO 67468
// tmp := IsInUnit ( unit ) ;
67408: LD_ADDR_VAR 0 3
67412: PUSH
67413: LD_VAR 0 1
67417: PPUSH
67418: CALL_OW 310
67422: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67423: LD_VAR 0 3
67427: PPUSH
67428: CALL_OW 247
67432: PUSH
67433: LD_INT 2
67435: EQUAL
67436: IFFALSE 67449
// ComExitVehicle ( unit ) else
67438: LD_VAR 0 1
67442: PPUSH
67443: CALL_OW 121
67447: GO 67458
// ComExitBuilding ( unit ) ;
67449: LD_VAR 0 1
67453: PPUSH
67454: CALL_OW 122
// result := tmp ;
67458: LD_ADDR_VAR 0 2
67462: PUSH
67463: LD_VAR 0 3
67467: ST_TO_ADDR
// end ;
67468: LD_VAR 0 2
67472: RET
// export function ComExitAll ( units ) ; var i ; begin
67473: LD_INT 0
67475: PPUSH
67476: PPUSH
// if not units then
67477: LD_VAR 0 1
67481: NOT
67482: IFFALSE 67486
// exit ;
67484: GO 67512
// for i in units do
67486: LD_ADDR_VAR 0 3
67490: PUSH
67491: LD_VAR 0 1
67495: PUSH
67496: FOR_IN
67497: IFFALSE 67510
// ComExit ( i ) ;
67499: LD_VAR 0 3
67503: PPUSH
67504: CALL 67390 0 1
67508: GO 67496
67510: POP
67511: POP
// end ;
67512: LD_VAR 0 2
67516: RET
// export function ResetHc ; begin
67517: LD_INT 0
67519: PPUSH
// InitHc ;
67520: CALL_OW 19
// hc_importance := 0 ;
67524: LD_ADDR_OWVAR 32
67528: PUSH
67529: LD_INT 0
67531: ST_TO_ADDR
// end ;
67532: LD_VAR 0 1
67536: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67537: LD_INT 0
67539: PPUSH
67540: PPUSH
67541: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67542: LD_ADDR_VAR 0 6
67546: PUSH
67547: LD_VAR 0 1
67551: PUSH
67552: LD_VAR 0 3
67556: PLUS
67557: PUSH
67558: LD_INT 2
67560: DIV
67561: ST_TO_ADDR
// if _x < 0 then
67562: LD_VAR 0 6
67566: PUSH
67567: LD_INT 0
67569: LESS
67570: IFFALSE 67587
// _x := _x * - 1 ;
67572: LD_ADDR_VAR 0 6
67576: PUSH
67577: LD_VAR 0 6
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: MUL
67586: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67587: LD_ADDR_VAR 0 7
67591: PUSH
67592: LD_VAR 0 2
67596: PUSH
67597: LD_VAR 0 4
67601: PLUS
67602: PUSH
67603: LD_INT 2
67605: DIV
67606: ST_TO_ADDR
// if _y < 0 then
67607: LD_VAR 0 7
67611: PUSH
67612: LD_INT 0
67614: LESS
67615: IFFALSE 67632
// _y := _y * - 1 ;
67617: LD_ADDR_VAR 0 7
67621: PUSH
67622: LD_VAR 0 7
67626: PUSH
67627: LD_INT 1
67629: NEG
67630: MUL
67631: ST_TO_ADDR
// result := [ _x , _y ] ;
67632: LD_ADDR_VAR 0 5
67636: PUSH
67637: LD_VAR 0 6
67641: PUSH
67642: LD_VAR 0 7
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: ST_TO_ADDR
// end ;
67651: LD_VAR 0 5
67655: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67656: LD_INT 0
67658: PPUSH
67659: PPUSH
67660: PPUSH
67661: PPUSH
// task := GetTaskList ( unit ) ;
67662: LD_ADDR_VAR 0 7
67666: PUSH
67667: LD_VAR 0 1
67671: PPUSH
67672: CALL_OW 437
67676: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67677: LD_VAR 0 7
67681: NOT
67682: PUSH
67683: LD_VAR 0 1
67687: PPUSH
67688: LD_VAR 0 2
67692: PPUSH
67693: CALL_OW 308
67697: NOT
67698: AND
67699: IFFALSE 67703
// exit ;
67701: GO 67821
// if IsInArea ( unit , area ) then
67703: LD_VAR 0 1
67707: PPUSH
67708: LD_VAR 0 2
67712: PPUSH
67713: CALL_OW 308
67717: IFFALSE 67735
// begin ComMoveToArea ( unit , goAway ) ;
67719: LD_VAR 0 1
67723: PPUSH
67724: LD_VAR 0 3
67728: PPUSH
67729: CALL_OW 113
// exit ;
67733: GO 67821
// end ; if task [ 1 ] [ 1 ] <> M then
67735: LD_VAR 0 7
67739: PUSH
67740: LD_INT 1
67742: ARRAY
67743: PUSH
67744: LD_INT 1
67746: ARRAY
67747: PUSH
67748: LD_STRING M
67750: NONEQUAL
67751: IFFALSE 67755
// exit ;
67753: GO 67821
// x := task [ 1 ] [ 2 ] ;
67755: LD_ADDR_VAR 0 5
67759: PUSH
67760: LD_VAR 0 7
67764: PUSH
67765: LD_INT 1
67767: ARRAY
67768: PUSH
67769: LD_INT 2
67771: ARRAY
67772: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67773: LD_ADDR_VAR 0 6
67777: PUSH
67778: LD_VAR 0 7
67782: PUSH
67783: LD_INT 1
67785: ARRAY
67786: PUSH
67787: LD_INT 3
67789: ARRAY
67790: ST_TO_ADDR
// if InArea ( x , y , area ) then
67791: LD_VAR 0 5
67795: PPUSH
67796: LD_VAR 0 6
67800: PPUSH
67801: LD_VAR 0 2
67805: PPUSH
67806: CALL_OW 309
67810: IFFALSE 67821
// ComStop ( unit ) ;
67812: LD_VAR 0 1
67816: PPUSH
67817: CALL_OW 141
// end ;
67821: LD_VAR 0 4
67825: RET
// export function Abs ( value ) ; begin
67826: LD_INT 0
67828: PPUSH
// result := value ;
67829: LD_ADDR_VAR 0 2
67833: PUSH
67834: LD_VAR 0 1
67838: ST_TO_ADDR
// if value < 0 then
67839: LD_VAR 0 1
67843: PUSH
67844: LD_INT 0
67846: LESS
67847: IFFALSE 67864
// result := value * - 1 ;
67849: LD_ADDR_VAR 0 2
67853: PUSH
67854: LD_VAR 0 1
67858: PUSH
67859: LD_INT 1
67861: NEG
67862: MUL
67863: ST_TO_ADDR
// end ;
67864: LD_VAR 0 2
67868: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67869: LD_INT 0
67871: PPUSH
67872: PPUSH
67873: PPUSH
67874: PPUSH
67875: PPUSH
67876: PPUSH
67877: PPUSH
67878: PPUSH
// if not unit or not building then
67879: LD_VAR 0 1
67883: NOT
67884: PUSH
67885: LD_VAR 0 2
67889: NOT
67890: OR
67891: IFFALSE 67895
// exit ;
67893: GO 68121
// x := GetX ( building ) ;
67895: LD_ADDR_VAR 0 4
67899: PUSH
67900: LD_VAR 0 2
67904: PPUSH
67905: CALL_OW 250
67909: ST_TO_ADDR
// y := GetY ( building ) ;
67910: LD_ADDR_VAR 0 6
67914: PUSH
67915: LD_VAR 0 2
67919: PPUSH
67920: CALL_OW 251
67924: ST_TO_ADDR
// d := GetDir ( building ) ;
67925: LD_ADDR_VAR 0 8
67929: PUSH
67930: LD_VAR 0 2
67934: PPUSH
67935: CALL_OW 254
67939: ST_TO_ADDR
// r := 4 ;
67940: LD_ADDR_VAR 0 9
67944: PUSH
67945: LD_INT 4
67947: ST_TO_ADDR
// for i := 1 to 5 do
67948: LD_ADDR_VAR 0 10
67952: PUSH
67953: DOUBLE
67954: LD_INT 1
67956: DEC
67957: ST_TO_ADDR
67958: LD_INT 5
67960: PUSH
67961: FOR_TO
67962: IFFALSE 68119
// begin _x := ShiftX ( x , d , r + i ) ;
67964: LD_ADDR_VAR 0 5
67968: PUSH
67969: LD_VAR 0 4
67973: PPUSH
67974: LD_VAR 0 8
67978: PPUSH
67979: LD_VAR 0 9
67983: PUSH
67984: LD_VAR 0 10
67988: PLUS
67989: PPUSH
67990: CALL_OW 272
67994: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67995: LD_ADDR_VAR 0 7
67999: PUSH
68000: LD_VAR 0 6
68004: PPUSH
68005: LD_VAR 0 8
68009: PPUSH
68010: LD_VAR 0 9
68014: PUSH
68015: LD_VAR 0 10
68019: PLUS
68020: PPUSH
68021: CALL_OW 273
68025: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68026: LD_VAR 0 5
68030: PPUSH
68031: LD_VAR 0 7
68035: PPUSH
68036: CALL_OW 488
68040: PUSH
68041: LD_VAR 0 5
68045: PPUSH
68046: LD_VAR 0 7
68050: PPUSH
68051: CALL_OW 428
68055: PPUSH
68056: CALL_OW 247
68060: PUSH
68061: LD_INT 3
68063: PUSH
68064: LD_INT 2
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: IN
68071: NOT
68072: AND
68073: IFFALSE 68117
// begin ComMoveXY ( unit , _x , _y ) ;
68075: LD_VAR 0 1
68079: PPUSH
68080: LD_VAR 0 5
68084: PPUSH
68085: LD_VAR 0 7
68089: PPUSH
68090: CALL_OW 111
// result := [ _x , _y ] ;
68094: LD_ADDR_VAR 0 3
68098: PUSH
68099: LD_VAR 0 5
68103: PUSH
68104: LD_VAR 0 7
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: ST_TO_ADDR
// exit ;
68113: POP
68114: POP
68115: GO 68121
// end ; end ;
68117: GO 67961
68119: POP
68120: POP
// end ;
68121: LD_VAR 0 3
68125: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68126: LD_INT 0
68128: PPUSH
68129: PPUSH
68130: PPUSH
// result := 0 ;
68131: LD_ADDR_VAR 0 3
68135: PUSH
68136: LD_INT 0
68138: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68139: LD_VAR 0 1
68143: PUSH
68144: LD_INT 0
68146: LESS
68147: PUSH
68148: LD_VAR 0 1
68152: PUSH
68153: LD_INT 8
68155: GREATER
68156: OR
68157: PUSH
68158: LD_VAR 0 2
68162: PUSH
68163: LD_INT 0
68165: LESS
68166: OR
68167: PUSH
68168: LD_VAR 0 2
68172: PUSH
68173: LD_INT 8
68175: GREATER
68176: OR
68177: IFFALSE 68181
// exit ;
68179: GO 68256
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68181: LD_ADDR_VAR 0 4
68185: PUSH
68186: LD_INT 22
68188: PUSH
68189: LD_VAR 0 2
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PPUSH
68198: CALL_OW 69
68202: PUSH
68203: FOR_IN
68204: IFFALSE 68254
// begin un := UnitShoot ( i ) ;
68206: LD_ADDR_VAR 0 5
68210: PUSH
68211: LD_VAR 0 4
68215: PPUSH
68216: CALL_OW 504
68220: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68221: LD_VAR 0 5
68225: PPUSH
68226: CALL_OW 255
68230: PUSH
68231: LD_VAR 0 1
68235: EQUAL
68236: IFFALSE 68252
// begin result := un ;
68238: LD_ADDR_VAR 0 3
68242: PUSH
68243: LD_VAR 0 5
68247: ST_TO_ADDR
// exit ;
68248: POP
68249: POP
68250: GO 68256
// end ; end ;
68252: GO 68203
68254: POP
68255: POP
// end ;
68256: LD_VAR 0 3
68260: RET
// export function GetCargoBay ( units ) ; begin
68261: LD_INT 0
68263: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68264: LD_ADDR_VAR 0 2
68268: PUSH
68269: LD_VAR 0 1
68273: PPUSH
68274: LD_INT 2
68276: PUSH
68277: LD_INT 34
68279: PUSH
68280: LD_INT 12
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 34
68289: PUSH
68290: LD_INT 51
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 34
68299: PUSH
68300: LD_INT 32
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 34
68309: PUSH
68310: LD_EXP 26
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: PPUSH
68326: CALL_OW 72
68330: ST_TO_ADDR
// end ;
68331: LD_VAR 0 2
68335: RET
// export function Negate ( value ) ; begin
68336: LD_INT 0
68338: PPUSH
// result := not value ;
68339: LD_ADDR_VAR 0 2
68343: PUSH
68344: LD_VAR 0 1
68348: NOT
68349: ST_TO_ADDR
// end ;
68350: LD_VAR 0 2
68354: RET
// export function Inc ( value ) ; begin
68355: LD_INT 0
68357: PPUSH
// result := value + 1 ;
68358: LD_ADDR_VAR 0 2
68362: PUSH
68363: LD_VAR 0 1
68367: PUSH
68368: LD_INT 1
68370: PLUS
68371: ST_TO_ADDR
// end ;
68372: LD_VAR 0 2
68376: RET
// export function Dec ( value ) ; begin
68377: LD_INT 0
68379: PPUSH
// result := value - 1 ;
68380: LD_ADDR_VAR 0 2
68384: PUSH
68385: LD_VAR 0 1
68389: PUSH
68390: LD_INT 1
68392: MINUS
68393: ST_TO_ADDR
// end ;
68394: LD_VAR 0 2
68398: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68399: LD_INT 0
68401: PPUSH
68402: PPUSH
68403: PPUSH
68404: PPUSH
68405: PPUSH
68406: PPUSH
68407: PPUSH
68408: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68409: LD_VAR 0 1
68413: PPUSH
68414: LD_VAR 0 2
68418: PPUSH
68419: CALL_OW 488
68423: NOT
68424: PUSH
68425: LD_VAR 0 3
68429: PPUSH
68430: LD_VAR 0 4
68434: PPUSH
68435: CALL_OW 488
68439: NOT
68440: OR
68441: IFFALSE 68454
// begin result := - 1 ;
68443: LD_ADDR_VAR 0 5
68447: PUSH
68448: LD_INT 1
68450: NEG
68451: ST_TO_ADDR
// exit ;
68452: GO 68689
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68454: LD_ADDR_VAR 0 12
68458: PUSH
68459: LD_VAR 0 1
68463: PPUSH
68464: LD_VAR 0 2
68468: PPUSH
68469: LD_VAR 0 3
68473: PPUSH
68474: LD_VAR 0 4
68478: PPUSH
68479: CALL 67537 0 4
68483: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68484: LD_ADDR_VAR 0 11
68488: PUSH
68489: LD_VAR 0 1
68493: PPUSH
68494: LD_VAR 0 2
68498: PPUSH
68499: LD_VAR 0 12
68503: PUSH
68504: LD_INT 1
68506: ARRAY
68507: PPUSH
68508: LD_VAR 0 12
68512: PUSH
68513: LD_INT 2
68515: ARRAY
68516: PPUSH
68517: CALL_OW 298
68521: ST_TO_ADDR
// distance := 9999 ;
68522: LD_ADDR_VAR 0 10
68526: PUSH
68527: LD_INT 9999
68529: ST_TO_ADDR
// for i := 0 to 5 do
68530: LD_ADDR_VAR 0 6
68534: PUSH
68535: DOUBLE
68536: LD_INT 0
68538: DEC
68539: ST_TO_ADDR
68540: LD_INT 5
68542: PUSH
68543: FOR_TO
68544: IFFALSE 68687
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68546: LD_ADDR_VAR 0 7
68550: PUSH
68551: LD_VAR 0 1
68555: PPUSH
68556: LD_VAR 0 6
68560: PPUSH
68561: LD_VAR 0 11
68565: PPUSH
68566: CALL_OW 272
68570: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68571: LD_ADDR_VAR 0 8
68575: PUSH
68576: LD_VAR 0 2
68580: PPUSH
68581: LD_VAR 0 6
68585: PPUSH
68586: LD_VAR 0 11
68590: PPUSH
68591: CALL_OW 273
68595: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68596: LD_VAR 0 7
68600: PPUSH
68601: LD_VAR 0 8
68605: PPUSH
68606: CALL_OW 488
68610: NOT
68611: IFFALSE 68615
// continue ;
68613: GO 68543
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68615: LD_ADDR_VAR 0 9
68619: PUSH
68620: LD_VAR 0 12
68624: PUSH
68625: LD_INT 1
68627: ARRAY
68628: PPUSH
68629: LD_VAR 0 12
68633: PUSH
68634: LD_INT 2
68636: ARRAY
68637: PPUSH
68638: LD_VAR 0 7
68642: PPUSH
68643: LD_VAR 0 8
68647: PPUSH
68648: CALL_OW 298
68652: ST_TO_ADDR
// if tmp < distance then
68653: LD_VAR 0 9
68657: PUSH
68658: LD_VAR 0 10
68662: LESS
68663: IFFALSE 68685
// begin result := i ;
68665: LD_ADDR_VAR 0 5
68669: PUSH
68670: LD_VAR 0 6
68674: ST_TO_ADDR
// distance := tmp ;
68675: LD_ADDR_VAR 0 10
68679: PUSH
68680: LD_VAR 0 9
68684: ST_TO_ADDR
// end ; end ;
68685: GO 68543
68687: POP
68688: POP
// end ;
68689: LD_VAR 0 5
68693: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68694: LD_INT 0
68696: PPUSH
68697: PPUSH
// if not driver or not IsInUnit ( driver ) then
68698: LD_VAR 0 1
68702: NOT
68703: PUSH
68704: LD_VAR 0 1
68708: PPUSH
68709: CALL_OW 310
68713: NOT
68714: OR
68715: IFFALSE 68719
// exit ;
68717: GO 68809
// vehicle := IsInUnit ( driver ) ;
68719: LD_ADDR_VAR 0 3
68723: PUSH
68724: LD_VAR 0 1
68728: PPUSH
68729: CALL_OW 310
68733: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68734: LD_VAR 0 1
68738: PPUSH
68739: LD_STRING \
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: LD_INT 0
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: PUSH
68769: LD_STRING E
68771: PUSH
68772: LD_INT 0
68774: PUSH
68775: LD_INT 0
68777: PUSH
68778: LD_VAR 0 3
68782: PUSH
68783: LD_INT 0
68785: PUSH
68786: LD_INT 0
68788: PUSH
68789: LD_INT 0
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PPUSH
68805: CALL_OW 446
// end ;
68809: LD_VAR 0 2
68813: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68814: LD_INT 0
68816: PPUSH
68817: PPUSH
// if not driver or not IsInUnit ( driver ) then
68818: LD_VAR 0 1
68822: NOT
68823: PUSH
68824: LD_VAR 0 1
68828: PPUSH
68829: CALL_OW 310
68833: NOT
68834: OR
68835: IFFALSE 68839
// exit ;
68837: GO 68929
// vehicle := IsInUnit ( driver ) ;
68839: LD_ADDR_VAR 0 3
68843: PUSH
68844: LD_VAR 0 1
68848: PPUSH
68849: CALL_OW 310
68853: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68854: LD_VAR 0 1
68858: PPUSH
68859: LD_STRING \
68861: PUSH
68862: LD_INT 0
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: LD_INT 0
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: LD_INT 0
68876: PUSH
68877: LD_INT 0
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: PUSH
68889: LD_STRING E
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: LD_INT 0
68897: PUSH
68898: LD_VAR 0 3
68902: PUSH
68903: LD_INT 0
68905: PUSH
68906: LD_INT 0
68908: PUSH
68909: LD_INT 0
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PPUSH
68925: CALL_OW 447
// end ;
68929: LD_VAR 0 2
68933: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68934: LD_INT 0
68936: PPUSH
68937: PPUSH
68938: PPUSH
// tmp := [ ] ;
68939: LD_ADDR_VAR 0 5
68943: PUSH
68944: EMPTY
68945: ST_TO_ADDR
// for i in units do
68946: LD_ADDR_VAR 0 4
68950: PUSH
68951: LD_VAR 0 1
68955: PUSH
68956: FOR_IN
68957: IFFALSE 68995
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68959: LD_ADDR_VAR 0 5
68963: PUSH
68964: LD_VAR 0 5
68968: PPUSH
68969: LD_VAR 0 5
68973: PUSH
68974: LD_INT 1
68976: PLUS
68977: PPUSH
68978: LD_VAR 0 4
68982: PPUSH
68983: CALL_OW 256
68987: PPUSH
68988: CALL_OW 2
68992: ST_TO_ADDR
68993: GO 68956
68995: POP
68996: POP
// if not tmp then
68997: LD_VAR 0 5
69001: NOT
69002: IFFALSE 69006
// exit ;
69004: GO 69054
// if asc then
69006: LD_VAR 0 2
69010: IFFALSE 69034
// result := SortListByListAsc ( units , tmp ) else
69012: LD_ADDR_VAR 0 3
69016: PUSH
69017: LD_VAR 0 1
69021: PPUSH
69022: LD_VAR 0 5
69026: PPUSH
69027: CALL_OW 76
69031: ST_TO_ADDR
69032: GO 69054
// result := SortListByListDesc ( units , tmp ) ;
69034: LD_ADDR_VAR 0 3
69038: PUSH
69039: LD_VAR 0 1
69043: PPUSH
69044: LD_VAR 0 5
69048: PPUSH
69049: CALL_OW 77
69053: ST_TO_ADDR
// end ;
69054: LD_VAR 0 3
69058: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69059: LD_INT 0
69061: PPUSH
69062: PPUSH
// task := GetTaskList ( mech ) ;
69063: LD_ADDR_VAR 0 4
69067: PUSH
69068: LD_VAR 0 1
69072: PPUSH
69073: CALL_OW 437
69077: ST_TO_ADDR
// if not task then
69078: LD_VAR 0 4
69082: NOT
69083: IFFALSE 69087
// exit ;
69085: GO 69129
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69087: LD_ADDR_VAR 0 3
69091: PUSH
69092: LD_VAR 0 4
69096: PUSH
69097: LD_INT 1
69099: ARRAY
69100: PUSH
69101: LD_INT 1
69103: ARRAY
69104: PUSH
69105: LD_STRING r
69107: EQUAL
69108: PUSH
69109: LD_VAR 0 4
69113: PUSH
69114: LD_INT 1
69116: ARRAY
69117: PUSH
69118: LD_INT 4
69120: ARRAY
69121: PUSH
69122: LD_VAR 0 2
69126: EQUAL
69127: AND
69128: ST_TO_ADDR
// end ;
69129: LD_VAR 0 3
69133: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69134: LD_INT 0
69136: PPUSH
// SetDir ( unit , d ) ;
69137: LD_VAR 0 1
69141: PPUSH
69142: LD_VAR 0 4
69146: PPUSH
69147: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69151: LD_VAR 0 1
69155: PPUSH
69156: LD_VAR 0 2
69160: PPUSH
69161: LD_VAR 0 3
69165: PPUSH
69166: LD_VAR 0 5
69170: PPUSH
69171: CALL_OW 48
// end ;
69175: LD_VAR 0 6
69179: RET
// export function ToNaturalNumber ( number ) ; begin
69180: LD_INT 0
69182: PPUSH
// result := number div 1 ;
69183: LD_ADDR_VAR 0 2
69187: PUSH
69188: LD_VAR 0 1
69192: PUSH
69193: LD_INT 1
69195: DIV
69196: ST_TO_ADDR
// if number < 0 then
69197: LD_VAR 0 1
69201: PUSH
69202: LD_INT 0
69204: LESS
69205: IFFALSE 69215
// result := 0 ;
69207: LD_ADDR_VAR 0 2
69211: PUSH
69212: LD_INT 0
69214: ST_TO_ADDR
// end ;
69215: LD_VAR 0 2
69219: RET
// export function SortByClass ( units , class ) ; var un ; begin
69220: LD_INT 0
69222: PPUSH
69223: PPUSH
// if not units or not class then
69224: LD_VAR 0 1
69228: NOT
69229: PUSH
69230: LD_VAR 0 2
69234: NOT
69235: OR
69236: IFFALSE 69240
// exit ;
69238: GO 69335
// result := [ ] ;
69240: LD_ADDR_VAR 0 3
69244: PUSH
69245: EMPTY
69246: ST_TO_ADDR
// for un in units do
69247: LD_ADDR_VAR 0 4
69251: PUSH
69252: LD_VAR 0 1
69256: PUSH
69257: FOR_IN
69258: IFFALSE 69333
// if GetClass ( un ) = class then
69260: LD_VAR 0 4
69264: PPUSH
69265: CALL_OW 257
69269: PUSH
69270: LD_VAR 0 2
69274: EQUAL
69275: IFFALSE 69302
// result := Insert ( result , 1 , un ) else
69277: LD_ADDR_VAR 0 3
69281: PUSH
69282: LD_VAR 0 3
69286: PPUSH
69287: LD_INT 1
69289: PPUSH
69290: LD_VAR 0 4
69294: PPUSH
69295: CALL_OW 2
69299: ST_TO_ADDR
69300: GO 69331
// result := Replace ( result , result + 1 , un ) ;
69302: LD_ADDR_VAR 0 3
69306: PUSH
69307: LD_VAR 0 3
69311: PPUSH
69312: LD_VAR 0 3
69316: PUSH
69317: LD_INT 1
69319: PLUS
69320: PPUSH
69321: LD_VAR 0 4
69325: PPUSH
69326: CALL_OW 1
69330: ST_TO_ADDR
69331: GO 69257
69333: POP
69334: POP
// end ;
69335: LD_VAR 0 3
69339: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69340: LD_INT 0
69342: PPUSH
69343: PPUSH
69344: PPUSH
69345: PPUSH
69346: PPUSH
69347: PPUSH
69348: PPUSH
// result := [ ] ;
69349: LD_ADDR_VAR 0 4
69353: PUSH
69354: EMPTY
69355: ST_TO_ADDR
// if x - r < 0 then
69356: LD_VAR 0 1
69360: PUSH
69361: LD_VAR 0 3
69365: MINUS
69366: PUSH
69367: LD_INT 0
69369: LESS
69370: IFFALSE 69382
// min_x := 0 else
69372: LD_ADDR_VAR 0 8
69376: PUSH
69377: LD_INT 0
69379: ST_TO_ADDR
69380: GO 69398
// min_x := x - r ;
69382: LD_ADDR_VAR 0 8
69386: PUSH
69387: LD_VAR 0 1
69391: PUSH
69392: LD_VAR 0 3
69396: MINUS
69397: ST_TO_ADDR
// if y - r < 0 then
69398: LD_VAR 0 2
69402: PUSH
69403: LD_VAR 0 3
69407: MINUS
69408: PUSH
69409: LD_INT 0
69411: LESS
69412: IFFALSE 69424
// min_y := 0 else
69414: LD_ADDR_VAR 0 7
69418: PUSH
69419: LD_INT 0
69421: ST_TO_ADDR
69422: GO 69440
// min_y := y - r ;
69424: LD_ADDR_VAR 0 7
69428: PUSH
69429: LD_VAR 0 2
69433: PUSH
69434: LD_VAR 0 3
69438: MINUS
69439: ST_TO_ADDR
// max_x := x + r ;
69440: LD_ADDR_VAR 0 9
69444: PUSH
69445: LD_VAR 0 1
69449: PUSH
69450: LD_VAR 0 3
69454: PLUS
69455: ST_TO_ADDR
// max_y := y + r ;
69456: LD_ADDR_VAR 0 10
69460: PUSH
69461: LD_VAR 0 2
69465: PUSH
69466: LD_VAR 0 3
69470: PLUS
69471: ST_TO_ADDR
// for _x = min_x to max_x do
69472: LD_ADDR_VAR 0 5
69476: PUSH
69477: DOUBLE
69478: LD_VAR 0 8
69482: DEC
69483: ST_TO_ADDR
69484: LD_VAR 0 9
69488: PUSH
69489: FOR_TO
69490: IFFALSE 69591
// for _y = min_y to max_y do
69492: LD_ADDR_VAR 0 6
69496: PUSH
69497: DOUBLE
69498: LD_VAR 0 7
69502: DEC
69503: ST_TO_ADDR
69504: LD_VAR 0 10
69508: PUSH
69509: FOR_TO
69510: IFFALSE 69587
// begin if not ValidHex ( _x , _y ) then
69512: LD_VAR 0 5
69516: PPUSH
69517: LD_VAR 0 6
69521: PPUSH
69522: CALL_OW 488
69526: NOT
69527: IFFALSE 69531
// continue ;
69529: GO 69509
// if GetResourceTypeXY ( _x , _y ) then
69531: LD_VAR 0 5
69535: PPUSH
69536: LD_VAR 0 6
69540: PPUSH
69541: CALL_OW 283
69545: IFFALSE 69585
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69547: LD_ADDR_VAR 0 4
69551: PUSH
69552: LD_VAR 0 4
69556: PPUSH
69557: LD_VAR 0 4
69561: PUSH
69562: LD_INT 1
69564: PLUS
69565: PPUSH
69566: LD_VAR 0 5
69570: PUSH
69571: LD_VAR 0 6
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PPUSH
69580: CALL_OW 1
69584: ST_TO_ADDR
// end ;
69585: GO 69509
69587: POP
69588: POP
69589: GO 69489
69591: POP
69592: POP
// end ;
69593: LD_VAR 0 4
69597: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69598: LD_INT 0
69600: PPUSH
69601: PPUSH
69602: PPUSH
69603: PPUSH
69604: PPUSH
69605: PPUSH
69606: PPUSH
69607: PPUSH
// if not units then
69608: LD_VAR 0 1
69612: NOT
69613: IFFALSE 69617
// exit ;
69615: GO 70143
// result := UnitFilter ( units , [ f_ok ] ) ;
69617: LD_ADDR_VAR 0 3
69621: PUSH
69622: LD_VAR 0 1
69626: PPUSH
69627: LD_INT 50
69629: PUSH
69630: EMPTY
69631: LIST
69632: PPUSH
69633: CALL_OW 72
69637: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69638: LD_ADDR_VAR 0 8
69642: PUSH
69643: LD_VAR 0 1
69647: PUSH
69648: LD_INT 1
69650: ARRAY
69651: PPUSH
69652: CALL_OW 255
69656: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69657: LD_ADDR_VAR 0 10
69661: PUSH
69662: LD_INT 29
69664: PUSH
69665: LD_EXP 29
69669: PUSH
69670: LD_INT 49
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: LIST
69677: ST_TO_ADDR
// if not result then
69678: LD_VAR 0 3
69682: NOT
69683: IFFALSE 69687
// exit ;
69685: GO 70143
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69687: LD_ADDR_VAR 0 5
69691: PUSH
69692: LD_INT 81
69694: PUSH
69695: LD_VAR 0 8
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PPUSH
69704: CALL_OW 69
69708: ST_TO_ADDR
// for i in result do
69709: LD_ADDR_VAR 0 4
69713: PUSH
69714: LD_VAR 0 3
69718: PUSH
69719: FOR_IN
69720: IFFALSE 70141
// begin tag := GetTag ( i ) + 1 ;
69722: LD_ADDR_VAR 0 9
69726: PUSH
69727: LD_VAR 0 4
69731: PPUSH
69732: CALL_OW 110
69736: PUSH
69737: LD_INT 1
69739: PLUS
69740: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69741: LD_ADDR_VAR 0 7
69745: PUSH
69746: LD_VAR 0 4
69750: PPUSH
69751: CALL_OW 250
69755: PPUSH
69756: LD_VAR 0 4
69760: PPUSH
69761: CALL_OW 251
69765: PPUSH
69766: LD_INT 6
69768: PPUSH
69769: CALL 69340 0 3
69773: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69774: LD_VAR 0 4
69778: PPUSH
69779: CALL_OW 247
69783: PUSH
69784: LD_INT 2
69786: EQUAL
69787: PUSH
69788: LD_VAR 0 7
69792: AND
69793: PUSH
69794: LD_VAR 0 4
69798: PPUSH
69799: CALL_OW 264
69803: PUSH
69804: LD_VAR 0 10
69808: IN
69809: NOT
69810: AND
69811: IFFALSE 69850
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69813: LD_VAR 0 4
69817: PPUSH
69818: LD_VAR 0 7
69822: PUSH
69823: LD_INT 1
69825: ARRAY
69826: PUSH
69827: LD_INT 1
69829: ARRAY
69830: PPUSH
69831: LD_VAR 0 7
69835: PUSH
69836: LD_INT 1
69838: ARRAY
69839: PUSH
69840: LD_INT 2
69842: ARRAY
69843: PPUSH
69844: CALL_OW 116
69848: GO 70139
// if path > tag then
69850: LD_VAR 0 2
69854: PUSH
69855: LD_VAR 0 9
69859: GREATER
69860: IFFALSE 70068
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69862: LD_ADDR_VAR 0 6
69866: PUSH
69867: LD_VAR 0 5
69871: PPUSH
69872: LD_INT 91
69874: PUSH
69875: LD_VAR 0 4
69879: PUSH
69880: LD_INT 8
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: LIST
69887: PPUSH
69888: CALL_OW 72
69892: ST_TO_ADDR
// if nearEnemy then
69893: LD_VAR 0 6
69897: IFFALSE 69966
// begin if GetWeapon ( i ) = ru_time_lapser then
69899: LD_VAR 0 4
69903: PPUSH
69904: CALL_OW 264
69908: PUSH
69909: LD_INT 49
69911: EQUAL
69912: IFFALSE 69940
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69914: LD_VAR 0 4
69918: PPUSH
69919: LD_VAR 0 6
69923: PPUSH
69924: LD_VAR 0 4
69928: PPUSH
69929: CALL_OW 74
69933: PPUSH
69934: CALL_OW 112
69938: GO 69964
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69940: LD_VAR 0 4
69944: PPUSH
69945: LD_VAR 0 6
69949: PPUSH
69950: LD_VAR 0 4
69954: PPUSH
69955: CALL_OW 74
69959: PPUSH
69960: CALL_OW 115
// end else
69964: GO 70066
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69966: LD_VAR 0 4
69970: PPUSH
69971: LD_VAR 0 2
69975: PUSH
69976: LD_VAR 0 9
69980: ARRAY
69981: PUSH
69982: LD_INT 1
69984: ARRAY
69985: PPUSH
69986: LD_VAR 0 2
69990: PUSH
69991: LD_VAR 0 9
69995: ARRAY
69996: PUSH
69997: LD_INT 2
69999: ARRAY
70000: PPUSH
70001: CALL_OW 297
70005: PUSH
70006: LD_INT 6
70008: GREATER
70009: IFFALSE 70052
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70011: LD_VAR 0 4
70015: PPUSH
70016: LD_VAR 0 2
70020: PUSH
70021: LD_VAR 0 9
70025: ARRAY
70026: PUSH
70027: LD_INT 1
70029: ARRAY
70030: PPUSH
70031: LD_VAR 0 2
70035: PUSH
70036: LD_VAR 0 9
70040: ARRAY
70041: PUSH
70042: LD_INT 2
70044: ARRAY
70045: PPUSH
70046: CALL_OW 114
70050: GO 70066
// SetTag ( i , tag ) ;
70052: LD_VAR 0 4
70056: PPUSH
70057: LD_VAR 0 9
70061: PPUSH
70062: CALL_OW 109
// end else
70066: GO 70139
// if enemy then
70068: LD_VAR 0 5
70072: IFFALSE 70139
// begin if GetWeapon ( i ) = ru_time_lapser then
70074: LD_VAR 0 4
70078: PPUSH
70079: CALL_OW 264
70083: PUSH
70084: LD_INT 49
70086: EQUAL
70087: IFFALSE 70115
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70089: LD_VAR 0 4
70093: PPUSH
70094: LD_VAR 0 5
70098: PPUSH
70099: LD_VAR 0 4
70103: PPUSH
70104: CALL_OW 74
70108: PPUSH
70109: CALL_OW 112
70113: GO 70139
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70115: LD_VAR 0 4
70119: PPUSH
70120: LD_VAR 0 5
70124: PPUSH
70125: LD_VAR 0 4
70129: PPUSH
70130: CALL_OW 74
70134: PPUSH
70135: CALL_OW 115
// end ; end ;
70139: GO 69719
70141: POP
70142: POP
// end ;
70143: LD_VAR 0 3
70147: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70148: LD_INT 0
70150: PPUSH
70151: PPUSH
70152: PPUSH
// if not unit or IsInUnit ( unit ) then
70153: LD_VAR 0 1
70157: NOT
70158: PUSH
70159: LD_VAR 0 1
70163: PPUSH
70164: CALL_OW 310
70168: OR
70169: IFFALSE 70173
// exit ;
70171: GO 70264
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70173: LD_ADDR_VAR 0 4
70177: PUSH
70178: LD_VAR 0 1
70182: PPUSH
70183: CALL_OW 250
70187: PPUSH
70188: LD_VAR 0 2
70192: PPUSH
70193: LD_INT 1
70195: PPUSH
70196: CALL_OW 272
70200: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70201: LD_ADDR_VAR 0 5
70205: PUSH
70206: LD_VAR 0 1
70210: PPUSH
70211: CALL_OW 251
70215: PPUSH
70216: LD_VAR 0 2
70220: PPUSH
70221: LD_INT 1
70223: PPUSH
70224: CALL_OW 273
70228: ST_TO_ADDR
// if ValidHex ( x , y ) then
70229: LD_VAR 0 4
70233: PPUSH
70234: LD_VAR 0 5
70238: PPUSH
70239: CALL_OW 488
70243: IFFALSE 70264
// ComTurnXY ( unit , x , y ) ;
70245: LD_VAR 0 1
70249: PPUSH
70250: LD_VAR 0 4
70254: PPUSH
70255: LD_VAR 0 5
70259: PPUSH
70260: CALL_OW 118
// end ;
70264: LD_VAR 0 3
70268: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70269: LD_INT 0
70271: PPUSH
70272: PPUSH
// result := false ;
70273: LD_ADDR_VAR 0 3
70277: PUSH
70278: LD_INT 0
70280: ST_TO_ADDR
// if not units then
70281: LD_VAR 0 2
70285: NOT
70286: IFFALSE 70290
// exit ;
70288: GO 70335
// for i in units do
70290: LD_ADDR_VAR 0 4
70294: PUSH
70295: LD_VAR 0 2
70299: PUSH
70300: FOR_IN
70301: IFFALSE 70333
// if See ( side , i ) then
70303: LD_VAR 0 1
70307: PPUSH
70308: LD_VAR 0 4
70312: PPUSH
70313: CALL_OW 292
70317: IFFALSE 70331
// begin result := true ;
70319: LD_ADDR_VAR 0 3
70323: PUSH
70324: LD_INT 1
70326: ST_TO_ADDR
// exit ;
70327: POP
70328: POP
70329: GO 70335
// end ;
70331: GO 70300
70333: POP
70334: POP
// end ;
70335: LD_VAR 0 3
70339: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70340: LD_INT 0
70342: PPUSH
70343: PPUSH
70344: PPUSH
70345: PPUSH
// if not unit or not points then
70346: LD_VAR 0 1
70350: NOT
70351: PUSH
70352: LD_VAR 0 2
70356: NOT
70357: OR
70358: IFFALSE 70362
// exit ;
70360: GO 70452
// dist := 99999 ;
70362: LD_ADDR_VAR 0 5
70366: PUSH
70367: LD_INT 99999
70369: ST_TO_ADDR
// for i in points do
70370: LD_ADDR_VAR 0 4
70374: PUSH
70375: LD_VAR 0 2
70379: PUSH
70380: FOR_IN
70381: IFFALSE 70450
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70383: LD_ADDR_VAR 0 6
70387: PUSH
70388: LD_VAR 0 1
70392: PPUSH
70393: LD_VAR 0 4
70397: PUSH
70398: LD_INT 1
70400: ARRAY
70401: PPUSH
70402: LD_VAR 0 4
70406: PUSH
70407: LD_INT 2
70409: ARRAY
70410: PPUSH
70411: CALL_OW 297
70415: ST_TO_ADDR
// if tmpDist < dist then
70416: LD_VAR 0 6
70420: PUSH
70421: LD_VAR 0 5
70425: LESS
70426: IFFALSE 70448
// begin result := i ;
70428: LD_ADDR_VAR 0 3
70432: PUSH
70433: LD_VAR 0 4
70437: ST_TO_ADDR
// dist := tmpDist ;
70438: LD_ADDR_VAR 0 5
70442: PUSH
70443: LD_VAR 0 6
70447: ST_TO_ADDR
// end ; end ;
70448: GO 70380
70450: POP
70451: POP
// end ;
70452: LD_VAR 0 3
70456: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70457: LD_INT 0
70459: PPUSH
// uc_side := side ;
70460: LD_ADDR_OWVAR 20
70464: PUSH
70465: LD_VAR 0 1
70469: ST_TO_ADDR
// uc_nation := 3 ;
70470: LD_ADDR_OWVAR 21
70474: PUSH
70475: LD_INT 3
70477: ST_TO_ADDR
// vc_chassis := 25 ;
70478: LD_ADDR_OWVAR 37
70482: PUSH
70483: LD_INT 25
70485: ST_TO_ADDR
// vc_engine := engine_siberite ;
70486: LD_ADDR_OWVAR 39
70490: PUSH
70491: LD_INT 3
70493: ST_TO_ADDR
// vc_control := control_computer ;
70494: LD_ADDR_OWVAR 38
70498: PUSH
70499: LD_INT 3
70501: ST_TO_ADDR
// vc_weapon := 59 ;
70502: LD_ADDR_OWVAR 40
70506: PUSH
70507: LD_INT 59
70509: ST_TO_ADDR
// result := CreateVehicle ;
70510: LD_ADDR_VAR 0 5
70514: PUSH
70515: CALL_OW 45
70519: ST_TO_ADDR
// SetDir ( result , d ) ;
70520: LD_VAR 0 5
70524: PPUSH
70525: LD_VAR 0 4
70529: PPUSH
70530: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70534: LD_VAR 0 5
70538: PPUSH
70539: LD_VAR 0 2
70543: PPUSH
70544: LD_VAR 0 3
70548: PPUSH
70549: LD_INT 0
70551: PPUSH
70552: CALL_OW 48
// end ;
70556: LD_VAR 0 5
70560: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70561: LD_INT 0
70563: PPUSH
70564: PPUSH
70565: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70566: LD_ADDR_VAR 0 2
70570: PUSH
70571: LD_INT 0
70573: PUSH
70574: LD_INT 0
70576: PUSH
70577: LD_INT 0
70579: PUSH
70580: LD_INT 0
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70589: LD_VAR 0 1
70593: NOT
70594: PUSH
70595: LD_VAR 0 1
70599: PPUSH
70600: CALL_OW 264
70604: PUSH
70605: LD_INT 12
70607: PUSH
70608: LD_INT 51
70610: PUSH
70611: LD_INT 32
70613: PUSH
70614: LD_EXP 26
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: IN
70625: NOT
70626: OR
70627: IFFALSE 70631
// exit ;
70629: GO 70729
// for i := 1 to 3 do
70631: LD_ADDR_VAR 0 3
70635: PUSH
70636: DOUBLE
70637: LD_INT 1
70639: DEC
70640: ST_TO_ADDR
70641: LD_INT 3
70643: PUSH
70644: FOR_TO
70645: IFFALSE 70727
// begin tmp := GetCargo ( cargo , i ) ;
70647: LD_ADDR_VAR 0 4
70651: PUSH
70652: LD_VAR 0 1
70656: PPUSH
70657: LD_VAR 0 3
70661: PPUSH
70662: CALL_OW 289
70666: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70667: LD_ADDR_VAR 0 2
70671: PUSH
70672: LD_VAR 0 2
70676: PPUSH
70677: LD_VAR 0 3
70681: PPUSH
70682: LD_VAR 0 4
70686: PPUSH
70687: CALL_OW 1
70691: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70692: LD_ADDR_VAR 0 2
70696: PUSH
70697: LD_VAR 0 2
70701: PPUSH
70702: LD_INT 4
70704: PPUSH
70705: LD_VAR 0 2
70709: PUSH
70710: LD_INT 4
70712: ARRAY
70713: PUSH
70714: LD_VAR 0 4
70718: PLUS
70719: PPUSH
70720: CALL_OW 1
70724: ST_TO_ADDR
// end ;
70725: GO 70644
70727: POP
70728: POP
// end ;
70729: LD_VAR 0 2
70733: RET
// export function Length ( array ) ; begin
70734: LD_INT 0
70736: PPUSH
// result := array + 0 ;
70737: LD_ADDR_VAR 0 2
70741: PUSH
70742: LD_VAR 0 1
70746: PUSH
70747: LD_INT 0
70749: PLUS
70750: ST_TO_ADDR
// end ;
70751: LD_VAR 0 2
70755: RET
// export function PrepareArray ( array ) ; begin
70756: LD_INT 0
70758: PPUSH
// result := array diff 0 ;
70759: LD_ADDR_VAR 0 2
70763: PUSH
70764: LD_VAR 0 1
70768: PUSH
70769: LD_INT 0
70771: DIFF
70772: ST_TO_ADDR
// if not result [ 1 ] then
70773: LD_VAR 0 2
70777: PUSH
70778: LD_INT 1
70780: ARRAY
70781: NOT
70782: IFFALSE 70802
// result := Delete ( result , 1 ) ;
70784: LD_ADDR_VAR 0 2
70788: PUSH
70789: LD_VAR 0 2
70793: PPUSH
70794: LD_INT 1
70796: PPUSH
70797: CALL_OW 3
70801: ST_TO_ADDR
// end ; end_of_file
70802: LD_VAR 0 2
70806: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70807: LD_VAR 0 1
70811: PUSH
70812: LD_INT 200
70814: DOUBLE
70815: GREATEREQUAL
70816: IFFALSE 70824
70818: LD_INT 299
70820: DOUBLE
70821: LESSEQUAL
70822: IFTRUE 70826
70824: GO 70858
70826: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70827: LD_VAR 0 1
70831: PPUSH
70832: LD_VAR 0 2
70836: PPUSH
70837: LD_VAR 0 3
70841: PPUSH
70842: LD_VAR 0 4
70846: PPUSH
70847: LD_VAR 0 5
70851: PPUSH
70852: CALL 25658 0 5
70856: GO 70935
70858: LD_INT 300
70860: DOUBLE
70861: GREATEREQUAL
70862: IFFALSE 70870
70864: LD_INT 399
70866: DOUBLE
70867: LESSEQUAL
70868: IFTRUE 70872
70870: GO 70934
70872: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70873: LD_VAR 0 1
70877: PPUSH
70878: LD_VAR 0 2
70882: PPUSH
70883: LD_VAR 0 3
70887: PPUSH
70888: LD_VAR 0 4
70892: PPUSH
70893: LD_VAR 0 5
70897: PPUSH
70898: LD_VAR 0 6
70902: PPUSH
70903: LD_VAR 0 7
70907: PPUSH
70908: LD_VAR 0 8
70912: PPUSH
70913: LD_VAR 0 9
70917: PPUSH
70918: LD_VAR 0 10
70922: PPUSH
70923: LD_VAR 0 11
70927: PPUSH
70928: CALL 21987 0 11
70932: GO 70935
70934: POP
// end ;
70935: PPOPN 11
70937: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70938: LD_VAR 0 1
70942: PPUSH
70943: LD_VAR 0 2
70947: PPUSH
70948: LD_VAR 0 3
70952: PPUSH
70953: LD_VAR 0 4
70957: PPUSH
70958: LD_VAR 0 5
70962: PPUSH
70963: CALL 25394 0 5
// end ; end_of_file
70967: PPOPN 5
70969: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70970: LD_VAR 0 1
70974: PPUSH
70975: LD_VAR 0 2
70979: PPUSH
70980: LD_VAR 0 3
70984: PPUSH
70985: LD_VAR 0 4
70989: PPUSH
70990: LD_VAR 0 5
70994: PPUSH
70995: LD_VAR 0 6
70999: PPUSH
71000: CALL 9680 0 6
// end ;
71004: PPOPN 6
71006: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71007: LD_INT 0
71009: PPUSH
// begin if not units then
71010: LD_VAR 0 1
71014: NOT
71015: IFFALSE 71019
// exit ;
71017: GO 71019
// end ;
71019: PPOPN 7
71021: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71022: CALL 9651 0 0
// end ;
71026: PPOPN 1
71028: END
