// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8617 0 0
// PrepareAmerican ;
 100: CALL 5237 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2712: LD_VAR 0 1
2716: PPUSH
2717: CALL_OW 255
2721: PUSH
2722: LD_INT 3
2724: EQUAL
2725: PUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 263
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: AND
2740: IFFALSE 2750
// comp_tested := true ;
2742: LD_ADDR_EXP 22
2746: PUSH
2747: LD_INT 1
2749: ST_TO_ADDR
// end ;
2750: PPOPN 2
2752: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2753: LD_VAR 0 1
2757: PUSH
2758: LD_INT 22
2760: PUSH
2761: LD_INT 1
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: LD_INT 21
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PPUSH
2782: CALL_OW 69
2786: IN
2787: IFFALSE 2865
// if attacked = false and sikorski_ar = false then
2789: LD_EXP 15
2793: PUSH
2794: LD_INT 0
2796: EQUAL
2797: PUSH
2798: LD_EXP 12
2802: PUSH
2803: LD_INT 0
2805: EQUAL
2806: AND
2807: IFFALSE 2865
// begin attacked := true ;
2809: LD_ADDR_EXP 15
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// if IsInUnit ( donald ) then
2817: LD_EXP 13
2821: PPUSH
2822: CALL_OW 310
2826: IFFALSE 2842
// SayRadio ( donald , DGammaF ) else
2828: LD_EXP 13
2832: PPUSH
2833: LD_STRING DGammaF
2835: PPUSH
2836: CALL_OW 94
2840: GO 2865
// if IsInUnit ( van ) then
2842: LD_EXP 14
2846: PPUSH
2847: CALL_OW 310
2851: IFFALSE 2865
// SayRadio ( van , DGammaM ) ;
2853: LD_EXP 14
2857: PPUSH
2858: LD_STRING DGammaM
2860: PPUSH
2861: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2865: LD_VAR 0 1
2869: PUSH
2870: LD_INT 33
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: IN
2885: IFFALSE 2896
// ComUnlink ( un ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 136
// end ;
2896: PPOPN 1
2898: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2899: LD_VAR 0 2
2903: PPUSH
2904: CALL_OW 258
2908: PUSH
2909: LD_INT 1
2911: EQUAL
2912: IFFALSE 2926
// Say ( sci , Dsci3 ) ;
2914: LD_VAR 0 2
2918: PPUSH
2919: LD_STRING Dsci3
2921: PPUSH
2922: CALL_OW 88
// end ;
2926: PPOPN 2
2928: END
// on BuildingComplete ( b ) do var i ;
2929: LD_INT 0
2931: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2932: LD_VAR 0 1
2936: PPUSH
2937: CALL_OW 266
2941: PUSH
2942: LD_INT 0
2944: EQUAL
2945: PUSH
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 255
2955: PUSH
2956: LD_INT 3
2958: EQUAL
2959: AND
2960: PUSH
2961: LD_EXP 6
2965: PUSH
2966: LD_INT 0
2968: EQUAL
2969: AND
2970: IFFALSE 3034
// begin SetBName ( b , kalinin ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: LD_STRING kalinin
2979: PPUSH
2980: CALL_OW 500
// dep_x := GetX ( b ) ;
2984: LD_ADDR_EXP 7
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 250
2998: ST_TO_ADDR
// dep_y := GetY ( b ) ;
2999: LD_ADDR_EXP 8
3003: PUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 251
3013: ST_TO_ADDR
// depot_rdy := true ;
3014: LD_ADDR_EXP 6
3018: PUSH
3019: LD_INT 1
3021: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3022: LD_EXP 2
3026: PPUSH
3027: LD_STRING Dpop3
3029: PPUSH
3030: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3034: LD_VAR 0 1
3038: PPUSH
3039: CALL_OW 266
3043: PUSH
3044: LD_INT 6
3046: EQUAL
3047: PUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 255
3057: PUSH
3058: LD_INT 3
3060: EQUAL
3061: AND
3062: PUSH
3063: LD_EXP 21
3067: PUSH
3068: LD_INT 0
3070: EQUAL
3071: AND
3072: IFFALSE 3167
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3074: LD_INT 22
3076: PUSH
3077: LD_INT 3
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 25
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PPUSH
3098: CALL_OW 69
3102: PUSH
3103: LD_INT 0
3105: GREATER
3106: IFFALSE 3167
// begin event_comp := true ;
3108: LD_ADDR_EXP 21
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3116: LD_INT 22
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 25
3128: PUSH
3129: LD_INT 4
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 26
3138: PUSH
3139: LD_INT 1
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: PUSH
3156: LD_INT 1
3158: ARRAY
3159: PPUSH
3160: LD_STRING Dsci1
3162: PPUSH
3163: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3167: LD_VAR 0 1
3171: PPUSH
3172: CALL_OW 266
3176: PUSH
3177: LD_INT 32
3179: EQUAL
3180: PUSH
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 255
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: AND
3195: IFFALSE 3260
// begin RaiseSailEvent ( 6 ) ;
3197: LD_INT 6
3199: PPUSH
3200: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3204: LD_VAR 0 1
3208: PPUSH
3209: LD_EXP 18
3213: PUSH
3214: LD_INT 4
3216: ARRAY
3217: PPUSH
3218: CALL_OW 208
// for i = 1 to 4 do
3222: LD_ADDR_VAR 0 2
3226: PUSH
3227: DOUBLE
3228: LD_INT 1
3230: DEC
3231: ST_TO_ADDR
3232: LD_INT 4
3234: PUSH
3235: FOR_TO
3236: IFFALSE 3258
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3238: LD_ADDR_EXP 18
3242: PUSH
3243: LD_EXP 18
3247: PPUSH
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 3
3255: ST_TO_ADDR
3256: GO 3235
3258: POP
3259: POP
// end ; end ;
3260: PPOPN 2
3262: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL 23952 0 1
// if un in Patrol then
3272: LD_VAR 0 1
3276: PUSH
3277: LD_EXP 17
3281: IN
3282: IFFALSE 3300
// Patrol := Patrol diff un ;
3284: LD_ADDR_EXP 17
3288: PUSH
3289: LD_EXP 17
3293: PUSH
3294: LD_VAR 0 1
3298: DIFF
3299: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3300: LD_VAR 0 1
3304: PUSH
3305: LD_INT 22
3307: PUSH
3308: LD_INT 1
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 30
3317: PUSH
3318: LD_INT 32
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 69
3333: IN
3334: IFFALSE 3420
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3336: LD_ADDR_EXP 18
3340: PUSH
3341: LD_EXP 18
3345: PUSH
3346: LD_VAR 0 1
3350: PPUSH
3351: CALL_OW 250
3355: ADD
3356: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3357: LD_ADDR_EXP 18
3361: PUSH
3362: LD_EXP 18
3366: PUSH
3367: LD_VAR 0 1
3371: PPUSH
3372: CALL_OW 251
3376: ADD
3377: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3378: LD_ADDR_EXP 18
3382: PUSH
3383: LD_EXP 18
3387: PUSH
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 254
3397: ADD
3398: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3399: LD_ADDR_EXP 18
3403: PUSH
3404: LD_EXP 18
3408: PUSH
3409: LD_VAR 0 1
3413: PPUSH
3414: CALL_OW 269
3418: ADD
3419: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3420: LD_VAR 0 1
3424: PUSH
3425: LD_INT 33
3427: PUSH
3428: LD_INT 2
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 3
3437: PUSH
3438: LD_INT 34
3440: PUSH
3441: LD_INT 13
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PPUSH
3456: CALL_OW 69
3460: IN
3461: IFFALSE 3477
// new_veh := new_veh + 1 ;
3463: LD_ADDR_EXP 19
3467: PUSH
3468: LD_EXP 19
3472: PUSH
3473: LD_INT 1
3475: PLUS
3476: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3477: LD_VAR 0 1
3481: PUSH
3482: LD_INT 34
3484: PUSH
3485: LD_INT 13
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 69
3496: IN
3497: IFFALSE 3518
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3499: LD_INT 26
3501: PPUSH
3502: LD_INT 3
3504: PPUSH
3505: LD_INT 2
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: LD_INT 13
3513: PPUSH
3514: CALL_OW 185
// if un = am_dep then
3518: LD_VAR 0 1
3522: PUSH
3523: LD_INT 25
3525: EQUAL
3526: IFFALSE 3694
// begin SayRadio ( Platonov , DPlat ) ;
3528: LD_EXP 4
3532: PPUSH
3533: LD_STRING DPlat
3535: PPUSH
3536: CALL_OW 94
// if timer <= 30 30$00 then
3540: LD_EXP 24
3544: PUSH
3545: LD_INT 63000
3547: LESSEQUAL
3548: IFFALSE 3562
// AddMedal ( gamma_med3 , 1 ) else
3550: LD_STRING gamma_med3
3552: PPUSH
3553: LD_INT 1
3555: PPUSH
3556: CALL_OW 101
3560: GO 3612
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3562: LD_EXP 24
3566: PUSH
3567: LD_INT 105000
3569: PUSH
3570: LD_INT 88200
3572: PUSH
3573: LD_INT 73500
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_EXP 1
3585: ARRAY
3586: LESSEQUAL
3587: IFFALSE 3601
// AddMedal ( gamma_med3 , 2 ) else
3589: LD_STRING gamma_med3
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 101
3599: GO 3612
// AddMedal ( gamma_med3 , - 1 ) ;
3601: LD_STRING gamma_med3
3603: PPUSH
3604: LD_INT 1
3606: NEG
3607: PPUSH
3608: CALL_OW 101
// if not comp_tested then
3612: LD_EXP 22
3616: NOT
3617: IFFALSE 3632
// AddMedal ( gamma_med2 , - 1 ) else
3619: LD_STRING gamma_med2
3621: PPUSH
3622: LD_INT 1
3624: NEG
3625: PPUSH
3626: CALL_OW 101
3630: GO 3642
// AddMedal ( gamma_med2 , 1 ) ;
3632: LD_STRING gamma_med2
3634: PPUSH
3635: LD_INT 1
3637: PPUSH
3638: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3642: LD_EXP 9
3646: PPUSH
3647: CALL_OW 301
3651: PUSH
3652: LD_EXP 23
3656: NOT
3657: AND
3658: IFFALSE 3672
// AddMedal ( gamma_med1 , 1 ) else
3660: LD_STRING gamma_med1
3662: PPUSH
3663: LD_INT 1
3665: PPUSH
3666: CALL_OW 101
3670: GO 3683
// AddMedal ( gamma_med1 , - 1 ) ;
3672: LD_STRING gamma_med1
3674: PPUSH
3675: LD_INT 1
3677: NEG
3678: PPUSH
3679: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3683: LD_STRING GAMMA_MEDALS
3685: PPUSH
3686: CALL_OW 102
// YouWin ;
3690: CALL_OW 103
// end ; if un = commander then
3694: LD_VAR 0 1
3698: PUSH
3699: LD_EXP 3
3703: EQUAL
3704: IFFALSE 3713
// YouLost ( comml ) ;
3706: LD_STRING comml
3708: PPUSH
3709: CALL_OW 104
// if un = sikorski then
3713: LD_VAR 0 1
3717: PUSH
3718: LD_EXP 9
3722: EQUAL
3723: IFFALSE 3735
// AddMedal ( gamma_med1 , 1 ) ;
3725: LD_STRING gamma_med1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: CALL_OW 101
// end ;
3735: PPOPN 1
3737: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
// begin if event = 1 then
3749: LD_VAR 0 1
3753: PUSH
3754: LD_INT 1
3756: EQUAL
3757: IFFALSE 4054
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3759: LD_ADDR_VAR 0 4
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 1
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 21
3776: PUSH
3777: LD_INT 3
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 3
3786: PUSH
3787: LD_INT 24
3789: PUSH
3790: LD_INT 1000
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: PPUSH
3806: CALL_OW 69
3810: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3811: LD_ADDR_VAR 0 8
3815: PUSH
3816: LD_INT 22
3818: PUSH
3819: LD_INT 1
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 25
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 24
3838: PUSH
3839: LD_INT 1000
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: PPUSH
3854: CALL_OW 69
3858: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3859: LD_ADDR_VAR 0 9
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 1
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 13
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 69
3892: ST_TO_ADDR
// if engs > 0 then
3893: LD_VAR 0 8
3897: PUSH
3898: LD_INT 0
3900: GREATER
3901: IFFALSE 4006
// for i = 1 to engs do
3903: LD_ADDR_VAR 0 2
3907: PUSH
3908: DOUBLE
3909: LD_INT 1
3911: DEC
3912: ST_TO_ADDR
3913: LD_VAR 0 8
3917: PUSH
3918: FOR_TO
3919: IFFALSE 4004
// begin if IsInUnit ( engs [ i ] ) then
3921: LD_VAR 0 8
3925: PUSH
3926: LD_VAR 0 2
3930: ARRAY
3931: PPUSH
3932: CALL_OW 310
3936: IFFALSE 3953
// ComExitBuilding ( engs [ i ] ) ;
3938: LD_VAR 0 8
3942: PUSH
3943: LD_VAR 0 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3953: LD_INT 7
3955: PPUSH
3956: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3960: LD_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: ARRAY
3970: PPUSH
3971: CALL_OW 314
3975: NOT
3976: IFFALSE 4002
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3978: LD_VAR 0 8
3982: PUSH
3983: LD_VAR 0 2
3987: ARRAY
3988: PPUSH
3989: LD_VAR 0 4
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: CALL_OW 130
// end ;
4002: GO 3918
4004: POP
4005: POP
// if crane > 0 then
4006: LD_VAR 0 9
4010: PUSH
4011: LD_INT 0
4013: GREATER
4014: IFFALSE 4054
// if not HasTask ( crane [ 1 ] ) then
4016: LD_VAR 0 9
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: CALL_OW 314
4029: NOT
4030: IFFALSE 4054
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4032: LD_VAR 0 9
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: LD_VAR 0 4
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: PPUSH
4050: CALL_OW 130
// end ; if event = 2 then
4054: LD_VAR 0 1
4058: PUSH
4059: LD_INT 2
4061: EQUAL
4062: IFFALSE 4184
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4064: LD_ADDR_VAR 0 8
4068: PUSH
4069: LD_INT 22
4071: PUSH
4072: LD_INT 1
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 2
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 69
4097: ST_TO_ADDR
// if engs > 0 then
4098: LD_VAR 0 8
4102: PUSH
4103: LD_INT 0
4105: GREATER
4106: IFFALSE 4184
// for i = 1 to engs do
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: DOUBLE
4114: LD_INT 1
4116: DEC
4117: ST_TO_ADDR
4118: LD_VAR 0 8
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4182
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4126: LD_VAR 0 8
4130: PUSH
4131: LD_VAR 0 2
4135: ARRAY
4136: PPUSH
4137: CALL_OW 314
4141: NOT
4142: PUSH
4143: LD_VAR 0 8
4147: PUSH
4148: LD_VAR 0 2
4152: ARRAY
4153: PPUSH
4154: CALL_OW 310
4158: NOT
4159: AND
4160: IFFALSE 4180
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4162: LD_VAR 0 8
4166: PUSH
4167: LD_VAR 0 2
4171: ARRAY
4172: PPUSH
4173: LD_INT 25
4175: PPUSH
4176: CALL_OW 120
4180: GO 4123
4182: POP
4183: POP
// end ; if event = 3 then
4184: LD_VAR 0 1
4188: PUSH
4189: LD_INT 3
4191: EQUAL
4192: IFFALSE 4556
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4194: LD_ADDR_VAR 0 4
4198: PUSH
4199: LD_INT 22
4201: PUSH
4202: LD_INT 1
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 21
4211: PUSH
4212: LD_INT 1
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 3
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 4
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PUSH
4236: LD_INT 3
4238: PUSH
4239: LD_INT 24
4241: PUSH
4242: LD_INT 800
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: PPUSH
4262: CALL_OW 69
4266: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4267: LD_ADDR_VAR 0 5
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 25
4284: PUSH
4285: LD_INT 4
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 69
4300: ST_TO_ADDR
// if filter > 0 then
4301: LD_VAR 0 4
4305: PUSH
4306: LD_INT 0
4308: GREATER
4309: IFFALSE 4498
// begin for i = 1 to doc do
4311: LD_ADDR_VAR 0 2
4315: PUSH
4316: DOUBLE
4317: LD_INT 1
4319: DEC
4320: ST_TO_ADDR
4321: LD_VAR 0 5
4325: PUSH
4326: FOR_TO
4327: IFFALSE 4427
// begin if IsInUnit ( doc [ i ] ) then
4329: LD_VAR 0 5
4333: PUSH
4334: LD_VAR 0 2
4338: ARRAY
4339: PPUSH
4340: CALL_OW 310
4344: IFFALSE 4361
// ComExitBuilding ( doc [ i ] ) ;
4346: LD_VAR 0 5
4350: PUSH
4351: LD_VAR 0 2
4355: ARRAY
4356: PPUSH
4357: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4361: LD_VAR 0 4
4365: PUSH
4366: LD_INT 1
4368: ARRAY
4369: PPUSH
4370: LD_INT 46
4372: PPUSH
4373: CALL_OW 296
4377: PUSH
4378: LD_INT 10
4380: LESS
4381: PUSH
4382: LD_VAR 0 5
4386: PUSH
4387: LD_VAR 0 2
4391: ARRAY
4392: PPUSH
4393: CALL_OW 314
4397: NOT
4398: AND
4399: IFFALSE 4425
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4401: LD_VAR 0 5
4405: PUSH
4406: LD_VAR 0 2
4410: ARRAY
4411: PPUSH
4412: LD_VAR 0 4
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PPUSH
4421: CALL_OW 128
// end ;
4425: GO 4326
4427: POP
4428: POP
// for i = 1 to filter do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_VAR 0 4
4443: PUSH
4444: FOR_TO
4445: IFFALSE 4494
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4447: LD_VAR 0 4
4451: PUSH
4452: LD_VAR 0 2
4456: ARRAY
4457: PPUSH
4458: LD_INT 46
4460: PPUSH
4461: CALL_OW 296
4465: PUSH
4466: LD_INT 10
4468: GREATER
4469: IFFALSE 4492
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4471: LD_VAR 0 4
4475: PUSH
4476: LD_VAR 0 2
4480: ARRAY
4481: PPUSH
4482: LD_INT 47
4484: PPUSH
4485: LD_INT 12
4487: PPUSH
4488: CALL_OW 111
4492: GO 4444
4494: POP
4495: POP
// end else
4496: GO 4556
// for i = 1 to doc do
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: DOUBLE
4504: LD_INT 1
4506: DEC
4507: ST_TO_ADDR
4508: LD_VAR 0 5
4512: PUSH
4513: FOR_TO
4514: IFFALSE 4554
// if not IsInUnit ( doc [ i ] ) then
4516: LD_VAR 0 5
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: PPUSH
4527: CALL_OW 310
4531: NOT
4532: IFFALSE 4552
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4534: LD_VAR 0 5
4538: PUSH
4539: LD_VAR 0 2
4543: ARRAY
4544: PPUSH
4545: LD_INT 46
4547: PPUSH
4548: CALL_OW 120
4552: GO 4513
4554: POP
4555: POP
// end ; if event = 4 then
4556: LD_VAR 0 1
4560: PUSH
4561: LD_INT 4
4563: EQUAL
4564: IFFALSE 4815
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4566: LD_ADDR_VAR 0 6
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 5
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: ST_TO_ADDR
// for i = 1 to bac do
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: DOUBLE
4606: LD_INT 1
4608: DEC
4609: ST_TO_ADDR
4610: LD_VAR 0 6
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4657
// if UnitsInside ( bac [ i ] ) < 6 then
4618: LD_VAR 0 6
4622: PUSH
4623: LD_VAR 0 2
4627: ARRAY
4628: PPUSH
4629: CALL_OW 313
4633: PUSH
4634: LD_INT 6
4636: LESS
4637: IFFALSE 4655
// place := bac [ i ] ;
4639: LD_ADDR_VAR 0 7
4643: PUSH
4644: LD_VAR 0 6
4648: PUSH
4649: LD_VAR 0 2
4653: ARRAY
4654: ST_TO_ADDR
4655: GO 4615
4657: POP
4658: POP
// if place then
4659: LD_VAR 0 7
4663: IFFALSE 4815
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4665: LD_ADDR_VAR 0 4
4669: PUSH
4670: LD_INT 22
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 25
4695: PUSH
4696: LD_INT 5
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 24
4710: PUSH
4711: LD_INT 1000
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PUSH
4723: EMPTY
4724: LIST
4725: PPUSH
4726: CALL_OW 69
4730: PUSH
4731: LD_EXP 17
4735: DIFF
4736: ST_TO_ADDR
// for i = 1 to filter do
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: DOUBLE
4743: LD_INT 1
4745: DEC
4746: ST_TO_ADDR
4747: LD_VAR 0 4
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4813
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4755: LD_VAR 0 4
4759: PUSH
4760: LD_VAR 0 2
4764: ARRAY
4765: PPUSH
4766: CALL_OW 310
4770: NOT
4771: PUSH
4772: LD_VAR 0 4
4776: PUSH
4777: LD_VAR 0 2
4781: ARRAY
4782: PPUSH
4783: CALL_OW 314
4787: NOT
4788: AND
4789: IFFALSE 4811
// ComEnterUnit ( filter [ i ] , place ) ;
4791: LD_VAR 0 4
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_VAR 0 7
4806: PPUSH
4807: CALL_OW 120
4811: GO 4752
4813: POP
4814: POP
// end ; end ; if event = 5 then
4815: LD_VAR 0 1
4819: PUSH
4820: LD_INT 5
4822: EQUAL
4823: IFFALSE 4977
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4825: LD_INT 12
4827: PPUSH
4828: LD_INT 81
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 70
4842: PUSH
4843: LD_INT 0
4845: EQUAL
4846: IFFALSE 4977
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4848: LD_ADDR_VAR 0 8
4852: PUSH
4853: LD_INT 22
4855: PUSH
4856: LD_INT 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 25
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 69
4881: ST_TO_ADDR
// if engs > 0 then
4882: LD_VAR 0 8
4886: PUSH
4887: LD_INT 0
4889: GREATER
4890: IFFALSE 4977
// for i = 1 to engs do
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: DOUBLE
4898: LD_INT 1
4900: DEC
4901: ST_TO_ADDR
4902: LD_VAR 0 8
4906: PUSH
4907: FOR_TO
4908: IFFALSE 4975
// if not HasTask ( engs [ i ] ) then
4910: LD_VAR 0 8
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: CALL_OW 314
4925: NOT
4926: IFFALSE 4973
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4928: LD_VAR 0 8
4932: PUSH
4933: LD_VAR 0 2
4937: ARRAY
4938: PPUSH
4939: LD_INT 32
4941: PPUSH
4942: LD_EXP 18
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: LD_EXP 18
4955: PUSH
4956: LD_INT 2
4958: ARRAY
4959: PPUSH
4960: LD_EXP 18
4964: PUSH
4965: LD_INT 3
4967: ARRAY
4968: PPUSH
4969: CALL_OW 145
4973: GO 4907
4975: POP
4976: POP
// end ; end ; if event = 6 then
4977: LD_VAR 0 1
4981: PUSH
4982: LD_INT 6
4984: EQUAL
4985: IFFALSE 5169
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4987: LD_ADDR_VAR 0 6
4991: PUSH
4992: LD_INT 22
4994: PUSH
4995: LD_INT 1
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PPUSH
5016: CALL_OW 69
5020: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5021: LD_VAR 0 6
5025: PUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 30
5038: PUSH
5039: LD_INT 32
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 58
5048: PUSH
5049: EMPTY
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: PPUSH
5060: CALL_OW 69
5064: PUSH
5065: LD_INT 0
5067: GREATER
5068: AND
5069: IFFALSE 5169
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5071: LD_ADDR_VAR 0 10
5075: PUSH
5076: LD_INT 22
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 30
5088: PUSH
5089: LD_INT 32
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 58
5098: PUSH
5099: EMPTY
5100: LIST
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: PUSH
5115: LD_INT 1
5117: ARRAY
5118: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: LD_VAR 0 6
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: PPUSH
5133: CALL_OW 313
5137: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5151: LD_VAR 0 3
5155: PUSH
5156: LD_INT 1
5158: ARRAY
5159: PPUSH
5160: LD_VAR 0 10
5164: PPUSH
5165: CALL_OW 180
// end ; end ; end ;
5169: PPOPN 10
5171: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_INT 1
5179: EQUAL
5180: PUSH
5181: LD_VAR 0 2
5185: PUSH
5186: LD_INT 3
5188: EQUAL
5189: AND
5190: IFFALSE 5200
// contact_am := true ;
5192: LD_ADDR_EXP 16
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// end ;
5200: PPOPN 2
5202: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: LD_VAR 0 3
5217: PPUSH
5218: CALL 24050 0 3
// end ;
5222: PPOPN 3
5224: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL 24058 0 1
// end ; end_of_file
5234: PPOPN 1
5236: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
5241: PPUSH
5242: PPUSH
5243: PPUSH
5244: PPUSH
5245: PPUSH
5246: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5247: LD_ADDR_VAR 0 5
5251: PUSH
5252: LD_INT 5
5254: PUSH
5255: LD_INT 6
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: LD_EXP 1
5270: ARRAY
5271: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5272: LD_ADDR_VAR 0 6
5276: PUSH
5277: LD_INT 4
5279: PUSH
5280: LD_INT 4
5282: PUSH
5283: LD_INT 4
5285: PUSH
5286: LD_INT 5
5288: PUSH
5289: LD_INT 5
5291: PUSH
5292: LD_INT 5
5294: PUSH
5295: LD_INT 6
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// SForce := [ ] ;
5307: LD_ADDR_EXP 11
5311: PUSH
5312: EMPTY
5313: ST_TO_ADDR
// Sikorski_Ar := false ;
5314: LD_ADDR_EXP 12
5318: PUSH
5319: LD_INT 0
5321: ST_TO_ADDR
// attacked := false ;
5322: LD_ADDR_EXP 15
5326: PUSH
5327: LD_INT 0
5329: ST_TO_ADDR
// contact_am := false ;
5330: LD_ADDR_EXP 16
5334: PUSH
5335: LD_INT 0
5337: ST_TO_ADDR
// patrol := [ ] ;
5338: LD_ADDR_EXP 17
5342: PUSH
5343: EMPTY
5344: ST_TO_ADDR
// gamma_towers := [ ] ;
5345: LD_ADDR_EXP 18
5349: PUSH
5350: EMPTY
5351: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5352: LD_INT 25
5354: PPUSH
5355: LD_STRING gamma
5357: PPUSH
5358: CALL_OW 500
// uc_side := 1 ;
5362: LD_ADDR_OWVAR 20
5366: PUSH
5367: LD_INT 1
5369: ST_TO_ADDR
// uc_nation := 1 ;
5370: LD_ADDR_OWVAR 21
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// hc_importance := 0 ;
5378: LD_ADDR_OWVAR 32
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5386: LD_ADDR_OWVAR 26
5390: PUSH
5391: LD_STRING Jeremy Sikorski
5393: ST_TO_ADDR
// hc_gallery := us ;
5394: LD_ADDR_OWVAR 33
5398: PUSH
5399: LD_STRING us
5401: ST_TO_ADDR
// hc_face_number := 19 ;
5402: LD_ADDR_OWVAR 34
5406: PUSH
5407: LD_INT 19
5409: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5410: LD_ADDR_OWVAR 31
5414: PUSH
5415: LD_VAR 0 5
5419: PPUSH
5420: LD_VAR 0 5
5424: PUSH
5425: LD_INT 2
5427: PLUS
5428: PPUSH
5429: CALL_OW 12
5433: PUSH
5434: LD_INT 4
5436: PUSH
5437: LD_INT 6
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: ST_TO_ADDR
// hc_sex := sex_male ;
5449: LD_ADDR_OWVAR 27
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// hc_class := 1 ;
5457: LD_ADDR_OWVAR 28
5461: PUSH
5462: LD_INT 1
5464: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5465: LD_ADDR_OWVAR 29
5469: PUSH
5470: LD_INT 10
5472: PUSH
5473: LD_INT 11
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: ST_TO_ADDR
// sikorski := CreateHuman ;
5480: LD_ADDR_EXP 9
5484: PUSH
5485: CALL_OW 44
5489: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5490: LD_ADDR_OWVAR 26
5494: PUSH
5495: LD_STRING Lucy Donaldson
5497: ST_TO_ADDR
// hc_gallery := us ;
5498: LD_ADDR_OWVAR 33
5502: PUSH
5503: LD_STRING us
5505: ST_TO_ADDR
// hc_face_number := 2 ;
5506: LD_ADDR_OWVAR 34
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5514: LD_ADDR_OWVAR 31
5518: PUSH
5519: LD_VAR 0 5
5523: PPUSH
5524: LD_VAR 0 5
5528: PUSH
5529: LD_INT 2
5531: PLUS
5532: PPUSH
5533: CALL_OW 12
5537: PUSH
5538: LD_INT 6
5540: PUSH
5541: LD_INT 4
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: ST_TO_ADDR
// hc_sex := sex_female ;
5553: LD_ADDR_OWVAR 27
5557: PUSH
5558: LD_INT 2
5560: ST_TO_ADDR
// hc_class := 1 ;
5561: LD_ADDR_OWVAR 28
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// donald := CreateHuman ;
5569: LD_ADDR_EXP 13
5573: PUSH
5574: CALL_OW 44
5578: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5579: LD_ADDR_OWVAR 26
5583: PUSH
5584: LD_STRING Peter Van Houten
5586: ST_TO_ADDR
// hc_gallery := us ;
5587: LD_ADDR_OWVAR 33
5591: PUSH
5592: LD_STRING us
5594: ST_TO_ADDR
// hc_face_number := 16 ;
5595: LD_ADDR_OWVAR 34
5599: PUSH
5600: LD_INT 16
5602: ST_TO_ADDR
// hc_sex := sex_male ;
5603: LD_ADDR_OWVAR 27
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// van := CreateHuman ;
5611: LD_ADDR_EXP 14
5615: PUSH
5616: CALL_OW 44
5620: ST_TO_ADDR
// hc_importance := 0 ;
5621: LD_ADDR_OWVAR 32
5625: PUSH
5626: LD_INT 0
5628: ST_TO_ADDR
// case dif of 1 :
5629: LD_EXP 1
5633: PUSH
5634: LD_INT 1
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5642
5640: GO 5653
5642: POP
// lw = 1 ; 2 :
5643: LD_ADDR_VAR 0 8
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
5651: GO 5700
5653: LD_INT 2
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5661
5659: GO 5680
5661: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5662: LD_ADDR_VAR 0 8
5666: PUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: CALL_OW 12
5677: ST_TO_ADDR
5678: GO 5700
5680: LD_INT 3
5682: DOUBLE
5683: EQUAL
5684: IFTRUE 5688
5686: GO 5699
5688: POP
// lw = 2 ; end ;
5689: LD_ADDR_VAR 0 8
5693: PUSH
5694: LD_INT 2
5696: ST_TO_ADDR
5697: GO 5700
5699: POP
// case lw of 1 :
5700: LD_VAR 0 8
5704: PUSH
5705: LD_INT 1
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5728
5713: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5714: LD_EXP 13
5718: PPUSH
5719: LD_INT 25
5721: PPUSH
5722: CALL_OW 52
5726: GO 5752
5728: LD_INT 2
5730: DOUBLE
5731: EQUAL
5732: IFTRUE 5736
5734: GO 5751
5736: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5737: LD_EXP 14
5741: PPUSH
5742: LD_INT 25
5744: PPUSH
5745: CALL_OW 52
5749: GO 5752
5751: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5752: LD_ADDR_VAR 0 2
5756: PUSH
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 30
5769: PUSH
5770: LD_INT 32
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: PUSH
5786: FOR_IN
5787: IFFALSE 5841
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5789: LD_INT 1
5791: PPUSH
5792: LD_VAR 0 5
5796: PPUSH
5797: CALL 734 0 2
5801: PPUSH
5802: LD_VAR 0 2
5806: PPUSH
5807: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5811: LD_VAR 0 2
5815: PPUSH
5816: LD_VAR 0 6
5820: PUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 12
5833: ARRAY
5834: PPUSH
5835: CALL_OW 431
// end ;
5839: GO 5786
5841: POP
5842: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5843: LD_ADDR_VAR 0 7
5847: PUSH
5848: LD_INT 22
5850: PUSH
5851: LD_INT 1
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 2
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 1
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 5
5873: PUSH
5874: EMPTY
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 69
5890: ST_TO_ADDR
// for i = 1 to sol do
5891: LD_ADDR_VAR 0 2
5895: PUSH
5896: DOUBLE
5897: LD_INT 1
5899: DEC
5900: ST_TO_ADDR
5901: LD_VAR 0 7
5905: PUSH
5906: FOR_TO
5907: IFFALSE 5929
// SetTag ( sol [ i ] , 1 ) ;
5909: LD_VAR 0 7
5913: PUSH
5914: LD_VAR 0 2
5918: ARRAY
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: CALL_OW 109
5927: GO 5906
5929: POP
5930: POP
// for i = 1 to 3 do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: DOUBLE
5937: LD_INT 1
5939: DEC
5940: ST_TO_ADDR
5941: LD_INT 3
5943: PUSH
5944: FOR_TO
5945: IFFALSE 5969
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5947: LD_INT 3
5949: PPUSH
5950: LD_VAR 0 5
5954: PPUSH
5955: CALL 734 0 2
5959: PPUSH
5960: LD_INT 56
5962: PPUSH
5963: CALL_OW 52
5967: GO 5944
5969: POP
5970: POP
// for i = 1 to 6 do
5971: LD_ADDR_VAR 0 2
5975: PUSH
5976: DOUBLE
5977: LD_INT 1
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 6
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6009
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
5987: LD_INT 3
5989: PPUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: CALL 734 0 2
5999: PPUSH
6000: LD_INT 26
6002: PPUSH
6003: CALL_OW 52
6007: GO 5984
6009: POP
6010: POP
// for i = 1 to 5 do
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: DOUBLE
6017: LD_INT 1
6019: DEC
6020: ST_TO_ADDR
6021: LD_INT 5
6023: PUSH
6024: FOR_TO
6025: IFFALSE 6052
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_VAR 0 5
6034: PPUSH
6035: CALL 734 0 2
6039: PPUSH
6040: LD_INT 7
6042: PPUSH
6043: LD_INT 0
6045: PPUSH
6046: CALL_OW 49
6050: GO 6024
6052: POP
6053: POP
// for i = 1 to 3 do
6054: LD_ADDR_VAR 0 2
6058: PUSH
6059: DOUBLE
6060: LD_INT 1
6062: DEC
6063: ST_TO_ADDR
6064: LD_INT 3
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6092
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6070: LD_INT 4
6072: PPUSH
6073: LD_VAR 0 5
6077: PPUSH
6078: CALL 734 0 2
6082: PPUSH
6083: LD_INT 46
6085: PPUSH
6086: CALL_OW 52
6090: GO 6067
6092: POP
6093: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 30
6111: PUSH
6112: LD_INT 5
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PPUSH
6123: CALL_OW 69
6127: PUSH
6128: FOR_IN
6129: IFFALSE 6243
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6131: LD_INT 5
6133: PPUSH
6134: LD_VAR 0 5
6138: PPUSH
6139: CALL 734 0 2
6143: PPUSH
6144: LD_VAR 0 2
6148: PPUSH
6149: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6153: LD_INT 5
6155: PPUSH
6156: LD_VAR 0 5
6160: PPUSH
6161: CALL 734 0 2
6165: PPUSH
6166: LD_VAR 0 2
6170: PPUSH
6171: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6175: LD_INT 1
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: CALL 734 0 2
6187: PPUSH
6188: LD_VAR 0 2
6192: PPUSH
6193: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6197: LD_INT 1
6199: PPUSH
6200: LD_VAR 0 5
6204: PPUSH
6205: CALL 734 0 2
6209: PPUSH
6210: LD_VAR 0 2
6214: PPUSH
6215: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6219: LD_INT 1
6221: PPUSH
6222: LD_VAR 0 5
6226: PPUSH
6227: CALL 734 0 2
6231: PPUSH
6232: LD_VAR 0 2
6236: PPUSH
6237: CALL_OW 52
// end ;
6241: GO 6128
6243: POP
6244: POP
// if dif > 1 then
6245: LD_EXP 1
6249: PUSH
6250: LD_INT 1
6252: GREATER
6253: IFFALSE 6326
// for i = 1 to ( dif - 1 ) do
6255: LD_ADDR_VAR 0 2
6259: PUSH
6260: DOUBLE
6261: LD_INT 1
6263: DEC
6264: ST_TO_ADDR
6265: LD_EXP 1
6269: PUSH
6270: LD_INT 1
6272: MINUS
6273: PUSH
6274: FOR_TO
6275: IFFALSE 6324
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6277: LD_ADDR_EXP 17
6281: PUSH
6282: LD_EXP 17
6286: PUSH
6287: LD_INT 1
6289: PPUSH
6290: LD_VAR 0 5
6294: PPUSH
6295: CALL 734 0 2
6299: ADD
6300: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6301: LD_EXP 17
6305: PUSH
6306: LD_VAR 0 2
6310: ARRAY
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: LD_INT 0
6317: PPUSH
6318: CALL_OW 49
// end ;
6322: GO 6274
6324: POP
6325: POP
// game_started := true ;
6326: LD_ADDR_EXP 10
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6334: LD_INT 26
6336: PPUSH
6337: LD_INT 3
6339: PPUSH
6340: LD_INT 2
6342: PPUSH
6343: LD_INT 2
6345: PPUSH
6346: LD_INT 13
6348: PPUSH
6349: CALL_OW 125
// while ( contact_am = false ) do
6353: LD_EXP 16
6357: PUSH
6358: LD_INT 0
6360: EQUAL
6361: IFFALSE 6372
// begin Wait ( 0 0$01 ) ;
6363: LD_INT 35
6365: PPUSH
6366: CALL_OW 67
// end ;
6370: GO 6353
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6372: LD_INT 8400
6374: PUSH
6375: LD_INT 6300
6377: PUSH
6378: LD_INT 5250
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_EXP 1
6390: ARRAY
6391: PPUSH
6392: CALL_OW 67
// case dif of 1 :
6396: LD_EXP 1
6400: PUSH
6401: LD_INT 1
6403: DOUBLE
6404: EQUAL
6405: IFTRUE 6409
6407: GO 6584
6409: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6410: LD_INT 26
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 1
6418: PPUSH
6419: LD_INT 2
6421: PPUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: LD_INT 1
6442: PPUSH
6443: LD_INT 4
6445: PPUSH
6446: CALL_OW 12
6450: ARRAY
6451: PPUSH
6452: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6456: LD_INT 26
6458: PPUSH
6459: LD_INT 3
6461: PPUSH
6462: LD_INT 1
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: LD_INT 4
6470: PUSH
6471: LD_INT 5
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 1
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: CALL_OW 12
6492: ARRAY
6493: PPUSH
6494: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6498: LD_INT 26
6500: PPUSH
6501: LD_INT 3
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: LD_INT 4
6512: PUSH
6513: LD_INT 5
6515: PUSH
6516: LD_INT 5
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_INT 3
6529: PPUSH
6530: CALL_OW 12
6534: ARRAY
6535: PPUSH
6536: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6540: LD_INT 26
6542: PPUSH
6543: LD_INT 3
6545: PPUSH
6546: LD_INT 1
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: LD_INT 4
6554: PUSH
6555: LD_INT 3
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 3
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: PPUSH
6578: CALL_OW 185
// end ; 2 :
6582: GO 7111
6584: LD_INT 2
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6805
6592: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6593: LD_INT 26
6595: PPUSH
6596: LD_INT 3
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 2
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 5
6610: PUSH
6611: LD_INT 5
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6635: LD_INT 26
6637: PPUSH
6638: LD_INT 3
6640: PPUSH
6641: LD_INT 1
6643: PPUSH
6644: LD_INT 2
6646: PPUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 5
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_INT 3
6666: PPUSH
6667: CALL_OW 12
6671: ARRAY
6672: PPUSH
6673: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6677: LD_INT 26
6679: PPUSH
6680: LD_INT 3
6682: PPUSH
6683: LD_INT 1
6685: PPUSH
6686: LD_INT 2
6688: PPUSH
6689: LD_INT 4
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 1
6705: PPUSH
6706: LD_INT 3
6708: PPUSH
6709: CALL_OW 12
6713: ARRAY
6714: PPUSH
6715: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6719: LD_INT 26
6721: PPUSH
6722: LD_INT 4
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_INT 2
6730: PPUSH
6731: LD_INT 4
6733: PUSH
6734: LD_INT 5
6736: PUSH
6737: LD_INT 6
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 1
6747: PPUSH
6748: LD_INT 3
6750: PPUSH
6751: CALL_OW 12
6755: ARRAY
6756: PPUSH
6757: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6761: LD_INT 26
6763: PPUSH
6764: LD_INT 4
6766: PPUSH
6767: LD_INT 1
6769: PPUSH
6770: LD_INT 2
6772: PPUSH
6773: LD_INT 4
6775: PUSH
6776: LD_INT 5
6778: PUSH
6779: LD_INT 6
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 1
6789: PPUSH
6790: LD_INT 3
6792: PPUSH
6793: CALL_OW 12
6797: ARRAY
6798: PPUSH
6799: CALL_OW 185
// end ; 3 :
6803: GO 7111
6805: LD_INT 3
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 7110
6813: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6814: LD_INT 26
6816: PPUSH
6817: LD_INT 3
6819: PPUSH
6820: LD_INT 1
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: LD_INT 4
6828: PUSH
6829: LD_INT 5
6831: PUSH
6832: LD_INT 5
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 1
6842: PPUSH
6843: LD_INT 3
6845: PPUSH
6846: CALL_OW 12
6850: ARRAY
6851: PPUSH
6852: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6856: LD_INT 26
6858: PPUSH
6859: LD_INT 3
6861: PPUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_INT 2
6867: PPUSH
6868: LD_INT 4
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: LD_INT 5
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 1
6884: PPUSH
6885: LD_INT 3
6887: PPUSH
6888: CALL_OW 12
6892: ARRAY
6893: PPUSH
6894: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6898: LD_INT 26
6900: PPUSH
6901: LD_INT 3
6903: PPUSH
6904: LD_INT 1
6906: PPUSH
6907: LD_INT 2
6909: PPUSH
6910: LD_INT 4
6912: PUSH
6913: LD_INT 5
6915: PUSH
6916: LD_INT 5
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 1
6926: PPUSH
6927: LD_INT 3
6929: PPUSH
6930: CALL_OW 12
6934: ARRAY
6935: PPUSH
6936: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6940: LD_INT 26
6942: PPUSH
6943: LD_INT 3
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 2
6951: PPUSH
6952: LD_INT 4
6954: PUSH
6955: LD_INT 5
6957: PUSH
6958: LD_INT 5
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 1
6968: PPUSH
6969: LD_INT 3
6971: PPUSH
6972: CALL_OW 12
6976: ARRAY
6977: PPUSH
6978: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6982: LD_INT 26
6984: PPUSH
6985: LD_INT 4
6987: PPUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: LD_INT 4
6996: PUSH
6997: LD_INT 5
6999: PUSH
7000: LD_INT 6
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 1
7010: PPUSH
7011: LD_INT 3
7013: PPUSH
7014: CALL_OW 12
7018: ARRAY
7019: PPUSH
7020: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7024: LD_INT 26
7026: PPUSH
7027: LD_INT 4
7029: PPUSH
7030: LD_INT 1
7032: PPUSH
7033: LD_INT 2
7035: PPUSH
7036: LD_INT 4
7038: PUSH
7039: LD_INT 5
7041: PUSH
7042: LD_INT 6
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 1
7052: PPUSH
7053: LD_INT 3
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7066: LD_INT 26
7068: PPUSH
7069: LD_INT 4
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: LD_INT 4
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 1
7094: PPUSH
7095: LD_INT 3
7097: PPUSH
7098: CALL_OW 12
7102: ARRAY
7103: PPUSH
7104: CALL_OW 185
// end ; end ;
7108: GO 7111
7110: POP
// end ;
7111: LD_VAR 0 1
7115: RET
// every 0 0$01 do var i , filter ;
7116: GO 7118
7118: DISABLE
7119: LD_INT 0
7121: PPUSH
7122: PPUSH
// begin enable ;
7123: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7124: LD_INT 22
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 25
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PUSH
7153: LD_INT 0
7155: GREATER
7156: IFFALSE 7165
// RaiseSailEvent ( 3 ) ;
7158: LD_INT 3
7160: PPUSH
7161: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7165: LD_INT 22
7167: PUSH
7168: LD_INT 1
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 21
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 3
7187: PUSH
7188: LD_INT 24
7190: PUSH
7191: LD_INT 1000
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PPUSH
7207: CALL_OW 69
7211: PUSH
7212: LD_INT 0
7214: GREATER
7215: IFFALSE 7226
// RaiseSailEvent ( 1 ) else
7217: LD_INT 1
7219: PPUSH
7220: CALL_OW 427
7224: GO 7233
// RaiseSailEvent ( 2 ) ;
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7233: LD_INT 22
7235: PUSH
7236: LD_INT 1
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 30
7245: PUSH
7246: LD_INT 5
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: PUSH
7262: LD_INT 0
7264: GREATER
7265: IFFALSE 7274
// RaiseSailEvent ( 4 ) ;
7267: LD_INT 4
7269: PPUSH
7270: CALL_OW 427
// if gamma_towers > 0 then
7274: LD_EXP 18
7278: PUSH
7279: LD_INT 0
7281: GREATER
7282: IFFALSE 7291
// RaiseSailEvent ( 5 ) ;
7284: LD_INT 5
7286: PPUSH
7287: CALL_OW 427
// end ;
7291: PPOPN 2
7293: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7294: GO 7296
7296: DISABLE
7297: LD_INT 0
7299: PPUSH
7300: PPUSH
// begin enable ;
7301: ENABLE
// if new_veh > 0 then
7302: LD_EXP 19
7306: PUSH
7307: LD_INT 0
7309: GREATER
7310: IFFALSE 7497
// while ( new_veh > 0 ) do
7312: LD_EXP 19
7316: PUSH
7317: LD_INT 0
7319: GREATER
7320: IFFALSE 7497
// begin Wait ( 0 0$01 ) ;
7322: LD_INT 35
7324: PPUSH
7325: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7329: LD_INT 26
7331: PPUSH
7332: CALL_OW 461
7336: PUSH
7337: LD_INT 2
7339: EQUAL
7340: IFFALSE 7495
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7342: LD_ADDR_VAR 0 1
7346: PUSH
7347: LD_INT 2
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: LD_INT 4
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 4
7370: PPUSH
7371: CALL_OW 12
7375: ARRAY
7376: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7377: LD_VAR 0 1
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: IN
7392: IFFALSE 7427
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7394: LD_ADDR_VAR 0 2
7398: PUSH
7399: LD_INT 4
7401: PUSH
7402: LD_INT 5
7404: PUSH
7405: LD_INT 7
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 1
7415: PPUSH
7416: LD_INT 3
7418: PPUSH
7419: CALL_OW 12
7423: ARRAY
7424: ST_TO_ADDR
7425: GO 7458
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7427: LD_ADDR_VAR 0 2
7431: PUSH
7432: LD_INT 5
7434: PUSH
7435: LD_INT 7
7437: PUSH
7438: LD_INT 6
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_INT 3
7451: PPUSH
7452: CALL_OW 12
7456: ARRAY
7457: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7458: LD_INT 26
7460: PPUSH
7461: LD_VAR 0 1
7465: PPUSH
7466: LD_INT 1
7468: PPUSH
7469: LD_INT 2
7471: PPUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 125
// new_veh := new_veh - 1 ;
7481: LD_ADDR_EXP 19
7485: PUSH
7486: LD_EXP 19
7490: PUSH
7491: LD_INT 1
7493: MINUS
7494: ST_TO_ADDR
// end ; end ;
7495: GO 7312
// end ;
7497: PPOPN 2
7499: END
// every 0 0$01 do var v , filter , am_cmeh ;
7500: GO 7502
7502: DISABLE
7503: LD_INT 0
7505: PPUSH
7506: PPUSH
7507: PPUSH
// begin enable ;
7508: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7509: LD_ADDR_VAR 0 3
7513: PUSH
7514: LD_INT 56
7516: PPUSH
7517: CALL_OW 313
7521: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: LD_INT 22
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 33
7539: PUSH
7540: LD_INT 2
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 50
7549: PUSH
7550: EMPTY
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: ST_TO_ADDR
// if filter > 0 then
7566: LD_VAR 0 2
7570: PUSH
7571: LD_INT 0
7573: GREATER
7574: IFFALSE 7642
// begin for v in filter do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_VAR 0 2
7585: PUSH
7586: FOR_IN
7587: IFFALSE 7640
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7589: LD_VAR 0 1
7593: PPUSH
7594: CALL_OW 312
7598: NOT
7599: PUSH
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 302
7609: AND
7610: IFFALSE 7638
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_VAR 0 3
7621: PUSH
7622: LD_INT 1
7624: PPUSH
7625: LD_INT 3
7627: PPUSH
7628: CALL_OW 12
7632: ARRAY
7633: PPUSH
7634: CALL_OW 135
// end ;
7638: GO 7586
7640: POP
7641: POP
// end ; end ;
7642: PPOPN 3
7644: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7645: LD_INT 33
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 34
7660: PUSH
7661: LD_INT 13
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: PUSH
7681: LD_INT 4
7683: PUSH
7684: LD_INT 5
7686: PUSH
7687: LD_INT 7
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PUSH
7695: LD_EXP 1
7699: ARRAY
7700: EQUAL
7701: PUSH
7702: LD_INT 26
7704: PPUSH
7705: CALL_OW 461
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: AND
7714: IFFALSE 7925
7716: GO 7718
7718: DISABLE
7719: LD_INT 0
7721: PPUSH
7722: PPUSH
7723: PPUSH
// begin enable ;
7724: ENABLE
// if Sikorski_Ar then
7725: LD_EXP 12
7729: IFFALSE 7806
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7731: LD_ADDR_EXP 11
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: LD_INT 22
7741: PUSH
7742: LD_INT 4
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 22
7751: PUSH
7752: LD_INT 1
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: LD_INT 33
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 13
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: ST_TO_ADDR
7804: GO 7847
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7806: LD_ADDR_EXP 11
7810: PUSH
7811: LD_INT 33
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 34
7826: PUSH
7827: LD_INT 13
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 69
7846: ST_TO_ADDR
// repeat begin for un in SForce do
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_EXP 11
7856: PUSH
7857: FOR_IN
7858: IFFALSE 7913
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7860: LD_ADDR_VAR 0 3
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: LD_VAR 0 2
7894: PPUSH
7895: CALL_OW 74
7899: PPUSH
7900: CALL_OW 115
// Wait ( 0 0$01 ) ;
7904: LD_INT 35
7906: PPUSH
7907: CALL_OW 67
// end ;
7911: GO 7857
7913: POP
7914: POP
// end until SForce = 0 ;
7915: LD_EXP 11
7919: PUSH
7920: LD_INT 0
7922: EQUAL
7923: IFFALSE 7847
// end ;
7925: PPOPN 3
7927: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7928: LD_INT 0
7930: PPUSH
7931: PPUSH
7932: PPUSH
7933: PPUSH
7934: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 14
7942: PPUSH
7943: EMPTY
7944: PPUSH
7945: CALL_OW 70
7949: ST_TO_ADDR
// if tmp then
7950: LD_VAR 0 6
7954: IFFALSE 7988
// for i in tmp do
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_VAR 0 6
7965: PUSH
7966: FOR_IN
7967: IFFALSE 7986
// ComMoveXY ( i , 42 , 23 ) ;
7969: LD_VAR 0 3
7973: PPUSH
7974: LD_INT 42
7976: PPUSH
7977: LD_INT 23
7979: PPUSH
7980: CALL_OW 111
7984: GO 7966
7986: POP
7987: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
7988: LD_INT 14
7990: PPUSH
7991: LD_INT 1
7993: PPUSH
7994: CALL_OW 286
// uc_side := 4 ;
7998: LD_ADDR_OWVAR 20
8002: PUSH
8003: LD_INT 4
8005: ST_TO_ADDR
// uc_nation := 1 ;
8006: LD_ADDR_OWVAR 21
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8014: LD_ADDR_OWVAR 37
8018: PUSH
8019: LD_INT 4
8021: ST_TO_ADDR
// vc_control := control_manual ;
8022: LD_ADDR_OWVAR 38
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// vc_engine := engine_combustion ;
8030: LD_ADDR_OWVAR 39
8034: PUSH
8035: LD_INT 1
8037: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8038: LD_ADDR_OWVAR 40
8042: PUSH
8043: LD_INT 4
8045: PUSH
8046: LD_INT 5
8048: PUSH
8049: LD_INT 7
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_EXP 1
8061: ARRAY
8062: ST_TO_ADDR
// veh := CreateVehicle ;
8063: LD_ADDR_VAR 0 5
8067: PUSH
8068: CALL_OW 45
8072: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8073: LD_VAR 0 5
8077: PPUSH
8078: LD_INT 2
8080: PPUSH
8081: LD_INT 0
8083: PPUSH
8084: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8088: LD_EXP 9
8092: PPUSH
8093: LD_VAR 0 5
8097: PPUSH
8098: CALL_OW 52
// SetMark ( veh , 1 ) ;
8102: LD_VAR 0 5
8106: PPUSH
8107: LD_INT 1
8109: PPUSH
8110: CALL_OW 242
// while ( num > 0 ) do
8114: LD_VAR 0 1
8118: PUSH
8119: LD_INT 0
8121: GREATER
8122: IFFALSE 8289
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8124: LD_INT 3
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 3
8132: PUSH
8133: LD_INT 4
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: LD_EXP 1
8146: PPUSH
8147: LD_INT 4
8149: PPUSH
8150: CALL_OW 12
8154: ARRAY
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 4
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: LD_INT 5
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_EXP 1
8184: PUSH
8185: LD_INT 1
8187: PLUS
8188: PPUSH
8189: CALL_OW 12
8193: ARRAY
8194: PPUSH
8195: LD_INT 11
8197: PPUSH
8198: LD_INT 2
8200: PPUSH
8201: LD_INT 5
8203: PUSH
8204: LD_INT 6
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: LD_EXP 1
8219: ARRAY
8220: PPUSH
8221: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8225: LD_ADDR_VAR 0 4
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8245: LD_VAR 0 4
8249: PUSH
8250: LD_VAR 0 4
8254: ARRAY
8255: PPUSH
8256: LD_INT 36
8258: PPUSH
8259: LD_INT 18
8261: PPUSH
8262: CALL_OW 111
// Wait ( 0 0$02 ) ;
8266: LD_INT 70
8268: PPUSH
8269: CALL_OW 67
// num := num - 1 ;
8273: LD_ADDR_VAR 0 1
8277: PUSH
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: MINUS
8286: ST_TO_ADDR
// end ;
8287: GO 8114
// end ;
8289: LD_VAR 0 2
8293: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8294: LD_EXP 17
8298: PUSH
8299: LD_INT 0
8301: GREATER
8302: IFFALSE 8571
8304: GO 8306
8306: DISABLE
8307: LD_INT 0
8309: PPUSH
// begin enable ;
8310: ENABLE
// for i = 1 to patrol do
8311: LD_ADDR_VAR 0 1
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_EXP 17
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8569
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8329: LD_EXP 17
8333: PUSH
8334: LD_VAR 0 1
8338: ARRAY
8339: PUSH
8340: LD_EXP 17
8344: PUSH
8345: LD_VAR 0 1
8349: ARRAY
8350: PPUSH
8351: CALL_OW 300
8355: AND
8356: PUSH
8357: LD_EXP 17
8361: PUSH
8362: LD_VAR 0 1
8366: ARRAY
8367: PPUSH
8368: CALL_OW 314
8372: NOT
8373: AND
8374: IFFALSE 8524
// case i of 1 :
8376: LD_VAR 0 1
8380: PUSH
8381: LD_INT 1
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8452
8389: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8390: LD_EXP 17
8394: PUSH
8395: LD_VAR 0 1
8399: ARRAY
8400: PPUSH
8401: LD_INT 53
8403: PPUSH
8404: LD_INT 91
8406: PPUSH
8407: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8411: LD_EXP 17
8415: PUSH
8416: LD_VAR 0 1
8420: ARRAY
8421: PPUSH
8422: LD_INT 245
8424: PPUSH
8425: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8429: LD_EXP 17
8433: PUSH
8434: LD_VAR 0 1
8438: ARRAY
8439: PPUSH
8440: LD_INT 24
8442: PPUSH
8443: LD_INT 26
8445: PPUSH
8446: CALL_OW 171
// end ; 2 :
8450: GO 8524
8452: LD_INT 2
8454: DOUBLE
8455: EQUAL
8456: IFTRUE 8460
8458: GO 8523
8460: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8461: LD_EXP 17
8465: PUSH
8466: LD_VAR 0 1
8470: ARRAY
8471: PPUSH
8472: LD_INT 83
8474: PPUSH
8475: LD_INT 57
8477: PPUSH
8478: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8482: LD_EXP 17
8486: PUSH
8487: LD_VAR 0 1
8491: ARRAY
8492: PPUSH
8493: LD_INT 245
8495: PPUSH
8496: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8500: LD_EXP 17
8504: PUSH
8505: LD_VAR 0 1
8509: ARRAY
8510: PPUSH
8511: LD_INT 47
8513: PPUSH
8514: LD_INT 53
8516: PPUSH
8517: CALL_OW 171
// end ; end ;
8521: GO 8524
8523: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8524: LD_EXP 17
8528: PUSH
8529: LD_VAR 0 1
8533: ARRAY
8534: PPUSH
8535: CALL_OW 256
8539: PUSH
8540: LD_INT 1000
8542: LESS
8543: IFFALSE 8567
// patrol := patrol diff patrol [ i ] ;
8545: LD_ADDR_EXP 17
8549: PUSH
8550: LD_EXP 17
8554: PUSH
8555: LD_EXP 17
8559: PUSH
8560: LD_VAR 0 1
8564: ARRAY
8565: DIFF
8566: ST_TO_ADDR
// end ;
8567: GO 8326
8569: POP
8570: POP
// end ;
8571: PPOPN 1
8573: END
// every 0 0$10 do
8574: GO 8576
8576: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8577: LD_INT 42000
8579: PUSH
8580: LD_INT 37800
8582: PUSH
8583: LD_INT 33600
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: LD_EXP 1
8595: ARRAY
8596: PPUSH
8597: CALL_OW 67
// if not contact_am then
8601: LD_EXP 16
8605: NOT
8606: IFFALSE 8616
// contact_am := true ;
8608: LD_ADDR_EXP 16
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// end ; end_of_file
8616: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8617: LD_INT 0
8619: PPUSH
// comp_tested := false ;
8620: LD_ADDR_EXP 22
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sikorski_run := false ;
8628: LD_ADDR_EXP 23
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// InGameOn ;
8636: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8640: LD_INT 5
8642: PPUSH
8643: LD_INT 4
8645: PPUSH
8646: CALL_OW 86
// wait ( 0 0$2 ) ;
8650: LD_INT 70
8652: PPUSH
8653: CALL_OW 67
// CenterOnUnits ( commander ) ;
8657: LD_EXP 3
8661: PPUSH
8662: CALL_OW 85
// wait ( 0 0$01 ) ;
8666: LD_INT 35
8668: PPUSH
8669: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8673: LD_EXP 2
8677: PPUSH
8678: LD_STRING Dpop1
8680: PPUSH
8681: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8685: LD_EXP 3
8689: PPUSH
8690: LD_STRING Dcomm1
8692: PPUSH
8693: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8697: LD_EXP 2
8701: PPUSH
8702: LD_STRING Dpop2
8704: PPUSH
8705: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8709: LD_EXP 3
8713: PPUSH
8714: LD_STRING Dcomm2
8716: PPUSH
8717: CALL_OW 88
// InGameOff ;
8721: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8725: LD_STRING T1
8727: PPUSH
8728: CALL_OW 337
// end ;
8732: LD_VAR 0 1
8736: RET
// every 0 0$01 trigger timer > 2 2$01 do
8737: LD_EXP 24
8741: PUSH
8742: LD_INT 4235
8744: GREATER
8745: IFFALSE 8762
8747: GO 8749
8749: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8750: LD_EXP 5
8754: PPUSH
8755: LD_STRING DKap1
8757: PPUSH
8758: CALL_OW 94
// end ;
8762: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8763: LD_EXP 24
8767: PUSH
8768: LD_INT 46200
8770: PUSH
8771: LD_INT 52500
8773: PUSH
8774: LD_INT 63000
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: LD_EXP 1
8786: ARRAY
8787: GREATER
8788: IFFALSE 9155
8790: GO 8792
8792: DISABLE
8793: LD_INT 0
8795: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8796: LD_EXP 5
8800: PPUSH
8801: LD_STRING DKap2
8803: PPUSH
8804: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8808: LD_INT 10
8810: PPUSH
8811: CALL_OW 67
// Say ( commander , Dcommk ) ;
8815: LD_EXP 3
8819: PPUSH
8820: LD_STRING Dcommk
8822: PPUSH
8823: CALL_OW 88
// Wait ( 0 0$44 ) ;
8827: LD_INT 1540
8829: PPUSH
8830: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8834: LD_EXP 5
8838: PPUSH
8839: LD_INT 3
8841: PPUSH
8842: LD_INT 0
8844: PPUSH
8845: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8849: LD_EXP 5
8853: PPUSH
8854: CALL_OW 87
// Wait ( 0 0$10 ) ;
8858: LD_INT 350
8860: PPUSH
8861: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8865: LD_INT 6
8867: PUSH
8868: LD_INT 7
8870: PUSH
8871: LD_INT 8
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: LD_EXP 1
8883: ARRAY
8884: PPUSH
8885: CALL 7928 0 1
// Wait ( 2 2$00 ) ;
8889: LD_INT 4200
8891: PPUSH
8892: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8896: LD_INT 33
8898: PUSH
8899: LD_INT 2
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: LD_INT 34
8911: PUSH
8912: LD_INT 13
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 69
8931: PUSH
8932: LD_INT 3
8934: LESS
8935: IFFALSE 8946
// Wait ( 0 0$01 ) ;
8937: LD_INT 35
8939: PPUSH
8940: CALL_OW 67
8944: GO 8896
// uc_side := 4 ;
8946: LD_ADDR_OWVAR 20
8950: PUSH
8951: LD_INT 4
8953: ST_TO_ADDR
// uc_nation := 1 ;
8954: LD_ADDR_OWVAR 21
8958: PUSH
8959: LD_INT 1
8961: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8962: LD_ADDR_VAR 0 1
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_INT 4
8974: PUSH
8975: LD_INT 5
8977: PUSH
8978: LD_INT 6
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: LD_EXP 1
8990: ARRAY
8991: PUSH
8992: FOR_TO
8993: IFFALSE 9035
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
8995: LD_INT 1
8997: PPUSH
8998: LD_INT 5
9000: PUSH
9001: LD_INT 6
9003: PUSH
9004: LD_INT 7
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: PUSH
9012: LD_EXP 1
9016: ARRAY
9017: PPUSH
9018: CALL 734 0 2
9022: PPUSH
9023: LD_INT 4
9025: PPUSH
9026: LD_INT 0
9028: PPUSH
9029: CALL_OW 49
9033: GO 8992
9035: POP
9036: POP
// sikorski_ar := true ;
9037: LD_ADDR_EXP 12
9041: PUSH
9042: LD_INT 1
9044: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9045: LD_EXP 9
9049: PPUSH
9050: LD_STRING DSik1
9052: PPUSH
9053: CALL_OW 94
// Wait ( 0 0$30 ) ;
9057: LD_INT 1050
9059: PPUSH
9060: CALL_OW 67
// uc_side := 4 ;
9064: LD_ADDR_OWVAR 20
9068: PUSH
9069: LD_INT 4
9071: ST_TO_ADDR
// uc_nation := 1 ;
9072: LD_ADDR_OWVAR 21
9076: PUSH
9077: LD_INT 1
9079: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_INT 3
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: LD_INT 4
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_EXP 1
9108: ARRAY
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9153
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9113: LD_INT 1
9115: PPUSH
9116: LD_INT 5
9118: PUSH
9119: LD_INT 6
9121: PUSH
9122: LD_INT 7
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: PUSH
9130: LD_EXP 1
9134: ARRAY
9135: PPUSH
9136: CALL 734 0 2
9140: PPUSH
9141: LD_INT 13
9143: PPUSH
9144: LD_INT 0
9146: PPUSH
9147: CALL_OW 49
9151: GO 9110
9153: POP
9154: POP
// end ;
9155: PPOPN 1
9157: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9158: LD_EXP 9
9162: PPUSH
9163: CALL_OW 256
9167: PUSH
9168: LD_INT 650
9170: LESS
9171: IFFALSE 9253
9173: GO 9175
9175: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9176: LD_EXP 9
9180: PPUSH
9181: LD_STRING DSik2
9183: PPUSH
9184: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9188: LD_EXP 9
9192: PPUSH
9193: CALL_OW 300
9197: IFFALSE 9253
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9199: LD_EXP 9
9203: PPUSH
9204: LD_INT 2
9206: PPUSH
9207: CALL_OW 113
// Wait ( 0 0$01 ) ;
9211: LD_INT 35
9213: PPUSH
9214: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9218: LD_EXP 9
9222: PPUSH
9223: LD_INT 2
9225: PPUSH
9226: CALL_OW 308
9230: IFFALSE 9251
// begin RemoveUnit ( sikorski ) ;
9232: LD_EXP 9
9236: PPUSH
9237: CALL_OW 64
// break ;
9241: GO 9253
// sikorski_run := true ;
9243: LD_ADDR_EXP 23
9247: PUSH
9248: LD_INT 1
9250: ST_TO_ADDR
// end ; end ;
9251: GO 9188
// end ;
9253: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9254: LD_EXP 9
9258: PPUSH
9259: CALL_OW 256
9263: PUSH
9264: LD_INT 1000
9266: LESS
9267: IFFALSE 9284
9269: GO 9271
9271: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9272: LD_EXP 9
9276: PPUSH
9277: LD_STRING DSkik3
9279: PPUSH
9280: CALL_OW 88
9284: END
// every 1 1$45 + 0 0$15 do
9285: GO 9287
9287: DISABLE
// begin enable ;
9288: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9289: LD_INT 1
9291: PPUSH
9292: LD_INT 5
9294: PPUSH
9295: CALL_OW 12
9299: PPUSH
9300: LD_INT 8
9302: PPUSH
9303: LD_INT 1
9305: PPUSH
9306: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9310: LD_INT 350
9312: PPUSH
9313: LD_INT 1295
9315: PPUSH
9316: CALL_OW 12
9320: PPUSH
9321: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9325: LD_INT 1
9327: PPUSH
9328: LD_INT 5
9330: PPUSH
9331: CALL_OW 12
9335: PPUSH
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9343: LD_INT 350
9345: PPUSH
9346: LD_INT 1050
9348: PPUSH
9349: CALL_OW 12
9353: PPUSH
9354: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9358: LD_EXP 24
9362: PUSH
9363: LD_INT 25200
9365: PUSH
9366: LD_INT 23100
9368: PUSH
9369: LD_INT 21000
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PUSH
9377: LD_EXP 1
9381: ARRAY
9382: LESSEQUAL
9383: IFFALSE 9406
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9385: LD_INT 1
9387: PPUSH
9388: LD_INT 5
9390: PPUSH
9391: CALL_OW 12
9395: PPUSH
9396: LD_INT 8
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 55
// end ;
9406: END
// export timer ; every 1 do
9407: GO 9409
9409: DISABLE
// timer := 0 0$00 ;
9410: LD_ADDR_EXP 24
9414: PUSH
9415: LD_INT 0
9417: ST_TO_ADDR
9418: END
// every 0 0$01 do
9419: GO 9421
9421: DISABLE
// begin enable ;
9422: ENABLE
// Display_Strings := [ #tick , timer ] ;
9423: LD_ADDR_OWVAR 47
9427: PUSH
9428: LD_STRING #tick
9430: PUSH
9431: LD_EXP 24
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9440: LD_ADDR_EXP 24
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: LD_INT 35
9452: PLUS
9453: ST_TO_ADDR
// end ; end_of_file
9454: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
9455: LD_INT 0
9457: PPUSH
// ar_miner := 81 ;
9458: LD_ADDR_EXP 32
9462: PUSH
9463: LD_INT 81
9465: ST_TO_ADDR
// ar_crane := 88 ;
9466: LD_ADDR_EXP 31
9470: PUSH
9471: LD_INT 88
9473: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9474: LD_ADDR_EXP 26
9478: PUSH
9479: LD_INT 89
9481: ST_TO_ADDR
// us_hack := 99 ;
9482: LD_ADDR_EXP 27
9486: PUSH
9487: LD_INT 99
9489: ST_TO_ADDR
// us_artillery := 97 ;
9490: LD_ADDR_EXP 28
9494: PUSH
9495: LD_INT 97
9497: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9498: LD_ADDR_EXP 29
9502: PUSH
9503: LD_INT 91
9505: ST_TO_ADDR
// ar_mortar := 92 ;
9506: LD_ADDR_EXP 30
9510: PUSH
9511: LD_INT 92
9513: ST_TO_ADDR
// ru_radar := 98 ;
9514: LD_ADDR_EXP 25
9518: PUSH
9519: LD_INT 98
9521: ST_TO_ADDR
// tech_Artillery := 80 ;
9522: LD_ADDR_EXP 33
9526: PUSH
9527: LD_INT 80
9529: ST_TO_ADDR
// tech_RadMat := 81 ;
9530: LD_ADDR_EXP 34
9534: PUSH
9535: LD_INT 81
9537: ST_TO_ADDR
// tech_BasicTools := 82 ;
9538: LD_ADDR_EXP 35
9542: PUSH
9543: LD_INT 82
9545: ST_TO_ADDR
// tech_Cargo := 83 ;
9546: LD_ADDR_EXP 36
9550: PUSH
9551: LD_INT 83
9553: ST_TO_ADDR
// tech_Track := 84 ;
9554: LD_ADDR_EXP 37
9558: PUSH
9559: LD_INT 84
9561: ST_TO_ADDR
// tech_Crane := 85 ;
9562: LD_ADDR_EXP 38
9566: PUSH
9567: LD_INT 85
9569: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9570: LD_ADDR_EXP 39
9574: PUSH
9575: LD_INT 86
9577: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9578: LD_ADDR_EXP 40
9582: PUSH
9583: LD_INT 87
9585: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
9586: LD_ADDR_EXP 41
9590: PUSH
9591: LD_INT 88
9593: ST_TO_ADDR
// class_mastodont := 31 ;
9594: LD_ADDR_EXP 42
9598: PUSH
9599: LD_INT 31
9601: ST_TO_ADDR
// class_horse := 21 ;
9602: LD_ADDR_EXP 43
9606: PUSH
9607: LD_INT 21
9609: ST_TO_ADDR
// end ;
9610: LD_VAR 0 1
9614: RET
// every 1 do
9615: GO 9617
9617: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
9618: CALL 9455 0 0
9622: END
// every 0 0$1 do
9623: GO 9625
9625: DISABLE
// begin enable ;
9626: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9627: LD_STRING updateTimer(
9629: PUSH
9630: LD_OWVAR 1
9634: STR
9635: PUSH
9636: LD_STRING );
9638: STR
9639: PPUSH
9640: CALL_OW 559
// end ;
9644: END
// on MapStart ( p ) do begin if streamModeActive then
9645: LD_EXP 44
9649: IFFALSE 9658
// DefineStreamItems ( true ) ;
9651: LD_INT 1
9653: PPUSH
9654: CALL 11306 0 1
// UpdateFactoryWaypoints ( ) ;
9658: CALL 24890 0 0
// end ;
9662: PPOPN 1
9664: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9665: LD_INT 0
9667: PPUSH
// if p2 = 100 then
9668: LD_VAR 0 2
9672: PUSH
9673: LD_INT 100
9675: EQUAL
9676: IFFALSE 10679
// begin if not StreamModeActive then
9678: LD_EXP 44
9682: NOT
9683: IFFALSE 9693
// StreamModeActive := true ;
9685: LD_ADDR_EXP 44
9689: PUSH
9690: LD_INT 1
9692: ST_TO_ADDR
// if p3 = 0 then
9693: LD_VAR 0 3
9697: PUSH
9698: LD_INT 0
9700: EQUAL
9701: IFFALSE 9707
// InitStreamMode ;
9703: CALL 10842 0 0
// if p3 = 1 then
9707: LD_VAR 0 3
9711: PUSH
9712: LD_INT 1
9714: EQUAL
9715: IFFALSE 9725
// sRocket := true ;
9717: LD_ADDR_EXP 49
9721: PUSH
9722: LD_INT 1
9724: ST_TO_ADDR
// if p3 = 2 then
9725: LD_VAR 0 3
9729: PUSH
9730: LD_INT 2
9732: EQUAL
9733: IFFALSE 9743
// sSpeed := true ;
9735: LD_ADDR_EXP 48
9739: PUSH
9740: LD_INT 1
9742: ST_TO_ADDR
// if p3 = 3 then
9743: LD_VAR 0 3
9747: PUSH
9748: LD_INT 3
9750: EQUAL
9751: IFFALSE 9761
// sEngine := true ;
9753: LD_ADDR_EXP 50
9757: PUSH
9758: LD_INT 1
9760: ST_TO_ADDR
// if p3 = 4 then
9761: LD_VAR 0 3
9765: PUSH
9766: LD_INT 4
9768: EQUAL
9769: IFFALSE 9779
// sSpec := true ;
9771: LD_ADDR_EXP 47
9775: PUSH
9776: LD_INT 1
9778: ST_TO_ADDR
// if p3 = 5 then
9779: LD_VAR 0 3
9783: PUSH
9784: LD_INT 5
9786: EQUAL
9787: IFFALSE 9797
// sLevel := true ;
9789: LD_ADDR_EXP 51
9793: PUSH
9794: LD_INT 1
9796: ST_TO_ADDR
// if p3 = 6 then
9797: LD_VAR 0 3
9801: PUSH
9802: LD_INT 6
9804: EQUAL
9805: IFFALSE 9815
// sArmoury := true ;
9807: LD_ADDR_EXP 52
9811: PUSH
9812: LD_INT 1
9814: ST_TO_ADDR
// if p3 = 7 then
9815: LD_VAR 0 3
9819: PUSH
9820: LD_INT 7
9822: EQUAL
9823: IFFALSE 9833
// sRadar := true ;
9825: LD_ADDR_EXP 53
9829: PUSH
9830: LD_INT 1
9832: ST_TO_ADDR
// if p3 = 8 then
9833: LD_VAR 0 3
9837: PUSH
9838: LD_INT 8
9840: EQUAL
9841: IFFALSE 9851
// sBunker := true ;
9843: LD_ADDR_EXP 54
9847: PUSH
9848: LD_INT 1
9850: ST_TO_ADDR
// if p3 = 9 then
9851: LD_VAR 0 3
9855: PUSH
9856: LD_INT 9
9858: EQUAL
9859: IFFALSE 9869
// sHack := true ;
9861: LD_ADDR_EXP 55
9865: PUSH
9866: LD_INT 1
9868: ST_TO_ADDR
// if p3 = 10 then
9869: LD_VAR 0 3
9873: PUSH
9874: LD_INT 10
9876: EQUAL
9877: IFFALSE 9887
// sFire := true ;
9879: LD_ADDR_EXP 56
9883: PUSH
9884: LD_INT 1
9886: ST_TO_ADDR
// if p3 = 11 then
9887: LD_VAR 0 3
9891: PUSH
9892: LD_INT 11
9894: EQUAL
9895: IFFALSE 9905
// sRefresh := true ;
9897: LD_ADDR_EXP 57
9901: PUSH
9902: LD_INT 1
9904: ST_TO_ADDR
// if p3 = 12 then
9905: LD_VAR 0 3
9909: PUSH
9910: LD_INT 12
9912: EQUAL
9913: IFFALSE 9923
// sExp := true ;
9915: LD_ADDR_EXP 58
9919: PUSH
9920: LD_INT 1
9922: ST_TO_ADDR
// if p3 = 13 then
9923: LD_VAR 0 3
9927: PUSH
9928: LD_INT 13
9930: EQUAL
9931: IFFALSE 9941
// sDepot := true ;
9933: LD_ADDR_EXP 59
9937: PUSH
9938: LD_INT 1
9940: ST_TO_ADDR
// if p3 = 14 then
9941: LD_VAR 0 3
9945: PUSH
9946: LD_INT 14
9948: EQUAL
9949: IFFALSE 9959
// sFlag := true ;
9951: LD_ADDR_EXP 60
9955: PUSH
9956: LD_INT 1
9958: ST_TO_ADDR
// if p3 = 15 then
9959: LD_VAR 0 3
9963: PUSH
9964: LD_INT 15
9966: EQUAL
9967: IFFALSE 9977
// sKamikadze := true ;
9969: LD_ADDR_EXP 68
9973: PUSH
9974: LD_INT 1
9976: ST_TO_ADDR
// if p3 = 16 then
9977: LD_VAR 0 3
9981: PUSH
9982: LD_INT 16
9984: EQUAL
9985: IFFALSE 9995
// sTroll := true ;
9987: LD_ADDR_EXP 69
9991: PUSH
9992: LD_INT 1
9994: ST_TO_ADDR
// if p3 = 17 then
9995: LD_VAR 0 3
9999: PUSH
10000: LD_INT 17
10002: EQUAL
10003: IFFALSE 10013
// sSlow := true ;
10005: LD_ADDR_EXP 70
10009: PUSH
10010: LD_INT 1
10012: ST_TO_ADDR
// if p3 = 18 then
10013: LD_VAR 0 3
10017: PUSH
10018: LD_INT 18
10020: EQUAL
10021: IFFALSE 10031
// sLack := true ;
10023: LD_ADDR_EXP 71
10027: PUSH
10028: LD_INT 1
10030: ST_TO_ADDR
// if p3 = 19 then
10031: LD_VAR 0 3
10035: PUSH
10036: LD_INT 19
10038: EQUAL
10039: IFFALSE 10049
// sTank := true ;
10041: LD_ADDR_EXP 73
10045: PUSH
10046: LD_INT 1
10048: ST_TO_ADDR
// if p3 = 20 then
10049: LD_VAR 0 3
10053: PUSH
10054: LD_INT 20
10056: EQUAL
10057: IFFALSE 10067
// sRemote := true ;
10059: LD_ADDR_EXP 74
10063: PUSH
10064: LD_INT 1
10066: ST_TO_ADDR
// if p3 = 21 then
10067: LD_VAR 0 3
10071: PUSH
10072: LD_INT 21
10074: EQUAL
10075: IFFALSE 10085
// sPowell := true ;
10077: LD_ADDR_EXP 75
10081: PUSH
10082: LD_INT 1
10084: ST_TO_ADDR
// if p3 = 22 then
10085: LD_VAR 0 3
10089: PUSH
10090: LD_INT 22
10092: EQUAL
10093: IFFALSE 10103
// sTeleport := true ;
10095: LD_ADDR_EXP 78
10099: PUSH
10100: LD_INT 1
10102: ST_TO_ADDR
// if p3 = 23 then
10103: LD_VAR 0 3
10107: PUSH
10108: LD_INT 23
10110: EQUAL
10111: IFFALSE 10121
// sOilTower := true ;
10113: LD_ADDR_EXP 80
10117: PUSH
10118: LD_INT 1
10120: ST_TO_ADDR
// if p3 = 24 then
10121: LD_VAR 0 3
10125: PUSH
10126: LD_INT 24
10128: EQUAL
10129: IFFALSE 10139
// sShovel := true ;
10131: LD_ADDR_EXP 81
10135: PUSH
10136: LD_INT 1
10138: ST_TO_ADDR
// if p3 = 25 then
10139: LD_VAR 0 3
10143: PUSH
10144: LD_INT 25
10146: EQUAL
10147: IFFALSE 10157
// sSheik := true ;
10149: LD_ADDR_EXP 82
10153: PUSH
10154: LD_INT 1
10156: ST_TO_ADDR
// if p3 = 26 then
10157: LD_VAR 0 3
10161: PUSH
10162: LD_INT 26
10164: EQUAL
10165: IFFALSE 10175
// sEarthquake := true ;
10167: LD_ADDR_EXP 84
10171: PUSH
10172: LD_INT 1
10174: ST_TO_ADDR
// if p3 = 27 then
10175: LD_VAR 0 3
10179: PUSH
10180: LD_INT 27
10182: EQUAL
10183: IFFALSE 10193
// sAI := true ;
10185: LD_ADDR_EXP 85
10189: PUSH
10190: LD_INT 1
10192: ST_TO_ADDR
// if p3 = 28 then
10193: LD_VAR 0 3
10197: PUSH
10198: LD_INT 28
10200: EQUAL
10201: IFFALSE 10211
// sCargo := true ;
10203: LD_ADDR_EXP 88
10207: PUSH
10208: LD_INT 1
10210: ST_TO_ADDR
// if p3 = 29 then
10211: LD_VAR 0 3
10215: PUSH
10216: LD_INT 29
10218: EQUAL
10219: IFFALSE 10229
// sDLaser := true ;
10221: LD_ADDR_EXP 89
10225: PUSH
10226: LD_INT 1
10228: ST_TO_ADDR
// if p3 = 30 then
10229: LD_VAR 0 3
10233: PUSH
10234: LD_INT 30
10236: EQUAL
10237: IFFALSE 10247
// sExchange := true ;
10239: LD_ADDR_EXP 90
10243: PUSH
10244: LD_INT 1
10246: ST_TO_ADDR
// if p3 = 31 then
10247: LD_VAR 0 3
10251: PUSH
10252: LD_INT 31
10254: EQUAL
10255: IFFALSE 10265
// sFac := true ;
10257: LD_ADDR_EXP 91
10261: PUSH
10262: LD_INT 1
10264: ST_TO_ADDR
// if p3 = 32 then
10265: LD_VAR 0 3
10269: PUSH
10270: LD_INT 32
10272: EQUAL
10273: IFFALSE 10283
// sPower := true ;
10275: LD_ADDR_EXP 92
10279: PUSH
10280: LD_INT 1
10282: ST_TO_ADDR
// if p3 = 33 then
10283: LD_VAR 0 3
10287: PUSH
10288: LD_INT 33
10290: EQUAL
10291: IFFALSE 10301
// sRandom := true ;
10293: LD_ADDR_EXP 93
10297: PUSH
10298: LD_INT 1
10300: ST_TO_ADDR
// if p3 = 34 then
10301: LD_VAR 0 3
10305: PUSH
10306: LD_INT 34
10308: EQUAL
10309: IFFALSE 10319
// sShield := true ;
10311: LD_ADDR_EXP 94
10315: PUSH
10316: LD_INT 1
10318: ST_TO_ADDR
// if p3 = 35 then
10319: LD_VAR 0 3
10323: PUSH
10324: LD_INT 35
10326: EQUAL
10327: IFFALSE 10337
// sTime := true ;
10329: LD_ADDR_EXP 95
10333: PUSH
10334: LD_INT 1
10336: ST_TO_ADDR
// if p3 = 36 then
10337: LD_VAR 0 3
10341: PUSH
10342: LD_INT 36
10344: EQUAL
10345: IFFALSE 10355
// sTools := true ;
10347: LD_ADDR_EXP 96
10351: PUSH
10352: LD_INT 1
10354: ST_TO_ADDR
// if p3 = 101 then
10355: LD_VAR 0 3
10359: PUSH
10360: LD_INT 101
10362: EQUAL
10363: IFFALSE 10373
// sSold := true ;
10365: LD_ADDR_EXP 61
10369: PUSH
10370: LD_INT 1
10372: ST_TO_ADDR
// if p3 = 102 then
10373: LD_VAR 0 3
10377: PUSH
10378: LD_INT 102
10380: EQUAL
10381: IFFALSE 10391
// sDiff := true ;
10383: LD_ADDR_EXP 62
10387: PUSH
10388: LD_INT 1
10390: ST_TO_ADDR
// if p3 = 103 then
10391: LD_VAR 0 3
10395: PUSH
10396: LD_INT 103
10398: EQUAL
10399: IFFALSE 10409
// sFog := true ;
10401: LD_ADDR_EXP 65
10405: PUSH
10406: LD_INT 1
10408: ST_TO_ADDR
// if p3 = 104 then
10409: LD_VAR 0 3
10413: PUSH
10414: LD_INT 104
10416: EQUAL
10417: IFFALSE 10427
// sReset := true ;
10419: LD_ADDR_EXP 66
10423: PUSH
10424: LD_INT 1
10426: ST_TO_ADDR
// if p3 = 105 then
10427: LD_VAR 0 3
10431: PUSH
10432: LD_INT 105
10434: EQUAL
10435: IFFALSE 10445
// sSun := true ;
10437: LD_ADDR_EXP 67
10441: PUSH
10442: LD_INT 1
10444: ST_TO_ADDR
// if p3 = 106 then
10445: LD_VAR 0 3
10449: PUSH
10450: LD_INT 106
10452: EQUAL
10453: IFFALSE 10463
// sTiger := true ;
10455: LD_ADDR_EXP 63
10459: PUSH
10460: LD_INT 1
10462: ST_TO_ADDR
// if p3 = 107 then
10463: LD_VAR 0 3
10467: PUSH
10468: LD_INT 107
10470: EQUAL
10471: IFFALSE 10481
// sBomb := true ;
10473: LD_ADDR_EXP 64
10477: PUSH
10478: LD_INT 1
10480: ST_TO_ADDR
// if p3 = 108 then
10481: LD_VAR 0 3
10485: PUSH
10486: LD_INT 108
10488: EQUAL
10489: IFFALSE 10499
// sWound := true ;
10491: LD_ADDR_EXP 72
10495: PUSH
10496: LD_INT 1
10498: ST_TO_ADDR
// if p3 = 109 then
10499: LD_VAR 0 3
10503: PUSH
10504: LD_INT 109
10506: EQUAL
10507: IFFALSE 10517
// sBetray := true ;
10509: LD_ADDR_EXP 76
10513: PUSH
10514: LD_INT 1
10516: ST_TO_ADDR
// if p3 = 110 then
10517: LD_VAR 0 3
10521: PUSH
10522: LD_INT 110
10524: EQUAL
10525: IFFALSE 10535
// sContamin := true ;
10527: LD_ADDR_EXP 77
10531: PUSH
10532: LD_INT 1
10534: ST_TO_ADDR
// if p3 = 111 then
10535: LD_VAR 0 3
10539: PUSH
10540: LD_INT 111
10542: EQUAL
10543: IFFALSE 10553
// sOil := true ;
10545: LD_ADDR_EXP 79
10549: PUSH
10550: LD_INT 1
10552: ST_TO_ADDR
// if p3 = 112 then
10553: LD_VAR 0 3
10557: PUSH
10558: LD_INT 112
10560: EQUAL
10561: IFFALSE 10571
// sStu := true ;
10563: LD_ADDR_EXP 83
10567: PUSH
10568: LD_INT 1
10570: ST_TO_ADDR
// if p3 = 113 then
10571: LD_VAR 0 3
10575: PUSH
10576: LD_INT 113
10578: EQUAL
10579: IFFALSE 10589
// sBazooka := true ;
10581: LD_ADDR_EXP 86
10585: PUSH
10586: LD_INT 1
10588: ST_TO_ADDR
// if p3 = 114 then
10589: LD_VAR 0 3
10593: PUSH
10594: LD_INT 114
10596: EQUAL
10597: IFFALSE 10607
// sMortar := true ;
10599: LD_ADDR_EXP 87
10603: PUSH
10604: LD_INT 1
10606: ST_TO_ADDR
// if p3 = 115 then
10607: LD_VAR 0 3
10611: PUSH
10612: LD_INT 115
10614: EQUAL
10615: IFFALSE 10625
// sRanger := true ;
10617: LD_ADDR_EXP 97
10621: PUSH
10622: LD_INT 1
10624: ST_TO_ADDR
// if p3 = 116 then
10625: LD_VAR 0 3
10629: PUSH
10630: LD_INT 116
10632: EQUAL
10633: IFFALSE 10643
// sComputer := true ;
10635: LD_ADDR_EXP 98
10639: PUSH
10640: LD_INT 1
10642: ST_TO_ADDR
// if p3 = 117 then
10643: LD_VAR 0 3
10647: PUSH
10648: LD_INT 117
10650: EQUAL
10651: IFFALSE 10661
// s30 := true ;
10653: LD_ADDR_EXP 99
10657: PUSH
10658: LD_INT 1
10660: ST_TO_ADDR
// if p3 = 118 then
10661: LD_VAR 0 3
10665: PUSH
10666: LD_INT 118
10668: EQUAL
10669: IFFALSE 10679
// s60 := true ;
10671: LD_ADDR_EXP 100
10675: PUSH
10676: LD_INT 1
10678: ST_TO_ADDR
// end ; if p2 = 101 then
10679: LD_VAR 0 2
10683: PUSH
10684: LD_INT 101
10686: EQUAL
10687: IFFALSE 10815
// begin case p3 of 1 :
10689: LD_VAR 0 3
10693: PUSH
10694: LD_INT 1
10696: DOUBLE
10697: EQUAL
10698: IFTRUE 10702
10700: GO 10709
10702: POP
// hHackUnlimitedResources ; 2 :
10703: CALL 22913 0 0
10707: GO 10815
10709: LD_INT 2
10711: DOUBLE
10712: EQUAL
10713: IFTRUE 10717
10715: GO 10724
10717: POP
// hHackSetLevel10 ; 3 :
10718: CALL 23046 0 0
10722: GO 10815
10724: LD_INT 3
10726: DOUBLE
10727: EQUAL
10728: IFTRUE 10732
10730: GO 10739
10732: POP
// hHackSetLevel10YourUnits ; 4 :
10733: CALL 23131 0 0
10737: GO 10815
10739: LD_INT 4
10741: DOUBLE
10742: EQUAL
10743: IFTRUE 10747
10745: GO 10754
10747: POP
// hHackInvincible ; 5 :
10748: CALL 23579 0 0
10752: GO 10815
10754: LD_INT 5
10756: DOUBLE
10757: EQUAL
10758: IFTRUE 10762
10760: GO 10769
10762: POP
// hHackInvisible ; 6 :
10763: CALL 23690 0 0
10767: GO 10815
10769: LD_INT 6
10771: DOUBLE
10772: EQUAL
10773: IFTRUE 10777
10775: GO 10784
10777: POP
// hHackChangeYourSide ; 7 :
10778: CALL 23747 0 0
10782: GO 10815
10784: LD_INT 7
10786: DOUBLE
10787: EQUAL
10788: IFTRUE 10792
10790: GO 10799
10792: POP
// hHackChangeUnitSide ; 8 :
10793: CALL 23789 0 0
10797: GO 10815
10799: LD_INT 8
10801: DOUBLE
10802: EQUAL
10803: IFTRUE 10807
10805: GO 10814
10807: POP
// hHackFog ; end ;
10808: CALL 23890 0 0
10812: GO 10815
10814: POP
// end ; end ;
10815: LD_VAR 0 7
10819: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
10820: GO 10822
10822: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10823: LD_STRING initStreamRollete();
10825: PPUSH
10826: CALL_OW 559
// InitStreamMode ;
10830: CALL 10842 0 0
// DefineStreamItems ( false ) ;
10834: LD_INT 0
10836: PPUSH
10837: CALL 11306 0 1
// end ;
10841: END
// function InitStreamMode ; begin
10842: LD_INT 0
10844: PPUSH
// streamModeActive := false ;
10845: LD_ADDR_EXP 44
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// normalCounter := 36 ;
10853: LD_ADDR_EXP 45
10857: PUSH
10858: LD_INT 36
10860: ST_TO_ADDR
// hardcoreCounter := 18 ;
10861: LD_ADDR_EXP 46
10865: PUSH
10866: LD_INT 18
10868: ST_TO_ADDR
// sRocket := false ;
10869: LD_ADDR_EXP 49
10873: PUSH
10874: LD_INT 0
10876: ST_TO_ADDR
// sSpeed := false ;
10877: LD_ADDR_EXP 48
10881: PUSH
10882: LD_INT 0
10884: ST_TO_ADDR
// sEngine := false ;
10885: LD_ADDR_EXP 50
10889: PUSH
10890: LD_INT 0
10892: ST_TO_ADDR
// sSpec := false ;
10893: LD_ADDR_EXP 47
10897: PUSH
10898: LD_INT 0
10900: ST_TO_ADDR
// sLevel := false ;
10901: LD_ADDR_EXP 51
10905: PUSH
10906: LD_INT 0
10908: ST_TO_ADDR
// sArmoury := false ;
10909: LD_ADDR_EXP 52
10913: PUSH
10914: LD_INT 0
10916: ST_TO_ADDR
// sRadar := false ;
10917: LD_ADDR_EXP 53
10921: PUSH
10922: LD_INT 0
10924: ST_TO_ADDR
// sBunker := false ;
10925: LD_ADDR_EXP 54
10929: PUSH
10930: LD_INT 0
10932: ST_TO_ADDR
// sHack := false ;
10933: LD_ADDR_EXP 55
10937: PUSH
10938: LD_INT 0
10940: ST_TO_ADDR
// sFire := false ;
10941: LD_ADDR_EXP 56
10945: PUSH
10946: LD_INT 0
10948: ST_TO_ADDR
// sRefresh := false ;
10949: LD_ADDR_EXP 57
10953: PUSH
10954: LD_INT 0
10956: ST_TO_ADDR
// sExp := false ;
10957: LD_ADDR_EXP 58
10961: PUSH
10962: LD_INT 0
10964: ST_TO_ADDR
// sDepot := false ;
10965: LD_ADDR_EXP 59
10969: PUSH
10970: LD_INT 0
10972: ST_TO_ADDR
// sFlag := false ;
10973: LD_ADDR_EXP 60
10977: PUSH
10978: LD_INT 0
10980: ST_TO_ADDR
// sKamikadze := false ;
10981: LD_ADDR_EXP 68
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// sTroll := false ;
10989: LD_ADDR_EXP 69
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// sSlow := false ;
10997: LD_ADDR_EXP 70
11001: PUSH
11002: LD_INT 0
11004: ST_TO_ADDR
// sLack := false ;
11005: LD_ADDR_EXP 71
11009: PUSH
11010: LD_INT 0
11012: ST_TO_ADDR
// sTank := false ;
11013: LD_ADDR_EXP 73
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// sRemote := false ;
11021: LD_ADDR_EXP 74
11025: PUSH
11026: LD_INT 0
11028: ST_TO_ADDR
// sPowell := false ;
11029: LD_ADDR_EXP 75
11033: PUSH
11034: LD_INT 0
11036: ST_TO_ADDR
// sTeleport := false ;
11037: LD_ADDR_EXP 78
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// sOilTower := false ;
11045: LD_ADDR_EXP 80
11049: PUSH
11050: LD_INT 0
11052: ST_TO_ADDR
// sShovel := false ;
11053: LD_ADDR_EXP 81
11057: PUSH
11058: LD_INT 0
11060: ST_TO_ADDR
// sSheik := false ;
11061: LD_ADDR_EXP 82
11065: PUSH
11066: LD_INT 0
11068: ST_TO_ADDR
// sEarthquake := false ;
11069: LD_ADDR_EXP 84
11073: PUSH
11074: LD_INT 0
11076: ST_TO_ADDR
// sAI := false ;
11077: LD_ADDR_EXP 85
11081: PUSH
11082: LD_INT 0
11084: ST_TO_ADDR
// sCargo := false ;
11085: LD_ADDR_EXP 88
11089: PUSH
11090: LD_INT 0
11092: ST_TO_ADDR
// sDLaser := false ;
11093: LD_ADDR_EXP 89
11097: PUSH
11098: LD_INT 0
11100: ST_TO_ADDR
// sExchange := false ;
11101: LD_ADDR_EXP 90
11105: PUSH
11106: LD_INT 0
11108: ST_TO_ADDR
// sFac := false ;
11109: LD_ADDR_EXP 91
11113: PUSH
11114: LD_INT 0
11116: ST_TO_ADDR
// sPower := false ;
11117: LD_ADDR_EXP 92
11121: PUSH
11122: LD_INT 0
11124: ST_TO_ADDR
// sRandom := false ;
11125: LD_ADDR_EXP 93
11129: PUSH
11130: LD_INT 0
11132: ST_TO_ADDR
// sShield := false ;
11133: LD_ADDR_EXP 94
11137: PUSH
11138: LD_INT 0
11140: ST_TO_ADDR
// sTime := false ;
11141: LD_ADDR_EXP 95
11145: PUSH
11146: LD_INT 0
11148: ST_TO_ADDR
// sTools := false ;
11149: LD_ADDR_EXP 96
11153: PUSH
11154: LD_INT 0
11156: ST_TO_ADDR
// sSold := false ;
11157: LD_ADDR_EXP 61
11161: PUSH
11162: LD_INT 0
11164: ST_TO_ADDR
// sDiff := false ;
11165: LD_ADDR_EXP 62
11169: PUSH
11170: LD_INT 0
11172: ST_TO_ADDR
// sFog := false ;
11173: LD_ADDR_EXP 65
11177: PUSH
11178: LD_INT 0
11180: ST_TO_ADDR
// sReset := false ;
11181: LD_ADDR_EXP 66
11185: PUSH
11186: LD_INT 0
11188: ST_TO_ADDR
// sSun := false ;
11189: LD_ADDR_EXP 67
11193: PUSH
11194: LD_INT 0
11196: ST_TO_ADDR
// sTiger := false ;
11197: LD_ADDR_EXP 63
11201: PUSH
11202: LD_INT 0
11204: ST_TO_ADDR
// sBomb := false ;
11205: LD_ADDR_EXP 64
11209: PUSH
11210: LD_INT 0
11212: ST_TO_ADDR
// sWound := false ;
11213: LD_ADDR_EXP 72
11217: PUSH
11218: LD_INT 0
11220: ST_TO_ADDR
// sBetray := false ;
11221: LD_ADDR_EXP 76
11225: PUSH
11226: LD_INT 0
11228: ST_TO_ADDR
// sContamin := false ;
11229: LD_ADDR_EXP 77
11233: PUSH
11234: LD_INT 0
11236: ST_TO_ADDR
// sOil := false ;
11237: LD_ADDR_EXP 79
11241: PUSH
11242: LD_INT 0
11244: ST_TO_ADDR
// sStu := false ;
11245: LD_ADDR_EXP 83
11249: PUSH
11250: LD_INT 0
11252: ST_TO_ADDR
// sBazooka := false ;
11253: LD_ADDR_EXP 86
11257: PUSH
11258: LD_INT 0
11260: ST_TO_ADDR
// sMortar := false ;
11261: LD_ADDR_EXP 87
11265: PUSH
11266: LD_INT 0
11268: ST_TO_ADDR
// sRanger := false ;
11269: LD_ADDR_EXP 97
11273: PUSH
11274: LD_INT 0
11276: ST_TO_ADDR
// sComputer := false ;
11277: LD_ADDR_EXP 98
11281: PUSH
11282: LD_INT 0
11284: ST_TO_ADDR
// s30 := false ;
11285: LD_ADDR_EXP 99
11289: PUSH
11290: LD_INT 0
11292: ST_TO_ADDR
// s60 := false ;
11293: LD_ADDR_EXP 100
11297: PUSH
11298: LD_INT 0
11300: ST_TO_ADDR
// end ;
11301: LD_VAR 0 1
11305: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11306: LD_INT 0
11308: PPUSH
11309: PPUSH
11310: PPUSH
11311: PPUSH
11312: PPUSH
11313: PPUSH
11314: PPUSH
// result := [ ] ;
11315: LD_ADDR_VAR 0 2
11319: PUSH
11320: EMPTY
11321: ST_TO_ADDR
// if campaign_id = 1 then
11322: LD_OWVAR 69
11326: PUSH
11327: LD_INT 1
11329: EQUAL
11330: IFFALSE 14496
// begin case mission_number of 1 :
11332: LD_OWVAR 70
11336: PUSH
11337: LD_INT 1
11339: DOUBLE
11340: EQUAL
11341: IFTRUE 11345
11343: GO 11421
11345: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11346: LD_ADDR_VAR 0 2
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: LD_INT 4
11356: PUSH
11357: LD_INT 11
11359: PUSH
11360: LD_INT 12
11362: PUSH
11363: LD_INT 15
11365: PUSH
11366: LD_INT 16
11368: PUSH
11369: LD_INT 22
11371: PUSH
11372: LD_INT 23
11374: PUSH
11375: LD_INT 26
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 101
11391: PUSH
11392: LD_INT 102
11394: PUSH
11395: LD_INT 106
11397: PUSH
11398: LD_INT 116
11400: PUSH
11401: LD_INT 117
11403: PUSH
11404: LD_INT 118
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: ST_TO_ADDR
11419: GO 14494
11421: LD_INT 2
11423: DOUBLE
11424: EQUAL
11425: IFTRUE 11429
11427: GO 11513
11429: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11430: LD_ADDR_VAR 0 2
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: LD_INT 4
11440: PUSH
11441: LD_INT 11
11443: PUSH
11444: LD_INT 12
11446: PUSH
11447: LD_INT 15
11449: PUSH
11450: LD_INT 16
11452: PUSH
11453: LD_INT 22
11455: PUSH
11456: LD_INT 23
11458: PUSH
11459: LD_INT 26
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 101
11475: PUSH
11476: LD_INT 102
11478: PUSH
11479: LD_INT 105
11481: PUSH
11482: LD_INT 106
11484: PUSH
11485: LD_INT 108
11487: PUSH
11488: LD_INT 116
11490: PUSH
11491: LD_INT 117
11493: PUSH
11494: LD_INT 118
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: ST_TO_ADDR
11511: GO 14494
11513: LD_INT 3
11515: DOUBLE
11516: EQUAL
11517: IFTRUE 11521
11519: GO 11609
11521: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11522: LD_ADDR_VAR 0 2
11526: PUSH
11527: LD_INT 2
11529: PUSH
11530: LD_INT 4
11532: PUSH
11533: LD_INT 5
11535: PUSH
11536: LD_INT 11
11538: PUSH
11539: LD_INT 12
11541: PUSH
11542: LD_INT 15
11544: PUSH
11545: LD_INT 16
11547: PUSH
11548: LD_INT 22
11550: PUSH
11551: LD_INT 26
11553: PUSH
11554: LD_INT 36
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 101
11571: PUSH
11572: LD_INT 102
11574: PUSH
11575: LD_INT 105
11577: PUSH
11578: LD_INT 106
11580: PUSH
11581: LD_INT 108
11583: PUSH
11584: LD_INT 116
11586: PUSH
11587: LD_INT 117
11589: PUSH
11590: LD_INT 118
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: ST_TO_ADDR
11607: GO 14494
11609: LD_INT 4
11611: DOUBLE
11612: EQUAL
11613: IFTRUE 11617
11615: GO 11713
11617: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11618: LD_ADDR_VAR 0 2
11622: PUSH
11623: LD_INT 2
11625: PUSH
11626: LD_INT 4
11628: PUSH
11629: LD_INT 5
11631: PUSH
11632: LD_INT 8
11634: PUSH
11635: LD_INT 11
11637: PUSH
11638: LD_INT 12
11640: PUSH
11641: LD_INT 15
11643: PUSH
11644: LD_INT 16
11646: PUSH
11647: LD_INT 22
11649: PUSH
11650: LD_INT 23
11652: PUSH
11653: LD_INT 26
11655: PUSH
11656: LD_INT 36
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 101
11675: PUSH
11676: LD_INT 102
11678: PUSH
11679: LD_INT 105
11681: PUSH
11682: LD_INT 106
11684: PUSH
11685: LD_INT 108
11687: PUSH
11688: LD_INT 116
11690: PUSH
11691: LD_INT 117
11693: PUSH
11694: LD_INT 118
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: ST_TO_ADDR
11711: GO 14494
11713: LD_INT 5
11715: DOUBLE
11716: EQUAL
11717: IFTRUE 11721
11719: GO 11833
11721: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11722: LD_ADDR_VAR 0 2
11726: PUSH
11727: LD_INT 2
11729: PUSH
11730: LD_INT 4
11732: PUSH
11733: LD_INT 5
11735: PUSH
11736: LD_INT 6
11738: PUSH
11739: LD_INT 8
11741: PUSH
11742: LD_INT 11
11744: PUSH
11745: LD_INT 12
11747: PUSH
11748: LD_INT 15
11750: PUSH
11751: LD_INT 16
11753: PUSH
11754: LD_INT 22
11756: PUSH
11757: LD_INT 23
11759: PUSH
11760: LD_INT 25
11762: PUSH
11763: LD_INT 26
11765: PUSH
11766: LD_INT 36
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 101
11787: PUSH
11788: LD_INT 102
11790: PUSH
11791: LD_INT 105
11793: PUSH
11794: LD_INT 106
11796: PUSH
11797: LD_INT 108
11799: PUSH
11800: LD_INT 109
11802: PUSH
11803: LD_INT 112
11805: PUSH
11806: LD_INT 116
11808: PUSH
11809: LD_INT 117
11811: PUSH
11812: LD_INT 118
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: ST_TO_ADDR
11831: GO 14494
11833: LD_INT 6
11835: DOUBLE
11836: EQUAL
11837: IFTRUE 11841
11839: GO 11973
11841: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11842: LD_ADDR_VAR 0 2
11846: PUSH
11847: LD_INT 2
11849: PUSH
11850: LD_INT 4
11852: PUSH
11853: LD_INT 5
11855: PUSH
11856: LD_INT 6
11858: PUSH
11859: LD_INT 8
11861: PUSH
11862: LD_INT 11
11864: PUSH
11865: LD_INT 12
11867: PUSH
11868: LD_INT 15
11870: PUSH
11871: LD_INT 16
11873: PUSH
11874: LD_INT 20
11876: PUSH
11877: LD_INT 21
11879: PUSH
11880: LD_INT 22
11882: PUSH
11883: LD_INT 23
11885: PUSH
11886: LD_INT 25
11888: PUSH
11889: LD_INT 26
11891: PUSH
11892: LD_INT 30
11894: PUSH
11895: LD_INT 31
11897: PUSH
11898: LD_INT 32
11900: PUSH
11901: LD_INT 36
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 101
11927: PUSH
11928: LD_INT 102
11930: PUSH
11931: LD_INT 105
11933: PUSH
11934: LD_INT 106
11936: PUSH
11937: LD_INT 108
11939: PUSH
11940: LD_INT 109
11942: PUSH
11943: LD_INT 112
11945: PUSH
11946: LD_INT 116
11948: PUSH
11949: LD_INT 117
11951: PUSH
11952: LD_INT 118
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: ST_TO_ADDR
11971: GO 14494
11973: LD_INT 7
11975: DOUBLE
11976: EQUAL
11977: IFTRUE 11981
11979: GO 12093
11981: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11982: LD_ADDR_VAR 0 2
11986: PUSH
11987: LD_INT 2
11989: PUSH
11990: LD_INT 4
11992: PUSH
11993: LD_INT 5
11995: PUSH
11996: LD_INT 7
11998: PUSH
11999: LD_INT 11
12001: PUSH
12002: LD_INT 12
12004: PUSH
12005: LD_INT 15
12007: PUSH
12008: LD_INT 16
12010: PUSH
12011: LD_INT 20
12013: PUSH
12014: LD_INT 21
12016: PUSH
12017: LD_INT 22
12019: PUSH
12020: LD_INT 23
12022: PUSH
12023: LD_INT 25
12025: PUSH
12026: LD_INT 26
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 101
12047: PUSH
12048: LD_INT 102
12050: PUSH
12051: LD_INT 103
12053: PUSH
12054: LD_INT 105
12056: PUSH
12057: LD_INT 106
12059: PUSH
12060: LD_INT 108
12062: PUSH
12063: LD_INT 112
12065: PUSH
12066: LD_INT 116
12068: PUSH
12069: LD_INT 117
12071: PUSH
12072: LD_INT 118
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: ST_TO_ADDR
12091: GO 14494
12093: LD_INT 8
12095: DOUBLE
12096: EQUAL
12097: IFTRUE 12101
12099: GO 12241
12101: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12102: LD_ADDR_VAR 0 2
12106: PUSH
12107: LD_INT 2
12109: PUSH
12110: LD_INT 4
12112: PUSH
12113: LD_INT 5
12115: PUSH
12116: LD_INT 6
12118: PUSH
12119: LD_INT 7
12121: PUSH
12122: LD_INT 8
12124: PUSH
12125: LD_INT 11
12127: PUSH
12128: LD_INT 12
12130: PUSH
12131: LD_INT 15
12133: PUSH
12134: LD_INT 16
12136: PUSH
12137: LD_INT 20
12139: PUSH
12140: LD_INT 21
12142: PUSH
12143: LD_INT 22
12145: PUSH
12146: LD_INT 23
12148: PUSH
12149: LD_INT 25
12151: PUSH
12152: LD_INT 26
12154: PUSH
12155: LD_INT 30
12157: PUSH
12158: LD_INT 31
12160: PUSH
12161: LD_INT 32
12163: PUSH
12164: LD_INT 36
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 101
12191: PUSH
12192: LD_INT 102
12194: PUSH
12195: LD_INT 103
12197: PUSH
12198: LD_INT 105
12200: PUSH
12201: LD_INT 106
12203: PUSH
12204: LD_INT 108
12206: PUSH
12207: LD_INT 109
12209: PUSH
12210: LD_INT 112
12212: PUSH
12213: LD_INT 116
12215: PUSH
12216: LD_INT 117
12218: PUSH
12219: LD_INT 118
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: ST_TO_ADDR
12239: GO 14494
12241: LD_INT 9
12243: DOUBLE
12244: EQUAL
12245: IFTRUE 12249
12247: GO 12397
12249: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12250: LD_ADDR_VAR 0 2
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: LD_INT 4
12260: PUSH
12261: LD_INT 5
12263: PUSH
12264: LD_INT 6
12266: PUSH
12267: LD_INT 7
12269: PUSH
12270: LD_INT 8
12272: PUSH
12273: LD_INT 11
12275: PUSH
12276: LD_INT 12
12278: PUSH
12279: LD_INT 15
12281: PUSH
12282: LD_INT 16
12284: PUSH
12285: LD_INT 20
12287: PUSH
12288: LD_INT 21
12290: PUSH
12291: LD_INT 22
12293: PUSH
12294: LD_INT 23
12296: PUSH
12297: LD_INT 25
12299: PUSH
12300: LD_INT 26
12302: PUSH
12303: LD_INT 28
12305: PUSH
12306: LD_INT 30
12308: PUSH
12309: LD_INT 31
12311: PUSH
12312: LD_INT 32
12314: PUSH
12315: LD_INT 36
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 101
12343: PUSH
12344: LD_INT 102
12346: PUSH
12347: LD_INT 103
12349: PUSH
12350: LD_INT 105
12352: PUSH
12353: LD_INT 106
12355: PUSH
12356: LD_INT 108
12358: PUSH
12359: LD_INT 109
12361: PUSH
12362: LD_INT 112
12364: PUSH
12365: LD_INT 114
12367: PUSH
12368: LD_INT 116
12370: PUSH
12371: LD_INT 117
12373: PUSH
12374: LD_INT 118
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: ST_TO_ADDR
12395: GO 14494
12397: LD_INT 10
12399: DOUBLE
12400: EQUAL
12401: IFTRUE 12405
12403: GO 12601
12405: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12406: LD_ADDR_VAR 0 2
12410: PUSH
12411: LD_INT 2
12413: PUSH
12414: LD_INT 4
12416: PUSH
12417: LD_INT 5
12419: PUSH
12420: LD_INT 6
12422: PUSH
12423: LD_INT 7
12425: PUSH
12426: LD_INT 8
12428: PUSH
12429: LD_INT 9
12431: PUSH
12432: LD_INT 10
12434: PUSH
12435: LD_INT 11
12437: PUSH
12438: LD_INT 12
12440: PUSH
12441: LD_INT 13
12443: PUSH
12444: LD_INT 14
12446: PUSH
12447: LD_INT 15
12449: PUSH
12450: LD_INT 16
12452: PUSH
12453: LD_INT 17
12455: PUSH
12456: LD_INT 18
12458: PUSH
12459: LD_INT 19
12461: PUSH
12462: LD_INT 20
12464: PUSH
12465: LD_INT 21
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_INT 23
12473: PUSH
12474: LD_INT 24
12476: PUSH
12477: LD_INT 25
12479: PUSH
12480: LD_INT 26
12482: PUSH
12483: LD_INT 28
12485: PUSH
12486: LD_INT 30
12488: PUSH
12489: LD_INT 31
12491: PUSH
12492: LD_INT 32
12494: PUSH
12495: LD_INT 36
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 101
12531: PUSH
12532: LD_INT 102
12534: PUSH
12535: LD_INT 103
12537: PUSH
12538: LD_INT 104
12540: PUSH
12541: LD_INT 105
12543: PUSH
12544: LD_INT 106
12546: PUSH
12547: LD_INT 107
12549: PUSH
12550: LD_INT 108
12552: PUSH
12553: LD_INT 109
12555: PUSH
12556: LD_INT 110
12558: PUSH
12559: LD_INT 111
12561: PUSH
12562: LD_INT 112
12564: PUSH
12565: LD_INT 114
12567: PUSH
12568: LD_INT 116
12570: PUSH
12571: LD_INT 117
12573: PUSH
12574: LD_INT 118
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: ST_TO_ADDR
12599: GO 14494
12601: LD_INT 11
12603: DOUBLE
12604: EQUAL
12605: IFTRUE 12609
12607: GO 12813
12609: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12610: LD_ADDR_VAR 0 2
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: LD_INT 3
12620: PUSH
12621: LD_INT 4
12623: PUSH
12624: LD_INT 5
12626: PUSH
12627: LD_INT 6
12629: PUSH
12630: LD_INT 7
12632: PUSH
12633: LD_INT 8
12635: PUSH
12636: LD_INT 9
12638: PUSH
12639: LD_INT 10
12641: PUSH
12642: LD_INT 11
12644: PUSH
12645: LD_INT 12
12647: PUSH
12648: LD_INT 13
12650: PUSH
12651: LD_INT 14
12653: PUSH
12654: LD_INT 15
12656: PUSH
12657: LD_INT 16
12659: PUSH
12660: LD_INT 17
12662: PUSH
12663: LD_INT 18
12665: PUSH
12666: LD_INT 19
12668: PUSH
12669: LD_INT 20
12671: PUSH
12672: LD_INT 21
12674: PUSH
12675: LD_INT 22
12677: PUSH
12678: LD_INT 23
12680: PUSH
12681: LD_INT 24
12683: PUSH
12684: LD_INT 25
12686: PUSH
12687: LD_INT 26
12689: PUSH
12690: LD_INT 28
12692: PUSH
12693: LD_INT 30
12695: PUSH
12696: LD_INT 31
12698: PUSH
12699: LD_INT 32
12701: PUSH
12702: LD_INT 34
12704: PUSH
12705: LD_INT 36
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PUSH
12741: LD_INT 101
12743: PUSH
12744: LD_INT 102
12746: PUSH
12747: LD_INT 103
12749: PUSH
12750: LD_INT 104
12752: PUSH
12753: LD_INT 105
12755: PUSH
12756: LD_INT 106
12758: PUSH
12759: LD_INT 107
12761: PUSH
12762: LD_INT 108
12764: PUSH
12765: LD_INT 109
12767: PUSH
12768: LD_INT 110
12770: PUSH
12771: LD_INT 111
12773: PUSH
12774: LD_INT 112
12776: PUSH
12777: LD_INT 114
12779: PUSH
12780: LD_INT 116
12782: PUSH
12783: LD_INT 117
12785: PUSH
12786: LD_INT 118
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: ST_TO_ADDR
12811: GO 14494
12813: LD_INT 12
12815: DOUBLE
12816: EQUAL
12817: IFTRUE 12821
12819: GO 13041
12821: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12822: LD_ADDR_VAR 0 2
12826: PUSH
12827: LD_INT 1
12829: PUSH
12830: LD_INT 2
12832: PUSH
12833: LD_INT 3
12835: PUSH
12836: LD_INT 4
12838: PUSH
12839: LD_INT 5
12841: PUSH
12842: LD_INT 6
12844: PUSH
12845: LD_INT 7
12847: PUSH
12848: LD_INT 8
12850: PUSH
12851: LD_INT 9
12853: PUSH
12854: LD_INT 10
12856: PUSH
12857: LD_INT 11
12859: PUSH
12860: LD_INT 12
12862: PUSH
12863: LD_INT 13
12865: PUSH
12866: LD_INT 14
12868: PUSH
12869: LD_INT 15
12871: PUSH
12872: LD_INT 16
12874: PUSH
12875: LD_INT 17
12877: PUSH
12878: LD_INT 18
12880: PUSH
12881: LD_INT 19
12883: PUSH
12884: LD_INT 20
12886: PUSH
12887: LD_INT 21
12889: PUSH
12890: LD_INT 22
12892: PUSH
12893: LD_INT 23
12895: PUSH
12896: LD_INT 24
12898: PUSH
12899: LD_INT 25
12901: PUSH
12902: LD_INT 26
12904: PUSH
12905: LD_INT 27
12907: PUSH
12908: LD_INT 28
12910: PUSH
12911: LD_INT 30
12913: PUSH
12914: LD_INT 31
12916: PUSH
12917: LD_INT 32
12919: PUSH
12920: LD_INT 33
12922: PUSH
12923: LD_INT 34
12925: PUSH
12926: LD_INT 36
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 101
12967: PUSH
12968: LD_INT 102
12970: PUSH
12971: LD_INT 103
12973: PUSH
12974: LD_INT 104
12976: PUSH
12977: LD_INT 105
12979: PUSH
12980: LD_INT 106
12982: PUSH
12983: LD_INT 107
12985: PUSH
12986: LD_INT 108
12988: PUSH
12989: LD_INT 109
12991: PUSH
12992: LD_INT 110
12994: PUSH
12995: LD_INT 111
12997: PUSH
12998: LD_INT 112
13000: PUSH
13001: LD_INT 113
13003: PUSH
13004: LD_INT 114
13006: PUSH
13007: LD_INT 116
13009: PUSH
13010: LD_INT 117
13012: PUSH
13013: LD_INT 118
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: ST_TO_ADDR
13039: GO 14494
13041: LD_INT 13
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13257
13049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13050: LD_ADDR_VAR 0 2
13054: PUSH
13055: LD_INT 1
13057: PUSH
13058: LD_INT 2
13060: PUSH
13061: LD_INT 3
13063: PUSH
13064: LD_INT 4
13066: PUSH
13067: LD_INT 5
13069: PUSH
13070: LD_INT 8
13072: PUSH
13073: LD_INT 9
13075: PUSH
13076: LD_INT 10
13078: PUSH
13079: LD_INT 11
13081: PUSH
13082: LD_INT 12
13084: PUSH
13085: LD_INT 14
13087: PUSH
13088: LD_INT 15
13090: PUSH
13091: LD_INT 16
13093: PUSH
13094: LD_INT 17
13096: PUSH
13097: LD_INT 18
13099: PUSH
13100: LD_INT 19
13102: PUSH
13103: LD_INT 20
13105: PUSH
13106: LD_INT 21
13108: PUSH
13109: LD_INT 22
13111: PUSH
13112: LD_INT 23
13114: PUSH
13115: LD_INT 24
13117: PUSH
13118: LD_INT 25
13120: PUSH
13121: LD_INT 26
13123: PUSH
13124: LD_INT 27
13126: PUSH
13127: LD_INT 28
13129: PUSH
13130: LD_INT 30
13132: PUSH
13133: LD_INT 31
13135: PUSH
13136: LD_INT 32
13138: PUSH
13139: LD_INT 33
13141: PUSH
13142: LD_INT 34
13144: PUSH
13145: LD_INT 36
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 101
13183: PUSH
13184: LD_INT 102
13186: PUSH
13187: LD_INT 103
13189: PUSH
13190: LD_INT 104
13192: PUSH
13193: LD_INT 105
13195: PUSH
13196: LD_INT 106
13198: PUSH
13199: LD_INT 107
13201: PUSH
13202: LD_INT 108
13204: PUSH
13205: LD_INT 109
13207: PUSH
13208: LD_INT 110
13210: PUSH
13211: LD_INT 111
13213: PUSH
13214: LD_INT 112
13216: PUSH
13217: LD_INT 113
13219: PUSH
13220: LD_INT 114
13222: PUSH
13223: LD_INT 116
13225: PUSH
13226: LD_INT 117
13228: PUSH
13229: LD_INT 118
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: ST_TO_ADDR
13255: GO 14494
13257: LD_INT 14
13259: DOUBLE
13260: EQUAL
13261: IFTRUE 13265
13263: GO 13489
13265: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13266: LD_ADDR_VAR 0 2
13270: PUSH
13271: LD_INT 1
13273: PUSH
13274: LD_INT 2
13276: PUSH
13277: LD_INT 3
13279: PUSH
13280: LD_INT 4
13282: PUSH
13283: LD_INT 5
13285: PUSH
13286: LD_INT 6
13288: PUSH
13289: LD_INT 7
13291: PUSH
13292: LD_INT 8
13294: PUSH
13295: LD_INT 9
13297: PUSH
13298: LD_INT 10
13300: PUSH
13301: LD_INT 11
13303: PUSH
13304: LD_INT 12
13306: PUSH
13307: LD_INT 13
13309: PUSH
13310: LD_INT 14
13312: PUSH
13313: LD_INT 15
13315: PUSH
13316: LD_INT 16
13318: PUSH
13319: LD_INT 17
13321: PUSH
13322: LD_INT 18
13324: PUSH
13325: LD_INT 19
13327: PUSH
13328: LD_INT 20
13330: PUSH
13331: LD_INT 21
13333: PUSH
13334: LD_INT 22
13336: PUSH
13337: LD_INT 23
13339: PUSH
13340: LD_INT 24
13342: PUSH
13343: LD_INT 25
13345: PUSH
13346: LD_INT 26
13348: PUSH
13349: LD_INT 27
13351: PUSH
13352: LD_INT 28
13354: PUSH
13355: LD_INT 29
13357: PUSH
13358: LD_INT 30
13360: PUSH
13361: LD_INT 31
13363: PUSH
13364: LD_INT 32
13366: PUSH
13367: LD_INT 33
13369: PUSH
13370: LD_INT 34
13372: PUSH
13373: LD_INT 36
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 101
13415: PUSH
13416: LD_INT 102
13418: PUSH
13419: LD_INT 103
13421: PUSH
13422: LD_INT 104
13424: PUSH
13425: LD_INT 105
13427: PUSH
13428: LD_INT 106
13430: PUSH
13431: LD_INT 107
13433: PUSH
13434: LD_INT 108
13436: PUSH
13437: LD_INT 109
13439: PUSH
13440: LD_INT 110
13442: PUSH
13443: LD_INT 111
13445: PUSH
13446: LD_INT 112
13448: PUSH
13449: LD_INT 113
13451: PUSH
13452: LD_INT 114
13454: PUSH
13455: LD_INT 116
13457: PUSH
13458: LD_INT 117
13460: PUSH
13461: LD_INT 118
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: ST_TO_ADDR
13487: GO 14494
13489: LD_INT 15
13491: DOUBLE
13492: EQUAL
13493: IFTRUE 13497
13495: GO 13721
13497: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13498: LD_ADDR_VAR 0 2
13502: PUSH
13503: LD_INT 1
13505: PUSH
13506: LD_INT 2
13508: PUSH
13509: LD_INT 3
13511: PUSH
13512: LD_INT 4
13514: PUSH
13515: LD_INT 5
13517: PUSH
13518: LD_INT 6
13520: PUSH
13521: LD_INT 7
13523: PUSH
13524: LD_INT 8
13526: PUSH
13527: LD_INT 9
13529: PUSH
13530: LD_INT 10
13532: PUSH
13533: LD_INT 11
13535: PUSH
13536: LD_INT 12
13538: PUSH
13539: LD_INT 13
13541: PUSH
13542: LD_INT 14
13544: PUSH
13545: LD_INT 15
13547: PUSH
13548: LD_INT 16
13550: PUSH
13551: LD_INT 17
13553: PUSH
13554: LD_INT 18
13556: PUSH
13557: LD_INT 19
13559: PUSH
13560: LD_INT 20
13562: PUSH
13563: LD_INT 21
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_INT 23
13571: PUSH
13572: LD_INT 24
13574: PUSH
13575: LD_INT 25
13577: PUSH
13578: LD_INT 26
13580: PUSH
13581: LD_INT 27
13583: PUSH
13584: LD_INT 28
13586: PUSH
13587: LD_INT 29
13589: PUSH
13590: LD_INT 30
13592: PUSH
13593: LD_INT 31
13595: PUSH
13596: LD_INT 32
13598: PUSH
13599: LD_INT 33
13601: PUSH
13602: LD_INT 34
13604: PUSH
13605: LD_INT 36
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 101
13647: PUSH
13648: LD_INT 102
13650: PUSH
13651: LD_INT 103
13653: PUSH
13654: LD_INT 104
13656: PUSH
13657: LD_INT 105
13659: PUSH
13660: LD_INT 106
13662: PUSH
13663: LD_INT 107
13665: PUSH
13666: LD_INT 108
13668: PUSH
13669: LD_INT 109
13671: PUSH
13672: LD_INT 110
13674: PUSH
13675: LD_INT 111
13677: PUSH
13678: LD_INT 112
13680: PUSH
13681: LD_INT 113
13683: PUSH
13684: LD_INT 114
13686: PUSH
13687: LD_INT 116
13689: PUSH
13690: LD_INT 117
13692: PUSH
13693: LD_INT 118
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: ST_TO_ADDR
13719: GO 14494
13721: LD_INT 16
13723: DOUBLE
13724: EQUAL
13725: IFTRUE 13729
13727: GO 13865
13729: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13730: LD_ADDR_VAR 0 2
13734: PUSH
13735: LD_INT 2
13737: PUSH
13738: LD_INT 4
13740: PUSH
13741: LD_INT 5
13743: PUSH
13744: LD_INT 7
13746: PUSH
13747: LD_INT 11
13749: PUSH
13750: LD_INT 12
13752: PUSH
13753: LD_INT 15
13755: PUSH
13756: LD_INT 16
13758: PUSH
13759: LD_INT 20
13761: PUSH
13762: LD_INT 21
13764: PUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 23
13770: PUSH
13771: LD_INT 25
13773: PUSH
13774: LD_INT 26
13776: PUSH
13777: LD_INT 30
13779: PUSH
13780: LD_INT 31
13782: PUSH
13783: LD_INT 32
13785: PUSH
13786: LD_INT 33
13788: PUSH
13789: LD_INT 34
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 101
13815: PUSH
13816: LD_INT 102
13818: PUSH
13819: LD_INT 103
13821: PUSH
13822: LD_INT 106
13824: PUSH
13825: LD_INT 108
13827: PUSH
13828: LD_INT 112
13830: PUSH
13831: LD_INT 113
13833: PUSH
13834: LD_INT 114
13836: PUSH
13837: LD_INT 116
13839: PUSH
13840: LD_INT 117
13842: PUSH
13843: LD_INT 118
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: ST_TO_ADDR
13863: GO 14494
13865: LD_INT 17
13867: DOUBLE
13868: EQUAL
13869: IFTRUE 13873
13871: GO 14097
13873: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13874: LD_ADDR_VAR 0 2
13878: PUSH
13879: LD_INT 1
13881: PUSH
13882: LD_INT 2
13884: PUSH
13885: LD_INT 3
13887: PUSH
13888: LD_INT 4
13890: PUSH
13891: LD_INT 5
13893: PUSH
13894: LD_INT 6
13896: PUSH
13897: LD_INT 7
13899: PUSH
13900: LD_INT 8
13902: PUSH
13903: LD_INT 9
13905: PUSH
13906: LD_INT 10
13908: PUSH
13909: LD_INT 11
13911: PUSH
13912: LD_INT 12
13914: PUSH
13915: LD_INT 13
13917: PUSH
13918: LD_INT 14
13920: PUSH
13921: LD_INT 15
13923: PUSH
13924: LD_INT 16
13926: PUSH
13927: LD_INT 17
13929: PUSH
13930: LD_INT 18
13932: PUSH
13933: LD_INT 19
13935: PUSH
13936: LD_INT 20
13938: PUSH
13939: LD_INT 21
13941: PUSH
13942: LD_INT 22
13944: PUSH
13945: LD_INT 23
13947: PUSH
13948: LD_INT 24
13950: PUSH
13951: LD_INT 25
13953: PUSH
13954: LD_INT 26
13956: PUSH
13957: LD_INT 27
13959: PUSH
13960: LD_INT 28
13962: PUSH
13963: LD_INT 29
13965: PUSH
13966: LD_INT 30
13968: PUSH
13969: LD_INT 31
13971: PUSH
13972: LD_INT 32
13974: PUSH
13975: LD_INT 33
13977: PUSH
13978: LD_INT 34
13980: PUSH
13981: LD_INT 36
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 101
14023: PUSH
14024: LD_INT 102
14026: PUSH
14027: LD_INT 103
14029: PUSH
14030: LD_INT 104
14032: PUSH
14033: LD_INT 105
14035: PUSH
14036: LD_INT 106
14038: PUSH
14039: LD_INT 107
14041: PUSH
14042: LD_INT 108
14044: PUSH
14045: LD_INT 109
14047: PUSH
14048: LD_INT 110
14050: PUSH
14051: LD_INT 111
14053: PUSH
14054: LD_INT 112
14056: PUSH
14057: LD_INT 113
14059: PUSH
14060: LD_INT 114
14062: PUSH
14063: LD_INT 116
14065: PUSH
14066: LD_INT 117
14068: PUSH
14069: LD_INT 118
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: ST_TO_ADDR
14095: GO 14494
14097: LD_INT 18
14099: DOUBLE
14100: EQUAL
14101: IFTRUE 14105
14103: GO 14253
14105: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14106: LD_ADDR_VAR 0 2
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: LD_INT 4
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: LD_INT 7
14122: PUSH
14123: LD_INT 11
14125: PUSH
14126: LD_INT 12
14128: PUSH
14129: LD_INT 15
14131: PUSH
14132: LD_INT 16
14134: PUSH
14135: LD_INT 20
14137: PUSH
14138: LD_INT 21
14140: PUSH
14141: LD_INT 22
14143: PUSH
14144: LD_INT 23
14146: PUSH
14147: LD_INT 25
14149: PUSH
14150: LD_INT 26
14152: PUSH
14153: LD_INT 30
14155: PUSH
14156: LD_INT 31
14158: PUSH
14159: LD_INT 32
14161: PUSH
14162: LD_INT 33
14164: PUSH
14165: LD_INT 34
14167: PUSH
14168: LD_INT 35
14170: PUSH
14171: LD_INT 36
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 101
14199: PUSH
14200: LD_INT 102
14202: PUSH
14203: LD_INT 103
14205: PUSH
14206: LD_INT 106
14208: PUSH
14209: LD_INT 108
14211: PUSH
14212: LD_INT 112
14214: PUSH
14215: LD_INT 113
14217: PUSH
14218: LD_INT 114
14220: PUSH
14221: LD_INT 115
14223: PUSH
14224: LD_INT 116
14226: PUSH
14227: LD_INT 117
14229: PUSH
14230: LD_INT 118
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: ST_TO_ADDR
14251: GO 14494
14253: LD_INT 19
14255: DOUBLE
14256: EQUAL
14257: IFTRUE 14261
14259: GO 14493
14261: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14262: LD_ADDR_VAR 0 2
14266: PUSH
14267: LD_INT 1
14269: PUSH
14270: LD_INT 2
14272: PUSH
14273: LD_INT 3
14275: PUSH
14276: LD_INT 4
14278: PUSH
14279: LD_INT 5
14281: PUSH
14282: LD_INT 6
14284: PUSH
14285: LD_INT 7
14287: PUSH
14288: LD_INT 8
14290: PUSH
14291: LD_INT 9
14293: PUSH
14294: LD_INT 10
14296: PUSH
14297: LD_INT 11
14299: PUSH
14300: LD_INT 12
14302: PUSH
14303: LD_INT 13
14305: PUSH
14306: LD_INT 14
14308: PUSH
14309: LD_INT 15
14311: PUSH
14312: LD_INT 16
14314: PUSH
14315: LD_INT 17
14317: PUSH
14318: LD_INT 18
14320: PUSH
14321: LD_INT 19
14323: PUSH
14324: LD_INT 20
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: LD_INT 23
14335: PUSH
14336: LD_INT 24
14338: PUSH
14339: LD_INT 25
14341: PUSH
14342: LD_INT 26
14344: PUSH
14345: LD_INT 27
14347: PUSH
14348: LD_INT 28
14350: PUSH
14351: LD_INT 29
14353: PUSH
14354: LD_INT 30
14356: PUSH
14357: LD_INT 31
14359: PUSH
14360: LD_INT 32
14362: PUSH
14363: LD_INT 33
14365: PUSH
14366: LD_INT 34
14368: PUSH
14369: LD_INT 35
14371: PUSH
14372: LD_INT 36
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 101
14415: PUSH
14416: LD_INT 102
14418: PUSH
14419: LD_INT 103
14421: PUSH
14422: LD_INT 104
14424: PUSH
14425: LD_INT 105
14427: PUSH
14428: LD_INT 106
14430: PUSH
14431: LD_INT 107
14433: PUSH
14434: LD_INT 108
14436: PUSH
14437: LD_INT 109
14439: PUSH
14440: LD_INT 110
14442: PUSH
14443: LD_INT 111
14445: PUSH
14446: LD_INT 112
14448: PUSH
14449: LD_INT 113
14451: PUSH
14452: LD_INT 114
14454: PUSH
14455: LD_INT 115
14457: PUSH
14458: LD_INT 116
14460: PUSH
14461: LD_INT 117
14463: PUSH
14464: LD_INT 118
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: ST_TO_ADDR
14491: GO 14494
14493: POP
// end else
14494: GO 14725
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14496: LD_ADDR_VAR 0 2
14500: PUSH
14501: LD_INT 1
14503: PUSH
14504: LD_INT 2
14506: PUSH
14507: LD_INT 3
14509: PUSH
14510: LD_INT 4
14512: PUSH
14513: LD_INT 5
14515: PUSH
14516: LD_INT 6
14518: PUSH
14519: LD_INT 7
14521: PUSH
14522: LD_INT 8
14524: PUSH
14525: LD_INT 9
14527: PUSH
14528: LD_INT 10
14530: PUSH
14531: LD_INT 11
14533: PUSH
14534: LD_INT 12
14536: PUSH
14537: LD_INT 13
14539: PUSH
14540: LD_INT 14
14542: PUSH
14543: LD_INT 15
14545: PUSH
14546: LD_INT 16
14548: PUSH
14549: LD_INT 17
14551: PUSH
14552: LD_INT 18
14554: PUSH
14555: LD_INT 19
14557: PUSH
14558: LD_INT 20
14560: PUSH
14561: LD_INT 21
14563: PUSH
14564: LD_INT 22
14566: PUSH
14567: LD_INT 23
14569: PUSH
14570: LD_INT 24
14572: PUSH
14573: LD_INT 25
14575: PUSH
14576: LD_INT 26
14578: PUSH
14579: LD_INT 27
14581: PUSH
14582: LD_INT 28
14584: PUSH
14585: LD_INT 29
14587: PUSH
14588: LD_INT 30
14590: PUSH
14591: LD_INT 31
14593: PUSH
14594: LD_INT 32
14596: PUSH
14597: LD_INT 33
14599: PUSH
14600: LD_INT 34
14602: PUSH
14603: LD_INT 35
14605: PUSH
14606: LD_INT 36
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 101
14649: PUSH
14650: LD_INT 102
14652: PUSH
14653: LD_INT 103
14655: PUSH
14656: LD_INT 104
14658: PUSH
14659: LD_INT 105
14661: PUSH
14662: LD_INT 106
14664: PUSH
14665: LD_INT 107
14667: PUSH
14668: LD_INT 108
14670: PUSH
14671: LD_INT 109
14673: PUSH
14674: LD_INT 110
14676: PUSH
14677: LD_INT 111
14679: PUSH
14680: LD_INT 112
14682: PUSH
14683: LD_INT 113
14685: PUSH
14686: LD_INT 114
14688: PUSH
14689: LD_INT 115
14691: PUSH
14692: LD_INT 116
14694: PUSH
14695: LD_INT 117
14697: PUSH
14698: LD_INT 118
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: ST_TO_ADDR
// if result then
14725: LD_VAR 0 2
14729: IFFALSE 15515
// begin normal :=  ;
14731: LD_ADDR_VAR 0 5
14735: PUSH
14736: LD_STRING 
14738: ST_TO_ADDR
// hardcore :=  ;
14739: LD_ADDR_VAR 0 6
14743: PUSH
14744: LD_STRING 
14746: ST_TO_ADDR
// active :=  ;
14747: LD_ADDR_VAR 0 7
14751: PUSH
14752: LD_STRING 
14754: ST_TO_ADDR
// for i = 1 to normalCounter do
14755: LD_ADDR_VAR 0 8
14759: PUSH
14760: DOUBLE
14761: LD_INT 1
14763: DEC
14764: ST_TO_ADDR
14765: LD_EXP 45
14769: PUSH
14770: FOR_TO
14771: IFFALSE 14872
// begin tmp := 0 ;
14773: LD_ADDR_VAR 0 3
14777: PUSH
14778: LD_STRING 0
14780: ST_TO_ADDR
// if result [ 1 ] then
14781: LD_VAR 0 2
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: IFFALSE 14854
// if result [ 1 ] [ 1 ] = i then
14791: LD_VAR 0 2
14795: PUSH
14796: LD_INT 1
14798: ARRAY
14799: PUSH
14800: LD_INT 1
14802: ARRAY
14803: PUSH
14804: LD_VAR 0 8
14808: EQUAL
14809: IFFALSE 14854
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14811: LD_ADDR_VAR 0 2
14815: PUSH
14816: LD_VAR 0 2
14820: PPUSH
14821: LD_INT 1
14823: PPUSH
14824: LD_VAR 0 2
14828: PUSH
14829: LD_INT 1
14831: ARRAY
14832: PPUSH
14833: LD_INT 1
14835: PPUSH
14836: CALL_OW 3
14840: PPUSH
14841: CALL_OW 1
14845: ST_TO_ADDR
// tmp := 1 ;
14846: LD_ADDR_VAR 0 3
14850: PUSH
14851: LD_STRING 1
14853: ST_TO_ADDR
// end ; normal := normal & tmp ;
14854: LD_ADDR_VAR 0 5
14858: PUSH
14859: LD_VAR 0 5
14863: PUSH
14864: LD_VAR 0 3
14868: STR
14869: ST_TO_ADDR
// end ;
14870: GO 14770
14872: POP
14873: POP
// for i = 1 to hardcoreCounter do
14874: LD_ADDR_VAR 0 8
14878: PUSH
14879: DOUBLE
14880: LD_INT 1
14882: DEC
14883: ST_TO_ADDR
14884: LD_EXP 46
14888: PUSH
14889: FOR_TO
14890: IFFALSE 14995
// begin tmp := 0 ;
14892: LD_ADDR_VAR 0 3
14896: PUSH
14897: LD_STRING 0
14899: ST_TO_ADDR
// if result [ 2 ] then
14900: LD_VAR 0 2
14904: PUSH
14905: LD_INT 2
14907: ARRAY
14908: IFFALSE 14977
// if result [ 2 ] [ 1 ] = 100 + i then
14910: LD_VAR 0 2
14914: PUSH
14915: LD_INT 2
14917: ARRAY
14918: PUSH
14919: LD_INT 1
14921: ARRAY
14922: PUSH
14923: LD_INT 100
14925: PUSH
14926: LD_VAR 0 8
14930: PLUS
14931: EQUAL
14932: IFFALSE 14977
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14934: LD_ADDR_VAR 0 2
14938: PUSH
14939: LD_VAR 0 2
14943: PPUSH
14944: LD_INT 2
14946: PPUSH
14947: LD_VAR 0 2
14951: PUSH
14952: LD_INT 2
14954: ARRAY
14955: PPUSH
14956: LD_INT 1
14958: PPUSH
14959: CALL_OW 3
14963: PPUSH
14964: CALL_OW 1
14968: ST_TO_ADDR
// tmp := 1 ;
14969: LD_ADDR_VAR 0 3
14973: PUSH
14974: LD_STRING 1
14976: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14977: LD_ADDR_VAR 0 6
14981: PUSH
14982: LD_VAR 0 6
14986: PUSH
14987: LD_VAR 0 3
14991: STR
14992: ST_TO_ADDR
// end ;
14993: GO 14889
14995: POP
14996: POP
// if isGameLoad then
14997: LD_VAR 0 1
15001: IFFALSE 15476
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15003: LD_ADDR_VAR 0 4
15007: PUSH
15008: LD_EXP 49
15012: PUSH
15013: LD_EXP 48
15017: PUSH
15018: LD_EXP 50
15022: PUSH
15023: LD_EXP 47
15027: PUSH
15028: LD_EXP 51
15032: PUSH
15033: LD_EXP 52
15037: PUSH
15038: LD_EXP 53
15042: PUSH
15043: LD_EXP 54
15047: PUSH
15048: LD_EXP 55
15052: PUSH
15053: LD_EXP 56
15057: PUSH
15058: LD_EXP 57
15062: PUSH
15063: LD_EXP 58
15067: PUSH
15068: LD_EXP 59
15072: PUSH
15073: LD_EXP 60
15077: PUSH
15078: LD_EXP 68
15082: PUSH
15083: LD_EXP 69
15087: PUSH
15088: LD_EXP 70
15092: PUSH
15093: LD_EXP 71
15097: PUSH
15098: LD_EXP 73
15102: PUSH
15103: LD_EXP 74
15107: PUSH
15108: LD_EXP 75
15112: PUSH
15113: LD_EXP 78
15117: PUSH
15118: LD_EXP 80
15122: PUSH
15123: LD_EXP 81
15127: PUSH
15128: LD_EXP 82
15132: PUSH
15133: LD_EXP 84
15137: PUSH
15138: LD_EXP 85
15142: PUSH
15143: LD_EXP 88
15147: PUSH
15148: LD_EXP 89
15152: PUSH
15153: LD_EXP 90
15157: PUSH
15158: LD_EXP 91
15162: PUSH
15163: LD_EXP 92
15167: PUSH
15168: LD_EXP 93
15172: PUSH
15173: LD_EXP 94
15177: PUSH
15178: LD_EXP 95
15182: PUSH
15183: LD_EXP 96
15187: PUSH
15188: LD_EXP 61
15192: PUSH
15193: LD_EXP 62
15197: PUSH
15198: LD_EXP 65
15202: PUSH
15203: LD_EXP 66
15207: PUSH
15208: LD_EXP 67
15212: PUSH
15213: LD_EXP 63
15217: PUSH
15218: LD_EXP 64
15222: PUSH
15223: LD_EXP 72
15227: PUSH
15228: LD_EXP 76
15232: PUSH
15233: LD_EXP 77
15237: PUSH
15238: LD_EXP 79
15242: PUSH
15243: LD_EXP 83
15247: PUSH
15248: LD_EXP 86
15252: PUSH
15253: LD_EXP 87
15257: PUSH
15258: LD_EXP 97
15262: PUSH
15263: LD_EXP 98
15267: PUSH
15268: LD_EXP 99
15272: PUSH
15273: LD_EXP 100
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: ST_TO_ADDR
// tmp :=  ;
15334: LD_ADDR_VAR 0 3
15338: PUSH
15339: LD_STRING 
15341: ST_TO_ADDR
// for i = 1 to normalCounter do
15342: LD_ADDR_VAR 0 8
15346: PUSH
15347: DOUBLE
15348: LD_INT 1
15350: DEC
15351: ST_TO_ADDR
15352: LD_EXP 45
15356: PUSH
15357: FOR_TO
15358: IFFALSE 15394
// begin if flags [ i ] then
15360: LD_VAR 0 4
15364: PUSH
15365: LD_VAR 0 8
15369: ARRAY
15370: IFFALSE 15392
// tmp := tmp & i & ; ;
15372: LD_ADDR_VAR 0 3
15376: PUSH
15377: LD_VAR 0 3
15381: PUSH
15382: LD_VAR 0 8
15386: STR
15387: PUSH
15388: LD_STRING ;
15390: STR
15391: ST_TO_ADDR
// end ;
15392: GO 15357
15394: POP
15395: POP
// for i = 1 to hardcoreCounter do
15396: LD_ADDR_VAR 0 8
15400: PUSH
15401: DOUBLE
15402: LD_INT 1
15404: DEC
15405: ST_TO_ADDR
15406: LD_EXP 46
15410: PUSH
15411: FOR_TO
15412: IFFALSE 15458
// begin if flags [ normalCounter + i ] then
15414: LD_VAR 0 4
15418: PUSH
15419: LD_EXP 45
15423: PUSH
15424: LD_VAR 0 8
15428: PLUS
15429: ARRAY
15430: IFFALSE 15456
// tmp := tmp & ( 100 + i ) & ; ;
15432: LD_ADDR_VAR 0 3
15436: PUSH
15437: LD_VAR 0 3
15441: PUSH
15442: LD_INT 100
15444: PUSH
15445: LD_VAR 0 8
15449: PLUS
15450: STR
15451: PUSH
15452: LD_STRING ;
15454: STR
15455: ST_TO_ADDR
// end ;
15456: GO 15411
15458: POP
15459: POP
// if tmp then
15460: LD_VAR 0 3
15464: IFFALSE 15476
// active := tmp ;
15466: LD_ADDR_VAR 0 7
15470: PUSH
15471: LD_VAR 0 3
15475: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15476: LD_STRING getStreamItemsFromMission("
15478: PUSH
15479: LD_VAR 0 5
15483: STR
15484: PUSH
15485: LD_STRING ","
15487: STR
15488: PUSH
15489: LD_VAR 0 6
15493: STR
15494: PUSH
15495: LD_STRING ","
15497: STR
15498: PUSH
15499: LD_VAR 0 7
15503: STR
15504: PUSH
15505: LD_STRING ")
15507: STR
15508: PPUSH
15509: CALL_OW 559
// end else
15513: GO 15522
// ToLua ( getStreamItemsFromMission("","","") ) ;
15515: LD_STRING getStreamItemsFromMission("","","")
15517: PPUSH
15518: CALL_OW 559
// end ;
15522: LD_VAR 0 2
15526: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15527: LD_EXP 44
15531: PUSH
15532: LD_EXP 49
15536: AND
15537: IFFALSE 15661
15539: GO 15541
15541: DISABLE
15542: LD_INT 0
15544: PPUSH
15545: PPUSH
// begin enable ;
15546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15547: LD_ADDR_VAR 0 2
15551: PUSH
15552: LD_INT 22
15554: PUSH
15555: LD_OWVAR 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: LD_INT 34
15569: PUSH
15570: LD_INT 7
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 34
15579: PUSH
15580: LD_INT 45
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 34
15589: PUSH
15590: LD_INT 28
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 34
15599: PUSH
15600: LD_INT 47
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: ST_TO_ADDR
// if not tmp then
15623: LD_VAR 0 2
15627: NOT
15628: IFFALSE 15632
// exit ;
15630: GO 15661
// for i in tmp do
15632: LD_ADDR_VAR 0 1
15636: PUSH
15637: LD_VAR 0 2
15641: PUSH
15642: FOR_IN
15643: IFFALSE 15659
// begin SetLives ( i , 0 ) ;
15645: LD_VAR 0 1
15649: PPUSH
15650: LD_INT 0
15652: PPUSH
15653: CALL_OW 234
// end ;
15657: GO 15642
15659: POP
15660: POP
// end ;
15661: PPOPN 2
15663: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15664: LD_EXP 44
15668: PUSH
15669: LD_EXP 50
15673: AND
15674: IFFALSE 15758
15676: GO 15678
15678: DISABLE
15679: LD_INT 0
15681: PPUSH
15682: PPUSH
// begin enable ;
15683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15684: LD_ADDR_VAR 0 2
15688: PUSH
15689: LD_INT 22
15691: PUSH
15692: LD_OWVAR 2
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 32
15703: PUSH
15704: LD_INT 3
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PPUSH
15715: CALL_OW 69
15719: ST_TO_ADDR
// if not tmp then
15720: LD_VAR 0 2
15724: NOT
15725: IFFALSE 15729
// exit ;
15727: GO 15758
// for i in tmp do
15729: LD_ADDR_VAR 0 1
15733: PUSH
15734: LD_VAR 0 2
15738: PUSH
15739: FOR_IN
15740: IFFALSE 15756
// begin SetLives ( i , 0 ) ;
15742: LD_VAR 0 1
15746: PPUSH
15747: LD_INT 0
15749: PPUSH
15750: CALL_OW 234
// end ;
15754: GO 15739
15756: POP
15757: POP
// end ;
15758: PPOPN 2
15760: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15761: LD_EXP 44
15765: PUSH
15766: LD_EXP 47
15770: AND
15771: IFFALSE 15864
15773: GO 15775
15775: DISABLE
15776: LD_INT 0
15778: PPUSH
// begin enable ;
15779: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15780: LD_ADDR_VAR 0 1
15784: PUSH
15785: LD_INT 22
15787: PUSH
15788: LD_OWVAR 2
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: LD_INT 25
15802: PUSH
15803: LD_INT 5
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 25
15812: PUSH
15813: LD_INT 9
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 8
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PPUSH
15840: CALL_OW 69
15844: PUSH
15845: FOR_IN
15846: IFFALSE 15862
// begin SetClass ( i , 1 ) ;
15848: LD_VAR 0 1
15852: PPUSH
15853: LD_INT 1
15855: PPUSH
15856: CALL_OW 336
// end ;
15860: GO 15845
15862: POP
15863: POP
// end ;
15864: PPOPN 1
15866: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15867: LD_EXP 44
15871: PUSH
15872: LD_EXP 48
15876: AND
15877: PUSH
15878: LD_OWVAR 65
15882: PUSH
15883: LD_INT 7
15885: LESS
15886: AND
15887: IFFALSE 15901
15889: GO 15891
15891: DISABLE
// begin enable ;
15892: ENABLE
// game_speed := 7 ;
15893: LD_ADDR_OWVAR 65
15897: PUSH
15898: LD_INT 7
15900: ST_TO_ADDR
// end ;
15901: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15902: LD_EXP 44
15906: PUSH
15907: LD_EXP 51
15911: AND
15912: IFFALSE 16114
15914: GO 15916
15916: DISABLE
15917: LD_INT 0
15919: PPUSH
15920: PPUSH
15921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15922: LD_ADDR_VAR 0 3
15926: PUSH
15927: LD_INT 81
15929: PUSH
15930: LD_OWVAR 2
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 21
15941: PUSH
15942: LD_INT 1
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PPUSH
15953: CALL_OW 69
15957: ST_TO_ADDR
// if not tmp then
15958: LD_VAR 0 3
15962: NOT
15963: IFFALSE 15967
// exit ;
15965: GO 16114
// if tmp > 5 then
15967: LD_VAR 0 3
15971: PUSH
15972: LD_INT 5
15974: GREATER
15975: IFFALSE 15987
// k := 5 else
15977: LD_ADDR_VAR 0 2
15981: PUSH
15982: LD_INT 5
15984: ST_TO_ADDR
15985: GO 15997
// k := tmp ;
15987: LD_ADDR_VAR 0 2
15991: PUSH
15992: LD_VAR 0 3
15996: ST_TO_ADDR
// for i := 1 to k do
15997: LD_ADDR_VAR 0 1
16001: PUSH
16002: DOUBLE
16003: LD_INT 1
16005: DEC
16006: ST_TO_ADDR
16007: LD_VAR 0 2
16011: PUSH
16012: FOR_TO
16013: IFFALSE 16112
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16015: LD_VAR 0 3
16019: PUSH
16020: LD_VAR 0 1
16024: ARRAY
16025: PPUSH
16026: LD_VAR 0 1
16030: PUSH
16031: LD_INT 4
16033: MOD
16034: PUSH
16035: LD_INT 1
16037: PLUS
16038: PPUSH
16039: CALL_OW 259
16043: PUSH
16044: LD_INT 10
16046: LESS
16047: IFFALSE 16110
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16049: LD_VAR 0 3
16053: PUSH
16054: LD_VAR 0 1
16058: ARRAY
16059: PPUSH
16060: LD_VAR 0 1
16064: PUSH
16065: LD_INT 4
16067: MOD
16068: PUSH
16069: LD_INT 1
16071: PLUS
16072: PPUSH
16073: LD_VAR 0 3
16077: PUSH
16078: LD_VAR 0 1
16082: ARRAY
16083: PPUSH
16084: LD_VAR 0 1
16088: PUSH
16089: LD_INT 4
16091: MOD
16092: PUSH
16093: LD_INT 1
16095: PLUS
16096: PPUSH
16097: CALL_OW 259
16101: PUSH
16102: LD_INT 1
16104: PLUS
16105: PPUSH
16106: CALL_OW 237
16110: GO 16012
16112: POP
16113: POP
// end ;
16114: PPOPN 3
16116: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16117: LD_EXP 44
16121: PUSH
16122: LD_EXP 52
16126: AND
16127: IFFALSE 16147
16129: GO 16131
16131: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16132: LD_INT 4
16134: PPUSH
16135: LD_OWVAR 2
16139: PPUSH
16140: LD_INT 0
16142: PPUSH
16143: CALL_OW 324
16147: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16148: LD_EXP 44
16152: PUSH
16153: LD_EXP 81
16157: AND
16158: IFFALSE 16178
16160: GO 16162
16162: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16163: LD_INT 19
16165: PPUSH
16166: LD_OWVAR 2
16170: PPUSH
16171: LD_INT 0
16173: PPUSH
16174: CALL_OW 324
16178: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16179: LD_EXP 44
16183: PUSH
16184: LD_EXP 53
16188: AND
16189: IFFALSE 16291
16191: GO 16193
16193: DISABLE
16194: LD_INT 0
16196: PPUSH
16197: PPUSH
// begin enable ;
16198: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_OWVAR 2
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 2
16218: PUSH
16219: LD_INT 34
16221: PUSH
16222: LD_INT 11
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 34
16231: PUSH
16232: LD_INT 30
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: LIST
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: ST_TO_ADDR
// if not tmp then
16253: LD_VAR 0 2
16257: NOT
16258: IFFALSE 16262
// exit ;
16260: GO 16291
// for i in tmp do
16262: LD_ADDR_VAR 0 1
16266: PUSH
16267: LD_VAR 0 2
16271: PUSH
16272: FOR_IN
16273: IFFALSE 16289
// begin SetLives ( i , 0 ) ;
16275: LD_VAR 0 1
16279: PPUSH
16280: LD_INT 0
16282: PPUSH
16283: CALL_OW 234
// end ;
16287: GO 16272
16289: POP
16290: POP
// end ;
16291: PPOPN 2
16293: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16294: LD_EXP 44
16298: PUSH
16299: LD_EXP 54
16303: AND
16304: IFFALSE 16324
16306: GO 16308
16308: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16309: LD_INT 32
16311: PPUSH
16312: LD_OWVAR 2
16316: PPUSH
16317: LD_INT 0
16319: PPUSH
16320: CALL_OW 324
16324: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16325: LD_EXP 44
16329: PUSH
16330: LD_EXP 55
16334: AND
16335: IFFALSE 16516
16337: GO 16339
16339: DISABLE
16340: LD_INT 0
16342: PPUSH
16343: PPUSH
16344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16345: LD_ADDR_VAR 0 2
16349: PUSH
16350: LD_INT 22
16352: PUSH
16353: LD_OWVAR 2
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 33
16364: PUSH
16365: LD_INT 3
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 69
16380: ST_TO_ADDR
// if not tmp then
16381: LD_VAR 0 2
16385: NOT
16386: IFFALSE 16390
// exit ;
16388: GO 16516
// side := 0 ;
16390: LD_ADDR_VAR 0 3
16394: PUSH
16395: LD_INT 0
16397: ST_TO_ADDR
// for i := 1 to 8 do
16398: LD_ADDR_VAR 0 1
16402: PUSH
16403: DOUBLE
16404: LD_INT 1
16406: DEC
16407: ST_TO_ADDR
16408: LD_INT 8
16410: PUSH
16411: FOR_TO
16412: IFFALSE 16460
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16414: LD_OWVAR 2
16418: PUSH
16419: LD_VAR 0 1
16423: NONEQUAL
16424: PUSH
16425: LD_OWVAR 2
16429: PPUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 81
16439: PUSH
16440: LD_INT 2
16442: EQUAL
16443: AND
16444: IFFALSE 16458
// begin side := i ;
16446: LD_ADDR_VAR 0 3
16450: PUSH
16451: LD_VAR 0 1
16455: ST_TO_ADDR
// break ;
16456: GO 16460
// end ;
16458: GO 16411
16460: POP
16461: POP
// if not side then
16462: LD_VAR 0 3
16466: NOT
16467: IFFALSE 16471
// exit ;
16469: GO 16516
// for i := 1 to tmp do
16471: LD_ADDR_VAR 0 1
16475: PUSH
16476: DOUBLE
16477: LD_INT 1
16479: DEC
16480: ST_TO_ADDR
16481: LD_VAR 0 2
16485: PUSH
16486: FOR_TO
16487: IFFALSE 16514
// if Prob ( 60 ) then
16489: LD_INT 60
16491: PPUSH
16492: CALL_OW 13
16496: IFFALSE 16512
// SetSide ( i , side ) ;
16498: LD_VAR 0 1
16502: PPUSH
16503: LD_VAR 0 3
16507: PPUSH
16508: CALL_OW 235
16512: GO 16486
16514: POP
16515: POP
// end ;
16516: PPOPN 3
16518: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16519: LD_EXP 44
16523: PUSH
16524: LD_EXP 57
16528: AND
16529: IFFALSE 16648
16531: GO 16533
16533: DISABLE
16534: LD_INT 0
16536: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16537: LD_ADDR_VAR 0 1
16541: PUSH
16542: LD_INT 22
16544: PUSH
16545: LD_OWVAR 2
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 21
16556: PUSH
16557: LD_INT 1
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 3
16566: PUSH
16567: LD_INT 23
16569: PUSH
16570: LD_INT 0
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: LIST
16585: PPUSH
16586: CALL_OW 69
16590: PUSH
16591: FOR_IN
16592: IFFALSE 16646
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16594: LD_VAR 0 1
16598: PPUSH
16599: CALL_OW 257
16603: PUSH
16604: LD_INT 1
16606: PUSH
16607: LD_INT 2
16609: PUSH
16610: LD_INT 3
16612: PUSH
16613: LD_INT 4
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: IN
16622: IFFALSE 16644
// SetClass ( un , rand ( 1 , 4 ) ) ;
16624: LD_VAR 0 1
16628: PPUSH
16629: LD_INT 1
16631: PPUSH
16632: LD_INT 4
16634: PPUSH
16635: CALL_OW 12
16639: PPUSH
16640: CALL_OW 336
16644: GO 16591
16646: POP
16647: POP
// end ;
16648: PPOPN 1
16650: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16651: LD_EXP 44
16655: PUSH
16656: LD_EXP 56
16660: AND
16661: IFFALSE 16740
16663: GO 16665
16665: DISABLE
16666: LD_INT 0
16668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16669: LD_ADDR_VAR 0 1
16673: PUSH
16674: LD_INT 22
16676: PUSH
16677: LD_OWVAR 2
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 21
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PPUSH
16700: CALL_OW 69
16704: ST_TO_ADDR
// if not tmp then
16705: LD_VAR 0 1
16709: NOT
16710: IFFALSE 16714
// exit ;
16712: GO 16740
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16714: LD_VAR 0 1
16718: PUSH
16719: LD_INT 1
16721: PPUSH
16722: LD_VAR 0 1
16726: PPUSH
16727: CALL_OW 12
16731: ARRAY
16732: PPUSH
16733: LD_INT 100
16735: PPUSH
16736: CALL_OW 234
// end ;
16740: PPOPN 1
16742: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16743: LD_EXP 44
16747: PUSH
16748: LD_EXP 58
16752: AND
16753: IFFALSE 16851
16755: GO 16757
16757: DISABLE
16758: LD_INT 0
16760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16761: LD_ADDR_VAR 0 1
16765: PUSH
16766: LD_INT 22
16768: PUSH
16769: LD_OWVAR 2
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 21
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PPUSH
16792: CALL_OW 69
16796: ST_TO_ADDR
// if not tmp then
16797: LD_VAR 0 1
16801: NOT
16802: IFFALSE 16806
// exit ;
16804: GO 16851
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16806: LD_VAR 0 1
16810: PUSH
16811: LD_INT 1
16813: PPUSH
16814: LD_VAR 0 1
16818: PPUSH
16819: CALL_OW 12
16823: ARRAY
16824: PPUSH
16825: LD_INT 1
16827: PPUSH
16828: LD_INT 4
16830: PPUSH
16831: CALL_OW 12
16835: PPUSH
16836: LD_INT 3000
16838: PPUSH
16839: LD_INT 9000
16841: PPUSH
16842: CALL_OW 12
16846: PPUSH
16847: CALL_OW 492
// end ;
16851: PPOPN 1
16853: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16854: LD_EXP 44
16858: PUSH
16859: LD_EXP 59
16863: AND
16864: IFFALSE 16884
16866: GO 16868
16868: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16869: LD_INT 1
16871: PPUSH
16872: LD_OWVAR 2
16876: PPUSH
16877: LD_INT 0
16879: PPUSH
16880: CALL_OW 324
16884: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16885: LD_EXP 44
16889: PUSH
16890: LD_EXP 60
16894: AND
16895: IFFALSE 16978
16897: GO 16899
16899: DISABLE
16900: LD_INT 0
16902: PPUSH
16903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16904: LD_ADDR_VAR 0 2
16908: PUSH
16909: LD_INT 22
16911: PUSH
16912: LD_OWVAR 2
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 21
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PPUSH
16935: CALL_OW 69
16939: ST_TO_ADDR
// if not tmp then
16940: LD_VAR 0 2
16944: NOT
16945: IFFALSE 16949
// exit ;
16947: GO 16978
// for i in tmp do
16949: LD_ADDR_VAR 0 1
16953: PUSH
16954: LD_VAR 0 2
16958: PUSH
16959: FOR_IN
16960: IFFALSE 16976
// SetBLevel ( i , 10 ) ;
16962: LD_VAR 0 1
16966: PPUSH
16967: LD_INT 10
16969: PPUSH
16970: CALL_OW 241
16974: GO 16959
16976: POP
16977: POP
// end ;
16978: PPOPN 2
16980: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16981: LD_EXP 44
16985: PUSH
16986: LD_EXP 61
16990: AND
16991: IFFALSE 17102
16993: GO 16995
16995: DISABLE
16996: LD_INT 0
16998: PPUSH
16999: PPUSH
17000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17001: LD_ADDR_VAR 0 3
17005: PUSH
17006: LD_INT 22
17008: PUSH
17009: LD_OWVAR 2
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 25
17020: PUSH
17021: LD_INT 1
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: ST_TO_ADDR
// if not tmp then
17037: LD_VAR 0 3
17041: NOT
17042: IFFALSE 17046
// exit ;
17044: GO 17102
// un := tmp [ rand ( 1 , tmp ) ] ;
17046: LD_ADDR_VAR 0 2
17050: PUSH
17051: LD_VAR 0 3
17055: PUSH
17056: LD_INT 1
17058: PPUSH
17059: LD_VAR 0 3
17063: PPUSH
17064: CALL_OW 12
17068: ARRAY
17069: ST_TO_ADDR
// if Crawls ( un ) then
17070: LD_VAR 0 2
17074: PPUSH
17075: CALL_OW 318
17079: IFFALSE 17090
// ComWalk ( un ) ;
17081: LD_VAR 0 2
17085: PPUSH
17086: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17090: LD_VAR 0 2
17094: PPUSH
17095: LD_INT 5
17097: PPUSH
17098: CALL_OW 336
// end ;
17102: PPOPN 3
17104: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17105: LD_EXP 44
17109: PUSH
17110: LD_EXP 62
17114: AND
17115: PUSH
17116: LD_OWVAR 67
17120: PUSH
17121: LD_INT 4
17123: LESS
17124: AND
17125: IFFALSE 17144
17127: GO 17129
17129: DISABLE
// begin Difficulty := Difficulty + 1 ;
17130: LD_ADDR_OWVAR 67
17134: PUSH
17135: LD_OWVAR 67
17139: PUSH
17140: LD_INT 1
17142: PLUS
17143: ST_TO_ADDR
// end ;
17144: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17145: LD_EXP 44
17149: PUSH
17150: LD_EXP 63
17154: AND
17155: IFFALSE 17258
17157: GO 17159
17159: DISABLE
17160: LD_INT 0
17162: PPUSH
// begin for i := 1 to 5 do
17163: LD_ADDR_VAR 0 1
17167: PUSH
17168: DOUBLE
17169: LD_INT 1
17171: DEC
17172: ST_TO_ADDR
17173: LD_INT 5
17175: PUSH
17176: FOR_TO
17177: IFFALSE 17256
// begin uc_nation := nation_nature ;
17179: LD_ADDR_OWVAR 21
17183: PUSH
17184: LD_INT 0
17186: ST_TO_ADDR
// uc_side := 0 ;
17187: LD_ADDR_OWVAR 20
17191: PUSH
17192: LD_INT 0
17194: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17195: LD_ADDR_OWVAR 29
17199: PUSH
17200: LD_INT 12
17202: PUSH
17203: LD_INT 12
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: ST_TO_ADDR
// hc_agressivity := 20 ;
17210: LD_ADDR_OWVAR 35
17214: PUSH
17215: LD_INT 20
17217: ST_TO_ADDR
// hc_class := class_tiger ;
17218: LD_ADDR_OWVAR 28
17222: PUSH
17223: LD_INT 14
17225: ST_TO_ADDR
// hc_gallery :=  ;
17226: LD_ADDR_OWVAR 33
17230: PUSH
17231: LD_STRING 
17233: ST_TO_ADDR
// hc_name :=  ;
17234: LD_ADDR_OWVAR 26
17238: PUSH
17239: LD_STRING 
17241: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17242: CALL_OW 44
17246: PPUSH
17247: LD_INT 0
17249: PPUSH
17250: CALL_OW 51
// end ;
17254: GO 17176
17256: POP
17257: POP
// end ;
17258: PPOPN 1
17260: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17261: LD_EXP 44
17265: PUSH
17266: LD_EXP 64
17270: AND
17271: IFFALSE 17280
17273: GO 17275
17275: DISABLE
// StreamSibBomb ;
17276: CALL 17281 0 0
17280: END
// export function StreamSibBomb ; var i , x , y ; begin
17281: LD_INT 0
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
// result := false ;
17287: LD_ADDR_VAR 0 1
17291: PUSH
17292: LD_INT 0
17294: ST_TO_ADDR
// for i := 1 to 16 do
17295: LD_ADDR_VAR 0 2
17299: PUSH
17300: DOUBLE
17301: LD_INT 1
17303: DEC
17304: ST_TO_ADDR
17305: LD_INT 16
17307: PUSH
17308: FOR_TO
17309: IFFALSE 17508
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_INT 10
17318: PUSH
17319: LD_INT 20
17321: PUSH
17322: LD_INT 30
17324: PUSH
17325: LD_INT 40
17327: PUSH
17328: LD_INT 50
17330: PUSH
17331: LD_INT 60
17333: PUSH
17334: LD_INT 70
17336: PUSH
17337: LD_INT 80
17339: PUSH
17340: LD_INT 90
17342: PUSH
17343: LD_INT 100
17345: PUSH
17346: LD_INT 110
17348: PUSH
17349: LD_INT 120
17351: PUSH
17352: LD_INT 130
17354: PUSH
17355: LD_INT 140
17357: PUSH
17358: LD_INT 150
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 1
17380: PPUSH
17381: LD_INT 15
17383: PPUSH
17384: CALL_OW 12
17388: ARRAY
17389: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17390: LD_ADDR_VAR 0 4
17394: PUSH
17395: LD_INT 10
17397: PUSH
17398: LD_INT 20
17400: PUSH
17401: LD_INT 30
17403: PUSH
17404: LD_INT 40
17406: PUSH
17407: LD_INT 50
17409: PUSH
17410: LD_INT 60
17412: PUSH
17413: LD_INT 70
17415: PUSH
17416: LD_INT 80
17418: PUSH
17419: LD_INT 90
17421: PUSH
17422: LD_INT 100
17424: PUSH
17425: LD_INT 110
17427: PUSH
17428: LD_INT 120
17430: PUSH
17431: LD_INT 130
17433: PUSH
17434: LD_INT 140
17436: PUSH
17437: LD_INT 150
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 1
17459: PPUSH
17460: LD_INT 15
17462: PPUSH
17463: CALL_OW 12
17467: ARRAY
17468: ST_TO_ADDR
// if ValidHex ( x , y ) then
17469: LD_VAR 0 3
17473: PPUSH
17474: LD_VAR 0 4
17478: PPUSH
17479: CALL_OW 488
17483: IFFALSE 17506
// begin result := [ x , y ] ;
17485: LD_ADDR_VAR 0 1
17489: PUSH
17490: LD_VAR 0 3
17494: PUSH
17495: LD_VAR 0 4
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: ST_TO_ADDR
// break ;
17504: GO 17508
// end ; end ;
17506: GO 17308
17508: POP
17509: POP
// if result then
17510: LD_VAR 0 1
17514: IFFALSE 17574
// begin ToLua ( playSibBomb() ) ;
17516: LD_STRING playSibBomb()
17518: PPUSH
17519: CALL_OW 559
// wait ( 0 0$14 ) ;
17523: LD_INT 490
17525: PPUSH
17526: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17530: LD_VAR 0 1
17534: PUSH
17535: LD_INT 1
17537: ARRAY
17538: PPUSH
17539: LD_VAR 0 1
17543: PUSH
17544: LD_INT 2
17546: ARRAY
17547: PPUSH
17548: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17552: LD_VAR 0 1
17556: PUSH
17557: LD_INT 1
17559: ARRAY
17560: PPUSH
17561: LD_VAR 0 1
17565: PUSH
17566: LD_INT 2
17568: ARRAY
17569: PPUSH
17570: CALL_OW 429
// end ; end ;
17574: LD_VAR 0 1
17578: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17579: LD_EXP 44
17583: PUSH
17584: LD_EXP 66
17588: AND
17589: IFFALSE 17601
17591: GO 17593
17593: DISABLE
// YouLost (  ) ;
17594: LD_STRING 
17596: PPUSH
17597: CALL_OW 104
17601: END
// every 0 0$1 trigger StreamModeActive and sFog do
17602: LD_EXP 44
17606: PUSH
17607: LD_EXP 65
17611: AND
17612: IFFALSE 17626
17614: GO 17616
17616: DISABLE
// FogOff ( your_side ) ;
17617: LD_OWVAR 2
17621: PPUSH
17622: CALL_OW 344
17626: END
// every 0 0$1 trigger StreamModeActive and sSun do
17627: LD_EXP 44
17631: PUSH
17632: LD_EXP 67
17636: AND
17637: IFFALSE 17665
17639: GO 17641
17641: DISABLE
// begin solar_recharge_percent := 0 ;
17642: LD_ADDR_OWVAR 79
17646: PUSH
17647: LD_INT 0
17649: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17650: LD_INT 10500
17652: PPUSH
17653: CALL_OW 67
// solar_recharge_percent := 100 ;
17657: LD_ADDR_OWVAR 79
17661: PUSH
17662: LD_INT 100
17664: ST_TO_ADDR
// end ;
17665: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17666: LD_EXP 44
17670: PUSH
17671: LD_EXP 68
17675: AND
17676: IFFALSE 17915
17678: GO 17680
17680: DISABLE
17681: LD_INT 0
17683: PPUSH
17684: PPUSH
17685: PPUSH
// begin tmp := [ ] ;
17686: LD_ADDR_VAR 0 3
17690: PUSH
17691: EMPTY
17692: ST_TO_ADDR
// for i := 1 to 6 do
17693: LD_ADDR_VAR 0 1
17697: PUSH
17698: DOUBLE
17699: LD_INT 1
17701: DEC
17702: ST_TO_ADDR
17703: LD_INT 6
17705: PUSH
17706: FOR_TO
17707: IFFALSE 17812
// begin uc_nation := nation_nature ;
17709: LD_ADDR_OWVAR 21
17713: PUSH
17714: LD_INT 0
17716: ST_TO_ADDR
// uc_side := 0 ;
17717: LD_ADDR_OWVAR 20
17721: PUSH
17722: LD_INT 0
17724: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17725: LD_ADDR_OWVAR 29
17729: PUSH
17730: LD_INT 12
17732: PUSH
17733: LD_INT 12
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: ST_TO_ADDR
// hc_agressivity := 20 ;
17740: LD_ADDR_OWVAR 35
17744: PUSH
17745: LD_INT 20
17747: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17748: LD_ADDR_OWVAR 28
17752: PUSH
17753: LD_INT 17
17755: ST_TO_ADDR
// hc_gallery :=  ;
17756: LD_ADDR_OWVAR 33
17760: PUSH
17761: LD_STRING 
17763: ST_TO_ADDR
// hc_name :=  ;
17764: LD_ADDR_OWVAR 26
17768: PUSH
17769: LD_STRING 
17771: ST_TO_ADDR
// un := CreateHuman ;
17772: LD_ADDR_VAR 0 2
17776: PUSH
17777: CALL_OW 44
17781: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17782: LD_VAR 0 2
17786: PPUSH
17787: LD_INT 1
17789: PPUSH
17790: CALL_OW 51
// tmp := tmp ^ un ;
17794: LD_ADDR_VAR 0 3
17798: PUSH
17799: LD_VAR 0 3
17803: PUSH
17804: LD_VAR 0 2
17808: ADD
17809: ST_TO_ADDR
// end ;
17810: GO 17706
17812: POP
17813: POP
// repeat wait ( 0 0$1 ) ;
17814: LD_INT 35
17816: PPUSH
17817: CALL_OW 67
// for un in tmp do
17821: LD_ADDR_VAR 0 2
17825: PUSH
17826: LD_VAR 0 3
17830: PUSH
17831: FOR_IN
17832: IFFALSE 17906
// begin if IsDead ( un ) then
17834: LD_VAR 0 2
17838: PPUSH
17839: CALL_OW 301
17843: IFFALSE 17863
// begin tmp := tmp diff un ;
17845: LD_ADDR_VAR 0 3
17849: PUSH
17850: LD_VAR 0 3
17854: PUSH
17855: LD_VAR 0 2
17859: DIFF
17860: ST_TO_ADDR
// continue ;
17861: GO 17831
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17863: LD_VAR 0 2
17867: PPUSH
17868: LD_INT 3
17870: PUSH
17871: LD_INT 22
17873: PUSH
17874: LD_INT 0
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PPUSH
17885: CALL_OW 69
17889: PPUSH
17890: LD_VAR 0 2
17894: PPUSH
17895: CALL_OW 74
17899: PPUSH
17900: CALL_OW 115
// end ;
17904: GO 17831
17906: POP
17907: POP
// until not tmp ;
17908: LD_VAR 0 3
17912: NOT
17913: IFFALSE 17814
// end ;
17915: PPOPN 3
17917: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17918: LD_EXP 44
17922: PUSH
17923: LD_EXP 69
17927: AND
17928: IFFALSE 17982
17930: GO 17932
17932: DISABLE
// begin ToLua ( displayTroll(); ) ;
17933: LD_STRING displayTroll();
17935: PPUSH
17936: CALL_OW 559
// wait ( 3 3$00 ) ;
17940: LD_INT 6300
17942: PPUSH
17943: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17947: LD_STRING hideTroll();
17949: PPUSH
17950: CALL_OW 559
// wait ( 1 1$00 ) ;
17954: LD_INT 2100
17956: PPUSH
17957: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17961: LD_STRING displayTroll();
17963: PPUSH
17964: CALL_OW 559
// wait ( 1 1$00 ) ;
17968: LD_INT 2100
17970: PPUSH
17971: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17975: LD_STRING hideTroll();
17977: PPUSH
17978: CALL_OW 559
// end ;
17982: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17983: LD_EXP 44
17987: PUSH
17988: LD_EXP 70
17992: AND
17993: IFFALSE 18056
17995: GO 17997
17997: DISABLE
17998: LD_INT 0
18000: PPUSH
// begin p := 0 ;
18001: LD_ADDR_VAR 0 1
18005: PUSH
18006: LD_INT 0
18008: ST_TO_ADDR
// repeat game_speed := 1 ;
18009: LD_ADDR_OWVAR 65
18013: PUSH
18014: LD_INT 1
18016: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18017: LD_INT 35
18019: PPUSH
18020: CALL_OW 67
// p := p + 1 ;
18024: LD_ADDR_VAR 0 1
18028: PUSH
18029: LD_VAR 0 1
18033: PUSH
18034: LD_INT 1
18036: PLUS
18037: ST_TO_ADDR
// until p >= 60 ;
18038: LD_VAR 0 1
18042: PUSH
18043: LD_INT 60
18045: GREATEREQUAL
18046: IFFALSE 18009
// game_speed := 4 ;
18048: LD_ADDR_OWVAR 65
18052: PUSH
18053: LD_INT 4
18055: ST_TO_ADDR
// end ;
18056: PPOPN 1
18058: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18059: LD_EXP 44
18063: PUSH
18064: LD_EXP 71
18068: AND
18069: IFFALSE 18215
18071: GO 18073
18073: DISABLE
18074: LD_INT 0
18076: PPUSH
18077: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18078: LD_ADDR_VAR 0 1
18082: PUSH
18083: LD_INT 22
18085: PUSH
18086: LD_OWVAR 2
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 2
18097: PUSH
18098: LD_INT 30
18100: PUSH
18101: LD_INT 0
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 30
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: LIST
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PPUSH
18127: CALL_OW 69
18131: ST_TO_ADDR
// if not depot then
18132: LD_VAR 0 1
18136: NOT
18137: IFFALSE 18141
// exit ;
18139: GO 18215
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18141: LD_ADDR_VAR 0 2
18145: PUSH
18146: LD_VAR 0 1
18150: PUSH
18151: LD_INT 1
18153: PPUSH
18154: LD_VAR 0 1
18158: PPUSH
18159: CALL_OW 12
18163: ARRAY
18164: PPUSH
18165: CALL_OW 274
18169: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18170: LD_VAR 0 2
18174: PPUSH
18175: LD_INT 1
18177: PPUSH
18178: LD_INT 0
18180: PPUSH
18181: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18185: LD_VAR 0 2
18189: PPUSH
18190: LD_INT 2
18192: PPUSH
18193: LD_INT 0
18195: PPUSH
18196: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18200: LD_VAR 0 2
18204: PPUSH
18205: LD_INT 3
18207: PPUSH
18208: LD_INT 0
18210: PPUSH
18211: CALL_OW 277
// end ;
18215: PPOPN 2
18217: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18218: LD_EXP 44
18222: PUSH
18223: LD_EXP 72
18227: AND
18228: IFFALSE 18325
18230: GO 18232
18232: DISABLE
18233: LD_INT 0
18235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18236: LD_ADDR_VAR 0 1
18240: PUSH
18241: LD_INT 22
18243: PUSH
18244: LD_OWVAR 2
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 21
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 3
18265: PUSH
18266: LD_INT 23
18268: PUSH
18269: LD_INT 0
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: PPUSH
18285: CALL_OW 69
18289: ST_TO_ADDR
// if not tmp then
18290: LD_VAR 0 1
18294: NOT
18295: IFFALSE 18299
// exit ;
18297: GO 18325
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18299: LD_VAR 0 1
18303: PUSH
18304: LD_INT 1
18306: PPUSH
18307: LD_VAR 0 1
18311: PPUSH
18312: CALL_OW 12
18316: ARRAY
18317: PPUSH
18318: LD_INT 200
18320: PPUSH
18321: CALL_OW 234
// end ;
18325: PPOPN 1
18327: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18328: LD_EXP 44
18332: PUSH
18333: LD_EXP 73
18337: AND
18338: IFFALSE 18417
18340: GO 18342
18342: DISABLE
18343: LD_INT 0
18345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18346: LD_ADDR_VAR 0 1
18350: PUSH
18351: LD_INT 22
18353: PUSH
18354: LD_OWVAR 2
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 21
18365: PUSH
18366: LD_INT 2
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PPUSH
18377: CALL_OW 69
18381: ST_TO_ADDR
// if not tmp then
18382: LD_VAR 0 1
18386: NOT
18387: IFFALSE 18391
// exit ;
18389: GO 18417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18391: LD_VAR 0 1
18395: PUSH
18396: LD_INT 1
18398: PPUSH
18399: LD_VAR 0 1
18403: PPUSH
18404: CALL_OW 12
18408: ARRAY
18409: PPUSH
18410: LD_INT 60
18412: PPUSH
18413: CALL_OW 234
// end ;
18417: PPOPN 1
18419: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18420: LD_EXP 44
18424: PUSH
18425: LD_EXP 74
18429: AND
18430: IFFALSE 18529
18432: GO 18434
18434: DISABLE
18435: LD_INT 0
18437: PPUSH
18438: PPUSH
// begin enable ;
18439: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18440: LD_ADDR_VAR 0 1
18444: PUSH
18445: LD_INT 22
18447: PUSH
18448: LD_OWVAR 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 61
18459: PUSH
18460: EMPTY
18461: LIST
18462: PUSH
18463: LD_INT 33
18465: PUSH
18466: LD_INT 2
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: LIST
18477: PPUSH
18478: CALL_OW 69
18482: ST_TO_ADDR
// if not tmp then
18483: LD_VAR 0 1
18487: NOT
18488: IFFALSE 18492
// exit ;
18490: GO 18529
// for i in tmp do
18492: LD_ADDR_VAR 0 2
18496: PUSH
18497: LD_VAR 0 1
18501: PUSH
18502: FOR_IN
18503: IFFALSE 18527
// if IsControledBy ( i ) then
18505: LD_VAR 0 2
18509: PPUSH
18510: CALL_OW 312
18514: IFFALSE 18525
// ComUnlink ( i ) ;
18516: LD_VAR 0 2
18520: PPUSH
18521: CALL_OW 136
18525: GO 18502
18527: POP
18528: POP
// end ;
18529: PPOPN 2
18531: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18532: LD_EXP 44
18536: PUSH
18537: LD_EXP 75
18541: AND
18542: IFFALSE 18682
18544: GO 18546
18546: DISABLE
18547: LD_INT 0
18549: PPUSH
18550: PPUSH
// begin ToLua ( displayPowell(); ) ;
18551: LD_STRING displayPowell();
18553: PPUSH
18554: CALL_OW 559
// uc_side := 0 ;
18558: LD_ADDR_OWVAR 20
18562: PUSH
18563: LD_INT 0
18565: ST_TO_ADDR
// uc_nation := 2 ;
18566: LD_ADDR_OWVAR 21
18570: PUSH
18571: LD_INT 2
18573: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18574: LD_ADDR_OWVAR 37
18578: PUSH
18579: LD_INT 14
18581: ST_TO_ADDR
// vc_engine := engine_siberite ;
18582: LD_ADDR_OWVAR 39
18586: PUSH
18587: LD_INT 3
18589: ST_TO_ADDR
// vc_control := control_apeman ;
18590: LD_ADDR_OWVAR 38
18594: PUSH
18595: LD_INT 5
18597: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18598: LD_ADDR_OWVAR 40
18602: PUSH
18603: LD_INT 29
18605: ST_TO_ADDR
// un := CreateVehicle ;
18606: LD_ADDR_VAR 0 2
18610: PUSH
18611: CALL_OW 45
18615: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18616: LD_VAR 0 2
18620: PPUSH
18621: LD_INT 1
18623: PPUSH
18624: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18628: LD_INT 35
18630: PPUSH
18631: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18635: LD_VAR 0 2
18639: PPUSH
18640: LD_INT 22
18642: PUSH
18643: LD_OWVAR 2
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PPUSH
18652: CALL_OW 69
18656: PPUSH
18657: LD_VAR 0 2
18661: PPUSH
18662: CALL_OW 74
18666: PPUSH
18667: CALL_OW 115
// until IsDead ( un ) ;
18671: LD_VAR 0 2
18675: PPUSH
18676: CALL_OW 301
18680: IFFALSE 18628
// end ;
18682: PPOPN 2
18684: END
// every 0 0$1 trigger StreamModeActive and sStu do
18685: LD_EXP 44
18689: PUSH
18690: LD_EXP 83
18694: AND
18695: IFFALSE 18711
18697: GO 18699
18699: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18700: LD_STRING displayStucuk();
18702: PPUSH
18703: CALL_OW 559
// ResetFog ;
18707: CALL_OW 335
// end ;
18711: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18712: LD_EXP 44
18716: PUSH
18717: LD_EXP 76
18721: AND
18722: IFFALSE 18863
18724: GO 18726
18726: DISABLE
18727: LD_INT 0
18729: PPUSH
18730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18731: LD_ADDR_VAR 0 2
18735: PUSH
18736: LD_INT 22
18738: PUSH
18739: LD_OWVAR 2
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 21
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PPUSH
18762: CALL_OW 69
18766: ST_TO_ADDR
// if not tmp then
18767: LD_VAR 0 2
18771: NOT
18772: IFFALSE 18776
// exit ;
18774: GO 18863
// un := tmp [ rand ( 1 , tmp ) ] ;
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: LD_VAR 0 2
18785: PUSH
18786: LD_INT 1
18788: PPUSH
18789: LD_VAR 0 2
18793: PPUSH
18794: CALL_OW 12
18798: ARRAY
18799: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18800: LD_VAR 0 1
18804: PPUSH
18805: LD_INT 0
18807: PPUSH
18808: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_OWVAR 3
18821: PUSH
18822: LD_VAR 0 1
18826: DIFF
18827: PPUSH
18828: LD_VAR 0 1
18832: PPUSH
18833: CALL_OW 74
18837: PPUSH
18838: CALL_OW 115
// wait ( 0 0$20 ) ;
18842: LD_INT 700
18844: PPUSH
18845: CALL_OW 67
// SetSide ( un , your_side ) ;
18849: LD_VAR 0 1
18853: PPUSH
18854: LD_OWVAR 2
18858: PPUSH
18859: CALL_OW 235
// end ;
18863: PPOPN 2
18865: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18866: LD_EXP 44
18870: PUSH
18871: LD_EXP 77
18875: AND
18876: IFFALSE 18982
18878: GO 18880
18880: DISABLE
18881: LD_INT 0
18883: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18884: LD_ADDR_VAR 0 1
18888: PUSH
18889: LD_INT 22
18891: PUSH
18892: LD_OWVAR 2
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 30
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 30
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PPUSH
18933: CALL_OW 69
18937: ST_TO_ADDR
// if not depot then
18938: LD_VAR 0 1
18942: NOT
18943: IFFALSE 18947
// exit ;
18945: GO 18982
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18947: LD_VAR 0 1
18951: PUSH
18952: LD_INT 1
18954: ARRAY
18955: PPUSH
18956: CALL_OW 250
18960: PPUSH
18961: LD_VAR 0 1
18965: PUSH
18966: LD_INT 1
18968: ARRAY
18969: PPUSH
18970: CALL_OW 251
18974: PPUSH
18975: LD_INT 70
18977: PPUSH
18978: CALL_OW 495
// end ;
18982: PPOPN 1
18984: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18985: LD_EXP 44
18989: PUSH
18990: LD_EXP 78
18994: AND
18995: IFFALSE 19206
18997: GO 18999
18999: DISABLE
19000: LD_INT 0
19002: PPUSH
19003: PPUSH
19004: PPUSH
19005: PPUSH
19006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19007: LD_ADDR_VAR 0 5
19011: PUSH
19012: LD_INT 22
19014: PUSH
19015: LD_OWVAR 2
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 21
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: ST_TO_ADDR
// if not tmp then
19043: LD_VAR 0 5
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19206
// for i in tmp do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_VAR 0 5
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19204
// begin d := rand ( 0 , 5 ) ;
19065: LD_ADDR_VAR 0 4
19069: PUSH
19070: LD_INT 0
19072: PPUSH
19073: LD_INT 5
19075: PPUSH
19076: CALL_OW 12
19080: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19081: LD_ADDR_VAR 0 2
19085: PUSH
19086: LD_VAR 0 1
19090: PPUSH
19091: CALL_OW 250
19095: PPUSH
19096: LD_VAR 0 4
19100: PPUSH
19101: LD_INT 3
19103: PPUSH
19104: LD_INT 12
19106: PPUSH
19107: CALL_OW 12
19111: PPUSH
19112: CALL_OW 272
19116: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19117: LD_ADDR_VAR 0 3
19121: PUSH
19122: LD_VAR 0 1
19126: PPUSH
19127: CALL_OW 251
19131: PPUSH
19132: LD_VAR 0 4
19136: PPUSH
19137: LD_INT 3
19139: PPUSH
19140: LD_INT 12
19142: PPUSH
19143: CALL_OW 12
19147: PPUSH
19148: CALL_OW 273
19152: ST_TO_ADDR
// if ValidHex ( x , y ) then
19153: LD_VAR 0 2
19157: PPUSH
19158: LD_VAR 0 3
19162: PPUSH
19163: CALL_OW 488
19167: IFFALSE 19202
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19169: LD_VAR 0 1
19173: PPUSH
19174: LD_VAR 0 2
19178: PPUSH
19179: LD_VAR 0 3
19183: PPUSH
19184: LD_INT 3
19186: PPUSH
19187: LD_INT 6
19189: PPUSH
19190: CALL_OW 12
19194: PPUSH
19195: LD_INT 1
19197: PPUSH
19198: CALL_OW 483
// end ;
19202: GO 19062
19204: POP
19205: POP
// end ;
19206: PPOPN 5
19208: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19209: LD_EXP 44
19213: PUSH
19214: LD_EXP 79
19218: AND
19219: IFFALSE 19313
19221: GO 19223
19223: DISABLE
19224: LD_INT 0
19226: PPUSH
19227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19228: LD_ADDR_VAR 0 2
19232: PUSH
19233: LD_INT 22
19235: PUSH
19236: LD_OWVAR 2
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 32
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 21
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: PPUSH
19270: CALL_OW 69
19274: ST_TO_ADDR
// if not tmp then
19275: LD_VAR 0 2
19279: NOT
19280: IFFALSE 19284
// exit ;
19282: GO 19313
// for i in tmp do
19284: LD_ADDR_VAR 0 1
19288: PUSH
19289: LD_VAR 0 2
19293: PUSH
19294: FOR_IN
19295: IFFALSE 19311
// SetFuel ( i , 0 ) ;
19297: LD_VAR 0 1
19301: PPUSH
19302: LD_INT 0
19304: PPUSH
19305: CALL_OW 240
19309: GO 19294
19311: POP
19312: POP
// end ;
19313: PPOPN 2
19315: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19316: LD_EXP 44
19320: PUSH
19321: LD_EXP 80
19325: AND
19326: IFFALSE 19392
19328: GO 19330
19330: DISABLE
19331: LD_INT 0
19333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19334: LD_ADDR_VAR 0 1
19338: PUSH
19339: LD_INT 22
19341: PUSH
19342: LD_OWVAR 2
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 30
19353: PUSH
19354: LD_INT 29
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PPUSH
19365: CALL_OW 69
19369: ST_TO_ADDR
// if not tmp then
19370: LD_VAR 0 1
19374: NOT
19375: IFFALSE 19379
// exit ;
19377: GO 19392
// DestroyUnit ( tmp [ 1 ] ) ;
19379: LD_VAR 0 1
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: PPUSH
19388: CALL_OW 65
// end ;
19392: PPOPN 1
19394: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19395: LD_EXP 44
19399: PUSH
19400: LD_EXP 82
19404: AND
19405: IFFALSE 19534
19407: GO 19409
19409: DISABLE
19410: LD_INT 0
19412: PPUSH
// begin uc_side := 0 ;
19413: LD_ADDR_OWVAR 20
19417: PUSH
19418: LD_INT 0
19420: ST_TO_ADDR
// uc_nation := nation_arabian ;
19421: LD_ADDR_OWVAR 21
19425: PUSH
19426: LD_INT 2
19428: ST_TO_ADDR
// hc_gallery :=  ;
19429: LD_ADDR_OWVAR 33
19433: PUSH
19434: LD_STRING 
19436: ST_TO_ADDR
// hc_name :=  ;
19437: LD_ADDR_OWVAR 26
19441: PUSH
19442: LD_STRING 
19444: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19445: LD_INT 1
19447: PPUSH
19448: LD_INT 11
19450: PPUSH
19451: LD_INT 10
19453: PPUSH
19454: CALL_OW 380
// un := CreateHuman ;
19458: LD_ADDR_VAR 0 1
19462: PUSH
19463: CALL_OW 44
19467: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_INT 1
19475: PPUSH
19476: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19480: LD_INT 35
19482: PPUSH
19483: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19487: LD_VAR 0 1
19491: PPUSH
19492: LD_INT 22
19494: PUSH
19495: LD_OWVAR 2
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 69
19508: PPUSH
19509: LD_VAR 0 1
19513: PPUSH
19514: CALL_OW 74
19518: PPUSH
19519: CALL_OW 115
// until IsDead ( un ) ;
19523: LD_VAR 0 1
19527: PPUSH
19528: CALL_OW 301
19532: IFFALSE 19480
// end ;
19534: PPOPN 1
19536: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19537: LD_EXP 44
19541: PUSH
19542: LD_EXP 84
19546: AND
19547: IFFALSE 19559
19549: GO 19551
19551: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19552: LD_STRING earthquake(getX(game), 0, 32)
19554: PPUSH
19555: CALL_OW 559
19559: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19560: LD_EXP 44
19564: PUSH
19565: LD_EXP 85
19569: AND
19570: IFFALSE 19661
19572: GO 19574
19574: DISABLE
19575: LD_INT 0
19577: PPUSH
// begin enable ;
19578: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19579: LD_ADDR_VAR 0 1
19583: PUSH
19584: LD_INT 22
19586: PUSH
19587: LD_OWVAR 2
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 21
19598: PUSH
19599: LD_INT 2
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 33
19608: PUSH
19609: LD_INT 3
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: LIST
19620: PPUSH
19621: CALL_OW 69
19625: ST_TO_ADDR
// if not tmp then
19626: LD_VAR 0 1
19630: NOT
19631: IFFALSE 19635
// exit ;
19633: GO 19661
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19635: LD_VAR 0 1
19639: PUSH
19640: LD_INT 1
19642: PPUSH
19643: LD_VAR 0 1
19647: PPUSH
19648: CALL_OW 12
19652: ARRAY
19653: PPUSH
19654: LD_INT 1
19656: PPUSH
19657: CALL_OW 234
// end ;
19661: PPOPN 1
19663: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19664: LD_EXP 44
19668: PUSH
19669: LD_EXP 86
19673: AND
19674: IFFALSE 19815
19676: GO 19678
19678: DISABLE
19679: LD_INT 0
19681: PPUSH
19682: PPUSH
19683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19684: LD_ADDR_VAR 0 3
19688: PUSH
19689: LD_INT 22
19691: PUSH
19692: LD_OWVAR 2
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 25
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PPUSH
19715: CALL_OW 69
19719: ST_TO_ADDR
// if not tmp then
19720: LD_VAR 0 3
19724: NOT
19725: IFFALSE 19729
// exit ;
19727: GO 19815
// un := tmp [ rand ( 1 , tmp ) ] ;
19729: LD_ADDR_VAR 0 2
19733: PUSH
19734: LD_VAR 0 3
19738: PUSH
19739: LD_INT 1
19741: PPUSH
19742: LD_VAR 0 3
19746: PPUSH
19747: CALL_OW 12
19751: ARRAY
19752: ST_TO_ADDR
// if Crawls ( un ) then
19753: LD_VAR 0 2
19757: PPUSH
19758: CALL_OW 318
19762: IFFALSE 19773
// ComWalk ( un ) ;
19764: LD_VAR 0 2
19768: PPUSH
19769: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19773: LD_VAR 0 2
19777: PPUSH
19778: LD_INT 9
19780: PPUSH
19781: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19785: LD_INT 28
19787: PPUSH
19788: LD_OWVAR 2
19792: PPUSH
19793: LD_INT 2
19795: PPUSH
19796: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19800: LD_INT 29
19802: PPUSH
19803: LD_OWVAR 2
19807: PPUSH
19808: LD_INT 2
19810: PPUSH
19811: CALL_OW 322
// end ;
19815: PPOPN 3
19817: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19818: LD_EXP 44
19822: PUSH
19823: LD_EXP 87
19827: AND
19828: IFFALSE 19939
19830: GO 19832
19832: DISABLE
19833: LD_INT 0
19835: PPUSH
19836: PPUSH
19837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19838: LD_ADDR_VAR 0 3
19842: PUSH
19843: LD_INT 22
19845: PUSH
19846: LD_OWVAR 2
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 25
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PPUSH
19869: CALL_OW 69
19873: ST_TO_ADDR
// if not tmp then
19874: LD_VAR 0 3
19878: NOT
19879: IFFALSE 19883
// exit ;
19881: GO 19939
// un := tmp [ rand ( 1 , tmp ) ] ;
19883: LD_ADDR_VAR 0 2
19887: PUSH
19888: LD_VAR 0 3
19892: PUSH
19893: LD_INT 1
19895: PPUSH
19896: LD_VAR 0 3
19900: PPUSH
19901: CALL_OW 12
19905: ARRAY
19906: ST_TO_ADDR
// if Crawls ( un ) then
19907: LD_VAR 0 2
19911: PPUSH
19912: CALL_OW 318
19916: IFFALSE 19927
// ComWalk ( un ) ;
19918: LD_VAR 0 2
19922: PPUSH
19923: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19927: LD_VAR 0 2
19931: PPUSH
19932: LD_INT 8
19934: PPUSH
19935: CALL_OW 336
// end ;
19939: PPOPN 3
19941: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19942: LD_EXP 44
19946: PUSH
19947: LD_EXP 88
19951: AND
19952: IFFALSE 20096
19954: GO 19956
19956: DISABLE
19957: LD_INT 0
19959: PPUSH
19960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19961: LD_ADDR_VAR 0 2
19965: PUSH
19966: LD_INT 22
19968: PUSH
19969: LD_OWVAR 2
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 21
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: LD_INT 34
19993: PUSH
19994: LD_INT 12
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 34
20003: PUSH
20004: LD_INT 51
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 34
20013: PUSH
20014: LD_INT 32
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 69
20036: ST_TO_ADDR
// if not tmp then
20037: LD_VAR 0 2
20041: NOT
20042: IFFALSE 20046
// exit ;
20044: GO 20096
// for i in tmp do
20046: LD_ADDR_VAR 0 1
20050: PUSH
20051: LD_VAR 0 2
20055: PUSH
20056: FOR_IN
20057: IFFALSE 20094
// if GetCargo ( i , mat_artifact ) = 0 then
20059: LD_VAR 0 1
20063: PPUSH
20064: LD_INT 4
20066: PPUSH
20067: CALL_OW 289
20071: PUSH
20072: LD_INT 0
20074: EQUAL
20075: IFFALSE 20092
// SetCargo ( i , mat_siberit , 100 ) ;
20077: LD_VAR 0 1
20081: PPUSH
20082: LD_INT 3
20084: PPUSH
20085: LD_INT 100
20087: PPUSH
20088: CALL_OW 290
20092: GO 20056
20094: POP
20095: POP
// end ;
20096: PPOPN 2
20098: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20099: LD_EXP 44
20103: PUSH
20104: LD_EXP 89
20108: AND
20109: IFFALSE 20292
20111: GO 20113
20113: DISABLE
20114: LD_INT 0
20116: PPUSH
20117: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20118: LD_ADDR_VAR 0 2
20122: PUSH
20123: LD_INT 22
20125: PUSH
20126: LD_OWVAR 2
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PPUSH
20135: CALL_OW 69
20139: ST_TO_ADDR
// if not tmp then
20140: LD_VAR 0 2
20144: NOT
20145: IFFALSE 20149
// exit ;
20147: GO 20292
// for i := 1 to 2 do
20149: LD_ADDR_VAR 0 1
20153: PUSH
20154: DOUBLE
20155: LD_INT 1
20157: DEC
20158: ST_TO_ADDR
20159: LD_INT 2
20161: PUSH
20162: FOR_TO
20163: IFFALSE 20290
// begin uc_side := your_side ;
20165: LD_ADDR_OWVAR 20
20169: PUSH
20170: LD_OWVAR 2
20174: ST_TO_ADDR
// uc_nation := nation_american ;
20175: LD_ADDR_OWVAR 21
20179: PUSH
20180: LD_INT 1
20182: ST_TO_ADDR
// vc_chassis := us_morphling ;
20183: LD_ADDR_OWVAR 37
20187: PUSH
20188: LD_INT 5
20190: ST_TO_ADDR
// vc_engine := engine_siberite ;
20191: LD_ADDR_OWVAR 39
20195: PUSH
20196: LD_INT 3
20198: ST_TO_ADDR
// vc_control := control_computer ;
20199: LD_ADDR_OWVAR 38
20203: PUSH
20204: LD_INT 3
20206: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20207: LD_ADDR_OWVAR 40
20211: PUSH
20212: LD_INT 10
20214: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20215: LD_VAR 0 2
20219: PUSH
20220: LD_INT 1
20222: ARRAY
20223: PPUSH
20224: CALL_OW 310
20228: NOT
20229: IFFALSE 20276
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20231: CALL_OW 45
20235: PPUSH
20236: LD_VAR 0 2
20240: PUSH
20241: LD_INT 1
20243: ARRAY
20244: PPUSH
20245: CALL_OW 250
20249: PPUSH
20250: LD_VAR 0 2
20254: PUSH
20255: LD_INT 1
20257: ARRAY
20258: PPUSH
20259: CALL_OW 251
20263: PPUSH
20264: LD_INT 12
20266: PPUSH
20267: LD_INT 1
20269: PPUSH
20270: CALL_OW 50
20274: GO 20288
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20276: CALL_OW 45
20280: PPUSH
20281: LD_INT 1
20283: PPUSH
20284: CALL_OW 51
// end ;
20288: GO 20162
20290: POP
20291: POP
// end ;
20292: PPOPN 2
20294: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20295: LD_EXP 44
20299: PUSH
20300: LD_EXP 90
20304: AND
20305: IFFALSE 20527
20307: GO 20309
20309: DISABLE
20310: LD_INT 0
20312: PPUSH
20313: PPUSH
20314: PPUSH
20315: PPUSH
20316: PPUSH
20317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20318: LD_ADDR_VAR 0 6
20322: PUSH
20323: LD_INT 22
20325: PUSH
20326: LD_OWVAR 2
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 21
20337: PUSH
20338: LD_INT 1
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 3
20347: PUSH
20348: LD_INT 23
20350: PUSH
20351: LD_INT 0
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: PPUSH
20367: CALL_OW 69
20371: ST_TO_ADDR
// if not tmp then
20372: LD_VAR 0 6
20376: NOT
20377: IFFALSE 20381
// exit ;
20379: GO 20527
// s1 := rand ( 1 , 4 ) ;
20381: LD_ADDR_VAR 0 2
20385: PUSH
20386: LD_INT 1
20388: PPUSH
20389: LD_INT 4
20391: PPUSH
20392: CALL_OW 12
20396: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20397: LD_ADDR_VAR 0 4
20401: PUSH
20402: LD_VAR 0 6
20406: PUSH
20407: LD_INT 1
20409: ARRAY
20410: PPUSH
20411: LD_VAR 0 2
20415: PPUSH
20416: CALL_OW 259
20420: ST_TO_ADDR
// if s1 = 1 then
20421: LD_VAR 0 2
20425: PUSH
20426: LD_INT 1
20428: EQUAL
20429: IFFALSE 20449
// s2 := rand ( 2 , 4 ) else
20431: LD_ADDR_VAR 0 3
20435: PUSH
20436: LD_INT 2
20438: PPUSH
20439: LD_INT 4
20441: PPUSH
20442: CALL_OW 12
20446: ST_TO_ADDR
20447: GO 20457
// s2 := 1 ;
20449: LD_ADDR_VAR 0 3
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20457: LD_ADDR_VAR 0 5
20461: PUSH
20462: LD_VAR 0 6
20466: PUSH
20467: LD_INT 1
20469: ARRAY
20470: PPUSH
20471: LD_VAR 0 3
20475: PPUSH
20476: CALL_OW 259
20480: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20481: LD_VAR 0 6
20485: PUSH
20486: LD_INT 1
20488: ARRAY
20489: PPUSH
20490: LD_VAR 0 2
20494: PPUSH
20495: LD_VAR 0 5
20499: PPUSH
20500: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20504: LD_VAR 0 6
20508: PUSH
20509: LD_INT 1
20511: ARRAY
20512: PPUSH
20513: LD_VAR 0 3
20517: PPUSH
20518: LD_VAR 0 4
20522: PPUSH
20523: CALL_OW 237
// end ;
20527: PPOPN 6
20529: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20530: LD_EXP 44
20534: PUSH
20535: LD_EXP 91
20539: AND
20540: IFFALSE 20619
20542: GO 20544
20544: DISABLE
20545: LD_INT 0
20547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20548: LD_ADDR_VAR 0 1
20552: PUSH
20553: LD_INT 22
20555: PUSH
20556: LD_OWVAR 2
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 30
20567: PUSH
20568: LD_INT 3
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 69
20583: ST_TO_ADDR
// if not tmp then
20584: LD_VAR 0 1
20588: NOT
20589: IFFALSE 20593
// exit ;
20591: GO 20619
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20593: LD_VAR 0 1
20597: PUSH
20598: LD_INT 1
20600: PPUSH
20601: LD_VAR 0 1
20605: PPUSH
20606: CALL_OW 12
20610: ARRAY
20611: PPUSH
20612: LD_INT 1
20614: PPUSH
20615: CALL_OW 234
// end ;
20619: PPOPN 1
20621: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20622: LD_EXP 44
20626: PUSH
20627: LD_EXP 92
20631: AND
20632: IFFALSE 20744
20634: GO 20636
20636: DISABLE
20637: LD_INT 0
20639: PPUSH
20640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20641: LD_ADDR_VAR 0 2
20645: PUSH
20646: LD_INT 22
20648: PUSH
20649: LD_OWVAR 2
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 30
20663: PUSH
20664: LD_INT 27
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 30
20673: PUSH
20674: LD_INT 26
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 30
20683: PUSH
20684: LD_INT 28
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PPUSH
20701: CALL_OW 69
20705: ST_TO_ADDR
// if not tmp then
20706: LD_VAR 0 2
20710: NOT
20711: IFFALSE 20715
// exit ;
20713: GO 20744
// for i in tmp do
20715: LD_ADDR_VAR 0 1
20719: PUSH
20720: LD_VAR 0 2
20724: PUSH
20725: FOR_IN
20726: IFFALSE 20742
// SetLives ( i , 1 ) ;
20728: LD_VAR 0 1
20732: PPUSH
20733: LD_INT 1
20735: PPUSH
20736: CALL_OW 234
20740: GO 20725
20742: POP
20743: POP
// end ;
20744: PPOPN 2
20746: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20747: LD_EXP 44
20751: PUSH
20752: LD_EXP 93
20756: AND
20757: IFFALSE 21044
20759: GO 20761
20761: DISABLE
20762: LD_INT 0
20764: PPUSH
20765: PPUSH
20766: PPUSH
// begin i := rand ( 1 , 7 ) ;
20767: LD_ADDR_VAR 0 1
20771: PUSH
20772: LD_INT 1
20774: PPUSH
20775: LD_INT 7
20777: PPUSH
20778: CALL_OW 12
20782: ST_TO_ADDR
// case i of 1 :
20783: LD_VAR 0 1
20787: PUSH
20788: LD_INT 1
20790: DOUBLE
20791: EQUAL
20792: IFTRUE 20796
20794: GO 20806
20796: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20797: LD_STRING earthquake(getX(game), 0, 32)
20799: PPUSH
20800: CALL_OW 559
20804: GO 21044
20806: LD_INT 2
20808: DOUBLE
20809: EQUAL
20810: IFTRUE 20814
20812: GO 20828
20814: POP
// begin ToLua ( displayStucuk(); ) ;
20815: LD_STRING displayStucuk();
20817: PPUSH
20818: CALL_OW 559
// ResetFog ;
20822: CALL_OW 335
// end ; 3 :
20826: GO 21044
20828: LD_INT 3
20830: DOUBLE
20831: EQUAL
20832: IFTRUE 20836
20834: GO 20940
20836: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20837: LD_ADDR_VAR 0 2
20841: PUSH
20842: LD_INT 22
20844: PUSH
20845: LD_OWVAR 2
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 25
20856: PUSH
20857: LD_INT 1
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PPUSH
20868: CALL_OW 69
20872: ST_TO_ADDR
// if not tmp then
20873: LD_VAR 0 2
20877: NOT
20878: IFFALSE 20882
// exit ;
20880: GO 21044
// un := tmp [ rand ( 1 , tmp ) ] ;
20882: LD_ADDR_VAR 0 3
20886: PUSH
20887: LD_VAR 0 2
20891: PUSH
20892: LD_INT 1
20894: PPUSH
20895: LD_VAR 0 2
20899: PPUSH
20900: CALL_OW 12
20904: ARRAY
20905: ST_TO_ADDR
// if Crawls ( un ) then
20906: LD_VAR 0 3
20910: PPUSH
20911: CALL_OW 318
20915: IFFALSE 20926
// ComWalk ( un ) ;
20917: LD_VAR 0 3
20921: PPUSH
20922: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20926: LD_VAR 0 3
20930: PPUSH
20931: LD_INT 8
20933: PPUSH
20934: CALL_OW 336
// end ; 4 :
20938: GO 21044
20940: LD_INT 4
20942: DOUBLE
20943: EQUAL
20944: IFTRUE 20948
20946: GO 21022
20948: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20949: LD_ADDR_VAR 0 2
20953: PUSH
20954: LD_INT 22
20956: PUSH
20957: LD_OWVAR 2
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 30
20968: PUSH
20969: LD_INT 29
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PPUSH
20980: CALL_OW 69
20984: ST_TO_ADDR
// if not tmp then
20985: LD_VAR 0 2
20989: NOT
20990: IFFALSE 20994
// exit ;
20992: GO 21044
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20994: LD_VAR 0 2
20998: PUSH
20999: LD_INT 1
21001: ARRAY
21002: PPUSH
21003: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21007: LD_VAR 0 2
21011: PUSH
21012: LD_INT 1
21014: ARRAY
21015: PPUSH
21016: CALL_OW 65
// end ; 5 .. 7 :
21020: GO 21044
21022: LD_INT 5
21024: DOUBLE
21025: GREATEREQUAL
21026: IFFALSE 21034
21028: LD_INT 7
21030: DOUBLE
21031: LESSEQUAL
21032: IFTRUE 21036
21034: GO 21043
21036: POP
// StreamSibBomb ; end ;
21037: CALL 17281 0 0
21041: GO 21044
21043: POP
// end ;
21044: PPOPN 3
21046: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21047: LD_EXP 44
21051: PUSH
21052: LD_EXP 94
21056: AND
21057: IFFALSE 21213
21059: GO 21061
21061: DISABLE
21062: LD_INT 0
21064: PPUSH
21065: PPUSH
21066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21067: LD_ADDR_VAR 0 2
21071: PUSH
21072: LD_INT 81
21074: PUSH
21075: LD_OWVAR 2
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: LD_INT 21
21089: PUSH
21090: LD_INT 1
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 21
21099: PUSH
21100: LD_INT 2
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PPUSH
21116: CALL_OW 69
21120: ST_TO_ADDR
// if not tmp then
21121: LD_VAR 0 2
21125: NOT
21126: IFFALSE 21130
// exit ;
21128: GO 21213
// p := 0 ;
21130: LD_ADDR_VAR 0 3
21134: PUSH
21135: LD_INT 0
21137: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21138: LD_INT 35
21140: PPUSH
21141: CALL_OW 67
// p := p + 1 ;
21145: LD_ADDR_VAR 0 3
21149: PUSH
21150: LD_VAR 0 3
21154: PUSH
21155: LD_INT 1
21157: PLUS
21158: ST_TO_ADDR
// for i in tmp do
21159: LD_ADDR_VAR 0 1
21163: PUSH
21164: LD_VAR 0 2
21168: PUSH
21169: FOR_IN
21170: IFFALSE 21201
// if GetLives ( i ) < 1000 then
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL_OW 256
21181: PUSH
21182: LD_INT 1000
21184: LESS
21185: IFFALSE 21199
// SetLives ( i , 1000 ) ;
21187: LD_VAR 0 1
21191: PPUSH
21192: LD_INT 1000
21194: PPUSH
21195: CALL_OW 234
21199: GO 21169
21201: POP
21202: POP
// until p > 20 ;
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 20
21210: GREATER
21211: IFFALSE 21138
// end ;
21213: PPOPN 3
21215: END
// every 0 0$1 trigger StreamModeActive and sTime do
21216: LD_EXP 44
21220: PUSH
21221: LD_EXP 95
21225: AND
21226: IFFALSE 21261
21228: GO 21230
21230: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21231: LD_INT 28
21233: PPUSH
21234: LD_OWVAR 2
21238: PPUSH
21239: LD_INT 2
21241: PPUSH
21242: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21246: LD_INT 30
21248: PPUSH
21249: LD_OWVAR 2
21253: PPUSH
21254: LD_INT 2
21256: PPUSH
21257: CALL_OW 322
// end ;
21261: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21262: LD_EXP 44
21266: PUSH
21267: LD_EXP 96
21271: AND
21272: IFFALSE 21393
21274: GO 21276
21276: DISABLE
21277: LD_INT 0
21279: PPUSH
21280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21281: LD_ADDR_VAR 0 2
21285: PUSH
21286: LD_INT 22
21288: PUSH
21289: LD_OWVAR 2
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 21
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 3
21310: PUSH
21311: LD_INT 23
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: LIST
21329: PPUSH
21330: CALL_OW 69
21334: ST_TO_ADDR
// if not tmp then
21335: LD_VAR 0 2
21339: NOT
21340: IFFALSE 21344
// exit ;
21342: GO 21393
// for i in tmp do
21344: LD_ADDR_VAR 0 1
21348: PUSH
21349: LD_VAR 0 2
21353: PUSH
21354: FOR_IN
21355: IFFALSE 21391
// begin if Crawls ( i ) then
21357: LD_VAR 0 1
21361: PPUSH
21362: CALL_OW 318
21366: IFFALSE 21377
// ComWalk ( i ) ;
21368: LD_VAR 0 1
21372: PPUSH
21373: CALL_OW 138
// SetClass ( i , 2 ) ;
21377: LD_VAR 0 1
21381: PPUSH
21382: LD_INT 2
21384: PPUSH
21385: CALL_OW 336
// end ;
21389: GO 21354
21391: POP
21392: POP
// end ;
21393: PPOPN 2
21395: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21396: LD_EXP 44
21400: PUSH
21401: LD_EXP 97
21405: AND
21406: IFFALSE 21694
21408: GO 21410
21410: DISABLE
21411: LD_INT 0
21413: PPUSH
21414: PPUSH
21415: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21416: LD_OWVAR 2
21420: PPUSH
21421: LD_INT 9
21423: PPUSH
21424: LD_INT 1
21426: PPUSH
21427: LD_INT 1
21429: PPUSH
21430: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21434: LD_INT 9
21436: PPUSH
21437: LD_OWVAR 2
21441: PPUSH
21442: CALL_OW 343
// uc_side := 9 ;
21446: LD_ADDR_OWVAR 20
21450: PUSH
21451: LD_INT 9
21453: ST_TO_ADDR
// uc_nation := 2 ;
21454: LD_ADDR_OWVAR 21
21458: PUSH
21459: LD_INT 2
21461: ST_TO_ADDR
// hc_name := Dark Warrior ;
21462: LD_ADDR_OWVAR 26
21466: PUSH
21467: LD_STRING Dark Warrior
21469: ST_TO_ADDR
// hc_gallery :=  ;
21470: LD_ADDR_OWVAR 33
21474: PUSH
21475: LD_STRING 
21477: ST_TO_ADDR
// hc_noskilllimit := true ;
21478: LD_ADDR_OWVAR 76
21482: PUSH
21483: LD_INT 1
21485: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21486: LD_ADDR_OWVAR 31
21490: PUSH
21491: LD_INT 30
21493: PUSH
21494: LD_INT 30
21496: PUSH
21497: LD_INT 30
21499: PUSH
21500: LD_INT 30
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: ST_TO_ADDR
// un := CreateHuman ;
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: CALL_OW 44
21518: ST_TO_ADDR
// hc_noskilllimit := false ;
21519: LD_ADDR_OWVAR 76
21523: PUSH
21524: LD_INT 0
21526: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21527: LD_VAR 0 3
21531: PPUSH
21532: LD_INT 1
21534: PPUSH
21535: CALL_OW 51
// ToLua ( playRanger() ) ;
21539: LD_STRING playRanger()
21541: PPUSH
21542: CALL_OW 559
// p := 0 ;
21546: LD_ADDR_VAR 0 2
21550: PUSH
21551: LD_INT 0
21553: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21554: LD_INT 35
21556: PPUSH
21557: CALL_OW 67
// p := p + 1 ;
21561: LD_ADDR_VAR 0 2
21565: PUSH
21566: LD_VAR 0 2
21570: PUSH
21571: LD_INT 1
21573: PLUS
21574: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21575: LD_VAR 0 3
21579: PPUSH
21580: CALL_OW 256
21584: PUSH
21585: LD_INT 1000
21587: LESS
21588: IFFALSE 21602
// SetLives ( un , 1000 ) ;
21590: LD_VAR 0 3
21594: PPUSH
21595: LD_INT 1000
21597: PPUSH
21598: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21602: LD_VAR 0 3
21606: PPUSH
21607: LD_INT 81
21609: PUSH
21610: LD_OWVAR 2
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 91
21621: PUSH
21622: LD_VAR 0 3
21626: PUSH
21627: LD_INT 30
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PPUSH
21639: CALL_OW 69
21643: PPUSH
21644: LD_VAR 0 3
21648: PPUSH
21649: CALL_OW 74
21653: PPUSH
21654: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21658: LD_VAR 0 2
21662: PUSH
21663: LD_INT 80
21665: GREATER
21666: PUSH
21667: LD_VAR 0 3
21671: PPUSH
21672: CALL_OW 301
21676: OR
21677: IFFALSE 21554
// if un then
21679: LD_VAR 0 3
21683: IFFALSE 21694
// RemoveUnit ( un ) ;
21685: LD_VAR 0 3
21689: PPUSH
21690: CALL_OW 64
// end ;
21694: PPOPN 3
21696: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21697: LD_EXP 98
21701: IFFALSE 21817
21703: GO 21705
21705: DISABLE
21706: LD_INT 0
21708: PPUSH
21709: PPUSH
21710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21711: LD_ADDR_VAR 0 2
21715: PUSH
21716: LD_INT 81
21718: PUSH
21719: LD_OWVAR 2
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 21
21730: PUSH
21731: LD_INT 1
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PPUSH
21742: CALL_OW 69
21746: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21747: LD_STRING playComputer()
21749: PPUSH
21750: CALL_OW 559
// if not tmp then
21754: LD_VAR 0 2
21758: NOT
21759: IFFALSE 21763
// exit ;
21761: GO 21817
// for i in tmp do
21763: LD_ADDR_VAR 0 1
21767: PUSH
21768: LD_VAR 0 2
21772: PUSH
21773: FOR_IN
21774: IFFALSE 21815
// for j := 1 to 4 do
21776: LD_ADDR_VAR 0 3
21780: PUSH
21781: DOUBLE
21782: LD_INT 1
21784: DEC
21785: ST_TO_ADDR
21786: LD_INT 4
21788: PUSH
21789: FOR_TO
21790: IFFALSE 21811
// SetSkill ( i , j , 10 ) ;
21792: LD_VAR 0 1
21796: PPUSH
21797: LD_VAR 0 3
21801: PPUSH
21802: LD_INT 10
21804: PPUSH
21805: CALL_OW 237
21809: GO 21789
21811: POP
21812: POP
21813: GO 21773
21815: POP
21816: POP
// end ;
21817: PPOPN 3
21819: END
// every 0 0$1 trigger s30 do var i , tmp ;
21820: LD_EXP 99
21824: IFFALSE 21893
21826: GO 21828
21828: DISABLE
21829: LD_INT 0
21831: PPUSH
21832: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21833: LD_ADDR_VAR 0 2
21837: PUSH
21838: LD_INT 22
21840: PUSH
21841: LD_OWVAR 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PPUSH
21850: CALL_OW 69
21854: ST_TO_ADDR
// if not tmp then
21855: LD_VAR 0 2
21859: NOT
21860: IFFALSE 21864
// exit ;
21862: GO 21893
// for i in tmp do
21864: LD_ADDR_VAR 0 1
21868: PUSH
21869: LD_VAR 0 2
21873: PUSH
21874: FOR_IN
21875: IFFALSE 21891
// SetLives ( i , 300 ) ;
21877: LD_VAR 0 1
21881: PPUSH
21882: LD_INT 300
21884: PPUSH
21885: CALL_OW 234
21889: GO 21874
21891: POP
21892: POP
// end ;
21893: PPOPN 2
21895: END
// every 0 0$1 trigger s60 do var i , tmp ;
21896: LD_EXP 100
21900: IFFALSE 21969
21902: GO 21904
21904: DISABLE
21905: LD_INT 0
21907: PPUSH
21908: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21909: LD_ADDR_VAR 0 2
21913: PUSH
21914: LD_INT 22
21916: PUSH
21917: LD_OWVAR 2
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PPUSH
21926: CALL_OW 69
21930: ST_TO_ADDR
// if not tmp then
21931: LD_VAR 0 2
21935: NOT
21936: IFFALSE 21940
// exit ;
21938: GO 21969
// for i in tmp do
21940: LD_ADDR_VAR 0 1
21944: PUSH
21945: LD_VAR 0 2
21949: PUSH
21950: FOR_IN
21951: IFFALSE 21967
// SetLives ( i , 600 ) ;
21953: LD_VAR 0 1
21957: PPUSH
21958: LD_INT 600
21960: PPUSH
21961: CALL_OW 234
21965: GO 21950
21967: POP
21968: POP
// end ;
21969: PPOPN 2
21971: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21972: LD_INT 0
21974: PPUSH
// case cmd of 301 :
21975: LD_VAR 0 1
21979: PUSH
21980: LD_INT 301
21982: DOUBLE
21983: EQUAL
21984: IFTRUE 21988
21986: GO 22020
21988: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21989: LD_VAR 0 6
21993: PPUSH
21994: LD_VAR 0 7
21998: PPUSH
21999: LD_VAR 0 8
22003: PPUSH
22004: LD_VAR 0 4
22008: PPUSH
22009: LD_VAR 0 5
22013: PPUSH
22014: CALL 23221 0 5
22018: GO 22141
22020: LD_INT 302
22022: DOUBLE
22023: EQUAL
22024: IFTRUE 22028
22026: GO 22065
22028: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22029: LD_VAR 0 6
22033: PPUSH
22034: LD_VAR 0 7
22038: PPUSH
22039: LD_VAR 0 8
22043: PPUSH
22044: LD_VAR 0 9
22048: PPUSH
22049: LD_VAR 0 4
22053: PPUSH
22054: LD_VAR 0 5
22058: PPUSH
22059: CALL 23312 0 6
22063: GO 22141
22065: LD_INT 303
22067: DOUBLE
22068: EQUAL
22069: IFTRUE 22073
22071: GO 22110
22073: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22074: LD_VAR 0 6
22078: PPUSH
22079: LD_VAR 0 7
22083: PPUSH
22084: LD_VAR 0 8
22088: PPUSH
22089: LD_VAR 0 9
22093: PPUSH
22094: LD_VAR 0 4
22098: PPUSH
22099: LD_VAR 0 5
22103: PPUSH
22104: CALL 22146 0 6
22108: GO 22141
22110: LD_INT 304
22112: DOUBLE
22113: EQUAL
22114: IFTRUE 22118
22116: GO 22140
22118: POP
// hHackTeleport ( unit , x , y ) ; end ;
22119: LD_VAR 0 2
22123: PPUSH
22124: LD_VAR 0 4
22128: PPUSH
22129: LD_VAR 0 5
22133: PPUSH
22134: CALL 23905 0 3
22138: GO 22141
22140: POP
// end ;
22141: LD_VAR 0 12
22145: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22146: LD_INT 0
22148: PPUSH
22149: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22150: LD_VAR 0 1
22154: PUSH
22155: LD_INT 1
22157: LESS
22158: PUSH
22159: LD_VAR 0 1
22163: PUSH
22164: LD_INT 3
22166: GREATER
22167: OR
22168: PUSH
22169: LD_VAR 0 5
22173: PPUSH
22174: LD_VAR 0 6
22178: PPUSH
22179: CALL_OW 428
22183: OR
22184: IFFALSE 22188
// exit ;
22186: GO 22908
// uc_side := your_side ;
22188: LD_ADDR_OWVAR 20
22192: PUSH
22193: LD_OWVAR 2
22197: ST_TO_ADDR
// uc_nation := nation ;
22198: LD_ADDR_OWVAR 21
22202: PUSH
22203: LD_VAR 0 1
22207: ST_TO_ADDR
// bc_level = 1 ;
22208: LD_ADDR_OWVAR 43
22212: PUSH
22213: LD_INT 1
22215: ST_TO_ADDR
// case btype of 1 :
22216: LD_VAR 0 2
22220: PUSH
22221: LD_INT 1
22223: DOUBLE
22224: EQUAL
22225: IFTRUE 22229
22227: GO 22240
22229: POP
// bc_type := b_depot ; 2 :
22230: LD_ADDR_OWVAR 42
22234: PUSH
22235: LD_INT 0
22237: ST_TO_ADDR
22238: GO 22852
22240: LD_INT 2
22242: DOUBLE
22243: EQUAL
22244: IFTRUE 22248
22246: GO 22259
22248: POP
// bc_type := b_warehouse ; 3 :
22249: LD_ADDR_OWVAR 42
22253: PUSH
22254: LD_INT 1
22256: ST_TO_ADDR
22257: GO 22852
22259: LD_INT 3
22261: DOUBLE
22262: EQUAL
22263: IFTRUE 22267
22265: GO 22278
22267: POP
// bc_type := b_lab ; 4 .. 9 :
22268: LD_ADDR_OWVAR 42
22272: PUSH
22273: LD_INT 6
22275: ST_TO_ADDR
22276: GO 22852
22278: LD_INT 4
22280: DOUBLE
22281: GREATEREQUAL
22282: IFFALSE 22290
22284: LD_INT 9
22286: DOUBLE
22287: LESSEQUAL
22288: IFTRUE 22292
22290: GO 22344
22292: POP
// begin bc_type := b_lab_half ;
22293: LD_ADDR_OWVAR 42
22297: PUSH
22298: LD_INT 7
22300: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22301: LD_ADDR_OWVAR 44
22305: PUSH
22306: LD_INT 10
22308: PUSH
22309: LD_INT 11
22311: PUSH
22312: LD_INT 12
22314: PUSH
22315: LD_INT 15
22317: PUSH
22318: LD_INT 14
22320: PUSH
22321: LD_INT 13
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: PUSH
22332: LD_VAR 0 2
22336: PUSH
22337: LD_INT 3
22339: MINUS
22340: ARRAY
22341: ST_TO_ADDR
// end ; 10 .. 13 :
22342: GO 22852
22344: LD_INT 10
22346: DOUBLE
22347: GREATEREQUAL
22348: IFFALSE 22356
22350: LD_INT 13
22352: DOUBLE
22353: LESSEQUAL
22354: IFTRUE 22358
22356: GO 22435
22358: POP
// begin bc_type := b_lab_full ;
22359: LD_ADDR_OWVAR 42
22363: PUSH
22364: LD_INT 8
22366: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22367: LD_ADDR_OWVAR 44
22371: PUSH
22372: LD_INT 10
22374: PUSH
22375: LD_INT 12
22377: PUSH
22378: LD_INT 14
22380: PUSH
22381: LD_INT 13
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: PUSH
22390: LD_VAR 0 2
22394: PUSH
22395: LD_INT 9
22397: MINUS
22398: ARRAY
22399: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22400: LD_ADDR_OWVAR 45
22404: PUSH
22405: LD_INT 11
22407: PUSH
22408: LD_INT 15
22410: PUSH
22411: LD_INT 12
22413: PUSH
22414: LD_INT 15
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: PUSH
22423: LD_VAR 0 2
22427: PUSH
22428: LD_INT 9
22430: MINUS
22431: ARRAY
22432: ST_TO_ADDR
// end ; 14 :
22433: GO 22852
22435: LD_INT 14
22437: DOUBLE
22438: EQUAL
22439: IFTRUE 22443
22441: GO 22454
22443: POP
// bc_type := b_workshop ; 15 :
22444: LD_ADDR_OWVAR 42
22448: PUSH
22449: LD_INT 2
22451: ST_TO_ADDR
22452: GO 22852
22454: LD_INT 15
22456: DOUBLE
22457: EQUAL
22458: IFTRUE 22462
22460: GO 22473
22462: POP
// bc_type := b_factory ; 16 :
22463: LD_ADDR_OWVAR 42
22467: PUSH
22468: LD_INT 3
22470: ST_TO_ADDR
22471: GO 22852
22473: LD_INT 16
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22492
22481: POP
// bc_type := b_ext_gun ; 17 :
22482: LD_ADDR_OWVAR 42
22486: PUSH
22487: LD_INT 17
22489: ST_TO_ADDR
22490: GO 22852
22492: LD_INT 17
22494: DOUBLE
22495: EQUAL
22496: IFTRUE 22500
22498: GO 22528
22500: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22501: LD_ADDR_OWVAR 42
22505: PUSH
22506: LD_INT 19
22508: PUSH
22509: LD_INT 23
22511: PUSH
22512: LD_INT 19
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: LIST
22519: PUSH
22520: LD_VAR 0 1
22524: ARRAY
22525: ST_TO_ADDR
22526: GO 22852
22528: LD_INT 18
22530: DOUBLE
22531: EQUAL
22532: IFTRUE 22536
22534: GO 22547
22536: POP
// bc_type := b_ext_radar ; 19 :
22537: LD_ADDR_OWVAR 42
22541: PUSH
22542: LD_INT 20
22544: ST_TO_ADDR
22545: GO 22852
22547: LD_INT 19
22549: DOUBLE
22550: EQUAL
22551: IFTRUE 22555
22553: GO 22566
22555: POP
// bc_type := b_ext_radio ; 20 :
22556: LD_ADDR_OWVAR 42
22560: PUSH
22561: LD_INT 22
22563: ST_TO_ADDR
22564: GO 22852
22566: LD_INT 20
22568: DOUBLE
22569: EQUAL
22570: IFTRUE 22574
22572: GO 22585
22574: POP
// bc_type := b_ext_siberium ; 21 :
22575: LD_ADDR_OWVAR 42
22579: PUSH
22580: LD_INT 21
22582: ST_TO_ADDR
22583: GO 22852
22585: LD_INT 21
22587: DOUBLE
22588: EQUAL
22589: IFTRUE 22593
22591: GO 22604
22593: POP
// bc_type := b_ext_computer ; 22 :
22594: LD_ADDR_OWVAR 42
22598: PUSH
22599: LD_INT 24
22601: ST_TO_ADDR
22602: GO 22852
22604: LD_INT 22
22606: DOUBLE
22607: EQUAL
22608: IFTRUE 22612
22610: GO 22623
22612: POP
// bc_type := b_ext_track ; 23 :
22613: LD_ADDR_OWVAR 42
22617: PUSH
22618: LD_INT 16
22620: ST_TO_ADDR
22621: GO 22852
22623: LD_INT 23
22625: DOUBLE
22626: EQUAL
22627: IFTRUE 22631
22629: GO 22642
22631: POP
// bc_type := b_ext_laser ; 24 :
22632: LD_ADDR_OWVAR 42
22636: PUSH
22637: LD_INT 25
22639: ST_TO_ADDR
22640: GO 22852
22642: LD_INT 24
22644: DOUBLE
22645: EQUAL
22646: IFTRUE 22650
22648: GO 22661
22650: POP
// bc_type := b_control_tower ; 25 :
22651: LD_ADDR_OWVAR 42
22655: PUSH
22656: LD_INT 36
22658: ST_TO_ADDR
22659: GO 22852
22661: LD_INT 25
22663: DOUBLE
22664: EQUAL
22665: IFTRUE 22669
22667: GO 22680
22669: POP
// bc_type := b_breastwork ; 26 :
22670: LD_ADDR_OWVAR 42
22674: PUSH
22675: LD_INT 31
22677: ST_TO_ADDR
22678: GO 22852
22680: LD_INT 26
22682: DOUBLE
22683: EQUAL
22684: IFTRUE 22688
22686: GO 22699
22688: POP
// bc_type := b_bunker ; 27 :
22689: LD_ADDR_OWVAR 42
22693: PUSH
22694: LD_INT 32
22696: ST_TO_ADDR
22697: GO 22852
22699: LD_INT 27
22701: DOUBLE
22702: EQUAL
22703: IFTRUE 22707
22705: GO 22718
22707: POP
// bc_type := b_turret ; 28 :
22708: LD_ADDR_OWVAR 42
22712: PUSH
22713: LD_INT 33
22715: ST_TO_ADDR
22716: GO 22852
22718: LD_INT 28
22720: DOUBLE
22721: EQUAL
22722: IFTRUE 22726
22724: GO 22737
22726: POP
// bc_type := b_armoury ; 29 :
22727: LD_ADDR_OWVAR 42
22731: PUSH
22732: LD_INT 4
22734: ST_TO_ADDR
22735: GO 22852
22737: LD_INT 29
22739: DOUBLE
22740: EQUAL
22741: IFTRUE 22745
22743: GO 22756
22745: POP
// bc_type := b_barracks ; 30 :
22746: LD_ADDR_OWVAR 42
22750: PUSH
22751: LD_INT 5
22753: ST_TO_ADDR
22754: GO 22852
22756: LD_INT 30
22758: DOUBLE
22759: EQUAL
22760: IFTRUE 22764
22762: GO 22775
22764: POP
// bc_type := b_solar_power ; 31 :
22765: LD_ADDR_OWVAR 42
22769: PUSH
22770: LD_INT 27
22772: ST_TO_ADDR
22773: GO 22852
22775: LD_INT 31
22777: DOUBLE
22778: EQUAL
22779: IFTRUE 22783
22781: GO 22794
22783: POP
// bc_type := b_oil_power ; 32 :
22784: LD_ADDR_OWVAR 42
22788: PUSH
22789: LD_INT 26
22791: ST_TO_ADDR
22792: GO 22852
22794: LD_INT 32
22796: DOUBLE
22797: EQUAL
22798: IFTRUE 22802
22800: GO 22813
22802: POP
// bc_type := b_siberite_power ; 33 :
22803: LD_ADDR_OWVAR 42
22807: PUSH
22808: LD_INT 28
22810: ST_TO_ADDR
22811: GO 22852
22813: LD_INT 33
22815: DOUBLE
22816: EQUAL
22817: IFTRUE 22821
22819: GO 22832
22821: POP
// bc_type := b_oil_mine ; 34 :
22822: LD_ADDR_OWVAR 42
22826: PUSH
22827: LD_INT 29
22829: ST_TO_ADDR
22830: GO 22852
22832: LD_INT 34
22834: DOUBLE
22835: EQUAL
22836: IFTRUE 22840
22838: GO 22851
22840: POP
// bc_type := b_siberite_mine ; end ;
22841: LD_ADDR_OWVAR 42
22845: PUSH
22846: LD_INT 30
22848: ST_TO_ADDR
22849: GO 22852
22851: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22852: LD_ADDR_VAR 0 8
22856: PUSH
22857: LD_VAR 0 5
22861: PPUSH
22862: LD_VAR 0 6
22866: PPUSH
22867: LD_VAR 0 3
22871: PPUSH
22872: CALL_OW 47
22876: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22877: LD_OWVAR 42
22881: PUSH
22882: LD_INT 32
22884: PUSH
22885: LD_INT 33
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: IN
22892: IFFALSE 22908
// PlaceWeaponTurret ( b , weapon ) ;
22894: LD_VAR 0 8
22898: PPUSH
22899: LD_VAR 0 4
22903: PPUSH
22904: CALL_OW 431
// end ;
22908: LD_VAR 0 7
22912: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22913: LD_INT 0
22915: PPUSH
22916: PPUSH
22917: PPUSH
22918: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22919: LD_ADDR_VAR 0 4
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_OWVAR 2
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 2
22938: PUSH
22939: LD_INT 30
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 30
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PPUSH
22968: CALL_OW 69
22972: ST_TO_ADDR
// if not tmp then
22973: LD_VAR 0 4
22977: NOT
22978: IFFALSE 22982
// exit ;
22980: GO 23041
// for i in tmp do
22982: LD_ADDR_VAR 0 2
22986: PUSH
22987: LD_VAR 0 4
22991: PUSH
22992: FOR_IN
22993: IFFALSE 23039
// for j = 1 to 3 do
22995: LD_ADDR_VAR 0 3
22999: PUSH
23000: DOUBLE
23001: LD_INT 1
23003: DEC
23004: ST_TO_ADDR
23005: LD_INT 3
23007: PUSH
23008: FOR_TO
23009: IFFALSE 23035
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23011: LD_VAR 0 2
23015: PPUSH
23016: CALL_OW 274
23020: PPUSH
23021: LD_VAR 0 3
23025: PPUSH
23026: LD_INT 99999
23028: PPUSH
23029: CALL_OW 277
23033: GO 23008
23035: POP
23036: POP
23037: GO 22992
23039: POP
23040: POP
// end ;
23041: LD_VAR 0 1
23045: RET
// export function hHackSetLevel10 ; var i , j ; begin
23046: LD_INT 0
23048: PPUSH
23049: PPUSH
23050: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23051: LD_ADDR_VAR 0 2
23055: PUSH
23056: LD_INT 21
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PPUSH
23066: CALL_OW 69
23070: PUSH
23071: FOR_IN
23072: IFFALSE 23124
// if IsSelected ( i ) then
23074: LD_VAR 0 2
23078: PPUSH
23079: CALL_OW 306
23083: IFFALSE 23122
// begin for j := 1 to 4 do
23085: LD_ADDR_VAR 0 3
23089: PUSH
23090: DOUBLE
23091: LD_INT 1
23093: DEC
23094: ST_TO_ADDR
23095: LD_INT 4
23097: PUSH
23098: FOR_TO
23099: IFFALSE 23120
// SetSkill ( i , j , 10 ) ;
23101: LD_VAR 0 2
23105: PPUSH
23106: LD_VAR 0 3
23110: PPUSH
23111: LD_INT 10
23113: PPUSH
23114: CALL_OW 237
23118: GO 23098
23120: POP
23121: POP
// end ;
23122: GO 23071
23124: POP
23125: POP
// end ;
23126: LD_VAR 0 1
23130: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23131: LD_INT 0
23133: PPUSH
23134: PPUSH
23135: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23136: LD_ADDR_VAR 0 2
23140: PUSH
23141: LD_INT 22
23143: PUSH
23144: LD_OWVAR 2
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 21
23155: PUSH
23156: LD_INT 1
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PPUSH
23167: CALL_OW 69
23171: PUSH
23172: FOR_IN
23173: IFFALSE 23214
// begin for j := 1 to 4 do
23175: LD_ADDR_VAR 0 3
23179: PUSH
23180: DOUBLE
23181: LD_INT 1
23183: DEC
23184: ST_TO_ADDR
23185: LD_INT 4
23187: PUSH
23188: FOR_TO
23189: IFFALSE 23210
// SetSkill ( i , j , 10 ) ;
23191: LD_VAR 0 2
23195: PPUSH
23196: LD_VAR 0 3
23200: PPUSH
23201: LD_INT 10
23203: PPUSH
23204: CALL_OW 237
23208: GO 23188
23210: POP
23211: POP
// end ;
23212: GO 23172
23214: POP
23215: POP
// end ;
23216: LD_VAR 0 1
23220: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23221: LD_INT 0
23223: PPUSH
// uc_side := your_side ;
23224: LD_ADDR_OWVAR 20
23228: PUSH
23229: LD_OWVAR 2
23233: ST_TO_ADDR
// uc_nation := nation ;
23234: LD_ADDR_OWVAR 21
23238: PUSH
23239: LD_VAR 0 1
23243: ST_TO_ADDR
// InitHc ;
23244: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23248: LD_INT 0
23250: PPUSH
23251: LD_VAR 0 2
23255: PPUSH
23256: LD_VAR 0 3
23260: PPUSH
23261: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23265: LD_VAR 0 4
23269: PPUSH
23270: LD_VAR 0 5
23274: PPUSH
23275: CALL_OW 428
23279: PUSH
23280: LD_INT 0
23282: EQUAL
23283: IFFALSE 23307
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23285: CALL_OW 44
23289: PPUSH
23290: LD_VAR 0 4
23294: PPUSH
23295: LD_VAR 0 5
23299: PPUSH
23300: LD_INT 1
23302: PPUSH
23303: CALL_OW 48
// end ;
23307: LD_VAR 0 6
23311: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23312: LD_INT 0
23314: PPUSH
23315: PPUSH
// uc_side := your_side ;
23316: LD_ADDR_OWVAR 20
23320: PUSH
23321: LD_OWVAR 2
23325: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23326: LD_VAR 0 1
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: LD_INT 2
23336: PUSH
23337: LD_INT 3
23339: PUSH
23340: LD_INT 4
23342: PUSH
23343: LD_INT 5
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: IN
23353: IFFALSE 23365
// uc_nation := nation_american else
23355: LD_ADDR_OWVAR 21
23359: PUSH
23360: LD_INT 1
23362: ST_TO_ADDR
23363: GO 23408
// if chassis in [ 11 , 12 , 13 , 14 ] then
23365: LD_VAR 0 1
23369: PUSH
23370: LD_INT 11
23372: PUSH
23373: LD_INT 12
23375: PUSH
23376: LD_INT 13
23378: PUSH
23379: LD_INT 14
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: IN
23388: IFFALSE 23400
// uc_nation := nation_arabian else
23390: LD_ADDR_OWVAR 21
23394: PUSH
23395: LD_INT 2
23397: ST_TO_ADDR
23398: GO 23408
// uc_nation := nation_russian ;
23400: LD_ADDR_OWVAR 21
23404: PUSH
23405: LD_INT 3
23407: ST_TO_ADDR
// vc_chassis := chassis ;
23408: LD_ADDR_OWVAR 37
23412: PUSH
23413: LD_VAR 0 1
23417: ST_TO_ADDR
// vc_engine := engine ;
23418: LD_ADDR_OWVAR 39
23422: PUSH
23423: LD_VAR 0 2
23427: ST_TO_ADDR
// vc_control := control ;
23428: LD_ADDR_OWVAR 38
23432: PUSH
23433: LD_VAR 0 3
23437: ST_TO_ADDR
// vc_weapon := weapon ;
23438: LD_ADDR_OWVAR 40
23442: PUSH
23443: LD_VAR 0 4
23447: ST_TO_ADDR
// un := CreateVehicle ;
23448: LD_ADDR_VAR 0 8
23452: PUSH
23453: CALL_OW 45
23457: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23458: LD_VAR 0 8
23462: PPUSH
23463: LD_INT 0
23465: PPUSH
23466: LD_INT 5
23468: PPUSH
23469: CALL_OW 12
23473: PPUSH
23474: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23478: LD_VAR 0 8
23482: PPUSH
23483: LD_VAR 0 5
23487: PPUSH
23488: LD_VAR 0 6
23492: PPUSH
23493: LD_INT 1
23495: PPUSH
23496: CALL_OW 48
// end ;
23500: LD_VAR 0 7
23504: RET
// export hInvincible ; every 1 do
23505: GO 23507
23507: DISABLE
// hInvincible := [ ] ;
23508: LD_ADDR_EXP 101
23512: PUSH
23513: EMPTY
23514: ST_TO_ADDR
23515: END
// every 10 do var i ;
23516: GO 23518
23518: DISABLE
23519: LD_INT 0
23521: PPUSH
// begin enable ;
23522: ENABLE
// if not hInvincible then
23523: LD_EXP 101
23527: NOT
23528: IFFALSE 23532
// exit ;
23530: GO 23576
// for i in hInvincible do
23532: LD_ADDR_VAR 0 1
23536: PUSH
23537: LD_EXP 101
23541: PUSH
23542: FOR_IN
23543: IFFALSE 23574
// if GetLives ( i ) < 1000 then
23545: LD_VAR 0 1
23549: PPUSH
23550: CALL_OW 256
23554: PUSH
23555: LD_INT 1000
23557: LESS
23558: IFFALSE 23572
// SetLives ( i , 1000 ) ;
23560: LD_VAR 0 1
23564: PPUSH
23565: LD_INT 1000
23567: PPUSH
23568: CALL_OW 234
23572: GO 23542
23574: POP
23575: POP
// end ;
23576: PPOPN 1
23578: END
// export function hHackInvincible ; var i ; begin
23579: LD_INT 0
23581: PPUSH
23582: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23583: LD_ADDR_VAR 0 2
23587: PUSH
23588: LD_INT 2
23590: PUSH
23591: LD_INT 21
23593: PUSH
23594: LD_INT 1
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 21
23603: PUSH
23604: LD_INT 2
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: PPUSH
23616: CALL_OW 69
23620: PUSH
23621: FOR_IN
23622: IFFALSE 23683
// if IsSelected ( i ) then
23624: LD_VAR 0 2
23628: PPUSH
23629: CALL_OW 306
23633: IFFALSE 23681
// begin if i in hInvincible then
23635: LD_VAR 0 2
23639: PUSH
23640: LD_EXP 101
23644: IN
23645: IFFALSE 23665
// hInvincible := hInvincible diff i else
23647: LD_ADDR_EXP 101
23651: PUSH
23652: LD_EXP 101
23656: PUSH
23657: LD_VAR 0 2
23661: DIFF
23662: ST_TO_ADDR
23663: GO 23681
// hInvincible := hInvincible union i ;
23665: LD_ADDR_EXP 101
23669: PUSH
23670: LD_EXP 101
23674: PUSH
23675: LD_VAR 0 2
23679: UNION
23680: ST_TO_ADDR
// end ;
23681: GO 23621
23683: POP
23684: POP
// end ;
23685: LD_VAR 0 1
23689: RET
// export function hHackInvisible ; var i , j ; begin
23690: LD_INT 0
23692: PPUSH
23693: PPUSH
23694: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23695: LD_ADDR_VAR 0 2
23699: PUSH
23700: LD_INT 21
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PPUSH
23710: CALL_OW 69
23714: PUSH
23715: FOR_IN
23716: IFFALSE 23740
// if IsSelected ( i ) then
23718: LD_VAR 0 2
23722: PPUSH
23723: CALL_OW 306
23727: IFFALSE 23738
// ComForceInvisible ( i ) ;
23729: LD_VAR 0 2
23733: PPUSH
23734: CALL_OW 496
23738: GO 23715
23740: POP
23741: POP
// end ;
23742: LD_VAR 0 1
23746: RET
// export function hHackChangeYourSide ; begin
23747: LD_INT 0
23749: PPUSH
// if your_side = 8 then
23750: LD_OWVAR 2
23754: PUSH
23755: LD_INT 8
23757: EQUAL
23758: IFFALSE 23770
// your_side := 0 else
23760: LD_ADDR_OWVAR 2
23764: PUSH
23765: LD_INT 0
23767: ST_TO_ADDR
23768: GO 23784
// your_side := your_side + 1 ;
23770: LD_ADDR_OWVAR 2
23774: PUSH
23775: LD_OWVAR 2
23779: PUSH
23780: LD_INT 1
23782: PLUS
23783: ST_TO_ADDR
// end ;
23784: LD_VAR 0 1
23788: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23789: LD_INT 0
23791: PPUSH
23792: PPUSH
23793: PPUSH
// for i in all_units do
23794: LD_ADDR_VAR 0 2
23798: PUSH
23799: LD_OWVAR 3
23803: PUSH
23804: FOR_IN
23805: IFFALSE 23883
// if IsSelected ( i ) then
23807: LD_VAR 0 2
23811: PPUSH
23812: CALL_OW 306
23816: IFFALSE 23881
// begin j := GetSide ( i ) ;
23818: LD_ADDR_VAR 0 3
23822: PUSH
23823: LD_VAR 0 2
23827: PPUSH
23828: CALL_OW 255
23832: ST_TO_ADDR
// if j = 8 then
23833: LD_VAR 0 3
23837: PUSH
23838: LD_INT 8
23840: EQUAL
23841: IFFALSE 23853
// j := 0 else
23843: LD_ADDR_VAR 0 3
23847: PUSH
23848: LD_INT 0
23850: ST_TO_ADDR
23851: GO 23867
// j := j + 1 ;
23853: LD_ADDR_VAR 0 3
23857: PUSH
23858: LD_VAR 0 3
23862: PUSH
23863: LD_INT 1
23865: PLUS
23866: ST_TO_ADDR
// SetSide ( i , j ) ;
23867: LD_VAR 0 2
23871: PPUSH
23872: LD_VAR 0 3
23876: PPUSH
23877: CALL_OW 235
// end ;
23881: GO 23804
23883: POP
23884: POP
// end ;
23885: LD_VAR 0 1
23889: RET
// export function hHackFog ; begin
23890: LD_INT 0
23892: PPUSH
// FogOff ( true ) ;
23893: LD_INT 1
23895: PPUSH
23896: CALL_OW 344
// end ;
23900: LD_VAR 0 1
23904: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23905: LD_INT 0
23907: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23908: LD_VAR 0 1
23912: PPUSH
23913: LD_VAR 0 2
23917: PPUSH
23918: LD_VAR 0 3
23922: PPUSH
23923: LD_INT 1
23925: PPUSH
23926: LD_INT 1
23928: PPUSH
23929: CALL_OW 483
// CenterOnXY ( x , y ) ;
23933: LD_VAR 0 2
23937: PPUSH
23938: LD_VAR 0 3
23942: PPUSH
23943: CALL_OW 84
// end ; end_of_file
23947: LD_VAR 0 4
23951: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23952: LD_INT 0
23954: PPUSH
23955: PPUSH
23956: PPUSH
23957: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23958: LD_VAR 0 1
23962: PPUSH
23963: CALL_OW 264
23967: PUSH
23968: LD_EXP 29
23972: EQUAL
23973: IFFALSE 24045
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23975: LD_INT 68
23977: PPUSH
23978: LD_VAR 0 1
23982: PPUSH
23983: CALL_OW 255
23987: PPUSH
23988: CALL_OW 321
23992: PUSH
23993: LD_INT 2
23995: EQUAL
23996: IFFALSE 24008
// eff := 70 else
23998: LD_ADDR_VAR 0 4
24002: PUSH
24003: LD_INT 70
24005: ST_TO_ADDR
24006: GO 24016
// eff := 30 ;
24008: LD_ADDR_VAR 0 4
24012: PUSH
24013: LD_INT 30
24015: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24016: LD_VAR 0 1
24020: PPUSH
24021: CALL_OW 250
24025: PPUSH
24026: LD_VAR 0 1
24030: PPUSH
24031: CALL_OW 251
24035: PPUSH
24036: LD_VAR 0 4
24040: PPUSH
24041: CALL_OW 495
// end ; end ;
24045: LD_VAR 0 2
24049: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24050: LD_INT 0
24052: PPUSH
// end ;
24053: LD_VAR 0 4
24057: RET
// export function SOS_Command ( cmd ) ; begin
24058: LD_INT 0
24060: PPUSH
// end ;
24061: LD_VAR 0 2
24065: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24066: LD_INT 0
24068: PPUSH
// end ;
24069: LD_VAR 0 6
24073: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24074: LD_INT 0
24076: PPUSH
24077: PPUSH
// if not vehicle or not factory then
24078: LD_VAR 0 1
24082: NOT
24083: PUSH
24084: LD_VAR 0 2
24088: NOT
24089: OR
24090: IFFALSE 24094
// exit ;
24092: GO 24325
// if factoryWaypoints >= factory then
24094: LD_EXP 102
24098: PUSH
24099: LD_VAR 0 2
24103: GREATEREQUAL
24104: IFFALSE 24325
// if factoryWaypoints [ factory ] then
24106: LD_EXP 102
24110: PUSH
24111: LD_VAR 0 2
24115: ARRAY
24116: IFFALSE 24325
// begin if GetControl ( vehicle ) = control_manual then
24118: LD_VAR 0 1
24122: PPUSH
24123: CALL_OW 263
24127: PUSH
24128: LD_INT 1
24130: EQUAL
24131: IFFALSE 24212
// begin driver := IsDrivenBy ( vehicle ) ;
24133: LD_ADDR_VAR 0 4
24137: PUSH
24138: LD_VAR 0 1
24142: PPUSH
24143: CALL_OW 311
24147: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
24148: LD_VAR 0 4
24152: PPUSH
24153: LD_EXP 102
24157: PUSH
24158: LD_VAR 0 2
24162: ARRAY
24163: PUSH
24164: LD_INT 1
24166: ARRAY
24167: PPUSH
24168: LD_EXP 102
24172: PUSH
24173: LD_VAR 0 2
24177: ARRAY
24178: PUSH
24179: LD_INT 2
24181: ARRAY
24182: PPUSH
24183: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24187: LD_VAR 0 4
24191: PPUSH
24192: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24196: LD_VAR 0 4
24200: PPUSH
24201: LD_VAR 0 2
24205: PPUSH
24206: CALL_OW 180
// end else
24210: GO 24325
// if GetControl ( vehicle ) = control_remote then
24212: LD_VAR 0 1
24216: PPUSH
24217: CALL_OW 263
24221: PUSH
24222: LD_INT 2
24224: EQUAL
24225: IFFALSE 24286
// begin wait ( 0 0$2 ) ;
24227: LD_INT 70
24229: PPUSH
24230: CALL_OW 67
// if Connect ( vehicle ) then
24234: LD_VAR 0 1
24238: PPUSH
24239: CALL 36549 0 1
24243: IFFALSE 24284
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
24245: LD_VAR 0 1
24249: PPUSH
24250: LD_EXP 102
24254: PUSH
24255: LD_VAR 0 2
24259: ARRAY
24260: PUSH
24261: LD_INT 1
24263: ARRAY
24264: PPUSH
24265: LD_EXP 102
24269: PUSH
24270: LD_VAR 0 2
24274: ARRAY
24275: PUSH
24276: LD_INT 2
24278: ARRAY
24279: PPUSH
24280: CALL_OW 171
// end else
24284: GO 24325
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
24286: LD_VAR 0 1
24290: PPUSH
24291: LD_EXP 102
24295: PUSH
24296: LD_VAR 0 2
24300: ARRAY
24301: PUSH
24302: LD_INT 1
24304: ARRAY
24305: PPUSH
24306: LD_EXP 102
24310: PUSH
24311: LD_VAR 0 2
24315: ARRAY
24316: PUSH
24317: LD_INT 2
24319: ARRAY
24320: PPUSH
24321: CALL_OW 171
// end ; end ;
24325: LD_VAR 0 3
24329: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24330: LD_INT 0
24332: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24333: LD_VAR 0 1
24337: PUSH
24338: LD_INT 250
24340: EQUAL
24341: PUSH
24342: LD_VAR 0 2
24346: PPUSH
24347: CALL_OW 264
24351: PUSH
24352: LD_EXP 32
24356: EQUAL
24357: AND
24358: IFFALSE 24379
// MinerPlaceMine ( unit , x , y ) ;
24360: LD_VAR 0 2
24364: PPUSH
24365: LD_VAR 0 4
24369: PPUSH
24370: LD_VAR 0 5
24374: PPUSH
24375: CALL 27107 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24379: LD_VAR 0 1
24383: PUSH
24384: LD_INT 251
24386: EQUAL
24387: PUSH
24388: LD_VAR 0 2
24392: PPUSH
24393: CALL_OW 264
24397: PUSH
24398: LD_EXP 32
24402: EQUAL
24403: AND
24404: IFFALSE 24425
// MinerDetonateMine ( unit , x , y ) ;
24406: LD_VAR 0 2
24410: PPUSH
24411: LD_VAR 0 4
24415: PPUSH
24416: LD_VAR 0 5
24420: PPUSH
24421: CALL 27384 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24425: LD_VAR 0 1
24429: PUSH
24430: LD_INT 252
24432: EQUAL
24433: PUSH
24434: LD_VAR 0 2
24438: PPUSH
24439: CALL_OW 264
24443: PUSH
24444: LD_EXP 32
24448: EQUAL
24449: AND
24450: IFFALSE 24471
// MinerCreateMinefield ( unit , x , y ) ;
24452: LD_VAR 0 2
24456: PPUSH
24457: LD_VAR 0 4
24461: PPUSH
24462: LD_VAR 0 5
24466: PPUSH
24467: CALL 27801 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24471: LD_VAR 0 1
24475: PUSH
24476: LD_INT 253
24478: EQUAL
24479: PUSH
24480: LD_VAR 0 2
24484: PPUSH
24485: CALL_OW 257
24489: PUSH
24490: LD_INT 5
24492: EQUAL
24493: AND
24494: IFFALSE 24515
// ComBinocular ( unit , x , y ) ;
24496: LD_VAR 0 2
24500: PPUSH
24501: LD_VAR 0 4
24505: PPUSH
24506: LD_VAR 0 5
24510: PPUSH
24511: CALL 28172 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24515: LD_VAR 0 1
24519: PUSH
24520: LD_INT 254
24522: EQUAL
24523: PUSH
24524: LD_VAR 0 2
24528: PPUSH
24529: CALL_OW 264
24533: PUSH
24534: LD_EXP 27
24538: EQUAL
24539: AND
24540: PUSH
24541: LD_VAR 0 3
24545: PPUSH
24546: CALL_OW 263
24550: PUSH
24551: LD_INT 3
24553: EQUAL
24554: AND
24555: IFFALSE 24571
// HackDestroyVehicle ( unit , selectedUnit ) ;
24557: LD_VAR 0 2
24561: PPUSH
24562: LD_VAR 0 3
24566: PPUSH
24567: CALL 26467 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24571: LD_VAR 0 1
24575: PUSH
24576: LD_INT 255
24578: EQUAL
24579: PUSH
24580: LD_VAR 0 2
24584: PPUSH
24585: CALL_OW 264
24589: PUSH
24590: LD_INT 14
24592: PUSH
24593: LD_INT 53
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: IN
24600: AND
24601: PUSH
24602: LD_VAR 0 4
24606: PPUSH
24607: LD_VAR 0 5
24611: PPUSH
24612: CALL_OW 488
24616: AND
24617: IFFALSE 24641
// CutTreeXYR ( unit , x , y , 12 ) ;
24619: LD_VAR 0 2
24623: PPUSH
24624: LD_VAR 0 4
24628: PPUSH
24629: LD_VAR 0 5
24633: PPUSH
24634: LD_INT 12
24636: PPUSH
24637: CALL 25033 0 4
// if cmd = 256 then
24641: LD_VAR 0 1
24645: PUSH
24646: LD_INT 256
24648: EQUAL
24649: IFFALSE 24670
// SetFactoryWaypoint ( unit , x , y ) ;
24651: LD_VAR 0 2
24655: PPUSH
24656: LD_VAR 0 4
24660: PPUSH
24661: LD_VAR 0 5
24665: PPUSH
24666: CALL 24675 0 3
// end ;
24670: LD_VAR 0 6
24674: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24675: LD_INT 0
24677: PPUSH
24678: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24679: LD_VAR 0 1
24683: NOT
24684: PUSH
24685: LD_VAR 0 2
24689: PPUSH
24690: LD_VAR 0 3
24694: PPUSH
24695: CALL_OW 488
24699: NOT
24700: OR
24701: PUSH
24702: LD_VAR 0 1
24706: PPUSH
24707: CALL_OW 266
24711: PUSH
24712: LD_INT 3
24714: NONEQUAL
24715: PUSH
24716: LD_VAR 0 1
24720: PPUSH
24721: CALL_OW 247
24725: PUSH
24726: LD_INT 1
24728: EQUAL
24729: NOT
24730: AND
24731: OR
24732: IFFALSE 24736
// exit ;
24734: GO 24885
// if GetType ( factory ) = unit_human then
24736: LD_VAR 0 1
24740: PPUSH
24741: CALL_OW 247
24745: PUSH
24746: LD_INT 1
24748: EQUAL
24749: IFFALSE 24766
// factory := IsInUnit ( factory ) ;
24751: LD_ADDR_VAR 0 1
24755: PUSH
24756: LD_VAR 0 1
24760: PPUSH
24761: CALL_OW 310
24765: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24766: LD_VAR 0 1
24770: PPUSH
24771: CALL_OW 266
24775: PUSH
24776: LD_INT 3
24778: NONEQUAL
24779: IFFALSE 24783
// exit ;
24781: GO 24885
// if HexInfo ( x , y ) = factory then
24783: LD_VAR 0 2
24787: PPUSH
24788: LD_VAR 0 3
24792: PPUSH
24793: CALL_OW 428
24797: PUSH
24798: LD_VAR 0 1
24802: EQUAL
24803: IFFALSE 24830
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24805: LD_ADDR_EXP 102
24809: PUSH
24810: LD_EXP 102
24814: PPUSH
24815: LD_VAR 0 1
24819: PPUSH
24820: LD_INT 0
24822: PPUSH
24823: CALL_OW 1
24827: ST_TO_ADDR
24828: GO 24881
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24830: LD_ADDR_EXP 102
24834: PUSH
24835: LD_EXP 102
24839: PPUSH
24840: LD_VAR 0 1
24844: PPUSH
24845: LD_VAR 0 1
24849: PPUSH
24850: CALL_OW 255
24854: PUSH
24855: LD_VAR 0 1
24859: PUSH
24860: LD_VAR 0 2
24864: PUSH
24865: LD_VAR 0 3
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: PPUSH
24876: CALL_OW 1
24880: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24881: CALL 24890 0 0
// end ;
24885: LD_VAR 0 4
24889: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
24890: LD_INT 0
24892: PPUSH
24893: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24894: LD_STRING resetFactoryWaypoint();
24896: PPUSH
24897: CALL_OW 559
// if factoryWaypoints then
24901: LD_EXP 102
24905: IFFALSE 25028
// begin for i := 1 to factoryWaypoints do
24907: LD_ADDR_VAR 0 2
24911: PUSH
24912: DOUBLE
24913: LD_INT 1
24915: DEC
24916: ST_TO_ADDR
24917: LD_EXP 102
24921: PUSH
24922: FOR_TO
24923: IFFALSE 25026
// if factoryWaypoints [ i ] then
24925: LD_EXP 102
24929: PUSH
24930: LD_VAR 0 2
24934: ARRAY
24935: IFFALSE 25024
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
24937: LD_STRING setFactoryWaypointXY(
24939: PUSH
24940: LD_EXP 102
24944: PUSH
24945: LD_VAR 0 2
24949: ARRAY
24950: PUSH
24951: LD_INT 1
24953: ARRAY
24954: STR
24955: PUSH
24956: LD_STRING ,
24958: STR
24959: PUSH
24960: LD_EXP 102
24964: PUSH
24965: LD_VAR 0 2
24969: ARRAY
24970: PUSH
24971: LD_INT 2
24973: ARRAY
24974: STR
24975: PUSH
24976: LD_STRING ,
24978: STR
24979: PUSH
24980: LD_EXP 102
24984: PUSH
24985: LD_VAR 0 2
24989: ARRAY
24990: PUSH
24991: LD_INT 3
24993: ARRAY
24994: STR
24995: PUSH
24996: LD_STRING ,
24998: STR
24999: PUSH
25000: LD_EXP 102
25004: PUSH
25005: LD_VAR 0 2
25009: ARRAY
25010: PUSH
25011: LD_INT 4
25013: ARRAY
25014: STR
25015: PUSH
25016: LD_STRING )
25018: STR
25019: PPUSH
25020: CALL_OW 559
25024: GO 24922
25026: POP
25027: POP
// end ; end ;
25028: LD_VAR 0 1
25032: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25033: LD_INT 0
25035: PPUSH
25036: PPUSH
25037: PPUSH
25038: PPUSH
25039: PPUSH
25040: PPUSH
25041: PPUSH
25042: PPUSH
25043: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25044: LD_VAR 0 1
25048: NOT
25049: PUSH
25050: LD_VAR 0 2
25054: PPUSH
25055: LD_VAR 0 3
25059: PPUSH
25060: CALL_OW 488
25064: NOT
25065: OR
25066: PUSH
25067: LD_VAR 0 4
25071: NOT
25072: OR
25073: IFFALSE 25077
// exit ;
25075: GO 25417
// list := [ ] ;
25077: LD_ADDR_VAR 0 13
25081: PUSH
25082: EMPTY
25083: ST_TO_ADDR
// if x - r < 0 then
25084: LD_VAR 0 2
25088: PUSH
25089: LD_VAR 0 4
25093: MINUS
25094: PUSH
25095: LD_INT 0
25097: LESS
25098: IFFALSE 25110
// min_x := 0 else
25100: LD_ADDR_VAR 0 7
25104: PUSH
25105: LD_INT 0
25107: ST_TO_ADDR
25108: GO 25126
// min_x := x - r ;
25110: LD_ADDR_VAR 0 7
25114: PUSH
25115: LD_VAR 0 2
25119: PUSH
25120: LD_VAR 0 4
25124: MINUS
25125: ST_TO_ADDR
// if y - r < 0 then
25126: LD_VAR 0 3
25130: PUSH
25131: LD_VAR 0 4
25135: MINUS
25136: PUSH
25137: LD_INT 0
25139: LESS
25140: IFFALSE 25152
// min_y := 0 else
25142: LD_ADDR_VAR 0 8
25146: PUSH
25147: LD_INT 0
25149: ST_TO_ADDR
25150: GO 25168
// min_y := y - r ;
25152: LD_ADDR_VAR 0 8
25156: PUSH
25157: LD_VAR 0 3
25161: PUSH
25162: LD_VAR 0 4
25166: MINUS
25167: ST_TO_ADDR
// max_x := x + r ;
25168: LD_ADDR_VAR 0 9
25172: PUSH
25173: LD_VAR 0 2
25177: PUSH
25178: LD_VAR 0 4
25182: PLUS
25183: ST_TO_ADDR
// max_y := y + r ;
25184: LD_ADDR_VAR 0 10
25188: PUSH
25189: LD_VAR 0 3
25193: PUSH
25194: LD_VAR 0 4
25198: PLUS
25199: ST_TO_ADDR
// for _x = min_x to max_x do
25200: LD_ADDR_VAR 0 11
25204: PUSH
25205: DOUBLE
25206: LD_VAR 0 7
25210: DEC
25211: ST_TO_ADDR
25212: LD_VAR 0 9
25216: PUSH
25217: FOR_TO
25218: IFFALSE 25335
// for _y = min_y to max_y do
25220: LD_ADDR_VAR 0 12
25224: PUSH
25225: DOUBLE
25226: LD_VAR 0 8
25230: DEC
25231: ST_TO_ADDR
25232: LD_VAR 0 10
25236: PUSH
25237: FOR_TO
25238: IFFALSE 25331
// begin if not ValidHex ( _x , _y ) then
25240: LD_VAR 0 11
25244: PPUSH
25245: LD_VAR 0 12
25249: PPUSH
25250: CALL_OW 488
25254: NOT
25255: IFFALSE 25259
// continue ;
25257: GO 25237
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25259: LD_VAR 0 11
25263: PPUSH
25264: LD_VAR 0 12
25268: PPUSH
25269: CALL_OW 351
25273: PUSH
25274: LD_VAR 0 11
25278: PPUSH
25279: LD_VAR 0 12
25283: PPUSH
25284: CALL_OW 554
25288: AND
25289: IFFALSE 25329
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25291: LD_ADDR_VAR 0 13
25295: PUSH
25296: LD_VAR 0 13
25300: PPUSH
25301: LD_VAR 0 13
25305: PUSH
25306: LD_INT 1
25308: PLUS
25309: PPUSH
25310: LD_VAR 0 11
25314: PUSH
25315: LD_VAR 0 12
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PPUSH
25324: CALL_OW 2
25328: ST_TO_ADDR
// end ;
25329: GO 25237
25331: POP
25332: POP
25333: GO 25217
25335: POP
25336: POP
// if not list then
25337: LD_VAR 0 13
25341: NOT
25342: IFFALSE 25346
// exit ;
25344: GO 25417
// for i in list do
25346: LD_ADDR_VAR 0 6
25350: PUSH
25351: LD_VAR 0 13
25355: PUSH
25356: FOR_IN
25357: IFFALSE 25415
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25359: LD_VAR 0 1
25363: PPUSH
25364: LD_STRING M
25366: PUSH
25367: LD_VAR 0 6
25371: PUSH
25372: LD_INT 1
25374: ARRAY
25375: PUSH
25376: LD_VAR 0 6
25380: PUSH
25381: LD_INT 2
25383: ARRAY
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: PUSH
25406: EMPTY
25407: LIST
25408: PPUSH
25409: CALL_OW 447
25413: GO 25356
25415: POP
25416: POP
// end ;
25417: LD_VAR 0 5
25421: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25422: LD_EXP 103
25426: NOT
25427: IFFALSE 25477
25429: GO 25431
25431: DISABLE
// begin initHack := true ;
25432: LD_ADDR_EXP 103
25436: PUSH
25437: LD_INT 1
25439: ST_TO_ADDR
// hackTanks := [ ] ;
25440: LD_ADDR_EXP 104
25444: PUSH
25445: EMPTY
25446: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25447: LD_ADDR_EXP 105
25451: PUSH
25452: EMPTY
25453: ST_TO_ADDR
// hackLimit := 3 ;
25454: LD_ADDR_EXP 106
25458: PUSH
25459: LD_INT 3
25461: ST_TO_ADDR
// hackDist := 12 ;
25462: LD_ADDR_EXP 107
25466: PUSH
25467: LD_INT 12
25469: ST_TO_ADDR
// hackCounter := [ ] ;
25470: LD_ADDR_EXP 108
25474: PUSH
25475: EMPTY
25476: ST_TO_ADDR
// end ;
25477: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25478: LD_EXP 103
25482: PUSH
25483: LD_INT 34
25485: PUSH
25486: LD_EXP 27
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PPUSH
25495: CALL_OW 69
25499: AND
25500: IFFALSE 25755
25502: GO 25504
25504: DISABLE
25505: LD_INT 0
25507: PPUSH
25508: PPUSH
// begin enable ;
25509: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25510: LD_ADDR_VAR 0 1
25514: PUSH
25515: LD_INT 34
25517: PUSH
25518: LD_EXP 27
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PPUSH
25527: CALL_OW 69
25531: PUSH
25532: FOR_IN
25533: IFFALSE 25753
// begin if not i in hackTanks then
25535: LD_VAR 0 1
25539: PUSH
25540: LD_EXP 104
25544: IN
25545: NOT
25546: IFFALSE 25629
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25548: LD_ADDR_EXP 104
25552: PUSH
25553: LD_EXP 104
25557: PPUSH
25558: LD_EXP 104
25562: PUSH
25563: LD_INT 1
25565: PLUS
25566: PPUSH
25567: LD_VAR 0 1
25571: PPUSH
25572: CALL_OW 1
25576: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25577: LD_ADDR_EXP 105
25581: PUSH
25582: LD_EXP 105
25586: PPUSH
25587: LD_EXP 105
25591: PUSH
25592: LD_INT 1
25594: PLUS
25595: PPUSH
25596: EMPTY
25597: PPUSH
25598: CALL_OW 1
25602: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25603: LD_ADDR_EXP 108
25607: PUSH
25608: LD_EXP 108
25612: PPUSH
25613: LD_EXP 108
25617: PUSH
25618: LD_INT 1
25620: PLUS
25621: PPUSH
25622: EMPTY
25623: PPUSH
25624: CALL_OW 1
25628: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25629: LD_VAR 0 1
25633: PPUSH
25634: CALL_OW 302
25638: NOT
25639: IFFALSE 25652
// begin HackUnlinkAll ( i ) ;
25641: LD_VAR 0 1
25645: PPUSH
25646: CALL 25758 0 1
// continue ;
25650: GO 25532
// end ; HackCheckCapturedStatus ( i ) ;
25652: LD_VAR 0 1
25656: PPUSH
25657: CALL 26201 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25661: LD_ADDR_VAR 0 2
25665: PUSH
25666: LD_INT 81
25668: PUSH
25669: LD_VAR 0 1
25673: PPUSH
25674: CALL_OW 255
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 33
25685: PUSH
25686: LD_INT 3
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 91
25695: PUSH
25696: LD_VAR 0 1
25700: PUSH
25701: LD_EXP 107
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 50
25713: PUSH
25714: EMPTY
25715: LIST
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: PPUSH
25723: CALL_OW 69
25727: ST_TO_ADDR
// if not tmp then
25728: LD_VAR 0 2
25732: NOT
25733: IFFALSE 25737
// continue ;
25735: GO 25532
// HackLink ( i , tmp ) ;
25737: LD_VAR 0 1
25741: PPUSH
25742: LD_VAR 0 2
25746: PPUSH
25747: CALL 25894 0 2
// end ;
25751: GO 25532
25753: POP
25754: POP
// end ;
25755: PPOPN 2
25757: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25758: LD_INT 0
25760: PPUSH
25761: PPUSH
25762: PPUSH
// if not hack in hackTanks then
25763: LD_VAR 0 1
25767: PUSH
25768: LD_EXP 104
25772: IN
25773: NOT
25774: IFFALSE 25778
// exit ;
25776: GO 25889
// index := GetElementIndex ( hackTanks , hack ) ;
25778: LD_ADDR_VAR 0 4
25782: PUSH
25783: LD_EXP 104
25787: PPUSH
25788: LD_VAR 0 1
25792: PPUSH
25793: CALL 33363 0 2
25797: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25798: LD_EXP 105
25802: PUSH
25803: LD_VAR 0 4
25807: ARRAY
25808: IFFALSE 25889
// begin for i in hackTanksCaptured [ index ] do
25810: LD_ADDR_VAR 0 3
25814: PUSH
25815: LD_EXP 105
25819: PUSH
25820: LD_VAR 0 4
25824: ARRAY
25825: PUSH
25826: FOR_IN
25827: IFFALSE 25853
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25829: LD_VAR 0 3
25833: PUSH
25834: LD_INT 1
25836: ARRAY
25837: PPUSH
25838: LD_VAR 0 3
25842: PUSH
25843: LD_INT 2
25845: ARRAY
25846: PPUSH
25847: CALL_OW 235
25851: GO 25826
25853: POP
25854: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25855: LD_ADDR_EXP 105
25859: PUSH
25860: LD_EXP 105
25864: PPUSH
25865: LD_VAR 0 4
25869: PPUSH
25870: EMPTY
25871: PPUSH
25872: CALL_OW 1
25876: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25877: LD_VAR 0 1
25881: PPUSH
25882: LD_INT 0
25884: PPUSH
25885: CALL_OW 505
// end ; end ;
25889: LD_VAR 0 2
25893: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25894: LD_INT 0
25896: PPUSH
25897: PPUSH
25898: PPUSH
// if not hack in hackTanks or not vehicles then
25899: LD_VAR 0 1
25903: PUSH
25904: LD_EXP 104
25908: IN
25909: NOT
25910: PUSH
25911: LD_VAR 0 2
25915: NOT
25916: OR
25917: IFFALSE 25921
// exit ;
25919: GO 26196
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25921: LD_ADDR_VAR 0 2
25925: PUSH
25926: LD_VAR 0 1
25930: PPUSH
25931: LD_VAR 0 2
25935: PPUSH
25936: LD_INT 1
25938: PPUSH
25939: LD_INT 1
25941: PPUSH
25942: CALL 34013 0 4
25946: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25947: LD_ADDR_VAR 0 5
25951: PUSH
25952: LD_EXP 104
25956: PPUSH
25957: LD_VAR 0 1
25961: PPUSH
25962: CALL 33363 0 2
25966: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25967: LD_EXP 105
25971: PUSH
25972: LD_VAR 0 5
25976: ARRAY
25977: PUSH
25978: LD_EXP 106
25982: LESS
25983: IFFALSE 26172
// begin for i := 1 to vehicles do
25985: LD_ADDR_VAR 0 4
25989: PUSH
25990: DOUBLE
25991: LD_INT 1
25993: DEC
25994: ST_TO_ADDR
25995: LD_VAR 0 2
25999: PUSH
26000: FOR_TO
26001: IFFALSE 26170
// begin if hackTanksCaptured [ index ] = hackLimit then
26003: LD_EXP 105
26007: PUSH
26008: LD_VAR 0 5
26012: ARRAY
26013: PUSH
26014: LD_EXP 106
26018: EQUAL
26019: IFFALSE 26023
// break ;
26021: GO 26170
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26023: LD_ADDR_EXP 108
26027: PUSH
26028: LD_EXP 108
26032: PPUSH
26033: LD_VAR 0 5
26037: PPUSH
26038: LD_EXP 108
26042: PUSH
26043: LD_VAR 0 5
26047: ARRAY
26048: PUSH
26049: LD_INT 1
26051: PLUS
26052: PPUSH
26053: CALL_OW 1
26057: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26058: LD_ADDR_EXP 105
26062: PUSH
26063: LD_EXP 105
26067: PPUSH
26068: LD_VAR 0 5
26072: PUSH
26073: LD_EXP 105
26077: PUSH
26078: LD_VAR 0 5
26082: ARRAY
26083: PUSH
26084: LD_INT 1
26086: PLUS
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PPUSH
26092: LD_VAR 0 2
26096: PUSH
26097: LD_VAR 0 4
26101: ARRAY
26102: PUSH
26103: LD_VAR 0 2
26107: PUSH
26108: LD_VAR 0 4
26112: ARRAY
26113: PPUSH
26114: CALL_OW 255
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PPUSH
26123: CALL 33578 0 3
26127: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26128: LD_VAR 0 2
26132: PUSH
26133: LD_VAR 0 4
26137: ARRAY
26138: PPUSH
26139: LD_VAR 0 1
26143: PPUSH
26144: CALL_OW 255
26148: PPUSH
26149: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26153: LD_VAR 0 2
26157: PUSH
26158: LD_VAR 0 4
26162: ARRAY
26163: PPUSH
26164: CALL_OW 141
// end ;
26168: GO 26000
26170: POP
26171: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26172: LD_VAR 0 1
26176: PPUSH
26177: LD_EXP 105
26181: PUSH
26182: LD_VAR 0 5
26186: ARRAY
26187: PUSH
26188: LD_INT 0
26190: PLUS
26191: PPUSH
26192: CALL_OW 505
// end ;
26196: LD_VAR 0 3
26200: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26201: LD_INT 0
26203: PPUSH
26204: PPUSH
26205: PPUSH
26206: PPUSH
// if not hack in hackTanks then
26207: LD_VAR 0 1
26211: PUSH
26212: LD_EXP 104
26216: IN
26217: NOT
26218: IFFALSE 26222
// exit ;
26220: GO 26462
// index := GetElementIndex ( hackTanks , hack ) ;
26222: LD_ADDR_VAR 0 4
26226: PUSH
26227: LD_EXP 104
26231: PPUSH
26232: LD_VAR 0 1
26236: PPUSH
26237: CALL 33363 0 2
26241: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26242: LD_ADDR_VAR 0 3
26246: PUSH
26247: DOUBLE
26248: LD_EXP 105
26252: PUSH
26253: LD_VAR 0 4
26257: ARRAY
26258: INC
26259: ST_TO_ADDR
26260: LD_INT 1
26262: PUSH
26263: FOR_DOWNTO
26264: IFFALSE 26436
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26266: LD_ADDR_VAR 0 5
26270: PUSH
26271: LD_EXP 105
26275: PUSH
26276: LD_VAR 0 4
26280: ARRAY
26281: PUSH
26282: LD_VAR 0 3
26286: ARRAY
26287: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26288: LD_VAR 0 5
26292: PUSH
26293: LD_INT 1
26295: ARRAY
26296: PPUSH
26297: CALL_OW 302
26301: NOT
26302: PUSH
26303: LD_VAR 0 5
26307: PUSH
26308: LD_INT 1
26310: ARRAY
26311: PPUSH
26312: CALL_OW 255
26316: PUSH
26317: LD_VAR 0 1
26321: PPUSH
26322: CALL_OW 255
26326: NONEQUAL
26327: OR
26328: IFFALSE 26434
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26330: LD_VAR 0 5
26334: PUSH
26335: LD_INT 1
26337: ARRAY
26338: PPUSH
26339: CALL_OW 305
26343: PUSH
26344: LD_VAR 0 5
26348: PUSH
26349: LD_INT 1
26351: ARRAY
26352: PPUSH
26353: CALL_OW 255
26357: PUSH
26358: LD_VAR 0 1
26362: PPUSH
26363: CALL_OW 255
26367: EQUAL
26368: AND
26369: IFFALSE 26393
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26371: LD_VAR 0 5
26375: PUSH
26376: LD_INT 1
26378: ARRAY
26379: PPUSH
26380: LD_VAR 0 5
26384: PUSH
26385: LD_INT 2
26387: ARRAY
26388: PPUSH
26389: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26393: LD_ADDR_EXP 105
26397: PUSH
26398: LD_EXP 105
26402: PPUSH
26403: LD_VAR 0 4
26407: PPUSH
26408: LD_EXP 105
26412: PUSH
26413: LD_VAR 0 4
26417: ARRAY
26418: PPUSH
26419: LD_VAR 0 3
26423: PPUSH
26424: CALL_OW 3
26428: PPUSH
26429: CALL_OW 1
26433: ST_TO_ADDR
// end ; end ;
26434: GO 26263
26436: POP
26437: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26438: LD_VAR 0 1
26442: PPUSH
26443: LD_EXP 105
26447: PUSH
26448: LD_VAR 0 4
26452: ARRAY
26453: PUSH
26454: LD_INT 0
26456: PLUS
26457: PPUSH
26458: CALL_OW 505
// end ;
26462: LD_VAR 0 2
26466: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26467: LD_INT 0
26469: PPUSH
26470: PPUSH
26471: PPUSH
26472: PPUSH
// if not hack in hackTanks then
26473: LD_VAR 0 1
26477: PUSH
26478: LD_EXP 104
26482: IN
26483: NOT
26484: IFFALSE 26488
// exit ;
26486: GO 26573
// index := GetElementIndex ( hackTanks , hack ) ;
26488: LD_ADDR_VAR 0 5
26492: PUSH
26493: LD_EXP 104
26497: PPUSH
26498: LD_VAR 0 1
26502: PPUSH
26503: CALL 33363 0 2
26507: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26508: LD_ADDR_VAR 0 4
26512: PUSH
26513: DOUBLE
26514: LD_INT 1
26516: DEC
26517: ST_TO_ADDR
26518: LD_EXP 105
26522: PUSH
26523: LD_VAR 0 5
26527: ARRAY
26528: PUSH
26529: FOR_TO
26530: IFFALSE 26571
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26532: LD_EXP 105
26536: PUSH
26537: LD_VAR 0 5
26541: ARRAY
26542: PUSH
26543: LD_VAR 0 4
26547: ARRAY
26548: PUSH
26549: LD_INT 1
26551: ARRAY
26552: PUSH
26553: LD_VAR 0 2
26557: EQUAL
26558: IFFALSE 26569
// KillUnit ( vehicle ) ;
26560: LD_VAR 0 2
26564: PPUSH
26565: CALL_OW 66
26569: GO 26529
26571: POP
26572: POP
// end ;
26573: LD_VAR 0 3
26577: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26578: LD_EXP 109
26582: NOT
26583: IFFALSE 26618
26585: GO 26587
26587: DISABLE
// begin initMiner := true ;
26588: LD_ADDR_EXP 109
26592: PUSH
26593: LD_INT 1
26595: ST_TO_ADDR
// minersList := [ ] ;
26596: LD_ADDR_EXP 110
26600: PUSH
26601: EMPTY
26602: ST_TO_ADDR
// minerMinesList := [ ] ;
26603: LD_ADDR_EXP 111
26607: PUSH
26608: EMPTY
26609: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26610: LD_ADDR_EXP 112
26614: PUSH
26615: LD_INT 5
26617: ST_TO_ADDR
// end ;
26618: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26619: LD_EXP 109
26623: PUSH
26624: LD_INT 34
26626: PUSH
26627: LD_EXP 32
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PPUSH
26636: CALL_OW 69
26640: AND
26641: IFFALSE 27104
26643: GO 26645
26645: DISABLE
26646: LD_INT 0
26648: PPUSH
26649: PPUSH
26650: PPUSH
26651: PPUSH
// begin enable ;
26652: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26653: LD_ADDR_VAR 0 1
26657: PUSH
26658: LD_INT 34
26660: PUSH
26661: LD_EXP 32
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PPUSH
26670: CALL_OW 69
26674: PUSH
26675: FOR_IN
26676: IFFALSE 26748
// begin if not i in minersList then
26678: LD_VAR 0 1
26682: PUSH
26683: LD_EXP 110
26687: IN
26688: NOT
26689: IFFALSE 26746
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26691: LD_ADDR_EXP 110
26695: PUSH
26696: LD_EXP 110
26700: PPUSH
26701: LD_EXP 110
26705: PUSH
26706: LD_INT 1
26708: PLUS
26709: PPUSH
26710: LD_VAR 0 1
26714: PPUSH
26715: CALL_OW 1
26719: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26720: LD_ADDR_EXP 111
26724: PUSH
26725: LD_EXP 111
26729: PPUSH
26730: LD_EXP 111
26734: PUSH
26735: LD_INT 1
26737: PLUS
26738: PPUSH
26739: EMPTY
26740: PPUSH
26741: CALL_OW 1
26745: ST_TO_ADDR
// end end ;
26746: GO 26675
26748: POP
26749: POP
// for i := minerMinesList downto 1 do
26750: LD_ADDR_VAR 0 1
26754: PUSH
26755: DOUBLE
26756: LD_EXP 111
26760: INC
26761: ST_TO_ADDR
26762: LD_INT 1
26764: PUSH
26765: FOR_DOWNTO
26766: IFFALSE 27102
// begin if IsLive ( minersList [ i ] ) then
26768: LD_EXP 110
26772: PUSH
26773: LD_VAR 0 1
26777: ARRAY
26778: PPUSH
26779: CALL_OW 300
26783: IFFALSE 26811
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26785: LD_EXP 110
26789: PUSH
26790: LD_VAR 0 1
26794: ARRAY
26795: PPUSH
26796: LD_EXP 111
26800: PUSH
26801: LD_VAR 0 1
26805: ARRAY
26806: PPUSH
26807: CALL_OW 505
// if not minerMinesList [ i ] then
26811: LD_EXP 111
26815: PUSH
26816: LD_VAR 0 1
26820: ARRAY
26821: NOT
26822: IFFALSE 26826
// continue ;
26824: GO 26765
// for j := minerMinesList [ i ] downto 1 do
26826: LD_ADDR_VAR 0 2
26830: PUSH
26831: DOUBLE
26832: LD_EXP 111
26836: PUSH
26837: LD_VAR 0 1
26841: ARRAY
26842: INC
26843: ST_TO_ADDR
26844: LD_INT 1
26846: PUSH
26847: FOR_DOWNTO
26848: IFFALSE 27098
// begin side := GetSide ( minersList [ i ] ) ;
26850: LD_ADDR_VAR 0 3
26854: PUSH
26855: LD_EXP 110
26859: PUSH
26860: LD_VAR 0 1
26864: ARRAY
26865: PPUSH
26866: CALL_OW 255
26870: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26871: LD_ADDR_VAR 0 4
26875: PUSH
26876: LD_EXP 111
26880: PUSH
26881: LD_VAR 0 1
26885: ARRAY
26886: PUSH
26887: LD_VAR 0 2
26891: ARRAY
26892: PUSH
26893: LD_INT 1
26895: ARRAY
26896: PPUSH
26897: LD_EXP 111
26901: PUSH
26902: LD_VAR 0 1
26906: ARRAY
26907: PUSH
26908: LD_VAR 0 2
26912: ARRAY
26913: PUSH
26914: LD_INT 2
26916: ARRAY
26917: PPUSH
26918: CALL_OW 428
26922: ST_TO_ADDR
// if not tmp then
26923: LD_VAR 0 4
26927: NOT
26928: IFFALSE 26932
// continue ;
26930: GO 26847
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26932: LD_VAR 0 4
26936: PUSH
26937: LD_INT 81
26939: PUSH
26940: LD_VAR 0 3
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PPUSH
26949: CALL_OW 69
26953: IN
26954: PUSH
26955: LD_EXP 111
26959: PUSH
26960: LD_VAR 0 1
26964: ARRAY
26965: PUSH
26966: LD_VAR 0 2
26970: ARRAY
26971: PUSH
26972: LD_INT 1
26974: ARRAY
26975: PPUSH
26976: LD_EXP 111
26980: PUSH
26981: LD_VAR 0 1
26985: ARRAY
26986: PUSH
26987: LD_VAR 0 2
26991: ARRAY
26992: PUSH
26993: LD_INT 2
26995: ARRAY
26996: PPUSH
26997: CALL_OW 458
27001: AND
27002: IFFALSE 27096
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27004: LD_EXP 111
27008: PUSH
27009: LD_VAR 0 1
27013: ARRAY
27014: PUSH
27015: LD_VAR 0 2
27019: ARRAY
27020: PUSH
27021: LD_INT 1
27023: ARRAY
27024: PPUSH
27025: LD_EXP 111
27029: PUSH
27030: LD_VAR 0 1
27034: ARRAY
27035: PUSH
27036: LD_VAR 0 2
27040: ARRAY
27041: PUSH
27042: LD_INT 2
27044: ARRAY
27045: PPUSH
27046: LD_VAR 0 3
27050: PPUSH
27051: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27055: LD_ADDR_EXP 111
27059: PUSH
27060: LD_EXP 111
27064: PPUSH
27065: LD_VAR 0 1
27069: PPUSH
27070: LD_EXP 111
27074: PUSH
27075: LD_VAR 0 1
27079: ARRAY
27080: PPUSH
27081: LD_VAR 0 2
27085: PPUSH
27086: CALL_OW 3
27090: PPUSH
27091: CALL_OW 1
27095: ST_TO_ADDR
// end ; end ;
27096: GO 26847
27098: POP
27099: POP
// end ;
27100: GO 26765
27102: POP
27103: POP
// end ;
27104: PPOPN 4
27106: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27107: LD_INT 0
27109: PPUSH
27110: PPUSH
// result := false ;
27111: LD_ADDR_VAR 0 4
27115: PUSH
27116: LD_INT 0
27118: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27119: LD_VAR 0 1
27123: PPUSH
27124: CALL_OW 264
27128: PUSH
27129: LD_EXP 32
27133: EQUAL
27134: NOT
27135: IFFALSE 27139
// exit ;
27137: GO 27379
// index := GetElementIndex ( minersList , unit ) ;
27139: LD_ADDR_VAR 0 5
27143: PUSH
27144: LD_EXP 110
27148: PPUSH
27149: LD_VAR 0 1
27153: PPUSH
27154: CALL 33363 0 2
27158: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27159: LD_EXP 111
27163: PUSH
27164: LD_VAR 0 5
27168: ARRAY
27169: PUSH
27170: LD_EXP 112
27174: GREATEREQUAL
27175: IFFALSE 27179
// exit ;
27177: GO 27379
// ComMoveXY ( unit , x , y ) ;
27179: LD_VAR 0 1
27183: PPUSH
27184: LD_VAR 0 2
27188: PPUSH
27189: LD_VAR 0 3
27193: PPUSH
27194: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27198: LD_INT 35
27200: PPUSH
27201: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27205: LD_VAR 0 1
27209: PPUSH
27210: LD_VAR 0 2
27214: PPUSH
27215: LD_VAR 0 3
27219: PPUSH
27220: CALL 64135 0 3
27224: NOT
27225: PUSH
27226: LD_VAR 0 1
27230: PPUSH
27231: CALL_OW 314
27235: AND
27236: IFFALSE 27240
// exit ;
27238: GO 27379
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27240: LD_VAR 0 2
27244: PPUSH
27245: LD_VAR 0 3
27249: PPUSH
27250: CALL_OW 428
27254: PUSH
27255: LD_VAR 0 1
27259: EQUAL
27260: PUSH
27261: LD_VAR 0 1
27265: PPUSH
27266: CALL_OW 314
27270: NOT
27271: AND
27272: IFFALSE 27198
// PlaySoundXY ( x , y , PlantMine ) ;
27274: LD_VAR 0 2
27278: PPUSH
27279: LD_VAR 0 3
27283: PPUSH
27284: LD_STRING PlantMine
27286: PPUSH
27287: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27291: LD_VAR 0 2
27295: PPUSH
27296: LD_VAR 0 3
27300: PPUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL_OW 255
27310: PPUSH
27311: LD_INT 0
27313: PPUSH
27314: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27318: LD_ADDR_EXP 111
27322: PUSH
27323: LD_EXP 111
27327: PPUSH
27328: LD_VAR 0 5
27332: PUSH
27333: LD_EXP 111
27337: PUSH
27338: LD_VAR 0 5
27342: ARRAY
27343: PUSH
27344: LD_INT 1
27346: PLUS
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PPUSH
27352: LD_VAR 0 2
27356: PUSH
27357: LD_VAR 0 3
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PPUSH
27366: CALL 33578 0 3
27370: ST_TO_ADDR
// result := true ;
27371: LD_ADDR_VAR 0 4
27375: PUSH
27376: LD_INT 1
27378: ST_TO_ADDR
// end ;
27379: LD_VAR 0 4
27383: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27384: LD_INT 0
27386: PPUSH
27387: PPUSH
27388: PPUSH
// if not unit in minersList then
27389: LD_VAR 0 1
27393: PUSH
27394: LD_EXP 110
27398: IN
27399: NOT
27400: IFFALSE 27404
// exit ;
27402: GO 27796
// index := GetElementIndex ( minersList , unit ) ;
27404: LD_ADDR_VAR 0 6
27408: PUSH
27409: LD_EXP 110
27413: PPUSH
27414: LD_VAR 0 1
27418: PPUSH
27419: CALL 33363 0 2
27423: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27424: LD_ADDR_VAR 0 5
27428: PUSH
27429: DOUBLE
27430: LD_EXP 111
27434: PUSH
27435: LD_VAR 0 6
27439: ARRAY
27440: INC
27441: ST_TO_ADDR
27442: LD_INT 1
27444: PUSH
27445: FOR_DOWNTO
27446: IFFALSE 27607
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27448: LD_EXP 111
27452: PUSH
27453: LD_VAR 0 6
27457: ARRAY
27458: PUSH
27459: LD_VAR 0 5
27463: ARRAY
27464: PUSH
27465: LD_INT 1
27467: ARRAY
27468: PUSH
27469: LD_VAR 0 2
27473: EQUAL
27474: PUSH
27475: LD_EXP 111
27479: PUSH
27480: LD_VAR 0 6
27484: ARRAY
27485: PUSH
27486: LD_VAR 0 5
27490: ARRAY
27491: PUSH
27492: LD_INT 2
27494: ARRAY
27495: PUSH
27496: LD_VAR 0 3
27500: EQUAL
27501: AND
27502: IFFALSE 27605
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27504: LD_EXP 111
27508: PUSH
27509: LD_VAR 0 6
27513: ARRAY
27514: PUSH
27515: LD_VAR 0 5
27519: ARRAY
27520: PUSH
27521: LD_INT 1
27523: ARRAY
27524: PPUSH
27525: LD_EXP 111
27529: PUSH
27530: LD_VAR 0 6
27534: ARRAY
27535: PUSH
27536: LD_VAR 0 5
27540: ARRAY
27541: PUSH
27542: LD_INT 2
27544: ARRAY
27545: PPUSH
27546: LD_VAR 0 1
27550: PPUSH
27551: CALL_OW 255
27555: PPUSH
27556: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27560: LD_ADDR_EXP 111
27564: PUSH
27565: LD_EXP 111
27569: PPUSH
27570: LD_VAR 0 6
27574: PPUSH
27575: LD_EXP 111
27579: PUSH
27580: LD_VAR 0 6
27584: ARRAY
27585: PPUSH
27586: LD_VAR 0 5
27590: PPUSH
27591: CALL_OW 3
27595: PPUSH
27596: CALL_OW 1
27600: ST_TO_ADDR
// exit ;
27601: POP
27602: POP
27603: GO 27796
// end ; end ;
27605: GO 27445
27607: POP
27608: POP
// for i := minerMinesList [ index ] downto 1 do
27609: LD_ADDR_VAR 0 5
27613: PUSH
27614: DOUBLE
27615: LD_EXP 111
27619: PUSH
27620: LD_VAR 0 6
27624: ARRAY
27625: INC
27626: ST_TO_ADDR
27627: LD_INT 1
27629: PUSH
27630: FOR_DOWNTO
27631: IFFALSE 27794
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27633: LD_EXP 111
27637: PUSH
27638: LD_VAR 0 6
27642: ARRAY
27643: PUSH
27644: LD_VAR 0 5
27648: ARRAY
27649: PUSH
27650: LD_INT 1
27652: ARRAY
27653: PPUSH
27654: LD_EXP 111
27658: PUSH
27659: LD_VAR 0 6
27663: ARRAY
27664: PUSH
27665: LD_VAR 0 5
27669: ARRAY
27670: PUSH
27671: LD_INT 2
27673: ARRAY
27674: PPUSH
27675: LD_VAR 0 2
27679: PPUSH
27680: LD_VAR 0 3
27684: PPUSH
27685: CALL_OW 298
27689: PUSH
27690: LD_INT 6
27692: LESS
27693: IFFALSE 27792
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27695: LD_EXP 111
27699: PUSH
27700: LD_VAR 0 6
27704: ARRAY
27705: PUSH
27706: LD_VAR 0 5
27710: ARRAY
27711: PUSH
27712: LD_INT 1
27714: ARRAY
27715: PPUSH
27716: LD_EXP 111
27720: PUSH
27721: LD_VAR 0 6
27725: ARRAY
27726: PUSH
27727: LD_VAR 0 5
27731: ARRAY
27732: PUSH
27733: LD_INT 2
27735: ARRAY
27736: PPUSH
27737: LD_VAR 0 1
27741: PPUSH
27742: CALL_OW 255
27746: PPUSH
27747: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27751: LD_ADDR_EXP 111
27755: PUSH
27756: LD_EXP 111
27760: PPUSH
27761: LD_VAR 0 6
27765: PPUSH
27766: LD_EXP 111
27770: PUSH
27771: LD_VAR 0 6
27775: ARRAY
27776: PPUSH
27777: LD_VAR 0 5
27781: PPUSH
27782: CALL_OW 3
27786: PPUSH
27787: CALL_OW 1
27791: ST_TO_ADDR
// end ; end ;
27792: GO 27630
27794: POP
27795: POP
// end ;
27796: LD_VAR 0 4
27800: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27801: LD_INT 0
27803: PPUSH
27804: PPUSH
27805: PPUSH
27806: PPUSH
27807: PPUSH
27808: PPUSH
27809: PPUSH
27810: PPUSH
27811: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27812: LD_VAR 0 1
27816: PPUSH
27817: CALL_OW 264
27821: PUSH
27822: LD_EXP 32
27826: EQUAL
27827: NOT
27828: PUSH
27829: LD_VAR 0 1
27833: PUSH
27834: LD_EXP 110
27838: IN
27839: NOT
27840: OR
27841: IFFALSE 27845
// exit ;
27843: GO 28167
// index := GetElementIndex ( minersList , unit ) ;
27845: LD_ADDR_VAR 0 6
27849: PUSH
27850: LD_EXP 110
27854: PPUSH
27855: LD_VAR 0 1
27859: PPUSH
27860: CALL 33363 0 2
27864: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27865: LD_ADDR_VAR 0 8
27869: PUSH
27870: LD_EXP 112
27874: PUSH
27875: LD_EXP 111
27879: PUSH
27880: LD_VAR 0 6
27884: ARRAY
27885: MINUS
27886: ST_TO_ADDR
// if not minesFreeAmount then
27887: LD_VAR 0 8
27891: NOT
27892: IFFALSE 27896
// exit ;
27894: GO 28167
// tmp := [ ] ;
27896: LD_ADDR_VAR 0 7
27900: PUSH
27901: EMPTY
27902: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27903: LD_ADDR_VAR 0 5
27907: PUSH
27908: DOUBLE
27909: LD_INT 1
27911: DEC
27912: ST_TO_ADDR
27913: LD_VAR 0 8
27917: PUSH
27918: FOR_TO
27919: IFFALSE 28114
// begin _d := rand ( 0 , 5 ) ;
27921: LD_ADDR_VAR 0 11
27925: PUSH
27926: LD_INT 0
27928: PPUSH
27929: LD_INT 5
27931: PPUSH
27932: CALL_OW 12
27936: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27937: LD_ADDR_VAR 0 12
27941: PUSH
27942: LD_INT 2
27944: PPUSH
27945: LD_INT 6
27947: PPUSH
27948: CALL_OW 12
27952: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27953: LD_ADDR_VAR 0 9
27957: PUSH
27958: LD_VAR 0 2
27962: PPUSH
27963: LD_VAR 0 11
27967: PPUSH
27968: LD_VAR 0 12
27972: PPUSH
27973: CALL_OW 272
27977: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27978: LD_ADDR_VAR 0 10
27982: PUSH
27983: LD_VAR 0 3
27987: PPUSH
27988: LD_VAR 0 11
27992: PPUSH
27993: LD_VAR 0 12
27997: PPUSH
27998: CALL_OW 273
28002: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28003: LD_VAR 0 9
28007: PPUSH
28008: LD_VAR 0 10
28012: PPUSH
28013: CALL_OW 488
28017: PUSH
28018: LD_VAR 0 9
28022: PUSH
28023: LD_VAR 0 10
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_VAR 0 7
28036: IN
28037: NOT
28038: AND
28039: PUSH
28040: LD_VAR 0 9
28044: PPUSH
28045: LD_VAR 0 10
28049: PPUSH
28050: CALL_OW 458
28054: NOT
28055: AND
28056: IFFALSE 28098
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28058: LD_ADDR_VAR 0 7
28062: PUSH
28063: LD_VAR 0 7
28067: PPUSH
28068: LD_VAR 0 7
28072: PUSH
28073: LD_INT 1
28075: PLUS
28076: PPUSH
28077: LD_VAR 0 9
28081: PUSH
28082: LD_VAR 0 10
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PPUSH
28091: CALL_OW 1
28095: ST_TO_ADDR
28096: GO 28112
// i := i - 1 ;
28098: LD_ADDR_VAR 0 5
28102: PUSH
28103: LD_VAR 0 5
28107: PUSH
28108: LD_INT 1
28110: MINUS
28111: ST_TO_ADDR
// end ;
28112: GO 27918
28114: POP
28115: POP
// for i in tmp do
28116: LD_ADDR_VAR 0 5
28120: PUSH
28121: LD_VAR 0 7
28125: PUSH
28126: FOR_IN
28127: IFFALSE 28165
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28129: LD_VAR 0 1
28133: PPUSH
28134: LD_VAR 0 5
28138: PUSH
28139: LD_INT 1
28141: ARRAY
28142: PPUSH
28143: LD_VAR 0 5
28147: PUSH
28148: LD_INT 2
28150: ARRAY
28151: PPUSH
28152: CALL 27107 0 3
28156: NOT
28157: IFFALSE 28163
// exit ;
28159: POP
28160: POP
28161: GO 28167
28163: GO 28126
28165: POP
28166: POP
// end ;
28167: LD_VAR 0 4
28171: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28172: LD_INT 0
28174: PPUSH
28175: PPUSH
28176: PPUSH
28177: PPUSH
28178: PPUSH
28179: PPUSH
28180: PPUSH
// if not GetClass ( unit ) = class_sniper then
28181: LD_VAR 0 1
28185: PPUSH
28186: CALL_OW 257
28190: PUSH
28191: LD_INT 5
28193: EQUAL
28194: NOT
28195: IFFALSE 28199
// exit ;
28197: GO 28587
// dist := 8 ;
28199: LD_ADDR_VAR 0 5
28203: PUSH
28204: LD_INT 8
28206: ST_TO_ADDR
// viewRange := 12 ;
28207: LD_ADDR_VAR 0 7
28211: PUSH
28212: LD_INT 12
28214: ST_TO_ADDR
// side := GetSide ( unit ) ;
28215: LD_ADDR_VAR 0 6
28219: PUSH
28220: LD_VAR 0 1
28224: PPUSH
28225: CALL_OW 255
28229: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28230: LD_INT 61
28232: PPUSH
28233: LD_VAR 0 6
28237: PPUSH
28238: CALL_OW 321
28242: PUSH
28243: LD_INT 2
28245: EQUAL
28246: IFFALSE 28256
// viewRange := 16 ;
28248: LD_ADDR_VAR 0 7
28252: PUSH
28253: LD_INT 16
28255: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28256: LD_VAR 0 1
28260: PPUSH
28261: LD_VAR 0 2
28265: PPUSH
28266: LD_VAR 0 3
28270: PPUSH
28271: CALL_OW 297
28275: PUSH
28276: LD_VAR 0 5
28280: GREATER
28281: IFFALSE 28360
// begin ComMoveXY ( unit , x , y ) ;
28283: LD_VAR 0 1
28287: PPUSH
28288: LD_VAR 0 2
28292: PPUSH
28293: LD_VAR 0 3
28297: PPUSH
28298: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28302: LD_INT 35
28304: PPUSH
28305: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28309: LD_VAR 0 1
28313: PPUSH
28314: LD_VAR 0 2
28318: PPUSH
28319: LD_VAR 0 3
28323: PPUSH
28324: CALL 64135 0 3
28328: NOT
28329: IFFALSE 28333
// exit ;
28331: GO 28587
// until GetDistUnitXY ( unit , x , y ) < dist ;
28333: LD_VAR 0 1
28337: PPUSH
28338: LD_VAR 0 2
28342: PPUSH
28343: LD_VAR 0 3
28347: PPUSH
28348: CALL_OW 297
28352: PUSH
28353: LD_VAR 0 5
28357: LESS
28358: IFFALSE 28302
// end ; ComTurnXY ( unit , x , y ) ;
28360: LD_VAR 0 1
28364: PPUSH
28365: LD_VAR 0 2
28369: PPUSH
28370: LD_VAR 0 3
28374: PPUSH
28375: CALL_OW 118
// wait ( 5 ) ;
28379: LD_INT 5
28381: PPUSH
28382: CALL_OW 67
// _d := GetDir ( unit ) ;
28386: LD_ADDR_VAR 0 10
28390: PUSH
28391: LD_VAR 0 1
28395: PPUSH
28396: CALL_OW 254
28400: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28401: LD_ADDR_VAR 0 8
28405: PUSH
28406: LD_VAR 0 1
28410: PPUSH
28411: CALL_OW 250
28415: PPUSH
28416: LD_VAR 0 10
28420: PPUSH
28421: LD_VAR 0 5
28425: PPUSH
28426: CALL_OW 272
28430: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28431: LD_ADDR_VAR 0 9
28435: PUSH
28436: LD_VAR 0 1
28440: PPUSH
28441: CALL_OW 251
28445: PPUSH
28446: LD_VAR 0 10
28450: PPUSH
28451: LD_VAR 0 5
28455: PPUSH
28456: CALL_OW 273
28460: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28461: LD_VAR 0 8
28465: PPUSH
28466: LD_VAR 0 9
28470: PPUSH
28471: CALL_OW 488
28475: NOT
28476: IFFALSE 28480
// exit ;
28478: GO 28587
// ComAnimCustom ( unit , 1 ) ;
28480: LD_VAR 0 1
28484: PPUSH
28485: LD_INT 1
28487: PPUSH
28488: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28492: LD_VAR 0 8
28496: PPUSH
28497: LD_VAR 0 9
28501: PPUSH
28502: LD_VAR 0 6
28506: PPUSH
28507: LD_VAR 0 7
28511: PPUSH
28512: CALL_OW 330
// repeat wait ( 1 ) ;
28516: LD_INT 1
28518: PPUSH
28519: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28523: LD_VAR 0 1
28527: PPUSH
28528: CALL_OW 316
28532: PUSH
28533: LD_VAR 0 1
28537: PPUSH
28538: CALL_OW 314
28542: OR
28543: PUSH
28544: LD_VAR 0 1
28548: PPUSH
28549: CALL_OW 302
28553: NOT
28554: OR
28555: PUSH
28556: LD_VAR 0 1
28560: PPUSH
28561: CALL_OW 301
28565: OR
28566: IFFALSE 28516
// RemoveSeeing ( _x , _y , side ) ;
28568: LD_VAR 0 8
28572: PPUSH
28573: LD_VAR 0 9
28577: PPUSH
28578: LD_VAR 0 6
28582: PPUSH
28583: CALL_OW 331
// end ; end_of_file
28587: LD_VAR 0 4
28591: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28592: LD_INT 0
28594: PPUSH
28595: PPUSH
// if exist_mode then
28596: LD_VAR 0 2
28600: IFFALSE 28625
// unit := CreateCharacter ( prefix & ident ) else
28602: LD_ADDR_VAR 0 5
28606: PUSH
28607: LD_VAR 0 3
28611: PUSH
28612: LD_VAR 0 1
28616: STR
28617: PPUSH
28618: CALL_OW 34
28622: ST_TO_ADDR
28623: GO 28640
// unit := NewCharacter ( ident ) ;
28625: LD_ADDR_VAR 0 5
28629: PUSH
28630: LD_VAR 0 1
28634: PPUSH
28635: CALL_OW 25
28639: ST_TO_ADDR
// result := unit ;
28640: LD_ADDR_VAR 0 4
28644: PUSH
28645: LD_VAR 0 5
28649: ST_TO_ADDR
// end ;
28650: LD_VAR 0 4
28654: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28655: LD_INT 0
28657: PPUSH
28658: PPUSH
// if not side or not nation then
28659: LD_VAR 0 1
28663: NOT
28664: PUSH
28665: LD_VAR 0 2
28669: NOT
28670: OR
28671: IFFALSE 28675
// exit ;
28673: GO 29443
// case nation of nation_american :
28675: LD_VAR 0 2
28679: PUSH
28680: LD_INT 1
28682: DOUBLE
28683: EQUAL
28684: IFTRUE 28688
28686: GO 28902
28688: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28689: LD_ADDR_VAR 0 4
28693: PUSH
28694: LD_INT 35
28696: PUSH
28697: LD_INT 45
28699: PUSH
28700: LD_INT 46
28702: PUSH
28703: LD_INT 47
28705: PUSH
28706: LD_INT 82
28708: PUSH
28709: LD_INT 83
28711: PUSH
28712: LD_INT 84
28714: PUSH
28715: LD_INT 85
28717: PUSH
28718: LD_INT 86
28720: PUSH
28721: LD_INT 1
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: LD_INT 6
28729: PUSH
28730: LD_INT 15
28732: PUSH
28733: LD_INT 16
28735: PUSH
28736: LD_INT 7
28738: PUSH
28739: LD_INT 12
28741: PUSH
28742: LD_INT 13
28744: PUSH
28745: LD_INT 10
28747: PUSH
28748: LD_INT 14
28750: PUSH
28751: LD_INT 20
28753: PUSH
28754: LD_INT 21
28756: PUSH
28757: LD_INT 22
28759: PUSH
28760: LD_INT 25
28762: PUSH
28763: LD_INT 32
28765: PUSH
28766: LD_INT 27
28768: PUSH
28769: LD_INT 36
28771: PUSH
28772: LD_INT 69
28774: PUSH
28775: LD_INT 39
28777: PUSH
28778: LD_INT 34
28780: PUSH
28781: LD_INT 40
28783: PUSH
28784: LD_INT 48
28786: PUSH
28787: LD_INT 49
28789: PUSH
28790: LD_INT 50
28792: PUSH
28793: LD_INT 51
28795: PUSH
28796: LD_INT 52
28798: PUSH
28799: LD_INT 53
28801: PUSH
28802: LD_INT 54
28804: PUSH
28805: LD_INT 55
28807: PUSH
28808: LD_INT 56
28810: PUSH
28811: LD_INT 57
28813: PUSH
28814: LD_INT 58
28816: PUSH
28817: LD_INT 59
28819: PUSH
28820: LD_INT 60
28822: PUSH
28823: LD_INT 61
28825: PUSH
28826: LD_INT 62
28828: PUSH
28829: LD_INT 80
28831: PUSH
28832: LD_INT 82
28834: PUSH
28835: LD_INT 83
28837: PUSH
28838: LD_INT 84
28840: PUSH
28841: LD_INT 85
28843: PUSH
28844: LD_INT 86
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: ST_TO_ADDR
28900: GO 29367
28902: LD_INT 2
28904: DOUBLE
28905: EQUAL
28906: IFTRUE 28910
28908: GO 29136
28910: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28911: LD_ADDR_VAR 0 4
28915: PUSH
28916: LD_INT 35
28918: PUSH
28919: LD_INT 45
28921: PUSH
28922: LD_INT 46
28924: PUSH
28925: LD_INT 47
28927: PUSH
28928: LD_INT 82
28930: PUSH
28931: LD_INT 83
28933: PUSH
28934: LD_INT 84
28936: PUSH
28937: LD_INT 85
28939: PUSH
28940: LD_INT 87
28942: PUSH
28943: LD_INT 70
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: LD_INT 11
28951: PUSH
28952: LD_INT 3
28954: PUSH
28955: LD_INT 4
28957: PUSH
28958: LD_INT 5
28960: PUSH
28961: LD_INT 6
28963: PUSH
28964: LD_INT 15
28966: PUSH
28967: LD_INT 18
28969: PUSH
28970: LD_INT 7
28972: PUSH
28973: LD_INT 17
28975: PUSH
28976: LD_INT 8
28978: PUSH
28979: LD_INT 20
28981: PUSH
28982: LD_INT 21
28984: PUSH
28985: LD_INT 22
28987: PUSH
28988: LD_INT 72
28990: PUSH
28991: LD_INT 26
28993: PUSH
28994: LD_INT 69
28996: PUSH
28997: LD_INT 39
28999: PUSH
29000: LD_INT 40
29002: PUSH
29003: LD_INT 41
29005: PUSH
29006: LD_INT 42
29008: PUSH
29009: LD_INT 43
29011: PUSH
29012: LD_INT 48
29014: PUSH
29015: LD_INT 49
29017: PUSH
29018: LD_INT 50
29020: PUSH
29021: LD_INT 51
29023: PUSH
29024: LD_INT 52
29026: PUSH
29027: LD_INT 53
29029: PUSH
29030: LD_INT 54
29032: PUSH
29033: LD_INT 55
29035: PUSH
29036: LD_INT 56
29038: PUSH
29039: LD_INT 60
29041: PUSH
29042: LD_INT 61
29044: PUSH
29045: LD_INT 62
29047: PUSH
29048: LD_INT 66
29050: PUSH
29051: LD_INT 67
29053: PUSH
29054: LD_INT 68
29056: PUSH
29057: LD_INT 81
29059: PUSH
29060: LD_INT 82
29062: PUSH
29063: LD_INT 83
29065: PUSH
29066: LD_INT 84
29068: PUSH
29069: LD_INT 85
29071: PUSH
29072: LD_INT 87
29074: PUSH
29075: LD_INT 88
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: ST_TO_ADDR
29134: GO 29367
29136: LD_INT 3
29138: DOUBLE
29139: EQUAL
29140: IFTRUE 29144
29142: GO 29366
29144: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29145: LD_ADDR_VAR 0 4
29149: PUSH
29150: LD_INT 46
29152: PUSH
29153: LD_INT 47
29155: PUSH
29156: LD_INT 1
29158: PUSH
29159: LD_INT 2
29161: PUSH
29162: LD_INT 82
29164: PUSH
29165: LD_INT 83
29167: PUSH
29168: LD_INT 84
29170: PUSH
29171: LD_INT 85
29173: PUSH
29174: LD_INT 86
29176: PUSH
29177: LD_INT 11
29179: PUSH
29180: LD_INT 9
29182: PUSH
29183: LD_INT 20
29185: PUSH
29186: LD_INT 19
29188: PUSH
29189: LD_INT 21
29191: PUSH
29192: LD_INT 24
29194: PUSH
29195: LD_INT 22
29197: PUSH
29198: LD_INT 25
29200: PUSH
29201: LD_INT 28
29203: PUSH
29204: LD_INT 29
29206: PUSH
29207: LD_INT 30
29209: PUSH
29210: LD_INT 31
29212: PUSH
29213: LD_INT 37
29215: PUSH
29216: LD_INT 38
29218: PUSH
29219: LD_INT 32
29221: PUSH
29222: LD_INT 27
29224: PUSH
29225: LD_INT 33
29227: PUSH
29228: LD_INT 69
29230: PUSH
29231: LD_INT 39
29233: PUSH
29234: LD_INT 34
29236: PUSH
29237: LD_INT 40
29239: PUSH
29240: LD_INT 71
29242: PUSH
29243: LD_INT 23
29245: PUSH
29246: LD_INT 44
29248: PUSH
29249: LD_INT 48
29251: PUSH
29252: LD_INT 49
29254: PUSH
29255: LD_INT 50
29257: PUSH
29258: LD_INT 51
29260: PUSH
29261: LD_INT 52
29263: PUSH
29264: LD_INT 53
29266: PUSH
29267: LD_INT 54
29269: PUSH
29270: LD_INT 55
29272: PUSH
29273: LD_INT 56
29275: PUSH
29276: LD_INT 57
29278: PUSH
29279: LD_INT 58
29281: PUSH
29282: LD_INT 59
29284: PUSH
29285: LD_INT 63
29287: PUSH
29288: LD_INT 64
29290: PUSH
29291: LD_INT 65
29293: PUSH
29294: LD_INT 82
29296: PUSH
29297: LD_INT 83
29299: PUSH
29300: LD_INT 84
29302: PUSH
29303: LD_INT 85
29305: PUSH
29306: LD_INT 86
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: ST_TO_ADDR
29364: GO 29367
29366: POP
// if state > - 1 and state < 3 then
29367: LD_VAR 0 3
29371: PUSH
29372: LD_INT 1
29374: NEG
29375: GREATER
29376: PUSH
29377: LD_VAR 0 3
29381: PUSH
29382: LD_INT 3
29384: LESS
29385: AND
29386: IFFALSE 29443
// for i in result do
29388: LD_ADDR_VAR 0 5
29392: PUSH
29393: LD_VAR 0 4
29397: PUSH
29398: FOR_IN
29399: IFFALSE 29441
// if GetTech ( i , side ) <> state then
29401: LD_VAR 0 5
29405: PPUSH
29406: LD_VAR 0 1
29410: PPUSH
29411: CALL_OW 321
29415: PUSH
29416: LD_VAR 0 3
29420: NONEQUAL
29421: IFFALSE 29439
// result := result diff i ;
29423: LD_ADDR_VAR 0 4
29427: PUSH
29428: LD_VAR 0 4
29432: PUSH
29433: LD_VAR 0 5
29437: DIFF
29438: ST_TO_ADDR
29439: GO 29398
29441: POP
29442: POP
// end ;
29443: LD_VAR 0 4
29447: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29448: LD_INT 0
29450: PPUSH
29451: PPUSH
29452: PPUSH
// result := true ;
29453: LD_ADDR_VAR 0 3
29457: PUSH
29458: LD_INT 1
29460: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29461: LD_ADDR_VAR 0 5
29465: PUSH
29466: LD_VAR 0 2
29470: PPUSH
29471: CALL_OW 480
29475: ST_TO_ADDR
// if not tmp then
29476: LD_VAR 0 5
29480: NOT
29481: IFFALSE 29485
// exit ;
29483: GO 29534
// for i in tmp do
29485: LD_ADDR_VAR 0 4
29489: PUSH
29490: LD_VAR 0 5
29494: PUSH
29495: FOR_IN
29496: IFFALSE 29532
// if GetTech ( i , side ) <> state_researched then
29498: LD_VAR 0 4
29502: PPUSH
29503: LD_VAR 0 1
29507: PPUSH
29508: CALL_OW 321
29512: PUSH
29513: LD_INT 2
29515: NONEQUAL
29516: IFFALSE 29530
// begin result := false ;
29518: LD_ADDR_VAR 0 3
29522: PUSH
29523: LD_INT 0
29525: ST_TO_ADDR
// exit ;
29526: POP
29527: POP
29528: GO 29534
// end ;
29530: GO 29495
29532: POP
29533: POP
// end ;
29534: LD_VAR 0 3
29538: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29539: LD_INT 0
29541: PPUSH
29542: PPUSH
29543: PPUSH
29544: PPUSH
29545: PPUSH
29546: PPUSH
29547: PPUSH
29548: PPUSH
29549: PPUSH
29550: PPUSH
29551: PPUSH
29552: PPUSH
29553: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29554: LD_VAR 0 1
29558: NOT
29559: PUSH
29560: LD_VAR 0 1
29564: PPUSH
29565: CALL_OW 257
29569: PUSH
29570: LD_INT 9
29572: NONEQUAL
29573: OR
29574: IFFALSE 29578
// exit ;
29576: GO 30151
// side := GetSide ( unit ) ;
29578: LD_ADDR_VAR 0 9
29582: PUSH
29583: LD_VAR 0 1
29587: PPUSH
29588: CALL_OW 255
29592: ST_TO_ADDR
// tech_space := tech_spacanom ;
29593: LD_ADDR_VAR 0 12
29597: PUSH
29598: LD_INT 29
29600: ST_TO_ADDR
// tech_time := tech_taurad ;
29601: LD_ADDR_VAR 0 13
29605: PUSH
29606: LD_INT 28
29608: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29609: LD_ADDR_VAR 0 11
29613: PUSH
29614: LD_VAR 0 1
29618: PPUSH
29619: CALL_OW 310
29623: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29624: LD_VAR 0 11
29628: PPUSH
29629: CALL_OW 247
29633: PUSH
29634: LD_INT 2
29636: EQUAL
29637: IFFALSE 29641
// exit ;
29639: GO 30151
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29641: LD_ADDR_VAR 0 8
29645: PUSH
29646: LD_INT 81
29648: PUSH
29649: LD_VAR 0 9
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 3
29660: PUSH
29661: LD_INT 21
29663: PUSH
29664: LD_INT 3
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PPUSH
29679: CALL_OW 69
29683: ST_TO_ADDR
// if not tmp then
29684: LD_VAR 0 8
29688: NOT
29689: IFFALSE 29693
// exit ;
29691: GO 30151
// if in_unit then
29693: LD_VAR 0 11
29697: IFFALSE 29721
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29699: LD_ADDR_VAR 0 10
29703: PUSH
29704: LD_VAR 0 8
29708: PPUSH
29709: LD_VAR 0 11
29713: PPUSH
29714: CALL_OW 74
29718: ST_TO_ADDR
29719: GO 29741
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29721: LD_ADDR_VAR 0 10
29725: PUSH
29726: LD_VAR 0 8
29730: PPUSH
29731: LD_VAR 0 1
29735: PPUSH
29736: CALL_OW 74
29740: ST_TO_ADDR
// if not enemy then
29741: LD_VAR 0 10
29745: NOT
29746: IFFALSE 29750
// exit ;
29748: GO 30151
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29750: LD_VAR 0 11
29754: PUSH
29755: LD_VAR 0 11
29759: PPUSH
29760: LD_VAR 0 10
29764: PPUSH
29765: CALL_OW 296
29769: PUSH
29770: LD_INT 13
29772: GREATER
29773: AND
29774: PUSH
29775: LD_VAR 0 1
29779: PPUSH
29780: LD_VAR 0 10
29784: PPUSH
29785: CALL_OW 296
29789: PUSH
29790: LD_INT 12
29792: GREATER
29793: OR
29794: IFFALSE 29798
// exit ;
29796: GO 30151
// missile := [ 1 ] ;
29798: LD_ADDR_VAR 0 14
29802: PUSH
29803: LD_INT 1
29805: PUSH
29806: EMPTY
29807: LIST
29808: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29809: LD_VAR 0 9
29813: PPUSH
29814: LD_VAR 0 12
29818: PPUSH
29819: CALL_OW 325
29823: IFFALSE 29852
// missile := Insert ( missile , missile + 1 , 2 ) ;
29825: LD_ADDR_VAR 0 14
29829: PUSH
29830: LD_VAR 0 14
29834: PPUSH
29835: LD_VAR 0 14
29839: PUSH
29840: LD_INT 1
29842: PLUS
29843: PPUSH
29844: LD_INT 2
29846: PPUSH
29847: CALL_OW 2
29851: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29852: LD_VAR 0 9
29856: PPUSH
29857: LD_VAR 0 13
29861: PPUSH
29862: CALL_OW 325
29866: PUSH
29867: LD_VAR 0 10
29871: PPUSH
29872: CALL_OW 255
29876: PPUSH
29877: LD_VAR 0 13
29881: PPUSH
29882: CALL_OW 325
29886: NOT
29887: AND
29888: IFFALSE 29917
// missile := Insert ( missile , missile + 1 , 3 ) ;
29890: LD_ADDR_VAR 0 14
29894: PUSH
29895: LD_VAR 0 14
29899: PPUSH
29900: LD_VAR 0 14
29904: PUSH
29905: LD_INT 1
29907: PLUS
29908: PPUSH
29909: LD_INT 3
29911: PPUSH
29912: CALL_OW 2
29916: ST_TO_ADDR
// if missile < 2 then
29917: LD_VAR 0 14
29921: PUSH
29922: LD_INT 2
29924: LESS
29925: IFFALSE 29929
// exit ;
29927: GO 30151
// x := GetX ( enemy ) ;
29929: LD_ADDR_VAR 0 4
29933: PUSH
29934: LD_VAR 0 10
29938: PPUSH
29939: CALL_OW 250
29943: ST_TO_ADDR
// y := GetY ( enemy ) ;
29944: LD_ADDR_VAR 0 5
29948: PUSH
29949: LD_VAR 0 10
29953: PPUSH
29954: CALL_OW 251
29958: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29959: LD_ADDR_VAR 0 6
29963: PUSH
29964: LD_VAR 0 4
29968: PUSH
29969: LD_INT 1
29971: NEG
29972: PPUSH
29973: LD_INT 1
29975: PPUSH
29976: CALL_OW 12
29980: PLUS
29981: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29982: LD_ADDR_VAR 0 7
29986: PUSH
29987: LD_VAR 0 5
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PPUSH
29996: LD_INT 1
29998: PPUSH
29999: CALL_OW 12
30003: PLUS
30004: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30005: LD_VAR 0 6
30009: PPUSH
30010: LD_VAR 0 7
30014: PPUSH
30015: CALL_OW 488
30019: NOT
30020: IFFALSE 30042
// begin _x := x ;
30022: LD_ADDR_VAR 0 6
30026: PUSH
30027: LD_VAR 0 4
30031: ST_TO_ADDR
// _y := y ;
30032: LD_ADDR_VAR 0 7
30036: PUSH
30037: LD_VAR 0 5
30041: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30042: LD_ADDR_VAR 0 3
30046: PUSH
30047: LD_INT 1
30049: PPUSH
30050: LD_VAR 0 14
30054: PPUSH
30055: CALL_OW 12
30059: ST_TO_ADDR
// case i of 1 :
30060: LD_VAR 0 3
30064: PUSH
30065: LD_INT 1
30067: DOUBLE
30068: EQUAL
30069: IFTRUE 30073
30071: GO 30090
30073: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30074: LD_VAR 0 1
30078: PPUSH
30079: LD_VAR 0 10
30083: PPUSH
30084: CALL_OW 115
30088: GO 30151
30090: LD_INT 2
30092: DOUBLE
30093: EQUAL
30094: IFTRUE 30098
30096: GO 30120
30098: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30099: LD_VAR 0 1
30103: PPUSH
30104: LD_VAR 0 6
30108: PPUSH
30109: LD_VAR 0 7
30113: PPUSH
30114: CALL_OW 153
30118: GO 30151
30120: LD_INT 3
30122: DOUBLE
30123: EQUAL
30124: IFTRUE 30128
30126: GO 30150
30128: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30129: LD_VAR 0 1
30133: PPUSH
30134: LD_VAR 0 6
30138: PPUSH
30139: LD_VAR 0 7
30143: PPUSH
30144: CALL_OW 154
30148: GO 30151
30150: POP
// end ;
30151: LD_VAR 0 2
30155: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30156: LD_INT 0
30158: PPUSH
30159: PPUSH
30160: PPUSH
30161: PPUSH
30162: PPUSH
30163: PPUSH
// if not unit or not building then
30164: LD_VAR 0 1
30168: NOT
30169: PUSH
30170: LD_VAR 0 2
30174: NOT
30175: OR
30176: IFFALSE 30180
// exit ;
30178: GO 30338
// x := GetX ( building ) ;
30180: LD_ADDR_VAR 0 5
30184: PUSH
30185: LD_VAR 0 2
30189: PPUSH
30190: CALL_OW 250
30194: ST_TO_ADDR
// y := GetY ( building ) ;
30195: LD_ADDR_VAR 0 6
30199: PUSH
30200: LD_VAR 0 2
30204: PPUSH
30205: CALL_OW 251
30209: ST_TO_ADDR
// for i = 0 to 5 do
30210: LD_ADDR_VAR 0 4
30214: PUSH
30215: DOUBLE
30216: LD_INT 0
30218: DEC
30219: ST_TO_ADDR
30220: LD_INT 5
30222: PUSH
30223: FOR_TO
30224: IFFALSE 30336
// begin _x := ShiftX ( x , i , 3 ) ;
30226: LD_ADDR_VAR 0 7
30230: PUSH
30231: LD_VAR 0 5
30235: PPUSH
30236: LD_VAR 0 4
30240: PPUSH
30241: LD_INT 3
30243: PPUSH
30244: CALL_OW 272
30248: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30249: LD_ADDR_VAR 0 8
30253: PUSH
30254: LD_VAR 0 6
30258: PPUSH
30259: LD_VAR 0 4
30263: PPUSH
30264: LD_INT 3
30266: PPUSH
30267: CALL_OW 273
30271: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30272: LD_VAR 0 7
30276: PPUSH
30277: LD_VAR 0 8
30281: PPUSH
30282: CALL_OW 488
30286: NOT
30287: IFFALSE 30291
// continue ;
30289: GO 30223
// if HexInfo ( _x , _y ) = 0 then
30291: LD_VAR 0 7
30295: PPUSH
30296: LD_VAR 0 8
30300: PPUSH
30301: CALL_OW 428
30305: PUSH
30306: LD_INT 0
30308: EQUAL
30309: IFFALSE 30334
// begin ComMoveXY ( unit , _x , _y ) ;
30311: LD_VAR 0 1
30315: PPUSH
30316: LD_VAR 0 7
30320: PPUSH
30321: LD_VAR 0 8
30325: PPUSH
30326: CALL_OW 111
// exit ;
30330: POP
30331: POP
30332: GO 30338
// end ; end ;
30334: GO 30223
30336: POP
30337: POP
// end ;
30338: LD_VAR 0 3
30342: RET
// export function ScanBase ( side , base_area ) ; begin
30343: LD_INT 0
30345: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30346: LD_ADDR_VAR 0 3
30350: PUSH
30351: LD_VAR 0 2
30355: PPUSH
30356: LD_INT 81
30358: PUSH
30359: LD_VAR 0 1
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PPUSH
30368: CALL_OW 70
30372: ST_TO_ADDR
// end ;
30373: LD_VAR 0 3
30377: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30378: LD_INT 0
30380: PPUSH
30381: PPUSH
30382: PPUSH
30383: PPUSH
// result := false ;
30384: LD_ADDR_VAR 0 2
30388: PUSH
30389: LD_INT 0
30391: ST_TO_ADDR
// side := GetSide ( unit ) ;
30392: LD_ADDR_VAR 0 3
30396: PUSH
30397: LD_VAR 0 1
30401: PPUSH
30402: CALL_OW 255
30406: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30407: LD_ADDR_VAR 0 4
30411: PUSH
30412: LD_VAR 0 1
30416: PPUSH
30417: CALL_OW 248
30421: ST_TO_ADDR
// case nat of 1 :
30422: LD_VAR 0 4
30426: PUSH
30427: LD_INT 1
30429: DOUBLE
30430: EQUAL
30431: IFTRUE 30435
30433: GO 30446
30435: POP
// tech := tech_lassight ; 2 :
30436: LD_ADDR_VAR 0 5
30440: PUSH
30441: LD_INT 12
30443: ST_TO_ADDR
30444: GO 30485
30446: LD_INT 2
30448: DOUBLE
30449: EQUAL
30450: IFTRUE 30454
30452: GO 30465
30454: POP
// tech := tech_mortar ; 3 :
30455: LD_ADDR_VAR 0 5
30459: PUSH
30460: LD_INT 41
30462: ST_TO_ADDR
30463: GO 30485
30465: LD_INT 3
30467: DOUBLE
30468: EQUAL
30469: IFTRUE 30473
30471: GO 30484
30473: POP
// tech := tech_bazooka ; end ;
30474: LD_ADDR_VAR 0 5
30478: PUSH
30479: LD_INT 44
30481: ST_TO_ADDR
30482: GO 30485
30484: POP
// if Researched ( side , tech ) then
30485: LD_VAR 0 3
30489: PPUSH
30490: LD_VAR 0 5
30494: PPUSH
30495: CALL_OW 325
30499: IFFALSE 30526
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30501: LD_ADDR_VAR 0 2
30505: PUSH
30506: LD_INT 5
30508: PUSH
30509: LD_INT 8
30511: PUSH
30512: LD_INT 9
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: PUSH
30520: LD_VAR 0 4
30524: ARRAY
30525: ST_TO_ADDR
// end ;
30526: LD_VAR 0 2
30530: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30531: LD_INT 0
30533: PPUSH
30534: PPUSH
30535: PPUSH
// if not mines then
30536: LD_VAR 0 2
30540: NOT
30541: IFFALSE 30545
// exit ;
30543: GO 30689
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30545: LD_ADDR_VAR 0 5
30549: PUSH
30550: LD_INT 81
30552: PUSH
30553: LD_VAR 0 1
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 3
30564: PUSH
30565: LD_INT 21
30567: PUSH
30568: LD_INT 3
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PPUSH
30583: CALL_OW 69
30587: ST_TO_ADDR
// for i in mines do
30588: LD_ADDR_VAR 0 4
30592: PUSH
30593: LD_VAR 0 2
30597: PUSH
30598: FOR_IN
30599: IFFALSE 30687
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30601: LD_VAR 0 4
30605: PUSH
30606: LD_INT 1
30608: ARRAY
30609: PPUSH
30610: LD_VAR 0 4
30614: PUSH
30615: LD_INT 2
30617: ARRAY
30618: PPUSH
30619: CALL_OW 458
30623: NOT
30624: IFFALSE 30628
// continue ;
30626: GO 30598
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30628: LD_VAR 0 4
30632: PUSH
30633: LD_INT 1
30635: ARRAY
30636: PPUSH
30637: LD_VAR 0 4
30641: PUSH
30642: LD_INT 2
30644: ARRAY
30645: PPUSH
30646: CALL_OW 428
30650: PUSH
30651: LD_VAR 0 5
30655: IN
30656: IFFALSE 30685
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30658: LD_VAR 0 4
30662: PUSH
30663: LD_INT 1
30665: ARRAY
30666: PPUSH
30667: LD_VAR 0 4
30671: PUSH
30672: LD_INT 2
30674: ARRAY
30675: PPUSH
30676: LD_VAR 0 1
30680: PPUSH
30681: CALL_OW 456
// end ;
30685: GO 30598
30687: POP
30688: POP
// end ;
30689: LD_VAR 0 3
30693: RET
// export function Count ( array ) ; var i ; begin
30694: LD_INT 0
30696: PPUSH
30697: PPUSH
// result := 0 ;
30698: LD_ADDR_VAR 0 2
30702: PUSH
30703: LD_INT 0
30705: ST_TO_ADDR
// for i in array do
30706: LD_ADDR_VAR 0 3
30710: PUSH
30711: LD_VAR 0 1
30715: PUSH
30716: FOR_IN
30717: IFFALSE 30741
// if i then
30719: LD_VAR 0 3
30723: IFFALSE 30739
// result := result + 1 ;
30725: LD_ADDR_VAR 0 2
30729: PUSH
30730: LD_VAR 0 2
30734: PUSH
30735: LD_INT 1
30737: PLUS
30738: ST_TO_ADDR
30739: GO 30716
30741: POP
30742: POP
// end ;
30743: LD_VAR 0 2
30747: RET
// export function IsEmpty ( building ) ; begin
30748: LD_INT 0
30750: PPUSH
// if not building then
30751: LD_VAR 0 1
30755: NOT
30756: IFFALSE 30760
// exit ;
30758: GO 30803
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30760: LD_ADDR_VAR 0 2
30764: PUSH
30765: LD_VAR 0 1
30769: PUSH
30770: LD_INT 22
30772: PUSH
30773: LD_VAR 0 1
30777: PPUSH
30778: CALL_OW 255
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 58
30789: PUSH
30790: EMPTY
30791: LIST
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PPUSH
30797: CALL_OW 69
30801: IN
30802: ST_TO_ADDR
// end ;
30803: LD_VAR 0 2
30807: RET
// export function IsNotFull ( building ) ; begin
30808: LD_INT 0
30810: PPUSH
// if not building then
30811: LD_VAR 0 1
30815: NOT
30816: IFFALSE 30820
// exit ;
30818: GO 30839
// result := UnitsInside ( building ) < 6 ;
30820: LD_ADDR_VAR 0 2
30824: PUSH
30825: LD_VAR 0 1
30829: PPUSH
30830: CALL_OW 313
30834: PUSH
30835: LD_INT 6
30837: LESS
30838: ST_TO_ADDR
// end ;
30839: LD_VAR 0 2
30843: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30844: LD_INT 0
30846: PPUSH
30847: PPUSH
30848: PPUSH
30849: PPUSH
// tmp := [ ] ;
30850: LD_ADDR_VAR 0 3
30854: PUSH
30855: EMPTY
30856: ST_TO_ADDR
// list := [ ] ;
30857: LD_ADDR_VAR 0 5
30861: PUSH
30862: EMPTY
30863: ST_TO_ADDR
// for i = 16 to 25 do
30864: LD_ADDR_VAR 0 4
30868: PUSH
30869: DOUBLE
30870: LD_INT 16
30872: DEC
30873: ST_TO_ADDR
30874: LD_INT 25
30876: PUSH
30877: FOR_TO
30878: IFFALSE 30951
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30880: LD_ADDR_VAR 0 3
30884: PUSH
30885: LD_VAR 0 3
30889: PUSH
30890: LD_INT 22
30892: PUSH
30893: LD_VAR 0 1
30897: PPUSH
30898: CALL_OW 255
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 91
30909: PUSH
30910: LD_VAR 0 1
30914: PUSH
30915: LD_INT 6
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 30
30925: PUSH
30926: LD_VAR 0 4
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: LIST
30939: PUSH
30940: EMPTY
30941: LIST
30942: PPUSH
30943: CALL_OW 69
30947: ADD
30948: ST_TO_ADDR
30949: GO 30877
30951: POP
30952: POP
// for i = 1 to tmp do
30953: LD_ADDR_VAR 0 4
30957: PUSH
30958: DOUBLE
30959: LD_INT 1
30961: DEC
30962: ST_TO_ADDR
30963: LD_VAR 0 3
30967: PUSH
30968: FOR_TO
30969: IFFALSE 31057
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30971: LD_ADDR_VAR 0 5
30975: PUSH
30976: LD_VAR 0 5
30980: PUSH
30981: LD_VAR 0 3
30985: PUSH
30986: LD_VAR 0 4
30990: ARRAY
30991: PPUSH
30992: CALL_OW 266
30996: PUSH
30997: LD_VAR 0 3
31001: PUSH
31002: LD_VAR 0 4
31006: ARRAY
31007: PPUSH
31008: CALL_OW 250
31012: PUSH
31013: LD_VAR 0 3
31017: PUSH
31018: LD_VAR 0 4
31022: ARRAY
31023: PPUSH
31024: CALL_OW 251
31028: PUSH
31029: LD_VAR 0 3
31033: PUSH
31034: LD_VAR 0 4
31038: ARRAY
31039: PPUSH
31040: CALL_OW 254
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: PUSH
31051: EMPTY
31052: LIST
31053: ADD
31054: ST_TO_ADDR
31055: GO 30968
31057: POP
31058: POP
// result := list ;
31059: LD_ADDR_VAR 0 2
31063: PUSH
31064: LD_VAR 0 5
31068: ST_TO_ADDR
// end ;
31069: LD_VAR 0 2
31073: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31074: LD_INT 0
31076: PPUSH
31077: PPUSH
31078: PPUSH
31079: PPUSH
31080: PPUSH
31081: PPUSH
31082: PPUSH
// if not factory then
31083: LD_VAR 0 1
31087: NOT
31088: IFFALSE 31092
// exit ;
31090: GO 31685
// if control = control_apeman then
31092: LD_VAR 0 4
31096: PUSH
31097: LD_INT 5
31099: EQUAL
31100: IFFALSE 31209
// begin tmp := UnitsInside ( factory ) ;
31102: LD_ADDR_VAR 0 8
31106: PUSH
31107: LD_VAR 0 1
31111: PPUSH
31112: CALL_OW 313
31116: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31117: LD_VAR 0 8
31121: PPUSH
31122: LD_INT 25
31124: PUSH
31125: LD_INT 12
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PPUSH
31132: CALL_OW 72
31136: NOT
31137: IFFALSE 31147
// control := control_manual ;
31139: LD_ADDR_VAR 0 4
31143: PUSH
31144: LD_INT 1
31146: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31147: LD_ADDR_VAR 0 8
31151: PUSH
31152: LD_VAR 0 1
31156: PPUSH
31157: CALL 30844 0 1
31161: ST_TO_ADDR
// if tmp then
31162: LD_VAR 0 8
31166: IFFALSE 31209
// begin for i in tmp do
31168: LD_ADDR_VAR 0 7
31172: PUSH
31173: LD_VAR 0 8
31177: PUSH
31178: FOR_IN
31179: IFFALSE 31207
// if i [ 1 ] = b_ext_radio then
31181: LD_VAR 0 7
31185: PUSH
31186: LD_INT 1
31188: ARRAY
31189: PUSH
31190: LD_INT 22
31192: EQUAL
31193: IFFALSE 31205
// begin control := control_remote ;
31195: LD_ADDR_VAR 0 4
31199: PUSH
31200: LD_INT 2
31202: ST_TO_ADDR
// break ;
31203: GO 31207
// end ;
31205: GO 31178
31207: POP
31208: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31209: LD_VAR 0 1
31213: PPUSH
31214: LD_VAR 0 2
31218: PPUSH
31219: LD_VAR 0 3
31223: PPUSH
31224: LD_VAR 0 4
31228: PPUSH
31229: LD_VAR 0 5
31233: PPUSH
31234: CALL_OW 448
31238: IFFALSE 31273
// begin result := [ chassis , engine , control , weapon ] ;
31240: LD_ADDR_VAR 0 6
31244: PUSH
31245: LD_VAR 0 2
31249: PUSH
31250: LD_VAR 0 3
31254: PUSH
31255: LD_VAR 0 4
31259: PUSH
31260: LD_VAR 0 5
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: ST_TO_ADDR
// exit ;
31271: GO 31685
// end ; _chassis := AvailableChassisList ( factory ) ;
31273: LD_ADDR_VAR 0 9
31277: PUSH
31278: LD_VAR 0 1
31282: PPUSH
31283: CALL_OW 475
31287: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31288: LD_ADDR_VAR 0 11
31292: PUSH
31293: LD_VAR 0 1
31297: PPUSH
31298: CALL_OW 476
31302: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31303: LD_ADDR_VAR 0 12
31307: PUSH
31308: LD_VAR 0 1
31312: PPUSH
31313: CALL_OW 477
31317: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31318: LD_ADDR_VAR 0 10
31322: PUSH
31323: LD_VAR 0 1
31327: PPUSH
31328: CALL_OW 478
31332: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31333: LD_VAR 0 9
31337: NOT
31338: PUSH
31339: LD_VAR 0 11
31343: NOT
31344: OR
31345: PUSH
31346: LD_VAR 0 12
31350: NOT
31351: OR
31352: PUSH
31353: LD_VAR 0 10
31357: NOT
31358: OR
31359: IFFALSE 31394
// begin result := [ chassis , engine , control , weapon ] ;
31361: LD_ADDR_VAR 0 6
31365: PUSH
31366: LD_VAR 0 2
31370: PUSH
31371: LD_VAR 0 3
31375: PUSH
31376: LD_VAR 0 4
31380: PUSH
31381: LD_VAR 0 5
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
// exit ;
31392: GO 31685
// end ; if not chassis in _chassis then
31394: LD_VAR 0 2
31398: PUSH
31399: LD_VAR 0 9
31403: IN
31404: NOT
31405: IFFALSE 31431
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31407: LD_ADDR_VAR 0 2
31411: PUSH
31412: LD_VAR 0 9
31416: PUSH
31417: LD_INT 1
31419: PPUSH
31420: LD_VAR 0 9
31424: PPUSH
31425: CALL_OW 12
31429: ARRAY
31430: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31431: LD_VAR 0 2
31435: PPUSH
31436: LD_VAR 0 3
31440: PPUSH
31441: CALL 31690 0 2
31445: NOT
31446: IFFALSE 31505
// repeat engine := _engine [ 1 ] ;
31448: LD_ADDR_VAR 0 3
31452: PUSH
31453: LD_VAR 0 11
31457: PUSH
31458: LD_INT 1
31460: ARRAY
31461: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31462: LD_ADDR_VAR 0 11
31466: PUSH
31467: LD_VAR 0 11
31471: PPUSH
31472: LD_INT 1
31474: PPUSH
31475: CALL_OW 3
31479: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31480: LD_VAR 0 2
31484: PPUSH
31485: LD_VAR 0 3
31489: PPUSH
31490: CALL 31690 0 2
31494: PUSH
31495: LD_VAR 0 11
31499: PUSH
31500: EMPTY
31501: EQUAL
31502: OR
31503: IFFALSE 31448
// if not control in _control then
31505: LD_VAR 0 4
31509: PUSH
31510: LD_VAR 0 12
31514: IN
31515: NOT
31516: IFFALSE 31542
// control := _control [ rand ( 1 , _control ) ] ;
31518: LD_ADDR_VAR 0 4
31522: PUSH
31523: LD_VAR 0 12
31527: PUSH
31528: LD_INT 1
31530: PPUSH
31531: LD_VAR 0 12
31535: PPUSH
31536: CALL_OW 12
31540: ARRAY
31541: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31542: LD_VAR 0 2
31546: PPUSH
31547: LD_VAR 0 5
31551: PPUSH
31552: CALL 31910 0 2
31556: NOT
31557: IFFALSE 31616
// repeat weapon := _weapon [ 1 ] ;
31559: LD_ADDR_VAR 0 5
31563: PUSH
31564: LD_VAR 0 10
31568: PUSH
31569: LD_INT 1
31571: ARRAY
31572: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31573: LD_ADDR_VAR 0 10
31577: PUSH
31578: LD_VAR 0 10
31582: PPUSH
31583: LD_INT 1
31585: PPUSH
31586: CALL_OW 3
31590: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31591: LD_VAR 0 2
31595: PPUSH
31596: LD_VAR 0 5
31600: PPUSH
31601: CALL 31910 0 2
31605: PUSH
31606: LD_VAR 0 10
31610: PUSH
31611: EMPTY
31612: EQUAL
31613: OR
31614: IFFALSE 31559
// result := [ ] ;
31616: LD_ADDR_VAR 0 6
31620: PUSH
31621: EMPTY
31622: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31623: LD_VAR 0 1
31627: PPUSH
31628: LD_VAR 0 2
31632: PPUSH
31633: LD_VAR 0 3
31637: PPUSH
31638: LD_VAR 0 4
31642: PPUSH
31643: LD_VAR 0 5
31647: PPUSH
31648: CALL_OW 448
31652: IFFALSE 31685
// result := [ chassis , engine , control , weapon ] ;
31654: LD_ADDR_VAR 0 6
31658: PUSH
31659: LD_VAR 0 2
31663: PUSH
31664: LD_VAR 0 3
31668: PUSH
31669: LD_VAR 0 4
31673: PUSH
31674: LD_VAR 0 5
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: ST_TO_ADDR
// end ;
31685: LD_VAR 0 6
31689: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31690: LD_INT 0
31692: PPUSH
// if not chassis or not engine then
31693: LD_VAR 0 1
31697: NOT
31698: PUSH
31699: LD_VAR 0 2
31703: NOT
31704: OR
31705: IFFALSE 31709
// exit ;
31707: GO 31905
// case engine of engine_solar :
31709: LD_VAR 0 2
31713: PUSH
31714: LD_INT 2
31716: DOUBLE
31717: EQUAL
31718: IFTRUE 31722
31720: GO 31760
31722: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31723: LD_ADDR_VAR 0 3
31727: PUSH
31728: LD_INT 11
31730: PUSH
31731: LD_INT 12
31733: PUSH
31734: LD_INT 13
31736: PUSH
31737: LD_INT 14
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: LD_INT 2
31745: PUSH
31746: LD_INT 3
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: ST_TO_ADDR
31758: GO 31889
31760: LD_INT 1
31762: DOUBLE
31763: EQUAL
31764: IFTRUE 31768
31766: GO 31830
31768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31769: LD_ADDR_VAR 0 3
31773: PUSH
31774: LD_INT 11
31776: PUSH
31777: LD_INT 12
31779: PUSH
31780: LD_INT 13
31782: PUSH
31783: LD_INT 14
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: LD_INT 2
31791: PUSH
31792: LD_INT 3
31794: PUSH
31795: LD_INT 4
31797: PUSH
31798: LD_INT 5
31800: PUSH
31801: LD_INT 21
31803: PUSH
31804: LD_INT 23
31806: PUSH
31807: LD_INT 22
31809: PUSH
31810: LD_INT 24
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: ST_TO_ADDR
31828: GO 31889
31830: LD_INT 3
31832: DOUBLE
31833: EQUAL
31834: IFTRUE 31838
31836: GO 31888
31838: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31839: LD_ADDR_VAR 0 3
31843: PUSH
31844: LD_INT 13
31846: PUSH
31847: LD_INT 14
31849: PUSH
31850: LD_INT 2
31852: PUSH
31853: LD_INT 3
31855: PUSH
31856: LD_INT 4
31858: PUSH
31859: LD_INT 5
31861: PUSH
31862: LD_INT 21
31864: PUSH
31865: LD_INT 22
31867: PUSH
31868: LD_INT 23
31870: PUSH
31871: LD_INT 24
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: ST_TO_ADDR
31886: GO 31889
31888: POP
// result := ( chassis in result ) ;
31889: LD_ADDR_VAR 0 3
31893: PUSH
31894: LD_VAR 0 1
31898: PUSH
31899: LD_VAR 0 3
31903: IN
31904: ST_TO_ADDR
// end ;
31905: LD_VAR 0 3
31909: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31910: LD_INT 0
31912: PPUSH
// if not chassis or not weapon then
31913: LD_VAR 0 1
31917: NOT
31918: PUSH
31919: LD_VAR 0 2
31923: NOT
31924: OR
31925: IFFALSE 31929
// exit ;
31927: GO 32991
// case weapon of us_machine_gun :
31929: LD_VAR 0 2
31933: PUSH
31934: LD_INT 2
31936: DOUBLE
31937: EQUAL
31938: IFTRUE 31942
31940: GO 31972
31942: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31943: LD_ADDR_VAR 0 3
31947: PUSH
31948: LD_INT 1
31950: PUSH
31951: LD_INT 2
31953: PUSH
31954: LD_INT 3
31956: PUSH
31957: LD_INT 4
31959: PUSH
31960: LD_INT 5
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: ST_TO_ADDR
31970: GO 32975
31972: LD_INT 3
31974: DOUBLE
31975: EQUAL
31976: IFTRUE 31980
31978: GO 32010
31980: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31981: LD_ADDR_VAR 0 3
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: LD_INT 2
31991: PUSH
31992: LD_INT 3
31994: PUSH
31995: LD_INT 4
31997: PUSH
31998: LD_INT 5
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: ST_TO_ADDR
32008: GO 32975
32010: LD_INT 11
32012: DOUBLE
32013: EQUAL
32014: IFTRUE 32018
32016: GO 32048
32018: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32019: LD_ADDR_VAR 0 3
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: LD_INT 2
32029: PUSH
32030: LD_INT 3
32032: PUSH
32033: LD_INT 4
32035: PUSH
32036: LD_INT 5
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: ST_TO_ADDR
32046: GO 32975
32048: LD_INT 4
32050: DOUBLE
32051: EQUAL
32052: IFTRUE 32056
32054: GO 32082
32056: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32057: LD_ADDR_VAR 0 3
32061: PUSH
32062: LD_INT 2
32064: PUSH
32065: LD_INT 3
32067: PUSH
32068: LD_INT 4
32070: PUSH
32071: LD_INT 5
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: ST_TO_ADDR
32080: GO 32975
32082: LD_INT 5
32084: DOUBLE
32085: EQUAL
32086: IFTRUE 32090
32088: GO 32116
32090: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32091: LD_ADDR_VAR 0 3
32095: PUSH
32096: LD_INT 2
32098: PUSH
32099: LD_INT 3
32101: PUSH
32102: LD_INT 4
32104: PUSH
32105: LD_INT 5
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: ST_TO_ADDR
32114: GO 32975
32116: LD_INT 9
32118: DOUBLE
32119: EQUAL
32120: IFTRUE 32124
32122: GO 32150
32124: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32125: LD_ADDR_VAR 0 3
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: LD_INT 3
32135: PUSH
32136: LD_INT 4
32138: PUSH
32139: LD_INT 5
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: ST_TO_ADDR
32148: GO 32975
32150: LD_INT 7
32152: DOUBLE
32153: EQUAL
32154: IFTRUE 32158
32156: GO 32184
32158: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32159: LD_ADDR_VAR 0 3
32163: PUSH
32164: LD_INT 2
32166: PUSH
32167: LD_INT 3
32169: PUSH
32170: LD_INT 4
32172: PUSH
32173: LD_INT 5
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: ST_TO_ADDR
32182: GO 32975
32184: LD_INT 12
32186: DOUBLE
32187: EQUAL
32188: IFTRUE 32192
32190: GO 32218
32192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32193: LD_ADDR_VAR 0 3
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: LD_INT 3
32203: PUSH
32204: LD_INT 4
32206: PUSH
32207: LD_INT 5
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: ST_TO_ADDR
32216: GO 32975
32218: LD_INT 13
32220: DOUBLE
32221: EQUAL
32222: IFTRUE 32226
32224: GO 32252
32226: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32227: LD_ADDR_VAR 0 3
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: LD_INT 3
32237: PUSH
32238: LD_INT 4
32240: PUSH
32241: LD_INT 5
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: ST_TO_ADDR
32250: GO 32975
32252: LD_INT 14
32254: DOUBLE
32255: EQUAL
32256: IFTRUE 32260
32258: GO 32278
32260: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32261: LD_ADDR_VAR 0 3
32265: PUSH
32266: LD_INT 4
32268: PUSH
32269: LD_INT 5
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: ST_TO_ADDR
32276: GO 32975
32278: LD_INT 6
32280: DOUBLE
32281: EQUAL
32282: IFTRUE 32286
32284: GO 32304
32286: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32287: LD_ADDR_VAR 0 3
32291: PUSH
32292: LD_INT 4
32294: PUSH
32295: LD_INT 5
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: ST_TO_ADDR
32302: GO 32975
32304: LD_INT 10
32306: DOUBLE
32307: EQUAL
32308: IFTRUE 32312
32310: GO 32330
32312: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32313: LD_ADDR_VAR 0 3
32317: PUSH
32318: LD_INT 4
32320: PUSH
32321: LD_INT 5
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: ST_TO_ADDR
32328: GO 32975
32330: LD_INT 22
32332: DOUBLE
32333: EQUAL
32334: IFTRUE 32338
32336: GO 32364
32338: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32339: LD_ADDR_VAR 0 3
32343: PUSH
32344: LD_INT 11
32346: PUSH
32347: LD_INT 12
32349: PUSH
32350: LD_INT 13
32352: PUSH
32353: LD_INT 14
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: ST_TO_ADDR
32362: GO 32975
32364: LD_INT 23
32366: DOUBLE
32367: EQUAL
32368: IFTRUE 32372
32370: GO 32398
32372: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32373: LD_ADDR_VAR 0 3
32377: PUSH
32378: LD_INT 11
32380: PUSH
32381: LD_INT 12
32383: PUSH
32384: LD_INT 13
32386: PUSH
32387: LD_INT 14
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: ST_TO_ADDR
32396: GO 32975
32398: LD_INT 24
32400: DOUBLE
32401: EQUAL
32402: IFTRUE 32406
32404: GO 32432
32406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32407: LD_ADDR_VAR 0 3
32411: PUSH
32412: LD_INT 11
32414: PUSH
32415: LD_INT 12
32417: PUSH
32418: LD_INT 13
32420: PUSH
32421: LD_INT 14
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: ST_TO_ADDR
32430: GO 32975
32432: LD_INT 30
32434: DOUBLE
32435: EQUAL
32436: IFTRUE 32440
32438: GO 32466
32440: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32441: LD_ADDR_VAR 0 3
32445: PUSH
32446: LD_INT 11
32448: PUSH
32449: LD_INT 12
32451: PUSH
32452: LD_INT 13
32454: PUSH
32455: LD_INT 14
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: ST_TO_ADDR
32464: GO 32975
32466: LD_INT 25
32468: DOUBLE
32469: EQUAL
32470: IFTRUE 32474
32472: GO 32492
32474: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32475: LD_ADDR_VAR 0 3
32479: PUSH
32480: LD_INT 13
32482: PUSH
32483: LD_INT 14
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: ST_TO_ADDR
32490: GO 32975
32492: LD_INT 27
32494: DOUBLE
32495: EQUAL
32496: IFTRUE 32500
32498: GO 32518
32500: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32501: LD_ADDR_VAR 0 3
32505: PUSH
32506: LD_INT 13
32508: PUSH
32509: LD_INT 14
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: ST_TO_ADDR
32516: GO 32975
32518: LD_EXP 30
32522: DOUBLE
32523: EQUAL
32524: IFTRUE 32528
32526: GO 32554
32528: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32529: LD_ADDR_VAR 0 3
32533: PUSH
32534: LD_INT 11
32536: PUSH
32537: LD_INT 12
32539: PUSH
32540: LD_INT 13
32542: PUSH
32543: LD_INT 14
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: ST_TO_ADDR
32552: GO 32975
32554: LD_INT 28
32556: DOUBLE
32557: EQUAL
32558: IFTRUE 32562
32560: GO 32580
32562: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32563: LD_ADDR_VAR 0 3
32567: PUSH
32568: LD_INT 13
32570: PUSH
32571: LD_INT 14
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: ST_TO_ADDR
32578: GO 32975
32580: LD_INT 29
32582: DOUBLE
32583: EQUAL
32584: IFTRUE 32588
32586: GO 32606
32588: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32589: LD_ADDR_VAR 0 3
32593: PUSH
32594: LD_INT 13
32596: PUSH
32597: LD_INT 14
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: ST_TO_ADDR
32604: GO 32975
32606: LD_INT 31
32608: DOUBLE
32609: EQUAL
32610: IFTRUE 32614
32612: GO 32632
32614: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32615: LD_ADDR_VAR 0 3
32619: PUSH
32620: LD_INT 13
32622: PUSH
32623: LD_INT 14
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: ST_TO_ADDR
32630: GO 32975
32632: LD_INT 26
32634: DOUBLE
32635: EQUAL
32636: IFTRUE 32640
32638: GO 32658
32640: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32641: LD_ADDR_VAR 0 3
32645: PUSH
32646: LD_INT 13
32648: PUSH
32649: LD_INT 14
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: ST_TO_ADDR
32656: GO 32975
32658: LD_INT 42
32660: DOUBLE
32661: EQUAL
32662: IFTRUE 32666
32664: GO 32692
32666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32667: LD_ADDR_VAR 0 3
32671: PUSH
32672: LD_INT 21
32674: PUSH
32675: LD_INT 22
32677: PUSH
32678: LD_INT 23
32680: PUSH
32681: LD_INT 24
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: ST_TO_ADDR
32690: GO 32975
32692: LD_INT 43
32694: DOUBLE
32695: EQUAL
32696: IFTRUE 32700
32698: GO 32726
32700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32701: LD_ADDR_VAR 0 3
32705: PUSH
32706: LD_INT 21
32708: PUSH
32709: LD_INT 22
32711: PUSH
32712: LD_INT 23
32714: PUSH
32715: LD_INT 24
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: ST_TO_ADDR
32724: GO 32975
32726: LD_INT 44
32728: DOUBLE
32729: EQUAL
32730: IFTRUE 32734
32732: GO 32760
32734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32735: LD_ADDR_VAR 0 3
32739: PUSH
32740: LD_INT 21
32742: PUSH
32743: LD_INT 22
32745: PUSH
32746: LD_INT 23
32748: PUSH
32749: LD_INT 24
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: ST_TO_ADDR
32758: GO 32975
32760: LD_INT 45
32762: DOUBLE
32763: EQUAL
32764: IFTRUE 32768
32766: GO 32794
32768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32769: LD_ADDR_VAR 0 3
32773: PUSH
32774: LD_INT 21
32776: PUSH
32777: LD_INT 22
32779: PUSH
32780: LD_INT 23
32782: PUSH
32783: LD_INT 24
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: ST_TO_ADDR
32792: GO 32975
32794: LD_INT 49
32796: DOUBLE
32797: EQUAL
32798: IFTRUE 32802
32800: GO 32828
32802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32803: LD_ADDR_VAR 0 3
32807: PUSH
32808: LD_INT 21
32810: PUSH
32811: LD_INT 22
32813: PUSH
32814: LD_INT 23
32816: PUSH
32817: LD_INT 24
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: ST_TO_ADDR
32826: GO 32975
32828: LD_INT 51
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 32862
32836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32837: LD_ADDR_VAR 0 3
32841: PUSH
32842: LD_INT 21
32844: PUSH
32845: LD_INT 22
32847: PUSH
32848: LD_INT 23
32850: PUSH
32851: LD_INT 24
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: ST_TO_ADDR
32860: GO 32975
32862: LD_INT 52
32864: DOUBLE
32865: EQUAL
32866: IFTRUE 32870
32868: GO 32896
32870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32871: LD_ADDR_VAR 0 3
32875: PUSH
32876: LD_INT 21
32878: PUSH
32879: LD_INT 22
32881: PUSH
32882: LD_INT 23
32884: PUSH
32885: LD_INT 24
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: ST_TO_ADDR
32894: GO 32975
32896: LD_INT 53
32898: DOUBLE
32899: EQUAL
32900: IFTRUE 32904
32902: GO 32922
32904: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32905: LD_ADDR_VAR 0 3
32909: PUSH
32910: LD_INT 23
32912: PUSH
32913: LD_INT 24
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: ST_TO_ADDR
32920: GO 32975
32922: LD_INT 46
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 32948
32930: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32931: LD_ADDR_VAR 0 3
32935: PUSH
32936: LD_INT 23
32938: PUSH
32939: LD_INT 24
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: ST_TO_ADDR
32946: GO 32975
32948: LD_INT 47
32950: DOUBLE
32951: EQUAL
32952: IFTRUE 32956
32954: GO 32974
32956: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32957: LD_ADDR_VAR 0 3
32961: PUSH
32962: LD_INT 23
32964: PUSH
32965: LD_INT 24
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: ST_TO_ADDR
32972: GO 32975
32974: POP
// result := ( chassis in result ) ;
32975: LD_ADDR_VAR 0 3
32979: PUSH
32980: LD_VAR 0 1
32984: PUSH
32985: LD_VAR 0 3
32989: IN
32990: ST_TO_ADDR
// end ;
32991: LD_VAR 0 3
32995: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32996: LD_INT 0
32998: PPUSH
32999: PPUSH
33000: PPUSH
33001: PPUSH
33002: PPUSH
33003: PPUSH
33004: PPUSH
// result := array ;
33005: LD_ADDR_VAR 0 5
33009: PUSH
33010: LD_VAR 0 1
33014: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33015: LD_VAR 0 1
33019: NOT
33020: PUSH
33021: LD_VAR 0 2
33025: NOT
33026: OR
33027: PUSH
33028: LD_VAR 0 3
33032: NOT
33033: OR
33034: PUSH
33035: LD_VAR 0 2
33039: PUSH
33040: LD_VAR 0 1
33044: GREATER
33045: OR
33046: PUSH
33047: LD_VAR 0 3
33051: PUSH
33052: LD_VAR 0 1
33056: GREATER
33057: OR
33058: IFFALSE 33062
// exit ;
33060: GO 33358
// if direction then
33062: LD_VAR 0 4
33066: IFFALSE 33130
// begin d := 1 ;
33068: LD_ADDR_VAR 0 9
33072: PUSH
33073: LD_INT 1
33075: ST_TO_ADDR
// if i_from > i_to then
33076: LD_VAR 0 2
33080: PUSH
33081: LD_VAR 0 3
33085: GREATER
33086: IFFALSE 33112
// length := ( array - i_from ) + i_to else
33088: LD_ADDR_VAR 0 11
33092: PUSH
33093: LD_VAR 0 1
33097: PUSH
33098: LD_VAR 0 2
33102: MINUS
33103: PUSH
33104: LD_VAR 0 3
33108: PLUS
33109: ST_TO_ADDR
33110: GO 33128
// length := i_to - i_from ;
33112: LD_ADDR_VAR 0 11
33116: PUSH
33117: LD_VAR 0 3
33121: PUSH
33122: LD_VAR 0 2
33126: MINUS
33127: ST_TO_ADDR
// end else
33128: GO 33191
// begin d := - 1 ;
33130: LD_ADDR_VAR 0 9
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: ST_TO_ADDR
// if i_from > i_to then
33139: LD_VAR 0 2
33143: PUSH
33144: LD_VAR 0 3
33148: GREATER
33149: IFFALSE 33169
// length := i_from - i_to else
33151: LD_ADDR_VAR 0 11
33155: PUSH
33156: LD_VAR 0 2
33160: PUSH
33161: LD_VAR 0 3
33165: MINUS
33166: ST_TO_ADDR
33167: GO 33191
// length := ( array - i_to ) + i_from ;
33169: LD_ADDR_VAR 0 11
33173: PUSH
33174: LD_VAR 0 1
33178: PUSH
33179: LD_VAR 0 3
33183: MINUS
33184: PUSH
33185: LD_VAR 0 2
33189: PLUS
33190: ST_TO_ADDR
// end ; if not length then
33191: LD_VAR 0 11
33195: NOT
33196: IFFALSE 33200
// exit ;
33198: GO 33358
// tmp := array ;
33200: LD_ADDR_VAR 0 10
33204: PUSH
33205: LD_VAR 0 1
33209: ST_TO_ADDR
// for i = 1 to length do
33210: LD_ADDR_VAR 0 6
33214: PUSH
33215: DOUBLE
33216: LD_INT 1
33218: DEC
33219: ST_TO_ADDR
33220: LD_VAR 0 11
33224: PUSH
33225: FOR_TO
33226: IFFALSE 33346
// begin for j = 1 to array do
33228: LD_ADDR_VAR 0 7
33232: PUSH
33233: DOUBLE
33234: LD_INT 1
33236: DEC
33237: ST_TO_ADDR
33238: LD_VAR 0 1
33242: PUSH
33243: FOR_TO
33244: IFFALSE 33332
// begin k := j + d ;
33246: LD_ADDR_VAR 0 8
33250: PUSH
33251: LD_VAR 0 7
33255: PUSH
33256: LD_VAR 0 9
33260: PLUS
33261: ST_TO_ADDR
// if k > array then
33262: LD_VAR 0 8
33266: PUSH
33267: LD_VAR 0 1
33271: GREATER
33272: IFFALSE 33282
// k := 1 ;
33274: LD_ADDR_VAR 0 8
33278: PUSH
33279: LD_INT 1
33281: ST_TO_ADDR
// if not k then
33282: LD_VAR 0 8
33286: NOT
33287: IFFALSE 33299
// k := array ;
33289: LD_ADDR_VAR 0 8
33293: PUSH
33294: LD_VAR 0 1
33298: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33299: LD_ADDR_VAR 0 10
33303: PUSH
33304: LD_VAR 0 10
33308: PPUSH
33309: LD_VAR 0 8
33313: PPUSH
33314: LD_VAR 0 1
33318: PUSH
33319: LD_VAR 0 7
33323: ARRAY
33324: PPUSH
33325: CALL_OW 1
33329: ST_TO_ADDR
// end ;
33330: GO 33243
33332: POP
33333: POP
// array := tmp ;
33334: LD_ADDR_VAR 0 1
33338: PUSH
33339: LD_VAR 0 10
33343: ST_TO_ADDR
// end ;
33344: GO 33225
33346: POP
33347: POP
// result := array ;
33348: LD_ADDR_VAR 0 5
33352: PUSH
33353: LD_VAR 0 1
33357: ST_TO_ADDR
// end ;
33358: LD_VAR 0 5
33362: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33363: LD_INT 0
33365: PPUSH
33366: PPUSH
// result := 0 ;
33367: LD_ADDR_VAR 0 3
33371: PUSH
33372: LD_INT 0
33374: ST_TO_ADDR
// if not array or not value in array then
33375: LD_VAR 0 1
33379: NOT
33380: PUSH
33381: LD_VAR 0 2
33385: PUSH
33386: LD_VAR 0 1
33390: IN
33391: NOT
33392: OR
33393: IFFALSE 33397
// exit ;
33395: GO 33451
// for i = 1 to array do
33397: LD_ADDR_VAR 0 4
33401: PUSH
33402: DOUBLE
33403: LD_INT 1
33405: DEC
33406: ST_TO_ADDR
33407: LD_VAR 0 1
33411: PUSH
33412: FOR_TO
33413: IFFALSE 33449
// if value = array [ i ] then
33415: LD_VAR 0 2
33419: PUSH
33420: LD_VAR 0 1
33424: PUSH
33425: LD_VAR 0 4
33429: ARRAY
33430: EQUAL
33431: IFFALSE 33447
// begin result := i ;
33433: LD_ADDR_VAR 0 3
33437: PUSH
33438: LD_VAR 0 4
33442: ST_TO_ADDR
// exit ;
33443: POP
33444: POP
33445: GO 33451
// end ;
33447: GO 33412
33449: POP
33450: POP
// end ;
33451: LD_VAR 0 3
33455: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33456: LD_INT 0
33458: PPUSH
// vc_chassis := chassis ;
33459: LD_ADDR_OWVAR 37
33463: PUSH
33464: LD_VAR 0 1
33468: ST_TO_ADDR
// vc_engine := engine ;
33469: LD_ADDR_OWVAR 39
33473: PUSH
33474: LD_VAR 0 2
33478: ST_TO_ADDR
// vc_control := control ;
33479: LD_ADDR_OWVAR 38
33483: PUSH
33484: LD_VAR 0 3
33488: ST_TO_ADDR
// vc_weapon := weapon ;
33489: LD_ADDR_OWVAR 40
33493: PUSH
33494: LD_VAR 0 4
33498: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33499: LD_ADDR_OWVAR 41
33503: PUSH
33504: LD_VAR 0 5
33508: ST_TO_ADDR
// end ;
33509: LD_VAR 0 6
33513: RET
// export function WantPlant ( unit ) ; var task ; begin
33514: LD_INT 0
33516: PPUSH
33517: PPUSH
// result := false ;
33518: LD_ADDR_VAR 0 2
33522: PUSH
33523: LD_INT 0
33525: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33526: LD_ADDR_VAR 0 3
33530: PUSH
33531: LD_VAR 0 1
33535: PPUSH
33536: CALL_OW 437
33540: ST_TO_ADDR
// if task then
33541: LD_VAR 0 3
33545: IFFALSE 33573
// if task [ 1 ] [ 1 ] = p then
33547: LD_VAR 0 3
33551: PUSH
33552: LD_INT 1
33554: ARRAY
33555: PUSH
33556: LD_INT 1
33558: ARRAY
33559: PUSH
33560: LD_STRING p
33562: EQUAL
33563: IFFALSE 33573
// result := true ;
33565: LD_ADDR_VAR 0 2
33569: PUSH
33570: LD_INT 1
33572: ST_TO_ADDR
// end ;
33573: LD_VAR 0 2
33577: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33578: LD_INT 0
33580: PPUSH
33581: PPUSH
33582: PPUSH
33583: PPUSH
// if pos < 1 then
33584: LD_VAR 0 2
33588: PUSH
33589: LD_INT 1
33591: LESS
33592: IFFALSE 33596
// exit ;
33594: GO 33899
// if pos = 1 then
33596: LD_VAR 0 2
33600: PUSH
33601: LD_INT 1
33603: EQUAL
33604: IFFALSE 33637
// result := Replace ( arr , pos [ 1 ] , value ) else
33606: LD_ADDR_VAR 0 4
33610: PUSH
33611: LD_VAR 0 1
33615: PPUSH
33616: LD_VAR 0 2
33620: PUSH
33621: LD_INT 1
33623: ARRAY
33624: PPUSH
33625: LD_VAR 0 3
33629: PPUSH
33630: CALL_OW 1
33634: ST_TO_ADDR
33635: GO 33899
// begin tmp := arr ;
33637: LD_ADDR_VAR 0 6
33641: PUSH
33642: LD_VAR 0 1
33646: ST_TO_ADDR
// s_arr := [ tmp ] ;
33647: LD_ADDR_VAR 0 7
33651: PUSH
33652: LD_VAR 0 6
33656: PUSH
33657: EMPTY
33658: LIST
33659: ST_TO_ADDR
// for i = 1 to pos - 1 do
33660: LD_ADDR_VAR 0 5
33664: PUSH
33665: DOUBLE
33666: LD_INT 1
33668: DEC
33669: ST_TO_ADDR
33670: LD_VAR 0 2
33674: PUSH
33675: LD_INT 1
33677: MINUS
33678: PUSH
33679: FOR_TO
33680: IFFALSE 33725
// begin tmp := tmp [ pos [ i ] ] ;
33682: LD_ADDR_VAR 0 6
33686: PUSH
33687: LD_VAR 0 6
33691: PUSH
33692: LD_VAR 0 2
33696: PUSH
33697: LD_VAR 0 5
33701: ARRAY
33702: ARRAY
33703: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33704: LD_ADDR_VAR 0 7
33708: PUSH
33709: LD_VAR 0 7
33713: PUSH
33714: LD_VAR 0 6
33718: PUSH
33719: EMPTY
33720: LIST
33721: ADD
33722: ST_TO_ADDR
// end ;
33723: GO 33679
33725: POP
33726: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33727: LD_ADDR_VAR 0 6
33731: PUSH
33732: LD_VAR 0 6
33736: PPUSH
33737: LD_VAR 0 2
33741: PUSH
33742: LD_VAR 0 2
33746: ARRAY
33747: PPUSH
33748: LD_VAR 0 3
33752: PPUSH
33753: CALL_OW 1
33757: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33758: LD_ADDR_VAR 0 7
33762: PUSH
33763: LD_VAR 0 7
33767: PPUSH
33768: LD_VAR 0 7
33772: PPUSH
33773: LD_VAR 0 6
33777: PPUSH
33778: CALL_OW 1
33782: ST_TO_ADDR
// for i = s_arr downto 2 do
33783: LD_ADDR_VAR 0 5
33787: PUSH
33788: DOUBLE
33789: LD_VAR 0 7
33793: INC
33794: ST_TO_ADDR
33795: LD_INT 2
33797: PUSH
33798: FOR_DOWNTO
33799: IFFALSE 33883
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33801: LD_ADDR_VAR 0 6
33805: PUSH
33806: LD_VAR 0 7
33810: PUSH
33811: LD_VAR 0 5
33815: PUSH
33816: LD_INT 1
33818: MINUS
33819: ARRAY
33820: PPUSH
33821: LD_VAR 0 2
33825: PUSH
33826: LD_VAR 0 5
33830: PUSH
33831: LD_INT 1
33833: MINUS
33834: ARRAY
33835: PPUSH
33836: LD_VAR 0 7
33840: PUSH
33841: LD_VAR 0 5
33845: ARRAY
33846: PPUSH
33847: CALL_OW 1
33851: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33852: LD_ADDR_VAR 0 7
33856: PUSH
33857: LD_VAR 0 7
33861: PPUSH
33862: LD_VAR 0 5
33866: PUSH
33867: LD_INT 1
33869: MINUS
33870: PPUSH
33871: LD_VAR 0 6
33875: PPUSH
33876: CALL_OW 1
33880: ST_TO_ADDR
// end ;
33881: GO 33798
33883: POP
33884: POP
// result := s_arr [ 1 ] ;
33885: LD_ADDR_VAR 0 4
33889: PUSH
33890: LD_VAR 0 7
33894: PUSH
33895: LD_INT 1
33897: ARRAY
33898: ST_TO_ADDR
// end ; end ;
33899: LD_VAR 0 4
33903: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33904: LD_INT 0
33906: PPUSH
33907: PPUSH
// if not list then
33908: LD_VAR 0 1
33912: NOT
33913: IFFALSE 33917
// exit ;
33915: GO 34008
// i := list [ pos1 ] ;
33917: LD_ADDR_VAR 0 5
33921: PUSH
33922: LD_VAR 0 1
33926: PUSH
33927: LD_VAR 0 2
33931: ARRAY
33932: ST_TO_ADDR
// if not i then
33933: LD_VAR 0 5
33937: NOT
33938: IFFALSE 33942
// exit ;
33940: GO 34008
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33942: LD_ADDR_VAR 0 1
33946: PUSH
33947: LD_VAR 0 1
33951: PPUSH
33952: LD_VAR 0 2
33956: PPUSH
33957: LD_VAR 0 1
33961: PUSH
33962: LD_VAR 0 3
33966: ARRAY
33967: PPUSH
33968: CALL_OW 1
33972: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33973: LD_ADDR_VAR 0 1
33977: PUSH
33978: LD_VAR 0 1
33982: PPUSH
33983: LD_VAR 0 3
33987: PPUSH
33988: LD_VAR 0 5
33992: PPUSH
33993: CALL_OW 1
33997: ST_TO_ADDR
// result := list ;
33998: LD_ADDR_VAR 0 4
34002: PUSH
34003: LD_VAR 0 1
34007: ST_TO_ADDR
// end ;
34008: LD_VAR 0 4
34012: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34013: LD_INT 0
34015: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34016: LD_ADDR_VAR 0 5
34020: PUSH
34021: LD_VAR 0 1
34025: PPUSH
34026: CALL_OW 250
34030: PPUSH
34031: LD_VAR 0 1
34035: PPUSH
34036: CALL_OW 251
34040: PPUSH
34041: LD_VAR 0 2
34045: PPUSH
34046: LD_VAR 0 3
34050: PPUSH
34051: LD_VAR 0 4
34055: PPUSH
34056: CALL 34066 0 5
34060: ST_TO_ADDR
// end ;
34061: LD_VAR 0 5
34065: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34066: LD_INT 0
34068: PPUSH
34069: PPUSH
34070: PPUSH
34071: PPUSH
// if not list then
34072: LD_VAR 0 3
34076: NOT
34077: IFFALSE 34081
// exit ;
34079: GO 34469
// result := [ ] ;
34081: LD_ADDR_VAR 0 6
34085: PUSH
34086: EMPTY
34087: ST_TO_ADDR
// for i in list do
34088: LD_ADDR_VAR 0 7
34092: PUSH
34093: LD_VAR 0 3
34097: PUSH
34098: FOR_IN
34099: IFFALSE 34301
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34101: LD_ADDR_VAR 0 9
34105: PUSH
34106: LD_VAR 0 7
34110: PPUSH
34111: LD_VAR 0 1
34115: PPUSH
34116: LD_VAR 0 2
34120: PPUSH
34121: CALL_OW 297
34125: ST_TO_ADDR
// if not result then
34126: LD_VAR 0 6
34130: NOT
34131: IFFALSE 34157
// result := [ [ i , tmp ] ] else
34133: LD_ADDR_VAR 0 6
34137: PUSH
34138: LD_VAR 0 7
34142: PUSH
34143: LD_VAR 0 9
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: EMPTY
34153: LIST
34154: ST_TO_ADDR
34155: GO 34299
// begin if result [ result ] [ 2 ] < tmp then
34157: LD_VAR 0 6
34161: PUSH
34162: LD_VAR 0 6
34166: ARRAY
34167: PUSH
34168: LD_INT 2
34170: ARRAY
34171: PUSH
34172: LD_VAR 0 9
34176: LESS
34177: IFFALSE 34219
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34179: LD_ADDR_VAR 0 6
34183: PUSH
34184: LD_VAR 0 6
34188: PPUSH
34189: LD_VAR 0 6
34193: PUSH
34194: LD_INT 1
34196: PLUS
34197: PPUSH
34198: LD_VAR 0 7
34202: PUSH
34203: LD_VAR 0 9
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PPUSH
34212: CALL_OW 2
34216: ST_TO_ADDR
34217: GO 34299
// for j = 1 to result do
34219: LD_ADDR_VAR 0 8
34223: PUSH
34224: DOUBLE
34225: LD_INT 1
34227: DEC
34228: ST_TO_ADDR
34229: LD_VAR 0 6
34233: PUSH
34234: FOR_TO
34235: IFFALSE 34297
// begin if tmp < result [ j ] [ 2 ] then
34237: LD_VAR 0 9
34241: PUSH
34242: LD_VAR 0 6
34246: PUSH
34247: LD_VAR 0 8
34251: ARRAY
34252: PUSH
34253: LD_INT 2
34255: ARRAY
34256: LESS
34257: IFFALSE 34295
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34259: LD_ADDR_VAR 0 6
34263: PUSH
34264: LD_VAR 0 6
34268: PPUSH
34269: LD_VAR 0 8
34273: PPUSH
34274: LD_VAR 0 7
34278: PUSH
34279: LD_VAR 0 9
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PPUSH
34288: CALL_OW 2
34292: ST_TO_ADDR
// break ;
34293: GO 34297
// end ; end ;
34295: GO 34234
34297: POP
34298: POP
// end ; end ;
34299: GO 34098
34301: POP
34302: POP
// if result and not asc then
34303: LD_VAR 0 6
34307: PUSH
34308: LD_VAR 0 4
34312: NOT
34313: AND
34314: IFFALSE 34389
// begin tmp := result ;
34316: LD_ADDR_VAR 0 9
34320: PUSH
34321: LD_VAR 0 6
34325: ST_TO_ADDR
// for i = tmp downto 1 do
34326: LD_ADDR_VAR 0 7
34330: PUSH
34331: DOUBLE
34332: LD_VAR 0 9
34336: INC
34337: ST_TO_ADDR
34338: LD_INT 1
34340: PUSH
34341: FOR_DOWNTO
34342: IFFALSE 34387
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34344: LD_ADDR_VAR 0 6
34348: PUSH
34349: LD_VAR 0 6
34353: PPUSH
34354: LD_VAR 0 9
34358: PUSH
34359: LD_VAR 0 7
34363: MINUS
34364: PUSH
34365: LD_INT 1
34367: PLUS
34368: PPUSH
34369: LD_VAR 0 9
34373: PUSH
34374: LD_VAR 0 7
34378: ARRAY
34379: PPUSH
34380: CALL_OW 1
34384: ST_TO_ADDR
34385: GO 34341
34387: POP
34388: POP
// end ; tmp := [ ] ;
34389: LD_ADDR_VAR 0 9
34393: PUSH
34394: EMPTY
34395: ST_TO_ADDR
// if mode then
34396: LD_VAR 0 5
34400: IFFALSE 34469
// begin for i = 1 to result do
34402: LD_ADDR_VAR 0 7
34406: PUSH
34407: DOUBLE
34408: LD_INT 1
34410: DEC
34411: ST_TO_ADDR
34412: LD_VAR 0 6
34416: PUSH
34417: FOR_TO
34418: IFFALSE 34457
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34420: LD_ADDR_VAR 0 9
34424: PUSH
34425: LD_VAR 0 9
34429: PPUSH
34430: LD_VAR 0 7
34434: PPUSH
34435: LD_VAR 0 6
34439: PUSH
34440: LD_VAR 0 7
34444: ARRAY
34445: PUSH
34446: LD_INT 1
34448: ARRAY
34449: PPUSH
34450: CALL_OW 1
34454: ST_TO_ADDR
34455: GO 34417
34457: POP
34458: POP
// result := tmp ;
34459: LD_ADDR_VAR 0 6
34463: PUSH
34464: LD_VAR 0 9
34468: ST_TO_ADDR
// end ; end ;
34469: LD_VAR 0 6
34473: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34474: LD_INT 0
34476: PPUSH
34477: PPUSH
34478: PPUSH
34479: PPUSH
34480: PPUSH
34481: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34482: LD_ADDR_VAR 0 5
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: EMPTY
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: ST_TO_ADDR
// if not x or not y then
34504: LD_VAR 0 2
34508: NOT
34509: PUSH
34510: LD_VAR 0 3
34514: NOT
34515: OR
34516: IFFALSE 34520
// exit ;
34518: GO 36172
// if not range then
34520: LD_VAR 0 4
34524: NOT
34525: IFFALSE 34535
// range := 10 ;
34527: LD_ADDR_VAR 0 4
34531: PUSH
34532: LD_INT 10
34534: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34535: LD_ADDR_VAR 0 8
34539: PUSH
34540: LD_INT 81
34542: PUSH
34543: LD_VAR 0 1
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 92
34554: PUSH
34555: LD_VAR 0 2
34559: PUSH
34560: LD_VAR 0 3
34564: PUSH
34565: LD_VAR 0 4
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 3
34578: PUSH
34579: LD_INT 21
34581: PUSH
34582: LD_INT 3
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: LIST
34597: PPUSH
34598: CALL_OW 69
34602: ST_TO_ADDR
// if not tmp then
34603: LD_VAR 0 8
34607: NOT
34608: IFFALSE 34612
// exit ;
34610: GO 36172
// for i in tmp do
34612: LD_ADDR_VAR 0 6
34616: PUSH
34617: LD_VAR 0 8
34621: PUSH
34622: FOR_IN
34623: IFFALSE 36147
// begin points := [ 0 , 0 , 0 ] ;
34625: LD_ADDR_VAR 0 9
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: LD_INT 0
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: LIST
34643: ST_TO_ADDR
// bpoints := 1 ;
34644: LD_ADDR_VAR 0 10
34648: PUSH
34649: LD_INT 1
34651: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34652: LD_VAR 0 6
34656: PPUSH
34657: CALL_OW 247
34661: PUSH
34662: LD_INT 1
34664: DOUBLE
34665: EQUAL
34666: IFTRUE 34670
34668: GO 35248
34670: POP
// begin if GetClass ( i ) = 1 then
34671: LD_VAR 0 6
34675: PPUSH
34676: CALL_OW 257
34680: PUSH
34681: LD_INT 1
34683: EQUAL
34684: IFFALSE 34705
// points := [ 10 , 5 , 3 ] ;
34686: LD_ADDR_VAR 0 9
34690: PUSH
34691: LD_INT 10
34693: PUSH
34694: LD_INT 5
34696: PUSH
34697: LD_INT 3
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: LIST
34704: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34705: LD_VAR 0 6
34709: PPUSH
34710: CALL_OW 257
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: LD_INT 3
34720: PUSH
34721: LD_INT 4
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: LIST
34728: IN
34729: IFFALSE 34750
// points := [ 3 , 2 , 1 ] ;
34731: LD_ADDR_VAR 0 9
34735: PUSH
34736: LD_INT 3
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: LIST
34749: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34750: LD_VAR 0 6
34754: PPUSH
34755: CALL_OW 257
34759: PUSH
34760: LD_INT 5
34762: EQUAL
34763: IFFALSE 34784
// points := [ 130 , 5 , 2 ] ;
34765: LD_ADDR_VAR 0 9
34769: PUSH
34770: LD_INT 130
34772: PUSH
34773: LD_INT 5
34775: PUSH
34776: LD_INT 2
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: LIST
34783: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34784: LD_VAR 0 6
34788: PPUSH
34789: CALL_OW 257
34793: PUSH
34794: LD_INT 8
34796: EQUAL
34797: IFFALSE 34818
// points := [ 35 , 35 , 30 ] ;
34799: LD_ADDR_VAR 0 9
34803: PUSH
34804: LD_INT 35
34806: PUSH
34807: LD_INT 35
34809: PUSH
34810: LD_INT 30
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34818: LD_VAR 0 6
34822: PPUSH
34823: CALL_OW 257
34827: PUSH
34828: LD_INT 9
34830: EQUAL
34831: IFFALSE 34852
// points := [ 20 , 55 , 40 ] ;
34833: LD_ADDR_VAR 0 9
34837: PUSH
34838: LD_INT 20
34840: PUSH
34841: LD_INT 55
34843: PUSH
34844: LD_INT 40
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: LIST
34851: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34852: LD_VAR 0 6
34856: PPUSH
34857: CALL_OW 257
34861: PUSH
34862: LD_INT 12
34864: PUSH
34865: LD_INT 16
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: IN
34872: IFFALSE 34893
// points := [ 5 , 3 , 2 ] ;
34874: LD_ADDR_VAR 0 9
34878: PUSH
34879: LD_INT 5
34881: PUSH
34882: LD_INT 3
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34893: LD_VAR 0 6
34897: PPUSH
34898: CALL_OW 257
34902: PUSH
34903: LD_INT 17
34905: EQUAL
34906: IFFALSE 34927
// points := [ 100 , 50 , 75 ] ;
34908: LD_ADDR_VAR 0 9
34912: PUSH
34913: LD_INT 100
34915: PUSH
34916: LD_INT 50
34918: PUSH
34919: LD_INT 75
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: LIST
34926: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34927: LD_VAR 0 6
34931: PPUSH
34932: CALL_OW 257
34936: PUSH
34937: LD_INT 15
34939: EQUAL
34940: IFFALSE 34961
// points := [ 10 , 5 , 3 ] ;
34942: LD_ADDR_VAR 0 9
34946: PUSH
34947: LD_INT 10
34949: PUSH
34950: LD_INT 5
34952: PUSH
34953: LD_INT 3
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: LIST
34960: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34961: LD_VAR 0 6
34965: PPUSH
34966: CALL_OW 257
34970: PUSH
34971: LD_INT 14
34973: EQUAL
34974: IFFALSE 34995
// points := [ 10 , 0 , 0 ] ;
34976: LD_ADDR_VAR 0 9
34980: PUSH
34981: LD_INT 10
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 0
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: LIST
34994: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34995: LD_VAR 0 6
34999: PPUSH
35000: CALL_OW 257
35004: PUSH
35005: LD_INT 11
35007: EQUAL
35008: IFFALSE 35029
// points := [ 30 , 10 , 5 ] ;
35010: LD_ADDR_VAR 0 9
35014: PUSH
35015: LD_INT 30
35017: PUSH
35018: LD_INT 10
35020: PUSH
35021: LD_INT 5
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: LIST
35028: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35029: LD_VAR 0 1
35033: PPUSH
35034: LD_INT 5
35036: PPUSH
35037: CALL_OW 321
35041: PUSH
35042: LD_INT 2
35044: EQUAL
35045: IFFALSE 35062
// bpoints := bpoints * 1.8 ;
35047: LD_ADDR_VAR 0 10
35051: PUSH
35052: LD_VAR 0 10
35056: PUSH
35057: LD_REAL  1.80000000000000E+0000
35060: MUL
35061: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35062: LD_VAR 0 6
35066: PPUSH
35067: CALL_OW 257
35071: PUSH
35072: LD_INT 1
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: LD_INT 3
35080: PUSH
35081: LD_INT 4
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: IN
35090: PUSH
35091: LD_VAR 0 1
35095: PPUSH
35096: LD_INT 51
35098: PPUSH
35099: CALL_OW 321
35103: PUSH
35104: LD_INT 2
35106: EQUAL
35107: AND
35108: IFFALSE 35125
// bpoints := bpoints * 1.2 ;
35110: LD_ADDR_VAR 0 10
35114: PUSH
35115: LD_VAR 0 10
35119: PUSH
35120: LD_REAL  1.20000000000000E+0000
35123: MUL
35124: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35125: LD_VAR 0 6
35129: PPUSH
35130: CALL_OW 257
35134: PUSH
35135: LD_INT 5
35137: PUSH
35138: LD_INT 7
35140: PUSH
35141: LD_INT 9
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: LIST
35148: IN
35149: PUSH
35150: LD_VAR 0 1
35154: PPUSH
35155: LD_INT 52
35157: PPUSH
35158: CALL_OW 321
35162: PUSH
35163: LD_INT 2
35165: EQUAL
35166: AND
35167: IFFALSE 35184
// bpoints := bpoints * 1.5 ;
35169: LD_ADDR_VAR 0 10
35173: PUSH
35174: LD_VAR 0 10
35178: PUSH
35179: LD_REAL  1.50000000000000E+0000
35182: MUL
35183: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35184: LD_VAR 0 1
35188: PPUSH
35189: LD_INT 66
35191: PPUSH
35192: CALL_OW 321
35196: PUSH
35197: LD_INT 2
35199: EQUAL
35200: IFFALSE 35217
// bpoints := bpoints * 1.1 ;
35202: LD_ADDR_VAR 0 10
35206: PUSH
35207: LD_VAR 0 10
35211: PUSH
35212: LD_REAL  1.10000000000000E+0000
35215: MUL
35216: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35217: LD_ADDR_VAR 0 10
35221: PUSH
35222: LD_VAR 0 10
35226: PUSH
35227: LD_VAR 0 6
35231: PPUSH
35232: LD_INT 1
35234: PPUSH
35235: CALL_OW 259
35239: PUSH
35240: LD_REAL  1.15000000000000E+0000
35243: MUL
35244: MUL
35245: ST_TO_ADDR
// end ; unit_vehicle :
35246: GO 36076
35248: LD_INT 2
35250: DOUBLE
35251: EQUAL
35252: IFTRUE 35256
35254: GO 36064
35256: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35257: LD_VAR 0 6
35261: PPUSH
35262: CALL_OW 264
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: LD_INT 42
35272: PUSH
35273: LD_INT 24
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: LIST
35280: IN
35281: IFFALSE 35302
// points := [ 25 , 5 , 3 ] ;
35283: LD_ADDR_VAR 0 9
35287: PUSH
35288: LD_INT 25
35290: PUSH
35291: LD_INT 5
35293: PUSH
35294: LD_INT 3
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: LIST
35301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35302: LD_VAR 0 6
35306: PPUSH
35307: CALL_OW 264
35311: PUSH
35312: LD_INT 4
35314: PUSH
35315: LD_INT 43
35317: PUSH
35318: LD_INT 25
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: LIST
35325: IN
35326: IFFALSE 35347
// points := [ 40 , 15 , 5 ] ;
35328: LD_ADDR_VAR 0 9
35332: PUSH
35333: LD_INT 40
35335: PUSH
35336: LD_INT 15
35338: PUSH
35339: LD_INT 5
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35347: LD_VAR 0 6
35351: PPUSH
35352: CALL_OW 264
35356: PUSH
35357: LD_INT 3
35359: PUSH
35360: LD_INT 23
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: IN
35367: IFFALSE 35388
// points := [ 7 , 25 , 8 ] ;
35369: LD_ADDR_VAR 0 9
35373: PUSH
35374: LD_INT 7
35376: PUSH
35377: LD_INT 25
35379: PUSH
35380: LD_INT 8
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: LIST
35387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35388: LD_VAR 0 6
35392: PPUSH
35393: CALL_OW 264
35397: PUSH
35398: LD_INT 5
35400: PUSH
35401: LD_INT 27
35403: PUSH
35404: LD_INT 44
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: IN
35412: IFFALSE 35433
// points := [ 14 , 50 , 16 ] ;
35414: LD_ADDR_VAR 0 9
35418: PUSH
35419: LD_INT 14
35421: PUSH
35422: LD_INT 50
35424: PUSH
35425: LD_INT 16
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: LIST
35432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35433: LD_VAR 0 6
35437: PPUSH
35438: CALL_OW 264
35442: PUSH
35443: LD_INT 6
35445: PUSH
35446: LD_INT 46
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: IN
35453: IFFALSE 35474
// points := [ 32 , 120 , 70 ] ;
35455: LD_ADDR_VAR 0 9
35459: PUSH
35460: LD_INT 32
35462: PUSH
35463: LD_INT 120
35465: PUSH
35466: LD_INT 70
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: LIST
35473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35474: LD_VAR 0 6
35478: PPUSH
35479: CALL_OW 264
35483: PUSH
35484: LD_INT 7
35486: PUSH
35487: LD_INT 28
35489: PUSH
35490: LD_INT 45
35492: PUSH
35493: LD_EXP 30
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: IN
35504: IFFALSE 35525
// points := [ 35 , 20 , 45 ] ;
35506: LD_ADDR_VAR 0 9
35510: PUSH
35511: LD_INT 35
35513: PUSH
35514: LD_INT 20
35516: PUSH
35517: LD_INT 45
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35525: LD_VAR 0 6
35529: PPUSH
35530: CALL_OW 264
35534: PUSH
35535: LD_INT 47
35537: PUSH
35538: EMPTY
35539: LIST
35540: IN
35541: IFFALSE 35562
// points := [ 67 , 45 , 75 ] ;
35543: LD_ADDR_VAR 0 9
35547: PUSH
35548: LD_INT 67
35550: PUSH
35551: LD_INT 45
35553: PUSH
35554: LD_INT 75
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: LIST
35561: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35562: LD_VAR 0 6
35566: PPUSH
35567: CALL_OW 264
35571: PUSH
35572: LD_INT 26
35574: PUSH
35575: EMPTY
35576: LIST
35577: IN
35578: IFFALSE 35599
// points := [ 120 , 30 , 80 ] ;
35580: LD_ADDR_VAR 0 9
35584: PUSH
35585: LD_INT 120
35587: PUSH
35588: LD_INT 30
35590: PUSH
35591: LD_INT 80
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35599: LD_VAR 0 6
35603: PPUSH
35604: CALL_OW 264
35608: PUSH
35609: LD_INT 22
35611: PUSH
35612: EMPTY
35613: LIST
35614: IN
35615: IFFALSE 35636
// points := [ 40 , 1 , 1 ] ;
35617: LD_ADDR_VAR 0 9
35621: PUSH
35622: LD_INT 40
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: LD_INT 1
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: LIST
35635: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35636: LD_VAR 0 6
35640: PPUSH
35641: CALL_OW 264
35645: PUSH
35646: LD_INT 29
35648: PUSH
35649: EMPTY
35650: LIST
35651: IN
35652: IFFALSE 35673
// points := [ 70 , 200 , 400 ] ;
35654: LD_ADDR_VAR 0 9
35658: PUSH
35659: LD_INT 70
35661: PUSH
35662: LD_INT 200
35664: PUSH
35665: LD_INT 400
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: LIST
35672: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35673: LD_VAR 0 6
35677: PPUSH
35678: CALL_OW 264
35682: PUSH
35683: LD_INT 14
35685: PUSH
35686: LD_INT 53
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: IN
35693: IFFALSE 35714
// points := [ 40 , 10 , 20 ] ;
35695: LD_ADDR_VAR 0 9
35699: PUSH
35700: LD_INT 40
35702: PUSH
35703: LD_INT 10
35705: PUSH
35706: LD_INT 20
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35714: LD_VAR 0 6
35718: PPUSH
35719: CALL_OW 264
35723: PUSH
35724: LD_INT 9
35726: PUSH
35727: EMPTY
35728: LIST
35729: IN
35730: IFFALSE 35751
// points := [ 5 , 70 , 20 ] ;
35732: LD_ADDR_VAR 0 9
35736: PUSH
35737: LD_INT 5
35739: PUSH
35740: LD_INT 70
35742: PUSH
35743: LD_INT 20
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: LIST
35750: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35751: LD_VAR 0 6
35755: PPUSH
35756: CALL_OW 264
35760: PUSH
35761: LD_INT 10
35763: PUSH
35764: EMPTY
35765: LIST
35766: IN
35767: IFFALSE 35788
// points := [ 35 , 110 , 70 ] ;
35769: LD_ADDR_VAR 0 9
35773: PUSH
35774: LD_INT 35
35776: PUSH
35777: LD_INT 110
35779: PUSH
35780: LD_INT 70
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: LIST
35787: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35788: LD_VAR 0 6
35792: PPUSH
35793: CALL_OW 265
35797: PUSH
35798: LD_INT 25
35800: EQUAL
35801: IFFALSE 35822
// points := [ 80 , 65 , 100 ] ;
35803: LD_ADDR_VAR 0 9
35807: PUSH
35808: LD_INT 80
35810: PUSH
35811: LD_INT 65
35813: PUSH
35814: LD_INT 100
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: LIST
35821: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35822: LD_VAR 0 6
35826: PPUSH
35827: CALL_OW 263
35831: PUSH
35832: LD_INT 1
35834: EQUAL
35835: IFFALSE 35870
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35837: LD_ADDR_VAR 0 10
35841: PUSH
35842: LD_VAR 0 10
35846: PUSH
35847: LD_VAR 0 6
35851: PPUSH
35852: CALL_OW 311
35856: PPUSH
35857: LD_INT 3
35859: PPUSH
35860: CALL_OW 259
35864: PUSH
35865: LD_INT 4
35867: MUL
35868: MUL
35869: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35870: LD_VAR 0 6
35874: PPUSH
35875: CALL_OW 263
35879: PUSH
35880: LD_INT 2
35882: EQUAL
35883: IFFALSE 35934
// begin j := IsControledBy ( i ) ;
35885: LD_ADDR_VAR 0 7
35889: PUSH
35890: LD_VAR 0 6
35894: PPUSH
35895: CALL_OW 312
35899: ST_TO_ADDR
// if j then
35900: LD_VAR 0 7
35904: IFFALSE 35934
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35906: LD_ADDR_VAR 0 10
35910: PUSH
35911: LD_VAR 0 10
35915: PUSH
35916: LD_VAR 0 7
35920: PPUSH
35921: LD_INT 3
35923: PPUSH
35924: CALL_OW 259
35928: PUSH
35929: LD_INT 3
35931: MUL
35932: MUL
35933: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35934: LD_VAR 0 6
35938: PPUSH
35939: CALL_OW 264
35943: PUSH
35944: LD_INT 5
35946: PUSH
35947: LD_INT 6
35949: PUSH
35950: LD_INT 46
35952: PUSH
35953: LD_INT 44
35955: PUSH
35956: LD_INT 47
35958: PUSH
35959: LD_INT 45
35961: PUSH
35962: LD_INT 28
35964: PUSH
35965: LD_INT 7
35967: PUSH
35968: LD_INT 27
35970: PUSH
35971: LD_INT 29
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: IN
35986: PUSH
35987: LD_VAR 0 1
35991: PPUSH
35992: LD_INT 52
35994: PPUSH
35995: CALL_OW 321
35999: PUSH
36000: LD_INT 2
36002: EQUAL
36003: AND
36004: IFFALSE 36021
// bpoints := bpoints * 1.2 ;
36006: LD_ADDR_VAR 0 10
36010: PUSH
36011: LD_VAR 0 10
36015: PUSH
36016: LD_REAL  1.20000000000000E+0000
36019: MUL
36020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36021: LD_VAR 0 6
36025: PPUSH
36026: CALL_OW 264
36030: PUSH
36031: LD_INT 6
36033: PUSH
36034: LD_INT 46
36036: PUSH
36037: LD_INT 47
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: LIST
36044: IN
36045: IFFALSE 36062
// bpoints := bpoints * 1.2 ;
36047: LD_ADDR_VAR 0 10
36051: PUSH
36052: LD_VAR 0 10
36056: PUSH
36057: LD_REAL  1.20000000000000E+0000
36060: MUL
36061: ST_TO_ADDR
// end ; unit_building :
36062: GO 36076
36064: LD_INT 3
36066: DOUBLE
36067: EQUAL
36068: IFTRUE 36072
36070: GO 36075
36072: POP
// ; end ;
36073: GO 36076
36075: POP
// for j = 1 to 3 do
36076: LD_ADDR_VAR 0 7
36080: PUSH
36081: DOUBLE
36082: LD_INT 1
36084: DEC
36085: ST_TO_ADDR
36086: LD_INT 3
36088: PUSH
36089: FOR_TO
36090: IFFALSE 36143
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36092: LD_ADDR_VAR 0 5
36096: PUSH
36097: LD_VAR 0 5
36101: PPUSH
36102: LD_VAR 0 7
36106: PPUSH
36107: LD_VAR 0 5
36111: PUSH
36112: LD_VAR 0 7
36116: ARRAY
36117: PUSH
36118: LD_VAR 0 9
36122: PUSH
36123: LD_VAR 0 7
36127: ARRAY
36128: PUSH
36129: LD_VAR 0 10
36133: MUL
36134: PLUS
36135: PPUSH
36136: CALL_OW 1
36140: ST_TO_ADDR
36141: GO 36089
36143: POP
36144: POP
// end ;
36145: GO 34622
36147: POP
36148: POP
// result := Replace ( result , 4 , tmp ) ;
36149: LD_ADDR_VAR 0 5
36153: PUSH
36154: LD_VAR 0 5
36158: PPUSH
36159: LD_INT 4
36161: PPUSH
36162: LD_VAR 0 8
36166: PPUSH
36167: CALL_OW 1
36171: ST_TO_ADDR
// end ;
36172: LD_VAR 0 5
36176: RET
// export function DangerAtRange ( unit , range ) ; begin
36177: LD_INT 0
36179: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36180: LD_ADDR_VAR 0 3
36184: PUSH
36185: LD_VAR 0 1
36189: PPUSH
36190: CALL_OW 255
36194: PPUSH
36195: LD_VAR 0 1
36199: PPUSH
36200: CALL_OW 250
36204: PPUSH
36205: LD_VAR 0 1
36209: PPUSH
36210: CALL_OW 251
36214: PPUSH
36215: LD_VAR 0 2
36219: PPUSH
36220: CALL 34474 0 4
36224: ST_TO_ADDR
// end ;
36225: LD_VAR 0 3
36229: RET
// export function DangerInArea ( side , area ) ; begin
36230: LD_INT 0
36232: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36233: LD_ADDR_VAR 0 3
36237: PUSH
36238: LD_VAR 0 2
36242: PPUSH
36243: LD_INT 81
36245: PUSH
36246: LD_VAR 0 1
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PPUSH
36255: CALL_OW 70
36259: ST_TO_ADDR
// end ;
36260: LD_VAR 0 3
36264: RET
// export function IsExtension ( b ) ; begin
36265: LD_INT 0
36267: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36268: LD_ADDR_VAR 0 2
36272: PUSH
36273: LD_VAR 0 1
36277: PUSH
36278: LD_INT 23
36280: PUSH
36281: LD_INT 20
36283: PUSH
36284: LD_INT 22
36286: PUSH
36287: LD_INT 17
36289: PUSH
36290: LD_INT 24
36292: PUSH
36293: LD_INT 21
36295: PUSH
36296: LD_INT 19
36298: PUSH
36299: LD_INT 16
36301: PUSH
36302: LD_INT 25
36304: PUSH
36305: LD_INT 18
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: IN
36320: ST_TO_ADDR
// end ;
36321: LD_VAR 0 2
36325: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36326: LD_INT 0
36328: PPUSH
36329: PPUSH
36330: PPUSH
// result := [ ] ;
36331: LD_ADDR_VAR 0 4
36335: PUSH
36336: EMPTY
36337: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36338: LD_ADDR_VAR 0 5
36342: PUSH
36343: LD_VAR 0 2
36347: PPUSH
36348: LD_INT 21
36350: PUSH
36351: LD_INT 3
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PPUSH
36358: CALL_OW 70
36362: ST_TO_ADDR
// if not tmp then
36363: LD_VAR 0 5
36367: NOT
36368: IFFALSE 36372
// exit ;
36370: GO 36436
// if checkLink then
36372: LD_VAR 0 3
36376: IFFALSE 36426
// begin for i in tmp do
36378: LD_ADDR_VAR 0 6
36382: PUSH
36383: LD_VAR 0 5
36387: PUSH
36388: FOR_IN
36389: IFFALSE 36424
// if GetBase ( i ) <> base then
36391: LD_VAR 0 6
36395: PPUSH
36396: CALL_OW 274
36400: PUSH
36401: LD_VAR 0 1
36405: NONEQUAL
36406: IFFALSE 36422
// ComLinkToBase ( base , i ) ;
36408: LD_VAR 0 1
36412: PPUSH
36413: LD_VAR 0 6
36417: PPUSH
36418: CALL_OW 169
36422: GO 36388
36424: POP
36425: POP
// end ; result := tmp ;
36426: LD_ADDR_VAR 0 4
36430: PUSH
36431: LD_VAR 0 5
36435: ST_TO_ADDR
// end ;
36436: LD_VAR 0 4
36440: RET
// export function ComComplete ( units , b ) ; var i ; begin
36441: LD_INT 0
36443: PPUSH
36444: PPUSH
// if not units then
36445: LD_VAR 0 1
36449: NOT
36450: IFFALSE 36454
// exit ;
36452: GO 36544
// for i in units do
36454: LD_ADDR_VAR 0 4
36458: PUSH
36459: LD_VAR 0 1
36463: PUSH
36464: FOR_IN
36465: IFFALSE 36542
// if BuildingStatus ( b ) = bs_build then
36467: LD_VAR 0 2
36471: PPUSH
36472: CALL_OW 461
36476: PUSH
36477: LD_INT 1
36479: EQUAL
36480: IFFALSE 36540
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36482: LD_VAR 0 4
36486: PPUSH
36487: LD_STRING h
36489: PUSH
36490: LD_VAR 0 2
36494: PPUSH
36495: CALL_OW 250
36499: PUSH
36500: LD_VAR 0 2
36504: PPUSH
36505: CALL_OW 251
36509: PUSH
36510: LD_VAR 0 2
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: LD_INT 0
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: PUSH
36533: EMPTY
36534: LIST
36535: PPUSH
36536: CALL_OW 446
36540: GO 36464
36542: POP
36543: POP
// end ;
36544: LD_VAR 0 3
36548: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36549: LD_INT 0
36551: PPUSH
36552: PPUSH
36553: PPUSH
36554: PPUSH
36555: PPUSH
36556: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36557: LD_VAR 0 1
36561: NOT
36562: PUSH
36563: LD_VAR 0 1
36567: PPUSH
36568: CALL_OW 263
36572: PUSH
36573: LD_INT 2
36575: NONEQUAL
36576: OR
36577: IFFALSE 36581
// exit ;
36579: GO 36897
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36581: LD_ADDR_VAR 0 6
36585: PUSH
36586: LD_INT 22
36588: PUSH
36589: LD_VAR 0 1
36593: PPUSH
36594: CALL_OW 255
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 2
36605: PUSH
36606: LD_INT 30
36608: PUSH
36609: LD_INT 36
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 34
36618: PUSH
36619: LD_INT 31
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: LIST
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PPUSH
36635: CALL_OW 69
36639: ST_TO_ADDR
// if not tmp then
36640: LD_VAR 0 6
36644: NOT
36645: IFFALSE 36649
// exit ;
36647: GO 36897
// result := [ ] ;
36649: LD_ADDR_VAR 0 2
36653: PUSH
36654: EMPTY
36655: ST_TO_ADDR
// for i in tmp do
36656: LD_ADDR_VAR 0 3
36660: PUSH
36661: LD_VAR 0 6
36665: PUSH
36666: FOR_IN
36667: IFFALSE 36738
// begin t := UnitsInside ( i ) ;
36669: LD_ADDR_VAR 0 4
36673: PUSH
36674: LD_VAR 0 3
36678: PPUSH
36679: CALL_OW 313
36683: ST_TO_ADDR
// if t then
36684: LD_VAR 0 4
36688: IFFALSE 36736
// for j in t do
36690: LD_ADDR_VAR 0 7
36694: PUSH
36695: LD_VAR 0 4
36699: PUSH
36700: FOR_IN
36701: IFFALSE 36734
// result := Replace ( result , result + 1 , j ) ;
36703: LD_ADDR_VAR 0 2
36707: PUSH
36708: LD_VAR 0 2
36712: PPUSH
36713: LD_VAR 0 2
36717: PUSH
36718: LD_INT 1
36720: PLUS
36721: PPUSH
36722: LD_VAR 0 7
36726: PPUSH
36727: CALL_OW 1
36731: ST_TO_ADDR
36732: GO 36700
36734: POP
36735: POP
// end ;
36736: GO 36666
36738: POP
36739: POP
// if not result then
36740: LD_VAR 0 2
36744: NOT
36745: IFFALSE 36749
// exit ;
36747: GO 36897
// mech := result [ 1 ] ;
36749: LD_ADDR_VAR 0 5
36753: PUSH
36754: LD_VAR 0 2
36758: PUSH
36759: LD_INT 1
36761: ARRAY
36762: ST_TO_ADDR
// if result > 1 then
36763: LD_VAR 0 2
36767: PUSH
36768: LD_INT 1
36770: GREATER
36771: IFFALSE 36883
// begin for i = 2 to result do
36773: LD_ADDR_VAR 0 3
36777: PUSH
36778: DOUBLE
36779: LD_INT 2
36781: DEC
36782: ST_TO_ADDR
36783: LD_VAR 0 2
36787: PUSH
36788: FOR_TO
36789: IFFALSE 36881
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36791: LD_ADDR_VAR 0 4
36795: PUSH
36796: LD_VAR 0 2
36800: PUSH
36801: LD_VAR 0 3
36805: ARRAY
36806: PPUSH
36807: LD_INT 3
36809: PPUSH
36810: CALL_OW 259
36814: PUSH
36815: LD_VAR 0 2
36819: PUSH
36820: LD_VAR 0 3
36824: ARRAY
36825: PPUSH
36826: CALL_OW 432
36830: MINUS
36831: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36832: LD_VAR 0 4
36836: PUSH
36837: LD_VAR 0 5
36841: PPUSH
36842: LD_INT 3
36844: PPUSH
36845: CALL_OW 259
36849: PUSH
36850: LD_VAR 0 5
36854: PPUSH
36855: CALL_OW 432
36859: MINUS
36860: GREATEREQUAL
36861: IFFALSE 36879
// mech := result [ i ] ;
36863: LD_ADDR_VAR 0 5
36867: PUSH
36868: LD_VAR 0 2
36872: PUSH
36873: LD_VAR 0 3
36877: ARRAY
36878: ST_TO_ADDR
// end ;
36879: GO 36788
36881: POP
36882: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36883: LD_VAR 0 1
36887: PPUSH
36888: LD_VAR 0 5
36892: PPUSH
36893: CALL_OW 135
// end ;
36897: LD_VAR 0 2
36901: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36902: LD_INT 0
36904: PPUSH
36905: PPUSH
36906: PPUSH
36907: PPUSH
36908: PPUSH
36909: PPUSH
36910: PPUSH
36911: PPUSH
36912: PPUSH
36913: PPUSH
36914: PPUSH
36915: PPUSH
36916: PPUSH
// result := [ ] ;
36917: LD_ADDR_VAR 0 7
36921: PUSH
36922: EMPTY
36923: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36924: LD_VAR 0 1
36928: PPUSH
36929: CALL_OW 266
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: IN
36944: NOT
36945: IFFALSE 36949
// exit ;
36947: GO 38583
// if name then
36949: LD_VAR 0 3
36953: IFFALSE 36969
// SetBName ( base_dep , name ) ;
36955: LD_VAR 0 1
36959: PPUSH
36960: LD_VAR 0 3
36964: PPUSH
36965: CALL_OW 500
// base := GetBase ( base_dep ) ;
36969: LD_ADDR_VAR 0 15
36973: PUSH
36974: LD_VAR 0 1
36978: PPUSH
36979: CALL_OW 274
36983: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36984: LD_ADDR_VAR 0 16
36988: PUSH
36989: LD_VAR 0 1
36993: PPUSH
36994: CALL_OW 255
36998: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36999: LD_ADDR_VAR 0 17
37003: PUSH
37004: LD_VAR 0 1
37008: PPUSH
37009: CALL_OW 248
37013: ST_TO_ADDR
// if sources then
37014: LD_VAR 0 5
37018: IFFALSE 37065
// for i = 1 to 3 do
37020: LD_ADDR_VAR 0 8
37024: PUSH
37025: DOUBLE
37026: LD_INT 1
37028: DEC
37029: ST_TO_ADDR
37030: LD_INT 3
37032: PUSH
37033: FOR_TO
37034: IFFALSE 37063
// AddResourceType ( base , i , sources [ i ] ) ;
37036: LD_VAR 0 15
37040: PPUSH
37041: LD_VAR 0 8
37045: PPUSH
37046: LD_VAR 0 5
37050: PUSH
37051: LD_VAR 0 8
37055: ARRAY
37056: PPUSH
37057: CALL_OW 276
37061: GO 37033
37063: POP
37064: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37065: LD_ADDR_VAR 0 18
37069: PUSH
37070: LD_VAR 0 15
37074: PPUSH
37075: LD_VAR 0 2
37079: PPUSH
37080: LD_INT 1
37082: PPUSH
37083: CALL 36326 0 3
37087: ST_TO_ADDR
// InitHc ;
37088: CALL_OW 19
// InitUc ;
37092: CALL_OW 18
// uc_side := side ;
37096: LD_ADDR_OWVAR 20
37100: PUSH
37101: LD_VAR 0 16
37105: ST_TO_ADDR
// uc_nation := nation ;
37106: LD_ADDR_OWVAR 21
37110: PUSH
37111: LD_VAR 0 17
37115: ST_TO_ADDR
// if buildings then
37116: LD_VAR 0 18
37120: IFFALSE 38442
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37122: LD_ADDR_VAR 0 19
37126: PUSH
37127: LD_VAR 0 18
37131: PPUSH
37132: LD_INT 2
37134: PUSH
37135: LD_INT 30
37137: PUSH
37138: LD_INT 29
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 30
37147: PUSH
37148: LD_INT 30
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: PPUSH
37160: CALL_OW 72
37164: ST_TO_ADDR
// if tmp then
37165: LD_VAR 0 19
37169: IFFALSE 37217
// for i in tmp do
37171: LD_ADDR_VAR 0 8
37175: PUSH
37176: LD_VAR 0 19
37180: PUSH
37181: FOR_IN
37182: IFFALSE 37215
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37184: LD_VAR 0 8
37188: PPUSH
37189: CALL_OW 250
37193: PPUSH
37194: LD_VAR 0 8
37198: PPUSH
37199: CALL_OW 251
37203: PPUSH
37204: LD_VAR 0 16
37208: PPUSH
37209: CALL_OW 441
37213: GO 37181
37215: POP
37216: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37217: LD_VAR 0 18
37221: PPUSH
37222: LD_INT 2
37224: PUSH
37225: LD_INT 30
37227: PUSH
37228: LD_INT 32
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 30
37237: PUSH
37238: LD_INT 33
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: LIST
37249: PPUSH
37250: CALL_OW 72
37254: IFFALSE 37342
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37256: LD_ADDR_VAR 0 8
37260: PUSH
37261: LD_VAR 0 18
37265: PPUSH
37266: LD_INT 2
37268: PUSH
37269: LD_INT 30
37271: PUSH
37272: LD_INT 32
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 30
37281: PUSH
37282: LD_INT 33
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: LIST
37293: PPUSH
37294: CALL_OW 72
37298: PUSH
37299: FOR_IN
37300: IFFALSE 37340
// begin if not GetBWeapon ( i ) then
37302: LD_VAR 0 8
37306: PPUSH
37307: CALL_OW 269
37311: NOT
37312: IFFALSE 37338
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37314: LD_VAR 0 8
37318: PPUSH
37319: LD_VAR 0 8
37323: PPUSH
37324: LD_VAR 0 2
37328: PPUSH
37329: CALL 38588 0 2
37333: PPUSH
37334: CALL_OW 431
// end ;
37338: GO 37299
37340: POP
37341: POP
// end ; for i = 1 to personel do
37342: LD_ADDR_VAR 0 8
37346: PUSH
37347: DOUBLE
37348: LD_INT 1
37350: DEC
37351: ST_TO_ADDR
37352: LD_VAR 0 6
37356: PUSH
37357: FOR_TO
37358: IFFALSE 38422
// begin if i > 4 then
37360: LD_VAR 0 8
37364: PUSH
37365: LD_INT 4
37367: GREATER
37368: IFFALSE 37372
// break ;
37370: GO 38422
// case i of 1 :
37372: LD_VAR 0 8
37376: PUSH
37377: LD_INT 1
37379: DOUBLE
37380: EQUAL
37381: IFTRUE 37385
37383: GO 37465
37385: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37386: LD_ADDR_VAR 0 12
37390: PUSH
37391: LD_VAR 0 18
37395: PPUSH
37396: LD_INT 22
37398: PUSH
37399: LD_VAR 0 16
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 58
37410: PUSH
37411: EMPTY
37412: LIST
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: LD_INT 30
37419: PUSH
37420: LD_INT 32
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 30
37429: PUSH
37430: LD_INT 4
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 30
37439: PUSH
37440: LD_INT 5
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: PPUSH
37458: CALL_OW 72
37462: ST_TO_ADDR
37463: GO 37687
37465: LD_INT 2
37467: DOUBLE
37468: EQUAL
37469: IFTRUE 37473
37471: GO 37535
37473: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37474: LD_ADDR_VAR 0 12
37478: PUSH
37479: LD_VAR 0 18
37483: PPUSH
37484: LD_INT 22
37486: PUSH
37487: LD_VAR 0 16
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: LD_INT 30
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 30
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: LIST
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PPUSH
37528: CALL_OW 72
37532: ST_TO_ADDR
37533: GO 37687
37535: LD_INT 3
37537: DOUBLE
37538: EQUAL
37539: IFTRUE 37543
37541: GO 37605
37543: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37544: LD_ADDR_VAR 0 12
37548: PUSH
37549: LD_VAR 0 18
37553: PPUSH
37554: LD_INT 22
37556: PUSH
37557: LD_VAR 0 16
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 2
37568: PUSH
37569: LD_INT 30
37571: PUSH
37572: LD_INT 2
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 30
37581: PUSH
37582: LD_INT 3
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: LIST
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PPUSH
37598: CALL_OW 72
37602: ST_TO_ADDR
37603: GO 37687
37605: LD_INT 4
37607: DOUBLE
37608: EQUAL
37609: IFTRUE 37613
37611: GO 37686
37613: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37614: LD_ADDR_VAR 0 12
37618: PUSH
37619: LD_VAR 0 18
37623: PPUSH
37624: LD_INT 22
37626: PUSH
37627: LD_VAR 0 16
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 2
37638: PUSH
37639: LD_INT 30
37641: PUSH
37642: LD_INT 6
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 30
37651: PUSH
37652: LD_INT 7
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 30
37661: PUSH
37662: LD_INT 8
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PPUSH
37679: CALL_OW 72
37683: ST_TO_ADDR
37684: GO 37687
37686: POP
// if i = 1 then
37687: LD_VAR 0 8
37691: PUSH
37692: LD_INT 1
37694: EQUAL
37695: IFFALSE 37806
// begin tmp := [ ] ;
37697: LD_ADDR_VAR 0 19
37701: PUSH
37702: EMPTY
37703: ST_TO_ADDR
// for j in f do
37704: LD_ADDR_VAR 0 9
37708: PUSH
37709: LD_VAR 0 12
37713: PUSH
37714: FOR_IN
37715: IFFALSE 37788
// if GetBType ( j ) = b_bunker then
37717: LD_VAR 0 9
37721: PPUSH
37722: CALL_OW 266
37726: PUSH
37727: LD_INT 32
37729: EQUAL
37730: IFFALSE 37757
// tmp := Insert ( tmp , 1 , j ) else
37732: LD_ADDR_VAR 0 19
37736: PUSH
37737: LD_VAR 0 19
37741: PPUSH
37742: LD_INT 1
37744: PPUSH
37745: LD_VAR 0 9
37749: PPUSH
37750: CALL_OW 2
37754: ST_TO_ADDR
37755: GO 37786
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37757: LD_ADDR_VAR 0 19
37761: PUSH
37762: LD_VAR 0 19
37766: PPUSH
37767: LD_VAR 0 19
37771: PUSH
37772: LD_INT 1
37774: PLUS
37775: PPUSH
37776: LD_VAR 0 9
37780: PPUSH
37781: CALL_OW 2
37785: ST_TO_ADDR
37786: GO 37714
37788: POP
37789: POP
// if tmp then
37790: LD_VAR 0 19
37794: IFFALSE 37806
// f := tmp ;
37796: LD_ADDR_VAR 0 12
37800: PUSH
37801: LD_VAR 0 19
37805: ST_TO_ADDR
// end ; x := personel [ i ] ;
37806: LD_ADDR_VAR 0 13
37810: PUSH
37811: LD_VAR 0 6
37815: PUSH
37816: LD_VAR 0 8
37820: ARRAY
37821: ST_TO_ADDR
// if x = - 1 then
37822: LD_VAR 0 13
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: EQUAL
37831: IFFALSE 38040
// begin for j in f do
37833: LD_ADDR_VAR 0 9
37837: PUSH
37838: LD_VAR 0 12
37842: PUSH
37843: FOR_IN
37844: IFFALSE 38036
// repeat InitHc ;
37846: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37850: LD_VAR 0 9
37854: PPUSH
37855: CALL_OW 266
37859: PUSH
37860: LD_INT 5
37862: EQUAL
37863: IFFALSE 37933
// begin if UnitsInside ( j ) < 3 then
37865: LD_VAR 0 9
37869: PPUSH
37870: CALL_OW 313
37874: PUSH
37875: LD_INT 3
37877: LESS
37878: IFFALSE 37914
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37880: LD_INT 0
37882: PPUSH
37883: LD_INT 5
37885: PUSH
37886: LD_INT 8
37888: PUSH
37889: LD_INT 9
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: LIST
37896: PUSH
37897: LD_VAR 0 17
37901: ARRAY
37902: PPUSH
37903: LD_VAR 0 4
37907: PPUSH
37908: CALL_OW 380
37912: GO 37931
// PrepareHuman ( false , i , skill ) ;
37914: LD_INT 0
37916: PPUSH
37917: LD_VAR 0 8
37921: PPUSH
37922: LD_VAR 0 4
37926: PPUSH
37927: CALL_OW 380
// end else
37931: GO 37950
// PrepareHuman ( false , i , skill ) ;
37933: LD_INT 0
37935: PPUSH
37936: LD_VAR 0 8
37940: PPUSH
37941: LD_VAR 0 4
37945: PPUSH
37946: CALL_OW 380
// un := CreateHuman ;
37950: LD_ADDR_VAR 0 14
37954: PUSH
37955: CALL_OW 44
37959: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37960: LD_ADDR_VAR 0 7
37964: PUSH
37965: LD_VAR 0 7
37969: PPUSH
37970: LD_INT 1
37972: PPUSH
37973: LD_VAR 0 14
37977: PPUSH
37978: CALL_OW 2
37982: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37983: LD_VAR 0 14
37987: PPUSH
37988: LD_VAR 0 9
37992: PPUSH
37993: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37997: LD_VAR 0 9
38001: PPUSH
38002: CALL_OW 313
38006: PUSH
38007: LD_INT 6
38009: EQUAL
38010: PUSH
38011: LD_VAR 0 9
38015: PPUSH
38016: CALL_OW 266
38020: PUSH
38021: LD_INT 32
38023: PUSH
38024: LD_INT 31
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: IN
38031: OR
38032: IFFALSE 37846
38034: GO 37843
38036: POP
38037: POP
// end else
38038: GO 38420
// for j = 1 to x do
38040: LD_ADDR_VAR 0 9
38044: PUSH
38045: DOUBLE
38046: LD_INT 1
38048: DEC
38049: ST_TO_ADDR
38050: LD_VAR 0 13
38054: PUSH
38055: FOR_TO
38056: IFFALSE 38418
// begin InitHc ;
38058: CALL_OW 19
// if not f then
38062: LD_VAR 0 12
38066: NOT
38067: IFFALSE 38156
// begin PrepareHuman ( false , i , skill ) ;
38069: LD_INT 0
38071: PPUSH
38072: LD_VAR 0 8
38076: PPUSH
38077: LD_VAR 0 4
38081: PPUSH
38082: CALL_OW 380
// un := CreateHuman ;
38086: LD_ADDR_VAR 0 14
38090: PUSH
38091: CALL_OW 44
38095: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38096: LD_ADDR_VAR 0 7
38100: PUSH
38101: LD_VAR 0 7
38105: PPUSH
38106: LD_INT 1
38108: PPUSH
38109: LD_VAR 0 14
38113: PPUSH
38114: CALL_OW 2
38118: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38119: LD_VAR 0 14
38123: PPUSH
38124: LD_VAR 0 1
38128: PPUSH
38129: CALL_OW 250
38133: PPUSH
38134: LD_VAR 0 1
38138: PPUSH
38139: CALL_OW 251
38143: PPUSH
38144: LD_INT 10
38146: PPUSH
38147: LD_INT 0
38149: PPUSH
38150: CALL_OW 50
// continue ;
38154: GO 38055
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38156: LD_VAR 0 12
38160: PUSH
38161: LD_INT 1
38163: ARRAY
38164: PPUSH
38165: CALL_OW 313
38169: PUSH
38170: LD_VAR 0 12
38174: PUSH
38175: LD_INT 1
38177: ARRAY
38178: PPUSH
38179: CALL_OW 266
38183: PUSH
38184: LD_INT 32
38186: PUSH
38187: LD_INT 31
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: IN
38194: AND
38195: PUSH
38196: LD_VAR 0 12
38200: PUSH
38201: LD_INT 1
38203: ARRAY
38204: PPUSH
38205: CALL_OW 313
38209: PUSH
38210: LD_INT 6
38212: EQUAL
38213: OR
38214: IFFALSE 38234
// f := Delete ( f , 1 ) ;
38216: LD_ADDR_VAR 0 12
38220: PUSH
38221: LD_VAR 0 12
38225: PPUSH
38226: LD_INT 1
38228: PPUSH
38229: CALL_OW 3
38233: ST_TO_ADDR
// if not f then
38234: LD_VAR 0 12
38238: NOT
38239: IFFALSE 38257
// begin x := x + 2 ;
38241: LD_ADDR_VAR 0 13
38245: PUSH
38246: LD_VAR 0 13
38250: PUSH
38251: LD_INT 2
38253: PLUS
38254: ST_TO_ADDR
// continue ;
38255: GO 38055
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38257: LD_VAR 0 12
38261: PUSH
38262: LD_INT 1
38264: ARRAY
38265: PPUSH
38266: CALL_OW 266
38270: PUSH
38271: LD_INT 5
38273: EQUAL
38274: IFFALSE 38348
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38276: LD_VAR 0 12
38280: PUSH
38281: LD_INT 1
38283: ARRAY
38284: PPUSH
38285: CALL_OW 313
38289: PUSH
38290: LD_INT 3
38292: LESS
38293: IFFALSE 38329
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38295: LD_INT 0
38297: PPUSH
38298: LD_INT 5
38300: PUSH
38301: LD_INT 8
38303: PUSH
38304: LD_INT 9
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: LIST
38311: PUSH
38312: LD_VAR 0 17
38316: ARRAY
38317: PPUSH
38318: LD_VAR 0 4
38322: PPUSH
38323: CALL_OW 380
38327: GO 38346
// PrepareHuman ( false , i , skill ) ;
38329: LD_INT 0
38331: PPUSH
38332: LD_VAR 0 8
38336: PPUSH
38337: LD_VAR 0 4
38341: PPUSH
38342: CALL_OW 380
// end else
38346: GO 38365
// PrepareHuman ( false , i , skill ) ;
38348: LD_INT 0
38350: PPUSH
38351: LD_VAR 0 8
38355: PPUSH
38356: LD_VAR 0 4
38360: PPUSH
38361: CALL_OW 380
// un := CreateHuman ;
38365: LD_ADDR_VAR 0 14
38369: PUSH
38370: CALL_OW 44
38374: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38375: LD_ADDR_VAR 0 7
38379: PUSH
38380: LD_VAR 0 7
38384: PPUSH
38385: LD_INT 1
38387: PPUSH
38388: LD_VAR 0 14
38392: PPUSH
38393: CALL_OW 2
38397: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38398: LD_VAR 0 14
38402: PPUSH
38403: LD_VAR 0 12
38407: PUSH
38408: LD_INT 1
38410: ARRAY
38411: PPUSH
38412: CALL_OW 52
// end ;
38416: GO 38055
38418: POP
38419: POP
// end ;
38420: GO 37357
38422: POP
38423: POP
// result := result ^ buildings ;
38424: LD_ADDR_VAR 0 7
38428: PUSH
38429: LD_VAR 0 7
38433: PUSH
38434: LD_VAR 0 18
38438: ADD
38439: ST_TO_ADDR
// end else
38440: GO 38583
// begin for i = 1 to personel do
38442: LD_ADDR_VAR 0 8
38446: PUSH
38447: DOUBLE
38448: LD_INT 1
38450: DEC
38451: ST_TO_ADDR
38452: LD_VAR 0 6
38456: PUSH
38457: FOR_TO
38458: IFFALSE 38581
// begin if i > 4 then
38460: LD_VAR 0 8
38464: PUSH
38465: LD_INT 4
38467: GREATER
38468: IFFALSE 38472
// break ;
38470: GO 38581
// x := personel [ i ] ;
38472: LD_ADDR_VAR 0 13
38476: PUSH
38477: LD_VAR 0 6
38481: PUSH
38482: LD_VAR 0 8
38486: ARRAY
38487: ST_TO_ADDR
// if x = - 1 then
38488: LD_VAR 0 13
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: EQUAL
38497: IFFALSE 38501
// continue ;
38499: GO 38457
// PrepareHuman ( false , i , skill ) ;
38501: LD_INT 0
38503: PPUSH
38504: LD_VAR 0 8
38508: PPUSH
38509: LD_VAR 0 4
38513: PPUSH
38514: CALL_OW 380
// un := CreateHuman ;
38518: LD_ADDR_VAR 0 14
38522: PUSH
38523: CALL_OW 44
38527: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38528: LD_VAR 0 14
38532: PPUSH
38533: LD_VAR 0 1
38537: PPUSH
38538: CALL_OW 250
38542: PPUSH
38543: LD_VAR 0 1
38547: PPUSH
38548: CALL_OW 251
38552: PPUSH
38553: LD_INT 10
38555: PPUSH
38556: LD_INT 0
38558: PPUSH
38559: CALL_OW 50
// result := result ^ un ;
38563: LD_ADDR_VAR 0 7
38567: PUSH
38568: LD_VAR 0 7
38572: PUSH
38573: LD_VAR 0 14
38577: ADD
38578: ST_TO_ADDR
// end ;
38579: GO 38457
38581: POP
38582: POP
// end ; end ;
38583: LD_VAR 0 7
38587: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38588: LD_INT 0
38590: PPUSH
38591: PPUSH
38592: PPUSH
38593: PPUSH
38594: PPUSH
38595: PPUSH
38596: PPUSH
38597: PPUSH
38598: PPUSH
38599: PPUSH
38600: PPUSH
38601: PPUSH
38602: PPUSH
38603: PPUSH
38604: PPUSH
38605: PPUSH
// result := false ;
38606: LD_ADDR_VAR 0 3
38610: PUSH
38611: LD_INT 0
38613: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38614: LD_VAR 0 1
38618: NOT
38619: PUSH
38620: LD_VAR 0 1
38624: PPUSH
38625: CALL_OW 266
38629: PUSH
38630: LD_INT 32
38632: PUSH
38633: LD_INT 33
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: IN
38640: NOT
38641: OR
38642: IFFALSE 38646
// exit ;
38644: GO 39755
// nat := GetNation ( tower ) ;
38646: LD_ADDR_VAR 0 12
38650: PUSH
38651: LD_VAR 0 1
38655: PPUSH
38656: CALL_OW 248
38660: ST_TO_ADDR
// side := GetSide ( tower ) ;
38661: LD_ADDR_VAR 0 16
38665: PUSH
38666: LD_VAR 0 1
38670: PPUSH
38671: CALL_OW 255
38675: ST_TO_ADDR
// x := GetX ( tower ) ;
38676: LD_ADDR_VAR 0 10
38680: PUSH
38681: LD_VAR 0 1
38685: PPUSH
38686: CALL_OW 250
38690: ST_TO_ADDR
// y := GetY ( tower ) ;
38691: LD_ADDR_VAR 0 11
38695: PUSH
38696: LD_VAR 0 1
38700: PPUSH
38701: CALL_OW 251
38705: ST_TO_ADDR
// if not x or not y then
38706: LD_VAR 0 10
38710: NOT
38711: PUSH
38712: LD_VAR 0 11
38716: NOT
38717: OR
38718: IFFALSE 38722
// exit ;
38720: GO 39755
// weapon := 0 ;
38722: LD_ADDR_VAR 0 18
38726: PUSH
38727: LD_INT 0
38729: ST_TO_ADDR
// fac_list := [ ] ;
38730: LD_ADDR_VAR 0 17
38734: PUSH
38735: EMPTY
38736: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38737: LD_ADDR_VAR 0 6
38741: PUSH
38742: LD_VAR 0 1
38746: PPUSH
38747: CALL_OW 274
38751: PPUSH
38752: LD_VAR 0 2
38756: PPUSH
38757: LD_INT 0
38759: PPUSH
38760: CALL 36326 0 3
38764: PPUSH
38765: LD_INT 30
38767: PUSH
38768: LD_INT 3
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PPUSH
38775: CALL_OW 72
38779: ST_TO_ADDR
// if not factories then
38780: LD_VAR 0 6
38784: NOT
38785: IFFALSE 38789
// exit ;
38787: GO 39755
// for i in factories do
38789: LD_ADDR_VAR 0 8
38793: PUSH
38794: LD_VAR 0 6
38798: PUSH
38799: FOR_IN
38800: IFFALSE 38825
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38802: LD_ADDR_VAR 0 17
38806: PUSH
38807: LD_VAR 0 17
38811: PUSH
38812: LD_VAR 0 8
38816: PPUSH
38817: CALL_OW 478
38821: UNION
38822: ST_TO_ADDR
38823: GO 38799
38825: POP
38826: POP
// if not fac_list then
38827: LD_VAR 0 17
38831: NOT
38832: IFFALSE 38836
// exit ;
38834: GO 39755
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38836: LD_ADDR_VAR 0 5
38840: PUSH
38841: LD_INT 4
38843: PUSH
38844: LD_INT 5
38846: PUSH
38847: LD_INT 9
38849: PUSH
38850: LD_INT 10
38852: PUSH
38853: LD_INT 6
38855: PUSH
38856: LD_INT 7
38858: PUSH
38859: LD_INT 11
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 27
38873: PUSH
38874: LD_INT 28
38876: PUSH
38877: LD_INT 26
38879: PUSH
38880: LD_INT 30
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 43
38891: PUSH
38892: LD_INT 44
38894: PUSH
38895: LD_INT 46
38897: PUSH
38898: LD_INT 45
38900: PUSH
38901: LD_INT 47
38903: PUSH
38904: LD_INT 49
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: LIST
38919: PUSH
38920: LD_VAR 0 12
38924: ARRAY
38925: ST_TO_ADDR
// list := list isect fac_list ;
38926: LD_ADDR_VAR 0 5
38930: PUSH
38931: LD_VAR 0 5
38935: PUSH
38936: LD_VAR 0 17
38940: ISECT
38941: ST_TO_ADDR
// if not list then
38942: LD_VAR 0 5
38946: NOT
38947: IFFALSE 38951
// exit ;
38949: GO 39755
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38951: LD_VAR 0 12
38955: PUSH
38956: LD_INT 3
38958: EQUAL
38959: PUSH
38960: LD_INT 49
38962: PUSH
38963: LD_VAR 0 5
38967: IN
38968: AND
38969: PUSH
38970: LD_INT 31
38972: PPUSH
38973: LD_VAR 0 16
38977: PPUSH
38978: CALL_OW 321
38982: PUSH
38983: LD_INT 2
38985: EQUAL
38986: AND
38987: IFFALSE 39047
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38989: LD_INT 22
38991: PUSH
38992: LD_VAR 0 16
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 35
39003: PUSH
39004: LD_INT 49
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 91
39013: PUSH
39014: LD_VAR 0 1
39018: PUSH
39019: LD_INT 10
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: LIST
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: LIST
39031: PPUSH
39032: CALL_OW 69
39036: NOT
39037: IFFALSE 39047
// weapon := ru_time_lapser ;
39039: LD_ADDR_VAR 0 18
39043: PUSH
39044: LD_INT 49
39046: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39047: LD_VAR 0 12
39051: PUSH
39052: LD_INT 1
39054: PUSH
39055: LD_INT 2
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: IN
39062: PUSH
39063: LD_INT 11
39065: PUSH
39066: LD_VAR 0 5
39070: IN
39071: PUSH
39072: LD_INT 30
39074: PUSH
39075: LD_VAR 0 5
39079: IN
39080: OR
39081: AND
39082: PUSH
39083: LD_INT 6
39085: PPUSH
39086: LD_VAR 0 16
39090: PPUSH
39091: CALL_OW 321
39095: PUSH
39096: LD_INT 2
39098: EQUAL
39099: AND
39100: IFFALSE 39265
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39102: LD_INT 22
39104: PUSH
39105: LD_VAR 0 16
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 2
39116: PUSH
39117: LD_INT 35
39119: PUSH
39120: LD_INT 11
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 35
39129: PUSH
39130: LD_INT 30
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 91
39144: PUSH
39145: LD_VAR 0 1
39149: PUSH
39150: LD_INT 18
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: LIST
39162: PPUSH
39163: CALL_OW 69
39167: NOT
39168: PUSH
39169: LD_INT 22
39171: PUSH
39172: LD_VAR 0 16
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: LD_INT 30
39186: PUSH
39187: LD_INT 32
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 30
39196: PUSH
39197: LD_INT 33
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 91
39211: PUSH
39212: LD_VAR 0 1
39216: PUSH
39217: LD_INT 12
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: PUSH
39230: EMPTY
39231: LIST
39232: PPUSH
39233: CALL_OW 69
39237: PUSH
39238: LD_INT 2
39240: GREATER
39241: AND
39242: IFFALSE 39265
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39244: LD_ADDR_VAR 0 18
39248: PUSH
39249: LD_INT 11
39251: PUSH
39252: LD_INT 30
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_VAR 0 12
39263: ARRAY
39264: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39265: LD_VAR 0 18
39269: NOT
39270: PUSH
39271: LD_INT 40
39273: PPUSH
39274: LD_VAR 0 16
39278: PPUSH
39279: CALL_OW 321
39283: PUSH
39284: LD_INT 2
39286: EQUAL
39287: AND
39288: PUSH
39289: LD_INT 7
39291: PUSH
39292: LD_VAR 0 5
39296: IN
39297: PUSH
39298: LD_INT 28
39300: PUSH
39301: LD_VAR 0 5
39305: IN
39306: OR
39307: PUSH
39308: LD_INT 45
39310: PUSH
39311: LD_VAR 0 5
39315: IN
39316: OR
39317: AND
39318: IFFALSE 39572
// begin hex := GetHexInfo ( x , y ) ;
39320: LD_ADDR_VAR 0 4
39324: PUSH
39325: LD_VAR 0 10
39329: PPUSH
39330: LD_VAR 0 11
39334: PPUSH
39335: CALL_OW 546
39339: ST_TO_ADDR
// if hex [ 1 ] then
39340: LD_VAR 0 4
39344: PUSH
39345: LD_INT 1
39347: ARRAY
39348: IFFALSE 39352
// exit ;
39350: GO 39755
// height := hex [ 2 ] ;
39352: LD_ADDR_VAR 0 15
39356: PUSH
39357: LD_VAR 0 4
39361: PUSH
39362: LD_INT 2
39364: ARRAY
39365: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39366: LD_ADDR_VAR 0 14
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: LD_INT 2
39376: PUSH
39377: LD_INT 3
39379: PUSH
39380: LD_INT 5
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: ST_TO_ADDR
// for i in tmp do
39389: LD_ADDR_VAR 0 8
39393: PUSH
39394: LD_VAR 0 14
39398: PUSH
39399: FOR_IN
39400: IFFALSE 39570
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39402: LD_ADDR_VAR 0 9
39406: PUSH
39407: LD_VAR 0 10
39411: PPUSH
39412: LD_VAR 0 8
39416: PPUSH
39417: LD_INT 5
39419: PPUSH
39420: CALL_OW 272
39424: PUSH
39425: LD_VAR 0 11
39429: PPUSH
39430: LD_VAR 0 8
39434: PPUSH
39435: LD_INT 5
39437: PPUSH
39438: CALL_OW 273
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39447: LD_VAR 0 9
39451: PUSH
39452: LD_INT 1
39454: ARRAY
39455: PPUSH
39456: LD_VAR 0 9
39460: PUSH
39461: LD_INT 2
39463: ARRAY
39464: PPUSH
39465: CALL_OW 488
39469: IFFALSE 39568
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39471: LD_ADDR_VAR 0 4
39475: PUSH
39476: LD_VAR 0 9
39480: PUSH
39481: LD_INT 1
39483: ARRAY
39484: PPUSH
39485: LD_VAR 0 9
39489: PUSH
39490: LD_INT 2
39492: ARRAY
39493: PPUSH
39494: CALL_OW 546
39498: ST_TO_ADDR
// if hex [ 1 ] then
39499: LD_VAR 0 4
39503: PUSH
39504: LD_INT 1
39506: ARRAY
39507: IFFALSE 39511
// continue ;
39509: GO 39399
// h := hex [ 2 ] ;
39511: LD_ADDR_VAR 0 13
39515: PUSH
39516: LD_VAR 0 4
39520: PUSH
39521: LD_INT 2
39523: ARRAY
39524: ST_TO_ADDR
// if h + 7 < height then
39525: LD_VAR 0 13
39529: PUSH
39530: LD_INT 7
39532: PLUS
39533: PUSH
39534: LD_VAR 0 15
39538: LESS
39539: IFFALSE 39568
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39541: LD_ADDR_VAR 0 18
39545: PUSH
39546: LD_INT 7
39548: PUSH
39549: LD_INT 28
39551: PUSH
39552: LD_INT 45
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: LIST
39559: PUSH
39560: LD_VAR 0 12
39564: ARRAY
39565: ST_TO_ADDR
// break ;
39566: GO 39570
// end ; end ; end ;
39568: GO 39399
39570: POP
39571: POP
// end ; if not weapon then
39572: LD_VAR 0 18
39576: NOT
39577: IFFALSE 39637
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39579: LD_ADDR_VAR 0 5
39583: PUSH
39584: LD_VAR 0 5
39588: PUSH
39589: LD_INT 11
39591: PUSH
39592: LD_INT 30
39594: PUSH
39595: LD_INT 49
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: LIST
39602: DIFF
39603: ST_TO_ADDR
// if not list then
39604: LD_VAR 0 5
39608: NOT
39609: IFFALSE 39613
// exit ;
39611: GO 39755
// weapon := list [ rand ( 1 , list ) ] ;
39613: LD_ADDR_VAR 0 18
39617: PUSH
39618: LD_VAR 0 5
39622: PUSH
39623: LD_INT 1
39625: PPUSH
39626: LD_VAR 0 5
39630: PPUSH
39631: CALL_OW 12
39635: ARRAY
39636: ST_TO_ADDR
// end ; if weapon then
39637: LD_VAR 0 18
39641: IFFALSE 39755
// begin tmp := CostOfWeapon ( weapon ) ;
39643: LD_ADDR_VAR 0 14
39647: PUSH
39648: LD_VAR 0 18
39652: PPUSH
39653: CALL_OW 451
39657: ST_TO_ADDR
// j := GetBase ( tower ) ;
39658: LD_ADDR_VAR 0 9
39662: PUSH
39663: LD_VAR 0 1
39667: PPUSH
39668: CALL_OW 274
39672: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39673: LD_VAR 0 9
39677: PPUSH
39678: LD_INT 1
39680: PPUSH
39681: CALL_OW 275
39685: PUSH
39686: LD_VAR 0 14
39690: PUSH
39691: LD_INT 1
39693: ARRAY
39694: GREATEREQUAL
39695: PUSH
39696: LD_VAR 0 9
39700: PPUSH
39701: LD_INT 2
39703: PPUSH
39704: CALL_OW 275
39708: PUSH
39709: LD_VAR 0 14
39713: PUSH
39714: LD_INT 2
39716: ARRAY
39717: GREATEREQUAL
39718: AND
39719: PUSH
39720: LD_VAR 0 9
39724: PPUSH
39725: LD_INT 3
39727: PPUSH
39728: CALL_OW 275
39732: PUSH
39733: LD_VAR 0 14
39737: PUSH
39738: LD_INT 3
39740: ARRAY
39741: GREATEREQUAL
39742: AND
39743: IFFALSE 39755
// result := weapon ;
39745: LD_ADDR_VAR 0 3
39749: PUSH
39750: LD_VAR 0 18
39754: ST_TO_ADDR
// end ; end ;
39755: LD_VAR 0 3
39759: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39760: LD_INT 0
39762: PPUSH
39763: PPUSH
// result := true ;
39764: LD_ADDR_VAR 0 3
39768: PUSH
39769: LD_INT 1
39771: ST_TO_ADDR
// if array1 = array2 then
39772: LD_VAR 0 1
39776: PUSH
39777: LD_VAR 0 2
39781: EQUAL
39782: IFFALSE 39842
// begin for i = 1 to array1 do
39784: LD_ADDR_VAR 0 4
39788: PUSH
39789: DOUBLE
39790: LD_INT 1
39792: DEC
39793: ST_TO_ADDR
39794: LD_VAR 0 1
39798: PUSH
39799: FOR_TO
39800: IFFALSE 39838
// if array1 [ i ] <> array2 [ i ] then
39802: LD_VAR 0 1
39806: PUSH
39807: LD_VAR 0 4
39811: ARRAY
39812: PUSH
39813: LD_VAR 0 2
39817: PUSH
39818: LD_VAR 0 4
39822: ARRAY
39823: NONEQUAL
39824: IFFALSE 39836
// begin result := false ;
39826: LD_ADDR_VAR 0 3
39830: PUSH
39831: LD_INT 0
39833: ST_TO_ADDR
// break ;
39834: GO 39838
// end ;
39836: GO 39799
39838: POP
39839: POP
// end else
39840: GO 39850
// result := false ;
39842: LD_ADDR_VAR 0 3
39846: PUSH
39847: LD_INT 0
39849: ST_TO_ADDR
// end ;
39850: LD_VAR 0 3
39854: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39855: LD_INT 0
39857: PPUSH
39858: PPUSH
// if not array1 or not array2 then
39859: LD_VAR 0 1
39863: NOT
39864: PUSH
39865: LD_VAR 0 2
39869: NOT
39870: OR
39871: IFFALSE 39875
// exit ;
39873: GO 39939
// result := true ;
39875: LD_ADDR_VAR 0 3
39879: PUSH
39880: LD_INT 1
39882: ST_TO_ADDR
// for i = 1 to array1 do
39883: LD_ADDR_VAR 0 4
39887: PUSH
39888: DOUBLE
39889: LD_INT 1
39891: DEC
39892: ST_TO_ADDR
39893: LD_VAR 0 1
39897: PUSH
39898: FOR_TO
39899: IFFALSE 39937
// if array1 [ i ] <> array2 [ i ] then
39901: LD_VAR 0 1
39905: PUSH
39906: LD_VAR 0 4
39910: ARRAY
39911: PUSH
39912: LD_VAR 0 2
39916: PUSH
39917: LD_VAR 0 4
39921: ARRAY
39922: NONEQUAL
39923: IFFALSE 39935
// begin result := false ;
39925: LD_ADDR_VAR 0 3
39929: PUSH
39930: LD_INT 0
39932: ST_TO_ADDR
// break ;
39933: GO 39937
// end ;
39935: GO 39898
39937: POP
39938: POP
// end ;
39939: LD_VAR 0 3
39943: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39944: LD_INT 0
39946: PPUSH
39947: PPUSH
39948: PPUSH
// pom := GetBase ( fac ) ;
39949: LD_ADDR_VAR 0 5
39953: PUSH
39954: LD_VAR 0 1
39958: PPUSH
39959: CALL_OW 274
39963: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39964: LD_ADDR_VAR 0 4
39968: PUSH
39969: LD_VAR 0 2
39973: PUSH
39974: LD_INT 1
39976: ARRAY
39977: PPUSH
39978: LD_VAR 0 2
39982: PUSH
39983: LD_INT 2
39985: ARRAY
39986: PPUSH
39987: LD_VAR 0 2
39991: PUSH
39992: LD_INT 3
39994: ARRAY
39995: PPUSH
39996: LD_VAR 0 2
40000: PUSH
40001: LD_INT 4
40003: ARRAY
40004: PPUSH
40005: CALL_OW 449
40009: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40010: LD_ADDR_VAR 0 3
40014: PUSH
40015: LD_VAR 0 5
40019: PPUSH
40020: LD_INT 1
40022: PPUSH
40023: CALL_OW 275
40027: PUSH
40028: LD_VAR 0 4
40032: PUSH
40033: LD_INT 1
40035: ARRAY
40036: GREATEREQUAL
40037: PUSH
40038: LD_VAR 0 5
40042: PPUSH
40043: LD_INT 2
40045: PPUSH
40046: CALL_OW 275
40050: PUSH
40051: LD_VAR 0 4
40055: PUSH
40056: LD_INT 2
40058: ARRAY
40059: GREATEREQUAL
40060: AND
40061: PUSH
40062: LD_VAR 0 5
40066: PPUSH
40067: LD_INT 3
40069: PPUSH
40070: CALL_OW 275
40074: PUSH
40075: LD_VAR 0 4
40079: PUSH
40080: LD_INT 3
40082: ARRAY
40083: GREATEREQUAL
40084: AND
40085: ST_TO_ADDR
// end ;
40086: LD_VAR 0 3
40090: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40091: LD_INT 0
40093: PPUSH
40094: PPUSH
40095: PPUSH
40096: PPUSH
// pom := GetBase ( building ) ;
40097: LD_ADDR_VAR 0 3
40101: PUSH
40102: LD_VAR 0 1
40106: PPUSH
40107: CALL_OW 274
40111: ST_TO_ADDR
// if not pom then
40112: LD_VAR 0 3
40116: NOT
40117: IFFALSE 40121
// exit ;
40119: GO 40291
// btype := GetBType ( building ) ;
40121: LD_ADDR_VAR 0 5
40125: PUSH
40126: LD_VAR 0 1
40130: PPUSH
40131: CALL_OW 266
40135: ST_TO_ADDR
// if btype = b_armoury then
40136: LD_VAR 0 5
40140: PUSH
40141: LD_INT 4
40143: EQUAL
40144: IFFALSE 40154
// btype := b_barracks ;
40146: LD_ADDR_VAR 0 5
40150: PUSH
40151: LD_INT 5
40153: ST_TO_ADDR
// if btype = b_depot then
40154: LD_VAR 0 5
40158: PUSH
40159: LD_INT 0
40161: EQUAL
40162: IFFALSE 40172
// btype := b_warehouse ;
40164: LD_ADDR_VAR 0 5
40168: PUSH
40169: LD_INT 1
40171: ST_TO_ADDR
// if btype = b_workshop then
40172: LD_VAR 0 5
40176: PUSH
40177: LD_INT 2
40179: EQUAL
40180: IFFALSE 40190
// btype := b_factory ;
40182: LD_ADDR_VAR 0 5
40186: PUSH
40187: LD_INT 3
40189: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40190: LD_ADDR_VAR 0 4
40194: PUSH
40195: LD_VAR 0 5
40199: PPUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: CALL_OW 248
40209: PPUSH
40210: CALL_OW 450
40214: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40215: LD_ADDR_VAR 0 2
40219: PUSH
40220: LD_VAR 0 3
40224: PPUSH
40225: LD_INT 1
40227: PPUSH
40228: CALL_OW 275
40232: PUSH
40233: LD_VAR 0 4
40237: PUSH
40238: LD_INT 1
40240: ARRAY
40241: GREATEREQUAL
40242: PUSH
40243: LD_VAR 0 3
40247: PPUSH
40248: LD_INT 2
40250: PPUSH
40251: CALL_OW 275
40255: PUSH
40256: LD_VAR 0 4
40260: PUSH
40261: LD_INT 2
40263: ARRAY
40264: GREATEREQUAL
40265: AND
40266: PUSH
40267: LD_VAR 0 3
40271: PPUSH
40272: LD_INT 3
40274: PPUSH
40275: CALL_OW 275
40279: PUSH
40280: LD_VAR 0 4
40284: PUSH
40285: LD_INT 3
40287: ARRAY
40288: GREATEREQUAL
40289: AND
40290: ST_TO_ADDR
// end ;
40291: LD_VAR 0 2
40295: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40296: LD_INT 0
40298: PPUSH
40299: PPUSH
40300: PPUSH
// pom := GetBase ( building ) ;
40301: LD_ADDR_VAR 0 4
40305: PUSH
40306: LD_VAR 0 1
40310: PPUSH
40311: CALL_OW 274
40315: ST_TO_ADDR
// if not pom then
40316: LD_VAR 0 4
40320: NOT
40321: IFFALSE 40325
// exit ;
40323: GO 40426
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40325: LD_ADDR_VAR 0 5
40329: PUSH
40330: LD_VAR 0 2
40334: PPUSH
40335: LD_VAR 0 1
40339: PPUSH
40340: CALL_OW 248
40344: PPUSH
40345: CALL_OW 450
40349: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40350: LD_ADDR_VAR 0 3
40354: PUSH
40355: LD_VAR 0 4
40359: PPUSH
40360: LD_INT 1
40362: PPUSH
40363: CALL_OW 275
40367: PUSH
40368: LD_VAR 0 5
40372: PUSH
40373: LD_INT 1
40375: ARRAY
40376: GREATEREQUAL
40377: PUSH
40378: LD_VAR 0 4
40382: PPUSH
40383: LD_INT 2
40385: PPUSH
40386: CALL_OW 275
40390: PUSH
40391: LD_VAR 0 5
40395: PUSH
40396: LD_INT 2
40398: ARRAY
40399: GREATEREQUAL
40400: AND
40401: PUSH
40402: LD_VAR 0 4
40406: PPUSH
40407: LD_INT 3
40409: PPUSH
40410: CALL_OW 275
40414: PUSH
40415: LD_VAR 0 5
40419: PUSH
40420: LD_INT 3
40422: ARRAY
40423: GREATEREQUAL
40424: AND
40425: ST_TO_ADDR
// end ;
40426: LD_VAR 0 3
40430: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40431: LD_INT 0
40433: PPUSH
40434: PPUSH
40435: PPUSH
40436: PPUSH
40437: PPUSH
40438: PPUSH
40439: PPUSH
40440: PPUSH
40441: PPUSH
40442: PPUSH
40443: PPUSH
// result := false ;
40444: LD_ADDR_VAR 0 8
40448: PUSH
40449: LD_INT 0
40451: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40452: LD_VAR 0 5
40456: NOT
40457: PUSH
40458: LD_VAR 0 1
40462: NOT
40463: OR
40464: PUSH
40465: LD_VAR 0 2
40469: NOT
40470: OR
40471: PUSH
40472: LD_VAR 0 3
40476: NOT
40477: OR
40478: IFFALSE 40482
// exit ;
40480: GO 41296
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40482: LD_ADDR_VAR 0 14
40486: PUSH
40487: LD_VAR 0 1
40491: PPUSH
40492: LD_VAR 0 2
40496: PPUSH
40497: LD_VAR 0 3
40501: PPUSH
40502: LD_VAR 0 4
40506: PPUSH
40507: LD_VAR 0 5
40511: PUSH
40512: LD_INT 1
40514: ARRAY
40515: PPUSH
40516: CALL_OW 248
40520: PPUSH
40521: LD_INT 0
40523: PPUSH
40524: CALL 42533 0 6
40528: ST_TO_ADDR
// if not hexes then
40529: LD_VAR 0 14
40533: NOT
40534: IFFALSE 40538
// exit ;
40536: GO 41296
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40538: LD_ADDR_VAR 0 17
40542: PUSH
40543: LD_VAR 0 5
40547: PPUSH
40548: LD_INT 22
40550: PUSH
40551: LD_VAR 0 13
40555: PPUSH
40556: CALL_OW 255
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: LD_INT 30
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 30
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PPUSH
40597: CALL_OW 72
40601: ST_TO_ADDR
// for i = 1 to hexes do
40602: LD_ADDR_VAR 0 9
40606: PUSH
40607: DOUBLE
40608: LD_INT 1
40610: DEC
40611: ST_TO_ADDR
40612: LD_VAR 0 14
40616: PUSH
40617: FOR_TO
40618: IFFALSE 41294
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40620: LD_ADDR_VAR 0 13
40624: PUSH
40625: LD_VAR 0 14
40629: PUSH
40630: LD_VAR 0 9
40634: ARRAY
40635: PUSH
40636: LD_INT 1
40638: ARRAY
40639: PPUSH
40640: LD_VAR 0 14
40644: PUSH
40645: LD_VAR 0 9
40649: ARRAY
40650: PUSH
40651: LD_INT 2
40653: ARRAY
40654: PPUSH
40655: CALL_OW 428
40659: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40660: LD_VAR 0 14
40664: PUSH
40665: LD_VAR 0 9
40669: ARRAY
40670: PUSH
40671: LD_INT 1
40673: ARRAY
40674: PPUSH
40675: LD_VAR 0 14
40679: PUSH
40680: LD_VAR 0 9
40684: ARRAY
40685: PUSH
40686: LD_INT 2
40688: ARRAY
40689: PPUSH
40690: CALL_OW 351
40694: PUSH
40695: LD_VAR 0 14
40699: PUSH
40700: LD_VAR 0 9
40704: ARRAY
40705: PUSH
40706: LD_INT 1
40708: ARRAY
40709: PPUSH
40710: LD_VAR 0 14
40714: PUSH
40715: LD_VAR 0 9
40719: ARRAY
40720: PUSH
40721: LD_INT 2
40723: ARRAY
40724: PPUSH
40725: CALL_OW 488
40729: NOT
40730: OR
40731: PUSH
40732: LD_VAR 0 13
40736: PPUSH
40737: CALL_OW 247
40741: PUSH
40742: LD_INT 3
40744: EQUAL
40745: OR
40746: IFFALSE 40752
// exit ;
40748: POP
40749: POP
40750: GO 41296
// if not tmp then
40752: LD_VAR 0 13
40756: NOT
40757: IFFALSE 40761
// continue ;
40759: GO 40617
// result := true ;
40761: LD_ADDR_VAR 0 8
40765: PUSH
40766: LD_INT 1
40768: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40769: LD_VAR 0 6
40773: PUSH
40774: LD_VAR 0 13
40778: PPUSH
40779: CALL_OW 247
40783: PUSH
40784: LD_INT 2
40786: EQUAL
40787: AND
40788: PUSH
40789: LD_VAR 0 13
40793: PPUSH
40794: CALL_OW 263
40798: PUSH
40799: LD_INT 1
40801: EQUAL
40802: AND
40803: IFFALSE 40967
// begin if IsDrivenBy ( tmp ) then
40805: LD_VAR 0 13
40809: PPUSH
40810: CALL_OW 311
40814: IFFALSE 40818
// continue ;
40816: GO 40617
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40818: LD_VAR 0 6
40822: PPUSH
40823: LD_INT 3
40825: PUSH
40826: LD_INT 60
40828: PUSH
40829: EMPTY
40830: LIST
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 3
40838: PUSH
40839: LD_INT 55
40841: PUSH
40842: EMPTY
40843: LIST
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PPUSH
40853: CALL_OW 72
40857: IFFALSE 40965
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40859: LD_ADDR_VAR 0 18
40863: PUSH
40864: LD_VAR 0 6
40868: PPUSH
40869: LD_INT 3
40871: PUSH
40872: LD_INT 60
40874: PUSH
40875: EMPTY
40876: LIST
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 3
40884: PUSH
40885: LD_INT 55
40887: PUSH
40888: EMPTY
40889: LIST
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PPUSH
40899: CALL_OW 72
40903: PUSH
40904: LD_INT 1
40906: ARRAY
40907: ST_TO_ADDR
// if IsInUnit ( driver ) then
40908: LD_VAR 0 18
40912: PPUSH
40913: CALL_OW 310
40917: IFFALSE 40928
// ComExit ( driver ) ;
40919: LD_VAR 0 18
40923: PPUSH
40924: CALL 65717 0 1
// AddComEnterUnit ( driver , tmp ) ;
40928: LD_VAR 0 18
40932: PPUSH
40933: LD_VAR 0 13
40937: PPUSH
40938: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40942: LD_VAR 0 18
40946: PPUSH
40947: LD_VAR 0 7
40951: PPUSH
40952: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40956: LD_VAR 0 18
40960: PPUSH
40961: CALL_OW 181
// end ; continue ;
40965: GO 40617
// end ; if not cleaners or not tmp in cleaners then
40967: LD_VAR 0 6
40971: NOT
40972: PUSH
40973: LD_VAR 0 13
40977: PUSH
40978: LD_VAR 0 6
40982: IN
40983: NOT
40984: OR
40985: IFFALSE 41292
// begin if dep then
40987: LD_VAR 0 17
40991: IFFALSE 41127
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40993: LD_ADDR_VAR 0 16
40997: PUSH
40998: LD_VAR 0 17
41002: PUSH
41003: LD_INT 1
41005: ARRAY
41006: PPUSH
41007: CALL_OW 250
41011: PPUSH
41012: LD_VAR 0 17
41016: PUSH
41017: LD_INT 1
41019: ARRAY
41020: PPUSH
41021: CALL_OW 254
41025: PPUSH
41026: LD_INT 5
41028: PPUSH
41029: CALL_OW 272
41033: PUSH
41034: LD_VAR 0 17
41038: PUSH
41039: LD_INT 1
41041: ARRAY
41042: PPUSH
41043: CALL_OW 251
41047: PPUSH
41048: LD_VAR 0 17
41052: PUSH
41053: LD_INT 1
41055: ARRAY
41056: PPUSH
41057: CALL_OW 254
41061: PPUSH
41062: LD_INT 5
41064: PPUSH
41065: CALL_OW 273
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41074: LD_VAR 0 16
41078: PUSH
41079: LD_INT 1
41081: ARRAY
41082: PPUSH
41083: LD_VAR 0 16
41087: PUSH
41088: LD_INT 2
41090: ARRAY
41091: PPUSH
41092: CALL_OW 488
41096: IFFALSE 41127
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41098: LD_VAR 0 13
41102: PPUSH
41103: LD_VAR 0 16
41107: PUSH
41108: LD_INT 1
41110: ARRAY
41111: PPUSH
41112: LD_VAR 0 16
41116: PUSH
41117: LD_INT 2
41119: ARRAY
41120: PPUSH
41121: CALL_OW 111
// continue ;
41125: GO 40617
// end ; end ; r := GetDir ( tmp ) ;
41127: LD_ADDR_VAR 0 15
41131: PUSH
41132: LD_VAR 0 13
41136: PPUSH
41137: CALL_OW 254
41141: ST_TO_ADDR
// if r = 5 then
41142: LD_VAR 0 15
41146: PUSH
41147: LD_INT 5
41149: EQUAL
41150: IFFALSE 41160
// r := 0 ;
41152: LD_ADDR_VAR 0 15
41156: PUSH
41157: LD_INT 0
41159: ST_TO_ADDR
// for j = r to 5 do
41160: LD_ADDR_VAR 0 10
41164: PUSH
41165: DOUBLE
41166: LD_VAR 0 15
41170: DEC
41171: ST_TO_ADDR
41172: LD_INT 5
41174: PUSH
41175: FOR_TO
41176: IFFALSE 41290
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41178: LD_ADDR_VAR 0 11
41182: PUSH
41183: LD_VAR 0 13
41187: PPUSH
41188: CALL_OW 250
41192: PPUSH
41193: LD_VAR 0 10
41197: PPUSH
41198: LD_INT 2
41200: PPUSH
41201: CALL_OW 272
41205: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41206: LD_ADDR_VAR 0 12
41210: PUSH
41211: LD_VAR 0 13
41215: PPUSH
41216: CALL_OW 251
41220: PPUSH
41221: LD_VAR 0 10
41225: PPUSH
41226: LD_INT 2
41228: PPUSH
41229: CALL_OW 273
41233: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41234: LD_VAR 0 11
41238: PPUSH
41239: LD_VAR 0 12
41243: PPUSH
41244: CALL_OW 488
41248: PUSH
41249: LD_VAR 0 11
41253: PPUSH
41254: LD_VAR 0 12
41258: PPUSH
41259: CALL_OW 428
41263: NOT
41264: AND
41265: IFFALSE 41288
// begin ComMoveXY ( tmp , _x , _y ) ;
41267: LD_VAR 0 13
41271: PPUSH
41272: LD_VAR 0 11
41276: PPUSH
41277: LD_VAR 0 12
41281: PPUSH
41282: CALL_OW 111
// break ;
41286: GO 41290
// end ; end ;
41288: GO 41175
41290: POP
41291: POP
// end ; end ;
41292: GO 40617
41294: POP
41295: POP
// end ;
41296: LD_VAR 0 8
41300: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41301: LD_INT 0
41303: PPUSH
// result := true ;
41304: LD_ADDR_VAR 0 3
41308: PUSH
41309: LD_INT 1
41311: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41312: LD_VAR 0 2
41316: PUSH
41317: LD_INT 24
41319: DOUBLE
41320: EQUAL
41321: IFTRUE 41331
41323: LD_INT 33
41325: DOUBLE
41326: EQUAL
41327: IFTRUE 41331
41329: GO 41356
41331: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41332: LD_ADDR_VAR 0 3
41336: PUSH
41337: LD_INT 32
41339: PPUSH
41340: LD_VAR 0 1
41344: PPUSH
41345: CALL_OW 321
41349: PUSH
41350: LD_INT 2
41352: EQUAL
41353: ST_TO_ADDR
41354: GO 41676
41356: LD_INT 20
41358: DOUBLE
41359: EQUAL
41360: IFTRUE 41364
41362: GO 41389
41364: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41365: LD_ADDR_VAR 0 3
41369: PUSH
41370: LD_INT 6
41372: PPUSH
41373: LD_VAR 0 1
41377: PPUSH
41378: CALL_OW 321
41382: PUSH
41383: LD_INT 2
41385: EQUAL
41386: ST_TO_ADDR
41387: GO 41676
41389: LD_INT 22
41391: DOUBLE
41392: EQUAL
41393: IFTRUE 41403
41395: LD_INT 36
41397: DOUBLE
41398: EQUAL
41399: IFTRUE 41403
41401: GO 41428
41403: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41404: LD_ADDR_VAR 0 3
41408: PUSH
41409: LD_INT 15
41411: PPUSH
41412: LD_VAR 0 1
41416: PPUSH
41417: CALL_OW 321
41421: PUSH
41422: LD_INT 2
41424: EQUAL
41425: ST_TO_ADDR
41426: GO 41676
41428: LD_INT 30
41430: DOUBLE
41431: EQUAL
41432: IFTRUE 41436
41434: GO 41461
41436: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41437: LD_ADDR_VAR 0 3
41441: PUSH
41442: LD_INT 20
41444: PPUSH
41445: LD_VAR 0 1
41449: PPUSH
41450: CALL_OW 321
41454: PUSH
41455: LD_INT 2
41457: EQUAL
41458: ST_TO_ADDR
41459: GO 41676
41461: LD_INT 28
41463: DOUBLE
41464: EQUAL
41465: IFTRUE 41475
41467: LD_INT 21
41469: DOUBLE
41470: EQUAL
41471: IFTRUE 41475
41473: GO 41500
41475: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41476: LD_ADDR_VAR 0 3
41480: PUSH
41481: LD_INT 21
41483: PPUSH
41484: LD_VAR 0 1
41488: PPUSH
41489: CALL_OW 321
41493: PUSH
41494: LD_INT 2
41496: EQUAL
41497: ST_TO_ADDR
41498: GO 41676
41500: LD_INT 16
41502: DOUBLE
41503: EQUAL
41504: IFTRUE 41508
41506: GO 41535
41508: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41509: LD_ADDR_VAR 0 3
41513: PUSH
41514: LD_EXP 37
41518: PPUSH
41519: LD_VAR 0 1
41523: PPUSH
41524: CALL_OW 321
41528: PUSH
41529: LD_INT 2
41531: EQUAL
41532: ST_TO_ADDR
41533: GO 41676
41535: LD_INT 19
41537: DOUBLE
41538: EQUAL
41539: IFTRUE 41549
41541: LD_INT 23
41543: DOUBLE
41544: EQUAL
41545: IFTRUE 41549
41547: GO 41576
41549: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41550: LD_ADDR_VAR 0 3
41554: PUSH
41555: LD_EXP 36
41559: PPUSH
41560: LD_VAR 0 1
41564: PPUSH
41565: CALL_OW 321
41569: PUSH
41570: LD_INT 2
41572: EQUAL
41573: ST_TO_ADDR
41574: GO 41676
41576: LD_INT 17
41578: DOUBLE
41579: EQUAL
41580: IFTRUE 41584
41582: GO 41609
41584: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41585: LD_ADDR_VAR 0 3
41589: PUSH
41590: LD_INT 39
41592: PPUSH
41593: LD_VAR 0 1
41597: PPUSH
41598: CALL_OW 321
41602: PUSH
41603: LD_INT 2
41605: EQUAL
41606: ST_TO_ADDR
41607: GO 41676
41609: LD_INT 18
41611: DOUBLE
41612: EQUAL
41613: IFTRUE 41617
41615: GO 41642
41617: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41618: LD_ADDR_VAR 0 3
41622: PUSH
41623: LD_INT 40
41625: PPUSH
41626: LD_VAR 0 1
41630: PPUSH
41631: CALL_OW 321
41635: PUSH
41636: LD_INT 2
41638: EQUAL
41639: ST_TO_ADDR
41640: GO 41676
41642: LD_INT 27
41644: DOUBLE
41645: EQUAL
41646: IFTRUE 41650
41648: GO 41675
41650: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41651: LD_ADDR_VAR 0 3
41655: PUSH
41656: LD_INT 35
41658: PPUSH
41659: LD_VAR 0 1
41663: PPUSH
41664: CALL_OW 321
41668: PUSH
41669: LD_INT 2
41671: EQUAL
41672: ST_TO_ADDR
41673: GO 41676
41675: POP
// end ;
41676: LD_VAR 0 3
41680: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41681: LD_INT 0
41683: PPUSH
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
// result := false ;
41694: LD_ADDR_VAR 0 6
41698: PUSH
41699: LD_INT 0
41701: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41702: LD_VAR 0 1
41706: NOT
41707: PUSH
41708: LD_VAR 0 1
41712: PPUSH
41713: CALL_OW 266
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: IN
41728: NOT
41729: OR
41730: PUSH
41731: LD_VAR 0 2
41735: NOT
41736: OR
41737: PUSH
41738: LD_VAR 0 5
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: LD_INT 2
41751: PUSH
41752: LD_INT 3
41754: PUSH
41755: LD_INT 4
41757: PUSH
41758: LD_INT 5
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: IN
41769: NOT
41770: OR
41771: PUSH
41772: LD_VAR 0 3
41776: PPUSH
41777: LD_VAR 0 4
41781: PPUSH
41782: CALL_OW 488
41786: NOT
41787: OR
41788: IFFALSE 41792
// exit ;
41790: GO 42528
// side := GetSide ( depot ) ;
41792: LD_ADDR_VAR 0 9
41796: PUSH
41797: LD_VAR 0 1
41801: PPUSH
41802: CALL_OW 255
41806: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41807: LD_VAR 0 9
41811: PPUSH
41812: LD_VAR 0 2
41816: PPUSH
41817: CALL 41301 0 2
41821: NOT
41822: IFFALSE 41826
// exit ;
41824: GO 42528
// pom := GetBase ( depot ) ;
41826: LD_ADDR_VAR 0 10
41830: PUSH
41831: LD_VAR 0 1
41835: PPUSH
41836: CALL_OW 274
41840: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41841: LD_ADDR_VAR 0 11
41845: PUSH
41846: LD_VAR 0 2
41850: PPUSH
41851: LD_VAR 0 1
41855: PPUSH
41856: CALL_OW 248
41860: PPUSH
41861: CALL_OW 450
41865: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41866: LD_VAR 0 10
41870: PPUSH
41871: LD_INT 1
41873: PPUSH
41874: CALL_OW 275
41878: PUSH
41879: LD_VAR 0 11
41883: PUSH
41884: LD_INT 1
41886: ARRAY
41887: GREATEREQUAL
41888: PUSH
41889: LD_VAR 0 10
41893: PPUSH
41894: LD_INT 2
41896: PPUSH
41897: CALL_OW 275
41901: PUSH
41902: LD_VAR 0 11
41906: PUSH
41907: LD_INT 2
41909: ARRAY
41910: GREATEREQUAL
41911: AND
41912: PUSH
41913: LD_VAR 0 10
41917: PPUSH
41918: LD_INT 3
41920: PPUSH
41921: CALL_OW 275
41925: PUSH
41926: LD_VAR 0 11
41930: PUSH
41931: LD_INT 3
41933: ARRAY
41934: GREATEREQUAL
41935: AND
41936: NOT
41937: IFFALSE 41941
// exit ;
41939: GO 42528
// if GetBType ( depot ) = b_depot then
41941: LD_VAR 0 1
41945: PPUSH
41946: CALL_OW 266
41950: PUSH
41951: LD_INT 0
41953: EQUAL
41954: IFFALSE 41966
// dist := 28 else
41956: LD_ADDR_VAR 0 14
41960: PUSH
41961: LD_INT 28
41963: ST_TO_ADDR
41964: GO 41974
// dist := 36 ;
41966: LD_ADDR_VAR 0 14
41970: PUSH
41971: LD_INT 36
41973: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41974: LD_VAR 0 1
41978: PPUSH
41979: LD_VAR 0 3
41983: PPUSH
41984: LD_VAR 0 4
41988: PPUSH
41989: CALL_OW 297
41993: PUSH
41994: LD_VAR 0 14
41998: GREATER
41999: IFFALSE 42003
// exit ;
42001: GO 42528
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42003: LD_ADDR_VAR 0 12
42007: PUSH
42008: LD_VAR 0 2
42012: PPUSH
42013: LD_VAR 0 3
42017: PPUSH
42018: LD_VAR 0 4
42022: PPUSH
42023: LD_VAR 0 5
42027: PPUSH
42028: LD_VAR 0 1
42032: PPUSH
42033: CALL_OW 248
42037: PPUSH
42038: LD_INT 0
42040: PPUSH
42041: CALL 42533 0 6
42045: ST_TO_ADDR
// if not hexes then
42046: LD_VAR 0 12
42050: NOT
42051: IFFALSE 42055
// exit ;
42053: GO 42528
// hex := GetHexInfo ( x , y ) ;
42055: LD_ADDR_VAR 0 15
42059: PUSH
42060: LD_VAR 0 3
42064: PPUSH
42065: LD_VAR 0 4
42069: PPUSH
42070: CALL_OW 546
42074: ST_TO_ADDR
// if hex [ 1 ] then
42075: LD_VAR 0 15
42079: PUSH
42080: LD_INT 1
42082: ARRAY
42083: IFFALSE 42087
// exit ;
42085: GO 42528
// height := hex [ 2 ] ;
42087: LD_ADDR_VAR 0 13
42091: PUSH
42092: LD_VAR 0 15
42096: PUSH
42097: LD_INT 2
42099: ARRAY
42100: ST_TO_ADDR
// for i = 1 to hexes do
42101: LD_ADDR_VAR 0 7
42105: PUSH
42106: DOUBLE
42107: LD_INT 1
42109: DEC
42110: ST_TO_ADDR
42111: LD_VAR 0 12
42115: PUSH
42116: FOR_TO
42117: IFFALSE 42447
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42119: LD_VAR 0 12
42123: PUSH
42124: LD_VAR 0 7
42128: ARRAY
42129: PUSH
42130: LD_INT 1
42132: ARRAY
42133: PPUSH
42134: LD_VAR 0 12
42138: PUSH
42139: LD_VAR 0 7
42143: ARRAY
42144: PUSH
42145: LD_INT 2
42147: ARRAY
42148: PPUSH
42149: CALL_OW 488
42153: NOT
42154: PUSH
42155: LD_VAR 0 12
42159: PUSH
42160: LD_VAR 0 7
42164: ARRAY
42165: PUSH
42166: LD_INT 1
42168: ARRAY
42169: PPUSH
42170: LD_VAR 0 12
42174: PUSH
42175: LD_VAR 0 7
42179: ARRAY
42180: PUSH
42181: LD_INT 2
42183: ARRAY
42184: PPUSH
42185: CALL_OW 428
42189: PUSH
42190: LD_INT 0
42192: GREATER
42193: OR
42194: PUSH
42195: LD_VAR 0 12
42199: PUSH
42200: LD_VAR 0 7
42204: ARRAY
42205: PUSH
42206: LD_INT 1
42208: ARRAY
42209: PPUSH
42210: LD_VAR 0 12
42214: PUSH
42215: LD_VAR 0 7
42219: ARRAY
42220: PUSH
42221: LD_INT 2
42223: ARRAY
42224: PPUSH
42225: CALL_OW 351
42229: OR
42230: IFFALSE 42236
// exit ;
42232: POP
42233: POP
42234: GO 42528
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42236: LD_ADDR_VAR 0 8
42240: PUSH
42241: LD_VAR 0 12
42245: PUSH
42246: LD_VAR 0 7
42250: ARRAY
42251: PUSH
42252: LD_INT 1
42254: ARRAY
42255: PPUSH
42256: LD_VAR 0 12
42260: PUSH
42261: LD_VAR 0 7
42265: ARRAY
42266: PUSH
42267: LD_INT 2
42269: ARRAY
42270: PPUSH
42271: CALL_OW 546
42275: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42276: LD_VAR 0 8
42280: PUSH
42281: LD_INT 1
42283: ARRAY
42284: PUSH
42285: LD_VAR 0 8
42289: PUSH
42290: LD_INT 2
42292: ARRAY
42293: PUSH
42294: LD_VAR 0 13
42298: PUSH
42299: LD_INT 2
42301: PLUS
42302: GREATER
42303: OR
42304: PUSH
42305: LD_VAR 0 8
42309: PUSH
42310: LD_INT 2
42312: ARRAY
42313: PUSH
42314: LD_VAR 0 13
42318: PUSH
42319: LD_INT 2
42321: MINUS
42322: LESS
42323: OR
42324: PUSH
42325: LD_VAR 0 8
42329: PUSH
42330: LD_INT 3
42332: ARRAY
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: LD_INT 8
42339: PUSH
42340: LD_INT 9
42342: PUSH
42343: LD_INT 10
42345: PUSH
42346: LD_INT 11
42348: PUSH
42349: LD_INT 12
42351: PUSH
42352: LD_INT 13
42354: PUSH
42355: LD_INT 16
42357: PUSH
42358: LD_INT 17
42360: PUSH
42361: LD_INT 18
42363: PUSH
42364: LD_INT 19
42366: PUSH
42367: LD_INT 20
42369: PUSH
42370: LD_INT 21
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: IN
42388: NOT
42389: OR
42390: PUSH
42391: LD_VAR 0 8
42395: PUSH
42396: LD_INT 5
42398: ARRAY
42399: NOT
42400: OR
42401: PUSH
42402: LD_VAR 0 8
42406: PUSH
42407: LD_INT 6
42409: ARRAY
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: LD_INT 7
42419: PUSH
42420: LD_INT 9
42422: PUSH
42423: LD_INT 10
42425: PUSH
42426: LD_INT 11
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: IN
42437: NOT
42438: OR
42439: IFFALSE 42445
// exit ;
42441: POP
42442: POP
42443: GO 42528
// end ;
42445: GO 42116
42447: POP
42448: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42449: LD_VAR 0 9
42453: PPUSH
42454: LD_VAR 0 3
42458: PPUSH
42459: LD_VAR 0 4
42463: PPUSH
42464: LD_INT 20
42466: PPUSH
42467: CALL 34474 0 4
42471: PUSH
42472: LD_INT 4
42474: ARRAY
42475: IFFALSE 42479
// exit ;
42477: GO 42528
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42479: LD_VAR 0 2
42483: PUSH
42484: LD_INT 29
42486: PUSH
42487: LD_INT 30
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: IN
42494: PUSH
42495: LD_VAR 0 3
42499: PPUSH
42500: LD_VAR 0 4
42504: PPUSH
42505: LD_VAR 0 9
42509: PPUSH
42510: CALL_OW 440
42514: NOT
42515: AND
42516: IFFALSE 42520
// exit ;
42518: GO 42528
// result := true ;
42520: LD_ADDR_VAR 0 6
42524: PUSH
42525: LD_INT 1
42527: ST_TO_ADDR
// end ;
42528: LD_VAR 0 6
42532: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42533: LD_INT 0
42535: PPUSH
42536: PPUSH
42537: PPUSH
42538: PPUSH
42539: PPUSH
42540: PPUSH
42541: PPUSH
42542: PPUSH
42543: PPUSH
42544: PPUSH
42545: PPUSH
42546: PPUSH
42547: PPUSH
42548: PPUSH
42549: PPUSH
42550: PPUSH
42551: PPUSH
42552: PPUSH
42553: PPUSH
42554: PPUSH
42555: PPUSH
42556: PPUSH
42557: PPUSH
42558: PPUSH
42559: PPUSH
42560: PPUSH
42561: PPUSH
42562: PPUSH
42563: PPUSH
42564: PPUSH
42565: PPUSH
42566: PPUSH
42567: PPUSH
42568: PPUSH
42569: PPUSH
42570: PPUSH
42571: PPUSH
42572: PPUSH
42573: PPUSH
42574: PPUSH
42575: PPUSH
42576: PPUSH
42577: PPUSH
42578: PPUSH
42579: PPUSH
42580: PPUSH
42581: PPUSH
42582: PPUSH
42583: PPUSH
42584: PPUSH
42585: PPUSH
42586: PPUSH
42587: PPUSH
42588: PPUSH
42589: PPUSH
42590: PPUSH
42591: PPUSH
42592: PPUSH
// result = [ ] ;
42593: LD_ADDR_VAR 0 7
42597: PUSH
42598: EMPTY
42599: ST_TO_ADDR
// temp_list = [ ] ;
42600: LD_ADDR_VAR 0 9
42604: PUSH
42605: EMPTY
42606: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42607: LD_VAR 0 4
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: LD_INT 3
42623: PUSH
42624: LD_INT 4
42626: PUSH
42627: LD_INT 5
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: IN
42638: NOT
42639: PUSH
42640: LD_VAR 0 1
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: IN
42655: PUSH
42656: LD_VAR 0 5
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: LD_INT 3
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: LIST
42674: IN
42675: NOT
42676: AND
42677: OR
42678: IFFALSE 42682
// exit ;
42680: GO 61073
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42682: LD_VAR 0 1
42686: PUSH
42687: LD_INT 6
42689: PUSH
42690: LD_INT 7
42692: PUSH
42693: LD_INT 8
42695: PUSH
42696: LD_INT 13
42698: PUSH
42699: LD_INT 12
42701: PUSH
42702: LD_INT 15
42704: PUSH
42705: LD_INT 11
42707: PUSH
42708: LD_INT 14
42710: PUSH
42711: LD_INT 10
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: IN
42725: IFFALSE 42735
// btype = b_lab ;
42727: LD_ADDR_VAR 0 1
42731: PUSH
42732: LD_INT 6
42734: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42735: LD_VAR 0 6
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: LIST
42753: IN
42754: NOT
42755: PUSH
42756: LD_VAR 0 1
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: LD_INT 2
42769: PUSH
42770: LD_INT 3
42772: PUSH
42773: LD_INT 6
42775: PUSH
42776: LD_INT 36
42778: PUSH
42779: LD_INT 4
42781: PUSH
42782: LD_INT 5
42784: PUSH
42785: LD_INT 31
42787: PUSH
42788: LD_INT 32
42790: PUSH
42791: LD_INT 33
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: IN
42807: NOT
42808: PUSH
42809: LD_VAR 0 6
42813: PUSH
42814: LD_INT 1
42816: EQUAL
42817: AND
42818: OR
42819: PUSH
42820: LD_VAR 0 1
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: LD_INT 3
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: IN
42835: NOT
42836: PUSH
42837: LD_VAR 0 6
42841: PUSH
42842: LD_INT 2
42844: EQUAL
42845: AND
42846: OR
42847: IFFALSE 42857
// mode = 0 ;
42849: LD_ADDR_VAR 0 6
42853: PUSH
42854: LD_INT 0
42856: ST_TO_ADDR
// case mode of 0 :
42857: LD_VAR 0 6
42861: PUSH
42862: LD_INT 0
42864: DOUBLE
42865: EQUAL
42866: IFTRUE 42870
42868: GO 54323
42870: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42871: LD_ADDR_VAR 0 11
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: LD_INT 2
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: LD_INT 3
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 3
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 2
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43064: LD_ADDR_VAR 0 12
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: NEG
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 3
43221: NEG
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 3
43232: NEG
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43260: LD_ADDR_VAR 0 13
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: LD_INT 2
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 2
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: LD_INT 2
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: LD_INT 3
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 3
43419: NEG
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 3
43431: NEG
43432: PUSH
43433: LD_INT 3
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43459: LD_ADDR_VAR 0 14
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: LD_INT 2
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 2
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: LD_INT 2
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 2
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: LD_INT 3
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: LD_INT 3
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: LD_INT 2
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43655: LD_ADDR_VAR 0 15
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 3
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 3
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43848: LD_ADDR_VAR 0 16
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: LD_INT 2
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 2
43951: PUSH
43952: LD_INT 2
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: NEG
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 2
43983: NEG
43984: PUSH
43985: LD_INT 2
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 3
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 3
44005: PUSH
44006: LD_INT 3
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: LD_INT 3
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44041: LD_ADDR_VAR 0 17
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44271: LD_ADDR_VAR 0 18
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: LD_INT 2
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: LD_INT 2
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 2
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: NEG
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44501: LD_ADDR_VAR 0 19
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 2
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: NEG
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44731: LD_ADDR_VAR 0 20
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: LD_INT 2
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: NEG
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44961: LD_ADDR_VAR 0 21
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 2
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 2
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45191: LD_ADDR_VAR 0 22
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 2
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 2
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 2
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 2
45367: NEG
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45421: LD_ADDR_VAR 0 23
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 2
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 2
45556: PUSH
45557: LD_INT 2
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 2
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: LD_INT 3
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 3
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45701: LD_ADDR_VAR 0 24
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: LD_INT 2
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: LD_INT 2
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 2
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 2
45888: NEG
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 3
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 3
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45977: LD_ADDR_VAR 0 25
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 3
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 3
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 2
46208: PUSH
46209: LD_INT 3
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: LD_INT 3
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46251: LD_ADDR_VAR 0 26
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: LD_INT 2
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 2
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: LD_INT 2
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: NEG
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: LD_INT 3
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: LD_INT 3
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46527: LD_ADDR_VAR 0 27
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 2
46714: NEG
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 2
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 3
46760: NEG
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 3
46772: NEG
46773: PUSH
46774: LD_INT 2
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46807: LD_ADDR_VAR 0 28
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: LD_INT 2
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 2
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: LD_INT 3
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 3
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 3
47042: NEG
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 3
47054: NEG
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47089: LD_ADDR_VAR 0 29
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: LD_INT 2
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 2
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: LD_INT 3
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 3
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 3
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 3
47333: NEG
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47368: LD_ADDR_VAR 0 30
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: LD_INT 2
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: LD_INT 3
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 3
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: LD_INT 3
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 3
47611: NEG
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47646: LD_ADDR_VAR 0 31
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: LD_INT 3
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 3
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: LD_INT 3
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 3
47889: NEG
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47924: LD_ADDR_VAR 0 32
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 2
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: NEG
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: NEG
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 3
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 2
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 3
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: PUSH
48147: LD_INT 3
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 3
48167: NEG
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48202: LD_ADDR_VAR 0 33
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 2
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 3
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 3
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: LD_INT 3
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 3
48446: NEG
48447: PUSH
48448: LD_INT 2
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48481: LD_ADDR_VAR 0 34
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 2
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 2
48660: NEG
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 3
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 3
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: LD_INT 3
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48761: LD_ADDR_VAR 0 35
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48873: LD_ADDR_VAR 0 36
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 2
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48985: LD_ADDR_VAR 0 37
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49097: LD_ADDR_VAR 0 38
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49209: LD_ADDR_VAR 0 39
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49321: LD_ADDR_VAR 0 40
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49433: LD_ADDR_VAR 0 41
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: LD_INT 3
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 3
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 3
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 3
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 3
49676: PUSH
49677: LD_INT 3
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 2
49686: PUSH
49687: LD_INT 3
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 3
49707: NEG
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 3
49718: NEG
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 3
49730: NEG
49731: PUSH
49732: LD_INT 2
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 3
49742: NEG
49743: PUSH
49744: LD_INT 3
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49783: LD_ADDR_VAR 0 42
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: NEG
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: LD_INT 3
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 3
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 3
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 3
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 3
50029: PUSH
50030: LD_INT 3
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: LD_INT 3
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: LD_INT 3
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 3
50080: NEG
50081: PUSH
50082: LD_INT 2
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 3
50092: NEG
50093: PUSH
50094: LD_INT 3
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50133: LD_ADDR_VAR 0 43
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 2
50299: NEG
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 2
50310: NEG
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: LD_INT 3
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: LD_INT 3
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 3
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 3
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: LD_INT 3
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 3
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 2
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 3
50429: NEG
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 3
50440: NEG
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50481: LD_ADDR_VAR 0 44
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: LD_INT 3
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 3
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 3
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 3
50724: PUSH
50725: LD_INT 3
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: LD_INT 3
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 3
50755: NEG
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 3
50766: NEG
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 3
50778: NEG
50779: PUSH
50780: LD_INT 2
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 3
50790: NEG
50791: PUSH
50792: LD_INT 3
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50831: LD_ADDR_VAR 0 45
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 2
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 2
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: LD_INT 1
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: LD_INT 2
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: LD_INT 3
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: LD_INT 3
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 3
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 3
51077: PUSH
51078: LD_INT 3
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: LD_INT 3
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 3
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 3
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 3
51128: NEG
51129: PUSH
51130: LD_INT 2
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 3
51140: NEG
51141: PUSH
51142: LD_INT 3
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51181: LD_ADDR_VAR 0 46
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 3
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 3
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 3
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: LD_INT 3
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 3
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 3
51477: NEG
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 3
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51529: LD_ADDR_VAR 0 47
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: LD_INT 2
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51680: LD_ADDR_VAR 0 48
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51827: LD_ADDR_VAR 0 49
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51971: LD_ADDR_VAR 0 50
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 2
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52115: LD_ADDR_VAR 0 51
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52262: LD_ADDR_VAR 0 52
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: LD_INT 2
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52413: LD_ADDR_VAR 0 53
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52643: LD_ADDR_VAR 0 54
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52873: LD_ADDR_VAR 0 55
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 2
53060: NEG
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53103: LD_ADDR_VAR 0 56
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 2
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 2
53238: PUSH
53239: LD_INT 2
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 2
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 2
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: NEG
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53333: LD_ADDR_VAR 0 57
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 2
53532: NEG
53533: PUSH
53534: LD_INT 2
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53563: LD_ADDR_VAR 0 58
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 2
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: LD_INT 2
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53793: LD_ADDR_VAR 0 59
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53881: LD_ADDR_VAR 0 60
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53969: LD_ADDR_VAR 0 61
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54057: LD_ADDR_VAR 0 62
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54145: LD_ADDR_VAR 0 63
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54233: LD_ADDR_VAR 0 64
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: ST_TO_ADDR
// end ; 1 :
54321: GO 60218
54323: LD_INT 1
54325: DOUBLE
54326: EQUAL
54327: IFTRUE 54331
54329: GO 56954
54331: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54332: LD_ADDR_VAR 0 11
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: LD_INT 3
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: LD_INT 3
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: LIST
54375: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54376: LD_ADDR_VAR 0 12
54380: PUSH
54381: LD_INT 2
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 3
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: LIST
54416: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54417: LD_ADDR_VAR 0 13
54421: PUSH
54422: LD_INT 3
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 3
54434: PUSH
54435: LD_INT 3
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: LD_INT 3
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: LIST
54456: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54457: LD_ADDR_VAR 0 14
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: LIST
54497: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54498: LD_ADDR_VAR 0 15
54502: PUSH
54503: LD_INT 2
54505: NEG
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 3
54516: NEG
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 3
54527: NEG
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: LIST
54541: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54542: LD_ADDR_VAR 0 16
54546: PUSH
54547: LD_INT 2
54549: NEG
54550: PUSH
54551: LD_INT 3
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 3
54561: NEG
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 3
54573: NEG
54574: PUSH
54575: LD_INT 3
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: LIST
54587: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54588: LD_ADDR_VAR 0 17
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: LD_INT 3
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 3
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: LIST
54631: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54632: LD_ADDR_VAR 0 18
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 3
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: LIST
54672: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54673: LD_ADDR_VAR 0 19
54677: PUSH
54678: LD_INT 3
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 3
54690: PUSH
54691: LD_INT 3
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: LD_INT 3
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: LIST
54712: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54713: LD_ADDR_VAR 0 20
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 3
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 3
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: LIST
54753: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54754: LD_ADDR_VAR 0 21
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 3
54772: NEG
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 3
54783: NEG
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: LIST
54797: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54798: LD_ADDR_VAR 0 22
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: LD_INT 3
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 3
54817: NEG
54818: PUSH
54819: LD_INT 2
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 3
54829: NEG
54830: PUSH
54831: LD_INT 3
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: LIST
54843: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54844: LD_ADDR_VAR 0 23
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: LD_INT 3
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 4
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 3
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: LIST
54887: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54888: LD_ADDR_VAR 0 24
54892: PUSH
54893: LD_INT 3
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 3
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 4
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54929: LD_ADDR_VAR 0 25
54933: PUSH
54934: LD_INT 3
54936: PUSH
54937: LD_INT 3
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 4
54946: PUSH
54947: LD_INT 3
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: LD_INT 4
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: LIST
54968: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54969: LD_ADDR_VAR 0 26
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 3
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: LD_INT 4
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 3
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: LIST
55009: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55010: LD_ADDR_VAR 0 27
55014: PUSH
55015: LD_INT 3
55017: NEG
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 3
55028: NEG
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 4
55039: NEG
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: LIST
55053: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55054: LD_ADDR_VAR 0 28
55058: PUSH
55059: LD_INT 3
55061: NEG
55062: PUSH
55063: LD_INT 3
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 3
55073: NEG
55074: PUSH
55075: LD_INT 4
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 4
55085: NEG
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: LIST
55099: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55100: LD_ADDR_VAR 0 29
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 3
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 3
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: LD_INT 4
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 4
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 3
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: LD_INT 5
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 5
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: LD_INT 4
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: LD_INT 6
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: LD_INT 6
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 5
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55255: LD_ADDR_VAR 0 30
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 3
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 3
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 4
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 4
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 4
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 5
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 5
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 5
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 6
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 6
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55398: LD_ADDR_VAR 0 31
55402: PUSH
55403: LD_INT 3
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 3
55415: PUSH
55416: LD_INT 3
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: LD_INT 3
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 4
55435: PUSH
55436: LD_INT 3
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 4
55445: PUSH
55446: LD_INT 4
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: PUSH
55456: LD_INT 4
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 5
55465: PUSH
55466: LD_INT 4
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 5
55475: PUSH
55476: LD_INT 5
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 4
55485: PUSH
55486: LD_INT 5
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 6
55495: PUSH
55496: LD_INT 5
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 6
55505: PUSH
55506: LD_INT 6
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 5
55515: PUSH
55516: LD_INT 6
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55537: LD_ADDR_VAR 0 32
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 3
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: LD_INT 3
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 4
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 4
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 3
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 5
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: LD_INT 5
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: LD_INT 4
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: LD_INT 6
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 6
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: LD_INT 5
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55680: LD_ADDR_VAR 0 33
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 3
55698: NEG
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 3
55709: NEG
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 3
55721: NEG
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 4
55732: NEG
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 4
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 4
55755: NEG
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 5
55766: NEG
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 5
55777: NEG
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 5
55789: NEG
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 6
55800: NEG
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 6
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55835: LD_ADDR_VAR 0 34
55839: PUSH
55840: LD_INT 2
55842: NEG
55843: PUSH
55844: LD_INT 3
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 3
55854: NEG
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 3
55866: NEG
55867: PUSH
55868: LD_INT 3
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: NEG
55879: PUSH
55880: LD_INT 4
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 4
55890: NEG
55891: PUSH
55892: LD_INT 3
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 4
55902: NEG
55903: PUSH
55904: LD_INT 4
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 4
55914: NEG
55915: PUSH
55916: LD_INT 5
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 5
55926: NEG
55927: PUSH
55928: LD_INT 4
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 5
55938: NEG
55939: PUSH
55940: LD_INT 5
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 5
55950: NEG
55951: PUSH
55952: LD_INT 6
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 6
55962: NEG
55963: PUSH
55964: LD_INT 5
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 6
55974: NEG
55975: PUSH
55976: LD_INT 6
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55998: LD_ADDR_VAR 0 41
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 2
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 3
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: LIST
56041: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56042: LD_ADDR_VAR 0 42
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 3
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56083: LD_ADDR_VAR 0 43
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 3
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: LIST
56122: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56123: LD_ADDR_VAR 0 44
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: LD_INT 3
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: LIST
56163: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56164: LD_ADDR_VAR 0 45
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 2
56182: NEG
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 3
56193: NEG
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: LIST
56207: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56208: LD_ADDR_VAR 0 46
56212: PUSH
56213: LD_INT 2
56215: NEG
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: LD_INT 3
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 3
56239: NEG
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: LIST
56253: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56254: LD_ADDR_VAR 0 47
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: LD_INT 3
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56287: LD_ADDR_VAR 0 48
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 2
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56318: LD_ADDR_VAR 0 49
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 3
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56347: LD_ADDR_VAR 0 50
56351: PUSH
56352: LD_INT 2
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 3
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56376: LD_ADDR_VAR 0 51
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56407: LD_ADDR_VAR 0 52
56411: PUSH
56412: LD_INT 3
56414: NEG
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 3
56426: NEG
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56440: LD_ADDR_VAR 0 53
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: LD_INT 3
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 3
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: LD_INT 2
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: LIST
56483: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56484: LD_ADDR_VAR 0 54
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 3
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 3
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56525: LD_ADDR_VAR 0 55
56529: PUSH
56530: LD_INT 3
56532: PUSH
56533: LD_INT 2
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 3
56542: PUSH
56543: LD_INT 3
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: LD_INT 3
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: LIST
56564: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56565: LD_ADDR_VAR 0 56
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: LIST
56605: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56606: LD_ADDR_VAR 0 57
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 3
56635: NEG
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: LIST
56649: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56650: LD_ADDR_VAR 0 58
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: LD_INT 3
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 3
56669: NEG
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: LD_INT 3
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: LIST
56695: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56696: LD_ADDR_VAR 0 59
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 2
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: LIST
56739: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56740: LD_ADDR_VAR 0 60
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 2
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: LIST
56780: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56781: LD_ADDR_VAR 0 61
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 2
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: LIST
56820: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56821: LD_ADDR_VAR 0 62
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: LIST
56861: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56862: LD_ADDR_VAR 0 63
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: LIST
56905: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56906: LD_ADDR_VAR 0 64
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 2
56937: NEG
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: LIST
56951: ST_TO_ADDR
// end ; 2 :
56952: GO 60218
56954: LD_INT 2
56956: DOUBLE
56957: EQUAL
56958: IFTRUE 56962
56960: GO 60217
56962: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56963: LD_ADDR_VAR 0 29
56967: PUSH
56968: LD_INT 4
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 4
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 5
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 5
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 4
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 3
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 3
57042: PUSH
57043: LD_INT 2
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 5
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 3
57063: PUSH
57064: LD_INT 3
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 3
57073: PUSH
57074: LD_INT 2
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 4
57083: PUSH
57084: LD_INT 3
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 4
57093: PUSH
57094: LD_INT 4
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: LD_INT 4
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 4
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: PUSH
57144: LD_INT 4
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: LD_INT 4
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: LD_INT 3
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: LD_INT 4
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 5
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: LD_INT 5
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: LD_INT 4
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 3
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: LD_INT 5
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: LD_INT 3
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 3
57246: NEG
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 3
57257: NEG
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 3
57291: NEG
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 4
57302: NEG
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 4
57313: NEG
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 4
57325: NEG
57326: PUSH
57327: LD_INT 2
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 4
57348: NEG
57349: PUSH
57350: LD_INT 4
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 4
57360: NEG
57361: PUSH
57362: LD_INT 5
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 3
57372: NEG
57373: PUSH
57374: LD_INT 4
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 3
57384: NEG
57385: PUSH
57386: LD_INT 3
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 4
57396: NEG
57397: PUSH
57398: LD_INT 3
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 5
57408: NEG
57409: PUSH
57410: LD_INT 4
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 5
57420: NEG
57421: PUSH
57422: LD_INT 5
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 3
57432: NEG
57433: PUSH
57434: LD_INT 5
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 5
57444: NEG
57445: PUSH
57446: LD_INT 3
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57501: LD_ADDR_VAR 0 30
57505: PUSH
57506: LD_INT 4
57508: PUSH
57509: LD_INT 4
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 4
57518: PUSH
57519: LD_INT 3
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 5
57528: PUSH
57529: LD_INT 4
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 5
57538: PUSH
57539: LD_INT 5
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 4
57548: PUSH
57549: LD_INT 5
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: LD_INT 4
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 3
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 5
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 3
57588: PUSH
57589: LD_INT 5
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 3
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: LD_INT 4
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: LD_INT 4
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: LD_INT 3
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: LD_INT 4
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: LD_INT 2
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 4
57691: NEG
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 4
57702: NEG
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 3
57714: NEG
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 3
57725: NEG
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 4
57736: NEG
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 5
57747: NEG
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 5
57758: NEG
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 5
57770: NEG
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 3
57782: NEG
57783: PUSH
57784: LD_INT 2
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 3
57793: NEG
57794: PUSH
57795: LD_INT 3
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 3
57805: NEG
57806: PUSH
57807: LD_INT 4
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: LD_INT 3
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: NEG
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 3
57841: NEG
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 4
57853: NEG
57854: PUSH
57855: LD_INT 3
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 4
57865: NEG
57866: PUSH
57867: LD_INT 4
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: LD_INT 4
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 4
57889: NEG
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 4
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 5
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 4
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: LD_INT 3
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: LD_INT 3
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: LD_INT 4
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: LD_INT 5
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: PUSH
57981: LD_INT 3
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PUSH
57993: LD_INT 5
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58048: LD_ADDR_VAR 0 31
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: LD_INT 4
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: LD_INT 3
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: LD_INT 4
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 5
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: LD_INT 5
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: LD_INT 4
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: LD_INT 3
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 2
58127: PUSH
58128: LD_INT 5
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: NEG
58138: PUSH
58139: LD_INT 3
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 3
58148: NEG
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 3
58159: NEG
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 3
58193: NEG
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 4
58204: NEG
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 4
58215: NEG
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 4
58227: NEG
58228: PUSH
58229: LD_INT 2
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 2
58239: NEG
58240: PUSH
58241: LD_INT 2
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 4
58250: NEG
58251: PUSH
58252: LD_INT 4
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 4
58262: NEG
58263: PUSH
58264: LD_INT 5
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 3
58274: NEG
58275: PUSH
58276: LD_INT 4
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: NEG
58287: PUSH
58288: LD_INT 3
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 4
58298: NEG
58299: PUSH
58300: LD_INT 3
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 5
58310: NEG
58311: PUSH
58312: LD_INT 4
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 5
58322: NEG
58323: PUSH
58324: LD_INT 5
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 3
58334: NEG
58335: PUSH
58336: LD_INT 5
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 5
58346: NEG
58347: PUSH
58348: LD_INT 3
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 3
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: LD_INT 4
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 3
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: LD_INT 2
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: LD_INT 3
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: LD_INT 4
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: LD_INT 2
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: LD_INT 4
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 4
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 4
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 5
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 5
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 4
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 3
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 3
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 3
58532: PUSH
58533: LD_INT 2
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 5
58543: PUSH
58544: LD_INT 2
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58598: LD_ADDR_VAR 0 32
58602: PUSH
58603: LD_INT 4
58605: NEG
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 4
58616: NEG
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 3
58628: NEG
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 4
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 5
58661: NEG
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 5
58672: NEG
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 5
58684: NEG
58685: PUSH
58686: LD_INT 2
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 3
58696: NEG
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 3
58707: NEG
58708: PUSH
58709: LD_INT 3
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 3
58719: NEG
58720: PUSH
58721: LD_INT 4
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: LD_INT 3
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 3
58755: NEG
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 4
58767: NEG
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 4
58779: NEG
58780: PUSH
58781: LD_INT 4
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: LD_INT 4
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 4
58803: NEG
58804: PUSH
58805: LD_INT 2
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: LD_INT 4
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: LD_INT 5
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: LD_INT 4
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 3
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 3
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: LD_INT 4
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: LD_INT 5
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: LD_INT 3
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 2
58905: NEG
58906: PUSH
58907: LD_INT 5
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 3
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 3
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 4
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 4
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 3
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 2
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 2
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 4
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 4
59010: PUSH
59011: LD_INT 4
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 4
59020: PUSH
59021: LD_INT 3
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 5
59030: PUSH
59031: LD_INT 4
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 5
59040: PUSH
59041: LD_INT 5
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 4
59050: PUSH
59051: LD_INT 5
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 3
59060: PUSH
59061: LD_INT 4
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 3
59070: PUSH
59071: LD_INT 3
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 5
59080: PUSH
59081: LD_INT 3
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 3
59090: PUSH
59091: LD_INT 5
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59145: LD_ADDR_VAR 0 33
59149: PUSH
59150: LD_INT 4
59152: NEG
59153: PUSH
59154: LD_INT 4
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 4
59164: NEG
59165: PUSH
59166: LD_INT 5
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 3
59176: NEG
59177: PUSH
59178: LD_INT 4
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: NEG
59189: PUSH
59190: LD_INT 3
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 4
59200: NEG
59201: PUSH
59202: LD_INT 3
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 5
59212: NEG
59213: PUSH
59214: LD_INT 4
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 5
59224: NEG
59225: PUSH
59226: LD_INT 5
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 3
59236: NEG
59237: PUSH
59238: LD_INT 5
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 5
59248: NEG
59249: PUSH
59250: LD_INT 3
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: LD_INT 3
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: LD_INT 4
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: LD_INT 3
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: LD_INT 2
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: LD_INT 2
59307: NEG
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: LD_INT 3
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: LD_INT 4
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 2
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: LD_INT 4
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 4
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 4
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 5
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 5
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 4
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 3
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 3
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 3
59434: PUSH
59435: LD_INT 2
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 5
59445: PUSH
59446: LD_INT 2
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 3
59455: PUSH
59456: LD_INT 3
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 3
59465: PUSH
59466: LD_INT 2
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 4
59475: PUSH
59476: LD_INT 3
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 4
59485: PUSH
59486: LD_INT 4
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 3
59495: PUSH
59496: LD_INT 4
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: PUSH
59516: LD_INT 2
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 4
59525: PUSH
59526: LD_INT 2
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 2
59535: PUSH
59536: LD_INT 4
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: LD_INT 4
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 3
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: LD_INT 4
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: LD_INT 5
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: LD_INT 5
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: LD_INT 4
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: NEG
59607: PUSH
59608: LD_INT 3
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 2
59617: PUSH
59618: LD_INT 5
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: LD_INT 3
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59683: LD_ADDR_VAR 0 34
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: LD_INT 4
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: LD_INT 5
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: LD_INT 4
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: LD_INT 3
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: LD_INT 3
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: NEG
59746: PUSH
59747: LD_INT 4
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: LD_INT 5
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: LD_INT 3
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: LD_INT 5
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 3
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 4
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 4
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 3
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 2
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 2
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 2
59864: PUSH
59865: LD_INT 2
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 4
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 4
59885: PUSH
59886: LD_INT 4
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 4
59895: PUSH
59896: LD_INT 3
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 5
59905: PUSH
59906: LD_INT 4
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 5
59915: PUSH
59916: LD_INT 5
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 4
59925: PUSH
59926: LD_INT 5
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 3
59935: PUSH
59936: LD_INT 4
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 3
59945: PUSH
59946: LD_INT 3
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 5
59955: PUSH
59956: LD_INT 3
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 3
59965: PUSH
59966: LD_INT 5
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: LD_INT 3
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: LD_INT 3
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: LD_INT 4
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: LD_INT 4
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 3
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: LD_INT 4
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: NEG
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 4
60068: NEG
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 4
60079: NEG
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 3
60091: NEG
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 4
60113: NEG
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 5
60124: NEG
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 5
60135: NEG
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 5
60147: NEG
60148: PUSH
60149: LD_INT 2
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 3
60159: NEG
60160: PUSH
60161: LD_INT 2
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: ST_TO_ADDR
// end ; end ;
60215: GO 60218
60217: POP
// case btype of b_depot , b_warehouse :
60218: LD_VAR 0 1
60222: PUSH
60223: LD_INT 0
60225: DOUBLE
60226: EQUAL
60227: IFTRUE 60237
60229: LD_INT 1
60231: DOUBLE
60232: EQUAL
60233: IFTRUE 60237
60235: GO 60438
60237: POP
// case nation of nation_american :
60238: LD_VAR 0 5
60242: PUSH
60243: LD_INT 1
60245: DOUBLE
60246: EQUAL
60247: IFTRUE 60251
60249: GO 60307
60251: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60252: LD_ADDR_VAR 0 9
60256: PUSH
60257: LD_VAR 0 11
60261: PUSH
60262: LD_VAR 0 12
60266: PUSH
60267: LD_VAR 0 13
60271: PUSH
60272: LD_VAR 0 14
60276: PUSH
60277: LD_VAR 0 15
60281: PUSH
60282: LD_VAR 0 16
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: PUSH
60295: LD_VAR 0 4
60299: PUSH
60300: LD_INT 1
60302: PLUS
60303: ARRAY
60304: ST_TO_ADDR
60305: GO 60436
60307: LD_INT 2
60309: DOUBLE
60310: EQUAL
60311: IFTRUE 60315
60313: GO 60371
60315: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60316: LD_ADDR_VAR 0 9
60320: PUSH
60321: LD_VAR 0 17
60325: PUSH
60326: LD_VAR 0 18
60330: PUSH
60331: LD_VAR 0 19
60335: PUSH
60336: LD_VAR 0 20
60340: PUSH
60341: LD_VAR 0 21
60345: PUSH
60346: LD_VAR 0 22
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: PUSH
60359: LD_VAR 0 4
60363: PUSH
60364: LD_INT 1
60366: PLUS
60367: ARRAY
60368: ST_TO_ADDR
60369: GO 60436
60371: LD_INT 3
60373: DOUBLE
60374: EQUAL
60375: IFTRUE 60379
60377: GO 60435
60379: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60380: LD_ADDR_VAR 0 9
60384: PUSH
60385: LD_VAR 0 23
60389: PUSH
60390: LD_VAR 0 24
60394: PUSH
60395: LD_VAR 0 25
60399: PUSH
60400: LD_VAR 0 26
60404: PUSH
60405: LD_VAR 0 27
60409: PUSH
60410: LD_VAR 0 28
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: PUSH
60423: LD_VAR 0 4
60427: PUSH
60428: LD_INT 1
60430: PLUS
60431: ARRAY
60432: ST_TO_ADDR
60433: GO 60436
60435: POP
60436: GO 60991
60438: LD_INT 2
60440: DOUBLE
60441: EQUAL
60442: IFTRUE 60452
60444: LD_INT 3
60446: DOUBLE
60447: EQUAL
60448: IFTRUE 60452
60450: GO 60508
60452: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60453: LD_ADDR_VAR 0 9
60457: PUSH
60458: LD_VAR 0 29
60462: PUSH
60463: LD_VAR 0 30
60467: PUSH
60468: LD_VAR 0 31
60472: PUSH
60473: LD_VAR 0 32
60477: PUSH
60478: LD_VAR 0 33
60482: PUSH
60483: LD_VAR 0 34
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: PUSH
60496: LD_VAR 0 4
60500: PUSH
60501: LD_INT 1
60503: PLUS
60504: ARRAY
60505: ST_TO_ADDR
60506: GO 60991
60508: LD_INT 16
60510: DOUBLE
60511: EQUAL
60512: IFTRUE 60570
60514: LD_INT 17
60516: DOUBLE
60517: EQUAL
60518: IFTRUE 60570
60520: LD_INT 18
60522: DOUBLE
60523: EQUAL
60524: IFTRUE 60570
60526: LD_INT 19
60528: DOUBLE
60529: EQUAL
60530: IFTRUE 60570
60532: LD_INT 22
60534: DOUBLE
60535: EQUAL
60536: IFTRUE 60570
60538: LD_INT 20
60540: DOUBLE
60541: EQUAL
60542: IFTRUE 60570
60544: LD_INT 21
60546: DOUBLE
60547: EQUAL
60548: IFTRUE 60570
60550: LD_INT 23
60552: DOUBLE
60553: EQUAL
60554: IFTRUE 60570
60556: LD_INT 24
60558: DOUBLE
60559: EQUAL
60560: IFTRUE 60570
60562: LD_INT 25
60564: DOUBLE
60565: EQUAL
60566: IFTRUE 60570
60568: GO 60626
60570: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60571: LD_ADDR_VAR 0 9
60575: PUSH
60576: LD_VAR 0 35
60580: PUSH
60581: LD_VAR 0 36
60585: PUSH
60586: LD_VAR 0 37
60590: PUSH
60591: LD_VAR 0 38
60595: PUSH
60596: LD_VAR 0 39
60600: PUSH
60601: LD_VAR 0 40
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: PUSH
60614: LD_VAR 0 4
60618: PUSH
60619: LD_INT 1
60621: PLUS
60622: ARRAY
60623: ST_TO_ADDR
60624: GO 60991
60626: LD_INT 6
60628: DOUBLE
60629: EQUAL
60630: IFTRUE 60682
60632: LD_INT 7
60634: DOUBLE
60635: EQUAL
60636: IFTRUE 60682
60638: LD_INT 8
60640: DOUBLE
60641: EQUAL
60642: IFTRUE 60682
60644: LD_INT 13
60646: DOUBLE
60647: EQUAL
60648: IFTRUE 60682
60650: LD_INT 12
60652: DOUBLE
60653: EQUAL
60654: IFTRUE 60682
60656: LD_INT 15
60658: DOUBLE
60659: EQUAL
60660: IFTRUE 60682
60662: LD_INT 11
60664: DOUBLE
60665: EQUAL
60666: IFTRUE 60682
60668: LD_INT 14
60670: DOUBLE
60671: EQUAL
60672: IFTRUE 60682
60674: LD_INT 10
60676: DOUBLE
60677: EQUAL
60678: IFTRUE 60682
60680: GO 60738
60682: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60683: LD_ADDR_VAR 0 9
60687: PUSH
60688: LD_VAR 0 41
60692: PUSH
60693: LD_VAR 0 42
60697: PUSH
60698: LD_VAR 0 43
60702: PUSH
60703: LD_VAR 0 44
60707: PUSH
60708: LD_VAR 0 45
60712: PUSH
60713: LD_VAR 0 46
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: PUSH
60726: LD_VAR 0 4
60730: PUSH
60731: LD_INT 1
60733: PLUS
60734: ARRAY
60735: ST_TO_ADDR
60736: GO 60991
60738: LD_INT 36
60740: DOUBLE
60741: EQUAL
60742: IFTRUE 60746
60744: GO 60802
60746: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60747: LD_ADDR_VAR 0 9
60751: PUSH
60752: LD_VAR 0 47
60756: PUSH
60757: LD_VAR 0 48
60761: PUSH
60762: LD_VAR 0 49
60766: PUSH
60767: LD_VAR 0 50
60771: PUSH
60772: LD_VAR 0 51
60776: PUSH
60777: LD_VAR 0 52
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: PUSH
60790: LD_VAR 0 4
60794: PUSH
60795: LD_INT 1
60797: PLUS
60798: ARRAY
60799: ST_TO_ADDR
60800: GO 60991
60802: LD_INT 4
60804: DOUBLE
60805: EQUAL
60806: IFTRUE 60828
60808: LD_INT 5
60810: DOUBLE
60811: EQUAL
60812: IFTRUE 60828
60814: LD_INT 34
60816: DOUBLE
60817: EQUAL
60818: IFTRUE 60828
60820: LD_INT 37
60822: DOUBLE
60823: EQUAL
60824: IFTRUE 60828
60826: GO 60884
60828: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60829: LD_ADDR_VAR 0 9
60833: PUSH
60834: LD_VAR 0 53
60838: PUSH
60839: LD_VAR 0 54
60843: PUSH
60844: LD_VAR 0 55
60848: PUSH
60849: LD_VAR 0 56
60853: PUSH
60854: LD_VAR 0 57
60858: PUSH
60859: LD_VAR 0 58
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: PUSH
60872: LD_VAR 0 4
60876: PUSH
60877: LD_INT 1
60879: PLUS
60880: ARRAY
60881: ST_TO_ADDR
60882: GO 60991
60884: LD_INT 31
60886: DOUBLE
60887: EQUAL
60888: IFTRUE 60934
60890: LD_INT 32
60892: DOUBLE
60893: EQUAL
60894: IFTRUE 60934
60896: LD_INT 33
60898: DOUBLE
60899: EQUAL
60900: IFTRUE 60934
60902: LD_INT 27
60904: DOUBLE
60905: EQUAL
60906: IFTRUE 60934
60908: LD_INT 26
60910: DOUBLE
60911: EQUAL
60912: IFTRUE 60934
60914: LD_INT 28
60916: DOUBLE
60917: EQUAL
60918: IFTRUE 60934
60920: LD_INT 29
60922: DOUBLE
60923: EQUAL
60924: IFTRUE 60934
60926: LD_INT 30
60928: DOUBLE
60929: EQUAL
60930: IFTRUE 60934
60932: GO 60990
60934: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60935: LD_ADDR_VAR 0 9
60939: PUSH
60940: LD_VAR 0 59
60944: PUSH
60945: LD_VAR 0 60
60949: PUSH
60950: LD_VAR 0 61
60954: PUSH
60955: LD_VAR 0 62
60959: PUSH
60960: LD_VAR 0 63
60964: PUSH
60965: LD_VAR 0 64
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: PUSH
60978: LD_VAR 0 4
60982: PUSH
60983: LD_INT 1
60985: PLUS
60986: ARRAY
60987: ST_TO_ADDR
60988: GO 60991
60990: POP
// temp_list2 = [ ] ;
60991: LD_ADDR_VAR 0 10
60995: PUSH
60996: EMPTY
60997: ST_TO_ADDR
// for i in temp_list do
60998: LD_ADDR_VAR 0 8
61002: PUSH
61003: LD_VAR 0 9
61007: PUSH
61008: FOR_IN
61009: IFFALSE 61061
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61011: LD_ADDR_VAR 0 10
61015: PUSH
61016: LD_VAR 0 10
61020: PUSH
61021: LD_VAR 0 8
61025: PUSH
61026: LD_INT 1
61028: ARRAY
61029: PUSH
61030: LD_VAR 0 2
61034: PLUS
61035: PUSH
61036: LD_VAR 0 8
61040: PUSH
61041: LD_INT 2
61043: ARRAY
61044: PUSH
61045: LD_VAR 0 3
61049: PLUS
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: EMPTY
61056: LIST
61057: ADD
61058: ST_TO_ADDR
61059: GO 61008
61061: POP
61062: POP
// result = temp_list2 ;
61063: LD_ADDR_VAR 0 7
61067: PUSH
61068: LD_VAR 0 10
61072: ST_TO_ADDR
// end ;
61073: LD_VAR 0 7
61077: RET
// export function EnemyInRange ( unit , dist ) ; begin
61078: LD_INT 0
61080: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61081: LD_ADDR_VAR 0 3
61085: PUSH
61086: LD_VAR 0 1
61090: PPUSH
61091: CALL_OW 255
61095: PPUSH
61096: LD_VAR 0 1
61100: PPUSH
61101: CALL_OW 250
61105: PPUSH
61106: LD_VAR 0 1
61110: PPUSH
61111: CALL_OW 251
61115: PPUSH
61116: LD_VAR 0 2
61120: PPUSH
61121: CALL 34474 0 4
61125: PUSH
61126: LD_INT 4
61128: ARRAY
61129: ST_TO_ADDR
// end ;
61130: LD_VAR 0 3
61134: RET
// export function PlayerSeeMe ( unit ) ; begin
61135: LD_INT 0
61137: PPUSH
// result := See ( your_side , unit ) ;
61138: LD_ADDR_VAR 0 2
61142: PUSH
61143: LD_OWVAR 2
61147: PPUSH
61148: LD_VAR 0 1
61152: PPUSH
61153: CALL_OW 292
61157: ST_TO_ADDR
// end ;
61158: LD_VAR 0 2
61162: RET
// export function ReverseDir ( unit ) ; begin
61163: LD_INT 0
61165: PPUSH
// if not unit then
61166: LD_VAR 0 1
61170: NOT
61171: IFFALSE 61175
// exit ;
61173: GO 61198
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61175: LD_ADDR_VAR 0 2
61179: PUSH
61180: LD_VAR 0 1
61184: PPUSH
61185: CALL_OW 254
61189: PUSH
61190: LD_INT 3
61192: PLUS
61193: PUSH
61194: LD_INT 6
61196: MOD
61197: ST_TO_ADDR
// end ;
61198: LD_VAR 0 2
61202: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61203: LD_INT 0
61205: PPUSH
61206: PPUSH
61207: PPUSH
61208: PPUSH
61209: PPUSH
// if not hexes then
61210: LD_VAR 0 2
61214: NOT
61215: IFFALSE 61219
// exit ;
61217: GO 61367
// dist := 9999 ;
61219: LD_ADDR_VAR 0 5
61223: PUSH
61224: LD_INT 9999
61226: ST_TO_ADDR
// for i = 1 to hexes do
61227: LD_ADDR_VAR 0 4
61231: PUSH
61232: DOUBLE
61233: LD_INT 1
61235: DEC
61236: ST_TO_ADDR
61237: LD_VAR 0 2
61241: PUSH
61242: FOR_TO
61243: IFFALSE 61355
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61245: LD_VAR 0 1
61249: PPUSH
61250: LD_VAR 0 2
61254: PUSH
61255: LD_VAR 0 4
61259: ARRAY
61260: PUSH
61261: LD_INT 1
61263: ARRAY
61264: PPUSH
61265: LD_VAR 0 2
61269: PUSH
61270: LD_VAR 0 4
61274: ARRAY
61275: PUSH
61276: LD_INT 2
61278: ARRAY
61279: PPUSH
61280: CALL_OW 297
61284: PUSH
61285: LD_VAR 0 5
61289: LESS
61290: IFFALSE 61353
// begin hex := hexes [ i ] ;
61292: LD_ADDR_VAR 0 7
61296: PUSH
61297: LD_VAR 0 2
61301: PUSH
61302: LD_VAR 0 4
61306: ARRAY
61307: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61308: LD_ADDR_VAR 0 5
61312: PUSH
61313: LD_VAR 0 1
61317: PPUSH
61318: LD_VAR 0 2
61322: PUSH
61323: LD_VAR 0 4
61327: ARRAY
61328: PUSH
61329: LD_INT 1
61331: ARRAY
61332: PPUSH
61333: LD_VAR 0 2
61337: PUSH
61338: LD_VAR 0 4
61342: ARRAY
61343: PUSH
61344: LD_INT 2
61346: ARRAY
61347: PPUSH
61348: CALL_OW 297
61352: ST_TO_ADDR
// end ; end ;
61353: GO 61242
61355: POP
61356: POP
// result := hex ;
61357: LD_ADDR_VAR 0 3
61361: PUSH
61362: LD_VAR 0 7
61366: ST_TO_ADDR
// end ;
61367: LD_VAR 0 3
61371: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61372: LD_INT 0
61374: PPUSH
61375: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61376: LD_VAR 0 1
61380: NOT
61381: PUSH
61382: LD_VAR 0 1
61386: PUSH
61387: LD_INT 21
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 23
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PPUSH
61411: CALL_OW 69
61415: IN
61416: NOT
61417: OR
61418: IFFALSE 61422
// exit ;
61420: GO 61469
// for i = 1 to 3 do
61422: LD_ADDR_VAR 0 3
61426: PUSH
61427: DOUBLE
61428: LD_INT 1
61430: DEC
61431: ST_TO_ADDR
61432: LD_INT 3
61434: PUSH
61435: FOR_TO
61436: IFFALSE 61467
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61438: LD_VAR 0 1
61442: PPUSH
61443: CALL_OW 250
61447: PPUSH
61448: LD_VAR 0 1
61452: PPUSH
61453: CALL_OW 251
61457: PPUSH
61458: LD_INT 1
61460: PPUSH
61461: CALL_OW 453
61465: GO 61435
61467: POP
61468: POP
// end ;
61469: LD_VAR 0 2
61473: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61474: LD_INT 0
61476: PPUSH
61477: PPUSH
61478: PPUSH
61479: PPUSH
61480: PPUSH
61481: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61482: LD_VAR 0 1
61486: NOT
61487: PUSH
61488: LD_VAR 0 2
61492: NOT
61493: OR
61494: PUSH
61495: LD_VAR 0 1
61499: PPUSH
61500: CALL_OW 314
61504: OR
61505: IFFALSE 61509
// exit ;
61507: GO 61950
// x := GetX ( enemy_unit ) ;
61509: LD_ADDR_VAR 0 7
61513: PUSH
61514: LD_VAR 0 2
61518: PPUSH
61519: CALL_OW 250
61523: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61524: LD_ADDR_VAR 0 8
61528: PUSH
61529: LD_VAR 0 2
61533: PPUSH
61534: CALL_OW 251
61538: ST_TO_ADDR
// if not x or not y then
61539: LD_VAR 0 7
61543: NOT
61544: PUSH
61545: LD_VAR 0 8
61549: NOT
61550: OR
61551: IFFALSE 61555
// exit ;
61553: GO 61950
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61555: LD_ADDR_VAR 0 6
61559: PUSH
61560: LD_VAR 0 7
61564: PPUSH
61565: LD_INT 0
61567: PPUSH
61568: LD_INT 4
61570: PPUSH
61571: CALL_OW 272
61575: PUSH
61576: LD_VAR 0 8
61580: PPUSH
61581: LD_INT 0
61583: PPUSH
61584: LD_INT 4
61586: PPUSH
61587: CALL_OW 273
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_VAR 0 7
61600: PPUSH
61601: LD_INT 1
61603: PPUSH
61604: LD_INT 4
61606: PPUSH
61607: CALL_OW 272
61611: PUSH
61612: LD_VAR 0 8
61616: PPUSH
61617: LD_INT 1
61619: PPUSH
61620: LD_INT 4
61622: PPUSH
61623: CALL_OW 273
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_VAR 0 7
61636: PPUSH
61637: LD_INT 2
61639: PPUSH
61640: LD_INT 4
61642: PPUSH
61643: CALL_OW 272
61647: PUSH
61648: LD_VAR 0 8
61652: PPUSH
61653: LD_INT 2
61655: PPUSH
61656: LD_INT 4
61658: PPUSH
61659: CALL_OW 273
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_VAR 0 7
61672: PPUSH
61673: LD_INT 3
61675: PPUSH
61676: LD_INT 4
61678: PPUSH
61679: CALL_OW 272
61683: PUSH
61684: LD_VAR 0 8
61688: PPUSH
61689: LD_INT 3
61691: PPUSH
61692: LD_INT 4
61694: PPUSH
61695: CALL_OW 273
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_VAR 0 7
61708: PPUSH
61709: LD_INT 4
61711: PPUSH
61712: LD_INT 4
61714: PPUSH
61715: CALL_OW 272
61719: PUSH
61720: LD_VAR 0 8
61724: PPUSH
61725: LD_INT 4
61727: PPUSH
61728: LD_INT 4
61730: PPUSH
61731: CALL_OW 273
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_VAR 0 7
61744: PPUSH
61745: LD_INT 5
61747: PPUSH
61748: LD_INT 4
61750: PPUSH
61751: CALL_OW 272
61755: PUSH
61756: LD_VAR 0 8
61760: PPUSH
61761: LD_INT 5
61763: PPUSH
61764: LD_INT 4
61766: PPUSH
61767: CALL_OW 273
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: ST_TO_ADDR
// for i = tmp downto 1 do
61784: LD_ADDR_VAR 0 4
61788: PUSH
61789: DOUBLE
61790: LD_VAR 0 6
61794: INC
61795: ST_TO_ADDR
61796: LD_INT 1
61798: PUSH
61799: FOR_DOWNTO
61800: IFFALSE 61901
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61802: LD_VAR 0 6
61806: PUSH
61807: LD_VAR 0 4
61811: ARRAY
61812: PUSH
61813: LD_INT 1
61815: ARRAY
61816: PPUSH
61817: LD_VAR 0 6
61821: PUSH
61822: LD_VAR 0 4
61826: ARRAY
61827: PUSH
61828: LD_INT 2
61830: ARRAY
61831: PPUSH
61832: CALL_OW 488
61836: NOT
61837: PUSH
61838: LD_VAR 0 6
61842: PUSH
61843: LD_VAR 0 4
61847: ARRAY
61848: PUSH
61849: LD_INT 1
61851: ARRAY
61852: PPUSH
61853: LD_VAR 0 6
61857: PUSH
61858: LD_VAR 0 4
61862: ARRAY
61863: PUSH
61864: LD_INT 2
61866: ARRAY
61867: PPUSH
61868: CALL_OW 428
61872: PUSH
61873: LD_INT 0
61875: NONEQUAL
61876: OR
61877: IFFALSE 61899
// tmp := Delete ( tmp , i ) ;
61879: LD_ADDR_VAR 0 6
61883: PUSH
61884: LD_VAR 0 6
61888: PPUSH
61889: LD_VAR 0 4
61893: PPUSH
61894: CALL_OW 3
61898: ST_TO_ADDR
61899: GO 61799
61901: POP
61902: POP
// j := GetClosestHex ( unit , tmp ) ;
61903: LD_ADDR_VAR 0 5
61907: PUSH
61908: LD_VAR 0 1
61912: PPUSH
61913: LD_VAR 0 6
61917: PPUSH
61918: CALL 61203 0 2
61922: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61923: LD_VAR 0 1
61927: PPUSH
61928: LD_VAR 0 5
61932: PUSH
61933: LD_INT 1
61935: ARRAY
61936: PPUSH
61937: LD_VAR 0 5
61941: PUSH
61942: LD_INT 2
61944: ARRAY
61945: PPUSH
61946: CALL_OW 111
// end ;
61950: LD_VAR 0 3
61954: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61955: LD_INT 0
61957: PPUSH
61958: PPUSH
61959: PPUSH
// uc_side = 0 ;
61960: LD_ADDR_OWVAR 20
61964: PUSH
61965: LD_INT 0
61967: ST_TO_ADDR
// uc_nation = 0 ;
61968: LD_ADDR_OWVAR 21
61972: PUSH
61973: LD_INT 0
61975: ST_TO_ADDR
// InitHc_All ( ) ;
61976: CALL_OW 584
// InitVc ;
61980: CALL_OW 20
// if mastodonts then
61984: LD_VAR 0 6
61988: IFFALSE 62055
// for i = 1 to mastodonts do
61990: LD_ADDR_VAR 0 11
61994: PUSH
61995: DOUBLE
61996: LD_INT 1
61998: DEC
61999: ST_TO_ADDR
62000: LD_VAR 0 6
62004: PUSH
62005: FOR_TO
62006: IFFALSE 62053
// begin vc_chassis := 31 ;
62008: LD_ADDR_OWVAR 37
62012: PUSH
62013: LD_INT 31
62015: ST_TO_ADDR
// vc_control := control_rider ;
62016: LD_ADDR_OWVAR 38
62020: PUSH
62021: LD_INT 4
62023: ST_TO_ADDR
// animal := CreateVehicle ;
62024: LD_ADDR_VAR 0 12
62028: PUSH
62029: CALL_OW 45
62033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62034: LD_VAR 0 12
62038: PPUSH
62039: LD_VAR 0 8
62043: PPUSH
62044: LD_INT 0
62046: PPUSH
62047: CALL 64243 0 3
// end ;
62051: GO 62005
62053: POP
62054: POP
// if horses then
62055: LD_VAR 0 5
62059: IFFALSE 62126
// for i = 1 to horses do
62061: LD_ADDR_VAR 0 11
62065: PUSH
62066: DOUBLE
62067: LD_INT 1
62069: DEC
62070: ST_TO_ADDR
62071: LD_VAR 0 5
62075: PUSH
62076: FOR_TO
62077: IFFALSE 62124
// begin hc_class := 21 ;
62079: LD_ADDR_OWVAR 28
62083: PUSH
62084: LD_INT 21
62086: ST_TO_ADDR
// hc_gallery :=  ;
62087: LD_ADDR_OWVAR 33
62091: PUSH
62092: LD_STRING 
62094: ST_TO_ADDR
// animal := CreateHuman ;
62095: LD_ADDR_VAR 0 12
62099: PUSH
62100: CALL_OW 44
62104: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62105: LD_VAR 0 12
62109: PPUSH
62110: LD_VAR 0 8
62114: PPUSH
62115: LD_INT 0
62117: PPUSH
62118: CALL 64243 0 3
// end ;
62122: GO 62076
62124: POP
62125: POP
// if birds then
62126: LD_VAR 0 1
62130: IFFALSE 62197
// for i = 1 to birds do
62132: LD_ADDR_VAR 0 11
62136: PUSH
62137: DOUBLE
62138: LD_INT 1
62140: DEC
62141: ST_TO_ADDR
62142: LD_VAR 0 1
62146: PUSH
62147: FOR_TO
62148: IFFALSE 62195
// begin hc_class = 18 ;
62150: LD_ADDR_OWVAR 28
62154: PUSH
62155: LD_INT 18
62157: ST_TO_ADDR
// hc_gallery =  ;
62158: LD_ADDR_OWVAR 33
62162: PUSH
62163: LD_STRING 
62165: ST_TO_ADDR
// animal := CreateHuman ;
62166: LD_ADDR_VAR 0 12
62170: PUSH
62171: CALL_OW 44
62175: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62176: LD_VAR 0 12
62180: PPUSH
62181: LD_VAR 0 8
62185: PPUSH
62186: LD_INT 0
62188: PPUSH
62189: CALL 64243 0 3
// end ;
62193: GO 62147
62195: POP
62196: POP
// if tigers then
62197: LD_VAR 0 2
62201: IFFALSE 62285
// for i = 1 to tigers do
62203: LD_ADDR_VAR 0 11
62207: PUSH
62208: DOUBLE
62209: LD_INT 1
62211: DEC
62212: ST_TO_ADDR
62213: LD_VAR 0 2
62217: PUSH
62218: FOR_TO
62219: IFFALSE 62283
// begin hc_class = class_tiger ;
62221: LD_ADDR_OWVAR 28
62225: PUSH
62226: LD_INT 14
62228: ST_TO_ADDR
// hc_gallery =  ;
62229: LD_ADDR_OWVAR 33
62233: PUSH
62234: LD_STRING 
62236: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62237: LD_ADDR_OWVAR 35
62241: PUSH
62242: LD_INT 7
62244: NEG
62245: PPUSH
62246: LD_INT 7
62248: PPUSH
62249: CALL_OW 12
62253: ST_TO_ADDR
// animal := CreateHuman ;
62254: LD_ADDR_VAR 0 12
62258: PUSH
62259: CALL_OW 44
62263: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62264: LD_VAR 0 12
62268: PPUSH
62269: LD_VAR 0 8
62273: PPUSH
62274: LD_INT 0
62276: PPUSH
62277: CALL 64243 0 3
// end ;
62281: GO 62218
62283: POP
62284: POP
// if apemans then
62285: LD_VAR 0 3
62289: IFFALSE 62412
// for i = 1 to apemans do
62291: LD_ADDR_VAR 0 11
62295: PUSH
62296: DOUBLE
62297: LD_INT 1
62299: DEC
62300: ST_TO_ADDR
62301: LD_VAR 0 3
62305: PUSH
62306: FOR_TO
62307: IFFALSE 62410
// begin hc_class = class_apeman ;
62309: LD_ADDR_OWVAR 28
62313: PUSH
62314: LD_INT 12
62316: ST_TO_ADDR
// hc_gallery =  ;
62317: LD_ADDR_OWVAR 33
62321: PUSH
62322: LD_STRING 
62324: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62325: LD_ADDR_OWVAR 35
62329: PUSH
62330: LD_INT 2
62332: NEG
62333: PPUSH
62334: LD_INT 2
62336: PPUSH
62337: CALL_OW 12
62341: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62342: LD_ADDR_OWVAR 31
62346: PUSH
62347: LD_INT 1
62349: PPUSH
62350: LD_INT 3
62352: PPUSH
62353: CALL_OW 12
62357: PUSH
62358: LD_INT 1
62360: PPUSH
62361: LD_INT 3
62363: PPUSH
62364: CALL_OW 12
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: ST_TO_ADDR
// animal := CreateHuman ;
62381: LD_ADDR_VAR 0 12
62385: PUSH
62386: CALL_OW 44
62390: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62391: LD_VAR 0 12
62395: PPUSH
62396: LD_VAR 0 8
62400: PPUSH
62401: LD_INT 0
62403: PPUSH
62404: CALL 64243 0 3
// end ;
62408: GO 62306
62410: POP
62411: POP
// if enchidnas then
62412: LD_VAR 0 4
62416: IFFALSE 62483
// for i = 1 to enchidnas do
62418: LD_ADDR_VAR 0 11
62422: PUSH
62423: DOUBLE
62424: LD_INT 1
62426: DEC
62427: ST_TO_ADDR
62428: LD_VAR 0 4
62432: PUSH
62433: FOR_TO
62434: IFFALSE 62481
// begin hc_class = 13 ;
62436: LD_ADDR_OWVAR 28
62440: PUSH
62441: LD_INT 13
62443: ST_TO_ADDR
// hc_gallery =  ;
62444: LD_ADDR_OWVAR 33
62448: PUSH
62449: LD_STRING 
62451: ST_TO_ADDR
// animal := CreateHuman ;
62452: LD_ADDR_VAR 0 12
62456: PUSH
62457: CALL_OW 44
62461: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62462: LD_VAR 0 12
62466: PPUSH
62467: LD_VAR 0 8
62471: PPUSH
62472: LD_INT 0
62474: PPUSH
62475: CALL 64243 0 3
// end ;
62479: GO 62433
62481: POP
62482: POP
// if fishes then
62483: LD_VAR 0 7
62487: IFFALSE 62554
// for i = 1 to fishes do
62489: LD_ADDR_VAR 0 11
62493: PUSH
62494: DOUBLE
62495: LD_INT 1
62497: DEC
62498: ST_TO_ADDR
62499: LD_VAR 0 7
62503: PUSH
62504: FOR_TO
62505: IFFALSE 62552
// begin hc_class = 20 ;
62507: LD_ADDR_OWVAR 28
62511: PUSH
62512: LD_INT 20
62514: ST_TO_ADDR
// hc_gallery =  ;
62515: LD_ADDR_OWVAR 33
62519: PUSH
62520: LD_STRING 
62522: ST_TO_ADDR
// animal := CreateHuman ;
62523: LD_ADDR_VAR 0 12
62527: PUSH
62528: CALL_OW 44
62532: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62533: LD_VAR 0 12
62537: PPUSH
62538: LD_VAR 0 9
62542: PPUSH
62543: LD_INT 0
62545: PPUSH
62546: CALL 64243 0 3
// end ;
62550: GO 62504
62552: POP
62553: POP
// end ;
62554: LD_VAR 0 10
62558: RET
// export function WantHeal ( sci , unit ) ; begin
62559: LD_INT 0
62561: PPUSH
// if GetTaskList ( sci ) > 0 then
62562: LD_VAR 0 1
62566: PPUSH
62567: CALL_OW 437
62571: PUSH
62572: LD_INT 0
62574: GREATER
62575: IFFALSE 62645
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62577: LD_VAR 0 1
62581: PPUSH
62582: CALL_OW 437
62586: PUSH
62587: LD_INT 1
62589: ARRAY
62590: PUSH
62591: LD_INT 1
62593: ARRAY
62594: PUSH
62595: LD_STRING l
62597: EQUAL
62598: PUSH
62599: LD_VAR 0 1
62603: PPUSH
62604: CALL_OW 437
62608: PUSH
62609: LD_INT 1
62611: ARRAY
62612: PUSH
62613: LD_INT 4
62615: ARRAY
62616: PUSH
62617: LD_VAR 0 2
62621: EQUAL
62622: AND
62623: IFFALSE 62635
// result := true else
62625: LD_ADDR_VAR 0 3
62629: PUSH
62630: LD_INT 1
62632: ST_TO_ADDR
62633: GO 62643
// result := false ;
62635: LD_ADDR_VAR 0 3
62639: PUSH
62640: LD_INT 0
62642: ST_TO_ADDR
// end else
62643: GO 62653
// result := false ;
62645: LD_ADDR_VAR 0 3
62649: PUSH
62650: LD_INT 0
62652: ST_TO_ADDR
// end ;
62653: LD_VAR 0 3
62657: RET
// export function HealTarget ( sci ) ; begin
62658: LD_INT 0
62660: PPUSH
// if not sci then
62661: LD_VAR 0 1
62665: NOT
62666: IFFALSE 62670
// exit ;
62668: GO 62735
// result := 0 ;
62670: LD_ADDR_VAR 0 2
62674: PUSH
62675: LD_INT 0
62677: ST_TO_ADDR
// if GetTaskList ( sci ) then
62678: LD_VAR 0 1
62682: PPUSH
62683: CALL_OW 437
62687: IFFALSE 62735
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62689: LD_VAR 0 1
62693: PPUSH
62694: CALL_OW 437
62698: PUSH
62699: LD_INT 1
62701: ARRAY
62702: PUSH
62703: LD_INT 1
62705: ARRAY
62706: PUSH
62707: LD_STRING l
62709: EQUAL
62710: IFFALSE 62735
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62712: LD_ADDR_VAR 0 2
62716: PUSH
62717: LD_VAR 0 1
62721: PPUSH
62722: CALL_OW 437
62726: PUSH
62727: LD_INT 1
62729: ARRAY
62730: PUSH
62731: LD_INT 4
62733: ARRAY
62734: ST_TO_ADDR
// end ;
62735: LD_VAR 0 2
62739: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62740: LD_INT 0
62742: PPUSH
62743: PPUSH
62744: PPUSH
62745: PPUSH
// if not base_units then
62746: LD_VAR 0 1
62750: NOT
62751: IFFALSE 62755
// exit ;
62753: GO 62842
// result := false ;
62755: LD_ADDR_VAR 0 2
62759: PUSH
62760: LD_INT 0
62762: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62763: LD_ADDR_VAR 0 5
62767: PUSH
62768: LD_VAR 0 1
62772: PPUSH
62773: LD_INT 21
62775: PUSH
62776: LD_INT 3
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PPUSH
62783: CALL_OW 72
62787: ST_TO_ADDR
// if not tmp then
62788: LD_VAR 0 5
62792: NOT
62793: IFFALSE 62797
// exit ;
62795: GO 62842
// for i in tmp do
62797: LD_ADDR_VAR 0 3
62801: PUSH
62802: LD_VAR 0 5
62806: PUSH
62807: FOR_IN
62808: IFFALSE 62840
// begin result := EnemyInRange ( i , 22 ) ;
62810: LD_ADDR_VAR 0 2
62814: PUSH
62815: LD_VAR 0 3
62819: PPUSH
62820: LD_INT 22
62822: PPUSH
62823: CALL 61078 0 2
62827: ST_TO_ADDR
// if result then
62828: LD_VAR 0 2
62832: IFFALSE 62838
// exit ;
62834: POP
62835: POP
62836: GO 62842
// end ;
62838: GO 62807
62840: POP
62841: POP
// end ;
62842: LD_VAR 0 2
62846: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62847: LD_INT 0
62849: PPUSH
62850: PPUSH
// if not units then
62851: LD_VAR 0 1
62855: NOT
62856: IFFALSE 62860
// exit ;
62858: GO 62930
// result := [ ] ;
62860: LD_ADDR_VAR 0 3
62864: PUSH
62865: EMPTY
62866: ST_TO_ADDR
// for i in units do
62867: LD_ADDR_VAR 0 4
62871: PUSH
62872: LD_VAR 0 1
62876: PUSH
62877: FOR_IN
62878: IFFALSE 62928
// if GetTag ( i ) = tag then
62880: LD_VAR 0 4
62884: PPUSH
62885: CALL_OW 110
62889: PUSH
62890: LD_VAR 0 2
62894: EQUAL
62895: IFFALSE 62926
// result := Replace ( result , result + 1 , i ) ;
62897: LD_ADDR_VAR 0 3
62901: PUSH
62902: LD_VAR 0 3
62906: PPUSH
62907: LD_VAR 0 3
62911: PUSH
62912: LD_INT 1
62914: PLUS
62915: PPUSH
62916: LD_VAR 0 4
62920: PPUSH
62921: CALL_OW 1
62925: ST_TO_ADDR
62926: GO 62877
62928: POP
62929: POP
// end ;
62930: LD_VAR 0 3
62934: RET
// export function IsDriver ( un ) ; begin
62935: LD_INT 0
62937: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62938: LD_ADDR_VAR 0 2
62942: PUSH
62943: LD_VAR 0 1
62947: PUSH
62948: LD_INT 55
62950: PUSH
62951: EMPTY
62952: LIST
62953: PPUSH
62954: CALL_OW 69
62958: IN
62959: ST_TO_ADDR
// end ;
62960: LD_VAR 0 2
62964: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62965: LD_INT 0
62967: PPUSH
62968: PPUSH
// list := [ ] ;
62969: LD_ADDR_VAR 0 5
62973: PUSH
62974: EMPTY
62975: ST_TO_ADDR
// case d of 0 :
62976: LD_VAR 0 3
62980: PUSH
62981: LD_INT 0
62983: DOUBLE
62984: EQUAL
62985: IFTRUE 62989
62987: GO 63122
62989: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62990: LD_ADDR_VAR 0 5
62994: PUSH
62995: LD_VAR 0 1
62999: PUSH
63000: LD_INT 4
63002: MINUS
63003: PUSH
63004: LD_VAR 0 2
63008: PUSH
63009: LD_INT 4
63011: MINUS
63012: PUSH
63013: LD_INT 2
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: LIST
63020: PUSH
63021: LD_VAR 0 1
63025: PUSH
63026: LD_INT 3
63028: MINUS
63029: PUSH
63030: LD_VAR 0 2
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: LIST
63042: PUSH
63043: LD_VAR 0 1
63047: PUSH
63048: LD_INT 4
63050: PLUS
63051: PUSH
63052: LD_VAR 0 2
63056: PUSH
63057: LD_INT 4
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: LIST
63064: PUSH
63065: LD_VAR 0 1
63069: PUSH
63070: LD_INT 3
63072: PLUS
63073: PUSH
63074: LD_VAR 0 2
63078: PUSH
63079: LD_INT 3
63081: PLUS
63082: PUSH
63083: LD_INT 5
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: LIST
63090: PUSH
63091: LD_VAR 0 1
63095: PUSH
63096: LD_VAR 0 2
63100: PUSH
63101: LD_INT 4
63103: PLUS
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: LIST
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: ST_TO_ADDR
// end ; 1 :
63120: GO 63820
63122: LD_INT 1
63124: DOUBLE
63125: EQUAL
63126: IFTRUE 63130
63128: GO 63263
63130: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63131: LD_ADDR_VAR 0 5
63135: PUSH
63136: LD_VAR 0 1
63140: PUSH
63141: LD_VAR 0 2
63145: PUSH
63146: LD_INT 4
63148: MINUS
63149: PUSH
63150: LD_INT 3
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: LIST
63157: PUSH
63158: LD_VAR 0 1
63162: PUSH
63163: LD_INT 3
63165: MINUS
63166: PUSH
63167: LD_VAR 0 2
63171: PUSH
63172: LD_INT 3
63174: MINUS
63175: PUSH
63176: LD_INT 2
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: LIST
63183: PUSH
63184: LD_VAR 0 1
63188: PUSH
63189: LD_INT 4
63191: MINUS
63192: PUSH
63193: LD_VAR 0 2
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: LIST
63205: PUSH
63206: LD_VAR 0 1
63210: PUSH
63211: LD_VAR 0 2
63215: PUSH
63216: LD_INT 3
63218: PLUS
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: LIST
63227: PUSH
63228: LD_VAR 0 1
63232: PUSH
63233: LD_INT 4
63235: PLUS
63236: PUSH
63237: LD_VAR 0 2
63241: PUSH
63242: LD_INT 4
63244: PLUS
63245: PUSH
63246: LD_INT 5
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: LIST
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: ST_TO_ADDR
// end ; 2 :
63261: GO 63820
63263: LD_INT 2
63265: DOUBLE
63266: EQUAL
63267: IFTRUE 63271
63269: GO 63400
63271: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63272: LD_ADDR_VAR 0 5
63276: PUSH
63277: LD_VAR 0 1
63281: PUSH
63282: LD_VAR 0 2
63286: PUSH
63287: LD_INT 3
63289: MINUS
63290: PUSH
63291: LD_INT 3
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: LIST
63298: PUSH
63299: LD_VAR 0 1
63303: PUSH
63304: LD_INT 4
63306: PLUS
63307: PUSH
63308: LD_VAR 0 2
63312: PUSH
63313: LD_INT 4
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: LIST
63320: PUSH
63321: LD_VAR 0 1
63325: PUSH
63326: LD_VAR 0 2
63330: PUSH
63331: LD_INT 4
63333: PLUS
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: LIST
63342: PUSH
63343: LD_VAR 0 1
63347: PUSH
63348: LD_INT 3
63350: MINUS
63351: PUSH
63352: LD_VAR 0 2
63356: PUSH
63357: LD_INT 1
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: LIST
63364: PUSH
63365: LD_VAR 0 1
63369: PUSH
63370: LD_INT 4
63372: MINUS
63373: PUSH
63374: LD_VAR 0 2
63378: PUSH
63379: LD_INT 4
63381: MINUS
63382: PUSH
63383: LD_INT 2
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: LIST
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: ST_TO_ADDR
// end ; 3 :
63398: GO 63820
63400: LD_INT 3
63402: DOUBLE
63403: EQUAL
63404: IFTRUE 63408
63406: GO 63541
63408: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63409: LD_ADDR_VAR 0 5
63413: PUSH
63414: LD_VAR 0 1
63418: PUSH
63419: LD_INT 3
63421: PLUS
63422: PUSH
63423: LD_VAR 0 2
63427: PUSH
63428: LD_INT 4
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: LIST
63435: PUSH
63436: LD_VAR 0 1
63440: PUSH
63441: LD_INT 4
63443: PLUS
63444: PUSH
63445: LD_VAR 0 2
63449: PUSH
63450: LD_INT 4
63452: PLUS
63453: PUSH
63454: LD_INT 5
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: LIST
63461: PUSH
63462: LD_VAR 0 1
63466: PUSH
63467: LD_INT 4
63469: MINUS
63470: PUSH
63471: LD_VAR 0 2
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: LIST
63483: PUSH
63484: LD_VAR 0 1
63488: PUSH
63489: LD_VAR 0 2
63493: PUSH
63494: LD_INT 4
63496: MINUS
63497: PUSH
63498: LD_INT 3
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: LIST
63505: PUSH
63506: LD_VAR 0 1
63510: PUSH
63511: LD_INT 3
63513: MINUS
63514: PUSH
63515: LD_VAR 0 2
63519: PUSH
63520: LD_INT 3
63522: MINUS
63523: PUSH
63524: LD_INT 2
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: LIST
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: ST_TO_ADDR
// end ; 4 :
63539: GO 63820
63541: LD_INT 4
63543: DOUBLE
63544: EQUAL
63545: IFTRUE 63549
63547: GO 63682
63549: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63550: LD_ADDR_VAR 0 5
63554: PUSH
63555: LD_VAR 0 1
63559: PUSH
63560: LD_VAR 0 2
63564: PUSH
63565: LD_INT 4
63567: PLUS
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: LIST
63576: PUSH
63577: LD_VAR 0 1
63581: PUSH
63582: LD_INT 3
63584: PLUS
63585: PUSH
63586: LD_VAR 0 2
63590: PUSH
63591: LD_INT 3
63593: PLUS
63594: PUSH
63595: LD_INT 5
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: LIST
63602: PUSH
63603: LD_VAR 0 1
63607: PUSH
63608: LD_INT 4
63610: PLUS
63611: PUSH
63612: LD_VAR 0 2
63616: PUSH
63617: LD_INT 4
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: LIST
63624: PUSH
63625: LD_VAR 0 1
63629: PUSH
63630: LD_VAR 0 2
63634: PUSH
63635: LD_INT 3
63637: MINUS
63638: PUSH
63639: LD_INT 3
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: LIST
63646: PUSH
63647: LD_VAR 0 1
63651: PUSH
63652: LD_INT 4
63654: MINUS
63655: PUSH
63656: LD_VAR 0 2
63660: PUSH
63661: LD_INT 4
63663: MINUS
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: LIST
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: ST_TO_ADDR
// end ; 5 :
63680: GO 63820
63682: LD_INT 5
63684: DOUBLE
63685: EQUAL
63686: IFTRUE 63690
63688: GO 63819
63690: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63691: LD_ADDR_VAR 0 5
63695: PUSH
63696: LD_VAR 0 1
63700: PUSH
63701: LD_INT 4
63703: MINUS
63704: PUSH
63705: LD_VAR 0 2
63709: PUSH
63710: LD_INT 1
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: LIST
63717: PUSH
63718: LD_VAR 0 1
63722: PUSH
63723: LD_VAR 0 2
63727: PUSH
63728: LD_INT 4
63730: MINUS
63731: PUSH
63732: LD_INT 3
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: LIST
63739: PUSH
63740: LD_VAR 0 1
63744: PUSH
63745: LD_INT 4
63747: PLUS
63748: PUSH
63749: LD_VAR 0 2
63753: PUSH
63754: LD_INT 4
63756: PLUS
63757: PUSH
63758: LD_INT 5
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: LIST
63765: PUSH
63766: LD_VAR 0 1
63770: PUSH
63771: LD_INT 3
63773: PLUS
63774: PUSH
63775: LD_VAR 0 2
63779: PUSH
63780: LD_INT 4
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: LIST
63787: PUSH
63788: LD_VAR 0 1
63792: PUSH
63793: LD_VAR 0 2
63797: PUSH
63798: LD_INT 3
63800: PLUS
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: LIST
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: ST_TO_ADDR
// end ; end ;
63817: GO 63820
63819: POP
// result := list ;
63820: LD_ADDR_VAR 0 4
63824: PUSH
63825: LD_VAR 0 5
63829: ST_TO_ADDR
// end ;
63830: LD_VAR 0 4
63834: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63835: LD_INT 0
63837: PPUSH
63838: PPUSH
63839: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63840: LD_VAR 0 1
63844: NOT
63845: PUSH
63846: LD_VAR 0 2
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: LD_INT 3
63859: PUSH
63860: LD_INT 4
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: IN
63869: NOT
63870: OR
63871: IFFALSE 63875
// exit ;
63873: GO 63967
// tmp := [ ] ;
63875: LD_ADDR_VAR 0 5
63879: PUSH
63880: EMPTY
63881: ST_TO_ADDR
// for i in units do
63882: LD_ADDR_VAR 0 4
63886: PUSH
63887: LD_VAR 0 1
63891: PUSH
63892: FOR_IN
63893: IFFALSE 63936
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63895: LD_ADDR_VAR 0 5
63899: PUSH
63900: LD_VAR 0 5
63904: PPUSH
63905: LD_VAR 0 5
63909: PUSH
63910: LD_INT 1
63912: PLUS
63913: PPUSH
63914: LD_VAR 0 4
63918: PPUSH
63919: LD_VAR 0 2
63923: PPUSH
63924: CALL_OW 259
63928: PPUSH
63929: CALL_OW 2
63933: ST_TO_ADDR
63934: GO 63892
63936: POP
63937: POP
// if not tmp then
63938: LD_VAR 0 5
63942: NOT
63943: IFFALSE 63947
// exit ;
63945: GO 63967
// result := SortListByListDesc ( units , tmp ) ;
63947: LD_ADDR_VAR 0 3
63951: PUSH
63952: LD_VAR 0 1
63956: PPUSH
63957: LD_VAR 0 5
63961: PPUSH
63962: CALL_OW 77
63966: ST_TO_ADDR
// end ;
63967: LD_VAR 0 3
63971: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63972: LD_INT 0
63974: PPUSH
63975: PPUSH
63976: PPUSH
// result := false ;
63977: LD_ADDR_VAR 0 3
63981: PUSH
63982: LD_INT 0
63984: ST_TO_ADDR
// x := GetX ( building ) ;
63985: LD_ADDR_VAR 0 4
63989: PUSH
63990: LD_VAR 0 2
63994: PPUSH
63995: CALL_OW 250
63999: ST_TO_ADDR
// y := GetY ( building ) ;
64000: LD_ADDR_VAR 0 5
64004: PUSH
64005: LD_VAR 0 2
64009: PPUSH
64010: CALL_OW 251
64014: ST_TO_ADDR
// if not building or not x or not y then
64015: LD_VAR 0 2
64019: NOT
64020: PUSH
64021: LD_VAR 0 4
64025: NOT
64026: OR
64027: PUSH
64028: LD_VAR 0 5
64032: NOT
64033: OR
64034: IFFALSE 64038
// exit ;
64036: GO 64130
// if GetTaskList ( unit ) then
64038: LD_VAR 0 1
64042: PPUSH
64043: CALL_OW 437
64047: IFFALSE 64130
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64049: LD_STRING e
64051: PUSH
64052: LD_VAR 0 1
64056: PPUSH
64057: CALL_OW 437
64061: PUSH
64062: LD_INT 1
64064: ARRAY
64065: PUSH
64066: LD_INT 1
64068: ARRAY
64069: EQUAL
64070: PUSH
64071: LD_VAR 0 4
64075: PUSH
64076: LD_VAR 0 1
64080: PPUSH
64081: CALL_OW 437
64085: PUSH
64086: LD_INT 1
64088: ARRAY
64089: PUSH
64090: LD_INT 2
64092: ARRAY
64093: EQUAL
64094: AND
64095: PUSH
64096: LD_VAR 0 5
64100: PUSH
64101: LD_VAR 0 1
64105: PPUSH
64106: CALL_OW 437
64110: PUSH
64111: LD_INT 1
64113: ARRAY
64114: PUSH
64115: LD_INT 3
64117: ARRAY
64118: EQUAL
64119: AND
64120: IFFALSE 64130
// result := true end ;
64122: LD_ADDR_VAR 0 3
64126: PUSH
64127: LD_INT 1
64129: ST_TO_ADDR
// end ;
64130: LD_VAR 0 3
64134: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64135: LD_INT 0
64137: PPUSH
// result := false ;
64138: LD_ADDR_VAR 0 4
64142: PUSH
64143: LD_INT 0
64145: ST_TO_ADDR
// if GetTaskList ( unit ) then
64146: LD_VAR 0 1
64150: PPUSH
64151: CALL_OW 437
64155: IFFALSE 64238
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64157: LD_STRING M
64159: PUSH
64160: LD_VAR 0 1
64164: PPUSH
64165: CALL_OW 437
64169: PUSH
64170: LD_INT 1
64172: ARRAY
64173: PUSH
64174: LD_INT 1
64176: ARRAY
64177: EQUAL
64178: PUSH
64179: LD_VAR 0 2
64183: PUSH
64184: LD_VAR 0 1
64188: PPUSH
64189: CALL_OW 437
64193: PUSH
64194: LD_INT 1
64196: ARRAY
64197: PUSH
64198: LD_INT 2
64200: ARRAY
64201: EQUAL
64202: AND
64203: PUSH
64204: LD_VAR 0 3
64208: PUSH
64209: LD_VAR 0 1
64213: PPUSH
64214: CALL_OW 437
64218: PUSH
64219: LD_INT 1
64221: ARRAY
64222: PUSH
64223: LD_INT 3
64225: ARRAY
64226: EQUAL
64227: AND
64228: IFFALSE 64238
// result := true ;
64230: LD_ADDR_VAR 0 4
64234: PUSH
64235: LD_INT 1
64237: ST_TO_ADDR
// end ; end ;
64238: LD_VAR 0 4
64242: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64243: LD_INT 0
64245: PPUSH
64246: PPUSH
64247: PPUSH
64248: PPUSH
// if not unit or not area then
64249: LD_VAR 0 1
64253: NOT
64254: PUSH
64255: LD_VAR 0 2
64259: NOT
64260: OR
64261: IFFALSE 64265
// exit ;
64263: GO 64429
// tmp := AreaToList ( area , i ) ;
64265: LD_ADDR_VAR 0 6
64269: PUSH
64270: LD_VAR 0 2
64274: PPUSH
64275: LD_VAR 0 5
64279: PPUSH
64280: CALL_OW 517
64284: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64285: LD_ADDR_VAR 0 5
64289: PUSH
64290: DOUBLE
64291: LD_INT 1
64293: DEC
64294: ST_TO_ADDR
64295: LD_VAR 0 6
64299: PUSH
64300: LD_INT 1
64302: ARRAY
64303: PUSH
64304: FOR_TO
64305: IFFALSE 64427
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64307: LD_ADDR_VAR 0 7
64311: PUSH
64312: LD_VAR 0 6
64316: PUSH
64317: LD_INT 1
64319: ARRAY
64320: PUSH
64321: LD_VAR 0 5
64325: ARRAY
64326: PUSH
64327: LD_VAR 0 6
64331: PUSH
64332: LD_INT 2
64334: ARRAY
64335: PUSH
64336: LD_VAR 0 5
64340: ARRAY
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64346: LD_VAR 0 7
64350: PUSH
64351: LD_INT 1
64353: ARRAY
64354: PPUSH
64355: LD_VAR 0 7
64359: PUSH
64360: LD_INT 2
64362: ARRAY
64363: PPUSH
64364: CALL_OW 428
64368: PUSH
64369: LD_INT 0
64371: EQUAL
64372: IFFALSE 64425
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64374: LD_VAR 0 1
64378: PPUSH
64379: LD_VAR 0 7
64383: PUSH
64384: LD_INT 1
64386: ARRAY
64387: PPUSH
64388: LD_VAR 0 7
64392: PUSH
64393: LD_INT 2
64395: ARRAY
64396: PPUSH
64397: LD_VAR 0 3
64401: PPUSH
64402: CALL_OW 48
// result := IsPlaced ( unit ) ;
64406: LD_ADDR_VAR 0 4
64410: PUSH
64411: LD_VAR 0 1
64415: PPUSH
64416: CALL_OW 305
64420: ST_TO_ADDR
// exit ;
64421: POP
64422: POP
64423: GO 64429
// end ; end ;
64425: GO 64304
64427: POP
64428: POP
// end ;
64429: LD_VAR 0 4
64433: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64434: LD_INT 0
64436: PPUSH
64437: PPUSH
64438: PPUSH
// if not side or side > 8 then
64439: LD_VAR 0 1
64443: NOT
64444: PUSH
64445: LD_VAR 0 1
64449: PUSH
64450: LD_INT 8
64452: GREATER
64453: OR
64454: IFFALSE 64458
// exit ;
64456: GO 64645
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64458: LD_ADDR_VAR 0 4
64462: PUSH
64463: LD_INT 22
64465: PUSH
64466: LD_VAR 0 1
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 21
64477: PUSH
64478: LD_INT 3
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PPUSH
64489: CALL_OW 69
64493: ST_TO_ADDR
// if not tmp then
64494: LD_VAR 0 4
64498: NOT
64499: IFFALSE 64503
// exit ;
64501: GO 64645
// enable_addtolog := true ;
64503: LD_ADDR_OWVAR 81
64507: PUSH
64508: LD_INT 1
64510: ST_TO_ADDR
// AddToLog ( [ ) ;
64511: LD_STRING [
64513: PPUSH
64514: CALL_OW 561
// for i in tmp do
64518: LD_ADDR_VAR 0 3
64522: PUSH
64523: LD_VAR 0 4
64527: PUSH
64528: FOR_IN
64529: IFFALSE 64636
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64531: LD_STRING [
64533: PUSH
64534: LD_VAR 0 3
64538: PPUSH
64539: CALL_OW 266
64543: STR
64544: PUSH
64545: LD_STRING , 
64547: STR
64548: PUSH
64549: LD_VAR 0 3
64553: PPUSH
64554: CALL_OW 250
64558: STR
64559: PUSH
64560: LD_STRING , 
64562: STR
64563: PUSH
64564: LD_VAR 0 3
64568: PPUSH
64569: CALL_OW 251
64573: STR
64574: PUSH
64575: LD_STRING , 
64577: STR
64578: PUSH
64579: LD_VAR 0 3
64583: PPUSH
64584: CALL_OW 254
64588: STR
64589: PUSH
64590: LD_STRING , 
64592: STR
64593: PUSH
64594: LD_VAR 0 3
64598: PPUSH
64599: LD_INT 1
64601: PPUSH
64602: CALL_OW 268
64606: STR
64607: PUSH
64608: LD_STRING , 
64610: STR
64611: PUSH
64612: LD_VAR 0 3
64616: PPUSH
64617: LD_INT 2
64619: PPUSH
64620: CALL_OW 268
64624: STR
64625: PUSH
64626: LD_STRING ],
64628: STR
64629: PPUSH
64630: CALL_OW 561
// end ;
64634: GO 64528
64636: POP
64637: POP
// AddToLog ( ]; ) ;
64638: LD_STRING ];
64640: PPUSH
64641: CALL_OW 561
// end ;
64645: LD_VAR 0 2
64649: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64650: LD_INT 0
64652: PPUSH
64653: PPUSH
64654: PPUSH
64655: PPUSH
64656: PPUSH
// if not area or not rate or not max then
64657: LD_VAR 0 1
64661: NOT
64662: PUSH
64663: LD_VAR 0 2
64667: NOT
64668: OR
64669: PUSH
64670: LD_VAR 0 4
64674: NOT
64675: OR
64676: IFFALSE 64680
// exit ;
64678: GO 64872
// while 1 do
64680: LD_INT 1
64682: IFFALSE 64872
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64684: LD_ADDR_VAR 0 9
64688: PUSH
64689: LD_VAR 0 1
64693: PPUSH
64694: LD_INT 1
64696: PPUSH
64697: CALL_OW 287
64701: PUSH
64702: LD_INT 10
64704: MUL
64705: ST_TO_ADDR
// r := rate / 10 ;
64706: LD_ADDR_VAR 0 7
64710: PUSH
64711: LD_VAR 0 2
64715: PUSH
64716: LD_INT 10
64718: DIVREAL
64719: ST_TO_ADDR
// time := 1 1$00 ;
64720: LD_ADDR_VAR 0 8
64724: PUSH
64725: LD_INT 2100
64727: ST_TO_ADDR
// if amount < min then
64728: LD_VAR 0 9
64732: PUSH
64733: LD_VAR 0 3
64737: LESS
64738: IFFALSE 64756
// r := r * 2 else
64740: LD_ADDR_VAR 0 7
64744: PUSH
64745: LD_VAR 0 7
64749: PUSH
64750: LD_INT 2
64752: MUL
64753: ST_TO_ADDR
64754: GO 64782
// if amount > max then
64756: LD_VAR 0 9
64760: PUSH
64761: LD_VAR 0 4
64765: GREATER
64766: IFFALSE 64782
// r := r / 2 ;
64768: LD_ADDR_VAR 0 7
64772: PUSH
64773: LD_VAR 0 7
64777: PUSH
64778: LD_INT 2
64780: DIVREAL
64781: ST_TO_ADDR
// time := time / r ;
64782: LD_ADDR_VAR 0 8
64786: PUSH
64787: LD_VAR 0 8
64791: PUSH
64792: LD_VAR 0 7
64796: DIVREAL
64797: ST_TO_ADDR
// if time < 0 then
64798: LD_VAR 0 8
64802: PUSH
64803: LD_INT 0
64805: LESS
64806: IFFALSE 64823
// time := time * - 1 ;
64808: LD_ADDR_VAR 0 8
64812: PUSH
64813: LD_VAR 0 8
64817: PUSH
64818: LD_INT 1
64820: NEG
64821: MUL
64822: ST_TO_ADDR
// wait ( time ) ;
64823: LD_VAR 0 8
64827: PPUSH
64828: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64832: LD_INT 35
64834: PPUSH
64835: LD_INT 875
64837: PPUSH
64838: CALL_OW 12
64842: PPUSH
64843: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64847: LD_INT 1
64849: PPUSH
64850: LD_INT 5
64852: PPUSH
64853: CALL_OW 12
64857: PPUSH
64858: LD_VAR 0 1
64862: PPUSH
64863: LD_INT 1
64865: PPUSH
64866: CALL_OW 55
// end ;
64870: GO 64680
// end ;
64872: LD_VAR 0 5
64876: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64877: LD_INT 0
64879: PPUSH
64880: PPUSH
64881: PPUSH
64882: PPUSH
64883: PPUSH
64884: PPUSH
64885: PPUSH
64886: PPUSH
// if not turrets or not factories then
64887: LD_VAR 0 1
64891: NOT
64892: PUSH
64893: LD_VAR 0 2
64897: NOT
64898: OR
64899: IFFALSE 64903
// exit ;
64901: GO 65210
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64903: LD_ADDR_VAR 0 10
64907: PUSH
64908: LD_INT 5
64910: PUSH
64911: LD_INT 6
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 2
64920: PUSH
64921: LD_INT 4
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 3
64930: PUSH
64931: LD_INT 5
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 24
64945: PUSH
64946: LD_INT 25
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 23
64955: PUSH
64956: LD_INT 27
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 42
64969: PUSH
64970: LD_INT 43
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 44
64979: PUSH
64980: LD_INT 46
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 45
64989: PUSH
64990: LD_INT 47
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: LIST
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: LIST
65006: ST_TO_ADDR
// result := [ ] ;
65007: LD_ADDR_VAR 0 3
65011: PUSH
65012: EMPTY
65013: ST_TO_ADDR
// for i in turrets do
65014: LD_ADDR_VAR 0 4
65018: PUSH
65019: LD_VAR 0 1
65023: PUSH
65024: FOR_IN
65025: IFFALSE 65208
// begin nat := GetNation ( i ) ;
65027: LD_ADDR_VAR 0 7
65031: PUSH
65032: LD_VAR 0 4
65036: PPUSH
65037: CALL_OW 248
65041: ST_TO_ADDR
// weapon := 0 ;
65042: LD_ADDR_VAR 0 8
65046: PUSH
65047: LD_INT 0
65049: ST_TO_ADDR
// if not nat then
65050: LD_VAR 0 7
65054: NOT
65055: IFFALSE 65059
// continue ;
65057: GO 65024
// for j in list [ nat ] do
65059: LD_ADDR_VAR 0 5
65063: PUSH
65064: LD_VAR 0 10
65068: PUSH
65069: LD_VAR 0 7
65073: ARRAY
65074: PUSH
65075: FOR_IN
65076: IFFALSE 65117
// if GetBWeapon ( i ) = j [ 1 ] then
65078: LD_VAR 0 4
65082: PPUSH
65083: CALL_OW 269
65087: PUSH
65088: LD_VAR 0 5
65092: PUSH
65093: LD_INT 1
65095: ARRAY
65096: EQUAL
65097: IFFALSE 65115
// begin weapon := j [ 2 ] ;
65099: LD_ADDR_VAR 0 8
65103: PUSH
65104: LD_VAR 0 5
65108: PUSH
65109: LD_INT 2
65111: ARRAY
65112: ST_TO_ADDR
// break ;
65113: GO 65117
// end ;
65115: GO 65075
65117: POP
65118: POP
// if not weapon then
65119: LD_VAR 0 8
65123: NOT
65124: IFFALSE 65128
// continue ;
65126: GO 65024
// for k in factories do
65128: LD_ADDR_VAR 0 6
65132: PUSH
65133: LD_VAR 0 2
65137: PUSH
65138: FOR_IN
65139: IFFALSE 65204
// begin weapons := AvailableWeaponList ( k ) ;
65141: LD_ADDR_VAR 0 9
65145: PUSH
65146: LD_VAR 0 6
65150: PPUSH
65151: CALL_OW 478
65155: ST_TO_ADDR
// if not weapons then
65156: LD_VAR 0 9
65160: NOT
65161: IFFALSE 65165
// continue ;
65163: GO 65138
// if weapon in weapons then
65165: LD_VAR 0 8
65169: PUSH
65170: LD_VAR 0 9
65174: IN
65175: IFFALSE 65202
// begin result := [ i , weapon ] ;
65177: LD_ADDR_VAR 0 3
65181: PUSH
65182: LD_VAR 0 4
65186: PUSH
65187: LD_VAR 0 8
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: ST_TO_ADDR
// exit ;
65196: POP
65197: POP
65198: POP
65199: POP
65200: GO 65210
// end ; end ;
65202: GO 65138
65204: POP
65205: POP
// end ;
65206: GO 65024
65208: POP
65209: POP
// end ;
65210: LD_VAR 0 3
65214: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65215: LD_INT 0
65217: PPUSH
// if not side or side > 8 then
65218: LD_VAR 0 3
65222: NOT
65223: PUSH
65224: LD_VAR 0 3
65228: PUSH
65229: LD_INT 8
65231: GREATER
65232: OR
65233: IFFALSE 65237
// exit ;
65235: GO 65296
// if not range then
65237: LD_VAR 0 4
65241: NOT
65242: IFFALSE 65253
// range := - 12 ;
65244: LD_ADDR_VAR 0 4
65248: PUSH
65249: LD_INT 12
65251: NEG
65252: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65253: LD_VAR 0 1
65257: PPUSH
65258: LD_VAR 0 2
65262: PPUSH
65263: LD_VAR 0 3
65267: PPUSH
65268: LD_VAR 0 4
65272: PPUSH
65273: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65277: LD_VAR 0 1
65281: PPUSH
65282: LD_VAR 0 2
65286: PPUSH
65287: LD_VAR 0 3
65291: PPUSH
65292: CALL_OW 331
// end ;
65296: LD_VAR 0 5
65300: RET
// export function Video ( mode ) ; begin
65301: LD_INT 0
65303: PPUSH
// ingame_video = mode ;
65304: LD_ADDR_OWVAR 52
65308: PUSH
65309: LD_VAR 0 1
65313: ST_TO_ADDR
// interface_hidden = mode ;
65314: LD_ADDR_OWVAR 54
65318: PUSH
65319: LD_VAR 0 1
65323: ST_TO_ADDR
// end ;
65324: LD_VAR 0 2
65328: RET
// export function Join ( array , element ) ; begin
65329: LD_INT 0
65331: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65332: LD_ADDR_VAR 0 3
65336: PUSH
65337: LD_VAR 0 1
65341: PPUSH
65342: LD_VAR 0 1
65346: PUSH
65347: LD_INT 1
65349: PLUS
65350: PPUSH
65351: LD_VAR 0 2
65355: PPUSH
65356: CALL_OW 1
65360: ST_TO_ADDR
// end ;
65361: LD_VAR 0 3
65365: RET
// export function JoinUnion ( array , element ) ; begin
65366: LD_INT 0
65368: PPUSH
// result := array union element ;
65369: LD_ADDR_VAR 0 3
65373: PUSH
65374: LD_VAR 0 1
65378: PUSH
65379: LD_VAR 0 2
65383: UNION
65384: ST_TO_ADDR
// end ;
65385: LD_VAR 0 3
65389: RET
// export function GetBehemoths ( side ) ; begin
65390: LD_INT 0
65392: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65393: LD_ADDR_VAR 0 2
65397: PUSH
65398: LD_INT 22
65400: PUSH
65401: LD_VAR 0 1
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 31
65412: PUSH
65413: LD_INT 25
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PPUSH
65424: CALL_OW 69
65428: ST_TO_ADDR
// end ;
65429: LD_VAR 0 2
65433: RET
// export function Shuffle ( array ) ; var i , index ; begin
65434: LD_INT 0
65436: PPUSH
65437: PPUSH
65438: PPUSH
// result := [ ] ;
65439: LD_ADDR_VAR 0 2
65443: PUSH
65444: EMPTY
65445: ST_TO_ADDR
// if not array then
65446: LD_VAR 0 1
65450: NOT
65451: IFFALSE 65455
// exit ;
65453: GO 65554
// Randomize ;
65455: CALL_OW 10
// for i = array downto 1 do
65459: LD_ADDR_VAR 0 3
65463: PUSH
65464: DOUBLE
65465: LD_VAR 0 1
65469: INC
65470: ST_TO_ADDR
65471: LD_INT 1
65473: PUSH
65474: FOR_DOWNTO
65475: IFFALSE 65552
// begin index := rand ( 1 , array ) ;
65477: LD_ADDR_VAR 0 4
65481: PUSH
65482: LD_INT 1
65484: PPUSH
65485: LD_VAR 0 1
65489: PPUSH
65490: CALL_OW 12
65494: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65495: LD_ADDR_VAR 0 2
65499: PUSH
65500: LD_VAR 0 2
65504: PPUSH
65505: LD_VAR 0 2
65509: PUSH
65510: LD_INT 1
65512: PLUS
65513: PPUSH
65514: LD_VAR 0 1
65518: PUSH
65519: LD_VAR 0 4
65523: ARRAY
65524: PPUSH
65525: CALL_OW 2
65529: ST_TO_ADDR
// array := Delete ( array , index ) ;
65530: LD_ADDR_VAR 0 1
65534: PUSH
65535: LD_VAR 0 1
65539: PPUSH
65540: LD_VAR 0 4
65544: PPUSH
65545: CALL_OW 3
65549: ST_TO_ADDR
// end ;
65550: GO 65474
65552: POP
65553: POP
// end ;
65554: LD_VAR 0 2
65558: RET
// export function GetBaseMaterials ( base ) ; begin
65559: LD_INT 0
65561: PPUSH
// result := [ 0 , 0 , 0 ] ;
65562: LD_ADDR_VAR 0 2
65566: PUSH
65567: LD_INT 0
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: LD_INT 0
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: LIST
65580: ST_TO_ADDR
// if not base then
65581: LD_VAR 0 1
65585: NOT
65586: IFFALSE 65590
// exit ;
65588: GO 65639
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65590: LD_ADDR_VAR 0 2
65594: PUSH
65595: LD_VAR 0 1
65599: PPUSH
65600: LD_INT 1
65602: PPUSH
65603: CALL_OW 275
65607: PUSH
65608: LD_VAR 0 1
65612: PPUSH
65613: LD_INT 2
65615: PPUSH
65616: CALL_OW 275
65620: PUSH
65621: LD_VAR 0 1
65625: PPUSH
65626: LD_INT 3
65628: PPUSH
65629: CALL_OW 275
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: LIST
65638: ST_TO_ADDR
// end ;
65639: LD_VAR 0 2
65643: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65644: LD_INT 0
65646: PPUSH
65647: PPUSH
// result := array ;
65648: LD_ADDR_VAR 0 3
65652: PUSH
65653: LD_VAR 0 1
65657: ST_TO_ADDR
// if size > 0 then
65658: LD_VAR 0 2
65662: PUSH
65663: LD_INT 0
65665: GREATER
65666: IFFALSE 65712
// for i := array downto size do
65668: LD_ADDR_VAR 0 4
65672: PUSH
65673: DOUBLE
65674: LD_VAR 0 1
65678: INC
65679: ST_TO_ADDR
65680: LD_VAR 0 2
65684: PUSH
65685: FOR_DOWNTO
65686: IFFALSE 65710
// result := Delete ( result , result ) ;
65688: LD_ADDR_VAR 0 3
65692: PUSH
65693: LD_VAR 0 3
65697: PPUSH
65698: LD_VAR 0 3
65702: PPUSH
65703: CALL_OW 3
65707: ST_TO_ADDR
65708: GO 65685
65710: POP
65711: POP
// end ;
65712: LD_VAR 0 3
65716: RET
// export function ComExit ( unit ) ; var tmp ; begin
65717: LD_INT 0
65719: PPUSH
65720: PPUSH
// if not IsInUnit ( unit ) then
65721: LD_VAR 0 1
65725: PPUSH
65726: CALL_OW 310
65730: NOT
65731: IFFALSE 65735
// exit ;
65733: GO 65795
// tmp := IsInUnit ( unit ) ;
65735: LD_ADDR_VAR 0 3
65739: PUSH
65740: LD_VAR 0 1
65744: PPUSH
65745: CALL_OW 310
65749: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65750: LD_VAR 0 3
65754: PPUSH
65755: CALL_OW 247
65759: PUSH
65760: LD_INT 2
65762: EQUAL
65763: IFFALSE 65776
// ComExitVehicle ( unit ) else
65765: LD_VAR 0 1
65769: PPUSH
65770: CALL_OW 121
65774: GO 65785
// ComExitBuilding ( unit ) ;
65776: LD_VAR 0 1
65780: PPUSH
65781: CALL_OW 122
// result := tmp ;
65785: LD_ADDR_VAR 0 2
65789: PUSH
65790: LD_VAR 0 3
65794: ST_TO_ADDR
// end ;
65795: LD_VAR 0 2
65799: RET
// export function ComExitAll ( units ) ; var i ; begin
65800: LD_INT 0
65802: PPUSH
65803: PPUSH
// if not units then
65804: LD_VAR 0 1
65808: NOT
65809: IFFALSE 65813
// exit ;
65811: GO 65839
// for i in units do
65813: LD_ADDR_VAR 0 3
65817: PUSH
65818: LD_VAR 0 1
65822: PUSH
65823: FOR_IN
65824: IFFALSE 65837
// ComExit ( i ) ;
65826: LD_VAR 0 3
65830: PPUSH
65831: CALL 65717 0 1
65835: GO 65823
65837: POP
65838: POP
// end ;
65839: LD_VAR 0 2
65843: RET
// export function ResetHc ; begin
65844: LD_INT 0
65846: PPUSH
// InitHc ;
65847: CALL_OW 19
// hc_importance := 0 ;
65851: LD_ADDR_OWVAR 32
65855: PUSH
65856: LD_INT 0
65858: ST_TO_ADDR
// end ;
65859: LD_VAR 0 1
65863: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65864: LD_INT 0
65866: PPUSH
65867: PPUSH
65868: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65869: LD_ADDR_VAR 0 6
65873: PUSH
65874: LD_VAR 0 1
65878: PUSH
65879: LD_VAR 0 3
65883: PLUS
65884: PUSH
65885: LD_INT 2
65887: DIV
65888: ST_TO_ADDR
// if _x < 0 then
65889: LD_VAR 0 6
65893: PUSH
65894: LD_INT 0
65896: LESS
65897: IFFALSE 65914
// _x := _x * - 1 ;
65899: LD_ADDR_VAR 0 6
65903: PUSH
65904: LD_VAR 0 6
65908: PUSH
65909: LD_INT 1
65911: NEG
65912: MUL
65913: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65914: LD_ADDR_VAR 0 7
65918: PUSH
65919: LD_VAR 0 2
65923: PUSH
65924: LD_VAR 0 4
65928: PLUS
65929: PUSH
65930: LD_INT 2
65932: DIV
65933: ST_TO_ADDR
// if _y < 0 then
65934: LD_VAR 0 7
65938: PUSH
65939: LD_INT 0
65941: LESS
65942: IFFALSE 65959
// _y := _y * - 1 ;
65944: LD_ADDR_VAR 0 7
65948: PUSH
65949: LD_VAR 0 7
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: MUL
65958: ST_TO_ADDR
// result := [ _x , _y ] ;
65959: LD_ADDR_VAR 0 5
65963: PUSH
65964: LD_VAR 0 6
65968: PUSH
65969: LD_VAR 0 7
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: ST_TO_ADDR
// end ;
65978: LD_VAR 0 5
65982: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65983: LD_INT 0
65985: PPUSH
65986: PPUSH
65987: PPUSH
65988: PPUSH
// task := GetTaskList ( unit ) ;
65989: LD_ADDR_VAR 0 7
65993: PUSH
65994: LD_VAR 0 1
65998: PPUSH
65999: CALL_OW 437
66003: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66004: LD_VAR 0 7
66008: NOT
66009: PUSH
66010: LD_VAR 0 1
66014: PPUSH
66015: LD_VAR 0 2
66019: PPUSH
66020: CALL_OW 308
66024: NOT
66025: AND
66026: IFFALSE 66030
// exit ;
66028: GO 66148
// if IsInArea ( unit , area ) then
66030: LD_VAR 0 1
66034: PPUSH
66035: LD_VAR 0 2
66039: PPUSH
66040: CALL_OW 308
66044: IFFALSE 66062
// begin ComMoveToArea ( unit , goAway ) ;
66046: LD_VAR 0 1
66050: PPUSH
66051: LD_VAR 0 3
66055: PPUSH
66056: CALL_OW 113
// exit ;
66060: GO 66148
// end ; if task [ 1 ] [ 1 ] <> M then
66062: LD_VAR 0 7
66066: PUSH
66067: LD_INT 1
66069: ARRAY
66070: PUSH
66071: LD_INT 1
66073: ARRAY
66074: PUSH
66075: LD_STRING M
66077: NONEQUAL
66078: IFFALSE 66082
// exit ;
66080: GO 66148
// x := task [ 1 ] [ 2 ] ;
66082: LD_ADDR_VAR 0 5
66086: PUSH
66087: LD_VAR 0 7
66091: PUSH
66092: LD_INT 1
66094: ARRAY
66095: PUSH
66096: LD_INT 2
66098: ARRAY
66099: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66100: LD_ADDR_VAR 0 6
66104: PUSH
66105: LD_VAR 0 7
66109: PUSH
66110: LD_INT 1
66112: ARRAY
66113: PUSH
66114: LD_INT 3
66116: ARRAY
66117: ST_TO_ADDR
// if InArea ( x , y , area ) then
66118: LD_VAR 0 5
66122: PPUSH
66123: LD_VAR 0 6
66127: PPUSH
66128: LD_VAR 0 2
66132: PPUSH
66133: CALL_OW 309
66137: IFFALSE 66148
// ComStop ( unit ) ;
66139: LD_VAR 0 1
66143: PPUSH
66144: CALL_OW 141
// end ;
66148: LD_VAR 0 4
66152: RET
// export function Abs ( value ) ; begin
66153: LD_INT 0
66155: PPUSH
// result := value ;
66156: LD_ADDR_VAR 0 2
66160: PUSH
66161: LD_VAR 0 1
66165: ST_TO_ADDR
// if value < 0 then
66166: LD_VAR 0 1
66170: PUSH
66171: LD_INT 0
66173: LESS
66174: IFFALSE 66191
// result := value * - 1 ;
66176: LD_ADDR_VAR 0 2
66180: PUSH
66181: LD_VAR 0 1
66185: PUSH
66186: LD_INT 1
66188: NEG
66189: MUL
66190: ST_TO_ADDR
// end ;
66191: LD_VAR 0 2
66195: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66196: LD_INT 0
66198: PPUSH
66199: PPUSH
66200: PPUSH
66201: PPUSH
66202: PPUSH
66203: PPUSH
66204: PPUSH
66205: PPUSH
// if not unit or not building then
66206: LD_VAR 0 1
66210: NOT
66211: PUSH
66212: LD_VAR 0 2
66216: NOT
66217: OR
66218: IFFALSE 66222
// exit ;
66220: GO 66448
// x := GetX ( building ) ;
66222: LD_ADDR_VAR 0 4
66226: PUSH
66227: LD_VAR 0 2
66231: PPUSH
66232: CALL_OW 250
66236: ST_TO_ADDR
// y := GetY ( building ) ;
66237: LD_ADDR_VAR 0 6
66241: PUSH
66242: LD_VAR 0 2
66246: PPUSH
66247: CALL_OW 251
66251: ST_TO_ADDR
// d := GetDir ( building ) ;
66252: LD_ADDR_VAR 0 8
66256: PUSH
66257: LD_VAR 0 2
66261: PPUSH
66262: CALL_OW 254
66266: ST_TO_ADDR
// r := 4 ;
66267: LD_ADDR_VAR 0 9
66271: PUSH
66272: LD_INT 4
66274: ST_TO_ADDR
// for i := 1 to 5 do
66275: LD_ADDR_VAR 0 10
66279: PUSH
66280: DOUBLE
66281: LD_INT 1
66283: DEC
66284: ST_TO_ADDR
66285: LD_INT 5
66287: PUSH
66288: FOR_TO
66289: IFFALSE 66446
// begin _x := ShiftX ( x , d , r + i ) ;
66291: LD_ADDR_VAR 0 5
66295: PUSH
66296: LD_VAR 0 4
66300: PPUSH
66301: LD_VAR 0 8
66305: PPUSH
66306: LD_VAR 0 9
66310: PUSH
66311: LD_VAR 0 10
66315: PLUS
66316: PPUSH
66317: CALL_OW 272
66321: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66322: LD_ADDR_VAR 0 7
66326: PUSH
66327: LD_VAR 0 6
66331: PPUSH
66332: LD_VAR 0 8
66336: PPUSH
66337: LD_VAR 0 9
66341: PUSH
66342: LD_VAR 0 10
66346: PLUS
66347: PPUSH
66348: CALL_OW 273
66352: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66353: LD_VAR 0 5
66357: PPUSH
66358: LD_VAR 0 7
66362: PPUSH
66363: CALL_OW 488
66367: PUSH
66368: LD_VAR 0 5
66372: PPUSH
66373: LD_VAR 0 7
66377: PPUSH
66378: CALL_OW 428
66382: PPUSH
66383: CALL_OW 247
66387: PUSH
66388: LD_INT 3
66390: PUSH
66391: LD_INT 2
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: IN
66398: NOT
66399: AND
66400: IFFALSE 66444
// begin ComMoveXY ( unit , _x , _y ) ;
66402: LD_VAR 0 1
66406: PPUSH
66407: LD_VAR 0 5
66411: PPUSH
66412: LD_VAR 0 7
66416: PPUSH
66417: CALL_OW 111
// result := [ _x , _y ] ;
66421: LD_ADDR_VAR 0 3
66425: PUSH
66426: LD_VAR 0 5
66430: PUSH
66431: LD_VAR 0 7
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: ST_TO_ADDR
// exit ;
66440: POP
66441: POP
66442: GO 66448
// end ; end ;
66444: GO 66288
66446: POP
66447: POP
// end ;
66448: LD_VAR 0 3
66452: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66453: LD_INT 0
66455: PPUSH
66456: PPUSH
66457: PPUSH
// result := 0 ;
66458: LD_ADDR_VAR 0 3
66462: PUSH
66463: LD_INT 0
66465: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66466: LD_VAR 0 1
66470: PUSH
66471: LD_INT 0
66473: LESS
66474: PUSH
66475: LD_VAR 0 1
66479: PUSH
66480: LD_INT 8
66482: GREATER
66483: OR
66484: PUSH
66485: LD_VAR 0 2
66489: PUSH
66490: LD_INT 0
66492: LESS
66493: OR
66494: PUSH
66495: LD_VAR 0 2
66499: PUSH
66500: LD_INT 8
66502: GREATER
66503: OR
66504: IFFALSE 66508
// exit ;
66506: GO 66583
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66508: LD_ADDR_VAR 0 4
66512: PUSH
66513: LD_INT 22
66515: PUSH
66516: LD_VAR 0 2
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PPUSH
66525: CALL_OW 69
66529: PUSH
66530: FOR_IN
66531: IFFALSE 66581
// begin un := UnitShoot ( i ) ;
66533: LD_ADDR_VAR 0 5
66537: PUSH
66538: LD_VAR 0 4
66542: PPUSH
66543: CALL_OW 504
66547: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66548: LD_VAR 0 5
66552: PPUSH
66553: CALL_OW 255
66557: PUSH
66558: LD_VAR 0 1
66562: EQUAL
66563: IFFALSE 66579
// begin result := un ;
66565: LD_ADDR_VAR 0 3
66569: PUSH
66570: LD_VAR 0 5
66574: ST_TO_ADDR
// exit ;
66575: POP
66576: POP
66577: GO 66583
// end ; end ;
66579: GO 66530
66581: POP
66582: POP
// end ;
66583: LD_VAR 0 3
66587: RET
// export function GetCargoBay ( units ) ; begin
66588: LD_INT 0
66590: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66591: LD_ADDR_VAR 0 2
66595: PUSH
66596: LD_VAR 0 1
66600: PPUSH
66601: LD_INT 2
66603: PUSH
66604: LD_INT 34
66606: PUSH
66607: LD_INT 12
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 34
66616: PUSH
66617: LD_INT 51
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 34
66626: PUSH
66627: LD_INT 32
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 34
66636: PUSH
66637: LD_EXP 26
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: PPUSH
66653: CALL_OW 72
66657: ST_TO_ADDR
// end ;
66658: LD_VAR 0 2
66662: RET
// export function Negate ( value ) ; begin
66663: LD_INT 0
66665: PPUSH
// result := not value ;
66666: LD_ADDR_VAR 0 2
66670: PUSH
66671: LD_VAR 0 1
66675: NOT
66676: ST_TO_ADDR
// end ;
66677: LD_VAR 0 2
66681: RET
// export function Inc ( value ) ; begin
66682: LD_INT 0
66684: PPUSH
// result := value + 1 ;
66685: LD_ADDR_VAR 0 2
66689: PUSH
66690: LD_VAR 0 1
66694: PUSH
66695: LD_INT 1
66697: PLUS
66698: ST_TO_ADDR
// end ;
66699: LD_VAR 0 2
66703: RET
// export function Dec ( value ) ; begin
66704: LD_INT 0
66706: PPUSH
// result := value - 1 ;
66707: LD_ADDR_VAR 0 2
66711: PUSH
66712: LD_VAR 0 1
66716: PUSH
66717: LD_INT 1
66719: MINUS
66720: ST_TO_ADDR
// end ;
66721: LD_VAR 0 2
66725: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66726: LD_INT 0
66728: PPUSH
66729: PPUSH
66730: PPUSH
66731: PPUSH
66732: PPUSH
66733: PPUSH
66734: PPUSH
66735: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66736: LD_VAR 0 1
66740: PPUSH
66741: LD_VAR 0 2
66745: PPUSH
66746: CALL_OW 488
66750: NOT
66751: PUSH
66752: LD_VAR 0 3
66756: PPUSH
66757: LD_VAR 0 4
66761: PPUSH
66762: CALL_OW 488
66766: NOT
66767: OR
66768: IFFALSE 66781
// begin result := - 1 ;
66770: LD_ADDR_VAR 0 5
66774: PUSH
66775: LD_INT 1
66777: NEG
66778: ST_TO_ADDR
// exit ;
66779: GO 67016
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66781: LD_ADDR_VAR 0 12
66785: PUSH
66786: LD_VAR 0 1
66790: PPUSH
66791: LD_VAR 0 2
66795: PPUSH
66796: LD_VAR 0 3
66800: PPUSH
66801: LD_VAR 0 4
66805: PPUSH
66806: CALL 65864 0 4
66810: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66811: LD_ADDR_VAR 0 11
66815: PUSH
66816: LD_VAR 0 1
66820: PPUSH
66821: LD_VAR 0 2
66825: PPUSH
66826: LD_VAR 0 12
66830: PUSH
66831: LD_INT 1
66833: ARRAY
66834: PPUSH
66835: LD_VAR 0 12
66839: PUSH
66840: LD_INT 2
66842: ARRAY
66843: PPUSH
66844: CALL_OW 298
66848: ST_TO_ADDR
// distance := 9999 ;
66849: LD_ADDR_VAR 0 10
66853: PUSH
66854: LD_INT 9999
66856: ST_TO_ADDR
// for i := 0 to 5 do
66857: LD_ADDR_VAR 0 6
66861: PUSH
66862: DOUBLE
66863: LD_INT 0
66865: DEC
66866: ST_TO_ADDR
66867: LD_INT 5
66869: PUSH
66870: FOR_TO
66871: IFFALSE 67014
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66873: LD_ADDR_VAR 0 7
66877: PUSH
66878: LD_VAR 0 1
66882: PPUSH
66883: LD_VAR 0 6
66887: PPUSH
66888: LD_VAR 0 11
66892: PPUSH
66893: CALL_OW 272
66897: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66898: LD_ADDR_VAR 0 8
66902: PUSH
66903: LD_VAR 0 2
66907: PPUSH
66908: LD_VAR 0 6
66912: PPUSH
66913: LD_VAR 0 11
66917: PPUSH
66918: CALL_OW 273
66922: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66923: LD_VAR 0 7
66927: PPUSH
66928: LD_VAR 0 8
66932: PPUSH
66933: CALL_OW 488
66937: NOT
66938: IFFALSE 66942
// continue ;
66940: GO 66870
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66942: LD_ADDR_VAR 0 9
66946: PUSH
66947: LD_VAR 0 12
66951: PUSH
66952: LD_INT 1
66954: ARRAY
66955: PPUSH
66956: LD_VAR 0 12
66960: PUSH
66961: LD_INT 2
66963: ARRAY
66964: PPUSH
66965: LD_VAR 0 7
66969: PPUSH
66970: LD_VAR 0 8
66974: PPUSH
66975: CALL_OW 298
66979: ST_TO_ADDR
// if tmp < distance then
66980: LD_VAR 0 9
66984: PUSH
66985: LD_VAR 0 10
66989: LESS
66990: IFFALSE 67012
// begin result := i ;
66992: LD_ADDR_VAR 0 5
66996: PUSH
66997: LD_VAR 0 6
67001: ST_TO_ADDR
// distance := tmp ;
67002: LD_ADDR_VAR 0 10
67006: PUSH
67007: LD_VAR 0 9
67011: ST_TO_ADDR
// end ; end ;
67012: GO 66870
67014: POP
67015: POP
// end ;
67016: LD_VAR 0 5
67020: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67021: LD_INT 0
67023: PPUSH
67024: PPUSH
// if not driver or not IsInUnit ( driver ) then
67025: LD_VAR 0 1
67029: NOT
67030: PUSH
67031: LD_VAR 0 1
67035: PPUSH
67036: CALL_OW 310
67040: NOT
67041: OR
67042: IFFALSE 67046
// exit ;
67044: GO 67136
// vehicle := IsInUnit ( driver ) ;
67046: LD_ADDR_VAR 0 3
67050: PUSH
67051: LD_VAR 0 1
67055: PPUSH
67056: CALL_OW 310
67060: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67061: LD_VAR 0 1
67065: PPUSH
67066: LD_STRING \
67068: PUSH
67069: LD_INT 0
67071: PUSH
67072: LD_INT 0
67074: PUSH
67075: LD_INT 0
67077: PUSH
67078: LD_INT 0
67080: PUSH
67081: LD_INT 0
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: PUSH
67096: LD_STRING E
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: LD_INT 0
67104: PUSH
67105: LD_VAR 0 3
67109: PUSH
67110: LD_INT 0
67112: PUSH
67113: LD_INT 0
67115: PUSH
67116: LD_INT 0
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PPUSH
67132: CALL_OW 446
// end ;
67136: LD_VAR 0 2
67140: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67141: LD_INT 0
67143: PPUSH
67144: PPUSH
// if not driver or not IsInUnit ( driver ) then
67145: LD_VAR 0 1
67149: NOT
67150: PUSH
67151: LD_VAR 0 1
67155: PPUSH
67156: CALL_OW 310
67160: NOT
67161: OR
67162: IFFALSE 67166
// exit ;
67164: GO 67256
// vehicle := IsInUnit ( driver ) ;
67166: LD_ADDR_VAR 0 3
67170: PUSH
67171: LD_VAR 0 1
67175: PPUSH
67176: CALL_OW 310
67180: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67181: LD_VAR 0 1
67185: PPUSH
67186: LD_STRING \
67188: PUSH
67189: LD_INT 0
67191: PUSH
67192: LD_INT 0
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: LD_INT 0
67200: PUSH
67201: LD_INT 0
67203: PUSH
67204: LD_INT 0
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: PUSH
67216: LD_STRING E
67218: PUSH
67219: LD_INT 0
67221: PUSH
67222: LD_INT 0
67224: PUSH
67225: LD_VAR 0 3
67229: PUSH
67230: LD_INT 0
67232: PUSH
67233: LD_INT 0
67235: PUSH
67236: LD_INT 0
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PPUSH
67252: CALL_OW 447
// end ;
67256: LD_VAR 0 2
67260: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67261: LD_INT 0
67263: PPUSH
67264: PPUSH
67265: PPUSH
// tmp := [ ] ;
67266: LD_ADDR_VAR 0 5
67270: PUSH
67271: EMPTY
67272: ST_TO_ADDR
// for i in units do
67273: LD_ADDR_VAR 0 4
67277: PUSH
67278: LD_VAR 0 1
67282: PUSH
67283: FOR_IN
67284: IFFALSE 67322
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67286: LD_ADDR_VAR 0 5
67290: PUSH
67291: LD_VAR 0 5
67295: PPUSH
67296: LD_VAR 0 5
67300: PUSH
67301: LD_INT 1
67303: PLUS
67304: PPUSH
67305: LD_VAR 0 4
67309: PPUSH
67310: CALL_OW 256
67314: PPUSH
67315: CALL_OW 2
67319: ST_TO_ADDR
67320: GO 67283
67322: POP
67323: POP
// if not tmp then
67324: LD_VAR 0 5
67328: NOT
67329: IFFALSE 67333
// exit ;
67331: GO 67381
// if asc then
67333: LD_VAR 0 2
67337: IFFALSE 67361
// result := SortListByListAsc ( units , tmp ) else
67339: LD_ADDR_VAR 0 3
67343: PUSH
67344: LD_VAR 0 1
67348: PPUSH
67349: LD_VAR 0 5
67353: PPUSH
67354: CALL_OW 76
67358: ST_TO_ADDR
67359: GO 67381
// result := SortListByListDesc ( units , tmp ) ;
67361: LD_ADDR_VAR 0 3
67365: PUSH
67366: LD_VAR 0 1
67370: PPUSH
67371: LD_VAR 0 5
67375: PPUSH
67376: CALL_OW 77
67380: ST_TO_ADDR
// end ;
67381: LD_VAR 0 3
67385: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67386: LD_INT 0
67388: PPUSH
67389: PPUSH
// task := GetTaskList ( mech ) ;
67390: LD_ADDR_VAR 0 4
67394: PUSH
67395: LD_VAR 0 1
67399: PPUSH
67400: CALL_OW 437
67404: ST_TO_ADDR
// if not task then
67405: LD_VAR 0 4
67409: NOT
67410: IFFALSE 67414
// exit ;
67412: GO 67456
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67414: LD_ADDR_VAR 0 3
67418: PUSH
67419: LD_VAR 0 4
67423: PUSH
67424: LD_INT 1
67426: ARRAY
67427: PUSH
67428: LD_INT 1
67430: ARRAY
67431: PUSH
67432: LD_STRING r
67434: EQUAL
67435: PUSH
67436: LD_VAR 0 4
67440: PUSH
67441: LD_INT 1
67443: ARRAY
67444: PUSH
67445: LD_INT 4
67447: ARRAY
67448: PUSH
67449: LD_VAR 0 2
67453: EQUAL
67454: AND
67455: ST_TO_ADDR
// end ;
67456: LD_VAR 0 3
67460: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67461: LD_INT 0
67463: PPUSH
// SetDir ( unit , d ) ;
67464: LD_VAR 0 1
67468: PPUSH
67469: LD_VAR 0 4
67473: PPUSH
67474: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67478: LD_VAR 0 1
67482: PPUSH
67483: LD_VAR 0 2
67487: PPUSH
67488: LD_VAR 0 3
67492: PPUSH
67493: LD_VAR 0 5
67497: PPUSH
67498: CALL_OW 48
// end ;
67502: LD_VAR 0 6
67506: RET
// export function ToNaturalNumber ( number ) ; begin
67507: LD_INT 0
67509: PPUSH
// result := number div 1 ;
67510: LD_ADDR_VAR 0 2
67514: PUSH
67515: LD_VAR 0 1
67519: PUSH
67520: LD_INT 1
67522: DIV
67523: ST_TO_ADDR
// if number < 0 then
67524: LD_VAR 0 1
67528: PUSH
67529: LD_INT 0
67531: LESS
67532: IFFALSE 67542
// result := 0 ;
67534: LD_ADDR_VAR 0 2
67538: PUSH
67539: LD_INT 0
67541: ST_TO_ADDR
// end ;
67542: LD_VAR 0 2
67546: RET
// export function SortByClass ( units , class ) ; var un ; begin
67547: LD_INT 0
67549: PPUSH
67550: PPUSH
// if not units or not class then
67551: LD_VAR 0 1
67555: NOT
67556: PUSH
67557: LD_VAR 0 2
67561: NOT
67562: OR
67563: IFFALSE 67567
// exit ;
67565: GO 67662
// result := [ ] ;
67567: LD_ADDR_VAR 0 3
67571: PUSH
67572: EMPTY
67573: ST_TO_ADDR
// for un in units do
67574: LD_ADDR_VAR 0 4
67578: PUSH
67579: LD_VAR 0 1
67583: PUSH
67584: FOR_IN
67585: IFFALSE 67660
// if GetClass ( un ) = class then
67587: LD_VAR 0 4
67591: PPUSH
67592: CALL_OW 257
67596: PUSH
67597: LD_VAR 0 2
67601: EQUAL
67602: IFFALSE 67629
// result := Insert ( result , 1 , un ) else
67604: LD_ADDR_VAR 0 3
67608: PUSH
67609: LD_VAR 0 3
67613: PPUSH
67614: LD_INT 1
67616: PPUSH
67617: LD_VAR 0 4
67621: PPUSH
67622: CALL_OW 2
67626: ST_TO_ADDR
67627: GO 67658
// result := Replace ( result , result + 1 , un ) ;
67629: LD_ADDR_VAR 0 3
67633: PUSH
67634: LD_VAR 0 3
67638: PPUSH
67639: LD_VAR 0 3
67643: PUSH
67644: LD_INT 1
67646: PLUS
67647: PPUSH
67648: LD_VAR 0 4
67652: PPUSH
67653: CALL_OW 1
67657: ST_TO_ADDR
67658: GO 67584
67660: POP
67661: POP
// end ;
67662: LD_VAR 0 3
67666: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67667: LD_INT 0
67669: PPUSH
67670: PPUSH
67671: PPUSH
67672: PPUSH
67673: PPUSH
67674: PPUSH
67675: PPUSH
// result := [ ] ;
67676: LD_ADDR_VAR 0 4
67680: PUSH
67681: EMPTY
67682: ST_TO_ADDR
// if x - r < 0 then
67683: LD_VAR 0 1
67687: PUSH
67688: LD_VAR 0 3
67692: MINUS
67693: PUSH
67694: LD_INT 0
67696: LESS
67697: IFFALSE 67709
// min_x := 0 else
67699: LD_ADDR_VAR 0 8
67703: PUSH
67704: LD_INT 0
67706: ST_TO_ADDR
67707: GO 67725
// min_x := x - r ;
67709: LD_ADDR_VAR 0 8
67713: PUSH
67714: LD_VAR 0 1
67718: PUSH
67719: LD_VAR 0 3
67723: MINUS
67724: ST_TO_ADDR
// if y - r < 0 then
67725: LD_VAR 0 2
67729: PUSH
67730: LD_VAR 0 3
67734: MINUS
67735: PUSH
67736: LD_INT 0
67738: LESS
67739: IFFALSE 67751
// min_y := 0 else
67741: LD_ADDR_VAR 0 7
67745: PUSH
67746: LD_INT 0
67748: ST_TO_ADDR
67749: GO 67767
// min_y := y - r ;
67751: LD_ADDR_VAR 0 7
67755: PUSH
67756: LD_VAR 0 2
67760: PUSH
67761: LD_VAR 0 3
67765: MINUS
67766: ST_TO_ADDR
// max_x := x + r ;
67767: LD_ADDR_VAR 0 9
67771: PUSH
67772: LD_VAR 0 1
67776: PUSH
67777: LD_VAR 0 3
67781: PLUS
67782: ST_TO_ADDR
// max_y := y + r ;
67783: LD_ADDR_VAR 0 10
67787: PUSH
67788: LD_VAR 0 2
67792: PUSH
67793: LD_VAR 0 3
67797: PLUS
67798: ST_TO_ADDR
// for _x = min_x to max_x do
67799: LD_ADDR_VAR 0 5
67803: PUSH
67804: DOUBLE
67805: LD_VAR 0 8
67809: DEC
67810: ST_TO_ADDR
67811: LD_VAR 0 9
67815: PUSH
67816: FOR_TO
67817: IFFALSE 67918
// for _y = min_y to max_y do
67819: LD_ADDR_VAR 0 6
67823: PUSH
67824: DOUBLE
67825: LD_VAR 0 7
67829: DEC
67830: ST_TO_ADDR
67831: LD_VAR 0 10
67835: PUSH
67836: FOR_TO
67837: IFFALSE 67914
// begin if not ValidHex ( _x , _y ) then
67839: LD_VAR 0 5
67843: PPUSH
67844: LD_VAR 0 6
67848: PPUSH
67849: CALL_OW 488
67853: NOT
67854: IFFALSE 67858
// continue ;
67856: GO 67836
// if GetResourceTypeXY ( _x , _y ) then
67858: LD_VAR 0 5
67862: PPUSH
67863: LD_VAR 0 6
67867: PPUSH
67868: CALL_OW 283
67872: IFFALSE 67912
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67874: LD_ADDR_VAR 0 4
67878: PUSH
67879: LD_VAR 0 4
67883: PPUSH
67884: LD_VAR 0 4
67888: PUSH
67889: LD_INT 1
67891: PLUS
67892: PPUSH
67893: LD_VAR 0 5
67897: PUSH
67898: LD_VAR 0 6
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PPUSH
67907: CALL_OW 1
67911: ST_TO_ADDR
// end ;
67912: GO 67836
67914: POP
67915: POP
67916: GO 67816
67918: POP
67919: POP
// end ;
67920: LD_VAR 0 4
67924: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67925: LD_INT 0
67927: PPUSH
67928: PPUSH
67929: PPUSH
67930: PPUSH
67931: PPUSH
67932: PPUSH
67933: PPUSH
67934: PPUSH
// if not units then
67935: LD_VAR 0 1
67939: NOT
67940: IFFALSE 67944
// exit ;
67942: GO 68369
// result := UnitFilter ( units , [ f_ok ] ) ;
67944: LD_ADDR_VAR 0 3
67948: PUSH
67949: LD_VAR 0 1
67953: PPUSH
67954: LD_INT 50
67956: PUSH
67957: EMPTY
67958: LIST
67959: PPUSH
67960: CALL_OW 72
67964: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67965: LD_ADDR_VAR 0 8
67969: PUSH
67970: LD_VAR 0 1
67974: PUSH
67975: LD_INT 1
67977: ARRAY
67978: PPUSH
67979: CALL_OW 255
67983: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
67984: LD_ADDR_VAR 0 10
67988: PUSH
67989: LD_INT 29
67991: PUSH
67992: LD_EXP 29
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: ST_TO_ADDR
// if not result then
68001: LD_VAR 0 3
68005: NOT
68006: IFFALSE 68010
// exit ;
68008: GO 68369
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68010: LD_ADDR_VAR 0 5
68014: PUSH
68015: LD_INT 81
68017: PUSH
68018: LD_VAR 0 8
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PPUSH
68027: CALL_OW 69
68031: ST_TO_ADDR
// for i in result do
68032: LD_ADDR_VAR 0 4
68036: PUSH
68037: LD_VAR 0 3
68041: PUSH
68042: FOR_IN
68043: IFFALSE 68367
// begin tag := GetTag ( i ) + 1 ;
68045: LD_ADDR_VAR 0 9
68049: PUSH
68050: LD_VAR 0 4
68054: PPUSH
68055: CALL_OW 110
68059: PUSH
68060: LD_INT 1
68062: PLUS
68063: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68064: LD_ADDR_VAR 0 7
68068: PUSH
68069: LD_VAR 0 4
68073: PPUSH
68074: CALL_OW 250
68078: PPUSH
68079: LD_VAR 0 4
68083: PPUSH
68084: CALL_OW 251
68088: PPUSH
68089: LD_INT 6
68091: PPUSH
68092: CALL 67667 0 3
68096: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68097: LD_VAR 0 7
68101: PUSH
68102: LD_VAR 0 4
68106: PPUSH
68107: CALL_OW 264
68111: PUSH
68112: LD_VAR 0 10
68116: IN
68117: NOT
68118: AND
68119: IFFALSE 68158
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68121: LD_VAR 0 4
68125: PPUSH
68126: LD_VAR 0 7
68130: PUSH
68131: LD_INT 1
68133: ARRAY
68134: PUSH
68135: LD_INT 1
68137: ARRAY
68138: PPUSH
68139: LD_VAR 0 7
68143: PUSH
68144: LD_INT 1
68146: ARRAY
68147: PUSH
68148: LD_INT 2
68150: ARRAY
68151: PPUSH
68152: CALL_OW 116
68156: GO 68365
// if path > tag then
68158: LD_VAR 0 2
68162: PUSH
68163: LD_VAR 0 9
68167: GREATER
68168: IFFALSE 68335
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68170: LD_ADDR_VAR 0 6
68174: PUSH
68175: LD_VAR 0 5
68179: PPUSH
68180: LD_INT 91
68182: PUSH
68183: LD_VAR 0 4
68187: PUSH
68188: LD_INT 12
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: LIST
68195: PPUSH
68196: CALL_OW 72
68200: ST_TO_ADDR
// if nearEnemy then
68201: LD_VAR 0 6
68205: IFFALSE 68233
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68207: LD_VAR 0 4
68211: PPUSH
68212: LD_VAR 0 6
68216: PPUSH
68217: LD_VAR 0 4
68221: PPUSH
68222: CALL_OW 74
68226: PPUSH
68227: CALL_OW 115
68231: GO 68333
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68233: LD_VAR 0 4
68237: PPUSH
68238: LD_VAR 0 2
68242: PUSH
68243: LD_VAR 0 9
68247: ARRAY
68248: PUSH
68249: LD_INT 1
68251: ARRAY
68252: PPUSH
68253: LD_VAR 0 2
68257: PUSH
68258: LD_VAR 0 9
68262: ARRAY
68263: PUSH
68264: LD_INT 2
68266: ARRAY
68267: PPUSH
68268: CALL_OW 297
68272: PUSH
68273: LD_INT 6
68275: GREATER
68276: IFFALSE 68319
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68278: LD_VAR 0 4
68282: PPUSH
68283: LD_VAR 0 2
68287: PUSH
68288: LD_VAR 0 9
68292: ARRAY
68293: PUSH
68294: LD_INT 1
68296: ARRAY
68297: PPUSH
68298: LD_VAR 0 2
68302: PUSH
68303: LD_VAR 0 9
68307: ARRAY
68308: PUSH
68309: LD_INT 2
68311: ARRAY
68312: PPUSH
68313: CALL_OW 114
68317: GO 68333
// SetTag ( i , tag ) ;
68319: LD_VAR 0 4
68323: PPUSH
68324: LD_VAR 0 9
68328: PPUSH
68329: CALL_OW 109
// end else
68333: GO 68365
// if enemy then
68335: LD_VAR 0 5
68339: IFFALSE 68365
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68341: LD_VAR 0 4
68345: PPUSH
68346: LD_VAR 0 5
68350: PPUSH
68351: LD_VAR 0 4
68355: PPUSH
68356: CALL_OW 74
68360: PPUSH
68361: CALL_OW 115
// end ;
68365: GO 68042
68367: POP
68368: POP
// end ;
68369: LD_VAR 0 3
68373: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68374: LD_INT 0
68376: PPUSH
68377: PPUSH
68378: PPUSH
// if not unit or IsInUnit ( unit ) then
68379: LD_VAR 0 1
68383: NOT
68384: PUSH
68385: LD_VAR 0 1
68389: PPUSH
68390: CALL_OW 310
68394: OR
68395: IFFALSE 68399
// exit ;
68397: GO 68490
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68399: LD_ADDR_VAR 0 4
68403: PUSH
68404: LD_VAR 0 1
68408: PPUSH
68409: CALL_OW 250
68413: PPUSH
68414: LD_VAR 0 2
68418: PPUSH
68419: LD_INT 1
68421: PPUSH
68422: CALL_OW 272
68426: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68427: LD_ADDR_VAR 0 5
68431: PUSH
68432: LD_VAR 0 1
68436: PPUSH
68437: CALL_OW 251
68441: PPUSH
68442: LD_VAR 0 2
68446: PPUSH
68447: LD_INT 1
68449: PPUSH
68450: CALL_OW 273
68454: ST_TO_ADDR
// if ValidHex ( x , y ) then
68455: LD_VAR 0 4
68459: PPUSH
68460: LD_VAR 0 5
68464: PPUSH
68465: CALL_OW 488
68469: IFFALSE 68490
// ComTurnXY ( unit , x , y ) ;
68471: LD_VAR 0 1
68475: PPUSH
68476: LD_VAR 0 4
68480: PPUSH
68481: LD_VAR 0 5
68485: PPUSH
68486: CALL_OW 118
// end ;
68490: LD_VAR 0 3
68494: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68495: LD_INT 0
68497: PPUSH
68498: PPUSH
// result := false ;
68499: LD_ADDR_VAR 0 3
68503: PUSH
68504: LD_INT 0
68506: ST_TO_ADDR
// if not units then
68507: LD_VAR 0 2
68511: NOT
68512: IFFALSE 68516
// exit ;
68514: GO 68561
// for i in units do
68516: LD_ADDR_VAR 0 4
68520: PUSH
68521: LD_VAR 0 2
68525: PUSH
68526: FOR_IN
68527: IFFALSE 68559
// if See ( side , i ) then
68529: LD_VAR 0 1
68533: PPUSH
68534: LD_VAR 0 4
68538: PPUSH
68539: CALL_OW 292
68543: IFFALSE 68557
// begin result := true ;
68545: LD_ADDR_VAR 0 3
68549: PUSH
68550: LD_INT 1
68552: ST_TO_ADDR
// exit ;
68553: POP
68554: POP
68555: GO 68561
// end ;
68557: GO 68526
68559: POP
68560: POP
// end ;
68561: LD_VAR 0 3
68565: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68566: LD_INT 0
68568: PPUSH
68569: PPUSH
68570: PPUSH
68571: PPUSH
// if not unit or not points then
68572: LD_VAR 0 1
68576: NOT
68577: PUSH
68578: LD_VAR 0 2
68582: NOT
68583: OR
68584: IFFALSE 68588
// exit ;
68586: GO 68678
// dist := 99999 ;
68588: LD_ADDR_VAR 0 5
68592: PUSH
68593: LD_INT 99999
68595: ST_TO_ADDR
// for i in points do
68596: LD_ADDR_VAR 0 4
68600: PUSH
68601: LD_VAR 0 2
68605: PUSH
68606: FOR_IN
68607: IFFALSE 68676
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68609: LD_ADDR_VAR 0 6
68613: PUSH
68614: LD_VAR 0 1
68618: PPUSH
68619: LD_VAR 0 4
68623: PUSH
68624: LD_INT 1
68626: ARRAY
68627: PPUSH
68628: LD_VAR 0 4
68632: PUSH
68633: LD_INT 2
68635: ARRAY
68636: PPUSH
68637: CALL_OW 297
68641: ST_TO_ADDR
// if tmpDist < dist then
68642: LD_VAR 0 6
68646: PUSH
68647: LD_VAR 0 5
68651: LESS
68652: IFFALSE 68674
// begin result := i ;
68654: LD_ADDR_VAR 0 3
68658: PUSH
68659: LD_VAR 0 4
68663: ST_TO_ADDR
// dist := tmpDist ;
68664: LD_ADDR_VAR 0 5
68668: PUSH
68669: LD_VAR 0 6
68673: ST_TO_ADDR
// end ; end ;
68674: GO 68606
68676: POP
68677: POP
// end ; end_of_file
68678: LD_VAR 0 3
68682: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68683: LD_VAR 0 1
68687: PUSH
68688: LD_INT 200
68690: DOUBLE
68691: GREATEREQUAL
68692: IFFALSE 68700
68694: LD_INT 299
68696: DOUBLE
68697: LESSEQUAL
68698: IFTRUE 68702
68700: GO 68734
68702: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68703: LD_VAR 0 1
68707: PPUSH
68708: LD_VAR 0 2
68712: PPUSH
68713: LD_VAR 0 3
68717: PPUSH
68718: LD_VAR 0 4
68722: PPUSH
68723: LD_VAR 0 5
68727: PPUSH
68728: CALL 24330 0 5
68732: GO 68811
68734: LD_INT 300
68736: DOUBLE
68737: GREATEREQUAL
68738: IFFALSE 68746
68740: LD_INT 399
68742: DOUBLE
68743: LESSEQUAL
68744: IFTRUE 68748
68746: GO 68810
68748: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68749: LD_VAR 0 1
68753: PPUSH
68754: LD_VAR 0 2
68758: PPUSH
68759: LD_VAR 0 3
68763: PPUSH
68764: LD_VAR 0 4
68768: PPUSH
68769: LD_VAR 0 5
68773: PPUSH
68774: LD_VAR 0 6
68778: PPUSH
68779: LD_VAR 0 7
68783: PPUSH
68784: LD_VAR 0 8
68788: PPUSH
68789: LD_VAR 0 9
68793: PPUSH
68794: LD_VAR 0 10
68798: PPUSH
68799: LD_VAR 0 11
68803: PPUSH
68804: CALL 21972 0 11
68808: GO 68811
68810: POP
// end ;
68811: PPOPN 11
68813: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68814: LD_VAR 0 1
68818: PPUSH
68819: LD_VAR 0 2
68823: PPUSH
68824: LD_VAR 0 3
68828: PPUSH
68829: LD_VAR 0 4
68833: PPUSH
68834: LD_VAR 0 5
68838: PPUSH
68839: CALL 24066 0 5
// end ; end_of_file
68843: PPOPN 5
68845: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68846: LD_VAR 0 1
68850: PPUSH
68851: LD_VAR 0 2
68855: PPUSH
68856: LD_VAR 0 3
68860: PPUSH
68861: LD_VAR 0 4
68865: PPUSH
68866: LD_VAR 0 5
68870: PPUSH
68871: LD_VAR 0 6
68875: PPUSH
68876: CALL 9665 0 6
// end ;
68880: PPOPN 6
68882: END
