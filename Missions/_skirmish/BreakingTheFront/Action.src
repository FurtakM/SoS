// Dialogs and mission objectives
Export Function Action;
var i, tmp;
begin
InGameOn;
CenterNowOnXY(225, 217);

for i in playerForces[2] do
    begin

    if playerForces[1] and GetClass(i) in [3, 4] then
       begin
       PlaceUnitInArea(playerForces[1][1], startArea, false);
       PlaceHumanInUnit(i, playerForces[1][1]);
       playerForces := Replace(playerForces, 1, Delete(playerForces[1], 1));
       end
    else
       PlaceUnitInArea(i, startArea, false);
    end;

wait(0$2);

Say(playerCommander, 'DI-1');
SayRadio(Powell, 'DP-1');
SayRadio(Powell, 'DP-2');
Say(playerCommander, 'DI-2');

InGameOff;

ChangeMissionObjectives('O1');

game := true;

repeat
 wait(0$1);
until ruEscape[1] >= ruEscape[2];

outpostEscape := true;

tmp := UnitFilter(ruOutpost, [f_sex, sex_male]);

if tmp then
   Say(tmp[1], 'DR-1-Escape');

wait(0$1);

for i in ruOutpost do
    begin
    if IsInUnit(i) then
       ComExitBuilding(i);

    AddComMoveXY(i, 179, 102);
    AddComMoveXY(i, 28, 20);
    end;

tmp := [];

repeat
 wait(0$1);
 tmp := UnitFilter(ruOutpost, [f_inarea, rus1Base]);

 if tmp then
    for i in tmp do
        begin
        ruOutpost := ruOutpost diff i;
        mc_bases := Replace(mc_bases, mc_rus_1, mc_bases[mc_rus_1] union i);
        end;
until not ruOutpost;

End;

// Boom
Every 0$1 trigger outpostEscape do
var i, tmp;
begin
wait(rand(0$25, 0$35));

tmp := [ [208,166], [218,174], [201,173], [189,167], [191,160], [209,181], [192,162], [197,166] ];

for i = 1 to 5+Difficulty do
    begin
    MineExplosion(tmp[i][1], tmp[i][2], 1);
    wait(0$0.8);
    end;
End;


// Simple oustpost script
Every 0$3 trigger not outpostEscape do
var tmp, engs, buildings, empty, i, j, k;
begin
enable;

tmp := UnitFilter(ruOutpost, [f_class, 1]);
engs := UnitFilter(ruOutpost, [f_class, 2]);
buildings := UnitFilter(ruOutpost, [[f_type, unit_building], [f_not, [f_lives, 1000]]]);

if engs and buildings then
   begin
   for i in engs do
       if IsInUnit(i) then
          ComExitBuilding(i)
       else
         if not HasTask(i) then
            ComRepairBuilding(i, buildings[1]);
   end
else if not buildings and UnitFilter(ruOutpost, [f_btype, b_depot]) and UnitFilter(engs, [f_not, [f_inside]]) then
     ComEnterUnit(UnitFilter(engs, [f_not, [f_inside]]), UnitFilter(ruOutpost, [f_btype, b_depot])[1]);


if not tmp then
   exit;

if FilterUnitsInArea(ruOutpostArea, [f_enemy, 3]) > 1 then
   begin
   for i in tmp do
       begin
       if IsInUnit(i) then
          ComExitBuilding(i);

          AddComAgressiveMove(i, 204, 164);
       end;
   end
else if UnitFilter(tmp, [f_not, [f_inside]]) then
   begin
   empty := UnitFilter(ruOutpost, [[f_btype, b_bunker], [f_empty]]);

   if not empty and UnitFilter(ruOutpost, [f_btype, b_barracks]) then
      begin
      ComEnterUnit(tmp, UnitFilter(ruOutpost, [f_btype, b_barracks])[1]);
      exit;
      end;

   j := UnitFilter(tmp, [f_not, [f_inside]]);

   if j < empty then
      k := j
   else
      k := empty;

   for i = 1 to k do
       ComEnterUnit(j[i], empty[i]);
   end;
End;

// Capture base
Every 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits([[f_side, 1], [f_distxy, 208, 163, 8]]) and not FilterAllUnits([[f_side, 3], [f_type, unit_human], [f_distxy, 208, 163, 14]]) do
var i;
begin
InGameOn;

CenterNowOnUnits(playerCommander);
wait(0$1);

DialogueOn;

Say(playerCommander, 'DI-1-BaseCaptured');
SayRadio(Powell, 'DP-1-BaseCaptured');
Say(playerCommander, 'DI-2-BaseCaptured');
SayRadio(Powell, 'DP-2-BaseCaptured');
Say(playerCommander, 'DI-3-BaseCaptured');

DialogueOff;
InGameOff;

ChangeMissionObjectives('O2');

for i in UnitFilter(ruOutpost, [f_type, unit_building]) do
    SetSide(i, 1);

baseCaptured := true;

wait(0$35);

PrepareReinforcements;
End;

// Spot Theta
Every 0$2 trigger GameType = 1 and FilterAllUnits([[f_side, 1], [f_see, 4]]) do
begin
ChangeSideFog(4, 1);

DialogueOn;

CenterNowOnUnits(allyCommander);

SayRadio(allyCommander, 'DM-1-Contact');
Say(playerCommander, 'DI-1-Contact');
SayRadio(allyCommander, 'DM-2-Contact');
Say(playerCommander, 'DI-2-Contact');
SayRadio(allyCommander, 'DM-3-Contact');
Say(playerCommander, 'DI-3-Contact');
SayRadio(allyCommander, 'DM-4-Contact');
Say(playerCommander, 'DI-4-Contact');
SayRadio(allyCommander, 'DM-5-Contact');

DialogueOff;

ChangeMissionObjectives('O3');
End;

Every 0$10 trigger GameType = 1 and legDestCounter >= [15, 20, 25][Difficulty] and
                   FilterAllUnits([[f_side, 8], [f_btype, b_warehouse]]) and
                   FilterAllUnits([[f_side, 8], [f_type, unit_building]]) >= 5 do
var time, sib, sources, i;
begin
DialogueOn;

SayRadio(Farmer, 'DF-1-Leg');
Say(playerCommander, 'DI-1-Leg');
SayRadio(Farmer, 'DF-2-Leg');

DialogueOff;

Case Query('QLegionOffer') of
1: ; // agree
2: exit; // not agree
end;

SayRadio(Farmer, 'DF-3-Leg');
legOfferAccepted := true;

SetAreaMapShow(legOfferArea, 1);
CenterOnXY(190, 227);

time := [8$00, 7$00, 6$00][Difficulty];
sib := 100;

disableGlobalTimer := true;

repeat
 wait(0$1);
 time := time - 0$1;
 sources := GetResourceArea(legOfferArea, mat_siberit);

 display_strings := [
                      '#SkrTime', tick,
                      '#Skr-LegOffer', sib, time
                    ];

 if sources then
    begin
    sib := sib - sources * 10;
    EraseResourceArea(legOfferArea, mat_siberit);
    end;
until time = 0$00 or sib <= 0 or not FilterAllUnits([f_side, 8]);

SetAreaMapShow(legOfferArea, 0);
disableGlobalTimer := false;

if sib <= 0 then // legion change side
   begin
   legChangeSide := true;

   ChangeMissionObjectives('O3a');
   ChangeSideFog(8, 1);
   SetAttitude(8, 1, att_friend, true);
   SetAttitude(8, 4, att_friend, true);
   SetAttitude(8, 6, att_enemy, true);
   SetAttitude(8, 3, att_enemy, true);

   wait(0$30);

   PrepareLegionReinforcements;
   end;

End;

// You Win
Every 0$1 trigger GameType = 1 and game and FilterAllUnits([[f_side, 3], [f_type, unit_human]]) = 0 and
                  FilterAllUnits([[f_side, 3], [f_btype, b_warehouse]]) = 0 do
begin
Say(playerCommander, 'DI-1-Win');

if tick >= [150$0, 130$0, 110$0][Difficulty] then
   AddMedal('med1', -1)
else
   AddMedal('med1', 1);

if allyDestCounter >= [20, 15, 10][Difficulty] then
   AddMedal('med2', -1)
else
   AddMedal('med2', 1);

if legChangeSide and GetAttitude(8, 1) = att_friend then
   AddMedal('med3', 2)
else if FilterAllUnits([[f_side, 8], [f_type, unit_human]]) = 0 then
   AddMedal('med3', 1)
else
   AddMedal('med3', -1);

GiveMedals('MAIN');

YouWin;
End;


// Trigger explosion of static mines
Every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea(minesArea, [f_enemy, 8]) do
var i, j, tmp, x, y;
begin
enable;

tmp := FilterUnitsInArea(minesArea, [f_enemy, 8]);

if not tmp then
   exit;

for i in tmp do
    begin
    x := GetX(i);
    y := GetY(i);

    if MineAtPos(x, y) then
       begin
       LaunchMineAtPos(x, y, 8);

       for j = 1 to staticMines do
           if staticMines[j][1] = x and staticMines[j][2] = y then
              begin
              staticMines := Delete(staticMines, j);
              break;
              end;
       end;
    end;
End;

// Attacks
// Ru(3) attack Am(4)
Every 1$00 trigger GameType = 1 and game and UnitFilter(mc_bases[mc_rus_1], [f_btype, b_factory]) do
var i, base, tmp, _target, _targetAlt, attackers, e;
begin

repeat
 wait(9$00);
 base := mc_rus_1;

 if not UnitFilter(mc_bases[base], [f_btype, b_factory]) then
    continue;

 tmp := [ [ru_heavy_tracked, engine_combustion, control_computer, ru_rocket],
          [ru_heavy_tracked, engine_combustion, control_computer, ru_rocket],
          [ru_heavy_tracked, engine_combustion, control_computer, ru_rocket],
          [ru_heavy_tracked, engine_combustion, control_computer, ru_heavy_gun]
        ];

 MC_InsertProduceList(base, tmp);

 repeat
  wait(0$1);
 until MC_GetProduceList(base) < 2;

 wait(0$30);

 if legChangeSide and FilterAllUnits([f_side, 8]) then
    _targetAlt := [[107,58], [128,79]];

 _target := [[99, 35], [111, 29], [122, 22]];

 if _targetAlt then
    _target := [_target, _targetAlt][rand(1,2)];

 attackers := mc_vehicles[base] diff (mc_defender[base] union UnitFilter(mc_vehicles[base], [f_or, [f_weapon, ru_cargo_bay], [f_weapon, ru_crane], [f_weapon, ru_bulldozer], [f_weapon, ru_siberium_rocket]]));
 mc_vehicles := Replace(mc_vehicles, base, mc_vehicles[base] diff attackers);

 if not attackers then
    continue;

 ComAgressiveMove(attackers, 84, 36);

 for i = 1 to _target do
     AddComAgressiveMove(attackers, _target[i][1], _target[i][2]);

 repeat
  wait(0$1);
 until not UnitFilter(attackers, [f_hastask]);

 repeat
  wait(0$1);

  for i in attackers do
      begin
      if IsDead(i) then
         begin
         attackers := attackers diff i;
         continue;
         end;

      if HasTask(i) then
         continue;

      e := NearestUnitToUnit(FilterAllUnits([f_enemy, 3]), i);

      if e then
         ComAttackUnit(i, e);
      end;
 until not attackers;
until not UnitFilter(mc_bases[base], [f_ok]);
End;

// Ru(3) attack Am(1)
Every 1$00 trigger GameType = 1 and game and UnitFilter(mc_bases[mc_rus_2], [f_btype, b_factory]) do
var i, base, tmp, _target, attackers, teleport, e;
begin

repeat
 wait(9$00);
 base := mc_rus_2;

 if not UnitFilter(mc_bases[base], [f_btype, b_factory]) then
    continue;

 tmp := [ [ru_heavy_wheeled, engine_siberite, control_computer, ru_rocket],
          [ru_heavy_wheeled, engine_siberite, control_computer, ru_rocket],
          [ru_heavy_wheeled, engine_siberite, control_computer, ru_heavy_gun],
          [ru_heavy_wheeled, engine_combustion, control_computer, ru_heavy_gun],
          [ru_medium_wheeled, engine_combustion, control_computer, ru_time_lapser]
        ];

 MC_InsertProduceList(base, tmp);

 repeat
  wait(0$1);
 until MC_GetProduceList(base) = 0;

 wait(0$30);

 _target := [[164,198], [176, 180]];
 attackers := mc_vehicles[base] diff (mc_defender[base] union UnitFilter(mc_vehicles[base], [f_or, [f_weapon, ru_cargo_bay], [f_weapon, ru_crane], [f_weapon, ru_bulldozer], [f_weapon, ru_siberium_rocket]]));
 mc_vehicles := Replace(mc_vehicles, base, mc_vehicles[base] diff attackers);

 if not attackers then
    continue;

 teleport := FilterAllUnits([[f_side, 3], [f_btype, b_teleport]]);

for i in attackers do
    begin
    if teleport then
       begin
       ComEnterUnit(i, teleport[1]);
       AddComAgressiveMove(i, 129, 215);
       end
    else
       AddComAgressiveMove(i, 125, 157);
    end;

 repeat
  wait(0$1);
 until not UnitFilter(attackers, [f_hastask]);

 for i = 1 to _target do
     AddComAgressiveMove(attackers, _target[i][1], _target[i][2]);

 repeat
  wait(0$1);
 until not UnitFilter(attackers, [f_hastask]);

 repeat
  wait(0$1);

  for i in attackers do
      begin
      if IsDead(i) then
         begin
         attackers := attackers diff i;
         continue;
         end;

      if HasTask(i) then
         continue;

      e := NearestUnitToUnit(FilterAllUnits([f_enemy, 3]), i);

      if e then
         ComAttackUnit(i, e);
      end;
 until not attackers;
until not UnitFilter(mc_bases[base], [f_ok]);
End;

// Leg(8) attack Am(4)
Every 1$00 trigger GameType = 1 and game and not legChangeSide and FilterAllUnits([[f_side, 8], [f_weapon, ar_control_tower]]) and UnitFilter(mc_bases[mc_leg], [f_btype, b_factory]) do
var i, base, tmp, flags, _target, attackers;
begin

repeat
 wait([10$00, 9$30, 9$00][Difficulty]);
 base := mc_leg;

 if not UnitFilter(mc_bases[base], [f_btype, b_factory]) then
    continue;

 if legChangeSide then
    exit;


 tmp := [ [ar_hovercraft, engine_combustion, control_remote, ar_double_machine_gun],
          [ar_hovercraft, engine_combustion, control_remote, ar_double_machine_gun],
          [ar_hovercraft, engine_combustion, control_remote, ar_double_machine_gun],
          [ar_hovercraft, engine_combustion, control_remote, ar_double_machine_gun],
          [ar_hovercraft, engine_combustion, control_remote, ar_double_machine_gun]
        ];

 MC_InsertProduceList(base, tmp);

 repeat
  wait(0$1);
 until MC_GetProduceList(base) = 0;

 wait(0$30);

 _target := [[113, 63], [119, 15]];
 flags := [0, 0, 0, 0, 0, 0, 0, 0, 1, 0];
 attackers := mc_vehicles[base] diff (mc_defender[base] union UnitFilter(mc_vehicles[base], [f_or, [f_weapon, ar_cargo_bay], [f_weapon, ar_control_tower]]));
 mc_vehicles := Replace(mc_vehicles, base, mc_vehicles[base] diff attackers);

 if not attackers then
    continue;

 repeat
  wait(0$1);
 until not UnitFilter(attackers, [f_hastask]);

 MC_PrepareAttack(base, attackers, _target, flags);
until not UnitFilter(mc_bases[base], [f_ok]);
End;

// Leg(8) attack Am(1)
Every 1$00 trigger GameType = 1 and game and FilterAllUnits([[f_side, 8], [f_weapon, ar_control_tower]]) and UnitFilter(mc_bases[mc_leg], [f_btype, b_factory]) do
var i, base, flags, tmp, _target, attackers;
begin

repeat
 wait(9$00);
 base := mc_leg;

 if not FilterAllUnits([[f_side, 8], [f_weapon, ar_control_tower]]) or not UnitFilter(mc_bases[base], [f_btype, b_factory]) then
    continue;

 if legChangeSide then
    exit;

 tmp := [ [ar_medium_trike, engine_combustion, control_remote, ar_rocket_launcher],
          [ar_medium_trike, engine_combustion, control_remote, ar_rocket_launcher],
          [ar_medium_trike, engine_combustion, control_remote, ar_rocket_launcher],
          [ar_medium_trike, engine_combustion, control_remote, ar_gun],
          [ar_medium_trike, engine_combustion, control_remote, ar_gun],
          [ar_medium_trike, engine_combustion, control_remote, ar_selfpropelled_bomb]
        ];

 MC_InsertProduceList(base, tmp);

 repeat
  wait(0$1);
 until MC_GetProduceList(base) = 0;

 wait(0$30);

 _target := [[165,89], [190,123]];
 flags := [0, 0, 0, 0, 0, 0, 0, 0, 1, 0];
 attackers := mc_vehicles[base] diff (mc_defender[base] union UnitFilter(mc_vehicles[base], [f_or, [f_weapon, ar_cargo_bay], [f_weapon, ar_control_tower]]));
 mc_vehicles := Replace(mc_vehicles, base, mc_vehicles[base] diff attackers);

 if not attackers then
    continue;

 repeat
  wait(0$1);
 until not UnitFilter(attackers, [f_hastask]);

 MC_PrepareAttack(base, attackers, _target, flags);
until not UnitFilter(mc_bases[base], [f_ok]);
End;

// Leg(8) attack Ru(3)
Every 1$00 trigger GameType = 1 and game and legChangeSide and FilterAllUnits([[f_side, 8], [f_weapon, ar_control_tower]]) and UnitFilter(mc_bases[mc_leg], [f_btype, b_factory]) do
var i, base, tmp, _target, attackers, flags;
begin

repeat
 wait(12$00);
 base := mc_leg;

 if not FilterAllUnits([[f_side, 8], [f_weapon, ar_control_tower]]) or not UnitFilter(mc_bases[base], [f_btype, b_factory]) then
    continue;

 tmp := [ [ar_medium_trike, engine_combustion, control_remote, ar_rocket_launcher],
          [ar_medium_trike, engine_combustion, control_remote, ar_rocket_launcher],
          [ar_medium_trike, engine_combustion, control_remote, ar_rocket_launcher],
          [ar_medium_trike, engine_combustion, control_remote, ar_gun],
          [ar_medium_trike, engine_combustion, control_remote, ar_gun],
          [ar_medium_trike, engine_combustion, control_remote, ar_selfpropelled_bomb],
          [ar_medium_trike, engine_combustion, control_remote, ar_selfpropelled_bomb]
        ];

 MC_InsertProduceList(base, tmp);

 repeat
  wait(0$1);
 until MC_GetProduceList(base) = 0;

 wait(0$30);

 _target := [[110,63], [92,72]];
 flags := [0, 0, 0, 0, 0, 0, 0, 0, 1, 0];
 attackers := mc_vehicles[base] diff (mc_defender[base] union UnitFilter(mc_vehicles[base], [f_or, [f_weapon, ar_cargo_bay], [f_weapon, ar_control_tower]]));
 mc_vehicles := Replace(mc_vehicles, base, mc_vehicles[base] diff attackers);

 if not attackers then
    continue;

 repeat
  wait(0$1);
 until not UnitFilter(attackers, [f_hastask]);

 MC_PrepareAttack(base, attackers, _target, flags);
until not UnitFilter(mc_bases[base], [f_ok]);
End;

// Am(4) attack Ru(3)
Every 1$00 trigger GameType = 1 and game and UnitFilter(mc_bases[mc_amer], [f_btype, b_factory]) do
var i, base, tmp, _target, attackers, e;
begin

repeat
 wait(12$00);
 base := mc_amer;

 if not UnitFilter(mc_bases[base], [f_btype, b_factory]) then
    continue;

 tmp := [ [us_heavy_tracked, engine_combustion, control_remote, us_heavy_gun],
          [us_heavy_tracked, engine_combustion, control_remote, us_heavy_gun],
          [us_medium_wheeled, engine_combustion, control_remote, us_rocket_launcher],
          [us_medium_wheeled, engine_combustion, control_remote, us_rocket_launcher],
          [us_medium_wheeled, engine_combustion, control_remote, us_rocket_launcher]
        ];

 MC_InsertProduceList(base, tmp);

 repeat
  wait(0$1);
 until MC_GetProduceList(base) = 0;

 wait(0$30);

 _target := [[92,34]];
 attackers := mc_vehicles[base] diff (mc_defender[base] union UnitFilter(mc_vehicles[base], [f_weapon, us_cargo_bay]));
 mc_vehicles := Replace(mc_vehicles, base, mc_vehicles[base] diff attackers);

 if not attackers then
    continue;

 repeat
  wait(0$1);
 until not UnitFilter(attackers, [f_hastask]);

 for i = 1 to _target do
     AddComAgressiveMove(attackers, _target[i][1], _target[i][2]);

 repeat
  wait(0$1);
 until not UnitFilter(attackers, [f_hastask]);

 repeat
  wait(0$1);

  for i in attackers do
      begin
      if IsDead(i) then
         begin
         attackers := attackers diff i;
         continue;
         end;

      if HasTask(i) then
         continue;

      e := NearestUnitToUnit(FilterAllUnits([f_enemy, 4]), i);

      if e then
         ComAttackUnit(i, e);
      end;
 until not attackers;
until not UnitFilter(mc_bases[base], [f_ok]);
End;

Every 30$00+50$00 trigger GameType = 1 and game and sibBombAllowed > 0 and UnitFilter(mc_bases[mc_rus_2], [f_btype, b_factory]) do
var bomb, e;
begin
enable;

MC_InsertProduceList(mc_rus_2, [[ru_heavy_wheeled, engine_siberite, control_computer, ru_siberium_rocket]]);

repeat
 wait(0$1);
until FilterAllUnits([[f_side, 3], [f_weapon, ru_siberium_rocket]]);

bomb := FilterAllUnits([[f_side, 3], [f_weapon, ru_siberium_rocket]]);
e := FilterAllUnits([[f_enemy, 3], [f_type, unit_building]]);

if e then
   e := NearestUnitToUnit(e, bomb[1]);

ComAttackPlace(bomb, GetX(e), GetY(e));
End;

// Convoy
Every 7$00 trigger GameType = 1 and GetBType(HexInfo(84, 128)) = b_warehouse do
var veh, depot;
begin
enable;

depot := HexInfo(84, 128);

uc_side := 3;
uc_nation := 3;

PrepareVehicle(ru_medium_wheeled, engine_siberite, control_computer, ru_cargo_bay, 0);
veh := CreateVehicle;

PlaceUnitXY(veh, 126, 227, false);
SetCargo(veh, mat_oil, 100);

ComGive(veh, depot);
AddComMoveXY(veh, 126, 227);

wait(0$10);

repeat
 wait(0$1);
until IsAt(veh, 126, 227);

RemoveUnit(veh);
End;

// Convoy #2
Every 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do
var veh, depot;
begin
enable;

if tick >= [50$00, 40$00, 30$00][Difficulty] then
   disable;

uc_side := 4;
uc_nation := 1;

PrepareVehicle(us_medium_wheeled, engine_siberite, control_computer, us_cargo_bay, 0);
veh := CreateVehicle;

PlaceUnitXY(veh, 229, 226, false);
SetCargo(veh, mat_cans, 100);

AddComMoveToArea(veh, ruOutpostArea);
AddComUnload(veh);
AddComMoveXY(veh, 229, 226);

wait(0$10);

repeat
 wait(0$1);
until IsAt(veh, 229, 226);

RemoveUnit(veh);
End;

Every 15$00 trigger GameType = 1 and game and reinforceAllowed do
var i, j, veh, tmp, amount;
begin
enable;

tmp := [];

if commander = 1 then
   amount := 3
else
   amount := 2;

for i = 1 to amount do
    begin
    wait(0$5);

    for j = 1 to 3 do
        begin
        uc_side := 4;
        uc_nation := 1;

        PrepareVehicle([us_medium_tracked, us_morphling][rand(1,2)], engine_siberite, control_computer, [us_laser, us_double_gun, us_rocket_launcher][rand(1,3)], 100);
        veh := CreateVehicle;
        tmp := tmp ^ veh;
        PlaceUnitArea(veh, westSpawn, false);

        ComMoveXY(veh, 119, 215);
        end;
    end;

wait(0$3);

repeat
 wait(0$1);

 for i in tmp do
     if IsDead(i) then
        tmp := tmp diff i
     else
        ComAttackUnit(i, NearestUnitToUnit(FilterAllUnits([f_enemy, 4]), i));
until tmp = [];
End;

// oil
Every 0$1 trigger GameType = 1 and game do
var i, tmp;
begin
enable;

tmp := FilterAllUnits([[f_not, [f_side, 1]], [f_engine, engine_combustion]]);

if tmp then
   for i in tmp do
       if GetFuel(i) < 3 then
          SetFuel(i, 3);
End;
