// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := false ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 61015 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 61015 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 61015 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 61015 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1402
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7218 0 0
// PrepareLegion ;
1338: CALL 5483 0 0
// PrepareRussians ;
1342: CALL 2449 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8461 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 53763 0 9
// MC_Start ;
1394: CALL 64067 0 0
// Action ;
1398: CALL 10657 0 0
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function CustomInitMacro ; begin
1407: LD_INT 0
1409: PPUSH
// if GameType <> 1 then
1410: LD_EXP 2
1414: PUSH
1415: LD_INT 1
1417: NONEQUAL
1418: IFFALSE 1422
// exit ;
1420: GO 2444
// MC_SetScanArea ( mc_amer , amerBase ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL 86386 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1434: LD_EXP 5
1438: PPUSH
1439: LD_INT 4
1441: PPUSH
1442: CALL 86330 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 11
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 7
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL 86218 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1477: LD_EXP 5
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL 85900 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1489: LD_EXP 5
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL 85631 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1501: LD_EXP 5
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL 85313 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 2
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 9
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 4
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL 85128 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1600: LD_EXP 5
1604: PPUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 114
1610: PUSH
1611: LD_INT 16
1613: PUSH
1614: LD_INT 0
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 110
1628: PUSH
1629: LD_INT 12
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL 85020 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1649: LD_EXP 5
1653: PPUSH
1654: LD_INT 10
1656: PUSH
1657: LD_INT 15
1659: PUSH
1660: LD_INT 12
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL 85807 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_INT 6
1683: PPUSH
1684: CALL 86386 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1688: LD_EXP 6
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: CALL 86330 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 28
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL 86218 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1727: LD_EXP 6
1731: PPUSH
1732: LD_INT 17
1734: PPUSH
1735: CALL 85900 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1739: LD_EXP 6
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL 85631 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1751: LD_EXP 6
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: CALL 85313 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1763: LD_EXP 6
1767: PPUSH
1768: LD_INT 10
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL 84810 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 145 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_INT 4
1785: PUSH
1786: LD_INT 157
1788: PUSH
1789: LD_INT 144
1791: PUSH
1792: LD_INT 0
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 32
1803: PUSH
1804: LD_INT 151
1806: PUSH
1807: LD_INT 142
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 161
1824: PUSH
1825: LD_INT 145
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 32
1839: PUSH
1840: LD_INT 140
1842: PUSH
1843: LD_INT 133
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PPUSH
1861: CALL 85020 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1865: LD_EXP 6
1869: PPUSH
1870: LD_INT 13
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 31
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 13
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 13
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 27
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 13
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 27
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 13
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 27
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 13
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 2
1968: PUSH
1969: LD_INT 28
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 28
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 13
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: LD_INT 32
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL 85128 0 2
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2028: LD_EXP 7
2032: PPUSH
2033: LD_INT 15
2035: PPUSH
2036: CALL 86386 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2040: LD_EXP 7
2044: PPUSH
2045: LD_INT 16
2047: PPUSH
2048: CALL 86330 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2052: LD_EXP 7
2056: PPUSH
2057: LD_INT 43
2059: PUSH
2060: LD_INT 47
2062: PUSH
2063: LD_INT 45
2065: PUSH
2066: LD_INT 49
2068: PUSH
2069: LD_INT 46
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: PPUSH
2079: CALL 86218 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2083: LD_EXP 7
2087: PPUSH
2088: LD_INT 13
2090: PPUSH
2091: CALL 85900 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2095: LD_EXP 7
2099: PPUSH
2100: LD_INT 15
2102: PPUSH
2103: CALL 85631 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2107: LD_EXP 7
2111: PPUSH
2112: LD_INT 5
2114: PPUSH
2115: CALL 85313 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2119: LD_EXP 7
2123: PPUSH
2124: LD_INT 23
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 3
2132: PUSH
2133: LD_INT 46
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_INT 23
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: LD_INT 1
2150: PUSH
2151: LD_INT 46
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: PUSH
2160: LD_INT 23
2162: PUSH
2163: LD_INT 1
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 45
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: PUSH
2178: LD_INT 23
2180: PUSH
2181: LD_INT 1
2183: PUSH
2184: LD_INT 1
2186: PUSH
2187: LD_INT 47
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 21
2198: PUSH
2199: LD_INT 1
2201: PUSH
2202: LD_INT 3
2204: PUSH
2205: LD_INT 51
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: PPUSH
2221: CALL 85128 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2225: LD_EXP 8
2229: PPUSH
2230: LD_INT 11
2232: PPUSH
2233: CALL 86386 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2237: LD_EXP 8
2241: PPUSH
2242: LD_INT 12
2244: PPUSH
2245: CALL 86330 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2249: LD_EXP 8
2253: PPUSH
2254: LD_INT 43
2256: PUSH
2257: LD_INT 47
2259: PUSH
2260: LD_INT 45
2262: PUSH
2263: LD_INT 49
2265: PUSH
2266: LD_INT 46
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: PPUSH
2276: CALL 86218 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2280: LD_EXP 8
2284: PPUSH
2285: LD_INT 13
2287: PPUSH
2288: CALL 85900 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2292: LD_EXP 8
2296: PPUSH
2297: LD_INT 11
2299: PPUSH
2300: CALL 85631 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2304: LD_EXP 8
2308: PPUSH
2309: LD_INT 4
2311: PPUSH
2312: CALL 85313 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2316: LD_EXP 8
2320: PPUSH
2321: LD_INT 115
2323: PUSH
2324: LD_INT 201
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PUSH
2331: EMPTY
2332: LIST
2333: PPUSH
2334: CALL 85956 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , ] ) ;
2338: LD_EXP 8
2342: PPUSH
2343: LD_INT 24
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: LD_INT 46
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 24
2363: PUSH
2364: LD_INT 3
2366: PUSH
2367: LD_INT 3
2369: PUSH
2370: LD_INT 46
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 24
2381: PUSH
2382: LD_INT 3
2384: PUSH
2385: LD_INT 3
2387: PUSH
2388: LD_INT 46
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 24
2399: PUSH
2400: LD_INT 3
2402: PUSH
2403: LD_INT 3
2405: PUSH
2406: LD_INT 46
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 24
2417: PUSH
2418: LD_INT 3
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: LD_INT 46
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: PPUSH
2440: CALL 85128 0 2
// end ;
2444: LD_VAR 0 1
2448: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2449: LD_INT 0
2451: PPUSH
2452: PPUSH
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
2458: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: LD_INT 3
2467: PPUSH
2468: LD_INT 0
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_INT 0
2476: PPUSH
2477: LD_INT 0
2479: PPUSH
2480: LD_INT 14
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL 53763 0 9
// side := 3 ;
2490: LD_ADDR_VAR 0 5
2494: PUSH
2495: LD_INT 3
2497: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2498: LD_INT 38
2500: PPUSH
2501: LD_VAR 0 5
2505: PPUSH
2506: LD_INT 2
2508: PPUSH
2509: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2513: LD_INT 39
2515: PPUSH
2516: LD_VAR 0 5
2520: PPUSH
2521: LD_INT 2
2523: PPUSH
2524: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2528: LD_INT 34
2530: PPUSH
2531: LD_VAR 0 5
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 208
2553: PUSH
2554: LD_INT 163
2556: PUSH
2557: LD_INT 4
2559: PUSH
2560: LD_INT 0
2562: PUSH
2563: LD_INT 0
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 3
2576: PUSH
2577: LD_INT 194
2579: PUSH
2580: LD_INT 161
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 0
2588: PUSH
2589: LD_INT 0
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 17
2602: PUSH
2603: LD_INT 190
2605: PUSH
2606: LD_INT 161
2608: PUSH
2609: LD_INT 1
2611: PUSH
2612: LD_INT 0
2614: PUSH
2615: LD_INT 0
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 5
2628: PUSH
2629: LD_INT 200
2631: PUSH
2632: LD_INT 145
2634: PUSH
2635: LD_INT 3
2637: PUSH
2638: LD_INT 0
2640: PUSH
2641: LD_INT 0
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 32
2654: PUSH
2655: LD_INT 192
2657: PUSH
2658: LD_INT 144
2660: PUSH
2661: LD_INT 3
2663: PUSH
2664: LD_INT 0
2666: PUSH
2667: LD_INT 0
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 26
2680: PUSH
2681: LD_INT 216
2683: PUSH
2684: LD_INT 172
2686: PUSH
2687: LD_INT 3
2689: PUSH
2690: LD_INT 0
2692: PUSH
2693: LD_INT 0
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: PUSH
2704: LD_INT 26
2706: PUSH
2707: LD_INT 218
2709: PUSH
2710: LD_INT 176
2712: PUSH
2713: LD_INT 3
2715: PUSH
2716: LD_INT 0
2718: PUSH
2719: LD_INT 0
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 29
2732: PUSH
2733: LD_INT 182
2735: PUSH
2736: LD_INT 149
2738: PUSH
2739: LD_INT 3
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 8
2758: PUSH
2759: LD_INT 201
2761: PUSH
2762: LD_INT 171
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 10
2770: PUSH
2771: LD_INT 11
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 32
2784: PUSH
2785: LD_INT 188
2787: PUSH
2788: LD_INT 167
2790: PUSH
2791: LD_INT 0
2793: PUSH
2794: LD_INT 0
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: PUSH
2808: LD_INT 32
2810: PUSH
2811: LD_INT 202
2813: PUSH
2814: LD_INT 179
2816: PUSH
2817: LD_INT 0
2819: PUSH
2820: LD_INT 0
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: LIST
2833: PUSH
2834: LD_INT 32
2836: PUSH
2837: LD_INT 209
2839: PUSH
2840: LD_INT 182
2842: PUSH
2843: LD_INT 0
2845: PUSH
2846: LD_INT 0
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_INT 32
2862: PUSH
2863: LD_INT 220
2865: PUSH
2866: LD_INT 183
2868: PUSH
2869: LD_INT 5
2871: PUSH
2872: LD_INT 0
2874: PUSH
2875: LD_INT 0
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: PUSH
2886: LD_INT 32
2888: PUSH
2889: LD_INT 225
2891: PUSH
2892: LD_INT 181
2894: PUSH
2895: LD_INT 5
2897: PUSH
2898: LD_INT 0
2900: PUSH
2901: LD_INT 0
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 26
2914: PUSH
2915: LD_INT 220
2917: PUSH
2918: LD_INT 174
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 0
2926: PUSH
2927: LD_INT 0
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 1
2940: PUSH
2941: LD_INT 84
2943: PUSH
2944: LD_INT 128
2946: PUSH
2947: LD_INT 4
2949: PUSH
2950: LD_INT 0
2952: PUSH
2953: LD_INT 0
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: PUSH
2964: LD_INT 3
2966: PUSH
2967: LD_INT 68
2969: PUSH
2970: LD_INT 121
2972: PUSH
2973: LD_INT 1
2975: PUSH
2976: LD_INT 0
2978: PUSH
2979: LD_INT 0
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: PUSH
2990: LD_INT 19
2992: PUSH
2993: LD_INT 72
2995: PUSH
2996: LD_INT 125
2998: PUSH
2999: LD_INT 5
3001: PUSH
3002: LD_INT 0
3004: PUSH
3005: LD_INT 0
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 18
3018: PUSH
3019: LD_INT 68
3021: PUSH
3022: LD_INT 124
3024: PUSH
3025: LD_INT 0
3027: PUSH
3028: LD_INT 0
3030: PUSH
3031: LD_INT 0
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: PUSH
3042: LD_INT 24
3044: PUSH
3045: LD_INT 64
3047: PUSH
3048: LD_INT 121
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: LD_INT 0
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 17
3070: PUSH
3071: LD_INT 65
3073: PUSH
3074: LD_INT 118
3076: PUSH
3077: LD_INT 2
3079: PUSH
3080: LD_INT 0
3082: PUSH
3083: LD_INT 0
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: PUSH
3094: LD_INT 21
3096: PUSH
3097: LD_INT 68
3099: PUSH
3100: LD_INT 117
3102: PUSH
3103: LD_INT 3
3105: PUSH
3106: LD_INT 0
3108: PUSH
3109: LD_INT 0
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 8
3122: PUSH
3123: LD_INT 68
3125: PUSH
3126: LD_INT 130
3128: PUSH
3129: LD_INT 1
3131: PUSH
3132: LD_INT 14
3134: PUSH
3135: LD_INT 10
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 8
3148: PUSH
3149: LD_INT 67
3151: PUSH
3152: LD_INT 110
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: LD_INT 11
3160: PUSH
3161: LD_INT 12
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 28
3174: PUSH
3175: LD_INT 85
3177: PUSH
3178: LD_INT 108
3180: PUSH
3181: LD_INT 2
3183: PUSH
3184: LD_INT 0
3186: PUSH
3187: LD_INT 0
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: PUSH
3198: LD_INT 28
3200: PUSH
3201: LD_INT 85
3203: PUSH
3204: LD_INT 124
3206: PUSH
3207: LD_INT 2
3209: PUSH
3210: LD_INT 0
3212: PUSH
3213: LD_INT 0
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 30
3226: PUSH
3227: LD_INT 97
3229: PUSH
3230: LD_INT 119
3232: PUSH
3233: LD_INT 2
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: LD_INT 0
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 5
3252: PUSH
3253: LD_INT 111
3255: PUSH
3256: LD_INT 138
3258: PUSH
3259: LD_INT 4
3261: PUSH
3262: LD_INT 0
3264: PUSH
3265: LD_INT 0
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: PUSH
3276: LD_INT 33
3278: PUSH
3279: LD_INT 104
3281: PUSH
3282: LD_INT 130
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 0
3290: PUSH
3291: LD_INT 0
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 33
3304: PUSH
3305: LD_INT 110
3307: PUSH
3308: LD_INT 142
3310: PUSH
3311: LD_INT 5
3313: PUSH
3314: LD_INT 0
3316: PUSH
3317: LD_INT 0
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: PUSH
3328: LD_INT 33
3330: PUSH
3331: LD_INT 91
3333: PUSH
3334: LD_INT 131
3336: PUSH
3337: LD_INT 5
3339: PUSH
3340: LD_INT 0
3342: PUSH
3343: LD_INT 0
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 33
3356: PUSH
3357: LD_INT 107
3359: PUSH
3360: LD_INT 157
3362: PUSH
3363: LD_INT 5
3365: PUSH
3366: LD_INT 0
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: PUSH
3380: LD_INT 33
3382: PUSH
3383: LD_INT 104
3385: PUSH
3386: LD_INT 160
3388: PUSH
3389: LD_INT 5
3391: PUSH
3392: LD_INT 0
3394: PUSH
3395: LD_INT 0
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 33
3408: PUSH
3409: LD_INT 101
3411: PUSH
3412: LD_INT 162
3414: PUSH
3415: LD_INT 5
3417: PUSH
3418: LD_INT 0
3420: PUSH
3421: LD_INT 0
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 32
3434: PUSH
3435: LD_INT 87
3437: PUSH
3438: LD_INT 157
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: LD_INT 0
3446: PUSH
3447: LD_INT 0
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_INT 32
3460: PUSH
3461: LD_INT 105
3463: PUSH
3464: LD_INT 158
3466: PUSH
3467: LD_INT 5
3469: PUSH
3470: LD_INT 0
3472: PUSH
3473: LD_INT 0
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 33
3486: PUSH
3487: LD_INT 91
3489: PUSH
3490: LD_INT 118
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: LD_INT 0
3498: PUSH
3499: LD_INT 0
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 33
3512: PUSH
3513: LD_INT 89
3515: PUSH
3516: LD_INT 107
3518: PUSH
3519: LD_INT 4
3521: PUSH
3522: LD_INT 0
3524: PUSH
3525: LD_INT 0
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: PUSH
3536: LD_INT 5
3538: PUSH
3539: LD_INT 86
3541: PUSH
3542: LD_INT 96
3544: PUSH
3545: LD_INT 3
3547: PUSH
3548: LD_INT 0
3550: PUSH
3551: LD_INT 0
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 33
3564: PUSH
3565: LD_INT 91
3567: PUSH
3568: LD_INT 102
3570: PUSH
3571: LD_INT 4
3573: PUSH
3574: LD_INT 0
3576: PUSH
3577: LD_INT 0
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 32
3590: PUSH
3591: LD_INT 80
3593: PUSH
3594: LD_INT 95
3596: PUSH
3597: LD_INT 3
3599: PUSH
3600: LD_INT 0
3602: PUSH
3603: LD_INT 0
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 28
3616: PUSH
3617: LD_INT 77
3619: PUSH
3620: LD_INT 105
3622: PUSH
3623: LD_INT 3
3625: PUSH
3626: LD_INT 0
3628: PUSH
3629: LD_INT 0
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 28
3642: PUSH
3643: LD_INT 85
3645: PUSH
3646: LD_INT 113
3648: PUSH
3649: LD_INT 3
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: LD_INT 0
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 28
3668: PUSH
3669: LD_INT 55
3671: PUSH
3672: LD_INT 97
3674: PUSH
3675: LD_INT 3
3677: PUSH
3678: LD_INT 0
3680: PUSH
3681: LD_INT 0
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: PUSH
3692: LD_INT 28
3694: PUSH
3695: LD_INT 88
3697: PUSH
3698: LD_INT 128
3700: PUSH
3701: LD_INT 3
3703: PUSH
3704: LD_INT 0
3706: PUSH
3707: LD_INT 0
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 32
3720: PUSH
3721: LD_INT 69
3723: PUSH
3724: LD_INT 101
3726: PUSH
3727: LD_INT 2
3729: PUSH
3730: LD_INT 0
3732: PUSH
3733: LD_INT 0
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_INT 1
3746: PUSH
3747: LD_INT 34
3749: PUSH
3750: LD_INT 23
3752: PUSH
3753: LD_INT 4
3755: PUSH
3756: LD_INT 0
3758: PUSH
3759: LD_INT 0
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: PUSH
3770: LD_INT 8
3772: PUSH
3773: LD_INT 25
3775: PUSH
3776: LD_INT 4
3778: PUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 11
3784: PUSH
3785: LD_INT 10
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 8
3798: PUSH
3799: LD_INT 15
3801: PUSH
3802: LD_INT 4
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 14
3810: PUSH
3811: LD_INT 12
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: PUSH
3822: LD_INT 29
3824: PUSH
3825: LD_INT 55
3827: PUSH
3828: LD_INT 35
3830: PUSH
3831: LD_INT 2
3833: PUSH
3834: LD_INT 0
3836: PUSH
3837: LD_INT 0
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: PUSH
3848: LD_INT 29
3850: PUSH
3851: LD_INT 24
3853: PUSH
3854: LD_INT 44
3856: PUSH
3857: LD_INT 2
3859: PUSH
3860: LD_INT 0
3862: PUSH
3863: LD_INT 0
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 34
3879: PUSH
3880: LD_INT 32
3882: PUSH
3883: LD_INT 4
3885: PUSH
3886: LD_INT 0
3888: PUSH
3889: LD_INT 0
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: PUSH
3900: LD_INT 3
3902: PUSH
3903: LD_INT 14
3905: PUSH
3906: LD_INT 16
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: LD_INT 0
3914: PUSH
3915: LD_INT 0
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 24
3928: PUSH
3929: LD_INT 10
3931: PUSH
3932: LD_INT 16
3934: PUSH
3935: LD_INT 1
3937: PUSH
3938: LD_INT 0
3940: PUSH
3941: LD_INT 0
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 21
3954: PUSH
3955: LD_INT 11
3957: PUSH
3958: LD_INT 13
3960: PUSH
3961: LD_INT 2
3963: PUSH
3964: LD_INT 0
3966: PUSH
3967: LD_INT 0
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 18
3980: PUSH
3981: LD_INT 14
3983: PUSH
3984: LD_INT 12
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 0
3992: PUSH
3993: LD_INT 0
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 16
4006: PUSH
4007: LD_INT 14
4009: PUSH
4010: LD_INT 19
4012: PUSH
4013: LD_INT 0
4015: PUSH
4016: LD_INT 0
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 17
4032: PUSH
4033: LD_INT 18
4035: PUSH
4036: LD_INT 20
4038: PUSH
4039: LD_INT 5
4041: PUSH
4042: LD_INT 0
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: LD_INT 28
4058: PUSH
4059: LD_INT 10
4061: PUSH
4062: LD_INT 5
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: LD_INT 0
4070: PUSH
4071: LD_INT 0
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 28
4084: PUSH
4085: LD_INT 8
4087: PUSH
4088: LD_INT 8
4090: PUSH
4091: LD_INT 1
4093: PUSH
4094: LD_INT 0
4096: PUSH
4097: LD_INT 0
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 26
4110: PUSH
4111: LD_INT 19
4113: PUSH
4114: LD_INT 2
4116: PUSH
4117: LD_INT 1
4119: PUSH
4120: LD_INT 0
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 26
4136: PUSH
4137: LD_INT 30
4139: PUSH
4140: LD_INT 2
4142: PUSH
4143: LD_INT 1
4145: PUSH
4146: LD_INT 0
4148: PUSH
4149: LD_INT 0
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: LD_INT 5
4162: PUSH
4163: LD_INT 59
4165: PUSH
4166: LD_INT 20
4168: PUSH
4169: LD_INT 4
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: LD_INT 0
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: PUSH
4186: LD_INT 32
4188: PUSH
4189: LD_INT 60
4191: PUSH
4192: LD_INT 24
4194: PUSH
4195: LD_INT 4
4197: PUSH
4198: LD_INT 0
4200: PUSH
4201: LD_INT 0
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 32
4214: PUSH
4215: LD_INT 61
4217: PUSH
4218: LD_INT 45
4220: PUSH
4221: LD_INT 5
4223: PUSH
4224: LD_INT 0
4226: PUSH
4227: LD_INT 0
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 32
4240: PUSH
4241: LD_INT 52
4243: PUSH
4244: LD_INT 51
4246: PUSH
4247: LD_INT 5
4249: PUSH
4250: LD_INT 0
4252: PUSH
4253: LD_INT 0
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 56
4269: PUSH
4270: LD_INT 51
4272: PUSH
4273: LD_INT 5
4275: PUSH
4276: LD_INT 0
4278: PUSH
4279: LD_INT 0
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 33
4292: PUSH
4293: LD_INT 62
4295: PUSH
4296: LD_INT 49
4298: PUSH
4299: LD_INT 5
4301: PUSH
4302: LD_INT 0
4304: PUSH
4305: LD_INT 0
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 33
4318: PUSH
4319: LD_INT 41
4321: PUSH
4322: LD_INT 47
4324: PUSH
4325: LD_INT 5
4327: PUSH
4328: LD_INT 0
4330: PUSH
4331: LD_INT 0
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: PUSH
4342: LD_INT 33
4344: PUSH
4345: LD_INT 33
4347: PUSH
4348: LD_INT 52
4350: PUSH
4351: LD_INT 5
4353: PUSH
4354: LD_INT 0
4356: PUSH
4357: LD_INT 0
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 5
4370: PUSH
4371: LD_INT 31
4373: PUSH
4374: LD_INT 40
4376: PUSH
4377: LD_INT 0
4379: PUSH
4380: LD_INT 0
4382: PUSH
4383: LD_INT 0
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: PUSH
4394: LD_INT 33
4396: PUSH
4397: LD_INT 65
4399: PUSH
4400: LD_INT 37
4402: PUSH
4403: LD_INT 5
4405: PUSH
4406: LD_INT 0
4408: PUSH
4409: LD_INT 0
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 33
4422: PUSH
4423: LD_INT 63
4425: PUSH
4426: LD_INT 29
4428: PUSH
4429: LD_INT 4
4431: PUSH
4432: LD_INT 0
4434: PUSH
4435: LD_INT 0
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 33
4448: PUSH
4449: LD_INT 54
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: LD_INT 4
4457: PUSH
4458: LD_INT 0
4460: PUSH
4461: LD_INT 0
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 33
4474: PUSH
4475: LD_INT 56
4477: PUSH
4478: LD_INT 15
4480: PUSH
4481: LD_INT 4
4483: PUSH
4484: LD_INT 0
4486: PUSH
4487: LD_INT 0
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PUSH
4498: LD_INT 33
4500: PUSH
4501: LD_INT 51
4503: PUSH
4504: LD_INT 6
4506: PUSH
4507: LD_INT 4
4509: PUSH
4510: LD_INT 0
4512: PUSH
4513: LD_INT 0
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 26
4526: PUSH
4527: LD_INT 39
4529: PUSH
4530: LD_INT 25
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: LD_INT 0
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 26
4552: PUSH
4553: LD_INT 37
4555: PUSH
4556: LD_INT 21
4558: PUSH
4559: LD_INT 0
4561: PUSH
4562: LD_INT 0
4564: PUSH
4565: LD_INT 0
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 32
4578: PUSH
4579: LD_INT 35
4581: PUSH
4582: LD_INT 17
4584: PUSH
4585: LD_INT 4
4587: PUSH
4588: LD_INT 0
4590: PUSH
4591: LD_INT 0
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_INT 33
4604: PUSH
4605: LD_INT 35
4607: PUSH
4608: LD_INT 28
4610: PUSH
4611: LD_INT 4
4613: PUSH
4614: LD_INT 0
4616: PUSH
4617: LD_INT 0
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: LD_INT 33
4630: PUSH
4631: LD_INT 28
4633: PUSH
4634: LD_INT 46
4636: PUSH
4637: LD_INT 5
4639: PUSH
4640: LD_INT 0
4642: PUSH
4643: LD_INT 0
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_INT 33
4656: PUSH
4657: LD_INT 31
4659: PUSH
4660: LD_INT 6
4662: PUSH
4663: LD_INT 4
4665: PUSH
4666: LD_INT 0
4668: PUSH
4669: LD_INT 0
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 26
4682: PUSH
4683: LD_INT 54
4685: PUSH
4686: LD_INT 38
4688: PUSH
4689: LD_INT 4
4691: PUSH
4692: LD_INT 0
4694: PUSH
4695: LD_INT 0
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: PUSH
4706: LD_INT 33
4708: PUSH
4709: LD_INT 207
4711: PUSH
4712: LD_INT 167
4714: PUSH
4715: LD_INT 3
4717: PUSH
4718: LD_INT 0
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: PUSH
4732: LD_INT 30
4734: PUSH
4735: LD_INT 43
4737: PUSH
4738: LD_INT 2
4740: PUSH
4741: LD_INT 4
4743: PUSH
4744: LD_INT 0
4746: PUSH
4747: LD_INT 0
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: ST_TO_ADDR
// for i in tmp do
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: LD_VAR 0 4
4854: PUSH
4855: FOR_IN
4856: IFFALSE 5087
// begin uc_side := side ;
4858: LD_ADDR_OWVAR 20
4862: PUSH
4863: LD_VAR 0 5
4867: ST_TO_ADDR
// uc_nation := nation_russian ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4876: LD_ADDR_OWVAR 42
4880: PUSH
4881: LD_VAR 0 2
4885: PUSH
4886: LD_INT 1
4888: ARRAY
4889: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4890: LD_ADDR_OWVAR 43
4894: PUSH
4895: LD_INT 5
4897: PPUSH
4898: LD_INT 6
4900: PPUSH
4901: CALL_OW 12
4905: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4906: LD_ADDR_OWVAR 44
4910: PUSH
4911: LD_VAR 0 2
4915: PUSH
4916: LD_INT 5
4918: ARRAY
4919: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4920: LD_ADDR_OWVAR 45
4924: PUSH
4925: LD_VAR 0 2
4929: PUSH
4930: LD_INT 6
4932: ARRAY
4933: ST_TO_ADDR
// sr := 0 ;
4934: LD_ADDR_VAR 0 6
4938: PUSH
4939: LD_INT 0
4941: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4942: LD_VAR 0 2
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PUSH
4951: LD_INT 29
4953: EQUAL
4954: IFFALSE 4966
// sr := mat_oil else
4956: LD_ADDR_VAR 0 6
4960: PUSH
4961: LD_INT 2
4963: ST_TO_ADDR
4964: GO 4988
// if i [ 1 ] = b_siberite_mine then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_INT 1
4973: ARRAY
4974: PUSH
4975: LD_INT 30
4977: EQUAL
4978: IFFALSE 4988
// sr := mat_siberit ;
4980: LD_ADDR_VAR 0 6
4984: PUSH
4985: LD_INT 3
4987: ST_TO_ADDR
// if sr then
4988: LD_VAR 0 6
4992: IFFALSE 5048
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
4994: LD_VAR 0 2
4998: PUSH
4999: LD_INT 2
5001: ARRAY
5002: PPUSH
5003: LD_VAR 0 2
5007: PUSH
5008: LD_INT 3
5010: ARRAY
5011: PPUSH
5012: LD_VAR 0 6
5016: PPUSH
5017: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5021: LD_VAR 0 2
5025: PUSH
5026: LD_INT 2
5028: ARRAY
5029: PPUSH
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 3
5037: ARRAY
5038: PPUSH
5039: LD_VAR 0 5
5043: PPUSH
5044: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5048: LD_ADDR_VAR 0 3
5052: PUSH
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 2
5066: PUSH
5067: LD_INT 3
5069: ARRAY
5070: PPUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_INT 4
5078: ARRAY
5079: PPUSH
5080: CALL_OW 47
5084: ST_TO_ADDR
// end ;
5085: GO 4855
5087: POP
5088: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5089: LD_ADDR_VAR 0 7
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_VAR 0 5
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 30
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 69
5124: ST_TO_ADDR
// if not depot then
5125: LD_VAR 0 7
5129: NOT
5130: IFFALSE 5134
// exit ;
5132: GO 5478
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5134: LD_ADDR_VAR 0 8
5138: PUSH
5139: LD_INT 84
5141: PPUSH
5142: LD_INT 128
5144: PPUSH
5145: CALL_OW 428
5149: PPUSH
5150: LD_INT 15
5152: PPUSH
5153: LD_INT 0
5155: PPUSH
5156: LD_INT 6
5158: PUSH
5159: LD_INT 7
5161: PUSH
5162: LD_INT 8
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: LIST
5169: PUSH
5170: LD_OWVAR 67
5174: ARRAY
5175: PPUSH
5176: LD_INT 3000
5178: PUSH
5179: LD_INT 300
5181: PUSH
5182: LD_INT 100
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: PPUSH
5190: LD_INT 12
5192: PUSH
5193: LD_INT 6
5195: PUSH
5196: LD_INT 6
5198: PUSH
5199: LD_INT 4
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL 29358 0 6
5212: ST_TO_ADDR
// if not base then
5213: LD_VAR 0 8
5217: NOT
5218: IFFALSE 5222
// exit ;
5220: GO 5478
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5222: LD_ADDR_EXP 36
5226: PUSH
5227: LD_EXP 36
5231: PPUSH
5232: LD_EXP 7
5236: PPUSH
5237: LD_VAR 0 8
5241: PPUSH
5242: CALL_OW 1
5246: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5247: LD_ADDR_VAR 0 8
5251: PUSH
5252: LD_INT 34
5254: PPUSH
5255: LD_INT 23
5257: PPUSH
5258: CALL_OW 428
5262: PPUSH
5263: LD_INT 11
5265: PPUSH
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: LD_INT 8
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PPUSH
5289: LD_INT 20000
5291: PUSH
5292: LD_INT 3000
5294: PUSH
5295: LD_INT 1000
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: PPUSH
5303: LD_INT 12
5305: PUSH
5306: LD_INT 6
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: LD_INT 4
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL 29358 0 6
5325: ST_TO_ADDR
// if not base then
5326: LD_VAR 0 8
5330: NOT
5331: IFFALSE 5335
// exit ;
5333: GO 5478
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5335: LD_ADDR_EXP 36
5339: PUSH
5340: LD_EXP 36
5344: PPUSH
5345: LD_EXP 8
5349: PPUSH
5350: LD_VAR 0 8
5354: PPUSH
5355: CALL_OW 1
5359: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5360: LD_ADDR_EXP 14
5364: PUSH
5365: LD_INT 22
5367: PUSH
5368: LD_INT 3
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 30
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PUSH
5394: LD_INT 1
5396: ARRAY
5397: PPUSH
5398: LD_INT 25
5400: PPUSH
5401: LD_INT 0
5403: PPUSH
5404: LD_INT 6
5406: PUSH
5407: LD_INT 7
5409: PUSH
5410: LD_INT 8
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: LIST
5417: PUSH
5418: LD_OWVAR 67
5422: ARRAY
5423: PPUSH
5424: LD_INT 500
5426: PUSH
5427: LD_INT 100
5429: PUSH
5430: LD_INT 10
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: PPUSH
5438: LD_INT 6
5440: PUSH
5441: LD_INT 7
5443: PUSH
5444: LD_INT 8
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: LIST
5451: PUSH
5452: LD_OWVAR 67
5456: ARRAY
5457: PUSH
5458: LD_INT 2
5460: PUSH
5461: LD_INT 0
5463: PUSH
5464: LD_INT 1
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: PPUSH
5473: CALL 29358 0 6
5477: ST_TO_ADDR
// end ;
5478: LD_VAR 0 1
5482: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5483: LD_INT 0
5485: PPUSH
5486: PPUSH
5487: PPUSH
5488: PPUSH
5489: PPUSH
5490: PPUSH
5491: PPUSH
5492: PPUSH
5493: PPUSH
5494: PPUSH
5495: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5496: LD_INT 0
5498: PPUSH
5499: LD_INT 0
5501: PPUSH
5502: LD_INT 6
5504: PPUSH
5505: LD_INT 0
5507: PPUSH
5508: LD_INT 0
5510: PPUSH
5511: LD_INT 0
5513: PPUSH
5514: LD_INT 0
5516: PPUSH
5517: LD_INT 8
5519: PPUSH
5520: LD_INT 0
5522: PPUSH
5523: CALL 53763 0 9
// side := 8 ;
5527: LD_ADDR_VAR 0 8
5531: PUSH
5532: LD_INT 8
5534: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_INT 20
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: CALL_OW 517
5550: ST_TO_ADDR
// if Difficulty > 2 then
5551: LD_OWVAR 67
5555: PUSH
5556: LD_INT 2
5558: GREATER
5559: IFFALSE 5703
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5561: LD_ADDR_VAR 0 6
5565: PUSH
5566: LD_INT 27
5568: PPUSH
5569: LD_INT 0
5571: PPUSH
5572: CALL_OW 517
5576: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: DOUBLE
5583: LD_INT 1
5585: DEC
5586: ST_TO_ADDR
5587: LD_VAR 0 6
5591: PUSH
5592: LD_INT 1
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5701
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5599: LD_ADDR_VAR 0 5
5603: PUSH
5604: LD_VAR 0 5
5608: PPUSH
5609: LD_INT 1
5611: PUSH
5612: LD_VAR 0 5
5616: PUSH
5617: LD_INT 1
5619: ARRAY
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PPUSH
5629: LD_VAR 0 6
5633: PUSH
5634: LD_INT 1
5636: ARRAY
5637: PUSH
5638: LD_VAR 0 2
5642: ARRAY
5643: PPUSH
5644: CALL 26071 0 3
5648: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5649: LD_ADDR_VAR 0 5
5653: PUSH
5654: LD_VAR 0 5
5658: PPUSH
5659: LD_INT 2
5661: PUSH
5662: LD_VAR 0 5
5666: PUSH
5667: LD_INT 2
5669: ARRAY
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 2
5686: ARRAY
5687: PUSH
5688: LD_VAR 0 2
5692: ARRAY
5693: PPUSH
5694: CALL 26071 0 3
5698: ST_TO_ADDR
// end ;
5699: GO 5596
5701: POP
5702: POP
// end ; if tmp then
5703: LD_VAR 0 5
5707: IFFALSE 5835
// begin for i = 1 to tmp [ 1 ] do
5709: LD_ADDR_VAR 0 2
5713: PUSH
5714: DOUBLE
5715: LD_INT 1
5717: DEC
5718: ST_TO_ADDR
5719: LD_VAR 0 5
5723: PUSH
5724: LD_INT 1
5726: ARRAY
5727: PUSH
5728: FOR_TO
5729: IFFALSE 5833
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5731: LD_VAR 0 5
5735: PUSH
5736: LD_INT 1
5738: ARRAY
5739: PUSH
5740: LD_VAR 0 2
5744: ARRAY
5745: PPUSH
5746: LD_VAR 0 5
5750: PUSH
5751: LD_INT 2
5753: ARRAY
5754: PUSH
5755: LD_VAR 0 2
5759: ARRAY
5760: PPUSH
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_INT 0
5768: PPUSH
5769: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5773: LD_ADDR_EXP 16
5777: PUSH
5778: LD_EXP 16
5782: PPUSH
5783: LD_EXP 16
5787: PUSH
5788: LD_INT 1
5790: PLUS
5791: PPUSH
5792: LD_VAR 0 5
5796: PUSH
5797: LD_INT 1
5799: ARRAY
5800: PUSH
5801: LD_VAR 0 2
5805: ARRAY
5806: PUSH
5807: LD_VAR 0 5
5811: PUSH
5812: LD_INT 2
5814: ARRAY
5815: PUSH
5816: LD_VAR 0 2
5820: ARRAY
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PPUSH
5826: CALL_OW 2
5830: ST_TO_ADDR
// end ;
5831: GO 5728
5833: POP
5834: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5835: LD_ADDR_VAR 0 7
5839: PUSH
5840: LD_INT 165
5842: PUSH
5843: LD_INT 156
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: LD_INT 143
5852: PUSH
5853: LD_INT 145
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 152
5862: PUSH
5863: LD_INT 165
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: LD_INT 123
5872: PUSH
5873: LD_INT 153
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 161
5882: PUSH
5883: LD_INT 215
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 172
5892: PUSH
5893: LD_INT 100
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: LD_INT 148
5902: PUSH
5903: LD_INT 83
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 122
5912: PUSH
5913: LD_INT 68
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 105
5922: PUSH
5923: LD_INT 74
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 113
5932: PUSH
5933: LD_INT 97
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: ST_TO_ADDR
// for i in cameras do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_VAR 0 7
5961: PUSH
5962: FOR_IN
5963: IFFALSE 5994
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5965: LD_VAR 0 2
5969: PUSH
5970: LD_INT 1
5972: ARRAY
5973: PPUSH
5974: LD_VAR 0 2
5978: PUSH
5979: LD_INT 2
5981: ARRAY
5982: PPUSH
5983: LD_VAR 0 8
5987: PPUSH
5988: CALL_OW 244
5992: GO 5962
5994: POP
5995: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
5996: LD_ADDR_VAR 0 5
6000: PUSH
6001: LD_INT 1
6003: PUSH
6004: LD_INT 144
6006: PUSH
6007: LD_INT 110
6009: PUSH
6010: LD_INT 1
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 3
6029: PUSH
6030: LD_INT 151
6032: PUSH
6033: LD_INT 118
6035: PUSH
6036: LD_INT 0
6038: PUSH
6039: LD_INT 0
6041: PUSH
6042: LD_INT 0
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 8
6055: PUSH
6056: LD_INT 158
6058: PUSH
6059: LD_INT 110
6061: PUSH
6062: LD_INT 4
6064: PUSH
6065: LD_INT 10
6067: PUSH
6068: LD_INT 15
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 23
6081: PUSH
6082: LD_INT 154
6084: PUSH
6085: LD_INT 121
6087: PUSH
6088: LD_INT 5
6090: PUSH
6091: LD_INT 0
6093: PUSH
6094: LD_INT 0
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 22
6107: PUSH
6108: LD_INT 155
6110: PUSH
6111: LD_INT 118
6113: PUSH
6114: LD_INT 4
6116: PUSH
6117: LD_INT 0
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 21
6133: PUSH
6134: LD_INT 151
6136: PUSH
6137: LD_INT 122
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: PUSH
6157: LD_INT 18
6159: PUSH
6160: LD_INT 148
6162: PUSH
6163: LD_INT 118
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: LD_INT 0
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 17
6185: PUSH
6186: LD_INT 147
6188: PUSH
6189: LD_INT 114
6191: PUSH
6192: LD_INT 2
6194: PUSH
6195: LD_INT 0
6197: PUSH
6198: LD_INT 0
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 29
6211: PUSH
6212: LD_INT 163
6214: PUSH
6215: LD_INT 120
6217: PUSH
6218: LD_INT 5
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 27
6237: PUSH
6238: LD_INT 137
6240: PUSH
6241: LD_INT 116
6243: PUSH
6244: LD_INT 3
6246: PUSH
6247: LD_INT 0
6249: PUSH
6250: LD_INT 0
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 27
6263: PUSH
6264: LD_INT 133
6266: PUSH
6267: LD_INT 111
6269: PUSH
6270: LD_INT 1
6272: PUSH
6273: LD_INT 0
6275: PUSH
6276: LD_INT 0
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 27
6289: PUSH
6290: LD_INT 132
6292: PUSH
6293: LD_INT 106
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 26
6315: PUSH
6316: LD_INT 137
6318: PUSH
6319: LD_INT 111
6321: PUSH
6322: LD_INT 0
6324: PUSH
6325: LD_INT 0
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: PUSH
6339: LD_INT 8
6341: PUSH
6342: LD_INT 141
6344: PUSH
6345: LD_INT 117
6347: PUSH
6348: LD_INT 1
6350: PUSH
6351: LD_INT 13
6353: PUSH
6354: LD_INT 11
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 30
6367: PUSH
6368: LD_INT 140
6370: PUSH
6371: LD_INT 128
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: LD_INT 0
6379: PUSH
6380: LD_INT 0
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 5
6393: PUSH
6394: LD_INT 146
6396: PUSH
6397: LD_INT 96
6399: PUSH
6400: LD_INT 3
6402: PUSH
6403: LD_INT 0
6405: PUSH
6406: LD_INT 0
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: LD_INT 32
6419: PUSH
6420: LD_INT 150
6422: PUSH
6423: LD_INT 98
6425: PUSH
6426: LD_INT 3
6428: PUSH
6429: LD_INT 0
6431: PUSH
6432: LD_INT 0
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 32
6445: PUSH
6446: LD_INT 142
6448: PUSH
6449: LD_INT 95
6451: PUSH
6452: LD_INT 3
6454: PUSH
6455: LD_INT 0
6457: PUSH
6458: LD_INT 0
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 32
6471: PUSH
6472: LD_INT 159
6474: PUSH
6475: LD_INT 104
6477: PUSH
6478: LD_INT 3
6480: PUSH
6481: LD_INT 0
6483: PUSH
6484: LD_INT 0
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 32
6497: PUSH
6498: LD_INT 133
6500: PUSH
6501: LD_INT 95
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: LD_INT 0
6509: PUSH
6510: LD_INT 0
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 32
6523: PUSH
6524: LD_INT 131
6526: PUSH
6527: LD_INT 102
6529: PUSH
6530: LD_INT 2
6532: PUSH
6533: LD_INT 0
6535: PUSH
6536: LD_INT 0
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 32
6549: PUSH
6550: LD_INT 164
6552: PUSH
6553: LD_INT 144
6555: PUSH
6556: LD_INT 0
6558: PUSH
6559: LD_INT 0
6561: PUSH
6562: LD_INT 0
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 32
6575: PUSH
6576: LD_INT 146
6578: PUSH
6579: LD_INT 139
6581: PUSH
6582: LD_INT 0
6584: PUSH
6585: LD_INT 0
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 26
6601: PUSH
6602: LD_INT 143
6604: PUSH
6605: LD_INT 122
6607: PUSH
6608: LD_INT 4
6610: PUSH
6611: LD_INT 0
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 26
6627: PUSH
6628: LD_INT 164
6630: PUSH
6631: LD_INT 116
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 0
6639: PUSH
6640: LD_INT 0
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: ST_TO_ADDR
// for i in tmp do
6678: LD_ADDR_VAR 0 2
6682: PUSH
6683: LD_VAR 0 5
6687: PUSH
6688: FOR_IN
6689: IFFALSE 6920
// begin uc_side := side ;
6691: LD_ADDR_OWVAR 20
6695: PUSH
6696: LD_VAR 0 8
6700: ST_TO_ADDR
// uc_nation := nation_arabian ;
6701: LD_ADDR_OWVAR 21
6705: PUSH
6706: LD_INT 2
6708: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6709: LD_ADDR_OWVAR 42
6713: PUSH
6714: LD_VAR 0 2
6718: PUSH
6719: LD_INT 1
6721: ARRAY
6722: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6723: LD_ADDR_OWVAR 43
6727: PUSH
6728: LD_INT 5
6730: PPUSH
6731: LD_INT 6
6733: PPUSH
6734: CALL_OW 12
6738: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6739: LD_ADDR_OWVAR 44
6743: PUSH
6744: LD_VAR 0 2
6748: PUSH
6749: LD_INT 5
6751: ARRAY
6752: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6753: LD_ADDR_OWVAR 45
6757: PUSH
6758: LD_VAR 0 2
6762: PUSH
6763: LD_INT 6
6765: ARRAY
6766: ST_TO_ADDR
// sr := 0 ;
6767: LD_ADDR_VAR 0 9
6771: PUSH
6772: LD_INT 0
6774: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6775: LD_VAR 0 2
6779: PUSH
6780: LD_INT 1
6782: ARRAY
6783: PUSH
6784: LD_INT 29
6786: EQUAL
6787: IFFALSE 6799
// sr := mat_oil else
6789: LD_ADDR_VAR 0 9
6793: PUSH
6794: LD_INT 2
6796: ST_TO_ADDR
6797: GO 6821
// if i [ 1 ] = b_siberite_mine then
6799: LD_VAR 0 2
6803: PUSH
6804: LD_INT 1
6806: ARRAY
6807: PUSH
6808: LD_INT 30
6810: EQUAL
6811: IFFALSE 6821
// sr := mat_siberit ;
6813: LD_ADDR_VAR 0 9
6817: PUSH
6818: LD_INT 3
6820: ST_TO_ADDR
// if sr then
6821: LD_VAR 0 9
6825: IFFALSE 6881
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6827: LD_VAR 0 2
6831: PUSH
6832: LD_INT 2
6834: ARRAY
6835: PPUSH
6836: LD_VAR 0 2
6840: PUSH
6841: LD_INT 3
6843: ARRAY
6844: PPUSH
6845: LD_VAR 0 9
6849: PPUSH
6850: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6854: LD_VAR 0 2
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_VAR 0 2
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: LD_VAR 0 8
6876: PPUSH
6877: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6881: LD_ADDR_VAR 0 3
6885: PUSH
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 2
6893: ARRAY
6894: PPUSH
6895: LD_VAR 0 2
6899: PUSH
6900: LD_INT 3
6902: ARRAY
6903: PPUSH
6904: LD_VAR 0 2
6908: PUSH
6909: LD_INT 4
6911: ARRAY
6912: PPUSH
6913: CALL_OW 47
6917: ST_TO_ADDR
// end ;
6918: GO 6688
6920: POP
6921: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6922: LD_ADDR_VAR 0 10
6926: PUSH
6927: LD_INT 22
6929: PUSH
6930: LD_VAR 0 8
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 30
6941: PUSH
6942: LD_INT 1
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: ST_TO_ADDR
// if not depot then
6958: LD_VAR 0 10
6962: NOT
6963: IFFALSE 6967
// exit ;
6965: GO 7213
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6967: LD_ADDR_VAR 0 11
6971: PUSH
6972: LD_VAR 0 10
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: PPUSH
6981: LD_INT 6
6983: PPUSH
6984: LD_INT 0
6986: PPUSH
6987: LD_INT 7
6989: PUSH
6990: LD_INT 8
6992: PUSH
6993: LD_INT 10
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: PUSH
7001: LD_OWVAR 67
7005: ARRAY
7006: PPUSH
7007: LD_INT 3000
7009: PUSH
7010: LD_INT 300
7012: PUSH
7013: LD_INT 100
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: PPUSH
7021: LD_INT 14
7023: PUSH
7024: LD_INT 6
7026: PUSH
7027: LD_INT 6
7029: PUSH
7030: LD_INT 5
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL 29358 0 6
7043: ST_TO_ADDR
// if not base then
7044: LD_VAR 0 11
7048: NOT
7049: IFFALSE 7053
// exit ;
7051: GO 7213
// if Difficulty > 1 then
7053: LD_OWVAR 67
7057: PUSH
7058: LD_INT 1
7060: GREATER
7061: IFFALSE 7134
// begin InitHc ;
7063: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7067: LD_INT 1
7069: PPUSH
7070: LD_INT 5
7072: PPUSH
7073: LD_INT 5
7075: PUSH
7076: LD_INT 8
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_OWVAR 67
7087: PUSH
7088: LD_INT 1
7090: MINUS
7091: ARRAY
7092: PPUSH
7093: CALL_OW 380
// for i = 1 to Difficulty do
7097: LD_ADDR_VAR 0 2
7101: PUSH
7102: DOUBLE
7103: LD_INT 1
7105: DEC
7106: ST_TO_ADDR
7107: LD_OWVAR 67
7111: PUSH
7112: FOR_TO
7113: IFFALSE 7132
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7115: CALL_OW 44
7119: PPUSH
7120: LD_INT 24
7122: PPUSH
7123: LD_INT 0
7125: PPUSH
7126: CALL_OW 49
7130: GO 7112
7132: POP
7133: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7134: LD_ADDR_EXP 36
7138: PUSH
7139: LD_EXP 36
7143: PPUSH
7144: LD_EXP 6
7148: PPUSH
7149: LD_VAR 0 11
7153: PPUSH
7154: CALL_OW 1
7158: ST_TO_ADDR
// hc_gallery := ru ;
7159: LD_ADDR_OWVAR 33
7163: PUSH
7164: LD_STRING ru
7166: ST_TO_ADDR
// hc_face_number := 44 ;
7167: LD_ADDR_OWVAR 34
7171: PUSH
7172: LD_INT 44
7174: ST_TO_ADDR
// hc_name := Robert Farmer ;
7175: LD_ADDR_OWVAR 26
7179: PUSH
7180: LD_STRING Robert Farmer
7182: ST_TO_ADDR
// hc_sex := sex_male ;
7183: LD_ADDR_OWVAR 27
7187: PUSH
7188: LD_INT 1
7190: ST_TO_ADDR
// hc_class := 1 ;
7191: LD_ADDR_OWVAR 28
7195: PUSH
7196: LD_INT 1
7198: ST_TO_ADDR
// Farmer := CreateHuman ;
7199: LD_ADDR_EXP 13
7203: PUSH
7204: CALL_OW 44
7208: ST_TO_ADDR
// InitHc ;
7209: CALL_OW 19
// end ;
7213: LD_VAR 0 1
7217: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7218: LD_INT 0
7220: PPUSH
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7228: LD_INT 0
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: LD_INT 4
7236: PPUSH
7237: LD_INT 0
7239: PPUSH
7240: LD_INT 0
7242: PPUSH
7243: LD_INT 0
7245: PPUSH
7246: LD_INT 0
7248: PPUSH
7249: LD_INT 10
7251: PPUSH
7252: LD_INT 0
7254: PPUSH
7255: CALL 53763 0 9
// side := 4 ;
7259: LD_ADDR_VAR 0 5
7263: PUSH
7264: LD_INT 4
7266: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7267: LD_ADDR_VAR 0 4
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: LD_INT 144
7277: PUSH
7278: LD_INT 18
7280: PUSH
7281: LD_INT 4
7283: PUSH
7284: LD_INT 0
7286: PUSH
7287: LD_INT 0
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 3
7300: PUSH
7301: LD_INT 137
7303: PUSH
7304: LD_INT 8
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 0
7312: PUSH
7313: LD_INT 0
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 22
7326: PUSH
7327: LD_INT 141
7329: PUSH
7330: LD_INT 8
7332: PUSH
7333: LD_INT 4
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 0
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 25
7352: PUSH
7353: LD_INT 137
7355: PUSH
7356: LD_INT 5
7358: PUSH
7359: LD_INT 3
7361: PUSH
7362: LD_INT 0
7364: PUSH
7365: LD_INT 0
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 18
7378: PUSH
7379: LD_INT 137
7381: PUSH
7382: LD_INT 12
7384: PUSH
7385: LD_INT 0
7387: PUSH
7388: LD_INT 0
7390: PUSH
7391: LD_INT 0
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 17
7404: PUSH
7405: LD_INT 133
7407: PUSH
7408: LD_INT 4
7410: PUSH
7411: LD_INT 2
7413: PUSH
7414: LD_INT 0
7416: PUSH
7417: LD_INT 0
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 16
7430: PUSH
7431: LD_INT 140
7433: PUSH
7434: LD_INT 11
7436: PUSH
7437: LD_INT 5
7439: PUSH
7440: LD_INT 0
7442: PUSH
7443: LD_INT 0
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 8
7456: PUSH
7457: LD_INT 149
7459: PUSH
7460: LD_INT 26
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 10
7468: PUSH
7469: LD_INT 15
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 8
7482: PUSH
7483: LD_INT 142
7485: PUSH
7486: LD_INT 26
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: LD_INT 11
7494: PUSH
7495: LD_INT 12
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 27
7508: PUSH
7509: LD_INT 153
7511: PUSH
7512: LD_INT 32
7514: PUSH
7515: LD_INT 5
7517: PUSH
7518: LD_INT 0
7520: PUSH
7521: LD_INT 0
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 27
7534: PUSH
7535: LD_INT 145
7537: PUSH
7538: LD_INT 32
7540: PUSH
7541: LD_INT 3
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 0
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 27
7560: PUSH
7561: LD_INT 138
7563: PUSH
7564: LD_INT 2
7566: PUSH
7567: LD_INT 4
7569: PUSH
7570: LD_INT 0
7572: PUSH
7573: LD_INT 0
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 27
7586: PUSH
7587: LD_INT 144
7589: PUSH
7590: LD_INT 13
7592: PUSH
7593: LD_INT 0
7595: PUSH
7596: LD_INT 0
7598: PUSH
7599: LD_INT 0
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 26
7612: PUSH
7613: LD_INT 124
7615: PUSH
7616: LD_INT 2
7618: PUSH
7619: LD_INT 4
7621: PUSH
7622: LD_INT 0
7624: PUSH
7625: LD_INT 0
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 26
7638: PUSH
7639: LD_INT 121
7641: PUSH
7642: LD_INT 2
7644: PUSH
7645: LD_INT 2
7647: PUSH
7648: LD_INT 0
7650: PUSH
7651: LD_INT 0
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 26
7664: PUSH
7665: LD_INT 118
7667: PUSH
7668: LD_INT 2
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: LD_INT 0
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 29
7690: PUSH
7691: LD_INT 159
7693: PUSH
7694: LD_INT 47
7696: PUSH
7697: LD_INT 2
7699: PUSH
7700: LD_INT 0
7702: PUSH
7703: LD_INT 0
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 32
7716: PUSH
7717: LD_INT 146
7719: PUSH
7720: LD_INT 41
7722: PUSH
7723: LD_INT 0
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 33
7742: PUSH
7743: LD_INT 136
7745: PUSH
7746: LD_INT 37
7748: PUSH
7749: LD_INT 0
7751: PUSH
7752: LD_INT 0
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 33
7768: PUSH
7769: LD_INT 132
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 0
7777: PUSH
7778: LD_INT 0
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 36
7794: PUSH
7795: LD_INT 124
7797: PUSH
7798: LD_INT 7
7800: PUSH
7801: LD_INT 1
7803: PUSH
7804: LD_INT 0
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 5
7820: PUSH
7821: LD_INT 124
7823: PUSH
7824: LD_INT 19
7826: PUSH
7827: LD_INT 0
7829: PUSH
7830: LD_INT 0
7832: PUSH
7833: LD_INT 0
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 32
7846: PUSH
7847: LD_INT 127
7849: PUSH
7850: LD_INT 23
7852: PUSH
7853: LD_INT 0
7855: PUSH
7856: LD_INT 0
7858: PUSH
7859: LD_INT 0
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: ST_TO_ADDR
// for i in tmp do
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_VAR 0 4
7904: PUSH
7905: FOR_IN
7906: IFFALSE 8137
// begin uc_side := side ;
7908: LD_ADDR_OWVAR 20
7912: PUSH
7913: LD_VAR 0 5
7917: ST_TO_ADDR
// uc_nation := nation_american ;
7918: LD_ADDR_OWVAR 21
7922: PUSH
7923: LD_INT 1
7925: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7926: LD_ADDR_OWVAR 42
7930: PUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_INT 1
7938: ARRAY
7939: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7940: LD_ADDR_OWVAR 43
7944: PUSH
7945: LD_INT 5
7947: PPUSH
7948: LD_INT 6
7950: PPUSH
7951: CALL_OW 12
7955: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7956: LD_ADDR_OWVAR 44
7960: PUSH
7961: LD_VAR 0 2
7965: PUSH
7966: LD_INT 5
7968: ARRAY
7969: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7970: LD_ADDR_OWVAR 45
7974: PUSH
7975: LD_VAR 0 2
7979: PUSH
7980: LD_INT 6
7982: ARRAY
7983: ST_TO_ADDR
// sr := 0 ;
7984: LD_ADDR_VAR 0 6
7988: PUSH
7989: LD_INT 0
7991: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
7992: LD_VAR 0 2
7996: PUSH
7997: LD_INT 1
7999: ARRAY
8000: PUSH
8001: LD_INT 29
8003: EQUAL
8004: IFFALSE 8016
// sr := mat_oil else
8006: LD_ADDR_VAR 0 6
8010: PUSH
8011: LD_INT 2
8013: ST_TO_ADDR
8014: GO 8038
// if i [ 1 ] = b_siberite_mine then
8016: LD_VAR 0 2
8020: PUSH
8021: LD_INT 1
8023: ARRAY
8024: PUSH
8025: LD_INT 30
8027: EQUAL
8028: IFFALSE 8038
// sr := mat_siberit ;
8030: LD_ADDR_VAR 0 6
8034: PUSH
8035: LD_INT 3
8037: ST_TO_ADDR
// if sr then
8038: LD_VAR 0 6
8042: IFFALSE 8098
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8044: LD_VAR 0 2
8048: PUSH
8049: LD_INT 2
8051: ARRAY
8052: PPUSH
8053: LD_VAR 0 2
8057: PUSH
8058: LD_INT 3
8060: ARRAY
8061: PPUSH
8062: LD_VAR 0 6
8066: PPUSH
8067: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8071: LD_VAR 0 2
8075: PUSH
8076: LD_INT 2
8078: ARRAY
8079: PPUSH
8080: LD_VAR 0 2
8084: PUSH
8085: LD_INT 3
8087: ARRAY
8088: PPUSH
8089: LD_VAR 0 5
8093: PPUSH
8094: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8098: LD_ADDR_VAR 0 3
8102: PUSH
8103: LD_VAR 0 2
8107: PUSH
8108: LD_INT 2
8110: ARRAY
8111: PPUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 3
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 2
8125: PUSH
8126: LD_INT 4
8128: ARRAY
8129: PPUSH
8130: CALL_OW 47
8134: ST_TO_ADDR
// end ;
8135: GO 7905
8137: POP
8138: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8139: LD_ADDR_VAR 0 8
8143: PUSH
8144: LD_INT 22
8146: PUSH
8147: LD_VAR 0 5
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 30
8158: PUSH
8159: LD_INT 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 69
8174: ST_TO_ADDR
// if not depot then
8175: LD_VAR 0 8
8179: NOT
8180: IFFALSE 8184
// exit ;
8182: GO 8456
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8184: LD_ADDR_VAR 0 7
8188: PUSH
8189: LD_VAR 0 8
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: PPUSH
8198: LD_INT 3
8200: PPUSH
8201: LD_STRING theta3
8203: PPUSH
8204: LD_INT 8
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: LD_INT 6
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: PUSH
8218: LD_OWVAR 67
8222: ARRAY
8223: PPUSH
8224: LD_INT 2500
8226: PUSH
8227: LD_INT 2000
8229: PUSH
8230: LD_INT 1750
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: LD_OWVAR 67
8242: ARRAY
8243: PUSH
8244: LD_INT 300
8246: PUSH
8247: LD_INT 250
8249: PUSH
8250: LD_INT 200
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: LD_OWVAR 67
8262: ARRAY
8263: PUSH
8264: LD_INT 80
8266: PUSH
8267: LD_INT 60
8269: PUSH
8270: LD_INT 50
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: PUSH
8278: LD_OWVAR 67
8282: ARRAY
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: LIST
8288: PPUSH
8289: LD_INT 7
8291: PUSH
8292: LD_INT 6
8294: PUSH
8295: LD_INT 5
8297: PUSH
8298: LD_INT 5
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: PPUSH
8307: CALL 29358 0 6
8311: ST_TO_ADDR
// if not base then
8312: LD_VAR 0 7
8316: NOT
8317: IFFALSE 8321
// exit ;
8319: GO 8456
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8321: LD_ADDR_EXP 36
8325: PUSH
8326: LD_EXP 36
8330: PPUSH
8331: LD_EXP 5
8335: PPUSH
8336: LD_VAR 0 7
8340: PPUSH
8341: CALL_OW 1
8345: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8346: LD_INT 1
8348: PPUSH
8349: LD_INT 1
8351: PPUSH
8352: LD_INT 7
8354: PPUSH
8355: CALL_OW 380
// allyCommander := CreateHuman ;
8359: LD_ADDR_EXP 11
8363: PUSH
8364: CALL_OW 44
8368: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8369: LD_EXP 11
8373: PPUSH
8374: LD_INT 139
8376: PPUSH
8377: LD_INT 15
8379: PPUSH
8380: LD_INT 0
8382: PPUSH
8383: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8387: LD_EXP 11
8391: PPUSH
8392: LD_INT 137
8394: PPUSH
8395: LD_INT 15
8397: PPUSH
8398: CALL_OW 118
// hc_gallery := us ;
8402: LD_ADDR_OWVAR 33
8406: PUSH
8407: LD_STRING us
8409: ST_TO_ADDR
// hc_face_number := 7 ;
8410: LD_ADDR_OWVAR 34
8414: PUSH
8415: LD_INT 7
8417: ST_TO_ADDR
// hc_name := Arthur Powell ;
8418: LD_ADDR_OWVAR 26
8422: PUSH
8423: LD_STRING Arthur Powell
8425: ST_TO_ADDR
// hc_sex := sex_male ;
8426: LD_ADDR_OWVAR 27
8430: PUSH
8431: LD_INT 1
8433: ST_TO_ADDR
// hc_class := 1 ;
8434: LD_ADDR_OWVAR 28
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// Powell := CreateHuman ;
8442: LD_ADDR_EXP 12
8446: PUSH
8447: CALL_OW 44
8451: ST_TO_ADDR
// InitHc ;
8452: CALL_OW 19
// end ;
8456: LD_VAR 0 1
8460: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8461: LD_INT 0
8463: PPUSH
8464: PPUSH
8465: PPUSH
8466: PPUSH
8467: PPUSH
8468: PPUSH
8469: PPUSH
8470: PPUSH
8471: PPUSH
// side := 1 ;
8472: LD_ADDR_VAR 0 3
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: EMPTY
8486: PUSH
8487: EMPTY
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: ST_TO_ADDR
// uc_side := side ;
8493: LD_ADDR_OWVAR 20
8497: PUSH
8498: LD_VAR 0 3
8502: ST_TO_ADDR
// uc_nation := nation_american ;
8503: LD_ADDR_OWVAR 21
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// InitHc ;
8511: CALL_OW 19
// InitVc ;
8515: CALL_OW 20
// hc_importance := 0 ;
8519: LD_ADDR_OWVAR 32
8523: PUSH
8524: LD_INT 0
8526: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8527: LD_ADDR_VAR 0 7
8531: PUSH
8532: LD_INT 2
8534: PUSH
8535: LD_INT 3
8537: PUSH
8538: LD_INT 3
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: ST_TO_ADDR
// if commander = 2 then
8546: LD_EXP 25
8550: PUSH
8551: LD_INT 2
8553: EQUAL
8554: IFFALSE 8575
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8556: LD_ADDR_VAR 0 7
8560: PUSH
8561: LD_INT 3
8563: PUSH
8564: LD_INT 4
8566: PUSH
8567: LD_INT 4
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: ST_TO_ADDR
// if commander = 3 then
8575: LD_EXP 25
8579: PUSH
8580: LD_INT 3
8582: EQUAL
8583: IFFALSE 8604
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8585: LD_ADDR_VAR 0 7
8589: PUSH
8590: LD_INT 2
8592: PUSH
8593: LD_INT 5
8595: PUSH
8596: LD_INT 5
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8604: LD_ADDR_VAR 0 8
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 2
8614: PUSH
8615: LD_INT 1
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: ST_TO_ADDR
// if commander = 2 then
8623: LD_EXP 25
8627: PUSH
8628: LD_INT 2
8630: EQUAL
8631: IFFALSE 8652
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8633: LD_ADDR_VAR 0 8
8637: PUSH
8638: LD_INT 1
8640: PUSH
8641: LD_INT 1
8643: PUSH
8644: LD_INT 3
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: ST_TO_ADDR
// if commander = 3 then
8652: LD_EXP 25
8656: PUSH
8657: LD_INT 3
8659: EQUAL
8660: IFFALSE 8681
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8662: LD_ADDR_VAR 0 8
8666: PUSH
8667: LD_INT 3
8669: PUSH
8670: LD_INT 3
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8681: LD_ADDR_VAR 0 9
8685: PUSH
8686: LD_INT 5
8688: PUSH
8689: LD_INT 3
8691: PUSH
8692: LD_INT 4
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: ST_TO_ADDR
// if commander = 2 then
8700: LD_EXP 25
8704: PUSH
8705: LD_INT 2
8707: EQUAL
8708: IFFALSE 8729
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8710: LD_ADDR_VAR 0 9
8714: PUSH
8715: LD_INT 7
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 6
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: LIST
8728: ST_TO_ADDR
// if commander = 3 then
8729: LD_EXP 25
8733: PUSH
8734: LD_INT 3
8736: EQUAL
8737: IFFALSE 8758
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8739: LD_ADDR_VAR 0 9
8743: PUSH
8744: LD_INT 9
8746: PUSH
8747: LD_INT 10
8749: PUSH
8750: LD_INT 7
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: LIST
8757: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8758: LD_ADDR_VAR 0 5
8762: PUSH
8763: LD_INT 5
8765: PUSH
8766: LD_INT 5
8768: PUSH
8769: LD_INT 4
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: PUSH
8777: LD_OWVAR 67
8781: ARRAY
8782: ST_TO_ADDR
// if commander = 2 then
8783: LD_EXP 25
8787: PUSH
8788: LD_INT 2
8790: EQUAL
8791: IFFALSE 8807
// tanks := tanks + 3 ;
8793: LD_ADDR_VAR 0 5
8797: PUSH
8798: LD_VAR 0 5
8802: PUSH
8803: LD_INT 3
8805: PLUS
8806: ST_TO_ADDR
// for i = 1 to tanks do
8807: LD_ADDR_VAR 0 2
8811: PUSH
8812: DOUBLE
8813: LD_INT 1
8815: DEC
8816: ST_TO_ADDR
8817: LD_VAR 0 5
8821: PUSH
8822: FOR_TO
8823: IFFALSE 8933
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8825: LD_VAR 0 7
8829: PUSH
8830: LD_VAR 0 2
8834: PUSH
8835: LD_INT 3
8837: MOD
8838: PUSH
8839: LD_INT 1
8841: PLUS
8842: ARRAY
8843: PPUSH
8844: LD_VAR 0 8
8848: PUSH
8849: LD_INT 1
8851: PPUSH
8852: LD_INT 3
8854: PPUSH
8855: CALL_OW 12
8859: ARRAY
8860: PPUSH
8861: LD_INT 1
8863: PPUSH
8864: LD_VAR 0 9
8868: PUSH
8869: LD_VAR 0 2
8873: PUSH
8874: LD_INT 3
8876: MOD
8877: PUSH
8878: LD_INT 1
8880: PLUS
8881: ARRAY
8882: PPUSH
8883: LD_INT 60
8885: PPUSH
8886: LD_INT 70
8888: PPUSH
8889: CALL_OW 12
8893: PPUSH
8894: CALL 25949 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8898: LD_ADDR_VAR 0 1
8902: PUSH
8903: LD_VAR 0 1
8907: PPUSH
8908: LD_INT 1
8910: PPUSH
8911: LD_VAR 0 1
8915: PUSH
8916: LD_INT 1
8918: ARRAY
8919: PUSH
8920: CALL_OW 45
8924: ADD
8925: PPUSH
8926: CALL_OW 1
8930: ST_TO_ADDR
// end ;
8931: GO 8822
8933: POP
8934: POP
// cl := 1 ;
8935: LD_ADDR_VAR 0 6
8939: PUSH
8940: LD_INT 1
8942: ST_TO_ADDR
// for i = 1 to 10 do
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: DOUBLE
8949: LD_INT 1
8951: DEC
8952: ST_TO_ADDR
8953: LD_INT 10
8955: PUSH
8956: FOR_TO
8957: IFFALSE 9072
// begin if i mod 4 = 0 then
8959: LD_VAR 0 2
8963: PUSH
8964: LD_INT 4
8966: MOD
8967: PUSH
8968: LD_INT 0
8970: EQUAL
8971: IFFALSE 8987
// cl := cl + 1 ;
8973: LD_ADDR_VAR 0 6
8977: PUSH
8978: LD_VAR 0 6
8982: PUSH
8983: LD_INT 1
8985: PLUS
8986: ST_TO_ADDR
// if cl = 2 then
8987: LD_VAR 0 6
8991: PUSH
8992: LD_INT 2
8994: EQUAL
8995: IFFALSE 9005
// cl := 3 ;
8997: LD_ADDR_VAR 0 6
9001: PUSH
9002: LD_INT 3
9004: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9005: LD_INT 0
9007: PPUSH
9008: LD_VAR 0 6
9012: PPUSH
9013: LD_INT 6
9015: PUSH
9016: LD_INT 6
9018: PUSH
9019: LD_INT 5
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: PUSH
9027: LD_OWVAR 67
9031: ARRAY
9032: PPUSH
9033: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9037: LD_ADDR_VAR 0 1
9041: PUSH
9042: LD_VAR 0 1
9046: PPUSH
9047: LD_INT 2
9049: PPUSH
9050: LD_VAR 0 1
9054: PUSH
9055: LD_INT 2
9057: ARRAY
9058: PUSH
9059: CALL_OW 44
9063: ADD
9064: PPUSH
9065: CALL_OW 1
9069: ST_TO_ADDR
// end ;
9070: GO 8956
9072: POP
9073: POP
// if commander = 1 then
9074: LD_EXP 25
9078: PUSH
9079: LD_INT 1
9081: EQUAL
9082: IFFALSE 9150
// for i = 1 to 4 do
9084: LD_ADDR_VAR 0 2
9088: PUSH
9089: DOUBLE
9090: LD_INT 1
9092: DEC
9093: ST_TO_ADDR
9094: LD_INT 4
9096: PUSH
9097: FOR_TO
9098: IFFALSE 9148
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9100: LD_INT 0
9102: PPUSH
9103: LD_INT 1
9105: PPUSH
9106: LD_INT 8
9108: PPUSH
9109: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_VAR 0 1
9122: PPUSH
9123: LD_INT 2
9125: PPUSH
9126: LD_VAR 0 1
9130: PUSH
9131: LD_INT 2
9133: ARRAY
9134: PUSH
9135: CALL_OW 44
9139: ADD
9140: PPUSH
9141: CALL_OW 1
9145: ST_TO_ADDR
// end ;
9146: GO 9097
9148: POP
9149: POP
// techs := [ ] ;
9150: LD_ADDR_VAR 0 4
9154: PUSH
9155: EMPTY
9156: ST_TO_ADDR
// if commander = 1 then
9157: LD_EXP 25
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9190
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9167: LD_ADDR_VAR 0 4
9171: PUSH
9172: LD_INT 51
9174: PUSH
9175: LD_INT 52
9177: PUSH
9178: LD_INT 53
9180: PUSH
9181: LD_INT 12
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: ST_TO_ADDR
// if commander = 2 then
9190: LD_EXP 25
9194: PUSH
9195: LD_INT 2
9197: EQUAL
9198: IFFALSE 9235
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9200: LD_ADDR_VAR 0 4
9204: PUSH
9205: LD_INT 48
9207: PUSH
9208: LD_INT 47
9210: PUSH
9211: LD_INT 46
9213: PUSH
9214: LD_INT 45
9216: PUSH
9217: LD_INT 35
9219: PUSH
9220: LD_INT 60
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: ST_TO_ADDR
// if commander = 3 then
9235: LD_EXP 25
9239: PUSH
9240: LD_INT 3
9242: EQUAL
9243: IFFALSE 9292
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9245: LD_ADDR_VAR 0 4
9249: PUSH
9250: LD_INT 27
9252: PUSH
9253: LD_INT 36
9255: PUSH
9256: LD_INT 32
9258: PUSH
9259: LD_INT 57
9261: PUSH
9262: LD_INT 58
9264: PUSH
9265: LD_INT 47
9267: PUSH
9268: LD_INT 46
9270: PUSH
9271: LD_INT 51
9273: PUSH
9274: LD_INT 69
9276: PUSH
9277: LD_INT 39
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: ST_TO_ADDR
// if techs then
9292: LD_VAR 0 4
9296: IFFALSE 9330
// for i in techs do
9298: LD_ADDR_VAR 0 2
9302: PUSH
9303: LD_VAR 0 4
9307: PUSH
9308: FOR_IN
9309: IFFALSE 9328
// SetTech ( i , 1 , state_researched ) ;
9311: LD_VAR 0 2
9315: PPUSH
9316: LD_INT 1
9318: PPUSH
9319: LD_INT 2
9321: PPUSH
9322: CALL_OW 322
9326: GO 9308
9328: POP
9329: POP
// hc_gallery := skirmish ;
9330: LD_ADDR_OWVAR 33
9334: PUSH
9335: LD_STRING skirmish
9337: ST_TO_ADDR
// hc_face_number := commander ;
9338: LD_ADDR_OWVAR 34
9342: PUSH
9343: LD_EXP 25
9347: ST_TO_ADDR
// hc_importance := 100 ;
9348: LD_ADDR_OWVAR 32
9352: PUSH
9353: LD_INT 100
9355: ST_TO_ADDR
// case commander of 1 :
9356: LD_EXP 25
9360: PUSH
9361: LD_INT 1
9363: DOUBLE
9364: EQUAL
9365: IFTRUE 9369
9367: GO 9393
9369: POP
// begin hc_name := Jeff Ironside ;
9370: LD_ADDR_OWVAR 26
9374: PUSH
9375: LD_STRING Jeff Ironside
9377: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9378: LD_INT 1
9380: PPUSH
9381: LD_INT 1
9383: PPUSH
9384: LD_INT 7
9386: PPUSH
9387: CALL_OW 380
// end ; 2 :
9391: GO 9458
9393: LD_INT 2
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9425
9401: POP
// begin hc_name := Paul Johnson ;
9402: LD_ADDR_OWVAR 26
9406: PUSH
9407: LD_STRING Paul Johnson
9409: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 3
9415: PPUSH
9416: LD_INT 7
9418: PPUSH
9419: CALL_OW 380
// end ; 3 :
9423: GO 9458
9425: LD_INT 3
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9457
9433: POP
// begin hc_name := Lisa Stuart ;
9434: LD_ADDR_OWVAR 26
9438: PUSH
9439: LD_STRING Lisa Stuart
9441: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9442: LD_INT 2
9444: PPUSH
9445: LD_INT 4
9447: PPUSH
9448: LD_INT 7
9450: PPUSH
9451: CALL_OW 380
// end ; end ;
9455: GO 9458
9457: POP
// playerCommander := CreateHuman ;
9458: LD_ADDR_EXP 9
9462: PUSH
9463: CALL_OW 44
9467: ST_TO_ADDR
// hc_importance := 0 ;
9468: LD_ADDR_OWVAR 32
9472: PUSH
9473: LD_INT 0
9475: ST_TO_ADDR
// hc_gallery :=  ;
9476: LD_ADDR_OWVAR 33
9480: PUSH
9481: LD_STRING 
9483: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9484: LD_ADDR_VAR 0 1
9488: PUSH
9489: LD_VAR 0 1
9493: PPUSH
9494: LD_INT 2
9496: PPUSH
9497: LD_VAR 0 1
9501: PUSH
9502: LD_INT 2
9504: ARRAY
9505: PUSH
9506: LD_EXP 9
9510: ADD
9511: PPUSH
9512: CALL_OW 1
9516: ST_TO_ADDR
// end ;
9517: LD_VAR 0 1
9521: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9522: LD_INT 0
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
// uc_side := 1 ;
9530: LD_ADDR_OWVAR 20
9534: PUSH
9535: LD_INT 1
9537: ST_TO_ADDR
// uc_nation := 1 ;
9538: LD_ADDR_OWVAR 21
9542: PUSH
9543: LD_INT 1
9545: ST_TO_ADDR
// InitHc ;
9546: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9550: LD_ADDR_VAR 0 3
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: LD_INT 3
9560: PUSH
9561: LD_INT 2
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: PUSH
9569: LD_OWVAR 67
9573: ARRAY
9574: ST_TO_ADDR
// for i = 1 to peopleAmount do
9575: LD_ADDR_VAR 0 2
9579: PUSH
9580: DOUBLE
9581: LD_INT 1
9583: DEC
9584: ST_TO_ADDR
9585: LD_VAR 0 3
9589: PUSH
9590: FOR_TO
9591: IFFALSE 9640
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9593: LD_INT 0
9595: PPUSH
9596: LD_INT 2
9598: PPUSH
9599: LD_INT 7
9601: PUSH
9602: LD_INT 6
9604: PUSH
9605: LD_INT 5
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: PUSH
9613: LD_OWVAR 67
9617: ARRAY
9618: PPUSH
9619: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9623: CALL_OW 44
9627: PPUSH
9628: LD_INT 19
9630: PPUSH
9631: LD_INT 0
9633: PPUSH
9634: CALL 60608 0 3
// end ;
9638: GO 9590
9640: POP
9641: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9642: LD_INT 2
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: LD_INT 13
9653: PPUSH
9654: LD_INT 58
9656: PPUSH
9657: CALL 25949 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9661: CALL_OW 45
9665: PPUSH
9666: LD_INT 19
9668: PPUSH
9669: LD_INT 0
9671: PPUSH
9672: CALL 60608 0 3
// if commander = 1 then
9676: LD_EXP 25
9680: PUSH
9681: LD_INT 1
9683: EQUAL
9684: IFFALSE 9695
// wait ( 6 6$00 ) else
9686: LD_INT 12600
9688: PPUSH
9689: CALL_OW 67
9693: GO 9702
// wait ( 8 8$00 ) ;
9695: LD_INT 16800
9697: PPUSH
9698: CALL_OW 67
// uc_side := 1 ;
9702: LD_ADDR_OWVAR 20
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// uc_nation := 1 ;
9710: LD_ADDR_OWVAR 21
9714: PUSH
9715: LD_INT 1
9717: ST_TO_ADDR
// InitVc ;
9718: CALL_OW 20
// InitHc ;
9722: CALL_OW 19
// for i = 1 to 5 do
9726: LD_ADDR_VAR 0 2
9730: PUSH
9731: DOUBLE
9732: LD_INT 1
9734: DEC
9735: ST_TO_ADDR
9736: LD_INT 5
9738: PUSH
9739: FOR_TO
9740: IFFALSE 9984
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9742: LD_INT 4
9744: PUSH
9745: LD_INT 3
9747: PUSH
9748: LD_INT 1
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: PUSH
9756: LD_VAR 0 2
9760: PUSH
9761: LD_INT 3
9763: MOD
9764: PUSH
9765: LD_INT 1
9767: PLUS
9768: ARRAY
9769: PPUSH
9770: LD_INT 1
9772: PPUSH
9773: LD_INT 1
9775: PUSH
9776: LD_INT 3
9778: PUSH
9779: LD_INT 3
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: PUSH
9787: LD_VAR 0 2
9791: PUSH
9792: LD_INT 3
9794: MOD
9795: PUSH
9796: LD_INT 1
9798: PLUS
9799: ARRAY
9800: PPUSH
9801: LD_INT 6
9803: PUSH
9804: LD_INT 12
9806: PUSH
9807: LD_INT 11
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: PUSH
9815: LD_VAR 0 2
9819: PUSH
9820: LD_INT 3
9822: MOD
9823: PUSH
9824: LD_INT 1
9826: PLUS
9827: ARRAY
9828: PPUSH
9829: LD_INT 40
9831: PPUSH
9832: LD_INT 55
9834: PPUSH
9835: CALL_OW 12
9839: PPUSH
9840: CALL 25949 0 5
// veh := CreateVehicle ;
9844: LD_ADDR_VAR 0 6
9848: PUSH
9849: CALL_OW 45
9853: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9854: LD_VAR 0 6
9858: PPUSH
9859: LD_INT 19
9861: PPUSH
9862: LD_INT 0
9864: PPUSH
9865: CALL 60608 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9869: LD_VAR 0 6
9873: PPUSH
9874: CALL_OW 264
9878: PUSH
9879: LD_INT 12
9881: EQUAL
9882: IFFALSE 9914
// begin AddCargo ( veh , mat_cans , 70 ) ;
9884: LD_VAR 0 6
9888: PPUSH
9889: LD_INT 1
9891: PPUSH
9892: LD_INT 70
9894: PPUSH
9895: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9899: LD_VAR 0 6
9903: PPUSH
9904: LD_INT 3
9906: PPUSH
9907: LD_INT 30
9909: PPUSH
9910: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9914: LD_VAR 0 6
9918: PPUSH
9919: CALL_OW 263
9923: PUSH
9924: LD_INT 1
9926: EQUAL
9927: IFFALSE 9982
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9929: LD_INT 1
9931: PPUSH
9932: LD_INT 3
9934: PPUSH
9935: LD_INT 6
9937: PPUSH
9938: CALL_OW 380
// un := CreateHuman ;
9942: LD_ADDR_VAR 0 5
9946: PUSH
9947: CALL_OW 44
9951: ST_TO_ADDR
// tmp := tmp ^ un ;
9952: LD_ADDR_VAR 0 4
9956: PUSH
9957: LD_VAR 0 4
9961: PUSH
9962: LD_VAR 0 5
9966: ADD
9967: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9968: LD_VAR 0 5
9972: PPUSH
9973: LD_VAR 0 6
9977: PPUSH
9978: CALL_OW 52
// end ; end ;
9982: GO 9739
9984: POP
9985: POP
// if tmp then
9986: LD_VAR 0 4
9990: IFFALSE 10054
// begin CenterNowOnUnits ( tmp ) ;
9992: LD_VAR 0 4
9996: PPUSH
9997: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10001: LD_VAR 0 4
10005: PUSH
10006: LD_INT 1
10008: ARRAY
10009: PPUSH
10010: LD_STRING DAR-1
10012: PPUSH
10013: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10017: LD_EXP 9
10021: PPUSH
10022: LD_STRING D
10024: PUSH
10025: LD_STRING I
10027: PUSH
10028: LD_STRING J
10030: PUSH
10031: LD_STRING S
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: PUSH
10039: LD_EXP 25
10043: ARRAY
10044: STR
10045: PUSH
10046: LD_STRING -1-DAR
10048: STR
10049: PPUSH
10050: CALL_OW 88
// end ; if not reinforceAllowed then
10054: LD_EXP 24
10058: NOT
10059: IFFALSE 10063
// exit ;
10061: GO 10217
// wait ( 25 25$00 ) ;
10063: LD_INT 52500
10065: PPUSH
10066: CALL_OW 67
// uc_side := 1 ;
10070: LD_ADDR_OWVAR 20
10074: PUSH
10075: LD_INT 1
10077: ST_TO_ADDR
// uc_nation := 1 ;
10078: LD_ADDR_OWVAR 21
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// InitVc ;
10086: CALL_OW 20
// InitHc ;
10090: CALL_OW 19
// for i = 1 to 4 do
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: DOUBLE
10100: LD_INT 1
10102: DEC
10103: ST_TO_ADDR
10104: LD_INT 4
10106: PUSH
10107: FOR_TO
10108: IFFALSE 10215
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10110: LD_INT 5
10112: PPUSH
10113: LD_INT 3
10115: PPUSH
10116: LD_INT 1
10118: PPUSH
10119: LD_INT 6
10121: PPUSH
10122: LD_INT 1
10124: PPUSH
10125: CALL 25949 0 5
// veh := CreateVehicle ;
10129: LD_ADDR_VAR 0 6
10133: PUSH
10134: CALL_OW 45
10138: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10139: LD_VAR 0 6
10143: PPUSH
10144: LD_INT 19
10146: PPUSH
10147: LD_INT 0
10149: PPUSH
10150: CALL 60608 0 3
// if GetControl ( veh ) = control_manual then
10154: LD_VAR 0 6
10158: PPUSH
10159: CALL_OW 263
10163: PUSH
10164: LD_INT 1
10166: EQUAL
10167: IFFALSE 10213
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10169: LD_INT 0
10171: PPUSH
10172: LD_INT 3
10174: PPUSH
10175: LD_INT 7
10177: PUSH
10178: LD_INT 6
10180: PUSH
10181: LD_INT 5
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: PUSH
10189: LD_OWVAR 67
10193: ARRAY
10194: PPUSH
10195: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10199: CALL_OW 44
10203: PPUSH
10204: LD_VAR 0 6
10208: PPUSH
10209: CALL_OW 52
// end ; end ;
10213: GO 10107
10215: POP
10216: POP
// end ;
10217: LD_VAR 0 1
10221: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10222: LD_INT 0
10224: PPUSH
10225: PPUSH
10226: PPUSH
10227: PPUSH
10228: PPUSH
// uc_side := 8 ;
10229: LD_ADDR_OWVAR 20
10233: PUSH
10234: LD_INT 8
10236: ST_TO_ADDR
// uc_nation := nation_arabian ;
10237: LD_ADDR_OWVAR 21
10241: PUSH
10242: LD_INT 2
10244: ST_TO_ADDR
// for i = 1 to 2 do
10245: LD_ADDR_VAR 0 2
10249: PUSH
10250: DOUBLE
10251: LD_INT 1
10253: DEC
10254: ST_TO_ADDR
10255: LD_INT 2
10257: PUSH
10258: FOR_TO
10259: IFFALSE 10339
// for j = 1 to 4 do
10261: LD_ADDR_VAR 0 4
10265: PUSH
10266: DOUBLE
10267: LD_INT 1
10269: DEC
10270: ST_TO_ADDR
10271: LD_INT 4
10273: PUSH
10274: FOR_TO
10275: IFFALSE 10335
// begin PrepareHuman ( false , j , 8 ) ;
10277: LD_INT 0
10279: PPUSH
10280: LD_VAR 0 4
10284: PPUSH
10285: LD_INT 8
10287: PPUSH
10288: CALL_OW 380
// un := CreateHuman ;
10292: LD_ADDR_VAR 0 3
10296: PUSH
10297: CALL_OW 44
10301: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10302: LD_VAR 0 3
10306: PPUSH
10307: LD_INT 23
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// tmp := tmp union un ;
10317: LD_ADDR_VAR 0 5
10321: PUSH
10322: LD_VAR 0 5
10326: PUSH
10327: LD_VAR 0 3
10331: UNION
10332: ST_TO_ADDR
// end ;
10333: GO 10274
10335: POP
10336: POP
10337: GO 10258
10339: POP
10340: POP
// for i in tmp do
10341: LD_ADDR_VAR 0 2
10345: PUSH
10346: LD_VAR 0 5
10350: PUSH
10351: FOR_IN
10352: IFFALSE 10371
// ComMoveXY ( i , 150 , 136 ) ;
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_INT 150
10361: PPUSH
10362: LD_INT 136
10364: PPUSH
10365: CALL_OW 111
10369: GO 10351
10371: POP
10372: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10373: LD_ADDR_EXP 36
10377: PUSH
10378: LD_EXP 36
10382: PPUSH
10383: LD_EXP 6
10387: PPUSH
10388: LD_EXP 36
10392: PUSH
10393: LD_EXP 6
10397: ARRAY
10398: PUSH
10399: LD_VAR 0 5
10403: UNION
10404: PPUSH
10405: CALL_OW 1
10409: ST_TO_ADDR
// end ;
10410: LD_VAR 0 1
10414: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10415: LD_OWVAR 67
10419: PUSH
10420: LD_INT 1
10422: GREATER
10423: PUSH
10424: LD_INT 31
10426: PPUSH
10427: LD_INT 3
10429: PPUSH
10430: CALL_OW 321
10434: PUSH
10435: LD_INT 2
10437: EQUAL
10438: AND
10439: IFFALSE 10656
10441: GO 10443
10443: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10444: LD_EXP 7
10448: PPUSH
10449: LD_INT 33
10451: PUSH
10452: LD_INT 101
10454: PUSH
10455: LD_INT 159
10457: PUSH
10458: LD_INT 5
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 33
10469: PUSH
10470: LD_INT 105
10472: PUSH
10473: LD_INT 158
10475: PUSH
10476: LD_INT 5
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 33
10487: PUSH
10488: LD_INT 96
10490: PUSH
10491: LD_INT 136
10493: PUSH
10494: LD_INT 5
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 33
10505: PUSH
10506: LD_INT 94
10508: PUSH
10509: LD_INT 133
10511: PUSH
10512: LD_INT 4
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 33
10523: PUSH
10524: LD_INT 84
10526: PUSH
10527: LD_INT 102
10529: PUSH
10530: LD_INT 4
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: PPUSH
10546: CALL 85068 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10550: LD_EXP 8
10554: PPUSH
10555: LD_INT 33
10557: PUSH
10558: LD_INT 50
10560: PUSH
10561: LD_INT 17
10563: PUSH
10564: LD_INT 4
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 33
10575: PUSH
10576: LD_INT 52
10578: PUSH
10579: LD_INT 20
10581: PUSH
10582: LD_INT 4
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 33
10593: PUSH
10594: LD_INT 53
10596: PUSH
10597: LD_INT 23
10599: PUSH
10600: LD_INT 4
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 33
10611: PUSH
10612: LD_INT 45
10614: PUSH
10615: LD_INT 32
10617: PUSH
10618: LD_INT 4
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 33
10629: PUSH
10630: LD_INT 45
10632: PUSH
10633: LD_INT 39
10635: PUSH
10636: LD_INT 4
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PPUSH
10652: CALL 85068 0 2
// end ; end_of_file
10656: END
// export function Action ; var i , tmp ; begin
10657: LD_INT 0
10659: PPUSH
10660: PPUSH
10661: PPUSH
// InGameOn ;
10662: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10666: LD_INT 225
10668: PPUSH
10669: LD_INT 217
10671: PPUSH
10672: CALL_OW 86
// for i in playerForces [ 2 ] do
10676: LD_ADDR_VAR 0 2
10680: PUSH
10681: LD_EXP 10
10685: PUSH
10686: LD_INT 2
10688: ARRAY
10689: PUSH
10690: FOR_IN
10691: IFFALSE 10824
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10693: LD_EXP 10
10697: PUSH
10698: LD_INT 1
10700: ARRAY
10701: PUSH
10702: LD_VAR 0 2
10706: PPUSH
10707: CALL_OW 257
10711: PUSH
10712: LD_INT 3
10714: PUSH
10715: LD_INT 4
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: IN
10722: AND
10723: IFFALSE 10807
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10725: LD_EXP 10
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PUSH
10734: LD_INT 1
10736: ARRAY
10737: PPUSH
10738: LD_INT 19
10740: PPUSH
10741: LD_INT 0
10743: PPUSH
10744: CALL 60608 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10748: LD_VAR 0 2
10752: PPUSH
10753: LD_EXP 10
10757: PUSH
10758: LD_INT 1
10760: ARRAY
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PPUSH
10766: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10770: LD_ADDR_EXP 10
10774: PUSH
10775: LD_EXP 10
10779: PPUSH
10780: LD_INT 1
10782: PPUSH
10783: LD_EXP 10
10787: PUSH
10788: LD_INT 1
10790: ARRAY
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: CALL_OW 3
10799: PPUSH
10800: CALL_OW 1
10804: ST_TO_ADDR
// end else
10805: GO 10822
// PlaceUnitInArea ( i , startArea , false ) ;
10807: LD_VAR 0 2
10811: PPUSH
10812: LD_INT 19
10814: PPUSH
10815: LD_INT 0
10817: PPUSH
10818: CALL 60608 0 3
// end ;
10822: GO 10690
10824: POP
10825: POP
// wait ( 0 0$2 ) ;
10826: LD_INT 70
10828: PPUSH
10829: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10833: LD_EXP 9
10837: PPUSH
10838: LD_STRING D
10840: PUSH
10841: LD_STRING I
10843: PUSH
10844: LD_STRING J
10846: PUSH
10847: LD_STRING S
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: LD_EXP 25
10859: ARRAY
10860: STR
10861: PUSH
10862: LD_STRING -1
10864: STR
10865: PPUSH
10866: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10870: LD_EXP 12
10874: PPUSH
10875: LD_STRING DP-1
10877: PPUSH
10878: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10882: LD_EXP 12
10886: PPUSH
10887: LD_STRING DP-2
10889: PPUSH
10890: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10894: LD_EXP 9
10898: PPUSH
10899: LD_STRING D
10901: PUSH
10902: LD_STRING I
10904: PUSH
10905: LD_STRING J
10907: PUSH
10908: LD_STRING S
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: PUSH
10916: LD_EXP 25
10920: ARRAY
10921: STR
10922: PUSH
10923: LD_STRING -2
10925: STR
10926: PPUSH
10927: CALL_OW 88
// InGameOff ;
10931: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10935: LD_STRING O1
10937: PPUSH
10938: CALL_OW 337
// game := true ;
10942: LD_ADDR_EXP 3
10946: PUSH
10947: LD_INT 1
10949: ST_TO_ADDR
// SaveForQuickRestart ;
10950: CALL_OW 22
// wait ( 0 0$5 ) ;
10954: LD_INT 175
10956: PPUSH
10957: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10961: LD_EXP 9
10965: PPUSH
10966: LD_STRING D
10968: PUSH
10969: LD_STRING I
10971: PUSH
10972: LD_STRING J
10974: PUSH
10975: LD_STRING S
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: LIST
10982: PUSH
10983: LD_EXP 25
10987: ARRAY
10988: STR
10989: PUSH
10990: LD_STRING -3
10992: STR
10993: PPUSH
10994: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10998: LD_INT 35
11000: PPUSH
11001: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11005: LD_EXP 15
11009: PUSH
11010: LD_INT 1
11012: ARRAY
11013: PUSH
11014: LD_EXP 15
11018: PUSH
11019: LD_INT 2
11021: ARRAY
11022: GREATEREQUAL
11023: IFFALSE 10998
// outpostEscape := true ;
11025: LD_ADDR_EXP 27
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11033: LD_ADDR_VAR 0 3
11037: PUSH
11038: LD_EXP 14
11042: PPUSH
11043: LD_INT 26
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 72
11057: ST_TO_ADDR
// if tmp then
11058: LD_VAR 0 3
11062: IFFALSE 11080
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11064: LD_VAR 0 3
11068: PUSH
11069: LD_INT 1
11071: ARRAY
11072: PPUSH
11073: LD_STRING DR-1-Escape
11075: PPUSH
11076: CALL_OW 88
// wait ( 0 0$1 ) ;
11080: LD_INT 35
11082: PPUSH
11083: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11087: LD_EXP 9
11091: PPUSH
11092: LD_STRING D
11094: PUSH
11095: LD_STRING I
11097: PUSH
11098: LD_STRING J
11100: PUSH
11101: LD_STRING S
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: PUSH
11109: LD_EXP 25
11113: ARRAY
11114: STR
11115: PUSH
11116: LD_STRING -1-Escape
11118: STR
11119: PPUSH
11120: CALL_OW 88
// for i in ruOutpost do
11124: LD_ADDR_VAR 0 2
11128: PUSH
11129: LD_EXP 14
11133: PUSH
11134: FOR_IN
11135: IFFALSE 11189
// begin if IsInUnit ( i ) then
11137: LD_VAR 0 2
11141: PPUSH
11142: CALL_OW 310
11146: IFFALSE 11157
// ComExitBuilding ( i ) ;
11148: LD_VAR 0 2
11152: PPUSH
11153: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11157: LD_VAR 0 2
11161: PPUSH
11162: LD_INT 179
11164: PPUSH
11165: LD_INT 102
11167: PPUSH
11168: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11172: LD_VAR 0 2
11176: PPUSH
11177: LD_INT 28
11179: PPUSH
11180: LD_INT 20
11182: PPUSH
11183: CALL_OW 171
// end ;
11187: GO 11134
11189: POP
11190: POP
// tmp := [ ] ;
11191: LD_ADDR_VAR 0 3
11195: PUSH
11196: EMPTY
11197: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11198: LD_INT 35
11200: PPUSH
11201: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11205: LD_ADDR_VAR 0 3
11209: PUSH
11210: LD_EXP 14
11214: PPUSH
11215: LD_INT 95
11217: PUSH
11218: LD_INT 11
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PPUSH
11225: CALL_OW 72
11229: ST_TO_ADDR
// if tmp then
11230: LD_VAR 0 3
11234: IFFALSE 11313
// for i in tmp do
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: LD_VAR 0 3
11245: PUSH
11246: FOR_IN
11247: IFFALSE 11311
// begin ruOutpost := ruOutpost diff i ;
11249: LD_ADDR_EXP 14
11253: PUSH
11254: LD_EXP 14
11258: PUSH
11259: LD_VAR 0 2
11263: DIFF
11264: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11265: LD_ADDR_EXP 36
11269: PUSH
11270: LD_EXP 36
11274: PPUSH
11275: LD_EXP 8
11279: PUSH
11280: LD_EXP 36
11284: PUSH
11285: LD_EXP 8
11289: ARRAY
11290: PUSH
11291: LD_INT 1
11293: PLUS
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PPUSH
11299: LD_VAR 0 2
11303: PPUSH
11304: CALL 26071 0 3
11308: ST_TO_ADDR
// end ;
11309: GO 11246
11311: POP
11312: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11313: LD_EXP 14
11317: PPUSH
11318: LD_INT 21
11320: PUSH
11321: LD_INT 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 72
11332: NOT
11333: IFFALSE 11198
// ruOutpost := [ ] ;
11335: LD_ADDR_EXP 14
11339: PUSH
11340: EMPTY
11341: ST_TO_ADDR
// end ;
11342: LD_VAR 0 1
11346: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11347: LD_EXP 27
11351: IFFALSE 11540
11353: GO 11355
11355: DISABLE
11356: LD_INT 0
11358: PPUSH
11359: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11360: LD_INT 875
11362: PPUSH
11363: LD_INT 1225
11365: PPUSH
11366: CALL_OW 12
11370: PPUSH
11371: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11375: LD_ADDR_VAR 0 2
11379: PUSH
11380: LD_INT 208
11382: PUSH
11383: LD_INT 166
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 218
11392: PUSH
11393: LD_INT 174
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 201
11402: PUSH
11403: LD_INT 173
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 189
11412: PUSH
11413: LD_INT 167
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 191
11422: PUSH
11423: LD_INT 160
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 209
11432: PUSH
11433: LD_INT 181
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 192
11442: PUSH
11443: LD_INT 162
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 197
11452: PUSH
11453: LD_INT 166
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11470: LD_ADDR_VAR 0 1
11474: PUSH
11475: DOUBLE
11476: LD_INT 1
11478: DEC
11479: ST_TO_ADDR
11480: LD_INT 5
11482: PUSH
11483: LD_OWVAR 67
11487: PLUS
11488: PUSH
11489: FOR_TO
11490: IFFALSE 11538
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11492: LD_VAR 0 2
11496: PUSH
11497: LD_VAR 0 1
11501: ARRAY
11502: PUSH
11503: LD_INT 1
11505: ARRAY
11506: PPUSH
11507: LD_VAR 0 2
11511: PUSH
11512: LD_VAR 0 1
11516: ARRAY
11517: PUSH
11518: LD_INT 2
11520: ARRAY
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11529: LD_INT 28
11531: PPUSH
11532: CALL_OW 67
// end ;
11536: GO 11489
11538: POP
11539: POP
// end ;
11540: PPOPN 2
11542: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11543: LD_EXP 27
11547: NOT
11548: IFFALSE 12202
11550: GO 11552
11552: DISABLE
11553: LD_INT 0
11555: PPUSH
11556: PPUSH
11557: PPUSH
11558: PPUSH
11559: PPUSH
11560: PPUSH
11561: PPUSH
// begin enable ;
11562: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11563: LD_ADDR_VAR 0 1
11567: PUSH
11568: LD_EXP 14
11572: PPUSH
11573: LD_INT 22
11575: PUSH
11576: LD_INT 3
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 25
11585: PUSH
11586: LD_INT 1
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PPUSH
11597: CALL_OW 72
11601: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11602: LD_ADDR_VAR 0 2
11606: PUSH
11607: LD_EXP 14
11611: PPUSH
11612: LD_INT 22
11614: PUSH
11615: LD_INT 3
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 25
11624: PUSH
11625: LD_INT 2
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PPUSH
11636: CALL_OW 72
11640: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11641: LD_ADDR_VAR 0 3
11645: PUSH
11646: LD_EXP 14
11650: PPUSH
11651: LD_INT 22
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 21
11663: PUSH
11664: LD_INT 3
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 3
11673: PUSH
11674: LD_INT 24
11676: PUSH
11677: LD_INT 1000
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: LIST
11692: PPUSH
11693: CALL_OW 72
11697: ST_TO_ADDR
// if engs and buildings then
11698: LD_VAR 0 2
11702: PUSH
11703: LD_VAR 0 3
11707: AND
11708: IFFALSE 11781
// begin for i in engs do
11710: LD_ADDR_VAR 0 5
11714: PUSH
11715: LD_VAR 0 2
11719: PUSH
11720: FOR_IN
11721: IFFALSE 11777
// if IsInUnit ( i ) then
11723: LD_VAR 0 5
11727: PPUSH
11728: CALL_OW 310
11732: IFFALSE 11745
// ComExitBuilding ( i ) else
11734: LD_VAR 0 5
11738: PPUSH
11739: CALL_OW 122
11743: GO 11775
// if not HasTask ( i ) then
11745: LD_VAR 0 5
11749: PPUSH
11750: CALL_OW 314
11754: NOT
11755: IFFALSE 11775
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11757: LD_VAR 0 5
11761: PPUSH
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 1
11769: ARRAY
11770: PPUSH
11771: CALL_OW 130
11775: GO 11720
11777: POP
11778: POP
// end else
11779: GO 11884
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11781: LD_VAR 0 3
11785: NOT
11786: PUSH
11787: LD_EXP 14
11791: PPUSH
11792: LD_INT 30
11794: PUSH
11795: LD_INT 0
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PPUSH
11802: CALL_OW 72
11806: AND
11807: PUSH
11808: LD_VAR 0 2
11812: PPUSH
11813: LD_INT 3
11815: PUSH
11816: LD_INT 54
11818: PUSH
11819: EMPTY
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PPUSH
11826: CALL_OW 72
11830: AND
11831: IFFALSE 11884
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11833: LD_VAR 0 2
11837: PPUSH
11838: LD_INT 3
11840: PUSH
11841: LD_INT 54
11843: PUSH
11844: EMPTY
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 72
11855: PPUSH
11856: LD_EXP 14
11860: PPUSH
11861: LD_INT 30
11863: PUSH
11864: LD_INT 0
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PPUSH
11871: CALL_OW 72
11875: PUSH
11876: LD_INT 1
11878: ARRAY
11879: PPUSH
11880: CALL_OW 120
// if not tmp then
11884: LD_VAR 0 1
11888: NOT
11889: IFFALSE 11893
// exit ;
11891: GO 12202
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11893: LD_INT 26
11895: PPUSH
11896: LD_INT 81
11898: PUSH
11899: LD_INT 3
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 70
11910: PUSH
11911: LD_INT 1
11913: GREATER
11914: IFFALSE 11970
// begin for i in tmp do
11916: LD_ADDR_VAR 0 5
11920: PUSH
11921: LD_VAR 0 1
11925: PUSH
11926: FOR_IN
11927: IFFALSE 11966
// begin if IsInUnit ( i ) then
11929: LD_VAR 0 5
11933: PPUSH
11934: CALL_OW 310
11938: IFFALSE 11949
// ComExitBuilding ( i ) ;
11940: LD_VAR 0 5
11944: PPUSH
11945: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11949: LD_VAR 0 5
11953: PPUSH
11954: LD_INT 204
11956: PPUSH
11957: LD_INT 164
11959: PPUSH
11960: CALL_OW 174
// end ;
11964: GO 11926
11966: POP
11967: POP
// end else
11968: GO 12202
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11970: LD_VAR 0 1
11974: PPUSH
11975: LD_INT 3
11977: PUSH
11978: LD_INT 54
11980: PUSH
11981: EMPTY
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PPUSH
11988: CALL_OW 72
11992: IFFALSE 12202
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
11994: LD_ADDR_VAR 0 4
11998: PUSH
11999: LD_EXP 14
12003: PPUSH
12004: LD_INT 30
12006: PUSH
12007: LD_INT 32
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 58
12016: PUSH
12017: EMPTY
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 72
12028: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12029: LD_VAR 0 4
12033: NOT
12034: PUSH
12035: LD_EXP 14
12039: PPUSH
12040: LD_INT 30
12042: PUSH
12043: LD_INT 5
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PPUSH
12050: CALL_OW 72
12054: AND
12055: IFFALSE 12092
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12057: LD_VAR 0 1
12061: PPUSH
12062: LD_EXP 14
12066: PPUSH
12067: LD_INT 30
12069: PUSH
12070: LD_INT 5
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PPUSH
12077: CALL_OW 72
12081: PUSH
12082: LD_INT 1
12084: ARRAY
12085: PPUSH
12086: CALL_OW 120
// exit ;
12090: GO 12202
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12092: LD_ADDR_VAR 0 6
12096: PUSH
12097: LD_VAR 0 1
12101: PPUSH
12102: LD_INT 3
12104: PUSH
12105: LD_INT 54
12107: PUSH
12108: EMPTY
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PPUSH
12115: CALL_OW 72
12119: ST_TO_ADDR
// if j < empty then
12120: LD_VAR 0 6
12124: PUSH
12125: LD_VAR 0 4
12129: LESS
12130: IFFALSE 12144
// k := j else
12132: LD_ADDR_VAR 0 7
12136: PUSH
12137: LD_VAR 0 6
12141: ST_TO_ADDR
12142: GO 12154
// k := empty ;
12144: LD_ADDR_VAR 0 7
12148: PUSH
12149: LD_VAR 0 4
12153: ST_TO_ADDR
// for i = 1 to k do
12154: LD_ADDR_VAR 0 5
12158: PUSH
12159: DOUBLE
12160: LD_INT 1
12162: DEC
12163: ST_TO_ADDR
12164: LD_VAR 0 7
12168: PUSH
12169: FOR_TO
12170: IFFALSE 12200
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12172: LD_VAR 0 6
12176: PUSH
12177: LD_VAR 0 5
12181: ARRAY
12182: PPUSH
12183: LD_VAR 0 4
12187: PUSH
12188: LD_VAR 0 5
12192: ARRAY
12193: PPUSH
12194: CALL_OW 120
12198: GO 12169
12200: POP
12201: POP
// end ; end ;
12202: PPOPN 7
12204: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12205: LD_EXP 2
12209: PUSH
12210: LD_INT 1
12212: EQUAL
12213: PUSH
12214: LD_EXP 27
12218: AND
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_INT 1
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 92
12232: PUSH
12233: LD_INT 208
12235: PUSH
12236: LD_INT 163
12238: PUSH
12239: LD_INT 8
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PPUSH
12252: CALL_OW 69
12256: AND
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_INT 3
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 21
12270: PUSH
12271: LD_INT 1
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 92
12280: PUSH
12281: LD_INT 208
12283: PUSH
12284: LD_INT 163
12286: PUSH
12287: LD_INT 14
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: PPUSH
12301: CALL_OW 69
12305: NOT
12306: AND
12307: IFFALSE 12612
12309: GO 12311
12311: DISABLE
12312: LD_INT 0
12314: PPUSH
// begin InGameOn ;
12315: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12319: LD_EXP 9
12323: PPUSH
12324: CALL_OW 87
// wait ( 0 0$1 ) ;
12328: LD_INT 35
12330: PPUSH
12331: CALL_OW 67
// DialogueOn ;
12335: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12339: LD_EXP 9
12343: PPUSH
12344: LD_STRING D
12346: PUSH
12347: LD_STRING I
12349: PUSH
12350: LD_STRING J
12352: PUSH
12353: LD_STRING S
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: LD_EXP 25
12365: ARRAY
12366: STR
12367: PUSH
12368: LD_STRING -1-BaseCaptured
12370: STR
12371: PPUSH
12372: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12376: LD_EXP 12
12380: PPUSH
12381: LD_STRING DP-1-BaseCaptured
12383: PPUSH
12384: CALL_OW 94
// if sibBombAllowed then
12388: LD_EXP 23
12392: IFFALSE 12534
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12394: LD_EXP 9
12398: PPUSH
12399: LD_STRING D
12401: PUSH
12402: LD_STRING I
12404: PUSH
12405: LD_STRING J
12407: PUSH
12408: LD_STRING S
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: PUSH
12416: LD_EXP 25
12420: ARRAY
12421: STR
12422: PUSH
12423: LD_STRING -2-BaseCaptured
12425: STR
12426: PPUSH
12427: CALL_OW 88
// if commander = 1 then
12431: LD_EXP 25
12435: PUSH
12436: LD_INT 1
12438: EQUAL
12439: IFFALSE 12453
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12441: LD_EXP 12
12445: PPUSH
12446: LD_STRING DP-2b-BaseCaptured
12448: PPUSH
12449: CALL_OW 94
// if commander = 2 then
12453: LD_EXP 25
12457: PUSH
12458: LD_INT 2
12460: EQUAL
12461: IFFALSE 12475
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12463: LD_EXP 12
12467: PPUSH
12468: LD_STRING DP-2-BaseCaptured
12470: PPUSH
12471: CALL_OW 94
// if commander = 3 then
12475: LD_EXP 25
12479: PUSH
12480: LD_INT 3
12482: EQUAL
12483: IFFALSE 12497
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12485: LD_EXP 12
12489: PPUSH
12490: LD_STRING DP-2a-BaseCaptured
12492: PPUSH
12493: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12497: LD_EXP 9
12501: PPUSH
12502: LD_STRING D
12504: PUSH
12505: LD_STRING I
12507: PUSH
12508: LD_STRING J
12510: PUSH
12511: LD_STRING S
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: PUSH
12519: LD_EXP 25
12523: ARRAY
12524: STR
12525: PUSH
12526: LD_STRING -3-BaseCaptured
12528: STR
12529: PPUSH
12530: CALL_OW 88
// end ; DialogueOff ;
12534: CALL_OW 7
// InGameOff ;
12538: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12542: LD_STRING O2
12544: PPUSH
12545: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12549: LD_ADDR_VAR 0 1
12553: PUSH
12554: LD_EXP 14
12558: PPUSH
12559: LD_INT 21
12561: PUSH
12562: LD_INT 3
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PPUSH
12569: CALL_OW 72
12573: PUSH
12574: FOR_IN
12575: IFFALSE 12591
// SetSide ( i , 1 ) ;
12577: LD_VAR 0 1
12581: PPUSH
12582: LD_INT 1
12584: PPUSH
12585: CALL_OW 235
12589: GO 12574
12591: POP
12592: POP
// baseCaptured := true ;
12593: LD_ADDR_EXP 17
12597: PUSH
12598: LD_INT 1
12600: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12601: LD_INT 1225
12603: PPUSH
12604: CALL_OW 67
// PrepareReinforcements ;
12608: CALL 9522 0 0
// end ;
12612: PPOPN 1
12614: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12615: LD_INT 22
12617: PUSH
12618: LD_INT 3
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 92
12627: PUSH
12628: LD_INT 167
12630: PUSH
12631: LD_INT 197
12633: PUSH
12634: LD_INT 20
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PPUSH
12647: CALL_OW 69
12651: PUSH
12652: LD_INT 3
12654: GREATER
12655: IFFALSE 12672
12657: GO 12659
12659: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12660: LD_EXP 12
12664: PPUSH
12665: LD_STRING DP-RuAttack
12667: PPUSH
12668: CALL_OW 94
12672: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12673: LD_EXP 1
12677: NOT
12678: PUSH
12679: LD_INT 1
12681: PPUSH
12682: LD_INT 168
12684: PPUSH
12685: LD_INT 74
12687: PPUSH
12688: CALL_OW 293
12692: AND
12693: PUSH
12694: LD_INT 168
12696: PPUSH
12697: LD_INT 72
12699: PPUSH
12700: CALL_OW 553
12704: AND
12705: IFFALSE 12757
12707: GO 12709
12709: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12710: LD_INT 168
12712: PPUSH
12713: LD_INT 72
12715: PPUSH
12716: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12720: LD_EXP 9
12724: PPUSH
12725: LD_STRING D
12727: PUSH
12728: LD_STRING I
12730: PUSH
12731: LD_STRING J
12733: PUSH
12734: LD_STRING S
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: PUSH
12742: LD_EXP 25
12746: ARRAY
12747: STR
12748: PUSH
12749: LD_STRING -1-Blockade
12751: STR
12752: PPUSH
12753: CALL_OW 88
// end ;
12757: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12758: LD_EXP 2
12762: PUSH
12763: LD_INT 1
12765: EQUAL
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_INT 1
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 101
12779: PUSH
12780: LD_INT 4
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 69
12795: AND
12796: IFFALSE 13328
12798: GO 12800
12800: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12801: LD_INT 4
12803: PPUSH
12804: LD_INT 1
12806: PPUSH
12807: CALL_OW 343
// DialogueOn ;
12811: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12815: LD_EXP 11
12819: PPUSH
12820: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12824: LD_EXP 11
12828: PPUSH
12829: LD_STRING DM-1-Contact
12831: PPUSH
12832: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12836: LD_EXP 9
12840: PPUSH
12841: LD_STRING D
12843: PUSH
12844: LD_STRING I
12846: PUSH
12847: LD_STRING J
12849: PUSH
12850: LD_STRING S
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: LIST
12857: PUSH
12858: LD_EXP 25
12862: ARRAY
12863: STR
12864: PUSH
12865: LD_STRING -1-Contact
12867: STR
12868: PPUSH
12869: CALL_OW 88
// if commander = 1 then
12873: LD_EXP 25
12877: PUSH
12878: LD_INT 1
12880: EQUAL
12881: IFFALSE 13013
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12883: LD_EXP 11
12887: PPUSH
12888: LD_STRING DM-2-Contact
12890: PPUSH
12891: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12895: LD_EXP 9
12899: PPUSH
12900: LD_STRING DI-2-Contact
12902: PPUSH
12903: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12907: LD_INT 22
12909: PUSH
12910: LD_INT 8
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 1
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PPUSH
12931: CALL_OW 69
12935: PUSH
12936: LD_INT 8
12938: PPUSH
12939: LD_INT 1
12941: PPUSH
12942: CALL_OW 81
12946: PUSH
12947: LD_INT 2
12949: EQUAL
12950: AND
12951: IFFALSE 12977
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12953: LD_EXP 11
12957: PPUSH
12958: LD_STRING DM-3-Contact
12960: PPUSH
12961: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12965: LD_EXP 9
12969: PPUSH
12970: LD_STRING DI-3-Contact
12972: PPUSH
12973: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
12977: LD_EXP 11
12981: PPUSH
12982: LD_STRING DM-4-Contact
12984: PPUSH
12985: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
12989: LD_EXP 9
12993: PPUSH
12994: LD_STRING DI-4-Contact
12996: PPUSH
12997: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13001: LD_EXP 11
13005: PPUSH
13006: LD_STRING DM-5-Contact
13008: PPUSH
13009: CALL_OW 94
// end ; if commander = 2 then
13013: LD_EXP 25
13017: PUSH
13018: LD_INT 2
13020: EQUAL
13021: IFFALSE 13153
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13023: LD_EXP 11
13027: PPUSH
13028: LD_STRING DM-2c-Contact
13030: PPUSH
13031: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13035: LD_EXP 9
13039: PPUSH
13040: LD_STRING DJ-2-Contact
13042: PPUSH
13043: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13047: LD_INT 22
13049: PUSH
13050: LD_INT 8
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 21
13059: PUSH
13060: LD_INT 1
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 69
13075: PUSH
13076: LD_INT 8
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 81
13086: PUSH
13087: LD_INT 2
13089: EQUAL
13090: AND
13091: IFFALSE 13117
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13093: LD_EXP 11
13097: PPUSH
13098: LD_STRING DM-3-Contact
13100: PPUSH
13101: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13105: LD_EXP 9
13109: PPUSH
13110: LD_STRING DJ-3-Contact
13112: PPUSH
13113: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13117: LD_EXP 11
13121: PPUSH
13122: LD_STRING DM-4-Contact
13124: PPUSH
13125: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13129: LD_EXP 9
13133: PPUSH
13134: LD_STRING DJ-4-Contact
13136: PPUSH
13137: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13141: LD_EXP 11
13145: PPUSH
13146: LD_STRING DM-5a-Contact
13148: PPUSH
13149: CALL_OW 94
// end ; if commander = 3 then
13153: LD_EXP 25
13157: PUSH
13158: LD_INT 3
13160: EQUAL
13161: IFFALSE 13317
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13163: LD_EXP 11
13167: PPUSH
13168: LD_STRING DM-2a-Contact
13170: PPUSH
13171: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13175: LD_EXP 9
13179: PPUSH
13180: LD_STRING DS-2a-Contact
13182: PPUSH
13183: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13187: LD_EXP 11
13191: PPUSH
13192: LD_STRING DM-2b-Contact
13194: PPUSH
13195: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13199: LD_EXP 9
13203: PPUSH
13204: LD_STRING DS-2b-Contact
13206: PPUSH
13207: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13211: LD_INT 22
13213: PUSH
13214: LD_INT 8
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PPUSH
13235: CALL_OW 69
13239: PUSH
13240: LD_INT 8
13242: PPUSH
13243: LD_INT 1
13245: PPUSH
13246: CALL_OW 81
13250: PUSH
13251: LD_INT 2
13253: EQUAL
13254: AND
13255: IFFALSE 13281
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13257: LD_EXP 11
13261: PPUSH
13262: LD_STRING DM-3-Contact
13264: PPUSH
13265: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13269: LD_EXP 9
13273: PPUSH
13274: LD_STRING DS-3-Contact
13276: PPUSH
13277: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13281: LD_EXP 11
13285: PPUSH
13286: LD_STRING DM-4-Contact
13288: PPUSH
13289: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13293: LD_EXP 9
13297: PPUSH
13298: LD_STRING DS-4-Contact
13300: PPUSH
13301: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13305: LD_EXP 11
13309: PPUSH
13310: LD_STRING DM-5-Contact
13312: PPUSH
13313: CALL_OW 94
// end ; DialogueOff ;
13317: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13321: LD_STRING O3
13323: PPUSH
13324: CALL_OW 337
// end ;
13328: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13329: LD_EXP 2
13333: PUSH
13334: LD_INT 1
13336: EQUAL
13337: PUSH
13338: LD_EXP 18
13342: PUSH
13343: LD_INT 15
13345: PUSH
13346: LD_INT 20
13348: PUSH
13349: LD_INT 25
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: LD_OWVAR 67
13361: ARRAY
13362: GREATEREQUAL
13363: AND
13364: PUSH
13365: LD_INT 22
13367: PUSH
13368: LD_INT 8
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 30
13377: PUSH
13378: LD_INT 1
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL_OW 69
13393: AND
13394: PUSH
13395: LD_INT 22
13397: PUSH
13398: LD_INT 8
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 21
13407: PUSH
13408: LD_INT 3
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PPUSH
13419: CALL_OW 69
13423: PUSH
13424: LD_INT 5
13426: GREATEREQUAL
13427: AND
13428: IFFALSE 13951
13430: GO 13432
13432: DISABLE
13433: LD_INT 0
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
// begin DialogueOn ;
13439: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13443: LD_EXP 13
13447: PPUSH
13448: LD_STRING DF-1-Leg
13450: PPUSH
13451: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13455: LD_EXP 9
13459: PPUSH
13460: LD_STRING D
13462: PUSH
13463: LD_STRING I
13465: PUSH
13466: LD_STRING J
13468: PUSH
13469: LD_STRING S
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: LD_EXP 25
13481: ARRAY
13482: STR
13483: PUSH
13484: LD_STRING -1-Leg
13486: STR
13487: PPUSH
13488: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13492: LD_EXP 13
13496: PPUSH
13497: LD_STRING DF-2-Leg
13499: PPUSH
13500: CALL_OW 94
// DialogueOff ;
13504: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13508: LD_STRING QLegionOffer
13510: PPUSH
13511: CALL_OW 97
13515: PUSH
13516: LD_INT 1
13518: DOUBLE
13519: EQUAL
13520: IFTRUE 13524
13522: GO 13527
13524: POP
// ; 2 :
13525: GO 13541
13527: LD_INT 2
13529: DOUBLE
13530: EQUAL
13531: IFTRUE 13535
13533: GO 13540
13535: POP
// exit ; end ;
13536: GO 13951
13538: GO 13541
13540: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13541: LD_EXP 9
13545: PPUSH
13546: LD_STRING D
13548: PUSH
13549: LD_STRING I
13551: PUSH
13552: LD_STRING J
13554: PUSH
13555: LD_STRING S
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: LD_EXP 25
13567: ARRAY
13568: STR
13569: PUSH
13570: LD_STRING -2-Leg
13572: STR
13573: PPUSH
13574: CALL_OW 88
// legOfferAccepted := true ;
13578: LD_ADDR_EXP 20
13582: PUSH
13583: LD_INT 1
13585: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13586: LD_INT 21
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13596: LD_INT 190
13598: PPUSH
13599: LD_INT 227
13601: PPUSH
13602: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13606: LD_ADDR_VAR 0 1
13610: PUSH
13611: LD_INT 16800
13613: PUSH
13614: LD_INT 14700
13616: PUSH
13617: LD_INT 12600
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: PUSH
13625: LD_OWVAR 67
13629: ARRAY
13630: ST_TO_ADDR
// sib := 100 ;
13631: LD_ADDR_VAR 0 2
13635: PUSH
13636: LD_INT 100
13638: ST_TO_ADDR
// disableGlobalTimer := true ;
13639: LD_ADDR_EXP 4
13643: PUSH
13644: LD_INT 1
13646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13647: LD_INT 35
13649: PPUSH
13650: CALL_OW 67
// time := time - 0 0$1 ;
13654: LD_ADDR_VAR 0 1
13658: PUSH
13659: LD_VAR 0 1
13663: PUSH
13664: LD_INT 35
13666: MINUS
13667: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13668: LD_ADDR_VAR 0 3
13672: PUSH
13673: LD_INT 21
13675: PPUSH
13676: LD_INT 3
13678: PPUSH
13679: CALL_OW 287
13683: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13684: LD_ADDR_OWVAR 47
13688: PUSH
13689: LD_STRING #SkrTime
13691: PUSH
13692: LD_OWVAR 1
13696: PUSH
13697: LD_STRING #Skr-LegOffer
13699: PUSH
13700: LD_VAR 0 2
13704: PUSH
13705: LD_VAR 0 1
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: ST_TO_ADDR
// if sources then
13717: LD_VAR 0 3
13721: IFFALSE 13753
// begin sib := sib - sources * 10 ;
13723: LD_ADDR_VAR 0 2
13727: PUSH
13728: LD_VAR 0 2
13732: PUSH
13733: LD_VAR 0 3
13737: PUSH
13738: LD_INT 10
13740: MUL
13741: MINUS
13742: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13743: LD_INT 21
13745: PPUSH
13746: LD_INT 3
13748: PPUSH
13749: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13753: LD_VAR 0 1
13757: PUSH
13758: LD_INT 0
13760: EQUAL
13761: PUSH
13762: LD_VAR 0 2
13766: PUSH
13767: LD_INT 0
13769: LESSEQUAL
13770: OR
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_INT 8
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 69
13786: NOT
13787: OR
13788: IFFALSE 13647
// SetAreaMapShow ( legOfferArea , 0 ) ;
13790: LD_INT 21
13792: PPUSH
13793: LD_INT 0
13795: PPUSH
13796: CALL_OW 424
// disableGlobalTimer := false ;
13800: LD_ADDR_EXP 4
13804: PUSH
13805: LD_INT 0
13807: ST_TO_ADDR
// if sib <= 0 then
13808: LD_VAR 0 2
13812: PUSH
13813: LD_INT 0
13815: LESSEQUAL
13816: IFFALSE 13932
// begin legChangeSide := true ;
13818: LD_ADDR_EXP 21
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13826: LD_EXP 13
13830: PPUSH
13831: LD_STRING DF-4y-Leg
13833: PPUSH
13834: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13838: LD_STRING O3a
13840: PPUSH
13841: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13845: LD_INT 8
13847: PPUSH
13848: LD_INT 1
13850: PPUSH
13851: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13855: LD_INT 8
13857: PPUSH
13858: LD_INT 1
13860: PPUSH
13861: LD_INT 1
13863: PPUSH
13864: LD_INT 1
13866: PPUSH
13867: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13871: LD_INT 8
13873: PPUSH
13874: LD_INT 4
13876: PPUSH
13877: LD_INT 1
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13887: LD_INT 8
13889: PPUSH
13890: LD_INT 6
13892: PPUSH
13893: LD_INT 2
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13903: LD_INT 8
13905: PPUSH
13906: LD_INT 3
13908: PPUSH
13909: LD_INT 2
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 80
// wait ( 0 0$30 ) ;
13919: LD_INT 1050
13921: PPUSH
13922: CALL_OW 67
// PrepareLegionReinforcements ;
13926: CALL 10222 0 0
// end else
13930: GO 13951
// begin ChangeMissionObjectives ( O3 ) ;
13932: LD_STRING O3
13934: PPUSH
13935: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13939: LD_EXP 13
13943: PPUSH
13944: LD_STRING DF-4n-Leg
13946: PPUSH
13947: CALL_OW 94
// end ; end ;
13951: PPOPN 4
13953: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13954: LD_INT 22
13956: PUSH
13957: LD_INT 8
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 21
13966: PUSH
13967: LD_INT 1
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PPUSH
13978: CALL_OW 69
13982: PUSH
13983: LD_INT 0
13985: EQUAL
13986: PUSH
13987: LD_INT 8
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 81
13997: PUSH
13998: LD_INT 2
14000: EQUAL
14001: AND
14002: IFFALSE 14014
14004: GO 14006
14006: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14007: LD_STRING O3a
14009: PPUSH
14010: CALL_OW 337
14014: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14015: LD_EXP 2
14019: PUSH
14020: LD_INT 1
14022: EQUAL
14023: PUSH
14024: LD_EXP 3
14028: AND
14029: PUSH
14030: LD_INT 22
14032: PUSH
14033: LD_INT 3
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 21
14042: PUSH
14043: LD_INT 1
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PPUSH
14054: CALL_OW 69
14058: PUSH
14059: LD_INT 0
14061: EQUAL
14062: AND
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_INT 3
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 30
14076: PUSH
14077: LD_INT 1
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PPUSH
14088: CALL_OW 69
14092: PUSH
14093: LD_INT 0
14095: EQUAL
14096: AND
14097: IFFALSE 14335
14099: GO 14101
14101: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14102: LD_EXP 9
14106: PPUSH
14107: LD_STRING D
14109: PUSH
14110: LD_STRING I
14112: PUSH
14113: LD_STRING J
14115: PUSH
14116: LD_STRING S
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: PUSH
14124: LD_EXP 25
14128: ARRAY
14129: STR
14130: PUSH
14131: LD_STRING -1-Win
14133: STR
14134: PPUSH
14135: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14139: LD_OWVAR 1
14143: PUSH
14144: LD_INT 315000
14146: PUSH
14147: LD_INT 273000
14149: PUSH
14150: LD_INT 231000
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: LIST
14157: PUSH
14158: LD_OWVAR 67
14162: ARRAY
14163: GREATEREQUAL
14164: IFFALSE 14179
// AddMedal ( med1 , - 1 ) else
14166: LD_STRING med1
14168: PPUSH
14169: LD_INT 1
14171: NEG
14172: PPUSH
14173: CALL_OW 101
14177: GO 14189
// AddMedal ( med1 , 1 ) ;
14179: LD_STRING med1
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14189: LD_EXP 22
14193: PUSH
14194: LD_INT 20
14196: PUSH
14197: LD_INT 15
14199: PUSH
14200: LD_INT 10
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_OWVAR 67
14212: ARRAY
14213: GREATEREQUAL
14214: IFFALSE 14229
// AddMedal ( med2 , - 1 ) else
14216: LD_STRING med2
14218: PPUSH
14219: LD_INT 1
14221: NEG
14222: PPUSH
14223: CALL_OW 101
14227: GO 14239
// AddMedal ( med2 , 1 ) ;
14229: LD_STRING med2
14231: PPUSH
14232: LD_INT 1
14234: PPUSH
14235: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14239: LD_INT 8
14241: PPUSH
14242: LD_INT 1
14244: PPUSH
14245: CALL_OW 81
14249: PUSH
14250: LD_INT 1
14252: EQUAL
14253: IFFALSE 14267
// AddMedal ( med3 , 1 ) else
14255: LD_STRING med3
14257: PPUSH
14258: LD_INT 1
14260: PPUSH
14261: CALL_OW 101
14265: GO 14324
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14267: LD_INT 22
14269: PUSH
14270: LD_INT 8
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 21
14279: PUSH
14280: LD_INT 1
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 69
14295: PUSH
14296: LD_INT 0
14298: EQUAL
14299: IFFALSE 14313
// AddMedal ( med3 , 2 ) else
14301: LD_STRING med3
14303: PPUSH
14304: LD_INT 2
14306: PPUSH
14307: CALL_OW 101
14311: GO 14324
// AddMedal ( med3 , - 1 ) ;
14313: LD_STRING med3
14315: PPUSH
14316: LD_INT 1
14318: NEG
14319: PPUSH
14320: CALL_OW 101
// GiveMedals ( MAIN ) ;
14324: LD_STRING MAIN
14326: PPUSH
14327: CALL_OW 102
// YouWin ;
14331: CALL_OW 103
// end ;
14335: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14336: LD_EXP 2
14340: PUSH
14341: LD_INT 1
14343: EQUAL
14344: PUSH
14345: LD_EXP 16
14349: AND
14350: PUSH
14351: LD_INT 20
14353: PPUSH
14354: LD_INT 81
14356: PUSH
14357: LD_INT 8
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 70
14368: AND
14369: IFFALSE 14648
14371: GO 14373
14373: DISABLE
14374: LD_INT 0
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
// begin enable ;
14381: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_INT 20
14389: PPUSH
14390: LD_INT 81
14392: PUSH
14393: LD_INT 8
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PPUSH
14400: CALL_OW 70
14404: ST_TO_ADDR
// if not tmp then
14405: LD_VAR 0 3
14409: NOT
14410: IFFALSE 14414
// exit ;
14412: GO 14648
// for i in tmp do
14414: LD_ADDR_VAR 0 1
14418: PUSH
14419: LD_VAR 0 3
14423: PUSH
14424: FOR_IN
14425: IFFALSE 14646
// begin x := GetX ( i ) ;
14427: LD_ADDR_VAR 0 4
14431: PUSH
14432: LD_VAR 0 1
14436: PPUSH
14437: CALL_OW 250
14441: ST_TO_ADDR
// y := GetY ( i ) ;
14442: LD_ADDR_VAR 0 5
14446: PUSH
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 251
14456: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14457: LD_VAR 0 4
14461: PPUSH
14462: LD_VAR 0 5
14466: PPUSH
14467: CALL_OW 458
14471: IFFALSE 14644
// begin LaunchMineAtPos ( x , y , 8 ) ;
14473: LD_VAR 0 4
14477: PPUSH
14478: LD_VAR 0 5
14482: PPUSH
14483: LD_INT 8
14485: PPUSH
14486: CALL_OW 456
// if not dialogueMineDetected then
14490: LD_EXP 28
14494: NOT
14495: IFFALSE 14556
// begin CenterNowOnXY ( x , y ) ;
14497: LD_VAR 0 4
14501: PPUSH
14502: LD_VAR 0 5
14506: PPUSH
14507: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14511: LD_EXP 9
14515: PPUSH
14516: LD_STRING D
14518: PUSH
14519: LD_STRING I
14521: PUSH
14522: LD_STRING J
14524: PUSH
14525: LD_STRING S
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: PUSH
14533: LD_EXP 25
14537: ARRAY
14538: STR
14539: PUSH
14540: LD_STRING -1-Mine
14542: STR
14543: PPUSH
14544: CALL_OW 88
// dialogueMineDetected := true ;
14548: LD_ADDR_EXP 28
14552: PUSH
14553: LD_INT 1
14555: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14556: LD_ADDR_VAR 0 2
14560: PUSH
14561: DOUBLE
14562: LD_INT 1
14564: DEC
14565: ST_TO_ADDR
14566: LD_EXP 16
14570: PUSH
14571: FOR_TO
14572: IFFALSE 14642
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14574: LD_EXP 16
14578: PUSH
14579: LD_VAR 0 2
14583: ARRAY
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PUSH
14589: LD_VAR 0 4
14593: EQUAL
14594: PUSH
14595: LD_EXP 16
14599: PUSH
14600: LD_VAR 0 2
14604: ARRAY
14605: PUSH
14606: LD_INT 2
14608: ARRAY
14609: PUSH
14610: LD_VAR 0 5
14614: EQUAL
14615: AND
14616: IFFALSE 14640
// begin staticMines := Delete ( staticMines , j ) ;
14618: LD_ADDR_EXP 16
14622: PUSH
14623: LD_EXP 16
14627: PPUSH
14628: LD_VAR 0 2
14632: PPUSH
14633: CALL_OW 3
14637: ST_TO_ADDR
// break ;
14638: GO 14642
// end ;
14640: GO 14571
14642: POP
14643: POP
// end ; end ;
14644: GO 14424
14646: POP
14647: POP
// end ;
14648: PPOPN 5
14650: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14651: LD_EXP 2
14655: PUSH
14656: LD_INT 1
14658: EQUAL
14659: PUSH
14660: LD_EXP 3
14664: AND
14665: PUSH
14666: LD_EXP 23
14670: AND
14671: PUSH
14672: LD_EXP 36
14676: PUSH
14677: LD_EXP 7
14681: ARRAY
14682: PPUSH
14683: LD_INT 30
14685: PUSH
14686: LD_INT 3
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 72
14697: AND
14698: IFFALSE 14902
14700: GO 14702
14702: DISABLE
14703: LD_INT 0
14705: PPUSH
14706: PPUSH
// begin enable ;
14707: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14708: LD_EXP 7
14712: PPUSH
14713: LD_INT 23
14715: PUSH
14716: LD_INT 3
14718: PUSH
14719: LD_INT 3
14721: PUSH
14722: LD_INT 48
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: PUSH
14731: EMPTY
14732: LIST
14733: PPUSH
14734: CALL 85176 0 2
// repeat wait ( 0 0$1 ) ;
14738: LD_INT 35
14740: PPUSH
14741: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14745: LD_INT 22
14747: PUSH
14748: LD_INT 3
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 34
14757: PUSH
14758: LD_INT 48
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 69
14773: IFFALSE 14738
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14775: LD_ADDR_VAR 0 1
14779: PUSH
14780: LD_INT 22
14782: PUSH
14783: LD_INT 3
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 34
14792: PUSH
14793: LD_INT 48
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PPUSH
14804: CALL_OW 69
14808: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14809: LD_ADDR_VAR 0 2
14813: PUSH
14814: LD_INT 81
14816: PUSH
14817: LD_INT 3
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 21
14826: PUSH
14827: LD_INT 3
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PPUSH
14838: CALL_OW 69
14842: ST_TO_ADDR
// if e then
14843: LD_VAR 0 2
14847: IFFALSE 14873
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14849: LD_ADDR_VAR 0 2
14853: PUSH
14854: LD_VAR 0 2
14858: PPUSH
14859: LD_VAR 0 1
14863: PUSH
14864: LD_INT 1
14866: ARRAY
14867: PPUSH
14868: CALL_OW 74
14872: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14873: LD_VAR 0 1
14877: PPUSH
14878: LD_VAR 0 2
14882: PPUSH
14883: CALL_OW 250
14887: PPUSH
14888: LD_VAR 0 2
14892: PPUSH
14893: CALL_OW 251
14897: PPUSH
14898: CALL_OW 116
// end ;
14902: PPOPN 2
14904: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14905: LD_OWVAR 67
14909: PUSH
14910: LD_INT 1
14912: GREATER
14913: PUSH
14914: LD_EXP 36
14918: PUSH
14919: LD_EXP 7
14923: ARRAY
14924: PPUSH
14925: LD_INT 25
14927: PUSH
14928: LD_INT 3
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PPUSH
14935: CALL_OW 72
14939: AND
14940: PUSH
14941: LD_EXP 2
14945: PUSH
14946: LD_INT 1
14948: EQUAL
14949: AND
14950: PUSH
14951: LD_EXP 3
14955: AND
14956: PUSH
14957: LD_INT 23
14959: PPUSH
14960: LD_INT 3
14962: PPUSH
14963: CALL_OW 321
14967: PUSH
14968: LD_INT 2
14970: EQUAL
14971: AND
14972: IFFALSE 15099
14974: GO 14976
14976: DISABLE
14977: LD_INT 0
14979: PPUSH
14980: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
14981: LD_ADDR_VAR 0 1
14985: PUSH
14986: LD_EXP 36
14990: PUSH
14991: LD_EXP 7
14995: ARRAY
14996: PPUSH
14997: LD_INT 25
14999: PUSH
15000: LD_INT 3
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PPUSH
15007: CALL_OW 72
15011: ST_TO_ADDR
// if not tmp then
15012: LD_VAR 0 1
15016: NOT
15017: IFFALSE 15021
// exit ;
15019: GO 15099
// for i in tmp do
15021: LD_ADDR_VAR 0 2
15025: PUSH
15026: LD_VAR 0 1
15030: PUSH
15031: FOR_IN
15032: IFFALSE 15078
// begin SetTag ( i , 29 ) ;
15034: LD_VAR 0 2
15038: PPUSH
15039: LD_INT 29
15041: PPUSH
15042: CALL_OW 109
// ComExitBuilding ( i ) ;
15046: LD_VAR 0 2
15050: PPUSH
15051: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15055: LD_VAR 0 2
15059: PPUSH
15060: LD_INT 37
15062: PPUSH
15063: LD_INT 97
15065: PPUSH
15066: LD_INT 133
15068: PPUSH
15069: LD_INT 0
15071: PPUSH
15072: CALL_OW 230
// end ;
15076: GO 15031
15078: POP
15079: POP
// wait ( 1 1$00 ) ;
15080: LD_INT 2100
15082: PPUSH
15083: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15087: LD_EXP 7
15091: PPUSH
15092: LD_INT 29
15094: PPUSH
15095: CALL 66033 0 2
// end ;
15099: PPOPN 2
15101: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse do var veh , depot ;
15102: LD_EXP 2
15106: PUSH
15107: LD_INT 1
15109: EQUAL
15110: PUSH
15111: LD_INT 84
15113: PPUSH
15114: LD_INT 128
15116: PPUSH
15117: CALL_OW 428
15121: PPUSH
15122: CALL_OW 266
15126: PUSH
15127: LD_INT 1
15129: EQUAL
15130: AND
15131: IFFALSE 15304
15133: GO 15135
15135: DISABLE
15136: LD_INT 0
15138: PPUSH
15139: PPUSH
// begin enable ;
15140: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: LD_INT 84
15148: PPUSH
15149: LD_INT 128
15151: PPUSH
15152: CALL_OW 428
15156: ST_TO_ADDR
// uc_side := 3 ;
15157: LD_ADDR_OWVAR 20
15161: PUSH
15162: LD_INT 3
15164: ST_TO_ADDR
// uc_nation := 3 ;
15165: LD_ADDR_OWVAR 21
15169: PUSH
15170: LD_INT 3
15172: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15173: LD_INT 21
15175: PPUSH
15176: LD_INT 3
15178: PPUSH
15179: LD_INT 3
15181: PPUSH
15182: LD_INT 51
15184: PPUSH
15185: LD_INT 0
15187: PPUSH
15188: CALL 25949 0 5
// veh := CreateVehicle ;
15192: LD_ADDR_VAR 0 1
15196: PUSH
15197: CALL_OW 45
15201: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15202: LD_VAR 0 1
15206: PPUSH
15207: LD_INT 126
15209: PPUSH
15210: LD_INT 227
15212: PPUSH
15213: LD_INT 0
15215: PPUSH
15216: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15220: LD_VAR 0 1
15224: PPUSH
15225: LD_INT 2
15227: PPUSH
15228: LD_INT 100
15230: PPUSH
15231: CALL_OW 290
// ComGive ( veh , depot ) ;
15235: LD_VAR 0 1
15239: PPUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15249: LD_VAR 0 1
15253: PPUSH
15254: LD_INT 126
15256: PPUSH
15257: LD_INT 227
15259: PPUSH
15260: CALL_OW 171
// wait ( 0 0$10 ) ;
15264: LD_INT 350
15266: PPUSH
15267: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15271: LD_INT 35
15273: PPUSH
15274: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15278: LD_VAR 0 1
15282: PPUSH
15283: LD_INT 126
15285: PPUSH
15286: LD_INT 227
15288: PPUSH
15289: CALL_OW 307
15293: IFFALSE 15271
// RemoveUnit ( veh ) ;
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL_OW 64
// end ;
15304: PPOPN 2
15306: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15307: LD_EXP 2
15311: PUSH
15312: LD_INT 1
15314: EQUAL
15315: PUSH
15316: LD_EXP 27
15320: AND
15321: PUSH
15322: LD_EXP 25
15326: PUSH
15327: LD_INT 2
15329: EQUAL
15330: AND
15331: IFFALSE 15523
15333: GO 15335
15335: DISABLE
15336: LD_INT 0
15338: PPUSH
15339: PPUSH
// begin enable ;
15340: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15341: LD_OWVAR 1
15345: PUSH
15346: LD_INT 105000
15348: PUSH
15349: LD_INT 84000
15351: PUSH
15352: LD_INT 63000
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: LD_OWVAR 67
15364: ARRAY
15365: GREATEREQUAL
15366: IFFALSE 15369
// disable ;
15368: DISABLE
// uc_side := 4 ;
15369: LD_ADDR_OWVAR 20
15373: PUSH
15374: LD_INT 4
15376: ST_TO_ADDR
// uc_nation := 1 ;
15377: LD_ADDR_OWVAR 21
15381: PUSH
15382: LD_INT 1
15384: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15385: LD_INT 2
15387: PPUSH
15388: LD_INT 3
15390: PPUSH
15391: LD_INT 3
15393: PPUSH
15394: LD_INT 12
15396: PPUSH
15397: LD_INT 0
15399: PPUSH
15400: CALL 25949 0 5
// veh := CreateVehicle ;
15404: LD_ADDR_VAR 0 1
15408: PUSH
15409: CALL_OW 45
15413: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15414: LD_VAR 0 1
15418: PPUSH
15419: LD_INT 229
15421: PPUSH
15422: LD_INT 226
15424: PPUSH
15425: LD_INT 0
15427: PPUSH
15428: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15432: LD_VAR 0 1
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: LD_INT 100
15442: PPUSH
15443: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15447: LD_VAR 0 1
15451: PPUSH
15452: LD_INT 25
15454: PPUSH
15455: CALL_OW 173
// AddComUnload ( veh ) ;
15459: LD_VAR 0 1
15463: PPUSH
15464: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15468: LD_VAR 0 1
15472: PPUSH
15473: LD_INT 229
15475: PPUSH
15476: LD_INT 226
15478: PPUSH
15479: CALL_OW 171
// wait ( 0 0$10 ) ;
15483: LD_INT 350
15485: PPUSH
15486: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15490: LD_INT 35
15492: PPUSH
15493: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 229
15504: PPUSH
15505: LD_INT 226
15507: PPUSH
15508: CALL_OW 307
15512: IFFALSE 15490
// RemoveUnit ( veh ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: CALL_OW 64
// end ;
15523: PPOPN 2
15525: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15526: LD_EXP 2
15530: PUSH
15531: LD_INT 1
15533: EQUAL
15534: PUSH
15535: LD_EXP 3
15539: AND
15540: PUSH
15541: LD_EXP 24
15545: AND
15546: IFFALSE 15879
15548: GO 15550
15550: DISABLE
15551: LD_INT 0
15553: PPUSH
15554: PPUSH
15555: PPUSH
15556: PPUSH
15557: PPUSH
// begin enable ;
15558: ENABLE
// tmp := [ ] ;
15559: LD_ADDR_VAR 0 4
15563: PUSH
15564: EMPTY
15565: ST_TO_ADDR
// if commander = 1 then
15566: LD_EXP 25
15570: PUSH
15571: LD_INT 1
15573: EQUAL
15574: IFFALSE 15586
// amount := 3 else
15576: LD_ADDR_VAR 0 5
15580: PUSH
15581: LD_INT 3
15583: ST_TO_ADDR
15584: GO 15594
// amount := 2 ;
15586: LD_ADDR_VAR 0 5
15590: PUSH
15591: LD_INT 2
15593: ST_TO_ADDR
// for i = 1 to amount do
15594: LD_ADDR_VAR 0 1
15598: PUSH
15599: DOUBLE
15600: LD_INT 1
15602: DEC
15603: ST_TO_ADDR
15604: LD_VAR 0 5
15608: PUSH
15609: FOR_TO
15610: IFFALSE 15774
// begin wait ( 0 0$5 ) ;
15612: LD_INT 175
15614: PPUSH
15615: CALL_OW 67
// for j = 1 to 3 do
15619: LD_ADDR_VAR 0 2
15623: PUSH
15624: DOUBLE
15625: LD_INT 1
15627: DEC
15628: ST_TO_ADDR
15629: LD_INT 3
15631: PUSH
15632: FOR_TO
15633: IFFALSE 15770
// begin uc_side := 4 ;
15635: LD_ADDR_OWVAR 20
15639: PUSH
15640: LD_INT 4
15642: ST_TO_ADDR
// uc_nation := 1 ;
15643: LD_ADDR_OWVAR 21
15647: PUSH
15648: LD_INT 1
15650: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15651: LD_INT 3
15653: PUSH
15654: LD_INT 5
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 1
15663: PPUSH
15664: LD_INT 2
15666: PPUSH
15667: CALL_OW 12
15671: ARRAY
15672: PPUSH
15673: LD_INT 3
15675: PPUSH
15676: LD_INT 3
15678: PPUSH
15679: LD_INT 9
15681: PUSH
15682: LD_INT 5
15684: PUSH
15685: LD_INT 7
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 1
15695: PPUSH
15696: LD_INT 3
15698: PPUSH
15699: CALL_OW 12
15703: ARRAY
15704: PPUSH
15705: LD_INT 100
15707: PPUSH
15708: CALL 25949 0 5
// veh := CreateVehicle ;
15712: LD_ADDR_VAR 0 3
15716: PUSH
15717: CALL_OW 45
15721: ST_TO_ADDR
// tmp := tmp ^ veh ;
15722: LD_ADDR_VAR 0 4
15726: PUSH
15727: LD_VAR 0 4
15731: PUSH
15732: LD_VAR 0 3
15736: ADD
15737: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15738: LD_VAR 0 3
15742: PPUSH
15743: LD_INT 22
15745: PPUSH
15746: LD_INT 0
15748: PPUSH
15749: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15753: LD_VAR 0 3
15757: PPUSH
15758: LD_INT 119
15760: PPUSH
15761: LD_INT 215
15763: PPUSH
15764: CALL_OW 111
// end ;
15768: GO 15632
15770: POP
15771: POP
// end ;
15772: GO 15609
15774: POP
15775: POP
// wait ( 0 0$3 ) ;
15776: LD_INT 105
15778: PPUSH
15779: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15783: LD_INT 35
15785: PPUSH
15786: CALL_OW 67
// for i in tmp do
15790: LD_ADDR_VAR 0 1
15794: PUSH
15795: LD_VAR 0 4
15799: PUSH
15800: FOR_IN
15801: IFFALSE 15868
// if IsDead ( i ) then
15803: LD_VAR 0 1
15807: PPUSH
15808: CALL_OW 301
15812: IFFALSE 15832
// tmp := tmp diff i else
15814: LD_ADDR_VAR 0 4
15818: PUSH
15819: LD_VAR 0 4
15823: PUSH
15824: LD_VAR 0 1
15828: DIFF
15829: ST_TO_ADDR
15830: GO 15866
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15832: LD_VAR 0 1
15836: PPUSH
15837: LD_INT 81
15839: PUSH
15840: LD_INT 4
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: PPUSH
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 74
15861: PPUSH
15862: CALL_OW 115
15866: GO 15800
15868: POP
15869: POP
// until tmp = [ ] ;
15870: LD_VAR 0 4
15874: PUSH
15875: EMPTY
15876: EQUAL
15877: IFFALSE 15783
// end ;
15879: PPOPN 5
15881: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15882: LD_EXP 2
15886: PUSH
15887: LD_INT 1
15889: EQUAL
15890: PUSH
15891: LD_EXP 3
15895: AND
15896: IFFALSE 15997
15898: GO 15900
15900: DISABLE
15901: LD_INT 0
15903: PPUSH
15904: PPUSH
// begin enable ;
15905: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: LD_INT 3
15913: PUSH
15914: LD_INT 22
15916: PUSH
15917: LD_INT 1
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 32
15930: PUSH
15931: LD_INT 1
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 69
15946: ST_TO_ADDR
// if tmp then
15947: LD_VAR 0 2
15951: IFFALSE 15997
// for i in tmp do
15953: LD_ADDR_VAR 0 1
15957: PUSH
15958: LD_VAR 0 2
15962: PUSH
15963: FOR_IN
15964: IFFALSE 15995
// if GetFuel ( i ) < 3 then
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 261
15975: PUSH
15976: LD_INT 3
15978: LESS
15979: IFFALSE 15993
// SetFuel ( i , 3 ) ;
15981: LD_VAR 0 1
15985: PPUSH
15986: LD_INT 3
15988: PPUSH
15989: CALL_OW 240
15993: GO 15963
15995: POP
15996: POP
// end ;
15997: PPOPN 2
15999: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16000: LD_EXP 3
16004: PUSH
16005: LD_INT 8
16007: PPUSH
16008: LD_INT 4
16010: PPUSH
16011: CALL_OW 81
16015: PUSH
16016: LD_INT 2
16018: EQUAL
16019: AND
16020: IFFALSE 16230
16022: GO 16024
16024: DISABLE
16025: LD_INT 0
16027: PPUSH
16028: PPUSH
16029: PPUSH
// begin enable ;
16030: ENABLE
// tmp := [ ] ;
16031: LD_ADDR_VAR 0 3
16035: PUSH
16036: EMPTY
16037: ST_TO_ADDR
// for i = 1 to 4 do
16038: LD_ADDR_VAR 0 1
16042: PUSH
16043: DOUBLE
16044: LD_INT 1
16046: DEC
16047: ST_TO_ADDR
16048: LD_INT 4
16050: PUSH
16051: FOR_TO
16052: IFFALSE 16196
// begin uc_side := 8 ;
16054: LD_ADDR_OWVAR 20
16058: PUSH
16059: LD_INT 8
16061: ST_TO_ADDR
// uc_nation := nation_arabian ;
16062: LD_ADDR_OWVAR 21
16066: PUSH
16067: LD_INT 2
16069: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16070: LD_INT 11
16072: PPUSH
16073: LD_INT 1
16075: PPUSH
16076: LD_INT 5
16078: PPUSH
16079: LD_INT 24
16081: PUSH
16082: LD_INT 23
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 1
16091: PPUSH
16092: LD_INT 2
16094: PPUSH
16095: CALL_OW 12
16099: ARRAY
16100: PPUSH
16101: LD_INT 60
16103: PPUSH
16104: LD_INT 80
16106: PPUSH
16107: CALL_OW 12
16111: PPUSH
16112: CALL 25949 0 5
// un := CreateVehicle ;
16116: LD_ADDR_VAR 0 2
16120: PUSH
16121: CALL_OW 45
16125: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16126: LD_VAR 0 2
16130: PPUSH
16131: LD_INT 2
16133: PPUSH
16134: CALL_OW 233
// tmp := tmp ^ un ;
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_VAR 0 3
16147: PUSH
16148: LD_VAR 0 2
16152: ADD
16153: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16154: LD_VAR 0 2
16158: PPUSH
16159: LD_INT 88
16161: PPUSH
16162: LD_INT 2
16164: PPUSH
16165: LD_INT 0
16167: PPUSH
16168: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16172: LD_VAR 0 2
16176: PPUSH
16177: LD_INT 93
16179: PPUSH
16180: LD_INT 13
16182: PPUSH
16183: CALL_OW 111
// wait ( 0 0$2 ) ;
16187: LD_INT 70
16189: PPUSH
16190: CALL_OW 67
// end ;
16194: GO 16051
16196: POP
16197: POP
// for i in tmp do
16198: LD_ADDR_VAR 0 1
16202: PUSH
16203: LD_VAR 0 3
16207: PUSH
16208: FOR_IN
16209: IFFALSE 16228
// AddComMoveXY ( i , 136 , 19 ) ;
16211: LD_VAR 0 1
16215: PPUSH
16216: LD_INT 136
16218: PPUSH
16219: LD_INT 19
16221: PPUSH
16222: CALL_OW 171
16226: GO 16208
16228: POP
16229: POP
// end ;
16230: PPOPN 3
16232: END
// every 7 7$30 + 7 7$30 trigger game and not MC_GetVehicles ( mc_leg , true ) do var i , base , tmp , target ;
16233: LD_EXP 3
16237: PUSH
16238: LD_EXP 6
16242: PPUSH
16243: LD_INT 1
16245: PPUSH
16246: CALL 86531 0 2
16250: NOT
16251: AND
16252: IFFALSE 17171
16254: GO 16256
16256: DISABLE
16257: LD_INT 0
16259: PPUSH
16260: PPUSH
16261: PPUSH
16262: PPUSH
// begin enable ;
16263: ENABLE
// base := mc_leg ;
16264: LD_ADDR_VAR 0 2
16268: PUSH
16269: LD_EXP 6
16273: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16274: LD_INT 22
16276: PUSH
16277: LD_INT 8
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 23
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 30
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: NOT
16314: IFFALSE 16318
// exit ;
16316: GO 17171
// if Prob ( 40 ) then
16318: LD_INT 40
16320: PPUSH
16321: CALL_OW 13
16325: IFFALSE 16454
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16327: LD_VAR 0 2
16331: PPUSH
16332: LD_INT 13
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: LD_INT 28
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 13
16352: PUSH
16353: LD_INT 1
16355: PUSH
16356: LD_INT 2
16358: PUSH
16359: LD_INT 28
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 13
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: LD_INT 2
16376: PUSH
16377: LD_INT 28
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 13
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: LD_INT 28
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 13
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: LD_INT 28
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 13
16424: PUSH
16425: LD_INT 1
16427: PUSH
16428: LD_INT 2
16430: PUSH
16431: LD_INT 26
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: PPUSH
16448: CALL 85176 0 2
// end else
16452: GO 16671
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 13
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: LD_INT 27
16470: PUSH
16471: LD_INT 26
16473: PUSH
16474: LD_INT 26
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 1
16484: PPUSH
16485: LD_INT 3
16487: PPUSH
16488: CALL_OW 12
16492: ARRAY
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 13
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: LD_INT 2
16508: PUSH
16509: LD_INT 27
16511: PUSH
16512: LD_INT 26
16514: PUSH
16515: LD_INT 26
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 1
16525: PPUSH
16526: LD_INT 3
16528: PPUSH
16529: CALL_OW 12
16533: ARRAY
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 13
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: LD_INT 26
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: LD_INT 29
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 1
16566: PPUSH
16567: LD_INT 3
16569: PPUSH
16570: CALL_OW 12
16574: ARRAY
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 13
16584: PUSH
16585: LD_INT 1
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: LD_INT 29
16596: PUSH
16597: LD_INT 29
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: PPUSH
16608: LD_INT 3
16610: PPUSH
16611: CALL_OW 12
16615: ARRAY
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 13
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: LD_INT 29
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 13
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 26
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: PPUSH
16667: CALL 85176 0 2
// end ; repeat wait ( 0 0$1 ) ;
16671: LD_INT 35
16673: PPUSH
16674: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16678: LD_VAR 0 2
16682: PPUSH
16683: LD_INT 1
16685: PPUSH
16686: CALL 86531 0 2
16690: PUSH
16691: LD_INT 6
16693: GREATEREQUAL
16694: PUSH
16695: LD_OWVAR 1
16699: PUSH
16700: LD_INT 21000
16702: MOD
16703: PUSH
16704: LD_INT 0
16706: EQUAL
16707: OR
16708: IFFALSE 16671
// wait ( 0 0$30 ) ;
16710: LD_INT 1050
16712: PPUSH
16713: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16717: LD_ADDR_VAR 0 3
16721: PUSH
16722: LD_VAR 0 2
16726: PPUSH
16727: LD_INT 1
16729: PPUSH
16730: CALL 86531 0 2
16734: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16735: LD_ADDR_EXP 55
16739: PUSH
16740: LD_EXP 55
16744: PPUSH
16745: LD_VAR 0 2
16749: PPUSH
16750: LD_EXP 55
16754: PUSH
16755: LD_VAR 0 2
16759: ARRAY
16760: PUSH
16761: LD_VAR 0 3
16765: DIFF
16766: PPUSH
16767: CALL_OW 1
16771: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16772: LD_ADDR_VAR 0 4
16776: PUSH
16777: LD_INT 0
16779: PPUSH
16780: LD_INT 2
16782: PPUSH
16783: CALL_OW 12
16787: ST_TO_ADDR
// if legChangeSide then
16788: LD_EXP 21
16792: IFFALSE 16802
// target := 2 ;
16794: LD_ADDR_VAR 0 4
16798: PUSH
16799: LD_INT 2
16801: ST_TO_ADDR
// if target = 2 then
16802: LD_VAR 0 4
16806: PUSH
16807: LD_INT 2
16809: EQUAL
16810: IFFALSE 16938
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16812: LD_ADDR_VAR 0 3
16816: PUSH
16817: LD_VAR 0 3
16821: PPUSH
16822: LD_INT 24
16824: PUSH
16825: LD_INT 250
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PPUSH
16832: CALL_OW 72
16836: ST_TO_ADDR
// for i in tmp do
16837: LD_ADDR_VAR 0 1
16841: PUSH
16842: LD_VAR 0 3
16846: PUSH
16847: FOR_IN
16848: IFFALSE 16888
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16850: LD_VAR 0 1
16854: PPUSH
16855: LD_INT 112
16857: PPUSH
16858: LD_INT 64
16860: PPUSH
16861: CALL_OW 297
16865: PUSH
16866: LD_INT 9
16868: GREATER
16869: IFFALSE 16886
// ComMoveXY ( i , 112 , 64 ) ;
16871: LD_VAR 0 1
16875: PPUSH
16876: LD_INT 112
16878: PPUSH
16879: LD_INT 64
16881: PPUSH
16882: CALL_OW 111
16886: GO 16847
16888: POP
16889: POP
// wait ( 0 0$1 ) ;
16890: LD_INT 35
16892: PPUSH
16893: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16897: LD_VAR 0 3
16901: PPUSH
16902: LD_INT 92
16904: PUSH
16905: LD_INT 112
16907: PUSH
16908: LD_INT 64
16910: PUSH
16911: LD_INT 9
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: PPUSH
16920: CALL_OW 72
16924: PUSH
16925: LD_VAR 0 3
16929: PUSH
16930: LD_INT 1
16932: MINUS
16933: GREATEREQUAL
16934: IFFALSE 16812
// end else
16936: GO 17062
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16938: LD_ADDR_VAR 0 3
16942: PUSH
16943: LD_VAR 0 3
16947: PPUSH
16948: LD_INT 24
16950: PUSH
16951: LD_INT 250
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 72
16962: ST_TO_ADDR
// for i in tmp do
16963: LD_ADDR_VAR 0 1
16967: PUSH
16968: LD_VAR 0 3
16972: PUSH
16973: FOR_IN
16974: IFFALSE 17014
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_INT 174
16983: PPUSH
16984: LD_INT 94
16986: PPUSH
16987: CALL_OW 297
16991: PUSH
16992: LD_INT 9
16994: GREATER
16995: IFFALSE 17012
// ComMoveXY ( i , 174 , 94 ) ;
16997: LD_VAR 0 1
17001: PPUSH
17002: LD_INT 174
17004: PPUSH
17005: LD_INT 94
17007: PPUSH
17008: CALL_OW 111
17012: GO 16973
17014: POP
17015: POP
// wait ( 0 0$1 ) ;
17016: LD_INT 35
17018: PPUSH
17019: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17023: LD_VAR 0 3
17027: PPUSH
17028: LD_INT 92
17030: PUSH
17031: LD_INT 174
17033: PUSH
17034: LD_INT 94
17036: PUSH
17037: LD_INT 9
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: PPUSH
17046: CALL_OW 72
17050: PUSH
17051: LD_VAR 0 3
17055: PUSH
17056: LD_INT 1
17058: MINUS
17059: GREATEREQUAL
17060: IFFALSE 16938
// end ; repeat wait ( 0 0$1 ) ;
17062: LD_INT 35
17064: PPUSH
17065: CALL_OW 67
// for i in tmp do
17069: LD_ADDR_VAR 0 1
17073: PUSH
17074: LD_VAR 0 3
17078: PUSH
17079: FOR_IN
17080: IFFALSE 17162
// begin if GetLives ( i ) > 251 then
17082: LD_VAR 0 1
17086: PPUSH
17087: CALL_OW 256
17091: PUSH
17092: LD_INT 251
17094: GREATER
17095: IFFALSE 17133
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17097: LD_VAR 0 1
17101: PPUSH
17102: LD_INT 81
17104: PUSH
17105: LD_INT 8
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PPUSH
17112: CALL_OW 69
17116: PPUSH
17117: LD_VAR 0 1
17121: PPUSH
17122: CALL_OW 74
17126: PPUSH
17127: CALL_OW 115
17131: GO 17160
// if IsDead ( i ) then
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 301
17142: IFFALSE 17160
// tmp := tmp diff i ;
17144: LD_ADDR_VAR 0 3
17148: PUSH
17149: LD_VAR 0 3
17153: PUSH
17154: LD_VAR 0 1
17158: DIFF
17159: ST_TO_ADDR
// end ;
17160: GO 17079
17162: POP
17163: POP
// until not tmp ;
17164: LD_VAR 0 3
17168: NOT
17169: IFFALSE 17062
// end ;
17171: PPOPN 4
17173: END
// every 7 7$30 trigger game and not MC_GetVehicles ( mc_rus_2 , true ) do var i , base , tmp , target , teleport ;
17174: LD_EXP 3
17178: PUSH
17179: LD_EXP 8
17183: PPUSH
17184: LD_INT 1
17186: PPUSH
17187: CALL 86531 0 2
17191: NOT
17192: AND
17193: IFFALSE 18181
17195: GO 17197
17197: DISABLE
17198: LD_INT 0
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
// begin enable ;
17205: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17206: LD_EXP 36
17210: PUSH
17211: LD_EXP 8
17215: ARRAY
17216: PPUSH
17217: LD_INT 22
17219: PUSH
17220: LD_INT 3
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 30
17229: PUSH
17230: LD_INT 3
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PPUSH
17241: CALL_OW 72
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 18181
// base := mc_rus_2 ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_EXP 8
17259: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17260: LD_ADDR_VAR 0 5
17264: PUSH
17265: LD_INT 22
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 30
17277: PUSH
17278: LD_INT 34
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PPUSH
17289: CALL_OW 69
17293: ST_TO_ADDR
// if Prob ( 40 ) then
17294: LD_INT 40
17296: PPUSH
17297: CALL_OW 13
17301: IFFALSE 17430
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17303: LD_VAR 0 2
17307: PPUSH
17308: LD_INT 22
17310: PUSH
17311: LD_INT 3
17313: PUSH
17314: LD_INT 3
17316: PUSH
17317: LD_INT 49
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 22
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: LD_INT 3
17334: PUSH
17335: LD_INT 49
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 22
17346: PUSH
17347: LD_INT 3
17349: PUSH
17350: LD_INT 3
17352: PUSH
17353: LD_INT 49
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 24
17364: PUSH
17365: LD_INT 3
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: LD_INT 46
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 24
17382: PUSH
17383: LD_INT 3
17385: PUSH
17386: LD_INT 3
17388: PUSH
17389: LD_INT 46
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 24
17400: PUSH
17401: LD_INT 3
17403: PUSH
17404: LD_INT 3
17406: PUSH
17407: LD_INT 46
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: PPUSH
17424: CALL 85176 0 2
// end else
17428: GO 17555
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17430: LD_VAR 0 2
17434: PPUSH
17435: LD_INT 24
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: LD_INT 47
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 24
17455: PUSH
17456: LD_INT 3
17458: PUSH
17459: LD_INT 3
17461: PUSH
17462: LD_INT 47
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 24
17473: PUSH
17474: LD_INT 3
17476: PUSH
17477: LD_INT 3
17479: PUSH
17480: LD_INT 47
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 24
17491: PUSH
17492: LD_INT 3
17494: PUSH
17495: LD_INT 3
17497: PUSH
17498: LD_INT 46
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 24
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: LD_INT 3
17515: PUSH
17516: LD_INT 46
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 24
17527: PUSH
17528: LD_INT 3
17530: PUSH
17531: LD_INT 3
17533: PUSH
17534: LD_INT 46
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL 85176 0 2
// end ; if Difficulty > 1 then
17555: LD_OWVAR 67
17559: PUSH
17560: LD_INT 1
17562: GREATER
17563: IFFALSE 17595
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17565: LD_VAR 0 2
17569: PPUSH
17570: LD_INT 24
17572: PUSH
17573: LD_INT 3
17575: PUSH
17576: LD_INT 3
17578: PUSH
17579: LD_INT 47
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: PUSH
17588: EMPTY
17589: LIST
17590: PPUSH
17591: CALL 85176 0 2
// repeat wait ( 0 0$1 ) ;
17595: LD_INT 35
17597: PPUSH
17598: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17602: LD_VAR 0 2
17606: PPUSH
17607: LD_INT 1
17609: PPUSH
17610: CALL 86531 0 2
17614: PUSH
17615: LD_INT 6
17617: PUSH
17618: LD_INT 7
17620: PUSH
17621: LD_INT 7
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: PUSH
17629: LD_OWVAR 67
17633: ARRAY
17634: GREATEREQUAL
17635: PUSH
17636: LD_OWVAR 1
17640: PUSH
17641: LD_INT 21000
17643: MOD
17644: PUSH
17645: LD_INT 0
17647: EQUAL
17648: OR
17649: IFFALSE 17595
// wait ( 0 0$45 ) ;
17651: LD_INT 1575
17653: PPUSH
17654: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17658: LD_ADDR_VAR 0 3
17662: PUSH
17663: LD_VAR 0 2
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL 86531 0 2
17675: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17676: LD_ADDR_EXP 55
17680: PUSH
17681: LD_EXP 55
17685: PPUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: LD_EXP 55
17695: PUSH
17696: LD_VAR 0 2
17700: ARRAY
17701: PUSH
17702: LD_VAR 0 3
17706: DIFF
17707: PPUSH
17708: CALL_OW 1
17712: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17713: LD_ADDR_VAR 0 4
17717: PUSH
17718: LD_INT 0
17720: PPUSH
17721: LD_INT 1
17723: PPUSH
17724: CALL_OW 12
17728: ST_TO_ADDR
// if target then
17729: LD_VAR 0 4
17733: IFFALSE 17861
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17735: LD_ADDR_VAR 0 3
17739: PUSH
17740: LD_VAR 0 3
17744: PPUSH
17745: LD_INT 24
17747: PUSH
17748: LD_INT 250
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PPUSH
17755: CALL_OW 72
17759: ST_TO_ADDR
// for i in tmp do
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_VAR 0 3
17769: PUSH
17770: FOR_IN
17771: IFFALSE 17811
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17773: LD_VAR 0 1
17777: PPUSH
17778: LD_INT 84
17780: PPUSH
17781: LD_INT 32
17783: PPUSH
17784: CALL_OW 297
17788: PUSH
17789: LD_INT 9
17791: GREATER
17792: IFFALSE 17809
// ComMoveXY ( i , 84 , 32 ) ;
17794: LD_VAR 0 1
17798: PPUSH
17799: LD_INT 84
17801: PPUSH
17802: LD_INT 32
17804: PPUSH
17805: CALL_OW 111
17809: GO 17770
17811: POP
17812: POP
// wait ( 0 0$1 ) ;
17813: LD_INT 35
17815: PPUSH
17816: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17820: LD_VAR 0 3
17824: PPUSH
17825: LD_INT 92
17827: PUSH
17828: LD_INT 84
17830: PUSH
17831: LD_INT 32
17833: PUSH
17834: LD_INT 9
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: PPUSH
17843: CALL_OW 72
17847: PUSH
17848: LD_VAR 0 3
17852: PUSH
17853: LD_INT 1
17855: MINUS
17856: GREATEREQUAL
17857: IFFALSE 17735
// end else
17859: GO 18021
// begin if teleport then
17861: LD_VAR 0 5
17865: IFFALSE 17885
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17867: LD_VAR 0 3
17871: PPUSH
17872: LD_VAR 0 5
17876: PUSH
17877: LD_INT 1
17879: ARRAY
17880: PPUSH
17881: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17885: LD_ADDR_VAR 0 3
17889: PUSH
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_INT 24
17897: PUSH
17898: LD_INT 250
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PPUSH
17905: CALL_OW 72
17909: ST_TO_ADDR
// for i in tmp do
17910: LD_ADDR_VAR 0 1
17914: PUSH
17915: LD_VAR 0 3
17919: PUSH
17920: FOR_IN
17921: IFFALSE 17973
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17923: LD_VAR 0 1
17927: PPUSH
17928: LD_INT 140
17930: PPUSH
17931: LD_INT 219
17933: PPUSH
17934: CALL_OW 297
17938: PUSH
17939: LD_INT 9
17941: GREATER
17942: PUSH
17943: LD_VAR 0 1
17947: PPUSH
17948: CALL_OW 314
17952: NOT
17953: AND
17954: IFFALSE 17971
// AddComMoveXY ( i , 140 , 219 ) ;
17956: LD_VAR 0 1
17960: PPUSH
17961: LD_INT 140
17963: PPUSH
17964: LD_INT 219
17966: PPUSH
17967: CALL_OW 171
17971: GO 17920
17973: POP
17974: POP
// wait ( 0 0$1 ) ;
17975: LD_INT 35
17977: PPUSH
17978: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
17982: LD_VAR 0 3
17986: PPUSH
17987: LD_INT 92
17989: PUSH
17990: LD_INT 140
17992: PUSH
17993: LD_INT 219
17995: PUSH
17996: LD_INT 9
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: PPUSH
18005: CALL_OW 72
18009: PUSH
18010: LD_VAR 0 3
18014: PUSH
18015: LD_INT 1
18017: MINUS
18018: GREATEREQUAL
18019: IFFALSE 17885
// end ; repeat wait ( 0 0$1 ) ;
18021: LD_INT 35
18023: PPUSH
18024: CALL_OW 67
// for i in tmp do
18028: LD_ADDR_VAR 0 1
18032: PUSH
18033: LD_VAR 0 3
18037: PUSH
18038: FOR_IN
18039: IFFALSE 18172
// begin if GetLives ( i ) > 251 then
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 256
18050: PUSH
18051: LD_INT 251
18053: GREATER
18054: IFFALSE 18143
// begin if GetWeapon ( i ) = ru_time_lapser then
18056: LD_VAR 0 1
18060: PPUSH
18061: CALL_OW 264
18065: PUSH
18066: LD_INT 49
18068: EQUAL
18069: IFFALSE 18107
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18071: LD_VAR 0 1
18075: PPUSH
18076: LD_INT 81
18078: PUSH
18079: LD_INT 3
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PPUSH
18086: CALL_OW 69
18090: PPUSH
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 74
18100: PPUSH
18101: CALL_OW 112
18105: GO 18141
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18107: LD_VAR 0 1
18111: PPUSH
18112: LD_INT 81
18114: PUSH
18115: LD_INT 3
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PPUSH
18122: CALL_OW 69
18126: PPUSH
18127: LD_VAR 0 1
18131: PPUSH
18132: CALL_OW 74
18136: PPUSH
18137: CALL_OW 115
// end else
18141: GO 18170
// if IsDead ( i ) then
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 301
18152: IFFALSE 18170
// tmp := tmp diff i ;
18154: LD_ADDR_VAR 0 3
18158: PUSH
18159: LD_VAR 0 3
18163: PUSH
18164: LD_VAR 0 1
18168: DIFF
18169: ST_TO_ADDR
// end ;
18170: GO 18038
18172: POP
18173: POP
// until not tmp ;
18174: LD_VAR 0 3
18178: NOT
18179: IFFALSE 18021
// end ;
18181: PPOPN 5
18183: END
// every 12 12$30 + 11 11$30 trigger game and not MC_GetVehicles ( mc_amer , true ) do var i , base , tmp , target ;
18184: LD_EXP 3
18188: PUSH
18189: LD_EXP 5
18193: PPUSH
18194: LD_INT 1
18196: PPUSH
18197: CALL 86531 0 2
18201: NOT
18202: AND
18203: IFFALSE 18585
18205: GO 18207
18207: DISABLE
18208: LD_INT 0
18210: PPUSH
18211: PPUSH
18212: PPUSH
18213: PPUSH
// begin enable ;
18214: ENABLE
// base := mc_amer ;
18215: LD_ADDR_VAR 0 2
18219: PUSH
18220: LD_EXP 5
18224: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18225: LD_INT 22
18227: PUSH
18228: LD_INT 4
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 23
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 30
18247: PUSH
18248: LD_INT 3
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: PPUSH
18260: CALL_OW 69
18264: NOT
18265: IFFALSE 18269
// exit ;
18267: GO 18585
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18269: LD_VAR 0 2
18273: PPUSH
18274: LD_INT 3
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: LD_INT 5
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 3
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: LD_INT 9
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 3
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: LD_INT 7
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 3
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: LD_INT 7
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 3
18348: PUSH
18349: LD_INT 1
18351: PUSH
18352: LD_INT 2
18354: PUSH
18355: LD_INT 7
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: PPUSH
18371: CALL 85176 0 2
// repeat wait ( 0 0$1 ) ;
18375: LD_INT 35
18377: PPUSH
18378: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18382: LD_VAR 0 2
18386: PPUSH
18387: LD_INT 1
18389: PPUSH
18390: CALL 86531 0 2
18394: PUSH
18395: LD_INT 5
18397: GREATEREQUAL
18398: PUSH
18399: LD_OWVAR 1
18403: PUSH
18404: LD_INT 21000
18406: MOD
18407: PUSH
18408: LD_INT 0
18410: EQUAL
18411: OR
18412: IFFALSE 18375
// wait ( 0 0$30 ) ;
18414: LD_INT 1050
18416: PPUSH
18417: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18421: LD_ADDR_VAR 0 3
18425: PUSH
18426: LD_VAR 0 2
18430: PPUSH
18431: LD_INT 1
18433: PPUSH
18434: CALL 86531 0 2
18438: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18439: LD_ADDR_EXP 55
18443: PUSH
18444: LD_EXP 55
18448: PPUSH
18449: LD_VAR 0 2
18453: PPUSH
18454: LD_EXP 55
18458: PUSH
18459: LD_VAR 0 2
18463: ARRAY
18464: PUSH
18465: LD_VAR 0 3
18469: DIFF
18470: PPUSH
18471: CALL_OW 1
18475: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18476: LD_INT 35
18478: PPUSH
18479: CALL_OW 67
// for i in tmp do
18483: LD_ADDR_VAR 0 1
18487: PUSH
18488: LD_VAR 0 3
18492: PUSH
18493: FOR_IN
18494: IFFALSE 18576
// begin if GetLives ( i ) > 251 then
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 256
18505: PUSH
18506: LD_INT 251
18508: GREATER
18509: IFFALSE 18547
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 81
18518: PUSH
18519: LD_INT 4
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PPUSH
18526: CALL_OW 69
18530: PPUSH
18531: LD_VAR 0 1
18535: PPUSH
18536: CALL_OW 74
18540: PPUSH
18541: CALL_OW 115
18545: GO 18574
// if IsDead ( i ) then
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 301
18556: IFFALSE 18574
// tmp := tmp diff i ;
18558: LD_ADDR_VAR 0 3
18562: PUSH
18563: LD_VAR 0 3
18567: PUSH
18568: LD_VAR 0 1
18572: DIFF
18573: ST_TO_ADDR
// end ;
18574: GO 18493
18576: POP
18577: POP
// until not tmp ;
18578: LD_VAR 0 3
18582: NOT
18583: IFFALSE 18476
// end ; end_of_file
18585: PPOPN 4
18587: END
// export function CustomEvent ( event ) ; begin
18588: LD_INT 0
18590: PPUSH
// end ;
18591: LD_VAR 0 2
18595: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18596: LD_VAR 0 1
18600: PUSH
18601: LD_INT 1
18603: EQUAL
18604: PUSH
18605: LD_VAR 0 2
18609: PUSH
18610: LD_INT 4
18612: EQUAL
18613: AND
18614: IFFALSE 18642
// begin SayRadio ( Powell , DP-Lost ) ;
18616: LD_EXP 12
18620: PPUSH
18621: LD_STRING DP-Lost
18623: PPUSH
18624: CALL_OW 94
// wait ( 0 0$2 ) ;
18628: LD_INT 70
18630: PPUSH
18631: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18635: LD_STRING FriendlyFire
18637: PPUSH
18638: CALL_OW 104
// end ; end ;
18642: PPOPN 2
18644: END
// on UnitDestroyed ( un ) do begin if GameType = 1 then
18645: LD_EXP 2
18649: PUSH
18650: LD_INT 1
18652: EQUAL
18653: IFFALSE 18888
// begin if un = playerCommander then
18655: LD_VAR 0 1
18659: PUSH
18660: LD_EXP 9
18664: EQUAL
18665: IFFALSE 18674
// YouLost ( commanderDied ) ;
18667: LD_STRING commanderDied
18669: PPUSH
18670: CALL_OW 104
// if un = allyCommander then
18674: LD_VAR 0 1
18678: PUSH
18679: LD_EXP 11
18683: EQUAL
18684: IFFALSE 18693
// YouLost ( Theta ) ;
18686: LD_STRING Theta
18688: PPUSH
18689: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18693: LD_VAR 0 1
18697: PUSH
18698: LD_INT 22
18700: PUSH
18701: LD_INT 8
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: LD_INT 21
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 21
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PPUSH
18740: CALL_OW 69
18744: IN
18745: IFFALSE 18761
// legDestCounter := legDestCounter + 1 ;
18747: LD_ADDR_EXP 18
18751: PUSH
18752: LD_EXP 18
18756: PUSH
18757: LD_INT 1
18759: PLUS
18760: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18761: LD_VAR 0 1
18765: PUSH
18766: LD_INT 22
18768: PUSH
18769: LD_INT 4
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: LD_INT 21
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 21
18791: PUSH
18792: LD_INT 3
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PPUSH
18808: CALL_OW 69
18812: IN
18813: IFFALSE 18829
// allyDestCounter := allyDestCounter + 1 ;
18815: LD_ADDR_EXP 22
18819: PUSH
18820: LD_EXP 22
18824: PUSH
18825: LD_INT 1
18827: PLUS
18828: ST_TO_ADDR
// if un in ruOutpost then
18829: LD_VAR 0 1
18833: PUSH
18834: LD_EXP 14
18838: IN
18839: IFFALSE 18888
// begin ruOutpost := ruOutpost diff un ;
18841: LD_ADDR_EXP 14
18845: PUSH
18846: LD_EXP 14
18850: PUSH
18851: LD_VAR 0 1
18855: DIFF
18856: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18857: LD_ADDR_EXP 15
18861: PUSH
18862: LD_EXP 15
18866: PPUSH
18867: LD_INT 1
18869: PPUSH
18870: LD_EXP 15
18874: PUSH
18875: LD_INT 1
18877: ARRAY
18878: PUSH
18879: LD_INT 1
18881: PLUS
18882: PPUSH
18883: CALL_OW 1
18887: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18888: LD_VAR 0 1
18892: PPUSH
18893: CALL 88505 0 1
// end ;
18897: PPOPN 1
18899: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18900: LD_VAR 0 1
18904: PPUSH
18905: LD_VAR 0 2
18909: PPUSH
18910: CALL 90560 0 2
// end ;
18914: PPOPN 2
18916: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: CALL 89628 0 1
// end ;
18926: PPOPN 1
18928: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18929: LD_VAR 0 1
18933: PPUSH
18934: CALL 89869 0 1
// end ;
18938: PPOPN 1
18940: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18941: LD_VAR 0 1
18945: PUSH
18946: LD_INT 14
18948: EQUAL
18949: PUSH
18950: LD_VAR 0 2
18954: PPUSH
18955: CALL_OW 255
18959: PUSH
18960: LD_INT 1
18962: EQUAL
18963: AND
18964: IFFALSE 19005
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18966: LD_EXP 9
18970: PPUSH
18971: LD_STRING D
18973: PUSH
18974: LD_STRING I
18976: PUSH
18977: LD_STRING J
18979: PUSH
18980: LD_STRING S
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: LIST
18987: PUSH
18988: LD_EXP 25
18992: ARRAY
18993: STR
18994: PUSH
18995: LD_STRING -1-Laser
18997: STR
18998: PPUSH
18999: CALL_OW 88
// exit ;
19003: GO 19147
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19005: LD_VAR 0 1
19009: PUSH
19010: LD_INT 7
19012: EQUAL
19013: PUSH
19014: LD_VAR 0 2
19018: PPUSH
19019: CALL_OW 255
19023: PUSH
19024: LD_INT 1
19026: EQUAL
19027: AND
19028: IFFALSE 19069
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19030: LD_EXP 9
19034: PPUSH
19035: LD_STRING D
19037: PUSH
19038: LD_STRING I
19040: PUSH
19041: LD_STRING J
19043: PUSH
19044: LD_STRING S
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: LD_EXP 25
19056: ARRAY
19057: STR
19058: PUSH
19059: LD_STRING -1-Materialization
19061: STR
19062: PPUSH
19063: CALL_OW 88
// exit ;
19067: GO 19147
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19069: LD_VAR 0 1
19073: PUSH
19074: LD_INT 25
19076: EQUAL
19077: PUSH
19078: LD_VAR 0 2
19082: PPUSH
19083: CALL_OW 255
19087: PUSH
19088: LD_INT 1
19090: EQUAL
19091: AND
19092: IFFALSE 19133
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19094: LD_EXP 9
19098: PPUSH
19099: LD_STRING D
19101: PUSH
19102: LD_STRING I
19104: PUSH
19105: LD_STRING J
19107: PUSH
19108: LD_STRING S
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: PUSH
19116: LD_EXP 25
19120: ARRAY
19121: STR
19122: PUSH
19123: LD_STRING -1-Rocket
19125: STR
19126: PPUSH
19127: CALL_OW 88
// exit ;
19131: GO 19147
// end ; MCE_ResearchComplete ( tech , lab ) ;
19133: LD_VAR 0 1
19137: PPUSH
19138: LD_VAR 0 2
19142: PPUSH
19143: CALL 88201 0 2
// end ;
19147: PPOPN 2
19149: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_VAR 0 2
19159: PPUSH
19160: LD_VAR 0 3
19164: PPUSH
19165: LD_VAR 0 4
19169: PPUSH
19170: LD_VAR 0 5
19174: PPUSH
19175: CALL 87821 0 5
// end ;
19179: PPOPN 5
19181: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19182: LD_VAR 0 1
19186: PPUSH
19187: LD_VAR 0 2
19191: PPUSH
19192: CALL 87417 0 2
// end ;
19196: PPOPN 2
19198: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: LD_VAR 0 3
19213: PPUSH
19214: LD_VAR 0 4
19218: PPUSH
19219: CALL 87255 0 4
// end ;
19223: PPOPN 4
19225: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19226: LD_VAR 0 1
19230: PPUSH
19231: LD_VAR 0 2
19235: PPUSH
19236: LD_VAR 0 3
19240: PPUSH
19241: CALL 87030 0 3
// end ;
19245: PPOPN 3
19247: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19248: LD_VAR 0 1
19252: PPUSH
19253: LD_VAR 0 2
19257: PPUSH
19258: CALL 86915 0 2
// end ;
19262: PPOPN 2
19264: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19265: LD_VAR 0 1
19269: PPUSH
19270: LD_VAR 0 2
19274: PPUSH
19275: CALL 90821 0 2
// end ;
19279: PPOPN 2
19281: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19282: LD_VAR 0 1
19286: PPUSH
19287: LD_VAR 0 2
19291: PPUSH
19292: LD_VAR 0 3
19296: PPUSH
19297: LD_VAR 0 4
19301: PPUSH
19302: CALL 91037 0 4
// end ;
19306: PPOPN 4
19308: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19309: LD_VAR 0 1
19313: PPUSH
19314: LD_VAR 0 2
19318: PPUSH
19319: CALL 86724 0 2
// end ;
19323: PPOPN 2
19325: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL 91276 0 1
// end ; end_of_file
19335: PPOPN 1
19337: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19338: LD_INT 0
19340: PPUSH
19341: PPUSH
// if exist_mode then
19342: LD_VAR 0 2
19346: IFFALSE 19371
// unit := CreateCharacter ( prefix & ident ) else
19348: LD_ADDR_VAR 0 5
19352: PUSH
19353: LD_VAR 0 3
19357: PUSH
19358: LD_VAR 0 1
19362: STR
19363: PPUSH
19364: CALL_OW 34
19368: ST_TO_ADDR
19369: GO 19386
// unit := NewCharacter ( ident ) ;
19371: LD_ADDR_VAR 0 5
19375: PUSH
19376: LD_VAR 0 1
19380: PPUSH
19381: CALL_OW 25
19385: ST_TO_ADDR
// result := unit ;
19386: LD_ADDR_VAR 0 4
19390: PUSH
19391: LD_VAR 0 5
19395: ST_TO_ADDR
// end ;
19396: LD_VAR 0 4
19400: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19401: LD_INT 0
19403: PPUSH
19404: PPUSH
// if not side or not nation then
19405: LD_VAR 0 1
19409: NOT
19410: PUSH
19411: LD_VAR 0 2
19415: NOT
19416: OR
19417: IFFALSE 19421
// exit ;
19419: GO 20065
// case nation of nation_american :
19421: LD_VAR 0 2
19425: PUSH
19426: LD_INT 1
19428: DOUBLE
19429: EQUAL
19430: IFTRUE 19434
19432: GO 19608
19434: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
19435: LD_ADDR_VAR 0 4
19439: PUSH
19440: LD_INT 35
19442: PUSH
19443: LD_INT 45
19445: PUSH
19446: LD_INT 46
19448: PUSH
19449: LD_INT 47
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: LD_INT 6
19460: PUSH
19461: LD_INT 15
19463: PUSH
19464: LD_INT 16
19466: PUSH
19467: LD_INT 7
19469: PUSH
19470: LD_INT 12
19472: PUSH
19473: LD_INT 13
19475: PUSH
19476: LD_INT 10
19478: PUSH
19479: LD_INT 14
19481: PUSH
19482: LD_INT 20
19484: PUSH
19485: LD_INT 21
19487: PUSH
19488: LD_INT 22
19490: PUSH
19491: LD_INT 25
19493: PUSH
19494: LD_INT 32
19496: PUSH
19497: LD_INT 27
19499: PUSH
19500: LD_INT 36
19502: PUSH
19503: LD_INT 69
19505: PUSH
19506: LD_INT 39
19508: PUSH
19509: LD_INT 34
19511: PUSH
19512: LD_INT 40
19514: PUSH
19515: LD_INT 48
19517: PUSH
19518: LD_INT 49
19520: PUSH
19521: LD_INT 50
19523: PUSH
19524: LD_INT 51
19526: PUSH
19527: LD_INT 52
19529: PUSH
19530: LD_INT 53
19532: PUSH
19533: LD_INT 54
19535: PUSH
19536: LD_INT 55
19538: PUSH
19539: LD_INT 56
19541: PUSH
19542: LD_INT 57
19544: PUSH
19545: LD_INT 58
19547: PUSH
19548: LD_INT 59
19550: PUSH
19551: LD_INT 60
19553: PUSH
19554: LD_INT 61
19556: PUSH
19557: LD_INT 62
19559: PUSH
19560: LD_INT 80
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: ST_TO_ADDR
19606: GO 19989
19608: LD_INT 2
19610: DOUBLE
19611: EQUAL
19612: IFTRUE 19616
19614: GO 19798
19616: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
19617: LD_ADDR_VAR 0 4
19621: PUSH
19622: LD_INT 35
19624: PUSH
19625: LD_INT 45
19627: PUSH
19628: LD_INT 46
19630: PUSH
19631: LD_INT 47
19633: PUSH
19634: LD_INT 70
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: LD_INT 11
19642: PUSH
19643: LD_INT 3
19645: PUSH
19646: LD_INT 4
19648: PUSH
19649: LD_INT 5
19651: PUSH
19652: LD_INT 6
19654: PUSH
19655: LD_INT 15
19657: PUSH
19658: LD_INT 18
19660: PUSH
19661: LD_INT 7
19663: PUSH
19664: LD_INT 17
19666: PUSH
19667: LD_INT 8
19669: PUSH
19670: LD_INT 20
19672: PUSH
19673: LD_INT 21
19675: PUSH
19676: LD_INT 22
19678: PUSH
19679: LD_INT 72
19681: PUSH
19682: LD_INT 26
19684: PUSH
19685: LD_INT 69
19687: PUSH
19688: LD_INT 39
19690: PUSH
19691: LD_INT 40
19693: PUSH
19694: LD_INT 41
19696: PUSH
19697: LD_INT 42
19699: PUSH
19700: LD_INT 43
19702: PUSH
19703: LD_INT 48
19705: PUSH
19706: LD_INT 49
19708: PUSH
19709: LD_INT 50
19711: PUSH
19712: LD_INT 51
19714: PUSH
19715: LD_INT 52
19717: PUSH
19718: LD_INT 53
19720: PUSH
19721: LD_INT 54
19723: PUSH
19724: LD_INT 55
19726: PUSH
19727: LD_INT 56
19729: PUSH
19730: LD_INT 60
19732: PUSH
19733: LD_INT 61
19735: PUSH
19736: LD_INT 62
19738: PUSH
19739: LD_INT 66
19741: PUSH
19742: LD_INT 67
19744: PUSH
19745: LD_INT 68
19747: PUSH
19748: LD_INT 81
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: ST_TO_ADDR
19796: GO 19989
19798: LD_INT 3
19800: DOUBLE
19801: EQUAL
19802: IFTRUE 19806
19804: GO 19988
19806: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
19807: LD_ADDR_VAR 0 4
19811: PUSH
19812: LD_INT 46
19814: PUSH
19815: LD_INT 47
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 2
19823: PUSH
19824: LD_INT 11
19826: PUSH
19827: LD_INT 9
19829: PUSH
19830: LD_INT 20
19832: PUSH
19833: LD_INT 19
19835: PUSH
19836: LD_INT 21
19838: PUSH
19839: LD_INT 24
19841: PUSH
19842: LD_INT 22
19844: PUSH
19845: LD_INT 25
19847: PUSH
19848: LD_INT 28
19850: PUSH
19851: LD_INT 29
19853: PUSH
19854: LD_INT 30
19856: PUSH
19857: LD_INT 31
19859: PUSH
19860: LD_INT 37
19862: PUSH
19863: LD_INT 38
19865: PUSH
19866: LD_INT 32
19868: PUSH
19869: LD_INT 27
19871: PUSH
19872: LD_INT 33
19874: PUSH
19875: LD_INT 69
19877: PUSH
19878: LD_INT 39
19880: PUSH
19881: LD_INT 34
19883: PUSH
19884: LD_INT 40
19886: PUSH
19887: LD_INT 71
19889: PUSH
19890: LD_INT 23
19892: PUSH
19893: LD_INT 44
19895: PUSH
19896: LD_INT 48
19898: PUSH
19899: LD_INT 49
19901: PUSH
19902: LD_INT 50
19904: PUSH
19905: LD_INT 51
19907: PUSH
19908: LD_INT 52
19910: PUSH
19911: LD_INT 53
19913: PUSH
19914: LD_INT 54
19916: PUSH
19917: LD_INT 55
19919: PUSH
19920: LD_INT 56
19922: PUSH
19923: LD_INT 57
19925: PUSH
19926: LD_INT 58
19928: PUSH
19929: LD_INT 59
19931: PUSH
19932: LD_INT 63
19934: PUSH
19935: LD_INT 64
19937: PUSH
19938: LD_INT 65
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: ST_TO_ADDR
19986: GO 19989
19988: POP
// if state > - 1 and state < 3 then
19989: LD_VAR 0 3
19993: PUSH
19994: LD_INT 1
19996: NEG
19997: GREATER
19998: PUSH
19999: LD_VAR 0 3
20003: PUSH
20004: LD_INT 3
20006: LESS
20007: AND
20008: IFFALSE 20065
// for i in result do
20010: LD_ADDR_VAR 0 5
20014: PUSH
20015: LD_VAR 0 4
20019: PUSH
20020: FOR_IN
20021: IFFALSE 20063
// if GetTech ( i , side ) <> state then
20023: LD_VAR 0 5
20027: PPUSH
20028: LD_VAR 0 1
20032: PPUSH
20033: CALL_OW 321
20037: PUSH
20038: LD_VAR 0 3
20042: NONEQUAL
20043: IFFALSE 20061
// result := result diff i ;
20045: LD_ADDR_VAR 0 4
20049: PUSH
20050: LD_VAR 0 4
20054: PUSH
20055: LD_VAR 0 5
20059: DIFF
20060: ST_TO_ADDR
20061: GO 20020
20063: POP
20064: POP
// end ;
20065: LD_VAR 0 4
20069: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20070: LD_INT 0
20072: PPUSH
20073: PPUSH
20074: PPUSH
// result := true ;
20075: LD_ADDR_VAR 0 3
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20083: LD_ADDR_VAR 0 5
20087: PUSH
20088: LD_VAR 0 2
20092: PPUSH
20093: CALL_OW 480
20097: ST_TO_ADDR
// if not tmp then
20098: LD_VAR 0 5
20102: NOT
20103: IFFALSE 20107
// exit ;
20105: GO 20156
// for i in tmp do
20107: LD_ADDR_VAR 0 4
20111: PUSH
20112: LD_VAR 0 5
20116: PUSH
20117: FOR_IN
20118: IFFALSE 20154
// if GetTech ( i , side ) <> state_researched then
20120: LD_VAR 0 4
20124: PPUSH
20125: LD_VAR 0 1
20129: PPUSH
20130: CALL_OW 321
20134: PUSH
20135: LD_INT 2
20137: NONEQUAL
20138: IFFALSE 20152
// begin result := false ;
20140: LD_ADDR_VAR 0 3
20144: PUSH
20145: LD_INT 0
20147: ST_TO_ADDR
// exit ;
20148: POP
20149: POP
20150: GO 20156
// end ;
20152: GO 20117
20154: POP
20155: POP
// end ;
20156: LD_VAR 0 3
20160: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20161: LD_INT 0
20163: PPUSH
20164: PPUSH
20165: PPUSH
20166: PPUSH
20167: PPUSH
20168: PPUSH
20169: PPUSH
20170: PPUSH
20171: PPUSH
20172: PPUSH
20173: PPUSH
20174: PPUSH
20175: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20176: LD_VAR 0 1
20180: NOT
20181: PUSH
20182: LD_VAR 0 1
20186: PPUSH
20187: CALL_OW 257
20191: PUSH
20192: LD_INT 9
20194: NONEQUAL
20195: OR
20196: IFFALSE 20200
// exit ;
20198: GO 20773
// side := GetSide ( unit ) ;
20200: LD_ADDR_VAR 0 9
20204: PUSH
20205: LD_VAR 0 1
20209: PPUSH
20210: CALL_OW 255
20214: ST_TO_ADDR
// tech_space := tech_spacanom ;
20215: LD_ADDR_VAR 0 12
20219: PUSH
20220: LD_INT 29
20222: ST_TO_ADDR
// tech_time := tech_taurad ;
20223: LD_ADDR_VAR 0 13
20227: PUSH
20228: LD_INT 28
20230: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20231: LD_ADDR_VAR 0 11
20235: PUSH
20236: LD_VAR 0 1
20240: PPUSH
20241: CALL_OW 310
20245: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20246: LD_VAR 0 11
20250: PPUSH
20251: CALL_OW 247
20255: PUSH
20256: LD_INT 2
20258: EQUAL
20259: IFFALSE 20263
// exit ;
20261: GO 20773
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20263: LD_ADDR_VAR 0 8
20267: PUSH
20268: LD_INT 81
20270: PUSH
20271: LD_VAR 0 9
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 3
20282: PUSH
20283: LD_INT 21
20285: PUSH
20286: LD_INT 3
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PPUSH
20301: CALL_OW 69
20305: ST_TO_ADDR
// if not tmp then
20306: LD_VAR 0 8
20310: NOT
20311: IFFALSE 20315
// exit ;
20313: GO 20773
// if in_unit then
20315: LD_VAR 0 11
20319: IFFALSE 20343
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20321: LD_ADDR_VAR 0 10
20325: PUSH
20326: LD_VAR 0 8
20330: PPUSH
20331: LD_VAR 0 11
20335: PPUSH
20336: CALL_OW 74
20340: ST_TO_ADDR
20341: GO 20363
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20343: LD_ADDR_VAR 0 10
20347: PUSH
20348: LD_VAR 0 8
20352: PPUSH
20353: LD_VAR 0 1
20357: PPUSH
20358: CALL_OW 74
20362: ST_TO_ADDR
// if not enemy then
20363: LD_VAR 0 10
20367: NOT
20368: IFFALSE 20372
// exit ;
20370: GO 20773
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20372: LD_VAR 0 11
20376: PUSH
20377: LD_VAR 0 11
20381: PPUSH
20382: LD_VAR 0 10
20386: PPUSH
20387: CALL_OW 296
20391: PUSH
20392: LD_INT 13
20394: GREATER
20395: AND
20396: PUSH
20397: LD_VAR 0 1
20401: PPUSH
20402: LD_VAR 0 10
20406: PPUSH
20407: CALL_OW 296
20411: PUSH
20412: LD_INT 12
20414: GREATER
20415: OR
20416: IFFALSE 20420
// exit ;
20418: GO 20773
// missile := [ 1 ] ;
20420: LD_ADDR_VAR 0 14
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20431: LD_VAR 0 9
20435: PPUSH
20436: LD_VAR 0 12
20440: PPUSH
20441: CALL_OW 325
20445: IFFALSE 20474
// missile := Insert ( missile , missile + 1 , 2 ) ;
20447: LD_ADDR_VAR 0 14
20451: PUSH
20452: LD_VAR 0 14
20456: PPUSH
20457: LD_VAR 0 14
20461: PUSH
20462: LD_INT 1
20464: PLUS
20465: PPUSH
20466: LD_INT 2
20468: PPUSH
20469: CALL_OW 2
20473: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20474: LD_VAR 0 9
20478: PPUSH
20479: LD_VAR 0 13
20483: PPUSH
20484: CALL_OW 325
20488: PUSH
20489: LD_VAR 0 10
20493: PPUSH
20494: CALL_OW 255
20498: PPUSH
20499: LD_VAR 0 13
20503: PPUSH
20504: CALL_OW 325
20508: NOT
20509: AND
20510: IFFALSE 20539
// missile := Insert ( missile , missile + 1 , 3 ) ;
20512: LD_ADDR_VAR 0 14
20516: PUSH
20517: LD_VAR 0 14
20521: PPUSH
20522: LD_VAR 0 14
20526: PUSH
20527: LD_INT 1
20529: PLUS
20530: PPUSH
20531: LD_INT 3
20533: PPUSH
20534: CALL_OW 2
20538: ST_TO_ADDR
// if missile < 2 then
20539: LD_VAR 0 14
20543: PUSH
20544: LD_INT 2
20546: LESS
20547: IFFALSE 20551
// exit ;
20549: GO 20773
// x := GetX ( enemy ) ;
20551: LD_ADDR_VAR 0 4
20555: PUSH
20556: LD_VAR 0 10
20560: PPUSH
20561: CALL_OW 250
20565: ST_TO_ADDR
// y := GetY ( enemy ) ;
20566: LD_ADDR_VAR 0 5
20570: PUSH
20571: LD_VAR 0 10
20575: PPUSH
20576: CALL_OW 251
20580: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20581: LD_ADDR_VAR 0 6
20585: PUSH
20586: LD_VAR 0 4
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PPUSH
20595: LD_INT 1
20597: PPUSH
20598: CALL_OW 12
20602: PLUS
20603: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20604: LD_ADDR_VAR 0 7
20608: PUSH
20609: LD_VAR 0 5
20613: PUSH
20614: LD_INT 1
20616: NEG
20617: PPUSH
20618: LD_INT 1
20620: PPUSH
20621: CALL_OW 12
20625: PLUS
20626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20627: LD_VAR 0 6
20631: PPUSH
20632: LD_VAR 0 7
20636: PPUSH
20637: CALL_OW 488
20641: NOT
20642: IFFALSE 20664
// begin _x := x ;
20644: LD_ADDR_VAR 0 6
20648: PUSH
20649: LD_VAR 0 4
20653: ST_TO_ADDR
// _y := y ;
20654: LD_ADDR_VAR 0 7
20658: PUSH
20659: LD_VAR 0 5
20663: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20664: LD_ADDR_VAR 0 3
20668: PUSH
20669: LD_INT 1
20671: PPUSH
20672: LD_VAR 0 14
20676: PPUSH
20677: CALL_OW 12
20681: ST_TO_ADDR
// case i of 1 :
20682: LD_VAR 0 3
20686: PUSH
20687: LD_INT 1
20689: DOUBLE
20690: EQUAL
20691: IFTRUE 20695
20693: GO 20712
20695: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20696: LD_VAR 0 1
20700: PPUSH
20701: LD_VAR 0 10
20705: PPUSH
20706: CALL_OW 115
20710: GO 20773
20712: LD_INT 2
20714: DOUBLE
20715: EQUAL
20716: IFTRUE 20720
20718: GO 20742
20720: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20721: LD_VAR 0 1
20725: PPUSH
20726: LD_VAR 0 6
20730: PPUSH
20731: LD_VAR 0 7
20735: PPUSH
20736: CALL_OW 153
20740: GO 20773
20742: LD_INT 3
20744: DOUBLE
20745: EQUAL
20746: IFTRUE 20750
20748: GO 20772
20750: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20751: LD_VAR 0 1
20755: PPUSH
20756: LD_VAR 0 6
20760: PPUSH
20761: LD_VAR 0 7
20765: PPUSH
20766: CALL_OW 154
20770: GO 20773
20772: POP
// end ;
20773: LD_VAR 0 2
20777: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20778: LD_INT 0
20780: PPUSH
20781: PPUSH
20782: PPUSH
20783: PPUSH
20784: PPUSH
20785: PPUSH
// if not unit or not building then
20786: LD_VAR 0 1
20790: NOT
20791: PUSH
20792: LD_VAR 0 2
20796: NOT
20797: OR
20798: IFFALSE 20802
// exit ;
20800: GO 20960
// x := GetX ( building ) ;
20802: LD_ADDR_VAR 0 5
20806: PUSH
20807: LD_VAR 0 2
20811: PPUSH
20812: CALL_OW 250
20816: ST_TO_ADDR
// y := GetY ( building ) ;
20817: LD_ADDR_VAR 0 6
20821: PUSH
20822: LD_VAR 0 2
20826: PPUSH
20827: CALL_OW 251
20831: ST_TO_ADDR
// for i = 0 to 5 do
20832: LD_ADDR_VAR 0 4
20836: PUSH
20837: DOUBLE
20838: LD_INT 0
20840: DEC
20841: ST_TO_ADDR
20842: LD_INT 5
20844: PUSH
20845: FOR_TO
20846: IFFALSE 20958
// begin _x := ShiftX ( x , i , 3 ) ;
20848: LD_ADDR_VAR 0 7
20852: PUSH
20853: LD_VAR 0 5
20857: PPUSH
20858: LD_VAR 0 4
20862: PPUSH
20863: LD_INT 3
20865: PPUSH
20866: CALL_OW 272
20870: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20871: LD_ADDR_VAR 0 8
20875: PUSH
20876: LD_VAR 0 6
20880: PPUSH
20881: LD_VAR 0 4
20885: PPUSH
20886: LD_INT 3
20888: PPUSH
20889: CALL_OW 273
20893: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20894: LD_VAR 0 7
20898: PPUSH
20899: LD_VAR 0 8
20903: PPUSH
20904: CALL_OW 488
20908: NOT
20909: IFFALSE 20913
// continue ;
20911: GO 20845
// if HexInfo ( _x , _y ) = 0 then
20913: LD_VAR 0 7
20917: PPUSH
20918: LD_VAR 0 8
20922: PPUSH
20923: CALL_OW 428
20927: PUSH
20928: LD_INT 0
20930: EQUAL
20931: IFFALSE 20956
// begin ComMoveXY ( unit , _x , _y ) ;
20933: LD_VAR 0 1
20937: PPUSH
20938: LD_VAR 0 7
20942: PPUSH
20943: LD_VAR 0 8
20947: PPUSH
20948: CALL_OW 111
// exit ;
20952: POP
20953: POP
20954: GO 20960
// end ; end ;
20956: GO 20845
20958: POP
20959: POP
// end ;
20960: LD_VAR 0 3
20964: RET
// export function ScanBase ( side , base_area ) ; begin
20965: LD_INT 0
20967: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20968: LD_ADDR_VAR 0 3
20972: PUSH
20973: LD_VAR 0 2
20977: PPUSH
20978: LD_INT 81
20980: PUSH
20981: LD_VAR 0 1
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PPUSH
20990: CALL_OW 70
20994: ST_TO_ADDR
// end ;
20995: LD_VAR 0 3
20999: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
21000: LD_INT 0
21002: PPUSH
21003: PPUSH
21004: PPUSH
21005: PPUSH
21006: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
21007: LD_VAR 0 1
21011: NOT
21012: PUSH
21013: LD_EXP 36
21017: PUSH
21018: LD_VAR 0 1
21022: ARRAY
21023: NOT
21024: OR
21025: PUSH
21026: LD_VAR 0 2
21030: NOT
21031: OR
21032: PUSH
21033: LD_VAR 0 3
21037: NOT
21038: OR
21039: IFFALSE 21043
// exit ;
21041: GO 21493
// side := mc_sides [ base ] ;
21043: LD_ADDR_VAR 0 6
21047: PUSH
21048: LD_EXP 62
21052: PUSH
21053: LD_VAR 0 1
21057: ARRAY
21058: ST_TO_ADDR
// if not side then
21059: LD_VAR 0 6
21063: NOT
21064: IFFALSE 21068
// exit ;
21066: GO 21493
// for i in solds do
21068: LD_ADDR_VAR 0 7
21072: PUSH
21073: LD_VAR 0 2
21077: PUSH
21078: FOR_IN
21079: IFFALSE 21140
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21081: LD_VAR 0 7
21085: PPUSH
21086: CALL_OW 310
21090: PPUSH
21091: CALL_OW 266
21095: PUSH
21096: LD_INT 32
21098: PUSH
21099: LD_INT 31
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: IN
21106: IFFALSE 21126
// solds := solds diff i else
21108: LD_ADDR_VAR 0 2
21112: PUSH
21113: LD_VAR 0 2
21117: PUSH
21118: LD_VAR 0 7
21122: DIFF
21123: ST_TO_ADDR
21124: GO 21138
// SetTag ( i , 18 ) ;
21126: LD_VAR 0 7
21130: PPUSH
21131: LD_INT 18
21133: PPUSH
21134: CALL_OW 109
21138: GO 21078
21140: POP
21141: POP
// if not solds then
21142: LD_VAR 0 2
21146: NOT
21147: IFFALSE 21151
// exit ;
21149: GO 21493
// repeat wait ( 0 0$1 ) ;
21151: LD_INT 35
21153: PPUSH
21154: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21158: LD_ADDR_VAR 0 5
21162: PUSH
21163: LD_VAR 0 6
21167: PPUSH
21168: LD_VAR 0 3
21172: PPUSH
21173: CALL 20965 0 2
21177: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
21178: LD_VAR 0 5
21182: NOT
21183: PUSH
21184: LD_VAR 0 5
21188: PUSH
21189: LD_INT 3
21191: GREATER
21192: OR
21193: PUSH
21194: LD_EXP 58
21198: PUSH
21199: LD_VAR 0 1
21203: ARRAY
21204: OR
21205: IFFALSE 21246
// begin for i in solds do
21207: LD_ADDR_VAR 0 7
21211: PUSH
21212: LD_VAR 0 2
21216: PUSH
21217: FOR_IN
21218: IFFALSE 21242
// if HasTask ( i ) then
21220: LD_VAR 0 7
21224: PPUSH
21225: CALL_OW 314
21229: IFFALSE 21240
// ComStop ( i ) ;
21231: LD_VAR 0 7
21235: PPUSH
21236: CALL_OW 141
21240: GO 21217
21242: POP
21243: POP
// break ;
21244: GO 21481
// end ; for i in solds do
21246: LD_ADDR_VAR 0 7
21250: PUSH
21251: LD_VAR 0 2
21255: PUSH
21256: FOR_IN
21257: IFFALSE 21473
// begin if IsInUnit ( i ) then
21259: LD_VAR 0 7
21263: PPUSH
21264: CALL_OW 310
21268: IFFALSE 21279
// ComExitBuilding ( i ) ;
21270: LD_VAR 0 7
21274: PPUSH
21275: CALL_OW 122
// if GetLives ( i ) > 333 then
21279: LD_VAR 0 7
21283: PPUSH
21284: CALL_OW 256
21288: PUSH
21289: LD_INT 333
21291: GREATER
21292: IFFALSE 21320
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21294: LD_VAR 0 7
21298: PPUSH
21299: LD_VAR 0 5
21303: PPUSH
21304: LD_VAR 0 7
21308: PPUSH
21309: CALL_OW 74
21313: PPUSH
21314: CALL_OW 115
21318: GO 21471
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21320: LD_ADDR_VAR 0 8
21324: PUSH
21325: LD_EXP 36
21329: PUSH
21330: LD_VAR 0 1
21334: ARRAY
21335: PPUSH
21336: LD_INT 2
21338: PUSH
21339: LD_INT 30
21341: PUSH
21342: LD_INT 0
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 30
21351: PUSH
21352: LD_INT 1
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 30
21361: PUSH
21362: LD_INT 6
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: PPUSH
21375: CALL_OW 72
21379: PPUSH
21380: LD_VAR 0 7
21384: PPUSH
21385: CALL_OW 74
21389: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21390: LD_VAR 0 7
21394: PPUSH
21395: LD_VAR 0 8
21399: PPUSH
21400: CALL_OW 250
21404: PPUSH
21405: LD_INT 3
21407: PPUSH
21408: LD_INT 5
21410: PPUSH
21411: CALL_OW 272
21415: PPUSH
21416: LD_VAR 0 8
21420: PPUSH
21421: CALL_OW 251
21425: PPUSH
21426: LD_INT 3
21428: PPUSH
21429: LD_INT 5
21431: PPUSH
21432: CALL_OW 273
21436: PPUSH
21437: CALL_OW 111
// SetTag ( i , 0 ) ;
21441: LD_VAR 0 7
21445: PPUSH
21446: LD_INT 0
21448: PPUSH
21449: CALL_OW 109
// solds := solds diff i ;
21453: LD_ADDR_VAR 0 2
21457: PUSH
21458: LD_VAR 0 2
21462: PUSH
21463: LD_VAR 0 7
21467: DIFF
21468: ST_TO_ADDR
// continue ;
21469: GO 21256
// end ; end ;
21471: GO 21256
21473: POP
21474: POP
// until solds ;
21475: LD_VAR 0 2
21479: IFFALSE 21151
// MC_Reset ( base , 18 ) ;
21481: LD_VAR 0 1
21485: PPUSH
21486: LD_INT 18
21488: PPUSH
21489: CALL 66033 0 2
// end ;
21493: LD_VAR 0 4
21497: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
21498: LD_INT 0
21500: PPUSH
21501: PPUSH
21502: PPUSH
21503: PPUSH
21504: PPUSH
21505: PPUSH
21506: PPUSH
21507: PPUSH
21508: PPUSH
21509: PPUSH
21510: PPUSH
21511: PPUSH
21512: PPUSH
21513: PPUSH
21514: PPUSH
21515: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21516: LD_ADDR_VAR 0 12
21520: PUSH
21521: LD_EXP 36
21525: PUSH
21526: LD_VAR 0 1
21530: ARRAY
21531: PPUSH
21532: LD_INT 25
21534: PUSH
21535: LD_INT 3
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PPUSH
21542: CALL_OW 72
21546: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21547: LD_ADDR_VAR 0 8
21551: PUSH
21552: LD_EXP 36
21556: PUSH
21557: LD_VAR 0 1
21561: ARRAY
21562: PPUSH
21563: LD_INT 2
21565: PUSH
21566: LD_INT 25
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 25
21578: PUSH
21579: LD_INT 5
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 25
21588: PUSH
21589: LD_INT 8
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 25
21598: PUSH
21599: LD_INT 9
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: PPUSH
21613: CALL_OW 72
21617: ST_TO_ADDR
// if not defenders and not solds then
21618: LD_VAR 0 2
21622: NOT
21623: PUSH
21624: LD_VAR 0 8
21628: NOT
21629: AND
21630: IFFALSE 21634
// exit ;
21632: GO 22963
// depot_under_attack := false ;
21634: LD_ADDR_VAR 0 16
21638: PUSH
21639: LD_INT 0
21641: ST_TO_ADDR
// sold_defenders := [ ] ;
21642: LD_ADDR_VAR 0 17
21646: PUSH
21647: EMPTY
21648: ST_TO_ADDR
// if mechs then
21649: LD_VAR 0 12
21653: IFFALSE 21782
// for i in defenders do
21655: LD_ADDR_VAR 0 5
21659: PUSH
21660: LD_VAR 0 2
21664: PUSH
21665: FOR_IN
21666: IFFALSE 21780
// begin SetTag ( i , 20 ) ;
21668: LD_VAR 0 5
21672: PPUSH
21673: LD_INT 20
21675: PPUSH
21676: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21680: LD_VAR 0 5
21684: PPUSH
21685: CALL_OW 263
21689: PUSH
21690: LD_INT 1
21692: EQUAL
21693: PUSH
21694: LD_VAR 0 5
21698: PPUSH
21699: CALL_OW 311
21703: NOT
21704: AND
21705: PUSH
21706: LD_VAR 0 12
21710: AND
21711: IFFALSE 21778
// begin un := mechs [ 1 ] ;
21713: LD_ADDR_VAR 0 10
21717: PUSH
21718: LD_VAR 0 12
21722: PUSH
21723: LD_INT 1
21725: ARRAY
21726: ST_TO_ADDR
// ComExitBuilding ( un ) ;
21727: LD_VAR 0 10
21731: PPUSH
21732: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
21736: LD_VAR 0 10
21740: PPUSH
21741: LD_VAR 0 5
21745: PPUSH
21746: CALL_OW 180
// SetTag ( un , 19 ) ;
21750: LD_VAR 0 10
21754: PPUSH
21755: LD_INT 19
21757: PPUSH
21758: CALL_OW 109
// mechs := mechs diff un ;
21762: LD_ADDR_VAR 0 12
21766: PUSH
21767: LD_VAR 0 12
21771: PUSH
21772: LD_VAR 0 10
21776: DIFF
21777: ST_TO_ADDR
// end ; end ;
21778: GO 21665
21780: POP
21781: POP
// if solds then
21782: LD_VAR 0 8
21786: IFFALSE 21845
// for i in solds do
21788: LD_ADDR_VAR 0 5
21792: PUSH
21793: LD_VAR 0 8
21797: PUSH
21798: FOR_IN
21799: IFFALSE 21843
// if not GetTag ( i ) then
21801: LD_VAR 0 5
21805: PPUSH
21806: CALL_OW 110
21810: NOT
21811: IFFALSE 21841
// begin defenders := defenders union i ;
21813: LD_ADDR_VAR 0 2
21817: PUSH
21818: LD_VAR 0 2
21822: PUSH
21823: LD_VAR 0 5
21827: UNION
21828: ST_TO_ADDR
// SetTag ( i , 18 ) ;
21829: LD_VAR 0 5
21833: PPUSH
21834: LD_INT 18
21836: PPUSH
21837: CALL_OW 109
// end ;
21841: GO 21798
21843: POP
21844: POP
// repeat wait ( 0 0$1 ) ;
21845: LD_INT 35
21847: PPUSH
21848: CALL_OW 67
// enemy := mc_scan [ base ] ;
21852: LD_ADDR_VAR 0 3
21856: PUSH
21857: LD_EXP 59
21861: PUSH
21862: LD_VAR 0 1
21866: ARRAY
21867: ST_TO_ADDR
// for i in defenders do
21868: LD_ADDR_VAR 0 5
21872: PUSH
21873: LD_VAR 0 2
21877: PUSH
21878: FOR_IN
21879: IFFALSE 22564
// begin e := NearestUnitToUnit ( enemy , i ) ;
21881: LD_ADDR_VAR 0 13
21885: PUSH
21886: LD_VAR 0 3
21890: PPUSH
21891: LD_VAR 0 5
21895: PPUSH
21896: CALL_OW 74
21900: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
21901: LD_ADDR_VAR 0 16
21905: PUSH
21906: LD_EXP 36
21910: PUSH
21911: LD_VAR 0 1
21915: ARRAY
21916: PPUSH
21917: LD_INT 2
21919: PUSH
21920: LD_INT 30
21922: PUSH
21923: LD_INT 0
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 30
21932: PUSH
21933: LD_INT 1
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: LIST
21944: PPUSH
21945: CALL_OW 72
21949: NOT
21950: PUSH
21951: LD_EXP 36
21955: PUSH
21956: LD_VAR 0 1
21960: ARRAY
21961: PPUSH
21962: LD_INT 2
21964: PUSH
21965: LD_INT 30
21967: PUSH
21968: LD_INT 0
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 30
21977: PUSH
21978: LD_INT 1
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: LIST
21989: PPUSH
21990: CALL_OW 72
21994: PPUSH
21995: CALL_OW 256
21999: PUSH
22000: LD_INT 600
22002: LESS
22003: OR
22004: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
22005: LD_VAR 0 5
22009: PPUSH
22010: CALL_OW 247
22014: PUSH
22015: LD_INT 2
22017: DOUBLE
22018: EQUAL
22019: IFTRUE 22023
22021: GO 22270
22023: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
22024: LD_VAR 0 5
22028: PPUSH
22029: CALL_OW 256
22033: PUSH
22034: LD_INT 650
22036: GREATER
22037: PUSH
22038: LD_VAR 0 5
22042: PPUSH
22043: LD_VAR 0 13
22047: PPUSH
22048: CALL_OW 296
22052: PUSH
22053: LD_INT 40
22055: LESS
22056: AND
22057: IFFALSE 22075
// ComAttackUnit ( i , e ) else
22059: LD_VAR 0 5
22063: PPUSH
22064: LD_VAR 0 13
22068: PPUSH
22069: CALL_OW 115
22073: GO 22153
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22075: LD_VAR 0 5
22079: PPUSH
22080: LD_VAR 0 13
22084: PPUSH
22085: CALL_OW 296
22089: PUSH
22090: LD_INT 30
22092: GREATEREQUAL
22093: PUSH
22094: LD_VAR 0 5
22098: PPUSH
22099: CALL_OW 256
22103: PUSH
22104: LD_INT 650
22106: LESSEQUAL
22107: OR
22108: PUSH
22109: LD_VAR 0 5
22113: PPUSH
22114: LD_EXP 60
22118: PUSH
22119: LD_VAR 0 1
22123: ARRAY
22124: PPUSH
22125: CALL_OW 308
22129: NOT
22130: AND
22131: IFFALSE 22153
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22133: LD_VAR 0 5
22137: PPUSH
22138: LD_EXP 60
22142: PUSH
22143: LD_VAR 0 1
22147: ARRAY
22148: PPUSH
22149: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22153: LD_VAR 0 5
22157: PPUSH
22158: CALL_OW 256
22162: PUSH
22163: LD_INT 998
22165: LESS
22166: PUSH
22167: LD_VAR 0 5
22171: PPUSH
22172: CALL_OW 263
22176: PUSH
22177: LD_INT 1
22179: EQUAL
22180: AND
22181: PUSH
22182: LD_VAR 0 5
22186: PPUSH
22187: CALL_OW 311
22191: AND
22192: PUSH
22193: LD_VAR 0 5
22197: PPUSH
22198: LD_EXP 60
22202: PUSH
22203: LD_VAR 0 1
22207: ARRAY
22208: PPUSH
22209: CALL_OW 308
22213: AND
22214: IFFALSE 22268
// begin mech := IsDrivenBy ( i ) ;
22216: LD_ADDR_VAR 0 9
22220: PUSH
22221: LD_VAR 0 5
22225: PPUSH
22226: CALL_OW 311
22230: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22231: LD_VAR 0 9
22235: PPUSH
22236: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22240: LD_VAR 0 9
22244: PPUSH
22245: LD_VAR 0 5
22249: PPUSH
22250: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22254: LD_VAR 0 9
22258: PPUSH
22259: LD_VAR 0 5
22263: PPUSH
22264: CALL_OW 180
// end ; end ; unit_human :
22268: GO 22535
22270: LD_INT 1
22272: DOUBLE
22273: EQUAL
22274: IFTRUE 22278
22276: GO 22534
22278: POP
// begin b := IsInUnit ( i ) ;
22279: LD_ADDR_VAR 0 18
22283: PUSH
22284: LD_VAR 0 5
22288: PPUSH
22289: CALL_OW 310
22293: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22294: LD_ADDR_VAR 0 19
22298: PUSH
22299: LD_VAR 0 18
22303: NOT
22304: PUSH
22305: LD_VAR 0 18
22309: PPUSH
22310: CALL_OW 266
22314: PUSH
22315: LD_INT 32
22317: PUSH
22318: LD_INT 31
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: IN
22325: OR
22326: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22327: LD_VAR 0 16
22331: PUSH
22332: LD_VAR 0 2
22336: PPUSH
22337: LD_INT 21
22339: PUSH
22340: LD_INT 2
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PPUSH
22347: CALL_OW 72
22351: PUSH
22352: LD_INT 1
22354: LESSEQUAL
22355: OR
22356: PUSH
22357: LD_VAR 0 19
22361: AND
22362: PUSH
22363: LD_VAR 0 5
22367: PUSH
22368: LD_VAR 0 17
22372: IN
22373: NOT
22374: AND
22375: IFFALSE 22468
// begin if b then
22377: LD_VAR 0 18
22381: IFFALSE 22430
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22383: LD_VAR 0 18
22387: PPUSH
22388: LD_VAR 0 3
22392: PPUSH
22393: LD_VAR 0 18
22397: PPUSH
22398: CALL_OW 74
22402: PPUSH
22403: CALL_OW 296
22407: PUSH
22408: LD_INT 10
22410: LESS
22411: PUSH
22412: LD_VAR 0 18
22416: PPUSH
22417: CALL_OW 461
22421: PUSH
22422: LD_INT 7
22424: NONEQUAL
22425: AND
22426: IFFALSE 22430
// continue ;
22428: GO 21878
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22430: LD_ADDR_VAR 0 17
22434: PUSH
22435: LD_VAR 0 17
22439: PPUSH
22440: LD_VAR 0 17
22444: PUSH
22445: LD_INT 1
22447: PLUS
22448: PPUSH
22449: LD_VAR 0 5
22453: PPUSH
22454: CALL_OW 1
22458: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22459: LD_VAR 0 5
22463: PPUSH
22464: CALL_OW 122
// end ; if sold_defenders then
22468: LD_VAR 0 17
22472: IFFALSE 22532
// if i in sold_defenders then
22474: LD_VAR 0 5
22478: PUSH
22479: LD_VAR 0 17
22483: IN
22484: IFFALSE 22532
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
22486: LD_VAR 0 5
22490: PPUSH
22491: CALL_OW 314
22495: NOT
22496: PUSH
22497: LD_VAR 0 5
22501: PPUSH
22502: LD_VAR 0 13
22506: PPUSH
22507: CALL_OW 296
22511: PUSH
22512: LD_INT 30
22514: LESS
22515: AND
22516: IFFALSE 22532
// ComAttackUnit ( i , e ) ;
22518: LD_VAR 0 5
22522: PPUSH
22523: LD_VAR 0 13
22527: PPUSH
22528: CALL_OW 115
// end ; end ; end ;
22532: GO 22535
22534: POP
// if IsDead ( i ) then
22535: LD_VAR 0 5
22539: PPUSH
22540: CALL_OW 301
22544: IFFALSE 22562
// defenders := defenders diff i ;
22546: LD_ADDR_VAR 0 2
22550: PUSH
22551: LD_VAR 0 2
22555: PUSH
22556: LD_VAR 0 5
22560: DIFF
22561: ST_TO_ADDR
// end ;
22562: GO 21878
22564: POP
22565: POP
// until not enemy or not defenders ;
22566: LD_VAR 0 3
22570: NOT
22571: PUSH
22572: LD_VAR 0 2
22576: NOT
22577: OR
22578: IFFALSE 21845
// MC_Reset ( base , 18 ) ;
22580: LD_VAR 0 1
22584: PPUSH
22585: LD_INT 18
22587: PPUSH
22588: CALL 66033 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22592: LD_ADDR_VAR 0 2
22596: PUSH
22597: LD_VAR 0 2
22601: PUSH
22602: LD_VAR 0 2
22606: PPUSH
22607: LD_INT 2
22609: PUSH
22610: LD_INT 25
22612: PUSH
22613: LD_INT 1
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 25
22622: PUSH
22623: LD_INT 5
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 25
22632: PUSH
22633: LD_INT 8
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 25
22642: PUSH
22643: LD_INT 9
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: PPUSH
22657: CALL_OW 72
22661: DIFF
22662: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
22663: LD_VAR 0 3
22667: NOT
22668: PUSH
22669: LD_VAR 0 2
22673: PPUSH
22674: LD_INT 21
22676: PUSH
22677: LD_INT 2
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PPUSH
22684: CALL_OW 72
22688: AND
22689: IFFALSE 22951
// begin tmp := FilterByTag ( defenders , 19 ) ;
22691: LD_ADDR_VAR 0 11
22695: PUSH
22696: LD_VAR 0 2
22700: PPUSH
22701: LD_INT 19
22703: PPUSH
22704: CALL 59331 0 2
22708: ST_TO_ADDR
// if tmp then
22709: LD_VAR 0 11
22713: IFFALSE 22783
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
22715: LD_ADDR_VAR 0 11
22719: PUSH
22720: LD_VAR 0 11
22724: PPUSH
22725: LD_INT 25
22727: PUSH
22728: LD_INT 3
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PPUSH
22735: CALL_OW 72
22739: ST_TO_ADDR
// if tmp then
22740: LD_VAR 0 11
22744: IFFALSE 22783
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
22746: LD_ADDR_EXP 48
22750: PUSH
22751: LD_EXP 48
22755: PPUSH
22756: LD_VAR 0 1
22760: PPUSH
22761: LD_EXP 48
22765: PUSH
22766: LD_VAR 0 1
22770: ARRAY
22771: PUSH
22772: LD_VAR 0 11
22776: UNION
22777: PPUSH
22778: CALL_OW 1
22782: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
22783: LD_VAR 0 1
22787: PPUSH
22788: LD_INT 19
22790: PPUSH
22791: CALL 66033 0 2
// repeat wait ( 0 0$1 ) ;
22795: LD_INT 35
22797: PPUSH
22798: CALL_OW 67
// for i in defenders do
22802: LD_ADDR_VAR 0 5
22806: PUSH
22807: LD_VAR 0 2
22811: PUSH
22812: FOR_IN
22813: IFFALSE 22902
// begin if not IsInArea ( i , mc_parking [ base ] ) then
22815: LD_VAR 0 5
22819: PPUSH
22820: LD_EXP 60
22824: PUSH
22825: LD_VAR 0 1
22829: ARRAY
22830: PPUSH
22831: CALL_OW 308
22835: NOT
22836: IFFALSE 22860
// ComMoveToArea ( i , mc_parking [ base ] ) else
22838: LD_VAR 0 5
22842: PPUSH
22843: LD_EXP 60
22847: PUSH
22848: LD_VAR 0 1
22852: ARRAY
22853: PPUSH
22854: CALL_OW 113
22858: GO 22900
// if GetControl ( i ) = control_manual then
22860: LD_VAR 0 5
22864: PPUSH
22865: CALL_OW 263
22869: PUSH
22870: LD_INT 1
22872: EQUAL
22873: IFFALSE 22900
// if IsDrivenBy ( i ) then
22875: LD_VAR 0 5
22879: PPUSH
22880: CALL_OW 311
22884: IFFALSE 22900
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
22886: LD_VAR 0 5
22890: PPUSH
22891: CALL_OW 311
22895: PPUSH
22896: CALL_OW 121
// end ;
22900: GO 22812
22902: POP
22903: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
22904: LD_VAR 0 2
22908: PPUSH
22909: LD_INT 95
22911: PUSH
22912: LD_EXP 60
22916: PUSH
22917: LD_VAR 0 1
22921: ARRAY
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PPUSH
22927: CALL_OW 72
22931: PUSH
22932: LD_VAR 0 2
22936: EQUAL
22937: PUSH
22938: LD_EXP 59
22942: PUSH
22943: LD_VAR 0 1
22947: ARRAY
22948: OR
22949: IFFALSE 22795
// end ; MC_Reset ( base , 20 ) ;
22951: LD_VAR 0 1
22955: PPUSH
22956: LD_INT 20
22958: PPUSH
22959: CALL 66033 0 2
// end ;
22963: LD_VAR 0 4
22967: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22968: LD_INT 0
22970: PPUSH
22971: PPUSH
22972: PPUSH
22973: PPUSH
// result := false ;
22974: LD_ADDR_VAR 0 2
22978: PUSH
22979: LD_INT 0
22981: ST_TO_ADDR
// side := GetSide ( unit ) ;
22982: LD_ADDR_VAR 0 3
22986: PUSH
22987: LD_VAR 0 1
22991: PPUSH
22992: CALL_OW 255
22996: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22997: LD_ADDR_VAR 0 4
23001: PUSH
23002: LD_VAR 0 1
23006: PPUSH
23007: CALL_OW 248
23011: ST_TO_ADDR
// case nat of 1 :
23012: LD_VAR 0 4
23016: PUSH
23017: LD_INT 1
23019: DOUBLE
23020: EQUAL
23021: IFTRUE 23025
23023: GO 23036
23025: POP
// tech := tech_lassight ; 2 :
23026: LD_ADDR_VAR 0 5
23030: PUSH
23031: LD_INT 12
23033: ST_TO_ADDR
23034: GO 23075
23036: LD_INT 2
23038: DOUBLE
23039: EQUAL
23040: IFTRUE 23044
23042: GO 23055
23044: POP
// tech := tech_mortar ; 3 :
23045: LD_ADDR_VAR 0 5
23049: PUSH
23050: LD_INT 41
23052: ST_TO_ADDR
23053: GO 23075
23055: LD_INT 3
23057: DOUBLE
23058: EQUAL
23059: IFTRUE 23063
23061: GO 23074
23063: POP
// tech := tech_bazooka ; end ;
23064: LD_ADDR_VAR 0 5
23068: PUSH
23069: LD_INT 44
23071: ST_TO_ADDR
23072: GO 23075
23074: POP
// if Researched ( side , tech ) then
23075: LD_VAR 0 3
23079: PPUSH
23080: LD_VAR 0 5
23084: PPUSH
23085: CALL_OW 325
23089: IFFALSE 23116
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23091: LD_ADDR_VAR 0 2
23095: PUSH
23096: LD_INT 5
23098: PUSH
23099: LD_INT 8
23101: PUSH
23102: LD_INT 9
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: LIST
23109: PUSH
23110: LD_VAR 0 4
23114: ARRAY
23115: ST_TO_ADDR
// end ;
23116: LD_VAR 0 2
23120: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23121: LD_INT 0
23123: PPUSH
23124: PPUSH
23125: PPUSH
// if not mines then
23126: LD_VAR 0 2
23130: NOT
23131: IFFALSE 23135
// exit ;
23133: GO 23279
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23135: LD_ADDR_VAR 0 5
23139: PUSH
23140: LD_INT 81
23142: PUSH
23143: LD_VAR 0 1
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 3
23154: PUSH
23155: LD_INT 21
23157: PUSH
23158: LD_INT 3
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PPUSH
23173: CALL_OW 69
23177: ST_TO_ADDR
// for i in mines do
23178: LD_ADDR_VAR 0 4
23182: PUSH
23183: LD_VAR 0 2
23187: PUSH
23188: FOR_IN
23189: IFFALSE 23277
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23191: LD_VAR 0 4
23195: PUSH
23196: LD_INT 1
23198: ARRAY
23199: PPUSH
23200: LD_VAR 0 4
23204: PUSH
23205: LD_INT 2
23207: ARRAY
23208: PPUSH
23209: CALL_OW 458
23213: NOT
23214: IFFALSE 23218
// continue ;
23216: GO 23188
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23218: LD_VAR 0 4
23222: PUSH
23223: LD_INT 1
23225: ARRAY
23226: PPUSH
23227: LD_VAR 0 4
23231: PUSH
23232: LD_INT 2
23234: ARRAY
23235: PPUSH
23236: CALL_OW 428
23240: PUSH
23241: LD_VAR 0 5
23245: IN
23246: IFFALSE 23275
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23248: LD_VAR 0 4
23252: PUSH
23253: LD_INT 1
23255: ARRAY
23256: PPUSH
23257: LD_VAR 0 4
23261: PUSH
23262: LD_INT 2
23264: ARRAY
23265: PPUSH
23266: LD_VAR 0 1
23270: PPUSH
23271: CALL_OW 456
// end ;
23275: GO 23188
23277: POP
23278: POP
// end ;
23279: LD_VAR 0 3
23283: RET
// export function Count ( array ) ; var i ; begin
23284: LD_INT 0
23286: PPUSH
23287: PPUSH
// result := 0 ;
23288: LD_ADDR_VAR 0 2
23292: PUSH
23293: LD_INT 0
23295: ST_TO_ADDR
// for i in array do
23296: LD_ADDR_VAR 0 3
23300: PUSH
23301: LD_VAR 0 1
23305: PUSH
23306: FOR_IN
23307: IFFALSE 23331
// if i then
23309: LD_VAR 0 3
23313: IFFALSE 23329
// result := result + 1 ;
23315: LD_ADDR_VAR 0 2
23319: PUSH
23320: LD_VAR 0 2
23324: PUSH
23325: LD_INT 1
23327: PLUS
23328: ST_TO_ADDR
23329: GO 23306
23331: POP
23332: POP
// end ;
23333: LD_VAR 0 2
23337: RET
// export function IsEmpty ( building ) ; begin
23338: LD_INT 0
23340: PPUSH
// if not building then
23341: LD_VAR 0 1
23345: NOT
23346: IFFALSE 23350
// exit ;
23348: GO 23393
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23350: LD_ADDR_VAR 0 2
23354: PUSH
23355: LD_VAR 0 1
23359: PUSH
23360: LD_INT 22
23362: PUSH
23363: LD_VAR 0 1
23367: PPUSH
23368: CALL_OW 255
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 58
23379: PUSH
23380: EMPTY
23381: LIST
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PPUSH
23387: CALL_OW 69
23391: IN
23392: ST_TO_ADDR
// end ;
23393: LD_VAR 0 2
23397: RET
// export function IsNotFull ( building ) ; begin
23398: LD_INT 0
23400: PPUSH
// if not building then
23401: LD_VAR 0 1
23405: NOT
23406: IFFALSE 23410
// exit ;
23408: GO 23429
// result := UnitsInside ( building ) < 6 ;
23410: LD_ADDR_VAR 0 2
23414: PUSH
23415: LD_VAR 0 1
23419: PPUSH
23420: CALL_OW 313
23424: PUSH
23425: LD_INT 6
23427: LESS
23428: ST_TO_ADDR
// end ;
23429: LD_VAR 0 2
23433: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23434: LD_INT 0
23436: PPUSH
23437: PPUSH
23438: PPUSH
23439: PPUSH
// tmp := [ ] ;
23440: LD_ADDR_VAR 0 3
23444: PUSH
23445: EMPTY
23446: ST_TO_ADDR
// list := [ ] ;
23447: LD_ADDR_VAR 0 5
23451: PUSH
23452: EMPTY
23453: ST_TO_ADDR
// for i = 16 to 25 do
23454: LD_ADDR_VAR 0 4
23458: PUSH
23459: DOUBLE
23460: LD_INT 16
23462: DEC
23463: ST_TO_ADDR
23464: LD_INT 25
23466: PUSH
23467: FOR_TO
23468: IFFALSE 23541
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23470: LD_ADDR_VAR 0 3
23474: PUSH
23475: LD_VAR 0 3
23479: PUSH
23480: LD_INT 22
23482: PUSH
23483: LD_VAR 0 1
23487: PPUSH
23488: CALL_OW 255
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 91
23499: PUSH
23500: LD_VAR 0 1
23504: PUSH
23505: LD_INT 6
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 30
23515: PUSH
23516: LD_VAR 0 4
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: PUSH
23530: EMPTY
23531: LIST
23532: PPUSH
23533: CALL_OW 69
23537: ADD
23538: ST_TO_ADDR
23539: GO 23467
23541: POP
23542: POP
// for i = 1 to tmp do
23543: LD_ADDR_VAR 0 4
23547: PUSH
23548: DOUBLE
23549: LD_INT 1
23551: DEC
23552: ST_TO_ADDR
23553: LD_VAR 0 3
23557: PUSH
23558: FOR_TO
23559: IFFALSE 23647
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23561: LD_ADDR_VAR 0 5
23565: PUSH
23566: LD_VAR 0 5
23570: PUSH
23571: LD_VAR 0 3
23575: PUSH
23576: LD_VAR 0 4
23580: ARRAY
23581: PPUSH
23582: CALL_OW 266
23586: PUSH
23587: LD_VAR 0 3
23591: PUSH
23592: LD_VAR 0 4
23596: ARRAY
23597: PPUSH
23598: CALL_OW 250
23602: PUSH
23603: LD_VAR 0 3
23607: PUSH
23608: LD_VAR 0 4
23612: ARRAY
23613: PPUSH
23614: CALL_OW 251
23618: PUSH
23619: LD_VAR 0 3
23623: PUSH
23624: LD_VAR 0 4
23628: ARRAY
23629: PPUSH
23630: CALL_OW 254
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: PUSH
23641: EMPTY
23642: LIST
23643: ADD
23644: ST_TO_ADDR
23645: GO 23558
23647: POP
23648: POP
// result := list ;
23649: LD_ADDR_VAR 0 2
23653: PUSH
23654: LD_VAR 0 5
23658: ST_TO_ADDR
// end ;
23659: LD_VAR 0 2
23663: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23664: LD_INT 0
23666: PPUSH
23667: PPUSH
23668: PPUSH
23669: PPUSH
23670: PPUSH
23671: PPUSH
23672: PPUSH
// if not factory then
23673: LD_VAR 0 1
23677: NOT
23678: IFFALSE 23682
// exit ;
23680: GO 24214
// if control = control_apeman then
23682: LD_VAR 0 4
23686: PUSH
23687: LD_INT 5
23689: EQUAL
23690: IFFALSE 23799
// begin tmp := UnitsInside ( factory ) ;
23692: LD_ADDR_VAR 0 8
23696: PUSH
23697: LD_VAR 0 1
23701: PPUSH
23702: CALL_OW 313
23706: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23707: LD_VAR 0 8
23711: PPUSH
23712: LD_INT 25
23714: PUSH
23715: LD_INT 12
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PPUSH
23722: CALL_OW 72
23726: NOT
23727: IFFALSE 23737
// control := control_manual ;
23729: LD_ADDR_VAR 0 4
23733: PUSH
23734: LD_INT 1
23736: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23737: LD_ADDR_VAR 0 8
23741: PUSH
23742: LD_VAR 0 1
23746: PPUSH
23747: CALL 23434 0 1
23751: ST_TO_ADDR
// if tmp then
23752: LD_VAR 0 8
23756: IFFALSE 23799
// begin for i in tmp do
23758: LD_ADDR_VAR 0 7
23762: PUSH
23763: LD_VAR 0 8
23767: PUSH
23768: FOR_IN
23769: IFFALSE 23797
// if i [ 1 ] = b_ext_radio then
23771: LD_VAR 0 7
23775: PUSH
23776: LD_INT 1
23778: ARRAY
23779: PUSH
23780: LD_INT 22
23782: EQUAL
23783: IFFALSE 23795
// begin control := control_remote ;
23785: LD_ADDR_VAR 0 4
23789: PUSH
23790: LD_INT 2
23792: ST_TO_ADDR
// break ;
23793: GO 23797
// end ;
23795: GO 23768
23797: POP
23798: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23799: LD_VAR 0 1
23803: PPUSH
23804: LD_VAR 0 2
23808: PPUSH
23809: LD_VAR 0 3
23813: PPUSH
23814: LD_VAR 0 4
23818: PPUSH
23819: LD_VAR 0 5
23823: PPUSH
23824: CALL_OW 448
23828: IFFALSE 23863
// begin result := [ chassis , engine , control , weapon ] ;
23830: LD_ADDR_VAR 0 6
23834: PUSH
23835: LD_VAR 0 2
23839: PUSH
23840: LD_VAR 0 3
23844: PUSH
23845: LD_VAR 0 4
23849: PUSH
23850: LD_VAR 0 5
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: ST_TO_ADDR
// exit ;
23861: GO 24214
// end ; _chassis := AvailableChassisList ( factory ) ;
23863: LD_ADDR_VAR 0 9
23867: PUSH
23868: LD_VAR 0 1
23872: PPUSH
23873: CALL_OW 475
23877: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23878: LD_ADDR_VAR 0 11
23882: PUSH
23883: LD_VAR 0 1
23887: PPUSH
23888: CALL_OW 476
23892: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23893: LD_ADDR_VAR 0 12
23897: PUSH
23898: LD_VAR 0 1
23902: PPUSH
23903: CALL_OW 477
23907: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23908: LD_ADDR_VAR 0 10
23912: PUSH
23913: LD_VAR 0 1
23917: PPUSH
23918: CALL_OW 478
23922: ST_TO_ADDR
// if not chassis in _chassis then
23923: LD_VAR 0 2
23927: PUSH
23928: LD_VAR 0 9
23932: IN
23933: NOT
23934: IFFALSE 23960
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23936: LD_ADDR_VAR 0 2
23940: PUSH
23941: LD_VAR 0 9
23945: PUSH
23946: LD_INT 1
23948: PPUSH
23949: LD_VAR 0 9
23953: PPUSH
23954: CALL_OW 12
23958: ARRAY
23959: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23960: LD_VAR 0 2
23964: PPUSH
23965: LD_VAR 0 3
23969: PPUSH
23970: CALL 24219 0 2
23974: NOT
23975: IFFALSE 24034
// repeat engine := _engine [ 1 ] ;
23977: LD_ADDR_VAR 0 3
23981: PUSH
23982: LD_VAR 0 11
23986: PUSH
23987: LD_INT 1
23989: ARRAY
23990: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23991: LD_ADDR_VAR 0 11
23995: PUSH
23996: LD_VAR 0 11
24000: PPUSH
24001: LD_INT 1
24003: PPUSH
24004: CALL_OW 3
24008: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24009: LD_VAR 0 2
24013: PPUSH
24014: LD_VAR 0 3
24018: PPUSH
24019: CALL 24219 0 2
24023: PUSH
24024: LD_VAR 0 11
24028: PUSH
24029: EMPTY
24030: EQUAL
24031: OR
24032: IFFALSE 23977
// if not control in _control then
24034: LD_VAR 0 4
24038: PUSH
24039: LD_VAR 0 12
24043: IN
24044: NOT
24045: IFFALSE 24071
// control := _control [ rand ( 1 , _control ) ] ;
24047: LD_ADDR_VAR 0 4
24051: PUSH
24052: LD_VAR 0 12
24056: PUSH
24057: LD_INT 1
24059: PPUSH
24060: LD_VAR 0 12
24064: PPUSH
24065: CALL_OW 12
24069: ARRAY
24070: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24071: LD_VAR 0 2
24075: PPUSH
24076: LD_VAR 0 5
24080: PPUSH
24081: CALL 24439 0 2
24085: NOT
24086: IFFALSE 24145
// repeat weapon := _weapon [ 1 ] ;
24088: LD_ADDR_VAR 0 5
24092: PUSH
24093: LD_VAR 0 10
24097: PUSH
24098: LD_INT 1
24100: ARRAY
24101: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24102: LD_ADDR_VAR 0 10
24106: PUSH
24107: LD_VAR 0 10
24111: PPUSH
24112: LD_INT 1
24114: PPUSH
24115: CALL_OW 3
24119: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24120: LD_VAR 0 2
24124: PPUSH
24125: LD_VAR 0 5
24129: PPUSH
24130: CALL 24439 0 2
24134: PUSH
24135: LD_VAR 0 10
24139: PUSH
24140: EMPTY
24141: EQUAL
24142: OR
24143: IFFALSE 24088
// result := [ ] ;
24145: LD_ADDR_VAR 0 6
24149: PUSH
24150: EMPTY
24151: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24152: LD_VAR 0 1
24156: PPUSH
24157: LD_VAR 0 2
24161: PPUSH
24162: LD_VAR 0 3
24166: PPUSH
24167: LD_VAR 0 4
24171: PPUSH
24172: LD_VAR 0 5
24176: PPUSH
24177: CALL_OW 448
24181: IFFALSE 24214
// result := [ chassis , engine , control , weapon ] ;
24183: LD_ADDR_VAR 0 6
24187: PUSH
24188: LD_VAR 0 2
24192: PUSH
24193: LD_VAR 0 3
24197: PUSH
24198: LD_VAR 0 4
24202: PUSH
24203: LD_VAR 0 5
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: ST_TO_ADDR
// end ;
24214: LD_VAR 0 6
24218: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24219: LD_INT 0
24221: PPUSH
// if not chassis or not engine then
24222: LD_VAR 0 1
24226: NOT
24227: PUSH
24228: LD_VAR 0 2
24232: NOT
24233: OR
24234: IFFALSE 24238
// exit ;
24236: GO 24434
// case engine of engine_solar :
24238: LD_VAR 0 2
24242: PUSH
24243: LD_INT 2
24245: DOUBLE
24246: EQUAL
24247: IFTRUE 24251
24249: GO 24289
24251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24252: LD_ADDR_VAR 0 3
24256: PUSH
24257: LD_INT 11
24259: PUSH
24260: LD_INT 12
24262: PUSH
24263: LD_INT 13
24265: PUSH
24266: LD_INT 14
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: LD_INT 3
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: ST_TO_ADDR
24287: GO 24418
24289: LD_INT 1
24291: DOUBLE
24292: EQUAL
24293: IFTRUE 24297
24295: GO 24359
24297: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24298: LD_ADDR_VAR 0 3
24302: PUSH
24303: LD_INT 11
24305: PUSH
24306: LD_INT 12
24308: PUSH
24309: LD_INT 13
24311: PUSH
24312: LD_INT 14
24314: PUSH
24315: LD_INT 1
24317: PUSH
24318: LD_INT 2
24320: PUSH
24321: LD_INT 3
24323: PUSH
24324: LD_INT 4
24326: PUSH
24327: LD_INT 5
24329: PUSH
24330: LD_INT 21
24332: PUSH
24333: LD_INT 23
24335: PUSH
24336: LD_INT 22
24338: PUSH
24339: LD_INT 24
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: ST_TO_ADDR
24357: GO 24418
24359: LD_INT 3
24361: DOUBLE
24362: EQUAL
24363: IFTRUE 24367
24365: GO 24417
24367: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24368: LD_ADDR_VAR 0 3
24372: PUSH
24373: LD_INT 13
24375: PUSH
24376: LD_INT 14
24378: PUSH
24379: LD_INT 2
24381: PUSH
24382: LD_INT 3
24384: PUSH
24385: LD_INT 4
24387: PUSH
24388: LD_INT 5
24390: PUSH
24391: LD_INT 21
24393: PUSH
24394: LD_INT 22
24396: PUSH
24397: LD_INT 23
24399: PUSH
24400: LD_INT 24
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: ST_TO_ADDR
24415: GO 24418
24417: POP
// result := ( chassis in result ) ;
24418: LD_ADDR_VAR 0 3
24422: PUSH
24423: LD_VAR 0 1
24427: PUSH
24428: LD_VAR 0 3
24432: IN
24433: ST_TO_ADDR
// end ;
24434: LD_VAR 0 3
24438: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24439: LD_INT 0
24441: PPUSH
// if not chassis or not weapon then
24442: LD_VAR 0 1
24446: NOT
24447: PUSH
24448: LD_VAR 0 2
24452: NOT
24453: OR
24454: IFFALSE 24458
// exit ;
24456: GO 25484
// case weapon of us_machine_gun :
24458: LD_VAR 0 2
24462: PUSH
24463: LD_INT 2
24465: DOUBLE
24466: EQUAL
24467: IFTRUE 24471
24469: GO 24501
24471: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24472: LD_ADDR_VAR 0 3
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: LD_INT 2
24482: PUSH
24483: LD_INT 3
24485: PUSH
24486: LD_INT 4
24488: PUSH
24489: LD_INT 5
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: ST_TO_ADDR
24499: GO 25468
24501: LD_INT 3
24503: DOUBLE
24504: EQUAL
24505: IFTRUE 24509
24507: GO 24539
24509: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24510: LD_ADDR_VAR 0 3
24514: PUSH
24515: LD_INT 1
24517: PUSH
24518: LD_INT 2
24520: PUSH
24521: LD_INT 3
24523: PUSH
24524: LD_INT 4
24526: PUSH
24527: LD_INT 5
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: ST_TO_ADDR
24537: GO 25468
24539: LD_INT 11
24541: DOUBLE
24542: EQUAL
24543: IFTRUE 24547
24545: GO 24577
24547: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24548: LD_ADDR_VAR 0 3
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: LD_INT 2
24558: PUSH
24559: LD_INT 3
24561: PUSH
24562: LD_INT 4
24564: PUSH
24565: LD_INT 5
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: ST_TO_ADDR
24575: GO 25468
24577: LD_INT 4
24579: DOUBLE
24580: EQUAL
24581: IFTRUE 24585
24583: GO 24611
24585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24586: LD_ADDR_VAR 0 3
24590: PUSH
24591: LD_INT 2
24593: PUSH
24594: LD_INT 3
24596: PUSH
24597: LD_INT 4
24599: PUSH
24600: LD_INT 5
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: ST_TO_ADDR
24609: GO 25468
24611: LD_INT 5
24613: DOUBLE
24614: EQUAL
24615: IFTRUE 24619
24617: GO 24645
24619: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24620: LD_ADDR_VAR 0 3
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: LD_INT 3
24630: PUSH
24631: LD_INT 4
24633: PUSH
24634: LD_INT 5
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: ST_TO_ADDR
24643: GO 25468
24645: LD_INT 9
24647: DOUBLE
24648: EQUAL
24649: IFTRUE 24653
24651: GO 24679
24653: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24654: LD_ADDR_VAR 0 3
24658: PUSH
24659: LD_INT 2
24661: PUSH
24662: LD_INT 3
24664: PUSH
24665: LD_INT 4
24667: PUSH
24668: LD_INT 5
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: ST_TO_ADDR
24677: GO 25468
24679: LD_INT 7
24681: DOUBLE
24682: EQUAL
24683: IFTRUE 24687
24685: GO 24713
24687: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24688: LD_ADDR_VAR 0 3
24692: PUSH
24693: LD_INT 2
24695: PUSH
24696: LD_INT 3
24698: PUSH
24699: LD_INT 4
24701: PUSH
24702: LD_INT 5
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: ST_TO_ADDR
24711: GO 25468
24713: LD_INT 12
24715: DOUBLE
24716: EQUAL
24717: IFTRUE 24721
24719: GO 24747
24721: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24722: LD_ADDR_VAR 0 3
24726: PUSH
24727: LD_INT 2
24729: PUSH
24730: LD_INT 3
24732: PUSH
24733: LD_INT 4
24735: PUSH
24736: LD_INT 5
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: ST_TO_ADDR
24745: GO 25468
24747: LD_INT 13
24749: DOUBLE
24750: EQUAL
24751: IFTRUE 24755
24753: GO 24781
24755: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24756: LD_ADDR_VAR 0 3
24760: PUSH
24761: LD_INT 2
24763: PUSH
24764: LD_INT 3
24766: PUSH
24767: LD_INT 4
24769: PUSH
24770: LD_INT 5
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: ST_TO_ADDR
24779: GO 25468
24781: LD_INT 14
24783: DOUBLE
24784: EQUAL
24785: IFTRUE 24789
24787: GO 24807
24789: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24790: LD_ADDR_VAR 0 3
24794: PUSH
24795: LD_INT 4
24797: PUSH
24798: LD_INT 5
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: ST_TO_ADDR
24805: GO 25468
24807: LD_INT 6
24809: DOUBLE
24810: EQUAL
24811: IFTRUE 24815
24813: GO 24833
24815: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24816: LD_ADDR_VAR 0 3
24820: PUSH
24821: LD_INT 4
24823: PUSH
24824: LD_INT 5
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: ST_TO_ADDR
24831: GO 25468
24833: LD_INT 10
24835: DOUBLE
24836: EQUAL
24837: IFTRUE 24841
24839: GO 24859
24841: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24842: LD_ADDR_VAR 0 3
24846: PUSH
24847: LD_INT 4
24849: PUSH
24850: LD_INT 5
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: ST_TO_ADDR
24857: GO 25468
24859: LD_INT 22
24861: DOUBLE
24862: EQUAL
24863: IFTRUE 24867
24865: GO 24893
24867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24868: LD_ADDR_VAR 0 3
24872: PUSH
24873: LD_INT 11
24875: PUSH
24876: LD_INT 12
24878: PUSH
24879: LD_INT 13
24881: PUSH
24882: LD_INT 14
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: ST_TO_ADDR
24891: GO 25468
24893: LD_INT 23
24895: DOUBLE
24896: EQUAL
24897: IFTRUE 24901
24899: GO 24927
24901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24902: LD_ADDR_VAR 0 3
24906: PUSH
24907: LD_INT 11
24909: PUSH
24910: LD_INT 12
24912: PUSH
24913: LD_INT 13
24915: PUSH
24916: LD_INT 14
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: ST_TO_ADDR
24925: GO 25468
24927: LD_INT 24
24929: DOUBLE
24930: EQUAL
24931: IFTRUE 24935
24933: GO 24961
24935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24936: LD_ADDR_VAR 0 3
24940: PUSH
24941: LD_INT 11
24943: PUSH
24944: LD_INT 12
24946: PUSH
24947: LD_INT 13
24949: PUSH
24950: LD_INT 14
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: ST_TO_ADDR
24959: GO 25468
24961: LD_INT 30
24963: DOUBLE
24964: EQUAL
24965: IFTRUE 24969
24967: GO 24995
24969: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24970: LD_ADDR_VAR 0 3
24974: PUSH
24975: LD_INT 11
24977: PUSH
24978: LD_INT 12
24980: PUSH
24981: LD_INT 13
24983: PUSH
24984: LD_INT 14
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: ST_TO_ADDR
24993: GO 25468
24995: LD_INT 25
24997: DOUBLE
24998: EQUAL
24999: IFTRUE 25003
25001: GO 25021
25003: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25004: LD_ADDR_VAR 0 3
25008: PUSH
25009: LD_INT 13
25011: PUSH
25012: LD_INT 14
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: ST_TO_ADDR
25019: GO 25468
25021: LD_INT 27
25023: DOUBLE
25024: EQUAL
25025: IFTRUE 25029
25027: GO 25047
25029: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25030: LD_ADDR_VAR 0 3
25034: PUSH
25035: LD_INT 13
25037: PUSH
25038: LD_INT 14
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: ST_TO_ADDR
25045: GO 25468
25047: LD_INT 28
25049: DOUBLE
25050: EQUAL
25051: IFTRUE 25055
25053: GO 25073
25055: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25056: LD_ADDR_VAR 0 3
25060: PUSH
25061: LD_INT 13
25063: PUSH
25064: LD_INT 14
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: ST_TO_ADDR
25071: GO 25468
25073: LD_INT 29
25075: DOUBLE
25076: EQUAL
25077: IFTRUE 25081
25079: GO 25099
25081: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25082: LD_ADDR_VAR 0 3
25086: PUSH
25087: LD_INT 13
25089: PUSH
25090: LD_INT 14
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: ST_TO_ADDR
25097: GO 25468
25099: LD_INT 31
25101: DOUBLE
25102: EQUAL
25103: IFTRUE 25107
25105: GO 25125
25107: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25108: LD_ADDR_VAR 0 3
25112: PUSH
25113: LD_INT 13
25115: PUSH
25116: LD_INT 14
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: ST_TO_ADDR
25123: GO 25468
25125: LD_INT 26
25127: DOUBLE
25128: EQUAL
25129: IFTRUE 25133
25131: GO 25151
25133: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25134: LD_ADDR_VAR 0 3
25138: PUSH
25139: LD_INT 13
25141: PUSH
25142: LD_INT 14
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: ST_TO_ADDR
25149: GO 25468
25151: LD_INT 42
25153: DOUBLE
25154: EQUAL
25155: IFTRUE 25159
25157: GO 25185
25159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25160: LD_ADDR_VAR 0 3
25164: PUSH
25165: LD_INT 21
25167: PUSH
25168: LD_INT 22
25170: PUSH
25171: LD_INT 23
25173: PUSH
25174: LD_INT 24
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: ST_TO_ADDR
25183: GO 25468
25185: LD_INT 43
25187: DOUBLE
25188: EQUAL
25189: IFTRUE 25193
25191: GO 25219
25193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25194: LD_ADDR_VAR 0 3
25198: PUSH
25199: LD_INT 21
25201: PUSH
25202: LD_INT 22
25204: PUSH
25205: LD_INT 23
25207: PUSH
25208: LD_INT 24
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: ST_TO_ADDR
25217: GO 25468
25219: LD_INT 44
25221: DOUBLE
25222: EQUAL
25223: IFTRUE 25227
25225: GO 25253
25227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25228: LD_ADDR_VAR 0 3
25232: PUSH
25233: LD_INT 21
25235: PUSH
25236: LD_INT 22
25238: PUSH
25239: LD_INT 23
25241: PUSH
25242: LD_INT 24
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: ST_TO_ADDR
25251: GO 25468
25253: LD_INT 45
25255: DOUBLE
25256: EQUAL
25257: IFTRUE 25261
25259: GO 25287
25261: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25262: LD_ADDR_VAR 0 3
25266: PUSH
25267: LD_INT 21
25269: PUSH
25270: LD_INT 22
25272: PUSH
25273: LD_INT 23
25275: PUSH
25276: LD_INT 24
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: ST_TO_ADDR
25285: GO 25468
25287: LD_INT 49
25289: DOUBLE
25290: EQUAL
25291: IFTRUE 25295
25293: GO 25321
25295: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25296: LD_ADDR_VAR 0 3
25300: PUSH
25301: LD_INT 21
25303: PUSH
25304: LD_INT 22
25306: PUSH
25307: LD_INT 23
25309: PUSH
25310: LD_INT 24
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: ST_TO_ADDR
25319: GO 25468
25321: LD_INT 51
25323: DOUBLE
25324: EQUAL
25325: IFTRUE 25329
25327: GO 25355
25329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25330: LD_ADDR_VAR 0 3
25334: PUSH
25335: LD_INT 21
25337: PUSH
25338: LD_INT 22
25340: PUSH
25341: LD_INT 23
25343: PUSH
25344: LD_INT 24
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: ST_TO_ADDR
25353: GO 25468
25355: LD_INT 52
25357: DOUBLE
25358: EQUAL
25359: IFTRUE 25363
25361: GO 25389
25363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25364: LD_ADDR_VAR 0 3
25368: PUSH
25369: LD_INT 21
25371: PUSH
25372: LD_INT 22
25374: PUSH
25375: LD_INT 23
25377: PUSH
25378: LD_INT 24
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: ST_TO_ADDR
25387: GO 25468
25389: LD_INT 53
25391: DOUBLE
25392: EQUAL
25393: IFTRUE 25397
25395: GO 25415
25397: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25398: LD_ADDR_VAR 0 3
25402: PUSH
25403: LD_INT 23
25405: PUSH
25406: LD_INT 24
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: ST_TO_ADDR
25413: GO 25468
25415: LD_INT 46
25417: DOUBLE
25418: EQUAL
25419: IFTRUE 25423
25421: GO 25441
25423: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25424: LD_ADDR_VAR 0 3
25428: PUSH
25429: LD_INT 23
25431: PUSH
25432: LD_INT 24
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: ST_TO_ADDR
25439: GO 25468
25441: LD_INT 47
25443: DOUBLE
25444: EQUAL
25445: IFTRUE 25449
25447: GO 25467
25449: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25450: LD_ADDR_VAR 0 3
25454: PUSH
25455: LD_INT 23
25457: PUSH
25458: LD_INT 24
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: ST_TO_ADDR
25465: GO 25468
25467: POP
// result := ( chassis in result ) ;
25468: LD_ADDR_VAR 0 3
25472: PUSH
25473: LD_VAR 0 1
25477: PUSH
25478: LD_VAR 0 3
25482: IN
25483: ST_TO_ADDR
// end ;
25484: LD_VAR 0 3
25488: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25489: LD_INT 0
25491: PPUSH
25492: PPUSH
25493: PPUSH
25494: PPUSH
25495: PPUSH
25496: PPUSH
25497: PPUSH
// result := array ;
25498: LD_ADDR_VAR 0 5
25502: PUSH
25503: LD_VAR 0 1
25507: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25508: LD_VAR 0 1
25512: NOT
25513: PUSH
25514: LD_VAR 0 2
25518: NOT
25519: OR
25520: PUSH
25521: LD_VAR 0 3
25525: NOT
25526: OR
25527: PUSH
25528: LD_VAR 0 2
25532: PUSH
25533: LD_VAR 0 1
25537: GREATER
25538: OR
25539: PUSH
25540: LD_VAR 0 3
25544: PUSH
25545: LD_VAR 0 1
25549: GREATER
25550: OR
25551: IFFALSE 25555
// exit ;
25553: GO 25851
// if direction then
25555: LD_VAR 0 4
25559: IFFALSE 25623
// begin d := 1 ;
25561: LD_ADDR_VAR 0 9
25565: PUSH
25566: LD_INT 1
25568: ST_TO_ADDR
// if i_from > i_to then
25569: LD_VAR 0 2
25573: PUSH
25574: LD_VAR 0 3
25578: GREATER
25579: IFFALSE 25605
// length := ( array - i_from ) + i_to else
25581: LD_ADDR_VAR 0 11
25585: PUSH
25586: LD_VAR 0 1
25590: PUSH
25591: LD_VAR 0 2
25595: MINUS
25596: PUSH
25597: LD_VAR 0 3
25601: PLUS
25602: ST_TO_ADDR
25603: GO 25621
// length := i_to - i_from ;
25605: LD_ADDR_VAR 0 11
25609: PUSH
25610: LD_VAR 0 3
25614: PUSH
25615: LD_VAR 0 2
25619: MINUS
25620: ST_TO_ADDR
// end else
25621: GO 25684
// begin d := - 1 ;
25623: LD_ADDR_VAR 0 9
25627: PUSH
25628: LD_INT 1
25630: NEG
25631: ST_TO_ADDR
// if i_from > i_to then
25632: LD_VAR 0 2
25636: PUSH
25637: LD_VAR 0 3
25641: GREATER
25642: IFFALSE 25662
// length := i_from - i_to else
25644: LD_ADDR_VAR 0 11
25648: PUSH
25649: LD_VAR 0 2
25653: PUSH
25654: LD_VAR 0 3
25658: MINUS
25659: ST_TO_ADDR
25660: GO 25684
// length := ( array - i_to ) + i_from ;
25662: LD_ADDR_VAR 0 11
25666: PUSH
25667: LD_VAR 0 1
25671: PUSH
25672: LD_VAR 0 3
25676: MINUS
25677: PUSH
25678: LD_VAR 0 2
25682: PLUS
25683: ST_TO_ADDR
// end ; if not length then
25684: LD_VAR 0 11
25688: NOT
25689: IFFALSE 25693
// exit ;
25691: GO 25851
// tmp := array ;
25693: LD_ADDR_VAR 0 10
25697: PUSH
25698: LD_VAR 0 1
25702: ST_TO_ADDR
// for i = 1 to length do
25703: LD_ADDR_VAR 0 6
25707: PUSH
25708: DOUBLE
25709: LD_INT 1
25711: DEC
25712: ST_TO_ADDR
25713: LD_VAR 0 11
25717: PUSH
25718: FOR_TO
25719: IFFALSE 25839
// begin for j = 1 to array do
25721: LD_ADDR_VAR 0 7
25725: PUSH
25726: DOUBLE
25727: LD_INT 1
25729: DEC
25730: ST_TO_ADDR
25731: LD_VAR 0 1
25735: PUSH
25736: FOR_TO
25737: IFFALSE 25825
// begin k := j + d ;
25739: LD_ADDR_VAR 0 8
25743: PUSH
25744: LD_VAR 0 7
25748: PUSH
25749: LD_VAR 0 9
25753: PLUS
25754: ST_TO_ADDR
// if k > array then
25755: LD_VAR 0 8
25759: PUSH
25760: LD_VAR 0 1
25764: GREATER
25765: IFFALSE 25775
// k := 1 ;
25767: LD_ADDR_VAR 0 8
25771: PUSH
25772: LD_INT 1
25774: ST_TO_ADDR
// if not k then
25775: LD_VAR 0 8
25779: NOT
25780: IFFALSE 25792
// k := array ;
25782: LD_ADDR_VAR 0 8
25786: PUSH
25787: LD_VAR 0 1
25791: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25792: LD_ADDR_VAR 0 10
25796: PUSH
25797: LD_VAR 0 10
25801: PPUSH
25802: LD_VAR 0 8
25806: PPUSH
25807: LD_VAR 0 1
25811: PUSH
25812: LD_VAR 0 7
25816: ARRAY
25817: PPUSH
25818: CALL_OW 1
25822: ST_TO_ADDR
// end ;
25823: GO 25736
25825: POP
25826: POP
// array := tmp ;
25827: LD_ADDR_VAR 0 1
25831: PUSH
25832: LD_VAR 0 10
25836: ST_TO_ADDR
// end ;
25837: GO 25718
25839: POP
25840: POP
// result := array ;
25841: LD_ADDR_VAR 0 5
25845: PUSH
25846: LD_VAR 0 1
25850: ST_TO_ADDR
// end ;
25851: LD_VAR 0 5
25855: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25856: LD_INT 0
25858: PPUSH
25859: PPUSH
// result := 0 ;
25860: LD_ADDR_VAR 0 3
25864: PUSH
25865: LD_INT 0
25867: ST_TO_ADDR
// if not array or not value in array then
25868: LD_VAR 0 1
25872: NOT
25873: PUSH
25874: LD_VAR 0 2
25878: PUSH
25879: LD_VAR 0 1
25883: IN
25884: NOT
25885: OR
25886: IFFALSE 25890
// exit ;
25888: GO 25944
// for i = 1 to array do
25890: LD_ADDR_VAR 0 4
25894: PUSH
25895: DOUBLE
25896: LD_INT 1
25898: DEC
25899: ST_TO_ADDR
25900: LD_VAR 0 1
25904: PUSH
25905: FOR_TO
25906: IFFALSE 25942
// if value = array [ i ] then
25908: LD_VAR 0 2
25912: PUSH
25913: LD_VAR 0 1
25917: PUSH
25918: LD_VAR 0 4
25922: ARRAY
25923: EQUAL
25924: IFFALSE 25940
// begin result := i ;
25926: LD_ADDR_VAR 0 3
25930: PUSH
25931: LD_VAR 0 4
25935: ST_TO_ADDR
// exit ;
25936: POP
25937: POP
25938: GO 25944
// end ;
25940: GO 25905
25942: POP
25943: POP
// end ;
25944: LD_VAR 0 3
25948: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25949: LD_INT 0
25951: PPUSH
// vc_chassis := chassis ;
25952: LD_ADDR_OWVAR 37
25956: PUSH
25957: LD_VAR 0 1
25961: ST_TO_ADDR
// vc_engine := engine ;
25962: LD_ADDR_OWVAR 39
25966: PUSH
25967: LD_VAR 0 2
25971: ST_TO_ADDR
// vc_control := control ;
25972: LD_ADDR_OWVAR 38
25976: PUSH
25977: LD_VAR 0 3
25981: ST_TO_ADDR
// vc_weapon := weapon ;
25982: LD_ADDR_OWVAR 40
25986: PUSH
25987: LD_VAR 0 4
25991: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25992: LD_ADDR_OWVAR 41
25996: PUSH
25997: LD_VAR 0 5
26001: ST_TO_ADDR
// end ;
26002: LD_VAR 0 6
26006: RET
// export function WantPlant ( unit ) ; var task ; begin
26007: LD_INT 0
26009: PPUSH
26010: PPUSH
// result := false ;
26011: LD_ADDR_VAR 0 2
26015: PUSH
26016: LD_INT 0
26018: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26019: LD_ADDR_VAR 0 3
26023: PUSH
26024: LD_VAR 0 1
26028: PPUSH
26029: CALL_OW 437
26033: ST_TO_ADDR
// if task then
26034: LD_VAR 0 3
26038: IFFALSE 26066
// if task [ 1 ] [ 1 ] = p then
26040: LD_VAR 0 3
26044: PUSH
26045: LD_INT 1
26047: ARRAY
26048: PUSH
26049: LD_INT 1
26051: ARRAY
26052: PUSH
26053: LD_STRING p
26055: EQUAL
26056: IFFALSE 26066
// result := true ;
26058: LD_ADDR_VAR 0 2
26062: PUSH
26063: LD_INT 1
26065: ST_TO_ADDR
// end ;
26066: LD_VAR 0 2
26070: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26071: LD_INT 0
26073: PPUSH
26074: PPUSH
26075: PPUSH
26076: PPUSH
// if pos < 1 then
26077: LD_VAR 0 2
26081: PUSH
26082: LD_INT 1
26084: LESS
26085: IFFALSE 26089
// exit ;
26087: GO 26392
// if pos = 1 then
26089: LD_VAR 0 2
26093: PUSH
26094: LD_INT 1
26096: EQUAL
26097: IFFALSE 26130
// result := Replace ( arr , pos [ 1 ] , value ) else
26099: LD_ADDR_VAR 0 4
26103: PUSH
26104: LD_VAR 0 1
26108: PPUSH
26109: LD_VAR 0 2
26113: PUSH
26114: LD_INT 1
26116: ARRAY
26117: PPUSH
26118: LD_VAR 0 3
26122: PPUSH
26123: CALL_OW 1
26127: ST_TO_ADDR
26128: GO 26392
// begin tmp := arr ;
26130: LD_ADDR_VAR 0 6
26134: PUSH
26135: LD_VAR 0 1
26139: ST_TO_ADDR
// s_arr := [ tmp ] ;
26140: LD_ADDR_VAR 0 7
26144: PUSH
26145: LD_VAR 0 6
26149: PUSH
26150: EMPTY
26151: LIST
26152: ST_TO_ADDR
// for i = 1 to pos - 1 do
26153: LD_ADDR_VAR 0 5
26157: PUSH
26158: DOUBLE
26159: LD_INT 1
26161: DEC
26162: ST_TO_ADDR
26163: LD_VAR 0 2
26167: PUSH
26168: LD_INT 1
26170: MINUS
26171: PUSH
26172: FOR_TO
26173: IFFALSE 26218
// begin tmp := tmp [ pos [ i ] ] ;
26175: LD_ADDR_VAR 0 6
26179: PUSH
26180: LD_VAR 0 6
26184: PUSH
26185: LD_VAR 0 2
26189: PUSH
26190: LD_VAR 0 5
26194: ARRAY
26195: ARRAY
26196: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26197: LD_ADDR_VAR 0 7
26201: PUSH
26202: LD_VAR 0 7
26206: PUSH
26207: LD_VAR 0 6
26211: PUSH
26212: EMPTY
26213: LIST
26214: ADD
26215: ST_TO_ADDR
// end ;
26216: GO 26172
26218: POP
26219: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26220: LD_ADDR_VAR 0 6
26224: PUSH
26225: LD_VAR 0 6
26229: PPUSH
26230: LD_VAR 0 2
26234: PUSH
26235: LD_VAR 0 2
26239: ARRAY
26240: PPUSH
26241: LD_VAR 0 3
26245: PPUSH
26246: CALL_OW 1
26250: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26251: LD_ADDR_VAR 0 7
26255: PUSH
26256: LD_VAR 0 7
26260: PPUSH
26261: LD_VAR 0 7
26265: PPUSH
26266: LD_VAR 0 6
26270: PPUSH
26271: CALL_OW 1
26275: ST_TO_ADDR
// for i = s_arr downto 2 do
26276: LD_ADDR_VAR 0 5
26280: PUSH
26281: DOUBLE
26282: LD_VAR 0 7
26286: INC
26287: ST_TO_ADDR
26288: LD_INT 2
26290: PUSH
26291: FOR_DOWNTO
26292: IFFALSE 26376
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26294: LD_ADDR_VAR 0 6
26298: PUSH
26299: LD_VAR 0 7
26303: PUSH
26304: LD_VAR 0 5
26308: PUSH
26309: LD_INT 1
26311: MINUS
26312: ARRAY
26313: PPUSH
26314: LD_VAR 0 2
26318: PUSH
26319: LD_VAR 0 5
26323: PUSH
26324: LD_INT 1
26326: MINUS
26327: ARRAY
26328: PPUSH
26329: LD_VAR 0 7
26333: PUSH
26334: LD_VAR 0 5
26338: ARRAY
26339: PPUSH
26340: CALL_OW 1
26344: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26345: LD_ADDR_VAR 0 7
26349: PUSH
26350: LD_VAR 0 7
26354: PPUSH
26355: LD_VAR 0 5
26359: PUSH
26360: LD_INT 1
26362: MINUS
26363: PPUSH
26364: LD_VAR 0 6
26368: PPUSH
26369: CALL_OW 1
26373: ST_TO_ADDR
// end ;
26374: GO 26291
26376: POP
26377: POP
// result := s_arr [ 1 ] ;
26378: LD_ADDR_VAR 0 4
26382: PUSH
26383: LD_VAR 0 7
26387: PUSH
26388: LD_INT 1
26390: ARRAY
26391: ST_TO_ADDR
// end ; end ;
26392: LD_VAR 0 4
26396: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26397: LD_INT 0
26399: PPUSH
26400: PPUSH
// if not list then
26401: LD_VAR 0 1
26405: NOT
26406: IFFALSE 26410
// exit ;
26408: GO 26501
// i := list [ pos1 ] ;
26410: LD_ADDR_VAR 0 5
26414: PUSH
26415: LD_VAR 0 1
26419: PUSH
26420: LD_VAR 0 2
26424: ARRAY
26425: ST_TO_ADDR
// if not i then
26426: LD_VAR 0 5
26430: NOT
26431: IFFALSE 26435
// exit ;
26433: GO 26501
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26435: LD_ADDR_VAR 0 1
26439: PUSH
26440: LD_VAR 0 1
26444: PPUSH
26445: LD_VAR 0 2
26449: PPUSH
26450: LD_VAR 0 1
26454: PUSH
26455: LD_VAR 0 3
26459: ARRAY
26460: PPUSH
26461: CALL_OW 1
26465: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26466: LD_ADDR_VAR 0 1
26470: PUSH
26471: LD_VAR 0 1
26475: PPUSH
26476: LD_VAR 0 3
26480: PPUSH
26481: LD_VAR 0 5
26485: PPUSH
26486: CALL_OW 1
26490: ST_TO_ADDR
// result := list ;
26491: LD_ADDR_VAR 0 4
26495: PUSH
26496: LD_VAR 0 1
26500: ST_TO_ADDR
// end ;
26501: LD_VAR 0 4
26505: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26506: LD_INT 0
26508: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26509: LD_ADDR_VAR 0 5
26513: PUSH
26514: LD_VAR 0 1
26518: PPUSH
26519: CALL_OW 250
26523: PPUSH
26524: LD_VAR 0 1
26528: PPUSH
26529: CALL_OW 251
26533: PPUSH
26534: LD_VAR 0 2
26538: PPUSH
26539: LD_VAR 0 3
26543: PPUSH
26544: LD_VAR 0 4
26548: PPUSH
26549: CALL 26559 0 5
26553: ST_TO_ADDR
// end ;
26554: LD_VAR 0 5
26558: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26559: LD_INT 0
26561: PPUSH
26562: PPUSH
26563: PPUSH
26564: PPUSH
// if not list then
26565: LD_VAR 0 3
26569: NOT
26570: IFFALSE 26574
// exit ;
26572: GO 26962
// result := [ ] ;
26574: LD_ADDR_VAR 0 6
26578: PUSH
26579: EMPTY
26580: ST_TO_ADDR
// for i in list do
26581: LD_ADDR_VAR 0 7
26585: PUSH
26586: LD_VAR 0 3
26590: PUSH
26591: FOR_IN
26592: IFFALSE 26794
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26594: LD_ADDR_VAR 0 9
26598: PUSH
26599: LD_VAR 0 7
26603: PPUSH
26604: LD_VAR 0 1
26608: PPUSH
26609: LD_VAR 0 2
26613: PPUSH
26614: CALL_OW 297
26618: ST_TO_ADDR
// if not result then
26619: LD_VAR 0 6
26623: NOT
26624: IFFALSE 26650
// result := [ [ i , tmp ] ] else
26626: LD_ADDR_VAR 0 6
26630: PUSH
26631: LD_VAR 0 7
26635: PUSH
26636: LD_VAR 0 9
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: EMPTY
26646: LIST
26647: ST_TO_ADDR
26648: GO 26792
// begin if result [ result ] [ 2 ] < tmp then
26650: LD_VAR 0 6
26654: PUSH
26655: LD_VAR 0 6
26659: ARRAY
26660: PUSH
26661: LD_INT 2
26663: ARRAY
26664: PUSH
26665: LD_VAR 0 9
26669: LESS
26670: IFFALSE 26712
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26672: LD_ADDR_VAR 0 6
26676: PUSH
26677: LD_VAR 0 6
26681: PPUSH
26682: LD_VAR 0 6
26686: PUSH
26687: LD_INT 1
26689: PLUS
26690: PPUSH
26691: LD_VAR 0 7
26695: PUSH
26696: LD_VAR 0 9
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PPUSH
26705: CALL_OW 2
26709: ST_TO_ADDR
26710: GO 26792
// for j = 1 to result do
26712: LD_ADDR_VAR 0 8
26716: PUSH
26717: DOUBLE
26718: LD_INT 1
26720: DEC
26721: ST_TO_ADDR
26722: LD_VAR 0 6
26726: PUSH
26727: FOR_TO
26728: IFFALSE 26790
// begin if tmp < result [ j ] [ 2 ] then
26730: LD_VAR 0 9
26734: PUSH
26735: LD_VAR 0 6
26739: PUSH
26740: LD_VAR 0 8
26744: ARRAY
26745: PUSH
26746: LD_INT 2
26748: ARRAY
26749: LESS
26750: IFFALSE 26788
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26752: LD_ADDR_VAR 0 6
26756: PUSH
26757: LD_VAR 0 6
26761: PPUSH
26762: LD_VAR 0 8
26766: PPUSH
26767: LD_VAR 0 7
26771: PUSH
26772: LD_VAR 0 9
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PPUSH
26781: CALL_OW 2
26785: ST_TO_ADDR
// break ;
26786: GO 26790
// end ; end ;
26788: GO 26727
26790: POP
26791: POP
// end ; end ;
26792: GO 26591
26794: POP
26795: POP
// if result and not asc then
26796: LD_VAR 0 6
26800: PUSH
26801: LD_VAR 0 4
26805: NOT
26806: AND
26807: IFFALSE 26882
// begin tmp := result ;
26809: LD_ADDR_VAR 0 9
26813: PUSH
26814: LD_VAR 0 6
26818: ST_TO_ADDR
// for i = tmp downto 1 do
26819: LD_ADDR_VAR 0 7
26823: PUSH
26824: DOUBLE
26825: LD_VAR 0 9
26829: INC
26830: ST_TO_ADDR
26831: LD_INT 1
26833: PUSH
26834: FOR_DOWNTO
26835: IFFALSE 26880
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26837: LD_ADDR_VAR 0 6
26841: PUSH
26842: LD_VAR 0 6
26846: PPUSH
26847: LD_VAR 0 9
26851: PUSH
26852: LD_VAR 0 7
26856: MINUS
26857: PUSH
26858: LD_INT 1
26860: PLUS
26861: PPUSH
26862: LD_VAR 0 9
26866: PUSH
26867: LD_VAR 0 7
26871: ARRAY
26872: PPUSH
26873: CALL_OW 1
26877: ST_TO_ADDR
26878: GO 26834
26880: POP
26881: POP
// end ; tmp := [ ] ;
26882: LD_ADDR_VAR 0 9
26886: PUSH
26887: EMPTY
26888: ST_TO_ADDR
// if mode then
26889: LD_VAR 0 5
26893: IFFALSE 26962
// begin for i = 1 to result do
26895: LD_ADDR_VAR 0 7
26899: PUSH
26900: DOUBLE
26901: LD_INT 1
26903: DEC
26904: ST_TO_ADDR
26905: LD_VAR 0 6
26909: PUSH
26910: FOR_TO
26911: IFFALSE 26950
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26913: LD_ADDR_VAR 0 9
26917: PUSH
26918: LD_VAR 0 9
26922: PPUSH
26923: LD_VAR 0 7
26927: PPUSH
26928: LD_VAR 0 6
26932: PUSH
26933: LD_VAR 0 7
26937: ARRAY
26938: PUSH
26939: LD_INT 1
26941: ARRAY
26942: PPUSH
26943: CALL_OW 1
26947: ST_TO_ADDR
26948: GO 26910
26950: POP
26951: POP
// result := tmp ;
26952: LD_ADDR_VAR 0 6
26956: PUSH
26957: LD_VAR 0 9
26961: ST_TO_ADDR
// end ; end ;
26962: LD_VAR 0 6
26966: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26967: LD_INT 0
26969: PPUSH
26970: PPUSH
26971: PPUSH
26972: PPUSH
26973: PPUSH
26974: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26975: LD_ADDR_VAR 0 5
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: EMPTY
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: ST_TO_ADDR
// if not x or not y then
26997: LD_VAR 0 2
27001: NOT
27002: PUSH
27003: LD_VAR 0 3
27007: NOT
27008: OR
27009: IFFALSE 27013
// exit ;
27011: GO 28659
// if not range then
27013: LD_VAR 0 4
27017: NOT
27018: IFFALSE 27028
// range := 10 ;
27020: LD_ADDR_VAR 0 4
27024: PUSH
27025: LD_INT 10
27027: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27028: LD_ADDR_VAR 0 8
27032: PUSH
27033: LD_INT 81
27035: PUSH
27036: LD_VAR 0 1
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 92
27047: PUSH
27048: LD_VAR 0 2
27052: PUSH
27053: LD_VAR 0 3
27057: PUSH
27058: LD_VAR 0 4
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 3
27071: PUSH
27072: LD_INT 21
27074: PUSH
27075: LD_INT 3
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: LIST
27090: PPUSH
27091: CALL_OW 69
27095: ST_TO_ADDR
// if not tmp then
27096: LD_VAR 0 8
27100: NOT
27101: IFFALSE 27105
// exit ;
27103: GO 28659
// for i in tmp do
27105: LD_ADDR_VAR 0 6
27109: PUSH
27110: LD_VAR 0 8
27114: PUSH
27115: FOR_IN
27116: IFFALSE 28634
// begin points := [ 0 , 0 , 0 ] ;
27118: LD_ADDR_VAR 0 9
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: LD_INT 0
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: LIST
27136: ST_TO_ADDR
// bpoints := 1 ;
27137: LD_ADDR_VAR 0 10
27141: PUSH
27142: LD_INT 1
27144: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27145: LD_VAR 0 6
27149: PPUSH
27150: CALL_OW 247
27154: PUSH
27155: LD_INT 1
27157: DOUBLE
27158: EQUAL
27159: IFTRUE 27163
27161: GO 27741
27163: POP
// begin if GetClass ( i ) = 1 then
27164: LD_VAR 0 6
27168: PPUSH
27169: CALL_OW 257
27173: PUSH
27174: LD_INT 1
27176: EQUAL
27177: IFFALSE 27198
// points := [ 10 , 5 , 3 ] ;
27179: LD_ADDR_VAR 0 9
27183: PUSH
27184: LD_INT 10
27186: PUSH
27187: LD_INT 5
27189: PUSH
27190: LD_INT 3
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: LIST
27197: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27198: LD_VAR 0 6
27202: PPUSH
27203: CALL_OW 257
27207: PUSH
27208: LD_INT 2
27210: PUSH
27211: LD_INT 3
27213: PUSH
27214: LD_INT 4
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: LIST
27221: IN
27222: IFFALSE 27243
// points := [ 3 , 2 , 1 ] ;
27224: LD_ADDR_VAR 0 9
27228: PUSH
27229: LD_INT 3
27231: PUSH
27232: LD_INT 2
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: LIST
27242: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27243: LD_VAR 0 6
27247: PPUSH
27248: CALL_OW 257
27252: PUSH
27253: LD_INT 5
27255: EQUAL
27256: IFFALSE 27277
// points := [ 130 , 5 , 2 ] ;
27258: LD_ADDR_VAR 0 9
27262: PUSH
27263: LD_INT 130
27265: PUSH
27266: LD_INT 5
27268: PUSH
27269: LD_INT 2
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: LIST
27276: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27277: LD_VAR 0 6
27281: PPUSH
27282: CALL_OW 257
27286: PUSH
27287: LD_INT 8
27289: EQUAL
27290: IFFALSE 27311
// points := [ 35 , 35 , 30 ] ;
27292: LD_ADDR_VAR 0 9
27296: PUSH
27297: LD_INT 35
27299: PUSH
27300: LD_INT 35
27302: PUSH
27303: LD_INT 30
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: LIST
27310: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27311: LD_VAR 0 6
27315: PPUSH
27316: CALL_OW 257
27320: PUSH
27321: LD_INT 9
27323: EQUAL
27324: IFFALSE 27345
// points := [ 20 , 55 , 40 ] ;
27326: LD_ADDR_VAR 0 9
27330: PUSH
27331: LD_INT 20
27333: PUSH
27334: LD_INT 55
27336: PUSH
27337: LD_INT 40
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27345: LD_VAR 0 6
27349: PPUSH
27350: CALL_OW 257
27354: PUSH
27355: LD_INT 12
27357: PUSH
27358: LD_INT 16
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: IN
27365: IFFALSE 27386
// points := [ 5 , 3 , 2 ] ;
27367: LD_ADDR_VAR 0 9
27371: PUSH
27372: LD_INT 5
27374: PUSH
27375: LD_INT 3
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: LIST
27385: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27386: LD_VAR 0 6
27390: PPUSH
27391: CALL_OW 257
27395: PUSH
27396: LD_INT 17
27398: EQUAL
27399: IFFALSE 27420
// points := [ 100 , 50 , 75 ] ;
27401: LD_ADDR_VAR 0 9
27405: PUSH
27406: LD_INT 100
27408: PUSH
27409: LD_INT 50
27411: PUSH
27412: LD_INT 75
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: LIST
27419: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27420: LD_VAR 0 6
27424: PPUSH
27425: CALL_OW 257
27429: PUSH
27430: LD_INT 15
27432: EQUAL
27433: IFFALSE 27454
// points := [ 10 , 5 , 3 ] ;
27435: LD_ADDR_VAR 0 9
27439: PUSH
27440: LD_INT 10
27442: PUSH
27443: LD_INT 5
27445: PUSH
27446: LD_INT 3
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: LIST
27453: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27454: LD_VAR 0 6
27458: PPUSH
27459: CALL_OW 257
27463: PUSH
27464: LD_INT 14
27466: EQUAL
27467: IFFALSE 27488
// points := [ 10 , 0 , 0 ] ;
27469: LD_ADDR_VAR 0 9
27473: PUSH
27474: LD_INT 10
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: LD_INT 0
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: LIST
27487: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27488: LD_VAR 0 6
27492: PPUSH
27493: CALL_OW 257
27497: PUSH
27498: LD_INT 11
27500: EQUAL
27501: IFFALSE 27522
// points := [ 30 , 10 , 5 ] ;
27503: LD_ADDR_VAR 0 9
27507: PUSH
27508: LD_INT 30
27510: PUSH
27511: LD_INT 10
27513: PUSH
27514: LD_INT 5
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27522: LD_VAR 0 1
27526: PPUSH
27527: LD_INT 5
27529: PPUSH
27530: CALL_OW 321
27534: PUSH
27535: LD_INT 2
27537: EQUAL
27538: IFFALSE 27555
// bpoints := bpoints * 1.8 ;
27540: LD_ADDR_VAR 0 10
27544: PUSH
27545: LD_VAR 0 10
27549: PUSH
27550: LD_REAL  1.80000000000000E+0000
27553: MUL
27554: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27555: LD_VAR 0 6
27559: PPUSH
27560: CALL_OW 257
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: LD_INT 2
27570: PUSH
27571: LD_INT 3
27573: PUSH
27574: LD_INT 4
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: IN
27583: PUSH
27584: LD_VAR 0 1
27588: PPUSH
27589: LD_INT 51
27591: PPUSH
27592: CALL_OW 321
27596: PUSH
27597: LD_INT 2
27599: EQUAL
27600: AND
27601: IFFALSE 27618
// bpoints := bpoints * 1.2 ;
27603: LD_ADDR_VAR 0 10
27607: PUSH
27608: LD_VAR 0 10
27612: PUSH
27613: LD_REAL  1.20000000000000E+0000
27616: MUL
27617: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27618: LD_VAR 0 6
27622: PPUSH
27623: CALL_OW 257
27627: PUSH
27628: LD_INT 5
27630: PUSH
27631: LD_INT 7
27633: PUSH
27634: LD_INT 9
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: LIST
27641: IN
27642: PUSH
27643: LD_VAR 0 1
27647: PPUSH
27648: LD_INT 52
27650: PPUSH
27651: CALL_OW 321
27655: PUSH
27656: LD_INT 2
27658: EQUAL
27659: AND
27660: IFFALSE 27677
// bpoints := bpoints * 1.5 ;
27662: LD_ADDR_VAR 0 10
27666: PUSH
27667: LD_VAR 0 10
27671: PUSH
27672: LD_REAL  1.50000000000000E+0000
27675: MUL
27676: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27677: LD_VAR 0 1
27681: PPUSH
27682: LD_INT 66
27684: PPUSH
27685: CALL_OW 321
27689: PUSH
27690: LD_INT 2
27692: EQUAL
27693: IFFALSE 27710
// bpoints := bpoints * 1.1 ;
27695: LD_ADDR_VAR 0 10
27699: PUSH
27700: LD_VAR 0 10
27704: PUSH
27705: LD_REAL  1.10000000000000E+0000
27708: MUL
27709: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27710: LD_ADDR_VAR 0 10
27714: PUSH
27715: LD_VAR 0 10
27719: PUSH
27720: LD_VAR 0 6
27724: PPUSH
27725: LD_INT 1
27727: PPUSH
27728: CALL_OW 259
27732: PUSH
27733: LD_REAL  1.15000000000000E+0000
27736: MUL
27737: MUL
27738: ST_TO_ADDR
// end ; unit_vehicle :
27739: GO 28563
27741: LD_INT 2
27743: DOUBLE
27744: EQUAL
27745: IFTRUE 27749
27747: GO 28551
27749: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27750: LD_VAR 0 6
27754: PPUSH
27755: CALL_OW 264
27759: PUSH
27760: LD_INT 2
27762: PUSH
27763: LD_INT 42
27765: PUSH
27766: LD_INT 24
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: IN
27774: IFFALSE 27795
// points := [ 25 , 5 , 3 ] ;
27776: LD_ADDR_VAR 0 9
27780: PUSH
27781: LD_INT 25
27783: PUSH
27784: LD_INT 5
27786: PUSH
27787: LD_INT 3
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: LIST
27794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27795: LD_VAR 0 6
27799: PPUSH
27800: CALL_OW 264
27804: PUSH
27805: LD_INT 4
27807: PUSH
27808: LD_INT 43
27810: PUSH
27811: LD_INT 25
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: IN
27819: IFFALSE 27840
// points := [ 40 , 15 , 5 ] ;
27821: LD_ADDR_VAR 0 9
27825: PUSH
27826: LD_INT 40
27828: PUSH
27829: LD_INT 15
27831: PUSH
27832: LD_INT 5
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: LIST
27839: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27840: LD_VAR 0 6
27844: PPUSH
27845: CALL_OW 264
27849: PUSH
27850: LD_INT 3
27852: PUSH
27853: LD_INT 23
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: IN
27860: IFFALSE 27881
// points := [ 7 , 25 , 8 ] ;
27862: LD_ADDR_VAR 0 9
27866: PUSH
27867: LD_INT 7
27869: PUSH
27870: LD_INT 25
27872: PUSH
27873: LD_INT 8
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: LIST
27880: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27881: LD_VAR 0 6
27885: PPUSH
27886: CALL_OW 264
27890: PUSH
27891: LD_INT 5
27893: PUSH
27894: LD_INT 27
27896: PUSH
27897: LD_INT 44
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: LIST
27904: IN
27905: IFFALSE 27926
// points := [ 14 , 50 , 16 ] ;
27907: LD_ADDR_VAR 0 9
27911: PUSH
27912: LD_INT 14
27914: PUSH
27915: LD_INT 50
27917: PUSH
27918: LD_INT 16
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27926: LD_VAR 0 6
27930: PPUSH
27931: CALL_OW 264
27935: PUSH
27936: LD_INT 6
27938: PUSH
27939: LD_INT 46
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: IN
27946: IFFALSE 27967
// points := [ 32 , 120 , 70 ] ;
27948: LD_ADDR_VAR 0 9
27952: PUSH
27953: LD_INT 32
27955: PUSH
27956: LD_INT 120
27958: PUSH
27959: LD_INT 70
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: LIST
27966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27967: LD_VAR 0 6
27971: PPUSH
27972: CALL_OW 264
27976: PUSH
27977: LD_INT 7
27979: PUSH
27980: LD_INT 28
27982: PUSH
27983: LD_INT 45
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: LIST
27990: IN
27991: IFFALSE 28012
// points := [ 35 , 20 , 45 ] ;
27993: LD_ADDR_VAR 0 9
27997: PUSH
27998: LD_INT 35
28000: PUSH
28001: LD_INT 20
28003: PUSH
28004: LD_INT 45
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: LIST
28011: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28012: LD_VAR 0 6
28016: PPUSH
28017: CALL_OW 264
28021: PUSH
28022: LD_INT 47
28024: PUSH
28025: EMPTY
28026: LIST
28027: IN
28028: IFFALSE 28049
// points := [ 67 , 45 , 75 ] ;
28030: LD_ADDR_VAR 0 9
28034: PUSH
28035: LD_INT 67
28037: PUSH
28038: LD_INT 45
28040: PUSH
28041: LD_INT 75
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: LIST
28048: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28049: LD_VAR 0 6
28053: PPUSH
28054: CALL_OW 264
28058: PUSH
28059: LD_INT 26
28061: PUSH
28062: EMPTY
28063: LIST
28064: IN
28065: IFFALSE 28086
// points := [ 120 , 30 , 80 ] ;
28067: LD_ADDR_VAR 0 9
28071: PUSH
28072: LD_INT 120
28074: PUSH
28075: LD_INT 30
28077: PUSH
28078: LD_INT 80
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: LIST
28085: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28086: LD_VAR 0 6
28090: PPUSH
28091: CALL_OW 264
28095: PUSH
28096: LD_INT 22
28098: PUSH
28099: EMPTY
28100: LIST
28101: IN
28102: IFFALSE 28123
// points := [ 40 , 1 , 1 ] ;
28104: LD_ADDR_VAR 0 9
28108: PUSH
28109: LD_INT 40
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: LIST
28122: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28123: LD_VAR 0 6
28127: PPUSH
28128: CALL_OW 264
28132: PUSH
28133: LD_INT 29
28135: PUSH
28136: EMPTY
28137: LIST
28138: IN
28139: IFFALSE 28160
// points := [ 70 , 200 , 400 ] ;
28141: LD_ADDR_VAR 0 9
28145: PUSH
28146: LD_INT 70
28148: PUSH
28149: LD_INT 200
28151: PUSH
28152: LD_INT 400
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: LIST
28159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28160: LD_VAR 0 6
28164: PPUSH
28165: CALL_OW 264
28169: PUSH
28170: LD_INT 14
28172: PUSH
28173: LD_INT 53
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: IN
28180: IFFALSE 28201
// points := [ 40 , 10 , 20 ] ;
28182: LD_ADDR_VAR 0 9
28186: PUSH
28187: LD_INT 40
28189: PUSH
28190: LD_INT 10
28192: PUSH
28193: LD_INT 20
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: LIST
28200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28201: LD_VAR 0 6
28205: PPUSH
28206: CALL_OW 264
28210: PUSH
28211: LD_INT 9
28213: PUSH
28214: EMPTY
28215: LIST
28216: IN
28217: IFFALSE 28238
// points := [ 5 , 70 , 20 ] ;
28219: LD_ADDR_VAR 0 9
28223: PUSH
28224: LD_INT 5
28226: PUSH
28227: LD_INT 70
28229: PUSH
28230: LD_INT 20
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: LIST
28237: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28238: LD_VAR 0 6
28242: PPUSH
28243: CALL_OW 264
28247: PUSH
28248: LD_INT 10
28250: PUSH
28251: EMPTY
28252: LIST
28253: IN
28254: IFFALSE 28275
// points := [ 35 , 110 , 70 ] ;
28256: LD_ADDR_VAR 0 9
28260: PUSH
28261: LD_INT 35
28263: PUSH
28264: LD_INT 110
28266: PUSH
28267: LD_INT 70
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: LIST
28274: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28275: LD_VAR 0 6
28279: PPUSH
28280: CALL_OW 265
28284: PUSH
28285: LD_INT 25
28287: EQUAL
28288: IFFALSE 28309
// points := [ 80 , 65 , 100 ] ;
28290: LD_ADDR_VAR 0 9
28294: PUSH
28295: LD_INT 80
28297: PUSH
28298: LD_INT 65
28300: PUSH
28301: LD_INT 100
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: LIST
28308: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28309: LD_VAR 0 6
28313: PPUSH
28314: CALL_OW 263
28318: PUSH
28319: LD_INT 1
28321: EQUAL
28322: IFFALSE 28357
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28324: LD_ADDR_VAR 0 10
28328: PUSH
28329: LD_VAR 0 10
28333: PUSH
28334: LD_VAR 0 6
28338: PPUSH
28339: CALL_OW 311
28343: PPUSH
28344: LD_INT 3
28346: PPUSH
28347: CALL_OW 259
28351: PUSH
28352: LD_INT 4
28354: MUL
28355: MUL
28356: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28357: LD_VAR 0 6
28361: PPUSH
28362: CALL_OW 263
28366: PUSH
28367: LD_INT 2
28369: EQUAL
28370: IFFALSE 28421
// begin j := IsControledBy ( i ) ;
28372: LD_ADDR_VAR 0 7
28376: PUSH
28377: LD_VAR 0 6
28381: PPUSH
28382: CALL_OW 312
28386: ST_TO_ADDR
// if j then
28387: LD_VAR 0 7
28391: IFFALSE 28421
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28393: LD_ADDR_VAR 0 10
28397: PUSH
28398: LD_VAR 0 10
28402: PUSH
28403: LD_VAR 0 7
28407: PPUSH
28408: LD_INT 3
28410: PPUSH
28411: CALL_OW 259
28415: PUSH
28416: LD_INT 3
28418: MUL
28419: MUL
28420: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28421: LD_VAR 0 6
28425: PPUSH
28426: CALL_OW 264
28430: PUSH
28431: LD_INT 5
28433: PUSH
28434: LD_INT 6
28436: PUSH
28437: LD_INT 46
28439: PUSH
28440: LD_INT 44
28442: PUSH
28443: LD_INT 47
28445: PUSH
28446: LD_INT 45
28448: PUSH
28449: LD_INT 28
28451: PUSH
28452: LD_INT 7
28454: PUSH
28455: LD_INT 27
28457: PUSH
28458: LD_INT 29
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: IN
28473: PUSH
28474: LD_VAR 0 1
28478: PPUSH
28479: LD_INT 52
28481: PPUSH
28482: CALL_OW 321
28486: PUSH
28487: LD_INT 2
28489: EQUAL
28490: AND
28491: IFFALSE 28508
// bpoints := bpoints * 1.2 ;
28493: LD_ADDR_VAR 0 10
28497: PUSH
28498: LD_VAR 0 10
28502: PUSH
28503: LD_REAL  1.20000000000000E+0000
28506: MUL
28507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28508: LD_VAR 0 6
28512: PPUSH
28513: CALL_OW 264
28517: PUSH
28518: LD_INT 6
28520: PUSH
28521: LD_INT 46
28523: PUSH
28524: LD_INT 47
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: LIST
28531: IN
28532: IFFALSE 28549
// bpoints := bpoints * 1.2 ;
28534: LD_ADDR_VAR 0 10
28538: PUSH
28539: LD_VAR 0 10
28543: PUSH
28544: LD_REAL  1.20000000000000E+0000
28547: MUL
28548: ST_TO_ADDR
// end ; unit_building :
28549: GO 28563
28551: LD_INT 3
28553: DOUBLE
28554: EQUAL
28555: IFTRUE 28559
28557: GO 28562
28559: POP
// ; end ;
28560: GO 28563
28562: POP
// for j = 1 to 3 do
28563: LD_ADDR_VAR 0 7
28567: PUSH
28568: DOUBLE
28569: LD_INT 1
28571: DEC
28572: ST_TO_ADDR
28573: LD_INT 3
28575: PUSH
28576: FOR_TO
28577: IFFALSE 28630
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28579: LD_ADDR_VAR 0 5
28583: PUSH
28584: LD_VAR 0 5
28588: PPUSH
28589: LD_VAR 0 7
28593: PPUSH
28594: LD_VAR 0 5
28598: PUSH
28599: LD_VAR 0 7
28603: ARRAY
28604: PUSH
28605: LD_VAR 0 9
28609: PUSH
28610: LD_VAR 0 7
28614: ARRAY
28615: PUSH
28616: LD_VAR 0 10
28620: MUL
28621: PLUS
28622: PPUSH
28623: CALL_OW 1
28627: ST_TO_ADDR
28628: GO 28576
28630: POP
28631: POP
// end ;
28632: GO 27115
28634: POP
28635: POP
// result := Replace ( result , 4 , tmp ) ;
28636: LD_ADDR_VAR 0 5
28640: PUSH
28641: LD_VAR 0 5
28645: PPUSH
28646: LD_INT 4
28648: PPUSH
28649: LD_VAR 0 8
28653: PPUSH
28654: CALL_OW 1
28658: ST_TO_ADDR
// end ;
28659: LD_VAR 0 5
28663: RET
// export function DangerAtRange ( unit , range ) ; begin
28664: LD_INT 0
28666: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28667: LD_ADDR_VAR 0 3
28671: PUSH
28672: LD_VAR 0 1
28676: PPUSH
28677: CALL_OW 255
28681: PPUSH
28682: LD_VAR 0 1
28686: PPUSH
28687: CALL_OW 250
28691: PPUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: CALL_OW 251
28701: PPUSH
28702: LD_VAR 0 2
28706: PPUSH
28707: CALL 26967 0 4
28711: ST_TO_ADDR
// end ;
28712: LD_VAR 0 3
28716: RET
// export function DangerInArea ( side , area ) ; begin
28717: LD_INT 0
28719: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28720: LD_ADDR_VAR 0 3
28724: PUSH
28725: LD_VAR 0 2
28729: PPUSH
28730: LD_INT 81
28732: PUSH
28733: LD_VAR 0 1
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PPUSH
28742: CALL_OW 70
28746: ST_TO_ADDR
// end ;
28747: LD_VAR 0 3
28751: RET
// export function IsExtension ( b ) ; begin
28752: LD_INT 0
28754: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28755: LD_ADDR_VAR 0 2
28759: PUSH
28760: LD_VAR 0 1
28764: PUSH
28765: LD_INT 23
28767: PUSH
28768: LD_INT 20
28770: PUSH
28771: LD_INT 22
28773: PUSH
28774: LD_INT 17
28776: PUSH
28777: LD_INT 24
28779: PUSH
28780: LD_INT 21
28782: PUSH
28783: LD_INT 19
28785: PUSH
28786: LD_INT 16
28788: PUSH
28789: LD_INT 25
28791: PUSH
28792: LD_INT 18
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: IN
28807: ST_TO_ADDR
// end ;
28808: LD_VAR 0 2
28812: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28813: LD_INT 0
28815: PPUSH
28816: PPUSH
28817: PPUSH
// result := [ ] ;
28818: LD_ADDR_VAR 0 3
28822: PUSH
28823: EMPTY
28824: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28825: LD_ADDR_VAR 0 4
28829: PUSH
28830: LD_VAR 0 2
28834: PPUSH
28835: LD_INT 21
28837: PUSH
28838: LD_INT 3
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PPUSH
28845: CALL_OW 70
28849: ST_TO_ADDR
// if not tmp then
28850: LD_VAR 0 4
28854: NOT
28855: IFFALSE 28859
// exit ;
28857: GO 28917
// for i in tmp do
28859: LD_ADDR_VAR 0 5
28863: PUSH
28864: LD_VAR 0 4
28868: PUSH
28869: FOR_IN
28870: IFFALSE 28905
// if GetBase ( i ) <> base then
28872: LD_VAR 0 5
28876: PPUSH
28877: CALL_OW 274
28881: PUSH
28882: LD_VAR 0 1
28886: NONEQUAL
28887: IFFALSE 28903
// ComLinkToBase ( base , i ) ;
28889: LD_VAR 0 1
28893: PPUSH
28894: LD_VAR 0 5
28898: PPUSH
28899: CALL_OW 169
28903: GO 28869
28905: POP
28906: POP
// result := tmp ;
28907: LD_ADDR_VAR 0 3
28911: PUSH
28912: LD_VAR 0 4
28916: ST_TO_ADDR
// end ;
28917: LD_VAR 0 3
28921: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28922: LD_INT 0
28924: PPUSH
28925: PPUSH
// if BuildingStatus ( b ) = bs_build then
28926: LD_VAR 0 2
28930: PPUSH
28931: CALL_OW 461
28935: PUSH
28936: LD_INT 1
28938: EQUAL
28939: IFFALSE 28999
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28941: LD_VAR 0 1
28945: PPUSH
28946: LD_STRING h
28948: PUSH
28949: LD_VAR 0 2
28953: PPUSH
28954: CALL_OW 250
28958: PUSH
28959: LD_VAR 0 2
28963: PPUSH
28964: CALL_OW 251
28968: PUSH
28969: LD_VAR 0 2
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: PUSH
28992: EMPTY
28993: LIST
28994: PPUSH
28995: CALL_OW 446
// end ;
28999: LD_VAR 0 3
29003: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29004: LD_INT 0
29006: PPUSH
29007: PPUSH
29008: PPUSH
29009: PPUSH
29010: PPUSH
29011: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29012: LD_VAR 0 1
29016: NOT
29017: PUSH
29018: LD_VAR 0 1
29022: PPUSH
29023: CALL_OW 263
29027: PUSH
29028: LD_INT 2
29030: EQUAL
29031: NOT
29032: OR
29033: IFFALSE 29037
// exit ;
29035: GO 29353
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29037: LD_ADDR_VAR 0 6
29041: PUSH
29042: LD_INT 22
29044: PUSH
29045: LD_VAR 0 1
29049: PPUSH
29050: CALL_OW 255
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 2
29061: PUSH
29062: LD_INT 30
29064: PUSH
29065: LD_INT 36
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 34
29074: PUSH
29075: LD_INT 31
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: LIST
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PPUSH
29091: CALL_OW 69
29095: ST_TO_ADDR
// if not tmp then
29096: LD_VAR 0 6
29100: NOT
29101: IFFALSE 29105
// exit ;
29103: GO 29353
// result := [ ] ;
29105: LD_ADDR_VAR 0 2
29109: PUSH
29110: EMPTY
29111: ST_TO_ADDR
// for i in tmp do
29112: LD_ADDR_VAR 0 3
29116: PUSH
29117: LD_VAR 0 6
29121: PUSH
29122: FOR_IN
29123: IFFALSE 29194
// begin t := UnitsInside ( i ) ;
29125: LD_ADDR_VAR 0 4
29129: PUSH
29130: LD_VAR 0 3
29134: PPUSH
29135: CALL_OW 313
29139: ST_TO_ADDR
// if t then
29140: LD_VAR 0 4
29144: IFFALSE 29192
// for j in t do
29146: LD_ADDR_VAR 0 7
29150: PUSH
29151: LD_VAR 0 4
29155: PUSH
29156: FOR_IN
29157: IFFALSE 29190
// result := Insert ( result , result + 1 , j ) ;
29159: LD_ADDR_VAR 0 2
29163: PUSH
29164: LD_VAR 0 2
29168: PPUSH
29169: LD_VAR 0 2
29173: PUSH
29174: LD_INT 1
29176: PLUS
29177: PPUSH
29178: LD_VAR 0 7
29182: PPUSH
29183: CALL_OW 2
29187: ST_TO_ADDR
29188: GO 29156
29190: POP
29191: POP
// end ;
29192: GO 29122
29194: POP
29195: POP
// if not result then
29196: LD_VAR 0 2
29200: NOT
29201: IFFALSE 29205
// exit ;
29203: GO 29353
// mech := result [ 1 ] ;
29205: LD_ADDR_VAR 0 5
29209: PUSH
29210: LD_VAR 0 2
29214: PUSH
29215: LD_INT 1
29217: ARRAY
29218: ST_TO_ADDR
// if result > 1 then
29219: LD_VAR 0 2
29223: PUSH
29224: LD_INT 1
29226: GREATER
29227: IFFALSE 29339
// for i = 2 to result do
29229: LD_ADDR_VAR 0 3
29233: PUSH
29234: DOUBLE
29235: LD_INT 2
29237: DEC
29238: ST_TO_ADDR
29239: LD_VAR 0 2
29243: PUSH
29244: FOR_TO
29245: IFFALSE 29337
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29247: LD_ADDR_VAR 0 4
29251: PUSH
29252: LD_VAR 0 2
29256: PUSH
29257: LD_VAR 0 3
29261: ARRAY
29262: PPUSH
29263: LD_INT 3
29265: PPUSH
29266: CALL_OW 259
29270: PUSH
29271: LD_VAR 0 2
29275: PUSH
29276: LD_VAR 0 3
29280: ARRAY
29281: PPUSH
29282: CALL_OW 432
29286: MINUS
29287: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29288: LD_VAR 0 4
29292: PUSH
29293: LD_VAR 0 5
29297: PPUSH
29298: LD_INT 3
29300: PPUSH
29301: CALL_OW 259
29305: PUSH
29306: LD_VAR 0 5
29310: PPUSH
29311: CALL_OW 432
29315: MINUS
29316: GREATEREQUAL
29317: IFFALSE 29335
// mech := result [ i ] ;
29319: LD_ADDR_VAR 0 5
29323: PUSH
29324: LD_VAR 0 2
29328: PUSH
29329: LD_VAR 0 3
29333: ARRAY
29334: ST_TO_ADDR
// end ;
29335: GO 29244
29337: POP
29338: POP
// ComLinkTo ( vehicle , mech ) ;
29339: LD_VAR 0 1
29343: PPUSH
29344: LD_VAR 0 5
29348: PPUSH
29349: CALL_OW 135
// end ;
29353: LD_VAR 0 2
29357: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29358: LD_INT 0
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
// result := [ ] ;
29373: LD_ADDR_VAR 0 7
29377: PUSH
29378: EMPTY
29379: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29380: LD_VAR 0 1
29384: PPUSH
29385: CALL_OW 266
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: IN
29400: NOT
29401: IFFALSE 29405
// exit ;
29403: GO 31036
// if name then
29405: LD_VAR 0 3
29409: IFFALSE 29425
// SetBName ( base_dep , name ) ;
29411: LD_VAR 0 1
29415: PPUSH
29416: LD_VAR 0 3
29420: PPUSH
29421: CALL_OW 500
// base := GetBase ( base_dep ) ;
29425: LD_ADDR_VAR 0 15
29429: PUSH
29430: LD_VAR 0 1
29434: PPUSH
29435: CALL_OW 274
29439: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29440: LD_ADDR_VAR 0 16
29444: PUSH
29445: LD_VAR 0 1
29449: PPUSH
29450: CALL_OW 255
29454: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29455: LD_ADDR_VAR 0 17
29459: PUSH
29460: LD_VAR 0 1
29464: PPUSH
29465: CALL_OW 248
29469: ST_TO_ADDR
// if sources then
29470: LD_VAR 0 5
29474: IFFALSE 29521
// for i = 1 to 3 do
29476: LD_ADDR_VAR 0 8
29480: PUSH
29481: DOUBLE
29482: LD_INT 1
29484: DEC
29485: ST_TO_ADDR
29486: LD_INT 3
29488: PUSH
29489: FOR_TO
29490: IFFALSE 29519
// AddResourceType ( base , i , sources [ i ] ) ;
29492: LD_VAR 0 15
29496: PPUSH
29497: LD_VAR 0 8
29501: PPUSH
29502: LD_VAR 0 5
29506: PUSH
29507: LD_VAR 0 8
29511: ARRAY
29512: PPUSH
29513: CALL_OW 276
29517: GO 29489
29519: POP
29520: POP
// buildings := GetBaseBuildings ( base , area ) ;
29521: LD_ADDR_VAR 0 18
29525: PUSH
29526: LD_VAR 0 15
29530: PPUSH
29531: LD_VAR 0 2
29535: PPUSH
29536: CALL 28813 0 2
29540: ST_TO_ADDR
// InitHc ;
29541: CALL_OW 19
// InitUc ;
29545: CALL_OW 18
// uc_side := side ;
29549: LD_ADDR_OWVAR 20
29553: PUSH
29554: LD_VAR 0 16
29558: ST_TO_ADDR
// uc_nation := nation ;
29559: LD_ADDR_OWVAR 21
29563: PUSH
29564: LD_VAR 0 17
29568: ST_TO_ADDR
// if buildings then
29569: LD_VAR 0 18
29573: IFFALSE 30895
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29575: LD_ADDR_VAR 0 19
29579: PUSH
29580: LD_VAR 0 18
29584: PPUSH
29585: LD_INT 2
29587: PUSH
29588: LD_INT 30
29590: PUSH
29591: LD_INT 29
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 30
29600: PUSH
29601: LD_INT 30
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: LIST
29612: PPUSH
29613: CALL_OW 72
29617: ST_TO_ADDR
// if tmp then
29618: LD_VAR 0 19
29622: IFFALSE 29670
// for i in tmp do
29624: LD_ADDR_VAR 0 8
29628: PUSH
29629: LD_VAR 0 19
29633: PUSH
29634: FOR_IN
29635: IFFALSE 29668
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29637: LD_VAR 0 8
29641: PPUSH
29642: CALL_OW 250
29646: PPUSH
29647: LD_VAR 0 8
29651: PPUSH
29652: CALL_OW 251
29656: PPUSH
29657: LD_VAR 0 16
29661: PPUSH
29662: CALL_OW 441
29666: GO 29634
29668: POP
29669: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29670: LD_VAR 0 18
29674: PPUSH
29675: LD_INT 2
29677: PUSH
29678: LD_INT 30
29680: PUSH
29681: LD_INT 32
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 30
29690: PUSH
29691: LD_INT 33
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: LIST
29702: PPUSH
29703: CALL_OW 72
29707: IFFALSE 29795
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29709: LD_ADDR_VAR 0 8
29713: PUSH
29714: LD_VAR 0 18
29718: PPUSH
29719: LD_INT 2
29721: PUSH
29722: LD_INT 30
29724: PUSH
29725: LD_INT 32
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 30
29734: PUSH
29735: LD_INT 33
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: LIST
29746: PPUSH
29747: CALL_OW 72
29751: PUSH
29752: FOR_IN
29753: IFFALSE 29793
// begin if not GetBWeapon ( i ) then
29755: LD_VAR 0 8
29759: PPUSH
29760: CALL_OW 269
29764: NOT
29765: IFFALSE 29791
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29767: LD_VAR 0 8
29771: PPUSH
29772: LD_VAR 0 8
29776: PPUSH
29777: LD_VAR 0 2
29781: PPUSH
29782: CALL 31041 0 2
29786: PPUSH
29787: CALL_OW 431
// end ;
29791: GO 29752
29793: POP
29794: POP
// end ; for i = 1 to personel do
29795: LD_ADDR_VAR 0 8
29799: PUSH
29800: DOUBLE
29801: LD_INT 1
29803: DEC
29804: ST_TO_ADDR
29805: LD_VAR 0 6
29809: PUSH
29810: FOR_TO
29811: IFFALSE 30875
// begin if i > 4 then
29813: LD_VAR 0 8
29817: PUSH
29818: LD_INT 4
29820: GREATER
29821: IFFALSE 29825
// break ;
29823: GO 30875
// case i of 1 :
29825: LD_VAR 0 8
29829: PUSH
29830: LD_INT 1
29832: DOUBLE
29833: EQUAL
29834: IFTRUE 29838
29836: GO 29918
29838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29839: LD_ADDR_VAR 0 12
29843: PUSH
29844: LD_VAR 0 18
29848: PPUSH
29849: LD_INT 22
29851: PUSH
29852: LD_VAR 0 16
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 58
29863: PUSH
29864: EMPTY
29865: LIST
29866: PUSH
29867: LD_INT 2
29869: PUSH
29870: LD_INT 30
29872: PUSH
29873: LD_INT 32
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 30
29882: PUSH
29883: LD_INT 4
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 30
29892: PUSH
29893: LD_INT 5
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: LIST
29910: PPUSH
29911: CALL_OW 72
29915: ST_TO_ADDR
29916: GO 30140
29918: LD_INT 2
29920: DOUBLE
29921: EQUAL
29922: IFTRUE 29926
29924: GO 29988
29926: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29927: LD_ADDR_VAR 0 12
29931: PUSH
29932: LD_VAR 0 18
29936: PPUSH
29937: LD_INT 22
29939: PUSH
29940: LD_VAR 0 16
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: PUSH
29952: LD_INT 30
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 30
29964: PUSH
29965: LD_INT 1
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: LIST
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PPUSH
29981: CALL_OW 72
29985: ST_TO_ADDR
29986: GO 30140
29988: LD_INT 3
29990: DOUBLE
29991: EQUAL
29992: IFTRUE 29996
29994: GO 30058
29996: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29997: LD_ADDR_VAR 0 12
30001: PUSH
30002: LD_VAR 0 18
30006: PPUSH
30007: LD_INT 22
30009: PUSH
30010: LD_VAR 0 16
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 2
30021: PUSH
30022: LD_INT 30
30024: PUSH
30025: LD_INT 2
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 30
30034: PUSH
30035: LD_INT 3
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: LIST
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PPUSH
30051: CALL_OW 72
30055: ST_TO_ADDR
30056: GO 30140
30058: LD_INT 4
30060: DOUBLE
30061: EQUAL
30062: IFTRUE 30066
30064: GO 30139
30066: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30067: LD_ADDR_VAR 0 12
30071: PUSH
30072: LD_VAR 0 18
30076: PPUSH
30077: LD_INT 22
30079: PUSH
30080: LD_VAR 0 16
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 2
30091: PUSH
30092: LD_INT 30
30094: PUSH
30095: LD_INT 6
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 30
30104: PUSH
30105: LD_INT 7
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 30
30114: PUSH
30115: LD_INT 8
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PPUSH
30132: CALL_OW 72
30136: ST_TO_ADDR
30137: GO 30140
30139: POP
// if i = 1 then
30140: LD_VAR 0 8
30144: PUSH
30145: LD_INT 1
30147: EQUAL
30148: IFFALSE 30259
// begin tmp := [ ] ;
30150: LD_ADDR_VAR 0 19
30154: PUSH
30155: EMPTY
30156: ST_TO_ADDR
// for j in f do
30157: LD_ADDR_VAR 0 9
30161: PUSH
30162: LD_VAR 0 12
30166: PUSH
30167: FOR_IN
30168: IFFALSE 30241
// if GetBType ( j ) = b_bunker then
30170: LD_VAR 0 9
30174: PPUSH
30175: CALL_OW 266
30179: PUSH
30180: LD_INT 32
30182: EQUAL
30183: IFFALSE 30210
// tmp := Insert ( tmp , 1 , j ) else
30185: LD_ADDR_VAR 0 19
30189: PUSH
30190: LD_VAR 0 19
30194: PPUSH
30195: LD_INT 1
30197: PPUSH
30198: LD_VAR 0 9
30202: PPUSH
30203: CALL_OW 2
30207: ST_TO_ADDR
30208: GO 30239
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30210: LD_ADDR_VAR 0 19
30214: PUSH
30215: LD_VAR 0 19
30219: PPUSH
30220: LD_VAR 0 19
30224: PUSH
30225: LD_INT 1
30227: PLUS
30228: PPUSH
30229: LD_VAR 0 9
30233: PPUSH
30234: CALL_OW 2
30238: ST_TO_ADDR
30239: GO 30167
30241: POP
30242: POP
// if tmp then
30243: LD_VAR 0 19
30247: IFFALSE 30259
// f := tmp ;
30249: LD_ADDR_VAR 0 12
30253: PUSH
30254: LD_VAR 0 19
30258: ST_TO_ADDR
// end ; x := personel [ i ] ;
30259: LD_ADDR_VAR 0 13
30263: PUSH
30264: LD_VAR 0 6
30268: PUSH
30269: LD_VAR 0 8
30273: ARRAY
30274: ST_TO_ADDR
// if x = - 1 then
30275: LD_VAR 0 13
30279: PUSH
30280: LD_INT 1
30282: NEG
30283: EQUAL
30284: IFFALSE 30493
// begin for j in f do
30286: LD_ADDR_VAR 0 9
30290: PUSH
30291: LD_VAR 0 12
30295: PUSH
30296: FOR_IN
30297: IFFALSE 30489
// repeat InitHc ;
30299: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30303: LD_VAR 0 9
30307: PPUSH
30308: CALL_OW 266
30312: PUSH
30313: LD_INT 5
30315: EQUAL
30316: IFFALSE 30386
// begin if UnitsInside ( j ) < 3 then
30318: LD_VAR 0 9
30322: PPUSH
30323: CALL_OW 313
30327: PUSH
30328: LD_INT 3
30330: LESS
30331: IFFALSE 30367
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30333: LD_INT 0
30335: PPUSH
30336: LD_INT 5
30338: PUSH
30339: LD_INT 8
30341: PUSH
30342: LD_INT 9
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: LIST
30349: PUSH
30350: LD_VAR 0 17
30354: ARRAY
30355: PPUSH
30356: LD_VAR 0 4
30360: PPUSH
30361: CALL_OW 380
30365: GO 30384
// PrepareHuman ( false , i , skill ) ;
30367: LD_INT 0
30369: PPUSH
30370: LD_VAR 0 8
30374: PPUSH
30375: LD_VAR 0 4
30379: PPUSH
30380: CALL_OW 380
// end else
30384: GO 30403
// PrepareHuman ( false , i , skill ) ;
30386: LD_INT 0
30388: PPUSH
30389: LD_VAR 0 8
30393: PPUSH
30394: LD_VAR 0 4
30398: PPUSH
30399: CALL_OW 380
// un := CreateHuman ;
30403: LD_ADDR_VAR 0 14
30407: PUSH
30408: CALL_OW 44
30412: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30413: LD_ADDR_VAR 0 7
30417: PUSH
30418: LD_VAR 0 7
30422: PPUSH
30423: LD_INT 1
30425: PPUSH
30426: LD_VAR 0 14
30430: PPUSH
30431: CALL_OW 2
30435: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30436: LD_VAR 0 14
30440: PPUSH
30441: LD_VAR 0 9
30445: PPUSH
30446: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30450: LD_VAR 0 9
30454: PPUSH
30455: CALL_OW 313
30459: PUSH
30460: LD_INT 6
30462: EQUAL
30463: PUSH
30464: LD_VAR 0 9
30468: PPUSH
30469: CALL_OW 266
30473: PUSH
30474: LD_INT 32
30476: PUSH
30477: LD_INT 31
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: IN
30484: OR
30485: IFFALSE 30299
30487: GO 30296
30489: POP
30490: POP
// end else
30491: GO 30873
// for j = 1 to x do
30493: LD_ADDR_VAR 0 9
30497: PUSH
30498: DOUBLE
30499: LD_INT 1
30501: DEC
30502: ST_TO_ADDR
30503: LD_VAR 0 13
30507: PUSH
30508: FOR_TO
30509: IFFALSE 30871
// begin InitHc ;
30511: CALL_OW 19
// if not f then
30515: LD_VAR 0 12
30519: NOT
30520: IFFALSE 30609
// begin PrepareHuman ( false , i , skill ) ;
30522: LD_INT 0
30524: PPUSH
30525: LD_VAR 0 8
30529: PPUSH
30530: LD_VAR 0 4
30534: PPUSH
30535: CALL_OW 380
// un := CreateHuman ;
30539: LD_ADDR_VAR 0 14
30543: PUSH
30544: CALL_OW 44
30548: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30549: LD_ADDR_VAR 0 7
30553: PUSH
30554: LD_VAR 0 7
30558: PPUSH
30559: LD_INT 1
30561: PPUSH
30562: LD_VAR 0 14
30566: PPUSH
30567: CALL_OW 2
30571: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30572: LD_VAR 0 14
30576: PPUSH
30577: LD_VAR 0 1
30581: PPUSH
30582: CALL_OW 250
30586: PPUSH
30587: LD_VAR 0 1
30591: PPUSH
30592: CALL_OW 251
30596: PPUSH
30597: LD_INT 10
30599: PPUSH
30600: LD_INT 0
30602: PPUSH
30603: CALL_OW 50
// continue ;
30607: GO 30508
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30609: LD_VAR 0 12
30613: PUSH
30614: LD_INT 1
30616: ARRAY
30617: PPUSH
30618: CALL_OW 313
30622: PUSH
30623: LD_VAR 0 12
30627: PUSH
30628: LD_INT 1
30630: ARRAY
30631: PPUSH
30632: CALL_OW 266
30636: PUSH
30637: LD_INT 32
30639: PUSH
30640: LD_INT 31
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: IN
30647: AND
30648: PUSH
30649: LD_VAR 0 12
30653: PUSH
30654: LD_INT 1
30656: ARRAY
30657: PPUSH
30658: CALL_OW 313
30662: PUSH
30663: LD_INT 6
30665: EQUAL
30666: OR
30667: IFFALSE 30687
// f := Delete ( f , 1 ) ;
30669: LD_ADDR_VAR 0 12
30673: PUSH
30674: LD_VAR 0 12
30678: PPUSH
30679: LD_INT 1
30681: PPUSH
30682: CALL_OW 3
30686: ST_TO_ADDR
// if not f then
30687: LD_VAR 0 12
30691: NOT
30692: IFFALSE 30710
// begin x := x + 2 ;
30694: LD_ADDR_VAR 0 13
30698: PUSH
30699: LD_VAR 0 13
30703: PUSH
30704: LD_INT 2
30706: PLUS
30707: ST_TO_ADDR
// continue ;
30708: GO 30508
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30710: LD_VAR 0 12
30714: PUSH
30715: LD_INT 1
30717: ARRAY
30718: PPUSH
30719: CALL_OW 266
30723: PUSH
30724: LD_INT 5
30726: EQUAL
30727: IFFALSE 30801
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30729: LD_VAR 0 12
30733: PUSH
30734: LD_INT 1
30736: ARRAY
30737: PPUSH
30738: CALL_OW 313
30742: PUSH
30743: LD_INT 3
30745: LESS
30746: IFFALSE 30782
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30748: LD_INT 0
30750: PPUSH
30751: LD_INT 5
30753: PUSH
30754: LD_INT 8
30756: PUSH
30757: LD_INT 9
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: LIST
30764: PUSH
30765: LD_VAR 0 17
30769: ARRAY
30770: PPUSH
30771: LD_VAR 0 4
30775: PPUSH
30776: CALL_OW 380
30780: GO 30799
// PrepareHuman ( false , i , skill ) ;
30782: LD_INT 0
30784: PPUSH
30785: LD_VAR 0 8
30789: PPUSH
30790: LD_VAR 0 4
30794: PPUSH
30795: CALL_OW 380
// end else
30799: GO 30818
// PrepareHuman ( false , i , skill ) ;
30801: LD_INT 0
30803: PPUSH
30804: LD_VAR 0 8
30808: PPUSH
30809: LD_VAR 0 4
30813: PPUSH
30814: CALL_OW 380
// un := CreateHuman ;
30818: LD_ADDR_VAR 0 14
30822: PUSH
30823: CALL_OW 44
30827: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30828: LD_ADDR_VAR 0 7
30832: PUSH
30833: LD_VAR 0 7
30837: PPUSH
30838: LD_INT 1
30840: PPUSH
30841: LD_VAR 0 14
30845: PPUSH
30846: CALL_OW 2
30850: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30851: LD_VAR 0 14
30855: PPUSH
30856: LD_VAR 0 12
30860: PUSH
30861: LD_INT 1
30863: ARRAY
30864: PPUSH
30865: CALL_OW 52
// end ;
30869: GO 30508
30871: POP
30872: POP
// end ;
30873: GO 29810
30875: POP
30876: POP
// result := result ^ buildings ;
30877: LD_ADDR_VAR 0 7
30881: PUSH
30882: LD_VAR 0 7
30886: PUSH
30887: LD_VAR 0 18
30891: ADD
30892: ST_TO_ADDR
// end else
30893: GO 31036
// begin for i = 1 to personel do
30895: LD_ADDR_VAR 0 8
30899: PUSH
30900: DOUBLE
30901: LD_INT 1
30903: DEC
30904: ST_TO_ADDR
30905: LD_VAR 0 6
30909: PUSH
30910: FOR_TO
30911: IFFALSE 31034
// begin if i > 4 then
30913: LD_VAR 0 8
30917: PUSH
30918: LD_INT 4
30920: GREATER
30921: IFFALSE 30925
// break ;
30923: GO 31034
// x := personel [ i ] ;
30925: LD_ADDR_VAR 0 13
30929: PUSH
30930: LD_VAR 0 6
30934: PUSH
30935: LD_VAR 0 8
30939: ARRAY
30940: ST_TO_ADDR
// if x = - 1 then
30941: LD_VAR 0 13
30945: PUSH
30946: LD_INT 1
30948: NEG
30949: EQUAL
30950: IFFALSE 30954
// continue ;
30952: GO 30910
// PrepareHuman ( false , i , skill ) ;
30954: LD_INT 0
30956: PPUSH
30957: LD_VAR 0 8
30961: PPUSH
30962: LD_VAR 0 4
30966: PPUSH
30967: CALL_OW 380
// un := CreateHuman ;
30971: LD_ADDR_VAR 0 14
30975: PUSH
30976: CALL_OW 44
30980: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30981: LD_VAR 0 14
30985: PPUSH
30986: LD_VAR 0 1
30990: PPUSH
30991: CALL_OW 250
30995: PPUSH
30996: LD_VAR 0 1
31000: PPUSH
31001: CALL_OW 251
31005: PPUSH
31006: LD_INT 10
31008: PPUSH
31009: LD_INT 0
31011: PPUSH
31012: CALL_OW 50
// result := result ^ un ;
31016: LD_ADDR_VAR 0 7
31020: PUSH
31021: LD_VAR 0 7
31025: PUSH
31026: LD_VAR 0 14
31030: ADD
31031: ST_TO_ADDR
// end ;
31032: GO 30910
31034: POP
31035: POP
// end ; end ;
31036: LD_VAR 0 7
31040: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31041: LD_INT 0
31043: PPUSH
31044: PPUSH
31045: PPUSH
31046: PPUSH
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
31053: PPUSH
31054: PPUSH
31055: PPUSH
31056: PPUSH
31057: PPUSH
31058: PPUSH
// result := false ;
31059: LD_ADDR_VAR 0 3
31063: PUSH
31064: LD_INT 0
31066: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31067: LD_VAR 0 1
31071: NOT
31072: PUSH
31073: LD_VAR 0 1
31077: PPUSH
31078: CALL_OW 266
31082: PUSH
31083: LD_INT 32
31085: PUSH
31086: LD_INT 33
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: IN
31093: NOT
31094: OR
31095: IFFALSE 31099
// exit ;
31097: GO 32235
// nat := GetNation ( tower ) ;
31099: LD_ADDR_VAR 0 12
31103: PUSH
31104: LD_VAR 0 1
31108: PPUSH
31109: CALL_OW 248
31113: ST_TO_ADDR
// side := GetSide ( tower ) ;
31114: LD_ADDR_VAR 0 16
31118: PUSH
31119: LD_VAR 0 1
31123: PPUSH
31124: CALL_OW 255
31128: ST_TO_ADDR
// x := GetX ( tower ) ;
31129: LD_ADDR_VAR 0 10
31133: PUSH
31134: LD_VAR 0 1
31138: PPUSH
31139: CALL_OW 250
31143: ST_TO_ADDR
// y := GetY ( tower ) ;
31144: LD_ADDR_VAR 0 11
31148: PUSH
31149: LD_VAR 0 1
31153: PPUSH
31154: CALL_OW 251
31158: ST_TO_ADDR
// if not x or not y then
31159: LD_VAR 0 10
31163: NOT
31164: PUSH
31165: LD_VAR 0 11
31169: NOT
31170: OR
31171: IFFALSE 31175
// exit ;
31173: GO 32235
// weapon := 0 ;
31175: LD_ADDR_VAR 0 18
31179: PUSH
31180: LD_INT 0
31182: ST_TO_ADDR
// fac_list := [ ] ;
31183: LD_ADDR_VAR 0 17
31187: PUSH
31188: EMPTY
31189: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31190: LD_ADDR_VAR 0 6
31194: PUSH
31195: LD_VAR 0 1
31199: PPUSH
31200: CALL_OW 274
31204: PPUSH
31205: LD_VAR 0 2
31209: PPUSH
31210: CALL 28813 0 2
31214: PPUSH
31215: LD_INT 30
31217: PUSH
31218: LD_INT 3
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PPUSH
31225: CALL_OW 72
31229: ST_TO_ADDR
// if not factories then
31230: LD_VAR 0 6
31234: NOT
31235: IFFALSE 31239
// exit ;
31237: GO 32235
// for i in factories do
31239: LD_ADDR_VAR 0 8
31243: PUSH
31244: LD_VAR 0 6
31248: PUSH
31249: FOR_IN
31250: IFFALSE 31275
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31252: LD_ADDR_VAR 0 17
31256: PUSH
31257: LD_VAR 0 17
31261: PUSH
31262: LD_VAR 0 8
31266: PPUSH
31267: CALL_OW 478
31271: UNION
31272: ST_TO_ADDR
31273: GO 31249
31275: POP
31276: POP
// if not fac_list then
31277: LD_VAR 0 17
31281: NOT
31282: IFFALSE 31286
// exit ;
31284: GO 32235
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31286: LD_ADDR_VAR 0 5
31290: PUSH
31291: LD_INT 4
31293: PUSH
31294: LD_INT 5
31296: PUSH
31297: LD_INT 9
31299: PUSH
31300: LD_INT 10
31302: PUSH
31303: LD_INT 6
31305: PUSH
31306: LD_INT 7
31308: PUSH
31309: LD_INT 11
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 27
31323: PUSH
31324: LD_INT 28
31326: PUSH
31327: LD_INT 26
31329: PUSH
31330: LD_INT 30
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 43
31341: PUSH
31342: LD_INT 44
31344: PUSH
31345: LD_INT 46
31347: PUSH
31348: LD_INT 45
31350: PUSH
31351: LD_INT 47
31353: PUSH
31354: LD_INT 49
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: LIST
31369: PUSH
31370: LD_VAR 0 12
31374: ARRAY
31375: ST_TO_ADDR
// for i in list do
31376: LD_ADDR_VAR 0 8
31380: PUSH
31381: LD_VAR 0 5
31385: PUSH
31386: FOR_IN
31387: IFFALSE 31420
// if not i in fac_list then
31389: LD_VAR 0 8
31393: PUSH
31394: LD_VAR 0 17
31398: IN
31399: NOT
31400: IFFALSE 31418
// list := list diff i ;
31402: LD_ADDR_VAR 0 5
31406: PUSH
31407: LD_VAR 0 5
31411: PUSH
31412: LD_VAR 0 8
31416: DIFF
31417: ST_TO_ADDR
31418: GO 31386
31420: POP
31421: POP
// if not list then
31422: LD_VAR 0 5
31426: NOT
31427: IFFALSE 31431
// exit ;
31429: GO 32235
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31431: LD_VAR 0 12
31435: PUSH
31436: LD_INT 3
31438: EQUAL
31439: PUSH
31440: LD_INT 49
31442: PUSH
31443: LD_VAR 0 5
31447: IN
31448: AND
31449: PUSH
31450: LD_INT 31
31452: PPUSH
31453: LD_VAR 0 16
31457: PPUSH
31458: CALL_OW 321
31462: PUSH
31463: LD_INT 2
31465: EQUAL
31466: AND
31467: IFFALSE 31527
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31469: LD_INT 22
31471: PUSH
31472: LD_VAR 0 16
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 35
31483: PUSH
31484: LD_INT 49
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 91
31493: PUSH
31494: LD_VAR 0 1
31498: PUSH
31499: LD_INT 10
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: LIST
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: LIST
31511: PPUSH
31512: CALL_OW 69
31516: NOT
31517: IFFALSE 31527
// weapon := ru_time_lapser ;
31519: LD_ADDR_VAR 0 18
31523: PUSH
31524: LD_INT 49
31526: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31527: LD_VAR 0 12
31531: PUSH
31532: LD_INT 1
31534: PUSH
31535: LD_INT 2
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: IN
31542: PUSH
31543: LD_INT 11
31545: PUSH
31546: LD_VAR 0 5
31550: IN
31551: PUSH
31552: LD_INT 30
31554: PUSH
31555: LD_VAR 0 5
31559: IN
31560: OR
31561: AND
31562: PUSH
31563: LD_INT 6
31565: PPUSH
31566: LD_VAR 0 16
31570: PPUSH
31571: CALL_OW 321
31575: PUSH
31576: LD_INT 2
31578: EQUAL
31579: AND
31580: IFFALSE 31745
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31582: LD_INT 22
31584: PUSH
31585: LD_VAR 0 16
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 2
31596: PUSH
31597: LD_INT 35
31599: PUSH
31600: LD_INT 11
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 35
31609: PUSH
31610: LD_INT 30
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 91
31624: PUSH
31625: LD_VAR 0 1
31629: PUSH
31630: LD_INT 18
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: LIST
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: LIST
31642: PPUSH
31643: CALL_OW 69
31647: NOT
31648: PUSH
31649: LD_INT 22
31651: PUSH
31652: LD_VAR 0 16
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 2
31663: PUSH
31664: LD_INT 30
31666: PUSH
31667: LD_INT 32
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 30
31676: PUSH
31677: LD_INT 33
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 91
31691: PUSH
31692: LD_VAR 0 1
31696: PUSH
31697: LD_INT 12
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: LIST
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: LIST
31709: PUSH
31710: EMPTY
31711: LIST
31712: PPUSH
31713: CALL_OW 69
31717: PUSH
31718: LD_INT 2
31720: GREATER
31721: AND
31722: IFFALSE 31745
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31724: LD_ADDR_VAR 0 18
31728: PUSH
31729: LD_INT 11
31731: PUSH
31732: LD_INT 30
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_VAR 0 12
31743: ARRAY
31744: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31745: LD_VAR 0 18
31749: NOT
31750: PUSH
31751: LD_INT 40
31753: PPUSH
31754: LD_VAR 0 16
31758: PPUSH
31759: CALL_OW 321
31763: PUSH
31764: LD_INT 2
31766: EQUAL
31767: AND
31768: PUSH
31769: LD_INT 7
31771: PUSH
31772: LD_VAR 0 5
31776: IN
31777: PUSH
31778: LD_INT 28
31780: PUSH
31781: LD_VAR 0 5
31785: IN
31786: OR
31787: PUSH
31788: LD_INT 45
31790: PUSH
31791: LD_VAR 0 5
31795: IN
31796: OR
31797: AND
31798: IFFALSE 32052
// begin hex := GetHexInfo ( x , y ) ;
31800: LD_ADDR_VAR 0 4
31804: PUSH
31805: LD_VAR 0 10
31809: PPUSH
31810: LD_VAR 0 11
31814: PPUSH
31815: CALL_OW 546
31819: ST_TO_ADDR
// if hex [ 1 ] then
31820: LD_VAR 0 4
31824: PUSH
31825: LD_INT 1
31827: ARRAY
31828: IFFALSE 31832
// exit ;
31830: GO 32235
// height := hex [ 2 ] ;
31832: LD_ADDR_VAR 0 15
31836: PUSH
31837: LD_VAR 0 4
31841: PUSH
31842: LD_INT 2
31844: ARRAY
31845: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31846: LD_ADDR_VAR 0 14
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: LD_INT 2
31856: PUSH
31857: LD_INT 3
31859: PUSH
31860: LD_INT 5
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: ST_TO_ADDR
// for i in tmp do
31869: LD_ADDR_VAR 0 8
31873: PUSH
31874: LD_VAR 0 14
31878: PUSH
31879: FOR_IN
31880: IFFALSE 32050
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31882: LD_ADDR_VAR 0 9
31886: PUSH
31887: LD_VAR 0 10
31891: PPUSH
31892: LD_VAR 0 8
31896: PPUSH
31897: LD_INT 5
31899: PPUSH
31900: CALL_OW 272
31904: PUSH
31905: LD_VAR 0 11
31909: PPUSH
31910: LD_VAR 0 8
31914: PPUSH
31915: LD_INT 5
31917: PPUSH
31918: CALL_OW 273
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31927: LD_VAR 0 9
31931: PUSH
31932: LD_INT 1
31934: ARRAY
31935: PPUSH
31936: LD_VAR 0 9
31940: PUSH
31941: LD_INT 2
31943: ARRAY
31944: PPUSH
31945: CALL_OW 488
31949: IFFALSE 32048
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31951: LD_ADDR_VAR 0 4
31955: PUSH
31956: LD_VAR 0 9
31960: PUSH
31961: LD_INT 1
31963: ARRAY
31964: PPUSH
31965: LD_VAR 0 9
31969: PUSH
31970: LD_INT 2
31972: ARRAY
31973: PPUSH
31974: CALL_OW 546
31978: ST_TO_ADDR
// if hex [ 1 ] then
31979: LD_VAR 0 4
31983: PUSH
31984: LD_INT 1
31986: ARRAY
31987: IFFALSE 31991
// continue ;
31989: GO 31879
// h := hex [ 2 ] ;
31991: LD_ADDR_VAR 0 13
31995: PUSH
31996: LD_VAR 0 4
32000: PUSH
32001: LD_INT 2
32003: ARRAY
32004: ST_TO_ADDR
// if h + 7 < height then
32005: LD_VAR 0 13
32009: PUSH
32010: LD_INT 7
32012: PLUS
32013: PUSH
32014: LD_VAR 0 15
32018: LESS
32019: IFFALSE 32048
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32021: LD_ADDR_VAR 0 18
32025: PUSH
32026: LD_INT 7
32028: PUSH
32029: LD_INT 28
32031: PUSH
32032: LD_INT 45
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: LIST
32039: PUSH
32040: LD_VAR 0 12
32044: ARRAY
32045: ST_TO_ADDR
// break ;
32046: GO 32050
// end ; end ; end ;
32048: GO 31879
32050: POP
32051: POP
// end ; if not weapon then
32052: LD_VAR 0 18
32056: NOT
32057: IFFALSE 32117
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32059: LD_ADDR_VAR 0 5
32063: PUSH
32064: LD_VAR 0 5
32068: PUSH
32069: LD_INT 11
32071: PUSH
32072: LD_INT 30
32074: PUSH
32075: LD_INT 49
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: DIFF
32083: ST_TO_ADDR
// if not list then
32084: LD_VAR 0 5
32088: NOT
32089: IFFALSE 32093
// exit ;
32091: GO 32235
// weapon := list [ rand ( 1 , list ) ] ;
32093: LD_ADDR_VAR 0 18
32097: PUSH
32098: LD_VAR 0 5
32102: PUSH
32103: LD_INT 1
32105: PPUSH
32106: LD_VAR 0 5
32110: PPUSH
32111: CALL_OW 12
32115: ARRAY
32116: ST_TO_ADDR
// end ; if weapon then
32117: LD_VAR 0 18
32121: IFFALSE 32235
// begin tmp := CostOfWeapon ( weapon ) ;
32123: LD_ADDR_VAR 0 14
32127: PUSH
32128: LD_VAR 0 18
32132: PPUSH
32133: CALL_OW 451
32137: ST_TO_ADDR
// j := GetBase ( tower ) ;
32138: LD_ADDR_VAR 0 9
32142: PUSH
32143: LD_VAR 0 1
32147: PPUSH
32148: CALL_OW 274
32152: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32153: LD_VAR 0 9
32157: PPUSH
32158: LD_INT 1
32160: PPUSH
32161: CALL_OW 275
32165: PUSH
32166: LD_VAR 0 14
32170: PUSH
32171: LD_INT 1
32173: ARRAY
32174: GREATEREQUAL
32175: PUSH
32176: LD_VAR 0 9
32180: PPUSH
32181: LD_INT 2
32183: PPUSH
32184: CALL_OW 275
32188: PUSH
32189: LD_VAR 0 14
32193: PUSH
32194: LD_INT 2
32196: ARRAY
32197: GREATEREQUAL
32198: AND
32199: PUSH
32200: LD_VAR 0 9
32204: PPUSH
32205: LD_INT 3
32207: PPUSH
32208: CALL_OW 275
32212: PUSH
32213: LD_VAR 0 14
32217: PUSH
32218: LD_INT 3
32220: ARRAY
32221: GREATEREQUAL
32222: AND
32223: IFFALSE 32235
// result := weapon ;
32225: LD_ADDR_VAR 0 3
32229: PUSH
32230: LD_VAR 0 18
32234: ST_TO_ADDR
// end ; end ;
32235: LD_VAR 0 3
32239: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32240: LD_INT 0
32242: PPUSH
32243: PPUSH
// result := true ;
32244: LD_ADDR_VAR 0 3
32248: PUSH
32249: LD_INT 1
32251: ST_TO_ADDR
// if array1 = array2 then
32252: LD_VAR 0 1
32256: PUSH
32257: LD_VAR 0 2
32261: EQUAL
32262: IFFALSE 32322
// begin for i = 1 to array1 do
32264: LD_ADDR_VAR 0 4
32268: PUSH
32269: DOUBLE
32270: LD_INT 1
32272: DEC
32273: ST_TO_ADDR
32274: LD_VAR 0 1
32278: PUSH
32279: FOR_TO
32280: IFFALSE 32318
// if array1 [ i ] <> array2 [ i ] then
32282: LD_VAR 0 1
32286: PUSH
32287: LD_VAR 0 4
32291: ARRAY
32292: PUSH
32293: LD_VAR 0 2
32297: PUSH
32298: LD_VAR 0 4
32302: ARRAY
32303: NONEQUAL
32304: IFFALSE 32316
// begin result := false ;
32306: LD_ADDR_VAR 0 3
32310: PUSH
32311: LD_INT 0
32313: ST_TO_ADDR
// break ;
32314: GO 32318
// end ;
32316: GO 32279
32318: POP
32319: POP
// end else
32320: GO 32330
// result := false ;
32322: LD_ADDR_VAR 0 3
32326: PUSH
32327: LD_INT 0
32329: ST_TO_ADDR
// end ;
32330: LD_VAR 0 3
32334: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32335: LD_INT 0
32337: PPUSH
32338: PPUSH
32339: PPUSH
// pom := GetBase ( fac ) ;
32340: LD_ADDR_VAR 0 5
32344: PUSH
32345: LD_VAR 0 1
32349: PPUSH
32350: CALL_OW 274
32354: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32355: LD_ADDR_VAR 0 4
32359: PUSH
32360: LD_VAR 0 2
32364: PUSH
32365: LD_INT 1
32367: ARRAY
32368: PPUSH
32369: LD_VAR 0 2
32373: PUSH
32374: LD_INT 2
32376: ARRAY
32377: PPUSH
32378: LD_VAR 0 2
32382: PUSH
32383: LD_INT 3
32385: ARRAY
32386: PPUSH
32387: LD_VAR 0 2
32391: PUSH
32392: LD_INT 4
32394: ARRAY
32395: PPUSH
32396: CALL_OW 449
32400: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32401: LD_ADDR_VAR 0 3
32405: PUSH
32406: LD_VAR 0 5
32410: PPUSH
32411: LD_INT 1
32413: PPUSH
32414: CALL_OW 275
32418: PUSH
32419: LD_VAR 0 4
32423: PUSH
32424: LD_INT 1
32426: ARRAY
32427: GREATEREQUAL
32428: PUSH
32429: LD_VAR 0 5
32433: PPUSH
32434: LD_INT 2
32436: PPUSH
32437: CALL_OW 275
32441: PUSH
32442: LD_VAR 0 4
32446: PUSH
32447: LD_INT 2
32449: ARRAY
32450: GREATEREQUAL
32451: AND
32452: PUSH
32453: LD_VAR 0 5
32457: PPUSH
32458: LD_INT 3
32460: PPUSH
32461: CALL_OW 275
32465: PUSH
32466: LD_VAR 0 4
32470: PUSH
32471: LD_INT 3
32473: ARRAY
32474: GREATEREQUAL
32475: AND
32476: ST_TO_ADDR
// end ;
32477: LD_VAR 0 3
32481: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32482: LD_INT 0
32484: PPUSH
32485: PPUSH
32486: PPUSH
32487: PPUSH
// pom := GetBase ( building ) ;
32488: LD_ADDR_VAR 0 3
32492: PUSH
32493: LD_VAR 0 1
32497: PPUSH
32498: CALL_OW 274
32502: ST_TO_ADDR
// if not pom then
32503: LD_VAR 0 3
32507: NOT
32508: IFFALSE 32512
// exit ;
32510: GO 32682
// btype := GetBType ( building ) ;
32512: LD_ADDR_VAR 0 5
32516: PUSH
32517: LD_VAR 0 1
32521: PPUSH
32522: CALL_OW 266
32526: ST_TO_ADDR
// if btype = b_armoury then
32527: LD_VAR 0 5
32531: PUSH
32532: LD_INT 4
32534: EQUAL
32535: IFFALSE 32545
// btype := b_barracks ;
32537: LD_ADDR_VAR 0 5
32541: PUSH
32542: LD_INT 5
32544: ST_TO_ADDR
// if btype = b_depot then
32545: LD_VAR 0 5
32549: PUSH
32550: LD_INT 0
32552: EQUAL
32553: IFFALSE 32563
// btype := b_warehouse ;
32555: LD_ADDR_VAR 0 5
32559: PUSH
32560: LD_INT 1
32562: ST_TO_ADDR
// if btype = b_workshop then
32563: LD_VAR 0 5
32567: PUSH
32568: LD_INT 2
32570: EQUAL
32571: IFFALSE 32581
// btype := b_factory ;
32573: LD_ADDR_VAR 0 5
32577: PUSH
32578: LD_INT 3
32580: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32581: LD_ADDR_VAR 0 4
32585: PUSH
32586: LD_VAR 0 5
32590: PPUSH
32591: LD_VAR 0 1
32595: PPUSH
32596: CALL_OW 248
32600: PPUSH
32601: CALL_OW 450
32605: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32606: LD_ADDR_VAR 0 2
32610: PUSH
32611: LD_VAR 0 3
32615: PPUSH
32616: LD_INT 1
32618: PPUSH
32619: CALL_OW 275
32623: PUSH
32624: LD_VAR 0 4
32628: PUSH
32629: LD_INT 1
32631: ARRAY
32632: GREATEREQUAL
32633: PUSH
32634: LD_VAR 0 3
32638: PPUSH
32639: LD_INT 2
32641: PPUSH
32642: CALL_OW 275
32646: PUSH
32647: LD_VAR 0 4
32651: PUSH
32652: LD_INT 2
32654: ARRAY
32655: GREATEREQUAL
32656: AND
32657: PUSH
32658: LD_VAR 0 3
32662: PPUSH
32663: LD_INT 3
32665: PPUSH
32666: CALL_OW 275
32670: PUSH
32671: LD_VAR 0 4
32675: PUSH
32676: LD_INT 3
32678: ARRAY
32679: GREATEREQUAL
32680: AND
32681: ST_TO_ADDR
// end ;
32682: LD_VAR 0 2
32686: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32687: LD_INT 0
32689: PPUSH
32690: PPUSH
32691: PPUSH
// pom := GetBase ( building ) ;
32692: LD_ADDR_VAR 0 4
32696: PUSH
32697: LD_VAR 0 1
32701: PPUSH
32702: CALL_OW 274
32706: ST_TO_ADDR
// if not pom then
32707: LD_VAR 0 4
32711: NOT
32712: IFFALSE 32716
// exit ;
32714: GO 32817
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32716: LD_ADDR_VAR 0 5
32720: PUSH
32721: LD_VAR 0 2
32725: PPUSH
32726: LD_VAR 0 1
32730: PPUSH
32731: CALL_OW 248
32735: PPUSH
32736: CALL_OW 450
32740: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32741: LD_ADDR_VAR 0 3
32745: PUSH
32746: LD_VAR 0 4
32750: PPUSH
32751: LD_INT 1
32753: PPUSH
32754: CALL_OW 275
32758: PUSH
32759: LD_VAR 0 5
32763: PUSH
32764: LD_INT 1
32766: ARRAY
32767: GREATEREQUAL
32768: PUSH
32769: LD_VAR 0 4
32773: PPUSH
32774: LD_INT 2
32776: PPUSH
32777: CALL_OW 275
32781: PUSH
32782: LD_VAR 0 5
32786: PUSH
32787: LD_INT 2
32789: ARRAY
32790: GREATEREQUAL
32791: AND
32792: PUSH
32793: LD_VAR 0 4
32797: PPUSH
32798: LD_INT 3
32800: PPUSH
32801: CALL_OW 275
32805: PUSH
32806: LD_VAR 0 5
32810: PUSH
32811: LD_INT 3
32813: ARRAY
32814: GREATEREQUAL
32815: AND
32816: ST_TO_ADDR
// end ;
32817: LD_VAR 0 3
32821: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32822: LD_INT 0
32824: PPUSH
32825: PPUSH
32826: PPUSH
32827: PPUSH
32828: PPUSH
32829: PPUSH
32830: PPUSH
32831: PPUSH
32832: PPUSH
32833: PPUSH
// result := false ;
32834: LD_ADDR_VAR 0 6
32838: PUSH
32839: LD_INT 0
32841: ST_TO_ADDR
// if not base or not btype or not x or not y then
32842: LD_VAR 0 1
32846: NOT
32847: PUSH
32848: LD_VAR 0 2
32852: NOT
32853: OR
32854: PUSH
32855: LD_VAR 0 3
32859: NOT
32860: OR
32861: PUSH
32862: LD_VAR 0 4
32866: NOT
32867: OR
32868: IFFALSE 32872
// exit ;
32870: GO 33481
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32872: LD_ADDR_VAR 0 12
32876: PUSH
32877: LD_VAR 0 2
32881: PPUSH
32882: LD_VAR 0 3
32886: PPUSH
32887: LD_VAR 0 4
32891: PPUSH
32892: LD_VAR 0 5
32896: PPUSH
32897: LD_VAR 0 1
32901: PUSH
32902: LD_INT 1
32904: ARRAY
32905: PPUSH
32906: CALL_OW 248
32910: PPUSH
32911: LD_INT 0
32913: PPUSH
32914: CALL 34318 0 6
32918: ST_TO_ADDR
// if not hexes then
32919: LD_VAR 0 12
32923: NOT
32924: IFFALSE 32928
// exit ;
32926: GO 33481
// for i = 1 to hexes do
32928: LD_ADDR_VAR 0 7
32932: PUSH
32933: DOUBLE
32934: LD_INT 1
32936: DEC
32937: ST_TO_ADDR
32938: LD_VAR 0 12
32942: PUSH
32943: FOR_TO
32944: IFFALSE 33479
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32946: LD_ADDR_VAR 0 11
32950: PUSH
32951: LD_VAR 0 12
32955: PUSH
32956: LD_VAR 0 7
32960: ARRAY
32961: PUSH
32962: LD_INT 1
32964: ARRAY
32965: PPUSH
32966: LD_VAR 0 12
32970: PUSH
32971: LD_VAR 0 7
32975: ARRAY
32976: PUSH
32977: LD_INT 2
32979: ARRAY
32980: PPUSH
32981: CALL_OW 428
32985: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32986: LD_VAR 0 12
32990: PUSH
32991: LD_VAR 0 7
32995: ARRAY
32996: PUSH
32997: LD_INT 1
32999: ARRAY
33000: PPUSH
33001: LD_VAR 0 12
33005: PUSH
33006: LD_VAR 0 7
33010: ARRAY
33011: PUSH
33012: LD_INT 2
33014: ARRAY
33015: PPUSH
33016: CALL_OW 351
33020: PUSH
33021: LD_VAR 0 12
33025: PUSH
33026: LD_VAR 0 7
33030: ARRAY
33031: PUSH
33032: LD_INT 1
33034: ARRAY
33035: PPUSH
33036: LD_VAR 0 12
33040: PUSH
33041: LD_VAR 0 7
33045: ARRAY
33046: PUSH
33047: LD_INT 2
33049: ARRAY
33050: PPUSH
33051: CALL_OW 488
33055: NOT
33056: OR
33057: PUSH
33058: LD_VAR 0 11
33062: PPUSH
33063: CALL_OW 247
33067: PUSH
33068: LD_INT 3
33070: EQUAL
33071: OR
33072: IFFALSE 33078
// exit ;
33074: POP
33075: POP
33076: GO 33481
// if not tmp or not tmp in base then
33078: LD_VAR 0 11
33082: NOT
33083: PUSH
33084: LD_VAR 0 11
33088: PUSH
33089: LD_VAR 0 1
33093: IN
33094: NOT
33095: OR
33096: IFFALSE 33100
// continue ;
33098: GO 32943
// result := true ;
33100: LD_ADDR_VAR 0 6
33104: PUSH
33105: LD_INT 1
33107: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33108: LD_ADDR_VAR 0 15
33112: PUSH
33113: LD_VAR 0 1
33117: PPUSH
33118: LD_INT 22
33120: PUSH
33121: LD_VAR 0 11
33125: PPUSH
33126: CALL_OW 255
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 2
33137: PUSH
33138: LD_INT 30
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 30
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: LIST
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PPUSH
33167: CALL_OW 72
33171: ST_TO_ADDR
// if dep then
33172: LD_VAR 0 15
33176: IFFALSE 33312
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33178: LD_ADDR_VAR 0 14
33182: PUSH
33183: LD_VAR 0 15
33187: PUSH
33188: LD_INT 1
33190: ARRAY
33191: PPUSH
33192: CALL_OW 250
33196: PPUSH
33197: LD_VAR 0 15
33201: PUSH
33202: LD_INT 1
33204: ARRAY
33205: PPUSH
33206: CALL_OW 254
33210: PPUSH
33211: LD_INT 5
33213: PPUSH
33214: CALL_OW 272
33218: PUSH
33219: LD_VAR 0 15
33223: PUSH
33224: LD_INT 1
33226: ARRAY
33227: PPUSH
33228: CALL_OW 251
33232: PPUSH
33233: LD_VAR 0 15
33237: PUSH
33238: LD_INT 1
33240: ARRAY
33241: PPUSH
33242: CALL_OW 254
33246: PPUSH
33247: LD_INT 5
33249: PPUSH
33250: CALL_OW 273
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33259: LD_VAR 0 14
33263: PUSH
33264: LD_INT 1
33266: ARRAY
33267: PPUSH
33268: LD_VAR 0 14
33272: PUSH
33273: LD_INT 2
33275: ARRAY
33276: PPUSH
33277: CALL_OW 488
33281: IFFALSE 33312
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33283: LD_VAR 0 11
33287: PPUSH
33288: LD_VAR 0 14
33292: PUSH
33293: LD_INT 1
33295: ARRAY
33296: PPUSH
33297: LD_VAR 0 14
33301: PUSH
33302: LD_INT 2
33304: ARRAY
33305: PPUSH
33306: CALL_OW 111
// continue ;
33310: GO 32943
// end ; end ; r := GetDir ( tmp ) ;
33312: LD_ADDR_VAR 0 13
33316: PUSH
33317: LD_VAR 0 11
33321: PPUSH
33322: CALL_OW 254
33326: ST_TO_ADDR
// if r = 5 then
33327: LD_VAR 0 13
33331: PUSH
33332: LD_INT 5
33334: EQUAL
33335: IFFALSE 33345
// r := 0 ;
33337: LD_ADDR_VAR 0 13
33341: PUSH
33342: LD_INT 0
33344: ST_TO_ADDR
// for j = r to 5 do
33345: LD_ADDR_VAR 0 8
33349: PUSH
33350: DOUBLE
33351: LD_VAR 0 13
33355: DEC
33356: ST_TO_ADDR
33357: LD_INT 5
33359: PUSH
33360: FOR_TO
33361: IFFALSE 33475
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33363: LD_ADDR_VAR 0 9
33367: PUSH
33368: LD_VAR 0 11
33372: PPUSH
33373: CALL_OW 250
33377: PPUSH
33378: LD_VAR 0 8
33382: PPUSH
33383: LD_INT 2
33385: PPUSH
33386: CALL_OW 272
33390: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33391: LD_ADDR_VAR 0 10
33395: PUSH
33396: LD_VAR 0 11
33400: PPUSH
33401: CALL_OW 251
33405: PPUSH
33406: LD_VAR 0 8
33410: PPUSH
33411: LD_INT 2
33413: PPUSH
33414: CALL_OW 273
33418: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33419: LD_VAR 0 9
33423: PPUSH
33424: LD_VAR 0 10
33428: PPUSH
33429: CALL_OW 488
33433: PUSH
33434: LD_VAR 0 9
33438: PPUSH
33439: LD_VAR 0 10
33443: PPUSH
33444: CALL_OW 428
33448: NOT
33449: AND
33450: IFFALSE 33473
// begin ComMoveXY ( tmp , _x , _y ) ;
33452: LD_VAR 0 11
33456: PPUSH
33457: LD_VAR 0 9
33461: PPUSH
33462: LD_VAR 0 10
33466: PPUSH
33467: CALL_OW 111
// break ;
33471: GO 33475
// end ; end ;
33473: GO 33360
33475: POP
33476: POP
// end ;
33477: GO 32943
33479: POP
33480: POP
// end ;
33481: LD_VAR 0 6
33485: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33486: LD_INT 0
33488: PPUSH
33489: PPUSH
33490: PPUSH
33491: PPUSH
33492: PPUSH
33493: PPUSH
33494: PPUSH
33495: PPUSH
33496: PPUSH
33497: PPUSH
// result := false ;
33498: LD_ADDR_VAR 0 6
33502: PUSH
33503: LD_INT 0
33505: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33506: LD_VAR 0 1
33510: NOT
33511: PUSH
33512: LD_VAR 0 1
33516: PPUSH
33517: CALL_OW 266
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 1
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: IN
33532: NOT
33533: OR
33534: PUSH
33535: LD_VAR 0 2
33539: NOT
33540: OR
33541: PUSH
33542: LD_VAR 0 5
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: LD_INT 2
33555: PUSH
33556: LD_INT 3
33558: PUSH
33559: LD_INT 4
33561: PUSH
33562: LD_INT 5
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: IN
33573: NOT
33574: OR
33575: PUSH
33576: LD_VAR 0 3
33580: PPUSH
33581: LD_VAR 0 4
33585: PPUSH
33586: CALL_OW 488
33590: NOT
33591: OR
33592: IFFALSE 33596
// exit ;
33594: GO 34313
// pom := GetBase ( depot ) ;
33596: LD_ADDR_VAR 0 10
33600: PUSH
33601: LD_VAR 0 1
33605: PPUSH
33606: CALL_OW 274
33610: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33611: LD_ADDR_VAR 0 11
33615: PUSH
33616: LD_VAR 0 2
33620: PPUSH
33621: LD_VAR 0 1
33625: PPUSH
33626: CALL_OW 248
33630: PPUSH
33631: CALL_OW 450
33635: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33636: LD_VAR 0 10
33640: PPUSH
33641: LD_INT 1
33643: PPUSH
33644: CALL_OW 275
33648: PUSH
33649: LD_VAR 0 11
33653: PUSH
33654: LD_INT 1
33656: ARRAY
33657: GREATEREQUAL
33658: PUSH
33659: LD_VAR 0 10
33663: PPUSH
33664: LD_INT 2
33666: PPUSH
33667: CALL_OW 275
33671: PUSH
33672: LD_VAR 0 11
33676: PUSH
33677: LD_INT 2
33679: ARRAY
33680: GREATEREQUAL
33681: AND
33682: PUSH
33683: LD_VAR 0 10
33687: PPUSH
33688: LD_INT 3
33690: PPUSH
33691: CALL_OW 275
33695: PUSH
33696: LD_VAR 0 11
33700: PUSH
33701: LD_INT 3
33703: ARRAY
33704: GREATEREQUAL
33705: AND
33706: NOT
33707: IFFALSE 33711
// exit ;
33709: GO 34313
// if GetBType ( depot ) = b_depot then
33711: LD_VAR 0 1
33715: PPUSH
33716: CALL_OW 266
33720: PUSH
33721: LD_INT 0
33723: EQUAL
33724: IFFALSE 33736
// dist := 28 else
33726: LD_ADDR_VAR 0 14
33730: PUSH
33731: LD_INT 28
33733: ST_TO_ADDR
33734: GO 33744
// dist := 36 ;
33736: LD_ADDR_VAR 0 14
33740: PUSH
33741: LD_INT 36
33743: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33744: LD_VAR 0 1
33748: PPUSH
33749: LD_VAR 0 3
33753: PPUSH
33754: LD_VAR 0 4
33758: PPUSH
33759: CALL_OW 297
33763: PUSH
33764: LD_VAR 0 14
33768: GREATER
33769: IFFALSE 33773
// exit ;
33771: GO 34313
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33773: LD_ADDR_VAR 0 12
33777: PUSH
33778: LD_VAR 0 2
33782: PPUSH
33783: LD_VAR 0 3
33787: PPUSH
33788: LD_VAR 0 4
33792: PPUSH
33793: LD_VAR 0 5
33797: PPUSH
33798: LD_VAR 0 1
33802: PPUSH
33803: CALL_OW 248
33807: PPUSH
33808: LD_INT 0
33810: PPUSH
33811: CALL 34318 0 6
33815: ST_TO_ADDR
// if not hexes then
33816: LD_VAR 0 12
33820: NOT
33821: IFFALSE 33825
// exit ;
33823: GO 34313
// hex := GetHexInfo ( x , y ) ;
33825: LD_ADDR_VAR 0 15
33829: PUSH
33830: LD_VAR 0 3
33834: PPUSH
33835: LD_VAR 0 4
33839: PPUSH
33840: CALL_OW 546
33844: ST_TO_ADDR
// if hex [ 1 ] then
33845: LD_VAR 0 15
33849: PUSH
33850: LD_INT 1
33852: ARRAY
33853: IFFALSE 33857
// exit ;
33855: GO 34313
// height := hex [ 2 ] ;
33857: LD_ADDR_VAR 0 13
33861: PUSH
33862: LD_VAR 0 15
33866: PUSH
33867: LD_INT 2
33869: ARRAY
33870: ST_TO_ADDR
// for i = 1 to hexes do
33871: LD_ADDR_VAR 0 7
33875: PUSH
33876: DOUBLE
33877: LD_INT 1
33879: DEC
33880: ST_TO_ADDR
33881: LD_VAR 0 12
33885: PUSH
33886: FOR_TO
33887: IFFALSE 34217
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33889: LD_VAR 0 12
33893: PUSH
33894: LD_VAR 0 7
33898: ARRAY
33899: PUSH
33900: LD_INT 1
33902: ARRAY
33903: PPUSH
33904: LD_VAR 0 12
33908: PUSH
33909: LD_VAR 0 7
33913: ARRAY
33914: PUSH
33915: LD_INT 2
33917: ARRAY
33918: PPUSH
33919: CALL_OW 488
33923: NOT
33924: PUSH
33925: LD_VAR 0 12
33929: PUSH
33930: LD_VAR 0 7
33934: ARRAY
33935: PUSH
33936: LD_INT 1
33938: ARRAY
33939: PPUSH
33940: LD_VAR 0 12
33944: PUSH
33945: LD_VAR 0 7
33949: ARRAY
33950: PUSH
33951: LD_INT 2
33953: ARRAY
33954: PPUSH
33955: CALL_OW 428
33959: PUSH
33960: LD_INT 0
33962: GREATER
33963: OR
33964: PUSH
33965: LD_VAR 0 12
33969: PUSH
33970: LD_VAR 0 7
33974: ARRAY
33975: PUSH
33976: LD_INT 1
33978: ARRAY
33979: PPUSH
33980: LD_VAR 0 12
33984: PUSH
33985: LD_VAR 0 7
33989: ARRAY
33990: PUSH
33991: LD_INT 2
33993: ARRAY
33994: PPUSH
33995: CALL_OW 351
33999: OR
34000: IFFALSE 34006
// exit ;
34002: POP
34003: POP
34004: GO 34313
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34006: LD_ADDR_VAR 0 8
34010: PUSH
34011: LD_VAR 0 12
34015: PUSH
34016: LD_VAR 0 7
34020: ARRAY
34021: PUSH
34022: LD_INT 1
34024: ARRAY
34025: PPUSH
34026: LD_VAR 0 12
34030: PUSH
34031: LD_VAR 0 7
34035: ARRAY
34036: PUSH
34037: LD_INT 2
34039: ARRAY
34040: PPUSH
34041: CALL_OW 546
34045: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34046: LD_VAR 0 8
34050: PUSH
34051: LD_INT 1
34053: ARRAY
34054: PUSH
34055: LD_VAR 0 8
34059: PUSH
34060: LD_INT 2
34062: ARRAY
34063: PUSH
34064: LD_VAR 0 13
34068: PUSH
34069: LD_INT 2
34071: PLUS
34072: GREATER
34073: OR
34074: PUSH
34075: LD_VAR 0 8
34079: PUSH
34080: LD_INT 2
34082: ARRAY
34083: PUSH
34084: LD_VAR 0 13
34088: PUSH
34089: LD_INT 2
34091: MINUS
34092: LESS
34093: OR
34094: PUSH
34095: LD_VAR 0 8
34099: PUSH
34100: LD_INT 3
34102: ARRAY
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: LD_INT 8
34109: PUSH
34110: LD_INT 9
34112: PUSH
34113: LD_INT 10
34115: PUSH
34116: LD_INT 11
34118: PUSH
34119: LD_INT 12
34121: PUSH
34122: LD_INT 13
34124: PUSH
34125: LD_INT 16
34127: PUSH
34128: LD_INT 17
34130: PUSH
34131: LD_INT 18
34133: PUSH
34134: LD_INT 19
34136: PUSH
34137: LD_INT 20
34139: PUSH
34140: LD_INT 21
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: IN
34158: NOT
34159: OR
34160: PUSH
34161: LD_VAR 0 8
34165: PUSH
34166: LD_INT 5
34168: ARRAY
34169: NOT
34170: OR
34171: PUSH
34172: LD_VAR 0 8
34176: PUSH
34177: LD_INT 6
34179: ARRAY
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: LD_INT 2
34186: PUSH
34187: LD_INT 7
34189: PUSH
34190: LD_INT 9
34192: PUSH
34193: LD_INT 10
34195: PUSH
34196: LD_INT 11
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: IN
34207: NOT
34208: OR
34209: IFFALSE 34215
// exit ;
34211: POP
34212: POP
34213: GO 34313
// end ;
34215: GO 33886
34217: POP
34218: POP
// side := GetSide ( depot ) ;
34219: LD_ADDR_VAR 0 9
34223: PUSH
34224: LD_VAR 0 1
34228: PPUSH
34229: CALL_OW 255
34233: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34234: LD_VAR 0 9
34238: PPUSH
34239: LD_VAR 0 3
34243: PPUSH
34244: LD_VAR 0 4
34248: PPUSH
34249: LD_INT 20
34251: PPUSH
34252: CALL 26967 0 4
34256: PUSH
34257: LD_INT 4
34259: ARRAY
34260: IFFALSE 34264
// exit ;
34262: GO 34313
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34264: LD_VAR 0 2
34268: PUSH
34269: LD_INT 29
34271: PUSH
34272: LD_INT 30
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: IN
34279: PUSH
34280: LD_VAR 0 3
34284: PPUSH
34285: LD_VAR 0 4
34289: PPUSH
34290: LD_VAR 0 9
34294: PPUSH
34295: CALL_OW 440
34299: NOT
34300: AND
34301: IFFALSE 34305
// exit ;
34303: GO 34313
// result := true ;
34305: LD_ADDR_VAR 0 6
34309: PUSH
34310: LD_INT 1
34312: ST_TO_ADDR
// end ;
34313: LD_VAR 0 6
34317: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34318: LD_INT 0
34320: PPUSH
34321: PPUSH
34322: PPUSH
34323: PPUSH
34324: PPUSH
34325: PPUSH
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
34330: PPUSH
34331: PPUSH
34332: PPUSH
34333: PPUSH
34334: PPUSH
34335: PPUSH
34336: PPUSH
34337: PPUSH
34338: PPUSH
34339: PPUSH
34340: PPUSH
34341: PPUSH
34342: PPUSH
34343: PPUSH
34344: PPUSH
34345: PPUSH
34346: PPUSH
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
34356: PPUSH
34357: PPUSH
34358: PPUSH
34359: PPUSH
34360: PPUSH
34361: PPUSH
34362: PPUSH
34363: PPUSH
34364: PPUSH
34365: PPUSH
34366: PPUSH
34367: PPUSH
34368: PPUSH
34369: PPUSH
34370: PPUSH
34371: PPUSH
34372: PPUSH
34373: PPUSH
34374: PPUSH
34375: PPUSH
34376: PPUSH
34377: PPUSH
// result = [ ] ;
34378: LD_ADDR_VAR 0 7
34382: PUSH
34383: EMPTY
34384: ST_TO_ADDR
// temp_list = [ ] ;
34385: LD_ADDR_VAR 0 9
34389: PUSH
34390: EMPTY
34391: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34392: LD_VAR 0 4
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: LD_INT 2
34405: PUSH
34406: LD_INT 3
34408: PUSH
34409: LD_INT 4
34411: PUSH
34412: LD_INT 5
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: IN
34423: NOT
34424: PUSH
34425: LD_VAR 0 1
34429: PUSH
34430: LD_INT 0
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: IN
34440: PUSH
34441: LD_VAR 0 5
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: LD_INT 2
34451: PUSH
34452: LD_INT 3
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: LIST
34459: IN
34460: NOT
34461: AND
34462: OR
34463: IFFALSE 34467
// exit ;
34465: GO 52858
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34467: LD_VAR 0 1
34471: PUSH
34472: LD_INT 6
34474: PUSH
34475: LD_INT 7
34477: PUSH
34478: LD_INT 8
34480: PUSH
34481: LD_INT 13
34483: PUSH
34484: LD_INT 12
34486: PUSH
34487: LD_INT 15
34489: PUSH
34490: LD_INT 11
34492: PUSH
34493: LD_INT 14
34495: PUSH
34496: LD_INT 10
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: IN
34510: IFFALSE 34520
// btype = b_lab ;
34512: LD_ADDR_VAR 0 1
34516: PUSH
34517: LD_INT 6
34519: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34520: LD_VAR 0 6
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: LIST
34538: IN
34539: NOT
34540: PUSH
34541: LD_VAR 0 1
34545: PUSH
34546: LD_INT 0
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: LD_INT 3
34557: PUSH
34558: LD_INT 6
34560: PUSH
34561: LD_INT 36
34563: PUSH
34564: LD_INT 4
34566: PUSH
34567: LD_INT 5
34569: PUSH
34570: LD_INT 31
34572: PUSH
34573: LD_INT 32
34575: PUSH
34576: LD_INT 33
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: IN
34592: NOT
34593: PUSH
34594: LD_VAR 0 6
34598: PUSH
34599: LD_INT 1
34601: EQUAL
34602: AND
34603: OR
34604: PUSH
34605: LD_VAR 0 1
34609: PUSH
34610: LD_INT 2
34612: PUSH
34613: LD_INT 3
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: IN
34620: NOT
34621: PUSH
34622: LD_VAR 0 6
34626: PUSH
34627: LD_INT 2
34629: EQUAL
34630: AND
34631: OR
34632: IFFALSE 34642
// mode = 0 ;
34634: LD_ADDR_VAR 0 6
34638: PUSH
34639: LD_INT 0
34641: ST_TO_ADDR
// case mode of 0 :
34642: LD_VAR 0 6
34646: PUSH
34647: LD_INT 0
34649: DOUBLE
34650: EQUAL
34651: IFTRUE 34655
34653: GO 46108
34655: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34656: LD_ADDR_VAR 0 11
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 1
34714: NEG
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: LD_INT 1
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: LD_INT 2
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: LD_INT 2
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 0
34781: PUSH
34782: LD_INT 2
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: LD_INT 1
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: LD_INT 3
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: LD_INT 3
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: LD_INT 2
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34849: LD_ADDR_VAR 0 12
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 0
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 1
34877: PUSH
34878: LD_INT 0
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 0
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: LD_INT 1
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 1
34930: PUSH
34931: LD_INT 1
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 2
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 1
34961: NEG
34962: PUSH
34963: LD_INT 1
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 2
34972: NEG
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 2
34983: NEG
34984: PUSH
34985: LD_INT 1
34987: NEG
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 2
34995: NEG
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 3
35006: NEG
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 3
35017: NEG
35018: PUSH
35019: LD_INT 1
35021: NEG
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35045: LD_ADDR_VAR 0 13
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: LD_INT 0
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: LD_INT 1
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 0
35093: PUSH
35094: LD_INT 1
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: NEG
35127: PUSH
35128: LD_INT 2
35130: NEG
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 2
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: LD_INT 2
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: LD_INT 2
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 2
35168: NEG
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 2
35180: NEG
35181: PUSH
35182: LD_INT 2
35184: NEG
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 2
35192: NEG
35193: PUSH
35194: LD_INT 3
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 3
35204: NEG
35205: PUSH
35206: LD_INT 2
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 3
35216: NEG
35217: PUSH
35218: LD_INT 3
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35244: LD_ADDR_VAR 0 14
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: LD_INT 0
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 1
35302: NEG
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: LD_INT 1
35317: NEG
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: NEG
35326: PUSH
35327: LD_INT 2
35329: NEG
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 0
35337: PUSH
35338: LD_INT 2
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 1
35348: PUSH
35349: LD_INT 1
35351: NEG
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: LD_INT 2
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 0
35369: PUSH
35370: LD_INT 2
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 1
35379: NEG
35380: PUSH
35381: LD_INT 1
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: LD_INT 3
35394: NEG
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 0
35402: PUSH
35403: LD_INT 3
35405: NEG
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: LD_INT 2
35416: NEG
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35440: LD_ADDR_VAR 0 15
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 0
35457: PUSH
35458: LD_INT 1
35460: NEG
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: PUSH
35469: LD_INT 0
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: LD_INT 1
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: LD_INT 1
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: LD_INT 0
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: LD_INT 1
35513: NEG
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 2
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 2
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: NEG
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: NEG
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 2
35574: NEG
35575: PUSH
35576: LD_INT 1
35578: NEG
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: PUSH
35587: LD_INT 1
35589: NEG
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 3
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 3
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35633: LD_ADDR_VAR 0 16
35637: PUSH
35638: LD_INT 0
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: LD_INT 1
35653: NEG
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: LD_INT 1
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: LD_INT 1
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 1
35691: NEG
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: LD_INT 2
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 2
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 2
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: LD_INT 2
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 2
35756: NEG
35757: PUSH
35758: LD_INT 1
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: LD_INT 2
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 3
35780: PUSH
35781: LD_INT 2
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 3
35790: PUSH
35791: LD_INT 3
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 2
35800: PUSH
35801: LD_INT 3
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35826: LD_ADDR_VAR 0 17
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: NEG
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: NEG
35908: PUSH
35909: LD_INT 2
35911: NEG
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: LD_INT 2
35922: NEG
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: LD_INT 1
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 2
35941: PUSH
35942: LD_INT 0
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 2
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: LD_INT 2
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: LD_INT 2
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: LD_INT 2
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 1
35991: NEG
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 2
36002: NEG
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 2
36013: NEG
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 2
36025: NEG
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36056: LD_ADDR_VAR 0 18
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 1
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 1
36125: NEG
36126: PUSH
36127: LD_INT 1
36129: NEG
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 1
36137: NEG
36138: PUSH
36139: LD_INT 2
36141: NEG
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 0
36149: PUSH
36150: LD_INT 2
36152: NEG
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 1
36160: PUSH
36161: LD_INT 1
36163: NEG
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 2
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 2
36181: PUSH
36182: LD_INT 1
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: LD_INT 2
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: LD_INT 2
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 2
36232: NEG
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 2
36255: NEG
36256: PUSH
36257: LD_INT 2
36259: NEG
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36286: LD_ADDR_VAR 0 19
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 1
36344: NEG
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 1
36355: NEG
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 2
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: LD_INT 2
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 2
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 1
36451: NEG
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 2
36462: NEG
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 2
36473: NEG
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 2
36485: NEG
36486: PUSH
36487: LD_INT 2
36489: NEG
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36516: LD_ADDR_VAR 0 20
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: LD_INT 1
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: LD_INT 1
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: LD_INT 2
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: LD_INT 2
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: LD_INT 2
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: NEG
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 2
36715: NEG
36716: PUSH
36717: LD_INT 2
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36746: LD_ADDR_VAR 0 21
36750: PUSH
36751: LD_INT 0
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 1
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 1
36804: NEG
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: NEG
36816: PUSH
36817: LD_INT 1
36819: NEG
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 2
36831: NEG
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: LD_INT 2
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 2
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: LD_INT 2
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 2
36922: NEG
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 2
36933: NEG
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 2
36945: NEG
36946: PUSH
36947: LD_INT 2
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36976: LD_ADDR_VAR 0 22
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: LD_INT 1
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: LD_INT 1
37049: NEG
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: LD_INT 2
37061: NEG
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: LD_INT 2
37072: NEG
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 1
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 2
37091: PUSH
37092: LD_INT 0
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 2
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: LD_INT 2
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: LD_INT 2
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 2
37152: NEG
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: NEG
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: LD_INT 2
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37206: LD_ADDR_VAR 0 23
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: LD_INT 1
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: LD_INT 1
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: LD_INT 2
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: LD_INT 2
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 2
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 2
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 2
37382: NEG
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 2
37393: NEG
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 2
37405: NEG
37406: PUSH
37407: LD_INT 2
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: NEG
37418: PUSH
37419: LD_INT 3
37421: NEG
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 3
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: LD_INT 2
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37486: LD_ADDR_VAR 0 24
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: LD_INT 1
37506: NEG
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: LD_INT 1
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 1
37544: NEG
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: PUSH
37569: LD_INT 2
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: LD_INT 2
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 2
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 2
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: LD_INT 2
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 2
37662: NEG
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 2
37673: NEG
37674: PUSH
37675: LD_INT 1
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 2
37685: NEG
37686: PUSH
37687: LD_INT 2
37689: NEG
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: LD_INT 2
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 2
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 3
37719: PUSH
37720: LD_INT 1
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 3
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37762: LD_ADDR_VAR 0 25
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: LD_INT 1
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: NEG
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: LD_INT 2
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: LD_INT 2
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 2
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: LD_INT 1
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: LD_INT 2
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 2
37938: NEG
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 2
37961: NEG
37962: PUSH
37963: LD_INT 2
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 3
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 3
37983: PUSH
37984: LD_INT 2
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 2
37993: PUSH
37994: LD_INT 3
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 1
38003: PUSH
38004: LD_INT 3
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38036: LD_ADDR_VAR 0 26
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: LD_INT 1
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: LD_INT 1
38109: NEG
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: LD_INT 2
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: LD_INT 2
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 2
38151: PUSH
38152: LD_INT 0
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: LD_INT 1
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 2
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: LD_INT 2
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 2
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 2
38212: NEG
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 2
38235: NEG
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 2
38247: PUSH
38248: LD_INT 3
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: LD_INT 3
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: LD_INT 2
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 2
38278: NEG
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38312: LD_ADDR_VAR 0 27
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: LD_INT 1
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: LD_INT 0
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: LD_INT 1
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: LD_INT 2
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: LD_INT 2
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 2
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 2
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: LD_INT 2
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: LD_INT 2
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: LD_INT 2
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 2
38488: NEG
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: LD_INT 1
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 2
38511: NEG
38512: PUSH
38513: LD_INT 2
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: NEG
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 2
38534: NEG
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 3
38545: NEG
38546: PUSH
38547: LD_INT 1
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 3
38557: NEG
38558: PUSH
38559: LD_INT 2
38561: NEG
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38592: LD_ADDR_VAR 0 28
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 1
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: LD_INT 1
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: LD_INT 2
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: LD_INT 2
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 1
38757: NEG
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 2
38768: NEG
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 2
38791: NEG
38792: PUSH
38793: LD_INT 2
38795: NEG
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 2
38803: NEG
38804: PUSH
38805: LD_INT 3
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: LD_INT 3
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 3
38827: NEG
38828: PUSH
38829: LD_INT 1
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 3
38839: NEG
38840: PUSH
38841: LD_INT 2
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38874: LD_ADDR_VAR 0 29
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: LD_INT 1
38894: NEG
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: LD_INT 1
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: LD_INT 1
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 1
38955: NEG
38956: PUSH
38957: LD_INT 2
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: LD_INT 2
38970: NEG
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: LD_INT 0
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 2
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: PUSH
39010: LD_INT 2
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: LD_INT 1
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 2
39052: NEG
39053: PUSH
39054: LD_INT 2
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 2
39064: NEG
39065: PUSH
39066: LD_INT 3
39068: NEG
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 2
39076: PUSH
39077: LD_INT 1
39079: NEG
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 3
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: LD_INT 3
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 3
39118: NEG
39119: PUSH
39120: LD_INT 2
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39153: LD_ADDR_VAR 0 30
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: LD_INT 0
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: LD_INT 2
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: LD_INT 2
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 2
39278: PUSH
39279: LD_INT 1
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: LD_INT 2
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: LD_INT 2
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 2
39319: NEG
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 2
39330: NEG
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: LD_INT 3
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 3
39365: PUSH
39366: LD_INT 2
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: LD_INT 3
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 3
39396: NEG
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39431: LD_ADDR_VAR 0 31
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: NEG
39513: PUSH
39514: LD_INT 2
39516: NEG
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 1
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: NEG
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 2
39608: NEG
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 2
39620: NEG
39621: PUSH
39622: LD_INT 3
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 2
39632: PUSH
39633: LD_INT 1
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 3
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: LD_INT 3
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 1
39663: NEG
39664: PUSH
39665: LD_INT 2
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 3
39674: NEG
39675: PUSH
39676: LD_INT 2
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39709: LD_ADDR_VAR 0 32
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: LD_INT 1
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: LD_INT 1
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 2
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 2
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: LD_INT 2
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 1
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 2
39875: NEG
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: LD_INT 1
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: LD_INT 3
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 2
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 3
39921: PUSH
39922: LD_INT 2
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: LD_INT 3
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 2
39941: NEG
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 3
39952: NEG
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39987: LD_ADDR_VAR 0 33
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: LD_INT 1
40007: NEG
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: LD_INT 0
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_INT 2
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: NEG
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 2
40165: NEG
40166: PUSH
40167: LD_INT 2
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 2
40177: NEG
40178: PUSH
40179: LD_INT 3
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 3
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: LD_INT 3
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: LD_INT 2
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 3
40231: NEG
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40266: LD_ADDR_VAR 0 34
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: NEG
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: LD_INT 2
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: LD_INT 2
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: LD_INT 2
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 2
40422: NEG
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 2
40445: NEG
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: LD_INT 3
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: LD_INT 2
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 3
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: LD_INT 3
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 2
40500: NEG
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 3
40511: NEG
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40546: LD_ADDR_VAR 0 35
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 2
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 2
40637: NEG
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40658: LD_ADDR_VAR 0 36
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: LD_INT 2
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 2
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40770: LD_ADDR_VAR 0 37
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: NEG
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40882: LD_ADDR_VAR 0 38
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 1
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 2
40973: NEG
40974: PUSH
40975: LD_INT 1
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40994: LD_ADDR_VAR 0 39
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41106: LD_ADDR_VAR 0 40
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41218: LD_ADDR_VAR 0 41
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: NEG
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 2
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: LD_INT 2
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 2
41396: NEG
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 2
41408: NEG
41409: PUSH
41410: LD_INT 3
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 2
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 3
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 3
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 3
41451: PUSH
41452: LD_INT 2
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 3
41461: PUSH
41462: LD_INT 3
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 2
41471: PUSH
41472: LD_INT 3
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 2
41481: NEG
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 3
41492: NEG
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 3
41503: NEG
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 3
41515: NEG
41516: PUSH
41517: LD_INT 2
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 3
41527: NEG
41528: PUSH
41529: LD_INT 3
41531: NEG
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41568: LD_ADDR_VAR 0 42
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 1
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 2
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: LD_INT 1
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 2
41734: NEG
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 2
41746: NEG
41747: PUSH
41748: LD_INT 2
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 2
41758: NEG
41759: PUSH
41760: LD_INT 3
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: LD_INT 3
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: LD_INT 3
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: LD_INT 2
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 3
41804: PUSH
41805: LD_INT 2
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: LD_INT 3
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: LD_INT 3
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 3
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: LD_INT 2
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 3
41865: NEG
41866: PUSH
41867: LD_INT 2
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 3
41877: NEG
41878: PUSH
41879: LD_INT 3
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41918: LD_ADDR_VAR 0 43
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 1
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 2
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 2
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 2
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 2
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 2
42084: NEG
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 2
42095: NEG
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: LD_INT 3
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: LD_INT 3
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: LD_INT 2
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 2
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 3
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 3
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 3
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: LD_INT 3
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 3
42214: NEG
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 3
42225: NEG
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42266: LD_ADDR_VAR 0 44
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: LD_INT 1
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 2
42421: NEG
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 2
42444: NEG
42445: PUSH
42446: LD_INT 2
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: LD_INT 3
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 2
42468: PUSH
42469: LD_INT 1
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 3
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 3
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 3
42499: PUSH
42500: LD_INT 2
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: LD_INT 3
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 2
42519: PUSH
42520: LD_INT 3
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 2
42529: NEG
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 3
42540: NEG
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 3
42551: NEG
42552: PUSH
42553: LD_INT 1
42555: NEG
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 3
42563: NEG
42564: PUSH
42565: LD_INT 2
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 3
42575: NEG
42576: PUSH
42577: LD_INT 3
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42616: LD_ADDR_VAR 0 45
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: LD_INT 2
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: LD_INT 2
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 2
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 2
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 2
42782: NEG
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 2
42794: NEG
42795: PUSH
42796: LD_INT 2
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: LD_INT 3
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: LD_INT 3
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: LD_INT 3
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: LD_INT 2
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 3
42852: PUSH
42853: LD_INT 2
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 3
42862: PUSH
42863: LD_INT 3
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 3
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 3
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 3
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: LD_INT 2
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 3
42913: NEG
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 3
42925: NEG
42926: PUSH
42927: LD_INT 3
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42966: LD_ADDR_VAR 0 46
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: LD_INT 0
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: LD_INT 2
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: LD_INT 3
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: LD_INT 3
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: LD_INT 2
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 2
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 3
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: LD_INT 3
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: NEG
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 3
43262: NEG
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 3
43273: NEG
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43314: LD_ADDR_VAR 0 47
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 1
43383: NEG
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: LD_INT 2
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: LD_INT 2
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 2
43441: NEG
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43465: LD_ADDR_VAR 0 48
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43612: LD_ADDR_VAR 0 49
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43756: LD_ADDR_VAR 0 50
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43900: LD_ADDR_VAR 0 51
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: NEG
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44047: LD_ADDR_VAR 0 52
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: NEG
44175: PUSH
44176: LD_INT 2
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44198: LD_ADDR_VAR 0 53
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: LD_INT 2
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 2
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 2
44374: NEG
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: LD_INT 2
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44428: LD_ADDR_VAR 0 54
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 2
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44658: LD_ADDR_VAR 0 55
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: LD_INT 2
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44888: LD_ADDR_VAR 0 56
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 2
45064: NEG
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 2
45087: NEG
45088: PUSH
45089: LD_INT 2
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45118: LD_ADDR_VAR 0 57
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: LD_INT 2
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 2
45253: PUSH
45254: LD_INT 2
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: LD_INT 2
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: NEG
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 2
45317: NEG
45318: PUSH
45319: LD_INT 2
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45348: LD_ADDR_VAR 0 58
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45578: LD_ADDR_VAR 0 59
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45666: LD_ADDR_VAR 0 60
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45754: LD_ADDR_VAR 0 61
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45842: LD_ADDR_VAR 0 62
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45930: LD_ADDR_VAR 0 63
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46018: LD_ADDR_VAR 0 64
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: ST_TO_ADDR
// end ; 1 :
46106: GO 52003
46108: LD_INT 1
46110: DOUBLE
46111: EQUAL
46112: IFTRUE 46116
46114: GO 48739
46116: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46117: LD_ADDR_VAR 0 11
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: LD_INT 3
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: LD_INT 3
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: LIST
46160: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46161: LD_ADDR_VAR 0 12
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 3
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 3
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: LIST
46201: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46202: LD_ADDR_VAR 0 13
46206: PUSH
46207: LD_INT 3
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 3
46219: PUSH
46220: LD_INT 3
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: LD_INT 3
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: LIST
46241: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46242: LD_ADDR_VAR 0 14
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 3
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 3
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: LIST
46282: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46283: LD_ADDR_VAR 0 15
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 3
46301: NEG
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 3
46312: NEG
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: LIST
46326: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46327: LD_ADDR_VAR 0 16
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: LD_INT 3
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 3
46346: NEG
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: LD_INT 3
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: LIST
46372: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46373: LD_ADDR_VAR 0 17
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: LD_INT 3
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 3
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: LIST
46416: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46417: LD_ADDR_VAR 0 18
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 3
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 3
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46458: LD_ADDR_VAR 0 19
46462: PUSH
46463: LD_INT 3
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 3
46475: PUSH
46476: LD_INT 3
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: LD_INT 3
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46498: LD_ADDR_VAR 0 20
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 3
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 3
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: LIST
46538: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46539: LD_ADDR_VAR 0 21
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 3
46557: NEG
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 3
46568: NEG
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: LIST
46582: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46583: LD_ADDR_VAR 0 22
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: LD_INT 3
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 3
46602: NEG
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 3
46614: NEG
46615: PUSH
46616: LD_INT 3
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: LIST
46628: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46629: LD_ADDR_VAR 0 23
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 3
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 4
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 3
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: LIST
46672: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46673: LD_ADDR_VAR 0 24
46677: PUSH
46678: LD_INT 3
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 3
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 4
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: LIST
46713: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46714: LD_ADDR_VAR 0 25
46718: PUSH
46719: LD_INT 3
46721: PUSH
46722: LD_INT 3
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 4
46731: PUSH
46732: LD_INT 3
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 3
46741: PUSH
46742: LD_INT 4
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: LIST
46753: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46754: LD_ADDR_VAR 0 26
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 3
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 4
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 3
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: LIST
46794: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46795: LD_ADDR_VAR 0 27
46799: PUSH
46800: LD_INT 3
46802: NEG
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 3
46813: NEG
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 4
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46839: LD_ADDR_VAR 0 28
46843: PUSH
46844: LD_INT 3
46846: NEG
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 3
46858: NEG
46859: PUSH
46860: LD_INT 4
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 4
46870: NEG
46871: PUSH
46872: LD_INT 3
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: LIST
46884: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46885: LD_ADDR_VAR 0 29
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 3
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 3
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: LD_INT 4
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: LD_INT 4
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: LD_INT 3
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: LD_INT 5
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: LD_INT 5
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: LD_INT 4
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 6
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 6
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 5
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47040: LD_ADDR_VAR 0 30
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 3
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 3
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 3
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 4
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 4
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 4
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 5
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 5
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 5
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 6
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 6
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47183: LD_ADDR_VAR 0 31
47187: PUSH
47188: LD_INT 3
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 3
47200: PUSH
47201: LD_INT 3
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 3
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 4
47220: PUSH
47221: LD_INT 3
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 4
47230: PUSH
47231: LD_INT 4
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 3
47240: PUSH
47241: LD_INT 4
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 5
47250: PUSH
47251: LD_INT 4
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 5
47260: PUSH
47261: LD_INT 5
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 4
47270: PUSH
47271: LD_INT 5
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 6
47280: PUSH
47281: LD_INT 5
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 6
47290: PUSH
47291: LD_INT 6
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 5
47300: PUSH
47301: LD_INT 6
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47322: LD_ADDR_VAR 0 32
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: LD_INT 3
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 3
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 4
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 4
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: LD_INT 3
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: LD_INT 5
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: LD_INT 5
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: LD_INT 4
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: LD_INT 6
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 6
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 5
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47465: LD_ADDR_VAR 0 33
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 3
47483: NEG
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 3
47494: NEG
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 4
47517: NEG
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 4
47528: NEG
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 4
47540: NEG
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 5
47551: NEG
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 5
47562: NEG
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 5
47574: NEG
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 6
47585: NEG
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 6
47596: NEG
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47620: LD_ADDR_VAR 0 34
47624: PUSH
47625: LD_INT 2
47627: NEG
47628: PUSH
47629: LD_INT 3
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 3
47639: NEG
47640: PUSH
47641: LD_INT 2
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 3
47651: NEG
47652: PUSH
47653: LD_INT 3
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 3
47663: NEG
47664: PUSH
47665: LD_INT 4
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 4
47675: NEG
47676: PUSH
47677: LD_INT 3
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 4
47687: NEG
47688: PUSH
47689: LD_INT 4
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 4
47699: NEG
47700: PUSH
47701: LD_INT 5
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 5
47711: NEG
47712: PUSH
47713: LD_INT 4
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 5
47723: NEG
47724: PUSH
47725: LD_INT 5
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 5
47735: NEG
47736: PUSH
47737: LD_INT 6
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 6
47747: NEG
47748: PUSH
47749: LD_INT 5
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 6
47759: NEG
47760: PUSH
47761: LD_INT 6
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47783: LD_ADDR_VAR 0 41
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 2
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: LD_INT 3
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 2
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: LIST
47826: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47827: LD_ADDR_VAR 0 42
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: LIST
47867: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47868: LD_ADDR_VAR 0 43
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: LD_INT 2
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: LIST
47907: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47908: LD_ADDR_VAR 0 44
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: LIST
47948: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47949: LD_ADDR_VAR 0 45
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 3
47978: NEG
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: LIST
47992: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47993: LD_ADDR_VAR 0 46
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: LD_INT 3
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 3
48024: NEG
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: LIST
48038: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48039: LD_ADDR_VAR 0 47
48043: PUSH
48044: LD_INT 2
48046: NEG
48047: PUSH
48048: LD_INT 3
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 3
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48072: LD_ADDR_VAR 0 48
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48103: LD_ADDR_VAR 0 49
48107: PUSH
48108: LD_INT 3
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 3
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48132: LD_ADDR_VAR 0 50
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: LD_INT 3
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: LD_INT 3
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48161: LD_ADDR_VAR 0 51
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48192: LD_ADDR_VAR 0 52
48196: PUSH
48197: LD_INT 3
48199: NEG
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 3
48211: NEG
48212: PUSH
48213: LD_INT 2
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48225: LD_ADDR_VAR 0 53
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: LD_INT 3
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: LD_INT 3
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: LIST
48268: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48269: LD_ADDR_VAR 0 54
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 3
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 3
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: LIST
48309: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48310: LD_ADDR_VAR 0 55
48314: PUSH
48315: LD_INT 3
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 3
48327: PUSH
48328: LD_INT 3
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: LD_INT 3
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: LIST
48349: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48350: LD_ADDR_VAR 0 56
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 3
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: LD_INT 3
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: LIST
48390: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48391: LD_ADDR_VAR 0 57
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 3
48409: NEG
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 3
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: LIST
48434: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48435: LD_ADDR_VAR 0 58
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: LD_INT 3
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 3
48454: NEG
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 3
48466: NEG
48467: PUSH
48468: LD_INT 3
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: LIST
48480: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48481: LD_ADDR_VAR 0 59
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 2
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: LIST
48524: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48525: LD_ADDR_VAR 0 60
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: LIST
48565: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48566: LD_ADDR_VAR 0 61
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 2
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: LIST
48605: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48606: LD_ADDR_VAR 0 62
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: LIST
48646: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48647: LD_ADDR_VAR 0 63
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48691: LD_ADDR_VAR 0 64
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: LD_INT 2
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: LIST
48736: ST_TO_ADDR
// end ; 2 :
48737: GO 52003
48739: LD_INT 2
48741: DOUBLE
48742: EQUAL
48743: IFTRUE 48747
48745: GO 52002
48747: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48748: LD_ADDR_VAR 0 29
48752: PUSH
48753: LD_INT 4
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 4
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 5
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 5
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 4
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 3
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 3
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 3
48827: PUSH
48828: LD_INT 2
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 5
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 3
48848: PUSH
48849: LD_INT 3
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 3
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 4
48868: PUSH
48869: LD_INT 3
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 4
48878: PUSH
48879: LD_INT 4
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 3
48888: PUSH
48889: LD_INT 4
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 4
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: LD_INT 4
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 4
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 3
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: LD_INT 4
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 5
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 5
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 4
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: LD_INT 3
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: LD_INT 5
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: LD_INT 3
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 3
49031: NEG
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 3
49042: NEG
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 3
49076: NEG
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 4
49087: NEG
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 4
49098: NEG
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 4
49110: NEG
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 4
49133: NEG
49134: PUSH
49135: LD_INT 4
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 4
49145: NEG
49146: PUSH
49147: LD_INT 5
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 3
49157: NEG
49158: PUSH
49159: LD_INT 4
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 3
49169: NEG
49170: PUSH
49171: LD_INT 3
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 4
49181: NEG
49182: PUSH
49183: LD_INT 3
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 5
49193: NEG
49194: PUSH
49195: LD_INT 4
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 5
49205: NEG
49206: PUSH
49207: LD_INT 5
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 3
49217: NEG
49218: PUSH
49219: LD_INT 5
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 5
49229: NEG
49230: PUSH
49231: LD_INT 3
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49286: LD_ADDR_VAR 0 30
49290: PUSH
49291: LD_INT 4
49293: PUSH
49294: LD_INT 4
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 4
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 5
49313: PUSH
49314: LD_INT 4
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 5
49323: PUSH
49324: LD_INT 5
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 4
49333: PUSH
49334: LD_INT 5
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 3
49343: PUSH
49344: LD_INT 4
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 3
49353: PUSH
49354: LD_INT 3
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 5
49363: PUSH
49364: LD_INT 3
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 3
49373: PUSH
49374: LD_INT 5
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 3
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: LD_INT 4
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 4
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: LD_INT 3
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: LD_INT 4
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 2
49465: NEG
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 4
49476: NEG
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 4
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 3
49499: NEG
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 3
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 4
49521: NEG
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 5
49532: NEG
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 5
49543: NEG
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 5
49555: NEG
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 3
49567: NEG
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 3
49578: NEG
49579: PUSH
49580: LD_INT 3
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 3
49590: NEG
49591: PUSH
49592: LD_INT 4
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: LD_INT 3
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 3
49626: NEG
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 4
49638: NEG
49639: PUSH
49640: LD_INT 3
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 4
49650: NEG
49651: PUSH
49652: LD_INT 4
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: LD_INT 4
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 4
49674: NEG
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 4
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: LD_INT 5
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: LD_INT 4
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: LD_INT 3
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 3
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 4
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 5
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: LD_INT 3
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: LD_INT 5
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49833: LD_ADDR_VAR 0 31
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 4
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 3
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 4
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: LD_INT 5
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: LD_INT 5
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: LD_INT 4
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: LD_INT 3
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: LD_INT 5
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: NEG
49923: PUSH
49924: LD_INT 3
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 3
49944: NEG
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 3
49978: NEG
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 4
49989: NEG
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 4
50000: NEG
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 4
50012: NEG
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 4
50035: NEG
50036: PUSH
50037: LD_INT 4
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 4
50047: NEG
50048: PUSH
50049: LD_INT 5
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 3
50059: NEG
50060: PUSH
50061: LD_INT 4
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 3
50071: NEG
50072: PUSH
50073: LD_INT 3
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 4
50083: NEG
50084: PUSH
50085: LD_INT 3
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 5
50095: NEG
50096: PUSH
50097: LD_INT 4
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 5
50107: NEG
50108: PUSH
50109: LD_INT 5
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 3
50119: NEG
50120: PUSH
50121: LD_INT 5
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 5
50131: NEG
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 3
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: LD_INT 4
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 3
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: LD_INT 3
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 4
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: NEG
50234: PUSH
50235: LD_INT 4
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 4
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 4
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 5
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 5
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 4
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 3
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 3
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 5
50328: PUSH
50329: LD_INT 2
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50383: LD_ADDR_VAR 0 32
50387: PUSH
50388: LD_INT 4
50390: NEG
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 4
50401: NEG
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 3
50413: NEG
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 3
50424: NEG
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 4
50435: NEG
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 5
50446: NEG
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 5
50457: NEG
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 5
50469: NEG
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 3
50481: NEG
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 3
50492: NEG
50493: PUSH
50494: LD_INT 3
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 3
50504: NEG
50505: PUSH
50506: LD_INT 4
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: LD_INT 3
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 3
50540: NEG
50541: PUSH
50542: LD_INT 2
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 4
50552: NEG
50553: PUSH
50554: LD_INT 3
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 4
50564: NEG
50565: PUSH
50566: LD_INT 4
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: LD_INT 4
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 4
50588: NEG
50589: PUSH
50590: LD_INT 2
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 4
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 5
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 4
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: LD_INT 3
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: LD_INT 3
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: LD_INT 4
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 5
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 2
50679: PUSH
50680: LD_INT 3
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: LD_INT 5
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 3
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 4
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 4
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 3
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 2
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 4
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 4
50795: PUSH
50796: LD_INT 4
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 4
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 5
50815: PUSH
50816: LD_INT 4
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 5
50825: PUSH
50826: LD_INT 5
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 4
50835: PUSH
50836: LD_INT 5
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 3
50845: PUSH
50846: LD_INT 4
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 3
50855: PUSH
50856: LD_INT 3
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 5
50865: PUSH
50866: LD_INT 3
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 3
50875: PUSH
50876: LD_INT 5
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50930: LD_ADDR_VAR 0 33
50934: PUSH
50935: LD_INT 4
50937: NEG
50938: PUSH
50939: LD_INT 4
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 4
50949: NEG
50950: PUSH
50951: LD_INT 5
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 3
50961: NEG
50962: PUSH
50963: LD_INT 4
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 3
50973: NEG
50974: PUSH
50975: LD_INT 3
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 4
50985: NEG
50986: PUSH
50987: LD_INT 3
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 5
50997: NEG
50998: PUSH
50999: LD_INT 4
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 5
51009: NEG
51010: PUSH
51011: LD_INT 5
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 3
51021: NEG
51022: PUSH
51023: LD_INT 5
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 5
51033: NEG
51034: PUSH
51035: LD_INT 3
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 3
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 4
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 3
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: LD_INT 3
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 4
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: LD_INT 4
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 4
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 4
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 5
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 5
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 4
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 3
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 3
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 3
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 5
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 3
51240: PUSH
51241: LD_INT 3
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 3
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 4
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 4
51270: PUSH
51271: LD_INT 4
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 3
51280: PUSH
51281: LD_INT 4
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: LD_INT 2
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 4
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: LD_INT 4
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 4
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 4
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: LD_INT 5
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: LD_INT 5
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: LD_INT 4
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 3
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: LD_INT 5
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: NEG
51413: PUSH
51414: LD_INT 3
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51468: LD_ADDR_VAR 0 34
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 4
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 5
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 4
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: LD_INT 3
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: LD_INT 4
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 5
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: LD_INT 3
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: LD_INT 5
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 3
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 3
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 4
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 4
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: LD_INT 2
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 4
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 4
51670: PUSH
51671: LD_INT 4
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 4
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 5
51690: PUSH
51691: LD_INT 4
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 5
51700: PUSH
51701: LD_INT 5
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 4
51710: PUSH
51711: LD_INT 5
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: LD_INT 4
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: LD_INT 3
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 5
51740: PUSH
51741: LD_INT 3
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: LD_INT 5
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 4
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 4
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 3
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 4
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: NEG
51843: PUSH
51844: LD_INT 2
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 4
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 4
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 3
51876: NEG
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 3
51887: NEG
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 4
51898: NEG
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 5
51909: NEG
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 5
51920: NEG
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 5
51932: NEG
51933: PUSH
51934: LD_INT 2
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: ST_TO_ADDR
// end ; end ;
52000: GO 52003
52002: POP
// case btype of b_depot , b_warehouse :
52003: LD_VAR 0 1
52007: PUSH
52008: LD_INT 0
52010: DOUBLE
52011: EQUAL
52012: IFTRUE 52022
52014: LD_INT 1
52016: DOUBLE
52017: EQUAL
52018: IFTRUE 52022
52020: GO 52223
52022: POP
// case nation of nation_american :
52023: LD_VAR 0 5
52027: PUSH
52028: LD_INT 1
52030: DOUBLE
52031: EQUAL
52032: IFTRUE 52036
52034: GO 52092
52036: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52037: LD_ADDR_VAR 0 9
52041: PUSH
52042: LD_VAR 0 11
52046: PUSH
52047: LD_VAR 0 12
52051: PUSH
52052: LD_VAR 0 13
52056: PUSH
52057: LD_VAR 0 14
52061: PUSH
52062: LD_VAR 0 15
52066: PUSH
52067: LD_VAR 0 16
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: PUSH
52080: LD_VAR 0 4
52084: PUSH
52085: LD_INT 1
52087: PLUS
52088: ARRAY
52089: ST_TO_ADDR
52090: GO 52221
52092: LD_INT 2
52094: DOUBLE
52095: EQUAL
52096: IFTRUE 52100
52098: GO 52156
52100: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52101: LD_ADDR_VAR 0 9
52105: PUSH
52106: LD_VAR 0 17
52110: PUSH
52111: LD_VAR 0 18
52115: PUSH
52116: LD_VAR 0 19
52120: PUSH
52121: LD_VAR 0 20
52125: PUSH
52126: LD_VAR 0 21
52130: PUSH
52131: LD_VAR 0 22
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: PUSH
52144: LD_VAR 0 4
52148: PUSH
52149: LD_INT 1
52151: PLUS
52152: ARRAY
52153: ST_TO_ADDR
52154: GO 52221
52156: LD_INT 3
52158: DOUBLE
52159: EQUAL
52160: IFTRUE 52164
52162: GO 52220
52164: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52165: LD_ADDR_VAR 0 9
52169: PUSH
52170: LD_VAR 0 23
52174: PUSH
52175: LD_VAR 0 24
52179: PUSH
52180: LD_VAR 0 25
52184: PUSH
52185: LD_VAR 0 26
52189: PUSH
52190: LD_VAR 0 27
52194: PUSH
52195: LD_VAR 0 28
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: PUSH
52208: LD_VAR 0 4
52212: PUSH
52213: LD_INT 1
52215: PLUS
52216: ARRAY
52217: ST_TO_ADDR
52218: GO 52221
52220: POP
52221: GO 52776
52223: LD_INT 2
52225: DOUBLE
52226: EQUAL
52227: IFTRUE 52237
52229: LD_INT 3
52231: DOUBLE
52232: EQUAL
52233: IFTRUE 52237
52235: GO 52293
52237: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52238: LD_ADDR_VAR 0 9
52242: PUSH
52243: LD_VAR 0 29
52247: PUSH
52248: LD_VAR 0 30
52252: PUSH
52253: LD_VAR 0 31
52257: PUSH
52258: LD_VAR 0 32
52262: PUSH
52263: LD_VAR 0 33
52267: PUSH
52268: LD_VAR 0 34
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: PUSH
52281: LD_VAR 0 4
52285: PUSH
52286: LD_INT 1
52288: PLUS
52289: ARRAY
52290: ST_TO_ADDR
52291: GO 52776
52293: LD_INT 16
52295: DOUBLE
52296: EQUAL
52297: IFTRUE 52355
52299: LD_INT 17
52301: DOUBLE
52302: EQUAL
52303: IFTRUE 52355
52305: LD_INT 18
52307: DOUBLE
52308: EQUAL
52309: IFTRUE 52355
52311: LD_INT 19
52313: DOUBLE
52314: EQUAL
52315: IFTRUE 52355
52317: LD_INT 22
52319: DOUBLE
52320: EQUAL
52321: IFTRUE 52355
52323: LD_INT 20
52325: DOUBLE
52326: EQUAL
52327: IFTRUE 52355
52329: LD_INT 21
52331: DOUBLE
52332: EQUAL
52333: IFTRUE 52355
52335: LD_INT 23
52337: DOUBLE
52338: EQUAL
52339: IFTRUE 52355
52341: LD_INT 24
52343: DOUBLE
52344: EQUAL
52345: IFTRUE 52355
52347: LD_INT 25
52349: DOUBLE
52350: EQUAL
52351: IFTRUE 52355
52353: GO 52411
52355: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52356: LD_ADDR_VAR 0 9
52360: PUSH
52361: LD_VAR 0 35
52365: PUSH
52366: LD_VAR 0 36
52370: PUSH
52371: LD_VAR 0 37
52375: PUSH
52376: LD_VAR 0 38
52380: PUSH
52381: LD_VAR 0 39
52385: PUSH
52386: LD_VAR 0 40
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: PUSH
52399: LD_VAR 0 4
52403: PUSH
52404: LD_INT 1
52406: PLUS
52407: ARRAY
52408: ST_TO_ADDR
52409: GO 52776
52411: LD_INT 6
52413: DOUBLE
52414: EQUAL
52415: IFTRUE 52467
52417: LD_INT 7
52419: DOUBLE
52420: EQUAL
52421: IFTRUE 52467
52423: LD_INT 8
52425: DOUBLE
52426: EQUAL
52427: IFTRUE 52467
52429: LD_INT 13
52431: DOUBLE
52432: EQUAL
52433: IFTRUE 52467
52435: LD_INT 12
52437: DOUBLE
52438: EQUAL
52439: IFTRUE 52467
52441: LD_INT 15
52443: DOUBLE
52444: EQUAL
52445: IFTRUE 52467
52447: LD_INT 11
52449: DOUBLE
52450: EQUAL
52451: IFTRUE 52467
52453: LD_INT 14
52455: DOUBLE
52456: EQUAL
52457: IFTRUE 52467
52459: LD_INT 10
52461: DOUBLE
52462: EQUAL
52463: IFTRUE 52467
52465: GO 52523
52467: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52468: LD_ADDR_VAR 0 9
52472: PUSH
52473: LD_VAR 0 41
52477: PUSH
52478: LD_VAR 0 42
52482: PUSH
52483: LD_VAR 0 43
52487: PUSH
52488: LD_VAR 0 44
52492: PUSH
52493: LD_VAR 0 45
52497: PUSH
52498: LD_VAR 0 46
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: PUSH
52511: LD_VAR 0 4
52515: PUSH
52516: LD_INT 1
52518: PLUS
52519: ARRAY
52520: ST_TO_ADDR
52521: GO 52776
52523: LD_INT 36
52525: DOUBLE
52526: EQUAL
52527: IFTRUE 52531
52529: GO 52587
52531: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52532: LD_ADDR_VAR 0 9
52536: PUSH
52537: LD_VAR 0 47
52541: PUSH
52542: LD_VAR 0 48
52546: PUSH
52547: LD_VAR 0 49
52551: PUSH
52552: LD_VAR 0 50
52556: PUSH
52557: LD_VAR 0 51
52561: PUSH
52562: LD_VAR 0 52
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: PUSH
52575: LD_VAR 0 4
52579: PUSH
52580: LD_INT 1
52582: PLUS
52583: ARRAY
52584: ST_TO_ADDR
52585: GO 52776
52587: LD_INT 4
52589: DOUBLE
52590: EQUAL
52591: IFTRUE 52613
52593: LD_INT 5
52595: DOUBLE
52596: EQUAL
52597: IFTRUE 52613
52599: LD_INT 34
52601: DOUBLE
52602: EQUAL
52603: IFTRUE 52613
52605: LD_INT 37
52607: DOUBLE
52608: EQUAL
52609: IFTRUE 52613
52611: GO 52669
52613: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52614: LD_ADDR_VAR 0 9
52618: PUSH
52619: LD_VAR 0 53
52623: PUSH
52624: LD_VAR 0 54
52628: PUSH
52629: LD_VAR 0 55
52633: PUSH
52634: LD_VAR 0 56
52638: PUSH
52639: LD_VAR 0 57
52643: PUSH
52644: LD_VAR 0 58
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: PUSH
52657: LD_VAR 0 4
52661: PUSH
52662: LD_INT 1
52664: PLUS
52665: ARRAY
52666: ST_TO_ADDR
52667: GO 52776
52669: LD_INT 31
52671: DOUBLE
52672: EQUAL
52673: IFTRUE 52719
52675: LD_INT 32
52677: DOUBLE
52678: EQUAL
52679: IFTRUE 52719
52681: LD_INT 33
52683: DOUBLE
52684: EQUAL
52685: IFTRUE 52719
52687: LD_INT 27
52689: DOUBLE
52690: EQUAL
52691: IFTRUE 52719
52693: LD_INT 26
52695: DOUBLE
52696: EQUAL
52697: IFTRUE 52719
52699: LD_INT 28
52701: DOUBLE
52702: EQUAL
52703: IFTRUE 52719
52705: LD_INT 29
52707: DOUBLE
52708: EQUAL
52709: IFTRUE 52719
52711: LD_INT 30
52713: DOUBLE
52714: EQUAL
52715: IFTRUE 52719
52717: GO 52775
52719: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52720: LD_ADDR_VAR 0 9
52724: PUSH
52725: LD_VAR 0 59
52729: PUSH
52730: LD_VAR 0 60
52734: PUSH
52735: LD_VAR 0 61
52739: PUSH
52740: LD_VAR 0 62
52744: PUSH
52745: LD_VAR 0 63
52749: PUSH
52750: LD_VAR 0 64
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: PUSH
52763: LD_VAR 0 4
52767: PUSH
52768: LD_INT 1
52770: PLUS
52771: ARRAY
52772: ST_TO_ADDR
52773: GO 52776
52775: POP
// temp_list2 = [ ] ;
52776: LD_ADDR_VAR 0 10
52780: PUSH
52781: EMPTY
52782: ST_TO_ADDR
// for i in temp_list do
52783: LD_ADDR_VAR 0 8
52787: PUSH
52788: LD_VAR 0 9
52792: PUSH
52793: FOR_IN
52794: IFFALSE 52846
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52796: LD_ADDR_VAR 0 10
52800: PUSH
52801: LD_VAR 0 10
52805: PUSH
52806: LD_VAR 0 8
52810: PUSH
52811: LD_INT 1
52813: ARRAY
52814: PUSH
52815: LD_VAR 0 2
52819: PLUS
52820: PUSH
52821: LD_VAR 0 8
52825: PUSH
52826: LD_INT 2
52828: ARRAY
52829: PUSH
52830: LD_VAR 0 3
52834: PLUS
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: EMPTY
52841: LIST
52842: ADD
52843: ST_TO_ADDR
52844: GO 52793
52846: POP
52847: POP
// result = temp_list2 ;
52848: LD_ADDR_VAR 0 7
52852: PUSH
52853: LD_VAR 0 10
52857: ST_TO_ADDR
// end ;
52858: LD_VAR 0 7
52862: RET
// export function EnemyInRange ( unit , dist ) ; begin
52863: LD_INT 0
52865: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52866: LD_ADDR_VAR 0 3
52870: PUSH
52871: LD_VAR 0 1
52875: PPUSH
52876: CALL_OW 255
52880: PPUSH
52881: LD_VAR 0 1
52885: PPUSH
52886: CALL_OW 250
52890: PPUSH
52891: LD_VAR 0 1
52895: PPUSH
52896: CALL_OW 251
52900: PPUSH
52901: LD_VAR 0 2
52905: PPUSH
52906: CALL 26967 0 4
52910: PUSH
52911: LD_INT 4
52913: ARRAY
52914: ST_TO_ADDR
// end ;
52915: LD_VAR 0 3
52919: RET
// export function PlayerSeeMe ( unit ) ; begin
52920: LD_INT 0
52922: PPUSH
// result := See ( your_side , unit ) ;
52923: LD_ADDR_VAR 0 2
52927: PUSH
52928: LD_OWVAR 2
52932: PPUSH
52933: LD_VAR 0 1
52937: PPUSH
52938: CALL_OW 292
52942: ST_TO_ADDR
// end ;
52943: LD_VAR 0 2
52947: RET
// export function ReverseDir ( unit ) ; begin
52948: LD_INT 0
52950: PPUSH
// if not unit then
52951: LD_VAR 0 1
52955: NOT
52956: IFFALSE 52960
// exit ;
52958: GO 53006
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
52960: LD_ADDR_VAR 0 2
52964: PUSH
52965: LD_INT 3
52967: PUSH
52968: LD_INT 4
52970: PUSH
52971: LD_INT 5
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: LD_INT 2
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: PUSH
52991: LD_VAR 0 1
52995: PPUSH
52996: CALL_OW 254
53000: PUSH
53001: LD_INT 1
53003: PLUS
53004: ARRAY
53005: ST_TO_ADDR
// end ;
53006: LD_VAR 0 2
53010: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53011: LD_INT 0
53013: PPUSH
53014: PPUSH
53015: PPUSH
53016: PPUSH
53017: PPUSH
// if not hexes then
53018: LD_VAR 0 2
53022: NOT
53023: IFFALSE 53027
// exit ;
53025: GO 53175
// dist := 9999 ;
53027: LD_ADDR_VAR 0 5
53031: PUSH
53032: LD_INT 9999
53034: ST_TO_ADDR
// for i = 1 to hexes do
53035: LD_ADDR_VAR 0 4
53039: PUSH
53040: DOUBLE
53041: LD_INT 1
53043: DEC
53044: ST_TO_ADDR
53045: LD_VAR 0 2
53049: PUSH
53050: FOR_TO
53051: IFFALSE 53163
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53053: LD_VAR 0 1
53057: PPUSH
53058: LD_VAR 0 2
53062: PUSH
53063: LD_VAR 0 4
53067: ARRAY
53068: PUSH
53069: LD_INT 1
53071: ARRAY
53072: PPUSH
53073: LD_VAR 0 2
53077: PUSH
53078: LD_VAR 0 4
53082: ARRAY
53083: PUSH
53084: LD_INT 2
53086: ARRAY
53087: PPUSH
53088: CALL_OW 297
53092: PUSH
53093: LD_VAR 0 5
53097: LESS
53098: IFFALSE 53161
// begin hex := hexes [ i ] ;
53100: LD_ADDR_VAR 0 7
53104: PUSH
53105: LD_VAR 0 2
53109: PUSH
53110: LD_VAR 0 4
53114: ARRAY
53115: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53116: LD_ADDR_VAR 0 5
53120: PUSH
53121: LD_VAR 0 1
53125: PPUSH
53126: LD_VAR 0 2
53130: PUSH
53131: LD_VAR 0 4
53135: ARRAY
53136: PUSH
53137: LD_INT 1
53139: ARRAY
53140: PPUSH
53141: LD_VAR 0 2
53145: PUSH
53146: LD_VAR 0 4
53150: ARRAY
53151: PUSH
53152: LD_INT 2
53154: ARRAY
53155: PPUSH
53156: CALL_OW 297
53160: ST_TO_ADDR
// end ; end ;
53161: GO 53050
53163: POP
53164: POP
// result := hex ;
53165: LD_ADDR_VAR 0 3
53169: PUSH
53170: LD_VAR 0 7
53174: ST_TO_ADDR
// end ;
53175: LD_VAR 0 3
53179: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53180: LD_INT 0
53182: PPUSH
53183: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53184: LD_VAR 0 1
53188: NOT
53189: PUSH
53190: LD_VAR 0 1
53194: PUSH
53195: LD_INT 21
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 23
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PPUSH
53219: CALL_OW 69
53223: IN
53224: NOT
53225: OR
53226: IFFALSE 53230
// exit ;
53228: GO 53277
// for i = 1 to 3 do
53230: LD_ADDR_VAR 0 3
53234: PUSH
53235: DOUBLE
53236: LD_INT 1
53238: DEC
53239: ST_TO_ADDR
53240: LD_INT 3
53242: PUSH
53243: FOR_TO
53244: IFFALSE 53275
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53246: LD_VAR 0 1
53250: PPUSH
53251: CALL_OW 250
53255: PPUSH
53256: LD_VAR 0 1
53260: PPUSH
53261: CALL_OW 251
53265: PPUSH
53266: LD_INT 1
53268: PPUSH
53269: CALL_OW 453
53273: GO 53243
53275: POP
53276: POP
// end ;
53277: LD_VAR 0 2
53281: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53282: LD_INT 0
53284: PPUSH
53285: PPUSH
53286: PPUSH
53287: PPUSH
53288: PPUSH
53289: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53290: LD_VAR 0 1
53294: NOT
53295: PUSH
53296: LD_VAR 0 2
53300: NOT
53301: OR
53302: PUSH
53303: LD_VAR 0 1
53307: PPUSH
53308: CALL_OW 314
53312: OR
53313: IFFALSE 53317
// exit ;
53315: GO 53758
// x := GetX ( enemy_unit ) ;
53317: LD_ADDR_VAR 0 7
53321: PUSH
53322: LD_VAR 0 2
53326: PPUSH
53327: CALL_OW 250
53331: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53332: LD_ADDR_VAR 0 8
53336: PUSH
53337: LD_VAR 0 2
53341: PPUSH
53342: CALL_OW 251
53346: ST_TO_ADDR
// if not x or not y then
53347: LD_VAR 0 7
53351: NOT
53352: PUSH
53353: LD_VAR 0 8
53357: NOT
53358: OR
53359: IFFALSE 53363
// exit ;
53361: GO 53758
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53363: LD_ADDR_VAR 0 6
53367: PUSH
53368: LD_VAR 0 7
53372: PPUSH
53373: LD_INT 0
53375: PPUSH
53376: LD_INT 4
53378: PPUSH
53379: CALL_OW 272
53383: PUSH
53384: LD_VAR 0 8
53388: PPUSH
53389: LD_INT 0
53391: PPUSH
53392: LD_INT 4
53394: PPUSH
53395: CALL_OW 273
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_VAR 0 7
53408: PPUSH
53409: LD_INT 1
53411: PPUSH
53412: LD_INT 4
53414: PPUSH
53415: CALL_OW 272
53419: PUSH
53420: LD_VAR 0 8
53424: PPUSH
53425: LD_INT 1
53427: PPUSH
53428: LD_INT 4
53430: PPUSH
53431: CALL_OW 273
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_VAR 0 7
53444: PPUSH
53445: LD_INT 2
53447: PPUSH
53448: LD_INT 4
53450: PPUSH
53451: CALL_OW 272
53455: PUSH
53456: LD_VAR 0 8
53460: PPUSH
53461: LD_INT 2
53463: PPUSH
53464: LD_INT 4
53466: PPUSH
53467: CALL_OW 273
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_VAR 0 7
53480: PPUSH
53481: LD_INT 3
53483: PPUSH
53484: LD_INT 4
53486: PPUSH
53487: CALL_OW 272
53491: PUSH
53492: LD_VAR 0 8
53496: PPUSH
53497: LD_INT 3
53499: PPUSH
53500: LD_INT 4
53502: PPUSH
53503: CALL_OW 273
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_VAR 0 7
53516: PPUSH
53517: LD_INT 4
53519: PPUSH
53520: LD_INT 4
53522: PPUSH
53523: CALL_OW 272
53527: PUSH
53528: LD_VAR 0 8
53532: PPUSH
53533: LD_INT 4
53535: PPUSH
53536: LD_INT 4
53538: PPUSH
53539: CALL_OW 273
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_VAR 0 7
53552: PPUSH
53553: LD_INT 5
53555: PPUSH
53556: LD_INT 4
53558: PPUSH
53559: CALL_OW 272
53563: PUSH
53564: LD_VAR 0 8
53568: PPUSH
53569: LD_INT 5
53571: PPUSH
53572: LD_INT 4
53574: PPUSH
53575: CALL_OW 273
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: ST_TO_ADDR
// for i = tmp downto 1 do
53592: LD_ADDR_VAR 0 4
53596: PUSH
53597: DOUBLE
53598: LD_VAR 0 6
53602: INC
53603: ST_TO_ADDR
53604: LD_INT 1
53606: PUSH
53607: FOR_DOWNTO
53608: IFFALSE 53709
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53610: LD_VAR 0 6
53614: PUSH
53615: LD_VAR 0 4
53619: ARRAY
53620: PUSH
53621: LD_INT 1
53623: ARRAY
53624: PPUSH
53625: LD_VAR 0 6
53629: PUSH
53630: LD_VAR 0 4
53634: ARRAY
53635: PUSH
53636: LD_INT 2
53638: ARRAY
53639: PPUSH
53640: CALL_OW 488
53644: NOT
53645: PUSH
53646: LD_VAR 0 6
53650: PUSH
53651: LD_VAR 0 4
53655: ARRAY
53656: PUSH
53657: LD_INT 1
53659: ARRAY
53660: PPUSH
53661: LD_VAR 0 6
53665: PUSH
53666: LD_VAR 0 4
53670: ARRAY
53671: PUSH
53672: LD_INT 2
53674: ARRAY
53675: PPUSH
53676: CALL_OW 428
53680: PUSH
53681: LD_INT 0
53683: NONEQUAL
53684: OR
53685: IFFALSE 53707
// tmp := Delete ( tmp , i ) ;
53687: LD_ADDR_VAR 0 6
53691: PUSH
53692: LD_VAR 0 6
53696: PPUSH
53697: LD_VAR 0 4
53701: PPUSH
53702: CALL_OW 3
53706: ST_TO_ADDR
53707: GO 53607
53709: POP
53710: POP
// j := GetClosestHex ( unit , tmp ) ;
53711: LD_ADDR_VAR 0 5
53715: PUSH
53716: LD_VAR 0 1
53720: PPUSH
53721: LD_VAR 0 6
53725: PPUSH
53726: CALL 53011 0 2
53730: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53731: LD_VAR 0 1
53735: PPUSH
53736: LD_VAR 0 5
53740: PUSH
53741: LD_INT 1
53743: ARRAY
53744: PPUSH
53745: LD_VAR 0 5
53749: PUSH
53750: LD_INT 2
53752: ARRAY
53753: PPUSH
53754: CALL_OW 111
// end ;
53758: LD_VAR 0 3
53762: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53763: LD_INT 0
53765: PPUSH
53766: PPUSH
53767: PPUSH
// uc_side = 0 ;
53768: LD_ADDR_OWVAR 20
53772: PUSH
53773: LD_INT 0
53775: ST_TO_ADDR
// uc_nation = 0 ;
53776: LD_ADDR_OWVAR 21
53780: PUSH
53781: LD_INT 0
53783: ST_TO_ADDR
// InitHc ;
53784: CALL_OW 19
// InitVc ;
53788: CALL_OW 20
// if mastodonts then
53792: LD_VAR 0 6
53796: IFFALSE 53863
// for i = 1 to mastodonts do
53798: LD_ADDR_VAR 0 11
53802: PUSH
53803: DOUBLE
53804: LD_INT 1
53806: DEC
53807: ST_TO_ADDR
53808: LD_VAR 0 6
53812: PUSH
53813: FOR_TO
53814: IFFALSE 53861
// begin vc_chassis := 31 ;
53816: LD_ADDR_OWVAR 37
53820: PUSH
53821: LD_INT 31
53823: ST_TO_ADDR
// vc_control := control_rider ;
53824: LD_ADDR_OWVAR 38
53828: PUSH
53829: LD_INT 4
53831: ST_TO_ADDR
// animal := CreateVehicle ;
53832: LD_ADDR_VAR 0 12
53836: PUSH
53837: CALL_OW 45
53841: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53842: LD_VAR 0 12
53846: PPUSH
53847: LD_VAR 0 8
53851: PPUSH
53852: LD_INT 0
53854: PPUSH
53855: CALL 60608 0 3
// end ;
53859: GO 53813
53861: POP
53862: POP
// if horses then
53863: LD_VAR 0 5
53867: IFFALSE 53934
// for i = 1 to horses do
53869: LD_ADDR_VAR 0 11
53873: PUSH
53874: DOUBLE
53875: LD_INT 1
53877: DEC
53878: ST_TO_ADDR
53879: LD_VAR 0 5
53883: PUSH
53884: FOR_TO
53885: IFFALSE 53932
// begin hc_class := 21 ;
53887: LD_ADDR_OWVAR 28
53891: PUSH
53892: LD_INT 21
53894: ST_TO_ADDR
// hc_gallery :=  ;
53895: LD_ADDR_OWVAR 33
53899: PUSH
53900: LD_STRING 
53902: ST_TO_ADDR
// animal := CreateHuman ;
53903: LD_ADDR_VAR 0 12
53907: PUSH
53908: CALL_OW 44
53912: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53913: LD_VAR 0 12
53917: PPUSH
53918: LD_VAR 0 8
53922: PPUSH
53923: LD_INT 0
53925: PPUSH
53926: CALL 60608 0 3
// end ;
53930: GO 53884
53932: POP
53933: POP
// if birds then
53934: LD_VAR 0 1
53938: IFFALSE 54005
// for i = 1 to birds do
53940: LD_ADDR_VAR 0 11
53944: PUSH
53945: DOUBLE
53946: LD_INT 1
53948: DEC
53949: ST_TO_ADDR
53950: LD_VAR 0 1
53954: PUSH
53955: FOR_TO
53956: IFFALSE 54003
// begin hc_class = 18 ;
53958: LD_ADDR_OWVAR 28
53962: PUSH
53963: LD_INT 18
53965: ST_TO_ADDR
// hc_gallery =  ;
53966: LD_ADDR_OWVAR 33
53970: PUSH
53971: LD_STRING 
53973: ST_TO_ADDR
// animal := CreateHuman ;
53974: LD_ADDR_VAR 0 12
53978: PUSH
53979: CALL_OW 44
53983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53984: LD_VAR 0 12
53988: PPUSH
53989: LD_VAR 0 8
53993: PPUSH
53994: LD_INT 0
53996: PPUSH
53997: CALL 60608 0 3
// end ;
54001: GO 53955
54003: POP
54004: POP
// if tigers then
54005: LD_VAR 0 2
54009: IFFALSE 54093
// for i = 1 to tigers do
54011: LD_ADDR_VAR 0 11
54015: PUSH
54016: DOUBLE
54017: LD_INT 1
54019: DEC
54020: ST_TO_ADDR
54021: LD_VAR 0 2
54025: PUSH
54026: FOR_TO
54027: IFFALSE 54091
// begin hc_class = class_tiger ;
54029: LD_ADDR_OWVAR 28
54033: PUSH
54034: LD_INT 14
54036: ST_TO_ADDR
// hc_gallery =  ;
54037: LD_ADDR_OWVAR 33
54041: PUSH
54042: LD_STRING 
54044: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54045: LD_ADDR_OWVAR 35
54049: PUSH
54050: LD_INT 7
54052: NEG
54053: PPUSH
54054: LD_INT 7
54056: PPUSH
54057: CALL_OW 12
54061: ST_TO_ADDR
// animal := CreateHuman ;
54062: LD_ADDR_VAR 0 12
54066: PUSH
54067: CALL_OW 44
54071: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54072: LD_VAR 0 12
54076: PPUSH
54077: LD_VAR 0 8
54081: PPUSH
54082: LD_INT 0
54084: PPUSH
54085: CALL 60608 0 3
// end ;
54089: GO 54026
54091: POP
54092: POP
// if apemans then
54093: LD_VAR 0 3
54097: IFFALSE 54220
// for i = 1 to apemans do
54099: LD_ADDR_VAR 0 11
54103: PUSH
54104: DOUBLE
54105: LD_INT 1
54107: DEC
54108: ST_TO_ADDR
54109: LD_VAR 0 3
54113: PUSH
54114: FOR_TO
54115: IFFALSE 54218
// begin hc_class = class_apeman ;
54117: LD_ADDR_OWVAR 28
54121: PUSH
54122: LD_INT 12
54124: ST_TO_ADDR
// hc_gallery =  ;
54125: LD_ADDR_OWVAR 33
54129: PUSH
54130: LD_STRING 
54132: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54133: LD_ADDR_OWVAR 35
54137: PUSH
54138: LD_INT 5
54140: NEG
54141: PPUSH
54142: LD_INT 5
54144: PPUSH
54145: CALL_OW 12
54149: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54150: LD_ADDR_OWVAR 31
54154: PUSH
54155: LD_INT 1
54157: PPUSH
54158: LD_INT 3
54160: PPUSH
54161: CALL_OW 12
54165: PUSH
54166: LD_INT 1
54168: PPUSH
54169: LD_INT 3
54171: PPUSH
54172: CALL_OW 12
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: ST_TO_ADDR
// animal := CreateHuman ;
54189: LD_ADDR_VAR 0 12
54193: PUSH
54194: CALL_OW 44
54198: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54199: LD_VAR 0 12
54203: PPUSH
54204: LD_VAR 0 8
54208: PPUSH
54209: LD_INT 0
54211: PPUSH
54212: CALL 60608 0 3
// end ;
54216: GO 54114
54218: POP
54219: POP
// if enchidnas then
54220: LD_VAR 0 4
54224: IFFALSE 54291
// for i = 1 to enchidnas do
54226: LD_ADDR_VAR 0 11
54230: PUSH
54231: DOUBLE
54232: LD_INT 1
54234: DEC
54235: ST_TO_ADDR
54236: LD_VAR 0 4
54240: PUSH
54241: FOR_TO
54242: IFFALSE 54289
// begin hc_class = 13 ;
54244: LD_ADDR_OWVAR 28
54248: PUSH
54249: LD_INT 13
54251: ST_TO_ADDR
// hc_gallery =  ;
54252: LD_ADDR_OWVAR 33
54256: PUSH
54257: LD_STRING 
54259: ST_TO_ADDR
// animal := CreateHuman ;
54260: LD_ADDR_VAR 0 12
54264: PUSH
54265: CALL_OW 44
54269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54270: LD_VAR 0 12
54274: PPUSH
54275: LD_VAR 0 8
54279: PPUSH
54280: LD_INT 0
54282: PPUSH
54283: CALL 60608 0 3
// end ;
54287: GO 54241
54289: POP
54290: POP
// if fishes then
54291: LD_VAR 0 7
54295: IFFALSE 54362
// for i = 1 to fishes do
54297: LD_ADDR_VAR 0 11
54301: PUSH
54302: DOUBLE
54303: LD_INT 1
54305: DEC
54306: ST_TO_ADDR
54307: LD_VAR 0 7
54311: PUSH
54312: FOR_TO
54313: IFFALSE 54360
// begin hc_class = 20 ;
54315: LD_ADDR_OWVAR 28
54319: PUSH
54320: LD_INT 20
54322: ST_TO_ADDR
// hc_gallery =  ;
54323: LD_ADDR_OWVAR 33
54327: PUSH
54328: LD_STRING 
54330: ST_TO_ADDR
// animal := CreateHuman ;
54331: LD_ADDR_VAR 0 12
54335: PUSH
54336: CALL_OW 44
54340: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54341: LD_VAR 0 12
54345: PPUSH
54346: LD_VAR 0 9
54350: PPUSH
54351: LD_INT 0
54353: PPUSH
54354: CALL 60608 0 3
// end ;
54358: GO 54312
54360: POP
54361: POP
// end ;
54362: LD_VAR 0 10
54366: RET
// export function WantHeal ( sci , unit ) ; begin
54367: LD_INT 0
54369: PPUSH
// if GetTaskList ( sci ) > 0 then
54370: LD_VAR 0 1
54374: PPUSH
54375: CALL_OW 437
54379: PUSH
54380: LD_INT 0
54382: GREATER
54383: IFFALSE 54453
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54385: LD_VAR 0 1
54389: PPUSH
54390: CALL_OW 437
54394: PUSH
54395: LD_INT 1
54397: ARRAY
54398: PUSH
54399: LD_INT 1
54401: ARRAY
54402: PUSH
54403: LD_STRING l
54405: EQUAL
54406: PUSH
54407: LD_VAR 0 1
54411: PPUSH
54412: CALL_OW 437
54416: PUSH
54417: LD_INT 1
54419: ARRAY
54420: PUSH
54421: LD_INT 4
54423: ARRAY
54424: PUSH
54425: LD_VAR 0 2
54429: EQUAL
54430: AND
54431: IFFALSE 54443
// result := true else
54433: LD_ADDR_VAR 0 3
54437: PUSH
54438: LD_INT 1
54440: ST_TO_ADDR
54441: GO 54451
// result := false ;
54443: LD_ADDR_VAR 0 3
54447: PUSH
54448: LD_INT 0
54450: ST_TO_ADDR
// end else
54451: GO 54461
// result := false ;
54453: LD_ADDR_VAR 0 3
54457: PUSH
54458: LD_INT 0
54460: ST_TO_ADDR
// end ;
54461: LD_VAR 0 3
54465: RET
// export function HealTarget ( sci ) ; begin
54466: LD_INT 0
54468: PPUSH
// if not sci then
54469: LD_VAR 0 1
54473: NOT
54474: IFFALSE 54478
// exit ;
54476: GO 54543
// result := 0 ;
54478: LD_ADDR_VAR 0 2
54482: PUSH
54483: LD_INT 0
54485: ST_TO_ADDR
// if GetTaskList ( sci ) then
54486: LD_VAR 0 1
54490: PPUSH
54491: CALL_OW 437
54495: IFFALSE 54543
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54497: LD_VAR 0 1
54501: PPUSH
54502: CALL_OW 437
54506: PUSH
54507: LD_INT 1
54509: ARRAY
54510: PUSH
54511: LD_INT 1
54513: ARRAY
54514: PUSH
54515: LD_STRING l
54517: EQUAL
54518: IFFALSE 54543
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54520: LD_ADDR_VAR 0 2
54524: PUSH
54525: LD_VAR 0 1
54529: PPUSH
54530: CALL_OW 437
54534: PUSH
54535: LD_INT 1
54537: ARRAY
54538: PUSH
54539: LD_INT 4
54541: ARRAY
54542: ST_TO_ADDR
// end ;
54543: LD_VAR 0 2
54547: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
54548: LD_INT 0
54550: PPUSH
54551: PPUSH
54552: PPUSH
54553: PPUSH
54554: PPUSH
54555: PPUSH
54556: PPUSH
54557: PPUSH
54558: PPUSH
54559: PPUSH
54560: PPUSH
54561: PPUSH
54562: PPUSH
54563: PPUSH
54564: PPUSH
54565: PPUSH
54566: PPUSH
54567: PPUSH
54568: PPUSH
54569: PPUSH
54570: PPUSH
54571: PPUSH
54572: PPUSH
54573: PPUSH
54574: PPUSH
54575: PPUSH
54576: PPUSH
54577: PPUSH
54578: PPUSH
54579: PPUSH
54580: PPUSH
54581: PPUSH
54582: PPUSH
54583: PPUSH
// if not list then
54584: LD_VAR 0 1
54588: NOT
54589: IFFALSE 54593
// exit ;
54591: GO 59219
// base := list [ 1 ] ;
54593: LD_ADDR_VAR 0 3
54597: PUSH
54598: LD_VAR 0 1
54602: PUSH
54603: LD_INT 1
54605: ARRAY
54606: ST_TO_ADDR
// group := list [ 2 ] ;
54607: LD_ADDR_VAR 0 4
54611: PUSH
54612: LD_VAR 0 1
54616: PUSH
54617: LD_INT 2
54619: ARRAY
54620: ST_TO_ADDR
// path := list [ 3 ] ;
54621: LD_ADDR_VAR 0 5
54625: PUSH
54626: LD_VAR 0 1
54630: PUSH
54631: LD_INT 3
54633: ARRAY
54634: ST_TO_ADDR
// flags := list [ 4 ] ;
54635: LD_ADDR_VAR 0 6
54639: PUSH
54640: LD_VAR 0 1
54644: PUSH
54645: LD_INT 4
54647: ARRAY
54648: ST_TO_ADDR
// mined := [ ] ;
54649: LD_ADDR_VAR 0 27
54653: PUSH
54654: EMPTY
54655: ST_TO_ADDR
// bombed := [ ] ;
54656: LD_ADDR_VAR 0 28
54660: PUSH
54661: EMPTY
54662: ST_TO_ADDR
// healers := [ ] ;
54663: LD_ADDR_VAR 0 31
54667: PUSH
54668: EMPTY
54669: ST_TO_ADDR
// to_heal := [ ] ;
54670: LD_ADDR_VAR 0 30
54674: PUSH
54675: EMPTY
54676: ST_TO_ADDR
// repairs := [ ] ;
54677: LD_ADDR_VAR 0 33
54681: PUSH
54682: EMPTY
54683: ST_TO_ADDR
// to_repair := [ ] ;
54684: LD_ADDR_VAR 0 32
54688: PUSH
54689: EMPTY
54690: ST_TO_ADDR
// if not group or not path then
54691: LD_VAR 0 4
54695: NOT
54696: PUSH
54697: LD_VAR 0 5
54701: NOT
54702: OR
54703: IFFALSE 54707
// exit ;
54705: GO 59219
// side := GetSide ( group [ 1 ] ) ;
54707: LD_ADDR_VAR 0 35
54711: PUSH
54712: LD_VAR 0 4
54716: PUSH
54717: LD_INT 1
54719: ARRAY
54720: PPUSH
54721: CALL_OW 255
54725: ST_TO_ADDR
// if flags then
54726: LD_VAR 0 6
54730: IFFALSE 54874
// begin f_ignore_area := flags [ 1 ] ;
54732: LD_ADDR_VAR 0 17
54736: PUSH
54737: LD_VAR 0 6
54741: PUSH
54742: LD_INT 1
54744: ARRAY
54745: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
54746: LD_ADDR_VAR 0 18
54750: PUSH
54751: LD_VAR 0 6
54755: PUSH
54756: LD_INT 2
54758: ARRAY
54759: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
54760: LD_ADDR_VAR 0 19
54764: PUSH
54765: LD_VAR 0 6
54769: PUSH
54770: LD_INT 3
54772: ARRAY
54773: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
54774: LD_ADDR_VAR 0 20
54778: PUSH
54779: LD_VAR 0 6
54783: PUSH
54784: LD_INT 4
54786: ARRAY
54787: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
54788: LD_ADDR_VAR 0 21
54792: PUSH
54793: LD_VAR 0 6
54797: PUSH
54798: LD_INT 5
54800: ARRAY
54801: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
54802: LD_ADDR_VAR 0 22
54806: PUSH
54807: LD_VAR 0 6
54811: PUSH
54812: LD_INT 6
54814: ARRAY
54815: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
54816: LD_ADDR_VAR 0 23
54820: PUSH
54821: LD_VAR 0 6
54825: PUSH
54826: LD_INT 7
54828: ARRAY
54829: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
54830: LD_ADDR_VAR 0 24
54834: PUSH
54835: LD_VAR 0 6
54839: PUSH
54840: LD_INT 8
54842: ARRAY
54843: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
54844: LD_ADDR_VAR 0 25
54848: PUSH
54849: LD_VAR 0 6
54853: PUSH
54854: LD_INT 9
54856: ARRAY
54857: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
54858: LD_ADDR_VAR 0 26
54862: PUSH
54863: LD_VAR 0 6
54867: PUSH
54868: LD_INT 10
54870: ARRAY
54871: ST_TO_ADDR
// end else
54872: GO 54954
// begin f_ignore_area := false ;
54874: LD_ADDR_VAR 0 17
54878: PUSH
54879: LD_INT 0
54881: ST_TO_ADDR
// f_capture := false ;
54882: LD_ADDR_VAR 0 18
54886: PUSH
54887: LD_INT 0
54889: ST_TO_ADDR
// f_ignore_civ := false ;
54890: LD_ADDR_VAR 0 19
54894: PUSH
54895: LD_INT 0
54897: ST_TO_ADDR
// f_murder := false ;
54898: LD_ADDR_VAR 0 20
54902: PUSH
54903: LD_INT 0
54905: ST_TO_ADDR
// f_mines := false ;
54906: LD_ADDR_VAR 0 21
54910: PUSH
54911: LD_INT 0
54913: ST_TO_ADDR
// f_repair := false ;
54914: LD_ADDR_VAR 0 22
54918: PUSH
54919: LD_INT 0
54921: ST_TO_ADDR
// f_heal := false ;
54922: LD_ADDR_VAR 0 23
54926: PUSH
54927: LD_INT 0
54929: ST_TO_ADDR
// f_spacetime := false ;
54930: LD_ADDR_VAR 0 24
54934: PUSH
54935: LD_INT 0
54937: ST_TO_ADDR
// f_attack_depot := false ;
54938: LD_ADDR_VAR 0 25
54942: PUSH
54943: LD_INT 0
54945: ST_TO_ADDR
// f_crawl := false ;
54946: LD_ADDR_VAR 0 26
54950: PUSH
54951: LD_INT 0
54953: ST_TO_ADDR
// end ; if f_heal then
54954: LD_VAR 0 23
54958: IFFALSE 54985
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
54960: LD_ADDR_VAR 0 31
54964: PUSH
54965: LD_VAR 0 4
54969: PPUSH
54970: LD_INT 25
54972: PUSH
54973: LD_INT 4
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PPUSH
54980: CALL_OW 72
54984: ST_TO_ADDR
// if f_repair then
54985: LD_VAR 0 22
54989: IFFALSE 55016
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
54991: LD_ADDR_VAR 0 33
54995: PUSH
54996: LD_VAR 0 4
55000: PPUSH
55001: LD_INT 25
55003: PUSH
55004: LD_INT 3
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PPUSH
55011: CALL_OW 72
55015: ST_TO_ADDR
// units_path := [ ] ;
55016: LD_ADDR_VAR 0 16
55020: PUSH
55021: EMPTY
55022: ST_TO_ADDR
// for i = 1 to group do
55023: LD_ADDR_VAR 0 7
55027: PUSH
55028: DOUBLE
55029: LD_INT 1
55031: DEC
55032: ST_TO_ADDR
55033: LD_VAR 0 4
55037: PUSH
55038: FOR_TO
55039: IFFALSE 55068
// units_path := Replace ( units_path , i , path ) ;
55041: LD_ADDR_VAR 0 16
55045: PUSH
55046: LD_VAR 0 16
55050: PPUSH
55051: LD_VAR 0 7
55055: PPUSH
55056: LD_VAR 0 5
55060: PPUSH
55061: CALL_OW 1
55065: ST_TO_ADDR
55066: GO 55038
55068: POP
55069: POP
// repeat for i = group downto 1 do
55070: LD_ADDR_VAR 0 7
55074: PUSH
55075: DOUBLE
55076: LD_VAR 0 4
55080: INC
55081: ST_TO_ADDR
55082: LD_INT 1
55084: PUSH
55085: FOR_DOWNTO
55086: IFFALSE 59182
// begin wait ( 5 ) ;
55088: LD_INT 5
55090: PPUSH
55091: CALL_OW 67
// tmp := [ ] ;
55095: LD_ADDR_VAR 0 14
55099: PUSH
55100: EMPTY
55101: ST_TO_ADDR
// attacking := false ;
55102: LD_ADDR_VAR 0 29
55106: PUSH
55107: LD_INT 0
55109: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55110: LD_VAR 0 4
55114: PUSH
55115: LD_VAR 0 7
55119: ARRAY
55120: PPUSH
55121: CALL_OW 301
55125: PUSH
55126: LD_VAR 0 4
55130: PUSH
55131: LD_VAR 0 7
55135: ARRAY
55136: NOT
55137: OR
55138: IFFALSE 55247
// begin if GetType ( group [ i ] ) = unit_human then
55140: LD_VAR 0 4
55144: PUSH
55145: LD_VAR 0 7
55149: ARRAY
55150: PPUSH
55151: CALL_OW 247
55155: PUSH
55156: LD_INT 1
55158: EQUAL
55159: IFFALSE 55205
// begin to_heal := to_heal diff group [ i ] ;
55161: LD_ADDR_VAR 0 30
55165: PUSH
55166: LD_VAR 0 30
55170: PUSH
55171: LD_VAR 0 4
55175: PUSH
55176: LD_VAR 0 7
55180: ARRAY
55181: DIFF
55182: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55183: LD_ADDR_VAR 0 31
55187: PUSH
55188: LD_VAR 0 31
55192: PUSH
55193: LD_VAR 0 4
55197: PUSH
55198: LD_VAR 0 7
55202: ARRAY
55203: DIFF
55204: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55205: LD_ADDR_VAR 0 4
55209: PUSH
55210: LD_VAR 0 4
55214: PPUSH
55215: LD_VAR 0 7
55219: PPUSH
55220: CALL_OW 3
55224: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55225: LD_ADDR_VAR 0 16
55229: PUSH
55230: LD_VAR 0 16
55234: PPUSH
55235: LD_VAR 0 7
55239: PPUSH
55240: CALL_OW 3
55244: ST_TO_ADDR
// continue ;
55245: GO 55085
// end ; if f_repair then
55247: LD_VAR 0 22
55251: IFFALSE 55740
// begin if GetType ( group [ i ] ) = unit_vehicle then
55253: LD_VAR 0 4
55257: PUSH
55258: LD_VAR 0 7
55262: ARRAY
55263: PPUSH
55264: CALL_OW 247
55268: PUSH
55269: LD_INT 2
55271: EQUAL
55272: IFFALSE 55462
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55274: LD_VAR 0 4
55278: PUSH
55279: LD_VAR 0 7
55283: ARRAY
55284: PPUSH
55285: CALL_OW 256
55289: PUSH
55290: LD_INT 700
55292: LESS
55293: PUSH
55294: LD_VAR 0 4
55298: PUSH
55299: LD_VAR 0 7
55303: ARRAY
55304: PUSH
55305: LD_VAR 0 32
55309: IN
55310: NOT
55311: AND
55312: IFFALSE 55336
// to_repair := to_repair union group [ i ] ;
55314: LD_ADDR_VAR 0 32
55318: PUSH
55319: LD_VAR 0 32
55323: PUSH
55324: LD_VAR 0 4
55328: PUSH
55329: LD_VAR 0 7
55333: ARRAY
55334: UNION
55335: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55336: LD_VAR 0 4
55340: PUSH
55341: LD_VAR 0 7
55345: ARRAY
55346: PPUSH
55347: CALL_OW 256
55351: PUSH
55352: LD_INT 1000
55354: EQUAL
55355: PUSH
55356: LD_VAR 0 4
55360: PUSH
55361: LD_VAR 0 7
55365: ARRAY
55366: PUSH
55367: LD_VAR 0 32
55371: IN
55372: AND
55373: IFFALSE 55397
// to_repair := to_repair diff group [ i ] ;
55375: LD_ADDR_VAR 0 32
55379: PUSH
55380: LD_VAR 0 32
55384: PUSH
55385: LD_VAR 0 4
55389: PUSH
55390: LD_VAR 0 7
55394: ARRAY
55395: DIFF
55396: ST_TO_ADDR
// if group [ i ] in to_repair then
55397: LD_VAR 0 4
55401: PUSH
55402: LD_VAR 0 7
55406: ARRAY
55407: PUSH
55408: LD_VAR 0 32
55412: IN
55413: IFFALSE 55460
// begin if not IsInArea ( group [ i ] , f_repair ) then
55415: LD_VAR 0 4
55419: PUSH
55420: LD_VAR 0 7
55424: ARRAY
55425: PPUSH
55426: LD_VAR 0 22
55430: PPUSH
55431: CALL_OW 308
55435: NOT
55436: IFFALSE 55458
// ComMoveToArea ( group [ i ] , f_repair ) ;
55438: LD_VAR 0 4
55442: PUSH
55443: LD_VAR 0 7
55447: ARRAY
55448: PPUSH
55449: LD_VAR 0 22
55453: PPUSH
55454: CALL_OW 113
// continue ;
55458: GO 55085
// end ; end else
55460: GO 55740
// if group [ i ] in repairs then
55462: LD_VAR 0 4
55466: PUSH
55467: LD_VAR 0 7
55471: ARRAY
55472: PUSH
55473: LD_VAR 0 33
55477: IN
55478: IFFALSE 55740
// begin if IsInUnit ( group [ i ] ) then
55480: LD_VAR 0 4
55484: PUSH
55485: LD_VAR 0 7
55489: ARRAY
55490: PPUSH
55491: CALL_OW 310
55495: IFFALSE 55563
// begin z := IsInUnit ( group [ i ] ) ;
55497: LD_ADDR_VAR 0 13
55501: PUSH
55502: LD_VAR 0 4
55506: PUSH
55507: LD_VAR 0 7
55511: ARRAY
55512: PPUSH
55513: CALL_OW 310
55517: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
55518: LD_VAR 0 13
55522: PUSH
55523: LD_VAR 0 32
55527: IN
55528: PUSH
55529: LD_VAR 0 13
55533: PPUSH
55534: LD_VAR 0 22
55538: PPUSH
55539: CALL_OW 308
55543: AND
55544: IFFALSE 55561
// ComExitVehicle ( group [ i ] ) ;
55546: LD_VAR 0 4
55550: PUSH
55551: LD_VAR 0 7
55555: ARRAY
55556: PPUSH
55557: CALL_OW 121
// end else
55561: GO 55740
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
55563: LD_ADDR_VAR 0 13
55567: PUSH
55568: LD_VAR 0 4
55572: PPUSH
55573: LD_INT 95
55575: PUSH
55576: LD_VAR 0 22
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 58
55587: PUSH
55588: EMPTY
55589: LIST
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PPUSH
55595: CALL_OW 72
55599: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
55600: LD_VAR 0 4
55604: PUSH
55605: LD_VAR 0 7
55609: ARRAY
55610: PPUSH
55611: CALL_OW 314
55615: NOT
55616: IFFALSE 55738
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
55618: LD_ADDR_VAR 0 10
55622: PUSH
55623: LD_VAR 0 13
55627: PPUSH
55628: LD_VAR 0 4
55632: PUSH
55633: LD_VAR 0 7
55637: ARRAY
55638: PPUSH
55639: CALL_OW 74
55643: ST_TO_ADDR
// if not x then
55644: LD_VAR 0 10
55648: NOT
55649: IFFALSE 55653
// continue ;
55651: GO 55085
// if GetLives ( x ) < 1000 then
55653: LD_VAR 0 10
55657: PPUSH
55658: CALL_OW 256
55662: PUSH
55663: LD_INT 1000
55665: LESS
55666: IFFALSE 55690
// ComRepairVehicle ( group [ i ] , x ) else
55668: LD_VAR 0 4
55672: PUSH
55673: LD_VAR 0 7
55677: ARRAY
55678: PPUSH
55679: LD_VAR 0 10
55683: PPUSH
55684: CALL_OW 129
55688: GO 55738
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
55690: LD_VAR 0 23
55694: PUSH
55695: LD_VAR 0 4
55699: PUSH
55700: LD_VAR 0 7
55704: ARRAY
55705: PPUSH
55706: CALL_OW 256
55710: PUSH
55711: LD_INT 1000
55713: LESS
55714: AND
55715: NOT
55716: IFFALSE 55738
// ComEnterUnit ( group [ i ] , x ) ;
55718: LD_VAR 0 4
55722: PUSH
55723: LD_VAR 0 7
55727: ARRAY
55728: PPUSH
55729: LD_VAR 0 10
55733: PPUSH
55734: CALL_OW 120
// end ; continue ;
55738: GO 55085
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
55740: LD_VAR 0 23
55744: PUSH
55745: LD_VAR 0 4
55749: PUSH
55750: LD_VAR 0 7
55754: ARRAY
55755: PPUSH
55756: CALL_OW 247
55760: PUSH
55761: LD_INT 1
55763: EQUAL
55764: AND
55765: IFFALSE 56243
// begin if group [ i ] in healers then
55767: LD_VAR 0 4
55771: PUSH
55772: LD_VAR 0 7
55776: ARRAY
55777: PUSH
55778: LD_VAR 0 31
55782: IN
55783: IFFALSE 56056
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
55785: LD_VAR 0 4
55789: PUSH
55790: LD_VAR 0 7
55794: ARRAY
55795: PPUSH
55796: LD_VAR 0 23
55800: PPUSH
55801: CALL_OW 308
55805: NOT
55806: PUSH
55807: LD_VAR 0 4
55811: PUSH
55812: LD_VAR 0 7
55816: ARRAY
55817: PPUSH
55818: CALL_OW 314
55822: NOT
55823: AND
55824: IFFALSE 55848
// ComMoveToArea ( group [ i ] , f_heal ) else
55826: LD_VAR 0 4
55830: PUSH
55831: LD_VAR 0 7
55835: ARRAY
55836: PPUSH
55837: LD_VAR 0 23
55841: PPUSH
55842: CALL_OW 113
55846: GO 56054
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
55848: LD_VAR 0 4
55852: PUSH
55853: LD_VAR 0 7
55857: ARRAY
55858: PPUSH
55859: CALL 54466 0 1
55863: PPUSH
55864: CALL_OW 256
55868: PUSH
55869: LD_INT 1000
55871: EQUAL
55872: IFFALSE 55891
// ComStop ( group [ i ] ) else
55874: LD_VAR 0 4
55878: PUSH
55879: LD_VAR 0 7
55883: ARRAY
55884: PPUSH
55885: CALL_OW 141
55889: GO 56054
// if not HasTask ( group [ i ] ) and to_heal then
55891: LD_VAR 0 4
55895: PUSH
55896: LD_VAR 0 7
55900: ARRAY
55901: PPUSH
55902: CALL_OW 314
55906: NOT
55907: PUSH
55908: LD_VAR 0 30
55912: AND
55913: IFFALSE 56054
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
55915: LD_ADDR_VAR 0 13
55919: PUSH
55920: LD_VAR 0 30
55924: PPUSH
55925: LD_INT 3
55927: PUSH
55928: LD_INT 54
55930: PUSH
55931: EMPTY
55932: LIST
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PPUSH
55938: CALL_OW 72
55942: PPUSH
55943: LD_VAR 0 4
55947: PUSH
55948: LD_VAR 0 7
55952: ARRAY
55953: PPUSH
55954: CALL_OW 74
55958: ST_TO_ADDR
// if z then
55959: LD_VAR 0 13
55963: IFFALSE 56054
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
55965: LD_INT 91
55967: PUSH
55968: LD_VAR 0 13
55972: PUSH
55973: LD_INT 10
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 81
55983: PUSH
55984: LD_VAR 0 13
55988: PPUSH
55989: CALL_OW 255
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PPUSH
56002: CALL_OW 69
56006: PUSH
56007: LD_INT 0
56009: EQUAL
56010: IFFALSE 56034
// ComHeal ( group [ i ] , z ) else
56012: LD_VAR 0 4
56016: PUSH
56017: LD_VAR 0 7
56021: ARRAY
56022: PPUSH
56023: LD_VAR 0 13
56027: PPUSH
56028: CALL_OW 128
56032: GO 56054
// ComMoveToArea ( group [ i ] , f_heal ) ;
56034: LD_VAR 0 4
56038: PUSH
56039: LD_VAR 0 7
56043: ARRAY
56044: PPUSH
56045: LD_VAR 0 23
56049: PPUSH
56050: CALL_OW 113
// end ; continue ;
56054: GO 55085
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56056: LD_VAR 0 4
56060: PUSH
56061: LD_VAR 0 7
56065: ARRAY
56066: PPUSH
56067: CALL_OW 256
56071: PUSH
56072: LD_INT 700
56074: LESS
56075: PUSH
56076: LD_VAR 0 4
56080: PUSH
56081: LD_VAR 0 7
56085: ARRAY
56086: PUSH
56087: LD_VAR 0 30
56091: IN
56092: NOT
56093: AND
56094: IFFALSE 56118
// to_heal := to_heal union group [ i ] ;
56096: LD_ADDR_VAR 0 30
56100: PUSH
56101: LD_VAR 0 30
56105: PUSH
56106: LD_VAR 0 4
56110: PUSH
56111: LD_VAR 0 7
56115: ARRAY
56116: UNION
56117: ST_TO_ADDR
// if group [ i ] in to_heal then
56118: LD_VAR 0 4
56122: PUSH
56123: LD_VAR 0 7
56127: ARRAY
56128: PUSH
56129: LD_VAR 0 30
56133: IN
56134: IFFALSE 56243
// begin if GetLives ( group [ i ] ) = 1000 then
56136: LD_VAR 0 4
56140: PUSH
56141: LD_VAR 0 7
56145: ARRAY
56146: PPUSH
56147: CALL_OW 256
56151: PUSH
56152: LD_INT 1000
56154: EQUAL
56155: IFFALSE 56181
// to_heal := to_heal diff group [ i ] else
56157: LD_ADDR_VAR 0 30
56161: PUSH
56162: LD_VAR 0 30
56166: PUSH
56167: LD_VAR 0 4
56171: PUSH
56172: LD_VAR 0 7
56176: ARRAY
56177: DIFF
56178: ST_TO_ADDR
56179: GO 56243
// begin if not IsInArea ( group [ i ] , to_heal ) then
56181: LD_VAR 0 4
56185: PUSH
56186: LD_VAR 0 7
56190: ARRAY
56191: PPUSH
56192: LD_VAR 0 30
56196: PPUSH
56197: CALL_OW 308
56201: NOT
56202: IFFALSE 56226
// ComMoveToArea ( group [ i ] , f_heal ) else
56204: LD_VAR 0 4
56208: PUSH
56209: LD_VAR 0 7
56213: ARRAY
56214: PPUSH
56215: LD_VAR 0 23
56219: PPUSH
56220: CALL_OW 113
56224: GO 56241
// ComHold ( group [ i ] ) ;
56226: LD_VAR 0 4
56230: PUSH
56231: LD_VAR 0 7
56235: ARRAY
56236: PPUSH
56237: CALL_OW 140
// continue ;
56241: GO 55085
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56243: LD_VAR 0 4
56247: PUSH
56248: LD_VAR 0 7
56252: ARRAY
56253: PPUSH
56254: LD_INT 10
56256: PPUSH
56257: CALL 52863 0 2
56261: NOT
56262: PUSH
56263: LD_VAR 0 16
56267: PUSH
56268: LD_VAR 0 7
56272: ARRAY
56273: PUSH
56274: EMPTY
56275: EQUAL
56276: NOT
56277: AND
56278: IFFALSE 56544
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56280: LD_VAR 0 4
56284: PUSH
56285: LD_VAR 0 7
56289: ARRAY
56290: PPUSH
56291: CALL_OW 262
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: IN
56306: IFFALSE 56347
// if GetFuel ( group [ i ] ) < 10 then
56308: LD_VAR 0 4
56312: PUSH
56313: LD_VAR 0 7
56317: ARRAY
56318: PPUSH
56319: CALL_OW 261
56323: PUSH
56324: LD_INT 10
56326: LESS
56327: IFFALSE 56347
// SetFuel ( group [ i ] , 12 ) ;
56329: LD_VAR 0 4
56333: PUSH
56334: LD_VAR 0 7
56338: ARRAY
56339: PPUSH
56340: LD_INT 12
56342: PPUSH
56343: CALL_OW 240
// if units_path [ i ] then
56347: LD_VAR 0 16
56351: PUSH
56352: LD_VAR 0 7
56356: ARRAY
56357: IFFALSE 56542
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56359: LD_VAR 0 4
56363: PUSH
56364: LD_VAR 0 7
56368: ARRAY
56369: PPUSH
56370: LD_VAR 0 16
56374: PUSH
56375: LD_VAR 0 7
56379: ARRAY
56380: PUSH
56381: LD_INT 1
56383: ARRAY
56384: PUSH
56385: LD_INT 1
56387: ARRAY
56388: PPUSH
56389: LD_VAR 0 16
56393: PUSH
56394: LD_VAR 0 7
56398: ARRAY
56399: PUSH
56400: LD_INT 1
56402: ARRAY
56403: PUSH
56404: LD_INT 2
56406: ARRAY
56407: PPUSH
56408: CALL_OW 297
56412: PUSH
56413: LD_INT 6
56415: GREATER
56416: IFFALSE 56491
// begin if not HasTask ( group [ i ] ) then
56418: LD_VAR 0 4
56422: PUSH
56423: LD_VAR 0 7
56427: ARRAY
56428: PPUSH
56429: CALL_OW 314
56433: NOT
56434: IFFALSE 56489
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
56436: LD_VAR 0 4
56440: PUSH
56441: LD_VAR 0 7
56445: ARRAY
56446: PPUSH
56447: LD_VAR 0 16
56451: PUSH
56452: LD_VAR 0 7
56456: ARRAY
56457: PUSH
56458: LD_INT 1
56460: ARRAY
56461: PUSH
56462: LD_INT 1
56464: ARRAY
56465: PPUSH
56466: LD_VAR 0 16
56470: PUSH
56471: LD_VAR 0 7
56475: ARRAY
56476: PUSH
56477: LD_INT 1
56479: ARRAY
56480: PUSH
56481: LD_INT 2
56483: ARRAY
56484: PPUSH
56485: CALL_OW 114
// end else
56489: GO 56542
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
56491: LD_ADDR_VAR 0 15
56495: PUSH
56496: LD_VAR 0 16
56500: PUSH
56501: LD_VAR 0 7
56505: ARRAY
56506: PPUSH
56507: LD_INT 1
56509: PPUSH
56510: CALL_OW 3
56514: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
56515: LD_ADDR_VAR 0 16
56519: PUSH
56520: LD_VAR 0 16
56524: PPUSH
56525: LD_VAR 0 7
56529: PPUSH
56530: LD_VAR 0 15
56534: PPUSH
56535: CALL_OW 1
56539: ST_TO_ADDR
// continue ;
56540: GO 55085
// end ; end ; end else
56542: GO 59180
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
56544: LD_ADDR_VAR 0 14
56548: PUSH
56549: LD_INT 81
56551: PUSH
56552: LD_VAR 0 4
56556: PUSH
56557: LD_VAR 0 7
56561: ARRAY
56562: PPUSH
56563: CALL_OW 255
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PPUSH
56572: CALL_OW 69
56576: ST_TO_ADDR
// if not tmp then
56577: LD_VAR 0 14
56581: NOT
56582: IFFALSE 56586
// continue ;
56584: GO 55085
// if f_ignore_area then
56586: LD_VAR 0 17
56590: IFFALSE 56678
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
56592: LD_ADDR_VAR 0 15
56596: PUSH
56597: LD_VAR 0 14
56601: PPUSH
56602: LD_INT 3
56604: PUSH
56605: LD_INT 92
56607: PUSH
56608: LD_VAR 0 17
56612: PUSH
56613: LD_INT 1
56615: ARRAY
56616: PUSH
56617: LD_VAR 0 17
56621: PUSH
56622: LD_INT 2
56624: ARRAY
56625: PUSH
56626: LD_VAR 0 17
56630: PUSH
56631: LD_INT 3
56633: ARRAY
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PPUSH
56645: CALL_OW 72
56649: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56650: LD_VAR 0 14
56654: PUSH
56655: LD_VAR 0 15
56659: DIFF
56660: IFFALSE 56678
// tmp := tmp diff tmp2 ;
56662: LD_ADDR_VAR 0 14
56666: PUSH
56667: LD_VAR 0 14
56671: PUSH
56672: LD_VAR 0 15
56676: DIFF
56677: ST_TO_ADDR
// end ; if not f_murder then
56678: LD_VAR 0 20
56682: NOT
56683: IFFALSE 56741
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
56685: LD_ADDR_VAR 0 15
56689: PUSH
56690: LD_VAR 0 14
56694: PPUSH
56695: LD_INT 3
56697: PUSH
56698: LD_INT 50
56700: PUSH
56701: EMPTY
56702: LIST
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PPUSH
56708: CALL_OW 72
56712: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56713: LD_VAR 0 14
56717: PUSH
56718: LD_VAR 0 15
56722: DIFF
56723: IFFALSE 56741
// tmp := tmp diff tmp2 ;
56725: LD_ADDR_VAR 0 14
56729: PUSH
56730: LD_VAR 0 14
56734: PUSH
56735: LD_VAR 0 15
56739: DIFF
56740: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
56741: LD_ADDR_VAR 0 14
56745: PUSH
56746: LD_VAR 0 4
56750: PUSH
56751: LD_VAR 0 7
56755: ARRAY
56756: PPUSH
56757: LD_VAR 0 14
56761: PPUSH
56762: LD_INT 1
56764: PPUSH
56765: LD_INT 1
56767: PPUSH
56768: CALL 26506 0 4
56772: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
56773: LD_VAR 0 4
56777: PUSH
56778: LD_VAR 0 7
56782: ARRAY
56783: PPUSH
56784: CALL_OW 257
56788: PUSH
56789: LD_INT 1
56791: EQUAL
56792: IFFALSE 57240
// begin if WantPlant ( group [ i ] ) then
56794: LD_VAR 0 4
56798: PUSH
56799: LD_VAR 0 7
56803: ARRAY
56804: PPUSH
56805: CALL 26007 0 1
56809: IFFALSE 56813
// continue ;
56811: GO 55085
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
56813: LD_VAR 0 18
56817: PUSH
56818: LD_VAR 0 4
56822: PUSH
56823: LD_VAR 0 7
56827: ARRAY
56828: PPUSH
56829: CALL_OW 310
56833: NOT
56834: AND
56835: PUSH
56836: LD_VAR 0 14
56840: PUSH
56841: LD_INT 1
56843: ARRAY
56844: PUSH
56845: LD_VAR 0 14
56849: PPUSH
56850: LD_INT 21
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 58
56862: PUSH
56863: EMPTY
56864: LIST
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PPUSH
56870: CALL_OW 72
56874: IN
56875: AND
56876: IFFALSE 56912
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
56878: LD_VAR 0 4
56882: PUSH
56883: LD_VAR 0 7
56887: ARRAY
56888: PPUSH
56889: LD_VAR 0 14
56893: PUSH
56894: LD_INT 1
56896: ARRAY
56897: PPUSH
56898: CALL_OW 120
// attacking := true ;
56902: LD_ADDR_VAR 0 29
56906: PUSH
56907: LD_INT 1
56909: ST_TO_ADDR
// continue ;
56910: GO 55085
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
56912: LD_VAR 0 26
56916: PUSH
56917: LD_VAR 0 4
56921: PUSH
56922: LD_VAR 0 7
56926: ARRAY
56927: PPUSH
56928: CALL_OW 257
56932: PUSH
56933: LD_INT 1
56935: EQUAL
56936: AND
56937: PUSH
56938: LD_VAR 0 4
56942: PUSH
56943: LD_VAR 0 7
56947: ARRAY
56948: PPUSH
56949: CALL_OW 256
56953: PUSH
56954: LD_INT 800
56956: LESS
56957: AND
56958: PUSH
56959: LD_VAR 0 4
56963: PUSH
56964: LD_VAR 0 7
56968: ARRAY
56969: PPUSH
56970: CALL_OW 318
56974: NOT
56975: AND
56976: IFFALSE 56993
// ComCrawl ( group [ i ] ) ;
56978: LD_VAR 0 4
56982: PUSH
56983: LD_VAR 0 7
56987: ARRAY
56988: PPUSH
56989: CALL_OW 137
// if f_mines then
56993: LD_VAR 0 21
56997: IFFALSE 57240
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
56999: LD_VAR 0 14
57003: PUSH
57004: LD_INT 1
57006: ARRAY
57007: PPUSH
57008: CALL_OW 247
57012: PUSH
57013: LD_INT 3
57015: EQUAL
57016: PUSH
57017: LD_VAR 0 14
57021: PUSH
57022: LD_INT 1
57024: ARRAY
57025: PUSH
57026: LD_VAR 0 27
57030: IN
57031: NOT
57032: AND
57033: IFFALSE 57240
// begin x := GetX ( tmp [ 1 ] ) ;
57035: LD_ADDR_VAR 0 10
57039: PUSH
57040: LD_VAR 0 14
57044: PUSH
57045: LD_INT 1
57047: ARRAY
57048: PPUSH
57049: CALL_OW 250
57053: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57054: LD_ADDR_VAR 0 11
57058: PUSH
57059: LD_VAR 0 14
57063: PUSH
57064: LD_INT 1
57066: ARRAY
57067: PPUSH
57068: CALL_OW 251
57072: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57073: LD_ADDR_VAR 0 12
57077: PUSH
57078: LD_VAR 0 4
57082: PUSH
57083: LD_VAR 0 7
57087: ARRAY
57088: PPUSH
57089: CALL 52948 0 1
57093: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57094: LD_VAR 0 4
57098: PUSH
57099: LD_VAR 0 7
57103: ARRAY
57104: PPUSH
57105: LD_VAR 0 10
57109: PPUSH
57110: LD_VAR 0 11
57114: PPUSH
57115: LD_VAR 0 14
57119: PUSH
57120: LD_INT 1
57122: ARRAY
57123: PPUSH
57124: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57128: LD_VAR 0 4
57132: PUSH
57133: LD_VAR 0 7
57137: ARRAY
57138: PPUSH
57139: LD_VAR 0 10
57143: PPUSH
57144: LD_VAR 0 12
57148: PPUSH
57149: LD_INT 7
57151: PPUSH
57152: CALL_OW 272
57156: PPUSH
57157: LD_VAR 0 11
57161: PPUSH
57162: LD_VAR 0 12
57166: PPUSH
57167: LD_INT 7
57169: PPUSH
57170: CALL_OW 273
57174: PPUSH
57175: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57179: LD_VAR 0 4
57183: PUSH
57184: LD_VAR 0 7
57188: ARRAY
57189: PPUSH
57190: LD_INT 71
57192: PPUSH
57193: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57197: LD_ADDR_VAR 0 27
57201: PUSH
57202: LD_VAR 0 27
57206: PPUSH
57207: LD_VAR 0 27
57211: PUSH
57212: LD_INT 1
57214: PLUS
57215: PPUSH
57216: LD_VAR 0 14
57220: PUSH
57221: LD_INT 1
57223: ARRAY
57224: PPUSH
57225: CALL_OW 1
57229: ST_TO_ADDR
// attacking := true ;
57230: LD_ADDR_VAR 0 29
57234: PUSH
57235: LD_INT 1
57237: ST_TO_ADDR
// continue ;
57238: GO 55085
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57240: LD_VAR 0 4
57244: PUSH
57245: LD_VAR 0 7
57249: ARRAY
57250: PPUSH
57251: CALL_OW 257
57255: PUSH
57256: LD_INT 17
57258: EQUAL
57259: PUSH
57260: LD_VAR 0 4
57264: PUSH
57265: LD_VAR 0 7
57269: ARRAY
57270: PPUSH
57271: CALL_OW 110
57275: PUSH
57276: LD_INT 71
57278: EQUAL
57279: NOT
57280: AND
57281: IFFALSE 57427
// begin attacking := false ;
57283: LD_ADDR_VAR 0 29
57287: PUSH
57288: LD_INT 0
57290: ST_TO_ADDR
// k := 5 ;
57291: LD_ADDR_VAR 0 9
57295: PUSH
57296: LD_INT 5
57298: ST_TO_ADDR
// if tmp < k then
57299: LD_VAR 0 14
57303: PUSH
57304: LD_VAR 0 9
57308: LESS
57309: IFFALSE 57321
// k := tmp ;
57311: LD_ADDR_VAR 0 9
57315: PUSH
57316: LD_VAR 0 14
57320: ST_TO_ADDR
// for j = 1 to k do
57321: LD_ADDR_VAR 0 8
57325: PUSH
57326: DOUBLE
57327: LD_INT 1
57329: DEC
57330: ST_TO_ADDR
57331: LD_VAR 0 9
57335: PUSH
57336: FOR_TO
57337: IFFALSE 57425
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57339: LD_VAR 0 14
57343: PUSH
57344: LD_VAR 0 8
57348: ARRAY
57349: PUSH
57350: LD_VAR 0 14
57354: PPUSH
57355: LD_INT 58
57357: PUSH
57358: EMPTY
57359: LIST
57360: PPUSH
57361: CALL_OW 72
57365: IN
57366: NOT
57367: IFFALSE 57423
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57369: LD_VAR 0 4
57373: PUSH
57374: LD_VAR 0 7
57378: ARRAY
57379: PPUSH
57380: LD_VAR 0 14
57384: PUSH
57385: LD_VAR 0 8
57389: ARRAY
57390: PPUSH
57391: CALL_OW 115
// attacking := true ;
57395: LD_ADDR_VAR 0 29
57399: PUSH
57400: LD_INT 1
57402: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
57403: LD_VAR 0 4
57407: PUSH
57408: LD_VAR 0 7
57412: ARRAY
57413: PPUSH
57414: LD_INT 71
57416: PPUSH
57417: CALL_OW 109
// continue ;
57421: GO 57336
// end ; end ;
57423: GO 57336
57425: POP
57426: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
57427: LD_VAR 0 4
57431: PUSH
57432: LD_VAR 0 7
57436: ARRAY
57437: PPUSH
57438: CALL_OW 257
57442: PUSH
57443: LD_INT 8
57445: EQUAL
57446: PUSH
57447: LD_VAR 0 4
57451: PUSH
57452: LD_VAR 0 7
57456: ARRAY
57457: PPUSH
57458: CALL_OW 264
57462: PUSH
57463: LD_INT 28
57465: PUSH
57466: LD_INT 45
57468: PUSH
57469: LD_INT 7
57471: PUSH
57472: LD_INT 47
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: IN
57481: OR
57482: IFFALSE 57712
// begin attacking := false ;
57484: LD_ADDR_VAR 0 29
57488: PUSH
57489: LD_INT 0
57491: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
57492: LD_VAR 0 14
57496: PUSH
57497: LD_INT 1
57499: ARRAY
57500: PPUSH
57501: CALL_OW 266
57505: PUSH
57506: LD_INT 32
57508: PUSH
57509: LD_INT 31
57511: PUSH
57512: LD_INT 33
57514: PUSH
57515: LD_INT 4
57517: PUSH
57518: LD_INT 5
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: IN
57528: IFFALSE 57712
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
57530: LD_ADDR_VAR 0 9
57534: PUSH
57535: LD_VAR 0 14
57539: PUSH
57540: LD_INT 1
57542: ARRAY
57543: PPUSH
57544: CALL_OW 266
57548: PPUSH
57549: LD_VAR 0 14
57553: PUSH
57554: LD_INT 1
57556: ARRAY
57557: PPUSH
57558: CALL_OW 250
57562: PPUSH
57563: LD_VAR 0 14
57567: PUSH
57568: LD_INT 1
57570: ARRAY
57571: PPUSH
57572: CALL_OW 251
57576: PPUSH
57577: LD_VAR 0 14
57581: PUSH
57582: LD_INT 1
57584: ARRAY
57585: PPUSH
57586: CALL_OW 254
57590: PPUSH
57591: LD_VAR 0 14
57595: PUSH
57596: LD_INT 1
57598: ARRAY
57599: PPUSH
57600: CALL_OW 248
57604: PPUSH
57605: LD_INT 0
57607: PPUSH
57608: CALL 34318 0 6
57612: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
57613: LD_ADDR_VAR 0 8
57617: PUSH
57618: LD_VAR 0 4
57622: PUSH
57623: LD_VAR 0 7
57627: ARRAY
57628: PPUSH
57629: LD_VAR 0 9
57633: PPUSH
57634: CALL 53011 0 2
57638: ST_TO_ADDR
// if j then
57639: LD_VAR 0 8
57643: IFFALSE 57712
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57645: LD_VAR 0 8
57649: PUSH
57650: LD_INT 1
57652: ARRAY
57653: PPUSH
57654: LD_VAR 0 8
57658: PUSH
57659: LD_INT 2
57661: ARRAY
57662: PPUSH
57663: CALL_OW 488
57667: IFFALSE 57712
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
57669: LD_VAR 0 4
57673: PUSH
57674: LD_VAR 0 7
57678: ARRAY
57679: PPUSH
57680: LD_VAR 0 8
57684: PUSH
57685: LD_INT 1
57687: ARRAY
57688: PPUSH
57689: LD_VAR 0 8
57693: PUSH
57694: LD_INT 2
57696: ARRAY
57697: PPUSH
57698: CALL_OW 116
// attacking := true ;
57702: LD_ADDR_VAR 0 29
57706: PUSH
57707: LD_INT 1
57709: ST_TO_ADDR
// continue ;
57710: GO 55085
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
57712: LD_VAR 0 4
57716: PUSH
57717: LD_VAR 0 7
57721: ARRAY
57722: PPUSH
57723: CALL_OW 265
57727: PUSH
57728: LD_INT 11
57730: EQUAL
57731: IFFALSE 58009
// begin k := 10 ;
57733: LD_ADDR_VAR 0 9
57737: PUSH
57738: LD_INT 10
57740: ST_TO_ADDR
// x := 0 ;
57741: LD_ADDR_VAR 0 10
57745: PUSH
57746: LD_INT 0
57748: ST_TO_ADDR
// if tmp < k then
57749: LD_VAR 0 14
57753: PUSH
57754: LD_VAR 0 9
57758: LESS
57759: IFFALSE 57771
// k := tmp ;
57761: LD_ADDR_VAR 0 9
57765: PUSH
57766: LD_VAR 0 14
57770: ST_TO_ADDR
// for j = k downto 1 do
57771: LD_ADDR_VAR 0 8
57775: PUSH
57776: DOUBLE
57777: LD_VAR 0 9
57781: INC
57782: ST_TO_ADDR
57783: LD_INT 1
57785: PUSH
57786: FOR_DOWNTO
57787: IFFALSE 57862
// begin if GetType ( tmp [ j ] ) = unit_human then
57789: LD_VAR 0 14
57793: PUSH
57794: LD_VAR 0 8
57798: ARRAY
57799: PPUSH
57800: CALL_OW 247
57804: PUSH
57805: LD_INT 1
57807: EQUAL
57808: IFFALSE 57860
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
57810: LD_VAR 0 4
57814: PUSH
57815: LD_VAR 0 7
57819: ARRAY
57820: PPUSH
57821: LD_VAR 0 14
57825: PUSH
57826: LD_VAR 0 8
57830: ARRAY
57831: PPUSH
57832: CALL 53282 0 2
// x := tmp [ j ] ;
57836: LD_ADDR_VAR 0 10
57840: PUSH
57841: LD_VAR 0 14
57845: PUSH
57846: LD_VAR 0 8
57850: ARRAY
57851: ST_TO_ADDR
// attacking := true ;
57852: LD_ADDR_VAR 0 29
57856: PUSH
57857: LD_INT 1
57859: ST_TO_ADDR
// end ; end ;
57860: GO 57786
57862: POP
57863: POP
// if not x then
57864: LD_VAR 0 10
57868: NOT
57869: IFFALSE 58009
// begin attacking := true ;
57871: LD_ADDR_VAR 0 29
57875: PUSH
57876: LD_INT 1
57878: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
57879: LD_VAR 0 4
57883: PUSH
57884: LD_VAR 0 7
57888: ARRAY
57889: PPUSH
57890: CALL_OW 250
57894: PPUSH
57895: LD_VAR 0 4
57899: PUSH
57900: LD_VAR 0 7
57904: ARRAY
57905: PPUSH
57906: CALL_OW 251
57910: PPUSH
57911: CALL_OW 546
57915: PUSH
57916: LD_INT 2
57918: ARRAY
57919: PUSH
57920: LD_VAR 0 14
57924: PUSH
57925: LD_INT 1
57927: ARRAY
57928: PPUSH
57929: CALL_OW 250
57933: PPUSH
57934: LD_VAR 0 14
57938: PUSH
57939: LD_INT 1
57941: ARRAY
57942: PPUSH
57943: CALL_OW 251
57947: PPUSH
57948: CALL_OW 546
57952: PUSH
57953: LD_INT 2
57955: ARRAY
57956: EQUAL
57957: IFFALSE 57985
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
57959: LD_VAR 0 4
57963: PUSH
57964: LD_VAR 0 7
57968: ARRAY
57969: PPUSH
57970: LD_VAR 0 14
57974: PUSH
57975: LD_INT 1
57977: ARRAY
57978: PPUSH
57979: CALL 53282 0 2
57983: GO 58009
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
57985: LD_VAR 0 4
57989: PUSH
57990: LD_VAR 0 7
57994: ARRAY
57995: PPUSH
57996: LD_VAR 0 14
58000: PUSH
58001: LD_INT 1
58003: ARRAY
58004: PPUSH
58005: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
58009: LD_VAR 0 4
58013: PUSH
58014: LD_VAR 0 7
58018: ARRAY
58019: PPUSH
58020: CALL_OW 264
58024: PUSH
58025: LD_INT 29
58027: EQUAL
58028: IFFALSE 58394
// begin if WantsToAttack ( group [ i ] ) in bombed then
58030: LD_VAR 0 4
58034: PUSH
58035: LD_VAR 0 7
58039: ARRAY
58040: PPUSH
58041: CALL_OW 319
58045: PUSH
58046: LD_VAR 0 28
58050: IN
58051: IFFALSE 58055
// continue ;
58053: GO 55085
// k := 8 ;
58055: LD_ADDR_VAR 0 9
58059: PUSH
58060: LD_INT 8
58062: ST_TO_ADDR
// x := 0 ;
58063: LD_ADDR_VAR 0 10
58067: PUSH
58068: LD_INT 0
58070: ST_TO_ADDR
// if tmp < k then
58071: LD_VAR 0 14
58075: PUSH
58076: LD_VAR 0 9
58080: LESS
58081: IFFALSE 58093
// k := tmp ;
58083: LD_ADDR_VAR 0 9
58087: PUSH
58088: LD_VAR 0 14
58092: ST_TO_ADDR
// for j = 1 to k do
58093: LD_ADDR_VAR 0 8
58097: PUSH
58098: DOUBLE
58099: LD_INT 1
58101: DEC
58102: ST_TO_ADDR
58103: LD_VAR 0 9
58107: PUSH
58108: FOR_TO
58109: IFFALSE 58241
// begin if GetType ( tmp [ j ] ) = unit_building then
58111: LD_VAR 0 14
58115: PUSH
58116: LD_VAR 0 8
58120: ARRAY
58121: PPUSH
58122: CALL_OW 247
58126: PUSH
58127: LD_INT 3
58129: EQUAL
58130: IFFALSE 58239
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58132: LD_VAR 0 14
58136: PUSH
58137: LD_VAR 0 8
58141: ARRAY
58142: PUSH
58143: LD_VAR 0 28
58147: IN
58148: NOT
58149: PUSH
58150: LD_VAR 0 14
58154: PUSH
58155: LD_VAR 0 8
58159: ARRAY
58160: PPUSH
58161: CALL_OW 313
58165: AND
58166: IFFALSE 58239
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58168: LD_VAR 0 4
58172: PUSH
58173: LD_VAR 0 7
58177: ARRAY
58178: PPUSH
58179: LD_VAR 0 14
58183: PUSH
58184: LD_VAR 0 8
58188: ARRAY
58189: PPUSH
58190: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58194: LD_ADDR_VAR 0 28
58198: PUSH
58199: LD_VAR 0 28
58203: PPUSH
58204: LD_VAR 0 28
58208: PUSH
58209: LD_INT 1
58211: PLUS
58212: PPUSH
58213: LD_VAR 0 14
58217: PUSH
58218: LD_VAR 0 8
58222: ARRAY
58223: PPUSH
58224: CALL_OW 1
58228: ST_TO_ADDR
// attacking := true ;
58229: LD_ADDR_VAR 0 29
58233: PUSH
58234: LD_INT 1
58236: ST_TO_ADDR
// break ;
58237: GO 58241
// end ; end ;
58239: GO 58108
58241: POP
58242: POP
// if not attacking and f_attack_depot then
58243: LD_VAR 0 29
58247: NOT
58248: PUSH
58249: LD_VAR 0 25
58253: AND
58254: IFFALSE 58349
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58256: LD_ADDR_VAR 0 13
58260: PUSH
58261: LD_VAR 0 14
58265: PPUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 30
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 30
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: LIST
58293: PPUSH
58294: CALL_OW 72
58298: ST_TO_ADDR
// if z then
58299: LD_VAR 0 13
58303: IFFALSE 58349
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58305: LD_VAR 0 4
58309: PUSH
58310: LD_VAR 0 7
58314: ARRAY
58315: PPUSH
58316: LD_VAR 0 13
58320: PPUSH
58321: LD_VAR 0 4
58325: PUSH
58326: LD_VAR 0 7
58330: ARRAY
58331: PPUSH
58332: CALL_OW 74
58336: PPUSH
58337: CALL_OW 115
// attacking := true ;
58341: LD_ADDR_VAR 0 29
58345: PUSH
58346: LD_INT 1
58348: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58349: LD_VAR 0 4
58353: PUSH
58354: LD_VAR 0 7
58358: ARRAY
58359: PPUSH
58360: CALL_OW 256
58364: PUSH
58365: LD_INT 500
58367: LESS
58368: IFFALSE 58394
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58370: LD_VAR 0 4
58374: PUSH
58375: LD_VAR 0 7
58379: ARRAY
58380: PPUSH
58381: LD_VAR 0 14
58385: PUSH
58386: LD_INT 1
58388: ARRAY
58389: PPUSH
58390: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58394: LD_VAR 0 4
58398: PUSH
58399: LD_VAR 0 7
58403: ARRAY
58404: PPUSH
58405: CALL_OW 264
58409: PUSH
58410: LD_INT 49
58412: EQUAL
58413: IFFALSE 58534
// begin if not HasTask ( group [ i ] ) then
58415: LD_VAR 0 4
58419: PUSH
58420: LD_VAR 0 7
58424: ARRAY
58425: PPUSH
58426: CALL_OW 314
58430: NOT
58431: IFFALSE 58534
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
58433: LD_ADDR_VAR 0 9
58437: PUSH
58438: LD_INT 81
58440: PUSH
58441: LD_VAR 0 4
58445: PUSH
58446: LD_VAR 0 7
58450: ARRAY
58451: PPUSH
58452: CALL_OW 255
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PPUSH
58461: CALL_OW 69
58465: PPUSH
58466: LD_VAR 0 4
58470: PUSH
58471: LD_VAR 0 7
58475: ARRAY
58476: PPUSH
58477: CALL_OW 74
58481: ST_TO_ADDR
// if k then
58482: LD_VAR 0 9
58486: IFFALSE 58534
// if GetDistUnits ( group [ i ] , k ) > 10 then
58488: LD_VAR 0 4
58492: PUSH
58493: LD_VAR 0 7
58497: ARRAY
58498: PPUSH
58499: LD_VAR 0 9
58503: PPUSH
58504: CALL_OW 296
58508: PUSH
58509: LD_INT 10
58511: GREATER
58512: IFFALSE 58534
// ComMoveUnit ( group [ i ] , k ) ;
58514: LD_VAR 0 4
58518: PUSH
58519: LD_VAR 0 7
58523: ARRAY
58524: PPUSH
58525: LD_VAR 0 9
58529: PPUSH
58530: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58534: LD_VAR 0 4
58538: PUSH
58539: LD_VAR 0 7
58543: ARRAY
58544: PPUSH
58545: CALL_OW 256
58549: PUSH
58550: LD_INT 250
58552: LESS
58553: PUSH
58554: LD_VAR 0 4
58558: PUSH
58559: LD_VAR 0 7
58563: ARRAY
58564: PUSH
58565: LD_INT 21
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 23
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PPUSH
58589: CALL_OW 69
58593: IN
58594: AND
58595: IFFALSE 58720
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
58597: LD_ADDR_VAR 0 9
58601: PUSH
58602: LD_OWVAR 3
58606: PUSH
58607: LD_VAR 0 4
58611: PUSH
58612: LD_VAR 0 7
58616: ARRAY
58617: DIFF
58618: PPUSH
58619: LD_VAR 0 4
58623: PUSH
58624: LD_VAR 0 7
58628: ARRAY
58629: PPUSH
58630: CALL_OW 74
58634: ST_TO_ADDR
// if not k then
58635: LD_VAR 0 9
58639: NOT
58640: IFFALSE 58644
// continue ;
58642: GO 55085
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
58644: LD_VAR 0 9
58648: PUSH
58649: LD_INT 81
58651: PUSH
58652: LD_VAR 0 4
58656: PUSH
58657: LD_VAR 0 7
58661: ARRAY
58662: PPUSH
58663: CALL_OW 255
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PPUSH
58672: CALL_OW 69
58676: IN
58677: PUSH
58678: LD_VAR 0 9
58682: PPUSH
58683: LD_VAR 0 4
58687: PUSH
58688: LD_VAR 0 7
58692: ARRAY
58693: PPUSH
58694: CALL_OW 296
58698: PUSH
58699: LD_INT 5
58701: LESS
58702: AND
58703: IFFALSE 58720
// ComAutodestruct ( group [ i ] ) ;
58705: LD_VAR 0 4
58709: PUSH
58710: LD_VAR 0 7
58714: ARRAY
58715: PPUSH
58716: CALL 53180 0 1
// end ; if f_attack_depot then
58720: LD_VAR 0 25
58724: IFFALSE 58836
// begin k := 6 ;
58726: LD_ADDR_VAR 0 9
58730: PUSH
58731: LD_INT 6
58733: ST_TO_ADDR
// if tmp < k then
58734: LD_VAR 0 14
58738: PUSH
58739: LD_VAR 0 9
58743: LESS
58744: IFFALSE 58756
// k := tmp ;
58746: LD_ADDR_VAR 0 9
58750: PUSH
58751: LD_VAR 0 14
58755: ST_TO_ADDR
// for j = 1 to k do
58756: LD_ADDR_VAR 0 8
58760: PUSH
58761: DOUBLE
58762: LD_INT 1
58764: DEC
58765: ST_TO_ADDR
58766: LD_VAR 0 9
58770: PUSH
58771: FOR_TO
58772: IFFALSE 58834
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
58774: LD_VAR 0 8
58778: PPUSH
58779: CALL_OW 266
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: IN
58794: IFFALSE 58832
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58796: LD_VAR 0 4
58800: PUSH
58801: LD_VAR 0 7
58805: ARRAY
58806: PPUSH
58807: LD_VAR 0 14
58811: PUSH
58812: LD_VAR 0 8
58816: ARRAY
58817: PPUSH
58818: CALL_OW 115
// attacking := true ;
58822: LD_ADDR_VAR 0 29
58826: PUSH
58827: LD_INT 1
58829: ST_TO_ADDR
// break ;
58830: GO 58834
// end ;
58832: GO 58771
58834: POP
58835: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
58836: LD_VAR 0 4
58840: PUSH
58841: LD_VAR 0 7
58845: ARRAY
58846: PPUSH
58847: CALL_OW 302
58851: PUSH
58852: LD_VAR 0 29
58856: NOT
58857: AND
58858: IFFALSE 59180
// begin if GetTag ( group [ i ] ) = 71 then
58860: LD_VAR 0 4
58864: PUSH
58865: LD_VAR 0 7
58869: ARRAY
58870: PPUSH
58871: CALL_OW 110
58875: PUSH
58876: LD_INT 71
58878: EQUAL
58879: IFFALSE 58920
// begin if HasTask ( group [ i ] ) then
58881: LD_VAR 0 4
58885: PUSH
58886: LD_VAR 0 7
58890: ARRAY
58891: PPUSH
58892: CALL_OW 314
58896: IFFALSE 58902
// continue else
58898: GO 55085
58900: GO 58920
// SetTag ( group [ i ] , 0 ) ;
58902: LD_VAR 0 4
58906: PUSH
58907: LD_VAR 0 7
58911: ARRAY
58912: PPUSH
58913: LD_INT 0
58915: PPUSH
58916: CALL_OW 109
// end ; k := 8 ;
58920: LD_ADDR_VAR 0 9
58924: PUSH
58925: LD_INT 8
58927: ST_TO_ADDR
// x := 0 ;
58928: LD_ADDR_VAR 0 10
58932: PUSH
58933: LD_INT 0
58935: ST_TO_ADDR
// if tmp < k then
58936: LD_VAR 0 14
58940: PUSH
58941: LD_VAR 0 9
58945: LESS
58946: IFFALSE 58958
// k := tmp ;
58948: LD_ADDR_VAR 0 9
58952: PUSH
58953: LD_VAR 0 14
58957: ST_TO_ADDR
// for j = 1 to k do
58958: LD_ADDR_VAR 0 8
58962: PUSH
58963: DOUBLE
58964: LD_INT 1
58966: DEC
58967: ST_TO_ADDR
58968: LD_VAR 0 9
58972: PUSH
58973: FOR_TO
58974: IFFALSE 59072
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
58976: LD_VAR 0 14
58980: PUSH
58981: LD_VAR 0 8
58985: ARRAY
58986: PPUSH
58987: CALL_OW 247
58991: PUSH
58992: LD_INT 1
58994: EQUAL
58995: PUSH
58996: LD_VAR 0 14
59000: PUSH
59001: LD_VAR 0 8
59005: ARRAY
59006: PPUSH
59007: CALL_OW 256
59011: PUSH
59012: LD_INT 250
59014: LESS
59015: PUSH
59016: LD_VAR 0 20
59020: AND
59021: PUSH
59022: LD_VAR 0 20
59026: NOT
59027: PUSH
59028: LD_VAR 0 14
59032: PUSH
59033: LD_VAR 0 8
59037: ARRAY
59038: PPUSH
59039: CALL_OW 256
59043: PUSH
59044: LD_INT 250
59046: GREATEREQUAL
59047: AND
59048: OR
59049: AND
59050: IFFALSE 59070
// begin x := tmp [ j ] ;
59052: LD_ADDR_VAR 0 10
59056: PUSH
59057: LD_VAR 0 14
59061: PUSH
59062: LD_VAR 0 8
59066: ARRAY
59067: ST_TO_ADDR
// break ;
59068: GO 59072
// end ;
59070: GO 58973
59072: POP
59073: POP
// if x then
59074: LD_VAR 0 10
59078: IFFALSE 59102
// ComAttackUnit ( group [ i ] , x ) else
59080: LD_VAR 0 4
59084: PUSH
59085: LD_VAR 0 7
59089: ARRAY
59090: PPUSH
59091: LD_VAR 0 10
59095: PPUSH
59096: CALL_OW 115
59100: GO 59126
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59102: LD_VAR 0 4
59106: PUSH
59107: LD_VAR 0 7
59111: ARRAY
59112: PPUSH
59113: LD_VAR 0 14
59117: PUSH
59118: LD_INT 1
59120: ARRAY
59121: PPUSH
59122: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59126: LD_VAR 0 4
59130: PUSH
59131: LD_VAR 0 7
59135: ARRAY
59136: PPUSH
59137: CALL_OW 314
59141: NOT
59142: IFFALSE 59180
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59144: LD_VAR 0 4
59148: PUSH
59149: LD_VAR 0 7
59153: ARRAY
59154: PPUSH
59155: LD_VAR 0 14
59159: PPUSH
59160: LD_VAR 0 4
59164: PUSH
59165: LD_VAR 0 7
59169: ARRAY
59170: PPUSH
59171: CALL_OW 74
59175: PPUSH
59176: CALL_OW 115
// end ; end ; end ;
59180: GO 55085
59182: POP
59183: POP
// wait ( 0 0$1 ) ;
59184: LD_INT 35
59186: PPUSH
59187: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59191: LD_VAR 0 4
59195: PUSH
59196: EMPTY
59197: EQUAL
59198: PUSH
59199: LD_INT 81
59201: PUSH
59202: LD_VAR 0 35
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PPUSH
59211: CALL_OW 69
59215: NOT
59216: OR
59217: IFFALSE 55070
// end ;
59219: LD_VAR 0 2
59223: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59224: LD_INT 0
59226: PPUSH
59227: PPUSH
59228: PPUSH
59229: PPUSH
// if not base_units then
59230: LD_VAR 0 1
59234: NOT
59235: IFFALSE 59239
// exit ;
59237: GO 59326
// result := false ;
59239: LD_ADDR_VAR 0 2
59243: PUSH
59244: LD_INT 0
59246: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59247: LD_ADDR_VAR 0 5
59251: PUSH
59252: LD_VAR 0 1
59256: PPUSH
59257: LD_INT 21
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PPUSH
59267: CALL_OW 72
59271: ST_TO_ADDR
// if not tmp then
59272: LD_VAR 0 5
59276: NOT
59277: IFFALSE 59281
// exit ;
59279: GO 59326
// for i in tmp do
59281: LD_ADDR_VAR 0 3
59285: PUSH
59286: LD_VAR 0 5
59290: PUSH
59291: FOR_IN
59292: IFFALSE 59324
// begin result := EnemyInRange ( i , 22 ) ;
59294: LD_ADDR_VAR 0 2
59298: PUSH
59299: LD_VAR 0 3
59303: PPUSH
59304: LD_INT 22
59306: PPUSH
59307: CALL 52863 0 2
59311: ST_TO_ADDR
// if result then
59312: LD_VAR 0 2
59316: IFFALSE 59322
// exit ;
59318: POP
59319: POP
59320: GO 59326
// end ;
59322: GO 59291
59324: POP
59325: POP
// end ;
59326: LD_VAR 0 2
59330: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59331: LD_INT 0
59333: PPUSH
59334: PPUSH
// if not units then
59335: LD_VAR 0 1
59339: NOT
59340: IFFALSE 59344
// exit ;
59342: GO 59414
// result := [ ] ;
59344: LD_ADDR_VAR 0 3
59348: PUSH
59349: EMPTY
59350: ST_TO_ADDR
// for i in units do
59351: LD_ADDR_VAR 0 4
59355: PUSH
59356: LD_VAR 0 1
59360: PUSH
59361: FOR_IN
59362: IFFALSE 59412
// if GetTag ( i ) = tag then
59364: LD_VAR 0 4
59368: PPUSH
59369: CALL_OW 110
59373: PUSH
59374: LD_VAR 0 2
59378: EQUAL
59379: IFFALSE 59410
// result := Insert ( result , result + 1 , i ) ;
59381: LD_ADDR_VAR 0 3
59385: PUSH
59386: LD_VAR 0 3
59390: PPUSH
59391: LD_VAR 0 3
59395: PUSH
59396: LD_INT 1
59398: PLUS
59399: PPUSH
59400: LD_VAR 0 4
59404: PPUSH
59405: CALL_OW 2
59409: ST_TO_ADDR
59410: GO 59361
59412: POP
59413: POP
// end ;
59414: LD_VAR 0 3
59418: RET
// export function IsDriver ( un ) ; begin
59419: LD_INT 0
59421: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59422: LD_ADDR_VAR 0 2
59426: PUSH
59427: LD_VAR 0 1
59431: PUSH
59432: LD_INT 55
59434: PUSH
59435: EMPTY
59436: LIST
59437: PPUSH
59438: CALL_OW 69
59442: IN
59443: ST_TO_ADDR
// end ;
59444: LD_VAR 0 2
59448: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59449: LD_INT 0
59451: PPUSH
59452: PPUSH
// list := [ ] ;
59453: LD_ADDR_VAR 0 5
59457: PUSH
59458: EMPTY
59459: ST_TO_ADDR
// case d of 0 :
59460: LD_VAR 0 3
59464: PUSH
59465: LD_INT 0
59467: DOUBLE
59468: EQUAL
59469: IFTRUE 59473
59471: GO 59606
59473: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59474: LD_ADDR_VAR 0 5
59478: PUSH
59479: LD_VAR 0 1
59483: PUSH
59484: LD_INT 4
59486: MINUS
59487: PUSH
59488: LD_VAR 0 2
59492: PUSH
59493: LD_INT 4
59495: MINUS
59496: PUSH
59497: LD_INT 2
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: LIST
59504: PUSH
59505: LD_VAR 0 1
59509: PUSH
59510: LD_INT 3
59512: MINUS
59513: PUSH
59514: LD_VAR 0 2
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: LIST
59526: PUSH
59527: LD_VAR 0 1
59531: PUSH
59532: LD_INT 4
59534: PLUS
59535: PUSH
59536: LD_VAR 0 2
59540: PUSH
59541: LD_INT 4
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: LIST
59548: PUSH
59549: LD_VAR 0 1
59553: PUSH
59554: LD_INT 3
59556: PLUS
59557: PUSH
59558: LD_VAR 0 2
59562: PUSH
59563: LD_INT 3
59565: PLUS
59566: PUSH
59567: LD_INT 5
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: LIST
59574: PUSH
59575: LD_VAR 0 1
59579: PUSH
59580: LD_VAR 0 2
59584: PUSH
59585: LD_INT 4
59587: PLUS
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: LIST
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: ST_TO_ADDR
// end ; 1 :
59604: GO 60304
59606: LD_INT 1
59608: DOUBLE
59609: EQUAL
59610: IFTRUE 59614
59612: GO 59747
59614: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59615: LD_ADDR_VAR 0 5
59619: PUSH
59620: LD_VAR 0 1
59624: PUSH
59625: LD_VAR 0 2
59629: PUSH
59630: LD_INT 4
59632: MINUS
59633: PUSH
59634: LD_INT 3
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: LIST
59641: PUSH
59642: LD_VAR 0 1
59646: PUSH
59647: LD_INT 3
59649: MINUS
59650: PUSH
59651: LD_VAR 0 2
59655: PUSH
59656: LD_INT 3
59658: MINUS
59659: PUSH
59660: LD_INT 2
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: LIST
59667: PUSH
59668: LD_VAR 0 1
59672: PUSH
59673: LD_INT 4
59675: MINUS
59676: PUSH
59677: LD_VAR 0 2
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: LIST
59689: PUSH
59690: LD_VAR 0 1
59694: PUSH
59695: LD_VAR 0 2
59699: PUSH
59700: LD_INT 3
59702: PLUS
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: LIST
59711: PUSH
59712: LD_VAR 0 1
59716: PUSH
59717: LD_INT 4
59719: PLUS
59720: PUSH
59721: LD_VAR 0 2
59725: PUSH
59726: LD_INT 4
59728: PLUS
59729: PUSH
59730: LD_INT 5
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: LIST
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: ST_TO_ADDR
// end ; 2 :
59745: GO 60304
59747: LD_INT 2
59749: DOUBLE
59750: EQUAL
59751: IFTRUE 59755
59753: GO 59884
59755: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59756: LD_ADDR_VAR 0 5
59760: PUSH
59761: LD_VAR 0 1
59765: PUSH
59766: LD_VAR 0 2
59770: PUSH
59771: LD_INT 3
59773: MINUS
59774: PUSH
59775: LD_INT 3
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: LIST
59782: PUSH
59783: LD_VAR 0 1
59787: PUSH
59788: LD_INT 4
59790: PLUS
59791: PUSH
59792: LD_VAR 0 2
59796: PUSH
59797: LD_INT 4
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: LIST
59804: PUSH
59805: LD_VAR 0 1
59809: PUSH
59810: LD_VAR 0 2
59814: PUSH
59815: LD_INT 4
59817: PLUS
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: LIST
59826: PUSH
59827: LD_VAR 0 1
59831: PUSH
59832: LD_INT 3
59834: MINUS
59835: PUSH
59836: LD_VAR 0 2
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: LIST
59848: PUSH
59849: LD_VAR 0 1
59853: PUSH
59854: LD_INT 4
59856: MINUS
59857: PUSH
59858: LD_VAR 0 2
59862: PUSH
59863: LD_INT 4
59865: MINUS
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: LIST
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: ST_TO_ADDR
// end ; 3 :
59882: GO 60304
59884: LD_INT 3
59886: DOUBLE
59887: EQUAL
59888: IFTRUE 59892
59890: GO 60025
59892: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59893: LD_ADDR_VAR 0 5
59897: PUSH
59898: LD_VAR 0 1
59902: PUSH
59903: LD_INT 3
59905: PLUS
59906: PUSH
59907: LD_VAR 0 2
59911: PUSH
59912: LD_INT 4
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: LIST
59919: PUSH
59920: LD_VAR 0 1
59924: PUSH
59925: LD_INT 4
59927: PLUS
59928: PUSH
59929: LD_VAR 0 2
59933: PUSH
59934: LD_INT 4
59936: PLUS
59937: PUSH
59938: LD_INT 5
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: LIST
59945: PUSH
59946: LD_VAR 0 1
59950: PUSH
59951: LD_INT 4
59953: MINUS
59954: PUSH
59955: LD_VAR 0 2
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: LIST
59967: PUSH
59968: LD_VAR 0 1
59972: PUSH
59973: LD_VAR 0 2
59977: PUSH
59978: LD_INT 4
59980: MINUS
59981: PUSH
59982: LD_INT 3
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: LIST
59989: PUSH
59990: LD_VAR 0 1
59994: PUSH
59995: LD_INT 3
59997: MINUS
59998: PUSH
59999: LD_VAR 0 2
60003: PUSH
60004: LD_INT 3
60006: MINUS
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: LIST
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: ST_TO_ADDR
// end ; 4 :
60023: GO 60304
60025: LD_INT 4
60027: DOUBLE
60028: EQUAL
60029: IFTRUE 60033
60031: GO 60166
60033: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60034: LD_ADDR_VAR 0 5
60038: PUSH
60039: LD_VAR 0 1
60043: PUSH
60044: LD_VAR 0 2
60048: PUSH
60049: LD_INT 4
60051: PLUS
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: LIST
60060: PUSH
60061: LD_VAR 0 1
60065: PUSH
60066: LD_INT 3
60068: PLUS
60069: PUSH
60070: LD_VAR 0 2
60074: PUSH
60075: LD_INT 3
60077: PLUS
60078: PUSH
60079: LD_INT 5
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: LIST
60086: PUSH
60087: LD_VAR 0 1
60091: PUSH
60092: LD_INT 4
60094: PLUS
60095: PUSH
60096: LD_VAR 0 2
60100: PUSH
60101: LD_INT 4
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: LIST
60108: PUSH
60109: LD_VAR 0 1
60113: PUSH
60114: LD_VAR 0 2
60118: PUSH
60119: LD_INT 3
60121: MINUS
60122: PUSH
60123: LD_INT 3
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: LIST
60130: PUSH
60131: LD_VAR 0 1
60135: PUSH
60136: LD_INT 4
60138: MINUS
60139: PUSH
60140: LD_VAR 0 2
60144: PUSH
60145: LD_INT 4
60147: MINUS
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: LIST
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: ST_TO_ADDR
// end ; 5 :
60164: GO 60304
60166: LD_INT 5
60168: DOUBLE
60169: EQUAL
60170: IFTRUE 60174
60172: GO 60303
60174: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60175: LD_ADDR_VAR 0 5
60179: PUSH
60180: LD_VAR 0 1
60184: PUSH
60185: LD_INT 4
60187: MINUS
60188: PUSH
60189: LD_VAR 0 2
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: LIST
60201: PUSH
60202: LD_VAR 0 1
60206: PUSH
60207: LD_VAR 0 2
60211: PUSH
60212: LD_INT 4
60214: MINUS
60215: PUSH
60216: LD_INT 3
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: LIST
60223: PUSH
60224: LD_VAR 0 1
60228: PUSH
60229: LD_INT 4
60231: PLUS
60232: PUSH
60233: LD_VAR 0 2
60237: PUSH
60238: LD_INT 4
60240: PLUS
60241: PUSH
60242: LD_INT 5
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: LIST
60249: PUSH
60250: LD_VAR 0 1
60254: PUSH
60255: LD_INT 3
60257: PLUS
60258: PUSH
60259: LD_VAR 0 2
60263: PUSH
60264: LD_INT 4
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: LIST
60271: PUSH
60272: LD_VAR 0 1
60276: PUSH
60277: LD_VAR 0 2
60281: PUSH
60282: LD_INT 3
60284: PLUS
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: LIST
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: ST_TO_ADDR
// end ; end ;
60301: GO 60304
60303: POP
// result := list ;
60304: LD_ADDR_VAR 0 4
60308: PUSH
60309: LD_VAR 0 5
60313: ST_TO_ADDR
// end ;
60314: LD_VAR 0 4
60318: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60319: LD_INT 0
60321: PPUSH
60322: PPUSH
60323: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60324: LD_VAR 0 1
60328: NOT
60329: PUSH
60330: LD_VAR 0 2
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: LD_INT 4
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: IN
60353: NOT
60354: OR
60355: IFFALSE 60359
// exit ;
60357: GO 60451
// tmp := [ ] ;
60359: LD_ADDR_VAR 0 5
60363: PUSH
60364: EMPTY
60365: ST_TO_ADDR
// for i in units do
60366: LD_ADDR_VAR 0 4
60370: PUSH
60371: LD_VAR 0 1
60375: PUSH
60376: FOR_IN
60377: IFFALSE 60420
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60379: LD_ADDR_VAR 0 5
60383: PUSH
60384: LD_VAR 0 5
60388: PPUSH
60389: LD_VAR 0 5
60393: PUSH
60394: LD_INT 1
60396: PLUS
60397: PPUSH
60398: LD_VAR 0 4
60402: PPUSH
60403: LD_VAR 0 2
60407: PPUSH
60408: CALL_OW 259
60412: PPUSH
60413: CALL_OW 2
60417: ST_TO_ADDR
60418: GO 60376
60420: POP
60421: POP
// if not tmp then
60422: LD_VAR 0 5
60426: NOT
60427: IFFALSE 60431
// exit ;
60429: GO 60451
// result := SortListByListDesc ( units , tmp ) ;
60431: LD_ADDR_VAR 0 3
60435: PUSH
60436: LD_VAR 0 1
60440: PPUSH
60441: LD_VAR 0 5
60445: PPUSH
60446: CALL_OW 77
60450: ST_TO_ADDR
// end ;
60451: LD_VAR 0 3
60455: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60456: LD_INT 0
60458: PPUSH
60459: PPUSH
60460: PPUSH
// x := GetX ( building ) ;
60461: LD_ADDR_VAR 0 4
60465: PUSH
60466: LD_VAR 0 2
60470: PPUSH
60471: CALL_OW 250
60475: ST_TO_ADDR
// y := GetY ( building ) ;
60476: LD_ADDR_VAR 0 5
60480: PUSH
60481: LD_VAR 0 2
60485: PPUSH
60486: CALL_OW 251
60490: ST_TO_ADDR
// if GetTaskList ( unit ) then
60491: LD_VAR 0 1
60495: PPUSH
60496: CALL_OW 437
60500: IFFALSE 60595
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60502: LD_STRING e
60504: PUSH
60505: LD_VAR 0 1
60509: PPUSH
60510: CALL_OW 437
60514: PUSH
60515: LD_INT 1
60517: ARRAY
60518: PUSH
60519: LD_INT 1
60521: ARRAY
60522: EQUAL
60523: PUSH
60524: LD_VAR 0 4
60528: PUSH
60529: LD_VAR 0 1
60533: PPUSH
60534: CALL_OW 437
60538: PUSH
60539: LD_INT 1
60541: ARRAY
60542: PUSH
60543: LD_INT 2
60545: ARRAY
60546: EQUAL
60547: AND
60548: PUSH
60549: LD_VAR 0 5
60553: PUSH
60554: LD_VAR 0 1
60558: PPUSH
60559: CALL_OW 437
60563: PUSH
60564: LD_INT 1
60566: ARRAY
60567: PUSH
60568: LD_INT 3
60570: ARRAY
60571: EQUAL
60572: AND
60573: IFFALSE 60585
// result := true else
60575: LD_ADDR_VAR 0 3
60579: PUSH
60580: LD_INT 1
60582: ST_TO_ADDR
60583: GO 60593
// result := false ;
60585: LD_ADDR_VAR 0 3
60589: PUSH
60590: LD_INT 0
60592: ST_TO_ADDR
// end else
60593: GO 60603
// result := false ;
60595: LD_ADDR_VAR 0 3
60599: PUSH
60600: LD_INT 0
60602: ST_TO_ADDR
// end ;
60603: LD_VAR 0 3
60607: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60608: LD_INT 0
60610: PPUSH
60611: PPUSH
60612: PPUSH
60613: PPUSH
// if not unit or not area then
60614: LD_VAR 0 1
60618: NOT
60619: PUSH
60620: LD_VAR 0 2
60624: NOT
60625: OR
60626: IFFALSE 60630
// exit ;
60628: GO 60794
// tmp := AreaToList ( area , i ) ;
60630: LD_ADDR_VAR 0 6
60634: PUSH
60635: LD_VAR 0 2
60639: PPUSH
60640: LD_VAR 0 5
60644: PPUSH
60645: CALL_OW 517
60649: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60650: LD_ADDR_VAR 0 5
60654: PUSH
60655: DOUBLE
60656: LD_INT 1
60658: DEC
60659: ST_TO_ADDR
60660: LD_VAR 0 6
60664: PUSH
60665: LD_INT 1
60667: ARRAY
60668: PUSH
60669: FOR_TO
60670: IFFALSE 60792
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60672: LD_ADDR_VAR 0 7
60676: PUSH
60677: LD_VAR 0 6
60681: PUSH
60682: LD_INT 1
60684: ARRAY
60685: PUSH
60686: LD_VAR 0 5
60690: ARRAY
60691: PUSH
60692: LD_VAR 0 6
60696: PUSH
60697: LD_INT 2
60699: ARRAY
60700: PUSH
60701: LD_VAR 0 5
60705: ARRAY
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60711: LD_VAR 0 7
60715: PUSH
60716: LD_INT 1
60718: ARRAY
60719: PPUSH
60720: LD_VAR 0 7
60724: PUSH
60725: LD_INT 2
60727: ARRAY
60728: PPUSH
60729: CALL_OW 428
60733: PUSH
60734: LD_INT 0
60736: EQUAL
60737: IFFALSE 60790
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60739: LD_VAR 0 1
60743: PPUSH
60744: LD_VAR 0 7
60748: PUSH
60749: LD_INT 1
60751: ARRAY
60752: PPUSH
60753: LD_VAR 0 7
60757: PUSH
60758: LD_INT 2
60760: ARRAY
60761: PPUSH
60762: LD_VAR 0 3
60766: PPUSH
60767: CALL_OW 48
// result := IsPlaced ( unit ) ;
60771: LD_ADDR_VAR 0 4
60775: PUSH
60776: LD_VAR 0 1
60780: PPUSH
60781: CALL_OW 305
60785: ST_TO_ADDR
// exit ;
60786: POP
60787: POP
60788: GO 60794
// end ; end ;
60790: GO 60669
60792: POP
60793: POP
// end ;
60794: LD_VAR 0 4
60798: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60799: LD_INT 0
60801: PPUSH
60802: PPUSH
60803: PPUSH
// if not side or side > 8 then
60804: LD_VAR 0 1
60808: NOT
60809: PUSH
60810: LD_VAR 0 1
60814: PUSH
60815: LD_INT 8
60817: GREATER
60818: OR
60819: IFFALSE 60823
// exit ;
60821: GO 61010
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60823: LD_ADDR_VAR 0 4
60827: PUSH
60828: LD_INT 22
60830: PUSH
60831: LD_VAR 0 1
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 21
60842: PUSH
60843: LD_INT 3
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PPUSH
60854: CALL_OW 69
60858: ST_TO_ADDR
// if not tmp then
60859: LD_VAR 0 4
60863: NOT
60864: IFFALSE 60868
// exit ;
60866: GO 61010
// enable_addtolog := true ;
60868: LD_ADDR_OWVAR 81
60872: PUSH
60873: LD_INT 1
60875: ST_TO_ADDR
// AddToLog ( [ ) ;
60876: LD_STRING [
60878: PPUSH
60879: CALL_OW 561
// for i in tmp do
60883: LD_ADDR_VAR 0 3
60887: PUSH
60888: LD_VAR 0 4
60892: PUSH
60893: FOR_IN
60894: IFFALSE 61001
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60896: LD_STRING [
60898: PUSH
60899: LD_VAR 0 3
60903: PPUSH
60904: CALL_OW 266
60908: STR
60909: PUSH
60910: LD_STRING , 
60912: STR
60913: PUSH
60914: LD_VAR 0 3
60918: PPUSH
60919: CALL_OW 250
60923: STR
60924: PUSH
60925: LD_STRING , 
60927: STR
60928: PUSH
60929: LD_VAR 0 3
60933: PPUSH
60934: CALL_OW 251
60938: STR
60939: PUSH
60940: LD_STRING , 
60942: STR
60943: PUSH
60944: LD_VAR 0 3
60948: PPUSH
60949: CALL_OW 254
60953: STR
60954: PUSH
60955: LD_STRING , 
60957: STR
60958: PUSH
60959: LD_VAR 0 3
60963: PPUSH
60964: LD_INT 1
60966: PPUSH
60967: CALL_OW 268
60971: STR
60972: PUSH
60973: LD_STRING , 
60975: STR
60976: PUSH
60977: LD_VAR 0 3
60981: PPUSH
60982: LD_INT 2
60984: PPUSH
60985: CALL_OW 268
60989: STR
60990: PUSH
60991: LD_STRING ],
60993: STR
60994: PPUSH
60995: CALL_OW 561
// end ;
60999: GO 60893
61001: POP
61002: POP
// AddToLog ( ]; ) ;
61003: LD_STRING ];
61005: PPUSH
61006: CALL_OW 561
// end ;
61010: LD_VAR 0 2
61014: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61015: LD_INT 0
61017: PPUSH
61018: PPUSH
61019: PPUSH
61020: PPUSH
61021: PPUSH
// if not area or not rate or not max then
61022: LD_VAR 0 1
61026: NOT
61027: PUSH
61028: LD_VAR 0 2
61032: NOT
61033: OR
61034: PUSH
61035: LD_VAR 0 4
61039: NOT
61040: OR
61041: IFFALSE 61045
// exit ;
61043: GO 61237
// while 1 do
61045: LD_INT 1
61047: IFFALSE 61237
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61049: LD_ADDR_VAR 0 9
61053: PUSH
61054: LD_VAR 0 1
61058: PPUSH
61059: LD_INT 1
61061: PPUSH
61062: CALL_OW 287
61066: PUSH
61067: LD_INT 10
61069: MUL
61070: ST_TO_ADDR
// r := rate / 10 ;
61071: LD_ADDR_VAR 0 7
61075: PUSH
61076: LD_VAR 0 2
61080: PUSH
61081: LD_INT 10
61083: DIVREAL
61084: ST_TO_ADDR
// time := 1 1$00 ;
61085: LD_ADDR_VAR 0 8
61089: PUSH
61090: LD_INT 2100
61092: ST_TO_ADDR
// if amount < min then
61093: LD_VAR 0 9
61097: PUSH
61098: LD_VAR 0 3
61102: LESS
61103: IFFALSE 61121
// r := r * 2 else
61105: LD_ADDR_VAR 0 7
61109: PUSH
61110: LD_VAR 0 7
61114: PUSH
61115: LD_INT 2
61117: MUL
61118: ST_TO_ADDR
61119: GO 61147
// if amount > max then
61121: LD_VAR 0 9
61125: PUSH
61126: LD_VAR 0 4
61130: GREATER
61131: IFFALSE 61147
// r := r / 2 ;
61133: LD_ADDR_VAR 0 7
61137: PUSH
61138: LD_VAR 0 7
61142: PUSH
61143: LD_INT 2
61145: DIVREAL
61146: ST_TO_ADDR
// time := time / r ;
61147: LD_ADDR_VAR 0 8
61151: PUSH
61152: LD_VAR 0 8
61156: PUSH
61157: LD_VAR 0 7
61161: DIVREAL
61162: ST_TO_ADDR
// if time < 0 then
61163: LD_VAR 0 8
61167: PUSH
61168: LD_INT 0
61170: LESS
61171: IFFALSE 61188
// time := time * - 1 ;
61173: LD_ADDR_VAR 0 8
61177: PUSH
61178: LD_VAR 0 8
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: MUL
61187: ST_TO_ADDR
// wait ( time ) ;
61188: LD_VAR 0 8
61192: PPUSH
61193: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61197: LD_INT 35
61199: PPUSH
61200: LD_INT 875
61202: PPUSH
61203: CALL_OW 12
61207: PPUSH
61208: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61212: LD_INT 1
61214: PPUSH
61215: LD_INT 5
61217: PPUSH
61218: CALL_OW 12
61222: PPUSH
61223: LD_VAR 0 1
61227: PPUSH
61228: LD_INT 1
61230: PPUSH
61231: CALL_OW 55
// end ;
61235: GO 61045
// end ;
61237: LD_VAR 0 5
61241: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61242: LD_INT 0
61244: PPUSH
61245: PPUSH
61246: PPUSH
61247: PPUSH
61248: PPUSH
61249: PPUSH
61250: PPUSH
61251: PPUSH
// if not turrets or not factories then
61252: LD_VAR 0 1
61256: NOT
61257: PUSH
61258: LD_VAR 0 2
61262: NOT
61263: OR
61264: IFFALSE 61268
// exit ;
61266: GO 61575
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61268: LD_ADDR_VAR 0 10
61272: PUSH
61273: LD_INT 5
61275: PUSH
61276: LD_INT 6
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: LD_INT 4
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 3
61295: PUSH
61296: LD_INT 5
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 24
61310: PUSH
61311: LD_INT 25
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 23
61320: PUSH
61321: LD_INT 27
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 42
61334: PUSH
61335: LD_INT 43
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 44
61344: PUSH
61345: LD_INT 46
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 45
61354: PUSH
61355: LD_INT 47
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: LIST
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: LIST
61371: ST_TO_ADDR
// result := [ ] ;
61372: LD_ADDR_VAR 0 3
61376: PUSH
61377: EMPTY
61378: ST_TO_ADDR
// for i in turrets do
61379: LD_ADDR_VAR 0 4
61383: PUSH
61384: LD_VAR 0 1
61388: PUSH
61389: FOR_IN
61390: IFFALSE 61573
// begin nat := GetNation ( i ) ;
61392: LD_ADDR_VAR 0 7
61396: PUSH
61397: LD_VAR 0 4
61401: PPUSH
61402: CALL_OW 248
61406: ST_TO_ADDR
// weapon := 0 ;
61407: LD_ADDR_VAR 0 8
61411: PUSH
61412: LD_INT 0
61414: ST_TO_ADDR
// if not nat then
61415: LD_VAR 0 7
61419: NOT
61420: IFFALSE 61424
// continue ;
61422: GO 61389
// for j in list [ nat ] do
61424: LD_ADDR_VAR 0 5
61428: PUSH
61429: LD_VAR 0 10
61433: PUSH
61434: LD_VAR 0 7
61438: ARRAY
61439: PUSH
61440: FOR_IN
61441: IFFALSE 61482
// if GetBWeapon ( i ) = j [ 1 ] then
61443: LD_VAR 0 4
61447: PPUSH
61448: CALL_OW 269
61452: PUSH
61453: LD_VAR 0 5
61457: PUSH
61458: LD_INT 1
61460: ARRAY
61461: EQUAL
61462: IFFALSE 61480
// begin weapon := j [ 2 ] ;
61464: LD_ADDR_VAR 0 8
61468: PUSH
61469: LD_VAR 0 5
61473: PUSH
61474: LD_INT 2
61476: ARRAY
61477: ST_TO_ADDR
// break ;
61478: GO 61482
// end ;
61480: GO 61440
61482: POP
61483: POP
// if not weapon then
61484: LD_VAR 0 8
61488: NOT
61489: IFFALSE 61493
// continue ;
61491: GO 61389
// for k in factories do
61493: LD_ADDR_VAR 0 6
61497: PUSH
61498: LD_VAR 0 2
61502: PUSH
61503: FOR_IN
61504: IFFALSE 61569
// begin weapons := AvailableWeaponList ( k ) ;
61506: LD_ADDR_VAR 0 9
61510: PUSH
61511: LD_VAR 0 6
61515: PPUSH
61516: CALL_OW 478
61520: ST_TO_ADDR
// if not weapons then
61521: LD_VAR 0 9
61525: NOT
61526: IFFALSE 61530
// continue ;
61528: GO 61503
// if weapon in weapons then
61530: LD_VAR 0 8
61534: PUSH
61535: LD_VAR 0 9
61539: IN
61540: IFFALSE 61567
// begin result := [ i , weapon ] ;
61542: LD_ADDR_VAR 0 3
61546: PUSH
61547: LD_VAR 0 4
61551: PUSH
61552: LD_VAR 0 8
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: ST_TO_ADDR
// exit ;
61561: POP
61562: POP
61563: POP
61564: POP
61565: GO 61575
// end ; end ;
61567: GO 61503
61569: POP
61570: POP
// end ;
61571: GO 61389
61573: POP
61574: POP
// end ;
61575: LD_VAR 0 3
61579: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61580: LD_INT 0
61582: PPUSH
// if not side or side > 8 then
61583: LD_VAR 0 3
61587: NOT
61588: PUSH
61589: LD_VAR 0 3
61593: PUSH
61594: LD_INT 8
61596: GREATER
61597: OR
61598: IFFALSE 61602
// exit ;
61600: GO 61661
// if not range then
61602: LD_VAR 0 4
61606: NOT
61607: IFFALSE 61618
// range := - 12 ;
61609: LD_ADDR_VAR 0 4
61613: PUSH
61614: LD_INT 12
61616: NEG
61617: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61618: LD_VAR 0 1
61622: PPUSH
61623: LD_VAR 0 2
61627: PPUSH
61628: LD_VAR 0 3
61632: PPUSH
61633: LD_VAR 0 4
61637: PPUSH
61638: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61642: LD_VAR 0 1
61646: PPUSH
61647: LD_VAR 0 2
61651: PPUSH
61652: LD_VAR 0 3
61656: PPUSH
61657: CALL_OW 331
// end ;
61661: LD_VAR 0 5
61665: RET
// export function Video ( mode ) ; begin
61666: LD_INT 0
61668: PPUSH
// ingame_video = mode ;
61669: LD_ADDR_OWVAR 52
61673: PUSH
61674: LD_VAR 0 1
61678: ST_TO_ADDR
// interface_hidden = mode ;
61679: LD_ADDR_OWVAR 54
61683: PUSH
61684: LD_VAR 0 1
61688: ST_TO_ADDR
// end ;
61689: LD_VAR 0 2
61693: RET
// export function Join ( array , element ) ; begin
61694: LD_INT 0
61696: PPUSH
// result := array ^ element ;
61697: LD_ADDR_VAR 0 3
61701: PUSH
61702: LD_VAR 0 1
61706: PUSH
61707: LD_VAR 0 2
61711: ADD
61712: ST_TO_ADDR
// end ;
61713: LD_VAR 0 3
61717: RET
// export function JoinUnion ( array , element ) ; begin
61718: LD_INT 0
61720: PPUSH
// result := array union element ;
61721: LD_ADDR_VAR 0 3
61725: PUSH
61726: LD_VAR 0 1
61730: PUSH
61731: LD_VAR 0 2
61735: UNION
61736: ST_TO_ADDR
// end ;
61737: LD_VAR 0 3
61741: RET
// export function GetBehemoths ( side ) ; begin
61742: LD_INT 0
61744: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61745: LD_ADDR_VAR 0 2
61749: PUSH
61750: LD_INT 22
61752: PUSH
61753: LD_VAR 0 1
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 31
61764: PUSH
61765: LD_INT 25
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PPUSH
61776: CALL_OW 69
61780: ST_TO_ADDR
// end ;
61781: LD_VAR 0 2
61785: RET
// export function Shuffle ( array ) ; var i , index ; begin
61786: LD_INT 0
61788: PPUSH
61789: PPUSH
61790: PPUSH
// result := [ ] ;
61791: LD_ADDR_VAR 0 2
61795: PUSH
61796: EMPTY
61797: ST_TO_ADDR
// if not array then
61798: LD_VAR 0 1
61802: NOT
61803: IFFALSE 61807
// exit ;
61805: GO 61906
// Randomize ;
61807: CALL_OW 10
// for i = array downto 1 do
61811: LD_ADDR_VAR 0 3
61815: PUSH
61816: DOUBLE
61817: LD_VAR 0 1
61821: INC
61822: ST_TO_ADDR
61823: LD_INT 1
61825: PUSH
61826: FOR_DOWNTO
61827: IFFALSE 61904
// begin index := rand ( 1 , array ) ;
61829: LD_ADDR_VAR 0 4
61833: PUSH
61834: LD_INT 1
61836: PPUSH
61837: LD_VAR 0 1
61841: PPUSH
61842: CALL_OW 12
61846: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61847: LD_ADDR_VAR 0 2
61851: PUSH
61852: LD_VAR 0 2
61856: PPUSH
61857: LD_VAR 0 2
61861: PUSH
61862: LD_INT 1
61864: PLUS
61865: PPUSH
61866: LD_VAR 0 1
61870: PUSH
61871: LD_VAR 0 4
61875: ARRAY
61876: PPUSH
61877: CALL_OW 2
61881: ST_TO_ADDR
// array := Delete ( array , index ) ;
61882: LD_ADDR_VAR 0 1
61886: PUSH
61887: LD_VAR 0 1
61891: PPUSH
61892: LD_VAR 0 4
61896: PPUSH
61897: CALL_OW 3
61901: ST_TO_ADDR
// end ;
61902: GO 61826
61904: POP
61905: POP
// end ; end_of_file
61906: LD_VAR 0 2
61910: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
61911: GO 61913
61913: DISABLE
// begin ru_radar := 98 ;
61914: LD_ADDR_EXP 29
61918: PUSH
61919: LD_INT 98
61921: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
61922: LD_ADDR_EXP 30
61926: PUSH
61927: LD_INT 89
61929: ST_TO_ADDR
// us_hack := 99 ;
61930: LD_ADDR_EXP 31
61934: PUSH
61935: LD_INT 99
61937: ST_TO_ADDR
// us_artillery := 97 ;
61938: LD_ADDR_EXP 32
61942: PUSH
61943: LD_INT 97
61945: ST_TO_ADDR
// ar_bio_bomb := 91 ;
61946: LD_ADDR_EXP 33
61950: PUSH
61951: LD_INT 91
61953: ST_TO_ADDR
// end ; end_of_file
61954: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
61955: LD_INT 0
61957: PPUSH
61958: PPUSH
// skirmish := false ;
61959: LD_ADDR_EXP 34
61963: PUSH
61964: LD_INT 0
61966: ST_TO_ADDR
// debug_mc := false ;
61967: LD_ADDR_EXP 35
61971: PUSH
61972: LD_INT 0
61974: ST_TO_ADDR
// mc_bases := [ ] ;
61975: LD_ADDR_EXP 36
61979: PUSH
61980: EMPTY
61981: ST_TO_ADDR
// mc_sides := [ ] ;
61982: LD_ADDR_EXP 62
61986: PUSH
61987: EMPTY
61988: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
61989: LD_ADDR_EXP 37
61993: PUSH
61994: EMPTY
61995: ST_TO_ADDR
// mc_building_repairs := [ ] ;
61996: LD_ADDR_EXP 38
62000: PUSH
62001: EMPTY
62002: ST_TO_ADDR
// mc_need_heal := [ ] ;
62003: LD_ADDR_EXP 39
62007: PUSH
62008: EMPTY
62009: ST_TO_ADDR
// mc_healers := [ ] ;
62010: LD_ADDR_EXP 40
62014: PUSH
62015: EMPTY
62016: ST_TO_ADDR
// mc_build_list := [ ] ;
62017: LD_ADDR_EXP 41
62021: PUSH
62022: EMPTY
62023: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
62024: LD_ADDR_EXP 68
62028: PUSH
62029: EMPTY
62030: ST_TO_ADDR
// mc_builders := [ ] ;
62031: LD_ADDR_EXP 42
62035: PUSH
62036: EMPTY
62037: ST_TO_ADDR
// mc_construct_list := [ ] ;
62038: LD_ADDR_EXP 43
62042: PUSH
62043: EMPTY
62044: ST_TO_ADDR
// mc_turret_list := [ ] ;
62045: LD_ADDR_EXP 44
62049: PUSH
62050: EMPTY
62051: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
62052: LD_ADDR_EXP 45
62056: PUSH
62057: EMPTY
62058: ST_TO_ADDR
// mc_miners := [ ] ;
62059: LD_ADDR_EXP 50
62063: PUSH
62064: EMPTY
62065: ST_TO_ADDR
// mc_mines := [ ] ;
62066: LD_ADDR_EXP 49
62070: PUSH
62071: EMPTY
62072: ST_TO_ADDR
// mc_minefields := [ ] ;
62073: LD_ADDR_EXP 51
62077: PUSH
62078: EMPTY
62079: ST_TO_ADDR
// mc_crates := [ ] ;
62080: LD_ADDR_EXP 52
62084: PUSH
62085: EMPTY
62086: ST_TO_ADDR
// mc_crates_collector := [ ] ;
62087: LD_ADDR_EXP 53
62091: PUSH
62092: EMPTY
62093: ST_TO_ADDR
// mc_crates_area := [ ] ;
62094: LD_ADDR_EXP 54
62098: PUSH
62099: EMPTY
62100: ST_TO_ADDR
// mc_vehicles := [ ] ;
62101: LD_ADDR_EXP 55
62105: PUSH
62106: EMPTY
62107: ST_TO_ADDR
// mc_attack := [ ] ;
62108: LD_ADDR_EXP 56
62112: PUSH
62113: EMPTY
62114: ST_TO_ADDR
// mc_produce := [ ] ;
62115: LD_ADDR_EXP 57
62119: PUSH
62120: EMPTY
62121: ST_TO_ADDR
// mc_defender := [ ] ;
62122: LD_ADDR_EXP 58
62126: PUSH
62127: EMPTY
62128: ST_TO_ADDR
// mc_parking := [ ] ;
62129: LD_ADDR_EXP 60
62133: PUSH
62134: EMPTY
62135: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62136: LD_ADDR_EXP 46
62140: PUSH
62141: EMPTY
62142: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62143: LD_ADDR_EXP 48
62147: PUSH
62148: EMPTY
62149: ST_TO_ADDR
// mc_scan := [ ] ;
62150: LD_ADDR_EXP 59
62154: PUSH
62155: EMPTY
62156: ST_TO_ADDR
// mc_scan_area := [ ] ;
62157: LD_ADDR_EXP 61
62161: PUSH
62162: EMPTY
62163: ST_TO_ADDR
// mc_tech := [ ] ;
62164: LD_ADDR_EXP 63
62168: PUSH
62169: EMPTY
62170: ST_TO_ADDR
// mc_class := [ ] ;
62171: LD_ADDR_EXP 77
62175: PUSH
62176: EMPTY
62177: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62178: LD_ADDR_EXP 78
62182: PUSH
62183: EMPTY
62184: ST_TO_ADDR
// end ;
62185: LD_VAR 0 1
62189: RET
// export function MC_Kill ( base ) ; begin
62190: LD_INT 0
62192: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62193: LD_ADDR_EXP 36
62197: PUSH
62198: LD_EXP 36
62202: PPUSH
62203: LD_VAR 0 1
62207: PPUSH
62208: EMPTY
62209: PPUSH
62210: CALL_OW 1
62214: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62215: LD_ADDR_EXP 37
62219: PUSH
62220: LD_EXP 37
62224: PPUSH
62225: LD_VAR 0 1
62229: PPUSH
62230: EMPTY
62231: PPUSH
62232: CALL_OW 1
62236: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62237: LD_ADDR_EXP 38
62241: PUSH
62242: LD_EXP 38
62246: PPUSH
62247: LD_VAR 0 1
62251: PPUSH
62252: EMPTY
62253: PPUSH
62254: CALL_OW 1
62258: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62259: LD_ADDR_EXP 39
62263: PUSH
62264: LD_EXP 39
62268: PPUSH
62269: LD_VAR 0 1
62273: PPUSH
62274: EMPTY
62275: PPUSH
62276: CALL_OW 1
62280: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62281: LD_ADDR_EXP 40
62285: PUSH
62286: LD_EXP 40
62290: PPUSH
62291: LD_VAR 0 1
62295: PPUSH
62296: EMPTY
62297: PPUSH
62298: CALL_OW 1
62302: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62303: LD_ADDR_EXP 41
62307: PUSH
62308: LD_EXP 41
62312: PPUSH
62313: LD_VAR 0 1
62317: PPUSH
62318: EMPTY
62319: PPUSH
62320: CALL_OW 1
62324: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
62325: LD_ADDR_EXP 42
62329: PUSH
62330: LD_EXP 42
62334: PPUSH
62335: LD_VAR 0 1
62339: PPUSH
62340: EMPTY
62341: PPUSH
62342: CALL_OW 1
62346: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62347: LD_ADDR_EXP 43
62351: PUSH
62352: LD_EXP 43
62356: PPUSH
62357: LD_VAR 0 1
62361: PPUSH
62362: EMPTY
62363: PPUSH
62364: CALL_OW 1
62368: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62369: LD_ADDR_EXP 44
62373: PUSH
62374: LD_EXP 44
62378: PPUSH
62379: LD_VAR 0 1
62383: PPUSH
62384: EMPTY
62385: PPUSH
62386: CALL_OW 1
62390: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
62391: LD_ADDR_EXP 45
62395: PUSH
62396: LD_EXP 45
62400: PPUSH
62401: LD_VAR 0 1
62405: PPUSH
62406: EMPTY
62407: PPUSH
62408: CALL_OW 1
62412: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
62413: LD_ADDR_EXP 46
62417: PUSH
62418: LD_EXP 46
62422: PPUSH
62423: LD_VAR 0 1
62427: PPUSH
62428: EMPTY
62429: PPUSH
62430: CALL_OW 1
62434: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
62435: LD_ADDR_EXP 47
62439: PUSH
62440: LD_EXP 47
62444: PPUSH
62445: LD_VAR 0 1
62449: PPUSH
62450: LD_INT 0
62452: PPUSH
62453: CALL_OW 1
62457: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
62458: LD_ADDR_EXP 48
62462: PUSH
62463: LD_EXP 48
62467: PPUSH
62468: LD_VAR 0 1
62472: PPUSH
62473: EMPTY
62474: PPUSH
62475: CALL_OW 1
62479: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
62480: LD_ADDR_EXP 49
62484: PUSH
62485: LD_EXP 49
62489: PPUSH
62490: LD_VAR 0 1
62494: PPUSH
62495: EMPTY
62496: PPUSH
62497: CALL_OW 1
62501: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
62502: LD_ADDR_EXP 50
62506: PUSH
62507: LD_EXP 50
62511: PPUSH
62512: LD_VAR 0 1
62516: PPUSH
62517: EMPTY
62518: PPUSH
62519: CALL_OW 1
62523: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
62524: LD_ADDR_EXP 51
62528: PUSH
62529: LD_EXP 51
62533: PPUSH
62534: LD_VAR 0 1
62538: PPUSH
62539: EMPTY
62540: PPUSH
62541: CALL_OW 1
62545: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
62546: LD_ADDR_EXP 52
62550: PUSH
62551: LD_EXP 52
62555: PPUSH
62556: LD_VAR 0 1
62560: PPUSH
62561: EMPTY
62562: PPUSH
62563: CALL_OW 1
62567: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
62568: LD_ADDR_EXP 53
62572: PUSH
62573: LD_EXP 53
62577: PPUSH
62578: LD_VAR 0 1
62582: PPUSH
62583: EMPTY
62584: PPUSH
62585: CALL_OW 1
62589: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
62590: LD_ADDR_EXP 54
62594: PUSH
62595: LD_EXP 54
62599: PPUSH
62600: LD_VAR 0 1
62604: PPUSH
62605: EMPTY
62606: PPUSH
62607: CALL_OW 1
62611: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
62612: LD_ADDR_EXP 55
62616: PUSH
62617: LD_EXP 55
62621: PPUSH
62622: LD_VAR 0 1
62626: PPUSH
62627: EMPTY
62628: PPUSH
62629: CALL_OW 1
62633: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
62634: LD_ADDR_EXP 56
62638: PUSH
62639: LD_EXP 56
62643: PPUSH
62644: LD_VAR 0 1
62648: PPUSH
62649: EMPTY
62650: PPUSH
62651: CALL_OW 1
62655: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
62656: LD_ADDR_EXP 57
62660: PUSH
62661: LD_EXP 57
62665: PPUSH
62666: LD_VAR 0 1
62670: PPUSH
62671: EMPTY
62672: PPUSH
62673: CALL_OW 1
62677: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
62678: LD_ADDR_EXP 58
62682: PUSH
62683: LD_EXP 58
62687: PPUSH
62688: LD_VAR 0 1
62692: PPUSH
62693: EMPTY
62694: PPUSH
62695: CALL_OW 1
62699: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
62700: LD_ADDR_EXP 59
62704: PUSH
62705: LD_EXP 59
62709: PPUSH
62710: LD_VAR 0 1
62714: PPUSH
62715: EMPTY
62716: PPUSH
62717: CALL_OW 1
62721: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
62722: LD_ADDR_EXP 60
62726: PUSH
62727: LD_EXP 60
62731: PPUSH
62732: LD_VAR 0 1
62736: PPUSH
62737: EMPTY
62738: PPUSH
62739: CALL_OW 1
62743: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
62744: LD_ADDR_EXP 61
62748: PUSH
62749: LD_EXP 61
62753: PPUSH
62754: LD_VAR 0 1
62758: PPUSH
62759: EMPTY
62760: PPUSH
62761: CALL_OW 1
62765: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
62766: LD_ADDR_EXP 63
62770: PUSH
62771: LD_EXP 63
62775: PPUSH
62776: LD_VAR 0 1
62780: PPUSH
62781: EMPTY
62782: PPUSH
62783: CALL_OW 1
62787: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
62788: LD_ADDR_EXP 65
62792: PUSH
62793: LD_EXP 65
62797: PPUSH
62798: LD_VAR 0 1
62802: PPUSH
62803: EMPTY
62804: PPUSH
62805: CALL_OW 1
62809: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
62810: LD_ADDR_EXP 66
62814: PUSH
62815: LD_EXP 66
62819: PPUSH
62820: LD_VAR 0 1
62824: PPUSH
62825: EMPTY
62826: PPUSH
62827: CALL_OW 1
62831: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
62832: LD_ADDR_EXP 67
62836: PUSH
62837: LD_EXP 67
62841: PPUSH
62842: LD_VAR 0 1
62846: PPUSH
62847: EMPTY
62848: PPUSH
62849: CALL_OW 1
62853: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
62854: LD_ADDR_EXP 68
62858: PUSH
62859: LD_EXP 68
62863: PPUSH
62864: LD_VAR 0 1
62868: PPUSH
62869: EMPTY
62870: PPUSH
62871: CALL_OW 1
62875: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
62876: LD_ADDR_EXP 69
62880: PUSH
62881: LD_EXP 69
62885: PPUSH
62886: LD_VAR 0 1
62890: PPUSH
62891: EMPTY
62892: PPUSH
62893: CALL_OW 1
62897: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
62898: LD_ADDR_EXP 70
62902: PUSH
62903: LD_EXP 70
62907: PPUSH
62908: LD_VAR 0 1
62912: PPUSH
62913: EMPTY
62914: PPUSH
62915: CALL_OW 1
62919: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
62920: LD_ADDR_EXP 71
62924: PUSH
62925: LD_EXP 71
62929: PPUSH
62930: LD_VAR 0 1
62934: PPUSH
62935: EMPTY
62936: PPUSH
62937: CALL_OW 1
62941: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
62942: LD_ADDR_EXP 72
62946: PUSH
62947: LD_EXP 72
62951: PPUSH
62952: LD_VAR 0 1
62956: PPUSH
62957: EMPTY
62958: PPUSH
62959: CALL_OW 1
62963: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
62964: LD_ADDR_EXP 73
62968: PUSH
62969: LD_EXP 73
62973: PPUSH
62974: LD_VAR 0 1
62978: PPUSH
62979: EMPTY
62980: PPUSH
62981: CALL_OW 1
62985: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
62986: LD_ADDR_EXP 74
62990: PUSH
62991: LD_EXP 74
62995: PPUSH
62996: LD_VAR 0 1
63000: PPUSH
63001: EMPTY
63002: PPUSH
63003: CALL_OW 1
63007: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63008: LD_ADDR_EXP 75
63012: PUSH
63013: LD_EXP 75
63017: PPUSH
63018: LD_VAR 0 1
63022: PPUSH
63023: EMPTY
63024: PPUSH
63025: CALL_OW 1
63029: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63030: LD_ADDR_EXP 76
63034: PUSH
63035: LD_EXP 76
63039: PPUSH
63040: LD_VAR 0 1
63044: PPUSH
63045: EMPTY
63046: PPUSH
63047: CALL_OW 1
63051: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63052: LD_ADDR_EXP 77
63056: PUSH
63057: LD_EXP 77
63061: PPUSH
63062: LD_VAR 0 1
63066: PPUSH
63067: EMPTY
63068: PPUSH
63069: CALL_OW 1
63073: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63074: LD_ADDR_EXP 78
63078: PUSH
63079: LD_EXP 78
63083: PPUSH
63084: LD_VAR 0 1
63088: PPUSH
63089: LD_INT 0
63091: PPUSH
63092: CALL_OW 1
63096: ST_TO_ADDR
// end ;
63097: LD_VAR 0 2
63101: RET
// export function MC_Add ( side , units ) ; var base ; begin
63102: LD_INT 0
63104: PPUSH
63105: PPUSH
// base := mc_bases + 1 ;
63106: LD_ADDR_VAR 0 4
63110: PUSH
63111: LD_EXP 36
63115: PUSH
63116: LD_INT 1
63118: PLUS
63119: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63120: LD_ADDR_EXP 62
63124: PUSH
63125: LD_EXP 62
63129: PPUSH
63130: LD_VAR 0 4
63134: PPUSH
63135: LD_VAR 0 1
63139: PPUSH
63140: CALL_OW 1
63144: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63145: LD_ADDR_EXP 36
63149: PUSH
63150: LD_EXP 36
63154: PPUSH
63155: LD_VAR 0 4
63159: PPUSH
63160: LD_VAR 0 2
63164: PPUSH
63165: CALL_OW 1
63169: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63170: LD_ADDR_EXP 37
63174: PUSH
63175: LD_EXP 37
63179: PPUSH
63180: LD_VAR 0 4
63184: PPUSH
63185: EMPTY
63186: PPUSH
63187: CALL_OW 1
63191: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63192: LD_ADDR_EXP 38
63196: PUSH
63197: LD_EXP 38
63201: PPUSH
63202: LD_VAR 0 4
63206: PPUSH
63207: EMPTY
63208: PPUSH
63209: CALL_OW 1
63213: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63214: LD_ADDR_EXP 39
63218: PUSH
63219: LD_EXP 39
63223: PPUSH
63224: LD_VAR 0 4
63228: PPUSH
63229: EMPTY
63230: PPUSH
63231: CALL_OW 1
63235: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63236: LD_ADDR_EXP 40
63240: PUSH
63241: LD_EXP 40
63245: PPUSH
63246: LD_VAR 0 4
63250: PPUSH
63251: EMPTY
63252: PPUSH
63253: CALL_OW 1
63257: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63258: LD_ADDR_EXP 41
63262: PUSH
63263: LD_EXP 41
63267: PPUSH
63268: LD_VAR 0 4
63272: PPUSH
63273: EMPTY
63274: PPUSH
63275: CALL_OW 1
63279: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63280: LD_ADDR_EXP 42
63284: PUSH
63285: LD_EXP 42
63289: PPUSH
63290: LD_VAR 0 4
63294: PPUSH
63295: EMPTY
63296: PPUSH
63297: CALL_OW 1
63301: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63302: LD_ADDR_EXP 43
63306: PUSH
63307: LD_EXP 43
63311: PPUSH
63312: LD_VAR 0 4
63316: PPUSH
63317: EMPTY
63318: PPUSH
63319: CALL_OW 1
63323: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63324: LD_ADDR_EXP 44
63328: PUSH
63329: LD_EXP 44
63333: PPUSH
63334: LD_VAR 0 4
63338: PPUSH
63339: EMPTY
63340: PPUSH
63341: CALL_OW 1
63345: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63346: LD_ADDR_EXP 45
63350: PUSH
63351: LD_EXP 45
63355: PPUSH
63356: LD_VAR 0 4
63360: PPUSH
63361: EMPTY
63362: PPUSH
63363: CALL_OW 1
63367: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63368: LD_ADDR_EXP 46
63372: PUSH
63373: LD_EXP 46
63377: PPUSH
63378: LD_VAR 0 4
63382: PPUSH
63383: EMPTY
63384: PPUSH
63385: CALL_OW 1
63389: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63390: LD_ADDR_EXP 47
63394: PUSH
63395: LD_EXP 47
63399: PPUSH
63400: LD_VAR 0 4
63404: PPUSH
63405: LD_INT 0
63407: PPUSH
63408: CALL_OW 1
63412: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63413: LD_ADDR_EXP 48
63417: PUSH
63418: LD_EXP 48
63422: PPUSH
63423: LD_VAR 0 4
63427: PPUSH
63428: EMPTY
63429: PPUSH
63430: CALL_OW 1
63434: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63435: LD_ADDR_EXP 49
63439: PUSH
63440: LD_EXP 49
63444: PPUSH
63445: LD_VAR 0 4
63449: PPUSH
63450: EMPTY
63451: PPUSH
63452: CALL_OW 1
63456: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63457: LD_ADDR_EXP 50
63461: PUSH
63462: LD_EXP 50
63466: PPUSH
63467: LD_VAR 0 4
63471: PPUSH
63472: EMPTY
63473: PPUSH
63474: CALL_OW 1
63478: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63479: LD_ADDR_EXP 51
63483: PUSH
63484: LD_EXP 51
63488: PPUSH
63489: LD_VAR 0 4
63493: PPUSH
63494: EMPTY
63495: PPUSH
63496: CALL_OW 1
63500: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63501: LD_ADDR_EXP 52
63505: PUSH
63506: LD_EXP 52
63510: PPUSH
63511: LD_VAR 0 4
63515: PPUSH
63516: EMPTY
63517: PPUSH
63518: CALL_OW 1
63522: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63523: LD_ADDR_EXP 53
63527: PUSH
63528: LD_EXP 53
63532: PPUSH
63533: LD_VAR 0 4
63537: PPUSH
63538: EMPTY
63539: PPUSH
63540: CALL_OW 1
63544: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63545: LD_ADDR_EXP 54
63549: PUSH
63550: LD_EXP 54
63554: PPUSH
63555: LD_VAR 0 4
63559: PPUSH
63560: EMPTY
63561: PPUSH
63562: CALL_OW 1
63566: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63567: LD_ADDR_EXP 55
63571: PUSH
63572: LD_EXP 55
63576: PPUSH
63577: LD_VAR 0 4
63581: PPUSH
63582: EMPTY
63583: PPUSH
63584: CALL_OW 1
63588: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63589: LD_ADDR_EXP 56
63593: PUSH
63594: LD_EXP 56
63598: PPUSH
63599: LD_VAR 0 4
63603: PPUSH
63604: EMPTY
63605: PPUSH
63606: CALL_OW 1
63610: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63611: LD_ADDR_EXP 57
63615: PUSH
63616: LD_EXP 57
63620: PPUSH
63621: LD_VAR 0 4
63625: PPUSH
63626: EMPTY
63627: PPUSH
63628: CALL_OW 1
63632: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63633: LD_ADDR_EXP 58
63637: PUSH
63638: LD_EXP 58
63642: PPUSH
63643: LD_VAR 0 4
63647: PPUSH
63648: EMPTY
63649: PPUSH
63650: CALL_OW 1
63654: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63655: LD_ADDR_EXP 59
63659: PUSH
63660: LD_EXP 59
63664: PPUSH
63665: LD_VAR 0 4
63669: PPUSH
63670: EMPTY
63671: PPUSH
63672: CALL_OW 1
63676: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63677: LD_ADDR_EXP 60
63681: PUSH
63682: LD_EXP 60
63686: PPUSH
63687: LD_VAR 0 4
63691: PPUSH
63692: EMPTY
63693: PPUSH
63694: CALL_OW 1
63698: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63699: LD_ADDR_EXP 61
63703: PUSH
63704: LD_EXP 61
63708: PPUSH
63709: LD_VAR 0 4
63713: PPUSH
63714: EMPTY
63715: PPUSH
63716: CALL_OW 1
63720: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63721: LD_ADDR_EXP 63
63725: PUSH
63726: LD_EXP 63
63730: PPUSH
63731: LD_VAR 0 4
63735: PPUSH
63736: EMPTY
63737: PPUSH
63738: CALL_OW 1
63742: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63743: LD_ADDR_EXP 65
63747: PUSH
63748: LD_EXP 65
63752: PPUSH
63753: LD_VAR 0 4
63757: PPUSH
63758: EMPTY
63759: PPUSH
63760: CALL_OW 1
63764: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63765: LD_ADDR_EXP 66
63769: PUSH
63770: LD_EXP 66
63774: PPUSH
63775: LD_VAR 0 4
63779: PPUSH
63780: EMPTY
63781: PPUSH
63782: CALL_OW 1
63786: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63787: LD_ADDR_EXP 67
63791: PUSH
63792: LD_EXP 67
63796: PPUSH
63797: LD_VAR 0 4
63801: PPUSH
63802: EMPTY
63803: PPUSH
63804: CALL_OW 1
63808: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63809: LD_ADDR_EXP 68
63813: PUSH
63814: LD_EXP 68
63818: PPUSH
63819: LD_VAR 0 4
63823: PPUSH
63824: EMPTY
63825: PPUSH
63826: CALL_OW 1
63830: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63831: LD_ADDR_EXP 69
63835: PUSH
63836: LD_EXP 69
63840: PPUSH
63841: LD_VAR 0 4
63845: PPUSH
63846: EMPTY
63847: PPUSH
63848: CALL_OW 1
63852: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63853: LD_ADDR_EXP 70
63857: PUSH
63858: LD_EXP 70
63862: PPUSH
63863: LD_VAR 0 4
63867: PPUSH
63868: EMPTY
63869: PPUSH
63870: CALL_OW 1
63874: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63875: LD_ADDR_EXP 71
63879: PUSH
63880: LD_EXP 71
63884: PPUSH
63885: LD_VAR 0 4
63889: PPUSH
63890: EMPTY
63891: PPUSH
63892: CALL_OW 1
63896: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63897: LD_ADDR_EXP 72
63901: PUSH
63902: LD_EXP 72
63906: PPUSH
63907: LD_VAR 0 4
63911: PPUSH
63912: EMPTY
63913: PPUSH
63914: CALL_OW 1
63918: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63919: LD_ADDR_EXP 73
63923: PUSH
63924: LD_EXP 73
63928: PPUSH
63929: LD_VAR 0 4
63933: PPUSH
63934: EMPTY
63935: PPUSH
63936: CALL_OW 1
63940: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63941: LD_ADDR_EXP 74
63945: PUSH
63946: LD_EXP 74
63950: PPUSH
63951: LD_VAR 0 4
63955: PPUSH
63956: EMPTY
63957: PPUSH
63958: CALL_OW 1
63962: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63963: LD_ADDR_EXP 75
63967: PUSH
63968: LD_EXP 75
63972: PPUSH
63973: LD_VAR 0 4
63977: PPUSH
63978: EMPTY
63979: PPUSH
63980: CALL_OW 1
63984: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63985: LD_ADDR_EXP 76
63989: PUSH
63990: LD_EXP 76
63994: PPUSH
63995: LD_VAR 0 4
63999: PPUSH
64000: EMPTY
64001: PPUSH
64002: CALL_OW 1
64006: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
64007: LD_ADDR_EXP 77
64011: PUSH
64012: LD_EXP 77
64016: PPUSH
64017: LD_VAR 0 4
64021: PPUSH
64022: EMPTY
64023: PPUSH
64024: CALL_OW 1
64028: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
64029: LD_ADDR_EXP 78
64033: PUSH
64034: LD_EXP 78
64038: PPUSH
64039: LD_VAR 0 4
64043: PPUSH
64044: LD_INT 0
64046: PPUSH
64047: CALL_OW 1
64051: ST_TO_ADDR
// result := base ;
64052: LD_ADDR_VAR 0 3
64056: PUSH
64057: LD_VAR 0 4
64061: ST_TO_ADDR
// end ;
64062: LD_VAR 0 3
64066: RET
// export function MC_Start ( ) ; var i ; begin
64067: LD_INT 0
64069: PPUSH
64070: PPUSH
// for i = 1 to mc_bases do
64071: LD_ADDR_VAR 0 2
64075: PUSH
64076: DOUBLE
64077: LD_INT 1
64079: DEC
64080: ST_TO_ADDR
64081: LD_EXP 36
64085: PUSH
64086: FOR_TO
64087: IFFALSE 65164
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
64089: LD_ADDR_EXP 36
64093: PUSH
64094: LD_EXP 36
64098: PPUSH
64099: LD_VAR 0 2
64103: PPUSH
64104: LD_EXP 36
64108: PUSH
64109: LD_VAR 0 2
64113: ARRAY
64114: PUSH
64115: LD_INT 0
64117: DIFF
64118: PPUSH
64119: CALL_OW 1
64123: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64124: LD_ADDR_EXP 37
64128: PUSH
64129: LD_EXP 37
64133: PPUSH
64134: LD_VAR 0 2
64138: PPUSH
64139: EMPTY
64140: PPUSH
64141: CALL_OW 1
64145: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64146: LD_ADDR_EXP 38
64150: PUSH
64151: LD_EXP 38
64155: PPUSH
64156: LD_VAR 0 2
64160: PPUSH
64161: EMPTY
64162: PPUSH
64163: CALL_OW 1
64167: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64168: LD_ADDR_EXP 39
64172: PUSH
64173: LD_EXP 39
64177: PPUSH
64178: LD_VAR 0 2
64182: PPUSH
64183: EMPTY
64184: PPUSH
64185: CALL_OW 1
64189: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64190: LD_ADDR_EXP 40
64194: PUSH
64195: LD_EXP 40
64199: PPUSH
64200: LD_VAR 0 2
64204: PPUSH
64205: EMPTY
64206: PUSH
64207: EMPTY
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PPUSH
64213: CALL_OW 1
64217: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
64218: LD_ADDR_EXP 41
64222: PUSH
64223: LD_EXP 41
64227: PPUSH
64228: LD_VAR 0 2
64232: PPUSH
64233: EMPTY
64234: PPUSH
64235: CALL_OW 1
64239: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
64240: LD_ADDR_EXP 68
64244: PUSH
64245: LD_EXP 68
64249: PPUSH
64250: LD_VAR 0 2
64254: PPUSH
64255: EMPTY
64256: PPUSH
64257: CALL_OW 1
64261: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
64262: LD_ADDR_EXP 42
64266: PUSH
64267: LD_EXP 42
64271: PPUSH
64272: LD_VAR 0 2
64276: PPUSH
64277: EMPTY
64278: PPUSH
64279: CALL_OW 1
64283: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
64284: LD_ADDR_EXP 43
64288: PUSH
64289: LD_EXP 43
64293: PPUSH
64294: LD_VAR 0 2
64298: PPUSH
64299: EMPTY
64300: PPUSH
64301: CALL_OW 1
64305: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
64306: LD_ADDR_EXP 44
64310: PUSH
64311: LD_EXP 44
64315: PPUSH
64316: LD_VAR 0 2
64320: PPUSH
64321: LD_EXP 36
64325: PUSH
64326: LD_VAR 0 2
64330: ARRAY
64331: PPUSH
64332: LD_INT 2
64334: PUSH
64335: LD_INT 30
64337: PUSH
64338: LD_INT 32
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 30
64347: PUSH
64348: LD_INT 33
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: LIST
64359: PPUSH
64360: CALL_OW 72
64364: PPUSH
64365: CALL_OW 1
64369: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
64370: LD_ADDR_EXP 45
64374: PUSH
64375: LD_EXP 45
64379: PPUSH
64380: LD_VAR 0 2
64384: PPUSH
64385: LD_EXP 36
64389: PUSH
64390: LD_VAR 0 2
64394: ARRAY
64395: PPUSH
64396: LD_INT 2
64398: PUSH
64399: LD_INT 30
64401: PUSH
64402: LD_INT 32
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 30
64411: PUSH
64412: LD_INT 31
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 58
64426: PUSH
64427: EMPTY
64428: LIST
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PPUSH
64434: CALL_OW 72
64438: PPUSH
64439: CALL_OW 1
64443: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
64444: LD_ADDR_EXP 46
64448: PUSH
64449: LD_EXP 46
64453: PPUSH
64454: LD_VAR 0 2
64458: PPUSH
64459: EMPTY
64460: PPUSH
64461: CALL_OW 1
64465: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
64466: LD_ADDR_EXP 50
64470: PUSH
64471: LD_EXP 50
64475: PPUSH
64476: LD_VAR 0 2
64480: PPUSH
64481: EMPTY
64482: PPUSH
64483: CALL_OW 1
64487: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
64488: LD_ADDR_EXP 49
64492: PUSH
64493: LD_EXP 49
64497: PPUSH
64498: LD_VAR 0 2
64502: PPUSH
64503: EMPTY
64504: PPUSH
64505: CALL_OW 1
64509: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
64510: LD_ADDR_EXP 51
64514: PUSH
64515: LD_EXP 51
64519: PPUSH
64520: LD_VAR 0 2
64524: PPUSH
64525: EMPTY
64526: PPUSH
64527: CALL_OW 1
64531: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
64532: LD_ADDR_EXP 52
64536: PUSH
64537: LD_EXP 52
64541: PPUSH
64542: LD_VAR 0 2
64546: PPUSH
64547: EMPTY
64548: PPUSH
64549: CALL_OW 1
64553: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
64554: LD_ADDR_EXP 53
64558: PUSH
64559: LD_EXP 53
64563: PPUSH
64564: LD_VAR 0 2
64568: PPUSH
64569: EMPTY
64570: PPUSH
64571: CALL_OW 1
64575: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
64576: LD_ADDR_EXP 54
64580: PUSH
64581: LD_EXP 54
64585: PPUSH
64586: LD_VAR 0 2
64590: PPUSH
64591: EMPTY
64592: PPUSH
64593: CALL_OW 1
64597: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
64598: LD_ADDR_EXP 55
64602: PUSH
64603: LD_EXP 55
64607: PPUSH
64608: LD_VAR 0 2
64612: PPUSH
64613: EMPTY
64614: PPUSH
64615: CALL_OW 1
64619: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
64620: LD_ADDR_EXP 56
64624: PUSH
64625: LD_EXP 56
64629: PPUSH
64630: LD_VAR 0 2
64634: PPUSH
64635: EMPTY
64636: PPUSH
64637: CALL_OW 1
64641: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
64642: LD_ADDR_EXP 57
64646: PUSH
64647: LD_EXP 57
64651: PPUSH
64652: LD_VAR 0 2
64656: PPUSH
64657: EMPTY
64658: PPUSH
64659: CALL_OW 1
64663: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
64664: LD_ADDR_EXP 58
64668: PUSH
64669: LD_EXP 58
64673: PPUSH
64674: LD_VAR 0 2
64678: PPUSH
64679: EMPTY
64680: PPUSH
64681: CALL_OW 1
64685: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
64686: LD_ADDR_EXP 47
64690: PUSH
64691: LD_EXP 47
64695: PPUSH
64696: LD_VAR 0 2
64700: PPUSH
64701: LD_INT 0
64703: PPUSH
64704: CALL_OW 1
64708: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
64709: LD_ADDR_EXP 60
64713: PUSH
64714: LD_EXP 60
64718: PPUSH
64719: LD_VAR 0 2
64723: PPUSH
64724: LD_INT 0
64726: PPUSH
64727: CALL_OW 1
64731: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
64732: LD_ADDR_EXP 48
64736: PUSH
64737: LD_EXP 48
64741: PPUSH
64742: LD_VAR 0 2
64746: PPUSH
64747: EMPTY
64748: PPUSH
64749: CALL_OW 1
64753: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
64754: LD_ADDR_EXP 59
64758: PUSH
64759: LD_EXP 59
64763: PPUSH
64764: LD_VAR 0 2
64768: PPUSH
64769: LD_INT 0
64771: PPUSH
64772: CALL_OW 1
64776: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
64777: LD_ADDR_EXP 61
64781: PUSH
64782: LD_EXP 61
64786: PPUSH
64787: LD_VAR 0 2
64791: PPUSH
64792: EMPTY
64793: PPUSH
64794: CALL_OW 1
64798: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
64799: LD_ADDR_EXP 64
64803: PUSH
64804: LD_EXP 64
64808: PPUSH
64809: LD_VAR 0 2
64813: PPUSH
64814: LD_INT 0
64816: PPUSH
64817: CALL_OW 1
64821: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
64822: LD_ADDR_EXP 65
64826: PUSH
64827: LD_EXP 65
64831: PPUSH
64832: LD_VAR 0 2
64836: PPUSH
64837: EMPTY
64838: PPUSH
64839: CALL_OW 1
64843: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
64844: LD_ADDR_EXP 66
64848: PUSH
64849: LD_EXP 66
64853: PPUSH
64854: LD_VAR 0 2
64858: PPUSH
64859: EMPTY
64860: PPUSH
64861: CALL_OW 1
64865: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64866: LD_ADDR_EXP 67
64870: PUSH
64871: LD_EXP 67
64875: PPUSH
64876: LD_VAR 0 2
64880: PPUSH
64881: EMPTY
64882: PPUSH
64883: CALL_OW 1
64887: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
64888: LD_ADDR_EXP 69
64892: PUSH
64893: LD_EXP 69
64897: PPUSH
64898: LD_VAR 0 2
64902: PPUSH
64903: LD_EXP 36
64907: PUSH
64908: LD_VAR 0 2
64912: ARRAY
64913: PPUSH
64914: LD_INT 2
64916: PUSH
64917: LD_INT 30
64919: PUSH
64920: LD_INT 6
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 30
64929: PUSH
64930: LD_INT 7
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 30
64939: PUSH
64940: LD_INT 8
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: PPUSH
64953: CALL_OW 72
64957: PPUSH
64958: CALL_OW 1
64962: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
64963: LD_ADDR_EXP 70
64967: PUSH
64968: LD_EXP 70
64972: PPUSH
64973: LD_VAR 0 2
64977: PPUSH
64978: EMPTY
64979: PPUSH
64980: CALL_OW 1
64984: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
64985: LD_ADDR_EXP 71
64989: PUSH
64990: LD_EXP 71
64994: PPUSH
64995: LD_VAR 0 2
64999: PPUSH
65000: EMPTY
65001: PPUSH
65002: CALL_OW 1
65006: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
65007: LD_ADDR_EXP 72
65011: PUSH
65012: LD_EXP 72
65016: PPUSH
65017: LD_VAR 0 2
65021: PPUSH
65022: EMPTY
65023: PPUSH
65024: CALL_OW 1
65028: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
65029: LD_ADDR_EXP 73
65033: PUSH
65034: LD_EXP 73
65038: PPUSH
65039: LD_VAR 0 2
65043: PPUSH
65044: EMPTY
65045: PPUSH
65046: CALL_OW 1
65050: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65051: LD_ADDR_EXP 74
65055: PUSH
65056: LD_EXP 74
65060: PPUSH
65061: LD_VAR 0 2
65065: PPUSH
65066: EMPTY
65067: PPUSH
65068: CALL_OW 1
65072: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
65073: LD_ADDR_EXP 75
65077: PUSH
65078: LD_EXP 75
65082: PPUSH
65083: LD_VAR 0 2
65087: PPUSH
65088: EMPTY
65089: PPUSH
65090: CALL_OW 1
65094: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65095: LD_ADDR_EXP 76
65099: PUSH
65100: LD_EXP 76
65104: PPUSH
65105: LD_VAR 0 2
65109: PPUSH
65110: EMPTY
65111: PPUSH
65112: CALL_OW 1
65116: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65117: LD_ADDR_EXP 77
65121: PUSH
65122: LD_EXP 77
65126: PPUSH
65127: LD_VAR 0 2
65131: PPUSH
65132: EMPTY
65133: PPUSH
65134: CALL_OW 1
65138: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65139: LD_ADDR_EXP 78
65143: PUSH
65144: LD_EXP 78
65148: PPUSH
65149: LD_VAR 0 2
65153: PPUSH
65154: LD_INT 0
65156: PPUSH
65157: CALL_OW 1
65161: ST_TO_ADDR
// end ;
65162: GO 64086
65164: POP
65165: POP
// MC_InitSides ( ) ;
65166: CALL 65452 0 0
// MC_InitResearch ( ) ;
65170: CALL 65191 0 0
// CustomInitMacro ( ) ;
65174: CALL 1407 0 0
// skirmish := true ;
65178: LD_ADDR_EXP 34
65182: PUSH
65183: LD_INT 1
65185: ST_TO_ADDR
// end ;
65186: LD_VAR 0 1
65190: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65191: LD_INT 0
65193: PPUSH
65194: PPUSH
65195: PPUSH
65196: PPUSH
65197: PPUSH
65198: PPUSH
// if not mc_bases then
65199: LD_EXP 36
65203: NOT
65204: IFFALSE 65208
// exit ;
65206: GO 65447
// for i = 1 to 8 do
65208: LD_ADDR_VAR 0 2
65212: PUSH
65213: DOUBLE
65214: LD_INT 1
65216: DEC
65217: ST_TO_ADDR
65218: LD_INT 8
65220: PUSH
65221: FOR_TO
65222: IFFALSE 65248
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
65224: LD_ADDR_EXP 63
65228: PUSH
65229: LD_EXP 63
65233: PPUSH
65234: LD_VAR 0 2
65238: PPUSH
65239: EMPTY
65240: PPUSH
65241: CALL_OW 1
65245: ST_TO_ADDR
65246: GO 65221
65248: POP
65249: POP
// tmp := [ ] ;
65250: LD_ADDR_VAR 0 5
65254: PUSH
65255: EMPTY
65256: ST_TO_ADDR
// for i = 1 to mc_sides do
65257: LD_ADDR_VAR 0 2
65261: PUSH
65262: DOUBLE
65263: LD_INT 1
65265: DEC
65266: ST_TO_ADDR
65267: LD_EXP 62
65271: PUSH
65272: FOR_TO
65273: IFFALSE 65331
// if not mc_sides [ i ] in tmp then
65275: LD_EXP 62
65279: PUSH
65280: LD_VAR 0 2
65284: ARRAY
65285: PUSH
65286: LD_VAR 0 5
65290: IN
65291: NOT
65292: IFFALSE 65329
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
65294: LD_ADDR_VAR 0 5
65298: PUSH
65299: LD_VAR 0 5
65303: PPUSH
65304: LD_VAR 0 5
65308: PUSH
65309: LD_INT 1
65311: PLUS
65312: PPUSH
65313: LD_EXP 62
65317: PUSH
65318: LD_VAR 0 2
65322: ARRAY
65323: PPUSH
65324: CALL_OW 2
65328: ST_TO_ADDR
65329: GO 65272
65331: POP
65332: POP
// if not tmp then
65333: LD_VAR 0 5
65337: NOT
65338: IFFALSE 65342
// exit ;
65340: GO 65447
// for j in tmp do
65342: LD_ADDR_VAR 0 3
65346: PUSH
65347: LD_VAR 0 5
65351: PUSH
65352: FOR_IN
65353: IFFALSE 65445
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
65355: LD_ADDR_VAR 0 6
65359: PUSH
65360: LD_INT 22
65362: PUSH
65363: LD_VAR 0 3
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PPUSH
65372: CALL_OW 69
65376: ST_TO_ADDR
// if not un then
65377: LD_VAR 0 6
65381: NOT
65382: IFFALSE 65386
// continue ;
65384: GO 65352
// nation := GetNation ( un [ 1 ] ) ;
65386: LD_ADDR_VAR 0 4
65390: PUSH
65391: LD_VAR 0 6
65395: PUSH
65396: LD_INT 1
65398: ARRAY
65399: PPUSH
65400: CALL_OW 248
65404: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
65405: LD_ADDR_EXP 63
65409: PUSH
65410: LD_EXP 63
65414: PPUSH
65415: LD_VAR 0 3
65419: PPUSH
65420: LD_VAR 0 3
65424: PPUSH
65425: LD_VAR 0 4
65429: PPUSH
65430: LD_INT 1
65432: PPUSH
65433: CALL 19401 0 3
65437: PPUSH
65438: CALL_OW 1
65442: ST_TO_ADDR
// end ;
65443: GO 65352
65445: POP
65446: POP
// end ;
65447: LD_VAR 0 1
65451: RET
// export function MC_InitSides ( ) ; var i ; begin
65452: LD_INT 0
65454: PPUSH
65455: PPUSH
// if not mc_bases then
65456: LD_EXP 36
65460: NOT
65461: IFFALSE 65465
// exit ;
65463: GO 65539
// for i = 1 to mc_bases do
65465: LD_ADDR_VAR 0 2
65469: PUSH
65470: DOUBLE
65471: LD_INT 1
65473: DEC
65474: ST_TO_ADDR
65475: LD_EXP 36
65479: PUSH
65480: FOR_TO
65481: IFFALSE 65537
// if mc_bases [ i ] then
65483: LD_EXP 36
65487: PUSH
65488: LD_VAR 0 2
65492: ARRAY
65493: IFFALSE 65535
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
65495: LD_ADDR_EXP 62
65499: PUSH
65500: LD_EXP 62
65504: PPUSH
65505: LD_VAR 0 2
65509: PPUSH
65510: LD_EXP 36
65514: PUSH
65515: LD_VAR 0 2
65519: ARRAY
65520: PUSH
65521: LD_INT 1
65523: ARRAY
65524: PPUSH
65525: CALL_OW 255
65529: PPUSH
65530: CALL_OW 1
65534: ST_TO_ADDR
65535: GO 65480
65537: POP
65538: POP
// end ;
65539: LD_VAR 0 1
65543: RET
// every 0 0$01 trigger skirmish do
65544: LD_EXP 34
65548: IFFALSE 65702
65550: GO 65552
65552: DISABLE
// begin enable ;
65553: ENABLE
// MC_CheckBuildings ( ) ;
65554: CALL 70191 0 0
// MC_CheckPeopleLife ( ) ;
65558: CALL 70316 0 0
// RaiseSailEvent ( 100 ) ;
65562: LD_INT 100
65564: PPUSH
65565: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
65569: LD_INT 103
65571: PPUSH
65572: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
65576: LD_INT 104
65578: PPUSH
65579: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
65583: LD_INT 105
65585: PPUSH
65586: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
65590: LD_INT 106
65592: PPUSH
65593: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
65597: LD_INT 107
65599: PPUSH
65600: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
65604: LD_INT 108
65606: PPUSH
65607: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
65611: LD_INT 109
65613: PPUSH
65614: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
65618: LD_INT 110
65620: PPUSH
65621: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
65625: LD_INT 111
65627: PPUSH
65628: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
65632: LD_INT 112
65634: PPUSH
65635: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
65639: LD_INT 113
65641: PPUSH
65642: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
65646: LD_INT 120
65648: PPUSH
65649: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
65653: LD_INT 121
65655: PPUSH
65656: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
65660: LD_INT 122
65662: PPUSH
65663: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
65667: LD_INT 123
65669: PPUSH
65670: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
65674: LD_INT 124
65676: PPUSH
65677: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
65681: LD_INT 125
65683: PPUSH
65684: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
65688: LD_INT 126
65690: PPUSH
65691: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
65695: LD_INT 200
65697: PPUSH
65698: CALL_OW 427
// end ;
65702: END
// on SailEvent ( event ) do begin if event < 100 then
65703: LD_VAR 0 1
65707: PUSH
65708: LD_INT 100
65710: LESS
65711: IFFALSE 65722
// CustomEvent ( event ) ;
65713: LD_VAR 0 1
65717: PPUSH
65718: CALL 18588 0 1
// if event = 100 then
65722: LD_VAR 0 1
65726: PUSH
65727: LD_INT 100
65729: EQUAL
65730: IFFALSE 65736
// MC_ClassManager ( ) ;
65732: CALL 66128 0 0
// if event = 101 then
65736: LD_VAR 0 1
65740: PUSH
65741: LD_INT 101
65743: EQUAL
65744: IFFALSE 65750
// MC_RepairBuildings ( ) ;
65746: CALL 70912 0 0
// if event = 102 then
65750: LD_VAR 0 1
65754: PUSH
65755: LD_INT 102
65757: EQUAL
65758: IFFALSE 65764
// MC_Heal ( ) ;
65760: CALL 71318 0 0
// if event = 103 then
65764: LD_VAR 0 1
65768: PUSH
65769: LD_INT 103
65771: EQUAL
65772: IFFALSE 65778
// MC_Build ( ) ;
65774: CALL 71740 0 0
// if event = 104 then
65778: LD_VAR 0 1
65782: PUSH
65783: LD_INT 104
65785: EQUAL
65786: IFFALSE 65792
// MC_TurretWeapon ( ) ;
65788: CALL 73353 0 0
// if event = 105 then
65792: LD_VAR 0 1
65796: PUSH
65797: LD_INT 105
65799: EQUAL
65800: IFFALSE 65806
// MC_BuildUpgrade ( ) ;
65802: CALL 72904 0 0
// if event = 106 then
65806: LD_VAR 0 1
65810: PUSH
65811: LD_INT 106
65813: EQUAL
65814: IFFALSE 65820
// MC_PlantMines ( ) ;
65816: CALL 73783 0 0
// if event = 107 then
65820: LD_VAR 0 1
65824: PUSH
65825: LD_INT 107
65827: EQUAL
65828: IFFALSE 65834
// MC_CollectCrates ( ) ;
65830: CALL 74817 0 0
// if event = 108 then
65834: LD_VAR 0 1
65838: PUSH
65839: LD_INT 108
65841: EQUAL
65842: IFFALSE 65848
// MC_LinkRemoteControl ( ) ;
65844: CALL 76574 0 0
// if event = 109 then
65848: LD_VAR 0 1
65852: PUSH
65853: LD_INT 109
65855: EQUAL
65856: IFFALSE 65862
// MC_ProduceVehicle ( ) ;
65858: CALL 76755 0 0
// if event = 110 then
65862: LD_VAR 0 1
65866: PUSH
65867: LD_INT 110
65869: EQUAL
65870: IFFALSE 65876
// MC_SendAttack ( ) ;
65872: CALL 77236 0 0
// if event = 111 then
65876: LD_VAR 0 1
65880: PUSH
65881: LD_INT 111
65883: EQUAL
65884: IFFALSE 65890
// MC_Defend ( ) ;
65886: CALL 77344 0 0
// if event = 112 then
65890: LD_VAR 0 1
65894: PUSH
65895: LD_INT 112
65897: EQUAL
65898: IFFALSE 65904
// MC_Research ( ) ;
65900: CALL 77949 0 0
// if event = 113 then
65904: LD_VAR 0 1
65908: PUSH
65909: LD_INT 113
65911: EQUAL
65912: IFFALSE 65918
// MC_MinesTrigger ( ) ;
65914: CALL 79063 0 0
// if event = 120 then
65918: LD_VAR 0 1
65922: PUSH
65923: LD_INT 120
65925: EQUAL
65926: IFFALSE 65932
// MC_RepairVehicle ( ) ;
65928: CALL 79162 0 0
// if event = 121 then
65932: LD_VAR 0 1
65936: PUSH
65937: LD_INT 121
65939: EQUAL
65940: IFFALSE 65946
// MC_TameApe ( ) ;
65942: CALL 79869 0 0
// if event = 122 then
65946: LD_VAR 0 1
65950: PUSH
65951: LD_INT 122
65953: EQUAL
65954: IFFALSE 65960
// MC_ChangeApeClass ( ) ;
65956: CALL 80698 0 0
// if event = 123 then
65960: LD_VAR 0 1
65964: PUSH
65965: LD_INT 123
65967: EQUAL
65968: IFFALSE 65974
// MC_Bazooka ( ) ;
65970: CALL 81348 0 0
// if event = 124 then
65974: LD_VAR 0 1
65978: PUSH
65979: LD_INT 124
65981: EQUAL
65982: IFFALSE 65988
// MC_TeleportExit ( ) ;
65984: CALL 81546 0 0
// if event = 125 then
65988: LD_VAR 0 1
65992: PUSH
65993: LD_INT 125
65995: EQUAL
65996: IFFALSE 66002
// MC_Deposits ( ) ;
65998: CALL 82193 0 0
// if event = 126 then
66002: LD_VAR 0 1
66006: PUSH
66007: LD_INT 126
66009: EQUAL
66010: IFFALSE 66016
// MC_RemoteDriver ( ) ;
66012: CALL 82818 0 0
// if event = 200 then
66016: LD_VAR 0 1
66020: PUSH
66021: LD_INT 200
66023: EQUAL
66024: IFFALSE 66030
// MC_Idle ( ) ;
66026: CALL 84551 0 0
// end ;
66030: PPOPN 1
66032: END
// export function MC_Reset ( base , tag ) ; var i ; begin
66033: LD_INT 0
66035: PPUSH
66036: PPUSH
// if not mc_bases [ base ] or not tag then
66037: LD_EXP 36
66041: PUSH
66042: LD_VAR 0 1
66046: ARRAY
66047: NOT
66048: PUSH
66049: LD_VAR 0 2
66053: NOT
66054: OR
66055: IFFALSE 66059
// exit ;
66057: GO 66123
// for i in mc_bases [ base ] union mc_ape [ base ] do
66059: LD_ADDR_VAR 0 4
66063: PUSH
66064: LD_EXP 36
66068: PUSH
66069: LD_VAR 0 1
66073: ARRAY
66074: PUSH
66075: LD_EXP 65
66079: PUSH
66080: LD_VAR 0 1
66084: ARRAY
66085: UNION
66086: PUSH
66087: FOR_IN
66088: IFFALSE 66121
// if GetTag ( i ) = tag then
66090: LD_VAR 0 4
66094: PPUSH
66095: CALL_OW 110
66099: PUSH
66100: LD_VAR 0 2
66104: EQUAL
66105: IFFALSE 66119
// SetTag ( i , 0 ) ;
66107: LD_VAR 0 4
66111: PPUSH
66112: LD_INT 0
66114: PPUSH
66115: CALL_OW 109
66119: GO 66087
66121: POP
66122: POP
// end ;
66123: LD_VAR 0 3
66127: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66128: LD_INT 0
66130: PPUSH
66131: PPUSH
66132: PPUSH
66133: PPUSH
66134: PPUSH
66135: PPUSH
66136: PPUSH
66137: PPUSH
// if not mc_bases then
66138: LD_EXP 36
66142: NOT
66143: IFFALSE 66147
// exit ;
66145: GO 66605
// for i = 1 to mc_bases do
66147: LD_ADDR_VAR 0 2
66151: PUSH
66152: DOUBLE
66153: LD_INT 1
66155: DEC
66156: ST_TO_ADDR
66157: LD_EXP 36
66161: PUSH
66162: FOR_TO
66163: IFFALSE 66603
// begin tmp := MC_ClassCheckReq ( i ) ;
66165: LD_ADDR_VAR 0 4
66169: PUSH
66170: LD_VAR 0 2
66174: PPUSH
66175: CALL 66610 0 1
66179: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66180: LD_ADDR_EXP 77
66184: PUSH
66185: LD_EXP 77
66189: PPUSH
66190: LD_VAR 0 2
66194: PPUSH
66195: LD_VAR 0 4
66199: PPUSH
66200: CALL_OW 1
66204: ST_TO_ADDR
// if not tmp then
66205: LD_VAR 0 4
66209: NOT
66210: IFFALSE 66214
// continue ;
66212: GO 66162
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
66214: LD_ADDR_VAR 0 6
66218: PUSH
66219: LD_EXP 36
66223: PUSH
66224: LD_VAR 0 2
66228: ARRAY
66229: PPUSH
66230: LD_INT 2
66232: PUSH
66233: LD_INT 30
66235: PUSH
66236: LD_INT 4
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 30
66245: PUSH
66246: LD_INT 5
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: LIST
66257: PPUSH
66258: CALL_OW 72
66262: PUSH
66263: LD_EXP 36
66267: PUSH
66268: LD_VAR 0 2
66272: ARRAY
66273: PPUSH
66274: LD_INT 2
66276: PUSH
66277: LD_INT 30
66279: PUSH
66280: LD_INT 0
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 30
66289: PUSH
66290: LD_INT 1
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: LIST
66301: PPUSH
66302: CALL_OW 72
66306: PUSH
66307: LD_EXP 36
66311: PUSH
66312: LD_VAR 0 2
66316: ARRAY
66317: PPUSH
66318: LD_INT 30
66320: PUSH
66321: LD_INT 3
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PPUSH
66328: CALL_OW 72
66332: PUSH
66333: LD_EXP 36
66337: PUSH
66338: LD_VAR 0 2
66342: ARRAY
66343: PPUSH
66344: LD_INT 2
66346: PUSH
66347: LD_INT 30
66349: PUSH
66350: LD_INT 6
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 30
66359: PUSH
66360: LD_INT 7
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 30
66369: PUSH
66370: LD_INT 8
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: PPUSH
66383: CALL_OW 72
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: ST_TO_ADDR
// for j = 1 to 4 do
66394: LD_ADDR_VAR 0 3
66398: PUSH
66399: DOUBLE
66400: LD_INT 1
66402: DEC
66403: ST_TO_ADDR
66404: LD_INT 4
66406: PUSH
66407: FOR_TO
66408: IFFALSE 66599
// begin if not tmp [ j ] then
66410: LD_VAR 0 4
66414: PUSH
66415: LD_VAR 0 3
66419: ARRAY
66420: NOT
66421: IFFALSE 66425
// continue ;
66423: GO 66407
// for p in tmp [ j ] do
66425: LD_ADDR_VAR 0 5
66429: PUSH
66430: LD_VAR 0 4
66434: PUSH
66435: LD_VAR 0 3
66439: ARRAY
66440: PUSH
66441: FOR_IN
66442: IFFALSE 66595
// begin if not b [ j ] then
66444: LD_VAR 0 6
66448: PUSH
66449: LD_VAR 0 3
66453: ARRAY
66454: NOT
66455: IFFALSE 66459
// break ;
66457: GO 66595
// e := 0 ;
66459: LD_ADDR_VAR 0 7
66463: PUSH
66464: LD_INT 0
66466: ST_TO_ADDR
// for k in b [ j ] do
66467: LD_ADDR_VAR 0 8
66471: PUSH
66472: LD_VAR 0 6
66476: PUSH
66477: LD_VAR 0 3
66481: ARRAY
66482: PUSH
66483: FOR_IN
66484: IFFALSE 66511
// if IsNotFull ( k ) then
66486: LD_VAR 0 8
66490: PPUSH
66491: CALL 23398 0 1
66495: IFFALSE 66509
// begin e := k ;
66497: LD_ADDR_VAR 0 7
66501: PUSH
66502: LD_VAR 0 8
66506: ST_TO_ADDR
// break ;
66507: GO 66511
// end ;
66509: GO 66483
66511: POP
66512: POP
// if e and not UnitGoingToBuilding ( p , e ) then
66513: LD_VAR 0 7
66517: PUSH
66518: LD_VAR 0 5
66522: PPUSH
66523: LD_VAR 0 7
66527: PPUSH
66528: CALL 60456 0 2
66532: NOT
66533: AND
66534: IFFALSE 66593
// begin if IsInUnit ( p ) then
66536: LD_VAR 0 5
66540: PPUSH
66541: CALL_OW 310
66545: IFFALSE 66556
// ComExitBuilding ( p ) ;
66547: LD_VAR 0 5
66551: PPUSH
66552: CALL_OW 122
// ComEnterUnit ( p , e ) ;
66556: LD_VAR 0 5
66560: PPUSH
66561: LD_VAR 0 7
66565: PPUSH
66566: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
66570: LD_VAR 0 5
66574: PPUSH
66575: LD_VAR 0 3
66579: PPUSH
66580: CALL_OW 183
// AddComExitBuilding ( p ) ;
66584: LD_VAR 0 5
66588: PPUSH
66589: CALL_OW 182
// end ; end ;
66593: GO 66441
66595: POP
66596: POP
// end ;
66597: GO 66407
66599: POP
66600: POP
// end ;
66601: GO 66162
66603: POP
66604: POP
// end ;
66605: LD_VAR 0 1
66609: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
66610: LD_INT 0
66612: PPUSH
66613: PPUSH
66614: PPUSH
66615: PPUSH
66616: PPUSH
66617: PPUSH
66618: PPUSH
66619: PPUSH
66620: PPUSH
66621: PPUSH
66622: PPUSH
66623: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
66624: LD_VAR 0 1
66628: NOT
66629: PUSH
66630: LD_EXP 36
66634: PUSH
66635: LD_VAR 0 1
66639: ARRAY
66640: NOT
66641: OR
66642: PUSH
66643: LD_EXP 36
66647: PUSH
66648: LD_VAR 0 1
66652: ARRAY
66653: PPUSH
66654: LD_INT 2
66656: PUSH
66657: LD_INT 30
66659: PUSH
66660: LD_INT 0
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 30
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: LIST
66681: PPUSH
66682: CALL_OW 72
66686: NOT
66687: OR
66688: IFFALSE 66692
// exit ;
66690: GO 70186
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66692: LD_ADDR_VAR 0 4
66696: PUSH
66697: LD_EXP 36
66701: PUSH
66702: LD_VAR 0 1
66706: ARRAY
66707: PPUSH
66708: LD_INT 2
66710: PUSH
66711: LD_INT 25
66713: PUSH
66714: LD_INT 1
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 25
66723: PUSH
66724: LD_INT 2
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 25
66733: PUSH
66734: LD_INT 3
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 25
66743: PUSH
66744: LD_INT 4
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 25
66753: PUSH
66754: LD_INT 5
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 25
66763: PUSH
66764: LD_INT 8
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 25
66773: PUSH
66774: LD_INT 9
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: PPUSH
66791: CALL_OW 72
66795: ST_TO_ADDR
// for i in tmp do
66796: LD_ADDR_VAR 0 3
66800: PUSH
66801: LD_VAR 0 4
66805: PUSH
66806: FOR_IN
66807: IFFALSE 66838
// if GetTag ( i ) then
66809: LD_VAR 0 3
66813: PPUSH
66814: CALL_OW 110
66818: IFFALSE 66836
// tmp := tmp diff i ;
66820: LD_ADDR_VAR 0 4
66824: PUSH
66825: LD_VAR 0 4
66829: PUSH
66830: LD_VAR 0 3
66834: DIFF
66835: ST_TO_ADDR
66836: GO 66806
66838: POP
66839: POP
// if not tmp then
66840: LD_VAR 0 4
66844: NOT
66845: IFFALSE 66849
// exit ;
66847: GO 70186
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66849: LD_ADDR_VAR 0 5
66853: PUSH
66854: LD_EXP 36
66858: PUSH
66859: LD_VAR 0 1
66863: ARRAY
66864: PPUSH
66865: LD_INT 2
66867: PUSH
66868: LD_INT 25
66870: PUSH
66871: LD_INT 1
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 25
66880: PUSH
66881: LD_INT 5
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 25
66890: PUSH
66891: LD_INT 8
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 25
66900: PUSH
66901: LD_INT 9
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: PPUSH
66915: CALL_OW 72
66919: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
66920: LD_ADDR_VAR 0 6
66924: PUSH
66925: LD_EXP 36
66929: PUSH
66930: LD_VAR 0 1
66934: ARRAY
66935: PPUSH
66936: LD_INT 25
66938: PUSH
66939: LD_INT 2
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PPUSH
66946: CALL_OW 72
66950: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
66951: LD_ADDR_VAR 0 7
66955: PUSH
66956: LD_EXP 36
66960: PUSH
66961: LD_VAR 0 1
66965: ARRAY
66966: PPUSH
66967: LD_INT 25
66969: PUSH
66970: LD_INT 3
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PPUSH
66977: CALL_OW 72
66981: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
66982: LD_ADDR_VAR 0 8
66986: PUSH
66987: LD_EXP 36
66991: PUSH
66992: LD_VAR 0 1
66996: ARRAY
66997: PPUSH
66998: LD_INT 25
67000: PUSH
67001: LD_INT 4
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 24
67010: PUSH
67011: LD_INT 251
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PPUSH
67022: CALL_OW 72
67026: ST_TO_ADDR
// if mc_scan [ base ] then
67027: LD_EXP 59
67031: PUSH
67032: LD_VAR 0 1
67036: ARRAY
67037: IFFALSE 67498
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
67039: LD_ADDR_EXP 78
67043: PUSH
67044: LD_EXP 78
67048: PPUSH
67049: LD_VAR 0 1
67053: PPUSH
67054: LD_INT 4
67056: PPUSH
67057: CALL_OW 1
67061: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67062: LD_ADDR_VAR 0 12
67066: PUSH
67067: LD_EXP 36
67071: PUSH
67072: LD_VAR 0 1
67076: ARRAY
67077: PPUSH
67078: LD_INT 2
67080: PUSH
67081: LD_INT 30
67083: PUSH
67084: LD_INT 4
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 30
67093: PUSH
67094: LD_INT 5
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: LIST
67105: PPUSH
67106: CALL_OW 72
67110: ST_TO_ADDR
// if not b then
67111: LD_VAR 0 12
67115: NOT
67116: IFFALSE 67120
// exit ;
67118: GO 70186
// p := [ ] ;
67120: LD_ADDR_VAR 0 11
67124: PUSH
67125: EMPTY
67126: ST_TO_ADDR
// if sci >= 2 then
67127: LD_VAR 0 8
67131: PUSH
67132: LD_INT 2
67134: GREATEREQUAL
67135: IFFALSE 67166
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67137: LD_ADDR_VAR 0 8
67141: PUSH
67142: LD_VAR 0 8
67146: PUSH
67147: LD_INT 1
67149: ARRAY
67150: PUSH
67151: LD_VAR 0 8
67155: PUSH
67156: LD_INT 2
67158: ARRAY
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: ST_TO_ADDR
67164: GO 67227
// if sci = 1 then
67166: LD_VAR 0 8
67170: PUSH
67171: LD_INT 1
67173: EQUAL
67174: IFFALSE 67195
// sci := [ sci [ 1 ] ] else
67176: LD_ADDR_VAR 0 8
67180: PUSH
67181: LD_VAR 0 8
67185: PUSH
67186: LD_INT 1
67188: ARRAY
67189: PUSH
67190: EMPTY
67191: LIST
67192: ST_TO_ADDR
67193: GO 67227
// if sci = 0 then
67195: LD_VAR 0 8
67199: PUSH
67200: LD_INT 0
67202: EQUAL
67203: IFFALSE 67227
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
67205: LD_ADDR_VAR 0 11
67209: PUSH
67210: LD_VAR 0 4
67214: PPUSH
67215: LD_INT 4
67217: PPUSH
67218: CALL 60319 0 2
67222: PUSH
67223: LD_INT 1
67225: ARRAY
67226: ST_TO_ADDR
// if eng > 4 then
67227: LD_VAR 0 6
67231: PUSH
67232: LD_INT 4
67234: GREATER
67235: IFFALSE 67281
// for i = eng downto 4 do
67237: LD_ADDR_VAR 0 3
67241: PUSH
67242: DOUBLE
67243: LD_VAR 0 6
67247: INC
67248: ST_TO_ADDR
67249: LD_INT 4
67251: PUSH
67252: FOR_DOWNTO
67253: IFFALSE 67279
// eng := eng diff eng [ i ] ;
67255: LD_ADDR_VAR 0 6
67259: PUSH
67260: LD_VAR 0 6
67264: PUSH
67265: LD_VAR 0 6
67269: PUSH
67270: LD_VAR 0 3
67274: ARRAY
67275: DIFF
67276: ST_TO_ADDR
67277: GO 67252
67279: POP
67280: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
67281: LD_ADDR_VAR 0 4
67285: PUSH
67286: LD_VAR 0 4
67290: PUSH
67291: LD_VAR 0 5
67295: PUSH
67296: LD_VAR 0 6
67300: UNION
67301: PUSH
67302: LD_VAR 0 7
67306: UNION
67307: PUSH
67308: LD_VAR 0 8
67312: UNION
67313: DIFF
67314: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
67315: LD_ADDR_VAR 0 13
67319: PUSH
67320: LD_EXP 36
67324: PUSH
67325: LD_VAR 0 1
67329: ARRAY
67330: PPUSH
67331: LD_INT 2
67333: PUSH
67334: LD_INT 30
67336: PUSH
67337: LD_INT 32
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 30
67346: PUSH
67347: LD_INT 31
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: LIST
67358: PPUSH
67359: CALL_OW 72
67363: PUSH
67364: LD_EXP 36
67368: PUSH
67369: LD_VAR 0 1
67373: ARRAY
67374: PPUSH
67375: LD_INT 2
67377: PUSH
67378: LD_INT 30
67380: PUSH
67381: LD_INT 4
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 30
67390: PUSH
67391: LD_INT 5
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: LIST
67402: PPUSH
67403: CALL_OW 72
67407: PUSH
67408: LD_INT 6
67410: MUL
67411: PLUS
67412: ST_TO_ADDR
// if bcount < tmp then
67413: LD_VAR 0 13
67417: PUSH
67418: LD_VAR 0 4
67422: LESS
67423: IFFALSE 67469
// for i = tmp downto bcount do
67425: LD_ADDR_VAR 0 3
67429: PUSH
67430: DOUBLE
67431: LD_VAR 0 4
67435: INC
67436: ST_TO_ADDR
67437: LD_VAR 0 13
67441: PUSH
67442: FOR_DOWNTO
67443: IFFALSE 67467
// tmp := Delete ( tmp , tmp ) ;
67445: LD_ADDR_VAR 0 4
67449: PUSH
67450: LD_VAR 0 4
67454: PPUSH
67455: LD_VAR 0 4
67459: PPUSH
67460: CALL_OW 3
67464: ST_TO_ADDR
67465: GO 67442
67467: POP
67468: POP
// result := [ tmp , 0 , 0 , p ] ;
67469: LD_ADDR_VAR 0 2
67473: PUSH
67474: LD_VAR 0 4
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: LD_VAR 0 11
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: ST_TO_ADDR
// exit ;
67496: GO 70186
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67498: LD_EXP 36
67502: PUSH
67503: LD_VAR 0 1
67507: ARRAY
67508: PPUSH
67509: LD_INT 2
67511: PUSH
67512: LD_INT 30
67514: PUSH
67515: LD_INT 6
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 30
67524: PUSH
67525: LD_INT 7
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 30
67534: PUSH
67535: LD_INT 8
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: PPUSH
67548: CALL_OW 72
67552: NOT
67553: PUSH
67554: LD_EXP 36
67558: PUSH
67559: LD_VAR 0 1
67563: ARRAY
67564: PPUSH
67565: LD_INT 30
67567: PUSH
67568: LD_INT 3
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PPUSH
67575: CALL_OW 72
67579: NOT
67580: AND
67581: IFFALSE 67653
// begin if eng = tmp then
67583: LD_VAR 0 6
67587: PUSH
67588: LD_VAR 0 4
67592: EQUAL
67593: IFFALSE 67597
// exit ;
67595: GO 70186
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
67597: LD_ADDR_EXP 78
67601: PUSH
67602: LD_EXP 78
67606: PPUSH
67607: LD_VAR 0 1
67611: PPUSH
67612: LD_INT 1
67614: PPUSH
67615: CALL_OW 1
67619: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
67620: LD_ADDR_VAR 0 2
67624: PUSH
67625: LD_INT 0
67627: PUSH
67628: LD_VAR 0 4
67632: PUSH
67633: LD_VAR 0 6
67637: DIFF
67638: PUSH
67639: LD_INT 0
67641: PUSH
67642: LD_INT 0
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: ST_TO_ADDR
// exit ;
67651: GO 70186
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67653: LD_EXP 63
67657: PUSH
67658: LD_EXP 62
67662: PUSH
67663: LD_VAR 0 1
67667: ARRAY
67668: ARRAY
67669: PUSH
67670: LD_EXP 36
67674: PUSH
67675: LD_VAR 0 1
67679: ARRAY
67680: PPUSH
67681: LD_INT 2
67683: PUSH
67684: LD_INT 30
67686: PUSH
67687: LD_INT 6
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 30
67696: PUSH
67697: LD_INT 7
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 30
67706: PUSH
67707: LD_INT 8
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: PPUSH
67720: CALL_OW 72
67724: AND
67725: PUSH
67726: LD_EXP 36
67730: PUSH
67731: LD_VAR 0 1
67735: ARRAY
67736: PPUSH
67737: LD_INT 30
67739: PUSH
67740: LD_INT 3
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PPUSH
67747: CALL_OW 72
67751: NOT
67752: AND
67753: IFFALSE 67967
// begin if sci >= 6 then
67755: LD_VAR 0 8
67759: PUSH
67760: LD_INT 6
67762: GREATEREQUAL
67763: IFFALSE 67767
// exit ;
67765: GO 70186
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
67767: LD_ADDR_EXP 78
67771: PUSH
67772: LD_EXP 78
67776: PPUSH
67777: LD_VAR 0 1
67781: PPUSH
67782: LD_INT 2
67784: PPUSH
67785: CALL_OW 1
67789: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
67790: LD_ADDR_VAR 0 9
67794: PUSH
67795: LD_VAR 0 4
67799: PUSH
67800: LD_VAR 0 8
67804: DIFF
67805: PPUSH
67806: LD_INT 4
67808: PPUSH
67809: CALL 60319 0 2
67813: ST_TO_ADDR
// p := [ ] ;
67814: LD_ADDR_VAR 0 11
67818: PUSH
67819: EMPTY
67820: ST_TO_ADDR
// if sci < 6 and sort > 6 then
67821: LD_VAR 0 8
67825: PUSH
67826: LD_INT 6
67828: LESS
67829: PUSH
67830: LD_VAR 0 9
67834: PUSH
67835: LD_INT 6
67837: GREATER
67838: AND
67839: IFFALSE 67920
// begin for i = 1 to 6 - sci do
67841: LD_ADDR_VAR 0 3
67845: PUSH
67846: DOUBLE
67847: LD_INT 1
67849: DEC
67850: ST_TO_ADDR
67851: LD_INT 6
67853: PUSH
67854: LD_VAR 0 8
67858: MINUS
67859: PUSH
67860: FOR_TO
67861: IFFALSE 67916
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
67863: LD_ADDR_VAR 0 11
67867: PUSH
67868: LD_VAR 0 11
67872: PPUSH
67873: LD_VAR 0 11
67877: PUSH
67878: LD_INT 1
67880: PLUS
67881: PPUSH
67882: LD_VAR 0 9
67886: PUSH
67887: LD_INT 1
67889: ARRAY
67890: PPUSH
67891: CALL_OW 2
67895: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
67896: LD_ADDR_VAR 0 9
67900: PUSH
67901: LD_VAR 0 9
67905: PPUSH
67906: LD_INT 1
67908: PPUSH
67909: CALL_OW 3
67913: ST_TO_ADDR
// end ;
67914: GO 67860
67916: POP
67917: POP
// end else
67918: GO 67940
// if sort then
67920: LD_VAR 0 9
67924: IFFALSE 67940
// p := sort [ 1 ] ;
67926: LD_ADDR_VAR 0 11
67930: PUSH
67931: LD_VAR 0 9
67935: PUSH
67936: LD_INT 1
67938: ARRAY
67939: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
67940: LD_ADDR_VAR 0 2
67944: PUSH
67945: LD_INT 0
67947: PUSH
67948: LD_INT 0
67950: PUSH
67951: LD_INT 0
67953: PUSH
67954: LD_VAR 0 11
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: ST_TO_ADDR
// exit ;
67965: GO 70186
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67967: LD_EXP 63
67971: PUSH
67972: LD_EXP 62
67976: PUSH
67977: LD_VAR 0 1
67981: ARRAY
67982: ARRAY
67983: PUSH
67984: LD_EXP 36
67988: PUSH
67989: LD_VAR 0 1
67993: ARRAY
67994: PPUSH
67995: LD_INT 2
67997: PUSH
67998: LD_INT 30
68000: PUSH
68001: LD_INT 6
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 30
68010: PUSH
68011: LD_INT 7
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 30
68020: PUSH
68021: LD_INT 8
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: PPUSH
68034: CALL_OW 72
68038: AND
68039: PUSH
68040: LD_EXP 36
68044: PUSH
68045: LD_VAR 0 1
68049: ARRAY
68050: PPUSH
68051: LD_INT 30
68053: PUSH
68054: LD_INT 3
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PPUSH
68061: CALL_OW 72
68065: AND
68066: IFFALSE 68800
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
68068: LD_ADDR_EXP 78
68072: PUSH
68073: LD_EXP 78
68077: PPUSH
68078: LD_VAR 0 1
68082: PPUSH
68083: LD_INT 3
68085: PPUSH
68086: CALL_OW 1
68090: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68091: LD_ADDR_VAR 0 2
68095: PUSH
68096: LD_INT 0
68098: PUSH
68099: LD_INT 0
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: LD_INT 0
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: ST_TO_ADDR
// if not eng then
68114: LD_VAR 0 6
68118: NOT
68119: IFFALSE 68182
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68121: LD_ADDR_VAR 0 11
68125: PUSH
68126: LD_VAR 0 4
68130: PPUSH
68131: LD_INT 2
68133: PPUSH
68134: CALL 60319 0 2
68138: PUSH
68139: LD_INT 1
68141: ARRAY
68142: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68143: LD_ADDR_VAR 0 2
68147: PUSH
68148: LD_VAR 0 2
68152: PPUSH
68153: LD_INT 2
68155: PPUSH
68156: LD_VAR 0 11
68160: PPUSH
68161: CALL_OW 1
68165: ST_TO_ADDR
// tmp := tmp diff p ;
68166: LD_ADDR_VAR 0 4
68170: PUSH
68171: LD_VAR 0 4
68175: PUSH
68176: LD_VAR 0 11
68180: DIFF
68181: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68182: LD_VAR 0 4
68186: PUSH
68187: LD_VAR 0 8
68191: PUSH
68192: LD_INT 6
68194: LESS
68195: AND
68196: IFFALSE 68384
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
68198: LD_ADDR_VAR 0 9
68202: PUSH
68203: LD_VAR 0 4
68207: PUSH
68208: LD_VAR 0 8
68212: PUSH
68213: LD_VAR 0 7
68217: UNION
68218: DIFF
68219: PPUSH
68220: LD_INT 4
68222: PPUSH
68223: CALL 60319 0 2
68227: ST_TO_ADDR
// p := [ ] ;
68228: LD_ADDR_VAR 0 11
68232: PUSH
68233: EMPTY
68234: ST_TO_ADDR
// if sort then
68235: LD_VAR 0 9
68239: IFFALSE 68355
// for i = 1 to 6 - sci do
68241: LD_ADDR_VAR 0 3
68245: PUSH
68246: DOUBLE
68247: LD_INT 1
68249: DEC
68250: ST_TO_ADDR
68251: LD_INT 6
68253: PUSH
68254: LD_VAR 0 8
68258: MINUS
68259: PUSH
68260: FOR_TO
68261: IFFALSE 68353
// begin if i = sort then
68263: LD_VAR 0 3
68267: PUSH
68268: LD_VAR 0 9
68272: EQUAL
68273: IFFALSE 68277
// break ;
68275: GO 68353
// if GetClass ( i ) = 4 then
68277: LD_VAR 0 3
68281: PPUSH
68282: CALL_OW 257
68286: PUSH
68287: LD_INT 4
68289: EQUAL
68290: IFFALSE 68294
// continue ;
68292: GO 68260
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68294: LD_ADDR_VAR 0 11
68298: PUSH
68299: LD_VAR 0 11
68303: PPUSH
68304: LD_VAR 0 11
68308: PUSH
68309: LD_INT 1
68311: PLUS
68312: PPUSH
68313: LD_VAR 0 9
68317: PUSH
68318: LD_VAR 0 3
68322: ARRAY
68323: PPUSH
68324: CALL_OW 2
68328: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68329: LD_ADDR_VAR 0 4
68333: PUSH
68334: LD_VAR 0 4
68338: PUSH
68339: LD_VAR 0 9
68343: PUSH
68344: LD_VAR 0 3
68348: ARRAY
68349: DIFF
68350: ST_TO_ADDR
// end ;
68351: GO 68260
68353: POP
68354: POP
// if p then
68355: LD_VAR 0 11
68359: IFFALSE 68384
// result := Replace ( result , 4 , p ) ;
68361: LD_ADDR_VAR 0 2
68365: PUSH
68366: LD_VAR 0 2
68370: PPUSH
68371: LD_INT 4
68373: PPUSH
68374: LD_VAR 0 11
68378: PPUSH
68379: CALL_OW 1
68383: ST_TO_ADDR
// end ; if tmp and mech < 6 then
68384: LD_VAR 0 4
68388: PUSH
68389: LD_VAR 0 7
68393: PUSH
68394: LD_INT 6
68396: LESS
68397: AND
68398: IFFALSE 68586
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
68400: LD_ADDR_VAR 0 9
68404: PUSH
68405: LD_VAR 0 4
68409: PUSH
68410: LD_VAR 0 8
68414: PUSH
68415: LD_VAR 0 7
68419: UNION
68420: DIFF
68421: PPUSH
68422: LD_INT 3
68424: PPUSH
68425: CALL 60319 0 2
68429: ST_TO_ADDR
// p := [ ] ;
68430: LD_ADDR_VAR 0 11
68434: PUSH
68435: EMPTY
68436: ST_TO_ADDR
// if sort then
68437: LD_VAR 0 9
68441: IFFALSE 68557
// for i = 1 to 6 - mech do
68443: LD_ADDR_VAR 0 3
68447: PUSH
68448: DOUBLE
68449: LD_INT 1
68451: DEC
68452: ST_TO_ADDR
68453: LD_INT 6
68455: PUSH
68456: LD_VAR 0 7
68460: MINUS
68461: PUSH
68462: FOR_TO
68463: IFFALSE 68555
// begin if i = sort then
68465: LD_VAR 0 3
68469: PUSH
68470: LD_VAR 0 9
68474: EQUAL
68475: IFFALSE 68479
// break ;
68477: GO 68555
// if GetClass ( i ) = 3 then
68479: LD_VAR 0 3
68483: PPUSH
68484: CALL_OW 257
68488: PUSH
68489: LD_INT 3
68491: EQUAL
68492: IFFALSE 68496
// continue ;
68494: GO 68462
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68496: LD_ADDR_VAR 0 11
68500: PUSH
68501: LD_VAR 0 11
68505: PPUSH
68506: LD_VAR 0 11
68510: PUSH
68511: LD_INT 1
68513: PLUS
68514: PPUSH
68515: LD_VAR 0 9
68519: PUSH
68520: LD_VAR 0 3
68524: ARRAY
68525: PPUSH
68526: CALL_OW 2
68530: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68531: LD_ADDR_VAR 0 4
68535: PUSH
68536: LD_VAR 0 4
68540: PUSH
68541: LD_VAR 0 9
68545: PUSH
68546: LD_VAR 0 3
68550: ARRAY
68551: DIFF
68552: ST_TO_ADDR
// end ;
68553: GO 68462
68555: POP
68556: POP
// if p then
68557: LD_VAR 0 11
68561: IFFALSE 68586
// result := Replace ( result , 3 , p ) ;
68563: LD_ADDR_VAR 0 2
68567: PUSH
68568: LD_VAR 0 2
68572: PPUSH
68573: LD_INT 3
68575: PPUSH
68576: LD_VAR 0 11
68580: PPUSH
68581: CALL_OW 1
68585: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
68586: LD_VAR 0 4
68590: PUSH
68591: LD_INT 6
68593: GREATER
68594: PUSH
68595: LD_VAR 0 6
68599: PUSH
68600: LD_INT 6
68602: LESS
68603: AND
68604: IFFALSE 68798
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
68606: LD_ADDR_VAR 0 9
68610: PUSH
68611: LD_VAR 0 4
68615: PUSH
68616: LD_VAR 0 8
68620: PUSH
68621: LD_VAR 0 7
68625: UNION
68626: PUSH
68627: LD_VAR 0 6
68631: UNION
68632: DIFF
68633: PPUSH
68634: LD_INT 2
68636: PPUSH
68637: CALL 60319 0 2
68641: ST_TO_ADDR
// p := [ ] ;
68642: LD_ADDR_VAR 0 11
68646: PUSH
68647: EMPTY
68648: ST_TO_ADDR
// if sort then
68649: LD_VAR 0 9
68653: IFFALSE 68769
// for i = 1 to 6 - eng do
68655: LD_ADDR_VAR 0 3
68659: PUSH
68660: DOUBLE
68661: LD_INT 1
68663: DEC
68664: ST_TO_ADDR
68665: LD_INT 6
68667: PUSH
68668: LD_VAR 0 6
68672: MINUS
68673: PUSH
68674: FOR_TO
68675: IFFALSE 68767
// begin if i = sort then
68677: LD_VAR 0 3
68681: PUSH
68682: LD_VAR 0 9
68686: EQUAL
68687: IFFALSE 68691
// break ;
68689: GO 68767
// if GetClass ( i ) = 2 then
68691: LD_VAR 0 3
68695: PPUSH
68696: CALL_OW 257
68700: PUSH
68701: LD_INT 2
68703: EQUAL
68704: IFFALSE 68708
// continue ;
68706: GO 68674
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68708: LD_ADDR_VAR 0 11
68712: PUSH
68713: LD_VAR 0 11
68717: PPUSH
68718: LD_VAR 0 11
68722: PUSH
68723: LD_INT 1
68725: PLUS
68726: PPUSH
68727: LD_VAR 0 9
68731: PUSH
68732: LD_VAR 0 3
68736: ARRAY
68737: PPUSH
68738: CALL_OW 2
68742: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68743: LD_ADDR_VAR 0 4
68747: PUSH
68748: LD_VAR 0 4
68752: PUSH
68753: LD_VAR 0 9
68757: PUSH
68758: LD_VAR 0 3
68762: ARRAY
68763: DIFF
68764: ST_TO_ADDR
// end ;
68765: GO 68674
68767: POP
68768: POP
// if p then
68769: LD_VAR 0 11
68773: IFFALSE 68798
// result := Replace ( result , 2 , p ) ;
68775: LD_ADDR_VAR 0 2
68779: PUSH
68780: LD_VAR 0 2
68784: PPUSH
68785: LD_INT 2
68787: PPUSH
68788: LD_VAR 0 11
68792: PPUSH
68793: CALL_OW 1
68797: ST_TO_ADDR
// end ; exit ;
68798: GO 70186
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
68800: LD_EXP 63
68804: PUSH
68805: LD_EXP 62
68809: PUSH
68810: LD_VAR 0 1
68814: ARRAY
68815: ARRAY
68816: NOT
68817: PUSH
68818: LD_EXP 36
68822: PUSH
68823: LD_VAR 0 1
68827: ARRAY
68828: PPUSH
68829: LD_INT 30
68831: PUSH
68832: LD_INT 3
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PPUSH
68839: CALL_OW 72
68843: AND
68844: PUSH
68845: LD_EXP 41
68849: PUSH
68850: LD_VAR 0 1
68854: ARRAY
68855: AND
68856: IFFALSE 69464
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
68858: LD_ADDR_EXP 78
68862: PUSH
68863: LD_EXP 78
68867: PPUSH
68868: LD_VAR 0 1
68872: PPUSH
68873: LD_INT 5
68875: PPUSH
68876: CALL_OW 1
68880: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68881: LD_ADDR_VAR 0 2
68885: PUSH
68886: LD_INT 0
68888: PUSH
68889: LD_INT 0
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: LD_INT 0
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: ST_TO_ADDR
// if sci > 1 then
68904: LD_VAR 0 8
68908: PUSH
68909: LD_INT 1
68911: GREATER
68912: IFFALSE 68940
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
68914: LD_ADDR_VAR 0 4
68918: PUSH
68919: LD_VAR 0 4
68923: PUSH
68924: LD_VAR 0 8
68928: PUSH
68929: LD_VAR 0 8
68933: PUSH
68934: LD_INT 1
68936: ARRAY
68937: DIFF
68938: DIFF
68939: ST_TO_ADDR
// if tmp and not sci then
68940: LD_VAR 0 4
68944: PUSH
68945: LD_VAR 0 8
68949: NOT
68950: AND
68951: IFFALSE 69020
// begin sort := SortBySkill ( tmp , 4 ) ;
68953: LD_ADDR_VAR 0 9
68957: PUSH
68958: LD_VAR 0 4
68962: PPUSH
68963: LD_INT 4
68965: PPUSH
68966: CALL 60319 0 2
68970: ST_TO_ADDR
// if sort then
68971: LD_VAR 0 9
68975: IFFALSE 68991
// p := sort [ 1 ] ;
68977: LD_ADDR_VAR 0 11
68981: PUSH
68982: LD_VAR 0 9
68986: PUSH
68987: LD_INT 1
68989: ARRAY
68990: ST_TO_ADDR
// if p then
68991: LD_VAR 0 11
68995: IFFALSE 69020
// result := Replace ( result , 4 , p ) ;
68997: LD_ADDR_VAR 0 2
69001: PUSH
69002: LD_VAR 0 2
69006: PPUSH
69007: LD_INT 4
69009: PPUSH
69010: LD_VAR 0 11
69014: PPUSH
69015: CALL_OW 1
69019: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69020: LD_ADDR_VAR 0 4
69024: PUSH
69025: LD_VAR 0 4
69029: PUSH
69030: LD_VAR 0 7
69034: DIFF
69035: ST_TO_ADDR
// if tmp and mech < 6 then
69036: LD_VAR 0 4
69040: PUSH
69041: LD_VAR 0 7
69045: PUSH
69046: LD_INT 6
69048: LESS
69049: AND
69050: IFFALSE 69238
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69052: LD_ADDR_VAR 0 9
69056: PUSH
69057: LD_VAR 0 4
69061: PUSH
69062: LD_VAR 0 8
69066: PUSH
69067: LD_VAR 0 7
69071: UNION
69072: DIFF
69073: PPUSH
69074: LD_INT 3
69076: PPUSH
69077: CALL 60319 0 2
69081: ST_TO_ADDR
// p := [ ] ;
69082: LD_ADDR_VAR 0 11
69086: PUSH
69087: EMPTY
69088: ST_TO_ADDR
// if sort then
69089: LD_VAR 0 9
69093: IFFALSE 69209
// for i = 1 to 6 - mech do
69095: LD_ADDR_VAR 0 3
69099: PUSH
69100: DOUBLE
69101: LD_INT 1
69103: DEC
69104: ST_TO_ADDR
69105: LD_INT 6
69107: PUSH
69108: LD_VAR 0 7
69112: MINUS
69113: PUSH
69114: FOR_TO
69115: IFFALSE 69207
// begin if i = sort then
69117: LD_VAR 0 3
69121: PUSH
69122: LD_VAR 0 9
69126: EQUAL
69127: IFFALSE 69131
// break ;
69129: GO 69207
// if GetClass ( i ) = 3 then
69131: LD_VAR 0 3
69135: PPUSH
69136: CALL_OW 257
69140: PUSH
69141: LD_INT 3
69143: EQUAL
69144: IFFALSE 69148
// continue ;
69146: GO 69114
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69148: LD_ADDR_VAR 0 11
69152: PUSH
69153: LD_VAR 0 11
69157: PPUSH
69158: LD_VAR 0 11
69162: PUSH
69163: LD_INT 1
69165: PLUS
69166: PPUSH
69167: LD_VAR 0 9
69171: PUSH
69172: LD_VAR 0 3
69176: ARRAY
69177: PPUSH
69178: CALL_OW 2
69182: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69183: LD_ADDR_VAR 0 4
69187: PUSH
69188: LD_VAR 0 4
69192: PUSH
69193: LD_VAR 0 9
69197: PUSH
69198: LD_VAR 0 3
69202: ARRAY
69203: DIFF
69204: ST_TO_ADDR
// end ;
69205: GO 69114
69207: POP
69208: POP
// if p then
69209: LD_VAR 0 11
69213: IFFALSE 69238
// result := Replace ( result , 3 , p ) ;
69215: LD_ADDR_VAR 0 2
69219: PUSH
69220: LD_VAR 0 2
69224: PPUSH
69225: LD_INT 3
69227: PPUSH
69228: LD_VAR 0 11
69232: PPUSH
69233: CALL_OW 1
69237: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69238: LD_ADDR_VAR 0 4
69242: PUSH
69243: LD_VAR 0 4
69247: PUSH
69248: LD_VAR 0 6
69252: DIFF
69253: ST_TO_ADDR
// if tmp and eng < 6 then
69254: LD_VAR 0 4
69258: PUSH
69259: LD_VAR 0 6
69263: PUSH
69264: LD_INT 6
69266: LESS
69267: AND
69268: IFFALSE 69462
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69270: LD_ADDR_VAR 0 9
69274: PUSH
69275: LD_VAR 0 4
69279: PUSH
69280: LD_VAR 0 8
69284: PUSH
69285: LD_VAR 0 7
69289: UNION
69290: PUSH
69291: LD_VAR 0 6
69295: UNION
69296: DIFF
69297: PPUSH
69298: LD_INT 2
69300: PPUSH
69301: CALL 60319 0 2
69305: ST_TO_ADDR
// p := [ ] ;
69306: LD_ADDR_VAR 0 11
69310: PUSH
69311: EMPTY
69312: ST_TO_ADDR
// if sort then
69313: LD_VAR 0 9
69317: IFFALSE 69433
// for i = 1 to 6 - eng do
69319: LD_ADDR_VAR 0 3
69323: PUSH
69324: DOUBLE
69325: LD_INT 1
69327: DEC
69328: ST_TO_ADDR
69329: LD_INT 6
69331: PUSH
69332: LD_VAR 0 6
69336: MINUS
69337: PUSH
69338: FOR_TO
69339: IFFALSE 69431
// begin if i = sort then
69341: LD_VAR 0 3
69345: PUSH
69346: LD_VAR 0 9
69350: EQUAL
69351: IFFALSE 69355
// break ;
69353: GO 69431
// if GetClass ( i ) = 2 then
69355: LD_VAR 0 3
69359: PPUSH
69360: CALL_OW 257
69364: PUSH
69365: LD_INT 2
69367: EQUAL
69368: IFFALSE 69372
// continue ;
69370: GO 69338
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69372: LD_ADDR_VAR 0 11
69376: PUSH
69377: LD_VAR 0 11
69381: PPUSH
69382: LD_VAR 0 11
69386: PUSH
69387: LD_INT 1
69389: PLUS
69390: PPUSH
69391: LD_VAR 0 9
69395: PUSH
69396: LD_VAR 0 3
69400: ARRAY
69401: PPUSH
69402: CALL_OW 2
69406: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69407: LD_ADDR_VAR 0 4
69411: PUSH
69412: LD_VAR 0 4
69416: PUSH
69417: LD_VAR 0 9
69421: PUSH
69422: LD_VAR 0 3
69426: ARRAY
69427: DIFF
69428: ST_TO_ADDR
// end ;
69429: GO 69338
69431: POP
69432: POP
// if p then
69433: LD_VAR 0 11
69437: IFFALSE 69462
// result := Replace ( result , 2 , p ) ;
69439: LD_ADDR_VAR 0 2
69443: PUSH
69444: LD_VAR 0 2
69448: PPUSH
69449: LD_INT 2
69451: PPUSH
69452: LD_VAR 0 11
69456: PPUSH
69457: CALL_OW 1
69461: ST_TO_ADDR
// end ; exit ;
69462: GO 70186
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
69464: LD_EXP 63
69468: PUSH
69469: LD_EXP 62
69473: PUSH
69474: LD_VAR 0 1
69478: ARRAY
69479: ARRAY
69480: NOT
69481: PUSH
69482: LD_EXP 36
69486: PUSH
69487: LD_VAR 0 1
69491: ARRAY
69492: PPUSH
69493: LD_INT 30
69495: PUSH
69496: LD_INT 3
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PPUSH
69503: CALL_OW 72
69507: AND
69508: PUSH
69509: LD_EXP 41
69513: PUSH
69514: LD_VAR 0 1
69518: ARRAY
69519: NOT
69520: AND
69521: IFFALSE 70186
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
69523: LD_ADDR_EXP 78
69527: PUSH
69528: LD_EXP 78
69532: PPUSH
69533: LD_VAR 0 1
69537: PPUSH
69538: LD_INT 6
69540: PPUSH
69541: CALL_OW 1
69545: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69546: LD_ADDR_VAR 0 2
69550: PUSH
69551: LD_INT 0
69553: PUSH
69554: LD_INT 0
69556: PUSH
69557: LD_INT 0
69559: PUSH
69560: LD_INT 0
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: ST_TO_ADDR
// if sci >= 1 then
69569: LD_VAR 0 8
69573: PUSH
69574: LD_INT 1
69576: GREATEREQUAL
69577: IFFALSE 69599
// tmp := tmp diff sci [ 1 ] ;
69579: LD_ADDR_VAR 0 4
69583: PUSH
69584: LD_VAR 0 4
69588: PUSH
69589: LD_VAR 0 8
69593: PUSH
69594: LD_INT 1
69596: ARRAY
69597: DIFF
69598: ST_TO_ADDR
// if tmp and not sci then
69599: LD_VAR 0 4
69603: PUSH
69604: LD_VAR 0 8
69608: NOT
69609: AND
69610: IFFALSE 69679
// begin sort := SortBySkill ( tmp , 4 ) ;
69612: LD_ADDR_VAR 0 9
69616: PUSH
69617: LD_VAR 0 4
69621: PPUSH
69622: LD_INT 4
69624: PPUSH
69625: CALL 60319 0 2
69629: ST_TO_ADDR
// if sort then
69630: LD_VAR 0 9
69634: IFFALSE 69650
// p := sort [ 1 ] ;
69636: LD_ADDR_VAR 0 11
69640: PUSH
69641: LD_VAR 0 9
69645: PUSH
69646: LD_INT 1
69648: ARRAY
69649: ST_TO_ADDR
// if p then
69650: LD_VAR 0 11
69654: IFFALSE 69679
// result := Replace ( result , 4 , p ) ;
69656: LD_ADDR_VAR 0 2
69660: PUSH
69661: LD_VAR 0 2
69665: PPUSH
69666: LD_INT 4
69668: PPUSH
69669: LD_VAR 0 11
69673: PPUSH
69674: CALL_OW 1
69678: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69679: LD_ADDR_VAR 0 4
69683: PUSH
69684: LD_VAR 0 4
69688: PUSH
69689: LD_VAR 0 7
69693: DIFF
69694: ST_TO_ADDR
// if tmp and mech < 6 then
69695: LD_VAR 0 4
69699: PUSH
69700: LD_VAR 0 7
69704: PUSH
69705: LD_INT 6
69707: LESS
69708: AND
69709: IFFALSE 69891
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
69711: LD_ADDR_VAR 0 9
69715: PUSH
69716: LD_VAR 0 4
69720: PUSH
69721: LD_VAR 0 7
69725: DIFF
69726: PPUSH
69727: LD_INT 3
69729: PPUSH
69730: CALL 60319 0 2
69734: ST_TO_ADDR
// p := [ ] ;
69735: LD_ADDR_VAR 0 11
69739: PUSH
69740: EMPTY
69741: ST_TO_ADDR
// if sort then
69742: LD_VAR 0 9
69746: IFFALSE 69862
// for i = 1 to 6 - mech do
69748: LD_ADDR_VAR 0 3
69752: PUSH
69753: DOUBLE
69754: LD_INT 1
69756: DEC
69757: ST_TO_ADDR
69758: LD_INT 6
69760: PUSH
69761: LD_VAR 0 7
69765: MINUS
69766: PUSH
69767: FOR_TO
69768: IFFALSE 69860
// begin if i = sort then
69770: LD_VAR 0 3
69774: PUSH
69775: LD_VAR 0 9
69779: EQUAL
69780: IFFALSE 69784
// break ;
69782: GO 69860
// if GetClass ( i ) = 3 then
69784: LD_VAR 0 3
69788: PPUSH
69789: CALL_OW 257
69793: PUSH
69794: LD_INT 3
69796: EQUAL
69797: IFFALSE 69801
// continue ;
69799: GO 69767
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69801: LD_ADDR_VAR 0 11
69805: PUSH
69806: LD_VAR 0 11
69810: PPUSH
69811: LD_VAR 0 11
69815: PUSH
69816: LD_INT 1
69818: PLUS
69819: PPUSH
69820: LD_VAR 0 9
69824: PUSH
69825: LD_VAR 0 3
69829: ARRAY
69830: PPUSH
69831: CALL_OW 2
69835: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69836: LD_ADDR_VAR 0 4
69840: PUSH
69841: LD_VAR 0 4
69845: PUSH
69846: LD_VAR 0 9
69850: PUSH
69851: LD_VAR 0 3
69855: ARRAY
69856: DIFF
69857: ST_TO_ADDR
// end ;
69858: GO 69767
69860: POP
69861: POP
// if p then
69862: LD_VAR 0 11
69866: IFFALSE 69891
// result := Replace ( result , 3 , p ) ;
69868: LD_ADDR_VAR 0 2
69872: PUSH
69873: LD_VAR 0 2
69877: PPUSH
69878: LD_INT 3
69880: PPUSH
69881: LD_VAR 0 11
69885: PPUSH
69886: CALL_OW 1
69890: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69891: LD_ADDR_VAR 0 4
69895: PUSH
69896: LD_VAR 0 4
69900: PUSH
69901: LD_VAR 0 6
69905: DIFF
69906: ST_TO_ADDR
// if tmp and eng < 4 then
69907: LD_VAR 0 4
69911: PUSH
69912: LD_VAR 0 6
69916: PUSH
69917: LD_INT 4
69919: LESS
69920: AND
69921: IFFALSE 70111
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
69923: LD_ADDR_VAR 0 9
69927: PUSH
69928: LD_VAR 0 4
69932: PUSH
69933: LD_VAR 0 7
69937: PUSH
69938: LD_VAR 0 6
69942: UNION
69943: DIFF
69944: PPUSH
69945: LD_INT 2
69947: PPUSH
69948: CALL 60319 0 2
69952: ST_TO_ADDR
// p := [ ] ;
69953: LD_ADDR_VAR 0 11
69957: PUSH
69958: EMPTY
69959: ST_TO_ADDR
// if sort then
69960: LD_VAR 0 9
69964: IFFALSE 70080
// for i = 1 to 4 - eng do
69966: LD_ADDR_VAR 0 3
69970: PUSH
69971: DOUBLE
69972: LD_INT 1
69974: DEC
69975: ST_TO_ADDR
69976: LD_INT 4
69978: PUSH
69979: LD_VAR 0 6
69983: MINUS
69984: PUSH
69985: FOR_TO
69986: IFFALSE 70078
// begin if i = sort then
69988: LD_VAR 0 3
69992: PUSH
69993: LD_VAR 0 9
69997: EQUAL
69998: IFFALSE 70002
// break ;
70000: GO 70078
// if GetClass ( i ) = 2 then
70002: LD_VAR 0 3
70006: PPUSH
70007: CALL_OW 257
70011: PUSH
70012: LD_INT 2
70014: EQUAL
70015: IFFALSE 70019
// continue ;
70017: GO 69985
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70019: LD_ADDR_VAR 0 11
70023: PUSH
70024: LD_VAR 0 11
70028: PPUSH
70029: LD_VAR 0 11
70033: PUSH
70034: LD_INT 1
70036: PLUS
70037: PPUSH
70038: LD_VAR 0 9
70042: PUSH
70043: LD_VAR 0 3
70047: ARRAY
70048: PPUSH
70049: CALL_OW 2
70053: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70054: LD_ADDR_VAR 0 4
70058: PUSH
70059: LD_VAR 0 4
70063: PUSH
70064: LD_VAR 0 9
70068: PUSH
70069: LD_VAR 0 3
70073: ARRAY
70074: DIFF
70075: ST_TO_ADDR
// end ;
70076: GO 69985
70078: POP
70079: POP
// if p then
70080: LD_VAR 0 11
70084: IFFALSE 70109
// result := Replace ( result , 2 , p ) ;
70086: LD_ADDR_VAR 0 2
70090: PUSH
70091: LD_VAR 0 2
70095: PPUSH
70096: LD_INT 2
70098: PPUSH
70099: LD_VAR 0 11
70103: PPUSH
70104: CALL_OW 1
70108: ST_TO_ADDR
// end else
70109: GO 70155
// for i = eng downto 5 do
70111: LD_ADDR_VAR 0 3
70115: PUSH
70116: DOUBLE
70117: LD_VAR 0 6
70121: INC
70122: ST_TO_ADDR
70123: LD_INT 5
70125: PUSH
70126: FOR_DOWNTO
70127: IFFALSE 70153
// tmp := tmp union eng [ i ] ;
70129: LD_ADDR_VAR 0 4
70133: PUSH
70134: LD_VAR 0 4
70138: PUSH
70139: LD_VAR 0 6
70143: PUSH
70144: LD_VAR 0 3
70148: ARRAY
70149: UNION
70150: ST_TO_ADDR
70151: GO 70126
70153: POP
70154: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70155: LD_ADDR_VAR 0 2
70159: PUSH
70160: LD_VAR 0 2
70164: PPUSH
70165: LD_INT 1
70167: PPUSH
70168: LD_VAR 0 4
70172: PUSH
70173: LD_VAR 0 5
70177: DIFF
70178: PPUSH
70179: CALL_OW 1
70183: ST_TO_ADDR
// exit ;
70184: GO 70186
// end ; end ;
70186: LD_VAR 0 2
70190: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
70191: LD_INT 0
70193: PPUSH
70194: PPUSH
70195: PPUSH
// if not mc_bases then
70196: LD_EXP 36
70200: NOT
70201: IFFALSE 70205
// exit ;
70203: GO 70311
// for i = 1 to mc_bases do
70205: LD_ADDR_VAR 0 2
70209: PUSH
70210: DOUBLE
70211: LD_INT 1
70213: DEC
70214: ST_TO_ADDR
70215: LD_EXP 36
70219: PUSH
70220: FOR_TO
70221: IFFALSE 70302
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70223: LD_ADDR_VAR 0 3
70227: PUSH
70228: LD_EXP 36
70232: PUSH
70233: LD_VAR 0 2
70237: ARRAY
70238: PPUSH
70239: LD_INT 21
70241: PUSH
70242: LD_INT 3
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 3
70251: PUSH
70252: LD_INT 24
70254: PUSH
70255: LD_INT 1000
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PPUSH
70270: CALL_OW 72
70274: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
70275: LD_ADDR_EXP 37
70279: PUSH
70280: LD_EXP 37
70284: PPUSH
70285: LD_VAR 0 2
70289: PPUSH
70290: LD_VAR 0 3
70294: PPUSH
70295: CALL_OW 1
70299: ST_TO_ADDR
// end ;
70300: GO 70220
70302: POP
70303: POP
// RaiseSailEvent ( 101 ) ;
70304: LD_INT 101
70306: PPUSH
70307: CALL_OW 427
// end ;
70311: LD_VAR 0 1
70315: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
70316: LD_INT 0
70318: PPUSH
70319: PPUSH
70320: PPUSH
70321: PPUSH
70322: PPUSH
70323: PPUSH
70324: PPUSH
// if not mc_bases then
70325: LD_EXP 36
70329: NOT
70330: IFFALSE 70334
// exit ;
70332: GO 70907
// for i = 1 to mc_bases do
70334: LD_ADDR_VAR 0 2
70338: PUSH
70339: DOUBLE
70340: LD_INT 1
70342: DEC
70343: ST_TO_ADDR
70344: LD_EXP 36
70348: PUSH
70349: FOR_TO
70350: IFFALSE 70898
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
70352: LD_ADDR_VAR 0 5
70356: PUSH
70357: LD_EXP 36
70361: PUSH
70362: LD_VAR 0 2
70366: ARRAY
70367: PUSH
70368: LD_EXP 65
70372: PUSH
70373: LD_VAR 0 2
70377: ARRAY
70378: UNION
70379: PPUSH
70380: LD_INT 21
70382: PUSH
70383: LD_INT 1
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 1
70392: PUSH
70393: LD_INT 3
70395: PUSH
70396: LD_INT 54
70398: PUSH
70399: EMPTY
70400: LIST
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 3
70408: PUSH
70409: LD_INT 24
70411: PUSH
70412: LD_INT 800
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: LIST
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PPUSH
70432: CALL_OW 72
70436: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
70437: LD_ADDR_VAR 0 6
70441: PUSH
70442: LD_EXP 36
70446: PUSH
70447: LD_VAR 0 2
70451: ARRAY
70452: PPUSH
70453: LD_INT 21
70455: PUSH
70456: LD_INT 1
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 1
70465: PUSH
70466: LD_INT 3
70468: PUSH
70469: LD_INT 54
70471: PUSH
70472: EMPTY
70473: LIST
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 3
70481: PUSH
70482: LD_INT 24
70484: PUSH
70485: LD_INT 250
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: LIST
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PPUSH
70505: CALL_OW 72
70509: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
70510: LD_ADDR_VAR 0 7
70514: PUSH
70515: LD_VAR 0 5
70519: PUSH
70520: LD_VAR 0 6
70524: DIFF
70525: ST_TO_ADDR
// if not need_heal_1 then
70526: LD_VAR 0 6
70530: NOT
70531: IFFALSE 70564
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
70533: LD_ADDR_EXP 39
70537: PUSH
70538: LD_EXP 39
70542: PPUSH
70543: LD_VAR 0 2
70547: PUSH
70548: LD_INT 1
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PPUSH
70555: EMPTY
70556: PPUSH
70557: CALL 26071 0 3
70561: ST_TO_ADDR
70562: GO 70634
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
70564: LD_ADDR_EXP 39
70568: PUSH
70569: LD_EXP 39
70573: PPUSH
70574: LD_VAR 0 2
70578: PUSH
70579: LD_INT 1
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PPUSH
70586: LD_EXP 39
70590: PUSH
70591: LD_VAR 0 2
70595: ARRAY
70596: PUSH
70597: LD_INT 1
70599: ARRAY
70600: PPUSH
70601: LD_INT 3
70603: PUSH
70604: LD_INT 24
70606: PUSH
70607: LD_INT 1000
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PPUSH
70618: CALL_OW 72
70622: PUSH
70623: LD_VAR 0 6
70627: UNION
70628: PPUSH
70629: CALL 26071 0 3
70633: ST_TO_ADDR
// if not need_heal_2 then
70634: LD_VAR 0 7
70638: NOT
70639: IFFALSE 70672
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
70641: LD_ADDR_EXP 39
70645: PUSH
70646: LD_EXP 39
70650: PPUSH
70651: LD_VAR 0 2
70655: PUSH
70656: LD_INT 2
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PPUSH
70663: EMPTY
70664: PPUSH
70665: CALL 26071 0 3
70669: ST_TO_ADDR
70670: GO 70704
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
70672: LD_ADDR_EXP 39
70676: PUSH
70677: LD_EXP 39
70681: PPUSH
70682: LD_VAR 0 2
70686: PUSH
70687: LD_INT 2
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PPUSH
70694: LD_VAR 0 7
70698: PPUSH
70699: CALL 26071 0 3
70703: ST_TO_ADDR
// if need_heal_2 then
70704: LD_VAR 0 7
70708: IFFALSE 70880
// for j in need_heal_2 do
70710: LD_ADDR_VAR 0 3
70714: PUSH
70715: LD_VAR 0 7
70719: PUSH
70720: FOR_IN
70721: IFFALSE 70878
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
70723: LD_ADDR_VAR 0 5
70727: PUSH
70728: LD_EXP 36
70732: PUSH
70733: LD_VAR 0 2
70737: ARRAY
70738: PPUSH
70739: LD_INT 2
70741: PUSH
70742: LD_INT 30
70744: PUSH
70745: LD_INT 6
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 30
70754: PUSH
70755: LD_INT 7
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 30
70764: PUSH
70765: LD_INT 8
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 30
70774: PUSH
70775: LD_INT 0
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 30
70784: PUSH
70785: LD_INT 1
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 25
70794: PUSH
70795: LD_INT 4
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: PPUSH
70811: CALL_OW 72
70815: ST_TO_ADDR
// if tmp then
70816: LD_VAR 0 5
70820: IFFALSE 70876
// begin k := NearestUnitToUnit ( tmp , j ) ;
70822: LD_ADDR_VAR 0 4
70826: PUSH
70827: LD_VAR 0 5
70831: PPUSH
70832: LD_VAR 0 3
70836: PPUSH
70837: CALL_OW 74
70841: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
70842: LD_VAR 0 3
70846: PPUSH
70847: LD_VAR 0 4
70851: PPUSH
70852: CALL_OW 296
70856: PUSH
70857: LD_INT 7
70859: GREATER
70860: IFFALSE 70876
// ComMoveUnit ( j , k ) ;
70862: LD_VAR 0 3
70866: PPUSH
70867: LD_VAR 0 4
70871: PPUSH
70872: CALL_OW 112
// end ; end ;
70876: GO 70720
70878: POP
70879: POP
// if not need_heal_1 and not need_heal_2 then
70880: LD_VAR 0 6
70884: NOT
70885: PUSH
70886: LD_VAR 0 7
70890: NOT
70891: AND
70892: IFFALSE 70896
// continue ;
70894: GO 70349
// end ;
70896: GO 70349
70898: POP
70899: POP
// RaiseSailEvent ( 102 ) ;
70900: LD_INT 102
70902: PPUSH
70903: CALL_OW 427
// end ;
70907: LD_VAR 0 1
70911: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
70912: LD_INT 0
70914: PPUSH
70915: PPUSH
70916: PPUSH
70917: PPUSH
70918: PPUSH
// if not mc_bases then
70919: LD_EXP 36
70923: NOT
70924: IFFALSE 70928
// exit ;
70926: GO 71313
// for i = 1 to mc_bases do
70928: LD_ADDR_VAR 0 2
70932: PUSH
70933: DOUBLE
70934: LD_INT 1
70936: DEC
70937: ST_TO_ADDR
70938: LD_EXP 36
70942: PUSH
70943: FOR_TO
70944: IFFALSE 71311
// begin if not mc_building_need_repair [ i ] then
70946: LD_EXP 37
70950: PUSH
70951: LD_VAR 0 2
70955: ARRAY
70956: NOT
70957: IFFALSE 70995
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
70959: LD_ADDR_EXP 38
70963: PUSH
70964: LD_EXP 38
70968: PPUSH
70969: LD_VAR 0 2
70973: PPUSH
70974: EMPTY
70975: PPUSH
70976: CALL_OW 1
70980: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
70981: LD_VAR 0 2
70985: PPUSH
70986: LD_INT 101
70988: PPUSH
70989: CALL 66033 0 2
// continue ;
70993: GO 70943
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
70995: LD_ADDR_EXP 42
70999: PUSH
71000: LD_EXP 42
71004: PPUSH
71005: LD_VAR 0 2
71009: PPUSH
71010: EMPTY
71011: PPUSH
71012: CALL_OW 1
71016: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71017: LD_VAR 0 2
71021: PPUSH
71022: LD_INT 103
71024: PPUSH
71025: CALL 66033 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
71029: LD_ADDR_VAR 0 5
71033: PUSH
71034: LD_EXP 36
71038: PUSH
71039: LD_VAR 0 2
71043: ARRAY
71044: PUSH
71045: LD_EXP 65
71049: PUSH
71050: LD_VAR 0 2
71054: ARRAY
71055: UNION
71056: PPUSH
71057: LD_INT 2
71059: PUSH
71060: LD_INT 25
71062: PUSH
71063: LD_INT 2
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 25
71072: PUSH
71073: LD_INT 16
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: LIST
71084: PUSH
71085: EMPTY
71086: LIST
71087: PPUSH
71088: CALL_OW 72
71092: ST_TO_ADDR
// if not tmp then
71093: LD_VAR 0 5
71097: NOT
71098: IFFALSE 71102
// continue ;
71100: GO 70943
// for j in tmp do
71102: LD_ADDR_VAR 0 3
71106: PUSH
71107: LD_VAR 0 5
71111: PUSH
71112: FOR_IN
71113: IFFALSE 71307
// begin if mc_need_heal [ i ] then
71115: LD_EXP 39
71119: PUSH
71120: LD_VAR 0 2
71124: ARRAY
71125: IFFALSE 71173
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
71127: LD_VAR 0 3
71131: PUSH
71132: LD_EXP 39
71136: PUSH
71137: LD_VAR 0 2
71141: ARRAY
71142: PUSH
71143: LD_INT 1
71145: ARRAY
71146: IN
71147: PUSH
71148: LD_VAR 0 3
71152: PUSH
71153: LD_EXP 39
71157: PUSH
71158: LD_VAR 0 2
71162: ARRAY
71163: PUSH
71164: LD_INT 2
71166: ARRAY
71167: IN
71168: OR
71169: IFFALSE 71173
// continue ;
71171: GO 71112
// if IsInUnit ( j ) then
71173: LD_VAR 0 3
71177: PPUSH
71178: CALL_OW 310
71182: IFFALSE 71193
// ComExitBuilding ( j ) ;
71184: LD_VAR 0 3
71188: PPUSH
71189: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
71193: LD_VAR 0 3
71197: PUSH
71198: LD_EXP 38
71202: PUSH
71203: LD_VAR 0 2
71207: ARRAY
71208: IN
71209: NOT
71210: IFFALSE 71268
// begin SetTag ( j , 101 ) ;
71212: LD_VAR 0 3
71216: PPUSH
71217: LD_INT 101
71219: PPUSH
71220: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
71224: LD_ADDR_EXP 38
71228: PUSH
71229: LD_EXP 38
71233: PPUSH
71234: LD_VAR 0 2
71238: PUSH
71239: LD_EXP 38
71243: PUSH
71244: LD_VAR 0 2
71248: ARRAY
71249: PUSH
71250: LD_INT 1
71252: PLUS
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PPUSH
71258: LD_VAR 0 3
71262: PPUSH
71263: CALL 26071 0 3
71267: ST_TO_ADDR
// end ; wait ( 1 ) ;
71268: LD_INT 1
71270: PPUSH
71271: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
71275: LD_VAR 0 3
71279: PPUSH
71280: LD_EXP 37
71284: PUSH
71285: LD_VAR 0 2
71289: ARRAY
71290: PPUSH
71291: LD_VAR 0 3
71295: PPUSH
71296: CALL_OW 74
71300: PPUSH
71301: CALL_OW 130
// end ;
71305: GO 71112
71307: POP
71308: POP
// end ;
71309: GO 70943
71311: POP
71312: POP
// end ;
71313: LD_VAR 0 1
71317: RET
// export function MC_Heal ; var i , j , tmp ; begin
71318: LD_INT 0
71320: PPUSH
71321: PPUSH
71322: PPUSH
71323: PPUSH
// if not mc_bases then
71324: LD_EXP 36
71328: NOT
71329: IFFALSE 71333
// exit ;
71331: GO 71735
// for i = 1 to mc_bases do
71333: LD_ADDR_VAR 0 2
71337: PUSH
71338: DOUBLE
71339: LD_INT 1
71341: DEC
71342: ST_TO_ADDR
71343: LD_EXP 36
71347: PUSH
71348: FOR_TO
71349: IFFALSE 71733
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
71351: LD_EXP 39
71355: PUSH
71356: LD_VAR 0 2
71360: ARRAY
71361: PUSH
71362: LD_INT 1
71364: ARRAY
71365: NOT
71366: PUSH
71367: LD_EXP 39
71371: PUSH
71372: LD_VAR 0 2
71376: ARRAY
71377: PUSH
71378: LD_INT 2
71380: ARRAY
71381: NOT
71382: AND
71383: IFFALSE 71421
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
71385: LD_ADDR_EXP 40
71389: PUSH
71390: LD_EXP 40
71394: PPUSH
71395: LD_VAR 0 2
71399: PPUSH
71400: EMPTY
71401: PPUSH
71402: CALL_OW 1
71406: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
71407: LD_VAR 0 2
71411: PPUSH
71412: LD_INT 102
71414: PPUSH
71415: CALL 66033 0 2
// continue ;
71419: GO 71348
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
71421: LD_ADDR_VAR 0 4
71425: PUSH
71426: LD_EXP 36
71430: PUSH
71431: LD_VAR 0 2
71435: ARRAY
71436: PPUSH
71437: LD_INT 25
71439: PUSH
71440: LD_INT 4
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PPUSH
71447: CALL_OW 72
71451: ST_TO_ADDR
// if not tmp then
71452: LD_VAR 0 4
71456: NOT
71457: IFFALSE 71461
// continue ;
71459: GO 71348
// if mc_taming [ i ] then
71461: LD_EXP 67
71465: PUSH
71466: LD_VAR 0 2
71470: ARRAY
71471: IFFALSE 71495
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
71473: LD_ADDR_EXP 67
71477: PUSH
71478: LD_EXP 67
71482: PPUSH
71483: LD_VAR 0 2
71487: PPUSH
71488: EMPTY
71489: PPUSH
71490: CALL_OW 1
71494: ST_TO_ADDR
// for j in tmp do
71495: LD_ADDR_VAR 0 3
71499: PUSH
71500: LD_VAR 0 4
71504: PUSH
71505: FOR_IN
71506: IFFALSE 71729
// begin if IsInUnit ( j ) then
71508: LD_VAR 0 3
71512: PPUSH
71513: CALL_OW 310
71517: IFFALSE 71528
// ComExitBuilding ( j ) ;
71519: LD_VAR 0 3
71523: PPUSH
71524: CALL_OW 122
// if not j in mc_healers [ i ] then
71528: LD_VAR 0 3
71532: PUSH
71533: LD_EXP 40
71537: PUSH
71538: LD_VAR 0 2
71542: ARRAY
71543: IN
71544: NOT
71545: IFFALSE 71591
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
71547: LD_ADDR_EXP 40
71551: PUSH
71552: LD_EXP 40
71556: PPUSH
71557: LD_VAR 0 2
71561: PUSH
71562: LD_EXP 40
71566: PUSH
71567: LD_VAR 0 2
71571: ARRAY
71572: PUSH
71573: LD_INT 1
71575: PLUS
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PPUSH
71581: LD_VAR 0 3
71585: PPUSH
71586: CALL 26071 0 3
71590: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
71591: LD_VAR 0 3
71595: PPUSH
71596: CALL_OW 110
71600: PUSH
71601: LD_INT 102
71603: NONEQUAL
71604: IFFALSE 71618
// SetTag ( j , 102 ) ;
71606: LD_VAR 0 3
71610: PPUSH
71611: LD_INT 102
71613: PPUSH
71614: CALL_OW 109
// Wait ( 3 ) ;
71618: LD_INT 3
71620: PPUSH
71621: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
71625: LD_EXP 39
71629: PUSH
71630: LD_VAR 0 2
71634: ARRAY
71635: PUSH
71636: LD_INT 1
71638: ARRAY
71639: IFFALSE 71671
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
71641: LD_VAR 0 3
71645: PPUSH
71646: LD_EXP 39
71650: PUSH
71651: LD_VAR 0 2
71655: ARRAY
71656: PUSH
71657: LD_INT 1
71659: ARRAY
71660: PUSH
71661: LD_INT 1
71663: ARRAY
71664: PPUSH
71665: CALL_OW 128
71669: GO 71727
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
71671: LD_VAR 0 3
71675: PPUSH
71676: CALL_OW 314
71680: NOT
71681: PUSH
71682: LD_EXP 39
71686: PUSH
71687: LD_VAR 0 2
71691: ARRAY
71692: PUSH
71693: LD_INT 2
71695: ARRAY
71696: AND
71697: IFFALSE 71727
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
71699: LD_VAR 0 3
71703: PPUSH
71704: LD_EXP 39
71708: PUSH
71709: LD_VAR 0 2
71713: ARRAY
71714: PUSH
71715: LD_INT 2
71717: ARRAY
71718: PUSH
71719: LD_INT 1
71721: ARRAY
71722: PPUSH
71723: CALL_OW 128
// end ;
71727: GO 71505
71729: POP
71730: POP
// end ;
71731: GO 71348
71733: POP
71734: POP
// end ;
71735: LD_VAR 0 1
71739: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
71740: LD_INT 0
71742: PPUSH
71743: PPUSH
71744: PPUSH
71745: PPUSH
71746: PPUSH
// if not mc_bases then
71747: LD_EXP 36
71751: NOT
71752: IFFALSE 71756
// exit ;
71754: GO 72899
// for i = 1 to mc_bases do
71756: LD_ADDR_VAR 0 2
71760: PUSH
71761: DOUBLE
71762: LD_INT 1
71764: DEC
71765: ST_TO_ADDR
71766: LD_EXP 36
71770: PUSH
71771: FOR_TO
71772: IFFALSE 72897
// begin if mc_scan [ i ] then
71774: LD_EXP 59
71778: PUSH
71779: LD_VAR 0 2
71783: ARRAY
71784: IFFALSE 71788
// continue ;
71786: GO 71771
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
71788: LD_EXP 41
71792: PUSH
71793: LD_VAR 0 2
71797: ARRAY
71798: NOT
71799: PUSH
71800: LD_EXP 43
71804: PUSH
71805: LD_VAR 0 2
71809: ARRAY
71810: NOT
71811: AND
71812: PUSH
71813: LD_EXP 42
71817: PUSH
71818: LD_VAR 0 2
71822: ARRAY
71823: AND
71824: IFFALSE 71862
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
71826: LD_ADDR_EXP 42
71830: PUSH
71831: LD_EXP 42
71835: PPUSH
71836: LD_VAR 0 2
71840: PPUSH
71841: EMPTY
71842: PPUSH
71843: CALL_OW 1
71847: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71848: LD_VAR 0 2
71852: PPUSH
71853: LD_INT 103
71855: PPUSH
71856: CALL 66033 0 2
// continue ;
71860: GO 71771
// end ; if mc_construct_list [ i ] then
71862: LD_EXP 43
71866: PUSH
71867: LD_VAR 0 2
71871: ARRAY
71872: IFFALSE 72092
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
71874: LD_ADDR_VAR 0 4
71878: PUSH
71879: LD_EXP 36
71883: PUSH
71884: LD_VAR 0 2
71888: ARRAY
71889: PPUSH
71890: LD_INT 25
71892: PUSH
71893: LD_INT 2
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PPUSH
71900: CALL_OW 72
71904: PUSH
71905: LD_EXP 38
71909: PUSH
71910: LD_VAR 0 2
71914: ARRAY
71915: DIFF
71916: ST_TO_ADDR
// if not tmp then
71917: LD_VAR 0 4
71921: NOT
71922: IFFALSE 71926
// continue ;
71924: GO 71771
// for j in tmp do
71926: LD_ADDR_VAR 0 3
71930: PUSH
71931: LD_VAR 0 4
71935: PUSH
71936: FOR_IN
71937: IFFALSE 72088
// begin if not mc_builders [ i ] then
71939: LD_EXP 42
71943: PUSH
71944: LD_VAR 0 2
71948: ARRAY
71949: NOT
71950: IFFALSE 72008
// begin SetTag ( j , 103 ) ;
71952: LD_VAR 0 3
71956: PPUSH
71957: LD_INT 103
71959: PPUSH
71960: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
71964: LD_ADDR_EXP 42
71968: PUSH
71969: LD_EXP 42
71973: PPUSH
71974: LD_VAR 0 2
71978: PUSH
71979: LD_EXP 42
71983: PUSH
71984: LD_VAR 0 2
71988: ARRAY
71989: PUSH
71990: LD_INT 1
71992: PLUS
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: PPUSH
71998: LD_VAR 0 3
72002: PPUSH
72003: CALL 26071 0 3
72007: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
72008: LD_VAR 0 3
72012: PPUSH
72013: CALL_OW 310
72017: IFFALSE 72028
// ComExitBuilding ( j ) ;
72019: LD_VAR 0 3
72023: PPUSH
72024: CALL_OW 122
// wait ( 3 ) ;
72028: LD_INT 3
72030: PPUSH
72031: CALL_OW 67
// if not mc_construct_list [ i ] then
72035: LD_EXP 43
72039: PUSH
72040: LD_VAR 0 2
72044: ARRAY
72045: NOT
72046: IFFALSE 72050
// break ;
72048: GO 72088
// if not HasTask ( j ) then
72050: LD_VAR 0 3
72054: PPUSH
72055: CALL_OW 314
72059: NOT
72060: IFFALSE 72086
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
72062: LD_VAR 0 3
72066: PPUSH
72067: LD_EXP 43
72071: PUSH
72072: LD_VAR 0 2
72076: ARRAY
72077: PUSH
72078: LD_INT 1
72080: ARRAY
72081: PPUSH
72082: CALL 28922 0 2
// end ;
72086: GO 71936
72088: POP
72089: POP
// end else
72090: GO 72895
// if mc_build_list [ i ] then
72092: LD_EXP 41
72096: PUSH
72097: LD_VAR 0 2
72101: ARRAY
72102: IFFALSE 72895
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72104: LD_ADDR_VAR 0 5
72108: PUSH
72109: LD_EXP 36
72113: PUSH
72114: LD_VAR 0 2
72118: ARRAY
72119: PPUSH
72120: LD_INT 2
72122: PUSH
72123: LD_INT 30
72125: PUSH
72126: LD_INT 0
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: PUSH
72133: LD_INT 30
72135: PUSH
72136: LD_INT 1
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: LIST
72147: PPUSH
72148: CALL_OW 72
72152: ST_TO_ADDR
// if depot then
72153: LD_VAR 0 5
72157: IFFALSE 72175
// depot := depot [ 1 ] else
72159: LD_ADDR_VAR 0 5
72163: PUSH
72164: LD_VAR 0 5
72168: PUSH
72169: LD_INT 1
72171: ARRAY
72172: ST_TO_ADDR
72173: GO 72183
// depot := 0 ;
72175: LD_ADDR_VAR 0 5
72179: PUSH
72180: LD_INT 0
72182: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
72183: LD_EXP 41
72187: PUSH
72188: LD_VAR 0 2
72192: ARRAY
72193: PUSH
72194: LD_INT 1
72196: ARRAY
72197: PUSH
72198: LD_INT 1
72200: ARRAY
72201: PPUSH
72202: CALL 28752 0 1
72206: PUSH
72207: LD_EXP 36
72211: PUSH
72212: LD_VAR 0 2
72216: ARRAY
72217: PPUSH
72218: LD_INT 2
72220: PUSH
72221: LD_INT 30
72223: PUSH
72224: LD_INT 2
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 30
72233: PUSH
72234: LD_INT 3
72236: PUSH
72237: EMPTY
72238: LIST
72239: LIST
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: LIST
72245: PPUSH
72246: CALL_OW 72
72250: NOT
72251: AND
72252: IFFALSE 72357
// begin for j = 1 to mc_build_list [ i ] do
72254: LD_ADDR_VAR 0 3
72258: PUSH
72259: DOUBLE
72260: LD_INT 1
72262: DEC
72263: ST_TO_ADDR
72264: LD_EXP 41
72268: PUSH
72269: LD_VAR 0 2
72273: ARRAY
72274: PUSH
72275: FOR_TO
72276: IFFALSE 72355
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
72278: LD_EXP 41
72282: PUSH
72283: LD_VAR 0 2
72287: ARRAY
72288: PUSH
72289: LD_VAR 0 3
72293: ARRAY
72294: PUSH
72295: LD_INT 1
72297: ARRAY
72298: PUSH
72299: LD_INT 2
72301: EQUAL
72302: IFFALSE 72353
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
72304: LD_ADDR_EXP 41
72308: PUSH
72309: LD_EXP 41
72313: PPUSH
72314: LD_VAR 0 2
72318: PPUSH
72319: LD_EXP 41
72323: PUSH
72324: LD_VAR 0 2
72328: ARRAY
72329: PPUSH
72330: LD_VAR 0 3
72334: PPUSH
72335: LD_INT 1
72337: PPUSH
72338: LD_INT 0
72340: PPUSH
72341: CALL 25489 0 4
72345: PPUSH
72346: CALL_OW 1
72350: ST_TO_ADDR
// break ;
72351: GO 72355
// end ;
72353: GO 72275
72355: POP
72356: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
72357: LD_EXP 41
72361: PUSH
72362: LD_VAR 0 2
72366: ARRAY
72367: PUSH
72368: LD_INT 1
72370: ARRAY
72371: PUSH
72372: LD_INT 1
72374: ARRAY
72375: PUSH
72376: LD_INT 0
72378: EQUAL
72379: PUSH
72380: LD_VAR 0 5
72384: PUSH
72385: LD_VAR 0 5
72389: PPUSH
72390: LD_EXP 41
72394: PUSH
72395: LD_VAR 0 2
72399: ARRAY
72400: PUSH
72401: LD_INT 1
72403: ARRAY
72404: PUSH
72405: LD_INT 1
72407: ARRAY
72408: PPUSH
72409: LD_EXP 41
72413: PUSH
72414: LD_VAR 0 2
72418: ARRAY
72419: PUSH
72420: LD_INT 1
72422: ARRAY
72423: PUSH
72424: LD_INT 2
72426: ARRAY
72427: PPUSH
72428: LD_EXP 41
72432: PUSH
72433: LD_VAR 0 2
72437: ARRAY
72438: PUSH
72439: LD_INT 1
72441: ARRAY
72442: PUSH
72443: LD_INT 3
72445: ARRAY
72446: PPUSH
72447: LD_EXP 41
72451: PUSH
72452: LD_VAR 0 2
72456: ARRAY
72457: PUSH
72458: LD_INT 1
72460: ARRAY
72461: PUSH
72462: LD_INT 4
72464: ARRAY
72465: PPUSH
72466: CALL 33486 0 5
72470: AND
72471: OR
72472: IFFALSE 72753
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72474: LD_ADDR_VAR 0 4
72478: PUSH
72479: LD_EXP 36
72483: PUSH
72484: LD_VAR 0 2
72488: ARRAY
72489: PPUSH
72490: LD_INT 25
72492: PUSH
72493: LD_INT 2
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: PPUSH
72500: CALL_OW 72
72504: PUSH
72505: LD_EXP 38
72509: PUSH
72510: LD_VAR 0 2
72514: ARRAY
72515: DIFF
72516: ST_TO_ADDR
// if not tmp then
72517: LD_VAR 0 4
72521: NOT
72522: IFFALSE 72526
// continue ;
72524: GO 71771
// for j in tmp do
72526: LD_ADDR_VAR 0 3
72530: PUSH
72531: LD_VAR 0 4
72535: PUSH
72536: FOR_IN
72537: IFFALSE 72749
// begin if not mc_builders [ i ] then
72539: LD_EXP 42
72543: PUSH
72544: LD_VAR 0 2
72548: ARRAY
72549: NOT
72550: IFFALSE 72608
// begin SetTag ( j , 103 ) ;
72552: LD_VAR 0 3
72556: PPUSH
72557: LD_INT 103
72559: PPUSH
72560: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
72564: LD_ADDR_EXP 42
72568: PUSH
72569: LD_EXP 42
72573: PPUSH
72574: LD_VAR 0 2
72578: PUSH
72579: LD_EXP 42
72583: PUSH
72584: LD_VAR 0 2
72588: ARRAY
72589: PUSH
72590: LD_INT 1
72592: PLUS
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PPUSH
72598: LD_VAR 0 3
72602: PPUSH
72603: CALL 26071 0 3
72607: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
72608: LD_VAR 0 3
72612: PPUSH
72613: CALL_OW 310
72617: IFFALSE 72628
// ComExitBuilding ( j ) ;
72619: LD_VAR 0 3
72623: PPUSH
72624: CALL_OW 122
// wait ( 3 ) ;
72628: LD_INT 3
72630: PPUSH
72631: CALL_OW 67
// if not mc_build_list [ i ] then
72635: LD_EXP 41
72639: PUSH
72640: LD_VAR 0 2
72644: ARRAY
72645: NOT
72646: IFFALSE 72650
// break ;
72648: GO 72749
// if not HasTask ( j ) then
72650: LD_VAR 0 3
72654: PPUSH
72655: CALL_OW 314
72659: NOT
72660: IFFALSE 72747
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
72662: LD_VAR 0 3
72666: PPUSH
72667: LD_EXP 41
72671: PUSH
72672: LD_VAR 0 2
72676: ARRAY
72677: PUSH
72678: LD_INT 1
72680: ARRAY
72681: PUSH
72682: LD_INT 1
72684: ARRAY
72685: PPUSH
72686: LD_EXP 41
72690: PUSH
72691: LD_VAR 0 2
72695: ARRAY
72696: PUSH
72697: LD_INT 1
72699: ARRAY
72700: PUSH
72701: LD_INT 2
72703: ARRAY
72704: PPUSH
72705: LD_EXP 41
72709: PUSH
72710: LD_VAR 0 2
72714: ARRAY
72715: PUSH
72716: LD_INT 1
72718: ARRAY
72719: PUSH
72720: LD_INT 3
72722: ARRAY
72723: PPUSH
72724: LD_EXP 41
72728: PUSH
72729: LD_VAR 0 2
72733: ARRAY
72734: PUSH
72735: LD_INT 1
72737: ARRAY
72738: PUSH
72739: LD_INT 4
72741: ARRAY
72742: PPUSH
72743: CALL_OW 145
// end ;
72747: GO 72536
72749: POP
72750: POP
// end else
72751: GO 72895
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
72753: LD_EXP 36
72757: PUSH
72758: LD_VAR 0 2
72762: ARRAY
72763: PPUSH
72764: LD_EXP 41
72768: PUSH
72769: LD_VAR 0 2
72773: ARRAY
72774: PUSH
72775: LD_INT 1
72777: ARRAY
72778: PUSH
72779: LD_INT 1
72781: ARRAY
72782: PPUSH
72783: LD_EXP 41
72787: PUSH
72788: LD_VAR 0 2
72792: ARRAY
72793: PUSH
72794: LD_INT 1
72796: ARRAY
72797: PUSH
72798: LD_INT 2
72800: ARRAY
72801: PPUSH
72802: LD_EXP 41
72806: PUSH
72807: LD_VAR 0 2
72811: ARRAY
72812: PUSH
72813: LD_INT 1
72815: ARRAY
72816: PUSH
72817: LD_INT 3
72819: ARRAY
72820: PPUSH
72821: LD_EXP 41
72825: PUSH
72826: LD_VAR 0 2
72830: ARRAY
72831: PUSH
72832: LD_INT 1
72834: ARRAY
72835: PUSH
72836: LD_INT 4
72838: ARRAY
72839: PPUSH
72840: CALL 32822 0 5
72844: NOT
72845: IFFALSE 72895
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
72847: LD_ADDR_EXP 41
72851: PUSH
72852: LD_EXP 41
72856: PPUSH
72857: LD_VAR 0 2
72861: PPUSH
72862: LD_EXP 41
72866: PUSH
72867: LD_VAR 0 2
72871: ARRAY
72872: PPUSH
72873: LD_INT 1
72875: PPUSH
72876: LD_INT 1
72878: NEG
72879: PPUSH
72880: LD_INT 0
72882: PPUSH
72883: CALL 25489 0 4
72887: PPUSH
72888: CALL_OW 1
72892: ST_TO_ADDR
// continue ;
72893: GO 71771
// end ; end ; end ;
72895: GO 71771
72897: POP
72898: POP
// end ;
72899: LD_VAR 0 1
72903: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
72904: LD_INT 0
72906: PPUSH
72907: PPUSH
72908: PPUSH
72909: PPUSH
72910: PPUSH
72911: PPUSH
// if not mc_bases then
72912: LD_EXP 36
72916: NOT
72917: IFFALSE 72921
// exit ;
72919: GO 73348
// for i = 1 to mc_bases do
72921: LD_ADDR_VAR 0 2
72925: PUSH
72926: DOUBLE
72927: LD_INT 1
72929: DEC
72930: ST_TO_ADDR
72931: LD_EXP 36
72935: PUSH
72936: FOR_TO
72937: IFFALSE 73346
// begin tmp := mc_build_upgrade [ i ] ;
72939: LD_ADDR_VAR 0 4
72943: PUSH
72944: LD_EXP 68
72948: PUSH
72949: LD_VAR 0 2
72953: ARRAY
72954: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
72955: LD_ADDR_VAR 0 6
72959: PUSH
72960: LD_EXP 69
72964: PUSH
72965: LD_VAR 0 2
72969: ARRAY
72970: PPUSH
72971: LD_INT 2
72973: PUSH
72974: LD_INT 30
72976: PUSH
72977: LD_INT 6
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 30
72986: PUSH
72987: LD_INT 7
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: LIST
72998: PPUSH
72999: CALL_OW 72
73003: ST_TO_ADDR
// if not tmp and not lab then
73004: LD_VAR 0 4
73008: NOT
73009: PUSH
73010: LD_VAR 0 6
73014: NOT
73015: AND
73016: IFFALSE 73020
// continue ;
73018: GO 72936
// if tmp then
73020: LD_VAR 0 4
73024: IFFALSE 73144
// for j in tmp do
73026: LD_ADDR_VAR 0 3
73030: PUSH
73031: LD_VAR 0 4
73035: PUSH
73036: FOR_IN
73037: IFFALSE 73142
// begin if UpgradeCost ( j ) then
73039: LD_VAR 0 3
73043: PPUSH
73044: CALL 32482 0 1
73048: IFFALSE 73140
// begin ComUpgrade ( j ) ;
73050: LD_VAR 0 3
73054: PPUSH
73055: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
73059: LD_ADDR_EXP 68
73063: PUSH
73064: LD_EXP 68
73068: PPUSH
73069: LD_VAR 0 2
73073: PPUSH
73074: LD_EXP 68
73078: PUSH
73079: LD_VAR 0 2
73083: ARRAY
73084: PUSH
73085: LD_VAR 0 3
73089: DIFF
73090: PPUSH
73091: CALL_OW 1
73095: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73096: LD_ADDR_EXP 43
73100: PUSH
73101: LD_EXP 43
73105: PPUSH
73106: LD_VAR 0 2
73110: PUSH
73111: LD_EXP 43
73115: PUSH
73116: LD_VAR 0 2
73120: ARRAY
73121: PUSH
73122: LD_INT 1
73124: PLUS
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: PPUSH
73130: LD_VAR 0 3
73134: PPUSH
73135: CALL 26071 0 3
73139: ST_TO_ADDR
// end ; end ;
73140: GO 73036
73142: POP
73143: POP
// if not lab or not mc_lab_upgrade [ i ] then
73144: LD_VAR 0 6
73148: NOT
73149: PUSH
73150: LD_EXP 70
73154: PUSH
73155: LD_VAR 0 2
73159: ARRAY
73160: NOT
73161: OR
73162: IFFALSE 73166
// continue ;
73164: GO 72936
// for j in lab do
73166: LD_ADDR_VAR 0 3
73170: PUSH
73171: LD_VAR 0 6
73175: PUSH
73176: FOR_IN
73177: IFFALSE 73342
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
73179: LD_VAR 0 3
73183: PPUSH
73184: CALL_OW 266
73188: PUSH
73189: LD_INT 6
73191: PUSH
73192: LD_INT 7
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: IN
73199: PUSH
73200: LD_VAR 0 3
73204: PPUSH
73205: CALL_OW 461
73209: PUSH
73210: LD_INT 1
73212: NONEQUAL
73213: AND
73214: IFFALSE 73340
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
73216: LD_VAR 0 3
73220: PPUSH
73221: LD_EXP 70
73225: PUSH
73226: LD_VAR 0 2
73230: ARRAY
73231: PUSH
73232: LD_INT 1
73234: ARRAY
73235: PPUSH
73236: CALL 32687 0 2
73240: IFFALSE 73340
// begin ComCancel ( j ) ;
73242: LD_VAR 0 3
73246: PPUSH
73247: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
73251: LD_VAR 0 3
73255: PPUSH
73256: LD_EXP 70
73260: PUSH
73261: LD_VAR 0 2
73265: ARRAY
73266: PUSH
73267: LD_INT 1
73269: ARRAY
73270: PPUSH
73271: CALL_OW 207
// if not j in mc_construct_list [ i ] then
73275: LD_VAR 0 3
73279: PUSH
73280: LD_EXP 43
73284: PUSH
73285: LD_VAR 0 2
73289: ARRAY
73290: IN
73291: NOT
73292: IFFALSE 73338
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73294: LD_ADDR_EXP 43
73298: PUSH
73299: LD_EXP 43
73303: PPUSH
73304: LD_VAR 0 2
73308: PUSH
73309: LD_EXP 43
73313: PUSH
73314: LD_VAR 0 2
73318: ARRAY
73319: PUSH
73320: LD_INT 1
73322: PLUS
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PPUSH
73328: LD_VAR 0 3
73332: PPUSH
73333: CALL 26071 0 3
73337: ST_TO_ADDR
// break ;
73338: GO 73342
// end ; end ; end ;
73340: GO 73176
73342: POP
73343: POP
// end ;
73344: GO 72936
73346: POP
73347: POP
// end ;
73348: LD_VAR 0 1
73352: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
73353: LD_INT 0
73355: PPUSH
73356: PPUSH
73357: PPUSH
73358: PPUSH
73359: PPUSH
73360: PPUSH
73361: PPUSH
73362: PPUSH
73363: PPUSH
// if not mc_bases then
73364: LD_EXP 36
73368: NOT
73369: IFFALSE 73373
// exit ;
73371: GO 73778
// for i = 1 to mc_bases do
73373: LD_ADDR_VAR 0 2
73377: PUSH
73378: DOUBLE
73379: LD_INT 1
73381: DEC
73382: ST_TO_ADDR
73383: LD_EXP 36
73387: PUSH
73388: FOR_TO
73389: IFFALSE 73776
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
73391: LD_EXP 44
73395: PUSH
73396: LD_VAR 0 2
73400: ARRAY
73401: NOT
73402: PUSH
73403: LD_EXP 36
73407: PUSH
73408: LD_VAR 0 2
73412: ARRAY
73413: PPUSH
73414: LD_INT 30
73416: PUSH
73417: LD_INT 3
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: PPUSH
73424: CALL_OW 72
73428: NOT
73429: OR
73430: IFFALSE 73434
// continue ;
73432: GO 73388
// busy := false ;
73434: LD_ADDR_VAR 0 8
73438: PUSH
73439: LD_INT 0
73441: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73442: LD_ADDR_VAR 0 4
73446: PUSH
73447: LD_EXP 36
73451: PUSH
73452: LD_VAR 0 2
73456: ARRAY
73457: PPUSH
73458: LD_INT 30
73460: PUSH
73461: LD_INT 3
73463: PUSH
73464: EMPTY
73465: LIST
73466: LIST
73467: PPUSH
73468: CALL_OW 72
73472: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
73473: LD_ADDR_VAR 0 6
73477: PUSH
73478: LD_EXP 44
73482: PUSH
73483: LD_VAR 0 2
73487: ARRAY
73488: PPUSH
73489: LD_INT 2
73491: PUSH
73492: LD_INT 30
73494: PUSH
73495: LD_INT 32
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: PUSH
73502: LD_INT 30
73504: PUSH
73505: LD_INT 33
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: LIST
73516: PPUSH
73517: CALL_OW 72
73521: ST_TO_ADDR
// if not t then
73522: LD_VAR 0 6
73526: NOT
73527: IFFALSE 73531
// continue ;
73529: GO 73388
// for j in tmp do
73531: LD_ADDR_VAR 0 3
73535: PUSH
73536: LD_VAR 0 4
73540: PUSH
73541: FOR_IN
73542: IFFALSE 73572
// if not BuildingStatus ( j ) = bs_idle then
73544: LD_VAR 0 3
73548: PPUSH
73549: CALL_OW 461
73553: PUSH
73554: LD_INT 2
73556: EQUAL
73557: NOT
73558: IFFALSE 73570
// begin busy := true ;
73560: LD_ADDR_VAR 0 8
73564: PUSH
73565: LD_INT 1
73567: ST_TO_ADDR
// break ;
73568: GO 73572
// end ;
73570: GO 73541
73572: POP
73573: POP
// if busy then
73574: LD_VAR 0 8
73578: IFFALSE 73582
// continue ;
73580: GO 73388
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
73582: LD_ADDR_VAR 0 7
73586: PUSH
73587: LD_VAR 0 6
73591: PPUSH
73592: LD_INT 35
73594: PUSH
73595: LD_INT 0
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PPUSH
73602: CALL_OW 72
73606: ST_TO_ADDR
// if tw then
73607: LD_VAR 0 7
73611: IFFALSE 73688
// begin tw := tw [ 1 ] ;
73613: LD_ADDR_VAR 0 7
73617: PUSH
73618: LD_VAR 0 7
73622: PUSH
73623: LD_INT 1
73625: ARRAY
73626: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
73627: LD_ADDR_VAR 0 9
73631: PUSH
73632: LD_VAR 0 7
73636: PPUSH
73637: LD_EXP 61
73641: PUSH
73642: LD_VAR 0 2
73646: ARRAY
73647: PPUSH
73648: CALL 31041 0 2
73652: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
73653: LD_EXP 75
73657: PUSH
73658: LD_VAR 0 2
73662: ARRAY
73663: IFFALSE 73686
// if not weapon in mc_allowed_tower_weapons [ i ] then
73665: LD_VAR 0 9
73669: PUSH
73670: LD_EXP 75
73674: PUSH
73675: LD_VAR 0 2
73679: ARRAY
73680: IN
73681: NOT
73682: IFFALSE 73686
// continue ;
73684: GO 73388
// end else
73686: GO 73751
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
73688: LD_ADDR_VAR 0 5
73692: PUSH
73693: LD_EXP 44
73697: PUSH
73698: LD_VAR 0 2
73702: ARRAY
73703: PPUSH
73704: LD_VAR 0 4
73708: PPUSH
73709: CALL 61242 0 2
73713: ST_TO_ADDR
// if not tmp2 then
73714: LD_VAR 0 5
73718: NOT
73719: IFFALSE 73723
// continue ;
73721: GO 73388
// tw := tmp2 [ 1 ] ;
73723: LD_ADDR_VAR 0 7
73727: PUSH
73728: LD_VAR 0 5
73732: PUSH
73733: LD_INT 1
73735: ARRAY
73736: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
73737: LD_ADDR_VAR 0 9
73741: PUSH
73742: LD_VAR 0 5
73746: PUSH
73747: LD_INT 2
73749: ARRAY
73750: ST_TO_ADDR
// end ; if not weapon then
73751: LD_VAR 0 9
73755: NOT
73756: IFFALSE 73760
// continue ;
73758: GO 73388
// ComPlaceWeapon ( tw , weapon ) ;
73760: LD_VAR 0 7
73764: PPUSH
73765: LD_VAR 0 9
73769: PPUSH
73770: CALL_OW 148
// end ;
73774: GO 73388
73776: POP
73777: POP
// end ;
73778: LD_VAR 0 1
73782: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
73783: LD_INT 0
73785: PPUSH
73786: PPUSH
73787: PPUSH
73788: PPUSH
73789: PPUSH
73790: PPUSH
// if not mc_bases then
73791: LD_EXP 36
73795: NOT
73796: IFFALSE 73800
// exit ;
73798: GO 74812
// for i = 1 to mc_bases do
73800: LD_ADDR_VAR 0 2
73804: PUSH
73805: DOUBLE
73806: LD_INT 1
73808: DEC
73809: ST_TO_ADDR
73810: LD_EXP 36
73814: PUSH
73815: FOR_TO
73816: IFFALSE 74810
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
73818: LD_EXP 49
73822: PUSH
73823: LD_VAR 0 2
73827: ARRAY
73828: NOT
73829: PUSH
73830: LD_EXP 49
73834: PUSH
73835: LD_VAR 0 2
73839: ARRAY
73840: PUSH
73841: LD_EXP 50
73845: PUSH
73846: LD_VAR 0 2
73850: ARRAY
73851: EQUAL
73852: OR
73853: IFFALSE 73857
// continue ;
73855: GO 73815
// if mc_miners [ i ] then
73857: LD_EXP 50
73861: PUSH
73862: LD_VAR 0 2
73866: ARRAY
73867: IFFALSE 74497
// begin k := 1 ;
73869: LD_ADDR_VAR 0 4
73873: PUSH
73874: LD_INT 1
73876: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
73877: LD_ADDR_VAR 0 3
73881: PUSH
73882: DOUBLE
73883: LD_EXP 50
73887: PUSH
73888: LD_VAR 0 2
73892: ARRAY
73893: INC
73894: ST_TO_ADDR
73895: LD_INT 1
73897: PUSH
73898: FOR_DOWNTO
73899: IFFALSE 74495
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
73901: LD_EXP 50
73905: PUSH
73906: LD_VAR 0 2
73910: ARRAY
73911: PUSH
73912: LD_VAR 0 3
73916: ARRAY
73917: PPUSH
73918: CALL_OW 301
73922: PUSH
73923: LD_EXP 50
73927: PUSH
73928: LD_VAR 0 2
73932: ARRAY
73933: PUSH
73934: LD_VAR 0 3
73938: ARRAY
73939: PPUSH
73940: CALL_OW 257
73944: PUSH
73945: LD_INT 1
73947: NONEQUAL
73948: OR
73949: IFFALSE 74012
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
73951: LD_ADDR_VAR 0 5
73955: PUSH
73956: LD_EXP 50
73960: PUSH
73961: LD_VAR 0 2
73965: ARRAY
73966: PUSH
73967: LD_EXP 50
73971: PUSH
73972: LD_VAR 0 2
73976: ARRAY
73977: PUSH
73978: LD_VAR 0 3
73982: ARRAY
73983: DIFF
73984: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
73985: LD_ADDR_EXP 50
73989: PUSH
73990: LD_EXP 50
73994: PPUSH
73995: LD_VAR 0 2
73999: PPUSH
74000: LD_VAR 0 5
74004: PPUSH
74005: CALL_OW 1
74009: ST_TO_ADDR
// continue ;
74010: GO 73898
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
74012: LD_EXP 50
74016: PUSH
74017: LD_VAR 0 2
74021: ARRAY
74022: PUSH
74023: LD_VAR 0 3
74027: ARRAY
74028: PPUSH
74029: CALL 26007 0 1
74033: PUSH
74034: LD_EXP 50
74038: PUSH
74039: LD_VAR 0 2
74043: ARRAY
74044: PUSH
74045: LD_VAR 0 3
74049: ARRAY
74050: PPUSH
74051: CALL_OW 255
74055: PPUSH
74056: LD_EXP 49
74060: PUSH
74061: LD_VAR 0 2
74065: ARRAY
74066: PUSH
74067: LD_VAR 0 4
74071: ARRAY
74072: PUSH
74073: LD_INT 1
74075: ARRAY
74076: PPUSH
74077: LD_EXP 49
74081: PUSH
74082: LD_VAR 0 2
74086: ARRAY
74087: PUSH
74088: LD_VAR 0 4
74092: ARRAY
74093: PUSH
74094: LD_INT 2
74096: ARRAY
74097: PPUSH
74098: LD_INT 15
74100: PPUSH
74101: CALL 26967 0 4
74105: PUSH
74106: LD_INT 4
74108: ARRAY
74109: PUSH
74110: LD_EXP 50
74114: PUSH
74115: LD_VAR 0 2
74119: ARRAY
74120: PUSH
74121: LD_VAR 0 3
74125: ARRAY
74126: PPUSH
74127: LD_INT 10
74129: PPUSH
74130: CALL 28664 0 2
74134: PUSH
74135: LD_INT 4
74137: ARRAY
74138: OR
74139: AND
74140: IFFALSE 74163
// ComStop ( mc_miners [ i ] [ j ] ) ;
74142: LD_EXP 50
74146: PUSH
74147: LD_VAR 0 2
74151: ARRAY
74152: PUSH
74153: LD_VAR 0 3
74157: ARRAY
74158: PPUSH
74159: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
74163: LD_EXP 50
74167: PUSH
74168: LD_VAR 0 2
74172: ARRAY
74173: PUSH
74174: LD_VAR 0 3
74178: ARRAY
74179: PPUSH
74180: CALL_OW 257
74184: PUSH
74185: LD_INT 1
74187: EQUAL
74188: PUSH
74189: LD_EXP 50
74193: PUSH
74194: LD_VAR 0 2
74198: ARRAY
74199: PUSH
74200: LD_VAR 0 3
74204: ARRAY
74205: PPUSH
74206: CALL_OW 459
74210: NOT
74211: AND
74212: PUSH
74213: LD_EXP 50
74217: PUSH
74218: LD_VAR 0 2
74222: ARRAY
74223: PUSH
74224: LD_VAR 0 3
74228: ARRAY
74229: PPUSH
74230: CALL_OW 255
74234: PPUSH
74235: LD_EXP 49
74239: PUSH
74240: LD_VAR 0 2
74244: ARRAY
74245: PUSH
74246: LD_VAR 0 4
74250: ARRAY
74251: PUSH
74252: LD_INT 1
74254: ARRAY
74255: PPUSH
74256: LD_EXP 49
74260: PUSH
74261: LD_VAR 0 2
74265: ARRAY
74266: PUSH
74267: LD_VAR 0 4
74271: ARRAY
74272: PUSH
74273: LD_INT 2
74275: ARRAY
74276: PPUSH
74277: LD_INT 15
74279: PPUSH
74280: CALL 26967 0 4
74284: PUSH
74285: LD_INT 4
74287: ARRAY
74288: PUSH
74289: LD_INT 0
74291: EQUAL
74292: AND
74293: PUSH
74294: LD_EXP 50
74298: PUSH
74299: LD_VAR 0 2
74303: ARRAY
74304: PUSH
74305: LD_VAR 0 3
74309: ARRAY
74310: PPUSH
74311: CALL_OW 314
74315: NOT
74316: AND
74317: IFFALSE 74493
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
74319: LD_EXP 50
74323: PUSH
74324: LD_VAR 0 2
74328: ARRAY
74329: PUSH
74330: LD_VAR 0 3
74334: ARRAY
74335: PPUSH
74336: CALL_OW 310
74340: IFFALSE 74363
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
74342: LD_EXP 50
74346: PUSH
74347: LD_VAR 0 2
74351: ARRAY
74352: PUSH
74353: LD_VAR 0 3
74357: ARRAY
74358: PPUSH
74359: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
74363: LD_EXP 50
74367: PUSH
74368: LD_VAR 0 2
74372: ARRAY
74373: PUSH
74374: LD_VAR 0 3
74378: ARRAY
74379: PPUSH
74380: CALL_OW 314
74384: NOT
74385: IFFALSE 74453
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
74387: LD_EXP 50
74391: PUSH
74392: LD_VAR 0 2
74396: ARRAY
74397: PUSH
74398: LD_VAR 0 3
74402: ARRAY
74403: PPUSH
74404: LD_EXP 49
74408: PUSH
74409: LD_VAR 0 2
74413: ARRAY
74414: PUSH
74415: LD_VAR 0 4
74419: ARRAY
74420: PUSH
74421: LD_INT 1
74423: ARRAY
74424: PPUSH
74425: LD_EXP 49
74429: PUSH
74430: LD_VAR 0 2
74434: ARRAY
74435: PUSH
74436: LD_VAR 0 4
74440: ARRAY
74441: PUSH
74442: LD_INT 2
74444: ARRAY
74445: PPUSH
74446: LD_INT 0
74448: PPUSH
74449: CALL_OW 193
// k := k + 1 ;
74453: LD_ADDR_VAR 0 4
74457: PUSH
74458: LD_VAR 0 4
74462: PUSH
74463: LD_INT 1
74465: PLUS
74466: ST_TO_ADDR
// if k > mc_mines [ i ] then
74467: LD_VAR 0 4
74471: PUSH
74472: LD_EXP 49
74476: PUSH
74477: LD_VAR 0 2
74481: ARRAY
74482: GREATER
74483: IFFALSE 74493
// k := 1 ;
74485: LD_ADDR_VAR 0 4
74489: PUSH
74490: LD_INT 1
74492: ST_TO_ADDR
// end ; end ;
74493: GO 73898
74495: POP
74496: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
74497: LD_ADDR_VAR 0 5
74501: PUSH
74502: LD_EXP 36
74506: PUSH
74507: LD_VAR 0 2
74511: ARRAY
74512: PPUSH
74513: LD_INT 2
74515: PUSH
74516: LD_INT 30
74518: PUSH
74519: LD_INT 4
74521: PUSH
74522: EMPTY
74523: LIST
74524: LIST
74525: PUSH
74526: LD_INT 30
74528: PUSH
74529: LD_INT 5
74531: PUSH
74532: EMPTY
74533: LIST
74534: LIST
74535: PUSH
74536: LD_INT 30
74538: PUSH
74539: LD_INT 32
74541: PUSH
74542: EMPTY
74543: LIST
74544: LIST
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: LIST
74550: LIST
74551: PPUSH
74552: CALL_OW 72
74556: ST_TO_ADDR
// if not tmp then
74557: LD_VAR 0 5
74561: NOT
74562: IFFALSE 74566
// continue ;
74564: GO 73815
// list := [ ] ;
74566: LD_ADDR_VAR 0 6
74570: PUSH
74571: EMPTY
74572: ST_TO_ADDR
// for j in tmp do
74573: LD_ADDR_VAR 0 3
74577: PUSH
74578: LD_VAR 0 5
74582: PUSH
74583: FOR_IN
74584: IFFALSE 74653
// begin for k in UnitsInside ( j ) do
74586: LD_ADDR_VAR 0 4
74590: PUSH
74591: LD_VAR 0 3
74595: PPUSH
74596: CALL_OW 313
74600: PUSH
74601: FOR_IN
74602: IFFALSE 74649
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
74604: LD_VAR 0 4
74608: PPUSH
74609: CALL_OW 257
74613: PUSH
74614: LD_INT 1
74616: EQUAL
74617: PUSH
74618: LD_VAR 0 4
74622: PPUSH
74623: CALL_OW 459
74627: NOT
74628: AND
74629: IFFALSE 74647
// list := list ^ k ;
74631: LD_ADDR_VAR 0 6
74635: PUSH
74636: LD_VAR 0 6
74640: PUSH
74641: LD_VAR 0 4
74645: ADD
74646: ST_TO_ADDR
74647: GO 74601
74649: POP
74650: POP
// end ;
74651: GO 74583
74653: POP
74654: POP
// list := list diff mc_miners [ i ] ;
74655: LD_ADDR_VAR 0 6
74659: PUSH
74660: LD_VAR 0 6
74664: PUSH
74665: LD_EXP 50
74669: PUSH
74670: LD_VAR 0 2
74674: ARRAY
74675: DIFF
74676: ST_TO_ADDR
// if not list then
74677: LD_VAR 0 6
74681: NOT
74682: IFFALSE 74686
// continue ;
74684: GO 73815
// k := mc_mines [ i ] - mc_miners [ i ] ;
74686: LD_ADDR_VAR 0 4
74690: PUSH
74691: LD_EXP 49
74695: PUSH
74696: LD_VAR 0 2
74700: ARRAY
74701: PUSH
74702: LD_EXP 50
74706: PUSH
74707: LD_VAR 0 2
74711: ARRAY
74712: MINUS
74713: ST_TO_ADDR
// if k > list then
74714: LD_VAR 0 4
74718: PUSH
74719: LD_VAR 0 6
74723: GREATER
74724: IFFALSE 74736
// k := list ;
74726: LD_ADDR_VAR 0 4
74730: PUSH
74731: LD_VAR 0 6
74735: ST_TO_ADDR
// for j = 1 to k do
74736: LD_ADDR_VAR 0 3
74740: PUSH
74741: DOUBLE
74742: LD_INT 1
74744: DEC
74745: ST_TO_ADDR
74746: LD_VAR 0 4
74750: PUSH
74751: FOR_TO
74752: IFFALSE 74806
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
74754: LD_ADDR_EXP 50
74758: PUSH
74759: LD_EXP 50
74763: PPUSH
74764: LD_VAR 0 2
74768: PUSH
74769: LD_EXP 50
74773: PUSH
74774: LD_VAR 0 2
74778: ARRAY
74779: PUSH
74780: LD_INT 1
74782: PLUS
74783: PUSH
74784: EMPTY
74785: LIST
74786: LIST
74787: PPUSH
74788: LD_VAR 0 6
74792: PUSH
74793: LD_VAR 0 3
74797: ARRAY
74798: PPUSH
74799: CALL 26071 0 3
74803: ST_TO_ADDR
74804: GO 74751
74806: POP
74807: POP
// end ;
74808: GO 73815
74810: POP
74811: POP
// end ;
74812: LD_VAR 0 1
74816: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
74817: LD_INT 0
74819: PPUSH
74820: PPUSH
74821: PPUSH
74822: PPUSH
74823: PPUSH
74824: PPUSH
74825: PPUSH
74826: PPUSH
74827: PPUSH
74828: PPUSH
// if not mc_bases then
74829: LD_EXP 36
74833: NOT
74834: IFFALSE 74838
// exit ;
74836: GO 76569
// for i = 1 to mc_bases do
74838: LD_ADDR_VAR 0 2
74842: PUSH
74843: DOUBLE
74844: LD_INT 1
74846: DEC
74847: ST_TO_ADDR
74848: LD_EXP 36
74852: PUSH
74853: FOR_TO
74854: IFFALSE 76567
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
74856: LD_EXP 36
74860: PUSH
74861: LD_VAR 0 2
74865: ARRAY
74866: NOT
74867: PUSH
74868: LD_EXP 43
74872: PUSH
74873: LD_VAR 0 2
74877: ARRAY
74878: OR
74879: IFFALSE 74883
// continue ;
74881: GO 74853
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
74883: LD_EXP 52
74887: PUSH
74888: LD_VAR 0 2
74892: ARRAY
74893: NOT
74894: PUSH
74895: LD_EXP 53
74899: PUSH
74900: LD_VAR 0 2
74904: ARRAY
74905: AND
74906: IFFALSE 74944
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
74908: LD_ADDR_EXP 53
74912: PUSH
74913: LD_EXP 53
74917: PPUSH
74918: LD_VAR 0 2
74922: PPUSH
74923: EMPTY
74924: PPUSH
74925: CALL_OW 1
74929: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
74930: LD_VAR 0 2
74934: PPUSH
74935: LD_INT 107
74937: PPUSH
74938: CALL 66033 0 2
// continue ;
74942: GO 74853
// end ; target := [ ] ;
74944: LD_ADDR_VAR 0 6
74948: PUSH
74949: EMPTY
74950: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
74951: LD_ADDR_VAR 0 3
74955: PUSH
74956: DOUBLE
74957: LD_EXP 52
74961: PUSH
74962: LD_VAR 0 2
74966: ARRAY
74967: INC
74968: ST_TO_ADDR
74969: LD_INT 1
74971: PUSH
74972: FOR_DOWNTO
74973: IFFALSE 75233
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
74975: LD_EXP 52
74979: PUSH
74980: LD_VAR 0 2
74984: ARRAY
74985: PUSH
74986: LD_VAR 0 3
74990: ARRAY
74991: PUSH
74992: LD_INT 2
74994: ARRAY
74995: PPUSH
74996: LD_EXP 52
75000: PUSH
75001: LD_VAR 0 2
75005: ARRAY
75006: PUSH
75007: LD_VAR 0 3
75011: ARRAY
75012: PUSH
75013: LD_INT 3
75015: ARRAY
75016: PPUSH
75017: CALL_OW 488
75021: PUSH
75022: LD_EXP 52
75026: PUSH
75027: LD_VAR 0 2
75031: ARRAY
75032: PUSH
75033: LD_VAR 0 3
75037: ARRAY
75038: PUSH
75039: LD_INT 2
75041: ARRAY
75042: PPUSH
75043: LD_EXP 52
75047: PUSH
75048: LD_VAR 0 2
75052: ARRAY
75053: PUSH
75054: LD_VAR 0 3
75058: ARRAY
75059: PUSH
75060: LD_INT 3
75062: ARRAY
75063: PPUSH
75064: CALL_OW 284
75068: PUSH
75069: LD_INT 0
75071: EQUAL
75072: AND
75073: IFFALSE 75128
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
75075: LD_ADDR_VAR 0 5
75079: PUSH
75080: LD_EXP 52
75084: PUSH
75085: LD_VAR 0 2
75089: ARRAY
75090: PPUSH
75091: LD_VAR 0 3
75095: PPUSH
75096: CALL_OW 3
75100: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
75101: LD_ADDR_EXP 52
75105: PUSH
75106: LD_EXP 52
75110: PPUSH
75111: LD_VAR 0 2
75115: PPUSH
75116: LD_VAR 0 5
75120: PPUSH
75121: CALL_OW 1
75125: ST_TO_ADDR
// continue ;
75126: GO 74972
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
75128: LD_EXP 36
75132: PUSH
75133: LD_VAR 0 2
75137: ARRAY
75138: PUSH
75139: LD_INT 1
75141: ARRAY
75142: PPUSH
75143: CALL_OW 255
75147: PPUSH
75148: LD_EXP 52
75152: PUSH
75153: LD_VAR 0 2
75157: ARRAY
75158: PUSH
75159: LD_VAR 0 3
75163: ARRAY
75164: PUSH
75165: LD_INT 2
75167: ARRAY
75168: PPUSH
75169: LD_EXP 52
75173: PUSH
75174: LD_VAR 0 2
75178: ARRAY
75179: PUSH
75180: LD_VAR 0 3
75184: ARRAY
75185: PUSH
75186: LD_INT 3
75188: ARRAY
75189: PPUSH
75190: LD_INT 30
75192: PPUSH
75193: CALL 26967 0 4
75197: PUSH
75198: LD_INT 4
75200: ARRAY
75201: PUSH
75202: LD_INT 0
75204: EQUAL
75205: IFFALSE 75231
// begin target := mc_crates [ i ] [ j ] ;
75207: LD_ADDR_VAR 0 6
75211: PUSH
75212: LD_EXP 52
75216: PUSH
75217: LD_VAR 0 2
75221: ARRAY
75222: PUSH
75223: LD_VAR 0 3
75227: ARRAY
75228: ST_TO_ADDR
// break ;
75229: GO 75233
// end ; end ;
75231: GO 74972
75233: POP
75234: POP
// if not target then
75235: LD_VAR 0 6
75239: NOT
75240: IFFALSE 75244
// continue ;
75242: GO 74853
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
75244: LD_ADDR_VAR 0 7
75248: PUSH
75249: LD_EXP 55
75253: PUSH
75254: LD_VAR 0 2
75258: ARRAY
75259: PPUSH
75260: LD_INT 2
75262: PUSH
75263: LD_INT 3
75265: PUSH
75266: LD_INT 58
75268: PUSH
75269: EMPTY
75270: LIST
75271: PUSH
75272: EMPTY
75273: LIST
75274: LIST
75275: PUSH
75276: LD_INT 61
75278: PUSH
75279: EMPTY
75280: LIST
75281: PUSH
75282: LD_INT 33
75284: PUSH
75285: LD_INT 5
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 33
75294: PUSH
75295: LD_INT 3
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: LIST
75306: LIST
75307: LIST
75308: PUSH
75309: LD_INT 2
75311: PUSH
75312: LD_INT 34
75314: PUSH
75315: LD_INT 32
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: PUSH
75322: LD_INT 34
75324: PUSH
75325: LD_INT 51
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: PUSH
75332: LD_INT 34
75334: PUSH
75335: LD_INT 12
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: PUSH
75342: EMPTY
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: PPUSH
75352: CALL_OW 72
75356: ST_TO_ADDR
// if not cargo then
75357: LD_VAR 0 7
75361: NOT
75362: IFFALSE 76005
// begin if mc_crates_collector [ i ] < 5 then
75364: LD_EXP 53
75368: PUSH
75369: LD_VAR 0 2
75373: ARRAY
75374: PUSH
75375: LD_INT 5
75377: LESS
75378: IFFALSE 75744
// begin if mc_ape [ i ] then
75380: LD_EXP 65
75384: PUSH
75385: LD_VAR 0 2
75389: ARRAY
75390: IFFALSE 75437
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
75392: LD_ADDR_VAR 0 5
75396: PUSH
75397: LD_EXP 65
75401: PUSH
75402: LD_VAR 0 2
75406: ARRAY
75407: PPUSH
75408: LD_INT 25
75410: PUSH
75411: LD_INT 16
75413: PUSH
75414: EMPTY
75415: LIST
75416: LIST
75417: PUSH
75418: LD_INT 24
75420: PUSH
75421: LD_INT 750
75423: PUSH
75424: EMPTY
75425: LIST
75426: LIST
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: PPUSH
75432: CALL_OW 72
75436: ST_TO_ADDR
// if not tmp then
75437: LD_VAR 0 5
75441: NOT
75442: IFFALSE 75489
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
75444: LD_ADDR_VAR 0 5
75448: PUSH
75449: LD_EXP 36
75453: PUSH
75454: LD_VAR 0 2
75458: ARRAY
75459: PPUSH
75460: LD_INT 25
75462: PUSH
75463: LD_INT 2
75465: PUSH
75466: EMPTY
75467: LIST
75468: LIST
75469: PUSH
75470: LD_INT 24
75472: PUSH
75473: LD_INT 750
75475: PUSH
75476: EMPTY
75477: LIST
75478: LIST
75479: PUSH
75480: EMPTY
75481: LIST
75482: LIST
75483: PPUSH
75484: CALL_OW 72
75488: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
75489: LD_EXP 65
75493: PUSH
75494: LD_VAR 0 2
75498: ARRAY
75499: PUSH
75500: LD_EXP 36
75504: PUSH
75505: LD_VAR 0 2
75509: ARRAY
75510: PPUSH
75511: LD_INT 25
75513: PUSH
75514: LD_INT 2
75516: PUSH
75517: EMPTY
75518: LIST
75519: LIST
75520: PUSH
75521: LD_INT 24
75523: PUSH
75524: LD_INT 750
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: PPUSH
75535: CALL_OW 72
75539: AND
75540: PUSH
75541: LD_VAR 0 5
75545: PUSH
75546: LD_INT 5
75548: LESS
75549: AND
75550: IFFALSE 75632
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
75552: LD_ADDR_VAR 0 3
75556: PUSH
75557: LD_EXP 36
75561: PUSH
75562: LD_VAR 0 2
75566: ARRAY
75567: PPUSH
75568: LD_INT 25
75570: PUSH
75571: LD_INT 2
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: PUSH
75578: LD_INT 24
75580: PUSH
75581: LD_INT 750
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: PPUSH
75592: CALL_OW 72
75596: PUSH
75597: FOR_IN
75598: IFFALSE 75630
// begin tmp := tmp union j ;
75600: LD_ADDR_VAR 0 5
75604: PUSH
75605: LD_VAR 0 5
75609: PUSH
75610: LD_VAR 0 3
75614: UNION
75615: ST_TO_ADDR
// if tmp >= 5 then
75616: LD_VAR 0 5
75620: PUSH
75621: LD_INT 5
75623: GREATEREQUAL
75624: IFFALSE 75628
// break ;
75626: GO 75630
// end ;
75628: GO 75597
75630: POP
75631: POP
// end ; if not tmp then
75632: LD_VAR 0 5
75636: NOT
75637: IFFALSE 75641
// continue ;
75639: GO 74853
// for j in tmp do
75641: LD_ADDR_VAR 0 3
75645: PUSH
75646: LD_VAR 0 5
75650: PUSH
75651: FOR_IN
75652: IFFALSE 75742
// if not GetTag ( j ) then
75654: LD_VAR 0 3
75658: PPUSH
75659: CALL_OW 110
75663: NOT
75664: IFFALSE 75740
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
75666: LD_ADDR_EXP 53
75670: PUSH
75671: LD_EXP 53
75675: PPUSH
75676: LD_VAR 0 2
75680: PUSH
75681: LD_EXP 53
75685: PUSH
75686: LD_VAR 0 2
75690: ARRAY
75691: PUSH
75692: LD_INT 1
75694: PLUS
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: PPUSH
75700: LD_VAR 0 3
75704: PPUSH
75705: CALL 26071 0 3
75709: ST_TO_ADDR
// SetTag ( j , 107 ) ;
75710: LD_VAR 0 3
75714: PPUSH
75715: LD_INT 107
75717: PPUSH
75718: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
75722: LD_EXP 53
75726: PUSH
75727: LD_VAR 0 2
75731: ARRAY
75732: PUSH
75733: LD_INT 5
75735: GREATEREQUAL
75736: IFFALSE 75740
// break ;
75738: GO 75742
// end ;
75740: GO 75651
75742: POP
75743: POP
// end ; if mc_crates_collector [ i ] and target then
75744: LD_EXP 53
75748: PUSH
75749: LD_VAR 0 2
75753: ARRAY
75754: PUSH
75755: LD_VAR 0 6
75759: AND
75760: IFFALSE 76003
// begin if mc_crates_collector [ i ] < target [ 1 ] then
75762: LD_EXP 53
75766: PUSH
75767: LD_VAR 0 2
75771: ARRAY
75772: PUSH
75773: LD_VAR 0 6
75777: PUSH
75778: LD_INT 1
75780: ARRAY
75781: LESS
75782: IFFALSE 75802
// tmp := mc_crates_collector [ i ] else
75784: LD_ADDR_VAR 0 5
75788: PUSH
75789: LD_EXP 53
75793: PUSH
75794: LD_VAR 0 2
75798: ARRAY
75799: ST_TO_ADDR
75800: GO 75816
// tmp := target [ 1 ] ;
75802: LD_ADDR_VAR 0 5
75806: PUSH
75807: LD_VAR 0 6
75811: PUSH
75812: LD_INT 1
75814: ARRAY
75815: ST_TO_ADDR
// k := 0 ;
75816: LD_ADDR_VAR 0 4
75820: PUSH
75821: LD_INT 0
75823: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
75824: LD_ADDR_VAR 0 3
75828: PUSH
75829: LD_EXP 53
75833: PUSH
75834: LD_VAR 0 2
75838: ARRAY
75839: PUSH
75840: FOR_IN
75841: IFFALSE 76001
// begin k := k + 1 ;
75843: LD_ADDR_VAR 0 4
75847: PUSH
75848: LD_VAR 0 4
75852: PUSH
75853: LD_INT 1
75855: PLUS
75856: ST_TO_ADDR
// if k > tmp then
75857: LD_VAR 0 4
75861: PUSH
75862: LD_VAR 0 5
75866: GREATER
75867: IFFALSE 75871
// break ;
75869: GO 76001
// if not GetClass ( j ) in [ 2 , 16 ] then
75871: LD_VAR 0 3
75875: PPUSH
75876: CALL_OW 257
75880: PUSH
75881: LD_INT 2
75883: PUSH
75884: LD_INT 16
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: IN
75891: NOT
75892: IFFALSE 75945
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
75894: LD_ADDR_EXP 53
75898: PUSH
75899: LD_EXP 53
75903: PPUSH
75904: LD_VAR 0 2
75908: PPUSH
75909: LD_EXP 53
75913: PUSH
75914: LD_VAR 0 2
75918: ARRAY
75919: PUSH
75920: LD_VAR 0 3
75924: DIFF
75925: PPUSH
75926: CALL_OW 1
75930: ST_TO_ADDR
// SetTag ( j , 0 ) ;
75931: LD_VAR 0 3
75935: PPUSH
75936: LD_INT 0
75938: PPUSH
75939: CALL_OW 109
// continue ;
75943: GO 75840
// end ; if IsInUnit ( j ) then
75945: LD_VAR 0 3
75949: PPUSH
75950: CALL_OW 310
75954: IFFALSE 75965
// ComExitBuilding ( j ) ;
75956: LD_VAR 0 3
75960: PPUSH
75961: CALL_OW 122
// wait ( 3 ) ;
75965: LD_INT 3
75967: PPUSH
75968: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
75972: LD_VAR 0 3
75976: PPUSH
75977: LD_VAR 0 6
75981: PUSH
75982: LD_INT 2
75984: ARRAY
75985: PPUSH
75986: LD_VAR 0 6
75990: PUSH
75991: LD_INT 3
75993: ARRAY
75994: PPUSH
75995: CALL_OW 117
// end ;
75999: GO 75840
76001: POP
76002: POP
// end ; end else
76003: GO 76565
// begin for j in cargo do
76005: LD_ADDR_VAR 0 3
76009: PUSH
76010: LD_VAR 0 7
76014: PUSH
76015: FOR_IN
76016: IFFALSE 76563
// begin if GetTag ( j ) <> 0 then
76018: LD_VAR 0 3
76022: PPUSH
76023: CALL_OW 110
76027: PUSH
76028: LD_INT 0
76030: NONEQUAL
76031: IFFALSE 76035
// continue ;
76033: GO 76015
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
76035: LD_VAR 0 3
76039: PPUSH
76040: CALL_OW 256
76044: PUSH
76045: LD_INT 1000
76047: LESS
76048: PUSH
76049: LD_VAR 0 3
76053: PPUSH
76054: LD_EXP 60
76058: PUSH
76059: LD_VAR 0 2
76063: ARRAY
76064: PPUSH
76065: CALL_OW 308
76069: NOT
76070: AND
76071: IFFALSE 76093
// ComMoveToArea ( j , mc_parking [ i ] ) ;
76073: LD_VAR 0 3
76077: PPUSH
76078: LD_EXP 60
76082: PUSH
76083: LD_VAR 0 2
76087: ARRAY
76088: PPUSH
76089: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
76093: LD_VAR 0 3
76097: PPUSH
76098: CALL_OW 256
76102: PUSH
76103: LD_INT 1000
76105: LESS
76106: PUSH
76107: LD_VAR 0 3
76111: PPUSH
76112: LD_EXP 60
76116: PUSH
76117: LD_VAR 0 2
76121: ARRAY
76122: PPUSH
76123: CALL_OW 308
76127: AND
76128: IFFALSE 76132
// continue ;
76130: GO 76015
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
76132: LD_VAR 0 3
76136: PPUSH
76137: CALL_OW 262
76141: PUSH
76142: LD_INT 2
76144: EQUAL
76145: PUSH
76146: LD_VAR 0 3
76150: PPUSH
76151: CALL_OW 261
76155: PUSH
76156: LD_INT 15
76158: LESS
76159: AND
76160: IFFALSE 76164
// continue ;
76162: GO 76015
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
76164: LD_VAR 0 3
76168: PPUSH
76169: CALL_OW 262
76173: PUSH
76174: LD_INT 1
76176: EQUAL
76177: PUSH
76178: LD_VAR 0 3
76182: PPUSH
76183: CALL_OW 261
76187: PUSH
76188: LD_INT 10
76190: LESS
76191: AND
76192: IFFALSE 76502
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76194: LD_ADDR_VAR 0 8
76198: PUSH
76199: LD_EXP 36
76203: PUSH
76204: LD_VAR 0 2
76208: ARRAY
76209: PPUSH
76210: LD_INT 2
76212: PUSH
76213: LD_INT 30
76215: PUSH
76216: LD_INT 0
76218: PUSH
76219: EMPTY
76220: LIST
76221: LIST
76222: PUSH
76223: LD_INT 30
76225: PUSH
76226: LD_INT 1
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: PUSH
76233: EMPTY
76234: LIST
76235: LIST
76236: LIST
76237: PPUSH
76238: CALL_OW 72
76242: ST_TO_ADDR
// if not depot then
76243: LD_VAR 0 8
76247: NOT
76248: IFFALSE 76252
// continue ;
76250: GO 76015
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
76252: LD_VAR 0 3
76256: PPUSH
76257: LD_VAR 0 8
76261: PPUSH
76262: LD_VAR 0 3
76266: PPUSH
76267: CALL_OW 74
76271: PPUSH
76272: CALL_OW 296
76276: PUSH
76277: LD_INT 6
76279: LESS
76280: IFFALSE 76296
// SetFuel ( j , 100 ) else
76282: LD_VAR 0 3
76286: PPUSH
76287: LD_INT 100
76289: PPUSH
76290: CALL_OW 240
76294: GO 76502
// if GetFuel ( j ) = 0 then
76296: LD_VAR 0 3
76300: PPUSH
76301: CALL_OW 261
76305: PUSH
76306: LD_INT 0
76308: EQUAL
76309: IFFALSE 76502
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
76311: LD_ADDR_EXP 55
76315: PUSH
76316: LD_EXP 55
76320: PPUSH
76321: LD_VAR 0 2
76325: PPUSH
76326: LD_EXP 55
76330: PUSH
76331: LD_VAR 0 2
76335: ARRAY
76336: PUSH
76337: LD_VAR 0 3
76341: DIFF
76342: PPUSH
76343: CALL_OW 1
76347: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
76348: LD_VAR 0 3
76352: PPUSH
76353: CALL_OW 263
76357: PUSH
76358: LD_INT 1
76360: EQUAL
76361: IFFALSE 76377
// ComExitVehicle ( IsInUnit ( j ) ) ;
76363: LD_VAR 0 3
76367: PPUSH
76368: CALL_OW 310
76372: PPUSH
76373: CALL_OW 121
// if GetControl ( j ) = control_remote then
76377: LD_VAR 0 3
76381: PPUSH
76382: CALL_OW 263
76386: PUSH
76387: LD_INT 2
76389: EQUAL
76390: IFFALSE 76401
// ComUnlink ( j ) ;
76392: LD_VAR 0 3
76396: PPUSH
76397: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
76401: LD_ADDR_VAR 0 9
76405: PUSH
76406: LD_VAR 0 2
76410: PPUSH
76411: LD_INT 3
76413: PPUSH
76414: CALL 85548 0 2
76418: ST_TO_ADDR
// if fac then
76419: LD_VAR 0 9
76423: IFFALSE 76500
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
76425: LD_ADDR_VAR 0 10
76429: PUSH
76430: LD_VAR 0 9
76434: PPUSH
76435: LD_VAR 0 3
76439: PPUSH
76440: CALL_OW 265
76444: PPUSH
76445: LD_VAR 0 3
76449: PPUSH
76450: CALL_OW 262
76454: PPUSH
76455: LD_VAR 0 3
76459: PPUSH
76460: CALL_OW 263
76464: PPUSH
76465: LD_VAR 0 3
76469: PPUSH
76470: CALL_OW 264
76474: PPUSH
76475: CALL 23664 0 5
76479: ST_TO_ADDR
// if components then
76480: LD_VAR 0 10
76484: IFFALSE 76500
// MC_InsertProduceList ( i , components ) ;
76486: LD_VAR 0 2
76490: PPUSH
76491: LD_VAR 0 10
76495: PPUSH
76496: CALL 85176 0 2
// end ; continue ;
76500: GO 76015
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
76502: LD_VAR 0 3
76506: PPUSH
76507: LD_INT 1
76509: PPUSH
76510: CALL_OW 289
76514: PUSH
76515: LD_INT 100
76517: LESS
76518: PUSH
76519: LD_VAR 0 3
76523: PPUSH
76524: CALL_OW 314
76528: NOT
76529: AND
76530: IFFALSE 76559
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76532: LD_VAR 0 3
76536: PPUSH
76537: LD_VAR 0 6
76541: PUSH
76542: LD_INT 2
76544: ARRAY
76545: PPUSH
76546: LD_VAR 0 6
76550: PUSH
76551: LD_INT 3
76553: ARRAY
76554: PPUSH
76555: CALL_OW 117
// break ;
76559: GO 76563
// end ;
76561: GO 76015
76563: POP
76564: POP
// end ; end ;
76565: GO 74853
76567: POP
76568: POP
// end ;
76569: LD_VAR 0 1
76573: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
76574: LD_INT 0
76576: PPUSH
76577: PPUSH
76578: PPUSH
76579: PPUSH
// if not mc_bases then
76580: LD_EXP 36
76584: NOT
76585: IFFALSE 76589
// exit ;
76587: GO 76750
// for i = 1 to mc_bases do
76589: LD_ADDR_VAR 0 2
76593: PUSH
76594: DOUBLE
76595: LD_INT 1
76597: DEC
76598: ST_TO_ADDR
76599: LD_EXP 36
76603: PUSH
76604: FOR_TO
76605: IFFALSE 76748
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
76607: LD_ADDR_VAR 0 4
76611: PUSH
76612: LD_EXP 55
76616: PUSH
76617: LD_VAR 0 2
76621: ARRAY
76622: PUSH
76623: LD_EXP 58
76627: PUSH
76628: LD_VAR 0 2
76632: ARRAY
76633: UNION
76634: PPUSH
76635: LD_INT 33
76637: PUSH
76638: LD_INT 2
76640: PUSH
76641: EMPTY
76642: LIST
76643: LIST
76644: PPUSH
76645: CALL_OW 72
76649: ST_TO_ADDR
// if tmp then
76650: LD_VAR 0 4
76654: IFFALSE 76746
// for j in tmp do
76656: LD_ADDR_VAR 0 3
76660: PUSH
76661: LD_VAR 0 4
76665: PUSH
76666: FOR_IN
76667: IFFALSE 76744
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
76669: LD_VAR 0 3
76673: PPUSH
76674: CALL_OW 312
76678: NOT
76679: PUSH
76680: LD_VAR 0 3
76684: PPUSH
76685: CALL_OW 256
76689: PUSH
76690: LD_INT 250
76692: GREATEREQUAL
76693: AND
76694: IFFALSE 76707
// Connect ( j ) else
76696: LD_VAR 0 3
76700: PPUSH
76701: CALL 29004 0 1
76705: GO 76742
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
76707: LD_VAR 0 3
76711: PPUSH
76712: CALL_OW 256
76716: PUSH
76717: LD_INT 250
76719: LESS
76720: PUSH
76721: LD_VAR 0 3
76725: PPUSH
76726: CALL_OW 312
76730: AND
76731: IFFALSE 76742
// ComUnlink ( j ) ;
76733: LD_VAR 0 3
76737: PPUSH
76738: CALL_OW 136
76742: GO 76666
76744: POP
76745: POP
// end ;
76746: GO 76604
76748: POP
76749: POP
// end ;
76750: LD_VAR 0 1
76754: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
76755: LD_INT 0
76757: PPUSH
76758: PPUSH
76759: PPUSH
76760: PPUSH
76761: PPUSH
// if not mc_bases then
76762: LD_EXP 36
76766: NOT
76767: IFFALSE 76771
// exit ;
76769: GO 77231
// for i = 1 to mc_bases do
76771: LD_ADDR_VAR 0 2
76775: PUSH
76776: DOUBLE
76777: LD_INT 1
76779: DEC
76780: ST_TO_ADDR
76781: LD_EXP 36
76785: PUSH
76786: FOR_TO
76787: IFFALSE 77229
// begin if not mc_produce [ i ] then
76789: LD_EXP 57
76793: PUSH
76794: LD_VAR 0 2
76798: ARRAY
76799: NOT
76800: IFFALSE 76804
// continue ;
76802: GO 76786
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
76804: LD_ADDR_VAR 0 5
76808: PUSH
76809: LD_EXP 36
76813: PUSH
76814: LD_VAR 0 2
76818: ARRAY
76819: PPUSH
76820: LD_INT 30
76822: PUSH
76823: LD_INT 3
76825: PUSH
76826: EMPTY
76827: LIST
76828: LIST
76829: PPUSH
76830: CALL_OW 72
76834: ST_TO_ADDR
// if not fac then
76835: LD_VAR 0 5
76839: NOT
76840: IFFALSE 76844
// continue ;
76842: GO 76786
// for j in fac do
76844: LD_ADDR_VAR 0 3
76848: PUSH
76849: LD_VAR 0 5
76853: PUSH
76854: FOR_IN
76855: IFFALSE 77225
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
76857: LD_VAR 0 3
76861: PPUSH
76862: CALL_OW 461
76866: PUSH
76867: LD_INT 2
76869: NONEQUAL
76870: PUSH
76871: LD_VAR 0 3
76875: PPUSH
76876: LD_INT 15
76878: PPUSH
76879: CALL 28664 0 2
76883: PUSH
76884: LD_INT 4
76886: ARRAY
76887: OR
76888: PUSH
76889: LD_VAR 0 3
76893: PPUSH
76894: CALL_OW 313
76898: PUSH
76899: LD_INT 0
76901: EQUAL
76902: OR
76903: IFFALSE 76907
// continue ;
76905: GO 76854
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
76907: LD_VAR 0 3
76911: PPUSH
76912: LD_EXP 57
76916: PUSH
76917: LD_VAR 0 2
76921: ARRAY
76922: PUSH
76923: LD_INT 1
76925: ARRAY
76926: PUSH
76927: LD_INT 1
76929: ARRAY
76930: PPUSH
76931: LD_EXP 57
76935: PUSH
76936: LD_VAR 0 2
76940: ARRAY
76941: PUSH
76942: LD_INT 1
76944: ARRAY
76945: PUSH
76946: LD_INT 2
76948: ARRAY
76949: PPUSH
76950: LD_EXP 57
76954: PUSH
76955: LD_VAR 0 2
76959: ARRAY
76960: PUSH
76961: LD_INT 1
76963: ARRAY
76964: PUSH
76965: LD_INT 3
76967: ARRAY
76968: PPUSH
76969: LD_EXP 57
76973: PUSH
76974: LD_VAR 0 2
76978: ARRAY
76979: PUSH
76980: LD_INT 1
76982: ARRAY
76983: PUSH
76984: LD_INT 4
76986: ARRAY
76987: PPUSH
76988: CALL_OW 448
76992: PUSH
76993: LD_VAR 0 3
76997: PPUSH
76998: LD_EXP 57
77002: PUSH
77003: LD_VAR 0 2
77007: ARRAY
77008: PUSH
77009: LD_INT 1
77011: ARRAY
77012: PUSH
77013: LD_INT 1
77015: ARRAY
77016: PUSH
77017: LD_EXP 57
77021: PUSH
77022: LD_VAR 0 2
77026: ARRAY
77027: PUSH
77028: LD_INT 1
77030: ARRAY
77031: PUSH
77032: LD_INT 2
77034: ARRAY
77035: PUSH
77036: LD_EXP 57
77040: PUSH
77041: LD_VAR 0 2
77045: ARRAY
77046: PUSH
77047: LD_INT 1
77049: ARRAY
77050: PUSH
77051: LD_INT 3
77053: ARRAY
77054: PUSH
77055: LD_EXP 57
77059: PUSH
77060: LD_VAR 0 2
77064: ARRAY
77065: PUSH
77066: LD_INT 1
77068: ARRAY
77069: PUSH
77070: LD_INT 4
77072: ARRAY
77073: PUSH
77074: EMPTY
77075: LIST
77076: LIST
77077: LIST
77078: LIST
77079: PPUSH
77080: CALL 32335 0 2
77084: AND
77085: IFFALSE 77223
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
77087: LD_VAR 0 3
77091: PPUSH
77092: LD_EXP 57
77096: PUSH
77097: LD_VAR 0 2
77101: ARRAY
77102: PUSH
77103: LD_INT 1
77105: ARRAY
77106: PUSH
77107: LD_INT 1
77109: ARRAY
77110: PPUSH
77111: LD_EXP 57
77115: PUSH
77116: LD_VAR 0 2
77120: ARRAY
77121: PUSH
77122: LD_INT 1
77124: ARRAY
77125: PUSH
77126: LD_INT 2
77128: ARRAY
77129: PPUSH
77130: LD_EXP 57
77134: PUSH
77135: LD_VAR 0 2
77139: ARRAY
77140: PUSH
77141: LD_INT 1
77143: ARRAY
77144: PUSH
77145: LD_INT 3
77147: ARRAY
77148: PPUSH
77149: LD_EXP 57
77153: PUSH
77154: LD_VAR 0 2
77158: ARRAY
77159: PUSH
77160: LD_INT 1
77162: ARRAY
77163: PUSH
77164: LD_INT 4
77166: ARRAY
77167: PPUSH
77168: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
77172: LD_ADDR_VAR 0 4
77176: PUSH
77177: LD_EXP 57
77181: PUSH
77182: LD_VAR 0 2
77186: ARRAY
77187: PPUSH
77188: LD_INT 1
77190: PPUSH
77191: CALL_OW 3
77195: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77196: LD_ADDR_EXP 57
77200: PUSH
77201: LD_EXP 57
77205: PPUSH
77206: LD_VAR 0 2
77210: PPUSH
77211: LD_VAR 0 4
77215: PPUSH
77216: CALL_OW 1
77220: ST_TO_ADDR
// break ;
77221: GO 77225
// end ; end ;
77223: GO 76854
77225: POP
77226: POP
// end ;
77227: GO 76786
77229: POP
77230: POP
// end ;
77231: LD_VAR 0 1
77235: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
77236: LD_INT 0
77238: PPUSH
77239: PPUSH
77240: PPUSH
// if not mc_bases then
77241: LD_EXP 36
77245: NOT
77246: IFFALSE 77250
// exit ;
77248: GO 77339
// for i = 1 to mc_bases do
77250: LD_ADDR_VAR 0 2
77254: PUSH
77255: DOUBLE
77256: LD_INT 1
77258: DEC
77259: ST_TO_ADDR
77260: LD_EXP 36
77264: PUSH
77265: FOR_TO
77266: IFFALSE 77337
// begin if mc_attack [ i ] then
77268: LD_EXP 56
77272: PUSH
77273: LD_VAR 0 2
77277: ARRAY
77278: IFFALSE 77335
// begin tmp := mc_attack [ i ] [ 1 ] ;
77280: LD_ADDR_VAR 0 3
77284: PUSH
77285: LD_EXP 56
77289: PUSH
77290: LD_VAR 0 2
77294: ARRAY
77295: PUSH
77296: LD_INT 1
77298: ARRAY
77299: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
77300: LD_ADDR_EXP 56
77304: PUSH
77305: LD_EXP 56
77309: PPUSH
77310: LD_VAR 0 2
77314: PPUSH
77315: EMPTY
77316: PPUSH
77317: CALL_OW 1
77321: ST_TO_ADDR
// Attack ( tmp ) ;
77322: LD_VAR 0 3
77326: PPUSH
77327: CALL 54548 0 1
// exit ;
77331: POP
77332: POP
77333: GO 77339
// end ; end ;
77335: GO 77265
77337: POP
77338: POP
// end ;
77339: LD_VAR 0 1
77343: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
77344: LD_INT 0
77346: PPUSH
77347: PPUSH
77348: PPUSH
77349: PPUSH
77350: PPUSH
77351: PPUSH
77352: PPUSH
// if not mc_bases then
77353: LD_EXP 36
77357: NOT
77358: IFFALSE 77362
// exit ;
77360: GO 77944
// for i = 1 to mc_bases do
77362: LD_ADDR_VAR 0 2
77366: PUSH
77367: DOUBLE
77368: LD_INT 1
77370: DEC
77371: ST_TO_ADDR
77372: LD_EXP 36
77376: PUSH
77377: FOR_TO
77378: IFFALSE 77942
// begin if not mc_bases [ i ] then
77380: LD_EXP 36
77384: PUSH
77385: LD_VAR 0 2
77389: ARRAY
77390: NOT
77391: IFFALSE 77395
// continue ;
77393: GO 77377
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
77395: LD_ADDR_VAR 0 7
77399: PUSH
77400: LD_EXP 36
77404: PUSH
77405: LD_VAR 0 2
77409: ARRAY
77410: PUSH
77411: LD_INT 1
77413: ARRAY
77414: PPUSH
77415: CALL 22968 0 1
77419: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
77420: LD_ADDR_EXP 59
77424: PUSH
77425: LD_EXP 59
77429: PPUSH
77430: LD_VAR 0 2
77434: PPUSH
77435: LD_EXP 36
77439: PUSH
77440: LD_VAR 0 2
77444: ARRAY
77445: PUSH
77446: LD_INT 1
77448: ARRAY
77449: PPUSH
77450: CALL_OW 255
77454: PPUSH
77455: LD_EXP 61
77459: PUSH
77460: LD_VAR 0 2
77464: ARRAY
77465: PPUSH
77466: CALL 20965 0 2
77470: PPUSH
77471: CALL_OW 1
77475: ST_TO_ADDR
// if not mc_scan [ i ] then
77476: LD_EXP 59
77480: PUSH
77481: LD_VAR 0 2
77485: ARRAY
77486: NOT
77487: IFFALSE 77642
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77489: LD_ADDR_VAR 0 4
77493: PUSH
77494: LD_EXP 36
77498: PUSH
77499: LD_VAR 0 2
77503: ARRAY
77504: PPUSH
77505: LD_INT 2
77507: PUSH
77508: LD_INT 25
77510: PUSH
77511: LD_INT 5
77513: PUSH
77514: EMPTY
77515: LIST
77516: LIST
77517: PUSH
77518: LD_INT 25
77520: PUSH
77521: LD_INT 8
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: PUSH
77528: LD_INT 25
77530: PUSH
77531: LD_INT 9
77533: PUSH
77534: EMPTY
77535: LIST
77536: LIST
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: LIST
77542: LIST
77543: PPUSH
77544: CALL_OW 72
77548: ST_TO_ADDR
// if not tmp then
77549: LD_VAR 0 4
77553: NOT
77554: IFFALSE 77558
// continue ;
77556: GO 77377
// for j in tmp do
77558: LD_ADDR_VAR 0 3
77562: PUSH
77563: LD_VAR 0 4
77567: PUSH
77568: FOR_IN
77569: IFFALSE 77640
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
77571: LD_VAR 0 3
77575: PPUSH
77576: CALL_OW 310
77580: PPUSH
77581: CALL_OW 266
77585: PUSH
77586: LD_INT 5
77588: EQUAL
77589: PUSH
77590: LD_VAR 0 3
77594: PPUSH
77595: CALL_OW 257
77599: PUSH
77600: LD_INT 1
77602: EQUAL
77603: AND
77604: PUSH
77605: LD_VAR 0 3
77609: PPUSH
77610: CALL_OW 459
77614: NOT
77615: AND
77616: PUSH
77617: LD_VAR 0 7
77621: AND
77622: IFFALSE 77638
// ComChangeProfession ( j , class ) ;
77624: LD_VAR 0 3
77628: PPUSH
77629: LD_VAR 0 7
77633: PPUSH
77634: CALL_OW 123
77638: GO 77568
77640: POP
77641: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
77642: LD_EXP 59
77646: PUSH
77647: LD_VAR 0 2
77651: ARRAY
77652: PUSH
77653: LD_EXP 58
77657: PUSH
77658: LD_VAR 0 2
77662: ARRAY
77663: NOT
77664: AND
77665: PUSH
77666: LD_EXP 36
77670: PUSH
77671: LD_VAR 0 2
77675: ARRAY
77676: PPUSH
77677: LD_INT 30
77679: PUSH
77680: LD_INT 32
77682: PUSH
77683: EMPTY
77684: LIST
77685: LIST
77686: PPUSH
77687: CALL_OW 72
77691: NOT
77692: AND
77693: PUSH
77694: LD_EXP 36
77698: PUSH
77699: LD_VAR 0 2
77703: ARRAY
77704: PPUSH
77705: LD_INT 2
77707: PUSH
77708: LD_INT 30
77710: PUSH
77711: LD_INT 4
77713: PUSH
77714: EMPTY
77715: LIST
77716: LIST
77717: PUSH
77718: LD_INT 30
77720: PUSH
77721: LD_INT 5
77723: PUSH
77724: EMPTY
77725: LIST
77726: LIST
77727: PUSH
77728: EMPTY
77729: LIST
77730: LIST
77731: LIST
77732: PPUSH
77733: CALL_OW 72
77737: NOT
77738: AND
77739: IFFALSE 77871
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77741: LD_ADDR_VAR 0 4
77745: PUSH
77746: LD_EXP 36
77750: PUSH
77751: LD_VAR 0 2
77755: ARRAY
77756: PPUSH
77757: LD_INT 2
77759: PUSH
77760: LD_INT 25
77762: PUSH
77763: LD_INT 1
77765: PUSH
77766: EMPTY
77767: LIST
77768: LIST
77769: PUSH
77770: LD_INT 25
77772: PUSH
77773: LD_INT 5
77775: PUSH
77776: EMPTY
77777: LIST
77778: LIST
77779: PUSH
77780: LD_INT 25
77782: PUSH
77783: LD_INT 8
77785: PUSH
77786: EMPTY
77787: LIST
77788: LIST
77789: PUSH
77790: LD_INT 25
77792: PUSH
77793: LD_INT 9
77795: PUSH
77796: EMPTY
77797: LIST
77798: LIST
77799: PUSH
77800: EMPTY
77801: LIST
77802: LIST
77803: LIST
77804: LIST
77805: LIST
77806: PPUSH
77807: CALL_OW 72
77811: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
77812: LD_ADDR_VAR 0 4
77816: PUSH
77817: LD_VAR 0 4
77821: PUSH
77822: LD_VAR 0 4
77826: PPUSH
77827: LD_INT 18
77829: PPUSH
77830: CALL 59331 0 2
77834: DIFF
77835: ST_TO_ADDR
// if tmp then
77836: LD_VAR 0 4
77840: IFFALSE 77871
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
77842: LD_VAR 0 2
77846: PPUSH
77847: LD_VAR 0 4
77851: PPUSH
77852: LD_EXP 61
77856: PUSH
77857: LD_VAR 0 2
77861: ARRAY
77862: PPUSH
77863: CALL 21000 0 3
// exit ;
77867: POP
77868: POP
77869: GO 77944
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
77871: LD_EXP 59
77875: PUSH
77876: LD_VAR 0 2
77880: ARRAY
77881: PUSH
77882: LD_EXP 58
77886: PUSH
77887: LD_VAR 0 2
77891: ARRAY
77892: AND
77893: IFFALSE 77940
// begin tmp := mc_defender [ i ] ;
77895: LD_ADDR_VAR 0 4
77899: PUSH
77900: LD_EXP 58
77904: PUSH
77905: LD_VAR 0 2
77909: ARRAY
77910: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
77911: LD_VAR 0 2
77915: PPUSH
77916: LD_VAR 0 4
77920: PPUSH
77921: LD_EXP 59
77925: PUSH
77926: LD_VAR 0 2
77930: ARRAY
77931: PPUSH
77932: CALL 21498 0 3
// exit ;
77936: POP
77937: POP
77938: GO 77944
// end ; end ;
77940: GO 77377
77942: POP
77943: POP
// end ;
77944: LD_VAR 0 1
77948: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
77949: LD_INT 0
77951: PPUSH
77952: PPUSH
77953: PPUSH
77954: PPUSH
77955: PPUSH
77956: PPUSH
77957: PPUSH
77958: PPUSH
77959: PPUSH
77960: PPUSH
77961: PPUSH
// if not mc_bases then
77962: LD_EXP 36
77966: NOT
77967: IFFALSE 77971
// exit ;
77969: GO 79058
// for i = 1 to mc_bases do
77971: LD_ADDR_VAR 0 2
77975: PUSH
77976: DOUBLE
77977: LD_INT 1
77979: DEC
77980: ST_TO_ADDR
77981: LD_EXP 36
77985: PUSH
77986: FOR_TO
77987: IFFALSE 79056
// begin tmp := mc_lab [ i ] ;
77989: LD_ADDR_VAR 0 6
77993: PUSH
77994: LD_EXP 69
77998: PUSH
77999: LD_VAR 0 2
78003: ARRAY
78004: ST_TO_ADDR
// if not tmp then
78005: LD_VAR 0 6
78009: NOT
78010: IFFALSE 78014
// continue ;
78012: GO 77986
// idle_lab := 0 ;
78014: LD_ADDR_VAR 0 11
78018: PUSH
78019: LD_INT 0
78021: ST_TO_ADDR
// for j in tmp do
78022: LD_ADDR_VAR 0 3
78026: PUSH
78027: LD_VAR 0 6
78031: PUSH
78032: FOR_IN
78033: IFFALSE 79052
// begin researching := false ;
78035: LD_ADDR_VAR 0 10
78039: PUSH
78040: LD_INT 0
78042: ST_TO_ADDR
// side := GetSide ( j ) ;
78043: LD_ADDR_VAR 0 4
78047: PUSH
78048: LD_VAR 0 3
78052: PPUSH
78053: CALL_OW 255
78057: ST_TO_ADDR
// if not mc_tech [ side ] then
78058: LD_EXP 63
78062: PUSH
78063: LD_VAR 0 4
78067: ARRAY
78068: NOT
78069: IFFALSE 78073
// continue ;
78071: GO 78032
// if BuildingStatus ( j ) = bs_idle then
78073: LD_VAR 0 3
78077: PPUSH
78078: CALL_OW 461
78082: PUSH
78083: LD_INT 2
78085: EQUAL
78086: IFFALSE 78274
// begin if idle_lab and UnitsInside ( j ) < 6 then
78088: LD_VAR 0 11
78092: PUSH
78093: LD_VAR 0 3
78097: PPUSH
78098: CALL_OW 313
78102: PUSH
78103: LD_INT 6
78105: LESS
78106: AND
78107: IFFALSE 78178
// begin tmp2 := UnitsInside ( idle_lab ) ;
78109: LD_ADDR_VAR 0 9
78113: PUSH
78114: LD_VAR 0 11
78118: PPUSH
78119: CALL_OW 313
78123: ST_TO_ADDR
// if tmp2 then
78124: LD_VAR 0 9
78128: IFFALSE 78170
// for x in tmp2 do
78130: LD_ADDR_VAR 0 7
78134: PUSH
78135: LD_VAR 0 9
78139: PUSH
78140: FOR_IN
78141: IFFALSE 78168
// begin ComExitBuilding ( x ) ;
78143: LD_VAR 0 7
78147: PPUSH
78148: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
78152: LD_VAR 0 7
78156: PPUSH
78157: LD_VAR 0 3
78161: PPUSH
78162: CALL_OW 180
// end ;
78166: GO 78140
78168: POP
78169: POP
// idle_lab := 0 ;
78170: LD_ADDR_VAR 0 11
78174: PUSH
78175: LD_INT 0
78177: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
78178: LD_ADDR_VAR 0 5
78182: PUSH
78183: LD_EXP 63
78187: PUSH
78188: LD_VAR 0 4
78192: ARRAY
78193: PUSH
78194: FOR_IN
78195: IFFALSE 78255
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
78197: LD_VAR 0 3
78201: PPUSH
78202: LD_VAR 0 5
78206: PPUSH
78207: CALL_OW 430
78211: PUSH
78212: LD_VAR 0 4
78216: PPUSH
78217: LD_VAR 0 5
78221: PPUSH
78222: CALL 20070 0 2
78226: AND
78227: IFFALSE 78253
// begin researching := true ;
78229: LD_ADDR_VAR 0 10
78233: PUSH
78234: LD_INT 1
78236: ST_TO_ADDR
// ComResearch ( j , t ) ;
78237: LD_VAR 0 3
78241: PPUSH
78242: LD_VAR 0 5
78246: PPUSH
78247: CALL_OW 124
// break ;
78251: GO 78255
// end ;
78253: GO 78194
78255: POP
78256: POP
// if not researching then
78257: LD_VAR 0 10
78261: NOT
78262: IFFALSE 78274
// idle_lab := j ;
78264: LD_ADDR_VAR 0 11
78268: PUSH
78269: LD_VAR 0 3
78273: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
78274: LD_VAR 0 3
78278: PPUSH
78279: CALL_OW 461
78283: PUSH
78284: LD_INT 10
78286: EQUAL
78287: IFFALSE 78875
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
78289: LD_EXP 65
78293: PUSH
78294: LD_VAR 0 2
78298: ARRAY
78299: NOT
78300: PUSH
78301: LD_EXP 66
78305: PUSH
78306: LD_VAR 0 2
78310: ARRAY
78311: NOT
78312: AND
78313: PUSH
78314: LD_EXP 63
78318: PUSH
78319: LD_VAR 0 4
78323: ARRAY
78324: PUSH
78325: LD_INT 1
78327: GREATER
78328: AND
78329: IFFALSE 78460
// begin ComCancel ( j ) ;
78331: LD_VAR 0 3
78335: PPUSH
78336: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
78340: LD_ADDR_EXP 63
78344: PUSH
78345: LD_EXP 63
78349: PPUSH
78350: LD_VAR 0 4
78354: PPUSH
78355: LD_EXP 63
78359: PUSH
78360: LD_VAR 0 4
78364: ARRAY
78365: PPUSH
78366: LD_EXP 63
78370: PUSH
78371: LD_VAR 0 4
78375: ARRAY
78376: PUSH
78377: LD_INT 1
78379: MINUS
78380: PPUSH
78381: LD_EXP 63
78385: PUSH
78386: LD_VAR 0 4
78390: ARRAY
78391: PPUSH
78392: LD_INT 0
78394: PPUSH
78395: CALL 25489 0 4
78399: PPUSH
78400: CALL_OW 1
78404: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
78405: LD_ADDR_EXP 63
78409: PUSH
78410: LD_EXP 63
78414: PPUSH
78415: LD_VAR 0 4
78419: PPUSH
78420: LD_EXP 63
78424: PUSH
78425: LD_VAR 0 4
78429: ARRAY
78430: PPUSH
78431: LD_EXP 63
78435: PUSH
78436: LD_VAR 0 4
78440: ARRAY
78441: PPUSH
78442: LD_INT 1
78444: PPUSH
78445: LD_INT 0
78447: PPUSH
78448: CALL 25489 0 4
78452: PPUSH
78453: CALL_OW 1
78457: ST_TO_ADDR
// continue ;
78458: GO 78032
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
78460: LD_EXP 65
78464: PUSH
78465: LD_VAR 0 2
78469: ARRAY
78470: PUSH
78471: LD_EXP 66
78475: PUSH
78476: LD_VAR 0 2
78480: ARRAY
78481: NOT
78482: AND
78483: IFFALSE 78610
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
78485: LD_ADDR_EXP 66
78489: PUSH
78490: LD_EXP 66
78494: PPUSH
78495: LD_VAR 0 2
78499: PUSH
78500: LD_EXP 66
78504: PUSH
78505: LD_VAR 0 2
78509: ARRAY
78510: PUSH
78511: LD_INT 1
78513: PLUS
78514: PUSH
78515: EMPTY
78516: LIST
78517: LIST
78518: PPUSH
78519: LD_EXP 65
78523: PUSH
78524: LD_VAR 0 2
78528: ARRAY
78529: PUSH
78530: LD_INT 1
78532: ARRAY
78533: PPUSH
78534: CALL 26071 0 3
78538: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
78539: LD_EXP 65
78543: PUSH
78544: LD_VAR 0 2
78548: ARRAY
78549: PUSH
78550: LD_INT 1
78552: ARRAY
78553: PPUSH
78554: LD_INT 112
78556: PPUSH
78557: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
78561: LD_ADDR_VAR 0 9
78565: PUSH
78566: LD_EXP 65
78570: PUSH
78571: LD_VAR 0 2
78575: ARRAY
78576: PPUSH
78577: LD_INT 1
78579: PPUSH
78580: CALL_OW 3
78584: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
78585: LD_ADDR_EXP 65
78589: PUSH
78590: LD_EXP 65
78594: PPUSH
78595: LD_VAR 0 2
78599: PPUSH
78600: LD_VAR 0 9
78604: PPUSH
78605: CALL_OW 1
78609: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
78610: LD_EXP 65
78614: PUSH
78615: LD_VAR 0 2
78619: ARRAY
78620: PUSH
78621: LD_EXP 66
78625: PUSH
78626: LD_VAR 0 2
78630: ARRAY
78631: AND
78632: PUSH
78633: LD_EXP 66
78637: PUSH
78638: LD_VAR 0 2
78642: ARRAY
78643: PUSH
78644: LD_INT 1
78646: ARRAY
78647: PPUSH
78648: CALL_OW 310
78652: NOT
78653: AND
78654: PUSH
78655: LD_VAR 0 3
78659: PPUSH
78660: CALL_OW 313
78664: PUSH
78665: LD_INT 6
78667: EQUAL
78668: AND
78669: IFFALSE 78725
// begin tmp2 := UnitsInside ( j ) ;
78671: LD_ADDR_VAR 0 9
78675: PUSH
78676: LD_VAR 0 3
78680: PPUSH
78681: CALL_OW 313
78685: ST_TO_ADDR
// if tmp2 = 6 then
78686: LD_VAR 0 9
78690: PUSH
78691: LD_INT 6
78693: EQUAL
78694: IFFALSE 78725
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
78696: LD_VAR 0 9
78700: PUSH
78701: LD_INT 1
78703: ARRAY
78704: PPUSH
78705: LD_INT 112
78707: PPUSH
78708: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
78712: LD_VAR 0 9
78716: PUSH
78717: LD_INT 1
78719: ARRAY
78720: PPUSH
78721: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
78725: LD_EXP 66
78729: PUSH
78730: LD_VAR 0 2
78734: ARRAY
78735: PUSH
78736: LD_EXP 66
78740: PUSH
78741: LD_VAR 0 2
78745: ARRAY
78746: PUSH
78747: LD_INT 1
78749: ARRAY
78750: PPUSH
78751: CALL_OW 314
78755: NOT
78756: AND
78757: PUSH
78758: LD_EXP 66
78762: PUSH
78763: LD_VAR 0 2
78767: ARRAY
78768: PUSH
78769: LD_INT 1
78771: ARRAY
78772: PPUSH
78773: CALL_OW 310
78777: NOT
78778: AND
78779: IFFALSE 78805
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
78781: LD_EXP 66
78785: PUSH
78786: LD_VAR 0 2
78790: ARRAY
78791: PUSH
78792: LD_INT 1
78794: ARRAY
78795: PPUSH
78796: LD_VAR 0 3
78800: PPUSH
78801: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
78805: LD_EXP 66
78809: PUSH
78810: LD_VAR 0 2
78814: ARRAY
78815: PUSH
78816: LD_INT 1
78818: ARRAY
78819: PPUSH
78820: CALL_OW 310
78824: PUSH
78825: LD_EXP 66
78829: PUSH
78830: LD_VAR 0 2
78834: ARRAY
78835: PUSH
78836: LD_INT 1
78838: ARRAY
78839: PPUSH
78840: CALL_OW 310
78844: PPUSH
78845: CALL_OW 461
78849: PUSH
78850: LD_INT 3
78852: NONEQUAL
78853: AND
78854: IFFALSE 78875
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
78856: LD_EXP 66
78860: PUSH
78861: LD_VAR 0 2
78865: ARRAY
78866: PUSH
78867: LD_INT 1
78869: ARRAY
78870: PPUSH
78871: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
78875: LD_VAR 0 3
78879: PPUSH
78880: CALL_OW 461
78884: PUSH
78885: LD_INT 6
78887: EQUAL
78888: PUSH
78889: LD_VAR 0 6
78893: PUSH
78894: LD_INT 1
78896: GREATER
78897: AND
78898: IFFALSE 79050
// begin sci := [ ] ;
78900: LD_ADDR_VAR 0 8
78904: PUSH
78905: EMPTY
78906: ST_TO_ADDR
// for x in ( tmp diff j ) do
78907: LD_ADDR_VAR 0 7
78911: PUSH
78912: LD_VAR 0 6
78916: PUSH
78917: LD_VAR 0 3
78921: DIFF
78922: PUSH
78923: FOR_IN
78924: IFFALSE 78976
// begin if sci = 6 then
78926: LD_VAR 0 8
78930: PUSH
78931: LD_INT 6
78933: EQUAL
78934: IFFALSE 78938
// break ;
78936: GO 78976
// if BuildingStatus ( x ) = bs_idle then
78938: LD_VAR 0 7
78942: PPUSH
78943: CALL_OW 461
78947: PUSH
78948: LD_INT 2
78950: EQUAL
78951: IFFALSE 78974
// sci := sci ^ UnitsInside ( x ) ;
78953: LD_ADDR_VAR 0 8
78957: PUSH
78958: LD_VAR 0 8
78962: PUSH
78963: LD_VAR 0 7
78967: PPUSH
78968: CALL_OW 313
78972: ADD
78973: ST_TO_ADDR
// end ;
78974: GO 78923
78976: POP
78977: POP
// if not sci then
78978: LD_VAR 0 8
78982: NOT
78983: IFFALSE 78987
// continue ;
78985: GO 78032
// for x in sci do
78987: LD_ADDR_VAR 0 7
78991: PUSH
78992: LD_VAR 0 8
78996: PUSH
78997: FOR_IN
78998: IFFALSE 79048
// if IsInUnit ( x ) and not HasTask ( x ) then
79000: LD_VAR 0 7
79004: PPUSH
79005: CALL_OW 310
79009: PUSH
79010: LD_VAR 0 7
79014: PPUSH
79015: CALL_OW 314
79019: NOT
79020: AND
79021: IFFALSE 79046
// begin ComExitBuilding ( x ) ;
79023: LD_VAR 0 7
79027: PPUSH
79028: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79032: LD_VAR 0 7
79036: PPUSH
79037: LD_VAR 0 3
79041: PPUSH
79042: CALL_OW 180
// end ;
79046: GO 78997
79048: POP
79049: POP
// end ; end ;
79050: GO 78032
79052: POP
79053: POP
// end ;
79054: GO 77986
79056: POP
79057: POP
// end ;
79058: LD_VAR 0 1
79062: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
79063: LD_INT 0
79065: PPUSH
79066: PPUSH
// if not mc_bases then
79067: LD_EXP 36
79071: NOT
79072: IFFALSE 79076
// exit ;
79074: GO 79157
// for i = 1 to mc_bases do
79076: LD_ADDR_VAR 0 2
79080: PUSH
79081: DOUBLE
79082: LD_INT 1
79084: DEC
79085: ST_TO_ADDR
79086: LD_EXP 36
79090: PUSH
79091: FOR_TO
79092: IFFALSE 79155
// if mc_mines [ i ] and mc_miners [ i ] then
79094: LD_EXP 49
79098: PUSH
79099: LD_VAR 0 2
79103: ARRAY
79104: PUSH
79105: LD_EXP 50
79109: PUSH
79110: LD_VAR 0 2
79114: ARRAY
79115: AND
79116: IFFALSE 79153
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
79118: LD_EXP 50
79122: PUSH
79123: LD_VAR 0 2
79127: ARRAY
79128: PUSH
79129: LD_INT 1
79131: ARRAY
79132: PPUSH
79133: CALL_OW 255
79137: PPUSH
79138: LD_EXP 49
79142: PUSH
79143: LD_VAR 0 2
79147: ARRAY
79148: PPUSH
79149: CALL 23121 0 2
79153: GO 79091
79155: POP
79156: POP
// end ;
79157: LD_VAR 0 1
79161: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
79162: LD_INT 0
79164: PPUSH
79165: PPUSH
79166: PPUSH
79167: PPUSH
79168: PPUSH
79169: PPUSH
79170: PPUSH
79171: PPUSH
// if not mc_bases or not mc_parking then
79172: LD_EXP 36
79176: NOT
79177: PUSH
79178: LD_EXP 60
79182: NOT
79183: OR
79184: IFFALSE 79188
// exit ;
79186: GO 79864
// for i = 1 to mc_bases do
79188: LD_ADDR_VAR 0 2
79192: PUSH
79193: DOUBLE
79194: LD_INT 1
79196: DEC
79197: ST_TO_ADDR
79198: LD_EXP 36
79202: PUSH
79203: FOR_TO
79204: IFFALSE 79862
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
79206: LD_EXP 36
79210: PUSH
79211: LD_VAR 0 2
79215: ARRAY
79216: NOT
79217: PUSH
79218: LD_EXP 60
79222: PUSH
79223: LD_VAR 0 2
79227: ARRAY
79228: NOT
79229: OR
79230: IFFALSE 79234
// continue ;
79232: GO 79203
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
79234: LD_ADDR_VAR 0 5
79238: PUSH
79239: LD_EXP 36
79243: PUSH
79244: LD_VAR 0 2
79248: ARRAY
79249: PUSH
79250: LD_INT 1
79252: ARRAY
79253: PPUSH
79254: CALL_OW 255
79258: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79259: LD_ADDR_VAR 0 6
79263: PUSH
79264: LD_EXP 36
79268: PUSH
79269: LD_VAR 0 2
79273: ARRAY
79274: PPUSH
79275: LD_INT 30
79277: PUSH
79278: LD_INT 3
79280: PUSH
79281: EMPTY
79282: LIST
79283: LIST
79284: PPUSH
79285: CALL_OW 72
79289: ST_TO_ADDR
// if not fac then
79290: LD_VAR 0 6
79294: NOT
79295: IFFALSE 79346
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79297: LD_ADDR_VAR 0 6
79301: PUSH
79302: LD_EXP 36
79306: PUSH
79307: LD_VAR 0 2
79311: ARRAY
79312: PPUSH
79313: LD_INT 2
79315: PUSH
79316: LD_INT 30
79318: PUSH
79319: LD_INT 0
79321: PUSH
79322: EMPTY
79323: LIST
79324: LIST
79325: PUSH
79326: LD_INT 30
79328: PUSH
79329: LD_INT 1
79331: PUSH
79332: EMPTY
79333: LIST
79334: LIST
79335: PUSH
79336: EMPTY
79337: LIST
79338: LIST
79339: LIST
79340: PPUSH
79341: CALL_OW 72
79345: ST_TO_ADDR
// if not fac then
79346: LD_VAR 0 6
79350: NOT
79351: IFFALSE 79355
// continue ;
79353: GO 79203
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
79355: LD_ADDR_VAR 0 7
79359: PUSH
79360: LD_EXP 60
79364: PUSH
79365: LD_VAR 0 2
79369: ARRAY
79370: PPUSH
79371: LD_INT 22
79373: PUSH
79374: LD_VAR 0 5
79378: PUSH
79379: EMPTY
79380: LIST
79381: LIST
79382: PUSH
79383: LD_INT 21
79385: PUSH
79386: LD_INT 2
79388: PUSH
79389: EMPTY
79390: LIST
79391: LIST
79392: PUSH
79393: LD_INT 3
79395: PUSH
79396: LD_INT 24
79398: PUSH
79399: LD_INT 1000
79401: PUSH
79402: EMPTY
79403: LIST
79404: LIST
79405: PUSH
79406: EMPTY
79407: LIST
79408: LIST
79409: PUSH
79410: EMPTY
79411: LIST
79412: LIST
79413: LIST
79414: PPUSH
79415: CALL_OW 70
79419: PUSH
79420: LD_INT 22
79422: PUSH
79423: LD_VAR 0 5
79427: PUSH
79428: EMPTY
79429: LIST
79430: LIST
79431: PUSH
79432: LD_INT 91
79434: PUSH
79435: LD_VAR 0 6
79439: PUSH
79440: LD_INT 1
79442: ARRAY
79443: PUSH
79444: LD_INT 25
79446: PUSH
79447: EMPTY
79448: LIST
79449: LIST
79450: LIST
79451: PUSH
79452: LD_INT 21
79454: PUSH
79455: LD_INT 2
79457: PUSH
79458: EMPTY
79459: LIST
79460: LIST
79461: PUSH
79462: LD_INT 3
79464: PUSH
79465: LD_INT 24
79467: PUSH
79468: LD_INT 1000
79470: PUSH
79471: EMPTY
79472: LIST
79473: LIST
79474: PUSH
79475: EMPTY
79476: LIST
79477: LIST
79478: PUSH
79479: EMPTY
79480: LIST
79481: LIST
79482: LIST
79483: LIST
79484: PPUSH
79485: CALL_OW 69
79489: UNION
79490: ST_TO_ADDR
// if not vehs then
79491: LD_VAR 0 7
79495: NOT
79496: IFFALSE 79522
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
79498: LD_ADDR_EXP 48
79502: PUSH
79503: LD_EXP 48
79507: PPUSH
79508: LD_VAR 0 2
79512: PPUSH
79513: EMPTY
79514: PPUSH
79515: CALL_OW 1
79519: ST_TO_ADDR
// continue ;
79520: GO 79203
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79522: LD_ADDR_VAR 0 8
79526: PUSH
79527: LD_EXP 36
79531: PUSH
79532: LD_VAR 0 2
79536: ARRAY
79537: PPUSH
79538: LD_INT 30
79540: PUSH
79541: LD_INT 3
79543: PUSH
79544: EMPTY
79545: LIST
79546: LIST
79547: PPUSH
79548: CALL_OW 72
79552: ST_TO_ADDR
// if tmp then
79553: LD_VAR 0 8
79557: IFFALSE 79660
// begin for j in tmp do
79559: LD_ADDR_VAR 0 3
79563: PUSH
79564: LD_VAR 0 8
79568: PUSH
79569: FOR_IN
79570: IFFALSE 79658
// for k in UnitsInside ( j ) do
79572: LD_ADDR_VAR 0 4
79576: PUSH
79577: LD_VAR 0 3
79581: PPUSH
79582: CALL_OW 313
79586: PUSH
79587: FOR_IN
79588: IFFALSE 79654
// if k then
79590: LD_VAR 0 4
79594: IFFALSE 79652
// if not k in mc_repair_vehicle [ i ] then
79596: LD_VAR 0 4
79600: PUSH
79601: LD_EXP 48
79605: PUSH
79606: LD_VAR 0 2
79610: ARRAY
79611: IN
79612: NOT
79613: IFFALSE 79652
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
79615: LD_ADDR_EXP 48
79619: PUSH
79620: LD_EXP 48
79624: PPUSH
79625: LD_VAR 0 2
79629: PPUSH
79630: LD_EXP 48
79634: PUSH
79635: LD_VAR 0 2
79639: ARRAY
79640: PUSH
79641: LD_VAR 0 4
79645: UNION
79646: PPUSH
79647: CALL_OW 1
79651: ST_TO_ADDR
79652: GO 79587
79654: POP
79655: POP
79656: GO 79569
79658: POP
79659: POP
// end ; if not mc_repair_vehicle [ i ] then
79660: LD_EXP 48
79664: PUSH
79665: LD_VAR 0 2
79669: ARRAY
79670: NOT
79671: IFFALSE 79675
// continue ;
79673: GO 79203
// for j in mc_repair_vehicle [ i ] do
79675: LD_ADDR_VAR 0 3
79679: PUSH
79680: LD_EXP 48
79684: PUSH
79685: LD_VAR 0 2
79689: ARRAY
79690: PUSH
79691: FOR_IN
79692: IFFALSE 79858
// begin if GetClass ( j ) <> 3 then
79694: LD_VAR 0 3
79698: PPUSH
79699: CALL_OW 257
79703: PUSH
79704: LD_INT 3
79706: NONEQUAL
79707: IFFALSE 79748
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
79709: LD_ADDR_EXP 48
79713: PUSH
79714: LD_EXP 48
79718: PPUSH
79719: LD_VAR 0 2
79723: PPUSH
79724: LD_EXP 48
79728: PUSH
79729: LD_VAR 0 2
79733: ARRAY
79734: PUSH
79735: LD_VAR 0 3
79739: DIFF
79740: PPUSH
79741: CALL_OW 1
79745: ST_TO_ADDR
// continue ;
79746: GO 79691
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
79748: LD_VAR 0 3
79752: PPUSH
79753: CALL_OW 311
79757: NOT
79758: PUSH
79759: LD_VAR 0 3
79763: PUSH
79764: LD_EXP 39
79768: PUSH
79769: LD_VAR 0 2
79773: ARRAY
79774: PUSH
79775: LD_INT 1
79777: ARRAY
79778: IN
79779: NOT
79780: AND
79781: PUSH
79782: LD_VAR 0 3
79786: PUSH
79787: LD_EXP 39
79791: PUSH
79792: LD_VAR 0 2
79796: ARRAY
79797: PUSH
79798: LD_INT 2
79800: ARRAY
79801: IN
79802: NOT
79803: AND
79804: IFFALSE 79856
// begin if IsInUnit ( j ) then
79806: LD_VAR 0 3
79810: PPUSH
79811: CALL_OW 310
79815: IFFALSE 79826
// ComExitBuilding ( j ) ;
79817: LD_VAR 0 3
79821: PPUSH
79822: CALL_OW 122
// if not HasTask ( j ) then
79826: LD_VAR 0 3
79830: PPUSH
79831: CALL_OW 314
79835: NOT
79836: IFFALSE 79856
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
79838: LD_VAR 0 3
79842: PPUSH
79843: LD_VAR 0 7
79847: PUSH
79848: LD_INT 1
79850: ARRAY
79851: PPUSH
79852: CALL_OW 189
// end ; end ;
79856: GO 79691
79858: POP
79859: POP
// end ;
79860: GO 79203
79862: POP
79863: POP
// end ;
79864: LD_VAR 0 1
79868: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
79869: LD_INT 0
79871: PPUSH
79872: PPUSH
79873: PPUSH
79874: PPUSH
79875: PPUSH
79876: PPUSH
79877: PPUSH
79878: PPUSH
79879: PPUSH
79880: PPUSH
79881: PPUSH
// if not mc_bases then
79882: LD_EXP 36
79886: NOT
79887: IFFALSE 79891
// exit ;
79889: GO 80693
// for i = 1 to mc_bases do
79891: LD_ADDR_VAR 0 2
79895: PUSH
79896: DOUBLE
79897: LD_INT 1
79899: DEC
79900: ST_TO_ADDR
79901: LD_EXP 36
79905: PUSH
79906: FOR_TO
79907: IFFALSE 80691
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
79909: LD_EXP 64
79913: PUSH
79914: LD_VAR 0 2
79918: ARRAY
79919: NOT
79920: PUSH
79921: LD_EXP 39
79925: PUSH
79926: LD_VAR 0 2
79930: ARRAY
79931: PUSH
79932: LD_INT 1
79934: ARRAY
79935: OR
79936: PUSH
79937: LD_EXP 39
79941: PUSH
79942: LD_VAR 0 2
79946: ARRAY
79947: PUSH
79948: LD_INT 2
79950: ARRAY
79951: OR
79952: PUSH
79953: LD_EXP 62
79957: PUSH
79958: LD_VAR 0 2
79962: ARRAY
79963: PPUSH
79964: LD_INT 1
79966: PPUSH
79967: CALL_OW 325
79971: NOT
79972: OR
79973: PUSH
79974: LD_EXP 59
79978: PUSH
79979: LD_VAR 0 2
79983: ARRAY
79984: OR
79985: IFFALSE 79989
// continue ;
79987: GO 79906
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
79989: LD_ADDR_VAR 0 8
79993: PUSH
79994: LD_EXP 36
79998: PUSH
79999: LD_VAR 0 2
80003: ARRAY
80004: PPUSH
80005: LD_INT 25
80007: PUSH
80008: LD_INT 4
80010: PUSH
80011: EMPTY
80012: LIST
80013: LIST
80014: PUSH
80015: LD_INT 50
80017: PUSH
80018: EMPTY
80019: LIST
80020: PUSH
80021: LD_INT 3
80023: PUSH
80024: LD_INT 60
80026: PUSH
80027: EMPTY
80028: LIST
80029: PUSH
80030: EMPTY
80031: LIST
80032: LIST
80033: PUSH
80034: EMPTY
80035: LIST
80036: LIST
80037: LIST
80038: PPUSH
80039: CALL_OW 72
80043: PUSH
80044: LD_EXP 40
80048: PUSH
80049: LD_VAR 0 2
80053: ARRAY
80054: DIFF
80055: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80056: LD_ADDR_VAR 0 9
80060: PUSH
80061: LD_EXP 36
80065: PUSH
80066: LD_VAR 0 2
80070: ARRAY
80071: PPUSH
80072: LD_INT 2
80074: PUSH
80075: LD_INT 30
80077: PUSH
80078: LD_INT 0
80080: PUSH
80081: EMPTY
80082: LIST
80083: LIST
80084: PUSH
80085: LD_INT 30
80087: PUSH
80088: LD_INT 1
80090: PUSH
80091: EMPTY
80092: LIST
80093: LIST
80094: PUSH
80095: EMPTY
80096: LIST
80097: LIST
80098: LIST
80099: PPUSH
80100: CALL_OW 72
80104: ST_TO_ADDR
// if not tmp or not dep then
80105: LD_VAR 0 8
80109: NOT
80110: PUSH
80111: LD_VAR 0 9
80115: NOT
80116: OR
80117: IFFALSE 80121
// continue ;
80119: GO 79906
// side := GetSide ( tmp [ 1 ] ) ;
80121: LD_ADDR_VAR 0 11
80125: PUSH
80126: LD_VAR 0 8
80130: PUSH
80131: LD_INT 1
80133: ARRAY
80134: PPUSH
80135: CALL_OW 255
80139: ST_TO_ADDR
// dep := dep [ 1 ] ;
80140: LD_ADDR_VAR 0 9
80144: PUSH
80145: LD_VAR 0 9
80149: PUSH
80150: LD_INT 1
80152: ARRAY
80153: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
80154: LD_ADDR_VAR 0 7
80158: PUSH
80159: LD_EXP 64
80163: PUSH
80164: LD_VAR 0 2
80168: ARRAY
80169: PPUSH
80170: LD_INT 22
80172: PUSH
80173: LD_INT 0
80175: PUSH
80176: EMPTY
80177: LIST
80178: LIST
80179: PUSH
80180: LD_INT 25
80182: PUSH
80183: LD_INT 12
80185: PUSH
80186: EMPTY
80187: LIST
80188: LIST
80189: PUSH
80190: EMPTY
80191: LIST
80192: LIST
80193: PPUSH
80194: CALL_OW 70
80198: PUSH
80199: LD_INT 22
80201: PUSH
80202: LD_INT 0
80204: PUSH
80205: EMPTY
80206: LIST
80207: LIST
80208: PUSH
80209: LD_INT 25
80211: PUSH
80212: LD_INT 12
80214: PUSH
80215: EMPTY
80216: LIST
80217: LIST
80218: PUSH
80219: LD_INT 91
80221: PUSH
80222: LD_VAR 0 9
80226: PUSH
80227: LD_INT 20
80229: PUSH
80230: EMPTY
80231: LIST
80232: LIST
80233: LIST
80234: PUSH
80235: EMPTY
80236: LIST
80237: LIST
80238: LIST
80239: PPUSH
80240: CALL_OW 69
80244: UNION
80245: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
80246: LD_ADDR_VAR 0 10
80250: PUSH
80251: LD_EXP 64
80255: PUSH
80256: LD_VAR 0 2
80260: ARRAY
80261: PPUSH
80262: LD_INT 81
80264: PUSH
80265: LD_VAR 0 11
80269: PUSH
80270: EMPTY
80271: LIST
80272: LIST
80273: PPUSH
80274: CALL_OW 70
80278: ST_TO_ADDR
// if not apes or danger_at_area then
80279: LD_VAR 0 7
80283: NOT
80284: PUSH
80285: LD_VAR 0 10
80289: OR
80290: IFFALSE 80340
// begin if mc_taming [ i ] then
80292: LD_EXP 67
80296: PUSH
80297: LD_VAR 0 2
80301: ARRAY
80302: IFFALSE 80338
// begin MC_Reset ( i , 121 ) ;
80304: LD_VAR 0 2
80308: PPUSH
80309: LD_INT 121
80311: PPUSH
80312: CALL 66033 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
80316: LD_ADDR_EXP 67
80320: PUSH
80321: LD_EXP 67
80325: PPUSH
80326: LD_VAR 0 2
80330: PPUSH
80331: EMPTY
80332: PPUSH
80333: CALL_OW 1
80337: ST_TO_ADDR
// end ; continue ;
80338: GO 79906
// end ; for j in tmp do
80340: LD_ADDR_VAR 0 3
80344: PUSH
80345: LD_VAR 0 8
80349: PUSH
80350: FOR_IN
80351: IFFALSE 80687
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
80353: LD_VAR 0 3
80357: PUSH
80358: LD_EXP 67
80362: PUSH
80363: LD_VAR 0 2
80367: ARRAY
80368: IN
80369: NOT
80370: PUSH
80371: LD_EXP 67
80375: PUSH
80376: LD_VAR 0 2
80380: ARRAY
80381: PUSH
80382: LD_INT 3
80384: LESS
80385: AND
80386: IFFALSE 80444
// begin SetTag ( j , 121 ) ;
80388: LD_VAR 0 3
80392: PPUSH
80393: LD_INT 121
80395: PPUSH
80396: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
80400: LD_ADDR_EXP 67
80404: PUSH
80405: LD_EXP 67
80409: PPUSH
80410: LD_VAR 0 2
80414: PUSH
80415: LD_EXP 67
80419: PUSH
80420: LD_VAR 0 2
80424: ARRAY
80425: PUSH
80426: LD_INT 1
80428: PLUS
80429: PUSH
80430: EMPTY
80431: LIST
80432: LIST
80433: PPUSH
80434: LD_VAR 0 3
80438: PPUSH
80439: CALL 26071 0 3
80443: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
80444: LD_VAR 0 3
80448: PUSH
80449: LD_EXP 67
80453: PUSH
80454: LD_VAR 0 2
80458: ARRAY
80459: IN
80460: IFFALSE 80685
// begin if GetClass ( j ) <> 4 then
80462: LD_VAR 0 3
80466: PPUSH
80467: CALL_OW 257
80471: PUSH
80472: LD_INT 4
80474: NONEQUAL
80475: IFFALSE 80528
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
80477: LD_ADDR_EXP 67
80481: PUSH
80482: LD_EXP 67
80486: PPUSH
80487: LD_VAR 0 2
80491: PPUSH
80492: LD_EXP 67
80496: PUSH
80497: LD_VAR 0 2
80501: ARRAY
80502: PUSH
80503: LD_VAR 0 3
80507: DIFF
80508: PPUSH
80509: CALL_OW 1
80513: ST_TO_ADDR
// SetTag ( j , 0 ) ;
80514: LD_VAR 0 3
80518: PPUSH
80519: LD_INT 0
80521: PPUSH
80522: CALL_OW 109
// continue ;
80526: GO 80350
// end ; if IsInUnit ( j ) then
80528: LD_VAR 0 3
80532: PPUSH
80533: CALL_OW 310
80537: IFFALSE 80548
// ComExitBuilding ( j ) ;
80539: LD_VAR 0 3
80543: PPUSH
80544: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
80548: LD_ADDR_VAR 0 6
80552: PUSH
80553: LD_VAR 0 7
80557: PPUSH
80558: LD_VAR 0 3
80562: PPUSH
80563: CALL_OW 74
80567: ST_TO_ADDR
// if not ape then
80568: LD_VAR 0 6
80572: NOT
80573: IFFALSE 80577
// break ;
80575: GO 80687
// x := GetX ( ape ) ;
80577: LD_ADDR_VAR 0 4
80581: PUSH
80582: LD_VAR 0 6
80586: PPUSH
80587: CALL_OW 250
80591: ST_TO_ADDR
// y := GetY ( ape ) ;
80592: LD_ADDR_VAR 0 5
80596: PUSH
80597: LD_VAR 0 6
80601: PPUSH
80602: CALL_OW 251
80606: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
80607: LD_VAR 0 4
80611: PPUSH
80612: LD_VAR 0 5
80616: PPUSH
80617: CALL_OW 488
80621: NOT
80622: PUSH
80623: LD_VAR 0 11
80627: PPUSH
80628: LD_VAR 0 4
80632: PPUSH
80633: LD_VAR 0 5
80637: PPUSH
80638: LD_INT 20
80640: PPUSH
80641: CALL 26967 0 4
80645: PUSH
80646: LD_INT 4
80648: ARRAY
80649: OR
80650: IFFALSE 80654
// break ;
80652: GO 80687
// if not HasTask ( j ) then
80654: LD_VAR 0 3
80658: PPUSH
80659: CALL_OW 314
80663: NOT
80664: IFFALSE 80685
// ComTameXY ( j , x , y ) ;
80666: LD_VAR 0 3
80670: PPUSH
80671: LD_VAR 0 4
80675: PPUSH
80676: LD_VAR 0 5
80680: PPUSH
80681: CALL_OW 131
// end ; end ;
80685: GO 80350
80687: POP
80688: POP
// end ;
80689: GO 79906
80691: POP
80692: POP
// end ;
80693: LD_VAR 0 1
80697: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
80698: LD_INT 0
80700: PPUSH
80701: PPUSH
80702: PPUSH
80703: PPUSH
80704: PPUSH
80705: PPUSH
80706: PPUSH
80707: PPUSH
// if not mc_bases then
80708: LD_EXP 36
80712: NOT
80713: IFFALSE 80717
// exit ;
80715: GO 81343
// for i = 1 to mc_bases do
80717: LD_ADDR_VAR 0 2
80721: PUSH
80722: DOUBLE
80723: LD_INT 1
80725: DEC
80726: ST_TO_ADDR
80727: LD_EXP 36
80731: PUSH
80732: FOR_TO
80733: IFFALSE 81341
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
80735: LD_EXP 65
80739: PUSH
80740: LD_VAR 0 2
80744: ARRAY
80745: NOT
80746: PUSH
80747: LD_EXP 65
80751: PUSH
80752: LD_VAR 0 2
80756: ARRAY
80757: PPUSH
80758: LD_INT 25
80760: PUSH
80761: LD_INT 12
80763: PUSH
80764: EMPTY
80765: LIST
80766: LIST
80767: PPUSH
80768: CALL_OW 72
80772: NOT
80773: OR
80774: IFFALSE 80778
// continue ;
80776: GO 80732
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
80778: LD_ADDR_VAR 0 5
80782: PUSH
80783: LD_EXP 65
80787: PUSH
80788: LD_VAR 0 2
80792: ARRAY
80793: PUSH
80794: LD_INT 1
80796: ARRAY
80797: PPUSH
80798: CALL_OW 255
80802: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
80803: LD_VAR 0 5
80807: PPUSH
80808: LD_INT 2
80810: PPUSH
80811: CALL_OW 325
80815: IFFALSE 81068
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
80817: LD_ADDR_VAR 0 4
80821: PUSH
80822: LD_EXP 65
80826: PUSH
80827: LD_VAR 0 2
80831: ARRAY
80832: PPUSH
80833: LD_INT 25
80835: PUSH
80836: LD_INT 16
80838: PUSH
80839: EMPTY
80840: LIST
80841: LIST
80842: PPUSH
80843: CALL_OW 72
80847: ST_TO_ADDR
// if tmp < 6 then
80848: LD_VAR 0 4
80852: PUSH
80853: LD_INT 6
80855: LESS
80856: IFFALSE 81068
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80858: LD_ADDR_VAR 0 6
80862: PUSH
80863: LD_EXP 36
80867: PUSH
80868: LD_VAR 0 2
80872: ARRAY
80873: PPUSH
80874: LD_INT 2
80876: PUSH
80877: LD_INT 30
80879: PUSH
80880: LD_INT 0
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: PUSH
80887: LD_INT 30
80889: PUSH
80890: LD_INT 1
80892: PUSH
80893: EMPTY
80894: LIST
80895: LIST
80896: PUSH
80897: EMPTY
80898: LIST
80899: LIST
80900: LIST
80901: PPUSH
80902: CALL_OW 72
80906: ST_TO_ADDR
// if depot then
80907: LD_VAR 0 6
80911: IFFALSE 81068
// begin selected := 0 ;
80913: LD_ADDR_VAR 0 7
80917: PUSH
80918: LD_INT 0
80920: ST_TO_ADDR
// for j in depot do
80921: LD_ADDR_VAR 0 3
80925: PUSH
80926: LD_VAR 0 6
80930: PUSH
80931: FOR_IN
80932: IFFALSE 80963
// begin if UnitsInside ( j ) < 6 then
80934: LD_VAR 0 3
80938: PPUSH
80939: CALL_OW 313
80943: PUSH
80944: LD_INT 6
80946: LESS
80947: IFFALSE 80961
// begin selected := j ;
80949: LD_ADDR_VAR 0 7
80953: PUSH
80954: LD_VAR 0 3
80958: ST_TO_ADDR
// break ;
80959: GO 80963
// end ; end ;
80961: GO 80931
80963: POP
80964: POP
// if selected then
80965: LD_VAR 0 7
80969: IFFALSE 81068
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
80971: LD_ADDR_VAR 0 3
80975: PUSH
80976: LD_EXP 65
80980: PUSH
80981: LD_VAR 0 2
80985: ARRAY
80986: PPUSH
80987: LD_INT 25
80989: PUSH
80990: LD_INT 12
80992: PUSH
80993: EMPTY
80994: LIST
80995: LIST
80996: PPUSH
80997: CALL_OW 72
81001: PUSH
81002: FOR_IN
81003: IFFALSE 81066
// if not HasTask ( j ) then
81005: LD_VAR 0 3
81009: PPUSH
81010: CALL_OW 314
81014: NOT
81015: IFFALSE 81064
// begin if not IsInUnit ( j ) then
81017: LD_VAR 0 3
81021: PPUSH
81022: CALL_OW 310
81026: NOT
81027: IFFALSE 81043
// ComEnterUnit ( j , selected ) ;
81029: LD_VAR 0 3
81033: PPUSH
81034: LD_VAR 0 7
81038: PPUSH
81039: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
81043: LD_VAR 0 3
81047: PPUSH
81048: LD_INT 16
81050: PPUSH
81051: CALL_OW 183
// AddComExitBuilding ( j ) ;
81055: LD_VAR 0 3
81059: PPUSH
81060: CALL_OW 182
// end ;
81064: GO 81002
81066: POP
81067: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
81068: LD_VAR 0 5
81072: PPUSH
81073: LD_INT 11
81075: PPUSH
81076: CALL_OW 325
81080: IFFALSE 81339
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81082: LD_ADDR_VAR 0 4
81086: PUSH
81087: LD_EXP 65
81091: PUSH
81092: LD_VAR 0 2
81096: ARRAY
81097: PPUSH
81098: LD_INT 25
81100: PUSH
81101: LD_INT 16
81103: PUSH
81104: EMPTY
81105: LIST
81106: LIST
81107: PPUSH
81108: CALL_OW 72
81112: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
81113: LD_VAR 0 4
81117: PUSH
81118: LD_INT 6
81120: GREATEREQUAL
81121: PUSH
81122: LD_VAR 0 5
81126: PPUSH
81127: LD_INT 2
81129: PPUSH
81130: CALL_OW 325
81134: NOT
81135: OR
81136: IFFALSE 81339
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81138: LD_ADDR_VAR 0 8
81142: PUSH
81143: LD_EXP 36
81147: PUSH
81148: LD_VAR 0 2
81152: ARRAY
81153: PPUSH
81154: LD_INT 2
81156: PUSH
81157: LD_INT 30
81159: PUSH
81160: LD_INT 4
81162: PUSH
81163: EMPTY
81164: LIST
81165: LIST
81166: PUSH
81167: LD_INT 30
81169: PUSH
81170: LD_INT 5
81172: PUSH
81173: EMPTY
81174: LIST
81175: LIST
81176: PUSH
81177: EMPTY
81178: LIST
81179: LIST
81180: LIST
81181: PPUSH
81182: CALL_OW 72
81186: ST_TO_ADDR
// if barracks then
81187: LD_VAR 0 8
81191: IFFALSE 81339
// begin selected := 0 ;
81193: LD_ADDR_VAR 0 7
81197: PUSH
81198: LD_INT 0
81200: ST_TO_ADDR
// for j in barracks do
81201: LD_ADDR_VAR 0 3
81205: PUSH
81206: LD_VAR 0 8
81210: PUSH
81211: FOR_IN
81212: IFFALSE 81243
// begin if UnitsInside ( j ) < 6 then
81214: LD_VAR 0 3
81218: PPUSH
81219: CALL_OW 313
81223: PUSH
81224: LD_INT 6
81226: LESS
81227: IFFALSE 81241
// begin selected := j ;
81229: LD_ADDR_VAR 0 7
81233: PUSH
81234: LD_VAR 0 3
81238: ST_TO_ADDR
// break ;
81239: GO 81243
// end ; end ;
81241: GO 81211
81243: POP
81244: POP
// if selected then
81245: LD_VAR 0 7
81249: IFFALSE 81339
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81251: LD_ADDR_VAR 0 3
81255: PUSH
81256: LD_EXP 65
81260: PUSH
81261: LD_VAR 0 2
81265: ARRAY
81266: PPUSH
81267: LD_INT 25
81269: PUSH
81270: LD_INT 12
81272: PUSH
81273: EMPTY
81274: LIST
81275: LIST
81276: PPUSH
81277: CALL_OW 72
81281: PUSH
81282: FOR_IN
81283: IFFALSE 81337
// if not IsInUnit ( j ) and not HasTask ( j ) then
81285: LD_VAR 0 3
81289: PPUSH
81290: CALL_OW 310
81294: NOT
81295: PUSH
81296: LD_VAR 0 3
81300: PPUSH
81301: CALL_OW 314
81305: NOT
81306: AND
81307: IFFALSE 81335
// begin ComEnterUnit ( j , selected ) ;
81309: LD_VAR 0 3
81313: PPUSH
81314: LD_VAR 0 7
81318: PPUSH
81319: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
81323: LD_VAR 0 3
81327: PPUSH
81328: LD_INT 15
81330: PPUSH
81331: CALL_OW 183
// end ;
81335: GO 81282
81337: POP
81338: POP
// end ; end ; end ; end ; end ;
81339: GO 80732
81341: POP
81342: POP
// end ;
81343: LD_VAR 0 1
81347: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
81348: LD_INT 0
81350: PPUSH
81351: PPUSH
81352: PPUSH
81353: PPUSH
// if not mc_bases then
81354: LD_EXP 36
81358: NOT
81359: IFFALSE 81363
// exit ;
81361: GO 81541
// for i = 1 to mc_bases do
81363: LD_ADDR_VAR 0 2
81367: PUSH
81368: DOUBLE
81369: LD_INT 1
81371: DEC
81372: ST_TO_ADDR
81373: LD_EXP 36
81377: PUSH
81378: FOR_TO
81379: IFFALSE 81539
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
81381: LD_ADDR_VAR 0 4
81385: PUSH
81386: LD_EXP 36
81390: PUSH
81391: LD_VAR 0 2
81395: ARRAY
81396: PPUSH
81397: LD_INT 25
81399: PUSH
81400: LD_INT 9
81402: PUSH
81403: EMPTY
81404: LIST
81405: LIST
81406: PPUSH
81407: CALL_OW 72
81411: ST_TO_ADDR
// if not tmp then
81412: LD_VAR 0 4
81416: NOT
81417: IFFALSE 81421
// continue ;
81419: GO 81378
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
81421: LD_EXP 62
81425: PUSH
81426: LD_VAR 0 2
81430: ARRAY
81431: PPUSH
81432: LD_INT 29
81434: PPUSH
81435: CALL_OW 325
81439: NOT
81440: PUSH
81441: LD_EXP 62
81445: PUSH
81446: LD_VAR 0 2
81450: ARRAY
81451: PPUSH
81452: LD_INT 28
81454: PPUSH
81455: CALL_OW 325
81459: NOT
81460: AND
81461: IFFALSE 81465
// continue ;
81463: GO 81378
// for j in tmp do
81465: LD_ADDR_VAR 0 3
81469: PUSH
81470: LD_VAR 0 4
81474: PUSH
81475: FOR_IN
81476: IFFALSE 81535
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
81478: LD_VAR 0 3
81482: PUSH
81483: LD_EXP 39
81487: PUSH
81488: LD_VAR 0 2
81492: ARRAY
81493: PUSH
81494: LD_INT 1
81496: ARRAY
81497: IN
81498: NOT
81499: PUSH
81500: LD_VAR 0 3
81504: PUSH
81505: LD_EXP 39
81509: PUSH
81510: LD_VAR 0 2
81514: ARRAY
81515: PUSH
81516: LD_INT 2
81518: ARRAY
81519: IN
81520: NOT
81521: AND
81522: IFFALSE 81533
// ComSpaceTimeShoot ( j ) ;
81524: LD_VAR 0 3
81528: PPUSH
81529: CALL 20161 0 1
81533: GO 81475
81535: POP
81536: POP
// end ;
81537: GO 81378
81539: POP
81540: POP
// end ;
81541: LD_VAR 0 1
81545: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
81546: LD_INT 0
81548: PPUSH
81549: PPUSH
81550: PPUSH
81551: PPUSH
81552: PPUSH
81553: PPUSH
81554: PPUSH
81555: PPUSH
81556: PPUSH
// if not mc_bases then
81557: LD_EXP 36
81561: NOT
81562: IFFALSE 81566
// exit ;
81564: GO 82188
// for i = 1 to mc_bases do
81566: LD_ADDR_VAR 0 2
81570: PUSH
81571: DOUBLE
81572: LD_INT 1
81574: DEC
81575: ST_TO_ADDR
81576: LD_EXP 36
81580: PUSH
81581: FOR_TO
81582: IFFALSE 82186
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
81584: LD_EXP 71
81588: PUSH
81589: LD_VAR 0 2
81593: ARRAY
81594: NOT
81595: PUSH
81596: LD_INT 38
81598: PPUSH
81599: LD_EXP 62
81603: PUSH
81604: LD_VAR 0 2
81608: ARRAY
81609: PPUSH
81610: CALL_OW 321
81614: PUSH
81615: LD_INT 2
81617: NONEQUAL
81618: OR
81619: IFFALSE 81623
// continue ;
81621: GO 81581
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
81623: LD_ADDR_VAR 0 8
81627: PUSH
81628: LD_EXP 36
81632: PUSH
81633: LD_VAR 0 2
81637: ARRAY
81638: PPUSH
81639: LD_INT 30
81641: PUSH
81642: LD_INT 34
81644: PUSH
81645: EMPTY
81646: LIST
81647: LIST
81648: PPUSH
81649: CALL_OW 72
81653: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
81654: LD_ADDR_VAR 0 9
81658: PUSH
81659: LD_EXP 36
81663: PUSH
81664: LD_VAR 0 2
81668: ARRAY
81669: PPUSH
81670: LD_INT 25
81672: PUSH
81673: LD_INT 4
81675: PUSH
81676: EMPTY
81677: LIST
81678: LIST
81679: PPUSH
81680: CALL_OW 72
81684: PPUSH
81685: LD_INT 0
81687: PPUSH
81688: CALL 59331 0 2
81692: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
81693: LD_VAR 0 9
81697: NOT
81698: PUSH
81699: LD_VAR 0 8
81703: NOT
81704: OR
81705: PUSH
81706: LD_EXP 36
81710: PUSH
81711: LD_VAR 0 2
81715: ARRAY
81716: PPUSH
81717: LD_INT 124
81719: PPUSH
81720: CALL 59331 0 2
81724: OR
81725: IFFALSE 81729
// continue ;
81727: GO 81581
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
81729: LD_EXP 72
81733: PUSH
81734: LD_VAR 0 2
81738: ARRAY
81739: PUSH
81740: LD_EXP 71
81744: PUSH
81745: LD_VAR 0 2
81749: ARRAY
81750: LESS
81751: PUSH
81752: LD_EXP 72
81756: PUSH
81757: LD_VAR 0 2
81761: ARRAY
81762: PUSH
81763: LD_VAR 0 8
81767: LESS
81768: AND
81769: IFFALSE 82184
// begin tmp := sci [ 1 ] ;
81771: LD_ADDR_VAR 0 7
81775: PUSH
81776: LD_VAR 0 9
81780: PUSH
81781: LD_INT 1
81783: ARRAY
81784: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
81785: LD_VAR 0 7
81789: PPUSH
81790: LD_INT 124
81792: PPUSH
81793: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
81797: LD_ADDR_VAR 0 3
81801: PUSH
81802: DOUBLE
81803: LD_EXP 71
81807: PUSH
81808: LD_VAR 0 2
81812: ARRAY
81813: INC
81814: ST_TO_ADDR
81815: LD_EXP 71
81819: PUSH
81820: LD_VAR 0 2
81824: ARRAY
81825: PUSH
81826: FOR_DOWNTO
81827: IFFALSE 82170
// begin if IsInUnit ( tmp ) then
81829: LD_VAR 0 7
81833: PPUSH
81834: CALL_OW 310
81838: IFFALSE 81849
// ComExitBuilding ( tmp ) ;
81840: LD_VAR 0 7
81844: PPUSH
81845: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
81849: LD_INT 35
81851: PPUSH
81852: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
81856: LD_VAR 0 7
81860: PPUSH
81861: CALL_OW 310
81865: NOT
81866: PUSH
81867: LD_VAR 0 7
81871: PPUSH
81872: CALL_OW 314
81876: NOT
81877: AND
81878: IFFALSE 81849
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
81880: LD_ADDR_VAR 0 6
81884: PUSH
81885: LD_VAR 0 7
81889: PPUSH
81890: CALL_OW 250
81894: PUSH
81895: LD_VAR 0 7
81899: PPUSH
81900: CALL_OW 251
81904: PUSH
81905: EMPTY
81906: LIST
81907: LIST
81908: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81909: LD_INT 35
81911: PPUSH
81912: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
81916: LD_ADDR_VAR 0 4
81920: PUSH
81921: LD_EXP 71
81925: PUSH
81926: LD_VAR 0 2
81930: ARRAY
81931: PUSH
81932: LD_VAR 0 3
81936: ARRAY
81937: PUSH
81938: LD_INT 1
81940: ARRAY
81941: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
81942: LD_ADDR_VAR 0 5
81946: PUSH
81947: LD_EXP 71
81951: PUSH
81952: LD_VAR 0 2
81956: ARRAY
81957: PUSH
81958: LD_VAR 0 3
81962: ARRAY
81963: PUSH
81964: LD_INT 2
81966: ARRAY
81967: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
81968: LD_VAR 0 7
81972: PPUSH
81973: LD_INT 10
81975: PPUSH
81976: CALL 28664 0 2
81980: PUSH
81981: LD_INT 4
81983: ARRAY
81984: IFFALSE 82022
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
81986: LD_VAR 0 7
81990: PPUSH
81991: LD_VAR 0 6
81995: PUSH
81996: LD_INT 1
81998: ARRAY
81999: PPUSH
82000: LD_VAR 0 6
82004: PUSH
82005: LD_INT 2
82007: ARRAY
82008: PPUSH
82009: CALL_OW 111
// wait ( 0 0$10 ) ;
82013: LD_INT 350
82015: PPUSH
82016: CALL_OW 67
// end else
82020: GO 82048
// begin ComMoveXY ( tmp , x , y ) ;
82022: LD_VAR 0 7
82026: PPUSH
82027: LD_VAR 0 4
82031: PPUSH
82032: LD_VAR 0 5
82036: PPUSH
82037: CALL_OW 111
// wait ( 0 0$3 ) ;
82041: LD_INT 105
82043: PPUSH
82044: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
82048: LD_VAR 0 7
82052: PPUSH
82053: LD_VAR 0 4
82057: PPUSH
82058: LD_VAR 0 5
82062: PPUSH
82063: CALL_OW 307
82067: IFFALSE 81909
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
82069: LD_VAR 0 7
82073: PPUSH
82074: LD_VAR 0 4
82078: PPUSH
82079: LD_VAR 0 5
82083: PPUSH
82084: LD_VAR 0 8
82088: PUSH
82089: LD_VAR 0 3
82093: ARRAY
82094: PPUSH
82095: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
82099: LD_INT 35
82101: PPUSH
82102: CALL_OW 67
// until not HasTask ( tmp ) ;
82106: LD_VAR 0 7
82110: PPUSH
82111: CALL_OW 314
82115: NOT
82116: IFFALSE 82099
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
82118: LD_ADDR_EXP 72
82122: PUSH
82123: LD_EXP 72
82127: PPUSH
82128: LD_VAR 0 2
82132: PUSH
82133: LD_EXP 72
82137: PUSH
82138: LD_VAR 0 2
82142: ARRAY
82143: PUSH
82144: LD_INT 1
82146: PLUS
82147: PUSH
82148: EMPTY
82149: LIST
82150: LIST
82151: PPUSH
82152: LD_VAR 0 8
82156: PUSH
82157: LD_VAR 0 3
82161: ARRAY
82162: PPUSH
82163: CALL 26071 0 3
82167: ST_TO_ADDR
// end ;
82168: GO 81826
82170: POP
82171: POP
// MC_Reset ( i , 124 ) ;
82172: LD_VAR 0 2
82176: PPUSH
82177: LD_INT 124
82179: PPUSH
82180: CALL 66033 0 2
// end ; end ;
82184: GO 81581
82186: POP
82187: POP
// end ;
82188: LD_VAR 0 1
82192: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
82193: LD_INT 0
82195: PPUSH
82196: PPUSH
82197: PPUSH
// if not mc_bases then
82198: LD_EXP 36
82202: NOT
82203: IFFALSE 82207
// exit ;
82205: GO 82813
// for i = 1 to mc_bases do
82207: LD_ADDR_VAR 0 2
82211: PUSH
82212: DOUBLE
82213: LD_INT 1
82215: DEC
82216: ST_TO_ADDR
82217: LD_EXP 36
82221: PUSH
82222: FOR_TO
82223: IFFALSE 82811
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
82225: LD_ADDR_VAR 0 3
82229: PUSH
82230: LD_EXP 36
82234: PUSH
82235: LD_VAR 0 2
82239: ARRAY
82240: PPUSH
82241: LD_INT 25
82243: PUSH
82244: LD_INT 4
82246: PUSH
82247: EMPTY
82248: LIST
82249: LIST
82250: PPUSH
82251: CALL_OW 72
82255: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
82256: LD_VAR 0 3
82260: NOT
82261: PUSH
82262: LD_EXP 73
82266: PUSH
82267: LD_VAR 0 2
82271: ARRAY
82272: NOT
82273: OR
82274: PUSH
82275: LD_EXP 36
82279: PUSH
82280: LD_VAR 0 2
82284: ARRAY
82285: PPUSH
82286: LD_INT 2
82288: PUSH
82289: LD_INT 30
82291: PUSH
82292: LD_INT 0
82294: PUSH
82295: EMPTY
82296: LIST
82297: LIST
82298: PUSH
82299: LD_INT 30
82301: PUSH
82302: LD_INT 1
82304: PUSH
82305: EMPTY
82306: LIST
82307: LIST
82308: PUSH
82309: EMPTY
82310: LIST
82311: LIST
82312: LIST
82313: PPUSH
82314: CALL_OW 72
82318: NOT
82319: OR
82320: IFFALSE 82370
// begin if mc_deposits_finder [ i ] then
82322: LD_EXP 74
82326: PUSH
82327: LD_VAR 0 2
82331: ARRAY
82332: IFFALSE 82368
// begin MC_Reset ( i , 125 ) ;
82334: LD_VAR 0 2
82338: PPUSH
82339: LD_INT 125
82341: PPUSH
82342: CALL 66033 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82346: LD_ADDR_EXP 74
82350: PUSH
82351: LD_EXP 74
82355: PPUSH
82356: LD_VAR 0 2
82360: PPUSH
82361: EMPTY
82362: PPUSH
82363: CALL_OW 1
82367: ST_TO_ADDR
// end ; continue ;
82368: GO 82222
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
82370: LD_EXP 73
82374: PUSH
82375: LD_VAR 0 2
82379: ARRAY
82380: PUSH
82381: LD_INT 1
82383: ARRAY
82384: PUSH
82385: LD_INT 3
82387: ARRAY
82388: PUSH
82389: LD_INT 1
82391: EQUAL
82392: PUSH
82393: LD_INT 20
82395: PPUSH
82396: LD_EXP 62
82400: PUSH
82401: LD_VAR 0 2
82405: ARRAY
82406: PPUSH
82407: CALL_OW 321
82411: PUSH
82412: LD_INT 2
82414: NONEQUAL
82415: AND
82416: IFFALSE 82466
// begin if mc_deposits_finder [ i ] then
82418: LD_EXP 74
82422: PUSH
82423: LD_VAR 0 2
82427: ARRAY
82428: IFFALSE 82464
// begin MC_Reset ( i , 125 ) ;
82430: LD_VAR 0 2
82434: PPUSH
82435: LD_INT 125
82437: PPUSH
82438: CALL 66033 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82442: LD_ADDR_EXP 74
82446: PUSH
82447: LD_EXP 74
82451: PPUSH
82452: LD_VAR 0 2
82456: PPUSH
82457: EMPTY
82458: PPUSH
82459: CALL_OW 1
82463: ST_TO_ADDR
// end ; continue ;
82464: GO 82222
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
82466: LD_EXP 73
82470: PUSH
82471: LD_VAR 0 2
82475: ARRAY
82476: PUSH
82477: LD_INT 1
82479: ARRAY
82480: PUSH
82481: LD_INT 1
82483: ARRAY
82484: PPUSH
82485: LD_EXP 73
82489: PUSH
82490: LD_VAR 0 2
82494: ARRAY
82495: PUSH
82496: LD_INT 1
82498: ARRAY
82499: PUSH
82500: LD_INT 2
82502: ARRAY
82503: PPUSH
82504: LD_EXP 62
82508: PUSH
82509: LD_VAR 0 2
82513: ARRAY
82514: PPUSH
82515: CALL_OW 440
82519: IFFALSE 82562
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
82521: LD_ADDR_EXP 73
82525: PUSH
82526: LD_EXP 73
82530: PPUSH
82531: LD_VAR 0 2
82535: PPUSH
82536: LD_EXP 73
82540: PUSH
82541: LD_VAR 0 2
82545: ARRAY
82546: PPUSH
82547: LD_INT 1
82549: PPUSH
82550: CALL_OW 3
82554: PPUSH
82555: CALL_OW 1
82559: ST_TO_ADDR
82560: GO 82809
// begin if not mc_deposits_finder [ i ] then
82562: LD_EXP 74
82566: PUSH
82567: LD_VAR 0 2
82571: ARRAY
82572: NOT
82573: IFFALSE 82625
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
82575: LD_ADDR_EXP 74
82579: PUSH
82580: LD_EXP 74
82584: PPUSH
82585: LD_VAR 0 2
82589: PPUSH
82590: LD_VAR 0 3
82594: PUSH
82595: LD_INT 1
82597: ARRAY
82598: PUSH
82599: EMPTY
82600: LIST
82601: PPUSH
82602: CALL_OW 1
82606: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
82607: LD_VAR 0 3
82611: PUSH
82612: LD_INT 1
82614: ARRAY
82615: PPUSH
82616: LD_INT 125
82618: PPUSH
82619: CALL_OW 109
// end else
82623: GO 82809
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
82625: LD_EXP 74
82629: PUSH
82630: LD_VAR 0 2
82634: ARRAY
82635: PUSH
82636: LD_INT 1
82638: ARRAY
82639: PPUSH
82640: CALL_OW 310
82644: IFFALSE 82667
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
82646: LD_EXP 74
82650: PUSH
82651: LD_VAR 0 2
82655: ARRAY
82656: PUSH
82657: LD_INT 1
82659: ARRAY
82660: PPUSH
82661: CALL_OW 122
82665: GO 82809
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
82667: LD_EXP 74
82671: PUSH
82672: LD_VAR 0 2
82676: ARRAY
82677: PUSH
82678: LD_INT 1
82680: ARRAY
82681: PPUSH
82682: CALL_OW 314
82686: NOT
82687: PUSH
82688: LD_EXP 74
82692: PUSH
82693: LD_VAR 0 2
82697: ARRAY
82698: PUSH
82699: LD_INT 1
82701: ARRAY
82702: PPUSH
82703: LD_EXP 73
82707: PUSH
82708: LD_VAR 0 2
82712: ARRAY
82713: PUSH
82714: LD_INT 1
82716: ARRAY
82717: PUSH
82718: LD_INT 1
82720: ARRAY
82721: PPUSH
82722: LD_EXP 73
82726: PUSH
82727: LD_VAR 0 2
82731: ARRAY
82732: PUSH
82733: LD_INT 1
82735: ARRAY
82736: PUSH
82737: LD_INT 2
82739: ARRAY
82740: PPUSH
82741: CALL_OW 297
82745: PUSH
82746: LD_INT 6
82748: GREATER
82749: AND
82750: IFFALSE 82809
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
82752: LD_EXP 74
82756: PUSH
82757: LD_VAR 0 2
82761: ARRAY
82762: PUSH
82763: LD_INT 1
82765: ARRAY
82766: PPUSH
82767: LD_EXP 73
82771: PUSH
82772: LD_VAR 0 2
82776: ARRAY
82777: PUSH
82778: LD_INT 1
82780: ARRAY
82781: PUSH
82782: LD_INT 1
82784: ARRAY
82785: PPUSH
82786: LD_EXP 73
82790: PUSH
82791: LD_VAR 0 2
82795: ARRAY
82796: PUSH
82797: LD_INT 1
82799: ARRAY
82800: PUSH
82801: LD_INT 2
82803: ARRAY
82804: PPUSH
82805: CALL_OW 111
// end ; end ; end ;
82809: GO 82222
82811: POP
82812: POP
// end ;
82813: LD_VAR 0 1
82817: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
82818: LD_INT 0
82820: PPUSH
82821: PPUSH
82822: PPUSH
82823: PPUSH
82824: PPUSH
82825: PPUSH
82826: PPUSH
82827: PPUSH
82828: PPUSH
82829: PPUSH
82830: PPUSH
// if not mc_bases then
82831: LD_EXP 36
82835: NOT
82836: IFFALSE 82840
// exit ;
82838: GO 83564
// for i = 1 to mc_bases do
82840: LD_ADDR_VAR 0 2
82844: PUSH
82845: DOUBLE
82846: LD_INT 1
82848: DEC
82849: ST_TO_ADDR
82850: LD_EXP 36
82854: PUSH
82855: FOR_TO
82856: IFFALSE 83562
// begin if not mc_bases [ i ] then
82858: LD_EXP 36
82862: PUSH
82863: LD_VAR 0 2
82867: ARRAY
82868: NOT
82869: IFFALSE 82873
// continue ;
82871: GO 82855
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
82873: LD_ADDR_VAR 0 7
82877: PUSH
82878: LD_EXP 36
82882: PUSH
82883: LD_VAR 0 2
82887: ARRAY
82888: PUSH
82889: LD_INT 1
82891: ARRAY
82892: PPUSH
82893: CALL_OW 248
82897: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
82898: LD_VAR 0 7
82902: PUSH
82903: LD_INT 3
82905: EQUAL
82906: PUSH
82907: LD_EXP 55
82911: PUSH
82912: LD_VAR 0 2
82916: ARRAY
82917: PUSH
82918: LD_EXP 58
82922: PUSH
82923: LD_VAR 0 2
82927: ARRAY
82928: UNION
82929: PPUSH
82930: LD_INT 33
82932: PUSH
82933: LD_INT 2
82935: PUSH
82936: EMPTY
82937: LIST
82938: LIST
82939: PPUSH
82940: CALL_OW 72
82944: NOT
82945: OR
82946: IFFALSE 82950
// continue ;
82948: GO 82855
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
82950: LD_ADDR_VAR 0 9
82954: PUSH
82955: LD_EXP 36
82959: PUSH
82960: LD_VAR 0 2
82964: ARRAY
82965: PPUSH
82966: LD_INT 30
82968: PUSH
82969: LD_INT 36
82971: PUSH
82972: EMPTY
82973: LIST
82974: LIST
82975: PPUSH
82976: CALL_OW 72
82980: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
82981: LD_ADDR_VAR 0 10
82985: PUSH
82986: LD_EXP 55
82990: PUSH
82991: LD_VAR 0 2
82995: ARRAY
82996: PPUSH
82997: LD_INT 34
82999: PUSH
83000: LD_INT 31
83002: PUSH
83003: EMPTY
83004: LIST
83005: LIST
83006: PPUSH
83007: CALL_OW 72
83011: ST_TO_ADDR
// if not cts and not mcts then
83012: LD_VAR 0 9
83016: NOT
83017: PUSH
83018: LD_VAR 0 10
83022: NOT
83023: AND
83024: IFFALSE 83028
// continue ;
83026: GO 82855
// x := cts ;
83028: LD_ADDR_VAR 0 11
83032: PUSH
83033: LD_VAR 0 9
83037: ST_TO_ADDR
// if not x then
83038: LD_VAR 0 11
83042: NOT
83043: IFFALSE 83055
// x := mcts ;
83045: LD_ADDR_VAR 0 11
83049: PUSH
83050: LD_VAR 0 10
83054: ST_TO_ADDR
// if mc_remote_driver [ i ] then
83055: LD_EXP 76
83059: PUSH
83060: LD_VAR 0 2
83064: ARRAY
83065: IFFALSE 83334
// for j in mc_remote_driver [ i ] do
83067: LD_ADDR_VAR 0 3
83071: PUSH
83072: LD_EXP 76
83076: PUSH
83077: LD_VAR 0 2
83081: ARRAY
83082: PUSH
83083: FOR_IN
83084: IFFALSE 83332
// begin if GetClass ( j ) <> 3 then
83086: LD_VAR 0 3
83090: PPUSH
83091: CALL_OW 257
83095: PUSH
83096: LD_INT 3
83098: NONEQUAL
83099: IFFALSE 83152
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
83101: LD_ADDR_EXP 76
83105: PUSH
83106: LD_EXP 76
83110: PPUSH
83111: LD_VAR 0 2
83115: PPUSH
83116: LD_EXP 76
83120: PUSH
83121: LD_VAR 0 2
83125: ARRAY
83126: PUSH
83127: LD_VAR 0 3
83131: DIFF
83132: PPUSH
83133: CALL_OW 1
83137: ST_TO_ADDR
// SetTag ( j , 0 ) ;
83138: LD_VAR 0 3
83142: PPUSH
83143: LD_INT 0
83145: PPUSH
83146: CALL_OW 109
// continue ;
83150: GO 83083
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
83152: LD_VAR 0 3
83156: PPUSH
83157: CALL_OW 310
83161: NOT
83162: PUSH
83163: LD_VAR 0 3
83167: PPUSH
83168: CALL_OW 310
83172: PPUSH
83173: CALL_OW 266
83177: PUSH
83178: LD_INT 36
83180: NONEQUAL
83181: PUSH
83182: LD_VAR 0 3
83186: PPUSH
83187: CALL 59419 0 1
83191: NOT
83192: AND
83193: OR
83194: IFFALSE 83330
// begin if IsInUnit ( j ) then
83196: LD_VAR 0 3
83200: PPUSH
83201: CALL_OW 310
83205: IFFALSE 83216
// ComExitBuilding ( j ) ;
83207: LD_VAR 0 3
83211: PPUSH
83212: CALL_OW 122
// ct := 0 ;
83216: LD_ADDR_VAR 0 8
83220: PUSH
83221: LD_INT 0
83223: ST_TO_ADDR
// for k in x do
83224: LD_ADDR_VAR 0 4
83228: PUSH
83229: LD_VAR 0 11
83233: PUSH
83234: FOR_IN
83235: IFFALSE 83308
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
83237: LD_VAR 0 4
83241: PPUSH
83242: CALL_OW 264
83246: PUSH
83247: LD_INT 31
83249: EQUAL
83250: PUSH
83251: LD_VAR 0 4
83255: PPUSH
83256: CALL_OW 311
83260: NOT
83261: AND
83262: PUSH
83263: LD_VAR 0 4
83267: PPUSH
83268: CALL_OW 266
83272: PUSH
83273: LD_INT 36
83275: EQUAL
83276: PUSH
83277: LD_VAR 0 4
83281: PPUSH
83282: CALL_OW 313
83286: PUSH
83287: LD_INT 3
83289: LESS
83290: AND
83291: OR
83292: IFFALSE 83306
// begin ct := k ;
83294: LD_ADDR_VAR 0 8
83298: PUSH
83299: LD_VAR 0 4
83303: ST_TO_ADDR
// break ;
83304: GO 83308
// end ;
83306: GO 83234
83308: POP
83309: POP
// if ct then
83310: LD_VAR 0 8
83314: IFFALSE 83330
// ComEnterUnit ( j , ct ) ;
83316: LD_VAR 0 3
83320: PPUSH
83321: LD_VAR 0 8
83325: PPUSH
83326: CALL_OW 120
// end ; end ;
83330: GO 83083
83332: POP
83333: POP
// places := 0 ;
83334: LD_ADDR_VAR 0 5
83338: PUSH
83339: LD_INT 0
83341: ST_TO_ADDR
// for j = 1 to x do
83342: LD_ADDR_VAR 0 3
83346: PUSH
83347: DOUBLE
83348: LD_INT 1
83350: DEC
83351: ST_TO_ADDR
83352: LD_VAR 0 11
83356: PUSH
83357: FOR_TO
83358: IFFALSE 83413
// if GetWeapon ( x [ j ] ) = ar_control_tower then
83360: LD_VAR 0 11
83364: PUSH
83365: LD_VAR 0 3
83369: ARRAY
83370: PPUSH
83371: CALL_OW 264
83375: PUSH
83376: LD_INT 31
83378: EQUAL
83379: IFFALSE 83397
// places := places + 1 else
83381: LD_ADDR_VAR 0 5
83385: PUSH
83386: LD_VAR 0 5
83390: PUSH
83391: LD_INT 1
83393: PLUS
83394: ST_TO_ADDR
83395: GO 83411
// places := places + 3 ;
83397: LD_ADDR_VAR 0 5
83401: PUSH
83402: LD_VAR 0 5
83406: PUSH
83407: LD_INT 3
83409: PLUS
83410: ST_TO_ADDR
83411: GO 83357
83413: POP
83414: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
83415: LD_ADDR_VAR 0 6
83419: PUSH
83420: LD_EXP 36
83424: PUSH
83425: LD_VAR 0 2
83429: ARRAY
83430: PPUSH
83431: LD_INT 25
83433: PUSH
83434: LD_INT 3
83436: PUSH
83437: EMPTY
83438: LIST
83439: LIST
83440: PPUSH
83441: CALL_OW 72
83445: PUSH
83446: LD_EXP 76
83450: PUSH
83451: LD_VAR 0 2
83455: ARRAY
83456: DIFF
83457: PPUSH
83458: LD_INT 3
83460: PPUSH
83461: CALL 60319 0 2
83465: ST_TO_ADDR
// if not tmp then
83466: LD_VAR 0 6
83470: NOT
83471: IFFALSE 83475
// continue ;
83473: GO 82855
// places := places - mc_remote_driver [ i ] ;
83475: LD_ADDR_VAR 0 5
83479: PUSH
83480: LD_VAR 0 5
83484: PUSH
83485: LD_EXP 76
83489: PUSH
83490: LD_VAR 0 2
83494: ARRAY
83495: MINUS
83496: ST_TO_ADDR
// if places then
83497: LD_VAR 0 5
83501: IFFALSE 83560
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
83503: LD_ADDR_EXP 76
83507: PUSH
83508: LD_EXP 76
83512: PPUSH
83513: LD_VAR 0 2
83517: PPUSH
83518: LD_EXP 76
83522: PUSH
83523: LD_VAR 0 2
83527: ARRAY
83528: PUSH
83529: LD_VAR 0 6
83533: PUSH
83534: LD_INT 1
83536: ARRAY
83537: UNION
83538: PPUSH
83539: CALL_OW 1
83543: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
83544: LD_VAR 0 6
83548: PUSH
83549: LD_INT 1
83551: ARRAY
83552: PPUSH
83553: LD_INT 126
83555: PPUSH
83556: CALL_OW 109
// end ; end ;
83560: GO 82855
83562: POP
83563: POP
// end ;
83564: LD_VAR 0 1
83568: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
83569: LD_INT 0
83571: PPUSH
83572: PPUSH
83573: PPUSH
83574: PPUSH
83575: PPUSH
83576: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
83577: LD_VAR 0 1
83581: NOT
83582: PUSH
83583: LD_VAR 0 2
83587: NOT
83588: OR
83589: PUSH
83590: LD_VAR 0 3
83594: NOT
83595: OR
83596: PUSH
83597: LD_VAR 0 4
83601: PUSH
83602: LD_INT 1
83604: PUSH
83605: LD_INT 2
83607: PUSH
83608: LD_INT 3
83610: PUSH
83611: LD_INT 4
83613: PUSH
83614: LD_INT 5
83616: PUSH
83617: LD_INT 8
83619: PUSH
83620: LD_INT 9
83622: PUSH
83623: LD_INT 15
83625: PUSH
83626: LD_INT 16
83628: PUSH
83629: EMPTY
83630: LIST
83631: LIST
83632: LIST
83633: LIST
83634: LIST
83635: LIST
83636: LIST
83637: LIST
83638: LIST
83639: IN
83640: NOT
83641: OR
83642: IFFALSE 83646
// exit ;
83644: GO 84546
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
83646: LD_ADDR_VAR 0 2
83650: PUSH
83651: LD_VAR 0 2
83655: PPUSH
83656: LD_INT 21
83658: PUSH
83659: LD_INT 3
83661: PUSH
83662: EMPTY
83663: LIST
83664: LIST
83665: PUSH
83666: LD_INT 24
83668: PUSH
83669: LD_INT 250
83671: PUSH
83672: EMPTY
83673: LIST
83674: LIST
83675: PUSH
83676: EMPTY
83677: LIST
83678: LIST
83679: PPUSH
83680: CALL_OW 72
83684: ST_TO_ADDR
// case class of 1 , 15 :
83685: LD_VAR 0 4
83689: PUSH
83690: LD_INT 1
83692: DOUBLE
83693: EQUAL
83694: IFTRUE 83704
83696: LD_INT 15
83698: DOUBLE
83699: EQUAL
83700: IFTRUE 83704
83702: GO 83789
83704: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
83705: LD_ADDR_VAR 0 8
83709: PUSH
83710: LD_VAR 0 2
83714: PPUSH
83715: LD_INT 2
83717: PUSH
83718: LD_INT 30
83720: PUSH
83721: LD_INT 32
83723: PUSH
83724: EMPTY
83725: LIST
83726: LIST
83727: PUSH
83728: LD_INT 30
83730: PUSH
83731: LD_INT 31
83733: PUSH
83734: EMPTY
83735: LIST
83736: LIST
83737: PUSH
83738: EMPTY
83739: LIST
83740: LIST
83741: LIST
83742: PPUSH
83743: CALL_OW 72
83747: PUSH
83748: LD_VAR 0 2
83752: PPUSH
83753: LD_INT 2
83755: PUSH
83756: LD_INT 30
83758: PUSH
83759: LD_INT 4
83761: PUSH
83762: EMPTY
83763: LIST
83764: LIST
83765: PUSH
83766: LD_INT 30
83768: PUSH
83769: LD_INT 5
83771: PUSH
83772: EMPTY
83773: LIST
83774: LIST
83775: PUSH
83776: EMPTY
83777: LIST
83778: LIST
83779: LIST
83780: PPUSH
83781: CALL_OW 72
83785: ADD
83786: ST_TO_ADDR
83787: GO 84035
83789: LD_INT 2
83791: DOUBLE
83792: EQUAL
83793: IFTRUE 83803
83795: LD_INT 16
83797: DOUBLE
83798: EQUAL
83799: IFTRUE 83803
83801: GO 83849
83803: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
83804: LD_ADDR_VAR 0 8
83808: PUSH
83809: LD_VAR 0 2
83813: PPUSH
83814: LD_INT 2
83816: PUSH
83817: LD_INT 30
83819: PUSH
83820: LD_INT 0
83822: PUSH
83823: EMPTY
83824: LIST
83825: LIST
83826: PUSH
83827: LD_INT 30
83829: PUSH
83830: LD_INT 1
83832: PUSH
83833: EMPTY
83834: LIST
83835: LIST
83836: PUSH
83837: EMPTY
83838: LIST
83839: LIST
83840: LIST
83841: PPUSH
83842: CALL_OW 72
83846: ST_TO_ADDR
83847: GO 84035
83849: LD_INT 3
83851: DOUBLE
83852: EQUAL
83853: IFTRUE 83857
83855: GO 83903
83857: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
83858: LD_ADDR_VAR 0 8
83862: PUSH
83863: LD_VAR 0 2
83867: PPUSH
83868: LD_INT 2
83870: PUSH
83871: LD_INT 30
83873: PUSH
83874: LD_INT 2
83876: PUSH
83877: EMPTY
83878: LIST
83879: LIST
83880: PUSH
83881: LD_INT 30
83883: PUSH
83884: LD_INT 3
83886: PUSH
83887: EMPTY
83888: LIST
83889: LIST
83890: PUSH
83891: EMPTY
83892: LIST
83893: LIST
83894: LIST
83895: PPUSH
83896: CALL_OW 72
83900: ST_TO_ADDR
83901: GO 84035
83903: LD_INT 4
83905: DOUBLE
83906: EQUAL
83907: IFTRUE 83911
83909: GO 83968
83911: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
83912: LD_ADDR_VAR 0 8
83916: PUSH
83917: LD_VAR 0 2
83921: PPUSH
83922: LD_INT 2
83924: PUSH
83925: LD_INT 30
83927: PUSH
83928: LD_INT 6
83930: PUSH
83931: EMPTY
83932: LIST
83933: LIST
83934: PUSH
83935: LD_INT 30
83937: PUSH
83938: LD_INT 7
83940: PUSH
83941: EMPTY
83942: LIST
83943: LIST
83944: PUSH
83945: LD_INT 30
83947: PUSH
83948: LD_INT 8
83950: PUSH
83951: EMPTY
83952: LIST
83953: LIST
83954: PUSH
83955: EMPTY
83956: LIST
83957: LIST
83958: LIST
83959: LIST
83960: PPUSH
83961: CALL_OW 72
83965: ST_TO_ADDR
83966: GO 84035
83968: LD_INT 5
83970: DOUBLE
83971: EQUAL
83972: IFTRUE 83988
83974: LD_INT 8
83976: DOUBLE
83977: EQUAL
83978: IFTRUE 83988
83980: LD_INT 9
83982: DOUBLE
83983: EQUAL
83984: IFTRUE 83988
83986: GO 84034
83988: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
83989: LD_ADDR_VAR 0 8
83993: PUSH
83994: LD_VAR 0 2
83998: PPUSH
83999: LD_INT 2
84001: PUSH
84002: LD_INT 30
84004: PUSH
84005: LD_INT 4
84007: PUSH
84008: EMPTY
84009: LIST
84010: LIST
84011: PUSH
84012: LD_INT 30
84014: PUSH
84015: LD_INT 5
84017: PUSH
84018: EMPTY
84019: LIST
84020: LIST
84021: PUSH
84022: EMPTY
84023: LIST
84024: LIST
84025: LIST
84026: PPUSH
84027: CALL_OW 72
84031: ST_TO_ADDR
84032: GO 84035
84034: POP
// if not tmp then
84035: LD_VAR 0 8
84039: NOT
84040: IFFALSE 84044
// exit ;
84042: GO 84546
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
84044: LD_VAR 0 4
84048: PUSH
84049: LD_INT 1
84051: PUSH
84052: LD_INT 15
84054: PUSH
84055: EMPTY
84056: LIST
84057: LIST
84058: IN
84059: PUSH
84060: LD_EXP 45
84064: PUSH
84065: LD_VAR 0 1
84069: ARRAY
84070: AND
84071: IFFALSE 84227
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
84073: LD_ADDR_VAR 0 9
84077: PUSH
84078: LD_EXP 45
84082: PUSH
84083: LD_VAR 0 1
84087: ARRAY
84088: PUSH
84089: LD_INT 1
84091: ARRAY
84092: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
84093: LD_VAR 0 9
84097: PUSH
84098: LD_EXP 46
84102: PUSH
84103: LD_VAR 0 1
84107: ARRAY
84108: IN
84109: NOT
84110: IFFALSE 84225
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
84112: LD_ADDR_EXP 46
84116: PUSH
84117: LD_EXP 46
84121: PPUSH
84122: LD_VAR 0 1
84126: PUSH
84127: LD_EXP 46
84131: PUSH
84132: LD_VAR 0 1
84136: ARRAY
84137: PUSH
84138: LD_INT 1
84140: PLUS
84141: PUSH
84142: EMPTY
84143: LIST
84144: LIST
84145: PPUSH
84146: LD_VAR 0 9
84150: PPUSH
84151: CALL 26071 0 3
84155: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
84156: LD_ADDR_EXP 45
84160: PUSH
84161: LD_EXP 45
84165: PPUSH
84166: LD_VAR 0 1
84170: PPUSH
84171: LD_EXP 45
84175: PUSH
84176: LD_VAR 0 1
84180: ARRAY
84181: PUSH
84182: LD_VAR 0 9
84186: DIFF
84187: PPUSH
84188: CALL_OW 1
84192: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
84193: LD_VAR 0 3
84197: PPUSH
84198: LD_EXP 46
84202: PUSH
84203: LD_VAR 0 1
84207: ARRAY
84208: PUSH
84209: LD_EXP 46
84213: PUSH
84214: LD_VAR 0 1
84218: ARRAY
84219: ARRAY
84220: PPUSH
84221: CALL_OW 120
// end ; exit ;
84225: GO 84546
// end ; if tmp > 1 then
84227: LD_VAR 0 8
84231: PUSH
84232: LD_INT 1
84234: GREATER
84235: IFFALSE 84339
// for i = 2 to tmp do
84237: LD_ADDR_VAR 0 6
84241: PUSH
84242: DOUBLE
84243: LD_INT 2
84245: DEC
84246: ST_TO_ADDR
84247: LD_VAR 0 8
84251: PUSH
84252: FOR_TO
84253: IFFALSE 84337
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
84255: LD_VAR 0 8
84259: PUSH
84260: LD_VAR 0 6
84264: ARRAY
84265: PPUSH
84266: CALL_OW 461
84270: PUSH
84271: LD_INT 6
84273: EQUAL
84274: IFFALSE 84335
// begin x := tmp [ i ] ;
84276: LD_ADDR_VAR 0 9
84280: PUSH
84281: LD_VAR 0 8
84285: PUSH
84286: LD_VAR 0 6
84290: ARRAY
84291: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
84292: LD_ADDR_VAR 0 8
84296: PUSH
84297: LD_VAR 0 8
84301: PPUSH
84302: LD_VAR 0 6
84306: PPUSH
84307: CALL_OW 3
84311: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
84312: LD_ADDR_VAR 0 8
84316: PUSH
84317: LD_VAR 0 8
84321: PPUSH
84322: LD_INT 1
84324: PPUSH
84325: LD_VAR 0 9
84329: PPUSH
84330: CALL_OW 2
84334: ST_TO_ADDR
// end ;
84335: GO 84252
84337: POP
84338: POP
// for i in tmp do
84339: LD_ADDR_VAR 0 6
84343: PUSH
84344: LD_VAR 0 8
84348: PUSH
84349: FOR_IN
84350: IFFALSE 84419
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
84352: LD_VAR 0 6
84356: PPUSH
84357: CALL_OW 313
84361: PUSH
84362: LD_INT 6
84364: LESS
84365: PUSH
84366: LD_VAR 0 6
84370: PPUSH
84371: CALL_OW 266
84375: PUSH
84376: LD_INT 31
84378: PUSH
84379: LD_INT 32
84381: PUSH
84382: EMPTY
84383: LIST
84384: LIST
84385: IN
84386: NOT
84387: AND
84388: PUSH
84389: LD_VAR 0 6
84393: PPUSH
84394: CALL_OW 313
84398: PUSH
84399: LD_INT 0
84401: EQUAL
84402: OR
84403: IFFALSE 84417
// begin j := i ;
84405: LD_ADDR_VAR 0 7
84409: PUSH
84410: LD_VAR 0 6
84414: ST_TO_ADDR
// break ;
84415: GO 84419
// end ; end ;
84417: GO 84349
84419: POP
84420: POP
// if j then
84421: LD_VAR 0 7
84425: IFFALSE 84443
// ComEnterUnit ( unit , j ) else
84427: LD_VAR 0 3
84431: PPUSH
84432: LD_VAR 0 7
84436: PPUSH
84437: CALL_OW 120
84441: GO 84546
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
84443: LD_ADDR_VAR 0 10
84447: PUSH
84448: LD_VAR 0 2
84452: PPUSH
84453: LD_INT 2
84455: PUSH
84456: LD_INT 30
84458: PUSH
84459: LD_INT 0
84461: PUSH
84462: EMPTY
84463: LIST
84464: LIST
84465: PUSH
84466: LD_INT 30
84468: PUSH
84469: LD_INT 1
84471: PUSH
84472: EMPTY
84473: LIST
84474: LIST
84475: PUSH
84476: EMPTY
84477: LIST
84478: LIST
84479: LIST
84480: PPUSH
84481: CALL_OW 72
84485: ST_TO_ADDR
// if depot then
84486: LD_VAR 0 10
84490: IFFALSE 84546
// begin depot := NearestUnitToUnit ( depot , unit ) ;
84492: LD_ADDR_VAR 0 10
84496: PUSH
84497: LD_VAR 0 10
84501: PPUSH
84502: LD_VAR 0 3
84506: PPUSH
84507: CALL_OW 74
84511: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
84512: LD_VAR 0 3
84516: PPUSH
84517: LD_VAR 0 10
84521: PPUSH
84522: CALL_OW 296
84526: PUSH
84527: LD_INT 10
84529: GREATER
84530: IFFALSE 84546
// ComStandNearbyBuilding ( unit , depot ) ;
84532: LD_VAR 0 3
84536: PPUSH
84537: LD_VAR 0 10
84541: PPUSH
84542: CALL 20778 0 2
// end ; end ; end ;
84546: LD_VAR 0 5
84550: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
84551: LD_INT 0
84553: PPUSH
84554: PPUSH
84555: PPUSH
84556: PPUSH
// if not mc_bases then
84557: LD_EXP 36
84561: NOT
84562: IFFALSE 84566
// exit ;
84564: GO 84805
// for i = 1 to mc_bases do
84566: LD_ADDR_VAR 0 2
84570: PUSH
84571: DOUBLE
84572: LD_INT 1
84574: DEC
84575: ST_TO_ADDR
84576: LD_EXP 36
84580: PUSH
84581: FOR_TO
84582: IFFALSE 84803
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
84584: LD_ADDR_VAR 0 4
84588: PUSH
84589: LD_EXP 36
84593: PUSH
84594: LD_VAR 0 2
84598: ARRAY
84599: PPUSH
84600: LD_INT 21
84602: PUSH
84603: LD_INT 1
84605: PUSH
84606: EMPTY
84607: LIST
84608: LIST
84609: PPUSH
84610: CALL_OW 72
84614: PUSH
84615: LD_EXP 65
84619: PUSH
84620: LD_VAR 0 2
84624: ARRAY
84625: UNION
84626: ST_TO_ADDR
// if not tmp then
84627: LD_VAR 0 4
84631: NOT
84632: IFFALSE 84636
// continue ;
84634: GO 84581
// for j in tmp do
84636: LD_ADDR_VAR 0 3
84640: PUSH
84641: LD_VAR 0 4
84645: PUSH
84646: FOR_IN
84647: IFFALSE 84799
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
84649: LD_VAR 0 3
84653: PPUSH
84654: CALL_OW 110
84658: NOT
84659: PUSH
84660: LD_VAR 0 3
84664: PPUSH
84665: CALL_OW 314
84669: NOT
84670: AND
84671: PUSH
84672: LD_VAR 0 3
84676: PPUSH
84677: CALL_OW 311
84681: NOT
84682: AND
84683: PUSH
84684: LD_VAR 0 3
84688: PPUSH
84689: CALL_OW 310
84693: NOT
84694: AND
84695: PUSH
84696: LD_VAR 0 3
84700: PUSH
84701: LD_EXP 39
84705: PUSH
84706: LD_VAR 0 2
84710: ARRAY
84711: PUSH
84712: LD_INT 1
84714: ARRAY
84715: IN
84716: NOT
84717: AND
84718: PUSH
84719: LD_VAR 0 3
84723: PUSH
84724: LD_EXP 39
84728: PUSH
84729: LD_VAR 0 2
84733: ARRAY
84734: PUSH
84735: LD_INT 2
84737: ARRAY
84738: IN
84739: NOT
84740: AND
84741: PUSH
84742: LD_VAR 0 3
84746: PUSH
84747: LD_EXP 48
84751: PUSH
84752: LD_VAR 0 2
84756: ARRAY
84757: IN
84758: NOT
84759: AND
84760: IFFALSE 84797
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
84762: LD_VAR 0 2
84766: PPUSH
84767: LD_EXP 36
84771: PUSH
84772: LD_VAR 0 2
84776: ARRAY
84777: PPUSH
84778: LD_VAR 0 3
84782: PPUSH
84783: LD_VAR 0 3
84787: PPUSH
84788: CALL_OW 257
84792: PPUSH
84793: CALL 83569 0 4
// end ;
84797: GO 84646
84799: POP
84800: POP
// end ;
84801: GO 84581
84803: POP
84804: POP
// end ;
84805: LD_VAR 0 1
84809: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
84810: LD_INT 0
84812: PPUSH
84813: PPUSH
84814: PPUSH
84815: PPUSH
84816: PPUSH
84817: PPUSH
// if not mc_bases [ base ] then
84818: LD_EXP 36
84822: PUSH
84823: LD_VAR 0 1
84827: ARRAY
84828: NOT
84829: IFFALSE 84833
// exit ;
84831: GO 85015
// tmp := [ ] ;
84833: LD_ADDR_VAR 0 6
84837: PUSH
84838: EMPTY
84839: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
84840: LD_ADDR_VAR 0 7
84844: PUSH
84845: LD_VAR 0 3
84849: PPUSH
84850: LD_INT 0
84852: PPUSH
84853: CALL_OW 517
84857: ST_TO_ADDR
// if not list then
84858: LD_VAR 0 7
84862: NOT
84863: IFFALSE 84867
// exit ;
84865: GO 85015
// for i = 1 to amount do
84867: LD_ADDR_VAR 0 5
84871: PUSH
84872: DOUBLE
84873: LD_INT 1
84875: DEC
84876: ST_TO_ADDR
84877: LD_VAR 0 2
84881: PUSH
84882: FOR_TO
84883: IFFALSE 84963
// begin x := rand ( 1 , list [ 1 ] ) ;
84885: LD_ADDR_VAR 0 8
84889: PUSH
84890: LD_INT 1
84892: PPUSH
84893: LD_VAR 0 7
84897: PUSH
84898: LD_INT 1
84900: ARRAY
84901: PPUSH
84902: CALL_OW 12
84906: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
84907: LD_ADDR_VAR 0 6
84911: PUSH
84912: LD_VAR 0 6
84916: PPUSH
84917: LD_VAR 0 5
84921: PPUSH
84922: LD_VAR 0 7
84926: PUSH
84927: LD_INT 1
84929: ARRAY
84930: PUSH
84931: LD_VAR 0 8
84935: ARRAY
84936: PUSH
84937: LD_VAR 0 7
84941: PUSH
84942: LD_INT 2
84944: ARRAY
84945: PUSH
84946: LD_VAR 0 8
84950: ARRAY
84951: PUSH
84952: EMPTY
84953: LIST
84954: LIST
84955: PPUSH
84956: CALL_OW 1
84960: ST_TO_ADDR
// end ;
84961: GO 84882
84963: POP
84964: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
84965: LD_ADDR_EXP 49
84969: PUSH
84970: LD_EXP 49
84974: PPUSH
84975: LD_VAR 0 1
84979: PPUSH
84980: LD_VAR 0 6
84984: PPUSH
84985: CALL_OW 1
84989: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
84990: LD_ADDR_EXP 51
84994: PUSH
84995: LD_EXP 51
84999: PPUSH
85000: LD_VAR 0 1
85004: PPUSH
85005: LD_VAR 0 3
85009: PPUSH
85010: CALL_OW 1
85014: ST_TO_ADDR
// end ;
85015: LD_VAR 0 4
85019: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
85020: LD_INT 0
85022: PPUSH
// if not mc_bases [ base ] then
85023: LD_EXP 36
85027: PUSH
85028: LD_VAR 0 1
85032: ARRAY
85033: NOT
85034: IFFALSE 85038
// exit ;
85036: GO 85063
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
85038: LD_ADDR_EXP 41
85042: PUSH
85043: LD_EXP 41
85047: PPUSH
85048: LD_VAR 0 1
85052: PPUSH
85053: LD_VAR 0 2
85057: PPUSH
85058: CALL_OW 1
85062: ST_TO_ADDR
// end ;
85063: LD_VAR 0 3
85067: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
85068: LD_INT 0
85070: PPUSH
// if not mc_bases [ base ] then
85071: LD_EXP 36
85075: PUSH
85076: LD_VAR 0 1
85080: ARRAY
85081: NOT
85082: IFFALSE 85086
// exit ;
85084: GO 85123
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
85086: LD_ADDR_EXP 41
85090: PUSH
85091: LD_EXP 41
85095: PPUSH
85096: LD_VAR 0 1
85100: PPUSH
85101: LD_EXP 41
85105: PUSH
85106: LD_VAR 0 1
85110: ARRAY
85111: PUSH
85112: LD_VAR 0 2
85116: UNION
85117: PPUSH
85118: CALL_OW 1
85122: ST_TO_ADDR
// end ;
85123: LD_VAR 0 3
85127: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
85128: LD_INT 0
85130: PPUSH
// if not mc_bases [ base ] then
85131: LD_EXP 36
85135: PUSH
85136: LD_VAR 0 1
85140: ARRAY
85141: NOT
85142: IFFALSE 85146
// exit ;
85144: GO 85171
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
85146: LD_ADDR_EXP 57
85150: PUSH
85151: LD_EXP 57
85155: PPUSH
85156: LD_VAR 0 1
85160: PPUSH
85161: LD_VAR 0 2
85165: PPUSH
85166: CALL_OW 1
85170: ST_TO_ADDR
// end ;
85171: LD_VAR 0 3
85175: RET
// export function MC_InsertProduceList ( base , components ) ; begin
85176: LD_INT 0
85178: PPUSH
// if not mc_bases [ base ] then
85179: LD_EXP 36
85183: PUSH
85184: LD_VAR 0 1
85188: ARRAY
85189: NOT
85190: IFFALSE 85194
// exit ;
85192: GO 85231
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
85194: LD_ADDR_EXP 57
85198: PUSH
85199: LD_EXP 57
85203: PPUSH
85204: LD_VAR 0 1
85208: PPUSH
85209: LD_EXP 57
85213: PUSH
85214: LD_VAR 0 1
85218: ARRAY
85219: PUSH
85220: LD_VAR 0 2
85224: ADD
85225: PPUSH
85226: CALL_OW 1
85230: ST_TO_ADDR
// end ;
85231: LD_VAR 0 3
85235: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
85236: LD_INT 0
85238: PPUSH
// if not mc_bases [ base ] then
85239: LD_EXP 36
85243: PUSH
85244: LD_VAR 0 1
85248: ARRAY
85249: NOT
85250: IFFALSE 85254
// exit ;
85252: GO 85308
// mc_defender := Replace ( mc_defender , base , deflist ) ;
85254: LD_ADDR_EXP 58
85258: PUSH
85259: LD_EXP 58
85263: PPUSH
85264: LD_VAR 0 1
85268: PPUSH
85269: LD_VAR 0 2
85273: PPUSH
85274: CALL_OW 1
85278: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
85279: LD_ADDR_EXP 47
85283: PUSH
85284: LD_EXP 47
85288: PPUSH
85289: LD_VAR 0 1
85293: PPUSH
85294: LD_VAR 0 2
85298: PUSH
85299: LD_INT 0
85301: PLUS
85302: PPUSH
85303: CALL_OW 1
85307: ST_TO_ADDR
// end ;
85308: LD_VAR 0 3
85312: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
85313: LD_INT 0
85315: PPUSH
// if not mc_bases [ base ] then
85316: LD_EXP 36
85320: PUSH
85321: LD_VAR 0 1
85325: ARRAY
85326: NOT
85327: IFFALSE 85331
// exit ;
85329: GO 85356
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
85331: LD_ADDR_EXP 47
85335: PUSH
85336: LD_EXP 47
85340: PPUSH
85341: LD_VAR 0 1
85345: PPUSH
85346: LD_VAR 0 2
85350: PPUSH
85351: CALL_OW 1
85355: ST_TO_ADDR
// end ;
85356: LD_VAR 0 3
85360: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
85361: LD_INT 0
85363: PPUSH
85364: PPUSH
85365: PPUSH
85366: PPUSH
// if not mc_bases [ base ] then
85367: LD_EXP 36
85371: PUSH
85372: LD_VAR 0 1
85376: ARRAY
85377: NOT
85378: IFFALSE 85382
// exit ;
85380: GO 85447
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
85382: LD_ADDR_EXP 56
85386: PUSH
85387: LD_EXP 56
85391: PPUSH
85392: LD_VAR 0 1
85396: PUSH
85397: LD_EXP 56
85401: PUSH
85402: LD_VAR 0 1
85406: ARRAY
85407: PUSH
85408: LD_INT 1
85410: PLUS
85411: PUSH
85412: EMPTY
85413: LIST
85414: LIST
85415: PPUSH
85416: LD_VAR 0 1
85420: PUSH
85421: LD_VAR 0 2
85425: PUSH
85426: LD_VAR 0 3
85430: PUSH
85431: LD_VAR 0 4
85435: PUSH
85436: EMPTY
85437: LIST
85438: LIST
85439: LIST
85440: LIST
85441: PPUSH
85442: CALL 26071 0 3
85446: ST_TO_ADDR
// end ;
85447: LD_VAR 0 5
85451: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
85452: LD_INT 0
85454: PPUSH
// if not mc_bases [ base ] then
85455: LD_EXP 36
85459: PUSH
85460: LD_VAR 0 1
85464: ARRAY
85465: NOT
85466: IFFALSE 85470
// exit ;
85468: GO 85495
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
85470: LD_ADDR_EXP 73
85474: PUSH
85475: LD_EXP 73
85479: PPUSH
85480: LD_VAR 0 1
85484: PPUSH
85485: LD_VAR 0 2
85489: PPUSH
85490: CALL_OW 1
85494: ST_TO_ADDR
// end ;
85495: LD_VAR 0 3
85499: RET
// export function MC_GetMinesField ( base ) ; begin
85500: LD_INT 0
85502: PPUSH
// result := mc_mines [ base ] ;
85503: LD_ADDR_VAR 0 2
85507: PUSH
85508: LD_EXP 49
85512: PUSH
85513: LD_VAR 0 1
85517: ARRAY
85518: ST_TO_ADDR
// end ;
85519: LD_VAR 0 2
85523: RET
// export function MC_GetProduceList ( base ) ; begin
85524: LD_INT 0
85526: PPUSH
// result := mc_produce [ base ] ;
85527: LD_ADDR_VAR 0 2
85531: PUSH
85532: LD_EXP 57
85536: PUSH
85537: LD_VAR 0 1
85541: ARRAY
85542: ST_TO_ADDR
// end ;
85543: LD_VAR 0 2
85547: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
85548: LD_INT 0
85550: PPUSH
85551: PPUSH
// if not mc_bases then
85552: LD_EXP 36
85556: NOT
85557: IFFALSE 85561
// exit ;
85559: GO 85626
// if mc_bases [ base ] then
85561: LD_EXP 36
85565: PUSH
85566: LD_VAR 0 1
85570: ARRAY
85571: IFFALSE 85626
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
85573: LD_ADDR_VAR 0 3
85577: PUSH
85578: LD_EXP 36
85582: PUSH
85583: LD_VAR 0 1
85587: ARRAY
85588: PPUSH
85589: LD_INT 30
85591: PUSH
85592: LD_VAR 0 2
85596: PUSH
85597: EMPTY
85598: LIST
85599: LIST
85600: PPUSH
85601: CALL_OW 72
85605: ST_TO_ADDR
// if result then
85606: LD_VAR 0 3
85610: IFFALSE 85626
// result := result [ 1 ] ;
85612: LD_ADDR_VAR 0 3
85616: PUSH
85617: LD_VAR 0 3
85621: PUSH
85622: LD_INT 1
85624: ARRAY
85625: ST_TO_ADDR
// end ; end ;
85626: LD_VAR 0 3
85630: RET
// export function MC_SetTame ( base , area ) ; begin
85631: LD_INT 0
85633: PPUSH
// if not mc_bases or not base then
85634: LD_EXP 36
85638: NOT
85639: PUSH
85640: LD_VAR 0 1
85644: NOT
85645: OR
85646: IFFALSE 85650
// exit ;
85648: GO 85675
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
85650: LD_ADDR_EXP 64
85654: PUSH
85655: LD_EXP 64
85659: PPUSH
85660: LD_VAR 0 1
85664: PPUSH
85665: LD_VAR 0 2
85669: PPUSH
85670: CALL_OW 1
85674: ST_TO_ADDR
// end ;
85675: LD_VAR 0 3
85679: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
85680: LD_INT 0
85682: PPUSH
85683: PPUSH
// if not mc_bases or not base then
85684: LD_EXP 36
85688: NOT
85689: PUSH
85690: LD_VAR 0 1
85694: NOT
85695: OR
85696: IFFALSE 85700
// exit ;
85698: GO 85802
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
85700: LD_ADDR_VAR 0 4
85704: PUSH
85705: LD_EXP 36
85709: PUSH
85710: LD_VAR 0 1
85714: ARRAY
85715: PPUSH
85716: LD_INT 30
85718: PUSH
85719: LD_VAR 0 2
85723: PUSH
85724: EMPTY
85725: LIST
85726: LIST
85727: PPUSH
85728: CALL_OW 72
85732: ST_TO_ADDR
// if not tmp then
85733: LD_VAR 0 4
85737: NOT
85738: IFFALSE 85742
// exit ;
85740: GO 85802
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
85742: LD_ADDR_EXP 68
85746: PUSH
85747: LD_EXP 68
85751: PPUSH
85752: LD_VAR 0 1
85756: PPUSH
85757: LD_EXP 68
85761: PUSH
85762: LD_VAR 0 1
85766: ARRAY
85767: PPUSH
85768: LD_EXP 68
85772: PUSH
85773: LD_VAR 0 1
85777: ARRAY
85778: PUSH
85779: LD_INT 1
85781: PLUS
85782: PPUSH
85783: LD_VAR 0 4
85787: PUSH
85788: LD_INT 1
85790: ARRAY
85791: PPUSH
85792: CALL_OW 2
85796: PPUSH
85797: CALL_OW 1
85801: ST_TO_ADDR
// end ;
85802: LD_VAR 0 3
85806: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
85807: LD_INT 0
85809: PPUSH
85810: PPUSH
// if not mc_bases or not base or not kinds then
85811: LD_EXP 36
85815: NOT
85816: PUSH
85817: LD_VAR 0 1
85821: NOT
85822: OR
85823: PUSH
85824: LD_VAR 0 2
85828: NOT
85829: OR
85830: IFFALSE 85834
// exit ;
85832: GO 85895
// for i in kinds do
85834: LD_ADDR_VAR 0 4
85838: PUSH
85839: LD_VAR 0 2
85843: PUSH
85844: FOR_IN
85845: IFFALSE 85893
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
85847: LD_ADDR_EXP 70
85851: PUSH
85852: LD_EXP 70
85856: PPUSH
85857: LD_VAR 0 1
85861: PUSH
85862: LD_EXP 70
85866: PUSH
85867: LD_VAR 0 1
85871: ARRAY
85872: PUSH
85873: LD_INT 1
85875: PLUS
85876: PUSH
85877: EMPTY
85878: LIST
85879: LIST
85880: PPUSH
85881: LD_VAR 0 4
85885: PPUSH
85886: CALL 26071 0 3
85890: ST_TO_ADDR
85891: GO 85844
85893: POP
85894: POP
// end ;
85895: LD_VAR 0 3
85899: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
85900: LD_INT 0
85902: PPUSH
// if not mc_bases or not base or not areas then
85903: LD_EXP 36
85907: NOT
85908: PUSH
85909: LD_VAR 0 1
85913: NOT
85914: OR
85915: PUSH
85916: LD_VAR 0 2
85920: NOT
85921: OR
85922: IFFALSE 85926
// exit ;
85924: GO 85951
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
85926: LD_ADDR_EXP 54
85930: PUSH
85931: LD_EXP 54
85935: PPUSH
85936: LD_VAR 0 1
85940: PPUSH
85941: LD_VAR 0 2
85945: PPUSH
85946: CALL_OW 1
85950: ST_TO_ADDR
// end ;
85951: LD_VAR 0 3
85955: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
85956: LD_INT 0
85958: PPUSH
// if not mc_bases or not base or not teleports_exit then
85959: LD_EXP 36
85963: NOT
85964: PUSH
85965: LD_VAR 0 1
85969: NOT
85970: OR
85971: PUSH
85972: LD_VAR 0 2
85976: NOT
85977: OR
85978: IFFALSE 85982
// exit ;
85980: GO 86007
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
85982: LD_ADDR_EXP 71
85986: PUSH
85987: LD_EXP 71
85991: PPUSH
85992: LD_VAR 0 1
85996: PPUSH
85997: LD_VAR 0 2
86001: PPUSH
86002: CALL_OW 1
86006: ST_TO_ADDR
// end ;
86007: LD_VAR 0 3
86011: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
86012: LD_INT 0
86014: PPUSH
86015: PPUSH
86016: PPUSH
// if not mc_bases or not base or not ext_list then
86017: LD_EXP 36
86021: NOT
86022: PUSH
86023: LD_VAR 0 1
86027: NOT
86028: OR
86029: PUSH
86030: LD_VAR 0 5
86034: NOT
86035: OR
86036: IFFALSE 86040
// exit ;
86038: GO 86213
// tmp := GetFacExtXYD ( x , y , d ) ;
86040: LD_ADDR_VAR 0 8
86044: PUSH
86045: LD_VAR 0 2
86049: PPUSH
86050: LD_VAR 0 3
86054: PPUSH
86055: LD_VAR 0 4
86059: PPUSH
86060: CALL 59449 0 3
86064: ST_TO_ADDR
// if not tmp then
86065: LD_VAR 0 8
86069: NOT
86070: IFFALSE 86074
// exit ;
86072: GO 86213
// for i in tmp do
86074: LD_ADDR_VAR 0 7
86078: PUSH
86079: LD_VAR 0 8
86083: PUSH
86084: FOR_IN
86085: IFFALSE 86211
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
86087: LD_ADDR_EXP 41
86091: PUSH
86092: LD_EXP 41
86096: PPUSH
86097: LD_VAR 0 1
86101: PPUSH
86102: LD_EXP 41
86106: PUSH
86107: LD_VAR 0 1
86111: ARRAY
86112: PPUSH
86113: LD_EXP 41
86117: PUSH
86118: LD_VAR 0 1
86122: ARRAY
86123: PUSH
86124: LD_INT 1
86126: PLUS
86127: PPUSH
86128: LD_VAR 0 5
86132: PUSH
86133: LD_INT 1
86135: ARRAY
86136: PUSH
86137: LD_VAR 0 7
86141: PUSH
86142: LD_INT 1
86144: ARRAY
86145: PUSH
86146: LD_VAR 0 7
86150: PUSH
86151: LD_INT 2
86153: ARRAY
86154: PUSH
86155: LD_VAR 0 7
86159: PUSH
86160: LD_INT 3
86162: ARRAY
86163: PUSH
86164: EMPTY
86165: LIST
86166: LIST
86167: LIST
86168: LIST
86169: PPUSH
86170: CALL_OW 2
86174: PPUSH
86175: CALL_OW 1
86179: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
86180: LD_ADDR_VAR 0 5
86184: PUSH
86185: LD_VAR 0 5
86189: PPUSH
86190: LD_INT 1
86192: PPUSH
86193: CALL_OW 3
86197: ST_TO_ADDR
// if not ext_list then
86198: LD_VAR 0 5
86202: NOT
86203: IFFALSE 86209
// exit ;
86205: POP
86206: POP
86207: GO 86213
// end ;
86209: GO 86084
86211: POP
86212: POP
// end ;
86213: LD_VAR 0 6
86217: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
86218: LD_INT 0
86220: PPUSH
// if not mc_bases or not base or not weapon_list then
86221: LD_EXP 36
86225: NOT
86226: PUSH
86227: LD_VAR 0 1
86231: NOT
86232: OR
86233: PUSH
86234: LD_VAR 0 2
86238: NOT
86239: OR
86240: IFFALSE 86244
// exit ;
86242: GO 86269
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
86244: LD_ADDR_EXP 75
86248: PUSH
86249: LD_EXP 75
86253: PPUSH
86254: LD_VAR 0 1
86258: PPUSH
86259: LD_VAR 0 2
86263: PPUSH
86264: CALL_OW 1
86268: ST_TO_ADDR
// end ;
86269: LD_VAR 0 3
86273: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
86274: LD_INT 0
86276: PPUSH
// if not mc_bases or not base or not tech_list then
86277: LD_EXP 36
86281: NOT
86282: PUSH
86283: LD_VAR 0 1
86287: NOT
86288: OR
86289: PUSH
86290: LD_VAR 0 2
86294: NOT
86295: OR
86296: IFFALSE 86300
// exit ;
86298: GO 86325
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
86300: LD_ADDR_EXP 63
86304: PUSH
86305: LD_EXP 63
86309: PPUSH
86310: LD_VAR 0 1
86314: PPUSH
86315: LD_VAR 0 2
86319: PPUSH
86320: CALL_OW 1
86324: ST_TO_ADDR
// end ;
86325: LD_VAR 0 3
86329: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
86330: LD_INT 0
86332: PPUSH
// if not mc_bases or not parking_area or not base then
86333: LD_EXP 36
86337: NOT
86338: PUSH
86339: LD_VAR 0 2
86343: NOT
86344: OR
86345: PUSH
86346: LD_VAR 0 1
86350: NOT
86351: OR
86352: IFFALSE 86356
// exit ;
86354: GO 86381
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
86356: LD_ADDR_EXP 60
86360: PUSH
86361: LD_EXP 60
86365: PPUSH
86366: LD_VAR 0 1
86370: PPUSH
86371: LD_VAR 0 2
86375: PPUSH
86376: CALL_OW 1
86380: ST_TO_ADDR
// end ;
86381: LD_VAR 0 3
86385: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
86386: LD_INT 0
86388: PPUSH
// if not mc_bases or not base or not scan_area then
86389: LD_EXP 36
86393: NOT
86394: PUSH
86395: LD_VAR 0 1
86399: NOT
86400: OR
86401: PUSH
86402: LD_VAR 0 2
86406: NOT
86407: OR
86408: IFFALSE 86412
// exit ;
86410: GO 86437
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
86412: LD_ADDR_EXP 61
86416: PUSH
86417: LD_EXP 61
86421: PPUSH
86422: LD_VAR 0 1
86426: PPUSH
86427: LD_VAR 0 2
86431: PPUSH
86432: CALL_OW 1
86436: ST_TO_ADDR
// end ;
86437: LD_VAR 0 3
86441: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
86442: LD_INT 0
86444: PPUSH
86445: PPUSH
// if not mc_bases or not base then
86446: LD_EXP 36
86450: NOT
86451: PUSH
86452: LD_VAR 0 1
86456: NOT
86457: OR
86458: IFFALSE 86462
// exit ;
86460: GO 86526
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
86462: LD_ADDR_VAR 0 3
86466: PUSH
86467: LD_INT 1
86469: PUSH
86470: LD_INT 2
86472: PUSH
86473: LD_INT 3
86475: PUSH
86476: LD_INT 4
86478: PUSH
86479: LD_INT 11
86481: PUSH
86482: EMPTY
86483: LIST
86484: LIST
86485: LIST
86486: LIST
86487: LIST
86488: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
86489: LD_ADDR_EXP 63
86493: PUSH
86494: LD_EXP 63
86498: PPUSH
86499: LD_VAR 0 1
86503: PPUSH
86504: LD_EXP 63
86508: PUSH
86509: LD_VAR 0 1
86513: ARRAY
86514: PUSH
86515: LD_VAR 0 3
86519: DIFF
86520: PPUSH
86521: CALL_OW 1
86525: ST_TO_ADDR
// end ;
86526: LD_VAR 0 2
86530: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
86531: LD_INT 0
86533: PPUSH
// result := mc_vehicles [ base ] ;
86534: LD_ADDR_VAR 0 3
86538: PUSH
86539: LD_EXP 55
86543: PUSH
86544: LD_VAR 0 1
86548: ARRAY
86549: ST_TO_ADDR
// if onlyCombat then
86550: LD_VAR 0 2
86554: IFFALSE 86719
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
86556: LD_ADDR_VAR 0 3
86560: PUSH
86561: LD_VAR 0 3
86565: PUSH
86566: LD_VAR 0 3
86570: PPUSH
86571: LD_INT 2
86573: PUSH
86574: LD_INT 34
86576: PUSH
86577: LD_INT 12
86579: PUSH
86580: EMPTY
86581: LIST
86582: LIST
86583: PUSH
86584: LD_INT 34
86586: PUSH
86587: LD_INT 51
86589: PUSH
86590: EMPTY
86591: LIST
86592: LIST
86593: PUSH
86594: LD_INT 34
86596: PUSH
86597: LD_EXP 30
86601: PUSH
86602: EMPTY
86603: LIST
86604: LIST
86605: PUSH
86606: LD_INT 34
86608: PUSH
86609: LD_INT 32
86611: PUSH
86612: EMPTY
86613: LIST
86614: LIST
86615: PUSH
86616: LD_INT 34
86618: PUSH
86619: LD_INT 13
86621: PUSH
86622: EMPTY
86623: LIST
86624: LIST
86625: PUSH
86626: LD_INT 34
86628: PUSH
86629: LD_INT 52
86631: PUSH
86632: EMPTY
86633: LIST
86634: LIST
86635: PUSH
86636: LD_INT 34
86638: PUSH
86639: LD_INT 14
86641: PUSH
86642: EMPTY
86643: LIST
86644: LIST
86645: PUSH
86646: LD_INT 34
86648: PUSH
86649: LD_INT 53
86651: PUSH
86652: EMPTY
86653: LIST
86654: LIST
86655: PUSH
86656: LD_INT 34
86658: PUSH
86659: LD_EXP 29
86663: PUSH
86664: EMPTY
86665: LIST
86666: LIST
86667: PUSH
86668: LD_INT 34
86670: PUSH
86671: LD_INT 31
86673: PUSH
86674: EMPTY
86675: LIST
86676: LIST
86677: PUSH
86678: LD_INT 34
86680: PUSH
86681: LD_INT 48
86683: PUSH
86684: EMPTY
86685: LIST
86686: LIST
86687: PUSH
86688: LD_INT 34
86690: PUSH
86691: LD_INT 8
86693: PUSH
86694: EMPTY
86695: LIST
86696: LIST
86697: PUSH
86698: EMPTY
86699: LIST
86700: LIST
86701: LIST
86702: LIST
86703: LIST
86704: LIST
86705: LIST
86706: LIST
86707: LIST
86708: LIST
86709: LIST
86710: LIST
86711: LIST
86712: PPUSH
86713: CALL_OW 72
86717: DIFF
86718: ST_TO_ADDR
// end ; end_of_file
86719: LD_VAR 0 3
86723: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
86724: LD_INT 0
86726: PPUSH
86727: PPUSH
86728: PPUSH
// if not mc_bases or not skirmish then
86729: LD_EXP 36
86733: NOT
86734: PUSH
86735: LD_EXP 34
86739: NOT
86740: OR
86741: IFFALSE 86745
// exit ;
86743: GO 86910
// for i = 1 to mc_bases do
86745: LD_ADDR_VAR 0 4
86749: PUSH
86750: DOUBLE
86751: LD_INT 1
86753: DEC
86754: ST_TO_ADDR
86755: LD_EXP 36
86759: PUSH
86760: FOR_TO
86761: IFFALSE 86908
// begin if sci in mc_bases [ i ] then
86763: LD_VAR 0 2
86767: PUSH
86768: LD_EXP 36
86772: PUSH
86773: LD_VAR 0 4
86777: ARRAY
86778: IN
86779: IFFALSE 86906
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
86781: LD_ADDR_EXP 65
86785: PUSH
86786: LD_EXP 65
86790: PPUSH
86791: LD_VAR 0 4
86795: PUSH
86796: LD_EXP 65
86800: PUSH
86801: LD_VAR 0 4
86805: ARRAY
86806: PUSH
86807: LD_INT 1
86809: PLUS
86810: PUSH
86811: EMPTY
86812: LIST
86813: LIST
86814: PPUSH
86815: LD_VAR 0 1
86819: PPUSH
86820: CALL 26071 0 3
86824: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
86825: LD_ADDR_VAR 0 5
86829: PUSH
86830: LD_EXP 36
86834: PUSH
86835: LD_VAR 0 4
86839: ARRAY
86840: PPUSH
86841: LD_INT 2
86843: PUSH
86844: LD_INT 30
86846: PUSH
86847: LD_INT 0
86849: PUSH
86850: EMPTY
86851: LIST
86852: LIST
86853: PUSH
86854: LD_INT 30
86856: PUSH
86857: LD_INT 1
86859: PUSH
86860: EMPTY
86861: LIST
86862: LIST
86863: PUSH
86864: EMPTY
86865: LIST
86866: LIST
86867: LIST
86868: PPUSH
86869: CALL_OW 72
86873: PPUSH
86874: LD_VAR 0 1
86878: PPUSH
86879: CALL_OW 74
86883: ST_TO_ADDR
// if tmp then
86884: LD_VAR 0 5
86888: IFFALSE 86904
// ComStandNearbyBuilding ( ape , tmp ) ;
86890: LD_VAR 0 1
86894: PPUSH
86895: LD_VAR 0 5
86899: PPUSH
86900: CALL 20778 0 2
// break ;
86904: GO 86908
// end ; end ;
86906: GO 86760
86908: POP
86909: POP
// end ;
86910: LD_VAR 0 3
86914: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
86915: LD_INT 0
86917: PPUSH
86918: PPUSH
86919: PPUSH
// if not mc_bases or not skirmish then
86920: LD_EXP 36
86924: NOT
86925: PUSH
86926: LD_EXP 34
86930: NOT
86931: OR
86932: IFFALSE 86936
// exit ;
86934: GO 87025
// for i = 1 to mc_bases do
86936: LD_ADDR_VAR 0 4
86940: PUSH
86941: DOUBLE
86942: LD_INT 1
86944: DEC
86945: ST_TO_ADDR
86946: LD_EXP 36
86950: PUSH
86951: FOR_TO
86952: IFFALSE 87023
// begin if building in mc_busy_turret_list [ i ] then
86954: LD_VAR 0 1
86958: PUSH
86959: LD_EXP 46
86963: PUSH
86964: LD_VAR 0 4
86968: ARRAY
86969: IN
86970: IFFALSE 87021
// begin tmp := mc_busy_turret_list [ i ] diff building ;
86972: LD_ADDR_VAR 0 5
86976: PUSH
86977: LD_EXP 46
86981: PUSH
86982: LD_VAR 0 4
86986: ARRAY
86987: PUSH
86988: LD_VAR 0 1
86992: DIFF
86993: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
86994: LD_ADDR_EXP 46
86998: PUSH
86999: LD_EXP 46
87003: PPUSH
87004: LD_VAR 0 4
87008: PPUSH
87009: LD_VAR 0 5
87013: PPUSH
87014: CALL_OW 1
87018: ST_TO_ADDR
// break ;
87019: GO 87023
// end ; end ;
87021: GO 86951
87023: POP
87024: POP
// end ;
87025: LD_VAR 0 3
87029: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
87030: LD_INT 0
87032: PPUSH
87033: PPUSH
87034: PPUSH
// if not mc_bases or not skirmish then
87035: LD_EXP 36
87039: NOT
87040: PUSH
87041: LD_EXP 34
87045: NOT
87046: OR
87047: IFFALSE 87051
// exit ;
87049: GO 87250
// for i = 1 to mc_bases do
87051: LD_ADDR_VAR 0 5
87055: PUSH
87056: DOUBLE
87057: LD_INT 1
87059: DEC
87060: ST_TO_ADDR
87061: LD_EXP 36
87065: PUSH
87066: FOR_TO
87067: IFFALSE 87248
// if building in mc_bases [ i ] then
87069: LD_VAR 0 1
87073: PUSH
87074: LD_EXP 36
87078: PUSH
87079: LD_VAR 0 5
87083: ARRAY
87084: IN
87085: IFFALSE 87246
// begin tmp := mc_bases [ i ] diff building ;
87087: LD_ADDR_VAR 0 6
87091: PUSH
87092: LD_EXP 36
87096: PUSH
87097: LD_VAR 0 5
87101: ARRAY
87102: PUSH
87103: LD_VAR 0 1
87107: DIFF
87108: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
87109: LD_ADDR_EXP 36
87113: PUSH
87114: LD_EXP 36
87118: PPUSH
87119: LD_VAR 0 5
87123: PPUSH
87124: LD_VAR 0 6
87128: PPUSH
87129: CALL_OW 1
87133: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
87134: LD_VAR 0 1
87138: PUSH
87139: LD_EXP 44
87143: PUSH
87144: LD_VAR 0 5
87148: ARRAY
87149: IN
87150: IFFALSE 87189
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
87152: LD_ADDR_EXP 44
87156: PUSH
87157: LD_EXP 44
87161: PPUSH
87162: LD_VAR 0 5
87166: PPUSH
87167: LD_EXP 44
87171: PUSH
87172: LD_VAR 0 5
87176: ARRAY
87177: PUSH
87178: LD_VAR 0 1
87182: DIFF
87183: PPUSH
87184: CALL_OW 1
87188: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
87189: LD_VAR 0 1
87193: PUSH
87194: LD_EXP 45
87198: PUSH
87199: LD_VAR 0 5
87203: ARRAY
87204: IN
87205: IFFALSE 87244
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
87207: LD_ADDR_EXP 45
87211: PUSH
87212: LD_EXP 45
87216: PPUSH
87217: LD_VAR 0 5
87221: PPUSH
87222: LD_EXP 45
87226: PUSH
87227: LD_VAR 0 5
87231: ARRAY
87232: PUSH
87233: LD_VAR 0 1
87237: DIFF
87238: PPUSH
87239: CALL_OW 1
87243: ST_TO_ADDR
// break ;
87244: GO 87248
// end ;
87246: GO 87066
87248: POP
87249: POP
// end ;
87250: LD_VAR 0 4
87254: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
87255: LD_INT 0
87257: PPUSH
87258: PPUSH
87259: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
87260: LD_EXP 36
87264: NOT
87265: PUSH
87266: LD_EXP 34
87270: NOT
87271: OR
87272: PUSH
87273: LD_VAR 0 3
87277: PUSH
87278: LD_EXP 62
87282: IN
87283: NOT
87284: OR
87285: IFFALSE 87289
// exit ;
87287: GO 87412
// for i = 1 to mc_vehicles do
87289: LD_ADDR_VAR 0 6
87293: PUSH
87294: DOUBLE
87295: LD_INT 1
87297: DEC
87298: ST_TO_ADDR
87299: LD_EXP 55
87303: PUSH
87304: FOR_TO
87305: IFFALSE 87410
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
87307: LD_VAR 0 2
87311: PUSH
87312: LD_EXP 55
87316: PUSH
87317: LD_VAR 0 6
87321: ARRAY
87322: IN
87323: PUSH
87324: LD_VAR 0 1
87328: PUSH
87329: LD_EXP 55
87333: PUSH
87334: LD_VAR 0 6
87338: ARRAY
87339: IN
87340: OR
87341: IFFALSE 87408
// begin tmp := mc_vehicles [ i ] diff old ;
87343: LD_ADDR_VAR 0 7
87347: PUSH
87348: LD_EXP 55
87352: PUSH
87353: LD_VAR 0 6
87357: ARRAY
87358: PUSH
87359: LD_VAR 0 2
87363: DIFF
87364: ST_TO_ADDR
// tmp := tmp diff new ;
87365: LD_ADDR_VAR 0 7
87369: PUSH
87370: LD_VAR 0 7
87374: PUSH
87375: LD_VAR 0 1
87379: DIFF
87380: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
87381: LD_ADDR_EXP 55
87385: PUSH
87386: LD_EXP 55
87390: PPUSH
87391: LD_VAR 0 6
87395: PPUSH
87396: LD_VAR 0 7
87400: PPUSH
87401: CALL_OW 1
87405: ST_TO_ADDR
// break ;
87406: GO 87410
// end ;
87408: GO 87304
87410: POP
87411: POP
// end ;
87412: LD_VAR 0 5
87416: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
87417: LD_INT 0
87419: PPUSH
87420: PPUSH
87421: PPUSH
87422: PPUSH
// if not mc_bases or not skirmish then
87423: LD_EXP 36
87427: NOT
87428: PUSH
87429: LD_EXP 34
87433: NOT
87434: OR
87435: IFFALSE 87439
// exit ;
87437: GO 87816
// side := GetSide ( vehicle ) ;
87439: LD_ADDR_VAR 0 5
87443: PUSH
87444: LD_VAR 0 1
87448: PPUSH
87449: CALL_OW 255
87453: ST_TO_ADDR
// for i = 1 to mc_bases do
87454: LD_ADDR_VAR 0 4
87458: PUSH
87459: DOUBLE
87460: LD_INT 1
87462: DEC
87463: ST_TO_ADDR
87464: LD_EXP 36
87468: PUSH
87469: FOR_TO
87470: IFFALSE 87814
// begin if factory in mc_bases [ i ] then
87472: LD_VAR 0 2
87476: PUSH
87477: LD_EXP 36
87481: PUSH
87482: LD_VAR 0 4
87486: ARRAY
87487: IN
87488: IFFALSE 87812
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
87490: LD_EXP 58
87494: PUSH
87495: LD_VAR 0 4
87499: ARRAY
87500: PUSH
87501: LD_EXP 47
87505: PUSH
87506: LD_VAR 0 4
87510: ARRAY
87511: LESS
87512: PUSH
87513: LD_VAR 0 1
87517: PPUSH
87518: CALL_OW 264
87522: PUSH
87523: LD_INT 31
87525: PUSH
87526: LD_INT 32
87528: PUSH
87529: LD_INT 51
87531: PUSH
87532: LD_EXP 30
87536: PUSH
87537: LD_INT 12
87539: PUSH
87540: LD_INT 30
87542: PUSH
87543: LD_EXP 29
87547: PUSH
87548: LD_INT 11
87550: PUSH
87551: LD_INT 53
87553: PUSH
87554: LD_INT 14
87556: PUSH
87557: LD_EXP 33
87561: PUSH
87562: LD_INT 29
87564: PUSH
87565: LD_EXP 31
87569: PUSH
87570: LD_INT 13
87572: PUSH
87573: LD_INT 52
87575: PUSH
87576: LD_INT 48
87578: PUSH
87579: LD_INT 8
87581: PUSH
87582: EMPTY
87583: LIST
87584: LIST
87585: LIST
87586: LIST
87587: LIST
87588: LIST
87589: LIST
87590: LIST
87591: LIST
87592: LIST
87593: LIST
87594: LIST
87595: LIST
87596: LIST
87597: LIST
87598: LIST
87599: LIST
87600: IN
87601: NOT
87602: AND
87603: IFFALSE 87651
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
87605: LD_ADDR_EXP 58
87609: PUSH
87610: LD_EXP 58
87614: PPUSH
87615: LD_VAR 0 4
87619: PUSH
87620: LD_EXP 58
87624: PUSH
87625: LD_VAR 0 4
87629: ARRAY
87630: PUSH
87631: LD_INT 1
87633: PLUS
87634: PUSH
87635: EMPTY
87636: LIST
87637: LIST
87638: PPUSH
87639: LD_VAR 0 1
87643: PPUSH
87644: CALL 26071 0 3
87648: ST_TO_ADDR
87649: GO 87695
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
87651: LD_ADDR_EXP 55
87655: PUSH
87656: LD_EXP 55
87660: PPUSH
87661: LD_VAR 0 4
87665: PUSH
87666: LD_EXP 55
87670: PUSH
87671: LD_VAR 0 4
87675: ARRAY
87676: PUSH
87677: LD_INT 1
87679: PLUS
87680: PUSH
87681: EMPTY
87682: LIST
87683: LIST
87684: PPUSH
87685: LD_VAR 0 1
87689: PPUSH
87690: CALL 26071 0 3
87694: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
87695: LD_VAR 0 1
87699: PPUSH
87700: CALL_OW 263
87704: PUSH
87705: LD_INT 2
87707: EQUAL
87708: IFFALSE 87728
// begin repeat wait ( 0 0$1 ) ;
87710: LD_INT 35
87712: PPUSH
87713: CALL_OW 67
// until IsControledBy ( vehicle ) ;
87717: LD_VAR 0 1
87721: PPUSH
87722: CALL_OW 312
87726: IFFALSE 87710
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
87728: LD_VAR 0 1
87732: PPUSH
87733: LD_EXP 60
87737: PUSH
87738: LD_VAR 0 4
87742: ARRAY
87743: PPUSH
87744: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
87748: LD_VAR 0 1
87752: PPUSH
87753: CALL_OW 263
87757: PUSH
87758: LD_INT 1
87760: NONEQUAL
87761: IFFALSE 87765
// break ;
87763: GO 87814
// repeat wait ( 0 0$1 ) ;
87765: LD_INT 35
87767: PPUSH
87768: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
87772: LD_VAR 0 1
87776: PPUSH
87777: LD_EXP 60
87781: PUSH
87782: LD_VAR 0 4
87786: ARRAY
87787: PPUSH
87788: CALL_OW 308
87792: IFFALSE 87765
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
87794: LD_VAR 0 1
87798: PPUSH
87799: CALL_OW 311
87803: PPUSH
87804: CALL_OW 121
// exit ;
87808: POP
87809: POP
87810: GO 87816
// end ; end ;
87812: GO 87469
87814: POP
87815: POP
// end ;
87816: LD_VAR 0 3
87820: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
87821: LD_INT 0
87823: PPUSH
87824: PPUSH
87825: PPUSH
87826: PPUSH
// if not mc_bases or not skirmish then
87827: LD_EXP 36
87831: NOT
87832: PUSH
87833: LD_EXP 34
87837: NOT
87838: OR
87839: IFFALSE 87843
// exit ;
87841: GO 88196
// repeat wait ( 0 0$1 ) ;
87843: LD_INT 35
87845: PPUSH
87846: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
87850: LD_VAR 0 2
87854: PPUSH
87855: LD_VAR 0 3
87859: PPUSH
87860: CALL_OW 284
87864: IFFALSE 87843
// if GetResourceTypeXY ( x , y ) = mat_artefact then
87866: LD_VAR 0 2
87870: PPUSH
87871: LD_VAR 0 3
87875: PPUSH
87876: CALL_OW 283
87880: PUSH
87881: LD_INT 4
87883: EQUAL
87884: IFFALSE 87888
// exit ;
87886: GO 88196
// for i = 1 to mc_bases do
87888: LD_ADDR_VAR 0 7
87892: PUSH
87893: DOUBLE
87894: LD_INT 1
87896: DEC
87897: ST_TO_ADDR
87898: LD_EXP 36
87902: PUSH
87903: FOR_TO
87904: IFFALSE 88194
// begin if mc_crates_area [ i ] then
87906: LD_EXP 54
87910: PUSH
87911: LD_VAR 0 7
87915: ARRAY
87916: IFFALSE 88027
// for j in mc_crates_area [ i ] do
87918: LD_ADDR_VAR 0 8
87922: PUSH
87923: LD_EXP 54
87927: PUSH
87928: LD_VAR 0 7
87932: ARRAY
87933: PUSH
87934: FOR_IN
87935: IFFALSE 88025
// if InArea ( x , y , j ) then
87937: LD_VAR 0 2
87941: PPUSH
87942: LD_VAR 0 3
87946: PPUSH
87947: LD_VAR 0 8
87951: PPUSH
87952: CALL_OW 309
87956: IFFALSE 88023
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
87958: LD_ADDR_EXP 52
87962: PUSH
87963: LD_EXP 52
87967: PPUSH
87968: LD_VAR 0 7
87972: PUSH
87973: LD_EXP 52
87977: PUSH
87978: LD_VAR 0 7
87982: ARRAY
87983: PUSH
87984: LD_INT 1
87986: PLUS
87987: PUSH
87988: EMPTY
87989: LIST
87990: LIST
87991: PPUSH
87992: LD_VAR 0 4
87996: PUSH
87997: LD_VAR 0 2
88001: PUSH
88002: LD_VAR 0 3
88006: PUSH
88007: EMPTY
88008: LIST
88009: LIST
88010: LIST
88011: PPUSH
88012: CALL 26071 0 3
88016: ST_TO_ADDR
// exit ;
88017: POP
88018: POP
88019: POP
88020: POP
88021: GO 88196
// end ;
88023: GO 87934
88025: POP
88026: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
88027: LD_ADDR_VAR 0 9
88031: PUSH
88032: LD_EXP 36
88036: PUSH
88037: LD_VAR 0 7
88041: ARRAY
88042: PPUSH
88043: LD_INT 2
88045: PUSH
88046: LD_INT 30
88048: PUSH
88049: LD_INT 0
88051: PUSH
88052: EMPTY
88053: LIST
88054: LIST
88055: PUSH
88056: LD_INT 30
88058: PUSH
88059: LD_INT 1
88061: PUSH
88062: EMPTY
88063: LIST
88064: LIST
88065: PUSH
88066: EMPTY
88067: LIST
88068: LIST
88069: LIST
88070: PPUSH
88071: CALL_OW 72
88075: ST_TO_ADDR
// if not depot then
88076: LD_VAR 0 9
88080: NOT
88081: IFFALSE 88085
// continue ;
88083: GO 87903
// for j in depot do
88085: LD_ADDR_VAR 0 8
88089: PUSH
88090: LD_VAR 0 9
88094: PUSH
88095: FOR_IN
88096: IFFALSE 88190
// if GetDistUnitXY ( j , x , y ) < 30 then
88098: LD_VAR 0 8
88102: PPUSH
88103: LD_VAR 0 2
88107: PPUSH
88108: LD_VAR 0 3
88112: PPUSH
88113: CALL_OW 297
88117: PUSH
88118: LD_INT 30
88120: LESS
88121: IFFALSE 88188
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88123: LD_ADDR_EXP 52
88127: PUSH
88128: LD_EXP 52
88132: PPUSH
88133: LD_VAR 0 7
88137: PUSH
88138: LD_EXP 52
88142: PUSH
88143: LD_VAR 0 7
88147: ARRAY
88148: PUSH
88149: LD_INT 1
88151: PLUS
88152: PUSH
88153: EMPTY
88154: LIST
88155: LIST
88156: PPUSH
88157: LD_VAR 0 4
88161: PUSH
88162: LD_VAR 0 2
88166: PUSH
88167: LD_VAR 0 3
88171: PUSH
88172: EMPTY
88173: LIST
88174: LIST
88175: LIST
88176: PPUSH
88177: CALL 26071 0 3
88181: ST_TO_ADDR
// exit ;
88182: POP
88183: POP
88184: POP
88185: POP
88186: GO 88196
// end ;
88188: GO 88095
88190: POP
88191: POP
// end ;
88192: GO 87903
88194: POP
88195: POP
// end ;
88196: LD_VAR 0 6
88200: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
88201: LD_INT 0
88203: PPUSH
88204: PPUSH
88205: PPUSH
88206: PPUSH
// if not mc_bases or not skirmish then
88207: LD_EXP 36
88211: NOT
88212: PUSH
88213: LD_EXP 34
88217: NOT
88218: OR
88219: IFFALSE 88223
// exit ;
88221: GO 88500
// side := GetSide ( lab ) ;
88223: LD_ADDR_VAR 0 4
88227: PUSH
88228: LD_VAR 0 2
88232: PPUSH
88233: CALL_OW 255
88237: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
88238: LD_VAR 0 4
88242: PUSH
88243: LD_EXP 62
88247: IN
88248: NOT
88249: PUSH
88250: LD_EXP 63
88254: NOT
88255: OR
88256: PUSH
88257: LD_EXP 36
88261: NOT
88262: OR
88263: IFFALSE 88267
// exit ;
88265: GO 88500
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
88267: LD_ADDR_EXP 63
88271: PUSH
88272: LD_EXP 63
88276: PPUSH
88277: LD_VAR 0 4
88281: PPUSH
88282: LD_EXP 63
88286: PUSH
88287: LD_VAR 0 4
88291: ARRAY
88292: PUSH
88293: LD_VAR 0 1
88297: DIFF
88298: PPUSH
88299: CALL_OW 1
88303: ST_TO_ADDR
// for i = 1 to mc_bases do
88304: LD_ADDR_VAR 0 5
88308: PUSH
88309: DOUBLE
88310: LD_INT 1
88312: DEC
88313: ST_TO_ADDR
88314: LD_EXP 36
88318: PUSH
88319: FOR_TO
88320: IFFALSE 88498
// begin if lab in mc_bases [ i ] then
88322: LD_VAR 0 2
88326: PUSH
88327: LD_EXP 36
88331: PUSH
88332: LD_VAR 0 5
88336: ARRAY
88337: IN
88338: IFFALSE 88496
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
88340: LD_VAR 0 1
88344: PUSH
88345: LD_INT 11
88347: PUSH
88348: LD_INT 4
88350: PUSH
88351: LD_INT 3
88353: PUSH
88354: LD_INT 2
88356: PUSH
88357: EMPTY
88358: LIST
88359: LIST
88360: LIST
88361: LIST
88362: IN
88363: PUSH
88364: LD_EXP 66
88368: PUSH
88369: LD_VAR 0 5
88373: ARRAY
88374: AND
88375: IFFALSE 88496
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
88377: LD_ADDR_VAR 0 6
88381: PUSH
88382: LD_EXP 66
88386: PUSH
88387: LD_VAR 0 5
88391: ARRAY
88392: PUSH
88393: LD_INT 1
88395: ARRAY
88396: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
88397: LD_ADDR_EXP 66
88401: PUSH
88402: LD_EXP 66
88406: PPUSH
88407: LD_VAR 0 5
88411: PPUSH
88412: EMPTY
88413: PPUSH
88414: CALL_OW 1
88418: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
88419: LD_VAR 0 6
88423: PPUSH
88424: LD_INT 0
88426: PPUSH
88427: CALL_OW 109
// ComExitBuilding ( tmp ) ;
88431: LD_VAR 0 6
88435: PPUSH
88436: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
88440: LD_ADDR_EXP 65
88444: PUSH
88445: LD_EXP 65
88449: PPUSH
88450: LD_VAR 0 5
88454: PPUSH
88455: LD_EXP 65
88459: PUSH
88460: LD_VAR 0 5
88464: ARRAY
88465: PPUSH
88466: LD_INT 1
88468: PPUSH
88469: LD_VAR 0 6
88473: PPUSH
88474: CALL_OW 2
88478: PPUSH
88479: CALL_OW 1
88483: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
88484: LD_VAR 0 5
88488: PPUSH
88489: LD_INT 112
88491: PPUSH
88492: CALL 66033 0 2
// end ; end ; end ;
88496: GO 88319
88498: POP
88499: POP
// end ;
88500: LD_VAR 0 3
88504: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
88505: LD_INT 0
88507: PPUSH
88508: PPUSH
88509: PPUSH
88510: PPUSH
88511: PPUSH
88512: PPUSH
88513: PPUSH
88514: PPUSH
// if not mc_bases or not skirmish then
88515: LD_EXP 36
88519: NOT
88520: PUSH
88521: LD_EXP 34
88525: NOT
88526: OR
88527: IFFALSE 88531
// exit ;
88529: GO 89623
// for i = 1 to mc_bases do
88531: LD_ADDR_VAR 0 3
88535: PUSH
88536: DOUBLE
88537: LD_INT 1
88539: DEC
88540: ST_TO_ADDR
88541: LD_EXP 36
88545: PUSH
88546: FOR_TO
88547: IFFALSE 89621
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
88549: LD_VAR 0 1
88553: PUSH
88554: LD_EXP 36
88558: PUSH
88559: LD_VAR 0 3
88563: ARRAY
88564: IN
88565: PUSH
88566: LD_VAR 0 1
88570: PUSH
88571: LD_EXP 43
88575: PUSH
88576: LD_VAR 0 3
88580: ARRAY
88581: IN
88582: OR
88583: PUSH
88584: LD_VAR 0 1
88588: PUSH
88589: LD_EXP 58
88593: PUSH
88594: LD_VAR 0 3
88598: ARRAY
88599: IN
88600: OR
88601: PUSH
88602: LD_VAR 0 1
88606: PUSH
88607: LD_EXP 55
88611: PUSH
88612: LD_VAR 0 3
88616: ARRAY
88617: IN
88618: OR
88619: PUSH
88620: LD_VAR 0 1
88624: PUSH
88625: LD_EXP 65
88629: PUSH
88630: LD_VAR 0 3
88634: ARRAY
88635: IN
88636: OR
88637: PUSH
88638: LD_VAR 0 1
88642: PUSH
88643: LD_EXP 66
88647: PUSH
88648: LD_VAR 0 3
88652: ARRAY
88653: IN
88654: OR
88655: IFFALSE 89619
// begin if un in mc_ape [ i ] then
88657: LD_VAR 0 1
88661: PUSH
88662: LD_EXP 65
88666: PUSH
88667: LD_VAR 0 3
88671: ARRAY
88672: IN
88673: IFFALSE 88712
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
88675: LD_ADDR_EXP 65
88679: PUSH
88680: LD_EXP 65
88684: PPUSH
88685: LD_VAR 0 3
88689: PPUSH
88690: LD_EXP 65
88694: PUSH
88695: LD_VAR 0 3
88699: ARRAY
88700: PUSH
88701: LD_VAR 0 1
88705: DIFF
88706: PPUSH
88707: CALL_OW 1
88711: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
88712: LD_VAR 0 1
88716: PUSH
88717: LD_EXP 66
88721: PUSH
88722: LD_VAR 0 3
88726: ARRAY
88727: IN
88728: IFFALSE 88752
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
88730: LD_ADDR_EXP 66
88734: PUSH
88735: LD_EXP 66
88739: PPUSH
88740: LD_VAR 0 3
88744: PPUSH
88745: EMPTY
88746: PPUSH
88747: CALL_OW 1
88751: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
88752: LD_VAR 0 1
88756: PPUSH
88757: CALL_OW 247
88761: PUSH
88762: LD_INT 2
88764: EQUAL
88765: PUSH
88766: LD_VAR 0 1
88770: PPUSH
88771: CALL_OW 110
88775: PUSH
88776: LD_INT 20
88778: EQUAL
88779: PUSH
88780: LD_VAR 0 1
88784: PUSH
88785: LD_EXP 58
88789: PUSH
88790: LD_VAR 0 3
88794: ARRAY
88795: IN
88796: OR
88797: AND
88798: IFFALSE 88959
// begin if un in mc_defender [ i ] then
88800: LD_VAR 0 1
88804: PUSH
88805: LD_EXP 58
88809: PUSH
88810: LD_VAR 0 3
88814: ARRAY
88815: IN
88816: IFFALSE 88855
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
88818: LD_ADDR_EXP 58
88822: PUSH
88823: LD_EXP 58
88827: PPUSH
88828: LD_VAR 0 3
88832: PPUSH
88833: LD_EXP 58
88837: PUSH
88838: LD_VAR 0 3
88842: ARRAY
88843: PUSH
88844: LD_VAR 0 1
88848: DIFF
88849: PPUSH
88850: CALL_OW 1
88854: ST_TO_ADDR
// fac := MC_GetBuilding ( i , b_factory ) ;
88855: LD_ADDR_VAR 0 8
88859: PUSH
88860: LD_VAR 0 3
88864: PPUSH
88865: LD_INT 3
88867: PPUSH
88868: CALL 85548 0 2
88872: ST_TO_ADDR
// if fac then
88873: LD_VAR 0 8
88877: IFFALSE 88959
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
88879: LD_ADDR_VAR 0 9
88883: PUSH
88884: LD_VAR 0 8
88888: PPUSH
88889: LD_VAR 0 1
88893: PPUSH
88894: CALL_OW 265
88898: PPUSH
88899: LD_VAR 0 1
88903: PPUSH
88904: CALL_OW 262
88908: PPUSH
88909: LD_VAR 0 1
88913: PPUSH
88914: CALL_OW 263
88918: PPUSH
88919: LD_VAR 0 1
88923: PPUSH
88924: CALL_OW 264
88928: PPUSH
88929: CALL 23664 0 5
88933: ST_TO_ADDR
// if components then
88934: LD_VAR 0 9
88938: IFFALSE 88957
// MC_InsertProduceList ( i , [ components ] ) ;
88940: LD_VAR 0 3
88944: PPUSH
88945: LD_VAR 0 9
88949: PUSH
88950: EMPTY
88951: LIST
88952: PPUSH
88953: CALL 85176 0 2
// break ;
88957: GO 89621
// end ; end ; if GetType ( un ) = unit_building then
88959: LD_VAR 0 1
88963: PPUSH
88964: CALL_OW 247
88968: PUSH
88969: LD_INT 3
88971: EQUAL
88972: IFFALSE 89287
// begin btype := GetBType ( un ) ;
88974: LD_ADDR_VAR 0 5
88978: PUSH
88979: LD_VAR 0 1
88983: PPUSH
88984: CALL_OW 266
88988: ST_TO_ADDR
// if btype = b_warehouse then
88989: LD_VAR 0 5
88993: PUSH
88994: LD_INT 1
88996: EQUAL
88997: IFFALSE 89015
// begin btype := b_depot ;
88999: LD_ADDR_VAR 0 5
89003: PUSH
89004: LD_INT 0
89006: ST_TO_ADDR
// pos := 1 ;
89007: LD_ADDR_VAR 0 6
89011: PUSH
89012: LD_INT 1
89014: ST_TO_ADDR
// end ; if btype = b_factory then
89015: LD_VAR 0 5
89019: PUSH
89020: LD_INT 3
89022: EQUAL
89023: IFFALSE 89041
// begin btype := b_workshop ;
89025: LD_ADDR_VAR 0 5
89029: PUSH
89030: LD_INT 2
89032: ST_TO_ADDR
// pos := 1 ;
89033: LD_ADDR_VAR 0 6
89037: PUSH
89038: LD_INT 1
89040: ST_TO_ADDR
// end ; if btype = b_barracks then
89041: LD_VAR 0 5
89045: PUSH
89046: LD_INT 5
89048: EQUAL
89049: IFFALSE 89059
// btype := b_armoury ;
89051: LD_ADDR_VAR 0 5
89055: PUSH
89056: LD_INT 4
89058: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
89059: LD_VAR 0 5
89063: PUSH
89064: LD_INT 7
89066: PUSH
89067: LD_INT 8
89069: PUSH
89070: EMPTY
89071: LIST
89072: LIST
89073: IN
89074: IFFALSE 89084
// btype := b_lab ;
89076: LD_ADDR_VAR 0 5
89080: PUSH
89081: LD_INT 6
89083: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
89084: LD_ADDR_EXP 41
89088: PUSH
89089: LD_EXP 41
89093: PPUSH
89094: LD_VAR 0 3
89098: PUSH
89099: LD_EXP 41
89103: PUSH
89104: LD_VAR 0 3
89108: ARRAY
89109: PUSH
89110: LD_INT 1
89112: PLUS
89113: PUSH
89114: EMPTY
89115: LIST
89116: LIST
89117: PPUSH
89118: LD_VAR 0 5
89122: PUSH
89123: LD_VAR 0 1
89127: PPUSH
89128: CALL_OW 250
89132: PUSH
89133: LD_VAR 0 1
89137: PPUSH
89138: CALL_OW 251
89142: PUSH
89143: LD_VAR 0 1
89147: PPUSH
89148: CALL_OW 254
89152: PUSH
89153: EMPTY
89154: LIST
89155: LIST
89156: LIST
89157: LIST
89158: PPUSH
89159: CALL 26071 0 3
89163: ST_TO_ADDR
// if pos = 1 then
89164: LD_VAR 0 6
89168: PUSH
89169: LD_INT 1
89171: EQUAL
89172: IFFALSE 89287
// begin tmp := mc_build_list [ i ] ;
89174: LD_ADDR_VAR 0 7
89178: PUSH
89179: LD_EXP 41
89183: PUSH
89184: LD_VAR 0 3
89188: ARRAY
89189: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
89190: LD_VAR 0 7
89194: PPUSH
89195: LD_INT 2
89197: PUSH
89198: LD_INT 30
89200: PUSH
89201: LD_INT 0
89203: PUSH
89204: EMPTY
89205: LIST
89206: LIST
89207: PUSH
89208: LD_INT 30
89210: PUSH
89211: LD_INT 1
89213: PUSH
89214: EMPTY
89215: LIST
89216: LIST
89217: PUSH
89218: EMPTY
89219: LIST
89220: LIST
89221: LIST
89222: PPUSH
89223: CALL_OW 72
89227: IFFALSE 89237
// pos := 2 ;
89229: LD_ADDR_VAR 0 6
89233: PUSH
89234: LD_INT 2
89236: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
89237: LD_ADDR_VAR 0 7
89241: PUSH
89242: LD_VAR 0 7
89246: PPUSH
89247: LD_VAR 0 6
89251: PPUSH
89252: LD_VAR 0 7
89256: PPUSH
89257: CALL 26397 0 3
89261: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
89262: LD_ADDR_EXP 41
89266: PUSH
89267: LD_EXP 41
89271: PPUSH
89272: LD_VAR 0 3
89276: PPUSH
89277: LD_VAR 0 7
89281: PPUSH
89282: CALL_OW 1
89286: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
89287: LD_VAR 0 1
89291: PUSH
89292: LD_EXP 36
89296: PUSH
89297: LD_VAR 0 3
89301: ARRAY
89302: IN
89303: IFFALSE 89342
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
89305: LD_ADDR_EXP 36
89309: PUSH
89310: LD_EXP 36
89314: PPUSH
89315: LD_VAR 0 3
89319: PPUSH
89320: LD_EXP 36
89324: PUSH
89325: LD_VAR 0 3
89329: ARRAY
89330: PUSH
89331: LD_VAR 0 1
89335: DIFF
89336: PPUSH
89337: CALL_OW 1
89341: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
89342: LD_VAR 0 1
89346: PUSH
89347: LD_EXP 43
89351: PUSH
89352: LD_VAR 0 3
89356: ARRAY
89357: IN
89358: IFFALSE 89397
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
89360: LD_ADDR_EXP 43
89364: PUSH
89365: LD_EXP 43
89369: PPUSH
89370: LD_VAR 0 3
89374: PPUSH
89375: LD_EXP 43
89379: PUSH
89380: LD_VAR 0 3
89384: ARRAY
89385: PUSH
89386: LD_VAR 0 1
89390: DIFF
89391: PPUSH
89392: CALL_OW 1
89396: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
89397: LD_VAR 0 1
89401: PUSH
89402: LD_EXP 55
89406: PUSH
89407: LD_VAR 0 3
89411: ARRAY
89412: IN
89413: IFFALSE 89452
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
89415: LD_ADDR_EXP 55
89419: PUSH
89420: LD_EXP 55
89424: PPUSH
89425: LD_VAR 0 3
89429: PPUSH
89430: LD_EXP 55
89434: PUSH
89435: LD_VAR 0 3
89439: ARRAY
89440: PUSH
89441: LD_VAR 0 1
89445: DIFF
89446: PPUSH
89447: CALL_OW 1
89451: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
89452: LD_VAR 0 1
89456: PUSH
89457: LD_EXP 58
89461: PUSH
89462: LD_VAR 0 3
89466: ARRAY
89467: IN
89468: IFFALSE 89507
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
89470: LD_ADDR_EXP 58
89474: PUSH
89475: LD_EXP 58
89479: PPUSH
89480: LD_VAR 0 3
89484: PPUSH
89485: LD_EXP 58
89489: PUSH
89490: LD_VAR 0 3
89494: ARRAY
89495: PUSH
89496: LD_VAR 0 1
89500: DIFF
89501: PPUSH
89502: CALL_OW 1
89506: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
89507: LD_VAR 0 1
89511: PUSH
89512: LD_EXP 45
89516: PUSH
89517: LD_VAR 0 3
89521: ARRAY
89522: IN
89523: IFFALSE 89562
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
89525: LD_ADDR_EXP 45
89529: PUSH
89530: LD_EXP 45
89534: PPUSH
89535: LD_VAR 0 3
89539: PPUSH
89540: LD_EXP 45
89544: PUSH
89545: LD_VAR 0 3
89549: ARRAY
89550: PUSH
89551: LD_VAR 0 1
89555: DIFF
89556: PPUSH
89557: CALL_OW 1
89561: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
89562: LD_VAR 0 1
89566: PUSH
89567: LD_EXP 44
89571: PUSH
89572: LD_VAR 0 3
89576: ARRAY
89577: IN
89578: IFFALSE 89617
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
89580: LD_ADDR_EXP 44
89584: PUSH
89585: LD_EXP 44
89589: PPUSH
89590: LD_VAR 0 3
89594: PPUSH
89595: LD_EXP 44
89599: PUSH
89600: LD_VAR 0 3
89604: ARRAY
89605: PUSH
89606: LD_VAR 0 1
89610: DIFF
89611: PPUSH
89612: CALL_OW 1
89616: ST_TO_ADDR
// end ; break ;
89617: GO 89621
// end ;
89619: GO 88546
89621: POP
89622: POP
// end ;
89623: LD_VAR 0 2
89627: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
89628: LD_INT 0
89630: PPUSH
89631: PPUSH
89632: PPUSH
// if not mc_bases or not skirmish then
89633: LD_EXP 36
89637: NOT
89638: PUSH
89639: LD_EXP 34
89643: NOT
89644: OR
89645: IFFALSE 89649
// exit ;
89647: GO 89864
// for i = 1 to mc_bases do
89649: LD_ADDR_VAR 0 3
89653: PUSH
89654: DOUBLE
89655: LD_INT 1
89657: DEC
89658: ST_TO_ADDR
89659: LD_EXP 36
89663: PUSH
89664: FOR_TO
89665: IFFALSE 89862
// begin if building in mc_construct_list [ i ] then
89667: LD_VAR 0 1
89671: PUSH
89672: LD_EXP 43
89676: PUSH
89677: LD_VAR 0 3
89681: ARRAY
89682: IN
89683: IFFALSE 89860
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
89685: LD_ADDR_EXP 43
89689: PUSH
89690: LD_EXP 43
89694: PPUSH
89695: LD_VAR 0 3
89699: PPUSH
89700: LD_EXP 43
89704: PUSH
89705: LD_VAR 0 3
89709: ARRAY
89710: PUSH
89711: LD_VAR 0 1
89715: DIFF
89716: PPUSH
89717: CALL_OW 1
89721: ST_TO_ADDR
// if building in mc_lab [ i ] then
89722: LD_VAR 0 1
89726: PUSH
89727: LD_EXP 69
89731: PUSH
89732: LD_VAR 0 3
89736: ARRAY
89737: IN
89738: IFFALSE 89793
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
89740: LD_ADDR_EXP 70
89744: PUSH
89745: LD_EXP 70
89749: PPUSH
89750: LD_VAR 0 3
89754: PPUSH
89755: LD_EXP 70
89759: PUSH
89760: LD_VAR 0 3
89764: ARRAY
89765: PPUSH
89766: LD_INT 1
89768: PPUSH
89769: LD_EXP 70
89773: PUSH
89774: LD_VAR 0 3
89778: ARRAY
89779: PPUSH
89780: LD_INT 0
89782: PPUSH
89783: CALL 25489 0 4
89787: PPUSH
89788: CALL_OW 1
89792: ST_TO_ADDR
// if not building in mc_bases [ i ] then
89793: LD_VAR 0 1
89797: PUSH
89798: LD_EXP 36
89802: PUSH
89803: LD_VAR 0 3
89807: ARRAY
89808: IN
89809: NOT
89810: IFFALSE 89856
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
89812: LD_ADDR_EXP 36
89816: PUSH
89817: LD_EXP 36
89821: PPUSH
89822: LD_VAR 0 3
89826: PUSH
89827: LD_EXP 36
89831: PUSH
89832: LD_VAR 0 3
89836: ARRAY
89837: PUSH
89838: LD_INT 1
89840: PLUS
89841: PUSH
89842: EMPTY
89843: LIST
89844: LIST
89845: PPUSH
89846: LD_VAR 0 1
89850: PPUSH
89851: CALL 26071 0 3
89855: ST_TO_ADDR
// exit ;
89856: POP
89857: POP
89858: GO 89864
// end ; end ;
89860: GO 89664
89862: POP
89863: POP
// end ;
89864: LD_VAR 0 2
89868: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
89869: LD_INT 0
89871: PPUSH
89872: PPUSH
89873: PPUSH
89874: PPUSH
89875: PPUSH
89876: PPUSH
89877: PPUSH
// if not mc_bases or not skirmish then
89878: LD_EXP 36
89882: NOT
89883: PUSH
89884: LD_EXP 34
89888: NOT
89889: OR
89890: IFFALSE 89894
// exit ;
89892: GO 90555
// for i = 1 to mc_bases do
89894: LD_ADDR_VAR 0 3
89898: PUSH
89899: DOUBLE
89900: LD_INT 1
89902: DEC
89903: ST_TO_ADDR
89904: LD_EXP 36
89908: PUSH
89909: FOR_TO
89910: IFFALSE 90553
// begin if building in mc_construct_list [ i ] then
89912: LD_VAR 0 1
89916: PUSH
89917: LD_EXP 43
89921: PUSH
89922: LD_VAR 0 3
89926: ARRAY
89927: IN
89928: IFFALSE 90551
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
89930: LD_ADDR_EXP 43
89934: PUSH
89935: LD_EXP 43
89939: PPUSH
89940: LD_VAR 0 3
89944: PPUSH
89945: LD_EXP 43
89949: PUSH
89950: LD_VAR 0 3
89954: ARRAY
89955: PUSH
89956: LD_VAR 0 1
89960: DIFF
89961: PPUSH
89962: CALL_OW 1
89966: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
89967: LD_ADDR_EXP 36
89971: PUSH
89972: LD_EXP 36
89976: PPUSH
89977: LD_VAR 0 3
89981: PUSH
89982: LD_EXP 36
89986: PUSH
89987: LD_VAR 0 3
89991: ARRAY
89992: PUSH
89993: LD_INT 1
89995: PLUS
89996: PUSH
89997: EMPTY
89998: LIST
89999: LIST
90000: PPUSH
90001: LD_VAR 0 1
90005: PPUSH
90006: CALL 26071 0 3
90010: ST_TO_ADDR
// btype := GetBType ( building ) ;
90011: LD_ADDR_VAR 0 5
90015: PUSH
90016: LD_VAR 0 1
90020: PPUSH
90021: CALL_OW 266
90025: ST_TO_ADDR
// side := GetSide ( building ) ;
90026: LD_ADDR_VAR 0 8
90030: PUSH
90031: LD_VAR 0 1
90035: PPUSH
90036: CALL_OW 255
90040: ST_TO_ADDR
// if btype = b_lab then
90041: LD_VAR 0 5
90045: PUSH
90046: LD_INT 6
90048: EQUAL
90049: IFFALSE 90099
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
90051: LD_ADDR_EXP 69
90055: PUSH
90056: LD_EXP 69
90060: PPUSH
90061: LD_VAR 0 3
90065: PUSH
90066: LD_EXP 69
90070: PUSH
90071: LD_VAR 0 3
90075: ARRAY
90076: PUSH
90077: LD_INT 1
90079: PLUS
90080: PUSH
90081: EMPTY
90082: LIST
90083: LIST
90084: PPUSH
90085: LD_VAR 0 1
90089: PPUSH
90090: CALL 26071 0 3
90094: ST_TO_ADDR
// exit ;
90095: POP
90096: POP
90097: GO 90555
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
90099: LD_VAR 0 5
90103: PUSH
90104: LD_INT 0
90106: PUSH
90107: LD_INT 2
90109: PUSH
90110: LD_INT 4
90112: PUSH
90113: EMPTY
90114: LIST
90115: LIST
90116: LIST
90117: IN
90118: IFFALSE 90242
// begin if btype = b_armoury then
90120: LD_VAR 0 5
90124: PUSH
90125: LD_INT 4
90127: EQUAL
90128: IFFALSE 90138
// btype := b_barracks ;
90130: LD_ADDR_VAR 0 5
90134: PUSH
90135: LD_INT 5
90137: ST_TO_ADDR
// if btype = b_depot then
90138: LD_VAR 0 5
90142: PUSH
90143: LD_INT 0
90145: EQUAL
90146: IFFALSE 90156
// btype := b_warehouse ;
90148: LD_ADDR_VAR 0 5
90152: PUSH
90153: LD_INT 1
90155: ST_TO_ADDR
// if btype = b_workshop then
90156: LD_VAR 0 5
90160: PUSH
90161: LD_INT 2
90163: EQUAL
90164: IFFALSE 90174
// btype := b_factory ;
90166: LD_ADDR_VAR 0 5
90170: PUSH
90171: LD_INT 3
90173: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
90174: LD_VAR 0 5
90178: PPUSH
90179: LD_VAR 0 8
90183: PPUSH
90184: CALL_OW 323
90188: PUSH
90189: LD_INT 1
90191: EQUAL
90192: IFFALSE 90238
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
90194: LD_ADDR_EXP 68
90198: PUSH
90199: LD_EXP 68
90203: PPUSH
90204: LD_VAR 0 3
90208: PUSH
90209: LD_EXP 68
90213: PUSH
90214: LD_VAR 0 3
90218: ARRAY
90219: PUSH
90220: LD_INT 1
90222: PLUS
90223: PUSH
90224: EMPTY
90225: LIST
90226: LIST
90227: PPUSH
90228: LD_VAR 0 1
90232: PPUSH
90233: CALL 26071 0 3
90237: ST_TO_ADDR
// exit ;
90238: POP
90239: POP
90240: GO 90555
// end ; if btype in [ b_bunker , b_turret ] then
90242: LD_VAR 0 5
90246: PUSH
90247: LD_INT 32
90249: PUSH
90250: LD_INT 33
90252: PUSH
90253: EMPTY
90254: LIST
90255: LIST
90256: IN
90257: IFFALSE 90547
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
90259: LD_ADDR_EXP 44
90263: PUSH
90264: LD_EXP 44
90268: PPUSH
90269: LD_VAR 0 3
90273: PUSH
90274: LD_EXP 44
90278: PUSH
90279: LD_VAR 0 3
90283: ARRAY
90284: PUSH
90285: LD_INT 1
90287: PLUS
90288: PUSH
90289: EMPTY
90290: LIST
90291: LIST
90292: PPUSH
90293: LD_VAR 0 1
90297: PPUSH
90298: CALL 26071 0 3
90302: ST_TO_ADDR
// if btype = b_bunker then
90303: LD_VAR 0 5
90307: PUSH
90308: LD_INT 32
90310: EQUAL
90311: IFFALSE 90547
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90313: LD_ADDR_EXP 45
90317: PUSH
90318: LD_EXP 45
90322: PPUSH
90323: LD_VAR 0 3
90327: PUSH
90328: LD_EXP 45
90332: PUSH
90333: LD_VAR 0 3
90337: ARRAY
90338: PUSH
90339: LD_INT 1
90341: PLUS
90342: PUSH
90343: EMPTY
90344: LIST
90345: LIST
90346: PPUSH
90347: LD_VAR 0 1
90351: PPUSH
90352: CALL 26071 0 3
90356: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
90357: LD_ADDR_VAR 0 6
90361: PUSH
90362: LD_EXP 36
90366: PUSH
90367: LD_VAR 0 3
90371: ARRAY
90372: PPUSH
90373: LD_INT 25
90375: PUSH
90376: LD_INT 1
90378: PUSH
90379: EMPTY
90380: LIST
90381: LIST
90382: PUSH
90383: LD_INT 3
90385: PUSH
90386: LD_INT 54
90388: PUSH
90389: EMPTY
90390: LIST
90391: PUSH
90392: EMPTY
90393: LIST
90394: LIST
90395: PUSH
90396: EMPTY
90397: LIST
90398: LIST
90399: PPUSH
90400: CALL_OW 72
90404: ST_TO_ADDR
// if tmp then
90405: LD_VAR 0 6
90409: IFFALSE 90415
// exit ;
90411: POP
90412: POP
90413: GO 90555
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
90415: LD_ADDR_VAR 0 6
90419: PUSH
90420: LD_EXP 36
90424: PUSH
90425: LD_VAR 0 3
90429: ARRAY
90430: PPUSH
90431: LD_INT 2
90433: PUSH
90434: LD_INT 30
90436: PUSH
90437: LD_INT 4
90439: PUSH
90440: EMPTY
90441: LIST
90442: LIST
90443: PUSH
90444: LD_INT 30
90446: PUSH
90447: LD_INT 5
90449: PUSH
90450: EMPTY
90451: LIST
90452: LIST
90453: PUSH
90454: EMPTY
90455: LIST
90456: LIST
90457: LIST
90458: PPUSH
90459: CALL_OW 72
90463: ST_TO_ADDR
// if not tmp then
90464: LD_VAR 0 6
90468: NOT
90469: IFFALSE 90475
// exit ;
90471: POP
90472: POP
90473: GO 90555
// for j in tmp do
90475: LD_ADDR_VAR 0 4
90479: PUSH
90480: LD_VAR 0 6
90484: PUSH
90485: FOR_IN
90486: IFFALSE 90545
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
90488: LD_ADDR_VAR 0 7
90492: PUSH
90493: LD_VAR 0 4
90497: PPUSH
90498: CALL_OW 313
90502: PPUSH
90503: LD_INT 25
90505: PUSH
90506: LD_INT 1
90508: PUSH
90509: EMPTY
90510: LIST
90511: LIST
90512: PPUSH
90513: CALL_OW 72
90517: ST_TO_ADDR
// if units then
90518: LD_VAR 0 7
90522: IFFALSE 90543
// begin ComExitBuilding ( units [ 1 ] ) ;
90524: LD_VAR 0 7
90528: PUSH
90529: LD_INT 1
90531: ARRAY
90532: PPUSH
90533: CALL_OW 122
// exit ;
90537: POP
90538: POP
90539: POP
90540: POP
90541: GO 90555
// end ; end ;
90543: GO 90485
90545: POP
90546: POP
// end ; end ; exit ;
90547: POP
90548: POP
90549: GO 90555
// end ; end ;
90551: GO 89909
90553: POP
90554: POP
// end ;
90555: LD_VAR 0 2
90559: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
90560: LD_INT 0
90562: PPUSH
90563: PPUSH
90564: PPUSH
90565: PPUSH
90566: PPUSH
90567: PPUSH
90568: PPUSH
// if not mc_bases or not skirmish then
90569: LD_EXP 36
90573: NOT
90574: PUSH
90575: LD_EXP 34
90579: NOT
90580: OR
90581: IFFALSE 90585
// exit ;
90583: GO 90816
// btype := GetBType ( building ) ;
90585: LD_ADDR_VAR 0 6
90589: PUSH
90590: LD_VAR 0 1
90594: PPUSH
90595: CALL_OW 266
90599: ST_TO_ADDR
// x := GetX ( building ) ;
90600: LD_ADDR_VAR 0 7
90604: PUSH
90605: LD_VAR 0 1
90609: PPUSH
90610: CALL_OW 250
90614: ST_TO_ADDR
// y := GetY ( building ) ;
90615: LD_ADDR_VAR 0 8
90619: PUSH
90620: LD_VAR 0 1
90624: PPUSH
90625: CALL_OW 251
90629: ST_TO_ADDR
// d := GetDir ( building ) ;
90630: LD_ADDR_VAR 0 9
90634: PUSH
90635: LD_VAR 0 1
90639: PPUSH
90640: CALL_OW 254
90644: ST_TO_ADDR
// for i = 1 to mc_bases do
90645: LD_ADDR_VAR 0 4
90649: PUSH
90650: DOUBLE
90651: LD_INT 1
90653: DEC
90654: ST_TO_ADDR
90655: LD_EXP 36
90659: PUSH
90660: FOR_TO
90661: IFFALSE 90814
// begin if not mc_build_list [ i ] then
90663: LD_EXP 41
90667: PUSH
90668: LD_VAR 0 4
90672: ARRAY
90673: NOT
90674: IFFALSE 90678
// continue ;
90676: GO 90660
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
90678: LD_VAR 0 6
90682: PUSH
90683: LD_VAR 0 7
90687: PUSH
90688: LD_VAR 0 8
90692: PUSH
90693: LD_VAR 0 9
90697: PUSH
90698: EMPTY
90699: LIST
90700: LIST
90701: LIST
90702: LIST
90703: PPUSH
90704: LD_EXP 41
90708: PUSH
90709: LD_VAR 0 4
90713: ARRAY
90714: PUSH
90715: LD_INT 1
90717: ARRAY
90718: PPUSH
90719: CALL 32240 0 2
90723: IFFALSE 90812
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
90725: LD_ADDR_EXP 41
90729: PUSH
90730: LD_EXP 41
90734: PPUSH
90735: LD_VAR 0 4
90739: PPUSH
90740: LD_EXP 41
90744: PUSH
90745: LD_VAR 0 4
90749: ARRAY
90750: PPUSH
90751: LD_INT 1
90753: PPUSH
90754: CALL_OW 3
90758: PPUSH
90759: CALL_OW 1
90763: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
90764: LD_ADDR_EXP 43
90768: PUSH
90769: LD_EXP 43
90773: PPUSH
90774: LD_VAR 0 4
90778: PUSH
90779: LD_EXP 43
90783: PUSH
90784: LD_VAR 0 4
90788: ARRAY
90789: PUSH
90790: LD_INT 1
90792: PLUS
90793: PUSH
90794: EMPTY
90795: LIST
90796: LIST
90797: PPUSH
90798: LD_VAR 0 1
90802: PPUSH
90803: CALL 26071 0 3
90807: ST_TO_ADDR
// exit ;
90808: POP
90809: POP
90810: GO 90816
// end ; end ;
90812: GO 90660
90814: POP
90815: POP
// end ;
90816: LD_VAR 0 3
90820: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
90821: LD_INT 0
90823: PPUSH
90824: PPUSH
90825: PPUSH
// if not mc_bases or not skirmish then
90826: LD_EXP 36
90830: NOT
90831: PUSH
90832: LD_EXP 34
90836: NOT
90837: OR
90838: IFFALSE 90842
// exit ;
90840: GO 91032
// for i = 1 to mc_bases do
90842: LD_ADDR_VAR 0 4
90846: PUSH
90847: DOUBLE
90848: LD_INT 1
90850: DEC
90851: ST_TO_ADDR
90852: LD_EXP 36
90856: PUSH
90857: FOR_TO
90858: IFFALSE 90945
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
90860: LD_VAR 0 1
90864: PUSH
90865: LD_EXP 44
90869: PUSH
90870: LD_VAR 0 4
90874: ARRAY
90875: IN
90876: PUSH
90877: LD_VAR 0 1
90881: PUSH
90882: LD_EXP 45
90886: PUSH
90887: LD_VAR 0 4
90891: ARRAY
90892: IN
90893: NOT
90894: AND
90895: IFFALSE 90943
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90897: LD_ADDR_EXP 45
90901: PUSH
90902: LD_EXP 45
90906: PPUSH
90907: LD_VAR 0 4
90911: PUSH
90912: LD_EXP 45
90916: PUSH
90917: LD_VAR 0 4
90921: ARRAY
90922: PUSH
90923: LD_INT 1
90925: PLUS
90926: PUSH
90927: EMPTY
90928: LIST
90929: LIST
90930: PPUSH
90931: LD_VAR 0 1
90935: PPUSH
90936: CALL 26071 0 3
90940: ST_TO_ADDR
// break ;
90941: GO 90945
// end ; end ;
90943: GO 90857
90945: POP
90946: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
90947: LD_VAR 0 1
90951: PPUSH
90952: CALL_OW 257
90956: PUSH
90957: LD_EXP 62
90961: IN
90962: PUSH
90963: LD_VAR 0 1
90967: PPUSH
90968: CALL_OW 266
90972: PUSH
90973: LD_INT 5
90975: EQUAL
90976: AND
90977: PUSH
90978: LD_VAR 0 2
90982: PPUSH
90983: CALL_OW 110
90987: PUSH
90988: LD_INT 18
90990: NONEQUAL
90991: AND
90992: IFFALSE 91032
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
90994: LD_VAR 0 2
90998: PPUSH
90999: CALL_OW 257
91003: PUSH
91004: LD_INT 5
91006: PUSH
91007: LD_INT 8
91009: PUSH
91010: LD_INT 9
91012: PUSH
91013: EMPTY
91014: LIST
91015: LIST
91016: LIST
91017: IN
91018: IFFALSE 91032
// SetClass ( unit , 1 ) ;
91020: LD_VAR 0 2
91024: PPUSH
91025: LD_INT 1
91027: PPUSH
91028: CALL_OW 336
// end ;
91032: LD_VAR 0 3
91036: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
91037: LD_INT 0
91039: PPUSH
91040: PPUSH
// if not mc_bases or not skirmish then
91041: LD_EXP 36
91045: NOT
91046: PUSH
91047: LD_EXP 34
91051: NOT
91052: OR
91053: IFFALSE 91057
// exit ;
91055: GO 91173
// if GetLives ( abandoned_vehicle ) > 250 then
91057: LD_VAR 0 2
91061: PPUSH
91062: CALL_OW 256
91066: PUSH
91067: LD_INT 250
91069: GREATER
91070: IFFALSE 91074
// exit ;
91072: GO 91173
// for i = 1 to mc_bases do
91074: LD_ADDR_VAR 0 6
91078: PUSH
91079: DOUBLE
91080: LD_INT 1
91082: DEC
91083: ST_TO_ADDR
91084: LD_EXP 36
91088: PUSH
91089: FOR_TO
91090: IFFALSE 91171
// begin if driver in mc_bases [ i ] then
91092: LD_VAR 0 1
91096: PUSH
91097: LD_EXP 36
91101: PUSH
91102: LD_VAR 0 6
91106: ARRAY
91107: IN
91108: IFFALSE 91169
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
91110: LD_VAR 0 1
91114: PPUSH
91115: LD_EXP 36
91119: PUSH
91120: LD_VAR 0 6
91124: ARRAY
91125: PPUSH
91126: LD_INT 2
91128: PUSH
91129: LD_INT 30
91131: PUSH
91132: LD_INT 0
91134: PUSH
91135: EMPTY
91136: LIST
91137: LIST
91138: PUSH
91139: LD_INT 30
91141: PUSH
91142: LD_INT 1
91144: PUSH
91145: EMPTY
91146: LIST
91147: LIST
91148: PUSH
91149: EMPTY
91150: LIST
91151: LIST
91152: LIST
91153: PPUSH
91154: CALL_OW 72
91158: PUSH
91159: LD_INT 1
91161: ARRAY
91162: PPUSH
91163: CALL_OW 112
// break ;
91167: GO 91171
// end ; end ;
91169: GO 91089
91171: POP
91172: POP
// end ; end_of_file end_of_file end_of_file
91173: LD_VAR 0 5
91177: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
91178: LD_INT 0
91180: PPUSH
91181: PPUSH
91182: PPUSH
91183: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
91184: LD_VAR 0 1
91188: PPUSH
91189: CALL_OW 264
91193: PUSH
91194: LD_EXP 33
91198: EQUAL
91199: IFFALSE 91271
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
91201: LD_INT 68
91203: PPUSH
91204: LD_VAR 0 1
91208: PPUSH
91209: CALL_OW 255
91213: PPUSH
91214: CALL_OW 321
91218: PUSH
91219: LD_INT 2
91221: EQUAL
91222: IFFALSE 91234
// eff := 70 else
91224: LD_ADDR_VAR 0 6
91228: PUSH
91229: LD_INT 70
91231: ST_TO_ADDR
91232: GO 91242
// eff := 30 ;
91234: LD_ADDR_VAR 0 6
91238: PUSH
91239: LD_INT 30
91241: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
91242: LD_VAR 0 1
91246: PPUSH
91247: CALL_OW 250
91251: PPUSH
91252: LD_VAR 0 1
91256: PPUSH
91257: CALL_OW 251
91261: PPUSH
91262: LD_VAR 0 6
91266: PPUSH
91267: CALL_OW 495
// end ; end ;
91271: LD_VAR 0 4
91275: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
91276: LD_INT 0
91278: PPUSH
91279: PPUSH
91280: PPUSH
91281: PPUSH
91282: PPUSH
91283: PPUSH
// if cmd = 124 then
91284: LD_VAR 0 1
91288: PUSH
91289: LD_INT 124
91291: EQUAL
91292: IFFALSE 91498
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
91294: LD_ADDR_VAR 0 5
91298: PUSH
91299: LD_INT 2
91301: PUSH
91302: LD_INT 34
91304: PUSH
91305: LD_INT 53
91307: PUSH
91308: EMPTY
91309: LIST
91310: LIST
91311: PUSH
91312: LD_INT 34
91314: PUSH
91315: LD_INT 14
91317: PUSH
91318: EMPTY
91319: LIST
91320: LIST
91321: PUSH
91322: EMPTY
91323: LIST
91324: LIST
91325: LIST
91326: PPUSH
91327: CALL_OW 69
91331: ST_TO_ADDR
// if not tmp then
91332: LD_VAR 0 5
91336: NOT
91337: IFFALSE 91341
// exit ;
91339: GO 91498
// for i in tmp do
91341: LD_ADDR_VAR 0 3
91345: PUSH
91346: LD_VAR 0 5
91350: PUSH
91351: FOR_IN
91352: IFFALSE 91496
// begin taskList := GetTaskList ( i ) ;
91354: LD_ADDR_VAR 0 6
91358: PUSH
91359: LD_VAR 0 3
91363: PPUSH
91364: CALL_OW 437
91368: ST_TO_ADDR
// if not taskList then
91369: LD_VAR 0 6
91373: NOT
91374: IFFALSE 91378
// continue ;
91376: GO 91351
// for j = 1 to taskList do
91378: LD_ADDR_VAR 0 4
91382: PUSH
91383: DOUBLE
91384: LD_INT 1
91386: DEC
91387: ST_TO_ADDR
91388: LD_VAR 0 6
91392: PUSH
91393: FOR_TO
91394: IFFALSE 91492
// if taskList [ j ] [ 1 ] = | then
91396: LD_VAR 0 6
91400: PUSH
91401: LD_VAR 0 4
91405: ARRAY
91406: PUSH
91407: LD_INT 1
91409: ARRAY
91410: PUSH
91411: LD_STRING |
91413: EQUAL
91414: IFFALSE 91490
// begin _taskList := Delete ( taskList , 1 ) ;
91416: LD_ADDR_VAR 0 7
91420: PUSH
91421: LD_VAR 0 6
91425: PPUSH
91426: LD_INT 1
91428: PPUSH
91429: CALL_OW 3
91433: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
91434: LD_VAR 0 3
91438: PPUSH
91439: LD_VAR 0 7
91443: PPUSH
91444: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
91448: LD_VAR 0 3
91452: PPUSH
91453: LD_VAR 0 6
91457: PUSH
91458: LD_VAR 0 4
91462: ARRAY
91463: PUSH
91464: LD_INT 2
91466: ARRAY
91467: PPUSH
91468: LD_VAR 0 6
91472: PUSH
91473: LD_VAR 0 4
91477: ARRAY
91478: PUSH
91479: LD_INT 3
91481: ARRAY
91482: PPUSH
91483: LD_INT 8
91485: PPUSH
91486: CALL 91503 0 4
// end ;
91490: GO 91393
91492: POP
91493: POP
// end ;
91494: GO 91351
91496: POP
91497: POP
// end ; end ;
91498: LD_VAR 0 2
91502: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
91503: LD_INT 0
91505: PPUSH
91506: PPUSH
91507: PPUSH
91508: PPUSH
91509: PPUSH
91510: PPUSH
91511: PPUSH
91512: PPUSH
91513: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
91514: LD_VAR 0 1
91518: NOT
91519: PUSH
91520: LD_VAR 0 2
91524: PPUSH
91525: LD_VAR 0 3
91529: PPUSH
91530: CALL_OW 488
91534: NOT
91535: OR
91536: PUSH
91537: LD_VAR 0 4
91541: NOT
91542: OR
91543: IFFALSE 91547
// exit ;
91545: GO 91887
// list := [ ] ;
91547: LD_ADDR_VAR 0 13
91551: PUSH
91552: EMPTY
91553: ST_TO_ADDR
// if x - r < 0 then
91554: LD_VAR 0 2
91558: PUSH
91559: LD_VAR 0 4
91563: MINUS
91564: PUSH
91565: LD_INT 0
91567: LESS
91568: IFFALSE 91580
// min_x := 0 else
91570: LD_ADDR_VAR 0 7
91574: PUSH
91575: LD_INT 0
91577: ST_TO_ADDR
91578: GO 91596
// min_x := x - r ;
91580: LD_ADDR_VAR 0 7
91584: PUSH
91585: LD_VAR 0 2
91589: PUSH
91590: LD_VAR 0 4
91594: MINUS
91595: ST_TO_ADDR
// if y - r < 0 then
91596: LD_VAR 0 3
91600: PUSH
91601: LD_VAR 0 4
91605: MINUS
91606: PUSH
91607: LD_INT 0
91609: LESS
91610: IFFALSE 91622
// min_y := 0 else
91612: LD_ADDR_VAR 0 8
91616: PUSH
91617: LD_INT 0
91619: ST_TO_ADDR
91620: GO 91638
// min_y := y - r ;
91622: LD_ADDR_VAR 0 8
91626: PUSH
91627: LD_VAR 0 3
91631: PUSH
91632: LD_VAR 0 4
91636: MINUS
91637: ST_TO_ADDR
// max_x := x + r ;
91638: LD_ADDR_VAR 0 9
91642: PUSH
91643: LD_VAR 0 2
91647: PUSH
91648: LD_VAR 0 4
91652: PLUS
91653: ST_TO_ADDR
// max_y := y + r ;
91654: LD_ADDR_VAR 0 10
91658: PUSH
91659: LD_VAR 0 3
91663: PUSH
91664: LD_VAR 0 4
91668: PLUS
91669: ST_TO_ADDR
// for _x = min_x to max_x do
91670: LD_ADDR_VAR 0 11
91674: PUSH
91675: DOUBLE
91676: LD_VAR 0 7
91680: DEC
91681: ST_TO_ADDR
91682: LD_VAR 0 9
91686: PUSH
91687: FOR_TO
91688: IFFALSE 91805
// for _y = min_y to max_y do
91690: LD_ADDR_VAR 0 12
91694: PUSH
91695: DOUBLE
91696: LD_VAR 0 8
91700: DEC
91701: ST_TO_ADDR
91702: LD_VAR 0 10
91706: PUSH
91707: FOR_TO
91708: IFFALSE 91801
// begin if not ValidHex ( _x , _y ) then
91710: LD_VAR 0 11
91714: PPUSH
91715: LD_VAR 0 12
91719: PPUSH
91720: CALL_OW 488
91724: NOT
91725: IFFALSE 91729
// continue ;
91727: GO 91707
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91729: LD_VAR 0 11
91733: PPUSH
91734: LD_VAR 0 12
91738: PPUSH
91739: CALL_OW 351
91743: PUSH
91744: LD_VAR 0 11
91748: PPUSH
91749: LD_VAR 0 12
91753: PPUSH
91754: CALL_OW 554
91758: AND
91759: IFFALSE 91799
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91761: LD_ADDR_VAR 0 13
91765: PUSH
91766: LD_VAR 0 13
91770: PPUSH
91771: LD_VAR 0 13
91775: PUSH
91776: LD_INT 1
91778: PLUS
91779: PPUSH
91780: LD_VAR 0 11
91784: PUSH
91785: LD_VAR 0 12
91789: PUSH
91790: EMPTY
91791: LIST
91792: LIST
91793: PPUSH
91794: CALL_OW 2
91798: ST_TO_ADDR
// end ;
91799: GO 91707
91801: POP
91802: POP
91803: GO 91687
91805: POP
91806: POP
// if not list then
91807: LD_VAR 0 13
91811: NOT
91812: IFFALSE 91816
// exit ;
91814: GO 91887
// for i in list do
91816: LD_ADDR_VAR 0 6
91820: PUSH
91821: LD_VAR 0 13
91825: PUSH
91826: FOR_IN
91827: IFFALSE 91885
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
91829: LD_VAR 0 1
91833: PPUSH
91834: LD_STRING M
91836: PUSH
91837: LD_VAR 0 6
91841: PUSH
91842: LD_INT 1
91844: ARRAY
91845: PUSH
91846: LD_VAR 0 6
91850: PUSH
91851: LD_INT 2
91853: ARRAY
91854: PUSH
91855: LD_INT 0
91857: PUSH
91858: LD_INT 0
91860: PUSH
91861: LD_INT 0
91863: PUSH
91864: LD_INT 0
91866: PUSH
91867: EMPTY
91868: LIST
91869: LIST
91870: LIST
91871: LIST
91872: LIST
91873: LIST
91874: LIST
91875: PUSH
91876: EMPTY
91877: LIST
91878: PPUSH
91879: CALL_OW 447
91883: GO 91826
91885: POP
91886: POP
// end ;
91887: LD_VAR 0 5
91891: RET
